
us3_mshield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010cf0  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000064  00012cf0  00012cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000300  20000000  00012d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001cac  20000300  00013054  00020300  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
  6 .debug_info   000f63dc  00000000  00000000  00020381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000126b8  00000000  00000000  0011675d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001a5d4  00000000  00000000  00128e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001980  00000000  00000000  001433e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002aa0  00000000  00000000  00144d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000188e1  00000000  00000000  00147809  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002984d  00000000  00000000  001600ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009f715  00000000  00000000  00189937  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000629c  00000000  00000000  0022904c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stab         000000cc  00000000  00000000  0022f2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      000001b9  00000000  00000000  0022f3b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 f5 25 00 00 d9 25 00 00 f1 25 00 00     ... .%...%...%..
	...
    202c:	d9 25 00 00 00 00 00 00 00 00 00 00 d9 25 00 00     .%...........%..
    203c:	49 26 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     I&...%...%...%..
    204c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 dd 25 00 00     .%...%...%...%..
    205c:	d9 25 00 00 2d 4c 00 00 d9 25 00 00 d9 25 00 00     .%..-L...%...%..
    206c:	3d 4c 00 00 1d 4c 00 00 d9 25 00 00 d9 25 00 00     =L...L...%...%..
    207c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    208c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    209c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    20ac:	d9 25 00 00 00 00 00 00                             .%......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000300 	.word	0x20000300
    20d4:	00000000 	.word	0x00000000
    20d8:	00012cec 	.word	0x00012cec

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000304 	.word	0x20000304
    2108:	00012cec 	.word	0x00012cec
    210c:	200002fc 	.word	0x200002fc
    2110:	00000000 	.word	0x00000000

00002114 <setup>:

//
//  Arduino setup function.
//
void setup()
{
    2114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sapi_error_t rcode;
	
	// Initialize Sensor API
	sapi_initialize(NULL);
    2116:	2000      	movs	r0, #0
    2118:	f002 fc5e 	bl	49d8 <_Z15sapi_initializePc>
	
	// Register temp sensor
	temp_sensor_id = sapi_register_sensor(TEMP_SENSOR_TYPE, temp_init_sensor, temp_read_sensor, temp_read_cfg, temp_write_cfg, 1, 60);
    211c:	233c      	movs	r3, #60	; 0x3c
    211e:	9302      	str	r3, [sp, #8]
    2120:	3b3b      	subs	r3, #59	; 0x3b
    2122:	9301      	str	r3, [sp, #4]
    2124:	4b05      	ldr	r3, [pc, #20]	; (213c <setup+0x28>)
    2126:	4a06      	ldr	r2, [pc, #24]	; (2140 <setup+0x2c>)
    2128:	9300      	str	r3, [sp, #0]
    212a:	4906      	ldr	r1, [pc, #24]	; (2144 <setup+0x30>)
    212c:	4b06      	ldr	r3, [pc, #24]	; (2148 <setup+0x34>)
    212e:	4807      	ldr	r0, [pc, #28]	; (214c <setup+0x38>)
    2130:	f002 fa1a 	bl	4568 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>
	
	// Initialize temp sensor
	rcode = sapi_init_sensor(temp_sensor_id);
    2134:	f002 fa60 	bl	45f8 <_Z16sapi_init_sensorh>
	
	// Initialize echo sensor
	//rcode = sapi_init_sensor(echo_sensor_id);
	
	
}
    2138:	b005      	add	sp, #20
    213a:	bd00      	pop	{pc}
    213c:	0000215d 	.word	0x0000215d
    2140:	00002439 	.word	0x00002439
    2144:	00002485 	.word	0x00002485
    2148:	000023a5 	.word	0x000023a5
    214c:	00010bec 	.word	0x00010bec

00002150 <loop>:

//
// Arduino main loop function.
//
void loop()
{
    2150:	b510      	push	{r4, lr}
	// Call SAPI run to do the heavy lifting
	sapi_run();
    2152:	f002 fd0f 	bl	4b74 <_Z8sapi_runv>

    2156:	bd10      	pop	{r4, pc}

00002158 <_ZN11DHT_UnifiedD1Ev>:
#include <Adafruit_Sensor.h>
#include <DHT.h>

#define DHT_SENSOR_VERSION 1

class DHT_Unified {
    2158:	4770      	bx	lr
	...

0000215c <_Z14temp_write_cfgPcPh>:
// Write sensor configuration. Processes payload sent from client. Callback called on
//  CoAP Put configuration value
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_write_cfg(char *payload, uint8_t *len)
{
    215c:	b510      	push	{r4, lr}
	if (!strcmp(payload, "cfg=C"))
    215e:	490b      	ldr	r1, [pc, #44]	; (218c <_Z14temp_write_cfgPcPh+0x30>)
{
    2160:	0004      	movs	r4, r0
	if (!strcmp(payload, "cfg=C"))
    2162:	f00b fdae 	bl	dcc2 <strcmp>
    2166:	2800      	cmp	r0, #0
    2168:	d103      	bne.n	2172 <_Z14temp_write_cfgPcPh+0x16>
	{
		context.scalecfg = CELSIUS_SCALE;
    216a:	2243      	movs	r2, #67	; 0x43
    216c:	4b08      	ldr	r3, [pc, #32]	; (2190 <_Z14temp_write_cfgPcPh+0x34>)
    216e:	701a      	strb	r2, [r3, #0]
	{
		return SAPI_ERR_NOT_IMPLEMENTED;
	}

	return SAPI_ERR_OK;
}
    2170:	bd10      	pop	{r4, pc}
	else if (!strcmp(payload, "cfg=F"))
    2172:	4908      	ldr	r1, [pc, #32]	; (2194 <_Z14temp_write_cfgPcPh+0x38>)
    2174:	0020      	movs	r0, r4
    2176:	f00b fda4 	bl	dcc2 <strcmp>
    217a:	0003      	movs	r3, r0
		return SAPI_ERR_NOT_IMPLEMENTED;
    217c:	2001      	movs	r0, #1
	else if (!strcmp(payload, "cfg=F"))
    217e:	2b00      	cmp	r3, #0
    2180:	d1f6      	bne.n	2170 <_Z14temp_write_cfgPcPh+0x14>
		context.scalecfg = FAHRENHEIT_SCALE;
    2182:	2146      	movs	r1, #70	; 0x46
    2184:	4a02      	ldr	r2, [pc, #8]	; (2190 <_Z14temp_write_cfgPcPh+0x34>)
	return SAPI_ERR_OK;
    2186:	0018      	movs	r0, r3
		context.scalecfg = FAHRENHEIT_SCALE;
    2188:	7011      	strb	r1, [r2, #0]
    218a:	e7f1      	b.n	2170 <_Z14temp_write_cfgPcPh+0x14>
    218c:	00010bf1 	.word	0x00010bf1
    2190:	20000320 	.word	0x20000320
    2194:	00010bf7 	.word	0x00010bf7

00002198 <_Z16calculateVoltagev>:
 * relay have to be powered with 3.3V
 * LOW to turn on
 * HIGH to turn off
 */
//digitalWrite(pinRelay, LOW); // turn on tehe light
float calculateVoltage(){
    2198:	b530      	push	{r4, r5, lr}
    219a:	b0a3      	sub	sp, #140	; 0x8c
  //digitalWrite(pinRelay, LOW); //turn on the light
  //analogWrite(pinRelay, 255);
  // Measuring Voltage
  RunningStatistics inputStats;
    219c:	a801      	add	r0, sp, #4
    219e:	f001 ff3a 	bl	4016 <_ZN17RunningStatisticsC1Ev>
  inputStats.setWindowSecs( windowLength );
    21a2:	4b17      	ldr	r3, [pc, #92]	; (2200 <_Z16calculateVoltagev+0x68>)
    21a4:	a801      	add	r0, sp, #4
    21a6:	6819      	ldr	r1, [r3, #0]
    21a8:	f001 ff10 	bl	3fcc <_ZN17RunningStatistics13setWindowSecsEf>

  //take 10000 samples to get more accurate reading
  while(temp != 10000){
    21ac:	4c15      	ldr	r4, [pc, #84]	; (2204 <_Z16calculateVoltagev+0x6c>)
    21ae:	4b16      	ldr	r3, [pc, #88]	; (2208 <_Z16calculateVoltagev+0x70>)
    21b0:	6822      	ldr	r2, [r4, #0]
    21b2:	4d16      	ldr	r5, [pc, #88]	; (220c <_Z16calculateVoltagev+0x74>)
    21b4:	429a      	cmp	r2, r3
    21b6:	d01e      	beq.n	21f6 <_Z16calculateVoltagev+0x5e>
    rawValue = analogRead(A4);
    21b8:	2005      	movs	r0, #5
    21ba:	f001 fc3b 	bl	3a34 <analogRead>
    21be:	4b14      	ldr	r3, [pc, #80]	; (2210 <_Z16calculateVoltagev+0x78>)
    21c0:	6018      	str	r0, [r3, #0]
    inputStats.input(rawValue);
    21c2:	f008 fba9 	bl	a918 <__aeabi_i2f>
    21c6:	1c01      	adds	r1, r0, #0
    21c8:	a801      	add	r0, sp, #4
    21ca:	f001 ff3f 	bl	404c <_ZN17RunningStatistics5inputEf>

    //Serial.print("Raw Value : ");
    //Serial.println(inputStats.sigma());

    voltageReading = slope * inputStats.sigma();
    21ce:	a801      	add	r0, sp, #4
    21d0:	f001 ff6b 	bl	40aa <_ZN17RunningStatistics5sigmaEv>
    21d4:	4b0f      	ldr	r3, [pc, #60]	; (2214 <_Z16calculateVoltagev+0x7c>)
    21d6:	6819      	ldr	r1, [r3, #0]
    21d8:	f008 f8aa 	bl	a330 <__aeabi_fmul>
    //voltageReading = voltageReading * 40.3231;
    voltageReading = voltageReading * 47.1931;
    21dc:	f00a f9da 	bl	c594 <__aeabi_f2d>
    21e0:	4b0d      	ldr	r3, [pc, #52]	; (2218 <_Z16calculateVoltagev+0x80>)
    21e2:	4a0e      	ldr	r2, [pc, #56]	; (221c <_Z16calculateVoltagev+0x84>)
    21e4:	f009 fb72 	bl	b8cc <__aeabi_dmul>
    21e8:	f00a fa26 	bl	c638 <__aeabi_d2f>

    temp = temp + 1;
    21ec:	6823      	ldr	r3, [r4, #0]
    voltageReading = voltageReading * 47.1931;
    21ee:	6028      	str	r0, [r5, #0]
    temp = temp + 1;
    21f0:	3301      	adds	r3, #1
    21f2:	6023      	str	r3, [r4, #0]
  while(temp != 10000){
    21f4:	e7da      	b.n	21ac <_Z16calculateVoltagev+0x14>
  }
	temp = 0;
    21f6:	2300      	movs	r3, #0
  //Serial.print("Voltage = ");
  //Serial.println(voltageReading);

  return voltageReading;
    21f8:	6828      	ldr	r0, [r5, #0]
	temp = 0;
    21fa:	6023      	str	r3, [r4, #0]
 }
    21fc:	b023      	add	sp, #140	; 0x8c
    21fe:	bd30      	pop	{r4, r5, pc}
    2200:	2000036c 	.word	0x2000036c
    2204:	20000364 	.word	0x20000364
    2208:	00002710 	.word	0x00002710
    220c:	20000368 	.word	0x20000368
    2210:	20000360 	.word	0x20000360
    2214:	20000004 	.word	0x20000004
    2218:	404798b7 	.word	0x404798b7
    221c:	80346dc6 	.word	0x80346dc6

00002220 <_Z18readACCurrentValuev>:

 float readACCurrentValue()
{
    2220:	b570      	push	{r4, r5, r6, lr}
  float ACCurrtntValue = 0;
  unsigned int peakVoltage = 0;
    2222:	2400      	movs	r4, #0
{
    2224:	4d17      	ldr	r5, [pc, #92]	; (2284 <_Z18readACCurrentValuev+0x64>)
  unsigned int voltageVirtualValue = 0;  //Vrms
  for (int i = 0; i < 3000; i++ )
  {
    peakVoltage  += analogRead(ACPin);   //read peak voltage
    2226:	2022      	movs	r0, #34	; 0x22
    2228:	f001 fc04 	bl	3a34 <analogRead>
    222c:	3d01      	subs	r5, #1
    222e:	1824      	adds	r4, r4, r0
    delay(1);
    2230:	2001      	movs	r0, #1
    2232:	f000 fa4d 	bl	26d0 <delay>
  for (int i = 0; i < 3000; i++ )
    2236:	2d00      	cmp	r5, #0
    2238:	d1f5      	bne.n	2226 <_Z18readACCurrentValuev+0x6>
  }
  peakVoltage = peakVoltage / 5;
    223a:	2105      	movs	r1, #5
    223c:	0020      	movs	r0, r4
    223e:	f007 fad1 	bl	97e4 <__udivsi3>
  voltageVirtualValue = peakVoltage * 0.707;    //change the peak voltage to the Virtual Value of voltage
    2242:	f00a f96f 	bl	c524 <__aeabi_ui2d>
    2246:	4a10      	ldr	r2, [pc, #64]	; (2288 <_Z18readACCurrentValuev+0x68>)
    2248:	4b10      	ldr	r3, [pc, #64]	; (228c <_Z18readACCurrentValuev+0x6c>)
    224a:	f009 fb3f 	bl	b8cc <__aeabi_dmul>
    224e:	f007 fccf 	bl	9bf0 <__aeabi_d2uiz>

  /*The circuit is amplified by 2 times, so it is divided by 2.*/
  voltageVirtualValue = (voltageVirtualValue * Vref / 1024) / 2;
    2252:	f008 fbb1 	bl	a9b8 <__aeabi_ui2f>
    2256:	4b0e      	ldr	r3, [pc, #56]	; (2290 <_Z18readACCurrentValuev+0x70>)
    2258:	6819      	ldr	r1, [r3, #0]
    225a:	f008 f869 	bl	a330 <__aeabi_fmul>
    225e:	21ea      	movs	r1, #234	; 0xea
    2260:	0589      	lsls	r1, r1, #22
    2262:	f008 f865 	bl	a330 <__aeabi_fmul>
    2266:	21fc      	movs	r1, #252	; 0xfc
    2268:	0589      	lsls	r1, r1, #22
    226a:	f008 f861 	bl	a330 <__aeabi_fmul>
    226e:	f007 fca7 	bl	9bc0 <__aeabi_f2uiz>

  ACCurrtntValue = voltageVirtualValue * ACTectionRange;
    2272:	2314      	movs	r3, #20
    2274:	4358      	muls	r0, r3
    2276:	f008 fb9f 	bl	a9b8 <__aeabi_ui2f>

  return ACCurrtntValue/1000;
    227a:	4906      	ldr	r1, [pc, #24]	; (2294 <_Z18readACCurrentValuev+0x74>)
    227c:	f007 fe68 	bl	9f50 <__aeabi_fdiv>
}
    2280:	bd70      	pop	{r4, r5, r6, pc}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	00000bb8 	.word	0x00000bb8
    2288:	76c8b439 	.word	0x76c8b439
    228c:	3fe69fbe 	.word	0x3fe69fbe
    2290:	2000031c 	.word	0x2000031c
    2294:	447a0000 	.word	0x447a0000

00002298 <_Z18temp_build_payloadPcPf>:
//
//  Note that the payload is text. Payloads can also be a byte array of binary data.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_build_payload(char *buf, float *reading)
{
    2298:	b5f0      	push	{r4, r5, r6, r7, lr}
	char 		payload[64];
	char		reading_buf[32];
	char        datatype30[] = "30,";
    229a:	4b38      	ldr	r3, [pc, #224]	; (237c <_Z18temp_build_payloadPcPf+0xe4>)
{
    229c:	b09f      	sub	sp, #124	; 0x7c
	char        datatype30[] = "30,";
    229e:	9302      	str	r3, [sp, #8]
	char		datatype31[] = "31,"; //current datatype is 31
    22a0:	4b37      	ldr	r3, [pc, #220]	; (2380 <_Z18temp_build_payloadPcPf+0xe8>)
	char		unitVoltage[] = "V";
    22a2:	466a      	mov	r2, sp
	char		datatype31[] = "31,"; //current datatype is 31
    22a4:	9303      	str	r3, [sp, #12]
	char		unitVoltage[] = "V";
    22a6:	2356      	movs	r3, #86	; 0x56
{
    22a8:	0007      	movs	r7, r0
	char		unitVoltage[] = "V";
    22aa:	8013      	strh	r3, [r2, #0]
	char		unitCurrent[] = "A";
    22ac:	ac01      	add	r4, sp, #4
    22ae:	3b15      	subs	r3, #21
	char		unit_buf[4];
	time_t     	epoch;
	uint32_t	indx;
	char    rvoltage[] = "120.00,";
    22b0:	2208      	movs	r2, #8
    22b2:	4934      	ldr	r1, [pc, #208]	; (2384 <_Z18temp_build_payloadPcPf+0xec>)
    22b4:	a807      	add	r0, sp, #28
	char		unitCurrent[] = "A";
    22b6:	8023      	strh	r3, [r4, #0]
	char    rvoltage[] = "120.00,";
    22b8:	f00a fbe3 	bl	ca82 <memcpy>
	char    rcurrent[] = "0.23,";
    22bc:	4932      	ldr	r1, [pc, #200]	; (2388 <_Z18temp_build_payloadPcPf+0xf0>)
    22be:	2206      	movs	r2, #6
    22c0:	a805      	add	r0, sp, #20
    22c2:	f00a fbde 	bl	ca82 <memcpy>
	char    temp_epoch[20];
	
	
	
	Vref = readVref();
    22c6:	4a31      	ldr	r2, [pc, #196]	; (238c <_Z18temp_build_payloadPcPf+0xf4>)
    22c8:	4b31      	ldr	r3, [pc, #196]	; (2390 <_Z18temp_build_payloadPcPf+0xf8>)
    22ca:	601a      	str	r2, [r3, #0]
	sprintf(rvoltage, "%.2f,", calculateVoltage());
    22cc:	f7ff ff64 	bl	2198 <_Z16calculateVoltagev>
    22d0:	f00a f960 	bl	c594 <__aeabi_f2d>
    22d4:	4d2f      	ldr	r5, [pc, #188]	; (2394 <_Z18temp_build_payloadPcPf+0xfc>)
    22d6:	0002      	movs	r2, r0
    22d8:	000b      	movs	r3, r1
    22da:	a807      	add	r0, sp, #28
    22dc:	0029      	movs	r1, r5
    22de:	f00b fcc1 	bl	dc64 <siprintf>
	sprintf(rcurrent, "%.2f,", readACCurrentValue());
    22e2:	f7ff ff9d 	bl	2220 <_Z18readACCurrentValuev>
    22e6:	f00a f955 	bl	c594 <__aeabi_f2d>
    22ea:	000b      	movs	r3, r1
    22ec:	0002      	movs	r2, r0
    22ee:	0029      	movs	r1, r5
    22f0:	a805      	add	r0, sp, #20
    22f2:	f00b fcb7 	bl	dc64 <siprintf>
	
	// Create string containing the UNIX epoch
	epoch = get_rtc_epoch();
    22f6:	f001 fef7 	bl	40e8 <_Z13get_rtc_epochv>
    22fa:	0006      	movs	r6, r0
	sprintf(temp_epoch, "%d,", epoch);
    22fc:	4d26      	ldr	r5, [pc, #152]	; (2398 <_Z18temp_build_payloadPcPf+0x100>)
    22fe:	0002      	movs	r2, r0
    2300:	0029      	movs	r1, r5
    2302:	a809      	add	r0, sp, #36	; 0x24
    2304:	f00b fcae 	bl	dc64 <siprintf>
	sprintf(payload, "%d,", epoch);
    2308:	0032      	movs	r2, r6
    230a:	0029      	movs	r1, r5
    230c:	a80e      	add	r0, sp, #56	; 0x38
    230e:	f00b fca9 	bl	dc64 <siprintf>
	strcat(payload, datatype30);
    2312:	a902      	add	r1, sp, #8
    2314:	a80e      	add	r0, sp, #56	; 0x38
    2316:	f00b fcc7 	bl	dca8 <strcat>
	strcat(payload, rvoltage);
    231a:	a907      	add	r1, sp, #28
    231c:	a80e      	add	r0, sp, #56	; 0x38
    231e:	f00b fcc3 	bl	dca8 <strcat>
	strcpy(unit_buf, unitVoltage);
    2322:	4669      	mov	r1, sp
    2324:	a804      	add	r0, sp, #16
    2326:	f00b fcd6 	bl	dcd6 <strcpy>
	strcat(payload, unit_buf);
    232a:	a904      	add	r1, sp, #16
    232c:	a80e      	add	r0, sp, #56	; 0x38
    232e:	f00b fcbb 	bl	dca8 <strcat>
	strcat(payload, ";");
    2332:	491a      	ldr	r1, [pc, #104]	; (239c <_Z18temp_build_payloadPcPf+0x104>)
    2334:	a80e      	add	r0, sp, #56	; 0x38
    2336:	f00b fcb7 	bl	dca8 <strcat>
	
	strcat(payload,temp_epoch);
    233a:	a909      	add	r1, sp, #36	; 0x24
    233c:	a80e      	add	r0, sp, #56	; 0x38
    233e:	f00b fcb3 	bl	dca8 <strcat>
	strcat(payload, datatype31);
    2342:	a903      	add	r1, sp, #12
    2344:	a80e      	add	r0, sp, #56	; 0x38
    2346:	f00b fcaf 	bl	dca8 <strcat>
	strcat(payload, rcurrent);
    234a:	a905      	add	r1, sp, #20
    234c:	a80e      	add	r0, sp, #56	; 0x38
    234e:	f00b fcab 	bl	dca8 <strcat>
	strcpy(unit_buf, unitCurrent);
    2352:	0021      	movs	r1, r4
    2354:	a804      	add	r0, sp, #16
    2356:	f00b fcbe 	bl	dcd6 <strcpy>
	strcat(payload, unit_buf);
    235a:	a904      	add	r1, sp, #16
    235c:	a80e      	add	r0, sp, #56	; 0x38
    235e:	f00b fca3 	bl	dca8 <strcat>
	strcat(payload, data2);
	strcat(payload, ";A4,");
	sprintf(data4, "%d", valueA4);
	strcat(payload, data4);
*/
	strcpy(buf, payload);
    2362:	a90e      	add	r1, sp, #56	; 0x38
    2364:	0038      	movs	r0, r7
    2366:	f00b fcb6 	bl	dcd6 <strcpy>
	
	dlog(LOG_DEBUG, "Temp Payload: %s", payload);
    236a:	aa0e      	add	r2, sp, #56	; 0x38
    236c:	490c      	ldr	r1, [pc, #48]	; (23a0 <_Z18temp_build_payloadPcPf+0x108>)
    236e:	2007      	movs	r0, #7
    2370:	f001 ff52 	bl	4218 <_Z4dlogiPKcz>
	return SAPI_ERR_OK;
}
    2374:	2000      	movs	r0, #0
    2376:	b01f      	add	sp, #124	; 0x7c
    2378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	002c3033 	.word	0x002c3033
    2380:	002c3133 	.word	0x002c3133
    2384:	00010cb4 	.word	0x00010cb4
    2388:	00010cbc 	.word	0x00010cbc
    238c:	454e4000 	.word	0x454e4000
    2390:	2000031c 	.word	0x2000031c
    2394:	00010c99 	.word	0x00010c99
    2398:	00010c9f 	.word	0x00010c9f
    239c:	000117fd 	.word	0x000117fd
    23a0:	00010ca3 	.word	0x00010ca3

000023a4 <_Z13temp_read_cfgPcPh>:
{
    23a4:	b570      	push	{r4, r5, r6, lr}
    23a6:	000e      	movs	r6, r1
	sapi_error_t rc = temp_build_payload(payload, NULL);
    23a8:	2100      	movs	r1, #0
{
    23aa:	0004      	movs	r4, r0
	sapi_error_t rc = temp_build_payload(payload, NULL);
    23ac:	f7ff ff74 	bl	2298 <_Z18temp_build_payloadPcPf>
    23b0:	0005      	movs	r5, r0
	*len = strlen(payload);
    23b2:	0020      	movs	r0, r4
    23b4:	f00b fc97 	bl	dce6 <strlen>
    23b8:	7030      	strb	r0, [r6, #0]
}
    23ba:	0028      	movs	r0, r5
    23bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000023c0 <_Z10read_dht11Pf>:
//
// Read the temp value from the DHT11 sensor.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t read_dht11(float *reading)
{
    23c0:	b530      	push	{r4, r5, lr}
    float    min_value;                       /**< minimum value of this sensor's value in SI units */
    float    resolution;                      /**< smallest difference between two values reported by this sensor */
    int32_t  min_delay;                       /**< min delay in microseconds between events. zero = not a constant rate */
} sensor_t;

class Adafruit_Sensor {
    23c2:	4b17      	ldr	r3, [pc, #92]	; (2420 <_Z10read_dht11Pf+0x60>)
    23c4:	b08f      	sub	sp, #60	; 0x3c
    23c6:	7f1a      	ldrb	r2, [r3, #28]
    23c8:	0005      	movs	r5, r0
    23ca:	a801      	add	r0, sp, #4
    23cc:	7102      	strb	r2, [r0, #4]
public:
  DHT_Unified(uint8_t pin, uint8_t type, uint8_t count=6, int32_t tempSensorId=-1, int32_t humiditySensorId=-1);
  void begin();

  class Temperature : public Adafruit_Sensor {
    23ce:	4a15      	ldr	r2, [pc, #84]	; (2424 <_Z10read_dht11Pf+0x64>)
	sapi_error_t rc = SAPI_ERR_OK;
	float re = INVALID_TEMP;

	// Get temperature event
	sensors_event_t event;
	dht.temperature().getEvent(&event);
    23d0:	a905      	add	r1, sp, #20
    23d2:	9201      	str	r2, [sp, #4]
    23d4:	6a1a      	ldr	r2, [r3, #32]
    23d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    23d8:	6082      	str	r2, [r0, #8]
    23da:	60c3      	str	r3, [r0, #12]
    23dc:	f001 fcf7 	bl	3dce <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>

	// Check for NaN
	if (isnan(event.temperature))
    23e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
    23e2:	1c21      	adds	r1, r4, #0
    23e4:	1c20      	adds	r0, r4, #0
    23e6:	f008 fa5f 	bl	a8a8 <__aeabi_fcmpun>
    23ea:	2800      	cmp	r0, #0
    23ec:	d000      	beq.n	23f0 <_Z10read_dht11Pf+0x30>
	{
		re = NO_SENSOR_TEMP;
    23ee:	4c0e      	ldr	r4, [pc, #56]	; (2428 <_Z10read_dht11Pf+0x68>)
		re = event.temperature;
		rc = SAPI_ERR_OK;
	}
	
	// Reading is in C. Convert to F if needed.
	if (context.scalecfg == FAHRENHEIT_SCALE)
    23f0:	4b0e      	ldr	r3, [pc, #56]	; (242c <_Z10read_dht11Pf+0x6c>)
    23f2:	781b      	ldrb	r3, [r3, #0]
    23f4:	b25b      	sxtb	r3, r3
    23f6:	2b46      	cmp	r3, #70	; 0x46
    23f8:	d10d      	bne.n	2416 <_Z10read_dht11Pf+0x56>
	{
		// Convert from Celsius to Fahrenheit
		re *= 1.8;
    23fa:	1c20      	adds	r0, r4, #0
    23fc:	f00a f8ca 	bl	c594 <__aeabi_f2d>
    2400:	4a0b      	ldr	r2, [pc, #44]	; (2430 <_Z10read_dht11Pf+0x70>)
    2402:	4b0c      	ldr	r3, [pc, #48]	; (2434 <_Z10read_dht11Pf+0x74>)
    2404:	f009 fa62 	bl	b8cc <__aeabi_dmul>
    2408:	f00a f916 	bl	c638 <__aeabi_d2f>
		re += 32;
    240c:	2184      	movs	r1, #132	; 0x84
    240e:	05c9      	lsls	r1, r1, #23
    2410:	f007 fc0c 	bl	9c2c <__aeabi_fadd>
    2414:	1c04      	adds	r4, r0, #0
	}
	
	// Assign output
	*reading = re;
	return rc;
}
    2416:	2000      	movs	r0, #0
	*reading = re;
    2418:	602c      	str	r4, [r5, #0]
}
    241a:	b00f      	add	sp, #60	; 0x3c
    241c:	bd30      	pop	{r4, r5, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	20000328 	.word	0x20000328
    2424:	00010d2c 	.word	0x00010d2c
    2428:	42c80000 	.word	0x42c80000
    242c:	20000320 	.word	0x20000320
    2430:	cccccccd 	.word	0xcccccccd
    2434:	3ffccccc 	.word	0x3ffccccc

00002438 <_Z16temp_read_sensorPcPh>:
	float reading = 0.0;
    2438:	2300      	movs	r3, #0
{
    243a:	b570      	push	{r4, r5, r6, lr}
    243c:	b092      	sub	sp, #72	; 0x48
    243e:	0006      	movs	r6, r0
    rc = read_dht11(&reading);
    2440:	a801      	add	r0, sp, #4
{
    2442:	000d      	movs	r5, r1
	float reading = 0.0;
    2444:	9301      	str	r3, [sp, #4]
    rc = read_dht11(&reading);
    2446:	f7ff ffbb 	bl	23c0 <_Z10read_dht11Pf>
    244a:	1e04      	subs	r4, r0, #0
	if (rc != SAPI_ERR_OK)
    244c:	d10c      	bne.n	2468 <_Z16temp_read_sensorPcPh+0x30>
	rc = temp_build_payload(buffer, &reading);
    244e:	a901      	add	r1, sp, #4
    2450:	a802      	add	r0, sp, #8
    2452:	f7ff ff21 	bl	2298 <_Z18temp_build_payloadPcPf>
	strcpy(payload, buffer);
    2456:	a902      	add	r1, sp, #8
	rc = temp_build_payload(buffer, &reading);
    2458:	0004      	movs	r4, r0
	strcpy(payload, buffer);
    245a:	0030      	movs	r0, r6
    245c:	f00b fc3b 	bl	dcd6 <strcpy>
	*len = strlen(buffer);
    2460:	a802      	add	r0, sp, #8
    2462:	f00b fc40 	bl	dce6 <strlen>
    2466:	7028      	strb	r0, [r5, #0]
}
    2468:	0020      	movs	r0, r4
    246a:	b012      	add	sp, #72	; 0x48
    246c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002470 <_Z18temp_sensor_enablev>:
//
//////////////////////////////////////////////////////////////////////////

sapi_error_t temp_sensor_enable(void)
{
	context.enable = 1;
    2470:	2201      	movs	r2, #1
    2472:	4b03      	ldr	r3, [pc, #12]	; (2480 <_Z18temp_sensor_enablev+0x10>)
	context.alertstate = tsat_cleared;
	return SAPI_ERR_OK;
}
    2474:	2000      	movs	r0, #0
	context.enable = 1;
    2476:	711a      	strb	r2, [r3, #4]
	context.alertstate = tsat_cleared;
    2478:	1892      	adds	r2, r2, r2
    247a:	705a      	strb	r2, [r3, #1]
}
    247c:	4770      	bx	lr
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	20000320 	.word	0x20000320

00002484 <_Z16temp_init_sensorv>:
{
    2484:	b5f0      	push	{r4, r5, r6, r7, lr}
	context.scalecfg = FAHRENHEIT_SCALE;
    2486:	2246      	movs	r2, #70	; 0x46
	context.alertstate = tsat_disabled;
    2488:	2600      	movs	r6, #0
	context.scalecfg = FAHRENHEIT_SCALE;
    248a:	4b33      	ldr	r3, [pc, #204]	; (2558 <_Z16temp_init_sensorv+0xd4>)
{
    248c:	b091      	sub	sp, #68	; 0x44
	context.scalecfg = FAHRENHEIT_SCALE;
    248e:	701a      	strb	r2, [r3, #0]
	context.alertstate = tsat_disabled;
    2490:	705e      	strb	r6, [r3, #1]
	temp_sensor_enable();
    2492:	f7ff ffed 	bl	2470 <_Z18temp_sensor_enablev>
	dht.begin();
    2496:	4c31      	ldr	r4, [pc, #196]	; (255c <_Z16temp_init_sensorv+0xd8>)
    2498:	0020      	movs	r0, r4
    249a:	f001 fced 	bl	3e78 <_ZN11DHT_Unified5beginEv>
	println("DHT11 Sensor Initialized!");
    249e:	4830      	ldr	r0, [pc, #192]	; (2560 <_Z16temp_init_sensorv+0xdc>)
    24a0:	f001 ff78 	bl	4394 <_Z7printlnPKc>
    24a4:	7f23      	ldrb	r3, [r4, #28]
    24a6:	aa02      	add	r2, sp, #8
    24a8:	7113      	strb	r3, [r2, #4]
    24aa:	4b2e      	ldr	r3, [pc, #184]	; (2564 <_Z16temp_init_sensorv+0xe0>)
	dht.temperature().getSensor(&sensor);
    24ac:	0010      	movs	r0, r2
    24ae:	9302      	str	r3, [sp, #8]
    24b0:	6a23      	ldr	r3, [r4, #32]
    24b2:	a906      	add	r1, sp, #24
    24b4:	9304      	str	r3, [sp, #16]
    24b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    24b8:	9301      	str	r3, [sp, #4]
    24ba:	9305      	str	r3, [sp, #20]
    24bc:	f001 fd10 	bl	3ee0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
	println("");
    24c0:	4c29      	ldr	r4, [pc, #164]	; (2568 <_Z16temp_init_sensorv+0xe4>)
    24c2:	0020      	movs	r0, r4
    24c4:	f001 ff66 	bl	4394 <_Z7printlnPKc>
	println("------------------------------------");
    24c8:	4f28      	ldr	r7, [pc, #160]	; (256c <_Z16temp_init_sensorv+0xe8>)
    24ca:	0038      	movs	r0, r7
    24cc:	f001 ff62 	bl	4394 <_Z7printlnPKc>
	print  ("Sensor:       "); println(sensor.name);
    24d0:	4827      	ldr	r0, [pc, #156]	; (2570 <_Z16temp_init_sensorv+0xec>)
    24d2:	f001 ff49 	bl	4368 <_Z5printPKc>
    24d6:	a806      	add	r0, sp, #24
    24d8:	f001 ff5c 	bl	4394 <_Z7printlnPKc>
	print  ("Driver Ver:   "); printnum(sensor.version);    println("");
    24dc:	4825      	ldr	r0, [pc, #148]	; (2574 <_Z16temp_init_sensorv+0xf0>)
    24de:	f001 ff43 	bl	4368 <_Z5printPKc>
    24e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    24e4:	f001 ff6c 	bl	43c0 <_Z8printnumi>
    24e8:	0020      	movs	r0, r4
    24ea:	f001 ff53 	bl	4394 <_Z7printlnPKc>
	print  ("Unique ID:    "); printnum(sensor.sensor_id);  println("");
    24ee:	4822      	ldr	r0, [pc, #136]	; (2578 <_Z16temp_init_sensorv+0xf4>)
    24f0:	f001 ff3a 	bl	4368 <_Z5printPKc>
    24f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    24f6:	f001 ff63 	bl	43c0 <_Z8printnumi>
    24fa:	0020      	movs	r0, r4
    24fc:	f001 ff4a 	bl	4394 <_Z7printlnPKc>
	print  ("Max Value:    "); printnum(sensor.max_value);  println(" C");
    2500:	481e      	ldr	r0, [pc, #120]	; (257c <_Z16temp_init_sensorv+0xf8>)
    2502:	f001 ff31 	bl	4368 <_Z5printPKc>
    2506:	980c      	ldr	r0, [sp, #48]	; 0x30
    2508:	f008 f9e6 	bl	a8d8 <__aeabi_f2iz>
    250c:	f001 ff58 	bl	43c0 <_Z8printnumi>
    2510:	4d1b      	ldr	r5, [pc, #108]	; (2580 <_Z16temp_init_sensorv+0xfc>)
    2512:	0028      	movs	r0, r5
    2514:	f001 ff3e 	bl	4394 <_Z7printlnPKc>
	print  ("Min Value:    "); printnum(sensor.min_value);  println(" C");
    2518:	481a      	ldr	r0, [pc, #104]	; (2584 <_Z16temp_init_sensorv+0x100>)
    251a:	f001 ff25 	bl	4368 <_Z5printPKc>
    251e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2520:	f008 f9da 	bl	a8d8 <__aeabi_f2iz>
    2524:	f001 ff4c 	bl	43c0 <_Z8printnumi>
    2528:	0028      	movs	r0, r5
    252a:	f001 ff33 	bl	4394 <_Z7printlnPKc>
	print  ("Resolution:   "); printnum(sensor.resolution); println(" C");
    252e:	4816      	ldr	r0, [pc, #88]	; (2588 <_Z16temp_init_sensorv+0x104>)
    2530:	f001 ff1a 	bl	4368 <_Z5printPKc>
    2534:	980e      	ldr	r0, [sp, #56]	; 0x38
    2536:	f008 f9cf 	bl	a8d8 <__aeabi_f2iz>
    253a:	f001 ff41 	bl	43c0 <_Z8printnumi>
    253e:	0028      	movs	r0, r5
    2540:	f001 ff28 	bl	4394 <_Z7printlnPKc>
	println("------------------------------------");        println("");
    2544:	0038      	movs	r0, r7
    2546:	f001 ff25 	bl	4394 <_Z7printlnPKc>
    254a:	0020      	movs	r0, r4
    254c:	f001 ff22 	bl	4394 <_Z7printlnPKc>
}
    2550:	0030      	movs	r0, r6
    2552:	b011      	add	sp, #68	; 0x44
    2554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	20000320 	.word	0x20000320
    255c:	20000328 	.word	0x20000328
    2560:	00010bfd 	.word	0x00010bfd
    2564:	00010d2c 	.word	0x00010d2c
    2568:	0001110a 	.word	0x0001110a
    256c:	00010c17 	.word	0x00010c17
    2570:	00010c3c 	.word	0x00010c3c
    2574:	00010c4b 	.word	0x00010c4b
    2578:	00010c5a 	.word	0x00010c5a
    257c:	00010c69 	.word	0x00010c69
    2580:	00010c78 	.word	0x00010c78
    2584:	00010c7b 	.word	0x00010c7b
    2588:	00010c8a 	.word	0x00010c8a

0000258c <_GLOBAL__sub_I_dht>:
DHT_Unified dht(A1, DHT_TYPE);
    258c:	2301      	movs	r3, #1
sapi_error_t temp_sensor_disable(void)
{
	context.enable = 0;
	context.alertstate = tsat_disabled;
	return SAPI_ERR_OK;
    258e:	b513      	push	{r0, r1, r4, lr}
DHT_Unified dht(A1, DHT_TYPE);
    2590:	4c0b      	ldr	r4, [pc, #44]	; (25c0 <_GLOBAL__sub_I_dht+0x34>)
    2592:	425b      	negs	r3, r3
    2594:	9301      	str	r3, [sp, #4]
    2596:	9300      	str	r3, [sp, #0]
    2598:	220b      	movs	r2, #11
    259a:	3307      	adds	r3, #7
    259c:	2100      	movs	r1, #0
    259e:	0020      	movs	r0, r4
    25a0:	f001 fc52 	bl	3e48 <_ZN11DHT_UnifiedC1Ehhhll>
    25a4:	4a07      	ldr	r2, [pc, #28]	; (25c4 <_GLOBAL__sub_I_dht+0x38>)
    25a6:	4908      	ldr	r1, [pc, #32]	; (25c8 <_GLOBAL__sub_I_dht+0x3c>)
    25a8:	0020      	movs	r0, r4
    25aa:	f006 fe5b 	bl	9264 <__aeabi_atexit>
float windowLength = 40.0/testFrequency;     // how long to average the signal, for statistist
    25ae:	4b07      	ldr	r3, [pc, #28]	; (25cc <_GLOBAL__sub_I_dht+0x40>)
    25b0:	4807      	ldr	r0, [pc, #28]	; (25d0 <_GLOBAL__sub_I_dht+0x44>)
    25b2:	6819      	ldr	r1, [r3, #0]
    25b4:	f007 fccc 	bl	9f50 <__aeabi_fdiv>
    25b8:	4b06      	ldr	r3, [pc, #24]	; (25d4 <_GLOBAL__sub_I_dht+0x48>)
    25ba:	6018      	str	r0, [r3, #0]
    25bc:	bd13      	pop	{r0, r1, r4, pc}
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	20000328 	.word	0x20000328
    25c4:	20000000 	.word	0x20000000
    25c8:	00002159 	.word	0x00002159
    25cc:	20000008 	.word	0x20000008
    25d0:	42200000 	.word	0x42200000
    25d4:	2000036c 	.word	0x2000036c

000025d8 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    25d8:	be03      	bkpt	0x0003
    25da:	e7fe      	b.n	25da <Dummy_Handler+0x2>

000025dc <USB_Handler>:
#else
static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    25dc:	4b03      	ldr	r3, [pc, #12]	; (25ec <USB_Handler+0x10>)
{
    25de:	b510      	push	{r4, lr}
  if (usb_isr)
    25e0:	681b      	ldr	r3, [r3, #0]
    25e2:	2b00      	cmp	r3, #0
    25e4:	d000      	beq.n	25e8 <USB_Handler+0xc>
    usb_isr();
    25e6:	4798      	blx	r3
}
    25e8:	bd10      	pop	{r4, pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	20000370 	.word	0x20000370

000025f0 <HardFault_Handler>:
#endif
#endif

void HardFault_Handler(void)
{
  __BKPT(13);
    25f0:	be0d      	bkpt	0x000d
    25f2:	e7fe      	b.n	25f2 <HardFault_Handler+0x2>

000025f4 <Reset_Handler>:
{
    25f4:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    25f6:	490f      	ldr	r1, [pc, #60]	; (2634 <Reset_Handler+0x40>)
    25f8:	4c0f      	ldr	r4, [pc, #60]	; (2638 <Reset_Handler+0x44>)
    25fa:	42a1      	cmp	r1, r4
    25fc:	d104      	bne.n	2608 <Reset_Handler+0x14>
  SystemInit();
    25fe:	f000 f8f5 	bl	27ec <SystemInit>
  main();
    2602:	f000 f8a3 	bl	274c <main>
    2606:	e7fe      	b.n	2606 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2608:	4d0c      	ldr	r5, [pc, #48]	; (263c <Reset_Handler+0x48>)
    260a:	2300      	movs	r3, #0
    260c:	428d      	cmp	r5, r1
    260e:	d0f6      	beq.n	25fe <Reset_Handler+0xa>
    2610:	18ca      	adds	r2, r1, r3
    2612:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2614:	42a2      	cmp	r2, r4
    2616:	d305      	bcc.n	2624 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2618:	4290      	cmp	r0, r2
    261a:	d0f0      	beq.n	25fe <Reset_Handler+0xa>
    261c:	4b08      	ldr	r3, [pc, #32]	; (2640 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    261e:	4909      	ldr	r1, [pc, #36]	; (2644 <Reset_Handler+0x50>)
      *pDest = 0;
    2620:	2200      	movs	r2, #0
    2622:	e004      	b.n	262e <Reset_Handler+0x3a>
      *pDest = *pSrc;
    2624:	6800      	ldr	r0, [r0, #0]
    2626:	3304      	adds	r3, #4
    2628:	6010      	str	r0, [r2, #0]
    262a:	e7f1      	b.n	2610 <Reset_Handler+0x1c>
      *pDest = 0;
    262c:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    262e:	428b      	cmp	r3, r1
    2630:	d3fc      	bcc.n	262c <Reset_Handler+0x38>
    2632:	e7e4      	b.n	25fe <Reset_Handler+0xa>
    2634:	20000000 	.word	0x20000000
    2638:	20000300 	.word	0x20000300
    263c:	00012d54 	.word	0x00012d54
    2640:	20000300 	.word	0x20000300
    2644:	20001fac 	.word	0x20001fac

00002648 <SysTick_Handler>:
{
    2648:	b510      	push	{r4, lr}
  if (sysTickHook())
    264a:	f000 f87c 	bl	2746 <sysTickHook>
    264e:	2800      	cmp	r0, #0
    2650:	d101      	bne.n	2656 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    2652:	f000 f863 	bl	271c <SysTick_DefaultHandler>
}
    2656:	bd10      	pop	{r4, pc}

00002658 <USB_SetHandler>:
  usb_isr = new_usb_isr;
    2658:	4b01      	ldr	r3, [pc, #4]	; (2660 <USB_SetHandler+0x8>)
    265a:	6018      	str	r0, [r3, #0]
}
    265c:	4770      	bx	lr
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	20000370 	.word	0x20000370

00002664 <millis>:
#endif

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    2664:	4b01      	ldr	r3, [pc, #4]	; (266c <millis+0x8>)
    2666:	6818      	ldr	r0, [r3, #0]
}
    2668:	4770      	bx	lr
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	20000374 	.word	0x20000374

00002670 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
    2670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    2672:	4813      	ldr	r0, [pc, #76]	; (26c0 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2674:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
    2676:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
    2678:	4912      	ldr	r1, [pc, #72]	; (26c4 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    267a:	4c13      	ldr	r4, [pc, #76]	; (26c8 <micros+0x58>)
  ticks2  = SysTick->VAL;
    267c:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    267e:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
    2680:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2682:	0e9b      	lsrs	r3, r3, #26
    2684:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2686:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
    2688:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    268a:	6862      	ldr	r2, [r4, #4]
    268c:	9f01      	ldr	r7, [sp, #4]
    268e:	0e92      	lsrs	r2, r2, #26
    2690:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
    2692:	4667      	mov	r7, ip
    2694:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    2696:	4293      	cmp	r3, r2
    2698:	d10e      	bne.n	26b8 <micros+0x48>
    269a:	42bd      	cmp	r5, r7
    269c:	d10c      	bne.n	26b8 <micros+0x48>
    269e:	4286      	cmp	r6, r0
    26a0:	d30a      	bcc.n	26b8 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    26a2:	195b      	adds	r3, r3, r5
    26a4:	25fa      	movs	r5, #250	; 0xfa
    26a6:	6848      	ldr	r0, [r1, #4]
    26a8:	00ad      	lsls	r5, r5, #2
    26aa:	1b86      	subs	r6, r0, r6
    26ac:	4807      	ldr	r0, [pc, #28]	; (26cc <micros+0x5c>)
    26ae:	436b      	muls	r3, r5
    26b0:	4370      	muls	r0, r6
    26b2:	0d00      	lsrs	r0, r0, #20
    26b4:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    26b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    26b8:	003d      	movs	r5, r7
    26ba:	0013      	movs	r3, r2
    26bc:	0006      	movs	r6, r0
    26be:	e7e3      	b.n	2688 <micros+0x18>
    26c0:	20000374 	.word	0x20000374
    26c4:	e000e010 	.word	0xe000e010
    26c8:	e000ed00 	.word	0xe000ed00
    26cc:	00005555 	.word	0x00005555

000026d0 <delay>:

void delay( unsigned long ms )
{
    26d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26d2:	1e04      	subs	r4, r0, #0
  if (ms)
    26d4:	d01c      	beq.n	2710 <delay+0x40>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    26d6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    26da:	b672      	cpsid	i
#if !defined(NO_DELAY_HIGH_WORD)
    uint8_t enableInterrupts = ((__get_PRIMASK() & 0x1) == 0);
    __disable_irq();
#endif

    uint32_t start = _ulTickCount ;
    26dc:	4e0d      	ldr	r6, [pc, #52]	; (2714 <delay+0x44>)
#if !defined(NO_DELAY_HIGH_WORD)
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    26de:	4f0e      	ldr	r7, [pc, #56]	; (2718 <delay+0x48>)
    uint32_t start = _ulTickCount ;
    26e0:	6835      	ldr	r5, [r6, #0]
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    26e2:	683a      	ldr	r2, [r7, #0]
    26e4:	9201      	str	r2, [sp, #4]

    if (enableInterrupts) {
    26e6:	07db      	lsls	r3, r3, #31
    26e8:	d400      	bmi.n	26ec <delay+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
    26ea:	b662      	cpsie	i
      __enable_irq();
    }

    // Check for _ulTickCount overflow
    uint32_t remaining = (0xFFFFFFFF - start);
    26ec:	43eb      	mvns	r3, r5
    if (ms > remaining) {
    26ee:	429c      	cmp	r4, r3
    26f0:	d904      	bls.n	26fc <delay+0x2c>
      ms -= (remaining + 1);
    26f2:	1964      	adds	r4, r4, r5
      start = 0;
    26f4:	2500      	movs	r5, #0
      targetTickCountHighWord++;
    26f6:	9b01      	ldr	r3, [sp, #4]
    26f8:	3301      	adds	r3, #1
    26fa:	9301      	str	r3, [sp, #4]
    }
#endif

    do
    {
      yield() ;
    26fc:	f000 f822 	bl	2744 <yield>
#if !defined(NO_DELAY_HIGH_WORD)
    } while (_ulTickCountHighWord < targetTickCountHighWord || (_ulTickCount - start) < ms ) ;
    2700:	683b      	ldr	r3, [r7, #0]
    2702:	9a01      	ldr	r2, [sp, #4]
    2704:	4293      	cmp	r3, r2
    2706:	d3f9      	bcc.n	26fc <delay+0x2c>
    2708:	6833      	ldr	r3, [r6, #0]
    270a:	1b5b      	subs	r3, r3, r5
    270c:	429c      	cmp	r4, r3
    270e:	d8f5      	bhi.n	26fc <delay+0x2c>
#else
    } while (_ulTickCount - start < ms ) ;
#endif
  }
}
    2710:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	20000374 	.word	0x20000374
    2718:	20000378 	.word	0x20000378

0000271c <SysTick_DefaultHandler>:
#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
  // Increment tick count each ms
  _ulTickCount++;
    271c:	4b07      	ldr	r3, [pc, #28]	; (273c <SysTick_DefaultHandler+0x20>)
{
    271e:	b510      	push	{r4, lr}
  _ulTickCount++;
    2720:	681a      	ldr	r2, [r3, #0]
    2722:	3201      	adds	r2, #1
    2724:	601a      	str	r2, [r3, #0]

#if !defined(NO_DELAY_HIGH_WORD)
  if ( _ulTickCount == 0 )
    2726:	681b      	ldr	r3, [r3, #0]
    2728:	2b00      	cmp	r3, #0
    272a:	d103      	bne.n	2734 <SysTick_DefaultHandler+0x18>
  {
    _ulTickCountHighWord++;
    272c:	4a04      	ldr	r2, [pc, #16]	; (2740 <SysTick_DefaultHandler+0x24>)
    272e:	6813      	ldr	r3, [r2, #0]
    2730:	3301      	adds	r3, #1
    2732:	6013      	str	r3, [r2, #0]
  }
#endif
#if defined(CDC_ONLY) || defined(CDC_HID) || defined(WITH_CDC)
  tickReset();
    2734:	f000 f838 	bl	27a8 <tickReset>
#endif
}
    2738:	bd10      	pop	{r4, pc}
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	20000374 	.word	0x20000374
    2740:	20000378 	.word	0x20000378

00002744 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    2744:	4770      	bx	lr

00002746 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    2746:	2000      	movs	r0, #0
    2748:	4770      	bx	lr

0000274a <_Z11initVariantv>:
#include "sam.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    274a:	4770      	bx	lr

0000274c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    274c:	b510      	push	{r4, lr}
  init();
    274e:	f001 f859 	bl	3804 <init>

  __libc_init_array();
    2752:	f00a f92b 	bl	c9ac <__libc_init_array>

  initVariant();
    2756:	f7ff fff8 	bl	274a <_Z11initVariantv>

  delay(1);
    275a:	2001      	movs	r0, #1
    275c:	f7ff ffb8 	bl	26d0 <delay>
#if defined(USBCON) && !defined(USB_DISABLED)
  USBDevice.init();
    2760:	4c08      	ldr	r4, [pc, #32]	; (2784 <main+0x38>)
    2762:	0020      	movs	r0, r4
    2764:	f000 faf6 	bl	2d54 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    2768:	0020      	movs	r0, r4
    276a:	f000 fb53 	bl	2e14 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    276e:	f7ff fcd1 	bl	2114 <setup>

  for (;;)
  {
    loop();
    2772:	f7ff fced 	bl	2150 <loop>
    if (serialEventRun) serialEventRun();
    2776:	4b04      	ldr	r3, [pc, #16]	; (2788 <main+0x3c>)
    2778:	2b00      	cmp	r3, #0
    277a:	d0fa      	beq.n	2772 <main+0x26>
    277c:	e000      	b.n	2780 <main+0x34>
    277e:	bf00      	nop
    2780:	e7f7      	b.n	2772 <main+0x26>
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	2000037c 	.word	0x2000037c
    2788:	00000000 	.word	0x00000000

0000278c <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    278c:	4b01      	ldr	r3, [pc, #4]	; (2794 <initiateReset+0x8>)
    278e:	6018      	str	r0, [r3, #0]
}
    2790:	4770      	bx	lr
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	2000000c 	.word	0x2000000c

00002798 <cancelReset>:

void cancelReset() {
	ticks = -1;
    2798:	2201      	movs	r2, #1
    279a:	4b02      	ldr	r3, [pc, #8]	; (27a4 <cancelReset+0xc>)
    279c:	4252      	negs	r2, r2
    279e:	601a      	str	r2, [r3, #0]
}
    27a0:	4770      	bx	lr
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	2000000c 	.word	0x2000000c

000027a8 <tickReset>:

void tickReset() {
	if (ticks == -1)
    27a8:	4a05      	ldr	r2, [pc, #20]	; (27c0 <tickReset+0x18>)
void tickReset() {
    27aa:	b510      	push	{r4, lr}
	if (ticks == -1)
    27ac:	6813      	ldr	r3, [r2, #0]
    27ae:	1c59      	adds	r1, r3, #1
    27b0:	d005      	beq.n	27be <tickReset+0x16>
		return;
	ticks--;
    27b2:	3b01      	subs	r3, #1
    27b4:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    27b6:	2b00      	cmp	r3, #0
    27b8:	d101      	bne.n	27be <tickReset+0x16>
		banzai();
    27ba:	4b02      	ldr	r3, [pc, #8]	; (27c4 <tickReset+0x1c>)
    27bc:	4798      	blx	r3
}
    27be:	bd10      	pop	{r4, pc}
    27c0:	2000000c 	.word	0x2000000c
    27c4:	00012cf1 	.word	0x00012cf1

000027c8 <waitForSync>:
void waitForSync( void )
{
#if (SAMD21 || SAMD11)
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21 || SAMD51)
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    27c8:	4902      	ldr	r1, [pc, #8]	; (27d4 <waitForSync+0xc>)
    27ca:	4b03      	ldr	r3, [pc, #12]	; (27d8 <waitForSync+0x10>)
    27cc:	684a      	ldr	r2, [r1, #4]
    27ce:	421a      	tst	r2, r3
    27d0:	d1fc      	bne.n	27cc <waitForSync+0x4>
#endif
}
    27d2:	4770      	bx	lr
    27d4:	40001800 	.word	0x40001800
    27d8:	000007fd 	.word	0x000007fd

000027dc <waitForPLL>:
{
#if (SAMD51)
  while ( OSCCTRL->Dpll[0].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
  while ( OSCCTRL->Dpll[1].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
#else
  while ( OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
    27dc:	230e      	movs	r3, #14
    27de:	4902      	ldr	r1, [pc, #8]	; (27e8 <waitForPLL+0xc>)
    27e0:	780a      	ldrb	r2, [r1, #0]
    27e2:	421a      	tst	r2, r3
    27e4:	d1fc      	bne.n	27e0 <waitForPLL+0x4>
#endif
}
    27e6:	4770      	bx	lr
    27e8:	40000c38 	.word	0x40000c38

000027ec <SystemInit>:
   * Disable automatic NVM write operations (errata reference 13134, applies to D21/D11/L21, but not C21 or D51)
   */
#if (SAMD21 || SAMD11)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_HALF | NVMCTRL_CTRLB_MANW) ; // one wait state
#elif (SAML21 || SAMC21)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27ec:	2284      	movs	r2, #132	; 0x84
{
    27ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27f0:	4b29      	ldr	r3, [pc, #164]	; (2898 <SystemInit+0xac>)
  /* Turn on the digital interface clock */
#if !defined(TRUST_RESET_DEFAULTS)
#if (SAMD21 || SAMD11)
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
#elif (SAML21 || SAMC21 || SAMD51)
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27f2:	4d2a      	ldr	r5, [pc, #168]	; (289c <SystemInit+0xb0>)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27f4:	605a      	str	r2, [r3, #4]
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27f6:	2340      	movs	r3, #64	; 0x40
    27f8:	696a      	ldr	r2, [r5, #20]
#endif
#endif

#if (SAML21)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    27fa:	2102      	movs	r1, #2
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27fc:	4313      	orrs	r3, r2
    27fe:	616b      	str	r3, [r5, #20]
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2800:	2380      	movs	r3, #128	; 0x80
    2802:	2201      	movs	r2, #1
    2804:	05db      	lsls	r3, r3, #23
    2806:	719a      	strb	r2, [r3, #6]
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    2808:	7898      	ldrb	r0, [r3, #2]
    280a:	4301      	orrs	r1, r0
    280c:	7099      	strb	r1, [r3, #2]
  while ( (PM->INTFLAG.reg & PM_INTFLAG_PLRDY) != PM_INTFLAG_PLRDY );
    280e:	7999      	ldrb	r1, [r3, #6]
    2810:	4211      	tst	r1, r2
    2812:	d0fc      	beq.n	280e <SystemInit+0x22>

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) );	/* Wait for reset to complete */
#elif (SAML21 || SAMC21 || SAMD51)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;

  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    2814:	2101      	movs	r1, #1
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    2816:	4c22      	ldr	r4, [pc, #136]	; (28a0 <SystemInit+0xb4>)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2818:	719a      	strb	r2, [r3, #6]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    281a:	4b22      	ldr	r3, [pc, #136]	; (28a4 <SystemInit+0xb8>)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    281c:	7022      	strb	r2, [r4, #0]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    281e:	7822      	ldrb	r2, [r4, #0]
    2820:	420a      	tst	r2, r1
    2822:	d002      	beq.n	282a <SystemInit+0x3e>
    2824:	6862      	ldr	r2, [r4, #4]
    2826:	421a      	tst	r2, r3
    2828:	d1f9      	bne.n	281e <SystemInit+0x32>
  SYSCTRL->DPLLCTRLA.reg = SYSCTRL_DPLLCTRLA_ENABLE;

  while ( (SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) != SYSCTRL_DPLLSTATUS_CLKRDY );

#elif (SAML21 || SAMC21)
  OSC32KCTRL->XOSC32K.reg = (OSC32KCTRL_XOSC32K_STARTUP( 0x4u ) | OSC32KCTRL_XOSC32K_XTALEN | OSC32KCTRL_XOSC32K_EN32K | OSC32KCTRL_XOSC32K_EN1K);
    282a:	4b1f      	ldr	r3, [pc, #124]	; (28a8 <SystemInit+0xbc>)
    282c:	4a1f      	ldr	r2, [pc, #124]	; (28ac <SystemInit+0xc0>)
    282e:	615a      	str	r2, [r3, #20]
  OSC32KCTRL->XOSC32K.bit.ENABLE = 1;
    2830:	2202      	movs	r2, #2
    2832:	6959      	ldr	r1, [r3, #20]
    2834:	430a      	orrs	r2, r1
    2836:	615a      	str	r2, [r3, #20]

  while ( (OSC32KCTRL->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) == 0 );       /* Wait for oscillator stabilization */
    2838:	2201      	movs	r2, #1
    283a:	68d9      	ldr	r1, [r3, #12]
    283c:	4211      	tst	r1, r2
    283e:	d0fc      	beq.n	283a <SystemInit+0x4e>

  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2840:	4b1b      	ldr	r3, [pc, #108]	; (28b0 <SystemInit+0xc4>)
    2842:	4e1c      	ldr	r6, [pc, #112]	; (28b4 <SystemInit+0xc8>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */

  OSCCTRL->DPLLPRESC.reg = 0;
  waitForPLL();

  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2844:	2702      	movs	r7, #2
  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2846:	62f3      	str	r3, [r6, #44]	; 0x2c
  waitForPLL();
    2848:	f7ff ffc8 	bl	27dc <waitForPLL>
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    284c:	2300      	movs	r3, #0
  OSCCTRL->DPLLPRESC.reg = 0;
    284e:	4a1a      	ldr	r2, [pc, #104]	; (28b8 <SystemInit+0xcc>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    2850:	6333      	str	r3, [r6, #48]	; 0x30
  OSCCTRL->DPLLPRESC.reg = 0;
    2852:	7013      	strb	r3, [r2, #0]
  waitForPLL();
    2854:	f7ff ffc2 	bl	27dc <waitForPLL>
  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2858:	4b18      	ldr	r3, [pc, #96]	; (28bc <SystemInit+0xd0>)
    285a:	701f      	strb	r7, [r3, #0]
  waitForPLL();
    285c:	f7ff ffbe 	bl	27dc <waitForPLL>

  while ( (OSCCTRL->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) != OSCCTRL_DPLLSTATUS_CLKRDY );
    2860:	4a17      	ldr	r2, [pc, #92]	; (28c0 <SystemInit+0xd4>)
    2862:	7813      	ldrb	r3, [r2, #0]
    2864:	423b      	tst	r3, r7
    2866:	d0fc      	beq.n	2862 <SystemInit+0x76>
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
#elif (SAML21 || SAMC21)
  MCLK->CPUDIV.reg  = MCLK_CPUDIV_CPUDIV_DIV1 ;
    2868:	2301      	movs	r3, #1
    286a:	712b      	strb	r3, [r5, #4]

#elif (SAML21 || SAMC21)
  /* Setup GCLK0 (GENERIC_CLOCK_GENERATOR_MAIN) which is used for the CPU. */
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch Generic Clock Generator 0 to 96MHz PLL output. The output is divided by two to obtain a 48MHz CPU clock. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_MAIN].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    286c:	4d15      	ldr	r5, [pc, #84]	; (28c4 <SystemInit+0xd8>)
    286e:	6225      	str	r5, [r4, #32]
    waitForSync();
    2870:	f7ff ffaa 	bl	27c8 <waitForSync>
  #endif

#elif (SAML21 || SAMC21)
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch GENERIC_CLOCK_GENERATOR_48MHz to 96MHz PLL output. The output is divided by two to obtain 48MHz. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_48MHz].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    2874:	6325      	str	r5, [r4, #48]	; 0x30
    waitForSync();
    2876:	f7ff ffa7 	bl	27c8 <waitForSync>
  waitForSync();

#elif (SAML21)
  /* Note that after reset, the L21 starts with the OSC16M set to 4MHz, NOT the DFLL@48MHz as stated in some documentation. */
  /* Modify FSEL value of OSC16M to have 8MHz */
  OSCCTRL->OSC16MCTRL.bit.FSEL = OSCCTRL_OSC16MCTRL_FSEL_8_Val;
    287a:	220c      	movs	r2, #12
    287c:	7d33      	ldrb	r3, [r6, #20]
    287e:	4393      	bics	r3, r2
    2880:	001a      	movs	r2, r3
    2882:	2304      	movs	r3, #4
    2884:	4313      	orrs	r3, r2
    2886:	7533      	strb	r3, [r6, #20]

  /* Put OSC16M as source for Generic Clock Generator 3 */
  GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_OSC_HS].reg = ( GCLK_GENCTRL_DIV(1) | GCLK_GENCTRL_SRC_OSC16M | GCLK_GENCTRL_GENEN );
    2888:	4b0f      	ldr	r3, [pc, #60]	; (28c8 <SystemInit+0xdc>)
    288a:	62e3      	str	r3, [r4, #44]	; 0x2c
  waitForSync();
    288c:	f7ff ff9c 	bl	27c8 <waitForSync>
#endif
#endif

  SystemCoreClock=VARIANT_MCK;
    2890:	4a0e      	ldr	r2, [pc, #56]	; (28cc <SystemInit+0xe0>)
    2892:	4b0f      	ldr	r3, [pc, #60]	; (28d0 <SystemInit+0xe4>)
    2894:	601a      	str	r2, [r3, #0]
}
    2896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2898:	41004000 	.word	0x41004000
    289c:	40000400 	.word	0x40000400
    28a0:	40001800 	.word	0x40001800
    28a4:	000007fd 	.word	0x000007fd
    28a8:	40001000 	.word	0x40001000
    28ac:	0000041c 	.word	0x0000041c
    28b0:	00000b71 	.word	0x00000b71
    28b4:	40000c00 	.word	0x40000c00
    28b8:	40000c34 	.word	0x40000c34
    28bc:	40000c28 	.word	0x40000c28
    28c0:	40000c3c 	.word	0x40000c3c
    28c4:	00020308 	.word	0x00020308
    28c8:	00010106 	.word	0x00010106
    28cc:	02dc6c00 	.word	0x02dc6c00
    28d0:	20000038 	.word	0x20000038

000028d4 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    28d4:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    28d6:	250f      	movs	r5, #15
    28d8:	1dcb      	adds	r3, r1, #7
    28da:	3901      	subs	r1, #1
    28dc:	0002      	movs	r2, r0
    28de:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    28e0:	0014      	movs	r4, r2
		val = (val >> 4);
    28e2:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    28e4:	3430      	adds	r4, #48	; 0x30
    28e6:	2a09      	cmp	r2, #9
    28e8:	dd01      	ble.n	28ee <_ZL5utox8mPc+0x1a>
    28ea:	3237      	adds	r2, #55	; 0x37
    28ec:	0014      	movs	r4, r2
    28ee:	701c      	strb	r4, [r3, #0]
    28f0:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    28f2:	428b      	cmp	r3, r1
    28f4:	d1f2      	bne.n	28dc <_ZL5utox8mPc+0x8>
	}
}
    28f6:	bd30      	pop	{r4, r5, pc}

000028f8 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    28f8:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    28fa:	2982      	cmp	r1, #130	; 0x82
    28fc:	d11f      	bne.n	293e <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    28fe:	b2c3      	uxtb	r3, r0
    2900:	4d2c      	ldr	r5, [pc, #176]	; (29b4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    2902:	015a      	lsls	r2, r3, #5
    2904:	18aa      	adds	r2, r5, r2
    2906:	6991      	ldr	r1, [r2, #24]
    2908:	4c2b      	ldr	r4, [pc, #172]	; (29b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    290a:	0180      	lsls	r0, r0, #6
    290c:	400c      	ands	r4, r1
    290e:	21c0      	movs	r1, #192	; 0xc0
    2910:	0589      	lsls	r1, r1, #22
    2912:	4321      	orrs	r1, r4
    2914:	6191      	str	r1, [r2, #24]
    2916:	4929      	ldr	r1, [pc, #164]	; (29bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2918:	3308      	adds	r3, #8
    291a:	1808      	adds	r0, r1, r0
    291c:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    291e:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2920:	682a      	ldr	r2, [r5, #0]
    2922:	015b      	lsls	r3, r3, #5
    2924:	18d0      	adds	r0, r2, r3
    2926:	7904      	ldrb	r4, [r0, #4]
    2928:	4249      	negs	r1, r1
    292a:	4321      	orrs	r1, r4
    292c:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    292e:	2070      	movs	r0, #112	; 0x70
    2930:	5c99      	ldrb	r1, [r3, r2]
    2932:	4381      	bics	r1, r0
    2934:	0008      	movs	r0, r1
    2936:	2130      	movs	r1, #48	; 0x30
    2938:	4301      	orrs	r1, r0
    293a:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    293c:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    293e:	2900      	cmp	r1, #0
    2940:	d1fc      	bne.n	293c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2942:	24c0      	movs	r4, #192	; 0xc0
    2944:	b2c1      	uxtb	r1, r0
    2946:	4e1b      	ldr	r6, [pc, #108]	; (29b4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    2948:	014b      	lsls	r3, r1, #5
    294a:	18f3      	adds	r3, r6, r3
    294c:	689a      	ldr	r2, [r3, #8]
    294e:	4d1a      	ldr	r5, [pc, #104]	; (29b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    2950:	05a4      	lsls	r4, r4, #22
    2952:	402a      	ands	r2, r5
    2954:	4322      	orrs	r2, r4
    2956:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    2958:	4a19      	ldr	r2, [pc, #100]	; (29c0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    295a:	0180      	lsls	r0, r0, #6
    295c:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    295e:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2960:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2962:	6830      	ldr	r0, [r6, #0]
    2964:	2607      	movs	r6, #7
    2966:	3208      	adds	r2, #8
    2968:	0152      	lsls	r2, r2, #5
    296a:	5c11      	ldrb	r1, [r2, r0]
    296c:	43b1      	bics	r1, r6
    296e:	000e      	movs	r6, r1
    2970:	2101      	movs	r1, #1
    2972:	4331      	orrs	r1, r6
    2974:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2976:	6999      	ldr	r1, [r3, #24]
    2978:	400d      	ands	r5, r1
    297a:	432c      	orrs	r4, r5
    297c:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    297e:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2980:	490e      	ldr	r1, [pc, #56]	; (29bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    2982:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2984:	5c11      	ldrb	r1, [r2, r0]
    2986:	43a1      	bics	r1, r4
    2988:	000c      	movs	r4, r1
    298a:	2110      	movs	r1, #16
    298c:	4321      	orrs	r1, r4
    298e:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2990:	6899      	ldr	r1, [r3, #8]
    2992:	4c0c      	ldr	r4, [pc, #48]	; (29c4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    2994:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2996:	400c      	ands	r4, r1
    2998:	2180      	movs	r1, #128	; 0x80
    299a:	0349      	lsls	r1, r1, #13
    299c:	4321      	orrs	r1, r4
    299e:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    29a0:	6899      	ldr	r1, [r3, #8]
    29a2:	0b89      	lsrs	r1, r1, #14
    29a4:	0389      	lsls	r1, r1, #14
    29a6:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    29a8:	2340      	movs	r3, #64	; 0x40
    29aa:	7951      	ldrb	r1, [r2, #5]
    29ac:	430b      	orrs	r3, r1
    29ae:	7153      	strb	r3, [r2, #5]
    29b0:	e7c4      	b.n	293c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	20000834 	.word	0x20000834
    29b8:	8fffffff 	.word	0x8fffffff
    29bc:	200003a8 	.word	0x200003a8
    29c0:	20000568 	.word	0x20000568
    29c4:	f0003fff 	.word	0xf0003fff

000029c8 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    29c8:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    29ca:	0004      	movs	r4, r0
    29cc:	2301      	movs	r3, #1
    29ce:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    29d0:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    29d2:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    29d4:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    29d6:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    29d8:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    29da:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    29dc:	0052      	lsls	r2, r2, #1
    29de:	f00a f86b 	bl	cab8 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    29e2:	78ab      	ldrb	r3, [r5, #2]
    29e4:	07db      	lsls	r3, r3, #31
    29e6:	d4fc      	bmi.n	29e2 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    29e8:	626c      	str	r4, [r5, #36]	; 0x24
}
    29ea:	bd70      	pop	{r4, r5, r6, pc}

000029ec <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29ec:	221f      	movs	r2, #31
    29ee:	4b14      	ldr	r3, [pc, #80]	; (2a40 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    29f0:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29f2:	681b      	ldr	r3, [r3, #0]
    29f4:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    29f6:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    29f8:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29fa:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    29fc:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    29fe:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
    2a00:	291f      	cmp	r1, #31
    2a02:	d100      	bne.n	2a06 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    2a04:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    2a06:	2a1f      	cmp	r2, #31
    2a08:	d100      	bne.n	2a0c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    2a0a:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    2a0c:	2b07      	cmp	r3, #7
    2a0e:	d100      	bne.n	2a12 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    2a10:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
    2a12:	251f      	movs	r5, #31
    2a14:	6800      	ldr	r0, [r0, #0]
    2a16:	018e      	lsls	r6, r1, #6
    2a18:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    2a1a:	490a      	ldr	r1, [pc, #40]	; (2a44 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    2a1c:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    2a1e:	4021      	ands	r1, r4
    2a20:	4331      	orrs	r1, r6
    2a22:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    2a24:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    2a26:	0014      	movs	r4, r2
    2a28:	000a      	movs	r2, r1
    2a2a:	43aa      	bics	r2, r5
    2a2c:	4322      	orrs	r2, r4
    2a2e:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    2a30:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    2a32:	0319      	lsls	r1, r3, #12
    2a34:	4b04      	ldr	r3, [pc, #16]	; (2a48 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    2a36:	4013      	ands	r3, r2
    2a38:	430b      	orrs	r3, r1
    2a3a:	8503      	strh	r3, [r0, #40]	; 0x28
}
    2a3c:	bd70      	pop	{r4, r5, r6, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	00806020 	.word	0x00806020
    2a44:	fffff83f 	.word	0xfffff83f
    2a48:	ffff8fff 	.word	0xffff8fff

00002a4c <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a4c:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    2a50:	6003      	str	r3, [r0, #0]
    2a52:	2301      	movs	r3, #1
    2a54:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2a56:	b672      	cpsid	i
		__disable_irq();
	}
    2a58:	4770      	bx	lr

00002a5a <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
    2a5a:	6803      	ldr	r3, [r0, #0]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d102      	bne.n	2a66 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    2a60:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    2a62:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    2a66:	4770      	bx	lr

00002a68 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    2a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    2a6a:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    2a6c:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    2a6e:	4668      	mov	r0, sp
		if (current == 0) {
    2a70:	2d00      	cmp	r5, #0
    2a72:	d114      	bne.n	2a9e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    2a74:	f7ff ffea 	bl	2a4c <_ZN7__GuardC1Ev>
    2a78:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    2a7a:	1d62      	adds	r2, r4, #5
			synchronized {
    2a7c:	3b01      	subs	r3, #1
    2a7e:	d302      	bcc.n	2a86 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    2a80:	7fd5      	ldrb	r5, [r2, #31]
    2a82:	b2ed      	uxtb	r5, r5
    2a84:	e7fa      	b.n	2a7c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    2a86:	4668      	mov	r0, sp
    2a88:	9301      	str	r3, [sp, #4]
    2a8a:	f7ff ffe6 	bl	2a5a <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    2a8e:	2d00      	cmp	r5, #0
    2a90:	d101      	bne.n	2a96 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    2a92:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    2a94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    2a96:	6a20      	ldr	r0, [r4, #32]
    2a98:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    2a9a:	1ac0      	subs	r0, r0, r3
    2a9c:	e7fa      	b.n	2a94 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    2a9e:	f7ff ffd5 	bl	2a4c <_ZN7__GuardC1Ev>
				ready = ready1;
    2aa2:	0022      	movs	r2, r4
			bool ready = false;
    2aa4:	2500      	movs	r5, #0
    2aa6:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    2aa8:	3234      	adds	r2, #52	; 0x34
			synchronized {
    2aaa:	3b01      	subs	r3, #1
    2aac:	d302      	bcc.n	2ab4 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    2aae:	7815      	ldrb	r5, [r2, #0]
    2ab0:	b2ed      	uxtb	r5, r5
			synchronized {
    2ab2:	e7fa      	b.n	2aaa <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    2ab4:	4668      	mov	r0, sp
    2ab6:	9301      	str	r3, [sp, #4]
    2ab8:	f7ff ffcf 	bl	2a5a <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    2abc:	2d00      	cmp	r5, #0
    2abe:	d0e8      	beq.n	2a92 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    2ac0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2ac2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2ac4:	e7e9      	b.n	2a9a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00002ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    2ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2aca:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    2acc:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2ace:	7a03      	ldrb	r3, [r0, #8]
    2ad0:	6831      	ldr	r1, [r6, #0]
    2ad2:	015a      	lsls	r2, r3, #5
    2ad4:	188c      	adds	r4, r1, r2
    2ad6:	34ff      	adds	r4, #255	; 0xff
    2ad8:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2ada:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2adc:	433d      	orrs	r5, r7
    2ade:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    2ae0:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2ae2:	4d09      	ldr	r5, [pc, #36]	; (2b08 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    2ae4:	6890      	ldr	r0, [r2, #8]
    2ae6:	04a4      	lsls	r4, r4, #18
    2ae8:	4028      	ands	r0, r5
    2aea:	0924      	lsrs	r4, r4, #4
    2aec:	4320      	orrs	r0, r4
    2aee:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2af0:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2af2:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2af4:	0b80      	lsrs	r0, r0, #14
    2af6:	0380      	lsls	r0, r0, #14
    2af8:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2afa:	2240      	movs	r2, #64	; 0x40
    2afc:	015b      	lsls	r3, r3, #5
    2afe:	18cb      	adds	r3, r1, r3
    2b00:	7919      	ldrb	r1, [r3, #4]
    2b02:	430a      	orrs	r2, r1
    2b04:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    2b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b08:	f0003fff 	.word	0xf0003fff

00002b0c <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    2b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    2b0e:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    2b10:	0004      	movs	r4, r0
    2b12:	000e      	movs	r6, r1
    2b14:	0017      	movs	r7, r2
			synchronized {
    2b16:	4668      	mov	r0, sp
		if (current == 0) {
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d13d      	bne.n	2b98 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    2b1c:	f7ff ff96 	bl	2a4c <_ZN7__GuardC1Ev>
    2b20:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    2b22:	1d61      	adds	r1, r4, #5
    2b24:	3b01      	subs	r3, #1
			synchronized {
    2b26:	1c5a      	adds	r2, r3, #1
    2b28:	d00c      	beq.n	2b44 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    2b2a:	7fcd      	ldrb	r5, [r1, #31]
    2b2c:	1e5a      	subs	r2, r3, #1
    2b2e:	b2ed      	uxtb	r5, r5
    2b30:	2d00      	cmp	r5, #0
    2b32:	d105      	bne.n	2b40 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    2b34:	4668      	mov	r0, sp
    2b36:	9301      	str	r3, [sp, #4]
    2b38:	f7ff ff8f 	bl	2a5a <_ZN7__GuardD1Ev>
	}
    2b3c:	0028      	movs	r0, r5
    2b3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2b40:	0013      	movs	r3, r2
    2b42:	e7f0      	b.n	2b26 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    2b44:	4668      	mov	r0, sp
    2b46:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    2b48:	2500      	movs	r5, #0
			synchronized {
    2b4a:	f7ff ff86 	bl	2a5a <_ZN7__GuardD1Ev>
    2b4e:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    2b50:	42af      	cmp	r7, r5
    2b52:	d002      	beq.n	2b5a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    2b54:	6a22      	ldr	r2, [r4, #32]
    2b56:	4293      	cmp	r3, r2
    2b58:	d357      	bcc.n	2c0a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    2b5a:	6a22      	ldr	r2, [r4, #32]
    2b5c:	4293      	cmp	r3, r2
    2b5e:	d1ed      	bne.n	2b3c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    2b60:	2300      	movs	r3, #0
    2b62:	61e3      	str	r3, [r4, #28]
				current = 1;
    2b64:	3301      	adds	r3, #1
    2b66:	6123      	str	r3, [r4, #16]
				synchronized {
    2b68:	4668      	mov	r0, sp
    2b6a:	f7ff ff6f 	bl	2a4c <_ZN7__GuardC1Ev>
					if (notify) {
    2b6e:	0022      	movs	r2, r4
					ready0 = false;
    2b70:	2100      	movs	r1, #0
    2b72:	9b01      	ldr	r3, [sp, #4]
    2b74:	1d67      	adds	r7, r4, #5
    2b76:	3b01      	subs	r3, #1
					if (notify) {
    2b78:	3235      	adds	r2, #53	; 0x35
				synchronized {
    2b7a:	1c58      	adds	r0, r3, #1
    2b7c:	d0da      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    2b7e:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    2b80:	7810      	ldrb	r0, [r2, #0]
    2b82:	1e5e      	subs	r6, r3, #1
    2b84:	2800      	cmp	r0, #0
    2b86:	d005      	beq.n	2b94 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    2b88:	7011      	strb	r1, [r2, #0]
						release();
    2b8a:	0020      	movs	r0, r4
    2b8c:	9301      	str	r3, [sp, #4]
    2b8e:	f7ff ff9b 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2b92:	e7ec      	b.n	2b6e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    2b94:	0033      	movs	r3, r6
    2b96:	e7f0      	b.n	2b7a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    2b98:	f7ff ff58 	bl	2a4c <_ZN7__GuardC1Ev>
				if (!ready1) {
    2b9c:	0021      	movs	r1, r4
    2b9e:	9b01      	ldr	r3, [sp, #4]
    2ba0:	3134      	adds	r1, #52	; 0x34
    2ba2:	3b01      	subs	r3, #1
			synchronized {
    2ba4:	1c5a      	adds	r2, r3, #1
    2ba6:	d006      	beq.n	2bb6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    2ba8:	780d      	ldrb	r5, [r1, #0]
    2baa:	1e5a      	subs	r2, r3, #1
    2bac:	b2ed      	uxtb	r5, r5
    2bae:	2d00      	cmp	r5, #0
    2bb0:	d0c0      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    2bb2:	0013      	movs	r3, r2
    2bb4:	e7f6      	b.n	2ba4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    2bb6:	4668      	mov	r0, sp
    2bb8:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    2bba:	2500      	movs	r5, #0
			synchronized {
    2bbc:	f7ff ff4d 	bl	2a5a <_ZN7__GuardD1Ev>
    2bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    2bc2:	42bd      	cmp	r5, r7
    2bc4:	d002      	beq.n	2bcc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    2bc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2bc8:	4293      	cmp	r3, r2
    2bca:	d326      	bcc.n	2c1a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    2bcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2bce:	4293      	cmp	r3, r2
    2bd0:	d1b4      	bne.n	2b3c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    2bd2:	2300      	movs	r3, #0
				synchronized {
    2bd4:	4668      	mov	r0, sp
				first1 = 0;
    2bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    2bd8:	6123      	str	r3, [r4, #16]
				synchronized {
    2bda:	f7ff ff37 	bl	2a4c <_ZN7__GuardC1Ev>
					ready1 = false;
    2bde:	0027      	movs	r7, r4
					if (notify) {
    2be0:	0022      	movs	r2, r4
					ready1 = false;
    2be2:	2100      	movs	r1, #0
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	3734      	adds	r7, #52	; 0x34
    2be8:	3b01      	subs	r3, #1
					if (notify) {
    2bea:	3235      	adds	r2, #53	; 0x35
				synchronized {
    2bec:	1c58      	adds	r0, r3, #1
    2bee:	d0a1      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    2bf0:	7039      	strb	r1, [r7, #0]
					if (notify) {
    2bf2:	7810      	ldrb	r0, [r2, #0]
    2bf4:	1e5e      	subs	r6, r3, #1
    2bf6:	2800      	cmp	r0, #0
    2bf8:	d005      	beq.n	2c06 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    2bfa:	7011      	strb	r1, [r2, #0]
						release();
    2bfc:	0020      	movs	r0, r4
    2bfe:	9301      	str	r3, [sp, #4]
    2c00:	f7ff ff62 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2c04:	e7eb      	b.n	2bde <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    2c06:	0033      	movs	r3, r6
    2c08:	e7f0      	b.n	2bec <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    2c0a:	1c5a      	adds	r2, r3, #1
    2c0c:	61e2      	str	r2, [r4, #28]
    2c0e:	69a2      	ldr	r2, [r4, #24]
    2c10:	18d3      	adds	r3, r2, r3
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    2c16:	3501      	adds	r5, #1
    2c18:	e799      	b.n	2b4e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    2c1a:	1c5a      	adds	r2, r3, #1
    2c1c:	62e2      	str	r2, [r4, #44]	; 0x2c
    2c1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2c20:	18d3      	adds	r3, r2, r3
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    2c26:	3501      	adds	r5, #1
    2c28:	e7ca      	b.n	2bc0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00002c2a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    2c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c2c:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    2c2e:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c30:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    2c32:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c34:	3108      	adds	r1, #8
    2c36:	6818      	ldr	r0, [r3, #0]
    2c38:	0149      	lsls	r1, r1, #5
    2c3a:	1841      	adds	r1, r0, r1
    2c3c:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    2c3e:	07c0      	lsls	r0, r0, #31
    2c40:	d527      	bpl.n	2c92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    2c42:	2501      	movs	r5, #1
    2c44:	0152      	lsls	r2, r2, #5
    2c46:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2c48:	189b      	adds	r3, r3, r2
    2c4a:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    2c4c:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2c4e:	0492      	lsls	r2, r2, #18
    2c50:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    2c52:	2900      	cmp	r1, #0
    2c54:	d121      	bne.n	2c9a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    2c56:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    2c58:	6a22      	ldr	r2, [r4, #32]
    2c5a:	2a00      	cmp	r2, #0
    2c5c:	d03e      	beq.n	2cdc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2c5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    2c60:	6165      	str	r5, [r4, #20]
					synchronized {
    2c62:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2c64:	605a      	str	r2, [r3, #4]
					synchronized {
    2c66:	f7ff fef1 	bl	2a4c <_ZN7__GuardC1Ev>
						if (ready1) {
    2c6a:	0027      	movs	r7, r4
    2c6c:	0021      	movs	r1, r4
    2c6e:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    2c70:	1d66      	adds	r6, r4, #5
    2c72:	3b01      	subs	r3, #1
						if (ready1) {
    2c74:	3734      	adds	r7, #52	; 0x34
    2c76:	3135      	adds	r1, #53	; 0x35
					synchronized {
    2c78:	1c5a      	adds	r2, r3, #1
    2c7a:	d02b      	beq.n	2cd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    2c7c:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    2c7e:	783a      	ldrb	r2, [r7, #0]
    2c80:	1e58      	subs	r0, r3, #1
    2c82:	b2d2      	uxtb	r2, r2
    2c84:	2a00      	cmp	r2, #0
    2c86:	d005      	beq.n	2c94 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    2c88:	9301      	str	r3, [sp, #4]
							return;
    2c8a:	4668      	mov	r0, sp
							notify = true;
    2c8c:	700d      	strb	r5, [r1, #0]
							return;
    2c8e:	f7ff fee4 	bl	2a5a <_ZN7__GuardD1Ev>
	}
    2c92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    2c94:	700a      	strb	r2, [r1, #0]
					synchronized {
    2c96:	0003      	movs	r3, r0
    2c98:	e7ee      	b.n	2c78 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    2c9a:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    2c9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2c9e:	2a00      	cmp	r2, #0
    2ca0:	d01c      	beq.n	2cdc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    2ca2:	2200      	movs	r2, #0
    2ca4:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2ca6:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    2ca8:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2caa:	605a      	str	r2, [r3, #4]
					synchronized {
    2cac:	f7ff fece 	bl	2a4c <_ZN7__GuardC1Ev>
						ready1 = true;
    2cb0:	0026      	movs	r6, r4
    2cb2:	0021      	movs	r1, r4
    2cb4:	9b01      	ldr	r3, [sp, #4]
    2cb6:	3634      	adds	r6, #52	; 0x34
    2cb8:	3b01      	subs	r3, #1
						if (ready0) {
    2cba:	1d67      	adds	r7, r4, #5
    2cbc:	3135      	adds	r1, #53	; 0x35
					synchronized {
    2cbe:	1c5a      	adds	r2, r3, #1
    2cc0:	d008      	beq.n	2cd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    2cc2:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    2cc4:	7ffa      	ldrb	r2, [r7, #31]
    2cc6:	1e58      	subs	r0, r3, #1
    2cc8:	b2d2      	uxtb	r2, r2
    2cca:	2a00      	cmp	r2, #0
    2ccc:	d1dc      	bne.n	2c88 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    2cce:	700a      	strb	r2, [r1, #0]
					synchronized {
    2cd0:	0003      	movs	r3, r0
    2cd2:	e7f4      	b.n	2cbe <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    2cd4:	4668      	mov	r0, sp
    2cd6:	9301      	str	r3, [sp, #4]
    2cd8:	f7ff febf 	bl	2a5a <_ZN7__GuardD1Ev>
			release();
    2cdc:	0020      	movs	r0, r4
    2cde:	f7ff fef3 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2ce2:	e7d6      	b.n	2c92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00002ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    2ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    2ce6:	466b      	mov	r3, sp
    2ce8:	1ddc      	adds	r4, r3, #7
    2cea:	2300      	movs	r3, #0
{
    2cec:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    2cee:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    2cf0:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    2cf2:	f002 fc15 	bl	5520 <_Z16CDC_GetInterfacePh>
    2cf6:	682b      	ldr	r3, [r5, #0]
    2cf8:	1818      	adds	r0, r3, r0
    2cfa:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    2cfc:	f002 fcca 	bl	5694 <_Z12PluggableUSBv>
    2d00:	0021      	movs	r1, r4
    2d02:	f002 fc83 	bl	560c <_ZN13PluggableUSB_12getInterfaceEPh>
    2d06:	682b      	ldr	r3, [r5, #0]
    2d08:	1818      	adds	r0, r3, r0
    2d0a:	6028      	str	r0, [r5, #0]
	return interfaces;
    2d0c:	7820      	ldrb	r0, [r4, #0]
}
    2d0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002d10 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    2d10:	2903      	cmp	r1, #3
    2d12:	d10e      	bne.n	2d32 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2d14:	2280      	movs	r2, #128	; 0x80
    2d16:	4b0e      	ldr	r3, [pc, #56]	; (2d50 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    2d18:	3162      	adds	r1, #98	; 0x62
    2d1a:	681b      	ldr	r3, [r3, #0]
    2d1c:	31ff      	adds	r1, #255	; 0xff
    2d1e:	5c58      	ldrb	r0, [r3, r1]
    2d20:	4252      	negs	r2, r2
    2d22:	4302      	orrs	r2, r0
    2d24:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2d26:	2268      	movs	r2, #104	; 0x68
    2d28:	3963      	subs	r1, #99	; 0x63
    2d2a:	39ff      	subs	r1, #255	; 0xff
    2d2c:	32ff      	adds	r2, #255	; 0xff
    2d2e:	5499      	strb	r1, [r3, r2]
}
    2d30:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    2d32:	2901      	cmp	r1, #1
    2d34:	d1fc      	bne.n	2d30 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2d36:	2280      	movs	r2, #128	; 0x80
    2d38:	4b05      	ldr	r3, [pc, #20]	; (2d50 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    2d3a:	3124      	adds	r1, #36	; 0x24
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	31ff      	adds	r1, #255	; 0xff
    2d40:	5c58      	ldrb	r0, [r3, r1]
    2d42:	4252      	negs	r2, r2
    2d44:	4302      	orrs	r2, r0
    2d46:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2d48:	3923      	subs	r1, #35	; 0x23
    2d4a:	39ff      	subs	r1, #255	; 0xff
    2d4c:	2228      	movs	r2, #40	; 0x28
    2d4e:	e7ed      	b.n	2d2c <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    2d50:	20000834 	.word	0x20000834

00002d54 <_ZN14USBDeviceClass4initEv>:
{
    2d54:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
    2d56:	2400      	movs	r4, #0
    2d58:	4b26      	ldr	r3, [pc, #152]	; (2df4 <_ZN14USBDeviceClass4initEv+0xa0>)
	pinMode(PIN_LED_TXL, OUTPUT);
    2d5a:	2101      	movs	r1, #1
{
    2d5c:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    2d5e:	2015      	movs	r0, #21
	txLEDPulse = 0;
    2d60:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    2d62:	f000 feb1 	bl	3ac8 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    2d66:	2101      	movs	r1, #1
    2d68:	2015      	movs	r0, #21
    2d6a:	f000 feb1 	bl	3ad0 <digitalWrite>
	rxLEDPulse = 0;
    2d6e:	4b22      	ldr	r3, [pc, #136]	; (2df8 <_ZN14USBDeviceClass4initEv+0xa4>)
	pinMode(PIN_LED_RXL, OUTPUT);
    2d70:	2101      	movs	r1, #1
    2d72:	2014      	movs	r0, #20
	rxLEDPulse = 0;
    2d74:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    2d76:	f000 fea7 	bl	3ac8 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    2d7a:	2101      	movs	r1, #1
    2d7c:	2014      	movs	r0, #20
    2d7e:	f000 fea7 	bl	3ad0 <digitalWrite>
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d82:	2301      	movs	r3, #1
    2d84:	4a1d      	ldr	r2, [pc, #116]	; (2dfc <_ZN14USBDeviceClass4initEv+0xa8>)
        pinPeripheral( PIN_USB_DM, PIO_COM );
    2d86:	2018      	movs	r0, #24
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d88:	6991      	ldr	r1, [r2, #24]
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    2d8a:	3440      	adds	r4, #64	; 0x40
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d8c:	430b      	orrs	r3, r1
    2d8e:	6193      	str	r3, [r2, #24]
        pinPeripheral( PIN_USB_DM, PIO_COM );
    2d90:	210f      	movs	r1, #15
    2d92:	f000 ff07 	bl	3ba4 <pinPeripheral>
        pinPeripheral( PIN_USB_DP, PIO_COM );
    2d96:	210f      	movs	r1, #15
    2d98:	2019      	movs	r0, #25
    2d9a:	f000 ff03 	bl	3ba4 <pinPeripheral>
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    2d9e:	4b18      	ldr	r3, [pc, #96]	; (2e00 <_ZN14USBDeviceClass4initEv+0xac>)
    2da0:	601c      	str	r4, [r3, #0]
        while ( (GCLK->PCHCTRL[GCM_USB].reg & GCLK_PCHCTRL_CHEN) == 0 );        // wait for sync
    2da2:	681a      	ldr	r2, [r3, #0]
    2da4:	4222      	tst	r2, r4
    2da6:	d0fc      	beq.n	2da2 <_ZN14USBDeviceClass4initEv+0x4e>
        USB_SetHandler(&UDD_Handler);
    2da8:	4816      	ldr	r0, [pc, #88]	; (2e04 <_ZN14USBDeviceClass4initEv+0xb0>)
    2daa:	f7ff fc55 	bl	2658 <USB_SetHandler>
	usbd.reset();
    2dae:	4e16      	ldr	r6, [pc, #88]	; (2e08 <_ZN14USBDeviceClass4initEv+0xb4>)
    2db0:	0030      	movs	r0, r6
    2db2:	f7ff fe09 	bl	29c8 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    2db6:	0030      	movs	r0, r6
    2db8:	f7ff fe18 	bl	29ec <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    2dbc:	217f      	movs	r1, #127	; 0x7f
    2dbe:	6833      	ldr	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2dc0:	20c1      	movs	r0, #193	; 0xc1
    2dc2:	781a      	ldrb	r2, [r3, #0]
    2dc4:	0080      	lsls	r0, r0, #2
    2dc6:	400a      	ands	r2, r1
    2dc8:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2dca:	2204      	movs	r2, #4
    2dcc:	7819      	ldrb	r1, [r3, #0]
    2dce:	4e0f      	ldr	r6, [pc, #60]	; (2e0c <_ZN14USBDeviceClass4initEv+0xb8>)
    2dd0:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2dd2:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2dd4:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2dd6:	891a      	ldrh	r2, [r3, #8]
    2dd8:	438a      	bics	r2, r1
    2dda:	811a      	strh	r2, [r3, #8]
    2ddc:	4a0c      	ldr	r2, [pc, #48]	; (2e10 <_ZN14USBDeviceClass4initEv+0xbc>)
    2dde:	5811      	ldr	r1, [r2, r0]
    2de0:	4031      	ands	r1, r6
    2de2:	5011      	str	r1, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2de4:	6014      	str	r4, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    2de6:	2202      	movs	r2, #2
    2de8:	7819      	ldrb	r1, [r3, #0]
    2dea:	430a      	orrs	r2, r1
    2dec:	701a      	strb	r2, [r3, #0]
	initialized = true;
    2dee:	2301      	movs	r3, #1
    2df0:	702b      	strb	r3, [r5, #0]
}
    2df2:	bd70      	pop	{r4, r5, r6, pc}
    2df4:	2000039d 	.word	0x2000039d
    2df8:	2000039c 	.word	0x2000039c
    2dfc:	40000400 	.word	0x40000400
    2e00:	40001890 	.word	0x40001890
    2e04:	000037e5 	.word	0x000037e5
    2e08:	20000834 	.word	0x20000834
    2e0c:	ff00ffff 	.word	0xff00ffff
    2e10:	e000e100 	.word	0xe000e100

00002e14 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    2e14:	7800      	ldrb	r0, [r0, #0]
    2e16:	2800      	cmp	r0, #0
    2e18:	d010      	beq.n	2e3c <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    2e1a:	2101      	movs	r1, #1
    2e1c:	4b08      	ldr	r3, [pc, #32]	; (2e40 <_ZN14USBDeviceClass6attachEv+0x2c>)
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	891a      	ldrh	r2, [r3, #8]
    2e22:	438a      	bics	r2, r1
    2e24:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    2e26:	2208      	movs	r2, #8
    2e28:	8b19      	ldrh	r1, [r3, #24]
    2e2a:	430a      	orrs	r2, r1
    2e2c:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    2e2e:	2204      	movs	r2, #4
    2e30:	8b19      	ldrh	r1, [r3, #24]
    2e32:	430a      	orrs	r2, r1
    2e34:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    2e36:	2200      	movs	r2, #0
    2e38:	4b02      	ldr	r3, [pc, #8]	; (2e44 <_ZN14USBDeviceClass6attachEv+0x30>)
    2e3a:	601a      	str	r2, [r3, #0]
}
    2e3c:	4770      	bx	lr
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	20000834 	.word	0x20000834
    2e44:	2000082c 	.word	0x2000082c

00002e48 <_ZN14USBDeviceClass10setAddressEm>:
{
    2e48:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2e4a:	4a10      	ldr	r2, [pc, #64]	; (2e8c <_ZN14USBDeviceClass10setAddressEm+0x44>)
    2e4c:	6993      	ldr	r3, [r2, #24]
    2e4e:	0b9b      	lsrs	r3, r3, #14
    2e50:	039b      	lsls	r3, r3, #14
    2e52:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2e54:	6813      	ldr	r3, [r2, #0]
    2e56:	2202      	movs	r2, #2
    2e58:	33ff      	adds	r3, #255	; 0xff
    2e5a:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2e5c:	7998      	ldrb	r0, [r3, #6]
    2e5e:	3a82      	subs	r2, #130	; 0x82
    2e60:	4302      	orrs	r2, r0
    2e62:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    2e64:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    2e66:	0792      	lsls	r2, r2, #30
    2e68:	d5fc      	bpl.n	2e64 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2e6a:	2282      	movs	r2, #130	; 0x82
    2e6c:	247f      	movs	r4, #127	; 0x7f
    2e6e:	05d2      	lsls	r2, r2, #23
    2e70:	7a93      	ldrb	r3, [r2, #10]
    2e72:	4021      	ands	r1, r4
    2e74:	43a3      	bics	r3, r4
    2e76:	0008      	movs	r0, r1
    2e78:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2e7a:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2e7c:	4301      	orrs	r1, r0
    2e7e:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2e80:	7a91      	ldrb	r1, [r2, #10]
    2e82:	425b      	negs	r3, r3
    2e84:	430b      	orrs	r3, r1
    2e86:	7293      	strb	r3, [r2, #10]
}
    2e88:	bd10      	pop	{r4, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	20000834 	.word	0x20000834

00002e90 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    2e90:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    2e92:	790b      	ldrb	r3, [r1, #4]
{
    2e94:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    2e96:	2b00      	cmp	r3, #0
    2e98:	d10c      	bne.n	2eb4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    2e9a:	0008      	movs	r0, r1
    2e9c:	f002 fb4e 	bl	553c <_Z9CDC_SetupR8USBSetup>
    2ea0:	2800      	cmp	r0, #0
    2ea2:	d001      	beq.n	2ea8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    2ea4:	2001      	movs	r0, #1
}
    2ea6:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2ea8:	4a09      	ldr	r2, [pc, #36]	; (2ed0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    2eaa:	6993      	ldr	r3, [r2, #24]
    2eac:	0b9b      	lsrs	r3, r3, #14
    2eae:	039b      	lsls	r3, r3, #14
    2eb0:	6193      	str	r3, [r2, #24]
    2eb2:	e7f7      	b.n	2ea4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    2eb4:	f002 fbee 	bl	5694 <_Z12PluggableUSBv>
    2eb8:	0021      	movs	r1, r4
    2eba:	f002 fbda 	bl	5672 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    2ebe:	2800      	cmp	r0, #0
    2ec0:	d1f0      	bne.n	2ea4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    2ec2:	4a03      	ldr	r2, [pc, #12]	; (2ed0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    2ec4:	6993      	ldr	r3, [r2, #24]
    2ec6:	0b9b      	lsrs	r3, r3, #14
    2ec8:	039b      	lsls	r3, r3, #14
    2eca:	6193      	str	r3, [r2, #24]
    2ecc:	e7eb      	b.n	2ea6 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	20000834 	.word	0x20000834

00002ed4 <_ZN14USBDeviceClass6initEPEmm>:
{
    2ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ed6:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    2ed8:	2a83      	cmp	r2, #131	; 0x83
    2eda:	d119      	bne.n	2f10 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2edc:	b2cb      	uxtb	r3, r1
    2ede:	4c32      	ldr	r4, [pc, #200]	; (2fa8 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    2ee0:	015a      	lsls	r2, r3, #5
    2ee2:	18a2      	adds	r2, r4, r2
    2ee4:	6991      	ldr	r1, [r2, #24]
    2ee6:	4831      	ldr	r0, [pc, #196]	; (2fac <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    2ee8:	01ad      	lsls	r5, r5, #6
    2eea:	4008      	ands	r0, r1
    2eec:	21c0      	movs	r1, #192	; 0xc0
    2eee:	0589      	lsls	r1, r1, #22
    2ef0:	4301      	orrs	r1, r0
    2ef2:	6191      	str	r1, [r2, #24]
    2ef4:	492e      	ldr	r1, [pc, #184]	; (2fb0 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2ef6:	6820      	ldr	r0, [r4, #0]
    2ef8:	194d      	adds	r5, r1, r5
    2efa:	2170      	movs	r1, #112	; 0x70
    2efc:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2efe:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2f00:	015b      	lsls	r3, r3, #5
    2f02:	5c1a      	ldrb	r2, [r3, r0]
    2f04:	438a      	bics	r2, r1
    2f06:	0011      	movs	r1, r2
    2f08:	2240      	movs	r2, #64	; 0x40
    2f0a:	430a      	orrs	r2, r1
    2f0c:	541a      	strb	r2, [r3, r0]
}
    2f0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    2f10:	2a02      	cmp	r2, #2
    2f12:	d144      	bne.n	2f9e <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
    2f14:	008b      	lsls	r3, r1, #2
    2f16:	9301      	str	r3, [sp, #4]
    2f18:	4b26      	ldr	r3, [pc, #152]	; (2fb4 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    2f1a:	008a      	lsls	r2, r1, #2
    2f1c:	58d6      	ldr	r6, [r2, r3]
    2f1e:	2e00      	cmp	r6, #0
    2f20:	d1f5      	bne.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    2f22:	2038      	movs	r0, #56	; 0x38
    2f24:	f001 fee6 	bl	4cf4 <_Znwj>
		notify(false)
    2f28:	4b23      	ldr	r3, [pc, #140]	; (2fb8 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    2f2a:	4f1f      	ldr	r7, [pc, #124]	; (2fa8 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    2f2c:	6003      	str	r3, [r0, #0]
    2f2e:	2380      	movs	r3, #128	; 0x80
    2f30:	005b      	lsls	r3, r3, #1
    2f32:	60c3      	str	r3, [r0, #12]
    2f34:	1d43      	adds	r3, r0, #5
    2f36:	6206      	str	r6, [r0, #32]
    2f38:	6085      	str	r5, [r0, #8]
    2f3a:	6106      	str	r6, [r0, #16]
    2f3c:	6146      	str	r6, [r0, #20]
    2f3e:	61c6      	str	r6, [r0, #28]
    2f40:	0004      	movs	r4, r0
    2f42:	6047      	str	r7, [r0, #4]
    2f44:	77de      	strb	r6, [r3, #31]
    2f46:	62c6      	str	r6, [r0, #44]	; 0x2c
    2f48:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f4a:	2080      	movs	r0, #128	; 0x80
		notify(false)
    2f4c:	332f      	adds	r3, #47	; 0x2f
    2f4e:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f50:	0040      	lsls	r0, r0, #1
		notify(false)
    2f52:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f54:	f009 fd60 	bl	ca18 <malloc>
    2f58:	0006      	movs	r6, r0
    2f5a:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    2f5c:	2080      	movs	r0, #128	; 0x80
    2f5e:	0040      	lsls	r0, r0, #1
    2f60:	f009 fd5a 	bl	ca18 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f64:	b2ed      	uxtb	r5, r5
    2f66:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    2f68:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	689a      	ldr	r2, [r3, #8]
    2f6e:	490f      	ldr	r1, [pc, #60]	; (2fac <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2f70:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f72:	4011      	ands	r1, r2
    2f74:	22c0      	movs	r2, #192	; 0xc0
    2f76:	0592      	lsls	r2, r2, #22
    2f78:	430a      	orrs	r2, r1
    2f7a:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2f7c:	683a      	ldr	r2, [r7, #0]
    2f7e:	3508      	adds	r5, #8
    2f80:	016d      	lsls	r5, r5, #5
    2f82:	5ca9      	ldrb	r1, [r5, r2]
    2f84:	4381      	bics	r1, r0
    2f86:	0008      	movs	r0, r1
    2f88:	2103      	movs	r1, #3
    2f8a:	4301      	orrs	r1, r0
    2f8c:	54a9      	strb	r1, [r5, r2]
		release();
    2f8e:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2f90:	605e      	str	r6, [r3, #4]
		release();
    2f92:	f7ff fd99 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2f96:	4b07      	ldr	r3, [pc, #28]	; (2fb4 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    2f98:	9a01      	ldr	r2, [sp, #4]
    2f9a:	50d4      	str	r4, [r2, r3]
    2f9c:	e7b7      	b.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
    2f9e:	0011      	movs	r1, r2
    2fa0:	0028      	movs	r0, r5
    2fa2:	f7ff fca9 	bl	28f8 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    2fa6:	e7b2      	b.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
    2fa8:	20000834 	.word	0x20000834
    2fac:	8fffffff 	.word	0x8fffffff
    2fb0:	200003a8 	.word	0x200003a8
    2fb4:	20000380 	.word	0x20000380
    2fb8:	00010ccc 	.word	0x00010ccc

00002fbc <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    2fbc:	b570      	push	{r4, r5, r6, lr}
    2fbe:	0005      	movs	r5, r0
    2fc0:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    2fc2:	4b06      	ldr	r3, [pc, #24]	; (2fdc <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    2fc4:	00a2      	lsls	r2, r4, #2
    2fc6:	58d2      	ldr	r2, [r2, r3]
    2fc8:	2a00      	cmp	r2, #0
    2fca:	d005      	beq.n	2fd8 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    2fcc:	0021      	movs	r1, r4
    2fce:	0028      	movs	r0, r5
    2fd0:	f7ff ff80 	bl	2ed4 <_ZN14USBDeviceClass6initEPEmm>
    2fd4:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    2fd6:	e7f4      	b.n	2fc2 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    2fd8:	bd70      	pop	{r4, r5, r6, pc}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	20000010 	.word	0x20000010

00002fe0 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    2fe0:	4b08      	ldr	r3, [pc, #32]	; (3004 <_ZN14USBDeviceClass9availableEm+0x24>)
    2fe2:	008a      	lsls	r2, r1, #2
    2fe4:	58d0      	ldr	r0, [r2, r3]
{
    2fe6:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    2fe8:	2800      	cmp	r0, #0
    2fea:	d003      	beq.n	2ff4 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    2fec:	6803      	ldr	r3, [r0, #0]
    2fee:	689b      	ldr	r3, [r3, #8]
    2ff0:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    2ff2:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2ff4:	b2c9      	uxtb	r1, r1
    2ff6:	4b04      	ldr	r3, [pc, #16]	; (3008 <_ZN14USBDeviceClass9availableEm+0x28>)
    2ff8:	0149      	lsls	r1, r1, #5
    2ffa:	1859      	adds	r1, r3, r1
    2ffc:	6888      	ldr	r0, [r1, #8]
    2ffe:	0480      	lsls	r0, r0, #18
    3000:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    3002:	e7f6      	b.n	2ff2 <_ZN14USBDeviceClass9availableEm+0x12>
    3004:	20000380 	.word	0x20000380
    3008:	20000834 	.word	0x20000834

0000300c <_ZN14USBDeviceClass5flushEm>:
{
    300c:	b510      	push	{r4, lr}
    300e:	000c      	movs	r4, r1
	if (available(ep)) {
    3010:	f7ff ffe6 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3014:	2800      	cmp	r0, #0
    3016:	d00c      	beq.n	3032 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3018:	4b06      	ldr	r3, [pc, #24]	; (3034 <_ZN14USBDeviceClass5flushEm+0x28>)
    301a:	b2e4      	uxtb	r4, r4
    301c:	681b      	ldr	r3, [r3, #0]
    301e:	3408      	adds	r4, #8
    3020:	0164      	lsls	r4, r4, #5
    3022:	191c      	adds	r4, r3, r4
    3024:	2380      	movs	r3, #128	; 0x80
    3026:	7962      	ldrb	r2, [r4, #5]
    3028:	425b      	negs	r3, r3
    302a:	4313      	orrs	r3, r2
    302c:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    302e:	2302      	movs	r3, #2
    3030:	71e3      	strb	r3, [r4, #7]
}
    3032:	bd10      	pop	{r4, pc}
    3034:	20000834 	.word	0x20000834

00003038 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    3038:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    303a:	4b13      	ldr	r3, [pc, #76]	; (3088 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    303c:	b2cc      	uxtb	r4, r1
    303e:	4a13      	ldr	r2, [pc, #76]	; (308c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    3040:	0160      	lsls	r0, r4, #5
    3042:	0189      	lsls	r1, r1, #6
    3044:	1859      	adds	r1, r3, r1
    3046:	1813      	adds	r3, r2, r0
    3048:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    304a:	6899      	ldr	r1, [r3, #8]
    304c:	4d10      	ldr	r5, [pc, #64]	; (3090 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    304e:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3050:	400d      	ands	r5, r1
    3052:	2180      	movs	r1, #128	; 0x80
    3054:	0289      	lsls	r1, r1, #10
    3056:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3058:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    305a:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    305c:	6899      	ldr	r1, [r3, #8]
    305e:	0b89      	lsrs	r1, r1, #14
    3060:	0389      	lsls	r1, r1, #14
    3062:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3064:	6811      	ldr	r1, [r2, #0]
    3066:	0163      	lsls	r3, r4, #5
    3068:	18cb      	adds	r3, r1, r3
    306a:	791e      	ldrb	r6, [r3, #4]
    306c:	4335      	orrs	r5, r6
    306e:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    3070:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    3072:	066d      	lsls	r5, r5, #25
    3074:	d5fc      	bpl.n	3070 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    3076:	0164      	lsls	r4, r4, #5
    3078:	1909      	adds	r1, r1, r4
    307a:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    307c:	07db      	lsls	r3, r3, #31
    307e:	d5fc      	bpl.n	307a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3080:	1812      	adds	r2, r2, r0
    3082:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    3084:	b2c0      	uxtb	r0, r0
}
    3086:	bd70      	pop	{r4, r5, r6, pc}
    3088:	20000568 	.word	0x20000568
    308c:	20000834 	.word	0x20000834
    3090:	f0003fff 	.word	0xf0003fff

00003094 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    3094:	b570      	push	{r4, r5, r6, lr}
    3096:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3098:	2240      	movs	r2, #64	; 0x40
    309a:	4b0b      	ldr	r3, [pc, #44]	; (30c8 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    309c:	000d      	movs	r5, r1
    309e:	681b      	ldr	r3, [r3, #0]
    30a0:	33ff      	adds	r3, #255	; 0xff
    30a2:	7959      	ldrb	r1, [r3, #5]
    30a4:	430a      	orrs	r2, r1
    30a6:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    30a8:	2100      	movs	r1, #0
    30aa:	f7ff ffc5 	bl	3038 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    30ae:	42a0      	cmp	r0, r4
    30b0:	d900      	bls.n	30b4 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    30b2:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    30b4:	2300      	movs	r3, #0
		data[i] = buffer[i];
    30b6:	4905      	ldr	r1, [pc, #20]	; (30cc <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    30b8:	42a3      	cmp	r3, r4
    30ba:	d003      	beq.n	30c4 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    30bc:	5c5a      	ldrb	r2, [r3, r1]
    30be:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    30c0:	3301      	adds	r3, #1
    30c2:	e7f9      	b.n	30b8 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    30c4:	bd70      	pop	{r4, r5, r6, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	20000834 	.word	0x20000834
    30cc:	20000568 	.word	0x20000568

000030d0 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    30d0:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    30d2:	b2c9      	uxtb	r1, r1
    30d4:	480b      	ldr	r0, [pc, #44]	; (3104 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    30d6:	0149      	lsls	r1, r1, #5
    30d8:	1842      	adds	r2, r0, r1
    30da:	6893      	ldr	r3, [r2, #8]
    30dc:	049b      	lsls	r3, r3, #18
    30de:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    30e0:	2b3f      	cmp	r3, #63	; 0x3f
    30e2:	dd0b      	ble.n	30fc <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    30e4:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    30e6:	3b40      	subs	r3, #64	; 0x40
    30e8:	049b      	lsls	r3, r3, #18
    30ea:	0ba4      	lsrs	r4, r4, #14
    30ec:	0c9b      	lsrs	r3, r3, #18
    30ee:	03a4      	lsls	r4, r4, #14
    30f0:	4323      	orrs	r3, r4
    30f2:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    30f4:	1841      	adds	r1, r0, r1
    30f6:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    30f8:	b2c0      	uxtb	r0, r0
}
    30fa:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    30fc:	6893      	ldr	r3, [r2, #8]
    30fe:	0b9b      	lsrs	r3, r3, #14
    3100:	039b      	lsls	r3, r3, #14
    3102:	e7f6      	b.n	30f2 <_ZN14USBDeviceClass7armRecvEm+0x22>
    3104:	20000834 	.word	0x20000834

00003108 <_ZN14USBDeviceClass4recvEmPvm>:
{
    3108:	b5f0      	push	{r4, r5, r6, r7, lr}
    310a:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    310c:	4b30      	ldr	r3, [pc, #192]	; (31d0 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    310e:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    3110:	681b      	ldr	r3, [r3, #0]
{
    3112:	0006      	movs	r6, r0
    3114:	000d      	movs	r5, r1
    3116:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    3118:	2b00      	cmp	r3, #0
    311a:	d055      	beq.n	31c8 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
    311c:	4f2d      	ldr	r7, [pc, #180]	; (31d4 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    311e:	7839      	ldrb	r1, [r7, #0]
    3120:	b2c9      	uxtb	r1, r1
    3122:	2900      	cmp	r1, #0
    3124:	d102      	bne.n	312c <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    3126:	2014      	movs	r0, #20
    3128:	f000 fcd2 	bl	3ad0 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
    312c:	2364      	movs	r3, #100	; 0x64
    312e:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
    3130:	4b29      	ldr	r3, [pc, #164]	; (31d8 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    3132:	00aa      	lsls	r2, r5, #2
    3134:	58d0      	ldr	r0, [r2, r3]
    3136:	2800      	cmp	r0, #0
    3138:	d008      	beq.n	314c <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    313a:	6803      	ldr	r3, [r0, #0]
    313c:	0022      	movs	r2, r4
    313e:	685b      	ldr	r3, [r3, #4]
    3140:	9901      	ldr	r1, [sp, #4]
    3142:	4798      	blx	r3
    3144:	0004      	movs	r4, r0
}
    3146:	0020      	movs	r0, r4
    3148:	b005      	add	sp, #20
    314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    314c:	0029      	movs	r1, r5
    314e:	0030      	movs	r0, r6
    3150:	f7ff ff46 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3154:	4284      	cmp	r4, r0
    3156:	d904      	bls.n	3162 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    3158:	0029      	movs	r1, r5
    315a:	0030      	movs	r0, r6
    315c:	f7ff ff40 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3160:	0004      	movs	r4, r0
	armRecv(ep);
    3162:	0029      	movs	r1, r5
    3164:	0030      	movs	r0, r6
    3166:	f7ff ffb3 	bl	30d0 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    316a:	2101      	movs	r1, #1
    316c:	b2eb      	uxtb	r3, r5
    316e:	4f1b      	ldr	r7, [pc, #108]	; (31dc <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    3170:	9303      	str	r3, [sp, #12]
    3172:	015b      	lsls	r3, r3, #5
    3174:	9302      	str	r3, [sp, #8]
    3176:	9a02      	ldr	r2, [sp, #8]
    3178:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    317a:	9801      	ldr	r0, [sp, #4]
    317c:	189b      	adds	r3, r3, r2
    317e:	33ff      	adds	r3, #255	; 0xff
    3180:	7a5a      	ldrb	r2, [r3, #9]
    3182:	430a      	orrs	r2, r1
    3184:	4916      	ldr	r1, [pc, #88]	; (31e0 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    3186:	725a      	strb	r2, [r3, #9]
    3188:	01ab      	lsls	r3, r5, #6
    318a:	18c9      	adds	r1, r1, r3
    318c:	0022      	movs	r2, r4
    318e:	f009 fc78 	bl	ca82 <memcpy>
	if (len && !available(ep)) {
    3192:	2c00      	cmp	r4, #0
    3194:	d0d7      	beq.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    3196:	0029      	movs	r1, r5
    3198:	0030      	movs	r0, r6
    319a:	f7ff ff21 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    319e:	2800      	cmp	r0, #0
    31a0:	d1d1      	bne.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    31a2:	2140      	movs	r1, #64	; 0x40
    31a4:	9b03      	ldr	r3, [sp, #12]
    31a6:	683a      	ldr	r2, [r7, #0]
    31a8:	3308      	adds	r3, #8
    31aa:	015b      	lsls	r3, r3, #5
    31ac:	18d3      	adds	r3, r2, r3
    31ae:	7918      	ldrb	r0, [r3, #4]
    31b0:	4301      	orrs	r1, r0
    31b2:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    31b4:	2101      	movs	r1, #1
    31b6:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    31b8:	2101      	movs	r1, #1
    31ba:	9b02      	ldr	r3, [sp, #8]
    31bc:	18d3      	adds	r3, r2, r3
    31be:	33ff      	adds	r3, #255	; 0xff
    31c0:	7a9a      	ldrb	r2, [r3, #10]
    31c2:	430a      	orrs	r2, r1
    31c4:	729a      	strb	r2, [r3, #10]
    31c6:	e7be      	b.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    31c8:	2401      	movs	r4, #1
    31ca:	4264      	negs	r4, r4
    31cc:	e7bb      	b.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	2000082c 	.word	0x2000082c
    31d4:	2000039c 	.word	0x2000039c
    31d8:	20000380 	.word	0x20000380
    31dc:	20000834 	.word	0x20000834
    31e0:	20000568 	.word	0x20000568

000031e4 <_ZN14USBDeviceClass4recvEm>:
{
    31e4:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    31e6:	466b      	mov	r3, sp
    31e8:	1ddc      	adds	r4, r3, #7
    31ea:	0022      	movs	r2, r4
    31ec:	2301      	movs	r3, #1
    31ee:	f7ff ff8b 	bl	3108 <_ZN14USBDeviceClass4recvEmPvm>
    31f2:	2801      	cmp	r0, #1
    31f4:	d101      	bne.n	31fa <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    31f6:	7820      	ldrb	r0, [r4, #0]
}
    31f8:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    31fa:	2001      	movs	r0, #1
    31fc:	4240      	negs	r0, r0
    31fe:	e7fb      	b.n	31f8 <_ZN14USBDeviceClass4recvEm+0x14>

00003200 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    3200:	b5f0      	push	{r4, r5, r6, r7, lr}
    3202:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    3204:	4b3a      	ldr	r3, [pc, #232]	; (32f0 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
    3206:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    3208:	681b      	ldr	r3, [r3, #0]
{
    320a:	000f      	movs	r7, r1
    320c:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    320e:	2b00      	cmp	r3, #0
    3210:	d03f      	beq.n	3292 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    3212:	2380      	movs	r3, #128	; 0x80
    3214:	01db      	lsls	r3, r3, #7
    3216:	429e      	cmp	r6, r3
    3218:	d83b      	bhi.n	3292 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    321a:	4c36      	ldr	r4, [pc, #216]	; (32f4 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    321c:	7821      	ldrb	r1, [r4, #0]
    321e:	b2c9      	uxtb	r1, r1
    3220:	2900      	cmp	r1, #0
    3222:	d102      	bne.n	322a <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    3224:	2015      	movs	r0, #21
    3226:	f000 fc53 	bl	3ad0 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    322a:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    322c:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    322e:	4a32      	ldr	r2, [pc, #200]	; (32f8 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    3230:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    3232:	01bb      	lsls	r3, r7, #6
    3234:	18d3      	adds	r3, r2, r3
    3236:	9302      	str	r3, [sp, #8]
	while (len != 0)
    3238:	2e00      	cmp	r6, #0
    323a:	d02c      	beq.n	3296 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    323c:	4b2f      	ldr	r3, [pc, #188]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    323e:	681b      	ldr	r3, [r3, #0]
    3240:	9303      	str	r3, [sp, #12]
    3242:	23ff      	movs	r3, #255	; 0xff
    3244:	403b      	ands	r3, r7
    3246:	001c      	movs	r4, r3
    3248:	9300      	str	r3, [sp, #0]
    324a:	3408      	adds	r4, #8
    324c:	9b03      	ldr	r3, [sp, #12]
    324e:	0164      	lsls	r4, r4, #5
    3250:	191c      	adds	r4, r3, r4
    3252:	79a3      	ldrb	r3, [r4, #6]
    3254:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    3256:	d021      	beq.n	329c <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    3258:	4b29      	ldr	r3, [pc, #164]	; (3300 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    325a:	492a      	ldr	r1, [pc, #168]	; (3304 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    325c:	6818      	ldr	r0, [r3, #0]
    325e:	f006 fac1 	bl	97e4 <__udivsi3>
    3262:	4b29      	ldr	r3, [pc, #164]	; (3308 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    3264:	2117      	movs	r1, #23
    3266:	4358      	muls	r0, r3
    3268:	f006 fabc 	bl	97e4 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    326c:	4b27      	ldr	r3, [pc, #156]	; (330c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    326e:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    3270:	0792      	lsls	r2, r2, #30
    3272:	d413      	bmi.n	329c <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    3274:	5dda      	ldrb	r2, [r3, r7]
    3276:	2a00      	cmp	r2, #0
    3278:	d101      	bne.n	327e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    327a:	3801      	subs	r0, #1
    327c:	d2f7      	bcs.n	326e <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    327e:	2201      	movs	r2, #1
    3280:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3282:	9b00      	ldr	r3, [sp, #0]
    3284:	015a      	lsls	r2, r3, #5
    3286:	4b1d      	ldr	r3, [pc, #116]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    3288:	189b      	adds	r3, r3, r2
    328a:	699a      	ldr	r2, [r3, #24]
    328c:	0b92      	lsrs	r2, r2, #14
    328e:	0392      	lsls	r2, r2, #14
    3290:	619a      	str	r2, [r3, #24]
					return -1;
    3292:	2501      	movs	r5, #1
    3294:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    3296:	0028      	movs	r0, r5
    3298:	b005      	add	sp, #20
    329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    329c:	2200      	movs	r2, #0
    329e:	4b1b      	ldr	r3, [pc, #108]	; (330c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    32a0:	0034      	movs	r4, r6
    32a2:	55da      	strb	r2, [r3, r7]
    32a4:	2e3f      	cmp	r6, #63	; 0x3f
    32a6:	d900      	bls.n	32aa <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
    32a8:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    32aa:	0022      	movs	r2, r4
    32ac:	9901      	ldr	r1, [sp, #4]
    32ae:	9802      	ldr	r0, [sp, #8]
    32b0:	f009 fbe7 	bl	ca82 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32b4:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32b6:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32b8:	015a      	lsls	r2, r3, #5
    32ba:	4b10      	ldr	r3, [pc, #64]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32bc:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32be:	189b      	adds	r3, r3, r2
    32c0:	9a02      	ldr	r2, [sp, #8]
		written += length;
    32c2:	192d      	adds	r5, r5, r4
    32c4:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32c6:	699a      	ldr	r2, [r3, #24]
		len -= length;
    32c8:	1b36      	subs	r6, r6, r4
    32ca:	0b92      	lsrs	r2, r2, #14
    32cc:	0392      	lsls	r2, r2, #14
    32ce:	430a      	orrs	r2, r1
    32d0:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    32d2:	9b00      	ldr	r3, [sp, #0]
    32d4:	9a03      	ldr	r2, [sp, #12]
    32d6:	3308      	adds	r3, #8
    32d8:	015b      	lsls	r3, r3, #5
    32da:	18d3      	adds	r3, r2, r3
    32dc:	2202      	movs	r2, #2
    32de:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    32e0:	7959      	ldrb	r1, [r3, #5]
    32e2:	3a82      	subs	r2, #130	; 0x82
    32e4:	430a      	orrs	r2, r1
    32e6:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    32e8:	9b01      	ldr	r3, [sp, #4]
    32ea:	191b      	adds	r3, r3, r4
    32ec:	9301      	str	r3, [sp, #4]
	while (len != 0)
    32ee:	e7a3      	b.n	3238 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    32f0:	2000082c 	.word	0x2000082c
    32f4:	2000039d 	.word	0x2000039d
    32f8:	200003a8 	.word	0x200003a8
    32fc:	20000834 	.word	0x20000834
    3300:	20000038 	.word	0x20000038
    3304:	000f4240 	.word	0x000f4240
    3308:	00011170 	.word	0x00011170
    330c:	2000039f 	.word	0x2000039f

00003310 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    3310:	b570      	push	{r4, r5, r6, lr}
    3312:	000d      	movs	r5, r1
    3314:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    3316:	4e0d      	ldr	r6, [pc, #52]	; (334c <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    3318:	01ab      	lsls	r3, r5, #6
    331a:	18f6      	adds	r6, r6, r3
{
    331c:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    331e:	0030      	movs	r0, r6
    3320:	0022      	movs	r2, r4
    3322:	f009 fbae 	bl	ca82 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3326:	b2ed      	uxtb	r5, r5
    3328:	4909      	ldr	r1, [pc, #36]	; (3350 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    332a:	016d      	lsls	r5, r5, #5
    332c:	194d      	adds	r5, r1, r5
    332e:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3330:	69ab      	ldr	r3, [r5, #24]
    3332:	4a08      	ldr	r2, [pc, #32]	; (3354 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    3334:	0020      	movs	r0, r4
    3336:	4013      	ands	r3, r2
    3338:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    333a:	69ab      	ldr	r3, [r5, #24]
    333c:	04a2      	lsls	r2, r4, #18
    333e:	0b9b      	lsrs	r3, r3, #14
    3340:	0c92      	lsrs	r2, r2, #18
    3342:	039b      	lsls	r3, r3, #14
    3344:	4313      	orrs	r3, r2
    3346:	61ab      	str	r3, [r5, #24]
    3348:	bd70      	pop	{r4, r5, r6, pc}
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	200003a8 	.word	0x200003a8
    3350:	20000834 	.word	0x20000834
    3354:	f0003fff 	.word	0xf0003fff

00003358 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    3358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    335a:	4b10      	ldr	r3, [pc, #64]	; (339c <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    335c:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    335e:	781b      	ldrb	r3, [r3, #0]
{
    3360:	000f      	movs	r7, r1
    3362:	0015      	movs	r5, r2
	if (_dry_run == true)
    3364:	2b00      	cmp	r3, #0
    3366:	d10c      	bne.n	3382 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    3368:	4b0d      	ldr	r3, [pc, #52]	; (33a0 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    336a:	0016      	movs	r6, r2
    336c:	781c      	ldrb	r4, [r3, #0]
    336e:	2c00      	cmp	r4, #0
    3370:	d009      	beq.n	3386 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    3372:	4e0c      	ldr	r6, [pc, #48]	; (33a4 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    3374:	480c      	ldr	r0, [pc, #48]	; (33a8 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    3376:	8834      	ldrh	r4, [r6, #0]
    3378:	1900      	adds	r0, r0, r4
		_pack_size += len;
    337a:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    337c:	f009 fb81 	bl	ca82 <memcpy>
		_pack_size += len;
    3380:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    3382:	0028      	movs	r0, r5
    3384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    3386:	2e00      	cmp	r6, #0
    3388:	d0fb      	beq.n	3382 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    338a:	193a      	adds	r2, r7, r4
    338c:	0033      	movs	r3, r6
    338e:	2100      	movs	r1, #0
    3390:	9801      	ldr	r0, [sp, #4]
    3392:	f7ff ffbd 	bl	3310 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    3396:	1824      	adds	r4, r4, r0
		len -= sent;
    3398:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    339a:	e7f4      	b.n	3386 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    339c:	20000728 	.word	0x20000728
    33a0:	20000829 	.word	0x20000829
    33a4:	2000082a 	.word	0x2000082a
    33a8:	20000729 	.word	0x20000729

000033ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    33ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    33ae:	2000      	movs	r0, #0
{
    33b0:	af00      	add	r7, sp, #0
    33b2:	000e      	movs	r6, r1
    33b4:	0015      	movs	r5, r2
	if (maxlen < 2)
    33b6:	2a01      	cmp	r2, #1
    33b8:	dd26      	ble.n	3408 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    33ba:	1dd3      	adds	r3, r2, #7
    33bc:	466a      	mov	r2, sp
    33be:	08db      	lsrs	r3, r3, #3
    33c0:	00db      	lsls	r3, r3, #3
    33c2:	1ad3      	subs	r3, r2, r3
    33c4:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    33c6:	0008      	movs	r0, r1
    33c8:	f00a fc8d 	bl	dce6 <strlen>
	uint8_t buffer[maxlen];
    33cc:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    33ce:	2303      	movs	r3, #3
		buffer[i] = 0;
    33d0:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    33d2:	3001      	adds	r0, #1
    33d4:	0040      	lsls	r0, r0, #1
    33d6:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    33d8:	7063      	strb	r3, [r4, #1]
    33da:	1e5a      	subs	r2, r3, #1
    33dc:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    33de:	4295      	cmp	r5, r2
    33e0:	dd0b      	ble.n	33fa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    33e2:	7830      	ldrb	r0, [r6, #0]
    33e4:	2800      	cmp	r0, #0
    33e6:	d008      	beq.n	33fa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    33e8:	3601      	adds	r6, #1
    33ea:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    33ec:	429d      	cmp	r5, r3
    33ee:	d003      	beq.n	33f8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    33f0:	54e1      	strb	r1, [r4, r3]
    33f2:	3302      	adds	r3, #2
    33f4:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    33f6:	e7f0      	b.n	33da <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    33f8:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    33fa:	0021      	movs	r1, r4
    33fc:	4803      	ldr	r0, [pc, #12]	; (340c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    33fe:	f7ff ffab 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
    3402:	1e43      	subs	r3, r0, #1
    3404:	4198      	sbcs	r0, r3
    3406:	b2c0      	uxtb	r0, r0
}
    3408:	46bd      	mov	sp, r7
    340a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    340c:	2000037c 	.word	0x2000037c

00003410 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    3410:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    3412:	2700      	movs	r7, #0
	_dry_run = true;
    3414:	2601      	movs	r6, #1
{
    3416:	b087      	sub	sp, #28
	_dry_run = true;
    3418:	4b1e      	ldr	r3, [pc, #120]	; (3494 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    341a:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    341c:	a902      	add	r1, sp, #8
	_dry_run = true;
    341e:	701e      	strb	r6, [r3, #0]
{
    3420:	0005      	movs	r5, r0
	uint32_t total = 0;
    3422:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    3424:	f7ff fc5e 	bl	2ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    3428:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    342a:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    342c:	2209      	movs	r2, #9
    342e:	0039      	movs	r1, r7
    3430:	0020      	movs	r0, r4
    3432:	f009 fb41 	bl	cab8 <memset>
    3436:	2309      	movs	r3, #9
    3438:	7023      	strb	r3, [r4, #0]
    343a:	2302      	movs	r3, #2
    343c:	7063      	strb	r3, [r4, #1]
    343e:	339e      	adds	r3, #158	; 0x9e
    3440:	71e3      	strb	r3, [r4, #7]
    3442:	335a      	adds	r3, #90	; 0x5a
    3444:	7223      	strb	r3, [r4, #8]
    3446:	9b02      	ldr	r3, [sp, #8]
    3448:	7166      	strb	r6, [r4, #5]
    344a:	3309      	adds	r3, #9
    344c:	8063      	strh	r3, [r4, #2]
    344e:	466b      	mov	r3, sp
    3450:	791b      	ldrb	r3, [r3, #4]
    3452:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    3454:	4b0f      	ldr	r3, [pc, #60]	; (3494 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    3456:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    3458:	9b00      	ldr	r3, [sp, #0]
    345a:	2b09      	cmp	r3, #9
    345c:	d107      	bne.n	346e <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    345e:	001a      	movs	r2, r3
    3460:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    3462:	0028      	movs	r0, r5
    3464:	f7ff ff78 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    3468:	2001      	movs	r0, #1
    346a:	b007      	add	sp, #28
    346c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    346e:	4b0a      	ldr	r3, [pc, #40]	; (3498 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    3470:	2209      	movs	r2, #9
		_pack_message = true;
    3472:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    3474:	4e09      	ldr	r6, [pc, #36]	; (349c <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    3476:	0021      	movs	r1, r4
    3478:	0028      	movs	r0, r5
	total = 0;
    347a:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    347c:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    347e:	f7ff ff6b 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    3482:	a902      	add	r1, sp, #8
    3484:	0028      	movs	r0, r5
    3486:	f7ff fc2d 	bl	2ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    348a:	4b03      	ldr	r3, [pc, #12]	; (3498 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    348c:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    348e:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    3490:	4903      	ldr	r1, [pc, #12]	; (34a0 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    3492:	e7e6      	b.n	3462 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    3494:	20000728 	.word	0x20000728
    3498:	20000829 	.word	0x20000829
    349c:	2000082a 	.word	0x2000082a
    34a0:	20000729 	.word	0x20000729

000034a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    34a4:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    34a6:	78ce      	ldrb	r6, [r1, #3]
{
    34a8:	b092      	sub	sp, #72	; 0x48
    34aa:	0005      	movs	r5, r0
    34ac:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    34ae:	2e02      	cmp	r6, #2
    34b0:	d108      	bne.n	34c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    34b2:	88c9      	ldrh	r1, [r1, #6]
    34b4:	482b      	ldr	r0, [pc, #172]	; (3564 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    34b6:	f7ff ffab 	bl	3410 <_ZN14USBDeviceClass17sendConfigurationEm>
    34ba:	1e43      	subs	r3, r0, #1
    34bc:	4198      	sbcs	r0, r3
    34be:	b2c0      	uxtb	r0, r0
}
    34c0:	b012      	add	sp, #72	; 0x48
    34c2:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    34c4:	f002 f8e6 	bl	5694 <_Z12PluggableUSBv>
    34c8:	0021      	movs	r1, r4
    34ca:	f002 f8b3 	bl	5634 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    34ce:	2800      	cmp	r0, #0
    34d0:	d003      	beq.n	34da <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    34d2:	17c3      	asrs	r3, r0, #31
    34d4:	1a18      	subs	r0, r3, r0
    34d6:	0fc0      	lsrs	r0, r0, #31
    34d8:	e7f2      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    34da:	2e01      	cmp	r6, #1
    34dc:	d10b      	bne.n	34f6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (*desc_addr > setup.wLength) {
    34de:	88e2      	ldrh	r2, [r4, #6]
    34e0:	4921      	ldr	r1, [pc, #132]	; (3568 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
    34e2:	2a11      	cmp	r2, #17
    34e4:	dc10      	bgt.n	3508 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    34e6:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    34e8:	2a00      	cmp	r2, #0
    34ea:	d00d      	beq.n	3508 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    34ec:	0028      	movs	r0, r5
    34ee:	f7ff ff33 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    34f2:	2001      	movs	r0, #1
    34f4:	e7e4      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    34f6:	2e03      	cmp	r6, #3
    34f8:	d1e2      	bne.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    34fa:	78a3      	ldrb	r3, [r4, #2]
    34fc:	2b00      	cmp	r3, #0
    34fe:	d105      	bne.n	350c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    3500:	88e2      	ldrh	r2, [r4, #6]
    3502:	491a      	ldr	r1, [pc, #104]	; (356c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    3504:	2a03      	cmp	r2, #3
    3506:	ddee      	ble.n	34e6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    3508:	780a      	ldrb	r2, [r1, #0]
    350a:	e7ef      	b.n	34ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    350c:	2b02      	cmp	r3, #2
    350e:	d105      	bne.n	351c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    3510:	79a2      	ldrb	r2, [r4, #6]
    3512:	4917      	ldr	r1, [pc, #92]	; (3570 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3514:	0028      	movs	r0, r5
    3516:	f7ff ff49 	bl	33ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    351a:	e7d1      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    351c:	2b01      	cmp	r3, #1
    351e:	d102      	bne.n	3526 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3520:	79a2      	ldrb	r2, [r4, #6]
    3522:	4914      	ldr	r1, [pc, #80]	; (3574 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    3524:	e7f6      	b.n	3514 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    3526:	2b03      	cmp	r3, #3
    3528:	d1ca      	bne.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    352a:	4b13      	ldr	r3, [pc, #76]	; (3578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    352c:	a901      	add	r1, sp, #4
    352e:	6818      	ldr	r0, [r3, #0]
    3530:	f7ff f9d0 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    3534:	4b11      	ldr	r3, [pc, #68]	; (357c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    3536:	a903      	add	r1, sp, #12
    3538:	6818      	ldr	r0, [r3, #0]
    353a:	f7ff f9cb 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    353e:	4b10      	ldr	r3, [pc, #64]	; (3580 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    3540:	a905      	add	r1, sp, #20
    3542:	6818      	ldr	r0, [r3, #0]
    3544:	f7ff f9c6 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    3548:	4b0e      	ldr	r3, [pc, #56]	; (3584 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    354a:	a907      	add	r1, sp, #28
    354c:	6818      	ldr	r0, [r3, #0]
    354e:	f7ff f9c1 	bl	28d4 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    3552:	f002 f89f 	bl	5694 <_Z12PluggableUSBv>
    3556:	a909      	add	r1, sp, #36	; 0x24
    3558:	f002 f87c 	bl	5654 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    355c:	79a2      	ldrb	r2, [r4, #6]
    355e:	a901      	add	r1, sp, #4
    3560:	e7d8      	b.n	3514 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	2000037c 	.word	0x2000037c
    3568:	00010cfa 	.word	0x00010cfa
    356c:	00010ce6 	.word	0x00010ce6
    3570:	00010cd8 	.word	0x00010cd8
    3574:	00010cea 	.word	0x00010cea
    3578:	0080a00c 	.word	0x0080a00c
    357c:	0080a040 	.word	0x0080a040
    3580:	0080a044 	.word	0x0080a044
    3584:	0080a048 	.word	0x0080a048

00003588 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    3588:	b573      	push	{r0, r1, r4, r5, r6, lr}
    358a:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    358c:	7848      	ldrb	r0, [r1, #1]
{
    358e:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    3590:	280b      	cmp	r0, #11
    3592:	d811      	bhi.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    3594:	f006 f91c 	bl	97d0 <__gnu_thumb1_case_uqi>
    3598:	2e101d06 	.word	0x2e101d06
    359c:	70484310 	.word	0x70484310
    35a0:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    35a4:	7809      	ldrb	r1, [r1, #0]
    35a6:	aa01      	add	r2, sp, #4
    35a8:	2900      	cmp	r1, #0
    35aa:	d107      	bne.n	35bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    35ac:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    35ae:	7011      	strb	r1, [r2, #0]
    35b0:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    35b2:	0030      	movs	r0, r6
    35b4:	f7ff feac 	bl	3310 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    35b8:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    35ba:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    35bc:	2300      	movs	r3, #0
    35be:	7013      	strb	r3, [r2, #0]
    35c0:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    35c2:	4b2e      	ldr	r3, [pc, #184]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    35c4:	781b      	ldrb	r3, [r3, #0]
    35c6:	2b01      	cmp	r3, #1
    35c8:	d100      	bne.n	35cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    35ca:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    35cc:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    35ce:	2100      	movs	r1, #0
    35d0:	e7ef      	b.n	35b2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    35d2:	788a      	ldrb	r2, [r1, #2]
    35d4:	2300      	movs	r3, #0
    35d6:	2a01      	cmp	r2, #1
    35d8:	d104      	bne.n	35e4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    35da:	aa01      	add	r2, sp, #4
    35dc:	7013      	strb	r3, [r2, #0]
    35de:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    35e0:	4b27      	ldr	r3, [pc, #156]	; (3680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    35e2:	e7ef      	b.n	35c4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    35e4:	4a25      	ldr	r2, [pc, #148]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    35e6:	7013      	strb	r3, [r2, #0]
    35e8:	4a26      	ldr	r2, [pc, #152]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    35ea:	6993      	ldr	r3, [r2, #24]
    35ec:	0b9b      	lsrs	r3, r3, #14
    35ee:	039b      	lsls	r3, r3, #14
    35f0:	6193      	str	r3, [r2, #24]
    35f2:	e7e1      	b.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    35f4:	788c      	ldrb	r4, [r1, #2]
    35f6:	2c01      	cmp	r4, #1
    35f8:	d106      	bne.n	3608 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    35fa:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    35fc:	4b20      	ldr	r3, [pc, #128]	; (3680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    35fe:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    3600:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    3602:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    3604:	0023      	movs	r3, r4
    3606:	e7d4      	b.n	35b2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    3608:	2c00      	cmp	r4, #0
    360a:	d108      	bne.n	361e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    360c:	2001      	movs	r0, #1
    360e:	4b1b      	ldr	r3, [pc, #108]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    3610:	4a1c      	ldr	r2, [pc, #112]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3612:	7018      	strb	r0, [r3, #0]
    3614:	6993      	ldr	r3, [r2, #24]
    3616:	0b9b      	lsrs	r3, r3, #14
    3618:	039b      	lsls	r3, r3, #14
    361a:	6193      	str	r3, [r2, #24]
			return true;
    361c:	e7cd      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    361e:	78a9      	ldrb	r1, [r5, #2]
    3620:	0030      	movs	r0, r6
    3622:	f7ff fc11 	bl	2e48 <_ZN14USBDeviceClass10setAddressEm>
    3626:	e7c7      	b.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    3628:	0030      	movs	r0, r6
    362a:	f7ff ff3b 	bl	34a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    362e:	e7c4      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    3630:	2301      	movs	r3, #1
    3632:	4a15      	ldr	r2, [pc, #84]	; (3688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    3634:	e7cb      	b.n	35ce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    3636:	780b      	ldrb	r3, [r1, #0]
			return false;
    3638:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    363a:	06db      	lsls	r3, r3, #27
    363c:	d1bd      	bne.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    363e:	0030      	movs	r0, r6
    3640:	f7ff fcbc 	bl	2fbc <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    3644:	202a      	movs	r0, #42	; 0x2a
    3646:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    3648:	78aa      	ldrb	r2, [r5, #2]
    364a:	4b0f      	ldr	r3, [pc, #60]	; (3688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    364c:	30ff      	adds	r0, #255	; 0xff
    364e:	601a      	str	r2, [r3, #0]
    3650:	4a0c      	ldr	r2, [pc, #48]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3652:	6813      	ldr	r3, [r2, #0]
    3654:	5c1c      	ldrb	r4, [r3, r0]
    3656:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3658:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    365a:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    365c:	34ff      	adds	r4, #255	; 0xff
    365e:	5d19      	ldrb	r1, [r3, r4]
    3660:	3829      	subs	r0, #41	; 0x29
    3662:	38ff      	subs	r0, #255	; 0xff
    3664:	4301      	orrs	r1, r0
    3666:	5519      	strb	r1, [r3, r4]
    3668:	e7d4      	b.n	3614 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    366a:	2301      	movs	r3, #1
    366c:	4a07      	ldr	r2, [pc, #28]	; (368c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    366e:	e7ae      	b.n	35ce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    3670:	788a      	ldrb	r2, [r1, #2]
    3672:	4b06      	ldr	r3, [pc, #24]	; (368c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    3674:	601a      	str	r2, [r3, #0]
    3676:	e7b7      	b.n	35e8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    3678:	2000      	movs	r0, #0
    367a:	e79e      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    367c:	2000039e 	.word	0x2000039e
    3680:	200003a6 	.word	0x200003a6
    3684:	20000834 	.word	0x20000834
    3688:	2000082c 	.word	0x2000082c
    368c:	20000830 	.word	0x20000830

00003690 <_ZN14USBDeviceClass10ISRHandlerEv>:
}

#else
void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    3690:	4b4c      	ldr	r3, [pc, #304]	; (37c4 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
{
    3692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    3694:	781c      	ldrb	r4, [r3, #0]
{
    3696:	0007      	movs	r7, r0
	if (_pack_message == true) {
    3698:	2c00      	cmp	r4, #0
    369a:	d000      	beq.n	369e <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    369c:	e091      	b.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    369e:	4e4a      	ldr	r6, [pc, #296]	; (37c8 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    36a0:	6833      	ldr	r3, [r6, #0]
    36a2:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    36a4:	071b      	lsls	r3, r3, #28
    36a6:	d50e      	bpl.n	36c6 <_ZN14USBDeviceClass10ISRHandlerEv+0x36>
    36a8:	0021      	movs	r1, r4
    36aa:	0020      	movs	r0, r4
    36ac:	f7ff f924 	bl	28f8 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    36b0:	6832      	ldr	r2, [r6, #0]
    36b2:	2310      	movs	r3, #16
    36b4:	0011      	movs	r1, r2
    36b6:	31ff      	adds	r1, #255	; 0xff
    36b8:	7a88      	ldrb	r0, [r1, #10]
    36ba:	4303      	orrs	r3, r0
    36bc:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    36be:	4b43      	ldr	r3, [pc, #268]	; (37cc <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    36c0:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    36c2:	2308      	movs	r3, #8
    36c4:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    36c6:	6833      	ldr	r3, [r6, #0]
    36c8:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    36ca:	0752      	lsls	r2, r2, #29
    36cc:	d51f      	bpl.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    36ce:	2204      	movs	r2, #4
    36d0:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    36d2:	4a3f      	ldr	r2, [pc, #252]	; (37d0 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    36d4:	7813      	ldrb	r3, [r2, #0]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d00a      	beq.n	36f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
			txLEDPulse--;
    36da:	7813      	ldrb	r3, [r2, #0]
    36dc:	3b01      	subs	r3, #1
    36de:	b2db      	uxtb	r3, r3
    36e0:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    36e2:	7813      	ldrb	r3, [r2, #0]
    36e4:	2b00      	cmp	r3, #0
    36e6:	d103      	bne.n	36f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
				digitalWrite(PIN_LED_TXL, HIGH);
    36e8:	2101      	movs	r1, #1
    36ea:	2015      	movs	r0, #21
    36ec:	f000 f9f0 	bl	3ad0 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    36f0:	4a38      	ldr	r2, [pc, #224]	; (37d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    36f2:	7813      	ldrb	r3, [r2, #0]
    36f4:	2b00      	cmp	r3, #0
    36f6:	d00a      	beq.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
			rxLEDPulse--;
    36f8:	7813      	ldrb	r3, [r2, #0]
    36fa:	3b01      	subs	r3, #1
    36fc:	b2db      	uxtb	r3, r3
    36fe:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    3700:	7813      	ldrb	r3, [r2, #0]
    3702:	2b00      	cmp	r3, #0
    3704:	d103      	bne.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
				digitalWrite(PIN_LED_RXL, HIGH);
    3706:	2101      	movs	r1, #1
    3708:	2014      	movs	r0, #20
    370a:	f000 f9e1 	bl	3ad0 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    370e:	6833      	ldr	r3, [r6, #0]
    3710:	33ff      	adds	r3, #255	; 0xff
    3712:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    3714:	06d2      	lsls	r2, r2, #27
    3716:	d520      	bpl.n	375a <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    3718:	2210      	movs	r2, #16
    371a:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    371c:	7959      	ldrb	r1, [r3, #5]
    371e:	3230      	adds	r2, #48	; 0x30
    3720:	430a      	orrs	r2, r1
    3722:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    3724:	2360      	movs	r3, #96	; 0x60
    3726:	492c      	ldr	r1, [pc, #176]	; (37d8 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    3728:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    372a:	780a      	ldrb	r2, [r1, #0]
    372c:	421a      	tst	r2, r3
    372e:	d135      	bne.n	379c <_ZN14USBDeviceClass10ISRHandlerEv+0x10c>
			ok = handleStandardSetup(*setup);
    3730:	f7ff ff2a 	bl	3588 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    3734:	2800      	cmp	r0, #0
    3736:	d034      	beq.n	37a2 <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3738:	2280      	movs	r2, #128	; 0x80
    373a:	6833      	ldr	r3, [r6, #0]
    373c:	4252      	negs	r2, r2
    373e:	33ff      	adds	r3, #255	; 0xff
    3740:	7999      	ldrb	r1, [r3, #6]
    3742:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    3744:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    3746:	6833      	ldr	r3, [r6, #0]
    3748:	33ff      	adds	r3, #255	; 0xff
    374a:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    374c:	0652      	lsls	r2, r2, #25
    374e:	d504      	bpl.n	375a <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    3750:	2240      	movs	r2, #64	; 0x40
    3752:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    3754:	7a59      	ldrb	r1, [r3, #9]
    3756:	430a      	orrs	r2, r1
    3758:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    375a:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

        uint8_t i = (USB_EPT_NUM - 1);
        uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    375c:	2507      	movs	r5, #7
    375e:	8c1c      	ldrh	r4, [r3, #32]
    3760:	2301      	movs	r3, #1
    3762:	439c      	bics	r4, r3
    3764:	b2e4      	uxtb	r4, r4
        while (ept_int && i)
        {
                // Check if endpoint has a pending interrupt
                if ((ept_int & (1 << i)) != 0)
    3766:	9301      	str	r3, [sp, #4]
    3768:	b2e9      	uxtb	r1, r5
        while (ept_int && i)
    376a:	2c00      	cmp	r4, #0
    376c:	d029      	beq.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
    376e:	2d00      	cmp	r5, #0
    3770:	d027      	beq.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
                if ((ept_int & (1 << i)) != 0)
    3772:	0023      	movs	r3, r4
    3774:	412b      	asrs	r3, r5
    3776:	9a01      	ldr	r2, [sp, #4]
    3778:	4213      	tst	r3, r2
    377a:	d00d      	beq.n	3798 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    377c:	002b      	movs	r3, r5
    377e:	6832      	ldr	r2, [r6, #0]
    3780:	3308      	adds	r3, #8
    3782:	015b      	lsls	r3, r3, #5
    3784:	18d3      	adds	r3, r2, r3
    3786:	79da      	ldrb	r2, [r3, #7]
                {
                        // Endpoint Transfer Complete (0/1) Interrupt
                        if (usbd.epBank0IsTransferComplete(i) ||
    3788:	07d2      	lsls	r2, r2, #31
    378a:	d411      	bmi.n	37b0 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    378c:	79db      	ldrb	r3, [r3, #7]
    378e:	079b      	lsls	r3, r3, #30
    3790:	d40e      	bmi.n	37b0 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
                                        epHandlers[i]->handleEndpoint();
                                } else {
                                        handleEndpoint(i);
                                }
                        }
                        ept_int &= ~(1 << i);
    3792:	9b01      	ldr	r3, [sp, #4]
    3794:	40ab      	lsls	r3, r5
    3796:	439c      	bics	r4, r3
    3798:	3d01      	subs	r5, #1
    379a:	e7e5      	b.n	3768 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
			ok = handleClassInterfaceSetup(*setup);
    379c:	f7ff fb78 	bl	2e90 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    37a0:	e7c8      	b.n	3734 <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    37a2:	2220      	movs	r2, #32
    37a4:	4b0d      	ldr	r3, [pc, #52]	; (37dc <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    37a6:	e7cd      	b.n	3744 <_ZN14USBDeviceClass10ISRHandlerEv+0xb4>
                                        epHandlers[i]->handleEndpoint();
    37a8:	6803      	ldr	r3, [r0, #0]
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	4798      	blx	r3
    37ae:	e7f0      	b.n	3792 <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                                if (epHandlers[i]) {
    37b0:	4b0b      	ldr	r3, [pc, #44]	; (37e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x150>)
    37b2:	00aa      	lsls	r2, r5, #2
    37b4:	58d0      	ldr	r0, [r2, r3]
    37b6:	2800      	cmp	r0, #0
    37b8:	d1f6      	bne.n	37a8 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
                                        handleEndpoint(i);
    37ba:	0038      	movs	r0, r7
    37bc:	f7ff faa8 	bl	2d10 <_ZN14USBDeviceClass14handleEndpointEh>
    37c0:	e7e7      	b.n	3792 <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                }
                i--;
        }
}
    37c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    37c4:	20000829 	.word	0x20000829
    37c8:	20000834 	.word	0x20000834
    37cc:	2000082c 	.word	0x2000082c
    37d0:	2000039d 	.word	0x2000039d
    37d4:	2000039c 	.word	0x2000039c
    37d8:	20000568 	.word	0x20000568
    37dc:	410000ff 	.word	0x410000ff
    37e0:	20000380 	.word	0x20000380

000037e4 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    37e4:	b510      	push	{r4, lr}
  USBDevice.ISRHandler();
    37e6:	4802      	ldr	r0, [pc, #8]	; (37f0 <UDD_Handler+0xc>)
    37e8:	f7ff ff52 	bl	3690 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    37ec:	bd10      	pop	{r4, pc}
    37ee:	46c0      	nop			; (mov r8, r8)
    37f0:	2000037c 	.word	0x2000037c

000037f4 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    37f4:	2282      	movs	r2, #130	; 0x82
    37f6:	4b02      	ldr	r3, [pc, #8]	; (3800 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    37f8:	05d2      	lsls	r2, r2, #23
    37fa:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    37fc:	4770      	bx	lr
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	20000834 	.word	0x20000834

00003804 <init>:
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3804:	20c0      	movs	r0, #192	; 0xc0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3806:	491a      	ldr	r1, [pc, #104]	; (3870 <init+0x6c>)
    3808:	4b1a      	ldr	r3, [pc, #104]	; (3874 <init+0x70>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    380a:	4a1b      	ldr	r2, [pc, #108]	; (3878 <init+0x74>)
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz (optionally 120MHz for D51).
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    380c:	b510      	push	{r4, lr}
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    380e:	604b      	str	r3, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3810:	6a13      	ldr	r3, [r2, #32]
    3812:	0600      	lsls	r0, r0, #24
    3814:	021b      	lsls	r3, r3, #8
    3816:	0a1b      	lsrs	r3, r3, #8
    3818:	4303      	orrs	r3, r0
    381a:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    381c:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    381e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3820:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3822:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3824:	2180      	movs	r1, #128	; 0x80
    3826:	6a13      	ldr	r3, [r2, #32]
    3828:	0609      	lsls	r1, r1, #24
    382a:	021b      	lsls	r3, r3, #8
    382c:	0a1b      	lsrs	r3, r3, #8
    382e:	430b      	orrs	r3, r1
#elif (SAML21 || SAMC21)
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_SERCOM0 | MCLK_APBCMASK_SERCOM1 | MCLK_APBCMASK_SERCOM2 | MCLK_APBCMASK_SERCOM3 | MCLK_APBCMASK_SERCOM4 ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    3830:	2106      	movs	r1, #6
    3832:	6213      	str	r3, [r2, #32]
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;
    3834:	4b11      	ldr	r3, [pc, #68]	; (387c <init+0x78>)
    3836:	69da      	ldr	r2, [r3, #28]
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    3838:	6a18      	ldr	r0, [r3, #32]
    383a:	4301      	orrs	r1, r0
    383c:	6219      	str	r1, [r3, #32]
  regAPBCMASK |= MCLK_APBCMASK_TCC0 | MCLK_APBCMASK_TCC1 | MCLK_APBCMASK_TCC2 | MCLK_APBCMASK_TC0 | MCLK_APBCMASK_TC1 | MCLK_APBCMASK_TC2 | MCLK_APBCMASK_TC3 | MCLK_APBCMASK_TC4 ;
  #endif

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_DAC ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_ADC;	// On the SAML, ADC is on the low power bridge
    383e:	2108      	movs	r1, #8
    3840:	6a18      	ldr	r0, [r3, #32]
    3842:	4301      	orrs	r1, r0
    3844:	6219      	str	r1, [r3, #32]
  #elif (SAMC21)
  regAPBCMASK |= MCLK_APBCMASK_ADC0 | MCLK_APBCMASK_ADC1 | MCLK_APBCMASK_DAC ;
  #endif

  MCLK->APBCMASK.reg |= regAPBCMASK ;
    3846:	69d9      	ldr	r1, [r3, #28]
    3848:	4311      	orrs	r1, r2
    384a:	4a0d      	ldr	r2, [pc, #52]	; (3880 <init+0x7c>)
    384c:	430a      	orrs	r2, r1
    384e:	61da      	str	r2, [r3, #28]
#endif

  // Setup all pins (digital and analog) in STARTUP mode (enable INEN and set default pull direction to pullup (pullup will not be enabled))
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, PIO_STARTUP ) ;
    3850:	0020      	movs	r0, r4
    3852:	211a      	movs	r1, #26
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    3854:	3401      	adds	r4, #1
    pinMode( ul, PIO_STARTUP ) ;
    3856:	f000 f937 	bl	3ac8 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    385a:	2c24      	cmp	r4, #36	; 0x24
    385c:	d1f8      	bne.n	3850 <init+0x4c>
  PORT->Group[0].OUTSET.reg = (uint32_t)(1<<PIN_PA25G_USB_DP);
  PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].reg = (PORT_PINCFG_PULLEN | PORT_PINCFG_INEN);
#endif

#if !defined(ADC_NO_INIT_IF_UNUSED)
  initADC();         // Initialize Analog Controller
    385e:	f000 f89f 	bl	39a0 <initADC>
  analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    3862:	2005      	movs	r0, #5
    3864:	f000 f83c 	bl	38e0 <analogReference>
#endif

#if !defined(DAC_NO_INIT_IF_UNUSED)
  initDAC();         // Initialize DAC
    3868:	f000 f816 	bl	3898 <initDAC>
#endif
}
    386c:	bd10      	pop	{r4, pc}
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	e000e010 	.word	0xe000e010
    3874:	0000bb7f 	.word	0x0000bb7f
    3878:	e000ed00 	.word	0xe000ed00
    387c:	40000400 	.word	0x40000400
    3880:	000017ff 	.word	0x000017ff

00003884 <mapResolution>:
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    3884:	4291      	cmp	r1, r2
    3886:	d002      	beq.n	388e <mapResolution+0xa>
    return value;
  }
  if (from > to) {
    3888:	d902      	bls.n	3890 <mapResolution+0xc>
    return value >> (from-to);
    388a:	1a8a      	subs	r2, r1, r2
    388c:	40d0      	lsrs	r0, r2
  }
  return value << (to-from);
}
    388e:	4770      	bx	lr
  return value << (to-from);
    3890:	1a52      	subs	r2, r2, r1
    3892:	4090      	lsls	r0, r2
    3894:	e7fb      	b.n	388e <mapResolution+0xa>
	...

00003898 <initDAC>:
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    3898:	490c      	ldr	r1, [pc, #48]	; (38cc <initDAC+0x34>)
    389a:	4b0d      	ldr	r3, [pc, #52]	; (38d0 <initDAC+0x38>)
    389c:	684a      	ldr	r2, [r1, #4]
    389e:	421a      	tst	r2, r3
    38a0:	d1fc      	bne.n	389c <initDAC+0x4>
    GCLK->PCHCTRL[GCM_DAC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    38a2:	2340      	movs	r3, #64	; 0x40
    38a4:	4a0b      	ldr	r2, [pc, #44]	; (38d4 <initDAC+0x3c>)
    38a6:	6053      	str	r3, [r2, #4]
  while ( (GCLK->PCHCTRL[GCM_DAC].reg & GCLK_PCHCTRL_CHEN) == 0 );      // wait for sync
    38a8:	6851      	ldr	r1, [r2, #4]
    38aa:	4219      	tst	r1, r3
    38ac:	d0fc      	beq.n	38a8 <initDAC+0x10>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    38ae:	223f      	movs	r2, #63	; 0x3f
    38b0:	4b09      	ldr	r3, [pc, #36]	; (38d8 <initDAC+0x40>)
    38b2:	6899      	ldr	r1, [r3, #8]
    38b4:	4211      	tst	r1, r2
    38b6:	d1fc      	bne.n	38b2 <initDAC+0x1a>
      DAC->CTRLB.reg = DAC_CTRLB_REFSEL_VDDANA;
    38b8:	2202      	movs	r2, #2
    38ba:	705a      	strb	r2, [r3, #1]
    DAC->DACCTRL[0].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    38bc:	22c2      	movs	r2, #194	; 0xc2
    38be:	0092      	lsls	r2, r2, #2
    38c0:	819a      	strh	r2, [r3, #12]
    DAC->DACCTRL[1].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    38c2:	81da      	strh	r2, [r3, #14]
  DACinitialized = 1;
    38c4:	2201      	movs	r2, #1
    38c6:	4b05      	ldr	r3, [pc, #20]	; (38dc <initDAC+0x44>)
    38c8:	701a      	strb	r2, [r3, #0]
}
    38ca:	4770      	bx	lr
    38cc:	40001800 	.word	0x40001800
    38d0:	000007fd 	.word	0x000007fd
    38d4:	400018fc 	.word	0x400018fc
    38d8:	42003000 	.word	0x42003000
    38dc:	20000939 	.word	0x20000939

000038e0 <analogReference>:
 * External Reference should be between 1V and VDDANA-0.6V=2.7V (1V and VDDANA-0.4V=2.9V for D51)
 *
 * Warning : The maximum IO voltage is Vcc (up to 3.6 volts for the SAMD/SAML, 5V for the SAMC)
 */
void analogReference(eAnalogReference mode)
{
    38e0:	b510      	push	{r4, lr}
  if (!ADCinitialized) {
    38e2:	4b2a      	ldr	r3, [pc, #168]	; (398c <analogReference+0xac>)
{
    38e4:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    38e6:	781b      	ldrb	r3, [r3, #0]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d104      	bne.n	38f6 <analogReference+0x16>
    REFinitialized = 1; // to prevent re-entry
    38ec:	2201      	movs	r2, #1
    38ee:	4b28      	ldr	r3, [pc, #160]	; (3990 <analogReference+0xb0>)
    38f0:	701a      	strb	r2, [r3, #0]
    initADC();
    38f2:	f000 f855 	bl	39a0 <initADC>
  }

#if (!SAMD11C)
  #if defined(REFA_PIN)
    if (mode == AR_EXTERNAL_REFA) {
    38f6:	2c03      	cmp	r4, #3
    38f8:	d106      	bne.n	3908 <analogReference+0x28>
#endif

#if (SAMD21 || SAMD11 || SAML21 || SAMD51)
  #if defined(REFB_PIN)
    if (mode == AR_EXTERNAL_REFB) {
      if ( pinPeripheral(REFB_PIN, PIO_ANALOG_REF) != RET_STATUS_OK ) {
    38fa:	2107      	movs	r1, #7
    38fc:	0020      	movs	r0, r4
    38fe:	f000 f951 	bl	3ba4 <pinPeripheral>
    3902:	2800      	cmp	r0, #0
    3904:	d009      	beq.n	391a <analogReference+0x3a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
#endif
  syncADC();

  REFinitialized = 1;
}
    3906:	bd10      	pop	{r4, pc}
    if (mode == AR_EXTERNAL_REFB) {
    3908:	2c04      	cmp	r4, #4
    390a:	d0f6      	beq.n	38fa <analogReference+0x1a>
  if (mode == 0) {		// Set to 1.0V for the SAML, 1.024V for the SAMC
    390c:	2c00      	cmp	r4, #0
    390e:	d12b      	bne.n	3968 <analogReference+0x88>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3910:	4a20      	ldr	r2, [pc, #128]	; (3994 <analogReference+0xb4>)
    3912:	4921      	ldr	r1, [pc, #132]	; (3998 <analogReference+0xb8>)
    3914:	69d3      	ldr	r3, [r2, #28]
    3916:	400b      	ands	r3, r1
    3918:	61d3      	str	r3, [r2, #28]
    ADC->REFCTRL.bit.REFSEL = mode;
    391a:	210f      	movs	r1, #15
    391c:	4b1f      	ldr	r3, [pc, #124]	; (399c <analogReference+0xbc>)
    391e:	400c      	ands	r4, r1
    3920:	789a      	ldrb	r2, [r3, #2]
    3922:	438a      	bics	r2, r1
    3924:	4314      	orrs	r4, r2
    3926:	709c      	strb	r4, [r3, #2]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3928:	8c1a      	ldrh	r2, [r3, #32]
    392a:	0552      	lsls	r2, r2, #21
    392c:	d1fc      	bne.n	3928 <analogReference+0x48>
  ADC->CTRLA.bit.ENABLE = 0x01;              // Enable ADC
    392e:	7819      	ldrb	r1, [r3, #0]
    3930:	3202      	adds	r2, #2
    3932:	430a      	orrs	r2, r1
    3934:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3936:	8c1a      	ldrh	r2, [r3, #32]
    3938:	0552      	lsls	r2, r2, #21
    393a:	d1fc      	bne.n	3936 <analogReference+0x56>
  ADC->SWTRIG.bit.START = 1;
    393c:	7e19      	ldrb	r1, [r3, #24]
    393e:	3202      	adds	r2, #2
    3940:	430a      	orrs	r2, r1
    3942:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3944:	8c1a      	ldrh	r2, [r3, #32]
    3946:	0552      	lsls	r2, r2, #21
    3948:	d1fc      	bne.n	3944 <analogReference+0x64>
  while (ADC->INTFLAG.bit.RESRDY == 0);      // Waiting for conversion to complete
    394a:	799a      	ldrb	r2, [r3, #6]
    394c:	07d2      	lsls	r2, r2, #31
    394e:	d5fc      	bpl.n	394a <analogReference+0x6a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    3950:	2102      	movs	r1, #2
  valueRead = ADC->RESULT.reg;               // Dummy read (will also clear the Data Ready flag)
    3952:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    3954:	781a      	ldrb	r2, [r3, #0]
    3956:	438a      	bics	r2, r1
    3958:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    395a:	8c1a      	ldrh	r2, [r3, #32]
    395c:	0552      	lsls	r2, r2, #21
    395e:	d1fc      	bne.n	395a <analogReference+0x7a>
  REFinitialized = 1;
    3960:	4b0b      	ldr	r3, [pc, #44]	; (3990 <analogReference+0xb0>)
    3962:	3201      	adds	r2, #1
    3964:	701a      	strb	r2, [r3, #0]
    3966:	e7ce      	b.n	3906 <analogReference+0x26>
  } else if (mode >= AR_INTREF_1V0) {		// Values starting at AR_INTREF_1V0 are used for the Supply Controller reference (AR_INTREF)
    3968:	2c05      	cmp	r4, #5
    396a:	d9d6      	bls.n	391a <analogReference+0x3a>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    396c:	4b09      	ldr	r3, [pc, #36]	; (3994 <analogReference+0xb4>)
    396e:	490a      	ldr	r1, [pc, #40]	; (3998 <analogReference+0xb8>)
    3970:	69da      	ldr	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3972:	3c06      	subs	r4, #6
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3974:	400a      	ands	r2, r1
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3976:	21f0      	movs	r1, #240	; 0xf0
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3978:	61da      	str	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    397a:	69da      	ldr	r2, [r3, #28]
    397c:	0424      	lsls	r4, r4, #16
    397e:	0309      	lsls	r1, r1, #12
    3980:	400c      	ands	r4, r1
    3982:	4314      	orrs	r4, r2
    3984:	61dc      	str	r4, [r3, #28]
    mode = 0;
    3986:	2400      	movs	r4, #0
    3988:	e7c7      	b.n	391a <analogReference+0x3a>
    398a:	46c0      	nop			; (mov r8, r8)
    398c:	20000938 	.word	0x20000938
    3990:	2000093a 	.word	0x2000093a
    3994:	40001400 	.word	0x40001400
    3998:	fff0ffff 	.word	0xfff0ffff
    399c:	43000c00 	.word	0x43000c00

000039a0 <initADC>:
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39a0:	4b1e      	ldr	r3, [pc, #120]	; (3a1c <initADC+0x7c>)
    39a2:	2107      	movs	r1, #7
    39a4:	681b      	ldr	r3, [r3, #0]
{
    39a6:	b510      	push	{r4, lr}
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39a8:	001a      	movs	r2, r3
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    39aa:	08db      	lsrs	r3, r3, #3
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39ac:	400a      	ands	r2, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    39ae:	0212      	lsls	r2, r2, #8
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    39b0:	400b      	ands	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    39b2:	4313      	orrs	r3, r2
    39b4:	4a1a      	ldr	r2, [pc, #104]	; (3a20 <initADC+0x80>)
    39b6:	8593      	strh	r3, [r2, #44]	; 0x2c
    39b8:	0013      	movs	r3, r2
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39ba:	8c1a      	ldrh	r2, [r3, #32]
    39bc:	0552      	lsls	r2, r2, #21
    39be:	d1fc      	bne.n	39ba <initADC+0x1a>
  SUPC->VREF.reg |= SUPC_VREF_VREFOE;           // Enable Supply Controller Reference output for use with ADC and DAC (AR_INTREF)
    39c0:	4918      	ldr	r1, [pc, #96]	; (3a24 <initADC+0x84>)
    39c2:	3204      	adds	r2, #4
    39c4:	69c8      	ldr	r0, [r1, #28]
    39c6:	4302      	orrs	r2, r0
    39c8:	61ca      	str	r2, [r1, #28]
    GCLK->PCHCTRL[GCM_ADC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    39ca:	2240      	movs	r2, #64	; 0x40
    39cc:	4916      	ldr	r1, [pc, #88]	; (3a28 <initADC+0x88>)
    39ce:	600a      	str	r2, [r1, #0]
    while ( (GCLK->PCHCTRL[GCM_ADC].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    39d0:	6808      	ldr	r0, [r1, #0]
    39d2:	4210      	tst	r0, r2
    39d4:	d0fc      	beq.n	39d0 <initADC+0x30>
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256;                    // Divide Clock by 256.
    39d6:	2207      	movs	r2, #7
    39d8:	705a      	strb	r2, [r3, #1]
    ADC->CTRLC.reg = ADC_CTRLC_RESSEL_10BIT;                        // 10 bits resolution as default
    39da:	3219      	adds	r2, #25
    39dc:	815a      	strh	r2, [r3, #10]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39de:	8c1a      	ldrh	r2, [r3, #32]
    39e0:	0552      	lsls	r2, r2, #21
    39e2:	d1fc      	bne.n	39de <initADC+0x3e>
  ADC->SAMPCTRL.reg = 0x3f;     // Set max Sampling Time Length
    39e4:	323f      	adds	r2, #63	; 0x3f
    39e6:	735a      	strb	r2, [r3, #13]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39e8:	8c1a      	ldrh	r2, [r3, #32]
    39ea:	0552      	lsls	r2, r2, #21
    39ec:	d1fc      	bne.n	39e8 <initADC+0x48>
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    39ee:	22c0      	movs	r2, #192	; 0xc0
    39f0:	0152      	lsls	r2, r2, #5
    39f2:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39f4:	8c1a      	ldrh	r2, [r3, #32]
    39f6:	0552      	lsls	r2, r2, #21
    39f8:	0d52      	lsrs	r2, r2, #21
    39fa:	d1fb      	bne.n	39f4 <initADC+0x54>
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    39fc:	731a      	strb	r2, [r3, #12]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39fe:	8c1a      	ldrh	r2, [r3, #32]
    3a00:	0552      	lsls	r2, r2, #21
    3a02:	d1fc      	bne.n	39fe <initADC+0x5e>
  ADCinitialized = 1;
    3a04:	4b09      	ldr	r3, [pc, #36]	; (3a2c <initADC+0x8c>)
    3a06:	3201      	adds	r2, #1
    3a08:	701a      	strb	r2, [r3, #0]
  if (!REFinitialized) {
    3a0a:	4b09      	ldr	r3, [pc, #36]	; (3a30 <initADC+0x90>)
    3a0c:	781b      	ldrb	r3, [r3, #0]
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d102      	bne.n	3a18 <initADC+0x78>
    analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    3a12:	2005      	movs	r0, #5
    3a14:	f7ff ff64 	bl	38e0 <analogReference>
}
    3a18:	bd10      	pop	{r4, pc}
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	00806020 	.word	0x00806020
    3a20:	43000c00 	.word	0x43000c00
    3a24:	40001400 	.word	0x40001400
    3a28:	400018f8 	.word	0x400018f8
    3a2c:	20000938 	.word	0x20000938
    3a30:	2000093a 	.word	0x2000093a

00003a34 <analogRead>:

uint32_t analogRead( uint32_t pin )
{
    3a34:	b510      	push	{r4, lr}
  uint32_t valueRead = 0;

  if (!ADCinitialized) {
    3a36:	4b1f      	ldr	r3, [pc, #124]	; (3ab4 <analogRead+0x80>)
{
    3a38:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    3a3a:	781b      	ldrb	r3, [r3, #0]
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d101      	bne.n	3a44 <analogRead+0x10>
    initADC();
    3a40:	f7ff ffae 	bl	39a0 <initADC>
    ADC = ADC0;
  }
#endif

  // pinPeripheral now handles disabling the DAC (if active)
  if ( pinPeripheral(pin, PIO_ANALOG_ADC) == RET_STATUS_OK )
    3a44:	2105      	movs	r1, #5
    3a46:	0020      	movs	r0, r4
    3a48:	f000 f8ac 	bl	3ba4 <pinPeripheral>
    3a4c:	0003      	movs	r3, r0
  uint32_t valueRead = 0;
    3a4e:	2000      	movs	r0, #0
  if ( pinPeripheral(pin, PIO_ANALOG_ADC) == RET_STATUS_OK )
    3a50:	4283      	cmp	r3, r0
    3a52:	d128      	bne.n	3aa6 <analogRead+0x72>
  {
    ADC->INPUTCTRL.bit.MUXPOS = GetADC(pin); // Selection for the positive ADC input
    3a54:	300c      	adds	r0, #12
    3a56:	4344      	muls	r4, r0
    3a58:	4817      	ldr	r0, [pc, #92]	; (3ab8 <analogRead+0x84>)
    3a5a:	4b18      	ldr	r3, [pc, #96]	; (3abc <analogRead+0x88>)
    3a5c:	1900      	adds	r0, r0, r4
    3a5e:	7a41      	ldrb	r1, [r0, #9]
    3a60:	201f      	movs	r0, #31
    3a62:	891a      	ldrh	r2, [r3, #8]
    3a64:	4001      	ands	r1, r0
    3a66:	4382      	bics	r2, r0
    3a68:	430a      	orrs	r2, r1
    3a6a:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a6c:	8c1a      	ldrh	r2, [r3, #32]
    3a6e:	0552      	lsls	r2, r2, #21
    3a70:	d1fc      	bne.n	3a6c <analogRead+0x38>

    syncADC();

    ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    3a72:	7819      	ldrb	r1, [r3, #0]
    3a74:	3202      	adds	r2, #2
    3a76:	430a      	orrs	r2, r1
    3a78:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a7a:	8c1a      	ldrh	r2, [r3, #32]
    3a7c:	0552      	lsls	r2, r2, #21
    3a7e:	d1fc      	bne.n	3a7a <analogRead+0x46>
    syncADC();

    // Start conversion
    ADC->SWTRIG.bit.START = 1;
    3a80:	7e19      	ldrb	r1, [r3, #24]
    3a82:	3202      	adds	r2, #2
    3a84:	430a      	orrs	r2, r1
    3a86:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a88:	8c1a      	ldrh	r2, [r3, #32]
    3a8a:	0552      	lsls	r2, r2, #21
    3a8c:	d1fc      	bne.n	3a88 <analogRead+0x54>
    syncADC();

    // Store the value
    while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    3a8e:	799a      	ldrb	r2, [r3, #6]
    3a90:	07d2      	lsls	r2, r2, #31
    3a92:	d5fc      	bpl.n	3a8e <analogRead+0x5a>
    valueRead = ADC->RESULT.reg;

    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a94:	2102      	movs	r1, #2
    valueRead = ADC->RESULT.reg;
    3a96:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a98:	781a      	ldrb	r2, [r3, #0]
    valueRead = ADC->RESULT.reg;
    3a9a:	b280      	uxth	r0, r0
    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a9c:	438a      	bics	r2, r1
    3a9e:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3aa0:	8c1a      	ldrh	r2, [r3, #32]
    3aa2:	0552      	lsls	r2, r2, #21
    3aa4:	d1fc      	bne.n	3aa0 <analogRead+0x6c>
    syncADC();
  }

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    3aa6:	4b06      	ldr	r3, [pc, #24]	; (3ac0 <analogRead+0x8c>)
    3aa8:	681a      	ldr	r2, [r3, #0]
    3aaa:	4b06      	ldr	r3, [pc, #24]	; (3ac4 <analogRead+0x90>)
    3aac:	6819      	ldr	r1, [r3, #0]
    3aae:	f7ff fee9 	bl	3884 <mapResolution>
}
    3ab2:	bd10      	pop	{r4, pc}
    3ab4:	20000938 	.word	0x20000938
    3ab8:	00010f58 	.word	0x00010f58
    3abc:	43000c00 	.word	0x43000c00
    3ac0:	20000040 	.word	0x20000040
    3ac4:	2000003c 	.word	0x2000003c

00003ac8 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    3ac8:	b510      	push	{r4, lr}
  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  pinPeripheral(ulPin, ulMode);
    3aca:	f000 f86b 	bl	3ba4 <pinPeripheral>
}
    3ace:	bd10      	pop	{r4, pc}

00003ad0 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    3ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t pinPort = GetPort(ulPin);
    3ad2:	220c      	movs	r2, #12
    3ad4:	4342      	muls	r2, r0
    3ad6:	4d25      	ldr	r5, [pc, #148]	; (3b6c <digitalWrite+0x9c>)
{
    3ad8:	9001      	str	r0, [sp, #4]
  uint8_t pinPort = GetPort(ulPin);
    3ada:	5d53      	ldrb	r3, [r2, r5]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3adc:	2b04      	cmp	r3, #4
    3ade:	d02f      	beq.n	3b40 <digitalWrite+0x70>
    3ae0:	2700      	movs	r7, #0
  uint8_t pinNum = GetPin(ulPin);
    3ae2:	18aa      	adds	r2, r5, r2

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
#endif

  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    3ae4:	7852      	ldrb	r2, [r2, #1]
    3ae6:	01db      	lsls	r3, r3, #7
    3ae8:	4e21      	ldr	r6, [pc, #132]	; (3b70 <digitalWrite+0xa0>)
    3aea:	18d4      	adds	r4, r2, r3
    3aec:	19a4      	adds	r4, r4, r6
    3aee:	7826      	ldrb	r6, [r4, #0]
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    3af0:	4c20      	ldr	r4, [pc, #128]	; (3b74 <digitalWrite+0xa4>)
  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    3af2:	b2f6      	uxtb	r6, r6
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    3af4:	591c      	ldr	r4, [r3, r4]
    3af6:	42bc      	cmp	r4, r7
    3af8:	d004      	beq.n	3b04 <digitalWrite+0x34>
    3afa:	3701      	adds	r7, #1
    3afc:	4097      	lsls	r7, r2
    3afe:	1e7c      	subs	r4, r7, #1
    3b00:	41a7      	sbcs	r7, r4
    3b02:	b2ff      	uxtb	r7, r7
  uint8_t pinOut = (PORT->Group[pinPort].OUT.reg && (1ul << pinNum));
    3b04:	4c1b      	ldr	r4, [pc, #108]	; (3b74 <digitalWrite+0xa4>)
    3b06:	191c      	adds	r4, r3, r4
    3b08:	6924      	ldr	r4, [r4, #16]
    3b0a:	46a4      	mov	ip, r4
    3b0c:	2400      	movs	r4, #0
    3b0e:	4660      	mov	r0, ip
    3b10:	42a0      	cmp	r0, r4
    3b12:	d004      	beq.n	3b1e <digitalWrite+0x4e>
    3b14:	3401      	adds	r4, #1
    3b16:	4094      	lsls	r4, r2
    3b18:	1e60      	subs	r0, r4, #1
    3b1a:	4184      	sbcs	r4, r0
    3b1c:	b2e4      	uxtb	r4, r4

  // Enable pull resistor if pin attributes allow and only if pin is not configured as output
  // Note that most pins should use PIN_ATTR_DIGITAL, which includes both PIN_ATTR_INPUT_PULLUP and PIN_ATTR_INPUT_PULLDOWN.
  if ( pinDir == 0 ) { // pin DIR is input
    3b1e:	2f00      	cmp	r7, #0
    3b20:	d117      	bne.n	3b52 <digitalWrite+0x82>
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    3b22:	9801      	ldr	r0, [sp, #4]
    3b24:	370c      	adds	r7, #12
    3b26:	4378      	muls	r0, r7
    3b28:	182d      	adds	r5, r5, r0
    3b2a:	6868      	ldr	r0, [r5, #4]
     if ( ulVal == HIGH )
    3b2c:	2901      	cmp	r1, #1
    3b2e:	d10d      	bne.n	3b4c <digitalWrite+0x7c>
     {
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    3b30:	2c01      	cmp	r4, #1
    3b32:	d106      	bne.n	3b42 <digitalWrite+0x72>
    3b34:	0741      	lsls	r1, r0, #29
    3b36:	d406      	bmi.n	3b46 <digitalWrite+0x76>
     else
     {
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
     }

     PORT->Group[pinPort].PINCFG[pinNum].reg = pinConfig ;
    3b38:	18d3      	adds	r3, r2, r3
    3b3a:	4a0d      	ldr	r2, [pc, #52]	; (3b70 <digitalWrite+0xa0>)
    3b3c:	189b      	adds	r3, r3, r2
    3b3e:	701e      	strb	r6, [r3, #0]
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    }
  }

  return ;
}
    3b40:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    3b42:	0701      	lsls	r1, r0, #28
    3b44:	d5f8      	bpl.n	3b38 <digitalWrite+0x68>
         pinConfig |= (uint8_t)(PORT_PINCFG_PULLEN) ;
    3b46:	2104      	movs	r1, #4
    3b48:	430e      	orrs	r6, r1
    3b4a:	e7f5      	b.n	3b38 <digitalWrite+0x68>
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
    3b4c:	2104      	movs	r1, #4
    3b4e:	438e      	bics	r6, r1
    3b50:	e7f2      	b.n	3b38 <digitalWrite+0x68>
    if ( ulVal == HIGH ) {
    3b52:	2901      	cmp	r1, #1
    3b54:	d104      	bne.n	3b60 <digitalWrite+0x90>
      PORT->Group[pinPort].OUTSET.reg = (1ul << pinNum) ;
    3b56:	4091      	lsls	r1, r2
    3b58:	4a06      	ldr	r2, [pc, #24]	; (3b74 <digitalWrite+0xa4>)
    3b5a:	189b      	adds	r3, r3, r2
    3b5c:	6199      	str	r1, [r3, #24]
    3b5e:	e7ef      	b.n	3b40 <digitalWrite+0x70>
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    3b60:	2101      	movs	r1, #1
    3b62:	4091      	lsls	r1, r2
    3b64:	4a03      	ldr	r2, [pc, #12]	; (3b74 <digitalWrite+0xa4>)
    3b66:	189b      	adds	r3, r3, r2
    3b68:	6159      	str	r1, [r3, #20]
    3b6a:	e7e9      	b.n	3b40 <digitalWrite+0x70>
    3b6c:	00010f58 	.word	0x00010f58
    3b70:	40002840 	.word	0x40002840
    3b74:	40002800 	.word	0x40002800

00003b78 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  uint8_t pinPort = GetPort(ulPin);
    3b78:	230c      	movs	r3, #12
    3b7a:	4358      	muls	r0, r3
    3b7c:	4907      	ldr	r1, [pc, #28]	; (3b9c <digitalRead+0x24>)
    3b7e:	2300      	movs	r3, #0
    3b80:	5c42      	ldrb	r2, [r0, r1]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3b82:	2a04      	cmp	r2, #4
    3b84:	d006      	beq.n	3b94 <digitalRead+0x1c>
  {
    return LOW ;
  }

  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    3b86:	4b06      	ldr	r3, [pc, #24]	; (3ba0 <digitalRead+0x28>)
    3b88:	01d2      	lsls	r2, r2, #7
    3b8a:	18d2      	adds	r2, r2, r3
  uint8_t pinNum = GetPin(ulPin);
    3b8c:	1809      	adds	r1, r1, r0
  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    3b8e:	6a13      	ldr	r3, [r2, #32]
    3b90:	784a      	ldrb	r2, [r1, #1]
    3b92:	40d3      	lsrs	r3, r2
    3b94:	2001      	movs	r0, #1
  {
    return HIGH ;
  }

  return LOW ;
}
    3b96:	4018      	ands	r0, r3
    3b98:	4770      	bx	lr
    3b9a:	46c0      	nop			; (mov r8, r8)
    3b9c:	00010f58 	.word	0x00010f58
    3ba0:	40002800 	.word	0x40002800

00003ba4 <pinPeripheral>:
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
#endif
}

int pinPeripheral( uint32_t ulPin, uint32_t ulPeripheral )
{
    3ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ba6:	0005      	movs	r5, r0
#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
  // Prevent out of bounds access
  if (ulPin >= NUM_PIN_DESCRIPTION_ENTRIES)
    3ba8:	2823      	cmp	r0, #35	; 0x23
    3baa:	d900      	bls.n	3bae <pinPeripheral+0xa>
    3bac:	e06b      	b.n	3c86 <pinPeripheral+0xe2>
  {
    return -1 ;
  }
#endif

  uint8_t pinPort = GetPort(ulPin);
    3bae:	230c      	movs	r3, #12
    3bb0:	4343      	muls	r3, r0
    3bb2:	4f7f      	ldr	r7, [pc, #508]	; (3db0 <pinPeripheral+0x20c>)
    3bb4:	5dda      	ldrb	r2, [r3, r7]
  uint8_t pinNum = GetPin(ulPin);
    3bb6:	18fb      	adds	r3, r7, r3
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    3bb8:	78d8      	ldrb	r0, [r3, #3]
  uint8_t pinNum = GetPin(ulPin);
    3bba:	785c      	ldrb	r4, [r3, #1]
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    3bbc:	9001      	str	r0, [sp, #4]

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint8_t pinType = g_APinDescription[ulPin].ulPinType;
    3bbe:	7898      	ldrb	r0, [r3, #2]
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    3bc0:	685b      	ldr	r3, [r3, #4]
#endif

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3bc2:	2a04      	cmp	r2, #4
    3bc4:	d05f      	beq.n	3c86 <pinPeripheral+0xe2>
  }

#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  // If pinType is not PIO_MULTI or PIO_STARTUP in the pinDescription table, then it must match ulPeripheral
  if ( pinType != PIO_MULTI && pinType != PIO_STARTUP && pinType != ulPeripheral )
    3bc6:	2619      	movs	r6, #25
    3bc8:	4276      	negs	r6, r6
    3bca:	46b4      	mov	ip, r6
    3bcc:	4484      	add	ip, r0
    3bce:	4666      	mov	r6, ip
    3bd0:	2e01      	cmp	r6, #1
    3bd2:	d901      	bls.n	3bd8 <pinPeripheral+0x34>
    3bd4:	4288      	cmp	r0, r1
    3bd6:	d156      	bne.n	3c86 <pinPeripheral+0xe2>
  {
    return -1 ;
  }

  // Make sure ulPeripheral is listed in pinAttribute
  if ( !(pinAttribute & (1UL << ulPeripheral)) && pinType != PIO_STARTUP )
    3bd8:	40cb      	lsrs	r3, r1
    3bda:	07db      	lsls	r3, r3, #31
    3bdc:	d401      	bmi.n	3be2 <pinPeripheral+0x3e>
    3bde:	281a      	cmp	r0, #26
    3be0:	d151      	bne.n	3c86 <pinPeripheral+0xe2>
#endif
#endif

  // Determine hardware peripheral to use
  EPioPeripheral peripheral = PER_PORT;
  switch ( ulPeripheral )
    3be2:	1f08      	subs	r0, r1, #4
    3be4:	2817      	cmp	r0, #23
    3be6:	d863      	bhi.n	3cb0 <pinPeripheral+0x10c>
    3be8:	f005 fdf2 	bl	97d0 <__gnu_thumb1_case_uqi>
    3bec:	64644736 	.word	0x64644736
    3bf0:	62626262 	.word	0x62626262
    3bf4:	0c5d5050 	.word	0x0c5d5050
    3bf8:	6262620c 	.word	0x6262620c
    3bfc:	90626262 	.word	0x90626262
    3c00:	4d624d92 	.word	0x4d624d92
    case PIO_CAN:
#endif
#if (SAMD51)
    case PIO_QSPI:
#endif
      peripheral = PER_COM;
    3c04:	2306      	movs	r3, #6
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
      //DAC->CTRLB.bit.EOEN = 0x00; // The DAC output is turned off.
      syncDAC();
    }
#elif (SAML21 || SAMD51)
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3c06:	2a00      	cmp	r2, #0
    3c08:	d100      	bne.n	3c0c <pinPeripheral+0x68>
    3c0a:	e08f      	b.n	3d2c <pinPeripheral+0x188>
      }
    }
#endif
  }

  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3c0c:	4d69      	ldr	r5, [pc, #420]	; (3db4 <pinPeripheral+0x210>)
    3c0e:	01d0      	lsls	r0, r2, #7
    3c10:	1820      	adds	r0, r4, r0
    3c12:	1940      	adds	r0, r0, r5
    3c14:	7805      	ldrb	r5, [r0, #0]
    3c16:	2004      	movs	r0, #4
    3c18:	4028      	ands	r0, r5

  // INEN should be enabled for both input and output (but not analog)
  if ( ulPeripheral != PIO_ANALOG_ADC && ulPeripheral != PIO_ANALOG_DAC && ulPeripheral != PIO_ANALOG_REF )
    3c1a:	1f4d      	subs	r5, r1, #5
    3c1c:	2d02      	cmp	r5, #2
    3c1e:	d901      	bls.n	3c24 <pinPeripheral+0x80>
  {
    pinCfg |= PORT_PINCFG_INEN;
    3c20:	2502      	movs	r5, #2
    3c22:	4328      	orrs	r0, r5
  }

  // Set pin drive strength (DRVSTR), which is used with PIO_OUTPUT and PIO_SERCOM (UART, SPI, and I2C)
  if ( (peripheralAttribute & PER_ATTR_DRIVE_MASK) == PER_ATTR_DRIVE_STRONG )
    3c24:	9d01      	ldr	r5, [sp, #4]
    3c26:	072d      	lsls	r5, r5, #28
    3c28:	d501      	bpl.n	3c2e <pinPeripheral+0x8a>
  {
    pinCfg |= PORT_PINCFG_DRVSTR;
    3c2a:	2540      	movs	r5, #64	; 0x40
    3c2c:	4328      	orrs	r0, r5
  __ASM volatile ("cpsid i" : : : "memory");
    3c2e:	b672      	cpsid	i
    3c30:	01d2      	lsls	r2, r2, #7
  }

  noInterrupts(); // Avoid possible invalid interim pin state

  if ( ulPeripheral == PIO_INPUT || ulPeripheral == PIO_STARTUP )
    3c32:	2900      	cmp	r1, #0
    3c34:	d001      	beq.n	3c3a <pinPeripheral+0x96>
    3c36:	291a      	cmp	r1, #26
    3c38:	d13e      	bne.n	3cb8 <pinPeripheral+0x114>
  {
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    3c3a:	2301      	movs	r3, #1
    3c3c:	40a3      	lsls	r3, r4
    3c3e:	495e      	ldr	r1, [pc, #376]	; (3db8 <pinPeripheral+0x214>)
    3c40:	1851      	adds	r1, r2, r1
    3c42:	604b      	str	r3, [r1, #4]
    PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;	// set default pull direction to pullup (will not be enabled)
    3c44:	618b      	str	r3, [r1, #24]
    pinCfg |= PORT_PINCFG_PULLEN;
  }
  else if ( ulPeripheral == PIO_OUTPUT )
  {
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    pinCfg &= ~PORT_PINCFG_PULLEN;      // Disable pull resistor
    3c46:	2304      	movs	r3, #4
    3c48:	4398      	bics	r0, r3

    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
  }

  // Set pin drive strength, enable/disable pull resistor, enable/disable INEN, and enable/disable the peripheral mux
  PORT->Group[pinPort].PINCFG[pinNum].reg = (uint8_t)pinCfg ;
    3c4a:	4b5a      	ldr	r3, [pc, #360]	; (3db4 <pinPeripheral+0x210>)
    3c4c:	18a2      	adds	r2, r4, r2
    3c4e:	18d2      	adds	r2, r2, r3
    3c50:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    3c52:	b662      	cpsie	i

  interrupts();
  return 0l ;
    3c54:	2000      	movs	r0, #0
}
    3c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ( GetExtInt(ulPin) == NOT_AN_INTERRUPT )
    3c58:	230c      	movs	r3, #12
    3c5a:	435d      	muls	r5, r3
    3c5c:	197f      	adds	r7, r7, r5
    3c5e:	7abb      	ldrb	r3, [r7, #10]
    3c60:	2b12      	cmp	r3, #18
    3c62:	d010      	beq.n	3c86 <pinPeripheral+0xe2>
      peripheral = PER_EXTINT;
    3c64:	2300      	movs	r3, #0
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3c66:	2a00      	cmp	r2, #0
    3c68:	d060      	beq.n	3d2c <pinPeripheral+0x188>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3c6a:	4d52      	ldr	r5, [pc, #328]	; (3db4 <pinPeripheral+0x210>)
    3c6c:	01d0      	lsls	r0, r2, #7
    3c6e:	1820      	adds	r0, r4, r0
    3c70:	1940      	adds	r0, r0, r5
    3c72:	7805      	ldrb	r5, [r0, #0]
    3c74:	2004      	movs	r0, #4
    3c76:	4028      	ands	r0, r5
    3c78:	e7d2      	b.n	3c20 <pinPeripheral+0x7c>
      if ( GetADC(ulPin) == No_ADC_Channel )
    3c7a:	230c      	movs	r3, #12
    3c7c:	435d      	muls	r5, r3
    3c7e:	197f      	adds	r7, r7, r5
    3c80:	7a7b      	ldrb	r3, [r7, #9]
    3c82:	2b16      	cmp	r3, #22
    3c84:	d14f      	bne.n	3d26 <pinPeripheral+0x182>
    return -1 ;
    3c86:	2001      	movs	r0, #1
    3c88:	4240      	negs	r0, r0
    3c8a:	e7e4      	b.n	3c56 <pinPeripheral+0xb2>
      if ( g_APinDescription[ulPin].ulTCChannel == NOT_ON_TIMER )
    3c8c:	230c      	movs	r3, #12
    3c8e:	435d      	muls	r5, r3
    3c90:	197f      	adds	r7, r7, r5
    3c92:	7a3b      	ldrb	r3, [r7, #8]
    3c94:	2b80      	cmp	r3, #128	; 0x80
    3c96:	d0f6      	beq.n	3c86 <pinPeripheral+0xe2>
      if ( (peripheralAttribute & PER_ATTR_TIMER_MASK) == PER_ATTR_TIMER_STD )
    3c98:	2306      	movs	r3, #6
    3c9a:	9801      	ldr	r0, [sp, #4]
    3c9c:	4003      	ands	r3, r0
        peripheral = PER_TIMER_ALT;
    3c9e:	1e58      	subs	r0, r3, #1
    3ca0:	4183      	sbcs	r3, r0
    3ca2:	3304      	adds	r3, #4
    3ca4:	e7af      	b.n	3c06 <pinPeripheral+0x62>
        peripheral = PER_SERCOM_ALT;
    3ca6:	2301      	movs	r3, #1
    3ca8:	9801      	ldr	r0, [sp, #4]
    3caa:	4003      	ands	r3, r0
    3cac:	3302      	adds	r3, #2
    3cae:	e7da      	b.n	3c66 <pinPeripheral+0xc2>
  EPioPeripheral peripheral = PER_PORT;
    3cb0:	2309      	movs	r3, #9
    3cb2:	e7a8      	b.n	3c06 <pinPeripheral+0x62>
      peripheral = PER_ANALOG;
    3cb4:	2301      	movs	r3, #1
    3cb6:	e7a6      	b.n	3c06 <pinPeripheral+0x62>
  else if ( ulPeripheral == PIO_INPUT_PULLUP || ulPeripheral == PIO_INPUT_PULLDOWN )
    3cb8:	1e8d      	subs	r5, r1, #2
    3cba:	2d01      	cmp	r5, #1
    3cbc:	d80c      	bhi.n	3cd8 <pinPeripheral+0x134>
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    3cbe:	2301      	movs	r3, #1
    3cc0:	40a3      	lsls	r3, r4
    3cc2:	4d3d      	ldr	r5, [pc, #244]	; (3db8 <pinPeripheral+0x214>)
    3cc4:	1955      	adds	r5, r2, r5
    3cc6:	606b      	str	r3, [r5, #4]
    if ( ulPeripheral == PIO_INPUT_PULLDOWN ) {
    3cc8:	2903      	cmp	r1, #3
    3cca:	d103      	bne.n	3cd4 <pinPeripheral+0x130>
      PORT->Group[pinPort].OUTCLR.reg = (uint32_t)(1<<pinNum) ;
    3ccc:	616b      	str	r3, [r5, #20]
    pinCfg |= PORT_PINCFG_PULLEN;
    3cce:	2304      	movs	r3, #4
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    3cd0:	4318      	orrs	r0, r3
    3cd2:	e7ba      	b.n	3c4a <pinPeripheral+0xa6>
      PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;
    3cd4:	61ab      	str	r3, [r5, #24]
    3cd6:	e7fa      	b.n	3cce <pinPeripheral+0x12a>
  else if ( ulPeripheral == PIO_OUTPUT )
    3cd8:	2901      	cmp	r1, #1
    3cda:	d104      	bne.n	3ce6 <pinPeripheral+0x142>
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    3cdc:	40a1      	lsls	r1, r4
    3cde:	4b36      	ldr	r3, [pc, #216]	; (3db8 <pinPeripheral+0x214>)
    3ce0:	18d3      	adds	r3, r2, r3
    3ce2:	6099      	str	r1, [r3, #8]
    3ce4:	e7af      	b.n	3c46 <pinPeripheral+0xa2>
    3ce6:	0861      	lsrs	r1, r4, #1
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3ce8:	4d34      	ldr	r5, [pc, #208]	; (3dbc <pinPeripheral+0x218>)
    3cea:	1851      	adds	r1, r2, r1
    3cec:	1949      	adds	r1, r1, r5
    if ( pinNum & 1 ) // is pin odd?
    3cee:	07e5      	lsls	r5, r4, #31
    3cf0:	d508      	bpl.n	3d04 <pinPeripheral+0x160>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    3cf2:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3cf4:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    3cf6:	011b      	lsls	r3, r3, #4
    3cf8:	4035      	ands	r5, r6
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3cfa:	432b      	orrs	r3, r5
    3cfc:	b2db      	uxtb	r3, r3
    3cfe:	700b      	strb	r3, [r1, #0]
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    3d00:	2301      	movs	r3, #1
    3d02:	e7e5      	b.n	3cd0 <pinPeripheral+0x12c>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3d04:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    3d06:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3d08:	43b5      	bics	r5, r6
    3d0a:	e7f6      	b.n	3cfa <pinPeripheral+0x156>
      peripheral = PER_AC_CLK;
    3d0c:	2307      	movs	r3, #7
    3d0e:	e7aa      	b.n	3c66 <pinPeripheral+0xc2>
      peripheral = PER_CCL;
    3d10:	2308      	movs	r3, #8
    3d12:	e7a8      	b.n	3c66 <pinPeripheral+0xc2>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3d14:	4827      	ldr	r0, [pc, #156]	; (3db4 <pinPeripheral+0x210>)
    3d16:	01d3      	lsls	r3, r2, #7
    3d18:	18e3      	adds	r3, r4, r3
    3d1a:	181b      	adds	r3, r3, r0
    3d1c:	7818      	ldrb	r0, [r3, #0]
    3d1e:	2304      	movs	r3, #4
    3d20:	4018      	ands	r0, r3
      peripheral = PER_ANALOG;
    3d22:	3b03      	subs	r3, #3
    3d24:	e77e      	b.n	3c24 <pinPeripheral+0x80>
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3d26:	2a00      	cmp	r2, #0
    3d28:	d1f4      	bne.n	3d14 <pinPeripheral+0x170>
      peripheral = PER_ANALOG;
    3d2a:	2301      	movs	r3, #1
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3d2c:	2c02      	cmp	r4, #2
    3d2e:	d002      	beq.n	3d36 <pinPeripheral+0x192>
    3d30:	2c05      	cmp	r4, #5
    3d32:	d000      	beq.n	3d36 <pinPeripheral+0x192>
    3d34:	e76a      	b.n	3c0c <pinPeripheral+0x68>
    3d36:	2906      	cmp	r1, #6
    3d38:	d100      	bne.n	3d3c <pinPeripheral+0x198>
    3d3a:	e767      	b.n	3c0c <pinPeripheral+0x68>
    if ( (pinPort == 0) && (pinNum == 5) ) {
    3d3c:	1f65      	subs	r5, r4, #5
    3d3e:	4268      	negs	r0, r5
    3d40:	4145      	adcs	r5, r0
    if (dacEnabled[DACNumber]) {
    3d42:	481f      	ldr	r0, [pc, #124]	; (3dc0 <pinPeripheral+0x21c>)
    3d44:	5d47      	ldrb	r7, [r0, r5]
    3d46:	2f00      	cmp	r7, #0
    3d48:	d100      	bne.n	3d4c <pinPeripheral+0x1a8>
    3d4a:	e75f      	b.n	3c0c <pinPeripheral+0x68>
      dacEnabled[DACNumber] = false;
    3d4c:	2700      	movs	r7, #0
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    3d4e:	2602      	movs	r6, #2
      dacEnabled[DACNumber] = false;
    3d50:	5547      	strb	r7, [r0, r5]
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    3d52:	481c      	ldr	r0, [pc, #112]	; (3dc4 <pinPeripheral+0x220>)
    3d54:	7807      	ldrb	r7, [r0, #0]
    3d56:	43b7      	bics	r7, r6
    3d58:	7007      	strb	r7, [r0, #0]
  // VARIANT_MCK / 1000000 == cycles needed to delay 1uS
  //                     3 == cycles used in a loop
  // Divide by 3 before multiplication with usec, so that the maximum usable usec value
  // with the D51 @ 120MHz is at least what it was when multipling by usec first at 48MHz.
  uint32_t n = usec * ((VARIANT_MCK / 1000000) / 3);
  __asm__ __volatile__(
    3d5a:	27a0      	movs	r7, #160	; 0xa0
    3d5c:	00bf      	lsls	r7, r7, #2
    3d5e:	3f01      	subs	r7, #1
    3d60:	d1fd      	bne.n	3d5e <pinPeripheral+0x1ba>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3d62:	273f      	movs	r7, #63	; 0x3f
    3d64:	6886      	ldr	r6, [r0, #8]
    3d66:	423e      	tst	r6, r7
    3d68:	d1fc      	bne.n	3d64 <pinPeripheral+0x1c0>
      DAC->DACCTRL[DACNumber].bit.ENABLE = 0x00; // The DACx output is turned off.
    3d6a:	4e16      	ldr	r6, [pc, #88]	; (3dc4 <pinPeripheral+0x220>)
    3d6c:	1d2f      	adds	r7, r5, #4
    3d6e:	46b4      	mov	ip, r6
    3d70:	007f      	lsls	r7, r7, #1
    3d72:	44bc      	add	ip, r7
    3d74:	4666      	mov	r6, ip
    3d76:	88b7      	ldrh	r7, [r6, #4]
    3d78:	2602      	movs	r6, #2
    3d7a:	43b7      	bics	r7, r6
    3d7c:	4666      	mov	r6, ip
    3d7e:	80b7      	strh	r7, [r6, #4]
      if (dacEnabled[0] || dacEnabled[1]) {
    3d80:	4f0f      	ldr	r7, [pc, #60]	; (3dc0 <pinPeripheral+0x21c>)
    3d82:	783e      	ldrb	r6, [r7, #0]
    3d84:	2e00      	cmp	r6, #0
    3d86:	d103      	bne.n	3d90 <pinPeripheral+0x1ec>
    3d88:	787f      	ldrb	r7, [r7, #1]
    3d8a:	2f00      	cmp	r7, #0
    3d8c:	d100      	bne.n	3d90 <pinPeripheral+0x1ec>
    3d8e:	e73d      	b.n	3c0c <pinPeripheral+0x68>
        DAC->CTRLA.bit.ENABLE = 0x01;     // Enable DAC controller, so that the other DAC can function
    3d90:	2702      	movs	r7, #2
    3d92:	7806      	ldrb	r6, [r0, #0]
    3d94:	4337      	orrs	r7, r6
    3d96:	7007      	strb	r7, [r0, #0]
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3d98:	273f      	movs	r7, #63	; 0x3f
    3d9a:	6886      	ldr	r6, [r0, #8]
    3d9c:	423e      	tst	r6, r7
    3d9e:	d1fc      	bne.n	3d9a <pinPeripheral+0x1f6>
        while ( (DAC->STATUS.reg & (1 << (1 - DACNumber))) == 0 );   // Must wait for DACx to start
    3da0:	2701      	movs	r7, #1
    3da2:	1b7d      	subs	r5, r7, r5
    3da4:	40af      	lsls	r7, r5
    3da6:	79c5      	ldrb	r5, [r0, #7]
    3da8:	422f      	tst	r7, r5
    3daa:	d0fc      	beq.n	3da6 <pinPeripheral+0x202>
    3dac:	e72e      	b.n	3c0c <pinPeripheral+0x68>
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	00010f58 	.word	0x00010f58
    3db4:	40002840 	.word	0x40002840
    3db8:	40002800 	.word	0x40002800
    3dbc:	40002830 	.word	0x40002830
    3dc0:	2000093b 	.word	0x2000093b
    3dc4:	42003000 	.word	0x42003000

00003dc8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
    3dc8:	4770      	bx	lr

00003dca <_ZN11DHT_Unified8HumidityD1Ev>:
    DHT_Unified* _parent;
    int32_t _id;

  };

  class Humidity : public Adafruit_Sensor {
    3dca:	4770      	bx	lr

00003dcc <_ZN11DHT_Unified11TemperatureD1Ev>:
  class Temperature : public Adafruit_Sensor {
    3dcc:	4770      	bx	lr

00003dce <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
DHT_Unified::Temperature::Temperature(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    3dce:	b570      	push	{r4, r5, r6, lr}
    3dd0:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3dd2:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    3dd4:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    3dd6:	0032      	movs	r2, r6
    3dd8:	2100      	movs	r1, #0
    3dda:	0020      	movs	r0, r4
    3ddc:	f008 fe6c 	bl	cab8 <memset>
  // Populate sensor reading values.
  event->version     = sizeof(sensors_event_t);
  event->sensor_id   = _id;
    3de0:	68eb      	ldr	r3, [r5, #12]
  event->version     = sizeof(sensors_event_t);
    3de2:	6026      	str	r6, [r4, #0]
  event->sensor_id   = _id;
    3de4:	6063      	str	r3, [r4, #4]
  event->type        = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3de6:	230d      	movs	r3, #13
    3de8:	60a3      	str	r3, [r4, #8]
  event->timestamp   = millis();
    3dea:	f7fe fc3b 	bl	2664 <millis>
  event->temperature = _parent->_dht.readTemperature();
    3dee:	2200      	movs	r2, #0
  event->timestamp   = millis();
    3df0:	6120      	str	r0, [r4, #16]
  event->temperature = _parent->_dht.readTemperature();
    3df2:	0011      	movs	r1, r2
    3df4:	68a8      	ldr	r0, [r5, #8]
    3df6:	f001 fe43 	bl	5a80 <_ZN3DHT15readTemperatureEbb>
    3dfa:	6160      	str	r0, [r4, #20]
  
  return true;
}
    3dfc:	2001      	movs	r0, #1
    3dfe:	bd70      	pop	{r4, r5, r6, pc}

00003e00 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
DHT_Unified::Humidity::Humidity(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    3e00:	b570      	push	{r4, r5, r6, lr}
    3e02:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3e04:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    3e06:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    3e08:	0032      	movs	r2, r6
    3e0a:	2100      	movs	r1, #0
    3e0c:	0020      	movs	r0, r4
    3e0e:	f008 fe53 	bl	cab8 <memset>
  // Populate sensor reading values.
  event->version           = sizeof(sensors_event_t);
  event->sensor_id         = _id;
    3e12:	68eb      	ldr	r3, [r5, #12]
  event->version           = sizeof(sensors_event_t);
    3e14:	6026      	str	r6, [r4, #0]
  event->sensor_id         = _id;
    3e16:	6063      	str	r3, [r4, #4]
  event->type              = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3e18:	230c      	movs	r3, #12
    3e1a:	60a3      	str	r3, [r4, #8]
  event->timestamp         = millis();
    3e1c:	f7fe fc22 	bl	2664 <millis>
  event->relative_humidity = _parent->_dht.readHumidity();
    3e20:	2100      	movs	r1, #0
  event->timestamp         = millis();
    3e22:	6120      	str	r0, [r4, #16]
  event->relative_humidity = _parent->_dht.readHumidity();
    3e24:	68a8      	ldr	r0, [r5, #8]
    3e26:	f001 fe7b 	bl	5b20 <_ZN3DHT12readHumidityEb>
    3e2a:	6160      	str	r0, [r4, #20]
  
  return true;
}
    3e2c:	2001      	movs	r0, #1
    3e2e:	bd70      	pop	{r4, r5, r6, pc}

00003e30 <_ZN11DHT_Unified8HumidityD0Ev>:
  class Humidity : public Adafruit_Sensor {
    3e30:	b510      	push	{r4, lr}
    3e32:	0004      	movs	r4, r0
    3e34:	f000 ff62 	bl	4cfc <_ZdlPv>
    3e38:	0020      	movs	r0, r4
    3e3a:	bd10      	pop	{r4, pc}

00003e3c <_ZN11DHT_Unified11TemperatureD0Ev>:
  class Temperature : public Adafruit_Sensor {
    3e3c:	b510      	push	{r4, lr}
    3e3e:	0004      	movs	r4, r0
    3e40:	f000 ff5c 	bl	4cfc <_ZdlPv>
    3e44:	0020      	movs	r0, r4
    3e46:	bd10      	pop	{r4, pc}

00003e48 <_ZN11DHT_UnifiedC1Ehhhll>:
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count, int32_t tempSensorId, int32_t humiditySensorId):
    3e48:	b570      	push	{r4, r5, r6, lr}
    3e4a:	0004      	movs	r4, r0
    3e4c:	0015      	movs	r5, r2
  _humidity(this, humiditySensorId)
    3e4e:	f001 fd5f 	bl	5910 <_ZN3DHTC1Ehhh>
  _id(id)
    3e52:	4b07      	ldr	r3, [pc, #28]	; (3e70 <_ZN11DHT_UnifiedC1Ehhhll+0x28>)
  _humidity(this, humiditySensorId)
    3e54:	7525      	strb	r5, [r4, #20]
  _id(id)
    3e56:	3308      	adds	r3, #8
    3e58:	61a3      	str	r3, [r4, #24]
    3e5a:	9b04      	ldr	r3, [sp, #16]
{}
    3e5c:	0020      	movs	r0, r4
  _id(id)
    3e5e:	6263      	str	r3, [r4, #36]	; 0x24
  _id(id)
    3e60:	4b04      	ldr	r3, [pc, #16]	; (3e74 <_ZN11DHT_UnifiedC1Ehhhll+0x2c>)
  _id(id)
    3e62:	6224      	str	r4, [r4, #32]
  _id(id)
    3e64:	3308      	adds	r3, #8
    3e66:	62a3      	str	r3, [r4, #40]	; 0x28
    3e68:	9b05      	ldr	r3, [sp, #20]
    3e6a:	6324      	str	r4, [r4, #48]	; 0x30
    3e6c:	6363      	str	r3, [r4, #52]	; 0x34
{}
    3e6e:	bd70      	pop	{r4, r5, r6, pc}
    3e70:	00010d24 	.word	0x00010d24
    3e74:	00010d40 	.word	0x00010d40

00003e78 <_ZN11DHT_Unified5beginEv>:
void DHT_Unified::begin() {
    3e78:	b510      	push	{r4, lr}
  _dht.begin();
    3e7a:	f001 fd5d 	bl	5938 <_ZN3DHT5beginEv>
}
    3e7e:	bd10      	pop	{r4, pc}

00003e80 <_ZN11DHT_Unified7setNameEP8sensor_t>:
void DHT_Unified::setName(sensor_t* sensor) {
    3e80:	b510      	push	{r4, lr}
  switch(_type) {
    3e82:	7d02      	ldrb	r2, [r0, #20]
void DHT_Unified::setName(sensor_t* sensor) {
    3e84:	000c      	movs	r4, r1
  switch(_type) {
    3e86:	2a15      	cmp	r2, #21
    3e88:	d007      	beq.n	3e9a <_ZN11DHT_Unified7setNameEP8sensor_t+0x1a>
    3e8a:	2a16      	cmp	r2, #22
    3e8c:	d00d      	beq.n	3eaa <_ZN11DHT_Unified7setNameEP8sensor_t+0x2a>
      strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    3e8e:	4908      	ldr	r1, [pc, #32]	; (3eb0 <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>)
  switch(_type) {
    3e90:	2a0b      	cmp	r2, #11
    3e92:	d004      	beq.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    3e94:	220b      	movs	r2, #11
    3e96:	4907      	ldr	r1, [pc, #28]	; (3eb4 <_ZN11DHT_Unified7setNameEP8sensor_t+0x34>)
    3e98:	e001      	b.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    3e9a:	220b      	movs	r2, #11
    3e9c:	4906      	ldr	r1, [pc, #24]	; (3eb8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x38>)
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    3e9e:	0020      	movs	r0, r4
    3ea0:	f009 ff4e 	bl	dd40 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
    3ea4:	2300      	movs	r3, #0
    3ea6:	72e3      	strb	r3, [r4, #11]
}
    3ea8:	bd10      	pop	{r4, pc}
      strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    3eaa:	220b      	movs	r2, #11
    3eac:	4903      	ldr	r1, [pc, #12]	; (3ebc <_ZN11DHT_Unified7setNameEP8sensor_t+0x3c>)
    3eae:	e7f6      	b.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
    3eb0:	00010d0c 	.word	0x00010d0c
    3eb4:	00010d1e 	.word	0x00010d1e
    3eb8:	00010d12 	.word	0x00010d12
    3ebc:	00010d18 	.word	0x00010d18

00003ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
  switch(_type) {
    3ec0:	7d03      	ldrb	r3, [r0, #20]
    3ec2:	2b15      	cmp	r3, #21
    3ec4:	d006      	beq.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    3ec6:	2b16      	cmp	r3, #22
    3ec8:	d004      	beq.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    3eca:	2b0b      	cmp	r3, #11
    3ecc:	d102      	bne.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
      sensor->min_delay = 1000000L;  // 1 second (in microseconds)
    3ece:	4b02      	ldr	r3, [pc, #8]	; (3ed8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x18>)
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    3ed0:	624b      	str	r3, [r1, #36]	; 0x24
}
    3ed2:	4770      	bx	lr
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    3ed4:	4b01      	ldr	r3, [pc, #4]	; (3edc <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>)
    3ed6:	e7fb      	b.n	3ed0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x10>
    3ed8:	000f4240 	.word	0x000f4240
    3edc:	001e8480 	.word	0x001e8480

00003ee0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:
void DHT_Unified::Temperature::getSensor(sensor_t* sensor) {
    3ee0:	b570      	push	{r4, r5, r6, lr}
    3ee2:	000c      	movs	r4, r1
    3ee4:	0005      	movs	r5, r0
  memset(sensor, 0, sizeof(sensor_t));
    3ee6:	2228      	movs	r2, #40	; 0x28
    3ee8:	2100      	movs	r1, #0
    3eea:	0020      	movs	r0, r4
    3eec:	f008 fde4 	bl	cab8 <memset>
  _parent->setName(sensor);
    3ef0:	0021      	movs	r1, r4
    3ef2:	68a8      	ldr	r0, [r5, #8]
    3ef4:	f7ff ffc4 	bl	3e80 <_ZN11DHT_Unified7setNameEP8sensor_t>
  sensor->version         = DHT_SENSOR_VERSION;
    3ef8:	2301      	movs	r3, #1
    3efa:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    3efc:	68eb      	ldr	r3, [r5, #12]
  _parent->setMinDelay(sensor);
    3efe:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    3f00:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3f02:	230d      	movs	r3, #13
  _parent->setMinDelay(sensor);
    3f04:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3f06:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    3f08:	f7ff ffda 	bl	3ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    3f0c:	68ab      	ldr	r3, [r5, #8]
    3f0e:	7d1a      	ldrb	r2, [r3, #20]
    3f10:	2a15      	cmp	r2, #21
    3f12:	d00b      	beq.n	3f2c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4c>
    3f14:	2a16      	cmp	r2, #22
    3f16:	d00f      	beq.n	3f38 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x58>
    3f18:	2300      	movs	r3, #0
    3f1a:	2a0b      	cmp	r2, #11
    3f1c:	d10e      	bne.n	3f3c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x5c>
      sensor->min_value   = 0.0F;
    3f1e:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 2.0F;
    3f20:	2380      	movs	r3, #128	; 0x80
      sensor->max_value   = 50.0F;
    3f22:	4a08      	ldr	r2, [pc, #32]	; (3f44 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x64>)
      sensor->resolution  = 2.0F;
    3f24:	05db      	lsls	r3, r3, #23
      sensor->max_value   = 50.0F;
    3f26:	61a2      	str	r2, [r4, #24]
      sensor->resolution  = 0.0F;
    3f28:	6223      	str	r3, [r4, #32]
}
    3f2a:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 80.0F;
    3f2c:	4b06      	ldr	r3, [pc, #24]	; (3f48 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x68>)
      sensor->max_value   = 125.0F;
    3f2e:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = -40.0F;
    3f30:	4b06      	ldr	r3, [pc, #24]	; (3f4c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6c>)
    3f32:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    3f34:	4b06      	ldr	r3, [pc, #24]	; (3f50 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>)
    3f36:	e7f7      	b.n	3f28 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
      sensor->max_value   = 125.0F;
    3f38:	4b06      	ldr	r3, [pc, #24]	; (3f54 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x74>)
    3f3a:	e7f8      	b.n	3f2e <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4e>
      sensor->max_value   = 0.0F;
    3f3c:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3f3e:	61e3      	str	r3, [r4, #28]
    3f40:	e7f2      	b.n	3f28 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	42480000 	.word	0x42480000
    3f48:	42a00000 	.word	0x42a00000
    3f4c:	c2200000 	.word	0xc2200000
    3f50:	3dcccccd 	.word	0x3dcccccd
    3f54:	42fa0000 	.word	0x42fa0000

00003f58 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

void DHT_Unified::Humidity::getSensor(sensor_t* sensor) {
    3f58:	b570      	push	{r4, r5, r6, lr}
    3f5a:	000c      	movs	r4, r1
    3f5c:	0005      	movs	r5, r0
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    3f5e:	2228      	movs	r2, #40	; 0x28
    3f60:	2100      	movs	r1, #0
    3f62:	0020      	movs	r0, r4
    3f64:	f008 fda8 	bl	cab8 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    3f68:	0021      	movs	r1, r4
    3f6a:	68a8      	ldr	r0, [r5, #8]
    3f6c:	f7ff ff88 	bl	3e80 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version         = DHT_SENSOR_VERSION;
    3f70:	2301      	movs	r3, #1
    3f72:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    3f74:	68eb      	ldr	r3, [r5, #12]
  // Set type and characteristics.
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
    3f76:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    3f78:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3f7a:	230c      	movs	r3, #12
  _parent->setMinDelay(sensor);
    3f7c:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3f7e:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    3f80:	f7ff ff9e 	bl	3ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    3f84:	68ab      	ldr	r3, [r5, #8]
    3f86:	7d1b      	ldrb	r3, [r3, #20]
    3f88:	2b15      	cmp	r3, #21
    3f8a:	d00a      	beq.n	3fa2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    3f8c:	2b16      	cmp	r3, #22
    3f8e:	d008      	beq.n	3fa2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    3f90:	2b0b      	cmp	r3, #11
    3f92:	d10c      	bne.n	3fae <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x56>
    case DHT11:
      sensor->max_value   = 80.0F;
    3f94:	4b08      	ldr	r3, [pc, #32]	; (3fb8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x60>)
    3f96:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 20.0F;
    3f98:	4b08      	ldr	r3, [pc, #32]	; (3fbc <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x64>)
    3f9a:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 5.0F;
    3f9c:	4b08      	ldr	r3, [pc, #32]	; (3fc0 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x68>)
      break;
    default:
      // Unknown type, default to 0.
      sensor->max_value   = 0.0F;
      sensor->min_value   = 0.0F;
      sensor->resolution  = 0.0F;
    3f9e:	6223      	str	r3, [r4, #32]
      break;
  }
}
    3fa0:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 100.0F;
    3fa2:	4b08      	ldr	r3, [pc, #32]	; (3fc4 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6c>)
    3fa4:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3fa6:	2300      	movs	r3, #0
    3fa8:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    3faa:	4b07      	ldr	r3, [pc, #28]	; (3fc8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x70>)
    3fac:	e7f7      	b.n	3f9e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
      sensor->max_value   = 0.0F;
    3fae:	2300      	movs	r3, #0
    3fb0:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3fb2:	61e3      	str	r3, [r4, #28]
    3fb4:	e7f3      	b.n	3f9e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	42a00000 	.word	0x42a00000
    3fbc:	41a00000 	.word	0x41a00000
    3fc0:	40a00000 	.word	0x40a00000
    3fc4:	42c80000 	.word	0x42c80000
    3fc8:	3dcccccd 	.word	0x3dcccccd

00003fcc <_ZN17RunningStatistics13setWindowSecsEf>:
RunningStatistics::RunningStatistics() {
  setWindowSecs( 1 );   // setup with one second average
  setInitialValue( 0 ); // start with zero
}

void RunningStatistics::setWindowSecs( float windowSecs ) {
    3fcc:	b510      	push	{r4, lr}
    3fce:	0004      	movs	r4, r0
  AverageSecs = windowSecs;
    3fd0:	c002      	stmia	r0!, {r1}
  
  averageValue.setRiseTime( AverageSecs );
    3fd2:	f001 feb9 	bl	5d48 <_ZN20FilterOnePoleCascade11setRiseTimeEf>
  averageSquareValue.setRiseTime( AverageSecs );
    3fd6:	0020      	movs	r0, r4
    3fd8:	6821      	ldr	r1, [r4, #0]
    3fda:	3044      	adds	r0, #68	; 0x44
    3fdc:	f001 feb4 	bl	5d48 <_ZN20FilterOnePoleCascade11setRiseTimeEf>
}
    3fe0:	bd10      	pop	{r4, pc}

00003fe2 <_ZN17RunningStatistics15setInitialValueEff>:

void RunningStatistics::setInitialValue( float initialMean, float initialSigma ) {
    3fe2:	b570      	push	{r4, r5, r6, lr}
    3fe4:	1c0d      	adds	r5, r1, #0
    3fe6:	0004      	movs	r4, r0
  averageValue.setToNewValue( initialMean );
    3fe8:	3004      	adds	r0, #4
void RunningStatistics::setInitialValue( float initialMean, float initialSigma ) {
    3fea:	1c16      	adds	r6, r2, #0
  averageValue.setToNewValue( initialMean );
    3fec:	f001 fec9 	bl	5d82 <_ZN20FilterOnePoleCascade13setToNewValueEf>
  averageSquareValue.setToNewValue( sq(initialMean) + sq(initialSigma ) );
    3ff0:	1c29      	adds	r1, r5, #0
    3ff2:	1c28      	adds	r0, r5, #0
    3ff4:	f006 f99c 	bl	a330 <__aeabi_fmul>
    3ff8:	1c31      	adds	r1, r6, #0
    3ffa:	1c05      	adds	r5, r0, #0
    3ffc:	1c30      	adds	r0, r6, #0
    3ffe:	f006 f997 	bl	a330 <__aeabi_fmul>
    4002:	1c01      	adds	r1, r0, #0
    4004:	1c28      	adds	r0, r5, #0
    4006:	f005 fe11 	bl	9c2c <__aeabi_fadd>
    400a:	1c01      	adds	r1, r0, #0
    400c:	0020      	movs	r0, r4
    400e:	3044      	adds	r0, #68	; 0x44
    4010:	f001 feb7 	bl	5d82 <_ZN20FilterOnePoleCascade13setToNewValueEf>
}
    4014:	bd70      	pop	{r4, r5, r6, pc}

00004016 <_ZN17RunningStatisticsC1Ev>:
RunningStatistics::RunningStatistics() {
    4016:	b570      	push	{r4, r5, r6, lr}
    4018:	26fe      	movs	r6, #254	; 0xfe
    401a:	2500      	movs	r5, #0
    401c:	0004      	movs	r4, r0
    401e:	05b6      	lsls	r6, r6, #22
    4020:	1c2a      	adds	r2, r5, #0
    4022:	1c31      	adds	r1, r6, #0
    4024:	3004      	adds	r0, #4
    4026:	f001 fe67 	bl	5cf8 <_ZN20FilterOnePoleCascadeC1Eff>
    402a:	0020      	movs	r0, r4
    402c:	1c2a      	adds	r2, r5, #0
    402e:	1c31      	adds	r1, r6, #0
    4030:	3044      	adds	r0, #68	; 0x44
    4032:	f001 fe61 	bl	5cf8 <_ZN20FilterOnePoleCascadeC1Eff>
  setWindowSecs( 1 );   // setup with one second average
    4036:	1c31      	adds	r1, r6, #0
    4038:	0020      	movs	r0, r4
    403a:	f7ff ffc7 	bl	3fcc <_ZN17RunningStatistics13setWindowSecsEf>
  setInitialValue( 0 ); // start with zero
    403e:	1c2a      	adds	r2, r5, #0
    4040:	1c29      	adds	r1, r5, #0
    4042:	0020      	movs	r0, r4
    4044:	f7ff ffcd 	bl	3fe2 <_ZN17RunningStatistics15setInitialValueEff>
}
    4048:	0020      	movs	r0, r4
    404a:	bd70      	pop	{r4, r5, r6, pc}

0000404c <_ZN17RunningStatistics5inputEf>:

void RunningStatistics::input( float inVal ) {
    404c:	b570      	push	{r4, r5, r6, lr}
    404e:	1c0d      	adds	r5, r1, #0
    4050:	0004      	movs	r4, r0
  averageValue.input(inVal);              // calculates running average
    4052:	3004      	adds	r0, #4
    4054:	f001 fe88 	bl	5d68 <_ZN20FilterOnePoleCascade5inputEf>
  averageSquareValue.input(inVal*inVal);  // calculates running average of square
    4058:	1c29      	adds	r1, r5, #0
    405a:	1c28      	adds	r0, r5, #0
    405c:	f006 f968 	bl	a330 <__aeabi_fmul>
    4060:	1c01      	adds	r1, r0, #0
    4062:	0020      	movs	r0, r4
    4064:	3044      	adds	r0, #68	; 0x44
    4066:	f001 fe7f 	bl	5d68 <_ZN20FilterOnePoleCascade5inputEf>
}
    406a:	bd70      	pop	{r4, r5, r6, pc}

0000406c <_ZN17RunningStatistics8varianceEv>:
  
float RunningStatistics::mean() {
  return averageValue.output();
}
  
float RunningStatistics::variance() {
    406c:	b570      	push	{r4, r5, r6, lr}
    406e:	0004      	movs	r4, r0
  float var = averageSquareValue.output() - averageValue.output()*averageValue.output();
    4070:	3044      	adds	r0, #68	; 0x44
    4072:	f001 fe8d 	bl	5d90 <_ZN20FilterOnePoleCascade6outputEv>
    4076:	3404      	adds	r4, #4
    4078:	1c05      	adds	r5, r0, #0
    407a:	0020      	movs	r0, r4
    407c:	f001 fe88 	bl	5d90 <_ZN20FilterOnePoleCascade6outputEv>
    4080:	1c06      	adds	r6, r0, #0
    4082:	0020      	movs	r0, r4
    4084:	f001 fe84 	bl	5d90 <_ZN20FilterOnePoleCascade6outputEv>
    4088:	1c01      	adds	r1, r0, #0
    408a:	1c30      	adds	r0, r6, #0
    408c:	f006 f950 	bl	a330 <__aeabi_fmul>
    4090:	1c01      	adds	r1, r0, #0
    4092:	1c28      	adds	r0, r5, #0
    4094:	f006 fa6c 	bl	a570 <__aeabi_fsub>
    
  // because of the filtering, it's possible that this could be negative ... check!
  if( var < 0 ) var = 0;
    4098:	2100      	movs	r1, #0
  float var = averageSquareValue.output() - averageValue.output()*averageValue.output();
    409a:	1c04      	adds	r4, r0, #0
  if( var < 0 ) var = 0;
    409c:	f005 fd68 	bl	9b70 <__aeabi_fcmplt>
    40a0:	2800      	cmp	r0, #0
    40a2:	d000      	beq.n	40a6 <_ZN17RunningStatistics8varianceEv+0x3a>
    40a4:	2400      	movs	r4, #0
    
  return var;
}
    40a6:	1c20      	adds	r0, r4, #0
    40a8:	bd70      	pop	{r4, r5, r6, pc}

000040aa <_ZN17RunningStatistics5sigmaEv>:
  
float RunningStatistics::sigma() {
    40aa:	b510      	push	{r4, lr}
  
#ifdef ARM_FLOAT
  return sqrtf(variance());
#else
  return sqrt(variance());
    40ac:	f7ff ffde 	bl	406c <_ZN17RunningStatistics8varianceEv>
  { return __builtin_sqrtf(__x); }
    40b0:	f005 f962 	bl	9378 <sqrtf>
#endif

}
    40b4:	bd10      	pop	{r4, pc}
	...

000040b8 <_Z13rtc_time_initl>:
 *
 * @brief Init the RTC time
 *
 */
error_t rtc_time_init(int32_t zone)
{
    40b8:	b513      	push	{r0, r1, r4, lr}
	// Initialize RTC clock code
	rtc.begin();
    40ba:	4c0a      	ldr	r4, [pc, #40]	; (40e4 <_Z13rtc_time_initl+0x2c>)
    40bc:	0020      	movs	r0, r4
    40be:	f001 ff77 	bl	5fb0 <_ZN7RTCZero5beginEv>
	
	// Set default time
	struct rtc_clockreg_value time;
	time.day = 1;
    40c2:	466a      	mov	r2, sp
    40c4:	2301      	movs	r3, #1
    40c6:	70d3      	strb	r3, [r2, #3]
	time.month = 1;
    40c8:	7113      	strb	r3, [r2, #4]
	time.year = 2000;
    40ca:	23fa      	movs	r3, #250	; 0xfa
    40cc:	00db      	lsls	r3, r3, #3
    40ce:	80d3      	strh	r3, [r2, #6]
	time.hour = 0;
    40d0:	2300      	movs	r3, #0
	time.minute = 0;
	time.second = 0;
	
	rtc.rtc_set_time(&time);
    40d2:	0020      	movs	r0, r4
    40d4:	4669      	mov	r1, sp
	time.hour = 0;
    40d6:	7093      	strb	r3, [r2, #2]
	time.minute = 0;
    40d8:	7053      	strb	r3, [r2, #1]
	time.second = 0;
    40da:	7013      	strb	r3, [r2, #0]
	rtc.rtc_set_time(&time);
    40dc:	f001 ff10 	bl	5f00 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
	
	// Set the timezone
	set_time_zone(zone);
}
    40e0:	bd16      	pop	{r1, r2, r4, pc}
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	2000093d 	.word	0x2000093d

000040e8 <_Z13get_rtc_epochv>:
 * @brief Get the RTC time in local time
 *
 * 
 */
time_t get_rtc_epoch()
{
    40e8:	b510      	push	{r4, lr}
	// Convert to UTC
	time_t epoch;
	epoch = rtc.getEpoch();
    40ea:	4802      	ldr	r0, [pc, #8]	; (40f4 <_Z13get_rtc_epochv+0xc>)
    40ec:	f001 febe 	bl	5e6c <_ZN7RTCZero8getEpochEv>
	return epoch;

} // get_rtc_time()
    40f0:	bd10      	pop	{r4, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	2000093d 	.word	0x2000093d

000040f8 <_Z18print_current_timev>:
* Prints the current time
* The time is set to 0 during boot
*
*/
void print_current_time(void)
{
    40f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    40fa:	4c0c      	ldr	r4, [pc, #48]	; (412c <_Z18print_current_timev+0x34>)
{
    40fc:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    40fe:	0020      	movs	r0, r4
    4100:	f001 fe62 	bl	5dc8 <_ZN7RTCZero10getSecondsEv>
    4104:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    4106:	0020      	movs	r0, r4
    4108:	f001 fe64 	bl	5dd4 <_ZN7RTCZero10getMinutesEv>
    410c:	0005      	movs	r5, r0
	c = rtc.getHours();
    410e:	0020      	movs	r0, r4
    4110:	f001 fe66 	bl	5de0 <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    4114:	002b      	movs	r3, r5
	c = rtc.getHours();
    4116:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    4118:	4905      	ldr	r1, [pc, #20]	; (4130 <_Z18print_current_timev+0x38>)
	a = rtc.getSeconds();
    411a:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    411c:	a802      	add	r0, sp, #8
    411e:	f009 fda1 	bl	dc64 <siprintf>
	println(buffer);
    4122:	a802      	add	r0, sp, #8
    4124:	f000 f936 	bl	4394 <_Z7printlnPKc>
	
} // print_current_time
    4128:	b042      	add	sp, #264	; 0x108
    412a:	bd70      	pop	{r4, r5, r6, pc}
    412c:	2000093d 	.word	0x2000093d
    4130:	00010d97 	.word	0x00010d97

00004134 <_Z14print_log_timev>:
* Prints the current time specifically for logging
* The time is set to 0 during boot
*
*/
void print_log_time(void)
{
    4134:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    4136:	4c0c      	ldr	r4, [pc, #48]	; (4168 <_Z14print_log_timev+0x34>)
{
    4138:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    413a:	0020      	movs	r0, r4
    413c:	f001 fe44 	bl	5dc8 <_ZN7RTCZero10getSecondsEv>
    4140:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    4142:	0020      	movs	r0, r4
    4144:	f001 fe46 	bl	5dd4 <_ZN7RTCZero10getMinutesEv>
    4148:	0005      	movs	r5, r0
	c = rtc.getHours();
    414a:	0020      	movs	r0, r4
    414c:	f001 fe48 	bl	5de0 <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4150:	002b      	movs	r3, r5
	c = rtc.getHours();
    4152:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4154:	4905      	ldr	r1, [pc, #20]	; (416c <_Z14print_log_timev+0x38>)
	a = rtc.getSeconds();
    4156:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4158:	a802      	add	r0, sp, #8
    415a:	f009 fd83 	bl	dc64 <siprintf>
	print(buffer);
    415e:	a802      	add	r0, sp, #8
    4160:	f000 f902 	bl	4368 <_Z5printPKc>
	
} // print_current_time
    4164:	b042      	add	sp, #264	; 0x108
    4166:	bd70      	pop	{r4, r5, r6, pc}
    4168:	2000093d 	.word	0x2000093d
    416c:	00010d5c 	.word	0x00010d5c

00004170 <_Z18print_current_datev>:
* Prints the current date
* The date is set to 0 during boot
*
*/
void print_current_date(void)
{
    4170:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getYear();
    4172:	4c0c      	ldr	r4, [pc, #48]	; (41a4 <_Z18print_current_datev+0x34>)
{
    4174:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getYear();
    4176:	0020      	movs	r0, r4
    4178:	f001 fe44 	bl	5e04 <_ZN7RTCZero7getYearEv>
    417c:	0006      	movs	r6, r0
	b = rtc.getDay();
    417e:	0020      	movs	r0, r4
    4180:	f001 fe34 	bl	5dec <_ZN7RTCZero6getDayEv>
    4184:	0005      	movs	r5, r0
	c = rtc.getMonth();
    4186:	0020      	movs	r0, r4
    4188:	f001 fe36 	bl	5df8 <_ZN7RTCZero8getMonthEv>
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    418c:	002b      	movs	r3, r5
	c = rtc.getMonth();
    418e:	0002      	movs	r2, r0
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4190:	4905      	ldr	r1, [pc, #20]	; (41a8 <_Z18print_current_datev+0x38>)
	a = rtc.getYear();
    4192:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4194:	a802      	add	r0, sp, #8
    4196:	f009 fd65 	bl	dc64 <siprintf>
	println(buffer);
    419a:	a802      	add	r0, sp, #8
    419c:	f000 f8fa 	bl	4394 <_Z7printlnPKc>
	
} // print_current_date
    41a0:	b042      	add	sp, #264	; 0x108
    41a2:	bd70      	pop	{r4, r5, r6, pc}
    41a4:	2000093d 	.word	0x2000093d
    41a8:	00010d73 	.word	0x00010d73

000041ac <_GLOBAL__sub_I_rtc>:
    41ac:	b510      	push	{r4, lr}
RTCZero rtc;
    41ae:	4802      	ldr	r0, [pc, #8]	; (41b8 <_GLOBAL__sub_I_rtc+0xc>)
    41b0:	f001 fdfc 	bl	5dac <_ZN7RTCZeroC1Ev>
} // print_current_date
    41b4:	bd10      	pop	{r4, pc}
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	2000093d 	.word	0x2000093d

000041bc <_Z10dlog_leveli>:


void dlog_level(int level)
{
    /* force level bounds */
    level = level >= numlevels ? numlevels - 1 : level;
    41bc:	2807      	cmp	r0, #7
    41be:	dd00      	ble.n	41c2 <_Z10dlog_leveli+0x6>
    41c0:	2007      	movs	r0, #7
    level = level < 0 ? 0 : level;
    41c2:	43c3      	mvns	r3, r0
    41c4:	17db      	asrs	r3, r3, #31
    41c6:	4018      	ands	r0, r3

    log_level = level;
    41c8:	4b01      	ldr	r3, [pc, #4]	; (41d0 <_Z10dlog_leveli+0x14>)
    41ca:	6018      	str	r0, [r3, #0]
} // dlog_level
    41cc:	4770      	bx	lr
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	20000044 	.word	0x20000044

000041d4 <_Z8log_initP7Serial_mm>:
{
    41d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pSerMon = pSerial;
    41d6:	4e0e      	ldr	r6, [pc, #56]	; (4210 <_Z8log_initP7Serial_mm+0x3c>)
{
    41d8:	0017      	movs	r7, r2
	pSerMon = pSerial;
    41da:	6030      	str	r0, [r6, #0]
	SerMon.begin(baud);
    41dc:	f001 f9ec 	bl	55b8 <_ZN7Serial_5beginEm>
	log_enabled = false;
    41e0:	2300      	movs	r3, #0
    41e2:	2408      	movs	r4, #8
    41e4:	4d0b      	ldr	r5, [pc, #44]	; (4214 <_Z8log_initP7Serial_mm+0x40>)
    41e6:	702b      	strb	r3, [r5, #0]
		if (!SerMon){
    41e8:	6830      	ldr	r0, [r6, #0]
    41ea:	f001 f9e7 	bl	55bc <_ZN7Serial_cvbEv>
    41ee:	2800      	cmp	r0, #0
    41f0:	d10a      	bne.n	4208 <_Z8log_initP7Serial_mm+0x34>
			delay(2000);
    41f2:	20fa      	movs	r0, #250	; 0xfa
    41f4:	3c01      	subs	r4, #1
    41f6:	00c0      	lsls	r0, r0, #3
    41f8:	f7fe fa6a 	bl	26d0 <delay>
	for (int indx=0 ; indx < 8 ; indx++) {
    41fc:	2c00      	cmp	r4, #0
    41fe:	d1f3      	bne.n	41e8 <_Z8log_initP7Serial_mm+0x14>
	dlog_level(log_level);
    4200:	0038      	movs	r0, r7
    4202:	f7ff ffdb 	bl	41bc <_Z10dlog_leveli>
} // log_init
    4206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_enabled = true;
    4208:	2301      	movs	r3, #1
    420a:	702b      	strb	r3, [r5, #0]
			break;
    420c:	e7f8      	b.n	4200 <_Z8log_initP7Serial_mm+0x2c>
    420e:	46c0      	nop			; (mov r8, r8)
    4210:	20000940 	.word	0x20000940
    4214:	2000093e 	.word	0x2000093e

00004218 <_Z4dlogiPKcz>:


void dlog(int level, const char *format, ...)
{
    4218:	b40e      	push	{r1, r2, r3}
    421a:	b500      	push	{lr}
    va_list args;
	char buffer[PRINTF_LEN];
	
	// Is logging enabled?
	if (!log_enabled)
    421c:	4b0c      	ldr	r3, [pc, #48]	; (4250 <_Z4dlogiPKcz+0x38>)
{
    421e:	b0c2      	sub	sp, #264	; 0x108
	if (!log_enabled)
    4220:	781b      	ldrb	r3, [r3, #0]
    4222:	2b00      	cmp	r3, #0
    4224:	d010      	beq.n	4248 <_Z4dlogiPKcz+0x30>
	{
		return;
	}
   
    // Check debug log
    if (level > log_level) 
    4226:	4b0b      	ldr	r3, [pc, #44]	; (4254 <_Z4dlogiPKcz+0x3c>)
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	4283      	cmp	r3, r0
    422c:	db0c      	blt.n	4248 <_Z4dlogiPKcz+0x30>
	{
        return;
    }

	// Print time
	print_log_time();
    422e:	f7ff ff81 	bl	4134 <_Z14print_log_timev>

	// Print to serial port using the format
	va_start( args, format );
    4232:	aa44      	add	r2, sp, #272	; 0x110
	vsprintf( buffer,format, args );
    4234:	9943      	ldr	r1, [sp, #268]	; 0x10c
    4236:	a802      	add	r0, sp, #8
	va_start( args, format );
    4238:	9201      	str	r2, [sp, #4]
	vsprintf( buffer,format, args );
    423a:	f00a f893 	bl	e364 <vsiprintf>
	SerMon.println(buffer);
    423e:	4b06      	ldr	r3, [pc, #24]	; (4258 <_Z4dlogiPKcz+0x40>)
    4240:	a902      	add	r1, sp, #8
    4242:	6818      	ldr	r0, [r3, #0]
    4244:	f000 fdb0 	bl	4da8 <_ZN5Print7printlnEPKc>
	va_end(args);

} // dlog
    4248:	b042      	add	sp, #264	; 0x108
    424a:	bc08      	pop	{r3}
    424c:	b003      	add	sp, #12
    424e:	4718      	bx	r3
    4250:	2000093e 	.word	0x2000093e
    4254:	20000044 	.word	0x20000044
    4258:	20000940 	.word	0x20000940

0000425c <_Z5ddumpiPKcPKvi>:


void ddump(int level, const char *label, const void *data, int datalen)
{
    425c:	b5f0      	push	{r4, r5, r6, r7, lr}
    425e:	001f      	movs	r7, r3
    const uint8_t *b = (const uint8_t *) data;
	char buffer[PRINTF_LEN];
    int i;
    
    // Is logging enabled?
    if (!log_enabled)
    4260:	4b16      	ldr	r3, [pc, #88]	; (42bc <_Z5ddumpiPKcPKvi+0x60>)
{
    4262:	b0c1      	sub	sp, #260	; 0x104
    if (!log_enabled)
    4264:	781b      	ldrb	r3, [r3, #0]
{
    4266:	000c      	movs	r4, r1
    4268:	0016      	movs	r6, r2
    if (!log_enabled)
    426a:	2b00      	cmp	r3, #0
    426c:	d024      	beq.n	42b8 <_Z5ddumpiPKcPKvi+0x5c>
    {
	    return;
    }

    if (level > log_level) 
    426e:	4b14      	ldr	r3, [pc, #80]	; (42c0 <_Z5ddumpiPKcPKvi+0x64>)
    4270:	681b      	ldr	r3, [r3, #0]
    4272:	4283      	cmp	r3, r0
    4274:	db20      	blt.n	42b8 <_Z5ddumpiPKcPKvi+0x5c>
	{
        return;
    }

	// Print time
	print_log_time();
    4276:	f7ff ff5d 	bl	4134 <_Z14print_log_timev>
    427a:	4d12      	ldr	r5, [pc, #72]	; (42c4 <_Z5ddumpiPKcPKvi+0x68>)

    if (label) 
    427c:	2c00      	cmp	r4, #0
    427e:	d008      	beq.n	4292 <_Z5ddumpiPKcPKvi+0x36>
	{
		sprintf( buffer, "%s:", label );
    4280:	4911      	ldr	r1, [pc, #68]	; (42c8 <_Z5ddumpiPKcPKvi+0x6c>)
    4282:	0022      	movs	r2, r4
    4284:	4668      	mov	r0, sp
    4286:	f009 fced 	bl	dc64 <siprintf>
        SerMon.print(buffer);
    428a:	4669      	mov	r1, sp
    428c:	6828      	ldr	r0, [r5, #0]
    428e:	f000 fd66 	bl	4d5e <_ZN5Print5printEPKc>
{
    4292:	0034      	movs	r4, r6
    }

    for(i = 0; i < datalen; i++) 
    4294:	1ba3      	subs	r3, r4, r6
    4296:	42bb      	cmp	r3, r7
    4298:	da0a      	bge.n	42b0 <_Z5ddumpiPKcPKvi+0x54>
	{
		sprintf( buffer, " %02x", b[i] );
    429a:	7822      	ldrb	r2, [r4, #0]
    429c:	490b      	ldr	r1, [pc, #44]	; (42cc <_Z5ddumpiPKcPKvi+0x70>)
    429e:	4668      	mov	r0, sp
    42a0:	f009 fce0 	bl	dc64 <siprintf>
        SerMon.print(buffer);
    42a4:	4669      	mov	r1, sp
    42a6:	6828      	ldr	r0, [r5, #0]
    42a8:	f000 fd59 	bl	4d5e <_ZN5Print5printEPKc>
    42ac:	3401      	adds	r4, #1
    42ae:	e7f1      	b.n	4294 <_Z5ddumpiPKcPKvi+0x38>
    }
    
    SerMon.println("");
    42b0:	4907      	ldr	r1, [pc, #28]	; (42d0 <_Z5ddumpiPKcPKvi+0x74>)
    42b2:	6828      	ldr	r0, [r5, #0]
    42b4:	f000 fd78 	bl	4da8 <_ZN5Print7printlnEPKc>

} // ddump
    42b8:	b041      	add	sp, #260	; 0x104
    42ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42bc:	2000093e 	.word	0x2000093e
    42c0:	20000044 	.word	0x20000044
    42c4:	20000940 	.word	0x20000940
    42c8:	00010df6 	.word	0x00010df6
    42cc:	00010dfa 	.word	0x00010dfa
    42d0:	0001110a 	.word	0x0001110a

000042d4 <_Z7log_msgPKcPKvii>:


void log_msg(const char *label, const void *data, int datalen, int eol)
{
    42d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42d6:	9301      	str	r3, [sp, #4]
    static char llabel[64];
    static int llen;
    static uint8_t line[256];
    
    // Is logging enabled?
    if (!log_enabled)
    42d8:	4b1e      	ldr	r3, [pc, #120]	; (4354 <_Z7log_msgPKcPKvii+0x80>)
{
    42da:	0006      	movs	r6, r0
    if (!log_enabled)
    42dc:	781b      	ldrb	r3, [r3, #0]
{
    42de:	9100      	str	r1, [sp, #0]
    42e0:	0014      	movs	r4, r2
    if (!log_enabled)
    42e2:	2b00      	cmp	r3, #0
    42e4:	d034      	beq.n	4350 <_Z7log_msgPKcPKvii+0x7c>
    {
	    return;
    }

    if ( LOG_DEBUG > log_level ) 
    42e6:	4b1c      	ldr	r3, [pc, #112]	; (4358 <_Z7log_msgPKcPKvii+0x84>)
    42e8:	681b      	ldr	r3, [r3, #0]
    42ea:	2b06      	cmp	r3, #6
    42ec:	dd30      	ble.n	4350 <_Z7log_msgPKcPKvii+0x7c>
	{
        return;
    }

    if ((!eol || llen) && (llen + datalen < sizeof(line))) {
    42ee:	9b01      	ldr	r3, [sp, #4]
    42f0:	4d1a      	ldr	r5, [pc, #104]	; (435c <_Z7log_msgPKcPKvii+0x88>)
    42f2:	2b00      	cmp	r3, #0
    42f4:	d002      	beq.n	42fc <_Z7log_msgPKcPKvii+0x28>
    42f6:	682b      	ldr	r3, [r5, #0]
    42f8:	2b00      	cmp	r3, #0
    42fa:	d012      	beq.n	4322 <_Z7log_msgPKcPKvii+0x4e>
    42fc:	682b      	ldr	r3, [r5, #0]
    42fe:	18e7      	adds	r7, r4, r3
    4300:	2fff      	cmp	r7, #255	; 0xff
    4302:	d80e      	bhi.n	4322 <_Z7log_msgPKcPKvii+0x4e>
        /* buffer if we can */
        memcpy(line + llen, data, datalen);
    4304:	4816      	ldr	r0, [pc, #88]	; (4360 <_Z7log_msgPKcPKvii+0x8c>)
    4306:	0022      	movs	r2, r4
    4308:	18c0      	adds	r0, r0, r3
    430a:	9900      	ldr	r1, [sp, #0]
    430c:	f008 fbb9 	bl	ca82 <memcpy>
        llen += datalen;
        datalen = 0;    /* consumed */
    4310:	1e34      	subs	r4, r6, #0
        llen += datalen;
    4312:	602f      	str	r7, [r5, #0]
        if (label) {
    4314:	d005      	beq.n	4322 <_Z7log_msgPKcPKvii+0x4e>
            strncpy(llabel, label, sizeof(llabel)-1);
    4316:	223f      	movs	r2, #63	; 0x3f
    4318:	0031      	movs	r1, r6
    431a:	4812      	ldr	r0, [pc, #72]	; (4364 <_Z7log_msgPKcPKvii+0x90>)
    431c:	f009 fd10 	bl	dd40 <strncpy>
        datalen = 0;    /* consumed */
    4320:	2400      	movs	r4, #0
        }
    }

    if (eol || datalen) {
    4322:	9b01      	ldr	r3, [sp, #4]
    4324:	4323      	orrs	r3, r4
    4326:	d013      	beq.n	4350 <_Z7log_msgPKcPKvii+0x7c>
        /* flush */
        if (llen) {
    4328:	682b      	ldr	r3, [r5, #0]
    432a:	2b00      	cmp	r3, #0
    432c:	d008      	beq.n	4340 <_Z7log_msgPKcPKvii+0x6c>
            ddump(LOG_DEBUG, llabel, line, llen);
    432e:	4f0d      	ldr	r7, [pc, #52]	; (4364 <_Z7log_msgPKcPKvii+0x90>)
    4330:	4a0b      	ldr	r2, [pc, #44]	; (4360 <_Z7log_msgPKcPKvii+0x8c>)
    4332:	0039      	movs	r1, r7
    4334:	2007      	movs	r0, #7
    4336:	f7ff ff91 	bl	425c <_Z5ddumpiPKcPKvi>
            llabel[0] = 0;
    433a:	2300      	movs	r3, #0
    433c:	703b      	strb	r3, [r7, #0]
            llen = 0;
    433e:	602b      	str	r3, [r5, #0]
        }
        
        if (datalen) {
    4340:	2c00      	cmp	r4, #0
    4342:	d005      	beq.n	4350 <_Z7log_msgPKcPKvii+0x7c>
            ddump(LOG_DEBUG, label, data, datalen);
    4344:	0023      	movs	r3, r4
    4346:	9a00      	ldr	r2, [sp, #0]
    4348:	0031      	movs	r1, r6
    434a:	2007      	movs	r0, #7
    434c:	f7ff ff86 	bl	425c <_Z5ddumpiPKcPKvi>
        }

    } // if

} // log_msg
    4350:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4352:	46c0      	nop			; (mov r8, r8)
    4354:	2000093e 	.word	0x2000093e
    4358:	20000044 	.word	0x20000044
    435c:	20000a44 	.word	0x20000a44
    4360:	20000944 	.word	0x20000944
    4364:	20000a48 	.word	0x20000a48

00004368 <_Z5printPKc>:


void print( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    4368:	4b07      	ldr	r3, [pc, #28]	; (4388 <_Z5printPKc+0x20>)
{
    436a:	b510      	push	{r4, lr}
	if (!log_enabled)
    436c:	781b      	ldrb	r3, [r3, #0]
{
    436e:	0001      	movs	r1, r0
	if (!log_enabled)
    4370:	2b00      	cmp	r3, #0
    4372:	d007      	beq.n	4384 <_Z5printPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    4374:	4b05      	ldr	r3, [pc, #20]	; (438c <_Z5printPKc+0x24>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	2b06      	cmp	r3, #6
    437a:	dd03      	ble.n	4384 <_Z5printPKc+0x1c>
	{
        return;
    }

	SerMon.print(buf);
    437c:	4b04      	ldr	r3, [pc, #16]	; (4390 <_Z5printPKc+0x28>)
    437e:	6818      	ldr	r0, [r3, #0]
    4380:	f000 fced 	bl	4d5e <_ZN5Print5printEPKc>
	
} // print
    4384:	bd10      	pop	{r4, pc}
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	2000093e 	.word	0x2000093e
    438c:	20000044 	.word	0x20000044
    4390:	20000940 	.word	0x20000940

00004394 <_Z7printlnPKc>:


void println( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    4394:	4b07      	ldr	r3, [pc, #28]	; (43b4 <_Z7printlnPKc+0x20>)
{
    4396:	b510      	push	{r4, lr}
	if (!log_enabled)
    4398:	781b      	ldrb	r3, [r3, #0]
{
    439a:	0001      	movs	r1, r0
	if (!log_enabled)
    439c:	2b00      	cmp	r3, #0
    439e:	d007      	beq.n	43b0 <_Z7printlnPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    43a0:	4b05      	ldr	r3, [pc, #20]	; (43b8 <_Z7printlnPKc+0x24>)
    43a2:	681b      	ldr	r3, [r3, #0]
    43a4:	2b06      	cmp	r3, #6
    43a6:	dd03      	ble.n	43b0 <_Z7printlnPKc+0x1c>
	{
        return;
    }

	SerMon.println(buf);
    43a8:	4b04      	ldr	r3, [pc, #16]	; (43bc <_Z7printlnPKc+0x28>)
    43aa:	6818      	ldr	r0, [r3, #0]
    43ac:	f000 fcfc 	bl	4da8 <_ZN5Print7printlnEPKc>
	
} // println
    43b0:	bd10      	pop	{r4, pc}
    43b2:	46c0      	nop			; (mov r8, r8)
    43b4:	2000093e 	.word	0x2000093e
    43b8:	20000044 	.word	0x20000044
    43bc:	20000940 	.word	0x20000940

000043c0 <_Z8printnumi>:


void printnum( int n )
{
	// Is logging enabled?
	if (!log_enabled)
    43c0:	4b07      	ldr	r3, [pc, #28]	; (43e0 <_Z8printnumi+0x20>)
{
    43c2:	b510      	push	{r4, lr}
	if (!log_enabled)
    43c4:	781b      	ldrb	r3, [r3, #0]
{
    43c6:	0001      	movs	r1, r0
	if (!log_enabled)
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <_Z8printnumi+0x1e>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    43cc:	4b05      	ldr	r3, [pc, #20]	; (43e4 <_Z8printnumi+0x24>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	2b06      	cmp	r3, #6
    43d2:	dd04      	ble.n	43de <_Z8printnumi+0x1e>
	{
        return;
    }

	SerMon.print(n);
    43d4:	4b04      	ldr	r3, [pc, #16]	; (43e8 <_Z8printnumi+0x28>)
    43d6:	220a      	movs	r2, #10
    43d8:	6818      	ldr	r0, [r3, #0]
    43da:	f000 fd44 	bl	4e66 <_ZN5Print5printEii>
	
} // println
    43de:	bd10      	pop	{r4, pc}
    43e0:	2000093e 	.word	0x2000093e
    43e4:	20000044 	.word	0x20000044
    43e8:	20000940 	.word	0x20000940

000043ec <_Z12capture_dumpPhi>:
	char str[6];
    uint8_t ch;
	uint16_t ix;
	
	// Is logging enabled?
	if (!log_enabled)
    43ec:	4b1b      	ldr	r3, [pc, #108]	; (445c <_Z12capture_dumpPhi+0x70>)
{
    43ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!log_enabled)
    43f0:	781b      	ldrb	r3, [r3, #0]
{
    43f2:	0006      	movs	r6, r0
    43f4:	000f      	movs	r7, r1
	if (!log_enabled)
    43f6:	2b00      	cmp	r3, #0
    43f8:	d02e      	beq.n	4458 <_Z12capture_dumpPhi+0x6c>
	{
		return;
	}

    // Check debug log
    if ( LOG_DEBUG > log_level ) 
    43fa:	4b19      	ldr	r3, [pc, #100]	; (4460 <_Z12capture_dumpPhi+0x74>)
    43fc:	681b      	ldr	r3, [r3, #0]
    43fe:	2b06      	cmp	r3, #6
    4400:	dd2a      	ble.n	4458 <_Z12capture_dumpPhi+0x6c>
	{
        return;
    }
	
	if (!p)
    4402:	2800      	cmp	r0, #0
    4404:	d100      	bne.n	4408 <_Z12capture_dumpPhi+0x1c>
	{
		p = &capture_buf[0];
    4406:	4e17      	ldr	r6, [pc, #92]	; (4464 <_Z12capture_dumpPhi+0x78>)
	}

	if ( !count && ( cap_count >= 0 ))
    4408:	2f00      	cmp	r7, #0
    440a:	d101      	bne.n	4410 <_Z12capture_dumpPhi+0x24>
	{
		count = cap_count;
    440c:	4b16      	ldr	r3, [pc, #88]	; (4468 <_Z12capture_dumpPhi+0x7c>)
    440e:	881f      	ldrh	r7, [r3, #0]
		
	}
	
	SerMon.println("======================================================");
    4410:	4d16      	ldr	r5, [pc, #88]	; (446c <_Z12capture_dumpPhi+0x80>)
    4412:	4917      	ldr	r1, [pc, #92]	; (4470 <_Z12capture_dumpPhi+0x84>)
    4414:	6828      	ldr	r0, [r5, #0]
    4416:	f000 fcc7 	bl	4da8 <_ZN5Print7printlnEPKc>
	for( ix = 0; ix < count-1; ix++ )
    441a:	2400      	movs	r4, #0
    441c:	1e7b      	subs	r3, r7, #1
		ch = p[ix];
		sprintf( str, "%02x,", ch );
		SerMon.print(str);

	} // for
	sprintf( str, "%02x", p[ix] );
    441e:	5d32      	ldrb	r2, [r6, r4]
	for( ix = 0; ix < count-1; ix++ )
    4420:	429c      	cmp	r4, r3
    4422:	da0a      	bge.n	443a <_Z12capture_dumpPhi+0x4e>
		sprintf( str, "%02x,", ch );
    4424:	4913      	ldr	r1, [pc, #76]	; (4474 <_Z12capture_dumpPhi+0x88>)
    4426:	4668      	mov	r0, sp
    4428:	f009 fc1c 	bl	dc64 <siprintf>
	for( ix = 0; ix < count-1; ix++ )
    442c:	3401      	adds	r4, #1
		SerMon.print(str);
    442e:	4669      	mov	r1, sp
    4430:	6828      	ldr	r0, [r5, #0]
    4432:	f000 fc94 	bl	4d5e <_ZN5Print5printEPKc>
	for( ix = 0; ix < count-1; ix++ )
    4436:	b2a4      	uxth	r4, r4
    4438:	e7f0      	b.n	441c <_Z12capture_dumpPhi+0x30>
	sprintf( str, "%02x", p[ix] );
    443a:	490f      	ldr	r1, [pc, #60]	; (4478 <_Z12capture_dumpPhi+0x8c>)
    443c:	4668      	mov	r0, sp
    443e:	f009 fc11 	bl	dc64 <siprintf>
	SerMon.println(str);
    4442:	4669      	mov	r1, sp
    4444:	6828      	ldr	r0, [r5, #0]
    4446:	f000 fcaf 	bl	4da8 <_ZN5Print7printlnEPKc>
	SerMon.println("======================================================");
    444a:	4909      	ldr	r1, [pc, #36]	; (4470 <_Z12capture_dumpPhi+0x84>)
    444c:	6828      	ldr	r0, [r5, #0]
    444e:	f000 fcab 	bl	4da8 <_ZN5Print7printlnEPKc>

	// Reset the count
	cap_count = 0;
    4452:	2200      	movs	r2, #0
    4454:	4b04      	ldr	r3, [pc, #16]	; (4468 <_Z12capture_dumpPhi+0x7c>)
    4456:	801a      	strh	r2, [r3, #0]

} // capture_dump
    4458:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	2000093e 	.word	0x2000093e
    4460:	20000044 	.word	0x20000044
    4464:	20000a8a 	.word	0x20000a8a
    4468:	20000a88 	.word	0x20000a88
    446c:	20000940 	.word	0x20000940
    4470:	00010db9 	.word	0x00010db9
    4474:	00010df0 	.word	0x00010df0
    4478:	00010dfb 	.word	0x00010dfb

0000447c <_Z8free_ramv>:


// Function to return the amount of Free Ram.
extern "C" char *sbrk(int i);
int free_ram()
{
    447c:	b513      	push	{r0, r1, r4, lr}
	char stack_dummy = 0;
    447e:	2000      	movs	r0, #0
    4480:	466b      	mov	r3, sp
    4482:	1ddc      	adds	r4, r3, #7
    4484:	71d8      	strb	r0, [r3, #7]
	return &stack_dummy - sbrk(0);
    4486:	f009 fd07 	bl	de98 <sbrk>
    448a:	1a20      	subs	r0, r4, r0
}
    448c:	bd16      	pop	{r1, r2, r4, pc}
	...

00004490 <_Z10eraseBlockv>:
//////////////////////////////////////////////////////////////////////////
//
// SPI FLASH Functions
//
//////////////////////////////////////////////////////////////////////////
bool eraseBlock(){
    4490:	b510      	push	{r4, lr}
	if (!flash.eraseBlock64K(1))
    4492:	2101      	movs	r1, #1
    4494:	4801      	ldr	r0, [pc, #4]	; (449c <_Z10eraseBlockv+0xc>)
    4496:	f001 ff77 	bl	6388 <_ZN8SPIFlash13eraseBlock64KEm>
	return false;
	else
	return true;
}
    449a:	bd10      	pop	{r4, pc}
    449c:	20000e8c 	.word	0x20000e8c

000044a0 <_Z9getStringi>:
	str += inChar;
	// Serial.println("end run");
	str += '\0';
	return str;
}
String getString(int addr){
    44a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44a2:	b0c7      	sub	sp, #284	; 0x11c
    44a4:	000c      	movs	r4, r1
    44a6:	0005      	movs	r5, r0

	String output = "";
    44a8:	4914      	ldr	r1, [pc, #80]	; (44fc <_Z9getStringi+0x5c>)
    44aa:	a803      	add	r0, sp, #12
    44ac:	f001 f95a 	bl	5764 <_ZN6StringC1EPKc>
	uint8_t data_buffer[BLOCKSIZE];
	flash.readByteArray(addr, &data_buffer[0], BLOCKSIZE);
    44b0:	2300      	movs	r3, #0
    44b2:	ae06      	add	r6, sp, #24
    44b4:	9300      	str	r3, [sp, #0]
    44b6:	3301      	adds	r3, #1
    44b8:	0021      	movs	r1, r4
    44ba:	33ff      	adds	r3, #255	; 0xff
    44bc:	0032      	movs	r2, r6
    44be:	4810      	ldr	r0, [pc, #64]	; (4500 <_Z9getStringi+0x60>)
	for (int i = 2; i < BLOCKSIZE; i++)
    44c0:	2780      	movs	r7, #128	; 0x80
	flash.readByteArray(addr, &data_buffer[0], BLOCKSIZE);
    44c2:	f001 fe17 	bl	60f4 <_ZN8SPIFlash13readByteArrayEmPhjb>
	for (int i = 2; i < BLOCKSIZE; i++)
    44c6:	2402      	movs	r4, #2
    44c8:	007f      	lsls	r7, r7, #1
	{
		if (data_buffer[i] == 255 )
    44ca:	5d31      	ldrb	r1, [r6, r4]
    44cc:	29ff      	cmp	r1, #255	; 0xff
    44ce:	d109      	bne.n	44e4 <_Z9getStringi+0x44>
		return output;
    44d0:	a903      	add	r1, sp, #12
    44d2:	0028      	movs	r0, r5
    44d4:	f001 f8f0 	bl	56b8 <_ZN6StringC1EOS_>
	String output = "";
    44d8:	a803      	add	r0, sp, #12
    44da:	f001 f8fb 	bl	56d4 <_ZN6StringD1Ev>
		output += (char)data_buffer[i];
	}
	return "No Data";
	
}
    44de:	0028      	movs	r0, r5
    44e0:	b047      	add	sp, #284	; 0x11c
    44e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    44e4:	a803      	add	r0, sp, #12
	for (int i = 2; i < BLOCKSIZE; i++)
    44e6:	3401      	adds	r4, #1
    44e8:	f001 f99d 	bl	5826 <_ZN6String6concatEc>
    44ec:	42bc      	cmp	r4, r7
    44ee:	d1ec      	bne.n	44ca <_Z9getStringi+0x2a>
	return "No Data";
    44f0:	4904      	ldr	r1, [pc, #16]	; (4504 <_Z9getStringi+0x64>)
    44f2:	0028      	movs	r0, r5
    44f4:	f001 f936 	bl	5764 <_ZN6StringC1EPKc>
    44f8:	e7ee      	b.n	44d8 <_Z9getStringi+0x38>
    44fa:	46c0      	nop			; (mov r8, r8)
    44fc:	0001110a 	.word	0x0001110a
    4500:	20000e8c 	.word	0x20000e8c
    4504:	00010f4d 	.word	0x00010f4d

00004508 <_Z5getIDv>:
String getID(){
    4508:	b5f0      	push	{r4, r5, r6, r7, lr}

	String ID1 = "";
    450a:	4914      	ldr	r1, [pc, #80]	; (455c <_Z5getIDv+0x54>)
String getID(){
    450c:	b085      	sub	sp, #20
    450e:	0005      	movs	r5, r0
	//  Serial.println(F("Initialising"));
	//  UniqueIDdump(Serial);
	for (size_t i = 0; i < UniqueIDsize; i++)
    4510:	2400      	movs	r4, #0
	String ID1 = "";
    4512:	f001 f927 	bl	5764 <_ZN6StringC1EPKc>
	{
		ID1 += String(UniqueID[i],HEX);
		if (i%4==3 && i < (UniqueIDsize - 1))
    4516:	2703      	movs	r7, #3
		ID1 += String(UniqueID[i],HEX);
    4518:	4b11      	ldr	r3, [pc, #68]	; (4560 <_Z5getIDv+0x58>)
    451a:	2210      	movs	r2, #16
    451c:	5d19      	ldrb	r1, [r3, r4]
    451e:	a801      	add	r0, sp, #4
    4520:	f001 f944 	bl	57ac <_ZN6StringC1Ehh>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    4524:	a901      	add	r1, sp, #4
    4526:	0028      	movs	r0, r5
    4528:	f001 f96a 	bl	5800 <_ZN6String6concatERKS_>
    452c:	a801      	add	r0, sp, #4
    452e:	f001 f8d1 	bl	56d4 <_ZN6StringD1Ev>
		if (i%4==3 && i < (UniqueIDsize - 1))
    4532:	0023      	movs	r3, r4
    4534:	1c66      	adds	r6, r4, #1
    4536:	403b      	ands	r3, r7
    4538:	2b03      	cmp	r3, #3
    453a:	d105      	bne.n	4548 <_Z5getIDv+0x40>
    453c:	2c0f      	cmp	r4, #15
    453e:	d006      	beq.n	454e <_Z5getIDv+0x46>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    4540:	4908      	ldr	r1, [pc, #32]	; (4564 <_Z5getIDv+0x5c>)
    4542:	0028      	movs	r0, r5
    4544:	f001 f962 	bl	580c <_ZN6String6concatEPKc>
	for (size_t i = 0; i < UniqueIDsize; i++)
    4548:	0034      	movs	r4, r6
    454a:	2e10      	cmp	r6, #16
    454c:	d1e4      	bne.n	4518 <_Z5getIDv+0x10>
		{
			ID1 += ("-");
		}
	}
	ID1.toUpperCase();
    454e:	0028      	movs	r0, r5
    4550:	f001 f9a3 	bl	589a <_ZN6String11toUpperCaseEv>
	return ID1;
}
    4554:	0028      	movs	r0, r5
    4556:	b005      	add	sp, #20
    4558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    455a:	46c0      	nop			; (mov r8, r8)
    455c:	0001110a 	.word	0x0001110a
    4560:	2000128c 	.word	0x2000128c
    4564:	00012ce3 	.word	0x00012ce3

00004568 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>:
// Register a sensor.
//
//////////////////////////////////////////////////////////////////////////
uint8_t sapi_register_sensor(char *sensor_type, SensorInitFuncPtr sensor_init, SensorReadFuncPtr sensor_read, SensorReadCfgFuncPtr sensor_readcfg,
							 SensorWriteCfgFuncPtr sensor_writecfg, uint8_t is_observer, uint32_t frequency)
{
    4568:	b5f0      	push	{r4, r5, r6, r7, lr}
    456a:	b087      	sub	sp, #28
    456c:	9304      	str	r3, [sp, #16]
    456e:	ab0c      	add	r3, sp, #48	; 0x30
    4570:	9203      	str	r2, [sp, #12]
	uint8_t sensor_id = sensor_info_index;
    4572:	4f1c      	ldr	r7, [pc, #112]	; (45e4 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x7c>)
{
    4574:	cb04      	ldmia	r3!, {r2}
	uint8_t sensor_id = sensor_info_index;
    4576:	783d      	ldrb	r5, [r7, #0]
{
    4578:	781b      	ldrb	r3, [r3, #0]
	
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    457a:	4c1b      	ldr	r4, [pc, #108]	; (45e8 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x80>)
{
    457c:	9301      	str	r3, [sp, #4]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    457e:	016b      	lsls	r3, r5, #5
    4580:	18e4      	adds	r4, r4, r3
{
    4582:	9102      	str	r1, [sp, #8]
    4584:	0006      	movs	r6, r0
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4586:	0001      	movs	r1, r0
    4588:	0020      	movs	r0, r4
{
    458a:	9205      	str	r2, [sp, #20]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    458c:	f009 fba3 	bl	dcd6 <strcpy>
	sensor_info[sensor_id].init = sensor_init;
    4590:	9b02      	ldr	r3, [sp, #8]
    4592:	60a3      	str	r3, [r4, #8]
	sensor_info[sensor_id].read = sensor_read;
    4594:	9b03      	ldr	r3, [sp, #12]
    4596:	60e3      	str	r3, [r4, #12]
	sensor_info[sensor_id].readcfg = sensor_readcfg;
    4598:	9b04      	ldr	r3, [sp, #16]
    459a:	6123      	str	r3, [r4, #16]
	sensor_info[sensor_id].writecfg = sensor_writecfg;
    459c:	9b05      	ldr	r3, [sp, #20]
    459e:	6163      	str	r3, [r4, #20]
	sensor_info[sensor_id].frequency = frequency;
    45a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    45a2:	61a3      	str	r3, [r4, #24]
	
	sensor_info[sensor_id].observer = 0;
	if (is_observer == 1)
    45a4:	9b01      	ldr	r3, [sp, #4]
    45a6:	2b01      	cmp	r3, #1
    45a8:	d00c      	beq.n	45c4 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x5c>
	sensor_info[sensor_id].observer = 0;
    45aa:	2300      	movs	r3, #0
    45ac:	7723      	strb	r3, [r4, #28]
		
		// Set the URI used for obtaining token etc in CoAP Observe response msg and set the observe handler, frequency, sensor id.
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
	}
	sensor_info_index++;
    45ae:	783b      	ldrb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    45b0:	0032      	movs	r2, r6
	sensor_info_index++;
    45b2:	3301      	adds	r3, #1
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    45b4:	490d      	ldr	r1, [pc, #52]	; (45ec <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x84>)
    45b6:	2007      	movs	r0, #7
	sensor_info_index++;
    45b8:	703b      	strb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    45ba:	f7ff fe2d 	bl	4218 <_Z4dlogiPKcz>
	return sensor_id;
}
    45be:	0028      	movs	r0, r5
    45c0:	b007      	add	sp, #28
    45c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_info[sensor_id].observer = 1;
    45c4:	466b      	mov	r3, sp
    45c6:	791b      	ldrb	r3, [r3, #4]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    45c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		sensor_info[sensor_id].observer = 1;
    45ca:	7723      	strb	r3, [r4, #28]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    45cc:	4908      	ldr	r1, [pc, #32]	; (45f0 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x88>)
    45ce:	002b      	movs	r3, r5
    45d0:	0030      	movs	r0, r6
    45d2:	f003 f927 	bl	7824 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    45d6:	4907      	ldr	r1, [pc, #28]	; (45f4 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x8c>)
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    45d8:	0002      	movs	r2, r0
    45da:	7760      	strb	r0, [r4, #29]
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    45dc:	2007      	movs	r0, #7
    45de:	f7ff fe1b 	bl	4218 <_Z4dlogiPKcz>
    45e2:	e7e4      	b.n	45ae <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x46>
    45e4:	20000e8a 	.word	0x20000e8a
    45e8:	20000f98 	.word	0x20000f98
    45ec:	00010ed1 	.word	0x00010ed1
    45f0:	00004905 	.word	0x00004905
    45f4:	00010ebd 	.word	0x00010ebd

000045f8 <_Z16sapi_init_sensorh>:
//
// Initialize a sensor (hardware) and sensor related code.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t sapi_init_sensor(uint8_t sensor_id)
{
    45f8:	b510      	push	{r4, lr}
	// Initialize Sensor
	SensorInitFuncPtr pInitFunc = sensor_info[sensor_id].init;
    45fa:	0143      	lsls	r3, r0, #5
    45fc:	4802      	ldr	r0, [pc, #8]	; (4608 <_Z16sapi_init_sensorh+0x10>)
    45fe:	18c0      	adds	r0, r0, r3
	sapi_error_t rcode = (*pInitFunc)();
    4600:	6883      	ldr	r3, [r0, #8]
    4602:	4798      	blx	r3
	
	return rcode;
}
    4604:	bd10      	pop	{r4, pc}
    4606:	46c0      	nop			; (mov r8, r8)
    4608:	20000f98 	.word	0x20000f98

0000460c <_Z17cbor_enc_nic_typeP8cbor_bufPc>:
//
// Add sensor type to a CBOR payload wrapper
//
//////////////////////////////////////////////////////////////////////////
uint8_t cbor_enc_nic_type(struct cbor_buf *cbuf, char *sensor_type)
{
    460c:	b570      	push	{r4, r5, r6, lr}
    460e:	000d      	movs	r5, r1
	uint8_t rcode;

	// Top level map, first element is for device type.
	// Device type used to provide a namespace for use at the MQTT broker.
	if ((rcode = cbor_enc_map(cbuf, 2)))
    4610:	2102      	movs	r1, #2
{
    4612:	0004      	movs	r4, r0
	if ((rcode = cbor_enc_map(cbuf, 2)))
    4614:	f002 fb01 	bl	6c1a <_Z12cbor_enc_mapP8cbor_bufi>
    4618:	b2c0      	uxtb	r0, r0
    461a:	2800      	cmp	r0, #0
    461c:	d116      	bne.n	464c <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// NIC type, key and value
	if ((rcode = cbor_enc_int(cbuf, NAMESPACE_NIC_TYPE_KEY)))
    461e:	0001      	movs	r1, r0
    4620:	0020      	movs	r0, r4
    4622:	f002 fad2 	bl	6bca <_Z12cbor_enc_intP8cbor_bufi>
    4626:	b2c0      	uxtb	r0, r0
    4628:	2800      	cmp	r0, #0
    462a:	d10f      	bne.n	464c <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}
	if ((rcode = cbor_enc_text(cbuf, sensor_type, strlen(sensor_type))))
    462c:	0028      	movs	r0, r5
    462e:	f009 fb5a 	bl	dce6 <strlen>
    4632:	0029      	movs	r1, r5
    4634:	0002      	movs	r2, r0
    4636:	0020      	movs	r0, r4
    4638:	f002 fad3 	bl	6be2 <_Z13cbor_enc_textP8cbor_bufPKci>
    463c:	b2c0      	uxtb	r0, r0
    463e:	2800      	cmp	r0, #0
    4640:	d104      	bne.n	464c <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// Remaining device-specific key
	rcode = cbor_enc_int(cbuf, NAMESPACE_DEVICE_SPECIFIC_KEY);
    4642:	2101      	movs	r1, #1
    4644:	0020      	movs	r0, r4
    4646:	f002 fac0 	bl	6bca <_Z12cbor_enc_intP8cbor_bufi>
    464a:	b2c0      	uxtb	r0, r0
	return rcode;
}
    464c:	bd70      	pop	{r4, r5, r6, pc}
	...

00004650 <_Z13build_rsp_msgP4mbufPhPcmh>:
//
// A typical CBOR payload: {0:"temp",1:<text payload>"}
//
//////////////////////////////////////////////////////////////////////////
error_t build_rsp_msg(struct mbuf *m, uint8_t *len, char *payload, uint32_t payloadlen, uint8_t sensor_id)
{
    4650:	b5f0      	push	{r4, r5, r6, r7, lr}
    4652:	b0a7      	sub	sp, #156	; 0x9c
    4654:	001f      	movs	r7, r3
    4656:	ab2c      	add	r3, sp, #176	; 0xb0
    4658:	9101      	str	r1, [sp, #4]
    465a:	781c      	ldrb	r4, [r3, #0]
	
	// If payload needs to be in CBOR format we add the CBOR wrapper.
	error_t	rcode = ERR_FAIL;
	struct cbor_buf cbuf;
		
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    465c:	a906      	add	r1, sp, #24
{
    465e:	0005      	movs	r5, r0
    4660:	0016      	movs	r6, r2
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    4662:	a802      	add	r0, sp, #8
    4664:	2280      	movs	r2, #128	; 0x80
    4666:	f002 fa9f 	bl	6ba8 <_Z13cbor_enc_initP8cbor_bufPvi>
	
	if (!cbor_enc_nic_type(&cbuf, sensor_info[sensor_id].devicetype))
    466a:	491c      	ldr	r1, [pc, #112]	; (46dc <_Z13build_rsp_msgP4mbufPhPcmh+0x8c>)
    466c:	0164      	lsls	r4, r4, #5
    466e:	1909      	adds	r1, r1, r4
    4670:	a802      	add	r0, sp, #8
    4672:	f7ff ffcb 	bl	460c <_Z17cbor_enc_nic_typeP8cbor_bufPc>
    4676:	2800      	cmp	r0, #0
    4678:	d003      	beq.n	4682 <_Z13build_rsp_msgP4mbufPhPcmh+0x32>
{
    467a:	2363      	movs	r3, #99	; 0x63
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
	
	int freeram = free_ram();
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
	return ERR_OK;
}
    467c:	0018      	movs	r0, r3
    467e:	b027      	add	sp, #156	; 0x9c
    4680:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!cbor_enc_text(&cbuf, payload, payloadlen))
    4682:	0031      	movs	r1, r6
    4684:	003a      	movs	r2, r7
    4686:	a802      	add	r0, sp, #8
    4688:	f002 faab 	bl	6be2 <_Z13cbor_enc_textP8cbor_bufPKci>
    468c:	1e06      	subs	r6, r0, #0
    468e:	d1f4      	bne.n	467a <_Z13build_rsp_msgP4mbufPhPcmh+0x2a>
	l = cbor_buf_get_len(&cbuf);
    4690:	a802      	add	r0, sp, #8
    4692:	f002 fa96 	bl	6bc2 <_Z16cbor_buf_get_lenP8cbor_buf>
    4696:	b2c7      	uxtb	r7, r0
    4698:	0004      	movs	r4, r0
	p = (char *) m_append(m, l);
    469a:	b239      	sxth	r1, r7
    469c:	0028      	movs	r0, r5
    469e:	f003 feb9 	bl	8414 <_Z8m_appendP4mbufs>
		return ERR_NO_MEM;
    46a2:	2303      	movs	r3, #3
	if (!p)
    46a4:	2800      	cmp	r0, #0
    46a6:	d0e9      	beq.n	467c <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    46a8:	b2e4      	uxtb	r4, r4
	memcpy(p, cbor_payload, l);
    46aa:	0022      	movs	r2, r4
    46ac:	a906      	add	r1, sp, #24
    46ae:	f008 f9e8 	bl	ca82 <memcpy>
	*len = l;
    46b2:	9b01      	ldr	r3, [sp, #4]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    46b4:	490a      	ldr	r1, [pc, #40]	; (46e0 <_Z13build_rsp_msgP4mbufPhPcmh+0x90>)
	*len = l;
    46b6:	701f      	strb	r7, [r3, #0]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    46b8:	2007      	movs	r0, #7
    46ba:	f7ff fdad 	bl	4218 <_Z4dlogiPKcz>
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
    46be:	0023      	movs	r3, r4
    46c0:	aa06      	add	r2, sp, #24
    46c2:	4908      	ldr	r1, [pc, #32]	; (46e4 <_Z13build_rsp_msgP4mbufPhPcmh+0x94>)
    46c4:	2007      	movs	r0, #7
    46c6:	f7ff fdc9 	bl	425c <_Z5ddumpiPKcPKvi>
	int freeram = free_ram();
    46ca:	f7ff fed7 	bl	447c <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    46ce:	4906      	ldr	r1, [pc, #24]	; (46e8 <_Z13build_rsp_msgP4mbufPhPcmh+0x98>)
	int freeram = free_ram();
    46d0:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    46d2:	2007      	movs	r0, #7
    46d4:	f7ff fda0 	bl	4218 <_Z4dlogiPKcz>
	return ERR_OK;
    46d8:	0033      	movs	r3, r6
    46da:	e7cf      	b.n	467c <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    46dc:	20000f98 	.word	0x20000f98
    46e0:	00010e00 	.word	0x00010e00
    46e4:	0001186a 	.word	0x0001186a
    46e8:	0001166b 	.word	0x0001166b

000046ec <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>:
{
    46ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    46ee:	0006      	movs	r6, r0
{
    46f0:	b0a9      	sub	sp, #164	; 0xa4
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    46f2:	364c      	adds	r6, #76	; 0x4c
{
    46f4:	9205      	str	r2, [sp, #20]
    46f6:	0005      	movs	r5, r0
    46f8:	000f      	movs	r7, r1
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    46fa:	aa05      	add	r2, sp, #20
    46fc:	210b      	movs	r1, #11
    46fe:	0030      	movs	r0, r6
{
    4700:	001c      	movs	r4, r3
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    4702:	f003 f82d 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    4706:	9003      	str	r0, [sp, #12]
    if (o)
    4708:	2800      	cmp	r0, #0
    470a:	d004      	beq.n	4716 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x2a>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    470c:	2384      	movs	r3, #132	; 0x84
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    470e:	70bb      	strb	r3, [r7, #2]
    rsp->plen = 0;
    4710:	2300      	movs	r3, #0
    4712:	643b      	str	r3, [r7, #64]	; 0x40
    return ERR_OK;
    4714:	e03e      	b.n	4794 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
    if (!(o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL))) 
    4716:	9a03      	ldr	r2, [sp, #12]
    4718:	210f      	movs	r1, #15
    471a:	0030      	movs	r0, r6
    471c:	f003 f820 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    4720:	9002      	str	r0, [sp, #8]
    4722:	2800      	cmp	r0, #0
    4724:	d101      	bne.n	472a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3e>
        rsp->code = COAP_RSP_405_METHOD_NOT_ALLOWED;
    4726:	2385      	movs	r3, #133	; 0x85
    4728:	e7f1      	b.n	470e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    if (req->code == COAP_REQUEST_GET)
    472a:	78ad      	ldrb	r5, [r5, #2]
    472c:	2d01      	cmp	r5, #1
    472e:	d000      	beq.n	4732 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x46>
    4730:	e081      	b.n	4836 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x14a>
        uint8_t len = 0;
    4732:	466a      	mov	r2, sp
    4734:	7b12      	ldrb	r2, [r2, #12]
    4736:	ab02      	add	r3, sp, #8
        if (!coap_opt_strcmp(o, "cfg"))
    4738:	4954      	ldr	r1, [pc, #336]	; (488c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a0>)
    473a:	9802      	ldr	r0, [sp, #8]
        uint8_t len = 0;
    473c:	759a      	strb	r2, [r3, #22]
        if (!coap_opt_strcmp(o, "cfg"))
    473e:	f002 fae5 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
    4742:	9003      	str	r0, [sp, #12]
    4744:	2800      	cmp	r0, #0
    4746:	d128      	bne.n	479a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xae>
            uint8_t payloadlen = 0;
    4748:	ab02      	add	r3, sp, #8
    474a:	3516      	adds	r5, #22
    474c:	18ed      	adds	r5, r5, r3
    474e:	466b      	mov	r3, sp
    4750:	7b1b      	ldrb	r3, [r3, #12]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    4752:	0162      	lsls	r2, r4, #5
            uint8_t payloadlen = 0;
    4754:	702b      	strb	r3, [r5, #0]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    4756:	4b4e      	ldr	r3, [pc, #312]	; (4890 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    4758:	0029      	movs	r1, r5
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    475a:	189b      	adds	r3, r3, r2
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    475c:	691b      	ldr	r3, [r3, #16]
    475e:	a808      	add	r0, sp, #32
    4760:	4798      	blx	r3
            rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    4762:	2116      	movs	r1, #22
    4764:	782b      	ldrb	r3, [r5, #0]
    4766:	a802      	add	r0, sp, #8
    4768:	9400      	str	r4, [sp, #0]
    476a:	1809      	adds	r1, r1, r0
    476c:	aa08      	add	r2, sp, #32
    476e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    4770:	f7ff ff6e 	bl	4650 <_Z13build_rsp_msgP4mbufPhPcmh>
    4774:	0004      	movs	r4, r0
	uint8_t obs = false;
    4776:	9d03      	ldr	r5, [sp, #12]
        dlog(LOG_DEBUG, "crresourcehandler: GET status: %d len: %d bytes", rc, len);
    4778:	ab02      	add	r3, sp, #8
    477a:	7d9b      	ldrb	r3, [r3, #22]
    477c:	0022      	movs	r2, r4
    477e:	4945      	ldr	r1, [pc, #276]	; (4894 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a8>)
    4780:	2007      	movs	r0, #7
    4782:	f7ff fd49 	bl	4218 <_Z4dlogiPKcz>
        if (!rc)
    4786:	2c00      	cmp	r4, #0
    4788:	d14f      	bne.n	482a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x13e>
			if (obs)
    478a:	2d00      	cmp	r5, #0
    478c:	d043      	beq.n	4816 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x12a>
				rsp->code = COAP_RSP_203_VALID;
    478e:	2343      	movs	r3, #67	; 0x43
				rsp->plen = 0;
    4790:	643c      	str	r4, [r7, #64]	; 0x40
				rsp->code = COAP_RSP_203_VALID;
    4792:	70bb      	strb	r3, [r7, #2]
}
    4794:	2000      	movs	r0, #0
    4796:	b029      	add	sp, #164	; 0xa4
    4798:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (!coap_opt_strcmp(o, "sens"))
    479a:	493f      	ldr	r1, [pc, #252]	; (4898 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1ac>)
    479c:	9802      	ldr	r0, [sp, #8]
    479e:	f002 fab5 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
    47a2:	9002      	str	r0, [sp, #8]
    47a4:	2800      	cmp	r0, #0
    47a6:	d16a      	bne.n	487e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x192>
			if ((o = copt_get_next_opt_type((sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))) 
    47a8:	0002      	movs	r2, r0
    47aa:	2106      	movs	r1, #6
    47ac:	0030      	movs	r0, r6
    47ae:	f002 ffd7 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    47b2:	1e06      	subs	r6, r0, #0
    47b4:	d018      	beq.n	47e8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xfc>
				uint32_t obsval = co_uint32_n2h(o);
    47b6:	f002 fbdf 	bl	6f78 <_Z13co_uint32_n2hPK5optlv>
				switch(obsval)
    47ba:	2800      	cmp	r0, #0
    47bc:	d003      	beq.n	47c6 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xda>
    47be:	2801      	cmp	r0, #1
    47c0:	d009      	beq.n	47d6 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xea>
						rc = ERR_INVAL;
    47c2:	2404      	movs	r4, #4
    47c4:	e00e      	b.n	47e4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xf8>
						rc = coap_obs_reg_sapi(sensor_info[sensor_id].observer_id);
    47c6:	4b32      	ldr	r3, [pc, #200]	; (4890 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    47c8:	0164      	lsls	r4, r4, #5
    47ca:	191c      	adds	r4, r3, r4
    47cc:	7f60      	ldrb	r0, [r4, #29]
    47ce:	f003 f879 	bl	78c4 <_Z17coap_obs_reg_sapih>
    47d2:	0004      	movs	r4, r0
						break;
    47d4:	e7d0      	b.n	4778 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
						rc = coap_obs_dereg_sapi(sensor_info[sensor_id].observer_id);
    47d6:	4b2e      	ldr	r3, [pc, #184]	; (4890 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    47d8:	0164      	lsls	r4, r4, #5
    47da:	191c      	adds	r4, r3, r4
    47dc:	7f60      	ldrb	r0, [r4, #29]
    47de:	f003 f885 	bl	78ec <_Z19coap_obs_dereg_sapih>
    47e2:	0004      	movs	r4, r0
	uint8_t obs = false;
    47e4:	9d02      	ldr	r5, [sp, #8]
    47e6:	e7c7      	b.n	4778 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				uint8_t payloadlen = 0;
    47e8:	2517      	movs	r5, #23
    47ea:	ab02      	add	r3, sp, #8
    47ec:	18ed      	adds	r5, r5, r3
				SensorReadFuncPtr pReadSensor = sensor_info[sensor_id].read;
    47ee:	4b28      	ldr	r3, [pc, #160]	; (4890 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    47f0:	0162      	lsls	r2, r4, #5
    47f2:	189b      	adds	r3, r3, r2
				uint8_t payloadlen = 0;
    47f4:	7028      	strb	r0, [r5, #0]
				sapi_error_t rcode = (*pReadSensor)(payload, &payloadlen);
    47f6:	0029      	movs	r1, r5
    47f8:	68db      	ldr	r3, [r3, #12]
    47fa:	a808      	add	r0, sp, #32
    47fc:	4798      	blx	r3
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    47fe:	2116      	movs	r1, #22
    4800:	782b      	ldrb	r3, [r5, #0]
    4802:	a802      	add	r0, sp, #8
    4804:	9400      	str	r4, [sp, #0]
    4806:	1809      	adds	r1, r1, r0
    4808:	aa08      	add	r2, sp, #32
    480a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    480c:	f7ff ff20 	bl	4650 <_Z13build_rsp_msgP4mbufPhPcmh>
	uint8_t obs = false;
    4810:	0035      	movs	r5, r6
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    4812:	0004      	movs	r4, r0
    4814:	e7b0      	b.n	4778 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				rsp->plen = len;
    4816:	ab02      	add	r3, sp, #8
    4818:	7d9b      	ldrb	r3, [r3, #22]
				rsp->cf = COAP_CF_CSV;
    481a:	2202      	movs	r2, #2
				rsp->plen = len;
    481c:	643b      	str	r3, [r7, #64]	; 0x40
				rsp->cf = COAP_CF_CSV;
    481e:	003b      	movs	r3, r7
    4820:	333c      	adds	r3, #60	; 0x3c
    4822:	701a      	strb	r2, [r3, #0]
				rsp->code = COAP_RSP_205_CONTENT;
    4824:	2345      	movs	r3, #69	; 0x45
    4826:	70bb      	strb	r3, [r7, #2]
    4828:	e7b4      	b.n	4794 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
            switch (rc)
    482a:	2c04      	cmp	r4, #4
    482c:	d001      	beq.n	4832 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
    482e:	2c14      	cmp	r4, #20
    4830:	d129      	bne.n	4886 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x19a>
			rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    4832:	2386      	movs	r3, #134	; 0x86
    4834:	e76b      	b.n	470e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    else if (req->code == COAP_REQUEST_PUT) 
    4836:	2d03      	cmp	r5, #3
    4838:	d000      	beq.n	483c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x150>
    483a:	e774      	b.n	4726 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3a>
		len = o->ol;
    483c:	2617      	movs	r6, #23
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    483e:	4b14      	ldr	r3, [pc, #80]	; (4890 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    4840:	0164      	lsls	r4, r4, #5
    4842:	191c      	adds	r4, r3, r4
    4844:	6963      	ldr	r3, [r4, #20]
		strncpy(payload, (char*)o->ov, len);
    4846:	ac08      	add	r4, sp, #32
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    4848:	9304      	str	r3, [sp, #16]
		len = o->ol;
    484a:	9b02      	ldr	r3, [sp, #8]
		strncpy(payload, (char*)o->ov, len);
    484c:	0020      	movs	r0, r4
		len = o->ol;
    484e:	789d      	ldrb	r5, [r3, #2]
    4850:	ab02      	add	r3, sp, #8
    4852:	18f6      	adds	r6, r6, r3
		strncpy(payload, (char*)o->ov, len);
    4854:	9b02      	ldr	r3, [sp, #8]
		len = o->ol;
    4856:	7035      	strb	r5, [r6, #0]
		strncpy(payload, (char*)o->ov, len);
    4858:	6859      	ldr	r1, [r3, #4]
    485a:	002a      	movs	r2, r5
    485c:	f009 fa70 	bl	dd40 <strncpy>
		payload[len] = '\0';
    4860:	466b      	mov	r3, sp
    4862:	7b1b      	ldrb	r3, [r3, #12]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    4864:	0031      	movs	r1, r6
		payload[len] = '\0';
    4866:	5563      	strb	r3, [r4, r5]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    4868:	0020      	movs	r0, r4
    486a:	9b04      	ldr	r3, [sp, #16]
    486c:	4798      	blx	r3
		if (rcode == SAPI_ERR_OK)
    486e:	2800      	cmp	r0, #0
    4870:	d103      	bne.n	487a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x18e>
			rsp->code = COAP_RSP_204_CHANGED;
    4872:	2344      	movs	r3, #68	; 0x44
			rsp->plen = 0;
    4874:	6438      	str	r0, [r7, #64]	; 0x40
			rsp->code = COAP_RSP_204_CHANGED;
    4876:	70bb      	strb	r3, [r7, #2]
    4878:	e78c      	b.n	4794 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
		else if (rcode == SAPI_ERR_NOT_IMPLEMENTED)
    487a:	2801      	cmp	r0, #1
    487c:	d101      	bne.n	4882 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x196>
			rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    487e:	23a1      	movs	r3, #161	; 0xa1
    4880:	e745      	b.n	470e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
		else if (rcode == SAPI_ERR_BAD_DATA)
    4882:	2804      	cmp	r0, #4
    4884:	d0d5      	beq.n	4832 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    4886:	23a0      	movs	r3, #160	; 0xa0
    4888:	e741      	b.n	470e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    488a:	46c0      	nop			; (mov r8, r8)
    488c:	00010e84 	.word	0x00010e84
    4890:	20000f98 	.word	0x20000f98
    4894:	00010e8d 	.word	0x00010e8d
    4898:	00010e88 	.word	0x00010e88

0000489c <_Z6crsapiP12coap_msg_ctxS0_>:
{
    489c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    489e:	0006      	movs	r6, r0
	void *it = NULL;
    48a0:	2400      	movs	r4, #0
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    48a2:	364c      	adds	r6, #76	; 0x4c
    48a4:	aa01      	add	r2, sp, #4
{
    48a6:	0007      	movs	r7, r0
    48a8:	000d      	movs	r5, r1
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    48aa:	0030      	movs	r0, r6
    48ac:	210b      	movs	r1, #11
	void *it = NULL;
    48ae:	9401      	str	r4, [sp, #4]
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    48b0:	f002 ff56 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	if ((o = copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it)))
    48b4:	0030      	movs	r0, r6
    48b6:	aa01      	add	r2, sp, #4
    48b8:	210b      	movs	r1, #11
    48ba:	f002 ff51 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    48be:	0006      	movs	r6, r0
    48c0:	42a0      	cmp	r0, r4
    48c2:	d017      	beq.n	48f4 <_Z6crsapiP12coap_msg_ctxS0_+0x58>
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    48c4:	4b0d      	ldr	r3, [pc, #52]	; (48fc <_Z6crsapiP12coap_msg_ctxS0_+0x60>)
    48c6:	781b      	ldrb	r3, [r3, #0]
    48c8:	429c      	cmp	r4, r3
    48ca:	da11      	bge.n	48f0 <_Z6crsapiP12coap_msg_ctxS0_+0x54>
			if (!coap_opt_strcmp(o, sensor_info[indx].devicetype))
    48cc:	490c      	ldr	r1, [pc, #48]	; (4900 <_Z6crsapiP12coap_msg_ctxS0_+0x64>)
    48ce:	0163      	lsls	r3, r4, #5
    48d0:	18c9      	adds	r1, r1, r3
    48d2:	0030      	movs	r0, r6
    48d4:	f002 fa1a 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
    48d8:	2800      	cmp	r0, #0
    48da:	d106      	bne.n	48ea <_Z6crsapiP12coap_msg_ctxS0_+0x4e>
				rc = crresourcehandler(req, rsp, it, indx);
    48dc:	0023      	movs	r3, r4
    48de:	9a01      	ldr	r2, [sp, #4]
    48e0:	0029      	movs	r1, r5
    48e2:	0038      	movs	r0, r7
    48e4:	f7ff ff02 	bl	46ec <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>
}
    48e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    48ea:	3401      	adds	r4, #1
    48ec:	b2e4      	uxtb	r4, r4
    48ee:	e7e9      	b.n	48c4 <_Z6crsapiP12coap_msg_ctxS0_+0x28>
		rsp->code = COAP_RSP_404_NOT_FOUND;
    48f0:	2384      	movs	r3, #132	; 0x84
    48f2:	70ab      	strb	r3, [r5, #2]
	rsp->plen = 0;
    48f4:	2000      	movs	r0, #0
    48f6:	6428      	str	r0, [r5, #64]	; 0x40
	return ERR_OK;
    48f8:	e7f6      	b.n	48e8 <_Z6crsapiP12coap_msg_ctxS0_+0x4c>
    48fa:	46c0      	nop			; (mov r8, r8)
    48fc:	20000e8a 	.word	0x20000e8a
    4900:	20000f98 	.word	0x20000f98

00004904 <_Z24sapi_observation_handlerP4mbufPhh>:
{
    4904:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t payloadlen = 0;
    4906:	250f      	movs	r5, #15
{
    4908:	b0a7      	sub	sp, #156	; 0x9c
	uint8_t payloadlen = 0;
    490a:	ab02      	add	r3, sp, #8
    490c:	18ed      	adds	r5, r5, r3
    490e:	2300      	movs	r3, #0
{
    4910:	000f      	movs	r7, r1
    4912:	0016      	movs	r6, r2
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4914:	4c0b      	ldr	r4, [pc, #44]	; (4944 <_Z24sapi_observation_handlerP4mbufPhh+0x40>)
	uint8_t payloadlen = 0;
    4916:	702b      	strb	r3, [r5, #0]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4918:	0153      	lsls	r3, r2, #5
    491a:	18e4      	adds	r4, r4, r3
    491c:	0022      	movs	r2, r4
{
    491e:	9003      	str	r0, [sp, #12]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4920:	4909      	ldr	r1, [pc, #36]	; (4948 <_Z24sapi_observation_handlerP4mbufPhh+0x44>)
    4922:	2007      	movs	r0, #7
    4924:	f7ff fc78 	bl	4218 <_Z4dlogiPKcz>
	sapi_error_t rcode = (*pReadFunc)(payload, &payloadlen);
    4928:	68e3      	ldr	r3, [r4, #12]
    492a:	0029      	movs	r1, r5
    492c:	a806      	add	r0, sp, #24
    492e:	4798      	blx	r3
	error_t rc = build_rsp_msg(m, len, payload, payloadlen, sensor_id);
    4930:	782b      	ldrb	r3, [r5, #0]
    4932:	aa06      	add	r2, sp, #24
    4934:	9600      	str	r6, [sp, #0]
    4936:	0039      	movs	r1, r7
    4938:	9803      	ldr	r0, [sp, #12]
    493a:	f7ff fe89 	bl	4650 <_Z13build_rsp_msgP4mbufPhPcmh>
}
    493e:	b027      	add	sp, #156	; 0x9c
    4940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	20000f98 	.word	0x20000f98
    4948:	00010ee7 	.word	0x00010ee7

0000494c <_Z9crarduinoP12coap_msg_ctxS0_>:
//
//////////////////////////////////////////////////////////////////////////
error_t crarduino( struct coap_msg_ctx *req, struct coap_msg_ctx *rsp )
{
	// Dummy. Should not be called!
	rsp->code = COAP_RSP_404_NOT_FOUND;
    494c:	2384      	movs	r3, #132	; 0x84
    494e:	708b      	strb	r3, [r1, #2]
	rsp->plen = 0;
    4950:	2300      	movs	r3, #0
	return ERR_FAIL;
}
    4952:	2063      	movs	r0, #99	; 0x63
	rsp->plen = 0;
    4954:	640b      	str	r3, [r1, #64]	; 0x40
}
    4956:	4770      	bx	lr

00004958 <_Z15sapi_log_bannerv>:
//
// Helper function to print a banner in the log.
//
//////////////////////////////////////////////////////////////////////////
void sapi_log_banner()
{
    4958:	b500      	push	{lr}
    495a:	b091      	sub	sp, #68	; 0x44
	// Log Banner: version number, time and date
	char ver[64];
	strcpy(ver, COAP_SERVER_VERSION_STRING);
    495c:	4915      	ldr	r1, [pc, #84]	; (49b4 <_Z15sapi_log_bannerv+0x5c>)
    495e:	4668      	mov	r0, sp
    4960:	f009 f9b9 	bl	dcd6 <strcpy>
	strcat(ver, COAP_SERVER_VERSION_NUMBER);
    4964:	4914      	ldr	r1, [pc, #80]	; (49b8 <_Z15sapi_log_bannerv+0x60>)
    4966:	4668      	mov	r0, sp
    4968:	f009 f99e 	bl	dca8 <strcat>
	println(ver);
    496c:	4668      	mov	r0, sp
    496e:	f7ff fd11 	bl	4394 <_Z7printlnPKc>
	
	strcpy(ver, SAPI_VERSION_STRING);
    4972:	4912      	ldr	r1, [pc, #72]	; (49bc <_Z15sapi_log_bannerv+0x64>)
    4974:	4668      	mov	r0, sp
    4976:	f009 f9ae 	bl	dcd6 <strcpy>
	strcat(ver, SAPI_VERSION_NUMBER);
    497a:	4911      	ldr	r1, [pc, #68]	; (49c0 <_Z15sapi_log_bannerv+0x68>)
    497c:	4668      	mov	r0, sp
    497e:	f009 f993 	bl	dca8 <strcat>
	println(ver);
    4982:	4668      	mov	r0, sp
    4984:	f7ff fd06 	bl	4394 <_Z7printlnPKc>
	
	sprintf(ver, "Build Time: %s  Date: %s", __TIME__, __DATE__);
    4988:	4b0e      	ldr	r3, [pc, #56]	; (49c4 <_Z15sapi_log_bannerv+0x6c>)
    498a:	4a0f      	ldr	r2, [pc, #60]	; (49c8 <_Z15sapi_log_bannerv+0x70>)
    498c:	490f      	ldr	r1, [pc, #60]	; (49cc <_Z15sapi_log_bannerv+0x74>)
    498e:	4668      	mov	r0, sp
    4990:	f009 f968 	bl	dc64 <siprintf>
	println(ver);
    4994:	4668      	mov	r0, sp
    4996:	f7ff fcfd 	bl	4394 <_Z7printlnPKc>
	println("");
    499a:	480d      	ldr	r0, [pc, #52]	; (49d0 <_Z15sapi_log_bannerv+0x78>)
    499c:	f7ff fcfa 	bl	4394 <_Z7printlnPKc>
	
	// Log free memory
	int freeram = free_ram();
    49a0:	f7ff fd6c 	bl	447c <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    49a4:	490b      	ldr	r1, [pc, #44]	; (49d4 <_Z15sapi_log_bannerv+0x7c>)
	int freeram = free_ram();
    49a6:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    49a8:	2007      	movs	r0, #7
    49aa:	f7ff fc35 	bl	4218 <_Z4dlogiPKcz>
}
    49ae:	b011      	add	sp, #68	; 0x44
    49b0:	bd00      	pop	{pc}
    49b2:	46c0      	nop			; (mov r8, r8)
    49b4:	00010e1f 	.word	0x00010e1f
    49b8:	00010e3d 	.word	0x00010e3d
    49bc:	00010e43 	.word	0x00010e43
    49c0:	00010e50 	.word	0x00010e50
    49c4:	00010e56 	.word	0x00010e56
    49c8:	00010e62 	.word	0x00010e62
    49cc:	00010e6b 	.word	0x00010e6b
    49d0:	0001110a 	.word	0x0001110a
    49d4:	0001166b 	.word	0x0001166b

000049d8 <_Z15sapi_initializePc>:
{
    49d8:	b507      	push	{r0, r1, r2, lr}
	is_sapi = 1;
    49da:	2201      	movs	r2, #1
    49dc:	4b19      	ldr	r3, [pc, #100]	; (4a44 <_Z15sapi_initializePc+0x6c>)
{
    49de:	0001      	movs	r1, r0
	is_sapi = 1;
    49e0:	701a      	strb	r2, [r3, #0]
	sensor_info_index = 0;
    49e2:	2200      	movs	r2, #0
    49e4:	4b18      	ldr	r3, [pc, #96]	; (4a48 <_Z15sapi_initializePc+0x70>)
    49e6:	4819      	ldr	r0, [pc, #100]	; (4a4c <_Z15sapi_initializePc+0x74>)
    49e8:	701a      	strb	r2, [r3, #0]
	if (url_classifier == NULL)
    49ea:	4291      	cmp	r1, r2
    49ec:	d128      	bne.n	4a40 <_Z15sapi_initializePc+0x68>
		strncpy(classifier, DEFAULT_CLASSIFIER, CLASSIFIER_MAX_LEN);
    49ee:	4918      	ldr	r1, [pc, #96]	; (4a50 <_Z15sapi_initializePc+0x78>)
    49f0:	3210      	adds	r2, #16
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    49f2:	f009 f9a5 	bl	dd40 <strncpy>
	rtc_time_init(LOCAL_TIME_ZONE);
    49f6:	2008      	movs	r0, #8
    49f8:	4240      	negs	r0, r0
    49fa:	f7ff fb5d 	bl	40b8 <_Z13rtc_time_initl>
	log_init(SER_MON_PTR, SER_MON_BAUD_RATE, LOG_LEVEL);
    49fe:	21e1      	movs	r1, #225	; 0xe1
    4a00:	2207      	movs	r2, #7
    4a02:	0249      	lsls	r1, r1, #9
    4a04:	4813      	ldr	r0, [pc, #76]	; (4a54 <_Z15sapi_initializePc+0x7c>)
    4a06:	f7ff fbe5 	bl	41d4 <_Z8log_initP7Serial_mm>
	pinMode(MNIC_WAKEUP_PIN, OUTPUT);
    4a0a:	2101      	movs	r1, #1
    4a0c:	2009      	movs	r0, #9
    4a0e:	f7ff f85b 	bl	3ac8 <pinMode>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    4a12:	2101      	movs	r1, #1
    4a14:	2009      	movs	r0, #9
    4a16:	f7ff f85b 	bl	3ad0 <digitalWrite>
	coap_s_init(UART_PTR, COAP_MSG_MAX_AGE_IN_SECS, HDLC_UART_TIMEOUT_IN_MS, HDLC_MAX_PAYLOAD_LEN, "", NULL);
    4a1a:	2300      	movs	r3, #0
    4a1c:	22fa      	movs	r2, #250	; 0xfa
    4a1e:	9301      	str	r3, [sp, #4]
    4a20:	4b0d      	ldr	r3, [pc, #52]	; (4a58 <_Z15sapi_initializePc+0x80>)
    4a22:	00d2      	lsls	r2, r2, #3
    4a24:	215a      	movs	r1, #90	; 0x5a
    4a26:	9300      	str	r3, [sp, #0]
    4a28:	480c      	ldr	r0, [pc, #48]	; (4a5c <_Z15sapi_initializePc+0x84>)
    4a2a:	23ff      	movs	r3, #255	; 0xff
    4a2c:	f003 fb5a 	bl	80e4 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>
	coap_put_ic_reboot_event();
    4a30:	f003 fb26 	bl	8080 <_Z24coap_put_ic_reboot_eventv>
	delay(50);
    4a34:	2032      	movs	r0, #50	; 0x32
    4a36:	f7fd fe4b 	bl	26d0 <delay>
	sapi_log_banner();
    4a3a:	f7ff ff8d 	bl	4958 <_Z15sapi_log_bannerv>
}
    4a3e:	bd07      	pop	{r0, r1, r2, pc}
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    4a40:	2210      	movs	r2, #16
    4a42:	e7d6      	b.n	49f2 <_Z15sapi_initializePc+0x1a>
    4a44:	2000004a 	.word	0x2000004a
    4a48:	20000e8a 	.word	0x20000e8a
    4a4c:	200000a0 	.word	0x200000a0
    4a50:	00010e17 	.word	0x00010e17
    4a54:	20001264 	.word	0x20001264
    4a58:	0001110a 	.word	0x0001110a
    4a5c:	200010d4 	.word	0x200010d4

00004a60 <_GLOBAL__sub_I_flash>:
}
    4a60:	b510      	push	{r4, lr}
SPIFlash flash;
    4a62:	4a03      	ldr	r2, [pc, #12]	; (4a70 <_GLOBAL__sub_I_flash+0x10>)
    4a64:	210a      	movs	r1, #10
    4a66:	4803      	ldr	r0, [pc, #12]	; (4a74 <_GLOBAL__sub_I_flash+0x14>)
    4a68:	f001 fac0 	bl	5fec <_ZN8SPIFlashC1EhP8SPIClass>
}
    4a6c:	bd10      	pop	{r4, pc}
    4a6e:	46c0      	nop			; (mov r8, r8)
    4a70:	2000129c 	.word	0x2000129c
    4a74:	20000e8c 	.word	0x20000e8c

00004a78 <_Z13readSerialStrv>:
String readSerialStr() {
    4a78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4a7a:	0005      	movs	r5, r0
	String str = "";
    4a7c:	4916      	ldr	r1, [pc, #88]	; (4ad8 <_Z13readSerialStrv+0x60>)
    4a7e:	a801      	add	r0, sp, #4
    4a80:	f000 fe70 	bl	5764 <_ZN6StringC1EPKc>
	inChar = Serial.read();
    4a84:	4e15      	ldr	r6, [pc, #84]	; (4adc <_Z13readSerialStrv+0x64>)
    4a86:	0030      	movs	r0, r6
    4a88:	f000 fd38 	bl	54fc <_ZN7Serial_4readEv>
    4a8c:	b2c4      	uxtb	r4, r0
	while (inChar != '.') {
    4a8e:	2c2e      	cmp	r4, #46	; 0x2e
    4a90:	d015      	beq.n	4abe <_Z13readSerialStrv+0x46>
		if (inChar != 255)
    4a92:	2cff      	cmp	r4, #255	; 0xff
    4a94:	d0f7      	beq.n	4a86 <_Z13readSerialStrv+0xe>
	String & operator += (char c)			{concat(c); return (*this);}
    4a96:	0021      	movs	r1, r4
    4a98:	a801      	add	r0, sp, #4
    4a9a:	f000 fec4 	bl	5826 <_ZN6String6concatEc>
		if (inChar == '$')
    4a9e:	2c24      	cmp	r4, #36	; 0x24
    4aa0:	d109      	bne.n	4ab6 <_Z13readSerialStrv+0x3e>
		return "$";
    4aa2:	490f      	ldr	r1, [pc, #60]	; (4ae0 <_Z13readSerialStrv+0x68>)
		return "#";
    4aa4:	0028      	movs	r0, r5
    4aa6:	f000 fe5d 	bl	5764 <_ZN6StringC1EPKc>
	String str = "";
    4aaa:	a801      	add	r0, sp, #4
    4aac:	f000 fe12 	bl	56d4 <_ZN6StringD1Ev>
}
    4ab0:	0028      	movs	r0, r5
    4ab2:	b004      	add	sp, #16
    4ab4:	bd70      	pop	{r4, r5, r6, pc}
		if (inChar == '#')
    4ab6:	2c23      	cmp	r4, #35	; 0x23
    4ab8:	d1e5      	bne.n	4a86 <_Z13readSerialStrv+0xe>
		return "#";
    4aba:	490a      	ldr	r1, [pc, #40]	; (4ae4 <_Z13readSerialStrv+0x6c>)
    4abc:	e7f2      	b.n	4aa4 <_Z13readSerialStrv+0x2c>
    4abe:	0021      	movs	r1, r4
    4ac0:	a801      	add	r0, sp, #4
    4ac2:	f000 feb0 	bl	5826 <_ZN6String6concatEc>
    4ac6:	2100      	movs	r1, #0
    4ac8:	a801      	add	r0, sp, #4
    4aca:	f000 feac 	bl	5826 <_ZN6String6concatEc>
	return str;
    4ace:	a901      	add	r1, sp, #4
    4ad0:	0028      	movs	r0, r5
    4ad2:	f000 fdf1 	bl	56b8 <_ZN6StringC1EOS_>
    4ad6:	e7e8      	b.n	4aaa <_Z13readSerialStrv+0x32>
    4ad8:	0001110a 	.word	0x0001110a
    4adc:	20001264 	.word	0x20001264
    4ae0:	00010e13 	.word	0x00010e13
    4ae4:	00010e15 	.word	0x00010e15

00004ae8 <_Z6GoHerev>:
void GoHere(){
    4ae8:	b510      	push	{r4, lr}
    4aea:	b086      	sub	sp, #24
	String str = readSerialStr();
    4aec:	4668      	mov	r0, sp
    4aee:	f7ff ffc3 	bl	4a78 <_Z13readSerialStrv>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    4af2:	491a      	ldr	r1, [pc, #104]	; (4b5c <_Z6GoHerev+0x74>)
    4af4:	4668      	mov	r0, sp
    4af6:	f000 fea0 	bl	583a <_ZNK6String6equalsEPKc>
    4afa:	4c19      	ldr	r4, [pc, #100]	; (4b60 <_Z6GoHerev+0x78>)
	if (str == "$")
    4afc:	2800      	cmp	r0, #0
    4afe:	d00f      	beq.n	4b20 <_Z6GoHerev+0x38>
	Serial.println(getString(addr));
    4b00:	2101      	movs	r1, #1
    4b02:	a803      	add	r0, sp, #12
    4b04:	f7ff fccc 	bl	44a0 <_Z9getStringi>
	Serial.println(getID());
    4b08:	a903      	add	r1, sp, #12
    4b0a:	0020      	movs	r0, r4
    4b0c:	f000 f942 	bl	4d94 <_ZN5Print7printlnERK6String>
    4b10:	a803      	add	r0, sp, #12
    4b12:	f000 fddf 	bl	56d4 <_ZN6StringD1Ev>
	String str = readSerialStr();
    4b16:	4668      	mov	r0, sp
    4b18:	f000 fddc 	bl	56d4 <_ZN6StringD1Ev>
}
    4b1c:	b006      	add	sp, #24
    4b1e:	bd10      	pop	{r4, pc}
    4b20:	4910      	ldr	r1, [pc, #64]	; (4b64 <_Z6GoHerev+0x7c>)
    4b22:	4668      	mov	r0, sp
    4b24:	f000 fe89 	bl	583a <_ZNK6String6equalsEPKc>
	else if (str == "#")
    4b28:	2800      	cmp	r0, #0
    4b2a:	d003      	beq.n	4b34 <_Z6GoHerev+0x4c>
	Serial.println(getID());
    4b2c:	a803      	add	r0, sp, #12
    4b2e:	f7ff fceb 	bl	4508 <_Z5getIDv>
    4b32:	e7e9      	b.n	4b08 <_Z6GoHerev+0x20>
		eraseBlock();
    4b34:	f7ff fcac 	bl	4490 <_Z10eraseBlockv>
		if (flash.writeStr(addr, str)) {
    4b38:	2301      	movs	r3, #1
    4b3a:	466a      	mov	r2, sp
    4b3c:	0019      	movs	r1, r3
    4b3e:	480a      	ldr	r0, [pc, #40]	; (4b68 <_Z6GoHerev+0x80>)
    4b40:	f001 fafa 	bl	6138 <_ZN8SPIFlash8writeStrEmR6Stringb>
    4b44:	2800      	cmp	r0, #0
    4b46:	d004      	beq.n	4b52 <_Z6GoHerev+0x6a>
			Serial.println("complete");
    4b48:	4908      	ldr	r1, [pc, #32]	; (4b6c <_Z6GoHerev+0x84>)
    4b4a:	0020      	movs	r0, r4
    4b4c:	f000 f92c 	bl	4da8 <_ZN5Print7printlnEPKc>
    4b50:	e7e1      	b.n	4b16 <_Z6GoHerev+0x2e>
			Serial.print("failed");
    4b52:	4907      	ldr	r1, [pc, #28]	; (4b70 <_Z6GoHerev+0x88>)
    4b54:	0020      	movs	r0, r4
    4b56:	f000 f902 	bl	4d5e <_ZN5Print5printEPKc>
    4b5a:	e7dc      	b.n	4b16 <_Z6GoHerev+0x2e>
    4b5c:	00010e13 	.word	0x00010e13
    4b60:	20001264 	.word	0x20001264
    4b64:	00010e15 	.word	0x00010e15
    4b68:	20000e8c 	.word	0x20000e8c
    4b6c:	00010f03 	.word	0x00010f03
    4b70:	00010f0c 	.word	0x00010f0c

00004b74 <_Z8sapi_runv>:
{
    4b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(initBoot){ 
    4b76:	4b21      	ldr	r3, [pc, #132]	; (4bfc <_Z8sapi_runv+0x88>)
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	d03b      	beq.n	4bf6 <_Z8sapi_runv+0x82>
		if(init1){
    4b7e:	4c20      	ldr	r4, [pc, #128]	; (4c00 <_Z8sapi_runv+0x8c>)
    4b80:	7823      	ldrb	r3, [r4, #0]
    4b82:	2b00      	cmp	r3, #0
    4b84:	d009      	beq.n	4b9a <_Z8sapi_runv+0x26>
		Serial.println("Enter any key to go to BootProgram before it counts to 10"); 
    4b86:	491f      	ldr	r1, [pc, #124]	; (4c04 <_Z8sapi_runv+0x90>)
    4b88:	481f      	ldr	r0, [pc, #124]	; (4c08 <_Z8sapi_runv+0x94>)
    4b8a:	f000 f90d 	bl	4da8 <_ZN5Print7printlnEPKc>
		flash.begin(); 
    4b8e:	2100      	movs	r1, #0
    4b90:	481e      	ldr	r0, [pc, #120]	; (4c0c <_Z8sapi_runv+0x98>)
    4b92:	f001 fa7d 	bl	6090 <_ZN8SPIFlash5beginEm>
		init1 = false;
    4b96:	2300      	movs	r3, #0
    4b98:	7023      	strb	r3, [r4, #0]
		if (!init2){
    4b9a:	4e1d      	ldr	r6, [pc, #116]	; (4c10 <_Z8sapi_runv+0x9c>)
    4b9c:	7833      	ldrb	r3, [r6, #0]
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d126      	bne.n	4bf0 <_Z8sapi_runv+0x7c>
			for (l = 1; l < 11; l++){
    4ba2:	4c1c      	ldr	r4, [pc, #112]	; (4c14 <_Z8sapi_runv+0xa0>)
    4ba4:	3301      	adds	r3, #1
    4ba6:	6023      	str	r3, [r4, #0]
    4ba8:	6823      	ldr	r3, [r4, #0]
    4baa:	2b0a      	cmp	r3, #10
    4bac:	dc10      	bgt.n	4bd0 <_Z8sapi_runv+0x5c>
				if(Serial.available()){
    4bae:	4d16      	ldr	r5, [pc, #88]	; (4c08 <_Z8sapi_runv+0x94>)
    4bb0:	0028      	movs	r0, r5
    4bb2:	f000 fc7b 	bl	54ac <_ZN7Serial_9availableEv>
    4bb6:	1e07      	subs	r7, r0, #0
    4bb8:	d00b      	beq.n	4bd2 <_Z8sapi_runv+0x5e>
					input = Serial.read();
    4bba:	0028      	movs	r0, r5
    4bbc:	f000 fc9e 	bl	54fc <_ZN7Serial_4readEv>
    4bc0:	4b15      	ldr	r3, [pc, #84]	; (4c18 <_Z8sapi_runv+0xa4>)
    4bc2:	b2c1      	uxtb	r1, r0
					Serial.println(input);
    4bc4:	0028      	movs	r0, r5
					input = Serial.read();
    4bc6:	7019      	strb	r1, [r3, #0]
					Serial.println(input);
    4bc8:	f000 f8f8 	bl	4dbc <_ZN5Print7printlnEc>
					init2 = true;
    4bcc:	2301      	movs	r3, #1
    4bce:	7033      	strb	r3, [r6, #0]
}
    4bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Serial.print(l);
    4bd2:	220a      	movs	r2, #10
    4bd4:	6821      	ldr	r1, [r4, #0]
    4bd6:	0028      	movs	r0, r5
    4bd8:	f000 f945 	bl	4e66 <_ZN5Print5printEii>
				delay(1000);
    4bdc:	20fa      	movs	r0, #250	; 0xfa
    4bde:	0080      	lsls	r0, r0, #2
    4be0:	f7fd fd76 	bl	26d0 <delay>
				if(l == 10){
    4be4:	6823      	ldr	r3, [r4, #0]
    4be6:	2b0a      	cmp	r3, #10
    4be8:	d1dc      	bne.n	4ba4 <_Z8sapi_runv+0x30>
					initBoot = false;
    4bea:	4b04      	ldr	r3, [pc, #16]	; (4bfc <_Z8sapi_runv+0x88>)
    4bec:	701f      	strb	r7, [r3, #0]
					break;
    4bee:	e7ef      	b.n	4bd0 <_Z8sapi_runv+0x5c>
		GoHere();
    4bf0:	f7ff ff7a 	bl	4ae8 <_Z6GoHerev>
    4bf4:	e7ec      	b.n	4bd0 <_Z8sapi_runv+0x5c>
	coap_s_run();
    4bf6:	f003 fb79 	bl	82ec <_Z10coap_s_runv>
}
    4bfa:	e7e9      	b.n	4bd0 <_Z8sapi_runv+0x5c>
    4bfc:	20000049 	.word	0x20000049
    4c00:	20000048 	.word	0x20000048
    4c04:	00010f13 	.word	0x00010f13
    4c08:	20001264 	.word	0x20001264
    4c0c:	20000e8c 	.word	0x20000e8c
    4c10:	20000f90 	.word	0x20000f90
    4c14:	20000f94 	.word	0x20000f94
    4c18:	20000f91 	.word	0x20000f91

00004c1c <SERCOM4_Handler>:

    void SERCOM4_3_Handler(void) {
      Serial1.errorHandler();
    }
  #else
    void SERCOM4_Handler()  {
    4c1c:	b510      	push	{r4, lr}
      Serial1.IrqHandler();
    4c1e:	4802      	ldr	r0, [pc, #8]	; (4c28 <SERCOM4_Handler+0xc>)
    4c20:	f000 fb16 	bl	5250 <_ZN4Uart10IrqHandlerEv>
    }
    4c24:	bd10      	pop	{r4, pc}
    4c26:	46c0      	nop			; (mov r8, r8)
    4c28:	20001018 	.word	0x20001018

00004c2c <SERCOM0_Handler>:

    void SERCOM2_3_Handler(void) {
      Serial2.errorHandler();
    }
  #else
    void SERCOM0_Handler()  {
    4c2c:	b510      	push	{r4, lr}
      Serial2.IrqHandler();
    4c2e:	4802      	ldr	r0, [pc, #8]	; (4c38 <SERCOM0_Handler+0xc>)
    4c30:	f000 fb0e 	bl	5250 <_ZN4Uart10IrqHandlerEv>
    }
    4c34:	bd10      	pop	{r4, pc}
    4c36:	46c0      	nop			; (mov r8, r8)
    4c38:	200010d4 	.word	0x200010d4

00004c3c <SERCOM3_Handler>:

    void SERCOM3_3_Handler(void) {
      Serial3.errorHandler();
    }
  #else
    void SERCOM3_Handler()  {
    4c3c:	b510      	push	{r4, lr}
      Serial3.IrqHandler();
    4c3e:	4802      	ldr	r0, [pc, #8]	; (4c48 <SERCOM3_Handler+0xc>)
    4c40:	f000 fb06 	bl	5250 <_ZN4Uart10IrqHandlerEv>
    }
    4c44:	bd10      	pop	{r4, pc}
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	20001190 	.word	0x20001190

00004c4c <_GLOBAL__sub_I_g_APinDescription>:
    4c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
SERCOM sercom0( SERCOM0 ) ;
    4c4e:	2184      	movs	r1, #132	; 0x84
    4c50:	4f1a      	ldr	r7, [pc, #104]	; (4cbc <_GLOBAL__sub_I_g_APinDescription+0x70>)
    4c52:	05c9      	lsls	r1, r1, #23
    4c54:	0038      	movs	r0, r7
    4c56:	f000 f90a 	bl	4e6e <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    4c5a:	4919      	ldr	r1, [pc, #100]	; (4cc0 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    4c5c:	4819      	ldr	r0, [pc, #100]	; (4cc4 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    4c5e:	f000 f906 	bl	4e6e <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    4c62:	4919      	ldr	r1, [pc, #100]	; (4cc8 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    4c64:	4819      	ldr	r0, [pc, #100]	; (4ccc <_GLOBAL__sub_I_g_APinDescription+0x80>)
    4c66:	f000 f902 	bl	4e6e <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    4c6a:	4d19      	ldr	r5, [pc, #100]	; (4cd0 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    4c6c:	4919      	ldr	r1, [pc, #100]	; (4cd4 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    4c6e:	0028      	movs	r0, r5
    4c70:	f000 f8fd 	bl	4e6e <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    4c74:	4e18      	ldr	r6, [pc, #96]	; (4cd8 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    4c76:	4919      	ldr	r1, [pc, #100]	; (4cdc <_GLOBAL__sub_I_g_APinDescription+0x90>)
    4c78:	0030      	movs	r0, r6
    4c7a:	f000 f8f8 	bl	4e6e <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    4c7e:	4918      	ldr	r1, [pc, #96]	; (4ce0 <_GLOBAL__sub_I_g_APinDescription+0x94>)
    4c80:	4818      	ldr	r0, [pc, #96]	; (4ce4 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    4c82:	f000 f8f4 	bl	4e6e <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    4c86:	2401      	movs	r4, #1
    4c88:	2300      	movs	r3, #0
    4c8a:	0031      	movs	r1, r6
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    4c8c:	2603      	movs	r6, #3
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    4c8e:	9301      	str	r3, [sp, #4]
    4c90:	0022      	movs	r2, r4
    4c92:	9400      	str	r4, [sp, #0]
    4c94:	4814      	ldr	r0, [pc, #80]	; (4ce8 <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    4c96:	f000 faad 	bl	51f4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    4c9a:	0039      	movs	r1, r7
    4c9c:	9600      	str	r6, [sp, #0]
    4c9e:	9401      	str	r4, [sp, #4]
    4ca0:	230a      	movs	r3, #10
    4ca2:	220b      	movs	r2, #11
    4ca4:	4811      	ldr	r0, [pc, #68]	; (4cec <_GLOBAL__sub_I_g_APinDescription+0xa0>)
    4ca6:	f000 faa5 	bl	51f4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial3( SERCOM_INSTANCE_SERIAL3, PIN_SERIAL3_RX, PIN_SERIAL3_TX, PAD_SERIAL3_RX, PAD_SERIAL3_TX ) ;
    4caa:	9600      	str	r6, [sp, #0]
    4cac:	0029      	movs	r1, r5
    4cae:	9401      	str	r4, [sp, #4]
    4cb0:	2312      	movs	r3, #18
    4cb2:	2213      	movs	r2, #19
    4cb4:	480e      	ldr	r0, [pc, #56]	; (4cf0 <_GLOBAL__sub_I_g_APinDescription+0xa4>)
    4cb6:	f000 fa9d 	bl	51f4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    }
    4cba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4cbc:	2000124c 	.word	0x2000124c
    4cc0:	42000400 	.word	0x42000400
    4cc4:	20001250 	.word	0x20001250
    4cc8:	42000800 	.word	0x42000800
    4ccc:	20001254 	.word	0x20001254
    4cd0:	20001258 	.word	0x20001258
    4cd4:	42000c00 	.word	0x42000c00
    4cd8:	2000125c 	.word	0x2000125c
    4cdc:	42001000 	.word	0x42001000
    4ce0:	43000400 	.word	0x43000400
    4ce4:	20001260 	.word	0x20001260
    4ce8:	20001018 	.word	0x20001018
    4cec:	200010d4 	.word	0x200010d4
    4cf0:	20001190 	.word	0x20001190

00004cf4 <_Znwj>:
    4cf4:	b510      	push	{r4, lr}
    4cf6:	f007 fe8f 	bl	ca18 <malloc>
    4cfa:	bd10      	pop	{r4, pc}

00004cfc <_ZdlPv>:
    4cfc:	b510      	push	{r4, lr}
    4cfe:	f007 fe95 	bl	ca2c <free>
    4d02:	bd10      	pop	{r4, pc}

00004d04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d06:	0006      	movs	r6, r0
    4d08:	000d      	movs	r5, r1
    4d0a:	000c      	movs	r4, r1
    4d0c:	188b      	adds	r3, r1, r2
    4d0e:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    4d10:	9b01      	ldr	r3, [sp, #4]
    4d12:	1b67      	subs	r7, r4, r5
    4d14:	429c      	cmp	r4, r3
    4d16:	d007      	beq.n	4d28 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    4d18:	6833      	ldr	r3, [r6, #0]
    4d1a:	7821      	ldrb	r1, [r4, #0]
    4d1c:	681b      	ldr	r3, [r3, #0]
    4d1e:	0030      	movs	r0, r6
    4d20:	4798      	blx	r3
    4d22:	3401      	adds	r4, #1
    4d24:	2800      	cmp	r0, #0
    4d26:	d1f3      	bne.n	4d10 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    4d28:	0038      	movs	r0, r7
    4d2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004d2c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    4d2c:	b570      	push	{r4, r5, r6, lr}
    4d2e:	0005      	movs	r5, r0
    4d30:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    4d32:	1e08      	subs	r0, r1, #0
    4d34:	d007      	beq.n	4d46 <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    4d36:	f008 ffd6 	bl	dce6 <strlen>
    4d3a:	682b      	ldr	r3, [r5, #0]
    4d3c:	0002      	movs	r2, r0
    4d3e:	685b      	ldr	r3, [r3, #4]
    4d40:	0021      	movs	r1, r4
    4d42:	0028      	movs	r0, r5
    4d44:	4798      	blx	r3
    }
    4d46:	bd70      	pop	{r4, r5, r6, pc}

00004d48 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    4d48:	b510      	push	{r4, lr}
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4d4a:	f7ff ffef 	bl	4d2c <_ZN5Print5writeEPKc>
}
    4d4e:	bd10      	pop	{r4, pc}

00004d50 <_ZN5Print5printERK6String>:
{
    4d50:	b510      	push	{r4, lr}
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    4d52:	6803      	ldr	r3, [r0, #0]
    4d54:	688a      	ldr	r2, [r1, #8]
    4d56:	685b      	ldr	r3, [r3, #4]
    4d58:	6809      	ldr	r1, [r1, #0]
    4d5a:	4798      	blx	r3
}
    4d5c:	bd10      	pop	{r4, pc}

00004d5e <_ZN5Print5printEPKc>:
{
    4d5e:	b510      	push	{r4, lr}
  return write(str);
    4d60:	f7ff ffe4 	bl	4d2c <_ZN5Print5writeEPKc>
}
    4d64:	bd10      	pop	{r4, pc}

00004d66 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    4d66:	b510      	push	{r4, lr}
  return write(c);
    4d68:	6803      	ldr	r3, [r0, #0]
    4d6a:	681b      	ldr	r3, [r3, #0]
    4d6c:	4798      	blx	r3
}
    4d6e:	bd10      	pop	{r4, pc}

00004d70 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    4d70:	b510      	push	{r4, lr}
  return write("\r\n");
    4d72:	4902      	ldr	r1, [pc, #8]	; (4d7c <_ZN5Print7printlnEv+0xc>)
    4d74:	f7ff ffda 	bl	4d2c <_ZN5Print5writeEPKc>
}
    4d78:	bd10      	pop	{r4, pc}
    4d7a:	46c0      	nop			; (mov r8, r8)
    4d7c:	00011108 	.word	0x00011108

00004d80 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
    4d80:	b570      	push	{r4, r5, r6, lr}
    4d82:	0004      	movs	r4, r0
  return write(str);
    4d84:	f7ff ffd2 	bl	4d2c <_ZN5Print5writeEPKc>
    4d88:	0005      	movs	r5, r0
  n += println();
    4d8a:	0020      	movs	r0, r4
    4d8c:	f7ff fff0 	bl	4d70 <_ZN5Print7printlnEv>
    4d90:	1940      	adds	r0, r0, r5
}
    4d92:	bd70      	pop	{r4, r5, r6, pc}

00004d94 <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
    4d94:	b570      	push	{r4, r5, r6, lr}
    4d96:	0005      	movs	r5, r0
  size_t n = print(s);
    4d98:	f7ff ffda 	bl	4d50 <_ZN5Print5printERK6String>
    4d9c:	0004      	movs	r4, r0
  n += println();
    4d9e:	0028      	movs	r0, r5
    4da0:	f7ff ffe6 	bl	4d70 <_ZN5Print7printlnEv>
    4da4:	1820      	adds	r0, r4, r0
  return n;
}
    4da6:	bd70      	pop	{r4, r5, r6, pc}

00004da8 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    4da8:	b570      	push	{r4, r5, r6, lr}
    4daa:	0004      	movs	r4, r0
  return write(str);
    4dac:	f7ff ffbe 	bl	4d2c <_ZN5Print5writeEPKc>
    4db0:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    4db2:	0020      	movs	r0, r4
    4db4:	f7ff ffdc 	bl	4d70 <_ZN5Print7printlnEv>
    4db8:	1940      	adds	r0, r0, r5
  return n;
}
    4dba:	bd70      	pop	{r4, r5, r6, pc}

00004dbc <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    4dbc:	b570      	push	{r4, r5, r6, lr}
    4dbe:	0005      	movs	r5, r0
  size_t n = print(c);
    4dc0:	f7ff ffd1 	bl	4d66 <_ZN5Print5printEc>
    4dc4:	0004      	movs	r4, r0
  n += println();
    4dc6:	0028      	movs	r0, r5
    4dc8:	f7ff ffd2 	bl	4d70 <_ZN5Print7printlnEv>
    4dcc:	1820      	adds	r0, r4, r0
  return n;
}
    4dce:	bd70      	pop	{r4, r5, r6, pc}

00004dd0 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    4dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dd2:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4dd4:	2200      	movs	r2, #0
{
    4dd6:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
    4dd8:	ab02      	add	r3, sp, #8
    4dda:	3305      	adds	r3, #5
{
    4ddc:	9001      	str	r0, [sp, #4]
    4dde:	000d      	movs	r5, r1
  *str = '\0';
    4de0:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4de2:	2e01      	cmp	r6, #1
    4de4:	dc00      	bgt.n	4de8 <_ZN5Print11printNumberEmh+0x18>
    4de6:	260a      	movs	r6, #10
    4de8:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    4dea:	0028      	movs	r0, r5
    4dec:	0031      	movs	r1, r6
    4dee:	f004 fd7f 	bl	98f0 <__aeabi_uidivmod>
    4df2:	000f      	movs	r7, r1
    4df4:	b2cb      	uxtb	r3, r1
    n /= base;
    4df6:	0028      	movs	r0, r5
    4df8:	0031      	movs	r1, r6
    char c = n % base;
    4dfa:	9300      	str	r3, [sp, #0]
    n /= base;
    4dfc:	f004 fcf2 	bl	97e4 <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4e00:	b2fb      	uxtb	r3, r7
    4e02:	3337      	adds	r3, #55	; 0x37
    n /= base;
    4e04:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4e06:	3c01      	subs	r4, #1
    4e08:	b2db      	uxtb	r3, r3
    4e0a:	2f09      	cmp	r7, #9
    4e0c:	d802      	bhi.n	4e14 <_ZN5Print11printNumberEmh+0x44>
    4e0e:	9b00      	ldr	r3, [sp, #0]
    4e10:	3330      	adds	r3, #48	; 0x30
    4e12:	b2db      	uxtb	r3, r3
    4e14:	7023      	strb	r3, [r4, #0]
  } while(n);
    4e16:	2d00      	cmp	r5, #0
    4e18:	d1e7      	bne.n	4dea <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
    4e1a:	0021      	movs	r1, r4
    4e1c:	9801      	ldr	r0, [sp, #4]
    4e1e:	f7ff ff85 	bl	4d2c <_ZN5Print5writeEPKc>
}
    4e22:	b00d      	add	sp, #52	; 0x34
    4e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004e26 <_ZN5Print5printEli>:
{
    4e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e28:	0006      	movs	r6, r0
    4e2a:	000c      	movs	r4, r1
    4e2c:	1e15      	subs	r5, r2, #0
  if (base == 0) {
    4e2e:	d104      	bne.n	4e3a <_ZN5Print5printEli+0x14>
    return write(n);
    4e30:	6803      	ldr	r3, [r0, #0]
    4e32:	b2c9      	uxtb	r1, r1
    4e34:	681b      	ldr	r3, [r3, #0]
    4e36:	4798      	blx	r3
}
    4e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return printNumber((unsigned long)n, base);
    4e3a:	b2d2      	uxtb	r2, r2
  } else if (base == 10) {
    4e3c:	2d0a      	cmp	r5, #10
    4e3e:	d10d      	bne.n	4e5c <_ZN5Print5printEli+0x36>
    return printNumber((unsigned long)n, 10);
    4e40:	002a      	movs	r2, r5
    if (n < 0) {
    4e42:	2900      	cmp	r1, #0
    4e44:	da0a      	bge.n	4e5c <_ZN5Print5printEli+0x36>
      int t = print('-');
    4e46:	212d      	movs	r1, #45	; 0x2d
    4e48:	f7ff ff8d 	bl	4d66 <_ZN5Print5printEc>
      n = -n;
    4e4c:	4261      	negs	r1, r4
      int t = print('-');
    4e4e:	0007      	movs	r7, r0
      return printNumber((unsigned long)n, 10) + t;
    4e50:	002a      	movs	r2, r5
    4e52:	0030      	movs	r0, r6
    4e54:	f7ff ffbc 	bl	4dd0 <_ZN5Print11printNumberEmh>
    4e58:	1838      	adds	r0, r7, r0
    4e5a:	e7ed      	b.n	4e38 <_ZN5Print5printEli+0x12>
    return printNumber((unsigned long)n, base);
    4e5c:	0021      	movs	r1, r4
    4e5e:	0030      	movs	r0, r6
    4e60:	f7ff ffb6 	bl	4dd0 <_ZN5Print11printNumberEmh>
    4e64:	e7e8      	b.n	4e38 <_ZN5Print5printEli+0x12>

00004e66 <_ZN5Print5printEii>:
{
    4e66:	b510      	push	{r4, lr}
  return print((long) n, base);
    4e68:	f7ff ffdd 	bl	4e26 <_ZN5Print5printEli>
}
    4e6c:	bd10      	pop	{r4, pc}

00004e6e <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    4e6e:	6001      	str	r1, [r0, #0]
}
    4e70:	4770      	bx	lr

00004e72 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}

void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    4e72:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e74:	ac05      	add	r4, sp, #20
    4e76:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4e78:	6804      	ldr	r4, [r0, #0]
    4e7a:	1e98      	subs	r0, r3, #2
    4e7c:	1e47      	subs	r7, r0, #1
    4e7e:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4e80:	6826      	ldr	r6, [r4, #0]
    4e82:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4e84:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4e86:	4332      	orrs	r2, r6
    4e88:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4e8a:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4e8c:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4e8e:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    4e90:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    4e92:	6862      	ldr	r2, [r4, #4]
    4e94:	4329      	orrs	r1, r5
    4e96:	2000      	movs	r0, #0
    4e98:	2b02      	cmp	r3, #2
    4e9a:	d000      	beq.n	4e9e <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    4e9c:	0358      	lsls	r0, r3, #13
    4e9e:	4311      	orrs	r1, r2
    4ea0:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4ea2:	6061      	str	r1, [r4, #4]
}
    4ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004ea6 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    4ea6:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4ea8:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4eaa:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4eac:	03a4      	lsls	r4, r4, #14
    4eae:	6818      	ldr	r0, [r3, #0]
    4eb0:	0512      	lsls	r2, r2, #20
    4eb2:	4022      	ands	r2, r4
    4eb4:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4eb6:	20c0      	movs	r0, #192	; 0xc0
    4eb8:	0409      	lsls	r1, r1, #16
    4eba:	0280      	lsls	r0, r0, #10
    4ebc:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4ebe:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4ec0:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    4ec2:	685a      	ldr	r2, [r3, #4]
    4ec4:	4310      	orrs	r0, r2
    4ec6:	6058      	str	r0, [r3, #4]
}
    4ec8:	bd10      	pop	{r4, pc}

00004eca <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    4eca:	2201      	movs	r2, #1
    4ecc:	6803      	ldr	r3, [r0, #0]
    4ece:	6819      	ldr	r1, [r3, #0]
    4ed0:	430a      	orrs	r2, r1
    4ed2:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    4ed4:	681a      	ldr	r2, [r3, #0]
    4ed6:	07d2      	lsls	r2, r2, #31
    4ed8:	d4fc      	bmi.n	4ed4 <_ZN6SERCOM9resetUARTEv+0xa>
    4eda:	69da      	ldr	r2, [r3, #28]
    4edc:	07d2      	lsls	r2, r2, #31
    4ede:	d4f9      	bmi.n	4ed4 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    4ee0:	4770      	bx	lr

00004ee2 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    4ee2:	2202      	movs	r2, #2
    4ee4:	6803      	ldr	r3, [r0, #0]
    4ee6:	6819      	ldr	r1, [r3, #0]
    4ee8:	430a      	orrs	r2, r1
    4eea:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    4eec:	69da      	ldr	r2, [r3, #28]
    4eee:	0792      	lsls	r2, r2, #30
    4ef0:	d4fc      	bmi.n	4eec <_ZN6SERCOM10enableUARTEv+0xa>
}
    4ef2:	4770      	bx	lr

00004ef4 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    4ef4:	6803      	ldr	r3, [r0, #0]
    4ef6:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    4ef8:	07d2      	lsls	r2, r2, #31
    4efa:	d402      	bmi.n	4f02 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    4efc:	7e1a      	ldrb	r2, [r3, #24]
    4efe:	0792      	lsls	r2, r2, #30
    4f00:	d5fc      	bpl.n	4efc <_ZN6SERCOM9flushUARTEv+0x8>
}
    4f02:	4770      	bx	lr

00004f04 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    4f04:	2200      	movs	r2, #0
    4f06:	6803      	ldr	r3, [r0, #0]
    4f08:	835a      	strh	r2, [r3, #26]
}
    4f0a:	4770      	bx	lr

00004f0c <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    4f0c:	6803      	ldr	r3, [r0, #0]
    4f0e:	7e18      	ldrb	r0, [r3, #24]
    4f10:	0740      	lsls	r0, r0, #29
    4f12:	0fc0      	lsrs	r0, r0, #31
}
    4f14:	4770      	bx	lr

00004f16 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    4f16:	6803      	ldr	r3, [r0, #0]
    4f18:	7e18      	ldrb	r0, [r3, #24]
    4f1a:	09c0      	lsrs	r0, r0, #7
}
    4f1c:	4770      	bx	lr

00004f1e <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    4f1e:	2380      	movs	r3, #128	; 0x80
    4f20:	6802      	ldr	r2, [r0, #0]
    4f22:	425b      	negs	r3, r3
    4f24:	7e11      	ldrb	r1, [r2, #24]
    4f26:	430b      	orrs	r3, r1
    4f28:	7613      	strb	r3, [r2, #24]
}
    4f2a:	4770      	bx	lr

00004f2c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    4f2c:	6803      	ldr	r3, [r0, #0]
    4f2e:	7e18      	ldrb	r0, [r3, #24]
    4f30:	07c0      	lsls	r0, r0, #31
    4f32:	0fc0      	lsrs	r0, r0, #31
}
    4f34:	4770      	bx	lr

00004f36 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    4f36:	6803      	ldr	r3, [r0, #0]
    4f38:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    4f3a:	b2c0      	uxtb	r0, r0
}
    4f3c:	4770      	bx	lr

00004f3e <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    4f3e:	6803      	ldr	r3, [r0, #0]
    4f40:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    4f42:	07d2      	lsls	r2, r2, #31
    4f44:	d5fc      	bpl.n	4f40 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    4f46:	b289      	uxth	r1, r1
  return 1;
}
    4f48:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    4f4a:	8519      	strh	r1, [r3, #40]	; 0x28
}
    4f4c:	4770      	bx	lr

00004f4e <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    4f4e:	2201      	movs	r2, #1
    4f50:	6803      	ldr	r3, [r0, #0]
    4f52:	759a      	strb	r2, [r3, #22]
}
    4f54:	4770      	bx	lr

00004f56 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    4f56:	2201      	movs	r2, #1
    4f58:	6803      	ldr	r3, [r0, #0]
    4f5a:	751a      	strb	r2, [r3, #20]
}
    4f5c:	4770      	bx	lr
	...

00004f60 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:


}

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    4f60:	b570      	push	{r4, r5, r6, lr}
  if((clockMode & (0x1ul)) == 0 )
    cpha = 0;
  else
    cpha = 1;

  if((clockMode & (0x2ul)) == 0)
    4f62:	2501      	movs	r5, #1
    cpol = 0;
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    4f64:	6804      	ldr	r4, [r0, #0]
  if((clockMode & (0x2ul)) == 0)
    4f66:	084b      	lsrs	r3, r1, #1
    4f68:	402b      	ands	r3, r5
    cpha = 0;
    4f6a:	4029      	ands	r1, r5
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    4f6c:	6820      	ldr	r0, [r4, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    4f6e:	0709      	lsls	r1, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    4f70:	075b      	lsls	r3, r3, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    4f72:	430b      	orrs	r3, r1
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    4f74:	4303      	orrs	r3, r0
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    4f76:	6023      	str	r3, [r4, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint32_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return ((SercomClock / (2 * baudrate)) - 1);
    4f78:	4b04      	ldr	r3, [pc, #16]	; (4f8c <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x2c>)
    4f7a:	0051      	lsls	r1, r2, #1
    4f7c:	6818      	ldr	r0, [r3, #0]
    4f7e:	f004 fc31 	bl	97e4 <__udivsi3>
    4f82:	3801      	subs	r0, #1
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    4f84:	b2c0      	uxtb	r0, r0
    4f86:	7320      	strb	r0, [r4, #12]
}
    4f88:	bd70      	pop	{r4, r5, r6, pc}
    4f8a:	46c0      	nop			; (mov r8, r8)
    4f8c:	2000004c 	.word	0x2000004c

00004f90 <_ZN6SERCOM8resetSPIEv>:
  sercom->SPI.CTRLA.bit.SWRST = 1;
    4f90:	2201      	movs	r2, #1
    4f92:	6803      	ldr	r3, [r0, #0]
    4f94:	6819      	ldr	r1, [r3, #0]
    4f96:	430a      	orrs	r2, r1
    4f98:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    4f9a:	681a      	ldr	r2, [r3, #0]
    4f9c:	07d2      	lsls	r2, r2, #31
    4f9e:	d4fc      	bmi.n	4f9a <_ZN6SERCOM8resetSPIEv+0xa>
    4fa0:	69da      	ldr	r2, [r3, #28]
    4fa2:	07d2      	lsls	r2, r2, #31
    4fa4:	d4f9      	bmi.n	4f9a <_ZN6SERCOM8resetSPIEv+0xa>
}
    4fa6:	4770      	bx	lr

00004fa8 <_ZN6SERCOM9enableSPIEv>:
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    4fa8:	2202      	movs	r2, #2
    4faa:	6803      	ldr	r3, [r0, #0]
    4fac:	6819      	ldr	r1, [r3, #0]
    4fae:	430a      	orrs	r2, r1
    4fb0:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    4fb2:	69da      	ldr	r2, [r3, #28]
    4fb4:	0792      	lsls	r2, r2, #30
    4fb6:	d4fc      	bmi.n	4fb2 <_ZN6SERCOM9enableSPIEv+0xa>
}
    4fb8:	4770      	bx	lr

00004fba <_ZN6SERCOM10disableSPIEv>:
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    4fba:	6803      	ldr	r3, [r0, #0]
    4fbc:	69da      	ldr	r2, [r3, #28]
    4fbe:	0792      	lsls	r2, r2, #30
    4fc0:	d4fc      	bmi.n	4fbc <_ZN6SERCOM10disableSPIEv+0x2>
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    4fc2:	2102      	movs	r1, #2
    4fc4:	681a      	ldr	r2, [r3, #0]
    4fc6:	438a      	bics	r2, r1
    4fc8:	601a      	str	r2, [r3, #0]
}
    4fca:	4770      	bx	lr

00004fcc <_ZN6SERCOM15transferDataSPIEh>:
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    4fcc:	6802      	ldr	r2, [r0, #0]
    4fce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4fd0:	0a5b      	lsrs	r3, r3, #9
    4fd2:	025b      	lsls	r3, r3, #9
    4fd4:	4319      	orrs	r1, r3
    4fd6:	6291      	str	r1, [r2, #40]	; 0x28
  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    4fd8:	7e13      	ldrb	r3, [r2, #24]
    4fda:	075b      	lsls	r3, r3, #29
    4fdc:	d5fc      	bpl.n	4fd8 <_ZN6SERCOM15transferDataSPIEh+0xc>
  return sercom->SPI.DATA.bit.DATA;  // Reading data
    4fde:	6a90      	ldr	r0, [r2, #40]	; 0x28
    4fe0:	b2c0      	uxtb	r0, r0
}
    4fe2:	4770      	bx	lr

00004fe4 <_ZN6SERCOM13initClockNVICEv>:
    IRQn_Type IdNvic3=PendSV_IRQn ;
  #else
    IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
  #endif

  if(sercom == SERCOM0)
    4fe4:	2284      	movs	r2, #132	; 0x84
    4fe6:	6803      	ldr	r3, [r0, #0]
{
    4fe8:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    4fea:	05d2      	lsls	r2, r2, #23
    4fec:	4293      	cmp	r3, r2
    4fee:	d011      	beq.n	5014 <_ZN6SERCOM13initClockNVICEv+0x30>
      IdNvic3 = SERCOM0_3_IRQn;
    #else
      IdNvic = SERCOM0_IRQn;
    #endif
  }
  else if(sercom == SERCOM1)
    4ff0:	4a21      	ldr	r2, [pc, #132]	; (5078 <_ZN6SERCOM13initClockNVICEv+0x94>)
    4ff2:	4293      	cmp	r3, r2
    4ff4:	d034      	beq.n	5060 <_ZN6SERCOM13initClockNVICEv+0x7c>
    #else
      IdNvic = SERCOM1_IRQn;
    #endif
  }
#if !(SAMD11C14)
  else if(sercom == SERCOM2)
    4ff6:	4a21      	ldr	r2, [pc, #132]	; (507c <_ZN6SERCOM13initClockNVICEv+0x98>)
    4ff8:	4293      	cmp	r3, r2
    4ffa:	d034      	beq.n	5066 <_ZN6SERCOM13initClockNVICEv+0x82>
      IdNvic = SERCOM2_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES)
  else if(sercom == SERCOM3)
    4ffc:	4a20      	ldr	r2, [pc, #128]	; (5080 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    4ffe:	4293      	cmp	r3, r2
    5000:	d034      	beq.n	506c <_ZN6SERCOM13initClockNVICEv+0x88>
      IdNvic = SERCOM3_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES) && !(SAMD21E) && !(SAMC21E)
  else if(sercom == SERCOM4)
    5002:	4a20      	ldr	r2, [pc, #128]	; (5084 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    5004:	4293      	cmp	r3, r2
    5006:	d034      	beq.n	5072 <_ZN6SERCOM13initClockNVICEv+0x8e>
      IdNvic3 = SERCOM4_3_IRQn;
    #else
      IdNvic = SERCOM4_IRQn;
    #endif
  }
  else if(sercom == SERCOM5)
    5008:	4a1f      	ldr	r2, [pc, #124]	; (5088 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    500a:	4293      	cmp	r3, r2
    500c:	d127      	bne.n	505e <_ZN6SERCOM13initClockNVICEv+0x7a>
      IdNvic0 = SERCOM5_0_IRQn;
      IdNvic1 = SERCOM5_1_IRQn;
      IdNvic2 = SERCOM5_2_IRQn;
      IdNvic3 = SERCOM5_3_IRQn;
    #else
      IdNvic = SERCOM5_IRQn;
    500e:	230d      	movs	r3, #13
    clockId = GCM_SERCOM5_CORE;
    5010:	2218      	movs	r2, #24
    5012:	e001      	b.n	5018 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM0_IRQn;
    5014:	2308      	movs	r3, #8
    clockId = GCM_SERCOM0_CORE;
    5016:	2212      	movs	r2, #18
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5018:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    501a:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    501c:	4099      	lsls	r1, r3
    501e:	481b      	ldr	r0, [pc, #108]	; (508c <_ZN6SERCOM13initClockNVICEv+0xa8>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5020:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5022:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5024:	0899      	lsrs	r1, r3, #2
    5026:	402b      	ands	r3, r5
    5028:	40ab      	lsls	r3, r5
    502a:	35fc      	adds	r5, #252	; 0xfc
    502c:	409d      	lsls	r5, r3
    502e:	0089      	lsls	r1, r1, #2
    5030:	1809      	adds	r1, r1, r0
    5032:	00a4      	lsls	r4, r4, #2
    5034:	5908      	ldr	r0, [r1, r4]
    5036:	0092      	lsls	r2, r2, #2
    5038:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    503a:	25c0      	movs	r5, #192	; 0xc0
    503c:	409d      	lsls	r5, r3
    503e:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5040:	4303      	orrs	r3, r0
    5042:	510b      	str	r3, [r1, r4]
#if (SAMD21 || SAMD11)
  GCLK->CLKCTRL.reg = ( GCLK_CLKCTRL_ID( clockId ) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_CLKEN );
  SercomClock = SystemCoreClock;
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21)
  GCLK->PCHCTRL[clockId].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    5044:	4b12      	ldr	r3, [pc, #72]	; (5090 <_ZN6SERCOM13initClockNVICEv+0xac>)
    5046:	18d1      	adds	r1, r2, r3
    5048:	2340      	movs	r3, #64	; 0x40
    504a:	67cb      	str	r3, [r1, #124]	; 0x7c
  SercomClock = SystemCoreClock;
    504c:	4911      	ldr	r1, [pc, #68]	; (5094 <_ZN6SERCOM13initClockNVICEv+0xb0>)
    504e:	6808      	ldr	r0, [r1, #0]
    5050:	4911      	ldr	r1, [pc, #68]	; (5098 <_ZN6SERCOM13initClockNVICEv+0xb4>)
    5052:	6008      	str	r0, [r1, #0]
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    5054:	490e      	ldr	r1, [pc, #56]	; (5090 <_ZN6SERCOM13initClockNVICEv+0xac>)
    5056:	1852      	adds	r2, r2, r1
    5058:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    505a:	4219      	tst	r1, r3
    505c:	d0fc      	beq.n	5058 <_ZN6SERCOM13initClockNVICEv+0x74>
  SercomClock = 96000000ul;
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
#else
  #error "SERCOM.cpp: Unsupported chip"
#endif
}
    505e:	bd30      	pop	{r4, r5, pc}
      IdNvic = SERCOM1_IRQn;
    5060:	2309      	movs	r3, #9
    clockId = GCM_SERCOM1_CORE;
    5062:	2213      	movs	r2, #19
    5064:	e7d8      	b.n	5018 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM2_IRQn;
    5066:	230a      	movs	r3, #10
    clockId = GCM_SERCOM2_CORE;
    5068:	2214      	movs	r2, #20
    506a:	e7d5      	b.n	5018 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM3_IRQn;
    506c:	230b      	movs	r3, #11
    clockId = GCM_SERCOM3_CORE;
    506e:	2215      	movs	r2, #21
    5070:	e7d2      	b.n	5018 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM4_IRQn;
    5072:	230c      	movs	r3, #12
    clockId = GCM_SERCOM4_CORE;
    5074:	2216      	movs	r2, #22
    5076:	e7cf      	b.n	5018 <_ZN6SERCOM13initClockNVICEv+0x34>
    5078:	42000400 	.word	0x42000400
    507c:	42000800 	.word	0x42000800
    5080:	42000c00 	.word	0x42000c00
    5084:	42001000 	.word	0x42001000
    5088:	43000400 	.word	0x43000400
    508c:	e000e100 	.word	0xe000e100
    5090:	40001804 	.word	0x40001804
    5094:	20000038 	.word	0x20000038
    5098:	2000004c 	.word	0x2000004c

0000509c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    509e:	0016      	movs	r6, r2
    50a0:	001d      	movs	r5, r3
  if (sercom == SERCOM5) {
    50a2:	6802      	ldr	r2, [r0, #0]
    50a4:	4b18      	ldr	r3, [pc, #96]	; (5108 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6c>)
{
    50a6:	0004      	movs	r4, r0
    50a8:	000f      	movs	r7, r1
  if (sercom == SERCOM5) {
    50aa:	429a      	cmp	r2, r3
    50ac:	d100      	bne.n	50b0 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x14>
    sampleRate = SAMPLE_RATE_x16;
    50ae:	2601      	movs	r6, #1
  initClockNVIC();
    50b0:	0020      	movs	r0, r4
    50b2:	f7ff ff97 	bl	4fe4 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    50b6:	0020      	movs	r0, r4
    50b8:	f7ff ff07 	bl	4eca <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    50bc:	221c      	movs	r2, #28
    50be:	00bb      	lsls	r3, r7, #2
    50c0:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    50c2:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    50c4:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    50c6:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    50c8:	4313      	orrs	r3, r2
    50ca:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    50cc:	2384      	movs	r3, #132	; 0x84
    50ce:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    50d0:	2f01      	cmp	r7, #1
    50d2:	d118      	bne.n	5106 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6a>
      sampleRateValue = 16;
    50d4:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    50d6:	2e01      	cmp	r6, #1
    50d8:	d000      	beq.n	50dc <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x40>
      sampleRateValue = 8;
    50da:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SercomClock * 8) / (sampleRateValue * baudrate);
    50dc:	4b0b      	ldr	r3, [pc, #44]	; (510c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x70>)
    50de:	4369      	muls	r1, r5
    50e0:	6818      	ldr	r0, [r3, #0]
    50e2:	00c0      	lsls	r0, r0, #3
    50e4:	f004 fb7e 	bl	97e4 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    50e8:	2207      	movs	r2, #7
    50ea:	89a3      	ldrh	r3, [r4, #12]
    50ec:	4002      	ands	r2, r0
    50ee:	04db      	lsls	r3, r3, #19
    50f0:	0352      	lsls	r2, r2, #13
    50f2:	0cdb      	lsrs	r3, r3, #19
    50f4:	4313      	orrs	r3, r2
    50f6:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    50f8:	0403      	lsls	r3, r0, #16
    50fa:	89a0      	ldrh	r0, [r4, #12]
    50fc:	0cdb      	lsrs	r3, r3, #19
    50fe:	0b40      	lsrs	r0, r0, #13
    5100:	0340      	lsls	r0, r0, #13
    5102:	4318      	orrs	r0, r3
    5104:	81a0      	strh	r0, [r4, #12]
}
    5106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5108:	43000400 	.word	0x43000400
    510c:	2000004c 	.word	0x2000004c

00005110 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
{
    5110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5112:	0007      	movs	r7, r0
    5114:	9301      	str	r3, [sp, #4]
    5116:	ab08      	add	r3, sp, #32
    5118:	781e      	ldrb	r6, [r3, #0]
    511a:	000d      	movs	r5, r1
    511c:	0014      	movs	r4, r2
  resetSPI();
    511e:	f7ff ff37 	bl	4f90 <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    5122:	0038      	movs	r0, r7
    5124:	f7ff ff5e 	bl	4fe4 <_ZN6SERCOM13initClockNVICEv>
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    5128:	22c0      	movs	r2, #192	; 0xc0
    512a:	0524      	lsls	r4, r4, #20
    512c:	0392      	lsls	r2, r2, #14
    512e:	4014      	ands	r4, r2
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    5130:	07b2      	lsls	r2, r6, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    5132:	260c      	movs	r6, #12
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5134:	2107      	movs	r1, #7
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    5136:	4316      	orrs	r6, r2
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5138:	9a01      	ldr	r2, [sp, #4]
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    513a:	4334      	orrs	r4, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    513c:	400a      	ands	r2, r1
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    513e:	26c0      	movs	r6, #192	; 0xc0
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5140:	0011      	movs	r1, r2
    5142:	2280      	movs	r2, #128	; 0x80
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    5144:	02b6      	lsls	r6, r6, #10
    5146:	042d      	lsls	r5, r5, #16
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE( SPI_MASTER_OPERATION ) |
    5148:	683b      	ldr	r3, [r7, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    514a:	4035      	ands	r5, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    514c:	0292      	lsls	r2, r2, #10
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    514e:	4325      	orrs	r5, r4
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5150:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE( SPI_MASTER_OPERATION ) |
    5152:	601d      	str	r5, [r3, #0]
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5154:	605a      	str	r2, [r3, #4]
}
    5156:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00005158 <_ZN4UartcvbEv>:
    void errorHandler();
#else
    void IrqHandler();
#endif

    operator bool() { return true; }
    5158:	2001      	movs	r0, #1
    515a:	4770      	bx	lr

0000515c <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    515c:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    515e:	6803      	ldr	r3, [r0, #0]
    5160:	4a01      	ldr	r2, [pc, #4]	; (5168 <_ZN4Uart5beginEm+0xc>)
    5162:	6a1b      	ldr	r3, [r3, #32]
    5164:	4798      	blx	r3
}
    5166:	bd10      	pop	{r4, pc}
    5168:	00000413 	.word	0x00000413

0000516c <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    516c:	b510      	push	{r4, lr}
    516e:	0004      	movs	r4, r0
  sercom->resetUART();
    5170:	6900      	ldr	r0, [r0, #16]
    5172:	f7ff feaa 	bl	4eca <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    5176:	0020      	movs	r0, r4
    5178:	3014      	adds	r0, #20
    517a:	f003 fbcd 	bl	8918 <_ZN10RingBuffer5clearEv>
  txBuffer.clear();
    517e:	0020      	movs	r0, r4
    5180:	305c      	adds	r0, #92	; 0x5c
    5182:	f003 fbc9 	bl	8918 <_ZN10RingBuffer5clearEv>
}
    5186:	bd10      	pop	{r4, pc}

00005188 <_ZN4Uart9availableEv>:
  }
}
#endif

int Uart::available()
{
    5188:	b510      	push	{r4, lr}
  return rxBuffer.available();
    518a:	3014      	adds	r0, #20
    518c:	f003 fbd8 	bl	8940 <_ZN10RingBuffer9availableEv>
}
    5190:	bd10      	pop	{r4, pc}

00005192 <_ZN4Uart5flushEv>:
{
    5192:	b510      	push	{r4, lr}
    5194:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    5196:	0020      	movs	r0, r4
    5198:	305c      	adds	r0, #92	; 0x5c
    519a:	f003 fbd1 	bl	8940 <_ZN10RingBuffer9availableEv>
    519e:	2800      	cmp	r0, #0
    51a0:	d1f9      	bne.n	5196 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    51a2:	6920      	ldr	r0, [r4, #16]
    51a4:	f7ff fea6 	bl	4ef4 <_ZN6SERCOM9flushUARTEv>
}
    51a8:	bd10      	pop	{r4, pc}

000051aa <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    51aa:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    51ac:	305c      	adds	r0, #92	; 0x5c
    51ae:	f003 fbcd 	bl	894c <_ZN10RingBuffer17availableForStoreEv>
}
    51b2:	bd10      	pop	{r4, pc}

000051b4 <_ZN4Uart4readEv>:
{
  return rxBuffer.peek();
}

int Uart::read()
{
    51b4:	b570      	push	{r4, r5, r6, lr}
  int c = rxBuffer.read_char();
    51b6:	0005      	movs	r5, r0
{
    51b8:	0004      	movs	r4, r0
  int c = rxBuffer.read_char();
    51ba:	3514      	adds	r5, #20
    51bc:	0028      	movs	r0, r5
    51be:	f003 fbaf 	bl	8920 <_ZN10RingBuffer9read_charEv>

  if (uc_pinRTS != NO_RTS_PIN) {
    51c2:	0023      	movs	r3, r4
    51c4:	33a8      	adds	r3, #168	; 0xa8
    51c6:	781b      	ldrb	r3, [r3, #0]
  int c = rxBuffer.read_char();
    51c8:	0006      	movs	r6, r0
  if (uc_pinRTS != NO_RTS_PIN) {
    51ca:	2bff      	cmp	r3, #255	; 0xff
    51cc:	d00a      	beq.n	51e4 <_ZN4Uart4readEv+0x30>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    51ce:	0028      	movs	r0, r5
    51d0:	f003 fbbc 	bl	894c <_ZN10RingBuffer17availableForStoreEv>
    51d4:	280a      	cmp	r0, #10
    51d6:	dd05      	ble.n	51e4 <_ZN4Uart4readEv+0x30>
      *pul_outclrRTS = ul_pinMaskRTS;
    51d8:	0023      	movs	r3, r4
    51da:	34b4      	adds	r4, #180	; 0xb4
    51dc:	33b0      	adds	r3, #176	; 0xb0
    51de:	681b      	ldr	r3, [r3, #0]
    51e0:	6822      	ldr	r2, [r4, #0]
    51e2:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
}
    51e4:	0030      	movs	r0, r6
    51e6:	bd70      	pop	{r4, r5, r6, pc}

000051e8 <_ZN4Uart4peekEv>:
{
    51e8:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    51ea:	3014      	adds	r0, #20
    51ec:	f003 fbbc 	bl	8968 <_ZN10RingBuffer4peekEv>
}
    51f0:	bd10      	pop	{r4, pc}
	...

000051f4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    51f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    51f6:	001d      	movs	r5, r3
    51f8:	ab08      	add	r3, sp, #32
    51fa:	781b      	ldrb	r3, [r3, #0]
    51fc:	0004      	movs	r4, r0
    51fe:	9300      	str	r3, [sp, #0]
    5200:	ab09      	add	r3, sp, #36	; 0x24
    5202:	781b      	ldrb	r3, [r3, #0]
    5204:	0016      	movs	r6, r2
    5206:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
    5208:	2300      	movs	r3, #0
    520a:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    520c:	23fa      	movs	r3, #250	; 0xfa
    520e:	009b      	lsls	r3, r3, #2
    5210:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    5212:	4b0e      	ldr	r3, [pc, #56]	; (524c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    5214:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    5216:	3308      	adds	r3, #8
    5218:	6003      	str	r3, [r0, #0]
    521a:	3014      	adds	r0, #20
    521c:	f003 fb66 	bl	88ec <_ZN10RingBufferC1Ev>
    5220:	0020      	movs	r0, r4
    5222:	305c      	adds	r0, #92	; 0x5c
    5224:	f003 fb62 	bl	88ec <_ZN10RingBufferC1Ev>
  uc_padRX = _padRX ;
    5228:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    522a:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
    522c:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    522e:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
    5230:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
    5232:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
    5234:	466a      	mov	r2, sp
    5236:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    5238:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
    523a:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
    523c:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
    523e:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
    5240:	23ff      	movs	r3, #255	; 0xff
    5242:	32a8      	adds	r2, #168	; 0xa8
}
    5244:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
    5246:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
    5248:	7413      	strb	r3, [r2, #16]
}
    524a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    524c:	0001110c 	.word	0x0001110c

00005250 <_ZN4Uart10IrqHandlerEv>:
{
    5250:	b570      	push	{r4, r5, r6, lr}
    5252:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    5254:	6900      	ldr	r0, [r0, #16]
    5256:	f7ff fe59 	bl	4f0c <_ZN6SERCOM17availableDataUARTEv>
    525a:	2800      	cmp	r0, #0
    525c:	d019      	beq.n	5292 <_ZN4Uart10IrqHandlerEv+0x42>
    rxBuffer.store_char(sercom->readDataUART());
    525e:	0025      	movs	r5, r4
    5260:	6920      	ldr	r0, [r4, #16]
    5262:	f7ff fe68 	bl	4f36 <_ZN6SERCOM12readDataUARTEv>
    5266:	3514      	adds	r5, #20
    5268:	0001      	movs	r1, r0
    526a:	0028      	movs	r0, r5
    526c:	f003 fb49 	bl	8902 <_ZN10RingBuffer10store_charEh>
    if (uc_pinRTS != NO_RTS_PIN) {
    5270:	0023      	movs	r3, r4
    5272:	33a8      	adds	r3, #168	; 0xa8
    5274:	781b      	ldrb	r3, [r3, #0]
    5276:	2bff      	cmp	r3, #255	; 0xff
    5278:	d00b      	beq.n	5292 <_ZN4Uart10IrqHandlerEv+0x42>
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    527a:	0028      	movs	r0, r5
    527c:	f003 fb66 	bl	894c <_ZN10RingBuffer17availableForStoreEv>
    5280:	2809      	cmp	r0, #9
    5282:	dc06      	bgt.n	5292 <_ZN4Uart10IrqHandlerEv+0x42>
        *pul_outsetRTS = ul_pinMaskRTS;
    5284:	0023      	movs	r3, r4
    5286:	0022      	movs	r2, r4
    5288:	33ac      	adds	r3, #172	; 0xac
    528a:	32b4      	adds	r2, #180	; 0xb4
    528c:	681b      	ldr	r3, [r3, #0]
    528e:	6812      	ldr	r2, [r2, #0]
    5290:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    5292:	6920      	ldr	r0, [r4, #16]
    5294:	f7ff fe4a 	bl	4f2c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    5298:	2800      	cmp	r0, #0
    529a:	d00d      	beq.n	52b8 <_ZN4Uart10IrqHandlerEv+0x68>
    if (txBuffer.available()) {
    529c:	0025      	movs	r5, r4
    529e:	355c      	adds	r5, #92	; 0x5c
    52a0:	0028      	movs	r0, r5
    52a2:	f003 fb4d 	bl	8940 <_ZN10RingBuffer9availableEv>
    52a6:	2800      	cmp	r0, #0
    52a8:	d012      	beq.n	52d0 <_ZN4Uart10IrqHandlerEv+0x80>
      uint8_t data = txBuffer.read_char();
    52aa:	0028      	movs	r0, r5
    52ac:	f003 fb38 	bl	8920 <_ZN10RingBuffer9read_charEv>
      sercom->writeDataUART(data);
    52b0:	b2c1      	uxtb	r1, r0
    52b2:	6920      	ldr	r0, [r4, #16]
    52b4:	f7ff fe43 	bl	4f3e <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    52b8:	6920      	ldr	r0, [r4, #16]
    52ba:	f7ff fe2c 	bl	4f16 <_ZN6SERCOM11isUARTErrorEv>
    52be:	2800      	cmp	r0, #0
    52c0:	d005      	beq.n	52ce <_ZN4Uart10IrqHandlerEv+0x7e>
    sercom->acknowledgeUARTError();
    52c2:	6920      	ldr	r0, [r4, #16]
    52c4:	f7ff fe2b 	bl	4f1e <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    52c8:	6920      	ldr	r0, [r4, #16]
    52ca:	f7ff fe1b 	bl	4f04 <_ZN6SERCOM15clearStatusUARTEv>
}
    52ce:	bd70      	pop	{r4, r5, r6, pc}
      sercom->disableDataRegisterEmptyInterruptUART();
    52d0:	6920      	ldr	r0, [r4, #16]
    52d2:	f7ff fe40 	bl	4f56 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    52d6:	e7ef      	b.n	52b8 <_ZN4Uart10IrqHandlerEv+0x68>

000052d8 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    52d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52da:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    52dc:	6900      	ldr	r0, [r0, #16]
{
    52de:	000e      	movs	r6, r1
    52e0:	0025      	movs	r5, r4
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    52e2:	f7ff fe23 	bl	4f2c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    52e6:	355c      	adds	r5, #92	; 0x5c
    52e8:	2800      	cmp	r0, #0
    52ea:	d120      	bne.n	532e <_ZN4Uart5writeEh+0x56>
    while(txBuffer.isFull()) {
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);

      if (interruptsEnabled) {
        //uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    52ec:	273f      	movs	r7, #63	; 0x3f
    while(txBuffer.isFull()) {
    52ee:	0028      	movs	r0, r5
    52f0:	f003 fb44 	bl	897c <_ZN10RingBuffer6isFullEv>
    52f4:	2800      	cmp	r0, #0
    52f6:	d02d      	beq.n	5354 <_ZN4Uart5writeEh+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    52f8:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    52fc:	2201      	movs	r2, #1
    52fe:	4213      	tst	r3, r2
    5300:	d10c      	bne.n	531c <_ZN4Uart5writeEh+0x44>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5302:	f3ef 8305 	mrs	r3, IPSR
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    5306:	403b      	ands	r3, r7

        if (exceptionNumber == 0 ||
    5308:	d0f1      	beq.n	52ee <_ZN4Uart5writeEh+0x16>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    530a:	3b10      	subs	r3, #16
    530c:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    530e:	2b00      	cmp	r3, #0
    5310:	db17      	blt.n	5342 <_ZN4Uart5writeEh+0x6a>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    5312:	089b      	lsrs	r3, r3, #2
    5314:	33c0      	adds	r3, #192	; 0xc0
    5316:	4a14      	ldr	r2, [pc, #80]	; (5368 <_ZN4Uart5writeEh+0x90>)
    5318:	009b      	lsls	r3, r3, #2
    531a:	589b      	ldr	r3, [r3, r2]
        }
      }

      // interrupts are disabled or called from ISR with higher or equal priority than the SERCOM IRQ
      // manually call the UART IRQ handler when the data register is empty
      if (sercom->isDataRegisterEmptyUART()) {
    531c:	6920      	ldr	r0, [r4, #16]
    531e:	f7ff fe05 	bl	4f2c <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    5322:	2800      	cmp	r0, #0
    5324:	d0e3      	beq.n	52ee <_ZN4Uart5writeEh+0x16>
#if (SAMD51)
        dataRegisterEmptyHandler();
#else
        IrqHandler();
    5326:	0020      	movs	r0, r4
    5328:	f7ff ff92 	bl	5250 <_ZN4Uart10IrqHandlerEv>
    532c:	e7df      	b.n	52ee <_ZN4Uart5writeEh+0x16>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    532e:	0028      	movs	r0, r5
    5330:	f003 fb06 	bl	8940 <_ZN10RingBuffer9availableEv>
    5334:	2800      	cmp	r0, #0
    5336:	d1d9      	bne.n	52ec <_ZN4Uart5writeEh+0x14>
    sercom->writeDataUART(data);
    5338:	0031      	movs	r1, r6
    533a:	6920      	ldr	r0, [r4, #16]
    533c:	f7ff fdff 	bl	4f3e <_ZN6SERCOM13writeDataUARTEh>
    txBuffer.store_char(data);

    sercom->enableDataRegisterEmptyInterruptUART();
  }

  return 1;
    5340:	e00f      	b.n	5362 <_ZN4Uart5writeEh+0x8a>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    5342:	220f      	movs	r2, #15
    5344:	4013      	ands	r3, r2
    5346:	3b08      	subs	r3, #8
    5348:	089b      	lsrs	r3, r3, #2
    534a:	4a08      	ldr	r2, [pc, #32]	; (536c <_ZN4Uart5writeEh+0x94>)
    534c:	009b      	lsls	r3, r3, #2
    534e:	189b      	adds	r3, r3, r2
    5350:	681b      	ldr	r3, [r3, #0]
    5352:	e7e3      	b.n	531c <_ZN4Uart5writeEh+0x44>
    txBuffer.store_char(data);
    5354:	0028      	movs	r0, r5
    5356:	0031      	movs	r1, r6
    5358:	f003 fad3 	bl	8902 <_ZN10RingBuffer10store_charEh>
    sercom->enableDataRegisterEmptyInterruptUART();
    535c:	6920      	ldr	r0, [r4, #16]
    535e:	f7ff fdf6 	bl	4f4e <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    5362:	2001      	movs	r0, #1
    5364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5366:	46c0      	nop			; (mov r8, r8)
    5368:	e000e100 	.word	0xe000e100
    536c:	e000ed1c 	.word	0xe000ed1c

00005370 <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    5370:	20f0      	movs	r0, #240	; 0xf0
    5372:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    5374:	3930      	subs	r1, #48	; 0x30
    5376:	4248      	negs	r0, r1
    5378:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    537a:	4770      	bx	lr

0000537c <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    537c:	23f0      	movs	r3, #240	; 0xf0
    537e:	011b      	lsls	r3, r3, #4
    5380:	4019      	ands	r1, r3
    5382:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    5384:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    5386:	009b      	lsls	r3, r3, #2
    5388:	4299      	cmp	r1, r3
    538a:	d00a      	beq.n	53a2 <_ZN4Uart15extractCharSizeEt+0x26>
    538c:	3301      	adds	r3, #1
    538e:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    5390:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    5392:	4299      	cmp	r1, r3
    5394:	d005      	beq.n	53a2 <_ZN4Uart15extractCharSizeEt+0x26>
    5396:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    5398:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    539a:	005b      	lsls	r3, r3, #1
    539c:	4299      	cmp	r1, r3
    539e:	d000      	beq.n	53a2 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    53a0:	2000      	movs	r0, #0

  }
}
    53a2:	4770      	bx	lr

000053a4 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    53a4:	200f      	movs	r0, #15
    53a6:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    53a8:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    53aa:	2901      	cmp	r1, #1
    53ac:	d003      	beq.n	53b6 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    53ae:	3902      	subs	r1, #2
    53b0:	1e48      	subs	r0, r1, #1
    53b2:	4181      	sbcs	r1, r0
    53b4:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    53b6:	4770      	bx	lr

000053b8 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    53b8:	0003      	movs	r3, r0
{
    53ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    53bc:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    53be:	33a4      	adds	r3, #164	; 0xa4
{
    53c0:	b085      	sub	sp, #20
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    53c2:	7818      	ldrb	r0, [r3, #0]
{
    53c4:	000f      	movs	r7, r1
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    53c6:	210e      	movs	r1, #14
{
    53c8:	0015      	movs	r5, r2
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    53ca:	f7fe fbeb 	bl	3ba4 <pinPeripheral>
  pinPeripheral(uc_pinTX, PIO_SERCOM);
    53ce:	0023      	movs	r3, r4
    53d0:	33a5      	adds	r3, #165	; 0xa5
    53d2:	7818      	ldrb	r0, [r3, #0]
    53d4:	210e      	movs	r1, #14
    53d6:	f7fe fbe5 	bl	3ba4 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    53da:	0023      	movs	r3, r4
    53dc:	33a7      	adds	r3, #167	; 0xa7
    53de:	9303      	str	r3, [sp, #12]
    53e0:	781b      	ldrb	r3, [r3, #0]
    53e2:	2b02      	cmp	r3, #2
    53e4:	d107      	bne.n	53f6 <_ZN4Uart5beginEmt+0x3e>
    if (uc_pinCTS != NO_CTS_PIN) {
    53e6:	0023      	movs	r3, r4
    53e8:	33b8      	adds	r3, #184	; 0xb8
    53ea:	7818      	ldrb	r0, [r3, #0]
    53ec:	28ff      	cmp	r0, #255	; 0xff
    53ee:	d002      	beq.n	53f6 <_ZN4Uart5beginEmt+0x3e>
      pinPeripheral(uc_pinCTS, PIO_SERCOM);
    53f0:	210e      	movs	r1, #14
    53f2:	f7fe fbd7 	bl	3ba4 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    53f6:	0026      	movs	r6, r4
    53f8:	36a8      	adds	r6, #168	; 0xa8
    53fa:	7830      	ldrb	r0, [r6, #0]
    53fc:	28ff      	cmp	r0, #255	; 0xff
    53fe:	d01a      	beq.n	5436 <_ZN4Uart5beginEmt+0x7e>
    pinMode(uc_pinRTS, OUTPUT);
    5400:	2101      	movs	r1, #1
    5402:	f7fe fb61 	bl	3ac8 <pinMode>
    uint8_t rtsPort = GetPort(uc_pinRTS);
    5406:	210c      	movs	r1, #12
    5408:	7833      	ldrb	r3, [r6, #0]
    540a:	4a1f      	ldr	r2, [pc, #124]	; (5488 <_ZN4Uart5beginEmt+0xd0>)
    540c:	4359      	muls	r1, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    540e:	0020      	movs	r0, r4
    5410:	5c8b      	ldrb	r3, [r1, r2]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    5412:	1852      	adds	r2, r2, r1
    5414:	7851      	ldrb	r1, [r2, #1]
    5416:	2201      	movs	r2, #1
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    5418:	4e1c      	ldr	r6, [pc, #112]	; (548c <_ZN4Uart5beginEmt+0xd4>)
    541a:	01db      	lsls	r3, r3, #7
    541c:	30ac      	adds	r0, #172	; 0xac
    541e:	199e      	adds	r6, r3, r6
    5420:	6006      	str	r6, [r0, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    5422:	481b      	ldr	r0, [pc, #108]	; (5490 <_ZN4Uart5beginEmt+0xd8>)
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    5424:	408a      	lsls	r2, r1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    5426:	181b      	adds	r3, r3, r0
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    5428:	0021      	movs	r1, r4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    542a:	0020      	movs	r0, r4
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    542c:	31b4      	adds	r1, #180	; 0xb4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    542e:	30b0      	adds	r0, #176	; 0xb0
    5430:	6003      	str	r3, [r0, #0]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    5432:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
    5434:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    5436:	2201      	movs	r2, #1
    5438:	003b      	movs	r3, r7
    543a:	0011      	movs	r1, r2
    543c:	6920      	ldr	r0, [r4, #16]
    543e:	f7ff fe2d 	bl	509c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    5442:	0029      	movs	r1, r5
    5444:	0020      	movs	r0, r4
    5446:	f7ff ff99 	bl	537c <_ZN4Uart15extractCharSizeEt>
    544a:	0029      	movs	r1, r5
    544c:	0006      	movs	r6, r0
    544e:	0020      	movs	r0, r4
    5450:	f7ff ffa8 	bl	53a4 <_ZN4Uart13extractParityEt>
    5454:	0029      	movs	r1, r5
    5456:	0007      	movs	r7, r0
    5458:	0020      	movs	r0, r4
    545a:	f7ff ff89 	bl	5370 <_ZN4Uart16extractNbStopBitEt>
    545e:	003b      	movs	r3, r7
    5460:	9000      	str	r0, [sp, #0]
    5462:	0031      	movs	r1, r6
    5464:	6920      	ldr	r0, [r4, #16]
    5466:	2201      	movs	r2, #1
    5468:	f7ff fd03 	bl	4e72 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    546c:	0023      	movs	r3, r4
    546e:	33a6      	adds	r3, #166	; 0xa6
    5470:	781a      	ldrb	r2, [r3, #0]
    5472:	9b03      	ldr	r3, [sp, #12]
    5474:	6920      	ldr	r0, [r4, #16]
    5476:	7819      	ldrb	r1, [r3, #0]
    5478:	f7ff fd15 	bl	4ea6 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    547c:	6920      	ldr	r0, [r4, #16]
    547e:	f7ff fd30 	bl	4ee2 <_ZN6SERCOM10enableUARTEv>
}
    5482:	b005      	add	sp, #20
    5484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5486:	46c0      	nop			; (mov r8, r8)
    5488:	00010f58 	.word	0x00010f58
    548c:	40002818 	.word	0x40002818
    5490:	40002814 	.word	0x40002814

00005494 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    5494:	203f      	movs	r0, #63	; 0x3f
    5496:	4770      	bx	lr

00005498 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    5498:	b513      	push	{r0, r1, r4, lr}
    549a:	466b      	mov	r3, sp
	return write(&c, 1);
    549c:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    549e:	71d9      	strb	r1, [r3, #7]
    54a0:	3307      	adds	r3, #7
	return write(&c, 1);
    54a2:	6854      	ldr	r4, [r2, #4]
    54a4:	0019      	movs	r1, r3
    54a6:	2201      	movs	r2, #1
    54a8:	47a0      	blx	r4
}
    54aa:	bd16      	pop	{r1, r2, r4, pc}

000054ac <_ZN7Serial_9availableEv>:
{
    54ac:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    54ae:	2102      	movs	r1, #2
    54b0:	6900      	ldr	r0, [r0, #16]
    54b2:	f7fd fd95 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
}
    54b6:	bd10      	pop	{r4, pc}

000054b8 <_ZN7Serial_5flushEv>:
{
    54b8:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    54ba:	2103      	movs	r1, #3
    54bc:	6900      	ldr	r0, [r0, #16]
    54be:	f7fd fda5 	bl	300c <_ZN14USBDeviceClass5flushEm>
}
    54c2:	bd10      	pop	{r4, pc}

000054c4 <_ZN7Serial_5writeEPKhj>:
{
    54c4:	b510      	push	{r4, lr}
    54c6:	0013      	movs	r3, r2
    54c8:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    54ca:	000a      	movs	r2, r1
    54cc:	6900      	ldr	r0, [r0, #16]
    54ce:	2103      	movs	r1, #3
    54d0:	f7fd fe96 	bl	3200 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    54d4:	2800      	cmp	r0, #0
    54d6:	d101      	bne.n	54dc <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    54d8:	2301      	movs	r3, #1
    54da:	6063      	str	r3, [r4, #4]
}
    54dc:	bd10      	pop	{r4, pc}
	...

000054e0 <_ZN7Serial_4peekEv>:
{
    54e0:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    54e2:	4c05      	ldr	r4, [pc, #20]	; (54f8 <_ZN7Serial_4peekEv+0x18>)
    54e4:	6823      	ldr	r3, [r4, #0]
    54e6:	1c5a      	adds	r2, r3, #1
    54e8:	d104      	bne.n	54f4 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    54ea:	6803      	ldr	r3, [r0, #0]
    54ec:	695b      	ldr	r3, [r3, #20]
    54ee:	4798      	blx	r3
    54f0:	0003      	movs	r3, r0
    54f2:	6020      	str	r0, [r4, #0]
}
    54f4:	0018      	movs	r0, r3
    54f6:	bd10      	pop	{r4, pc}
    54f8:	20000098 	.word	0x20000098

000054fc <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    54fc:	4b07      	ldr	r3, [pc, #28]	; (551c <_ZN7Serial_4readEv+0x20>)
{
    54fe:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    5500:	6818      	ldr	r0, [r3, #0]
{
    5502:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    5504:	1c41      	adds	r1, r0, #1
    5506:	d003      	beq.n	5510 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    5508:	2201      	movs	r2, #1
    550a:	4252      	negs	r2, r2
    550c:	601a      	str	r2, [r3, #0]
}
    550e:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    5510:	2102      	movs	r1, #2
    5512:	6910      	ldr	r0, [r2, #16]
    5514:	f7fd fe66 	bl	31e4 <_ZN14USBDeviceClass4recvEm>
    5518:	e7f9      	b.n	550e <_ZN7Serial_4readEv+0x12>
    551a:	46c0      	nop			; (mov r8, r8)
    551c:	20000098 	.word	0x20000098

00005520 <_Z16CDC_GetInterfacePh>:
{
    5520:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    5522:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    5524:	223a      	movs	r2, #58	; 0x3a
	interfaceNum[0] += 2;	// uses 2
    5526:	3302      	adds	r3, #2
    5528:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    552a:	4902      	ldr	r1, [pc, #8]	; (5534 <_Z16CDC_GetInterfacePh+0x14>)
    552c:	4802      	ldr	r0, [pc, #8]	; (5538 <_Z16CDC_GetInterfacePh+0x18>)
    552e:	f7fd ff13 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    5532:	bd10      	pop	{r4, pc}
    5534:	2000005c 	.word	0x2000005c
    5538:	2000037c 	.word	0x2000037c

0000553c <_Z9CDC_SetupR8USBSetup>:
{
    553c:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    553e:	7801      	ldrb	r1, [r0, #0]
{
    5540:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    5542:	7842      	ldrb	r2, [r0, #1]
	return false;
    5544:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    5546:	29a1      	cmp	r1, #161	; 0xa1
    5548:	d108      	bne.n	555c <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    554a:	2a21      	cmp	r2, #33	; 0x21
    554c:	d105      	bne.n	555a <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    554e:	3a1a      	subs	r2, #26
    5550:	4916      	ldr	r1, [pc, #88]	; (55ac <_Z9CDC_SetupR8USBSetup+0x70>)
    5552:	4817      	ldr	r0, [pc, #92]	; (55b0 <_Z9CDC_SetupR8USBSetup+0x74>)
    5554:	f7fd ff00 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    5558:	2001      	movs	r0, #1
}
    555a:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    555c:	2921      	cmp	r1, #33	; 0x21
    555e:	d1fc      	bne.n	555a <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    5560:	2a20      	cmp	r2, #32
    5562:	d111      	bne.n	5588 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    5564:	3a19      	subs	r2, #25
    5566:	4911      	ldr	r1, [pc, #68]	; (55ac <_Z9CDC_SetupR8USBSetup+0x70>)
    5568:	4811      	ldr	r0, [pc, #68]	; (55b0 <_Z9CDC_SetupR8USBSetup+0x74>)
    556a:	f7fd fd93 	bl	3094 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    556e:	2296      	movs	r2, #150	; 0x96
    5570:	4b0e      	ldr	r3, [pc, #56]	; (55ac <_Z9CDC_SetupR8USBSetup+0x70>)
    5572:	00d2      	lsls	r2, r2, #3
    5574:	6819      	ldr	r1, [r3, #0]
    5576:	4291      	cmp	r1, r2
    5578:	d103      	bne.n	5582 <_Z9CDC_SetupR8USBSetup+0x46>
    557a:	2401      	movs	r4, #1
    557c:	79d8      	ldrb	r0, [r3, #7]
    557e:	4004      	ands	r4, r0
    5580:	d00e      	beq.n	55a0 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    5582:	f7fd f909 	bl	2798 <cancelReset>
    5586:	e00e      	b.n	55a6 <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    5588:	2a22      	cmp	r2, #34	; 0x22
    558a:	d103      	bne.n	5594 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    558c:	789a      	ldrb	r2, [r3, #2]
    558e:	4b07      	ldr	r3, [pc, #28]	; (55ac <_Z9CDC_SetupR8USBSetup+0x70>)
    5590:	71da      	strb	r2, [r3, #7]
    5592:	e7ec      	b.n	556e <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    5594:	2a23      	cmp	r2, #35	; 0x23
    5596:	d1e0      	bne.n	555a <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    5598:	885a      	ldrh	r2, [r3, #2]
    559a:	4b06      	ldr	r3, [pc, #24]	; (55b4 <_Z9CDC_SetupR8USBSetup+0x78>)
    559c:	601a      	str	r2, [r3, #0]
			return false;
    559e:	e7dc      	b.n	555a <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    55a0:	20fa      	movs	r0, #250	; 0xfa
    55a2:	f7fd f8f3 	bl	278c <initiateReset>
			return false;
    55a6:	2000      	movs	r0, #0
    55a8:	e7d7      	b.n	555a <_Z9CDC_SetupR8USBSetup+0x1e>
    55aa:	46c0      	nop			; (mov r8, r8)
    55ac:	20000054 	.word	0x20000054
    55b0:	2000037c 	.word	0x2000037c
    55b4:	20000050 	.word	0x20000050

000055b8 <_ZN7Serial_5beginEm>:
}
    55b8:	4770      	bx	lr
	...

000055bc <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
    55bc:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    55be:	f7fd f851 	bl	2664 <millis>
    55c2:	23f4      	movs	r3, #244	; 0xf4
    55c4:	33ff      	adds	r3, #255	; 0xff
		return false;
    55c6:	2400      	movs	r4, #0
	if (millis() < 500)
    55c8:	4298      	cmp	r0, r3
    55ca:	d907      	bls.n	55dc <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    55cc:	4b04      	ldr	r3, [pc, #16]	; (55e0 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
    55ce:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
    55d0:	79dc      	ldrb	r4, [r3, #7]
    55d2:	1e63      	subs	r3, r4, #1
    55d4:	419c      	sbcs	r4, r3
    55d6:	b2e4      	uxtb	r4, r4
	delay(10);
    55d8:	f7fd f87a 	bl	26d0 <delay>
	return result;
}
    55dc:	0020      	movs	r0, r4
    55de:	bd10      	pop	{r4, pc}
    55e0:	20000054 	.word	0x20000054

000055e4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    55e4:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    55e6:	2100      	movs	r1, #0
    55e8:	4b05      	ldr	r3, [pc, #20]	; (5600 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    55ea:	0092      	lsls	r2, r2, #2
    55ec:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    55ee:	4a05      	ldr	r2, [pc, #20]	; (5604 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    55f0:	6059      	str	r1, [r3, #4]
    55f2:	3208      	adds	r2, #8
    55f4:	601a      	str	r2, [r3, #0]
    55f6:	4a04      	ldr	r2, [pc, #16]	; (5608 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    55f8:	7619      	strb	r1, [r3, #24]
    55fa:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    55fc:	4770      	bx	lr
    55fe:	46c0      	nop			; (mov r8, r8)
    5600:	20001264 	.word	0x20001264
    5604:	00011140 	.word	0x00011140
    5608:	2000037c 	.word	0x2000037c

0000560c <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    560c:	b570      	push	{r4, r5, r6, lr}
    560e:	000e      	movs	r6, r1
	int sent = 0;
    5610:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5612:	6844      	ldr	r4, [r0, #4]
    5614:	2c00      	cmp	r4, #0
    5616:	d00b      	beq.n	5630 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    5618:	6823      	ldr	r3, [r4, #0]
    561a:	0031      	movs	r1, r6
    561c:	685b      	ldr	r3, [r3, #4]
    561e:	0020      	movs	r0, r4
    5620:	4798      	blx	r3
		if (res < 0)
    5622:	2800      	cmp	r0, #0
    5624:	db02      	blt.n	562c <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    5626:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    5628:	68e4      	ldr	r4, [r4, #12]
    562a:	e7f3      	b.n	5614 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    562c:	2501      	movs	r5, #1
    562e:	426d      	negs	r5, r5
	}
	return sent;
}
    5630:	0028      	movs	r0, r5
    5632:	bd70      	pop	{r4, r5, r6, pc}

00005634 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    5634:	b570      	push	{r4, r5, r6, lr}
    5636:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5638:	6844      	ldr	r4, [r0, #4]
    563a:	2c00      	cmp	r4, #0
    563c:	d008      	beq.n	5650 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    563e:	6823      	ldr	r3, [r4, #0]
    5640:	0029      	movs	r1, r5
    5642:	689b      	ldr	r3, [r3, #8]
    5644:	0020      	movs	r0, r4
    5646:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    5648:	2800      	cmp	r0, #0
    564a:	d102      	bne.n	5652 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    564c:	68e4      	ldr	r4, [r4, #12]
    564e:	e7f4      	b.n	563a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    5650:	0020      	movs	r0, r4
}
    5652:	bd70      	pop	{r4, r5, r6, pc}

00005654 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    5654:	b570      	push	{r4, r5, r6, lr}
    5656:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    5658:	6844      	ldr	r4, [r0, #4]
    565a:	2c00      	cmp	r4, #0
    565c:	d007      	beq.n	566e <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    565e:	6823      	ldr	r3, [r4, #0]
    5660:	0029      	movs	r1, r5
    5662:	0020      	movs	r0, r4
    5664:	68db      	ldr	r3, [r3, #12]
    5666:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    5668:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    566a:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    566c:	e7f5      	b.n	565a <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    566e:	702c      	strb	r4, [r5, #0]
}
    5670:	bd70      	pop	{r4, r5, r6, pc}

00005672 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    5672:	b570      	push	{r4, r5, r6, lr}
    5674:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5676:	6844      	ldr	r4, [r0, #4]
    5678:	2c00      	cmp	r4, #0
    567a:	d008      	beq.n	568e <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    567c:	6823      	ldr	r3, [r4, #0]
    567e:	0029      	movs	r1, r5
    5680:	681b      	ldr	r3, [r3, #0]
    5682:	0020      	movs	r0, r4
    5684:	4798      	blx	r3
    5686:	2800      	cmp	r0, #0
    5688:	d102      	bne.n	5690 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    568a:	68e4      	ldr	r4, [r4, #12]
    568c:	e7f4      	b.n	5678 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    568e:	0020      	movs	r0, r4
}
    5690:	bd70      	pop	{r4, r5, r6, pc}
	...

00005694 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    5694:	2101      	movs	r1, #1
    5696:	4a06      	ldr	r2, [pc, #24]	; (56b0 <_Z12PluggableUSBv+0x1c>)
{
    5698:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    569a:	6813      	ldr	r3, [r2, #0]
    569c:	4805      	ldr	r0, [pc, #20]	; (56b4 <_Z12PluggableUSBv+0x20>)
    569e:	400b      	ands	r3, r1
    56a0:	d105      	bne.n	56ae <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    56a2:	2402      	movs	r4, #2
    56a4:	7004      	strb	r4, [r0, #0]
    56a6:	1924      	adds	r4, r4, r4
    56a8:	7044      	strb	r4, [r0, #1]
    56aa:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    56ac:	6011      	str	r1, [r2, #0]
}
    56ae:	bd10      	pop	{r4, pc}
    56b0:	20001280 	.word	0x20001280
    56b4:	20001284 	.word	0x20001284

000056b8 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    56b8:	2300      	movs	r3, #0
    56ba:	6003      	str	r3, [r0, #0]
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    56bc:	680a      	ldr	r2, [r1, #0]
	capacity = 0;
    56be:	6043      	str	r3, [r0, #4]
	buffer = rhs.buffer;
    56c0:	6002      	str	r2, [r0, #0]
	capacity = rhs.capacity;
    56c2:	684a      	ldr	r2, [r1, #4]
	len = 0;
    56c4:	6083      	str	r3, [r0, #8]
	capacity = rhs.capacity;
    56c6:	6042      	str	r2, [r0, #4]
	len = rhs.len;
    56c8:	688a      	ldr	r2, [r1, #8]
    56ca:	6082      	str	r2, [r0, #8]
	rhs.buffer = NULL;
    56cc:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
    56ce:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
    56d0:	608b      	str	r3, [r1, #8]
}
    56d2:	4770      	bx	lr

000056d4 <_ZN6StringD1Ev>:
String::~String()
    56d4:	b510      	push	{r4, lr}
    56d6:	0004      	movs	r4, r0
	free(buffer);
    56d8:	6800      	ldr	r0, [r0, #0]
    56da:	f007 f9a7 	bl	ca2c <free>
}
    56de:	0020      	movs	r0, r4
    56e0:	bd10      	pop	{r4, pc}

000056e2 <_ZN6String10invalidateEv>:
{
    56e2:	b510      	push	{r4, lr}
    56e4:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    56e6:	6800      	ldr	r0, [r0, #0]
    56e8:	2800      	cmp	r0, #0
    56ea:	d001      	beq.n	56f0 <_ZN6String10invalidateEv+0xe>
    56ec:	f007 f99e 	bl	ca2c <free>
	buffer = NULL;
    56f0:	2300      	movs	r3, #0
    56f2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    56f4:	60a3      	str	r3, [r4, #8]
    56f6:	6063      	str	r3, [r4, #4]
}
    56f8:	bd10      	pop	{r4, pc}

000056fa <_ZN6String12changeBufferEj>:
{
    56fa:	b570      	push	{r4, r5, r6, lr}
    56fc:	0004      	movs	r4, r0
    56fe:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5700:	6800      	ldr	r0, [r0, #0]
    5702:	3101      	adds	r1, #1
    5704:	f008 fa92 	bl	dc2c <realloc>
    5708:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    570a:	d001      	beq.n	5710 <_ZN6String12changeBufferEj+0x16>
		return 1;
    570c:	2001      	movs	r0, #1
		capacity = maxStrLen;
    570e:	c428      	stmia	r4!, {r3, r5}
}
    5710:	bd70      	pop	{r4, r5, r6, pc}

00005712 <_ZN6String7reserveEj>:
	if (buffer && capacity >= size) return 1;
    5712:	6803      	ldr	r3, [r0, #0]
{
    5714:	b510      	push	{r4, lr}
    5716:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    5718:	2b00      	cmp	r3, #0
    571a:	d004      	beq.n	5726 <_ZN6String7reserveEj+0x14>
    571c:	6843      	ldr	r3, [r0, #4]
    571e:	428b      	cmp	r3, r1
    5720:	d301      	bcc.n	5726 <_ZN6String7reserveEj+0x14>
		if (len == 0) buffer[0] = 0;
    5722:	2001      	movs	r0, #1
}
    5724:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
    5726:	0020      	movs	r0, r4
    5728:	f7ff ffe7 	bl	56fa <_ZN6String12changeBufferEj>
    572c:	2800      	cmp	r0, #0
    572e:	d0f9      	beq.n	5724 <_ZN6String7reserveEj+0x12>
		if (len == 0) buffer[0] = 0;
    5730:	68a3      	ldr	r3, [r4, #8]
    5732:	2b00      	cmp	r3, #0
    5734:	d1f5      	bne.n	5722 <_ZN6String7reserveEj+0x10>
    5736:	6822      	ldr	r2, [r4, #0]
    5738:	7013      	strb	r3, [r2, #0]
    573a:	e7f2      	b.n	5722 <_ZN6String7reserveEj+0x10>

0000573c <_ZN6String4copyEPKcj>:
{
    573c:	b570      	push	{r4, r5, r6, lr}
    573e:	000e      	movs	r6, r1
	if (!reserve(length)) {
    5740:	0011      	movs	r1, r2
{
    5742:	0004      	movs	r4, r0
    5744:	0015      	movs	r5, r2
	if (!reserve(length)) {
    5746:	f7ff ffe4 	bl	5712 <_ZN6String7reserveEj>
    574a:	2800      	cmp	r0, #0
    574c:	d104      	bne.n	5758 <_ZN6String4copyEPKcj+0x1c>
		invalidate();
    574e:	0020      	movs	r0, r4
    5750:	f7ff ffc7 	bl	56e2 <_ZN6String10invalidateEv>
}
    5754:	0020      	movs	r0, r4
    5756:	bd70      	pop	{r4, r5, r6, pc}
	len = length;
    5758:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    575a:	0031      	movs	r1, r6
    575c:	6820      	ldr	r0, [r4, #0]
    575e:	f008 faba 	bl	dcd6 <strcpy>
	return *this;
    5762:	e7f7      	b.n	5754 <_ZN6String4copyEPKcj+0x18>

00005764 <_ZN6StringC1EPKc>:
	buffer = NULL;
    5764:	2300      	movs	r3, #0
String::String(const char *cstr)
    5766:	b570      	push	{r4, r5, r6, lr}
    5768:	0004      	movs	r4, r0
    576a:	000d      	movs	r5, r1
	buffer = NULL;
    576c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    576e:	6043      	str	r3, [r0, #4]
	len = 0;
    5770:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    5772:	4299      	cmp	r1, r3
    5774:	d007      	beq.n	5786 <_ZN6StringC1EPKc+0x22>
    5776:	0008      	movs	r0, r1
    5778:	f008 fab5 	bl	dce6 <strlen>
    577c:	0029      	movs	r1, r5
    577e:	0002      	movs	r2, r0
    5780:	0020      	movs	r0, r4
    5782:	f7ff ffdb 	bl	573c <_ZN6String4copyEPKcj>
}
    5786:	0020      	movs	r0, r4
    5788:	bd70      	pop	{r4, r5, r6, pc}

0000578a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    578a:	b570      	push	{r4, r5, r6, lr}
    578c:	0004      	movs	r4, r0
    578e:	1e0d      	subs	r5, r1, #0
	if (cstr) copy(cstr, strlen(cstr));
    5790:	d009      	beq.n	57a6 <_ZN6StringaSEPKc+0x1c>
    5792:	0008      	movs	r0, r1
    5794:	f008 faa7 	bl	dce6 <strlen>
    5798:	0029      	movs	r1, r5
    579a:	0002      	movs	r2, r0
    579c:	0020      	movs	r0, r4
    579e:	f7ff ffcd 	bl	573c <_ZN6String4copyEPKcj>
	else invalidate();
	
	return *this;
}
    57a2:	0020      	movs	r0, r4
    57a4:	bd70      	pop	{r4, r5, r6, pc}
	else invalidate();
    57a6:	f7ff ff9c 	bl	56e2 <_ZN6String10invalidateEv>
    57aa:	e7fa      	b.n	57a2 <_ZN6StringaSEPKc+0x18>

000057ac <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
    57ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    57ae:	0004      	movs	r4, r0
	buffer = NULL;
    57b0:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
    57b2:	0008      	movs	r0, r1
	buffer = NULL;
    57b4:	6023      	str	r3, [r4, #0]
	capacity = 0;
    57b6:	6063      	str	r3, [r4, #4]
	len = 0;
    57b8:	60a3      	str	r3, [r4, #8]
	utoa(value, buf, base);
    57ba:	a901      	add	r1, sp, #4
    57bc:	f003 f892 	bl	88e4 <utoa>
	*this = buf;
    57c0:	a901      	add	r1, sp, #4
    57c2:	0020      	movs	r0, r4
    57c4:	f7ff ffe1 	bl	578a <_ZN6StringaSEPKc>
}
    57c8:	0020      	movs	r0, r4
    57ca:	b004      	add	sp, #16
    57cc:	bd10      	pop	{r4, pc}

000057ce <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    57ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57d0:	0004      	movs	r4, r0
    57d2:	1e0f      	subs	r7, r1, #0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    57d4:	d102      	bne.n	57dc <_ZN6String6concatEPKcj+0xe>
    57d6:	2600      	movs	r6, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    57d8:	0030      	movs	r0, r6
    57da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (length == 0) return 1;
    57dc:	2601      	movs	r6, #1
    57de:	2a00      	cmp	r2, #0
    57e0:	d0fa      	beq.n	57d8 <_ZN6String6concatEPKcj+0xa>
	unsigned int newlen = len + length;
    57e2:	6883      	ldr	r3, [r0, #8]
    57e4:	18d5      	adds	r5, r2, r3
	if (!reserve(newlen)) return 0;
    57e6:	0029      	movs	r1, r5
    57e8:	f7ff ff93 	bl	5712 <_ZN6String7reserveEj>
    57ec:	2800      	cmp	r0, #0
    57ee:	d0f2      	beq.n	57d6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
    57f0:	6823      	ldr	r3, [r4, #0]
    57f2:	68a2      	ldr	r2, [r4, #8]
    57f4:	0039      	movs	r1, r7
    57f6:	1898      	adds	r0, r3, r2
    57f8:	f008 fa6d 	bl	dcd6 <strcpy>
	len = newlen;
    57fc:	60a5      	str	r5, [r4, #8]
	return 1;
    57fe:	e7eb      	b.n	57d8 <_ZN6String6concatEPKcj+0xa>

00005800 <_ZN6String6concatERKS_>:
{
    5800:	b510      	push	{r4, lr}
	return concat(s.buffer, s.len);
    5802:	688a      	ldr	r2, [r1, #8]
    5804:	6809      	ldr	r1, [r1, #0]
    5806:	f7ff ffe2 	bl	57ce <_ZN6String6concatEPKcj>
}
    580a:	bd10      	pop	{r4, pc}

0000580c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
    580c:	b570      	push	{r4, r5, r6, lr}
    580e:	0005      	movs	r5, r0
    5810:	000c      	movs	r4, r1
	if (!cstr) return 0;
    5812:	1e08      	subs	r0, r1, #0
    5814:	d006      	beq.n	5824 <_ZN6String6concatEPKc+0x18>
	return concat(cstr, strlen(cstr));
    5816:	f008 fa66 	bl	dce6 <strlen>
    581a:	0021      	movs	r1, r4
    581c:	0002      	movs	r2, r0
    581e:	0028      	movs	r0, r5
    5820:	f7ff ffd5 	bl	57ce <_ZN6String6concatEPKcj>
}
    5824:	bd70      	pop	{r4, r5, r6, pc}

00005826 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    5826:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    5828:	2200      	movs	r2, #0
	buf[0] = c;
    582a:	ab01      	add	r3, sp, #4
    582c:	7019      	strb	r1, [r3, #0]
	buf[1] = 0;
    582e:	705a      	strb	r2, [r3, #1]
	return concat(buf, 1);
    5830:	0019      	movs	r1, r3
    5832:	3201      	adds	r2, #1
    5834:	f7ff ffcb 	bl	57ce <_ZN6String6concatEPKcj>
}
    5838:	bd0e      	pop	{r1, r2, r3, pc}

0000583a <_ZNK6String6equalsEPKc>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    583a:	6883      	ldr	r3, [r0, #8]
{
    583c:	b510      	push	{r4, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    583e:	2b00      	cmp	r3, #0
    5840:	d107      	bne.n	5852 <_ZNK6String6equalsEPKc+0x18>
    5842:	2001      	movs	r0, #1
    5844:	2900      	cmp	r1, #0
    5846:	d003      	beq.n	5850 <_ZNK6String6equalsEPKc+0x16>
    5848:	780b      	ldrb	r3, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
    584a:	4258      	negs	r0, r3
    584c:	4158      	adcs	r0, r3
    584e:	b2c0      	uxtb	r0, r0
}
    5850:	bd10      	pop	{r4, pc}
	if (cstr == NULL) return buffer[0] == 0;
    5852:	2900      	cmp	r1, #0
    5854:	d102      	bne.n	585c <_ZNK6String6equalsEPKc+0x22>
    5856:	6803      	ldr	r3, [r0, #0]
    5858:	781b      	ldrb	r3, [r3, #0]
    585a:	e7f6      	b.n	584a <_ZNK6String6equalsEPKc+0x10>
	return strcmp(buffer, cstr) == 0;
    585c:	6800      	ldr	r0, [r0, #0]
    585e:	f008 fa30 	bl	dcc2 <strcmp>
    5862:	0003      	movs	r3, r0
    5864:	e7f1      	b.n	584a <_ZNK6String6equalsEPKc+0x10>

00005866 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    5866:	b570      	push	{r4, r5, r6, lr}
    5868:	000d      	movs	r5, r1
	if (!bufsize || !buf) return;
    586a:	2a00      	cmp	r2, #0
    586c:	d006      	beq.n	587c <_ZNK6String8getBytesEPhjj+0x16>
    586e:	2900      	cmp	r1, #0
    5870:	d004      	beq.n	587c <_ZNK6String8getBytesEPhjj+0x16>
	if (index >= len) {
    5872:	6884      	ldr	r4, [r0, #8]
    5874:	429c      	cmp	r4, r3
    5876:	d802      	bhi.n	587e <_ZNK6String8getBytesEPhjj+0x18>
		buf[0] = 0;
    5878:	2300      	movs	r3, #0
    587a:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    587c:	bd70      	pop	{r4, r5, r6, pc}
	unsigned int n = bufsize - 1;
    587e:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
    5880:	1ae4      	subs	r4, r4, r3
    5882:	4294      	cmp	r4, r2
    5884:	d900      	bls.n	5888 <_ZNK6String8getBytesEPhjj+0x22>
    5886:	0014      	movs	r4, r2
	strncpy((char *)buf, buffer + index, n);
    5888:	6801      	ldr	r1, [r0, #0]
    588a:	0022      	movs	r2, r4
    588c:	18c9      	adds	r1, r1, r3
    588e:	0028      	movs	r0, r5
    5890:	f008 fa56 	bl	dd40 <strncpy>
	buf[n] = 0;
    5894:	2300      	movs	r3, #0
    5896:	552b      	strb	r3, [r5, r4]
    5898:	e7f0      	b.n	587c <_ZNK6String8getBytesEPhjj+0x16>

0000589a <_ZN6String11toUpperCaseEv>:
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
{
    589a:	b510      	push	{r4, lr}
	if (!buffer) return;
    589c:	6804      	ldr	r4, [r0, #0]
    589e:	2c00      	cmp	r4, #0
    58a0:	d007      	beq.n	58b2 <_ZN6String11toUpperCaseEv+0x18>
	for (char *p = buffer; *p; p++) {
    58a2:	7820      	ldrb	r0, [r4, #0]
    58a4:	2800      	cmp	r0, #0
    58a6:	d004      	beq.n	58b2 <_ZN6String11toUpperCaseEv+0x18>
		*p = toupper(*p);
    58a8:	f008 fb00 	bl	deac <toupper>
    58ac:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    58ae:	3401      	adds	r4, #1
    58b0:	e7f7      	b.n	58a2 <_ZN6String11toUpperCaseEv+0x8>
	}
}
    58b2:	bd10      	pop	{r4, pc}

000058b4 <_ZN15ArduinoUniqueIDC1Ev>:
// Copyright © Luiz Henrique Cassettari. All rights reserved.
// Licensed under the MIT license.

#include "ArduinoUniqueID.h"

ArduinoUniqueID::ArduinoUniqueID()
    58b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	uint32_t pdwUniqueID[4];
	pdwUniqueID[0] = SERIAL_NUMBER_WORD_0;
    58b6:	4b0e      	ldr	r3, [pc, #56]	; (58f0 <_ZN15ArduinoUniqueIDC1Ev+0x3c>)
	pdwUniqueID[1] = SERIAL_NUMBER_WORD_1;
	pdwUniqueID[2] = SERIAL_NUMBER_WORD_2;
	pdwUniqueID[3] = SERIAL_NUMBER_WORD_3;
    58b8:	2200      	movs	r2, #0
	pdwUniqueID[0] = SERIAL_NUMBER_WORD_0;
    58ba:	681b      	ldr	r3, [r3, #0]
    58bc:	9300      	str	r3, [sp, #0]
	pdwUniqueID[1] = SERIAL_NUMBER_WORD_1;
    58be:	4b0d      	ldr	r3, [pc, #52]	; (58f4 <_ZN15ArduinoUniqueIDC1Ev+0x40>)
    58c0:	681b      	ldr	r3, [r3, #0]
    58c2:	9301      	str	r3, [sp, #4]
	pdwUniqueID[2] = SERIAL_NUMBER_WORD_2;
    58c4:	4b0c      	ldr	r3, [pc, #48]	; (58f8 <_ZN15ArduinoUniqueIDC1Ev+0x44>)
    58c6:	681b      	ldr	r3, [r3, #0]
    58c8:	9302      	str	r3, [sp, #8]
	pdwUniqueID[3] = SERIAL_NUMBER_WORD_3;
    58ca:	4b0c      	ldr	r3, [pc, #48]	; (58fc <_ZN15ArduinoUniqueIDC1Ev+0x48>)
    58cc:	681b      	ldr	r3, [r3, #0]
    58ce:	9303      	str	r3, [sp, #12]
    58d0:	0003      	movs	r3, r0

	for (int i = 0; i < 4; i++)
	{
		id[i*4+0] = (uint8_t)(pdwUniqueID[i] >> 24);
    58d2:	4669      	mov	r1, sp
    58d4:	5889      	ldr	r1, [r1, r2]
    58d6:	3204      	adds	r2, #4
    58d8:	0e0c      	lsrs	r4, r1, #24
    58da:	701c      	strb	r4, [r3, #0]
		id[i*4+1] = (uint8_t)(pdwUniqueID[i] >> 16);
    58dc:	0c0c      	lsrs	r4, r1, #16
    58de:	705c      	strb	r4, [r3, #1]
		id[i*4+2] = (uint8_t)(pdwUniqueID[i] >> 8);
    58e0:	0a0c      	lsrs	r4, r1, #8
    58e2:	709c      	strb	r4, [r3, #2]
		id[i*4+3] = (uint8_t)(pdwUniqueID[i] >> 0);
    58e4:	70d9      	strb	r1, [r3, #3]
    58e6:	3304      	adds	r3, #4
	for (int i = 0; i < 4; i++)
    58e8:	2a10      	cmp	r2, #16
    58ea:	d1f2      	bne.n	58d2 <_ZN15ArduinoUniqueIDC1Ev+0x1e>
		id[i*4+1] = (uint8_t)(pdwUniqueID[i] >> 16);
		id[i*4+2] = (uint8_t)(pdwUniqueID[i] >> 8);
		id[i*4+3] = (uint8_t)(pdwUniqueID[i] >> 0);
	}
#endif
}
    58ec:	b004      	add	sp, #16
    58ee:	bd10      	pop	{r4, pc}
    58f0:	0080a00c 	.word	0x0080a00c
    58f4:	0080a040 	.word	0x0080a040
    58f8:	0080a044 	.word	0x0080a044
    58fc:	0080a048 	.word	0x0080a048

00005900 <_GLOBAL__sub_I__ZN15ArduinoUniqueIDC2Ev>:

ArduinoUniqueID _UniqueID;
    5900:	b510      	push	{r4, lr}
    5902:	4802      	ldr	r0, [pc, #8]	; (590c <_GLOBAL__sub_I__ZN15ArduinoUniqueIDC2Ev+0xc>)
    5904:	f7ff ffd6 	bl	58b4 <_ZN15ArduinoUniqueIDC1Ev>
    5908:	bd10      	pop	{r4, pc}
    590a:	46c0      	nop			; (mov r8, r8)
    590c:	2000128c 	.word	0x2000128c

00005910 <_ZN3DHTC1Ehhh>:
  _type = type;
  #ifdef __AVR
    _bit = digitalPinToBitMask(pin);
    _port = digitalPinToPort(pin);
  #endif
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    5910:	4b07      	ldr	r3, [pc, #28]	; (5930 <_ZN3DHTC1Ehhh+0x20>)
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
    5912:	b510      	push	{r4, lr}
    5914:	0004      	movs	r4, r0
  _pin = pin;
    5916:	7141      	strb	r1, [r0, #5]
  _type = type;
    5918:	7182      	strb	r2, [r0, #6]
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    591a:	4906      	ldr	r1, [pc, #24]	; (5934 <_ZN3DHTC1Ehhh+0x24>)
    591c:	6818      	ldr	r0, [r3, #0]
    591e:	f003 ff61 	bl	97e4 <__udivsi3>
    5922:	23fa      	movs	r3, #250	; 0xfa
    5924:	009b      	lsls	r3, r3, #2
    5926:	4358      	muls	r0, r3
    5928:	60e0      	str	r0, [r4, #12]
                                                 // reading pulses from DHT sensor.
  // Note that count is now ignored as the DHT reading algorithm adjusts itself
  // basd on the speed of the processor.
}
    592a:	0020      	movs	r0, r4
    592c:	bd10      	pop	{r4, pc}
    592e:	46c0      	nop			; (mov r8, r8)
    5930:	20000038 	.word	0x20000038
    5934:	000f4240 	.word	0x000f4240

00005938 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
    5938:	b510      	push	{r4, lr}
    593a:	0004      	movs	r4, r0
  // set up the pins!
  pinMode(_pin, INPUT_PULLUP);
    593c:	2102      	movs	r1, #2
    593e:	7940      	ldrb	r0, [r0, #5]
    5940:	f7fe f8c2 	bl	3ac8 <pinMode>
  // Using this value makes sure that millis() - lastreadtime will be
  // >= MIN_INTERVAL right away. Note that this assignment wraps around,
  // but so will the subtraction.
  _lastreadtime = -MIN_INTERVAL;
    5944:	4b01      	ldr	r3, [pc, #4]	; (594c <_ZN3DHT5beginEv+0x14>)
    5946:	60a3      	str	r3, [r4, #8]
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}
    5948:	bd10      	pop	{r4, pc}
    594a:	46c0      	nop			; (mov r8, r8)
    594c:	fffff830 	.word	0xfffff830

00005950 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    5950:	b570      	push	{r4, r5, r6, lr}
    5952:	0005      	movs	r5, r0
    5954:	000e      	movs	r6, r1
  uint32_t count = 0;
    5956:	2400      	movs	r4, #0
      }
    }
  // Otherwise fall back to using digitalRead (this seems to be necessary on ESP8266
  // right now, perhaps bugs in direct port access functions?).
  #else
    while (digitalRead(_pin) == level) {
    5958:	7968      	ldrb	r0, [r5, #5]
    595a:	f7fe f90d 	bl	3b78 <digitalRead>
    595e:	42b0      	cmp	r0, r6
    5960:	d104      	bne.n	596c <_ZN3DHT11expectPulseEb+0x1c>
      if (count++ >= _maxcycles) {
    5962:	68ea      	ldr	r2, [r5, #12]
    5964:	1c63      	adds	r3, r4, #1
    5966:	4294      	cmp	r4, r2
    5968:	d302      	bcc.n	5970 <_ZN3DHT11expectPulseEb+0x20>
        return 0; // Exceeded timeout, fail.
    596a:	2400      	movs	r4, #0
      }
    }
  #endif

  return count;
}
    596c:	0020      	movs	r0, r4
    596e:	bd70      	pop	{r4, r5, r6, pc}
      if (count++ >= _maxcycles) {
    5970:	001c      	movs	r4, r3
    5972:	e7f1      	b.n	5958 <_ZN3DHT11expectPulseEb+0x8>

00005974 <_ZN3DHT4readEb>:
boolean DHT::read(bool force) {
    5974:	b570      	push	{r4, r5, r6, lr}
    5976:	b0d0      	sub	sp, #320	; 0x140
    5978:	000d      	movs	r5, r1
    597a:	0004      	movs	r4, r0
  uint32_t currenttime = millis();
    597c:	f7fc fe72 	bl	2664 <millis>
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
    5980:	2d00      	cmp	r5, #0
    5982:	d107      	bne.n	5994 <_ZN3DHT4readEb+0x20>
    5984:	68a3      	ldr	r3, [r4, #8]
    5986:	4a3d      	ldr	r2, [pc, #244]	; (5a7c <_ZN3DHT4readEb+0x108>)
    5988:	1ac3      	subs	r3, r0, r3
    598a:	4293      	cmp	r3, r2
    598c:	d802      	bhi.n	5994 <_ZN3DHT4readEb+0x20>
    return _lastresult; // return last correct measurement
    598e:	7c20      	ldrb	r0, [r4, #16]
}
    5990:	b050      	add	sp, #320	; 0x140
    5992:	bd70      	pop	{r4, r5, r6, pc}
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    5994:	2500      	movs	r5, #0
  _lastreadtime = currenttime;
    5996:	60a0      	str	r0, [r4, #8]
  digitalWrite(_pin, HIGH);
    5998:	2101      	movs	r1, #1
    599a:	7960      	ldrb	r0, [r4, #5]
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    599c:	7125      	strb	r5, [r4, #4]
    599e:	70e5      	strb	r5, [r4, #3]
    59a0:	70a5      	strb	r5, [r4, #2]
    59a2:	7065      	strb	r5, [r4, #1]
    59a4:	7025      	strb	r5, [r4, #0]
  digitalWrite(_pin, HIGH);
    59a6:	f7fe f893 	bl	3ad0 <digitalWrite>
  delay(250);
    59aa:	20fa      	movs	r0, #250	; 0xfa
    59ac:	f7fc fe90 	bl	26d0 <delay>
  pinMode(_pin, OUTPUT);
    59b0:	7960      	ldrb	r0, [r4, #5]
    59b2:	2101      	movs	r1, #1
    59b4:	f7fe f888 	bl	3ac8 <pinMode>
  digitalWrite(_pin, LOW);
    59b8:	7960      	ldrb	r0, [r4, #5]
    59ba:	0029      	movs	r1, r5
    59bc:	f7fe f888 	bl	3ad0 <digitalWrite>
  delay(20);
    59c0:	2014      	movs	r0, #20
    59c2:	f7fc fe85 	bl	26d0 <delay>
  __ASM volatile ("cpsid i" : : : "memory");
    59c6:	b672      	cpsid	i
    digitalWrite(_pin, HIGH);
    59c8:	2101      	movs	r1, #1
    59ca:	7960      	ldrb	r0, [r4, #5]
    59cc:	f7fe f880 	bl	3ad0 <digitalWrite>
    "   sub %0, #1   \n" // substract 1 from %0 (n)
    "   bne 1b       \n" // if result is not 0 jump to 1
    : "+r" (n)           // '%0' is n variable with RW constraints
    :                    // no input
    :                    // no clobber
  );
    59d0:	23a0      	movs	r3, #160	; 0xa0
    59d2:	009b      	lsls	r3, r3, #2
    59d4:	3b01      	subs	r3, #1
    59d6:	d1fd      	bne.n	59d4 <_ZN3DHT4readEb+0x60>
    pinMode(_pin, INPUT_PULLUP);
    59d8:	2102      	movs	r1, #2
    59da:	7960      	ldrb	r0, [r4, #5]
    59dc:	f7fe f874 	bl	3ac8 <pinMode>
    59e0:	23a0      	movs	r3, #160	; 0xa0
    59e2:	3b01      	subs	r3, #1
    59e4:	d1fd      	bne.n	59e2 <_ZN3DHT4readEb+0x6e>
    if (expectPulse(LOW) == 0) {
    59e6:	0029      	movs	r1, r5
    59e8:	0020      	movs	r0, r4
    59ea:	f7ff ffb1 	bl	5950 <_ZN3DHT11expectPulseEb>
    59ee:	42a8      	cmp	r0, r5
    59f0:	d103      	bne.n	59fa <_ZN3DHT4readEb+0x86>
      _lastresult = false;
    59f2:	2000      	movs	r0, #0
    59f4:	7420      	strb	r0, [r4, #16]
  __ASM volatile ("cpsie i" : : : "memory");
    59f6:	b662      	cpsie	i
    59f8:	e7ca      	b.n	5990 <_ZN3DHT4readEb+0x1c>
    if (expectPulse(HIGH) == 0) {
    59fa:	2101      	movs	r1, #1
    59fc:	0020      	movs	r0, r4
    59fe:	f7ff ffa7 	bl	5950 <_ZN3DHT11expectPulseEb>
    5a02:	2800      	cmp	r0, #0
    5a04:	d0f5      	beq.n	59f2 <_ZN3DHT4readEb+0x7e>
    for (int i=0; i<80; i+=2) {
    5a06:	26a0      	movs	r6, #160	; 0xa0
    5a08:	0076      	lsls	r6, r6, #1
      cycles[i]   = expectPulse(LOW);
    5a0a:	2100      	movs	r1, #0
    5a0c:	0020      	movs	r0, r4
    5a0e:	f7ff ff9f 	bl	5950 <_ZN3DHT11expectPulseEb>
    5a12:	466b      	mov	r3, sp
      cycles[i+1] = expectPulse(HIGH);
    5a14:	2101      	movs	r1, #1
      cycles[i]   = expectPulse(LOW);
    5a16:	50e8      	str	r0, [r5, r3]
      cycles[i+1] = expectPulse(HIGH);
    5a18:	0020      	movs	r0, r4
    5a1a:	f7ff ff99 	bl	5950 <_ZN3DHT11expectPulseEb>
    5a1e:	002b      	movs	r3, r5
    5a20:	3508      	adds	r5, #8
    5a22:	446b      	add	r3, sp
    5a24:	6058      	str	r0, [r3, #4]
    for (int i=0; i<80; i+=2) {
    5a26:	42b5      	cmp	r5, r6
    5a28:	d1ef      	bne.n	5a0a <_ZN3DHT4readEb+0x96>
    5a2a:	b662      	cpsie	i
  for (int i=0; i<40; ++i) {
    5a2c:	2200      	movs	r2, #0
      data[i/8] |= 1;
    5a2e:	2101      	movs	r1, #1
    uint32_t lowCycles  = cycles[2*i];
    5a30:	4668      	mov	r0, sp
    5a32:	00d3      	lsls	r3, r2, #3
    5a34:	58c0      	ldr	r0, [r0, r3]
    uint32_t highCycles = cycles[2*i+1];
    5a36:	446b      	add	r3, sp
    5a38:	685e      	ldr	r6, [r3, #4]
    if ((lowCycles == 0) || (highCycles == 0)) {
    5a3a:	2800      	cmp	r0, #0
    5a3c:	d001      	beq.n	5a42 <_ZN3DHT4readEb+0xce>
    5a3e:	2e00      	cmp	r6, #0
    5a40:	d102      	bne.n	5a48 <_ZN3DHT4readEb+0xd4>
      _lastresult = false;
    5a42:	2000      	movs	r0, #0
    _lastresult = true;
    5a44:	7420      	strb	r0, [r4, #16]
    return _lastresult;
    5a46:	e7a3      	b.n	5990 <_ZN3DHT4readEb+0x1c>
    data[i/8] <<= 1;
    5a48:	10d5      	asrs	r5, r2, #3
    5a4a:	5d63      	ldrb	r3, [r4, r5]
    5a4c:	005b      	lsls	r3, r3, #1
    5a4e:	b2db      	uxtb	r3, r3
    if (highCycles > lowCycles) {
    5a50:	42b0      	cmp	r0, r6
    5a52:	d310      	bcc.n	5a76 <_ZN3DHT4readEb+0x102>
  for (int i=0; i<40; ++i) {
    5a54:	3201      	adds	r2, #1
      data[i/8] |= 1;
    5a56:	5563      	strb	r3, [r4, r5]
  for (int i=0; i<40; ++i) {
    5a58:	2a28      	cmp	r2, #40	; 0x28
    5a5a:	d1e9      	bne.n	5a30 <_ZN3DHT4readEb+0xbc>
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    5a5c:	7861      	ldrb	r1, [r4, #1]
    5a5e:	7823      	ldrb	r3, [r4, #0]
    5a60:	7922      	ldrb	r2, [r4, #4]
    5a62:	185b      	adds	r3, r3, r1
    5a64:	78a1      	ldrb	r1, [r4, #2]
    5a66:	185b      	adds	r3, r3, r1
    5a68:	78e1      	ldrb	r1, [r4, #3]
    5a6a:	185b      	adds	r3, r3, r1
    5a6c:	b2db      	uxtb	r3, r3
    5a6e:	429a      	cmp	r2, r3
    5a70:	d1e7      	bne.n	5a42 <_ZN3DHT4readEb+0xce>
    _lastresult = true;
    5a72:	2001      	movs	r0, #1
    5a74:	e7e6      	b.n	5a44 <_ZN3DHT4readEb+0xd0>
      data[i/8] |= 1;
    5a76:	430b      	orrs	r3, r1
    5a78:	e7ec      	b.n	5a54 <_ZN3DHT4readEb+0xe0>
    5a7a:	46c0      	nop			; (mov r8, r8)
    5a7c:	000007cf 	.word	0x000007cf

00005a80 <_ZN3DHT15readTemperatureEbb>:
float DHT::readTemperature(bool S, bool force) {
    5a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a82:	000d      	movs	r5, r1
  if (read(force)) {
    5a84:	0011      	movs	r1, r2
float DHT::readTemperature(bool S, bool force) {
    5a86:	0004      	movs	r4, r0
  if (read(force)) {
    5a88:	f7ff ff74 	bl	5974 <_ZN3DHT4readEb>
    5a8c:	2800      	cmp	r0, #0
    5a8e:	d007      	beq.n	5aa0 <_ZN3DHT15readTemperatureEbb+0x20>
    switch (_type) {
    5a90:	79a3      	ldrb	r3, [r4, #6]
    5a92:	b2da      	uxtb	r2, r3
    5a94:	2a0b      	cmp	r2, #11
    5a96:	d005      	beq.n	5aa4 <_ZN3DHT15readTemperatureEbb+0x24>
    5a98:	d302      	bcc.n	5aa0 <_ZN3DHT15readTemperatureEbb+0x20>
    5a9a:	3b15      	subs	r3, #21
    5a9c:	2b01      	cmp	r3, #1
    5a9e:	d913      	bls.n	5ac8 <_ZN3DHT15readTemperatureEbb+0x48>
  float f = NAN;
    5aa0:	4819      	ldr	r0, [pc, #100]	; (5b08 <_ZN3DHT15readTemperatureEbb+0x88>)
  return f;
    5aa2:	e010      	b.n	5ac6 <_ZN3DHT15readTemperatureEbb+0x46>
      f = data[2];
    5aa4:	78a0      	ldrb	r0, [r4, #2]
    5aa6:	f004 ff87 	bl	a9b8 <__aeabi_ui2f>
      if(S) {
    5aaa:	2d00      	cmp	r5, #0
    5aac:	d00b      	beq.n	5ac6 <_ZN3DHT15readTemperatureEbb+0x46>
  return c * 1.8 + 32;
    5aae:	f006 fd71 	bl	c594 <__aeabi_f2d>
    5ab2:	4a16      	ldr	r2, [pc, #88]	; (5b0c <_ZN3DHT15readTemperatureEbb+0x8c>)
    5ab4:	4b16      	ldr	r3, [pc, #88]	; (5b10 <_ZN3DHT15readTemperatureEbb+0x90>)
    5ab6:	f005 ff09 	bl	b8cc <__aeabi_dmul>
    5aba:	2200      	movs	r2, #0
    5abc:	4b15      	ldr	r3, [pc, #84]	; (5b14 <_ZN3DHT15readTemperatureEbb+0x94>)
    5abe:	f004 ffc1 	bl	aa44 <__aeabi_dadd>
    5ac2:	f006 fdb9 	bl	c638 <__aeabi_d2f>
}
    5ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      f = data[2] & 0x7F;
    5ac8:	207f      	movs	r0, #127	; 0x7f
    5aca:	78a6      	ldrb	r6, [r4, #2]
    5acc:	4030      	ands	r0, r6
    5ace:	f004 ff23 	bl	a918 <__aeabi_i2f>
      f *= 256;
    5ad2:	2187      	movs	r1, #135	; 0x87
    5ad4:	05c9      	lsls	r1, r1, #23
    5ad6:	f004 fc2b 	bl	a330 <__aeabi_fmul>
    5ada:	1c07      	adds	r7, r0, #0
      f += data[3];
    5adc:	78e0      	ldrb	r0, [r4, #3]
    5ade:	f004 ff1b 	bl	a918 <__aeabi_i2f>
    5ae2:	1c39      	adds	r1, r7, #0
    5ae4:	f004 f8a2 	bl	9c2c <__aeabi_fadd>
      f *= 0.1;
    5ae8:	f006 fd54 	bl	c594 <__aeabi_f2d>
    5aec:	4a0a      	ldr	r2, [pc, #40]	; (5b18 <_ZN3DHT15readTemperatureEbb+0x98>)
    5aee:	4b0b      	ldr	r3, [pc, #44]	; (5b1c <_ZN3DHT15readTemperatureEbb+0x9c>)
    5af0:	f005 feec 	bl	b8cc <__aeabi_dmul>
      if (data[2] & 0x80) {
    5af4:	b276      	sxtb	r6, r6
      f *= 0.1;
    5af6:	f006 fd9f 	bl	c638 <__aeabi_d2f>
      if (data[2] & 0x80) {
    5afa:	2e00      	cmp	r6, #0
    5afc:	dad5      	bge.n	5aaa <_ZN3DHT15readTemperatureEbb+0x2a>
        f *= -1;
    5afe:	2380      	movs	r3, #128	; 0x80
    5b00:	061b      	lsls	r3, r3, #24
    5b02:	18c0      	adds	r0, r0, r3
    5b04:	e7d1      	b.n	5aaa <_ZN3DHT15readTemperatureEbb+0x2a>
    5b06:	46c0      	nop			; (mov r8, r8)
    5b08:	7fc00000 	.word	0x7fc00000
    5b0c:	cccccccd 	.word	0xcccccccd
    5b10:	3ffccccc 	.word	0x3ffccccc
    5b14:	40400000 	.word	0x40400000
    5b18:	9999999a 	.word	0x9999999a
    5b1c:	3fb99999 	.word	0x3fb99999

00005b20 <_ZN3DHT12readHumidityEb>:
float DHT::readHumidity(bool force) {
    5b20:	b570      	push	{r4, r5, r6, lr}
  if (read()) {
    5b22:	2100      	movs	r1, #0
float DHT::readHumidity(bool force) {
    5b24:	0004      	movs	r4, r0
  if (read()) {
    5b26:	f7ff ff25 	bl	5974 <_ZN3DHT4readEb>
    5b2a:	2800      	cmp	r0, #0
    5b2c:	d007      	beq.n	5b3e <_ZN3DHT12readHumidityEb+0x1e>
    switch (_type) {
    5b2e:	79a3      	ldrb	r3, [r4, #6]
    5b30:	b2da      	uxtb	r2, r3
    5b32:	2a0b      	cmp	r2, #11
    5b34:	d005      	beq.n	5b42 <_ZN3DHT12readHumidityEb+0x22>
    5b36:	d302      	bcc.n	5b3e <_ZN3DHT12readHumidityEb+0x1e>
    5b38:	3b15      	subs	r3, #21
    5b3a:	2b01      	cmp	r3, #1
    5b3c:	d905      	bls.n	5b4a <_ZN3DHT12readHumidityEb+0x2a>
  float f = NAN;
    5b3e:	480e      	ldr	r0, [pc, #56]	; (5b78 <_ZN3DHT12readHumidityEb+0x58>)
  return f;
    5b40:	e002      	b.n	5b48 <_ZN3DHT12readHumidityEb+0x28>
      f = data[0];
    5b42:	7820      	ldrb	r0, [r4, #0]
    5b44:	f004 ff38 	bl	a9b8 <__aeabi_ui2f>
}
    5b48:	bd70      	pop	{r4, r5, r6, pc}
      f = data[0];
    5b4a:	7820      	ldrb	r0, [r4, #0]
    5b4c:	f004 ff34 	bl	a9b8 <__aeabi_ui2f>
      f *= 256;
    5b50:	2187      	movs	r1, #135	; 0x87
    5b52:	05c9      	lsls	r1, r1, #23
    5b54:	f004 fbec 	bl	a330 <__aeabi_fmul>
    5b58:	1c05      	adds	r5, r0, #0
      f += data[1];
    5b5a:	7860      	ldrb	r0, [r4, #1]
    5b5c:	f004 fedc 	bl	a918 <__aeabi_i2f>
    5b60:	1c29      	adds	r1, r5, #0
    5b62:	f004 f863 	bl	9c2c <__aeabi_fadd>
      f *= 0.1;
    5b66:	f006 fd15 	bl	c594 <__aeabi_f2d>
    5b6a:	4a04      	ldr	r2, [pc, #16]	; (5b7c <_ZN3DHT12readHumidityEb+0x5c>)
    5b6c:	4b04      	ldr	r3, [pc, #16]	; (5b80 <_ZN3DHT12readHumidityEb+0x60>)
    5b6e:	f005 fead 	bl	b8cc <__aeabi_dmul>
    5b72:	f006 fd61 	bl	c638 <__aeabi_d2f>
      break;
    5b76:	e7e7      	b.n	5b48 <_ZN3DHT12readHumidityEb+0x28>
    5b78:	7fc00000 	.word	0x7fc00000
    5b7c:	9999999a 	.word	0x9999999a
    5b80:	3fb99999 	.word	0x3fb99999

00005b84 <_ZN13FilterOnePole12setFrequencyEf>:
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
    5b84:	b510      	push	{r4, lr}
    5b86:	0004      	movs	r4, r0
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    5b88:	1c08      	adds	r0, r1, #0
    5b8a:	f006 fd03 	bl	c594 <__aeabi_f2d>
    5b8e:	4a08      	ldr	r2, [pc, #32]	; (5bb0 <_ZN13FilterOnePole12setFrequencyEf+0x2c>)
    5b90:	4b08      	ldr	r3, [pc, #32]	; (5bb4 <_ZN13FilterOnePole12setFrequencyEf+0x30>)
    5b92:	f005 fe9b 	bl	b8cc <__aeabi_dmul>
    5b96:	0002      	movs	r2, r0
    5b98:	000b      	movs	r3, r1
    5b9a:	2000      	movs	r0, #0
    5b9c:	4906      	ldr	r1, [pc, #24]	; (5bb8 <_ZN13FilterOnePole12setFrequencyEf+0x34>)
    5b9e:	f005 fa61 	bl	b064 <__aeabi_ddiv>
    5ba2:	f006 fd49 	bl	c638 <__aeabi_d2f>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    5ba6:	4905      	ldr	r1, [pc, #20]	; (5bbc <_ZN13FilterOnePole12setFrequencyEf+0x38>)
    5ba8:	f004 fbc2 	bl	a330 <__aeabi_fmul>
    5bac:	6060      	str	r0, [r4, #4]
}
    5bae:	bd10      	pop	{r4, pc}
    5bb0:	54442d18 	.word	0x54442d18
    5bb4:	401921fb 	.word	0x401921fb
    5bb8:	3ff00000 	.word	0x3ff00000
    5bbc:	49742400 	.word	0x49742400

00005bc0 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>:
void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
    5bc0:	b570      	push	{r4, r5, r6, lr}
    5bc2:	0004      	movs	r4, r0
    5bc4:	1c1d      	adds	r5, r3, #0
  FT = ft;
    5bc6:	7001      	strb	r1, [r0, #0]
  setFrequency( fc );
    5bc8:	1c11      	adds	r1, r2, #0
    5bca:	f7ff ffdb 	bl	5b84 <_ZN13FilterOnePole12setFrequencyEf>
  Y = initialValue;
    5bce:	60e5      	str	r5, [r4, #12]
  Ylast = initialValue;
    5bd0:	6125      	str	r5, [r4, #16]
  X = initialValue;
    5bd2:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    5bd4:	f7fc fd4c 	bl	2670 <micros>
    5bd8:	61e0      	str	r0, [r4, #28]
}
    5bda:	bd70      	pop	{r4, r5, r6, pc}

00005bdc <_ZN13FilterOnePole6outputEv>:
}

float FilterOnePole::output() {
    5bdc:	b5d0      	push	{r4, r6, r7, lr}
    5bde:	0004      	movs	r4, r0
    // figure out which button to read
  switch (FT) {
    5be0:	7800      	ldrb	r0, [r0, #0]
    5be2:	2803      	cmp	r0, #3
    5be4:	d835      	bhi.n	5c52 <_ZN13FilterOnePole6outputEv+0x76>
    5be6:	f003 fdf3 	bl	97d0 <__gnu_thumb1_case_uqi>
    5bea:	0219      	.short	0x0219
    5bec:	1e04      	.short	0x1e04
    case LOWPASS:         
      // return the last value
      return Y; 
    5bee:	68e0      	ldr	r0, [r4, #12]
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    5bf0:	bdd0      	pop	{r4, r6, r7, pc}
      return Y * (TauUS/1.0e6);
    5bf2:	6860      	ldr	r0, [r4, #4]
    5bf4:	f006 fcce 	bl	c594 <__aeabi_f2d>
    5bf8:	2200      	movs	r2, #0
    5bfa:	4b17      	ldr	r3, [pc, #92]	; (5c58 <_ZN13FilterOnePole6outputEv+0x7c>)
    5bfc:	f005 fa32 	bl	b064 <__aeabi_ddiv>
    5c00:	0006      	movs	r6, r0
    5c02:	68e0      	ldr	r0, [r4, #12]
    5c04:	000f      	movs	r7, r1
    5c06:	f006 fcc5 	bl	c594 <__aeabi_f2d>
    5c0a:	0002      	movs	r2, r0
    5c0c:	000b      	movs	r3, r1
    5c0e:	0030      	movs	r0, r6
    5c10:	0039      	movs	r1, r7
    5c12:	f005 fe5b 	bl	b8cc <__aeabi_dmul>
      return (X-Y)/(TauUS/1.0e6);
    5c16:	f006 fd0f 	bl	c638 <__aeabi_d2f>
    5c1a:	e7e9      	b.n	5bf0 <_ZN13FilterOnePole6outputEv+0x14>
      return X-Y;
    5c1c:	68e1      	ldr	r1, [r4, #12]
    5c1e:	6960      	ldr	r0, [r4, #20]
    5c20:	f004 fca6 	bl	a570 <__aeabi_fsub>
    5c24:	e7e4      	b.n	5bf0 <_ZN13FilterOnePole6outputEv+0x14>
      return (X-Y)/(TauUS/1.0e6);
    5c26:	68e1      	ldr	r1, [r4, #12]
    5c28:	6960      	ldr	r0, [r4, #20]
    5c2a:	f004 fca1 	bl	a570 <__aeabi_fsub>
    5c2e:	f006 fcb1 	bl	c594 <__aeabi_f2d>
    5c32:	0006      	movs	r6, r0
    5c34:	6860      	ldr	r0, [r4, #4]
    5c36:	000f      	movs	r7, r1
    5c38:	f006 fcac 	bl	c594 <__aeabi_f2d>
    5c3c:	2200      	movs	r2, #0
    5c3e:	4b06      	ldr	r3, [pc, #24]	; (5c58 <_ZN13FilterOnePole6outputEv+0x7c>)
    5c40:	f005 fa10 	bl	b064 <__aeabi_ddiv>
    5c44:	0002      	movs	r2, r0
    5c46:	000b      	movs	r3, r1
    5c48:	0030      	movs	r0, r6
    5c4a:	0039      	movs	r1, r7
    5c4c:	f005 fa0a 	bl	b064 <__aeabi_ddiv>
    5c50:	e7e1      	b.n	5c16 <_ZN13FilterOnePole6outputEv+0x3a>
      return 0;
    5c52:	2000      	movs	r0, #0
    5c54:	e7cc      	b.n	5bf0 <_ZN13FilterOnePole6outputEv+0x14>
    5c56:	46c0      	nop			; (mov r8, r8)
    5c58:	412e8480 	.word	0x412e8480

00005c5c <_ZN13FilterOnePole5inputEf>:
float FilterOnePole::input( float inVal ) {
    5c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c5e:	0004      	movs	r4, r0
    5c60:	1c0e      	adds	r6, r1, #0
  long time = micros();
    5c62:	f7fc fd05 	bl	2670 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5c66:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    5c68:	0005      	movs	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5c6a:	1ac0      	subs	r0, r0, r3
    5c6c:	f004 fe54 	bl	a918 <__aeabi_i2f>
  Ylast = Y;
    5c70:	68e3      	ldr	r3, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5c72:	1c01      	adds	r1, r0, #0
  Ylast = Y;
    5c74:	6123      	str	r3, [r4, #16]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5c76:	61a0      	str	r0, [r4, #24]
  LastUS = time;                      // update this now
    5c78:	61e5      	str	r5, [r4, #28]
  X = inVal;                          // this is now the most recent input value
    5c7a:	6166      	str	r6, [r4, #20]
  TauSamps = TauUS / ElapsedUS;
    5c7c:	6860      	ldr	r0, [r4, #4]
    5c7e:	f004 f967 	bl	9f50 <__aeabi_fdiv>
    5c82:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    5c84:	f006 fc86 	bl	c594 <__aeabi_f2d>
    5c88:	0002      	movs	r2, r0
    5c8a:	000b      	movs	r3, r1
    5c8c:	2000      	movs	r0, #0
    5c8e:	4918      	ldr	r1, [pc, #96]	; (5cf0 <_ZN13FilterOnePole5inputEf+0x94>)
    5c90:	f005 f9e8 	bl	b064 <__aeabi_ddiv>
    5c94:	f003 faee 	bl	9274 <exp>
    5c98:	f006 fcce 	bl	c638 <__aeabi_d2f>
    5c9c:	1c05      	adds	r5, r0, #0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    5c9e:	f006 fc79 	bl	c594 <__aeabi_f2d>
    5ca2:	0002      	movs	r2, r0
    5ca4:	000b      	movs	r3, r1
    5ca6:	2000      	movs	r0, #0
    5ca8:	4912      	ldr	r1, [pc, #72]	; (5cf4 <_ZN13FilterOnePole5inputEf+0x98>)
    5caa:	f006 f88f 	bl	bdcc <__aeabi_dsub>
    5cae:	0006      	movs	r6, r0
    5cb0:	6960      	ldr	r0, [r4, #20]
    5cb2:	000f      	movs	r7, r1
    5cb4:	f006 fc6e 	bl	c594 <__aeabi_f2d>
    5cb8:	0002      	movs	r2, r0
    5cba:	000b      	movs	r3, r1
    5cbc:	0030      	movs	r0, r6
    5cbe:	0039      	movs	r1, r7
    5cc0:	f005 fe04 	bl	b8cc <__aeabi_dmul>
    5cc4:	0006      	movs	r6, r0
    5cc6:	000f      	movs	r7, r1
    5cc8:	1c28      	adds	r0, r5, #0
    5cca:	6921      	ldr	r1, [r4, #16]
    5ccc:	f004 fb30 	bl	a330 <__aeabi_fmul>
    5cd0:	f006 fc60 	bl	c594 <__aeabi_f2d>
    5cd4:	0002      	movs	r2, r0
    5cd6:	000b      	movs	r3, r1
    5cd8:	0030      	movs	r0, r6
    5cda:	0039      	movs	r1, r7
    5cdc:	f004 feb2 	bl	aa44 <__aeabi_dadd>
    5ce0:	f006 fcaa 	bl	c638 <__aeabi_d2f>
    5ce4:	60e0      	str	r0, [r4, #12]
  return output();
    5ce6:	0020      	movs	r0, r4
    5ce8:	f7ff ff78 	bl	5bdc <_ZN13FilterOnePole6outputEv>
}
    5cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5cee:	46c0      	nop			; (mov r8, r8)
    5cf0:	bff00000 	.word	0xbff00000
    5cf4:	3ff00000 	.word	0x3ff00000

00005cf8 <_ZN20FilterOnePoleCascadeC1Eff>:
}


// stuff for filter2 (lowpass only)
// should be able to set a separate fall time as well
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  setFilter( ft, fc, initialValue );
    5cfa:	26fe      	movs	r6, #254	; 0xfe
    5cfc:	2700      	movs	r7, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5cfe:	0004      	movs	r4, r0
  setFilter( ft, fc, initialValue );
    5d00:	05b6      	lsls	r6, r6, #22
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5d02:	1c15      	adds	r5, r2, #0
  setFilter( ft, fc, initialValue );
    5d04:	1c3b      	adds	r3, r7, #0
    5d06:	1c32      	adds	r2, r6, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5d08:	9101      	str	r1, [sp, #4]
  setFilter( ft, fc, initialValue );
    5d0a:	2101      	movs	r1, #1
    5d0c:	f7ff ff58 	bl	5bc0 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5d10:	0020      	movs	r0, r4
  setFilter( ft, fc, initialValue );
    5d12:	1c3b      	adds	r3, r7, #0
    5d14:	1c32      	adds	r2, r6, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5d16:	3020      	adds	r0, #32
  setFilter( ft, fc, initialValue );
    5d18:	2101      	movs	r1, #1
    5d1a:	f7ff ff51 	bl	5bc0 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>
}

void FilterOnePoleCascade::setRiseTime( float riseTime ) {
  float tauScale = 3.36;      // found emperically, by running test();

  Pole1.setTau( riseTime / tauScale );
    5d1e:	4908      	ldr	r1, [pc, #32]	; (5d40 <_ZN20FilterOnePoleCascadeC1Eff+0x48>)
    5d20:	9801      	ldr	r0, [sp, #4]
    5d22:	f004 f915 	bl	9f50 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
    5d26:	4907      	ldr	r1, [pc, #28]	; (5d44 <_ZN20FilterOnePoleCascadeC1Eff+0x4c>)
    5d28:	f004 fb02 	bl	a330 <__aeabi_fmul>
    5d2c:	6060      	str	r0, [r4, #4]
    5d2e:	6260      	str	r0, [r4, #36]	; 0x24
  Y = Ylast = X = newVal;
    5d30:	6165      	str	r5, [r4, #20]
    5d32:	6125      	str	r5, [r4, #16]
    5d34:	60e5      	str	r5, [r4, #12]
    5d36:	6365      	str	r5, [r4, #52]	; 0x34
    5d38:	6325      	str	r5, [r4, #48]	; 0x30
    5d3a:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    5d3c:	0020      	movs	r0, r4
    5d3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5d40:	40570a3d 	.word	0x40570a3d
    5d44:	49742400 	.word	0x49742400

00005d48 <_ZN20FilterOnePoleCascade11setRiseTimeEf>:
void FilterOnePoleCascade::setRiseTime( float riseTime ) {
    5d48:	b510      	push	{r4, lr}
    5d4a:	0004      	movs	r4, r0
    5d4c:	1c08      	adds	r0, r1, #0
  Pole1.setTau( riseTime / tauScale );
    5d4e:	4904      	ldr	r1, [pc, #16]	; (5d60 <_ZN20FilterOnePoleCascade11setRiseTimeEf+0x18>)
    5d50:	f004 f8fe 	bl	9f50 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
    5d54:	4903      	ldr	r1, [pc, #12]	; (5d64 <_ZN20FilterOnePoleCascade11setRiseTimeEf+0x1c>)
    5d56:	f004 faeb 	bl	a330 <__aeabi_fmul>
    5d5a:	6060      	str	r0, [r4, #4]
    5d5c:	6260      	str	r0, [r4, #36]	; 0x24
  Pole2.setTau( riseTime / tauScale );
}
    5d5e:	bd10      	pop	{r4, pc}
    5d60:	40570a3d 	.word	0x40570a3d
    5d64:	49742400 	.word	0x49742400

00005d68 <_ZN20FilterOnePoleCascade5inputEf>:

float FilterOnePoleCascade::input( float inVal  ) {
    5d68:	b510      	push	{r4, lr}
  Pole2.input( Pole1.input( inVal ));
    5d6a:	0004      	movs	r4, r0
    5d6c:	f7ff ff76 	bl	5c5c <_ZN13FilterOnePole5inputEf>
    5d70:	3420      	adds	r4, #32
    5d72:	1c01      	adds	r1, r0, #0
    5d74:	0020      	movs	r0, r4
    5d76:	f7ff ff71 	bl	5c5c <_ZN13FilterOnePole5inputEf>
  Pole1.setToNewValue( newVal );
  Pole2.setToNewValue( newVal );
}

float FilterOnePoleCascade::output() {
  return Pole2.output();
    5d7a:	0020      	movs	r0, r4
    5d7c:	f7ff ff2e 	bl	5bdc <_ZN13FilterOnePole6outputEv>
}
    5d80:	bd10      	pop	{r4, pc}

00005d82 <_ZN20FilterOnePoleCascade13setToNewValueEf>:
  Y = Ylast = X = newVal;
    5d82:	6141      	str	r1, [r0, #20]
    5d84:	6101      	str	r1, [r0, #16]
    5d86:	60c1      	str	r1, [r0, #12]
    5d88:	6341      	str	r1, [r0, #52]	; 0x34
    5d8a:	6301      	str	r1, [r0, #48]	; 0x30
    5d8c:	62c1      	str	r1, [r0, #44]	; 0x2c
}
    5d8e:	4770      	bx	lr

00005d90 <_ZN20FilterOnePoleCascade6outputEv>:
float FilterOnePoleCascade::output() {
    5d90:	b510      	push	{r4, lr}
  return Pole2.output();
    5d92:	3020      	adds	r0, #32
    5d94:	f7ff ff22 	bl	5bdc <_ZN13FilterOnePole6outputEv>
}
    5d98:	bd10      	pop	{r4, pc}
	...

00005d9c <_ZL15is_rtc_syncbusyv>:
}


static inline bool is_rtc_syncbusy()
{
	if (RTC->MODE2.SYNCBUSY.reg)
    5d9c:	4b02      	ldr	r3, [pc, #8]	; (5da8 <_ZL15is_rtc_syncbusyv+0xc>)
    5d9e:	6918      	ldr	r0, [r3, #16]
    5da0:	1e43      	subs	r3, r0, #1
    5da2:	4198      	sbcs	r0, r3
    5da4:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	
	return false;
}
    5da6:	4770      	bx	lr
    5da8:	40002000 	.word	0x40002000

00005dac <_ZN7RTCZeroC1Ev>:
	_configured = false;
    5dac:	2300      	movs	r3, #0
    5dae:	7003      	strb	r3, [r0, #0]
}
    5db0:	4770      	bx	lr
	...

00005db4 <_ZN7RTCZero12rtc_get_timeEv>:
{
    5db4:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    5db6:	f7ff fff1 	bl	5d9c <_ZL15is_rtc_syncbusyv>
    5dba:	2800      	cmp	r0, #0
    5dbc:	d1fb      	bne.n	5db6 <_ZN7RTCZero12rtc_get_timeEv+0x2>
	uint32_t register_value = RTC->MODE2.CLOCK.reg;
    5dbe:	4b01      	ldr	r3, [pc, #4]	; (5dc4 <_ZN7RTCZero12rtc_get_timeEv+0x10>)
    5dc0:	6998      	ldr	r0, [r3, #24]
}
    5dc2:	bd10      	pop	{r4, pc}
    5dc4:	40002000 	.word	0x40002000

00005dc8 <_ZN7RTCZero10getSecondsEv>:
{
    5dc8:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5dca:	f7ff fff3 	bl	5db4 <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    5dce:	233f      	movs	r3, #63	; 0x3f
    5dd0:	4018      	ands	r0, r3
}
    5dd2:	bd10      	pop	{r4, pc}

00005dd4 <_ZN7RTCZero10getMinutesEv>:
{
    5dd4:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5dd6:	f7ff ffed 	bl	5db4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5dda:	0500      	lsls	r0, r0, #20
	return value;
    5ddc:	0e80      	lsrs	r0, r0, #26
}
    5dde:	bd10      	pop	{r4, pc}

00005de0 <_ZN7RTCZero8getHoursEv>:
{
    5de0:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5de2:	f7ff ffe7 	bl	5db4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    5de6:	03c0      	lsls	r0, r0, #15
	return value;
    5de8:	0ec0      	lsrs	r0, r0, #27
}
    5dea:	bd10      	pop	{r4, pc}

00005dec <_ZN7RTCZero6getDayEv>:
{
    5dec:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5dee:	f7ff ffe1 	bl	5db4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5df2:	0280      	lsls	r0, r0, #10
	return value;
    5df4:	0ec0      	lsrs	r0, r0, #27
}
    5df6:	bd10      	pop	{r4, pc}

00005df8 <_ZN7RTCZero8getMonthEv>:
{
    5df8:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5dfa:	f7ff ffdb 	bl	5db4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    5dfe:	0180      	lsls	r0, r0, #6
	return value;
    5e00:	0f00      	lsrs	r0, r0, #28
}
    5e02:	bd10      	pop	{r4, pc}

00005e04 <_ZN7RTCZero7getYearEv>:
{
    5e04:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5e06:	f7ff ffd5 	bl	5db4 <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    5e0a:	0e80      	lsrs	r0, r0, #26
}
    5e0c:	bd10      	pop	{r4, pc}
	...

00005e10 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>:
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    5e10:	88c8      	ldrh	r0, [r1, #6]
    5e12:	4b09      	ldr	r3, [pc, #36]	; (5e38 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value+0x28>)
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    5e14:	78ca      	ldrb	r2, [r1, #3]
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    5e16:	18c0      	adds	r0, r0, r3
    5e18:	0683      	lsls	r3, r0, #26
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    5e1a:	7908      	ldrb	r0, [r1, #4]
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    5e1c:	0452      	lsls	r2, r2, #17
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    5e1e:	0580      	lsls	r0, r0, #22
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5e20:	4310      	orrs	r0, r2
    5e22:	780a      	ldrb	r2, [r1, #0]
    5e24:	4310      	orrs	r0, r2
	clock_reg_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    5e26:	788a      	ldrb	r2, [r1, #2]
    5e28:	0312      	lsls	r2, r2, #12
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5e2a:	4310      	orrs	r0, r2
	clock_reg_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    5e2c:	784a      	ldrb	r2, [r1, #1]
    5e2e:	0192      	lsls	r2, r2, #6
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5e30:	4310      	orrs	r0, r2
    5e32:	4318      	orrs	r0, r3
}
    5e34:	4770      	bx	lr
    5e36:	46c0      	nop			; (mov r8, r8)
    5e38:	fffff830 	.word	0xfffff830

00005e3c <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>:
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5e3c:	20fa      	movs	r0, #250	; 0xfa
{
    5e3e:	b510      	push	{r4, lr}
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5e40:	241f      	movs	r4, #31
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5e42:	0e8b      	lsrs	r3, r1, #26
    5e44:	00c0      	lsls	r0, r0, #3
    5e46:	181b      	adds	r3, r3, r0
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5e48:	0c48      	lsrs	r0, r1, #17
    5e4a:	4020      	ands	r0, r4
    5e4c:	70d0      	strb	r0, [r2, #3]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5e4e:	203f      	movs	r0, #63	; 0x3f
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5e50:	80d3      	strh	r3, [r2, #6]
	time->month = ((clock_reg_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    5e52:	018b      	lsls	r3, r1, #6
    5e54:	0f1b      	lsrs	r3, r3, #28
    5e56:	7113      	strb	r3, [r2, #4]
	time->hour = ((clock_reg_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    5e58:	0b0b      	lsrs	r3, r1, #12
    5e5a:	4023      	ands	r3, r4
    5e5c:	7093      	strb	r3, [r2, #2]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5e5e:	098b      	lsrs	r3, r1, #6
    5e60:	4003      	ands	r3, r0
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    5e62:	4001      	ands	r1, r0
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5e64:	7053      	strb	r3, [r2, #1]
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    5e66:	7011      	strb	r1, [r2, #0]
}
    5e68:	bd10      	pop	{r4, pc}
	...

00005e6c <_ZN7RTCZero8getEpochEv>:
{
    5e6c:	b530      	push	{r4, r5, lr}
    5e6e:	b08d      	sub	sp, #52	; 0x34
    5e70:	0005      	movs	r5, r0
	uint32_t register_value = rtc_get_time();
    5e72:	f7ff ff9f 	bl	5db4 <_ZN7RTCZero12rtc_get_timeEv>
	rtc_register_value_to_time(register_value, &time);
    5e76:	ac01      	add	r4, sp, #4
	uint32_t register_value = rtc_get_time();
    5e78:	0001      	movs	r1, r0
	rtc_register_value_to_time(register_value, &time);
    5e7a:	0022      	movs	r2, r4
    5e7c:	0028      	movs	r0, r5
    5e7e:	f7ff ffdd 	bl	5e3c <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>
	tm.tm_year = time.year - 1900;		// Years since 1900
    5e82:	88e3      	ldrh	r3, [r4, #6]
    5e84:	4a09      	ldr	r2, [pc, #36]	; (5eac <_ZN7RTCZero8getEpochEv+0x40>)
	uint32_t epoch = mktime(&tm);
    5e86:	a803      	add	r0, sp, #12
	tm.tm_year = time.year - 1900;		// Years since 1900
    5e88:	189b      	adds	r3, r3, r2
    5e8a:	9308      	str	r3, [sp, #32]
	tm.tm_mon  = time.month - 1;
    5e8c:	7923      	ldrb	r3, [r4, #4]
    5e8e:	3b01      	subs	r3, #1
    5e90:	9307      	str	r3, [sp, #28]
	tm.tm_mday = time.day;
    5e92:	78e3      	ldrb	r3, [r4, #3]
    5e94:	9306      	str	r3, [sp, #24]
	tm.tm_hour = time.hour;
    5e96:	78a3      	ldrb	r3, [r4, #2]
    5e98:	9305      	str	r3, [sp, #20]
	tm.tm_min  = time.minute;
    5e9a:	7863      	ldrb	r3, [r4, #1]
    5e9c:	9304      	str	r3, [sp, #16]
	tm.tm_sec  = time.second;
    5e9e:	7823      	ldrb	r3, [r4, #0]
    5ea0:	9303      	str	r3, [sp, #12]
	uint32_t epoch = mktime(&tm);
    5ea2:	f006 fedd 	bl	cc60 <mktime>
}
    5ea6:	b00d      	add	sp, #52	; 0x34
    5ea8:	bd30      	pop	{r4, r5, pc}
    5eaa:	46c0      	nop			; (mov r8, r8)
    5eac:	fffff894 	.word	0xfffff894

00005eb0 <_ZN7RTCZero10RTCdisableEv>:


void RTCZero::RTCdisable()
{
    5eb0:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    5eb2:	f7ff ff73 	bl	5d9c <_ZL15is_rtc_syncbusyv>
    5eb6:	2800      	cmp	r0, #0
    5eb8:	d1fb      	bne.n	5eb2 <_ZN7RTCZero10RTCdisableEv+0x2>
		// Wait for synchronization
	}
	
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    5eba:	2102      	movs	r1, #2
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
    5ebc:	4b05      	ldr	r3, [pc, #20]	; (5ed4 <_ZN7RTCZero10RTCdisableEv+0x24>)
    5ebe:	4a06      	ldr	r2, [pc, #24]	; (5ed8 <_ZN7RTCZero10RTCdisableEv+0x28>)
    5ec0:	811a      	strh	r2, [r3, #8]
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
    5ec2:	819a      	strh	r2, [r3, #12]
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    5ec4:	881a      	ldrh	r2, [r3, #0]
    5ec6:	438a      	bics	r2, r1
    5ec8:	801a      	strh	r2, [r3, #0]
	
	while (is_rtc_syncbusy())
    5eca:	f7ff ff67 	bl	5d9c <_ZL15is_rtc_syncbusyv>
    5ece:	2800      	cmp	r0, #0
    5ed0:	d1fb      	bne.n	5eca <_ZN7RTCZero10RTCdisableEv+0x1a>
	{
		// Wait for synchronization
	}
}
    5ed2:	bd10      	pop	{r4, pc}
    5ed4:	40002000 	.word	0x40002000
    5ed8:	ffff81ff 	.word	0xffff81ff

00005edc <_ZN7RTCZero9RTCenableEv>:

void RTCZero::RTCenable()
{
    5edc:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    5ede:	f7ff ff5d 	bl	5d9c <_ZL15is_rtc_syncbusyv>
    5ee2:	2800      	cmp	r0, #0
    5ee4:	d1fb      	bne.n	5ede <_ZN7RTCZero9RTCenableEv+0x2>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;			// enable RTC
    5ee6:	2302      	movs	r3, #2
    5ee8:	4a04      	ldr	r2, [pc, #16]	; (5efc <_ZN7RTCZero9RTCenableEv+0x20>)
    5eea:	8811      	ldrh	r1, [r2, #0]
    5eec:	430b      	orrs	r3, r1
    5eee:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    5ef0:	f7ff ff54 	bl	5d9c <_ZL15is_rtc_syncbusyv>
    5ef4:	2800      	cmp	r0, #0
    5ef6:	d1fb      	bne.n	5ef0 <_ZN7RTCZero9RTCenableEv+0x14>
	{
		// Wait for synchronization
	}
}
    5ef8:	bd10      	pop	{r4, pc}
    5efa:	46c0      	nop			; (mov r8, r8)
    5efc:	40002000 	.word	0x40002000

00005f00 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>:
{
    5f00:	b570      	push	{r4, r5, r6, lr}
    5f02:	0005      	movs	r5, r0
	uint32_t register_value = rtc_time_to_register_value(time);
    5f04:	f7ff ff84 	bl	5e10 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>
    5f08:	0006      	movs	r6, r0
	while (is_rtc_syncbusy())
    5f0a:	f7ff ff47 	bl	5d9c <_ZL15is_rtc_syncbusyv>
    5f0e:	2800      	cmp	r0, #0
    5f10:	d1fb      	bne.n	5f0a <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0xa>
	RTC->MODE2.CLOCK.reg = register_value;
    5f12:	4c0b      	ldr	r4, [pc, #44]	; (5f40 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x40>)
	RTCdisable();
    5f14:	0028      	movs	r0, r5
    5f16:	f7ff ffcb 	bl	5eb0 <_ZN7RTCZero10RTCdisableEv>
	RTC->MODE2.CLOCK.reg = register_value;
    5f1a:	61a6      	str	r6, [r4, #24]
	while (is_rtc_syncbusy())
    5f1c:	f7ff ff3e 	bl	5d9c <_ZL15is_rtc_syncbusyv>
    5f20:	2800      	cmp	r0, #0
    5f22:	d1fb      	bne.n	5f1c <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x1c>
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_SYNCBUSY_CLOCKSYNC;
    5f24:	2280      	movs	r2, #128	; 0x80
    5f26:	8823      	ldrh	r3, [r4, #0]
    5f28:	0212      	lsls	r2, r2, #8
    5f2a:	4313      	orrs	r3, r2
    5f2c:	8023      	strh	r3, [r4, #0]
	while (is_rtc_syncbusy())
    5f2e:	f7ff ff35 	bl	5d9c <_ZL15is_rtc_syncbusyv>
    5f32:	2800      	cmp	r0, #0
    5f34:	d1fb      	bne.n	5f2e <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x2e>
	RTCenable();
    5f36:	0028      	movs	r0, r5
    5f38:	f7ff ffd0 	bl	5edc <_ZN7RTCZero9RTCenableEv>
}
    5f3c:	bd70      	pop	{r4, r5, r6, pc}
    5f3e:	46c0      	nop			; (mov r8, r8)
    5f40:	40002000 	.word	0x40002000

00005f44 <_ZN7RTCZero8setEpochEm>:
{
    5f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	time_t etime = epoch;
    5f46:	4b0e      	ldr	r3, [pc, #56]	; (5f80 <_ZN7RTCZero8setEpochEm+0x3c>)
{
    5f48:	0004      	movs	r4, r0
	time_t etime = epoch;
    5f4a:	4299      	cmp	r1, r3
    5f4c:	d200      	bcs.n	5f50 <_ZN7RTCZero8setEpochEm+0xc>
    5f4e:	0019      	movs	r1, r3
	struct tm* tmp = gmtime(&etime);
    5f50:	a801      	add	r0, sp, #4
	time_t etime = epoch;
    5f52:	9101      	str	r1, [sp, #4]
	struct tm* tmp = gmtime(&etime);
    5f54:	f006 fc5a 	bl	c80c <gmtime>
	time.day    = tmp->tm_mday;
    5f58:	7b03      	ldrb	r3, [r0, #12]
    5f5a:	a902      	add	r1, sp, #8
    5f5c:	70cb      	strb	r3, [r1, #3]
	time.month  = tmp->tm_mon + 1;
    5f5e:	6903      	ldr	r3, [r0, #16]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    5f60:	4a08      	ldr	r2, [pc, #32]	; (5f84 <_ZN7RTCZero8setEpochEm+0x40>)
	time.month  = tmp->tm_mon + 1;
    5f62:	3301      	adds	r3, #1
    5f64:	710b      	strb	r3, [r1, #4]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    5f66:	6943      	ldr	r3, [r0, #20]
    5f68:	189b      	adds	r3, r3, r2
    5f6a:	80cb      	strh	r3, [r1, #6]
	time.hour   = tmp->tm_hour;
    5f6c:	7a03      	ldrb	r3, [r0, #8]
    5f6e:	708b      	strb	r3, [r1, #2]
	time.minute = tmp->tm_min;
    5f70:	7903      	ldrb	r3, [r0, #4]
    5f72:	704b      	strb	r3, [r1, #1]
	time.second = tmp->tm_sec;
    5f74:	6803      	ldr	r3, [r0, #0]
	rtc_set_time(&time);
    5f76:	0020      	movs	r0, r4
	time.second = tmp->tm_sec;
    5f78:	700b      	strb	r3, [r1, #0]
	rtc_set_time(&time);
    5f7a:	f7ff ffc1 	bl	5f00 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
}
    5f7e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    5f80:	386d4380 	.word	0x386d4380
    5f84:	0000076c 	.word	0x0000076c

00005f88 <_ZN7RTCZero8RTCresetEv>:

void RTCZero::RTCreset()
{
    5f88:	b510      	push	{r4, lr}
	RTCdisable();
    5f8a:	f7ff ff91 	bl	5eb0 <_ZN7RTCZero10RTCdisableEv>
	
	while (is_rtc_syncbusy())
    5f8e:	f7ff ff05 	bl	5d9c <_ZL15is_rtc_syncbusyv>
    5f92:	2800      	cmp	r0, #0
    5f94:	d1fb      	bne.n	5f8e <_ZN7RTCZero8RTCresetEv+0x6>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;			// software reset
    5f96:	2301      	movs	r3, #1
    5f98:	4a04      	ldr	r2, [pc, #16]	; (5fac <_ZN7RTCZero8RTCresetEv+0x24>)
    5f9a:	8811      	ldrh	r1, [r2, #0]
    5f9c:	430b      	orrs	r3, r1
    5f9e:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    5fa0:	f7ff fefc 	bl	5d9c <_ZL15is_rtc_syncbusyv>
    5fa4:	2800      	cmp	r0, #0
    5fa6:	d1fb      	bne.n	5fa0 <_ZN7RTCZero8RTCresetEv+0x18>
	{
		// Wait for synchronization
	}
}
    5fa8:	bd10      	pop	{r4, pc}
    5faa:	46c0      	nop			; (mov r8, r8)
    5fac:	40002000 	.word	0x40002000

00005fb0 <_ZN7RTCZero5beginEv>:
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5fb0:	2380      	movs	r3, #128	; 0x80
{
    5fb2:	b510      	push	{r4, lr}
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5fb4:	4a09      	ldr	r2, [pc, #36]	; (5fdc <_ZN7RTCZero5beginEv+0x2c>)
    5fb6:	005b      	lsls	r3, r3, #1
    5fb8:	6951      	ldr	r1, [r2, #20]
{
    5fba:	0004      	movs	r4, r0
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5fbc:	430b      	orrs	r3, r1
    5fbe:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = OSC32KCTRL_RTCCTRL_RTCSEL_XOSC1K;
    5fc0:	2204      	movs	r2, #4
    5fc2:	4b07      	ldr	r3, [pc, #28]	; (5fe0 <_ZN7RTCZero5beginEv+0x30>)
    5fc4:	611a      	str	r2, [r3, #16]
	RTCreset();
    5fc6:	f7ff ffdf 	bl	5f88 <_ZN7RTCZero8RTCresetEv>
	RTC->MODE2.CTRLA.reg = tmp_reg;
    5fca:	4a06      	ldr	r2, [pc, #24]	; (5fe4 <_ZN7RTCZero5beginEv+0x34>)
    5fcc:	4b06      	ldr	r3, [pc, #24]	; (5fe8 <_ZN7RTCZero5beginEv+0x38>)
	RTCenable();
    5fce:	0020      	movs	r0, r4
	RTC->MODE2.CTRLA.reg = tmp_reg;
    5fd0:	801a      	strh	r2, [r3, #0]
	RTCenable();
    5fd2:	f7ff ff83 	bl	5edc <_ZN7RTCZero9RTCenableEv>
	_configured = true;
    5fd6:	2301      	movs	r3, #1
    5fd8:	7023      	strb	r3, [r4, #0]
}
    5fda:	bd10      	pop	{r4, pc}
    5fdc:	40000400 	.word	0x40000400
    5fe0:	40001000 	.word	0x40001000
    5fe4:	ffff8b08 	.word	0xffff8b08
    5fe8:	40002000 	.word	0x40002000

00005fec <_ZN8SPIFlashC1EhP8SPIClass>:
  cs_mask = digitalPinToBitMask(csPin);
  pinMode(csPin, OUTPUT);
  CHIP_DESELECT
}
#elif defined (ARDUINO_ARCH_SAMD) || defined (ARCH_STM32) || defined(ARDUINO_ARCH_ESP32)
SPIFlash::SPIFlash(uint8_t cs, SPIClass *spiinterface) {
    5fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    // The SAMD51 SERCOM runs at 96MHz when the cpu runs at 120MHz
    #if F_CPU == 120000000
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? 96000000ul / SPI_MIN_CLOCK_DIVIDER : clock);
    #else
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    5fee:	4b25      	ldr	r3, [pc, #148]	; (6084 <_ZN8SPIFlashC1EhP8SPIClass+0x98>)
    5ff0:	0016      	movs	r6, r2
  // Object declaration for the GPIO HAL type for csPin - @boseji <salearj@hotmail.com> 02.03.17
  gpio_t      csPin;
  #endif

  // Variables specific to using non-standard SPI (currently only tested with ESP32)
  struct _SPIPins {
    5ff2:	22ff      	movs	r2, #255	; 0xff
    5ff4:	6003      	str	r3, [r0, #0]
    #endif

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    5ff6:	2300      	movs	r3, #0
    5ff8:	000d      	movs	r5, r1
    5ffa:	2152      	movs	r1, #82	; 0x52
    5ffc:	7442      	strb	r2, [r0, #17]
    5ffe:	7482      	strb	r2, [r0, #18]
    6000:	74c2      	strb	r2, [r0, #19]
    6002:	7502      	strb	r2, [r0, #20]
    6004:	1c42      	adds	r2, r0, #1
    6006:	7143      	strb	r3, [r0, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    6008:	7103      	strb	r3, [r0, #4]
    600a:	7203      	strb	r3, [r0, #8]
    600c:	7743      	strb	r3, [r0, #29]
    600e:	7783      	strb	r3, [r0, #30]
    6010:	77c3      	strb	r3, [r0, #31]
    6012:	77d3      	strb	r3, [r2, #31]
    6014:	322a      	adds	r2, #42	; 0x2a
    6016:	7011      	strb	r1, [r2, #0]
    6018:	3105      	adds	r1, #5
    601a:	7051      	strb	r1, [r2, #1]
    601c:	2200      	movs	r2, #0
    601e:	0004      	movs	r4, r0
    6020:	4f19      	ldr	r7, [pc, #100]	; (6088 <_ZN8SPIFlashC1EhP8SPIClass+0x9c>)
    6022:	6783      	str	r3, [r0, #120]	; 0x78
    6024:	67c3      	str	r3, [r0, #124]	; 0x7c
    6026:	6302      	str	r2, [r0, #48]	; 0x30
    6028:	0039      	movs	r1, r7
    602a:	2212      	movs	r2, #18
    602c:	309c      	adds	r0, #156	; 0x9c
    602e:	f006 fd28 	bl	ca82 <memcpy>
    6032:	0020      	movs	r0, r4
    6034:	0039      	movs	r1, r7
    6036:	2248      	movs	r2, #72	; 0x48
    6038:	3114      	adds	r1, #20
    603a:	30b0      	adds	r0, #176	; 0xb0
    603c:	f006 fd21 	bl	ca82 <memcpy>
    6040:	0020      	movs	r0, r4
    6042:	0039      	movs	r1, r7
    6044:	2209      	movs	r2, #9
    6046:	315c      	adds	r1, #92	; 0x5c
    6048:	30f8      	adds	r0, #248	; 0xf8
    604a:	f006 fd1a 	bl	ca82 <memcpy>
    604e:	0039      	movs	r1, r7
    6050:	1ca0      	adds	r0, r4, #2
    6052:	3165      	adds	r1, #101	; 0x65
    6054:	30ff      	adds	r0, #255	; 0xff
    6056:	2203      	movs	r2, #3
    6058:	f006 fd13 	bl	ca82 <memcpy>
  _spi = spiinterface;  //Sets SPI interface - if no user selection is made, this defaults to SPI
  if (_spi == &SPI) {
    605c:	4b0b      	ldr	r3, [pc, #44]	; (608c <_ZN8SPIFlashC1EhP8SPIClass+0xa0>)
  _spi = spiinterface;  //Sets SPI interface - if no user selection is made, this defaults to SPI
    605e:	60e6      	str	r6, [r4, #12]
  if (_spi == &SPI) {
    6060:	429e      	cmp	r6, r3
    6062:	d10c      	bne.n	607e <_ZN8SPIFlashC1EhP8SPIClass+0x92>
    _SPIInUse = STDSPI;
    6064:	230a      	movs	r3, #10
  }
  else {
    _SPIInUse = ALTSPI;
  }
  csPin = cs;
  pinMode(csPin, OUTPUT);
    6066:	0028      	movs	r0, r5
    _SPIInUse = ALTSPI;
    6068:	7563      	strb	r3, [r4, #21]
  csPin = cs;
    606a:	7425      	strb	r5, [r4, #16]
  pinMode(csPin, OUTPUT);
    606c:	2101      	movs	r1, #1
    606e:	f7fd fd2b 	bl	3ac8 <pinMode>
  CHIP_DESELECT
    6072:	7c20      	ldrb	r0, [r4, #16]
    6074:	2101      	movs	r1, #1
    6076:	f7fd fd2b 	bl	3ad0 <digitalWrite>
}
    607a:	0020      	movs	r0, r4
    607c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _SPIInUse = ALTSPI;
    607e:	230b      	movs	r3, #11
    6080:	e7f1      	b.n	6066 <_ZN8SPIFlashC1EhP8SPIClass+0x7a>
    6082:	46c0      	nop			; (mov r8, r8)
    6084:	003d0900 	.word	0x003d0900
    6088:	00011164 	.word	0x00011164
    608c:	2000129c 	.word	0x2000129c

00006090 <_ZN8SPIFlash5beginEm>:
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//     Public functions used for read, write and erase operations     //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//Identifies chip and establishes parameters
bool SPIFlash::begin(uint32_t flashChipSize) {
    6090:	b570      	push	{r4, r5, r6, lr}
#endif
#ifdef HIGHSPEED
  Serial.println(F("Highspeed mode initiated."));
  Serial.println();
#endif
  if (_SPIInUse == ALTSPI) {
    6092:	7d43      	ldrb	r3, [r0, #21]
bool SPIFlash::begin(uint32_t flashChipSize) {
    6094:	0004      	movs	r4, r0
    6096:	000d      	movs	r5, r1
  if (_SPIInUse == ALTSPI) {
    6098:	2b0b      	cmp	r3, #11
    609a:	d002      	beq.n	60a2 <_ZN8SPIFlash5beginEm+0x12>
    #if defined (ARDUINO_ARCH_ESP32)
    SPI.begin(_nonStdSPI.sck, _nonStdSPI.miso, _nonStdSPI.mosi, _nonStdSPI.ss);
    #endif
  }
  else {
    BEGIN_SPI
    609c:	68c0      	ldr	r0, [r0, #12]
    609e:	f000 fcbf 	bl	6a20 <_ZN8SPIClass5beginEv>
  }

#ifdef SPI_HAS_TRANSACTION
  //Define the settings to be used by the SPI bus
  if (!_SPISettingsSet) {
    60a2:	7a23      	ldrb	r3, [r4, #8]
    60a4:	2b00      	cmp	r3, #0
    60a6:	d107      	bne.n	60b8 <_ZN8SPIFlash5beginEm+0x28>
    _settings = SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
    60a8:	221b      	movs	r2, #27
    60aa:	7062      	strb	r2, [r4, #1]
    60ac:	3a64      	subs	r2, #100	; 0x64
    60ae:	7023      	strb	r3, [r4, #0]
    60b0:	70a2      	strb	r2, [r4, #2]
    60b2:	70e3      	strb	r3, [r4, #3]
    60b4:	7123      	strb	r3, [r4, #4]
    60b6:	7163      	strb	r3, [r4, #5]
#else
  if (!_clockdiv) {
    _clockdiv = SPI_CLOCK_DIV2;
  }
#endif
  bool retVal = _chipID(flashChipSize);
    60b8:	0029      	movs	r1, r5
    60ba:	0020      	movs	r0, r4
    60bc:	f000 fbe4 	bl	6888 <_ZN8SPIFlash7_chipIDEm>
    60c0:	0005      	movs	r5, r0
  _endSPI();
    60c2:	0020      	movs	r0, r4
    60c4:	f000 faa0 	bl	6608 <_ZN8SPIFlash7_endSPIEv>
  chipPoweredDown = false;
    60c8:	2300      	movs	r3, #0
  _disableGlobalBlockProtect();
    60ca:	0020      	movs	r0, r4
  chipPoweredDown = false;
    60cc:	77a3      	strb	r3, [r4, #30]
  _disableGlobalBlockProtect();
    60ce:	f000 fb95 	bl	67fc <_ZN8SPIFlash26_disableGlobalBlockProtectEv>
  return retVal;
}
    60d2:	0028      	movs	r0, r5
    60d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000060d8 <_ZN8SPIFlash5errorEb>:
void SPIFlash::setClock(uint8_t clockdiv) {
  _clockdiv = clockdiv;
}
#endif

uint8_t SPIFlash::error(bool _verbosity) {
    60d8:	b510      	push	{r4, lr}
    60da:	4c05      	ldr	r4, [pc, #20]	; (60f0 <_ZN8SPIFlash5errorEb+0x18>)
  if (!_verbosity) {
    60dc:	2900      	cmp	r1, #0
    60de:	d101      	bne.n	60e4 <_ZN8SPIFlash5errorEb+0xc>
    return diagnostics.errorcode;
  }
  else {
    _troubleshoot(diagnostics.errorcode, PRINTOVERRIDE);
    return diagnostics.errorcode;
    60e0:	7820      	ldrb	r0, [r4, #0]
  }
}
    60e2:	bd10      	pop	{r4, pc}
    _troubleshoot(diagnostics.errorcode, PRINTOVERRIDE);
    60e4:	7821      	ldrb	r1, [r4, #0]
    60e6:	2201      	movs	r2, #1
    60e8:	f000 fc6e 	bl	69c8 <_ZN8SPIFlash13_troubleshootEhb>
    60ec:	e7f8      	b.n	60e0 <_ZN8SPIFlash5errorEb+0x8>
    60ee:	46c0      	nop			; (mov r8, r8)
    60f0:	20001a10 	.word	0x20001a10

000060f4 <_ZN8SPIFlash13readByteArrayEmPhjb>:
//    1. _addr --> Any address from 0 to capacity
//    2. data_buffer --> The array of bytes to be read from the flash memory - starting at the address indicated
//    3. bufferSize --> The size of the buffer - in number of bytes.
//    4. fastRead --> defaults to false - executes _beginFastRead() if set to true

bool  SPIFlash::readByteArray(uint32_t _addr, uint8_t *data_buffer, size_t bufferSize, bool fastRead) {
    60f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    60f6:	001e      	movs	r6, r3
    60f8:	ab08      	add	r3, sp, #32
    60fa:	781b      	ldrb	r3, [r3, #0]
    60fc:	0017      	movs	r7, r2
    60fe:	9301      	str	r3, [sp, #4]
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros();
  #endif
  if (!_prep(READDATA, _addr, bufferSize)) {
    6100:	000a      	movs	r2, r1
    6102:	0033      	movs	r3, r6
    6104:	2103      	movs	r1, #3
bool  SPIFlash::readByteArray(uint32_t _addr, uint8_t *data_buffer, size_t bufferSize, bool fastRead) {
    6106:	0004      	movs	r4, r0
  if (!_prep(READDATA, _addr, bufferSize)) {
    6108:	f000 fae2 	bl	66d0 <_ZN8SPIFlash5_prepEhmm>
    610c:	1e05      	subs	r5, r0, #0
    610e:	d010      	beq.n	6132 <_ZN8SPIFlash13readByteArrayEmPhjb+0x3e>
    return false;
  }
  if(fastRead) {
    6110:	9b01      	ldr	r3, [sp, #4]
    _beginSPI(FASTREAD);
    6112:	210b      	movs	r1, #11
  if(fastRead) {
    6114:	2b00      	cmp	r3, #0
    6116:	d100      	bne.n	611a <_ZN8SPIFlash13readByteArrayEmPhjb+0x26>
  }
  else {
    _beginSPI(READDATA);
    6118:	2103      	movs	r1, #3
    611a:	0020      	movs	r0, r4
    611c:	f000 f9aa 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
  }
  _nextBuf(READDATA, &(*data_buffer), bufferSize);
    6120:	0020      	movs	r0, r4
    6122:	0033      	movs	r3, r6
    6124:	003a      	movs	r2, r7
    6126:	2103      	movs	r1, #3
    6128:	f000 f9fe 	bl	6528 <_ZN8SPIFlash8_nextBufEhPhm>
  _endSPI();
    612c:	0020      	movs	r0, r4
    612e:	f000 fa6b 	bl	6608 <_ZN8SPIFlash7_endSPIEv>
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
	return true;
}
    6132:	0028      	movs	r0, r5
    6134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006138 <_ZN8SPIFlash8writeStrEmR6Stringb>:
//    1. _addr --> Any address - from 0 to capacity
//    2. data --> One String to be written to a particular location on a page
//    3. errorCheck --> Turned on by default. Checks for writing errors
// WARNING: You can only write to previously erased memory locations (see datasheet).
// Use the eraseSector()/eraseBlock32K/eraseBlock64K commands to first clear memory (write 0xFFs)
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    6138:	b5f0      	push	{r4, r5, r6, r7, lr}
    613a:	b089      	sub	sp, #36	; 0x24
    613c:	6896      	ldr	r6, [r2, #8]
    613e:	0004      	movs	r4, r0
    6140:	0010      	movs	r0, r2
  _spifuncruntime = micros();
  #endif

  uint32_t _sz = (sizeof(char)*(data.length()+1));

  char _outCharArray[_sz];
    6142:	466a      	mov	r2, sp
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    6144:	af00      	add	r7, sp, #0
    6146:	607b      	str	r3, [r7, #4]
  uint32_t _sz = (sizeof(char)*(data.length()+1));
    6148:	1c73      	adds	r3, r6, #1
    614a:	61fb      	str	r3, [r7, #28]
  char _outCharArray[_sz];
    614c:	3307      	adds	r3, #7
    614e:	08db      	lsrs	r3, r3, #3
    6150:	00db      	lsls	r3, r3, #3
    6152:	1ad3      	subs	r3, r2, r3
    6154:	469d      	mov	sp, r3
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    6156:	6179      	str	r1, [r7, #20]
  char _outCharArray[_sz];
    6158:	60fb      	str	r3, [r7, #12]
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    615a:	1c72      	adds	r2, r6, #1
    615c:	2300      	movs	r3, #0
    615e:	4669      	mov	r1, sp
    6160:	f7ff fb81 	bl	5866 <_ZNK6String8getBytesEPhjj>
  data.toCharArray(_outCharArray, _sz);

  if(_isChipPoweredDown() || !_addressCheck(_addr, sizeof(_sz)) || !_notPrevWritten(_addr, sizeof(_sz)+_sz) || !_notBusy() || !_writeEnable()) {
    6164:	0020      	movs	r0, r4
    6166:	f000 fa61 	bl	662c <_ZN8SPIFlash18_isChipPoweredDownEv>
    616a:	1e05      	subs	r5, r0, #0
    616c:	d002      	beq.n	6174 <_ZN8SPIFlash8writeStrEmR6Stringb+0x3c>
    return false;
    616e:	2300      	movs	r3, #0
    6170:	61bb      	str	r3, [r7, #24]
    6172:	e074      	b.n	625e <_ZN8SPIFlash8writeStrEmR6Stringb+0x126>
  if(_isChipPoweredDown() || !_addressCheck(_addr, sizeof(_sz)) || !_notPrevWritten(_addr, sizeof(_sz)+_sz) || !_notBusy() || !_writeEnable()) {
    6174:	2204      	movs	r2, #4
    6176:	6979      	ldr	r1, [r7, #20]
    6178:	0020      	movs	r0, r4
    617a:	f000 f92f 	bl	63dc <_ZN8SPIFlash13_addressCheckEmm>
    617e:	2800      	cmp	r0, #0
    6180:	d0f5      	beq.n	616e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    6182:	1d72      	adds	r2, r6, #5
    6184:	6979      	ldr	r1, [r7, #20]
    6186:	0020      	movs	r0, r4
    6188:	f000 f9a4 	bl	64d4 <_ZN8SPIFlash15_notPrevWrittenEmm>
    618c:	2800      	cmp	r0, #0
    618e:	d0ee      	beq.n	616e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    6190:	497c      	ldr	r1, [pc, #496]	; (6384 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    6192:	0020      	movs	r0, r4
    6194:	f000 fa58 	bl	6648 <_ZN8SPIFlash8_notBusyEm>
    6198:	2800      	cmp	r0, #0
    619a:	d0e8      	beq.n	616e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    619c:	2101      	movs	r1, #1
    619e:	0020      	movs	r0, r4
    61a0:	f000 fa78 	bl	6694 <_ZN8SPIFlash12_writeEnableEb>
    61a4:	2800      	cmp	r0, #0
    61a6:	d0e2      	beq.n	616e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
  }

  _beginSPI(PAGEPROG);
    61a8:	2102      	movs	r1, #2
    61aa:	0020      	movs	r0, r4
    61ac:	f000 f962 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
  for (uint8_t i = 0; i < sizeof(_sz); i++) {
    _nextByte(WRITE, _sz >> (8*i));
    61b0:	69fa      	ldr	r2, [r7, #28]
    61b2:	0026      	movs	r6, r4
    61b4:	40ea      	lsrs	r2, r5
    61b6:	362c      	adds	r6, #44	; 0x2c
    61b8:	b2d2      	uxtb	r2, r2
    61ba:	7831      	ldrb	r1, [r6, #0]
    61bc:	0020      	movs	r0, r4
    61be:	3508      	adds	r5, #8
    61c0:	f000 f9ac 	bl	651c <_ZN8SPIFlash9_nextByteEch>
  for (uint8_t i = 0; i < sizeof(_sz); i++) {
    61c4:	2d20      	cmp	r5, #32
    61c6:	d1f3      	bne.n	61b0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x78>
  }
  CHIP_DESELECT
    61c8:	2101      	movs	r1, #1
    61ca:	7c20      	ldrb	r0, [r4, #16]
    61cc:	f7fd fc80 	bl	3ad0 <digitalWrite>
  _endSPI();
    61d0:	0020      	movs	r0, r4
    61d2:	f000 fa19 	bl	6608 <_ZN8SPIFlash7_endSPIEv>

  if(!_addressCheck(_addr+sizeof(_sz), _sz) || !_notBusy() || !_writeEnable()) {
    61d6:	697b      	ldr	r3, [r7, #20]
    61d8:	69fa      	ldr	r2, [r7, #28]
    61da:	3304      	adds	r3, #4
    61dc:	0019      	movs	r1, r3
    61de:	0020      	movs	r0, r4
    61e0:	60bb      	str	r3, [r7, #8]
    61e2:	f000 f8fb 	bl	63dc <_ZN8SPIFlash13_addressCheckEmm>
    61e6:	2800      	cmp	r0, #0
    61e8:	d0c1      	beq.n	616e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    61ea:	4966      	ldr	r1, [pc, #408]	; (6384 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    61ec:	0020      	movs	r0, r4
    61ee:	f000 fa2b 	bl	6648 <_ZN8SPIFlash8_notBusyEm>
    61f2:	2800      	cmp	r0, #0
    61f4:	d0bb      	beq.n	616e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    61f6:	2101      	movs	r1, #1
    61f8:	0020      	movs	r0, r4
    61fa:	f000 fa4b 	bl	6694 <_ZN8SPIFlash12_writeEnableEb>
    61fe:	61b8      	str	r0, [r7, #24]
    6200:	2800      	cmp	r0, #0
    6202:	d0b4      	beq.n	616e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    return false;
  }
  uint16_t maxBytes = SPI_PAGESIZE-(_addr % SPI_PAGESIZE);  // Force the first set of bytes to stay within the first page
    6204:	2580      	movs	r5, #128	; 0x80
    6206:	7d3b      	ldrb	r3, [r7, #20]
    6208:	006d      	lsls	r5, r5, #1
    620a:	1aed      	subs	r5, r5, r3

  if (_sz <= maxBytes) {
    620c:	69fb      	ldr	r3, [r7, #28]
  uint16_t maxBytes = SPI_PAGESIZE-(_addr % SPI_PAGESIZE);  // Force the first set of bytes to stay within the first page
    620e:	b2ad      	uxth	r5, r5
  if (_sz <= maxBytes) {
    6210:	42ab      	cmp	r3, r5
    6212:	d828      	bhi.n	6266 <_ZN8SPIFlash8writeStrEmR6Stringb+0x12e>
    CHIP_SELECT
    6214:	7c20      	ldrb	r0, [r4, #16]
    6216:	2100      	movs	r1, #0
    6218:	f7fd fc5a 	bl	3ad0 <digitalWrite>
    _nextByte(WRITE, PAGEPROG);
    621c:	7831      	ldrb	r1, [r6, #0]
    621e:	2202      	movs	r2, #2
    6220:	0020      	movs	r0, r4
    6222:	f000 f97b 	bl	651c <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    6226:	0020      	movs	r0, r4
    6228:	f000 f8fc 	bl	6424 <_ZN8SPIFlash16_transferAddressEv>
    //_nextBuf(PAGEPROG, &_outCharArray[0], _sz);
    for (uint16_t i = 0; i < _sz; ++i) {
    622c:	2500      	movs	r5, #0
    622e:	69fb      	ldr	r3, [r7, #28]
    6230:	42ab      	cmp	r3, r5
    6232:	d90a      	bls.n	624a <_ZN8SPIFlash8writeStrEmR6Stringb+0x112>
      _nextByte(WRITE, _outCharArray[i]);
    6234:	68fb      	ldr	r3, [r7, #12]
    6236:	0020      	movs	r0, r4
    6238:	5d5a      	ldrb	r2, [r3, r5]
    623a:	0023      	movs	r3, r4
    623c:	332c      	adds	r3, #44	; 0x2c
    623e:	7819      	ldrb	r1, [r3, #0]
    for (uint16_t i = 0; i < _sz; ++i) {
    6240:	3501      	adds	r5, #1
      _nextByte(WRITE, _outCharArray[i]);
    6242:	f000 f96b 	bl	651c <_ZN8SPIFlash9_nextByteEch>
    for (uint16_t i = 0; i < _sz; ++i) {
    6246:	b2ad      	uxth	r5, r5
    6248:	e7f1      	b.n	622e <_ZN8SPIFlash8writeStrEmR6Stringb+0xf6>
    }
    CHIP_DESELECT
    624a:	7c20      	ldrb	r0, [r4, #16]
    624c:	2101      	movs	r1, #1
    624e:	f7fd fc3f 	bl	3ad0 <digitalWrite>
      }

    } while (length > 0);
  }

  if (!errorCheck) {
    6252:	687b      	ldr	r3, [r7, #4]
    6254:	2b00      	cmp	r3, #0
    6256:	d14f      	bne.n	62f8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1c0>
    _endSPI();
    6258:	0020      	movs	r0, r4
    625a:	f000 f9d5 	bl	6608 <_ZN8SPIFlash7_endSPIEv>
    #ifdef RUNDIAGNOSTIC
      _spifuncruntime = micros() - _spifuncruntime;
    #endif
  }
  return true;
}
    625e:	46bd      	mov	sp, r7
    6260:	69b8      	ldr	r0, [r7, #24]
    6262:	b009      	add	sp, #36	; 0x24
    6264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t length = _sz;
    6266:	8bbb      	ldrh	r3, [r7, #28]
    6268:	617b      	str	r3, [r7, #20]
    uint16_t data_offset = 0;
    626a:	2300      	movs	r3, #0
    626c:	613b      	str	r3, [r7, #16]
      writeBufSz = (length<=maxBytes) ? length : maxBytes;
    626e:	697b      	ldr	r3, [r7, #20]
    6270:	42ab      	cmp	r3, r5
    6272:	dc00      	bgt.n	6276 <_ZN8SPIFlash8writeStrEmR6Stringb+0x13e>
    6274:	001d      	movs	r5, r3
      CHIP_SELECT
    6276:	7c20      	ldrb	r0, [r4, #16]
    6278:	2100      	movs	r1, #0
    627a:	f7fd fc29 	bl	3ad0 <digitalWrite>
      _nextByte(WRITE, PAGEPROG);
    627e:	0023      	movs	r3, r4
    6280:	332c      	adds	r3, #44	; 0x2c
    6282:	7819      	ldrb	r1, [r3, #0]
    6284:	2202      	movs	r2, #2
    6286:	0020      	movs	r0, r4
    6288:	f000 f948 	bl	651c <_ZN8SPIFlash9_nextByteEch>
      _transferAddress();
    628c:	0020      	movs	r0, r4
    628e:	f000 f8c9 	bl	6424 <_ZN8SPIFlash16_transferAddressEv>
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    6292:	2600      	movs	r6, #0
    6294:	42ae      	cmp	r6, r5
    6296:	da0c      	bge.n	62b2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x17a>
        _nextByte(WRITE, _outCharArray[data_offset + i]);
    6298:	693a      	ldr	r2, [r7, #16]
    629a:	68fb      	ldr	r3, [r7, #12]
    629c:	0020      	movs	r0, r4
    629e:	189b      	adds	r3, r3, r2
    62a0:	5d9a      	ldrb	r2, [r3, r6]
    62a2:	0023      	movs	r3, r4
    62a4:	332c      	adds	r3, #44	; 0x2c
    62a6:	7819      	ldrb	r1, [r3, #0]
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    62a8:	3601      	adds	r6, #1
        _nextByte(WRITE, _outCharArray[data_offset + i]);
    62aa:	f000 f937 	bl	651c <_ZN8SPIFlash9_nextByteEch>
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    62ae:	b2b6      	uxth	r6, r6
    62b0:	e7f0      	b.n	6294 <_ZN8SPIFlash8writeStrEmR6Stringb+0x15c>
      CHIP_DESELECT
    62b2:	7c20      	ldrb	r0, [r4, #16]
    62b4:	2101      	movs	r1, #1
    62b6:	f7fd fc0b 	bl	3ad0 <digitalWrite>
      _currentAddress += writeBufSz;
    62ba:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      if(!_notBusy() || !_writeEnable()){
    62bc:	4931      	ldr	r1, [pc, #196]	; (6384 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
      _currentAddress += writeBufSz;
    62be:	195b      	adds	r3, r3, r5
    62c0:	67a3      	str	r3, [r4, #120]	; 0x78
      data_offset += writeBufSz;
    62c2:	693b      	ldr	r3, [r7, #16]
      if(!_notBusy() || !_writeEnable()){
    62c4:	0020      	movs	r0, r4
      data_offset += writeBufSz;
    62c6:	195b      	adds	r3, r3, r5
    62c8:	b29b      	uxth	r3, r3
    62ca:	613b      	str	r3, [r7, #16]
      length -= writeBufSz;
    62cc:	697b      	ldr	r3, [r7, #20]
    62ce:	1b5d      	subs	r5, r3, r5
    62d0:	b2ab      	uxth	r3, r5
    62d2:	617b      	str	r3, [r7, #20]
      if(!_notBusy() || !_writeEnable()){
    62d4:	f000 f9b8 	bl	6648 <_ZN8SPIFlash8_notBusyEm>
    62d8:	2800      	cmp	r0, #0
    62da:	d100      	bne.n	62de <_ZN8SPIFlash8writeStrEmR6Stringb+0x1a6>
    62dc:	e747      	b.n	616e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    62de:	2101      	movs	r1, #1
    62e0:	0020      	movs	r0, r4
    62e2:	f000 f9d7 	bl	6694 <_ZN8SPIFlash12_writeEnableEb>
    62e6:	2800      	cmp	r0, #0
    62e8:	d100      	bne.n	62ec <_ZN8SPIFlash8writeStrEmR6Stringb+0x1b4>
    62ea:	e740      	b.n	616e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
      maxBytes = 256;   // Now we can do up to 256 bytes per loop
    62ec:	2580      	movs	r5, #128	; 0x80
    } while (length > 0);
    62ee:	697b      	ldr	r3, [r7, #20]
      maxBytes = 256;   // Now we can do up to 256 bytes per loop
    62f0:	006d      	lsls	r5, r5, #1
    } while (length > 0);
    62f2:	2b00      	cmp	r3, #0
    62f4:	d1bb      	bne.n	626e <_ZN8SPIFlash8writeStrEmR6Stringb+0x136>
    62f6:	e7ac      	b.n	6252 <_ZN8SPIFlash8writeStrEmR6Stringb+0x11a>
    }
    62f8:	466b      	mov	r3, sp
    if (!_notBusy()) {
    62fa:	4922      	ldr	r1, [pc, #136]	; (6384 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    62fc:	0020      	movs	r0, r4
    }
    62fe:	617b      	str	r3, [r7, #20]
    if (!_notBusy()) {
    6300:	f000 f9a2 	bl	6648 <_ZN8SPIFlash8_notBusyEm>
    6304:	61b8      	str	r0, [r7, #24]
    6306:	2800      	cmp	r0, #0
    6308:	d038      	beq.n	637c <_ZN8SPIFlash8writeStrEmR6Stringb+0x244>
    char _inCharArray[_sz];
    630a:	466a      	mov	r2, sp
    _currentAddress = (_addr + sizeof(_sz));
    630c:	68bb      	ldr	r3, [r7, #8]
    CHIP_SELECT
    630e:	7c20      	ldrb	r0, [r4, #16]
    _currentAddress = (_addr + sizeof(_sz));
    6310:	67a3      	str	r3, [r4, #120]	; 0x78
    char _inCharArray[_sz];
    6312:	69fb      	ldr	r3, [r7, #28]
    CHIP_SELECT
    6314:	2100      	movs	r1, #0
    char _inCharArray[_sz];
    6316:	3307      	adds	r3, #7
    6318:	08db      	lsrs	r3, r3, #3
    631a:	00db      	lsls	r3, r3, #3
    631c:	1ad3      	subs	r3, r2, r3
    631e:	469d      	mov	sp, r3
    CHIP_SELECT
    6320:	f7fd fbd6 	bl	3ad0 <digitalWrite>
    _nextByte(WRITE, READDATA);
    6324:	0023      	movs	r3, r4
    6326:	332c      	adds	r3, #44	; 0x2c
    6328:	7819      	ldrb	r1, [r3, #0]
    632a:	2203      	movs	r2, #3
    632c:	0020      	movs	r0, r4
    632e:	f000 f8f5 	bl	651c <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    6332:	0020      	movs	r0, r4
    char _inCharArray[_sz];
    6334:	466e      	mov	r6, sp
    _transferAddress();
    6336:	f000 f875 	bl	6424 <_ZN8SPIFlash16_transferAddressEv>
    for (uint8_t i = 0; i < _sz; i++) {
    633a:	2500      	movs	r5, #0
    633c:	69fb      	ldr	r3, [r7, #28]
    633e:	42ab      	cmp	r3, r5
    6340:	d90a      	bls.n	6358 <_ZN8SPIFlash8writeStrEmR6Stringb+0x220>
      _inCharArray[i] = _nextByte(READ);
    6342:	0023      	movs	r3, r4
    6344:	332b      	adds	r3, #43	; 0x2b
    6346:	7819      	ldrb	r1, [r3, #0]
    6348:	2200      	movs	r2, #0
    634a:	0020      	movs	r0, r4
    634c:	f000 f8e6 	bl	651c <_ZN8SPIFlash9_nextByteEch>
    6350:	5570      	strb	r0, [r6, r5]
    for (uint8_t i = 0; i < _sz; i++) {
    6352:	3501      	adds	r5, #1
    6354:	b2ed      	uxtb	r5, r5
    6356:	e7f1      	b.n	633c <_ZN8SPIFlash8writeStrEmR6Stringb+0x204>
    _endSPI();
    6358:	0020      	movs	r0, r4
    635a:	f000 f955 	bl	6608 <_ZN8SPIFlash7_endSPIEv>
    for (uint8_t i = 0; i < _sz; i++) {
    635e:	2300      	movs	r3, #0
    6360:	69fa      	ldr	r2, [r7, #28]
    6362:	429a      	cmp	r2, r3
    6364:	d907      	bls.n	6376 <_ZN8SPIFlash8writeStrEmR6Stringb+0x23e>
      if (_inCharArray[i] != _outCharArray[i]) {
    6366:	68fa      	ldr	r2, [r7, #12]
    6368:	5cf1      	ldrb	r1, [r6, r3]
    636a:	5cd2      	ldrb	r2, [r2, r3]
    636c:	4291      	cmp	r1, r2
    636e:	d105      	bne.n	637c <_ZN8SPIFlash8writeStrEmR6Stringb+0x244>
    for (uint8_t i = 0; i < _sz; i++) {
    6370:	3301      	adds	r3, #1
    6372:	b2db      	uxtb	r3, r3
    6374:	e7f4      	b.n	6360 <_ZN8SPIFlash8writeStrEmR6Stringb+0x228>
    6376:	697b      	ldr	r3, [r7, #20]
    6378:	469d      	mov	sp, r3
  return true;
    637a:	e770      	b.n	625e <_ZN8SPIFlash8writeStrEmR6Stringb+0x126>
    637c:	697b      	ldr	r3, [r7, #20]
    637e:	469d      	mov	sp, r3
    6380:	e6f5      	b.n	616e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    6382:	46c0      	nop			; (mov r8, r8)
    6384:	3b9aca00 	.word	0x3b9aca00

00006388 <_ZN8SPIFlash13eraseBlock64KEm>:
}

// Erases one 64k block.
//  Takes an address as the argument and erases the block containing the address.
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
  if (!kb64Erase.supported) {
    6388:	0003      	movs	r3, r0
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
    638a:	b570      	push	{r4, r5, r6, lr}
  if (!kb64Erase.supported) {
    638c:	3354      	adds	r3, #84	; 0x54
    638e:	781d      	ldrb	r5, [r3, #0]
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
    6390:	0004      	movs	r4, r0
    6392:	000a      	movs	r2, r1
  if (!kb64Erase.supported) {
    6394:	2d00      	cmp	r5, #0
    6396:	d105      	bne.n	63a4 <_ZN8SPIFlash13eraseBlock64KEm+0x1c>
    _troubleshoot(UNSUPPORTEDFUNC);
    6398:	002a      	movs	r2, r5
    639a:	210c      	movs	r1, #12
    639c:	f000 fb14 	bl	69c8 <_ZN8SPIFlash13_troubleshootEhb>
  }
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
	return true;
}
    63a0:	0028      	movs	r0, r5
    63a2:	bd70      	pop	{r4, r5, r6, pc}
  if (!_prep(ERASEFUNC, _addr, KB(64))) {
    63a4:	2380      	movs	r3, #128	; 0x80
    63a6:	21ef      	movs	r1, #239	; 0xef
    63a8:	025b      	lsls	r3, r3, #9
    63aa:	f000 f991 	bl	66d0 <_ZN8SPIFlash5_prepEhmm>
    63ae:	1e05      	subs	r5, r0, #0
    63b0:	d0f6      	beq.n	63a0 <_ZN8SPIFlash13eraseBlock64KEm+0x18>
  _beginSPI(kb64Erase.opcode);
    63b2:	0023      	movs	r3, r4
    63b4:	3355      	adds	r3, #85	; 0x55
    63b6:	7819      	ldrb	r1, [r3, #0]
    63b8:	0020      	movs	r0, r4
    63ba:	f000 f85b 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
  _endSPI();
    63be:	0020      	movs	r0, r4
    63c0:	f000 f922 	bl	6608 <_ZN8SPIFlash7_endSPIEv>
  if(!_notBusy(kb64Erase.time)) {
    63c4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    63c6:	0020      	movs	r0, r4
    63c8:	f000 f93e 	bl	6648 <_ZN8SPIFlash8_notBusyEm>
    63cc:	0005      	movs	r5, r0
    63ce:	e7e7      	b.n	63a0 <_ZN8SPIFlash13eraseBlock64KEm+0x18>

000063d0 <_ZN8SPIFlash9_nextByteEch.constprop.8>:
   return true;
 }
 //SPI data lines are left open until _endSPI() is called

 //Reads/Writes next byte. Call 'n' times to read/write 'n' number of bytes. Should be called after _beginSPI()
 uint8_t SPIFlash::_nextByte(char IOType, uint8_t data) {
    63d0:	b510      	push	{r4, lr}
     } rxData, txData;
     txData.val = data;
     spi_transfer(txData.dataBuf, rxData.dataBuf, 1);
     return rxData.val;
   #else
     return xfer(data);
    63d2:	68c0      	ldr	r0, [r0, #12]
    63d4:	f000 fb6c 	bl	6ab0 <_ZN8SPIClass8transferEh>
   #endif
 #else
   return xfer(data);
 #endif
 }
    63d8:	bd10      	pop	{r4, pc}
	...

000063dc <_ZN8SPIFlash13_addressCheckEmm>:
 bool SPIFlash::_addressCheck(uint32_t _addr, uint32_t size) {
    63dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63de:	000f      	movs	r7, r1
   uint8_t _errorcode = error();
    63e0:	2100      	movs	r1, #0
 bool SPIFlash::_addressCheck(uint32_t _addr, uint32_t size) {
    63e2:	0005      	movs	r5, r0
    63e4:	0016      	movs	r6, r2
   uint8_t _errorcode = error();
    63e6:	f7ff fe77 	bl	60d8 <_ZN8SPIFlash5errorEb>
   if (_errorcode == UNKNOWNCAP || _errorcode == NORESPONSE) {
    63ea:	23f7      	movs	r3, #247	; 0xf7
    63ec:	4003      	ands	r3, r0
     return false;
    63ee:	2000      	movs	r0, #0
   if (_errorcode == UNKNOWNCAP || _errorcode == NORESPONSE) {
    63f0:	2b03      	cmp	r3, #3
    63f2:	d008      	beq.n	6406 <_ZN8SPIFlash13_addressCheckEmm+0x2a>
 	if (!_chip.capacity) {
    63f4:	6bec      	ldr	r4, [r5, #60]	; 0x3c
    63f6:	4284      	cmp	r4, r0
    63f8:	d106      	bne.n	6408 <_ZN8SPIFlash13_addressCheckEmm+0x2c>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    63fa:	4809      	ldr	r0, [pc, #36]	; (6420 <_ZN8SPIFlash13_addressCheckEmm+0x44>)
    63fc:	0022      	movs	r2, r4
    63fe:	2101      	movs	r1, #1
    6400:	f002 fada 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
    6404:	0020      	movs	r0, r4
 }
    6406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   if (_submittedAddress + size >= _chip.capacity) {
    6408:	19be      	adds	r6, r7, r6
    640a:	42b4      	cmp	r4, r6
    640c:	d804      	bhi.n	6418 <_ZN8SPIFlash13_addressCheckEmm+0x3c>
     _addressOverflow = ((_submittedAddress + size) - _chip.capacity);
    640e:	1b36      	subs	r6, r6, r4
    6410:	67ee      	str	r6, [r5, #124]	; 0x7c
     _currentAddress = _addr;
    6412:	67af      	str	r7, [r5, #120]	; 0x78
     return true;				// Not at end of memory if (address < _chip.capacity)
    6414:	2001      	movs	r0, #1
    6416:	e7f6      	b.n	6406 <_ZN8SPIFlash13_addressCheckEmm+0x2a>
     _addressOverflow = false;
    6418:	2300      	movs	r3, #0
    641a:	67eb      	str	r3, [r5, #124]	; 0x7c
    641c:	e7f9      	b.n	6412 <_ZN8SPIFlash13_addressCheckEmm+0x36>
    641e:	46c0      	nop			; (mov r8, r8)
    6420:	20001a10 	.word	0x20001a10

00006424 <_ZN8SPIFlash16_transferAddressEv>:
 bool SPIFlash::_transferAddress(void) {
    6424:	b510      	push	{r4, lr}
   if (address4ByteEnabled) {
    6426:	7fc3      	ldrb	r3, [r0, #31]
 bool SPIFlash::_transferAddress(void) {
    6428:	0004      	movs	r4, r0
   if (address4ByteEnabled) {
    642a:	2b00      	cmp	r3, #0
    642c:	d004      	beq.n	6438 <_ZN8SPIFlash16_transferAddressEv+0x14>
     _nextByte(WRITE, Highest(_currentAddress));
    642e:	0003      	movs	r3, r0
    6430:	337b      	adds	r3, #123	; 0x7b
    6432:	7819      	ldrb	r1, [r3, #0]
    6434:	f7ff ffcc 	bl	63d0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Higher(_currentAddress));
    6438:	0023      	movs	r3, r4
    643a:	337a      	adds	r3, #122	; 0x7a
    643c:	7819      	ldrb	r1, [r3, #0]
    643e:	0020      	movs	r0, r4
    6440:	f7ff ffc6 	bl	63d0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Hi(_currentAddress));
    6444:	0023      	movs	r3, r4
    6446:	3379      	adds	r3, #121	; 0x79
    6448:	7819      	ldrb	r1, [r3, #0]
    644a:	0020      	movs	r0, r4
    644c:	f7ff ffc0 	bl	63d0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Lo(_currentAddress));
    6450:	0023      	movs	r3, r4
    6452:	3378      	adds	r3, #120	; 0x78
    6454:	7819      	ldrb	r1, [r3, #0]
    6456:	0020      	movs	r0, r4
    6458:	f7ff ffba 	bl	63d0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
 }
    645c:	2001      	movs	r0, #1
    645e:	bd10      	pop	{r4, pc}

00006460 <_ZN8SPIFlash12_startSPIBusEv>:
 bool SPIFlash::_startSPIBus(void) {
    6460:	b510      	push	{r4, lr}
       _spi->beginTransaction(_settings);
    6462:	6801      	ldr	r1, [r0, #0]
 bool SPIFlash::_startSPIBus(void) {
    6464:	0004      	movs	r4, r0
       _spi->beginTransaction(_settings);
    6466:	6842      	ldr	r2, [r0, #4]
    6468:	68c0      	ldr	r0, [r0, #12]
    646a:	f000 faf1 	bl	6a50 <_ZN8SPIClass16beginTransactionE11SPISettings>
   SPIBusState = true;
    646e:	2001      	movs	r0, #1
    6470:	7760      	strb	r0, [r4, #29]
 }
    6472:	bd10      	pop	{r4, pc}

00006474 <_ZN8SPIFlash9_beginSPIEh>:
 bool SPIFlash::_beginSPI(uint8_t opcode) {
    6474:	b570      	push	{r4, r5, r6, lr}
   if (!SPIBusState) {
    6476:	7f43      	ldrb	r3, [r0, #29]
 bool SPIFlash::_beginSPI(uint8_t opcode) {
    6478:	0004      	movs	r4, r0
    647a:	000d      	movs	r5, r1
   if (!SPIBusState) {
    647c:	2b00      	cmp	r3, #0
    647e:	d101      	bne.n	6484 <_ZN8SPIFlash9_beginSPIEh+0x10>
     _startSPIBus();
    6480:	f7ff ffee 	bl	6460 <_ZN8SPIFlash12_startSPIBusEv>
   CHIP_SELECT
    6484:	7c20      	ldrb	r0, [r4, #16]
    6486:	2100      	movs	r1, #0
    6488:	f7fd fb22 	bl	3ad0 <digitalWrite>
   switch (opcode) {
    648c:	2d0b      	cmp	r5, #11
    648e:	d015      	beq.n	64bc <_ZN8SPIFlash9_beginSPIEh+0x48>
    6490:	d805      	bhi.n	649e <_ZN8SPIFlash9_beginSPIEh+0x2a>
    6492:	2d02      	cmp	r5, #2
    6494:	d009      	beq.n	64aa <_ZN8SPIFlash9_beginSPIEh+0x36>
    6496:	2d03      	cmp	r5, #3
    6498:	d007      	beq.n	64aa <_ZN8SPIFlash9_beginSPIEh+0x36>
     _nextByte(WRITE, opcode);
    649a:	0029      	movs	r1, r5
    649c:	e016      	b.n	64cc <_ZN8SPIFlash9_beginSPIEh+0x58>
   switch (opcode) {
    649e:	2d52      	cmp	r5, #82	; 0x52
    64a0:	d003      	beq.n	64aa <_ZN8SPIFlash9_beginSPIEh+0x36>
    64a2:	2dd8      	cmp	r5, #216	; 0xd8
    64a4:	d001      	beq.n	64aa <_ZN8SPIFlash9_beginSPIEh+0x36>
    64a6:	2d20      	cmp	r5, #32
    64a8:	d1f7      	bne.n	649a <_ZN8SPIFlash9_beginSPIEh+0x26>
     _nextByte(WRITE, opcode);
    64aa:	0029      	movs	r1, r5
    64ac:	0020      	movs	r0, r4
    64ae:	f7ff ff8f 	bl	63d0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     _transferAddress();
    64b2:	0020      	movs	r0, r4
    64b4:	f7ff ffb6 	bl	6424 <_ZN8SPIFlash16_transferAddressEv>
 }
    64b8:	2001      	movs	r0, #1
    64ba:	bd70      	pop	{r4, r5, r6, pc}
     _nextByte(WRITE, opcode);
    64bc:	0029      	movs	r1, r5
    64be:	0020      	movs	r0, r4
    64c0:	f7ff ff86 	bl	63d0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     _transferAddress();
    64c4:	0020      	movs	r0, r4
    64c6:	f7ff ffad 	bl	6424 <_ZN8SPIFlash16_transferAddressEv>
     _nextByte(WRITE, DUMMYBYTE);
    64ca:	21ee      	movs	r1, #238	; 0xee
     _nextByte(WRITE, opcode);
    64cc:	0020      	movs	r0, r4
    64ce:	f7ff ff7f 	bl	63d0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     break;
    64d2:	e7f1      	b.n	64b8 <_ZN8SPIFlash9_beginSPIEh+0x44>

000064d4 <_ZN8SPIFlash15_notPrevWrittenEmm>:
 bool SPIFlash::_notPrevWritten(uint32_t _addr, uint32_t size) {
    64d4:	b570      	push	{r4, r5, r6, lr}
   _beginSPI(READDATA);
    64d6:	2103      	movs	r1, #3
 bool SPIFlash::_notPrevWritten(uint32_t _addr, uint32_t size) {
    64d8:	0004      	movs	r4, r0
    64da:	0016      	movs	r6, r2
   for (uint32_t i = 0; i < size; i++) {
    64dc:	2500      	movs	r5, #0
   _beginSPI(READDATA);
    64de:	f7ff ffc9 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
   for (uint32_t i = 0; i < size; i++) {
    64e2:	42b5      	cmp	r5, r6
    64e4:	d012      	beq.n	650c <_ZN8SPIFlash15_notPrevWrittenEmm+0x38>
     return xfer(data);
    64e6:	2100      	movs	r1, #0
    64e8:	68e0      	ldr	r0, [r4, #12]
    64ea:	f000 fae1 	bl	6ab0 <_ZN8SPIClass8transferEh>
     if (_nextByte(READ) != 0xFF) {
    64ee:	28ff      	cmp	r0, #255	; 0xff
    64f0:	d00a      	beq.n	6508 <_ZN8SPIFlash15_notPrevWrittenEmm+0x34>
       CHIP_DESELECT;
    64f2:	7c20      	ldrb	r0, [r4, #16]
    64f4:	2101      	movs	r1, #1
    64f6:	f7fd faeb 	bl	3ad0 <digitalWrite>
   diagnostics.troubleshoot(_code, printoverride);
    64fa:	4807      	ldr	r0, [pc, #28]	; (6518 <_ZN8SPIFlash15_notPrevWrittenEmm+0x44>)
    64fc:	2200      	movs	r2, #0
    64fe:	2107      	movs	r1, #7
    6500:	f002 fa5a 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
    6504:	2000      	movs	r0, #0
 }
    6506:	bd70      	pop	{r4, r5, r6, pc}
   for (uint32_t i = 0; i < size; i++) {
    6508:	3501      	adds	r5, #1
    650a:	e7ea      	b.n	64e2 <_ZN8SPIFlash15_notPrevWrittenEmm+0xe>
   CHIP_DESELECT
    650c:	7c20      	ldrb	r0, [r4, #16]
    650e:	2101      	movs	r1, #1
    6510:	f7fd fade 	bl	3ad0 <digitalWrite>
   return true;
    6514:	2001      	movs	r0, #1
    6516:	e7f6      	b.n	6506 <_ZN8SPIFlash15_notPrevWrittenEmm+0x32>
    6518:	20001a10 	.word	0x20001a10

0000651c <_ZN8SPIFlash9_nextByteEch>:
 uint8_t SPIFlash::_nextByte(char IOType, uint8_t data) {
    651c:	b510      	push	{r4, lr}
     return xfer(data);
    651e:	0011      	movs	r1, r2
    6520:	68c0      	ldr	r0, [r0, #12]
    6522:	f000 fac5 	bl	6ab0 <_ZN8SPIClass8transferEh>
 }
    6526:	bd10      	pop	{r4, pc}

00006528 <_ZN8SPIFlash8_nextBufEhPhm>:
 void SPIFlash::_nextBuf(uint8_t opcode, uint8_t *data_buffer, uint32_t size) {
    6528:	b510      	push	{r4, lr}
    652a:	000c      	movs	r4, r1
    652c:	0011      	movs	r1, r2
    652e:	001a      	movs	r2, r3
   switch (opcode) {
    6530:	2c02      	cmp	r4, #2
    6532:	d001      	beq.n	6538 <_ZN8SPIFlash8_nextBufEhPhm+0x10>
    6534:	2c03      	cmp	r4, #3
    6536:	d102      	bne.n	653e <_ZN8SPIFlash8_nextBufEhPhm+0x16>
         _spi->transfer(&data_buffer[0], size);
    6538:	68c0      	ldr	r0, [r0, #12]
    653a:	f000 fabe 	bl	6aba <_ZN8SPIClass8transferEPvj>
 }
    653e:	bd10      	pop	{r4, pc}

00006540 <_ZN8SPIFlash10_readStat1Ev>:
 uint8_t SPIFlash::_readStat1(void) {
    6540:	b570      	push	{r4, r5, r6, lr}
    6542:	0004      	movs	r4, r0
   _beginSPI(READSTAT1);
    6544:	2105      	movs	r1, #5
    6546:	f7ff ff95 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
     return xfer(data);
    654a:	2100      	movs	r1, #0
    654c:	68e0      	ldr	r0, [r4, #12]
    654e:	f000 faaf 	bl	6ab0 <_ZN8SPIClass8transferEh>
   stat1 = _nextByte(READ);
    6552:	1d25      	adds	r5, r4, #4
    6554:	77e8      	strb	r0, [r5, #31]
   CHIP_DESELECT
    6556:	7c20      	ldrb	r0, [r4, #16]
    6558:	2101      	movs	r1, #1
    655a:	f7fd fab9 	bl	3ad0 <digitalWrite>
   return stat1;
    655e:	7fe8      	ldrb	r0, [r5, #31]
 }
    6560:	bd70      	pop	{r4, r5, r6, pc}

00006562 <_ZN8SPIFlash10_readStat3Ev>:
 uint8_t SPIFlash::_readStat3(void) {
    6562:	b570      	push	{r4, r5, r6, lr}
    6564:	0004      	movs	r4, r0
   _beginSPI(READSTAT3);
    6566:	2115      	movs	r1, #21
    6568:	f7ff ff84 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
     return xfer(data);
    656c:	2100      	movs	r1, #0
    656e:	68e0      	ldr	r0, [r4, #12]
    6570:	f000 fa9e 	bl	6ab0 <_ZN8SPIClass8transferEh>
   stat3 = _nextByte(READ);
    6574:	1da5      	adds	r5, r4, #6
    6576:	77e8      	strb	r0, [r5, #31]
   CHIP_DESELECT
    6578:	7c20      	ldrb	r0, [r4, #16]
    657a:	2101      	movs	r1, #1
    657c:	f7fd faa8 	bl	3ad0 <digitalWrite>
   return stat3;
    6580:	7fe8      	ldrb	r0, [r5, #31]
 }
    6582:	bd70      	pop	{r4, r5, r6, pc}

00006584 <_ZN8SPIFlash22_enable4ByteAddressingEv>:
 bool SPIFlash::_enable4ByteAddressing(void) {
    6584:	b570      	push	{r4, r5, r6, lr}
    6586:	0006      	movs	r6, r0
     return true;
    6588:	2401      	movs	r4, #1
   if (_readStat3() & ADS) {
    658a:	f7ff ffea 	bl	6562 <_ZN8SPIFlash10_readStat3Ev>
    658e:	4220      	tst	r0, r4
    6590:	d10e      	bne.n	65b0 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x2c>
   _beginSPI(ADDR4BYTE_EN);
    6592:	21b7      	movs	r1, #183	; 0xb7
    6594:	0030      	movs	r0, r6
    6596:	f7ff ff6d 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    659a:	7c30      	ldrb	r0, [r6, #16]
    659c:	0021      	movs	r1, r4
    659e:	f7fd fa97 	bl	3ad0 <digitalWrite>
   if (_readStat3() & ADS) {
    65a2:	0030      	movs	r0, r6
    65a4:	f7ff ffdd 	bl	6562 <_ZN8SPIFlash10_readStat3Ev>
    65a8:	4020      	ands	r0, r4
    65aa:	1e05      	subs	r5, r0, #0
    65ac:	d002      	beq.n	65b4 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x30>
     address4ByteEnabled = true;
    65ae:	77f4      	strb	r4, [r6, #31]
 }
    65b0:	0020      	movs	r0, r4
    65b2:	bd70      	pop	{r4, r5, r6, pc}
   diagnostics.troubleshoot(_code, printoverride);
    65b4:	0002      	movs	r2, r0
    65b6:	210d      	movs	r1, #13
    65b8:	4802      	ldr	r0, [pc, #8]	; (65c4 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x40>)
    65ba:	f002 f9fd 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
    65be:	002c      	movs	r4, r5
    65c0:	e7f6      	b.n	65b0 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x2c>
    65c2:	46c0      	nop			; (mov r8, r8)
    65c4:	20001a10 	.word	0x20001a10

000065c8 <_ZN8SPIFlash23_disable4ByteAddressingEv>:
 bool SPIFlash::_disable4ByteAddressing(void) {
    65c8:	b570      	push	{r4, r5, r6, lr}
    65ca:	0005      	movs	r5, r0
     return true;
    65cc:	2401      	movs	r4, #1
   if (!(_readStat3() & ADS)) {      // If 4 byte addressing is disabled (default state)
    65ce:	f7ff ffc8 	bl	6562 <_ZN8SPIFlash10_readStat3Ev>
    65d2:	4220      	tst	r0, r4
    65d4:	d012      	beq.n	65fc <_ZN8SPIFlash23_disable4ByteAddressingEv+0x34>
   _beginSPI(ADDR4BYTE_DIS);
    65d6:	21e9      	movs	r1, #233	; 0xe9
    65d8:	0028      	movs	r0, r5
    65da:	f7ff ff4b 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    65de:	7c28      	ldrb	r0, [r5, #16]
    65e0:	0021      	movs	r1, r4
    65e2:	f7fd fa75 	bl	3ad0 <digitalWrite>
   if (_readStat3() & ADS) {
    65e6:	0028      	movs	r0, r5
    65e8:	f7ff ffbb 	bl	6562 <_ZN8SPIFlash10_readStat3Ev>
    65ec:	4020      	ands	r0, r4
    65ee:	d007      	beq.n	6600 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x38>
   diagnostics.troubleshoot(_code, printoverride);
    65f0:	2200      	movs	r2, #0
    65f2:	210e      	movs	r1, #14
    65f4:	4803      	ldr	r0, [pc, #12]	; (6604 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x3c>)
    65f6:	f002 f9df 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
    65fa:	2400      	movs	r4, #0
 }
    65fc:	0020      	movs	r0, r4
    65fe:	bd70      	pop	{r4, r5, r6, pc}
   address4ByteEnabled = false;
    6600:	77e8      	strb	r0, [r5, #31]
   return true;
    6602:	e7fb      	b.n	65fc <_ZN8SPIFlash23_disable4ByteAddressingEv+0x34>
    6604:	20001a10 	.word	0x20001a10

00006608 <_ZN8SPIFlash7_endSPIEv>:
 void SPIFlash::_endSPI(void) {
    6608:	b510      	push	{r4, lr}
    660a:	0004      	movs	r4, r0
   CHIP_DESELECT
    660c:	2101      	movs	r1, #1
    660e:	7c00      	ldrb	r0, [r0, #16]
    6610:	f7fd fa5e 	bl	3ad0 <digitalWrite>
   if (address4ByteEnabled) {          // If the previous operation enabled 4-byte addressing, disable it
    6614:	7fe3      	ldrb	r3, [r4, #31]
    6616:	2b00      	cmp	r3, #0
    6618:	d002      	beq.n	6620 <_ZN8SPIFlash7_endSPIEv+0x18>
     _disable4ByteAddressing();
    661a:	0020      	movs	r0, r4
    661c:	f7ff ffd4 	bl	65c8 <_ZN8SPIFlash23_disable4ByteAddressingEv>
     _spi->endTransaction();
    6620:	68e0      	ldr	r0, [r4, #12]
    6622:	f000 fa31 	bl	6a88 <_ZN8SPIClass14endTransactionEv>
   SPIBusState = false;
    6626:	2300      	movs	r3, #0
    6628:	7763      	strb	r3, [r4, #29]
 }
    662a:	bd10      	pop	{r4, pc}

0000662c <_ZN8SPIFlash18_isChipPoweredDownEv>:
 bool SPIFlash::_isChipPoweredDown(void) {
    662c:	b510      	push	{r4, lr}
   if (chipPoweredDown) {
    662e:	7f84      	ldrb	r4, [r0, #30]
    6630:	2c00      	cmp	r4, #0
    6632:	d004      	beq.n	663e <_ZN8SPIFlash18_isChipPoweredDownEv+0x12>
   diagnostics.troubleshoot(_code, printoverride);
    6634:	2200      	movs	r2, #0
    6636:	210f      	movs	r1, #15
    6638:	4802      	ldr	r0, [pc, #8]	; (6644 <_ZN8SPIFlash18_isChipPoweredDownEv+0x18>)
    663a:	f002 f9bd 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
 }
    663e:	0020      	movs	r0, r4
    6640:	bd10      	pop	{r4, pc}
    6642:	46c0      	nop			; (mov r8, r8)
    6644:	20001a10 	.word	0x20001a10

00006648 <_ZN8SPIFlash8_notBusyEm>:
 bool SPIFlash::_notBusy(uint32_t timeout) {
    6648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    664a:	0006      	movs	r6, r0
    664c:	000c      	movs	r4, r1
    664e:	2320      	movs	r3, #32
    6650:	3b01      	subs	r3, #1
    6652:	d1fd      	bne.n	6650 <_ZN8SPIFlash8_notBusyEm+0x8>
   uint32_t _time = micros();
    6654:	f7fc f80c 	bl	2670 <micros>
     if (!(stat1 & BUSY))
    6658:	2701      	movs	r7, #1
   uint32_t _time = micros();
    665a:	0005      	movs	r5, r0
     _readStat1();
    665c:	0030      	movs	r0, r6
    665e:	f7ff ff6f 	bl	6540 <_ZN8SPIFlash10_readStat1Ev>
     if (!(stat1 & BUSY))
    6662:	1d33      	adds	r3, r6, #4
    6664:	7fdb      	ldrb	r3, [r3, #31]
    6666:	423b      	tst	r3, r7
    6668:	d101      	bne.n	666e <_ZN8SPIFlash8_notBusyEm+0x26>
       return true;
    666a:	2001      	movs	r0, #1
 }
    666c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   } while ((micros() - _time) < timeout);
    666e:	f7fb ffff 	bl	2670 <micros>
    6672:	1b40      	subs	r0, r0, r5
   do {
    6674:	42a0      	cmp	r0, r4
    6676:	d3f1      	bcc.n	665c <_ZN8SPIFlash8_notBusyEm+0x14>
   if (timeout <= (micros() - _time)) {
    6678:	f7fb fffa 	bl	2670 <micros>
    667c:	1b40      	subs	r0, r0, r5
    667e:	4284      	cmp	r4, r0
    6680:	d8f3      	bhi.n	666a <_ZN8SPIFlash8_notBusyEm+0x22>
   diagnostics.troubleshoot(_code, printoverride);
    6682:	4803      	ldr	r0, [pc, #12]	; (6690 <_ZN8SPIFlash8_notBusyEm+0x48>)
    6684:	2200      	movs	r2, #0
    6686:	2104      	movs	r1, #4
    6688:	f002 f996 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
    668c:	2000      	movs	r0, #0
    668e:	e7ed      	b.n	666c <_ZN8SPIFlash8_notBusyEm+0x24>
    6690:	20001a10 	.word	0x20001a10

00006694 <_ZN8SPIFlash12_writeEnableEb>:
 bool SPIFlash::_writeEnable(bool _troubleshootEnable) {
    6694:	b570      	push	{r4, r5, r6, lr}
    6696:	0004      	movs	r4, r0
    6698:	000d      	movs	r5, r1
   _beginSPI(WRITEENABLE);
    669a:	2106      	movs	r1, #6
    669c:	f7ff feea 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    66a0:	7c20      	ldrb	r0, [r4, #16]
    66a2:	2101      	movs	r1, #1
    66a4:	f7fd fa14 	bl	3ad0 <digitalWrite>
   if (!(_readStat1() & WRTEN)) {
    66a8:	0020      	movs	r0, r4
    66aa:	f7ff ff49 	bl	6540 <_ZN8SPIFlash10_readStat1Ev>
    66ae:	2402      	movs	r4, #2
    66b0:	4004      	ands	r4, r0
    66b2:	d109      	bne.n	66c8 <_ZN8SPIFlash12_writeEnableEb+0x34>
     if (_troubleshootEnable) {
    66b4:	2d00      	cmp	r5, #0
    66b6:	d005      	beq.n	66c4 <_ZN8SPIFlash12_writeEnableEb+0x30>
   diagnostics.troubleshoot(_code, printoverride);
    66b8:	0022      	movs	r2, r4
    66ba:	2106      	movs	r1, #6
    66bc:	4803      	ldr	r0, [pc, #12]	; (66cc <_ZN8SPIFlash12_writeEnableEb+0x38>)
    66be:	f002 f97b 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
    66c2:	0025      	movs	r5, r4
 }
    66c4:	0028      	movs	r0, r5
    66c6:	bd70      	pop	{r4, r5, r6, pc}
   return true;
    66c8:	2501      	movs	r5, #1
    66ca:	e7fb      	b.n	66c4 <_ZN8SPIFlash12_writeEnableEb+0x30>
    66cc:	20001a10 	.word	0x20001a10

000066d0 <_ZN8SPIFlash5_prepEhmm>:
 bool SPIFlash::_prep(uint8_t opcode, uint32_t _addr, uint32_t size) {
    66d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66d2:	001e      	movs	r6, r3
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    66d4:	0003      	movs	r3, r0
    66d6:	3337      	adds	r3, #55	; 0x37
    66d8:	781b      	ldrb	r3, [r3, #0]
 bool SPIFlash::_prep(uint8_t opcode, uint32_t _addr, uint32_t size) {
    66da:	0004      	movs	r4, r0
    66dc:	000f      	movs	r7, r1
    66de:	0015      	movs	r5, r2
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    66e0:	2bef      	cmp	r3, #239	; 0xef
    66e2:	d014      	beq.n	670e <_ZN8SPIFlash5_prepEhmm+0x3e>
   switch (opcode) {
    66e4:	2f02      	cmp	r7, #2
    66e6:	d01b      	beq.n	6720 <_ZN8SPIFlash5_prepEhmm+0x50>
    66e8:	2fef      	cmp	r7, #239	; 0xef
    66ea:	d037      	beq.n	675c <_ZN8SPIFlash5_prepEhmm+0x8c>
       if (_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notBusy()) {
    66ec:	0020      	movs	r0, r4
    66ee:	f7ff ff9d 	bl	662c <_ZN8SPIFlash18_isChipPoweredDownEv>
    66f2:	2800      	cmp	r0, #0
    66f4:	d112      	bne.n	671c <_ZN8SPIFlash5_prepEhmm+0x4c>
    66f6:	0032      	movs	r2, r6
    66f8:	0029      	movs	r1, r5
    66fa:	0020      	movs	r0, r4
    66fc:	f7ff fe6e 	bl	63dc <_ZN8SPIFlash13_addressCheckEmm>
    6700:	2800      	cmp	r0, #0
    6702:	d00b      	beq.n	671c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6704:	491b      	ldr	r1, [pc, #108]	; (6774 <_ZN8SPIFlash5_prepEhmm+0xa4>)
    6706:	0020      	movs	r0, r4
    6708:	f7ff ff9e 	bl	6648 <_ZN8SPIFlash8_notBusyEm>
    670c:	e007      	b.n	671e <_ZN8SPIFlash5_prepEhmm+0x4e>
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    670e:	4b1a      	ldr	r3, [pc, #104]	; (6778 <_ZN8SPIFlash5_prepEhmm+0xa8>)
    6710:	429a      	cmp	r2, r3
    6712:	d9e7      	bls.n	66e4 <_ZN8SPIFlash5_prepEhmm+0x14>
     if (!_enable4ByteAddressing()) {    // If unable to enable 4-byte addressing
    6714:	f7ff ff36 	bl	6584 <_ZN8SPIFlash22_enable4ByteAddressingEv>
    6718:	2800      	cmp	r0, #0
    671a:	d1e3      	bne.n	66e4 <_ZN8SPIFlash5_prepEhmm+0x14>
       return false;
    671c:	2000      	movs	r0, #0
 }
    671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       if(_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notPrevWritten(_addr, size) || !_notBusy() || !_writeEnable()) {
    6720:	0020      	movs	r0, r4
    6722:	f7ff ff83 	bl	662c <_ZN8SPIFlash18_isChipPoweredDownEv>
    6726:	2800      	cmp	r0, #0
    6728:	d1f8      	bne.n	671c <_ZN8SPIFlash5_prepEhmm+0x4c>
    672a:	0032      	movs	r2, r6
    672c:	0029      	movs	r1, r5
    672e:	0020      	movs	r0, r4
    6730:	f7ff fe54 	bl	63dc <_ZN8SPIFlash13_addressCheckEmm>
    6734:	2800      	cmp	r0, #0
    6736:	d0f1      	beq.n	671c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6738:	0032      	movs	r2, r6
    673a:	0029      	movs	r1, r5
    673c:	0020      	movs	r0, r4
    673e:	f7ff fec9 	bl	64d4 <_ZN8SPIFlash15_notPrevWrittenEmm>
     if(_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notBusy() || !_writeEnable()) {
    6742:	2800      	cmp	r0, #0
    6744:	d0ea      	beq.n	671c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6746:	490b      	ldr	r1, [pc, #44]	; (6774 <_ZN8SPIFlash5_prepEhmm+0xa4>)
    6748:	0020      	movs	r0, r4
    674a:	f7ff ff7d 	bl	6648 <_ZN8SPIFlash8_notBusyEm>
    674e:	2800      	cmp	r0, #0
    6750:	d0e4      	beq.n	671c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6752:	2101      	movs	r1, #1
    6754:	0020      	movs	r0, r4
    6756:	f7ff ff9d 	bl	6694 <_ZN8SPIFlash12_writeEnableEb>
    675a:	e7e0      	b.n	671e <_ZN8SPIFlash5_prepEhmm+0x4e>
    675c:	0020      	movs	r0, r4
    675e:	f7ff ff65 	bl	662c <_ZN8SPIFlash18_isChipPoweredDownEv>
    6762:	2800      	cmp	r0, #0
    6764:	d1da      	bne.n	671c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6766:	0032      	movs	r2, r6
    6768:	0029      	movs	r1, r5
    676a:	0020      	movs	r0, r4
    676c:	f7ff fe36 	bl	63dc <_ZN8SPIFlash13_addressCheckEmm>
    6770:	e7e7      	b.n	6742 <_ZN8SPIFlash5_prepEhmm+0x72>
    6772:	46c0      	nop			; (mov r8, r8)
    6774:	3b9aca00 	.word	0x3b9aca00
    6778:	00ffffff 	.word	0x00ffffff

0000677c <_ZN8SPIFlash13_writeDisableEv>:
 bool SPIFlash::_writeDisable(void) {
    677c:	b510      	push	{r4, lr}
    677e:	0004      	movs	r4, r0
 	_beginSPI(WRITEDISABLE);
    6780:	2104      	movs	r1, #4
    6782:	f7ff fe77 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    6786:	7c20      	ldrb	r0, [r4, #16]
    6788:	2101      	movs	r1, #1
    678a:	f7fd f9a1 	bl	3ad0 <digitalWrite>
 }
    678e:	2001      	movs	r0, #1
    6790:	bd10      	pop	{r4, pc}
	...

00006794 <_ZN8SPIFlash11_getJedecIdEv>:
 bool SPIFlash::_getJedecId(void) {
    6794:	b570      	push	{r4, r5, r6, lr}
   if(!_notBusy()) {
    6796:	4917      	ldr	r1, [pc, #92]	; (67f4 <_ZN8SPIFlash11_getJedecIdEv+0x60>)
 bool SPIFlash::_getJedecId(void) {
    6798:	0004      	movs	r4, r0
   if(!_notBusy()) {
    679a:	f7ff ff55 	bl	6648 <_ZN8SPIFlash8_notBusyEm>
    679e:	1e05      	subs	r5, r0, #0
    67a0:	d025      	beq.n	67ee <_ZN8SPIFlash11_getJedecIdEv+0x5a>
   _beginSPI(JEDECID);
    67a2:	219f      	movs	r1, #159	; 0x9f
    67a4:	0020      	movs	r0, r4
    67a6:	f7ff fe65 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    67aa:	0026      	movs	r6, r4
     return xfer(data);
    67ac:	2100      	movs	r1, #0
    67ae:	68e0      	ldr	r0, [r4, #12]
    67b0:	f000 f97e 	bl	6ab0 <_ZN8SPIClass8transferEh>
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    67b4:	3637      	adds	r6, #55	; 0x37
    67b6:	7030      	strb	r0, [r6, #0]
     return xfer(data);
    67b8:	2100      	movs	r1, #0
    67ba:	68e0      	ldr	r0, [r4, #12]
    67bc:	f000 f978 	bl	6ab0 <_ZN8SPIClass8transferEh>
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
    67c0:	0023      	movs	r3, r4
    67c2:	3338      	adds	r3, #56	; 0x38
    67c4:	7018      	strb	r0, [r3, #0]
     return xfer(data);
    67c6:	2100      	movs	r1, #0
    67c8:	68e0      	ldr	r0, [r4, #12]
    67ca:	f000 f971 	bl	6ab0 <_ZN8SPIClass8transferEh>
 	_chip.capacityID = _nextByte(READ);		// capacity
    67ce:	0023      	movs	r3, r4
    67d0:	3339      	adds	r3, #57	; 0x39
    67d2:	7018      	strb	r0, [r3, #0]
   CHIP_DESELECT
    67d4:	7c20      	ldrb	r0, [r4, #16]
    67d6:	2101      	movs	r1, #1
    67d8:	f7fd f97a 	bl	3ad0 <digitalWrite>
   if (!_chip.manufacturerID) {
    67dc:	7834      	ldrb	r4, [r6, #0]
    67de:	2c00      	cmp	r4, #0
    67e0:	d105      	bne.n	67ee <_ZN8SPIFlash11_getJedecIdEv+0x5a>
   diagnostics.troubleshoot(_code, printoverride);
    67e2:	0022      	movs	r2, r4
    67e4:	210b      	movs	r1, #11
    67e6:	4804      	ldr	r0, [pc, #16]	; (67f8 <_ZN8SPIFlash11_getJedecIdEv+0x64>)
    67e8:	f002 f8e6 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
    67ec:	0025      	movs	r5, r4
 }
    67ee:	0028      	movs	r0, r5
    67f0:	bd70      	pop	{r4, r5, r6, pc}
    67f2:	46c0      	nop			; (mov r8, r8)
    67f4:	3b9aca00 	.word	0x3b9aca00
    67f8:	20001a10 	.word	0x20001a10

000067fc <_ZN8SPIFlash26_disableGlobalBlockProtectEv>:
   if (_chip.memoryTypeID == SST25) {
    67fc:	0003      	movs	r3, r0
 bool SPIFlash::_disableGlobalBlockProtect(void) {
    67fe:	b570      	push	{r4, r5, r6, lr}
   if (_chip.memoryTypeID == SST25) {
    6800:	3338      	adds	r3, #56	; 0x38
    6802:	781b      	ldrb	r3, [r3, #0]
 bool SPIFlash::_disableGlobalBlockProtect(void) {
    6804:	0004      	movs	r4, r0
   if (_chip.memoryTypeID == SST25) {
    6806:	2b25      	cmp	r3, #37	; 0x25
    6808:	d11c      	bne.n	6844 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x48>
     _readStat1();
    680a:	f7ff fe99 	bl	6540 <_ZN8SPIFlash10_readStat1Ev>
     uint8_t _tempStat1 = stat1 & 0xC3;
    680e:	1d23      	adds	r3, r4, #4
    6810:	7fdd      	ldrb	r5, [r3, #31]
    6812:	233c      	movs	r3, #60	; 0x3c
     _beginSPI(WRITESTATEN);
    6814:	2150      	movs	r1, #80	; 0x50
    6816:	0020      	movs	r0, r4
     uint8_t _tempStat1 = stat1 & 0xC3;
    6818:	439d      	bics	r5, r3
     _beginSPI(WRITESTATEN);
    681a:	f7ff fe2b 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    681e:	7c20      	ldrb	r0, [r4, #16]
    6820:	2101      	movs	r1, #1
    6822:	f7fd f955 	bl	3ad0 <digitalWrite>
     _beginSPI(WRITESTAT1);
    6826:	2101      	movs	r1, #1
    6828:	0020      	movs	r0, r4
    682a:	f7ff fe23 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
     _nextByte(WRITE, _tempStat1);
    682e:	0029      	movs	r1, r5
    6830:	0020      	movs	r0, r4
    6832:	f7ff fdcd 	bl	63d0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     CHIP_DESELECT
    6836:	7c20      	ldrb	r0, [r4, #16]
    6838:	2101      	movs	r1, #1
    683a:	f7fd f949 	bl	3ad0 <digitalWrite>
   return true;
    683e:	2501      	movs	r5, #1
 }
    6840:	0028      	movs	r0, r5
    6842:	bd70      	pop	{r4, r5, r6, pc}
   return true;
    6844:	2501      	movs	r5, #1
   else if (_chip.memoryTypeID == SST26) {
    6846:	2b26      	cmp	r3, #38	; 0x26
    6848:	d1fa      	bne.n	6840 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
     if(!_notBusy()) {
    684a:	490e      	ldr	r1, [pc, #56]	; (6884 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x88>)
    684c:	f7ff fefc 	bl	6648 <_ZN8SPIFlash8_notBusyEm>
    6850:	1e05      	subs	r5, r0, #0
    6852:	d0f5      	beq.n	6840 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
     _writeEnable();
    6854:	2101      	movs	r1, #1
    6856:	0020      	movs	r0, r4
    6858:	f7ff ff1c 	bl	6694 <_ZN8SPIFlash12_writeEnableEb>
    685c:	23a0      	movs	r3, #160	; 0xa0
    685e:	3b01      	subs	r3, #1
    6860:	d1fd      	bne.n	685e <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x62>
     _beginSPI(ULBPR);
    6862:	2198      	movs	r1, #152	; 0x98
    6864:	0020      	movs	r0, r4
    6866:	f7ff fe05 	bl	6474 <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    686a:	7c20      	ldrb	r0, [r4, #16]
    686c:	2101      	movs	r1, #1
    686e:	f7fd f92f 	bl	3ad0 <digitalWrite>
    6872:	23c8      	movs	r3, #200	; 0xc8
    6874:	009b      	lsls	r3, r3, #2
    6876:	3b01      	subs	r3, #1
    6878:	d1fd      	bne.n	6876 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x7a>
     _writeDisable();
    687a:	0020      	movs	r0, r4
    687c:	f7ff ff7e 	bl	677c <_ZN8SPIFlash13_writeDisableEv>
    6880:	e7de      	b.n	6840 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
    6882:	46c0      	nop			; (mov r8, r8)
    6884:	3b9aca00 	.word	0x3b9aca00

00006888 <_ZN8SPIFlash7_chipIDEm>:
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    6888:	0002      	movs	r2, r0
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    688a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    688c:	2301      	movs	r3, #1
    688e:	3264      	adds	r2, #100	; 0x64
    6890:	7013      	strb	r3, [r2, #0]
    6892:	3a10      	subs	r2, #16
    6894:	7013      	strb	r3, [r2, #0]
    6896:	3a08      	subs	r2, #8
    6898:	7013      	strb	r3, [r2, #0]
    689a:	3a08      	subs	r2, #8
    689c:	7013      	strb	r3, [r2, #0]
   kb4Erase.opcode = SECTORERASE;
    689e:	0003      	movs	r3, r0
    68a0:	2220      	movs	r2, #32
    68a2:	3345      	adds	r3, #69	; 0x45
    68a4:	701a      	strb	r2, [r3, #0]
   kb32Erase.opcode = BLOCK32ERASE;
    68a6:	3232      	adds	r2, #50	; 0x32
    68a8:	721a      	strb	r2, [r3, #8]
   kb64Erase.opcode = BLOCK64ERASE;
    68aa:	3286      	adds	r2, #134	; 0x86
    68ac:	741a      	strb	r2, [r3, #16]
   kb4Erase.time = BUSY_TIMEOUT;
    68ae:	4b41      	ldr	r3, [pc, #260]	; (69b4 <_ZN8SPIFlash7_chipIDEm+0x12c>)
   kb256Erase.supported = false;
    68b0:	2200      	movs	r2, #0
   kb4Erase.time = BUSY_TIMEOUT;
    68b2:	6483      	str	r3, [r0, #72]	; 0x48
   kb32Erase.time = kb4Erase.time * 8;
    68b4:	4b40      	ldr	r3, [pc, #256]	; (69b8 <_ZN8SPIFlash7_chipIDEm+0x130>)
   chipErase.opcode = CHIPERASE;
    68b6:	0005      	movs	r5, r0
   kb32Erase.time = kb4Erase.time * 8;
    68b8:	6503      	str	r3, [r0, #80]	; 0x50
   kb64Erase.time = kb32Erase.time * 4;
    68ba:	4b40      	ldr	r3, [pc, #256]	; (69bc <_ZN8SPIFlash7_chipIDEm+0x134>)
   chipErase.opcode = CHIPERASE;
    68bc:	3565      	adds	r5, #101	; 0x65
   kb64Erase.time = kb32Erase.time * 4;
    68be:	6583      	str	r3, [r0, #88]	; 0x58
   kb256Erase.supported = false;
    68c0:	0003      	movs	r3, r0
    68c2:	335c      	adds	r3, #92	; 0x5c
    68c4:	701a      	strb	r2, [r3, #0]
   chipErase.opcode = CHIPERASE;
    68c6:	2360      	movs	r3, #96	; 0x60
    68c8:	702b      	strb	r3, [r5, #0]
   chipErase.time = kb64Erase.time * 100L;
    68ca:	4b3d      	ldr	r3, [pc, #244]	; (69c0 <_ZN8SPIFlash7_chipIDEm+0x138>)
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    68cc:	0004      	movs	r4, r0
   chipErase.time = kb64Erase.time * 100L;
    68ce:	6683      	str	r3, [r0, #104]	; 0x68
   _pageSize = SPI_PAGESIZE;
    68d0:	0003      	movs	r3, r0
    68d2:	3201      	adds	r2, #1
    68d4:	3372      	adds	r3, #114	; 0x72
    68d6:	32ff      	adds	r2, #255	; 0xff
    68d8:	801a      	strh	r2, [r3, #0]
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    68da:	000e      	movs	r6, r1
   _getJedecId();
    68dc:	f7ff ff5a 	bl	6794 <_ZN8SPIFlash11_getJedecIdEv>
     if (_chip.manufacturerID == _supportedManID[i]) {
    68e0:	0023      	movs	r3, r4
    68e2:	1ca2      	adds	r2, r4, #2
    68e4:	3337      	adds	r3, #55	; 0x37
    68e6:	7819      	ldrb	r1, [r3, #0]
    68e8:	32ff      	adds	r2, #255	; 0xff
    68ea:	33c1      	adds	r3, #193	; 0xc1
    68ec:	7818      	ldrb	r0, [r3, #0]
    68ee:	4288      	cmp	r0, r1
    68f0:	d127      	bne.n	6942 <_ZN8SPIFlash7_chipIDEm+0xba>
       _chip.supportedMan = true;
    68f2:	0023      	movs	r3, r4
    68f4:	2201      	movs	r2, #1
    68f6:	3335      	adds	r3, #53	; 0x35
    68f8:	701a      	strb	r2, [r3, #0]
     if (_chip.memoryTypeID == _altChipEraseReq[i]) {
    68fa:	0023      	movs	r3, r4
    68fc:	0022      	movs	r2, r4
    68fe:	3338      	adds	r3, #56	; 0x38
    6900:	32ff      	adds	r2, #255	; 0xff
    6902:	781b      	ldrb	r3, [r3, #0]
    6904:	7890      	ldrb	r0, [r2, #2]
    6906:	4298      	cmp	r0, r3
    6908:	d005      	beq.n	6916 <_ZN8SPIFlash7_chipIDEm+0x8e>
    690a:	78d0      	ldrb	r0, [r2, #3]
    690c:	4298      	cmp	r0, r3
    690e:	d002      	beq.n	6916 <_ZN8SPIFlash7_chipIDEm+0x8e>
    6910:	7912      	ldrb	r2, [r2, #4]
    6912:	429a      	cmp	r2, r3
    6914:	d101      	bne.n	691a <_ZN8SPIFlash7_chipIDEm+0x92>
       chipErase.opcode = ALT_CHIPERASE;
    6916:	23c7      	movs	r3, #199	; 0xc7
    6918:	702b      	strb	r3, [r5, #0]
   if (_chip.supportedMan) {
    691a:	0023      	movs	r3, r4
    691c:	3335      	adds	r3, #53	; 0x35
    691e:	781d      	ldrb	r5, [r3, #0]
    6920:	2d00      	cmp	r5, #0
    6922:	d032      	beq.n	698a <_ZN8SPIFlash7_chipIDEm+0x102>
    6924:	0027      	movs	r7, r4
    6926:	3739      	adds	r7, #57	; 0x39
     if(_chip.manufacturerID == MACRONIX_MANID)
    6928:	29c2      	cmp	r1, #194	; 0xc2
    692a:	d111      	bne.n	6950 <_ZN8SPIFlash7_chipIDEm+0xc8>
       switch(_chip.capacityID)
    692c:	783b      	ldrb	r3, [r7, #0]
    692e:	2b13      	cmp	r3, #19
    6930:	d00b      	beq.n	694a <_ZN8SPIFlash7_chipIDEm+0xc2>
    6932:	2b14      	cmp	r3, #20
    6934:	d01b      	beq.n	696e <_ZN8SPIFlash7_chipIDEm+0xe6>
   diagnostics.troubleshoot(_code, printoverride);
    6936:	2200      	movs	r2, #0
    6938:	2102      	movs	r1, #2
    693a:	4822      	ldr	r0, [pc, #136]	; (69c4 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    693c:	f002 f83c 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
    6940:	e006      	b.n	6950 <_ZN8SPIFlash7_chipIDEm+0xc8>
    6942:	3301      	adds	r3, #1
   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
    6944:	4293      	cmp	r3, r2
    6946:	d1d1      	bne.n	68ec <_ZN8SPIFlash7_chipIDEm+0x64>
    6948:	e7d7      	b.n	68fa <_ZN8SPIFlash7_chipIDEm+0x72>
         _chip.capacity = MB(4);
    694a:	2380      	movs	r3, #128	; 0x80
    694c:	03db      	lsls	r3, r3, #15
         _chip.capacity = MB(8);
    694e:	63e3      	str	r3, [r4, #60]	; 0x3c
       if (_chip.capacityID == _capID[j]) {
    6950:	2300      	movs	r3, #0
    6952:	783a      	ldrb	r2, [r7, #0]
    6954:	0019      	movs	r1, r3
    6956:	319c      	adds	r1, #156	; 0x9c
    6958:	5c61      	ldrb	r1, [r4, r1]
    695a:	4291      	cmp	r1, r2
    695c:	d10a      	bne.n	6974 <_ZN8SPIFlash7_chipIDEm+0xec>
         _chip.capacity = (_memSize[j]);
    695e:	332c      	adds	r3, #44	; 0x2c
    6960:	009b      	lsls	r3, r3, #2
    6962:	591b      	ldr	r3, [r3, r4]
         _chip.supported = true;
    6964:	3434      	adds	r4, #52	; 0x34
         _chip.capacity = (_memSize[j]);
    6966:	60a3      	str	r3, [r4, #8]
         _chip.supported = true;
    6968:	2301      	movs	r3, #1
       _chip.supported = false;
    696a:	7023      	strb	r3, [r4, #0]
       return true;
    696c:	e012      	b.n	6994 <_ZN8SPIFlash7_chipIDEm+0x10c>
         _chip.capacity = MB(8);
    696e:	2380      	movs	r3, #128	; 0x80
    6970:	041b      	lsls	r3, r3, #16
    6972:	e7ec      	b.n	694e <_ZN8SPIFlash7_chipIDEm+0xc6>
    6974:	3301      	adds	r3, #1
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
    6976:	2b12      	cmp	r3, #18
    6978:	d1ec      	bne.n	6954 <_ZN8SPIFlash7_chipIDEm+0xcc>
   if (!_chip.capacity) {
    697a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    697c:	2b00      	cmp	r3, #0
    697e:	d108      	bne.n	6992 <_ZN8SPIFlash7_chipIDEm+0x10a>
     if (flashChipSize) {
    6980:	2e00      	cmp	r6, #0
    6982:	d00f      	beq.n	69a4 <_ZN8SPIFlash7_chipIDEm+0x11c>
       _chip.capacity = flashChipSize;
    6984:	63e6      	str	r6, [r4, #60]	; 0x3c
       _chip.supported = false;
    6986:	3434      	adds	r4, #52	; 0x34
    6988:	e7ef      	b.n	696a <_ZN8SPIFlash7_chipIDEm+0xe2>
     if (_chip.sfdpAvailable) {
    698a:	3436      	adds	r4, #54	; 0x36
    698c:	7825      	ldrb	r5, [r4, #0]
    698e:	2d00      	cmp	r5, #0
    6990:	d002      	beq.n	6998 <_ZN8SPIFlash7_chipIDEm+0x110>
       return true;
    6992:	2501      	movs	r5, #1
 }
    6994:	0028      	movs	r0, r5
    6996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   diagnostics.troubleshoot(_code, printoverride);
    6998:	002a      	movs	r2, r5
    699a:	2102      	movs	r1, #2
    699c:	4809      	ldr	r0, [pc, #36]	; (69c4 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    699e:	f002 f80b 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
       return false;
    69a2:	e7f7      	b.n	6994 <_ZN8SPIFlash7_chipIDEm+0x10c>
   diagnostics.troubleshoot(_code, printoverride);
    69a4:	0032      	movs	r2, r6
    69a6:	2103      	movs	r1, #3
    69a8:	4806      	ldr	r0, [pc, #24]	; (69c4 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    69aa:	f002 f805 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
       return false;
    69ae:	0035      	movs	r5, r6
    69b0:	e7f0      	b.n	6994 <_ZN8SPIFlash7_chipIDEm+0x10c>
    69b2:	46c0      	nop			; (mov r8, r8)
    69b4:	3b9aca00 	.word	0x3b9aca00
    69b8:	dcd65000 	.word	0xdcd65000
    69bc:	73594000 	.word	0x73594000
    69c0:	0edd0000 	.word	0x0edd0000
    69c4:	20001a10 	.word	0x20001a10

000069c8 <_ZN8SPIFlash13_troubleshootEhb>:
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
    69c8:	b510      	push	{r4, lr}
   diagnostics.troubleshoot(_code, printoverride);
    69ca:	4802      	ldr	r0, [pc, #8]	; (69d4 <_ZN8SPIFlash13_troubleshootEhb+0xc>)
    69cc:	f001 fff4 	bl	89b8 <_ZN11Diagnostics12troubleshootEhb>
 }
    69d0:	bd10      	pop	{r4, pc}
    69d2:	46c0      	nop			; (mov r8, r8)
    69d4:	20001a10 	.word	0x20001a10

000069d8 <_ZN8SPIClass4initEv>:
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    69d8:	7a43      	ldrb	r3, [r0, #9]
    69da:	2b00      	cmp	r3, #0
    69dc:	d104      	bne.n	69e8 <_ZN8SPIClass4initEv+0x10>
    return;
  interruptMode = SPI_IMODE_NONE;
    69de:	7283      	strb	r3, [r0, #10]
  interruptSave = 0;
    69e0:	72c3      	strb	r3, [r0, #11]
  interruptMask = 0;
    69e2:	60c3      	str	r3, [r0, #12]
  initialized = true;
    69e4:	3301      	adds	r3, #1
    69e6:	7243      	strb	r3, [r0, #9]
}
    69e8:	4770      	bx	lr

000069ea <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    69ea:	b530      	push	{r4, r5, lr}
    69ec:	0004      	movs	r4, r0
    69ee:	b085      	sub	sp, #20
    69f0:	ad02      	add	r5, sp, #8
  _p_sercom->disableSPI();
    69f2:	6800      	ldr	r0, [r0, #0]
{
    69f4:	9102      	str	r1, [sp, #8]
    69f6:	9203      	str	r2, [sp, #12]
  _p_sercom->disableSPI();
    69f8:	f7fe fadf 	bl	4fba <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    69fc:	796b      	ldrb	r3, [r5, #5]
    69fe:	7a22      	ldrb	r2, [r4, #8]
    6a00:	79e1      	ldrb	r1, [r4, #7]
    6a02:	9300      	str	r3, [sp, #0]
    6a04:	6820      	ldr	r0, [r4, #0]
    6a06:	2300      	movs	r3, #0
    6a08:	f7fe fb82 	bl	5110 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    6a0c:	7929      	ldrb	r1, [r5, #4]
    6a0e:	9a02      	ldr	r2, [sp, #8]
    6a10:	6820      	ldr	r0, [r4, #0]
    6a12:	f7fe faa5 	bl	4f60 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    6a16:	6820      	ldr	r0, [r4, #0]
    6a18:	f7fe fac6 	bl	4fa8 <_ZN6SERCOM9enableSPIEv>
}
    6a1c:	b005      	add	sp, #20
    6a1e:	bd30      	pop	{r4, r5, pc}

00006a20 <_ZN8SPIClass5beginEv>:
{
    6a20:	b510      	push	{r4, lr}
    6a22:	0004      	movs	r4, r0
  init();
    6a24:	f7ff ffd8 	bl	69d8 <_ZN8SPIClass4initEv>
  pinPeripheral(_uc_pinMiso, PIO_SERCOM);
    6a28:	7920      	ldrb	r0, [r4, #4]
    6a2a:	210e      	movs	r1, #14
    6a2c:	f7fd f8ba 	bl	3ba4 <pinPeripheral>
  pinPeripheral(_uc_pinSCK, PIO_SERCOM);
    6a30:	79a0      	ldrb	r0, [r4, #6]
    6a32:	210e      	movs	r1, #14
    6a34:	f7fd f8b6 	bl	3ba4 <pinPeripheral>
  pinPeripheral(_uc_pinMosi, PIO_SERCOM);
    6a38:	7960      	ldrb	r0, [r4, #5]
    6a3a:	210e      	movs	r1, #14
    6a3c:	f7fd f8b2 	bl	3ba4 <pinPeripheral>
  config(DEFAULT_SPI_SETTINGS);
    6a40:	4b02      	ldr	r3, [pc, #8]	; (6a4c <_ZN8SPIClass5beginEv+0x2c>)
    6a42:	0020      	movs	r0, r4
    6a44:	cb06      	ldmia	r3!, {r1, r2}
    6a46:	f7ff ffd0 	bl	69ea <_ZN8SPIClass6configE11SPISettings>
}
    6a4a:	bd10      	pop	{r4, pc}
    6a4c:	200012ac 	.word	0x200012ac

00006a50 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    6a50:	b507      	push	{r0, r1, r2, lr}
  if (interruptMode != SPI_IMODE_NONE)
    6a52:	7a83      	ldrb	r3, [r0, #10]
{
    6a54:	9100      	str	r1, [sp, #0]
    6a56:	9201      	str	r2, [sp, #4]
  if (interruptMode != SPI_IMODE_NONE)
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d007      	beq.n	6a6c <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    6a5c:	079a      	lsls	r2, r3, #30
    6a5e:	d50a      	bpl.n	6a76 <_ZN8SPIClass16beginTransactionE11SPISettings+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6a60:	f3ef 8210 	mrs	r2, PRIMASK
  return (__get_PRIMASK() ? 0 : 1);
    6a64:	4253      	negs	r3, r2
    6a66:	4153      	adcs	r3, r2
    {
      interruptSave = interruptsStatus();
    6a68:	72c3      	strb	r3, [r0, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    6a6a:	b672      	cpsid	i
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
  }

  config(settings);
    6a6c:	9900      	ldr	r1, [sp, #0]
    6a6e:	9a01      	ldr	r2, [sp, #4]
    6a70:	f7ff ffbb 	bl	69ea <_ZN8SPIClass6configE11SPISettings>
}
    6a74:	bd07      	pop	{r0, r1, r2, pc}
    else if (interruptMode & SPI_IMODE_EXTINT)
    6a76:	07db      	lsls	r3, r3, #31
    6a78:	d5f8      	bpl.n	6a6c <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    6a7a:	8983      	ldrh	r3, [r0, #12]
    6a7c:	4a01      	ldr	r2, [pc, #4]	; (6a84 <_ZN8SPIClass16beginTransactionE11SPISettings+0x34>)
    6a7e:	60d3      	str	r3, [r2, #12]
    6a80:	e7f4      	b.n	6a6c <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
    6a82:	46c0      	nop			; (mov r8, r8)
    6a84:	40002400 	.word	0x40002400

00006a88 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
  if (interruptMode != SPI_IMODE_NONE)
    6a88:	7a83      	ldrb	r3, [r0, #10]
    6a8a:	2b00      	cmp	r3, #0
    6a8c:	d005      	beq.n	6a9a <_ZN8SPIClass14endTransactionEv+0x12>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    6a8e:	079a      	lsls	r2, r3, #30
    6a90:	d504      	bpl.n	6a9c <_ZN8SPIClass14endTransactionEv+0x14>
    {
      if (interruptSave)
    6a92:	7ac3      	ldrb	r3, [r0, #11]
    6a94:	2b00      	cmp	r3, #0
    6a96:	d000      	beq.n	6a9a <_ZN8SPIClass14endTransactionEv+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
    6a98:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    6a9a:	4770      	bx	lr
    else if (interruptMode & SPI_IMODE_EXTINT)
    6a9c:	07db      	lsls	r3, r3, #31
    6a9e:	d5fc      	bpl.n	6a9a <_ZN8SPIClass14endTransactionEv+0x12>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    6aa0:	68c3      	ldr	r3, [r0, #12]
    6aa2:	4a02      	ldr	r2, [pc, #8]	; (6aac <_ZN8SPIClass14endTransactionEv+0x24>)
    6aa4:	b29b      	uxth	r3, r3
    6aa6:	6113      	str	r3, [r2, #16]
}
    6aa8:	e7f7      	b.n	6a9a <_ZN8SPIClass14endTransactionEv+0x12>
    6aaa:	46c0      	nop			; (mov r8, r8)
    6aac:	40002400 	.word	0x40002400

00006ab0 <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    6ab0:	b510      	push	{r4, lr}
  return _p_sercom->transferDataSPI(data);
    6ab2:	6800      	ldr	r0, [r0, #0]
    6ab4:	f7fe fa8a 	bl	4fcc <_ZN6SERCOM15transferDataSPIEh>
}
    6ab8:	bd10      	pop	{r4, pc}

00006aba <_ZN8SPIClass8transferEPvj>:

  return t.val;
}

void SPIClass::transfer(void *buf, size_t count)
{
    6aba:	b570      	push	{r4, r5, r6, lr}
    6abc:	0006      	movs	r6, r0
  uint8_t *buffer = reinterpret_cast<uint8_t *>(buf);
    6abe:	000c      	movs	r4, r1
    6ac0:	188d      	adds	r5, r1, r2
  for (size_t i=0; i<count; i++) {
    6ac2:	42ac      	cmp	r4, r5
    6ac4:	d006      	beq.n	6ad4 <_ZN8SPIClass8transferEPvj+0x1a>
    *buffer = transfer(*buffer);
    6ac6:	7821      	ldrb	r1, [r4, #0]
    6ac8:	0030      	movs	r0, r6
    6aca:	f7ff fff1 	bl	6ab0 <_ZN8SPIClass8transferEh>
    6ace:	7020      	strb	r0, [r4, #0]
    buffer++;
    6ad0:	3401      	adds	r4, #1
  for (size_t i=0; i<count; i++) {
    6ad2:	e7f6      	b.n	6ac2 <_ZN8SPIClass8transferEPvj+0x8>
  }
}
    6ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

00006ad8 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    6ad8:	4b09      	ldr	r3, [pc, #36]	; (6b00 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x28>)
    6ada:	4a0a      	ldr	r2, [pc, #40]	; (6b04 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2c>)
    6adc:	601a      	str	r2, [r3, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    6ade:	2200      	movs	r2, #0
    6ae0:	715a      	strb	r2, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    6ae2:	711a      	strb	r2, [r3, #4]
  initialized = false;
    6ae4:	4b08      	ldr	r3, [pc, #32]	; (6b08 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x30>)
    6ae6:	725a      	strb	r2, [r3, #9]
  _p_sercom = p_sercom;
    6ae8:	4a08      	ldr	r2, [pc, #32]	; (6b0c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x34>)
    6aea:	601a      	str	r2, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
    6aec:	2223      	movs	r2, #35	; 0x23
    6aee:	711a      	strb	r2, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    6af0:	3a02      	subs	r2, #2
    6af2:	719a      	strb	r2, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    6af4:	3a01      	subs	r2, #1
    6af6:	715a      	strb	r2, [r3, #5]
  _padTx=PadTx;
    6af8:	3a1f      	subs	r2, #31
    6afa:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    6afc:	721a      	strb	r2, [r3, #8]
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom5                 //sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3        //SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_1        //SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    6afe:	4770      	bx	lr
    6b00:	200012ac 	.word	0x200012ac
    6b04:	003d0900 	.word	0x003d0900
    6b08:	2000129c 	.word	0x2000129c
    6b0c:	20001260 	.word	0x20001260

00006b10 <_ZL15cbor_enc_lengthhP8cbor_bufm>:
}

/* Variable length encoder for integer types - UINT/NINT and ARRAY/MAP dimensions */
static int
cbor_enc_length(uint8_t major_type, struct cbor_buf * cbuf, uint32_t val)
{
    6b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b12:	4684      	mov	ip, r0
    6b14:	000d      	movs	r5, r1
    6b16:	9201      	str	r2, [sp, #4]
    6b18:	ba16      	rev	r6, r2
        *addnl_info = val;
    6b1a:	b2d3      	uxtb	r3, r2
        retbytes = 0;
    6b1c:	2400      	movs	r4, #0
    if (val <= CBOR_MJR0_THRESHOLD) {
    6b1e:	2a17      	cmp	r2, #23
    6b20:	d90a      	bls.n	6b38 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    } else if (val > CBOR_MJR0_THRESHOLD && val <= UINT8_MAX) {
    6b22:	0013      	movs	r3, r2
    6b24:	3b18      	subs	r3, #24
    6b26:	2be7      	cmp	r3, #231	; 0xe7
    6b28:	d911      	bls.n	6b4e <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3e>
    } else if (val > UINT8_MAX && val <= UINT16_MAX) {
    6b2a:	1e53      	subs	r3, r2, #1
    6b2c:	491c      	ldr	r1, [pc, #112]	; (6ba0 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x90>)
    6b2e:	3bff      	subs	r3, #255	; 0xff
    6b30:	428b      	cmp	r3, r1
    6b32:	d80f      	bhi.n	6b54 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x44>
        *addnl_info = CBOR_ADDL_BYTE_UINT16;
    6b34:	2319      	movs	r3, #25
        retbytes = SIZE_UINT16;
    6b36:	2402      	movs	r4, #2
    int addnlBytes;
    uint8_t additionalInfo;

    addnlBytes = cbor_get_addnl_info(val, &additionalInfo);

    if ((cbuf->next + addnlBytes) > cbuf->tail) {
    6b38:	68a9      	ldr	r1, [r5, #8]
    6b3a:	6868      	ldr	r0, [r5, #4]
    6b3c:	190f      	adds	r7, r1, r4
    6b3e:	42b8      	cmp	r0, r7
    6b40:	d20b      	bcs.n	6b5a <_ZL15cbor_enc_lengthhP8cbor_bufm+0x4a>
        cbuf->err = CBOR_NO_MEM;
    6b42:	2301      	movs	r3, #1
            break;
#endif
        default:
            /* TODO - error handling */
           cbuf->err = CBOR_INV_ADDNL_INFO;
           return CBOR_ERR;
    6b44:	2401      	movs	r4, #1
           cbuf->err = CBOR_INV_ADDNL_INFO;
    6b46:	60eb      	str	r3, [r5, #12]
           return CBOR_ERR;
    6b48:	4264      	negs	r4, r4
        }
        memcpy(cbuf->next, &val, addnlBytes);
        cbuf->next += addnlBytes;
    }
    return CBOR_OK;
}
    6b4a:	0020      	movs	r0, r4
    6b4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *addnl_info = CBOR_ADDL_BYTE_UINT8;
    6b4e:	2318      	movs	r3, #24
        retbytes = SIZE_UINT8;
    6b50:	2401      	movs	r4, #1
    6b52:	e7f1      	b.n	6b38 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
        *addnl_info = CBOR_ADDL_BYTE_UINT32;
    6b54:	231a      	movs	r3, #26
        retbytes = SIZE_UINT;
    6b56:	2404      	movs	r4, #4
    6b58:	e7ee      	b.n	6b38 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    *cbuf->next++ = major_type | additionalInfo;
    6b5a:	4660      	mov	r0, ip
    6b5c:	1c4f      	adds	r7, r1, #1
    6b5e:	4318      	orrs	r0, r3
    6b60:	60af      	str	r7, [r5, #8]
    6b62:	7008      	strb	r0, [r1, #0]
    if (addnlBytes) {
    6b64:	2c00      	cmp	r4, #0
    6b66:	d0f0      	beq.n	6b4a <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
        switch(addnlBytes) {
    6b68:	2c02      	cmp	r4, #2
    6b6a:	d00e      	beq.n	6b8a <_ZL15cbor_enc_lengthhP8cbor_bufm+0x7a>
    6b6c:	2c04      	cmp	r4, #4
    6b6e:	d015      	beq.n	6b9c <_ZL15cbor_enc_lengthhP8cbor_bufm+0x8c>
           cbuf->err = CBOR_INV_ADDNL_INFO;
    6b70:	2308      	movs	r3, #8
        switch(addnlBytes) {
    6b72:	2c01      	cmp	r4, #1
    6b74:	d1e6      	bne.n	6b44 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x34>
        memcpy(cbuf->next, &val, addnlBytes);
    6b76:	0022      	movs	r2, r4
    6b78:	a901      	add	r1, sp, #4
    6b7a:	68a8      	ldr	r0, [r5, #8]
    6b7c:	f005 ff81 	bl	ca82 <memcpy>
        cbuf->next += addnlBytes;
    6b80:	68ab      	ldr	r3, [r5, #8]
    6b82:	191c      	adds	r4, r3, r4
    6b84:	60ac      	str	r4, [r5, #8]
    return CBOR_OK;
    6b86:	2400      	movs	r4, #0
    6b88:	e7df      	b.n	6b4a <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
            val = htons(val);
    6b8a:	4906      	ldr	r1, [pc, #24]	; (6ba4 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x94>)
    6b8c:	0213      	lsls	r3, r2, #8
    6b8e:	b292      	uxth	r2, r2
    6b90:	400b      	ands	r3, r1
    6b92:	0a12      	lsrs	r2, r2, #8
    6b94:	431a      	orrs	r2, r3
    6b96:	b292      	uxth	r2, r2
    6b98:	9201      	str	r2, [sp, #4]
            break;
    6b9a:	e7ec      	b.n	6b76 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
            val = htonl(val);
    6b9c:	9601      	str	r6, [sp, #4]
            break;
    6b9e:	e7ea      	b.n	6b76 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
    6ba0:	0000feff 	.word	0x0000feff
    6ba4:	00ffff00 	.word	0x00ffff00

00006ba8 <_Z13cbor_enc_initP8cbor_bufPvi>:
{
    6ba8:	b570      	push	{r4, r5, r6, lr}
    6baa:	0005      	movs	r5, r0
    6bac:	000c      	movs	r4, r1
    6bae:	0016      	movs	r6, r2
    memset(cbuf, 0, sizeof(struct cbor_buf));
    6bb0:	2100      	movs	r1, #0
    6bb2:	2210      	movs	r2, #16
    6bb4:	f005 ff80 	bl	cab8 <memset>
    cbuf->head = (uint8_t*)buf;
    6bb8:	602c      	str	r4, [r5, #0]
    cbuf->next = (uint8_t*)buf;
    6bba:	60ac      	str	r4, [r5, #8]
    cbuf->tail = cbuf->head + len;
    6bbc:	19a4      	adds	r4, r4, r6
    6bbe:	606c      	str	r4, [r5, #4]
}
    6bc0:	bd70      	pop	{r4, r5, r6, pc}

00006bc2 <_Z16cbor_buf_get_lenP8cbor_buf>:
    return cbuf->next - cbuf->head;
    6bc2:	6883      	ldr	r3, [r0, #8]
    6bc4:	6800      	ldr	r0, [r0, #0]
    6bc6:	1a18      	subs	r0, r3, r0
}
    6bc8:	4770      	bx	lr

00006bca <_Z12cbor_enc_intP8cbor_bufi>:
 *         Error (negative values)
 */
int
cbor_enc_int(struct cbor_buf *cbuf, int val)
{
    uint8_t major_type = CBOR_TYPE_UINT;
    6bca:	2300      	movs	r3, #0
{
    6bcc:	b510      	push	{r4, lr}
    6bce:	000a      	movs	r2, r1

    if (val < 0) {
    6bd0:	4299      	cmp	r1, r3
    6bd2:	da01      	bge.n	6bd8 <_Z12cbor_enc_intP8cbor_bufi+0xe>
        val = -1 - val;
    6bd4:	43ca      	mvns	r2, r1
        major_type = CBOR_TYPE_NINT;
    6bd6:	3320      	adds	r3, #32
    }

    return (cbor_enc_length(major_type, cbuf, val));
    6bd8:	0001      	movs	r1, r0
    6bda:	0018      	movs	r0, r3
    6bdc:	f7ff ff98 	bl	6b10 <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    6be0:	bd10      	pop	{r4, pc}

00006be2 <_Z13cbor_enc_textP8cbor_bufPKci>:
 * output: status of encode operation.
 */
int
cbor_enc_text(struct cbor_buf *cbuf,
                const char *inp_string, int len)
{
    6be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6be4:	0004      	movs	r4, r0
    6be6:	000f      	movs	r7, r1
    int rc = CBOR_OK;
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    6be8:	0001      	movs	r1, r0
    6bea:	2060      	movs	r0, #96	; 0x60
{
    6bec:	0015      	movs	r5, r2
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    6bee:	f7ff ff8f 	bl	6b10 <_ZL15cbor_enc_lengthhP8cbor_bufm>
    6bf2:	1e06      	subs	r6, r0, #0

    if (!rc) {
    6bf4:	d107      	bne.n	6c06 <_Z13cbor_enc_textP8cbor_bufPKci+0x24>
        if (len > (cbuf->tail - cbuf->next)) {
    6bf6:	68a0      	ldr	r0, [r4, #8]
    6bf8:	6863      	ldr	r3, [r4, #4]
    6bfa:	1a1b      	subs	r3, r3, r0
    6bfc:	429d      	cmp	r5, r3
    6bfe:	dd04      	ble.n	6c0a <_Z13cbor_enc_textP8cbor_bufPKci+0x28>
            cbuf->err = CBOR_NO_MEM;
    6c00:	2301      	movs	r3, #1
            rc = CBOR_ERR;
    6c02:	3e01      	subs	r6, #1
            cbuf->err = CBOR_NO_MEM;
    6c04:	60e3      	str	r3, [r4, #12]
            memcpy(cbuf->next, inp_string, len);
            cbuf->next += len;
        }
    }
    return rc;
}
    6c06:	0030      	movs	r0, r6
    6c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            memcpy(cbuf->next, inp_string, len);
    6c0a:	002a      	movs	r2, r5
    6c0c:	0039      	movs	r1, r7
    6c0e:	f005 ff38 	bl	ca82 <memcpy>
            cbuf->next += len;
    6c12:	68a3      	ldr	r3, [r4, #8]
    6c14:	195d      	adds	r5, r3, r5
    6c16:	60a5      	str	r5, [r4, #8]
    return rc;
    6c18:	e7f5      	b.n	6c06 <_Z13cbor_enc_textP8cbor_bufPKci+0x24>

00006c1a <_Z12cbor_enc_mapP8cbor_bufi>:
 *        num_elements -> number of elements in the map
 * output: status of encode operation.
 */
int
cbor_enc_map(struct cbor_buf *cbuf, int num_elements)
{
    6c1a:	b510      	push	{r4, lr}
    6c1c:	000a      	movs	r2, r1
    return(cbor_enc_length(CBOR_TYPE_MAP, cbuf, num_elements));
    6c1e:	0001      	movs	r1, r0
    6c20:	20a0      	movs	r0, #160	; 0xa0
    6c22:	f7ff ff75 	bl	6b10 <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    6c26:	bd10      	pop	{r4, pc}

00006c28 <_ZL8co_uint8PK5optlv>:
    const uint8_t *d = (const uint8_t *) o->ov;
    /* extending to allow parsing 16 bit content format seen on some clients */
    /* rfc7252:  A recipient MUST be prepared to process values with 
    *            leading zero bytes.
    */
    switch (o->ol) {
    6c28:	8842      	ldrh	r2, [r0, #2]
    const uint8_t *d = (const uint8_t *) o->ov;
    6c2a:	6843      	ldr	r3, [r0, #4]
    switch (o->ol) {
    6c2c:	2a01      	cmp	r2, #1
    6c2e:	d003      	beq.n	6c38 <_ZL8co_uint8PK5optlv+0x10>
    6c30:	2a02      	cmp	r2, #2
    6c32:	d003      	beq.n	6c3c <_ZL8co_uint8PK5optlv+0x14>
        case 0:     return 0;
    6c34:	2000      	movs	r0, #0
    6c36:	e000      	b.n	6c3a <_ZL8co_uint8PK5optlv+0x12>
        case 1:     return d[0];
    6c38:	7818      	ldrb	r0, [r3, #0]
        case 2:     return d[1];
        default:    return 0;
    }
}
    6c3a:	4770      	bx	lr
        case 2:     return d[1];
    6c3c:	7858      	ldrb	r0, [r3, #1]
    6c3e:	e7fc      	b.n	6c3a <_ZL8co_uint8PK5optlv+0x12>

00006c40 <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf>:
    error_t rc;

    ctx->msg = m;   /* save mbuf in context - free later */

    /* parse header */
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    6c40:	223f      	movs	r2, #63	; 0x3f
{
    6c42:	b510      	push	{r4, lr}
    ctx->msg = m;   /* save mbuf in context - free later */
    6c44:	6501      	str	r1, [r0, #80]	; 0x50
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    6c46:	790b      	ldrb	r3, [r1, #4]
        rc = ERR_VER_NOT_SUPP;
    6c48:	241d      	movs	r4, #29
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    6c4a:	4393      	bics	r3, r2
    6c4c:	2b40      	cmp	r3, #64	; 0x40
    6c4e:	d116      	bne.n	6c7e <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf+0x3e>
    uint8_t *b = m->m_data;
    6c50:	1d0b      	adds	r3, r1, #4
        goto err;
    }
   
    ctx->hdr = b;
    6c52:	6103      	str	r3, [r0, #16]
    ctx->type = (b[0] >> 4) & 0x3;
    6c54:	790b      	ldrb	r3, [r1, #4]
    ctx->tkl  = b[0] & 0xf;
    6c56:	3a30      	subs	r2, #48	; 0x30
    ctx->type = (b[0] >> 4) & 0x3;
    6c58:	069b      	lsls	r3, r3, #26
    6c5a:	0f9b      	lsrs	r3, r3, #30
    6c5c:	7003      	strb	r3, [r0, #0]
    ctx->tkl  = b[0] & 0xf;
    6c5e:	790b      	ldrb	r3, [r1, #4]
    6c60:	401a      	ands	r2, r3
    6c62:	7042      	strb	r2, [r0, #1]
    ctx->code = b[1];
    6c64:	794b      	ldrb	r3, [r1, #5]
    6c66:	7083      	strb	r3, [r0, #2]
    ctx->mid  = (b[2] << 8) + b[3];
    6c68:	798c      	ldrb	r4, [r1, #6]
    6c6a:	79cb      	ldrb	r3, [r1, #7]
    6c6c:	0224      	lsls	r4, r4, #8
    6c6e:	191b      	adds	r3, r3, r4
    ctx->plen = 0;  /* Initialise */
    6c70:	2400      	movs	r4, #0
    ctx->mid  = (b[2] << 8) + b[3];
    6c72:	8083      	strh	r3, [r0, #4]
    ctx->plen = 0;  /* Initialise */
    6c74:	6404      	str	r4, [r0, #64]	; 0x40
    /* sanity checks 
        token length <= 8
        message length > header + token
    */

    memcpy(ctx->token, b + 4, ctx->tkl);
    6c76:	3108      	adds	r1, #8
    6c78:	3006      	adds	r0, #6
    6c7a:	f005 ff02 	bl	ca82 <memcpy>

err:
    return rc;
}
    6c7e:	0020      	movs	r0, r4
    6c80:	bd10      	pop	{r4, pc}

00006c82 <_Z13co_uint32_h2nPK5optlv.part.1>:
co_uint32_h2n(const struct optlv *o)
    6c82:	6843      	ldr	r3, [r0, #4]
}
    6c84:	6818      	ldr	r0, [r3, #0]
    6c86:	ba00      	rev	r0, r0
    6c88:	4770      	bx	lr
	...

00006c8c <_Z12coap_con_addtP18coap_ack_cb_info_t>:
{
    6c8c:	b570      	push	{r4, r5, r6, lr}
    dlog(LOG_DEBUG, "Adding callback for MID: 0x%x\n", mid);
    6c8e:	0002      	movs	r2, r0
{
    6c90:	0005      	movs	r5, r0
    6c92:	000c      	movs	r4, r1
    dlog(LOG_DEBUG, "Adding callback for MID: 0x%x\n", mid);
    6c94:	2007      	movs	r0, #7
    6c96:	4909      	ldr	r1, [pc, #36]	; (6cbc <_Z12coap_con_addtP18coap_ack_cb_info_t+0x30>)
    6c98:	f7fd fabe 	bl	4218 <_Z4dlogiPKcz>
    intrct_cb_q[intrct_cb_q_ind].mid = mid;
    6c9c:	200c      	movs	r0, #12
    6c9e:	4908      	ldr	r1, [pc, #32]	; (6cc0 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x34>)
    6ca0:	4b08      	ldr	r3, [pc, #32]	; (6cc4 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x38>)
    6ca2:	780a      	ldrb	r2, [r1, #0]
    6ca4:	4350      	muls	r0, r2
    6ca6:	52c5      	strh	r5, [r0, r3]
    intrct_cb_q[intrct_cb_q_ind].cbinfo = *cbi;
    6ca8:	181b      	adds	r3, r3, r0
    6caa:	3304      	adds	r3, #4
    6cac:	cc21      	ldmia	r4!, {r0, r5}
    6cae:	c321      	stmia	r3!, {r0, r5}
    intrct_cb_q_ind = (intrct_cb_q_ind + 1) % MID_CB_Q_SZ;
    6cb0:	2303      	movs	r3, #3
    6cb2:	3201      	adds	r2, #1
    6cb4:	401a      	ands	r2, r3
}
    6cb6:	2000      	movs	r0, #0
    intrct_cb_q_ind = (intrct_cb_q_ind + 1) % MID_CB_Q_SZ;
    6cb8:	700a      	strb	r2, [r1, #0]
}
    6cba:	bd70      	pop	{r4, r5, r6, pc}
    6cbc:	000111ef 	.word	0x000111ef
    6cc0:	200013ec 	.word	0x200013ec
    6cc4:	200013bc 	.word	0x200013bc

00006cc8 <_Z11coap_ack_rxtP4mbuf>:
{
    6cc8:	b570      	push	{r4, r5, r6, lr}
    dlog(LOG_DEBUG, "Looking up callback for MID: 0x%x\n", mid);
    6cca:	0002      	movs	r2, r0
{
    6ccc:	0005      	movs	r5, r0
    6cce:	000c      	movs	r4, r1
    dlog(LOG_DEBUG, "Looking up callback for MID: 0x%x\n", mid);
    6cd0:	2007      	movs	r0, #7
    6cd2:	490c      	ldr	r1, [pc, #48]	; (6d04 <_Z11coap_ack_rxtP4mbuf+0x3c>)
    6cd4:	f7fd faa0 	bl	4218 <_Z4dlogiPKcz>
    6cd8:	2200      	movs	r2, #0
    6cda:	210c      	movs	r1, #12
        if (intrct_cb_q[i].mid == mid) {
    6cdc:	4b0a      	ldr	r3, [pc, #40]	; (6d08 <_Z11coap_ack_rxtP4mbuf+0x40>)
    for (i = 0; i < MID_CB_Q_SZ; i++) {
    6cde:	0016      	movs	r6, r2
    6ce0:	2a04      	cmp	r2, #4
    6ce2:	d00d      	beq.n	6d00 <_Z11coap_ack_rxtP4mbuf+0x38>
        if (intrct_cb_q[i].mid == mid) {
    6ce4:	0008      	movs	r0, r1
    6ce6:	3201      	adds	r2, #1
    6ce8:	4350      	muls	r0, r2
    6cea:	380c      	subs	r0, #12
    6cec:	5a18      	ldrh	r0, [r3, r0]
    6cee:	42a8      	cmp	r0, r5
    6cf0:	d1f5      	bne.n	6cde <_Z11coap_ack_rxtP4mbuf+0x16>
            return (intrct_cb_q[i].cbinfo.cb(intrct_cb_q[i].cbinfo.cbctx, m));
    6cf2:	4371      	muls	r1, r6
    6cf4:	185b      	adds	r3, r3, r1
    6cf6:	685a      	ldr	r2, [r3, #4]
    6cf8:	0021      	movs	r1, r4
    6cfa:	6898      	ldr	r0, [r3, #8]
    6cfc:	4790      	blx	r2
}
    6cfe:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_NO_ENTRY;
    6d00:	200c      	movs	r0, #12
    6d02:	e7fc      	b.n	6cfe <_Z11coap_ack_rxtP4mbuf+0x36>
    6d04:	000111cc 	.word	0x000111cc
    6d08:	200013bc 	.word	0x200013bc

00006d0c <_Z15coap_opt_strcmpPK5optlvPKc>:
{
    6d0c:	b570      	push	{r4, r5, r6, lr}
    6d0e:	0003      	movs	r3, r0
    6d10:	000c      	movs	r4, r1
        return 1;
    6d12:	2001      	movs	r0, #1
    if (!str) {
    6d14:	2900      	cmp	r1, #0
    6d16:	d00a      	beq.n	6d2e <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
    diff = strncmp((char*)opt->ov, str, opt->ol);  /* option is not NUL terminated */
    6d18:	885d      	ldrh	r5, [r3, #2]
    6d1a:	6858      	ldr	r0, [r3, #4]
    6d1c:	002a      	movs	r2, r5
    6d1e:	f006 fffe 	bl	dd1e <strncmp>
    if (diff) {
    6d22:	2800      	cmp	r0, #0
    6d24:	d103      	bne.n	6d2e <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
        return (opt->ol - strlen(str));
    6d26:	0020      	movs	r0, r4
    6d28:	f006 ffdd 	bl	dce6 <strlen>
    6d2c:	1a28      	subs	r0, r5, r0
}
    6d2e:	bd70      	pop	{r4, r5, r6, pc}

00006d30 <_Z12coap_pathstrPK12coap_msg_ctx>:
{
    6d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    void *it = NULL;
    6d32:	2400      	movs	r4, #0
    uristr[0] = 0;
    6d34:	4d12      	ldr	r5, [pc, #72]	; (6d80 <_Z12coap_pathstrPK12coap_msg_ctx+0x50>)
{
    6d36:	b085      	sub	sp, #20
    6d38:	9001      	str	r0, [sp, #4]
    void *it = NULL;
    6d3a:	9403      	str	r4, [sp, #12]
    uristr[0] = 0;
    6d3c:	702c      	strb	r4, [r5, #0]
    while ((opt = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_PATH, &it)) != NULL)
    6d3e:	9801      	ldr	r0, [sp, #4]
    6d40:	aa03      	add	r2, sp, #12
    6d42:	210b      	movs	r1, #11
    6d44:	304c      	adds	r0, #76	; 0x4c
    6d46:	f000 fd0b 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6d4a:	1e06      	subs	r6, r0, #0
    6d4c:	d012      	beq.n	6d74 <_Z12coap_pathstrPK12coap_msg_ctx+0x44>
        if (ul + opt->ol + 1 > (int)sizeof(uristr))
    6d4e:	8843      	ldrh	r3, [r0, #2]
    6d50:	191b      	adds	r3, r3, r4
    6d52:	2bff      	cmp	r3, #255	; 0xff
    6d54:	dc11      	bgt.n	6d7a <_Z12coap_pathstrPK12coap_msg_ctx+0x4a>
        uristr[ul++] = '/';
    6d56:	232f      	movs	r3, #47	; 0x2f
    6d58:	1c67      	adds	r7, r4, #1
    6d5a:	552b      	strb	r3, [r5, r4]
        memcpy(uristr + ul, opt->ov, opt->ol);
    6d5c:	19ec      	adds	r4, r5, r7
    6d5e:	8842      	ldrh	r2, [r0, #2]
    6d60:	6841      	ldr	r1, [r0, #4]
    6d62:	0020      	movs	r0, r4
    6d64:	f005 fe8d 	bl	ca82 <memcpy>
        uristr[ul + opt->ol] = 0;
    6d68:	2200      	movs	r2, #0
    6d6a:	8873      	ldrh	r3, [r6, #2]
    6d6c:	54e2      	strb	r2, [r4, r3]
        ul += opt->ol;
    6d6e:	8874      	ldrh	r4, [r6, #2]
    6d70:	19e4      	adds	r4, r4, r7
    while ((opt = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_PATH, &it)) != NULL)
    6d72:	e7e4      	b.n	6d3e <_Z12coap_pathstrPK12coap_msg_ctx+0xe>
    return uristr;
    6d74:	0028      	movs	r0, r5
}
    6d76:	b005      	add	sp, #20
    6d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return NULL;
    6d7a:	2000      	movs	r0, #0
    6d7c:	e7fb      	b.n	6d76 <_Z12coap_pathstrPK12coap_msg_ctx+0x46>
    6d7e:	46c0      	nop			; (mov r8, r8)
    6d80:	200012b6 	.word	0x200012b6

00006d84 <_ZL12coap_msg_logPK12coap_msg_ctx>:
{
    6d84:	b510      	push	{r4, lr}
    6d86:	b0c0      	sub	sp, #256	; 0x100
    uriqp[0] = '\0';
    6d88:	2300      	movs	r3, #0
    6d8a:	466a      	mov	r2, sp
    6d8c:	7013      	strb	r3, [r2, #0]
            ctx->type == COAP_T_CONF_VAL ? "CON" : 
    6d8e:	7803      	ldrb	r3, [r0, #0]
{
    6d90:	0004      	movs	r4, r0
    dlog(LOG_DEBUG, "REQ/RSP Type: %s", 
    6d92:	4a29      	ldr	r2, [pc, #164]	; (6e38 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb4>)
    6d94:	2b00      	cmp	r3, #0
    6d96:	d006      	beq.n	6da6 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    6d98:	4a28      	ldr	r2, [pc, #160]	; (6e3c <_ZL12coap_msg_logPK12coap_msg_ctx+0xb8>)
    6d9a:	2b01      	cmp	r3, #1
    6d9c:	d003      	beq.n	6da6 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    6d9e:	4a28      	ldr	r2, [pc, #160]	; (6e40 <_ZL12coap_msg_logPK12coap_msg_ctx+0xbc>)
    6da0:	2b02      	cmp	r3, #2
    6da2:	d000      	beq.n	6da6 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    6da4:	4a27      	ldr	r2, [pc, #156]	; (6e44 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc0>)
            ctx->type == COAP_T_ACK_VAL ? "ACK" : "RST");
    6da6:	4928      	ldr	r1, [pc, #160]	; (6e48 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc4>)
    6da8:	2007      	movs	r0, #7
    6daa:	f7fd fa35 	bl	4218 <_Z4dlogiPKcz>
    if ((ctx->code & COAP_CODE_C_MASK) == COAP_CODE_REQUEST) {
    6dae:	78a3      	ldrb	r3, [r4, #2]
    6db0:	221f      	movs	r2, #31
    6db2:	0019      	movs	r1, r3
    6db4:	4391      	bics	r1, r2
    6db6:	d136      	bne.n	6e26 <_ZL12coap_msg_logPK12coap_msg_ctx+0xa2>
        dlog(LOG_DEBUG, "REQ/ACK Code: %s",
    6db8:	4a24      	ldr	r2, [pc, #144]	; (6e4c <_ZL12coap_msg_logPK12coap_msg_ctx+0xc8>)
    6dba:	2b01      	cmp	r3, #1
    6dbc:	d009      	beq.n	6dd2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_POST ? "POST" :
    6dbe:	4a24      	ldr	r2, [pc, #144]	; (6e50 <_ZL12coap_msg_logPK12coap_msg_ctx+0xcc>)
    6dc0:	2b02      	cmp	r3, #2
    6dc2:	d006      	beq.n	6dd2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_PUT ? "PUT" : 
    6dc4:	4a23      	ldr	r2, [pc, #140]	; (6e54 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd0>)
    6dc6:	2b03      	cmp	r3, #3
    6dc8:	d003      	beq.n	6dd2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_DELETE ? 
    6dca:	4a23      	ldr	r2, [pc, #140]	; (6e58 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd4>)
    6dcc:	2b04      	cmp	r3, #4
    6dce:	d000      	beq.n	6dd2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
    6dd0:	4a22      	ldr	r2, [pc, #136]	; (6e5c <_ZL12coap_msg_logPK12coap_msg_ctx+0xd8>)
                "DELETE" : "EMPTY");
    6dd2:	4923      	ldr	r1, [pc, #140]	; (6e60 <_ZL12coap_msg_logPK12coap_msg_ctx+0xdc>)
                    "Client Error" : "Server Error");
    6dd4:	2007      	movs	r0, #7
    6dd6:	f7fd fa1f 	bl	4218 <_Z4dlogiPKcz>
    substr = coap_pathstr(ctx);
    6dda:	0020      	movs	r0, r4
    6ddc:	f7ff ffa8 	bl	6d30 <_Z12coap_pathstrPK12coap_msg_ctx>
    if (substr[0] != '\0') {
    6de0:	7803      	ldrb	r3, [r0, #0]
    substr = coap_pathstr(ctx);
    6de2:	0001      	movs	r1, r0
    if (substr[0] != '\0') {
    6de4:	2b00      	cmp	r3, #0
    6de6:	d002      	beq.n	6dee <_ZL12coap_msg_logPK12coap_msg_ctx+0x6a>
        strcat(uriqp, substr);
    6de8:	4668      	mov	r0, sp
    6dea:	f006 ff5d 	bl	dca8 <strcat>
    if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_QUERY, NULL))) {
    6dee:	0020      	movs	r0, r4
    6df0:	2200      	movs	r2, #0
    6df2:	304c      	adds	r0, #76	; 0x4c
    6df4:	210f      	movs	r1, #15
    6df6:	f000 fcb3 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6dfa:	1e04      	subs	r4, r0, #0
    6dfc:	d008      	beq.n	6e10 <_ZL12coap_msg_logPK12coap_msg_ctx+0x8c>
        strcat(uriqp, "?");
    6dfe:	4919      	ldr	r1, [pc, #100]	; (6e64 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe0>)
    6e00:	4668      	mov	r0, sp
    6e02:	f006 ff51 	bl	dca8 <strcat>
        strncat(uriqp, (char *)op->ov, op->ol);
    6e06:	8862      	ldrh	r2, [r4, #2]
    6e08:	6861      	ldr	r1, [r4, #4]
    6e0a:	4668      	mov	r0, sp
    6e0c:	f006 ff72 	bl	dcf4 <strncat>
    if (uriqp[0] != '\0') {
    6e10:	466b      	mov	r3, sp
    6e12:	781b      	ldrb	r3, [r3, #0]
    6e14:	2b00      	cmp	r3, #0
    6e16:	d004      	beq.n	6e22 <_ZL12coap_msg_logPK12coap_msg_ctx+0x9e>
        dlog(LOG_INFO, "Uri-Path-Query: %s", uriqp);
    6e18:	466a      	mov	r2, sp
    6e1a:	4913      	ldr	r1, [pc, #76]	; (6e68 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe4>)
    6e1c:	2006      	movs	r0, #6
    6e1e:	f7fd f9fb 	bl	4218 <_Z4dlogiPKcz>
}
    6e22:	b040      	add	sp, #256	; 0x100
    6e24:	bd10      	pop	{r4, pc}
        dlog(LOG_DEBUG, "RSP Code: %s",
    6e26:	4a11      	ldr	r2, [pc, #68]	; (6e6c <_ZL12coap_msg_logPK12coap_msg_ctx+0xe8>)
    6e28:	2940      	cmp	r1, #64	; 0x40
    6e2a:	d003      	beq.n	6e34 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb0>
    6e2c:	4a10      	ldr	r2, [pc, #64]	; (6e70 <_ZL12coap_msg_logPK12coap_msg_ctx+0xec>)
    6e2e:	2980      	cmp	r1, #128	; 0x80
    6e30:	d000      	beq.n	6e34 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb0>
    6e32:	4a10      	ldr	r2, [pc, #64]	; (6e74 <_ZL12coap_msg_logPK12coap_msg_ctx+0xf0>)
                    "Client Error" : "Server Error");
    6e34:	4910      	ldr	r1, [pc, #64]	; (6e78 <_ZL12coap_msg_logPK12coap_msg_ctx+0xf4>)
    6e36:	e7cd      	b.n	6dd4 <_ZL12coap_msg_logPK12coap_msg_ctx+0x50>
    6e38:	000113ab 	.word	0x000113ab
    6e3c:	000113a7 	.word	0x000113a7
    6e40:	000113b3 	.word	0x000113b3
    6e44:	000113af 	.word	0x000113af
    6e48:	000113f3 	.word	0x000113f3
    6e4c:	000113bc 	.word	0x000113bc
    6e50:	000113b7 	.word	0x000113b7
    6e54:	000113c0 	.word	0x000113c0
    6e58:	000113ca 	.word	0x000113ca
    6e5c:	000113c4 	.word	0x000113c4
    6e60:	00011404 	.word	0x00011404
    6e64:	00010d21 	.word	0x00010d21
    6e68:	00011422 	.word	0x00011422
    6e6c:	000113de 	.word	0x000113de
    6e70:	000113e6 	.word	0x000113e6
    6e74:	000113d1 	.word	0x000113d1
    6e78:	00011415 	.word	0x00011415

00006e7c <_Z14coap_opt_parseP5optlvPKhi>:
{
    6e7c:	b570      	push	{r4, r5, r6, lr}
    6e7e:	260f      	movs	r6, #15
    od = b[0] >> 4;
    6e80:	780b      	ldrb	r3, [r1, #0]
    6e82:	111d      	asrs	r5, r3, #4
    6e84:	b2ac      	uxth	r4, r5
    6e86:	4033      	ands	r3, r6
    if (od < 13) {
    6e88:	2d0c      	cmp	r5, #12
    6e8a:	dd13      	ble.n	6eb4 <_Z14coap_opt_parseP5optlvPKhi+0x38>
    else if (od == 13) {
    6e8c:	2d0d      	cmp	r5, #13
    6e8e:	d106      	bne.n	6e9e <_Z14coap_opt_parseP5optlvPKhi+0x22>
        od += b[1];
    6e90:	784c      	ldrb	r4, [r1, #1]
        i = 2;
    6e92:	3d0b      	subs	r5, #11
        od += b[1];
    6e94:	340d      	adds	r4, #13
    if (ol < 13) {
    6e96:	2b0c      	cmp	r3, #12
    6e98:	d80e      	bhi.n	6eb8 <_Z14coap_opt_parseP5optlvPKhi+0x3c>
        ol = (b[i] << 8) + b[i+1] + 269;
    6e9a:	b29b      	uxth	r3, r3
    6e9c:	e011      	b.n	6ec2 <_Z14coap_opt_parseP5optlvPKhi+0x46>
    else if (od == 14) {
    6e9e:	2d0e      	cmp	r5, #14
    6ea0:	d124      	bne.n	6eec <_Z14coap_opt_parseP5optlvPKhi+0x70>
        od = (b[1] << 8) + b[2] + 269;
    6ea2:	788c      	ldrb	r4, [r1, #2]
    6ea4:	784d      	ldrb	r5, [r1, #1]
    6ea6:	340e      	adds	r4, #14
    6ea8:	022d      	lsls	r5, r5, #8
    6eaa:	34ff      	adds	r4, #255	; 0xff
    6eac:	1964      	adds	r4, r4, r5
    6eae:	b2a4      	uxth	r4, r4
        i = 3;
    6eb0:	2503      	movs	r5, #3
    6eb2:	e7f0      	b.n	6e96 <_Z14coap_opt_parseP5optlvPKhi+0x1a>
        i = 1;
    6eb4:	2501      	movs	r5, #1
    6eb6:	e7ee      	b.n	6e96 <_Z14coap_opt_parseP5optlvPKhi+0x1a>
    else if (ol == 13) {
    6eb8:	2b0d      	cmp	r3, #13
    6eba:	d10d      	bne.n	6ed8 <_Z14coap_opt_parseP5optlvPKhi+0x5c>
        ol += b[i];
    6ebc:	5d4b      	ldrb	r3, [r1, r5]
        i++;
    6ebe:	3501      	adds	r5, #1
        ol += b[i];
    6ec0:	330d      	adds	r3, #13
    if (len < i || len < i + ol) {
    6ec2:	4295      	cmp	r5, r2
    6ec4:	dc12      	bgt.n	6eec <_Z14coap_opt_parseP5optlvPKhi+0x70>
    6ec6:	195e      	adds	r6, r3, r5
    6ec8:	42b2      	cmp	r2, r6
    6eca:	db0f      	blt.n	6eec <_Z14coap_opt_parseP5optlvPKhi+0x70>
    o->ov = b + i;
    6ecc:	1949      	adds	r1, r1, r5
    o->ot = od;
    6ece:	8004      	strh	r4, [r0, #0]
    o->ol = ol;
    6ed0:	8043      	strh	r3, [r0, #2]
    o->ov = b + i;
    6ed2:	6041      	str	r1, [r0, #4]
}
    6ed4:	0030      	movs	r0, r6
    6ed6:	bd70      	pop	{r4, r5, r6, pc}
    else if (od == 14) {
    6ed8:	2c0e      	cmp	r4, #14
    6eda:	d107      	bne.n	6eec <_Z14coap_opt_parseP5optlvPKhi+0x70>
        ol = (b[i] << 8) + b[i+1] + 269;
    6edc:	5d4e      	ldrb	r6, [r1, r5]
    6ede:	194b      	adds	r3, r1, r5
    6ee0:	785b      	ldrb	r3, [r3, #1]
    6ee2:	0236      	lsls	r6, r6, #8
    6ee4:	199b      	adds	r3, r3, r6
    6ee6:	330e      	adds	r3, #14
    6ee8:	33ff      	adds	r3, #255	; 0xff
    6eea:	e7d6      	b.n	6e9a <_Z14coap_opt_parseP5optlvPKhi+0x1e>
    return -1;
    6eec:	2601      	movs	r6, #1
    6eee:	4276      	negs	r6, r6
    6ef0:	e7f0      	b.n	6ed4 <_Z14coap_opt_parseP5optlvPKhi+0x58>
	...

00006ef4 <_Z12coap_opt_addPK5optlvPhi>:
{
    6ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ef6:	000e      	movs	r6, r1
    if ((o->ot > 255 + 13) || (o->ol > 255 + 13)) {
    6ef8:	2186      	movs	r1, #134	; 0x86
    6efa:	8803      	ldrh	r3, [r0, #0]
{
    6efc:	0005      	movs	r5, r0
    if ((o->ot > 255 + 13) || (o->ol > 255 + 13)) {
    6efe:	0049      	lsls	r1, r1, #1
    6f00:	428b      	cmp	r3, r1
    6f02:	dc34      	bgt.n	6f6e <_Z12coap_opt_addPK5optlvPhi+0x7a>
    6f04:	8847      	ldrh	r7, [r0, #2]
    6f06:	428f      	cmp	r7, r1
    6f08:	dc31      	bgt.n	6f6e <_Z12coap_opt_addPK5optlvPhi+0x7a>
    6f0a:	a901      	add	r1, sp, #4
    if (o->ot < 13) {
    6f0c:	2b0c      	cmp	r3, #12
    6f0e:	dc12      	bgt.n	6f36 <_Z12coap_opt_addPK5optlvPhi+0x42>
        *op++ = o->ot << 4;
    6f10:	011b      	lsls	r3, r3, #4
    6f12:	700b      	strb	r3, [r1, #0]
    6f14:	466b      	mov	r3, sp
    6f16:	1d5c      	adds	r4, r3, #5
    if (o->ol < 13) {
    6f18:	2f0c      	cmp	r7, #12
    6f1a:	dc13      	bgt.n	6f44 <_Z12coap_opt_addPK5optlvPhi+0x50>
        oh[0] |= o->ol;
    6f1c:	780b      	ldrb	r3, [r1, #0]
    6f1e:	433b      	orrs	r3, r7
    6f20:	700b      	strb	r3, [r1, #0]
    ohl = op - oh;
    6f22:	1a64      	subs	r4, r4, r1
    if (ohl + o->ol > len) {
    6f24:	193f      	adds	r7, r7, r4
    6f26:	4297      	cmp	r7, r2
    6f28:	dd15      	ble.n	6f56 <_Z12coap_opt_addPK5optlvPhi+0x62>
        dlog(LOG_ERR, "Insufficient buffer space to add option\n");
    6f2a:	2003      	movs	r0, #3
    6f2c:	4911      	ldr	r1, [pc, #68]	; (6f74 <_Z12coap_opt_addPK5optlvPhi+0x80>)
    6f2e:	f7fd f973 	bl	4218 <_Z4dlogiPKcz>
        return 0;
    6f32:	2000      	movs	r0, #0
}
    6f34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *op++ = o->ot - 13;
    6f36:	3b0d      	subs	r3, #13
        *op++ = 13 << 4;
    6f38:	20d0      	movs	r0, #208	; 0xd0
        *op++ = o->ot - 13;
    6f3a:	704b      	strb	r3, [r1, #1]
    6f3c:	466b      	mov	r3, sp
        *op++ = 13 << 4;
    6f3e:	7008      	strb	r0, [r1, #0]
        *op++ = o->ot - 13;
    6f40:	1d9c      	adds	r4, r3, #6
    6f42:	e7e9      	b.n	6f18 <_Z12coap_opt_addPK5optlvPhi+0x24>
        oh[0] |= 13;
    6f44:	230d      	movs	r3, #13
    6f46:	7808      	ldrb	r0, [r1, #0]
    6f48:	4303      	orrs	r3, r0
    6f4a:	700b      	strb	r3, [r1, #0]
        *op++ = o->ol - 13;
    6f4c:	003b      	movs	r3, r7
    6f4e:	3b0d      	subs	r3, #13
    6f50:	7023      	strb	r3, [r4, #0]
    6f52:	3401      	adds	r4, #1
    6f54:	e7e5      	b.n	6f22 <_Z12coap_opt_addPK5optlvPhi+0x2e>
    memcpy(b, oh, ohl);
    6f56:	0022      	movs	r2, r4
    6f58:	0030      	movs	r0, r6
    6f5a:	f005 fd92 	bl	ca82 <memcpy>
    memmove(b + ohl, o->ov, o->ol);
    6f5e:	886a      	ldrh	r2, [r5, #2]
    6f60:	1930      	adds	r0, r6, r4
    6f62:	6869      	ldr	r1, [r5, #4]
    6f64:	f005 fd96 	bl	ca94 <memmove>
    return (o->ol + ohl);
    6f68:	8868      	ldrh	r0, [r5, #2]
    6f6a:	1900      	adds	r0, r0, r4
    6f6c:	e7e2      	b.n	6f34 <_Z12coap_opt_addPK5optlvPhi+0x40>
        return -1;
    6f6e:	2001      	movs	r0, #1
    6f70:	4240      	negs	r0, r0
    6f72:	e7df      	b.n	6f34 <_Z12coap_opt_addPK5optlvPhi+0x40>
    6f74:	0001120e 	.word	0x0001120e

00006f78 <_Z13co_uint32_n2hPK5optlv>:
{
    6f78:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    6f7a:	8842      	ldrh	r2, [r0, #2]
{
    6f7c:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    6f7e:	2a04      	cmp	r2, #4
    6f80:	d906      	bls.n	6f90 <_Z13co_uint32_n2hPK5optlv+0x18>
    6f82:	2120      	movs	r1, #32
    6f84:	4b14      	ldr	r3, [pc, #80]	; (6fd8 <_Z13co_uint32_n2hPK5optlv+0x60>)
    6f86:	4a15      	ldr	r2, [pc, #84]	; (6fdc <_Z13co_uint32_n2hPK5optlv+0x64>)
    6f88:	31ff      	adds	r1, #255	; 0xff
    6f8a:	4815      	ldr	r0, [pc, #84]	; (6fe0 <_Z13co_uint32_n2hPK5optlv+0x68>)
    6f8c:	f005 fbfc 	bl	c788 <__assert_func>
    switch (o->ol) {
    6f90:	3a01      	subs	r2, #1
    uint32_t b = 0;
    6f92:	2000      	movs	r0, #0
    switch (o->ol) {
    6f94:	2a03      	cmp	r2, #3
    6f96:	d806      	bhi.n	6fa6 <_Z13co_uint32_n2hPK5optlv+0x2e>
    6f98:	0010      	movs	r0, r2
    6f9a:	f002 fc19 	bl	97d0 <__gnu_thumb1_case_uqi>
    6f9e:	0502      	.short	0x0502
    6fa0:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    6fa2:	685b      	ldr	r3, [r3, #4]
    6fa4:	7818      	ldrb	r0, [r3, #0]
}
    6fa6:	bd10      	pop	{r4, pc}
    case 2: b = ntohs(*(uint16_t *)(o->ov));
    6fa8:	685b      	ldr	r3, [r3, #4]
    6faa:	881b      	ldrh	r3, [r3, #0]
    6fac:	0a18      	lsrs	r0, r3, #8
    6fae:	021b      	lsls	r3, r3, #8
    6fb0:	4318      	orrs	r0, r3
    6fb2:	b280      	uxth	r0, r0
            break;
    6fb4:	e7f7      	b.n	6fa6 <_Z13co_uint32_n2hPK5optlv+0x2e>
    case 3: b = ntohl(*(uint32_t *)(o->ov) << 8);
    6fb6:	685b      	ldr	r3, [r3, #4]
    6fb8:	490a      	ldr	r1, [pc, #40]	; (6fe4 <_Z13co_uint32_n2hPK5optlv+0x6c>)
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	0218      	lsls	r0, r3, #8
    6fbe:	041a      	lsls	r2, r3, #16
    6fc0:	400a      	ands	r2, r1
    6fc2:	0e00      	lsrs	r0, r0, #24
    6fc4:	4310      	orrs	r0, r2
    6fc6:	22ff      	movs	r2, #255	; 0xff
    6fc8:	0212      	lsls	r2, r2, #8
    6fca:	4013      	ands	r3, r2
    6fcc:	4318      	orrs	r0, r3
            break;
    6fce:	e7ea      	b.n	6fa6 <_Z13co_uint32_n2hPK5optlv+0x2e>
    6fd0:	0018      	movs	r0, r3
    6fd2:	f7ff fe56 	bl	6c82 <_Z13co_uint32_h2nPK5optlv.part.1>
    6fd6:	e7e6      	b.n	6fa6 <_Z13co_uint32_n2hPK5optlv+0x2e>
    6fd8:	00011237 	.word	0x00011237
    6fdc:	0001145a 	.word	0x0001145a
    6fe0:	00011251 	.word	0x00011251
    6fe4:	00ffff00 	.word	0x00ffff00

00006fe8 <_Z13co_uint32_h2nPK5optlv>:
{
    6fe8:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    6fea:	8842      	ldrh	r2, [r0, #2]
{
    6fec:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    6fee:	2a04      	cmp	r2, #4
    6ff0:	d906      	bls.n	7000 <_Z13co_uint32_h2nPK5optlv+0x18>
    6ff2:	2136      	movs	r1, #54	; 0x36
    6ff4:	4b14      	ldr	r3, [pc, #80]	; (7048 <_Z13co_uint32_h2nPK5optlv+0x60>)
    6ff6:	4a15      	ldr	r2, [pc, #84]	; (704c <_Z13co_uint32_h2nPK5optlv+0x64>)
    6ff8:	31ff      	adds	r1, #255	; 0xff
    6ffa:	4815      	ldr	r0, [pc, #84]	; (7050 <_Z13co_uint32_h2nPK5optlv+0x68>)
    6ffc:	f005 fbc4 	bl	c788 <__assert_func>
    switch (o->ol) {
    7000:	3a01      	subs	r2, #1
    uint32_t b = 0;
    7002:	2000      	movs	r0, #0
    switch (o->ol) {
    7004:	2a03      	cmp	r2, #3
    7006:	d806      	bhi.n	7016 <_Z13co_uint32_h2nPK5optlv+0x2e>
    7008:	0010      	movs	r0, r2
    700a:	f002 fbe1 	bl	97d0 <__gnu_thumb1_case_uqi>
    700e:	0502      	.short	0x0502
    7010:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    7012:	685b      	ldr	r3, [r3, #4]
    7014:	7818      	ldrb	r0, [r3, #0]
}
    7016:	bd10      	pop	{r4, pc}
    case 2: b = htons(*(uint16_t *)(o->ov));
    7018:	685b      	ldr	r3, [r3, #4]
    701a:	881b      	ldrh	r3, [r3, #0]
    701c:	0a18      	lsrs	r0, r3, #8
    701e:	021b      	lsls	r3, r3, #8
    7020:	4318      	orrs	r0, r3
    7022:	b280      	uxth	r0, r0
            break;
    7024:	e7f7      	b.n	7016 <_Z13co_uint32_h2nPK5optlv+0x2e>
    case 3: b = htonl(*(uint32_t *)(o->ov) << 8);
    7026:	685b      	ldr	r3, [r3, #4]
    7028:	490a      	ldr	r1, [pc, #40]	; (7054 <_Z13co_uint32_h2nPK5optlv+0x6c>)
    702a:	681b      	ldr	r3, [r3, #0]
    702c:	0218      	lsls	r0, r3, #8
    702e:	041a      	lsls	r2, r3, #16
    7030:	400a      	ands	r2, r1
    7032:	0e00      	lsrs	r0, r0, #24
    7034:	4310      	orrs	r0, r2
    7036:	22ff      	movs	r2, #255	; 0xff
    7038:	0212      	lsls	r2, r2, #8
    703a:	4013      	ands	r3, r2
    703c:	4318      	orrs	r0, r3
            break;
    703e:	e7ea      	b.n	7016 <_Z13co_uint32_h2nPK5optlv+0x2e>
    7040:	0018      	movs	r0, r3
    7042:	f7ff fe1e 	bl	6c82 <_Z13co_uint32_h2nPK5optlv.part.1>
    7046:	e7e6      	b.n	7016 <_Z13co_uint32_h2nPK5optlv+0x2e>
    7048:	00011237 	.word	0x00011237
    704c:	00011435 	.word	0x00011435
    7050:	00011251 	.word	0x00011251
    7054:	00ffff00 	.word	0x00ffff00

00007058 <_Z11get_mid_valv>:
{
    7058:	b510      	push	{r4, lr}
    if (!mid_val) 
    705a:	4c05      	ldr	r4, [pc, #20]	; (7070 <_Z11get_mid_valv+0x18>)
    705c:	8823      	ldrh	r3, [r4, #0]
    705e:	2b00      	cmp	r3, #0
    7060:	d102      	bne.n	7068 <_Z11get_mid_valv+0x10>
        uint32_t epoch = get_rtc_epoch();
    7062:	f7fd f841 	bl	40e8 <_Z13get_rtc_epochv>
        mid_val = (uint16_t) ( epoch & 0x0000FFFF );
    7066:	8020      	strh	r0, [r4, #0]
    return mid_val++;
    7068:	8820      	ldrh	r0, [r4, #0]
    706a:	1c43      	adds	r3, r0, #1
    706c:	8023      	strh	r3, [r4, #0]
}
    706e:	bd10      	pop	{r4, pc}
    7070:	200012b4 	.word	0x200012b4

00007074 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh>:
 * @return: 0 on success, nonzero error/special handling code. 
 */
error_t coap_msg_parse(struct coap_msg_ctx *ctx, struct mbuf *m, uint8_t *code)
{
    int i, osize, mdatalen;
    uint8_t *b = m->m_data; /* assuming single buffer */
    7074:	000b      	movs	r3, r1
{
    7076:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t *b = m->m_data; /* assuming single buffer */
    7078:	3304      	adds	r3, #4
{
    707a:	b08b      	sub	sp, #44	; 0x2c
    uint8_t *b = m->m_data; /* assuming single buffer */
    707c:	9305      	str	r3, [sp, #20]
    int len = m->m_pktlen;
    707e:	880b      	ldrh	r3, [r1, #0]
{
    7080:	0006      	movs	r6, r0
    int len = m->m_pktlen;
    7082:	9302      	str	r3, [sp, #8]
    uint16_t ot;
    error_t rc;
    uint32_t obsval;

    /* Default code, indicating everything okay, so far. */
    *code = COAP_RSP_205_CONTENT;
    7084:	2345      	movs	r3, #69	; 0x45
{
    7086:	9104      	str	r1, [sp, #16]
    *code = COAP_RSP_205_CONTENT;
    7088:	7013      	strb	r3, [r2, #0]
{
    708a:	9203      	str	r2, [sp, #12]

    ddump(LOG_DEBUG, "CoAP REQ decode", b, len);
    708c:	9b02      	ldr	r3, [sp, #8]
    708e:	9a05      	ldr	r2, [sp, #20]
    7090:	4953      	ldr	r1, [pc, #332]	; (71e0 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x16c>)
    7092:	2007      	movs	r0, #7
    7094:	f7fd f8e2 	bl	425c <_Z5ddumpiPKcPKvi>
    
    if ((rc = coap_hdr_parse(ctx, m)) != ERR_OK) {
    7098:	9904      	ldr	r1, [sp, #16]
    709a:	0030      	movs	r0, r6
    709c:	f7ff fdd0 	bl	6c40 <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf>
    70a0:	9001      	str	r0, [sp, #4]
    70a2:	2800      	cmp	r0, #0
    70a4:	d13d      	bne.n	7122 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        goto err;
    }

    i = 4 + ctx->tkl;

    ctx->final = 1; /* default value, not ongoing observe */
    70a6:	2701      	movs	r7, #1
    i = 4 + ctx->tkl;
    70a8:	7875      	ldrb	r5, [r6, #1]
    ctx->oidx = i;  /* where options will start, or maybe payload marker */

    if (ctx->code == COAP_EMPTY_MESSAGE) {
    70aa:	78b3      	ldrb	r3, [r6, #2]
    i = 4 + ctx->tkl;
    70ac:	3504      	adds	r5, #4
    ctx->final = 1; /* default value, not ongoing observe */
    70ae:	64b7      	str	r7, [r6, #72]	; 0x48
    ctx->oidx = i;  /* where options will start, or maybe payload marker */
    70b0:	61b5      	str	r5, [r6, #24]
    if (ctx->code == COAP_EMPTY_MESSAGE) {
    70b2:	2b00      	cmp	r3, #0
    70b4:	d035      	beq.n	7122 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        /* ignore everything else */
        return ERR_OK;
    }

    // Make sure the packet length is not greater than what is allocated by m_get()
	mdatalen = get_mbuf_data_size()-16;
    70b6:	f001 f94b 	bl	8350 <_Z18get_mbuf_data_sizev>
    if ( len > mdatalen )
    70ba:	9b02      	ldr	r3, [sp, #8]
	mdatalen = get_mbuf_data_size()-16;
    70bc:	3810      	subs	r0, #16
    if ( len > mdatalen )
    70be:	4283      	cmp	r3, r0
    70c0:	dc32      	bgt.n	7128 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xb4>
    70c2:	9c01      	ldr	r4, [sp, #4]
                ctx->final = 0;
            }
            break;
        default:
            /* unhandled critical option */
            if (COAP_OPTION_CRITICAL(ot)) {
    70c4:	9707      	str	r7, [sp, #28]
    while ((osize = coap_opt_parse(&opt, b + i, len - i)) > 0) {
    70c6:	9b05      	ldr	r3, [sp, #20]
    70c8:	a808      	add	r0, sp, #32
    70ca:	195f      	adds	r7, r3, r5
    70cc:	9b02      	ldr	r3, [sp, #8]
    70ce:	0039      	movs	r1, r7
    70d0:	1b5a      	subs	r2, r3, r5
    70d2:	f7ff fed3 	bl	6e7c <_Z14coap_opt_parseP5optlvPKhi>
    70d6:	9006      	str	r0, [sp, #24]
    70d8:	2800      	cmp	r0, #0
    70da:	dd63      	ble.n	71a4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x130>
        ot += opt.ot;
    70dc:	ab08      	add	r3, sp, #32
    70de:	881b      	ldrh	r3, [r3, #0]
        dlog(LOG_DEBUG, "option type: %u len: %u", ot, opt.ol);
    70e0:	4940      	ldr	r1, [pc, #256]	; (71e4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x170>)
        ot += opt.ot;
    70e2:	18e4      	adds	r4, r4, r3
    70e4:	b2a4      	uxth	r4, r4
        dlog(LOG_DEBUG, "option type: %u len: %u", ot, opt.ol);
    70e6:	ab08      	add	r3, sp, #32
    70e8:	885b      	ldrh	r3, [r3, #2]
    70ea:	0022      	movs	r2, r4
    70ec:	2007      	movs	r0, #7
    70ee:	f7fd f893 	bl	4218 <_Z4dlogiPKcz>
        ddump(LOG_DEBUG, "option", opt.ov, opt.ol);
    70f2:	ab08      	add	r3, sp, #32
    70f4:	885b      	ldrh	r3, [r3, #2]
    70f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    70f8:	493b      	ldr	r1, [pc, #236]	; (71e8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x174>)
    70fa:	2007      	movs	r0, #7
    70fc:	f7fd f8ae 	bl	425c <_Z5ddumpiPKcPKvi>
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    7100:	0030      	movs	r0, r6
        opt.ot = ot;
    7102:	ab08      	add	r3, sp, #32
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    7104:	0019      	movs	r1, r3
    7106:	304c      	adds	r0, #76	; 0x4c
        opt.ot = ot;
    7108:	801c      	strh	r4, [r3, #0]
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    710a:	f000 fae7 	bl	76dc <_Z12copt_add_optP5sl_coP5optlv>
    710e:	1e07      	subs	r7, r0, #0
    7110:	d010      	beq.n	7134 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xc0>
            dlog(LOG_ALERT, "Couldn't save option data");
    7112:	4936      	ldr	r1, [pc, #216]	; (71ec <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x178>)
    7114:	2001      	movs	r0, #1
    7116:	f7fd f87f 	bl	4218 <_Z4dlogiPKcz>
            *code = COAP_RSP_500_INTERNAL_ERROR;
    711a:	23a0      	movs	r3, #160	; 0xa0
    711c:	9a03      	ldr	r2, [sp, #12]
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    711e:	9701      	str	r7, [sp, #4]
            *code = COAP_RSP_500_INTERNAL_ERROR;
    7120:	7013      	strb	r3, [r2, #0]
    m->m_pktlen = len;

    coap_msg_log(ctx);
err:
    return rc;
}
    7122:	9801      	ldr	r0, [sp, #4]
    7124:	b00b      	add	sp, #44	; 0x2c
    7126:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*code = COAP_RSP_413_REQ_TOO_LARGE;
    7128:	238d      	movs	r3, #141	; 0x8d
    712a:	9a03      	ldr	r2, [sp, #12]
    712c:	7013      	strb	r3, [r2, #0]
		return ERR_MSGSIZE;
    712e:	3b83      	subs	r3, #131	; 0x83
                rc = ERR_OP_NOT_SUPP;
    7130:	9301      	str	r3, [sp, #4]
                goto err;
    7132:	e7f6      	b.n	7122 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        i += osize;
    7134:	9b06      	ldr	r3, [sp, #24]
    7136:	18ed      	adds	r5, r5, r3
        switch (ot) {
    7138:	2c0f      	cmp	r4, #15
    713a:	d820      	bhi.n	717e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x10a>
    713c:	2c0e      	cmp	r4, #14
    713e:	d2c2      	bcs.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    7140:	2c07      	cmp	r4, #7
    7142:	d0c0      	beq.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    7144:	d810      	bhi.n	7168 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xf4>
    7146:	2c03      	cmp	r4, #3
    7148:	d0bd      	beq.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    714a:	2c06      	cmp	r4, #6
    714c:	d022      	beq.n	7194 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x120>
            if (COAP_OPTION_CRITICAL(ot)) {
    714e:	9b07      	ldr	r3, [sp, #28]
    7150:	421c      	tst	r4, r3
    7152:	d0b8      	beq.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
                dlog(LOG_ERR, "unhandled critical option %d\n", ot);
    7154:	0022      	movs	r2, r4
    7156:	4926      	ldr	r1, [pc, #152]	; (71f0 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x17c>)
    7158:	2003      	movs	r0, #3
    715a:	f7fd f85d 	bl	4218 <_Z4dlogiPKcz>
                *code = COAP_RSP_402_BAD_OPTION;
    715e:	2382      	movs	r3, #130	; 0x82
    7160:	9a03      	ldr	r2, [sp, #12]
    7162:	7013      	strb	r3, [r2, #0]
                rc = ERR_OP_NOT_SUPP;
    7164:	3b81      	subs	r3, #129	; 0x81
    7166:	e7e3      	b.n	7130 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xbc>
        switch (ot) {
    7168:	2c0b      	cmp	r4, #11
    716a:	d0ac      	beq.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    716c:	2c0c      	cmp	r4, #12
    716e:	d1ee      	bne.n	714e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
            ctx->cf = co_uint8(&opt)    ;/*FIXME*/
    7170:	a808      	add	r0, sp, #32
    7172:	f7ff fd59 	bl	6c28 <_ZL8co_uint8PK5optlv>
    7176:	0033      	movs	r3, r6
    7178:	333c      	adds	r3, #60	; 0x3c
    717a:	7018      	strb	r0, [r3, #0]
            break;
    717c:	e7a3      	b.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
        switch (ot) {
    717e:	2c17      	cmp	r4, #23
    7180:	d0a1      	beq.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    7182:	d802      	bhi.n	718a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x116>
    7184:	2c11      	cmp	r4, #17
    7186:	d0f3      	beq.n	7170 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xfc>
    7188:	e7e1      	b.n	714e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
    718a:	2c23      	cmp	r4, #35	; 0x23
    718c:	d09b      	beq.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    718e:	2c27      	cmp	r4, #39	; 0x27
    7190:	d1dd      	bne.n	714e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
    7192:	e798      	b.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
            obsval = co_uint32_n2h(&opt);
    7194:	a808      	add	r0, sp, #32
    7196:	f7ff feef 	bl	6f78 <_Z13co_uint32_n2hPK5optlv>
            if (obsval == COAP_OBS_REG) {
    719a:	2800      	cmp	r0, #0
    719c:	d000      	beq.n	71a0 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x12c>
    719e:	e792      	b.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
                ctx->final = 0;
    71a0:	64b0      	str	r0, [r6, #72]	; 0x48
    71a2:	e790      	b.n	70c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    if (ot && i != len) {
    71a4:	2c00      	cmp	r4, #0
    71a6:	d00f      	beq.n	71c8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x154>
    71a8:	9b02      	ldr	r3, [sp, #8]
    71aa:	429d      	cmp	r5, r3
    71ac:	d00c      	beq.n	71c8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x154>
        if (b[i] != 0xFF) {
    71ae:	783b      	ldrb	r3, [r7, #0]
    71b0:	2bff      	cmp	r3, #255	; 0xff
    71b2:	d008      	beq.n	71c6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x152>
            dlog(LOG_ERR, "missing option separator FF");
    71b4:	490f      	ldr	r1, [pc, #60]	; (71f4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x180>)
    71b6:	2003      	movs	r0, #3
    71b8:	f7fd f82e 	bl	4218 <_Z4dlogiPKcz>
            *code = COAP_RSP_415_UNSUPPORTED_CFORMAT;
    71bc:	238f      	movs	r3, #143	; 0x8f
    71be:	9a03      	ldr	r2, [sp, #12]
    71c0:	7013      	strb	r3, [r2, #0]
            rc = ERR_BAD_DATA;
    71c2:	3b7b      	subs	r3, #123	; 0x7b
    71c4:	e7b4      	b.n	7130 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xbc>
        i++;
    71c6:	3501      	adds	r5, #1
    m->m_pktlen = len;
    71c8:	466a      	mov	r2, sp
    ctx->plen = len - i;
    71ca:	9b02      	ldr	r3, [sp, #8]
    ctx->hdrlen = i;
    71cc:	6175      	str	r5, [r6, #20]
    m->m_pktlen = len;
    71ce:	8912      	ldrh	r2, [r2, #8]
    ctx->plen = len - i;
    71d0:	1b5d      	subs	r5, r3, r5
    m->m_pktlen = len;
    71d2:	9b04      	ldr	r3, [sp, #16]
    ctx->plen = len - i;
    71d4:	6435      	str	r5, [r6, #64]	; 0x40
    coap_msg_log(ctx);
    71d6:	0030      	movs	r0, r6
    m->m_pktlen = len;
    71d8:	801a      	strh	r2, [r3, #0]
    coap_msg_log(ctx);
    71da:	f7ff fdd3 	bl	6d84 <_ZL12coap_msg_logPK12coap_msg_ctx>
    71de:	e7a0      	b.n	7122 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
    71e0:	0001129b 	.word	0x0001129b
    71e4:	000112ab 	.word	0x000112ab
    71e8:	0001170e 	.word	0x0001170e
    71ec:	000112c3 	.word	0x000112c3
    71f0:	000112dd 	.word	0x000112dd
    71f4:	000112fb 	.word	0x000112fb

000071f8 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>:

/* initialize response message context based on request + mbuf */
void       
coap_init_rsp(const struct coap_msg_ctx *req, struct coap_msg_ctx *rsp, 
              struct mbuf *m)
{
    71f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    71fa:	000c      	movs	r4, r1
    struct optlv *op;
    memset(rsp, 0, sizeof(*rsp));
    copt_init((sl_co*)&(rsp->oh));
    71fc:	0026      	movs	r6, r4
{
    71fe:	0005      	movs	r5, r0
    memset(rsp, 0, sizeof(*rsp));
    7200:	2100      	movs	r1, #0
{
    7202:	0017      	movs	r7, r2
    memset(rsp, 0, sizeof(*rsp));
    7204:	0020      	movs	r0, r4
    7206:	2254      	movs	r2, #84	; 0x54
    copt_init((sl_co*)&(rsp->oh));
    7208:	364c      	adds	r6, #76	; 0x4c
    memset(rsp, 0, sizeof(*rsp));
    720a:	f005 fc55 	bl	cab8 <memset>
    copt_init((sl_co*)&(rsp->oh));
    720e:	0030      	movs	r0, r6
    7210:	f000 fa30 	bl	7674 <_Z9copt_initP5sl_co>
    /*
     * type will be a bit tricker than this. CON->ACK, except if it's empty,
     * then RST. NON->NON. We need to know more about the message before
     * setting the RSP type.
     */
    rsp->type = req->type;
    7214:	782b      	ldrb	r3, [r5, #0]
    rsp->tkl = req->tkl;
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    7216:	1da9      	adds	r1, r5, #6
    rsp->type = req->type;
    7218:	7023      	strb	r3, [r4, #0]
    rsp->tkl = req->tkl;
    721a:	786b      	ldrb	r3, [r5, #1]
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    721c:	2208      	movs	r2, #8
    rsp->tkl = req->tkl;
    721e:	7063      	strb	r3, [r4, #1]
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    7220:	1da0      	adds	r0, r4, #6
    7222:	f005 fc2e 	bl	ca82 <memcpy>

    /*
     * TODO OBS: Could replicate behaviour by adding the option. Need to know
     * when to add a value. Maybe this isn't required. Check context of calls.
     */
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    7226:	0028      	movs	r0, r5
    rsp->mid = req->mid;
    7228:	88ab      	ldrh	r3, [r5, #4]
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    722a:	304c      	adds	r0, #76	; 0x4c
    rsp->mid = req->mid;
    722c:	80a3      	strh	r3, [r4, #4]
    rsp->client = req->client;
    722e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    7230:	2200      	movs	r2, #0
    rsp->client = req->client;
    7232:	6463      	str	r3, [r4, #68]	; 0x44
    rsp->final = req->final;
    7234:	6cab      	ldr	r3, [r5, #72]	; 0x48
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    7236:	2106      	movs	r1, #6
    rsp->final = req->final;
    7238:	64a3      	str	r3, [r4, #72]	; 0x48
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    723a:	f000 fa91 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    723e:	2800      	cmp	r0, #0
    7240:	d015      	beq.n	726e <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
               != NULL) {
        uint32_t obsval = co_uint32_n2h(op);
    7242:	f7ff fe99 	bl	6f78 <_Z13co_uint32_n2hPK5optlv>
        if (!rsp->final && obsval == COAP_OBS_REG) {
    7246:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7248:	2b00      	cmp	r3, #0
    724a:	d110      	bne.n	726e <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
    724c:	2800      	cmp	r0, #0
    724e:	d10e      	bne.n	726e <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
            /*
             * If this is proxied, then this info isn't used to build the
             * response anyway. The sensor sends the packet. The same applies
             * for local async observe.
             */
            nop.ot = COAP_OPTION_OBSERVE;
    7250:	466a      	mov	r2, sp
            nop.ol = 3;
    7252:	2503      	movs	r5, #3
            nop.ot = COAP_OPTION_OBSERVE;
    7254:	3306      	adds	r3, #6
            if (copt_add_opt((sl_co*)&(rsp->oh), &nop) != ERR_OK) {
    7256:	4669      	mov	r1, sp
    7258:	0030      	movs	r0, r6
            nop.ot = COAP_OPTION_OBSERVE;
    725a:	8013      	strh	r3, [r2, #0]
            nop.ol = 3;
    725c:	8055      	strh	r5, [r2, #2]
            if (copt_add_opt((sl_co*)&(rsp->oh), &nop) != ERR_OK) {
    725e:	f000 fa3d 	bl	76dc <_Z12copt_add_optP5sl_coP5optlv>
    7262:	2800      	cmp	r0, #0
    7264:	d003      	beq.n	726e <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
                dlog(LOG_ERR, "Couldn't add observe option");
    7266:	4903      	ldr	r1, [pc, #12]	; (7274 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x7c>)
    7268:	0028      	movs	r0, r5
    726a:	f7fc ffd5 	bl	4218 <_Z4dlogiPKcz>
            }
        }
    }

    rsp->msg = m;
    726e:	6527      	str	r7, [r4, #80]	; 0x50
}
    7270:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7272:	46c0      	nop			; (mov r8, r8)
    7274:	0001127f 	.word	0x0001127f

00007278 <_Z17coap_msg_responseP12coap_msg_ctx>:
 *
 * @return: Status; 0 - OK.
 */
error_t
coap_msg_response(struct coap_msg_ctx *ctx)
{
    7278:	b5f0      	push	{r4, r5, r6, r7, lr}
    727a:	0006      	movs	r6, r0
    727c:	b08d      	sub	sp, #52	; 0x34

    int idx = 4;
    struct mbuf *n;


    coap_msg_log(ctx);
    727e:	f7ff fd81 	bl	6d84 <_ZL12coap_msg_logPK12coap_msg_ctx>

    b[0] = COAP_VER | COAP_T_VAL2PDU(ctx->type);
    7282:	2340      	movs	r3, #64	; 0x40
    7284:	7832      	ldrb	r2, [r6, #0]
    7286:	ad05      	add	r5, sp, #20
    7288:	0112      	lsls	r2, r2, #4
    728a:	4313      	orrs	r3, r2
    728c:	702b      	strb	r3, [r5, #0]
    if (ctx->code == COAP_EMPTY_MESSAGE) {
    728e:	78b3      	ldrb	r3, [r6, #2]
    7290:	2b00      	cmp	r3, #0
    7292:	d11c      	bne.n	72ce <_Z17coap_msg_responseP12coap_msg_ctx+0x56>
    int idx = 4;
    7294:	2404      	movs	r4, #4
        b[1] = COAP_EMPTY_MESSAGE;
    7296:	706b      	strb	r3, [r5, #1]
        b[2] = ctx->mid >> 8;
    7298:	88b3      	ldrh	r3, [r6, #4]
    729a:	121a      	asrs	r2, r3, #8
    729c:	70aa      	strb	r2, [r5, #2]
        b[3] = ctx->mid & 0xFF;
    729e:	70eb      	strb	r3, [r5, #3]
        }
    }
    assert(idx <= COAP_OBS_HDR_SZ);

    /* prepend header to response */
    n = m_prepend(ctx->msg, idx);
    72a0:	0021      	movs	r1, r4
    72a2:	6d30      	ldr	r0, [r6, #80]	; 0x50
    72a4:	f001 f8a0 	bl	83e8 <_Z9m_prependP4mbufi>
    72a8:	0007      	movs	r7, r0
    if (!n) {
        rc = ERR_NO_MEM;
    72aa:	2003      	movs	r0, #3
    if (!n) {
    72ac:	2f00      	cmp	r7, #0
    72ae:	d04b      	beq.n	7348 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
        goto done;
    }
    ctx->msg = n;   /* A new mbuf may be required */
    72b0:	6537      	str	r7, [r6, #80]	; 0x50
    memcpy(n->m_data, b, idx);
    72b2:	1d3e      	adds	r6, r7, #4
    72b4:	0022      	movs	r2, r4
    72b6:	0029      	movs	r1, r5
    72b8:	0030      	movs	r0, r6
    72ba:	f005 fbe2 	bl	ca82 <memcpy>

    ddump(LOG_DEBUG, "Response", n->m_data, n->m_pktlen);
    72be:	2007      	movs	r0, #7
    72c0:	883b      	ldrh	r3, [r7, #0]
    72c2:	0032      	movs	r2, r6
    72c4:	4951      	ldr	r1, [pc, #324]	; (740c <_Z17coap_msg_responseP12coap_msg_ctx+0x194>)
    72c6:	f7fc ffc9 	bl	425c <_Z5ddumpiPKcPKvi>
    error_t rc = ERR_OK;
    72ca:	2000      	movs	r0, #0
    72cc:	e03c      	b.n	7348 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
    } else if (COAP_CLASS(ctx->code) >= 2) {
    72ce:	2b3f      	cmp	r3, #63	; 0x3f
    72d0:	d800      	bhi.n	72d4 <_Z17coap_msg_responseP12coap_msg_ctx+0x5c>
    72d2:	e099      	b.n	7408 <_Z17coap_msg_responseP12coap_msg_ctx+0x190>
        b[1] = ctx->code;
    72d4:	706b      	strb	r3, [r5, #1]
        b[2] = ctx->mid >> 8;
    72d6:	88b3      	ldrh	r3, [r6, #4]
    72d8:	121a      	asrs	r2, r3, #8
    72da:	70aa      	strb	r2, [r5, #2]
        b[3] = ctx->mid & 0xFF;
    72dc:	70eb      	strb	r3, [r5, #3]
        if (ctx->tkl) {
    72de:	7874      	ldrb	r4, [r6, #1]
    72e0:	2c00      	cmp	r4, #0
    72e2:	d033      	beq.n	734c <_Z17coap_msg_responseP12coap_msg_ctx+0xd4>
                rc = ERR_INVAL;
    72e4:	2004      	movs	r0, #4
            if (ctx->tkl > 8) {
    72e6:	2c08      	cmp	r4, #8
    72e8:	dc2e      	bgt.n	7348 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
            memcpy(b + idx, ctx->token, ctx->tkl);
    72ea:	0022      	movs	r2, r4
    72ec:	1db1      	adds	r1, r6, #6
    72ee:	a806      	add	r0, sp, #24
    72f0:	f005 fbc7 	bl	ca82 <memcpy>
            b[0] |= ctx->tkl;
    72f4:	782b      	ldrb	r3, [r5, #0]
    72f6:	4323      	orrs	r3, r4
    72f8:	702b      	strb	r3, [r5, #0]
            idx += ctx->tkl;
    72fa:	3404      	adds	r4, #4
        if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_OBSERVE, NULL))
    72fc:	0033      	movs	r3, r6
    72fe:	334c      	adds	r3, #76	; 0x4c
    7300:	2200      	movs	r2, #0
    7302:	2106      	movs	r1, #6
    7304:	0018      	movs	r0, r3
    7306:	9301      	str	r3, [sp, #4]
    7308:	f000 fa2a 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    730c:	2800      	cmp	r0, #0
    730e:	d021      	beq.n	7354 <_Z17coap_msg_responseP12coap_msg_ctx+0xdc>
            dopt = *op;  /* copy original but make type the delta */
    7310:	af03      	add	r7, sp, #12
            op->ov = &opt_val;
    7312:	ab02      	add	r3, sp, #8
    7314:	6043      	str	r3, [r0, #4]
            dopt = *op;  /* copy original but make type the delta */
    7316:	003b      	movs	r3, r7
    7318:	c806      	ldmia	r0!, {r1, r2}
    731a:	c306      	stmia	r3!, {r1, r2}
            opt_val = get_obs_val();
    731c:	f000 f8c6 	bl	74ac <_Z11get_obs_valv>
    7320:	9002      	str	r0, [sp, #8]
            opt_val = co_uint32_h2n(&dopt);
    7322:	0038      	movs	r0, r7
    7324:	f7ff fe60 	bl	6fe8 <_Z13co_uint32_h2nPK5optlv>
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7328:	221c      	movs	r2, #28
            dopt.ot = COAP_OPTION_OBSERVE - onum;
    732a:	2306      	movs	r3, #6
            opt_val = co_uint32_h2n(&dopt);
    732c:	9002      	str	r0, [sp, #8]
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    732e:	1b12      	subs	r2, r2, r4
    7330:	1929      	adds	r1, r5, r4
    7332:	0038      	movs	r0, r7
            dopt.ot = COAP_OPTION_OBSERVE - onum;
    7334:	803b      	strh	r3, [r7, #0]
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7336:	f7ff fddd 	bl	6ef4 <_Z12coap_opt_addPK5optlvPhi>
    733a:	2800      	cmp	r0, #0
    733c:	d108      	bne.n	7350 <_Z17coap_msg_responseP12coap_msg_ctx+0xd8>
                dlog(LOG_ERR, "Couldn't add Observe option to msg");
    733e:	4934      	ldr	r1, [pc, #208]	; (7410 <_Z17coap_msg_responseP12coap_msg_ctx+0x198>)
    7340:	3003      	adds	r0, #3
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    7342:	f7fc ff69 	bl	4218 <_Z4dlogiPKcz>
                    rc = ERR_NO_MEM;
    7346:	2003      	movs	r0, #3

done:
    return rc;
}
    7348:	b00d      	add	sp, #52	; 0x34
    734a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int idx = 4;
    734c:	2404      	movs	r4, #4
    734e:	e7d5      	b.n	72fc <_Z17coap_msg_responseP12coap_msg_ctx+0x84>
            idx += sz;
    7350:	1824      	adds	r4, r4, r0
            onum = COAP_OPTION_OBSERVE;
    7352:	2006      	movs	r0, #6
        if (ctx->plen) 
    7354:	6c33      	ldr	r3, [r6, #64]	; 0x40
    7356:	2b00      	cmp	r3, #0
    7358:	d044      	beq.n	73e4 <_Z17coap_msg_responseP12coap_msg_ctx+0x16c>
            dopt.ot = COAP_OPTION_CONTENT_FORMAT - onum;
    735a:	230c      	movs	r3, #12
            if (ctx->cf == 0) {     /* text/plain; */
    735c:	0032      	movs	r2, r6
            dopt.ot = COAP_OPTION_CONTENT_FORMAT - onum;
    735e:	1a18      	subs	r0, r3, r0
    7360:	af03      	add	r7, sp, #12
    7362:	8038      	strh	r0, [r7, #0]
            if (ctx->cf == 0) {     /* text/plain; */
    7364:	323c      	adds	r2, #60	; 0x3c
    7366:	7813      	ldrb	r3, [r2, #0]
    7368:	2b00      	cmp	r3, #0
    736a:	d10f      	bne.n	738c <_Z17coap_msg_responseP12coap_msg_ctx+0x114>
                dopt.ov = &opt_val;
    736c:	aa02      	add	r2, sp, #8
    736e:	607a      	str	r2, [r7, #4]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7370:	221c      	movs	r2, #28
    7372:	1929      	adds	r1, r5, r4
    7374:	1b12      	subs	r2, r2, r4
    7376:	0038      	movs	r0, r7
                dopt.ol = 0;
    7378:	807b      	strh	r3, [r7, #2]
                opt_val = 0;  /* 0 length anyway */
    737a:	9302      	str	r3, [sp, #8]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    737c:	f7ff fdba 	bl	6ef4 <_Z12coap_opt_addPK5optlvPhi>
                idx += sz;
    7380:	1824      	adds	r4, r4, r0
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7382:	2800      	cmp	r0, #0
    7384:	d10e      	bne.n	73a4 <_Z17coap_msg_responseP12coap_msg_ctx+0x12c>
                    dlog(LOG_ERR, "Couldn't add content format option to msg");
    7386:	4923      	ldr	r1, [pc, #140]	; (7414 <_Z17coap_msg_responseP12coap_msg_ctx+0x19c>)
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    7388:	2003      	movs	r0, #3
    738a:	e7da      	b.n	7342 <_Z17coap_msg_responseP12coap_msg_ctx+0xca>
                dopt.ov = &(ctx->cf);
    738c:	607a      	str	r2, [r7, #4]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    738e:	221c      	movs	r2, #28
                dopt.ol = 1;
    7390:	2301      	movs	r3, #1
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7392:	1b12      	subs	r2, r2, r4
    7394:	1929      	adds	r1, r5, r4
    7396:	0038      	movs	r0, r7
                dopt.ol = 1;
    7398:	807b      	strh	r3, [r7, #2]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    739a:	f7ff fdab 	bl	6ef4 <_Z12coap_opt_addPK5optlvPhi>
    739e:	2800      	cmp	r0, #0
    73a0:	d0f1      	beq.n	7386 <_Z17coap_msg_responseP12coap_msg_ctx+0x10e>
                idx += sz;
    73a2:	1824      	adds	r4, r4, r0
            if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_MAXAGE, 
    73a4:	2200      	movs	r2, #0
    73a6:	210e      	movs	r1, #14
    73a8:	9801      	ldr	r0, [sp, #4]
    73aa:	f000 f9d9 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    73ae:	2800      	cmp	r0, #0
    73b0:	d01a      	beq.n	73e8 <_Z17coap_msg_responseP12coap_msg_ctx+0x170>
				op->ov = &opt_val;
    73b2:	ab02      	add	r3, sp, #8
    73b4:	6043      	str	r3, [r0, #4]
                dopt = *op;  /* copy original but make type the delta */
    73b6:	003b      	movs	r3, r7
    73b8:	c806      	ldmia	r0!, {r1, r2}
    73ba:	c306      	stmia	r3!, {r1, r2}
				opt_val = coap_max_age_in_seconds;
    73bc:	4b16      	ldr	r3, [pc, #88]	; (7418 <_Z17coap_msg_responseP12coap_msg_ctx+0x1a0>)
				opt_val = co_uint32_h2n(&dopt);
    73be:	0038      	movs	r0, r7
				opt_val = coap_max_age_in_seconds;
    73c0:	681b      	ldr	r3, [r3, #0]
    73c2:	9302      	str	r3, [sp, #8]
				opt_val = co_uint32_h2n(&dopt);
    73c4:	f7ff fe10 	bl	6fe8 <_Z13co_uint32_h2nPK5optlv>
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    73c8:	221c      	movs	r2, #28
                dopt.ot = COAP_OPTION_MAXAGE - onum;
    73ca:	2302      	movs	r3, #2
				opt_val = co_uint32_h2n(&dopt);
    73cc:	9002      	str	r0, [sp, #8]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    73ce:	1b12      	subs	r2, r2, r4
    73d0:	1929      	adds	r1, r5, r4
    73d2:	0038      	movs	r0, r7
                dopt.ot = COAP_OPTION_MAXAGE - onum;
    73d4:	803b      	strh	r3, [r7, #0]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    73d6:	f7ff fd8d 	bl	6ef4 <_Z12coap_opt_addPK5optlvPhi>
                idx += sz;
    73da:	1824      	adds	r4, r4, r0
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    73dc:	2800      	cmp	r0, #0
    73de:	dc03      	bgt.n	73e8 <_Z17coap_msg_responseP12coap_msg_ctx+0x170>
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    73e0:	490e      	ldr	r1, [pc, #56]	; (741c <_Z17coap_msg_responseP12coap_msg_ctx+0x1a4>)
    73e2:	e7d1      	b.n	7388 <_Z17coap_msg_responseP12coap_msg_ctx+0x110>
        if (onum && ctx->plen) {
    73e4:	2800      	cmp	r0, #0
    73e6:	d005      	beq.n	73f4 <_Z17coap_msg_responseP12coap_msg_ctx+0x17c>
    73e8:	6c33      	ldr	r3, [r6, #64]	; 0x40
    73ea:	2b00      	cmp	r3, #0
    73ec:	d002      	beq.n	73f4 <_Z17coap_msg_responseP12coap_msg_ctx+0x17c>
            b[idx++] = 0xFF;    /* end of options */
    73ee:	23ff      	movs	r3, #255	; 0xff
    73f0:	552b      	strb	r3, [r5, r4]
    73f2:	3401      	adds	r4, #1
    assert(idx <= COAP_OBS_HDR_SZ);
    73f4:	2c1c      	cmp	r4, #28
    73f6:	dc00      	bgt.n	73fa <_Z17coap_msg_responseP12coap_msg_ctx+0x182>
    73f8:	e752      	b.n	72a0 <_Z17coap_msg_responseP12coap_msg_ctx+0x28>
    73fa:	21f0      	movs	r1, #240	; 0xf0
    73fc:	4b08      	ldr	r3, [pc, #32]	; (7420 <_Z17coap_msg_responseP12coap_msg_ctx+0x1a8>)
    73fe:	4a09      	ldr	r2, [pc, #36]	; (7424 <_Z17coap_msg_responseP12coap_msg_ctx+0x1ac>)
    7400:	0089      	lsls	r1, r1, #2
    7402:	4809      	ldr	r0, [pc, #36]	; (7428 <_Z17coap_msg_responseP12coap_msg_ctx+0x1b0>)
    7404:	f005 f9c0 	bl	c788 <__assert_func>
        rc = ERR_INVAL;
    7408:	2004      	movs	r0, #4
    740a:	e79d      	b.n	7348 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
    740c:	0001139e 	.word	0x0001139e
    7410:	00011317 	.word	0x00011317
    7414:	0001133a 	.word	0x0001133a
    7418:	200013b8 	.word	0x200013b8
    741c:	00011364 	.word	0x00011364
    7420:	00011387 	.word	0x00011387
    7424:	0001147f 	.word	0x0001147f
    7428:	00011251 	.word	0x00011251

0000742c <_Z16coap_set_max_agem>:
 * 
 *
 */ 
void coap_set_max_age( uint32_t max_age )
{
	coap_max_age_in_seconds = max_age;
    742c:	4b01      	ldr	r3, [pc, #4]	; (7434 <_Z16coap_set_max_agem+0x8>)
    742e:	6018      	str	r0, [r3, #0]
	
} // coap_set_max_age
    7430:	4770      	bx	lr
    7432:	46c0      	nop			; (mov r8, r8)
    7434:	200013b8 	.word	0x200013b8

00007438 <_Z14get_obs_by_uriPKcPhS1_PPvS1_>:
 *
 * Returns 0 on success, -1 if not found.
 */
error_t
get_obs_by_uri(const char *uri, uint8_t *tkl, uint8_t *token, void **client, uint8_t *nxt)
{
    7438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    743a:	0005      	movs	r5, r0
    743c:	000f      	movs	r7, r1
    743e:	9201      	str	r2, [sp, #4]
    7440:	001e      	movs	r6, r3
    uint8_t i;

    if ((uri == NULL) || (uri[0] == '\0') || (*nxt >= MAX_OBSERVERS)) {
        return ERR_INVAL;
    7442:	2004      	movs	r0, #4
    if ((uri == NULL) || (uri[0] == '\0') || (*nxt >= MAX_OBSERVERS)) {
    7444:	2d00      	cmp	r5, #0
    7446:	d02e      	beq.n	74a6 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    7448:	782b      	ldrb	r3, [r5, #0]
    744a:	2b00      	cmp	r3, #0
    744c:	d02b      	beq.n	74a6 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    744e:	9b08      	ldr	r3, [sp, #32]
    7450:	781c      	ldrb	r4, [r3, #0]
    7452:	2c03      	cmp	r4, #3
    7454:	dc27      	bgt.n	74a6 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    }

    for (i = *nxt; i < MAX_OBSERVERS; i++) {
    7456:	2c03      	cmp	r4, #3
    7458:	dc0c      	bgt.n	7474 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x3c>
        if (!strcmp(uri, obs[i].uri)) {
    745a:	2198      	movs	r1, #152	; 0x98
    745c:	0049      	lsls	r1, r1, #1
    745e:	4361      	muls	r1, r4
    7460:	4b11      	ldr	r3, [pc, #68]	; (74a8 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x70>)
    7462:	0028      	movs	r0, r5
    7464:	1859      	adds	r1, r3, r1
    7466:	f006 fc2c 	bl	dcc2 <strcmp>
    746a:	2800      	cmp	r0, #0
    746c:	d002      	beq.n	7474 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x3c>
    for (i = *nxt; i < MAX_OBSERVERS; i++) {
    746e:	3401      	adds	r4, #1
    7470:	b2e4      	uxtb	r4, r4
    7472:	e7f0      	b.n	7456 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x1e>
            break;
        }
    }
    if (i == MAX_OBSERVERS) {
        return ERR_NO_ENTRY;
    7474:	200c      	movs	r0, #12
    if (i == MAX_OBSERVERS) {
    7476:	2c04      	cmp	r4, #4
    7478:	d015      	beq.n	74a6 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    }

    *tkl = obs[i].tkl;
    747a:	2398      	movs	r3, #152	; 0x98
    747c:	005b      	lsls	r3, r3, #1
    747e:	4363      	muls	r3, r4
    7480:	4909      	ldr	r1, [pc, #36]	; (74a8 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x70>)
    memcpy(token, obs[i].token, *tkl);
    7482:	9801      	ldr	r0, [sp, #4]
    *tkl = obs[i].tkl;
    7484:	18cd      	adds	r5, r1, r3
    7486:	002a      	movs	r2, r5
    7488:	32ff      	adds	r2, #255	; 0xff
    748a:	7852      	ldrb	r2, [r2, #1]
    memcpy(token, obs[i].token, *tkl);
    748c:	3302      	adds	r3, #2
    748e:	33ff      	adds	r3, #255	; 0xff
    7490:	18c9      	adds	r1, r1, r3
    *tkl = obs[i].tkl;
    7492:	703a      	strb	r2, [r7, #0]
    memcpy(token, obs[i].token, *tkl);
    7494:	f005 faf5 	bl	ca82 <memcpy>
    *client = obs[i].client;
    *nxt = i + 1;

    return ERR_OK;
    7498:	2000      	movs	r0, #0
    *client = obs[i].client;
    749a:	35fc      	adds	r5, #252	; 0xfc
    749c:	692b      	ldr	r3, [r5, #16]
    *nxt = i + 1;
    749e:	3401      	adds	r4, #1
    *client = obs[i].client;
    74a0:	6033      	str	r3, [r6, #0]
    *nxt = i + 1;
    74a2:	9b08      	ldr	r3, [sp, #32]
    74a4:	701c      	strb	r4, [r3, #0]
}
    74a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    74a8:	200013f0 	.word	0x200013f0

000074ac <_Z11get_obs_valv>:
    /*
     * Monotonically increasing observe value.
     */
    static uint32_t obs_val = 2;

    if (obs_val == (1 << 24) - 1) {
    74ac:	4b05      	ldr	r3, [pc, #20]	; (74c4 <_Z11get_obs_valv+0x18>)
    74ae:	4906      	ldr	r1, [pc, #24]	; (74c8 <_Z11get_obs_valv+0x1c>)
    74b0:	681a      	ldr	r2, [r3, #0]
    74b2:	428a      	cmp	r2, r1
    74b4:	d103      	bne.n	74be <_Z11get_obs_valv+0x12>
        obs_val = 2;
    74b6:	2202      	movs	r2, #2
    } else {
        obs_val++;
    74b8:	601a      	str	r2, [r3, #0]
    }

    return obs_val;
    74ba:	6818      	ldr	r0, [r3, #0]
}
    74bc:	4770      	bx	lr
        obs_val++;
    74be:	3201      	adds	r2, #1
    74c0:	e7fa      	b.n	74b8 <_Z11get_obs_valv+0xc>
    74c2:	46c0      	nop			; (mov r8, r8)
    74c4:	2000009c 	.word	0x2000009c
    74c8:	00ffffff 	.word	0x00ffffff

000074cc <_Z10enable_obsPKcP12coap_msg_ctxPv>:
 * Currently only called from main (net_mgr) task on NIC, so no need for
 * locking.
 */
error_t 
enable_obs(const char *urip, struct coap_msg_ctx *req, void *client)
{
    74cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    74ce:	b085      	sub	sp, #20
    74d0:	9000      	str	r0, [sp, #0]
    74d2:	000e      	movs	r6, r1
    74d4:	9202      	str	r2, [sp, #8]
        add_obs(empty_slot, urip, req, client);
        return ERR_OK;
    }

error:
    return ERR_BAD_DATA;
    74d6:	2314      	movs	r3, #20
    if (urip == NULL)
    74d8:	2800      	cmp	r0, #0
    74da:	d02f      	beq.n	753c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    if (strlen(urip) >= MAX_OBS_URI_LEN)
    74dc:	f006 fc03 	bl	dce6 <strlen>
    return ERR_BAD_DATA;
    74e0:	2314      	movs	r3, #20
    if (strlen(urip) >= MAX_OBS_URI_LEN)
    74e2:	28ff      	cmp	r0, #255	; 0xff
    74e4:	d82a      	bhi.n	753c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    if (req->sid[0] != '\0')
    74e6:	7f37      	ldrb	r7, [r6, #28]
    74e8:	2f00      	cmp	r7, #0
    74ea:	d03f      	beq.n	756c <_Z10enable_obsPKcP12coap_msg_ctxPv+0xa0>
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    74ec:	0037      	movs	r7, r6
    74ee:	371c      	adds	r7, #28
    74f0:	0038      	movs	r0, r7
    74f2:	f006 fbf8 	bl	dce6 <strlen>
    74f6:	0005      	movs	r5, r0
    74f8:	4b33      	ldr	r3, [pc, #204]	; (75c8 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xfc>)
    74fa:	4a34      	ldr	r2, [pc, #208]	; (75cc <_Z10enable_obsPKcP12coap_msg_ctxPv+0x100>)
    74fc:	1c9c      	adds	r4, r3, #2
    74fe:	189b      	adds	r3, r3, r2
    7500:	9301      	str	r3, [sp, #4]
                !memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)))
    7502:	1db3      	adds	r3, r6, #6
    7504:	34ff      	adds	r4, #255	; 0xff
    7506:	9303      	str	r3, [sp, #12]
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    7508:	1ea1      	subs	r1, r4, #2
    750a:	39ff      	subs	r1, #255	; 0xff
    750c:	002a      	movs	r2, r5
    750e:	0038      	movs	r0, r7
    7510:	f006 fc05 	bl	dd1e <strncmp>
    7514:	2800      	cmp	r0, #0
    7516:	d114      	bne.n	7542 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x76>
                !memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)))
    7518:	1e63      	subs	r3, r4, #1
    751a:	7871      	ldrb	r1, [r6, #1]
    751c:	781a      	ldrb	r2, [r3, #0]
    751e:	428a      	cmp	r2, r1
    7520:	da00      	bge.n	7524 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x58>
    7522:	000a      	movs	r2, r1
    7524:	0021      	movs	r1, r4
    7526:	9803      	ldr	r0, [sp, #12]
    7528:	f005 fa9c 	bl	ca64 <memcmp>
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    752c:	2800      	cmp	r0, #0
    752e:	d108      	bne.n	7542 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x76>
                dlog(LOG_INFO, "Not adding obs entry for %s, sid:token not unique", urip);
    7530:	9a00      	ldr	r2, [sp, #0]
    7532:	4927      	ldr	r1, [pc, #156]	; (75d0 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x104>)
            dlog(LOG_INFO, "Not adding obs entry for %s, duplicate.", urip);
    7534:	3006      	adds	r0, #6
    7536:	f7fc fe6f 	bl	4218 <_Z4dlogiPKcz>
            return ERR_EXISTS;
    753a:	2309      	movs	r3, #9
}
    753c:	0018      	movs	r0, r3
    753e:	b005      	add	sp, #20
    7540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7542:	3431      	adds	r4, #49	; 0x31
        for (i = 0; i < MAX_OBSERVERS; i++) {
    7544:	9b01      	ldr	r3, [sp, #4]
    7546:	34ff      	adds	r4, #255	; 0xff
    7548:	42a3      	cmp	r3, r4
    754a:	d1dd      	bne.n	7508 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x3c>
    754c:	2404      	movs	r4, #4
    754e:	2700      	movs	r7, #0
        if (!strcmp(urip, obs[i].uri))
    7550:	4d1d      	ldr	r5, [pc, #116]	; (75c8 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xfc>)
    7552:	2398      	movs	r3, #152	; 0x98
    7554:	005b      	lsls	r3, r3, #1
    7556:	437b      	muls	r3, r7
    7558:	9800      	ldr	r0, [sp, #0]
    755a:	18e9      	adds	r1, r5, r3
    755c:	9301      	str	r3, [sp, #4]
    755e:	f006 fbb0 	bl	dcc2 <strcmp>
    7562:	2800      	cmp	r0, #0
    7564:	d104      	bne.n	7570 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xa4>
            dlog(LOG_INFO, "Not adding obs entry for %s, duplicate.", urip);
    7566:	9a00      	ldr	r2, [sp, #0]
    7568:	491a      	ldr	r1, [pc, #104]	; (75d4 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x108>)
    756a:	e7e3      	b.n	7534 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x68>
    756c:	2404      	movs	r4, #4
    756e:	e7ef      	b.n	7550 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x84>
		else if ((obs[i].uri[0] == '\0') && (empty_slot == MAX_OBSERVERS))
    7570:	9b01      	ldr	r3, [sp, #4]
    7572:	5d5b      	ldrb	r3, [r3, r5]
    7574:	2b00      	cmp	r3, #0
    7576:	d102      	bne.n	757e <_Z10enable_obsPKcP12coap_msg_ctxPv+0xb2>
    7578:	2c04      	cmp	r4, #4
    757a:	d100      	bne.n	757e <_Z10enable_obsPKcP12coap_msg_ctxPv+0xb2>
    757c:	003c      	movs	r4, r7
    for (i = 0; i < MAX_OBSERVERS; i++) {
    757e:	3701      	adds	r7, #1
    7580:	2f04      	cmp	r7, #4
    7582:	d1e6      	bne.n	7552 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x86>
    return ERR_BAD_DATA;
    7584:	2314      	movs	r3, #20
    if (empty_slot < MAX_OBSERVERS)
    7586:	2c04      	cmp	r4, #4
    7588:	d0d8      	beq.n	753c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    obs[slot].tkl = req->tkl;
    758a:	331d      	adds	r3, #29
    758c:	33ff      	adds	r3, #255	; 0xff
    758e:	435c      	muls	r4, r3
    7590:	192f      	adds	r7, r5, r4
    7592:	003b      	movs	r3, r7
    7594:	7872      	ldrb	r2, [r6, #1]
    memcpy(obs[slot].token, req->token, req->tkl);
    7596:	1ca0      	adds	r0, r4, #2
    obs[slot].tkl = req->tkl;
    7598:	33ff      	adds	r3, #255	; 0xff
    memcpy(obs[slot].token, req->token, req->tkl);
    759a:	30ff      	adds	r0, #255	; 0xff
    obs[slot].tkl = req->tkl;
    759c:	705a      	strb	r2, [r3, #1]
    memcpy(obs[slot].token, req->token, req->tkl);
    759e:	1db1      	adds	r1, r6, #6
    75a0:	1828      	adds	r0, r5, r0
    75a2:	f005 fa6e 	bl	ca82 <memcpy>
    strcpy(obs[slot].uri, urip);
    75a6:	9900      	ldr	r1, [sp, #0]
    75a8:	0038      	movs	r0, r7
    75aa:	f006 fb94 	bl	dcd6 <strcpy>
    strcpy(obs[slot].sid, req->sid);
    75ae:	0020      	movs	r0, r4
    75b0:	0031      	movs	r1, r6
    obs[slot].client = client;
    75b2:	9b02      	ldr	r3, [sp, #8]
    strcpy(obs[slot].sid, req->sid);
    75b4:	3011      	adds	r0, #17
    obs[slot].client = client;
    75b6:	37fc      	adds	r7, #252	; 0xfc
    strcpy(obs[slot].sid, req->sid);
    75b8:	30ff      	adds	r0, #255	; 0xff
    obs[slot].client = client;
    75ba:	613b      	str	r3, [r7, #16]
    strcpy(obs[slot].sid, req->sid);
    75bc:	311c      	adds	r1, #28
    75be:	1828      	adds	r0, r5, r0
    75c0:	f006 fb89 	bl	dcd6 <strcpy>
        return ERR_OK;
    75c4:	2300      	movs	r3, #0
    75c6:	e7b9      	b.n	753c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    75c8:	200013f0 	.word	0x200013f0
    75cc:	000005c1 	.word	0x000005c1
    75d0:	000114a8 	.word	0x000114a8
    75d4:	000114da 	.word	0x000114da

000075d8 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>:
 * Currently only called from main (net_mgr) task on NIC, so no need for
 * locking. However, as per enable_obs and client pointer.
 */
error_t 
disable_obs(const char *urip, struct coap_msg_ctx *req, void **client, uint8_t force)
{
    75d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    75da:	b085      	sub	sp, #20
    75dc:	0007      	movs	r7, r0
    75de:	9100      	str	r1, [sp, #0]
    75e0:	9201      	str	r2, [sp, #4]
    75e2:	9302      	str	r3, [sp, #8]
    int i;

    if (urip == NULL)
	{
        return ERR_INVAL;
    75e4:	2004      	movs	r0, #4
    if (urip == NULL)
    75e6:	2f00      	cmp	r7, #0
    75e8:	d036      	beq.n	7658 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x80>
    /*
     * Find the uri in the array, and if present, zero the entry.
     */
    for (i = 0; i < MAX_OBSERVERS; i++)
	{
        if (!strcmp(urip, obs[i].uri) && (!memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)) || force))
    75ea:	000b      	movs	r3, r1
    if (urip == NULL)
    75ec:	2400      	movs	r4, #0
    75ee:	4d1f      	ldr	r5, [pc, #124]	; (766c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x94>)
        if (!strcmp(urip, obs[i].uri) && (!memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)) || force))
    75f0:	3306      	adds	r3, #6
    75f2:	1cae      	adds	r6, r5, #2
    75f4:	36ff      	adds	r6, #255	; 0xff
    75f6:	9303      	str	r3, [sp, #12]
    75f8:	1eb1      	subs	r1, r6, #2
    75fa:	39ff      	subs	r1, #255	; 0xff
    75fc:	0038      	movs	r0, r7
    75fe:	f006 fb60 	bl	dcc2 <strcmp>
    7602:	2800      	cmp	r0, #0
    7604:	d12a      	bne.n	765c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x84>
    7606:	9a00      	ldr	r2, [sp, #0]
    7608:	1e73      	subs	r3, r6, #1
    760a:	7851      	ldrb	r1, [r2, #1]
    760c:	781a      	ldrb	r2, [r3, #0]
    760e:	428a      	cmp	r2, r1
    7610:	da00      	bge.n	7614 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x3c>
    7612:	000a      	movs	r2, r1
    7614:	0031      	movs	r1, r6
    7616:	9803      	ldr	r0, [sp, #12]
    7618:	f005 fa24 	bl	ca64 <memcmp>
    761c:	2800      	cmp	r0, #0
    761e:	d002      	beq.n	7626 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x4e>
    7620:	9b02      	ldr	r3, [sp, #8]
    7622:	2b00      	cmp	r3, #0
    7624:	d01a      	beq.n	765c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x84>
		{
            obs[i].uri[0] = '\0';
    7626:	2398      	movs	r3, #152	; 0x98
    7628:	005b      	lsls	r3, r3, #1
    762a:	4363      	muls	r3, r4
    762c:	2400      	movs	r4, #0
    762e:	54ec      	strb	r4, [r5, r3]
            *client = obs[i].client;
    7630:	18ed      	adds	r5, r5, r3
    7632:	002b      	movs	r3, r5
    7634:	33fc      	adds	r3, #252	; 0xfc
    7636:	6919      	ldr	r1, [r3, #16]
    7638:	9a01      	ldr	r2, [sp, #4]
            obs[i].client = NULL;
            memset(obs[i].token, 0, sizeof(obs[i].token));
    763a:	0030      	movs	r0, r6
            *client = obs[i].client;
    763c:	6011      	str	r1, [r2, #0]
            obs[i].sid[0] = '\0';
    763e:	35ff      	adds	r5, #255	; 0xff
            obs[i].client = NULL;
    7640:	611c      	str	r4, [r3, #16]
            memset(obs[i].token, 0, sizeof(obs[i].token));
    7642:	2208      	movs	r2, #8
    7644:	0021      	movs	r1, r4
    7646:	f005 fa37 	bl	cab8 <memset>
            dlog(LOG_INFO, "disable_obs: De-registered URI: %s", urip);
    764a:	2006      	movs	r0, #6
            obs[i].sid[0] = '\0';
    764c:	746c      	strb	r4, [r5, #17]
            dlog(LOG_INFO, "disable_obs: De-registered URI: %s", urip);
    764e:	003a      	movs	r2, r7
    7650:	4907      	ldr	r1, [pc, #28]	; (7670 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x98>)
    7652:	f7fc fde1 	bl	4218 <_Z4dlogiPKcz>
            return ERR_OK;
    7656:	0020      	movs	r0, r4
        }
    }
    return ERR_NO_ENTRY;
}
    7658:	b005      	add	sp, #20
    765a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    765c:	3631      	adds	r6, #49	; 0x31
    for (i = 0; i < MAX_OBSERVERS; i++)
    765e:	3401      	adds	r4, #1
    7660:	36ff      	adds	r6, #255	; 0xff
    7662:	2c04      	cmp	r4, #4
    7664:	d1c8      	bne.n	75f8 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x20>
    return ERR_NO_ENTRY;
    7666:	200c      	movs	r0, #12
    7668:	e7f6      	b.n	7658 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x80>
    766a:	46c0      	nop			; (mov r8, r8)
    766c:	200013f0 	.word	0x200013f0
    7670:	00011502 	.word	0x00011502

00007674 <_Z9copt_initP5sl_co>:
/*
 * Initialse the head.
 */
void
copt_init(struct sl_co *hd)
{
    7674:	b510      	push	{r4, lr}
    assert(hd);
    7676:	2800      	cmp	r0, #0
    7678:	d105      	bne.n	7686 <_Z9copt_initP5sl_co+0x12>
    767a:	4b04      	ldr	r3, [pc, #16]	; (768c <_Z9copt_initP5sl_co+0x18>)
    767c:	4a04      	ldr	r2, [pc, #16]	; (7690 <_Z9copt_initP5sl_co+0x1c>)
    767e:	2180      	movs	r1, #128	; 0x80
    7680:	4804      	ldr	r0, [pc, #16]	; (7694 <_Z9copt_initP5sl_co+0x20>)
    7682:	f005 f881 	bl	c788 <__assert_func>

    SLIST_INIT(hd);
    7686:	2300      	movs	r3, #0
    7688:	6003      	str	r3, [r0, #0]
}
    768a:	bd10      	pop	{r4, pc}
    768c:	00011552 	.word	0x00011552
    7690:	0001162c 	.word	0x0001162c
    7694:	00011555 	.word	0x00011555

00007698 <_Z12copt_del_allP5sl_co>:
 *
 * @return: None.
 */
void
copt_del_all(struct sl_co *hd)
{
    7698:	b570      	push	{r4, r5, r6, lr}
    769a:	1e04      	subs	r4, r0, #0
    coap_opt *curr, *tmp;

    assert(hd);
    769c:	d105      	bne.n	76aa <_Z12copt_del_allP5sl_co+0x12>
    769e:	4b0c      	ldr	r3, [pc, #48]	; (76d0 <_Z12copt_del_allP5sl_co+0x38>)
    76a0:	4a0c      	ldr	r2, [pc, #48]	; (76d4 <_Z12copt_del_allP5sl_co+0x3c>)
    76a2:	2192      	movs	r1, #146	; 0x92
    76a4:	480c      	ldr	r0, [pc, #48]	; (76d8 <_Z12copt_del_allP5sl_co+0x40>)
    76a6:	f005 f86f 	bl	c788 <__assert_func>
    SLIST_FOREACH_SAFE(curr, hd, nxt, tmp) {
    76aa:	6800      	ldr	r0, [r0, #0]
    76ac:	2800      	cmp	r0, #0
    76ae:	d00e      	beq.n	76ce <_Z12copt_del_allP5sl_co+0x36>
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    76b0:	6823      	ldr	r3, [r4, #0]
    SLIST_FOREACH_SAFE(curr, hd, nxt, tmp) {
    76b2:	6885      	ldr	r5, [r0, #8]
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    76b4:	4298      	cmp	r0, r3
    76b6:	d105      	bne.n	76c4 <_Z12copt_del_allP5sl_co+0x2c>
    76b8:	6025      	str	r5, [r4, #0]
        free(co);
    76ba:	f005 f9b7 	bl	ca2c <free>
    76be:	0028      	movs	r0, r5
    76c0:	e7f4      	b.n	76ac <_Z12copt_del_allP5sl_co+0x14>
    76c2:	0013      	movs	r3, r2
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    76c4:	689a      	ldr	r2, [r3, #8]
    76c6:	4290      	cmp	r0, r2
    76c8:	d1fb      	bne.n	76c2 <_Z12copt_del_allP5sl_co+0x2a>
    76ca:	609d      	str	r5, [r3, #8]
    76cc:	e7f5      	b.n	76ba <_Z12copt_del_allP5sl_co+0x22>
        copt_dealloc(curr);
    }

    return;
}
    76ce:	bd70      	pop	{r4, r5, r6, pc}
    76d0:	00011552 	.word	0x00011552
    76d4:	000115a8 	.word	0x000115a8
    76d8:	00011555 	.word	0x00011555

000076dc <_Z12copt_add_optP5sl_coP5optlv>:
 *
 * @return: 0 on sucess.
 */
error_t
copt_add_opt(struct sl_co *hd, struct optlv *opt)
{
    76dc:	b570      	push	{r4, r5, r6, lr}
    76de:	0006      	movs	r6, r0
    76e0:	000d      	movs	r5, r1
    assert(hd);
    76e2:	2800      	cmp	r0, #0
    76e4:	d105      	bne.n	76f2 <_Z12copt_add_optP5sl_coP5optlv+0x16>
    76e6:	21a9      	movs	r1, #169	; 0xa9
    76e8:	4b19      	ldr	r3, [pc, #100]	; (7750 <_Z12copt_add_optP5sl_coP5optlv+0x74>)
    76ea:	4a1a      	ldr	r2, [pc, #104]	; (7754 <_Z12copt_add_optP5sl_coP5optlv+0x78>)
    coap_opt *nco;       /* New coap option */
    coap_opt *o, *po;    /* option iterator, previous option. */
    error_t rc = ERR_OK;

    assert(hd);
    assert(opt);
    76ec:	481a      	ldr	r0, [pc, #104]	; (7758 <_Z12copt_add_optP5sl_coP5optlv+0x7c>)
    76ee:	f005 f84b 	bl	c788 <__assert_func>
    76f2:	2900      	cmp	r1, #0
    76f4:	d103      	bne.n	76fe <_Z12copt_add_optP5sl_coP5optlv+0x22>
    76f6:	4b19      	ldr	r3, [pc, #100]	; (775c <_Z12copt_add_optP5sl_coP5optlv+0x80>)
    76f8:	4a16      	ldr	r2, [pc, #88]	; (7754 <_Z12copt_add_optP5sl_coP5optlv+0x78>)
    76fa:	21af      	movs	r1, #175	; 0xaf
    76fc:	e7f6      	b.n	76ec <_Z12copt_add_optP5sl_coP5optlv+0x10>
    if ((co = (coap_opt *)malloc(sizeof(coap_opt))) != NULL) {
    76fe:	200c      	movs	r0, #12
    7700:	f005 f98a 	bl	ca18 <malloc>
    7704:	0004      	movs	r4, r0
    /*
     * Find the node with the correct option value.
     * If present, allocate and append a new object, set object values.
     */
    if ((nco = copt_alloc()) == NULL) {
        rc = ERR_NO_MEM;
    7706:	2003      	movs	r0, #3
    if ((co = (coap_opt *)malloc(sizeof(coap_opt))) != NULL) {
    7708:	2c00      	cmp	r4, #0
    770a:	d012      	beq.n	7732 <_Z12copt_add_optP5sl_coP5optlv+0x56>
        memset(co, 0, sizeof(coap_opt));
    770c:	220c      	movs	r2, #12
    770e:	2100      	movs	r1, #0
    7710:	0020      	movs	r0, r4
    7712:	f005 f9d1 	bl	cab8 <memset>
        goto done;
    }
    nco->o = *opt;
    7716:	0023      	movs	r3, r4
    7718:	002a      	movs	r2, r5
    771a:	ca03      	ldmia	r2!, {r0, r1}
    771c:	c303      	stmia	r3!, {r0, r1}

    if (SLIST_EMPTY(hd) || (SLIST_FIRST(hd)->o.ot > opt->ot)) {
    771e:	6833      	ldr	r3, [r6, #0]
    7720:	2b00      	cmp	r3, #0
    7722:	d003      	beq.n	772c <_Z12copt_add_optP5sl_coP5optlv+0x50>
    7724:	882a      	ldrh	r2, [r5, #0]
    7726:	8819      	ldrh	r1, [r3, #0]
    7728:	4291      	cmp	r1, r2
    772a:	dd04      	ble.n	7736 <_Z12copt_add_optP5sl_coP5optlv+0x5a>
        SLIST_INSERT_HEAD(hd, nco, nxt);
    772c:	60a3      	str	r3, [r4, #8]
    772e:	6034      	str	r4, [r6, #0]
    error_t rc = ERR_OK;
    7730:	2000      	movs	r0, #0
     */
    SLIST_INSERT_AFTER(po, nco, nxt);
    
done:
    return rc;
}
    7732:	bd70      	pop	{r4, r5, r6, pc}
    7734:	0003      	movs	r3, r0
        if (SLIST_NEXT(o, nxt) && (SLIST_NEXT(o, nxt)->o.ot > opt->ot)) {
    7736:	6898      	ldr	r0, [r3, #8]
    7738:	2800      	cmp	r0, #0
    773a:	d005      	beq.n	7748 <_Z12copt_add_optP5sl_coP5optlv+0x6c>
    773c:	8801      	ldrh	r1, [r0, #0]
    773e:	428a      	cmp	r2, r1
    7740:	daf8      	bge.n	7734 <_Z12copt_add_optP5sl_coP5optlv+0x58>
            SLIST_INSERT_AFTER(o, nco, nxt);
    7742:	60a0      	str	r0, [r4, #8]
    7744:	609c      	str	r4, [r3, #8]
    7746:	e7f3      	b.n	7730 <_Z12copt_add_optP5sl_coP5optlv+0x54>
    SLIST_INSERT_AFTER(po, nco, nxt);
    7748:	60a0      	str	r0, [r4, #8]
    774a:	609c      	str	r4, [r3, #8]
    return rc;
    774c:	e7f1      	b.n	7732 <_Z12copt_add_optP5sl_coP5optlv+0x56>
    774e:	46c0      	nop			; (mov r8, r8)
    7750:	00011552 	.word	0x00011552
    7754:	00011583 	.word	0x00011583
    7758:	00011555 	.word	0x00011555
    775c:	00011525 	.word	0x00011525

00007760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>:
 *
 * @return: The next option (as optlv) in the list, or NULL if no more.
 */
struct optlv *
copt_get_next_opt_type(const struct sl_co *hd, uint16_t ot, void **it)
{
    7760:	b507      	push	{r0, r1, r2, lr}
    struct optlv *opt;
    coap_opt **ppco = (coap_opt **)it;
    coap_opt *pco;

    assert(hd);
    7762:	2800      	cmp	r0, #0
    7764:	d106      	bne.n	7774 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x14>
    7766:	2183      	movs	r1, #131	; 0x83
    7768:	4b0e      	ldr	r3, [pc, #56]	; (77a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x44>)
    776a:	4a0f      	ldr	r2, [pc, #60]	; (77a8 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x48>)
    776c:	0049      	lsls	r1, r1, #1
    776e:	480f      	ldr	r0, [pc, #60]	; (77ac <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x4c>)
    7770:	f005 f80a 	bl	c788 <__assert_func>
    pco = SLIST_FIRST(hd);
    7774:	6800      	ldr	r0, [r0, #0]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
        ppco = &pco;
    7776:	ab01      	add	r3, sp, #4
    pco = SLIST_FIRST(hd);
    7778:	9001      	str	r0, [sp, #4]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
    777a:	2a00      	cmp	r2, #0
    777c:	d004      	beq.n	7788 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
    } else if (!*ppco) {
    777e:	6813      	ldr	r3, [r2, #0]
    7780:	2b00      	cmp	r3, #0
    7782:	d10a      	bne.n	779a <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x3a>
        *ppco = SLIST_FIRST(hd);
    7784:	6010      	str	r0, [r2, #0]
    } else {
        *ppco = SLIST_NEXT(*ppco, nxt);
    7786:	0013      	movs	r3, r2
    }
    while (*ppco) {
    7788:	6818      	ldr	r0, [r3, #0]
    778a:	2800      	cmp	r0, #0
    778c:	d008      	beq.n	77a0 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
        if ((*ppco)->o.ot == ot) {
    778e:	8802      	ldrh	r2, [r0, #0]
    7790:	428a      	cmp	r2, r1
    7792:	d005      	beq.n	77a0 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
            break;
        }
        *ppco = SLIST_NEXT(*ppco, nxt);
    7794:	6882      	ldr	r2, [r0, #8]
    7796:	601a      	str	r2, [r3, #0]
    while (*ppco) {
    7798:	e7f6      	b.n	7788 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
        *ppco = SLIST_NEXT(*ppco, nxt);
    779a:	689b      	ldr	r3, [r3, #8]
    779c:	6013      	str	r3, [r2, #0]
    779e:	e7f2      	b.n	7786 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x26>
        opt = &((*ppco)->o);
    } else {
        opt = NULL;
    }
    return opt;
}
    77a0:	bd0e      	pop	{r1, r2, r3, pc}
    77a2:	46c0      	nop			; (mov r8, r8)
    77a4:	00011552 	.word	0x00011552
    77a8:	000115ee 	.word	0x000115ee
    77ac:	00011555 	.word	0x00011555

000077b0 <_Z17copt_del_opt_typeP5sl_cot>:
 *
 * @return: 0 if anything deleted.
 */
error_t
copt_del_opt_type(struct sl_co *hd, uint16_t ot)
{
    77b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77b2:	0004      	movs	r4, r0
    77b4:	000f      	movs	r7, r1
    error_t rc = ERR_NO_ENTRY;
    assert(hd);
    77b6:	2800      	cmp	r0, #0
    77b8:	d106      	bne.n	77c8 <_Z17copt_del_opt_typeP5sl_cot+0x18>
    77ba:	214c      	movs	r1, #76	; 0x4c
    77bc:	4b12      	ldr	r3, [pc, #72]	; (7808 <_Z17copt_del_opt_typeP5sl_cot+0x58>)
    77be:	4a13      	ldr	r2, [pc, #76]	; (780c <_Z17copt_del_opt_typeP5sl_cot+0x5c>)
    77c0:	31ff      	adds	r1, #255	; 0xff
    77c2:	4813      	ldr	r0, [pc, #76]	; (7810 <_Z17copt_del_opt_typeP5sl_cot+0x60>)
    77c4:	f004 ffe0 	bl	c788 <__assert_func>
    error_t rc = ERR_NO_ENTRY;
    77c8:	250c      	movs	r5, #12
    coap_opt *o, *tmp;

    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    77ca:	6800      	ldr	r0, [r0, #0]
    77cc:	2800      	cmp	r0, #0
    77ce:	d012      	beq.n	77f6 <_Z17copt_del_opt_typeP5sl_cot+0x46>
        if (o->o.ot == ot) {
    77d0:	8803      	ldrh	r3, [r0, #0]
    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    77d2:	6886      	ldr	r6, [r0, #8]
        if (o->o.ot == ot) {
    77d4:	42bb      	cmp	r3, r7
    77d6:	d106      	bne.n	77e6 <_Z17copt_del_opt_typeP5sl_cot+0x36>
            rc = ERR_OK;
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    77d8:	6823      	ldr	r3, [r4, #0]
    77da:	4298      	cmp	r0, r3
    77dc:	d106      	bne.n	77ec <_Z17copt_del_opt_typeP5sl_cot+0x3c>
    77de:	6026      	str	r6, [r4, #0]
        free(co);
    77e0:	f005 f924 	bl	ca2c <free>
            rc = ERR_OK;
    77e4:	2500      	movs	r5, #0
    77e6:	0030      	movs	r0, r6
    77e8:	e7f0      	b.n	77cc <_Z17copt_del_opt_typeP5sl_cot+0x1c>
    77ea:	0013      	movs	r3, r2
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    77ec:	689a      	ldr	r2, [r3, #8]
    77ee:	4290      	cmp	r0, r2
    77f0:	d1fb      	bne.n	77ea <_Z17copt_del_opt_typeP5sl_cot+0x3a>
    77f2:	609e      	str	r6, [r3, #8]
    77f4:	e7f4      	b.n	77e0 <_Z17copt_del_opt_typeP5sl_cot+0x30>
            copt_dealloc(o);
        }
    }

    if (rc) {
    77f6:	2d00      	cmp	r5, #0
    77f8:	d004      	beq.n	7804 <_Z17copt_del_opt_typeP5sl_cot+0x54>
        dlog(LOG_DEBUG, "Didn't find option %d to delete.", ot);
    77fa:	003a      	movs	r2, r7
    77fc:	4905      	ldr	r1, [pc, #20]	; (7814 <_Z17copt_del_opt_typeP5sl_cot+0x64>)
    77fe:	2007      	movs	r0, #7
    7800:	f7fc fd0a 	bl	4218 <_Z4dlogiPKcz>
    }

    return rc;
}
    7804:	0028      	movs	r0, r5
    7806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7808:	00011552 	.word	0x00011552
    780c:	000115c2 	.word	0x000115c2
    7810:	00011555 	.word	0x00011555
    7814:	00011531 	.word	0x00011531

00007818 <_Z14observe_rx_ackPvP4mbuf>:
 */
error_t observe_rx_ack(void *cbctx, struct mbuf *m)
{
	// Bump the sequence number.
	uint32_t seq_number = *((uint32_t *)cbctx);
	seq_number++;
    7818:	6803      	ldr	r3, [r0, #0]
    781a:	3301      	adds	r3, #1
	*((uint32_t *)cbctx) = seq_number;
    781c:	6003      	str	r3, [r0, #0]
	
	return ERR_OK;
}
    781e:	2000      	movs	r0, #0
    7820:	4770      	bx	lr
	...

00007824 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>:
{
    7824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7826:	2434      	movs	r4, #52	; 0x34
{
    7828:	4684      	mov	ip, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    782a:	4d11      	ldr	r5, [pc, #68]	; (7870 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x4c>)
    782c:	4e11      	ldr	r6, [pc, #68]	; (7874 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x50>)
    782e:	7828      	ldrb	r0, [r5, #0]
{
    7830:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7832:	4360      	muls	r0, r4
{
    7834:	9200      	str	r2, [sp, #0]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7836:	4910      	ldr	r1, [pc, #64]	; (7878 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x54>)
    7838:	4662      	mov	r2, ip
    783a:	1830      	adds	r0, r6, r0
{
    783c:	9301      	str	r3, [sp, #4]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    783e:	f006 fa11 	bl	dc64 <siprintf>
	observe_info[observe_info_index].pObsFunc = p;
    7842:	782b      	ldrb	r3, [r5, #0]
	observe_info[observe_info_index].sensor_id = sensor_id;
    7844:	466a      	mov	r2, sp
	observe_info[observe_info_index].pObsFunc = p;
    7846:	435c      	muls	r4, r3
	observe_info[observe_info_index].frequency = frequency;
    7848:	9b00      	ldr	r3, [sp, #0]
	observe_info[observe_info_index].pObsFunc = p;
    784a:	1936      	adds	r6, r6, r4
	observe_info[observe_info_index].frequency = frequency;
    784c:	62b3      	str	r3, [r6, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = sensor_id;
    784e:	0033      	movs	r3, r6
    7850:	7912      	ldrb	r2, [r2, #4]
    7852:	3331      	adds	r3, #49	; 0x31
    7854:	701a      	strb	r2, [r3, #0]
	observe_info[observe_info_index].obs_flag = 0;
    7856:	0032      	movs	r2, r6
    7858:	2300      	movs	r3, #0
    785a:	3230      	adds	r2, #48	; 0x30
	observe_info[observe_info_index].pObsFunc = p;
    785c:	6237      	str	r7, [r6, #32]
	observe_info[observe_info_index].ack_seqno = 0;
    785e:	62f3      	str	r3, [r6, #44]	; 0x2c
	observe_info[observe_info_index].obs_flag = 0;
    7860:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    7862:	f7fc fc41 	bl	40e8 <_Z13get_rtc_epochv>
    7866:	6270      	str	r0, [r6, #36]	; 0x24
	return observe_info_index++;
    7868:	7828      	ldrb	r0, [r5, #0]
    786a:	1c43      	adds	r3, r0, #1
    786c:	702b      	strb	r3, [r5, #0]
}
    786e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7870:	200018b0 	.word	0x200018b0
    7874:	200018b4 	.word	0x200018b4
    7878:	00011787 	.word	0x00011787

0000787c <_Z12set_observerPKcPF7error_eP4mbufPhhE>:
{
    787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    787e:	2534      	movs	r5, #52	; 0x34
    7880:	4c0d      	ldr	r4, [pc, #52]	; (78b8 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x3c>)
    7882:	4e0e      	ldr	r6, [pc, #56]	; (78bc <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x40>)
    7884:	7823      	ldrb	r3, [r4, #0]
{
    7886:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    7888:	436b      	muls	r3, r5
{
    788a:	0002      	movs	r2, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    788c:	490c      	ldr	r1, [pc, #48]	; (78c0 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x44>)
    788e:	18f0      	adds	r0, r6, r3
    7890:	f006 f9e8 	bl	dc64 <siprintf>
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    7894:	233c      	movs	r3, #60	; 0x3c
	observe_info[observe_info_index].pObsFunc = p;
    7896:	7824      	ldrb	r4, [r4, #0]
    7898:	436c      	muls	r4, r5
    789a:	1934      	adds	r4, r6, r4
	observe_info[observe_info_index].sensor_id = 0;
    789c:	0022      	movs	r2, r4
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    789e:	62a3      	str	r3, [r4, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = 0;
    78a0:	2300      	movs	r3, #0
    78a2:	3231      	adds	r2, #49	; 0x31
    78a4:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].obs_flag = 0;
    78a6:	3a01      	subs	r2, #1
	observe_info[observe_info_index].pObsFunc = p;
    78a8:	6227      	str	r7, [r4, #32]
	observe_info[observe_info_index].obs_flag = 0;
    78aa:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].ack_seqno = 0;
    78ac:	62e3      	str	r3, [r4, #44]	; 0x2c
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    78ae:	f7fc fc1b 	bl	40e8 <_Z13get_rtc_epochv>
    78b2:	6260      	str	r0, [r4, #36]	; 0x24
}
    78b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78b6:	46c0      	nop			; (mov r8, r8)
    78b8:	200018b0 	.word	0x200018b0
    78bc:	200018b4 	.word	0x200018b4
    78c0:	00011787 	.word	0x00011787

000078c4 <_Z17coap_obs_reg_sapih>:
{
    78c4:	b510      	push	{r4, lr}
    78c6:	0004      	movs	r4, r0
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    78c8:	f7fc fc0e 	bl	40e8 <_Z13get_rtc_epochv>
    78cc:	2334      	movs	r3, #52	; 0x34
    78ce:	435c      	muls	r4, r3
    78d0:	4b05      	ldr	r3, [pc, #20]	; (78e8 <_Z17coap_obs_reg_sapih+0x24>)
	observe_info[observer_id].obs_flag = 1;
    78d2:	2101      	movs	r1, #1
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    78d4:	191b      	adds	r3, r3, r4
	observe_info[observer_id].obs_flag = 1;
    78d6:	001a      	movs	r2, r3
    78d8:	3230      	adds	r2, #48	; 0x30
    78da:	7011      	strb	r1, [r2, #0]
	observe_info[observer_id].ack_seqno = 10;
    78dc:	220a      	movs	r2, #10
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    78de:	6258      	str	r0, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 10;
    78e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
    78e2:	2000      	movs	r0, #0
    78e4:	bd10      	pop	{r4, pc}
    78e6:	46c0      	nop			; (mov r8, r8)
    78e8:	200018b4 	.word	0x200018b4

000078ec <_Z19coap_obs_dereg_sapih>:
	observe_info[observer_id].obs_flag = 0;
    78ec:	2134      	movs	r1, #52	; 0x34
    78ee:	4341      	muls	r1, r0
    78f0:	4b07      	ldr	r3, [pc, #28]	; (7910 <_Z19coap_obs_dereg_sapih+0x24>)
{
    78f2:	b510      	push	{r4, lr}
	observe_info[observer_id].obs_flag = 0;
    78f4:	185b      	adds	r3, r3, r1
    78f6:	0019      	movs	r1, r3
    78f8:	2400      	movs	r4, #0
    78fa:	3130      	adds	r1, #48	; 0x30
{
    78fc:	0002      	movs	r2, r0
	observe_info[observer_id].obs_flag = 0;
    78fe:	700c      	strb	r4, [r1, #0]
	observe_info[observer_id].base_epoch = 0;
    7900:	625c      	str	r4, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 0;
    7902:	62dc      	str	r4, [r3, #44]	; 0x2c
	dlog(LOG_DEBUG, "De-register Observe: %d", observer_id);
    7904:	4903      	ldr	r1, [pc, #12]	; (7914 <_Z19coap_obs_dereg_sapih+0x28>)
    7906:	2007      	movs	r0, #7
    7908:	f7fc fc86 	bl	4218 <_Z4dlogiPKcz>
}
    790c:	0020      	movs	r0, r4
    790e:	bd10      	pop	{r4, pc}
    7910:	200018b4 	.word	0x200018b4
    7914:	00011793 	.word	0x00011793

00007918 <_Z16coap_observe_rsph>:
 * coap_msg_response() to build a response.
 * Register for callback when ACK received.
 * Set pending_rsp, freeing any existing one first.
 */
error_t coap_observe_rsp(uint8_t observer_id)
{
    7918:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct coap_msg_ctx rsp;
    coap_ack_cb_info_t 	cbi;			// Callback info
    uint8_t 			len = 0;		// Message length
    791a:	270a      	movs	r7, #10
{
    791c:	b09f      	sub	sp, #124	; 0x7c
    uint8_t 			len = 0;		// Message length
    791e:	ab02      	add	r3, sp, #8
    uint8_t 			nxt = 0;		// The next observer
    7920:	260b      	movs	r6, #11
    uint8_t 			len = 0;		// Message length
    7922:	18ff      	adds	r7, r7, r3
    7924:	2300      	movs	r3, #0
    uint8_t 			nxt = 0;		// The next observer
    7926:	aa02      	add	r2, sp, #8
    7928:	18b6      	adds	r6, r6, r2
    uint8_t 			len = 0;		// Message length
    792a:	703b      	strb	r3, [r7, #0]
    uint8_t 			nxt = 0;		// The next observer
    792c:	7033      	strb	r3, [r6, #0]
    struct mbuf *		m = NULL;		// Observe response message
    struct optlv 		opt;
    error_t 			rc = ERR_OK;

	// Safety check. If a message is already in progress do nothing.
    if (pending_rsp) 
    792e:	4b59      	ldr	r3, [pc, #356]	; (7a94 <_Z16coap_observe_rsph+0x17c>)
{
    7930:	0004      	movs	r4, r0
    if (pending_rsp) 
    7932:	6819      	ldr	r1, [r3, #0]
    7934:	2900      	cmp	r1, #0
    7936:	d007      	beq.n	7948 <_Z16coap_observe_rsph+0x30>
	{
		dlog(LOG_DEBUG, "coap_observe_rsp: Pending response in progress - skipping new notification");
    7938:	4957      	ldr	r1, [pc, #348]	; (7a98 <_Z16coap_observe_rsph+0x180>)
    793a:	2007      	movs	r0, #7
    793c:	f7fc fc6c 	bl	4218 <_Z4dlogiPKcz>
		return ERR_INPROGRESS;
    7940:	2410      	movs	r4, #16
error:
    copt_del_all((sl_co*)&(rsp.oh));
    dlog(LOG_DEBUG, "coap_observe_rsp: free response mbuf on error");
    m_free(m);
    return rc;
}
    7942:	0020      	movs	r0, r4
    7944:	b01f      	add	sp, #124	; 0x7c
    7946:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rsp, 0, sizeof(rsp));
    7948:	ad09      	add	r5, sp, #36	; 0x24
    794a:	2254      	movs	r2, #84	; 0x54
    794c:	0028      	movs	r0, r5
    794e:	f005 f8b3 	bl	cab8 <memset>
	rc = get_obs_by_uri(observe_info[observer_id].obs_uri, &(rsp.tkl), rsp.token, &(rsp.client), &nxt);
    7952:	2222      	movs	r2, #34	; 0x22
    7954:	2334      	movs	r3, #52	; 0x34
    7956:	a902      	add	r1, sp, #8
    7958:	1852      	adds	r2, r2, r1
    795a:	211d      	movs	r1, #29
    795c:	4363      	muls	r3, r4
    795e:	4c4f      	ldr	r4, [pc, #316]	; (7a9c <_Z16coap_observe_rsph+0x184>)
    7960:	a802      	add	r0, sp, #8
    7962:	18e4      	adds	r4, r4, r3
    7964:	9302      	str	r3, [sp, #8]
    7966:	1809      	adds	r1, r1, r0
    7968:	9600      	str	r6, [sp, #0]
    796a:	ab1a      	add	r3, sp, #104	; 0x68
    796c:	0020      	movs	r0, r4
    796e:	f7ff fd63 	bl	7438 <_Z14get_obs_by_uriPKcPhS1_PPvS1_>
    7972:	9003      	str	r0, [sp, #12]
    if (rc)
    7974:	2800      	cmp	r0, #0
    7976:	d006      	beq.n	7986 <_Z16coap_observe_rsph+0x6e>
        dlog(LOG_ERR, "get_obs_by_uri failed: %s", observe_info[observer_id].obs_uri);
    7978:	0022      	movs	r2, r4
    797a:	4949      	ldr	r1, [pc, #292]	; (7aa0 <_Z16coap_observe_rsph+0x188>)
    797c:	2003      	movs	r0, #3
    797e:	f7fc fc4b 	bl	4218 <_Z4dlogiPKcz>
        return ERR_NO_ENTRY;
    7982:	240c      	movs	r4, #12
    7984:	e7dd      	b.n	7942 <_Z16coap_observe_rsph+0x2a>
    copt_init((sl_co*)&(rsp.oh));
    7986:	a81c      	add	r0, sp, #112	; 0x70
    7988:	f7ff fe74 	bl	7674 <_Z9copt_initP5sl_co>
	m = m_gethdr();
    798c:	f000 fce6 	bl	835c <_Z5m_getv>
    7990:	1e06      	subs	r6, r0, #0
    if (!m) 
    7992:	d030      	beq.n	79f6 <_Z16coap_observe_rsph+0xde>
    m_prepend(m, COAP_OBS_HDR_SZ);
    7994:	211c      	movs	r1, #28
    7996:	f000 fd27 	bl	83e8 <_Z9m_prependP4mbufi>
	if (is_sapi == 1)
    799a:	4b42      	ldr	r3, [pc, #264]	; (7aa4 <_Z16coap_observe_rsph+0x18c>)
    799c:	781a      	ldrb	r2, [r3, #0]
    799e:	6a23      	ldr	r3, [r4, #32]
    79a0:	2a01      	cmp	r2, #1
    79a2:	d12a      	bne.n	79fa <_Z16coap_observe_rsph+0xe2>
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, observe_info[observer_id].sensor_id);
    79a4:	3431      	adds	r4, #49	; 0x31
    79a6:	7822      	ldrb	r2, [r4, #0]
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, 0);
    79a8:	0039      	movs	r1, r7
    79aa:	0030      	movs	r0, r6
    79ac:	4798      	blx	r3
    79ae:	1e04      	subs	r4, r0, #0
    if (rc != ERR_OK) 
    79b0:	d137      	bne.n	7a22 <_Z16coap_observe_rsph+0x10a>
    m_adj( m, COAP_OBS_HDR_SZ );
    79b2:	211c      	movs	r1, #28
    79b4:	0030      	movs	r0, r6
    79b6:	f000 fd3d 	bl	8434 <_Z5m_adjP4mbufi>
    rsp.msg = m;
    79ba:	652e      	str	r6, [r5, #80]	; 0x50
    rsp.mid = get_mid_val();
    79bc:	f7ff fb4c 	bl	7058 <_Z11get_mid_valv>
	opt.ol = 3;
    79c0:	2703      	movs	r7, #3
	opt.ot = COAP_OPTION_OBSERVE;
    79c2:	2306      	movs	r3, #6
    79c4:	ac07      	add	r4, sp, #28
    rsp.mid = get_mid_val();
    79c6:	80a8      	strh	r0, [r5, #4]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79c8:	0021      	movs	r1, r4
    79ca:	a81c      	add	r0, sp, #112	; 0x70
	opt.ot = COAP_OPTION_OBSERVE;
    79cc:	8023      	strh	r3, [r4, #0]
	opt.ol = 3;
    79ce:	8067      	strh	r7, [r4, #2]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79d0:	f7ff fe84 	bl	76dc <_Z12copt_add_optP5sl_coP5optlv>
		dlog(LOG_ERR, "Couldn't add Observe option");
    79d4:	4934      	ldr	r1, [pc, #208]	; (7aa8 <_Z16coap_observe_rsph+0x190>)
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79d6:	2800      	cmp	r0, #0
    79d8:	d10a      	bne.n	79f0 <_Z16coap_observe_rsph+0xd8>
	opt.ot = COAP_OPTION_MAXAGE;
    79da:	230e      	movs	r3, #14
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79dc:	0021      	movs	r1, r4
	opt.ot = COAP_OPTION_MAXAGE;
    79de:	8023      	strh	r3, [r4, #0]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79e0:	a81c      	add	r0, sp, #112	; 0x70
	opt.ol = 4;
    79e2:	3b0a      	subs	r3, #10
    79e4:	8063      	strh	r3, [r4, #2]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79e6:	f7ff fe79 	bl	76dc <_Z12copt_add_optP5sl_coP5optlv>
    79ea:	1e04      	subs	r4, r0, #0
    79ec:	d007      	beq.n	79fe <_Z16coap_observe_rsph+0xe6>
		dlog(LOG_ERR, "Couldn't add Max-Age option");
    79ee:	492f      	ldr	r1, [pc, #188]	; (7aac <_Z16coap_observe_rsph+0x194>)
    79f0:	0038      	movs	r0, r7
    79f2:	f7fc fc11 	bl	4218 <_Z4dlogiPKcz>
		rc = ERR_NO_MEM;
    79f6:	2403      	movs	r4, #3
    79f8:	e013      	b.n	7a22 <_Z16coap_observe_rsph+0x10a>
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, 0);
    79fa:	9a03      	ldr	r2, [sp, #12]
    79fc:	e7d4      	b.n	79a8 <_Z16coap_observe_rsph+0x90>
	rsp.plen = m->m_pktlen; /* payload includes type and length */
    79fe:	8833      	ldrh	r3, [r6, #0]
	rsp.cf = COAP_CF_CSV;
    7a00:	2202      	movs	r2, #2
	rsp.plen = m->m_pktlen; /* payload includes type and length */
    7a02:	642b      	str	r3, [r5, #64]	; 0x40
    rsp.code = COAP_RSP_205_CONTENT;
    7a04:	2345      	movs	r3, #69	; 0x45
    7a06:	70ab      	strb	r3, [r5, #2]
	rsp.cf = COAP_CF_CSV;
    7a08:	ab18      	add	r3, sp, #96	; 0x60
    7a0a:	701a      	strb	r2, [r3, #0]
    rsp.type = COAP_T_NCONF_VAL; // TODO: CON or NON?
    7a0c:	2301      	movs	r3, #1
    if (coap_msg_response(&rsp) != ERR_OK) 
    7a0e:	0028      	movs	r0, r5
    rsp.type = COAP_T_NCONF_VAL; // TODO: CON or NON?
    7a10:	702b      	strb	r3, [r5, #0]
    if (coap_msg_response(&rsp) != ERR_OK) 
    7a12:	f7ff fc31 	bl	7278 <_Z17coap_msg_responseP12coap_msg_ctx>
    7a16:	2800      	cmp	r0, #0
    7a18:	d00e      	beq.n	7a38 <_Z16coap_observe_rsph+0x120>
        dlog(LOG_ERR, "coap_observe_rsp: Error creating response");
    7a1a:	4925      	ldr	r1, [pc, #148]	; (7ab0 <_Z16coap_observe_rsph+0x198>)
    7a1c:	0038      	movs	r0, r7
    7a1e:	f7fc fbfb 	bl	4218 <_Z4dlogiPKcz>
    copt_del_all((sl_co*)&(rsp.oh));
    7a22:	a81c      	add	r0, sp, #112	; 0x70
    7a24:	f7ff fe38 	bl	7698 <_Z12copt_del_allP5sl_co>
    dlog(LOG_DEBUG, "coap_observe_rsp: free response mbuf on error");
    7a28:	4922      	ldr	r1, [pc, #136]	; (7ab4 <_Z16coap_observe_rsph+0x19c>)
    7a2a:	2007      	movs	r0, #7
    7a2c:	f7fc fbf4 	bl	4218 <_Z4dlogiPKcz>
    m_free(m);
    7a30:	0030      	movs	r0, r6
    7a32:	f000 fcbd 	bl	83b0 <_Z6m_freeP4mbuf>
    return rc;
    7a36:	e784      	b.n	7942 <_Z16coap_observe_rsph+0x2a>
    cbi.cbctx = (void *) &observe_info[observer_id].ack_seqno;
    7a38:	9c02      	ldr	r4, [sp, #8]
    7a3a:	4b18      	ldr	r3, [pc, #96]	; (7a9c <_Z16coap_observe_rsph+0x184>)
    7a3c:	342c      	adds	r4, #44	; 0x2c
    7a3e:	191c      	adds	r4, r3, r4
    cbi.cb = observe_rx_ack;
    7a40:	4b1d      	ldr	r3, [pc, #116]	; (7ab8 <_Z16coap_observe_rsph+0x1a0>)
    cbi.cbctx = (void *) &observe_info[observer_id].ack_seqno;
    7a42:	9406      	str	r4, [sp, #24]
    cbi.cb = observe_rx_ack;
    7a44:	9305      	str	r3, [sp, #20]
    coap_con_add(rsp.mid, &cbi);
    7a46:	88a8      	ldrh	r0, [r5, #4]
    7a48:	a905      	add	r1, sp, #20
    7a4a:	f7ff f91f 	bl	6c8c <_Z12coap_con_addtP18coap_ack_cb_info_t>
    if (pending_rsp) 
    7a4e:	4b11      	ldr	r3, [pc, #68]	; (7a94 <_Z16coap_observe_rsph+0x17c>)
    7a50:	6818      	ldr	r0, [r3, #0]
    7a52:	2800      	cmp	r0, #0
    7a54:	d008      	beq.n	7a68 <_Z16coap_observe_rsph+0x150>
        m_free(pending_rsp);
    7a56:	f000 fcab 	bl	83b0 <_Z6m_freeP4mbuf>
		dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    7a5a:	2396      	movs	r3, #150	; 0x96
    7a5c:	4a17      	ldr	r2, [pc, #92]	; (7abc <_Z16coap_observe_rsph+0x1a4>)
    7a5e:	33ff      	adds	r3, #255	; 0xff
    7a60:	4917      	ldr	r1, [pc, #92]	; (7ac0 <_Z16coap_observe_rsph+0x1a8>)
    7a62:	2007      	movs	r0, #7
    7a64:	f7fc fbd8 	bl	4218 <_Z4dlogiPKcz>
    pending_rsp = rsp.msg;
    7a68:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    copt_del_all((sl_co*)&(rsp.oh));
    7a6a:	a81c      	add	r0, sp, #112	; 0x70
    pending_rsp = rsp.msg;
    7a6c:	9302      	str	r3, [sp, #8]
    7a6e:	9a02      	ldr	r2, [sp, #8]
    7a70:	4b08      	ldr	r3, [pc, #32]	; (7a94 <_Z16coap_observe_rsph+0x17c>)
    return ERR_OK;
    7a72:	2400      	movs	r4, #0
    pending_rsp = rsp.msg;
    7a74:	601a      	str	r2, [r3, #0]
    copt_del_all((sl_co*)&(rsp.oh));
    7a76:	f7ff fe0f 	bl	7698 <_Z12copt_del_allP5sl_co>
	digitalWrite(MNIC_WAKEUP_PIN,LOW);
    7a7a:	2100      	movs	r1, #0
    7a7c:	2009      	movs	r0, #9
    7a7e:	f7fc f827 	bl	3ad0 <digitalWrite>
	delay(1);
    7a82:	2001      	movs	r0, #1
    7a84:	f7fa fe24 	bl	26d0 <delay>
	digitalWrite(MNIC_WAKEUP_PIN,HIGH);
    7a88:	2101      	movs	r1, #1
    7a8a:	2009      	movs	r0, #9
    7a8c:	f7fc f820 	bl	3ad0 <digitalWrite>
    return ERR_OK;
    7a90:	e757      	b.n	7942 <_Z16coap_observe_rsph+0x2a>
    7a92:	46c0      	nop			; (mov r8, r8)
    7a94:	20001984 	.word	0x20001984
    7a98:	00011678 	.word	0x00011678
    7a9c:	200018b4 	.word	0x200018b4
    7aa0:	000116c3 	.word	0x000116c3
    7aa4:	2000004a 	.word	0x2000004a
    7aa8:	000116dd 	.word	0x000116dd
    7aac:	000116f9 	.word	0x000116f9
    7ab0:	00011715 	.word	0x00011715
    7ab4:	00011759 	.word	0x00011759
    7ab8:	00007819 	.word	0x00007819
    7abc:	000117ab 	.word	0x000117ab
    7ac0:	0001173f 	.word	0x0001173f

00007ac4 <_Z10do_observev>:
{
    7ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	time_t  epoch      = get_rtc_epoch();
    7ac6:	f7fc fb0f 	bl	40e8 <_Z13get_rtc_epochv>
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    7aca:	2400      	movs	r4, #0
	time_t  epoch      = get_rtc_epoch();
    7acc:	0005      	movs	r5, r0
		if (observe_info[indx].obs_flag)
    7ace:	2034      	movs	r0, #52	; 0x34
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    7ad0:	4b18      	ldr	r3, [pc, #96]	; (7b34 <_Z10do_observev+0x70>)
    7ad2:	781f      	ldrb	r7, [r3, #0]
    7ad4:	42bc      	cmp	r4, r7
    7ad6:	da27      	bge.n	7b28 <_Z10do_observev+0x64>
		if (observe_info[indx].obs_flag)
    7ad8:	0003      	movs	r3, r0
    7ada:	4363      	muls	r3, r4
    7adc:	4a16      	ldr	r2, [pc, #88]	; (7b38 <_Z10do_observev+0x74>)
    7ade:	18d3      	adds	r3, r2, r3
    7ae0:	001a      	movs	r2, r3
    7ae2:	3230      	adds	r2, #48	; 0x30
    7ae4:	7812      	ldrb	r2, [r2, #0]
    7ae6:	2a00      	cmp	r2, #0
    7ae8:	d020      	beq.n	7b2c <_Z10do_observev+0x68>
			if (observe_info[indx].base_epoch == 0)
    7aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7aec:	2a00      	cmp	r2, #0
    7aee:	d100      	bne.n	7af2 <_Z10do_observev+0x2e>
				observe_info[indx].base_epoch = epoch;
    7af0:	625d      	str	r5, [r3, #36]	; 0x24
			if (epoch >= (observe_info[indx].base_epoch+observe_info[indx].frequency))
    7af2:	0003      	movs	r3, r0
    7af4:	4363      	muls	r3, r4
    7af6:	4a10      	ldr	r2, [pc, #64]	; (7b38 <_Z10do_observev+0x74>)
    7af8:	18d3      	adds	r3, r2, r3
    7afa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    7afc:	001e      	movs	r6, r3
    7afe:	468c      	mov	ip, r1
    7b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7b02:	3624      	adds	r6, #36	; 0x24
    7b04:	4494      	add	ip, r2
    7b06:	45ac      	cmp	ip, r5
    7b08:	d810      	bhi.n	7b2c <_Z10do_observev+0x68>
				dlog(LOG_DEBUG, "do_observe: epoch %x uri %s", observe_info[indx].base_epoch, observe_info[indx].obs_uri);
    7b0a:	490c      	ldr	r1, [pc, #48]	; (7b3c <_Z10do_observev+0x78>)
    7b0c:	2007      	movs	r0, #7
    7b0e:	f7fc fb83 	bl	4218 <_Z4dlogiPKcz>
				observe_info[indx].base_epoch = epoch;
    7b12:	6035      	str	r5, [r6, #0]
				coap_observe_rsp(indx);
    7b14:	0020      	movs	r0, r4
    7b16:	f7ff feff 	bl	7918 <_Z16coap_observe_rsph>
				int freeram = free_ram();
    7b1a:	f7fc fcaf 	bl	447c <_Z8free_ramv>
				dlog(LOG_DEBUG, "do_observe: Free Ram: %d", freeram);
    7b1e:	4908      	ldr	r1, [pc, #32]	; (7b40 <_Z10do_observev+0x7c>)
				int freeram = free_ram();
    7b20:	0002      	movs	r2, r0
				dlog(LOG_DEBUG, "do_observe: Free Ram: %d", freeram);
    7b22:	2007      	movs	r0, #7
    7b24:	f7fc fb78 	bl	4218 <_Z4dlogiPKcz>
} // do_observe
    7b28:	2001      	movs	r0, #1
    7b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    7b2c:	3401      	adds	r4, #1
    7b2e:	b2e4      	uxtb	r4, r4
    7b30:	e7d0      	b.n	7ad4 <_Z10do_observev+0x10>
    7b32:	46c0      	nop			; (mov r8, r8)
    7b34:	200018b0 	.word	0x200018b0
    7b38:	200018b4 	.word	0x200018b4
    7b3c:	00011643 	.word	0x00011643
    7b40:	0001165f 	.word	0x0001165f

00007b44 <_ZL8crsystemP12coap_msg_ctxS0_>:
}


// The "sys" dispatcher.
static error_t crsystem(struct coap_msg_ctx *req, struct coap_msg_ctx *rsp)
{
    7b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    struct optlv *o;
    void *it = NULL;
	
    /* No observes on system */
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7b46:	0006      	movs	r6, r0
    void *it = NULL;
    7b48:	2200      	movs	r2, #0
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7b4a:	364c      	adds	r6, #76	; 0x4c
{
    7b4c:	b087      	sub	sp, #28
    7b4e:	0005      	movs	r5, r0
    7b50:	000c      	movs	r4, r1
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7b52:	0030      	movs	r0, r6
    7b54:	2106      	movs	r1, #6
    void *it = NULL;
    7b56:	9203      	str	r2, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7b58:	f7ff fe02 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7b5c:	2800      	cmp	r0, #0
    7b5e:	d004      	beq.n	7b6a <_ZL8crsystemP12coap_msg_ctxS0_+0x26>
	{
        copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    7b60:	0020      	movs	r0, r4
    7b62:	2106      	movs	r1, #6
    7b64:	304c      	adds	r0, #76	; 0x4c
    7b66:	f7ff fe23 	bl	77b0 <_Z17copt_del_opt_typeP5sl_cot>
    }
    /* 
     * No URI path beyond /system, except /time and /stats is supported, so
     * reject if present. 
     */
    copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    7b6a:	aa03      	add	r2, sp, #12
    7b6c:	210b      	movs	r1, #11
    7b6e:	0030      	movs	r0, r6
    7b70:	f7ff fdf6 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	
    if ((o = copt_get_next_opt_type((const sl_co*) &(req->oh), COAP_OPTION_URI_PATH, &it)))
    7b74:	aa03      	add	r2, sp, #12
    7b76:	210b      	movs	r1, #11
    7b78:	0030      	movs	r0, r6
    7b7a:	f7ff fdf1 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7b7e:	1e07      	subs	r7, r0, #0
    7b80:	d100      	bne.n	7b84 <_ZL8crsystemP12coap_msg_ctxS0_+0x40>
    7b82:	e094      	b.n	7cae <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
	{
        if (!coap_opt_strcmp(o, S_TIME_URI))
    7b84:	4981      	ldr	r1, [pc, #516]	; (7d8c <_ZL8crsystemP12coap_msg_ctxS0_+0x248>)
    7b86:	f7ff f8c1 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
    7b8a:	9001      	str	r0, [sp, #4]
    7b8c:	2800      	cmp	r0, #0
    7b8e:	d000      	beq.n	7b92 <_ZL8crsystemP12coap_msg_ctxS0_+0x4e>
    7b90:	e07e      	b.n	7c90 <_ZL8crsystemP12coap_msg_ctxS0_+0x14c>
    7b92:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)))
    7b94:	0030      	movs	r0, r6
    7b96:	aa04      	add	r2, sp, #16
    7b98:	210b      	movs	r1, #11
    7b9a:	9304      	str	r3, [sp, #16]
    7b9c:	f7ff fde0 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7ba0:	1e06      	subs	r6, r0, #0
    7ba2:	d005      	beq.n	7bb0 <_ZL8crsystemP12coap_msg_ctxS0_+0x6c>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    7ba4:	2384      	movs	r3, #132	; 0x84
    7ba6:	70a3      	strb	r3, [r4, #2]
        rsp->plen = 0;
    7ba8:	9b01      	ldr	r3, [sp, #4]
    7baa:	6423      	str	r3, [r4, #64]	; 0x40
    return ERR_OK;
    7bac:	2500      	movs	r5, #0
    7bae:	e017      	b.n	7be0 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    if (req->code == COAP_REQUEST_GET)
    7bb0:	78ab      	ldrb	r3, [r5, #2]
    7bb2:	2b01      	cmp	r3, #1
    7bb4:	d124      	bne.n	7c00 <_ZL8crsystemP12coap_msg_ctxS0_+0xbc>
		now = get_rtc_epoch();
    7bb6:	f7fc fa97 	bl	40e8 <_Z13get_rtc_epochv>
    7bba:	0005      	movs	r5, r0
		dlog(LOG_DEBUG, "Epoch for GET of sys time: %08x", now);
    7bbc:	0002      	movs	r2, r0
    7bbe:	4974      	ldr	r1, [pc, #464]	; (7d90 <_ZL8crsystemP12coap_msg_ctxS0_+0x24c>)
    7bc0:	2007      	movs	r0, #7
    7bc2:	f7fc fb29 	bl	4218 <_Z4dlogiPKcz>
    7bc6:	ba2d      	rev	r5, r5
        d = m_append(rsp->msg, len);
    7bc8:	2104      	movs	r1, #4
    7bca:	6d20      	ldr	r0, [r4, #80]	; 0x50
        now = htonl(now);
    7bcc:	9505      	str	r5, [sp, #20]
        d = m_append(rsp->msg, len);
    7bce:	f000 fc21 	bl	8414 <_Z8m_appendP4mbufs>
        if (!d)
    7bd2:	2800      	cmp	r0, #0
    7bd4:	d107      	bne.n	7be6 <_ZL8crsystemP12coap_msg_ctxS0_+0xa2>
            return ERR_NO_MEM;
    7bd6:	2503      	movs	r5, #3
            coap_stats.no_mbufs++;
    7bd8:	4a6e      	ldr	r2, [pc, #440]	; (7d94 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    7bda:	6813      	ldr	r3, [r2, #0]
    7bdc:	3301      	adds	r3, #1
    7bde:	6013      	str	r3, [r2, #0]
    }

    rsp->plen = 0;

    return ERR_OK;
}
    7be0:	0028      	movs	r0, r5
    7be2:	b007      	add	sp, #28
    7be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(d, &now, len);
    7be6:	2504      	movs	r5, #4
    7be8:	a905      	add	r1, sp, #20
    7bea:	002a      	movs	r2, r5
    7bec:	f004 ff49 	bl	ca82 <memcpy>
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    7bf0:	0023      	movs	r3, r4
    7bf2:	222a      	movs	r2, #42	; 0x2a
    7bf4:	333c      	adds	r3, #60	; 0x3c
        rsp->plen = len;
    7bf6:	6425      	str	r5, [r4, #64]	; 0x40
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    7bf8:	701a      	strb	r2, [r3, #0]
        rsp->code = COAP_RSP_205_CONTENT;
    7bfa:	2345      	movs	r3, #69	; 0x45
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    7bfc:	70a3      	strb	r3, [r4, #2]
    7bfe:	e7d5      	b.n	7bac <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
	else if (req->code == COAP_REQUEST_PUT)
    7c00:	2b03      	cmp	r3, #3
    7c02:	d141      	bne.n	7c88 <_ZL8crsystemP12coap_msg_ctxS0_+0x144>
        m_adj(req->msg, req->hdrlen);
    7c04:	6969      	ldr	r1, [r5, #20]
    7c06:	6d28      	ldr	r0, [r5, #80]	; 0x50
    7c08:	f000 fc14 	bl	8434 <_Z5m_adjP4mbufi>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    7c0c:	6d2f      	ldr	r7, [r5, #80]	; 0x50
        if ((req->msg->m_pktlen == 0) || ((td->tl.u.rdt != crdt_time_abs) && (td->tl.u.rdt != crdt_time_delta)) || 
    7c0e:	883b      	ldrh	r3, [r7, #0]
    7c10:	2b00      	cmp	r3, #0
    7c12:	d006      	beq.n	7c22 <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    7c14:	793b      	ldrb	r3, [r7, #4]
    7c16:	1f9a      	subs	r2, r3, #6
    7c18:	2a01      	cmp	r2, #1
    7c1a:	d802      	bhi.n	7c22 <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    7c1c:	797a      	ldrb	r2, [r7, #5]
    7c1e:	2a08      	cmp	r2, #8
    7c20:	d001      	beq.n	7c26 <_ZL8crsystemP12coap_msg_ctxS0_+0xe2>
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    7c22:	2386      	movs	r3, #134	; 0x86
    7c24:	e7ea      	b.n	7bfc <_ZL8crsystemP12coap_msg_ctxS0_+0xb8>
    return ERR_OK;
    7c26:	0035      	movs	r5, r6
		else if (td->tl.u.rdt == crdt_time_abs)
    7c28:	2b06      	cmp	r3, #6
    7c2a:	d1d9      	bne.n	7be0 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    7c2c:	1d3a      	adds	r2, r7, #4
			ddump(LOG_DEBUG, "PUT /sys/time Payload", (void *)td, sizeof(coap_sys_time_data_t));
    7c2e:	3304      	adds	r3, #4
    7c30:	4959      	ldr	r1, [pc, #356]	; (7d98 <_ZL8crsystemP12coap_msg_ctxS0_+0x254>)
    7c32:	2007      	movs	r0, #7
    7c34:	f7fc fb12 	bl	425c <_Z5ddumpiPKcPKvi>
			epoch = (uint32_t) ntohl(td->sec);
    7c38:	21ff      	movs	r1, #255	; 0xff
    7c3a:	79fa      	ldrb	r2, [r7, #7]
    7c3c:	79bb      	ldrb	r3, [r7, #6]
    7c3e:	0212      	lsls	r2, r2, #8
    7c40:	431a      	orrs	r2, r3
    7c42:	7a3b      	ldrb	r3, [r7, #8]
    7c44:	0209      	lsls	r1, r1, #8
    7c46:	041b      	lsls	r3, r3, #16
    7c48:	431a      	orrs	r2, r3
    7c4a:	7a7b      	ldrb	r3, [r7, #9]
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    7c4c:	2007      	movs	r0, #7
			epoch = (uint32_t) ntohl(td->sec);
    7c4e:	061b      	lsls	r3, r3, #24
    7c50:	4313      	orrs	r3, r2
    7c52:	061a      	lsls	r2, r3, #24
    7c54:	0e1e      	lsrs	r6, r3, #24
    7c56:	4316      	orrs	r6, r2
    7c58:	0a1a      	lsrs	r2, r3, #8
    7c5a:	400a      	ands	r2, r1
    7c5c:	4316      	orrs	r6, r2
    7c5e:	22ff      	movs	r2, #255	; 0xff
    7c60:	021b      	lsls	r3, r3, #8
    7c62:	0412      	lsls	r2, r2, #16
    7c64:	4013      	ands	r3, r2
    7c66:	431e      	orrs	r6, r3
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    7c68:	0032      	movs	r2, r6
    7c6a:	494c      	ldr	r1, [pc, #304]	; (7d9c <_ZL8crsystemP12coap_msg_ctxS0_+0x258>)
    7c6c:	f7fc fad4 	bl	4218 <_Z4dlogiPKcz>
			rtc.setEpoch(epoch);
    7c70:	0031      	movs	r1, r6
    7c72:	484b      	ldr	r0, [pc, #300]	; (7da0 <_ZL8crsystemP12coap_msg_ctxS0_+0x25c>)
    7c74:	f7fe f966 	bl	5f44 <_ZN7RTCZero8setEpochEm>
			print_current_date();
    7c78:	f7fc fa7a 	bl	4170 <_Z18print_current_datev>
			print_current_time();
    7c7c:	f7fc fa3c 	bl	40f8 <_Z18print_current_timev>
			rsp->code = COAP_RSP_204_CHANGED;
    7c80:	2344      	movs	r3, #68	; 0x44
    7c82:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    7c84:	6425      	str	r5, [r4, #64]	; 0x40
    return ERR_OK;
    7c86:	e7ab      	b.n	7be0 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    7c88:	23a1      	movs	r3, #161	; 0xa1
        rsp->plen = 0;
    7c8a:	6420      	str	r0, [r4, #64]	; 0x40
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    7c8c:	70a3      	strb	r3, [r4, #2]
    7c8e:	e78d      	b.n	7bac <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
		else if (!coap_opt_strcmp(o, S_STAT_URI))
    7c90:	4944      	ldr	r1, [pc, #272]	; (7da4 <_ZL8crsystemP12coap_msg_ctxS0_+0x260>)
    7c92:	0038      	movs	r0, r7
    7c94:	f7ff f83a 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
    7c98:	2800      	cmp	r0, #0
    7c9a:	d108      	bne.n	7cae <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
    7c9c:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it))) {
    7c9e:	aa05      	add	r2, sp, #20
    7ca0:	210b      	movs	r1, #11
    7ca2:	0030      	movs	r0, r6
    7ca4:	9305      	str	r3, [sp, #20]
    7ca6:	f7ff fd5b 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7caa:	1e02      	subs	r2, r0, #0
    7cac:	d001      	beq.n	7cb2 <_ZL8crsystemP12coap_msg_ctxS0_+0x16e>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    7cae:	2384      	movs	r3, #132	; 0x84
    7cb0:	e04f      	b.n	7d52 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    7cb2:	0030      	movs	r0, r6
    7cb4:	210f      	movs	r1, #15
    7cb6:	f7ff fd53 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if (req->code == COAP_REQUEST_GET) {
    7cba:	78ab      	ldrb	r3, [r5, #2]
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    7cbc:	0006      	movs	r6, r0
    if (req->code == COAP_REQUEST_GET) {
    7cbe:	2b01      	cmp	r3, #1
    7cc0:	d151      	bne.n	7d66 <_ZL8crsystemP12coap_msg_ctxS0_+0x222>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    7cc2:	4939      	ldr	r1, [pc, #228]	; (7da8 <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    7cc4:	f7ff f822 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
    7cc8:	1e05      	subs	r5, r0, #0
    7cca:	d13b      	bne.n	7d44 <_ZL8crsystemP12coap_msg_ctxS0_+0x200>
    coap_sys_coap_stats_t *d = (coap_sys_coap_stats_t *) m_append(m, sizeof(coap_sys_coap_stats_t));
    7ccc:	2128      	movs	r1, #40	; 0x28
    7cce:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7cd0:	f000 fba0 	bl	8414 <_Z8m_appendP4mbufs>
    7cd4:	4b2f      	ldr	r3, [pc, #188]	; (7d94 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    if (!d) {
    7cd6:	2800      	cmp	r0, #0
    7cd8:	d114      	bne.n	7d04 <_ZL8crsystemP12coap_msg_ctxS0_+0x1c0>
        coap_stats.no_mbufs++;
    7cda:	681a      	ldr	r2, [r3, #0]
        return ERR_NO_MEM;
    7cdc:	3503      	adds	r5, #3
        coap_stats.no_mbufs++;
    7cde:	3201      	adds	r2, #1
    7ce0:	601a      	str	r2, [r3, #0]
        dlog(LOG_DEBUG, "GET (status %d) read %d bytes.", rc, len);
    7ce2:	2328      	movs	r3, #40	; 0x28
    7ce4:	002a      	movs	r2, r5
    7ce6:	4931      	ldr	r1, [pc, #196]	; (7dac <_ZL8crsystemP12coap_msg_ctxS0_+0x268>)
    7ce8:	2007      	movs	r0, #7
    7cea:	f7fc fa95 	bl	4218 <_Z4dlogiPKcz>
        if (!rc) {
    7cee:	2d00      	cmp	r5, #0
    7cf0:	d134      	bne.n	7d5c <_ZL8crsystemP12coap_msg_ctxS0_+0x218>
            rsp->plen = len;
    7cf2:	2328      	movs	r3, #40	; 0x28
    7cf4:	6423      	str	r3, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    7cf6:	0023      	movs	r3, r4
    7cf8:	222a      	movs	r2, #42	; 0x2a
    7cfa:	333c      	adds	r3, #60	; 0x3c
    7cfc:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    7cfe:	2345      	movs	r3, #69	; 0x45
    7d00:	70a3      	strb	r3, [r4, #2]
    7d02:	e76d      	b.n	7be0 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    d->tl.u.rdt = crdt_stat_coap;
    7d04:	2208      	movs	r2, #8
    7d06:	7002      	strb	r2, [r0, #0]
    d->tl.l = sizeof(coap_stats);
    7d08:	321c      	adds	r2, #28
    7d0a:	7042      	strb	r2, [r0, #1]
    7d0c:	681a      	ldr	r2, [r3, #0]
    7d0e:	ba12      	rev	r2, r2
    d->cs.no_mbufs = htonl(coap_stats.no_mbufs);
    7d10:	6042      	str	r2, [r0, #4]
    7d12:	685a      	ldr	r2, [r3, #4]
    7d14:	ba12      	rev	r2, r2
    d->cs.no_mem = htonl(coap_stats.no_mem);
    7d16:	6082      	str	r2, [r0, #8]
    7d18:	689a      	ldr	r2, [r3, #8]
    7d1a:	ba12      	rev	r2, r2
    d->cs.sensors_enabled = htonl(coap_stats.sensors_enabled);
    7d1c:	60c2      	str	r2, [r0, #12]
    7d1e:	68da      	ldr	r2, [r3, #12]
    7d20:	ba12      	rev	r2, r2
    d->cs.sensors_disabled = htonl(coap_stats.sensors_disabled);
    7d22:	6102      	str	r2, [r0, #16]
    7d24:	691a      	ldr	r2, [r3, #16]
    7d26:	ba12      	rev	r2, r2
    d->cs.err_hdlc_send = htonl(coap_stats.err_hdlc_send);
    7d28:	6142      	str	r2, [r0, #20]
    7d2a:	695a      	ldr	r2, [r3, #20]
    7d2c:	ba12      	rev	r2, r2
    d->cs.active_obs = htonl(coap_stats.active_obs);
    7d2e:	6182      	str	r2, [r0, #24]
    7d30:	699a      	ldr	r2, [r3, #24]
    7d32:	ba12      	rev	r2, r2
    d->cs.rx_success = htonl(coap_stats.rx_success);
    7d34:	61c2      	str	r2, [r0, #28]
    7d36:	69da      	ldr	r2, [r3, #28]
    7d38:	6a1b      	ldr	r3, [r3, #32]
    7d3a:	ba12      	rev	r2, r2
    7d3c:	ba1b      	rev	r3, r3
    d->cs.tx_success = htonl(coap_stats.tx_success);
    7d3e:	6202      	str	r2, [r0, #32]
    d->cs.nretries_exceeded = htonl(coap_stats.nretries_exceeded);
    7d40:	6243      	str	r3, [r0, #36]	; 0x24
    7d42:	e7ce      	b.n	7ce2 <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    7d44:	491a      	ldr	r1, [pc, #104]	; (7db0 <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    7d46:	0030      	movs	r0, r6
    7d48:	f7fe ffe0 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
    7d4c:	2800      	cmp	r0, #0
    7d4e:	d003      	beq.n	7d58 <_ZL8crsystemP12coap_msg_ctxS0_+0x214>
            rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    7d50:	23a1      	movs	r3, #161	; 0xa1
            rsp->code = COAP_RSP_404_NOT_FOUND;
    7d52:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    7d54:	2500      	movs	r5, #0
    7d56:	e795      	b.n	7c84 <_ZL8crsystemP12coap_msg_ctxS0_+0x140>
            rc = ERR_INVAL;
    7d58:	2504      	movs	r5, #4
    7d5a:	e7c2      	b.n	7ce2 <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    7d5c:	23a0      	movs	r3, #160	; 0xa0
            switch (rc) {
    7d5e:	2d04      	cmp	r5, #4
    7d60:	d1f7      	bne.n	7d52 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
                rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    7d62:	2386      	movs	r3, #134	; 0x86
    7d64:	e7f5      	b.n	7d52 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    } else if (req->code == COAP_REQUEST_PUT) {
    7d66:	2b03      	cmp	r3, #3
    7d68:	d1f2      	bne.n	7d50 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    7d6a:	490f      	ldr	r1, [pc, #60]	; (7da8 <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    7d6c:	f7fe ffce 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
    7d70:	2800      	cmp	r0, #0
    7d72:	d0ed      	beq.n	7d50 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    7d74:	490e      	ldr	r1, [pc, #56]	; (7db0 <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    7d76:	0030      	movs	r0, r6
    7d78:	f7fe ffc8 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
    7d7c:	2800      	cmp	r0, #0
    7d7e:	d1e7      	bne.n	7d50 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        dlog(LOG_DEBUG, "SET (status %d).", rc);
    7d80:	2204      	movs	r2, #4
    7d82:	490c      	ldr	r1, [pc, #48]	; (7db4 <_ZL8crsystemP12coap_msg_ctxS0_+0x270>)
    7d84:	3007      	adds	r0, #7
    7d86:	f7fc fa47 	bl	4218 <_Z4dlogiPKcz>
    7d8a:	e7ea      	b.n	7d62 <_ZL8crsystemP12coap_msg_ctxS0_+0x21e>
    7d8c:	00011837 	.word	0x00011837
    7d90:	0001183c 	.word	0x0001183c
    7d94:	200019bc 	.word	0x200019bc
    7d98:	0001185c 	.word	0x0001185c
    7d9c:	00011872 	.word	0x00011872
    7da0:	2000093d 	.word	0x2000093d
    7da4:	0001188d 	.word	0x0001188d
    7da8:	00011893 	.word	0x00011893
    7dac:	000118a4 	.word	0x000118a4
    7db0:	0001189c 	.word	0x0001189c
    7db4:	000118c3 	.word	0x000118c3

00007db8 <_ZL11crwellknownP12coap_msg_ctxS0_>:
{
    7db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    7dba:	4b45      	ldr	r3, [pc, #276]	; (7ed0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x118>)
{
    7dbc:	b087      	sub	sp, #28
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    7dbe:	681b      	ldr	r3, [r3, #0]
{
    7dc0:	000d      	movs	r5, r1
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    7dc2:	9303      	str	r3, [sp, #12]
    void *it = NULL;
    7dc4:	2300      	movs	r3, #0
    7dc6:	9305      	str	r3, [sp, #20]
    rsp->code = 0;  /* unknown yet - fill in below */
    7dc8:	708b      	strb	r3, [r1, #2]
    if (req->code == COAP_REQUEST_GET) {
    7dca:	7882      	ldrb	r2, [r0, #2]
    7dcc:	2a01      	cmp	r2, #1
    7dce:	d000      	beq.n	7dd2 <_ZL11crwellknownP12coap_msg_ctxS0_+0x1a>
    7dd0:	e079      	b.n	7ec6 <_ZL11crwellknownP12coap_msg_ctxS0_+0x10e>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    7dd2:	304c      	adds	r0, #76	; 0x4c
    7dd4:	aa05      	add	r2, sp, #20
    7dd6:	210b      	movs	r1, #11
    7dd8:	0004      	movs	r4, r0
    7dda:	f7ff fcc1 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    7dde:	2800      	cmp	r0, #0
    7de0:	d100      	bne.n	7de4 <_ZL11crwellknownP12coap_msg_ctxS0_+0x2c>
    7de2:	e073      	b.n	7ecc <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    7de4:	aa05      	add	r2, sp, #20
    7de6:	210b      	movs	r1, #11
    7de8:	0020      	movs	r0, r4
    7dea:	f7ff fcb9 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7dee:	2800      	cmp	r0, #0
    7df0:	d100      	bne.n	7df4 <_ZL11crwellknownP12coap_msg_ctxS0_+0x3c>
    7df2:	e06b      	b.n	7ecc <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            coap_opt_strcmp(op, "core")                                      ||
    7df4:	4937      	ldr	r1, [pc, #220]	; (7ed4 <_ZL11crwellknownP12coap_msg_ctxS0_+0x11c>)
    7df6:	f7fe ff89 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
                copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) ||
    7dfa:	2800      	cmp	r0, #0
    7dfc:	d166      	bne.n	7ecc <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) {
    7dfe:	aa05      	add	r2, sp, #20
    7e00:	210b      	movs	r1, #11
    7e02:	0020      	movs	r0, r4
    7e04:	f7ff fcac 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    7e08:	2800      	cmp	r0, #0
    7e0a:	d15f      	bne.n	7ecc <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
    7e0c:	2302      	movs	r3, #2
    7e0e:	4e32      	ldr	r6, [pc, #200]	; (7ed8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x120>)
    7e10:	9300      	str	r3, [sp, #0]
    7e12:	3618      	adds	r6, #24
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    7e14:	9b00      	ldr	r3, [sp, #0]
    7e16:	9a03      	ldr	r2, [sp, #12]
    7e18:	4293      	cmp	r3, r2
    7e1a:	da4a      	bge.n	7eb2 <_ZL11crwellknownP12coap_msg_ctxS0_+0xfa>
            len = strlen(cr->path) + 4;         /* adding </ > , */
    7e1c:	6830      	ldr	r0, [r6, #0]
    7e1e:	f005 ff62 	bl	dce6 <strlen>
    7e22:	0004      	movs	r4, r0
            if (cr->link) {
    7e24:	68b0      	ldr	r0, [r6, #8]
            len = strlen(cr->path) + 4;         /* adding </ > , */
    7e26:	1d23      	adds	r3, r4, #4
            if (cr->link) {
    7e28:	2800      	cmp	r0, #0
    7e2a:	d003      	beq.n	7e34 <_ZL11crwellknownP12coap_msg_ctxS0_+0x7c>
                len += strlen(cr->link) + 1;    /* ; */
    7e2c:	f005 ff5b 	bl	dce6 <strlen>
    7e30:	3405      	adds	r4, #5
    7e32:	1823      	adds	r3, r4, r0
    7e34:	9301      	str	r3, [sp, #4]
            ls = (char*) m_append(rsp->msg, len);
    7e36:	466b      	mov	r3, sp
    7e38:	6d28      	ldr	r0, [r5, #80]	; 0x50
    7e3a:	2104      	movs	r1, #4
    7e3c:	5e59      	ldrsh	r1, [r3, r1]
    7e3e:	f000 fae9 	bl	8414 <_Z8m_appendP4mbufs>
    7e42:	1e04      	subs	r4, r0, #0
            if (!ls) {
    7e44:	d107      	bne.n	7e56 <_ZL11crwellknownP12coap_msg_ctxS0_+0x9e>
                coap_stats.no_mbufs++;
    7e46:	4a25      	ldr	r2, [pc, #148]	; (7edc <_ZL11crwellknownP12coap_msg_ctxS0_+0x124>)
    7e48:	6813      	ldr	r3, [r2, #0]
    7e4a:	3301      	adds	r3, #1
    7e4c:	6013      	str	r3, [r2, #0]
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    7e4e:	23a0      	movs	r3, #160	; 0xa0
            rsp->code = COAP_RSP_404_NOT_FOUND;
    7e50:	70ab      	strb	r3, [r5, #2]
            return ERR_FAIL;
    7e52:	2063      	movs	r0, #99	; 0x63
    7e54:	e035      	b.n	7ec2 <_ZL11crwellknownP12coap_msg_ctxS0_+0x10a>
            memcpy(ls, "</", n);
    7e56:	2202      	movs	r2, #2
    7e58:	4921      	ldr	r1, [pc, #132]	; (7ee0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x128>)
    7e5a:	f004 fe12 	bl	ca82 <memcpy>
            m = strlen(cr->path);
    7e5e:	6837      	ldr	r7, [r6, #0]
    7e60:	0038      	movs	r0, r7
    7e62:	f005 ff40 	bl	dce6 <strlen>
    7e66:	9002      	str	r0, [sp, #8]
            memcpy(&(ls[n]), cr->path, m);
    7e68:	9a02      	ldr	r2, [sp, #8]
    7e6a:	1ca0      	adds	r0, r4, #2
    7e6c:	0039      	movs	r1, r7
    7e6e:	f004 fe08 	bl	ca82 <memcpy>
            ls[n++] = '>';
    7e72:	223e      	movs	r2, #62	; 0x3e
    7e74:	9b02      	ldr	r3, [sp, #8]
    7e76:	18e3      	adds	r3, r4, r3
    7e78:	709a      	strb	r2, [r3, #2]
            if (cr->link) {
    7e7a:	68b2      	ldr	r2, [r6, #8]
    7e7c:	2a00      	cmp	r2, #0
    7e7e:	d00c      	beq.n	7e9a <_ZL11crwellknownP12coap_msg_ctxS0_+0xe2>
                ls[n++] = ';';
    7e80:	223b      	movs	r2, #59	; 0x3b
    7e82:	70da      	strb	r2, [r3, #3]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    7e84:	68b7      	ldr	r7, [r6, #8]
    7e86:	0038      	movs	r0, r7
    7e88:	f005 ff2d 	bl	dce6 <strlen>
    7e8c:	0002      	movs	r2, r0
                ls[n++] = ';';
    7e8e:	9802      	ldr	r0, [sp, #8]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    7e90:	0039      	movs	r1, r7
                ls[n++] = ';';
    7e92:	3004      	adds	r0, #4
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    7e94:	1820      	adds	r0, r4, r0
    7e96:	f004 fdf4 	bl	ca82 <memcpy>
            ls[len-1] = ',';
    7e9a:	9b01      	ldr	r3, [sp, #4]
    7e9c:	360c      	adds	r6, #12
    7e9e:	18e4      	adds	r4, r4, r3
    7ea0:	232c      	movs	r3, #44	; 0x2c
    7ea2:	3c01      	subs	r4, #1
    7ea4:	7023      	strb	r3, [r4, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    7ea6:	3319      	adds	r3, #25
    7ea8:	70ab      	strb	r3, [r5, #2]
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    7eaa:	9b00      	ldr	r3, [sp, #0]
    7eac:	3301      	adds	r3, #1
    7eae:	9300      	str	r3, [sp, #0]
    7eb0:	e7b0      	b.n	7e14 <_ZL11crwellknownP12coap_msg_ctxS0_+0x5c>
        rsp->cf = COAP_CF_APPLICATION_LINK_FORMAT; /* application/link-format */
    7eb2:	002b      	movs	r3, r5
    7eb4:	2228      	movs	r2, #40	; 0x28
    7eb6:	333c      	adds	r3, #60	; 0x3c
    7eb8:	701a      	strb	r2, [r3, #0]
        rsp->plen = rsp->msg->m_pktlen;
    7eba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    7ebc:	881b      	ldrh	r3, [r3, #0]
    7ebe:	642b      	str	r3, [r5, #64]	; 0x40
    return ERR_OK;
    7ec0:	2000      	movs	r0, #0
}
    7ec2:	b007      	add	sp, #28
    7ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    7ec6:	22a1      	movs	r2, #161	; 0xa1
    7ec8:	708a      	strb	r2, [r1, #2]
    7eca:	e7f9      	b.n	7ec0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x108>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    7ecc:	2384      	movs	r3, #132	; 0x84
    7ece:	e7bf      	b.n	7e50 <_ZL11crwellknownP12coap_msg_ctxS0_+0x98>
    7ed0:	20001988 	.word	0x20001988
    7ed4:	0001182f 	.word	0x0001182f
    7ed8:	2000198c 	.word	0x2000198c
    7edc:	200019bc 	.word	0x200019bc
    7ee0:	00011834 	.word	0x00011834

00007ee4 <_ZL7crtitleP12coap_msg_ctxS0_>:
{
    7ee4:	b530      	push	{r4, r5, lr}
    if (req->code == COAP_REQUEST_GET)
    7ee6:	7883      	ldrb	r3, [r0, #2]
{
    7ee8:	b091      	sub	sp, #68	; 0x44
    7eea:	000c      	movs	r4, r1
    if (req->code == COAP_REQUEST_GET)
    7eec:	2b01      	cmp	r3, #1
    7eee:	d12b      	bne.n	7f48 <_ZL7crtitleP12coap_msg_ctxS0_+0x64>
		strcpy(id, COAP_SERVER_VERSION_STRING);
    7ef0:	4916      	ldr	r1, [pc, #88]	; (7f4c <_ZL7crtitleP12coap_msg_ctxS0_+0x68>)
    7ef2:	4668      	mov	r0, sp
    7ef4:	f005 feef 	bl	dcd6 <strcpy>
		strcat(id, COAP_SERVER_VERSION_NUMBER);
    7ef8:	4915      	ldr	r1, [pc, #84]	; (7f50 <_ZL7crtitleP12coap_msg_ctxS0_+0x6c>)
    7efa:	4668      	mov	r0, sp
    7efc:	f005 fed4 	bl	dca8 <strcat>
        d = (char*) m_append(rsp->msg, strlen(id));
    7f00:	4668      	mov	r0, sp
    7f02:	f005 fef0 	bl	dce6 <strlen>
    7f06:	b201      	sxth	r1, r0
    7f08:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7f0a:	f000 fa83 	bl	8414 <_Z8m_appendP4mbufs>
    7f0e:	1e05      	subs	r5, r0, #0
        if (!d)
    7f10:	d108      	bne.n	7f24 <_ZL7crtitleP12coap_msg_ctxS0_+0x40>
            coap_stats.no_mbufs++;
    7f12:	4a10      	ldr	r2, [pc, #64]	; (7f54 <_ZL7crtitleP12coap_msg_ctxS0_+0x70>)
    7f14:	6813      	ldr	r3, [r2, #0]
    7f16:	3301      	adds	r3, #1
    7f18:	6013      	str	r3, [r2, #0]
            rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    7f1a:	23a0      	movs	r3, #160	; 0xa0
}
    7f1c:	2000      	movs	r0, #0
        rsp->code = COAP_RSP_403_FORBIDDEN;
    7f1e:	70a3      	strb	r3, [r4, #2]
}
    7f20:	b011      	add	sp, #68	; 0x44
    7f22:	bd30      	pop	{r4, r5, pc}
            memcpy(d, id, strlen(id));
    7f24:	4668      	mov	r0, sp
    7f26:	f005 fede 	bl	dce6 <strlen>
    7f2a:	4669      	mov	r1, sp
    7f2c:	0002      	movs	r2, r0
    7f2e:	0028      	movs	r0, r5
    7f30:	f004 fda7 	bl	ca82 <memcpy>
            rsp->plen = strlen(id);
    7f34:	4668      	mov	r0, sp
    7f36:	f005 fed6 	bl	dce6 <strlen>
            rsp->cf = COAP_CF_TEXT_PLAIN;
    7f3a:	0023      	movs	r3, r4
    7f3c:	2200      	movs	r2, #0
    7f3e:	333c      	adds	r3, #60	; 0x3c
            rsp->plen = strlen(id);
    7f40:	6420      	str	r0, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_TEXT_PLAIN;
    7f42:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    7f44:	2345      	movs	r3, #69	; 0x45
    7f46:	e7e9      	b.n	7f1c <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
        rsp->code = COAP_RSP_403_FORBIDDEN;
    7f48:	2383      	movs	r3, #131	; 0x83
    7f4a:	e7e7      	b.n	7f1c <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
    7f4c:	00010e1f 	.word	0x00010e1f
    7f50:	00010e3d 	.word	0x00010e3d
    7f54:	200019bc 	.word	0x200019bc

00007f58 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>:
        return ERR_NO_MEM;
    7f58:	2303      	movs	r3, #3
{
    7f5a:	b530      	push	{r4, r5, lr}
    if (coap_reg_size < COAP_MAX_CBR)
    7f5c:	4c07      	ldr	r4, [pc, #28]	; (7f7c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x24>)
    7f5e:	6825      	ldr	r5, [r4, #0]
    7f60:	429d      	cmp	r5, r3
    7f62:	dc09      	bgt.n	7f78 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x20>
        idx = coap_reg_size++;    
    7f64:	1c6b      	adds	r3, r5, #1
    7f66:	6023      	str	r3, [r4, #0]
    coap_registry[idx].path = path;
    7f68:	240c      	movs	r4, #12
    7f6a:	436c      	muls	r4, r5
    7f6c:	4b04      	ldr	r3, [pc, #16]	; (7f80 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x28>)
    7f6e:	50e0      	str	r0, [r4, r3]
    coap_registry[idx].cb = cbfunc;
    7f70:	191b      	adds	r3, r3, r4
    7f72:	6059      	str	r1, [r3, #4]
    coap_registry[idx].link = corelink;
    7f74:	609a      	str	r2, [r3, #8]
    return ERR_OK;
    7f76:	2300      	movs	r3, #0
}
    7f78:	0018      	movs	r0, r3
    7f7a:	bd30      	pop	{r4, r5, pc}
    7f7c:	20001988 	.word	0x20001988
    7f80:	2000198c 	.word	0x2000198c

00007f84 <_Z18coap_registry_initv>:
{
    7f84:	b510      	push	{r4, lr}
	coap_reg_size = 0;
    7f86:	2400      	movs	r4, #0
    7f88:	4b0d      	ldr	r3, [pc, #52]	; (7fc0 <_Z18coap_registry_initv+0x3c>)
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    7f8a:	4a0e      	ldr	r2, [pc, #56]	; (7fc4 <_Z18coap_registry_initv+0x40>)
    7f8c:	490e      	ldr	r1, [pc, #56]	; (7fc8 <_Z18coap_registry_initv+0x44>)
    7f8e:	480f      	ldr	r0, [pc, #60]	; (7fcc <_Z18coap_registry_initv+0x48>)
	coap_reg_size = 0;
    7f90:	601c      	str	r4, [r3, #0]
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    7f92:	f7ff ffe1 	bl	7f58 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(".well-known", crwellknown, NULL);
    7f96:	0022      	movs	r2, r4
    7f98:	490d      	ldr	r1, [pc, #52]	; (7fd0 <_Z18coap_registry_initv+0x4c>)
    7f9a:	480e      	ldr	r0, [pc, #56]	; (7fd4 <_Z18coap_registry_initv+0x50>)
    7f9c:	f7ff ffdc 	bl	7f58 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(S_URI_SYSTEM, crsystem, CLA_SYSTEM);
    7fa0:	4a0d      	ldr	r2, [pc, #52]	; (7fd8 <_Z18coap_registry_initv+0x54>)
    7fa2:	490e      	ldr	r1, [pc, #56]	; (7fdc <_Z18coap_registry_initv+0x58>)
    7fa4:	480e      	ldr	r0, [pc, #56]	; (7fe0 <_Z18coap_registry_initv+0x5c>)
    7fa6:	f7ff ffd7 	bl	7f58 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
	if (is_sapi == 1)
    7faa:	4b0e      	ldr	r3, [pc, #56]	; (7fe4 <_Z18coap_registry_initv+0x60>)
    7fac:	4a0e      	ldr	r2, [pc, #56]	; (7fe8 <_Z18coap_registry_initv+0x64>)
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	480e      	ldr	r0, [pc, #56]	; (7fec <_Z18coap_registry_initv+0x68>)
		(void)coap_uri_register(classifier, crsapi, CLA_ARDUINO);
    7fb2:	490f      	ldr	r1, [pc, #60]	; (7ff0 <_Z18coap_registry_initv+0x6c>)
	if (is_sapi == 1)
    7fb4:	2b01      	cmp	r3, #1
    7fb6:	d000      	beq.n	7fba <_Z18coap_registry_initv+0x36>
		(void)coap_uri_register(classifier, crarduino, CLA_ARDUINO);
    7fb8:	490e      	ldr	r1, [pc, #56]	; (7ff4 <_Z18coap_registry_initv+0x70>)
    7fba:	f7ff ffcd 	bl	7f58 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
}
    7fbe:	bd10      	pop	{r4, pc}
    7fc0:	20001988 	.word	0x20001988
    7fc4:	000117bc 	.word	0x000117bc
    7fc8:	00007ee5 	.word	0x00007ee5
    7fcc:	0001110a 	.word	0x0001110a
    7fd0:	00007db9 	.word	0x00007db9
    7fd4:	000117ce 	.word	0x000117ce
    7fd8:	000117da 	.word	0x000117da
    7fdc:	00007b45 	.word	0x00007b45
    7fe0:	000117ff 	.word	0x000117ff
    7fe4:	2000004a 	.word	0x2000004a
    7fe8:	00011803 	.word	0x00011803
    7fec:	200000a0 	.word	0x200000a0
    7ff0:	0000489d 	.word	0x0000489d
    7ff4:	0000494d 	.word	0x0000494d

00007ff8 <_Z15coap_s_uri_procP12coap_msg_ctxS0_>:
{
    7ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, NULL)) == NULL) 
    7ffa:	2200      	movs	r2, #0
{
    7ffc:	0006      	movs	r6, r0
    7ffe:	000c      	movs	r4, r1
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, NULL)) == NULL) 
    8000:	304c      	adds	r0, #76	; 0x4c
    8002:	210b      	movs	r1, #11
    8004:	f7ff fbac 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    8008:	1e07      	subs	r7, r0, #0
    800a:	d010      	beq.n	802e <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x36>
    800c:	2500      	movs	r5, #0
            if (!coap_opt_strcmp(op, coap_registry[i].path)) 
    800e:	230c      	movs	r3, #12
    8010:	436b      	muls	r3, r5
    8012:	4a1a      	ldr	r2, [pc, #104]	; (807c <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x84>)
    8014:	0038      	movs	r0, r7
    8016:	58d1      	ldr	r1, [r2, r3]
    8018:	f7fe fe78 	bl	6d0c <_Z15coap_opt_strcmpPK5optlvPKc>
    801c:	2800      	cmp	r0, #0
    801e:	d007      	beq.n	8030 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x38>
        for (i = 0; i < rs; i++) 
    8020:	3501      	adds	r5, #1
    8022:	2d04      	cmp	r5, #4
    8024:	d1f3      	bne.n	800e <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x16>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    8026:	2384      	movs	r3, #132	; 0x84
    8028:	e00d      	b.n	8046 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x4e>
        rsp->type = COAP_T_NCONF_VAL;
    802a:	2301      	movs	r3, #1
    802c:	e023      	b.n	8076 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x7e>
        i = 0;
    802e:	0005      	movs	r5, r0
    rc = coap_registry[i].cb(req, rsp);
    8030:	230c      	movs	r3, #12
    8032:	435d      	muls	r5, r3
    8034:	4b11      	ldr	r3, [pc, #68]	; (807c <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x84>)
    8036:	0021      	movs	r1, r4
    8038:	195d      	adds	r5, r3, r5
    803a:	686b      	ldr	r3, [r5, #4]
    803c:	0030      	movs	r0, r6
    803e:	4798      	blx	r3
    if (rc != ERR_OK) 
    8040:	2800      	cmp	r0, #0
    8042:	d001      	beq.n	8048 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x50>
        rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    8044:	23a0      	movs	r3, #160	; 0xa0
    8046:	70a3      	strb	r3, [r4, #2]
    op = copt_get_next_opt_type((const sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE, NULL);
    8048:	0025      	movs	r5, r4
    804a:	354c      	adds	r5, #76	; 0x4c
    804c:	2200      	movs	r2, #0
    804e:	2106      	movs	r1, #6
    8050:	0028      	movs	r0, r5
    8052:	f7ff fb85 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if ((COAP_CLASS(rsp->code) != 2) || (op == NULL)) 
    8056:	78a3      	ldrb	r3, [r4, #2]
    8058:	095b      	lsrs	r3, r3, #5
    805a:	2b02      	cmp	r3, #2
    805c:	d101      	bne.n	8062 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x6a>
    805e:	2800      	cmp	r0, #0
    8060:	d105      	bne.n	806e <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x76>
        (void)copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    8062:	2106      	movs	r1, #6
    8064:	0028      	movs	r0, r5
    8066:	f7ff fba3 	bl	77b0 <_Z17copt_del_opt_typeP5sl_cot>
        rsp->final = 1;
    806a:	2301      	movs	r3, #1
    806c:	64a3      	str	r3, [r4, #72]	; 0x48
    if (req->type == COAP_T_CONF_VAL) 
    806e:	7833      	ldrb	r3, [r6, #0]
    8070:	2b00      	cmp	r3, #0
    8072:	d1da      	bne.n	802a <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x32>
        rsp->type = COAP_T_ACK_VAL;
    8074:	3302      	adds	r3, #2
}
    8076:	2000      	movs	r0, #0
        rsp->type = COAP_T_NCONF_VAL;
    8078:	7023      	strb	r3, [r4, #0]
}
    807a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    807c:	2000198c 	.word	0x2000198c

00008080 <_Z24coap_put_ic_reboot_eventv>:
 *
 * Given that there are HDLC retries, we're not going to attempt CoAP retries.
 * Could be added later if required.
 */
error_t coap_put_ic_reboot_event(void)
{
    8080:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *req;
	uint8_t     *ptr;

	/* Allocate request buffer */
	MGETHDR(req);
    8082:	f000 f96b 	bl	835c <_Z5m_getv>
    8086:	1e04      	subs	r4, r0, #0
	if (!req) 
    8088:	d105      	bne.n	8096 <_Z24coap_put_ic_reboot_eventv+0x16>
	{
		coap_stats.no_mbufs++;
		return ERR_NO_MEM;
    808a:	2003      	movs	r0, #3
		coap_stats.no_mbufs++;
    808c:	4a11      	ldr	r2, [pc, #68]	; (80d4 <_Z24coap_put_ic_reboot_eventv+0x54>)
    808e:	6813      	ldr	r3, [r2, #0]
    8090:	3301      	adds	r3, #1
    8092:	6013      	str	r3, [r2, #0]
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
	delay(1);
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);

	return ERR_OK;
    8094:	bd70      	pop	{r4, r5, r6, pc}
	ptr = (uint8_t *)m_append(req, sizeof(rbtput));
    8096:	2114      	movs	r1, #20
    8098:	f000 f9bc 	bl	8414 <_Z8m_appendP4mbufs>
	memcpy(ptr, rbtput, sizeof(rbtput));
    809c:	2214      	movs	r2, #20
    809e:	490e      	ldr	r1, [pc, #56]	; (80d8 <_Z24coap_put_ic_reboot_eventv+0x58>)
    80a0:	f004 fcef 	bl	ca82 <memcpy>
	if (pending_rsp)
    80a4:	4d0d      	ldr	r5, [pc, #52]	; (80dc <_Z24coap_put_ic_reboot_eventv+0x5c>)
    80a6:	6828      	ldr	r0, [r5, #0]
    80a8:	2800      	cmp	r0, #0
    80aa:	d001      	beq.n	80b0 <_Z24coap_put_ic_reboot_eventv+0x30>
		m_free(pending_rsp);
    80ac:	f000 f980 	bl	83b0 <_Z6m_freeP4mbuf>
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    80b0:	490b      	ldr	r1, [pc, #44]	; (80e0 <_Z24coap_put_ic_reboot_eventv+0x60>)
    80b2:	2007      	movs	r0, #7
	pending_rsp = req;
    80b4:	602c      	str	r4, [r5, #0]
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    80b6:	f7fc f8af 	bl	4218 <_Z4dlogiPKcz>
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
    80ba:	2100      	movs	r1, #0
    80bc:	2009      	movs	r0, #9
    80be:	f7fb fd07 	bl	3ad0 <digitalWrite>
	delay(1);
    80c2:	2001      	movs	r0, #1
    80c4:	f7fa fb04 	bl	26d0 <delay>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    80c8:	2009      	movs	r0, #9
    80ca:	2101      	movs	r1, #1
    80cc:	f7fb fd00 	bl	3ad0 <digitalWrite>
	return ERR_OK;
    80d0:	2000      	movs	r0, #0
    80d2:	e7df      	b.n	8094 <_Z24coap_put_ic_reboot_eventv+0x14>
    80d4:	200019bc 	.word	0x200019bc
    80d8:	000118f0 	.word	0x000118f0
    80dc:	20001984 	.word	0x20001984
    80e0:	000118d4 	.word	0x000118d4

000080e4 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>:
 */


// CoAP Server initialization
void coap_s_init(HardwareSerial *pSerial, uint32_t max_age, uint32_t uart_timeout_ms, uint32_t max_hdlc_payload_size, const char *uri_rsrc_name, ObsFuncPtr pObsFuncPtr)
{
    80e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80e6:	000f      	movs	r7, r1
    80e8:	0015      	movs	r5, r2
    80ea:	001e      	movs	r6, r3
    80ec:	0004      	movs	r4, r0
	int res;
	
	// Initialize CoAP Server registry
	coap_registry_init();
    80ee:	f7ff ff49 	bl	7f84 <_Z18coap_registry_initv>

	// Set Max-Age: CoAP Server Response Option 14
	coap_set_max_age(max_age);
    80f2:	0038      	movs	r0, r7
    80f4:	f7ff f99a 	bl	742c <_Z16coap_set_max_agem>
	
	// Set the URI used for obtaining token etc in CoAP Observe response msg
	set_observer(uri_rsrc_name, pObsFuncPtr);
    80f8:	9907      	ldr	r1, [sp, #28]
    80fa:	9806      	ldr	r0, [sp, #24]
    80fc:	f7ff fbbe 	bl	787c <_Z12set_observerPKcPF7error_eP4mbufPhhE>

	// Open the HDLC connection
	res = hdlcs_open(pSerial, uart_timeout_ms, max_hdlc_payload_size);
    8100:	0032      	movs	r2, r6
    8102:	0029      	movs	r1, r5
    8104:	0020      	movs	r0, r4
    8106:	f000 f9eb 	bl	84e0 <_Z10hdlcs_openP14HardwareSerialmm>
	if (res) 
    810a:	2800      	cmp	r0, #0
    810c:	d003      	beq.n	8116 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x32>
	{
		dlog(LOG_ERR, "HDLC initialization failed!");
    810e:	4902      	ldr	r1, [pc, #8]	; (8118 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x34>)
    8110:	2003      	movs	r0, #3
    8112:	f7fc f881 	bl	4218 <_Z4dlogiPKcz>
	}
	
	// That's all folks!
} // coap_s_init()
    8116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8118:	00011959 	.word	0x00011959

0000811c <_Z11coap_s_procP4mbuf>:
 * Build a response PDU based on the RSP context, and return the mbuf.
 */
mbuf_ptr_t coap_s_proc( mbuf_ptr_t m )
{
    struct coap_msg_ctx cc, rcc;
    void *clt = NULL;   /* Not used on sensor, 1 HDLC connection. */
    811c:	2300      	movs	r3, #0
{
    811e:	b5f0      	push	{r4, r5, r6, r7, lr}
    8120:	b0b1      	sub	sp, #196	; 0xc4
    8122:	9003      	str	r0, [sp, #12]
    void *clt = NULL;   /* Not used on sensor, 1 HDLC connection. */
    8124:	9305      	str	r3, [sp, #20]
    uint8_t code;
    char *pstr;
    
    /* Allocate response buffer */
    struct mbuf *r = NULL;
    r = m_get();
    8126:	f000 f919 	bl	835c <_Z5m_getv>
    812a:	1e06      	subs	r6, r0, #0
    if (r == NULL)
    812c:	d029      	beq.n	8182 <_Z11coap_s_procP4mbuf+0x66>
    {
	    goto done;
    }

    /* Parse incoming message */
    memset(&cc, 0, sizeof(cc));
    812e:	ac06      	add	r4, sp, #24
    8130:	2254      	movs	r2, #84	; 0x54
    8132:	2100      	movs	r1, #0
    8134:	0020      	movs	r0, r4
    8136:	f004 fcbf 	bl	cab8 <memset>
    copt_init((sl_co*)&(cc.oh));
    memset(&rcc, 0, sizeof(rcc));
    813a:	ad1b      	add	r5, sp, #108	; 0x6c
    copt_init((sl_co*)&(cc.oh));
    813c:	a819      	add	r0, sp, #100	; 0x64
    813e:	f7ff fa99 	bl	7674 <_Z9copt_initP5sl_co>
    memset(&rcc, 0, sizeof(rcc));
    8142:	2254      	movs	r2, #84	; 0x54
    8144:	2100      	movs	r1, #0
    8146:	0028      	movs	r0, r5
    8148:	f004 fcb6 	bl	cab8 <memset>
    copt_init((sl_co*)&(rcc.oh));
    814c:	a82e      	add	r0, sp, #184	; 0xb8
    814e:	f7ff fa91 	bl	7674 <_Z9copt_initP5sl_co>
    rc = coap_msg_parse(&cc, m, &code);
    8152:	230b      	movs	r3, #11
    8154:	aa02      	add	r2, sp, #8
    8156:	189b      	adds	r3, r3, r2
    8158:	001a      	movs	r2, r3
    815a:	9903      	ldr	r1, [sp, #12]
    815c:	0020      	movs	r0, r4
    815e:	f7fe ff89 	bl	7074 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh>
    8162:	1e07      	subs	r7, r0, #0

    if (rc == ERR_OK)
    8164:	d000      	beq.n	8168 <_Z11coap_s_procP4mbuf+0x4c>
    8166:	e07b      	b.n	8260 <_Z11coap_s_procP4mbuf+0x144>
	{
        if (cc.type == COAP_T_ACK_VAL)
    8168:	7823      	ldrb	r3, [r4, #0]
    816a:	2b02      	cmp	r3, #2
    816c:	d11f      	bne.n	81ae <_Z11coap_s_procP4mbuf+0x92>
		{
            /*
             * TODO: Assuming it's not a piggy-backed ACK for now.
             */
            rc = coap_ack_rx(cc.mid, NULL);
    816e:	0039      	movs	r1, r7
    8170:	88a0      	ldrh	r0, [r4, #4]
    8172:	f7fe fda9 	bl	6cc8 <_Z11coap_ack_rxtP4mbuf>
            dlog(LOG_INFO, "ACK for mid: 0x%x received, lookup returned %d", cc.mid, rc);
    8176:	88a2      	ldrh	r2, [r4, #4]
            rc = coap_ack_rx(cc.mid, NULL);
    8178:	0003      	movs	r3, r0
            dlog(LOG_INFO, "ACK for mid: 0x%x received, lookup returned %d", cc.mid, rc);
    817a:	4953      	ldr	r1, [pc, #332]	; (82c8 <_Z11coap_s_procP4mbuf+0x1ac>)
    817c:	2006      	movs	r0, #6
    817e:	f7fc f84b 	bl	4218 <_Z4dlogiPKcz>
			goto done;
        }
    }

done:
    if (cc.msg)
    8182:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8184:	9303      	str	r3, [sp, #12]
    8186:	2b00      	cmp	r3, #0
    8188:	d008      	beq.n	819c <_Z11coap_s_procP4mbuf+0x80>
	{
		dlog(LOG_DEBUG, "coap_s_proc: Free cc mbuf");
    818a:	4950      	ldr	r1, [pc, #320]	; (82cc <_Z11coap_s_procP4mbuf+0x1b0>)
    818c:	2007      	movs	r0, #7
    818e:	f7fc f843 	bl	4218 <_Z4dlogiPKcz>
        m_free(cc.msg);
    8192:	981a      	ldr	r0, [sp, #104]	; 0x68
    8194:	f000 f90c 	bl	83b0 <_Z6m_freeP4mbuf>
        cc.msg = NULL;
    8198:	2300      	movs	r3, #0
    819a:	931a      	str	r3, [sp, #104]	; 0x68
    }
    copt_del_all((sl_co*)&(cc.oh));
    819c:	a819      	add	r0, sp, #100	; 0x64
    819e:	f7ff fa7b 	bl	7698 <_Z12copt_del_allP5sl_co>
    copt_del_all((sl_co*)&(rcc.oh));
    81a2:	a82e      	add	r0, sp, #184	; 0xb8
    81a4:	f7ff fa78 	bl	7698 <_Z12copt_del_allP5sl_co>
    return r;
	
}
    81a8:	0030      	movs	r0, r6
    81aa:	b031      	add	sp, #196	; 0xc4
    81ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        coap_init_rsp(&cc, &rcc, r);
    81ae:	0032      	movs	r2, r6
    81b0:	0029      	movs	r1, r5
    81b2:	0020      	movs	r0, r4
    81b4:	f7ff f820 	bl	71f8 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>
        if (cc.code == COAP_EMPTY_MESSAGE)
    81b8:	78a3      	ldrb	r3, [r4, #2]
    81ba:	2b00      	cmp	r3, #0
    81bc:	d128      	bne.n	8210 <_Z11coap_s_procP4mbuf+0xf4>
            rcc.plen = 0;
    81be:	642b      	str	r3, [r5, #64]	; 0x40
            if (cc.type == COAP_T_CONF_VAL)
    81c0:	7823      	ldrb	r3, [r4, #0]
    81c2:	2b00      	cmp	r3, #0
    81c4:	d101      	bne.n	81ca <_Z11coap_s_procP4mbuf+0xae>
                rcc.type = COAP_T_RESET_VAL;
    81c6:	3303      	adds	r3, #3
    81c8:	702b      	strb	r3, [r5, #0]
        pstr = coap_pathstr(&cc);
    81ca:	0020      	movs	r0, r4
    81cc:	f7fe fdb0 	bl	6d30 <_Z12coap_pathstrPK12coap_msg_ctx>
        if (!rcc.final && copt_get_next_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE, NULL))
    81d0:	6caa      	ldr	r2, [r5, #72]	; 0x48
        pstr = coap_pathstr(&cc);
    81d2:	0007      	movs	r7, r0
        if (!rcc.final && copt_get_next_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE, NULL))
    81d4:	2a00      	cmp	r2, #0
    81d6:	d105      	bne.n	81e4 <_Z11coap_s_procP4mbuf+0xc8>
    81d8:	2106      	movs	r1, #6
    81da:	a82e      	add	r0, sp, #184	; 0xb8
    81dc:	f7ff fac0 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    81e0:	2800      	cmp	r0, #0
    81e2:	d15f      	bne.n	82a4 <_Z11coap_s_procP4mbuf+0x188>
        } else if ((op = copt_get_next_opt_type((sl_co*)&(cc.oh), COAP_OPTION_OBSERVE, NULL)) && 
    81e4:	2200      	movs	r2, #0
    81e6:	2106      	movs	r1, #6
    81e8:	a819      	add	r0, sp, #100	; 0x64
    81ea:	f7ff fab9 	bl	7760 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    81ee:	2800      	cmp	r0, #0
    81f0:	d023      	beq.n	823a <_Z11coap_s_procP4mbuf+0x11e>
				   (co_uint32_n2h(op) == COAP_OBS_DEREG))
    81f2:	f7fe fec1 	bl	6f78 <_Z13co_uint32_n2hPK5optlv>
        } else if ((op = copt_get_next_opt_type((sl_co*)&(cc.oh), COAP_OPTION_OBSERVE, NULL)) && 
    81f6:	2801      	cmp	r0, #1
    81f8:	d11f      	bne.n	823a <_Z11coap_s_procP4mbuf+0x11e>
            if (disable_obs(pstr, &cc, &clt, 0) == ERR_OK)
    81fa:	2300      	movs	r3, #0
    81fc:	aa05      	add	r2, sp, #20
    81fe:	0021      	movs	r1, r4
    8200:	0038      	movs	r0, r7
    8202:	f7ff f9e9 	bl	75d8 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>
    8206:	2800      	cmp	r0, #0
    8208:	d117      	bne.n	823a <_Z11coap_s_procP4mbuf+0x11e>
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    820a:	003a      	movs	r2, r7
    820c:	4930      	ldr	r1, [pc, #192]	; (82d0 <_Z11coap_s_procP4mbuf+0x1b4>)
    820e:	e058      	b.n	82c2 <_Z11coap_s_procP4mbuf+0x1a6>
            if (coap_s_uri_proc(&cc, &rcc) != ERR_OK)
    8210:	0029      	movs	r1, r5
    8212:	0020      	movs	r0, r4
    8214:	f7ff fef0 	bl	7ff8 <_Z15coap_s_uri_procP12coap_msg_ctxS0_>
    8218:	2800      	cmp	r0, #0
    821a:	d0d6      	beq.n	81ca <_Z11coap_s_procP4mbuf+0xae>
                rcc.code = COAP_RSP_500_INTERNAL_ERROR;
    821c:	23a0      	movs	r3, #160	; 0xa0
                rcc.plen = 0;
    821e:	642f      	str	r7, [r5, #64]	; 0x40
                rcc.code = COAP_RSP_500_INTERNAL_ERROR;
    8220:	70ab      	strb	r3, [r5, #2]
    8222:	e7d2      	b.n	81ca <_Z11coap_s_procP4mbuf+0xae>
                (void)copt_del_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE);
    8224:	2106      	movs	r1, #6
    8226:	a82e      	add	r0, sp, #184	; 0xb8
    8228:	f7ff fac2 	bl	77b0 <_Z17copt_del_opt_typeP5sl_cot>
                rcc.final = 1;
    822c:	2301      	movs	r3, #1
                dlog(LOG_ERR, "Failed to enabled observe for URI: %s", pstr);
    822e:	003a      	movs	r2, r7
    8230:	2003      	movs	r0, #3
    8232:	4928      	ldr	r1, [pc, #160]	; (82d4 <_Z11coap_s_procP4mbuf+0x1b8>)
                rcc.final = 1;
    8234:	64ab      	str	r3, [r5, #72]	; 0x48
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    8236:	f7fb ffef 	bl	4218 <_Z4dlogiPKcz>
        if (coap_msg_response(&rcc) != ERR_OK)
    823a:	a81b      	add	r0, sp, #108	; 0x6c
    823c:	f7ff f81c 	bl	7278 <_Z17coap_msg_responseP12coap_msg_ctx>
    8240:	2800      	cmp	r0, #0
    8242:	d001      	beq.n	8248 <_Z11coap_s_procP4mbuf+0x12c>
				dlog(LOG_DEBUG, "Error msg rsp: freeing mbuf");
    8244:	4924      	ldr	r1, [pc, #144]	; (82d8 <_Z11coap_s_procP4mbuf+0x1bc>)
    8246:	e003      	b.n	8250 <_Z11coap_s_procP4mbuf+0x134>
        if(r->m_pktlen == 0)
    8248:	8834      	ldrh	r4, [r6, #0]
	        dlog(LOG_DEBUG, "No rsp: freeing mbuf");
    824a:	4924      	ldr	r1, [pc, #144]	; (82dc <_Z11coap_s_procP4mbuf+0x1c0>)
        if(r->m_pktlen == 0)
    824c:	2c00      	cmp	r4, #0
    824e:	d198      	bne.n	8182 <_Z11coap_s_procP4mbuf+0x66>
				dlog(LOG_DEBUG, "Error msg rsp: freeing mbuf");
    8250:	2007      	movs	r0, #7
    8252:	f7fb ffe1 	bl	4218 <_Z4dlogiPKcz>
				m_free(r);
    8256:	0030      	movs	r0, r6
    8258:	f000 f8aa 	bl	83b0 <_Z6m_freeP4mbuf>
				r = NULL;
    825c:	2600      	movs	r6, #0
    825e:	e790      	b.n	8182 <_Z11coap_s_procP4mbuf+0x66>
			dlog(LOG_DEBUG, "Parse error: freeing mbuf");
    8260:	491f      	ldr	r1, [pc, #124]	; (82e0 <_Z11coap_s_procP4mbuf+0x1c4>)
	else if (rc == ERR_VER_NOT_SUPP)
    8262:	281d      	cmp	r0, #29
    8264:	d0f4      	beq.n	8250 <_Z11coap_s_procP4mbuf+0x134>
        dlog(LOG_ERR, "Error: rc/h->len: %d/%d, cc.code: %d", rc, m->m_pktlen, cc.code);
    8266:	78a2      	ldrb	r2, [r4, #2]
    8268:	9b03      	ldr	r3, [sp, #12]
    826a:	491e      	ldr	r1, [pc, #120]	; (82e4 <_Z11coap_s_procP4mbuf+0x1c8>)
    826c:	881b      	ldrh	r3, [r3, #0]
    826e:	9200      	str	r2, [sp, #0]
    8270:	0002      	movs	r2, r0
    8272:	2003      	movs	r0, #3
    8274:	f7fb ffd0 	bl	4218 <_Z4dlogiPKcz>
        coap_init_rsp(&cc, &rcc, r);
    8278:	0032      	movs	r2, r6
    827a:	0029      	movs	r1, r5
    827c:	0020      	movs	r0, r4
    827e:	f7fe ffbb 	bl	71f8 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>
        if (cc.type == COAP_T_CONF_VAL)
    8282:	7823      	ldrb	r3, [r4, #0]
    8284:	2b00      	cmp	r3, #0
    8286:	d10b      	bne.n	82a0 <_Z11coap_s_procP4mbuf+0x184>
            rcc.type = COAP_T_ACK_VAL;
    8288:	3302      	adds	r3, #2
            rcc.type = COAP_T_NCONF_VAL;
    828a:	702b      	strb	r3, [r5, #0]
        rcc.code = code;
    828c:	ab02      	add	r3, sp, #8
    828e:	7adb      	ldrb	r3, [r3, #11]
        if (coap_msg_response(&rcc) != ERR_OK)
    8290:	0028      	movs	r0, r5
        rcc.code = code;
    8292:	70ab      	strb	r3, [r5, #2]
        if (coap_msg_response(&rcc) != ERR_OK)
    8294:	f7fe fff0 	bl	7278 <_Z17coap_msg_responseP12coap_msg_ctx>
    8298:	2800      	cmp	r0, #0
    829a:	d100      	bne.n	829e <_Z11coap_s_procP4mbuf+0x182>
    829c:	e771      	b.n	8182 <_Z11coap_s_procP4mbuf+0x66>
    829e:	e7d1      	b.n	8244 <_Z11coap_s_procP4mbuf+0x128>
            rcc.type = COAP_T_NCONF_VAL;
    82a0:	2301      	movs	r3, #1
    82a2:	e7f2      	b.n	828a <_Z11coap_s_procP4mbuf+0x16e>
            (void)disable_obs(pstr, &cc, &clt, 1);
    82a4:	aa05      	add	r2, sp, #20
    82a6:	0021      	movs	r1, r4
    82a8:	2301      	movs	r3, #1
    82aa:	0038      	movs	r0, r7
    82ac:	f7ff f994 	bl	75d8 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>
            if (enable_obs(pstr, &cc, &clt) != ERR_OK)
    82b0:	aa05      	add	r2, sp, #20
    82b2:	0021      	movs	r1, r4
    82b4:	0038      	movs	r0, r7
    82b6:	f7ff f909 	bl	74cc <_Z10enable_obsPKcP12coap_msg_ctxPv>
    82ba:	2800      	cmp	r0, #0
    82bc:	d1b2      	bne.n	8224 <_Z11coap_s_procP4mbuf+0x108>
                dlog(LOG_DEBUG, "Enabled observe for URI: %s", pstr);
    82be:	003a      	movs	r2, r7
    82c0:	4909      	ldr	r1, [pc, #36]	; (82e8 <_Z11coap_s_procP4mbuf+0x1cc>)
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    82c2:	2007      	movs	r0, #7
    82c4:	e7b7      	b.n	8236 <_Z11coap_s_procP4mbuf+0x11a>
    82c6:	46c0      	nop			; (mov r8, r8)
    82c8:	00011975 	.word	0x00011975
    82cc:	00011a72 	.word	0x00011a72
    82d0:	000119e6 	.word	0x000119e6
    82d4:	000119a4 	.word	0x000119a4
    82d8:	00011a02 	.word	0x00011a02
    82dc:	00011a1e 	.word	0x00011a1e
    82e0:	00011a33 	.word	0x00011a33
    82e4:	00011a4d 	.word	0x00011a4d
    82e8:	000119ca 	.word	0x000119ca

000082ec <_Z10coap_s_runv>:


// Run HDLCS and the CoAP Server 
void coap_s_run()
{
    82ec:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *appd;
	struct mbuf *arsp;
	
	/* Run the secondary-station HDLC state machine */
	hdlcs_run();
    82ee:	f000 f9b9 	bl	8664 <_Z9hdlcs_runv>
	
	/* Serve incoming request, if any */
	appd = hdlcs_read();
    82f2:	f000 f93b 	bl	856c <_Z10hdlcs_readv>
    82f6:	1e05      	subs	r5, r0, #0
	if (appd) 
    82f8:	d01c      	beq.n	8334 <_Z10coap_s_runv+0x48>
	{
		/* Run the CoAP server */
		arsp = coap_s_proc(appd);
    82fa:	f7ff ff0f 	bl	811c <_Z11coap_s_procP4mbuf>
    82fe:	1e04      	subs	r4, r0, #0
		if (arsp) 
    8300:	d00a      	beq.n	8318 <_Z10coap_s_runv+0x2c>
		{
			// Direct send of CoAP response
			hdlcs_write(arsp->data, arsp->len);
    8302:	8801      	ldrh	r1, [r0, #0]
    8304:	3004      	adds	r0, #4
    8306:	f000 f95b 	bl	85c0 <_Z11hdlcs_writePKvt>
			
			// Free response mbuf
			dlog(LOG_DEBUG, "coap_s_run: freeing arsp mbuf");
    830a:	2007      	movs	r0, #7
    830c:	490a      	ldr	r1, [pc, #40]	; (8338 <_Z10coap_s_runv+0x4c>)
    830e:	f7fb ff83 	bl	4218 <_Z4dlogiPKcz>
			m_free(arsp);
    8312:	0020      	movs	r0, r4
    8314:	f000 f84c 	bl	83b0 <_Z6m_freeP4mbuf>
		}
		// Free request mbuf
		dlog(LOG_DEBUG, "coap_s_run: freeing appd mbuf");
    8318:	4908      	ldr	r1, [pc, #32]	; (833c <_Z10coap_s_runv+0x50>)
    831a:	2007      	movs	r0, #7
    831c:	f7fb ff7c 	bl	4218 <_Z4dlogiPKcz>
		m_free(appd);
    8320:	0028      	movs	r0, r5
    8322:	f000 f845 	bl	83b0 <_Z6m_freeP4mbuf>
		
		int freeram = free_ram();
    8326:	f7fc f8a9 	bl	447c <_Z8free_ramv>
		dlog(LOG_DEBUG, "coap_s_run: free Ram: %d", freeram);
    832a:	4905      	ldr	r1, [pc, #20]	; (8340 <_Z10coap_s_runv+0x54>)
		int freeram = free_ram();
    832c:	0002      	movs	r2, r0
		dlog(LOG_DEBUG, "coap_s_run: free Ram: %d", freeram);
    832e:	2007      	movs	r0, #7
    8330:	f7fb ff72 	bl	4218 <_Z4dlogiPKcz>
	}
} 
    8334:	bd70      	pop	{r4, r5, r6, pc}
    8336:	46c0      	nop			; (mov r8, r8)
    8338:	00011904 	.word	0x00011904
    833c:	00011922 	.word	0x00011922
    8340:	00011940 	.word	0x00011940

00008344 <_Z18set_mbuf_data_sizei>:
// Set the size of the mbuf data buffer
static int mbuf_data_buf_size = 0;
void set_mbuf_data_size( int buf_size )
{
	// Get the size of the mbuf data buffer
	mbuf_data_buf_size = buf_size;
    8344:	4b01      	ldr	r3, [pc, #4]	; (834c <_Z18set_mbuf_data_sizei+0x8>)
    8346:	6018      	str	r0, [r3, #0]
	
} // set_mbuf_size
    8348:	4770      	bx	lr
    834a:	46c0      	nop			; (mov r8, r8)
    834c:	200019e0 	.word	0x200019e0

00008350 <_Z18get_mbuf_data_sizev>:

// Get the size of the mbuf data buffer
int get_mbuf_data_size()
{
	// Return the size of the mbuf data buffer
	return mbuf_data_buf_size;
    8350:	4b01      	ldr	r3, [pc, #4]	; (8358 <_Z18get_mbuf_data_sizev+0x8>)
    8352:	6818      	ldr	r0, [r3, #0]
	
} // get_mbuf_size
    8354:	4770      	bx	lr
    8356:	46c0      	nop			; (mov r8, r8)
    8358:	200019e0 	.word	0x200019e0

0000835c <_Z5m_getv>:


struct mbuf * m_get()
{
    835c:	b570      	push	{r4, r5, r6, lr}
    struct mbuf *m;
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    835e:	4d0e      	ldr	r5, [pc, #56]	; (8398 <_Z5m_getv+0x3c>)
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    8360:	2007      	movs	r0, #7
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    8362:	682b      	ldr	r3, [r5, #0]
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    8364:	490d      	ldr	r1, [pc, #52]	; (839c <_Z5m_getv+0x40>)
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    8366:	1d1c      	adds	r4, r3, #4
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    8368:	0022      	movs	r2, r4
    836a:	f7fb ff55 	bl	4218 <_Z4dlogiPKcz>
    m = (struct mbuf *) malloc(mbuf_size);
    836e:	0020      	movs	r0, r4
    8370:	f004 fb52 	bl	ca18 <malloc>
    assert(m);
    8374:	2800      	cmp	r0, #0
    8376:	d105      	bne.n	8384 <_Z5m_getv+0x28>
    8378:	4b09      	ldr	r3, [pc, #36]	; (83a0 <_Z5m_getv+0x44>)
    837a:	4a0a      	ldr	r2, [pc, #40]	; (83a4 <_Z5m_getv+0x48>)
    837c:	214a      	movs	r1, #74	; 0x4a
    837e:	480a      	ldr	r0, [pc, #40]	; (83a8 <_Z5m_getv+0x4c>)
    8380:	f004 fa02 	bl	c788 <__assert_func>
    m->len = 0;
    8384:	2300      	movs	r3, #0
    m->size = mbuf_data_buf_size;
    malloc_cnt++;
    8386:	4a09      	ldr	r2, [pc, #36]	; (83ac <_Z5m_getv+0x50>)
    m->len = 0;
    8388:	8003      	strh	r3, [r0, #0]
    m->size = mbuf_data_buf_size;
    838a:	682b      	ldr	r3, [r5, #0]
    838c:	8043      	strh	r3, [r0, #2]
    malloc_cnt++;
    838e:	6813      	ldr	r3, [r2, #0]
    8390:	3301      	adds	r3, #1
    8392:	6013      	str	r3, [r2, #0]
    return m;
}
    8394:	bd70      	pop	{r4, r5, r6, pc}
    8396:	46c0      	nop			; (mov r8, r8)
    8398:	200019e0 	.word	0x200019e0
    839c:	00011a8c 	.word	0x00011a8c
    83a0:	00011aa8 	.word	0x00011aa8
    83a4:	00011ad5 	.word	0x00011ad5
    83a8:	00011aaa 	.word	0x00011aaa
    83ac:	200019e8 	.word	0x200019e8

000083b0 <_Z6m_freeP4mbuf>:

void
m_free(struct mbuf *m)
{
    83b0:	b510      	push	{r4, lr}
    free(m);
    83b2:	f004 fb3b 	bl	ca2c <free>
    free_cnt++;
    83b6:	4a02      	ldr	r2, [pc, #8]	; (83c0 <_Z6m_freeP4mbuf+0x10>)
    83b8:	6813      	ldr	r3, [r2, #0]
    83ba:	3301      	adds	r3, #1
    83bc:	6013      	str	r3, [r2, #0]
}
    83be:	bd10      	pop	{r4, pc}
    83c0:	200019e4 	.word	0x200019e4

000083c4 <_Z5m_dupP4mbuf>:


struct mbuf *
m_dup(struct mbuf *m)
{
    83c4:	b570      	push	{r4, r5, r6, lr}
    83c6:	0005      	movs	r5, r0

    struct mbuf *n = m_get();
    83c8:	f7ff ffc8 	bl	835c <_Z5m_getv>
    83cc:	1e04      	subs	r4, r0, #0

    if (n) {
    83ce:	d007      	beq.n	83e0 <_Z5m_dupP4mbuf+0x1c>
        memcpy(n, m, sizeof(*m) + mbuf_data_buf_size);
    83d0:	4b04      	ldr	r3, [pc, #16]	; (83e4 <_Z5m_dupP4mbuf+0x20>)
    83d2:	0029      	movs	r1, r5
    83d4:	681a      	ldr	r2, [r3, #0]
    83d6:	3204      	adds	r2, #4
    83d8:	f004 fb53 	bl	ca82 <memcpy>
        n->len = m->len;
    83dc:	882b      	ldrh	r3, [r5, #0]
    83de:	8023      	strh	r3, [r4, #0]
    }

    return n;

}
    83e0:	0020      	movs	r0, r4
    83e2:	bd70      	pop	{r4, r5, r6, pc}
    83e4:	200019e0 	.word	0x200019e0

000083e8 <_Z9m_prependP4mbufi>:

struct mbuf *
m_prepend(struct mbuf *m, int len)
{

    if (m->len + len > mbuf_data_buf_size) {
    83e8:	4b09      	ldr	r3, [pc, #36]	; (8410 <_Z9m_prependP4mbufi+0x28>)
    83ea:	8802      	ldrh	r2, [r0, #0]
    83ec:	681b      	ldr	r3, [r3, #0]
{
    83ee:	b570      	push	{r4, r5, r6, lr}
    83f0:	000d      	movs	r5, r1
    if (m->len + len > mbuf_data_buf_size) {
    83f2:	1851      	adds	r1, r2, r1
{
    83f4:	0004      	movs	r4, r0
    if (m->len + len > mbuf_data_buf_size) {
    83f6:	4299      	cmp	r1, r3
    83f8:	dc08      	bgt.n	840c <_Z9m_prependP4mbufi+0x24>
        return NULL;
    }

    /* make space at the top of the buffer */
    memmove(m->data + len, m->data, m->len);
    83fa:	1d01      	adds	r1, r0, #4
    83fc:	1948      	adds	r0, r1, r5
    83fe:	f004 fb49 	bl	ca94 <memmove>
    m->len += len;
    8402:	8821      	ldrh	r1, [r4, #0]
    8404:	1949      	adds	r1, r1, r5
    8406:	8021      	strh	r1, [r4, #0]

    return m;
}
    8408:	0020      	movs	r0, r4
    840a:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    840c:	2400      	movs	r4, #0
    840e:	e7fb      	b.n	8408 <_Z9m_prependP4mbufi+0x20>
    8410:	200019e0 	.word	0x200019e0

00008414 <_Z8m_appendP4mbufs>:

void *
m_append(struct mbuf *m, int16_t len)
{
    void *d;
    if (m->len + len > mbuf_data_buf_size) {
    8414:	4b06      	ldr	r3, [pc, #24]	; (8430 <_Z8m_appendP4mbufs+0x1c>)
{
    8416:	b510      	push	{r4, lr}
    if (m->len + len > mbuf_data_buf_size) {
    8418:	8804      	ldrh	r4, [r0, #0]
    841a:	681b      	ldr	r3, [r3, #0]
    841c:	1861      	adds	r1, r4, r1
{
    841e:	0002      	movs	r2, r0
        return NULL;
    8420:	2000      	movs	r0, #0
    if (m->len + len > mbuf_data_buf_size) {
    8422:	4299      	cmp	r1, r3
    8424:	dc02      	bgt.n	842c <_Z8m_appendP4mbufs+0x18>
    }

    d = m->data + m->len;
    8426:	1d10      	adds	r0, r2, #4
    8428:	1900      	adds	r0, r0, r4
    m->len += len;
    842a:	8011      	strh	r1, [r2, #0]
    
    return d;

}
    842c:	bd10      	pop	{r4, pc}
    842e:	46c0      	nop			; (mov r8, r8)
    8430:	200019e0 	.word	0x200019e0

00008434 <_Z5m_adjP4mbufi>:



void
m_adj(struct mbuf *mp, int req_len)
{
    8434:	b510      	push	{r4, lr}
    if (mp == NULL) {
    8436:	2800      	cmp	r0, #0
    8438:	d011      	beq.n	845e <_Z5m_adjP4mbufi+0x2a>
        return;
    }
    if ((req_len > mp->len) || (-1*(req_len) > mp->len)) {
    843a:	8802      	ldrh	r2, [r0, #0]
    843c:	0013      	movs	r3, r2
    843e:	428a      	cmp	r2, r1
    8440:	db05      	blt.n	844e <_Z5m_adjP4mbufi+0x1a>
    8442:	424c      	negs	r4, r1
    8444:	42a2      	cmp	r2, r4
    8446:	db02      	blt.n	844e <_Z5m_adjP4mbufi+0x1a>
        req_len = mp->len;
    }

    if (req_len >= 0) {
    8448:	2900      	cmp	r1, #0
    844a:	db09      	blt.n	8460 <_Z5m_adjP4mbufi+0x2c>
    844c:	000b      	movs	r3, r1
        /* Trim from head. */
        mp->len -= req_len;
    844e:	1ad2      	subs	r2, r2, r3
    8450:	b292      	uxth	r2, r2
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    8452:	1d19      	adds	r1, r3, #4
        mp->len -= req_len;
    8454:	8002      	strh	r2, [r0, #0]
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    8456:	1841      	adds	r1, r0, r1
    8458:	3004      	adds	r0, #4
    845a:	f004 fb1b 	bl	ca94 <memmove>
    } else {
        /* Trim from tail. */
        mp->len += req_len;
    }
}
    845e:	bd10      	pop	{r4, pc}
        mp->len += req_len;
    8460:	1852      	adds	r2, r2, r1
    8462:	8002      	strh	r2, [r0, #0]
    8464:	e7fb      	b.n	845e <_Z5m_adjP4mbufi+0x2a>
	...

00008468 <_ZL10hdlcs_snrmv>:
    struct hdlc_snrm_params hsp;

    int hdrlen;


    hss.state = HSS_NORM;
    8468:	2302      	movs	r3, #2
{
    846a:	b530      	push	{r4, r5, lr}
    hss.state = HSS_NORM;
    846c:	4c19      	ldr	r4, [pc, #100]	; (84d4 <_ZL10hdlcs_snrmv+0x6c>)
{
    846e:	b093      	sub	sp, #76	; 0x4c
            
     /* reinit state */
    dlog(LOG_DEBUG, "enter normal mode");
    8470:	4919      	ldr	r1, [pc, #100]	; (84d8 <_ZL10hdlcs_snrmv+0x70>)
    8472:	2007      	movs	r0, #7
    hss.state = HSS_NORM;
    8474:	7323      	strb	r3, [r4, #12]
    dlog(LOG_DEBUG, "enter normal mode");
    8476:	f7fb fecf 	bl	4218 <_Z4dlogiPKcz>
            
    /* respond with UA */
    hdlc_hdr(0, hdlc_control(HDLC_UA, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    847a:	2101      	movs	r1, #1
    847c:	2006      	movs	r0, #6
    847e:	f000 fb65 	bl	8b4c <_Z12hdlc_controlhh>
    8482:	ad05      	add	r5, sp, #20
    8484:	0001      	movs	r1, r0
    8486:	a804      	add	r0, sp, #16
    8488:	7ba3      	ldrb	r3, [r4, #14]
    848a:	7b62      	ldrb	r2, [r4, #13]
    848c:	9001      	str	r0, [sp, #4]
    848e:	9500      	str	r5, [sp, #0]
    8490:	2000      	movs	r0, #0
    8492:	f000 fbe3 	bl	8c5c <_Z8hdlc_hdrismmPhPi>

    /* should use negotiated values - min() of primary/secondary */    
    hsp.max_info_tx = hss.cfg.max_info_tx;  
    8496:	6863      	ldr	r3, [r4, #4]
    hsp.max_info_rx = hss.cfg.max_info_rx;
    hsp.window_tx = 1;
    hsp.window_rx = 1;

    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    8498:	aa03      	add	r2, sp, #12
    hsp.max_info_tx = hss.cfg.max_info_tx;  
    849a:	9307      	str	r3, [sp, #28]
    hsp.max_info_rx = hss.cfg.max_info_rx;
    849c:	68a3      	ldr	r3, [r4, #8]
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    849e:	211a      	movs	r1, #26
    hsp.max_info_rx = hss.cfg.max_info_rx;
    84a0:	9308      	str	r3, [sp, #32]
    hsp.window_tx = 1;
    84a2:	2301      	movs	r3, #1
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    84a4:	a80b      	add	r0, sp, #44	; 0x2c
    hsp.window_tx = 1;
    84a6:	9309      	str	r3, [sp, #36]	; 0x24
    hsp.window_rx = 1;
    84a8:	930a      	str	r3, [sp, #40]	; 0x28
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    84aa:	ab07      	add	r3, sp, #28
    84ac:	f000 fc92 	bl	8dd4 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params>
    rc = hdlc_send_frame(hdr, param_info, rsplen);
    84b0:	9a03      	ldr	r2, [sp, #12]
    84b2:	a90b      	add	r1, sp, #44	; 0x2c
    84b4:	0028      	movs	r0, r5
    84b6:	f000 fcbf 	bl	8e38 <_Z15hdlc_send_framePKhS0_i>

    dlog(LOG_DEBUG, "SNRM-UA response rc %d", rc);
    84ba:	4908      	ldr	r1, [pc, #32]	; (84dc <_ZL10hdlcs_snrmv+0x74>)
    rc = hdlc_send_frame(hdr, param_info, rsplen);
    84bc:	0002      	movs	r2, r0
    dlog(LOG_DEBUG, "SNRM-UA response rc %d", rc);
    84be:	2007      	movs	r0, #7
    84c0:	f7fb feaa 	bl	4218 <_Z4dlogiPKcz>

    /* Send / Receive sequence numbers are reset to 0 */
    hss.vr = 0;
    84c4:	2000      	movs	r0, #0
    84c6:	7420      	strb	r0, [r4, #16]
    hss.vs = 0;
    84c8:	73e0      	strb	r0, [r4, #15]
    hss.vr_ack = 0;
    84ca:	74a0      	strb	r0, [r4, #18]
    hss.vs_ack = 0;
    84cc:	7460      	strb	r0, [r4, #17]

    return 0;
 
}
    84ce:	b013      	add	sp, #76	; 0x4c
    84d0:	bd30      	pop	{r4, r5, pc}
    84d2:	46c0      	nop			; (mov r8, r8)
    84d4:	200019f0 	.word	0x200019f0
    84d8:	00011cdf 	.word	0x00011cdf
    84dc:	00011cf1 	.word	0x00011cf1

000084e0 <_Z10hdlcs_openP14HardwareSerialmm>:
{
    84e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (hss.open) 
    84e2:	4c1c      	ldr	r4, [pc, #112]	; (8554 <_Z10hdlcs_openP14HardwareSerialmm+0x74>)
{
    84e4:	9101      	str	r1, [sp, #4]
    if (hss.open) 
    84e6:	6826      	ldr	r6, [r4, #0]
{
    84e8:	0015      	movs	r5, r2
        return ERR_FAIL;
    84ea:	2763      	movs	r7, #99	; 0x63
    if (hss.open) 
    84ec:	2e00      	cmp	r6, #0
    84ee:	d106      	bne.n	84fe <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
	if ( max_info_len > MNIC_MAX_PAYLOAD_SIZE )
    84f0:	2aff      	cmp	r2, #255	; 0xff
    84f2:	d906      	bls.n	8502 <_Z10hdlcs_openP14HardwareSerialmm+0x22>
		dlog( LOG_DEBUG, "The max payload size specified is too large: %d bytes. The maximum allowed is %d bytes ", max_info_len, MNIC_MAX_PAYLOAD_SIZE );
    84f4:	23ff      	movs	r3, #255	; 0xff
    84f6:	4918      	ldr	r1, [pc, #96]	; (8558 <_Z10hdlcs_openP14HardwareSerialmm+0x78>)
    84f8:	2007      	movs	r0, #7
    84fa:	f7fb fe8d 	bl	4218 <_Z4dlogiPKcz>
}
    84fe:	0038      	movs	r0, r7
    8500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hss.open = 1;
    8502:	2701      	movs	r7, #1
	hdlc_init( pUART, max_info_len );
    8504:	0011      	movs	r1, r2
    8506:	f000 fafd 	bl	8b04 <_Z9hdlc_initP14HardwareSerialm>
	uart_timeout_ms = timeout_ms;
    850a:	4b14      	ldr	r3, [pc, #80]	; (855c <_Z10hdlcs_openP14HardwareSerialmm+0x7c>)
    850c:	9a01      	ldr	r2, [sp, #4]
    memset(&hss, 0, sizeof(hss));
    850e:	0031      	movs	r1, r6
	uart_timeout_ms = timeout_ms;
    8510:	601a      	str	r2, [r3, #0]
    memset(&hss, 0, sizeof(hss));
    8512:	0020      	movs	r0, r4
    8514:	2220      	movs	r2, #32
    8516:	f004 facf 	bl	cab8 <memset>
	set_mbuf_data_size(size);
    851a:	0028      	movs	r0, r5
    hss.open = 1;
    851c:	6027      	str	r7, [r4, #0]
    hss.cfg.max_info_tx = max_info_len;
    851e:	6065      	str	r5, [r4, #4]
    hss.cfg.max_info_rx = max_info_len;
    8520:	60a5      	str	r5, [r4, #8]
    hss.state = HSS_DISC;
    8522:	7327      	strb	r7, [r4, #12]
	set_mbuf_data_size(size);
    8524:	f7ff ff0e 	bl	8344 <_Z18set_mbuf_data_sizei>
    hss.recv = m_get();
    8528:	f7ff ff18 	bl	835c <_Z5m_getv>
    852c:	61a0      	str	r0, [r4, #24]
    assert(hss.recv);
    852e:	2800      	cmp	r0, #0
    8530:	d105      	bne.n	853e <_Z10hdlcs_openP14HardwareSerialmm+0x5e>
    8532:	4b0b      	ldr	r3, [pc, #44]	; (8560 <_Z10hdlcs_openP14HardwareSerialmm+0x80>)
    8534:	4a0b      	ldr	r2, [pc, #44]	; (8564 <_Z10hdlcs_openP14HardwareSerialmm+0x84>)
    8536:	2164      	movs	r1, #100	; 0x64
    8538:	480b      	ldr	r0, [pc, #44]	; (8568 <_Z10hdlcs_openP14HardwareSerialmm+0x88>)
    853a:	f004 f925 	bl	c788 <__assert_func>
    hss.esrc = hdlc_addr_encode(1);
    853e:	0038      	movs	r0, r7
    8540:	f000 fb76 	bl	8c30 <_Z16hdlc_addr_encodem>
    8544:	7360      	strb	r0, [r4, #13]
    hss.edst = hdlc_addr_encode(1);
    8546:	0038      	movs	r0, r7
    8548:	f000 fb72 	bl	8c30 <_Z16hdlc_addr_encodem>
    return ERR_OK;
    854c:	0037      	movs	r7, r6
    hss.edst = hdlc_addr_encode(1);
    854e:	73a0      	strb	r0, [r4, #14]
    return ERR_OK;
    8550:	e7d5      	b.n	84fe <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
    8552:	46c0      	nop			; (mov r8, r8)
    8554:	200019f0 	.word	0x200019f0
    8558:	00011ae3 	.word	0x00011ae3
    855c:	200019ec 	.word	0x200019ec
    8560:	00011b3b 	.word	0x00011b3b
    8564:	00011d25 	.word	0x00011d25
    8568:	00011b44 	.word	0x00011b44

0000856c <_Z10hdlcs_readv>:
{
    856c:	b570      	push	{r4, r5, r6, lr}
    if (hss.r_complete) {
    856e:	4d0f      	ldr	r5, [pc, #60]	; (85ac <_Z10hdlcs_readv+0x40>)
    8570:	69ec      	ldr	r4, [r5, #28]
    8572:	2c00      	cmp	r4, #0
    8574:	d018      	beq.n	85a8 <_Z10hdlcs_readv+0x3c>
        r = m_dup(hss.recv);
    8576:	69a8      	ldr	r0, [r5, #24]
    8578:	f7ff ff24 	bl	83c4 <_Z5m_dupP4mbuf>
    857c:	1e04      	subs	r4, r0, #0
        assert(r);
    857e:	d106      	bne.n	858e <_Z10hdlcs_readv+0x22>
    8580:	2197      	movs	r1, #151	; 0x97
    8582:	4b0b      	ldr	r3, [pc, #44]	; (85b0 <_Z10hdlcs_readv+0x44>)
    8584:	4a0b      	ldr	r2, [pc, #44]	; (85b4 <_Z10hdlcs_readv+0x48>)
    8586:	0049      	lsls	r1, r1, #1
    8588:	480b      	ldr	r0, [pc, #44]	; (85b8 <_Z10hdlcs_readv+0x4c>)
    858a:	f004 f8fd 	bl	c788 <__assert_func>
        hss.recv->len = 0;
    858e:	2100      	movs	r1, #0
    8590:	69a8      	ldr	r0, [r5, #24]
    8592:	8001      	strh	r1, [r0, #0]
        hss.r_complete = 0;
    8594:	61e9      	str	r1, [r5, #28]
        memset(hss.recv->data, 0, hss.recv->size);
    8596:	8842      	ldrh	r2, [r0, #2]
    8598:	3004      	adds	r0, #4
    859a:	f004 fa8d 	bl	cab8 <memset>
		dlog( LOG_DEBUG, "hdlcs_read() - %x", r );
    859e:	0022      	movs	r2, r4
    85a0:	4906      	ldr	r1, [pc, #24]	; (85bc <_Z10hdlcs_readv+0x50>)
    85a2:	2007      	movs	r0, #7
    85a4:	f7fb fe38 	bl	4218 <_Z4dlogiPKcz>
} // hdlcs_read()
    85a8:	0020      	movs	r0, r4
    85aa:	bd70      	pop	{r4, r5, r6, pc}
    85ac:	200019f0 	.word	0x200019f0
    85b0:	000113dc 	.word	0x000113dc
    85b4:	00011d08 	.word	0x00011d08
    85b8:	00011b44 	.word	0x00011b44
    85bc:	00011b70 	.word	0x00011b70

000085c0 <_Z11hdlcs_writePKvt>:
{
    85c0:	b570      	push	{r4, r5, r6, lr}
    (void)hdlc_hdr(0, hdlc_control_i(hss.vr, hss.vs, 1),
    85c2:	4c0d      	ldr	r4, [pc, #52]	; (85f8 <_Z11hdlcs_writePKvt+0x38>)
{
    85c4:	b086      	sub	sp, #24
    85c6:	0005      	movs	r5, r0
    85c8:	000e      	movs	r6, r1
    (void)hdlc_hdr(0, hdlc_control_i(hss.vr, hss.vs, 1),
    85ca:	7c20      	ldrb	r0, [r4, #16]
    85cc:	7be1      	ldrb	r1, [r4, #15]
    85ce:	2201      	movs	r2, #1
    85d0:	f000 faa8 	bl	8b24 <_Z14hdlc_control_ihhh>
    85d4:	7ba3      	ldrb	r3, [r4, #14]
    85d6:	7b62      	ldrb	r2, [r4, #13]
                          hss.esrc, hss.edst, hdr, &hdrlen);
    85d8:	b201      	sxth	r1, r0
    85da:	ac04      	add	r4, sp, #16
    85dc:	a803      	add	r0, sp, #12
    85de:	9001      	str	r0, [sp, #4]
    85e0:	9400      	str	r4, [sp, #0]
    85e2:	2000      	movs	r0, #0
    85e4:	f000 fb3a 	bl	8c5c <_Z8hdlc_hdrismmPhPi>
    rc = hdlc_send_frame(hdr, (const uint8_t *)data, len);
    85e8:	0032      	movs	r2, r6
    85ea:	0029      	movs	r1, r5
    85ec:	0020      	movs	r0, r4
    85ee:	f000 fc23 	bl	8e38 <_Z15hdlc_send_framePKhS0_i>
}
    85f2:	b006      	add	sp, #24
    85f4:	bd70      	pop	{r4, r5, r6, pc}
    85f6:	46c0      	nop			; (mov r8, r8)
    85f8:	200019f0 	.word	0x200019f0

000085fc <_Z8hdlcs_rrv>:



int 
hdlcs_rr(void)
{
    85fc:	b530      	push	{r4, r5, lr}
    uint8_t hdr[HDLC_HDR_SIZE];
    int hdrlen;

    if (!pending_rsp) {
    85fe:	4d15      	ldr	r5, [pc, #84]	; (8654 <_Z8hdlcs_rrv+0x58>)
{
    8600:	b087      	sub	sp, #28
    if (!pending_rsp) {
    8602:	682c      	ldr	r4, [r5, #0]
    8604:	2c00      	cmp	r4, #0
    8606:	d11a      	bne.n	863e <_Z8hdlcs_rrv+0x42>
        dlog(LOG_DEBUG, "respond to RR with RR");
    8608:	4913      	ldr	r1, [pc, #76]	; (8658 <_Z8hdlcs_rrv+0x5c>)
    860a:	2007      	movs	r0, #7
    860c:	f7fb fe04 	bl	4218 <_Z4dlogiPKcz>
        hdlc_hdr(0, hdlc_control_rr(hss.vr, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    8610:	4d12      	ldr	r5, [pc, #72]	; (865c <_Z8hdlcs_rrv+0x60>)
    8612:	2101      	movs	r1, #1
    8614:	7c28      	ldrb	r0, [r5, #16]
    8616:	f000 fa90 	bl	8b3a <_Z15hdlc_control_rrhh>
    861a:	7b6a      	ldrb	r2, [r5, #13]
    861c:	7bab      	ldrb	r3, [r5, #14]
    861e:	b201      	sxth	r1, r0
    8620:	ad04      	add	r5, sp, #16
    8622:	a803      	add	r0, sp, #12
    8624:	9001      	str	r0, [sp, #4]
    8626:	9500      	str	r5, [sp, #0]
    8628:	0020      	movs	r0, r4
    862a:	f000 fb17 	bl	8c5c <_Z8hdlc_hdrismmPhPi>
        hdlc_send_frame(hdr, NULL, 0);
    862e:	0022      	movs	r2, r4
    8630:	0021      	movs	r1, r4
    8632:	0028      	movs	r0, r5
    8634:	f000 fc00 	bl	8e38 <_Z15hdlc_send_framePKhS0_i>
        /* CoAP will also send app confirm */
        /* if not (and there is no data), proxy should send RR to confirm */
    }

    return 0;
}
    8638:	2000      	movs	r0, #0
    863a:	b007      	add	sp, #28
    863c:	bd30      	pop	{r4, r5, pc}
        dlog(LOG_DEBUG, "Resending frame");
    863e:	4908      	ldr	r1, [pc, #32]	; (8660 <_Z8hdlcs_rrv+0x64>)
    8640:	2007      	movs	r0, #7
    8642:	f7fb fde9 	bl	4218 <_Z4dlogiPKcz>
        hdlcs_write(pending_rsp->m_data, pending_rsp->m_pktlen);
    8646:	6828      	ldr	r0, [r5, #0]
    8648:	8801      	ldrh	r1, [r0, #0]
    864a:	3004      	adds	r0, #4
    864c:	f7ff ffb8 	bl	85c0 <_Z11hdlcs_writePKvt>
    8650:	e7f2      	b.n	8638 <_Z8hdlcs_rrv+0x3c>
    8652:	46c0      	nop			; (mov r8, r8)
    8654:	20001984 	.word	0x20001984
    8658:	00011b82 	.word	0x00011b82
    865c:	200019f0 	.word	0x200019f0
    8660:	00011b98 	.word	0x00011b98

00008664 <_Z9hdlcs_runv>:
{
    8664:	b5f0      	push	{r4, r5, r6, r7, lr}
    rc = hdlc_rx( hdr, hss.recv->data, hss.recv->size, uart_timeout_ms );  
    8666:	4c72      	ldr	r4, [pc, #456]	; (8830 <_Z9hdlcs_runv+0x1cc>)
    8668:	4b72      	ldr	r3, [pc, #456]	; (8834 <_Z9hdlcs_runv+0x1d0>)
    866a:	69a1      	ldr	r1, [r4, #24]
{
    866c:	b093      	sub	sp, #76	; 0x4c
    rc = hdlc_rx( hdr, hss.recv->data, hss.recv->size, uart_timeout_ms );  
    866e:	884a      	ldrh	r2, [r1, #2]
    8670:	681b      	ldr	r3, [r3, #0]
    8672:	3104      	adds	r1, #4
    8674:	a807      	add	r0, sp, #28
    8676:	f000 fc49 	bl	8f0c <_Z7hdlc_rxPhS_ii>
	if ( rc <= 0 )
    867a:	2800      	cmp	r0, #0
    867c:	dc04      	bgt.n	8688 <_Z9hdlcs_runv+0x24>
        return 0;
    867e:	2300      	movs	r3, #0
        return 1;
    8680:	9303      	str	r3, [sp, #12]
} // hdlcs_run()
    8682:	9803      	ldr	r0, [sp, #12]
    8684:	b013      	add	sp, #76	; 0x4c
    8686:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rc = hdlc_parse_hdr( &hh, hdr, HDLC_HDR_SIZE );
    8688:	ae0b      	add	r6, sp, #44	; 0x2c
    868a:	2207      	movs	r2, #7
    868c:	a907      	add	r1, sp, #28
    868e:	0030      	movs	r0, r6
    8690:	f000 fb56 	bl	8d40 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi>
	if (rc) 
    8694:	2800      	cmp	r0, #0
    8696:	d1f2      	bne.n	867e <_Z9hdlcs_runv+0x1a>
	rc = hdlc_parse_control( hh.control, &hc );
    8698:	ad05      	add	r5, sp, #20
    869a:	7c30      	ldrb	r0, [r6, #16]
    869c:	0029      	movs	r1, r5
    869e:	f000 fa73 	bl	8b88 <_Z18hdlc_parse_controlhP9hdlc_ctrl>
    86a2:	9003      	str	r0, [sp, #12]
    if (rc) 
    86a4:	2800      	cmp	r0, #0
    86a6:	d1ea      	bne.n	867e <_Z9hdlcs_runv+0x1a>
    hss.recv->len = hh.infolen;
    86a8:	8932      	ldrh	r2, [r6, #8]
    86aa:	69a3      	ldr	r3, [r4, #24]
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    86ac:	4962      	ldr	r1, [pc, #392]	; (8838 <_Z9hdlcs_runv+0x1d4>)
    hss.recv->len = hh.infolen;
    86ae:	801a      	strh	r2, [r3, #0]
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    86b0:	7c32      	ldrb	r2, [r6, #16]
    if (hc.nr == INCM8(hss.vs)) 
    86b2:	2607      	movs	r6, #7
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    86b4:	7b23      	ldrb	r3, [r4, #12]
    86b6:	2007      	movs	r0, #7
    86b8:	f7fb fdae 	bl	4218 <_Z4dlogiPKcz>
    if (hc.nr == INCM8(hss.vs)) 
    86bc:	7be3      	ldrb	r3, [r4, #15]
    86be:	78aa      	ldrb	r2, [r5, #2]
    86c0:	3301      	adds	r3, #1
    86c2:	4033      	ands	r3, r6
    86c4:	429a      	cmp	r2, r3
    86c6:	d107      	bne.n	86d8 <_Z9hdlcs_runv+0x74>
        dlog(LOG_DEBUG, "response rxed at primary");
    86c8:	0030      	movs	r0, r6
    86ca:	495c      	ldr	r1, [pc, #368]	; (883c <_Z9hdlcs_runv+0x1d8>)
    86cc:	f7fb fda4 	bl	4218 <_Z4dlogiPKcz>
        hss.vs = INCM8(hss.vs);
    86d0:	7be0      	ldrb	r0, [r4, #15]
    86d2:	3001      	adds	r0, #1
    86d4:	4030      	ands	r0, r6
    86d6:	73e0      	strb	r0, [r4, #15]
    switch (hss.state) 
    86d8:	7b26      	ldrb	r6, [r4, #12]
    86da:	2e01      	cmp	r6, #1
    86dc:	d008      	beq.n	86f0 <_Z9hdlcs_runv+0x8c>
    86de:	2e02      	cmp	r6, #2
    86e0:	d029      	beq.n	8736 <_Z9hdlcs_runv+0xd2>
		dlog( LOG_DEBUG, "Error - unknown state: %d", hss.state );
    86e2:	0032      	movs	r2, r6
    86e4:	4956      	ldr	r1, [pc, #344]	; (8840 <_Z9hdlcs_runv+0x1dc>)
    86e6:	2007      	movs	r0, #7
    86e8:	f7fb fd96 	bl	4218 <_Z4dlogiPKcz>
        return 1;
    86ec:	2301      	movs	r3, #1
    86ee:	e7c7      	b.n	8680 <_Z9hdlcs_runv+0x1c>
        if (hc.type == HDLC_SNRM) {
    86f0:	782b      	ldrb	r3, [r5, #0]
    86f2:	2b04      	cmp	r3, #4
    86f4:	d107      	bne.n	8706 <_Z9hdlcs_runv+0xa2>
            rc = hdlcs_snrm();
    86f6:	f7ff feb7 	bl	8468 <_ZL10hdlcs_snrmv>
    dlog( LOG_DEBUG, "hdlcs_run() - %d", rc );
    86fa:	0002      	movs	r2, r0
    86fc:	4951      	ldr	r1, [pc, #324]	; (8844 <_Z9hdlcs_runv+0x1e0>)
    86fe:	2007      	movs	r0, #7
    8700:	f7fb fd8a 	bl	4218 <_Z4dlogiPKcz>
    return 0;
    8704:	e7bd      	b.n	8682 <_Z9hdlcs_runv+0x1e>
{    
    uint8_t hdr[HDLC_HDR_SIZE];
    int hdrlen;

    /* Disconnected Mode response */
    dlog(LOG_WARNING, "request recv'd in disconnected mode");
    8706:	4950      	ldr	r1, [pc, #320]	; (8848 <_Z9hdlcs_runv+0x1e4>)
    8708:	2004      	movs	r0, #4
    870a:	f7fb fd85 	bl	4218 <_Z4dlogiPKcz>
    
    hdlc_hdr(0, hdlc_control(HDLC_DM, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    870e:	0031      	movs	r1, r6
    8710:	2007      	movs	r0, #7
    8712:	f000 fa1b 	bl	8b4c <_Z12hdlc_controlhh>
    8716:	7b62      	ldrb	r2, [r4, #13]
    8718:	7ba3      	ldrb	r3, [r4, #14]
    871a:	0001      	movs	r1, r0
    871c:	ac09      	add	r4, sp, #36	; 0x24
    871e:	a806      	add	r0, sp, #24
    8720:	9001      	str	r0, [sp, #4]
    8722:	9400      	str	r4, [sp, #0]
    8724:	2000      	movs	r0, #0
    8726:	f000 fa99 	bl	8c5c <_Z8hdlc_hdrismmPhPi>
    hdlc_send_frame(hdr, NULL, 0);
    872a:	2200      	movs	r2, #0
    872c:	0020      	movs	r0, r4
    872e:	0011      	movs	r1, r2
    
    /* Frame Reject response */
    dlog(LOG_WARNING, "error - frame rejected");

    hdlc_hdr(0, hdlc_control(HDLC_FRMR, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    hdlc_send_frame(hdr, NULL, 0);
    8730:	f000 fb82 	bl	8e38 <_Z15hdlc_send_framePKhS0_i>
    8734:	e023      	b.n	877e <_Z9hdlcs_runv+0x11a>
        if (hc.type == HDLC_SNRM) {
    8736:	782b      	ldrb	r3, [r5, #0]
    8738:	2b04      	cmp	r3, #4
    873a:	d104      	bne.n	8746 <_Z9hdlcs_runv+0xe2>
            dlog( LOG_DEBUG, "HDLC_SNRM" );
    873c:	4943      	ldr	r1, [pc, #268]	; (884c <_Z9hdlcs_runv+0x1e8>)
    873e:	2007      	movs	r0, #7
    8740:	f7fb fd6a 	bl	4218 <_Z4dlogiPKcz>
    8744:	e7d7      	b.n	86f6 <_Z9hdlcs_runv+0x92>
        else if (hc.type == HDLC_I) {
    8746:	2b01      	cmp	r3, #1
    8748:	d124      	bne.n	8794 <_Z9hdlcs_runv+0x130>
            dlog( LOG_DEBUG, "HDLC_I" );
    874a:	4941      	ldr	r1, [pc, #260]	; (8850 <_Z9hdlcs_runv+0x1ec>)
    874c:	2007      	movs	r0, #7
    874e:	f7fb fd63 	bl	4218 <_Z4dlogiPKcz>
            if (hc.ns != hss.vr) {
    8752:	78ea      	ldrb	r2, [r5, #3]
    8754:	7c23      	ldrb	r3, [r4, #16]
    8756:	429a      	cmp	r2, r3
    8758:	d013      	beq.n	8782 <_Z9hdlcs_runv+0x11e>
                            hc.ns, hss.vr);
    875a:	493e      	ldr	r1, [pc, #248]	; (8854 <_Z9hdlcs_runv+0x1f0>)
    875c:	2003      	movs	r0, #3
    875e:	f7fb fd5b 	bl	4218 <_Z4dlogiPKcz>
            rc = hdlcs_i(hss.recv);
    8762:	69a5      	ldr	r5, [r4, #24]
    ddump(LOG_DEBUG, "Recv I frame", d->data, d->len);
    8764:	2007      	movs	r0, #7
    8766:	882b      	ldrh	r3, [r5, #0]
    8768:	1d2a      	adds	r2, r5, #4
    876a:	493b      	ldr	r1, [pc, #236]	; (8858 <_Z9hdlcs_runv+0x1f4>)
    876c:	f7fb fd76 	bl	425c <_Z5ddumpiPKcPKvi>
    if (hss.icb) {
    8770:	6960      	ldr	r0, [r4, #20]
    8772:	2800      	cmp	r0, #0
    8774:	d00a      	beq.n	878c <_Z9hdlcs_runv+0x128>
        dlog(LOG_ERR, "data CB not supported");
    8776:	4939      	ldr	r1, [pc, #228]	; (885c <_Z9hdlcs_runv+0x1f8>)
    8778:	2003      	movs	r0, #3
    877a:	f7fb fd4d 	bl	4218 <_Z4dlogiPKcz>
            rc = hdlcs_frmr();
    877e:	2000      	movs	r0, #0
    8780:	e7bb      	b.n	86fa <_Z9hdlcs_runv+0x96>
                hss.vr = INCM8(hss.vr);
    8782:	2307      	movs	r3, #7
    8784:	3201      	adds	r2, #1
    8786:	401a      	ands	r2, r3
    8788:	7422      	strb	r2, [r4, #16]
    878a:	e7ea      	b.n	8762 <_Z9hdlcs_runv+0xfe>
        hss.r_complete = 1;
    878c:	2301      	movs	r3, #1
        hss.recv = d;
    878e:	61a5      	str	r5, [r4, #24]
        hss.r_complete = 1;
    8790:	61e3      	str	r3, [r4, #28]
    8792:	e7b2      	b.n	86fa <_Z9hdlcs_runv+0x96>
        else if (hc.type == HDLC_RR) {
    8794:	2b02      	cmp	r3, #2
    8796:	d10c      	bne.n	87b2 <_Z9hdlcs_runv+0x14e>
            dlog( LOG_DEBUG, "HDLC_RR" );
    8798:	4931      	ldr	r1, [pc, #196]	; (8860 <_Z9hdlcs_runv+0x1fc>)
    879a:	2007      	movs	r0, #7
    879c:	f7fb fd3c 	bl	4218 <_Z4dlogiPKcz>
            dlog(LOG_DEBUG, "hc.nr: %d, hss.vs: %d", hc.nr, hss.vs);
    87a0:	7be3      	ldrb	r3, [r4, #15]
    87a2:	78aa      	ldrb	r2, [r5, #2]
    87a4:	492f      	ldr	r1, [pc, #188]	; (8864 <_Z9hdlcs_runv+0x200>)
    87a6:	2007      	movs	r0, #7
    87a8:	f7fb fd36 	bl	4218 <_Z4dlogiPKcz>
            rc = hdlcs_rr();
    87ac:	f7ff ff26 	bl	85fc <_Z8hdlcs_rrv>
    87b0:	e7a3      	b.n	86fa <_Z9hdlcs_runv+0x96>
    87b2:	ad09      	add	r5, sp, #36	; 0x24
        else if (hc.type == HDLC_DISC) {
    87b4:	2b05      	cmp	r3, #5
    87b6:	d127      	bne.n	8808 <_Z9hdlcs_runv+0x1a4>
            pending_rsp = NULL;
    87b8:	2600      	movs	r6, #0
            dlog( LOG_DEBUG, "HDLC_DISC" );
    87ba:	492b      	ldr	r1, [pc, #172]	; (8868 <_Z9hdlcs_runv+0x204>)
    87bc:	2007      	movs	r0, #7
    87be:	f7fb fd2b 	bl	4218 <_Z4dlogiPKcz>
            m_free(pending_rsp);
    87c2:	4f2a      	ldr	r7, [pc, #168]	; (886c <_Z9hdlcs_runv+0x208>)
    87c4:	6838      	ldr	r0, [r7, #0]
    87c6:	f7ff fdf3 	bl	83b0 <_Z6m_freeP4mbuf>
            dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    87ca:	2302      	movs	r3, #2
            pending_rsp = NULL;
    87cc:	603e      	str	r6, [r7, #0]
    hss.state = HSS_DISC;
    87ce:	2701      	movs	r7, #1
            dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    87d0:	33ff      	adds	r3, #255	; 0xff
    87d2:	4a27      	ldr	r2, [pc, #156]	; (8870 <_Z9hdlcs_runv+0x20c>)
    87d4:	4927      	ldr	r1, [pc, #156]	; (8874 <_Z9hdlcs_runv+0x210>)
    87d6:	2007      	movs	r0, #7
    87d8:	f7fb fd1e 	bl	4218 <_Z4dlogiPKcz>
    dlog(LOG_DEBUG, "disconnecting");
    87dc:	4926      	ldr	r1, [pc, #152]	; (8878 <_Z9hdlcs_runv+0x214>)
    87de:	2007      	movs	r0, #7
    hss.state = HSS_DISC;
    87e0:	7327      	strb	r7, [r4, #12]
    dlog(LOG_DEBUG, "disconnecting");
    87e2:	f7fb fd19 	bl	4218 <_Z4dlogiPKcz>
    hdlc_hdr(0, hdlc_control(HDLC_UA, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    87e6:	0039      	movs	r1, r7
    87e8:	2006      	movs	r0, #6
    87ea:	f000 f9af 	bl	8b4c <_Z12hdlc_controlhh>
    87ee:	0001      	movs	r1, r0
    87f0:	a806      	add	r0, sp, #24
    87f2:	7b62      	ldrb	r2, [r4, #13]
    87f4:	7ba3      	ldrb	r3, [r4, #14]
    87f6:	9001      	str	r0, [sp, #4]
    87f8:	9500      	str	r5, [sp, #0]
    87fa:	0030      	movs	r0, r6
    87fc:	f000 fa2e 	bl	8c5c <_Z8hdlc_hdrismmPhPi>
    rc = hdlc_send_frame(hdr, NULL, 0);
    8800:	0032      	movs	r2, r6
    8802:	0031      	movs	r1, r6
    hdlc_send_frame(hdr, NULL, 0);
    8804:	0028      	movs	r0, r5
    8806:	e793      	b.n	8730 <_Z9hdlcs_runv+0xcc>
    dlog(LOG_WARNING, "error - frame rejected");
    8808:	491c      	ldr	r1, [pc, #112]	; (887c <_Z9hdlcs_runv+0x218>)
    880a:	2004      	movs	r0, #4
    880c:	f7fb fd04 	bl	4218 <_Z4dlogiPKcz>
    hdlc_hdr(0, hdlc_control(HDLC_FRMR, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    8810:	2101      	movs	r1, #1
    8812:	2008      	movs	r0, #8
    8814:	f000 f99a 	bl	8b4c <_Z12hdlc_controlhh>
    8818:	0001      	movs	r1, r0
    881a:	a806      	add	r0, sp, #24
    881c:	7b62      	ldrb	r2, [r4, #13]
    881e:	7ba3      	ldrb	r3, [r4, #14]
    8820:	9001      	str	r0, [sp, #4]
    8822:	9500      	str	r5, [sp, #0]
    8824:	2000      	movs	r0, #0
    8826:	f000 fa19 	bl	8c5c <_Z8hdlc_hdrismmPhPi>
    hdlc_send_frame(hdr, NULL, 0);
    882a:	2200      	movs	r2, #0
    882c:	0011      	movs	r1, r2
    882e:	e7e9      	b.n	8804 <_Z9hdlcs_runv+0x1a0>
    8830:	200019f0 	.word	0x200019f0
    8834:	200019ec 	.word	0x200019ec
    8838:	00011ba8 	.word	0x00011ba8
    883c:	00011bcf 	.word	0x00011bcf
    8840:	00011cb4 	.word	0x00011cb4
    8844:	00011cce 	.word	0x00011cce
    8848:	00011be8 	.word	0x00011be8
    884c:	00011c0c 	.word	0x00011c0c
    8850:	00011c16 	.word	0x00011c16
    8854:	00011c1d 	.word	0x00011c1d
    8858:	00011c44 	.word	0x00011c44
    885c:	00011c51 	.word	0x00011c51
    8860:	00011c67 	.word	0x00011c67
    8864:	00011c6f 	.word	0x00011c6f
    8868:	00011c85 	.word	0x00011c85
    886c:	20001984 	.word	0x20001984
    8870:	00011d1b 	.word	0x00011d1b
    8874:	0001173f 	.word	0x0001173f
    8878:	00011c8f 	.word	0x00011c8f
    887c:	00011c9d 	.word	0x00011c9d

00008880 <ultoa>:
        {
            return ultoa(value, string, radix);
        }

        extern char* ultoa(unsigned long value, char*string, int radix)
        {
    8880:	b5f0      	push	{r4, r5, r6, r7, lr}
    8882:	b08d      	sub	sp, #52	; 0x34
    8884:	0007      	movs	r7, r0
    8886:	1e0e      	subs	r6, r1, #0
    8888:	9201      	str	r2, [sp, #4]
            char* tp = tmp;
            long i;
            unsigned long v = value;
            char* sp;

            if (string == NULL)
    888a:	d021      	beq.n	88d0 <ultoa+0x50>
            {
                return 0;
            }

            if (radix > 36 || radix <= 1)
    888c:	0013      	movs	r3, r2
    888e:	3b02      	subs	r3, #2
    8890:	ad03      	add	r5, sp, #12
    8892:	2b22      	cmp	r3, #34	; 0x22
    8894:	d910      	bls.n	88b8 <ultoa+0x38>
                return 0;
    8896:	2600      	movs	r6, #0
    8898:	e01a      	b.n	88d0 <ultoa+0x50>
                return 0;
            }

            while (v || tp == tmp)
            {
                i = v % radix;
    889a:	0038      	movs	r0, r7
    889c:	9901      	ldr	r1, [sp, #4]
    889e:	f001 f827 	bl	98f0 <__aeabi_uidivmod>
                v = v / radix;
    88a2:	0038      	movs	r0, r7
                i = v % radix;
    88a4:	000c      	movs	r4, r1
                v = v / radix;
    88a6:	9901      	ldr	r1, [sp, #4]
    88a8:	f000 ff9c 	bl	97e4 <__udivsi3>
    88ac:	0007      	movs	r7, r0
                if (i < 10)
    88ae:	2c09      	cmp	r4, #9
    88b0:	d811      	bhi.n	88d6 <ultoa+0x56>
                    *tp++ = i + '0';
    88b2:	3430      	adds	r4, #48	; 0x30
                else
                    *tp++ = i + 'a' - 10;
    88b4:	702c      	strb	r4, [r5, #0]
    88b6:	3501      	adds	r5, #1
    88b8:	002b      	movs	r3, r5
            while (v || tp == tmp)
    88ba:	2f00      	cmp	r7, #0
    88bc:	d1ed      	bne.n	889a <ultoa+0x1a>
    88be:	aa03      	add	r2, sp, #12
    88c0:	42aa      	cmp	r2, r5
    88c2:	d0ea      	beq.n	889a <ultoa+0x1a>
    88c4:	0032      	movs	r2, r6
            }

            sp = string;


            while (tp > tmp)
    88c6:	a903      	add	r1, sp, #12
    88c8:	428b      	cmp	r3, r1
    88ca:	d806      	bhi.n	88da <ultoa+0x5a>
                *sp++ = *--tp;
            *sp = 0;
    88cc:	2300      	movs	r3, #0
    88ce:	7013      	strb	r3, [r2, #0]

            return string;
        }
    88d0:	0030      	movs	r0, r6
    88d2:	b00d      	add	sp, #52	; 0x34
    88d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    *tp++ = i + 'a' - 10;
    88d6:	3457      	adds	r4, #87	; 0x57
    88d8:	e7ec      	b.n	88b4 <ultoa+0x34>
                *sp++ = *--tp;
    88da:	3b01      	subs	r3, #1
    88dc:	7819      	ldrb	r1, [r3, #0]
    88de:	7011      	strb	r1, [r2, #0]
    88e0:	3201      	adds	r2, #1
    88e2:	e7f0      	b.n	88c6 <ultoa+0x46>

000088e4 <utoa>:
        {
    88e4:	b510      	push	{r4, lr}
            return ultoa(value, string, radix);
    88e6:	f7ff ffcb 	bl	8880 <ultoa>
        }
    88ea:	bd10      	pop	{r4, pc}

000088ec <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    88ec:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    88ee:	2240      	movs	r2, #64	; 0x40
    88f0:	2100      	movs	r1, #0
RingBuffer::RingBuffer( void )
    88f2:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    88f4:	f004 f8e0 	bl	cab8 <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    88f8:	2300      	movs	r3, #0
}
    88fa:	0020      	movs	r0, r4
	_iHead = 0;
    88fc:	6423      	str	r3, [r4, #64]	; 0x40
	_iTail = 0;
    88fe:	6463      	str	r3, [r4, #68]	; 0x44
}
    8900:	bd10      	pop	{r4, pc}

00008902 <_ZN10RingBuffer10store_charEh>:
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    8902:	223f      	movs	r2, #63	; 0x3f
  int i = nextIndex(_iHead);
    8904:	6c03      	ldr	r3, [r0, #64]	; 0x40
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    8906:	3301      	adds	r3, #1
    8908:	4013      	ands	r3, r2
  if ( i != _iTail )
    890a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    890c:	429a      	cmp	r2, r3
    890e:	d002      	beq.n	8916 <_ZN10RingBuffer10store_charEh+0x14>
    _aucBuffer[_iHead] = c ;
    8910:	6c02      	ldr	r2, [r0, #64]	; 0x40
    8912:	5481      	strb	r1, [r0, r2]
    _iHead = i ;
    8914:	6403      	str	r3, [r0, #64]	; 0x40
}
    8916:	4770      	bx	lr

00008918 <_ZN10RingBuffer5clearEv>:
	_iHead = 0;
    8918:	2300      	movs	r3, #0
    891a:	6403      	str	r3, [r0, #64]	; 0x40
	_iTail = 0;
    891c:	6443      	str	r3, [r0, #68]	; 0x44
}
    891e:	4770      	bx	lr

00008920 <_ZN10RingBuffer9read_charEv>:
	if(_iTail == _iHead)
    8920:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8922:	6c03      	ldr	r3, [r0, #64]	; 0x40
    8924:	429a      	cmp	r2, r3
    8926:	d008      	beq.n	893a <_ZN10RingBuffer9read_charEv+0x1a>
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    8928:	213f      	movs	r1, #63	; 0x3f
	uint8_t value = _aucBuffer[_iTail];
    892a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    892c:	5cc2      	ldrb	r2, [r0, r3]
	_iTail = nextIndex(_iTail);
    892e:	6c43      	ldr	r3, [r0, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    8930:	3301      	adds	r3, #1
    8932:	400b      	ands	r3, r1
	_iTail = nextIndex(_iTail);
    8934:	6443      	str	r3, [r0, #68]	; 0x44
	return value;
    8936:	0010      	movs	r0, r2
}
    8938:	4770      	bx	lr
		return -1;
    893a:	2001      	movs	r0, #1
    893c:	4240      	negs	r0, r0
    893e:	e7fb      	b.n	8938 <_ZN10RingBuffer9read_charEv+0x18>

00008940 <_ZN10RingBuffer9availableEv>:
	int delta = _iHead - _iTail;
    8940:	6c03      	ldr	r3, [r0, #64]	; 0x40
    8942:	6c40      	ldr	r0, [r0, #68]	; 0x44
    8944:	1a18      	subs	r0, r3, r0
	if(delta < 0)
    8946:	d500      	bpl.n	894a <_ZN10RingBuffer9availableEv+0xa>
		return SERIAL_BUFFER_SIZE + delta;
    8948:	3040      	adds	r0, #64	; 0x40
}
    894a:	4770      	bx	lr

0000894c <_ZN10RingBuffer17availableForStoreEv>:
	if (_iHead >= _iTail)
    894c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    894e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8950:	429a      	cmp	r2, r3
    8952:	db04      	blt.n	895e <_ZN10RingBuffer17availableForStoreEv+0x12>
		return SERIAL_BUFFER_SIZE - 1 - _iHead + _iTail;
    8954:	6c03      	ldr	r3, [r0, #64]	; 0x40
    8956:	6c40      	ldr	r0, [r0, #68]	; 0x44
    8958:	1ac0      	subs	r0, r0, r3
    895a:	303f      	adds	r0, #63	; 0x3f
}
    895c:	4770      	bx	lr
		return _iTail - _iHead - 1;
    895e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8960:	6c00      	ldr	r0, [r0, #64]	; 0x40
    8962:	1a18      	subs	r0, r3, r0
    8964:	3801      	subs	r0, #1
    8966:	e7f9      	b.n	895c <_ZN10RingBuffer17availableForStoreEv+0x10>

00008968 <_ZN10RingBuffer4peekEv>:
	if(_iTail == _iHead)
    8968:	6c42      	ldr	r2, [r0, #68]	; 0x44
    896a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    896c:	429a      	cmp	r2, r3
    896e:	d002      	beq.n	8976 <_ZN10RingBuffer4peekEv+0xe>
	return _aucBuffer[_iTail];
    8970:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8972:	5cc0      	ldrb	r0, [r0, r3]
}
    8974:	4770      	bx	lr
		return -1;
    8976:	2001      	movs	r0, #1
    8978:	4240      	negs	r0, r0
    897a:	e7fb      	b.n	8974 <_ZN10RingBuffer4peekEv+0xc>

0000897c <_ZN10RingBuffer6isFullEv>:
}

bool RingBuffer::isFull()
{
    897c:	0003      	movs	r3, r0
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    897e:	223f      	movs	r2, #63	; 0x3f
	return (nextIndex(_iHead) == _iTail);
    8980:	6c00      	ldr	r0, [r0, #64]	; 0x40
    8982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    8984:	3001      	adds	r0, #1
    8986:	4010      	ands	r0, r2
	return (nextIndex(_iHead) == _iTail);
    8988:	1ac0      	subs	r0, r0, r3
    898a:	4243      	negs	r3, r0
    898c:	4158      	adcs	r0, r3
    898e:	b2c0      	uxtb	r0, r0
}
    8990:	4770      	bx	lr

00008992 <_ZN11DiagnosticsD1Ev>:
 class Diagnostics {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
  ~Diagnostics(void){};
    8992:	4770      	bx	lr

00008994 <_ZN11Diagnostics17_printSupportLinkEv>:
    Serial.print(F("0"));
  }
  Serial.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
    8994:	b510      	push	{r4, lr}
  Serial.print(F("If this does not help resolve/clarify this issue, "));
    8996:	4c05      	ldr	r4, [pc, #20]	; (89ac <_ZN11Diagnostics17_printSupportLinkEv+0x18>)
    8998:	4905      	ldr	r1, [pc, #20]	; (89b0 <_ZN11Diagnostics17_printSupportLinkEv+0x1c>)
    899a:	0020      	movs	r0, r4
    899c:	f7fc f9d4 	bl	4d48 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(F("please raise an issue at http://www.github.com/Marzogh/SPIMemory/issues with the details of what your were doing when this error occurred"));
    89a0:	4904      	ldr	r1, [pc, #16]	; (89b4 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
    89a2:	0020      	movs	r0, r4
    89a4:	f7fc f9ec 	bl	4d80 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    89a8:	bd10      	pop	{r4, pc}
    89aa:	46c0      	nop			; (mov r8, r8)
    89ac:	20001264 	.word	0x20001264
    89b0:	0001227a 	.word	0x0001227a
    89b4:	000122ad 	.word	0x000122ad

000089b8 <_ZN11Diagnostics12troubleshootEhb>:
//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
    89b8:	b570      	push	{r4, r5, r6, lr}
    89ba:	0006      	movs	r6, r0
    89bc:	000d      	movs	r5, r1
  bool _printoverride;
  errorcode = _code;
    89be:	7031      	strb	r1, [r6, #0]
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
#endif
  if (_printoverride) {
    89c0:	2a00      	cmp	r2, #0
    89c2:	d014      	beq.n	89ee <_ZN11Diagnostics12troubleshootEhb+0x36>
    89c4:	4c2e      	ldr	r4, [pc, #184]	; (8a80 <_ZN11Diagnostics12troubleshootEhb+0xc8>)
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
    89c6:	2914      	cmp	r1, #20
    89c8:	d84c      	bhi.n	8a64 <_ZN11Diagnostics12troubleshootEhb+0xac>
    89ca:	0008      	movs	r0, r1
    89cc:	f000 ff00 	bl	97d0 <__gnu_thumb1_case_uqi>
    89d0:	1c1a180b 	.word	0x1c1a180b
    89d4:	2c26241e 	.word	0x2c26241e
    89d8:	10383632 	.word	0x10383632
    89dc:	3e3c3a34 	.word	0x3e3c3a34
    89e0:	46444240 	.word	0x46444240
    89e4:	48          	.byte	0x48
    89e5:	00          	.byte	0x00
      case SUCCESS:
      Serial.println(F("Function executed successfully"));
    89e6:	4927      	ldr	r1, [pc, #156]	; (8a84 <_ZN11Diagnostics12troubleshootEhb+0xcc>)
      case NORESPONSE:
      Serial.println(F("Check your wiring. Flash chip is non-responsive."));
      break;

      case CALLBEGIN:
      Serial.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    89e8:	0020      	movs	r0, r4
    89ea:	f7fc f9c9 	bl	4d80 <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
      _printSupportLink();
    }
  #endif
  }
}
    89ee:	bd70      	pop	{r4, r5, r6, pc}
      Serial.println(F("Check your wiring. Flash chip is non-responsive."));
    89f0:	4925      	ldr	r1, [pc, #148]	; (8a88 <_ZN11Diagnostics12troubleshootEhb+0xd0>)
      Serial.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    89f2:	0020      	movs	r0, r4
    89f4:	f7fc f9c4 	bl	4d80 <_ZN5Print7printlnEPK19__FlashStringHelper>
      _printSupportLink();
    89f8:	0030      	movs	r0, r6
    89fa:	f7ff ffcb 	bl	8994 <_ZN11Diagnostics17_printSupportLinkEv>
}
    89fe:	e7f6      	b.n	89ee <_ZN11Diagnostics12troubleshootEhb+0x36>
      Serial.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    8a00:	4922      	ldr	r1, [pc, #136]	; (8a8c <_ZN11Diagnostics12troubleshootEhb+0xd4>)
    8a02:	e7f1      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    8a04:	4922      	ldr	r1, [pc, #136]	; (8a90 <_ZN11Diagnostics12troubleshootEhb+0xd8>)
    8a06:	e7f4      	b.n	89f2 <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
    8a08:	4922      	ldr	r1, [pc, #136]	; (8a94 <_ZN11Diagnostics12troubleshootEhb+0xdc>)
    8a0a:	e7ed      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Chip is busy."));
    8a0c:	4922      	ldr	r1, [pc, #136]	; (8a98 <_ZN11Diagnostics12troubleshootEhb+0xe0>)
    8a0e:	0020      	movs	r0, r4
    8a10:	f7fc f9b6 	bl	4d80 <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Make sure all pins have been connected properly"));
    8a14:	4921      	ldr	r1, [pc, #132]	; (8a9c <_ZN11Diagnostics12troubleshootEhb+0xe4>)
    8a16:	e7e7      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Page overflow has been disabled and the address called exceeds the memory"));
    8a18:	4921      	ldr	r1, [pc, #132]	; (8aa0 <_ZN11Diagnostics12troubleshootEhb+0xe8>)
    8a1a:	e7e5      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to Enable Writing to chip."));
    8a1c:	4921      	ldr	r1, [pc, #132]	; (8aa4 <_ZN11Diagnostics12troubleshootEhb+0xec>)
    8a1e:	0020      	movs	r0, r4
    8a20:	f7fc f9ae 	bl	4d80 <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
    8a24:	4920      	ldr	r1, [pc, #128]	; (8aa8 <_ZN11Diagnostics12troubleshootEhb+0xf0>)
    8a26:	e7e4      	b.n	89f2 <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("This sector already contains data."));
    8a28:	4920      	ldr	r1, [pc, #128]	; (8aac <_ZN11Diagnostics12troubleshootEhb+0xf4>)
    8a2a:	0020      	movs	r0, r4
    8a2c:	f7fc f9a8 	bl	4d80 <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Please make sure the sectors being written to are erased."));
    8a30:	491f      	ldr	r1, [pc, #124]	; (8ab0 <_ZN11Diagnostics12troubleshootEhb+0xf8>)
    8a32:	e7d9      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
    8a34:	491f      	ldr	r1, [pc, #124]	; (8ab4 <_ZN11Diagnostics12troubleshootEhb+0xfc>)
    8a36:	e7d7      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("This function is not supported by the flash memory hardware."));
    8a38:	491f      	ldr	r1, [pc, #124]	; (8ab8 <_ZN11Diagnostics12troubleshootEhb+0x100>)
    8a3a:	e7d5      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to suspend/resume operation."));
    8a3c:	491f      	ldr	r1, [pc, #124]	; (8abc <_ZN11Diagnostics12troubleshootEhb+0x104>)
    8a3e:	e7d3      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Write Function has failed errorcheck."));
    8a40:	491f      	ldr	r1, [pc, #124]	; (8ac0 <_ZN11Diagnostics12troubleshootEhb+0x108>)
    8a42:	e7d6      	b.n	89f2 <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("Unable to enable 4-byte addressing."));
    8a44:	491f      	ldr	r1, [pc, #124]	; (8ac4 <_ZN11Diagnostics12troubleshootEhb+0x10c>)
    8a46:	e7cf      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to disable 4-byte addressing."));
    8a48:	491f      	ldr	r1, [pc, #124]	; (8ac8 <_ZN11Diagnostics12troubleshootEhb+0x110>)
    8a4a:	e7cd      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("The chip is currently powered down."));
    8a4c:	491f      	ldr	r1, [pc, #124]	; (8acc <_ZN11Diagnostics12troubleshootEhb+0x114>)
    8a4e:	e7cb      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("The Flash chip does not support SFDP."));
    8a50:	491f      	ldr	r1, [pc, #124]	; (8ad0 <_ZN11Diagnostics12troubleshootEhb+0x118>)
    8a52:	e7c9      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
    8a54:	491f      	ldr	r1, [pc, #124]	; (8ad4 <_ZN11Diagnostics12troubleshootEhb+0x11c>)
    8a56:	e7c7      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
    8a58:	491f      	ldr	r1, [pc, #124]	; (8ad8 <_ZN11Diagnostics12troubleshootEhb+0x120>)
    8a5a:	e7c5      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
    8a5c:	491f      	ldr	r1, [pc, #124]	; (8adc <_ZN11Diagnostics12troubleshootEhb+0x124>)
    8a5e:	e7c3      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("No Chip Select pin defined in the custom SPI Array."));
    8a60:	491f      	ldr	r1, [pc, #124]	; (8ae0 <_ZN11Diagnostics12troubleshootEhb+0x128>)
    8a62:	e7c1      	b.n	89e8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unknown error"));
    8a64:	491f      	ldr	r1, [pc, #124]	; (8ae4 <_ZN11Diagnostics12troubleshootEhb+0x12c>)
    8a66:	0020      	movs	r0, r4
    8a68:	f7fc f98a 	bl	4d80 <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
    8a6c:	002b      	movs	r3, r5
    8a6e:	3b0a      	subs	r3, #10
    8a70:	2b01      	cmp	r3, #1
    8a72:	d9c1      	bls.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x40>
    8a74:	2304      	movs	r3, #4
    8a76:	439d      	bics	r5, r3
    8a78:	2d02      	cmp	r5, #2
    8a7a:	d0bd      	beq.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x40>
    8a7c:	e7b7      	b.n	89ee <_ZN11Diagnostics12troubleshootEhb+0x36>
    8a7e:	46c0      	nop			; (mov r8, r8)
    8a80:	20001264 	.word	0x20001264
    8a84:	00011d3d 	.word	0x00011d3d
    8a88:	00011d5c 	.word	0x00011d5c
    8a8c:	00011d8d 	.word	0x00011d8d
    8a90:	00011dcc 	.word	0x00011dcc
    8a94:	00011e0a 	.word	0x00011e0a
    8a98:	00011e9f 	.word	0x00011e9f
    8a9c:	00011ead 	.word	0x00011ead
    8aa0:	00011edd 	.word	0x00011edd
    8aa4:	00011f27 	.word	0x00011f27
    8aa8:	00011f49 	.word	0x00011f49
    8aac:	00011f8c 	.word	0x00011f8c
    8ab0:	00011faf 	.word	0x00011faf
    8ab4:	00011fe9 	.word	0x00011fe9
    8ab8:	00012038 	.word	0x00012038
    8abc:	00012075 	.word	0x00012075
    8ac0:	00012099 	.word	0x00012099
    8ac4:	000120bf 	.word	0x000120bf
    8ac8:	000120e3 	.word	0x000120e3
    8acc:	00012108 	.word	0x00012108
    8ad0:	0001212c 	.word	0x0001212c
    8ad4:	00012152 	.word	0x00012152
    8ad8:	0001219c 	.word	0x0001219c
    8adc:	000121e9 	.word	0x000121e9
    8ae0:	00012238 	.word	0x00012238
    8ae4:	0001226c 	.word	0x0001226c

00008ae8 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
    8ae8:	b510      	push	{r4, lr}
    8aea:	4a03      	ldr	r2, [pc, #12]	; (8af8 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x10>)
    8aec:	4903      	ldr	r1, [pc, #12]	; (8afc <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x14>)
    8aee:	4804      	ldr	r0, [pc, #16]	; (8b00 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x18>)
    8af0:	f000 fbb8 	bl	9264 <__aeabi_atexit>
    8af4:	bd10      	pop	{r4, pc}
    8af6:	46c0      	nop			; (mov r8, r8)
    8af8:	20000000 	.word	0x20000000
    8afc:	00008993 	.word	0x00008993
    8b00:	20001a10 	.word	0x20001a10

00008b04 <_Z9hdlc_initP14HardwareSerialm>:

// Pointer to Serial console and UART
static HardwareSerial * pU;
#define uart (*pU)
void hdlc_init( HardwareSerial * pUART, uint32_t max_info_len )
{
    8b04:	b510      	push	{r4, lr}
    8b06:	000c      	movs	r4, r1
	// Set pointer to UART object
	pU = pUART;

	// Set baud rate for the mShield UART
	// NOTE: This baud rate is fixed and cannot be changed
	uart.begin(UART_BAUD_RATE);
    8b08:	2196      	movs	r1, #150	; 0x96
	pU = pUART;
    8b0a:	4b04      	ldr	r3, [pc, #16]	; (8b1c <_Z9hdlc_initP14HardwareSerialm+0x18>)
	uart.begin(UART_BAUD_RATE);
    8b0c:	0209      	lsls	r1, r1, #8
	pU = pUART;
    8b0e:	6018      	str	r0, [r3, #0]
	uart.begin(UART_BAUD_RATE);
    8b10:	6803      	ldr	r3, [r0, #0]
    8b12:	69db      	ldr	r3, [r3, #28]
    8b14:	4798      	blx	r3
	
	// Set the max payload size
	max_payload_size = max_info_len;
    8b16:	4b02      	ldr	r3, [pc, #8]	; (8b20 <_Z9hdlc_initP14HardwareSerialm+0x1c>)
    8b18:	601c      	str	r4, [r3, #0]

} // hdlc_set_serial
    8b1a:	bd10      	pop	{r4, pc}
    8b1c:	20001e1c 	.word	0x20001e1c
    8b20:	20001e18 	.word	0x20001e18

00008b24 <_Z14hdlc_control_ihhh>:


uint8_t
hdlc_control_i(uint8_t nr, uint8_t ns, uint8_t pf)
{
    return ((nr & 0x07) << 5) | ((pf  & 0x01) << 4) | ((ns & 0x07) << 1);
    8b24:	2310      	movs	r3, #16
    8b26:	0112      	lsls	r2, r2, #4
    8b28:	401a      	ands	r2, r3
    8b2a:	0140      	lsls	r0, r0, #5
    8b2c:	4310      	orrs	r0, r2
    8b2e:	220e      	movs	r2, #14
    8b30:	0049      	lsls	r1, r1, #1
    8b32:	4011      	ands	r1, r2
    8b34:	4308      	orrs	r0, r1
    8b36:	b2c0      	uxtb	r0, r0
}    
    8b38:	4770      	bx	lr

00008b3a <_Z15hdlc_control_rrhh>:

uint8_t
hdlc_control_rr(uint8_t nr, uint8_t pf)
{
   return ((nr & 0x07) << 5) | ((pf & 0x01) << 4) | 0x01;
    8b3a:	2310      	movs	r3, #16
    8b3c:	0109      	lsls	r1, r1, #4
    8b3e:	4019      	ands	r1, r3
    8b40:	0140      	lsls	r0, r0, #5
    8b42:	4308      	orrs	r0, r1
    8b44:	2101      	movs	r1, #1
    8b46:	4308      	orrs	r0, r1
    8b48:	b2c0      	uxtb	r0, r0
}
    8b4a:	4770      	bx	lr

00008b4c <_Z12hdlc_controlhh>:
int16_t
hdlc_control(uint8_t type, uint8_t pf)
{
    uint8_t control;
    
    switch (type) {        
    8b4c:	3804      	subs	r0, #4
{
    8b4e:	b500      	push	{lr}
    switch (type) {        
    8b50:	2805      	cmp	r0, #5
    8b52:	d815      	bhi.n	8b80 <_Z12hdlc_controlhh+0x34>
    8b54:	f000 fe3c 	bl	97d0 <__gnu_thumb1_case_uqi>
    8b58:	0c0a0312 	.word	0x0c0a0312
    8b5c:	100e      	.short	0x100e
        case HDLC_SNRM: control = 0x83; break;
        case HDLC_DISC: control = 0x43; break;
    8b5e:	2043      	movs	r0, #67	; 0x43
        case HDLC_UI:   control = 0x03; break;
        default:
            return HDLC_FC_INVALID;
    }

    if (pf) {
    8b60:	2900      	cmp	r1, #0
    8b62:	d001      	beq.n	8b68 <_Z12hdlc_controlhh+0x1c>
        control |= 0x10;
    8b64:	2310      	movs	r3, #16
    8b66:	4318      	orrs	r0, r3
    }
    return control;
    8b68:	b200      	sxth	r0, r0
}
    8b6a:	bd00      	pop	{pc}
        case HDLC_UA:   control = 0x63; break;
    8b6c:	2063      	movs	r0, #99	; 0x63
    8b6e:	e7f7      	b.n	8b60 <_Z12hdlc_controlhh+0x14>
        case HDLC_DM:   control = 0x0F; break;
    8b70:	200f      	movs	r0, #15
    8b72:	e7f5      	b.n	8b60 <_Z12hdlc_controlhh+0x14>
        case HDLC_FRMR: control = 0x87; break;
    8b74:	2087      	movs	r0, #135	; 0x87
    8b76:	e7f3      	b.n	8b60 <_Z12hdlc_controlhh+0x14>
        case HDLC_UI:   control = 0x03; break;
    8b78:	2003      	movs	r0, #3
    8b7a:	e7f1      	b.n	8b60 <_Z12hdlc_controlhh+0x14>
        case HDLC_SNRM: control = 0x83; break;
    8b7c:	2083      	movs	r0, #131	; 0x83
    8b7e:	e7ef      	b.n	8b60 <_Z12hdlc_controlhh+0x14>
            return HDLC_FC_INVALID;
    8b80:	2001      	movs	r0, #1
    8b82:	4240      	negs	r0, r0
    8b84:	e7f1      	b.n	8b6a <_Z12hdlc_controlhh+0x1e>
	...

00008b88 <_Z18hdlc_parse_controlhP9hdlc_ctrl>:


int
hdlc_parse_control(uint8_t ctrl, struct hdlc_ctrl *hc) 
                 //  uint8_t *type, uint8_t *pf, uint8_t *nr, uint8_t *ns)
{
    8b88:	b570      	push	{r4, r5, r6, lr}
    8b8a:	000d      	movs	r5, r1
    uint8_t c2;
    int rc = 0;

    memset(hc, 0, sizeof (*hc));
    8b8c:	2604      	movs	r6, #4
{
    8b8e:	0004      	movs	r4, r0
    memset(hc, 0, sizeof (*hc));
    8b90:	0032      	movs	r2, r6
    8b92:	2100      	movs	r1, #0
    8b94:	0028      	movs	r0, r5
    8b96:	f003 ff8f 	bl	cab8 <memset>

    if ((ctrl & 1) == 0) {              /* I frame */
    8b9a:	2201      	movs	r2, #1
    8b9c:	0023      	movs	r3, r4
    8b9e:	1121      	asrs	r1, r4, #4
    8ba0:	4013      	ands	r3, r2
    8ba2:	d10f      	bne.n	8bc4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x3c>
        hc->type = HDLC_I;
        hc->nr = (ctrl & 0xE0) >> 5;
    8ba4:	0960      	lsrs	r0, r4, #5
        hc->pf = (ctrl & 0x10) >> 4;
        hc->ns = (ctrl & 0x0E) >> 1;
    8ba6:	0724      	lsls	r4, r4, #28
        hc->type = HDLC_I;
    8ba8:	702a      	strb	r2, [r5, #0]
        hc->ns = (ctrl & 0x0E) >> 1;
    8baa:	0f64      	lsrs	r4, r4, #29
        hc->pf = (ctrl & 0x10) >> 4;
    8bac:	400a      	ands	r2, r1
        hc->nr = (ctrl & 0xE0) >> 5;
    8bae:	70a8      	strb	r0, [r5, #2]
        hc->pf = (ctrl & 0x10) >> 4;
    8bb0:	706a      	strb	r2, [r5, #1]
        hc->ns = (ctrl & 0x0E) >> 1;
    8bb2:	70ec      	strb	r4, [r5, #3]
    int rc = 0;
    8bb4:	2400      	movs	r4, #0
            case 0x03:  hc->type = HDLC_UI;    break;
            default:
                rc = 1;     /* Unknown frame - error */
        }
    }
    dlog(LOG_DEBUG, "frame type: 0x%x", hc->type);
    8bb6:	782a      	ldrb	r2, [r5, #0]
    8bb8:	491c      	ldr	r1, [pc, #112]	; (8c2c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0xa4>)
    8bba:	2007      	movs	r0, #7
    8bbc:	f7fb fb2c 	bl	4218 <_Z4dlogiPKcz>

    return rc;
}
    8bc0:	0020      	movs	r0, r4
    8bc2:	bd70      	pop	{r4, r5, r6, pc}
    8bc4:	230f      	movs	r3, #15
    8bc6:	4023      	ands	r3, r4
    else if ((ctrl & 0x0F) == 1) {      /* RR frame */
    8bc8:	2b01      	cmp	r3, #1
    8bca:	d106      	bne.n	8bda <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x52>
        hc->type = HDLC_RR;
    8bcc:	2202      	movs	r2, #2
        hc->nr = (ctrl & 0xE0) >> 5;
    8bce:	0964      	lsrs	r4, r4, #5
        hc->pf = (ctrl & 0x10) >> 4;
    8bd0:	400b      	ands	r3, r1
        hc->type = HDLC_RR;
    8bd2:	702a      	strb	r2, [r5, #0]
        hc->nr = (ctrl & 0xE0) >> 5;
    8bd4:	70ac      	strb	r4, [r5, #2]
        hc->pf = (ctrl & 0x10) >> 4;
    8bd6:	706b      	strb	r3, [r5, #1]
    8bd8:	e7ec      	b.n	8bb4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
    else if ((ctrl & 0x0F) == 5) {      /* RNR frame */
    8bda:	2b05      	cmp	r3, #5
    8bdc:	d106      	bne.n	8bec <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x64>
        hc->type = HDLC_RNR;
    8bde:	3b02      	subs	r3, #2
        hc->nr = (ctrl & 0xE0) >> 5;
    8be0:	0964      	lsrs	r4, r4, #5
        hc->pf  = (ctrl & 0x10) >> 4;
    8be2:	400a      	ands	r2, r1
        hc->type = HDLC_RNR;
    8be4:	702b      	strb	r3, [r5, #0]
        hc->nr = (ctrl & 0xE0) >> 5;
    8be6:	70ac      	strb	r4, [r5, #2]
        hc->pf  = (ctrl & 0x10) >> 4;
    8be8:	706a      	strb	r2, [r5, #1]
    8bea:	e7e3      	b.n	8bb4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
        switch (c2) {
    8bec:	2310      	movs	r3, #16
        hc->pf = (ctrl & 0x10) >> 4;
    8bee:	400a      	ands	r2, r1
    8bf0:	706a      	strb	r2, [r5, #1]
        switch (c2) {
    8bf2:	439c      	bics	r4, r3
    8bf4:	2c43      	cmp	r4, #67	; 0x43
    8bf6:	d011      	beq.n	8c1c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x94>
    8bf8:	d806      	bhi.n	8c08 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x80>
    8bfa:	2c03      	cmp	r4, #3
    8bfc:	d013      	beq.n	8c26 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x9e>
            case 0x0F:  hc->type = HDLC_DM;    break;
    8bfe:	2307      	movs	r3, #7
        switch (c2) {
    8c00:	2c0f      	cmp	r4, #15
    8c02:	d00c      	beq.n	8c1e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
                rc = 1;     /* Unknown frame - error */
    8c04:	2401      	movs	r4, #1
    8c06:	e7d6      	b.n	8bb6 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2e>
        switch (c2) {
    8c08:	2c83      	cmp	r4, #131	; 0x83
    8c0a:	d005      	beq.n	8c18 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x90>
    8c0c:	2c87      	cmp	r4, #135	; 0x87
    8c0e:	d008      	beq.n	8c22 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x9a>
    8c10:	2c63      	cmp	r4, #99	; 0x63
    8c12:	d1f7      	bne.n	8c04 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x7c>
            case 0x63:  hc->type = HDLC_UA;    break;
    8c14:	2306      	movs	r3, #6
    8c16:	e002      	b.n	8c1e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
            case 0x83:  hc->type = HDLC_SNRM;  break;
    8c18:	702e      	strb	r6, [r5, #0]
    8c1a:	e7cb      	b.n	8bb4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
            case 0x43:  hc->type = HDLC_DISC;  break;
    8c1c:	2305      	movs	r3, #5
            case 0x03:  hc->type = HDLC_UI;    break;
    8c1e:	702b      	strb	r3, [r5, #0]
    8c20:	e7c8      	b.n	8bb4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
            case 0x87:  hc->type = HDLC_FRMR;  break;
    8c22:	2308      	movs	r3, #8
    8c24:	e7fb      	b.n	8c1e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
            case 0x03:  hc->type = HDLC_UI;    break;
    8c26:	2309      	movs	r3, #9
    8c28:	e7f9      	b.n	8c1e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
    8c2a:	46c0      	nop			; (mov r8, r8)
    8c2c:	0001239a 	.word	0x0001239a

00008c30 <_Z16hdlc_addr_encodem>:
 * Limited to single byte encoding only
*/
uint8_t
hdlc_addr_encode(uint32_t address)
{    
    return ((address & 0x7F) << 1) | 1;
    8c30:	0043      	lsls	r3, r0, #1
    8c32:	2001      	movs	r0, #1
    8c34:	4318      	orrs	r0, r3
    8c36:	b2c0      	uxtb	r0, r0
}
    8c38:	4770      	bx	lr

00008c3a <_Z15hdlc_parse_addrPKhiPmPi>:
 *              0 means input was found incomplete
 */

int
hdlc_parse_addr(const uint8_t *buf, int len, uint32_t *eaddr, int *al)
{
    8c3a:	b570      	push	{r4, r5, r6, lr}
    *eaddr = 0;
    8c3c:	2400      	movs	r4, #0
    8c3e:	2501      	movs	r5, #1
{
    8c40:	0006      	movs	r6, r0
    *eaddr = 0;
    8c42:	6014      	str	r4, [r2, #0]
        goto err;
    }
    
    return 0;
err:
    return 1;
    8c44:	0028      	movs	r0, r5
    *al = 0;
    8c46:	601c      	str	r4, [r3, #0]
    if ((len >= 1) &&(buf[0] & 1)) {
    8c48:	42a1      	cmp	r1, r4
    8c4a:	dd05      	ble.n	8c58 <_Z15hdlc_parse_addrPKhiPmPi+0x1e>
    8c4c:	7831      	ldrb	r1, [r6, #0]
    8c4e:	4229      	tst	r1, r5
    8c50:	d002      	beq.n	8c58 <_Z15hdlc_parse_addrPKhiPmPi+0x1e>
    return 0;
    8c52:	0020      	movs	r0, r4
        memcpy(eaddr, buf, 1);
    8c54:	7011      	strb	r1, [r2, #0]
        *al = 1;               
    8c56:	601d      	str	r5, [r3, #0]
}
    8c58:	bd70      	pop	{r4, r5, r6, pc}
	...

00008c5c <_Z8hdlc_hdrismmPhPi>:
 *
 */
int
hdlc_hdr(int segment, int16_t fcontrol, uint32_t dst, uint32_t src,
    uint8_t *buf, int *hdrlen)
{
    8c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c5e:	9c06      	ldr	r4, [sp, #24]
    8c60:	001e      	movs	r6, r3
    8c62:	000d      	movs	r5, r1
    8c64:	0017      	movs	r7, r2
    hcs = crc16(crc16_init(), buf, *hdrlen - 2);
    buf_wle16(b, 0, ~hcs);
   
    return 0;
err:
    return 1;
    8c66:	2301      	movs	r3, #1
    if (fcontrol == HDLC_FC_INVALID || dst > 0x7f || src > 0x7f) {
    8c68:	1c4a      	adds	r2, r1, #1
    8c6a:	d021      	beq.n	8cb0 <_Z8hdlc_hdrismmPhPi+0x54>
    8c6c:	2f7f      	cmp	r7, #127	; 0x7f
    8c6e:	d81f      	bhi.n	8cb0 <_Z8hdlc_hdrismmPhPi+0x54>
    8c70:	2e7f      	cmp	r6, #127	; 0x7f
    8c72:	d81d      	bhi.n	8cb0 <_Z8hdlc_hdrismmPhPi+0x54>
    *hdrlen = HDLC_HDR_SIZE;   /* incl. two bytes of HCS */ 
    8c74:	2207      	movs	r2, #7
    8c76:	9b07      	ldr	r3, [sp, #28]
    8c78:	601a      	str	r2, [r3, #0]
    buf_wbe16(buf, 0, 0xA000 | (segment ? 0x0800 : 0) | *hdrlen);
    8c7a:	2800      	cmp	r0, #0
    8c7c:	d11a      	bne.n	8cb4 <_Z8hdlc_hdrismmPhPi+0x58>
    8c7e:	4b0e      	ldr	r3, [pc, #56]	; (8cb8 <_Z8hdlc_hdrismmPhPi+0x5c>)
    8c80:	431a      	orrs	r2, r3
    8c82:	b292      	uxth	r2, r2
    8c84:	2100      	movs	r1, #0
    8c86:	0020      	movs	r0, r4
    8c88:	f000 fab3 	bl	91f2 <_Z9buf_wbe16Pvit>
    *b++ = dst;     //hdlc_addr_encode(dst);
    8c8c:	70a7      	strb	r7, [r4, #2]
    *b++ = src;     //hdlc_addr_encode(src);
    8c8e:	70e6      	strb	r6, [r4, #3]
    *b++ = fcontrol;
    8c90:	7125      	strb	r5, [r4, #4]
    hcs = crc16(crc16_init(), buf, *hdrlen - 2);
    8c92:	f000 fac1 	bl	9218 <_Z10crc16_initv>
    8c96:	9b07      	ldr	r3, [sp, #28]
    8c98:	0021      	movs	r1, r4
    8c9a:	681a      	ldr	r2, [r3, #0]
    8c9c:	3a02      	subs	r2, #2
    8c9e:	f000 fabf 	bl	9220 <_Z5crc16tPKvj>
    buf_wle16(b, 0, ~hcs);
    8ca2:	43c2      	mvns	r2, r0
    8ca4:	2100      	movs	r1, #0
    8ca6:	b292      	uxth	r2, r2
    *b++ = fcontrol;
    8ca8:	1d60      	adds	r0, r4, #5
    buf_wle16(b, 0, ~hcs);
    8caa:	f000 faa7 	bl	91fc <_Z9buf_wle16Pvit>
    return 0;
    8cae:	2300      	movs	r3, #0
}
    8cb0:	0018      	movs	r0, r3
    8cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf_wbe16(buf, 0, 0xA000 | (segment ? 0x0800 : 0) | *hdrlen);
    8cb4:	4b01      	ldr	r3, [pc, #4]	; (8cbc <_Z8hdlc_hdrismmPhPi+0x60>)
    8cb6:	e7e3      	b.n	8c80 <_Z8hdlc_hdrismmPhPi+0x24>
    8cb8:	ffffa000 	.word	0xffffa000
    8cbc:	ffffa800 	.word	0xffffa800

00008cc0 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_>:
 * at the tail of info
 */
int
hdlc_frm_add_info(const uint8_t *hdr, uint8_t *fhdr, 
    const uint8_t *info, int infolen, uint8_t *fmfcs)
{
    8cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8cc2:	000d      	movs	r5, r1
    int fmt, hdrlen;
    uint16_t hcs, fcs;
    
    fmt = buf_be16(hdr, 0);
    8cc4:	2100      	movs	r1, #0
{
    8cc6:	0007      	movs	r7, r0
    8cc8:	9201      	str	r2, [sp, #4]
    8cca:	001e      	movs	r6, r3
    fmt = buf_be16(hdr, 0);
    8ccc:	f000 fa8b 	bl	91e6 <_Z8buf_be16PKvi>
    8cd0:	0544      	lsls	r4, r0, #21
    8cd2:	9000      	str	r0, [sp, #0]
    8cd4:	0d64      	lsrs	r4, r4, #21
    hdrlen = fmt & 0x07FF;
    fmt = fmt & 0xF800;

    if (hdrlen > HDLC_HDR_MAX) {
        return 1;
    8cd6:	2001      	movs	r0, #1
    if (hdrlen > HDLC_HDR_MAX) {
    8cd8:	2c07      	cmp	r4, #7
    8cda:	d830      	bhi.n	8d3e <_Z17hdlc_frm_add_infoPKhPhS0_iS1_+0x7e>
    }

    memcpy(fhdr, hdr, hdrlen);
    8cdc:	0022      	movs	r2, r4
    8cde:	0039      	movs	r1, r7
    8ce0:	0028      	movs	r0, r5
    8ce2:	f003 fece 	bl	ca82 <memcpy>
        fcs = crc16(crc16_init(), fhdr, hdrlen);
        fcs = crc16(fcs, info, infolen);
        /* final byte order - ready to be appended to frame */
        buf_wle16(fmfcs, 0, ~fcs);
    }
    return 0;
    8ce6:	2000      	movs	r0, #0
    if (infolen > 0) {           
    8ce8:	4286      	cmp	r6, r0
    8cea:	dd28      	ble.n	8d3e <_Z17hdlc_frm_add_infoPKhPhS0_iS1_+0x7e>
        buf_wbe16(fhdr, 0, fmt | (hdrlen + infolen + 2));
    8cec:	9b00      	ldr	r3, [sp, #0]
    8cee:	1cb2      	adds	r2, r6, #2
    8cf0:	0adb      	lsrs	r3, r3, #11
    8cf2:	02db      	lsls	r3, r3, #11
    8cf4:	18a2      	adds	r2, r4, r2
    8cf6:	431a      	orrs	r2, r3
    8cf8:	0001      	movs	r1, r0
    8cfa:	b292      	uxth	r2, r2
    8cfc:	0028      	movs	r0, r5
        hcs = crc16(crc16_init(), fhdr, hdrlen - 2);
    8cfe:	1ea7      	subs	r7, r4, #2
        buf_wbe16(fhdr, 0, fmt | (hdrlen + infolen + 2));
    8d00:	f000 fa77 	bl	91f2 <_Z9buf_wbe16Pvit>
        hcs = crc16(crc16_init(), fhdr, hdrlen - 2);
    8d04:	f000 fa88 	bl	9218 <_Z10crc16_initv>
    8d08:	003a      	movs	r2, r7
    8d0a:	0029      	movs	r1, r5
    8d0c:	f000 fa88 	bl	9220 <_Z5crc16tPKvj>
        buf_wle16(fhdr, hdrlen - 2, ~hcs);
    8d10:	43c2      	mvns	r2, r0
    8d12:	0039      	movs	r1, r7
    8d14:	b292      	uxth	r2, r2
    8d16:	0028      	movs	r0, r5
    8d18:	f000 fa70 	bl	91fc <_Z9buf_wle16Pvit>
        fcs = crc16(crc16_init(), fhdr, hdrlen);
    8d1c:	f000 fa7c 	bl	9218 <_Z10crc16_initv>
    8d20:	0022      	movs	r2, r4
    8d22:	0029      	movs	r1, r5
    8d24:	f000 fa7c 	bl	9220 <_Z5crc16tPKvj>
        fcs = crc16(fcs, info, infolen);
    8d28:	0032      	movs	r2, r6
    8d2a:	9901      	ldr	r1, [sp, #4]
    8d2c:	f000 fa78 	bl	9220 <_Z5crc16tPKvj>
        buf_wle16(fmfcs, 0, ~fcs);
    8d30:	43c2      	mvns	r2, r0
    8d32:	2100      	movs	r1, #0
    8d34:	9808      	ldr	r0, [sp, #32]
    8d36:	b292      	uxth	r2, r2
    8d38:	f000 fa60 	bl	91fc <_Z9buf_wle16Pvit>
    return 0;
    8d3c:	2000      	movs	r0, #0

}
    8d3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00008d40 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi>:
#define HDLC_PARSE_SHORT    (1)
#define HDLC_PARSE_HDR_ERR  (2)

int
hdlc_parse_hdr(struct hdlc_hdr_fields *hh, const uint8_t *buf, int buflen)
{
    8d40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8d42:	0004      	movs	r4, r0
    8d44:	000d      	movs	r5, r1
    8d46:	0016      	movs	r6, r2
    int dlen, slen;
    int rc;

    if (buflen < HDLC_HDR_SIZE) { /* don't bother parsing, need more */
        return HDLC_PARSE_SHORT;
    8d48:	2001      	movs	r0, #1
    if (buflen < HDLC_HDR_SIZE) { /* don't bother parsing, need more */
    8d4a:	2a06      	cmp	r2, #6
    8d4c:	dd06      	ble.n	8d5c <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>
    }

    /* Confirm type 3 */
    if ((buf[0] & 0xF0) != 0xA0) {
    8d4e:	780b      	ldrb	r3, [r1, #0]
    8d50:	220f      	movs	r2, #15
    8d52:	0019      	movs	r1, r3
    8d54:	4391      	bics	r1, r2
    8d56:	29a0      	cmp	r1, #160	; 0xa0
    8d58:	d001      	beq.n	8d5e <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1e>
        return HDLC_PARSE_HDR_ERR;
    8d5a:	2002      	movs	r0, #2
    return 0;

err:
    return HDLC_PARSE_HDR_ERR;

}
    8d5c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    hh->segment = buf[0] & 0x08;
    8d5e:	2208      	movs	r2, #8
    8d60:	4013      	ands	r3, r2
    8d62:	60e3      	str	r3, [r4, #12]
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    8d64:	2100      	movs	r1, #0
    8d66:	0028      	movs	r0, r5
    8d68:	f000 fa3d 	bl	91e6 <_Z8buf_be16PKvi>
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    8d6c:	0022      	movs	r2, r4
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    8d6e:	0540      	lsls	r0, r0, #21
    8d70:	0d40      	lsrs	r0, r0, #21
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    8d72:	3e02      	subs	r6, #2
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    8d74:	6020      	str	r0, [r4, #0]
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    8d76:	466b      	mov	r3, sp
    8d78:	1ca8      	adds	r0, r5, #2
    8d7a:	3214      	adds	r2, #20
    8d7c:	0031      	movs	r1, r6
    8d7e:	f7ff ff5c 	bl	8c3a <_Z15hdlc_parse_addrPKhiPmPi>
    if (rc || dlen < 1) {
    8d82:	2800      	cmp	r0, #0
    8d84:	d1e9      	bne.n	8d5a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    8d86:	9800      	ldr	r0, [sp, #0]
    8d88:	2800      	cmp	r0, #0
    8d8a:	dde6      	ble.n	8d5a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    rc = hdlc_parse_addr(buf + 2 + dlen, buflen - 2 - dlen, &hh->src, &slen);
    8d8c:	0022      	movs	r2, r4
    8d8e:	1a31      	subs	r1, r6, r0
    8d90:	3002      	adds	r0, #2
    8d92:	1828      	adds	r0, r5, r0
    8d94:	ab01      	add	r3, sp, #4
    8d96:	3218      	adds	r2, #24
    8d98:	f7ff ff4f 	bl	8c3a <_Z15hdlc_parse_addrPKhiPmPi>
    if (rc || slen < 1) {
    8d9c:	2800      	cmp	r0, #0
    8d9e:	d1dc      	bne.n	8d5a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    8da0:	9a01      	ldr	r2, [sp, #4]
    8da2:	2a00      	cmp	r2, #0
    8da4:	ddd9      	ble.n	8d5a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    hh->hdrlen = 2 + dlen + slen + 1 + 2;
    8da6:	9b00      	ldr	r3, [sp, #0]
    if (crc16_validate(buf, hh->hdrlen)) {
    8da8:	0028      	movs	r0, r5
    hh->hdrlen = 2 + dlen + slen + 1 + 2;
    8daa:	3302      	adds	r3, #2
    8dac:	189b      	adds	r3, r3, r2
    8dae:	1cd9      	adds	r1, r3, #3
    8db0:	6061      	str	r1, [r4, #4]
    hh->control = buf[2 + dlen + slen];
    8db2:	5ceb      	ldrb	r3, [r5, r3]
    8db4:	7423      	strb	r3, [r4, #16]
    if (crc16_validate(buf, hh->hdrlen)) {
    8db6:	f000 fa45 	bl	9244 <_Z14crc16_validatePKvj>
    8dba:	2800      	cmp	r0, #0
    8dbc:	d1cd      	bne.n	8d5a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    if (hh->framelen > hh->hdrlen + 2) {
    8dbe:	6862      	ldr	r2, [r4, #4]
    8dc0:	6823      	ldr	r3, [r4, #0]
    8dc2:	1c91      	adds	r1, r2, #2
    8dc4:	428b      	cmp	r3, r1
    8dc6:	dd03      	ble.n	8dd0 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x90>
        hh->infolen = hh->framelen - hh->hdrlen - 2;
    8dc8:	1a9b      	subs	r3, r3, r2
    8dca:	3b02      	subs	r3, #2
    8dcc:	60a3      	str	r3, [r4, #8]
    8dce:	e7c5      	b.n	8d5c <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>
        hh->infolen = 0;
    8dd0:	60a0      	str	r0, [r4, #8]
    8dd2:	e7c3      	b.n	8d5c <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>

00008dd4 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params>:


/* Fill param negotiation information IEC 62056-46 6.4.4.4.3.2 */
int
hdlc_fill_snrm_param(uint8_t *buf, uint32_t buflen, uint32_t *rsplen,
                     struct hdlc_snrm_params *hsp){
    8dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Based on example in IEC doc*/
    uint8_t param_template[] = {0x81, 0x80, 0x14,
                                0x05, 0x02, 0x01, 0x00,
                                0x06, 0x02, 0x01, 0x00,
                                0x07, 0x04, 0x00, 0x00, 0x00, 0x01,
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    8dd6:	2617      	movs	r6, #23
                     struct hdlc_snrm_params *hsp){
    8dd8:	b089      	sub	sp, #36	; 0x24
    8dda:	9101      	str	r1, [sp, #4]
    8ddc:	0004      	movs	r4, r0
    8dde:	0017      	movs	r7, r2
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    8de0:	4914      	ldr	r1, [pc, #80]	; (8e34 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x60>)
    8de2:	0032      	movs	r2, r6
    8de4:	a802      	add	r0, sp, #8
                     struct hdlc_snrm_params *hsp){
    8de6:	001d      	movs	r5, r3
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    8de8:	f003 fe4b 	bl	ca82 <memcpy>

    if (!buf || buflen < sizeof(param_template)) {
        return 1;
    8dec:	2001      	movs	r0, #1
    if (!buf || buflen < sizeof(param_template)) {
    8dee:	2c00      	cmp	r4, #0
    8df0:	d01d      	beq.n	8e2e <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x5a>
    8df2:	9b01      	ldr	r3, [sp, #4]
    8df4:	2b16      	cmp	r3, #22
    8df6:	d91a      	bls.n	8e2e <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x5a>
    }

    memcpy(buf, param_template, sizeof(param_template));
    8df8:	0032      	movs	r2, r6
    8dfa:	a902      	add	r1, sp, #8
    8dfc:	0020      	movs	r0, r4
    8dfe:	f003 fe40 	bl	ca82 <memcpy>

    buf_wbe16(buf, 5, hsp->max_info_tx);
    8e02:	882a      	ldrh	r2, [r5, #0]
    8e04:	2105      	movs	r1, #5
    8e06:	0020      	movs	r0, r4
    8e08:	f000 f9f3 	bl	91f2 <_Z9buf_wbe16Pvit>
    buf_wbe16(buf, 9, hsp->max_info_rx);
    8e0c:	88aa      	ldrh	r2, [r5, #4]
    8e0e:	2109      	movs	r1, #9
    8e10:	0020      	movs	r0, r4
    8e12:	f000 f9ee 	bl	91f2 <_Z9buf_wbe16Pvit>

    buf_wbe32(buf, 13, hsp->window_tx);
    8e16:	68aa      	ldr	r2, [r5, #8]
    8e18:	210d      	movs	r1, #13
    8e1a:	0020      	movs	r0, r4
    8e1c:	f000 f9f3 	bl	9206 <_Z9buf_wbe32Pvim>
    buf_wbe32(buf, 19, hsp->window_rx);
    8e20:	0020      	movs	r0, r4
    8e22:	68ea      	ldr	r2, [r5, #12]
    8e24:	2113      	movs	r1, #19
    8e26:	f000 f9ee 	bl	9206 <_Z9buf_wbe32Pvim>

    *rsplen = sizeof(param_template);

    return 0;
    8e2a:	2000      	movs	r0, #0
    *rsplen = sizeof(param_template);
    8e2c:	603e      	str	r6, [r7, #0]
}
    8e2e:	b009      	add	sp, #36	; 0x24
    8e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e32:	46c0      	nop			; (mov r8, r8)
    8e34:	00012337 	.word	0x00012337

00008e38 <_Z15hdlc_send_framePKhS0_i>:
 *****************************************************************************
 *****************************************************************************
 */

int hdlc_send_frame( const uint8_t *hdr, const uint8_t *info, int infolen )
{
    8e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e3a:	0007      	movs	r7, r0
    8e3c:	b089      	sub	sp, #36	; 0x24
    8e3e:	000e      	movs	r6, r1
    8e40:	0014      	movs	r4, r2
    uint8_t fcs[2];    
    int rc;
    int i;

    /* attach info if present */
    if (info && infolen > 0) {
    8e42:	2900      	cmp	r1, #0
    8e44:	d00b      	beq.n	8e5e <_Z15hdlc_send_framePKhS0_i+0x26>
    8e46:	2a00      	cmp	r2, #0
    8e48:	dd09      	ble.n	8e5e <_Z15hdlc_send_framePKhS0_i+0x26>
        if ((rc = hdlc_frm_add_info(hdr, fhdr, info, infolen, fcs))) {
    8e4a:	ab05      	add	r3, sp, #20
    8e4c:	9300      	str	r3, [sp, #0]
    8e4e:	0013      	movs	r3, r2
    8e50:	000a      	movs	r2, r1
    8e52:	a906      	add	r1, sp, #24
    8e54:	f7ff ff34 	bl	8cc0 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_>
    8e58:	2800      	cmp	r0, #0
    8e5a:	d11a      	bne.n	8e92 <_Z15hdlc_send_framePKhS0_i+0x5a>
            return -1;
        }
        hdr = fhdr;
    8e5c:	af06      	add	r7, sp, #24
    }

	// Log
    log_msg("HDLC send frame", hdr, HDLC_HDR_SIZE, 0);
    8e5e:	2207      	movs	r2, #7
    8e60:	0039      	movs	r1, r7
    8e62:	2300      	movs	r3, #0
    8e64:	4826      	ldr	r0, [pc, #152]	; (8f00 <_Z15hdlc_send_framePKhS0_i+0xc8>)
    8e66:	f7fb fa35 	bl	42d4 <_Z7log_msgPKcPKvii>

	// Send frame delimiter
    uart.write(fs);
    8e6a:	4d26      	ldr	r5, [pc, #152]	; (8f04 <_Z15hdlc_send_framePKhS0_i+0xcc>)
    8e6c:	217e      	movs	r1, #126	; 0x7e
    8e6e:	6828      	ldr	r0, [r5, #0]
    8e70:	6803      	ldr	r3, [r0, #0]
    8e72:	681b      	ldr	r3, [r3, #0]
    8e74:	4798      	blx	r3

	// Send header
    /* TODO: Is this a problem on Arduino? */
	/* Need to know why the first char is dropped on uart */
	rc = uart.write( hdr, HDLC_HDR_SIZE );
    8e76:	6828      	ldr	r0, [r5, #0]
    8e78:	0039      	movs	r1, r7
    8e7a:	6803      	ldr	r3, [r0, #0]
    8e7c:	2207      	movs	r2, #7
    8e7e:	685b      	ldr	r3, [r3, #4]
    8e80:	4798      	blx	r3
    8e82:	0007      	movs	r7, r0
    if (rc != HDLC_HDR_SIZE) 
    8e84:	2807      	cmp	r0, #7
    8e86:	d007      	beq.n	8e98 <_Z15hdlc_send_framePKhS0_i+0x60>
	{
		dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_HDR_SIZE );
    8e88:	2207      	movs	r2, #7
    8e8a:	0010      	movs	r0, r2
    8e8c:	491e      	ldr	r1, [pc, #120]	; (8f08 <_Z15hdlc_send_framePKhS0_i+0xd0>)

		// Write CRC-16
        rc = uart.write(fcs, HDLC_CRC_SIZE);
		if (rc != HDLC_CRC_SIZE) 
		{
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_CRC_SIZE );
    8e8e:	f7fb f9c3 	bl	4218 <_Z4dlogiPKcz>
            return -1;
    8e92:	2001      	movs	r0, #1
    8e94:	4240      	negs	r0, r0
    8e96:	e031      	b.n	8efc <_Z15hdlc_send_framePKhS0_i+0xc4>
    if (info && infolen > 0) 
    8e98:	2e00      	cmp	r6, #0
    8e9a:	d023      	beq.n	8ee4 <_Z15hdlc_send_framePKhS0_i+0xac>
    8e9c:	2c00      	cmp	r4, #0
    8e9e:	dd21      	ble.n	8ee4 <_Z15hdlc_send_framePKhS0_i+0xac>
        rc = uart.write(info, infolen);
    8ea0:	6828      	ldr	r0, [r5, #0]
    8ea2:	0022      	movs	r2, r4
    8ea4:	6803      	ldr	r3, [r0, #0]
    8ea6:	0031      	movs	r1, r6
    8ea8:	685b      	ldr	r3, [r3, #4]
    8eaa:	4798      	blx	r3
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", infolen );
    8eac:	0022      	movs	r2, r4
		if (rc != infolen) 
    8eae:	4284      	cmp	r4, r0
    8eb0:	d109      	bne.n	8ec6 <_Z15hdlc_send_framePKhS0_i+0x8e>
        rc = uart.write(fcs, HDLC_CRC_SIZE);
    8eb2:	6828      	ldr	r0, [r5, #0]
    8eb4:	2202      	movs	r2, #2
    8eb6:	6803      	ldr	r3, [r0, #0]
    8eb8:	a905      	add	r1, sp, #20
    8eba:	685b      	ldr	r3, [r3, #4]
    8ebc:	4798      	blx	r3
    8ebe:	9003      	str	r0, [sp, #12]
		if (rc != HDLC_CRC_SIZE) 
    8ec0:	2802      	cmp	r0, #2
    8ec2:	d003      	beq.n	8ecc <_Z15hdlc_send_framePKhS0_i+0x94>
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_CRC_SIZE );
    8ec4:	2202      	movs	r2, #2
    8ec6:	4910      	ldr	r1, [pc, #64]	; (8f08 <_Z15hdlc_send_framePKhS0_i+0xd0>)
    8ec8:	0038      	movs	r0, r7
    8eca:	e7e0      	b.n	8e8e <_Z15hdlc_send_framePKhS0_i+0x56>
			return -1;
		}

        log_msg(NULL, info, infolen, 0);    
    8ecc:	2300      	movs	r3, #0
    8ece:	0022      	movs	r2, r4
    8ed0:	0018      	movs	r0, r3
    8ed2:	0031      	movs	r1, r6
    8ed4:	f7fb f9fe 	bl	42d4 <_Z7log_msgPKcPKvii>
        log_msg(NULL, fcs, HDLC_CRC_SIZE, 0);            
    8ed8:	2300      	movs	r3, #0
    8eda:	9a03      	ldr	r2, [sp, #12]
    8edc:	a905      	add	r1, sp, #20
    8ede:	0018      	movs	r0, r3
    8ee0:	f7fb f9f8 	bl	42d4 <_Z7log_msgPKcPKvii>

    }

    /* closing with FS.  Not shown in log */
    uart.write(fs);
    8ee4:	6828      	ldr	r0, [r5, #0]
    8ee6:	217e      	movs	r1, #126	; 0x7e
    8ee8:	6803      	ldr	r3, [r0, #0]
    8eea:	681b      	ldr	r3, [r3, #0]
    8eec:	4798      	blx	r3
    log_msg(NULL, NULL, 0, 1);  /* EOL */
    8eee:	2200      	movs	r2, #0
    8ef0:	2301      	movs	r3, #1
    8ef2:	0010      	movs	r0, r2
    8ef4:	0011      	movs	r1, r2
    8ef6:	f7fb f9ed 	bl	42d4 <_Z7log_msgPKcPKvii>

    return 0;
    8efa:	2000      	movs	r0, #0
}
    8efc:	b009      	add	sp, #36	; 0x24
    8efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f00:	0001234e 	.word	0x0001234e
    8f04:	20001e1c 	.word	0x20001e1c
    8f08:	0001235e 	.word	0x0001235e

00008f0c <_Z7hdlc_rxPhS_ii>:
	uint8_t * pPayload;
	uint16_t rx_len = 0;
	uint16_t frame_len = 0;
	struct hdlcux * pHUX = &hctx.hux;

    memset( pHUX, 0x0, sizeof(hctx.hux) );
    8f0c:	2286      	movs	r2, #134	; 0x86
{
    8f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f10:	b0c5      	sub	sp, #276	; 0x114
    8f12:	9002      	str	r0, [sp, #8]
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    8f14:	4885      	ldr	r0, [pc, #532]	; (912c <_Z7hdlc_rxPhS_ii+0x220>)
    8f16:	0052      	lsls	r2, r2, #1
{
    8f18:	9103      	str	r1, [sp, #12]
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    8f1a:	3010      	adds	r0, #16
    8f1c:	2100      	movs	r1, #0
{
    8f1e:	001d      	movs	r5, r3
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    8f20:	f003 fdca 	bl	cab8 <memset>

	// Read UART for maximum 200 ms
	uart.setTimeout(READ_BUF_TIMEOUT);	 
    8f24:	21c8      	movs	r1, #200	; 0xc8
    8f26:	4c82      	ldr	r4, [pc, #520]	; (9130 <_Z7hdlc_rxPhS_ii+0x224>)
    8f28:	0049      	lsls	r1, r1, #1
    8f2a:	6820      	ldr	r0, [r4, #0]
    8f2c:	f000 f947 	bl	91be <_ZN6Stream10setTimeoutEm>

	// Wait for incoming HDLC frame
	elapsed = 0.0;
	timeout = (float) hdlc_frame_timeout;
    8f30:	0028      	movs	r0, r5
    8f32:	f001 fcf1 	bl	a918 <__aeabi_i2f>
	elapsed = 0.0;
    8f36:	2500      	movs	r5, #0
	timeout = (float) hdlc_frame_timeout;
    8f38:	1c06      	adds	r6, r0, #0
	while( elapsed < timeout ) 
    8f3a:	1c31      	adds	r1, r6, #0
    8f3c:	1c28      	adds	r0, r5, #0
    8f3e:	f000 fe17 	bl	9b70 <__aeabi_fcmplt>
    8f42:	2800      	cmp	r0, #0
    8f44:	d04e      	beq.n	8fe4 <_Z7hdlc_rxPhS_ii+0xd8>
	{
		// Check if there is nothing at the UART
		if (!uart.available())
    8f46:	6820      	ldr	r0, [r4, #0]
    8f48:	6803      	ldr	r3, [r0, #0]
    8f4a:	691b      	ldr	r3, [r3, #16]
    8f4c:	4798      	blx	r3
    8f4e:	2800      	cmp	r0, #0
    8f50:	d10f      	bne.n	8f72 <_Z7hdlc_rxPhS_ii+0x66>
		{
			// Check if it is time to send Observe response message
			// The function call returns a flag that determines if Observe is turned on
			obs_flag = do_observe();
    8f52:	f7fe fdb7 	bl	7ac4 <_Z10do_observev>
			
#if defined(ARDUINO_ARCH_SAMD)
			if (obs_flag)
    8f56:	2800      	cmp	r0, #0
    8f58:	d005      	beq.n	8f66 <_Z7hdlc_rxPhS_ii+0x5a>
			{
				// The reading of the time on SAMD takes about 5.5 ms
				// Adjust the variable accordingly
				elapsed += 5.5;
    8f5a:	4976      	ldr	r1, [pc, #472]	; (9134 <_Z7hdlc_rxPhS_ii+0x228>)
				continue;
			}
#endif
			// Sleep for 1 ms
			delay(MS_SLEEP);
			elapsed++;
    8f5c:	1c28      	adds	r0, r5, #0
    8f5e:	f000 fe65 	bl	9c2c <__aeabi_fadd>
    8f62:	1c05      	adds	r5, r0, #0
			continue;
    8f64:	e7e9      	b.n	8f3a <_Z7hdlc_rxPhS_ii+0x2e>
			delay(MS_SLEEP);
    8f66:	2001      	movs	r0, #1
    8f68:	f7f9 fbb2 	bl	26d0 <delay>
			elapsed++;
    8f6c:	21fe      	movs	r1, #254	; 0xfe
    8f6e:	0589      	lsls	r1, r1, #22
    8f70:	e7f4      	b.n	8f5c <_Z7hdlc_rxPhS_ii+0x50>

  double parseDouble(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR);
  // double version of parseInt

  size_t readBytes( char *buffer, size_t length); // read chars from stream into buffer
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
    8f72:	2580      	movs	r5, #128	; 0x80
    8f74:	4f70      	ldr	r7, [pc, #448]	; (9138 <_Z7hdlc_rxPhS_ii+0x22c>)
    8f76:	00ed      	lsls	r5, r5, #3
    8f78:	002a      	movs	r2, r5
    8f7a:	0039      	movs	r1, r7
    8f7c:	6820      	ldr	r0, [r4, #0]
    8f7e:	f000 f920 	bl	91c2 <_ZN6Stream9readBytesEPcj>
    8f82:	0004      	movs	r4, r0
			
		} // if
		
		// Read the HDLC frame until time-out
		cnt = uart.readBytes( UART_Buf, UART_MAX_BUF_LEN );
		sprintf( buffer, "readBytes() count: %d", cnt );
    8f84:	0002      	movs	r2, r0
    8f86:	496d      	ldr	r1, [pc, #436]	; (913c <_Z7hdlc_rxPhS_ii+0x230>)
    8f88:	a804      	add	r0, sp, #16
    8f8a:	f004 fe6b 	bl	dc64 <siprintf>
		dlog( LOG_INFO, buffer );
    8f8e:	a904      	add	r1, sp, #16
    8f90:	2006      	movs	r0, #6
    8f92:	f7fb f941 	bl	4218 <_Z4dlogiPKcz>
		capture_dump( UART_Buf, cnt );
    8f96:	0021      	movs	r1, r4
    8f98:	0038      	movs	r0, r7
    8f9a:	f7fb fa27 	bl	43ec <_Z12capture_dumpPhi>
		
		// Check if we received more bytes than there is space for in the receive buffer
		if ( cnt > UART_MAX_BUF_LEN )
    8f9e:	42ac      	cmp	r4, r5
    8fa0:	d90d      	bls.n	8fbe <_Z7hdlc_rxPhS_ii+0xb2>
		{
			// This should never happen as the readBytes method above already sets the limit
			dlog( LOG_DEBUG, "The UART receive buffer has overflown!" );
    8fa2:	4967      	ldr	r1, [pc, #412]	; (9140 <_Z7hdlc_rxPhS_ii+0x234>)
    8fa4:	2007      	movs	r0, #7
    8fa6:	f7fb f937 	bl	4218 <_Z4dlogiPKcz>
			sprintf( buffer, "We read %d bytes and the max is %d bytes.", cnt, UART_MAX_BUF_LEN );
    8faa:	4966      	ldr	r1, [pc, #408]	; (9144 <_Z7hdlc_rxPhS_ii+0x238>)
    8fac:	002b      	movs	r3, r5
    8fae:	0022      	movs	r2, r4
    8fb0:	a804      	add	r0, sp, #16
    8fb2:	f004 fe57 	bl	dc64 <siprintf>
			dlog( LOG_DEBUG, buffer );
    8fb6:	a904      	add	r1, sp, #16
    8fb8:	2007      	movs	r0, #7
    8fba:	f7fb f92d 	bl	4218 <_Z4dlogiPKcz>
			
		} // if

		// Check for HDLC frame delimiters
		hctx.hu_state = HDLC_FRAME_BASE;
    8fbe:	2300      	movs	r3, #0
    8fc0:	4e5a      	ldr	r6, [pc, #360]	; (912c <_Z7hdlc_rxPhS_ii+0x220>)
    8fc2:	7033      	strb	r3, [r6, #0]
		if (( UART_Buf[0] != HDLC_FLAG ) || ( UART_Buf[cnt-1] != HDLC_FLAG ))
    8fc4:	783b      	ldrb	r3, [r7, #0]
    8fc6:	2b7e      	cmp	r3, #126	; 0x7e
    8fc8:	d104      	bne.n	8fd4 <_Z7hdlc_rxPhS_ii+0xc8>
    8fca:	193b      	adds	r3, r7, r4
    8fcc:	3b01      	subs	r3, #1
    8fce:	781b      	ldrb	r3, [r3, #0]
    8fd0:	2b7e      	cmp	r3, #126	; 0x7e
    8fd2:	d009      	beq.n	8fe8 <_Z7hdlc_rxPhS_ii+0xdc>
		{
            ++hustats.hs_discard;  
    8fd4:	4a5c      	ldr	r2, [pc, #368]	; (9148 <_Z7hdlc_rxPhS_ii+0x23c>)
			dlog( LOG_DEBUG, "Missing HDLC flag(s)" );
    8fd6:	495d      	ldr	r1, [pc, #372]	; (914c <_Z7hdlc_rxPhS_ii+0x240>)
            ++hustats.hs_discard;  
    8fd8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    8fda:	3301      	adds	r3, #1
    8fdc:	6353      	str	r3, [r2, #52]	; 0x34
		rc = hu_hdlc_parse_hdr( pHdr, HDLC_HDR_SIZE, &hctx.hu_pend );
		if (rc) 
		{
			/* header parsing error - need to flush */
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
			dlog( LOG_DEBUG, "Bad hdr - flush" );
    8fde:	2007      	movs	r0, #7
    8fe0:	f7fb f91a 	bl	4218 <_Z4dlogiPKcz>
			return 0;
    8fe4:	2500      	movs	r5, #0
    8fe6:	e04b      	b.n	9080 <_Z7hdlc_rxPhS_ii+0x174>
    if ((hdr[0] & 0xF0) != 0xA0) {  /* only Type 3 is supported */
    8fe8:	220f      	movs	r2, #15
    8fea:	787b      	ldrb	r3, [r7, #1]
    8fec:	4393      	bics	r3, r2
    8fee:	2ba0      	cmp	r3, #160	; 0xa0
    8ff0:	d106      	bne.n	9000 <_Z7hdlc_rxPhS_ii+0xf4>
        if (crc16_validate(hdr, hdrlen)) {
    8ff2:	2107      	movs	r1, #7
    8ff4:	4856      	ldr	r0, [pc, #344]	; (9150 <_Z7hdlc_rxPhS_ii+0x244>)
    8ff6:	f000 f925 	bl	9244 <_Z14crc16_validatePKvj>
    8ffa:	1e05      	subs	r5, r0, #0
    8ffc:	d100      	bne.n	9000 <_Z7hdlc_rxPhS_ii+0xf4>
    8ffe:	e083      	b.n	9108 <_Z7hdlc_rxPhS_ii+0x1fc>
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    9000:	2304      	movs	r3, #4
			dlog( LOG_DEBUG, "Bad hdr - flush" );
    9002:	4954      	ldr	r1, [pc, #336]	; (9154 <_Z7hdlc_rxPhS_ii+0x248>)
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    9004:	7033      	strb	r3, [r6, #0]
    9006:	e7ea      	b.n	8fde <_Z7hdlc_rxPhS_ii+0xd2>
			
		} // if

		/* Header complete - always, working with fixed hdr size */
		/* Payload, if any, starts after the header */
		hctx.hu_state = HDLC_FRAME_HDR;
    9008:	2301      	movs	r3, #1
    900a:	7033      	strb	r3, [r6, #0]
		pHUX->h_infoidx = HDLC_HDR_SIZE;
    900c:	0033      	movs	r3, r6
    900e:	2207      	movs	r2, #7
    9010:	33ff      	adds	r3, #255	; 0xff
    9012:	769a      	strb	r2, [r3, #26]
    frmlen = buf_be16(hdr, 0) & 0x07FF;
    9014:	0029      	movs	r1, r5
    9016:	484e      	ldr	r0, [pc, #312]	; (9150 <_Z7hdlc_rxPhS_ii+0x244>)
    9018:	f000 f8e5 	bl	91e6 <_Z8buf_be16PKvi>
    901c:	0540      	lsls	r0, r0, #21
    901e:	0d40      	lsrs	r0, r0, #21
    9020:	9600      	str	r6, [sp, #0]
	if ( frmlen < hdrlen )
    9022:	2806      	cmp	r0, #6
    9024:	d800      	bhi.n	9028 <_Z7hdlc_rxPhS_ii+0x11c>
    9026:	e078      	b.n	911a <_Z7hdlc_rxPhS_ii+0x20e>
	paylen = frmlen - hdrlen;
    9028:	1fc3      	subs	r3, r0, #7
    if ( paylen && ( paylen < 3 ) )
    902a:	3808      	subs	r0, #8
	paylen = frmlen - hdrlen;
    902c:	b29b      	uxth	r3, r3
    if ( paylen && ( paylen < 3 ) )
    902e:	2801      	cmp	r0, #1
    9030:	d800      	bhi.n	9034 <_Z7hdlc_rxPhS_ii+0x128>
    9032:	e072      	b.n	911a <_Z7hdlc_rxPhS_ii+0x20e>
    *infolen = paylen;
    9034:	0032      	movs	r2, r6
    9036:	32fe      	adds	r2, #254	; 0xfe
    9038:	8393      	strh	r3, [r2, #28]
			dlog( LOG_DEBUG, "bad infolen - flush" );
		
		} // if
		
		// Check if the frame length equals the number of received bytes
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    903a:	9b00      	ldr	r3, [sp, #0]
    903c:	4a46      	ldr	r2, [pc, #280]	; (9158 <_Z7hdlc_rxPhS_ii+0x24c>)
    903e:	33ff      	adds	r3, #255	; 0xff
    9040:	7e9b      	ldrb	r3, [r3, #26]
    9042:	8b92      	ldrh	r2, [r2, #28]
		rx_len = cnt - 2;
    9044:	3c02      	subs	r4, #2
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    9046:	189b      	adds	r3, r3, r2
    9048:	b29b      	uxth	r3, r3
		rx_len = cnt - 2;
    904a:	b2a4      	uxth	r4, r4
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    904c:	9301      	str	r3, [sp, #4]
		if ( frame_len != rx_len )
    904e:	429c      	cmp	r4, r3
    9050:	d019      	beq.n	9086 <_Z7hdlc_rxPhS_ii+0x17a>
		{
			dlog( LOG_DEBUG, "The frame length doesn't match the number of received bytes" );
    9052:	4942      	ldr	r1, [pc, #264]	; (915c <_Z7hdlc_rxPhS_ii+0x250>)
    9054:	2007      	movs	r0, #7
    9056:	f7fb f8df 	bl	4218 <_Z4dlogiPKcz>
			print("frame_len: ");	printnum(frame_len);	println("");
    905a:	4841      	ldr	r0, [pc, #260]	; (9160 <_Z7hdlc_rxPhS_ii+0x254>)
    905c:	f7fb f984 	bl	4368 <_Z5printPKc>
    9060:	9801      	ldr	r0, [sp, #4]
    9062:	f7fb f9ad 	bl	43c0 <_Z8printnumi>
    9066:	4e3f      	ldr	r6, [pc, #252]	; (9164 <_Z7hdlc_rxPhS_ii+0x258>)
    9068:	0030      	movs	r0, r6
    906a:	f7fb f993 	bl	4394 <_Z7printlnPKc>
			print("rx_len:    ");	printnum(rx_len);		println("");
    906e:	483e      	ldr	r0, [pc, #248]	; (9168 <_Z7hdlc_rxPhS_ii+0x25c>)
    9070:	f7fb f97a 	bl	4368 <_Z5printPKc>
    9074:	0020      	movs	r0, r4
    9076:	f7fb f9a3 	bl	43c0 <_Z8printnumi>
    907a:	0030      	movs	r0, r6
    907c:	f7fb f98a 	bl	4394 <_Z7printlnPKc>
    } // while

	// Time-out
	return 0;
	
} // hdlc_rx()
    9080:	0028      	movs	r0, r5
    9082:	b045      	add	sp, #276	; 0x114
    9084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( crc16_validate( pHdr, frame_len )) 
    9086:	0021      	movs	r1, r4
    9088:	4831      	ldr	r0, [pc, #196]	; (9150 <_Z7hdlc_rxPhS_ii+0x244>)
    908a:	f000 f8db 	bl	9244 <_Z14crc16_validatePKvj>
    908e:	2800      	cmp	r0, #0
    9090:	d001      	beq.n	9096 <_Z7hdlc_rxPhS_ii+0x18a>
			dlog( LOG_DEBUG, "Discard frame - CRC error" );
    9092:	4936      	ldr	r1, [pc, #216]	; (916c <_Z7hdlc_rxPhS_ii+0x260>)
    9094:	e03d      	b.n	9112 <_Z7hdlc_rxPhS_ii+0x206>
		memcpy( hdr, pHdr, HDLC_HDR_SIZE );
    9096:	2207      	movs	r2, #7
    9098:	492d      	ldr	r1, [pc, #180]	; (9150 <_Z7hdlc_rxPhS_ii+0x244>)
    909a:	9802      	ldr	r0, [sp, #8]
    909c:	f003 fcf1 	bl	ca82 <memcpy>
		if (pHUX->h_infolen) 
    90a0:	4b2d      	ldr	r3, [pc, #180]	; (9158 <_Z7hdlc_rxPhS_ii+0x24c>)
    90a2:	8b9c      	ldrh	r4, [r3, #28]
    90a4:	2c00      	cmp	r4, #0
    90a6:	d02a      	beq.n	90fe <_Z7hdlc_rxPhS_ii+0x1f2>
				dlog( LOG_DEBUG, "Discard frame - bad info len" );
    90a8:	4931      	ldr	r1, [pc, #196]	; (9170 <_Z7hdlc_rxPhS_ii+0x264>)
			if ( pHUX->h_infolen <= HDLC_CRC_SIZE ) 
    90aa:	2c02      	cmp	r4, #2
    90ac:	dc00      	bgt.n	90b0 <_Z7hdlc_rxPhS_ii+0x1a4>
    90ae:	e796      	b.n	8fde <_Z7hdlc_rxPhS_ii+0xd2>
			if ( rx_len > max_payload_size )
    90b0:	4d30      	ldr	r5, [pc, #192]	; (9174 <_Z7hdlc_rxPhS_ii+0x268>)
			rx_len = pHUX->h_infolen - HDLC_CRC_SIZE;
    90b2:	3c02      	subs	r4, #2
			if ( rx_len > max_payload_size )
    90b4:	682b      	ldr	r3, [r5, #0]
			rx_len = pHUX->h_infolen - HDLC_CRC_SIZE;
    90b6:	b2a4      	uxth	r4, r4
			if ( rx_len > max_payload_size )
    90b8:	429c      	cmp	r4, r3
    90ba:	d90b      	bls.n	90d4 <_Z7hdlc_rxPhS_ii+0x1c8>
				dlog( LOG_DEBUG, "The HDLC payload is too large!" );
    90bc:	492e      	ldr	r1, [pc, #184]	; (9178 <_Z7hdlc_rxPhS_ii+0x26c>)
    90be:	2007      	movs	r0, #7
    90c0:	f7fb f8aa 	bl	4218 <_Z4dlogiPKcz>
				sprintf( buffer, "We got %d bytes and the max is %d bytes.", rx_len, max_payload_size );
    90c4:	492d      	ldr	r1, [pc, #180]	; (917c <_Z7hdlc_rxPhS_ii+0x270>)
    90c6:	682b      	ldr	r3, [r5, #0]
    90c8:	0022      	movs	r2, r4
    90ca:	a804      	add	r0, sp, #16
    90cc:	f004 fdca 	bl	dc64 <siprintf>
				dlog( LOG_DEBUG, buffer );
    90d0:	a904      	add	r1, sp, #16
    90d2:	e784      	b.n	8fde <_Z7hdlc_rxPhS_ii+0xd2>
			memcpy( info, pPayload, rx_len );
    90d4:	0039      	movs	r1, r7
    90d6:	0022      	movs	r2, r4
    90d8:	3108      	adds	r1, #8
    90da:	9803      	ldr	r0, [sp, #12]
    90dc:	f003 fcd1 	bl	ca82 <memcpy>
			hctx.hu_state = HDLC_FRAME_INFO;
    90e0:	2302      	movs	r3, #2
    90e2:	9a00      	ldr	r2, [sp, #0]
    90e4:	7013      	strb	r3, [r2, #0]
		hframerecv++;
    90e6:	4a26      	ldr	r2, [pc, #152]	; (9180 <_Z7hdlc_rxPhS_ii+0x274>)
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    90e8:	1c79      	adds	r1, r7, #1
		hframerecv++;
    90ea:	6813      	ldr	r3, [r2, #0]
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    90ec:	4825      	ldr	r0, [pc, #148]	; (9184 <_Z7hdlc_rxPhS_ii+0x278>)
		hframerecv++;
    90ee:	3301      	adds	r3, #1
    90f0:	6013      	str	r3, [r2, #0]
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    90f2:	2301      	movs	r3, #1
    90f4:	9a01      	ldr	r2, [sp, #4]
    90f6:	f7fb f8ed 	bl	42d4 <_Z7log_msgPKcPKvii>
		return 1;
    90fa:	2501      	movs	r5, #1
    90fc:	e7c0      	b.n	9080 <_Z7hdlc_rxPhS_ii+0x174>
			dlog( LOG_DEBUG, "Zero infolen" );
    90fe:	4922      	ldr	r1, [pc, #136]	; (9188 <_Z7hdlc_rxPhS_ii+0x27c>)
    9100:	2007      	movs	r0, #7
    9102:	f7fb f889 	bl	4218 <_Z4dlogiPKcz>
    9106:	e7ee      	b.n	90e6 <_Z7hdlc_rxPhS_ii+0x1da>
		if ( hctx.hu_pend == 2 ) 
    9108:	6873      	ldr	r3, [r6, #4]
    910a:	2b02      	cmp	r3, #2
    910c:	d000      	beq.n	9110 <_Z7hdlc_rxPhS_ii+0x204>
    910e:	e77b      	b.n	9008 <_Z7hdlc_rxPhS_ii+0xfc>
			dlog( LOG_DEBUG, "hctx.hu_pend == 2" );
    9110:	491e      	ldr	r1, [pc, #120]	; (918c <_Z7hdlc_rxPhS_ii+0x280>)
			dlog( LOG_DEBUG, "Discard frame - CRC error" );
    9112:	2007      	movs	r0, #7
    9114:	f7fb f880 	bl	4218 <_Z4dlogiPKcz>
			return 0;
    9118:	e7b2      	b.n	9080 <_Z7hdlc_rxPhS_ii+0x174>
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    911a:	2304      	movs	r3, #4
    911c:	9a00      	ldr	r2, [sp, #0]
			dlog( LOG_DEBUG, "bad infolen - flush" );
    911e:	491c      	ldr	r1, [pc, #112]	; (9190 <_Z7hdlc_rxPhS_ii+0x284>)
    9120:	2007      	movs	r0, #7
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    9122:	7013      	strb	r3, [r2, #0]
			dlog( LOG_DEBUG, "bad infolen - flush" );
    9124:	f7fb f878 	bl	4218 <_Z4dlogiPKcz>
    9128:	e787      	b.n	903a <_Z7hdlc_rxPhS_ii+0x12e>
    912a:	46c0      	nop			; (mov r8, r8)
    912c:	20001e20 	.word	0x20001e20
    9130:	20001e1c 	.word	0x20001e1c
    9134:	40b00000 	.word	0x40b00000
    9138:	20001a11 	.word	0x20001a11
    913c:	000123ab 	.word	0x000123ab
    9140:	000123c1 	.word	0x000123c1
    9144:	000123e8 	.word	0x000123e8
    9148:	20001f3c 	.word	0x20001f3c
    914c:	00012412 	.word	0x00012412
    9150:	20001a12 	.word	0x20001a12
    9154:	00012529 	.word	0x00012529
    9158:	20001f1e 	.word	0x20001f1e
    915c:	00012439 	.word	0x00012439
    9160:	00012475 	.word	0x00012475
    9164:	0001110a 	.word	0x0001110a
    9168:	00012481 	.word	0x00012481
    916c:	0001248d 	.word	0x0001248d
    9170:	000124a7 	.word	0x000124a7
    9174:	20001e18 	.word	0x20001e18
    9178:	000124c4 	.word	0x000124c4
    917c:	000124e3 	.word	0x000124e3
    9180:	20001e14 	.word	0x20001e14
    9184:	00012519 	.word	0x00012519
    9188:	0001250c 	.word	0x0001250c
    918c:	00012427 	.word	0x00012427
    9190:	00012539 	.word	0x00012539

00009194 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// protected method to read stream with timeout
int Stream::timedRead()
{
    9194:	b510      	push	{r4, lr}
    9196:	0004      	movs	r4, r0
  int c;
  _startMillis = millis();
    9198:	f7f9 fa64 	bl	2664 <millis>
    919c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
    919e:	6823      	ldr	r3, [r4, #0]
    91a0:	0020      	movs	r0, r4
    91a2:	695b      	ldr	r3, [r3, #20]
    91a4:	4798      	blx	r3
    if (c >= 0) return c;
    91a6:	2800      	cmp	r0, #0
    91a8:	da08      	bge.n	91bc <_ZN6Stream9timedReadEv+0x28>
  } while(millis() - _startMillis < _timeout);
    91aa:	f7f9 fa5b 	bl	2664 <millis>
    91ae:	68e3      	ldr	r3, [r4, #12]
    91b0:	1ac0      	subs	r0, r0, r3
  do {
    91b2:	68a3      	ldr	r3, [r4, #8]
    91b4:	4298      	cmp	r0, r3
    91b6:	d3f2      	bcc.n	919e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
    91b8:	2001      	movs	r0, #1
    91ba:	4240      	negs	r0, r0
}
    91bc:	bd10      	pop	{r4, pc}

000091be <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    91be:	6081      	str	r1, [r0, #8]
}
    91c0:	4770      	bx	lr

000091c2 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    91c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    91c4:	000e      	movs	r6, r1
    91c6:	000c      	movs	r4, r1
    91c8:	9001      	str	r0, [sp, #4]
    91ca:	188d      	adds	r5, r1, r2
    91cc:	1ba7      	subs	r7, r4, r6
  size_t count = 0;
  while (count < length) {
    91ce:	42ac      	cmp	r4, r5
    91d0:	d007      	beq.n	91e2 <_ZN6Stream9readBytesEPcj+0x20>
    int c = timedRead();
    91d2:	9801      	ldr	r0, [sp, #4]
    91d4:	f7ff ffde 	bl	9194 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    91d8:	2800      	cmp	r0, #0
    91da:	db02      	blt.n	91e2 <_ZN6Stream9readBytesEPcj+0x20>
    *buffer++ = (char)c;
    91dc:	7020      	strb	r0, [r4, #0]
    91de:	3401      	adds	r4, #1
  while (count < length) {
    91e0:	e7f4      	b.n	91cc <_ZN6Stream9readBytesEPcj+0xa>
    count++;
  }
  return count;
}
    91e2:	0038      	movs	r0, r7
    91e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000091e6 <_Z8buf_be16PKvi>:

uint16_t
buf_be16(const void *buf, int idx)
{
    const uint8_t *p = (const uint8_t *) buf;    
    return (p[idx + 1] | p[idx] << 8);
    91e6:	1843      	adds	r3, r0, r1
    91e8:	5c40      	ldrb	r0, [r0, r1]
    91ea:	785b      	ldrb	r3, [r3, #1]
    91ec:	0200      	lsls	r0, r0, #8
    91ee:	4318      	orrs	r0, r3
}
    91f0:	4770      	bx	lr

000091f2 <_Z9buf_wbe16Pvit>:
void
buf_wbe16(void *buf, int idx, uint16_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    91f2:	1841      	adds	r1, r0, r1
    *p++ = val >> 8;
    91f4:	1213      	asrs	r3, r2, #8
    91f6:	700b      	strb	r3, [r1, #0]
    *p = val & 0xFF;
    91f8:	704a      	strb	r2, [r1, #1]
	
} // buf_wbe16
    91fa:	4770      	bx	lr

000091fc <_Z9buf_wle16Pvit>:
void
buf_wle16(void *buf, int idx, uint16_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    91fc:	1841      	adds	r1, r0, r1
    *p++ = val & 0xFF;
    91fe:	700a      	strb	r2, [r1, #0]
    *p = val >> 8;
    9200:	1212      	asrs	r2, r2, #8
    9202:	704a      	strb	r2, [r1, #1]
}
    9204:	4770      	bx	lr

00009206 <_Z9buf_wbe32Pvim>:
void
buf_wbe32(void *buf, int idx, uint32_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    9206:	1841      	adds	r1, r0, r1
    *p++ = val >> 24;
    9208:	0e13      	lsrs	r3, r2, #24
    920a:	700b      	strb	r3, [r1, #0]
    *p++ = (val >> 16) & 0xFF;
    920c:	0c13      	lsrs	r3, r2, #16
    920e:	704b      	strb	r3, [r1, #1]
    *p++ = (val >> 8) & 0xFF;
    9210:	0a13      	lsrs	r3, r2, #8
    9212:	708b      	strb	r3, [r1, #2]
    *p = val & 0xFF;
    9214:	70ca      	strb	r2, [r1, #3]
}
    9216:	4770      	bx	lr

00009218 <_Z10crc16_initv>:

uint16_t
crc16_init(void)
{
    return CRC16_INITIAL;
}
    9218:	4800      	ldr	r0, [pc, #0]	; (921c <_Z10crc16_initv+0x4>)
    921a:	4770      	bx	lr
    921c:	0000ffff 	.word	0x0000ffff

00009220 <_Z5crc16tPKvj>:

uint16_t
crc16(uint16_t crc, const  void *addr_v, unsigned int len)
{
    9220:	b530      	push	{r4, r5, lr}
    const uint8_t *addr = (const uint8_t *)addr_v;
    uint8_t ch;

    while (len--) {
        ch = *addr++;
        crc = (crc >> 8) ^ xmodem_crctable[(crc ^ ch) & 0xFF]; 
    9222:	25ff      	movs	r5, #255	; 0xff
    9224:	4c06      	ldr	r4, [pc, #24]	; (9240 <_Z5crc16tPKvj+0x20>)
    9226:	188a      	adds	r2, r1, r2
    while (len--) {
    9228:	4291      	cmp	r1, r2
    922a:	d008      	beq.n	923e <_Z5crc16tPKvj+0x1e>
        crc = (crc >> 8) ^ xmodem_crctable[(crc ^ ch) & 0xFF]; 
    922c:	780b      	ldrb	r3, [r1, #0]
    922e:	3101      	adds	r1, #1
    9230:	4043      	eors	r3, r0
    9232:	402b      	ands	r3, r5
    9234:	005b      	lsls	r3, r3, #1
    9236:	5b1b      	ldrh	r3, [r3, r4]
    9238:	1200      	asrs	r0, r0, #8
    923a:	4058      	eors	r0, r3
    while (len--) {
    923c:	e7f4      	b.n	9228 <_Z5crc16tPKvj+0x8>

    }
    return crc;
}    
    923e:	bd30      	pop	{r4, r5, pc}
    9240:	0001254e 	.word	0x0001254e

00009244 <_Z14crc16_validatePKvj>:
/* len includes the 2 bytes of CRC at the end of the buffer 
 * return 0 for OK, nonzero for error
 */
int
crc16_validate(const void *addr_v, unsigned int len)
{
    9244:	b510      	push	{r4, lr}
    9246:	000a      	movs	r2, r1
    return (crc16(CRC16_INITIAL, addr_v, len) != CRC16_FINAL);         
    9248:	0001      	movs	r1, r0
    924a:	4804      	ldr	r0, [pc, #16]	; (925c <_Z14crc16_validatePKvj+0x18>)
    924c:	f7ff ffe8 	bl	9220 <_Z5crc16tPKvj>
    9250:	4b03      	ldr	r3, [pc, #12]	; (9260 <_Z14crc16_validatePKvj+0x1c>)
    9252:	18c0      	adds	r0, r0, r3
    9254:	1e43      	subs	r3, r0, #1
    9256:	4198      	sbcs	r0, r3
}
    9258:	bd10      	pop	{r4, pc}
    925a:	46c0      	nop			; (mov r8, r8)
    925c:	0000ffff 	.word	0x0000ffff
    9260:	ffff0f48 	.word	0xffff0f48

00009264 <__aeabi_atexit>:
    9264:	000b      	movs	r3, r1
    9266:	b510      	push	{r4, lr}
    9268:	0001      	movs	r1, r0
    926a:	0018      	movs	r0, r3
    926c:	f003 faaa 	bl	c7c4 <__cxa_atexit>
    9270:	bd10      	pop	{r4, pc}
	...

00009274 <exp>:
    9274:	b5f0      	push	{r4, r5, r6, r7, lr}
    9276:	4647      	mov	r7, r8
    9278:	46ce      	mov	lr, r9
    927a:	b580      	push	{r7, lr}
    927c:	b08b      	sub	sp, #44	; 0x2c
    927e:	0004      	movs	r4, r0
    9280:	000d      	movs	r5, r1
    9282:	f000 f8cb 	bl	941c <__ieee754_exp>
    9286:	4b34      	ldr	r3, [pc, #208]	; (9358 <exp+0xe4>)
    9288:	0006      	movs	r6, r0
    928a:	4698      	mov	r8, r3
    928c:	781b      	ldrb	r3, [r3, #0]
    928e:	000f      	movs	r7, r1
    9290:	b25b      	sxtb	r3, r3
    9292:	3301      	adds	r3, #1
    9294:	d038      	beq.n	9308 <exp+0x94>
    9296:	0020      	movs	r0, r4
    9298:	0029      	movs	r1, r5
    929a:	f000 fa8d 	bl	97b8 <finite>
    929e:	2800      	cmp	r0, #0
    92a0:	d032      	beq.n	9308 <exp+0x94>
    92a2:	4a2e      	ldr	r2, [pc, #184]	; (935c <exp+0xe8>)
    92a4:	4b2e      	ldr	r3, [pc, #184]	; (9360 <exp+0xec>)
    92a6:	0020      	movs	r0, r4
    92a8:	0029      	movs	r1, r5
    92aa:	f000 fc3b 	bl	9b24 <__aeabi_dcmpgt>
    92ae:	4681      	mov	r9, r0
    92b0:	2800      	cmp	r0, #0
    92b2:	d130      	bne.n	9316 <exp+0xa2>
    92b4:	4a2b      	ldr	r2, [pc, #172]	; (9364 <exp+0xf0>)
    92b6:	4b2c      	ldr	r3, [pc, #176]	; (9368 <exp+0xf4>)
    92b8:	0020      	movs	r0, r4
    92ba:	0029      	movs	r1, r5
    92bc:	f000 fc1e 	bl	9afc <__aeabi_dcmplt>
    92c0:	2800      	cmp	r0, #0
    92c2:	d021      	beq.n	9308 <exp+0x94>
    92c4:	2304      	movs	r3, #4
    92c6:	9300      	str	r3, [sp, #0]
    92c8:	4b28      	ldr	r3, [pc, #160]	; (936c <exp+0xf8>)
    92ca:	2200      	movs	r2, #0
    92cc:	9301      	str	r3, [sp, #4]
    92ce:	464b      	mov	r3, r9
    92d0:	9308      	str	r3, [sp, #32]
    92d2:	2300      	movs	r3, #0
    92d4:	9206      	str	r2, [sp, #24]
    92d6:	9307      	str	r3, [sp, #28]
    92d8:	4643      	mov	r3, r8
    92da:	781b      	ldrb	r3, [r3, #0]
    92dc:	466e      	mov	r6, sp
    92de:	b25b      	sxtb	r3, r3
    92e0:	9404      	str	r4, [sp, #16]
    92e2:	9505      	str	r5, [sp, #20]
    92e4:	9402      	str	r4, [sp, #8]
    92e6:	9503      	str	r5, [sp, #12]
    92e8:	2b02      	cmp	r3, #2
    92ea:	d030      	beq.n	934e <exp+0xda>
    92ec:	0030      	movs	r0, r6
    92ee:	f000 fa6d 	bl	97cc <matherr>
    92f2:	2800      	cmp	r0, #0
    92f4:	d02b      	beq.n	934e <exp+0xda>
    92f6:	6a33      	ldr	r3, [r6, #32]
    92f8:	2b00      	cmp	r3, #0
    92fa:	d003      	beq.n	9304 <exp+0x90>
    92fc:	f003 fa70 	bl	c7e0 <__errno>
    9300:	6a33      	ldr	r3, [r6, #32]
    9302:	6003      	str	r3, [r0, #0]
    9304:	69f7      	ldr	r7, [r6, #28]
    9306:	69b6      	ldr	r6, [r6, #24]
    9308:	0030      	movs	r0, r6
    930a:	0039      	movs	r1, r7
    930c:	b00b      	add	sp, #44	; 0x2c
    930e:	bc0c      	pop	{r2, r3}
    9310:	4690      	mov	r8, r2
    9312:	4699      	mov	r9, r3
    9314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9316:	2303      	movs	r3, #3
    9318:	9300      	str	r3, [sp, #0]
    931a:	4b14      	ldr	r3, [pc, #80]	; (936c <exp+0xf8>)
    931c:	466e      	mov	r6, sp
    931e:	9301      	str	r3, [sp, #4]
    9320:	2300      	movs	r3, #0
    9322:	9308      	str	r3, [sp, #32]
    9324:	4643      	mov	r3, r8
    9326:	781b      	ldrb	r3, [r3, #0]
    9328:	9404      	str	r4, [sp, #16]
    932a:	9505      	str	r5, [sp, #20]
    932c:	b25b      	sxtb	r3, r3
    932e:	9402      	str	r4, [sp, #8]
    9330:	9503      	str	r5, [sp, #12]
    9332:	2b00      	cmp	r3, #0
    9334:	d105      	bne.n	9342 <exp+0xce>
    9336:	22e0      	movs	r2, #224	; 0xe0
    9338:	4b0d      	ldr	r3, [pc, #52]	; (9370 <exp+0xfc>)
    933a:	0612      	lsls	r2, r2, #24
    933c:	9206      	str	r2, [sp, #24]
    933e:	9307      	str	r3, [sp, #28]
    9340:	e7d4      	b.n	92ec <exp+0x78>
    9342:	2000      	movs	r0, #0
    9344:	490b      	ldr	r1, [pc, #44]	; (9374 <exp+0x100>)
    9346:	9006      	str	r0, [sp, #24]
    9348:	9107      	str	r1, [sp, #28]
    934a:	2b02      	cmp	r3, #2
    934c:	d1ce      	bne.n	92ec <exp+0x78>
    934e:	f003 fa47 	bl	c7e0 <__errno>
    9352:	2322      	movs	r3, #34	; 0x22
    9354:	6003      	str	r3, [r0, #0]
    9356:	e7ce      	b.n	92f6 <exp+0x82>
    9358:	200000b0 	.word	0x200000b0
    935c:	fefa39ef 	.word	0xfefa39ef
    9360:	40862e42 	.word	0x40862e42
    9364:	d52d3051 	.word	0xd52d3051
    9368:	c0874910 	.word	0xc0874910
    936c:	00012750 	.word	0x00012750
    9370:	47efffff 	.word	0x47efffff
    9374:	7ff00000 	.word	0x7ff00000

00009378 <sqrtf>:
    9378:	b5f0      	push	{r4, r5, r6, r7, lr}
    937a:	2500      	movs	r5, #0
    937c:	b08d      	sub	sp, #52	; 0x34
    937e:	1c04      	adds	r4, r0, #0
    9380:	f000 f9be 	bl	9700 <__ieee754_sqrtf>
    9384:	4b23      	ldr	r3, [pc, #140]	; (9414 <sqrtf+0x9c>)
    9386:	1c06      	adds	r6, r0, #0
    9388:	575d      	ldrsb	r5, [r3, r5]
    938a:	1c6b      	adds	r3, r5, #1
    938c:	d00b      	beq.n	93a6 <sqrtf+0x2e>
    938e:	1c21      	adds	r1, r4, #0
    9390:	1c20      	adds	r0, r4, #0
    9392:	f001 fa89 	bl	a8a8 <__aeabi_fcmpun>
    9396:	1e07      	subs	r7, r0, #0
    9398:	d105      	bne.n	93a6 <sqrtf+0x2e>
    939a:	2100      	movs	r1, #0
    939c:	1c20      	adds	r0, r4, #0
    939e:	f000 fbe7 	bl	9b70 <__aeabi_fcmplt>
    93a2:	2800      	cmp	r0, #0
    93a4:	d102      	bne.n	93ac <sqrtf+0x34>
    93a6:	1c30      	adds	r0, r6, #0
    93a8:	b00d      	add	sp, #52	; 0x34
    93aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93ac:	2301      	movs	r3, #1
    93ae:	9302      	str	r3, [sp, #8]
    93b0:	4b19      	ldr	r3, [pc, #100]	; (9418 <sqrtf+0xa0>)
    93b2:	1c20      	adds	r0, r4, #0
    93b4:	9303      	str	r3, [sp, #12]
    93b6:	970a      	str	r7, [sp, #40]	; 0x28
    93b8:	f003 f8ec 	bl	c594 <__aeabi_f2d>
    93bc:	2200      	movs	r2, #0
    93be:	9006      	str	r0, [sp, #24]
    93c0:	9107      	str	r1, [sp, #28]
    93c2:	9004      	str	r0, [sp, #16]
    93c4:	9105      	str	r1, [sp, #20]
    93c6:	2300      	movs	r3, #0
    93c8:	2d00      	cmp	r5, #0
    93ca:	d015      	beq.n	93f8 <sqrtf+0x80>
    93cc:	0010      	movs	r0, r2
    93ce:	0019      	movs	r1, r3
    93d0:	f001 fe48 	bl	b064 <__aeabi_ddiv>
    93d4:	9008      	str	r0, [sp, #32]
    93d6:	9109      	str	r1, [sp, #36]	; 0x24
    93d8:	2d02      	cmp	r5, #2
    93da:	d10f      	bne.n	93fc <sqrtf+0x84>
    93dc:	f003 fa00 	bl	c7e0 <__errno>
    93e0:	2321      	movs	r3, #33	; 0x21
    93e2:	6003      	str	r3, [r0, #0]
    93e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    93e6:	9301      	str	r3, [sp, #4]
    93e8:	2b00      	cmp	r3, #0
    93ea:	d10d      	bne.n	9408 <sqrtf+0x90>
    93ec:	9808      	ldr	r0, [sp, #32]
    93ee:	9909      	ldr	r1, [sp, #36]	; 0x24
    93f0:	f003 f922 	bl	c638 <__aeabi_d2f>
    93f4:	1c06      	adds	r6, r0, #0
    93f6:	e7d6      	b.n	93a6 <sqrtf+0x2e>
    93f8:	9208      	str	r2, [sp, #32]
    93fa:	9309      	str	r3, [sp, #36]	; 0x24
    93fc:	a802      	add	r0, sp, #8
    93fe:	f000 f9e5 	bl	97cc <matherr>
    9402:	2800      	cmp	r0, #0
    9404:	d1ee      	bne.n	93e4 <sqrtf+0x6c>
    9406:	e7e9      	b.n	93dc <sqrtf+0x64>
    9408:	f003 f9ea 	bl	c7e0 <__errno>
    940c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    940e:	9301      	str	r3, [sp, #4]
    9410:	6003      	str	r3, [r0, #0]
    9412:	e7eb      	b.n	93ec <sqrtf+0x74>
    9414:	200000b0 	.word	0x200000b0
    9418:	00012754 	.word	0x00012754

0000941c <__ieee754_exp>:
    941c:	b5f0      	push	{r4, r5, r6, r7, lr}
    941e:	46d6      	mov	lr, sl
    9420:	b500      	push	{lr}
    9422:	004b      	lsls	r3, r1, #1
    9424:	000e      	movs	r6, r1
    9426:	0fcc      	lsrs	r4, r1, #31
    9428:	4995      	ldr	r1, [pc, #596]	; (9680 <__ieee754_exp+0x264>)
    942a:	b084      	sub	sp, #16
    942c:	0007      	movs	r7, r0
    942e:	085b      	lsrs	r3, r3, #1
    9430:	428b      	cmp	r3, r1
    9432:	d90e      	bls.n	9452 <__ieee754_exp+0x36>
    9434:	4993      	ldr	r1, [pc, #588]	; (9684 <__ieee754_exp+0x268>)
    9436:	428b      	cmp	r3, r1
    9438:	d800      	bhi.n	943c <__ieee754_exp+0x20>
    943a:	e084      	b.n	9546 <__ieee754_exp+0x12a>
    943c:	0332      	lsls	r2, r6, #12
    943e:	0b12      	lsrs	r2, r2, #12
    9440:	4302      	orrs	r2, r0
    9442:	d000      	beq.n	9446 <__ieee754_exp+0x2a>
    9444:	e0f7      	b.n	9636 <__ieee754_exp+0x21a>
    9446:	0031      	movs	r1, r6
    9448:	2c00      	cmp	r4, #0
    944a:	d078      	beq.n	953e <__ieee754_exp+0x122>
    944c:	2000      	movs	r0, #0
    944e:	2100      	movs	r1, #0
    9450:	e075      	b.n	953e <__ieee754_exp+0x122>
    9452:	4a8d      	ldr	r2, [pc, #564]	; (9688 <__ieee754_exp+0x26c>)
    9454:	4293      	cmp	r3, r2
    9456:	d900      	bls.n	945a <__ieee754_exp+0x3e>
    9458:	e0b6      	b.n	95c8 <__ieee754_exp+0x1ac>
    945a:	4a8c      	ldr	r2, [pc, #560]	; (968c <__ieee754_exp+0x270>)
    945c:	4293      	cmp	r3, r2
    945e:	d800      	bhi.n	9462 <__ieee754_exp+0x46>
    9460:	e0ca      	b.n	95f8 <__ieee754_exp+0x1dc>
    9462:	2300      	movs	r3, #0
    9464:	469a      	mov	sl, r3
    9466:	003a      	movs	r2, r7
    9468:	0033      	movs	r3, r6
    946a:	0038      	movs	r0, r7
    946c:	0031      	movs	r1, r6
    946e:	f002 fa2d 	bl	b8cc <__aeabi_dmul>
    9472:	0004      	movs	r4, r0
    9474:	000d      	movs	r5, r1
    9476:	4a86      	ldr	r2, [pc, #536]	; (9690 <__ieee754_exp+0x274>)
    9478:	4b86      	ldr	r3, [pc, #536]	; (9694 <__ieee754_exp+0x278>)
    947a:	f002 fa27 	bl	b8cc <__aeabi_dmul>
    947e:	4a86      	ldr	r2, [pc, #536]	; (9698 <__ieee754_exp+0x27c>)
    9480:	4b86      	ldr	r3, [pc, #536]	; (969c <__ieee754_exp+0x280>)
    9482:	f002 fca3 	bl	bdcc <__aeabi_dsub>
    9486:	0022      	movs	r2, r4
    9488:	002b      	movs	r3, r5
    948a:	f002 fa1f 	bl	b8cc <__aeabi_dmul>
    948e:	4a84      	ldr	r2, [pc, #528]	; (96a0 <__ieee754_exp+0x284>)
    9490:	4b84      	ldr	r3, [pc, #528]	; (96a4 <__ieee754_exp+0x288>)
    9492:	f001 fad7 	bl	aa44 <__aeabi_dadd>
    9496:	0022      	movs	r2, r4
    9498:	002b      	movs	r3, r5
    949a:	f002 fa17 	bl	b8cc <__aeabi_dmul>
    949e:	4a82      	ldr	r2, [pc, #520]	; (96a8 <__ieee754_exp+0x28c>)
    94a0:	4b82      	ldr	r3, [pc, #520]	; (96ac <__ieee754_exp+0x290>)
    94a2:	f002 fc93 	bl	bdcc <__aeabi_dsub>
    94a6:	0022      	movs	r2, r4
    94a8:	002b      	movs	r3, r5
    94aa:	f002 fa0f 	bl	b8cc <__aeabi_dmul>
    94ae:	4a80      	ldr	r2, [pc, #512]	; (96b0 <__ieee754_exp+0x294>)
    94b0:	4b80      	ldr	r3, [pc, #512]	; (96b4 <__ieee754_exp+0x298>)
    94b2:	f001 fac7 	bl	aa44 <__aeabi_dadd>
    94b6:	0022      	movs	r2, r4
    94b8:	002b      	movs	r3, r5
    94ba:	f002 fa07 	bl	b8cc <__aeabi_dmul>
    94be:	0002      	movs	r2, r0
    94c0:	000b      	movs	r3, r1
    94c2:	0038      	movs	r0, r7
    94c4:	0031      	movs	r1, r6
    94c6:	f002 fc81 	bl	bdcc <__aeabi_dsub>
    94ca:	4653      	mov	r3, sl
    94cc:	0004      	movs	r4, r0
    94ce:	000d      	movs	r5, r1
    94d0:	0002      	movs	r2, r0
    94d2:	2b00      	cmp	r3, #0
    94d4:	d100      	bne.n	94d8 <__ieee754_exp+0xbc>
    94d6:	e0b4      	b.n	9642 <__ieee754_exp+0x226>
    94d8:	000b      	movs	r3, r1
    94da:	0038      	movs	r0, r7
    94dc:	0031      	movs	r1, r6
    94de:	f002 f9f5 	bl	b8cc <__aeabi_dmul>
    94e2:	000f      	movs	r7, r1
    94e4:	2180      	movs	r1, #128	; 0x80
    94e6:	0006      	movs	r6, r0
    94e8:	0022      	movs	r2, r4
    94ea:	002b      	movs	r3, r5
    94ec:	2000      	movs	r0, #0
    94ee:	05c9      	lsls	r1, r1, #23
    94f0:	f002 fc6c 	bl	bdcc <__aeabi_dsub>
    94f4:	0002      	movs	r2, r0
    94f6:	000b      	movs	r3, r1
    94f8:	0030      	movs	r0, r6
    94fa:	0039      	movs	r1, r7
    94fc:	f001 fdb2 	bl	b064 <__aeabi_ddiv>
    9500:	0002      	movs	r2, r0
    9502:	000b      	movs	r3, r1
    9504:	9802      	ldr	r0, [sp, #8]
    9506:	9903      	ldr	r1, [sp, #12]
    9508:	f002 fc60 	bl	bdcc <__aeabi_dsub>
    950c:	9a00      	ldr	r2, [sp, #0]
    950e:	9b01      	ldr	r3, [sp, #4]
    9510:	f002 fc5c 	bl	bdcc <__aeabi_dsub>
    9514:	000b      	movs	r3, r1
    9516:	0002      	movs	r2, r0
    9518:	4967      	ldr	r1, [pc, #412]	; (96b8 <__ieee754_exp+0x29c>)
    951a:	2000      	movs	r0, #0
    951c:	f002 fc56 	bl	bdcc <__aeabi_dsub>
    9520:	4b66      	ldr	r3, [pc, #408]	; (96bc <__ieee754_exp+0x2a0>)
    9522:	459a      	cmp	sl, r3
    9524:	db00      	blt.n	9528 <__ieee754_exp+0x10c>
    9526:	e07a      	b.n	961e <__ieee754_exp+0x202>
    9528:	24fa      	movs	r4, #250	; 0xfa
    952a:	00a4      	lsls	r4, r4, #2
    952c:	4454      	add	r4, sl
    952e:	0524      	lsls	r4, r4, #20
    9530:	1863      	adds	r3, r4, r1
    9532:	0019      	movs	r1, r3
    9534:	23b8      	movs	r3, #184	; 0xb8
    9536:	2200      	movs	r2, #0
    9538:	045b      	lsls	r3, r3, #17
    953a:	f002 f9c7 	bl	b8cc <__aeabi_dmul>
    953e:	b004      	add	sp, #16
    9540:	bc04      	pop	{r2}
    9542:	4692      	mov	sl, r2
    9544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9546:	4a5e      	ldr	r2, [pc, #376]	; (96c0 <__ieee754_exp+0x2a4>)
    9548:	4b5e      	ldr	r3, [pc, #376]	; (96c4 <__ieee754_exp+0x2a8>)
    954a:	0031      	movs	r1, r6
    954c:	f000 faea 	bl	9b24 <__aeabi_dcmpgt>
    9550:	2800      	cmp	r0, #0
    9552:	d169      	bne.n	9628 <__ieee754_exp+0x20c>
    9554:	4a5c      	ldr	r2, [pc, #368]	; (96c8 <__ieee754_exp+0x2ac>)
    9556:	4b5d      	ldr	r3, [pc, #372]	; (96cc <__ieee754_exp+0x2b0>)
    9558:	0038      	movs	r0, r7
    955a:	0031      	movs	r1, r6
    955c:	f000 face 	bl	9afc <__aeabi_dcmplt>
    9560:	2800      	cmp	r0, #0
    9562:	d000      	beq.n	9566 <__ieee754_exp+0x14a>
    9564:	e772      	b.n	944c <__ieee754_exp+0x30>
    9566:	4b5a      	ldr	r3, [pc, #360]	; (96d0 <__ieee754_exp+0x2b4>)
    9568:	00e4      	lsls	r4, r4, #3
    956a:	191c      	adds	r4, r3, r4
    956c:	4a59      	ldr	r2, [pc, #356]	; (96d4 <__ieee754_exp+0x2b8>)
    956e:	4b5a      	ldr	r3, [pc, #360]	; (96d8 <__ieee754_exp+0x2bc>)
    9570:	0038      	movs	r0, r7
    9572:	0031      	movs	r1, r6
    9574:	f002 f9aa 	bl	b8cc <__aeabi_dmul>
    9578:	6822      	ldr	r2, [r4, #0]
    957a:	6863      	ldr	r3, [r4, #4]
    957c:	f001 fa62 	bl	aa44 <__aeabi_dadd>
    9580:	f002 ff5a 	bl	c438 <__aeabi_d2iz>
    9584:	4682      	mov	sl, r0
    9586:	f002 ff8b 	bl	c4a0 <__aeabi_i2d>
    958a:	4a54      	ldr	r2, [pc, #336]	; (96dc <__ieee754_exp+0x2c0>)
    958c:	4b54      	ldr	r3, [pc, #336]	; (96e0 <__ieee754_exp+0x2c4>)
    958e:	0004      	movs	r4, r0
    9590:	000d      	movs	r5, r1
    9592:	f002 f99b 	bl	b8cc <__aeabi_dmul>
    9596:	0002      	movs	r2, r0
    9598:	000b      	movs	r3, r1
    959a:	0038      	movs	r0, r7
    959c:	0031      	movs	r1, r6
    959e:	f002 fc15 	bl	bdcc <__aeabi_dsub>
    95a2:	4a50      	ldr	r2, [pc, #320]	; (96e4 <__ieee754_exp+0x2c8>)
    95a4:	9000      	str	r0, [sp, #0]
    95a6:	9101      	str	r1, [sp, #4]
    95a8:	4b4f      	ldr	r3, [pc, #316]	; (96e8 <__ieee754_exp+0x2cc>)
    95aa:	0020      	movs	r0, r4
    95ac:	0029      	movs	r1, r5
    95ae:	f002 f98d 	bl	b8cc <__aeabi_dmul>
    95b2:	9002      	str	r0, [sp, #8]
    95b4:	9103      	str	r1, [sp, #12]
    95b6:	9a02      	ldr	r2, [sp, #8]
    95b8:	9b03      	ldr	r3, [sp, #12]
    95ba:	9800      	ldr	r0, [sp, #0]
    95bc:	9901      	ldr	r1, [sp, #4]
    95be:	f002 fc05 	bl	bdcc <__aeabi_dsub>
    95c2:	0007      	movs	r7, r0
    95c4:	000e      	movs	r6, r1
    95c6:	e74e      	b.n	9466 <__ieee754_exp+0x4a>
    95c8:	4a48      	ldr	r2, [pc, #288]	; (96ec <__ieee754_exp+0x2d0>)
    95ca:	4293      	cmp	r3, r2
    95cc:	d8cb      	bhi.n	9566 <__ieee754_exp+0x14a>
    95ce:	4b48      	ldr	r3, [pc, #288]	; (96f0 <__ieee754_exp+0x2d4>)
    95d0:	00e5      	lsls	r5, r4, #3
    95d2:	195b      	adds	r3, r3, r5
    95d4:	681a      	ldr	r2, [r3, #0]
    95d6:	685b      	ldr	r3, [r3, #4]
    95d8:	0031      	movs	r1, r6
    95da:	f002 fbf7 	bl	bdcc <__aeabi_dsub>
    95de:	4b45      	ldr	r3, [pc, #276]	; (96f4 <__ieee754_exp+0x2d8>)
    95e0:	9000      	str	r0, [sp, #0]
    95e2:	9101      	str	r1, [sp, #4]
    95e4:	195b      	adds	r3, r3, r5
    95e6:	681a      	ldr	r2, [r3, #0]
    95e8:	685b      	ldr	r3, [r3, #4]
    95ea:	9202      	str	r2, [sp, #8]
    95ec:	9303      	str	r3, [sp, #12]
    95ee:	2301      	movs	r3, #1
    95f0:	1b1b      	subs	r3, r3, r4
    95f2:	1b1b      	subs	r3, r3, r4
    95f4:	469a      	mov	sl, r3
    95f6:	e7de      	b.n	95b6 <__ieee754_exp+0x19a>
    95f8:	4a3f      	ldr	r2, [pc, #252]	; (96f8 <__ieee754_exp+0x2dc>)
    95fa:	4b40      	ldr	r3, [pc, #256]	; (96fc <__ieee754_exp+0x2e0>)
    95fc:	0031      	movs	r1, r6
    95fe:	f001 fa21 	bl	aa44 <__aeabi_dadd>
    9602:	2200      	movs	r2, #0
    9604:	4b2c      	ldr	r3, [pc, #176]	; (96b8 <__ieee754_exp+0x29c>)
    9606:	f000 fa8d 	bl	9b24 <__aeabi_dcmpgt>
    960a:	2800      	cmp	r0, #0
    960c:	d100      	bne.n	9610 <__ieee754_exp+0x1f4>
    960e:	e728      	b.n	9462 <__ieee754_exp+0x46>
    9610:	2200      	movs	r2, #0
    9612:	4b29      	ldr	r3, [pc, #164]	; (96b8 <__ieee754_exp+0x29c>)
    9614:	0038      	movs	r0, r7
    9616:	0031      	movs	r1, r6
    9618:	f001 fa14 	bl	aa44 <__aeabi_dadd>
    961c:	e78f      	b.n	953e <__ieee754_exp+0x122>
    961e:	4654      	mov	r4, sl
    9620:	0524      	lsls	r4, r4, #20
    9622:	1863      	adds	r3, r4, r1
    9624:	0019      	movs	r1, r3
    9626:	e78a      	b.n	953e <__ieee754_exp+0x122>
    9628:	4a33      	ldr	r2, [pc, #204]	; (96f8 <__ieee754_exp+0x2dc>)
    962a:	4b34      	ldr	r3, [pc, #208]	; (96fc <__ieee754_exp+0x2e0>)
    962c:	0010      	movs	r0, r2
    962e:	0019      	movs	r1, r3
    9630:	f002 f94c 	bl	b8cc <__aeabi_dmul>
    9634:	e783      	b.n	953e <__ieee754_exp+0x122>
    9636:	0002      	movs	r2, r0
    9638:	0033      	movs	r3, r6
    963a:	0031      	movs	r1, r6
    963c:	f001 fa02 	bl	aa44 <__aeabi_dadd>
    9640:	e77d      	b.n	953e <__ieee754_exp+0x122>
    9642:	000b      	movs	r3, r1
    9644:	0038      	movs	r0, r7
    9646:	0031      	movs	r1, r6
    9648:	f002 f940 	bl	b8cc <__aeabi_dmul>
    964c:	2380      	movs	r3, #128	; 0x80
    964e:	9000      	str	r0, [sp, #0]
    9650:	9101      	str	r1, [sp, #4]
    9652:	2200      	movs	r2, #0
    9654:	05db      	lsls	r3, r3, #23
    9656:	0020      	movs	r0, r4
    9658:	0029      	movs	r1, r5
    965a:	f002 fbb7 	bl	bdcc <__aeabi_dsub>
    965e:	0002      	movs	r2, r0
    9660:	000b      	movs	r3, r1
    9662:	9800      	ldr	r0, [sp, #0]
    9664:	9901      	ldr	r1, [sp, #4]
    9666:	f001 fcfd 	bl	b064 <__aeabi_ddiv>
    966a:	003a      	movs	r2, r7
    966c:	0033      	movs	r3, r6
    966e:	f002 fbad 	bl	bdcc <__aeabi_dsub>
    9672:	0002      	movs	r2, r0
    9674:	000b      	movs	r3, r1
    9676:	2000      	movs	r0, #0
    9678:	490f      	ldr	r1, [pc, #60]	; (96b8 <__ieee754_exp+0x29c>)
    967a:	f002 fba7 	bl	bdcc <__aeabi_dsub>
    967e:	e75e      	b.n	953e <__ieee754_exp+0x122>
    9680:	40862e41 	.word	0x40862e41
    9684:	7fefffff 	.word	0x7fefffff
    9688:	3fd62e42 	.word	0x3fd62e42
    968c:	3e2fffff 	.word	0x3e2fffff
    9690:	72bea4d0 	.word	0x72bea4d0
    9694:	3e663769 	.word	0x3e663769
    9698:	c5d26bf1 	.word	0xc5d26bf1
    969c:	3ebbbd41 	.word	0x3ebbbd41
    96a0:	af25de2c 	.word	0xaf25de2c
    96a4:	3f11566a 	.word	0x3f11566a
    96a8:	16bebd93 	.word	0x16bebd93
    96ac:	3f66c16c 	.word	0x3f66c16c
    96b0:	5555553e 	.word	0x5555553e
    96b4:	3fc55555 	.word	0x3fc55555
    96b8:	3ff00000 	.word	0x3ff00000
    96bc:	fffffc03 	.word	0xfffffc03
    96c0:	fefa39ef 	.word	0xfefa39ef
    96c4:	40862e42 	.word	0x40862e42
    96c8:	d52d3051 	.word	0xd52d3051
    96cc:	c0874910 	.word	0xc0874910
    96d0:	00012760 	.word	0x00012760
    96d4:	652b82fe 	.word	0x652b82fe
    96d8:	3ff71547 	.word	0x3ff71547
    96dc:	fee00000 	.word	0xfee00000
    96e0:	3fe62e42 	.word	0x3fe62e42
    96e4:	35793c76 	.word	0x35793c76
    96e8:	3dea39ef 	.word	0x3dea39ef
    96ec:	3ff0a2b1 	.word	0x3ff0a2b1
    96f0:	00012770 	.word	0x00012770
    96f4:	00012780 	.word	0x00012780
    96f8:	8800759c 	.word	0x8800759c
    96fc:	7e37e43c 	.word	0x7e37e43c

00009700 <__ieee754_sqrtf>:
    9700:	492b      	ldr	r1, [pc, #172]	; (97b0 <__ieee754_sqrtf+0xb0>)
    9702:	0042      	lsls	r2, r0, #1
    9704:	b570      	push	{r4, r5, r6, lr}
    9706:	0003      	movs	r3, r0
    9708:	1c04      	adds	r4, r0, #0
    970a:	0852      	lsrs	r2, r2, #1
    970c:	428a      	cmp	r2, r1
    970e:	d83a      	bhi.n	9786 <__ieee754_sqrtf+0x86>
    9710:	2a00      	cmp	r2, #0
    9712:	d037      	beq.n	9784 <__ieee754_sqrtf+0x84>
    9714:	2800      	cmp	r0, #0
    9716:	db3f      	blt.n	9798 <__ieee754_sqrtf+0x98>
    9718:	4926      	ldr	r1, [pc, #152]	; (97b4 <__ieee754_sqrtf+0xb4>)
    971a:	15c6      	asrs	r6, r0, #23
    971c:	428a      	cmp	r2, r1
    971e:	d80b      	bhi.n	9738 <__ieee754_sqrtf+0x38>
    9720:	2080      	movs	r0, #128	; 0x80
    9722:	0400      	lsls	r0, r0, #16
    9724:	4220      	tst	r0, r4
    9726:	d13e      	bne.n	97a6 <__ieee754_sqrtf+0xa6>
    9728:	2200      	movs	r2, #0
    972a:	e000      	b.n	972e <__ieee754_sqrtf+0x2e>
    972c:	000a      	movs	r2, r1
    972e:	005b      	lsls	r3, r3, #1
    9730:	1c51      	adds	r1, r2, #1
    9732:	4203      	tst	r3, r0
    9734:	d0fa      	beq.n	972c <__ieee754_sqrtf+0x2c>
    9736:	1ab6      	subs	r6, r6, r2
    9738:	025b      	lsls	r3, r3, #9
    973a:	0a5a      	lsrs	r2, r3, #9
    973c:	2380      	movs	r3, #128	; 0x80
    973e:	3e7f      	subs	r6, #127	; 0x7f
    9740:	041b      	lsls	r3, r3, #16
    9742:	4313      	orrs	r3, r2
    9744:	07f2      	lsls	r2, r6, #31
    9746:	d425      	bmi.n	9794 <__ieee754_sqrtf+0x94>
    9748:	2280      	movs	r2, #128	; 0x80
    974a:	1070      	asrs	r0, r6, #1
    974c:	2119      	movs	r1, #25
    974e:	2600      	movs	r6, #0
    9750:	2500      	movs	r5, #0
    9752:	005b      	lsls	r3, r3, #1
    9754:	0452      	lsls	r2, r2, #17
    9756:	18ac      	adds	r4, r5, r2
    9758:	429c      	cmp	r4, r3
    975a:	dc02      	bgt.n	9762 <__ieee754_sqrtf+0x62>
    975c:	18a5      	adds	r5, r4, r2
    975e:	1b1b      	subs	r3, r3, r4
    9760:	18b6      	adds	r6, r6, r2
    9762:	3901      	subs	r1, #1
    9764:	005b      	lsls	r3, r3, #1
    9766:	0852      	lsrs	r2, r2, #1
    9768:	2900      	cmp	r1, #0
    976a:	d1f4      	bne.n	9756 <__ieee754_sqrtf+0x56>
    976c:	2b00      	cmp	r3, #0
    976e:	d002      	beq.n	9776 <__ieee754_sqrtf+0x76>
    9770:	2301      	movs	r3, #1
    9772:	3601      	adds	r6, #1
    9774:	439e      	bics	r6, r3
    9776:	23fc      	movs	r3, #252	; 0xfc
    9778:	059b      	lsls	r3, r3, #22
    977a:	469c      	mov	ip, r3
    977c:	1076      	asrs	r6, r6, #1
    977e:	4466      	add	r6, ip
    9780:	05c0      	lsls	r0, r0, #23
    9782:	1980      	adds	r0, r0, r6
    9784:	bd70      	pop	{r4, r5, r6, pc}
    9786:	1c01      	adds	r1, r0, #0
    9788:	f000 fdd2 	bl	a330 <__aeabi_fmul>
    978c:	1c21      	adds	r1, r4, #0
    978e:	f000 fa4d 	bl	9c2c <__aeabi_fadd>
    9792:	e7f7      	b.n	9784 <__ieee754_sqrtf+0x84>
    9794:	005b      	lsls	r3, r3, #1
    9796:	e7d7      	b.n	9748 <__ieee754_sqrtf+0x48>
    9798:	1c01      	adds	r1, r0, #0
    979a:	f000 fee9 	bl	a570 <__aeabi_fsub>
    979e:	1c01      	adds	r1, r0, #0
    97a0:	f000 fbd6 	bl	9f50 <__aeabi_fdiv>
    97a4:	e7ee      	b.n	9784 <__ieee754_sqrtf+0x84>
    97a6:	2201      	movs	r2, #1
    97a8:	4252      	negs	r2, r2
    97aa:	1ab6      	subs	r6, r6, r2
    97ac:	e7c4      	b.n	9738 <__ieee754_sqrtf+0x38>
    97ae:	46c0      	nop			; (mov r8, r8)
    97b0:	7f7fffff 	.word	0x7f7fffff
    97b4:	007fffff 	.word	0x007fffff

000097b8 <finite>:
    97b8:	4b03      	ldr	r3, [pc, #12]	; (97c8 <finite+0x10>)
    97ba:	0048      	lsls	r0, r1, #1
    97bc:	469c      	mov	ip, r3
    97be:	0840      	lsrs	r0, r0, #1
    97c0:	4460      	add	r0, ip
    97c2:	0fc0      	lsrs	r0, r0, #31
    97c4:	4770      	bx	lr
    97c6:	46c0      	nop			; (mov r8, r8)
    97c8:	80100000 	.word	0x80100000

000097cc <matherr>:
    97cc:	2000      	movs	r0, #0
    97ce:	4770      	bx	lr

000097d0 <__gnu_thumb1_case_uqi>:
    97d0:	b402      	push	{r1}
    97d2:	4671      	mov	r1, lr
    97d4:	0849      	lsrs	r1, r1, #1
    97d6:	0049      	lsls	r1, r1, #1
    97d8:	5c09      	ldrb	r1, [r1, r0]
    97da:	0049      	lsls	r1, r1, #1
    97dc:	448e      	add	lr, r1
    97de:	bc02      	pop	{r1}
    97e0:	4770      	bx	lr
    97e2:	46c0      	nop			; (mov r8, r8)

000097e4 <__udivsi3>:
    97e4:	2200      	movs	r2, #0
    97e6:	0843      	lsrs	r3, r0, #1
    97e8:	428b      	cmp	r3, r1
    97ea:	d374      	bcc.n	98d6 <__udivsi3+0xf2>
    97ec:	0903      	lsrs	r3, r0, #4
    97ee:	428b      	cmp	r3, r1
    97f0:	d35f      	bcc.n	98b2 <__udivsi3+0xce>
    97f2:	0a03      	lsrs	r3, r0, #8
    97f4:	428b      	cmp	r3, r1
    97f6:	d344      	bcc.n	9882 <__udivsi3+0x9e>
    97f8:	0b03      	lsrs	r3, r0, #12
    97fa:	428b      	cmp	r3, r1
    97fc:	d328      	bcc.n	9850 <__udivsi3+0x6c>
    97fe:	0c03      	lsrs	r3, r0, #16
    9800:	428b      	cmp	r3, r1
    9802:	d30d      	bcc.n	9820 <__udivsi3+0x3c>
    9804:	22ff      	movs	r2, #255	; 0xff
    9806:	0209      	lsls	r1, r1, #8
    9808:	ba12      	rev	r2, r2
    980a:	0c03      	lsrs	r3, r0, #16
    980c:	428b      	cmp	r3, r1
    980e:	d302      	bcc.n	9816 <__udivsi3+0x32>
    9810:	1212      	asrs	r2, r2, #8
    9812:	0209      	lsls	r1, r1, #8
    9814:	d065      	beq.n	98e2 <__udivsi3+0xfe>
    9816:	0b03      	lsrs	r3, r0, #12
    9818:	428b      	cmp	r3, r1
    981a:	d319      	bcc.n	9850 <__udivsi3+0x6c>
    981c:	e000      	b.n	9820 <__udivsi3+0x3c>
    981e:	0a09      	lsrs	r1, r1, #8
    9820:	0bc3      	lsrs	r3, r0, #15
    9822:	428b      	cmp	r3, r1
    9824:	d301      	bcc.n	982a <__udivsi3+0x46>
    9826:	03cb      	lsls	r3, r1, #15
    9828:	1ac0      	subs	r0, r0, r3
    982a:	4152      	adcs	r2, r2
    982c:	0b83      	lsrs	r3, r0, #14
    982e:	428b      	cmp	r3, r1
    9830:	d301      	bcc.n	9836 <__udivsi3+0x52>
    9832:	038b      	lsls	r3, r1, #14
    9834:	1ac0      	subs	r0, r0, r3
    9836:	4152      	adcs	r2, r2
    9838:	0b43      	lsrs	r3, r0, #13
    983a:	428b      	cmp	r3, r1
    983c:	d301      	bcc.n	9842 <__udivsi3+0x5e>
    983e:	034b      	lsls	r3, r1, #13
    9840:	1ac0      	subs	r0, r0, r3
    9842:	4152      	adcs	r2, r2
    9844:	0b03      	lsrs	r3, r0, #12
    9846:	428b      	cmp	r3, r1
    9848:	d301      	bcc.n	984e <__udivsi3+0x6a>
    984a:	030b      	lsls	r3, r1, #12
    984c:	1ac0      	subs	r0, r0, r3
    984e:	4152      	adcs	r2, r2
    9850:	0ac3      	lsrs	r3, r0, #11
    9852:	428b      	cmp	r3, r1
    9854:	d301      	bcc.n	985a <__udivsi3+0x76>
    9856:	02cb      	lsls	r3, r1, #11
    9858:	1ac0      	subs	r0, r0, r3
    985a:	4152      	adcs	r2, r2
    985c:	0a83      	lsrs	r3, r0, #10
    985e:	428b      	cmp	r3, r1
    9860:	d301      	bcc.n	9866 <__udivsi3+0x82>
    9862:	028b      	lsls	r3, r1, #10
    9864:	1ac0      	subs	r0, r0, r3
    9866:	4152      	adcs	r2, r2
    9868:	0a43      	lsrs	r3, r0, #9
    986a:	428b      	cmp	r3, r1
    986c:	d301      	bcc.n	9872 <__udivsi3+0x8e>
    986e:	024b      	lsls	r3, r1, #9
    9870:	1ac0      	subs	r0, r0, r3
    9872:	4152      	adcs	r2, r2
    9874:	0a03      	lsrs	r3, r0, #8
    9876:	428b      	cmp	r3, r1
    9878:	d301      	bcc.n	987e <__udivsi3+0x9a>
    987a:	020b      	lsls	r3, r1, #8
    987c:	1ac0      	subs	r0, r0, r3
    987e:	4152      	adcs	r2, r2
    9880:	d2cd      	bcs.n	981e <__udivsi3+0x3a>
    9882:	09c3      	lsrs	r3, r0, #7
    9884:	428b      	cmp	r3, r1
    9886:	d301      	bcc.n	988c <__udivsi3+0xa8>
    9888:	01cb      	lsls	r3, r1, #7
    988a:	1ac0      	subs	r0, r0, r3
    988c:	4152      	adcs	r2, r2
    988e:	0983      	lsrs	r3, r0, #6
    9890:	428b      	cmp	r3, r1
    9892:	d301      	bcc.n	9898 <__udivsi3+0xb4>
    9894:	018b      	lsls	r3, r1, #6
    9896:	1ac0      	subs	r0, r0, r3
    9898:	4152      	adcs	r2, r2
    989a:	0943      	lsrs	r3, r0, #5
    989c:	428b      	cmp	r3, r1
    989e:	d301      	bcc.n	98a4 <__udivsi3+0xc0>
    98a0:	014b      	lsls	r3, r1, #5
    98a2:	1ac0      	subs	r0, r0, r3
    98a4:	4152      	adcs	r2, r2
    98a6:	0903      	lsrs	r3, r0, #4
    98a8:	428b      	cmp	r3, r1
    98aa:	d301      	bcc.n	98b0 <__udivsi3+0xcc>
    98ac:	010b      	lsls	r3, r1, #4
    98ae:	1ac0      	subs	r0, r0, r3
    98b0:	4152      	adcs	r2, r2
    98b2:	08c3      	lsrs	r3, r0, #3
    98b4:	428b      	cmp	r3, r1
    98b6:	d301      	bcc.n	98bc <__udivsi3+0xd8>
    98b8:	00cb      	lsls	r3, r1, #3
    98ba:	1ac0      	subs	r0, r0, r3
    98bc:	4152      	adcs	r2, r2
    98be:	0883      	lsrs	r3, r0, #2
    98c0:	428b      	cmp	r3, r1
    98c2:	d301      	bcc.n	98c8 <__udivsi3+0xe4>
    98c4:	008b      	lsls	r3, r1, #2
    98c6:	1ac0      	subs	r0, r0, r3
    98c8:	4152      	adcs	r2, r2
    98ca:	0843      	lsrs	r3, r0, #1
    98cc:	428b      	cmp	r3, r1
    98ce:	d301      	bcc.n	98d4 <__udivsi3+0xf0>
    98d0:	004b      	lsls	r3, r1, #1
    98d2:	1ac0      	subs	r0, r0, r3
    98d4:	4152      	adcs	r2, r2
    98d6:	1a41      	subs	r1, r0, r1
    98d8:	d200      	bcs.n	98dc <__udivsi3+0xf8>
    98da:	4601      	mov	r1, r0
    98dc:	4152      	adcs	r2, r2
    98de:	4610      	mov	r0, r2
    98e0:	4770      	bx	lr
    98e2:	e7ff      	b.n	98e4 <__udivsi3+0x100>
    98e4:	b501      	push	{r0, lr}
    98e6:	2000      	movs	r0, #0
    98e8:	f000 f8f0 	bl	9acc <__aeabi_idiv0>
    98ec:	bd02      	pop	{r1, pc}
    98ee:	46c0      	nop			; (mov r8, r8)

000098f0 <__aeabi_uidivmod>:
    98f0:	2900      	cmp	r1, #0
    98f2:	d0f7      	beq.n	98e4 <__udivsi3+0x100>
    98f4:	e776      	b.n	97e4 <__udivsi3>
    98f6:	4770      	bx	lr

000098f8 <__divsi3>:
    98f8:	4603      	mov	r3, r0
    98fa:	430b      	orrs	r3, r1
    98fc:	d47f      	bmi.n	99fe <__divsi3+0x106>
    98fe:	2200      	movs	r2, #0
    9900:	0843      	lsrs	r3, r0, #1
    9902:	428b      	cmp	r3, r1
    9904:	d374      	bcc.n	99f0 <__divsi3+0xf8>
    9906:	0903      	lsrs	r3, r0, #4
    9908:	428b      	cmp	r3, r1
    990a:	d35f      	bcc.n	99cc <__divsi3+0xd4>
    990c:	0a03      	lsrs	r3, r0, #8
    990e:	428b      	cmp	r3, r1
    9910:	d344      	bcc.n	999c <__divsi3+0xa4>
    9912:	0b03      	lsrs	r3, r0, #12
    9914:	428b      	cmp	r3, r1
    9916:	d328      	bcc.n	996a <__divsi3+0x72>
    9918:	0c03      	lsrs	r3, r0, #16
    991a:	428b      	cmp	r3, r1
    991c:	d30d      	bcc.n	993a <__divsi3+0x42>
    991e:	22ff      	movs	r2, #255	; 0xff
    9920:	0209      	lsls	r1, r1, #8
    9922:	ba12      	rev	r2, r2
    9924:	0c03      	lsrs	r3, r0, #16
    9926:	428b      	cmp	r3, r1
    9928:	d302      	bcc.n	9930 <__divsi3+0x38>
    992a:	1212      	asrs	r2, r2, #8
    992c:	0209      	lsls	r1, r1, #8
    992e:	d065      	beq.n	99fc <__divsi3+0x104>
    9930:	0b03      	lsrs	r3, r0, #12
    9932:	428b      	cmp	r3, r1
    9934:	d319      	bcc.n	996a <__divsi3+0x72>
    9936:	e000      	b.n	993a <__divsi3+0x42>
    9938:	0a09      	lsrs	r1, r1, #8
    993a:	0bc3      	lsrs	r3, r0, #15
    993c:	428b      	cmp	r3, r1
    993e:	d301      	bcc.n	9944 <__divsi3+0x4c>
    9940:	03cb      	lsls	r3, r1, #15
    9942:	1ac0      	subs	r0, r0, r3
    9944:	4152      	adcs	r2, r2
    9946:	0b83      	lsrs	r3, r0, #14
    9948:	428b      	cmp	r3, r1
    994a:	d301      	bcc.n	9950 <__divsi3+0x58>
    994c:	038b      	lsls	r3, r1, #14
    994e:	1ac0      	subs	r0, r0, r3
    9950:	4152      	adcs	r2, r2
    9952:	0b43      	lsrs	r3, r0, #13
    9954:	428b      	cmp	r3, r1
    9956:	d301      	bcc.n	995c <__divsi3+0x64>
    9958:	034b      	lsls	r3, r1, #13
    995a:	1ac0      	subs	r0, r0, r3
    995c:	4152      	adcs	r2, r2
    995e:	0b03      	lsrs	r3, r0, #12
    9960:	428b      	cmp	r3, r1
    9962:	d301      	bcc.n	9968 <__divsi3+0x70>
    9964:	030b      	lsls	r3, r1, #12
    9966:	1ac0      	subs	r0, r0, r3
    9968:	4152      	adcs	r2, r2
    996a:	0ac3      	lsrs	r3, r0, #11
    996c:	428b      	cmp	r3, r1
    996e:	d301      	bcc.n	9974 <__divsi3+0x7c>
    9970:	02cb      	lsls	r3, r1, #11
    9972:	1ac0      	subs	r0, r0, r3
    9974:	4152      	adcs	r2, r2
    9976:	0a83      	lsrs	r3, r0, #10
    9978:	428b      	cmp	r3, r1
    997a:	d301      	bcc.n	9980 <__divsi3+0x88>
    997c:	028b      	lsls	r3, r1, #10
    997e:	1ac0      	subs	r0, r0, r3
    9980:	4152      	adcs	r2, r2
    9982:	0a43      	lsrs	r3, r0, #9
    9984:	428b      	cmp	r3, r1
    9986:	d301      	bcc.n	998c <__divsi3+0x94>
    9988:	024b      	lsls	r3, r1, #9
    998a:	1ac0      	subs	r0, r0, r3
    998c:	4152      	adcs	r2, r2
    998e:	0a03      	lsrs	r3, r0, #8
    9990:	428b      	cmp	r3, r1
    9992:	d301      	bcc.n	9998 <__divsi3+0xa0>
    9994:	020b      	lsls	r3, r1, #8
    9996:	1ac0      	subs	r0, r0, r3
    9998:	4152      	adcs	r2, r2
    999a:	d2cd      	bcs.n	9938 <__divsi3+0x40>
    999c:	09c3      	lsrs	r3, r0, #7
    999e:	428b      	cmp	r3, r1
    99a0:	d301      	bcc.n	99a6 <__divsi3+0xae>
    99a2:	01cb      	lsls	r3, r1, #7
    99a4:	1ac0      	subs	r0, r0, r3
    99a6:	4152      	adcs	r2, r2
    99a8:	0983      	lsrs	r3, r0, #6
    99aa:	428b      	cmp	r3, r1
    99ac:	d301      	bcc.n	99b2 <__divsi3+0xba>
    99ae:	018b      	lsls	r3, r1, #6
    99b0:	1ac0      	subs	r0, r0, r3
    99b2:	4152      	adcs	r2, r2
    99b4:	0943      	lsrs	r3, r0, #5
    99b6:	428b      	cmp	r3, r1
    99b8:	d301      	bcc.n	99be <__divsi3+0xc6>
    99ba:	014b      	lsls	r3, r1, #5
    99bc:	1ac0      	subs	r0, r0, r3
    99be:	4152      	adcs	r2, r2
    99c0:	0903      	lsrs	r3, r0, #4
    99c2:	428b      	cmp	r3, r1
    99c4:	d301      	bcc.n	99ca <__divsi3+0xd2>
    99c6:	010b      	lsls	r3, r1, #4
    99c8:	1ac0      	subs	r0, r0, r3
    99ca:	4152      	adcs	r2, r2
    99cc:	08c3      	lsrs	r3, r0, #3
    99ce:	428b      	cmp	r3, r1
    99d0:	d301      	bcc.n	99d6 <__divsi3+0xde>
    99d2:	00cb      	lsls	r3, r1, #3
    99d4:	1ac0      	subs	r0, r0, r3
    99d6:	4152      	adcs	r2, r2
    99d8:	0883      	lsrs	r3, r0, #2
    99da:	428b      	cmp	r3, r1
    99dc:	d301      	bcc.n	99e2 <__divsi3+0xea>
    99de:	008b      	lsls	r3, r1, #2
    99e0:	1ac0      	subs	r0, r0, r3
    99e2:	4152      	adcs	r2, r2
    99e4:	0843      	lsrs	r3, r0, #1
    99e6:	428b      	cmp	r3, r1
    99e8:	d301      	bcc.n	99ee <__divsi3+0xf6>
    99ea:	004b      	lsls	r3, r1, #1
    99ec:	1ac0      	subs	r0, r0, r3
    99ee:	4152      	adcs	r2, r2
    99f0:	1a41      	subs	r1, r0, r1
    99f2:	d200      	bcs.n	99f6 <__divsi3+0xfe>
    99f4:	4601      	mov	r1, r0
    99f6:	4152      	adcs	r2, r2
    99f8:	4610      	mov	r0, r2
    99fa:	4770      	bx	lr
    99fc:	e05d      	b.n	9aba <__divsi3+0x1c2>
    99fe:	0fca      	lsrs	r2, r1, #31
    9a00:	d000      	beq.n	9a04 <__divsi3+0x10c>
    9a02:	4249      	negs	r1, r1
    9a04:	1003      	asrs	r3, r0, #32
    9a06:	d300      	bcc.n	9a0a <__divsi3+0x112>
    9a08:	4240      	negs	r0, r0
    9a0a:	4053      	eors	r3, r2
    9a0c:	2200      	movs	r2, #0
    9a0e:	469c      	mov	ip, r3
    9a10:	0903      	lsrs	r3, r0, #4
    9a12:	428b      	cmp	r3, r1
    9a14:	d32d      	bcc.n	9a72 <__divsi3+0x17a>
    9a16:	0a03      	lsrs	r3, r0, #8
    9a18:	428b      	cmp	r3, r1
    9a1a:	d312      	bcc.n	9a42 <__divsi3+0x14a>
    9a1c:	22fc      	movs	r2, #252	; 0xfc
    9a1e:	0189      	lsls	r1, r1, #6
    9a20:	ba12      	rev	r2, r2
    9a22:	0a03      	lsrs	r3, r0, #8
    9a24:	428b      	cmp	r3, r1
    9a26:	d30c      	bcc.n	9a42 <__divsi3+0x14a>
    9a28:	0189      	lsls	r1, r1, #6
    9a2a:	1192      	asrs	r2, r2, #6
    9a2c:	428b      	cmp	r3, r1
    9a2e:	d308      	bcc.n	9a42 <__divsi3+0x14a>
    9a30:	0189      	lsls	r1, r1, #6
    9a32:	1192      	asrs	r2, r2, #6
    9a34:	428b      	cmp	r3, r1
    9a36:	d304      	bcc.n	9a42 <__divsi3+0x14a>
    9a38:	0189      	lsls	r1, r1, #6
    9a3a:	d03a      	beq.n	9ab2 <__divsi3+0x1ba>
    9a3c:	1192      	asrs	r2, r2, #6
    9a3e:	e000      	b.n	9a42 <__divsi3+0x14a>
    9a40:	0989      	lsrs	r1, r1, #6
    9a42:	09c3      	lsrs	r3, r0, #7
    9a44:	428b      	cmp	r3, r1
    9a46:	d301      	bcc.n	9a4c <__divsi3+0x154>
    9a48:	01cb      	lsls	r3, r1, #7
    9a4a:	1ac0      	subs	r0, r0, r3
    9a4c:	4152      	adcs	r2, r2
    9a4e:	0983      	lsrs	r3, r0, #6
    9a50:	428b      	cmp	r3, r1
    9a52:	d301      	bcc.n	9a58 <__divsi3+0x160>
    9a54:	018b      	lsls	r3, r1, #6
    9a56:	1ac0      	subs	r0, r0, r3
    9a58:	4152      	adcs	r2, r2
    9a5a:	0943      	lsrs	r3, r0, #5
    9a5c:	428b      	cmp	r3, r1
    9a5e:	d301      	bcc.n	9a64 <__divsi3+0x16c>
    9a60:	014b      	lsls	r3, r1, #5
    9a62:	1ac0      	subs	r0, r0, r3
    9a64:	4152      	adcs	r2, r2
    9a66:	0903      	lsrs	r3, r0, #4
    9a68:	428b      	cmp	r3, r1
    9a6a:	d301      	bcc.n	9a70 <__divsi3+0x178>
    9a6c:	010b      	lsls	r3, r1, #4
    9a6e:	1ac0      	subs	r0, r0, r3
    9a70:	4152      	adcs	r2, r2
    9a72:	08c3      	lsrs	r3, r0, #3
    9a74:	428b      	cmp	r3, r1
    9a76:	d301      	bcc.n	9a7c <__divsi3+0x184>
    9a78:	00cb      	lsls	r3, r1, #3
    9a7a:	1ac0      	subs	r0, r0, r3
    9a7c:	4152      	adcs	r2, r2
    9a7e:	0883      	lsrs	r3, r0, #2
    9a80:	428b      	cmp	r3, r1
    9a82:	d301      	bcc.n	9a88 <__divsi3+0x190>
    9a84:	008b      	lsls	r3, r1, #2
    9a86:	1ac0      	subs	r0, r0, r3
    9a88:	4152      	adcs	r2, r2
    9a8a:	d2d9      	bcs.n	9a40 <__divsi3+0x148>
    9a8c:	0843      	lsrs	r3, r0, #1
    9a8e:	428b      	cmp	r3, r1
    9a90:	d301      	bcc.n	9a96 <__divsi3+0x19e>
    9a92:	004b      	lsls	r3, r1, #1
    9a94:	1ac0      	subs	r0, r0, r3
    9a96:	4152      	adcs	r2, r2
    9a98:	1a41      	subs	r1, r0, r1
    9a9a:	d200      	bcs.n	9a9e <__divsi3+0x1a6>
    9a9c:	4601      	mov	r1, r0
    9a9e:	4663      	mov	r3, ip
    9aa0:	4152      	adcs	r2, r2
    9aa2:	105b      	asrs	r3, r3, #1
    9aa4:	4610      	mov	r0, r2
    9aa6:	d301      	bcc.n	9aac <__divsi3+0x1b4>
    9aa8:	4240      	negs	r0, r0
    9aaa:	2b00      	cmp	r3, #0
    9aac:	d500      	bpl.n	9ab0 <__divsi3+0x1b8>
    9aae:	4249      	negs	r1, r1
    9ab0:	4770      	bx	lr
    9ab2:	4663      	mov	r3, ip
    9ab4:	105b      	asrs	r3, r3, #1
    9ab6:	d300      	bcc.n	9aba <__divsi3+0x1c2>
    9ab8:	4240      	negs	r0, r0
    9aba:	b501      	push	{r0, lr}
    9abc:	2000      	movs	r0, #0
    9abe:	f000 f805 	bl	9acc <__aeabi_idiv0>
    9ac2:	bd02      	pop	{r1, pc}

00009ac4 <__aeabi_idivmod>:
    9ac4:	2900      	cmp	r1, #0
    9ac6:	d0f8      	beq.n	9aba <__divsi3+0x1c2>
    9ac8:	e716      	b.n	98f8 <__divsi3>
    9aca:	4770      	bx	lr

00009acc <__aeabi_idiv0>:
    9acc:	4770      	bx	lr
    9ace:	46c0      	nop			; (mov r8, r8)

00009ad0 <__aeabi_cdrcmple>:
    9ad0:	4684      	mov	ip, r0
    9ad2:	1c10      	adds	r0, r2, #0
    9ad4:	4662      	mov	r2, ip
    9ad6:	468c      	mov	ip, r1
    9ad8:	1c19      	adds	r1, r3, #0
    9ada:	4663      	mov	r3, ip
    9adc:	e000      	b.n	9ae0 <__aeabi_cdcmpeq>
    9ade:	46c0      	nop			; (mov r8, r8)

00009ae0 <__aeabi_cdcmpeq>:
    9ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9ae2:	f001 fe91 	bl	b808 <__ledf2>
    9ae6:	2800      	cmp	r0, #0
    9ae8:	d401      	bmi.n	9aee <__aeabi_cdcmpeq+0xe>
    9aea:	2100      	movs	r1, #0
    9aec:	42c8      	cmn	r0, r1
    9aee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00009af0 <__aeabi_dcmpeq>:
    9af0:	b510      	push	{r4, lr}
    9af2:	f001 fdeb 	bl	b6cc <__eqdf2>
    9af6:	4240      	negs	r0, r0
    9af8:	3001      	adds	r0, #1
    9afa:	bd10      	pop	{r4, pc}

00009afc <__aeabi_dcmplt>:
    9afc:	b510      	push	{r4, lr}
    9afe:	f001 fe83 	bl	b808 <__ledf2>
    9b02:	2800      	cmp	r0, #0
    9b04:	db01      	blt.n	9b0a <__aeabi_dcmplt+0xe>
    9b06:	2000      	movs	r0, #0
    9b08:	bd10      	pop	{r4, pc}
    9b0a:	2001      	movs	r0, #1
    9b0c:	bd10      	pop	{r4, pc}
    9b0e:	46c0      	nop			; (mov r8, r8)

00009b10 <__aeabi_dcmple>:
    9b10:	b510      	push	{r4, lr}
    9b12:	f001 fe79 	bl	b808 <__ledf2>
    9b16:	2800      	cmp	r0, #0
    9b18:	dd01      	ble.n	9b1e <__aeabi_dcmple+0xe>
    9b1a:	2000      	movs	r0, #0
    9b1c:	bd10      	pop	{r4, pc}
    9b1e:	2001      	movs	r0, #1
    9b20:	bd10      	pop	{r4, pc}
    9b22:	46c0      	nop			; (mov r8, r8)

00009b24 <__aeabi_dcmpgt>:
    9b24:	b510      	push	{r4, lr}
    9b26:	f001 fe0b 	bl	b740 <__gedf2>
    9b2a:	2800      	cmp	r0, #0
    9b2c:	dc01      	bgt.n	9b32 <__aeabi_dcmpgt+0xe>
    9b2e:	2000      	movs	r0, #0
    9b30:	bd10      	pop	{r4, pc}
    9b32:	2001      	movs	r0, #1
    9b34:	bd10      	pop	{r4, pc}
    9b36:	46c0      	nop			; (mov r8, r8)

00009b38 <__aeabi_dcmpge>:
    9b38:	b510      	push	{r4, lr}
    9b3a:	f001 fe01 	bl	b740 <__gedf2>
    9b3e:	2800      	cmp	r0, #0
    9b40:	da01      	bge.n	9b46 <__aeabi_dcmpge+0xe>
    9b42:	2000      	movs	r0, #0
    9b44:	bd10      	pop	{r4, pc}
    9b46:	2001      	movs	r0, #1
    9b48:	bd10      	pop	{r4, pc}
    9b4a:	46c0      	nop			; (mov r8, r8)

00009b4c <__aeabi_cfrcmple>:
    9b4c:	4684      	mov	ip, r0
    9b4e:	1c08      	adds	r0, r1, #0
    9b50:	4661      	mov	r1, ip
    9b52:	e7ff      	b.n	9b54 <__aeabi_cfcmpeq>

00009b54 <__aeabi_cfcmpeq>:
    9b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9b56:	f000 fba9 	bl	a2ac <__lesf2>
    9b5a:	2800      	cmp	r0, #0
    9b5c:	d401      	bmi.n	9b62 <__aeabi_cfcmpeq+0xe>
    9b5e:	2100      	movs	r1, #0
    9b60:	42c8      	cmn	r0, r1
    9b62:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00009b64 <__aeabi_fcmpeq>:
    9b64:	b510      	push	{r4, lr}
    9b66:	f000 fb3b 	bl	a1e0 <__eqsf2>
    9b6a:	4240      	negs	r0, r0
    9b6c:	3001      	adds	r0, #1
    9b6e:	bd10      	pop	{r4, pc}

00009b70 <__aeabi_fcmplt>:
    9b70:	b510      	push	{r4, lr}
    9b72:	f000 fb9b 	bl	a2ac <__lesf2>
    9b76:	2800      	cmp	r0, #0
    9b78:	db01      	blt.n	9b7e <__aeabi_fcmplt+0xe>
    9b7a:	2000      	movs	r0, #0
    9b7c:	bd10      	pop	{r4, pc}
    9b7e:	2001      	movs	r0, #1
    9b80:	bd10      	pop	{r4, pc}
    9b82:	46c0      	nop			; (mov r8, r8)

00009b84 <__aeabi_fcmple>:
    9b84:	b510      	push	{r4, lr}
    9b86:	f000 fb91 	bl	a2ac <__lesf2>
    9b8a:	2800      	cmp	r0, #0
    9b8c:	dd01      	ble.n	9b92 <__aeabi_fcmple+0xe>
    9b8e:	2000      	movs	r0, #0
    9b90:	bd10      	pop	{r4, pc}
    9b92:	2001      	movs	r0, #1
    9b94:	bd10      	pop	{r4, pc}
    9b96:	46c0      	nop			; (mov r8, r8)

00009b98 <__aeabi_fcmpgt>:
    9b98:	b510      	push	{r4, lr}
    9b9a:	f000 fb47 	bl	a22c <__gesf2>
    9b9e:	2800      	cmp	r0, #0
    9ba0:	dc01      	bgt.n	9ba6 <__aeabi_fcmpgt+0xe>
    9ba2:	2000      	movs	r0, #0
    9ba4:	bd10      	pop	{r4, pc}
    9ba6:	2001      	movs	r0, #1
    9ba8:	bd10      	pop	{r4, pc}
    9baa:	46c0      	nop			; (mov r8, r8)

00009bac <__aeabi_fcmpge>:
    9bac:	b510      	push	{r4, lr}
    9bae:	f000 fb3d 	bl	a22c <__gesf2>
    9bb2:	2800      	cmp	r0, #0
    9bb4:	da01      	bge.n	9bba <__aeabi_fcmpge+0xe>
    9bb6:	2000      	movs	r0, #0
    9bb8:	bd10      	pop	{r4, pc}
    9bba:	2001      	movs	r0, #1
    9bbc:	bd10      	pop	{r4, pc}
    9bbe:	46c0      	nop			; (mov r8, r8)

00009bc0 <__aeabi_f2uiz>:
    9bc0:	219e      	movs	r1, #158	; 0x9e
    9bc2:	b510      	push	{r4, lr}
    9bc4:	05c9      	lsls	r1, r1, #23
    9bc6:	1c04      	adds	r4, r0, #0
    9bc8:	f7ff fff0 	bl	9bac <__aeabi_fcmpge>
    9bcc:	2800      	cmp	r0, #0
    9bce:	d103      	bne.n	9bd8 <__aeabi_f2uiz+0x18>
    9bd0:	1c20      	adds	r0, r4, #0
    9bd2:	f000 fe81 	bl	a8d8 <__aeabi_f2iz>
    9bd6:	bd10      	pop	{r4, pc}
    9bd8:	219e      	movs	r1, #158	; 0x9e
    9bda:	1c20      	adds	r0, r4, #0
    9bdc:	05c9      	lsls	r1, r1, #23
    9bde:	f000 fcc7 	bl	a570 <__aeabi_fsub>
    9be2:	f000 fe79 	bl	a8d8 <__aeabi_f2iz>
    9be6:	2380      	movs	r3, #128	; 0x80
    9be8:	061b      	lsls	r3, r3, #24
    9bea:	469c      	mov	ip, r3
    9bec:	4460      	add	r0, ip
    9bee:	e7f2      	b.n	9bd6 <__aeabi_f2uiz+0x16>

00009bf0 <__aeabi_d2uiz>:
    9bf0:	b570      	push	{r4, r5, r6, lr}
    9bf2:	2200      	movs	r2, #0
    9bf4:	4b0c      	ldr	r3, [pc, #48]	; (9c28 <__aeabi_d2uiz+0x38>)
    9bf6:	0004      	movs	r4, r0
    9bf8:	000d      	movs	r5, r1
    9bfa:	f7ff ff9d 	bl	9b38 <__aeabi_dcmpge>
    9bfe:	2800      	cmp	r0, #0
    9c00:	d104      	bne.n	9c0c <__aeabi_d2uiz+0x1c>
    9c02:	0020      	movs	r0, r4
    9c04:	0029      	movs	r1, r5
    9c06:	f002 fc17 	bl	c438 <__aeabi_d2iz>
    9c0a:	bd70      	pop	{r4, r5, r6, pc}
    9c0c:	4b06      	ldr	r3, [pc, #24]	; (9c28 <__aeabi_d2uiz+0x38>)
    9c0e:	2200      	movs	r2, #0
    9c10:	0020      	movs	r0, r4
    9c12:	0029      	movs	r1, r5
    9c14:	f002 f8da 	bl	bdcc <__aeabi_dsub>
    9c18:	f002 fc0e 	bl	c438 <__aeabi_d2iz>
    9c1c:	2380      	movs	r3, #128	; 0x80
    9c1e:	061b      	lsls	r3, r3, #24
    9c20:	469c      	mov	ip, r3
    9c22:	4460      	add	r0, ip
    9c24:	e7f1      	b.n	9c0a <__aeabi_d2uiz+0x1a>
    9c26:	46c0      	nop			; (mov r8, r8)
    9c28:	41e00000 	.word	0x41e00000

00009c2c <__aeabi_fadd>:
    9c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c2e:	46c6      	mov	lr, r8
    9c30:	024e      	lsls	r6, r1, #9
    9c32:	0247      	lsls	r7, r0, #9
    9c34:	0a76      	lsrs	r6, r6, #9
    9c36:	0a7b      	lsrs	r3, r7, #9
    9c38:	0044      	lsls	r4, r0, #1
    9c3a:	0fc5      	lsrs	r5, r0, #31
    9c3c:	00f7      	lsls	r7, r6, #3
    9c3e:	0048      	lsls	r0, r1, #1
    9c40:	4698      	mov	r8, r3
    9c42:	b500      	push	{lr}
    9c44:	0e24      	lsrs	r4, r4, #24
    9c46:	002a      	movs	r2, r5
    9c48:	00db      	lsls	r3, r3, #3
    9c4a:	0e00      	lsrs	r0, r0, #24
    9c4c:	0fc9      	lsrs	r1, r1, #31
    9c4e:	46bc      	mov	ip, r7
    9c50:	428d      	cmp	r5, r1
    9c52:	d067      	beq.n	9d24 <__aeabi_fadd+0xf8>
    9c54:	1a22      	subs	r2, r4, r0
    9c56:	2a00      	cmp	r2, #0
    9c58:	dc00      	bgt.n	9c5c <__aeabi_fadd+0x30>
    9c5a:	e0a5      	b.n	9da8 <__aeabi_fadd+0x17c>
    9c5c:	2800      	cmp	r0, #0
    9c5e:	d13a      	bne.n	9cd6 <__aeabi_fadd+0xaa>
    9c60:	2f00      	cmp	r7, #0
    9c62:	d100      	bne.n	9c66 <__aeabi_fadd+0x3a>
    9c64:	e093      	b.n	9d8e <__aeabi_fadd+0x162>
    9c66:	1e51      	subs	r1, r2, #1
    9c68:	2900      	cmp	r1, #0
    9c6a:	d000      	beq.n	9c6e <__aeabi_fadd+0x42>
    9c6c:	e0bc      	b.n	9de8 <__aeabi_fadd+0x1bc>
    9c6e:	2401      	movs	r4, #1
    9c70:	1bdb      	subs	r3, r3, r7
    9c72:	015a      	lsls	r2, r3, #5
    9c74:	d546      	bpl.n	9d04 <__aeabi_fadd+0xd8>
    9c76:	019b      	lsls	r3, r3, #6
    9c78:	099e      	lsrs	r6, r3, #6
    9c7a:	0030      	movs	r0, r6
    9c7c:	f002 fd66 	bl	c74c <__clzsi2>
    9c80:	3805      	subs	r0, #5
    9c82:	4086      	lsls	r6, r0
    9c84:	4284      	cmp	r4, r0
    9c86:	dd00      	ble.n	9c8a <__aeabi_fadd+0x5e>
    9c88:	e09d      	b.n	9dc6 <__aeabi_fadd+0x19a>
    9c8a:	1b04      	subs	r4, r0, r4
    9c8c:	0032      	movs	r2, r6
    9c8e:	2020      	movs	r0, #32
    9c90:	3401      	adds	r4, #1
    9c92:	40e2      	lsrs	r2, r4
    9c94:	1b04      	subs	r4, r0, r4
    9c96:	40a6      	lsls	r6, r4
    9c98:	0033      	movs	r3, r6
    9c9a:	1e5e      	subs	r6, r3, #1
    9c9c:	41b3      	sbcs	r3, r6
    9c9e:	2400      	movs	r4, #0
    9ca0:	4313      	orrs	r3, r2
    9ca2:	075a      	lsls	r2, r3, #29
    9ca4:	d004      	beq.n	9cb0 <__aeabi_fadd+0x84>
    9ca6:	220f      	movs	r2, #15
    9ca8:	401a      	ands	r2, r3
    9caa:	2a04      	cmp	r2, #4
    9cac:	d000      	beq.n	9cb0 <__aeabi_fadd+0x84>
    9cae:	3304      	adds	r3, #4
    9cb0:	015a      	lsls	r2, r3, #5
    9cb2:	d529      	bpl.n	9d08 <__aeabi_fadd+0xdc>
    9cb4:	3401      	adds	r4, #1
    9cb6:	2cff      	cmp	r4, #255	; 0xff
    9cb8:	d100      	bne.n	9cbc <__aeabi_fadd+0x90>
    9cba:	e081      	b.n	9dc0 <__aeabi_fadd+0x194>
    9cbc:	002a      	movs	r2, r5
    9cbe:	019b      	lsls	r3, r3, #6
    9cc0:	0a5b      	lsrs	r3, r3, #9
    9cc2:	b2e4      	uxtb	r4, r4
    9cc4:	025b      	lsls	r3, r3, #9
    9cc6:	05e4      	lsls	r4, r4, #23
    9cc8:	0a58      	lsrs	r0, r3, #9
    9cca:	07d2      	lsls	r2, r2, #31
    9ccc:	4320      	orrs	r0, r4
    9cce:	4310      	orrs	r0, r2
    9cd0:	bc04      	pop	{r2}
    9cd2:	4690      	mov	r8, r2
    9cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cd6:	2cff      	cmp	r4, #255	; 0xff
    9cd8:	d0e3      	beq.n	9ca2 <__aeabi_fadd+0x76>
    9cda:	2180      	movs	r1, #128	; 0x80
    9cdc:	0038      	movs	r0, r7
    9cde:	04c9      	lsls	r1, r1, #19
    9ce0:	4308      	orrs	r0, r1
    9ce2:	4684      	mov	ip, r0
    9ce4:	2a1b      	cmp	r2, #27
    9ce6:	dd00      	ble.n	9cea <__aeabi_fadd+0xbe>
    9ce8:	e082      	b.n	9df0 <__aeabi_fadd+0x1c4>
    9cea:	2020      	movs	r0, #32
    9cec:	4661      	mov	r1, ip
    9cee:	40d1      	lsrs	r1, r2
    9cf0:	1a82      	subs	r2, r0, r2
    9cf2:	4660      	mov	r0, ip
    9cf4:	4090      	lsls	r0, r2
    9cf6:	0002      	movs	r2, r0
    9cf8:	1e50      	subs	r0, r2, #1
    9cfa:	4182      	sbcs	r2, r0
    9cfc:	430a      	orrs	r2, r1
    9cfe:	1a9b      	subs	r3, r3, r2
    9d00:	015a      	lsls	r2, r3, #5
    9d02:	d4b8      	bmi.n	9c76 <__aeabi_fadd+0x4a>
    9d04:	075a      	lsls	r2, r3, #29
    9d06:	d1ce      	bne.n	9ca6 <__aeabi_fadd+0x7a>
    9d08:	08de      	lsrs	r6, r3, #3
    9d0a:	002a      	movs	r2, r5
    9d0c:	2cff      	cmp	r4, #255	; 0xff
    9d0e:	d13a      	bne.n	9d86 <__aeabi_fadd+0x15a>
    9d10:	2e00      	cmp	r6, #0
    9d12:	d100      	bne.n	9d16 <__aeabi_fadd+0xea>
    9d14:	e0ae      	b.n	9e74 <__aeabi_fadd+0x248>
    9d16:	2380      	movs	r3, #128	; 0x80
    9d18:	03db      	lsls	r3, r3, #15
    9d1a:	4333      	orrs	r3, r6
    9d1c:	025b      	lsls	r3, r3, #9
    9d1e:	0a5b      	lsrs	r3, r3, #9
    9d20:	24ff      	movs	r4, #255	; 0xff
    9d22:	e7cf      	b.n	9cc4 <__aeabi_fadd+0x98>
    9d24:	1a21      	subs	r1, r4, r0
    9d26:	2900      	cmp	r1, #0
    9d28:	dd52      	ble.n	9dd0 <__aeabi_fadd+0x1a4>
    9d2a:	2800      	cmp	r0, #0
    9d2c:	d031      	beq.n	9d92 <__aeabi_fadd+0x166>
    9d2e:	2cff      	cmp	r4, #255	; 0xff
    9d30:	d0b7      	beq.n	9ca2 <__aeabi_fadd+0x76>
    9d32:	2080      	movs	r0, #128	; 0x80
    9d34:	003e      	movs	r6, r7
    9d36:	04c0      	lsls	r0, r0, #19
    9d38:	4306      	orrs	r6, r0
    9d3a:	46b4      	mov	ip, r6
    9d3c:	291b      	cmp	r1, #27
    9d3e:	dd00      	ble.n	9d42 <__aeabi_fadd+0x116>
    9d40:	e0aa      	b.n	9e98 <__aeabi_fadd+0x26c>
    9d42:	2620      	movs	r6, #32
    9d44:	4660      	mov	r0, ip
    9d46:	40c8      	lsrs	r0, r1
    9d48:	1a71      	subs	r1, r6, r1
    9d4a:	4666      	mov	r6, ip
    9d4c:	408e      	lsls	r6, r1
    9d4e:	0031      	movs	r1, r6
    9d50:	1e4e      	subs	r6, r1, #1
    9d52:	41b1      	sbcs	r1, r6
    9d54:	4301      	orrs	r1, r0
    9d56:	185b      	adds	r3, r3, r1
    9d58:	0159      	lsls	r1, r3, #5
    9d5a:	d5d3      	bpl.n	9d04 <__aeabi_fadd+0xd8>
    9d5c:	3401      	adds	r4, #1
    9d5e:	2cff      	cmp	r4, #255	; 0xff
    9d60:	d100      	bne.n	9d64 <__aeabi_fadd+0x138>
    9d62:	e087      	b.n	9e74 <__aeabi_fadd+0x248>
    9d64:	2201      	movs	r2, #1
    9d66:	4978      	ldr	r1, [pc, #480]	; (9f48 <__aeabi_fadd+0x31c>)
    9d68:	401a      	ands	r2, r3
    9d6a:	085b      	lsrs	r3, r3, #1
    9d6c:	400b      	ands	r3, r1
    9d6e:	4313      	orrs	r3, r2
    9d70:	e797      	b.n	9ca2 <__aeabi_fadd+0x76>
    9d72:	2c00      	cmp	r4, #0
    9d74:	d000      	beq.n	9d78 <__aeabi_fadd+0x14c>
    9d76:	e0a7      	b.n	9ec8 <__aeabi_fadd+0x29c>
    9d78:	2b00      	cmp	r3, #0
    9d7a:	d000      	beq.n	9d7e <__aeabi_fadd+0x152>
    9d7c:	e0b6      	b.n	9eec <__aeabi_fadd+0x2c0>
    9d7e:	1e3b      	subs	r3, r7, #0
    9d80:	d162      	bne.n	9e48 <__aeabi_fadd+0x21c>
    9d82:	2600      	movs	r6, #0
    9d84:	2200      	movs	r2, #0
    9d86:	0273      	lsls	r3, r6, #9
    9d88:	0a5b      	lsrs	r3, r3, #9
    9d8a:	b2e4      	uxtb	r4, r4
    9d8c:	e79a      	b.n	9cc4 <__aeabi_fadd+0x98>
    9d8e:	0014      	movs	r4, r2
    9d90:	e787      	b.n	9ca2 <__aeabi_fadd+0x76>
    9d92:	2f00      	cmp	r7, #0
    9d94:	d04d      	beq.n	9e32 <__aeabi_fadd+0x206>
    9d96:	1e48      	subs	r0, r1, #1
    9d98:	2800      	cmp	r0, #0
    9d9a:	d157      	bne.n	9e4c <__aeabi_fadd+0x220>
    9d9c:	4463      	add	r3, ip
    9d9e:	2401      	movs	r4, #1
    9da0:	015a      	lsls	r2, r3, #5
    9da2:	d5af      	bpl.n	9d04 <__aeabi_fadd+0xd8>
    9da4:	2402      	movs	r4, #2
    9da6:	e7dd      	b.n	9d64 <__aeabi_fadd+0x138>
    9da8:	2a00      	cmp	r2, #0
    9daa:	d124      	bne.n	9df6 <__aeabi_fadd+0x1ca>
    9dac:	1c62      	adds	r2, r4, #1
    9dae:	b2d2      	uxtb	r2, r2
    9db0:	2a01      	cmp	r2, #1
    9db2:	ddde      	ble.n	9d72 <__aeabi_fadd+0x146>
    9db4:	1bde      	subs	r6, r3, r7
    9db6:	0172      	lsls	r2, r6, #5
    9db8:	d535      	bpl.n	9e26 <__aeabi_fadd+0x1fa>
    9dba:	1afe      	subs	r6, r7, r3
    9dbc:	000d      	movs	r5, r1
    9dbe:	e75c      	b.n	9c7a <__aeabi_fadd+0x4e>
    9dc0:	002a      	movs	r2, r5
    9dc2:	2300      	movs	r3, #0
    9dc4:	e77e      	b.n	9cc4 <__aeabi_fadd+0x98>
    9dc6:	0033      	movs	r3, r6
    9dc8:	4a60      	ldr	r2, [pc, #384]	; (9f4c <__aeabi_fadd+0x320>)
    9dca:	1a24      	subs	r4, r4, r0
    9dcc:	4013      	ands	r3, r2
    9dce:	e768      	b.n	9ca2 <__aeabi_fadd+0x76>
    9dd0:	2900      	cmp	r1, #0
    9dd2:	d163      	bne.n	9e9c <__aeabi_fadd+0x270>
    9dd4:	1c61      	adds	r1, r4, #1
    9dd6:	b2c8      	uxtb	r0, r1
    9dd8:	2801      	cmp	r0, #1
    9dda:	dd4e      	ble.n	9e7a <__aeabi_fadd+0x24e>
    9ddc:	29ff      	cmp	r1, #255	; 0xff
    9dde:	d049      	beq.n	9e74 <__aeabi_fadd+0x248>
    9de0:	4463      	add	r3, ip
    9de2:	085b      	lsrs	r3, r3, #1
    9de4:	000c      	movs	r4, r1
    9de6:	e75c      	b.n	9ca2 <__aeabi_fadd+0x76>
    9de8:	2aff      	cmp	r2, #255	; 0xff
    9dea:	d041      	beq.n	9e70 <__aeabi_fadd+0x244>
    9dec:	000a      	movs	r2, r1
    9dee:	e779      	b.n	9ce4 <__aeabi_fadd+0xb8>
    9df0:	2201      	movs	r2, #1
    9df2:	1a9b      	subs	r3, r3, r2
    9df4:	e784      	b.n	9d00 <__aeabi_fadd+0xd4>
    9df6:	2c00      	cmp	r4, #0
    9df8:	d01d      	beq.n	9e36 <__aeabi_fadd+0x20a>
    9dfa:	28ff      	cmp	r0, #255	; 0xff
    9dfc:	d022      	beq.n	9e44 <__aeabi_fadd+0x218>
    9dfe:	2480      	movs	r4, #128	; 0x80
    9e00:	04e4      	lsls	r4, r4, #19
    9e02:	4252      	negs	r2, r2
    9e04:	4323      	orrs	r3, r4
    9e06:	2a1b      	cmp	r2, #27
    9e08:	dd00      	ble.n	9e0c <__aeabi_fadd+0x1e0>
    9e0a:	e08a      	b.n	9f22 <__aeabi_fadd+0x2f6>
    9e0c:	001c      	movs	r4, r3
    9e0e:	2520      	movs	r5, #32
    9e10:	40d4      	lsrs	r4, r2
    9e12:	1aaa      	subs	r2, r5, r2
    9e14:	4093      	lsls	r3, r2
    9e16:	1e5a      	subs	r2, r3, #1
    9e18:	4193      	sbcs	r3, r2
    9e1a:	4323      	orrs	r3, r4
    9e1c:	4662      	mov	r2, ip
    9e1e:	0004      	movs	r4, r0
    9e20:	1ad3      	subs	r3, r2, r3
    9e22:	000d      	movs	r5, r1
    9e24:	e725      	b.n	9c72 <__aeabi_fadd+0x46>
    9e26:	2e00      	cmp	r6, #0
    9e28:	d000      	beq.n	9e2c <__aeabi_fadd+0x200>
    9e2a:	e726      	b.n	9c7a <__aeabi_fadd+0x4e>
    9e2c:	2200      	movs	r2, #0
    9e2e:	2400      	movs	r4, #0
    9e30:	e7a9      	b.n	9d86 <__aeabi_fadd+0x15a>
    9e32:	000c      	movs	r4, r1
    9e34:	e735      	b.n	9ca2 <__aeabi_fadd+0x76>
    9e36:	2b00      	cmp	r3, #0
    9e38:	d04d      	beq.n	9ed6 <__aeabi_fadd+0x2aa>
    9e3a:	43d2      	mvns	r2, r2
    9e3c:	2a00      	cmp	r2, #0
    9e3e:	d0ed      	beq.n	9e1c <__aeabi_fadd+0x1f0>
    9e40:	28ff      	cmp	r0, #255	; 0xff
    9e42:	d1e0      	bne.n	9e06 <__aeabi_fadd+0x1da>
    9e44:	4663      	mov	r3, ip
    9e46:	24ff      	movs	r4, #255	; 0xff
    9e48:	000d      	movs	r5, r1
    9e4a:	e72a      	b.n	9ca2 <__aeabi_fadd+0x76>
    9e4c:	29ff      	cmp	r1, #255	; 0xff
    9e4e:	d00f      	beq.n	9e70 <__aeabi_fadd+0x244>
    9e50:	0001      	movs	r1, r0
    9e52:	e773      	b.n	9d3c <__aeabi_fadd+0x110>
    9e54:	2b00      	cmp	r3, #0
    9e56:	d061      	beq.n	9f1c <__aeabi_fadd+0x2f0>
    9e58:	24ff      	movs	r4, #255	; 0xff
    9e5a:	2f00      	cmp	r7, #0
    9e5c:	d100      	bne.n	9e60 <__aeabi_fadd+0x234>
    9e5e:	e720      	b.n	9ca2 <__aeabi_fadd+0x76>
    9e60:	2280      	movs	r2, #128	; 0x80
    9e62:	4641      	mov	r1, r8
    9e64:	03d2      	lsls	r2, r2, #15
    9e66:	4211      	tst	r1, r2
    9e68:	d002      	beq.n	9e70 <__aeabi_fadd+0x244>
    9e6a:	4216      	tst	r6, r2
    9e6c:	d100      	bne.n	9e70 <__aeabi_fadd+0x244>
    9e6e:	003b      	movs	r3, r7
    9e70:	24ff      	movs	r4, #255	; 0xff
    9e72:	e716      	b.n	9ca2 <__aeabi_fadd+0x76>
    9e74:	24ff      	movs	r4, #255	; 0xff
    9e76:	2300      	movs	r3, #0
    9e78:	e724      	b.n	9cc4 <__aeabi_fadd+0x98>
    9e7a:	2c00      	cmp	r4, #0
    9e7c:	d1ea      	bne.n	9e54 <__aeabi_fadd+0x228>
    9e7e:	2b00      	cmp	r3, #0
    9e80:	d058      	beq.n	9f34 <__aeabi_fadd+0x308>
    9e82:	2f00      	cmp	r7, #0
    9e84:	d100      	bne.n	9e88 <__aeabi_fadd+0x25c>
    9e86:	e70c      	b.n	9ca2 <__aeabi_fadd+0x76>
    9e88:	4463      	add	r3, ip
    9e8a:	015a      	lsls	r2, r3, #5
    9e8c:	d400      	bmi.n	9e90 <__aeabi_fadd+0x264>
    9e8e:	e739      	b.n	9d04 <__aeabi_fadd+0xd8>
    9e90:	4a2e      	ldr	r2, [pc, #184]	; (9f4c <__aeabi_fadd+0x320>)
    9e92:	000c      	movs	r4, r1
    9e94:	4013      	ands	r3, r2
    9e96:	e704      	b.n	9ca2 <__aeabi_fadd+0x76>
    9e98:	2101      	movs	r1, #1
    9e9a:	e75c      	b.n	9d56 <__aeabi_fadd+0x12a>
    9e9c:	2c00      	cmp	r4, #0
    9e9e:	d11e      	bne.n	9ede <__aeabi_fadd+0x2b2>
    9ea0:	2b00      	cmp	r3, #0
    9ea2:	d040      	beq.n	9f26 <__aeabi_fadd+0x2fa>
    9ea4:	43c9      	mvns	r1, r1
    9ea6:	2900      	cmp	r1, #0
    9ea8:	d00b      	beq.n	9ec2 <__aeabi_fadd+0x296>
    9eaa:	28ff      	cmp	r0, #255	; 0xff
    9eac:	d036      	beq.n	9f1c <__aeabi_fadd+0x2f0>
    9eae:	291b      	cmp	r1, #27
    9eb0:	dc47      	bgt.n	9f42 <__aeabi_fadd+0x316>
    9eb2:	001c      	movs	r4, r3
    9eb4:	2620      	movs	r6, #32
    9eb6:	40cc      	lsrs	r4, r1
    9eb8:	1a71      	subs	r1, r6, r1
    9eba:	408b      	lsls	r3, r1
    9ebc:	1e59      	subs	r1, r3, #1
    9ebe:	418b      	sbcs	r3, r1
    9ec0:	4323      	orrs	r3, r4
    9ec2:	4463      	add	r3, ip
    9ec4:	0004      	movs	r4, r0
    9ec6:	e747      	b.n	9d58 <__aeabi_fadd+0x12c>
    9ec8:	2b00      	cmp	r3, #0
    9eca:	d118      	bne.n	9efe <__aeabi_fadd+0x2d2>
    9ecc:	1e3b      	subs	r3, r7, #0
    9ece:	d02d      	beq.n	9f2c <__aeabi_fadd+0x300>
    9ed0:	000d      	movs	r5, r1
    9ed2:	24ff      	movs	r4, #255	; 0xff
    9ed4:	e6e5      	b.n	9ca2 <__aeabi_fadd+0x76>
    9ed6:	003b      	movs	r3, r7
    9ed8:	0004      	movs	r4, r0
    9eda:	000d      	movs	r5, r1
    9edc:	e6e1      	b.n	9ca2 <__aeabi_fadd+0x76>
    9ede:	28ff      	cmp	r0, #255	; 0xff
    9ee0:	d01c      	beq.n	9f1c <__aeabi_fadd+0x2f0>
    9ee2:	2480      	movs	r4, #128	; 0x80
    9ee4:	04e4      	lsls	r4, r4, #19
    9ee6:	4249      	negs	r1, r1
    9ee8:	4323      	orrs	r3, r4
    9eea:	e7e0      	b.n	9eae <__aeabi_fadd+0x282>
    9eec:	2f00      	cmp	r7, #0
    9eee:	d100      	bne.n	9ef2 <__aeabi_fadd+0x2c6>
    9ef0:	e6d7      	b.n	9ca2 <__aeabi_fadd+0x76>
    9ef2:	1bde      	subs	r6, r3, r7
    9ef4:	0172      	lsls	r2, r6, #5
    9ef6:	d51f      	bpl.n	9f38 <__aeabi_fadd+0x30c>
    9ef8:	1afb      	subs	r3, r7, r3
    9efa:	000d      	movs	r5, r1
    9efc:	e6d1      	b.n	9ca2 <__aeabi_fadd+0x76>
    9efe:	24ff      	movs	r4, #255	; 0xff
    9f00:	2f00      	cmp	r7, #0
    9f02:	d100      	bne.n	9f06 <__aeabi_fadd+0x2da>
    9f04:	e6cd      	b.n	9ca2 <__aeabi_fadd+0x76>
    9f06:	2280      	movs	r2, #128	; 0x80
    9f08:	4640      	mov	r0, r8
    9f0a:	03d2      	lsls	r2, r2, #15
    9f0c:	4210      	tst	r0, r2
    9f0e:	d0af      	beq.n	9e70 <__aeabi_fadd+0x244>
    9f10:	4216      	tst	r6, r2
    9f12:	d1ad      	bne.n	9e70 <__aeabi_fadd+0x244>
    9f14:	003b      	movs	r3, r7
    9f16:	000d      	movs	r5, r1
    9f18:	24ff      	movs	r4, #255	; 0xff
    9f1a:	e6c2      	b.n	9ca2 <__aeabi_fadd+0x76>
    9f1c:	4663      	mov	r3, ip
    9f1e:	24ff      	movs	r4, #255	; 0xff
    9f20:	e6bf      	b.n	9ca2 <__aeabi_fadd+0x76>
    9f22:	2301      	movs	r3, #1
    9f24:	e77a      	b.n	9e1c <__aeabi_fadd+0x1f0>
    9f26:	003b      	movs	r3, r7
    9f28:	0004      	movs	r4, r0
    9f2a:	e6ba      	b.n	9ca2 <__aeabi_fadd+0x76>
    9f2c:	2680      	movs	r6, #128	; 0x80
    9f2e:	2200      	movs	r2, #0
    9f30:	03f6      	lsls	r6, r6, #15
    9f32:	e6f0      	b.n	9d16 <__aeabi_fadd+0xea>
    9f34:	003b      	movs	r3, r7
    9f36:	e6b4      	b.n	9ca2 <__aeabi_fadd+0x76>
    9f38:	1e33      	subs	r3, r6, #0
    9f3a:	d000      	beq.n	9f3e <__aeabi_fadd+0x312>
    9f3c:	e6e2      	b.n	9d04 <__aeabi_fadd+0xd8>
    9f3e:	2200      	movs	r2, #0
    9f40:	e721      	b.n	9d86 <__aeabi_fadd+0x15a>
    9f42:	2301      	movs	r3, #1
    9f44:	e7bd      	b.n	9ec2 <__aeabi_fadd+0x296>
    9f46:	46c0      	nop			; (mov r8, r8)
    9f48:	7dffffff 	.word	0x7dffffff
    9f4c:	fbffffff 	.word	0xfbffffff

00009f50 <__aeabi_fdiv>:
    9f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f52:	4657      	mov	r7, sl
    9f54:	464e      	mov	r6, r9
    9f56:	46de      	mov	lr, fp
    9f58:	4645      	mov	r5, r8
    9f5a:	b5e0      	push	{r5, r6, r7, lr}
    9f5c:	0244      	lsls	r4, r0, #9
    9f5e:	0043      	lsls	r3, r0, #1
    9f60:	0fc6      	lsrs	r6, r0, #31
    9f62:	b083      	sub	sp, #12
    9f64:	1c0f      	adds	r7, r1, #0
    9f66:	0a64      	lsrs	r4, r4, #9
    9f68:	0e1b      	lsrs	r3, r3, #24
    9f6a:	46b2      	mov	sl, r6
    9f6c:	d053      	beq.n	a016 <__aeabi_fdiv+0xc6>
    9f6e:	2bff      	cmp	r3, #255	; 0xff
    9f70:	d027      	beq.n	9fc2 <__aeabi_fdiv+0x72>
    9f72:	2280      	movs	r2, #128	; 0x80
    9f74:	00e4      	lsls	r4, r4, #3
    9f76:	04d2      	lsls	r2, r2, #19
    9f78:	4314      	orrs	r4, r2
    9f7a:	227f      	movs	r2, #127	; 0x7f
    9f7c:	4252      	negs	r2, r2
    9f7e:	4690      	mov	r8, r2
    9f80:	4498      	add	r8, r3
    9f82:	2300      	movs	r3, #0
    9f84:	4699      	mov	r9, r3
    9f86:	469b      	mov	fp, r3
    9f88:	027d      	lsls	r5, r7, #9
    9f8a:	0078      	lsls	r0, r7, #1
    9f8c:	0ffb      	lsrs	r3, r7, #31
    9f8e:	0a6d      	lsrs	r5, r5, #9
    9f90:	0e00      	lsrs	r0, r0, #24
    9f92:	9300      	str	r3, [sp, #0]
    9f94:	d024      	beq.n	9fe0 <__aeabi_fdiv+0x90>
    9f96:	28ff      	cmp	r0, #255	; 0xff
    9f98:	d046      	beq.n	a028 <__aeabi_fdiv+0xd8>
    9f9a:	2380      	movs	r3, #128	; 0x80
    9f9c:	2100      	movs	r1, #0
    9f9e:	00ed      	lsls	r5, r5, #3
    9fa0:	04db      	lsls	r3, r3, #19
    9fa2:	431d      	orrs	r5, r3
    9fa4:	387f      	subs	r0, #127	; 0x7f
    9fa6:	4647      	mov	r7, r8
    9fa8:	1a38      	subs	r0, r7, r0
    9faa:	464f      	mov	r7, r9
    9fac:	430f      	orrs	r7, r1
    9fae:	00bf      	lsls	r7, r7, #2
    9fb0:	46b9      	mov	r9, r7
    9fb2:	0033      	movs	r3, r6
    9fb4:	9a00      	ldr	r2, [sp, #0]
    9fb6:	4f87      	ldr	r7, [pc, #540]	; (a1d4 <__aeabi_fdiv+0x284>)
    9fb8:	4053      	eors	r3, r2
    9fba:	464a      	mov	r2, r9
    9fbc:	58ba      	ldr	r2, [r7, r2]
    9fbe:	9301      	str	r3, [sp, #4]
    9fc0:	4697      	mov	pc, r2
    9fc2:	2c00      	cmp	r4, #0
    9fc4:	d14e      	bne.n	a064 <__aeabi_fdiv+0x114>
    9fc6:	2308      	movs	r3, #8
    9fc8:	4699      	mov	r9, r3
    9fca:	33f7      	adds	r3, #247	; 0xf7
    9fcc:	4698      	mov	r8, r3
    9fce:	3bfd      	subs	r3, #253	; 0xfd
    9fd0:	469b      	mov	fp, r3
    9fd2:	027d      	lsls	r5, r7, #9
    9fd4:	0078      	lsls	r0, r7, #1
    9fd6:	0ffb      	lsrs	r3, r7, #31
    9fd8:	0a6d      	lsrs	r5, r5, #9
    9fda:	0e00      	lsrs	r0, r0, #24
    9fdc:	9300      	str	r3, [sp, #0]
    9fde:	d1da      	bne.n	9f96 <__aeabi_fdiv+0x46>
    9fe0:	2d00      	cmp	r5, #0
    9fe2:	d126      	bne.n	a032 <__aeabi_fdiv+0xe2>
    9fe4:	2000      	movs	r0, #0
    9fe6:	2101      	movs	r1, #1
    9fe8:	0033      	movs	r3, r6
    9fea:	9a00      	ldr	r2, [sp, #0]
    9fec:	4f7a      	ldr	r7, [pc, #488]	; (a1d8 <__aeabi_fdiv+0x288>)
    9fee:	4053      	eors	r3, r2
    9ff0:	4642      	mov	r2, r8
    9ff2:	1a10      	subs	r0, r2, r0
    9ff4:	464a      	mov	r2, r9
    9ff6:	430a      	orrs	r2, r1
    9ff8:	0092      	lsls	r2, r2, #2
    9ffa:	58ba      	ldr	r2, [r7, r2]
    9ffc:	001d      	movs	r5, r3
    9ffe:	4697      	mov	pc, r2
    a000:	9b00      	ldr	r3, [sp, #0]
    a002:	002c      	movs	r4, r5
    a004:	469a      	mov	sl, r3
    a006:	468b      	mov	fp, r1
    a008:	465b      	mov	r3, fp
    a00a:	2b02      	cmp	r3, #2
    a00c:	d131      	bne.n	a072 <__aeabi_fdiv+0x122>
    a00e:	4653      	mov	r3, sl
    a010:	21ff      	movs	r1, #255	; 0xff
    a012:	2400      	movs	r4, #0
    a014:	e038      	b.n	a088 <__aeabi_fdiv+0x138>
    a016:	2c00      	cmp	r4, #0
    a018:	d117      	bne.n	a04a <__aeabi_fdiv+0xfa>
    a01a:	2304      	movs	r3, #4
    a01c:	4699      	mov	r9, r3
    a01e:	2300      	movs	r3, #0
    a020:	4698      	mov	r8, r3
    a022:	3301      	adds	r3, #1
    a024:	469b      	mov	fp, r3
    a026:	e7af      	b.n	9f88 <__aeabi_fdiv+0x38>
    a028:	20ff      	movs	r0, #255	; 0xff
    a02a:	2d00      	cmp	r5, #0
    a02c:	d10b      	bne.n	a046 <__aeabi_fdiv+0xf6>
    a02e:	2102      	movs	r1, #2
    a030:	e7da      	b.n	9fe8 <__aeabi_fdiv+0x98>
    a032:	0028      	movs	r0, r5
    a034:	f002 fb8a 	bl	c74c <__clzsi2>
    a038:	1f43      	subs	r3, r0, #5
    a03a:	409d      	lsls	r5, r3
    a03c:	2376      	movs	r3, #118	; 0x76
    a03e:	425b      	negs	r3, r3
    a040:	1a18      	subs	r0, r3, r0
    a042:	2100      	movs	r1, #0
    a044:	e7af      	b.n	9fa6 <__aeabi_fdiv+0x56>
    a046:	2103      	movs	r1, #3
    a048:	e7ad      	b.n	9fa6 <__aeabi_fdiv+0x56>
    a04a:	0020      	movs	r0, r4
    a04c:	f002 fb7e 	bl	c74c <__clzsi2>
    a050:	1f43      	subs	r3, r0, #5
    a052:	409c      	lsls	r4, r3
    a054:	2376      	movs	r3, #118	; 0x76
    a056:	425b      	negs	r3, r3
    a058:	1a1b      	subs	r3, r3, r0
    a05a:	4698      	mov	r8, r3
    a05c:	2300      	movs	r3, #0
    a05e:	4699      	mov	r9, r3
    a060:	469b      	mov	fp, r3
    a062:	e791      	b.n	9f88 <__aeabi_fdiv+0x38>
    a064:	230c      	movs	r3, #12
    a066:	4699      	mov	r9, r3
    a068:	33f3      	adds	r3, #243	; 0xf3
    a06a:	4698      	mov	r8, r3
    a06c:	3bfc      	subs	r3, #252	; 0xfc
    a06e:	469b      	mov	fp, r3
    a070:	e78a      	b.n	9f88 <__aeabi_fdiv+0x38>
    a072:	2b03      	cmp	r3, #3
    a074:	d100      	bne.n	a078 <__aeabi_fdiv+0x128>
    a076:	e0a5      	b.n	a1c4 <__aeabi_fdiv+0x274>
    a078:	4655      	mov	r5, sl
    a07a:	2b01      	cmp	r3, #1
    a07c:	d000      	beq.n	a080 <__aeabi_fdiv+0x130>
    a07e:	e081      	b.n	a184 <__aeabi_fdiv+0x234>
    a080:	2301      	movs	r3, #1
    a082:	2100      	movs	r1, #0
    a084:	2400      	movs	r4, #0
    a086:	402b      	ands	r3, r5
    a088:	0264      	lsls	r4, r4, #9
    a08a:	05c9      	lsls	r1, r1, #23
    a08c:	0a60      	lsrs	r0, r4, #9
    a08e:	07db      	lsls	r3, r3, #31
    a090:	4308      	orrs	r0, r1
    a092:	4318      	orrs	r0, r3
    a094:	b003      	add	sp, #12
    a096:	bc3c      	pop	{r2, r3, r4, r5}
    a098:	4690      	mov	r8, r2
    a09a:	4699      	mov	r9, r3
    a09c:	46a2      	mov	sl, r4
    a09e:	46ab      	mov	fp, r5
    a0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0a2:	2480      	movs	r4, #128	; 0x80
    a0a4:	2300      	movs	r3, #0
    a0a6:	03e4      	lsls	r4, r4, #15
    a0a8:	21ff      	movs	r1, #255	; 0xff
    a0aa:	e7ed      	b.n	a088 <__aeabi_fdiv+0x138>
    a0ac:	21ff      	movs	r1, #255	; 0xff
    a0ae:	2400      	movs	r4, #0
    a0b0:	e7ea      	b.n	a088 <__aeabi_fdiv+0x138>
    a0b2:	2301      	movs	r3, #1
    a0b4:	1a59      	subs	r1, r3, r1
    a0b6:	291b      	cmp	r1, #27
    a0b8:	dd66      	ble.n	a188 <__aeabi_fdiv+0x238>
    a0ba:	9a01      	ldr	r2, [sp, #4]
    a0bc:	4013      	ands	r3, r2
    a0be:	2100      	movs	r1, #0
    a0c0:	2400      	movs	r4, #0
    a0c2:	e7e1      	b.n	a088 <__aeabi_fdiv+0x138>
    a0c4:	2380      	movs	r3, #128	; 0x80
    a0c6:	03db      	lsls	r3, r3, #15
    a0c8:	421c      	tst	r4, r3
    a0ca:	d038      	beq.n	a13e <__aeabi_fdiv+0x1ee>
    a0cc:	421d      	tst	r5, r3
    a0ce:	d051      	beq.n	a174 <__aeabi_fdiv+0x224>
    a0d0:	431c      	orrs	r4, r3
    a0d2:	0264      	lsls	r4, r4, #9
    a0d4:	0a64      	lsrs	r4, r4, #9
    a0d6:	0033      	movs	r3, r6
    a0d8:	21ff      	movs	r1, #255	; 0xff
    a0da:	e7d5      	b.n	a088 <__aeabi_fdiv+0x138>
    a0dc:	0163      	lsls	r3, r4, #5
    a0de:	016c      	lsls	r4, r5, #5
    a0e0:	42a3      	cmp	r3, r4
    a0e2:	d23b      	bcs.n	a15c <__aeabi_fdiv+0x20c>
    a0e4:	261b      	movs	r6, #27
    a0e6:	2100      	movs	r1, #0
    a0e8:	3801      	subs	r0, #1
    a0ea:	2501      	movs	r5, #1
    a0ec:	001f      	movs	r7, r3
    a0ee:	0049      	lsls	r1, r1, #1
    a0f0:	005b      	lsls	r3, r3, #1
    a0f2:	2f00      	cmp	r7, #0
    a0f4:	db01      	blt.n	a0fa <__aeabi_fdiv+0x1aa>
    a0f6:	429c      	cmp	r4, r3
    a0f8:	d801      	bhi.n	a0fe <__aeabi_fdiv+0x1ae>
    a0fa:	1b1b      	subs	r3, r3, r4
    a0fc:	4329      	orrs	r1, r5
    a0fe:	3e01      	subs	r6, #1
    a100:	2e00      	cmp	r6, #0
    a102:	d1f3      	bne.n	a0ec <__aeabi_fdiv+0x19c>
    a104:	001c      	movs	r4, r3
    a106:	1e63      	subs	r3, r4, #1
    a108:	419c      	sbcs	r4, r3
    a10a:	430c      	orrs	r4, r1
    a10c:	0001      	movs	r1, r0
    a10e:	317f      	adds	r1, #127	; 0x7f
    a110:	2900      	cmp	r1, #0
    a112:	ddce      	ble.n	a0b2 <__aeabi_fdiv+0x162>
    a114:	0763      	lsls	r3, r4, #29
    a116:	d004      	beq.n	a122 <__aeabi_fdiv+0x1d2>
    a118:	230f      	movs	r3, #15
    a11a:	4023      	ands	r3, r4
    a11c:	2b04      	cmp	r3, #4
    a11e:	d000      	beq.n	a122 <__aeabi_fdiv+0x1d2>
    a120:	3404      	adds	r4, #4
    a122:	0123      	lsls	r3, r4, #4
    a124:	d503      	bpl.n	a12e <__aeabi_fdiv+0x1de>
    a126:	0001      	movs	r1, r0
    a128:	4b2c      	ldr	r3, [pc, #176]	; (a1dc <__aeabi_fdiv+0x28c>)
    a12a:	3180      	adds	r1, #128	; 0x80
    a12c:	401c      	ands	r4, r3
    a12e:	29fe      	cmp	r1, #254	; 0xfe
    a130:	dd0d      	ble.n	a14e <__aeabi_fdiv+0x1fe>
    a132:	2301      	movs	r3, #1
    a134:	9a01      	ldr	r2, [sp, #4]
    a136:	21ff      	movs	r1, #255	; 0xff
    a138:	4013      	ands	r3, r2
    a13a:	2400      	movs	r4, #0
    a13c:	e7a4      	b.n	a088 <__aeabi_fdiv+0x138>
    a13e:	2380      	movs	r3, #128	; 0x80
    a140:	03db      	lsls	r3, r3, #15
    a142:	431c      	orrs	r4, r3
    a144:	0264      	lsls	r4, r4, #9
    a146:	0a64      	lsrs	r4, r4, #9
    a148:	0033      	movs	r3, r6
    a14a:	21ff      	movs	r1, #255	; 0xff
    a14c:	e79c      	b.n	a088 <__aeabi_fdiv+0x138>
    a14e:	2301      	movs	r3, #1
    a150:	9a01      	ldr	r2, [sp, #4]
    a152:	01a4      	lsls	r4, r4, #6
    a154:	0a64      	lsrs	r4, r4, #9
    a156:	b2c9      	uxtb	r1, r1
    a158:	4013      	ands	r3, r2
    a15a:	e795      	b.n	a088 <__aeabi_fdiv+0x138>
    a15c:	1b1b      	subs	r3, r3, r4
    a15e:	261a      	movs	r6, #26
    a160:	2101      	movs	r1, #1
    a162:	e7c2      	b.n	a0ea <__aeabi_fdiv+0x19a>
    a164:	9b00      	ldr	r3, [sp, #0]
    a166:	468b      	mov	fp, r1
    a168:	469a      	mov	sl, r3
    a16a:	2400      	movs	r4, #0
    a16c:	e74c      	b.n	a008 <__aeabi_fdiv+0xb8>
    a16e:	0263      	lsls	r3, r4, #9
    a170:	d5e5      	bpl.n	a13e <__aeabi_fdiv+0x1ee>
    a172:	2500      	movs	r5, #0
    a174:	2480      	movs	r4, #128	; 0x80
    a176:	03e4      	lsls	r4, r4, #15
    a178:	432c      	orrs	r4, r5
    a17a:	0264      	lsls	r4, r4, #9
    a17c:	0a64      	lsrs	r4, r4, #9
    a17e:	9b00      	ldr	r3, [sp, #0]
    a180:	21ff      	movs	r1, #255	; 0xff
    a182:	e781      	b.n	a088 <__aeabi_fdiv+0x138>
    a184:	9501      	str	r5, [sp, #4]
    a186:	e7c1      	b.n	a10c <__aeabi_fdiv+0x1bc>
    a188:	0023      	movs	r3, r4
    a18a:	2020      	movs	r0, #32
    a18c:	40cb      	lsrs	r3, r1
    a18e:	1a41      	subs	r1, r0, r1
    a190:	408c      	lsls	r4, r1
    a192:	1e61      	subs	r1, r4, #1
    a194:	418c      	sbcs	r4, r1
    a196:	431c      	orrs	r4, r3
    a198:	0763      	lsls	r3, r4, #29
    a19a:	d004      	beq.n	a1a6 <__aeabi_fdiv+0x256>
    a19c:	230f      	movs	r3, #15
    a19e:	4023      	ands	r3, r4
    a1a0:	2b04      	cmp	r3, #4
    a1a2:	d000      	beq.n	a1a6 <__aeabi_fdiv+0x256>
    a1a4:	3404      	adds	r4, #4
    a1a6:	0163      	lsls	r3, r4, #5
    a1a8:	d505      	bpl.n	a1b6 <__aeabi_fdiv+0x266>
    a1aa:	2301      	movs	r3, #1
    a1ac:	9a01      	ldr	r2, [sp, #4]
    a1ae:	2101      	movs	r1, #1
    a1b0:	4013      	ands	r3, r2
    a1b2:	2400      	movs	r4, #0
    a1b4:	e768      	b.n	a088 <__aeabi_fdiv+0x138>
    a1b6:	2301      	movs	r3, #1
    a1b8:	9a01      	ldr	r2, [sp, #4]
    a1ba:	01a4      	lsls	r4, r4, #6
    a1bc:	0a64      	lsrs	r4, r4, #9
    a1be:	4013      	ands	r3, r2
    a1c0:	2100      	movs	r1, #0
    a1c2:	e761      	b.n	a088 <__aeabi_fdiv+0x138>
    a1c4:	2380      	movs	r3, #128	; 0x80
    a1c6:	03db      	lsls	r3, r3, #15
    a1c8:	431c      	orrs	r4, r3
    a1ca:	0264      	lsls	r4, r4, #9
    a1cc:	0a64      	lsrs	r4, r4, #9
    a1ce:	4653      	mov	r3, sl
    a1d0:	21ff      	movs	r1, #255	; 0xff
    a1d2:	e759      	b.n	a088 <__aeabi_fdiv+0x138>
    a1d4:	00012790 	.word	0x00012790
    a1d8:	000127d0 	.word	0x000127d0
    a1dc:	f7ffffff 	.word	0xf7ffffff

0000a1e0 <__eqsf2>:
    a1e0:	b570      	push	{r4, r5, r6, lr}
    a1e2:	0042      	lsls	r2, r0, #1
    a1e4:	0245      	lsls	r5, r0, #9
    a1e6:	024e      	lsls	r6, r1, #9
    a1e8:	004c      	lsls	r4, r1, #1
    a1ea:	0fc3      	lsrs	r3, r0, #31
    a1ec:	0a6d      	lsrs	r5, r5, #9
    a1ee:	0e12      	lsrs	r2, r2, #24
    a1f0:	0a76      	lsrs	r6, r6, #9
    a1f2:	0e24      	lsrs	r4, r4, #24
    a1f4:	0fc9      	lsrs	r1, r1, #31
    a1f6:	2001      	movs	r0, #1
    a1f8:	2aff      	cmp	r2, #255	; 0xff
    a1fa:	d006      	beq.n	a20a <__eqsf2+0x2a>
    a1fc:	2cff      	cmp	r4, #255	; 0xff
    a1fe:	d003      	beq.n	a208 <__eqsf2+0x28>
    a200:	42a2      	cmp	r2, r4
    a202:	d101      	bne.n	a208 <__eqsf2+0x28>
    a204:	42b5      	cmp	r5, r6
    a206:	d006      	beq.n	a216 <__eqsf2+0x36>
    a208:	bd70      	pop	{r4, r5, r6, pc}
    a20a:	2d00      	cmp	r5, #0
    a20c:	d1fc      	bne.n	a208 <__eqsf2+0x28>
    a20e:	2cff      	cmp	r4, #255	; 0xff
    a210:	d1fa      	bne.n	a208 <__eqsf2+0x28>
    a212:	2e00      	cmp	r6, #0
    a214:	d1f8      	bne.n	a208 <__eqsf2+0x28>
    a216:	428b      	cmp	r3, r1
    a218:	d006      	beq.n	a228 <__eqsf2+0x48>
    a21a:	2001      	movs	r0, #1
    a21c:	2a00      	cmp	r2, #0
    a21e:	d1f3      	bne.n	a208 <__eqsf2+0x28>
    a220:	0028      	movs	r0, r5
    a222:	1e45      	subs	r5, r0, #1
    a224:	41a8      	sbcs	r0, r5
    a226:	e7ef      	b.n	a208 <__eqsf2+0x28>
    a228:	2000      	movs	r0, #0
    a22a:	e7ed      	b.n	a208 <__eqsf2+0x28>

0000a22c <__gesf2>:
    a22c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a22e:	0042      	lsls	r2, r0, #1
    a230:	0245      	lsls	r5, r0, #9
    a232:	024c      	lsls	r4, r1, #9
    a234:	0fc3      	lsrs	r3, r0, #31
    a236:	0048      	lsls	r0, r1, #1
    a238:	0a6d      	lsrs	r5, r5, #9
    a23a:	0e12      	lsrs	r2, r2, #24
    a23c:	0a64      	lsrs	r4, r4, #9
    a23e:	0e00      	lsrs	r0, r0, #24
    a240:	0fc9      	lsrs	r1, r1, #31
    a242:	2aff      	cmp	r2, #255	; 0xff
    a244:	d01e      	beq.n	a284 <__gesf2+0x58>
    a246:	28ff      	cmp	r0, #255	; 0xff
    a248:	d021      	beq.n	a28e <__gesf2+0x62>
    a24a:	2a00      	cmp	r2, #0
    a24c:	d10a      	bne.n	a264 <__gesf2+0x38>
    a24e:	426e      	negs	r6, r5
    a250:	416e      	adcs	r6, r5
    a252:	b2f6      	uxtb	r6, r6
    a254:	2800      	cmp	r0, #0
    a256:	d10f      	bne.n	a278 <__gesf2+0x4c>
    a258:	2c00      	cmp	r4, #0
    a25a:	d10d      	bne.n	a278 <__gesf2+0x4c>
    a25c:	2000      	movs	r0, #0
    a25e:	2d00      	cmp	r5, #0
    a260:	d009      	beq.n	a276 <__gesf2+0x4a>
    a262:	e005      	b.n	a270 <__gesf2+0x44>
    a264:	2800      	cmp	r0, #0
    a266:	d101      	bne.n	a26c <__gesf2+0x40>
    a268:	2c00      	cmp	r4, #0
    a26a:	d001      	beq.n	a270 <__gesf2+0x44>
    a26c:	428b      	cmp	r3, r1
    a26e:	d011      	beq.n	a294 <__gesf2+0x68>
    a270:	2101      	movs	r1, #1
    a272:	4258      	negs	r0, r3
    a274:	4308      	orrs	r0, r1
    a276:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a278:	2e00      	cmp	r6, #0
    a27a:	d0f7      	beq.n	a26c <__gesf2+0x40>
    a27c:	2001      	movs	r0, #1
    a27e:	3901      	subs	r1, #1
    a280:	4308      	orrs	r0, r1
    a282:	e7f8      	b.n	a276 <__gesf2+0x4a>
    a284:	2d00      	cmp	r5, #0
    a286:	d0de      	beq.n	a246 <__gesf2+0x1a>
    a288:	2002      	movs	r0, #2
    a28a:	4240      	negs	r0, r0
    a28c:	e7f3      	b.n	a276 <__gesf2+0x4a>
    a28e:	2c00      	cmp	r4, #0
    a290:	d0db      	beq.n	a24a <__gesf2+0x1e>
    a292:	e7f9      	b.n	a288 <__gesf2+0x5c>
    a294:	4282      	cmp	r2, r0
    a296:	dceb      	bgt.n	a270 <__gesf2+0x44>
    a298:	db04      	blt.n	a2a4 <__gesf2+0x78>
    a29a:	42a5      	cmp	r5, r4
    a29c:	d8e8      	bhi.n	a270 <__gesf2+0x44>
    a29e:	2000      	movs	r0, #0
    a2a0:	42a5      	cmp	r5, r4
    a2a2:	d2e8      	bcs.n	a276 <__gesf2+0x4a>
    a2a4:	2101      	movs	r1, #1
    a2a6:	1e58      	subs	r0, r3, #1
    a2a8:	4308      	orrs	r0, r1
    a2aa:	e7e4      	b.n	a276 <__gesf2+0x4a>

0000a2ac <__lesf2>:
    a2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2ae:	0042      	lsls	r2, r0, #1
    a2b0:	024d      	lsls	r5, r1, #9
    a2b2:	004c      	lsls	r4, r1, #1
    a2b4:	0246      	lsls	r6, r0, #9
    a2b6:	0a76      	lsrs	r6, r6, #9
    a2b8:	0e12      	lsrs	r2, r2, #24
    a2ba:	0fc3      	lsrs	r3, r0, #31
    a2bc:	0a6d      	lsrs	r5, r5, #9
    a2be:	0e24      	lsrs	r4, r4, #24
    a2c0:	0fc9      	lsrs	r1, r1, #31
    a2c2:	2aff      	cmp	r2, #255	; 0xff
    a2c4:	d016      	beq.n	a2f4 <__lesf2+0x48>
    a2c6:	2cff      	cmp	r4, #255	; 0xff
    a2c8:	d018      	beq.n	a2fc <__lesf2+0x50>
    a2ca:	2a00      	cmp	r2, #0
    a2cc:	d10a      	bne.n	a2e4 <__lesf2+0x38>
    a2ce:	4270      	negs	r0, r6
    a2d0:	4170      	adcs	r0, r6
    a2d2:	b2c0      	uxtb	r0, r0
    a2d4:	2c00      	cmp	r4, #0
    a2d6:	d015      	beq.n	a304 <__lesf2+0x58>
    a2d8:	2800      	cmp	r0, #0
    a2da:	d005      	beq.n	a2e8 <__lesf2+0x3c>
    a2dc:	2001      	movs	r0, #1
    a2de:	3901      	subs	r1, #1
    a2e0:	4308      	orrs	r0, r1
    a2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2e4:	2c00      	cmp	r4, #0
    a2e6:	d013      	beq.n	a310 <__lesf2+0x64>
    a2e8:	4299      	cmp	r1, r3
    a2ea:	d014      	beq.n	a316 <__lesf2+0x6a>
    a2ec:	2001      	movs	r0, #1
    a2ee:	425b      	negs	r3, r3
    a2f0:	4318      	orrs	r0, r3
    a2f2:	e7f6      	b.n	a2e2 <__lesf2+0x36>
    a2f4:	2002      	movs	r0, #2
    a2f6:	2e00      	cmp	r6, #0
    a2f8:	d1f3      	bne.n	a2e2 <__lesf2+0x36>
    a2fa:	e7e4      	b.n	a2c6 <__lesf2+0x1a>
    a2fc:	2002      	movs	r0, #2
    a2fe:	2d00      	cmp	r5, #0
    a300:	d1ef      	bne.n	a2e2 <__lesf2+0x36>
    a302:	e7e2      	b.n	a2ca <__lesf2+0x1e>
    a304:	2d00      	cmp	r5, #0
    a306:	d1e7      	bne.n	a2d8 <__lesf2+0x2c>
    a308:	2000      	movs	r0, #0
    a30a:	2e00      	cmp	r6, #0
    a30c:	d0e9      	beq.n	a2e2 <__lesf2+0x36>
    a30e:	e7ed      	b.n	a2ec <__lesf2+0x40>
    a310:	2d00      	cmp	r5, #0
    a312:	d1e9      	bne.n	a2e8 <__lesf2+0x3c>
    a314:	e7ea      	b.n	a2ec <__lesf2+0x40>
    a316:	42a2      	cmp	r2, r4
    a318:	dc06      	bgt.n	a328 <__lesf2+0x7c>
    a31a:	dbdf      	blt.n	a2dc <__lesf2+0x30>
    a31c:	42ae      	cmp	r6, r5
    a31e:	d803      	bhi.n	a328 <__lesf2+0x7c>
    a320:	2000      	movs	r0, #0
    a322:	42ae      	cmp	r6, r5
    a324:	d3da      	bcc.n	a2dc <__lesf2+0x30>
    a326:	e7dc      	b.n	a2e2 <__lesf2+0x36>
    a328:	2001      	movs	r0, #1
    a32a:	4249      	negs	r1, r1
    a32c:	4308      	orrs	r0, r1
    a32e:	e7d8      	b.n	a2e2 <__lesf2+0x36>

0000a330 <__aeabi_fmul>:
    a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a332:	4657      	mov	r7, sl
    a334:	464e      	mov	r6, r9
    a336:	4645      	mov	r5, r8
    a338:	46de      	mov	lr, fp
    a33a:	b5e0      	push	{r5, r6, r7, lr}
    a33c:	0247      	lsls	r7, r0, #9
    a33e:	0046      	lsls	r6, r0, #1
    a340:	4688      	mov	r8, r1
    a342:	0a7f      	lsrs	r7, r7, #9
    a344:	0e36      	lsrs	r6, r6, #24
    a346:	0fc4      	lsrs	r4, r0, #31
    a348:	2e00      	cmp	r6, #0
    a34a:	d047      	beq.n	a3dc <__aeabi_fmul+0xac>
    a34c:	2eff      	cmp	r6, #255	; 0xff
    a34e:	d024      	beq.n	a39a <__aeabi_fmul+0x6a>
    a350:	00fb      	lsls	r3, r7, #3
    a352:	2780      	movs	r7, #128	; 0x80
    a354:	04ff      	lsls	r7, r7, #19
    a356:	431f      	orrs	r7, r3
    a358:	2300      	movs	r3, #0
    a35a:	4699      	mov	r9, r3
    a35c:	469a      	mov	sl, r3
    a35e:	3e7f      	subs	r6, #127	; 0x7f
    a360:	4643      	mov	r3, r8
    a362:	025d      	lsls	r5, r3, #9
    a364:	0058      	lsls	r0, r3, #1
    a366:	0fdb      	lsrs	r3, r3, #31
    a368:	0a6d      	lsrs	r5, r5, #9
    a36a:	0e00      	lsrs	r0, r0, #24
    a36c:	4698      	mov	r8, r3
    a36e:	d043      	beq.n	a3f8 <__aeabi_fmul+0xc8>
    a370:	28ff      	cmp	r0, #255	; 0xff
    a372:	d03b      	beq.n	a3ec <__aeabi_fmul+0xbc>
    a374:	00eb      	lsls	r3, r5, #3
    a376:	2580      	movs	r5, #128	; 0x80
    a378:	2200      	movs	r2, #0
    a37a:	04ed      	lsls	r5, r5, #19
    a37c:	431d      	orrs	r5, r3
    a37e:	387f      	subs	r0, #127	; 0x7f
    a380:	1836      	adds	r6, r6, r0
    a382:	1c73      	adds	r3, r6, #1
    a384:	4641      	mov	r1, r8
    a386:	469b      	mov	fp, r3
    a388:	464b      	mov	r3, r9
    a38a:	4061      	eors	r1, r4
    a38c:	4313      	orrs	r3, r2
    a38e:	2b0f      	cmp	r3, #15
    a390:	d864      	bhi.n	a45c <__aeabi_fmul+0x12c>
    a392:	4875      	ldr	r0, [pc, #468]	; (a568 <__aeabi_fmul+0x238>)
    a394:	009b      	lsls	r3, r3, #2
    a396:	58c3      	ldr	r3, [r0, r3]
    a398:	469f      	mov	pc, r3
    a39a:	2f00      	cmp	r7, #0
    a39c:	d142      	bne.n	a424 <__aeabi_fmul+0xf4>
    a39e:	2308      	movs	r3, #8
    a3a0:	4699      	mov	r9, r3
    a3a2:	3b06      	subs	r3, #6
    a3a4:	26ff      	movs	r6, #255	; 0xff
    a3a6:	469a      	mov	sl, r3
    a3a8:	e7da      	b.n	a360 <__aeabi_fmul+0x30>
    a3aa:	4641      	mov	r1, r8
    a3ac:	2a02      	cmp	r2, #2
    a3ae:	d028      	beq.n	a402 <__aeabi_fmul+0xd2>
    a3b0:	2a03      	cmp	r2, #3
    a3b2:	d100      	bne.n	a3b6 <__aeabi_fmul+0x86>
    a3b4:	e0ce      	b.n	a554 <__aeabi_fmul+0x224>
    a3b6:	2a01      	cmp	r2, #1
    a3b8:	d000      	beq.n	a3bc <__aeabi_fmul+0x8c>
    a3ba:	e0ac      	b.n	a516 <__aeabi_fmul+0x1e6>
    a3bc:	4011      	ands	r1, r2
    a3be:	2000      	movs	r0, #0
    a3c0:	2200      	movs	r2, #0
    a3c2:	b2cc      	uxtb	r4, r1
    a3c4:	0240      	lsls	r0, r0, #9
    a3c6:	05d2      	lsls	r2, r2, #23
    a3c8:	0a40      	lsrs	r0, r0, #9
    a3ca:	07e4      	lsls	r4, r4, #31
    a3cc:	4310      	orrs	r0, r2
    a3ce:	4320      	orrs	r0, r4
    a3d0:	bc3c      	pop	{r2, r3, r4, r5}
    a3d2:	4690      	mov	r8, r2
    a3d4:	4699      	mov	r9, r3
    a3d6:	46a2      	mov	sl, r4
    a3d8:	46ab      	mov	fp, r5
    a3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3dc:	2f00      	cmp	r7, #0
    a3de:	d115      	bne.n	a40c <__aeabi_fmul+0xdc>
    a3e0:	2304      	movs	r3, #4
    a3e2:	4699      	mov	r9, r3
    a3e4:	3b03      	subs	r3, #3
    a3e6:	2600      	movs	r6, #0
    a3e8:	469a      	mov	sl, r3
    a3ea:	e7b9      	b.n	a360 <__aeabi_fmul+0x30>
    a3ec:	20ff      	movs	r0, #255	; 0xff
    a3ee:	2202      	movs	r2, #2
    a3f0:	2d00      	cmp	r5, #0
    a3f2:	d0c5      	beq.n	a380 <__aeabi_fmul+0x50>
    a3f4:	2203      	movs	r2, #3
    a3f6:	e7c3      	b.n	a380 <__aeabi_fmul+0x50>
    a3f8:	2d00      	cmp	r5, #0
    a3fa:	d119      	bne.n	a430 <__aeabi_fmul+0x100>
    a3fc:	2000      	movs	r0, #0
    a3fe:	2201      	movs	r2, #1
    a400:	e7be      	b.n	a380 <__aeabi_fmul+0x50>
    a402:	2401      	movs	r4, #1
    a404:	22ff      	movs	r2, #255	; 0xff
    a406:	400c      	ands	r4, r1
    a408:	2000      	movs	r0, #0
    a40a:	e7db      	b.n	a3c4 <__aeabi_fmul+0x94>
    a40c:	0038      	movs	r0, r7
    a40e:	f002 f99d 	bl	c74c <__clzsi2>
    a412:	2676      	movs	r6, #118	; 0x76
    a414:	1f43      	subs	r3, r0, #5
    a416:	409f      	lsls	r7, r3
    a418:	2300      	movs	r3, #0
    a41a:	4276      	negs	r6, r6
    a41c:	1a36      	subs	r6, r6, r0
    a41e:	4699      	mov	r9, r3
    a420:	469a      	mov	sl, r3
    a422:	e79d      	b.n	a360 <__aeabi_fmul+0x30>
    a424:	230c      	movs	r3, #12
    a426:	4699      	mov	r9, r3
    a428:	3b09      	subs	r3, #9
    a42a:	26ff      	movs	r6, #255	; 0xff
    a42c:	469a      	mov	sl, r3
    a42e:	e797      	b.n	a360 <__aeabi_fmul+0x30>
    a430:	0028      	movs	r0, r5
    a432:	f002 f98b 	bl	c74c <__clzsi2>
    a436:	1f43      	subs	r3, r0, #5
    a438:	409d      	lsls	r5, r3
    a43a:	2376      	movs	r3, #118	; 0x76
    a43c:	425b      	negs	r3, r3
    a43e:	1a18      	subs	r0, r3, r0
    a440:	2200      	movs	r2, #0
    a442:	e79d      	b.n	a380 <__aeabi_fmul+0x50>
    a444:	2080      	movs	r0, #128	; 0x80
    a446:	2400      	movs	r4, #0
    a448:	03c0      	lsls	r0, r0, #15
    a44a:	22ff      	movs	r2, #255	; 0xff
    a44c:	e7ba      	b.n	a3c4 <__aeabi_fmul+0x94>
    a44e:	003d      	movs	r5, r7
    a450:	4652      	mov	r2, sl
    a452:	e7ab      	b.n	a3ac <__aeabi_fmul+0x7c>
    a454:	003d      	movs	r5, r7
    a456:	0021      	movs	r1, r4
    a458:	4652      	mov	r2, sl
    a45a:	e7a7      	b.n	a3ac <__aeabi_fmul+0x7c>
    a45c:	0c3b      	lsrs	r3, r7, #16
    a45e:	469c      	mov	ip, r3
    a460:	042a      	lsls	r2, r5, #16
    a462:	0c12      	lsrs	r2, r2, #16
    a464:	0c2b      	lsrs	r3, r5, #16
    a466:	0014      	movs	r4, r2
    a468:	4660      	mov	r0, ip
    a46a:	4665      	mov	r5, ip
    a46c:	043f      	lsls	r7, r7, #16
    a46e:	0c3f      	lsrs	r7, r7, #16
    a470:	437c      	muls	r4, r7
    a472:	4342      	muls	r2, r0
    a474:	435d      	muls	r5, r3
    a476:	437b      	muls	r3, r7
    a478:	0c27      	lsrs	r7, r4, #16
    a47a:	189b      	adds	r3, r3, r2
    a47c:	18ff      	adds	r7, r7, r3
    a47e:	42ba      	cmp	r2, r7
    a480:	d903      	bls.n	a48a <__aeabi_fmul+0x15a>
    a482:	2380      	movs	r3, #128	; 0x80
    a484:	025b      	lsls	r3, r3, #9
    a486:	469c      	mov	ip, r3
    a488:	4465      	add	r5, ip
    a48a:	0424      	lsls	r4, r4, #16
    a48c:	043a      	lsls	r2, r7, #16
    a48e:	0c24      	lsrs	r4, r4, #16
    a490:	1912      	adds	r2, r2, r4
    a492:	0193      	lsls	r3, r2, #6
    a494:	1e5c      	subs	r4, r3, #1
    a496:	41a3      	sbcs	r3, r4
    a498:	0c3f      	lsrs	r7, r7, #16
    a49a:	0e92      	lsrs	r2, r2, #26
    a49c:	197d      	adds	r5, r7, r5
    a49e:	431a      	orrs	r2, r3
    a4a0:	01ad      	lsls	r5, r5, #6
    a4a2:	4315      	orrs	r5, r2
    a4a4:	012b      	lsls	r3, r5, #4
    a4a6:	d504      	bpl.n	a4b2 <__aeabi_fmul+0x182>
    a4a8:	2301      	movs	r3, #1
    a4aa:	465e      	mov	r6, fp
    a4ac:	086a      	lsrs	r2, r5, #1
    a4ae:	401d      	ands	r5, r3
    a4b0:	4315      	orrs	r5, r2
    a4b2:	0032      	movs	r2, r6
    a4b4:	327f      	adds	r2, #127	; 0x7f
    a4b6:	2a00      	cmp	r2, #0
    a4b8:	dd25      	ble.n	a506 <__aeabi_fmul+0x1d6>
    a4ba:	076b      	lsls	r3, r5, #29
    a4bc:	d004      	beq.n	a4c8 <__aeabi_fmul+0x198>
    a4be:	230f      	movs	r3, #15
    a4c0:	402b      	ands	r3, r5
    a4c2:	2b04      	cmp	r3, #4
    a4c4:	d000      	beq.n	a4c8 <__aeabi_fmul+0x198>
    a4c6:	3504      	adds	r5, #4
    a4c8:	012b      	lsls	r3, r5, #4
    a4ca:	d503      	bpl.n	a4d4 <__aeabi_fmul+0x1a4>
    a4cc:	0032      	movs	r2, r6
    a4ce:	4b27      	ldr	r3, [pc, #156]	; (a56c <__aeabi_fmul+0x23c>)
    a4d0:	3280      	adds	r2, #128	; 0x80
    a4d2:	401d      	ands	r5, r3
    a4d4:	2afe      	cmp	r2, #254	; 0xfe
    a4d6:	dc94      	bgt.n	a402 <__aeabi_fmul+0xd2>
    a4d8:	2401      	movs	r4, #1
    a4da:	01a8      	lsls	r0, r5, #6
    a4dc:	0a40      	lsrs	r0, r0, #9
    a4de:	b2d2      	uxtb	r2, r2
    a4e0:	400c      	ands	r4, r1
    a4e2:	e76f      	b.n	a3c4 <__aeabi_fmul+0x94>
    a4e4:	2080      	movs	r0, #128	; 0x80
    a4e6:	03c0      	lsls	r0, r0, #15
    a4e8:	4207      	tst	r7, r0
    a4ea:	d007      	beq.n	a4fc <__aeabi_fmul+0x1cc>
    a4ec:	4205      	tst	r5, r0
    a4ee:	d105      	bne.n	a4fc <__aeabi_fmul+0x1cc>
    a4f0:	4328      	orrs	r0, r5
    a4f2:	0240      	lsls	r0, r0, #9
    a4f4:	0a40      	lsrs	r0, r0, #9
    a4f6:	4644      	mov	r4, r8
    a4f8:	22ff      	movs	r2, #255	; 0xff
    a4fa:	e763      	b.n	a3c4 <__aeabi_fmul+0x94>
    a4fc:	4338      	orrs	r0, r7
    a4fe:	0240      	lsls	r0, r0, #9
    a500:	0a40      	lsrs	r0, r0, #9
    a502:	22ff      	movs	r2, #255	; 0xff
    a504:	e75e      	b.n	a3c4 <__aeabi_fmul+0x94>
    a506:	2401      	movs	r4, #1
    a508:	1aa3      	subs	r3, r4, r2
    a50a:	2b1b      	cmp	r3, #27
    a50c:	dd05      	ble.n	a51a <__aeabi_fmul+0x1ea>
    a50e:	400c      	ands	r4, r1
    a510:	2200      	movs	r2, #0
    a512:	2000      	movs	r0, #0
    a514:	e756      	b.n	a3c4 <__aeabi_fmul+0x94>
    a516:	465e      	mov	r6, fp
    a518:	e7cb      	b.n	a4b2 <__aeabi_fmul+0x182>
    a51a:	002a      	movs	r2, r5
    a51c:	2020      	movs	r0, #32
    a51e:	40da      	lsrs	r2, r3
    a520:	1ac3      	subs	r3, r0, r3
    a522:	409d      	lsls	r5, r3
    a524:	002b      	movs	r3, r5
    a526:	1e5d      	subs	r5, r3, #1
    a528:	41ab      	sbcs	r3, r5
    a52a:	4313      	orrs	r3, r2
    a52c:	075a      	lsls	r2, r3, #29
    a52e:	d004      	beq.n	a53a <__aeabi_fmul+0x20a>
    a530:	220f      	movs	r2, #15
    a532:	401a      	ands	r2, r3
    a534:	2a04      	cmp	r2, #4
    a536:	d000      	beq.n	a53a <__aeabi_fmul+0x20a>
    a538:	3304      	adds	r3, #4
    a53a:	015a      	lsls	r2, r3, #5
    a53c:	d504      	bpl.n	a548 <__aeabi_fmul+0x218>
    a53e:	2401      	movs	r4, #1
    a540:	2201      	movs	r2, #1
    a542:	400c      	ands	r4, r1
    a544:	2000      	movs	r0, #0
    a546:	e73d      	b.n	a3c4 <__aeabi_fmul+0x94>
    a548:	2401      	movs	r4, #1
    a54a:	019b      	lsls	r3, r3, #6
    a54c:	0a58      	lsrs	r0, r3, #9
    a54e:	400c      	ands	r4, r1
    a550:	2200      	movs	r2, #0
    a552:	e737      	b.n	a3c4 <__aeabi_fmul+0x94>
    a554:	2080      	movs	r0, #128	; 0x80
    a556:	2401      	movs	r4, #1
    a558:	03c0      	lsls	r0, r0, #15
    a55a:	4328      	orrs	r0, r5
    a55c:	0240      	lsls	r0, r0, #9
    a55e:	0a40      	lsrs	r0, r0, #9
    a560:	400c      	ands	r4, r1
    a562:	22ff      	movs	r2, #255	; 0xff
    a564:	e72e      	b.n	a3c4 <__aeabi_fmul+0x94>
    a566:	46c0      	nop			; (mov r8, r8)
    a568:	00012810 	.word	0x00012810
    a56c:	f7ffffff 	.word	0xf7ffffff

0000a570 <__aeabi_fsub>:
    a570:	b5f0      	push	{r4, r5, r6, r7, lr}
    a572:	464f      	mov	r7, r9
    a574:	46d6      	mov	lr, sl
    a576:	4646      	mov	r6, r8
    a578:	0044      	lsls	r4, r0, #1
    a57a:	b5c0      	push	{r6, r7, lr}
    a57c:	0fc2      	lsrs	r2, r0, #31
    a57e:	0247      	lsls	r7, r0, #9
    a580:	0248      	lsls	r0, r1, #9
    a582:	0a40      	lsrs	r0, r0, #9
    a584:	4684      	mov	ip, r0
    a586:	4666      	mov	r6, ip
    a588:	0a7b      	lsrs	r3, r7, #9
    a58a:	0048      	lsls	r0, r1, #1
    a58c:	0fc9      	lsrs	r1, r1, #31
    a58e:	469a      	mov	sl, r3
    a590:	0e24      	lsrs	r4, r4, #24
    a592:	0015      	movs	r5, r2
    a594:	00db      	lsls	r3, r3, #3
    a596:	0e00      	lsrs	r0, r0, #24
    a598:	4689      	mov	r9, r1
    a59a:	00f6      	lsls	r6, r6, #3
    a59c:	28ff      	cmp	r0, #255	; 0xff
    a59e:	d100      	bne.n	a5a2 <__aeabi_fsub+0x32>
    a5a0:	e08f      	b.n	a6c2 <__aeabi_fsub+0x152>
    a5a2:	2101      	movs	r1, #1
    a5a4:	464f      	mov	r7, r9
    a5a6:	404f      	eors	r7, r1
    a5a8:	0039      	movs	r1, r7
    a5aa:	4291      	cmp	r1, r2
    a5ac:	d066      	beq.n	a67c <__aeabi_fsub+0x10c>
    a5ae:	1a22      	subs	r2, r4, r0
    a5b0:	2a00      	cmp	r2, #0
    a5b2:	dc00      	bgt.n	a5b6 <__aeabi_fsub+0x46>
    a5b4:	e09d      	b.n	a6f2 <__aeabi_fsub+0x182>
    a5b6:	2800      	cmp	r0, #0
    a5b8:	d13d      	bne.n	a636 <__aeabi_fsub+0xc6>
    a5ba:	2e00      	cmp	r6, #0
    a5bc:	d100      	bne.n	a5c0 <__aeabi_fsub+0x50>
    a5be:	e08b      	b.n	a6d8 <__aeabi_fsub+0x168>
    a5c0:	1e51      	subs	r1, r2, #1
    a5c2:	2900      	cmp	r1, #0
    a5c4:	d000      	beq.n	a5c8 <__aeabi_fsub+0x58>
    a5c6:	e0b5      	b.n	a734 <__aeabi_fsub+0x1c4>
    a5c8:	2401      	movs	r4, #1
    a5ca:	1b9b      	subs	r3, r3, r6
    a5cc:	015a      	lsls	r2, r3, #5
    a5ce:	d544      	bpl.n	a65a <__aeabi_fsub+0xea>
    a5d0:	019b      	lsls	r3, r3, #6
    a5d2:	099f      	lsrs	r7, r3, #6
    a5d4:	0038      	movs	r0, r7
    a5d6:	f002 f8b9 	bl	c74c <__clzsi2>
    a5da:	3805      	subs	r0, #5
    a5dc:	4087      	lsls	r7, r0
    a5de:	4284      	cmp	r4, r0
    a5e0:	dd00      	ble.n	a5e4 <__aeabi_fsub+0x74>
    a5e2:	e096      	b.n	a712 <__aeabi_fsub+0x1a2>
    a5e4:	1b04      	subs	r4, r0, r4
    a5e6:	003a      	movs	r2, r7
    a5e8:	2020      	movs	r0, #32
    a5ea:	3401      	adds	r4, #1
    a5ec:	40e2      	lsrs	r2, r4
    a5ee:	1b04      	subs	r4, r0, r4
    a5f0:	40a7      	lsls	r7, r4
    a5f2:	003b      	movs	r3, r7
    a5f4:	1e5f      	subs	r7, r3, #1
    a5f6:	41bb      	sbcs	r3, r7
    a5f8:	2400      	movs	r4, #0
    a5fa:	4313      	orrs	r3, r2
    a5fc:	075a      	lsls	r2, r3, #29
    a5fe:	d004      	beq.n	a60a <__aeabi_fsub+0x9a>
    a600:	220f      	movs	r2, #15
    a602:	401a      	ands	r2, r3
    a604:	2a04      	cmp	r2, #4
    a606:	d000      	beq.n	a60a <__aeabi_fsub+0x9a>
    a608:	3304      	adds	r3, #4
    a60a:	015a      	lsls	r2, r3, #5
    a60c:	d527      	bpl.n	a65e <__aeabi_fsub+0xee>
    a60e:	3401      	adds	r4, #1
    a610:	2cff      	cmp	r4, #255	; 0xff
    a612:	d100      	bne.n	a616 <__aeabi_fsub+0xa6>
    a614:	e079      	b.n	a70a <__aeabi_fsub+0x19a>
    a616:	2201      	movs	r2, #1
    a618:	019b      	lsls	r3, r3, #6
    a61a:	0a5b      	lsrs	r3, r3, #9
    a61c:	b2e4      	uxtb	r4, r4
    a61e:	402a      	ands	r2, r5
    a620:	025b      	lsls	r3, r3, #9
    a622:	05e4      	lsls	r4, r4, #23
    a624:	0a58      	lsrs	r0, r3, #9
    a626:	07d2      	lsls	r2, r2, #31
    a628:	4320      	orrs	r0, r4
    a62a:	4310      	orrs	r0, r2
    a62c:	bc1c      	pop	{r2, r3, r4}
    a62e:	4690      	mov	r8, r2
    a630:	4699      	mov	r9, r3
    a632:	46a2      	mov	sl, r4
    a634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a636:	2cff      	cmp	r4, #255	; 0xff
    a638:	d0e0      	beq.n	a5fc <__aeabi_fsub+0x8c>
    a63a:	2180      	movs	r1, #128	; 0x80
    a63c:	04c9      	lsls	r1, r1, #19
    a63e:	430e      	orrs	r6, r1
    a640:	2a1b      	cmp	r2, #27
    a642:	dc7b      	bgt.n	a73c <__aeabi_fsub+0x1cc>
    a644:	0031      	movs	r1, r6
    a646:	2020      	movs	r0, #32
    a648:	40d1      	lsrs	r1, r2
    a64a:	1a82      	subs	r2, r0, r2
    a64c:	4096      	lsls	r6, r2
    a64e:	1e72      	subs	r2, r6, #1
    a650:	4196      	sbcs	r6, r2
    a652:	430e      	orrs	r6, r1
    a654:	1b9b      	subs	r3, r3, r6
    a656:	015a      	lsls	r2, r3, #5
    a658:	d4ba      	bmi.n	a5d0 <__aeabi_fsub+0x60>
    a65a:	075a      	lsls	r2, r3, #29
    a65c:	d1d0      	bne.n	a600 <__aeabi_fsub+0x90>
    a65e:	2201      	movs	r2, #1
    a660:	08df      	lsrs	r7, r3, #3
    a662:	402a      	ands	r2, r5
    a664:	2cff      	cmp	r4, #255	; 0xff
    a666:	d133      	bne.n	a6d0 <__aeabi_fsub+0x160>
    a668:	2f00      	cmp	r7, #0
    a66a:	d100      	bne.n	a66e <__aeabi_fsub+0xfe>
    a66c:	e0a8      	b.n	a7c0 <__aeabi_fsub+0x250>
    a66e:	2380      	movs	r3, #128	; 0x80
    a670:	03db      	lsls	r3, r3, #15
    a672:	433b      	orrs	r3, r7
    a674:	025b      	lsls	r3, r3, #9
    a676:	0a5b      	lsrs	r3, r3, #9
    a678:	24ff      	movs	r4, #255	; 0xff
    a67a:	e7d1      	b.n	a620 <__aeabi_fsub+0xb0>
    a67c:	1a21      	subs	r1, r4, r0
    a67e:	2900      	cmp	r1, #0
    a680:	dd4c      	ble.n	a71c <__aeabi_fsub+0x1ac>
    a682:	2800      	cmp	r0, #0
    a684:	d02a      	beq.n	a6dc <__aeabi_fsub+0x16c>
    a686:	2cff      	cmp	r4, #255	; 0xff
    a688:	d0b8      	beq.n	a5fc <__aeabi_fsub+0x8c>
    a68a:	2080      	movs	r0, #128	; 0x80
    a68c:	04c0      	lsls	r0, r0, #19
    a68e:	4306      	orrs	r6, r0
    a690:	291b      	cmp	r1, #27
    a692:	dd00      	ble.n	a696 <__aeabi_fsub+0x126>
    a694:	e0af      	b.n	a7f6 <__aeabi_fsub+0x286>
    a696:	0030      	movs	r0, r6
    a698:	2720      	movs	r7, #32
    a69a:	40c8      	lsrs	r0, r1
    a69c:	1a79      	subs	r1, r7, r1
    a69e:	408e      	lsls	r6, r1
    a6a0:	1e71      	subs	r1, r6, #1
    a6a2:	418e      	sbcs	r6, r1
    a6a4:	4306      	orrs	r6, r0
    a6a6:	199b      	adds	r3, r3, r6
    a6a8:	0159      	lsls	r1, r3, #5
    a6aa:	d5d6      	bpl.n	a65a <__aeabi_fsub+0xea>
    a6ac:	3401      	adds	r4, #1
    a6ae:	2cff      	cmp	r4, #255	; 0xff
    a6b0:	d100      	bne.n	a6b4 <__aeabi_fsub+0x144>
    a6b2:	e085      	b.n	a7c0 <__aeabi_fsub+0x250>
    a6b4:	2201      	movs	r2, #1
    a6b6:	497a      	ldr	r1, [pc, #488]	; (a8a0 <__aeabi_fsub+0x330>)
    a6b8:	401a      	ands	r2, r3
    a6ba:	085b      	lsrs	r3, r3, #1
    a6bc:	400b      	ands	r3, r1
    a6be:	4313      	orrs	r3, r2
    a6c0:	e79c      	b.n	a5fc <__aeabi_fsub+0x8c>
    a6c2:	2e00      	cmp	r6, #0
    a6c4:	d000      	beq.n	a6c8 <__aeabi_fsub+0x158>
    a6c6:	e770      	b.n	a5aa <__aeabi_fsub+0x3a>
    a6c8:	e76b      	b.n	a5a2 <__aeabi_fsub+0x32>
    a6ca:	1e3b      	subs	r3, r7, #0
    a6cc:	d1c5      	bne.n	a65a <__aeabi_fsub+0xea>
    a6ce:	2200      	movs	r2, #0
    a6d0:	027b      	lsls	r3, r7, #9
    a6d2:	0a5b      	lsrs	r3, r3, #9
    a6d4:	b2e4      	uxtb	r4, r4
    a6d6:	e7a3      	b.n	a620 <__aeabi_fsub+0xb0>
    a6d8:	0014      	movs	r4, r2
    a6da:	e78f      	b.n	a5fc <__aeabi_fsub+0x8c>
    a6dc:	2e00      	cmp	r6, #0
    a6de:	d04d      	beq.n	a77c <__aeabi_fsub+0x20c>
    a6e0:	1e48      	subs	r0, r1, #1
    a6e2:	2800      	cmp	r0, #0
    a6e4:	d157      	bne.n	a796 <__aeabi_fsub+0x226>
    a6e6:	199b      	adds	r3, r3, r6
    a6e8:	2401      	movs	r4, #1
    a6ea:	015a      	lsls	r2, r3, #5
    a6ec:	d5b5      	bpl.n	a65a <__aeabi_fsub+0xea>
    a6ee:	2402      	movs	r4, #2
    a6f0:	e7e0      	b.n	a6b4 <__aeabi_fsub+0x144>
    a6f2:	2a00      	cmp	r2, #0
    a6f4:	d125      	bne.n	a742 <__aeabi_fsub+0x1d2>
    a6f6:	1c62      	adds	r2, r4, #1
    a6f8:	b2d2      	uxtb	r2, r2
    a6fa:	2a01      	cmp	r2, #1
    a6fc:	dd72      	ble.n	a7e4 <__aeabi_fsub+0x274>
    a6fe:	1b9f      	subs	r7, r3, r6
    a700:	017a      	lsls	r2, r7, #5
    a702:	d535      	bpl.n	a770 <__aeabi_fsub+0x200>
    a704:	1af7      	subs	r7, r6, r3
    a706:	000d      	movs	r5, r1
    a708:	e764      	b.n	a5d4 <__aeabi_fsub+0x64>
    a70a:	2201      	movs	r2, #1
    a70c:	2300      	movs	r3, #0
    a70e:	402a      	ands	r2, r5
    a710:	e786      	b.n	a620 <__aeabi_fsub+0xb0>
    a712:	003b      	movs	r3, r7
    a714:	4a63      	ldr	r2, [pc, #396]	; (a8a4 <__aeabi_fsub+0x334>)
    a716:	1a24      	subs	r4, r4, r0
    a718:	4013      	ands	r3, r2
    a71a:	e76f      	b.n	a5fc <__aeabi_fsub+0x8c>
    a71c:	2900      	cmp	r1, #0
    a71e:	d16c      	bne.n	a7fa <__aeabi_fsub+0x28a>
    a720:	1c61      	adds	r1, r4, #1
    a722:	b2c8      	uxtb	r0, r1
    a724:	2801      	cmp	r0, #1
    a726:	dd4e      	ble.n	a7c6 <__aeabi_fsub+0x256>
    a728:	29ff      	cmp	r1, #255	; 0xff
    a72a:	d049      	beq.n	a7c0 <__aeabi_fsub+0x250>
    a72c:	199b      	adds	r3, r3, r6
    a72e:	085b      	lsrs	r3, r3, #1
    a730:	000c      	movs	r4, r1
    a732:	e763      	b.n	a5fc <__aeabi_fsub+0x8c>
    a734:	2aff      	cmp	r2, #255	; 0xff
    a736:	d041      	beq.n	a7bc <__aeabi_fsub+0x24c>
    a738:	000a      	movs	r2, r1
    a73a:	e781      	b.n	a640 <__aeabi_fsub+0xd0>
    a73c:	2601      	movs	r6, #1
    a73e:	1b9b      	subs	r3, r3, r6
    a740:	e789      	b.n	a656 <__aeabi_fsub+0xe6>
    a742:	2c00      	cmp	r4, #0
    a744:	d01c      	beq.n	a780 <__aeabi_fsub+0x210>
    a746:	28ff      	cmp	r0, #255	; 0xff
    a748:	d021      	beq.n	a78e <__aeabi_fsub+0x21e>
    a74a:	2480      	movs	r4, #128	; 0x80
    a74c:	04e4      	lsls	r4, r4, #19
    a74e:	4252      	negs	r2, r2
    a750:	4323      	orrs	r3, r4
    a752:	2a1b      	cmp	r2, #27
    a754:	dd00      	ble.n	a758 <__aeabi_fsub+0x1e8>
    a756:	e096      	b.n	a886 <__aeabi_fsub+0x316>
    a758:	001c      	movs	r4, r3
    a75a:	2520      	movs	r5, #32
    a75c:	40d4      	lsrs	r4, r2
    a75e:	1aaa      	subs	r2, r5, r2
    a760:	4093      	lsls	r3, r2
    a762:	1e5a      	subs	r2, r3, #1
    a764:	4193      	sbcs	r3, r2
    a766:	4323      	orrs	r3, r4
    a768:	1af3      	subs	r3, r6, r3
    a76a:	0004      	movs	r4, r0
    a76c:	000d      	movs	r5, r1
    a76e:	e72d      	b.n	a5cc <__aeabi_fsub+0x5c>
    a770:	2f00      	cmp	r7, #0
    a772:	d000      	beq.n	a776 <__aeabi_fsub+0x206>
    a774:	e72e      	b.n	a5d4 <__aeabi_fsub+0x64>
    a776:	2200      	movs	r2, #0
    a778:	2400      	movs	r4, #0
    a77a:	e7a9      	b.n	a6d0 <__aeabi_fsub+0x160>
    a77c:	000c      	movs	r4, r1
    a77e:	e73d      	b.n	a5fc <__aeabi_fsub+0x8c>
    a780:	2b00      	cmp	r3, #0
    a782:	d058      	beq.n	a836 <__aeabi_fsub+0x2c6>
    a784:	43d2      	mvns	r2, r2
    a786:	2a00      	cmp	r2, #0
    a788:	d0ee      	beq.n	a768 <__aeabi_fsub+0x1f8>
    a78a:	28ff      	cmp	r0, #255	; 0xff
    a78c:	d1e1      	bne.n	a752 <__aeabi_fsub+0x1e2>
    a78e:	0033      	movs	r3, r6
    a790:	24ff      	movs	r4, #255	; 0xff
    a792:	000d      	movs	r5, r1
    a794:	e732      	b.n	a5fc <__aeabi_fsub+0x8c>
    a796:	29ff      	cmp	r1, #255	; 0xff
    a798:	d010      	beq.n	a7bc <__aeabi_fsub+0x24c>
    a79a:	0001      	movs	r1, r0
    a79c:	e778      	b.n	a690 <__aeabi_fsub+0x120>
    a79e:	2b00      	cmp	r3, #0
    a7a0:	d06e      	beq.n	a880 <__aeabi_fsub+0x310>
    a7a2:	24ff      	movs	r4, #255	; 0xff
    a7a4:	2e00      	cmp	r6, #0
    a7a6:	d100      	bne.n	a7aa <__aeabi_fsub+0x23a>
    a7a8:	e728      	b.n	a5fc <__aeabi_fsub+0x8c>
    a7aa:	2280      	movs	r2, #128	; 0x80
    a7ac:	4651      	mov	r1, sl
    a7ae:	03d2      	lsls	r2, r2, #15
    a7b0:	4211      	tst	r1, r2
    a7b2:	d003      	beq.n	a7bc <__aeabi_fsub+0x24c>
    a7b4:	4661      	mov	r1, ip
    a7b6:	4211      	tst	r1, r2
    a7b8:	d100      	bne.n	a7bc <__aeabi_fsub+0x24c>
    a7ba:	0033      	movs	r3, r6
    a7bc:	24ff      	movs	r4, #255	; 0xff
    a7be:	e71d      	b.n	a5fc <__aeabi_fsub+0x8c>
    a7c0:	24ff      	movs	r4, #255	; 0xff
    a7c2:	2300      	movs	r3, #0
    a7c4:	e72c      	b.n	a620 <__aeabi_fsub+0xb0>
    a7c6:	2c00      	cmp	r4, #0
    a7c8:	d1e9      	bne.n	a79e <__aeabi_fsub+0x22e>
    a7ca:	2b00      	cmp	r3, #0
    a7cc:	d063      	beq.n	a896 <__aeabi_fsub+0x326>
    a7ce:	2e00      	cmp	r6, #0
    a7d0:	d100      	bne.n	a7d4 <__aeabi_fsub+0x264>
    a7d2:	e713      	b.n	a5fc <__aeabi_fsub+0x8c>
    a7d4:	199b      	adds	r3, r3, r6
    a7d6:	015a      	lsls	r2, r3, #5
    a7d8:	d400      	bmi.n	a7dc <__aeabi_fsub+0x26c>
    a7da:	e73e      	b.n	a65a <__aeabi_fsub+0xea>
    a7dc:	4a31      	ldr	r2, [pc, #196]	; (a8a4 <__aeabi_fsub+0x334>)
    a7de:	000c      	movs	r4, r1
    a7e0:	4013      	ands	r3, r2
    a7e2:	e70b      	b.n	a5fc <__aeabi_fsub+0x8c>
    a7e4:	2c00      	cmp	r4, #0
    a7e6:	d11e      	bne.n	a826 <__aeabi_fsub+0x2b6>
    a7e8:	2b00      	cmp	r3, #0
    a7ea:	d12f      	bne.n	a84c <__aeabi_fsub+0x2dc>
    a7ec:	2e00      	cmp	r6, #0
    a7ee:	d04f      	beq.n	a890 <__aeabi_fsub+0x320>
    a7f0:	0033      	movs	r3, r6
    a7f2:	000d      	movs	r5, r1
    a7f4:	e702      	b.n	a5fc <__aeabi_fsub+0x8c>
    a7f6:	2601      	movs	r6, #1
    a7f8:	e755      	b.n	a6a6 <__aeabi_fsub+0x136>
    a7fa:	2c00      	cmp	r4, #0
    a7fc:	d11f      	bne.n	a83e <__aeabi_fsub+0x2ce>
    a7fe:	2b00      	cmp	r3, #0
    a800:	d043      	beq.n	a88a <__aeabi_fsub+0x31a>
    a802:	43c9      	mvns	r1, r1
    a804:	2900      	cmp	r1, #0
    a806:	d00b      	beq.n	a820 <__aeabi_fsub+0x2b0>
    a808:	28ff      	cmp	r0, #255	; 0xff
    a80a:	d039      	beq.n	a880 <__aeabi_fsub+0x310>
    a80c:	291b      	cmp	r1, #27
    a80e:	dc44      	bgt.n	a89a <__aeabi_fsub+0x32a>
    a810:	001c      	movs	r4, r3
    a812:	2720      	movs	r7, #32
    a814:	40cc      	lsrs	r4, r1
    a816:	1a79      	subs	r1, r7, r1
    a818:	408b      	lsls	r3, r1
    a81a:	1e59      	subs	r1, r3, #1
    a81c:	418b      	sbcs	r3, r1
    a81e:	4323      	orrs	r3, r4
    a820:	199b      	adds	r3, r3, r6
    a822:	0004      	movs	r4, r0
    a824:	e740      	b.n	a6a8 <__aeabi_fsub+0x138>
    a826:	2b00      	cmp	r3, #0
    a828:	d11a      	bne.n	a860 <__aeabi_fsub+0x2f0>
    a82a:	2e00      	cmp	r6, #0
    a82c:	d124      	bne.n	a878 <__aeabi_fsub+0x308>
    a82e:	2780      	movs	r7, #128	; 0x80
    a830:	2200      	movs	r2, #0
    a832:	03ff      	lsls	r7, r7, #15
    a834:	e71b      	b.n	a66e <__aeabi_fsub+0xfe>
    a836:	0033      	movs	r3, r6
    a838:	0004      	movs	r4, r0
    a83a:	000d      	movs	r5, r1
    a83c:	e6de      	b.n	a5fc <__aeabi_fsub+0x8c>
    a83e:	28ff      	cmp	r0, #255	; 0xff
    a840:	d01e      	beq.n	a880 <__aeabi_fsub+0x310>
    a842:	2480      	movs	r4, #128	; 0x80
    a844:	04e4      	lsls	r4, r4, #19
    a846:	4249      	negs	r1, r1
    a848:	4323      	orrs	r3, r4
    a84a:	e7df      	b.n	a80c <__aeabi_fsub+0x29c>
    a84c:	2e00      	cmp	r6, #0
    a84e:	d100      	bne.n	a852 <__aeabi_fsub+0x2e2>
    a850:	e6d4      	b.n	a5fc <__aeabi_fsub+0x8c>
    a852:	1b9f      	subs	r7, r3, r6
    a854:	017a      	lsls	r2, r7, #5
    a856:	d400      	bmi.n	a85a <__aeabi_fsub+0x2ea>
    a858:	e737      	b.n	a6ca <__aeabi_fsub+0x15a>
    a85a:	1af3      	subs	r3, r6, r3
    a85c:	000d      	movs	r5, r1
    a85e:	e6cd      	b.n	a5fc <__aeabi_fsub+0x8c>
    a860:	24ff      	movs	r4, #255	; 0xff
    a862:	2e00      	cmp	r6, #0
    a864:	d100      	bne.n	a868 <__aeabi_fsub+0x2f8>
    a866:	e6c9      	b.n	a5fc <__aeabi_fsub+0x8c>
    a868:	2280      	movs	r2, #128	; 0x80
    a86a:	4650      	mov	r0, sl
    a86c:	03d2      	lsls	r2, r2, #15
    a86e:	4210      	tst	r0, r2
    a870:	d0a4      	beq.n	a7bc <__aeabi_fsub+0x24c>
    a872:	4660      	mov	r0, ip
    a874:	4210      	tst	r0, r2
    a876:	d1a1      	bne.n	a7bc <__aeabi_fsub+0x24c>
    a878:	0033      	movs	r3, r6
    a87a:	000d      	movs	r5, r1
    a87c:	24ff      	movs	r4, #255	; 0xff
    a87e:	e6bd      	b.n	a5fc <__aeabi_fsub+0x8c>
    a880:	0033      	movs	r3, r6
    a882:	24ff      	movs	r4, #255	; 0xff
    a884:	e6ba      	b.n	a5fc <__aeabi_fsub+0x8c>
    a886:	2301      	movs	r3, #1
    a888:	e76e      	b.n	a768 <__aeabi_fsub+0x1f8>
    a88a:	0033      	movs	r3, r6
    a88c:	0004      	movs	r4, r0
    a88e:	e6b5      	b.n	a5fc <__aeabi_fsub+0x8c>
    a890:	2700      	movs	r7, #0
    a892:	2200      	movs	r2, #0
    a894:	e71c      	b.n	a6d0 <__aeabi_fsub+0x160>
    a896:	0033      	movs	r3, r6
    a898:	e6b0      	b.n	a5fc <__aeabi_fsub+0x8c>
    a89a:	2301      	movs	r3, #1
    a89c:	e7c0      	b.n	a820 <__aeabi_fsub+0x2b0>
    a89e:	46c0      	nop			; (mov r8, r8)
    a8a0:	7dffffff 	.word	0x7dffffff
    a8a4:	fbffffff 	.word	0xfbffffff

0000a8a8 <__aeabi_fcmpun>:
    a8a8:	0242      	lsls	r2, r0, #9
    a8aa:	024b      	lsls	r3, r1, #9
    a8ac:	0040      	lsls	r0, r0, #1
    a8ae:	0049      	lsls	r1, r1, #1
    a8b0:	0a52      	lsrs	r2, r2, #9
    a8b2:	0e00      	lsrs	r0, r0, #24
    a8b4:	0a5b      	lsrs	r3, r3, #9
    a8b6:	0e09      	lsrs	r1, r1, #24
    a8b8:	28ff      	cmp	r0, #255	; 0xff
    a8ba:	d003      	beq.n	a8c4 <__aeabi_fcmpun+0x1c>
    a8bc:	2000      	movs	r0, #0
    a8be:	29ff      	cmp	r1, #255	; 0xff
    a8c0:	d006      	beq.n	a8d0 <__aeabi_fcmpun+0x28>
    a8c2:	4770      	bx	lr
    a8c4:	38fe      	subs	r0, #254	; 0xfe
    a8c6:	2a00      	cmp	r2, #0
    a8c8:	d1fb      	bne.n	a8c2 <__aeabi_fcmpun+0x1a>
    a8ca:	2000      	movs	r0, #0
    a8cc:	29ff      	cmp	r1, #255	; 0xff
    a8ce:	d1f8      	bne.n	a8c2 <__aeabi_fcmpun+0x1a>
    a8d0:	0018      	movs	r0, r3
    a8d2:	1e43      	subs	r3, r0, #1
    a8d4:	4198      	sbcs	r0, r3
    a8d6:	e7f4      	b.n	a8c2 <__aeabi_fcmpun+0x1a>

0000a8d8 <__aeabi_f2iz>:
    a8d8:	0241      	lsls	r1, r0, #9
    a8da:	0043      	lsls	r3, r0, #1
    a8dc:	0fc2      	lsrs	r2, r0, #31
    a8de:	0a49      	lsrs	r1, r1, #9
    a8e0:	0e1b      	lsrs	r3, r3, #24
    a8e2:	2000      	movs	r0, #0
    a8e4:	2b7e      	cmp	r3, #126	; 0x7e
    a8e6:	dd0d      	ble.n	a904 <__aeabi_f2iz+0x2c>
    a8e8:	2b9d      	cmp	r3, #157	; 0x9d
    a8ea:	dc0c      	bgt.n	a906 <__aeabi_f2iz+0x2e>
    a8ec:	2080      	movs	r0, #128	; 0x80
    a8ee:	0400      	lsls	r0, r0, #16
    a8f0:	4301      	orrs	r1, r0
    a8f2:	2b95      	cmp	r3, #149	; 0x95
    a8f4:	dc0a      	bgt.n	a90c <__aeabi_f2iz+0x34>
    a8f6:	2096      	movs	r0, #150	; 0x96
    a8f8:	1ac3      	subs	r3, r0, r3
    a8fa:	40d9      	lsrs	r1, r3
    a8fc:	4248      	negs	r0, r1
    a8fe:	2a00      	cmp	r2, #0
    a900:	d100      	bne.n	a904 <__aeabi_f2iz+0x2c>
    a902:	0008      	movs	r0, r1
    a904:	4770      	bx	lr
    a906:	4b03      	ldr	r3, [pc, #12]	; (a914 <__aeabi_f2iz+0x3c>)
    a908:	18d0      	adds	r0, r2, r3
    a90a:	e7fb      	b.n	a904 <__aeabi_f2iz+0x2c>
    a90c:	3b96      	subs	r3, #150	; 0x96
    a90e:	4099      	lsls	r1, r3
    a910:	e7f4      	b.n	a8fc <__aeabi_f2iz+0x24>
    a912:	46c0      	nop			; (mov r8, r8)
    a914:	7fffffff 	.word	0x7fffffff

0000a918 <__aeabi_i2f>:
    a918:	b570      	push	{r4, r5, r6, lr}
    a91a:	2800      	cmp	r0, #0
    a91c:	d030      	beq.n	a980 <__aeabi_i2f+0x68>
    a91e:	17c3      	asrs	r3, r0, #31
    a920:	18c4      	adds	r4, r0, r3
    a922:	405c      	eors	r4, r3
    a924:	0fc5      	lsrs	r5, r0, #31
    a926:	0020      	movs	r0, r4
    a928:	f001 ff10 	bl	c74c <__clzsi2>
    a92c:	239e      	movs	r3, #158	; 0x9e
    a92e:	1a1b      	subs	r3, r3, r0
    a930:	2b96      	cmp	r3, #150	; 0x96
    a932:	dc0d      	bgt.n	a950 <__aeabi_i2f+0x38>
    a934:	2296      	movs	r2, #150	; 0x96
    a936:	1ad2      	subs	r2, r2, r3
    a938:	4094      	lsls	r4, r2
    a93a:	002a      	movs	r2, r5
    a93c:	0264      	lsls	r4, r4, #9
    a93e:	0a64      	lsrs	r4, r4, #9
    a940:	b2db      	uxtb	r3, r3
    a942:	0264      	lsls	r4, r4, #9
    a944:	05db      	lsls	r3, r3, #23
    a946:	0a60      	lsrs	r0, r4, #9
    a948:	07d2      	lsls	r2, r2, #31
    a94a:	4318      	orrs	r0, r3
    a94c:	4310      	orrs	r0, r2
    a94e:	bd70      	pop	{r4, r5, r6, pc}
    a950:	2b99      	cmp	r3, #153	; 0x99
    a952:	dc19      	bgt.n	a988 <__aeabi_i2f+0x70>
    a954:	2299      	movs	r2, #153	; 0x99
    a956:	1ad2      	subs	r2, r2, r3
    a958:	2a00      	cmp	r2, #0
    a95a:	dd29      	ble.n	a9b0 <__aeabi_i2f+0x98>
    a95c:	4094      	lsls	r4, r2
    a95e:	0022      	movs	r2, r4
    a960:	4c14      	ldr	r4, [pc, #80]	; (a9b4 <__aeabi_i2f+0x9c>)
    a962:	4014      	ands	r4, r2
    a964:	0751      	lsls	r1, r2, #29
    a966:	d004      	beq.n	a972 <__aeabi_i2f+0x5a>
    a968:	210f      	movs	r1, #15
    a96a:	400a      	ands	r2, r1
    a96c:	2a04      	cmp	r2, #4
    a96e:	d000      	beq.n	a972 <__aeabi_i2f+0x5a>
    a970:	3404      	adds	r4, #4
    a972:	0162      	lsls	r2, r4, #5
    a974:	d413      	bmi.n	a99e <__aeabi_i2f+0x86>
    a976:	01a4      	lsls	r4, r4, #6
    a978:	0a64      	lsrs	r4, r4, #9
    a97a:	b2db      	uxtb	r3, r3
    a97c:	002a      	movs	r2, r5
    a97e:	e7e0      	b.n	a942 <__aeabi_i2f+0x2a>
    a980:	2200      	movs	r2, #0
    a982:	2300      	movs	r3, #0
    a984:	2400      	movs	r4, #0
    a986:	e7dc      	b.n	a942 <__aeabi_i2f+0x2a>
    a988:	2205      	movs	r2, #5
    a98a:	0021      	movs	r1, r4
    a98c:	1a12      	subs	r2, r2, r0
    a98e:	40d1      	lsrs	r1, r2
    a990:	22b9      	movs	r2, #185	; 0xb9
    a992:	1ad2      	subs	r2, r2, r3
    a994:	4094      	lsls	r4, r2
    a996:	1e62      	subs	r2, r4, #1
    a998:	4194      	sbcs	r4, r2
    a99a:	430c      	orrs	r4, r1
    a99c:	e7da      	b.n	a954 <__aeabi_i2f+0x3c>
    a99e:	4b05      	ldr	r3, [pc, #20]	; (a9b4 <__aeabi_i2f+0x9c>)
    a9a0:	002a      	movs	r2, r5
    a9a2:	401c      	ands	r4, r3
    a9a4:	239f      	movs	r3, #159	; 0x9f
    a9a6:	01a4      	lsls	r4, r4, #6
    a9a8:	1a1b      	subs	r3, r3, r0
    a9aa:	0a64      	lsrs	r4, r4, #9
    a9ac:	b2db      	uxtb	r3, r3
    a9ae:	e7c8      	b.n	a942 <__aeabi_i2f+0x2a>
    a9b0:	0022      	movs	r2, r4
    a9b2:	e7d5      	b.n	a960 <__aeabi_i2f+0x48>
    a9b4:	fbffffff 	.word	0xfbffffff

0000a9b8 <__aeabi_ui2f>:
    a9b8:	b510      	push	{r4, lr}
    a9ba:	1e04      	subs	r4, r0, #0
    a9bc:	d027      	beq.n	aa0e <__aeabi_ui2f+0x56>
    a9be:	f001 fec5 	bl	c74c <__clzsi2>
    a9c2:	239e      	movs	r3, #158	; 0x9e
    a9c4:	1a1b      	subs	r3, r3, r0
    a9c6:	2b96      	cmp	r3, #150	; 0x96
    a9c8:	dc0a      	bgt.n	a9e0 <__aeabi_ui2f+0x28>
    a9ca:	2296      	movs	r2, #150	; 0x96
    a9cc:	1ad2      	subs	r2, r2, r3
    a9ce:	4094      	lsls	r4, r2
    a9d0:	0264      	lsls	r4, r4, #9
    a9d2:	0a64      	lsrs	r4, r4, #9
    a9d4:	b2db      	uxtb	r3, r3
    a9d6:	0264      	lsls	r4, r4, #9
    a9d8:	05db      	lsls	r3, r3, #23
    a9da:	0a60      	lsrs	r0, r4, #9
    a9dc:	4318      	orrs	r0, r3
    a9de:	bd10      	pop	{r4, pc}
    a9e0:	2b99      	cmp	r3, #153	; 0x99
    a9e2:	dc17      	bgt.n	aa14 <__aeabi_ui2f+0x5c>
    a9e4:	2299      	movs	r2, #153	; 0x99
    a9e6:	1ad2      	subs	r2, r2, r3
    a9e8:	2a00      	cmp	r2, #0
    a9ea:	dd27      	ble.n	aa3c <__aeabi_ui2f+0x84>
    a9ec:	4094      	lsls	r4, r2
    a9ee:	0022      	movs	r2, r4
    a9f0:	4c13      	ldr	r4, [pc, #76]	; (aa40 <__aeabi_ui2f+0x88>)
    a9f2:	4014      	ands	r4, r2
    a9f4:	0751      	lsls	r1, r2, #29
    a9f6:	d004      	beq.n	aa02 <__aeabi_ui2f+0x4a>
    a9f8:	210f      	movs	r1, #15
    a9fa:	400a      	ands	r2, r1
    a9fc:	2a04      	cmp	r2, #4
    a9fe:	d000      	beq.n	aa02 <__aeabi_ui2f+0x4a>
    aa00:	3404      	adds	r4, #4
    aa02:	0162      	lsls	r2, r4, #5
    aa04:	d412      	bmi.n	aa2c <__aeabi_ui2f+0x74>
    aa06:	01a4      	lsls	r4, r4, #6
    aa08:	0a64      	lsrs	r4, r4, #9
    aa0a:	b2db      	uxtb	r3, r3
    aa0c:	e7e3      	b.n	a9d6 <__aeabi_ui2f+0x1e>
    aa0e:	2300      	movs	r3, #0
    aa10:	2400      	movs	r4, #0
    aa12:	e7e0      	b.n	a9d6 <__aeabi_ui2f+0x1e>
    aa14:	22b9      	movs	r2, #185	; 0xb9
    aa16:	0021      	movs	r1, r4
    aa18:	1ad2      	subs	r2, r2, r3
    aa1a:	4091      	lsls	r1, r2
    aa1c:	000a      	movs	r2, r1
    aa1e:	1e51      	subs	r1, r2, #1
    aa20:	418a      	sbcs	r2, r1
    aa22:	2105      	movs	r1, #5
    aa24:	1a09      	subs	r1, r1, r0
    aa26:	40cc      	lsrs	r4, r1
    aa28:	4314      	orrs	r4, r2
    aa2a:	e7db      	b.n	a9e4 <__aeabi_ui2f+0x2c>
    aa2c:	4b04      	ldr	r3, [pc, #16]	; (aa40 <__aeabi_ui2f+0x88>)
    aa2e:	401c      	ands	r4, r3
    aa30:	239f      	movs	r3, #159	; 0x9f
    aa32:	01a4      	lsls	r4, r4, #6
    aa34:	1a1b      	subs	r3, r3, r0
    aa36:	0a64      	lsrs	r4, r4, #9
    aa38:	b2db      	uxtb	r3, r3
    aa3a:	e7cc      	b.n	a9d6 <__aeabi_ui2f+0x1e>
    aa3c:	0022      	movs	r2, r4
    aa3e:	e7d7      	b.n	a9f0 <__aeabi_ui2f+0x38>
    aa40:	fbffffff 	.word	0xfbffffff

0000aa44 <__aeabi_dadd>:
    aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa46:	4645      	mov	r5, r8
    aa48:	46de      	mov	lr, fp
    aa4a:	4657      	mov	r7, sl
    aa4c:	464e      	mov	r6, r9
    aa4e:	030c      	lsls	r4, r1, #12
    aa50:	b5e0      	push	{r5, r6, r7, lr}
    aa52:	004e      	lsls	r6, r1, #1
    aa54:	0fc9      	lsrs	r1, r1, #31
    aa56:	4688      	mov	r8, r1
    aa58:	000d      	movs	r5, r1
    aa5a:	0a61      	lsrs	r1, r4, #9
    aa5c:	0f44      	lsrs	r4, r0, #29
    aa5e:	430c      	orrs	r4, r1
    aa60:	00c7      	lsls	r7, r0, #3
    aa62:	0319      	lsls	r1, r3, #12
    aa64:	0058      	lsls	r0, r3, #1
    aa66:	0fdb      	lsrs	r3, r3, #31
    aa68:	469b      	mov	fp, r3
    aa6a:	0a4b      	lsrs	r3, r1, #9
    aa6c:	0f51      	lsrs	r1, r2, #29
    aa6e:	430b      	orrs	r3, r1
    aa70:	0d76      	lsrs	r6, r6, #21
    aa72:	0d40      	lsrs	r0, r0, #21
    aa74:	0019      	movs	r1, r3
    aa76:	00d2      	lsls	r2, r2, #3
    aa78:	45d8      	cmp	r8, fp
    aa7a:	d100      	bne.n	aa7e <__aeabi_dadd+0x3a>
    aa7c:	e0ae      	b.n	abdc <__aeabi_dadd+0x198>
    aa7e:	1a35      	subs	r5, r6, r0
    aa80:	2d00      	cmp	r5, #0
    aa82:	dc00      	bgt.n	aa86 <__aeabi_dadd+0x42>
    aa84:	e0f6      	b.n	ac74 <__aeabi_dadd+0x230>
    aa86:	2800      	cmp	r0, #0
    aa88:	d10f      	bne.n	aaaa <__aeabi_dadd+0x66>
    aa8a:	4313      	orrs	r3, r2
    aa8c:	d100      	bne.n	aa90 <__aeabi_dadd+0x4c>
    aa8e:	e0db      	b.n	ac48 <__aeabi_dadd+0x204>
    aa90:	1e6b      	subs	r3, r5, #1
    aa92:	2b00      	cmp	r3, #0
    aa94:	d000      	beq.n	aa98 <__aeabi_dadd+0x54>
    aa96:	e137      	b.n	ad08 <__aeabi_dadd+0x2c4>
    aa98:	1aba      	subs	r2, r7, r2
    aa9a:	4297      	cmp	r7, r2
    aa9c:	41bf      	sbcs	r7, r7
    aa9e:	1a64      	subs	r4, r4, r1
    aaa0:	427f      	negs	r7, r7
    aaa2:	1be4      	subs	r4, r4, r7
    aaa4:	2601      	movs	r6, #1
    aaa6:	0017      	movs	r7, r2
    aaa8:	e024      	b.n	aaf4 <__aeabi_dadd+0xb0>
    aaaa:	4bc6      	ldr	r3, [pc, #792]	; (adc4 <__aeabi_dadd+0x380>)
    aaac:	429e      	cmp	r6, r3
    aaae:	d04d      	beq.n	ab4c <__aeabi_dadd+0x108>
    aab0:	2380      	movs	r3, #128	; 0x80
    aab2:	041b      	lsls	r3, r3, #16
    aab4:	4319      	orrs	r1, r3
    aab6:	2d38      	cmp	r5, #56	; 0x38
    aab8:	dd00      	ble.n	aabc <__aeabi_dadd+0x78>
    aaba:	e107      	b.n	accc <__aeabi_dadd+0x288>
    aabc:	2d1f      	cmp	r5, #31
    aabe:	dd00      	ble.n	aac2 <__aeabi_dadd+0x7e>
    aac0:	e138      	b.n	ad34 <__aeabi_dadd+0x2f0>
    aac2:	2020      	movs	r0, #32
    aac4:	1b43      	subs	r3, r0, r5
    aac6:	469a      	mov	sl, r3
    aac8:	000b      	movs	r3, r1
    aaca:	4650      	mov	r0, sl
    aacc:	4083      	lsls	r3, r0
    aace:	4699      	mov	r9, r3
    aad0:	0013      	movs	r3, r2
    aad2:	4648      	mov	r0, r9
    aad4:	40eb      	lsrs	r3, r5
    aad6:	4318      	orrs	r0, r3
    aad8:	0003      	movs	r3, r0
    aada:	4650      	mov	r0, sl
    aadc:	4082      	lsls	r2, r0
    aade:	1e50      	subs	r0, r2, #1
    aae0:	4182      	sbcs	r2, r0
    aae2:	40e9      	lsrs	r1, r5
    aae4:	431a      	orrs	r2, r3
    aae6:	1aba      	subs	r2, r7, r2
    aae8:	1a61      	subs	r1, r4, r1
    aaea:	4297      	cmp	r7, r2
    aaec:	41a4      	sbcs	r4, r4
    aaee:	0017      	movs	r7, r2
    aaf0:	4264      	negs	r4, r4
    aaf2:	1b0c      	subs	r4, r1, r4
    aaf4:	0223      	lsls	r3, r4, #8
    aaf6:	d562      	bpl.n	abbe <__aeabi_dadd+0x17a>
    aaf8:	0264      	lsls	r4, r4, #9
    aafa:	0a65      	lsrs	r5, r4, #9
    aafc:	2d00      	cmp	r5, #0
    aafe:	d100      	bne.n	ab02 <__aeabi_dadd+0xbe>
    ab00:	e0df      	b.n	acc2 <__aeabi_dadd+0x27e>
    ab02:	0028      	movs	r0, r5
    ab04:	f001 fe22 	bl	c74c <__clzsi2>
    ab08:	0003      	movs	r3, r0
    ab0a:	3b08      	subs	r3, #8
    ab0c:	2b1f      	cmp	r3, #31
    ab0e:	dd00      	ble.n	ab12 <__aeabi_dadd+0xce>
    ab10:	e0d2      	b.n	acb8 <__aeabi_dadd+0x274>
    ab12:	2220      	movs	r2, #32
    ab14:	003c      	movs	r4, r7
    ab16:	1ad2      	subs	r2, r2, r3
    ab18:	409d      	lsls	r5, r3
    ab1a:	40d4      	lsrs	r4, r2
    ab1c:	409f      	lsls	r7, r3
    ab1e:	4325      	orrs	r5, r4
    ab20:	429e      	cmp	r6, r3
    ab22:	dd00      	ble.n	ab26 <__aeabi_dadd+0xe2>
    ab24:	e0c4      	b.n	acb0 <__aeabi_dadd+0x26c>
    ab26:	1b9e      	subs	r6, r3, r6
    ab28:	1c73      	adds	r3, r6, #1
    ab2a:	2b1f      	cmp	r3, #31
    ab2c:	dd00      	ble.n	ab30 <__aeabi_dadd+0xec>
    ab2e:	e0f1      	b.n	ad14 <__aeabi_dadd+0x2d0>
    ab30:	2220      	movs	r2, #32
    ab32:	0038      	movs	r0, r7
    ab34:	0029      	movs	r1, r5
    ab36:	1ad2      	subs	r2, r2, r3
    ab38:	40d8      	lsrs	r0, r3
    ab3a:	4091      	lsls	r1, r2
    ab3c:	4097      	lsls	r7, r2
    ab3e:	002c      	movs	r4, r5
    ab40:	4301      	orrs	r1, r0
    ab42:	1e78      	subs	r0, r7, #1
    ab44:	4187      	sbcs	r7, r0
    ab46:	40dc      	lsrs	r4, r3
    ab48:	2600      	movs	r6, #0
    ab4a:	430f      	orrs	r7, r1
    ab4c:	077b      	lsls	r3, r7, #29
    ab4e:	d009      	beq.n	ab64 <__aeabi_dadd+0x120>
    ab50:	230f      	movs	r3, #15
    ab52:	403b      	ands	r3, r7
    ab54:	2b04      	cmp	r3, #4
    ab56:	d005      	beq.n	ab64 <__aeabi_dadd+0x120>
    ab58:	1d3b      	adds	r3, r7, #4
    ab5a:	42bb      	cmp	r3, r7
    ab5c:	41bf      	sbcs	r7, r7
    ab5e:	427f      	negs	r7, r7
    ab60:	19e4      	adds	r4, r4, r7
    ab62:	001f      	movs	r7, r3
    ab64:	0223      	lsls	r3, r4, #8
    ab66:	d52c      	bpl.n	abc2 <__aeabi_dadd+0x17e>
    ab68:	4b96      	ldr	r3, [pc, #600]	; (adc4 <__aeabi_dadd+0x380>)
    ab6a:	3601      	adds	r6, #1
    ab6c:	429e      	cmp	r6, r3
    ab6e:	d100      	bne.n	ab72 <__aeabi_dadd+0x12e>
    ab70:	e09a      	b.n	aca8 <__aeabi_dadd+0x264>
    ab72:	4645      	mov	r5, r8
    ab74:	4b94      	ldr	r3, [pc, #592]	; (adc8 <__aeabi_dadd+0x384>)
    ab76:	08ff      	lsrs	r7, r7, #3
    ab78:	401c      	ands	r4, r3
    ab7a:	0760      	lsls	r0, r4, #29
    ab7c:	0576      	lsls	r6, r6, #21
    ab7e:	0264      	lsls	r4, r4, #9
    ab80:	4307      	orrs	r7, r0
    ab82:	0b24      	lsrs	r4, r4, #12
    ab84:	0d76      	lsrs	r6, r6, #21
    ab86:	2100      	movs	r1, #0
    ab88:	0324      	lsls	r4, r4, #12
    ab8a:	0b23      	lsrs	r3, r4, #12
    ab8c:	0d0c      	lsrs	r4, r1, #20
    ab8e:	4a8f      	ldr	r2, [pc, #572]	; (adcc <__aeabi_dadd+0x388>)
    ab90:	0524      	lsls	r4, r4, #20
    ab92:	431c      	orrs	r4, r3
    ab94:	4014      	ands	r4, r2
    ab96:	0533      	lsls	r3, r6, #20
    ab98:	4323      	orrs	r3, r4
    ab9a:	005b      	lsls	r3, r3, #1
    ab9c:	07ed      	lsls	r5, r5, #31
    ab9e:	085b      	lsrs	r3, r3, #1
    aba0:	432b      	orrs	r3, r5
    aba2:	0038      	movs	r0, r7
    aba4:	0019      	movs	r1, r3
    aba6:	bc3c      	pop	{r2, r3, r4, r5}
    aba8:	4690      	mov	r8, r2
    abaa:	4699      	mov	r9, r3
    abac:	46a2      	mov	sl, r4
    abae:	46ab      	mov	fp, r5
    abb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abb2:	4664      	mov	r4, ip
    abb4:	4304      	orrs	r4, r0
    abb6:	d100      	bne.n	abba <__aeabi_dadd+0x176>
    abb8:	e211      	b.n	afde <__aeabi_dadd+0x59a>
    abba:	0004      	movs	r4, r0
    abbc:	4667      	mov	r7, ip
    abbe:	077b      	lsls	r3, r7, #29
    abc0:	d1c6      	bne.n	ab50 <__aeabi_dadd+0x10c>
    abc2:	4645      	mov	r5, r8
    abc4:	0760      	lsls	r0, r4, #29
    abc6:	08ff      	lsrs	r7, r7, #3
    abc8:	4307      	orrs	r7, r0
    abca:	08e4      	lsrs	r4, r4, #3
    abcc:	4b7d      	ldr	r3, [pc, #500]	; (adc4 <__aeabi_dadd+0x380>)
    abce:	429e      	cmp	r6, r3
    abd0:	d030      	beq.n	ac34 <__aeabi_dadd+0x1f0>
    abd2:	0324      	lsls	r4, r4, #12
    abd4:	0576      	lsls	r6, r6, #21
    abd6:	0b24      	lsrs	r4, r4, #12
    abd8:	0d76      	lsrs	r6, r6, #21
    abda:	e7d4      	b.n	ab86 <__aeabi_dadd+0x142>
    abdc:	1a33      	subs	r3, r6, r0
    abde:	469a      	mov	sl, r3
    abe0:	2b00      	cmp	r3, #0
    abe2:	dd78      	ble.n	acd6 <__aeabi_dadd+0x292>
    abe4:	2800      	cmp	r0, #0
    abe6:	d031      	beq.n	ac4c <__aeabi_dadd+0x208>
    abe8:	4876      	ldr	r0, [pc, #472]	; (adc4 <__aeabi_dadd+0x380>)
    abea:	4286      	cmp	r6, r0
    abec:	d0ae      	beq.n	ab4c <__aeabi_dadd+0x108>
    abee:	2080      	movs	r0, #128	; 0x80
    abf0:	0400      	lsls	r0, r0, #16
    abf2:	4301      	orrs	r1, r0
    abf4:	4653      	mov	r3, sl
    abf6:	2b38      	cmp	r3, #56	; 0x38
    abf8:	dc00      	bgt.n	abfc <__aeabi_dadd+0x1b8>
    abfa:	e0e9      	b.n	add0 <__aeabi_dadd+0x38c>
    abfc:	430a      	orrs	r2, r1
    abfe:	1e51      	subs	r1, r2, #1
    ac00:	418a      	sbcs	r2, r1
    ac02:	2100      	movs	r1, #0
    ac04:	19d2      	adds	r2, r2, r7
    ac06:	42ba      	cmp	r2, r7
    ac08:	41bf      	sbcs	r7, r7
    ac0a:	1909      	adds	r1, r1, r4
    ac0c:	427c      	negs	r4, r7
    ac0e:	0017      	movs	r7, r2
    ac10:	190c      	adds	r4, r1, r4
    ac12:	0223      	lsls	r3, r4, #8
    ac14:	d5d3      	bpl.n	abbe <__aeabi_dadd+0x17a>
    ac16:	4b6b      	ldr	r3, [pc, #428]	; (adc4 <__aeabi_dadd+0x380>)
    ac18:	3601      	adds	r6, #1
    ac1a:	429e      	cmp	r6, r3
    ac1c:	d100      	bne.n	ac20 <__aeabi_dadd+0x1dc>
    ac1e:	e13a      	b.n	ae96 <__aeabi_dadd+0x452>
    ac20:	2001      	movs	r0, #1
    ac22:	4b69      	ldr	r3, [pc, #420]	; (adc8 <__aeabi_dadd+0x384>)
    ac24:	401c      	ands	r4, r3
    ac26:	087b      	lsrs	r3, r7, #1
    ac28:	4007      	ands	r7, r0
    ac2a:	431f      	orrs	r7, r3
    ac2c:	07e0      	lsls	r0, r4, #31
    ac2e:	4307      	orrs	r7, r0
    ac30:	0864      	lsrs	r4, r4, #1
    ac32:	e78b      	b.n	ab4c <__aeabi_dadd+0x108>
    ac34:	0023      	movs	r3, r4
    ac36:	433b      	orrs	r3, r7
    ac38:	d100      	bne.n	ac3c <__aeabi_dadd+0x1f8>
    ac3a:	e1cb      	b.n	afd4 <__aeabi_dadd+0x590>
    ac3c:	2280      	movs	r2, #128	; 0x80
    ac3e:	0312      	lsls	r2, r2, #12
    ac40:	4314      	orrs	r4, r2
    ac42:	0324      	lsls	r4, r4, #12
    ac44:	0b24      	lsrs	r4, r4, #12
    ac46:	e79e      	b.n	ab86 <__aeabi_dadd+0x142>
    ac48:	002e      	movs	r6, r5
    ac4a:	e77f      	b.n	ab4c <__aeabi_dadd+0x108>
    ac4c:	0008      	movs	r0, r1
    ac4e:	4310      	orrs	r0, r2
    ac50:	d100      	bne.n	ac54 <__aeabi_dadd+0x210>
    ac52:	e0b4      	b.n	adbe <__aeabi_dadd+0x37a>
    ac54:	1e58      	subs	r0, r3, #1
    ac56:	2800      	cmp	r0, #0
    ac58:	d000      	beq.n	ac5c <__aeabi_dadd+0x218>
    ac5a:	e0de      	b.n	ae1a <__aeabi_dadd+0x3d6>
    ac5c:	18ba      	adds	r2, r7, r2
    ac5e:	42ba      	cmp	r2, r7
    ac60:	419b      	sbcs	r3, r3
    ac62:	1864      	adds	r4, r4, r1
    ac64:	425b      	negs	r3, r3
    ac66:	18e4      	adds	r4, r4, r3
    ac68:	0017      	movs	r7, r2
    ac6a:	2601      	movs	r6, #1
    ac6c:	0223      	lsls	r3, r4, #8
    ac6e:	d5a6      	bpl.n	abbe <__aeabi_dadd+0x17a>
    ac70:	2602      	movs	r6, #2
    ac72:	e7d5      	b.n	ac20 <__aeabi_dadd+0x1dc>
    ac74:	2d00      	cmp	r5, #0
    ac76:	d16e      	bne.n	ad56 <__aeabi_dadd+0x312>
    ac78:	1c70      	adds	r0, r6, #1
    ac7a:	0540      	lsls	r0, r0, #21
    ac7c:	0d40      	lsrs	r0, r0, #21
    ac7e:	2801      	cmp	r0, #1
    ac80:	dc00      	bgt.n	ac84 <__aeabi_dadd+0x240>
    ac82:	e0f9      	b.n	ae78 <__aeabi_dadd+0x434>
    ac84:	1ab8      	subs	r0, r7, r2
    ac86:	4684      	mov	ip, r0
    ac88:	4287      	cmp	r7, r0
    ac8a:	4180      	sbcs	r0, r0
    ac8c:	1ae5      	subs	r5, r4, r3
    ac8e:	4240      	negs	r0, r0
    ac90:	1a2d      	subs	r5, r5, r0
    ac92:	0228      	lsls	r0, r5, #8
    ac94:	d400      	bmi.n	ac98 <__aeabi_dadd+0x254>
    ac96:	e089      	b.n	adac <__aeabi_dadd+0x368>
    ac98:	1bd7      	subs	r7, r2, r7
    ac9a:	42ba      	cmp	r2, r7
    ac9c:	4192      	sbcs	r2, r2
    ac9e:	1b1c      	subs	r4, r3, r4
    aca0:	4252      	negs	r2, r2
    aca2:	1aa5      	subs	r5, r4, r2
    aca4:	46d8      	mov	r8, fp
    aca6:	e729      	b.n	aafc <__aeabi_dadd+0xb8>
    aca8:	4645      	mov	r5, r8
    acaa:	2400      	movs	r4, #0
    acac:	2700      	movs	r7, #0
    acae:	e76a      	b.n	ab86 <__aeabi_dadd+0x142>
    acb0:	4c45      	ldr	r4, [pc, #276]	; (adc8 <__aeabi_dadd+0x384>)
    acb2:	1af6      	subs	r6, r6, r3
    acb4:	402c      	ands	r4, r5
    acb6:	e749      	b.n	ab4c <__aeabi_dadd+0x108>
    acb8:	003d      	movs	r5, r7
    acba:	3828      	subs	r0, #40	; 0x28
    acbc:	4085      	lsls	r5, r0
    acbe:	2700      	movs	r7, #0
    acc0:	e72e      	b.n	ab20 <__aeabi_dadd+0xdc>
    acc2:	0038      	movs	r0, r7
    acc4:	f001 fd42 	bl	c74c <__clzsi2>
    acc8:	3020      	adds	r0, #32
    acca:	e71d      	b.n	ab08 <__aeabi_dadd+0xc4>
    accc:	430a      	orrs	r2, r1
    acce:	1e51      	subs	r1, r2, #1
    acd0:	418a      	sbcs	r2, r1
    acd2:	2100      	movs	r1, #0
    acd4:	e707      	b.n	aae6 <__aeabi_dadd+0xa2>
    acd6:	2b00      	cmp	r3, #0
    acd8:	d000      	beq.n	acdc <__aeabi_dadd+0x298>
    acda:	e0f3      	b.n	aec4 <__aeabi_dadd+0x480>
    acdc:	1c70      	adds	r0, r6, #1
    acde:	0543      	lsls	r3, r0, #21
    ace0:	0d5b      	lsrs	r3, r3, #21
    ace2:	2b01      	cmp	r3, #1
    ace4:	dc00      	bgt.n	ace8 <__aeabi_dadd+0x2a4>
    ace6:	e0ad      	b.n	ae44 <__aeabi_dadd+0x400>
    ace8:	4b36      	ldr	r3, [pc, #216]	; (adc4 <__aeabi_dadd+0x380>)
    acea:	4298      	cmp	r0, r3
    acec:	d100      	bne.n	acf0 <__aeabi_dadd+0x2ac>
    acee:	e0d1      	b.n	ae94 <__aeabi_dadd+0x450>
    acf0:	18ba      	adds	r2, r7, r2
    acf2:	42ba      	cmp	r2, r7
    acf4:	41bf      	sbcs	r7, r7
    acf6:	1864      	adds	r4, r4, r1
    acf8:	427f      	negs	r7, r7
    acfa:	19e4      	adds	r4, r4, r7
    acfc:	07e7      	lsls	r7, r4, #31
    acfe:	0852      	lsrs	r2, r2, #1
    ad00:	4317      	orrs	r7, r2
    ad02:	0864      	lsrs	r4, r4, #1
    ad04:	0006      	movs	r6, r0
    ad06:	e721      	b.n	ab4c <__aeabi_dadd+0x108>
    ad08:	482e      	ldr	r0, [pc, #184]	; (adc4 <__aeabi_dadd+0x380>)
    ad0a:	4285      	cmp	r5, r0
    ad0c:	d100      	bne.n	ad10 <__aeabi_dadd+0x2cc>
    ad0e:	e093      	b.n	ae38 <__aeabi_dadd+0x3f4>
    ad10:	001d      	movs	r5, r3
    ad12:	e6d0      	b.n	aab6 <__aeabi_dadd+0x72>
    ad14:	0029      	movs	r1, r5
    ad16:	3e1f      	subs	r6, #31
    ad18:	40f1      	lsrs	r1, r6
    ad1a:	2b20      	cmp	r3, #32
    ad1c:	d100      	bne.n	ad20 <__aeabi_dadd+0x2dc>
    ad1e:	e08d      	b.n	ae3c <__aeabi_dadd+0x3f8>
    ad20:	2240      	movs	r2, #64	; 0x40
    ad22:	1ad3      	subs	r3, r2, r3
    ad24:	409d      	lsls	r5, r3
    ad26:	432f      	orrs	r7, r5
    ad28:	1e7d      	subs	r5, r7, #1
    ad2a:	41af      	sbcs	r7, r5
    ad2c:	2400      	movs	r4, #0
    ad2e:	430f      	orrs	r7, r1
    ad30:	2600      	movs	r6, #0
    ad32:	e744      	b.n	abbe <__aeabi_dadd+0x17a>
    ad34:	002b      	movs	r3, r5
    ad36:	0008      	movs	r0, r1
    ad38:	3b20      	subs	r3, #32
    ad3a:	40d8      	lsrs	r0, r3
    ad3c:	0003      	movs	r3, r0
    ad3e:	2d20      	cmp	r5, #32
    ad40:	d100      	bne.n	ad44 <__aeabi_dadd+0x300>
    ad42:	e07d      	b.n	ae40 <__aeabi_dadd+0x3fc>
    ad44:	2040      	movs	r0, #64	; 0x40
    ad46:	1b45      	subs	r5, r0, r5
    ad48:	40a9      	lsls	r1, r5
    ad4a:	430a      	orrs	r2, r1
    ad4c:	1e51      	subs	r1, r2, #1
    ad4e:	418a      	sbcs	r2, r1
    ad50:	2100      	movs	r1, #0
    ad52:	431a      	orrs	r2, r3
    ad54:	e6c7      	b.n	aae6 <__aeabi_dadd+0xa2>
    ad56:	2e00      	cmp	r6, #0
    ad58:	d050      	beq.n	adfc <__aeabi_dadd+0x3b8>
    ad5a:	4e1a      	ldr	r6, [pc, #104]	; (adc4 <__aeabi_dadd+0x380>)
    ad5c:	42b0      	cmp	r0, r6
    ad5e:	d057      	beq.n	ae10 <__aeabi_dadd+0x3cc>
    ad60:	2680      	movs	r6, #128	; 0x80
    ad62:	426b      	negs	r3, r5
    ad64:	4699      	mov	r9, r3
    ad66:	0436      	lsls	r6, r6, #16
    ad68:	4334      	orrs	r4, r6
    ad6a:	464b      	mov	r3, r9
    ad6c:	2b38      	cmp	r3, #56	; 0x38
    ad6e:	dd00      	ble.n	ad72 <__aeabi_dadd+0x32e>
    ad70:	e0d6      	b.n	af20 <__aeabi_dadd+0x4dc>
    ad72:	2b1f      	cmp	r3, #31
    ad74:	dd00      	ble.n	ad78 <__aeabi_dadd+0x334>
    ad76:	e135      	b.n	afe4 <__aeabi_dadd+0x5a0>
    ad78:	2620      	movs	r6, #32
    ad7a:	1af5      	subs	r5, r6, r3
    ad7c:	0026      	movs	r6, r4
    ad7e:	40ae      	lsls	r6, r5
    ad80:	46b2      	mov	sl, r6
    ad82:	003e      	movs	r6, r7
    ad84:	40de      	lsrs	r6, r3
    ad86:	46ac      	mov	ip, r5
    ad88:	0035      	movs	r5, r6
    ad8a:	4656      	mov	r6, sl
    ad8c:	432e      	orrs	r6, r5
    ad8e:	4665      	mov	r5, ip
    ad90:	40af      	lsls	r7, r5
    ad92:	1e7d      	subs	r5, r7, #1
    ad94:	41af      	sbcs	r7, r5
    ad96:	40dc      	lsrs	r4, r3
    ad98:	4337      	orrs	r7, r6
    ad9a:	1bd7      	subs	r7, r2, r7
    ad9c:	42ba      	cmp	r2, r7
    ad9e:	4192      	sbcs	r2, r2
    ada0:	1b0c      	subs	r4, r1, r4
    ada2:	4252      	negs	r2, r2
    ada4:	1aa4      	subs	r4, r4, r2
    ada6:	0006      	movs	r6, r0
    ada8:	46d8      	mov	r8, fp
    adaa:	e6a3      	b.n	aaf4 <__aeabi_dadd+0xb0>
    adac:	4664      	mov	r4, ip
    adae:	4667      	mov	r7, ip
    adb0:	432c      	orrs	r4, r5
    adb2:	d000      	beq.n	adb6 <__aeabi_dadd+0x372>
    adb4:	e6a2      	b.n	aafc <__aeabi_dadd+0xb8>
    adb6:	2500      	movs	r5, #0
    adb8:	2600      	movs	r6, #0
    adba:	2700      	movs	r7, #0
    adbc:	e706      	b.n	abcc <__aeabi_dadd+0x188>
    adbe:	001e      	movs	r6, r3
    adc0:	e6c4      	b.n	ab4c <__aeabi_dadd+0x108>
    adc2:	46c0      	nop			; (mov r8, r8)
    adc4:	000007ff 	.word	0x000007ff
    adc8:	ff7fffff 	.word	0xff7fffff
    adcc:	800fffff 	.word	0x800fffff
    add0:	2b1f      	cmp	r3, #31
    add2:	dc63      	bgt.n	ae9c <__aeabi_dadd+0x458>
    add4:	2020      	movs	r0, #32
    add6:	1ac3      	subs	r3, r0, r3
    add8:	0008      	movs	r0, r1
    adda:	4098      	lsls	r0, r3
    addc:	469c      	mov	ip, r3
    adde:	4683      	mov	fp, r0
    ade0:	4653      	mov	r3, sl
    ade2:	0010      	movs	r0, r2
    ade4:	40d8      	lsrs	r0, r3
    ade6:	0003      	movs	r3, r0
    ade8:	4658      	mov	r0, fp
    adea:	4318      	orrs	r0, r3
    adec:	4663      	mov	r3, ip
    adee:	409a      	lsls	r2, r3
    adf0:	1e53      	subs	r3, r2, #1
    adf2:	419a      	sbcs	r2, r3
    adf4:	4653      	mov	r3, sl
    adf6:	4302      	orrs	r2, r0
    adf8:	40d9      	lsrs	r1, r3
    adfa:	e703      	b.n	ac04 <__aeabi_dadd+0x1c0>
    adfc:	0026      	movs	r6, r4
    adfe:	433e      	orrs	r6, r7
    ae00:	d006      	beq.n	ae10 <__aeabi_dadd+0x3cc>
    ae02:	43eb      	mvns	r3, r5
    ae04:	4699      	mov	r9, r3
    ae06:	2b00      	cmp	r3, #0
    ae08:	d0c7      	beq.n	ad9a <__aeabi_dadd+0x356>
    ae0a:	4e94      	ldr	r6, [pc, #592]	; (b05c <__aeabi_dadd+0x618>)
    ae0c:	42b0      	cmp	r0, r6
    ae0e:	d1ac      	bne.n	ad6a <__aeabi_dadd+0x326>
    ae10:	000c      	movs	r4, r1
    ae12:	0017      	movs	r7, r2
    ae14:	0006      	movs	r6, r0
    ae16:	46d8      	mov	r8, fp
    ae18:	e698      	b.n	ab4c <__aeabi_dadd+0x108>
    ae1a:	4b90      	ldr	r3, [pc, #576]	; (b05c <__aeabi_dadd+0x618>)
    ae1c:	459a      	cmp	sl, r3
    ae1e:	d00b      	beq.n	ae38 <__aeabi_dadd+0x3f4>
    ae20:	4682      	mov	sl, r0
    ae22:	e6e7      	b.n	abf4 <__aeabi_dadd+0x1b0>
    ae24:	2800      	cmp	r0, #0
    ae26:	d000      	beq.n	ae2a <__aeabi_dadd+0x3e6>
    ae28:	e09e      	b.n	af68 <__aeabi_dadd+0x524>
    ae2a:	0018      	movs	r0, r3
    ae2c:	4310      	orrs	r0, r2
    ae2e:	d100      	bne.n	ae32 <__aeabi_dadd+0x3ee>
    ae30:	e0e9      	b.n	b006 <__aeabi_dadd+0x5c2>
    ae32:	001c      	movs	r4, r3
    ae34:	0017      	movs	r7, r2
    ae36:	46d8      	mov	r8, fp
    ae38:	4e88      	ldr	r6, [pc, #544]	; (b05c <__aeabi_dadd+0x618>)
    ae3a:	e687      	b.n	ab4c <__aeabi_dadd+0x108>
    ae3c:	2500      	movs	r5, #0
    ae3e:	e772      	b.n	ad26 <__aeabi_dadd+0x2e2>
    ae40:	2100      	movs	r1, #0
    ae42:	e782      	b.n	ad4a <__aeabi_dadd+0x306>
    ae44:	0023      	movs	r3, r4
    ae46:	433b      	orrs	r3, r7
    ae48:	2e00      	cmp	r6, #0
    ae4a:	d000      	beq.n	ae4e <__aeabi_dadd+0x40a>
    ae4c:	e0ab      	b.n	afa6 <__aeabi_dadd+0x562>
    ae4e:	2b00      	cmp	r3, #0
    ae50:	d100      	bne.n	ae54 <__aeabi_dadd+0x410>
    ae52:	e0e7      	b.n	b024 <__aeabi_dadd+0x5e0>
    ae54:	000b      	movs	r3, r1
    ae56:	4313      	orrs	r3, r2
    ae58:	d100      	bne.n	ae5c <__aeabi_dadd+0x418>
    ae5a:	e677      	b.n	ab4c <__aeabi_dadd+0x108>
    ae5c:	18ba      	adds	r2, r7, r2
    ae5e:	42ba      	cmp	r2, r7
    ae60:	41bf      	sbcs	r7, r7
    ae62:	1864      	adds	r4, r4, r1
    ae64:	427f      	negs	r7, r7
    ae66:	19e4      	adds	r4, r4, r7
    ae68:	0223      	lsls	r3, r4, #8
    ae6a:	d400      	bmi.n	ae6e <__aeabi_dadd+0x42a>
    ae6c:	e0f2      	b.n	b054 <__aeabi_dadd+0x610>
    ae6e:	4b7c      	ldr	r3, [pc, #496]	; (b060 <__aeabi_dadd+0x61c>)
    ae70:	0017      	movs	r7, r2
    ae72:	401c      	ands	r4, r3
    ae74:	0006      	movs	r6, r0
    ae76:	e669      	b.n	ab4c <__aeabi_dadd+0x108>
    ae78:	0020      	movs	r0, r4
    ae7a:	4338      	orrs	r0, r7
    ae7c:	2e00      	cmp	r6, #0
    ae7e:	d1d1      	bne.n	ae24 <__aeabi_dadd+0x3e0>
    ae80:	2800      	cmp	r0, #0
    ae82:	d15b      	bne.n	af3c <__aeabi_dadd+0x4f8>
    ae84:	001c      	movs	r4, r3
    ae86:	4314      	orrs	r4, r2
    ae88:	d100      	bne.n	ae8c <__aeabi_dadd+0x448>
    ae8a:	e0a8      	b.n	afde <__aeabi_dadd+0x59a>
    ae8c:	001c      	movs	r4, r3
    ae8e:	0017      	movs	r7, r2
    ae90:	46d8      	mov	r8, fp
    ae92:	e65b      	b.n	ab4c <__aeabi_dadd+0x108>
    ae94:	0006      	movs	r6, r0
    ae96:	2400      	movs	r4, #0
    ae98:	2700      	movs	r7, #0
    ae9a:	e697      	b.n	abcc <__aeabi_dadd+0x188>
    ae9c:	4650      	mov	r0, sl
    ae9e:	000b      	movs	r3, r1
    aea0:	3820      	subs	r0, #32
    aea2:	40c3      	lsrs	r3, r0
    aea4:	4699      	mov	r9, r3
    aea6:	4653      	mov	r3, sl
    aea8:	2b20      	cmp	r3, #32
    aeaa:	d100      	bne.n	aeae <__aeabi_dadd+0x46a>
    aeac:	e095      	b.n	afda <__aeabi_dadd+0x596>
    aeae:	2340      	movs	r3, #64	; 0x40
    aeb0:	4650      	mov	r0, sl
    aeb2:	1a1b      	subs	r3, r3, r0
    aeb4:	4099      	lsls	r1, r3
    aeb6:	430a      	orrs	r2, r1
    aeb8:	1e51      	subs	r1, r2, #1
    aeba:	418a      	sbcs	r2, r1
    aebc:	464b      	mov	r3, r9
    aebe:	2100      	movs	r1, #0
    aec0:	431a      	orrs	r2, r3
    aec2:	e69f      	b.n	ac04 <__aeabi_dadd+0x1c0>
    aec4:	2e00      	cmp	r6, #0
    aec6:	d130      	bne.n	af2a <__aeabi_dadd+0x4e6>
    aec8:	0026      	movs	r6, r4
    aeca:	433e      	orrs	r6, r7
    aecc:	d067      	beq.n	af9e <__aeabi_dadd+0x55a>
    aece:	43db      	mvns	r3, r3
    aed0:	469a      	mov	sl, r3
    aed2:	2b00      	cmp	r3, #0
    aed4:	d01c      	beq.n	af10 <__aeabi_dadd+0x4cc>
    aed6:	4e61      	ldr	r6, [pc, #388]	; (b05c <__aeabi_dadd+0x618>)
    aed8:	42b0      	cmp	r0, r6
    aeda:	d060      	beq.n	af9e <__aeabi_dadd+0x55a>
    aedc:	4653      	mov	r3, sl
    aede:	2b38      	cmp	r3, #56	; 0x38
    aee0:	dd00      	ble.n	aee4 <__aeabi_dadd+0x4a0>
    aee2:	e096      	b.n	b012 <__aeabi_dadd+0x5ce>
    aee4:	2b1f      	cmp	r3, #31
    aee6:	dd00      	ble.n	aeea <__aeabi_dadd+0x4a6>
    aee8:	e09f      	b.n	b02a <__aeabi_dadd+0x5e6>
    aeea:	2620      	movs	r6, #32
    aeec:	1af3      	subs	r3, r6, r3
    aeee:	0026      	movs	r6, r4
    aef0:	409e      	lsls	r6, r3
    aef2:	469c      	mov	ip, r3
    aef4:	46b3      	mov	fp, r6
    aef6:	4653      	mov	r3, sl
    aef8:	003e      	movs	r6, r7
    aefa:	40de      	lsrs	r6, r3
    aefc:	0033      	movs	r3, r6
    aefe:	465e      	mov	r6, fp
    af00:	431e      	orrs	r6, r3
    af02:	4663      	mov	r3, ip
    af04:	409f      	lsls	r7, r3
    af06:	1e7b      	subs	r3, r7, #1
    af08:	419f      	sbcs	r7, r3
    af0a:	4653      	mov	r3, sl
    af0c:	40dc      	lsrs	r4, r3
    af0e:	4337      	orrs	r7, r6
    af10:	18bf      	adds	r7, r7, r2
    af12:	4297      	cmp	r7, r2
    af14:	4192      	sbcs	r2, r2
    af16:	1864      	adds	r4, r4, r1
    af18:	4252      	negs	r2, r2
    af1a:	18a4      	adds	r4, r4, r2
    af1c:	0006      	movs	r6, r0
    af1e:	e678      	b.n	ac12 <__aeabi_dadd+0x1ce>
    af20:	4327      	orrs	r7, r4
    af22:	1e7c      	subs	r4, r7, #1
    af24:	41a7      	sbcs	r7, r4
    af26:	2400      	movs	r4, #0
    af28:	e737      	b.n	ad9a <__aeabi_dadd+0x356>
    af2a:	4e4c      	ldr	r6, [pc, #304]	; (b05c <__aeabi_dadd+0x618>)
    af2c:	42b0      	cmp	r0, r6
    af2e:	d036      	beq.n	af9e <__aeabi_dadd+0x55a>
    af30:	2680      	movs	r6, #128	; 0x80
    af32:	425b      	negs	r3, r3
    af34:	0436      	lsls	r6, r6, #16
    af36:	469a      	mov	sl, r3
    af38:	4334      	orrs	r4, r6
    af3a:	e7cf      	b.n	aedc <__aeabi_dadd+0x498>
    af3c:	0018      	movs	r0, r3
    af3e:	4310      	orrs	r0, r2
    af40:	d100      	bne.n	af44 <__aeabi_dadd+0x500>
    af42:	e603      	b.n	ab4c <__aeabi_dadd+0x108>
    af44:	1ab8      	subs	r0, r7, r2
    af46:	4684      	mov	ip, r0
    af48:	4567      	cmp	r7, ip
    af4a:	41ad      	sbcs	r5, r5
    af4c:	1ae0      	subs	r0, r4, r3
    af4e:	426d      	negs	r5, r5
    af50:	1b40      	subs	r0, r0, r5
    af52:	0205      	lsls	r5, r0, #8
    af54:	d400      	bmi.n	af58 <__aeabi_dadd+0x514>
    af56:	e62c      	b.n	abb2 <__aeabi_dadd+0x16e>
    af58:	1bd7      	subs	r7, r2, r7
    af5a:	42ba      	cmp	r2, r7
    af5c:	4192      	sbcs	r2, r2
    af5e:	1b1c      	subs	r4, r3, r4
    af60:	4252      	negs	r2, r2
    af62:	1aa4      	subs	r4, r4, r2
    af64:	46d8      	mov	r8, fp
    af66:	e5f1      	b.n	ab4c <__aeabi_dadd+0x108>
    af68:	0018      	movs	r0, r3
    af6a:	4310      	orrs	r0, r2
    af6c:	d100      	bne.n	af70 <__aeabi_dadd+0x52c>
    af6e:	e763      	b.n	ae38 <__aeabi_dadd+0x3f4>
    af70:	08f8      	lsrs	r0, r7, #3
    af72:	0767      	lsls	r7, r4, #29
    af74:	4307      	orrs	r7, r0
    af76:	2080      	movs	r0, #128	; 0x80
    af78:	08e4      	lsrs	r4, r4, #3
    af7a:	0300      	lsls	r0, r0, #12
    af7c:	4204      	tst	r4, r0
    af7e:	d008      	beq.n	af92 <__aeabi_dadd+0x54e>
    af80:	08dd      	lsrs	r5, r3, #3
    af82:	4205      	tst	r5, r0
    af84:	d105      	bne.n	af92 <__aeabi_dadd+0x54e>
    af86:	08d2      	lsrs	r2, r2, #3
    af88:	0759      	lsls	r1, r3, #29
    af8a:	4311      	orrs	r1, r2
    af8c:	000f      	movs	r7, r1
    af8e:	002c      	movs	r4, r5
    af90:	46d8      	mov	r8, fp
    af92:	0f7b      	lsrs	r3, r7, #29
    af94:	00e4      	lsls	r4, r4, #3
    af96:	431c      	orrs	r4, r3
    af98:	00ff      	lsls	r7, r7, #3
    af9a:	4e30      	ldr	r6, [pc, #192]	; (b05c <__aeabi_dadd+0x618>)
    af9c:	e5d6      	b.n	ab4c <__aeabi_dadd+0x108>
    af9e:	000c      	movs	r4, r1
    afa0:	0017      	movs	r7, r2
    afa2:	0006      	movs	r6, r0
    afa4:	e5d2      	b.n	ab4c <__aeabi_dadd+0x108>
    afa6:	2b00      	cmp	r3, #0
    afa8:	d038      	beq.n	b01c <__aeabi_dadd+0x5d8>
    afaa:	000b      	movs	r3, r1
    afac:	4313      	orrs	r3, r2
    afae:	d100      	bne.n	afb2 <__aeabi_dadd+0x56e>
    afb0:	e742      	b.n	ae38 <__aeabi_dadd+0x3f4>
    afb2:	08f8      	lsrs	r0, r7, #3
    afb4:	0767      	lsls	r7, r4, #29
    afb6:	4307      	orrs	r7, r0
    afb8:	2080      	movs	r0, #128	; 0x80
    afba:	08e4      	lsrs	r4, r4, #3
    afbc:	0300      	lsls	r0, r0, #12
    afbe:	4204      	tst	r4, r0
    afc0:	d0e7      	beq.n	af92 <__aeabi_dadd+0x54e>
    afc2:	08cb      	lsrs	r3, r1, #3
    afc4:	4203      	tst	r3, r0
    afc6:	d1e4      	bne.n	af92 <__aeabi_dadd+0x54e>
    afc8:	08d2      	lsrs	r2, r2, #3
    afca:	0749      	lsls	r1, r1, #29
    afcc:	4311      	orrs	r1, r2
    afce:	000f      	movs	r7, r1
    afd0:	001c      	movs	r4, r3
    afd2:	e7de      	b.n	af92 <__aeabi_dadd+0x54e>
    afd4:	2700      	movs	r7, #0
    afd6:	2400      	movs	r4, #0
    afd8:	e5d5      	b.n	ab86 <__aeabi_dadd+0x142>
    afda:	2100      	movs	r1, #0
    afdc:	e76b      	b.n	aeb6 <__aeabi_dadd+0x472>
    afde:	2500      	movs	r5, #0
    afe0:	2700      	movs	r7, #0
    afe2:	e5f3      	b.n	abcc <__aeabi_dadd+0x188>
    afe4:	464e      	mov	r6, r9
    afe6:	0025      	movs	r5, r4
    afe8:	3e20      	subs	r6, #32
    afea:	40f5      	lsrs	r5, r6
    afec:	464b      	mov	r3, r9
    afee:	002e      	movs	r6, r5
    aff0:	2b20      	cmp	r3, #32
    aff2:	d02d      	beq.n	b050 <__aeabi_dadd+0x60c>
    aff4:	2540      	movs	r5, #64	; 0x40
    aff6:	1aed      	subs	r5, r5, r3
    aff8:	40ac      	lsls	r4, r5
    affa:	4327      	orrs	r7, r4
    affc:	1e7c      	subs	r4, r7, #1
    affe:	41a7      	sbcs	r7, r4
    b000:	2400      	movs	r4, #0
    b002:	4337      	orrs	r7, r6
    b004:	e6c9      	b.n	ad9a <__aeabi_dadd+0x356>
    b006:	2480      	movs	r4, #128	; 0x80
    b008:	2500      	movs	r5, #0
    b00a:	0324      	lsls	r4, r4, #12
    b00c:	4e13      	ldr	r6, [pc, #76]	; (b05c <__aeabi_dadd+0x618>)
    b00e:	2700      	movs	r7, #0
    b010:	e5dc      	b.n	abcc <__aeabi_dadd+0x188>
    b012:	4327      	orrs	r7, r4
    b014:	1e7c      	subs	r4, r7, #1
    b016:	41a7      	sbcs	r7, r4
    b018:	2400      	movs	r4, #0
    b01a:	e779      	b.n	af10 <__aeabi_dadd+0x4cc>
    b01c:	000c      	movs	r4, r1
    b01e:	0017      	movs	r7, r2
    b020:	4e0e      	ldr	r6, [pc, #56]	; (b05c <__aeabi_dadd+0x618>)
    b022:	e593      	b.n	ab4c <__aeabi_dadd+0x108>
    b024:	000c      	movs	r4, r1
    b026:	0017      	movs	r7, r2
    b028:	e590      	b.n	ab4c <__aeabi_dadd+0x108>
    b02a:	4656      	mov	r6, sl
    b02c:	0023      	movs	r3, r4
    b02e:	3e20      	subs	r6, #32
    b030:	40f3      	lsrs	r3, r6
    b032:	4699      	mov	r9, r3
    b034:	4653      	mov	r3, sl
    b036:	2b20      	cmp	r3, #32
    b038:	d00e      	beq.n	b058 <__aeabi_dadd+0x614>
    b03a:	2340      	movs	r3, #64	; 0x40
    b03c:	4656      	mov	r6, sl
    b03e:	1b9b      	subs	r3, r3, r6
    b040:	409c      	lsls	r4, r3
    b042:	4327      	orrs	r7, r4
    b044:	1e7c      	subs	r4, r7, #1
    b046:	41a7      	sbcs	r7, r4
    b048:	464b      	mov	r3, r9
    b04a:	2400      	movs	r4, #0
    b04c:	431f      	orrs	r7, r3
    b04e:	e75f      	b.n	af10 <__aeabi_dadd+0x4cc>
    b050:	2400      	movs	r4, #0
    b052:	e7d2      	b.n	affa <__aeabi_dadd+0x5b6>
    b054:	0017      	movs	r7, r2
    b056:	e5b2      	b.n	abbe <__aeabi_dadd+0x17a>
    b058:	2400      	movs	r4, #0
    b05a:	e7f2      	b.n	b042 <__aeabi_dadd+0x5fe>
    b05c:	000007ff 	.word	0x000007ff
    b060:	ff7fffff 	.word	0xff7fffff

0000b064 <__aeabi_ddiv>:
    b064:	b5f0      	push	{r4, r5, r6, r7, lr}
    b066:	4657      	mov	r7, sl
    b068:	4645      	mov	r5, r8
    b06a:	46de      	mov	lr, fp
    b06c:	464e      	mov	r6, r9
    b06e:	b5e0      	push	{r5, r6, r7, lr}
    b070:	004c      	lsls	r4, r1, #1
    b072:	030e      	lsls	r6, r1, #12
    b074:	b087      	sub	sp, #28
    b076:	4683      	mov	fp, r0
    b078:	4692      	mov	sl, r2
    b07a:	001d      	movs	r5, r3
    b07c:	4680      	mov	r8, r0
    b07e:	0b36      	lsrs	r6, r6, #12
    b080:	0d64      	lsrs	r4, r4, #21
    b082:	0fcf      	lsrs	r7, r1, #31
    b084:	2c00      	cmp	r4, #0
    b086:	d04f      	beq.n	b128 <__aeabi_ddiv+0xc4>
    b088:	4b6f      	ldr	r3, [pc, #444]	; (b248 <__aeabi_ddiv+0x1e4>)
    b08a:	429c      	cmp	r4, r3
    b08c:	d035      	beq.n	b0fa <__aeabi_ddiv+0x96>
    b08e:	2380      	movs	r3, #128	; 0x80
    b090:	0f42      	lsrs	r2, r0, #29
    b092:	041b      	lsls	r3, r3, #16
    b094:	00f6      	lsls	r6, r6, #3
    b096:	4313      	orrs	r3, r2
    b098:	4333      	orrs	r3, r6
    b09a:	4699      	mov	r9, r3
    b09c:	00c3      	lsls	r3, r0, #3
    b09e:	4698      	mov	r8, r3
    b0a0:	4b6a      	ldr	r3, [pc, #424]	; (b24c <__aeabi_ddiv+0x1e8>)
    b0a2:	2600      	movs	r6, #0
    b0a4:	469c      	mov	ip, r3
    b0a6:	2300      	movs	r3, #0
    b0a8:	4464      	add	r4, ip
    b0aa:	9303      	str	r3, [sp, #12]
    b0ac:	032b      	lsls	r3, r5, #12
    b0ae:	0b1b      	lsrs	r3, r3, #12
    b0b0:	469b      	mov	fp, r3
    b0b2:	006b      	lsls	r3, r5, #1
    b0b4:	0fed      	lsrs	r5, r5, #31
    b0b6:	4650      	mov	r0, sl
    b0b8:	0d5b      	lsrs	r3, r3, #21
    b0ba:	9501      	str	r5, [sp, #4]
    b0bc:	d05e      	beq.n	b17c <__aeabi_ddiv+0x118>
    b0be:	4a62      	ldr	r2, [pc, #392]	; (b248 <__aeabi_ddiv+0x1e4>)
    b0c0:	4293      	cmp	r3, r2
    b0c2:	d053      	beq.n	b16c <__aeabi_ddiv+0x108>
    b0c4:	465a      	mov	r2, fp
    b0c6:	00d1      	lsls	r1, r2, #3
    b0c8:	2280      	movs	r2, #128	; 0x80
    b0ca:	0f40      	lsrs	r0, r0, #29
    b0cc:	0412      	lsls	r2, r2, #16
    b0ce:	4302      	orrs	r2, r0
    b0d0:	430a      	orrs	r2, r1
    b0d2:	4693      	mov	fp, r2
    b0d4:	4652      	mov	r2, sl
    b0d6:	00d1      	lsls	r1, r2, #3
    b0d8:	4a5c      	ldr	r2, [pc, #368]	; (b24c <__aeabi_ddiv+0x1e8>)
    b0da:	4694      	mov	ip, r2
    b0dc:	2200      	movs	r2, #0
    b0de:	4463      	add	r3, ip
    b0e0:	0038      	movs	r0, r7
    b0e2:	4068      	eors	r0, r5
    b0e4:	4684      	mov	ip, r0
    b0e6:	9002      	str	r0, [sp, #8]
    b0e8:	1ae4      	subs	r4, r4, r3
    b0ea:	4316      	orrs	r6, r2
    b0ec:	2e0f      	cmp	r6, #15
    b0ee:	d900      	bls.n	b0f2 <__aeabi_ddiv+0x8e>
    b0f0:	e0b4      	b.n	b25c <__aeabi_ddiv+0x1f8>
    b0f2:	4b57      	ldr	r3, [pc, #348]	; (b250 <__aeabi_ddiv+0x1ec>)
    b0f4:	00b6      	lsls	r6, r6, #2
    b0f6:	599b      	ldr	r3, [r3, r6]
    b0f8:	469f      	mov	pc, r3
    b0fa:	0003      	movs	r3, r0
    b0fc:	4333      	orrs	r3, r6
    b0fe:	4699      	mov	r9, r3
    b100:	d16c      	bne.n	b1dc <__aeabi_ddiv+0x178>
    b102:	2300      	movs	r3, #0
    b104:	4698      	mov	r8, r3
    b106:	3302      	adds	r3, #2
    b108:	2608      	movs	r6, #8
    b10a:	9303      	str	r3, [sp, #12]
    b10c:	e7ce      	b.n	b0ac <__aeabi_ddiv+0x48>
    b10e:	46cb      	mov	fp, r9
    b110:	4641      	mov	r1, r8
    b112:	9a03      	ldr	r2, [sp, #12]
    b114:	9701      	str	r7, [sp, #4]
    b116:	2a02      	cmp	r2, #2
    b118:	d165      	bne.n	b1e6 <__aeabi_ddiv+0x182>
    b11a:	9b01      	ldr	r3, [sp, #4]
    b11c:	4c4a      	ldr	r4, [pc, #296]	; (b248 <__aeabi_ddiv+0x1e4>)
    b11e:	469c      	mov	ip, r3
    b120:	2300      	movs	r3, #0
    b122:	2200      	movs	r2, #0
    b124:	4698      	mov	r8, r3
    b126:	e06b      	b.n	b200 <__aeabi_ddiv+0x19c>
    b128:	0003      	movs	r3, r0
    b12a:	4333      	orrs	r3, r6
    b12c:	4699      	mov	r9, r3
    b12e:	d04e      	beq.n	b1ce <__aeabi_ddiv+0x16a>
    b130:	2e00      	cmp	r6, #0
    b132:	d100      	bne.n	b136 <__aeabi_ddiv+0xd2>
    b134:	e1bc      	b.n	b4b0 <__aeabi_ddiv+0x44c>
    b136:	0030      	movs	r0, r6
    b138:	f001 fb08 	bl	c74c <__clzsi2>
    b13c:	0003      	movs	r3, r0
    b13e:	3b0b      	subs	r3, #11
    b140:	2b1c      	cmp	r3, #28
    b142:	dd00      	ble.n	b146 <__aeabi_ddiv+0xe2>
    b144:	e1ac      	b.n	b4a0 <__aeabi_ddiv+0x43c>
    b146:	221d      	movs	r2, #29
    b148:	1ad3      	subs	r3, r2, r3
    b14a:	465a      	mov	r2, fp
    b14c:	0001      	movs	r1, r0
    b14e:	40da      	lsrs	r2, r3
    b150:	3908      	subs	r1, #8
    b152:	408e      	lsls	r6, r1
    b154:	0013      	movs	r3, r2
    b156:	4333      	orrs	r3, r6
    b158:	4699      	mov	r9, r3
    b15a:	465b      	mov	r3, fp
    b15c:	408b      	lsls	r3, r1
    b15e:	4698      	mov	r8, r3
    b160:	2300      	movs	r3, #0
    b162:	4c3c      	ldr	r4, [pc, #240]	; (b254 <__aeabi_ddiv+0x1f0>)
    b164:	2600      	movs	r6, #0
    b166:	1a24      	subs	r4, r4, r0
    b168:	9303      	str	r3, [sp, #12]
    b16a:	e79f      	b.n	b0ac <__aeabi_ddiv+0x48>
    b16c:	4651      	mov	r1, sl
    b16e:	465a      	mov	r2, fp
    b170:	4311      	orrs	r1, r2
    b172:	d129      	bne.n	b1c8 <__aeabi_ddiv+0x164>
    b174:	2200      	movs	r2, #0
    b176:	4693      	mov	fp, r2
    b178:	3202      	adds	r2, #2
    b17a:	e7b1      	b.n	b0e0 <__aeabi_ddiv+0x7c>
    b17c:	4659      	mov	r1, fp
    b17e:	4301      	orrs	r1, r0
    b180:	d01e      	beq.n	b1c0 <__aeabi_ddiv+0x15c>
    b182:	465b      	mov	r3, fp
    b184:	2b00      	cmp	r3, #0
    b186:	d100      	bne.n	b18a <__aeabi_ddiv+0x126>
    b188:	e19e      	b.n	b4c8 <__aeabi_ddiv+0x464>
    b18a:	4658      	mov	r0, fp
    b18c:	f001 fade 	bl	c74c <__clzsi2>
    b190:	0003      	movs	r3, r0
    b192:	3b0b      	subs	r3, #11
    b194:	2b1c      	cmp	r3, #28
    b196:	dd00      	ble.n	b19a <__aeabi_ddiv+0x136>
    b198:	e18f      	b.n	b4ba <__aeabi_ddiv+0x456>
    b19a:	0002      	movs	r2, r0
    b19c:	4659      	mov	r1, fp
    b19e:	3a08      	subs	r2, #8
    b1a0:	4091      	lsls	r1, r2
    b1a2:	468b      	mov	fp, r1
    b1a4:	211d      	movs	r1, #29
    b1a6:	1acb      	subs	r3, r1, r3
    b1a8:	4651      	mov	r1, sl
    b1aa:	40d9      	lsrs	r1, r3
    b1ac:	000b      	movs	r3, r1
    b1ae:	4659      	mov	r1, fp
    b1b0:	430b      	orrs	r3, r1
    b1b2:	4651      	mov	r1, sl
    b1b4:	469b      	mov	fp, r3
    b1b6:	4091      	lsls	r1, r2
    b1b8:	4b26      	ldr	r3, [pc, #152]	; (b254 <__aeabi_ddiv+0x1f0>)
    b1ba:	2200      	movs	r2, #0
    b1bc:	1a1b      	subs	r3, r3, r0
    b1be:	e78f      	b.n	b0e0 <__aeabi_ddiv+0x7c>
    b1c0:	2300      	movs	r3, #0
    b1c2:	2201      	movs	r2, #1
    b1c4:	469b      	mov	fp, r3
    b1c6:	e78b      	b.n	b0e0 <__aeabi_ddiv+0x7c>
    b1c8:	4651      	mov	r1, sl
    b1ca:	2203      	movs	r2, #3
    b1cc:	e788      	b.n	b0e0 <__aeabi_ddiv+0x7c>
    b1ce:	2300      	movs	r3, #0
    b1d0:	4698      	mov	r8, r3
    b1d2:	3301      	adds	r3, #1
    b1d4:	2604      	movs	r6, #4
    b1d6:	2400      	movs	r4, #0
    b1d8:	9303      	str	r3, [sp, #12]
    b1da:	e767      	b.n	b0ac <__aeabi_ddiv+0x48>
    b1dc:	2303      	movs	r3, #3
    b1de:	46b1      	mov	r9, r6
    b1e0:	9303      	str	r3, [sp, #12]
    b1e2:	260c      	movs	r6, #12
    b1e4:	e762      	b.n	b0ac <__aeabi_ddiv+0x48>
    b1e6:	2a03      	cmp	r2, #3
    b1e8:	d100      	bne.n	b1ec <__aeabi_ddiv+0x188>
    b1ea:	e25c      	b.n	b6a6 <__aeabi_ddiv+0x642>
    b1ec:	9b01      	ldr	r3, [sp, #4]
    b1ee:	2a01      	cmp	r2, #1
    b1f0:	d000      	beq.n	b1f4 <__aeabi_ddiv+0x190>
    b1f2:	e1e4      	b.n	b5be <__aeabi_ddiv+0x55a>
    b1f4:	4013      	ands	r3, r2
    b1f6:	469c      	mov	ip, r3
    b1f8:	2300      	movs	r3, #0
    b1fa:	2400      	movs	r4, #0
    b1fc:	2200      	movs	r2, #0
    b1fe:	4698      	mov	r8, r3
    b200:	2100      	movs	r1, #0
    b202:	0312      	lsls	r2, r2, #12
    b204:	0b13      	lsrs	r3, r2, #12
    b206:	0d0a      	lsrs	r2, r1, #20
    b208:	0512      	lsls	r2, r2, #20
    b20a:	431a      	orrs	r2, r3
    b20c:	0523      	lsls	r3, r4, #20
    b20e:	4c12      	ldr	r4, [pc, #72]	; (b258 <__aeabi_ddiv+0x1f4>)
    b210:	4640      	mov	r0, r8
    b212:	4022      	ands	r2, r4
    b214:	4313      	orrs	r3, r2
    b216:	4662      	mov	r2, ip
    b218:	005b      	lsls	r3, r3, #1
    b21a:	07d2      	lsls	r2, r2, #31
    b21c:	085b      	lsrs	r3, r3, #1
    b21e:	4313      	orrs	r3, r2
    b220:	0019      	movs	r1, r3
    b222:	b007      	add	sp, #28
    b224:	bc3c      	pop	{r2, r3, r4, r5}
    b226:	4690      	mov	r8, r2
    b228:	4699      	mov	r9, r3
    b22a:	46a2      	mov	sl, r4
    b22c:	46ab      	mov	fp, r5
    b22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b230:	2300      	movs	r3, #0
    b232:	2280      	movs	r2, #128	; 0x80
    b234:	469c      	mov	ip, r3
    b236:	0312      	lsls	r2, r2, #12
    b238:	4698      	mov	r8, r3
    b23a:	4c03      	ldr	r4, [pc, #12]	; (b248 <__aeabi_ddiv+0x1e4>)
    b23c:	e7e0      	b.n	b200 <__aeabi_ddiv+0x19c>
    b23e:	2300      	movs	r3, #0
    b240:	4c01      	ldr	r4, [pc, #4]	; (b248 <__aeabi_ddiv+0x1e4>)
    b242:	2200      	movs	r2, #0
    b244:	4698      	mov	r8, r3
    b246:	e7db      	b.n	b200 <__aeabi_ddiv+0x19c>
    b248:	000007ff 	.word	0x000007ff
    b24c:	fffffc01 	.word	0xfffffc01
    b250:	00012850 	.word	0x00012850
    b254:	fffffc0d 	.word	0xfffffc0d
    b258:	800fffff 	.word	0x800fffff
    b25c:	45d9      	cmp	r9, fp
    b25e:	d900      	bls.n	b262 <__aeabi_ddiv+0x1fe>
    b260:	e139      	b.n	b4d6 <__aeabi_ddiv+0x472>
    b262:	d100      	bne.n	b266 <__aeabi_ddiv+0x202>
    b264:	e134      	b.n	b4d0 <__aeabi_ddiv+0x46c>
    b266:	2300      	movs	r3, #0
    b268:	4646      	mov	r6, r8
    b26a:	464d      	mov	r5, r9
    b26c:	469a      	mov	sl, r3
    b26e:	3c01      	subs	r4, #1
    b270:	465b      	mov	r3, fp
    b272:	0e0a      	lsrs	r2, r1, #24
    b274:	021b      	lsls	r3, r3, #8
    b276:	431a      	orrs	r2, r3
    b278:	020b      	lsls	r3, r1, #8
    b27a:	0c17      	lsrs	r7, r2, #16
    b27c:	9303      	str	r3, [sp, #12]
    b27e:	0413      	lsls	r3, r2, #16
    b280:	0c1b      	lsrs	r3, r3, #16
    b282:	0039      	movs	r1, r7
    b284:	0028      	movs	r0, r5
    b286:	4690      	mov	r8, r2
    b288:	9301      	str	r3, [sp, #4]
    b28a:	f7fe faab 	bl	97e4 <__udivsi3>
    b28e:	0002      	movs	r2, r0
    b290:	9b01      	ldr	r3, [sp, #4]
    b292:	4683      	mov	fp, r0
    b294:	435a      	muls	r2, r3
    b296:	0028      	movs	r0, r5
    b298:	0039      	movs	r1, r7
    b29a:	4691      	mov	r9, r2
    b29c:	f7fe fb28 	bl	98f0 <__aeabi_uidivmod>
    b2a0:	0c35      	lsrs	r5, r6, #16
    b2a2:	0409      	lsls	r1, r1, #16
    b2a4:	430d      	orrs	r5, r1
    b2a6:	45a9      	cmp	r9, r5
    b2a8:	d90d      	bls.n	b2c6 <__aeabi_ddiv+0x262>
    b2aa:	465b      	mov	r3, fp
    b2ac:	4445      	add	r5, r8
    b2ae:	3b01      	subs	r3, #1
    b2b0:	45a8      	cmp	r8, r5
    b2b2:	d900      	bls.n	b2b6 <__aeabi_ddiv+0x252>
    b2b4:	e13a      	b.n	b52c <__aeabi_ddiv+0x4c8>
    b2b6:	45a9      	cmp	r9, r5
    b2b8:	d800      	bhi.n	b2bc <__aeabi_ddiv+0x258>
    b2ba:	e137      	b.n	b52c <__aeabi_ddiv+0x4c8>
    b2bc:	2302      	movs	r3, #2
    b2be:	425b      	negs	r3, r3
    b2c0:	469c      	mov	ip, r3
    b2c2:	4445      	add	r5, r8
    b2c4:	44e3      	add	fp, ip
    b2c6:	464b      	mov	r3, r9
    b2c8:	1aeb      	subs	r3, r5, r3
    b2ca:	0039      	movs	r1, r7
    b2cc:	0018      	movs	r0, r3
    b2ce:	9304      	str	r3, [sp, #16]
    b2d0:	f7fe fa88 	bl	97e4 <__udivsi3>
    b2d4:	9b01      	ldr	r3, [sp, #4]
    b2d6:	0005      	movs	r5, r0
    b2d8:	4343      	muls	r3, r0
    b2da:	0039      	movs	r1, r7
    b2dc:	9804      	ldr	r0, [sp, #16]
    b2de:	4699      	mov	r9, r3
    b2e0:	f7fe fb06 	bl	98f0 <__aeabi_uidivmod>
    b2e4:	0433      	lsls	r3, r6, #16
    b2e6:	0409      	lsls	r1, r1, #16
    b2e8:	0c1b      	lsrs	r3, r3, #16
    b2ea:	430b      	orrs	r3, r1
    b2ec:	4599      	cmp	r9, r3
    b2ee:	d909      	bls.n	b304 <__aeabi_ddiv+0x2a0>
    b2f0:	4443      	add	r3, r8
    b2f2:	1e6a      	subs	r2, r5, #1
    b2f4:	4598      	cmp	r8, r3
    b2f6:	d900      	bls.n	b2fa <__aeabi_ddiv+0x296>
    b2f8:	e11a      	b.n	b530 <__aeabi_ddiv+0x4cc>
    b2fa:	4599      	cmp	r9, r3
    b2fc:	d800      	bhi.n	b300 <__aeabi_ddiv+0x29c>
    b2fe:	e117      	b.n	b530 <__aeabi_ddiv+0x4cc>
    b300:	3d02      	subs	r5, #2
    b302:	4443      	add	r3, r8
    b304:	464a      	mov	r2, r9
    b306:	1a9b      	subs	r3, r3, r2
    b308:	465a      	mov	r2, fp
    b30a:	0412      	lsls	r2, r2, #16
    b30c:	432a      	orrs	r2, r5
    b30e:	9903      	ldr	r1, [sp, #12]
    b310:	4693      	mov	fp, r2
    b312:	0c10      	lsrs	r0, r2, #16
    b314:	0c0a      	lsrs	r2, r1, #16
    b316:	4691      	mov	r9, r2
    b318:	0409      	lsls	r1, r1, #16
    b31a:	465a      	mov	r2, fp
    b31c:	0c09      	lsrs	r1, r1, #16
    b31e:	464e      	mov	r6, r9
    b320:	000d      	movs	r5, r1
    b322:	0412      	lsls	r2, r2, #16
    b324:	0c12      	lsrs	r2, r2, #16
    b326:	4345      	muls	r5, r0
    b328:	9105      	str	r1, [sp, #20]
    b32a:	4351      	muls	r1, r2
    b32c:	4372      	muls	r2, r6
    b32e:	4370      	muls	r0, r6
    b330:	1952      	adds	r2, r2, r5
    b332:	0c0e      	lsrs	r6, r1, #16
    b334:	18b2      	adds	r2, r6, r2
    b336:	4295      	cmp	r5, r2
    b338:	d903      	bls.n	b342 <__aeabi_ddiv+0x2de>
    b33a:	2580      	movs	r5, #128	; 0x80
    b33c:	026d      	lsls	r5, r5, #9
    b33e:	46ac      	mov	ip, r5
    b340:	4460      	add	r0, ip
    b342:	0c15      	lsrs	r5, r2, #16
    b344:	0409      	lsls	r1, r1, #16
    b346:	0412      	lsls	r2, r2, #16
    b348:	0c09      	lsrs	r1, r1, #16
    b34a:	1828      	adds	r0, r5, r0
    b34c:	1852      	adds	r2, r2, r1
    b34e:	4283      	cmp	r3, r0
    b350:	d200      	bcs.n	b354 <__aeabi_ddiv+0x2f0>
    b352:	e0ce      	b.n	b4f2 <__aeabi_ddiv+0x48e>
    b354:	d100      	bne.n	b358 <__aeabi_ddiv+0x2f4>
    b356:	e0c8      	b.n	b4ea <__aeabi_ddiv+0x486>
    b358:	1a1d      	subs	r5, r3, r0
    b35a:	4653      	mov	r3, sl
    b35c:	1a9e      	subs	r6, r3, r2
    b35e:	45b2      	cmp	sl, r6
    b360:	4192      	sbcs	r2, r2
    b362:	4252      	negs	r2, r2
    b364:	1aab      	subs	r3, r5, r2
    b366:	469a      	mov	sl, r3
    b368:	4598      	cmp	r8, r3
    b36a:	d100      	bne.n	b36e <__aeabi_ddiv+0x30a>
    b36c:	e117      	b.n	b59e <__aeabi_ddiv+0x53a>
    b36e:	0039      	movs	r1, r7
    b370:	0018      	movs	r0, r3
    b372:	f7fe fa37 	bl	97e4 <__udivsi3>
    b376:	9b01      	ldr	r3, [sp, #4]
    b378:	0005      	movs	r5, r0
    b37a:	4343      	muls	r3, r0
    b37c:	0039      	movs	r1, r7
    b37e:	4650      	mov	r0, sl
    b380:	9304      	str	r3, [sp, #16]
    b382:	f7fe fab5 	bl	98f0 <__aeabi_uidivmod>
    b386:	9804      	ldr	r0, [sp, #16]
    b388:	040b      	lsls	r3, r1, #16
    b38a:	0c31      	lsrs	r1, r6, #16
    b38c:	4319      	orrs	r1, r3
    b38e:	4288      	cmp	r0, r1
    b390:	d909      	bls.n	b3a6 <__aeabi_ddiv+0x342>
    b392:	4441      	add	r1, r8
    b394:	1e6b      	subs	r3, r5, #1
    b396:	4588      	cmp	r8, r1
    b398:	d900      	bls.n	b39c <__aeabi_ddiv+0x338>
    b39a:	e107      	b.n	b5ac <__aeabi_ddiv+0x548>
    b39c:	4288      	cmp	r0, r1
    b39e:	d800      	bhi.n	b3a2 <__aeabi_ddiv+0x33e>
    b3a0:	e104      	b.n	b5ac <__aeabi_ddiv+0x548>
    b3a2:	3d02      	subs	r5, #2
    b3a4:	4441      	add	r1, r8
    b3a6:	9b04      	ldr	r3, [sp, #16]
    b3a8:	1acb      	subs	r3, r1, r3
    b3aa:	0018      	movs	r0, r3
    b3ac:	0039      	movs	r1, r7
    b3ae:	9304      	str	r3, [sp, #16]
    b3b0:	f7fe fa18 	bl	97e4 <__udivsi3>
    b3b4:	9b01      	ldr	r3, [sp, #4]
    b3b6:	4682      	mov	sl, r0
    b3b8:	4343      	muls	r3, r0
    b3ba:	0039      	movs	r1, r7
    b3bc:	9804      	ldr	r0, [sp, #16]
    b3be:	9301      	str	r3, [sp, #4]
    b3c0:	f7fe fa96 	bl	98f0 <__aeabi_uidivmod>
    b3c4:	9801      	ldr	r0, [sp, #4]
    b3c6:	040b      	lsls	r3, r1, #16
    b3c8:	0431      	lsls	r1, r6, #16
    b3ca:	0c09      	lsrs	r1, r1, #16
    b3cc:	4319      	orrs	r1, r3
    b3ce:	4288      	cmp	r0, r1
    b3d0:	d90d      	bls.n	b3ee <__aeabi_ddiv+0x38a>
    b3d2:	4653      	mov	r3, sl
    b3d4:	4441      	add	r1, r8
    b3d6:	3b01      	subs	r3, #1
    b3d8:	4588      	cmp	r8, r1
    b3da:	d900      	bls.n	b3de <__aeabi_ddiv+0x37a>
    b3dc:	e0e8      	b.n	b5b0 <__aeabi_ddiv+0x54c>
    b3de:	4288      	cmp	r0, r1
    b3e0:	d800      	bhi.n	b3e4 <__aeabi_ddiv+0x380>
    b3e2:	e0e5      	b.n	b5b0 <__aeabi_ddiv+0x54c>
    b3e4:	2302      	movs	r3, #2
    b3e6:	425b      	negs	r3, r3
    b3e8:	469c      	mov	ip, r3
    b3ea:	4441      	add	r1, r8
    b3ec:	44e2      	add	sl, ip
    b3ee:	9b01      	ldr	r3, [sp, #4]
    b3f0:	042d      	lsls	r5, r5, #16
    b3f2:	1ace      	subs	r6, r1, r3
    b3f4:	4651      	mov	r1, sl
    b3f6:	4329      	orrs	r1, r5
    b3f8:	9d05      	ldr	r5, [sp, #20]
    b3fa:	464f      	mov	r7, r9
    b3fc:	002a      	movs	r2, r5
    b3fe:	040b      	lsls	r3, r1, #16
    b400:	0c08      	lsrs	r0, r1, #16
    b402:	0c1b      	lsrs	r3, r3, #16
    b404:	435a      	muls	r2, r3
    b406:	4345      	muls	r5, r0
    b408:	437b      	muls	r3, r7
    b40a:	4378      	muls	r0, r7
    b40c:	195b      	adds	r3, r3, r5
    b40e:	0c17      	lsrs	r7, r2, #16
    b410:	18fb      	adds	r3, r7, r3
    b412:	429d      	cmp	r5, r3
    b414:	d903      	bls.n	b41e <__aeabi_ddiv+0x3ba>
    b416:	2580      	movs	r5, #128	; 0x80
    b418:	026d      	lsls	r5, r5, #9
    b41a:	46ac      	mov	ip, r5
    b41c:	4460      	add	r0, ip
    b41e:	0c1d      	lsrs	r5, r3, #16
    b420:	0412      	lsls	r2, r2, #16
    b422:	041b      	lsls	r3, r3, #16
    b424:	0c12      	lsrs	r2, r2, #16
    b426:	1828      	adds	r0, r5, r0
    b428:	189b      	adds	r3, r3, r2
    b42a:	4286      	cmp	r6, r0
    b42c:	d200      	bcs.n	b430 <__aeabi_ddiv+0x3cc>
    b42e:	e093      	b.n	b558 <__aeabi_ddiv+0x4f4>
    b430:	d100      	bne.n	b434 <__aeabi_ddiv+0x3d0>
    b432:	e08e      	b.n	b552 <__aeabi_ddiv+0x4ee>
    b434:	2301      	movs	r3, #1
    b436:	4319      	orrs	r1, r3
    b438:	4ba0      	ldr	r3, [pc, #640]	; (b6bc <__aeabi_ddiv+0x658>)
    b43a:	18e3      	adds	r3, r4, r3
    b43c:	2b00      	cmp	r3, #0
    b43e:	dc00      	bgt.n	b442 <__aeabi_ddiv+0x3de>
    b440:	e099      	b.n	b576 <__aeabi_ddiv+0x512>
    b442:	074a      	lsls	r2, r1, #29
    b444:	d000      	beq.n	b448 <__aeabi_ddiv+0x3e4>
    b446:	e09e      	b.n	b586 <__aeabi_ddiv+0x522>
    b448:	465a      	mov	r2, fp
    b44a:	01d2      	lsls	r2, r2, #7
    b44c:	d506      	bpl.n	b45c <__aeabi_ddiv+0x3f8>
    b44e:	465a      	mov	r2, fp
    b450:	4b9b      	ldr	r3, [pc, #620]	; (b6c0 <__aeabi_ddiv+0x65c>)
    b452:	401a      	ands	r2, r3
    b454:	2380      	movs	r3, #128	; 0x80
    b456:	4693      	mov	fp, r2
    b458:	00db      	lsls	r3, r3, #3
    b45a:	18e3      	adds	r3, r4, r3
    b45c:	4a99      	ldr	r2, [pc, #612]	; (b6c4 <__aeabi_ddiv+0x660>)
    b45e:	4293      	cmp	r3, r2
    b460:	dd68      	ble.n	b534 <__aeabi_ddiv+0x4d0>
    b462:	2301      	movs	r3, #1
    b464:	9a02      	ldr	r2, [sp, #8]
    b466:	4c98      	ldr	r4, [pc, #608]	; (b6c8 <__aeabi_ddiv+0x664>)
    b468:	401a      	ands	r2, r3
    b46a:	2300      	movs	r3, #0
    b46c:	4694      	mov	ip, r2
    b46e:	4698      	mov	r8, r3
    b470:	2200      	movs	r2, #0
    b472:	e6c5      	b.n	b200 <__aeabi_ddiv+0x19c>
    b474:	2280      	movs	r2, #128	; 0x80
    b476:	464b      	mov	r3, r9
    b478:	0312      	lsls	r2, r2, #12
    b47a:	4213      	tst	r3, r2
    b47c:	d00a      	beq.n	b494 <__aeabi_ddiv+0x430>
    b47e:	465b      	mov	r3, fp
    b480:	4213      	tst	r3, r2
    b482:	d106      	bne.n	b492 <__aeabi_ddiv+0x42e>
    b484:	431a      	orrs	r2, r3
    b486:	0312      	lsls	r2, r2, #12
    b488:	0b12      	lsrs	r2, r2, #12
    b48a:	46ac      	mov	ip, r5
    b48c:	4688      	mov	r8, r1
    b48e:	4c8e      	ldr	r4, [pc, #568]	; (b6c8 <__aeabi_ddiv+0x664>)
    b490:	e6b6      	b.n	b200 <__aeabi_ddiv+0x19c>
    b492:	464b      	mov	r3, r9
    b494:	431a      	orrs	r2, r3
    b496:	0312      	lsls	r2, r2, #12
    b498:	0b12      	lsrs	r2, r2, #12
    b49a:	46bc      	mov	ip, r7
    b49c:	4c8a      	ldr	r4, [pc, #552]	; (b6c8 <__aeabi_ddiv+0x664>)
    b49e:	e6af      	b.n	b200 <__aeabi_ddiv+0x19c>
    b4a0:	0003      	movs	r3, r0
    b4a2:	465a      	mov	r2, fp
    b4a4:	3b28      	subs	r3, #40	; 0x28
    b4a6:	409a      	lsls	r2, r3
    b4a8:	2300      	movs	r3, #0
    b4aa:	4691      	mov	r9, r2
    b4ac:	4698      	mov	r8, r3
    b4ae:	e657      	b.n	b160 <__aeabi_ddiv+0xfc>
    b4b0:	4658      	mov	r0, fp
    b4b2:	f001 f94b 	bl	c74c <__clzsi2>
    b4b6:	3020      	adds	r0, #32
    b4b8:	e640      	b.n	b13c <__aeabi_ddiv+0xd8>
    b4ba:	0003      	movs	r3, r0
    b4bc:	4652      	mov	r2, sl
    b4be:	3b28      	subs	r3, #40	; 0x28
    b4c0:	409a      	lsls	r2, r3
    b4c2:	2100      	movs	r1, #0
    b4c4:	4693      	mov	fp, r2
    b4c6:	e677      	b.n	b1b8 <__aeabi_ddiv+0x154>
    b4c8:	f001 f940 	bl	c74c <__clzsi2>
    b4cc:	3020      	adds	r0, #32
    b4ce:	e65f      	b.n	b190 <__aeabi_ddiv+0x12c>
    b4d0:	4588      	cmp	r8, r1
    b4d2:	d200      	bcs.n	b4d6 <__aeabi_ddiv+0x472>
    b4d4:	e6c7      	b.n	b266 <__aeabi_ddiv+0x202>
    b4d6:	464b      	mov	r3, r9
    b4d8:	07de      	lsls	r6, r3, #31
    b4da:	085d      	lsrs	r5, r3, #1
    b4dc:	4643      	mov	r3, r8
    b4de:	085b      	lsrs	r3, r3, #1
    b4e0:	431e      	orrs	r6, r3
    b4e2:	4643      	mov	r3, r8
    b4e4:	07db      	lsls	r3, r3, #31
    b4e6:	469a      	mov	sl, r3
    b4e8:	e6c2      	b.n	b270 <__aeabi_ddiv+0x20c>
    b4ea:	2500      	movs	r5, #0
    b4ec:	4592      	cmp	sl, r2
    b4ee:	d300      	bcc.n	b4f2 <__aeabi_ddiv+0x48e>
    b4f0:	e733      	b.n	b35a <__aeabi_ddiv+0x2f6>
    b4f2:	9e03      	ldr	r6, [sp, #12]
    b4f4:	4659      	mov	r1, fp
    b4f6:	46b4      	mov	ip, r6
    b4f8:	44e2      	add	sl, ip
    b4fa:	45b2      	cmp	sl, r6
    b4fc:	41ad      	sbcs	r5, r5
    b4fe:	426d      	negs	r5, r5
    b500:	4445      	add	r5, r8
    b502:	18eb      	adds	r3, r5, r3
    b504:	3901      	subs	r1, #1
    b506:	4598      	cmp	r8, r3
    b508:	d207      	bcs.n	b51a <__aeabi_ddiv+0x4b6>
    b50a:	4298      	cmp	r0, r3
    b50c:	d900      	bls.n	b510 <__aeabi_ddiv+0x4ac>
    b50e:	e07f      	b.n	b610 <__aeabi_ddiv+0x5ac>
    b510:	d100      	bne.n	b514 <__aeabi_ddiv+0x4b0>
    b512:	e0bc      	b.n	b68e <__aeabi_ddiv+0x62a>
    b514:	1a1d      	subs	r5, r3, r0
    b516:	468b      	mov	fp, r1
    b518:	e71f      	b.n	b35a <__aeabi_ddiv+0x2f6>
    b51a:	4598      	cmp	r8, r3
    b51c:	d1fa      	bne.n	b514 <__aeabi_ddiv+0x4b0>
    b51e:	9d03      	ldr	r5, [sp, #12]
    b520:	4555      	cmp	r5, sl
    b522:	d9f2      	bls.n	b50a <__aeabi_ddiv+0x4a6>
    b524:	4643      	mov	r3, r8
    b526:	468b      	mov	fp, r1
    b528:	1a1d      	subs	r5, r3, r0
    b52a:	e716      	b.n	b35a <__aeabi_ddiv+0x2f6>
    b52c:	469b      	mov	fp, r3
    b52e:	e6ca      	b.n	b2c6 <__aeabi_ddiv+0x262>
    b530:	0015      	movs	r5, r2
    b532:	e6e7      	b.n	b304 <__aeabi_ddiv+0x2a0>
    b534:	465a      	mov	r2, fp
    b536:	08c9      	lsrs	r1, r1, #3
    b538:	0752      	lsls	r2, r2, #29
    b53a:	430a      	orrs	r2, r1
    b53c:	055b      	lsls	r3, r3, #21
    b53e:	4690      	mov	r8, r2
    b540:	0d5c      	lsrs	r4, r3, #21
    b542:	465a      	mov	r2, fp
    b544:	2301      	movs	r3, #1
    b546:	9902      	ldr	r1, [sp, #8]
    b548:	0252      	lsls	r2, r2, #9
    b54a:	4019      	ands	r1, r3
    b54c:	0b12      	lsrs	r2, r2, #12
    b54e:	468c      	mov	ip, r1
    b550:	e656      	b.n	b200 <__aeabi_ddiv+0x19c>
    b552:	2b00      	cmp	r3, #0
    b554:	d100      	bne.n	b558 <__aeabi_ddiv+0x4f4>
    b556:	e76f      	b.n	b438 <__aeabi_ddiv+0x3d4>
    b558:	4446      	add	r6, r8
    b55a:	1e4a      	subs	r2, r1, #1
    b55c:	45b0      	cmp	r8, r6
    b55e:	d929      	bls.n	b5b4 <__aeabi_ddiv+0x550>
    b560:	0011      	movs	r1, r2
    b562:	4286      	cmp	r6, r0
    b564:	d000      	beq.n	b568 <__aeabi_ddiv+0x504>
    b566:	e765      	b.n	b434 <__aeabi_ddiv+0x3d0>
    b568:	9a03      	ldr	r2, [sp, #12]
    b56a:	4293      	cmp	r3, r2
    b56c:	d000      	beq.n	b570 <__aeabi_ddiv+0x50c>
    b56e:	e761      	b.n	b434 <__aeabi_ddiv+0x3d0>
    b570:	e762      	b.n	b438 <__aeabi_ddiv+0x3d4>
    b572:	2101      	movs	r1, #1
    b574:	4249      	negs	r1, r1
    b576:	2001      	movs	r0, #1
    b578:	1ac2      	subs	r2, r0, r3
    b57a:	2a38      	cmp	r2, #56	; 0x38
    b57c:	dd21      	ble.n	b5c2 <__aeabi_ddiv+0x55e>
    b57e:	9b02      	ldr	r3, [sp, #8]
    b580:	4003      	ands	r3, r0
    b582:	469c      	mov	ip, r3
    b584:	e638      	b.n	b1f8 <__aeabi_ddiv+0x194>
    b586:	220f      	movs	r2, #15
    b588:	400a      	ands	r2, r1
    b58a:	2a04      	cmp	r2, #4
    b58c:	d100      	bne.n	b590 <__aeabi_ddiv+0x52c>
    b58e:	e75b      	b.n	b448 <__aeabi_ddiv+0x3e4>
    b590:	000a      	movs	r2, r1
    b592:	1d11      	adds	r1, r2, #4
    b594:	4291      	cmp	r1, r2
    b596:	4192      	sbcs	r2, r2
    b598:	4252      	negs	r2, r2
    b59a:	4493      	add	fp, r2
    b59c:	e754      	b.n	b448 <__aeabi_ddiv+0x3e4>
    b59e:	4b47      	ldr	r3, [pc, #284]	; (b6bc <__aeabi_ddiv+0x658>)
    b5a0:	18e3      	adds	r3, r4, r3
    b5a2:	2b00      	cmp	r3, #0
    b5a4:	dde5      	ble.n	b572 <__aeabi_ddiv+0x50e>
    b5a6:	2201      	movs	r2, #1
    b5a8:	4252      	negs	r2, r2
    b5aa:	e7f2      	b.n	b592 <__aeabi_ddiv+0x52e>
    b5ac:	001d      	movs	r5, r3
    b5ae:	e6fa      	b.n	b3a6 <__aeabi_ddiv+0x342>
    b5b0:	469a      	mov	sl, r3
    b5b2:	e71c      	b.n	b3ee <__aeabi_ddiv+0x38a>
    b5b4:	42b0      	cmp	r0, r6
    b5b6:	d839      	bhi.n	b62c <__aeabi_ddiv+0x5c8>
    b5b8:	d06e      	beq.n	b698 <__aeabi_ddiv+0x634>
    b5ba:	0011      	movs	r1, r2
    b5bc:	e73a      	b.n	b434 <__aeabi_ddiv+0x3d0>
    b5be:	9302      	str	r3, [sp, #8]
    b5c0:	e73a      	b.n	b438 <__aeabi_ddiv+0x3d4>
    b5c2:	2a1f      	cmp	r2, #31
    b5c4:	dc3c      	bgt.n	b640 <__aeabi_ddiv+0x5dc>
    b5c6:	2320      	movs	r3, #32
    b5c8:	1a9b      	subs	r3, r3, r2
    b5ca:	000c      	movs	r4, r1
    b5cc:	4658      	mov	r0, fp
    b5ce:	4099      	lsls	r1, r3
    b5d0:	4098      	lsls	r0, r3
    b5d2:	1e4b      	subs	r3, r1, #1
    b5d4:	4199      	sbcs	r1, r3
    b5d6:	465b      	mov	r3, fp
    b5d8:	40d4      	lsrs	r4, r2
    b5da:	40d3      	lsrs	r3, r2
    b5dc:	4320      	orrs	r0, r4
    b5de:	4308      	orrs	r0, r1
    b5e0:	001a      	movs	r2, r3
    b5e2:	0743      	lsls	r3, r0, #29
    b5e4:	d009      	beq.n	b5fa <__aeabi_ddiv+0x596>
    b5e6:	230f      	movs	r3, #15
    b5e8:	4003      	ands	r3, r0
    b5ea:	2b04      	cmp	r3, #4
    b5ec:	d005      	beq.n	b5fa <__aeabi_ddiv+0x596>
    b5ee:	0001      	movs	r1, r0
    b5f0:	1d08      	adds	r0, r1, #4
    b5f2:	4288      	cmp	r0, r1
    b5f4:	419b      	sbcs	r3, r3
    b5f6:	425b      	negs	r3, r3
    b5f8:	18d2      	adds	r2, r2, r3
    b5fa:	0213      	lsls	r3, r2, #8
    b5fc:	d53a      	bpl.n	b674 <__aeabi_ddiv+0x610>
    b5fe:	2301      	movs	r3, #1
    b600:	9a02      	ldr	r2, [sp, #8]
    b602:	2401      	movs	r4, #1
    b604:	401a      	ands	r2, r3
    b606:	2300      	movs	r3, #0
    b608:	4694      	mov	ip, r2
    b60a:	4698      	mov	r8, r3
    b60c:	2200      	movs	r2, #0
    b60e:	e5f7      	b.n	b200 <__aeabi_ddiv+0x19c>
    b610:	2102      	movs	r1, #2
    b612:	4249      	negs	r1, r1
    b614:	468c      	mov	ip, r1
    b616:	9d03      	ldr	r5, [sp, #12]
    b618:	44e3      	add	fp, ip
    b61a:	46ac      	mov	ip, r5
    b61c:	44e2      	add	sl, ip
    b61e:	45aa      	cmp	sl, r5
    b620:	41ad      	sbcs	r5, r5
    b622:	426d      	negs	r5, r5
    b624:	4445      	add	r5, r8
    b626:	18ed      	adds	r5, r5, r3
    b628:	1a2d      	subs	r5, r5, r0
    b62a:	e696      	b.n	b35a <__aeabi_ddiv+0x2f6>
    b62c:	1e8a      	subs	r2, r1, #2
    b62e:	9903      	ldr	r1, [sp, #12]
    b630:	004d      	lsls	r5, r1, #1
    b632:	428d      	cmp	r5, r1
    b634:	4189      	sbcs	r1, r1
    b636:	4249      	negs	r1, r1
    b638:	4441      	add	r1, r8
    b63a:	1876      	adds	r6, r6, r1
    b63c:	9503      	str	r5, [sp, #12]
    b63e:	e78f      	b.n	b560 <__aeabi_ddiv+0x4fc>
    b640:	201f      	movs	r0, #31
    b642:	4240      	negs	r0, r0
    b644:	1ac3      	subs	r3, r0, r3
    b646:	4658      	mov	r0, fp
    b648:	40d8      	lsrs	r0, r3
    b64a:	0003      	movs	r3, r0
    b64c:	2a20      	cmp	r2, #32
    b64e:	d028      	beq.n	b6a2 <__aeabi_ddiv+0x63e>
    b650:	2040      	movs	r0, #64	; 0x40
    b652:	465d      	mov	r5, fp
    b654:	1a82      	subs	r2, r0, r2
    b656:	4095      	lsls	r5, r2
    b658:	4329      	orrs	r1, r5
    b65a:	1e4a      	subs	r2, r1, #1
    b65c:	4191      	sbcs	r1, r2
    b65e:	4319      	orrs	r1, r3
    b660:	2307      	movs	r3, #7
    b662:	2200      	movs	r2, #0
    b664:	400b      	ands	r3, r1
    b666:	d009      	beq.n	b67c <__aeabi_ddiv+0x618>
    b668:	230f      	movs	r3, #15
    b66a:	2200      	movs	r2, #0
    b66c:	400b      	ands	r3, r1
    b66e:	0008      	movs	r0, r1
    b670:	2b04      	cmp	r3, #4
    b672:	d1bd      	bne.n	b5f0 <__aeabi_ddiv+0x58c>
    b674:	0001      	movs	r1, r0
    b676:	0753      	lsls	r3, r2, #29
    b678:	0252      	lsls	r2, r2, #9
    b67a:	0b12      	lsrs	r2, r2, #12
    b67c:	08c9      	lsrs	r1, r1, #3
    b67e:	4319      	orrs	r1, r3
    b680:	2301      	movs	r3, #1
    b682:	4688      	mov	r8, r1
    b684:	9902      	ldr	r1, [sp, #8]
    b686:	2400      	movs	r4, #0
    b688:	4019      	ands	r1, r3
    b68a:	468c      	mov	ip, r1
    b68c:	e5b8      	b.n	b200 <__aeabi_ddiv+0x19c>
    b68e:	4552      	cmp	r2, sl
    b690:	d8be      	bhi.n	b610 <__aeabi_ddiv+0x5ac>
    b692:	468b      	mov	fp, r1
    b694:	2500      	movs	r5, #0
    b696:	e660      	b.n	b35a <__aeabi_ddiv+0x2f6>
    b698:	9d03      	ldr	r5, [sp, #12]
    b69a:	429d      	cmp	r5, r3
    b69c:	d3c6      	bcc.n	b62c <__aeabi_ddiv+0x5c8>
    b69e:	0011      	movs	r1, r2
    b6a0:	e762      	b.n	b568 <__aeabi_ddiv+0x504>
    b6a2:	2500      	movs	r5, #0
    b6a4:	e7d8      	b.n	b658 <__aeabi_ddiv+0x5f4>
    b6a6:	2280      	movs	r2, #128	; 0x80
    b6a8:	465b      	mov	r3, fp
    b6aa:	0312      	lsls	r2, r2, #12
    b6ac:	431a      	orrs	r2, r3
    b6ae:	9b01      	ldr	r3, [sp, #4]
    b6b0:	0312      	lsls	r2, r2, #12
    b6b2:	0b12      	lsrs	r2, r2, #12
    b6b4:	469c      	mov	ip, r3
    b6b6:	4688      	mov	r8, r1
    b6b8:	4c03      	ldr	r4, [pc, #12]	; (b6c8 <__aeabi_ddiv+0x664>)
    b6ba:	e5a1      	b.n	b200 <__aeabi_ddiv+0x19c>
    b6bc:	000003ff 	.word	0x000003ff
    b6c0:	feffffff 	.word	0xfeffffff
    b6c4:	000007fe 	.word	0x000007fe
    b6c8:	000007ff 	.word	0x000007ff

0000b6cc <__eqdf2>:
    b6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6ce:	464f      	mov	r7, r9
    b6d0:	4646      	mov	r6, r8
    b6d2:	46d6      	mov	lr, sl
    b6d4:	005c      	lsls	r4, r3, #1
    b6d6:	b5c0      	push	{r6, r7, lr}
    b6d8:	031f      	lsls	r7, r3, #12
    b6da:	0fdb      	lsrs	r3, r3, #31
    b6dc:	469a      	mov	sl, r3
    b6de:	4b17      	ldr	r3, [pc, #92]	; (b73c <__eqdf2+0x70>)
    b6e0:	030e      	lsls	r6, r1, #12
    b6e2:	004d      	lsls	r5, r1, #1
    b6e4:	4684      	mov	ip, r0
    b6e6:	4680      	mov	r8, r0
    b6e8:	0b36      	lsrs	r6, r6, #12
    b6ea:	0d6d      	lsrs	r5, r5, #21
    b6ec:	0fc9      	lsrs	r1, r1, #31
    b6ee:	4691      	mov	r9, r2
    b6f0:	0b3f      	lsrs	r7, r7, #12
    b6f2:	0d64      	lsrs	r4, r4, #21
    b6f4:	2001      	movs	r0, #1
    b6f6:	429d      	cmp	r5, r3
    b6f8:	d008      	beq.n	b70c <__eqdf2+0x40>
    b6fa:	429c      	cmp	r4, r3
    b6fc:	d001      	beq.n	b702 <__eqdf2+0x36>
    b6fe:	42a5      	cmp	r5, r4
    b700:	d00b      	beq.n	b71a <__eqdf2+0x4e>
    b702:	bc1c      	pop	{r2, r3, r4}
    b704:	4690      	mov	r8, r2
    b706:	4699      	mov	r9, r3
    b708:	46a2      	mov	sl, r4
    b70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b70c:	4663      	mov	r3, ip
    b70e:	4333      	orrs	r3, r6
    b710:	d1f7      	bne.n	b702 <__eqdf2+0x36>
    b712:	42ac      	cmp	r4, r5
    b714:	d1f5      	bne.n	b702 <__eqdf2+0x36>
    b716:	433a      	orrs	r2, r7
    b718:	d1f3      	bne.n	b702 <__eqdf2+0x36>
    b71a:	2001      	movs	r0, #1
    b71c:	42be      	cmp	r6, r7
    b71e:	d1f0      	bne.n	b702 <__eqdf2+0x36>
    b720:	45c8      	cmp	r8, r9
    b722:	d1ee      	bne.n	b702 <__eqdf2+0x36>
    b724:	4551      	cmp	r1, sl
    b726:	d007      	beq.n	b738 <__eqdf2+0x6c>
    b728:	2d00      	cmp	r5, #0
    b72a:	d1ea      	bne.n	b702 <__eqdf2+0x36>
    b72c:	4663      	mov	r3, ip
    b72e:	431e      	orrs	r6, r3
    b730:	0030      	movs	r0, r6
    b732:	1e46      	subs	r6, r0, #1
    b734:	41b0      	sbcs	r0, r6
    b736:	e7e4      	b.n	b702 <__eqdf2+0x36>
    b738:	2000      	movs	r0, #0
    b73a:	e7e2      	b.n	b702 <__eqdf2+0x36>
    b73c:	000007ff 	.word	0x000007ff

0000b740 <__gedf2>:
    b740:	b5f0      	push	{r4, r5, r6, r7, lr}
    b742:	4645      	mov	r5, r8
    b744:	46de      	mov	lr, fp
    b746:	4657      	mov	r7, sl
    b748:	464e      	mov	r6, r9
    b74a:	b5e0      	push	{r5, r6, r7, lr}
    b74c:	031f      	lsls	r7, r3, #12
    b74e:	0b3d      	lsrs	r5, r7, #12
    b750:	4f2c      	ldr	r7, [pc, #176]	; (b804 <__gedf2+0xc4>)
    b752:	030e      	lsls	r6, r1, #12
    b754:	004c      	lsls	r4, r1, #1
    b756:	46ab      	mov	fp, r5
    b758:	005d      	lsls	r5, r3, #1
    b75a:	4684      	mov	ip, r0
    b75c:	0b36      	lsrs	r6, r6, #12
    b75e:	0d64      	lsrs	r4, r4, #21
    b760:	0fc9      	lsrs	r1, r1, #31
    b762:	4690      	mov	r8, r2
    b764:	0d6d      	lsrs	r5, r5, #21
    b766:	0fdb      	lsrs	r3, r3, #31
    b768:	42bc      	cmp	r4, r7
    b76a:	d02a      	beq.n	b7c2 <__gedf2+0x82>
    b76c:	4f25      	ldr	r7, [pc, #148]	; (b804 <__gedf2+0xc4>)
    b76e:	42bd      	cmp	r5, r7
    b770:	d02d      	beq.n	b7ce <__gedf2+0x8e>
    b772:	2c00      	cmp	r4, #0
    b774:	d10f      	bne.n	b796 <__gedf2+0x56>
    b776:	4330      	orrs	r0, r6
    b778:	0007      	movs	r7, r0
    b77a:	4681      	mov	r9, r0
    b77c:	4278      	negs	r0, r7
    b77e:	4178      	adcs	r0, r7
    b780:	b2c0      	uxtb	r0, r0
    b782:	2d00      	cmp	r5, #0
    b784:	d117      	bne.n	b7b6 <__gedf2+0x76>
    b786:	465f      	mov	r7, fp
    b788:	433a      	orrs	r2, r7
    b78a:	d114      	bne.n	b7b6 <__gedf2+0x76>
    b78c:	464b      	mov	r3, r9
    b78e:	2000      	movs	r0, #0
    b790:	2b00      	cmp	r3, #0
    b792:	d00a      	beq.n	b7aa <__gedf2+0x6a>
    b794:	e006      	b.n	b7a4 <__gedf2+0x64>
    b796:	2d00      	cmp	r5, #0
    b798:	d102      	bne.n	b7a0 <__gedf2+0x60>
    b79a:	4658      	mov	r0, fp
    b79c:	4302      	orrs	r2, r0
    b79e:	d001      	beq.n	b7a4 <__gedf2+0x64>
    b7a0:	4299      	cmp	r1, r3
    b7a2:	d018      	beq.n	b7d6 <__gedf2+0x96>
    b7a4:	4248      	negs	r0, r1
    b7a6:	2101      	movs	r1, #1
    b7a8:	4308      	orrs	r0, r1
    b7aa:	bc3c      	pop	{r2, r3, r4, r5}
    b7ac:	4690      	mov	r8, r2
    b7ae:	4699      	mov	r9, r3
    b7b0:	46a2      	mov	sl, r4
    b7b2:	46ab      	mov	fp, r5
    b7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7b6:	2800      	cmp	r0, #0
    b7b8:	d0f2      	beq.n	b7a0 <__gedf2+0x60>
    b7ba:	2001      	movs	r0, #1
    b7bc:	3b01      	subs	r3, #1
    b7be:	4318      	orrs	r0, r3
    b7c0:	e7f3      	b.n	b7aa <__gedf2+0x6a>
    b7c2:	0037      	movs	r7, r6
    b7c4:	4307      	orrs	r7, r0
    b7c6:	d0d1      	beq.n	b76c <__gedf2+0x2c>
    b7c8:	2002      	movs	r0, #2
    b7ca:	4240      	negs	r0, r0
    b7cc:	e7ed      	b.n	b7aa <__gedf2+0x6a>
    b7ce:	465f      	mov	r7, fp
    b7d0:	4317      	orrs	r7, r2
    b7d2:	d0ce      	beq.n	b772 <__gedf2+0x32>
    b7d4:	e7f8      	b.n	b7c8 <__gedf2+0x88>
    b7d6:	42ac      	cmp	r4, r5
    b7d8:	dce4      	bgt.n	b7a4 <__gedf2+0x64>
    b7da:	da03      	bge.n	b7e4 <__gedf2+0xa4>
    b7dc:	1e48      	subs	r0, r1, #1
    b7de:	2101      	movs	r1, #1
    b7e0:	4308      	orrs	r0, r1
    b7e2:	e7e2      	b.n	b7aa <__gedf2+0x6a>
    b7e4:	455e      	cmp	r6, fp
    b7e6:	d8dd      	bhi.n	b7a4 <__gedf2+0x64>
    b7e8:	d006      	beq.n	b7f8 <__gedf2+0xb8>
    b7ea:	2000      	movs	r0, #0
    b7ec:	455e      	cmp	r6, fp
    b7ee:	d2dc      	bcs.n	b7aa <__gedf2+0x6a>
    b7f0:	2301      	movs	r3, #1
    b7f2:	1e48      	subs	r0, r1, #1
    b7f4:	4318      	orrs	r0, r3
    b7f6:	e7d8      	b.n	b7aa <__gedf2+0x6a>
    b7f8:	45c4      	cmp	ip, r8
    b7fa:	d8d3      	bhi.n	b7a4 <__gedf2+0x64>
    b7fc:	2000      	movs	r0, #0
    b7fe:	45c4      	cmp	ip, r8
    b800:	d3f6      	bcc.n	b7f0 <__gedf2+0xb0>
    b802:	e7d2      	b.n	b7aa <__gedf2+0x6a>
    b804:	000007ff 	.word	0x000007ff

0000b808 <__ledf2>:
    b808:	b5f0      	push	{r4, r5, r6, r7, lr}
    b80a:	464e      	mov	r6, r9
    b80c:	4645      	mov	r5, r8
    b80e:	46de      	mov	lr, fp
    b810:	4657      	mov	r7, sl
    b812:	005c      	lsls	r4, r3, #1
    b814:	b5e0      	push	{r5, r6, r7, lr}
    b816:	031f      	lsls	r7, r3, #12
    b818:	0fdb      	lsrs	r3, r3, #31
    b81a:	4699      	mov	r9, r3
    b81c:	4b2a      	ldr	r3, [pc, #168]	; (b8c8 <__ledf2+0xc0>)
    b81e:	030e      	lsls	r6, r1, #12
    b820:	004d      	lsls	r5, r1, #1
    b822:	0fc9      	lsrs	r1, r1, #31
    b824:	4684      	mov	ip, r0
    b826:	0b36      	lsrs	r6, r6, #12
    b828:	0d6d      	lsrs	r5, r5, #21
    b82a:	468b      	mov	fp, r1
    b82c:	4690      	mov	r8, r2
    b82e:	0b3f      	lsrs	r7, r7, #12
    b830:	0d64      	lsrs	r4, r4, #21
    b832:	429d      	cmp	r5, r3
    b834:	d020      	beq.n	b878 <__ledf2+0x70>
    b836:	4b24      	ldr	r3, [pc, #144]	; (b8c8 <__ledf2+0xc0>)
    b838:	429c      	cmp	r4, r3
    b83a:	d022      	beq.n	b882 <__ledf2+0x7a>
    b83c:	2d00      	cmp	r5, #0
    b83e:	d112      	bne.n	b866 <__ledf2+0x5e>
    b840:	4330      	orrs	r0, r6
    b842:	4243      	negs	r3, r0
    b844:	4143      	adcs	r3, r0
    b846:	b2db      	uxtb	r3, r3
    b848:	2c00      	cmp	r4, #0
    b84a:	d01f      	beq.n	b88c <__ledf2+0x84>
    b84c:	2b00      	cmp	r3, #0
    b84e:	d00c      	beq.n	b86a <__ledf2+0x62>
    b850:	464b      	mov	r3, r9
    b852:	2001      	movs	r0, #1
    b854:	3b01      	subs	r3, #1
    b856:	4303      	orrs	r3, r0
    b858:	0018      	movs	r0, r3
    b85a:	bc3c      	pop	{r2, r3, r4, r5}
    b85c:	4690      	mov	r8, r2
    b85e:	4699      	mov	r9, r3
    b860:	46a2      	mov	sl, r4
    b862:	46ab      	mov	fp, r5
    b864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b866:	2c00      	cmp	r4, #0
    b868:	d016      	beq.n	b898 <__ledf2+0x90>
    b86a:	45cb      	cmp	fp, r9
    b86c:	d017      	beq.n	b89e <__ledf2+0x96>
    b86e:	465b      	mov	r3, fp
    b870:	4259      	negs	r1, r3
    b872:	2301      	movs	r3, #1
    b874:	430b      	orrs	r3, r1
    b876:	e7ef      	b.n	b858 <__ledf2+0x50>
    b878:	0031      	movs	r1, r6
    b87a:	2302      	movs	r3, #2
    b87c:	4301      	orrs	r1, r0
    b87e:	d1eb      	bne.n	b858 <__ledf2+0x50>
    b880:	e7d9      	b.n	b836 <__ledf2+0x2e>
    b882:	0039      	movs	r1, r7
    b884:	2302      	movs	r3, #2
    b886:	4311      	orrs	r1, r2
    b888:	d1e6      	bne.n	b858 <__ledf2+0x50>
    b88a:	e7d7      	b.n	b83c <__ledf2+0x34>
    b88c:	433a      	orrs	r2, r7
    b88e:	d1dd      	bne.n	b84c <__ledf2+0x44>
    b890:	2300      	movs	r3, #0
    b892:	2800      	cmp	r0, #0
    b894:	d0e0      	beq.n	b858 <__ledf2+0x50>
    b896:	e7ea      	b.n	b86e <__ledf2+0x66>
    b898:	433a      	orrs	r2, r7
    b89a:	d1e6      	bne.n	b86a <__ledf2+0x62>
    b89c:	e7e7      	b.n	b86e <__ledf2+0x66>
    b89e:	42a5      	cmp	r5, r4
    b8a0:	dce5      	bgt.n	b86e <__ledf2+0x66>
    b8a2:	db05      	blt.n	b8b0 <__ledf2+0xa8>
    b8a4:	42be      	cmp	r6, r7
    b8a6:	d8e2      	bhi.n	b86e <__ledf2+0x66>
    b8a8:	d007      	beq.n	b8ba <__ledf2+0xb2>
    b8aa:	2300      	movs	r3, #0
    b8ac:	42be      	cmp	r6, r7
    b8ae:	d2d3      	bcs.n	b858 <__ledf2+0x50>
    b8b0:	4659      	mov	r1, fp
    b8b2:	2301      	movs	r3, #1
    b8b4:	3901      	subs	r1, #1
    b8b6:	430b      	orrs	r3, r1
    b8b8:	e7ce      	b.n	b858 <__ledf2+0x50>
    b8ba:	45c4      	cmp	ip, r8
    b8bc:	d8d7      	bhi.n	b86e <__ledf2+0x66>
    b8be:	2300      	movs	r3, #0
    b8c0:	45c4      	cmp	ip, r8
    b8c2:	d3f5      	bcc.n	b8b0 <__ledf2+0xa8>
    b8c4:	e7c8      	b.n	b858 <__ledf2+0x50>
    b8c6:	46c0      	nop			; (mov r8, r8)
    b8c8:	000007ff 	.word	0x000007ff

0000b8cc <__aeabi_dmul>:
    b8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8ce:	4657      	mov	r7, sl
    b8d0:	4645      	mov	r5, r8
    b8d2:	46de      	mov	lr, fp
    b8d4:	464e      	mov	r6, r9
    b8d6:	b5e0      	push	{r5, r6, r7, lr}
    b8d8:	030c      	lsls	r4, r1, #12
    b8da:	4698      	mov	r8, r3
    b8dc:	004e      	lsls	r6, r1, #1
    b8de:	0b23      	lsrs	r3, r4, #12
    b8e0:	b087      	sub	sp, #28
    b8e2:	0007      	movs	r7, r0
    b8e4:	4692      	mov	sl, r2
    b8e6:	469b      	mov	fp, r3
    b8e8:	0d76      	lsrs	r6, r6, #21
    b8ea:	0fcd      	lsrs	r5, r1, #31
    b8ec:	2e00      	cmp	r6, #0
    b8ee:	d06b      	beq.n	b9c8 <__aeabi_dmul+0xfc>
    b8f0:	4b6d      	ldr	r3, [pc, #436]	; (baa8 <__aeabi_dmul+0x1dc>)
    b8f2:	429e      	cmp	r6, r3
    b8f4:	d035      	beq.n	b962 <__aeabi_dmul+0x96>
    b8f6:	2480      	movs	r4, #128	; 0x80
    b8f8:	465b      	mov	r3, fp
    b8fa:	0f42      	lsrs	r2, r0, #29
    b8fc:	0424      	lsls	r4, r4, #16
    b8fe:	00db      	lsls	r3, r3, #3
    b900:	4314      	orrs	r4, r2
    b902:	431c      	orrs	r4, r3
    b904:	00c3      	lsls	r3, r0, #3
    b906:	4699      	mov	r9, r3
    b908:	4b68      	ldr	r3, [pc, #416]	; (baac <__aeabi_dmul+0x1e0>)
    b90a:	46a3      	mov	fp, r4
    b90c:	469c      	mov	ip, r3
    b90e:	2300      	movs	r3, #0
    b910:	2700      	movs	r7, #0
    b912:	4466      	add	r6, ip
    b914:	9302      	str	r3, [sp, #8]
    b916:	4643      	mov	r3, r8
    b918:	031c      	lsls	r4, r3, #12
    b91a:	005a      	lsls	r2, r3, #1
    b91c:	0fdb      	lsrs	r3, r3, #31
    b91e:	4650      	mov	r0, sl
    b920:	0b24      	lsrs	r4, r4, #12
    b922:	0d52      	lsrs	r2, r2, #21
    b924:	4698      	mov	r8, r3
    b926:	d100      	bne.n	b92a <__aeabi_dmul+0x5e>
    b928:	e076      	b.n	ba18 <__aeabi_dmul+0x14c>
    b92a:	4b5f      	ldr	r3, [pc, #380]	; (baa8 <__aeabi_dmul+0x1dc>)
    b92c:	429a      	cmp	r2, r3
    b92e:	d06d      	beq.n	ba0c <__aeabi_dmul+0x140>
    b930:	2380      	movs	r3, #128	; 0x80
    b932:	0f41      	lsrs	r1, r0, #29
    b934:	041b      	lsls	r3, r3, #16
    b936:	430b      	orrs	r3, r1
    b938:	495c      	ldr	r1, [pc, #368]	; (baac <__aeabi_dmul+0x1e0>)
    b93a:	00e4      	lsls	r4, r4, #3
    b93c:	468c      	mov	ip, r1
    b93e:	431c      	orrs	r4, r3
    b940:	00c3      	lsls	r3, r0, #3
    b942:	2000      	movs	r0, #0
    b944:	4462      	add	r2, ip
    b946:	4641      	mov	r1, r8
    b948:	18b6      	adds	r6, r6, r2
    b94a:	4069      	eors	r1, r5
    b94c:	1c72      	adds	r2, r6, #1
    b94e:	9101      	str	r1, [sp, #4]
    b950:	4694      	mov	ip, r2
    b952:	4307      	orrs	r7, r0
    b954:	2f0f      	cmp	r7, #15
    b956:	d900      	bls.n	b95a <__aeabi_dmul+0x8e>
    b958:	e0b0      	b.n	babc <__aeabi_dmul+0x1f0>
    b95a:	4a55      	ldr	r2, [pc, #340]	; (bab0 <__aeabi_dmul+0x1e4>)
    b95c:	00bf      	lsls	r7, r7, #2
    b95e:	59d2      	ldr	r2, [r2, r7]
    b960:	4697      	mov	pc, r2
    b962:	465b      	mov	r3, fp
    b964:	4303      	orrs	r3, r0
    b966:	4699      	mov	r9, r3
    b968:	d000      	beq.n	b96c <__aeabi_dmul+0xa0>
    b96a:	e087      	b.n	ba7c <__aeabi_dmul+0x1b0>
    b96c:	2300      	movs	r3, #0
    b96e:	469b      	mov	fp, r3
    b970:	3302      	adds	r3, #2
    b972:	2708      	movs	r7, #8
    b974:	9302      	str	r3, [sp, #8]
    b976:	e7ce      	b.n	b916 <__aeabi_dmul+0x4a>
    b978:	4642      	mov	r2, r8
    b97a:	9201      	str	r2, [sp, #4]
    b97c:	2802      	cmp	r0, #2
    b97e:	d067      	beq.n	ba50 <__aeabi_dmul+0x184>
    b980:	2803      	cmp	r0, #3
    b982:	d100      	bne.n	b986 <__aeabi_dmul+0xba>
    b984:	e20e      	b.n	bda4 <__aeabi_dmul+0x4d8>
    b986:	2801      	cmp	r0, #1
    b988:	d000      	beq.n	b98c <__aeabi_dmul+0xc0>
    b98a:	e162      	b.n	bc52 <__aeabi_dmul+0x386>
    b98c:	2300      	movs	r3, #0
    b98e:	2400      	movs	r4, #0
    b990:	2200      	movs	r2, #0
    b992:	4699      	mov	r9, r3
    b994:	9901      	ldr	r1, [sp, #4]
    b996:	4001      	ands	r1, r0
    b998:	b2cd      	uxtb	r5, r1
    b99a:	2100      	movs	r1, #0
    b99c:	0312      	lsls	r2, r2, #12
    b99e:	0d0b      	lsrs	r3, r1, #20
    b9a0:	0b12      	lsrs	r2, r2, #12
    b9a2:	051b      	lsls	r3, r3, #20
    b9a4:	4313      	orrs	r3, r2
    b9a6:	4a43      	ldr	r2, [pc, #268]	; (bab4 <__aeabi_dmul+0x1e8>)
    b9a8:	0524      	lsls	r4, r4, #20
    b9aa:	4013      	ands	r3, r2
    b9ac:	431c      	orrs	r4, r3
    b9ae:	0064      	lsls	r4, r4, #1
    b9b0:	07ed      	lsls	r5, r5, #31
    b9b2:	0864      	lsrs	r4, r4, #1
    b9b4:	432c      	orrs	r4, r5
    b9b6:	4648      	mov	r0, r9
    b9b8:	0021      	movs	r1, r4
    b9ba:	b007      	add	sp, #28
    b9bc:	bc3c      	pop	{r2, r3, r4, r5}
    b9be:	4690      	mov	r8, r2
    b9c0:	4699      	mov	r9, r3
    b9c2:	46a2      	mov	sl, r4
    b9c4:	46ab      	mov	fp, r5
    b9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9c8:	4303      	orrs	r3, r0
    b9ca:	4699      	mov	r9, r3
    b9cc:	d04f      	beq.n	ba6e <__aeabi_dmul+0x1a2>
    b9ce:	465b      	mov	r3, fp
    b9d0:	2b00      	cmp	r3, #0
    b9d2:	d100      	bne.n	b9d6 <__aeabi_dmul+0x10a>
    b9d4:	e189      	b.n	bcea <__aeabi_dmul+0x41e>
    b9d6:	4658      	mov	r0, fp
    b9d8:	f000 feb8 	bl	c74c <__clzsi2>
    b9dc:	0003      	movs	r3, r0
    b9de:	3b0b      	subs	r3, #11
    b9e0:	2b1c      	cmp	r3, #28
    b9e2:	dd00      	ble.n	b9e6 <__aeabi_dmul+0x11a>
    b9e4:	e17a      	b.n	bcdc <__aeabi_dmul+0x410>
    b9e6:	221d      	movs	r2, #29
    b9e8:	1ad3      	subs	r3, r2, r3
    b9ea:	003a      	movs	r2, r7
    b9ec:	0001      	movs	r1, r0
    b9ee:	465c      	mov	r4, fp
    b9f0:	40da      	lsrs	r2, r3
    b9f2:	3908      	subs	r1, #8
    b9f4:	408c      	lsls	r4, r1
    b9f6:	0013      	movs	r3, r2
    b9f8:	408f      	lsls	r7, r1
    b9fa:	4323      	orrs	r3, r4
    b9fc:	469b      	mov	fp, r3
    b9fe:	46b9      	mov	r9, r7
    ba00:	2300      	movs	r3, #0
    ba02:	4e2d      	ldr	r6, [pc, #180]	; (bab8 <__aeabi_dmul+0x1ec>)
    ba04:	2700      	movs	r7, #0
    ba06:	1a36      	subs	r6, r6, r0
    ba08:	9302      	str	r3, [sp, #8]
    ba0a:	e784      	b.n	b916 <__aeabi_dmul+0x4a>
    ba0c:	4653      	mov	r3, sl
    ba0e:	4323      	orrs	r3, r4
    ba10:	d12a      	bne.n	ba68 <__aeabi_dmul+0x19c>
    ba12:	2400      	movs	r4, #0
    ba14:	2002      	movs	r0, #2
    ba16:	e796      	b.n	b946 <__aeabi_dmul+0x7a>
    ba18:	4653      	mov	r3, sl
    ba1a:	4323      	orrs	r3, r4
    ba1c:	d020      	beq.n	ba60 <__aeabi_dmul+0x194>
    ba1e:	2c00      	cmp	r4, #0
    ba20:	d100      	bne.n	ba24 <__aeabi_dmul+0x158>
    ba22:	e157      	b.n	bcd4 <__aeabi_dmul+0x408>
    ba24:	0020      	movs	r0, r4
    ba26:	f000 fe91 	bl	c74c <__clzsi2>
    ba2a:	0003      	movs	r3, r0
    ba2c:	3b0b      	subs	r3, #11
    ba2e:	2b1c      	cmp	r3, #28
    ba30:	dd00      	ble.n	ba34 <__aeabi_dmul+0x168>
    ba32:	e149      	b.n	bcc8 <__aeabi_dmul+0x3fc>
    ba34:	211d      	movs	r1, #29
    ba36:	1acb      	subs	r3, r1, r3
    ba38:	4651      	mov	r1, sl
    ba3a:	0002      	movs	r2, r0
    ba3c:	40d9      	lsrs	r1, r3
    ba3e:	4653      	mov	r3, sl
    ba40:	3a08      	subs	r2, #8
    ba42:	4094      	lsls	r4, r2
    ba44:	4093      	lsls	r3, r2
    ba46:	430c      	orrs	r4, r1
    ba48:	4a1b      	ldr	r2, [pc, #108]	; (bab8 <__aeabi_dmul+0x1ec>)
    ba4a:	1a12      	subs	r2, r2, r0
    ba4c:	2000      	movs	r0, #0
    ba4e:	e77a      	b.n	b946 <__aeabi_dmul+0x7a>
    ba50:	2501      	movs	r5, #1
    ba52:	9b01      	ldr	r3, [sp, #4]
    ba54:	4c14      	ldr	r4, [pc, #80]	; (baa8 <__aeabi_dmul+0x1dc>)
    ba56:	401d      	ands	r5, r3
    ba58:	2300      	movs	r3, #0
    ba5a:	2200      	movs	r2, #0
    ba5c:	4699      	mov	r9, r3
    ba5e:	e79c      	b.n	b99a <__aeabi_dmul+0xce>
    ba60:	2400      	movs	r4, #0
    ba62:	2200      	movs	r2, #0
    ba64:	2001      	movs	r0, #1
    ba66:	e76e      	b.n	b946 <__aeabi_dmul+0x7a>
    ba68:	4653      	mov	r3, sl
    ba6a:	2003      	movs	r0, #3
    ba6c:	e76b      	b.n	b946 <__aeabi_dmul+0x7a>
    ba6e:	2300      	movs	r3, #0
    ba70:	469b      	mov	fp, r3
    ba72:	3301      	adds	r3, #1
    ba74:	2704      	movs	r7, #4
    ba76:	2600      	movs	r6, #0
    ba78:	9302      	str	r3, [sp, #8]
    ba7a:	e74c      	b.n	b916 <__aeabi_dmul+0x4a>
    ba7c:	2303      	movs	r3, #3
    ba7e:	4681      	mov	r9, r0
    ba80:	270c      	movs	r7, #12
    ba82:	9302      	str	r3, [sp, #8]
    ba84:	e747      	b.n	b916 <__aeabi_dmul+0x4a>
    ba86:	2280      	movs	r2, #128	; 0x80
    ba88:	2300      	movs	r3, #0
    ba8a:	2500      	movs	r5, #0
    ba8c:	0312      	lsls	r2, r2, #12
    ba8e:	4699      	mov	r9, r3
    ba90:	4c05      	ldr	r4, [pc, #20]	; (baa8 <__aeabi_dmul+0x1dc>)
    ba92:	e782      	b.n	b99a <__aeabi_dmul+0xce>
    ba94:	465c      	mov	r4, fp
    ba96:	464b      	mov	r3, r9
    ba98:	9802      	ldr	r0, [sp, #8]
    ba9a:	e76f      	b.n	b97c <__aeabi_dmul+0xb0>
    ba9c:	465c      	mov	r4, fp
    ba9e:	464b      	mov	r3, r9
    baa0:	9501      	str	r5, [sp, #4]
    baa2:	9802      	ldr	r0, [sp, #8]
    baa4:	e76a      	b.n	b97c <__aeabi_dmul+0xb0>
    baa6:	46c0      	nop			; (mov r8, r8)
    baa8:	000007ff 	.word	0x000007ff
    baac:	fffffc01 	.word	0xfffffc01
    bab0:	00012890 	.word	0x00012890
    bab4:	800fffff 	.word	0x800fffff
    bab8:	fffffc0d 	.word	0xfffffc0d
    babc:	464a      	mov	r2, r9
    babe:	4649      	mov	r1, r9
    bac0:	0c17      	lsrs	r7, r2, #16
    bac2:	0c1a      	lsrs	r2, r3, #16
    bac4:	041b      	lsls	r3, r3, #16
    bac6:	0c1b      	lsrs	r3, r3, #16
    bac8:	0408      	lsls	r0, r1, #16
    baca:	0019      	movs	r1, r3
    bacc:	0c00      	lsrs	r0, r0, #16
    bace:	4341      	muls	r1, r0
    bad0:	0015      	movs	r5, r2
    bad2:	4688      	mov	r8, r1
    bad4:	0019      	movs	r1, r3
    bad6:	437d      	muls	r5, r7
    bad8:	4379      	muls	r1, r7
    bada:	9503      	str	r5, [sp, #12]
    badc:	4689      	mov	r9, r1
    bade:	0029      	movs	r1, r5
    bae0:	0015      	movs	r5, r2
    bae2:	4345      	muls	r5, r0
    bae4:	444d      	add	r5, r9
    bae6:	9502      	str	r5, [sp, #8]
    bae8:	4645      	mov	r5, r8
    baea:	0c2d      	lsrs	r5, r5, #16
    baec:	46aa      	mov	sl, r5
    baee:	9d02      	ldr	r5, [sp, #8]
    baf0:	4455      	add	r5, sl
    baf2:	45a9      	cmp	r9, r5
    baf4:	d906      	bls.n	bb04 <__aeabi_dmul+0x238>
    baf6:	468a      	mov	sl, r1
    baf8:	2180      	movs	r1, #128	; 0x80
    bafa:	0249      	lsls	r1, r1, #9
    bafc:	4689      	mov	r9, r1
    bafe:	44ca      	add	sl, r9
    bb00:	4651      	mov	r1, sl
    bb02:	9103      	str	r1, [sp, #12]
    bb04:	0c29      	lsrs	r1, r5, #16
    bb06:	9104      	str	r1, [sp, #16]
    bb08:	4641      	mov	r1, r8
    bb0a:	0409      	lsls	r1, r1, #16
    bb0c:	042d      	lsls	r5, r5, #16
    bb0e:	0c09      	lsrs	r1, r1, #16
    bb10:	4688      	mov	r8, r1
    bb12:	0029      	movs	r1, r5
    bb14:	0c25      	lsrs	r5, r4, #16
    bb16:	0424      	lsls	r4, r4, #16
    bb18:	4441      	add	r1, r8
    bb1a:	0c24      	lsrs	r4, r4, #16
    bb1c:	9105      	str	r1, [sp, #20]
    bb1e:	0021      	movs	r1, r4
    bb20:	4341      	muls	r1, r0
    bb22:	4688      	mov	r8, r1
    bb24:	0021      	movs	r1, r4
    bb26:	4379      	muls	r1, r7
    bb28:	468a      	mov	sl, r1
    bb2a:	4368      	muls	r0, r5
    bb2c:	4641      	mov	r1, r8
    bb2e:	4450      	add	r0, sl
    bb30:	4681      	mov	r9, r0
    bb32:	0c08      	lsrs	r0, r1, #16
    bb34:	4448      	add	r0, r9
    bb36:	436f      	muls	r7, r5
    bb38:	4582      	cmp	sl, r0
    bb3a:	d903      	bls.n	bb44 <__aeabi_dmul+0x278>
    bb3c:	2180      	movs	r1, #128	; 0x80
    bb3e:	0249      	lsls	r1, r1, #9
    bb40:	4689      	mov	r9, r1
    bb42:	444f      	add	r7, r9
    bb44:	0c01      	lsrs	r1, r0, #16
    bb46:	4689      	mov	r9, r1
    bb48:	0039      	movs	r1, r7
    bb4a:	4449      	add	r1, r9
    bb4c:	9102      	str	r1, [sp, #8]
    bb4e:	4641      	mov	r1, r8
    bb50:	040f      	lsls	r7, r1, #16
    bb52:	9904      	ldr	r1, [sp, #16]
    bb54:	0c3f      	lsrs	r7, r7, #16
    bb56:	4688      	mov	r8, r1
    bb58:	0400      	lsls	r0, r0, #16
    bb5a:	19c0      	adds	r0, r0, r7
    bb5c:	4480      	add	r8, r0
    bb5e:	4641      	mov	r1, r8
    bb60:	9104      	str	r1, [sp, #16]
    bb62:	4659      	mov	r1, fp
    bb64:	0c0f      	lsrs	r7, r1, #16
    bb66:	0409      	lsls	r1, r1, #16
    bb68:	0c09      	lsrs	r1, r1, #16
    bb6a:	4688      	mov	r8, r1
    bb6c:	4359      	muls	r1, r3
    bb6e:	468a      	mov	sl, r1
    bb70:	0039      	movs	r1, r7
    bb72:	4351      	muls	r1, r2
    bb74:	4689      	mov	r9, r1
    bb76:	4641      	mov	r1, r8
    bb78:	434a      	muls	r2, r1
    bb7a:	4651      	mov	r1, sl
    bb7c:	0c09      	lsrs	r1, r1, #16
    bb7e:	468b      	mov	fp, r1
    bb80:	437b      	muls	r3, r7
    bb82:	18d2      	adds	r2, r2, r3
    bb84:	445a      	add	r2, fp
    bb86:	4293      	cmp	r3, r2
    bb88:	d903      	bls.n	bb92 <__aeabi_dmul+0x2c6>
    bb8a:	2380      	movs	r3, #128	; 0x80
    bb8c:	025b      	lsls	r3, r3, #9
    bb8e:	469b      	mov	fp, r3
    bb90:	44d9      	add	r9, fp
    bb92:	4651      	mov	r1, sl
    bb94:	0409      	lsls	r1, r1, #16
    bb96:	0c09      	lsrs	r1, r1, #16
    bb98:	468a      	mov	sl, r1
    bb9a:	4641      	mov	r1, r8
    bb9c:	4361      	muls	r1, r4
    bb9e:	437c      	muls	r4, r7
    bba0:	0c13      	lsrs	r3, r2, #16
    bba2:	0412      	lsls	r2, r2, #16
    bba4:	444b      	add	r3, r9
    bba6:	4452      	add	r2, sl
    bba8:	46a1      	mov	r9, r4
    bbaa:	468a      	mov	sl, r1
    bbac:	003c      	movs	r4, r7
    bbae:	4641      	mov	r1, r8
    bbb0:	436c      	muls	r4, r5
    bbb2:	434d      	muls	r5, r1
    bbb4:	4651      	mov	r1, sl
    bbb6:	444d      	add	r5, r9
    bbb8:	0c0f      	lsrs	r7, r1, #16
    bbba:	197d      	adds	r5, r7, r5
    bbbc:	45a9      	cmp	r9, r5
    bbbe:	d903      	bls.n	bbc8 <__aeabi_dmul+0x2fc>
    bbc0:	2180      	movs	r1, #128	; 0x80
    bbc2:	0249      	lsls	r1, r1, #9
    bbc4:	4688      	mov	r8, r1
    bbc6:	4444      	add	r4, r8
    bbc8:	9f04      	ldr	r7, [sp, #16]
    bbca:	9903      	ldr	r1, [sp, #12]
    bbcc:	46b8      	mov	r8, r7
    bbce:	4441      	add	r1, r8
    bbd0:	468b      	mov	fp, r1
    bbd2:	4583      	cmp	fp, r0
    bbd4:	4180      	sbcs	r0, r0
    bbd6:	4241      	negs	r1, r0
    bbd8:	4688      	mov	r8, r1
    bbda:	4651      	mov	r1, sl
    bbdc:	0408      	lsls	r0, r1, #16
    bbde:	042f      	lsls	r7, r5, #16
    bbe0:	0c00      	lsrs	r0, r0, #16
    bbe2:	183f      	adds	r7, r7, r0
    bbe4:	4658      	mov	r0, fp
    bbe6:	9902      	ldr	r1, [sp, #8]
    bbe8:	1810      	adds	r0, r2, r0
    bbea:	4689      	mov	r9, r1
    bbec:	4290      	cmp	r0, r2
    bbee:	4192      	sbcs	r2, r2
    bbf0:	444f      	add	r7, r9
    bbf2:	46ba      	mov	sl, r7
    bbf4:	4252      	negs	r2, r2
    bbf6:	4699      	mov	r9, r3
    bbf8:	4693      	mov	fp, r2
    bbfa:	44c2      	add	sl, r8
    bbfc:	44d1      	add	r9, sl
    bbfe:	44cb      	add	fp, r9
    bc00:	428f      	cmp	r7, r1
    bc02:	41bf      	sbcs	r7, r7
    bc04:	45c2      	cmp	sl, r8
    bc06:	4189      	sbcs	r1, r1
    bc08:	4599      	cmp	r9, r3
    bc0a:	419b      	sbcs	r3, r3
    bc0c:	4593      	cmp	fp, r2
    bc0e:	4192      	sbcs	r2, r2
    bc10:	427f      	negs	r7, r7
    bc12:	4249      	negs	r1, r1
    bc14:	0c2d      	lsrs	r5, r5, #16
    bc16:	4252      	negs	r2, r2
    bc18:	430f      	orrs	r7, r1
    bc1a:	425b      	negs	r3, r3
    bc1c:	4313      	orrs	r3, r2
    bc1e:	197f      	adds	r7, r7, r5
    bc20:	18ff      	adds	r7, r7, r3
    bc22:	465b      	mov	r3, fp
    bc24:	193c      	adds	r4, r7, r4
    bc26:	0ddb      	lsrs	r3, r3, #23
    bc28:	9a05      	ldr	r2, [sp, #20]
    bc2a:	0264      	lsls	r4, r4, #9
    bc2c:	431c      	orrs	r4, r3
    bc2e:	0243      	lsls	r3, r0, #9
    bc30:	4313      	orrs	r3, r2
    bc32:	1e5d      	subs	r5, r3, #1
    bc34:	41ab      	sbcs	r3, r5
    bc36:	465a      	mov	r2, fp
    bc38:	0dc0      	lsrs	r0, r0, #23
    bc3a:	4303      	orrs	r3, r0
    bc3c:	0252      	lsls	r2, r2, #9
    bc3e:	4313      	orrs	r3, r2
    bc40:	01e2      	lsls	r2, r4, #7
    bc42:	d556      	bpl.n	bcf2 <__aeabi_dmul+0x426>
    bc44:	2001      	movs	r0, #1
    bc46:	085a      	lsrs	r2, r3, #1
    bc48:	4003      	ands	r3, r0
    bc4a:	4313      	orrs	r3, r2
    bc4c:	07e2      	lsls	r2, r4, #31
    bc4e:	4313      	orrs	r3, r2
    bc50:	0864      	lsrs	r4, r4, #1
    bc52:	485a      	ldr	r0, [pc, #360]	; (bdbc <__aeabi_dmul+0x4f0>)
    bc54:	4460      	add	r0, ip
    bc56:	2800      	cmp	r0, #0
    bc58:	dd4d      	ble.n	bcf6 <__aeabi_dmul+0x42a>
    bc5a:	075a      	lsls	r2, r3, #29
    bc5c:	d009      	beq.n	bc72 <__aeabi_dmul+0x3a6>
    bc5e:	220f      	movs	r2, #15
    bc60:	401a      	ands	r2, r3
    bc62:	2a04      	cmp	r2, #4
    bc64:	d005      	beq.n	bc72 <__aeabi_dmul+0x3a6>
    bc66:	1d1a      	adds	r2, r3, #4
    bc68:	429a      	cmp	r2, r3
    bc6a:	419b      	sbcs	r3, r3
    bc6c:	425b      	negs	r3, r3
    bc6e:	18e4      	adds	r4, r4, r3
    bc70:	0013      	movs	r3, r2
    bc72:	01e2      	lsls	r2, r4, #7
    bc74:	d504      	bpl.n	bc80 <__aeabi_dmul+0x3b4>
    bc76:	2080      	movs	r0, #128	; 0x80
    bc78:	4a51      	ldr	r2, [pc, #324]	; (bdc0 <__aeabi_dmul+0x4f4>)
    bc7a:	00c0      	lsls	r0, r0, #3
    bc7c:	4014      	ands	r4, r2
    bc7e:	4460      	add	r0, ip
    bc80:	4a50      	ldr	r2, [pc, #320]	; (bdc4 <__aeabi_dmul+0x4f8>)
    bc82:	4290      	cmp	r0, r2
    bc84:	dd00      	ble.n	bc88 <__aeabi_dmul+0x3bc>
    bc86:	e6e3      	b.n	ba50 <__aeabi_dmul+0x184>
    bc88:	2501      	movs	r5, #1
    bc8a:	08db      	lsrs	r3, r3, #3
    bc8c:	0762      	lsls	r2, r4, #29
    bc8e:	431a      	orrs	r2, r3
    bc90:	0264      	lsls	r4, r4, #9
    bc92:	9b01      	ldr	r3, [sp, #4]
    bc94:	4691      	mov	r9, r2
    bc96:	0b22      	lsrs	r2, r4, #12
    bc98:	0544      	lsls	r4, r0, #21
    bc9a:	0d64      	lsrs	r4, r4, #21
    bc9c:	401d      	ands	r5, r3
    bc9e:	e67c      	b.n	b99a <__aeabi_dmul+0xce>
    bca0:	2280      	movs	r2, #128	; 0x80
    bca2:	4659      	mov	r1, fp
    bca4:	0312      	lsls	r2, r2, #12
    bca6:	4211      	tst	r1, r2
    bca8:	d008      	beq.n	bcbc <__aeabi_dmul+0x3f0>
    bcaa:	4214      	tst	r4, r2
    bcac:	d106      	bne.n	bcbc <__aeabi_dmul+0x3f0>
    bcae:	4322      	orrs	r2, r4
    bcb0:	0312      	lsls	r2, r2, #12
    bcb2:	0b12      	lsrs	r2, r2, #12
    bcb4:	4645      	mov	r5, r8
    bcb6:	4699      	mov	r9, r3
    bcb8:	4c43      	ldr	r4, [pc, #268]	; (bdc8 <__aeabi_dmul+0x4fc>)
    bcba:	e66e      	b.n	b99a <__aeabi_dmul+0xce>
    bcbc:	465b      	mov	r3, fp
    bcbe:	431a      	orrs	r2, r3
    bcc0:	0312      	lsls	r2, r2, #12
    bcc2:	0b12      	lsrs	r2, r2, #12
    bcc4:	4c40      	ldr	r4, [pc, #256]	; (bdc8 <__aeabi_dmul+0x4fc>)
    bcc6:	e668      	b.n	b99a <__aeabi_dmul+0xce>
    bcc8:	0003      	movs	r3, r0
    bcca:	4654      	mov	r4, sl
    bccc:	3b28      	subs	r3, #40	; 0x28
    bcce:	409c      	lsls	r4, r3
    bcd0:	2300      	movs	r3, #0
    bcd2:	e6b9      	b.n	ba48 <__aeabi_dmul+0x17c>
    bcd4:	f000 fd3a 	bl	c74c <__clzsi2>
    bcd8:	3020      	adds	r0, #32
    bcda:	e6a6      	b.n	ba2a <__aeabi_dmul+0x15e>
    bcdc:	0003      	movs	r3, r0
    bcde:	3b28      	subs	r3, #40	; 0x28
    bce0:	409f      	lsls	r7, r3
    bce2:	2300      	movs	r3, #0
    bce4:	46bb      	mov	fp, r7
    bce6:	4699      	mov	r9, r3
    bce8:	e68a      	b.n	ba00 <__aeabi_dmul+0x134>
    bcea:	f000 fd2f 	bl	c74c <__clzsi2>
    bcee:	3020      	adds	r0, #32
    bcf0:	e674      	b.n	b9dc <__aeabi_dmul+0x110>
    bcf2:	46b4      	mov	ip, r6
    bcf4:	e7ad      	b.n	bc52 <__aeabi_dmul+0x386>
    bcf6:	2501      	movs	r5, #1
    bcf8:	1a2a      	subs	r2, r5, r0
    bcfa:	2a38      	cmp	r2, #56	; 0x38
    bcfc:	dd06      	ble.n	bd0c <__aeabi_dmul+0x440>
    bcfe:	9b01      	ldr	r3, [sp, #4]
    bd00:	2400      	movs	r4, #0
    bd02:	401d      	ands	r5, r3
    bd04:	2300      	movs	r3, #0
    bd06:	2200      	movs	r2, #0
    bd08:	4699      	mov	r9, r3
    bd0a:	e646      	b.n	b99a <__aeabi_dmul+0xce>
    bd0c:	2a1f      	cmp	r2, #31
    bd0e:	dc21      	bgt.n	bd54 <__aeabi_dmul+0x488>
    bd10:	2520      	movs	r5, #32
    bd12:	0020      	movs	r0, r4
    bd14:	1aad      	subs	r5, r5, r2
    bd16:	001e      	movs	r6, r3
    bd18:	40ab      	lsls	r3, r5
    bd1a:	40a8      	lsls	r0, r5
    bd1c:	40d6      	lsrs	r6, r2
    bd1e:	1e5d      	subs	r5, r3, #1
    bd20:	41ab      	sbcs	r3, r5
    bd22:	4330      	orrs	r0, r6
    bd24:	4318      	orrs	r0, r3
    bd26:	40d4      	lsrs	r4, r2
    bd28:	0743      	lsls	r3, r0, #29
    bd2a:	d009      	beq.n	bd40 <__aeabi_dmul+0x474>
    bd2c:	230f      	movs	r3, #15
    bd2e:	4003      	ands	r3, r0
    bd30:	2b04      	cmp	r3, #4
    bd32:	d005      	beq.n	bd40 <__aeabi_dmul+0x474>
    bd34:	0003      	movs	r3, r0
    bd36:	1d18      	adds	r0, r3, #4
    bd38:	4298      	cmp	r0, r3
    bd3a:	419b      	sbcs	r3, r3
    bd3c:	425b      	negs	r3, r3
    bd3e:	18e4      	adds	r4, r4, r3
    bd40:	0223      	lsls	r3, r4, #8
    bd42:	d521      	bpl.n	bd88 <__aeabi_dmul+0x4bc>
    bd44:	2501      	movs	r5, #1
    bd46:	9b01      	ldr	r3, [sp, #4]
    bd48:	2401      	movs	r4, #1
    bd4a:	401d      	ands	r5, r3
    bd4c:	2300      	movs	r3, #0
    bd4e:	2200      	movs	r2, #0
    bd50:	4699      	mov	r9, r3
    bd52:	e622      	b.n	b99a <__aeabi_dmul+0xce>
    bd54:	251f      	movs	r5, #31
    bd56:	0021      	movs	r1, r4
    bd58:	426d      	negs	r5, r5
    bd5a:	1a28      	subs	r0, r5, r0
    bd5c:	40c1      	lsrs	r1, r0
    bd5e:	0008      	movs	r0, r1
    bd60:	2a20      	cmp	r2, #32
    bd62:	d01d      	beq.n	bda0 <__aeabi_dmul+0x4d4>
    bd64:	355f      	adds	r5, #95	; 0x5f
    bd66:	1aaa      	subs	r2, r5, r2
    bd68:	4094      	lsls	r4, r2
    bd6a:	4323      	orrs	r3, r4
    bd6c:	1e5c      	subs	r4, r3, #1
    bd6e:	41a3      	sbcs	r3, r4
    bd70:	2507      	movs	r5, #7
    bd72:	4303      	orrs	r3, r0
    bd74:	401d      	ands	r5, r3
    bd76:	2200      	movs	r2, #0
    bd78:	2d00      	cmp	r5, #0
    bd7a:	d009      	beq.n	bd90 <__aeabi_dmul+0x4c4>
    bd7c:	220f      	movs	r2, #15
    bd7e:	2400      	movs	r4, #0
    bd80:	401a      	ands	r2, r3
    bd82:	0018      	movs	r0, r3
    bd84:	2a04      	cmp	r2, #4
    bd86:	d1d6      	bne.n	bd36 <__aeabi_dmul+0x46a>
    bd88:	0003      	movs	r3, r0
    bd8a:	0765      	lsls	r5, r4, #29
    bd8c:	0264      	lsls	r4, r4, #9
    bd8e:	0b22      	lsrs	r2, r4, #12
    bd90:	08db      	lsrs	r3, r3, #3
    bd92:	432b      	orrs	r3, r5
    bd94:	2501      	movs	r5, #1
    bd96:	4699      	mov	r9, r3
    bd98:	9b01      	ldr	r3, [sp, #4]
    bd9a:	2400      	movs	r4, #0
    bd9c:	401d      	ands	r5, r3
    bd9e:	e5fc      	b.n	b99a <__aeabi_dmul+0xce>
    bda0:	2400      	movs	r4, #0
    bda2:	e7e2      	b.n	bd6a <__aeabi_dmul+0x49e>
    bda4:	2280      	movs	r2, #128	; 0x80
    bda6:	2501      	movs	r5, #1
    bda8:	0312      	lsls	r2, r2, #12
    bdaa:	4322      	orrs	r2, r4
    bdac:	9901      	ldr	r1, [sp, #4]
    bdae:	0312      	lsls	r2, r2, #12
    bdb0:	0b12      	lsrs	r2, r2, #12
    bdb2:	400d      	ands	r5, r1
    bdb4:	4699      	mov	r9, r3
    bdb6:	4c04      	ldr	r4, [pc, #16]	; (bdc8 <__aeabi_dmul+0x4fc>)
    bdb8:	e5ef      	b.n	b99a <__aeabi_dmul+0xce>
    bdba:	46c0      	nop			; (mov r8, r8)
    bdbc:	000003ff 	.word	0x000003ff
    bdc0:	feffffff 	.word	0xfeffffff
    bdc4:	000007fe 	.word	0x000007fe
    bdc8:	000007ff 	.word	0x000007ff

0000bdcc <__aeabi_dsub>:
    bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdce:	4646      	mov	r6, r8
    bdd0:	46d6      	mov	lr, sl
    bdd2:	464f      	mov	r7, r9
    bdd4:	030c      	lsls	r4, r1, #12
    bdd6:	b5c0      	push	{r6, r7, lr}
    bdd8:	0fcd      	lsrs	r5, r1, #31
    bdda:	004e      	lsls	r6, r1, #1
    bddc:	0a61      	lsrs	r1, r4, #9
    bdde:	0f44      	lsrs	r4, r0, #29
    bde0:	430c      	orrs	r4, r1
    bde2:	00c1      	lsls	r1, r0, #3
    bde4:	0058      	lsls	r0, r3, #1
    bde6:	0d40      	lsrs	r0, r0, #21
    bde8:	4684      	mov	ip, r0
    bdea:	468a      	mov	sl, r1
    bdec:	000f      	movs	r7, r1
    bdee:	0319      	lsls	r1, r3, #12
    bdf0:	0f50      	lsrs	r0, r2, #29
    bdf2:	0a49      	lsrs	r1, r1, #9
    bdf4:	4301      	orrs	r1, r0
    bdf6:	48c6      	ldr	r0, [pc, #792]	; (c110 <__aeabi_dsub+0x344>)
    bdf8:	0d76      	lsrs	r6, r6, #21
    bdfa:	46a8      	mov	r8, r5
    bdfc:	0fdb      	lsrs	r3, r3, #31
    bdfe:	00d2      	lsls	r2, r2, #3
    be00:	4584      	cmp	ip, r0
    be02:	d100      	bne.n	be06 <__aeabi_dsub+0x3a>
    be04:	e0d8      	b.n	bfb8 <__aeabi_dsub+0x1ec>
    be06:	2001      	movs	r0, #1
    be08:	4043      	eors	r3, r0
    be0a:	42ab      	cmp	r3, r5
    be0c:	d100      	bne.n	be10 <__aeabi_dsub+0x44>
    be0e:	e0a6      	b.n	bf5e <__aeabi_dsub+0x192>
    be10:	4660      	mov	r0, ip
    be12:	1a35      	subs	r5, r6, r0
    be14:	2d00      	cmp	r5, #0
    be16:	dc00      	bgt.n	be1a <__aeabi_dsub+0x4e>
    be18:	e105      	b.n	c026 <__aeabi_dsub+0x25a>
    be1a:	2800      	cmp	r0, #0
    be1c:	d110      	bne.n	be40 <__aeabi_dsub+0x74>
    be1e:	000b      	movs	r3, r1
    be20:	4313      	orrs	r3, r2
    be22:	d100      	bne.n	be26 <__aeabi_dsub+0x5a>
    be24:	e0d7      	b.n	bfd6 <__aeabi_dsub+0x20a>
    be26:	1e6b      	subs	r3, r5, #1
    be28:	2b00      	cmp	r3, #0
    be2a:	d000      	beq.n	be2e <__aeabi_dsub+0x62>
    be2c:	e14b      	b.n	c0c6 <__aeabi_dsub+0x2fa>
    be2e:	4653      	mov	r3, sl
    be30:	1a9f      	subs	r7, r3, r2
    be32:	45ba      	cmp	sl, r7
    be34:	4180      	sbcs	r0, r0
    be36:	1a64      	subs	r4, r4, r1
    be38:	4240      	negs	r0, r0
    be3a:	1a24      	subs	r4, r4, r0
    be3c:	2601      	movs	r6, #1
    be3e:	e01e      	b.n	be7e <__aeabi_dsub+0xb2>
    be40:	4bb3      	ldr	r3, [pc, #716]	; (c110 <__aeabi_dsub+0x344>)
    be42:	429e      	cmp	r6, r3
    be44:	d048      	beq.n	bed8 <__aeabi_dsub+0x10c>
    be46:	2380      	movs	r3, #128	; 0x80
    be48:	041b      	lsls	r3, r3, #16
    be4a:	4319      	orrs	r1, r3
    be4c:	2d38      	cmp	r5, #56	; 0x38
    be4e:	dd00      	ble.n	be52 <__aeabi_dsub+0x86>
    be50:	e119      	b.n	c086 <__aeabi_dsub+0x2ba>
    be52:	2d1f      	cmp	r5, #31
    be54:	dd00      	ble.n	be58 <__aeabi_dsub+0x8c>
    be56:	e14c      	b.n	c0f2 <__aeabi_dsub+0x326>
    be58:	2320      	movs	r3, #32
    be5a:	000f      	movs	r7, r1
    be5c:	1b5b      	subs	r3, r3, r5
    be5e:	0010      	movs	r0, r2
    be60:	409a      	lsls	r2, r3
    be62:	409f      	lsls	r7, r3
    be64:	40e8      	lsrs	r0, r5
    be66:	1e53      	subs	r3, r2, #1
    be68:	419a      	sbcs	r2, r3
    be6a:	40e9      	lsrs	r1, r5
    be6c:	4307      	orrs	r7, r0
    be6e:	4317      	orrs	r7, r2
    be70:	4653      	mov	r3, sl
    be72:	1bdf      	subs	r7, r3, r7
    be74:	1a61      	subs	r1, r4, r1
    be76:	45ba      	cmp	sl, r7
    be78:	41a4      	sbcs	r4, r4
    be7a:	4264      	negs	r4, r4
    be7c:	1b0c      	subs	r4, r1, r4
    be7e:	0223      	lsls	r3, r4, #8
    be80:	d400      	bmi.n	be84 <__aeabi_dsub+0xb8>
    be82:	e0c5      	b.n	c010 <__aeabi_dsub+0x244>
    be84:	0264      	lsls	r4, r4, #9
    be86:	0a65      	lsrs	r5, r4, #9
    be88:	2d00      	cmp	r5, #0
    be8a:	d100      	bne.n	be8e <__aeabi_dsub+0xc2>
    be8c:	e0f6      	b.n	c07c <__aeabi_dsub+0x2b0>
    be8e:	0028      	movs	r0, r5
    be90:	f000 fc5c 	bl	c74c <__clzsi2>
    be94:	0003      	movs	r3, r0
    be96:	3b08      	subs	r3, #8
    be98:	2b1f      	cmp	r3, #31
    be9a:	dd00      	ble.n	be9e <__aeabi_dsub+0xd2>
    be9c:	e0e9      	b.n	c072 <__aeabi_dsub+0x2a6>
    be9e:	2220      	movs	r2, #32
    bea0:	003c      	movs	r4, r7
    bea2:	1ad2      	subs	r2, r2, r3
    bea4:	409d      	lsls	r5, r3
    bea6:	40d4      	lsrs	r4, r2
    bea8:	409f      	lsls	r7, r3
    beaa:	4325      	orrs	r5, r4
    beac:	429e      	cmp	r6, r3
    beae:	dd00      	ble.n	beb2 <__aeabi_dsub+0xe6>
    beb0:	e0db      	b.n	c06a <__aeabi_dsub+0x29e>
    beb2:	1b9e      	subs	r6, r3, r6
    beb4:	1c73      	adds	r3, r6, #1
    beb6:	2b1f      	cmp	r3, #31
    beb8:	dd00      	ble.n	bebc <__aeabi_dsub+0xf0>
    beba:	e10a      	b.n	c0d2 <__aeabi_dsub+0x306>
    bebc:	2220      	movs	r2, #32
    bebe:	0038      	movs	r0, r7
    bec0:	1ad2      	subs	r2, r2, r3
    bec2:	0029      	movs	r1, r5
    bec4:	4097      	lsls	r7, r2
    bec6:	002c      	movs	r4, r5
    bec8:	4091      	lsls	r1, r2
    beca:	40d8      	lsrs	r0, r3
    becc:	1e7a      	subs	r2, r7, #1
    bece:	4197      	sbcs	r7, r2
    bed0:	40dc      	lsrs	r4, r3
    bed2:	2600      	movs	r6, #0
    bed4:	4301      	orrs	r1, r0
    bed6:	430f      	orrs	r7, r1
    bed8:	077b      	lsls	r3, r7, #29
    beda:	d009      	beq.n	bef0 <__aeabi_dsub+0x124>
    bedc:	230f      	movs	r3, #15
    bede:	403b      	ands	r3, r7
    bee0:	2b04      	cmp	r3, #4
    bee2:	d005      	beq.n	bef0 <__aeabi_dsub+0x124>
    bee4:	1d3b      	adds	r3, r7, #4
    bee6:	42bb      	cmp	r3, r7
    bee8:	41bf      	sbcs	r7, r7
    beea:	427f      	negs	r7, r7
    beec:	19e4      	adds	r4, r4, r7
    beee:	001f      	movs	r7, r3
    bef0:	0223      	lsls	r3, r4, #8
    bef2:	d525      	bpl.n	bf40 <__aeabi_dsub+0x174>
    bef4:	4b86      	ldr	r3, [pc, #536]	; (c110 <__aeabi_dsub+0x344>)
    bef6:	3601      	adds	r6, #1
    bef8:	429e      	cmp	r6, r3
    befa:	d100      	bne.n	befe <__aeabi_dsub+0x132>
    befc:	e0af      	b.n	c05e <__aeabi_dsub+0x292>
    befe:	4b85      	ldr	r3, [pc, #532]	; (c114 <__aeabi_dsub+0x348>)
    bf00:	2501      	movs	r5, #1
    bf02:	401c      	ands	r4, r3
    bf04:	4643      	mov	r3, r8
    bf06:	0762      	lsls	r2, r4, #29
    bf08:	08ff      	lsrs	r7, r7, #3
    bf0a:	0264      	lsls	r4, r4, #9
    bf0c:	0576      	lsls	r6, r6, #21
    bf0e:	4317      	orrs	r7, r2
    bf10:	0b24      	lsrs	r4, r4, #12
    bf12:	0d76      	lsrs	r6, r6, #21
    bf14:	401d      	ands	r5, r3
    bf16:	2100      	movs	r1, #0
    bf18:	0324      	lsls	r4, r4, #12
    bf1a:	0b23      	lsrs	r3, r4, #12
    bf1c:	0d0c      	lsrs	r4, r1, #20
    bf1e:	4a7e      	ldr	r2, [pc, #504]	; (c118 <__aeabi_dsub+0x34c>)
    bf20:	0524      	lsls	r4, r4, #20
    bf22:	431c      	orrs	r4, r3
    bf24:	4014      	ands	r4, r2
    bf26:	0533      	lsls	r3, r6, #20
    bf28:	4323      	orrs	r3, r4
    bf2a:	005b      	lsls	r3, r3, #1
    bf2c:	07ed      	lsls	r5, r5, #31
    bf2e:	085b      	lsrs	r3, r3, #1
    bf30:	432b      	orrs	r3, r5
    bf32:	0038      	movs	r0, r7
    bf34:	0019      	movs	r1, r3
    bf36:	bc1c      	pop	{r2, r3, r4}
    bf38:	4690      	mov	r8, r2
    bf3a:	4699      	mov	r9, r3
    bf3c:	46a2      	mov	sl, r4
    bf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf40:	2501      	movs	r5, #1
    bf42:	4643      	mov	r3, r8
    bf44:	0762      	lsls	r2, r4, #29
    bf46:	08ff      	lsrs	r7, r7, #3
    bf48:	4317      	orrs	r7, r2
    bf4a:	08e4      	lsrs	r4, r4, #3
    bf4c:	401d      	ands	r5, r3
    bf4e:	4b70      	ldr	r3, [pc, #448]	; (c110 <__aeabi_dsub+0x344>)
    bf50:	429e      	cmp	r6, r3
    bf52:	d036      	beq.n	bfc2 <__aeabi_dsub+0x1f6>
    bf54:	0324      	lsls	r4, r4, #12
    bf56:	0576      	lsls	r6, r6, #21
    bf58:	0b24      	lsrs	r4, r4, #12
    bf5a:	0d76      	lsrs	r6, r6, #21
    bf5c:	e7db      	b.n	bf16 <__aeabi_dsub+0x14a>
    bf5e:	4663      	mov	r3, ip
    bf60:	1af3      	subs	r3, r6, r3
    bf62:	2b00      	cmp	r3, #0
    bf64:	dc00      	bgt.n	bf68 <__aeabi_dsub+0x19c>
    bf66:	e094      	b.n	c092 <__aeabi_dsub+0x2c6>
    bf68:	4660      	mov	r0, ip
    bf6a:	2800      	cmp	r0, #0
    bf6c:	d035      	beq.n	bfda <__aeabi_dsub+0x20e>
    bf6e:	4868      	ldr	r0, [pc, #416]	; (c110 <__aeabi_dsub+0x344>)
    bf70:	4286      	cmp	r6, r0
    bf72:	d0b1      	beq.n	bed8 <__aeabi_dsub+0x10c>
    bf74:	2780      	movs	r7, #128	; 0x80
    bf76:	043f      	lsls	r7, r7, #16
    bf78:	4339      	orrs	r1, r7
    bf7a:	2b38      	cmp	r3, #56	; 0x38
    bf7c:	dc00      	bgt.n	bf80 <__aeabi_dsub+0x1b4>
    bf7e:	e0fd      	b.n	c17c <__aeabi_dsub+0x3b0>
    bf80:	430a      	orrs	r2, r1
    bf82:	0017      	movs	r7, r2
    bf84:	2100      	movs	r1, #0
    bf86:	1e7a      	subs	r2, r7, #1
    bf88:	4197      	sbcs	r7, r2
    bf8a:	4457      	add	r7, sl
    bf8c:	4557      	cmp	r7, sl
    bf8e:	4180      	sbcs	r0, r0
    bf90:	1909      	adds	r1, r1, r4
    bf92:	4244      	negs	r4, r0
    bf94:	190c      	adds	r4, r1, r4
    bf96:	0223      	lsls	r3, r4, #8
    bf98:	d53a      	bpl.n	c010 <__aeabi_dsub+0x244>
    bf9a:	4b5d      	ldr	r3, [pc, #372]	; (c110 <__aeabi_dsub+0x344>)
    bf9c:	3601      	adds	r6, #1
    bf9e:	429e      	cmp	r6, r3
    bfa0:	d100      	bne.n	bfa4 <__aeabi_dsub+0x1d8>
    bfa2:	e14b      	b.n	c23c <__aeabi_dsub+0x470>
    bfa4:	2201      	movs	r2, #1
    bfa6:	4b5b      	ldr	r3, [pc, #364]	; (c114 <__aeabi_dsub+0x348>)
    bfa8:	401c      	ands	r4, r3
    bfaa:	087b      	lsrs	r3, r7, #1
    bfac:	4017      	ands	r7, r2
    bfae:	431f      	orrs	r7, r3
    bfb0:	07e2      	lsls	r2, r4, #31
    bfb2:	4317      	orrs	r7, r2
    bfb4:	0864      	lsrs	r4, r4, #1
    bfb6:	e78f      	b.n	bed8 <__aeabi_dsub+0x10c>
    bfb8:	0008      	movs	r0, r1
    bfba:	4310      	orrs	r0, r2
    bfbc:	d000      	beq.n	bfc0 <__aeabi_dsub+0x1f4>
    bfbe:	e724      	b.n	be0a <__aeabi_dsub+0x3e>
    bfc0:	e721      	b.n	be06 <__aeabi_dsub+0x3a>
    bfc2:	0023      	movs	r3, r4
    bfc4:	433b      	orrs	r3, r7
    bfc6:	d100      	bne.n	bfca <__aeabi_dsub+0x1fe>
    bfc8:	e1b9      	b.n	c33e <__aeabi_dsub+0x572>
    bfca:	2280      	movs	r2, #128	; 0x80
    bfcc:	0312      	lsls	r2, r2, #12
    bfce:	4314      	orrs	r4, r2
    bfd0:	0324      	lsls	r4, r4, #12
    bfd2:	0b24      	lsrs	r4, r4, #12
    bfd4:	e79f      	b.n	bf16 <__aeabi_dsub+0x14a>
    bfd6:	002e      	movs	r6, r5
    bfd8:	e77e      	b.n	bed8 <__aeabi_dsub+0x10c>
    bfda:	0008      	movs	r0, r1
    bfdc:	4310      	orrs	r0, r2
    bfde:	d100      	bne.n	bfe2 <__aeabi_dsub+0x216>
    bfe0:	e0ca      	b.n	c178 <__aeabi_dsub+0x3ac>
    bfe2:	1e58      	subs	r0, r3, #1
    bfe4:	4684      	mov	ip, r0
    bfe6:	2800      	cmp	r0, #0
    bfe8:	d000      	beq.n	bfec <__aeabi_dsub+0x220>
    bfea:	e0e7      	b.n	c1bc <__aeabi_dsub+0x3f0>
    bfec:	4452      	add	r2, sl
    bfee:	4552      	cmp	r2, sl
    bff0:	4180      	sbcs	r0, r0
    bff2:	1864      	adds	r4, r4, r1
    bff4:	4240      	negs	r0, r0
    bff6:	1824      	adds	r4, r4, r0
    bff8:	0017      	movs	r7, r2
    bffa:	2601      	movs	r6, #1
    bffc:	0223      	lsls	r3, r4, #8
    bffe:	d507      	bpl.n	c010 <__aeabi_dsub+0x244>
    c000:	2602      	movs	r6, #2
    c002:	e7cf      	b.n	bfa4 <__aeabi_dsub+0x1d8>
    c004:	4664      	mov	r4, ip
    c006:	432c      	orrs	r4, r5
    c008:	d100      	bne.n	c00c <__aeabi_dsub+0x240>
    c00a:	e1b3      	b.n	c374 <__aeabi_dsub+0x5a8>
    c00c:	002c      	movs	r4, r5
    c00e:	4667      	mov	r7, ip
    c010:	077b      	lsls	r3, r7, #29
    c012:	d000      	beq.n	c016 <__aeabi_dsub+0x24a>
    c014:	e762      	b.n	bedc <__aeabi_dsub+0x110>
    c016:	0763      	lsls	r3, r4, #29
    c018:	08ff      	lsrs	r7, r7, #3
    c01a:	431f      	orrs	r7, r3
    c01c:	2501      	movs	r5, #1
    c01e:	4643      	mov	r3, r8
    c020:	08e4      	lsrs	r4, r4, #3
    c022:	401d      	ands	r5, r3
    c024:	e793      	b.n	bf4e <__aeabi_dsub+0x182>
    c026:	2d00      	cmp	r5, #0
    c028:	d178      	bne.n	c11c <__aeabi_dsub+0x350>
    c02a:	1c75      	adds	r5, r6, #1
    c02c:	056d      	lsls	r5, r5, #21
    c02e:	0d6d      	lsrs	r5, r5, #21
    c030:	2d01      	cmp	r5, #1
    c032:	dc00      	bgt.n	c036 <__aeabi_dsub+0x26a>
    c034:	e0f2      	b.n	c21c <__aeabi_dsub+0x450>
    c036:	4650      	mov	r0, sl
    c038:	1a80      	subs	r0, r0, r2
    c03a:	4582      	cmp	sl, r0
    c03c:	41bf      	sbcs	r7, r7
    c03e:	1a65      	subs	r5, r4, r1
    c040:	427f      	negs	r7, r7
    c042:	1bed      	subs	r5, r5, r7
    c044:	4684      	mov	ip, r0
    c046:	0228      	lsls	r0, r5, #8
    c048:	d400      	bmi.n	c04c <__aeabi_dsub+0x280>
    c04a:	e08c      	b.n	c166 <__aeabi_dsub+0x39a>
    c04c:	4650      	mov	r0, sl
    c04e:	1a17      	subs	r7, r2, r0
    c050:	42ba      	cmp	r2, r7
    c052:	4192      	sbcs	r2, r2
    c054:	1b0c      	subs	r4, r1, r4
    c056:	4255      	negs	r5, r2
    c058:	1b65      	subs	r5, r4, r5
    c05a:	4698      	mov	r8, r3
    c05c:	e714      	b.n	be88 <__aeabi_dsub+0xbc>
    c05e:	2501      	movs	r5, #1
    c060:	4643      	mov	r3, r8
    c062:	2400      	movs	r4, #0
    c064:	401d      	ands	r5, r3
    c066:	2700      	movs	r7, #0
    c068:	e755      	b.n	bf16 <__aeabi_dsub+0x14a>
    c06a:	4c2a      	ldr	r4, [pc, #168]	; (c114 <__aeabi_dsub+0x348>)
    c06c:	1af6      	subs	r6, r6, r3
    c06e:	402c      	ands	r4, r5
    c070:	e732      	b.n	bed8 <__aeabi_dsub+0x10c>
    c072:	003d      	movs	r5, r7
    c074:	3828      	subs	r0, #40	; 0x28
    c076:	4085      	lsls	r5, r0
    c078:	2700      	movs	r7, #0
    c07a:	e717      	b.n	beac <__aeabi_dsub+0xe0>
    c07c:	0038      	movs	r0, r7
    c07e:	f000 fb65 	bl	c74c <__clzsi2>
    c082:	3020      	adds	r0, #32
    c084:	e706      	b.n	be94 <__aeabi_dsub+0xc8>
    c086:	430a      	orrs	r2, r1
    c088:	0017      	movs	r7, r2
    c08a:	2100      	movs	r1, #0
    c08c:	1e7a      	subs	r2, r7, #1
    c08e:	4197      	sbcs	r7, r2
    c090:	e6ee      	b.n	be70 <__aeabi_dsub+0xa4>
    c092:	2b00      	cmp	r3, #0
    c094:	d000      	beq.n	c098 <__aeabi_dsub+0x2cc>
    c096:	e0e5      	b.n	c264 <__aeabi_dsub+0x498>
    c098:	1c73      	adds	r3, r6, #1
    c09a:	469c      	mov	ip, r3
    c09c:	055b      	lsls	r3, r3, #21
    c09e:	0d5b      	lsrs	r3, r3, #21
    c0a0:	2b01      	cmp	r3, #1
    c0a2:	dc00      	bgt.n	c0a6 <__aeabi_dsub+0x2da>
    c0a4:	e09f      	b.n	c1e6 <__aeabi_dsub+0x41a>
    c0a6:	4b1a      	ldr	r3, [pc, #104]	; (c110 <__aeabi_dsub+0x344>)
    c0a8:	459c      	cmp	ip, r3
    c0aa:	d100      	bne.n	c0ae <__aeabi_dsub+0x2e2>
    c0ac:	e0c5      	b.n	c23a <__aeabi_dsub+0x46e>
    c0ae:	4452      	add	r2, sl
    c0b0:	4552      	cmp	r2, sl
    c0b2:	4180      	sbcs	r0, r0
    c0b4:	1864      	adds	r4, r4, r1
    c0b6:	4240      	negs	r0, r0
    c0b8:	1824      	adds	r4, r4, r0
    c0ba:	07e7      	lsls	r7, r4, #31
    c0bc:	0852      	lsrs	r2, r2, #1
    c0be:	4317      	orrs	r7, r2
    c0c0:	0864      	lsrs	r4, r4, #1
    c0c2:	4666      	mov	r6, ip
    c0c4:	e708      	b.n	bed8 <__aeabi_dsub+0x10c>
    c0c6:	4812      	ldr	r0, [pc, #72]	; (c110 <__aeabi_dsub+0x344>)
    c0c8:	4285      	cmp	r5, r0
    c0ca:	d100      	bne.n	c0ce <__aeabi_dsub+0x302>
    c0cc:	e085      	b.n	c1da <__aeabi_dsub+0x40e>
    c0ce:	001d      	movs	r5, r3
    c0d0:	e6bc      	b.n	be4c <__aeabi_dsub+0x80>
    c0d2:	0029      	movs	r1, r5
    c0d4:	3e1f      	subs	r6, #31
    c0d6:	40f1      	lsrs	r1, r6
    c0d8:	2b20      	cmp	r3, #32
    c0da:	d100      	bne.n	c0de <__aeabi_dsub+0x312>
    c0dc:	e07f      	b.n	c1de <__aeabi_dsub+0x412>
    c0de:	2240      	movs	r2, #64	; 0x40
    c0e0:	1ad3      	subs	r3, r2, r3
    c0e2:	409d      	lsls	r5, r3
    c0e4:	432f      	orrs	r7, r5
    c0e6:	1e7d      	subs	r5, r7, #1
    c0e8:	41af      	sbcs	r7, r5
    c0ea:	2400      	movs	r4, #0
    c0ec:	430f      	orrs	r7, r1
    c0ee:	2600      	movs	r6, #0
    c0f0:	e78e      	b.n	c010 <__aeabi_dsub+0x244>
    c0f2:	002b      	movs	r3, r5
    c0f4:	000f      	movs	r7, r1
    c0f6:	3b20      	subs	r3, #32
    c0f8:	40df      	lsrs	r7, r3
    c0fa:	2d20      	cmp	r5, #32
    c0fc:	d071      	beq.n	c1e2 <__aeabi_dsub+0x416>
    c0fe:	2340      	movs	r3, #64	; 0x40
    c100:	1b5d      	subs	r5, r3, r5
    c102:	40a9      	lsls	r1, r5
    c104:	430a      	orrs	r2, r1
    c106:	1e51      	subs	r1, r2, #1
    c108:	418a      	sbcs	r2, r1
    c10a:	2100      	movs	r1, #0
    c10c:	4317      	orrs	r7, r2
    c10e:	e6af      	b.n	be70 <__aeabi_dsub+0xa4>
    c110:	000007ff 	.word	0x000007ff
    c114:	ff7fffff 	.word	0xff7fffff
    c118:	800fffff 	.word	0x800fffff
    c11c:	2e00      	cmp	r6, #0
    c11e:	d03e      	beq.n	c19e <__aeabi_dsub+0x3d2>
    c120:	4eb3      	ldr	r6, [pc, #716]	; (c3f0 <__aeabi_dsub+0x624>)
    c122:	45b4      	cmp	ip, r6
    c124:	d045      	beq.n	c1b2 <__aeabi_dsub+0x3e6>
    c126:	2680      	movs	r6, #128	; 0x80
    c128:	0436      	lsls	r6, r6, #16
    c12a:	426d      	negs	r5, r5
    c12c:	4334      	orrs	r4, r6
    c12e:	2d38      	cmp	r5, #56	; 0x38
    c130:	dd00      	ble.n	c134 <__aeabi_dsub+0x368>
    c132:	e0a8      	b.n	c286 <__aeabi_dsub+0x4ba>
    c134:	2d1f      	cmp	r5, #31
    c136:	dd00      	ble.n	c13a <__aeabi_dsub+0x36e>
    c138:	e11f      	b.n	c37a <__aeabi_dsub+0x5ae>
    c13a:	2620      	movs	r6, #32
    c13c:	0027      	movs	r7, r4
    c13e:	4650      	mov	r0, sl
    c140:	1b76      	subs	r6, r6, r5
    c142:	40b7      	lsls	r7, r6
    c144:	40e8      	lsrs	r0, r5
    c146:	4307      	orrs	r7, r0
    c148:	4650      	mov	r0, sl
    c14a:	40b0      	lsls	r0, r6
    c14c:	1e46      	subs	r6, r0, #1
    c14e:	41b0      	sbcs	r0, r6
    c150:	40ec      	lsrs	r4, r5
    c152:	4338      	orrs	r0, r7
    c154:	1a17      	subs	r7, r2, r0
    c156:	42ba      	cmp	r2, r7
    c158:	4192      	sbcs	r2, r2
    c15a:	1b0c      	subs	r4, r1, r4
    c15c:	4252      	negs	r2, r2
    c15e:	1aa4      	subs	r4, r4, r2
    c160:	4666      	mov	r6, ip
    c162:	4698      	mov	r8, r3
    c164:	e68b      	b.n	be7e <__aeabi_dsub+0xb2>
    c166:	4664      	mov	r4, ip
    c168:	4667      	mov	r7, ip
    c16a:	432c      	orrs	r4, r5
    c16c:	d000      	beq.n	c170 <__aeabi_dsub+0x3a4>
    c16e:	e68b      	b.n	be88 <__aeabi_dsub+0xbc>
    c170:	2500      	movs	r5, #0
    c172:	2600      	movs	r6, #0
    c174:	2700      	movs	r7, #0
    c176:	e6ea      	b.n	bf4e <__aeabi_dsub+0x182>
    c178:	001e      	movs	r6, r3
    c17a:	e6ad      	b.n	bed8 <__aeabi_dsub+0x10c>
    c17c:	2b1f      	cmp	r3, #31
    c17e:	dc60      	bgt.n	c242 <__aeabi_dsub+0x476>
    c180:	2720      	movs	r7, #32
    c182:	1af8      	subs	r0, r7, r3
    c184:	000f      	movs	r7, r1
    c186:	4684      	mov	ip, r0
    c188:	4087      	lsls	r7, r0
    c18a:	0010      	movs	r0, r2
    c18c:	40d8      	lsrs	r0, r3
    c18e:	4307      	orrs	r7, r0
    c190:	4660      	mov	r0, ip
    c192:	4082      	lsls	r2, r0
    c194:	1e50      	subs	r0, r2, #1
    c196:	4182      	sbcs	r2, r0
    c198:	40d9      	lsrs	r1, r3
    c19a:	4317      	orrs	r7, r2
    c19c:	e6f5      	b.n	bf8a <__aeabi_dsub+0x1be>
    c19e:	0026      	movs	r6, r4
    c1a0:	4650      	mov	r0, sl
    c1a2:	4306      	orrs	r6, r0
    c1a4:	d005      	beq.n	c1b2 <__aeabi_dsub+0x3e6>
    c1a6:	43ed      	mvns	r5, r5
    c1a8:	2d00      	cmp	r5, #0
    c1aa:	d0d3      	beq.n	c154 <__aeabi_dsub+0x388>
    c1ac:	4e90      	ldr	r6, [pc, #576]	; (c3f0 <__aeabi_dsub+0x624>)
    c1ae:	45b4      	cmp	ip, r6
    c1b0:	d1bd      	bne.n	c12e <__aeabi_dsub+0x362>
    c1b2:	000c      	movs	r4, r1
    c1b4:	0017      	movs	r7, r2
    c1b6:	4666      	mov	r6, ip
    c1b8:	4698      	mov	r8, r3
    c1ba:	e68d      	b.n	bed8 <__aeabi_dsub+0x10c>
    c1bc:	488c      	ldr	r0, [pc, #560]	; (c3f0 <__aeabi_dsub+0x624>)
    c1be:	4283      	cmp	r3, r0
    c1c0:	d00b      	beq.n	c1da <__aeabi_dsub+0x40e>
    c1c2:	4663      	mov	r3, ip
    c1c4:	e6d9      	b.n	bf7a <__aeabi_dsub+0x1ae>
    c1c6:	2d00      	cmp	r5, #0
    c1c8:	d000      	beq.n	c1cc <__aeabi_dsub+0x400>
    c1ca:	e096      	b.n	c2fa <__aeabi_dsub+0x52e>
    c1cc:	0008      	movs	r0, r1
    c1ce:	4310      	orrs	r0, r2
    c1d0:	d100      	bne.n	c1d4 <__aeabi_dsub+0x408>
    c1d2:	e0e2      	b.n	c39a <__aeabi_dsub+0x5ce>
    c1d4:	000c      	movs	r4, r1
    c1d6:	0017      	movs	r7, r2
    c1d8:	4698      	mov	r8, r3
    c1da:	4e85      	ldr	r6, [pc, #532]	; (c3f0 <__aeabi_dsub+0x624>)
    c1dc:	e67c      	b.n	bed8 <__aeabi_dsub+0x10c>
    c1de:	2500      	movs	r5, #0
    c1e0:	e780      	b.n	c0e4 <__aeabi_dsub+0x318>
    c1e2:	2100      	movs	r1, #0
    c1e4:	e78e      	b.n	c104 <__aeabi_dsub+0x338>
    c1e6:	0023      	movs	r3, r4
    c1e8:	4650      	mov	r0, sl
    c1ea:	4303      	orrs	r3, r0
    c1ec:	2e00      	cmp	r6, #0
    c1ee:	d000      	beq.n	c1f2 <__aeabi_dsub+0x426>
    c1f0:	e0a8      	b.n	c344 <__aeabi_dsub+0x578>
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d100      	bne.n	c1f8 <__aeabi_dsub+0x42c>
    c1f6:	e0de      	b.n	c3b6 <__aeabi_dsub+0x5ea>
    c1f8:	000b      	movs	r3, r1
    c1fa:	4313      	orrs	r3, r2
    c1fc:	d100      	bne.n	c200 <__aeabi_dsub+0x434>
    c1fe:	e66b      	b.n	bed8 <__aeabi_dsub+0x10c>
    c200:	4452      	add	r2, sl
    c202:	4552      	cmp	r2, sl
    c204:	4180      	sbcs	r0, r0
    c206:	1864      	adds	r4, r4, r1
    c208:	4240      	negs	r0, r0
    c20a:	1824      	adds	r4, r4, r0
    c20c:	0017      	movs	r7, r2
    c20e:	0223      	lsls	r3, r4, #8
    c210:	d400      	bmi.n	c214 <__aeabi_dsub+0x448>
    c212:	e6fd      	b.n	c010 <__aeabi_dsub+0x244>
    c214:	4b77      	ldr	r3, [pc, #476]	; (c3f4 <__aeabi_dsub+0x628>)
    c216:	4666      	mov	r6, ip
    c218:	401c      	ands	r4, r3
    c21a:	e65d      	b.n	bed8 <__aeabi_dsub+0x10c>
    c21c:	0025      	movs	r5, r4
    c21e:	4650      	mov	r0, sl
    c220:	4305      	orrs	r5, r0
    c222:	2e00      	cmp	r6, #0
    c224:	d1cf      	bne.n	c1c6 <__aeabi_dsub+0x3fa>
    c226:	2d00      	cmp	r5, #0
    c228:	d14f      	bne.n	c2ca <__aeabi_dsub+0x4fe>
    c22a:	000c      	movs	r4, r1
    c22c:	4314      	orrs	r4, r2
    c22e:	d100      	bne.n	c232 <__aeabi_dsub+0x466>
    c230:	e0a0      	b.n	c374 <__aeabi_dsub+0x5a8>
    c232:	000c      	movs	r4, r1
    c234:	0017      	movs	r7, r2
    c236:	4698      	mov	r8, r3
    c238:	e64e      	b.n	bed8 <__aeabi_dsub+0x10c>
    c23a:	4666      	mov	r6, ip
    c23c:	2400      	movs	r4, #0
    c23e:	2700      	movs	r7, #0
    c240:	e685      	b.n	bf4e <__aeabi_dsub+0x182>
    c242:	001f      	movs	r7, r3
    c244:	0008      	movs	r0, r1
    c246:	3f20      	subs	r7, #32
    c248:	40f8      	lsrs	r0, r7
    c24a:	0007      	movs	r7, r0
    c24c:	2b20      	cmp	r3, #32
    c24e:	d100      	bne.n	c252 <__aeabi_dsub+0x486>
    c250:	e08e      	b.n	c370 <__aeabi_dsub+0x5a4>
    c252:	2040      	movs	r0, #64	; 0x40
    c254:	1ac3      	subs	r3, r0, r3
    c256:	4099      	lsls	r1, r3
    c258:	430a      	orrs	r2, r1
    c25a:	1e51      	subs	r1, r2, #1
    c25c:	418a      	sbcs	r2, r1
    c25e:	2100      	movs	r1, #0
    c260:	4317      	orrs	r7, r2
    c262:	e692      	b.n	bf8a <__aeabi_dsub+0x1be>
    c264:	2e00      	cmp	r6, #0
    c266:	d114      	bne.n	c292 <__aeabi_dsub+0x4c6>
    c268:	0026      	movs	r6, r4
    c26a:	4650      	mov	r0, sl
    c26c:	4306      	orrs	r6, r0
    c26e:	d062      	beq.n	c336 <__aeabi_dsub+0x56a>
    c270:	43db      	mvns	r3, r3
    c272:	2b00      	cmp	r3, #0
    c274:	d15c      	bne.n	c330 <__aeabi_dsub+0x564>
    c276:	1887      	adds	r7, r0, r2
    c278:	4297      	cmp	r7, r2
    c27a:	4192      	sbcs	r2, r2
    c27c:	1864      	adds	r4, r4, r1
    c27e:	4252      	negs	r2, r2
    c280:	18a4      	adds	r4, r4, r2
    c282:	4666      	mov	r6, ip
    c284:	e687      	b.n	bf96 <__aeabi_dsub+0x1ca>
    c286:	4650      	mov	r0, sl
    c288:	4320      	orrs	r0, r4
    c28a:	1e44      	subs	r4, r0, #1
    c28c:	41a0      	sbcs	r0, r4
    c28e:	2400      	movs	r4, #0
    c290:	e760      	b.n	c154 <__aeabi_dsub+0x388>
    c292:	4e57      	ldr	r6, [pc, #348]	; (c3f0 <__aeabi_dsub+0x624>)
    c294:	45b4      	cmp	ip, r6
    c296:	d04e      	beq.n	c336 <__aeabi_dsub+0x56a>
    c298:	2680      	movs	r6, #128	; 0x80
    c29a:	0436      	lsls	r6, r6, #16
    c29c:	425b      	negs	r3, r3
    c29e:	4334      	orrs	r4, r6
    c2a0:	2b38      	cmp	r3, #56	; 0x38
    c2a2:	dd00      	ble.n	c2a6 <__aeabi_dsub+0x4da>
    c2a4:	e07f      	b.n	c3a6 <__aeabi_dsub+0x5da>
    c2a6:	2b1f      	cmp	r3, #31
    c2a8:	dd00      	ble.n	c2ac <__aeabi_dsub+0x4e0>
    c2aa:	e08b      	b.n	c3c4 <__aeabi_dsub+0x5f8>
    c2ac:	2620      	movs	r6, #32
    c2ae:	0027      	movs	r7, r4
    c2b0:	4650      	mov	r0, sl
    c2b2:	1af6      	subs	r6, r6, r3
    c2b4:	40b7      	lsls	r7, r6
    c2b6:	40d8      	lsrs	r0, r3
    c2b8:	4307      	orrs	r7, r0
    c2ba:	4650      	mov	r0, sl
    c2bc:	40b0      	lsls	r0, r6
    c2be:	1e46      	subs	r6, r0, #1
    c2c0:	41b0      	sbcs	r0, r6
    c2c2:	4307      	orrs	r7, r0
    c2c4:	40dc      	lsrs	r4, r3
    c2c6:	18bf      	adds	r7, r7, r2
    c2c8:	e7d6      	b.n	c278 <__aeabi_dsub+0x4ac>
    c2ca:	000d      	movs	r5, r1
    c2cc:	4315      	orrs	r5, r2
    c2ce:	d100      	bne.n	c2d2 <__aeabi_dsub+0x506>
    c2d0:	e602      	b.n	bed8 <__aeabi_dsub+0x10c>
    c2d2:	4650      	mov	r0, sl
    c2d4:	1a80      	subs	r0, r0, r2
    c2d6:	4582      	cmp	sl, r0
    c2d8:	41bf      	sbcs	r7, r7
    c2da:	1a65      	subs	r5, r4, r1
    c2dc:	427f      	negs	r7, r7
    c2de:	1bed      	subs	r5, r5, r7
    c2e0:	4684      	mov	ip, r0
    c2e2:	0228      	lsls	r0, r5, #8
    c2e4:	d400      	bmi.n	c2e8 <__aeabi_dsub+0x51c>
    c2e6:	e68d      	b.n	c004 <__aeabi_dsub+0x238>
    c2e8:	4650      	mov	r0, sl
    c2ea:	1a17      	subs	r7, r2, r0
    c2ec:	42ba      	cmp	r2, r7
    c2ee:	4192      	sbcs	r2, r2
    c2f0:	1b0c      	subs	r4, r1, r4
    c2f2:	4252      	negs	r2, r2
    c2f4:	1aa4      	subs	r4, r4, r2
    c2f6:	4698      	mov	r8, r3
    c2f8:	e5ee      	b.n	bed8 <__aeabi_dsub+0x10c>
    c2fa:	000d      	movs	r5, r1
    c2fc:	4315      	orrs	r5, r2
    c2fe:	d100      	bne.n	c302 <__aeabi_dsub+0x536>
    c300:	e76b      	b.n	c1da <__aeabi_dsub+0x40e>
    c302:	4650      	mov	r0, sl
    c304:	0767      	lsls	r7, r4, #29
    c306:	08c0      	lsrs	r0, r0, #3
    c308:	4307      	orrs	r7, r0
    c30a:	2080      	movs	r0, #128	; 0x80
    c30c:	08e4      	lsrs	r4, r4, #3
    c30e:	0300      	lsls	r0, r0, #12
    c310:	4204      	tst	r4, r0
    c312:	d007      	beq.n	c324 <__aeabi_dsub+0x558>
    c314:	08cd      	lsrs	r5, r1, #3
    c316:	4205      	tst	r5, r0
    c318:	d104      	bne.n	c324 <__aeabi_dsub+0x558>
    c31a:	002c      	movs	r4, r5
    c31c:	4698      	mov	r8, r3
    c31e:	08d7      	lsrs	r7, r2, #3
    c320:	0749      	lsls	r1, r1, #29
    c322:	430f      	orrs	r7, r1
    c324:	0f7b      	lsrs	r3, r7, #29
    c326:	00e4      	lsls	r4, r4, #3
    c328:	431c      	orrs	r4, r3
    c32a:	00ff      	lsls	r7, r7, #3
    c32c:	4e30      	ldr	r6, [pc, #192]	; (c3f0 <__aeabi_dsub+0x624>)
    c32e:	e5d3      	b.n	bed8 <__aeabi_dsub+0x10c>
    c330:	4e2f      	ldr	r6, [pc, #188]	; (c3f0 <__aeabi_dsub+0x624>)
    c332:	45b4      	cmp	ip, r6
    c334:	d1b4      	bne.n	c2a0 <__aeabi_dsub+0x4d4>
    c336:	000c      	movs	r4, r1
    c338:	0017      	movs	r7, r2
    c33a:	4666      	mov	r6, ip
    c33c:	e5cc      	b.n	bed8 <__aeabi_dsub+0x10c>
    c33e:	2700      	movs	r7, #0
    c340:	2400      	movs	r4, #0
    c342:	e5e8      	b.n	bf16 <__aeabi_dsub+0x14a>
    c344:	2b00      	cmp	r3, #0
    c346:	d039      	beq.n	c3bc <__aeabi_dsub+0x5f0>
    c348:	000b      	movs	r3, r1
    c34a:	4313      	orrs	r3, r2
    c34c:	d100      	bne.n	c350 <__aeabi_dsub+0x584>
    c34e:	e744      	b.n	c1da <__aeabi_dsub+0x40e>
    c350:	08c0      	lsrs	r0, r0, #3
    c352:	0767      	lsls	r7, r4, #29
    c354:	4307      	orrs	r7, r0
    c356:	2080      	movs	r0, #128	; 0x80
    c358:	08e4      	lsrs	r4, r4, #3
    c35a:	0300      	lsls	r0, r0, #12
    c35c:	4204      	tst	r4, r0
    c35e:	d0e1      	beq.n	c324 <__aeabi_dsub+0x558>
    c360:	08cb      	lsrs	r3, r1, #3
    c362:	4203      	tst	r3, r0
    c364:	d1de      	bne.n	c324 <__aeabi_dsub+0x558>
    c366:	08d7      	lsrs	r7, r2, #3
    c368:	0749      	lsls	r1, r1, #29
    c36a:	430f      	orrs	r7, r1
    c36c:	001c      	movs	r4, r3
    c36e:	e7d9      	b.n	c324 <__aeabi_dsub+0x558>
    c370:	2100      	movs	r1, #0
    c372:	e771      	b.n	c258 <__aeabi_dsub+0x48c>
    c374:	2500      	movs	r5, #0
    c376:	2700      	movs	r7, #0
    c378:	e5e9      	b.n	bf4e <__aeabi_dsub+0x182>
    c37a:	002e      	movs	r6, r5
    c37c:	0027      	movs	r7, r4
    c37e:	3e20      	subs	r6, #32
    c380:	40f7      	lsrs	r7, r6
    c382:	2d20      	cmp	r5, #32
    c384:	d02f      	beq.n	c3e6 <__aeabi_dsub+0x61a>
    c386:	2640      	movs	r6, #64	; 0x40
    c388:	1b75      	subs	r5, r6, r5
    c38a:	40ac      	lsls	r4, r5
    c38c:	4650      	mov	r0, sl
    c38e:	4320      	orrs	r0, r4
    c390:	1e44      	subs	r4, r0, #1
    c392:	41a0      	sbcs	r0, r4
    c394:	2400      	movs	r4, #0
    c396:	4338      	orrs	r0, r7
    c398:	e6dc      	b.n	c154 <__aeabi_dsub+0x388>
    c39a:	2480      	movs	r4, #128	; 0x80
    c39c:	2500      	movs	r5, #0
    c39e:	0324      	lsls	r4, r4, #12
    c3a0:	4e13      	ldr	r6, [pc, #76]	; (c3f0 <__aeabi_dsub+0x624>)
    c3a2:	2700      	movs	r7, #0
    c3a4:	e5d3      	b.n	bf4e <__aeabi_dsub+0x182>
    c3a6:	4650      	mov	r0, sl
    c3a8:	4320      	orrs	r0, r4
    c3aa:	0007      	movs	r7, r0
    c3ac:	1e78      	subs	r0, r7, #1
    c3ae:	4187      	sbcs	r7, r0
    c3b0:	2400      	movs	r4, #0
    c3b2:	18bf      	adds	r7, r7, r2
    c3b4:	e760      	b.n	c278 <__aeabi_dsub+0x4ac>
    c3b6:	000c      	movs	r4, r1
    c3b8:	0017      	movs	r7, r2
    c3ba:	e58d      	b.n	bed8 <__aeabi_dsub+0x10c>
    c3bc:	000c      	movs	r4, r1
    c3be:	0017      	movs	r7, r2
    c3c0:	4e0b      	ldr	r6, [pc, #44]	; (c3f0 <__aeabi_dsub+0x624>)
    c3c2:	e589      	b.n	bed8 <__aeabi_dsub+0x10c>
    c3c4:	001e      	movs	r6, r3
    c3c6:	0027      	movs	r7, r4
    c3c8:	3e20      	subs	r6, #32
    c3ca:	40f7      	lsrs	r7, r6
    c3cc:	2b20      	cmp	r3, #32
    c3ce:	d00c      	beq.n	c3ea <__aeabi_dsub+0x61e>
    c3d0:	2640      	movs	r6, #64	; 0x40
    c3d2:	1af3      	subs	r3, r6, r3
    c3d4:	409c      	lsls	r4, r3
    c3d6:	4650      	mov	r0, sl
    c3d8:	4320      	orrs	r0, r4
    c3da:	1e44      	subs	r4, r0, #1
    c3dc:	41a0      	sbcs	r0, r4
    c3de:	4307      	orrs	r7, r0
    c3e0:	2400      	movs	r4, #0
    c3e2:	18bf      	adds	r7, r7, r2
    c3e4:	e748      	b.n	c278 <__aeabi_dsub+0x4ac>
    c3e6:	2400      	movs	r4, #0
    c3e8:	e7d0      	b.n	c38c <__aeabi_dsub+0x5c0>
    c3ea:	2400      	movs	r4, #0
    c3ec:	e7f3      	b.n	c3d6 <__aeabi_dsub+0x60a>
    c3ee:	46c0      	nop			; (mov r8, r8)
    c3f0:	000007ff 	.word	0x000007ff
    c3f4:	ff7fffff 	.word	0xff7fffff

0000c3f8 <__aeabi_dcmpun>:
    c3f8:	b570      	push	{r4, r5, r6, lr}
    c3fa:	4e0e      	ldr	r6, [pc, #56]	; (c434 <__aeabi_dcmpun+0x3c>)
    c3fc:	030d      	lsls	r5, r1, #12
    c3fe:	031c      	lsls	r4, r3, #12
    c400:	0049      	lsls	r1, r1, #1
    c402:	005b      	lsls	r3, r3, #1
    c404:	0b2d      	lsrs	r5, r5, #12
    c406:	0d49      	lsrs	r1, r1, #21
    c408:	0b24      	lsrs	r4, r4, #12
    c40a:	0d5b      	lsrs	r3, r3, #21
    c40c:	42b1      	cmp	r1, r6
    c40e:	d004      	beq.n	c41a <__aeabi_dcmpun+0x22>
    c410:	4908      	ldr	r1, [pc, #32]	; (c434 <__aeabi_dcmpun+0x3c>)
    c412:	2000      	movs	r0, #0
    c414:	428b      	cmp	r3, r1
    c416:	d008      	beq.n	c42a <__aeabi_dcmpun+0x32>
    c418:	bd70      	pop	{r4, r5, r6, pc}
    c41a:	4305      	orrs	r5, r0
    c41c:	2001      	movs	r0, #1
    c41e:	2d00      	cmp	r5, #0
    c420:	d1fa      	bne.n	c418 <__aeabi_dcmpun+0x20>
    c422:	4904      	ldr	r1, [pc, #16]	; (c434 <__aeabi_dcmpun+0x3c>)
    c424:	2000      	movs	r0, #0
    c426:	428b      	cmp	r3, r1
    c428:	d1f6      	bne.n	c418 <__aeabi_dcmpun+0x20>
    c42a:	4314      	orrs	r4, r2
    c42c:	0020      	movs	r0, r4
    c42e:	1e44      	subs	r4, r0, #1
    c430:	41a0      	sbcs	r0, r4
    c432:	e7f1      	b.n	c418 <__aeabi_dcmpun+0x20>
    c434:	000007ff 	.word	0x000007ff

0000c438 <__aeabi_d2iz>:
    c438:	b530      	push	{r4, r5, lr}
    c43a:	4d13      	ldr	r5, [pc, #76]	; (c488 <__aeabi_d2iz+0x50>)
    c43c:	030a      	lsls	r2, r1, #12
    c43e:	004b      	lsls	r3, r1, #1
    c440:	0b12      	lsrs	r2, r2, #12
    c442:	0d5b      	lsrs	r3, r3, #21
    c444:	0fc9      	lsrs	r1, r1, #31
    c446:	2400      	movs	r4, #0
    c448:	42ab      	cmp	r3, r5
    c44a:	dd10      	ble.n	c46e <__aeabi_d2iz+0x36>
    c44c:	4c0f      	ldr	r4, [pc, #60]	; (c48c <__aeabi_d2iz+0x54>)
    c44e:	42a3      	cmp	r3, r4
    c450:	dc0f      	bgt.n	c472 <__aeabi_d2iz+0x3a>
    c452:	2480      	movs	r4, #128	; 0x80
    c454:	4d0e      	ldr	r5, [pc, #56]	; (c490 <__aeabi_d2iz+0x58>)
    c456:	0364      	lsls	r4, r4, #13
    c458:	4322      	orrs	r2, r4
    c45a:	1aed      	subs	r5, r5, r3
    c45c:	2d1f      	cmp	r5, #31
    c45e:	dd0b      	ble.n	c478 <__aeabi_d2iz+0x40>
    c460:	480c      	ldr	r0, [pc, #48]	; (c494 <__aeabi_d2iz+0x5c>)
    c462:	1ac3      	subs	r3, r0, r3
    c464:	40da      	lsrs	r2, r3
    c466:	4254      	negs	r4, r2
    c468:	2900      	cmp	r1, #0
    c46a:	d100      	bne.n	c46e <__aeabi_d2iz+0x36>
    c46c:	0014      	movs	r4, r2
    c46e:	0020      	movs	r0, r4
    c470:	bd30      	pop	{r4, r5, pc}
    c472:	4b09      	ldr	r3, [pc, #36]	; (c498 <__aeabi_d2iz+0x60>)
    c474:	18cc      	adds	r4, r1, r3
    c476:	e7fa      	b.n	c46e <__aeabi_d2iz+0x36>
    c478:	4c08      	ldr	r4, [pc, #32]	; (c49c <__aeabi_d2iz+0x64>)
    c47a:	40e8      	lsrs	r0, r5
    c47c:	46a4      	mov	ip, r4
    c47e:	4463      	add	r3, ip
    c480:	409a      	lsls	r2, r3
    c482:	4302      	orrs	r2, r0
    c484:	e7ef      	b.n	c466 <__aeabi_d2iz+0x2e>
    c486:	46c0      	nop			; (mov r8, r8)
    c488:	000003fe 	.word	0x000003fe
    c48c:	0000041d 	.word	0x0000041d
    c490:	00000433 	.word	0x00000433
    c494:	00000413 	.word	0x00000413
    c498:	7fffffff 	.word	0x7fffffff
    c49c:	fffffbed 	.word	0xfffffbed

0000c4a0 <__aeabi_i2d>:
    c4a0:	b570      	push	{r4, r5, r6, lr}
    c4a2:	2800      	cmp	r0, #0
    c4a4:	d030      	beq.n	c508 <__aeabi_i2d+0x68>
    c4a6:	17c3      	asrs	r3, r0, #31
    c4a8:	18c4      	adds	r4, r0, r3
    c4aa:	405c      	eors	r4, r3
    c4ac:	0fc5      	lsrs	r5, r0, #31
    c4ae:	0020      	movs	r0, r4
    c4b0:	f000 f94c 	bl	c74c <__clzsi2>
    c4b4:	4b17      	ldr	r3, [pc, #92]	; (c514 <__aeabi_i2d+0x74>)
    c4b6:	4a18      	ldr	r2, [pc, #96]	; (c518 <__aeabi_i2d+0x78>)
    c4b8:	1a1b      	subs	r3, r3, r0
    c4ba:	1ad2      	subs	r2, r2, r3
    c4bc:	2a1f      	cmp	r2, #31
    c4be:	dd18      	ble.n	c4f2 <__aeabi_i2d+0x52>
    c4c0:	4a16      	ldr	r2, [pc, #88]	; (c51c <__aeabi_i2d+0x7c>)
    c4c2:	1ad2      	subs	r2, r2, r3
    c4c4:	4094      	lsls	r4, r2
    c4c6:	2200      	movs	r2, #0
    c4c8:	0324      	lsls	r4, r4, #12
    c4ca:	055b      	lsls	r3, r3, #21
    c4cc:	0b24      	lsrs	r4, r4, #12
    c4ce:	0d5b      	lsrs	r3, r3, #21
    c4d0:	2100      	movs	r1, #0
    c4d2:	0010      	movs	r0, r2
    c4d4:	0324      	lsls	r4, r4, #12
    c4d6:	0d0a      	lsrs	r2, r1, #20
    c4d8:	0b24      	lsrs	r4, r4, #12
    c4da:	0512      	lsls	r2, r2, #20
    c4dc:	4322      	orrs	r2, r4
    c4de:	4c10      	ldr	r4, [pc, #64]	; (c520 <__aeabi_i2d+0x80>)
    c4e0:	051b      	lsls	r3, r3, #20
    c4e2:	4022      	ands	r2, r4
    c4e4:	4313      	orrs	r3, r2
    c4e6:	005b      	lsls	r3, r3, #1
    c4e8:	07ed      	lsls	r5, r5, #31
    c4ea:	085b      	lsrs	r3, r3, #1
    c4ec:	432b      	orrs	r3, r5
    c4ee:	0019      	movs	r1, r3
    c4f0:	bd70      	pop	{r4, r5, r6, pc}
    c4f2:	0021      	movs	r1, r4
    c4f4:	4091      	lsls	r1, r2
    c4f6:	000a      	movs	r2, r1
    c4f8:	210b      	movs	r1, #11
    c4fa:	1a08      	subs	r0, r1, r0
    c4fc:	40c4      	lsrs	r4, r0
    c4fe:	055b      	lsls	r3, r3, #21
    c500:	0324      	lsls	r4, r4, #12
    c502:	0b24      	lsrs	r4, r4, #12
    c504:	0d5b      	lsrs	r3, r3, #21
    c506:	e7e3      	b.n	c4d0 <__aeabi_i2d+0x30>
    c508:	2500      	movs	r5, #0
    c50a:	2300      	movs	r3, #0
    c50c:	2400      	movs	r4, #0
    c50e:	2200      	movs	r2, #0
    c510:	e7de      	b.n	c4d0 <__aeabi_i2d+0x30>
    c512:	46c0      	nop			; (mov r8, r8)
    c514:	0000041e 	.word	0x0000041e
    c518:	00000433 	.word	0x00000433
    c51c:	00000413 	.word	0x00000413
    c520:	800fffff 	.word	0x800fffff

0000c524 <__aeabi_ui2d>:
    c524:	b510      	push	{r4, lr}
    c526:	1e04      	subs	r4, r0, #0
    c528:	d028      	beq.n	c57c <__aeabi_ui2d+0x58>
    c52a:	f000 f90f 	bl	c74c <__clzsi2>
    c52e:	4b15      	ldr	r3, [pc, #84]	; (c584 <__aeabi_ui2d+0x60>)
    c530:	4a15      	ldr	r2, [pc, #84]	; (c588 <__aeabi_ui2d+0x64>)
    c532:	1a1b      	subs	r3, r3, r0
    c534:	1ad2      	subs	r2, r2, r3
    c536:	2a1f      	cmp	r2, #31
    c538:	dd15      	ble.n	c566 <__aeabi_ui2d+0x42>
    c53a:	4a14      	ldr	r2, [pc, #80]	; (c58c <__aeabi_ui2d+0x68>)
    c53c:	1ad2      	subs	r2, r2, r3
    c53e:	4094      	lsls	r4, r2
    c540:	2200      	movs	r2, #0
    c542:	0324      	lsls	r4, r4, #12
    c544:	055b      	lsls	r3, r3, #21
    c546:	0b24      	lsrs	r4, r4, #12
    c548:	0d5b      	lsrs	r3, r3, #21
    c54a:	2100      	movs	r1, #0
    c54c:	0010      	movs	r0, r2
    c54e:	0324      	lsls	r4, r4, #12
    c550:	0d0a      	lsrs	r2, r1, #20
    c552:	0b24      	lsrs	r4, r4, #12
    c554:	0512      	lsls	r2, r2, #20
    c556:	4322      	orrs	r2, r4
    c558:	4c0d      	ldr	r4, [pc, #52]	; (c590 <__aeabi_ui2d+0x6c>)
    c55a:	051b      	lsls	r3, r3, #20
    c55c:	4022      	ands	r2, r4
    c55e:	4313      	orrs	r3, r2
    c560:	005b      	lsls	r3, r3, #1
    c562:	0859      	lsrs	r1, r3, #1
    c564:	bd10      	pop	{r4, pc}
    c566:	0021      	movs	r1, r4
    c568:	4091      	lsls	r1, r2
    c56a:	000a      	movs	r2, r1
    c56c:	210b      	movs	r1, #11
    c56e:	1a08      	subs	r0, r1, r0
    c570:	40c4      	lsrs	r4, r0
    c572:	055b      	lsls	r3, r3, #21
    c574:	0324      	lsls	r4, r4, #12
    c576:	0b24      	lsrs	r4, r4, #12
    c578:	0d5b      	lsrs	r3, r3, #21
    c57a:	e7e6      	b.n	c54a <__aeabi_ui2d+0x26>
    c57c:	2300      	movs	r3, #0
    c57e:	2400      	movs	r4, #0
    c580:	2200      	movs	r2, #0
    c582:	e7e2      	b.n	c54a <__aeabi_ui2d+0x26>
    c584:	0000041e 	.word	0x0000041e
    c588:	00000433 	.word	0x00000433
    c58c:	00000413 	.word	0x00000413
    c590:	800fffff 	.word	0x800fffff

0000c594 <__aeabi_f2d>:
    c594:	0041      	lsls	r1, r0, #1
    c596:	0e09      	lsrs	r1, r1, #24
    c598:	1c4b      	adds	r3, r1, #1
    c59a:	b570      	push	{r4, r5, r6, lr}
    c59c:	b2db      	uxtb	r3, r3
    c59e:	0246      	lsls	r6, r0, #9
    c5a0:	0a75      	lsrs	r5, r6, #9
    c5a2:	0fc4      	lsrs	r4, r0, #31
    c5a4:	2b01      	cmp	r3, #1
    c5a6:	dd14      	ble.n	c5d2 <__aeabi_f2d+0x3e>
    c5a8:	23e0      	movs	r3, #224	; 0xe0
    c5aa:	009b      	lsls	r3, r3, #2
    c5ac:	076d      	lsls	r5, r5, #29
    c5ae:	0b36      	lsrs	r6, r6, #12
    c5b0:	18cb      	adds	r3, r1, r3
    c5b2:	2100      	movs	r1, #0
    c5b4:	0d0a      	lsrs	r2, r1, #20
    c5b6:	0028      	movs	r0, r5
    c5b8:	0512      	lsls	r2, r2, #20
    c5ba:	4d1c      	ldr	r5, [pc, #112]	; (c62c <__aeabi_f2d+0x98>)
    c5bc:	4332      	orrs	r2, r6
    c5be:	055b      	lsls	r3, r3, #21
    c5c0:	402a      	ands	r2, r5
    c5c2:	085b      	lsrs	r3, r3, #1
    c5c4:	4313      	orrs	r3, r2
    c5c6:	005b      	lsls	r3, r3, #1
    c5c8:	07e4      	lsls	r4, r4, #31
    c5ca:	085b      	lsrs	r3, r3, #1
    c5cc:	4323      	orrs	r3, r4
    c5ce:	0019      	movs	r1, r3
    c5d0:	bd70      	pop	{r4, r5, r6, pc}
    c5d2:	2900      	cmp	r1, #0
    c5d4:	d114      	bne.n	c600 <__aeabi_f2d+0x6c>
    c5d6:	2d00      	cmp	r5, #0
    c5d8:	d01e      	beq.n	c618 <__aeabi_f2d+0x84>
    c5da:	0028      	movs	r0, r5
    c5dc:	f000 f8b6 	bl	c74c <__clzsi2>
    c5e0:	280a      	cmp	r0, #10
    c5e2:	dc1c      	bgt.n	c61e <__aeabi_f2d+0x8a>
    c5e4:	230b      	movs	r3, #11
    c5e6:	002a      	movs	r2, r5
    c5e8:	1a1b      	subs	r3, r3, r0
    c5ea:	40da      	lsrs	r2, r3
    c5ec:	0003      	movs	r3, r0
    c5ee:	3315      	adds	r3, #21
    c5f0:	409d      	lsls	r5, r3
    c5f2:	4b0f      	ldr	r3, [pc, #60]	; (c630 <__aeabi_f2d+0x9c>)
    c5f4:	0312      	lsls	r2, r2, #12
    c5f6:	1a1b      	subs	r3, r3, r0
    c5f8:	055b      	lsls	r3, r3, #21
    c5fa:	0b16      	lsrs	r6, r2, #12
    c5fc:	0d5b      	lsrs	r3, r3, #21
    c5fe:	e7d8      	b.n	c5b2 <__aeabi_f2d+0x1e>
    c600:	2d00      	cmp	r5, #0
    c602:	d006      	beq.n	c612 <__aeabi_f2d+0x7e>
    c604:	0b32      	lsrs	r2, r6, #12
    c606:	2680      	movs	r6, #128	; 0x80
    c608:	0336      	lsls	r6, r6, #12
    c60a:	076d      	lsls	r5, r5, #29
    c60c:	4316      	orrs	r6, r2
    c60e:	4b09      	ldr	r3, [pc, #36]	; (c634 <__aeabi_f2d+0xa0>)
    c610:	e7cf      	b.n	c5b2 <__aeabi_f2d+0x1e>
    c612:	4b08      	ldr	r3, [pc, #32]	; (c634 <__aeabi_f2d+0xa0>)
    c614:	2600      	movs	r6, #0
    c616:	e7cc      	b.n	c5b2 <__aeabi_f2d+0x1e>
    c618:	2300      	movs	r3, #0
    c61a:	2600      	movs	r6, #0
    c61c:	e7c9      	b.n	c5b2 <__aeabi_f2d+0x1e>
    c61e:	0003      	movs	r3, r0
    c620:	002a      	movs	r2, r5
    c622:	3b0b      	subs	r3, #11
    c624:	409a      	lsls	r2, r3
    c626:	2500      	movs	r5, #0
    c628:	e7e3      	b.n	c5f2 <__aeabi_f2d+0x5e>
    c62a:	46c0      	nop			; (mov r8, r8)
    c62c:	800fffff 	.word	0x800fffff
    c630:	00000389 	.word	0x00000389
    c634:	000007ff 	.word	0x000007ff

0000c638 <__aeabi_d2f>:
    c638:	b5f0      	push	{r4, r5, r6, r7, lr}
    c63a:	004c      	lsls	r4, r1, #1
    c63c:	0d64      	lsrs	r4, r4, #21
    c63e:	030b      	lsls	r3, r1, #12
    c640:	1c62      	adds	r2, r4, #1
    c642:	0f45      	lsrs	r5, r0, #29
    c644:	0a5b      	lsrs	r3, r3, #9
    c646:	0552      	lsls	r2, r2, #21
    c648:	432b      	orrs	r3, r5
    c64a:	0fc9      	lsrs	r1, r1, #31
    c64c:	00c5      	lsls	r5, r0, #3
    c64e:	0d52      	lsrs	r2, r2, #21
    c650:	2a01      	cmp	r2, #1
    c652:	dd28      	ble.n	c6a6 <__aeabi_d2f+0x6e>
    c654:	4a3a      	ldr	r2, [pc, #232]	; (c740 <__aeabi_d2f+0x108>)
    c656:	18a6      	adds	r6, r4, r2
    c658:	2efe      	cmp	r6, #254	; 0xfe
    c65a:	dc1b      	bgt.n	c694 <__aeabi_d2f+0x5c>
    c65c:	2e00      	cmp	r6, #0
    c65e:	dd3e      	ble.n	c6de <__aeabi_d2f+0xa6>
    c660:	0180      	lsls	r0, r0, #6
    c662:	0002      	movs	r2, r0
    c664:	1e50      	subs	r0, r2, #1
    c666:	4182      	sbcs	r2, r0
    c668:	0f6d      	lsrs	r5, r5, #29
    c66a:	432a      	orrs	r2, r5
    c66c:	00db      	lsls	r3, r3, #3
    c66e:	4313      	orrs	r3, r2
    c670:	075a      	lsls	r2, r3, #29
    c672:	d004      	beq.n	c67e <__aeabi_d2f+0x46>
    c674:	220f      	movs	r2, #15
    c676:	401a      	ands	r2, r3
    c678:	2a04      	cmp	r2, #4
    c67a:	d000      	beq.n	c67e <__aeabi_d2f+0x46>
    c67c:	3304      	adds	r3, #4
    c67e:	2280      	movs	r2, #128	; 0x80
    c680:	04d2      	lsls	r2, r2, #19
    c682:	401a      	ands	r2, r3
    c684:	d05a      	beq.n	c73c <__aeabi_d2f+0x104>
    c686:	3601      	adds	r6, #1
    c688:	2eff      	cmp	r6, #255	; 0xff
    c68a:	d003      	beq.n	c694 <__aeabi_d2f+0x5c>
    c68c:	019b      	lsls	r3, r3, #6
    c68e:	0a5b      	lsrs	r3, r3, #9
    c690:	b2f4      	uxtb	r4, r6
    c692:	e001      	b.n	c698 <__aeabi_d2f+0x60>
    c694:	24ff      	movs	r4, #255	; 0xff
    c696:	2300      	movs	r3, #0
    c698:	0258      	lsls	r0, r3, #9
    c69a:	05e4      	lsls	r4, r4, #23
    c69c:	0a40      	lsrs	r0, r0, #9
    c69e:	07c9      	lsls	r1, r1, #31
    c6a0:	4320      	orrs	r0, r4
    c6a2:	4308      	orrs	r0, r1
    c6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6a6:	2c00      	cmp	r4, #0
    c6a8:	d007      	beq.n	c6ba <__aeabi_d2f+0x82>
    c6aa:	431d      	orrs	r5, r3
    c6ac:	d0f2      	beq.n	c694 <__aeabi_d2f+0x5c>
    c6ae:	2080      	movs	r0, #128	; 0x80
    c6b0:	00db      	lsls	r3, r3, #3
    c6b2:	0480      	lsls	r0, r0, #18
    c6b4:	4303      	orrs	r3, r0
    c6b6:	26ff      	movs	r6, #255	; 0xff
    c6b8:	e7da      	b.n	c670 <__aeabi_d2f+0x38>
    c6ba:	432b      	orrs	r3, r5
    c6bc:	d003      	beq.n	c6c6 <__aeabi_d2f+0x8e>
    c6be:	2305      	movs	r3, #5
    c6c0:	08db      	lsrs	r3, r3, #3
    c6c2:	2cff      	cmp	r4, #255	; 0xff
    c6c4:	d003      	beq.n	c6ce <__aeabi_d2f+0x96>
    c6c6:	025b      	lsls	r3, r3, #9
    c6c8:	0a5b      	lsrs	r3, r3, #9
    c6ca:	b2e4      	uxtb	r4, r4
    c6cc:	e7e4      	b.n	c698 <__aeabi_d2f+0x60>
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d032      	beq.n	c738 <__aeabi_d2f+0x100>
    c6d2:	2080      	movs	r0, #128	; 0x80
    c6d4:	03c0      	lsls	r0, r0, #15
    c6d6:	4303      	orrs	r3, r0
    c6d8:	025b      	lsls	r3, r3, #9
    c6da:	0a5b      	lsrs	r3, r3, #9
    c6dc:	e7dc      	b.n	c698 <__aeabi_d2f+0x60>
    c6de:	0032      	movs	r2, r6
    c6e0:	3217      	adds	r2, #23
    c6e2:	db14      	blt.n	c70e <__aeabi_d2f+0xd6>
    c6e4:	2280      	movs	r2, #128	; 0x80
    c6e6:	271e      	movs	r7, #30
    c6e8:	0412      	lsls	r2, r2, #16
    c6ea:	4313      	orrs	r3, r2
    c6ec:	1bbf      	subs	r7, r7, r6
    c6ee:	2f1f      	cmp	r7, #31
    c6f0:	dc0f      	bgt.n	c712 <__aeabi_d2f+0xda>
    c6f2:	4a14      	ldr	r2, [pc, #80]	; (c744 <__aeabi_d2f+0x10c>)
    c6f4:	4694      	mov	ip, r2
    c6f6:	4464      	add	r4, ip
    c6f8:	002a      	movs	r2, r5
    c6fa:	40a5      	lsls	r5, r4
    c6fc:	002e      	movs	r6, r5
    c6fe:	40a3      	lsls	r3, r4
    c700:	1e75      	subs	r5, r6, #1
    c702:	41ae      	sbcs	r6, r5
    c704:	40fa      	lsrs	r2, r7
    c706:	4333      	orrs	r3, r6
    c708:	4313      	orrs	r3, r2
    c70a:	2600      	movs	r6, #0
    c70c:	e7b0      	b.n	c670 <__aeabi_d2f+0x38>
    c70e:	2400      	movs	r4, #0
    c710:	e7d5      	b.n	c6be <__aeabi_d2f+0x86>
    c712:	2202      	movs	r2, #2
    c714:	4252      	negs	r2, r2
    c716:	1b96      	subs	r6, r2, r6
    c718:	001a      	movs	r2, r3
    c71a:	40f2      	lsrs	r2, r6
    c71c:	2f20      	cmp	r7, #32
    c71e:	d009      	beq.n	c734 <__aeabi_d2f+0xfc>
    c720:	4809      	ldr	r0, [pc, #36]	; (c748 <__aeabi_d2f+0x110>)
    c722:	4684      	mov	ip, r0
    c724:	4464      	add	r4, ip
    c726:	40a3      	lsls	r3, r4
    c728:	432b      	orrs	r3, r5
    c72a:	1e5d      	subs	r5, r3, #1
    c72c:	41ab      	sbcs	r3, r5
    c72e:	2600      	movs	r6, #0
    c730:	4313      	orrs	r3, r2
    c732:	e79d      	b.n	c670 <__aeabi_d2f+0x38>
    c734:	2300      	movs	r3, #0
    c736:	e7f7      	b.n	c728 <__aeabi_d2f+0xf0>
    c738:	2300      	movs	r3, #0
    c73a:	e7ad      	b.n	c698 <__aeabi_d2f+0x60>
    c73c:	0034      	movs	r4, r6
    c73e:	e7bf      	b.n	c6c0 <__aeabi_d2f+0x88>
    c740:	fffffc80 	.word	0xfffffc80
    c744:	fffffc82 	.word	0xfffffc82
    c748:	fffffca2 	.word	0xfffffca2

0000c74c <__clzsi2>:
    c74c:	211c      	movs	r1, #28
    c74e:	2301      	movs	r3, #1
    c750:	041b      	lsls	r3, r3, #16
    c752:	4298      	cmp	r0, r3
    c754:	d301      	bcc.n	c75a <__clzsi2+0xe>
    c756:	0c00      	lsrs	r0, r0, #16
    c758:	3910      	subs	r1, #16
    c75a:	0a1b      	lsrs	r3, r3, #8
    c75c:	4298      	cmp	r0, r3
    c75e:	d301      	bcc.n	c764 <__clzsi2+0x18>
    c760:	0a00      	lsrs	r0, r0, #8
    c762:	3908      	subs	r1, #8
    c764:	091b      	lsrs	r3, r3, #4
    c766:	4298      	cmp	r0, r3
    c768:	d301      	bcc.n	c76e <__clzsi2+0x22>
    c76a:	0900      	lsrs	r0, r0, #4
    c76c:	3904      	subs	r1, #4
    c76e:	a202      	add	r2, pc, #8	; (adr r2, c778 <__clzsi2+0x2c>)
    c770:	5c10      	ldrb	r0, [r2, r0]
    c772:	1840      	adds	r0, r0, r1
    c774:	4770      	bx	lr
    c776:	46c0      	nop			; (mov r8, r8)
    c778:	02020304 	.word	0x02020304
    c77c:	01010101 	.word	0x01010101
	...

0000c788 <__assert_func>:
    c788:	b530      	push	{r4, r5, lr}
    c78a:	001c      	movs	r4, r3
    c78c:	4b09      	ldr	r3, [pc, #36]	; (c7b4 <__assert_func+0x2c>)
    c78e:	0005      	movs	r5, r0
    c790:	681b      	ldr	r3, [r3, #0]
    c792:	b085      	sub	sp, #20
    c794:	68d8      	ldr	r0, [r3, #12]
    c796:	4b08      	ldr	r3, [pc, #32]	; (c7b8 <__assert_func+0x30>)
    c798:	2a00      	cmp	r2, #0
    c79a:	d101      	bne.n	c7a0 <__assert_func+0x18>
    c79c:	4b07      	ldr	r3, [pc, #28]	; (c7bc <__assert_func+0x34>)
    c79e:	001a      	movs	r2, r3
    c7a0:	9202      	str	r2, [sp, #8]
    c7a2:	9301      	str	r3, [sp, #4]
    c7a4:	9100      	str	r1, [sp, #0]
    c7a6:	002b      	movs	r3, r5
    c7a8:	0022      	movs	r2, r4
    c7aa:	4905      	ldr	r1, [pc, #20]	; (c7c0 <__assert_func+0x38>)
    c7ac:	f000 f81e 	bl	c7ec <fiprintf>
    c7b0:	f001 febc 	bl	e52c <abort>
    c7b4:	200000b4 	.word	0x200000b4
    c7b8:	000128d0 	.word	0x000128d0
    c7bc:	0001110a 	.word	0x0001110a
    c7c0:	000128dd 	.word	0x000128dd

0000c7c4 <__cxa_atexit>:
    c7c4:	b570      	push	{r4, r5, r6, lr}
    c7c6:	4c05      	ldr	r4, [pc, #20]	; (c7dc <__cxa_atexit+0x18>)
    c7c8:	0005      	movs	r5, r0
    c7ca:	0013      	movs	r3, r2
    c7cc:	1e20      	subs	r0, r4, #0
    c7ce:	d004      	beq.n	c7da <__cxa_atexit+0x16>
    c7d0:	000a      	movs	r2, r1
    c7d2:	2002      	movs	r0, #2
    c7d4:	0029      	movs	r1, r5
    c7d6:	e000      	b.n	c7da <__cxa_atexit+0x16>
    c7d8:	bf00      	nop
    c7da:	bd70      	pop	{r4, r5, r6, pc}
    c7dc:	00000000 	.word	0x00000000

0000c7e0 <__errno>:
    c7e0:	4b01      	ldr	r3, [pc, #4]	; (c7e8 <__errno+0x8>)
    c7e2:	6818      	ldr	r0, [r3, #0]
    c7e4:	4770      	bx	lr
    c7e6:	46c0      	nop			; (mov r8, r8)
    c7e8:	200000b4 	.word	0x200000b4

0000c7ec <fiprintf>:
    c7ec:	b40e      	push	{r1, r2, r3}
    c7ee:	b503      	push	{r0, r1, lr}
    c7f0:	0001      	movs	r1, r0
    c7f2:	ab03      	add	r3, sp, #12
    c7f4:	4804      	ldr	r0, [pc, #16]	; (c808 <fiprintf+0x1c>)
    c7f6:	cb04      	ldmia	r3!, {r2}
    c7f8:	6800      	ldr	r0, [r0, #0]
    c7fa:	9301      	str	r3, [sp, #4]
    c7fc:	f000 fc8a 	bl	d114 <_vfiprintf_r>
    c800:	b002      	add	sp, #8
    c802:	bc08      	pop	{r3}
    c804:	b003      	add	sp, #12
    c806:	4718      	bx	r3
    c808:	200000b4 	.word	0x200000b4

0000c80c <gmtime>:
    c80c:	4b07      	ldr	r3, [pc, #28]	; (c82c <gmtime+0x20>)
    c80e:	b570      	push	{r4, r5, r6, lr}
    c810:	681c      	ldr	r4, [r3, #0]
    c812:	0005      	movs	r5, r0
    c814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c816:	2b00      	cmp	r3, #0
    c818:	d103      	bne.n	c822 <gmtime+0x16>
    c81a:	2024      	movs	r0, #36	; 0x24
    c81c:	f000 f8fc 	bl	ca18 <malloc>
    c820:	63e0      	str	r0, [r4, #60]	; 0x3c
    c822:	0028      	movs	r0, r5
    c824:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    c826:	f000 f803 	bl	c830 <gmtime_r>
    c82a:	bd70      	pop	{r4, r5, r6, pc}
    c82c:	200000b4 	.word	0x200000b4

0000c830 <gmtime_r>:
    c830:	b5f0      	push	{r4, r5, r6, r7, lr}
    c832:	6805      	ldr	r5, [r0, #0]
    c834:	b085      	sub	sp, #20
    c836:	000c      	movs	r4, r1
    c838:	0028      	movs	r0, r5
    c83a:	4952      	ldr	r1, [pc, #328]	; (c984 <gmtime_r+0x154>)
    c83c:	f7fd f85c 	bl	98f8 <__divsi3>
    c840:	4950      	ldr	r1, [pc, #320]	; (c984 <gmtime_r+0x154>)
    c842:	0006      	movs	r6, r0
    c844:	0028      	movs	r0, r5
    c846:	f7fd f93d 	bl	9ac4 <__aeabi_idivmod>
    c84a:	1e0f      	subs	r7, r1, #0
    c84c:	da00      	bge.n	c850 <gmtime_r+0x20>
    c84e:	e080      	b.n	c952 <gmtime_r+0x122>
    c850:	4b4d      	ldr	r3, [pc, #308]	; (c988 <gmtime_r+0x158>)
    c852:	21e1      	movs	r1, #225	; 0xe1
    c854:	0038      	movs	r0, r7
    c856:	0109      	lsls	r1, r1, #4
    c858:	18f5      	adds	r5, r6, r3
    c85a:	f7fd f84d 	bl	98f8 <__divsi3>
    c85e:	21e1      	movs	r1, #225	; 0xe1
    c860:	60a0      	str	r0, [r4, #8]
    c862:	0109      	lsls	r1, r1, #4
    c864:	0038      	movs	r0, r7
    c866:	f7fd f92d 	bl	9ac4 <__aeabi_idivmod>
    c86a:	000e      	movs	r6, r1
    c86c:	213c      	movs	r1, #60	; 0x3c
    c86e:	0030      	movs	r0, r6
    c870:	f7fd f842 	bl	98f8 <__divsi3>
    c874:	213c      	movs	r1, #60	; 0x3c
    c876:	6060      	str	r0, [r4, #4]
    c878:	0030      	movs	r0, r6
    c87a:	f7fd f923 	bl	9ac4 <__aeabi_idivmod>
    c87e:	1ce8      	adds	r0, r5, #3
    c880:	6021      	str	r1, [r4, #0]
    c882:	2107      	movs	r1, #7
    c884:	f7fd f91e 	bl	9ac4 <__aeabi_idivmod>
    c888:	0028      	movs	r0, r5
    c88a:	61a1      	str	r1, [r4, #24]
    c88c:	493f      	ldr	r1, [pc, #252]	; (c98c <gmtime_r+0x15c>)
    c88e:	f7fd f833 	bl	98f8 <__divsi3>
    c892:	4e3f      	ldr	r6, [pc, #252]	; (c990 <gmtime_r+0x160>)
    c894:	493f      	ldr	r1, [pc, #252]	; (c994 <gmtime_r+0x164>)
    c896:	4346      	muls	r6, r0
    c898:	1976      	adds	r6, r6, r5
    c89a:	0007      	movs	r7, r0
    c89c:	0030      	movs	r0, r6
    c89e:	f7fc ffa1 	bl	97e4 <__udivsi3>
    c8a2:	493d      	ldr	r1, [pc, #244]	; (c998 <gmtime_r+0x168>)
    c8a4:	1985      	adds	r5, r0, r6
    c8a6:	0030      	movs	r0, r6
    c8a8:	f7fc ff9c 	bl	97e4 <__udivsi3>
    c8ac:	493b      	ldr	r1, [pc, #236]	; (c99c <gmtime_r+0x16c>)
    c8ae:	1a2d      	subs	r5, r5, r0
    c8b0:	0030      	movs	r0, r6
    c8b2:	f7fc ff97 	bl	97e4 <__udivsi3>
    c8b6:	216e      	movs	r1, #110	; 0x6e
    c8b8:	1a2d      	subs	r5, r5, r0
    c8ba:	31ff      	adds	r1, #255	; 0xff
    c8bc:	0028      	movs	r0, r5
    c8be:	f7fc ff91 	bl	97e4 <__udivsi3>
    c8c2:	4937      	ldr	r1, [pc, #220]	; (c9a0 <gmtime_r+0x170>)
    c8c4:	9001      	str	r0, [sp, #4]
    c8c6:	0028      	movs	r0, r5
    c8c8:	f7fc ff8c 	bl	97e4 <__udivsi3>
    c8cc:	4932      	ldr	r1, [pc, #200]	; (c998 <gmtime_r+0x168>)
    c8ce:	1986      	adds	r6, r0, r6
    c8d0:	0028      	movs	r0, r5
    c8d2:	f7fc ff87 	bl	97e4 <__udivsi3>
    c8d6:	216e      	movs	r1, #110	; 0x6e
    c8d8:	9b01      	ldr	r3, [sp, #4]
    c8da:	31ff      	adds	r1, #255	; 0xff
    c8dc:	4359      	muls	r1, r3
    c8de:	1a36      	subs	r6, r6, r0
    c8e0:	1a73      	subs	r3, r6, r1
    c8e2:	0018      	movs	r0, r3
    c8e4:	2605      	movs	r6, #5
    c8e6:	4370      	muls	r0, r6
    c8e8:	2199      	movs	r1, #153	; 0x99
    c8ea:	3002      	adds	r0, #2
    c8ec:	9302      	str	r3, [sp, #8]
    c8ee:	f7fc ff79 	bl	97e4 <__udivsi3>
    c8f2:	0005      	movs	r5, r0
    c8f4:	2099      	movs	r0, #153	; 0x99
    c8f6:	4368      	muls	r0, r5
    c8f8:	9b02      	ldr	r3, [sp, #8]
    c8fa:	3002      	adds	r0, #2
    c8fc:	3301      	adds	r3, #1
    c8fe:	0031      	movs	r1, r6
    c900:	9303      	str	r3, [sp, #12]
    c902:	f7fc ff6f 	bl	97e4 <__udivsi3>
    c906:	9b03      	ldr	r3, [sp, #12]
    c908:	1a1b      	subs	r3, r3, r0
    c90a:	9303      	str	r3, [sp, #12]
    c90c:	2302      	movs	r3, #2
    c90e:	2d09      	cmp	r5, #9
    c910:	d900      	bls.n	c914 <gmtime_r+0xe4>
    c912:	3b0c      	subs	r3, #12
    c914:	195d      	adds	r5, r3, r5
    c916:	23c8      	movs	r3, #200	; 0xc8
    c918:	005b      	lsls	r3, r3, #1
    c91a:	435f      	muls	r7, r3
    c91c:	9b01      	ldr	r3, [sp, #4]
    c91e:	2601      	movs	r6, #1
    c920:	18ff      	adds	r7, r7, r3
    c922:	2300      	movs	r3, #0
    c924:	42ae      	cmp	r6, r5
    c926:	415b      	adcs	r3, r3
    c928:	18ff      	adds	r7, r7, r3
    c92a:	2332      	movs	r3, #50	; 0x32
    c92c:	9a02      	ldr	r2, [sp, #8]
    c92e:	33ff      	adds	r3, #255	; 0xff
    c930:	429a      	cmp	r2, r3
    c932:	d912      	bls.n	c95a <gmtime_r+0x12a>
    c934:	0016      	movs	r6, r2
    c936:	3e33      	subs	r6, #51	; 0x33
    c938:	3eff      	subs	r6, #255	; 0xff
    c93a:	4b1a      	ldr	r3, [pc, #104]	; (c9a4 <gmtime_r+0x174>)
    c93c:	0020      	movs	r0, r4
    c93e:	18ff      	adds	r7, r7, r3
    c940:	9b03      	ldr	r3, [sp, #12]
    c942:	61e6      	str	r6, [r4, #28]
    c944:	60e3      	str	r3, [r4, #12]
    c946:	2300      	movs	r3, #0
    c948:	6167      	str	r7, [r4, #20]
    c94a:	6125      	str	r5, [r4, #16]
    c94c:	6223      	str	r3, [r4, #32]
    c94e:	b005      	add	sp, #20
    c950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c952:	4b0c      	ldr	r3, [pc, #48]	; (c984 <gmtime_r+0x154>)
    c954:	18cf      	adds	r7, r1, r3
    c956:	4b14      	ldr	r3, [pc, #80]	; (c9a8 <gmtime_r+0x178>)
    c958:	e77b      	b.n	c852 <gmtime_r+0x22>
    c95a:	9b01      	ldr	r3, [sp, #4]
    c95c:	079b      	lsls	r3, r3, #30
    c95e:	d105      	bne.n	c96c <gmtime_r+0x13c>
    c960:	2164      	movs	r1, #100	; 0x64
    c962:	9801      	ldr	r0, [sp, #4]
    c964:	f7fc ffc4 	bl	98f0 <__aeabi_uidivmod>
    c968:	2900      	cmp	r1, #0
    c96a:	d106      	bne.n	c97a <gmtime_r+0x14a>
    c96c:	21c8      	movs	r1, #200	; 0xc8
    c96e:	9801      	ldr	r0, [sp, #4]
    c970:	0049      	lsls	r1, r1, #1
    c972:	f7fc ffbd 	bl	98f0 <__aeabi_uidivmod>
    c976:	424e      	negs	r6, r1
    c978:	414e      	adcs	r6, r1
    c97a:	9802      	ldr	r0, [sp, #8]
    c97c:	303b      	adds	r0, #59	; 0x3b
    c97e:	1986      	adds	r6, r0, r6
    c980:	e7db      	b.n	c93a <gmtime_r+0x10a>
    c982:	46c0      	nop			; (mov r8, r8)
    c984:	00015180 	.word	0x00015180
    c988:	000afa6c 	.word	0x000afa6c
    c98c:	00023ab1 	.word	0x00023ab1
    c990:	fffdc54f 	.word	0xfffdc54f
    c994:	00008eac 	.word	0x00008eac
    c998:	000005b4 	.word	0x000005b4
    c99c:	00023ab0 	.word	0x00023ab0
    c9a0:	00008e94 	.word	0x00008e94
    c9a4:	fffff894 	.word	0xfffff894
    c9a8:	000afa6b 	.word	0x000afa6b

0000c9ac <__libc_init_array>:
    c9ac:	b570      	push	{r4, r5, r6, lr}
    c9ae:	2600      	movs	r6, #0
    c9b0:	4d0c      	ldr	r5, [pc, #48]	; (c9e4 <__libc_init_array+0x38>)
    c9b2:	4c0d      	ldr	r4, [pc, #52]	; (c9e8 <__libc_init_array+0x3c>)
    c9b4:	1b64      	subs	r4, r4, r5
    c9b6:	10a4      	asrs	r4, r4, #2
    c9b8:	42a6      	cmp	r6, r4
    c9ba:	d109      	bne.n	c9d0 <__libc_init_array+0x24>
    c9bc:	2600      	movs	r6, #0
    c9be:	f004 f909 	bl	10bd4 <_init>
    c9c2:	4d0a      	ldr	r5, [pc, #40]	; (c9ec <__libc_init_array+0x40>)
    c9c4:	4c0a      	ldr	r4, [pc, #40]	; (c9f0 <__libc_init_array+0x44>)
    c9c6:	1b64      	subs	r4, r4, r5
    c9c8:	10a4      	asrs	r4, r4, #2
    c9ca:	42a6      	cmp	r6, r4
    c9cc:	d105      	bne.n	c9da <__libc_init_array+0x2e>
    c9ce:	bd70      	pop	{r4, r5, r6, pc}
    c9d0:	00b3      	lsls	r3, r6, #2
    c9d2:	58eb      	ldr	r3, [r5, r3]
    c9d4:	4798      	blx	r3
    c9d6:	3601      	adds	r6, #1
    c9d8:	e7ee      	b.n	c9b8 <__libc_init_array+0xc>
    c9da:	00b3      	lsls	r3, r6, #2
    c9dc:	58eb      	ldr	r3, [r5, r3]
    c9de:	4798      	blx	r3
    c9e0:	3601      	adds	r6, #1
    c9e2:	e7f2      	b.n	c9ca <__libc_init_array+0x1e>
    c9e4:	200002d0 	.word	0x200002d0
    c9e8:	200002d0 	.word	0x200002d0
    c9ec:	200002d0 	.word	0x200002d0
    c9f0:	200002f8 	.word	0x200002f8

0000c9f4 <__locale_ctype_ptr_l>:
    c9f4:	30ec      	adds	r0, #236	; 0xec
    c9f6:	6800      	ldr	r0, [r0, #0]
    c9f8:	4770      	bx	lr
	...

0000c9fc <__locale_ctype_ptr>:
    c9fc:	4b04      	ldr	r3, [pc, #16]	; (ca10 <__locale_ctype_ptr+0x14>)
    c9fe:	681b      	ldr	r3, [r3, #0]
    ca00:	6a1b      	ldr	r3, [r3, #32]
    ca02:	2b00      	cmp	r3, #0
    ca04:	d100      	bne.n	ca08 <__locale_ctype_ptr+0xc>
    ca06:	4b03      	ldr	r3, [pc, #12]	; (ca14 <__locale_ctype_ptr+0x18>)
    ca08:	33ec      	adds	r3, #236	; 0xec
    ca0a:	6818      	ldr	r0, [r3, #0]
    ca0c:	4770      	bx	lr
    ca0e:	46c0      	nop			; (mov r8, r8)
    ca10:	200000b4 	.word	0x200000b4
    ca14:	20000118 	.word	0x20000118

0000ca18 <malloc>:
    ca18:	b510      	push	{r4, lr}
    ca1a:	4b03      	ldr	r3, [pc, #12]	; (ca28 <malloc+0x10>)
    ca1c:	0001      	movs	r1, r0
    ca1e:	6818      	ldr	r0, [r3, #0]
    ca20:	f000 faf2 	bl	d008 <_malloc_r>
    ca24:	bd10      	pop	{r4, pc}
    ca26:	46c0      	nop			; (mov r8, r8)
    ca28:	200000b4 	.word	0x200000b4

0000ca2c <free>:
    ca2c:	b510      	push	{r4, lr}
    ca2e:	4b03      	ldr	r3, [pc, #12]	; (ca3c <free+0x10>)
    ca30:	0001      	movs	r1, r0
    ca32:	6818      	ldr	r0, [r3, #0]
    ca34:	f000 fa9e 	bl	cf74 <_free_r>
    ca38:	bd10      	pop	{r4, pc}
    ca3a:	46c0      	nop			; (mov r8, r8)
    ca3c:	200000b4 	.word	0x200000b4

0000ca40 <__ascii_mbtowc>:
    ca40:	b082      	sub	sp, #8
    ca42:	2900      	cmp	r1, #0
    ca44:	d100      	bne.n	ca48 <__ascii_mbtowc+0x8>
    ca46:	a901      	add	r1, sp, #4
    ca48:	1e10      	subs	r0, r2, #0
    ca4a:	d006      	beq.n	ca5a <__ascii_mbtowc+0x1a>
    ca4c:	2b00      	cmp	r3, #0
    ca4e:	d006      	beq.n	ca5e <__ascii_mbtowc+0x1e>
    ca50:	7813      	ldrb	r3, [r2, #0]
    ca52:	600b      	str	r3, [r1, #0]
    ca54:	7810      	ldrb	r0, [r2, #0]
    ca56:	1e43      	subs	r3, r0, #1
    ca58:	4198      	sbcs	r0, r3
    ca5a:	b002      	add	sp, #8
    ca5c:	4770      	bx	lr
    ca5e:	2002      	movs	r0, #2
    ca60:	4240      	negs	r0, r0
    ca62:	e7fa      	b.n	ca5a <__ascii_mbtowc+0x1a>

0000ca64 <memcmp>:
    ca64:	b530      	push	{r4, r5, lr}
    ca66:	2400      	movs	r4, #0
    ca68:	42a2      	cmp	r2, r4
    ca6a:	d101      	bne.n	ca70 <memcmp+0xc>
    ca6c:	2000      	movs	r0, #0
    ca6e:	e005      	b.n	ca7c <memcmp+0x18>
    ca70:	5d03      	ldrb	r3, [r0, r4]
    ca72:	1c65      	adds	r5, r4, #1
    ca74:	5d0c      	ldrb	r4, [r1, r4]
    ca76:	42a3      	cmp	r3, r4
    ca78:	d001      	beq.n	ca7e <memcmp+0x1a>
    ca7a:	1b18      	subs	r0, r3, r4
    ca7c:	bd30      	pop	{r4, r5, pc}
    ca7e:	002c      	movs	r4, r5
    ca80:	e7f2      	b.n	ca68 <memcmp+0x4>

0000ca82 <memcpy>:
    ca82:	2300      	movs	r3, #0
    ca84:	b510      	push	{r4, lr}
    ca86:	429a      	cmp	r2, r3
    ca88:	d100      	bne.n	ca8c <memcpy+0xa>
    ca8a:	bd10      	pop	{r4, pc}
    ca8c:	5ccc      	ldrb	r4, [r1, r3]
    ca8e:	54c4      	strb	r4, [r0, r3]
    ca90:	3301      	adds	r3, #1
    ca92:	e7f8      	b.n	ca86 <memcpy+0x4>

0000ca94 <memmove>:
    ca94:	b510      	push	{r4, lr}
    ca96:	4288      	cmp	r0, r1
    ca98:	d902      	bls.n	caa0 <memmove+0xc>
    ca9a:	188b      	adds	r3, r1, r2
    ca9c:	4298      	cmp	r0, r3
    ca9e:	d308      	bcc.n	cab2 <memmove+0x1e>
    caa0:	2300      	movs	r3, #0
    caa2:	429a      	cmp	r2, r3
    caa4:	d007      	beq.n	cab6 <memmove+0x22>
    caa6:	5ccc      	ldrb	r4, [r1, r3]
    caa8:	54c4      	strb	r4, [r0, r3]
    caaa:	3301      	adds	r3, #1
    caac:	e7f9      	b.n	caa2 <memmove+0xe>
    caae:	5c8b      	ldrb	r3, [r1, r2]
    cab0:	5483      	strb	r3, [r0, r2]
    cab2:	3a01      	subs	r2, #1
    cab4:	d2fb      	bcs.n	caae <memmove+0x1a>
    cab6:	bd10      	pop	{r4, pc}

0000cab8 <memset>:
    cab8:	0003      	movs	r3, r0
    caba:	1882      	adds	r2, r0, r2
    cabc:	4293      	cmp	r3, r2
    cabe:	d100      	bne.n	cac2 <memset+0xa>
    cac0:	4770      	bx	lr
    cac2:	7019      	strb	r1, [r3, #0]
    cac4:	3301      	adds	r3, #1
    cac6:	e7f9      	b.n	cabc <memset+0x4>

0000cac8 <validate_structure>:
    cac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    caca:	6801      	ldr	r1, [r0, #0]
    cacc:	0004      	movs	r4, r0
    cace:	293b      	cmp	r1, #59	; 0x3b
    cad0:	d90b      	bls.n	caea <validate_structure+0x22>
    cad2:	223c      	movs	r2, #60	; 0x3c
    cad4:	4668      	mov	r0, sp
    cad6:	f001 fd30 	bl	e53a <div>
    cada:	6863      	ldr	r3, [r4, #4]
    cadc:	9900      	ldr	r1, [sp, #0]
    cade:	9a01      	ldr	r2, [sp, #4]
    cae0:	185b      	adds	r3, r3, r1
    cae2:	6063      	str	r3, [r4, #4]
    cae4:	2a00      	cmp	r2, #0
    cae6:	db6c      	blt.n	cbc2 <validate_structure+0xfa>
    cae8:	6022      	str	r2, [r4, #0]
    caea:	6861      	ldr	r1, [r4, #4]
    caec:	293b      	cmp	r1, #59	; 0x3b
    caee:	d90b      	bls.n	cb08 <validate_structure+0x40>
    caf0:	223c      	movs	r2, #60	; 0x3c
    caf2:	4668      	mov	r0, sp
    caf4:	f001 fd21 	bl	e53a <div>
    caf8:	68a3      	ldr	r3, [r4, #8]
    cafa:	9900      	ldr	r1, [sp, #0]
    cafc:	9a01      	ldr	r2, [sp, #4]
    cafe:	185b      	adds	r3, r3, r1
    cb00:	60a3      	str	r3, [r4, #8]
    cb02:	2a00      	cmp	r2, #0
    cb04:	db62      	blt.n	cbcc <validate_structure+0x104>
    cb06:	6062      	str	r2, [r4, #4]
    cb08:	68a1      	ldr	r1, [r4, #8]
    cb0a:	2917      	cmp	r1, #23
    cb0c:	d90b      	bls.n	cb26 <validate_structure+0x5e>
    cb0e:	2218      	movs	r2, #24
    cb10:	4668      	mov	r0, sp
    cb12:	f001 fd12 	bl	e53a <div>
    cb16:	68e3      	ldr	r3, [r4, #12]
    cb18:	9900      	ldr	r1, [sp, #0]
    cb1a:	9a01      	ldr	r2, [sp, #4]
    cb1c:	185b      	adds	r3, r3, r1
    cb1e:	60e3      	str	r3, [r4, #12]
    cb20:	2a00      	cmp	r2, #0
    cb22:	db58      	blt.n	cbd6 <validate_structure+0x10e>
    cb24:	60a2      	str	r2, [r4, #8]
    cb26:	6921      	ldr	r1, [r4, #16]
    cb28:	290b      	cmp	r1, #11
    cb2a:	d90b      	bls.n	cb44 <validate_structure+0x7c>
    cb2c:	220c      	movs	r2, #12
    cb2e:	4668      	mov	r0, sp
    cb30:	f001 fd03 	bl	e53a <div>
    cb34:	6963      	ldr	r3, [r4, #20]
    cb36:	9900      	ldr	r1, [sp, #0]
    cb38:	9a01      	ldr	r2, [sp, #4]
    cb3a:	185b      	adds	r3, r3, r1
    cb3c:	6163      	str	r3, [r4, #20]
    cb3e:	2a00      	cmp	r2, #0
    cb40:	db4e      	blt.n	cbe0 <validate_structure+0x118>
    cb42:	6122      	str	r2, [r4, #16]
    cb44:	6965      	ldr	r5, [r4, #20]
    cb46:	231c      	movs	r3, #28
    cb48:	07aa      	lsls	r2, r5, #30
    cb4a:	d10f      	bne.n	cb6c <validate_structure+0xa4>
    cb4c:	2164      	movs	r1, #100	; 0x64
    cb4e:	0028      	movs	r0, r5
    cb50:	f7fc ffb8 	bl	9ac4 <__aeabi_idivmod>
    cb54:	231d      	movs	r3, #29
    cb56:	2900      	cmp	r1, #0
    cb58:	d108      	bne.n	cb6c <validate_structure+0xa4>
    cb5a:	4b3d      	ldr	r3, [pc, #244]	; (cc50 <validate_structure+0x188>)
    cb5c:	3191      	adds	r1, #145	; 0x91
    cb5e:	18e8      	adds	r0, r5, r3
    cb60:	31ff      	adds	r1, #255	; 0xff
    cb62:	f7fc ffaf 	bl	9ac4 <__aeabi_idivmod>
    cb66:	424b      	negs	r3, r1
    cb68:	414b      	adcs	r3, r1
    cb6a:	331c      	adds	r3, #28
    cb6c:	68e2      	ldr	r2, [r4, #12]
    cb6e:	2a00      	cmp	r2, #0
    cb70:	dd3b      	ble.n	cbea <validate_structure+0x122>
    cb72:	2602      	movs	r6, #2
    cb74:	4f37      	ldr	r7, [pc, #220]	; (cc54 <validate_structure+0x18c>)
    cb76:	6921      	ldr	r1, [r4, #16]
    cb78:	68e2      	ldr	r2, [r4, #12]
    cb7a:	2901      	cmp	r1, #1
    cb7c:	d061      	beq.n	cc42 <validate_structure+0x17a>
    cb7e:	0088      	lsls	r0, r1, #2
    cb80:	59c0      	ldr	r0, [r0, r7]
    cb82:	4282      	cmp	r2, r0
    cb84:	dd35      	ble.n	cbf2 <validate_structure+0x12a>
    cb86:	1a12      	subs	r2, r2, r0
    cb88:	3101      	adds	r1, #1
    cb8a:	60e2      	str	r2, [r4, #12]
    cb8c:	6121      	str	r1, [r4, #16]
    cb8e:	290c      	cmp	r1, #12
    cb90:	d1f1      	bne.n	cb76 <validate_structure+0xae>
    cb92:	2300      	movs	r3, #0
    cb94:	6965      	ldr	r5, [r4, #20]
    cb96:	6123      	str	r3, [r4, #16]
    cb98:	1c68      	adds	r0, r5, #1
    cb9a:	6160      	str	r0, [r4, #20]
    cb9c:	331c      	adds	r3, #28
    cb9e:	0782      	lsls	r2, r0, #30
    cba0:	d1e9      	bne.n	cb76 <validate_structure+0xae>
    cba2:	3158      	adds	r1, #88	; 0x58
    cba4:	f7fc ff8e 	bl	9ac4 <__aeabi_idivmod>
    cba8:	231d      	movs	r3, #29
    cbaa:	2900      	cmp	r1, #0
    cbac:	d1e3      	bne.n	cb76 <validate_structure+0xae>
    cbae:	4b2a      	ldr	r3, [pc, #168]	; (cc58 <validate_structure+0x190>)
    cbb0:	3191      	adds	r1, #145	; 0x91
    cbb2:	18e8      	adds	r0, r5, r3
    cbb4:	31ff      	adds	r1, #255	; 0xff
    cbb6:	f7fc ff85 	bl	9ac4 <__aeabi_idivmod>
    cbba:	424b      	negs	r3, r1
    cbbc:	414b      	adcs	r3, r1
    cbbe:	331c      	adds	r3, #28
    cbc0:	e7d9      	b.n	cb76 <validate_structure+0xae>
    cbc2:	323c      	adds	r2, #60	; 0x3c
    cbc4:	3b01      	subs	r3, #1
    cbc6:	6022      	str	r2, [r4, #0]
    cbc8:	6063      	str	r3, [r4, #4]
    cbca:	e78e      	b.n	caea <validate_structure+0x22>
    cbcc:	323c      	adds	r2, #60	; 0x3c
    cbce:	3b01      	subs	r3, #1
    cbd0:	6062      	str	r2, [r4, #4]
    cbd2:	60a3      	str	r3, [r4, #8]
    cbd4:	e798      	b.n	cb08 <validate_structure+0x40>
    cbd6:	3218      	adds	r2, #24
    cbd8:	3b01      	subs	r3, #1
    cbda:	60a2      	str	r2, [r4, #8]
    cbdc:	60e3      	str	r3, [r4, #12]
    cbde:	e7a2      	b.n	cb26 <validate_structure+0x5e>
    cbe0:	320c      	adds	r2, #12
    cbe2:	3b01      	subs	r3, #1
    cbe4:	6122      	str	r2, [r4, #16]
    cbe6:	6163      	str	r3, [r4, #20]
    cbe8:	e7ac      	b.n	cb44 <validate_structure+0x7c>
    cbea:	271d      	movs	r7, #29
    cbec:	68e6      	ldr	r6, [r4, #12]
    cbee:	2e00      	cmp	r6, #0
    cbf0:	dd00      	ble.n	cbf4 <validate_structure+0x12c>
    cbf2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cbf4:	6922      	ldr	r2, [r4, #16]
    cbf6:	3a01      	subs	r2, #1
    cbf8:	6122      	str	r2, [r4, #16]
    cbfa:	3201      	adds	r2, #1
    cbfc:	d117      	bne.n	cc2e <validate_structure+0x166>
    cbfe:	230b      	movs	r3, #11
    cc00:	2203      	movs	r2, #3
    cc02:	6965      	ldr	r5, [r4, #20]
    cc04:	6123      	str	r3, [r4, #16]
    cc06:	1e68      	subs	r0, r5, #1
    cc08:	6160      	str	r0, [r4, #20]
    cc0a:	3311      	adds	r3, #17
    cc0c:	4210      	tst	r0, r2
    cc0e:	d10e      	bne.n	cc2e <validate_structure+0x166>
    cc10:	2164      	movs	r1, #100	; 0x64
    cc12:	f7fc ff57 	bl	9ac4 <__aeabi_idivmod>
    cc16:	003b      	movs	r3, r7
    cc18:	2900      	cmp	r1, #0
    cc1a:	d108      	bne.n	cc2e <validate_structure+0x166>
    cc1c:	4b0f      	ldr	r3, [pc, #60]	; (cc5c <validate_structure+0x194>)
    cc1e:	3191      	adds	r1, #145	; 0x91
    cc20:	18e8      	adds	r0, r5, r3
    cc22:	31ff      	adds	r1, #255	; 0xff
    cc24:	f7fc ff4e 	bl	9ac4 <__aeabi_idivmod>
    cc28:	424b      	negs	r3, r1
    cc2a:	414b      	adcs	r3, r1
    cc2c:	331c      	adds	r3, #28
    cc2e:	6921      	ldr	r1, [r4, #16]
    cc30:	001a      	movs	r2, r3
    cc32:	2901      	cmp	r1, #1
    cc34:	d002      	beq.n	cc3c <validate_structure+0x174>
    cc36:	4a07      	ldr	r2, [pc, #28]	; (cc54 <validate_structure+0x18c>)
    cc38:	0089      	lsls	r1, r1, #2
    cc3a:	588a      	ldr	r2, [r1, r2]
    cc3c:	1996      	adds	r6, r2, r6
    cc3e:	60e6      	str	r6, [r4, #12]
    cc40:	e7d4      	b.n	cbec <validate_structure+0x124>
    cc42:	4293      	cmp	r3, r2
    cc44:	dad5      	bge.n	cbf2 <validate_structure+0x12a>
    cc46:	1ad2      	subs	r2, r2, r3
    cc48:	60e2      	str	r2, [r4, #12]
    cc4a:	6126      	str	r6, [r4, #16]
    cc4c:	e793      	b.n	cb76 <validate_structure+0xae>
    cc4e:	46c0      	nop			; (mov r8, r8)
    cc50:	0000076c 	.word	0x0000076c
    cc54:	00012918 	.word	0x00012918
    cc58:	0000076d 	.word	0x0000076d
    cc5c:	0000076b 	.word	0x0000076b

0000cc60 <mktime>:
    cc60:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc62:	b087      	sub	sp, #28
    cc64:	0004      	movs	r4, r0
    cc66:	f002 fcc1 	bl	f5ec <__gettzinfo>
    cc6a:	9004      	str	r0, [sp, #16]
    cc6c:	0020      	movs	r0, r4
    cc6e:	f7ff ff2b 	bl	cac8 <validate_structure>
    cc72:	233c      	movs	r3, #60	; 0x3c
    cc74:	6862      	ldr	r2, [r4, #4]
    cc76:	68a1      	ldr	r1, [r4, #8]
    cc78:	4353      	muls	r3, r2
    cc7a:	6822      	ldr	r2, [r4, #0]
    cc7c:	6965      	ldr	r5, [r4, #20]
    cc7e:	189b      	adds	r3, r3, r2
    cc80:	22e1      	movs	r2, #225	; 0xe1
    cc82:	0112      	lsls	r2, r2, #4
    cc84:	434a      	muls	r2, r1
    cc86:	189b      	adds	r3, r3, r2
    cc88:	68e2      	ldr	r2, [r4, #12]
    cc8a:	9303      	str	r3, [sp, #12]
    cc8c:	6923      	ldr	r3, [r4, #16]
    cc8e:	1e50      	subs	r0, r2, #1
    cc90:	4ab1      	ldr	r2, [pc, #708]	; (cf58 <mktime+0x2f8>)
    cc92:	0099      	lsls	r1, r3, #2
    cc94:	588a      	ldr	r2, [r1, r2]
    cc96:	1882      	adds	r2, r0, r2
    cc98:	9201      	str	r2, [sp, #4]
    cc9a:	2b01      	cmp	r3, #1
    cc9c:	dd12      	ble.n	ccc4 <mktime+0x64>
    cc9e:	07ab      	lsls	r3, r5, #30
    cca0:	d110      	bne.n	ccc4 <mktime+0x64>
    cca2:	2164      	movs	r1, #100	; 0x64
    cca4:	0028      	movs	r0, r5
    cca6:	f7fc ff0d 	bl	9ac4 <__aeabi_idivmod>
    ccaa:	2900      	cmp	r1, #0
    ccac:	d107      	bne.n	ccbe <mktime+0x5e>
    ccae:	4bab      	ldr	r3, [pc, #684]	; (cf5c <mktime+0x2fc>)
    ccb0:	3191      	adds	r1, #145	; 0x91
    ccb2:	31ff      	adds	r1, #255	; 0xff
    ccb4:	18e8      	adds	r0, r5, r3
    ccb6:	f7fc ff05 	bl	9ac4 <__aeabi_idivmod>
    ccba:	2900      	cmp	r1, #0
    ccbc:	d102      	bne.n	ccc4 <mktime+0x64>
    ccbe:	9b01      	ldr	r3, [sp, #4]
    ccc0:	3301      	adds	r3, #1
    ccc2:	9301      	str	r3, [sp, #4]
    ccc4:	9b01      	ldr	r3, [sp, #4]
    ccc6:	4aa6      	ldr	r2, [pc, #664]	; (cf60 <mktime+0x300>)
    ccc8:	61e3      	str	r3, [r4, #28]
    ccca:	4ba6      	ldr	r3, [pc, #664]	; (cf64 <mktime+0x304>)
    cccc:	18eb      	adds	r3, r5, r3
    ccce:	4293      	cmp	r3, r2
    ccd0:	d900      	bls.n	ccd4 <mktime+0x74>
    ccd2:	e0f8      	b.n	cec6 <mktime+0x266>
    ccd4:	2346      	movs	r3, #70	; 0x46
    ccd6:	9302      	str	r3, [sp, #8]
    ccd8:	2d46      	cmp	r5, #70	; 0x46
    ccda:	dc00      	bgt.n	ccde <mktime+0x7e>
    ccdc:	e072      	b.n	cdc4 <mktime+0x164>
    ccde:	27b7      	movs	r7, #183	; 0xb7
    cce0:	26c8      	movs	r6, #200	; 0xc8
    cce2:	007f      	lsls	r7, r7, #1
    cce4:	0076      	lsls	r6, r6, #1
    cce6:	2203      	movs	r2, #3
    cce8:	9b02      	ldr	r3, [sp, #8]
    ccea:	4213      	tst	r3, r2
    ccec:	d168      	bne.n	cdc0 <mktime+0x160>
    ccee:	0018      	movs	r0, r3
    ccf0:	2164      	movs	r1, #100	; 0x64
    ccf2:	f7fc fee7 	bl	9ac4 <__aeabi_idivmod>
    ccf6:	003b      	movs	r3, r7
    ccf8:	2900      	cmp	r1, #0
    ccfa:	d109      	bne.n	cd10 <mktime+0xb0>
    ccfc:	9b02      	ldr	r3, [sp, #8]
    ccfe:	4a97      	ldr	r2, [pc, #604]	; (cf5c <mktime+0x2fc>)
    cd00:	0031      	movs	r1, r6
    cd02:	1898      	adds	r0, r3, r2
    cd04:	f7fc fede 	bl	9ac4 <__aeabi_idivmod>
    cd08:	424b      	negs	r3, r1
    cd0a:	414b      	adcs	r3, r1
    cd0c:	336e      	adds	r3, #110	; 0x6e
    cd0e:	33ff      	adds	r3, #255	; 0xff
    cd10:	9a01      	ldr	r2, [sp, #4]
    cd12:	18d3      	adds	r3, r2, r3
    cd14:	9301      	str	r3, [sp, #4]
    cd16:	9b02      	ldr	r3, [sp, #8]
    cd18:	3301      	adds	r3, #1
    cd1a:	9302      	str	r3, [sp, #8]
    cd1c:	429d      	cmp	r5, r3
    cd1e:	d1e2      	bne.n	cce6 <mktime+0x86>
    cd20:	9a01      	ldr	r2, [sp, #4]
    cd22:	4b91      	ldr	r3, [pc, #580]	; (cf68 <mktime+0x308>)
    cd24:	4353      	muls	r3, r2
    cd26:	9a03      	ldr	r2, [sp, #12]
    cd28:	189b      	adds	r3, r3, r2
    cd2a:	9303      	str	r3, [sp, #12]
    cd2c:	f001 f97a 	bl	e024 <__tz_lock>
    cd30:	f001 f97a 	bl	e028 <_tzset_unlocked>
    cd34:	4b8d      	ldr	r3, [pc, #564]	; (cf6c <mktime+0x30c>)
    cd36:	681d      	ldr	r5, [r3, #0]
    cd38:	2d00      	cmp	r5, #0
    cd3a:	d100      	bne.n	cd3e <mktime+0xde>
    cd3c:	e107      	b.n	cf4e <mktime+0x2ee>
    cd3e:	6963      	ldr	r3, [r4, #20]
    cd40:	4a86      	ldr	r2, [pc, #536]	; (cf5c <mktime+0x2fc>)
    cd42:	6a26      	ldr	r6, [r4, #32]
    cd44:	1898      	adds	r0, r3, r2
    cd46:	2e00      	cmp	r6, #0
    cd48:	dd00      	ble.n	cd4c <mktime+0xec>
    cd4a:	2601      	movs	r6, #1
    cd4c:	9b04      	ldr	r3, [sp, #16]
    cd4e:	685b      	ldr	r3, [r3, #4]
    cd50:	9305      	str	r3, [sp, #20]
    cd52:	4298      	cmp	r0, r3
    cd54:	d000      	beq.n	cd58 <mktime+0xf8>
    cd56:	e073      	b.n	ce40 <mktime+0x1e0>
    cd58:	9b04      	ldr	r3, [sp, #16]
    cd5a:	9d03      	ldr	r5, [sp, #12]
    cd5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    cd5e:	69db      	ldr	r3, [r3, #28]
    cd60:	9305      	str	r3, [sp, #20]
    cd62:	1a1a      	subs	r2, r3, r0
    cd64:	9b04      	ldr	r3, [sp, #16]
    cd66:	6b99      	ldr	r1, [r3, #56]	; 0x38
    cd68:	6a1b      	ldr	r3, [r3, #32]
    cd6a:	1acf      	subs	r7, r1, r3
    cd6c:	42bd      	cmp	r5, r7
    cd6e:	db00      	blt.n	cd72 <mktime+0x112>
    cd70:	e06d      	b.n	ce4e <mktime+0x1ee>
    cd72:	9904      	ldr	r1, [sp, #16]
    cd74:	6809      	ldr	r1, [r1, #0]
    cd76:	2900      	cmp	r1, #0
    cd78:	d100      	bne.n	cd7c <mktime+0x11c>
    cd7a:	e06d      	b.n	ce58 <mktime+0x1f8>
    cd7c:	9903      	ldr	r1, [sp, #12]
    cd7e:	4291      	cmp	r1, r2
    cd80:	da00      	bge.n	cd84 <mktime+0x124>
    cd82:	e0e1      	b.n	cf48 <mktime+0x2e8>
    cd84:	2501      	movs	r5, #1
    cd86:	42b9      	cmp	r1, r7
    cd88:	db00      	blt.n	cd8c <mktime+0x12c>
    cd8a:	2500      	movs	r5, #0
    cd8c:	2e00      	cmp	r6, #0
    cd8e:	db00      	blt.n	cd92 <mktime+0x132>
    cd90:	e0a0      	b.n	ced4 <mktime+0x274>
    cd92:	2d01      	cmp	r5, #1
    cd94:	d000      	beq.n	cd98 <mktime+0x138>
    cd96:	e0da      	b.n	cf4e <mktime+0x2ee>
    cd98:	2501      	movs	r5, #1
    cd9a:	9b04      	ldr	r3, [sp, #16]
    cd9c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    cd9e:	9b03      	ldr	r3, [sp, #12]
    cda0:	199e      	adds	r6, r3, r6
    cda2:	f001 f940 	bl	e026 <__tz_unlock>
    cda6:	9801      	ldr	r0, [sp, #4]
    cda8:	6225      	str	r5, [r4, #32]
    cdaa:	3004      	adds	r0, #4
    cdac:	2107      	movs	r1, #7
    cdae:	f7fc fe89 	bl	9ac4 <__aeabi_idivmod>
    cdb2:	2900      	cmp	r1, #0
    cdb4:	da00      	bge.n	cdb8 <mktime+0x158>
    cdb6:	e084      	b.n	cec2 <mktime+0x262>
    cdb8:	61a1      	str	r1, [r4, #24]
    cdba:	0030      	movs	r0, r6
    cdbc:	b007      	add	sp, #28
    cdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdc0:	236e      	movs	r3, #110	; 0x6e
    cdc2:	e7a4      	b.n	cd0e <mktime+0xae>
    cdc4:	429d      	cmp	r5, r3
    cdc6:	d0ab      	beq.n	cd20 <mktime+0xc0>
    cdc8:	2645      	movs	r6, #69	; 0x45
    cdca:	2703      	movs	r7, #3
    cdcc:	42ae      	cmp	r6, r5
    cdce:	dc17      	bgt.n	ce00 <mktime+0x1a0>
    cdd0:	423d      	tst	r5, r7
    cdd2:	d130      	bne.n	ce36 <mktime+0x1d6>
    cdd4:	2164      	movs	r1, #100	; 0x64
    cdd6:	0028      	movs	r0, r5
    cdd8:	f7fc fe74 	bl	9ac4 <__aeabi_idivmod>
    cddc:	2900      	cmp	r1, #0
    cdde:	d12c      	bne.n	ce3a <mktime+0x1da>
    cde0:	4b5e      	ldr	r3, [pc, #376]	; (cf5c <mktime+0x2fc>)
    cde2:	3191      	adds	r1, #145	; 0x91
    cde4:	18e8      	adds	r0, r5, r3
    cde6:	31ff      	adds	r1, #255	; 0xff
    cde8:	f7fc fe6c 	bl	9ac4 <__aeabi_idivmod>
    cdec:	000b      	movs	r3, r1
    cdee:	4259      	negs	r1, r3
    cdf0:	4159      	adcs	r1, r3
    cdf2:	316e      	adds	r1, #110	; 0x6e
    cdf4:	31ff      	adds	r1, #255	; 0xff
    cdf6:	9b01      	ldr	r3, [sp, #4]
    cdf8:	9502      	str	r5, [sp, #8]
    cdfa:	1a5b      	subs	r3, r3, r1
    cdfc:	9301      	str	r3, [sp, #4]
    cdfe:	e78f      	b.n	cd20 <mktime+0xc0>
    ce00:	423e      	tst	r6, r7
    ce02:	d116      	bne.n	ce32 <mktime+0x1d2>
    ce04:	2164      	movs	r1, #100	; 0x64
    ce06:	0030      	movs	r0, r6
    ce08:	f7fc fe5c 	bl	9ac4 <__aeabi_idivmod>
    ce0c:	23b7      	movs	r3, #183	; 0xb7
    ce0e:	005b      	lsls	r3, r3, #1
    ce10:	2900      	cmp	r1, #0
    ce12:	d109      	bne.n	ce28 <mktime+0x1c8>
    ce14:	4b51      	ldr	r3, [pc, #324]	; (cf5c <mktime+0x2fc>)
    ce16:	3191      	adds	r1, #145	; 0x91
    ce18:	18f0      	adds	r0, r6, r3
    ce1a:	31ff      	adds	r1, #255	; 0xff
    ce1c:	f7fc fe52 	bl	9ac4 <__aeabi_idivmod>
    ce20:	424b      	negs	r3, r1
    ce22:	414b      	adcs	r3, r1
    ce24:	336e      	adds	r3, #110	; 0x6e
    ce26:	33ff      	adds	r3, #255	; 0xff
    ce28:	9a01      	ldr	r2, [sp, #4]
    ce2a:	3e01      	subs	r6, #1
    ce2c:	1ad3      	subs	r3, r2, r3
    ce2e:	9301      	str	r3, [sp, #4]
    ce30:	e7cc      	b.n	cdcc <mktime+0x16c>
    ce32:	236e      	movs	r3, #110	; 0x6e
    ce34:	e7f7      	b.n	ce26 <mktime+0x1c6>
    ce36:	216e      	movs	r1, #110	; 0x6e
    ce38:	e7dc      	b.n	cdf4 <mktime+0x194>
    ce3a:	21b7      	movs	r1, #183	; 0xb7
    ce3c:	0049      	lsls	r1, r1, #1
    ce3e:	e7da      	b.n	cdf6 <mktime+0x196>
    ce40:	f001 f842 	bl	dec8 <__tzcalc_limits>
    ce44:	2800      	cmp	r0, #0
    ce46:	d000      	beq.n	ce4a <mktime+0x1ea>
    ce48:	e786      	b.n	cd58 <mktime+0xf8>
    ce4a:	0035      	movs	r5, r6
    ce4c:	e7a1      	b.n	cd92 <mktime+0x132>
    ce4e:	9d03      	ldr	r5, [sp, #12]
    ce50:	1a09      	subs	r1, r1, r0
    ce52:	428d      	cmp	r5, r1
    ce54:	dbf9      	blt.n	ce4a <mktime+0x1ea>
    ce56:	e78c      	b.n	cd72 <mktime+0x112>
    ce58:	9d03      	ldr	r5, [sp, #12]
    ce5a:	4295      	cmp	r5, r2
    ce5c:	da36      	bge.n	cecc <mktime+0x26c>
    ce5e:	9a03      	ldr	r2, [sp, #12]
    ce60:	2501      	movs	r5, #1
    ce62:	42ba      	cmp	r2, r7
    ce64:	da00      	bge.n	ce68 <mktime+0x208>
    ce66:	e791      	b.n	cd8c <mktime+0x12c>
    ce68:	000d      	movs	r5, r1
    ce6a:	e78f      	b.n	cd8c <mktime+0x12c>
    ce6c:	2701      	movs	r7, #1
    ce6e:	427f      	negs	r7, r7
    ce70:	e04b      	b.n	cf0a <mktime+0x2aa>
    ce72:	21b6      	movs	r1, #182	; 0xb6
    ce74:	0049      	lsls	r1, r1, #1
    ce76:	61e1      	str	r1, [r4, #28]
    ce78:	e78b      	b.n	cd92 <mktime+0x132>
    ce7a:	216e      	movs	r1, #110	; 0x6e
    ce7c:	e062      	b.n	cf44 <mktime+0x2e4>
    ce7e:	9a02      	ldr	r2, [sp, #8]
    ce80:	421a      	tst	r2, r3
    ce82:	d117      	bne.n	ceb4 <mktime+0x254>
    ce84:	2164      	movs	r1, #100	; 0x64
    ce86:	0010      	movs	r0, r2
    ce88:	f7fc fe1c 	bl	9ac4 <__aeabi_idivmod>
    ce8c:	2900      	cmp	r1, #0
    ce8e:	d113      	bne.n	ceb8 <mktime+0x258>
    ce90:	4a32      	ldr	r2, [pc, #200]	; (cf5c <mktime+0x2fc>)
    ce92:	9b02      	ldr	r3, [sp, #8]
    ce94:	4694      	mov	ip, r2
    ce96:	3191      	adds	r1, #145	; 0x91
    ce98:	4463      	add	r3, ip
    ce9a:	0018      	movs	r0, r3
    ce9c:	31ff      	adds	r1, #255	; 0xff
    ce9e:	f7fc fe11 	bl	9ac4 <__aeabi_idivmod>
    cea2:	000b      	movs	r3, r1
    cea4:	4259      	negs	r1, r3
    cea6:	4159      	adcs	r1, r3
    cea8:	316e      	adds	r1, #110	; 0x6e
    ceaa:	31ff      	adds	r1, #255	; 0xff
    ceac:	42b9      	cmp	r1, r7
    ceae:	dd06      	ble.n	cebe <mktime+0x25e>
    ceb0:	61e7      	str	r7, [r4, #28]
    ceb2:	e76e      	b.n	cd92 <mktime+0x132>
    ceb4:	216e      	movs	r1, #110	; 0x6e
    ceb6:	e7f8      	b.n	ceaa <mktime+0x24a>
    ceb8:	21b7      	movs	r1, #183	; 0xb7
    ceba:	0049      	lsls	r1, r1, #1
    cebc:	e7f6      	b.n	ceac <mktime+0x24c>
    cebe:	1a7f      	subs	r7, r7, r1
    cec0:	e7f6      	b.n	ceb0 <mktime+0x250>
    cec2:	3107      	adds	r1, #7
    cec4:	e778      	b.n	cdb8 <mktime+0x158>
    cec6:	2601      	movs	r6, #1
    cec8:	4276      	negs	r6, r6
    ceca:	e776      	b.n	cdba <mktime+0x15a>
    cecc:	2501      	movs	r5, #1
    cece:	2e00      	cmp	r6, #0
    ced0:	da00      	bge.n	ced4 <mktime+0x274>
    ced2:	e761      	b.n	cd98 <mktime+0x138>
    ced4:	406e      	eors	r6, r5
    ced6:	2e01      	cmp	r6, #1
    ced8:	d000      	beq.n	cedc <mktime+0x27c>
    ceda:	e75a      	b.n	cd92 <mktime+0x132>
    cedc:	1a1b      	subs	r3, r3, r0
    cede:	2d00      	cmp	r5, #0
    cee0:	d100      	bne.n	cee4 <mktime+0x284>
    cee2:	425b      	negs	r3, r3
    cee4:	6822      	ldr	r2, [r4, #0]
    cee6:	0020      	movs	r0, r4
    cee8:	18d2      	adds	r2, r2, r3
    ceea:	6022      	str	r2, [r4, #0]
    ceec:	9a03      	ldr	r2, [sp, #12]
    ceee:	68e7      	ldr	r7, [r4, #12]
    cef0:	18d3      	adds	r3, r2, r3
    cef2:	9303      	str	r3, [sp, #12]
    cef4:	f7ff fde8 	bl	cac8 <validate_structure>
    cef8:	68e3      	ldr	r3, [r4, #12]
    cefa:	1bdf      	subs	r7, r3, r7
    cefc:	d100      	bne.n	cf00 <mktime+0x2a0>
    cefe:	e748      	b.n	cd92 <mktime+0x132>
    cf00:	2f01      	cmp	r7, #1
    cf02:	dcb3      	bgt.n	ce6c <mktime+0x20c>
    cf04:	1c7b      	adds	r3, r7, #1
    cf06:	da00      	bge.n	cf0a <mktime+0x2aa>
    cf08:	0037      	movs	r7, r6
    cf0a:	9b01      	ldr	r3, [sp, #4]
    cf0c:	69e2      	ldr	r2, [r4, #28]
    cf0e:	19db      	adds	r3, r3, r7
    cf10:	9301      	str	r3, [sp, #4]
    cf12:	2303      	movs	r3, #3
    cf14:	18bf      	adds	r7, r7, r2
    cf16:	d5b2      	bpl.n	ce7e <mktime+0x21e>
    cf18:	9a02      	ldr	r2, [sp, #8]
    cf1a:	1e50      	subs	r0, r2, #1
    cf1c:	4218      	tst	r0, r3
    cf1e:	d1a8      	bne.n	ce72 <mktime+0x212>
    cf20:	2164      	movs	r1, #100	; 0x64
    cf22:	f7fc fdcf 	bl	9ac4 <__aeabi_idivmod>
    cf26:	2900      	cmp	r1, #0
    cf28:	d1a7      	bne.n	ce7a <mktime+0x21a>
    cf2a:	4a11      	ldr	r2, [pc, #68]	; (cf70 <mktime+0x310>)
    cf2c:	9b02      	ldr	r3, [sp, #8]
    cf2e:	4694      	mov	ip, r2
    cf30:	3191      	adds	r1, #145	; 0x91
    cf32:	4463      	add	r3, ip
    cf34:	0018      	movs	r0, r3
    cf36:	31ff      	adds	r1, #255	; 0xff
    cf38:	f7fc fdc4 	bl	9ac4 <__aeabi_idivmod>
    cf3c:	000b      	movs	r3, r1
    cf3e:	4259      	negs	r1, r3
    cf40:	4159      	adcs	r1, r3
    cf42:	316d      	adds	r1, #109	; 0x6d
    cf44:	31ff      	adds	r1, #255	; 0xff
    cf46:	e796      	b.n	ce76 <mktime+0x216>
    cf48:	2500      	movs	r5, #0
    cf4a:	2e00      	cmp	r6, #0
    cf4c:	dac2      	bge.n	ced4 <mktime+0x274>
    cf4e:	9b04      	ldr	r3, [sp, #16]
    cf50:	6a1e      	ldr	r6, [r3, #32]
    cf52:	9b03      	ldr	r3, [sp, #12]
    cf54:	199e      	adds	r6, r3, r6
    cf56:	e724      	b.n	cda2 <mktime+0x142>
    cf58:	00012948 	.word	0x00012948
    cf5c:	0000076c 	.word	0x0000076c
    cf60:	00004e20 	.word	0x00004e20
    cf64:	00002710 	.word	0x00002710
    cf68:	00015180 	.word	0x00015180
    cf6c:	20001f98 	.word	0x20001f98
    cf70:	0000076b 	.word	0x0000076b

0000cf74 <_free_r>:
    cf74:	b570      	push	{r4, r5, r6, lr}
    cf76:	0005      	movs	r5, r0
    cf78:	2900      	cmp	r1, #0
    cf7a:	d010      	beq.n	cf9e <_free_r+0x2a>
    cf7c:	1f0c      	subs	r4, r1, #4
    cf7e:	6823      	ldr	r3, [r4, #0]
    cf80:	2b00      	cmp	r3, #0
    cf82:	da00      	bge.n	cf86 <_free_r+0x12>
    cf84:	18e4      	adds	r4, r4, r3
    cf86:	0028      	movs	r0, r5
    cf88:	f002 fbb7 	bl	f6fa <__malloc_lock>
    cf8c:	4a1d      	ldr	r2, [pc, #116]	; (d004 <_free_r+0x90>)
    cf8e:	6813      	ldr	r3, [r2, #0]
    cf90:	2b00      	cmp	r3, #0
    cf92:	d105      	bne.n	cfa0 <_free_r+0x2c>
    cf94:	6063      	str	r3, [r4, #4]
    cf96:	6014      	str	r4, [r2, #0]
    cf98:	0028      	movs	r0, r5
    cf9a:	f002 fbaf 	bl	f6fc <__malloc_unlock>
    cf9e:	bd70      	pop	{r4, r5, r6, pc}
    cfa0:	42a3      	cmp	r3, r4
    cfa2:	d909      	bls.n	cfb8 <_free_r+0x44>
    cfa4:	6821      	ldr	r1, [r4, #0]
    cfa6:	1860      	adds	r0, r4, r1
    cfa8:	4283      	cmp	r3, r0
    cfaa:	d1f3      	bne.n	cf94 <_free_r+0x20>
    cfac:	6818      	ldr	r0, [r3, #0]
    cfae:	685b      	ldr	r3, [r3, #4]
    cfb0:	1841      	adds	r1, r0, r1
    cfb2:	6021      	str	r1, [r4, #0]
    cfb4:	e7ee      	b.n	cf94 <_free_r+0x20>
    cfb6:	0013      	movs	r3, r2
    cfb8:	685a      	ldr	r2, [r3, #4]
    cfba:	2a00      	cmp	r2, #0
    cfbc:	d001      	beq.n	cfc2 <_free_r+0x4e>
    cfbe:	42a2      	cmp	r2, r4
    cfc0:	d9f9      	bls.n	cfb6 <_free_r+0x42>
    cfc2:	6819      	ldr	r1, [r3, #0]
    cfc4:	1858      	adds	r0, r3, r1
    cfc6:	42a0      	cmp	r0, r4
    cfc8:	d10b      	bne.n	cfe2 <_free_r+0x6e>
    cfca:	6820      	ldr	r0, [r4, #0]
    cfcc:	1809      	adds	r1, r1, r0
    cfce:	1858      	adds	r0, r3, r1
    cfd0:	6019      	str	r1, [r3, #0]
    cfd2:	4282      	cmp	r2, r0
    cfd4:	d1e0      	bne.n	cf98 <_free_r+0x24>
    cfd6:	6810      	ldr	r0, [r2, #0]
    cfd8:	6852      	ldr	r2, [r2, #4]
    cfda:	1841      	adds	r1, r0, r1
    cfdc:	6019      	str	r1, [r3, #0]
    cfde:	605a      	str	r2, [r3, #4]
    cfe0:	e7da      	b.n	cf98 <_free_r+0x24>
    cfe2:	42a0      	cmp	r0, r4
    cfe4:	d902      	bls.n	cfec <_free_r+0x78>
    cfe6:	230c      	movs	r3, #12
    cfe8:	602b      	str	r3, [r5, #0]
    cfea:	e7d5      	b.n	cf98 <_free_r+0x24>
    cfec:	6821      	ldr	r1, [r4, #0]
    cfee:	1860      	adds	r0, r4, r1
    cff0:	4282      	cmp	r2, r0
    cff2:	d103      	bne.n	cffc <_free_r+0x88>
    cff4:	6810      	ldr	r0, [r2, #0]
    cff6:	6852      	ldr	r2, [r2, #4]
    cff8:	1841      	adds	r1, r0, r1
    cffa:	6021      	str	r1, [r4, #0]
    cffc:	6062      	str	r2, [r4, #4]
    cffe:	605c      	str	r4, [r3, #4]
    d000:	e7ca      	b.n	cf98 <_free_r+0x24>
    d002:	46c0      	nop			; (mov r8, r8)
    d004:	20001f74 	.word	0x20001f74

0000d008 <_malloc_r>:
    d008:	2303      	movs	r3, #3
    d00a:	b570      	push	{r4, r5, r6, lr}
    d00c:	1ccd      	adds	r5, r1, #3
    d00e:	439d      	bics	r5, r3
    d010:	3508      	adds	r5, #8
    d012:	0006      	movs	r6, r0
    d014:	2d0c      	cmp	r5, #12
    d016:	d21e      	bcs.n	d056 <_malloc_r+0x4e>
    d018:	250c      	movs	r5, #12
    d01a:	42a9      	cmp	r1, r5
    d01c:	d81d      	bhi.n	d05a <_malloc_r+0x52>
    d01e:	0030      	movs	r0, r6
    d020:	f002 fb6b 	bl	f6fa <__malloc_lock>
    d024:	4a25      	ldr	r2, [pc, #148]	; (d0bc <_malloc_r+0xb4>)
    d026:	6814      	ldr	r4, [r2, #0]
    d028:	0021      	movs	r1, r4
    d02a:	2900      	cmp	r1, #0
    d02c:	d119      	bne.n	d062 <_malloc_r+0x5a>
    d02e:	4c24      	ldr	r4, [pc, #144]	; (d0c0 <_malloc_r+0xb8>)
    d030:	6823      	ldr	r3, [r4, #0]
    d032:	2b00      	cmp	r3, #0
    d034:	d103      	bne.n	d03e <_malloc_r+0x36>
    d036:	0030      	movs	r0, r6
    d038:	f000 fe02 	bl	dc40 <_sbrk_r>
    d03c:	6020      	str	r0, [r4, #0]
    d03e:	0029      	movs	r1, r5
    d040:	0030      	movs	r0, r6
    d042:	f000 fdfd 	bl	dc40 <_sbrk_r>
    d046:	1c43      	adds	r3, r0, #1
    d048:	d12c      	bne.n	d0a4 <_malloc_r+0x9c>
    d04a:	230c      	movs	r3, #12
    d04c:	0030      	movs	r0, r6
    d04e:	6033      	str	r3, [r6, #0]
    d050:	f002 fb54 	bl	f6fc <__malloc_unlock>
    d054:	e003      	b.n	d05e <_malloc_r+0x56>
    d056:	2d00      	cmp	r5, #0
    d058:	dadf      	bge.n	d01a <_malloc_r+0x12>
    d05a:	230c      	movs	r3, #12
    d05c:	6033      	str	r3, [r6, #0]
    d05e:	2000      	movs	r0, #0
    d060:	bd70      	pop	{r4, r5, r6, pc}
    d062:	680b      	ldr	r3, [r1, #0]
    d064:	1b5b      	subs	r3, r3, r5
    d066:	d41a      	bmi.n	d09e <_malloc_r+0x96>
    d068:	2b0b      	cmp	r3, #11
    d06a:	d903      	bls.n	d074 <_malloc_r+0x6c>
    d06c:	600b      	str	r3, [r1, #0]
    d06e:	18cc      	adds	r4, r1, r3
    d070:	6025      	str	r5, [r4, #0]
    d072:	e003      	b.n	d07c <_malloc_r+0x74>
    d074:	428c      	cmp	r4, r1
    d076:	d10e      	bne.n	d096 <_malloc_r+0x8e>
    d078:	6863      	ldr	r3, [r4, #4]
    d07a:	6013      	str	r3, [r2, #0]
    d07c:	0030      	movs	r0, r6
    d07e:	f002 fb3d 	bl	f6fc <__malloc_unlock>
    d082:	0020      	movs	r0, r4
    d084:	2207      	movs	r2, #7
    d086:	300b      	adds	r0, #11
    d088:	1d23      	adds	r3, r4, #4
    d08a:	4390      	bics	r0, r2
    d08c:	1ac3      	subs	r3, r0, r3
    d08e:	d0e7      	beq.n	d060 <_malloc_r+0x58>
    d090:	425a      	negs	r2, r3
    d092:	50e2      	str	r2, [r4, r3]
    d094:	e7e4      	b.n	d060 <_malloc_r+0x58>
    d096:	684b      	ldr	r3, [r1, #4]
    d098:	6063      	str	r3, [r4, #4]
    d09a:	000c      	movs	r4, r1
    d09c:	e7ee      	b.n	d07c <_malloc_r+0x74>
    d09e:	000c      	movs	r4, r1
    d0a0:	6849      	ldr	r1, [r1, #4]
    d0a2:	e7c2      	b.n	d02a <_malloc_r+0x22>
    d0a4:	2303      	movs	r3, #3
    d0a6:	1cc4      	adds	r4, r0, #3
    d0a8:	439c      	bics	r4, r3
    d0aa:	42a0      	cmp	r0, r4
    d0ac:	d0e0      	beq.n	d070 <_malloc_r+0x68>
    d0ae:	1a21      	subs	r1, r4, r0
    d0b0:	0030      	movs	r0, r6
    d0b2:	f000 fdc5 	bl	dc40 <_sbrk_r>
    d0b6:	1c43      	adds	r3, r0, #1
    d0b8:	d1da      	bne.n	d070 <_malloc_r+0x68>
    d0ba:	e7c6      	b.n	d04a <_malloc_r+0x42>
    d0bc:	20001f74 	.word	0x20001f74
    d0c0:	20001f78 	.word	0x20001f78

0000d0c4 <__sfputc_r>:
    d0c4:	6893      	ldr	r3, [r2, #8]
    d0c6:	b510      	push	{r4, lr}
    d0c8:	3b01      	subs	r3, #1
    d0ca:	6093      	str	r3, [r2, #8]
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	da05      	bge.n	d0dc <__sfputc_r+0x18>
    d0d0:	6994      	ldr	r4, [r2, #24]
    d0d2:	42a3      	cmp	r3, r4
    d0d4:	db08      	blt.n	d0e8 <__sfputc_r+0x24>
    d0d6:	b2cb      	uxtb	r3, r1
    d0d8:	2b0a      	cmp	r3, #10
    d0da:	d005      	beq.n	d0e8 <__sfputc_r+0x24>
    d0dc:	6813      	ldr	r3, [r2, #0]
    d0de:	1c58      	adds	r0, r3, #1
    d0e0:	6010      	str	r0, [r2, #0]
    d0e2:	7019      	strb	r1, [r3, #0]
    d0e4:	b2c8      	uxtb	r0, r1
    d0e6:	bd10      	pop	{r4, pc}
    d0e8:	f001 f948 	bl	e37c <__swbuf_r>
    d0ec:	e7fb      	b.n	d0e6 <__sfputc_r+0x22>

0000d0ee <__sfputs_r>:
    d0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0f0:	0006      	movs	r6, r0
    d0f2:	000f      	movs	r7, r1
    d0f4:	0014      	movs	r4, r2
    d0f6:	18d5      	adds	r5, r2, r3
    d0f8:	42ac      	cmp	r4, r5
    d0fa:	d101      	bne.n	d100 <__sfputs_r+0x12>
    d0fc:	2000      	movs	r0, #0
    d0fe:	e007      	b.n	d110 <__sfputs_r+0x22>
    d100:	7821      	ldrb	r1, [r4, #0]
    d102:	003a      	movs	r2, r7
    d104:	0030      	movs	r0, r6
    d106:	f7ff ffdd 	bl	d0c4 <__sfputc_r>
    d10a:	3401      	adds	r4, #1
    d10c:	1c43      	adds	r3, r0, #1
    d10e:	d1f3      	bne.n	d0f8 <__sfputs_r+0xa>
    d110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000d114 <_vfiprintf_r>:
    d114:	b5f0      	push	{r4, r5, r6, r7, lr}
    d116:	b09f      	sub	sp, #124	; 0x7c
    d118:	0006      	movs	r6, r0
    d11a:	000f      	movs	r7, r1
    d11c:	0014      	movs	r4, r2
    d11e:	9305      	str	r3, [sp, #20]
    d120:	2800      	cmp	r0, #0
    d122:	d004      	beq.n	d12e <_vfiprintf_r+0x1a>
    d124:	6983      	ldr	r3, [r0, #24]
    d126:	2b00      	cmp	r3, #0
    d128:	d101      	bne.n	d12e <_vfiprintf_r+0x1a>
    d12a:	f002 f987 	bl	f43c <__sinit>
    d12e:	4b7f      	ldr	r3, [pc, #508]	; (d32c <_vfiprintf_r+0x218>)
    d130:	429f      	cmp	r7, r3
    d132:	d15c      	bne.n	d1ee <_vfiprintf_r+0xda>
    d134:	6877      	ldr	r7, [r6, #4]
    d136:	89bb      	ldrh	r3, [r7, #12]
    d138:	071b      	lsls	r3, r3, #28
    d13a:	d562      	bpl.n	d202 <_vfiprintf_r+0xee>
    d13c:	693b      	ldr	r3, [r7, #16]
    d13e:	2b00      	cmp	r3, #0
    d140:	d05f      	beq.n	d202 <_vfiprintf_r+0xee>
    d142:	2300      	movs	r3, #0
    d144:	ad06      	add	r5, sp, #24
    d146:	616b      	str	r3, [r5, #20]
    d148:	3320      	adds	r3, #32
    d14a:	766b      	strb	r3, [r5, #25]
    d14c:	3310      	adds	r3, #16
    d14e:	76ab      	strb	r3, [r5, #26]
    d150:	9402      	str	r4, [sp, #8]
    d152:	9c02      	ldr	r4, [sp, #8]
    d154:	7823      	ldrb	r3, [r4, #0]
    d156:	2b00      	cmp	r3, #0
    d158:	d15d      	bne.n	d216 <_vfiprintf_r+0x102>
    d15a:	9b02      	ldr	r3, [sp, #8]
    d15c:	1ae3      	subs	r3, r4, r3
    d15e:	9304      	str	r3, [sp, #16]
    d160:	d00d      	beq.n	d17e <_vfiprintf_r+0x6a>
    d162:	9b04      	ldr	r3, [sp, #16]
    d164:	9a02      	ldr	r2, [sp, #8]
    d166:	0039      	movs	r1, r7
    d168:	0030      	movs	r0, r6
    d16a:	f7ff ffc0 	bl	d0ee <__sfputs_r>
    d16e:	1c43      	adds	r3, r0, #1
    d170:	d100      	bne.n	d174 <_vfiprintf_r+0x60>
    d172:	e0cc      	b.n	d30e <_vfiprintf_r+0x1fa>
    d174:	696a      	ldr	r2, [r5, #20]
    d176:	9b04      	ldr	r3, [sp, #16]
    d178:	4694      	mov	ip, r2
    d17a:	4463      	add	r3, ip
    d17c:	616b      	str	r3, [r5, #20]
    d17e:	7823      	ldrb	r3, [r4, #0]
    d180:	2b00      	cmp	r3, #0
    d182:	d100      	bne.n	d186 <_vfiprintf_r+0x72>
    d184:	e0c3      	b.n	d30e <_vfiprintf_r+0x1fa>
    d186:	2201      	movs	r2, #1
    d188:	2300      	movs	r3, #0
    d18a:	4252      	negs	r2, r2
    d18c:	606a      	str	r2, [r5, #4]
    d18e:	a902      	add	r1, sp, #8
    d190:	3254      	adds	r2, #84	; 0x54
    d192:	1852      	adds	r2, r2, r1
    d194:	3401      	adds	r4, #1
    d196:	602b      	str	r3, [r5, #0]
    d198:	60eb      	str	r3, [r5, #12]
    d19a:	60ab      	str	r3, [r5, #8]
    d19c:	7013      	strb	r3, [r2, #0]
    d19e:	65ab      	str	r3, [r5, #88]	; 0x58
    d1a0:	7821      	ldrb	r1, [r4, #0]
    d1a2:	2205      	movs	r2, #5
    d1a4:	4862      	ldr	r0, [pc, #392]	; (d330 <_vfiprintf_r+0x21c>)
    d1a6:	f002 fa9d 	bl	f6e4 <memchr>
    d1aa:	1c63      	adds	r3, r4, #1
    d1ac:	469c      	mov	ip, r3
    d1ae:	2800      	cmp	r0, #0
    d1b0:	d135      	bne.n	d21e <_vfiprintf_r+0x10a>
    d1b2:	6829      	ldr	r1, [r5, #0]
    d1b4:	06cb      	lsls	r3, r1, #27
    d1b6:	d504      	bpl.n	d1c2 <_vfiprintf_r+0xae>
    d1b8:	2353      	movs	r3, #83	; 0x53
    d1ba:	aa02      	add	r2, sp, #8
    d1bc:	3020      	adds	r0, #32
    d1be:	189b      	adds	r3, r3, r2
    d1c0:	7018      	strb	r0, [r3, #0]
    d1c2:	070b      	lsls	r3, r1, #28
    d1c4:	d504      	bpl.n	d1d0 <_vfiprintf_r+0xbc>
    d1c6:	2353      	movs	r3, #83	; 0x53
    d1c8:	202b      	movs	r0, #43	; 0x2b
    d1ca:	aa02      	add	r2, sp, #8
    d1cc:	189b      	adds	r3, r3, r2
    d1ce:	7018      	strb	r0, [r3, #0]
    d1d0:	7823      	ldrb	r3, [r4, #0]
    d1d2:	2b2a      	cmp	r3, #42	; 0x2a
    d1d4:	d02c      	beq.n	d230 <_vfiprintf_r+0x11c>
    d1d6:	2000      	movs	r0, #0
    d1d8:	210a      	movs	r1, #10
    d1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1dc:	7822      	ldrb	r2, [r4, #0]
    d1de:	3a30      	subs	r2, #48	; 0x30
    d1e0:	2a09      	cmp	r2, #9
    d1e2:	d800      	bhi.n	d1e6 <_vfiprintf_r+0xd2>
    d1e4:	e06b      	b.n	d2be <_vfiprintf_r+0x1aa>
    d1e6:	2800      	cmp	r0, #0
    d1e8:	d02a      	beq.n	d240 <_vfiprintf_r+0x12c>
    d1ea:	9309      	str	r3, [sp, #36]	; 0x24
    d1ec:	e028      	b.n	d240 <_vfiprintf_r+0x12c>
    d1ee:	4b51      	ldr	r3, [pc, #324]	; (d334 <_vfiprintf_r+0x220>)
    d1f0:	429f      	cmp	r7, r3
    d1f2:	d101      	bne.n	d1f8 <_vfiprintf_r+0xe4>
    d1f4:	68b7      	ldr	r7, [r6, #8]
    d1f6:	e79e      	b.n	d136 <_vfiprintf_r+0x22>
    d1f8:	4b4f      	ldr	r3, [pc, #316]	; (d338 <_vfiprintf_r+0x224>)
    d1fa:	429f      	cmp	r7, r3
    d1fc:	d19b      	bne.n	d136 <_vfiprintf_r+0x22>
    d1fe:	68f7      	ldr	r7, [r6, #12]
    d200:	e799      	b.n	d136 <_vfiprintf_r+0x22>
    d202:	0039      	movs	r1, r7
    d204:	0030      	movs	r0, r6
    d206:	f001 f91b 	bl	e440 <__swsetup_r>
    d20a:	2800      	cmp	r0, #0
    d20c:	d099      	beq.n	d142 <_vfiprintf_r+0x2e>
    d20e:	2001      	movs	r0, #1
    d210:	4240      	negs	r0, r0
    d212:	b01f      	add	sp, #124	; 0x7c
    d214:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d216:	2b25      	cmp	r3, #37	; 0x25
    d218:	d09f      	beq.n	d15a <_vfiprintf_r+0x46>
    d21a:	3401      	adds	r4, #1
    d21c:	e79a      	b.n	d154 <_vfiprintf_r+0x40>
    d21e:	4b44      	ldr	r3, [pc, #272]	; (d330 <_vfiprintf_r+0x21c>)
    d220:	6829      	ldr	r1, [r5, #0]
    d222:	1ac0      	subs	r0, r0, r3
    d224:	2301      	movs	r3, #1
    d226:	4083      	lsls	r3, r0
    d228:	430b      	orrs	r3, r1
    d22a:	602b      	str	r3, [r5, #0]
    d22c:	4664      	mov	r4, ip
    d22e:	e7b7      	b.n	d1a0 <_vfiprintf_r+0x8c>
    d230:	9b05      	ldr	r3, [sp, #20]
    d232:	1d18      	adds	r0, r3, #4
    d234:	681b      	ldr	r3, [r3, #0]
    d236:	9005      	str	r0, [sp, #20]
    d238:	2b00      	cmp	r3, #0
    d23a:	db3a      	blt.n	d2b2 <_vfiprintf_r+0x19e>
    d23c:	9309      	str	r3, [sp, #36]	; 0x24
    d23e:	4664      	mov	r4, ip
    d240:	7823      	ldrb	r3, [r4, #0]
    d242:	2b2e      	cmp	r3, #46	; 0x2e
    d244:	d10b      	bne.n	d25e <_vfiprintf_r+0x14a>
    d246:	7863      	ldrb	r3, [r4, #1]
    d248:	1c62      	adds	r2, r4, #1
    d24a:	2b2a      	cmp	r3, #42	; 0x2a
    d24c:	d13f      	bne.n	d2ce <_vfiprintf_r+0x1ba>
    d24e:	9b05      	ldr	r3, [sp, #20]
    d250:	3402      	adds	r4, #2
    d252:	1d1a      	adds	r2, r3, #4
    d254:	681b      	ldr	r3, [r3, #0]
    d256:	9205      	str	r2, [sp, #20]
    d258:	2b00      	cmp	r3, #0
    d25a:	db35      	blt.n	d2c8 <_vfiprintf_r+0x1b4>
    d25c:	9307      	str	r3, [sp, #28]
    d25e:	7821      	ldrb	r1, [r4, #0]
    d260:	2203      	movs	r2, #3
    d262:	4836      	ldr	r0, [pc, #216]	; (d33c <_vfiprintf_r+0x228>)
    d264:	f002 fa3e 	bl	f6e4 <memchr>
    d268:	2800      	cmp	r0, #0
    d26a:	d007      	beq.n	d27c <_vfiprintf_r+0x168>
    d26c:	4b33      	ldr	r3, [pc, #204]	; (d33c <_vfiprintf_r+0x228>)
    d26e:	682a      	ldr	r2, [r5, #0]
    d270:	1ac0      	subs	r0, r0, r3
    d272:	2340      	movs	r3, #64	; 0x40
    d274:	4083      	lsls	r3, r0
    d276:	4313      	orrs	r3, r2
    d278:	602b      	str	r3, [r5, #0]
    d27a:	3401      	adds	r4, #1
    d27c:	7821      	ldrb	r1, [r4, #0]
    d27e:	1c63      	adds	r3, r4, #1
    d280:	2206      	movs	r2, #6
    d282:	482f      	ldr	r0, [pc, #188]	; (d340 <_vfiprintf_r+0x22c>)
    d284:	9302      	str	r3, [sp, #8]
    d286:	7629      	strb	r1, [r5, #24]
    d288:	f002 fa2c 	bl	f6e4 <memchr>
    d28c:	2800      	cmp	r0, #0
    d28e:	d044      	beq.n	d31a <_vfiprintf_r+0x206>
    d290:	4b2c      	ldr	r3, [pc, #176]	; (d344 <_vfiprintf_r+0x230>)
    d292:	2b00      	cmp	r3, #0
    d294:	d12f      	bne.n	d2f6 <_vfiprintf_r+0x1e2>
    d296:	6829      	ldr	r1, [r5, #0]
    d298:	9b05      	ldr	r3, [sp, #20]
    d29a:	2207      	movs	r2, #7
    d29c:	05c9      	lsls	r1, r1, #23
    d29e:	d528      	bpl.n	d2f2 <_vfiprintf_r+0x1de>
    d2a0:	189b      	adds	r3, r3, r2
    d2a2:	4393      	bics	r3, r2
    d2a4:	3308      	adds	r3, #8
    d2a6:	9305      	str	r3, [sp, #20]
    d2a8:	696b      	ldr	r3, [r5, #20]
    d2aa:	9a03      	ldr	r2, [sp, #12]
    d2ac:	189b      	adds	r3, r3, r2
    d2ae:	616b      	str	r3, [r5, #20]
    d2b0:	e74f      	b.n	d152 <_vfiprintf_r+0x3e>
    d2b2:	425b      	negs	r3, r3
    d2b4:	60eb      	str	r3, [r5, #12]
    d2b6:	2302      	movs	r3, #2
    d2b8:	430b      	orrs	r3, r1
    d2ba:	602b      	str	r3, [r5, #0]
    d2bc:	e7bf      	b.n	d23e <_vfiprintf_r+0x12a>
    d2be:	434b      	muls	r3, r1
    d2c0:	3401      	adds	r4, #1
    d2c2:	189b      	adds	r3, r3, r2
    d2c4:	2001      	movs	r0, #1
    d2c6:	e789      	b.n	d1dc <_vfiprintf_r+0xc8>
    d2c8:	2301      	movs	r3, #1
    d2ca:	425b      	negs	r3, r3
    d2cc:	e7c6      	b.n	d25c <_vfiprintf_r+0x148>
    d2ce:	2300      	movs	r3, #0
    d2d0:	0014      	movs	r4, r2
    d2d2:	200a      	movs	r0, #10
    d2d4:	001a      	movs	r2, r3
    d2d6:	606b      	str	r3, [r5, #4]
    d2d8:	7821      	ldrb	r1, [r4, #0]
    d2da:	3930      	subs	r1, #48	; 0x30
    d2dc:	2909      	cmp	r1, #9
    d2de:	d903      	bls.n	d2e8 <_vfiprintf_r+0x1d4>
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d0bc      	beq.n	d25e <_vfiprintf_r+0x14a>
    d2e4:	9207      	str	r2, [sp, #28]
    d2e6:	e7ba      	b.n	d25e <_vfiprintf_r+0x14a>
    d2e8:	4342      	muls	r2, r0
    d2ea:	3401      	adds	r4, #1
    d2ec:	1852      	adds	r2, r2, r1
    d2ee:	2301      	movs	r3, #1
    d2f0:	e7f2      	b.n	d2d8 <_vfiprintf_r+0x1c4>
    d2f2:	3307      	adds	r3, #7
    d2f4:	e7d5      	b.n	d2a2 <_vfiprintf_r+0x18e>
    d2f6:	ab05      	add	r3, sp, #20
    d2f8:	9300      	str	r3, [sp, #0]
    d2fa:	003a      	movs	r2, r7
    d2fc:	4b12      	ldr	r3, [pc, #72]	; (d348 <_vfiprintf_r+0x234>)
    d2fe:	0029      	movs	r1, r5
    d300:	0030      	movs	r0, r6
    d302:	f000 f8bf 	bl	d484 <_printf_float>
    d306:	9003      	str	r0, [sp, #12]
    d308:	9b03      	ldr	r3, [sp, #12]
    d30a:	3301      	adds	r3, #1
    d30c:	d1cc      	bne.n	d2a8 <_vfiprintf_r+0x194>
    d30e:	89bb      	ldrh	r3, [r7, #12]
    d310:	065b      	lsls	r3, r3, #25
    d312:	d500      	bpl.n	d316 <_vfiprintf_r+0x202>
    d314:	e77b      	b.n	d20e <_vfiprintf_r+0xfa>
    d316:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d318:	e77b      	b.n	d212 <_vfiprintf_r+0xfe>
    d31a:	ab05      	add	r3, sp, #20
    d31c:	9300      	str	r3, [sp, #0]
    d31e:	003a      	movs	r2, r7
    d320:	4b09      	ldr	r3, [pc, #36]	; (d348 <_vfiprintf_r+0x234>)
    d322:	0029      	movs	r1, r5
    d324:	0030      	movs	r0, r6
    d326:	f000 fb67 	bl	d9f8 <_printf_i>
    d32a:	e7ec      	b.n	d306 <_vfiprintf_r+0x1f2>
    d32c:	00012b28 	.word	0x00012b28
    d330:	00012978 	.word	0x00012978
    d334:	00012b48 	.word	0x00012b48
    d338:	00012b08 	.word	0x00012b08
    d33c:	0001297e 	.word	0x0001297e
    d340:	00012982 	.word	0x00012982
    d344:	0000d485 	.word	0x0000d485
    d348:	0000d0ef 	.word	0x0000d0ef

0000d34c <__cvt>:
    d34c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d34e:	b08b      	sub	sp, #44	; 0x2c
    d350:	0014      	movs	r4, r2
    d352:	1e1d      	subs	r5, r3, #0
    d354:	9912      	ldr	r1, [sp, #72]	; 0x48
    d356:	da53      	bge.n	d400 <__cvt+0xb4>
    d358:	2480      	movs	r4, #128	; 0x80
    d35a:	0624      	lsls	r4, r4, #24
    d35c:	191b      	adds	r3, r3, r4
    d35e:	001d      	movs	r5, r3
    d360:	0014      	movs	r4, r2
    d362:	232d      	movs	r3, #45	; 0x2d
    d364:	700b      	strb	r3, [r1, #0]
    d366:	2320      	movs	r3, #32
    d368:	9e14      	ldr	r6, [sp, #80]	; 0x50
    d36a:	2203      	movs	r2, #3
    d36c:	439e      	bics	r6, r3
    d36e:	2e46      	cmp	r6, #70	; 0x46
    d370:	d007      	beq.n	d382 <__cvt+0x36>
    d372:	0033      	movs	r3, r6
    d374:	3b45      	subs	r3, #69	; 0x45
    d376:	4259      	negs	r1, r3
    d378:	414b      	adcs	r3, r1
    d37a:	9910      	ldr	r1, [sp, #64]	; 0x40
    d37c:	3a01      	subs	r2, #1
    d37e:	18cb      	adds	r3, r1, r3
    d380:	9310      	str	r3, [sp, #64]	; 0x40
    d382:	ab09      	add	r3, sp, #36	; 0x24
    d384:	9304      	str	r3, [sp, #16]
    d386:	ab08      	add	r3, sp, #32
    d388:	9303      	str	r3, [sp, #12]
    d38a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d38c:	9200      	str	r2, [sp, #0]
    d38e:	9302      	str	r3, [sp, #8]
    d390:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d392:	0022      	movs	r2, r4
    d394:	9301      	str	r3, [sp, #4]
    d396:	002b      	movs	r3, r5
    d398:	f001 f970 	bl	e67c <_dtoa_r>
    d39c:	0007      	movs	r7, r0
    d39e:	2e47      	cmp	r6, #71	; 0x47
    d3a0:	d102      	bne.n	d3a8 <__cvt+0x5c>
    d3a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d3a4:	07db      	lsls	r3, r3, #31
    d3a6:	d524      	bpl.n	d3f2 <__cvt+0xa6>
    d3a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3aa:	18fb      	adds	r3, r7, r3
    d3ac:	9307      	str	r3, [sp, #28]
    d3ae:	2e46      	cmp	r6, #70	; 0x46
    d3b0:	d114      	bne.n	d3dc <__cvt+0x90>
    d3b2:	783b      	ldrb	r3, [r7, #0]
    d3b4:	2b30      	cmp	r3, #48	; 0x30
    d3b6:	d10c      	bne.n	d3d2 <__cvt+0x86>
    d3b8:	2200      	movs	r2, #0
    d3ba:	2300      	movs	r3, #0
    d3bc:	0020      	movs	r0, r4
    d3be:	0029      	movs	r1, r5
    d3c0:	f7fc fb96 	bl	9af0 <__aeabi_dcmpeq>
    d3c4:	2800      	cmp	r0, #0
    d3c6:	d104      	bne.n	d3d2 <__cvt+0x86>
    d3c8:	2301      	movs	r3, #1
    d3ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d3cc:	1a9b      	subs	r3, r3, r2
    d3ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d3d0:	6013      	str	r3, [r2, #0]
    d3d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d3d4:	9a07      	ldr	r2, [sp, #28]
    d3d6:	681b      	ldr	r3, [r3, #0]
    d3d8:	18d3      	adds	r3, r2, r3
    d3da:	9307      	str	r3, [sp, #28]
    d3dc:	2200      	movs	r2, #0
    d3de:	2300      	movs	r3, #0
    d3e0:	0020      	movs	r0, r4
    d3e2:	0029      	movs	r1, r5
    d3e4:	f7fc fb84 	bl	9af0 <__aeabi_dcmpeq>
    d3e8:	2230      	movs	r2, #48	; 0x30
    d3ea:	2800      	cmp	r0, #0
    d3ec:	d00d      	beq.n	d40a <__cvt+0xbe>
    d3ee:	9b07      	ldr	r3, [sp, #28]
    d3f0:	9309      	str	r3, [sp, #36]	; 0x24
    d3f2:	0038      	movs	r0, r7
    d3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d3f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d3f8:	1bdb      	subs	r3, r3, r7
    d3fa:	6013      	str	r3, [r2, #0]
    d3fc:	b00b      	add	sp, #44	; 0x2c
    d3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d400:	2300      	movs	r3, #0
    d402:	e7af      	b.n	d364 <__cvt+0x18>
    d404:	1c59      	adds	r1, r3, #1
    d406:	9109      	str	r1, [sp, #36]	; 0x24
    d408:	701a      	strb	r2, [r3, #0]
    d40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d40c:	9907      	ldr	r1, [sp, #28]
    d40e:	4299      	cmp	r1, r3
    d410:	d8f8      	bhi.n	d404 <__cvt+0xb8>
    d412:	e7ee      	b.n	d3f2 <__cvt+0xa6>

0000d414 <__exponent>:
    d414:	b5f0      	push	{r4, r5, r6, r7, lr}
    d416:	232b      	movs	r3, #43	; 0x2b
    d418:	b085      	sub	sp, #20
    d41a:	0007      	movs	r7, r0
    d41c:	000c      	movs	r4, r1
    d41e:	7002      	strb	r2, [r0, #0]
    d420:	1c86      	adds	r6, r0, #2
    d422:	2900      	cmp	r1, #0
    d424:	da01      	bge.n	d42a <__exponent+0x16>
    d426:	232d      	movs	r3, #45	; 0x2d
    d428:	424c      	negs	r4, r1
    d42a:	707b      	strb	r3, [r7, #1]
    d42c:	2c09      	cmp	r4, #9
    d42e:	dd23      	ble.n	d478 <__exponent+0x64>
    d430:	ab02      	add	r3, sp, #8
    d432:	1ddd      	adds	r5, r3, #7
    d434:	1e6b      	subs	r3, r5, #1
    d436:	0020      	movs	r0, r4
    d438:	210a      	movs	r1, #10
    d43a:	9301      	str	r3, [sp, #4]
    d43c:	f7fc fb42 	bl	9ac4 <__aeabi_idivmod>
    d440:	1e6b      	subs	r3, r5, #1
    d442:	3130      	adds	r1, #48	; 0x30
    d444:	7019      	strb	r1, [r3, #0]
    d446:	0020      	movs	r0, r4
    d448:	210a      	movs	r1, #10
    d44a:	f7fc fa55 	bl	98f8 <__divsi3>
    d44e:	0004      	movs	r4, r0
    d450:	2809      	cmp	r0, #9
    d452:	dc0a      	bgt.n	d46a <__exponent+0x56>
    d454:	3d02      	subs	r5, #2
    d456:	3430      	adds	r4, #48	; 0x30
    d458:	702c      	strb	r4, [r5, #0]
    d45a:	ab02      	add	r3, sp, #8
    d45c:	3307      	adds	r3, #7
    d45e:	0030      	movs	r0, r6
    d460:	42ab      	cmp	r3, r5
    d462:	d804      	bhi.n	d46e <__exponent+0x5a>
    d464:	1bc0      	subs	r0, r0, r7
    d466:	b005      	add	sp, #20
    d468:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d46a:	9d01      	ldr	r5, [sp, #4]
    d46c:	e7e2      	b.n	d434 <__exponent+0x20>
    d46e:	782b      	ldrb	r3, [r5, #0]
    d470:	3501      	adds	r5, #1
    d472:	7033      	strb	r3, [r6, #0]
    d474:	3601      	adds	r6, #1
    d476:	e7f0      	b.n	d45a <__exponent+0x46>
    d478:	2330      	movs	r3, #48	; 0x30
    d47a:	18e4      	adds	r4, r4, r3
    d47c:	7033      	strb	r3, [r6, #0]
    d47e:	1cb0      	adds	r0, r6, #2
    d480:	7074      	strb	r4, [r6, #1]
    d482:	e7ef      	b.n	d464 <__exponent+0x50>

0000d484 <_printf_float>:
    d484:	b5f0      	push	{r4, r5, r6, r7, lr}
    d486:	b095      	sub	sp, #84	; 0x54
    d488:	000c      	movs	r4, r1
    d48a:	920a      	str	r2, [sp, #40]	; 0x28
    d48c:	930b      	str	r3, [sp, #44]	; 0x2c
    d48e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    d490:	9009      	str	r0, [sp, #36]	; 0x24
    d492:	f002 f8af 	bl	f5f4 <_localeconv_r>
    d496:	6803      	ldr	r3, [r0, #0]
    d498:	0018      	movs	r0, r3
    d49a:	930d      	str	r3, [sp, #52]	; 0x34
    d49c:	f000 fc23 	bl	dce6 <strlen>
    d4a0:	2300      	movs	r3, #0
    d4a2:	9312      	str	r3, [sp, #72]	; 0x48
    d4a4:	6823      	ldr	r3, [r4, #0]
    d4a6:	900e      	str	r0, [sp, #56]	; 0x38
    d4a8:	930c      	str	r3, [sp, #48]	; 0x30
    d4aa:	990c      	ldr	r1, [sp, #48]	; 0x30
    d4ac:	7e27      	ldrb	r7, [r4, #24]
    d4ae:	682b      	ldr	r3, [r5, #0]
    d4b0:	2207      	movs	r2, #7
    d4b2:	05c9      	lsls	r1, r1, #23
    d4b4:	d547      	bpl.n	d546 <_printf_float+0xc2>
    d4b6:	189b      	adds	r3, r3, r2
    d4b8:	4393      	bics	r3, r2
    d4ba:	001a      	movs	r2, r3
    d4bc:	3208      	adds	r2, #8
    d4be:	602a      	str	r2, [r5, #0]
    d4c0:	681a      	ldr	r2, [r3, #0]
    d4c2:	685b      	ldr	r3, [r3, #4]
    d4c4:	64a2      	str	r2, [r4, #72]	; 0x48
    d4c6:	64e3      	str	r3, [r4, #76]	; 0x4c
    d4c8:	2201      	movs	r2, #1
    d4ca:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    d4cc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    d4ce:	006b      	lsls	r3, r5, #1
    d4d0:	085b      	lsrs	r3, r3, #1
    d4d2:	930f      	str	r3, [sp, #60]	; 0x3c
    d4d4:	4252      	negs	r2, r2
    d4d6:	4ba7      	ldr	r3, [pc, #668]	; (d774 <_printf_float+0x2f0>)
    d4d8:	0030      	movs	r0, r6
    d4da:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d4dc:	f7fe ff8c 	bl	c3f8 <__aeabi_dcmpun>
    d4e0:	2800      	cmp	r0, #0
    d4e2:	d000      	beq.n	d4e6 <_printf_float+0x62>
    d4e4:	e206      	b.n	d8f4 <_printf_float+0x470>
    d4e6:	2201      	movs	r2, #1
    d4e8:	4ba2      	ldr	r3, [pc, #648]	; (d774 <_printf_float+0x2f0>)
    d4ea:	4252      	negs	r2, r2
    d4ec:	0030      	movs	r0, r6
    d4ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d4f0:	f7fc fb0e 	bl	9b10 <__aeabi_dcmple>
    d4f4:	2800      	cmp	r0, #0
    d4f6:	d000      	beq.n	d4fa <_printf_float+0x76>
    d4f8:	e1fc      	b.n	d8f4 <_printf_float+0x470>
    d4fa:	2200      	movs	r2, #0
    d4fc:	2300      	movs	r3, #0
    d4fe:	0030      	movs	r0, r6
    d500:	0029      	movs	r1, r5
    d502:	f7fc fafb 	bl	9afc <__aeabi_dcmplt>
    d506:	2800      	cmp	r0, #0
    d508:	d003      	beq.n	d512 <_printf_float+0x8e>
    d50a:	0023      	movs	r3, r4
    d50c:	222d      	movs	r2, #45	; 0x2d
    d50e:	3343      	adds	r3, #67	; 0x43
    d510:	701a      	strb	r2, [r3, #0]
    d512:	4d99      	ldr	r5, [pc, #612]	; (d778 <_printf_float+0x2f4>)
    d514:	2f47      	cmp	r7, #71	; 0x47
    d516:	d800      	bhi.n	d51a <_printf_float+0x96>
    d518:	4d98      	ldr	r5, [pc, #608]	; (d77c <_printf_float+0x2f8>)
    d51a:	2303      	movs	r3, #3
    d51c:	2600      	movs	r6, #0
    d51e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d520:	6123      	str	r3, [r4, #16]
    d522:	3301      	adds	r3, #1
    d524:	439a      	bics	r2, r3
    d526:	6022      	str	r2, [r4, #0]
    d528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d52a:	aa13      	add	r2, sp, #76	; 0x4c
    d52c:	9300      	str	r3, [sp, #0]
    d52e:	0021      	movs	r1, r4
    d530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d532:	9809      	ldr	r0, [sp, #36]	; 0x24
    d534:	f000 f9f2 	bl	d91c <_printf_common>
    d538:	1c43      	adds	r3, r0, #1
    d53a:	d000      	beq.n	d53e <_printf_float+0xba>
    d53c:	e09c      	b.n	d678 <_printf_float+0x1f4>
    d53e:	2001      	movs	r0, #1
    d540:	4240      	negs	r0, r0
    d542:	b015      	add	sp, #84	; 0x54
    d544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d546:	3307      	adds	r3, #7
    d548:	e7b6      	b.n	d4b8 <_printf_float+0x34>
    d54a:	2380      	movs	r3, #128	; 0x80
    d54c:	6862      	ldr	r2, [r4, #4]
    d54e:	00db      	lsls	r3, r3, #3
    d550:	1c51      	adds	r1, r2, #1
    d552:	d145      	bne.n	d5e0 <_printf_float+0x15c>
    d554:	3207      	adds	r2, #7
    d556:	6062      	str	r2, [r4, #4]
    d558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d55a:	2100      	movs	r1, #0
    d55c:	4313      	orrs	r3, r2
    d55e:	aa12      	add	r2, sp, #72	; 0x48
    d560:	9205      	str	r2, [sp, #20]
    d562:	aa11      	add	r2, sp, #68	; 0x44
    d564:	9203      	str	r2, [sp, #12]
    d566:	2223      	movs	r2, #35	; 0x23
    d568:	6023      	str	r3, [r4, #0]
    d56a:	9106      	str	r1, [sp, #24]
    d56c:	9301      	str	r3, [sp, #4]
    d56e:	a908      	add	r1, sp, #32
    d570:	6863      	ldr	r3, [r4, #4]
    d572:	1852      	adds	r2, r2, r1
    d574:	9202      	str	r2, [sp, #8]
    d576:	9300      	str	r3, [sp, #0]
    d578:	0032      	movs	r2, r6
    d57a:	002b      	movs	r3, r5
    d57c:	9704      	str	r7, [sp, #16]
    d57e:	9809      	ldr	r0, [sp, #36]	; 0x24
    d580:	f7ff fee4 	bl	d34c <__cvt>
    d584:	2320      	movs	r3, #32
    d586:	003a      	movs	r2, r7
    d588:	0005      	movs	r5, r0
    d58a:	439a      	bics	r2, r3
    d58c:	2a47      	cmp	r2, #71	; 0x47
    d58e:	d107      	bne.n	d5a0 <_printf_float+0x11c>
    d590:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d592:	1cda      	adds	r2, r3, #3
    d594:	db02      	blt.n	d59c <_printf_float+0x118>
    d596:	6862      	ldr	r2, [r4, #4]
    d598:	4293      	cmp	r3, r2
    d59a:	dd5b      	ble.n	d654 <_printf_float+0x1d0>
    d59c:	3f02      	subs	r7, #2
    d59e:	b2ff      	uxtb	r7, r7
    d5a0:	9911      	ldr	r1, [sp, #68]	; 0x44
    d5a2:	2f65      	cmp	r7, #101	; 0x65
    d5a4:	d83b      	bhi.n	d61e <_printf_float+0x19a>
    d5a6:	0020      	movs	r0, r4
    d5a8:	3901      	subs	r1, #1
    d5aa:	003a      	movs	r2, r7
    d5ac:	3050      	adds	r0, #80	; 0x50
    d5ae:	9111      	str	r1, [sp, #68]	; 0x44
    d5b0:	f7ff ff30 	bl	d414 <__exponent>
    d5b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d5b6:	0006      	movs	r6, r0
    d5b8:	1883      	adds	r3, r0, r2
    d5ba:	6123      	str	r3, [r4, #16]
    d5bc:	2a01      	cmp	r2, #1
    d5be:	dc02      	bgt.n	d5c6 <_printf_float+0x142>
    d5c0:	6822      	ldr	r2, [r4, #0]
    d5c2:	07d2      	lsls	r2, r2, #31
    d5c4:	d501      	bpl.n	d5ca <_printf_float+0x146>
    d5c6:	3301      	adds	r3, #1
    d5c8:	6123      	str	r3, [r4, #16]
    d5ca:	2323      	movs	r3, #35	; 0x23
    d5cc:	aa08      	add	r2, sp, #32
    d5ce:	189b      	adds	r3, r3, r2
    d5d0:	781b      	ldrb	r3, [r3, #0]
    d5d2:	2b00      	cmp	r3, #0
    d5d4:	d0a8      	beq.n	d528 <_printf_float+0xa4>
    d5d6:	0023      	movs	r3, r4
    d5d8:	222d      	movs	r2, #45	; 0x2d
    d5da:	3343      	adds	r3, #67	; 0x43
    d5dc:	701a      	strb	r2, [r3, #0]
    d5de:	e7a3      	b.n	d528 <_printf_float+0xa4>
    d5e0:	2f67      	cmp	r7, #103	; 0x67
    d5e2:	d001      	beq.n	d5e8 <_printf_float+0x164>
    d5e4:	2f47      	cmp	r7, #71	; 0x47
    d5e6:	d1b7      	bne.n	d558 <_printf_float+0xd4>
    d5e8:	2a00      	cmp	r2, #0
    d5ea:	d016      	beq.n	d61a <_printf_float+0x196>
    d5ec:	990c      	ldr	r1, [sp, #48]	; 0x30
    d5ee:	a808      	add	r0, sp, #32
    d5f0:	430b      	orrs	r3, r1
    d5f2:	2100      	movs	r1, #0
    d5f4:	9106      	str	r1, [sp, #24]
    d5f6:	a912      	add	r1, sp, #72	; 0x48
    d5f8:	9105      	str	r1, [sp, #20]
    d5fa:	a911      	add	r1, sp, #68	; 0x44
    d5fc:	9103      	str	r1, [sp, #12]
    d5fe:	2123      	movs	r1, #35	; 0x23
    d600:	1809      	adds	r1, r1, r0
    d602:	6023      	str	r3, [r4, #0]
    d604:	9301      	str	r3, [sp, #4]
    d606:	9200      	str	r2, [sp, #0]
    d608:	002b      	movs	r3, r5
    d60a:	9704      	str	r7, [sp, #16]
    d60c:	9102      	str	r1, [sp, #8]
    d60e:	0032      	movs	r2, r6
    d610:	9809      	ldr	r0, [sp, #36]	; 0x24
    d612:	f7ff fe9b 	bl	d34c <__cvt>
    d616:	0005      	movs	r5, r0
    d618:	e7ba      	b.n	d590 <_printf_float+0x10c>
    d61a:	2201      	movs	r2, #1
    d61c:	e79b      	b.n	d556 <_printf_float+0xd2>
    d61e:	2f66      	cmp	r7, #102	; 0x66
    d620:	d119      	bne.n	d656 <_printf_float+0x1d2>
    d622:	6863      	ldr	r3, [r4, #4]
    d624:	2900      	cmp	r1, #0
    d626:	dd0c      	ble.n	d642 <_printf_float+0x1be>
    d628:	6121      	str	r1, [r4, #16]
    d62a:	2b00      	cmp	r3, #0
    d62c:	d102      	bne.n	d634 <_printf_float+0x1b0>
    d62e:	6822      	ldr	r2, [r4, #0]
    d630:	07d2      	lsls	r2, r2, #31
    d632:	d502      	bpl.n	d63a <_printf_float+0x1b6>
    d634:	3301      	adds	r3, #1
    d636:	185b      	adds	r3, r3, r1
    d638:	6123      	str	r3, [r4, #16]
    d63a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d63c:	2600      	movs	r6, #0
    d63e:	65a3      	str	r3, [r4, #88]	; 0x58
    d640:	e7c3      	b.n	d5ca <_printf_float+0x146>
    d642:	2b00      	cmp	r3, #0
    d644:	d103      	bne.n	d64e <_printf_float+0x1ca>
    d646:	2201      	movs	r2, #1
    d648:	6821      	ldr	r1, [r4, #0]
    d64a:	4211      	tst	r1, r2
    d64c:	d000      	beq.n	d650 <_printf_float+0x1cc>
    d64e:	1c9a      	adds	r2, r3, #2
    d650:	6122      	str	r2, [r4, #16]
    d652:	e7f2      	b.n	d63a <_printf_float+0x1b6>
    d654:	2767      	movs	r7, #103	; 0x67
    d656:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d658:	9812      	ldr	r0, [sp, #72]	; 0x48
    d65a:	4283      	cmp	r3, r0
    d65c:	db05      	blt.n	d66a <_printf_float+0x1e6>
    d65e:	6822      	ldr	r2, [r4, #0]
    d660:	6123      	str	r3, [r4, #16]
    d662:	07d2      	lsls	r2, r2, #31
    d664:	d5e9      	bpl.n	d63a <_printf_float+0x1b6>
    d666:	3301      	adds	r3, #1
    d668:	e7e6      	b.n	d638 <_printf_float+0x1b4>
    d66a:	2201      	movs	r2, #1
    d66c:	2b00      	cmp	r3, #0
    d66e:	dc01      	bgt.n	d674 <_printf_float+0x1f0>
    d670:	1892      	adds	r2, r2, r2
    d672:	1ad2      	subs	r2, r2, r3
    d674:	1812      	adds	r2, r2, r0
    d676:	e7eb      	b.n	d650 <_printf_float+0x1cc>
    d678:	6822      	ldr	r2, [r4, #0]
    d67a:	0553      	lsls	r3, r2, #21
    d67c:	d408      	bmi.n	d690 <_printf_float+0x20c>
    d67e:	6923      	ldr	r3, [r4, #16]
    d680:	002a      	movs	r2, r5
    d682:	990a      	ldr	r1, [sp, #40]	; 0x28
    d684:	9809      	ldr	r0, [sp, #36]	; 0x24
    d686:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d688:	47a8      	blx	r5
    d68a:	1c43      	adds	r3, r0, #1
    d68c:	d129      	bne.n	d6e2 <_printf_float+0x25e>
    d68e:	e756      	b.n	d53e <_printf_float+0xba>
    d690:	2f65      	cmp	r7, #101	; 0x65
    d692:	d800      	bhi.n	d696 <_printf_float+0x212>
    d694:	e0dc      	b.n	d850 <_printf_float+0x3cc>
    d696:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    d698:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    d69a:	2200      	movs	r2, #0
    d69c:	2300      	movs	r3, #0
    d69e:	f7fc fa27 	bl	9af0 <__aeabi_dcmpeq>
    d6a2:	2800      	cmp	r0, #0
    d6a4:	d035      	beq.n	d712 <_printf_float+0x28e>
    d6a6:	2301      	movs	r3, #1
    d6a8:	4a35      	ldr	r2, [pc, #212]	; (d780 <_printf_float+0x2fc>)
    d6aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    d6ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    d6ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d6b0:	47a8      	blx	r5
    d6b2:	1c43      	adds	r3, r0, #1
    d6b4:	d100      	bne.n	d6b8 <_printf_float+0x234>
    d6b6:	e742      	b.n	d53e <_printf_float+0xba>
    d6b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d6ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d6bc:	4293      	cmp	r3, r2
    d6be:	db02      	blt.n	d6c6 <_printf_float+0x242>
    d6c0:	6823      	ldr	r3, [r4, #0]
    d6c2:	07db      	lsls	r3, r3, #31
    d6c4:	d50d      	bpl.n	d6e2 <_printf_float+0x25e>
    d6c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d6c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d6ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d6cc:	990a      	ldr	r1, [sp, #40]	; 0x28
    d6ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    d6d0:	47a8      	blx	r5
    d6d2:	2500      	movs	r5, #0
    d6d4:	1c43      	adds	r3, r0, #1
    d6d6:	d100      	bne.n	d6da <_printf_float+0x256>
    d6d8:	e731      	b.n	d53e <_printf_float+0xba>
    d6da:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d6dc:	3b01      	subs	r3, #1
    d6de:	429d      	cmp	r5, r3
    d6e0:	db0b      	blt.n	d6fa <_printf_float+0x276>
    d6e2:	6823      	ldr	r3, [r4, #0]
    d6e4:	2500      	movs	r5, #0
    d6e6:	079b      	lsls	r3, r3, #30
    d6e8:	d500      	bpl.n	d6ec <_printf_float+0x268>
    d6ea:	e0fd      	b.n	d8e8 <_printf_float+0x464>
    d6ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d6ee:	68e0      	ldr	r0, [r4, #12]
    d6f0:	4298      	cmp	r0, r3
    d6f2:	db00      	blt.n	d6f6 <_printf_float+0x272>
    d6f4:	e725      	b.n	d542 <_printf_float+0xbe>
    d6f6:	0018      	movs	r0, r3
    d6f8:	e723      	b.n	d542 <_printf_float+0xbe>
    d6fa:	0022      	movs	r2, r4
    d6fc:	2301      	movs	r3, #1
    d6fe:	321a      	adds	r2, #26
    d700:	990a      	ldr	r1, [sp, #40]	; 0x28
    d702:	9809      	ldr	r0, [sp, #36]	; 0x24
    d704:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d706:	47b0      	blx	r6
    d708:	1c43      	adds	r3, r0, #1
    d70a:	d100      	bne.n	d70e <_printf_float+0x28a>
    d70c:	e717      	b.n	d53e <_printf_float+0xba>
    d70e:	3501      	adds	r5, #1
    d710:	e7e3      	b.n	d6da <_printf_float+0x256>
    d712:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d714:	2b00      	cmp	r3, #0
    d716:	dc35      	bgt.n	d784 <_printf_float+0x300>
    d718:	2301      	movs	r3, #1
    d71a:	4a19      	ldr	r2, [pc, #100]	; (d780 <_printf_float+0x2fc>)
    d71c:	990a      	ldr	r1, [sp, #40]	; 0x28
    d71e:	9809      	ldr	r0, [sp, #36]	; 0x24
    d720:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d722:	47b0      	blx	r6
    d724:	1c43      	adds	r3, r0, #1
    d726:	d100      	bne.n	d72a <_printf_float+0x2a6>
    d728:	e709      	b.n	d53e <_printf_float+0xba>
    d72a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d72c:	2b00      	cmp	r3, #0
    d72e:	d105      	bne.n	d73c <_printf_float+0x2b8>
    d730:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d732:	2b00      	cmp	r3, #0
    d734:	d102      	bne.n	d73c <_printf_float+0x2b8>
    d736:	6823      	ldr	r3, [r4, #0]
    d738:	07db      	lsls	r3, r3, #31
    d73a:	d5d2      	bpl.n	d6e2 <_printf_float+0x25e>
    d73c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d742:	990a      	ldr	r1, [sp, #40]	; 0x28
    d744:	9809      	ldr	r0, [sp, #36]	; 0x24
    d746:	47b0      	blx	r6
    d748:	2600      	movs	r6, #0
    d74a:	1c43      	adds	r3, r0, #1
    d74c:	d100      	bne.n	d750 <_printf_float+0x2cc>
    d74e:	e6f6      	b.n	d53e <_printf_float+0xba>
    d750:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d752:	425b      	negs	r3, r3
    d754:	429e      	cmp	r6, r3
    d756:	db01      	blt.n	d75c <_printf_float+0x2d8>
    d758:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d75a:	e791      	b.n	d680 <_printf_float+0x1fc>
    d75c:	0022      	movs	r2, r4
    d75e:	2301      	movs	r3, #1
    d760:	321a      	adds	r2, #26
    d762:	990a      	ldr	r1, [sp, #40]	; 0x28
    d764:	9809      	ldr	r0, [sp, #36]	; 0x24
    d766:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d768:	47b8      	blx	r7
    d76a:	1c43      	adds	r3, r0, #1
    d76c:	d100      	bne.n	d770 <_printf_float+0x2ec>
    d76e:	e6e6      	b.n	d53e <_printf_float+0xba>
    d770:	3601      	adds	r6, #1
    d772:	e7ed      	b.n	d750 <_printf_float+0x2cc>
    d774:	7fefffff 	.word	0x7fefffff
    d778:	0001298d 	.word	0x0001298d
    d77c:	00012989 	.word	0x00012989
    d780:	00010e54 	.word	0x00010e54
    d784:	6da3      	ldr	r3, [r4, #88]	; 0x58
    d786:	9e12      	ldr	r6, [sp, #72]	; 0x48
    d788:	429e      	cmp	r6, r3
    d78a:	dd00      	ble.n	d78e <_printf_float+0x30a>
    d78c:	001e      	movs	r6, r3
    d78e:	2e00      	cmp	r6, #0
    d790:	dc35      	bgt.n	d7fe <_printf_float+0x37a>
    d792:	2300      	movs	r3, #0
    d794:	930c      	str	r3, [sp, #48]	; 0x30
    d796:	43f3      	mvns	r3, r6
    d798:	17db      	asrs	r3, r3, #31
    d79a:	930f      	str	r3, [sp, #60]	; 0x3c
    d79c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d79e:	6da7      	ldr	r7, [r4, #88]	; 0x58
    d7a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d7a2:	4033      	ands	r3, r6
    d7a4:	1afb      	subs	r3, r7, r3
    d7a6:	429a      	cmp	r2, r3
    d7a8:	db32      	blt.n	d810 <_printf_float+0x38c>
    d7aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d7ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d7ae:	4293      	cmp	r3, r2
    d7b0:	db3c      	blt.n	d82c <_printf_float+0x3a8>
    d7b2:	6823      	ldr	r3, [r4, #0]
    d7b4:	07db      	lsls	r3, r3, #31
    d7b6:	d439      	bmi.n	d82c <_printf_float+0x3a8>
    d7b8:	9e12      	ldr	r6, [sp, #72]	; 0x48
    d7ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d7bc:	1bf3      	subs	r3, r6, r7
    d7be:	1ab6      	subs	r6, r6, r2
    d7c0:	429e      	cmp	r6, r3
    d7c2:	dd00      	ble.n	d7c6 <_printf_float+0x342>
    d7c4:	001e      	movs	r6, r3
    d7c6:	2e00      	cmp	r6, #0
    d7c8:	dc39      	bgt.n	d83e <_printf_float+0x3ba>
    d7ca:	43f7      	mvns	r7, r6
    d7cc:	2500      	movs	r5, #0
    d7ce:	17fb      	asrs	r3, r7, #31
    d7d0:	930c      	str	r3, [sp, #48]	; 0x30
    d7d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d7d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d7d6:	990c      	ldr	r1, [sp, #48]	; 0x30
    d7d8:	1a9b      	subs	r3, r3, r2
    d7da:	0032      	movs	r2, r6
    d7dc:	400a      	ands	r2, r1
    d7de:	1a9b      	subs	r3, r3, r2
    d7e0:	429d      	cmp	r5, r3
    d7e2:	db00      	blt.n	d7e6 <_printf_float+0x362>
    d7e4:	e77d      	b.n	d6e2 <_printf_float+0x25e>
    d7e6:	0022      	movs	r2, r4
    d7e8:	2301      	movs	r3, #1
    d7ea:	321a      	adds	r2, #26
    d7ec:	990a      	ldr	r1, [sp, #40]	; 0x28
    d7ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    d7f0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d7f2:	47b8      	blx	r7
    d7f4:	1c43      	adds	r3, r0, #1
    d7f6:	d100      	bne.n	d7fa <_printf_float+0x376>
    d7f8:	e6a1      	b.n	d53e <_printf_float+0xba>
    d7fa:	3501      	adds	r5, #1
    d7fc:	e7e9      	b.n	d7d2 <_printf_float+0x34e>
    d7fe:	0033      	movs	r3, r6
    d800:	002a      	movs	r2, r5
    d802:	990a      	ldr	r1, [sp, #40]	; 0x28
    d804:	9809      	ldr	r0, [sp, #36]	; 0x24
    d806:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d808:	47b8      	blx	r7
    d80a:	1c43      	adds	r3, r0, #1
    d80c:	d1c1      	bne.n	d792 <_printf_float+0x30e>
    d80e:	e696      	b.n	d53e <_printf_float+0xba>
    d810:	0022      	movs	r2, r4
    d812:	2301      	movs	r3, #1
    d814:	321a      	adds	r2, #26
    d816:	990a      	ldr	r1, [sp, #40]	; 0x28
    d818:	9809      	ldr	r0, [sp, #36]	; 0x24
    d81a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d81c:	47b8      	blx	r7
    d81e:	1c43      	adds	r3, r0, #1
    d820:	d100      	bne.n	d824 <_printf_float+0x3a0>
    d822:	e68c      	b.n	d53e <_printf_float+0xba>
    d824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d826:	3301      	adds	r3, #1
    d828:	930c      	str	r3, [sp, #48]	; 0x30
    d82a:	e7b7      	b.n	d79c <_printf_float+0x318>
    d82c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d82e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d830:	990a      	ldr	r1, [sp, #40]	; 0x28
    d832:	9809      	ldr	r0, [sp, #36]	; 0x24
    d834:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d836:	47b0      	blx	r6
    d838:	1c43      	adds	r3, r0, #1
    d83a:	d1bd      	bne.n	d7b8 <_printf_float+0x334>
    d83c:	e67f      	b.n	d53e <_printf_float+0xba>
    d83e:	19ea      	adds	r2, r5, r7
    d840:	0033      	movs	r3, r6
    d842:	990a      	ldr	r1, [sp, #40]	; 0x28
    d844:	9809      	ldr	r0, [sp, #36]	; 0x24
    d846:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d848:	47a8      	blx	r5
    d84a:	1c43      	adds	r3, r0, #1
    d84c:	d1bd      	bne.n	d7ca <_printf_float+0x346>
    d84e:	e676      	b.n	d53e <_printf_float+0xba>
    d850:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d852:	2b01      	cmp	r3, #1
    d854:	dc02      	bgt.n	d85c <_printf_float+0x3d8>
    d856:	2301      	movs	r3, #1
    d858:	421a      	tst	r2, r3
    d85a:	d038      	beq.n	d8ce <_printf_float+0x44a>
    d85c:	2301      	movs	r3, #1
    d85e:	002a      	movs	r2, r5
    d860:	990a      	ldr	r1, [sp, #40]	; 0x28
    d862:	9809      	ldr	r0, [sp, #36]	; 0x24
    d864:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d866:	47b8      	blx	r7
    d868:	1c43      	adds	r3, r0, #1
    d86a:	d100      	bne.n	d86e <_printf_float+0x3ea>
    d86c:	e667      	b.n	d53e <_printf_float+0xba>
    d86e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d872:	990a      	ldr	r1, [sp, #40]	; 0x28
    d874:	9809      	ldr	r0, [sp, #36]	; 0x24
    d876:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d878:	47b8      	blx	r7
    d87a:	1c43      	adds	r3, r0, #1
    d87c:	d100      	bne.n	d880 <_printf_float+0x3fc>
    d87e:	e65e      	b.n	d53e <_printf_float+0xba>
    d880:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    d882:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    d884:	2200      	movs	r2, #0
    d886:	2300      	movs	r3, #0
    d888:	f7fc f932 	bl	9af0 <__aeabi_dcmpeq>
    d88c:	2800      	cmp	r0, #0
    d88e:	d008      	beq.n	d8a2 <_printf_float+0x41e>
    d890:	2500      	movs	r5, #0
    d892:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d894:	3b01      	subs	r3, #1
    d896:	429d      	cmp	r5, r3
    d898:	db0d      	blt.n	d8b6 <_printf_float+0x432>
    d89a:	0022      	movs	r2, r4
    d89c:	0033      	movs	r3, r6
    d89e:	3250      	adds	r2, #80	; 0x50
    d8a0:	e6ef      	b.n	d682 <_printf_float+0x1fe>
    d8a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d8a4:	1c6a      	adds	r2, r5, #1
    d8a6:	3b01      	subs	r3, #1
    d8a8:	990a      	ldr	r1, [sp, #40]	; 0x28
    d8aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d8ae:	47a8      	blx	r5
    d8b0:	1c43      	adds	r3, r0, #1
    d8b2:	d1f2      	bne.n	d89a <_printf_float+0x416>
    d8b4:	e643      	b.n	d53e <_printf_float+0xba>
    d8b6:	0022      	movs	r2, r4
    d8b8:	2301      	movs	r3, #1
    d8ba:	321a      	adds	r2, #26
    d8bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    d8be:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d8c2:	47b8      	blx	r7
    d8c4:	1c43      	adds	r3, r0, #1
    d8c6:	d100      	bne.n	d8ca <_printf_float+0x446>
    d8c8:	e639      	b.n	d53e <_printf_float+0xba>
    d8ca:	3501      	adds	r5, #1
    d8cc:	e7e1      	b.n	d892 <_printf_float+0x40e>
    d8ce:	002a      	movs	r2, r5
    d8d0:	e7ea      	b.n	d8a8 <_printf_float+0x424>
    d8d2:	0022      	movs	r2, r4
    d8d4:	2301      	movs	r3, #1
    d8d6:	3219      	adds	r2, #25
    d8d8:	990a      	ldr	r1, [sp, #40]	; 0x28
    d8da:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d8de:	47b0      	blx	r6
    d8e0:	1c43      	adds	r3, r0, #1
    d8e2:	d100      	bne.n	d8e6 <_printf_float+0x462>
    d8e4:	e62b      	b.n	d53e <_printf_float+0xba>
    d8e6:	3501      	adds	r5, #1
    d8e8:	68e3      	ldr	r3, [r4, #12]
    d8ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d8ec:	1a9b      	subs	r3, r3, r2
    d8ee:	429d      	cmp	r5, r3
    d8f0:	dbef      	blt.n	d8d2 <_printf_float+0x44e>
    d8f2:	e6fb      	b.n	d6ec <_printf_float+0x268>
    d8f4:	0032      	movs	r2, r6
    d8f6:	002b      	movs	r3, r5
    d8f8:	0030      	movs	r0, r6
    d8fa:	0029      	movs	r1, r5
    d8fc:	f7fe fd7c 	bl	c3f8 <__aeabi_dcmpun>
    d900:	2800      	cmp	r0, #0
    d902:	d100      	bne.n	d906 <_printf_float+0x482>
    d904:	e621      	b.n	d54a <_printf_float+0xc6>
    d906:	4d03      	ldr	r5, [pc, #12]	; (d914 <_printf_float+0x490>)
    d908:	2f47      	cmp	r7, #71	; 0x47
    d90a:	d900      	bls.n	d90e <_printf_float+0x48a>
    d90c:	e605      	b.n	d51a <_printf_float+0x96>
    d90e:	4d02      	ldr	r5, [pc, #8]	; (d918 <_printf_float+0x494>)
    d910:	e603      	b.n	d51a <_printf_float+0x96>
    d912:	46c0      	nop			; (mov r8, r8)
    d914:	00012995 	.word	0x00012995
    d918:	00012991 	.word	0x00012991

0000d91c <_printf_common>:
    d91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d91e:	0015      	movs	r5, r2
    d920:	9301      	str	r3, [sp, #4]
    d922:	688a      	ldr	r2, [r1, #8]
    d924:	690b      	ldr	r3, [r1, #16]
    d926:	9000      	str	r0, [sp, #0]
    d928:	000c      	movs	r4, r1
    d92a:	4293      	cmp	r3, r2
    d92c:	da00      	bge.n	d930 <_printf_common+0x14>
    d92e:	0013      	movs	r3, r2
    d930:	0022      	movs	r2, r4
    d932:	602b      	str	r3, [r5, #0]
    d934:	3243      	adds	r2, #67	; 0x43
    d936:	7812      	ldrb	r2, [r2, #0]
    d938:	2a00      	cmp	r2, #0
    d93a:	d001      	beq.n	d940 <_printf_common+0x24>
    d93c:	3301      	adds	r3, #1
    d93e:	602b      	str	r3, [r5, #0]
    d940:	6823      	ldr	r3, [r4, #0]
    d942:	069b      	lsls	r3, r3, #26
    d944:	d502      	bpl.n	d94c <_printf_common+0x30>
    d946:	682b      	ldr	r3, [r5, #0]
    d948:	3302      	adds	r3, #2
    d94a:	602b      	str	r3, [r5, #0]
    d94c:	2706      	movs	r7, #6
    d94e:	6823      	ldr	r3, [r4, #0]
    d950:	401f      	ands	r7, r3
    d952:	d027      	beq.n	d9a4 <_printf_common+0x88>
    d954:	0023      	movs	r3, r4
    d956:	3343      	adds	r3, #67	; 0x43
    d958:	781b      	ldrb	r3, [r3, #0]
    d95a:	1e5a      	subs	r2, r3, #1
    d95c:	4193      	sbcs	r3, r2
    d95e:	6822      	ldr	r2, [r4, #0]
    d960:	0692      	lsls	r2, r2, #26
    d962:	d430      	bmi.n	d9c6 <_printf_common+0xaa>
    d964:	0022      	movs	r2, r4
    d966:	9901      	ldr	r1, [sp, #4]
    d968:	3243      	adds	r2, #67	; 0x43
    d96a:	9800      	ldr	r0, [sp, #0]
    d96c:	9e08      	ldr	r6, [sp, #32]
    d96e:	47b0      	blx	r6
    d970:	1c43      	adds	r3, r0, #1
    d972:	d025      	beq.n	d9c0 <_printf_common+0xa4>
    d974:	2306      	movs	r3, #6
    d976:	6820      	ldr	r0, [r4, #0]
    d978:	682a      	ldr	r2, [r5, #0]
    d97a:	68e1      	ldr	r1, [r4, #12]
    d97c:	4003      	ands	r3, r0
    d97e:	2500      	movs	r5, #0
    d980:	2b04      	cmp	r3, #4
    d982:	d103      	bne.n	d98c <_printf_common+0x70>
    d984:	1a8d      	subs	r5, r1, r2
    d986:	43eb      	mvns	r3, r5
    d988:	17db      	asrs	r3, r3, #31
    d98a:	401d      	ands	r5, r3
    d98c:	68a3      	ldr	r3, [r4, #8]
    d98e:	6922      	ldr	r2, [r4, #16]
    d990:	4293      	cmp	r3, r2
    d992:	dd01      	ble.n	d998 <_printf_common+0x7c>
    d994:	1a9b      	subs	r3, r3, r2
    d996:	18ed      	adds	r5, r5, r3
    d998:	2700      	movs	r7, #0
    d99a:	42bd      	cmp	r5, r7
    d99c:	d120      	bne.n	d9e0 <_printf_common+0xc4>
    d99e:	2000      	movs	r0, #0
    d9a0:	e010      	b.n	d9c4 <_printf_common+0xa8>
    d9a2:	3701      	adds	r7, #1
    d9a4:	68e3      	ldr	r3, [r4, #12]
    d9a6:	682a      	ldr	r2, [r5, #0]
    d9a8:	1a9b      	subs	r3, r3, r2
    d9aa:	429f      	cmp	r7, r3
    d9ac:	dad2      	bge.n	d954 <_printf_common+0x38>
    d9ae:	0022      	movs	r2, r4
    d9b0:	2301      	movs	r3, #1
    d9b2:	3219      	adds	r2, #25
    d9b4:	9901      	ldr	r1, [sp, #4]
    d9b6:	9800      	ldr	r0, [sp, #0]
    d9b8:	9e08      	ldr	r6, [sp, #32]
    d9ba:	47b0      	blx	r6
    d9bc:	1c43      	adds	r3, r0, #1
    d9be:	d1f0      	bne.n	d9a2 <_printf_common+0x86>
    d9c0:	2001      	movs	r0, #1
    d9c2:	4240      	negs	r0, r0
    d9c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d9c6:	2030      	movs	r0, #48	; 0x30
    d9c8:	18e1      	adds	r1, r4, r3
    d9ca:	3143      	adds	r1, #67	; 0x43
    d9cc:	7008      	strb	r0, [r1, #0]
    d9ce:	0021      	movs	r1, r4
    d9d0:	1c5a      	adds	r2, r3, #1
    d9d2:	3145      	adds	r1, #69	; 0x45
    d9d4:	7809      	ldrb	r1, [r1, #0]
    d9d6:	18a2      	adds	r2, r4, r2
    d9d8:	3243      	adds	r2, #67	; 0x43
    d9da:	3302      	adds	r3, #2
    d9dc:	7011      	strb	r1, [r2, #0]
    d9de:	e7c1      	b.n	d964 <_printf_common+0x48>
    d9e0:	0022      	movs	r2, r4
    d9e2:	2301      	movs	r3, #1
    d9e4:	321a      	adds	r2, #26
    d9e6:	9901      	ldr	r1, [sp, #4]
    d9e8:	9800      	ldr	r0, [sp, #0]
    d9ea:	9e08      	ldr	r6, [sp, #32]
    d9ec:	47b0      	blx	r6
    d9ee:	1c43      	adds	r3, r0, #1
    d9f0:	d0e6      	beq.n	d9c0 <_printf_common+0xa4>
    d9f2:	3701      	adds	r7, #1
    d9f4:	e7d1      	b.n	d99a <_printf_common+0x7e>
	...

0000d9f8 <_printf_i>:
    d9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9fa:	b08b      	sub	sp, #44	; 0x2c
    d9fc:	9206      	str	r2, [sp, #24]
    d9fe:	000a      	movs	r2, r1
    da00:	3243      	adds	r2, #67	; 0x43
    da02:	9307      	str	r3, [sp, #28]
    da04:	9005      	str	r0, [sp, #20]
    da06:	9204      	str	r2, [sp, #16]
    da08:	7e0a      	ldrb	r2, [r1, #24]
    da0a:	000c      	movs	r4, r1
    da0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    da0e:	2a6e      	cmp	r2, #110	; 0x6e
    da10:	d100      	bne.n	da14 <_printf_i+0x1c>
    da12:	e08f      	b.n	db34 <_printf_i+0x13c>
    da14:	d817      	bhi.n	da46 <_printf_i+0x4e>
    da16:	2a63      	cmp	r2, #99	; 0x63
    da18:	d02c      	beq.n	da74 <_printf_i+0x7c>
    da1a:	d808      	bhi.n	da2e <_printf_i+0x36>
    da1c:	2a00      	cmp	r2, #0
    da1e:	d100      	bne.n	da22 <_printf_i+0x2a>
    da20:	e099      	b.n	db56 <_printf_i+0x15e>
    da22:	2a58      	cmp	r2, #88	; 0x58
    da24:	d054      	beq.n	dad0 <_printf_i+0xd8>
    da26:	0026      	movs	r6, r4
    da28:	3642      	adds	r6, #66	; 0x42
    da2a:	7032      	strb	r2, [r6, #0]
    da2c:	e029      	b.n	da82 <_printf_i+0x8a>
    da2e:	2a64      	cmp	r2, #100	; 0x64
    da30:	d001      	beq.n	da36 <_printf_i+0x3e>
    da32:	2a69      	cmp	r2, #105	; 0x69
    da34:	d1f7      	bne.n	da26 <_printf_i+0x2e>
    da36:	6821      	ldr	r1, [r4, #0]
    da38:	681a      	ldr	r2, [r3, #0]
    da3a:	0608      	lsls	r0, r1, #24
    da3c:	d523      	bpl.n	da86 <_printf_i+0x8e>
    da3e:	1d11      	adds	r1, r2, #4
    da40:	6019      	str	r1, [r3, #0]
    da42:	6815      	ldr	r5, [r2, #0]
    da44:	e025      	b.n	da92 <_printf_i+0x9a>
    da46:	2a73      	cmp	r2, #115	; 0x73
    da48:	d100      	bne.n	da4c <_printf_i+0x54>
    da4a:	e088      	b.n	db5e <_printf_i+0x166>
    da4c:	d808      	bhi.n	da60 <_printf_i+0x68>
    da4e:	2a6f      	cmp	r2, #111	; 0x6f
    da50:	d029      	beq.n	daa6 <_printf_i+0xae>
    da52:	2a70      	cmp	r2, #112	; 0x70
    da54:	d1e7      	bne.n	da26 <_printf_i+0x2e>
    da56:	2220      	movs	r2, #32
    da58:	6809      	ldr	r1, [r1, #0]
    da5a:	430a      	orrs	r2, r1
    da5c:	6022      	str	r2, [r4, #0]
    da5e:	e003      	b.n	da68 <_printf_i+0x70>
    da60:	2a75      	cmp	r2, #117	; 0x75
    da62:	d020      	beq.n	daa6 <_printf_i+0xae>
    da64:	2a78      	cmp	r2, #120	; 0x78
    da66:	d1de      	bne.n	da26 <_printf_i+0x2e>
    da68:	0022      	movs	r2, r4
    da6a:	2178      	movs	r1, #120	; 0x78
    da6c:	3245      	adds	r2, #69	; 0x45
    da6e:	7011      	strb	r1, [r2, #0]
    da70:	4a6c      	ldr	r2, [pc, #432]	; (dc24 <_printf_i+0x22c>)
    da72:	e030      	b.n	dad6 <_printf_i+0xde>
    da74:	000e      	movs	r6, r1
    da76:	681a      	ldr	r2, [r3, #0]
    da78:	3642      	adds	r6, #66	; 0x42
    da7a:	1d11      	adds	r1, r2, #4
    da7c:	6019      	str	r1, [r3, #0]
    da7e:	6813      	ldr	r3, [r2, #0]
    da80:	7033      	strb	r3, [r6, #0]
    da82:	2301      	movs	r3, #1
    da84:	e079      	b.n	db7a <_printf_i+0x182>
    da86:	0649      	lsls	r1, r1, #25
    da88:	d5d9      	bpl.n	da3e <_printf_i+0x46>
    da8a:	1d11      	adds	r1, r2, #4
    da8c:	6019      	str	r1, [r3, #0]
    da8e:	2300      	movs	r3, #0
    da90:	5ed5      	ldrsh	r5, [r2, r3]
    da92:	2d00      	cmp	r5, #0
    da94:	da03      	bge.n	da9e <_printf_i+0xa6>
    da96:	232d      	movs	r3, #45	; 0x2d
    da98:	9a04      	ldr	r2, [sp, #16]
    da9a:	426d      	negs	r5, r5
    da9c:	7013      	strb	r3, [r2, #0]
    da9e:	4b62      	ldr	r3, [pc, #392]	; (dc28 <_printf_i+0x230>)
    daa0:	270a      	movs	r7, #10
    daa2:	9303      	str	r3, [sp, #12]
    daa4:	e02f      	b.n	db06 <_printf_i+0x10e>
    daa6:	6820      	ldr	r0, [r4, #0]
    daa8:	6819      	ldr	r1, [r3, #0]
    daaa:	0605      	lsls	r5, r0, #24
    daac:	d503      	bpl.n	dab6 <_printf_i+0xbe>
    daae:	1d08      	adds	r0, r1, #4
    dab0:	6018      	str	r0, [r3, #0]
    dab2:	680d      	ldr	r5, [r1, #0]
    dab4:	e005      	b.n	dac2 <_printf_i+0xca>
    dab6:	0640      	lsls	r0, r0, #25
    dab8:	d5f9      	bpl.n	daae <_printf_i+0xb6>
    daba:	680d      	ldr	r5, [r1, #0]
    dabc:	1d08      	adds	r0, r1, #4
    dabe:	6018      	str	r0, [r3, #0]
    dac0:	b2ad      	uxth	r5, r5
    dac2:	4b59      	ldr	r3, [pc, #356]	; (dc28 <_printf_i+0x230>)
    dac4:	2708      	movs	r7, #8
    dac6:	9303      	str	r3, [sp, #12]
    dac8:	2a6f      	cmp	r2, #111	; 0x6f
    daca:	d018      	beq.n	dafe <_printf_i+0x106>
    dacc:	270a      	movs	r7, #10
    dace:	e016      	b.n	dafe <_printf_i+0x106>
    dad0:	3145      	adds	r1, #69	; 0x45
    dad2:	700a      	strb	r2, [r1, #0]
    dad4:	4a54      	ldr	r2, [pc, #336]	; (dc28 <_printf_i+0x230>)
    dad6:	9203      	str	r2, [sp, #12]
    dad8:	681a      	ldr	r2, [r3, #0]
    dada:	6821      	ldr	r1, [r4, #0]
    dadc:	1d10      	adds	r0, r2, #4
    dade:	6018      	str	r0, [r3, #0]
    dae0:	6815      	ldr	r5, [r2, #0]
    dae2:	0608      	lsls	r0, r1, #24
    dae4:	d522      	bpl.n	db2c <_printf_i+0x134>
    dae6:	07cb      	lsls	r3, r1, #31
    dae8:	d502      	bpl.n	daf0 <_printf_i+0xf8>
    daea:	2320      	movs	r3, #32
    daec:	4319      	orrs	r1, r3
    daee:	6021      	str	r1, [r4, #0]
    daf0:	2710      	movs	r7, #16
    daf2:	2d00      	cmp	r5, #0
    daf4:	d103      	bne.n	dafe <_printf_i+0x106>
    daf6:	2320      	movs	r3, #32
    daf8:	6822      	ldr	r2, [r4, #0]
    dafa:	439a      	bics	r2, r3
    dafc:	6022      	str	r2, [r4, #0]
    dafe:	0023      	movs	r3, r4
    db00:	2200      	movs	r2, #0
    db02:	3343      	adds	r3, #67	; 0x43
    db04:	701a      	strb	r2, [r3, #0]
    db06:	6863      	ldr	r3, [r4, #4]
    db08:	60a3      	str	r3, [r4, #8]
    db0a:	2b00      	cmp	r3, #0
    db0c:	db5c      	blt.n	dbc8 <_printf_i+0x1d0>
    db0e:	2204      	movs	r2, #4
    db10:	6821      	ldr	r1, [r4, #0]
    db12:	4391      	bics	r1, r2
    db14:	6021      	str	r1, [r4, #0]
    db16:	2d00      	cmp	r5, #0
    db18:	d158      	bne.n	dbcc <_printf_i+0x1d4>
    db1a:	9e04      	ldr	r6, [sp, #16]
    db1c:	2b00      	cmp	r3, #0
    db1e:	d064      	beq.n	dbea <_printf_i+0x1f2>
    db20:	0026      	movs	r6, r4
    db22:	9b03      	ldr	r3, [sp, #12]
    db24:	3642      	adds	r6, #66	; 0x42
    db26:	781b      	ldrb	r3, [r3, #0]
    db28:	7033      	strb	r3, [r6, #0]
    db2a:	e05e      	b.n	dbea <_printf_i+0x1f2>
    db2c:	0648      	lsls	r0, r1, #25
    db2e:	d5da      	bpl.n	dae6 <_printf_i+0xee>
    db30:	b2ad      	uxth	r5, r5
    db32:	e7d8      	b.n	dae6 <_printf_i+0xee>
    db34:	6809      	ldr	r1, [r1, #0]
    db36:	681a      	ldr	r2, [r3, #0]
    db38:	0608      	lsls	r0, r1, #24
    db3a:	d505      	bpl.n	db48 <_printf_i+0x150>
    db3c:	1d11      	adds	r1, r2, #4
    db3e:	6019      	str	r1, [r3, #0]
    db40:	6813      	ldr	r3, [r2, #0]
    db42:	6962      	ldr	r2, [r4, #20]
    db44:	601a      	str	r2, [r3, #0]
    db46:	e006      	b.n	db56 <_printf_i+0x15e>
    db48:	0649      	lsls	r1, r1, #25
    db4a:	d5f7      	bpl.n	db3c <_printf_i+0x144>
    db4c:	1d11      	adds	r1, r2, #4
    db4e:	6019      	str	r1, [r3, #0]
    db50:	6813      	ldr	r3, [r2, #0]
    db52:	8aa2      	ldrh	r2, [r4, #20]
    db54:	801a      	strh	r2, [r3, #0]
    db56:	2300      	movs	r3, #0
    db58:	9e04      	ldr	r6, [sp, #16]
    db5a:	6123      	str	r3, [r4, #16]
    db5c:	e054      	b.n	dc08 <_printf_i+0x210>
    db5e:	681a      	ldr	r2, [r3, #0]
    db60:	1d11      	adds	r1, r2, #4
    db62:	6019      	str	r1, [r3, #0]
    db64:	6816      	ldr	r6, [r2, #0]
    db66:	2100      	movs	r1, #0
    db68:	6862      	ldr	r2, [r4, #4]
    db6a:	0030      	movs	r0, r6
    db6c:	f001 fdba 	bl	f6e4 <memchr>
    db70:	2800      	cmp	r0, #0
    db72:	d001      	beq.n	db78 <_printf_i+0x180>
    db74:	1b80      	subs	r0, r0, r6
    db76:	6060      	str	r0, [r4, #4]
    db78:	6863      	ldr	r3, [r4, #4]
    db7a:	6123      	str	r3, [r4, #16]
    db7c:	2300      	movs	r3, #0
    db7e:	9a04      	ldr	r2, [sp, #16]
    db80:	7013      	strb	r3, [r2, #0]
    db82:	e041      	b.n	dc08 <_printf_i+0x210>
    db84:	6923      	ldr	r3, [r4, #16]
    db86:	0032      	movs	r2, r6
    db88:	9906      	ldr	r1, [sp, #24]
    db8a:	9805      	ldr	r0, [sp, #20]
    db8c:	9d07      	ldr	r5, [sp, #28]
    db8e:	47a8      	blx	r5
    db90:	1c43      	adds	r3, r0, #1
    db92:	d043      	beq.n	dc1c <_printf_i+0x224>
    db94:	6823      	ldr	r3, [r4, #0]
    db96:	2500      	movs	r5, #0
    db98:	079b      	lsls	r3, r3, #30
    db9a:	d40f      	bmi.n	dbbc <_printf_i+0x1c4>
    db9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    db9e:	68e0      	ldr	r0, [r4, #12]
    dba0:	4298      	cmp	r0, r3
    dba2:	da3d      	bge.n	dc20 <_printf_i+0x228>
    dba4:	0018      	movs	r0, r3
    dba6:	e03b      	b.n	dc20 <_printf_i+0x228>
    dba8:	0022      	movs	r2, r4
    dbaa:	2301      	movs	r3, #1
    dbac:	3219      	adds	r2, #25
    dbae:	9906      	ldr	r1, [sp, #24]
    dbb0:	9805      	ldr	r0, [sp, #20]
    dbb2:	9e07      	ldr	r6, [sp, #28]
    dbb4:	47b0      	blx	r6
    dbb6:	1c43      	adds	r3, r0, #1
    dbb8:	d030      	beq.n	dc1c <_printf_i+0x224>
    dbba:	3501      	adds	r5, #1
    dbbc:	68e3      	ldr	r3, [r4, #12]
    dbbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dbc0:	1a9b      	subs	r3, r3, r2
    dbc2:	429d      	cmp	r5, r3
    dbc4:	dbf0      	blt.n	dba8 <_printf_i+0x1b0>
    dbc6:	e7e9      	b.n	db9c <_printf_i+0x1a4>
    dbc8:	2d00      	cmp	r5, #0
    dbca:	d0a9      	beq.n	db20 <_printf_i+0x128>
    dbcc:	9e04      	ldr	r6, [sp, #16]
    dbce:	0028      	movs	r0, r5
    dbd0:	0039      	movs	r1, r7
    dbd2:	f7fb fe8d 	bl	98f0 <__aeabi_uidivmod>
    dbd6:	9b03      	ldr	r3, [sp, #12]
    dbd8:	3e01      	subs	r6, #1
    dbda:	5c5b      	ldrb	r3, [r3, r1]
    dbdc:	0028      	movs	r0, r5
    dbde:	7033      	strb	r3, [r6, #0]
    dbe0:	0039      	movs	r1, r7
    dbe2:	f7fb fdff 	bl	97e4 <__udivsi3>
    dbe6:	1e05      	subs	r5, r0, #0
    dbe8:	d1f1      	bne.n	dbce <_printf_i+0x1d6>
    dbea:	2f08      	cmp	r7, #8
    dbec:	d109      	bne.n	dc02 <_printf_i+0x20a>
    dbee:	6823      	ldr	r3, [r4, #0]
    dbf0:	07db      	lsls	r3, r3, #31
    dbf2:	d506      	bpl.n	dc02 <_printf_i+0x20a>
    dbf4:	6863      	ldr	r3, [r4, #4]
    dbf6:	6922      	ldr	r2, [r4, #16]
    dbf8:	4293      	cmp	r3, r2
    dbfa:	dc02      	bgt.n	dc02 <_printf_i+0x20a>
    dbfc:	2330      	movs	r3, #48	; 0x30
    dbfe:	3e01      	subs	r6, #1
    dc00:	7033      	strb	r3, [r6, #0]
    dc02:	9b04      	ldr	r3, [sp, #16]
    dc04:	1b9b      	subs	r3, r3, r6
    dc06:	6123      	str	r3, [r4, #16]
    dc08:	9b07      	ldr	r3, [sp, #28]
    dc0a:	aa09      	add	r2, sp, #36	; 0x24
    dc0c:	9300      	str	r3, [sp, #0]
    dc0e:	0021      	movs	r1, r4
    dc10:	9b06      	ldr	r3, [sp, #24]
    dc12:	9805      	ldr	r0, [sp, #20]
    dc14:	f7ff fe82 	bl	d91c <_printf_common>
    dc18:	1c43      	adds	r3, r0, #1
    dc1a:	d1b3      	bne.n	db84 <_printf_i+0x18c>
    dc1c:	2001      	movs	r0, #1
    dc1e:	4240      	negs	r0, r0
    dc20:	b00b      	add	sp, #44	; 0x2c
    dc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc24:	000129aa 	.word	0x000129aa
    dc28:	00012999 	.word	0x00012999

0000dc2c <realloc>:
    dc2c:	b510      	push	{r4, lr}
    dc2e:	4b03      	ldr	r3, [pc, #12]	; (dc3c <realloc+0x10>)
    dc30:	000a      	movs	r2, r1
    dc32:	0001      	movs	r1, r0
    dc34:	6818      	ldr	r0, [r3, #0]
    dc36:	f002 f853 	bl	fce0 <_realloc_r>
    dc3a:	bd10      	pop	{r4, pc}
    dc3c:	200000b4 	.word	0x200000b4

0000dc40 <_sbrk_r>:
    dc40:	2300      	movs	r3, #0
    dc42:	b570      	push	{r4, r5, r6, lr}
    dc44:	4c06      	ldr	r4, [pc, #24]	; (dc60 <_sbrk_r+0x20>)
    dc46:	0005      	movs	r5, r0
    dc48:	0008      	movs	r0, r1
    dc4a:	6023      	str	r3, [r4, #0]
    dc4c:	f002 ffaa 	bl	10ba4 <_sbrk>
    dc50:	1c43      	adds	r3, r0, #1
    dc52:	d103      	bne.n	dc5c <_sbrk_r+0x1c>
    dc54:	6823      	ldr	r3, [r4, #0]
    dc56:	2b00      	cmp	r3, #0
    dc58:	d000      	beq.n	dc5c <_sbrk_r+0x1c>
    dc5a:	602b      	str	r3, [r5, #0]
    dc5c:	bd70      	pop	{r4, r5, r6, pc}
    dc5e:	46c0      	nop			; (mov r8, r8)
    dc60:	20001fa8 	.word	0x20001fa8

0000dc64 <siprintf>:
    dc64:	b40e      	push	{r1, r2, r3}
    dc66:	b510      	push	{r4, lr}
    dc68:	b09d      	sub	sp, #116	; 0x74
    dc6a:	a902      	add	r1, sp, #8
    dc6c:	9002      	str	r0, [sp, #8]
    dc6e:	6108      	str	r0, [r1, #16]
    dc70:	480b      	ldr	r0, [pc, #44]	; (dca0 <siprintf+0x3c>)
    dc72:	2482      	movs	r4, #130	; 0x82
    dc74:	6088      	str	r0, [r1, #8]
    dc76:	6148      	str	r0, [r1, #20]
    dc78:	2001      	movs	r0, #1
    dc7a:	4240      	negs	r0, r0
    dc7c:	ab1f      	add	r3, sp, #124	; 0x7c
    dc7e:	81c8      	strh	r0, [r1, #14]
    dc80:	4808      	ldr	r0, [pc, #32]	; (dca4 <siprintf+0x40>)
    dc82:	cb04      	ldmia	r3!, {r2}
    dc84:	00a4      	lsls	r4, r4, #2
    dc86:	6800      	ldr	r0, [r0, #0]
    dc88:	9301      	str	r3, [sp, #4]
    dc8a:	818c      	strh	r4, [r1, #12]
    dc8c:	f002 f8b0 	bl	fdf0 <_svfiprintf_r>
    dc90:	2300      	movs	r3, #0
    dc92:	9a02      	ldr	r2, [sp, #8]
    dc94:	7013      	strb	r3, [r2, #0]
    dc96:	b01d      	add	sp, #116	; 0x74
    dc98:	bc10      	pop	{r4}
    dc9a:	bc08      	pop	{r3}
    dc9c:	b003      	add	sp, #12
    dc9e:	4718      	bx	r3
    dca0:	7fffffff 	.word	0x7fffffff
    dca4:	200000b4 	.word	0x200000b4

0000dca8 <strcat>:
    dca8:	0002      	movs	r2, r0
    dcaa:	b510      	push	{r4, lr}
    dcac:	7813      	ldrb	r3, [r2, #0]
    dcae:	2b00      	cmp	r3, #0
    dcb0:	d105      	bne.n	dcbe <strcat+0x16>
    dcb2:	5ccc      	ldrb	r4, [r1, r3]
    dcb4:	54d4      	strb	r4, [r2, r3]
    dcb6:	3301      	adds	r3, #1
    dcb8:	2c00      	cmp	r4, #0
    dcba:	d1fa      	bne.n	dcb2 <strcat+0xa>
    dcbc:	bd10      	pop	{r4, pc}
    dcbe:	3201      	adds	r2, #1
    dcc0:	e7f4      	b.n	dcac <strcat+0x4>

0000dcc2 <strcmp>:
    dcc2:	7802      	ldrb	r2, [r0, #0]
    dcc4:	780b      	ldrb	r3, [r1, #0]
    dcc6:	2a00      	cmp	r2, #0
    dcc8:	d003      	beq.n	dcd2 <strcmp+0x10>
    dcca:	3001      	adds	r0, #1
    dccc:	3101      	adds	r1, #1
    dcce:	429a      	cmp	r2, r3
    dcd0:	d0f7      	beq.n	dcc2 <strcmp>
    dcd2:	1ad0      	subs	r0, r2, r3
    dcd4:	4770      	bx	lr

0000dcd6 <strcpy>:
    dcd6:	1c03      	adds	r3, r0, #0
    dcd8:	780a      	ldrb	r2, [r1, #0]
    dcda:	3101      	adds	r1, #1
    dcdc:	701a      	strb	r2, [r3, #0]
    dcde:	3301      	adds	r3, #1
    dce0:	2a00      	cmp	r2, #0
    dce2:	d1f9      	bne.n	dcd8 <strcpy+0x2>
    dce4:	4770      	bx	lr

0000dce6 <strlen>:
    dce6:	2300      	movs	r3, #0
    dce8:	5cc2      	ldrb	r2, [r0, r3]
    dcea:	3301      	adds	r3, #1
    dcec:	2a00      	cmp	r2, #0
    dcee:	d1fb      	bne.n	dce8 <strlen+0x2>
    dcf0:	1e58      	subs	r0, r3, #1
    dcf2:	4770      	bx	lr

0000dcf4 <strncat>:
    dcf4:	0003      	movs	r3, r0
    dcf6:	b510      	push	{r4, lr}
    dcf8:	781c      	ldrb	r4, [r3, #0]
    dcfa:	2c00      	cmp	r4, #0
    dcfc:	d107      	bne.n	dd0e <strncat+0x1a>
    dcfe:	3a01      	subs	r2, #1
    dd00:	1c54      	adds	r4, r2, #1
    dd02:	d003      	beq.n	dd0c <strncat+0x18>
    dd04:	780c      	ldrb	r4, [r1, #0]
    dd06:	701c      	strb	r4, [r3, #0]
    dd08:	2c00      	cmp	r4, #0
    dd0a:	d102      	bne.n	dd12 <strncat+0x1e>
    dd0c:	bd10      	pop	{r4, pc}
    dd0e:	3301      	adds	r3, #1
    dd10:	e7f2      	b.n	dcf8 <strncat+0x4>
    dd12:	2a00      	cmp	r2, #0
    dd14:	d100      	bne.n	dd18 <strncat+0x24>
    dd16:	705a      	strb	r2, [r3, #1]
    dd18:	3301      	adds	r3, #1
    dd1a:	3101      	adds	r1, #1
    dd1c:	e7ef      	b.n	dcfe <strncat+0xa>

0000dd1e <strncmp>:
    dd1e:	2300      	movs	r3, #0
    dd20:	b530      	push	{r4, r5, lr}
    dd22:	429a      	cmp	r2, r3
    dd24:	d00a      	beq.n	dd3c <strncmp+0x1e>
    dd26:	3a01      	subs	r2, #1
    dd28:	5cc4      	ldrb	r4, [r0, r3]
    dd2a:	5ccd      	ldrb	r5, [r1, r3]
    dd2c:	42ac      	cmp	r4, r5
    dd2e:	d104      	bne.n	dd3a <strncmp+0x1c>
    dd30:	429a      	cmp	r2, r3
    dd32:	d002      	beq.n	dd3a <strncmp+0x1c>
    dd34:	3301      	adds	r3, #1
    dd36:	2c00      	cmp	r4, #0
    dd38:	d1f6      	bne.n	dd28 <strncmp+0xa>
    dd3a:	1b63      	subs	r3, r4, r5
    dd3c:	0018      	movs	r0, r3
    dd3e:	bd30      	pop	{r4, r5, pc}

0000dd40 <strncpy>:
    dd40:	b570      	push	{r4, r5, r6, lr}
    dd42:	0004      	movs	r4, r0
    dd44:	2a00      	cmp	r2, #0
    dd46:	d100      	bne.n	dd4a <strncpy+0xa>
    dd48:	bd70      	pop	{r4, r5, r6, pc}
    dd4a:	780d      	ldrb	r5, [r1, #0]
    dd4c:	1e56      	subs	r6, r2, #1
    dd4e:	1c63      	adds	r3, r4, #1
    dd50:	7025      	strb	r5, [r4, #0]
    dd52:	3101      	adds	r1, #1
    dd54:	2d00      	cmp	r5, #0
    dd56:	d105      	bne.n	dd64 <strncpy+0x24>
    dd58:	18a4      	adds	r4, r4, r2
    dd5a:	429c      	cmp	r4, r3
    dd5c:	d0f4      	beq.n	dd48 <strncpy+0x8>
    dd5e:	701d      	strb	r5, [r3, #0]
    dd60:	3301      	adds	r3, #1
    dd62:	e7fa      	b.n	dd5a <strncpy+0x1a>
    dd64:	001c      	movs	r4, r3
    dd66:	0032      	movs	r2, r6
    dd68:	e7ec      	b.n	dd44 <strncpy+0x4>
	...

0000dd6c <_strtol_l.isra.0>:
    dd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd6e:	001f      	movs	r7, r3
    dd70:	000e      	movs	r6, r1
    dd72:	b087      	sub	sp, #28
    dd74:	9005      	str	r0, [sp, #20]
    dd76:	9103      	str	r1, [sp, #12]
    dd78:	9202      	str	r2, [sp, #8]
    dd7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    dd7c:	7834      	ldrb	r4, [r6, #0]
    dd7e:	f7fe fe39 	bl	c9f4 <__locale_ctype_ptr_l>
    dd82:	2208      	movs	r2, #8
    dd84:	1900      	adds	r0, r0, r4
    dd86:	7843      	ldrb	r3, [r0, #1]
    dd88:	1c75      	adds	r5, r6, #1
    dd8a:	4013      	ands	r3, r2
    dd8c:	d10c      	bne.n	dda8 <_strtol_l.isra.0+0x3c>
    dd8e:	2c2d      	cmp	r4, #45	; 0x2d
    dd90:	d10c      	bne.n	ddac <_strtol_l.isra.0+0x40>
    dd92:	3301      	adds	r3, #1
    dd94:	782c      	ldrb	r4, [r5, #0]
    dd96:	9301      	str	r3, [sp, #4]
    dd98:	1cb5      	adds	r5, r6, #2
    dd9a:	2f00      	cmp	r7, #0
    dd9c:	d00c      	beq.n	ddb8 <_strtol_l.isra.0+0x4c>
    dd9e:	2f10      	cmp	r7, #16
    dda0:	d114      	bne.n	ddcc <_strtol_l.isra.0+0x60>
    dda2:	2c30      	cmp	r4, #48	; 0x30
    dda4:	d00a      	beq.n	ddbc <_strtol_l.isra.0+0x50>
    dda6:	e011      	b.n	ddcc <_strtol_l.isra.0+0x60>
    dda8:	002e      	movs	r6, r5
    ddaa:	e7e6      	b.n	dd7a <_strtol_l.isra.0+0xe>
    ddac:	9301      	str	r3, [sp, #4]
    ddae:	2c2b      	cmp	r4, #43	; 0x2b
    ddb0:	d1f3      	bne.n	dd9a <_strtol_l.isra.0+0x2e>
    ddb2:	782c      	ldrb	r4, [r5, #0]
    ddb4:	1cb5      	adds	r5, r6, #2
    ddb6:	e7f0      	b.n	dd9a <_strtol_l.isra.0+0x2e>
    ddb8:	2c30      	cmp	r4, #48	; 0x30
    ddba:	d12f      	bne.n	de1c <_strtol_l.isra.0+0xb0>
    ddbc:	2220      	movs	r2, #32
    ddbe:	782b      	ldrb	r3, [r5, #0]
    ddc0:	4393      	bics	r3, r2
    ddc2:	2b58      	cmp	r3, #88	; 0x58
    ddc4:	d151      	bne.n	de6a <_strtol_l.isra.0+0xfe>
    ddc6:	2710      	movs	r7, #16
    ddc8:	786c      	ldrb	r4, [r5, #1]
    ddca:	3502      	adds	r5, #2
    ddcc:	9b01      	ldr	r3, [sp, #4]
    ddce:	4a29      	ldr	r2, [pc, #164]	; (de74 <_strtol_l.isra.0+0x108>)
    ddd0:	0039      	movs	r1, r7
    ddd2:	189e      	adds	r6, r3, r2
    ddd4:	0030      	movs	r0, r6
    ddd6:	f7fb fd8b 	bl	98f0 <__aeabi_uidivmod>
    ddda:	0030      	movs	r0, r6
    dddc:	9104      	str	r1, [sp, #16]
    ddde:	0039      	movs	r1, r7
    dde0:	f7fb fd00 	bl	97e4 <__udivsi3>
    dde4:	2101      	movs	r1, #1
    dde6:	2300      	movs	r3, #0
    dde8:	4249      	negs	r1, r1
    ddea:	0002      	movs	r2, r0
    ddec:	468c      	mov	ip, r1
    ddee:	0018      	movs	r0, r3
    ddf0:	0021      	movs	r1, r4
    ddf2:	3930      	subs	r1, #48	; 0x30
    ddf4:	2909      	cmp	r1, #9
    ddf6:	d813      	bhi.n	de20 <_strtol_l.isra.0+0xb4>
    ddf8:	000c      	movs	r4, r1
    ddfa:	42a7      	cmp	r7, r4
    ddfc:	dd1c      	ble.n	de38 <_strtol_l.isra.0+0xcc>
    ddfe:	1c59      	adds	r1, r3, #1
    de00:	d009      	beq.n	de16 <_strtol_l.isra.0+0xaa>
    de02:	4663      	mov	r3, ip
    de04:	4282      	cmp	r2, r0
    de06:	d306      	bcc.n	de16 <_strtol_l.isra.0+0xaa>
    de08:	d102      	bne.n	de10 <_strtol_l.isra.0+0xa4>
    de0a:	9904      	ldr	r1, [sp, #16]
    de0c:	42a1      	cmp	r1, r4
    de0e:	db02      	blt.n	de16 <_strtol_l.isra.0+0xaa>
    de10:	2301      	movs	r3, #1
    de12:	4378      	muls	r0, r7
    de14:	1820      	adds	r0, r4, r0
    de16:	782c      	ldrb	r4, [r5, #0]
    de18:	3501      	adds	r5, #1
    de1a:	e7e9      	b.n	ddf0 <_strtol_l.isra.0+0x84>
    de1c:	270a      	movs	r7, #10
    de1e:	e7d5      	b.n	ddcc <_strtol_l.isra.0+0x60>
    de20:	0021      	movs	r1, r4
    de22:	3941      	subs	r1, #65	; 0x41
    de24:	2919      	cmp	r1, #25
    de26:	d801      	bhi.n	de2c <_strtol_l.isra.0+0xc0>
    de28:	3c37      	subs	r4, #55	; 0x37
    de2a:	e7e6      	b.n	ddfa <_strtol_l.isra.0+0x8e>
    de2c:	0021      	movs	r1, r4
    de2e:	3961      	subs	r1, #97	; 0x61
    de30:	2919      	cmp	r1, #25
    de32:	d801      	bhi.n	de38 <_strtol_l.isra.0+0xcc>
    de34:	3c57      	subs	r4, #87	; 0x57
    de36:	e7e0      	b.n	ddfa <_strtol_l.isra.0+0x8e>
    de38:	1c5a      	adds	r2, r3, #1
    de3a:	d108      	bne.n	de4e <_strtol_l.isra.0+0xe2>
    de3c:	9a05      	ldr	r2, [sp, #20]
    de3e:	3323      	adds	r3, #35	; 0x23
    de40:	6013      	str	r3, [r2, #0]
    de42:	9b02      	ldr	r3, [sp, #8]
    de44:	0030      	movs	r0, r6
    de46:	2b00      	cmp	r3, #0
    de48:	d10b      	bne.n	de62 <_strtol_l.isra.0+0xf6>
    de4a:	b007      	add	sp, #28
    de4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de4e:	9a01      	ldr	r2, [sp, #4]
    de50:	2a00      	cmp	r2, #0
    de52:	d000      	beq.n	de56 <_strtol_l.isra.0+0xea>
    de54:	4240      	negs	r0, r0
    de56:	9a02      	ldr	r2, [sp, #8]
    de58:	2a00      	cmp	r2, #0
    de5a:	d0f6      	beq.n	de4a <_strtol_l.isra.0+0xde>
    de5c:	9a03      	ldr	r2, [sp, #12]
    de5e:	2b00      	cmp	r3, #0
    de60:	d000      	beq.n	de64 <_strtol_l.isra.0+0xf8>
    de62:	1e6a      	subs	r2, r5, #1
    de64:	9b02      	ldr	r3, [sp, #8]
    de66:	601a      	str	r2, [r3, #0]
    de68:	e7ef      	b.n	de4a <_strtol_l.isra.0+0xde>
    de6a:	2430      	movs	r4, #48	; 0x30
    de6c:	2f00      	cmp	r7, #0
    de6e:	d1ad      	bne.n	ddcc <_strtol_l.isra.0+0x60>
    de70:	3708      	adds	r7, #8
    de72:	e7ab      	b.n	ddcc <_strtol_l.isra.0+0x60>
    de74:	7fffffff 	.word	0x7fffffff

0000de78 <_strtol_r>:
    de78:	b513      	push	{r0, r1, r4, lr}
    de7a:	4c05      	ldr	r4, [pc, #20]	; (de90 <_strtol_r+0x18>)
    de7c:	6824      	ldr	r4, [r4, #0]
    de7e:	6a24      	ldr	r4, [r4, #32]
    de80:	2c00      	cmp	r4, #0
    de82:	d100      	bne.n	de86 <_strtol_r+0xe>
    de84:	4c03      	ldr	r4, [pc, #12]	; (de94 <_strtol_r+0x1c>)
    de86:	9400      	str	r4, [sp, #0]
    de88:	f7ff ff70 	bl	dd6c <_strtol_l.isra.0>
    de8c:	bd16      	pop	{r1, r2, r4, pc}
    de8e:	46c0      	nop			; (mov r8, r8)
    de90:	200000b4 	.word	0x200000b4
    de94:	20000118 	.word	0x20000118

0000de98 <sbrk>:
    de98:	b510      	push	{r4, lr}
    de9a:	4b03      	ldr	r3, [pc, #12]	; (dea8 <sbrk+0x10>)
    de9c:	0001      	movs	r1, r0
    de9e:	6818      	ldr	r0, [r3, #0]
    dea0:	f7ff fece 	bl	dc40 <_sbrk_r>
    dea4:	bd10      	pop	{r4, pc}
    dea6:	46c0      	nop			; (mov r8, r8)
    dea8:	200000b4 	.word	0x200000b4

0000deac <toupper>:
    deac:	b510      	push	{r4, lr}
    deae:	0004      	movs	r4, r0
    deb0:	f7fe fda4 	bl	c9fc <__locale_ctype_ptr>
    deb4:	2203      	movs	r2, #3
    deb6:	1900      	adds	r0, r0, r4
    deb8:	7843      	ldrb	r3, [r0, #1]
    deba:	4013      	ands	r3, r2
    debc:	2b02      	cmp	r3, #2
    debe:	d100      	bne.n	dec2 <toupper+0x16>
    dec0:	3c20      	subs	r4, #32
    dec2:	0020      	movs	r0, r4
    dec4:	bd10      	pop	{r4, pc}
	...

0000dec8 <__tzcalc_limits>:
    dec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    deca:	b089      	sub	sp, #36	; 0x24
    decc:	0004      	movs	r4, r0
    dece:	f001 fb8d 	bl	f5ec <__gettzinfo>
    ded2:	4b4c      	ldr	r3, [pc, #304]	; (e004 <__tzcalc_limits+0x13c>)
    ded4:	0007      	movs	r7, r0
    ded6:	2000      	movs	r0, #0
    ded8:	429c      	cmp	r4, r3
    deda:	dd58      	ble.n	df8e <__tzcalc_limits+0xc6>
    dedc:	256e      	movs	r5, #110	; 0x6e
    dede:	2164      	movs	r1, #100	; 0x64
    dee0:	4b49      	ldr	r3, [pc, #292]	; (e008 <__tzcalc_limits+0x140>)
    dee2:	35ff      	adds	r5, #255	; 0xff
    dee4:	18e0      	adds	r0, r4, r3
    dee6:	4345      	muls	r5, r0
    dee8:	4b48      	ldr	r3, [pc, #288]	; (e00c <__tzcalc_limits+0x144>)
    deea:	607c      	str	r4, [r7, #4]
    deec:	18e0      	adds	r0, r4, r3
    deee:	4b48      	ldr	r3, [pc, #288]	; (e010 <__tzcalc_limits+0x148>)
    def0:	1080      	asrs	r0, r0, #2
    def2:	182d      	adds	r5, r5, r0
    def4:	4249      	negs	r1, r1
    def6:	18e0      	adds	r0, r4, r3
    def8:	f7fb fcfe 	bl	98f8 <__divsi3>
    defc:	21c8      	movs	r1, #200	; 0xc8
    defe:	4b45      	ldr	r3, [pc, #276]	; (e014 <__tzcalc_limits+0x14c>)
    df00:	182d      	adds	r5, r5, r0
    df02:	0049      	lsls	r1, r1, #1
    df04:	18e0      	adds	r0, r4, r3
    df06:	f7fb fcf7 	bl	98f8 <__divsi3>
    df0a:	2164      	movs	r1, #100	; 0x64
    df0c:	182b      	adds	r3, r5, r0
    df0e:	0020      	movs	r0, r4
    df10:	9301      	str	r3, [sp, #4]
    df12:	f7fb fdd7 	bl	9ac4 <__aeabi_idivmod>
    df16:	9102      	str	r1, [sp, #8]
    df18:	21c8      	movs	r1, #200	; 0xc8
    df1a:	0020      	movs	r0, r4
    df1c:	0049      	lsls	r1, r1, #1
    df1e:	f7fb fdd1 	bl	9ac4 <__aeabi_idivmod>
    df22:	000a      	movs	r2, r1
    df24:	4253      	negs	r3, r2
    df26:	415a      	adcs	r2, r3
    df28:	003b      	movs	r3, r7
    df2a:	3340      	adds	r3, #64	; 0x40
    df2c:	9307      	str	r3, [sp, #28]
    df2e:	2303      	movs	r3, #3
    df30:	003d      	movs	r5, r7
    df32:	401c      	ands	r4, r3
    df34:	9103      	str	r1, [sp, #12]
    df36:	9205      	str	r2, [sp, #20]
    df38:	3508      	adds	r5, #8
    df3a:	9406      	str	r4, [sp, #24]
    df3c:	782b      	ldrb	r3, [r5, #0]
    df3e:	2b4a      	cmp	r3, #74	; 0x4a
    df40:	d127      	bne.n	df92 <__tzcalc_limits+0xca>
    df42:	9a01      	ldr	r2, [sp, #4]
    df44:	68eb      	ldr	r3, [r5, #12]
    df46:	18d1      	adds	r1, r2, r3
    df48:	9a06      	ldr	r2, [sp, #24]
    df4a:	2a00      	cmp	r2, #0
    df4c:	d102      	bne.n	df54 <__tzcalc_limits+0x8c>
    df4e:	9a02      	ldr	r2, [sp, #8]
    df50:	2a00      	cmp	r2, #0
    df52:	d103      	bne.n	df5c <__tzcalc_limits+0x94>
    df54:	2400      	movs	r4, #0
    df56:	9a03      	ldr	r2, [sp, #12]
    df58:	42a2      	cmp	r2, r4
    df5a:	d103      	bne.n	df64 <__tzcalc_limits+0x9c>
    df5c:	2401      	movs	r4, #1
    df5e:	2b3b      	cmp	r3, #59	; 0x3b
    df60:	dc00      	bgt.n	df64 <__tzcalc_limits+0x9c>
    df62:	2400      	movs	r4, #0
    df64:	1864      	adds	r4, r4, r1
    df66:	3c01      	subs	r4, #1
    df68:	492b      	ldr	r1, [pc, #172]	; (e018 <__tzcalc_limits+0x150>)
    df6a:	692b      	ldr	r3, [r5, #16]
    df6c:	434c      	muls	r4, r1
    df6e:	18e4      	adds	r4, r4, r3
    df70:	69ab      	ldr	r3, [r5, #24]
    df72:	18e4      	adds	r4, r4, r3
    df74:	9b07      	ldr	r3, [sp, #28]
    df76:	616c      	str	r4, [r5, #20]
    df78:	351c      	adds	r5, #28
    df7a:	42ab      	cmp	r3, r5
    df7c:	d1de      	bne.n	df3c <__tzcalc_limits+0x74>
    df7e:	69fa      	ldr	r2, [r7, #28]
    df80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    df82:	2301      	movs	r3, #1
    df84:	428a      	cmp	r2, r1
    df86:	db00      	blt.n	df8a <__tzcalc_limits+0xc2>
    df88:	2300      	movs	r3, #0
    df8a:	2001      	movs	r0, #1
    df8c:	603b      	str	r3, [r7, #0]
    df8e:	b009      	add	sp, #36	; 0x24
    df90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df92:	2b44      	cmp	r3, #68	; 0x44
    df94:	d103      	bne.n	df9e <__tzcalc_limits+0xd6>
    df96:	9b01      	ldr	r3, [sp, #4]
    df98:	68ea      	ldr	r2, [r5, #12]
    df9a:	189c      	adds	r4, r3, r2
    df9c:	e7e4      	b.n	df68 <__tzcalc_limits+0xa0>
    df9e:	9a06      	ldr	r2, [sp, #24]
    dfa0:	9b05      	ldr	r3, [sp, #20]
    dfa2:	2a00      	cmp	r2, #0
    dfa4:	d103      	bne.n	dfae <__tzcalc_limits+0xe6>
    dfa6:	9a02      	ldr	r2, [sp, #8]
    dfa8:	2a00      	cmp	r2, #0
    dfaa:	d000      	beq.n	dfae <__tzcalc_limits+0xe6>
    dfac:	2301      	movs	r3, #1
    dfae:	2230      	movs	r2, #48	; 0x30
    dfb0:	4353      	muls	r3, r2
    dfb2:	4a1a      	ldr	r2, [pc, #104]	; (e01c <__tzcalc_limits+0x154>)
    dfb4:	686e      	ldr	r6, [r5, #4]
    dfb6:	189b      	adds	r3, r3, r2
    dfb8:	9304      	str	r3, [sp, #16]
    dfba:	001a      	movs	r2, r3
    dfbc:	2301      	movs	r3, #1
    dfbe:	9c01      	ldr	r4, [sp, #4]
    dfc0:	42b3      	cmp	r3, r6
    dfc2:	db18      	blt.n	dff6 <__tzcalc_limits+0x12e>
    dfc4:	2e00      	cmp	r6, #0
    dfc6:	dc00      	bgt.n	dfca <__tzcalc_limits+0x102>
    dfc8:	2601      	movs	r6, #1
    dfca:	1d20      	adds	r0, r4, #4
    dfcc:	2107      	movs	r1, #7
    dfce:	f7fb fd79 	bl	9ac4 <__aeabi_idivmod>
    dfd2:	68eb      	ldr	r3, [r5, #12]
    dfd4:	1a5b      	subs	r3, r3, r1
    dfd6:	d500      	bpl.n	dfda <__tzcalc_limits+0x112>
    dfd8:	3307      	adds	r3, #7
    dfda:	2107      	movs	r1, #7
    dfdc:	68aa      	ldr	r2, [r5, #8]
    dfde:	3a01      	subs	r2, #1
    dfe0:	4351      	muls	r1, r2
    dfe2:	18c9      	adds	r1, r1, r3
    dfe4:	4b0e      	ldr	r3, [pc, #56]	; (e020 <__tzcalc_limits+0x158>)
    dfe6:	18f6      	adds	r6, r6, r3
    dfe8:	9b04      	ldr	r3, [sp, #16]
    dfea:	00b6      	lsls	r6, r6, #2
    dfec:	58f3      	ldr	r3, [r6, r3]
    dfee:	4299      	cmp	r1, r3
    dff0:	da05      	bge.n	dffe <__tzcalc_limits+0x136>
    dff2:	1864      	adds	r4, r4, r1
    dff4:	e7b8      	b.n	df68 <__tzcalc_limits+0xa0>
    dff6:	ca02      	ldmia	r2!, {r1}
    dff8:	3301      	adds	r3, #1
    dffa:	1864      	adds	r4, r4, r1
    dffc:	e7e0      	b.n	dfc0 <__tzcalc_limits+0xf8>
    dffe:	3907      	subs	r1, #7
    e000:	e7f5      	b.n	dfee <__tzcalc_limits+0x126>
    e002:	46c0      	nop			; (mov r8, r8)
    e004:	000007b1 	.word	0x000007b1
    e008:	fffff84e 	.word	0xfffff84e
    e00c:	fffff84f 	.word	0xfffff84f
    e010:	fffff893 	.word	0xfffff893
    e014:	fffff9bf 	.word	0xfffff9bf
    e018:	00015180 	.word	0x00015180
    e01c:	00012b68 	.word	0x00012b68
    e020:	3fffffff 	.word	0x3fffffff

0000e024 <__tz_lock>:
    e024:	4770      	bx	lr

0000e026 <__tz_unlock>:
    e026:	4770      	bx	lr

0000e028 <_tzset_unlocked>:
    e028:	b510      	push	{r4, lr}
    e02a:	4b02      	ldr	r3, [pc, #8]	; (e034 <_tzset_unlocked+0xc>)
    e02c:	6818      	ldr	r0, [r3, #0]
    e02e:	f000 f803 	bl	e038 <_tzset_unlocked_r>
    e032:	bd10      	pop	{r4, pc}
    e034:	200000b4 	.word	0x200000b4

0000e038 <_tzset_unlocked_r>:
    e038:	b5f0      	push	{r4, r5, r6, r7, lr}
    e03a:	b08d      	sub	sp, #52	; 0x34
    e03c:	0007      	movs	r7, r0
    e03e:	f001 fad5 	bl	f5ec <__gettzinfo>
    e042:	49af      	ldr	r1, [pc, #700]	; (e300 <_tzset_unlocked_r+0x2c8>)
    e044:	0006      	movs	r6, r0
    e046:	0038      	movs	r0, r7
    e048:	f001 faca 	bl	f5e0 <_getenv_r>
    e04c:	4dad      	ldr	r5, [pc, #692]	; (e304 <_tzset_unlocked_r+0x2cc>)
    e04e:	1e04      	subs	r4, r0, #0
    e050:	d10d      	bne.n	e06e <_tzset_unlocked_r+0x36>
    e052:	4bad      	ldr	r3, [pc, #692]	; (e308 <_tzset_unlocked_r+0x2d0>)
    e054:	4aad      	ldr	r2, [pc, #692]	; (e30c <_tzset_unlocked_r+0x2d4>)
    e056:	6018      	str	r0, [r3, #0]
    e058:	4bad      	ldr	r3, [pc, #692]	; (e310 <_tzset_unlocked_r+0x2d8>)
    e05a:	6018      	str	r0, [r3, #0]
    e05c:	4bad      	ldr	r3, [pc, #692]	; (e314 <_tzset_unlocked_r+0x2dc>)
    e05e:	6828      	ldr	r0, [r5, #0]
    e060:	601a      	str	r2, [r3, #0]
    e062:	605a      	str	r2, [r3, #4]
    e064:	f7fe fce2 	bl	ca2c <free>
    e068:	602c      	str	r4, [r5, #0]
    e06a:	b00d      	add	sp, #52	; 0x34
    e06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e06e:	6829      	ldr	r1, [r5, #0]
    e070:	2900      	cmp	r1, #0
    e072:	d15a      	bne.n	e12a <_tzset_unlocked_r+0xf2>
    e074:	6828      	ldr	r0, [r5, #0]
    e076:	f7fe fcd9 	bl	ca2c <free>
    e07a:	0020      	movs	r0, r4
    e07c:	f7ff fe33 	bl	dce6 <strlen>
    e080:	1c41      	adds	r1, r0, #1
    e082:	0038      	movs	r0, r7
    e084:	f7fe ffc0 	bl	d008 <_malloc_r>
    e088:	6028      	str	r0, [r5, #0]
    e08a:	2800      	cmp	r0, #0
    e08c:	d152      	bne.n	e134 <_tzset_unlocked_r+0xfc>
    e08e:	7823      	ldrb	r3, [r4, #0]
    e090:	3b3a      	subs	r3, #58	; 0x3a
    e092:	4259      	negs	r1, r3
    e094:	4159      	adcs	r1, r3
    e096:	1864      	adds	r4, r4, r1
    e098:	ab0a      	add	r3, sp, #40	; 0x28
    e09a:	4a9f      	ldr	r2, [pc, #636]	; (e318 <_tzset_unlocked_r+0x2e0>)
    e09c:	499f      	ldr	r1, [pc, #636]	; (e31c <_tzset_unlocked_r+0x2e4>)
    e09e:	0020      	movs	r0, r4
    e0a0:	f001 fff4 	bl	1008c <siscanf>
    e0a4:	2800      	cmp	r0, #0
    e0a6:	dde0      	ble.n	e06a <_tzset_unlocked_r+0x32>
    e0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e0aa:	18e4      	adds	r4, r4, r3
    e0ac:	7823      	ldrb	r3, [r4, #0]
    e0ae:	2b2d      	cmp	r3, #45	; 0x2d
    e0b0:	d144      	bne.n	e13c <_tzset_unlocked_r+0x104>
    e0b2:	3b2e      	subs	r3, #46	; 0x2e
    e0b4:	3401      	adds	r4, #1
    e0b6:	9304      	str	r3, [sp, #16]
    e0b8:	2716      	movs	r7, #22
    e0ba:	ab02      	add	r3, sp, #8
    e0bc:	18ff      	adds	r7, r7, r3
    e0be:	2300      	movs	r3, #0
    e0c0:	803b      	strh	r3, [r7, #0]
    e0c2:	2300      	movs	r3, #0
    e0c4:	ad08      	add	r5, sp, #32
    e0c6:	802b      	strh	r3, [r5, #0]
    e0c8:	ab0a      	add	r3, sp, #40	; 0x28
    e0ca:	9303      	str	r3, [sp, #12]
    e0cc:	9502      	str	r5, [sp, #8]
    e0ce:	9301      	str	r3, [sp, #4]
    e0d0:	9700      	str	r7, [sp, #0]
    e0d2:	aa07      	add	r2, sp, #28
    e0d4:	4992      	ldr	r1, [pc, #584]	; (e320 <_tzset_unlocked_r+0x2e8>)
    e0d6:	0020      	movs	r0, r4
    e0d8:	f001 ffd8 	bl	1008c <siscanf>
    e0dc:	2800      	cmp	r0, #0
    e0de:	ddc4      	ble.n	e06a <_tzset_unlocked_r+0x32>
    e0e0:	233c      	movs	r3, #60	; 0x3c
    e0e2:	883a      	ldrh	r2, [r7, #0]
    e0e4:	4f8f      	ldr	r7, [pc, #572]	; (e324 <_tzset_unlocked_r+0x2ec>)
    e0e6:	4353      	muls	r3, r2
    e0e8:	882a      	ldrh	r2, [r5, #0]
    e0ea:	4d8a      	ldr	r5, [pc, #552]	; (e314 <_tzset_unlocked_r+0x2dc>)
    e0ec:	189b      	adds	r3, r3, r2
    e0ee:	aa02      	add	r2, sp, #8
    e0f0:	8a91      	ldrh	r1, [r2, #20]
    e0f2:	22e1      	movs	r2, #225	; 0xe1
    e0f4:	0112      	lsls	r2, r2, #4
    e0f6:	434a      	muls	r2, r1
    e0f8:	189b      	adds	r3, r3, r2
    e0fa:	9a04      	ldr	r2, [sp, #16]
    e0fc:	4987      	ldr	r1, [pc, #540]	; (e31c <_tzset_unlocked_r+0x2e4>)
    e0fe:	435a      	muls	r2, r3
    e100:	4b85      	ldr	r3, [pc, #532]	; (e318 <_tzset_unlocked_r+0x2e0>)
    e102:	6232      	str	r2, [r6, #32]
    e104:	602b      	str	r3, [r5, #0]
    e106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e108:	003a      	movs	r2, r7
    e10a:	18e4      	adds	r4, r4, r3
    e10c:	0020      	movs	r0, r4
    e10e:	ab0a      	add	r3, sp, #40	; 0x28
    e110:	f001 ffbc 	bl	1008c <siscanf>
    e114:	2800      	cmp	r0, #0
    e116:	dc18      	bgt.n	e14a <_tzset_unlocked_r+0x112>
    e118:	682b      	ldr	r3, [r5, #0]
    e11a:	6a32      	ldr	r2, [r6, #32]
    e11c:	606b      	str	r3, [r5, #4]
    e11e:	4b7a      	ldr	r3, [pc, #488]	; (e308 <_tzset_unlocked_r+0x2d0>)
    e120:	601a      	str	r2, [r3, #0]
    e122:	2200      	movs	r2, #0
    e124:	4b7a      	ldr	r3, [pc, #488]	; (e310 <_tzset_unlocked_r+0x2d8>)
    e126:	601a      	str	r2, [r3, #0]
    e128:	e79f      	b.n	e06a <_tzset_unlocked_r+0x32>
    e12a:	f7ff fdca 	bl	dcc2 <strcmp>
    e12e:	2800      	cmp	r0, #0
    e130:	d09b      	beq.n	e06a <_tzset_unlocked_r+0x32>
    e132:	e79f      	b.n	e074 <_tzset_unlocked_r+0x3c>
    e134:	0021      	movs	r1, r4
    e136:	f7ff fdce 	bl	dcd6 <strcpy>
    e13a:	e7a8      	b.n	e08e <_tzset_unlocked_r+0x56>
    e13c:	2201      	movs	r2, #1
    e13e:	3b2b      	subs	r3, #43	; 0x2b
    e140:	9204      	str	r2, [sp, #16]
    e142:	4259      	negs	r1, r3
    e144:	4159      	adcs	r1, r3
    e146:	1864      	adds	r4, r4, r1
    e148:	e7b6      	b.n	e0b8 <_tzset_unlocked_r+0x80>
    e14a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e14c:	606f      	str	r7, [r5, #4]
    e14e:	18e4      	adds	r4, r4, r3
    e150:	7823      	ldrb	r3, [r4, #0]
    e152:	2b2d      	cmp	r3, #45	; 0x2d
    e154:	d000      	beq.n	e158 <_tzset_unlocked_r+0x120>
    e156:	e08f      	b.n	e278 <_tzset_unlocked_r+0x240>
    e158:	3b2e      	subs	r3, #46	; 0x2e
    e15a:	3401      	adds	r4, #1
    e15c:	9304      	str	r3, [sp, #16]
    e15e:	2716      	movs	r7, #22
    e160:	2300      	movs	r3, #0
    e162:	aa02      	add	r2, sp, #8
    e164:	18bf      	adds	r7, r7, r2
    e166:	ad07      	add	r5, sp, #28
    e168:	8313      	strh	r3, [r2, #24]
    e16a:	802b      	strh	r3, [r5, #0]
    e16c:	803b      	strh	r3, [r7, #0]
    e16e:	aa08      	add	r2, sp, #32
    e170:	930a      	str	r3, [sp, #40]	; 0x28
    e172:	ab0a      	add	r3, sp, #40	; 0x28
    e174:	9202      	str	r2, [sp, #8]
    e176:	9303      	str	r3, [sp, #12]
    e178:	9301      	str	r3, [sp, #4]
    e17a:	9700      	str	r7, [sp, #0]
    e17c:	002a      	movs	r2, r5
    e17e:	4968      	ldr	r1, [pc, #416]	; (e320 <_tzset_unlocked_r+0x2e8>)
    e180:	0020      	movs	r0, r4
    e182:	f001 ff83 	bl	1008c <siscanf>
    e186:	2800      	cmp	r0, #0
    e188:	dd00      	ble.n	e18c <_tzset_unlocked_r+0x154>
    e18a:	e07c      	b.n	e286 <_tzset_unlocked_r+0x24e>
    e18c:	6a33      	ldr	r3, [r6, #32]
    e18e:	4a66      	ldr	r2, [pc, #408]	; (e328 <_tzset_unlocked_r+0x2f0>)
    e190:	189b      	adds	r3, r3, r2
    e192:	63f3      	str	r3, [r6, #60]	; 0x3c
    e194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e196:	0037      	movs	r7, r6
    e198:	18e4      	adds	r4, r4, r3
    e19a:	2300      	movs	r3, #0
    e19c:	3708      	adds	r7, #8
    e19e:	9304      	str	r3, [sp, #16]
    e1a0:	7823      	ldrb	r3, [r4, #0]
    e1a2:	3b2c      	subs	r3, #44	; 0x2c
    e1a4:	4259      	negs	r1, r3
    e1a6:	4159      	adcs	r1, r3
    e1a8:	1864      	adds	r4, r4, r1
    e1aa:	7825      	ldrb	r5, [r4, #0]
    e1ac:	2d4d      	cmp	r5, #77	; 0x4d
    e1ae:	d000      	beq.n	e1b2 <_tzset_unlocked_r+0x17a>
    e1b0:	e078      	b.n	e2a4 <_tzset_unlocked_r+0x26c>
    e1b2:	221e      	movs	r2, #30
    e1b4:	a902      	add	r1, sp, #8
    e1b6:	1852      	adds	r2, r2, r1
    e1b8:	9202      	str	r2, [sp, #8]
    e1ba:	aa09      	add	r2, sp, #36	; 0x24
    e1bc:	9200      	str	r2, [sp, #0]
    e1be:	221a      	movs	r2, #26
    e1c0:	ab0a      	add	r3, sp, #40	; 0x28
    e1c2:	1852      	adds	r2, r2, r1
    e1c4:	9303      	str	r3, [sp, #12]
    e1c6:	9301      	str	r3, [sp, #4]
    e1c8:	4958      	ldr	r1, [pc, #352]	; (e32c <_tzset_unlocked_r+0x2f4>)
    e1ca:	0020      	movs	r0, r4
    e1cc:	f001 ff5e 	bl	1008c <siscanf>
    e1d0:	2803      	cmp	r0, #3
    e1d2:	d000      	beq.n	e1d6 <_tzset_unlocked_r+0x19e>
    e1d4:	e749      	b.n	e06a <_tzset_unlocked_r+0x32>
    e1d6:	ab02      	add	r3, sp, #8
    e1d8:	8b59      	ldrh	r1, [r3, #26]
    e1da:	1e4b      	subs	r3, r1, #1
    e1dc:	2b0b      	cmp	r3, #11
    e1de:	d900      	bls.n	e1e2 <_tzset_unlocked_r+0x1aa>
    e1e0:	e743      	b.n	e06a <_tzset_unlocked_r+0x32>
    e1e2:	ab02      	add	r3, sp, #8
    e1e4:	8b9a      	ldrh	r2, [r3, #28]
    e1e6:	1e53      	subs	r3, r2, #1
    e1e8:	2b04      	cmp	r3, #4
    e1ea:	d900      	bls.n	e1ee <_tzset_unlocked_r+0x1b6>
    e1ec:	e73d      	b.n	e06a <_tzset_unlocked_r+0x32>
    e1ee:	ab02      	add	r3, sp, #8
    e1f0:	8bdb      	ldrh	r3, [r3, #30]
    e1f2:	2b06      	cmp	r3, #6
    e1f4:	d900      	bls.n	e1f8 <_tzset_unlocked_r+0x1c0>
    e1f6:	e738      	b.n	e06a <_tzset_unlocked_r+0x32>
    e1f8:	703d      	strb	r5, [r7, #0]
    e1fa:	6079      	str	r1, [r7, #4]
    e1fc:	60ba      	str	r2, [r7, #8]
    e1fe:	60fb      	str	r3, [r7, #12]
    e200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e202:	18e5      	adds	r5, r4, r3
    e204:	2302      	movs	r3, #2
    e206:	aa07      	add	r2, sp, #28
    e208:	8013      	strh	r3, [r2, #0]
    e20a:	2300      	movs	r3, #0
    e20c:	a902      	add	r1, sp, #8
    e20e:	ac08      	add	r4, sp, #32
    e210:	82cb      	strh	r3, [r1, #22]
    e212:	8023      	strh	r3, [r4, #0]
    e214:	930a      	str	r3, [sp, #40]	; 0x28
    e216:	782b      	ldrb	r3, [r5, #0]
    e218:	2b2f      	cmp	r3, #47	; 0x2f
    e21a:	d10b      	bne.n	e234 <_tzset_unlocked_r+0x1fc>
    e21c:	2116      	movs	r1, #22
    e21e:	a802      	add	r0, sp, #8
    e220:	1809      	adds	r1, r1, r0
    e222:	ab0a      	add	r3, sp, #40	; 0x28
    e224:	9100      	str	r1, [sp, #0]
    e226:	9303      	str	r3, [sp, #12]
    e228:	9402      	str	r4, [sp, #8]
    e22a:	9301      	str	r3, [sp, #4]
    e22c:	4940      	ldr	r1, [pc, #256]	; (e330 <_tzset_unlocked_r+0x2f8>)
    e22e:	0028      	movs	r0, r5
    e230:	f001 ff2c 	bl	1008c <siscanf>
    e234:	ab02      	add	r3, sp, #8
    e236:	8ada      	ldrh	r2, [r3, #22]
    e238:	233c      	movs	r3, #60	; 0x3c
    e23a:	4353      	muls	r3, r2
    e23c:	8822      	ldrh	r2, [r4, #0]
    e23e:	189b      	adds	r3, r3, r2
    e240:	aa07      	add	r2, sp, #28
    e242:	8811      	ldrh	r1, [r2, #0]
    e244:	22e1      	movs	r2, #225	; 0xe1
    e246:	0112      	lsls	r2, r2, #4
    e248:	434a      	muls	r2, r1
    e24a:	189b      	adds	r3, r3, r2
    e24c:	613b      	str	r3, [r7, #16]
    e24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e250:	371c      	adds	r7, #28
    e252:	18ec      	adds	r4, r5, r3
    e254:	9b04      	ldr	r3, [sp, #16]
    e256:	3301      	adds	r3, #1
    e258:	9304      	str	r3, [sp, #16]
    e25a:	2b02      	cmp	r3, #2
    e25c:	d1a0      	bne.n	e1a0 <_tzset_unlocked_r+0x168>
    e25e:	6870      	ldr	r0, [r6, #4]
    e260:	f7ff fe32 	bl	dec8 <__tzcalc_limits>
    e264:	6a32      	ldr	r2, [r6, #32]
    e266:	4b28      	ldr	r3, [pc, #160]	; (e308 <_tzset_unlocked_r+0x2d0>)
    e268:	601a      	str	r2, [r3, #0]
    e26a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    e26c:	1a9b      	subs	r3, r3, r2
    e26e:	1e5a      	subs	r2, r3, #1
    e270:	4193      	sbcs	r3, r2
    e272:	4a27      	ldr	r2, [pc, #156]	; (e310 <_tzset_unlocked_r+0x2d8>)
    e274:	6013      	str	r3, [r2, #0]
    e276:	e6f8      	b.n	e06a <_tzset_unlocked_r+0x32>
    e278:	2201      	movs	r2, #1
    e27a:	3b2b      	subs	r3, #43	; 0x2b
    e27c:	9204      	str	r2, [sp, #16]
    e27e:	4259      	negs	r1, r3
    e280:	4159      	adcs	r1, r3
    e282:	1864      	adds	r4, r4, r1
    e284:	e76b      	b.n	e15e <_tzset_unlocked_r+0x126>
    e286:	233c      	movs	r3, #60	; 0x3c
    e288:	883a      	ldrh	r2, [r7, #0]
    e28a:	8829      	ldrh	r1, [r5, #0]
    e28c:	4353      	muls	r3, r2
    e28e:	aa02      	add	r2, sp, #8
    e290:	8b12      	ldrh	r2, [r2, #24]
    e292:	189b      	adds	r3, r3, r2
    e294:	22e1      	movs	r2, #225	; 0xe1
    e296:	0112      	lsls	r2, r2, #4
    e298:	434a      	muls	r2, r1
    e29a:	189b      	adds	r3, r3, r2
    e29c:	9a04      	ldr	r2, [sp, #16]
    e29e:	435a      	muls	r2, r3
    e2a0:	0013      	movs	r3, r2
    e2a2:	e776      	b.n	e192 <_tzset_unlocked_r+0x15a>
    e2a4:	2344      	movs	r3, #68	; 0x44
    e2a6:	9305      	str	r3, [sp, #20]
    e2a8:	2d4a      	cmp	r5, #74	; 0x4a
    e2aa:	d101      	bne.n	e2b0 <_tzset_unlocked_r+0x278>
    e2ac:	3401      	adds	r4, #1
    e2ae:	9505      	str	r5, [sp, #20]
    e2b0:	220a      	movs	r2, #10
    e2b2:	a90b      	add	r1, sp, #44	; 0x2c
    e2b4:	0020      	movs	r0, r4
    e2b6:	f001 fff7 	bl	102a8 <strtoul>
    e2ba:	231e      	movs	r3, #30
    e2bc:	aa02      	add	r2, sp, #8
    e2be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    e2c0:	189b      	adds	r3, r3, r2
    e2c2:	8018      	strh	r0, [r3, #0]
    e2c4:	42ac      	cmp	r4, r5
    e2c6:	d115      	bne.n	e2f4 <_tzset_unlocked_r+0x2bc>
    e2c8:	9b04      	ldr	r3, [sp, #16]
    e2ca:	2b00      	cmp	r3, #0
    e2cc:	d108      	bne.n	e2e0 <_tzset_unlocked_r+0x2a8>
    e2ce:	334d      	adds	r3, #77	; 0x4d
    e2d0:	7233      	strb	r3, [r6, #8]
    e2d2:	2303      	movs	r3, #3
    e2d4:	60f3      	str	r3, [r6, #12]
    e2d6:	3b01      	subs	r3, #1
    e2d8:	6133      	str	r3, [r6, #16]
    e2da:	9b04      	ldr	r3, [sp, #16]
    e2dc:	6173      	str	r3, [r6, #20]
    e2de:	e791      	b.n	e204 <_tzset_unlocked_r+0x1cc>
    e2e0:	224d      	movs	r2, #77	; 0x4d
    e2e2:	1d73      	adds	r3, r6, #5
    e2e4:	77da      	strb	r2, [r3, #31]
    e2e6:	230b      	movs	r3, #11
    e2e8:	62b3      	str	r3, [r6, #40]	; 0x28
    e2ea:	3b0a      	subs	r3, #10
    e2ec:	62f3      	str	r3, [r6, #44]	; 0x2c
    e2ee:	2300      	movs	r3, #0
    e2f0:	6333      	str	r3, [r6, #48]	; 0x30
    e2f2:	e787      	b.n	e204 <_tzset_unlocked_r+0x1cc>
    e2f4:	466b      	mov	r3, sp
    e2f6:	7d1b      	ldrb	r3, [r3, #20]
    e2f8:	b280      	uxth	r0, r0
    e2fa:	703b      	strb	r3, [r7, #0]
    e2fc:	60f8      	str	r0, [r7, #12]
    e2fe:	e781      	b.n	e204 <_tzset_unlocked_r+0x1cc>
    e300:	000129bb 	.word	0x000129bb
    e304:	20001f94 	.word	0x20001f94
    e308:	20001f9c 	.word	0x20001f9c
    e30c:	000129be 	.word	0x000129be
    e310:	20001f98 	.word	0x20001f98
    e314:	20000284 	.word	0x20000284
    e318:	20001f87 	.word	0x20001f87
    e31c:	000129c2 	.word	0x000129c2
    e320:	000129e5 	.word	0x000129e5
    e324:	20001f7c 	.word	0x20001f7c
    e328:	fffff1f0 	.word	0xfffff1f0
    e32c:	000129d1 	.word	0x000129d1
    e330:	000129e4 	.word	0x000129e4

0000e334 <_vsiprintf_r>:
    e334:	b530      	push	{r4, r5, lr}
    e336:	b09b      	sub	sp, #108	; 0x6c
    e338:	9100      	str	r1, [sp, #0]
    e33a:	9104      	str	r1, [sp, #16]
    e33c:	4908      	ldr	r1, [pc, #32]	; (e360 <_vsiprintf_r+0x2c>)
    e33e:	466d      	mov	r5, sp
    e340:	9102      	str	r1, [sp, #8]
    e342:	9105      	str	r1, [sp, #20]
    e344:	2101      	movs	r1, #1
    e346:	2482      	movs	r4, #130	; 0x82
    e348:	4249      	negs	r1, r1
    e34a:	81e9      	strh	r1, [r5, #14]
    e34c:	00a4      	lsls	r4, r4, #2
    e34e:	4669      	mov	r1, sp
    e350:	81ac      	strh	r4, [r5, #12]
    e352:	f001 fd4d 	bl	fdf0 <_svfiprintf_r>
    e356:	2300      	movs	r3, #0
    e358:	9a00      	ldr	r2, [sp, #0]
    e35a:	7013      	strb	r3, [r2, #0]
    e35c:	b01b      	add	sp, #108	; 0x6c
    e35e:	bd30      	pop	{r4, r5, pc}
    e360:	7fffffff 	.word	0x7fffffff

0000e364 <vsiprintf>:
    e364:	b510      	push	{r4, lr}
    e366:	0013      	movs	r3, r2
    e368:	000a      	movs	r2, r1
    e36a:	0001      	movs	r1, r0
    e36c:	4802      	ldr	r0, [pc, #8]	; (e378 <vsiprintf+0x14>)
    e36e:	6800      	ldr	r0, [r0, #0]
    e370:	f7ff ffe0 	bl	e334 <_vsiprintf_r>
    e374:	bd10      	pop	{r4, pc}
    e376:	46c0      	nop			; (mov r8, r8)
    e378:	200000b4 	.word	0x200000b4

0000e37c <__swbuf_r>:
    e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e37e:	0005      	movs	r5, r0
    e380:	000e      	movs	r6, r1
    e382:	0014      	movs	r4, r2
    e384:	2800      	cmp	r0, #0
    e386:	d004      	beq.n	e392 <__swbuf_r+0x16>
    e388:	6983      	ldr	r3, [r0, #24]
    e38a:	2b00      	cmp	r3, #0
    e38c:	d101      	bne.n	e392 <__swbuf_r+0x16>
    e38e:	f001 f855 	bl	f43c <__sinit>
    e392:	4b22      	ldr	r3, [pc, #136]	; (e41c <__swbuf_r+0xa0>)
    e394:	429c      	cmp	r4, r3
    e396:	d12d      	bne.n	e3f4 <__swbuf_r+0x78>
    e398:	686c      	ldr	r4, [r5, #4]
    e39a:	69a3      	ldr	r3, [r4, #24]
    e39c:	60a3      	str	r3, [r4, #8]
    e39e:	89a3      	ldrh	r3, [r4, #12]
    e3a0:	071b      	lsls	r3, r3, #28
    e3a2:	d531      	bpl.n	e408 <__swbuf_r+0x8c>
    e3a4:	6923      	ldr	r3, [r4, #16]
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d02e      	beq.n	e408 <__swbuf_r+0x8c>
    e3aa:	6823      	ldr	r3, [r4, #0]
    e3ac:	6922      	ldr	r2, [r4, #16]
    e3ae:	b2f7      	uxtb	r7, r6
    e3b0:	1a98      	subs	r0, r3, r2
    e3b2:	6963      	ldr	r3, [r4, #20]
    e3b4:	b2f6      	uxtb	r6, r6
    e3b6:	4298      	cmp	r0, r3
    e3b8:	db05      	blt.n	e3c6 <__swbuf_r+0x4a>
    e3ba:	0021      	movs	r1, r4
    e3bc:	0028      	movs	r0, r5
    e3be:	f000 ffcf 	bl	f360 <_fflush_r>
    e3c2:	2800      	cmp	r0, #0
    e3c4:	d126      	bne.n	e414 <__swbuf_r+0x98>
    e3c6:	68a3      	ldr	r3, [r4, #8]
    e3c8:	3001      	adds	r0, #1
    e3ca:	3b01      	subs	r3, #1
    e3cc:	60a3      	str	r3, [r4, #8]
    e3ce:	6823      	ldr	r3, [r4, #0]
    e3d0:	1c5a      	adds	r2, r3, #1
    e3d2:	6022      	str	r2, [r4, #0]
    e3d4:	701f      	strb	r7, [r3, #0]
    e3d6:	6963      	ldr	r3, [r4, #20]
    e3d8:	4298      	cmp	r0, r3
    e3da:	d004      	beq.n	e3e6 <__swbuf_r+0x6a>
    e3dc:	89a3      	ldrh	r3, [r4, #12]
    e3de:	07db      	lsls	r3, r3, #31
    e3e0:	d51a      	bpl.n	e418 <__swbuf_r+0x9c>
    e3e2:	2e0a      	cmp	r6, #10
    e3e4:	d118      	bne.n	e418 <__swbuf_r+0x9c>
    e3e6:	0021      	movs	r1, r4
    e3e8:	0028      	movs	r0, r5
    e3ea:	f000 ffb9 	bl	f360 <_fflush_r>
    e3ee:	2800      	cmp	r0, #0
    e3f0:	d012      	beq.n	e418 <__swbuf_r+0x9c>
    e3f2:	e00f      	b.n	e414 <__swbuf_r+0x98>
    e3f4:	4b0a      	ldr	r3, [pc, #40]	; (e420 <__swbuf_r+0xa4>)
    e3f6:	429c      	cmp	r4, r3
    e3f8:	d101      	bne.n	e3fe <__swbuf_r+0x82>
    e3fa:	68ac      	ldr	r4, [r5, #8]
    e3fc:	e7cd      	b.n	e39a <__swbuf_r+0x1e>
    e3fe:	4b09      	ldr	r3, [pc, #36]	; (e424 <__swbuf_r+0xa8>)
    e400:	429c      	cmp	r4, r3
    e402:	d1ca      	bne.n	e39a <__swbuf_r+0x1e>
    e404:	68ec      	ldr	r4, [r5, #12]
    e406:	e7c8      	b.n	e39a <__swbuf_r+0x1e>
    e408:	0021      	movs	r1, r4
    e40a:	0028      	movs	r0, r5
    e40c:	f000 f818 	bl	e440 <__swsetup_r>
    e410:	2800      	cmp	r0, #0
    e412:	d0ca      	beq.n	e3aa <__swbuf_r+0x2e>
    e414:	2601      	movs	r6, #1
    e416:	4276      	negs	r6, r6
    e418:	0030      	movs	r0, r6
    e41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e41c:	00012b28 	.word	0x00012b28
    e420:	00012b48 	.word	0x00012b48
    e424:	00012b08 	.word	0x00012b08

0000e428 <__ascii_wctomb>:
    e428:	1e0b      	subs	r3, r1, #0
    e42a:	d004      	beq.n	e436 <__ascii_wctomb+0xe>
    e42c:	2aff      	cmp	r2, #255	; 0xff
    e42e:	d904      	bls.n	e43a <__ascii_wctomb+0x12>
    e430:	238a      	movs	r3, #138	; 0x8a
    e432:	6003      	str	r3, [r0, #0]
    e434:	3b8b      	subs	r3, #139	; 0x8b
    e436:	0018      	movs	r0, r3
    e438:	4770      	bx	lr
    e43a:	700a      	strb	r2, [r1, #0]
    e43c:	2301      	movs	r3, #1
    e43e:	e7fa      	b.n	e436 <__ascii_wctomb+0xe>

0000e440 <__swsetup_r>:
    e440:	4b36      	ldr	r3, [pc, #216]	; (e51c <__swsetup_r+0xdc>)
    e442:	b570      	push	{r4, r5, r6, lr}
    e444:	681d      	ldr	r5, [r3, #0]
    e446:	0006      	movs	r6, r0
    e448:	000c      	movs	r4, r1
    e44a:	2d00      	cmp	r5, #0
    e44c:	d005      	beq.n	e45a <__swsetup_r+0x1a>
    e44e:	69ab      	ldr	r3, [r5, #24]
    e450:	2b00      	cmp	r3, #0
    e452:	d102      	bne.n	e45a <__swsetup_r+0x1a>
    e454:	0028      	movs	r0, r5
    e456:	f000 fff1 	bl	f43c <__sinit>
    e45a:	4b31      	ldr	r3, [pc, #196]	; (e520 <__swsetup_r+0xe0>)
    e45c:	429c      	cmp	r4, r3
    e45e:	d10f      	bne.n	e480 <__swsetup_r+0x40>
    e460:	686c      	ldr	r4, [r5, #4]
    e462:	230c      	movs	r3, #12
    e464:	5ee2      	ldrsh	r2, [r4, r3]
    e466:	b293      	uxth	r3, r2
    e468:	0719      	lsls	r1, r3, #28
    e46a:	d42d      	bmi.n	e4c8 <__swsetup_r+0x88>
    e46c:	06d9      	lsls	r1, r3, #27
    e46e:	d411      	bmi.n	e494 <__swsetup_r+0x54>
    e470:	2309      	movs	r3, #9
    e472:	2001      	movs	r0, #1
    e474:	6033      	str	r3, [r6, #0]
    e476:	3337      	adds	r3, #55	; 0x37
    e478:	4313      	orrs	r3, r2
    e47a:	81a3      	strh	r3, [r4, #12]
    e47c:	4240      	negs	r0, r0
    e47e:	bd70      	pop	{r4, r5, r6, pc}
    e480:	4b28      	ldr	r3, [pc, #160]	; (e524 <__swsetup_r+0xe4>)
    e482:	429c      	cmp	r4, r3
    e484:	d101      	bne.n	e48a <__swsetup_r+0x4a>
    e486:	68ac      	ldr	r4, [r5, #8]
    e488:	e7eb      	b.n	e462 <__swsetup_r+0x22>
    e48a:	4b27      	ldr	r3, [pc, #156]	; (e528 <__swsetup_r+0xe8>)
    e48c:	429c      	cmp	r4, r3
    e48e:	d1e8      	bne.n	e462 <__swsetup_r+0x22>
    e490:	68ec      	ldr	r4, [r5, #12]
    e492:	e7e6      	b.n	e462 <__swsetup_r+0x22>
    e494:	075b      	lsls	r3, r3, #29
    e496:	d513      	bpl.n	e4c0 <__swsetup_r+0x80>
    e498:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e49a:	2900      	cmp	r1, #0
    e49c:	d008      	beq.n	e4b0 <__swsetup_r+0x70>
    e49e:	0023      	movs	r3, r4
    e4a0:	3344      	adds	r3, #68	; 0x44
    e4a2:	4299      	cmp	r1, r3
    e4a4:	d002      	beq.n	e4ac <__swsetup_r+0x6c>
    e4a6:	0030      	movs	r0, r6
    e4a8:	f7fe fd64 	bl	cf74 <_free_r>
    e4ac:	2300      	movs	r3, #0
    e4ae:	6363      	str	r3, [r4, #52]	; 0x34
    e4b0:	2224      	movs	r2, #36	; 0x24
    e4b2:	89a3      	ldrh	r3, [r4, #12]
    e4b4:	4393      	bics	r3, r2
    e4b6:	81a3      	strh	r3, [r4, #12]
    e4b8:	2300      	movs	r3, #0
    e4ba:	6063      	str	r3, [r4, #4]
    e4bc:	6923      	ldr	r3, [r4, #16]
    e4be:	6023      	str	r3, [r4, #0]
    e4c0:	2308      	movs	r3, #8
    e4c2:	89a2      	ldrh	r2, [r4, #12]
    e4c4:	4313      	orrs	r3, r2
    e4c6:	81a3      	strh	r3, [r4, #12]
    e4c8:	6923      	ldr	r3, [r4, #16]
    e4ca:	2b00      	cmp	r3, #0
    e4cc:	d10b      	bne.n	e4e6 <__swsetup_r+0xa6>
    e4ce:	21a0      	movs	r1, #160	; 0xa0
    e4d0:	2280      	movs	r2, #128	; 0x80
    e4d2:	89a3      	ldrh	r3, [r4, #12]
    e4d4:	0089      	lsls	r1, r1, #2
    e4d6:	0092      	lsls	r2, r2, #2
    e4d8:	400b      	ands	r3, r1
    e4da:	4293      	cmp	r3, r2
    e4dc:	d003      	beq.n	e4e6 <__swsetup_r+0xa6>
    e4de:	0021      	movs	r1, r4
    e4e0:	0030      	movs	r0, r6
    e4e2:	f001 f8bb 	bl	f65c <__smakebuf_r>
    e4e6:	2301      	movs	r3, #1
    e4e8:	89a2      	ldrh	r2, [r4, #12]
    e4ea:	4013      	ands	r3, r2
    e4ec:	d011      	beq.n	e512 <__swsetup_r+0xd2>
    e4ee:	2300      	movs	r3, #0
    e4f0:	60a3      	str	r3, [r4, #8]
    e4f2:	6963      	ldr	r3, [r4, #20]
    e4f4:	425b      	negs	r3, r3
    e4f6:	61a3      	str	r3, [r4, #24]
    e4f8:	2000      	movs	r0, #0
    e4fa:	6923      	ldr	r3, [r4, #16]
    e4fc:	4283      	cmp	r3, r0
    e4fe:	d1be      	bne.n	e47e <__swsetup_r+0x3e>
    e500:	230c      	movs	r3, #12
    e502:	5ee2      	ldrsh	r2, [r4, r3]
    e504:	0613      	lsls	r3, r2, #24
    e506:	d5ba      	bpl.n	e47e <__swsetup_r+0x3e>
    e508:	2340      	movs	r3, #64	; 0x40
    e50a:	4313      	orrs	r3, r2
    e50c:	81a3      	strh	r3, [r4, #12]
    e50e:	3801      	subs	r0, #1
    e510:	e7b5      	b.n	e47e <__swsetup_r+0x3e>
    e512:	0792      	lsls	r2, r2, #30
    e514:	d400      	bmi.n	e518 <__swsetup_r+0xd8>
    e516:	6963      	ldr	r3, [r4, #20]
    e518:	60a3      	str	r3, [r4, #8]
    e51a:	e7ed      	b.n	e4f8 <__swsetup_r+0xb8>
    e51c:	200000b4 	.word	0x200000b4
    e520:	00012b28 	.word	0x00012b28
    e524:	00012b48 	.word	0x00012b48
    e528:	00012b08 	.word	0x00012b08

0000e52c <abort>:
    e52c:	b510      	push	{r4, lr}
    e52e:	2006      	movs	r0, #6
    e530:	f001 fd8c 	bl	1004c <raise>
    e534:	2001      	movs	r0, #1
    e536:	f002 fb4b 	bl	10bd0 <_exit>

0000e53a <div>:
    e53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e53c:	000f      	movs	r7, r1
    e53e:	0006      	movs	r6, r0
    e540:	0011      	movs	r1, r2
    e542:	0038      	movs	r0, r7
    e544:	0015      	movs	r5, r2
    e546:	f7fb f9d7 	bl	98f8 <__divsi3>
    e54a:	0029      	movs	r1, r5
    e54c:	0004      	movs	r4, r0
    e54e:	0038      	movs	r0, r7
    e550:	f7fb fab8 	bl	9ac4 <__aeabi_idivmod>
    e554:	2f00      	cmp	r7, #0
    e556:	db07      	blt.n	e568 <div+0x2e>
    e558:	2900      	cmp	r1, #0
    e55a:	da01      	bge.n	e560 <div+0x26>
    e55c:	3401      	adds	r4, #1
    e55e:	1b49      	subs	r1, r1, r5
    e560:	0030      	movs	r0, r6
    e562:	6034      	str	r4, [r6, #0]
    e564:	6071      	str	r1, [r6, #4]
    e566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e568:	2900      	cmp	r1, #0
    e56a:	ddf9      	ble.n	e560 <div+0x26>
    e56c:	3c01      	subs	r4, #1
    e56e:	1949      	adds	r1, r1, r5
    e570:	e7f6      	b.n	e560 <div+0x26>

0000e572 <quorem>:
    e572:	b5f0      	push	{r4, r5, r6, r7, lr}
    e574:	6903      	ldr	r3, [r0, #16]
    e576:	690c      	ldr	r4, [r1, #16]
    e578:	b089      	sub	sp, #36	; 0x24
    e57a:	0007      	movs	r7, r0
    e57c:	9105      	str	r1, [sp, #20]
    e57e:	2600      	movs	r6, #0
    e580:	429c      	cmp	r4, r3
    e582:	dc6d      	bgt.n	e660 <quorem+0xee>
    e584:	000b      	movs	r3, r1
    e586:	3c01      	subs	r4, #1
    e588:	3314      	adds	r3, #20
    e58a:	00a5      	lsls	r5, r4, #2
    e58c:	9303      	str	r3, [sp, #12]
    e58e:	195b      	adds	r3, r3, r5
    e590:	9304      	str	r3, [sp, #16]
    e592:	0003      	movs	r3, r0
    e594:	3314      	adds	r3, #20
    e596:	9302      	str	r3, [sp, #8]
    e598:	195d      	adds	r5, r3, r5
    e59a:	9b04      	ldr	r3, [sp, #16]
    e59c:	6828      	ldr	r0, [r5, #0]
    e59e:	681b      	ldr	r3, [r3, #0]
    e5a0:	1c59      	adds	r1, r3, #1
    e5a2:	9301      	str	r3, [sp, #4]
    e5a4:	f7fb f91e 	bl	97e4 <__udivsi3>
    e5a8:	9001      	str	r0, [sp, #4]
    e5aa:	42b0      	cmp	r0, r6
    e5ac:	d02d      	beq.n	e60a <quorem+0x98>
    e5ae:	9b03      	ldr	r3, [sp, #12]
    e5b0:	9802      	ldr	r0, [sp, #8]
    e5b2:	469c      	mov	ip, r3
    e5b4:	9606      	str	r6, [sp, #24]
    e5b6:	4662      	mov	r2, ip
    e5b8:	ca08      	ldmia	r2!, {r3}
    e5ba:	4694      	mov	ip, r2
    e5bc:	9a01      	ldr	r2, [sp, #4]
    e5be:	b299      	uxth	r1, r3
    e5c0:	4351      	muls	r1, r2
    e5c2:	0c1b      	lsrs	r3, r3, #16
    e5c4:	4353      	muls	r3, r2
    e5c6:	1989      	adds	r1, r1, r6
    e5c8:	0c0a      	lsrs	r2, r1, #16
    e5ca:	189b      	adds	r3, r3, r2
    e5cc:	9307      	str	r3, [sp, #28]
    e5ce:	8802      	ldrh	r2, [r0, #0]
    e5d0:	0c1e      	lsrs	r6, r3, #16
    e5d2:	9b06      	ldr	r3, [sp, #24]
    e5d4:	b289      	uxth	r1, r1
    e5d6:	18d2      	adds	r2, r2, r3
    e5d8:	6803      	ldr	r3, [r0, #0]
    e5da:	1a52      	subs	r2, r2, r1
    e5dc:	0c19      	lsrs	r1, r3, #16
    e5de:	466b      	mov	r3, sp
    e5e0:	8b9b      	ldrh	r3, [r3, #28]
    e5e2:	1acb      	subs	r3, r1, r3
    e5e4:	1411      	asrs	r1, r2, #16
    e5e6:	185b      	adds	r3, r3, r1
    e5e8:	1419      	asrs	r1, r3, #16
    e5ea:	b292      	uxth	r2, r2
    e5ec:	041b      	lsls	r3, r3, #16
    e5ee:	431a      	orrs	r2, r3
    e5f0:	9b04      	ldr	r3, [sp, #16]
    e5f2:	9106      	str	r1, [sp, #24]
    e5f4:	c004      	stmia	r0!, {r2}
    e5f6:	4563      	cmp	r3, ip
    e5f8:	d2dd      	bcs.n	e5b6 <quorem+0x44>
    e5fa:	682b      	ldr	r3, [r5, #0]
    e5fc:	2b00      	cmp	r3, #0
    e5fe:	d104      	bne.n	e60a <quorem+0x98>
    e600:	9b02      	ldr	r3, [sp, #8]
    e602:	3d04      	subs	r5, #4
    e604:	42ab      	cmp	r3, r5
    e606:	d32e      	bcc.n	e666 <quorem+0xf4>
    e608:	613c      	str	r4, [r7, #16]
    e60a:	9905      	ldr	r1, [sp, #20]
    e60c:	0038      	movs	r0, r7
    e60e:	f001 fa88 	bl	fb22 <__mcmp>
    e612:	2800      	cmp	r0, #0
    e614:	db23      	blt.n	e65e <quorem+0xec>
    e616:	2500      	movs	r5, #0
    e618:	9b01      	ldr	r3, [sp, #4]
    e61a:	9802      	ldr	r0, [sp, #8]
    e61c:	3301      	adds	r3, #1
    e61e:	9903      	ldr	r1, [sp, #12]
    e620:	9301      	str	r3, [sp, #4]
    e622:	c908      	ldmia	r1!, {r3}
    e624:	8802      	ldrh	r2, [r0, #0]
    e626:	1955      	adds	r5, r2, r5
    e628:	b29a      	uxth	r2, r3
    e62a:	1aaa      	subs	r2, r5, r2
    e62c:	6805      	ldr	r5, [r0, #0]
    e62e:	0c1b      	lsrs	r3, r3, #16
    e630:	0c2d      	lsrs	r5, r5, #16
    e632:	1aeb      	subs	r3, r5, r3
    e634:	1415      	asrs	r5, r2, #16
    e636:	195b      	adds	r3, r3, r5
    e638:	141d      	asrs	r5, r3, #16
    e63a:	b292      	uxth	r2, r2
    e63c:	041b      	lsls	r3, r3, #16
    e63e:	4313      	orrs	r3, r2
    e640:	c008      	stmia	r0!, {r3}
    e642:	9b04      	ldr	r3, [sp, #16]
    e644:	428b      	cmp	r3, r1
    e646:	d2ec      	bcs.n	e622 <quorem+0xb0>
    e648:	9a02      	ldr	r2, [sp, #8]
    e64a:	00a3      	lsls	r3, r4, #2
    e64c:	18d3      	adds	r3, r2, r3
    e64e:	681a      	ldr	r2, [r3, #0]
    e650:	2a00      	cmp	r2, #0
    e652:	d104      	bne.n	e65e <quorem+0xec>
    e654:	9a02      	ldr	r2, [sp, #8]
    e656:	3b04      	subs	r3, #4
    e658:	429a      	cmp	r2, r3
    e65a:	d309      	bcc.n	e670 <quorem+0xfe>
    e65c:	613c      	str	r4, [r7, #16]
    e65e:	9e01      	ldr	r6, [sp, #4]
    e660:	0030      	movs	r0, r6
    e662:	b009      	add	sp, #36	; 0x24
    e664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e666:	682b      	ldr	r3, [r5, #0]
    e668:	2b00      	cmp	r3, #0
    e66a:	d1cd      	bne.n	e608 <quorem+0x96>
    e66c:	3c01      	subs	r4, #1
    e66e:	e7c7      	b.n	e600 <quorem+0x8e>
    e670:	681a      	ldr	r2, [r3, #0]
    e672:	2a00      	cmp	r2, #0
    e674:	d1f2      	bne.n	e65c <quorem+0xea>
    e676:	3c01      	subs	r4, #1
    e678:	e7ec      	b.n	e654 <quorem+0xe2>
	...

0000e67c <_dtoa_r>:
    e67c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e67e:	0016      	movs	r6, r2
    e680:	001f      	movs	r7, r3
    e682:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e684:	b09d      	sub	sp, #116	; 0x74
    e686:	9004      	str	r0, [sp, #16]
    e688:	9d25      	ldr	r5, [sp, #148]	; 0x94
    e68a:	9606      	str	r6, [sp, #24]
    e68c:	9707      	str	r7, [sp, #28]
    e68e:	2c00      	cmp	r4, #0
    e690:	d108      	bne.n	e6a4 <_dtoa_r+0x28>
    e692:	2010      	movs	r0, #16
    e694:	f7fe f9c0 	bl	ca18 <malloc>
    e698:	9b04      	ldr	r3, [sp, #16]
    e69a:	6258      	str	r0, [r3, #36]	; 0x24
    e69c:	6044      	str	r4, [r0, #4]
    e69e:	6084      	str	r4, [r0, #8]
    e6a0:	6004      	str	r4, [r0, #0]
    e6a2:	60c4      	str	r4, [r0, #12]
    e6a4:	9b04      	ldr	r3, [sp, #16]
    e6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e6a8:	6819      	ldr	r1, [r3, #0]
    e6aa:	2900      	cmp	r1, #0
    e6ac:	d00b      	beq.n	e6c6 <_dtoa_r+0x4a>
    e6ae:	685a      	ldr	r2, [r3, #4]
    e6b0:	2301      	movs	r3, #1
    e6b2:	4093      	lsls	r3, r2
    e6b4:	604a      	str	r2, [r1, #4]
    e6b6:	608b      	str	r3, [r1, #8]
    e6b8:	9804      	ldr	r0, [sp, #16]
    e6ba:	f001 f858 	bl	f76e <_Bfree>
    e6be:	2200      	movs	r2, #0
    e6c0:	9b04      	ldr	r3, [sp, #16]
    e6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e6c4:	601a      	str	r2, [r3, #0]
    e6c6:	9b07      	ldr	r3, [sp, #28]
    e6c8:	2b00      	cmp	r3, #0
    e6ca:	da1f      	bge.n	e70c <_dtoa_r+0x90>
    e6cc:	2301      	movs	r3, #1
    e6ce:	602b      	str	r3, [r5, #0]
    e6d0:	007b      	lsls	r3, r7, #1
    e6d2:	085b      	lsrs	r3, r3, #1
    e6d4:	9307      	str	r3, [sp, #28]
    e6d6:	9c07      	ldr	r4, [sp, #28]
    e6d8:	4bb7      	ldr	r3, [pc, #732]	; (e9b8 <_dtoa_r+0x33c>)
    e6da:	0022      	movs	r2, r4
    e6dc:	9319      	str	r3, [sp, #100]	; 0x64
    e6de:	401a      	ands	r2, r3
    e6e0:	429a      	cmp	r2, r3
    e6e2:	d116      	bne.n	e712 <_dtoa_r+0x96>
    e6e4:	4bb5      	ldr	r3, [pc, #724]	; (e9bc <_dtoa_r+0x340>)
    e6e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e6e8:	6013      	str	r3, [r2, #0]
    e6ea:	9b06      	ldr	r3, [sp, #24]
    e6ec:	2b00      	cmp	r3, #0
    e6ee:	d103      	bne.n	e6f8 <_dtoa_r+0x7c>
    e6f0:	0324      	lsls	r4, r4, #12
    e6f2:	d101      	bne.n	e6f8 <_dtoa_r+0x7c>
    e6f4:	f000 fd91 	bl	f21a <_dtoa_r+0xb9e>
    e6f8:	4bb1      	ldr	r3, [pc, #708]	; (e9c0 <_dtoa_r+0x344>)
    e6fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e6fc:	930a      	str	r3, [sp, #40]	; 0x28
    e6fe:	4bb1      	ldr	r3, [pc, #708]	; (e9c4 <_dtoa_r+0x348>)
    e700:	2a00      	cmp	r2, #0
    e702:	d001      	beq.n	e708 <_dtoa_r+0x8c>
    e704:	f000 fd8f 	bl	f226 <_dtoa_r+0xbaa>
    e708:	f000 fd8f 	bl	f22a <_dtoa_r+0xbae>
    e70c:	2300      	movs	r3, #0
    e70e:	602b      	str	r3, [r5, #0]
    e710:	e7e1      	b.n	e6d6 <_dtoa_r+0x5a>
    e712:	9e06      	ldr	r6, [sp, #24]
    e714:	9f07      	ldr	r7, [sp, #28]
    e716:	2200      	movs	r2, #0
    e718:	2300      	movs	r3, #0
    e71a:	0030      	movs	r0, r6
    e71c:	0039      	movs	r1, r7
    e71e:	f7fb f9e7 	bl	9af0 <__aeabi_dcmpeq>
    e722:	1e05      	subs	r5, r0, #0
    e724:	d00e      	beq.n	e744 <_dtoa_r+0xc8>
    e726:	2301      	movs	r3, #1
    e728:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e72a:	6013      	str	r3, [r2, #0]
    e72c:	4ba6      	ldr	r3, [pc, #664]	; (e9c8 <_dtoa_r+0x34c>)
    e72e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e730:	930a      	str	r3, [sp, #40]	; 0x28
    e732:	2a00      	cmp	r2, #0
    e734:	d101      	bne.n	e73a <_dtoa_r+0xbe>
    e736:	f000 fd78 	bl	f22a <_dtoa_r+0xbae>
    e73a:	4aa4      	ldr	r2, [pc, #656]	; (e9cc <_dtoa_r+0x350>)
    e73c:	9926      	ldr	r1, [sp, #152]	; 0x98
    e73e:	600a      	str	r2, [r1, #0]
    e740:	f000 fd73 	bl	f22a <_dtoa_r+0xbae>
    e744:	ab1a      	add	r3, sp, #104	; 0x68
    e746:	9301      	str	r3, [sp, #4]
    e748:	ab1b      	add	r3, sp, #108	; 0x6c
    e74a:	9300      	str	r3, [sp, #0]
    e74c:	0032      	movs	r2, r6
    e74e:	003b      	movs	r3, r7
    e750:	9804      	ldr	r0, [sp, #16]
    e752:	f001 fa63 	bl	fc1c <__d2b>
    e756:	0063      	lsls	r3, r4, #1
    e758:	9005      	str	r0, [sp, #20]
    e75a:	0d5b      	lsrs	r3, r3, #21
    e75c:	d100      	bne.n	e760 <_dtoa_r+0xe4>
    e75e:	e07f      	b.n	e860 <_dtoa_r+0x1e4>
    e760:	033a      	lsls	r2, r7, #12
    e762:	4c9b      	ldr	r4, [pc, #620]	; (e9d0 <_dtoa_r+0x354>)
    e764:	0b12      	lsrs	r2, r2, #12
    e766:	4314      	orrs	r4, r2
    e768:	0021      	movs	r1, r4
    e76a:	4a9a      	ldr	r2, [pc, #616]	; (e9d4 <_dtoa_r+0x358>)
    e76c:	0030      	movs	r0, r6
    e76e:	9518      	str	r5, [sp, #96]	; 0x60
    e770:	189e      	adds	r6, r3, r2
    e772:	2200      	movs	r2, #0
    e774:	4b98      	ldr	r3, [pc, #608]	; (e9d8 <_dtoa_r+0x35c>)
    e776:	f7fd fb29 	bl	bdcc <__aeabi_dsub>
    e77a:	4a98      	ldr	r2, [pc, #608]	; (e9dc <_dtoa_r+0x360>)
    e77c:	4b98      	ldr	r3, [pc, #608]	; (e9e0 <_dtoa_r+0x364>)
    e77e:	f7fd f8a5 	bl	b8cc <__aeabi_dmul>
    e782:	4a98      	ldr	r2, [pc, #608]	; (e9e4 <_dtoa_r+0x368>)
    e784:	4b98      	ldr	r3, [pc, #608]	; (e9e8 <_dtoa_r+0x36c>)
    e786:	f7fc f95d 	bl	aa44 <__aeabi_dadd>
    e78a:	0004      	movs	r4, r0
    e78c:	0030      	movs	r0, r6
    e78e:	000d      	movs	r5, r1
    e790:	f7fd fe86 	bl	c4a0 <__aeabi_i2d>
    e794:	4a95      	ldr	r2, [pc, #596]	; (e9ec <_dtoa_r+0x370>)
    e796:	4b96      	ldr	r3, [pc, #600]	; (e9f0 <_dtoa_r+0x374>)
    e798:	f7fd f898 	bl	b8cc <__aeabi_dmul>
    e79c:	0002      	movs	r2, r0
    e79e:	000b      	movs	r3, r1
    e7a0:	0020      	movs	r0, r4
    e7a2:	0029      	movs	r1, r5
    e7a4:	f7fc f94e 	bl	aa44 <__aeabi_dadd>
    e7a8:	0004      	movs	r4, r0
    e7aa:	000d      	movs	r5, r1
    e7ac:	f7fd fe44 	bl	c438 <__aeabi_d2iz>
    e7b0:	2200      	movs	r2, #0
    e7b2:	9003      	str	r0, [sp, #12]
    e7b4:	2300      	movs	r3, #0
    e7b6:	0020      	movs	r0, r4
    e7b8:	0029      	movs	r1, r5
    e7ba:	f7fb f99f 	bl	9afc <__aeabi_dcmplt>
    e7be:	2800      	cmp	r0, #0
    e7c0:	d00e      	beq.n	e7e0 <_dtoa_r+0x164>
    e7c2:	9803      	ldr	r0, [sp, #12]
    e7c4:	f7fd fe6c 	bl	c4a0 <__aeabi_i2d>
    e7c8:	000b      	movs	r3, r1
    e7ca:	0002      	movs	r2, r0
    e7cc:	0029      	movs	r1, r5
    e7ce:	0020      	movs	r0, r4
    e7d0:	f7fb f98e 	bl	9af0 <__aeabi_dcmpeq>
    e7d4:	0003      	movs	r3, r0
    e7d6:	4258      	negs	r0, r3
    e7d8:	4158      	adcs	r0, r3
    e7da:	9b03      	ldr	r3, [sp, #12]
    e7dc:	1a1b      	subs	r3, r3, r0
    e7de:	9303      	str	r3, [sp, #12]
    e7e0:	2301      	movs	r3, #1
    e7e2:	9316      	str	r3, [sp, #88]	; 0x58
    e7e4:	9b03      	ldr	r3, [sp, #12]
    e7e6:	2b16      	cmp	r3, #22
    e7e8:	d80f      	bhi.n	e80a <_dtoa_r+0x18e>
    e7ea:	4982      	ldr	r1, [pc, #520]	; (e9f4 <_dtoa_r+0x378>)
    e7ec:	00db      	lsls	r3, r3, #3
    e7ee:	18c9      	adds	r1, r1, r3
    e7f0:	6808      	ldr	r0, [r1, #0]
    e7f2:	6849      	ldr	r1, [r1, #4]
    e7f4:	9a06      	ldr	r2, [sp, #24]
    e7f6:	9b07      	ldr	r3, [sp, #28]
    e7f8:	f7fb f994 	bl	9b24 <__aeabi_dcmpgt>
    e7fc:	2800      	cmp	r0, #0
    e7fe:	d04b      	beq.n	e898 <_dtoa_r+0x21c>
    e800:	9b03      	ldr	r3, [sp, #12]
    e802:	3b01      	subs	r3, #1
    e804:	9303      	str	r3, [sp, #12]
    e806:	2300      	movs	r3, #0
    e808:	9316      	str	r3, [sp, #88]	; 0x58
    e80a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e80c:	1b9e      	subs	r6, r3, r6
    e80e:	2300      	movs	r3, #0
    e810:	930b      	str	r3, [sp, #44]	; 0x2c
    e812:	0033      	movs	r3, r6
    e814:	3b01      	subs	r3, #1
    e816:	930c      	str	r3, [sp, #48]	; 0x30
    e818:	d504      	bpl.n	e824 <_dtoa_r+0x1a8>
    e81a:	2301      	movs	r3, #1
    e81c:	1b9b      	subs	r3, r3, r6
    e81e:	930b      	str	r3, [sp, #44]	; 0x2c
    e820:	2300      	movs	r3, #0
    e822:	930c      	str	r3, [sp, #48]	; 0x30
    e824:	9b03      	ldr	r3, [sp, #12]
    e826:	2b00      	cmp	r3, #0
    e828:	db38      	blt.n	e89c <_dtoa_r+0x220>
    e82a:	9a03      	ldr	r2, [sp, #12]
    e82c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e82e:	4694      	mov	ip, r2
    e830:	4463      	add	r3, ip
    e832:	930c      	str	r3, [sp, #48]	; 0x30
    e834:	2300      	movs	r3, #0
    e836:	920f      	str	r2, [sp, #60]	; 0x3c
    e838:	9308      	str	r3, [sp, #32]
    e83a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e83c:	2501      	movs	r5, #1
    e83e:	2b09      	cmp	r3, #9
    e840:	d900      	bls.n	e844 <_dtoa_r+0x1c8>
    e842:	e091      	b.n	e968 <_dtoa_r+0x2ec>
    e844:	2b05      	cmp	r3, #5
    e846:	dd02      	ble.n	e84e <_dtoa_r+0x1d2>
    e848:	2500      	movs	r5, #0
    e84a:	3b04      	subs	r3, #4
    e84c:	9322      	str	r3, [sp, #136]	; 0x88
    e84e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e850:	1e98      	subs	r0, r3, #2
    e852:	2803      	cmp	r0, #3
    e854:	d900      	bls.n	e858 <_dtoa_r+0x1dc>
    e856:	e091      	b.n	e97c <_dtoa_r+0x300>
    e858:	f7fa ffba 	bl	97d0 <__gnu_thumb1_case_uqi>
    e85c:	76298482 	.word	0x76298482
    e860:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e862:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e864:	189e      	adds	r6, r3, r2
    e866:	4b64      	ldr	r3, [pc, #400]	; (e9f8 <_dtoa_r+0x37c>)
    e868:	18f2      	adds	r2, r6, r3
    e86a:	2a20      	cmp	r2, #32
    e86c:	dd0f      	ble.n	e88e <_dtoa_r+0x212>
    e86e:	4b63      	ldr	r3, [pc, #396]	; (e9fc <_dtoa_r+0x380>)
    e870:	9806      	ldr	r0, [sp, #24]
    e872:	18f3      	adds	r3, r6, r3
    e874:	40d8      	lsrs	r0, r3
    e876:	2340      	movs	r3, #64	; 0x40
    e878:	1a9b      	subs	r3, r3, r2
    e87a:	409c      	lsls	r4, r3
    e87c:	4320      	orrs	r0, r4
    e87e:	f7fd fe51 	bl	c524 <__aeabi_ui2d>
    e882:	2301      	movs	r3, #1
    e884:	4c5e      	ldr	r4, [pc, #376]	; (ea00 <_dtoa_r+0x384>)
    e886:	3e01      	subs	r6, #1
    e888:	1909      	adds	r1, r1, r4
    e88a:	9318      	str	r3, [sp, #96]	; 0x60
    e88c:	e771      	b.n	e772 <_dtoa_r+0xf6>
    e88e:	2320      	movs	r3, #32
    e890:	9806      	ldr	r0, [sp, #24]
    e892:	1a9b      	subs	r3, r3, r2
    e894:	4098      	lsls	r0, r3
    e896:	e7f2      	b.n	e87e <_dtoa_r+0x202>
    e898:	9016      	str	r0, [sp, #88]	; 0x58
    e89a:	e7b6      	b.n	e80a <_dtoa_r+0x18e>
    e89c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e89e:	9a03      	ldr	r2, [sp, #12]
    e8a0:	1a9b      	subs	r3, r3, r2
    e8a2:	930b      	str	r3, [sp, #44]	; 0x2c
    e8a4:	4253      	negs	r3, r2
    e8a6:	9308      	str	r3, [sp, #32]
    e8a8:	2300      	movs	r3, #0
    e8aa:	930f      	str	r3, [sp, #60]	; 0x3c
    e8ac:	e7c5      	b.n	e83a <_dtoa_r+0x1be>
    e8ae:	2301      	movs	r3, #1
    e8b0:	930e      	str	r3, [sp, #56]	; 0x38
    e8b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e8b4:	2b00      	cmp	r3, #0
    e8b6:	dd65      	ble.n	e984 <_dtoa_r+0x308>
    e8b8:	001f      	movs	r7, r3
    e8ba:	930d      	str	r3, [sp, #52]	; 0x34
    e8bc:	9a04      	ldr	r2, [sp, #16]
    e8be:	6a54      	ldr	r4, [r2, #36]	; 0x24
    e8c0:	2200      	movs	r2, #0
    e8c2:	6062      	str	r2, [r4, #4]
    e8c4:	3204      	adds	r2, #4
    e8c6:	0011      	movs	r1, r2
    e8c8:	3114      	adds	r1, #20
    e8ca:	4299      	cmp	r1, r3
    e8cc:	d95f      	bls.n	e98e <_dtoa_r+0x312>
    e8ce:	6861      	ldr	r1, [r4, #4]
    e8d0:	9804      	ldr	r0, [sp, #16]
    e8d2:	f000 ff14 	bl	f6fe <_Balloc>
    e8d6:	9b04      	ldr	r3, [sp, #16]
    e8d8:	6020      	str	r0, [r4, #0]
    e8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e8dc:	681b      	ldr	r3, [r3, #0]
    e8de:	930a      	str	r3, [sp, #40]	; 0x28
    e8e0:	2f0e      	cmp	r7, #14
    e8e2:	d900      	bls.n	e8e6 <_dtoa_r+0x26a>
    e8e4:	e105      	b.n	eaf2 <_dtoa_r+0x476>
    e8e6:	2d00      	cmp	r5, #0
    e8e8:	d100      	bne.n	e8ec <_dtoa_r+0x270>
    e8ea:	e102      	b.n	eaf2 <_dtoa_r+0x476>
    e8ec:	9b06      	ldr	r3, [sp, #24]
    e8ee:	9c07      	ldr	r4, [sp, #28]
    e8f0:	9314      	str	r3, [sp, #80]	; 0x50
    e8f2:	9415      	str	r4, [sp, #84]	; 0x54
    e8f4:	9b03      	ldr	r3, [sp, #12]
    e8f6:	2b00      	cmp	r3, #0
    e8f8:	dc00      	bgt.n	e8fc <_dtoa_r+0x280>
    e8fa:	e085      	b.n	ea08 <_dtoa_r+0x38c>
    e8fc:	001a      	movs	r2, r3
    e8fe:	210f      	movs	r1, #15
    e900:	4b3c      	ldr	r3, [pc, #240]	; (e9f4 <_dtoa_r+0x378>)
    e902:	400a      	ands	r2, r1
    e904:	00d2      	lsls	r2, r2, #3
    e906:	189b      	adds	r3, r3, r2
    e908:	685c      	ldr	r4, [r3, #4]
    e90a:	681b      	ldr	r3, [r3, #0]
    e90c:	9310      	str	r3, [sp, #64]	; 0x40
    e90e:	9411      	str	r4, [sp, #68]	; 0x44
    e910:	9b03      	ldr	r3, [sp, #12]
    e912:	2402      	movs	r4, #2
    e914:	111d      	asrs	r5, r3, #4
    e916:	06eb      	lsls	r3, r5, #27
    e918:	d50a      	bpl.n	e930 <_dtoa_r+0x2b4>
    e91a:	4b3a      	ldr	r3, [pc, #232]	; (ea04 <_dtoa_r+0x388>)
    e91c:	400d      	ands	r5, r1
    e91e:	6a1a      	ldr	r2, [r3, #32]
    e920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e922:	9814      	ldr	r0, [sp, #80]	; 0x50
    e924:	9915      	ldr	r1, [sp, #84]	; 0x54
    e926:	f7fc fb9d 	bl	b064 <__aeabi_ddiv>
    e92a:	9006      	str	r0, [sp, #24]
    e92c:	9107      	str	r1, [sp, #28]
    e92e:	3401      	adds	r4, #1
    e930:	4e34      	ldr	r6, [pc, #208]	; (ea04 <_dtoa_r+0x388>)
    e932:	2d00      	cmp	r5, #0
    e934:	d130      	bne.n	e998 <_dtoa_r+0x31c>
    e936:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e938:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e93a:	9806      	ldr	r0, [sp, #24]
    e93c:	9907      	ldr	r1, [sp, #28]
    e93e:	f7fc fb91 	bl	b064 <__aeabi_ddiv>
    e942:	9006      	str	r0, [sp, #24]
    e944:	9107      	str	r1, [sp, #28]
    e946:	e07a      	b.n	ea3e <_dtoa_r+0x3c2>
    e948:	2301      	movs	r3, #1
    e94a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    e94c:	930e      	str	r3, [sp, #56]	; 0x38
    e94e:	4694      	mov	ip, r2
    e950:	9b03      	ldr	r3, [sp, #12]
    e952:	4463      	add	r3, ip
    e954:	1c5f      	adds	r7, r3, #1
    e956:	930d      	str	r3, [sp, #52]	; 0x34
    e958:	1e3b      	subs	r3, r7, #0
    e95a:	dcaf      	bgt.n	e8bc <_dtoa_r+0x240>
    e95c:	2301      	movs	r3, #1
    e95e:	e7ad      	b.n	e8bc <_dtoa_r+0x240>
    e960:	2300      	movs	r3, #0
    e962:	e7a5      	b.n	e8b0 <_dtoa_r+0x234>
    e964:	2300      	movs	r3, #0
    e966:	e7f0      	b.n	e94a <_dtoa_r+0x2ce>
    e968:	2300      	movs	r3, #0
    e96a:	950e      	str	r5, [sp, #56]	; 0x38
    e96c:	9322      	str	r3, [sp, #136]	; 0x88
    e96e:	3b01      	subs	r3, #1
    e970:	2200      	movs	r2, #0
    e972:	930d      	str	r3, [sp, #52]	; 0x34
    e974:	001f      	movs	r7, r3
    e976:	3313      	adds	r3, #19
    e978:	9223      	str	r2, [sp, #140]	; 0x8c
    e97a:	e79f      	b.n	e8bc <_dtoa_r+0x240>
    e97c:	2301      	movs	r3, #1
    e97e:	930e      	str	r3, [sp, #56]	; 0x38
    e980:	3b02      	subs	r3, #2
    e982:	e7f5      	b.n	e970 <_dtoa_r+0x2f4>
    e984:	2301      	movs	r3, #1
    e986:	930d      	str	r3, [sp, #52]	; 0x34
    e988:	001f      	movs	r7, r3
    e98a:	001a      	movs	r2, r3
    e98c:	e7f4      	b.n	e978 <_dtoa_r+0x2fc>
    e98e:	6861      	ldr	r1, [r4, #4]
    e990:	0052      	lsls	r2, r2, #1
    e992:	3101      	adds	r1, #1
    e994:	6061      	str	r1, [r4, #4]
    e996:	e796      	b.n	e8c6 <_dtoa_r+0x24a>
    e998:	2301      	movs	r3, #1
    e99a:	421d      	tst	r5, r3
    e99c:	d008      	beq.n	e9b0 <_dtoa_r+0x334>
    e99e:	9810      	ldr	r0, [sp, #64]	; 0x40
    e9a0:	9911      	ldr	r1, [sp, #68]	; 0x44
    e9a2:	18e4      	adds	r4, r4, r3
    e9a4:	6832      	ldr	r2, [r6, #0]
    e9a6:	6873      	ldr	r3, [r6, #4]
    e9a8:	f7fc ff90 	bl	b8cc <__aeabi_dmul>
    e9ac:	9010      	str	r0, [sp, #64]	; 0x40
    e9ae:	9111      	str	r1, [sp, #68]	; 0x44
    e9b0:	106d      	asrs	r5, r5, #1
    e9b2:	3608      	adds	r6, #8
    e9b4:	e7bd      	b.n	e932 <_dtoa_r+0x2b6>
    e9b6:	46c0      	nop			; (mov r8, r8)
    e9b8:	7ff00000 	.word	0x7ff00000
    e9bc:	0000270f 	.word	0x0000270f
    e9c0:	00012b01 	.word	0x00012b01
    e9c4:	00012b04 	.word	0x00012b04
    e9c8:	00010e54 	.word	0x00010e54
    e9cc:	00010e55 	.word	0x00010e55
    e9d0:	3ff00000 	.word	0x3ff00000
    e9d4:	fffffc01 	.word	0xfffffc01
    e9d8:	3ff80000 	.word	0x3ff80000
    e9dc:	636f4361 	.word	0x636f4361
    e9e0:	3fd287a7 	.word	0x3fd287a7
    e9e4:	8b60c8b3 	.word	0x8b60c8b3
    e9e8:	3fc68a28 	.word	0x3fc68a28
    e9ec:	509f79fb 	.word	0x509f79fb
    e9f0:	3fd34413 	.word	0x3fd34413
    e9f4:	00012bf0 	.word	0x00012bf0
    e9f8:	00000432 	.word	0x00000432
    e9fc:	00000412 	.word	0x00000412
    ea00:	fe100000 	.word	0xfe100000
    ea04:	00012bc8 	.word	0x00012bc8
    ea08:	9b03      	ldr	r3, [sp, #12]
    ea0a:	2402      	movs	r4, #2
    ea0c:	2b00      	cmp	r3, #0
    ea0e:	d016      	beq.n	ea3e <_dtoa_r+0x3c2>
    ea10:	9814      	ldr	r0, [sp, #80]	; 0x50
    ea12:	9915      	ldr	r1, [sp, #84]	; 0x54
    ea14:	425d      	negs	r5, r3
    ea16:	230f      	movs	r3, #15
    ea18:	4aca      	ldr	r2, [pc, #808]	; (ed44 <_dtoa_r+0x6c8>)
    ea1a:	402b      	ands	r3, r5
    ea1c:	00db      	lsls	r3, r3, #3
    ea1e:	18d3      	adds	r3, r2, r3
    ea20:	681a      	ldr	r2, [r3, #0]
    ea22:	685b      	ldr	r3, [r3, #4]
    ea24:	f7fc ff52 	bl	b8cc <__aeabi_dmul>
    ea28:	2300      	movs	r3, #0
    ea2a:	9006      	str	r0, [sp, #24]
    ea2c:	9107      	str	r1, [sp, #28]
    ea2e:	4ec6      	ldr	r6, [pc, #792]	; (ed48 <_dtoa_r+0x6cc>)
    ea30:	112d      	asrs	r5, r5, #4
    ea32:	2d00      	cmp	r5, #0
    ea34:	d000      	beq.n	ea38 <_dtoa_r+0x3bc>
    ea36:	e08c      	b.n	eb52 <_dtoa_r+0x4d6>
    ea38:	2b00      	cmp	r3, #0
    ea3a:	d000      	beq.n	ea3e <_dtoa_r+0x3c2>
    ea3c:	e781      	b.n	e942 <_dtoa_r+0x2c6>
    ea3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ea40:	2b00      	cmp	r3, #0
    ea42:	d100      	bne.n	ea46 <_dtoa_r+0x3ca>
    ea44:	e091      	b.n	eb6a <_dtoa_r+0x4ee>
    ea46:	9a06      	ldr	r2, [sp, #24]
    ea48:	9b07      	ldr	r3, [sp, #28]
    ea4a:	9210      	str	r2, [sp, #64]	; 0x40
    ea4c:	9311      	str	r3, [sp, #68]	; 0x44
    ea4e:	9810      	ldr	r0, [sp, #64]	; 0x40
    ea50:	9911      	ldr	r1, [sp, #68]	; 0x44
    ea52:	2200      	movs	r2, #0
    ea54:	4bbd      	ldr	r3, [pc, #756]	; (ed4c <_dtoa_r+0x6d0>)
    ea56:	f7fb f851 	bl	9afc <__aeabi_dcmplt>
    ea5a:	2800      	cmp	r0, #0
    ea5c:	d100      	bne.n	ea60 <_dtoa_r+0x3e4>
    ea5e:	e084      	b.n	eb6a <_dtoa_r+0x4ee>
    ea60:	2f00      	cmp	r7, #0
    ea62:	d100      	bne.n	ea66 <_dtoa_r+0x3ea>
    ea64:	e081      	b.n	eb6a <_dtoa_r+0x4ee>
    ea66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ea68:	2b00      	cmp	r3, #0
    ea6a:	dd3e      	ble.n	eaea <_dtoa_r+0x46e>
    ea6c:	9810      	ldr	r0, [sp, #64]	; 0x40
    ea6e:	9911      	ldr	r1, [sp, #68]	; 0x44
    ea70:	9b03      	ldr	r3, [sp, #12]
    ea72:	2200      	movs	r2, #0
    ea74:	1e5e      	subs	r6, r3, #1
    ea76:	4bb6      	ldr	r3, [pc, #728]	; (ed50 <_dtoa_r+0x6d4>)
    ea78:	f7fc ff28 	bl	b8cc <__aeabi_dmul>
    ea7c:	9006      	str	r0, [sp, #24]
    ea7e:	9107      	str	r1, [sp, #28]
    ea80:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    ea82:	3401      	adds	r4, #1
    ea84:	0020      	movs	r0, r4
    ea86:	f7fd fd0b 	bl	c4a0 <__aeabi_i2d>
    ea8a:	9a06      	ldr	r2, [sp, #24]
    ea8c:	9b07      	ldr	r3, [sp, #28]
    ea8e:	f7fc ff1d 	bl	b8cc <__aeabi_dmul>
    ea92:	2200      	movs	r2, #0
    ea94:	4baf      	ldr	r3, [pc, #700]	; (ed54 <_dtoa_r+0x6d8>)
    ea96:	f7fb ffd5 	bl	aa44 <__aeabi_dadd>
    ea9a:	9012      	str	r0, [sp, #72]	; 0x48
    ea9c:	9113      	str	r1, [sp, #76]	; 0x4c
    ea9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eaa0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    eaa2:	4aad      	ldr	r2, [pc, #692]	; (ed58 <_dtoa_r+0x6dc>)
    eaa4:	9310      	str	r3, [sp, #64]	; 0x40
    eaa6:	9411      	str	r4, [sp, #68]	; 0x44
    eaa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eaaa:	189c      	adds	r4, r3, r2
    eaac:	9411      	str	r4, [sp, #68]	; 0x44
    eaae:	2d00      	cmp	r5, #0
    eab0:	d15e      	bne.n	eb70 <_dtoa_r+0x4f4>
    eab2:	9806      	ldr	r0, [sp, #24]
    eab4:	9907      	ldr	r1, [sp, #28]
    eab6:	2200      	movs	r2, #0
    eab8:	4ba8      	ldr	r3, [pc, #672]	; (ed5c <_dtoa_r+0x6e0>)
    eaba:	f7fd f987 	bl	bdcc <__aeabi_dsub>
    eabe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eac0:	0023      	movs	r3, r4
    eac2:	9006      	str	r0, [sp, #24]
    eac4:	9107      	str	r1, [sp, #28]
    eac6:	f7fb f82d 	bl	9b24 <__aeabi_dcmpgt>
    eaca:	2800      	cmp	r0, #0
    eacc:	d000      	beq.n	ead0 <_dtoa_r+0x454>
    eace:	e301      	b.n	f0d4 <_dtoa_r+0xa58>
    ead0:	48a3      	ldr	r0, [pc, #652]	; (ed60 <_dtoa_r+0x6e4>)
    ead2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ead4:	4684      	mov	ip, r0
    ead6:	4461      	add	r1, ip
    ead8:	000b      	movs	r3, r1
    eada:	9806      	ldr	r0, [sp, #24]
    eadc:	9907      	ldr	r1, [sp, #28]
    eade:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eae0:	f7fb f80c 	bl	9afc <__aeabi_dcmplt>
    eae4:	2800      	cmp	r0, #0
    eae6:	d000      	beq.n	eaea <_dtoa_r+0x46e>
    eae8:	e2e8      	b.n	f0bc <_dtoa_r+0xa40>
    eaea:	9b14      	ldr	r3, [sp, #80]	; 0x50
    eaec:	9c15      	ldr	r4, [sp, #84]	; 0x54
    eaee:	9306      	str	r3, [sp, #24]
    eaf0:	9407      	str	r4, [sp, #28]
    eaf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    eaf4:	2b00      	cmp	r3, #0
    eaf6:	da00      	bge.n	eafa <_dtoa_r+0x47e>
    eaf8:	e157      	b.n	edaa <_dtoa_r+0x72e>
    eafa:	9a03      	ldr	r2, [sp, #12]
    eafc:	2a0e      	cmp	r2, #14
    eafe:	dd00      	ble.n	eb02 <_dtoa_r+0x486>
    eb00:	e153      	b.n	edaa <_dtoa_r+0x72e>
    eb02:	4b90      	ldr	r3, [pc, #576]	; (ed44 <_dtoa_r+0x6c8>)
    eb04:	00d2      	lsls	r2, r2, #3
    eb06:	189b      	adds	r3, r3, r2
    eb08:	685c      	ldr	r4, [r3, #4]
    eb0a:	681b      	ldr	r3, [r3, #0]
    eb0c:	9308      	str	r3, [sp, #32]
    eb0e:	9409      	str	r4, [sp, #36]	; 0x24
    eb10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    eb12:	2b00      	cmp	r3, #0
    eb14:	db00      	blt.n	eb18 <_dtoa_r+0x49c>
    eb16:	e0ce      	b.n	ecb6 <_dtoa_r+0x63a>
    eb18:	2f00      	cmp	r7, #0
    eb1a:	dd00      	ble.n	eb1e <_dtoa_r+0x4a2>
    eb1c:	e0cb      	b.n	ecb6 <_dtoa_r+0x63a>
    eb1e:	d000      	beq.n	eb22 <_dtoa_r+0x4a6>
    eb20:	e2cf      	b.n	f0c2 <_dtoa_r+0xa46>
    eb22:	9808      	ldr	r0, [sp, #32]
    eb24:	9909      	ldr	r1, [sp, #36]	; 0x24
    eb26:	2200      	movs	r2, #0
    eb28:	4b8c      	ldr	r3, [pc, #560]	; (ed5c <_dtoa_r+0x6e0>)
    eb2a:	f7fc fecf 	bl	b8cc <__aeabi_dmul>
    eb2e:	9a06      	ldr	r2, [sp, #24]
    eb30:	9b07      	ldr	r3, [sp, #28]
    eb32:	f7fb f801 	bl	9b38 <__aeabi_dcmpge>
    eb36:	003e      	movs	r6, r7
    eb38:	9708      	str	r7, [sp, #32]
    eb3a:	2800      	cmp	r0, #0
    eb3c:	d000      	beq.n	eb40 <_dtoa_r+0x4c4>
    eb3e:	e2a4      	b.n	f08a <_dtoa_r+0xa0e>
    eb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eb42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eb44:	1c5d      	adds	r5, r3, #1
    eb46:	2331      	movs	r3, #49	; 0x31
    eb48:	7013      	strb	r3, [r2, #0]
    eb4a:	9b03      	ldr	r3, [sp, #12]
    eb4c:	3301      	adds	r3, #1
    eb4e:	9303      	str	r3, [sp, #12]
    eb50:	e29f      	b.n	f092 <_dtoa_r+0xa16>
    eb52:	2201      	movs	r2, #1
    eb54:	4215      	tst	r5, r2
    eb56:	d005      	beq.n	eb64 <_dtoa_r+0x4e8>
    eb58:	18a4      	adds	r4, r4, r2
    eb5a:	6832      	ldr	r2, [r6, #0]
    eb5c:	6873      	ldr	r3, [r6, #4]
    eb5e:	f7fc feb5 	bl	b8cc <__aeabi_dmul>
    eb62:	2301      	movs	r3, #1
    eb64:	106d      	asrs	r5, r5, #1
    eb66:	3608      	adds	r6, #8
    eb68:	e763      	b.n	ea32 <_dtoa_r+0x3b6>
    eb6a:	9e03      	ldr	r6, [sp, #12]
    eb6c:	003d      	movs	r5, r7
    eb6e:	e789      	b.n	ea84 <_dtoa_r+0x408>
    eb70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eb72:	1e69      	subs	r1, r5, #1
    eb74:	1952      	adds	r2, r2, r5
    eb76:	9217      	str	r2, [sp, #92]	; 0x5c
    eb78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    eb7a:	4b72      	ldr	r3, [pc, #456]	; (ed44 <_dtoa_r+0x6c8>)
    eb7c:	00c9      	lsls	r1, r1, #3
    eb7e:	2a00      	cmp	r2, #0
    eb80:	d04a      	beq.n	ec18 <_dtoa_r+0x59c>
    eb82:	185b      	adds	r3, r3, r1
    eb84:	681a      	ldr	r2, [r3, #0]
    eb86:	685b      	ldr	r3, [r3, #4]
    eb88:	2000      	movs	r0, #0
    eb8a:	4976      	ldr	r1, [pc, #472]	; (ed64 <_dtoa_r+0x6e8>)
    eb8c:	f7fc fa6a 	bl	b064 <__aeabi_ddiv>
    eb90:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eb92:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eb94:	f7fd f91a 	bl	bdcc <__aeabi_dsub>
    eb98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eb9a:	9010      	str	r0, [sp, #64]	; 0x40
    eb9c:	9111      	str	r1, [sp, #68]	; 0x44
    eb9e:	9312      	str	r3, [sp, #72]	; 0x48
    eba0:	9806      	ldr	r0, [sp, #24]
    eba2:	9907      	ldr	r1, [sp, #28]
    eba4:	f7fd fc48 	bl	c438 <__aeabi_d2iz>
    eba8:	0004      	movs	r4, r0
    ebaa:	f7fd fc79 	bl	c4a0 <__aeabi_i2d>
    ebae:	0002      	movs	r2, r0
    ebb0:	000b      	movs	r3, r1
    ebb2:	9806      	ldr	r0, [sp, #24]
    ebb4:	9907      	ldr	r1, [sp, #28]
    ebb6:	f7fd f909 	bl	bdcc <__aeabi_dsub>
    ebba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ebbc:	3430      	adds	r4, #48	; 0x30
    ebbe:	1c5d      	adds	r5, r3, #1
    ebc0:	701c      	strb	r4, [r3, #0]
    ebc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ebc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ebc6:	9006      	str	r0, [sp, #24]
    ebc8:	9107      	str	r1, [sp, #28]
    ebca:	f7fa ff97 	bl	9afc <__aeabi_dcmplt>
    ebce:	2800      	cmp	r0, #0
    ebd0:	d165      	bne.n	ec9e <_dtoa_r+0x622>
    ebd2:	9a06      	ldr	r2, [sp, #24]
    ebd4:	9b07      	ldr	r3, [sp, #28]
    ebd6:	2000      	movs	r0, #0
    ebd8:	495c      	ldr	r1, [pc, #368]	; (ed4c <_dtoa_r+0x6d0>)
    ebda:	f7fd f8f7 	bl	bdcc <__aeabi_dsub>
    ebde:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ebe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ebe2:	f7fa ff8b 	bl	9afc <__aeabi_dcmplt>
    ebe6:	2800      	cmp	r0, #0
    ebe8:	d000      	beq.n	ebec <_dtoa_r+0x570>
    ebea:	e0be      	b.n	ed6a <_dtoa_r+0x6ee>
    ebec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ebee:	429d      	cmp	r5, r3
    ebf0:	d100      	bne.n	ebf4 <_dtoa_r+0x578>
    ebf2:	e77a      	b.n	eaea <_dtoa_r+0x46e>
    ebf4:	9810      	ldr	r0, [sp, #64]	; 0x40
    ebf6:	9911      	ldr	r1, [sp, #68]	; 0x44
    ebf8:	2200      	movs	r2, #0
    ebfa:	4b55      	ldr	r3, [pc, #340]	; (ed50 <_dtoa_r+0x6d4>)
    ebfc:	f7fc fe66 	bl	b8cc <__aeabi_dmul>
    ec00:	2200      	movs	r2, #0
    ec02:	9010      	str	r0, [sp, #64]	; 0x40
    ec04:	9111      	str	r1, [sp, #68]	; 0x44
    ec06:	9806      	ldr	r0, [sp, #24]
    ec08:	9907      	ldr	r1, [sp, #28]
    ec0a:	4b51      	ldr	r3, [pc, #324]	; (ed50 <_dtoa_r+0x6d4>)
    ec0c:	f7fc fe5e 	bl	b8cc <__aeabi_dmul>
    ec10:	9512      	str	r5, [sp, #72]	; 0x48
    ec12:	9006      	str	r0, [sp, #24]
    ec14:	9107      	str	r1, [sp, #28]
    ec16:	e7c3      	b.n	eba0 <_dtoa_r+0x524>
    ec18:	1859      	adds	r1, r3, r1
    ec1a:	6808      	ldr	r0, [r1, #0]
    ec1c:	6849      	ldr	r1, [r1, #4]
    ec1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ec20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec22:	f7fc fe53 	bl	b8cc <__aeabi_dmul>
    ec26:	9010      	str	r0, [sp, #64]	; 0x40
    ec28:	9111      	str	r1, [sp, #68]	; 0x44
    ec2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ec2c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    ec2e:	9806      	ldr	r0, [sp, #24]
    ec30:	9907      	ldr	r1, [sp, #28]
    ec32:	f7fd fc01 	bl	c438 <__aeabi_d2iz>
    ec36:	9012      	str	r0, [sp, #72]	; 0x48
    ec38:	f7fd fc32 	bl	c4a0 <__aeabi_i2d>
    ec3c:	0002      	movs	r2, r0
    ec3e:	000b      	movs	r3, r1
    ec40:	9806      	ldr	r0, [sp, #24]
    ec42:	9907      	ldr	r1, [sp, #28]
    ec44:	f7fd f8c2 	bl	bdcc <__aeabi_dsub>
    ec48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ec4a:	9006      	str	r0, [sp, #24]
    ec4c:	9107      	str	r1, [sp, #28]
    ec4e:	3330      	adds	r3, #48	; 0x30
    ec50:	7023      	strb	r3, [r4, #0]
    ec52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ec54:	3401      	adds	r4, #1
    ec56:	2200      	movs	r2, #0
    ec58:	42a3      	cmp	r3, r4
    ec5a:	d124      	bne.n	eca6 <_dtoa_r+0x62a>
    ec5c:	4b41      	ldr	r3, [pc, #260]	; (ed64 <_dtoa_r+0x6e8>)
    ec5e:	9810      	ldr	r0, [sp, #64]	; 0x40
    ec60:	9911      	ldr	r1, [sp, #68]	; 0x44
    ec62:	f7fb feef 	bl	aa44 <__aeabi_dadd>
    ec66:	0002      	movs	r2, r0
    ec68:	000b      	movs	r3, r1
    ec6a:	9806      	ldr	r0, [sp, #24]
    ec6c:	9907      	ldr	r1, [sp, #28]
    ec6e:	f7fa ff59 	bl	9b24 <__aeabi_dcmpgt>
    ec72:	2800      	cmp	r0, #0
    ec74:	d000      	beq.n	ec78 <_dtoa_r+0x5fc>
    ec76:	e078      	b.n	ed6a <_dtoa_r+0x6ee>
    ec78:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ec7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec7c:	2000      	movs	r0, #0
    ec7e:	4939      	ldr	r1, [pc, #228]	; (ed64 <_dtoa_r+0x6e8>)
    ec80:	f7fd f8a4 	bl	bdcc <__aeabi_dsub>
    ec84:	0002      	movs	r2, r0
    ec86:	000b      	movs	r3, r1
    ec88:	9806      	ldr	r0, [sp, #24]
    ec8a:	9907      	ldr	r1, [sp, #28]
    ec8c:	f7fa ff36 	bl	9afc <__aeabi_dcmplt>
    ec90:	2800      	cmp	r0, #0
    ec92:	d100      	bne.n	ec96 <_dtoa_r+0x61a>
    ec94:	e729      	b.n	eaea <_dtoa_r+0x46e>
    ec96:	1e6b      	subs	r3, r5, #1
    ec98:	781a      	ldrb	r2, [r3, #0]
    ec9a:	2a30      	cmp	r2, #48	; 0x30
    ec9c:	d001      	beq.n	eca2 <_dtoa_r+0x626>
    ec9e:	9603      	str	r6, [sp, #12]
    eca0:	e03f      	b.n	ed22 <_dtoa_r+0x6a6>
    eca2:	001d      	movs	r5, r3
    eca4:	e7f7      	b.n	ec96 <_dtoa_r+0x61a>
    eca6:	9806      	ldr	r0, [sp, #24]
    eca8:	9907      	ldr	r1, [sp, #28]
    ecaa:	4b29      	ldr	r3, [pc, #164]	; (ed50 <_dtoa_r+0x6d4>)
    ecac:	f7fc fe0e 	bl	b8cc <__aeabi_dmul>
    ecb0:	9006      	str	r0, [sp, #24]
    ecb2:	9107      	str	r1, [sp, #28]
    ecb4:	e7bb      	b.n	ec2e <_dtoa_r+0x5b2>
    ecb6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    ecb8:	9a08      	ldr	r2, [sp, #32]
    ecba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ecbc:	9806      	ldr	r0, [sp, #24]
    ecbe:	9907      	ldr	r1, [sp, #28]
    ecc0:	f7fc f9d0 	bl	b064 <__aeabi_ddiv>
    ecc4:	f7fd fbb8 	bl	c438 <__aeabi_d2iz>
    ecc8:	0004      	movs	r4, r0
    ecca:	f7fd fbe9 	bl	c4a0 <__aeabi_i2d>
    ecce:	9a08      	ldr	r2, [sp, #32]
    ecd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ecd2:	f7fc fdfb 	bl	b8cc <__aeabi_dmul>
    ecd6:	000b      	movs	r3, r1
    ecd8:	0002      	movs	r2, r0
    ecda:	9806      	ldr	r0, [sp, #24]
    ecdc:	9907      	ldr	r1, [sp, #28]
    ecde:	f7fd f875 	bl	bdcc <__aeabi_dsub>
    ece2:	0023      	movs	r3, r4
    ece4:	3330      	adds	r3, #48	; 0x30
    ece6:	7033      	strb	r3, [r6, #0]
    ece8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ecea:	1c75      	adds	r5, r6, #1
    ecec:	1aeb      	subs	r3, r5, r3
    ecee:	429f      	cmp	r7, r3
    ecf0:	d14c      	bne.n	ed8c <_dtoa_r+0x710>
    ecf2:	0002      	movs	r2, r0
    ecf4:	000b      	movs	r3, r1
    ecf6:	f7fb fea5 	bl	aa44 <__aeabi_dadd>
    ecfa:	0006      	movs	r6, r0
    ecfc:	000f      	movs	r7, r1
    ecfe:	0002      	movs	r2, r0
    ed00:	000b      	movs	r3, r1
    ed02:	9808      	ldr	r0, [sp, #32]
    ed04:	9909      	ldr	r1, [sp, #36]	; 0x24
    ed06:	f7fa fef9 	bl	9afc <__aeabi_dcmplt>
    ed0a:	2800      	cmp	r0, #0
    ed0c:	d12c      	bne.n	ed68 <_dtoa_r+0x6ec>
    ed0e:	9808      	ldr	r0, [sp, #32]
    ed10:	9909      	ldr	r1, [sp, #36]	; 0x24
    ed12:	0032      	movs	r2, r6
    ed14:	003b      	movs	r3, r7
    ed16:	f7fa feeb 	bl	9af0 <__aeabi_dcmpeq>
    ed1a:	2800      	cmp	r0, #0
    ed1c:	d001      	beq.n	ed22 <_dtoa_r+0x6a6>
    ed1e:	07e3      	lsls	r3, r4, #31
    ed20:	d422      	bmi.n	ed68 <_dtoa_r+0x6ec>
    ed22:	9905      	ldr	r1, [sp, #20]
    ed24:	9804      	ldr	r0, [sp, #16]
    ed26:	f000 fd22 	bl	f76e <_Bfree>
    ed2a:	2300      	movs	r3, #0
    ed2c:	702b      	strb	r3, [r5, #0]
    ed2e:	9b03      	ldr	r3, [sp, #12]
    ed30:	9a24      	ldr	r2, [sp, #144]	; 0x90
    ed32:	3301      	adds	r3, #1
    ed34:	6013      	str	r3, [r2, #0]
    ed36:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ed38:	2b00      	cmp	r3, #0
    ed3a:	d100      	bne.n	ed3e <_dtoa_r+0x6c2>
    ed3c:	e275      	b.n	f22a <_dtoa_r+0xbae>
    ed3e:	601d      	str	r5, [r3, #0]
    ed40:	e273      	b.n	f22a <_dtoa_r+0xbae>
    ed42:	46c0      	nop			; (mov r8, r8)
    ed44:	00012bf0 	.word	0x00012bf0
    ed48:	00012bc8 	.word	0x00012bc8
    ed4c:	3ff00000 	.word	0x3ff00000
    ed50:	40240000 	.word	0x40240000
    ed54:	401c0000 	.word	0x401c0000
    ed58:	fcc00000 	.word	0xfcc00000
    ed5c:	40140000 	.word	0x40140000
    ed60:	7cc00000 	.word	0x7cc00000
    ed64:	3fe00000 	.word	0x3fe00000
    ed68:	9e03      	ldr	r6, [sp, #12]
    ed6a:	1e6b      	subs	r3, r5, #1
    ed6c:	781a      	ldrb	r2, [r3, #0]
    ed6e:	2a39      	cmp	r2, #57	; 0x39
    ed70:	d106      	bne.n	ed80 <_dtoa_r+0x704>
    ed72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ed74:	429a      	cmp	r2, r3
    ed76:	d107      	bne.n	ed88 <_dtoa_r+0x70c>
    ed78:	2330      	movs	r3, #48	; 0x30
    ed7a:	7013      	strb	r3, [r2, #0]
    ed7c:	0013      	movs	r3, r2
    ed7e:	3601      	adds	r6, #1
    ed80:	781a      	ldrb	r2, [r3, #0]
    ed82:	3201      	adds	r2, #1
    ed84:	701a      	strb	r2, [r3, #0]
    ed86:	e78a      	b.n	ec9e <_dtoa_r+0x622>
    ed88:	001d      	movs	r5, r3
    ed8a:	e7ee      	b.n	ed6a <_dtoa_r+0x6ee>
    ed8c:	2200      	movs	r2, #0
    ed8e:	4bcf      	ldr	r3, [pc, #828]	; (f0cc <_dtoa_r+0xa50>)
    ed90:	f7fc fd9c 	bl	b8cc <__aeabi_dmul>
    ed94:	2200      	movs	r2, #0
    ed96:	2300      	movs	r3, #0
    ed98:	9006      	str	r0, [sp, #24]
    ed9a:	9107      	str	r1, [sp, #28]
    ed9c:	002e      	movs	r6, r5
    ed9e:	f7fa fea7 	bl	9af0 <__aeabi_dcmpeq>
    eda2:	2800      	cmp	r0, #0
    eda4:	d100      	bne.n	eda8 <_dtoa_r+0x72c>
    eda6:	e787      	b.n	ecb8 <_dtoa_r+0x63c>
    eda8:	e7bb      	b.n	ed22 <_dtoa_r+0x6a6>
    edaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    edac:	2a00      	cmp	r2, #0
    edae:	d100      	bne.n	edb2 <_dtoa_r+0x736>
    edb0:	e087      	b.n	eec2 <_dtoa_r+0x846>
    edb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    edb4:	2a01      	cmp	r2, #1
    edb6:	dc6e      	bgt.n	ee96 <_dtoa_r+0x81a>
    edb8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    edba:	2a00      	cmp	r2, #0
    edbc:	d067      	beq.n	ee8e <_dtoa_r+0x812>
    edbe:	4ac4      	ldr	r2, [pc, #784]	; (f0d0 <_dtoa_r+0xa54>)
    edc0:	189b      	adds	r3, r3, r2
    edc2:	9d08      	ldr	r5, [sp, #32]
    edc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    edc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    edc8:	2101      	movs	r1, #1
    edca:	18d2      	adds	r2, r2, r3
    edcc:	920b      	str	r2, [sp, #44]	; 0x2c
    edce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    edd0:	9804      	ldr	r0, [sp, #16]
    edd2:	18d3      	adds	r3, r2, r3
    edd4:	930c      	str	r3, [sp, #48]	; 0x30
    edd6:	f000 fd68 	bl	f8aa <__i2b>
    edda:	0006      	movs	r6, r0
    eddc:	2c00      	cmp	r4, #0
    edde:	dd0e      	ble.n	edfe <_dtoa_r+0x782>
    ede0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ede2:	2b00      	cmp	r3, #0
    ede4:	dd0b      	ble.n	edfe <_dtoa_r+0x782>
    ede6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ede8:	0023      	movs	r3, r4
    edea:	4294      	cmp	r4, r2
    edec:	dd00      	ble.n	edf0 <_dtoa_r+0x774>
    edee:	0013      	movs	r3, r2
    edf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    edf2:	1ae4      	subs	r4, r4, r3
    edf4:	1ad2      	subs	r2, r2, r3
    edf6:	920b      	str	r2, [sp, #44]	; 0x2c
    edf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    edfa:	1ad3      	subs	r3, r2, r3
    edfc:	930c      	str	r3, [sp, #48]	; 0x30
    edfe:	9b08      	ldr	r3, [sp, #32]
    ee00:	2b00      	cmp	r3, #0
    ee02:	d01e      	beq.n	ee42 <_dtoa_r+0x7c6>
    ee04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee06:	2b00      	cmp	r3, #0
    ee08:	d05f      	beq.n	eeca <_dtoa_r+0x84e>
    ee0a:	2d00      	cmp	r5, #0
    ee0c:	dd11      	ble.n	ee32 <_dtoa_r+0x7b6>
    ee0e:	0031      	movs	r1, r6
    ee10:	002a      	movs	r2, r5
    ee12:	9804      	ldr	r0, [sp, #16]
    ee14:	f000 fde2 	bl	f9dc <__pow5mult>
    ee18:	9a05      	ldr	r2, [sp, #20]
    ee1a:	0001      	movs	r1, r0
    ee1c:	0006      	movs	r6, r0
    ee1e:	9804      	ldr	r0, [sp, #16]
    ee20:	f000 fd4c 	bl	f8bc <__multiply>
    ee24:	9905      	ldr	r1, [sp, #20]
    ee26:	9010      	str	r0, [sp, #64]	; 0x40
    ee28:	9804      	ldr	r0, [sp, #16]
    ee2a:	f000 fca0 	bl	f76e <_Bfree>
    ee2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ee30:	9305      	str	r3, [sp, #20]
    ee32:	9b08      	ldr	r3, [sp, #32]
    ee34:	1b5a      	subs	r2, r3, r5
    ee36:	d004      	beq.n	ee42 <_dtoa_r+0x7c6>
    ee38:	9905      	ldr	r1, [sp, #20]
    ee3a:	9804      	ldr	r0, [sp, #16]
    ee3c:	f000 fdce 	bl	f9dc <__pow5mult>
    ee40:	9005      	str	r0, [sp, #20]
    ee42:	2101      	movs	r1, #1
    ee44:	9804      	ldr	r0, [sp, #16]
    ee46:	f000 fd30 	bl	f8aa <__i2b>
    ee4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ee4c:	9008      	str	r0, [sp, #32]
    ee4e:	2b00      	cmp	r3, #0
    ee50:	dd3d      	ble.n	eece <_dtoa_r+0x852>
    ee52:	001a      	movs	r2, r3
    ee54:	0001      	movs	r1, r0
    ee56:	9804      	ldr	r0, [sp, #16]
    ee58:	f000 fdc0 	bl	f9dc <__pow5mult>
    ee5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ee5e:	9008      	str	r0, [sp, #32]
    ee60:	2500      	movs	r5, #0
    ee62:	2b01      	cmp	r3, #1
    ee64:	dc3b      	bgt.n	eede <_dtoa_r+0x862>
    ee66:	2500      	movs	r5, #0
    ee68:	9b06      	ldr	r3, [sp, #24]
    ee6a:	42ab      	cmp	r3, r5
    ee6c:	d133      	bne.n	eed6 <_dtoa_r+0x85a>
    ee6e:	9b07      	ldr	r3, [sp, #28]
    ee70:	031b      	lsls	r3, r3, #12
    ee72:	42ab      	cmp	r3, r5
    ee74:	d12f      	bne.n	eed6 <_dtoa_r+0x85a>
    ee76:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ee78:	9a07      	ldr	r2, [sp, #28]
    ee7a:	4213      	tst	r3, r2
    ee7c:	d02b      	beq.n	eed6 <_dtoa_r+0x85a>
    ee7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ee80:	3501      	adds	r5, #1
    ee82:	3301      	adds	r3, #1
    ee84:	930b      	str	r3, [sp, #44]	; 0x2c
    ee86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ee88:	3301      	adds	r3, #1
    ee8a:	930c      	str	r3, [sp, #48]	; 0x30
    ee8c:	e023      	b.n	eed6 <_dtoa_r+0x85a>
    ee8e:	2336      	movs	r3, #54	; 0x36
    ee90:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    ee92:	1a9b      	subs	r3, r3, r2
    ee94:	e795      	b.n	edc2 <_dtoa_r+0x746>
    ee96:	9b08      	ldr	r3, [sp, #32]
    ee98:	1e7d      	subs	r5, r7, #1
    ee9a:	42ab      	cmp	r3, r5
    ee9c:	db06      	blt.n	eeac <_dtoa_r+0x830>
    ee9e:	1b5d      	subs	r5, r3, r5
    eea0:	2f00      	cmp	r7, #0
    eea2:	da0b      	bge.n	eebc <_dtoa_r+0x840>
    eea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eea6:	1bdc      	subs	r4, r3, r7
    eea8:	2300      	movs	r3, #0
    eeaa:	e78c      	b.n	edc6 <_dtoa_r+0x74a>
    eeac:	9b08      	ldr	r3, [sp, #32]
    eeae:	9508      	str	r5, [sp, #32]
    eeb0:	1aea      	subs	r2, r5, r3
    eeb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eeb4:	2500      	movs	r5, #0
    eeb6:	189b      	adds	r3, r3, r2
    eeb8:	930f      	str	r3, [sp, #60]	; 0x3c
    eeba:	e7f1      	b.n	eea0 <_dtoa_r+0x824>
    eebc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    eebe:	003b      	movs	r3, r7
    eec0:	e781      	b.n	edc6 <_dtoa_r+0x74a>
    eec2:	9d08      	ldr	r5, [sp, #32]
    eec4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    eec6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    eec8:	e788      	b.n	eddc <_dtoa_r+0x760>
    eeca:	9a08      	ldr	r2, [sp, #32]
    eecc:	e7b4      	b.n	ee38 <_dtoa_r+0x7bc>
    eece:	9b22      	ldr	r3, [sp, #136]	; 0x88
    eed0:	2500      	movs	r5, #0
    eed2:	2b01      	cmp	r3, #1
    eed4:	ddc7      	ble.n	ee66 <_dtoa_r+0x7ea>
    eed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eed8:	2001      	movs	r0, #1
    eeda:	2b00      	cmp	r3, #0
    eedc:	d00b      	beq.n	eef6 <_dtoa_r+0x87a>
    eede:	9b08      	ldr	r3, [sp, #32]
    eee0:	9a08      	ldr	r2, [sp, #32]
    eee2:	691b      	ldr	r3, [r3, #16]
    eee4:	930f      	str	r3, [sp, #60]	; 0x3c
    eee6:	3303      	adds	r3, #3
    eee8:	009b      	lsls	r3, r3, #2
    eeea:	18d3      	adds	r3, r2, r3
    eeec:	6858      	ldr	r0, [r3, #4]
    eeee:	f000 fc93 	bl	f818 <__hi0bits>
    eef2:	2320      	movs	r3, #32
    eef4:	1a18      	subs	r0, r3, r0
    eef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eef8:	18c0      	adds	r0, r0, r3
    eefa:	231f      	movs	r3, #31
    eefc:	4018      	ands	r0, r3
    eefe:	d100      	bne.n	ef02 <_dtoa_r+0x886>
    ef00:	e0ab      	b.n	f05a <_dtoa_r+0x9de>
    ef02:	3301      	adds	r3, #1
    ef04:	1a1b      	subs	r3, r3, r0
    ef06:	2b04      	cmp	r3, #4
    ef08:	dc00      	bgt.n	ef0c <_dtoa_r+0x890>
    ef0a:	e09b      	b.n	f044 <_dtoa_r+0x9c8>
    ef0c:	231c      	movs	r3, #28
    ef0e:	1a18      	subs	r0, r3, r0
    ef10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef12:	1824      	adds	r4, r4, r0
    ef14:	181b      	adds	r3, r3, r0
    ef16:	930b      	str	r3, [sp, #44]	; 0x2c
    ef18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef1a:	181b      	adds	r3, r3, r0
    ef1c:	930c      	str	r3, [sp, #48]	; 0x30
    ef1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef20:	2b00      	cmp	r3, #0
    ef22:	dd05      	ble.n	ef30 <_dtoa_r+0x8b4>
    ef24:	001a      	movs	r2, r3
    ef26:	9905      	ldr	r1, [sp, #20]
    ef28:	9804      	ldr	r0, [sp, #16]
    ef2a:	f000 fda9 	bl	fa80 <__lshift>
    ef2e:	9005      	str	r0, [sp, #20]
    ef30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef32:	2b00      	cmp	r3, #0
    ef34:	dd05      	ble.n	ef42 <_dtoa_r+0x8c6>
    ef36:	001a      	movs	r2, r3
    ef38:	9908      	ldr	r1, [sp, #32]
    ef3a:	9804      	ldr	r0, [sp, #16]
    ef3c:	f000 fda0 	bl	fa80 <__lshift>
    ef40:	9008      	str	r0, [sp, #32]
    ef42:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ef44:	2b00      	cmp	r3, #0
    ef46:	d100      	bne.n	ef4a <_dtoa_r+0x8ce>
    ef48:	e089      	b.n	f05e <_dtoa_r+0x9e2>
    ef4a:	9908      	ldr	r1, [sp, #32]
    ef4c:	9805      	ldr	r0, [sp, #20]
    ef4e:	f000 fde8 	bl	fb22 <__mcmp>
    ef52:	2800      	cmp	r0, #0
    ef54:	db00      	blt.n	ef58 <_dtoa_r+0x8dc>
    ef56:	e082      	b.n	f05e <_dtoa_r+0x9e2>
    ef58:	9b03      	ldr	r3, [sp, #12]
    ef5a:	220a      	movs	r2, #10
    ef5c:	3b01      	subs	r3, #1
    ef5e:	9303      	str	r3, [sp, #12]
    ef60:	9905      	ldr	r1, [sp, #20]
    ef62:	2300      	movs	r3, #0
    ef64:	9804      	ldr	r0, [sp, #16]
    ef66:	f000 fc1b 	bl	f7a0 <__multadd>
    ef6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef6c:	9005      	str	r0, [sp, #20]
    ef6e:	2b00      	cmp	r3, #0
    ef70:	d100      	bne.n	ef74 <_dtoa_r+0x8f8>
    ef72:	e15d      	b.n	f230 <_dtoa_r+0xbb4>
    ef74:	2300      	movs	r3, #0
    ef76:	0031      	movs	r1, r6
    ef78:	220a      	movs	r2, #10
    ef7a:	9804      	ldr	r0, [sp, #16]
    ef7c:	f000 fc10 	bl	f7a0 <__multadd>
    ef80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ef82:	0006      	movs	r6, r0
    ef84:	2b00      	cmp	r3, #0
    ef86:	dc02      	bgt.n	ef8e <_dtoa_r+0x912>
    ef88:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ef8a:	2b02      	cmp	r3, #2
    ef8c:	dc6d      	bgt.n	f06a <_dtoa_r+0x9ee>
    ef8e:	2c00      	cmp	r4, #0
    ef90:	dd05      	ble.n	ef9e <_dtoa_r+0x922>
    ef92:	0031      	movs	r1, r6
    ef94:	0022      	movs	r2, r4
    ef96:	9804      	ldr	r0, [sp, #16]
    ef98:	f000 fd72 	bl	fa80 <__lshift>
    ef9c:	0006      	movs	r6, r0
    ef9e:	0030      	movs	r0, r6
    efa0:	2d00      	cmp	r5, #0
    efa2:	d011      	beq.n	efc8 <_dtoa_r+0x94c>
    efa4:	6871      	ldr	r1, [r6, #4]
    efa6:	9804      	ldr	r0, [sp, #16]
    efa8:	f000 fba9 	bl	f6fe <_Balloc>
    efac:	0031      	movs	r1, r6
    efae:	0004      	movs	r4, r0
    efb0:	6933      	ldr	r3, [r6, #16]
    efb2:	310c      	adds	r1, #12
    efb4:	1c9a      	adds	r2, r3, #2
    efb6:	0092      	lsls	r2, r2, #2
    efb8:	300c      	adds	r0, #12
    efba:	f7fd fd62 	bl	ca82 <memcpy>
    efbe:	2201      	movs	r2, #1
    efc0:	0021      	movs	r1, r4
    efc2:	9804      	ldr	r0, [sp, #16]
    efc4:	f000 fd5c 	bl	fa80 <__lshift>
    efc8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    efca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    efcc:	3f01      	subs	r7, #1
    efce:	930b      	str	r3, [sp, #44]	; 0x2c
    efd0:	19db      	adds	r3, r3, r7
    efd2:	0037      	movs	r7, r6
    efd4:	0006      	movs	r6, r0
    efd6:	930f      	str	r3, [sp, #60]	; 0x3c
    efd8:	9908      	ldr	r1, [sp, #32]
    efda:	9805      	ldr	r0, [sp, #20]
    efdc:	f7ff fac9 	bl	e572 <quorem>
    efe0:	0039      	movs	r1, r7
    efe2:	900d      	str	r0, [sp, #52]	; 0x34
    efe4:	0004      	movs	r4, r0
    efe6:	9805      	ldr	r0, [sp, #20]
    efe8:	f000 fd9b 	bl	fb22 <__mcmp>
    efec:	0032      	movs	r2, r6
    efee:	900e      	str	r0, [sp, #56]	; 0x38
    eff0:	9908      	ldr	r1, [sp, #32]
    eff2:	9804      	ldr	r0, [sp, #16]
    eff4:	f000 fdae 	bl	fb54 <__mdiff>
    eff8:	2301      	movs	r3, #1
    effa:	930c      	str	r3, [sp, #48]	; 0x30
    effc:	68c3      	ldr	r3, [r0, #12]
    effe:	3430      	adds	r4, #48	; 0x30
    f000:	0005      	movs	r5, r0
    f002:	2b00      	cmp	r3, #0
    f004:	d104      	bne.n	f010 <_dtoa_r+0x994>
    f006:	0001      	movs	r1, r0
    f008:	9805      	ldr	r0, [sp, #20]
    f00a:	f000 fd8a 	bl	fb22 <__mcmp>
    f00e:	900c      	str	r0, [sp, #48]	; 0x30
    f010:	0029      	movs	r1, r5
    f012:	9804      	ldr	r0, [sp, #16]
    f014:	f000 fbab 	bl	f76e <_Bfree>
    f018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f01a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    f01c:	4313      	orrs	r3, r2
    f01e:	d000      	beq.n	f022 <_dtoa_r+0x9a6>
    f020:	e089      	b.n	f136 <_dtoa_r+0xaba>
    f022:	9a06      	ldr	r2, [sp, #24]
    f024:	3301      	adds	r3, #1
    f026:	4213      	tst	r3, r2
    f028:	d000      	beq.n	f02c <_dtoa_r+0x9b0>
    f02a:	e084      	b.n	f136 <_dtoa_r+0xaba>
    f02c:	2c39      	cmp	r4, #57	; 0x39
    f02e:	d100      	bne.n	f032 <_dtoa_r+0x9b6>
    f030:	e0a3      	b.n	f17a <_dtoa_r+0xafe>
    f032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f034:	2b00      	cmp	r3, #0
    f036:	dd01      	ble.n	f03c <_dtoa_r+0x9c0>
    f038:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    f03a:	3431      	adds	r4, #49	; 0x31
    f03c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f03e:	1c5d      	adds	r5, r3, #1
    f040:	701c      	strb	r4, [r3, #0]
    f042:	e027      	b.n	f094 <_dtoa_r+0xa18>
    f044:	2b04      	cmp	r3, #4
    f046:	d100      	bne.n	f04a <_dtoa_r+0x9ce>
    f048:	e769      	b.n	ef1e <_dtoa_r+0x8a2>
    f04a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f04c:	331c      	adds	r3, #28
    f04e:	18d2      	adds	r2, r2, r3
    f050:	920b      	str	r2, [sp, #44]	; 0x2c
    f052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f054:	18e4      	adds	r4, r4, r3
    f056:	18d3      	adds	r3, r2, r3
    f058:	e760      	b.n	ef1c <_dtoa_r+0x8a0>
    f05a:	0003      	movs	r3, r0
    f05c:	e7f5      	b.n	f04a <_dtoa_r+0x9ce>
    f05e:	2f00      	cmp	r7, #0
    f060:	dc3c      	bgt.n	f0dc <_dtoa_r+0xa60>
    f062:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f064:	2b02      	cmp	r3, #2
    f066:	dd39      	ble.n	f0dc <_dtoa_r+0xa60>
    f068:	970d      	str	r7, [sp, #52]	; 0x34
    f06a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f06c:	2b00      	cmp	r3, #0
    f06e:	d10c      	bne.n	f08a <_dtoa_r+0xa0e>
    f070:	9908      	ldr	r1, [sp, #32]
    f072:	2205      	movs	r2, #5
    f074:	9804      	ldr	r0, [sp, #16]
    f076:	f000 fb93 	bl	f7a0 <__multadd>
    f07a:	9008      	str	r0, [sp, #32]
    f07c:	0001      	movs	r1, r0
    f07e:	9805      	ldr	r0, [sp, #20]
    f080:	f000 fd4f 	bl	fb22 <__mcmp>
    f084:	2800      	cmp	r0, #0
    f086:	dd00      	ble.n	f08a <_dtoa_r+0xa0e>
    f088:	e55a      	b.n	eb40 <_dtoa_r+0x4c4>
    f08a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f08c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f08e:	43db      	mvns	r3, r3
    f090:	9303      	str	r3, [sp, #12]
    f092:	2700      	movs	r7, #0
    f094:	9908      	ldr	r1, [sp, #32]
    f096:	9804      	ldr	r0, [sp, #16]
    f098:	f000 fb69 	bl	f76e <_Bfree>
    f09c:	2e00      	cmp	r6, #0
    f09e:	d100      	bne.n	f0a2 <_dtoa_r+0xa26>
    f0a0:	e63f      	b.n	ed22 <_dtoa_r+0x6a6>
    f0a2:	2f00      	cmp	r7, #0
    f0a4:	d005      	beq.n	f0b2 <_dtoa_r+0xa36>
    f0a6:	42b7      	cmp	r7, r6
    f0a8:	d003      	beq.n	f0b2 <_dtoa_r+0xa36>
    f0aa:	0039      	movs	r1, r7
    f0ac:	9804      	ldr	r0, [sp, #16]
    f0ae:	f000 fb5e 	bl	f76e <_Bfree>
    f0b2:	0031      	movs	r1, r6
    f0b4:	9804      	ldr	r0, [sp, #16]
    f0b6:	f000 fb5a 	bl	f76e <_Bfree>
    f0ba:	e632      	b.n	ed22 <_dtoa_r+0x6a6>
    f0bc:	9508      	str	r5, [sp, #32]
    f0be:	002e      	movs	r6, r5
    f0c0:	e7e3      	b.n	f08a <_dtoa_r+0xa0e>
    f0c2:	2300      	movs	r3, #0
    f0c4:	9308      	str	r3, [sp, #32]
    f0c6:	001e      	movs	r6, r3
    f0c8:	e7df      	b.n	f08a <_dtoa_r+0xa0e>
    f0ca:	46c0      	nop			; (mov r8, r8)
    f0cc:	40240000 	.word	0x40240000
    f0d0:	00000433 	.word	0x00000433
    f0d4:	9603      	str	r6, [sp, #12]
    f0d6:	9508      	str	r5, [sp, #32]
    f0d8:	002e      	movs	r6, r5
    f0da:	e531      	b.n	eb40 <_dtoa_r+0x4c4>
    f0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f0de:	970d      	str	r7, [sp, #52]	; 0x34
    f0e0:	2b00      	cmp	r3, #0
    f0e2:	d000      	beq.n	f0e6 <_dtoa_r+0xa6a>
    f0e4:	e753      	b.n	ef8e <_dtoa_r+0x912>
    f0e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f0e8:	9908      	ldr	r1, [sp, #32]
    f0ea:	9805      	ldr	r0, [sp, #20]
    f0ec:	f7ff fa41 	bl	e572 <quorem>
    f0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0f2:	3030      	adds	r0, #48	; 0x30
    f0f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f0f6:	7028      	strb	r0, [r5, #0]
    f0f8:	3501      	adds	r5, #1
    f0fa:	0004      	movs	r4, r0
    f0fc:	1aeb      	subs	r3, r5, r3
    f0fe:	429a      	cmp	r2, r3
    f100:	dc78      	bgt.n	f1f4 <_dtoa_r+0xb78>
    f102:	1e15      	subs	r5, r2, #0
    f104:	dc00      	bgt.n	f108 <_dtoa_r+0xa8c>
    f106:	2501      	movs	r5, #1
    f108:	2700      	movs	r7, #0
    f10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f10c:	195d      	adds	r5, r3, r5
    f10e:	9905      	ldr	r1, [sp, #20]
    f110:	2201      	movs	r2, #1
    f112:	9804      	ldr	r0, [sp, #16]
    f114:	f000 fcb4 	bl	fa80 <__lshift>
    f118:	9908      	ldr	r1, [sp, #32]
    f11a:	9005      	str	r0, [sp, #20]
    f11c:	f000 fd01 	bl	fb22 <__mcmp>
    f120:	2800      	cmp	r0, #0
    f122:	dc2f      	bgt.n	f184 <_dtoa_r+0xb08>
    f124:	d101      	bne.n	f12a <_dtoa_r+0xaae>
    f126:	07e3      	lsls	r3, r4, #31
    f128:	d42c      	bmi.n	f184 <_dtoa_r+0xb08>
    f12a:	1e6b      	subs	r3, r5, #1
    f12c:	781a      	ldrb	r2, [r3, #0]
    f12e:	2a30      	cmp	r2, #48	; 0x30
    f130:	d1b0      	bne.n	f094 <_dtoa_r+0xa18>
    f132:	001d      	movs	r5, r3
    f134:	e7f9      	b.n	f12a <_dtoa_r+0xaae>
    f136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f138:	2b00      	cmp	r3, #0
    f13a:	db07      	blt.n	f14c <_dtoa_r+0xad0>
    f13c:	001d      	movs	r5, r3
    f13e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f140:	431d      	orrs	r5, r3
    f142:	d126      	bne.n	f192 <_dtoa_r+0xb16>
    f144:	2301      	movs	r3, #1
    f146:	9a06      	ldr	r2, [sp, #24]
    f148:	4213      	tst	r3, r2
    f14a:	d122      	bne.n	f192 <_dtoa_r+0xb16>
    f14c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f14e:	2b00      	cmp	r3, #0
    f150:	dc00      	bgt.n	f154 <_dtoa_r+0xad8>
    f152:	e773      	b.n	f03c <_dtoa_r+0x9c0>
    f154:	9905      	ldr	r1, [sp, #20]
    f156:	2201      	movs	r2, #1
    f158:	9804      	ldr	r0, [sp, #16]
    f15a:	f000 fc91 	bl	fa80 <__lshift>
    f15e:	9908      	ldr	r1, [sp, #32]
    f160:	9005      	str	r0, [sp, #20]
    f162:	f000 fcde 	bl	fb22 <__mcmp>
    f166:	2800      	cmp	r0, #0
    f168:	dc04      	bgt.n	f174 <_dtoa_r+0xaf8>
    f16a:	d000      	beq.n	f16e <_dtoa_r+0xaf2>
    f16c:	e766      	b.n	f03c <_dtoa_r+0x9c0>
    f16e:	07e3      	lsls	r3, r4, #31
    f170:	d400      	bmi.n	f174 <_dtoa_r+0xaf8>
    f172:	e763      	b.n	f03c <_dtoa_r+0x9c0>
    f174:	2c39      	cmp	r4, #57	; 0x39
    f176:	d000      	beq.n	f17a <_dtoa_r+0xafe>
    f178:	e75e      	b.n	f038 <_dtoa_r+0x9bc>
    f17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f17c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f17e:	1c5d      	adds	r5, r3, #1
    f180:	2339      	movs	r3, #57	; 0x39
    f182:	7013      	strb	r3, [r2, #0]
    f184:	1e6b      	subs	r3, r5, #1
    f186:	781a      	ldrb	r2, [r3, #0]
    f188:	2a39      	cmp	r2, #57	; 0x39
    f18a:	d03b      	beq.n	f204 <_dtoa_r+0xb88>
    f18c:	3201      	adds	r2, #1
    f18e:	701a      	strb	r2, [r3, #0]
    f190:	e780      	b.n	f094 <_dtoa_r+0xa18>
    f192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f194:	3301      	adds	r3, #1
    f196:	930d      	str	r3, [sp, #52]	; 0x34
    f198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f19a:	2b00      	cmp	r3, #0
    f19c:	dd05      	ble.n	f1aa <_dtoa_r+0xb2e>
    f19e:	2c39      	cmp	r4, #57	; 0x39
    f1a0:	d0eb      	beq.n	f17a <_dtoa_r+0xafe>
    f1a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f1a4:	3401      	adds	r4, #1
    f1a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f1a8:	e74a      	b.n	f040 <_dtoa_r+0x9c4>
    f1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f1ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f1ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f1b0:	701c      	strb	r4, [r3, #0]
    f1b2:	4293      	cmp	r3, r2
    f1b4:	d0ab      	beq.n	f10e <_dtoa_r+0xa92>
    f1b6:	2300      	movs	r3, #0
    f1b8:	220a      	movs	r2, #10
    f1ba:	9905      	ldr	r1, [sp, #20]
    f1bc:	9804      	ldr	r0, [sp, #16]
    f1be:	f000 faef 	bl	f7a0 <__multadd>
    f1c2:	2300      	movs	r3, #0
    f1c4:	9005      	str	r0, [sp, #20]
    f1c6:	220a      	movs	r2, #10
    f1c8:	0039      	movs	r1, r7
    f1ca:	9804      	ldr	r0, [sp, #16]
    f1cc:	42b7      	cmp	r7, r6
    f1ce:	d106      	bne.n	f1de <_dtoa_r+0xb62>
    f1d0:	f000 fae6 	bl	f7a0 <__multadd>
    f1d4:	0007      	movs	r7, r0
    f1d6:	0006      	movs	r6, r0
    f1d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f1da:	930b      	str	r3, [sp, #44]	; 0x2c
    f1dc:	e6fc      	b.n	efd8 <_dtoa_r+0x95c>
    f1de:	f000 fadf 	bl	f7a0 <__multadd>
    f1e2:	0031      	movs	r1, r6
    f1e4:	0007      	movs	r7, r0
    f1e6:	2300      	movs	r3, #0
    f1e8:	220a      	movs	r2, #10
    f1ea:	9804      	ldr	r0, [sp, #16]
    f1ec:	f000 fad8 	bl	f7a0 <__multadd>
    f1f0:	0006      	movs	r6, r0
    f1f2:	e7f1      	b.n	f1d8 <_dtoa_r+0xb5c>
    f1f4:	2300      	movs	r3, #0
    f1f6:	220a      	movs	r2, #10
    f1f8:	9905      	ldr	r1, [sp, #20]
    f1fa:	9804      	ldr	r0, [sp, #16]
    f1fc:	f000 fad0 	bl	f7a0 <__multadd>
    f200:	9005      	str	r0, [sp, #20]
    f202:	e771      	b.n	f0e8 <_dtoa_r+0xa6c>
    f204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f206:	429a      	cmp	r2, r3
    f208:	d105      	bne.n	f216 <_dtoa_r+0xb9a>
    f20a:	9b03      	ldr	r3, [sp, #12]
    f20c:	3301      	adds	r3, #1
    f20e:	9303      	str	r3, [sp, #12]
    f210:	2331      	movs	r3, #49	; 0x31
    f212:	7013      	strb	r3, [r2, #0]
    f214:	e73e      	b.n	f094 <_dtoa_r+0xa18>
    f216:	001d      	movs	r5, r3
    f218:	e7b4      	b.n	f184 <_dtoa_r+0xb08>
    f21a:	4b0a      	ldr	r3, [pc, #40]	; (f244 <_dtoa_r+0xbc8>)
    f21c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f21e:	930a      	str	r3, [sp, #40]	; 0x28
    f220:	4b09      	ldr	r3, [pc, #36]	; (f248 <_dtoa_r+0xbcc>)
    f222:	2a00      	cmp	r2, #0
    f224:	d001      	beq.n	f22a <_dtoa_r+0xbae>
    f226:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f228:	6013      	str	r3, [r2, #0]
    f22a:	980a      	ldr	r0, [sp, #40]	; 0x28
    f22c:	b01d      	add	sp, #116	; 0x74
    f22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f232:	2b00      	cmp	r3, #0
    f234:	dd00      	ble.n	f238 <_dtoa_r+0xbbc>
    f236:	e756      	b.n	f0e6 <_dtoa_r+0xa6a>
    f238:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f23a:	2b02      	cmp	r3, #2
    f23c:	dc00      	bgt.n	f240 <_dtoa_r+0xbc4>
    f23e:	e752      	b.n	f0e6 <_dtoa_r+0xa6a>
    f240:	e713      	b.n	f06a <_dtoa_r+0x9ee>
    f242:	46c0      	nop			; (mov r8, r8)
    f244:	00012af8 	.word	0x00012af8
    f248:	00012b00 	.word	0x00012b00

0000f24c <__sflush_r>:
    f24c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f24e:	898a      	ldrh	r2, [r1, #12]
    f250:	0005      	movs	r5, r0
    f252:	000c      	movs	r4, r1
    f254:	0713      	lsls	r3, r2, #28
    f256:	d460      	bmi.n	f31a <__sflush_r+0xce>
    f258:	684b      	ldr	r3, [r1, #4]
    f25a:	2b00      	cmp	r3, #0
    f25c:	dc04      	bgt.n	f268 <__sflush_r+0x1c>
    f25e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    f260:	2b00      	cmp	r3, #0
    f262:	dc01      	bgt.n	f268 <__sflush_r+0x1c>
    f264:	2000      	movs	r0, #0
    f266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f268:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    f26a:	2f00      	cmp	r7, #0
    f26c:	d0fa      	beq.n	f264 <__sflush_r+0x18>
    f26e:	2300      	movs	r3, #0
    f270:	682e      	ldr	r6, [r5, #0]
    f272:	602b      	str	r3, [r5, #0]
    f274:	2380      	movs	r3, #128	; 0x80
    f276:	015b      	lsls	r3, r3, #5
    f278:	401a      	ands	r2, r3
    f27a:	d034      	beq.n	f2e6 <__sflush_r+0x9a>
    f27c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    f27e:	89a3      	ldrh	r3, [r4, #12]
    f280:	075b      	lsls	r3, r3, #29
    f282:	d506      	bpl.n	f292 <__sflush_r+0x46>
    f284:	6863      	ldr	r3, [r4, #4]
    f286:	1ac0      	subs	r0, r0, r3
    f288:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f28a:	2b00      	cmp	r3, #0
    f28c:	d001      	beq.n	f292 <__sflush_r+0x46>
    f28e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f290:	1ac0      	subs	r0, r0, r3
    f292:	0002      	movs	r2, r0
    f294:	6a21      	ldr	r1, [r4, #32]
    f296:	2300      	movs	r3, #0
    f298:	0028      	movs	r0, r5
    f29a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    f29c:	47b8      	blx	r7
    f29e:	89a1      	ldrh	r1, [r4, #12]
    f2a0:	1c43      	adds	r3, r0, #1
    f2a2:	d106      	bne.n	f2b2 <__sflush_r+0x66>
    f2a4:	682b      	ldr	r3, [r5, #0]
    f2a6:	2b1d      	cmp	r3, #29
    f2a8:	d831      	bhi.n	f30e <__sflush_r+0xc2>
    f2aa:	4a2c      	ldr	r2, [pc, #176]	; (f35c <__sflush_r+0x110>)
    f2ac:	40da      	lsrs	r2, r3
    f2ae:	07d3      	lsls	r3, r2, #31
    f2b0:	d52d      	bpl.n	f30e <__sflush_r+0xc2>
    f2b2:	2300      	movs	r3, #0
    f2b4:	6063      	str	r3, [r4, #4]
    f2b6:	6923      	ldr	r3, [r4, #16]
    f2b8:	6023      	str	r3, [r4, #0]
    f2ba:	04cb      	lsls	r3, r1, #19
    f2bc:	d505      	bpl.n	f2ca <__sflush_r+0x7e>
    f2be:	1c43      	adds	r3, r0, #1
    f2c0:	d102      	bne.n	f2c8 <__sflush_r+0x7c>
    f2c2:	682b      	ldr	r3, [r5, #0]
    f2c4:	2b00      	cmp	r3, #0
    f2c6:	d100      	bne.n	f2ca <__sflush_r+0x7e>
    f2c8:	6560      	str	r0, [r4, #84]	; 0x54
    f2ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f2cc:	602e      	str	r6, [r5, #0]
    f2ce:	2900      	cmp	r1, #0
    f2d0:	d0c8      	beq.n	f264 <__sflush_r+0x18>
    f2d2:	0023      	movs	r3, r4
    f2d4:	3344      	adds	r3, #68	; 0x44
    f2d6:	4299      	cmp	r1, r3
    f2d8:	d002      	beq.n	f2e0 <__sflush_r+0x94>
    f2da:	0028      	movs	r0, r5
    f2dc:	f7fd fe4a 	bl	cf74 <_free_r>
    f2e0:	2000      	movs	r0, #0
    f2e2:	6360      	str	r0, [r4, #52]	; 0x34
    f2e4:	e7bf      	b.n	f266 <__sflush_r+0x1a>
    f2e6:	2301      	movs	r3, #1
    f2e8:	6a21      	ldr	r1, [r4, #32]
    f2ea:	0028      	movs	r0, r5
    f2ec:	47b8      	blx	r7
    f2ee:	1c43      	adds	r3, r0, #1
    f2f0:	d1c5      	bne.n	f27e <__sflush_r+0x32>
    f2f2:	682b      	ldr	r3, [r5, #0]
    f2f4:	2b00      	cmp	r3, #0
    f2f6:	d0c2      	beq.n	f27e <__sflush_r+0x32>
    f2f8:	2b1d      	cmp	r3, #29
    f2fa:	d001      	beq.n	f300 <__sflush_r+0xb4>
    f2fc:	2b16      	cmp	r3, #22
    f2fe:	d101      	bne.n	f304 <__sflush_r+0xb8>
    f300:	602e      	str	r6, [r5, #0]
    f302:	e7af      	b.n	f264 <__sflush_r+0x18>
    f304:	2340      	movs	r3, #64	; 0x40
    f306:	89a2      	ldrh	r2, [r4, #12]
    f308:	4313      	orrs	r3, r2
    f30a:	81a3      	strh	r3, [r4, #12]
    f30c:	e7ab      	b.n	f266 <__sflush_r+0x1a>
    f30e:	2340      	movs	r3, #64	; 0x40
    f310:	430b      	orrs	r3, r1
    f312:	2001      	movs	r0, #1
    f314:	81a3      	strh	r3, [r4, #12]
    f316:	4240      	negs	r0, r0
    f318:	e7a5      	b.n	f266 <__sflush_r+0x1a>
    f31a:	690f      	ldr	r7, [r1, #16]
    f31c:	2f00      	cmp	r7, #0
    f31e:	d0a1      	beq.n	f264 <__sflush_r+0x18>
    f320:	680b      	ldr	r3, [r1, #0]
    f322:	600f      	str	r7, [r1, #0]
    f324:	1bdb      	subs	r3, r3, r7
    f326:	9301      	str	r3, [sp, #4]
    f328:	2300      	movs	r3, #0
    f32a:	0792      	lsls	r2, r2, #30
    f32c:	d100      	bne.n	f330 <__sflush_r+0xe4>
    f32e:	694b      	ldr	r3, [r1, #20]
    f330:	60a3      	str	r3, [r4, #8]
    f332:	9b01      	ldr	r3, [sp, #4]
    f334:	2b00      	cmp	r3, #0
    f336:	dc00      	bgt.n	f33a <__sflush_r+0xee>
    f338:	e794      	b.n	f264 <__sflush_r+0x18>
    f33a:	9b01      	ldr	r3, [sp, #4]
    f33c:	003a      	movs	r2, r7
    f33e:	6a21      	ldr	r1, [r4, #32]
    f340:	0028      	movs	r0, r5
    f342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    f344:	47b0      	blx	r6
    f346:	2800      	cmp	r0, #0
    f348:	dc03      	bgt.n	f352 <__sflush_r+0x106>
    f34a:	2340      	movs	r3, #64	; 0x40
    f34c:	89a2      	ldrh	r2, [r4, #12]
    f34e:	4313      	orrs	r3, r2
    f350:	e7df      	b.n	f312 <__sflush_r+0xc6>
    f352:	9b01      	ldr	r3, [sp, #4]
    f354:	183f      	adds	r7, r7, r0
    f356:	1a1b      	subs	r3, r3, r0
    f358:	9301      	str	r3, [sp, #4]
    f35a:	e7ea      	b.n	f332 <__sflush_r+0xe6>
    f35c:	20400001 	.word	0x20400001

0000f360 <_fflush_r>:
    f360:	690b      	ldr	r3, [r1, #16]
    f362:	b570      	push	{r4, r5, r6, lr}
    f364:	0005      	movs	r5, r0
    f366:	000c      	movs	r4, r1
    f368:	2b00      	cmp	r3, #0
    f36a:	d101      	bne.n	f370 <_fflush_r+0x10>
    f36c:	2000      	movs	r0, #0
    f36e:	bd70      	pop	{r4, r5, r6, pc}
    f370:	2800      	cmp	r0, #0
    f372:	d004      	beq.n	f37e <_fflush_r+0x1e>
    f374:	6983      	ldr	r3, [r0, #24]
    f376:	2b00      	cmp	r3, #0
    f378:	d101      	bne.n	f37e <_fflush_r+0x1e>
    f37a:	f000 f85f 	bl	f43c <__sinit>
    f37e:	4b0b      	ldr	r3, [pc, #44]	; (f3ac <_fflush_r+0x4c>)
    f380:	429c      	cmp	r4, r3
    f382:	d109      	bne.n	f398 <_fflush_r+0x38>
    f384:	686c      	ldr	r4, [r5, #4]
    f386:	220c      	movs	r2, #12
    f388:	5ea3      	ldrsh	r3, [r4, r2]
    f38a:	2b00      	cmp	r3, #0
    f38c:	d0ee      	beq.n	f36c <_fflush_r+0xc>
    f38e:	0021      	movs	r1, r4
    f390:	0028      	movs	r0, r5
    f392:	f7ff ff5b 	bl	f24c <__sflush_r>
    f396:	e7ea      	b.n	f36e <_fflush_r+0xe>
    f398:	4b05      	ldr	r3, [pc, #20]	; (f3b0 <_fflush_r+0x50>)
    f39a:	429c      	cmp	r4, r3
    f39c:	d101      	bne.n	f3a2 <_fflush_r+0x42>
    f39e:	68ac      	ldr	r4, [r5, #8]
    f3a0:	e7f1      	b.n	f386 <_fflush_r+0x26>
    f3a2:	4b04      	ldr	r3, [pc, #16]	; (f3b4 <_fflush_r+0x54>)
    f3a4:	429c      	cmp	r4, r3
    f3a6:	d1ee      	bne.n	f386 <_fflush_r+0x26>
    f3a8:	68ec      	ldr	r4, [r5, #12]
    f3aa:	e7ec      	b.n	f386 <_fflush_r+0x26>
    f3ac:	00012b28 	.word	0x00012b28
    f3b0:	00012b48 	.word	0x00012b48
    f3b4:	00012b08 	.word	0x00012b08

0000f3b8 <_cleanup_r>:
    f3b8:	b510      	push	{r4, lr}
    f3ba:	4902      	ldr	r1, [pc, #8]	; (f3c4 <_cleanup_r+0xc>)
    f3bc:	f000 f8b2 	bl	f524 <_fwalk_reent>
    f3c0:	bd10      	pop	{r4, pc}
    f3c2:	46c0      	nop			; (mov r8, r8)
    f3c4:	0000f361 	.word	0x0000f361

0000f3c8 <std.isra.0>:
    f3c8:	2300      	movs	r3, #0
    f3ca:	b510      	push	{r4, lr}
    f3cc:	0004      	movs	r4, r0
    f3ce:	6003      	str	r3, [r0, #0]
    f3d0:	6043      	str	r3, [r0, #4]
    f3d2:	6083      	str	r3, [r0, #8]
    f3d4:	8181      	strh	r1, [r0, #12]
    f3d6:	6643      	str	r3, [r0, #100]	; 0x64
    f3d8:	81c2      	strh	r2, [r0, #14]
    f3da:	6103      	str	r3, [r0, #16]
    f3dc:	6143      	str	r3, [r0, #20]
    f3de:	6183      	str	r3, [r0, #24]
    f3e0:	0019      	movs	r1, r3
    f3e2:	2208      	movs	r2, #8
    f3e4:	305c      	adds	r0, #92	; 0x5c
    f3e6:	f7fd fb67 	bl	cab8 <memset>
    f3ea:	4b05      	ldr	r3, [pc, #20]	; (f400 <std.isra.0+0x38>)
    f3ec:	6224      	str	r4, [r4, #32]
    f3ee:	6263      	str	r3, [r4, #36]	; 0x24
    f3f0:	4b04      	ldr	r3, [pc, #16]	; (f404 <std.isra.0+0x3c>)
    f3f2:	62a3      	str	r3, [r4, #40]	; 0x28
    f3f4:	4b04      	ldr	r3, [pc, #16]	; (f408 <std.isra.0+0x40>)
    f3f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    f3f8:	4b04      	ldr	r3, [pc, #16]	; (f40c <std.isra.0+0x44>)
    f3fa:	6323      	str	r3, [r4, #48]	; 0x30
    f3fc:	bd10      	pop	{r4, pc}
    f3fe:	46c0      	nop			; (mov r8, r8)
    f400:	000100dd 	.word	0x000100dd
    f404:	00010109 	.word	0x00010109
    f408:	00010141 	.word	0x00010141
    f40c:	0001016d 	.word	0x0001016d

0000f410 <__sfmoreglue>:
    f410:	b570      	push	{r4, r5, r6, lr}
    f412:	2568      	movs	r5, #104	; 0x68
    f414:	1e4a      	subs	r2, r1, #1
    f416:	4355      	muls	r5, r2
    f418:	000e      	movs	r6, r1
    f41a:	0029      	movs	r1, r5
    f41c:	3174      	adds	r1, #116	; 0x74
    f41e:	f7fd fdf3 	bl	d008 <_malloc_r>
    f422:	1e04      	subs	r4, r0, #0
    f424:	d008      	beq.n	f438 <__sfmoreglue+0x28>
    f426:	2100      	movs	r1, #0
    f428:	002a      	movs	r2, r5
    f42a:	6001      	str	r1, [r0, #0]
    f42c:	6046      	str	r6, [r0, #4]
    f42e:	300c      	adds	r0, #12
    f430:	60a0      	str	r0, [r4, #8]
    f432:	3268      	adds	r2, #104	; 0x68
    f434:	f7fd fb40 	bl	cab8 <memset>
    f438:	0020      	movs	r0, r4
    f43a:	bd70      	pop	{r4, r5, r6, pc}

0000f43c <__sinit>:
    f43c:	6983      	ldr	r3, [r0, #24]
    f43e:	b513      	push	{r0, r1, r4, lr}
    f440:	0004      	movs	r4, r0
    f442:	2b00      	cmp	r3, #0
    f444:	d128      	bne.n	f498 <__sinit+0x5c>
    f446:	6483      	str	r3, [r0, #72]	; 0x48
    f448:	64c3      	str	r3, [r0, #76]	; 0x4c
    f44a:	6503      	str	r3, [r0, #80]	; 0x50
    f44c:	4b13      	ldr	r3, [pc, #76]	; (f49c <__sinit+0x60>)
    f44e:	4a14      	ldr	r2, [pc, #80]	; (f4a0 <__sinit+0x64>)
    f450:	681b      	ldr	r3, [r3, #0]
    f452:	6282      	str	r2, [r0, #40]	; 0x28
    f454:	9301      	str	r3, [sp, #4]
    f456:	4298      	cmp	r0, r3
    f458:	d101      	bne.n	f45e <__sinit+0x22>
    f45a:	2301      	movs	r3, #1
    f45c:	6183      	str	r3, [r0, #24]
    f45e:	0020      	movs	r0, r4
    f460:	f000 f820 	bl	f4a4 <__sfp>
    f464:	6060      	str	r0, [r4, #4]
    f466:	0020      	movs	r0, r4
    f468:	f000 f81c 	bl	f4a4 <__sfp>
    f46c:	60a0      	str	r0, [r4, #8]
    f46e:	0020      	movs	r0, r4
    f470:	f000 f818 	bl	f4a4 <__sfp>
    f474:	2200      	movs	r2, #0
    f476:	60e0      	str	r0, [r4, #12]
    f478:	2104      	movs	r1, #4
    f47a:	6860      	ldr	r0, [r4, #4]
    f47c:	f7ff ffa4 	bl	f3c8 <std.isra.0>
    f480:	2201      	movs	r2, #1
    f482:	2109      	movs	r1, #9
    f484:	68a0      	ldr	r0, [r4, #8]
    f486:	f7ff ff9f 	bl	f3c8 <std.isra.0>
    f48a:	2202      	movs	r2, #2
    f48c:	2112      	movs	r1, #18
    f48e:	68e0      	ldr	r0, [r4, #12]
    f490:	f7ff ff9a 	bl	f3c8 <std.isra.0>
    f494:	2301      	movs	r3, #1
    f496:	61a3      	str	r3, [r4, #24]
    f498:	bd13      	pop	{r0, r1, r4, pc}
    f49a:	46c0      	nop			; (mov r8, r8)
    f49c:	0001290c 	.word	0x0001290c
    f4a0:	0000f3b9 	.word	0x0000f3b9

0000f4a4 <__sfp>:
    f4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4a6:	4b1e      	ldr	r3, [pc, #120]	; (f520 <__sfp+0x7c>)
    f4a8:	0007      	movs	r7, r0
    f4aa:	681e      	ldr	r6, [r3, #0]
    f4ac:	69b3      	ldr	r3, [r6, #24]
    f4ae:	2b00      	cmp	r3, #0
    f4b0:	d102      	bne.n	f4b8 <__sfp+0x14>
    f4b2:	0030      	movs	r0, r6
    f4b4:	f7ff ffc2 	bl	f43c <__sinit>
    f4b8:	3648      	adds	r6, #72	; 0x48
    f4ba:	68b4      	ldr	r4, [r6, #8]
    f4bc:	6873      	ldr	r3, [r6, #4]
    f4be:	3b01      	subs	r3, #1
    f4c0:	d504      	bpl.n	f4cc <__sfp+0x28>
    f4c2:	6833      	ldr	r3, [r6, #0]
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d007      	beq.n	f4d8 <__sfp+0x34>
    f4c8:	6836      	ldr	r6, [r6, #0]
    f4ca:	e7f6      	b.n	f4ba <__sfp+0x16>
    f4cc:	220c      	movs	r2, #12
    f4ce:	5ea5      	ldrsh	r5, [r4, r2]
    f4d0:	2d00      	cmp	r5, #0
    f4d2:	d00d      	beq.n	f4f0 <__sfp+0x4c>
    f4d4:	3468      	adds	r4, #104	; 0x68
    f4d6:	e7f2      	b.n	f4be <__sfp+0x1a>
    f4d8:	2104      	movs	r1, #4
    f4da:	0038      	movs	r0, r7
    f4dc:	f7ff ff98 	bl	f410 <__sfmoreglue>
    f4e0:	6030      	str	r0, [r6, #0]
    f4e2:	2800      	cmp	r0, #0
    f4e4:	d1f0      	bne.n	f4c8 <__sfp+0x24>
    f4e6:	230c      	movs	r3, #12
    f4e8:	0004      	movs	r4, r0
    f4ea:	603b      	str	r3, [r7, #0]
    f4ec:	0020      	movs	r0, r4
    f4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f4f0:	2301      	movs	r3, #1
    f4f2:	0020      	movs	r0, r4
    f4f4:	425b      	negs	r3, r3
    f4f6:	81e3      	strh	r3, [r4, #14]
    f4f8:	3302      	adds	r3, #2
    f4fa:	81a3      	strh	r3, [r4, #12]
    f4fc:	6665      	str	r5, [r4, #100]	; 0x64
    f4fe:	6025      	str	r5, [r4, #0]
    f500:	60a5      	str	r5, [r4, #8]
    f502:	6065      	str	r5, [r4, #4]
    f504:	6125      	str	r5, [r4, #16]
    f506:	6165      	str	r5, [r4, #20]
    f508:	61a5      	str	r5, [r4, #24]
    f50a:	2208      	movs	r2, #8
    f50c:	0029      	movs	r1, r5
    f50e:	305c      	adds	r0, #92	; 0x5c
    f510:	f7fd fad2 	bl	cab8 <memset>
    f514:	6365      	str	r5, [r4, #52]	; 0x34
    f516:	63a5      	str	r5, [r4, #56]	; 0x38
    f518:	64a5      	str	r5, [r4, #72]	; 0x48
    f51a:	64e5      	str	r5, [r4, #76]	; 0x4c
    f51c:	e7e6      	b.n	f4ec <__sfp+0x48>
    f51e:	46c0      	nop			; (mov r8, r8)
    f520:	0001290c 	.word	0x0001290c

0000f524 <_fwalk_reent>:
    f524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f526:	0004      	movs	r4, r0
    f528:	0007      	movs	r7, r0
    f52a:	2600      	movs	r6, #0
    f52c:	9101      	str	r1, [sp, #4]
    f52e:	3448      	adds	r4, #72	; 0x48
    f530:	2c00      	cmp	r4, #0
    f532:	d101      	bne.n	f538 <_fwalk_reent+0x14>
    f534:	0030      	movs	r0, r6
    f536:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f538:	6863      	ldr	r3, [r4, #4]
    f53a:	68a5      	ldr	r5, [r4, #8]
    f53c:	9300      	str	r3, [sp, #0]
    f53e:	9b00      	ldr	r3, [sp, #0]
    f540:	3b01      	subs	r3, #1
    f542:	9300      	str	r3, [sp, #0]
    f544:	d501      	bpl.n	f54a <_fwalk_reent+0x26>
    f546:	6824      	ldr	r4, [r4, #0]
    f548:	e7f2      	b.n	f530 <_fwalk_reent+0xc>
    f54a:	89ab      	ldrh	r3, [r5, #12]
    f54c:	2b01      	cmp	r3, #1
    f54e:	d908      	bls.n	f562 <_fwalk_reent+0x3e>
    f550:	220e      	movs	r2, #14
    f552:	5eab      	ldrsh	r3, [r5, r2]
    f554:	3301      	adds	r3, #1
    f556:	d004      	beq.n	f562 <_fwalk_reent+0x3e>
    f558:	0029      	movs	r1, r5
    f55a:	0038      	movs	r0, r7
    f55c:	9b01      	ldr	r3, [sp, #4]
    f55e:	4798      	blx	r3
    f560:	4306      	orrs	r6, r0
    f562:	3568      	adds	r5, #104	; 0x68
    f564:	e7eb      	b.n	f53e <_fwalk_reent+0x1a>
	...

0000f568 <_findenv_r>:
    f568:	b5f0      	push	{r4, r5, r6, r7, lr}
    f56a:	000e      	movs	r6, r1
    f56c:	b085      	sub	sp, #20
    f56e:	0007      	movs	r7, r0
    f570:	9203      	str	r2, [sp, #12]
    f572:	f000 fed3 	bl	1031c <__env_lock>
    f576:	4c19      	ldr	r4, [pc, #100]	; (f5dc <_findenv_r+0x74>)
    f578:	0033      	movs	r3, r6
    f57a:	6825      	ldr	r5, [r4, #0]
    f57c:	2d00      	cmp	r5, #0
    f57e:	d106      	bne.n	f58e <_findenv_r+0x26>
    f580:	0038      	movs	r0, r7
    f582:	f000 fecc 	bl	1031e <__env_unlock>
    f586:	2000      	movs	r0, #0
    f588:	b005      	add	sp, #20
    f58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f58c:	3301      	adds	r3, #1
    f58e:	781a      	ldrb	r2, [r3, #0]
    f590:	2a00      	cmp	r2, #0
    f592:	d01f      	beq.n	f5d4 <_findenv_r+0x6c>
    f594:	2a3d      	cmp	r2, #61	; 0x3d
    f596:	d1f9      	bne.n	f58c <_findenv_r+0x24>
    f598:	e7f2      	b.n	f580 <_findenv_r+0x18>
    f59a:	3504      	adds	r5, #4
    f59c:	6828      	ldr	r0, [r5, #0]
    f59e:	2800      	cmp	r0, #0
    f5a0:	d0ee      	beq.n	f580 <_findenv_r+0x18>
    f5a2:	9a01      	ldr	r2, [sp, #4]
    f5a4:	0031      	movs	r1, r6
    f5a6:	f7fe fbba 	bl	dd1e <strncmp>
    f5aa:	2800      	cmp	r0, #0
    f5ac:	d1f5      	bne.n	f59a <_findenv_r+0x32>
    f5ae:	9a01      	ldr	r2, [sp, #4]
    f5b0:	682b      	ldr	r3, [r5, #0]
    f5b2:	4694      	mov	ip, r2
    f5b4:	4463      	add	r3, ip
    f5b6:	9302      	str	r3, [sp, #8]
    f5b8:	781b      	ldrb	r3, [r3, #0]
    f5ba:	2b3d      	cmp	r3, #61	; 0x3d
    f5bc:	d1ed      	bne.n	f59a <_findenv_r+0x32>
    f5be:	6823      	ldr	r3, [r4, #0]
    f5c0:	0038      	movs	r0, r7
    f5c2:	1aed      	subs	r5, r5, r3
    f5c4:	9b03      	ldr	r3, [sp, #12]
    f5c6:	10ad      	asrs	r5, r5, #2
    f5c8:	601d      	str	r5, [r3, #0]
    f5ca:	f000 fea8 	bl	1031e <__env_unlock>
    f5ce:	9802      	ldr	r0, [sp, #8]
    f5d0:	3001      	adds	r0, #1
    f5d2:	e7d9      	b.n	f588 <_findenv_r+0x20>
    f5d4:	1b9b      	subs	r3, r3, r6
    f5d6:	9301      	str	r3, [sp, #4]
    f5d8:	e7e0      	b.n	f59c <_findenv_r+0x34>
    f5da:	46c0      	nop			; (mov r8, r8)
    f5dc:	200002cc 	.word	0x200002cc

0000f5e0 <_getenv_r>:
    f5e0:	b507      	push	{r0, r1, r2, lr}
    f5e2:	aa01      	add	r2, sp, #4
    f5e4:	f7ff ffc0 	bl	f568 <_findenv_r>
    f5e8:	bd0e      	pop	{r1, r2, r3, pc}
	...

0000f5ec <__gettzinfo>:
    f5ec:	4800      	ldr	r0, [pc, #0]	; (f5f0 <__gettzinfo+0x4>)
    f5ee:	4770      	bx	lr
    f5f0:	2000028c 	.word	0x2000028c

0000f5f4 <_localeconv_r>:
    f5f4:	4b03      	ldr	r3, [pc, #12]	; (f604 <_localeconv_r+0x10>)
    f5f6:	681b      	ldr	r3, [r3, #0]
    f5f8:	6a18      	ldr	r0, [r3, #32]
    f5fa:	2800      	cmp	r0, #0
    f5fc:	d100      	bne.n	f600 <_localeconv_r+0xc>
    f5fe:	4802      	ldr	r0, [pc, #8]	; (f608 <_localeconv_r+0x14>)
    f600:	30f0      	adds	r0, #240	; 0xf0
    f602:	4770      	bx	lr
    f604:	200000b4 	.word	0x200000b4
    f608:	20000118 	.word	0x20000118

0000f60c <__swhatbuf_r>:
    f60c:	b570      	push	{r4, r5, r6, lr}
    f60e:	000e      	movs	r6, r1
    f610:	001d      	movs	r5, r3
    f612:	230e      	movs	r3, #14
    f614:	5ec9      	ldrsh	r1, [r1, r3]
    f616:	b090      	sub	sp, #64	; 0x40
    f618:	0014      	movs	r4, r2
    f61a:	2900      	cmp	r1, #0
    f61c:	da07      	bge.n	f62e <__swhatbuf_r+0x22>
    f61e:	2300      	movs	r3, #0
    f620:	602b      	str	r3, [r5, #0]
    f622:	89b3      	ldrh	r3, [r6, #12]
    f624:	061b      	lsls	r3, r3, #24
    f626:	d411      	bmi.n	f64c <__swhatbuf_r+0x40>
    f628:	2380      	movs	r3, #128	; 0x80
    f62a:	00db      	lsls	r3, r3, #3
    f62c:	e00f      	b.n	f64e <__swhatbuf_r+0x42>
    f62e:	aa01      	add	r2, sp, #4
    f630:	f000 fe76 	bl	10320 <_fstat_r>
    f634:	2800      	cmp	r0, #0
    f636:	dbf2      	blt.n	f61e <__swhatbuf_r+0x12>
    f638:	22f0      	movs	r2, #240	; 0xf0
    f63a:	9b02      	ldr	r3, [sp, #8]
    f63c:	0212      	lsls	r2, r2, #8
    f63e:	4013      	ands	r3, r2
    f640:	4a05      	ldr	r2, [pc, #20]	; (f658 <__swhatbuf_r+0x4c>)
    f642:	189b      	adds	r3, r3, r2
    f644:	425a      	negs	r2, r3
    f646:	4153      	adcs	r3, r2
    f648:	602b      	str	r3, [r5, #0]
    f64a:	e7ed      	b.n	f628 <__swhatbuf_r+0x1c>
    f64c:	2340      	movs	r3, #64	; 0x40
    f64e:	2000      	movs	r0, #0
    f650:	6023      	str	r3, [r4, #0]
    f652:	b010      	add	sp, #64	; 0x40
    f654:	bd70      	pop	{r4, r5, r6, pc}
    f656:	46c0      	nop			; (mov r8, r8)
    f658:	ffffe000 	.word	0xffffe000

0000f65c <__smakebuf_r>:
    f65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f65e:	2602      	movs	r6, #2
    f660:	898b      	ldrh	r3, [r1, #12]
    f662:	0005      	movs	r5, r0
    f664:	000c      	movs	r4, r1
    f666:	4233      	tst	r3, r6
    f668:	d006      	beq.n	f678 <__smakebuf_r+0x1c>
    f66a:	0023      	movs	r3, r4
    f66c:	3347      	adds	r3, #71	; 0x47
    f66e:	6023      	str	r3, [r4, #0]
    f670:	6123      	str	r3, [r4, #16]
    f672:	2301      	movs	r3, #1
    f674:	6163      	str	r3, [r4, #20]
    f676:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    f678:	ab01      	add	r3, sp, #4
    f67a:	466a      	mov	r2, sp
    f67c:	f7ff ffc6 	bl	f60c <__swhatbuf_r>
    f680:	9900      	ldr	r1, [sp, #0]
    f682:	0007      	movs	r7, r0
    f684:	0028      	movs	r0, r5
    f686:	f7fd fcbf 	bl	d008 <_malloc_r>
    f68a:	2800      	cmp	r0, #0
    f68c:	d108      	bne.n	f6a0 <__smakebuf_r+0x44>
    f68e:	220c      	movs	r2, #12
    f690:	5ea3      	ldrsh	r3, [r4, r2]
    f692:	059a      	lsls	r2, r3, #22
    f694:	d4ef      	bmi.n	f676 <__smakebuf_r+0x1a>
    f696:	2203      	movs	r2, #3
    f698:	4393      	bics	r3, r2
    f69a:	431e      	orrs	r6, r3
    f69c:	81a6      	strh	r6, [r4, #12]
    f69e:	e7e4      	b.n	f66a <__smakebuf_r+0xe>
    f6a0:	4b0f      	ldr	r3, [pc, #60]	; (f6e0 <__smakebuf_r+0x84>)
    f6a2:	62ab      	str	r3, [r5, #40]	; 0x28
    f6a4:	2380      	movs	r3, #128	; 0x80
    f6a6:	89a2      	ldrh	r2, [r4, #12]
    f6a8:	6020      	str	r0, [r4, #0]
    f6aa:	4313      	orrs	r3, r2
    f6ac:	81a3      	strh	r3, [r4, #12]
    f6ae:	9b00      	ldr	r3, [sp, #0]
    f6b0:	6120      	str	r0, [r4, #16]
    f6b2:	6163      	str	r3, [r4, #20]
    f6b4:	9b01      	ldr	r3, [sp, #4]
    f6b6:	2b00      	cmp	r3, #0
    f6b8:	d00d      	beq.n	f6d6 <__smakebuf_r+0x7a>
    f6ba:	230e      	movs	r3, #14
    f6bc:	5ee1      	ldrsh	r1, [r4, r3]
    f6be:	0028      	movs	r0, r5
    f6c0:	f000 fe40 	bl	10344 <_isatty_r>
    f6c4:	2800      	cmp	r0, #0
    f6c6:	d006      	beq.n	f6d6 <__smakebuf_r+0x7a>
    f6c8:	2203      	movs	r2, #3
    f6ca:	89a3      	ldrh	r3, [r4, #12]
    f6cc:	4393      	bics	r3, r2
    f6ce:	001a      	movs	r2, r3
    f6d0:	2301      	movs	r3, #1
    f6d2:	4313      	orrs	r3, r2
    f6d4:	81a3      	strh	r3, [r4, #12]
    f6d6:	89a0      	ldrh	r0, [r4, #12]
    f6d8:	4338      	orrs	r0, r7
    f6da:	81a0      	strh	r0, [r4, #12]
    f6dc:	e7cb      	b.n	f676 <__smakebuf_r+0x1a>
    f6de:	46c0      	nop			; (mov r8, r8)
    f6e0:	0000f3b9 	.word	0x0000f3b9

0000f6e4 <memchr>:
    f6e4:	b2c9      	uxtb	r1, r1
    f6e6:	1882      	adds	r2, r0, r2
    f6e8:	4290      	cmp	r0, r2
    f6ea:	d101      	bne.n	f6f0 <memchr+0xc>
    f6ec:	2000      	movs	r0, #0
    f6ee:	4770      	bx	lr
    f6f0:	7803      	ldrb	r3, [r0, #0]
    f6f2:	428b      	cmp	r3, r1
    f6f4:	d0fb      	beq.n	f6ee <memchr+0xa>
    f6f6:	3001      	adds	r0, #1
    f6f8:	e7f6      	b.n	f6e8 <memchr+0x4>

0000f6fa <__malloc_lock>:
    f6fa:	4770      	bx	lr

0000f6fc <__malloc_unlock>:
    f6fc:	4770      	bx	lr

0000f6fe <_Balloc>:
    f6fe:	b570      	push	{r4, r5, r6, lr}
    f700:	6a46      	ldr	r6, [r0, #36]	; 0x24
    f702:	0004      	movs	r4, r0
    f704:	000d      	movs	r5, r1
    f706:	2e00      	cmp	r6, #0
    f708:	d107      	bne.n	f71a <_Balloc+0x1c>
    f70a:	2010      	movs	r0, #16
    f70c:	f7fd f984 	bl	ca18 <malloc>
    f710:	6260      	str	r0, [r4, #36]	; 0x24
    f712:	6046      	str	r6, [r0, #4]
    f714:	6086      	str	r6, [r0, #8]
    f716:	6006      	str	r6, [r0, #0]
    f718:	60c6      	str	r6, [r0, #12]
    f71a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    f71c:	68f3      	ldr	r3, [r6, #12]
    f71e:	2b00      	cmp	r3, #0
    f720:	d013      	beq.n	f74a <_Balloc+0x4c>
    f722:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f724:	00aa      	lsls	r2, r5, #2
    f726:	68db      	ldr	r3, [r3, #12]
    f728:	189b      	adds	r3, r3, r2
    f72a:	6818      	ldr	r0, [r3, #0]
    f72c:	2800      	cmp	r0, #0
    f72e:	d118      	bne.n	f762 <_Balloc+0x64>
    f730:	2101      	movs	r1, #1
    f732:	000e      	movs	r6, r1
    f734:	40ae      	lsls	r6, r5
    f736:	1d72      	adds	r2, r6, #5
    f738:	0092      	lsls	r2, r2, #2
    f73a:	0020      	movs	r0, r4
    f73c:	f000 fac2 	bl	fcc4 <_calloc_r>
    f740:	2800      	cmp	r0, #0
    f742:	d00c      	beq.n	f75e <_Balloc+0x60>
    f744:	6045      	str	r5, [r0, #4]
    f746:	6086      	str	r6, [r0, #8]
    f748:	e00d      	b.n	f766 <_Balloc+0x68>
    f74a:	2221      	movs	r2, #33	; 0x21
    f74c:	2104      	movs	r1, #4
    f74e:	0020      	movs	r0, r4
    f750:	f000 fab8 	bl	fcc4 <_calloc_r>
    f754:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f756:	60f0      	str	r0, [r6, #12]
    f758:	68db      	ldr	r3, [r3, #12]
    f75a:	2b00      	cmp	r3, #0
    f75c:	d1e1      	bne.n	f722 <_Balloc+0x24>
    f75e:	2000      	movs	r0, #0
    f760:	bd70      	pop	{r4, r5, r6, pc}
    f762:	6802      	ldr	r2, [r0, #0]
    f764:	601a      	str	r2, [r3, #0]
    f766:	2300      	movs	r3, #0
    f768:	6103      	str	r3, [r0, #16]
    f76a:	60c3      	str	r3, [r0, #12]
    f76c:	e7f8      	b.n	f760 <_Balloc+0x62>

0000f76e <_Bfree>:
    f76e:	b570      	push	{r4, r5, r6, lr}
    f770:	6a44      	ldr	r4, [r0, #36]	; 0x24
    f772:	0006      	movs	r6, r0
    f774:	000d      	movs	r5, r1
    f776:	2c00      	cmp	r4, #0
    f778:	d107      	bne.n	f78a <_Bfree+0x1c>
    f77a:	2010      	movs	r0, #16
    f77c:	f7fd f94c 	bl	ca18 <malloc>
    f780:	6270      	str	r0, [r6, #36]	; 0x24
    f782:	6044      	str	r4, [r0, #4]
    f784:	6084      	str	r4, [r0, #8]
    f786:	6004      	str	r4, [r0, #0]
    f788:	60c4      	str	r4, [r0, #12]
    f78a:	2d00      	cmp	r5, #0
    f78c:	d007      	beq.n	f79e <_Bfree+0x30>
    f78e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    f790:	686a      	ldr	r2, [r5, #4]
    f792:	68db      	ldr	r3, [r3, #12]
    f794:	0092      	lsls	r2, r2, #2
    f796:	189b      	adds	r3, r3, r2
    f798:	681a      	ldr	r2, [r3, #0]
    f79a:	602a      	str	r2, [r5, #0]
    f79c:	601d      	str	r5, [r3, #0]
    f79e:	bd70      	pop	{r4, r5, r6, pc}

0000f7a0 <__multadd>:
    f7a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f7a2:	001e      	movs	r6, r3
    f7a4:	2314      	movs	r3, #20
    f7a6:	469c      	mov	ip, r3
    f7a8:	0007      	movs	r7, r0
    f7aa:	000c      	movs	r4, r1
    f7ac:	2000      	movs	r0, #0
    f7ae:	690d      	ldr	r5, [r1, #16]
    f7b0:	448c      	add	ip, r1
    f7b2:	4663      	mov	r3, ip
    f7b4:	8819      	ldrh	r1, [r3, #0]
    f7b6:	681b      	ldr	r3, [r3, #0]
    f7b8:	4351      	muls	r1, r2
    f7ba:	0c1b      	lsrs	r3, r3, #16
    f7bc:	4353      	muls	r3, r2
    f7be:	1989      	adds	r1, r1, r6
    f7c0:	0c0e      	lsrs	r6, r1, #16
    f7c2:	199b      	adds	r3, r3, r6
    f7c4:	b289      	uxth	r1, r1
    f7c6:	0c1e      	lsrs	r6, r3, #16
    f7c8:	041b      	lsls	r3, r3, #16
    f7ca:	185b      	adds	r3, r3, r1
    f7cc:	4661      	mov	r1, ip
    f7ce:	3001      	adds	r0, #1
    f7d0:	c108      	stmia	r1!, {r3}
    f7d2:	468c      	mov	ip, r1
    f7d4:	4285      	cmp	r5, r0
    f7d6:	dcec      	bgt.n	f7b2 <__multadd+0x12>
    f7d8:	2e00      	cmp	r6, #0
    f7da:	d01b      	beq.n	f814 <__multadd+0x74>
    f7dc:	68a3      	ldr	r3, [r4, #8]
    f7de:	429d      	cmp	r5, r3
    f7e0:	db12      	blt.n	f808 <__multadd+0x68>
    f7e2:	6863      	ldr	r3, [r4, #4]
    f7e4:	0038      	movs	r0, r7
    f7e6:	1c59      	adds	r1, r3, #1
    f7e8:	f7ff ff89 	bl	f6fe <_Balloc>
    f7ec:	0021      	movs	r1, r4
    f7ee:	6923      	ldr	r3, [r4, #16]
    f7f0:	9001      	str	r0, [sp, #4]
    f7f2:	1c9a      	adds	r2, r3, #2
    f7f4:	0092      	lsls	r2, r2, #2
    f7f6:	310c      	adds	r1, #12
    f7f8:	300c      	adds	r0, #12
    f7fa:	f7fd f942 	bl	ca82 <memcpy>
    f7fe:	0021      	movs	r1, r4
    f800:	0038      	movs	r0, r7
    f802:	f7ff ffb4 	bl	f76e <_Bfree>
    f806:	9c01      	ldr	r4, [sp, #4]
    f808:	1d2b      	adds	r3, r5, #4
    f80a:	009b      	lsls	r3, r3, #2
    f80c:	18e3      	adds	r3, r4, r3
    f80e:	3501      	adds	r5, #1
    f810:	605e      	str	r6, [r3, #4]
    f812:	6125      	str	r5, [r4, #16]
    f814:	0020      	movs	r0, r4
    f816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f818 <__hi0bits>:
    f818:	0003      	movs	r3, r0
    f81a:	0c02      	lsrs	r2, r0, #16
    f81c:	2000      	movs	r0, #0
    f81e:	4282      	cmp	r2, r0
    f820:	d101      	bne.n	f826 <__hi0bits+0xe>
    f822:	041b      	lsls	r3, r3, #16
    f824:	3010      	adds	r0, #16
    f826:	0e1a      	lsrs	r2, r3, #24
    f828:	d101      	bne.n	f82e <__hi0bits+0x16>
    f82a:	3008      	adds	r0, #8
    f82c:	021b      	lsls	r3, r3, #8
    f82e:	0f1a      	lsrs	r2, r3, #28
    f830:	d101      	bne.n	f836 <__hi0bits+0x1e>
    f832:	3004      	adds	r0, #4
    f834:	011b      	lsls	r3, r3, #4
    f836:	0f9a      	lsrs	r2, r3, #30
    f838:	d101      	bne.n	f83e <__hi0bits+0x26>
    f83a:	3002      	adds	r0, #2
    f83c:	009b      	lsls	r3, r3, #2
    f83e:	2b00      	cmp	r3, #0
    f840:	db03      	blt.n	f84a <__hi0bits+0x32>
    f842:	3001      	adds	r0, #1
    f844:	005b      	lsls	r3, r3, #1
    f846:	d400      	bmi.n	f84a <__hi0bits+0x32>
    f848:	2020      	movs	r0, #32
    f84a:	4770      	bx	lr

0000f84c <__lo0bits>:
    f84c:	2207      	movs	r2, #7
    f84e:	6803      	ldr	r3, [r0, #0]
    f850:	b510      	push	{r4, lr}
    f852:	0001      	movs	r1, r0
    f854:	401a      	ands	r2, r3
    f856:	d00d      	beq.n	f874 <__lo0bits+0x28>
    f858:	2401      	movs	r4, #1
    f85a:	2000      	movs	r0, #0
    f85c:	4223      	tst	r3, r4
    f85e:	d105      	bne.n	f86c <__lo0bits+0x20>
    f860:	3002      	adds	r0, #2
    f862:	4203      	tst	r3, r0
    f864:	d003      	beq.n	f86e <__lo0bits+0x22>
    f866:	40e3      	lsrs	r3, r4
    f868:	0020      	movs	r0, r4
    f86a:	600b      	str	r3, [r1, #0]
    f86c:	bd10      	pop	{r4, pc}
    f86e:	089b      	lsrs	r3, r3, #2
    f870:	600b      	str	r3, [r1, #0]
    f872:	e7fb      	b.n	f86c <__lo0bits+0x20>
    f874:	b29c      	uxth	r4, r3
    f876:	0010      	movs	r0, r2
    f878:	2c00      	cmp	r4, #0
    f87a:	d101      	bne.n	f880 <__lo0bits+0x34>
    f87c:	2010      	movs	r0, #16
    f87e:	0c1b      	lsrs	r3, r3, #16
    f880:	b2da      	uxtb	r2, r3
    f882:	2a00      	cmp	r2, #0
    f884:	d101      	bne.n	f88a <__lo0bits+0x3e>
    f886:	3008      	adds	r0, #8
    f888:	0a1b      	lsrs	r3, r3, #8
    f88a:	071a      	lsls	r2, r3, #28
    f88c:	d101      	bne.n	f892 <__lo0bits+0x46>
    f88e:	3004      	adds	r0, #4
    f890:	091b      	lsrs	r3, r3, #4
    f892:	079a      	lsls	r2, r3, #30
    f894:	d101      	bne.n	f89a <__lo0bits+0x4e>
    f896:	3002      	adds	r0, #2
    f898:	089b      	lsrs	r3, r3, #2
    f89a:	07da      	lsls	r2, r3, #31
    f89c:	d4e8      	bmi.n	f870 <__lo0bits+0x24>
    f89e:	085b      	lsrs	r3, r3, #1
    f8a0:	d001      	beq.n	f8a6 <__lo0bits+0x5a>
    f8a2:	3001      	adds	r0, #1
    f8a4:	e7e4      	b.n	f870 <__lo0bits+0x24>
    f8a6:	2020      	movs	r0, #32
    f8a8:	e7e0      	b.n	f86c <__lo0bits+0x20>

0000f8aa <__i2b>:
    f8aa:	b510      	push	{r4, lr}
    f8ac:	000c      	movs	r4, r1
    f8ae:	2101      	movs	r1, #1
    f8b0:	f7ff ff25 	bl	f6fe <_Balloc>
    f8b4:	2301      	movs	r3, #1
    f8b6:	6144      	str	r4, [r0, #20]
    f8b8:	6103      	str	r3, [r0, #16]
    f8ba:	bd10      	pop	{r4, pc}

0000f8bc <__multiply>:
    f8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8be:	690b      	ldr	r3, [r1, #16]
    f8c0:	0015      	movs	r5, r2
    f8c2:	6912      	ldr	r2, [r2, #16]
    f8c4:	b089      	sub	sp, #36	; 0x24
    f8c6:	000c      	movs	r4, r1
    f8c8:	4293      	cmp	r3, r2
    f8ca:	da01      	bge.n	f8d0 <__multiply+0x14>
    f8cc:	002c      	movs	r4, r5
    f8ce:	000d      	movs	r5, r1
    f8d0:	6927      	ldr	r7, [r4, #16]
    f8d2:	692e      	ldr	r6, [r5, #16]
    f8d4:	68a2      	ldr	r2, [r4, #8]
    f8d6:	19bb      	adds	r3, r7, r6
    f8d8:	6861      	ldr	r1, [r4, #4]
    f8da:	9301      	str	r3, [sp, #4]
    f8dc:	4293      	cmp	r3, r2
    f8de:	dd00      	ble.n	f8e2 <__multiply+0x26>
    f8e0:	3101      	adds	r1, #1
    f8e2:	f7ff ff0c 	bl	f6fe <_Balloc>
    f8e6:	0003      	movs	r3, r0
    f8e8:	3314      	adds	r3, #20
    f8ea:	9300      	str	r3, [sp, #0]
    f8ec:	9a00      	ldr	r2, [sp, #0]
    f8ee:	19bb      	adds	r3, r7, r6
    f8f0:	4694      	mov	ip, r2
    f8f2:	009b      	lsls	r3, r3, #2
    f8f4:	449c      	add	ip, r3
    f8f6:	0013      	movs	r3, r2
    f8f8:	2200      	movs	r2, #0
    f8fa:	9004      	str	r0, [sp, #16]
    f8fc:	4563      	cmp	r3, ip
    f8fe:	d31c      	bcc.n	f93a <__multiply+0x7e>
    f900:	002a      	movs	r2, r5
    f902:	3414      	adds	r4, #20
    f904:	00bf      	lsls	r7, r7, #2
    f906:	19e3      	adds	r3, r4, r7
    f908:	3214      	adds	r2, #20
    f90a:	00b6      	lsls	r6, r6, #2
    f90c:	9305      	str	r3, [sp, #20]
    f90e:	1993      	adds	r3, r2, r6
    f910:	9402      	str	r4, [sp, #8]
    f912:	9306      	str	r3, [sp, #24]
    f914:	9b06      	ldr	r3, [sp, #24]
    f916:	429a      	cmp	r2, r3
    f918:	d311      	bcc.n	f93e <__multiply+0x82>
    f91a:	9b01      	ldr	r3, [sp, #4]
    f91c:	2b00      	cmp	r3, #0
    f91e:	dd06      	ble.n	f92e <__multiply+0x72>
    f920:	2304      	movs	r3, #4
    f922:	425b      	negs	r3, r3
    f924:	449c      	add	ip, r3
    f926:	4663      	mov	r3, ip
    f928:	681b      	ldr	r3, [r3, #0]
    f92a:	2b00      	cmp	r3, #0
    f92c:	d051      	beq.n	f9d2 <__multiply+0x116>
    f92e:	9b04      	ldr	r3, [sp, #16]
    f930:	9a01      	ldr	r2, [sp, #4]
    f932:	0018      	movs	r0, r3
    f934:	611a      	str	r2, [r3, #16]
    f936:	b009      	add	sp, #36	; 0x24
    f938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f93a:	c304      	stmia	r3!, {r2}
    f93c:	e7de      	b.n	f8fc <__multiply+0x40>
    f93e:	8814      	ldrh	r4, [r2, #0]
    f940:	2c00      	cmp	r4, #0
    f942:	d01e      	beq.n	f982 <__multiply+0xc6>
    f944:	2600      	movs	r6, #0
    f946:	9d00      	ldr	r5, [sp, #0]
    f948:	9f02      	ldr	r7, [sp, #8]
    f94a:	cf01      	ldmia	r7!, {r0}
    f94c:	9507      	str	r5, [sp, #28]
    f94e:	cd08      	ldmia	r5!, {r3}
    f950:	9303      	str	r3, [sp, #12]
    f952:	b283      	uxth	r3, r0
    f954:	4363      	muls	r3, r4
    f956:	0019      	movs	r1, r3
    f958:	466b      	mov	r3, sp
    f95a:	0c00      	lsrs	r0, r0, #16
    f95c:	899b      	ldrh	r3, [r3, #12]
    f95e:	4360      	muls	r0, r4
    f960:	18cb      	adds	r3, r1, r3
    f962:	9903      	ldr	r1, [sp, #12]
    f964:	199b      	adds	r3, r3, r6
    f966:	0c09      	lsrs	r1, r1, #16
    f968:	1841      	adds	r1, r0, r1
    f96a:	0c18      	lsrs	r0, r3, #16
    f96c:	1809      	adds	r1, r1, r0
    f96e:	0c0e      	lsrs	r6, r1, #16
    f970:	b29b      	uxth	r3, r3
    f972:	0409      	lsls	r1, r1, #16
    f974:	430b      	orrs	r3, r1
    f976:	9907      	ldr	r1, [sp, #28]
    f978:	600b      	str	r3, [r1, #0]
    f97a:	9b05      	ldr	r3, [sp, #20]
    f97c:	42bb      	cmp	r3, r7
    f97e:	d8e4      	bhi.n	f94a <__multiply+0x8e>
    f980:	602e      	str	r6, [r5, #0]
    f982:	6813      	ldr	r3, [r2, #0]
    f984:	0c1b      	lsrs	r3, r3, #16
    f986:	9303      	str	r3, [sp, #12]
    f988:	d01e      	beq.n	f9c8 <__multiply+0x10c>
    f98a:	2600      	movs	r6, #0
    f98c:	9b00      	ldr	r3, [sp, #0]
    f98e:	9c02      	ldr	r4, [sp, #8]
    f990:	681b      	ldr	r3, [r3, #0]
    f992:	9800      	ldr	r0, [sp, #0]
    f994:	0007      	movs	r7, r0
    f996:	8821      	ldrh	r1, [r4, #0]
    f998:	9d03      	ldr	r5, [sp, #12]
    f99a:	b29b      	uxth	r3, r3
    f99c:	4369      	muls	r1, r5
    f99e:	c820      	ldmia	r0!, {r5}
    f9a0:	0c2d      	lsrs	r5, r5, #16
    f9a2:	1949      	adds	r1, r1, r5
    f9a4:	198e      	adds	r6, r1, r6
    f9a6:	0431      	lsls	r1, r6, #16
    f9a8:	430b      	orrs	r3, r1
    f9aa:	603b      	str	r3, [r7, #0]
    f9ac:	cc08      	ldmia	r4!, {r3}
    f9ae:	9903      	ldr	r1, [sp, #12]
    f9b0:	0c1b      	lsrs	r3, r3, #16
    f9b2:	434b      	muls	r3, r1
    f9b4:	6879      	ldr	r1, [r7, #4]
    f9b6:	0c36      	lsrs	r6, r6, #16
    f9b8:	b289      	uxth	r1, r1
    f9ba:	185b      	adds	r3, r3, r1
    f9bc:	9905      	ldr	r1, [sp, #20]
    f9be:	199b      	adds	r3, r3, r6
    f9c0:	0c1e      	lsrs	r6, r3, #16
    f9c2:	42a1      	cmp	r1, r4
    f9c4:	d8e6      	bhi.n	f994 <__multiply+0xd8>
    f9c6:	6003      	str	r3, [r0, #0]
    f9c8:	9b00      	ldr	r3, [sp, #0]
    f9ca:	3204      	adds	r2, #4
    f9cc:	3304      	adds	r3, #4
    f9ce:	9300      	str	r3, [sp, #0]
    f9d0:	e7a0      	b.n	f914 <__multiply+0x58>
    f9d2:	9b01      	ldr	r3, [sp, #4]
    f9d4:	3b01      	subs	r3, #1
    f9d6:	9301      	str	r3, [sp, #4]
    f9d8:	e79f      	b.n	f91a <__multiply+0x5e>
	...

0000f9dc <__pow5mult>:
    f9dc:	2303      	movs	r3, #3
    f9de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f9e0:	4013      	ands	r3, r2
    f9e2:	0005      	movs	r5, r0
    f9e4:	000e      	movs	r6, r1
    f9e6:	0014      	movs	r4, r2
    f9e8:	2b00      	cmp	r3, #0
    f9ea:	d008      	beq.n	f9fe <__pow5mult+0x22>
    f9ec:	4922      	ldr	r1, [pc, #136]	; (fa78 <__pow5mult+0x9c>)
    f9ee:	3b01      	subs	r3, #1
    f9f0:	009a      	lsls	r2, r3, #2
    f9f2:	5852      	ldr	r2, [r2, r1]
    f9f4:	2300      	movs	r3, #0
    f9f6:	0031      	movs	r1, r6
    f9f8:	f7ff fed2 	bl	f7a0 <__multadd>
    f9fc:	0006      	movs	r6, r0
    f9fe:	10a3      	asrs	r3, r4, #2
    fa00:	9301      	str	r3, [sp, #4]
    fa02:	d036      	beq.n	fa72 <__pow5mult+0x96>
    fa04:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    fa06:	2c00      	cmp	r4, #0
    fa08:	d107      	bne.n	fa1a <__pow5mult+0x3e>
    fa0a:	2010      	movs	r0, #16
    fa0c:	f7fd f804 	bl	ca18 <malloc>
    fa10:	6268      	str	r0, [r5, #36]	; 0x24
    fa12:	6044      	str	r4, [r0, #4]
    fa14:	6084      	str	r4, [r0, #8]
    fa16:	6004      	str	r4, [r0, #0]
    fa18:	60c4      	str	r4, [r0, #12]
    fa1a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    fa1c:	68bc      	ldr	r4, [r7, #8]
    fa1e:	2c00      	cmp	r4, #0
    fa20:	d107      	bne.n	fa32 <__pow5mult+0x56>
    fa22:	4916      	ldr	r1, [pc, #88]	; (fa7c <__pow5mult+0xa0>)
    fa24:	0028      	movs	r0, r5
    fa26:	f7ff ff40 	bl	f8aa <__i2b>
    fa2a:	2300      	movs	r3, #0
    fa2c:	0004      	movs	r4, r0
    fa2e:	60b8      	str	r0, [r7, #8]
    fa30:	6003      	str	r3, [r0, #0]
    fa32:	2201      	movs	r2, #1
    fa34:	9b01      	ldr	r3, [sp, #4]
    fa36:	4213      	tst	r3, r2
    fa38:	d00a      	beq.n	fa50 <__pow5mult+0x74>
    fa3a:	0031      	movs	r1, r6
    fa3c:	0022      	movs	r2, r4
    fa3e:	0028      	movs	r0, r5
    fa40:	f7ff ff3c 	bl	f8bc <__multiply>
    fa44:	0007      	movs	r7, r0
    fa46:	0031      	movs	r1, r6
    fa48:	0028      	movs	r0, r5
    fa4a:	f7ff fe90 	bl	f76e <_Bfree>
    fa4e:	003e      	movs	r6, r7
    fa50:	9b01      	ldr	r3, [sp, #4]
    fa52:	105b      	asrs	r3, r3, #1
    fa54:	9301      	str	r3, [sp, #4]
    fa56:	d00c      	beq.n	fa72 <__pow5mult+0x96>
    fa58:	6820      	ldr	r0, [r4, #0]
    fa5a:	2800      	cmp	r0, #0
    fa5c:	d107      	bne.n	fa6e <__pow5mult+0x92>
    fa5e:	0022      	movs	r2, r4
    fa60:	0021      	movs	r1, r4
    fa62:	0028      	movs	r0, r5
    fa64:	f7ff ff2a 	bl	f8bc <__multiply>
    fa68:	2300      	movs	r3, #0
    fa6a:	6020      	str	r0, [r4, #0]
    fa6c:	6003      	str	r3, [r0, #0]
    fa6e:	0004      	movs	r4, r0
    fa70:	e7df      	b.n	fa32 <__pow5mult+0x56>
    fa72:	0030      	movs	r0, r6
    fa74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fa76:	46c0      	nop			; (mov r8, r8)
    fa78:	00012cb8 	.word	0x00012cb8
    fa7c:	00000271 	.word	0x00000271

0000fa80 <__lshift>:
    fa80:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa82:	000d      	movs	r5, r1
    fa84:	0017      	movs	r7, r2
    fa86:	692b      	ldr	r3, [r5, #16]
    fa88:	1154      	asrs	r4, r2, #5
    fa8a:	b085      	sub	sp, #20
    fa8c:	18e3      	adds	r3, r4, r3
    fa8e:	9302      	str	r3, [sp, #8]
    fa90:	3301      	adds	r3, #1
    fa92:	9301      	str	r3, [sp, #4]
    fa94:	6849      	ldr	r1, [r1, #4]
    fa96:	68ab      	ldr	r3, [r5, #8]
    fa98:	9003      	str	r0, [sp, #12]
    fa9a:	9a01      	ldr	r2, [sp, #4]
    fa9c:	4293      	cmp	r3, r2
    fa9e:	db34      	blt.n	fb0a <__lshift+0x8a>
    faa0:	9803      	ldr	r0, [sp, #12]
    faa2:	f7ff fe2c 	bl	f6fe <_Balloc>
    faa6:	2300      	movs	r3, #0
    faa8:	0002      	movs	r2, r0
    faaa:	0006      	movs	r6, r0
    faac:	0019      	movs	r1, r3
    faae:	3214      	adds	r2, #20
    fab0:	42a3      	cmp	r3, r4
    fab2:	db2d      	blt.n	fb10 <__lshift+0x90>
    fab4:	43e3      	mvns	r3, r4
    fab6:	17db      	asrs	r3, r3, #31
    fab8:	401c      	ands	r4, r3
    faba:	002b      	movs	r3, r5
    fabc:	211f      	movs	r1, #31
    fabe:	00a4      	lsls	r4, r4, #2
    fac0:	1914      	adds	r4, r2, r4
    fac2:	692a      	ldr	r2, [r5, #16]
    fac4:	3314      	adds	r3, #20
    fac6:	0092      	lsls	r2, r2, #2
    fac8:	189a      	adds	r2, r3, r2
    faca:	400f      	ands	r7, r1
    facc:	d024      	beq.n	fb18 <__lshift+0x98>
    face:	3101      	adds	r1, #1
    fad0:	1bc9      	subs	r1, r1, r7
    fad2:	468c      	mov	ip, r1
    fad4:	2100      	movs	r1, #0
    fad6:	6818      	ldr	r0, [r3, #0]
    fad8:	40b8      	lsls	r0, r7
    fada:	4301      	orrs	r1, r0
    fadc:	4660      	mov	r0, ip
    fade:	6021      	str	r1, [r4, #0]
    fae0:	cb02      	ldmia	r3!, {r1}
    fae2:	3404      	adds	r4, #4
    fae4:	40c1      	lsrs	r1, r0
    fae6:	429a      	cmp	r2, r3
    fae8:	d8f5      	bhi.n	fad6 <__lshift+0x56>
    faea:	6021      	str	r1, [r4, #0]
    faec:	2900      	cmp	r1, #0
    faee:	d002      	beq.n	faf6 <__lshift+0x76>
    faf0:	9b02      	ldr	r3, [sp, #8]
    faf2:	3302      	adds	r3, #2
    faf4:	9301      	str	r3, [sp, #4]
    faf6:	9b01      	ldr	r3, [sp, #4]
    faf8:	9803      	ldr	r0, [sp, #12]
    fafa:	3b01      	subs	r3, #1
    fafc:	6133      	str	r3, [r6, #16]
    fafe:	0029      	movs	r1, r5
    fb00:	f7ff fe35 	bl	f76e <_Bfree>
    fb04:	0030      	movs	r0, r6
    fb06:	b005      	add	sp, #20
    fb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb0a:	3101      	adds	r1, #1
    fb0c:	005b      	lsls	r3, r3, #1
    fb0e:	e7c4      	b.n	fa9a <__lshift+0x1a>
    fb10:	0098      	lsls	r0, r3, #2
    fb12:	5011      	str	r1, [r2, r0]
    fb14:	3301      	adds	r3, #1
    fb16:	e7cb      	b.n	fab0 <__lshift+0x30>
    fb18:	cb02      	ldmia	r3!, {r1}
    fb1a:	c402      	stmia	r4!, {r1}
    fb1c:	429a      	cmp	r2, r3
    fb1e:	d8fb      	bhi.n	fb18 <__lshift+0x98>
    fb20:	e7e9      	b.n	faf6 <__lshift+0x76>

0000fb22 <__mcmp>:
    fb22:	690a      	ldr	r2, [r1, #16]
    fb24:	6903      	ldr	r3, [r0, #16]
    fb26:	b530      	push	{r4, r5, lr}
    fb28:	1a9b      	subs	r3, r3, r2
    fb2a:	d10e      	bne.n	fb4a <__mcmp+0x28>
    fb2c:	0092      	lsls	r2, r2, #2
    fb2e:	3014      	adds	r0, #20
    fb30:	3114      	adds	r1, #20
    fb32:	1884      	adds	r4, r0, r2
    fb34:	1889      	adds	r1, r1, r2
    fb36:	3c04      	subs	r4, #4
    fb38:	3904      	subs	r1, #4
    fb3a:	6822      	ldr	r2, [r4, #0]
    fb3c:	680d      	ldr	r5, [r1, #0]
    fb3e:	42aa      	cmp	r2, r5
    fb40:	d005      	beq.n	fb4e <__mcmp+0x2c>
    fb42:	42aa      	cmp	r2, r5
    fb44:	4192      	sbcs	r2, r2
    fb46:	2301      	movs	r3, #1
    fb48:	4313      	orrs	r3, r2
    fb4a:	0018      	movs	r0, r3
    fb4c:	bd30      	pop	{r4, r5, pc}
    fb4e:	42a0      	cmp	r0, r4
    fb50:	d3f1      	bcc.n	fb36 <__mcmp+0x14>
    fb52:	e7fa      	b.n	fb4a <__mcmp+0x28>

0000fb54 <__mdiff>:
    fb54:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb56:	000d      	movs	r5, r1
    fb58:	b085      	sub	sp, #20
    fb5a:	0007      	movs	r7, r0
    fb5c:	0011      	movs	r1, r2
    fb5e:	0028      	movs	r0, r5
    fb60:	0014      	movs	r4, r2
    fb62:	f7ff ffde 	bl	fb22 <__mcmp>
    fb66:	1e06      	subs	r6, r0, #0
    fb68:	d108      	bne.n	fb7c <__mdiff+0x28>
    fb6a:	0001      	movs	r1, r0
    fb6c:	0038      	movs	r0, r7
    fb6e:	f7ff fdc6 	bl	f6fe <_Balloc>
    fb72:	2301      	movs	r3, #1
    fb74:	6146      	str	r6, [r0, #20]
    fb76:	6103      	str	r3, [r0, #16]
    fb78:	b005      	add	sp, #20
    fb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb7c:	2301      	movs	r3, #1
    fb7e:	9301      	str	r3, [sp, #4]
    fb80:	2800      	cmp	r0, #0
    fb82:	db04      	blt.n	fb8e <__mdiff+0x3a>
    fb84:	0023      	movs	r3, r4
    fb86:	002c      	movs	r4, r5
    fb88:	001d      	movs	r5, r3
    fb8a:	2300      	movs	r3, #0
    fb8c:	9301      	str	r3, [sp, #4]
    fb8e:	6861      	ldr	r1, [r4, #4]
    fb90:	0038      	movs	r0, r7
    fb92:	f7ff fdb4 	bl	f6fe <_Balloc>
    fb96:	002f      	movs	r7, r5
    fb98:	2200      	movs	r2, #0
    fb9a:	9b01      	ldr	r3, [sp, #4]
    fb9c:	6926      	ldr	r6, [r4, #16]
    fb9e:	60c3      	str	r3, [r0, #12]
    fba0:	3414      	adds	r4, #20
    fba2:	00b3      	lsls	r3, r6, #2
    fba4:	18e3      	adds	r3, r4, r3
    fba6:	9302      	str	r3, [sp, #8]
    fba8:	692b      	ldr	r3, [r5, #16]
    fbaa:	3714      	adds	r7, #20
    fbac:	009b      	lsls	r3, r3, #2
    fbae:	18fb      	adds	r3, r7, r3
    fbb0:	9303      	str	r3, [sp, #12]
    fbb2:	0003      	movs	r3, r0
    fbb4:	4694      	mov	ip, r2
    fbb6:	3314      	adds	r3, #20
    fbb8:	cc20      	ldmia	r4!, {r5}
    fbba:	cf04      	ldmia	r7!, {r2}
    fbbc:	9201      	str	r2, [sp, #4]
    fbbe:	b2aa      	uxth	r2, r5
    fbc0:	4494      	add	ip, r2
    fbc2:	466a      	mov	r2, sp
    fbc4:	4661      	mov	r1, ip
    fbc6:	8892      	ldrh	r2, [r2, #4]
    fbc8:	0c2d      	lsrs	r5, r5, #16
    fbca:	1a8a      	subs	r2, r1, r2
    fbcc:	9901      	ldr	r1, [sp, #4]
    fbce:	0c09      	lsrs	r1, r1, #16
    fbd0:	1a69      	subs	r1, r5, r1
    fbd2:	1415      	asrs	r5, r2, #16
    fbd4:	1949      	adds	r1, r1, r5
    fbd6:	140d      	asrs	r5, r1, #16
    fbd8:	b292      	uxth	r2, r2
    fbda:	0409      	lsls	r1, r1, #16
    fbdc:	430a      	orrs	r2, r1
    fbde:	601a      	str	r2, [r3, #0]
    fbe0:	9a03      	ldr	r2, [sp, #12]
    fbe2:	46ac      	mov	ip, r5
    fbe4:	3304      	adds	r3, #4
    fbe6:	42ba      	cmp	r2, r7
    fbe8:	d8e6      	bhi.n	fbb8 <__mdiff+0x64>
    fbea:	9902      	ldr	r1, [sp, #8]
    fbec:	001a      	movs	r2, r3
    fbee:	428c      	cmp	r4, r1
    fbf0:	d305      	bcc.n	fbfe <__mdiff+0xaa>
    fbf2:	3a04      	subs	r2, #4
    fbf4:	6813      	ldr	r3, [r2, #0]
    fbf6:	2b00      	cmp	r3, #0
    fbf8:	d00e      	beq.n	fc18 <__mdiff+0xc4>
    fbfa:	6106      	str	r6, [r0, #16]
    fbfc:	e7bc      	b.n	fb78 <__mdiff+0x24>
    fbfe:	cc04      	ldmia	r4!, {r2}
    fc00:	b291      	uxth	r1, r2
    fc02:	4461      	add	r1, ip
    fc04:	140d      	asrs	r5, r1, #16
    fc06:	0c12      	lsrs	r2, r2, #16
    fc08:	1952      	adds	r2, r2, r5
    fc0a:	1415      	asrs	r5, r2, #16
    fc0c:	b289      	uxth	r1, r1
    fc0e:	0412      	lsls	r2, r2, #16
    fc10:	430a      	orrs	r2, r1
    fc12:	46ac      	mov	ip, r5
    fc14:	c304      	stmia	r3!, {r2}
    fc16:	e7e8      	b.n	fbea <__mdiff+0x96>
    fc18:	3e01      	subs	r6, #1
    fc1a:	e7ea      	b.n	fbf2 <__mdiff+0x9e>

0000fc1c <__d2b>:
    fc1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fc1e:	001d      	movs	r5, r3
    fc20:	2101      	movs	r1, #1
    fc22:	9f08      	ldr	r7, [sp, #32]
    fc24:	0014      	movs	r4, r2
    fc26:	f7ff fd6a 	bl	f6fe <_Balloc>
    fc2a:	032b      	lsls	r3, r5, #12
    fc2c:	006d      	lsls	r5, r5, #1
    fc2e:	0006      	movs	r6, r0
    fc30:	0b1b      	lsrs	r3, r3, #12
    fc32:	0d6d      	lsrs	r5, r5, #21
    fc34:	d124      	bne.n	fc80 <__d2b+0x64>
    fc36:	9301      	str	r3, [sp, #4]
    fc38:	2c00      	cmp	r4, #0
    fc3a:	d027      	beq.n	fc8c <__d2b+0x70>
    fc3c:	4668      	mov	r0, sp
    fc3e:	9400      	str	r4, [sp, #0]
    fc40:	f7ff fe04 	bl	f84c <__lo0bits>
    fc44:	9c00      	ldr	r4, [sp, #0]
    fc46:	2800      	cmp	r0, #0
    fc48:	d01e      	beq.n	fc88 <__d2b+0x6c>
    fc4a:	9b01      	ldr	r3, [sp, #4]
    fc4c:	2120      	movs	r1, #32
    fc4e:	001a      	movs	r2, r3
    fc50:	1a09      	subs	r1, r1, r0
    fc52:	408a      	lsls	r2, r1
    fc54:	40c3      	lsrs	r3, r0
    fc56:	4322      	orrs	r2, r4
    fc58:	6172      	str	r2, [r6, #20]
    fc5a:	9301      	str	r3, [sp, #4]
    fc5c:	9c01      	ldr	r4, [sp, #4]
    fc5e:	61b4      	str	r4, [r6, #24]
    fc60:	1e63      	subs	r3, r4, #1
    fc62:	419c      	sbcs	r4, r3
    fc64:	3401      	adds	r4, #1
    fc66:	6134      	str	r4, [r6, #16]
    fc68:	2d00      	cmp	r5, #0
    fc6a:	d018      	beq.n	fc9e <__d2b+0x82>
    fc6c:	4b12      	ldr	r3, [pc, #72]	; (fcb8 <__d2b+0x9c>)
    fc6e:	18ed      	adds	r5, r5, r3
    fc70:	2335      	movs	r3, #53	; 0x35
    fc72:	182d      	adds	r5, r5, r0
    fc74:	603d      	str	r5, [r7, #0]
    fc76:	1a18      	subs	r0, r3, r0
    fc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc7a:	6018      	str	r0, [r3, #0]
    fc7c:	0030      	movs	r0, r6
    fc7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fc80:	2280      	movs	r2, #128	; 0x80
    fc82:	0352      	lsls	r2, r2, #13
    fc84:	4313      	orrs	r3, r2
    fc86:	e7d6      	b.n	fc36 <__d2b+0x1a>
    fc88:	6174      	str	r4, [r6, #20]
    fc8a:	e7e7      	b.n	fc5c <__d2b+0x40>
    fc8c:	a801      	add	r0, sp, #4
    fc8e:	f7ff fddd 	bl	f84c <__lo0bits>
    fc92:	2401      	movs	r4, #1
    fc94:	9b01      	ldr	r3, [sp, #4]
    fc96:	6134      	str	r4, [r6, #16]
    fc98:	6173      	str	r3, [r6, #20]
    fc9a:	3020      	adds	r0, #32
    fc9c:	e7e4      	b.n	fc68 <__d2b+0x4c>
    fc9e:	4b07      	ldr	r3, [pc, #28]	; (fcbc <__d2b+0xa0>)
    fca0:	18c0      	adds	r0, r0, r3
    fca2:	4b07      	ldr	r3, [pc, #28]	; (fcc0 <__d2b+0xa4>)
    fca4:	6038      	str	r0, [r7, #0]
    fca6:	18e3      	adds	r3, r4, r3
    fca8:	009b      	lsls	r3, r3, #2
    fcaa:	18f3      	adds	r3, r6, r3
    fcac:	6958      	ldr	r0, [r3, #20]
    fcae:	f7ff fdb3 	bl	f818 <__hi0bits>
    fcb2:	0164      	lsls	r4, r4, #5
    fcb4:	1a20      	subs	r0, r4, r0
    fcb6:	e7df      	b.n	fc78 <__d2b+0x5c>
    fcb8:	fffffbcd 	.word	0xfffffbcd
    fcbc:	fffffbce 	.word	0xfffffbce
    fcc0:	3fffffff 	.word	0x3fffffff

0000fcc4 <_calloc_r>:
    fcc4:	434a      	muls	r2, r1
    fcc6:	b570      	push	{r4, r5, r6, lr}
    fcc8:	0011      	movs	r1, r2
    fcca:	0014      	movs	r4, r2
    fccc:	f7fd f99c 	bl	d008 <_malloc_r>
    fcd0:	1e05      	subs	r5, r0, #0
    fcd2:	d003      	beq.n	fcdc <_calloc_r+0x18>
    fcd4:	0022      	movs	r2, r4
    fcd6:	2100      	movs	r1, #0
    fcd8:	f7fc feee 	bl	cab8 <memset>
    fcdc:	0028      	movs	r0, r5
    fcde:	bd70      	pop	{r4, r5, r6, pc}

0000fce0 <_realloc_r>:
    fce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fce2:	0007      	movs	r7, r0
    fce4:	000d      	movs	r5, r1
    fce6:	0016      	movs	r6, r2
    fce8:	2900      	cmp	r1, #0
    fcea:	d105      	bne.n	fcf8 <_realloc_r+0x18>
    fcec:	0011      	movs	r1, r2
    fcee:	f7fd f98b 	bl	d008 <_malloc_r>
    fcf2:	0004      	movs	r4, r0
    fcf4:	0020      	movs	r0, r4
    fcf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fcf8:	2a00      	cmp	r2, #0
    fcfa:	d103      	bne.n	fd04 <_realloc_r+0x24>
    fcfc:	f7fd f93a 	bl	cf74 <_free_r>
    fd00:	0034      	movs	r4, r6
    fd02:	e7f7      	b.n	fcf4 <_realloc_r+0x14>
    fd04:	f000 fb44 	bl	10390 <_malloc_usable_size_r>
    fd08:	002c      	movs	r4, r5
    fd0a:	4286      	cmp	r6, r0
    fd0c:	d9f2      	bls.n	fcf4 <_realloc_r+0x14>
    fd0e:	0031      	movs	r1, r6
    fd10:	0038      	movs	r0, r7
    fd12:	f7fd f979 	bl	d008 <_malloc_r>
    fd16:	1e04      	subs	r4, r0, #0
    fd18:	d0ec      	beq.n	fcf4 <_realloc_r+0x14>
    fd1a:	0029      	movs	r1, r5
    fd1c:	0032      	movs	r2, r6
    fd1e:	f7fc feb0 	bl	ca82 <memcpy>
    fd22:	0029      	movs	r1, r5
    fd24:	0038      	movs	r0, r7
    fd26:	f7fd f925 	bl	cf74 <_free_r>
    fd2a:	e7e3      	b.n	fcf4 <_realloc_r+0x14>

0000fd2c <__ssputs_r>:
    fd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd2e:	688e      	ldr	r6, [r1, #8]
    fd30:	b085      	sub	sp, #20
    fd32:	0007      	movs	r7, r0
    fd34:	000c      	movs	r4, r1
    fd36:	9203      	str	r2, [sp, #12]
    fd38:	9301      	str	r3, [sp, #4]
    fd3a:	429e      	cmp	r6, r3
    fd3c:	d839      	bhi.n	fdb2 <__ssputs_r+0x86>
    fd3e:	2390      	movs	r3, #144	; 0x90
    fd40:	898a      	ldrh	r2, [r1, #12]
    fd42:	00db      	lsls	r3, r3, #3
    fd44:	421a      	tst	r2, r3
    fd46:	d034      	beq.n	fdb2 <__ssputs_r+0x86>
    fd48:	2503      	movs	r5, #3
    fd4a:	6909      	ldr	r1, [r1, #16]
    fd4c:	6823      	ldr	r3, [r4, #0]
    fd4e:	1a5b      	subs	r3, r3, r1
    fd50:	9302      	str	r3, [sp, #8]
    fd52:	6963      	ldr	r3, [r4, #20]
    fd54:	9802      	ldr	r0, [sp, #8]
    fd56:	435d      	muls	r5, r3
    fd58:	0feb      	lsrs	r3, r5, #31
    fd5a:	195d      	adds	r5, r3, r5
    fd5c:	9b01      	ldr	r3, [sp, #4]
    fd5e:	106d      	asrs	r5, r5, #1
    fd60:	3301      	adds	r3, #1
    fd62:	181b      	adds	r3, r3, r0
    fd64:	42ab      	cmp	r3, r5
    fd66:	d900      	bls.n	fd6a <__ssputs_r+0x3e>
    fd68:	001d      	movs	r5, r3
    fd6a:	0553      	lsls	r3, r2, #21
    fd6c:	d532      	bpl.n	fdd4 <__ssputs_r+0xa8>
    fd6e:	0029      	movs	r1, r5
    fd70:	0038      	movs	r0, r7
    fd72:	f7fd f949 	bl	d008 <_malloc_r>
    fd76:	1e06      	subs	r6, r0, #0
    fd78:	d109      	bne.n	fd8e <__ssputs_r+0x62>
    fd7a:	230c      	movs	r3, #12
    fd7c:	603b      	str	r3, [r7, #0]
    fd7e:	2340      	movs	r3, #64	; 0x40
    fd80:	2001      	movs	r0, #1
    fd82:	89a2      	ldrh	r2, [r4, #12]
    fd84:	4240      	negs	r0, r0
    fd86:	4313      	orrs	r3, r2
    fd88:	81a3      	strh	r3, [r4, #12]
    fd8a:	b005      	add	sp, #20
    fd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd8e:	9a02      	ldr	r2, [sp, #8]
    fd90:	6921      	ldr	r1, [r4, #16]
    fd92:	f7fc fe76 	bl	ca82 <memcpy>
    fd96:	89a3      	ldrh	r3, [r4, #12]
    fd98:	4a14      	ldr	r2, [pc, #80]	; (fdec <__ssputs_r+0xc0>)
    fd9a:	401a      	ands	r2, r3
    fd9c:	2380      	movs	r3, #128	; 0x80
    fd9e:	4313      	orrs	r3, r2
    fda0:	81a3      	strh	r3, [r4, #12]
    fda2:	9b02      	ldr	r3, [sp, #8]
    fda4:	6126      	str	r6, [r4, #16]
    fda6:	18f6      	adds	r6, r6, r3
    fda8:	6026      	str	r6, [r4, #0]
    fdaa:	6165      	str	r5, [r4, #20]
    fdac:	9e01      	ldr	r6, [sp, #4]
    fdae:	1aed      	subs	r5, r5, r3
    fdb0:	60a5      	str	r5, [r4, #8]
    fdb2:	9b01      	ldr	r3, [sp, #4]
    fdb4:	42b3      	cmp	r3, r6
    fdb6:	d200      	bcs.n	fdba <__ssputs_r+0x8e>
    fdb8:	001e      	movs	r6, r3
    fdba:	0032      	movs	r2, r6
    fdbc:	9903      	ldr	r1, [sp, #12]
    fdbe:	6820      	ldr	r0, [r4, #0]
    fdc0:	f7fc fe68 	bl	ca94 <memmove>
    fdc4:	68a3      	ldr	r3, [r4, #8]
    fdc6:	2000      	movs	r0, #0
    fdc8:	1b9b      	subs	r3, r3, r6
    fdca:	60a3      	str	r3, [r4, #8]
    fdcc:	6823      	ldr	r3, [r4, #0]
    fdce:	199e      	adds	r6, r3, r6
    fdd0:	6026      	str	r6, [r4, #0]
    fdd2:	e7da      	b.n	fd8a <__ssputs_r+0x5e>
    fdd4:	002a      	movs	r2, r5
    fdd6:	0038      	movs	r0, r7
    fdd8:	f7ff ff82 	bl	fce0 <_realloc_r>
    fddc:	1e06      	subs	r6, r0, #0
    fdde:	d1e0      	bne.n	fda2 <__ssputs_r+0x76>
    fde0:	6921      	ldr	r1, [r4, #16]
    fde2:	0038      	movs	r0, r7
    fde4:	f7fd f8c6 	bl	cf74 <_free_r>
    fde8:	e7c7      	b.n	fd7a <__ssputs_r+0x4e>
    fdea:	46c0      	nop			; (mov r8, r8)
    fdec:	fffffb7f 	.word	0xfffffb7f

0000fdf0 <_svfiprintf_r>:
    fdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdf2:	b09f      	sub	sp, #124	; 0x7c
    fdf4:	9002      	str	r0, [sp, #8]
    fdf6:	9305      	str	r3, [sp, #20]
    fdf8:	898b      	ldrh	r3, [r1, #12]
    fdfa:	000f      	movs	r7, r1
    fdfc:	0016      	movs	r6, r2
    fdfe:	061b      	lsls	r3, r3, #24
    fe00:	d511      	bpl.n	fe26 <_svfiprintf_r+0x36>
    fe02:	690b      	ldr	r3, [r1, #16]
    fe04:	2b00      	cmp	r3, #0
    fe06:	d10e      	bne.n	fe26 <_svfiprintf_r+0x36>
    fe08:	2140      	movs	r1, #64	; 0x40
    fe0a:	f7fd f8fd 	bl	d008 <_malloc_r>
    fe0e:	6038      	str	r0, [r7, #0]
    fe10:	6138      	str	r0, [r7, #16]
    fe12:	2800      	cmp	r0, #0
    fe14:	d105      	bne.n	fe22 <_svfiprintf_r+0x32>
    fe16:	230c      	movs	r3, #12
    fe18:	9a02      	ldr	r2, [sp, #8]
    fe1a:	3801      	subs	r0, #1
    fe1c:	6013      	str	r3, [r2, #0]
    fe1e:	b01f      	add	sp, #124	; 0x7c
    fe20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe22:	2340      	movs	r3, #64	; 0x40
    fe24:	617b      	str	r3, [r7, #20]
    fe26:	2300      	movs	r3, #0
    fe28:	ad06      	add	r5, sp, #24
    fe2a:	616b      	str	r3, [r5, #20]
    fe2c:	3320      	adds	r3, #32
    fe2e:	766b      	strb	r3, [r5, #25]
    fe30:	3310      	adds	r3, #16
    fe32:	76ab      	strb	r3, [r5, #26]
    fe34:	0034      	movs	r4, r6
    fe36:	7823      	ldrb	r3, [r4, #0]
    fe38:	2b00      	cmp	r3, #0
    fe3a:	d147      	bne.n	fecc <_svfiprintf_r+0xdc>
    fe3c:	1ba3      	subs	r3, r4, r6
    fe3e:	9304      	str	r3, [sp, #16]
    fe40:	d00d      	beq.n	fe5e <_svfiprintf_r+0x6e>
    fe42:	1ba3      	subs	r3, r4, r6
    fe44:	0032      	movs	r2, r6
    fe46:	0039      	movs	r1, r7
    fe48:	9802      	ldr	r0, [sp, #8]
    fe4a:	f7ff ff6f 	bl	fd2c <__ssputs_r>
    fe4e:	1c43      	adds	r3, r0, #1
    fe50:	d100      	bne.n	fe54 <_svfiprintf_r+0x64>
    fe52:	e0b5      	b.n	ffc0 <_svfiprintf_r+0x1d0>
    fe54:	696a      	ldr	r2, [r5, #20]
    fe56:	9b04      	ldr	r3, [sp, #16]
    fe58:	4694      	mov	ip, r2
    fe5a:	4463      	add	r3, ip
    fe5c:	616b      	str	r3, [r5, #20]
    fe5e:	7823      	ldrb	r3, [r4, #0]
    fe60:	2b00      	cmp	r3, #0
    fe62:	d100      	bne.n	fe66 <_svfiprintf_r+0x76>
    fe64:	e0ac      	b.n	ffc0 <_svfiprintf_r+0x1d0>
    fe66:	2201      	movs	r2, #1
    fe68:	2300      	movs	r3, #0
    fe6a:	4252      	negs	r2, r2
    fe6c:	606a      	str	r2, [r5, #4]
    fe6e:	a902      	add	r1, sp, #8
    fe70:	3254      	adds	r2, #84	; 0x54
    fe72:	1852      	adds	r2, r2, r1
    fe74:	3401      	adds	r4, #1
    fe76:	602b      	str	r3, [r5, #0]
    fe78:	60eb      	str	r3, [r5, #12]
    fe7a:	60ab      	str	r3, [r5, #8]
    fe7c:	7013      	strb	r3, [r2, #0]
    fe7e:	65ab      	str	r3, [r5, #88]	; 0x58
    fe80:	4e58      	ldr	r6, [pc, #352]	; (ffe4 <_svfiprintf_r+0x1f4>)
    fe82:	2205      	movs	r2, #5
    fe84:	7821      	ldrb	r1, [r4, #0]
    fe86:	0030      	movs	r0, r6
    fe88:	f7ff fc2c 	bl	f6e4 <memchr>
    fe8c:	1c62      	adds	r2, r4, #1
    fe8e:	2800      	cmp	r0, #0
    fe90:	d120      	bne.n	fed4 <_svfiprintf_r+0xe4>
    fe92:	6829      	ldr	r1, [r5, #0]
    fe94:	06cb      	lsls	r3, r1, #27
    fe96:	d504      	bpl.n	fea2 <_svfiprintf_r+0xb2>
    fe98:	2353      	movs	r3, #83	; 0x53
    fe9a:	ae02      	add	r6, sp, #8
    fe9c:	3020      	adds	r0, #32
    fe9e:	199b      	adds	r3, r3, r6
    fea0:	7018      	strb	r0, [r3, #0]
    fea2:	070b      	lsls	r3, r1, #28
    fea4:	d504      	bpl.n	feb0 <_svfiprintf_r+0xc0>
    fea6:	2353      	movs	r3, #83	; 0x53
    fea8:	202b      	movs	r0, #43	; 0x2b
    feaa:	ae02      	add	r6, sp, #8
    feac:	199b      	adds	r3, r3, r6
    feae:	7018      	strb	r0, [r3, #0]
    feb0:	7823      	ldrb	r3, [r4, #0]
    feb2:	2b2a      	cmp	r3, #42	; 0x2a
    feb4:	d016      	beq.n	fee4 <_svfiprintf_r+0xf4>
    feb6:	2000      	movs	r0, #0
    feb8:	210a      	movs	r1, #10
    feba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    febc:	7822      	ldrb	r2, [r4, #0]
    febe:	3a30      	subs	r2, #48	; 0x30
    fec0:	2a09      	cmp	r2, #9
    fec2:	d955      	bls.n	ff70 <_svfiprintf_r+0x180>
    fec4:	2800      	cmp	r0, #0
    fec6:	d015      	beq.n	fef4 <_svfiprintf_r+0x104>
    fec8:	9309      	str	r3, [sp, #36]	; 0x24
    feca:	e013      	b.n	fef4 <_svfiprintf_r+0x104>
    fecc:	2b25      	cmp	r3, #37	; 0x25
    fece:	d0b5      	beq.n	fe3c <_svfiprintf_r+0x4c>
    fed0:	3401      	adds	r4, #1
    fed2:	e7b0      	b.n	fe36 <_svfiprintf_r+0x46>
    fed4:	2301      	movs	r3, #1
    fed6:	1b80      	subs	r0, r0, r6
    fed8:	4083      	lsls	r3, r0
    feda:	6829      	ldr	r1, [r5, #0]
    fedc:	0014      	movs	r4, r2
    fede:	430b      	orrs	r3, r1
    fee0:	602b      	str	r3, [r5, #0]
    fee2:	e7cd      	b.n	fe80 <_svfiprintf_r+0x90>
    fee4:	9b05      	ldr	r3, [sp, #20]
    fee6:	1d18      	adds	r0, r3, #4
    fee8:	681b      	ldr	r3, [r3, #0]
    feea:	9005      	str	r0, [sp, #20]
    feec:	2b00      	cmp	r3, #0
    feee:	db39      	blt.n	ff64 <_svfiprintf_r+0x174>
    fef0:	9309      	str	r3, [sp, #36]	; 0x24
    fef2:	0014      	movs	r4, r2
    fef4:	7823      	ldrb	r3, [r4, #0]
    fef6:	2b2e      	cmp	r3, #46	; 0x2e
    fef8:	d10b      	bne.n	ff12 <_svfiprintf_r+0x122>
    fefa:	7863      	ldrb	r3, [r4, #1]
    fefc:	1c62      	adds	r2, r4, #1
    fefe:	2b2a      	cmp	r3, #42	; 0x2a
    ff00:	d13e      	bne.n	ff80 <_svfiprintf_r+0x190>
    ff02:	9b05      	ldr	r3, [sp, #20]
    ff04:	3402      	adds	r4, #2
    ff06:	1d1a      	adds	r2, r3, #4
    ff08:	681b      	ldr	r3, [r3, #0]
    ff0a:	9205      	str	r2, [sp, #20]
    ff0c:	2b00      	cmp	r3, #0
    ff0e:	db34      	blt.n	ff7a <_svfiprintf_r+0x18a>
    ff10:	9307      	str	r3, [sp, #28]
    ff12:	4e35      	ldr	r6, [pc, #212]	; (ffe8 <_svfiprintf_r+0x1f8>)
    ff14:	7821      	ldrb	r1, [r4, #0]
    ff16:	2203      	movs	r2, #3
    ff18:	0030      	movs	r0, r6
    ff1a:	f7ff fbe3 	bl	f6e4 <memchr>
    ff1e:	2800      	cmp	r0, #0
    ff20:	d006      	beq.n	ff30 <_svfiprintf_r+0x140>
    ff22:	2340      	movs	r3, #64	; 0x40
    ff24:	1b80      	subs	r0, r0, r6
    ff26:	4083      	lsls	r3, r0
    ff28:	682a      	ldr	r2, [r5, #0]
    ff2a:	3401      	adds	r4, #1
    ff2c:	4313      	orrs	r3, r2
    ff2e:	602b      	str	r3, [r5, #0]
    ff30:	7821      	ldrb	r1, [r4, #0]
    ff32:	2206      	movs	r2, #6
    ff34:	482d      	ldr	r0, [pc, #180]	; (ffec <_svfiprintf_r+0x1fc>)
    ff36:	1c66      	adds	r6, r4, #1
    ff38:	7629      	strb	r1, [r5, #24]
    ff3a:	f7ff fbd3 	bl	f6e4 <memchr>
    ff3e:	2800      	cmp	r0, #0
    ff40:	d046      	beq.n	ffd0 <_svfiprintf_r+0x1e0>
    ff42:	4b2b      	ldr	r3, [pc, #172]	; (fff0 <_svfiprintf_r+0x200>)
    ff44:	2b00      	cmp	r3, #0
    ff46:	d12f      	bne.n	ffa8 <_svfiprintf_r+0x1b8>
    ff48:	6829      	ldr	r1, [r5, #0]
    ff4a:	9b05      	ldr	r3, [sp, #20]
    ff4c:	2207      	movs	r2, #7
    ff4e:	05c9      	lsls	r1, r1, #23
    ff50:	d528      	bpl.n	ffa4 <_svfiprintf_r+0x1b4>
    ff52:	189b      	adds	r3, r3, r2
    ff54:	4393      	bics	r3, r2
    ff56:	3308      	adds	r3, #8
    ff58:	9305      	str	r3, [sp, #20]
    ff5a:	696b      	ldr	r3, [r5, #20]
    ff5c:	9a03      	ldr	r2, [sp, #12]
    ff5e:	189b      	adds	r3, r3, r2
    ff60:	616b      	str	r3, [r5, #20]
    ff62:	e767      	b.n	fe34 <_svfiprintf_r+0x44>
    ff64:	425b      	negs	r3, r3
    ff66:	60eb      	str	r3, [r5, #12]
    ff68:	2302      	movs	r3, #2
    ff6a:	430b      	orrs	r3, r1
    ff6c:	602b      	str	r3, [r5, #0]
    ff6e:	e7c0      	b.n	fef2 <_svfiprintf_r+0x102>
    ff70:	434b      	muls	r3, r1
    ff72:	3401      	adds	r4, #1
    ff74:	189b      	adds	r3, r3, r2
    ff76:	2001      	movs	r0, #1
    ff78:	e7a0      	b.n	febc <_svfiprintf_r+0xcc>
    ff7a:	2301      	movs	r3, #1
    ff7c:	425b      	negs	r3, r3
    ff7e:	e7c7      	b.n	ff10 <_svfiprintf_r+0x120>
    ff80:	2300      	movs	r3, #0
    ff82:	0014      	movs	r4, r2
    ff84:	200a      	movs	r0, #10
    ff86:	001a      	movs	r2, r3
    ff88:	606b      	str	r3, [r5, #4]
    ff8a:	7821      	ldrb	r1, [r4, #0]
    ff8c:	3930      	subs	r1, #48	; 0x30
    ff8e:	2909      	cmp	r1, #9
    ff90:	d903      	bls.n	ff9a <_svfiprintf_r+0x1aa>
    ff92:	2b00      	cmp	r3, #0
    ff94:	d0bd      	beq.n	ff12 <_svfiprintf_r+0x122>
    ff96:	9207      	str	r2, [sp, #28]
    ff98:	e7bb      	b.n	ff12 <_svfiprintf_r+0x122>
    ff9a:	4342      	muls	r2, r0
    ff9c:	3401      	adds	r4, #1
    ff9e:	1852      	adds	r2, r2, r1
    ffa0:	2301      	movs	r3, #1
    ffa2:	e7f2      	b.n	ff8a <_svfiprintf_r+0x19a>
    ffa4:	3307      	adds	r3, #7
    ffa6:	e7d5      	b.n	ff54 <_svfiprintf_r+0x164>
    ffa8:	ab05      	add	r3, sp, #20
    ffaa:	9300      	str	r3, [sp, #0]
    ffac:	003a      	movs	r2, r7
    ffae:	4b11      	ldr	r3, [pc, #68]	; (fff4 <_svfiprintf_r+0x204>)
    ffb0:	0029      	movs	r1, r5
    ffb2:	9802      	ldr	r0, [sp, #8]
    ffb4:	f7fd fa66 	bl	d484 <_printf_float>
    ffb8:	9003      	str	r0, [sp, #12]
    ffba:	9b03      	ldr	r3, [sp, #12]
    ffbc:	3301      	adds	r3, #1
    ffbe:	d1cc      	bne.n	ff5a <_svfiprintf_r+0x16a>
    ffc0:	89bb      	ldrh	r3, [r7, #12]
    ffc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ffc4:	065b      	lsls	r3, r3, #25
    ffc6:	d400      	bmi.n	ffca <_svfiprintf_r+0x1da>
    ffc8:	e729      	b.n	fe1e <_svfiprintf_r+0x2e>
    ffca:	2001      	movs	r0, #1
    ffcc:	4240      	negs	r0, r0
    ffce:	e726      	b.n	fe1e <_svfiprintf_r+0x2e>
    ffd0:	ab05      	add	r3, sp, #20
    ffd2:	9300      	str	r3, [sp, #0]
    ffd4:	003a      	movs	r2, r7
    ffd6:	4b07      	ldr	r3, [pc, #28]	; (fff4 <_svfiprintf_r+0x204>)
    ffd8:	0029      	movs	r1, r5
    ffda:	9802      	ldr	r0, [sp, #8]
    ffdc:	f7fd fd0c 	bl	d9f8 <_printf_i>
    ffe0:	e7ea      	b.n	ffb8 <_svfiprintf_r+0x1c8>
    ffe2:	46c0      	nop			; (mov r8, r8)
    ffe4:	00012978 	.word	0x00012978
    ffe8:	0001297e 	.word	0x0001297e
    ffec:	00012982 	.word	0x00012982
    fff0:	0000d485 	.word	0x0000d485
    fff4:	0000fd2d 	.word	0x0000fd2d

0000fff8 <_raise_r>:
    fff8:	b570      	push	{r4, r5, r6, lr}
    fffa:	0004      	movs	r4, r0
    fffc:	000d      	movs	r5, r1
    fffe:	291f      	cmp	r1, #31
   10000:	d904      	bls.n	1000c <_raise_r+0x14>
   10002:	2316      	movs	r3, #22
   10004:	6003      	str	r3, [r0, #0]
   10006:	2001      	movs	r0, #1
   10008:	4240      	negs	r0, r0
   1000a:	bd70      	pop	{r4, r5, r6, pc}
   1000c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1000e:	2b00      	cmp	r3, #0
   10010:	d004      	beq.n	1001c <_raise_r+0x24>
   10012:	008a      	lsls	r2, r1, #2
   10014:	189b      	adds	r3, r3, r2
   10016:	681a      	ldr	r2, [r3, #0]
   10018:	2a00      	cmp	r2, #0
   1001a:	d108      	bne.n	1002e <_raise_r+0x36>
   1001c:	0020      	movs	r0, r4
   1001e:	f000 f831 	bl	10084 <_getpid_r>
   10022:	002a      	movs	r2, r5
   10024:	0001      	movs	r1, r0
   10026:	0020      	movs	r0, r4
   10028:	f000 f81a 	bl	10060 <_kill_r>
   1002c:	e7ed      	b.n	1000a <_raise_r+0x12>
   1002e:	2000      	movs	r0, #0
   10030:	2a01      	cmp	r2, #1
   10032:	d0ea      	beq.n	1000a <_raise_r+0x12>
   10034:	1c51      	adds	r1, r2, #1
   10036:	d103      	bne.n	10040 <_raise_r+0x48>
   10038:	2316      	movs	r3, #22
   1003a:	3001      	adds	r0, #1
   1003c:	6023      	str	r3, [r4, #0]
   1003e:	e7e4      	b.n	1000a <_raise_r+0x12>
   10040:	2400      	movs	r4, #0
   10042:	0028      	movs	r0, r5
   10044:	601c      	str	r4, [r3, #0]
   10046:	4790      	blx	r2
   10048:	0020      	movs	r0, r4
   1004a:	e7de      	b.n	1000a <_raise_r+0x12>

0001004c <raise>:
   1004c:	b510      	push	{r4, lr}
   1004e:	4b03      	ldr	r3, [pc, #12]	; (1005c <raise+0x10>)
   10050:	0001      	movs	r1, r0
   10052:	6818      	ldr	r0, [r3, #0]
   10054:	f7ff ffd0 	bl	fff8 <_raise_r>
   10058:	bd10      	pop	{r4, pc}
   1005a:	46c0      	nop			; (mov r8, r8)
   1005c:	200000b4 	.word	0x200000b4

00010060 <_kill_r>:
   10060:	2300      	movs	r3, #0
   10062:	b570      	push	{r4, r5, r6, lr}
   10064:	4c06      	ldr	r4, [pc, #24]	; (10080 <_kill_r+0x20>)
   10066:	0005      	movs	r5, r0
   10068:	0008      	movs	r0, r1
   1006a:	0011      	movs	r1, r2
   1006c:	6023      	str	r3, [r4, #0]
   1006e:	f000 fd81 	bl	10b74 <_kill>
   10072:	1c43      	adds	r3, r0, #1
   10074:	d103      	bne.n	1007e <_kill_r+0x1e>
   10076:	6823      	ldr	r3, [r4, #0]
   10078:	2b00      	cmp	r3, #0
   1007a:	d000      	beq.n	1007e <_kill_r+0x1e>
   1007c:	602b      	str	r3, [r5, #0]
   1007e:	bd70      	pop	{r4, r5, r6, pc}
   10080:	20001fa8 	.word	0x20001fa8

00010084 <_getpid_r>:
   10084:	b510      	push	{r4, lr}
   10086:	f000 fd65 	bl	10b54 <_getpid>
   1008a:	bd10      	pop	{r4, pc}

0001008c <siscanf>:
   1008c:	b40e      	push	{r1, r2, r3}
   1008e:	2381      	movs	r3, #129	; 0x81
   10090:	b570      	push	{r4, r5, r6, lr}
   10092:	b09d      	sub	sp, #116	; 0x74
   10094:	ac02      	add	r4, sp, #8
   10096:	ad21      	add	r5, sp, #132	; 0x84
   10098:	009b      	lsls	r3, r3, #2
   1009a:	cd40      	ldmia	r5!, {r6}
   1009c:	81a3      	strh	r3, [r4, #12]
   1009e:	9002      	str	r0, [sp, #8]
   100a0:	9006      	str	r0, [sp, #24]
   100a2:	f7fd fe20 	bl	dce6 <strlen>
   100a6:	4b0b      	ldr	r3, [pc, #44]	; (100d4 <siscanf+0x48>)
   100a8:	6060      	str	r0, [r4, #4]
   100aa:	6263      	str	r3, [r4, #36]	; 0x24
   100ac:	2300      	movs	r3, #0
   100ae:	6160      	str	r0, [r4, #20]
   100b0:	4809      	ldr	r0, [pc, #36]	; (100d8 <siscanf+0x4c>)
   100b2:	6363      	str	r3, [r4, #52]	; 0x34
   100b4:	64a3      	str	r3, [r4, #72]	; 0x48
   100b6:	3b01      	subs	r3, #1
   100b8:	81e3      	strh	r3, [r4, #14]
   100ba:	0032      	movs	r2, r6
   100bc:	002b      	movs	r3, r5
   100be:	0021      	movs	r1, r4
   100c0:	6800      	ldr	r0, [r0, #0]
   100c2:	9501      	str	r5, [sp, #4]
   100c4:	f000 f9c8 	bl	10458 <__ssvfiscanf_r>
   100c8:	b01d      	add	sp, #116	; 0x74
   100ca:	bc70      	pop	{r4, r5, r6}
   100cc:	bc08      	pop	{r3}
   100ce:	b003      	add	sp, #12
   100d0:	4718      	bx	r3
   100d2:	46c0      	nop			; (mov r8, r8)
   100d4:	00010105 	.word	0x00010105
   100d8:	200000b4 	.word	0x200000b4

000100dc <__sread>:
   100dc:	b570      	push	{r4, r5, r6, lr}
   100de:	000c      	movs	r4, r1
   100e0:	250e      	movs	r5, #14
   100e2:	5f49      	ldrsh	r1, [r1, r5]
   100e4:	f000 fca2 	bl	10a2c <_read_r>
   100e8:	2800      	cmp	r0, #0
   100ea:	db03      	blt.n	100f4 <__sread+0x18>
   100ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
   100ee:	181b      	adds	r3, r3, r0
   100f0:	6563      	str	r3, [r4, #84]	; 0x54
   100f2:	bd70      	pop	{r4, r5, r6, pc}
   100f4:	89a3      	ldrh	r3, [r4, #12]
   100f6:	4a02      	ldr	r2, [pc, #8]	; (10100 <__sread+0x24>)
   100f8:	4013      	ands	r3, r2
   100fa:	81a3      	strh	r3, [r4, #12]
   100fc:	e7f9      	b.n	100f2 <__sread+0x16>
   100fe:	46c0      	nop			; (mov r8, r8)
   10100:	ffffefff 	.word	0xffffefff

00010104 <__seofread>:
   10104:	2000      	movs	r0, #0
   10106:	4770      	bx	lr

00010108 <__swrite>:
   10108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1010a:	001f      	movs	r7, r3
   1010c:	898b      	ldrh	r3, [r1, #12]
   1010e:	0005      	movs	r5, r0
   10110:	000c      	movs	r4, r1
   10112:	0016      	movs	r6, r2
   10114:	05db      	lsls	r3, r3, #23
   10116:	d505      	bpl.n	10124 <__swrite+0x1c>
   10118:	230e      	movs	r3, #14
   1011a:	5ec9      	ldrsh	r1, [r1, r3]
   1011c:	2200      	movs	r2, #0
   1011e:	2302      	movs	r3, #2
   10120:	f000 f922 	bl	10368 <_lseek_r>
   10124:	89a3      	ldrh	r3, [r4, #12]
   10126:	4a05      	ldr	r2, [pc, #20]	; (1013c <__swrite+0x34>)
   10128:	0028      	movs	r0, r5
   1012a:	4013      	ands	r3, r2
   1012c:	81a3      	strh	r3, [r4, #12]
   1012e:	0032      	movs	r2, r6
   10130:	230e      	movs	r3, #14
   10132:	5ee1      	ldrsh	r1, [r4, r3]
   10134:	003b      	movs	r3, r7
   10136:	f000 f8cb 	bl	102d0 <_write_r>
   1013a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1013c:	ffffefff 	.word	0xffffefff

00010140 <__sseek>:
   10140:	b570      	push	{r4, r5, r6, lr}
   10142:	000c      	movs	r4, r1
   10144:	250e      	movs	r5, #14
   10146:	5f49      	ldrsh	r1, [r1, r5]
   10148:	f000 f90e 	bl	10368 <_lseek_r>
   1014c:	89a3      	ldrh	r3, [r4, #12]
   1014e:	1c42      	adds	r2, r0, #1
   10150:	d103      	bne.n	1015a <__sseek+0x1a>
   10152:	4a05      	ldr	r2, [pc, #20]	; (10168 <__sseek+0x28>)
   10154:	4013      	ands	r3, r2
   10156:	81a3      	strh	r3, [r4, #12]
   10158:	bd70      	pop	{r4, r5, r6, pc}
   1015a:	2280      	movs	r2, #128	; 0x80
   1015c:	0152      	lsls	r2, r2, #5
   1015e:	4313      	orrs	r3, r2
   10160:	81a3      	strh	r3, [r4, #12]
   10162:	6560      	str	r0, [r4, #84]	; 0x54
   10164:	e7f8      	b.n	10158 <__sseek+0x18>
   10166:	46c0      	nop			; (mov r8, r8)
   10168:	ffffefff 	.word	0xffffefff

0001016c <__sclose>:
   1016c:	b510      	push	{r4, lr}
   1016e:	230e      	movs	r3, #14
   10170:	5ec9      	ldrsh	r1, [r1, r3]
   10172:	f000 f8c1 	bl	102f8 <_close_r>
   10176:	bd10      	pop	{r4, pc}

00010178 <_strtoul_l.isra.0>:
   10178:	b5f0      	push	{r4, r5, r6, r7, lr}
   1017a:	001f      	movs	r7, r3
   1017c:	000e      	movs	r6, r1
   1017e:	b087      	sub	sp, #28
   10180:	9005      	str	r0, [sp, #20]
   10182:	9103      	str	r1, [sp, #12]
   10184:	9201      	str	r2, [sp, #4]
   10186:	980c      	ldr	r0, [sp, #48]	; 0x30
   10188:	7834      	ldrb	r4, [r6, #0]
   1018a:	f7fc fc33 	bl	c9f4 <__locale_ctype_ptr_l>
   1018e:	2208      	movs	r2, #8
   10190:	1900      	adds	r0, r0, r4
   10192:	7843      	ldrb	r3, [r0, #1]
   10194:	1c75      	adds	r5, r6, #1
   10196:	4013      	ands	r3, r2
   10198:	d10c      	bne.n	101b4 <_strtoul_l.isra.0+0x3c>
   1019a:	2c2d      	cmp	r4, #45	; 0x2d
   1019c:	d10c      	bne.n	101b8 <_strtoul_l.isra.0+0x40>
   1019e:	3301      	adds	r3, #1
   101a0:	782c      	ldrb	r4, [r5, #0]
   101a2:	9302      	str	r3, [sp, #8]
   101a4:	1cb5      	adds	r5, r6, #2
   101a6:	2f00      	cmp	r7, #0
   101a8:	d00c      	beq.n	101c4 <_strtoul_l.isra.0+0x4c>
   101aa:	2f10      	cmp	r7, #16
   101ac:	d114      	bne.n	101d8 <_strtoul_l.isra.0+0x60>
   101ae:	2c30      	cmp	r4, #48	; 0x30
   101b0:	d00a      	beq.n	101c8 <_strtoul_l.isra.0+0x50>
   101b2:	e011      	b.n	101d8 <_strtoul_l.isra.0+0x60>
   101b4:	002e      	movs	r6, r5
   101b6:	e7e6      	b.n	10186 <_strtoul_l.isra.0+0xe>
   101b8:	9302      	str	r3, [sp, #8]
   101ba:	2c2b      	cmp	r4, #43	; 0x2b
   101bc:	d1f3      	bne.n	101a6 <_strtoul_l.isra.0+0x2e>
   101be:	782c      	ldrb	r4, [r5, #0]
   101c0:	1cb5      	adds	r5, r6, #2
   101c2:	e7f0      	b.n	101a6 <_strtoul_l.isra.0+0x2e>
   101c4:	2c30      	cmp	r4, #48	; 0x30
   101c6:	d12f      	bne.n	10228 <_strtoul_l.isra.0+0xb0>
   101c8:	2220      	movs	r2, #32
   101ca:	782b      	ldrb	r3, [r5, #0]
   101cc:	4393      	bics	r3, r2
   101ce:	2b58      	cmp	r3, #88	; 0x58
   101d0:	d154      	bne.n	1027c <_strtoul_l.isra.0+0x104>
   101d2:	2710      	movs	r7, #16
   101d4:	786c      	ldrb	r4, [r5, #1]
   101d6:	3502      	adds	r5, #2
   101d8:	2001      	movs	r0, #1
   101da:	0039      	movs	r1, r7
   101dc:	4240      	negs	r0, r0
   101de:	f7f9 fb01 	bl	97e4 <__udivsi3>
   101e2:	0006      	movs	r6, r0
   101e4:	2001      	movs	r0, #1
   101e6:	0039      	movs	r1, r7
   101e8:	4240      	negs	r0, r0
   101ea:	f7f9 fb81 	bl	98f0 <__aeabi_uidivmod>
   101ee:	2300      	movs	r3, #0
   101f0:	9104      	str	r1, [sp, #16]
   101f2:	2101      	movs	r1, #1
   101f4:	2201      	movs	r2, #1
   101f6:	0018      	movs	r0, r3
   101f8:	468c      	mov	ip, r1
   101fa:	4252      	negs	r2, r2
   101fc:	0021      	movs	r1, r4
   101fe:	3930      	subs	r1, #48	; 0x30
   10200:	2909      	cmp	r1, #9
   10202:	d813      	bhi.n	1022c <_strtoul_l.isra.0+0xb4>
   10204:	000c      	movs	r4, r1
   10206:	42a7      	cmp	r7, r4
   10208:	dd1e      	ble.n	10248 <_strtoul_l.isra.0+0xd0>
   1020a:	2b00      	cmp	r3, #0
   1020c:	db1a      	blt.n	10244 <_strtoul_l.isra.0+0xcc>
   1020e:	0013      	movs	r3, r2
   10210:	4286      	cmp	r6, r0
   10212:	d306      	bcc.n	10222 <_strtoul_l.isra.0+0xaa>
   10214:	d102      	bne.n	1021c <_strtoul_l.isra.0+0xa4>
   10216:	9904      	ldr	r1, [sp, #16]
   10218:	42a1      	cmp	r1, r4
   1021a:	db02      	blt.n	10222 <_strtoul_l.isra.0+0xaa>
   1021c:	4663      	mov	r3, ip
   1021e:	4378      	muls	r0, r7
   10220:	1820      	adds	r0, r4, r0
   10222:	782c      	ldrb	r4, [r5, #0]
   10224:	3501      	adds	r5, #1
   10226:	e7e9      	b.n	101fc <_strtoul_l.isra.0+0x84>
   10228:	270a      	movs	r7, #10
   1022a:	e7d5      	b.n	101d8 <_strtoul_l.isra.0+0x60>
   1022c:	0021      	movs	r1, r4
   1022e:	3941      	subs	r1, #65	; 0x41
   10230:	2919      	cmp	r1, #25
   10232:	d801      	bhi.n	10238 <_strtoul_l.isra.0+0xc0>
   10234:	3c37      	subs	r4, #55	; 0x37
   10236:	e7e6      	b.n	10206 <_strtoul_l.isra.0+0x8e>
   10238:	0021      	movs	r1, r4
   1023a:	3961      	subs	r1, #97	; 0x61
   1023c:	2919      	cmp	r1, #25
   1023e:	d803      	bhi.n	10248 <_strtoul_l.isra.0+0xd0>
   10240:	3c57      	subs	r4, #87	; 0x57
   10242:	e7e0      	b.n	10206 <_strtoul_l.isra.0+0x8e>
   10244:	0013      	movs	r3, r2
   10246:	e7ec      	b.n	10222 <_strtoul_l.isra.0+0xaa>
   10248:	2b00      	cmp	r3, #0
   1024a:	da09      	bge.n	10260 <_strtoul_l.isra.0+0xe8>
   1024c:	2322      	movs	r3, #34	; 0x22
   1024e:	2001      	movs	r0, #1
   10250:	9a05      	ldr	r2, [sp, #20]
   10252:	4240      	negs	r0, r0
   10254:	6013      	str	r3, [r2, #0]
   10256:	9b01      	ldr	r3, [sp, #4]
   10258:	2b00      	cmp	r3, #0
   1025a:	d10b      	bne.n	10274 <_strtoul_l.isra.0+0xfc>
   1025c:	b007      	add	sp, #28
   1025e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10260:	9a02      	ldr	r2, [sp, #8]
   10262:	2a00      	cmp	r2, #0
   10264:	d000      	beq.n	10268 <_strtoul_l.isra.0+0xf0>
   10266:	4240      	negs	r0, r0
   10268:	9a01      	ldr	r2, [sp, #4]
   1026a:	2a00      	cmp	r2, #0
   1026c:	d0f6      	beq.n	1025c <_strtoul_l.isra.0+0xe4>
   1026e:	9a03      	ldr	r2, [sp, #12]
   10270:	2b00      	cmp	r3, #0
   10272:	d000      	beq.n	10276 <_strtoul_l.isra.0+0xfe>
   10274:	1e6a      	subs	r2, r5, #1
   10276:	9b01      	ldr	r3, [sp, #4]
   10278:	601a      	str	r2, [r3, #0]
   1027a:	e7ef      	b.n	1025c <_strtoul_l.isra.0+0xe4>
   1027c:	2430      	movs	r4, #48	; 0x30
   1027e:	2f00      	cmp	r7, #0
   10280:	d1aa      	bne.n	101d8 <_strtoul_l.isra.0+0x60>
   10282:	3708      	adds	r7, #8
   10284:	e7a8      	b.n	101d8 <_strtoul_l.isra.0+0x60>
	...

00010288 <_strtoul_r>:
   10288:	b513      	push	{r0, r1, r4, lr}
   1028a:	4c05      	ldr	r4, [pc, #20]	; (102a0 <_strtoul_r+0x18>)
   1028c:	6824      	ldr	r4, [r4, #0]
   1028e:	6a24      	ldr	r4, [r4, #32]
   10290:	2c00      	cmp	r4, #0
   10292:	d100      	bne.n	10296 <_strtoul_r+0xe>
   10294:	4c03      	ldr	r4, [pc, #12]	; (102a4 <_strtoul_r+0x1c>)
   10296:	9400      	str	r4, [sp, #0]
   10298:	f7ff ff6e 	bl	10178 <_strtoul_l.isra.0>
   1029c:	bd16      	pop	{r1, r2, r4, pc}
   1029e:	46c0      	nop			; (mov r8, r8)
   102a0:	200000b4 	.word	0x200000b4
   102a4:	20000118 	.word	0x20000118

000102a8 <strtoul>:
   102a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   102aa:	0013      	movs	r3, r2
   102ac:	4a06      	ldr	r2, [pc, #24]	; (102c8 <strtoul+0x20>)
   102ae:	0005      	movs	r5, r0
   102b0:	6810      	ldr	r0, [r2, #0]
   102b2:	6a04      	ldr	r4, [r0, #32]
   102b4:	2c00      	cmp	r4, #0
   102b6:	d100      	bne.n	102ba <strtoul+0x12>
   102b8:	4c04      	ldr	r4, [pc, #16]	; (102cc <strtoul+0x24>)
   102ba:	000a      	movs	r2, r1
   102bc:	9400      	str	r4, [sp, #0]
   102be:	0029      	movs	r1, r5
   102c0:	f7ff ff5a 	bl	10178 <_strtoul_l.isra.0>
   102c4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   102c6:	46c0      	nop			; (mov r8, r8)
   102c8:	200000b4 	.word	0x200000b4
   102cc:	20000118 	.word	0x20000118

000102d0 <_write_r>:
   102d0:	b570      	push	{r4, r5, r6, lr}
   102d2:	0005      	movs	r5, r0
   102d4:	0008      	movs	r0, r1
   102d6:	0011      	movs	r1, r2
   102d8:	2200      	movs	r2, #0
   102da:	4c06      	ldr	r4, [pc, #24]	; (102f4 <_write_r+0x24>)
   102dc:	6022      	str	r2, [r4, #0]
   102de:	001a      	movs	r2, r3
   102e0:	f000 fc6e 	bl	10bc0 <_write>
   102e4:	1c43      	adds	r3, r0, #1
   102e6:	d103      	bne.n	102f0 <_write_r+0x20>
   102e8:	6823      	ldr	r3, [r4, #0]
   102ea:	2b00      	cmp	r3, #0
   102ec:	d000      	beq.n	102f0 <_write_r+0x20>
   102ee:	602b      	str	r3, [r5, #0]
   102f0:	bd70      	pop	{r4, r5, r6, pc}
   102f2:	46c0      	nop			; (mov r8, r8)
   102f4:	20001fa8 	.word	0x20001fa8

000102f8 <_close_r>:
   102f8:	2300      	movs	r3, #0
   102fa:	b570      	push	{r4, r5, r6, lr}
   102fc:	4c06      	ldr	r4, [pc, #24]	; (10318 <_close_r+0x20>)
   102fe:	0005      	movs	r5, r0
   10300:	0008      	movs	r0, r1
   10302:	6023      	str	r3, [r4, #0]
   10304:	f000 fc16 	bl	10b34 <_close>
   10308:	1c43      	adds	r3, r0, #1
   1030a:	d103      	bne.n	10314 <_close_r+0x1c>
   1030c:	6823      	ldr	r3, [r4, #0]
   1030e:	2b00      	cmp	r3, #0
   10310:	d000      	beq.n	10314 <_close_r+0x1c>
   10312:	602b      	str	r3, [r5, #0]
   10314:	bd70      	pop	{r4, r5, r6, pc}
   10316:	46c0      	nop			; (mov r8, r8)
   10318:	20001fa8 	.word	0x20001fa8

0001031c <__env_lock>:
   1031c:	4770      	bx	lr

0001031e <__env_unlock>:
   1031e:	4770      	bx	lr

00010320 <_fstat_r>:
   10320:	2300      	movs	r3, #0
   10322:	b570      	push	{r4, r5, r6, lr}
   10324:	4c06      	ldr	r4, [pc, #24]	; (10340 <_fstat_r+0x20>)
   10326:	0005      	movs	r5, r0
   10328:	0008      	movs	r0, r1
   1032a:	0011      	movs	r1, r2
   1032c:	6023      	str	r3, [r4, #0]
   1032e:	f000 fc09 	bl	10b44 <_fstat>
   10332:	1c43      	adds	r3, r0, #1
   10334:	d103      	bne.n	1033e <_fstat_r+0x1e>
   10336:	6823      	ldr	r3, [r4, #0]
   10338:	2b00      	cmp	r3, #0
   1033a:	d000      	beq.n	1033e <_fstat_r+0x1e>
   1033c:	602b      	str	r3, [r5, #0]
   1033e:	bd70      	pop	{r4, r5, r6, pc}
   10340:	20001fa8 	.word	0x20001fa8

00010344 <_isatty_r>:
   10344:	2300      	movs	r3, #0
   10346:	b570      	push	{r4, r5, r6, lr}
   10348:	4c06      	ldr	r4, [pc, #24]	; (10364 <_isatty_r+0x20>)
   1034a:	0005      	movs	r5, r0
   1034c:	0008      	movs	r0, r1
   1034e:	6023      	str	r3, [r4, #0]
   10350:	f000 fc08 	bl	10b64 <_isatty>
   10354:	1c43      	adds	r3, r0, #1
   10356:	d103      	bne.n	10360 <_isatty_r+0x1c>
   10358:	6823      	ldr	r3, [r4, #0]
   1035a:	2b00      	cmp	r3, #0
   1035c:	d000      	beq.n	10360 <_isatty_r+0x1c>
   1035e:	602b      	str	r3, [r5, #0]
   10360:	bd70      	pop	{r4, r5, r6, pc}
   10362:	46c0      	nop			; (mov r8, r8)
   10364:	20001fa8 	.word	0x20001fa8

00010368 <_lseek_r>:
   10368:	b570      	push	{r4, r5, r6, lr}
   1036a:	0005      	movs	r5, r0
   1036c:	0008      	movs	r0, r1
   1036e:	0011      	movs	r1, r2
   10370:	2200      	movs	r2, #0
   10372:	4c06      	ldr	r4, [pc, #24]	; (1038c <_lseek_r+0x24>)
   10374:	6022      	str	r2, [r4, #0]
   10376:	001a      	movs	r2, r3
   10378:	f000 fc04 	bl	10b84 <_lseek>
   1037c:	1c43      	adds	r3, r0, #1
   1037e:	d103      	bne.n	10388 <_lseek_r+0x20>
   10380:	6823      	ldr	r3, [r4, #0]
   10382:	2b00      	cmp	r3, #0
   10384:	d000      	beq.n	10388 <_lseek_r+0x20>
   10386:	602b      	str	r3, [r5, #0]
   10388:	bd70      	pop	{r4, r5, r6, pc}
   1038a:	46c0      	nop			; (mov r8, r8)
   1038c:	20001fa8 	.word	0x20001fa8

00010390 <_malloc_usable_size_r>:
   10390:	1f0b      	subs	r3, r1, #4
   10392:	681b      	ldr	r3, [r3, #0]
   10394:	1f18      	subs	r0, r3, #4
   10396:	2b00      	cmp	r3, #0
   10398:	da01      	bge.n	1039e <_malloc_usable_size_r+0xe>
   1039a:	580b      	ldr	r3, [r1, r0]
   1039c:	18c0      	adds	r0, r0, r3
   1039e:	4770      	bx	lr

000103a0 <_sungetc_r>:
   103a0:	b570      	push	{r4, r5, r6, lr}
   103a2:	0014      	movs	r4, r2
   103a4:	1c4b      	adds	r3, r1, #1
   103a6:	d103      	bne.n	103b0 <_sungetc_r+0x10>
   103a8:	2501      	movs	r5, #1
   103aa:	426d      	negs	r5, r5
   103ac:	0028      	movs	r0, r5
   103ae:	bd70      	pop	{r4, r5, r6, pc}
   103b0:	8993      	ldrh	r3, [r2, #12]
   103b2:	2220      	movs	r2, #32
   103b4:	4393      	bics	r3, r2
   103b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   103b8:	81a3      	strh	r3, [r4, #12]
   103ba:	b2ce      	uxtb	r6, r1
   103bc:	b2cd      	uxtb	r5, r1
   103be:	6863      	ldr	r3, [r4, #4]
   103c0:	2a00      	cmp	r2, #0
   103c2:	d010      	beq.n	103e6 <_sungetc_r+0x46>
   103c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   103c6:	4293      	cmp	r3, r2
   103c8:	da07      	bge.n	103da <_sungetc_r+0x3a>
   103ca:	6823      	ldr	r3, [r4, #0]
   103cc:	3b01      	subs	r3, #1
   103ce:	6023      	str	r3, [r4, #0]
   103d0:	701e      	strb	r6, [r3, #0]
   103d2:	6863      	ldr	r3, [r4, #4]
   103d4:	3301      	adds	r3, #1
   103d6:	6063      	str	r3, [r4, #4]
   103d8:	e7e8      	b.n	103ac <_sungetc_r+0xc>
   103da:	0021      	movs	r1, r4
   103dc:	f000 fb6c 	bl	10ab8 <__submore>
   103e0:	2800      	cmp	r0, #0
   103e2:	d0f2      	beq.n	103ca <_sungetc_r+0x2a>
   103e4:	e7e0      	b.n	103a8 <_sungetc_r+0x8>
   103e6:	6921      	ldr	r1, [r4, #16]
   103e8:	6822      	ldr	r2, [r4, #0]
   103ea:	2900      	cmp	r1, #0
   103ec:	d007      	beq.n	103fe <_sungetc_r+0x5e>
   103ee:	4291      	cmp	r1, r2
   103f0:	d205      	bcs.n	103fe <_sungetc_r+0x5e>
   103f2:	1e51      	subs	r1, r2, #1
   103f4:	7808      	ldrb	r0, [r1, #0]
   103f6:	4285      	cmp	r5, r0
   103f8:	d101      	bne.n	103fe <_sungetc_r+0x5e>
   103fa:	6021      	str	r1, [r4, #0]
   103fc:	e7ea      	b.n	103d4 <_sungetc_r+0x34>
   103fe:	6423      	str	r3, [r4, #64]	; 0x40
   10400:	0023      	movs	r3, r4
   10402:	3344      	adds	r3, #68	; 0x44
   10404:	6363      	str	r3, [r4, #52]	; 0x34
   10406:	2303      	movs	r3, #3
   10408:	63a3      	str	r3, [r4, #56]	; 0x38
   1040a:	0023      	movs	r3, r4
   1040c:	3346      	adds	r3, #70	; 0x46
   1040e:	63e2      	str	r2, [r4, #60]	; 0x3c
   10410:	701e      	strb	r6, [r3, #0]
   10412:	6023      	str	r3, [r4, #0]
   10414:	2301      	movs	r3, #1
   10416:	e7de      	b.n	103d6 <_sungetc_r+0x36>

00010418 <__ssrefill_r>:
   10418:	b510      	push	{r4, lr}
   1041a:	000c      	movs	r4, r1
   1041c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1041e:	2900      	cmp	r1, #0
   10420:	d00e      	beq.n	10440 <__ssrefill_r+0x28>
   10422:	0023      	movs	r3, r4
   10424:	3344      	adds	r3, #68	; 0x44
   10426:	4299      	cmp	r1, r3
   10428:	d001      	beq.n	1042e <__ssrefill_r+0x16>
   1042a:	f7fc fda3 	bl	cf74 <_free_r>
   1042e:	2000      	movs	r0, #0
   10430:	6c23      	ldr	r3, [r4, #64]	; 0x40
   10432:	6360      	str	r0, [r4, #52]	; 0x34
   10434:	6063      	str	r3, [r4, #4]
   10436:	4283      	cmp	r3, r0
   10438:	d002      	beq.n	10440 <__ssrefill_r+0x28>
   1043a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1043c:	6023      	str	r3, [r4, #0]
   1043e:	bd10      	pop	{r4, pc}
   10440:	6923      	ldr	r3, [r4, #16]
   10442:	2001      	movs	r0, #1
   10444:	6023      	str	r3, [r4, #0]
   10446:	2300      	movs	r3, #0
   10448:	89a2      	ldrh	r2, [r4, #12]
   1044a:	6063      	str	r3, [r4, #4]
   1044c:	3320      	adds	r3, #32
   1044e:	4313      	orrs	r3, r2
   10450:	81a3      	strh	r3, [r4, #12]
   10452:	4240      	negs	r0, r0
   10454:	e7f3      	b.n	1043e <__ssrefill_r+0x26>
	...

00010458 <__ssvfiscanf_r>:
   10458:	b5f0      	push	{r4, r5, r6, r7, lr}
   1045a:	4cbd      	ldr	r4, [pc, #756]	; (10750 <__ssvfiscanf_r+0x2f8>)
   1045c:	2586      	movs	r5, #134	; 0x86
   1045e:	44a5      	add	sp, r4
   10460:	9303      	str	r3, [sp, #12]
   10462:	2300      	movs	r3, #0
   10464:	9348      	str	r3, [sp, #288]	; 0x120
   10466:	9349      	str	r3, [sp, #292]	; 0x124
   10468:	ab05      	add	r3, sp, #20
   1046a:	934a      	str	r3, [sp, #296]	; 0x128
   1046c:	23be      	movs	r3, #190	; 0xbe
   1046e:	006d      	lsls	r5, r5, #1
   10470:	9000      	str	r0, [sp, #0]
   10472:	000c      	movs	r4, r1
   10474:	a802      	add	r0, sp, #8
   10476:	49b7      	ldr	r1, [pc, #732]	; (10754 <__ssvfiscanf_r+0x2fc>)
   10478:	005b      	lsls	r3, r3, #1
   1047a:	1940      	adds	r0, r0, r5
   1047c:	27c0      	movs	r7, #192	; 0xc0
   1047e:	50c1      	str	r1, [r0, r3]
   10480:	ab02      	add	r3, sp, #8
   10482:	195b      	adds	r3, r3, r5
   10484:	0015      	movs	r5, r2
   10486:	49b4      	ldr	r1, [pc, #720]	; (10758 <__ssvfiscanf_r+0x300>)
   10488:	007f      	lsls	r7, r7, #1
   1048a:	51d9      	str	r1, [r3, r7]
   1048c:	782b      	ldrb	r3, [r5, #0]
   1048e:	2b00      	cmp	r3, #0
   10490:	d100      	bne.n	10494 <__ssvfiscanf_r+0x3c>
   10492:	e15b      	b.n	1074c <__ssvfiscanf_r+0x2f4>
   10494:	f7fc fab2 	bl	c9fc <__locale_ctype_ptr>
   10498:	2208      	movs	r2, #8
   1049a:	782b      	ldrb	r3, [r5, #0]
   1049c:	18c0      	adds	r0, r0, r3
   1049e:	9301      	str	r3, [sp, #4]
   104a0:	7843      	ldrb	r3, [r0, #1]
   104a2:	4013      	ands	r3, r2
   104a4:	d141      	bne.n	1052a <__ssvfiscanf_r+0xd2>
   104a6:	9a01      	ldr	r2, [sp, #4]
   104a8:	1c6e      	adds	r6, r5, #1
   104aa:	2a25      	cmp	r2, #37	; 0x25
   104ac:	d000      	beq.n	104b0 <__ssvfiscanf_r+0x58>
   104ae:	e0a8      	b.n	10602 <__ssvfiscanf_r+0x1aa>
   104b0:	9347      	str	r3, [sp, #284]	; 0x11c
   104b2:	9345      	str	r3, [sp, #276]	; 0x114
   104b4:	786b      	ldrb	r3, [r5, #1]
   104b6:	2b2a      	cmp	r3, #42	; 0x2a
   104b8:	d102      	bne.n	104c0 <__ssvfiscanf_r+0x68>
   104ba:	3b1a      	subs	r3, #26
   104bc:	9345      	str	r3, [sp, #276]	; 0x114
   104be:	1cae      	adds	r6, r5, #2
   104c0:	0035      	movs	r5, r6
   104c2:	220a      	movs	r2, #10
   104c4:	7829      	ldrb	r1, [r5, #0]
   104c6:	000b      	movs	r3, r1
   104c8:	3b30      	subs	r3, #48	; 0x30
   104ca:	2b09      	cmp	r3, #9
   104cc:	d948      	bls.n	10560 <__ssvfiscanf_r+0x108>
   104ce:	4ea3      	ldr	r6, [pc, #652]	; (1075c <__ssvfiscanf_r+0x304>)
   104d0:	2203      	movs	r2, #3
   104d2:	0030      	movs	r0, r6
   104d4:	f7ff f906 	bl	f6e4 <memchr>
   104d8:	2800      	cmp	r0, #0
   104da:	d007      	beq.n	104ec <__ssvfiscanf_r+0x94>
   104dc:	2301      	movs	r3, #1
   104de:	1b80      	subs	r0, r0, r6
   104e0:	4083      	lsls	r3, r0
   104e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
   104e4:	3501      	adds	r5, #1
   104e6:	4313      	orrs	r3, r2
   104e8:	9202      	str	r2, [sp, #8]
   104ea:	9345      	str	r3, [sp, #276]	; 0x114
   104ec:	782b      	ldrb	r3, [r5, #0]
   104ee:	1c6e      	adds	r6, r5, #1
   104f0:	2b67      	cmp	r3, #103	; 0x67
   104f2:	d858      	bhi.n	105a6 <__ssvfiscanf_r+0x14e>
   104f4:	2b65      	cmp	r3, #101	; 0x65
   104f6:	d300      	bcc.n	104fa <__ssvfiscanf_r+0xa2>
   104f8:	e0dd      	b.n	106b6 <__ssvfiscanf_r+0x25e>
   104fa:	2b47      	cmp	r3, #71	; 0x47
   104fc:	d838      	bhi.n	10570 <__ssvfiscanf_r+0x118>
   104fe:	2b45      	cmp	r3, #69	; 0x45
   10500:	d300      	bcc.n	10504 <__ssvfiscanf_r+0xac>
   10502:	e0d8      	b.n	106b6 <__ssvfiscanf_r+0x25e>
   10504:	2b00      	cmp	r3, #0
   10506:	d100      	bne.n	1050a <__ssvfiscanf_r+0xb2>
   10508:	e11d      	b.n	10746 <__ssvfiscanf_r+0x2ee>
   1050a:	2b25      	cmp	r3, #37	; 0x25
   1050c:	d079      	beq.n	10602 <__ssvfiscanf_r+0x1aa>
   1050e:	2303      	movs	r3, #3
   10510:	934b      	str	r3, [sp, #300]	; 0x12c
   10512:	3307      	adds	r3, #7
   10514:	9346      	str	r3, [sp, #280]	; 0x118
   10516:	e053      	b.n	105c0 <__ssvfiscanf_r+0x168>
   10518:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1051a:	3301      	adds	r3, #1
   1051c:	9201      	str	r2, [sp, #4]
   1051e:	3201      	adds	r2, #1
   10520:	9249      	str	r2, [sp, #292]	; 0x124
   10522:	6862      	ldr	r2, [r4, #4]
   10524:	6023      	str	r3, [r4, #0]
   10526:	3a01      	subs	r2, #1
   10528:	6062      	str	r2, [r4, #4]
   1052a:	6863      	ldr	r3, [r4, #4]
   1052c:	2b00      	cmp	r3, #0
   1052e:	dd0b      	ble.n	10548 <__ssvfiscanf_r+0xf0>
   10530:	f7fc fa64 	bl	c9fc <__locale_ctype_ptr>
   10534:	2108      	movs	r1, #8
   10536:	6823      	ldr	r3, [r4, #0]
   10538:	781a      	ldrb	r2, [r3, #0]
   1053a:	1880      	adds	r0, r0, r2
   1053c:	7842      	ldrb	r2, [r0, #1]
   1053e:	420a      	tst	r2, r1
   10540:	d1ea      	bne.n	10518 <__ssvfiscanf_r+0xc0>
   10542:	1c6e      	adds	r6, r5, #1
   10544:	0035      	movs	r5, r6
   10546:	e7a1      	b.n	1048c <__ssvfiscanf_r+0x34>
   10548:	2286      	movs	r2, #134	; 0x86
   1054a:	ab02      	add	r3, sp, #8
   1054c:	0052      	lsls	r2, r2, #1
   1054e:	189b      	adds	r3, r3, r2
   10550:	59db      	ldr	r3, [r3, r7]
   10552:	0021      	movs	r1, r4
   10554:	9800      	ldr	r0, [sp, #0]
   10556:	9301      	str	r3, [sp, #4]
   10558:	4798      	blx	r3
   1055a:	2800      	cmp	r0, #0
   1055c:	d0e8      	beq.n	10530 <__ssvfiscanf_r+0xd8>
   1055e:	e7f0      	b.n	10542 <__ssvfiscanf_r+0xea>
   10560:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   10562:	3501      	adds	r5, #1
   10564:	9302      	str	r3, [sp, #8]
   10566:	4353      	muls	r3, r2
   10568:	3b30      	subs	r3, #48	; 0x30
   1056a:	1859      	adds	r1, r3, r1
   1056c:	9147      	str	r1, [sp, #284]	; 0x11c
   1056e:	e7a9      	b.n	104c4 <__ssvfiscanf_r+0x6c>
   10570:	2b5b      	cmp	r3, #91	; 0x5b
   10572:	d100      	bne.n	10576 <__ssvfiscanf_r+0x11e>
   10574:	e077      	b.n	10666 <__ssvfiscanf_r+0x20e>
   10576:	d80f      	bhi.n	10598 <__ssvfiscanf_r+0x140>
   10578:	2b58      	cmp	r3, #88	; 0x58
   1057a:	d1c8      	bne.n	1050e <__ssvfiscanf_r+0xb6>
   1057c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1057e:	9201      	str	r2, [sp, #4]
   10580:	2280      	movs	r2, #128	; 0x80
   10582:	9901      	ldr	r1, [sp, #4]
   10584:	0092      	lsls	r2, r2, #2
   10586:	430a      	orrs	r2, r1
   10588:	9245      	str	r2, [sp, #276]	; 0x114
   1058a:	2210      	movs	r2, #16
   1058c:	9246      	str	r2, [sp, #280]	; 0x118
   1058e:	2203      	movs	r2, #3
   10590:	2b6e      	cmp	r3, #110	; 0x6e
   10592:	dd14      	ble.n	105be <__ssvfiscanf_r+0x166>
   10594:	3201      	adds	r2, #1
   10596:	e012      	b.n	105be <__ssvfiscanf_r+0x166>
   10598:	2b63      	cmp	r3, #99	; 0x63
   1059a:	d100      	bne.n	1059e <__ssvfiscanf_r+0x146>
   1059c:	e071      	b.n	10682 <__ssvfiscanf_r+0x22a>
   1059e:	2b64      	cmp	r3, #100	; 0x64
   105a0:	d1b5      	bne.n	1050e <__ssvfiscanf_r+0xb6>
   105a2:	220a      	movs	r2, #10
   105a4:	e7f2      	b.n	1058c <__ssvfiscanf_r+0x134>
   105a6:	2b70      	cmp	r3, #112	; 0x70
   105a8:	d052      	beq.n	10650 <__ssvfiscanf_r+0x1f8>
   105aa:	d822      	bhi.n	105f2 <__ssvfiscanf_r+0x19a>
   105ac:	2b6e      	cmp	r3, #110	; 0x6e
   105ae:	d100      	bne.n	105b2 <__ssvfiscanf_r+0x15a>
   105b0:	e06f      	b.n	10692 <__ssvfiscanf_r+0x23a>
   105b2:	d854      	bhi.n	1065e <__ssvfiscanf_r+0x206>
   105b4:	2b69      	cmp	r3, #105	; 0x69
   105b6:	d1aa      	bne.n	1050e <__ssvfiscanf_r+0xb6>
   105b8:	2300      	movs	r3, #0
   105ba:	2203      	movs	r2, #3
   105bc:	9346      	str	r3, [sp, #280]	; 0x118
   105be:	924b      	str	r2, [sp, #300]	; 0x12c
   105c0:	6863      	ldr	r3, [r4, #4]
   105c2:	2b00      	cmp	r3, #0
   105c4:	dc00      	bgt.n	105c8 <__ssvfiscanf_r+0x170>
   105c6:	e078      	b.n	106ba <__ssvfiscanf_r+0x262>
   105c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
   105ca:	9301      	str	r3, [sp, #4]
   105cc:	065b      	lsls	r3, r3, #25
   105ce:	d400      	bmi.n	105d2 <__ssvfiscanf_r+0x17a>
   105d0:	e08b      	b.n	106ea <__ssvfiscanf_r+0x292>
   105d2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   105d4:	2b02      	cmp	r3, #2
   105d6:	dd00      	ble.n	105da <__ssvfiscanf_r+0x182>
   105d8:	e09d      	b.n	10716 <__ssvfiscanf_r+0x2be>
   105da:	ab03      	add	r3, sp, #12
   105dc:	0022      	movs	r2, r4
   105de:	a945      	add	r1, sp, #276	; 0x114
   105e0:	9800      	ldr	r0, [sp, #0]
   105e2:	f000 f8bf 	bl	10764 <_scanf_chars>
   105e6:	2801      	cmp	r0, #1
   105e8:	d100      	bne.n	105ec <__ssvfiscanf_r+0x194>
   105ea:	e0af      	b.n	1074c <__ssvfiscanf_r+0x2f4>
   105ec:	2802      	cmp	r0, #2
   105ee:	d1a9      	bne.n	10544 <__ssvfiscanf_r+0xec>
   105f0:	e025      	b.n	1063e <__ssvfiscanf_r+0x1e6>
   105f2:	2b75      	cmp	r3, #117	; 0x75
   105f4:	d0d5      	beq.n	105a2 <__ssvfiscanf_r+0x14a>
   105f6:	2b78      	cmp	r3, #120	; 0x78
   105f8:	d0c0      	beq.n	1057c <__ssvfiscanf_r+0x124>
   105fa:	2b73      	cmp	r3, #115	; 0x73
   105fc:	d187      	bne.n	1050e <__ssvfiscanf_r+0xb6>
   105fe:	2302      	movs	r3, #2
   10600:	e03d      	b.n	1067e <__ssvfiscanf_r+0x226>
   10602:	6863      	ldr	r3, [r4, #4]
   10604:	2b00      	cmp	r3, #0
   10606:	dd0f      	ble.n	10628 <__ssvfiscanf_r+0x1d0>
   10608:	6823      	ldr	r3, [r4, #0]
   1060a:	9901      	ldr	r1, [sp, #4]
   1060c:	781a      	ldrb	r2, [r3, #0]
   1060e:	4291      	cmp	r1, r2
   10610:	d000      	beq.n	10614 <__ssvfiscanf_r+0x1bc>
   10612:	e09b      	b.n	1074c <__ssvfiscanf_r+0x2f4>
   10614:	3301      	adds	r3, #1
   10616:	6862      	ldr	r2, [r4, #4]
   10618:	6023      	str	r3, [r4, #0]
   1061a:	9b49      	ldr	r3, [sp, #292]	; 0x124
   1061c:	3a01      	subs	r2, #1
   1061e:	9301      	str	r3, [sp, #4]
   10620:	3301      	adds	r3, #1
   10622:	6062      	str	r2, [r4, #4]
   10624:	9349      	str	r3, [sp, #292]	; 0x124
   10626:	e78d      	b.n	10544 <__ssvfiscanf_r+0xec>
   10628:	2286      	movs	r2, #134	; 0x86
   1062a:	ab02      	add	r3, sp, #8
   1062c:	0052      	lsls	r2, r2, #1
   1062e:	189b      	adds	r3, r3, r2
   10630:	59db      	ldr	r3, [r3, r7]
   10632:	0021      	movs	r1, r4
   10634:	9800      	ldr	r0, [sp, #0]
   10636:	9302      	str	r3, [sp, #8]
   10638:	4798      	blx	r3
   1063a:	2800      	cmp	r0, #0
   1063c:	d0e4      	beq.n	10608 <__ssvfiscanf_r+0x1b0>
   1063e:	9848      	ldr	r0, [sp, #288]	; 0x120
   10640:	2800      	cmp	r0, #0
   10642:	d000      	beq.n	10646 <__ssvfiscanf_r+0x1ee>
   10644:	e07b      	b.n	1073e <__ssvfiscanf_r+0x2e6>
   10646:	3801      	subs	r0, #1
   10648:	23a7      	movs	r3, #167	; 0xa7
   1064a:	009b      	lsls	r3, r3, #2
   1064c:	449d      	add	sp, r3
   1064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10650:	9a45      	ldr	r2, [sp, #276]	; 0x114
   10652:	9201      	str	r2, [sp, #4]
   10654:	2220      	movs	r2, #32
   10656:	9901      	ldr	r1, [sp, #4]
   10658:	430a      	orrs	r2, r1
   1065a:	9245      	str	r2, [sp, #276]	; 0x114
   1065c:	e78e      	b.n	1057c <__ssvfiscanf_r+0x124>
   1065e:	2308      	movs	r3, #8
   10660:	2204      	movs	r2, #4
   10662:	9346      	str	r3, [sp, #280]	; 0x118
   10664:	e7ab      	b.n	105be <__ssvfiscanf_r+0x166>
   10666:	0031      	movs	r1, r6
   10668:	a805      	add	r0, sp, #20
   1066a:	f000 f9f3 	bl	10a54 <__sccl>
   1066e:	9b45      	ldr	r3, [sp, #276]	; 0x114
   10670:	0006      	movs	r6, r0
   10672:	9301      	str	r3, [sp, #4]
   10674:	2340      	movs	r3, #64	; 0x40
   10676:	9a01      	ldr	r2, [sp, #4]
   10678:	4313      	orrs	r3, r2
   1067a:	9345      	str	r3, [sp, #276]	; 0x114
   1067c:	2301      	movs	r3, #1
   1067e:	934b      	str	r3, [sp, #300]	; 0x12c
   10680:	e79e      	b.n	105c0 <__ssvfiscanf_r+0x168>
   10682:	9b45      	ldr	r3, [sp, #276]	; 0x114
   10684:	9301      	str	r3, [sp, #4]
   10686:	2340      	movs	r3, #64	; 0x40
   10688:	9a01      	ldr	r2, [sp, #4]
   1068a:	4313      	orrs	r3, r2
   1068c:	9345      	str	r3, [sp, #276]	; 0x114
   1068e:	2300      	movs	r3, #0
   10690:	e7f5      	b.n	1067e <__ssvfiscanf_r+0x226>
   10692:	9945      	ldr	r1, [sp, #276]	; 0x114
   10694:	06cb      	lsls	r3, r1, #27
   10696:	d500      	bpl.n	1069a <__ssvfiscanf_r+0x242>
   10698:	e754      	b.n	10544 <__ssvfiscanf_r+0xec>
   1069a:	9b03      	ldr	r3, [sp, #12]
   1069c:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1069e:	07c8      	lsls	r0, r1, #31
   106a0:	d504      	bpl.n	106ac <__ssvfiscanf_r+0x254>
   106a2:	1d19      	adds	r1, r3, #4
   106a4:	9103      	str	r1, [sp, #12]
   106a6:	681b      	ldr	r3, [r3, #0]
   106a8:	801a      	strh	r2, [r3, #0]
   106aa:	e74b      	b.n	10544 <__ssvfiscanf_r+0xec>
   106ac:	1d19      	adds	r1, r3, #4
   106ae:	9103      	str	r1, [sp, #12]
   106b0:	681b      	ldr	r3, [r3, #0]
   106b2:	601a      	str	r2, [r3, #0]
   106b4:	e746      	b.n	10544 <__ssvfiscanf_r+0xec>
   106b6:	2305      	movs	r3, #5
   106b8:	e7e1      	b.n	1067e <__ssvfiscanf_r+0x226>
   106ba:	2286      	movs	r2, #134	; 0x86
   106bc:	ab02      	add	r3, sp, #8
   106be:	0052      	lsls	r2, r2, #1
   106c0:	189b      	adds	r3, r3, r2
   106c2:	59db      	ldr	r3, [r3, r7]
   106c4:	0021      	movs	r1, r4
   106c6:	9800      	ldr	r0, [sp, #0]
   106c8:	9301      	str	r3, [sp, #4]
   106ca:	4798      	blx	r3
   106cc:	2800      	cmp	r0, #0
   106ce:	d100      	bne.n	106d2 <__ssvfiscanf_r+0x27a>
   106d0:	e77a      	b.n	105c8 <__ssvfiscanf_r+0x170>
   106d2:	e7b4      	b.n	1063e <__ssvfiscanf_r+0x1e6>
   106d4:	9a49      	ldr	r2, [sp, #292]	; 0x124
   106d6:	9201      	str	r2, [sp, #4]
   106d8:	3201      	adds	r2, #1
   106da:	9249      	str	r2, [sp, #292]	; 0x124
   106dc:	6862      	ldr	r2, [r4, #4]
   106de:	3a01      	subs	r2, #1
   106e0:	6062      	str	r2, [r4, #4]
   106e2:	2a00      	cmp	r2, #0
   106e4:	dd0b      	ble.n	106fe <__ssvfiscanf_r+0x2a6>
   106e6:	3301      	adds	r3, #1
   106e8:	6023      	str	r3, [r4, #0]
   106ea:	f7fc f987 	bl	c9fc <__locale_ctype_ptr>
   106ee:	2108      	movs	r1, #8
   106f0:	6823      	ldr	r3, [r4, #0]
   106f2:	781a      	ldrb	r2, [r3, #0]
   106f4:	1880      	adds	r0, r0, r2
   106f6:	7842      	ldrb	r2, [r0, #1]
   106f8:	420a      	tst	r2, r1
   106fa:	d1eb      	bne.n	106d4 <__ssvfiscanf_r+0x27c>
   106fc:	e769      	b.n	105d2 <__ssvfiscanf_r+0x17a>
   106fe:	2286      	movs	r2, #134	; 0x86
   10700:	ab02      	add	r3, sp, #8
   10702:	0052      	lsls	r2, r2, #1
   10704:	189b      	adds	r3, r3, r2
   10706:	59db      	ldr	r3, [r3, r7]
   10708:	0021      	movs	r1, r4
   1070a:	9800      	ldr	r0, [sp, #0]
   1070c:	9301      	str	r3, [sp, #4]
   1070e:	4798      	blx	r3
   10710:	2800      	cmp	r0, #0
   10712:	d0ea      	beq.n	106ea <__ssvfiscanf_r+0x292>
   10714:	e793      	b.n	1063e <__ssvfiscanf_r+0x1e6>
   10716:	2b04      	cmp	r3, #4
   10718:	dc06      	bgt.n	10728 <__ssvfiscanf_r+0x2d0>
   1071a:	ab03      	add	r3, sp, #12
   1071c:	0022      	movs	r2, r4
   1071e:	a945      	add	r1, sp, #276	; 0x114
   10720:	9800      	ldr	r0, [sp, #0]
   10722:	f000 f883 	bl	1082c <_scanf_i>
   10726:	e75e      	b.n	105e6 <__ssvfiscanf_r+0x18e>
   10728:	4b0d      	ldr	r3, [pc, #52]	; (10760 <__ssvfiscanf_r+0x308>)
   1072a:	2b00      	cmp	r3, #0
   1072c:	d100      	bne.n	10730 <__ssvfiscanf_r+0x2d8>
   1072e:	e709      	b.n	10544 <__ssvfiscanf_r+0xec>
   10730:	ab03      	add	r3, sp, #12
   10732:	0022      	movs	r2, r4
   10734:	a945      	add	r1, sp, #276	; 0x114
   10736:	9800      	ldr	r0, [sp, #0]
   10738:	e000      	b.n	1073c <__ssvfiscanf_r+0x2e4>
   1073a:	bf00      	nop
   1073c:	e753      	b.n	105e6 <__ssvfiscanf_r+0x18e>
   1073e:	89a3      	ldrh	r3, [r4, #12]
   10740:	065b      	lsls	r3, r3, #25
   10742:	d400      	bmi.n	10746 <__ssvfiscanf_r+0x2ee>
   10744:	e780      	b.n	10648 <__ssvfiscanf_r+0x1f0>
   10746:	2001      	movs	r0, #1
   10748:	4240      	negs	r0, r0
   1074a:	e77d      	b.n	10648 <__ssvfiscanf_r+0x1f0>
   1074c:	9848      	ldr	r0, [sp, #288]	; 0x120
   1074e:	e77b      	b.n	10648 <__ssvfiscanf_r+0x1f0>
   10750:	fffffd64 	.word	0xfffffd64
   10754:	000103a1 	.word	0x000103a1
   10758:	00010419 	.word	0x00010419
   1075c:	0001297e 	.word	0x0001297e
   10760:	00000000 	.word	0x00000000

00010764 <_scanf_chars>:
   10764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10766:	0015      	movs	r5, r2
   10768:	688a      	ldr	r2, [r1, #8]
   1076a:	9001      	str	r0, [sp, #4]
   1076c:	000c      	movs	r4, r1
   1076e:	2a00      	cmp	r2, #0
   10770:	d106      	bne.n	10780 <_scanf_chars+0x1c>
   10772:	698a      	ldr	r2, [r1, #24]
   10774:	1e51      	subs	r1, r2, #1
   10776:	418a      	sbcs	r2, r1
   10778:	2101      	movs	r1, #1
   1077a:	4252      	negs	r2, r2
   1077c:	430a      	orrs	r2, r1
   1077e:	60a2      	str	r2, [r4, #8]
   10780:	6822      	ldr	r2, [r4, #0]
   10782:	06d2      	lsls	r2, r2, #27
   10784:	d403      	bmi.n	1078e <_scanf_chars+0x2a>
   10786:	681a      	ldr	r2, [r3, #0]
   10788:	1d11      	adds	r1, r2, #4
   1078a:	6019      	str	r1, [r3, #0]
   1078c:	6817      	ldr	r7, [r2, #0]
   1078e:	2600      	movs	r6, #0
   10790:	69a3      	ldr	r3, [r4, #24]
   10792:	2b00      	cmp	r3, #0
   10794:	d01c      	beq.n	107d0 <_scanf_chars+0x6c>
   10796:	2b01      	cmp	r3, #1
   10798:	d108      	bne.n	107ac <_scanf_chars+0x48>
   1079a:	682b      	ldr	r3, [r5, #0]
   1079c:	6962      	ldr	r2, [r4, #20]
   1079e:	781b      	ldrb	r3, [r3, #0]
   107a0:	5cd3      	ldrb	r3, [r2, r3]
   107a2:	2b00      	cmp	r3, #0
   107a4:	d114      	bne.n	107d0 <_scanf_chars+0x6c>
   107a6:	2e00      	cmp	r6, #0
   107a8:	d130      	bne.n	1080c <_scanf_chars+0xa8>
   107aa:	e006      	b.n	107ba <_scanf_chars+0x56>
   107ac:	2b02      	cmp	r3, #2
   107ae:	d006      	beq.n	107be <_scanf_chars+0x5a>
   107b0:	2e00      	cmp	r6, #0
   107b2:	d12b      	bne.n	1080c <_scanf_chars+0xa8>
   107b4:	69a3      	ldr	r3, [r4, #24]
   107b6:	2b01      	cmp	r3, #1
   107b8:	d128      	bne.n	1080c <_scanf_chars+0xa8>
   107ba:	2001      	movs	r0, #1
   107bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   107be:	f7fc f91d 	bl	c9fc <__locale_ctype_ptr>
   107c2:	2208      	movs	r2, #8
   107c4:	682b      	ldr	r3, [r5, #0]
   107c6:	781b      	ldrb	r3, [r3, #0]
   107c8:	18c0      	adds	r0, r0, r3
   107ca:	7843      	ldrb	r3, [r0, #1]
   107cc:	4213      	tst	r3, r2
   107ce:	d1ef      	bne.n	107b0 <_scanf_chars+0x4c>
   107d0:	2210      	movs	r2, #16
   107d2:	6823      	ldr	r3, [r4, #0]
   107d4:	3601      	adds	r6, #1
   107d6:	4213      	tst	r3, r2
   107d8:	d103      	bne.n	107e2 <_scanf_chars+0x7e>
   107da:	682b      	ldr	r3, [r5, #0]
   107dc:	781b      	ldrb	r3, [r3, #0]
   107de:	703b      	strb	r3, [r7, #0]
   107e0:	3701      	adds	r7, #1
   107e2:	682a      	ldr	r2, [r5, #0]
   107e4:	686b      	ldr	r3, [r5, #4]
   107e6:	3201      	adds	r2, #1
   107e8:	602a      	str	r2, [r5, #0]
   107ea:	68a2      	ldr	r2, [r4, #8]
   107ec:	3b01      	subs	r3, #1
   107ee:	3a01      	subs	r2, #1
   107f0:	606b      	str	r3, [r5, #4]
   107f2:	60a2      	str	r2, [r4, #8]
   107f4:	2a00      	cmp	r2, #0
   107f6:	d009      	beq.n	1080c <_scanf_chars+0xa8>
   107f8:	2b00      	cmp	r3, #0
   107fa:	dcc9      	bgt.n	10790 <_scanf_chars+0x2c>
   107fc:	23c0      	movs	r3, #192	; 0xc0
   107fe:	005b      	lsls	r3, r3, #1
   10800:	58e3      	ldr	r3, [r4, r3]
   10802:	0029      	movs	r1, r5
   10804:	9801      	ldr	r0, [sp, #4]
   10806:	4798      	blx	r3
   10808:	2800      	cmp	r0, #0
   1080a:	d0c1      	beq.n	10790 <_scanf_chars+0x2c>
   1080c:	2310      	movs	r3, #16
   1080e:	6822      	ldr	r2, [r4, #0]
   10810:	4013      	ands	r3, r2
   10812:	d106      	bne.n	10822 <_scanf_chars+0xbe>
   10814:	68e2      	ldr	r2, [r4, #12]
   10816:	3201      	adds	r2, #1
   10818:	60e2      	str	r2, [r4, #12]
   1081a:	69a2      	ldr	r2, [r4, #24]
   1081c:	2a00      	cmp	r2, #0
   1081e:	d000      	beq.n	10822 <_scanf_chars+0xbe>
   10820:	703b      	strb	r3, [r7, #0]
   10822:	6923      	ldr	r3, [r4, #16]
   10824:	2000      	movs	r0, #0
   10826:	199e      	adds	r6, r3, r6
   10828:	6126      	str	r6, [r4, #16]
   1082a:	e7c7      	b.n	107bc <_scanf_chars+0x58>

0001082c <_scanf_i>:
   1082c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1082e:	000c      	movs	r4, r1
   10830:	b08d      	sub	sp, #52	; 0x34
   10832:	9302      	str	r3, [sp, #8]
   10834:	4b77      	ldr	r3, [pc, #476]	; (10a14 <_scanf_i+0x1e8>)
   10836:	9005      	str	r0, [sp, #20]
   10838:	0016      	movs	r6, r2
   1083a:	aa09      	add	r2, sp, #36	; 0x24
   1083c:	cb23      	ldmia	r3!, {r0, r1, r5}
   1083e:	c223      	stmia	r2!, {r0, r1, r5}
   10840:	4b75      	ldr	r3, [pc, #468]	; (10a18 <_scanf_i+0x1ec>)
   10842:	9306      	str	r3, [sp, #24]
   10844:	69a3      	ldr	r3, [r4, #24]
   10846:	2b03      	cmp	r3, #3
   10848:	d001      	beq.n	1084e <_scanf_i+0x22>
   1084a:	4b74      	ldr	r3, [pc, #464]	; (10a1c <_scanf_i+0x1f0>)
   1084c:	9306      	str	r3, [sp, #24]
   1084e:	22ae      	movs	r2, #174	; 0xae
   10850:	2000      	movs	r0, #0
   10852:	68a3      	ldr	r3, [r4, #8]
   10854:	0052      	lsls	r2, r2, #1
   10856:	1e59      	subs	r1, r3, #1
   10858:	9004      	str	r0, [sp, #16]
   1085a:	4291      	cmp	r1, r2
   1085c:	d905      	bls.n	1086a <_scanf_i+0x3e>
   1085e:	3b5e      	subs	r3, #94	; 0x5e
   10860:	3bff      	subs	r3, #255	; 0xff
   10862:	9304      	str	r3, [sp, #16]
   10864:	235e      	movs	r3, #94	; 0x5e
   10866:	33ff      	adds	r3, #255	; 0xff
   10868:	60a3      	str	r3, [r4, #8]
   1086a:	0023      	movs	r3, r4
   1086c:	331c      	adds	r3, #28
   1086e:	9301      	str	r3, [sp, #4]
   10870:	23d0      	movs	r3, #208	; 0xd0
   10872:	2700      	movs	r7, #0
   10874:	6822      	ldr	r2, [r4, #0]
   10876:	011b      	lsls	r3, r3, #4
   10878:	4313      	orrs	r3, r2
   1087a:	6023      	str	r3, [r4, #0]
   1087c:	9b01      	ldr	r3, [sp, #4]
   1087e:	9303      	str	r3, [sp, #12]
   10880:	6833      	ldr	r3, [r6, #0]
   10882:	a809      	add	r0, sp, #36	; 0x24
   10884:	7819      	ldrb	r1, [r3, #0]
   10886:	00bb      	lsls	r3, r7, #2
   10888:	2202      	movs	r2, #2
   1088a:	5818      	ldr	r0, [r3, r0]
   1088c:	f7fe ff2a 	bl	f6e4 <memchr>
   10890:	2800      	cmp	r0, #0
   10892:	d02b      	beq.n	108ec <_scanf_i+0xc0>
   10894:	2f01      	cmp	r7, #1
   10896:	d15f      	bne.n	10958 <_scanf_i+0x12c>
   10898:	6863      	ldr	r3, [r4, #4]
   1089a:	2b00      	cmp	r3, #0
   1089c:	d106      	bne.n	108ac <_scanf_i+0x80>
   1089e:	3308      	adds	r3, #8
   108a0:	6822      	ldr	r2, [r4, #0]
   108a2:	6063      	str	r3, [r4, #4]
   108a4:	33f9      	adds	r3, #249	; 0xf9
   108a6:	33ff      	adds	r3, #255	; 0xff
   108a8:	4313      	orrs	r3, r2
   108aa:	6023      	str	r3, [r4, #0]
   108ac:	4b5c      	ldr	r3, [pc, #368]	; (10a20 <_scanf_i+0x1f4>)
   108ae:	6822      	ldr	r2, [r4, #0]
   108b0:	4013      	ands	r3, r2
   108b2:	6023      	str	r3, [r4, #0]
   108b4:	68a3      	ldr	r3, [r4, #8]
   108b6:	1e5a      	subs	r2, r3, #1
   108b8:	60a2      	str	r2, [r4, #8]
   108ba:	2b00      	cmp	r3, #0
   108bc:	d016      	beq.n	108ec <_scanf_i+0xc0>
   108be:	9b03      	ldr	r3, [sp, #12]
   108c0:	1c5d      	adds	r5, r3, #1
   108c2:	6833      	ldr	r3, [r6, #0]
   108c4:	1c5a      	adds	r2, r3, #1
   108c6:	6032      	str	r2, [r6, #0]
   108c8:	781b      	ldrb	r3, [r3, #0]
   108ca:	9a03      	ldr	r2, [sp, #12]
   108cc:	9503      	str	r5, [sp, #12]
   108ce:	7013      	strb	r3, [r2, #0]
   108d0:	6873      	ldr	r3, [r6, #4]
   108d2:	3b01      	subs	r3, #1
   108d4:	6073      	str	r3, [r6, #4]
   108d6:	2b00      	cmp	r3, #0
   108d8:	dc08      	bgt.n	108ec <_scanf_i+0xc0>
   108da:	23c0      	movs	r3, #192	; 0xc0
   108dc:	005b      	lsls	r3, r3, #1
   108de:	58e3      	ldr	r3, [r4, r3]
   108e0:	0031      	movs	r1, r6
   108e2:	9805      	ldr	r0, [sp, #20]
   108e4:	9307      	str	r3, [sp, #28]
   108e6:	4798      	blx	r3
   108e8:	2800      	cmp	r0, #0
   108ea:	d17d      	bne.n	109e8 <_scanf_i+0x1bc>
   108ec:	3701      	adds	r7, #1
   108ee:	2f03      	cmp	r7, #3
   108f0:	d1c6      	bne.n	10880 <_scanf_i+0x54>
   108f2:	6863      	ldr	r3, [r4, #4]
   108f4:	2b00      	cmp	r3, #0
   108f6:	d101      	bne.n	108fc <_scanf_i+0xd0>
   108f8:	330a      	adds	r3, #10
   108fa:	6063      	str	r3, [r4, #4]
   108fc:	2110      	movs	r1, #16
   108fe:	2700      	movs	r7, #0
   10900:	6863      	ldr	r3, [r4, #4]
   10902:	6960      	ldr	r0, [r4, #20]
   10904:	1ac9      	subs	r1, r1, r3
   10906:	4b47      	ldr	r3, [pc, #284]	; (10a24 <_scanf_i+0x1f8>)
   10908:	18c9      	adds	r1, r1, r3
   1090a:	f000 f8a3 	bl	10a54 <__sccl>
   1090e:	9d03      	ldr	r5, [sp, #12]
   10910:	68a3      	ldr	r3, [r4, #8]
   10912:	2b00      	cmp	r3, #0
   10914:	d041      	beq.n	1099a <_scanf_i+0x16e>
   10916:	6832      	ldr	r2, [r6, #0]
   10918:	6960      	ldr	r0, [r4, #20]
   1091a:	7811      	ldrb	r1, [r2, #0]
   1091c:	5c40      	ldrb	r0, [r0, r1]
   1091e:	2800      	cmp	r0, #0
   10920:	d03b      	beq.n	1099a <_scanf_i+0x16e>
   10922:	2930      	cmp	r1, #48	; 0x30
   10924:	d128      	bne.n	10978 <_scanf_i+0x14c>
   10926:	2080      	movs	r0, #128	; 0x80
   10928:	6821      	ldr	r1, [r4, #0]
   1092a:	0100      	lsls	r0, r0, #4
   1092c:	4201      	tst	r1, r0
   1092e:	d023      	beq.n	10978 <_scanf_i+0x14c>
   10930:	9a04      	ldr	r2, [sp, #16]
   10932:	3701      	adds	r7, #1
   10934:	2a00      	cmp	r2, #0
   10936:	d003      	beq.n	10940 <_scanf_i+0x114>
   10938:	3a01      	subs	r2, #1
   1093a:	3301      	adds	r3, #1
   1093c:	9204      	str	r2, [sp, #16]
   1093e:	60a3      	str	r3, [r4, #8]
   10940:	6873      	ldr	r3, [r6, #4]
   10942:	3b01      	subs	r3, #1
   10944:	6073      	str	r3, [r6, #4]
   10946:	2b00      	cmp	r3, #0
   10948:	dd1e      	ble.n	10988 <_scanf_i+0x15c>
   1094a:	6833      	ldr	r3, [r6, #0]
   1094c:	3301      	adds	r3, #1
   1094e:	6033      	str	r3, [r6, #0]
   10950:	68a3      	ldr	r3, [r4, #8]
   10952:	3b01      	subs	r3, #1
   10954:	60a3      	str	r3, [r4, #8]
   10956:	e7db      	b.n	10910 <_scanf_i+0xe4>
   10958:	2f02      	cmp	r7, #2
   1095a:	d1ab      	bne.n	108b4 <_scanf_i+0x88>
   1095c:	21c0      	movs	r1, #192	; 0xc0
   1095e:	2380      	movs	r3, #128	; 0x80
   10960:	6822      	ldr	r2, [r4, #0]
   10962:	00c9      	lsls	r1, r1, #3
   10964:	4011      	ands	r1, r2
   10966:	009b      	lsls	r3, r3, #2
   10968:	4299      	cmp	r1, r3
   1096a:	d1c2      	bne.n	108f2 <_scanf_i+0xc6>
   1096c:	3bf1      	subs	r3, #241	; 0xf1
   1096e:	3bff      	subs	r3, #255	; 0xff
   10970:	6063      	str	r3, [r4, #4]
   10972:	33f0      	adds	r3, #240	; 0xf0
   10974:	4313      	orrs	r3, r2
   10976:	e79c      	b.n	108b2 <_scanf_i+0x86>
   10978:	6821      	ldr	r1, [r4, #0]
   1097a:	4b2b      	ldr	r3, [pc, #172]	; (10a28 <_scanf_i+0x1fc>)
   1097c:	400b      	ands	r3, r1
   1097e:	6023      	str	r3, [r4, #0]
   10980:	7813      	ldrb	r3, [r2, #0]
   10982:	702b      	strb	r3, [r5, #0]
   10984:	3501      	adds	r5, #1
   10986:	e7db      	b.n	10940 <_scanf_i+0x114>
   10988:	23c0      	movs	r3, #192	; 0xc0
   1098a:	005b      	lsls	r3, r3, #1
   1098c:	58e3      	ldr	r3, [r4, r3]
   1098e:	0031      	movs	r1, r6
   10990:	9805      	ldr	r0, [sp, #20]
   10992:	9303      	str	r3, [sp, #12]
   10994:	4798      	blx	r3
   10996:	2800      	cmp	r0, #0
   10998:	d0da      	beq.n	10950 <_scanf_i+0x124>
   1099a:	6823      	ldr	r3, [r4, #0]
   1099c:	05db      	lsls	r3, r3, #23
   1099e:	d50e      	bpl.n	109be <_scanf_i+0x192>
   109a0:	9b01      	ldr	r3, [sp, #4]
   109a2:	429d      	cmp	r5, r3
   109a4:	d907      	bls.n	109b6 <_scanf_i+0x18a>
   109a6:	23be      	movs	r3, #190	; 0xbe
   109a8:	3d01      	subs	r5, #1
   109aa:	005b      	lsls	r3, r3, #1
   109ac:	7829      	ldrb	r1, [r5, #0]
   109ae:	58e3      	ldr	r3, [r4, r3]
   109b0:	0032      	movs	r2, r6
   109b2:	9805      	ldr	r0, [sp, #20]
   109b4:	4798      	blx	r3
   109b6:	9b01      	ldr	r3, [sp, #4]
   109b8:	2001      	movs	r0, #1
   109ba:	429d      	cmp	r5, r3
   109bc:	d027      	beq.n	10a0e <_scanf_i+0x1e2>
   109be:	2210      	movs	r2, #16
   109c0:	6823      	ldr	r3, [r4, #0]
   109c2:	401a      	ands	r2, r3
   109c4:	d11c      	bne.n	10a00 <_scanf_i+0x1d4>
   109c6:	702a      	strb	r2, [r5, #0]
   109c8:	6863      	ldr	r3, [r4, #4]
   109ca:	9901      	ldr	r1, [sp, #4]
   109cc:	9805      	ldr	r0, [sp, #20]
   109ce:	9e06      	ldr	r6, [sp, #24]
   109d0:	47b0      	blx	r6
   109d2:	9b02      	ldr	r3, [sp, #8]
   109d4:	6822      	ldr	r2, [r4, #0]
   109d6:	681b      	ldr	r3, [r3, #0]
   109d8:	0691      	lsls	r1, r2, #26
   109da:	d507      	bpl.n	109ec <_scanf_i+0x1c0>
   109dc:	9902      	ldr	r1, [sp, #8]
   109de:	1d1a      	adds	r2, r3, #4
   109e0:	600a      	str	r2, [r1, #0]
   109e2:	681b      	ldr	r3, [r3, #0]
   109e4:	6018      	str	r0, [r3, #0]
   109e6:	e008      	b.n	109fa <_scanf_i+0x1ce>
   109e8:	2700      	movs	r7, #0
   109ea:	e7d6      	b.n	1099a <_scanf_i+0x16e>
   109ec:	07d1      	lsls	r1, r2, #31
   109ee:	d5f5      	bpl.n	109dc <_scanf_i+0x1b0>
   109f0:	9902      	ldr	r1, [sp, #8]
   109f2:	1d1a      	adds	r2, r3, #4
   109f4:	600a      	str	r2, [r1, #0]
   109f6:	681b      	ldr	r3, [r3, #0]
   109f8:	8018      	strh	r0, [r3, #0]
   109fa:	68e3      	ldr	r3, [r4, #12]
   109fc:	3301      	adds	r3, #1
   109fe:	60e3      	str	r3, [r4, #12]
   10a00:	2000      	movs	r0, #0
   10a02:	9b01      	ldr	r3, [sp, #4]
   10a04:	1aed      	subs	r5, r5, r3
   10a06:	6923      	ldr	r3, [r4, #16]
   10a08:	19ef      	adds	r7, r5, r7
   10a0a:	19df      	adds	r7, r3, r7
   10a0c:	6127      	str	r7, [r4, #16]
   10a0e:	b00d      	add	sp, #52	; 0x34
   10a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a12:	46c0      	nop			; (mov r8, r8)
   10a14:	00012cc4 	.word	0x00012cc4
   10a18:	0000de79 	.word	0x0000de79
   10a1c:	00010289 	.word	0x00010289
   10a20:	fffffaff 	.word	0xfffffaff
   10a24:	00012cd0 	.word	0x00012cd0
   10a28:	fffff6ff 	.word	0xfffff6ff

00010a2c <_read_r>:
   10a2c:	b570      	push	{r4, r5, r6, lr}
   10a2e:	0005      	movs	r5, r0
   10a30:	0008      	movs	r0, r1
   10a32:	0011      	movs	r1, r2
   10a34:	2200      	movs	r2, #0
   10a36:	4c06      	ldr	r4, [pc, #24]	; (10a50 <_read_r+0x24>)
   10a38:	6022      	str	r2, [r4, #0]
   10a3a:	001a      	movs	r2, r3
   10a3c:	f000 f8aa 	bl	10b94 <_read>
   10a40:	1c43      	adds	r3, r0, #1
   10a42:	d103      	bne.n	10a4c <_read_r+0x20>
   10a44:	6823      	ldr	r3, [r4, #0]
   10a46:	2b00      	cmp	r3, #0
   10a48:	d000      	beq.n	10a4c <_read_r+0x20>
   10a4a:	602b      	str	r3, [r5, #0]
   10a4c:	bd70      	pop	{r4, r5, r6, pc}
   10a4e:	46c0      	nop			; (mov r8, r8)
   10a50:	20001fa8 	.word	0x20001fa8

00010a54 <__sccl>:
   10a54:	b570      	push	{r4, r5, r6, lr}
   10a56:	780b      	ldrb	r3, [r1, #0]
   10a58:	2b5e      	cmp	r3, #94	; 0x5e
   10a5a:	d00d      	beq.n	10a78 <__sccl+0x24>
   10a5c:	1c4a      	adds	r2, r1, #1
   10a5e:	2100      	movs	r1, #0
   10a60:	0004      	movs	r4, r0
   10a62:	1c45      	adds	r5, r0, #1
   10a64:	35ff      	adds	r5, #255	; 0xff
   10a66:	7021      	strb	r1, [r4, #0]
   10a68:	3401      	adds	r4, #1
   10a6a:	42a5      	cmp	r5, r4
   10a6c:	d1fb      	bne.n	10a66 <__sccl+0x12>
   10a6e:	2b00      	cmp	r3, #0
   10a70:	d106      	bne.n	10a80 <__sccl+0x2c>
   10a72:	3a01      	subs	r2, #1
   10a74:	0010      	movs	r0, r2
   10a76:	bd70      	pop	{r4, r5, r6, pc}
   10a78:	1c8a      	adds	r2, r1, #2
   10a7a:	784b      	ldrb	r3, [r1, #1]
   10a7c:	2101      	movs	r1, #1
   10a7e:	e7ef      	b.n	10a60 <__sccl+0xc>
   10a80:	2401      	movs	r4, #1
   10a82:	404c      	eors	r4, r1
   10a84:	0011      	movs	r1, r2
   10a86:	54c4      	strb	r4, [r0, r3]
   10a88:	780d      	ldrb	r5, [r1, #0]
   10a8a:	1c4a      	adds	r2, r1, #1
   10a8c:	2d2d      	cmp	r5, #45	; 0x2d
   10a8e:	d007      	beq.n	10aa0 <__sccl+0x4c>
   10a90:	2d5d      	cmp	r5, #93	; 0x5d
   10a92:	d0ef      	beq.n	10a74 <__sccl+0x20>
   10a94:	2d00      	cmp	r5, #0
   10a96:	d101      	bne.n	10a9c <__sccl+0x48>
   10a98:	000a      	movs	r2, r1
   10a9a:	e7eb      	b.n	10a74 <__sccl+0x20>
   10a9c:	002b      	movs	r3, r5
   10a9e:	e7f1      	b.n	10a84 <__sccl+0x30>
   10aa0:	784e      	ldrb	r6, [r1, #1]
   10aa2:	2e5d      	cmp	r6, #93	; 0x5d
   10aa4:	d0fa      	beq.n	10a9c <__sccl+0x48>
   10aa6:	42b3      	cmp	r3, r6
   10aa8:	dcf8      	bgt.n	10a9c <__sccl+0x48>
   10aaa:	3102      	adds	r1, #2
   10aac:	3301      	adds	r3, #1
   10aae:	54c4      	strb	r4, [r0, r3]
   10ab0:	429e      	cmp	r6, r3
   10ab2:	dcfb      	bgt.n	10aac <__sccl+0x58>
   10ab4:	e7e8      	b.n	10a88 <__sccl+0x34>
	...

00010ab8 <__submore>:
   10ab8:	000b      	movs	r3, r1
   10aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10abc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   10abe:	3344      	adds	r3, #68	; 0x44
   10ac0:	000c      	movs	r4, r1
   10ac2:	429d      	cmp	r5, r3
   10ac4:	d11c      	bne.n	10b00 <__submore+0x48>
   10ac6:	2680      	movs	r6, #128	; 0x80
   10ac8:	00f6      	lsls	r6, r6, #3
   10aca:	0031      	movs	r1, r6
   10acc:	f7fc fa9c 	bl	d008 <_malloc_r>
   10ad0:	2800      	cmp	r0, #0
   10ad2:	d102      	bne.n	10ada <__submore+0x22>
   10ad4:	2001      	movs	r0, #1
   10ad6:	4240      	negs	r0, r0
   10ad8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10ada:	0023      	movs	r3, r4
   10adc:	6360      	str	r0, [r4, #52]	; 0x34
   10ade:	63a6      	str	r6, [r4, #56]	; 0x38
   10ae0:	3346      	adds	r3, #70	; 0x46
   10ae2:	781a      	ldrb	r2, [r3, #0]
   10ae4:	4b10      	ldr	r3, [pc, #64]	; (10b28 <__submore+0x70>)
   10ae6:	54c2      	strb	r2, [r0, r3]
   10ae8:	0023      	movs	r3, r4
   10aea:	3345      	adds	r3, #69	; 0x45
   10aec:	781a      	ldrb	r2, [r3, #0]
   10aee:	4b0f      	ldr	r3, [pc, #60]	; (10b2c <__submore+0x74>)
   10af0:	54c2      	strb	r2, [r0, r3]
   10af2:	782a      	ldrb	r2, [r5, #0]
   10af4:	4b0e      	ldr	r3, [pc, #56]	; (10b30 <__submore+0x78>)
   10af6:	54c2      	strb	r2, [r0, r3]
   10af8:	18c0      	adds	r0, r0, r3
   10afa:	6020      	str	r0, [r4, #0]
   10afc:	2000      	movs	r0, #0
   10afe:	e7eb      	b.n	10ad8 <__submore+0x20>
   10b00:	6b8e      	ldr	r6, [r1, #56]	; 0x38
   10b02:	0029      	movs	r1, r5
   10b04:	0073      	lsls	r3, r6, #1
   10b06:	001a      	movs	r2, r3
   10b08:	9301      	str	r3, [sp, #4]
   10b0a:	f7ff f8e9 	bl	fce0 <_realloc_r>
   10b0e:	1e05      	subs	r5, r0, #0
   10b10:	d0e0      	beq.n	10ad4 <__submore+0x1c>
   10b12:	1987      	adds	r7, r0, r6
   10b14:	0001      	movs	r1, r0
   10b16:	0032      	movs	r2, r6
   10b18:	0038      	movs	r0, r7
   10b1a:	f7fb ffb2 	bl	ca82 <memcpy>
   10b1e:	9b01      	ldr	r3, [sp, #4]
   10b20:	6027      	str	r7, [r4, #0]
   10b22:	6365      	str	r5, [r4, #52]	; 0x34
   10b24:	63a3      	str	r3, [r4, #56]	; 0x38
   10b26:	e7e9      	b.n	10afc <__submore+0x44>
   10b28:	000003ff 	.word	0x000003ff
   10b2c:	000003fe 	.word	0x000003fe
   10b30:	000003fd 	.word	0x000003fd

00010b34 <_close>:
   10b34:	2258      	movs	r2, #88	; 0x58
   10b36:	2001      	movs	r0, #1
   10b38:	4b01      	ldr	r3, [pc, #4]	; (10b40 <_close+0xc>)
   10b3a:	4240      	negs	r0, r0
   10b3c:	601a      	str	r2, [r3, #0]
   10b3e:	4770      	bx	lr
   10b40:	20001fa8 	.word	0x20001fa8

00010b44 <_fstat>:
   10b44:	2258      	movs	r2, #88	; 0x58
   10b46:	2001      	movs	r0, #1
   10b48:	4b01      	ldr	r3, [pc, #4]	; (10b50 <_fstat+0xc>)
   10b4a:	4240      	negs	r0, r0
   10b4c:	601a      	str	r2, [r3, #0]
   10b4e:	4770      	bx	lr
   10b50:	20001fa8 	.word	0x20001fa8

00010b54 <_getpid>:
   10b54:	2258      	movs	r2, #88	; 0x58
   10b56:	2001      	movs	r0, #1
   10b58:	4b01      	ldr	r3, [pc, #4]	; (10b60 <_getpid+0xc>)
   10b5a:	4240      	negs	r0, r0
   10b5c:	601a      	str	r2, [r3, #0]
   10b5e:	4770      	bx	lr
   10b60:	20001fa8 	.word	0x20001fa8

00010b64 <_isatty>:
   10b64:	2258      	movs	r2, #88	; 0x58
   10b66:	4b02      	ldr	r3, [pc, #8]	; (10b70 <_isatty+0xc>)
   10b68:	2000      	movs	r0, #0
   10b6a:	601a      	str	r2, [r3, #0]
   10b6c:	4770      	bx	lr
   10b6e:	46c0      	nop			; (mov r8, r8)
   10b70:	20001fa8 	.word	0x20001fa8

00010b74 <_kill>:
   10b74:	2258      	movs	r2, #88	; 0x58
   10b76:	2001      	movs	r0, #1
   10b78:	4b01      	ldr	r3, [pc, #4]	; (10b80 <_kill+0xc>)
   10b7a:	4240      	negs	r0, r0
   10b7c:	601a      	str	r2, [r3, #0]
   10b7e:	4770      	bx	lr
   10b80:	20001fa8 	.word	0x20001fa8

00010b84 <_lseek>:
   10b84:	2258      	movs	r2, #88	; 0x58
   10b86:	2001      	movs	r0, #1
   10b88:	4b01      	ldr	r3, [pc, #4]	; (10b90 <_lseek+0xc>)
   10b8a:	4240      	negs	r0, r0
   10b8c:	601a      	str	r2, [r3, #0]
   10b8e:	4770      	bx	lr
   10b90:	20001fa8 	.word	0x20001fa8

00010b94 <_read>:
   10b94:	2258      	movs	r2, #88	; 0x58
   10b96:	2001      	movs	r0, #1
   10b98:	4b01      	ldr	r3, [pc, #4]	; (10ba0 <_read+0xc>)
   10b9a:	4240      	negs	r0, r0
   10b9c:	601a      	str	r2, [r3, #0]
   10b9e:	4770      	bx	lr
   10ba0:	20001fa8 	.word	0x20001fa8

00010ba4 <_sbrk>:
   10ba4:	4a04      	ldr	r2, [pc, #16]	; (10bb8 <_sbrk+0x14>)
   10ba6:	6813      	ldr	r3, [r2, #0]
   10ba8:	2b00      	cmp	r3, #0
   10baa:	d003      	beq.n	10bb4 <_sbrk+0x10>
   10bac:	1818      	adds	r0, r3, r0
   10bae:	6010      	str	r0, [r2, #0]
   10bb0:	0018      	movs	r0, r3
   10bb2:	4770      	bx	lr
   10bb4:	4b01      	ldr	r3, [pc, #4]	; (10bbc <_sbrk+0x18>)
   10bb6:	e7f9      	b.n	10bac <_sbrk+0x8>
   10bb8:	20001fa4 	.word	0x20001fa4
   10bbc:	20001fac 	.word	0x20001fac

00010bc0 <_write>:
   10bc0:	2258      	movs	r2, #88	; 0x58
   10bc2:	2001      	movs	r0, #1
   10bc4:	4b01      	ldr	r3, [pc, #4]	; (10bcc <_write+0xc>)
   10bc6:	4240      	negs	r0, r0
   10bc8:	601a      	str	r2, [r3, #0]
   10bca:	4770      	bx	lr
   10bcc:	20001fa8 	.word	0x20001fa8

00010bd0 <_exit>:
   10bd0:	e7fe      	b.n	10bd0 <_exit>
   10bd2:	46c0      	nop			; (mov r8, r8)

00010bd4 <_init>:
   10bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bd6:	46c0      	nop			; (mov r8, r8)
   10bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10bda:	bc08      	pop	{r3}
   10bdc:	469e      	mov	lr, r3
   10bde:	4770      	bx	lr

00010be0 <_fini>:
   10be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10be2:	46c0      	nop			; (mov r8, r8)
   10be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10be6:	bc08      	pop	{r3}
   10be8:	469e      	mov	lr, r3
   10bea:	4770      	bx	lr
   10bec:	706d6574 	.word	0x706d6574
   10bf0:	00          	.byte	0x00
   10bf1:	63          	.byte	0x63
   10bf2:	6766      	.short	0x6766
   10bf4:	6300433d 	.word	0x6300433d
   10bf8:	463d6766 	.word	0x463d6766
   10bfc:	00          	.byte	0x00
   10bfd:	44          	.byte	0x44
   10bfe:	5448      	.short	0x5448
   10c00:	53203131 	.word	0x53203131
   10c04:	6f736e65 	.word	0x6f736e65
   10c08:	6e492072 	.word	0x6e492072
   10c0c:	61697469 	.word	0x61697469
   10c10:	657a696c 	.word	0x657a696c
   10c14:	2d002164 	.word	0x2d002164
   10c18:	2d2d2d2d 	.word	0x2d2d2d2d
   10c1c:	2d2d2d2d 	.word	0x2d2d2d2d
   10c20:	2d2d2d2d 	.word	0x2d2d2d2d
   10c24:	2d2d2d2d 	.word	0x2d2d2d2d
   10c28:	2d2d2d2d 	.word	0x2d2d2d2d
   10c2c:	2d2d2d2d 	.word	0x2d2d2d2d
   10c30:	2d2d2d2d 	.word	0x2d2d2d2d
   10c34:	2d2d2d2d 	.word	0x2d2d2d2d
   10c38:	002d2d2d 	.word	0x002d2d2d
   10c3c:	736e6553 	.word	0x736e6553
   10c40:	203a726f 	.word	0x203a726f
   10c44:	20202020 	.word	0x20202020
   10c48:	44002020 	.word	0x44002020
   10c4c:	65766972 	.word	0x65766972
   10c50:	65562072 	.word	0x65562072
   10c54:	20203a72 	.word	0x20203a72
   10c58:	6e550020 	.word	0x6e550020
   10c5c:	65757169 	.word	0x65757169
   10c60:	3a444920 	.word	0x3a444920
   10c64:	20202020 	.word	0x20202020
   10c68:	78614d00 	.word	0x78614d00
   10c6c:	6c615620 	.word	0x6c615620
   10c70:	203a6575 	.word	0x203a6575
   10c74:	00202020 	.word	0x00202020
   10c78:	4d004320 	.word	0x4d004320
   10c7c:	56206e69 	.word	0x56206e69
   10c80:	65756c61 	.word	0x65756c61
   10c84:	2020203a 	.word	0x2020203a
   10c88:	65520020 	.word	0x65520020
   10c8c:	756c6f73 	.word	0x756c6f73
   10c90:	6e6f6974 	.word	0x6e6f6974
   10c94:	2020203a 	.word	0x2020203a
   10c98:	00          	.byte	0x00
   10c99:	25          	.byte	0x25
   10c9a:	322e      	.short	0x322e
   10c9c:	25002c66 	.word	0x25002c66
   10ca0:	54002c64 	.word	0x54002c64
   10ca4:	20706d65 	.word	0x20706d65
   10ca8:	6c796150 	.word	0x6c796150
   10cac:	3a64616f 	.word	0x3a64616f
   10cb0:	00732520 	.word	0x00732520
   10cb4:	2e303231 	.word	0x2e303231
   10cb8:	002c3030 	.word	0x002c3030
   10cbc:	33322e30 	.word	0x33322e30
   10cc0:	0000002c 	.word	0x0000002c

00010cc4 <_ZTV26DoubleBufferedEPOutHandler>:
	...
   10ccc:	00002c2b 00002b0d 00002a69              +,...+..i*..

00010cd8 <_ZL14STRING_PRODUCT>:
   10cd8:	20425355 42204f49 6472616f 03040000              USB IO Board..

00010ce6 <_ZL15STRING_LANGUAGE>:
   10ce6:	04090304                                ....

00010cea <_ZL19STRING_MANUFACTURER>:
   10cea:	7474614d 54726961 20686365 00434c4c     MattairTech LLC.

00010cfa <_ZL21USB_DeviceDescriptorC>:
   10cfa:	01100112 40000002 055716d0 02010100     .......@..W.....
   10d0a:	48440103 00313154 32544844 48440031     ..DHT11.DHT21.DH
   10d1a:	00323254 3f544844 00000000                       T22.DHT?..

00010d24 <_ZTVN11DHT_Unified11TemperatureE>:
	...
   10d2c:	00003dcd 00003e3d 00003dc9 00003dcf     .=..=>...=...=..
   10d3c:	00003ee1                                .>..

00010d40 <_ZTVN11DHT_Unified8HumidityE>:
	...
   10d48:	00003dcb 00003e31 00003dc9 00003e01     .=..1>...=...>..
   10d58:	00003f59 656d6954 3025203a 253a6432     Y?..Time: %02d:%
   10d68:	3a643230 64323025 4400203a 3a657461     02d:%02d: .Date:
   10d78:	32302520 30253a64 253a6432 20643230      %02d:%02d:%02d 
   10d88:	6e6f6d5b 7961643a 6165793a 54005d72     [mon:day:year].T
   10d98:	3a656d69 32302520 30253a64 253a6432     ime: %02d:%02d:%
   10da8:	20643230 3a72685b 3a6e696d 5d636573     02d [hr:min:sec]
   10db8:	3d3d3d00 3d3d3d3d 3d3d3d3d 3d3d3d3d     .===============
   10dc8:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   10dd8:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   10de8:	3d3d3d3d 003d3d3d 78323025 7325002c     =======.%02x,.%s
   10df8:	2520003a 00783230 524f4243 79615020     :. %02x.CBOR Pay
   10e08:	64616f6c 6d754420 24003a70 61002300     load Dump:.$.#.a
   10e18:	69756472 49006f6e 6e6f7274 66655220     rduino.Itron Ref
   10e28:	6e657265 43206563 2050416f 76726553     erence CoAP Serv
   10e38:	203a7265 342e3100 4900362e 6e6f7274     er: .1.4.6.Itron
   10e48:	50415320 00203a49 2e302e31 6f4e0030      SAPI: .1.0.0.No
   10e58:	30322076 31303220 35310039 3a35343a     v 20 2019.15:45:
   10e68:	42003334 646c6975 6d695420 25203a65     43.Build Time: %
   10e78:	44202073 3a657461 00732520 00676663     s  Date: %s.cfg.
   10e88:	736e6573 72726300 756f7365 68656372     sens.crresourceh
   10e98:	6c646e61 203a7265 20544547 74617473     andler: GET stat
   10ea8:	203a7375 6c206425 203a6e65 62206425     us: %d len: %d b
   10eb8:	73657479 74655300 73624f20 65767265     ytes.Set Observe
   10ec8:	64492072 6425203a 67655200 65747369     r Id: %d.Registe
   10ed8:	20646572 736e6573 203a726f 53007325     red sensor: %s.S
   10ee8:	20495041 6573626f 20657672 20726f66     API observe for 
   10ef8:	736e6573 203a726f 63007325 6c706d6f     sensor: %s.compl
   10f08:	00657465 6c696166 45006465 7265746e     ete.failed.Enter
   10f18:	796e6120 79656b20 206f7420 74206f67      any key to go t
   10f28:	6f42206f 7250746f 6172676f 6562206d     o BootProgram be
   10f38:	65726f66 20746920 6e756f63 74207374     fore it counts t
   10f48:	3031206f 206f4e00 61746144 00000000     o 10.No Data....

00010f58 <g_APinDescription>:
   10f58:	09190801 0000703f 80080208 09190901     ....?p..........
   10f68:	0000703f 80090309 08190200 0000006f     ?p..........o...
   10f78:	80120080 08190300 000000af 80120180     ................
   10f88:	08190400 000000af 80120480 08190500     ................
   10f98:	0000006f 80120580 08190600 0000002f     o.........../...
   10fa8:	80120680 08190700 0000002f 80120780     ......../.......
   10fb8:	08190800 0000402f 80121080 08190900     ..../@..........
   10fc8:	0000402f 80121180 08190a00 0000402f     /@........../@..
   10fd8:	80121280 08190b00 0000403f 800b1380     ........?@......
   10fe8:	08190c00 0000701f 800c1620 08190d00     .....p.. .......
   10ff8:	0000701f 800d1621 08190a01 0000301f     .p..!........0..
   11008:	800a1618 08190b01 0000300f 80121619     .........0......
   11018:	08191000 0000401f 80001680 08191100     .....@..........
   11028:	0000401f 80011680 09191200 0000401f     .@...........@..
   11038:	80021680 09191300 0000401f 80031680     .........@......
   11048:	0a191400 0000701f 80041602 0a191500     .....p..........
   11058:	0000701f 80051603 0b191600 0000700f     .p...........p..
   11068:	80121600 0b191700 0000700f 80121601     .........p......
   11078:	08191800 0000800f 80121680 08191900     ................
   11088:	0000800f 80121680 001b0004 00000000     ................
   11098:	80121680 08191b00 0000000f 80121680     ................
   110a8:	001b0004 00000000 80121680 001b0004     ................
   110b8:	00000000 80121680 08191e00 0000300f     .............0..
   110c8:	80121610 08191f00 0000300f 80121611     .........0......
   110d8:	08191601 0000001f 80061680 08191701     ................
   110e8:	0000001f 80071680 08190201 0000002f     ............/...
   110f8:	80120a80 08190301 0000002f 80120b80     ......../.......
   11108:	00000a0d                                ....

0001110c <_ZTV4Uart>:
	...
   11114:	000052d9 00004d05 000051ab 00005193     .R...M...Q...Q..
   11124:	00005189 000051b5 000051e9 0000515d     .Q...Q...Q..]Q..
   11134:	000053b9 0000516d 00005159              .S..mQ..YQ..

00011140 <_ZTV7Serial_>:
	...
   11148:	00005499 000054c5 00005495 000054b9     .T...T...T...T..
   11158:	000054ad 000054fd 000054e1 13121110     .T...T...T......
   11168:	17161514 42411918 01004b43 00003713     ......ABCK...7..
   11178:	00010000 00020000 00040000 00080000     ................
   11188:	00100000 00200000 00400000 00800000     ...... ...@.....
   11198:	01000000 02000000 00200000 00400000     .......... ...@.
   111a8:	00800000 00800000 00040000 00080000     ................
   111b8:	00400000 00080000 1f01bfef 37c86220     ..@......... b.7
   111c8:	262030c2 6b6f6f4c 20676e69 63207075     .0 &Looking up c
   111d8:	626c6c61 206b6361 20726f66 3a44494d     allback for MID:
   111e8:	25783020 41000a78 6e696464 61632067      0x%x..Adding ca
   111f8:	61626c6c 66206b63 4d20726f 203a4449     llback for MID: 
   11208:	78257830 6e49000a 66667573 65696369     0x%x..Insufficie
   11218:	6220746e 65666675 70732072 20656361     nt buffer space 
   11228:	61206f74 6f206464 6f697470 6f000a6e     to add option..o
   11238:	6c6f3e2d 203d3c20 657a6973 7528666f     ->ol <= sizeof(u
   11248:	33746e69 29745f32 2f2e2e00 2f637273     int32_t).../src/
   11258:	7262696c 65697261 73732f73 635f696e     libraries/ssni_c
   11268:	5f70616f 76726573 632f7265 6d70616f     oap_server/coapm
   11278:	632e6773 43007070 646c756f 2074276e     sg.cpp.Couldn't 
   11288:	20646461 6573626f 20657672 6974706f     add observe opti
   11298:	43006e6f 2050416f 20514552 6f636564     on.CoAP REQ deco
   112a8:	6f006564 6f697470 7974206e 203a6570     de.option type: 
   112b8:	6c207525 203a6e65 43007525 646c756f     %u len: %u.Could
   112c8:	2074276e 65766173 74706f20 206e6f69     n't save option 
   112d8:	61746164 686e7500 6c646e61 63206465     data.unhandled c
   112e8:	69746972 206c6163 6974706f 25206e6f     ritical option %
   112f8:	6d000a64 69737369 6f20676e 6f697470     d..missing optio
   11308:	6573206e 61726170 20726f74 43004646     n separator FF.C
   11318:	646c756f 2074276e 20646461 6573624f     ouldn't add Obse
   11328:	20657672 6974706f 74206e6f 736d206f     rve option to ms
   11338:	6f430067 6e646c75 61207427 63206464     g.Couldn't add c
   11348:	65746e6f 6620746e 616d726f 706f2074     ontent format op
   11358:	6e6f6974 206f7420 0067736d 6c756f43     tion to msg.Coul
   11368:	74276e64 64646120 78614d20 6567412d     dn't add Max-Age
   11378:	74706f20 206e6f69 6d206f74 69006773      option to msg.i
   11388:	3c207864 4f43203d 4f5f5041 485f5342     dx <= COAP_OBS_H
   11398:	535f5244 6552005a 6e6f7073 4e006573     DR_SZ.Response.N
   113a8:	43004e4f 52004e4f 41005453 50004b43     ON.CON.RST.ACK.P
   113b8:	0054534f 00544547 00545550 54504d45     OST.GET.PUT.EMPT
   113c8:	45440059 4554454c 72655300 20726576     Y.DELETE.Server 
   113d8:	6f727245 75530072 73656363 6c430073     Error.Success.Cl
   113e8:	746e6569 72724520 5200726f 522f5145     ient Error.REQ/R
   113f8:	54205053 3a657079 00732520 2f514552     SP Type: %s.REQ/
   11408:	204b4341 65646f43 7325203a 50535200     ACK Code: %s.RSP
   11418:	646f4320 25203a65 72550073 61502d69      Code: %s.Uri-Pa
   11428:	512d6874 79726575 7325203a 6e697500              th-Query: %s.

00011435 <_ZZ13co_uint32_h2nPK5optlvE19__PRETTY_FUNCTION__>:
   11435:	746e6975 745f3233 5f6f6320 746e6975     uint32_t co_uint
   11445:	685f3233 63286e32 74736e6f 74706f20     32_h2n(const opt
   11455:	292a766c 6e697500                                lv*).

0001145a <_ZZ13co_uint32_n2hPK5optlvE19__PRETTY_FUNCTION__>:
   1145a:	746e6975 745f3233 5f6f6320 746e6975     uint32_t co_uint
   1146a:	6e5f3233 63286832 74736e6f 74706f20     32_n2h(const opt
   1147a:	292a766c 72726500                                lv*).

0001147f <_ZZ17coap_msg_responseP12coap_msg_ctxE19__PRETTY_FUNCTION__>:
   1147f:	6f727265 20745f72 70616f63 67736d5f     error_t coap_msg
   1148f:	7365725f 736e6f70 6f632865 6d5f7061     _response(coap_m
   1149f:	635f6773 292a7874 746f4e00 64646120     sg_ctx*).Not add
   114af:	20676e69 2073626f 72746e65 6f662079     ing obs entry fo
   114bf:	73252072 6973202c 6f743a64 206e656b     r %s, sid:token 
   114cf:	20746f6e 71696e75 4e006575 6120746f     not unique.Not a
   114df:	6e696464 626f2067 6e652073 20797274     dding obs entry 
   114ef:	20726f66 202c7325 6c707564 74616369     for %s, duplicat
   114ff:	64002e65 62617369 6f5f656c 203a7362     e..disable_obs: 
   1150f:	722d6544 73696765 65726574 52552064     De-registered UR
   1151f:	25203a49 706f0073 706f0074 6f3e2d74     I: %s.opt.opt->o
   1152f:	69440076 74276e64 6e696620 706f2064     v.Didn't find op
   1153f:	6e6f6974 20642520 64206f74 74656c65     tion %d to delet
   1154f:	68002e65 2e2e0064 6372732f 62696c2f     e..hd.../src/lib
   1155f:	69726172 732f7365 5f696e73 70616f63     raries/ssni_coap
   1156f:	7265735f 2f726576 70616f63 2e74706f     _server/coapopt.
   1157f:	00707063                                cpp.

00011583 <_ZZ12copt_add_optP5sl_coP5optlvE19__PRETTY_FUNCTION__>:
   11583:	6f727265 20745f72 74706f63 6464615f     error_t copt_add
   11593:	74706f5f 5f6c7328 2c2a6f63 74706f20     _opt(sl_co*, opt
   115a3:	292a766c 696f7600                                lv*).

000115a8 <_ZZ12copt_del_allP5sl_coE19__PRETTY_FUNCTION__>:
   115a8:	64696f76 706f6320 65645f74 6c615f6c     void copt_del_al
   115b8:	6c73286c 2a6f635f 72650029                       l(sl_co*).

000115c2 <_ZZ17copt_del_opt_typeP5sl_cotE19__PRETTY_FUNCTION__>:
   115c2:	6f727265 20745f72 74706f63 6c65645f     error_t copt_del
   115d2:	74706f5f 7079745f 6c732865 2a6f635f     _opt_type(sl_co*
   115e2:	6975202c 3631746e 0029745f              , uint16_t).

000115ee <_ZZ22copt_get_next_opt_typePK5sl_cotPPvE19__PRETTY_FUNCTION__>:
   115ee:	6c74706f 63202a76 5f74706f 5f746567     optlv* copt_get_
   115fe:	7478656e 74706f5f 7079745f 6f632865     next_opt_type(co
   1160e:	2074736e 635f6c73 202c2a6f 746e6975     nst sl_co*, uint
   1161e:	745f3631 6f76202c 2a2a6469 6f760029              16_t, void**).

0001162c <_ZZ9copt_initP5sl_coE19__PRETTY_FUNCTION__>:
   1162c:	64696f76 706f6320 6e695f74 73287469     void copt_init(s
   1163c:	6f635f6c 6400292a 626f5f6f 76726573     l_co*).do_observ
   1164c:	65203a65 68636f70 20782520 20697275     e: epoch %x uri 
   1165c:	64007325 626f5f6f 76726573 46203a65     %s.do_observe: F
   1166c:	20656572 3a6d6152 00642520 70616f63     ree Ram: %d.coap
   1167c:	73626f5f 65767265 7073725f 6550203a     _observe_rsp: Pe
   1168c:	6e69646e 65722067 6e6f7073 69206573     nding response i
   1169c:	7270206e 6572676f 2d207373 696b7320     n progress - ski
   116ac:	6e697070 656e2067 6f6e2077 69666974     pping new notifi
   116bc:	69746163 67006e6f 6f5f7465 625f7362     cation.get_obs_b
   116cc:	72755f79 61662069 64656c69 7325203a     y_uri failed: %s
   116dc:	756f4300 276e646c 64612074 624f2064     .Couldn't add Ob
   116ec:	76726573 706f2065 6e6f6974 756f4300     serve option.Cou
   116fc:	276e646c 64612074 614d2064 67412d78     ldn't add Max-Ag
   1170c:	706f2065 6e6f6974 616f6300 626f5f70     e option.coap_ob
   1171c:	76726573 73725f65 45203a70 726f7272     serve_rsp: Error
   1172c:	65726320 6e697461 65722067 6e6f7073      creating respon
   1173c:	25006573 64253a73 656c4320 64657261     se.%s:%d Cleared
   1174c:	6e657020 676e6964 7073725f 616f6300      pending_rsp.coa
   1175c:	626f5f70 76726573 73725f65 66203a70     p_observe_rsp: f
   1176c:	20656572 70736572 65736e6f 75626d20     ree response mbu
   1177c:	6e6f2066 72726520 2f00726f 75647261     f on error./ardu
   1178c:	2f6f6e69 44007325 65722d65 74736967     ino/%s.De-regist
   1179c:	4f207265 72657362 203a6576 63006425              er Observe: %d.

000117ab <_ZZ16coap_observe_rsphE12__FUNCTION__>:
   117ab:	70616f63 73626f5f 65767265 7073725f     coap_observe_rsp
   117bb:	74697400 223d656c 6f666e49 74633b22     .title="Info";ct
   117cb:	2e00303d 6c6c6577 6f6e6b2d 69006e77     =0..well-known.i
   117db:	73223d66 3b227379 6c746974 53223d65     f="sys";title="S
   117eb:	65747379 633b226d 32343d74 7665723b     ystem";ct=42;rev
   117fb:	003b313d 00737973 223d6669 75647261     =1;.sys.if="ardu
   1180b:	226f6e69 7469743b 223d656c 75647241     ino";title="Ardu
   1181b:	206f6e69 736e6553 2273726f 3d74633b     ino Sensors";ct=
   1182b:	003b3234 65726f63 002f3c00 656d6974     42;.core.</.time
   1183b:	6f704500 66206863 4720726f 6f205445     .Epoch for GET o
   1184b:	79732066 69742073 203a656d 78383025     f sys time: %08x
   1185b:	54555000 79732f20 69742f73 5020656d     .PUT /sys/time P
   1186b:	6f6c7961 53006461 69747465 5220676e     ayload.Setting R
   1187b:	74204354 7065206f 3a68636f 38302520     TC to epoch: %08
   1188b:	74730078 00737461 3d646f6d 70616f63     x.stats.mod=coap
   1189b:	646f6d00 7277703d 54454700 74732820     .mod=pwr.GET (st
   118ab:	73757461 29642520 61657220 64252064     atus %d) read %d
   118bb:	74796220 002e7365 20544553 61747328      bytes..SET (sta
   118cb:	20737574 2e296425 6e655300 676e6964     tus %d)..Sending
   118db:	73657220 65207465 746e6576 206f7420      reset event to 
   118eb:	63696e6d ff035000                                mnic.

000118f0 <_ZL6rbtput>:
   118f0:	ffff0350 737973b3 736e7304 76654672     P....sys.snsrFev
   11900:	7462723d 70616f63 725f735f 203a6e75     =rbtcoap_s_run: 
   11910:	65657266 20676e69 70737261 75626d20     freeing arsp mbu
   11920:	6f630066 735f7061 6e75725f 7266203a     f.coap_s_run: fr
   11930:	6e696565 70612067 6d206470 00667562     eeing appd mbuf.
   11940:	70616f63 725f735f 203a6e75 65657266     coap_s_run: free
   11950:	6d615220 6425203a 4c444800 6e692043      Ram: %d.HDLC in
   11960:	61697469 617a696c 6e6f6974 69616620     itialization fai
   11970:	2164656c 4b434100 726f6620 64696d20     led!.ACK for mid
   11980:	7830203a 72207825 69656365 2c646576     : 0x%x received,
   11990:	6f6f6c20 2070756b 75746572 64656e72      lookup returned
   119a0:	00642520 6c696146 74206465 6e65206f      %d.Failed to en
   119b0:	656c6261 626f2064 76726573 6f662065     abled observe fo
   119c0:	52552072 25203a49 6e450073 656c6261     r URI: %s.Enable
   119d0:	626f2064 76726573 6f662065 52552072     d observe for UR
   119e0:	25203a49 69440073 6c626173 6f206465     I: %s.Disabled o
   119f0:	72657362 66206576 5520726f 25204952     bserve for URI %
   11a00:	72450073 20726f72 2067736d 3a707372     s.Error msg rsp:
   11a10:	65726620 676e6965 75626d20 6f4e0066      freeing mbuf.No
   11a20:	70737220 7266203a 6e696565 626d2067      rsp: freeing mb
   11a30:	50006675 65737261 72726520 203a726f     uf.Parse error: 
   11a40:	65657266 20676e69 6675626d 72724500     freeing mbuf.Err
   11a50:	203a726f 682f6372 656c3e2d 25203a6e     or: rc/h->len: %
   11a60:	64252f64 6363202c 646f632e 25203a65     d/%d, cc.code: %
   11a70:	6f630064 735f7061 6f72705f 46203a63     d.coap_s_proc: F
   11a80:	20656572 6d206363 00667562 6f6c6c41     ree cc mbuf.Allo
   11a90:	65746163 75626d20 69772066 73206874     cate mbuf with s
   11aa0:	3a657a69 00642520 2e2e006d 6372732f     ize: %d.m.../src
   11ab0:	62696c2f 69726172 732f7365 5f696e73     /libraries/ssni_
   11ac0:	70616f63 7265735f 2f726576 66756268     coap_server/hbuf
   11ad0:	7070632e 75626d00                                .cpp.

00011ad5 <_ZZ5m_getvE19__PRETTY_FUNCTION__>:
   11ad5:	6675626d 5f6d202a 28746567 68540029     mbuf* m_get().Th
   11ae5:	616d2065 61702078 616f6c79 69732064     e max payload si
   11af5:	7320657a 69636570 64656966 20736920     ze specified is 
   11b05:	206f6f74 6772616c 25203a65 79622064     too large: %d by
   11b15:	2e736574 65685420 78616d20 6d756d69     tes. The maximum
   11b25:	6c6c6120 6465776f 20736920 62206425      allowed is %d b
   11b35:	73657479 73680020 65722e73 2e007663     ytes .hss.recv..
   11b45:	72732f2e 696c2f63 72617262 2f736569     ./src/libraries/
   11b55:	696e7373 616f635f 65735f70 72657672     ssni_coap_server
   11b65:	6c64682f 632e7363 68007070 73636c64     /hdlcs.cpp.hdlcs
   11b75:	6165725f 20292864 7825202d 73657200     _read() - %x.res
   11b85:	646e6f70 206f7420 77205252 20687469     pond to RR with 
   11b95:	52005252 6e657365 676e6964 61726620     RR.Resending fra
   11ba5:	5000656d 65636f72 69207373 6d6f636e     me.Process incom
   11bb5:	20676e69 6c727463 32302520 6e692078     ing ctrl %02x in
   11bc5:	61747320 25206574 65720064 6e6f7073      state %d.respon
   11bd5:	72206573 20646578 70207461 616d6972     se rxed at prima
   11be5:	72007972 65757165 72207473 27766365     ry.request recv'
   11bf5:	6e692064 73696420 6e6e6f63 65746365     d in disconnecte
   11c05:	6f6d2064 48006564 5f434c44 4d524e53     d mode.HDLC_SNRM
   11c15:	4c444800 00495f43 78656e55 74636570     .HDLC_I.Unexpect
   11c25:	73206465 756e7165 284e206d 3d202953     ed seqnum N(S) =
   11c35:	20642520 52285620 203d2029 52006425      %d  V(R) = %d.R
   11c45:	20766365 72662049 00656d61 61746164     ecv I frame.data
   11c55:	20424320 20746f6e 70707573 6574726f      CB not supporte
   11c65:	44480064 525f434c 63680052 3a726e2e     d.HDLC_RR.hc.nr:
   11c75:	2c642520 73736820 3a73762e 00642520      %d, hss.vs: %d.
   11c85:	434c4448 5349445f 69640043 6e6f6373     HDLC_DISC.discon
   11c95:	7463656e 00676e69 6f727265 202d2072     necting.error - 
   11ca5:	6d617266 65722065 7463656a 45006465     frame rejected.E
   11cb5:	726f7272 75202d20 6f6e6b6e 73206e77     rror - unknown s
   11cc5:	65746174 6425203a 6c646800 725f7363     tate: %d.hdlcs_r
   11cd5:	29286e75 25202d20 6e650064 20726574     un() - %d.enter 
   11ce5:	6d726f6e 6d206c61 0065646f 4d524e53     normal mode.SNRM
   11cf5:	2041552d 70736572 65736e6f 20637220     -UA response rc 
   11d05:	6d006425                                         %d.

00011d08 <_ZZ10hdlcs_readvE19__PRETTY_FUNCTION__>:
   11d08:	6675626d 6468202a 5f73636c 64616572     mbuf* hdlcs_read
   11d18:	68002928                                         ().

00011d1b <_ZZ9hdlcs_runvE12__FUNCTION__>:
   11d1b:	636c6468 75725f73 6f76006e                       hdlcs_run.

00011d25 <_ZZL13hdlcs_get_bufiE19__PRETTY_FUNCTION__>:
   11d25:	64696f76 6c646820 675f7363 625f7465     void hdlcs_get_b
   11d35:	69286675 0029746e 636e7546 6e6f6974     uf(int).Function
   11d45:	65786520 65747563 75732064 73656363      executed succes
   11d55:	6c756673 4300796c 6b636568 756f7920     sfully.Check you
   11d65:	69772072 676e6972 6c46202e 20687361     r wiring. Flash 
   11d75:	70696863 20736920 2d6e6f6e 70736572     chip is non-resp
   11d85:	69736e6f 002e6576 6e6f632a 75727473     onsive..*constru
   11d95:	726f7463 5f666f5f 696f6863 2e2a6563     ctor_of_choice*.
   11da5:	69676562 2029286e 20736177 20746f6e     begin() was not 
   11db5:	6c6c6163 69206465 6f76206e 73206469     called in void s
   11dc5:	70757465 55002928 6c62616e 6f742065     etup().Unable to
   11dd5:	65646920 6669746e 68632079 202e7069      identify chip. 
   11de5:	20657241 20756f79 65727573 69687420     Are you sure thi
   11df5:	68632073 69207069 75732073 726f7070     s chip is suppor
   11e05:	3f646574 616e5500 20656c62 69206f74     ted?.Unable to i
   11e15:	746e6564 20796669 61706163 79746963     dentify capacity
   11e25:	7349202e 69687420 68632073 6f207069     . Is this chip o
   11e35:	63696666 6c6c6169 75732079 726f7070     fficially suppor
   11e45:	3f646574 20664920 2c746f6e 656c7020     ted? If not, ple
   11e55:	20657361 69666564 6120656e 41436020     ase define a `CA
   11e65:	49434150 20605954 736e6f63 746e6174     PACITY` constant
   11e75:	646e6120 636e6920 6564756c 20746920      and include it 
   11e85:	66206e69 6873616c 6765622e 43286e69     in flash.begin(C
   11e95:	43415041 29595449 6843002e 69207069     APACITY)..Chip i
   11ea5:	75622073 002e7973 656b614d 72757320     s busy..Make sur
   11eb5:	6c612065 6970206c 6820736e 20657661     e all pins have 
   11ec5:	6e656562 6e6f6320 7463656e 70206465     been connected p
   11ed5:	65706f72 00796c72 65676150 65766f20     roperly.Page ove
   11ee5:	6f6c6672 61682077 65622073 64206e65     rflow has been d
   11ef5:	62617369 2064656c 20646e61 20656874     isabled and the 
   11f05:	72646461 20737365 6c6c6163 65206465     address called e
   11f15:	65656378 74207364 6d206568 726f6d65     xceeds the memor
   11f25:	6e550079 656c6261 206f7420 62616e45     y.Unable to Enab
   11f35:	5720656c 69746972 7420676e 6863206f     le Writing to ch
   11f45:	002e7069 61656c50 6d206573 20656b61     ip..Please make 
   11f55:	65727573 65687420 4c4f4820 20262044     sure the HOLD & 
   11f65:	54495257 4f525045 54434554 6e697020     WRITEPROTECT pin
   11f75:	72612073 75702065 64656c6c 20707520     s are pulled up 
   11f85:	56206f74 54004343 20736968 74636573     to VCC.This sect
   11f95:	6120726f 6165726c 63207964 61746e6f     or already conta
   11fa5:	20736e69 61746164 6c50002e 65736165     ins data..Please
   11fb5:	6b616d20 75732065 74206572 73206568      make sure the s
   11fc5:	6f746365 62207372 676e6965 69727720     ectors being wri
   11fd5:	6e657474 206f7420 20657261 73617265     tten to are eras
   11fe5:	002e6465 20756f59 20657261 6e6e7572     ed..You are runn
   11ff5:	20676e69 20776f6c 53206e6f 2e4d4152     ing low on SRAM.
   12005:	656c5020 20657361 6974706f 6573696d      Please optimise
   12015:	756f7920 72702072 6172676f 6f66206d      your program fo
   12025:	65622072 72657474 4d415220 61737520     r better RAM usa
   12035:	54006567 20736968 636e7566 6e6f6974     ge.This function
   12045:	20736920 20746f6e 70707573 6574726f      is not supporte
   12055:	79622064 65687420 616c6620 6d206873     d by the flash m
   12065:	726f6d65 61682079 61776472 002e6572     emory hardware..
   12075:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
   12085:	65722f64 656d7573 65706f20 69746172     d/resume operati
   12095:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
   120a5:	68206e6f 66207361 656c6961 72652064     on has failed er
   120b5:	63726f72 6b636568 6e55002e 656c6261     rorcheck..Unable
   120c5:	206f7420 62616e65 3420656c 7479622d      to enable 4-byt
   120d5:	64612065 73657264 676e6973 6e55002e     e addressing..Un
   120e5:	656c6261 206f7420 61736964 20656c62     able to disable 
   120f5:	79622d34 61206574 65726464 6e697373     4-byte addressin
   12105:	54002e67 63206568 20706968 63207369     g..The chip is c
   12115:	65727275 796c746e 776f7020 64657265     urrently powered
   12125:	776f6420 54002e6e 46206568 6873616c      down..The Flash
   12135:	69686320 6f642070 6e207365 7320746f      chip does not s
   12145:	6f707075 53207472 2e504446 616e5500     upport SFDP..Una
   12155:	20656c62 72206f74 20646165 73617245     ble to read Eras
   12165:	61502065 656d6172 73726574 6f726620     e Parameters fro
   12175:	6863206d 202e7069 65766552 6e697472     m chip. Revertin
   12185:	6f742067 62696c20 79726172 66656420     g to library def
   12195:	746c7561 55002e73 6c62616e 6f742065     aults..Unable to
   121a5:	61657220 72652064 20657361 656d6974      read erase time
   121b5:	72662073 66206d6f 6873616c 6d656d20     s from flash mem
   121c5:	2e79726f 76655220 69747265 7420676e     ory. Reverting t
   121d5:	696c206f 72617262 65642079 6c756166     o library defaul
   121e5:	002e7374 62616e55 7420656c 6572206f     ts..Unable to re
   121f5:	70206461 72676f72 74206d61 73656d69     ad program times
   12205:	6f726620 6c66206d 20687361 6f6d656d      from flash memo
   12215:	202e7972 65766552 6e697472 6f742067     ry. Reverting to
   12225:	62696c20 79726172 66656420 746c7561      library default
   12235:	4e002e73 6843206f 53207069 63656c65     s..No Chip Selec
   12245:	69702074 6564206e 656e6966 6e692064     t pin defined in
   12255:	65687420 73756320 206d6f74 20495053      the custom SPI 
   12265:	61727241 55002e79 6f6e6b6e 65206e77     Array..Unknown e
   12275:	726f7272 20664900 73696874 656f6420     rror.If this doe
   12285:	6f6e2073 65682074 7220706c 6c6f7365     s not help resol
   12295:	632f6576 6972616c 74207966 20736968     ve/clarify this 
   122a5:	75737369 00202c65 61656c70 72206573     issue, .please r
   122b5:	65736961 206e6120 75737369 74612065     aise an issue at
   122c5:	74746820 2f2f3a70 2e777777 68746967      http://www.gith
   122d5:	632e6275 4d2f6d6f 6f7a7261 532f6867     ub.com/Marzogh/S
   122e5:	654d4950 79726f6d 7373692f 20736575     PIMemory/issues 
   122f5:	68746977 65687420 74656420 736c6961     with the details
   12305:	20666f20 74616877 756f7920 65772072      of what your we
   12315:	64206572 676e696f 65687720 6874206e     re doing when th
   12325:	65207369 726f7272 63636f20 65727275     is error occurre
   12335:	80810064 01020514 01020600 00040700     d...............
   12345:	08010000 00000004 4c444801 65732043     .........HDLC se
   12355:	6620646e 656d6172 72724500 203a726f     nd frame.Error: 
   12365:	636c6468 6e65735f 72665f64 28656d61     hdlc_send_frame(
   12375:	69642029 6f6e2064 65732074 2520646e     ) did not send %
   12385:	79622064 20736574 72207361 69757165     d bytes as requi
   12395:	0a646572 61726600 7420656d 3a657079     red..frame type:
   123a5:	25783020 65720078 79426461 28736574      0x%x.readBytes(
   123b5:	6f632029 3a746e75 00642520 20656854     ) count: %d.The 
   123c5:	54524155 63657220 65766965 66756220     UART receive buf
   123d5:	20726566 20736168 7265766f 776f6c66     fer has overflow
   123e5:	5700216e 65722065 25206461 79622064     n!.We read %d by
   123f5:	20736574 20646e61 20656874 2078616d     tes and the max 
   12405:	25207369 79622064 2e736574 73694d00     is %d bytes..Mis
   12415:	676e6973 4c444820 6c662043 73286761     sing HDLC flag(s
   12425:	63680029 682e7874 65705f75 3d20646e     ).hctx.hu_pend =
   12435:	0032203d 20656854 6d617266 656c2065     = 2.The frame le
   12445:	6874676e 656f6420 74276e73 74616d20     ngth doesn't mat
   12455:	74206863 6e206568 65626d75 666f2072     ch the number of
   12465:	63657220 65766965 79622064 00736574      received bytes.
   12475:	6d617266 656c5f65 00203a6e 6c5f7872     frame_len: .rx_l
   12485:	203a6e65 00202020 63736944 20647261     en:    .Discard 
   12495:	6d617266 202d2065 20435243 6f727265     frame - CRC erro
   124a5:	69440072 72616373 72662064 20656d61     r.Discard frame 
   124b5:	6162202d 6e692064 6c206f66 54006e65     - bad info len.T
   124c5:	48206568 20434c44 6c796170 2064616f     he HDLC payload 
   124d5:	74207369 6c206f6f 65677261 65570021     is too large!.We
   124e5:	746f6720 20642520 65747962 6e612073      got %d bytes an
   124f5:	68742064 616d2065 73692078 20642520     d the max is %d 
   12505:	65747962 5a002e73 206f7265 6f666e69     bytes..Zero info
   12515:	006e656c 434c4448 63657220 72662076     len.HDLC recv fr
   12525:	00656d61 20646142 20726468 6c66202d     ame.Bad hdr - fl
   12535:	00687375 20646162 6f666e69 206e656c     ush.bad infolen 
   12545:	6c66202d 00687375 89000000                       - flush..

0001254e <_ZL15xmodem_crctable>:
   1254e:	11890000 329b2312 57ad4624 74bf6536     .....#.2$F.W6e.t
   1255e:	9dc18c48 bed3af5a dbe5ca6c f8f7e97e     H...Z...l...~...
   1256e:	01081081 221a3393 472c56a5 643e75b7     .....3.".V,G.u>d
   1257e:	8d409cc9 ae52bfdb cb64daed e876f9ff     ..@...R...d...v.
   1258e:	308b2102 13990210 76af6726 55bd4434     .!.0....&g.v4D.U
   1259e:	bcc3ad4a 9fd18e58 fae7eb6e d9f5c87c     J...X...n...|...
   125ae:	200a3183 03181291 662e77a7 453c54b5     .1. .....w.f.T<E
   125be:	ac42bdcb 8f509ed9 ea66fbef c974d8fd     ..B...P...f...t.
   125ce:	538d4204 709f6116 15a90420 36bb2732     .B.S.a.p ...2'.6
   125de:	dfc5ce4c fcd7ed5e 99e18868 baf3ab7a     L...^...h...z...
   125ee:	430c5285 601e7197 052814a1 263a37b3     .R.C.q.`..(..7:&
   125fe:	cf44decd ec56fddf 896098e9 aa72bbfb     ..D...V...`...r.
   1260e:	728f6306 519d4014 34ab2522 17b90630     .c.r.@.Q"%.40...
   1261e:	fec7ef4e ddd5cc5c b8e3a96a 9bf18a78     N...\...j...x...
   1262e:	620e7387 411c5095 242a35a3 073816b1     .s.b.P.A.5*$..8.
   1263e:	ee46ffcf cd54dcdd a862b9eb 8b709af9     ..F...T...b...p.
   1264e:	95818408 b693a71a d3a5c22c f0b7e13e     ........,...>...
   1265e:	19c90840 3adb2b52 5fed4e64 7cff6d76     @...R+.:dN._vm.|
   1266e:	85009489 a612b79b c324d2ad e036f1bf     ..........$...6.
   1267e:	094818c1 2a5a3bd3 4f6c5ee5 6c7e7df7     ..H..;Z*.^lO.}~l
   1268e:	b483a50a 97918618 f2a7e32e d1b5c03c     ............<...
   1269e:	38cb2942 1bd90a50 7eef6f66 5dfd4c74     B).8P...fo.~tL.]
   126ae:	a402b58b 87109699 e226f3af c134d0bd     ..........&...4.
   126be:	284a39c3 0b581ad1 6e6e7fe7 4d7c5cf5     .9J(..X...nn.\|M
   126ce:	d785c60c f497e51e 91a18028 b2b3a33a     ........(...:...
   126de:	5bcd4a44 78df6956 1de90c60 3efb2f72     DJ.[Vi.x`...r/.>
   126ee:	c704d68d e416f59f 812090a9 a232b3bb     .......... ...2.
   126fe:	4b4c5ac5 685e79d7 0d681ce1 2e7a3ff3     .ZLK.y^h..h..?z.
   1270e:	f687e70e d595c41c b0a3a12a 93b18238     ........*...8...
   1271e:	7acf6b46 59dd4854 3ceb2d62 1ff90e70     Fk.zTH.Yb-.<p...
   1272e:	e606f78f c514d49d a022b1ab 833092b9     .........."...0.
   1273e:	6a4e7bc7 495c58d5 2c6a3de3 0f781ef1     .{Nj.X\I.=j,..x.
   1274e:	78650000 71730070 00667472 00000000     ..exp.sqrtf.....
	...

00012760 <halF>:
   12760:	00000000 3fe00000 00000000 bfe00000     .......?........

00012770 <ln2HI>:
   12770:	fee00000 3fe62e42 fee00000 bfe62e42     ....B..?....B...

00012780 <ln2LO>:
   12780:	35793c76 3dea39ef 35793c76 bdea39ef     v<y5.9.=v<y5.9..
   12790:	0000a0dc 0000a0ac 0000a0be 0000a000     ................
   127a0:	0000a0be 0000a0a2 0000a0be 0000a000     ................
   127b0:	0000a0ac 0000a0ac 0000a0a2 0000a000     ................
   127c0:	0000a008 0000a008 0000a008 0000a0c4     ................
   127d0:	0000a0ac 0000a0ac 0000a080 0000a164     ............d...
   127e0:	0000a080 0000a0a2 0000a080 0000a164     ............d...
   127f0:	0000a0ac 0000a0ac 0000a0a2 0000a164     ............d...
   12800:	0000a008 0000a008 0000a008 0000a16e     ............n...
   12810:	0000a45c 0000a3ac 0000a3ac 0000a3aa     \...............
   12820:	0000a44e 0000a44e 0000a444 0000a3aa     N...N...D.......
   12830:	0000a44e 0000a444 0000a44e 0000a3aa     N...D...N.......
   12840:	0000a454 0000a454 0000a454 0000a4e4     T...T...T.......
   12850:	0000b25c 0000b23e 0000b1f8 0000b116     \...>...........
   12860:	0000b1f8 0000b230 0000b1f8 0000b116     ....0...........
   12870:	0000b23e 0000b23e 0000b230 0000b116     >...>...0.......
   12880:	0000b10e 0000b10e 0000b10e 0000b474     ............t...
   12890:	0000babc 0000b97c 0000b97c 0000b978     ....|...|...x...
   128a0:	0000ba94 0000ba94 0000ba86 0000b978     ............x...
   128b0:	0000ba94 0000ba86 0000ba94 0000b978     ............x...
   128c0:	0000ba9c 0000ba9c 0000ba9c 0000bca0     ................
   128d0:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
   128e0:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
   128f0:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
   12900:	20656e69 73256425 000a7325              ine %d%s%s..

0001290c <_global_impure_ptr>:
   1290c:	200000b8 49534f50 00000058              ... POSIX...

00012918 <DAYS_IN_MONTH>:
   12918:	0000001f 0000001c 0000001f 0000001e     ................
   12928:	0000001f 0000001e 0000001f 0000001f     ................
   12938:	0000001e 0000001f 0000001e 0000001f     ................

00012948 <_DAYS_BEFORE_MONTH>:
   12948:	00000000 0000001f 0000003b 0000005a     ........;...Z...
   12958:	00000078 00000097 000000b5 000000d4     x...............
   12968:	000000f3 00000111 00000130 0000014e     ........0...N...
   12978:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   12988:	464e4900 666e6900 4e414e00 6e616e00     .INF.inf.NAN.nan
   12998:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   129a8:	31300046 35343332 39383736 64636261     F.0123456789abcd
   129b8:	54006665 4d47005a 31250054 305e5b30     ef.TZ.GMT.%10[^0
   129c8:	2b2c392d 6e255d2d 68254d00 2e6e2575     -9,+-]%n.M%hu%n.
   129d8:	25756825 68252e6e 006e2575 7568252f     %hu%n.%hu%n./%hu
   129e8:	253a6e25 6e257568 7568253a 00006e25              %n:%hu%n:%hu%n.

000129f7 <_ctype_>:
   129f7:	20202000 20202020 28282020 20282828     .         ((((( 
   12a07:	20202020 20202020 20202020 20202020                     
   12a17:	10108820 10101010 10101010 10101010      ...............
   12a27:	04040410 04040404 10040404 10101010     ................
   12a37:	41411010 41414141 01010101 01010101     ..AAAAAA........
   12a47:	01010101 01010101 01010101 10101010     ................
   12a57:	42421010 42424242 02020202 02020202     ..BBBBBB........
   12a67:	02020202 02020202 02020202 10101010     ................
   12a77:	00000020 00000000 00000000 00000000      ...............
	...
   12af7:	666e4900 74696e69 614e0079 0000004e     .Infinity.NaN...
	...

00012b08 <__sf_fake_stderr>:
	...

00012b28 <__sf_fake_stdin>:
	...

00012b48 <__sf_fake_stdout>:
	...

00012b68 <__month_lengths>:
   12b68:	0000001f 0000001c 0000001f 0000001e     ................
   12b78:	0000001f 0000001e 0000001f 0000001f     ................
   12b88:	0000001e 0000001f 0000001e 0000001f     ................
   12b98:	0000001f 0000001d 0000001f 0000001e     ................
   12ba8:	0000001f 0000001e 0000001f 0000001f     ................
   12bb8:	0000001e 0000001f 0000001e 0000001f     ................

00012bc8 <__mprec_bigtens>:
   12bc8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   12bd8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   12be8:	7f73bf3c 75154fdd                       <.s..O.u

00012bf0 <__mprec_tens>:
   12bf0:	00000000 3ff00000 00000000 40240000     .......?......$@
   12c00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   12c10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   12c20:	00000000 412e8480 00000000 416312d0     .......A......cA
   12c30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   12c40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   12c50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   12c60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   12c70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   12c80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   12c90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   12ca0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   12cb0:	79d99db4 44ea7843                       ...yCx.D

00012cb8 <p05.6047>:
   12cb8:	00000005 00000019 0000007d 00012ce2     ........}....,..
   12cc8:	00012ce5 00012ce8 61462d41 3938662d     .,...,..A-Fa-f89
   12cd8:	33323130 37363534 2d2b005d 00303000     01234567].+-.00.
   12ce8:	00005878                                xX..

00012cec <__EH_FRAME_BEGIN__>:
   12cec:	00000000                                ....

Disassembly of section .ramfunc:

00012cf0 <banzai>:
void banzai() {
   12cf0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12cf2:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
   12cf4:	4b11      	ldr	r3, [pc, #68]	; (12d3c <banzai+0x4c>)
   12cf6:	4a12      	ldr	r2, [pc, #72]	; (12d40 <banzai+0x50>)
   12cf8:	3304      	adds	r3, #4
   12cfa:	4293      	cmp	r3, r2
   12cfc:	d808      	bhi.n	12d10 <banzai+0x20>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12cfe:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
   12d02:	4a10      	ldr	r2, [pc, #64]	; (12d44 <banzai+0x54>)
   12d04:	4b10      	ldr	r3, [pc, #64]	; (12d48 <banzai+0x58>)
   12d06:	60da      	str	r2, [r3, #12]
   12d08:	f3bf 8f4f 	dsb	sy
    __NOP();
   12d0c:	46c0      	nop			; (mov r8, r8)
   12d0e:	e7fd      	b.n	12d0c <banzai+0x1c>
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   12d10:	4a0e      	ldr	r2, [pc, #56]	; (12d4c <banzai+0x5c>)
	while (!nvmReady())
   12d12:	2101      	movs	r1, #1
   12d14:	0010      	movs	r0, r2
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   12d16:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
   12d18:	420c      	tst	r4, r1
   12d1a:	d0fc      	beq.n	12d16 <banzai+0x26>
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   12d1c:	2120      	movs	r1, #32
   12d1e:	8b14      	ldrh	r4, [r2, #24]
   12d20:	31ff      	adds	r1, #255	; 0xff
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   12d22:	089b      	lsrs	r3, r3, #2
   12d24:	005b      	lsls	r3, r3, #1
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   12d26:	4321      	orrs	r1, r4
   12d28:	8311      	strh	r1, [r2, #24]
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   12d2a:	61d3      	str	r3, [r2, #28]
          NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
   12d2c:	4b08      	ldr	r3, [pc, #32]	; (12d50 <banzai+0x60>)
   12d2e:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
   12d30:	2301      	movs	r3, #1
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   12d32:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
   12d34:	421a      	tst	r2, r3
   12d36:	d0fc      	beq.n	12d32 <banzai+0x42>
   12d38:	e7e1      	b.n	12cfe <banzai+0xe>
   12d3a:	46c0      	nop			; (mov r8, r8)
   12d3c:	00002000 	.word	0x00002000
   12d40:	00000203 	.word	0x00000203
   12d44:	05fa0004 	.word	0x05fa0004
   12d48:	e000ed00 	.word	0xe000ed00
   12d4c:	41004000 	.word	0x41004000
   12d50:	ffffa502 	.word	0xffffa502
