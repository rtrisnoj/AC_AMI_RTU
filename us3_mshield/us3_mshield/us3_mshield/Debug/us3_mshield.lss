
us3_mshield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e490  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000064  00010490  00010490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000300  20000000  000104f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000c14  20000300  000107f4  00020300  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
  6 .debug_info   000e20dc  00000000  00000000  00020381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010f28  00000000  00000000  0010245d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00018dc2  00000000  00000000  00113385  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001828  00000000  00000000  0012c147  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002900  00000000  00000000  0012d96f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016b1d  00000000  00000000  0013026f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00026063  00000000  00000000  00146d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009f4ee  00000000  00000000  0016cdef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005ea4  00000000  00000000  0020c2e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stab         000000cc  00000000  00000000  00212184  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      000001b9  00000000  00000000  00212250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 f5 25 00 00 d9 25 00 00 f1 25 00 00     ... .%...%...%..
	...
    202c:	d9 25 00 00 00 00 00 00 00 00 00 00 d9 25 00 00     .%...........%..
    203c:	49 26 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     I&...%...%...%..
    204c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 dd 25 00 00     .%...%...%...%..
    205c:	d9 25 00 00 c9 4a 00 00 d9 25 00 00 d9 25 00 00     .%...J...%...%..
    206c:	d9 4a 00 00 b9 4a 00 00 d9 25 00 00 d9 25 00 00     .J...J...%...%..
    207c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    208c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    209c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    20ac:	d9 25 00 00 00 00 00 00                             .%......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000300 	.word	0x20000300
    20d4:	00000000 	.word	0x00000000
    20d8:	0001048c 	.word	0x0001048c

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000304 	.word	0x20000304
    2108:	0001048c 	.word	0x0001048c
    210c:	200002f8 	.word	0x200002f8
    2110:	00000000 	.word	0x00000000

00002114 <setup>:

//
//  Arduino setup function.
//
void setup()
{
    2114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sapi_error_t rcode;
	
	// Initialize Sensor API
	sapi_initialize(NULL);
    2116:	2000      	movs	r0, #0
    2118:	f002 fbcc 	bl	48b4 <_Z15sapi_initializePc>
	
	// Register temp sensor
	temp_sensor_id = sapi_register_sensor(TEMP_SENSOR_TYPE, temp_init_sensor, temp_read_sensor, temp_read_cfg, temp_write_cfg, 1, 60);
    211c:	233c      	movs	r3, #60	; 0x3c
    211e:	9302      	str	r3, [sp, #8]
    2120:	3b3b      	subs	r3, #59	; 0x3b
    2122:	9301      	str	r3, [sp, #4]
    2124:	4b05      	ldr	r3, [pc, #20]	; (213c <setup+0x28>)
    2126:	4a06      	ldr	r2, [pc, #24]	; (2140 <setup+0x2c>)
    2128:	9300      	str	r3, [sp, #0]
    212a:	4906      	ldr	r1, [pc, #24]	; (2144 <setup+0x30>)
    212c:	4b06      	ldr	r3, [pc, #24]	; (2148 <setup+0x34>)
    212e:	4807      	ldr	r0, [pc, #28]	; (214c <setup+0x38>)
    2130:	f002 f988 	bl	4444 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>
	
	// Initialize temp sensor
	rcode = sapi_init_sensor(temp_sensor_id);
    2134:	f002 f9ce 	bl	44d4 <_Z16sapi_init_sensorh>
	
	// Initialize echo sensor
	//rcode = sapi_init_sensor(echo_sensor_id);
	
	
}
    2138:	b005      	add	sp, #20
    213a:	bd00      	pop	{pc}
    213c:	0000215d 	.word	0x0000215d
    2140:	00002439 	.word	0x00002439
    2144:	00002485 	.word	0x00002485
    2148:	000023a5 	.word	0x000023a5
    214c:	0000efa8 	.word	0x0000efa8

00002150 <loop>:

//
// Arduino main loop function.
//
void loop()
{
    2150:	b510      	push	{r4, lr}
	// Call SAPI run to do the heavy lifting
	sapi_run();
    2152:	f002 fc7d 	bl	4a50 <_Z8sapi_runv>

    2156:	bd10      	pop	{r4, pc}

00002158 <_ZN11DHT_UnifiedD1Ev>:
#include <Adafruit_Sensor.h>
#include <DHT.h>

#define DHT_SENSOR_VERSION 1

class DHT_Unified {
    2158:	4770      	bx	lr
	...

0000215c <_Z14temp_write_cfgPcPh>:
// Write sensor configuration. Processes payload sent from client. Callback called on
//  CoAP Put configuration value
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_write_cfg(char *payload, uint8_t *len)
{
    215c:	b510      	push	{r4, lr}
	if (!strcmp(payload, "cfg=C"))
    215e:	490b      	ldr	r1, [pc, #44]	; (218c <_Z14temp_write_cfgPcPh+0x30>)
{
    2160:	0004      	movs	r4, r0
	if (!strcmp(payload, "cfg=C"))
    2162:	f009 ffa2 	bl	c0aa <strcmp>
    2166:	2800      	cmp	r0, #0
    2168:	d103      	bne.n	2172 <_Z14temp_write_cfgPcPh+0x16>
	{
		context.scalecfg = CELSIUS_SCALE;
    216a:	2243      	movs	r2, #67	; 0x43
    216c:	4b08      	ldr	r3, [pc, #32]	; (2190 <_Z14temp_write_cfgPcPh+0x34>)
    216e:	701a      	strb	r2, [r3, #0]
	{
		return SAPI_ERR_NOT_IMPLEMENTED;
	}

	return SAPI_ERR_OK;
}
    2170:	bd10      	pop	{r4, pc}
	else if (!strcmp(payload, "cfg=F"))
    2172:	4908      	ldr	r1, [pc, #32]	; (2194 <_Z14temp_write_cfgPcPh+0x38>)
    2174:	0020      	movs	r0, r4
    2176:	f009 ff98 	bl	c0aa <strcmp>
    217a:	0003      	movs	r3, r0
		return SAPI_ERR_NOT_IMPLEMENTED;
    217c:	2001      	movs	r0, #1
	else if (!strcmp(payload, "cfg=F"))
    217e:	2b00      	cmp	r3, #0
    2180:	d1f6      	bne.n	2170 <_Z14temp_write_cfgPcPh+0x14>
		context.scalecfg = FAHRENHEIT_SCALE;
    2182:	2146      	movs	r1, #70	; 0x46
    2184:	4a02      	ldr	r2, [pc, #8]	; (2190 <_Z14temp_write_cfgPcPh+0x34>)
	return SAPI_ERR_OK;
    2186:	0018      	movs	r0, r3
		context.scalecfg = FAHRENHEIT_SCALE;
    2188:	7011      	strb	r1, [r2, #0]
    218a:	e7f1      	b.n	2170 <_Z14temp_write_cfgPcPh+0x14>
    218c:	0000efad 	.word	0x0000efad
    2190:	20000320 	.word	0x20000320
    2194:	0000efb3 	.word	0x0000efb3

00002198 <_Z16calculateVoltagev>:
 * relay have to be powered with 3.3V
 * LOW to turn on
 * HIGH to turn off
 */
//digitalWrite(pinRelay, LOW); // turn on tehe light
float calculateVoltage(){
    2198:	b530      	push	{r4, r5, lr}
    219a:	b0a3      	sub	sp, #140	; 0x8c
  //digitalWrite(pinRelay, LOW); //turn on the light
  //analogWrite(pinRelay, 255);
  // Measuring Voltage
  RunningStatistics inputStats;
    219c:	a801      	add	r0, sp, #4
    219e:	f001 ff3a 	bl	4016 <_ZN17RunningStatisticsC1Ev>
  inputStats.setWindowSecs( windowLength );
    21a2:	4b17      	ldr	r3, [pc, #92]	; (2200 <_Z16calculateVoltagev+0x68>)
    21a4:	a801      	add	r0, sp, #4
    21a6:	6819      	ldr	r1, [r3, #0]
    21a8:	f001 ff10 	bl	3fcc <_ZN17RunningStatistics13setWindowSecsEf>

  //take 10000 samples to get more accurate reading
  while(temp != 10000){
    21ac:	4c15      	ldr	r4, [pc, #84]	; (2204 <_Z16calculateVoltagev+0x6c>)
    21ae:	4b16      	ldr	r3, [pc, #88]	; (2208 <_Z16calculateVoltagev+0x70>)
    21b0:	6822      	ldr	r2, [r4, #0]
    21b2:	4d16      	ldr	r5, [pc, #88]	; (220c <_Z16calculateVoltagev+0x74>)
    21b4:	429a      	cmp	r2, r3
    21b6:	d01e      	beq.n	21f6 <_Z16calculateVoltagev+0x5e>
    rawValue = analogRead(A4);
    21b8:	2005      	movs	r0, #5
    21ba:	f001 fc3b 	bl	3a34 <analogRead>
    21be:	4b14      	ldr	r3, [pc, #80]	; (2210 <_Z16calculateVoltagev+0x78>)
    21c0:	6018      	str	r0, [r3, #0]
    inputStats.input(rawValue);
    21c2:	f006 fdab 	bl	8d1c <__aeabi_i2f>
    21c6:	1c01      	adds	r1, r0, #0
    21c8:	a801      	add	r0, sp, #4
    21ca:	f001 ff3f 	bl	404c <_ZN17RunningStatistics5inputEf>

    //Serial.print("Raw Value : ");
    //Serial.println(inputStats.sigma());

    voltageReading = slope * inputStats.sigma();
    21ce:	a801      	add	r0, sp, #4
    21d0:	f001 ff6b 	bl	40aa <_ZN17RunningStatistics5sigmaEv>
    21d4:	4b0f      	ldr	r3, [pc, #60]	; (2214 <_Z16calculateVoltagev+0x7c>)
    21d6:	6819      	ldr	r1, [r3, #0]
    21d8:	f006 faac 	bl	8734 <__aeabi_fmul>
    //voltageReading = voltageReading * 40.3231;
    voltageReading = voltageReading * 47.1931;
    21dc:	f008 fbdc 	bl	a998 <__aeabi_f2d>
    21e0:	4b0d      	ldr	r3, [pc, #52]	; (2218 <_Z16calculateVoltagev+0x80>)
    21e2:	4a0e      	ldr	r2, [pc, #56]	; (221c <_Z16calculateVoltagev+0x84>)
    21e4:	f007 fd74 	bl	9cd0 <__aeabi_dmul>
    21e8:	f008 fc28 	bl	aa3c <__aeabi_d2f>

    temp = temp + 1;
    21ec:	6823      	ldr	r3, [r4, #0]
    voltageReading = voltageReading * 47.1931;
    21ee:	6028      	str	r0, [r5, #0]
    temp = temp + 1;
    21f0:	3301      	adds	r3, #1
    21f2:	6023      	str	r3, [r4, #0]
  while(temp != 10000){
    21f4:	e7da      	b.n	21ac <_Z16calculateVoltagev+0x14>
  }
	temp = 0;
    21f6:	2300      	movs	r3, #0
  //Serial.print("Voltage = ");
  //Serial.println(voltageReading);

  return voltageReading;
    21f8:	6828      	ldr	r0, [r5, #0]
	temp = 0;
    21fa:	6023      	str	r3, [r4, #0]
 }
    21fc:	b023      	add	sp, #140	; 0x8c
    21fe:	bd30      	pop	{r4, r5, pc}
    2200:	2000036c 	.word	0x2000036c
    2204:	20000364 	.word	0x20000364
    2208:	00002710 	.word	0x00002710
    220c:	20000368 	.word	0x20000368
    2210:	20000360 	.word	0x20000360
    2214:	20000004 	.word	0x20000004
    2218:	404798b7 	.word	0x404798b7
    221c:	80346dc6 	.word	0x80346dc6

00002220 <_Z18readACCurrentValuev>:

 float readACCurrentValue()
{
    2220:	b570      	push	{r4, r5, r6, lr}
  float ACCurrtntValue = 0;
  unsigned int peakVoltage = 0;
    2222:	2400      	movs	r4, #0
{
    2224:	4d17      	ldr	r5, [pc, #92]	; (2284 <_Z18readACCurrentValuev+0x64>)
  unsigned int voltageVirtualValue = 0;  //Vrms
  for (int i = 0; i < 3000; i++ )
  {
    peakVoltage  += analogRead(ACPin);   //read peak voltage
    2226:	2022      	movs	r0, #34	; 0x22
    2228:	f001 fc04 	bl	3a34 <analogRead>
    222c:	3d01      	subs	r5, #1
    222e:	1824      	adds	r4, r4, r0
    delay(1);
    2230:	2001      	movs	r0, #1
    2232:	f000 fa4d 	bl	26d0 <delay>
  for (int i = 0; i < 3000; i++ )
    2236:	2d00      	cmp	r5, #0
    2238:	d1f5      	bne.n	2226 <_Z18readACCurrentValuev+0x6>
  }
  peakVoltage = peakVoltage / 5;
    223a:	2105      	movs	r1, #5
    223c:	0020      	movs	r0, r4
    223e:	f005 fcd3 	bl	7be8 <__udivsi3>
  voltageVirtualValue = peakVoltage * 0.707;    //change the peak voltage to the Virtual Value of voltage
    2242:	f008 fb71 	bl	a928 <__aeabi_ui2d>
    2246:	4a10      	ldr	r2, [pc, #64]	; (2288 <_Z18readACCurrentValuev+0x68>)
    2248:	4b10      	ldr	r3, [pc, #64]	; (228c <_Z18readACCurrentValuev+0x6c>)
    224a:	f007 fd41 	bl	9cd0 <__aeabi_dmul>
    224e:	f005 fed1 	bl	7ff4 <__aeabi_d2uiz>

  /*The circuit is amplified by 2 times, so it is divided by 2.*/
  voltageVirtualValue = (voltageVirtualValue * Vref / 1024) / 2;
    2252:	f006 fdb3 	bl	8dbc <__aeabi_ui2f>
    2256:	4b0e      	ldr	r3, [pc, #56]	; (2290 <_Z18readACCurrentValuev+0x70>)
    2258:	6819      	ldr	r1, [r3, #0]
    225a:	f006 fa6b 	bl	8734 <__aeabi_fmul>
    225e:	21ea      	movs	r1, #234	; 0xea
    2260:	0589      	lsls	r1, r1, #22
    2262:	f006 fa67 	bl	8734 <__aeabi_fmul>
    2266:	21fc      	movs	r1, #252	; 0xfc
    2268:	0589      	lsls	r1, r1, #22
    226a:	f006 fa63 	bl	8734 <__aeabi_fmul>
    226e:	f005 fea9 	bl	7fc4 <__aeabi_f2uiz>

  ACCurrtntValue = voltageVirtualValue * ACTectionRange;
    2272:	2314      	movs	r3, #20
    2274:	4358      	muls	r0, r3
    2276:	f006 fda1 	bl	8dbc <__aeabi_ui2f>

  return ACCurrtntValue/1000;
    227a:	4906      	ldr	r1, [pc, #24]	; (2294 <_Z18readACCurrentValuev+0x74>)
    227c:	f006 f86a 	bl	8354 <__aeabi_fdiv>
}
    2280:	bd70      	pop	{r4, r5, r6, pc}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	00000bb8 	.word	0x00000bb8
    2288:	76c8b439 	.word	0x76c8b439
    228c:	3fe69fbe 	.word	0x3fe69fbe
    2290:	2000031c 	.word	0x2000031c
    2294:	447a0000 	.word	0x447a0000

00002298 <_Z18temp_build_payloadPcPf>:
//
//  Note that the payload is text. Payloads can also be a byte array of binary data.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_build_payload(char *buf, float *reading)
{
    2298:	b5f0      	push	{r4, r5, r6, r7, lr}
	char 		payload[64];
	char		reading_buf[32];
	char        datatype30[] = "30,";
    229a:	4b38      	ldr	r3, [pc, #224]	; (237c <_Z18temp_build_payloadPcPf+0xe4>)
{
    229c:	b09f      	sub	sp, #124	; 0x7c
	char        datatype30[] = "30,";
    229e:	9302      	str	r3, [sp, #8]
	char		datatype31[] = "31,"; //current datatype is 31
    22a0:	4b37      	ldr	r3, [pc, #220]	; (2380 <_Z18temp_build_payloadPcPf+0xe8>)
	char		unitVoltage[] = "V";
    22a2:	466a      	mov	r2, sp
	char		datatype31[] = "31,"; //current datatype is 31
    22a4:	9303      	str	r3, [sp, #12]
	char		unitVoltage[] = "V";
    22a6:	2356      	movs	r3, #86	; 0x56
{
    22a8:	0007      	movs	r7, r0
	char		unitVoltage[] = "V";
    22aa:	8013      	strh	r3, [r2, #0]
	char		unitCurrent[] = "A";
    22ac:	ac01      	add	r4, sp, #4
    22ae:	3b15      	subs	r3, #21
	char		unit_buf[4];
	time_t     	epoch;
	uint32_t	indx;
	char    rvoltage[] = "120.00,";
    22b0:	2208      	movs	r2, #8
    22b2:	4934      	ldr	r1, [pc, #208]	; (2384 <_Z18temp_build_payloadPcPf+0xec>)
    22b4:	a807      	add	r0, sp, #28
	char		unitCurrent[] = "A";
    22b6:	8023      	strh	r3, [r4, #0]
	char    rvoltage[] = "120.00,";
    22b8:	f008 fdd6 	bl	ae68 <memcpy>
	char    rcurrent[] = "0.23,";
    22bc:	4932      	ldr	r1, [pc, #200]	; (2388 <_Z18temp_build_payloadPcPf+0xf0>)
    22be:	2206      	movs	r2, #6
    22c0:	a805      	add	r0, sp, #20
    22c2:	f008 fdd1 	bl	ae68 <memcpy>
	char    temp_epoch[20];
	
	
	
	Vref = readVref();
    22c6:	4a31      	ldr	r2, [pc, #196]	; (238c <_Z18temp_build_payloadPcPf+0xf4>)
    22c8:	4b31      	ldr	r3, [pc, #196]	; (2390 <_Z18temp_build_payloadPcPf+0xf8>)
    22ca:	601a      	str	r2, [r3, #0]
	sprintf(rvoltage, "%.2f,", calculateVoltage());
    22cc:	f7ff ff64 	bl	2198 <_Z16calculateVoltagev>
    22d0:	f008 fb62 	bl	a998 <__aeabi_f2d>
    22d4:	4d2f      	ldr	r5, [pc, #188]	; (2394 <_Z18temp_build_payloadPcPf+0xfc>)
    22d6:	0002      	movs	r2, r0
    22d8:	000b      	movs	r3, r1
    22da:	a807      	add	r0, sp, #28
    22dc:	0029      	movs	r1, r5
    22de:	f009 feb5 	bl	c04c <siprintf>
	sprintf(rcurrent, "%.2f,", readACCurrentValue());
    22e2:	f7ff ff9d 	bl	2220 <_Z18readACCurrentValuev>
    22e6:	f008 fb57 	bl	a998 <__aeabi_f2d>
    22ea:	000b      	movs	r3, r1
    22ec:	0002      	movs	r2, r0
    22ee:	0029      	movs	r1, r5
    22f0:	a805      	add	r0, sp, #20
    22f2:	f009 feab 	bl	c04c <siprintf>
	
	// Create string containing the UNIX epoch
	epoch = get_rtc_epoch();
    22f6:	f001 fef7 	bl	40e8 <_Z13get_rtc_epochv>
    22fa:	0006      	movs	r6, r0
	sprintf(temp_epoch, "%d,", epoch);
    22fc:	4d26      	ldr	r5, [pc, #152]	; (2398 <_Z18temp_build_payloadPcPf+0x100>)
    22fe:	0002      	movs	r2, r0
    2300:	0029      	movs	r1, r5
    2302:	a809      	add	r0, sp, #36	; 0x24
    2304:	f009 fea2 	bl	c04c <siprintf>
	sprintf(payload, "%d,", epoch);
    2308:	0032      	movs	r2, r6
    230a:	0029      	movs	r1, r5
    230c:	a80e      	add	r0, sp, #56	; 0x38
    230e:	f009 fe9d 	bl	c04c <siprintf>
	strcat(payload, datatype30);
    2312:	a902      	add	r1, sp, #8
    2314:	a80e      	add	r0, sp, #56	; 0x38
    2316:	f009 febb 	bl	c090 <strcat>
	strcat(payload, rvoltage);
    231a:	a907      	add	r1, sp, #28
    231c:	a80e      	add	r0, sp, #56	; 0x38
    231e:	f009 feb7 	bl	c090 <strcat>
	strcpy(unit_buf, unitVoltage);
    2322:	4669      	mov	r1, sp
    2324:	a804      	add	r0, sp, #16
    2326:	f009 feca 	bl	c0be <strcpy>
	strcat(payload, unit_buf);
    232a:	a904      	add	r1, sp, #16
    232c:	a80e      	add	r0, sp, #56	; 0x38
    232e:	f009 feaf 	bl	c090 <strcat>
	strcat(payload, ";");
    2332:	491a      	ldr	r1, [pc, #104]	; (239c <_Z18temp_build_payloadPcPf+0x104>)
    2334:	a80e      	add	r0, sp, #56	; 0x38
    2336:	f009 feab 	bl	c090 <strcat>
	
	strcat(payload,temp_epoch);
    233a:	a909      	add	r1, sp, #36	; 0x24
    233c:	a80e      	add	r0, sp, #56	; 0x38
    233e:	f009 fea7 	bl	c090 <strcat>
	strcat(payload, datatype31);
    2342:	a903      	add	r1, sp, #12
    2344:	a80e      	add	r0, sp, #56	; 0x38
    2346:	f009 fea3 	bl	c090 <strcat>
	strcat(payload, rcurrent);
    234a:	a905      	add	r1, sp, #20
    234c:	a80e      	add	r0, sp, #56	; 0x38
    234e:	f009 fe9f 	bl	c090 <strcat>
	strcpy(unit_buf, unitCurrent);
    2352:	0021      	movs	r1, r4
    2354:	a804      	add	r0, sp, #16
    2356:	f009 feb2 	bl	c0be <strcpy>
	strcat(payload, unit_buf);
    235a:	a904      	add	r1, sp, #16
    235c:	a80e      	add	r0, sp, #56	; 0x38
    235e:	f009 fe97 	bl	c090 <strcat>
	strcat(payload, data2);
	strcat(payload, ";A4,");
	sprintf(data4, "%d", valueA4);
	strcat(payload, data4);
*/
	strcpy(buf, payload);
    2362:	a90e      	add	r1, sp, #56	; 0x38
    2364:	0038      	movs	r0, r7
    2366:	f009 feaa 	bl	c0be <strcpy>
	
	dlog(LOG_DEBUG, "Temp Payload: %s", payload);
    236a:	aa0e      	add	r2, sp, #56	; 0x38
    236c:	490c      	ldr	r1, [pc, #48]	; (23a0 <_Z18temp_build_payloadPcPf+0x108>)
    236e:	2007      	movs	r0, #7
    2370:	f001 ff52 	bl	4218 <_Z4dlogiPKcz>
	return SAPI_ERR_OK;
}
    2374:	2000      	movs	r0, #0
    2376:	b01f      	add	sp, #124	; 0x7c
    2378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	002c3033 	.word	0x002c3033
    2380:	002c3133 	.word	0x002c3133
    2384:	0000f070 	.word	0x0000f070
    2388:	0000f078 	.word	0x0000f078
    238c:	454e4000 	.word	0x454e4000
    2390:	2000031c 	.word	0x2000031c
    2394:	0000f055 	.word	0x0000f055
    2398:	0000f05b 	.word	0x0000f05b
    239c:	0000f6d6 	.word	0x0000f6d6
    23a0:	0000f05f 	.word	0x0000f05f

000023a4 <_Z13temp_read_cfgPcPh>:
{
    23a4:	b570      	push	{r4, r5, r6, lr}
    23a6:	000e      	movs	r6, r1
	sapi_error_t rc = temp_build_payload(payload, NULL);
    23a8:	2100      	movs	r1, #0
{
    23aa:	0004      	movs	r4, r0
	sapi_error_t rc = temp_build_payload(payload, NULL);
    23ac:	f7ff ff74 	bl	2298 <_Z18temp_build_payloadPcPf>
    23b0:	0005      	movs	r5, r0
	*len = strlen(payload);
    23b2:	0020      	movs	r0, r4
    23b4:	f009 fe8b 	bl	c0ce <strlen>
    23b8:	7030      	strb	r0, [r6, #0]
}
    23ba:	0028      	movs	r0, r5
    23bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000023c0 <_Z10read_dht11Pf>:
//
// Read the temp value from the DHT11 sensor.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t read_dht11(float *reading)
{
    23c0:	b530      	push	{r4, r5, lr}
    float    min_value;                       /**< minimum value of this sensor's value in SI units */
    float    resolution;                      /**< smallest difference between two values reported by this sensor */
    int32_t  min_delay;                       /**< min delay in microseconds between events. zero = not a constant rate */
} sensor_t;

class Adafruit_Sensor {
    23c2:	4b17      	ldr	r3, [pc, #92]	; (2420 <_Z10read_dht11Pf+0x60>)
    23c4:	b08f      	sub	sp, #60	; 0x3c
    23c6:	7f1a      	ldrb	r2, [r3, #28]
    23c8:	0005      	movs	r5, r0
    23ca:	a801      	add	r0, sp, #4
    23cc:	7102      	strb	r2, [r0, #4]
public:
  DHT_Unified(uint8_t pin, uint8_t type, uint8_t count=6, int32_t tempSensorId=-1, int32_t humiditySensorId=-1);
  void begin();

  class Temperature : public Adafruit_Sensor {
    23ce:	4a15      	ldr	r2, [pc, #84]	; (2424 <_Z10read_dht11Pf+0x64>)
	sapi_error_t rc = SAPI_ERR_OK;
	float re = INVALID_TEMP;

	// Get temperature event
	sensors_event_t event;
	dht.temperature().getEvent(&event);
    23d0:	a905      	add	r1, sp, #20
    23d2:	9201      	str	r2, [sp, #4]
    23d4:	6a1a      	ldr	r2, [r3, #32]
    23d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    23d8:	6082      	str	r2, [r0, #8]
    23da:	60c3      	str	r3, [r0, #12]
    23dc:	f001 fcf7 	bl	3dce <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>

	// Check for NaN
	if (isnan(event.temperature))
    23e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
    23e2:	1c21      	adds	r1, r4, #0
    23e4:	1c20      	adds	r0, r4, #0
    23e6:	f006 fc61 	bl	8cac <__aeabi_fcmpun>
    23ea:	2800      	cmp	r0, #0
    23ec:	d000      	beq.n	23f0 <_Z10read_dht11Pf+0x30>
	{
		re = NO_SENSOR_TEMP;
    23ee:	4c0e      	ldr	r4, [pc, #56]	; (2428 <_Z10read_dht11Pf+0x68>)
		re = event.temperature;
		rc = SAPI_ERR_OK;
	}
	
	// Reading is in C. Convert to F if needed.
	if (context.scalecfg == FAHRENHEIT_SCALE)
    23f0:	4b0e      	ldr	r3, [pc, #56]	; (242c <_Z10read_dht11Pf+0x6c>)
    23f2:	781b      	ldrb	r3, [r3, #0]
    23f4:	b25b      	sxtb	r3, r3
    23f6:	2b46      	cmp	r3, #70	; 0x46
    23f8:	d10d      	bne.n	2416 <_Z10read_dht11Pf+0x56>
	{
		// Convert from Celsius to Fahrenheit
		re *= 1.8;
    23fa:	1c20      	adds	r0, r4, #0
    23fc:	f008 facc 	bl	a998 <__aeabi_f2d>
    2400:	4a0b      	ldr	r2, [pc, #44]	; (2430 <_Z10read_dht11Pf+0x70>)
    2402:	4b0c      	ldr	r3, [pc, #48]	; (2434 <_Z10read_dht11Pf+0x74>)
    2404:	f007 fc64 	bl	9cd0 <__aeabi_dmul>
    2408:	f008 fb18 	bl	aa3c <__aeabi_d2f>
		re += 32;
    240c:	2184      	movs	r1, #132	; 0x84
    240e:	05c9      	lsls	r1, r1, #23
    2410:	f005 fe0e 	bl	8030 <__aeabi_fadd>
    2414:	1c04      	adds	r4, r0, #0
	}
	
	// Assign output
	*reading = re;
	return rc;
}
    2416:	2000      	movs	r0, #0
	*reading = re;
    2418:	602c      	str	r4, [r5, #0]
}
    241a:	b00f      	add	sp, #60	; 0x3c
    241c:	bd30      	pop	{r4, r5, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	20000328 	.word	0x20000328
    2424:	0000f0e8 	.word	0x0000f0e8
    2428:	42c80000 	.word	0x42c80000
    242c:	20000320 	.word	0x20000320
    2430:	cccccccd 	.word	0xcccccccd
    2434:	3ffccccc 	.word	0x3ffccccc

00002438 <_Z16temp_read_sensorPcPh>:
	float reading = 0.0;
    2438:	2300      	movs	r3, #0
{
    243a:	b570      	push	{r4, r5, r6, lr}
    243c:	b092      	sub	sp, #72	; 0x48
    243e:	0006      	movs	r6, r0
    rc = read_dht11(&reading);
    2440:	a801      	add	r0, sp, #4
{
    2442:	000d      	movs	r5, r1
	float reading = 0.0;
    2444:	9301      	str	r3, [sp, #4]
    rc = read_dht11(&reading);
    2446:	f7ff ffbb 	bl	23c0 <_Z10read_dht11Pf>
    244a:	1e04      	subs	r4, r0, #0
	if (rc != SAPI_ERR_OK)
    244c:	d10c      	bne.n	2468 <_Z16temp_read_sensorPcPh+0x30>
	rc = temp_build_payload(buffer, &reading);
    244e:	a901      	add	r1, sp, #4
    2450:	a802      	add	r0, sp, #8
    2452:	f7ff ff21 	bl	2298 <_Z18temp_build_payloadPcPf>
	strcpy(payload, buffer);
    2456:	a902      	add	r1, sp, #8
	rc = temp_build_payload(buffer, &reading);
    2458:	0004      	movs	r4, r0
	strcpy(payload, buffer);
    245a:	0030      	movs	r0, r6
    245c:	f009 fe2f 	bl	c0be <strcpy>
	*len = strlen(buffer);
    2460:	a802      	add	r0, sp, #8
    2462:	f009 fe34 	bl	c0ce <strlen>
    2466:	7028      	strb	r0, [r5, #0]
}
    2468:	0020      	movs	r0, r4
    246a:	b012      	add	sp, #72	; 0x48
    246c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002470 <_Z18temp_sensor_enablev>:
//
//////////////////////////////////////////////////////////////////////////

sapi_error_t temp_sensor_enable(void)
{
	context.enable = 1;
    2470:	2201      	movs	r2, #1
    2472:	4b03      	ldr	r3, [pc, #12]	; (2480 <_Z18temp_sensor_enablev+0x10>)
	context.alertstate = tsat_cleared;
	return SAPI_ERR_OK;
}
    2474:	2000      	movs	r0, #0
	context.enable = 1;
    2476:	711a      	strb	r2, [r3, #4]
	context.alertstate = tsat_cleared;
    2478:	1892      	adds	r2, r2, r2
    247a:	705a      	strb	r2, [r3, #1]
}
    247c:	4770      	bx	lr
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	20000320 	.word	0x20000320

00002484 <_Z16temp_init_sensorv>:
{
    2484:	b5f0      	push	{r4, r5, r6, r7, lr}
	context.scalecfg = FAHRENHEIT_SCALE;
    2486:	2246      	movs	r2, #70	; 0x46
	context.alertstate = tsat_disabled;
    2488:	2600      	movs	r6, #0
	context.scalecfg = FAHRENHEIT_SCALE;
    248a:	4b33      	ldr	r3, [pc, #204]	; (2558 <_Z16temp_init_sensorv+0xd4>)
{
    248c:	b091      	sub	sp, #68	; 0x44
	context.scalecfg = FAHRENHEIT_SCALE;
    248e:	701a      	strb	r2, [r3, #0]
	context.alertstate = tsat_disabled;
    2490:	705e      	strb	r6, [r3, #1]
	temp_sensor_enable();
    2492:	f7ff ffed 	bl	2470 <_Z18temp_sensor_enablev>
	dht.begin();
    2496:	4c31      	ldr	r4, [pc, #196]	; (255c <_Z16temp_init_sensorv+0xd8>)
    2498:	0020      	movs	r0, r4
    249a:	f001 fced 	bl	3e78 <_ZN11DHT_Unified5beginEv>
	println("DHT11 Sensor Initialized!");
    249e:	4830      	ldr	r0, [pc, #192]	; (2560 <_Z16temp_init_sensorv+0xdc>)
    24a0:	f001 ff2e 	bl	4300 <_Z7printlnPKc>
    24a4:	7f23      	ldrb	r3, [r4, #28]
    24a6:	aa02      	add	r2, sp, #8
    24a8:	7113      	strb	r3, [r2, #4]
    24aa:	4b2e      	ldr	r3, [pc, #184]	; (2564 <_Z16temp_init_sensorv+0xe0>)
	dht.temperature().getSensor(&sensor);
    24ac:	0010      	movs	r0, r2
    24ae:	9302      	str	r3, [sp, #8]
    24b0:	6a23      	ldr	r3, [r4, #32]
    24b2:	a906      	add	r1, sp, #24
    24b4:	9304      	str	r3, [sp, #16]
    24b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    24b8:	9301      	str	r3, [sp, #4]
    24ba:	9305      	str	r3, [sp, #20]
    24bc:	f001 fd10 	bl	3ee0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
	println("");
    24c0:	4c29      	ldr	r4, [pc, #164]	; (2568 <_Z16temp_init_sensorv+0xe4>)
    24c2:	0020      	movs	r0, r4
    24c4:	f001 ff1c 	bl	4300 <_Z7printlnPKc>
	println("------------------------------------");
    24c8:	4f28      	ldr	r7, [pc, #160]	; (256c <_Z16temp_init_sensorv+0xe8>)
    24ca:	0038      	movs	r0, r7
    24cc:	f001 ff18 	bl	4300 <_Z7printlnPKc>
	print  ("Sensor:       "); println(sensor.name);
    24d0:	4827      	ldr	r0, [pc, #156]	; (2570 <_Z16temp_init_sensorv+0xec>)
    24d2:	f001 feff 	bl	42d4 <_Z5printPKc>
    24d6:	a806      	add	r0, sp, #24
    24d8:	f001 ff12 	bl	4300 <_Z7printlnPKc>
	print  ("Driver Ver:   "); printnum(sensor.version);    println("");
    24dc:	4825      	ldr	r0, [pc, #148]	; (2574 <_Z16temp_init_sensorv+0xf0>)
    24de:	f001 fef9 	bl	42d4 <_Z5printPKc>
    24e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    24e4:	f001 ff22 	bl	432c <_Z8printnumi>
    24e8:	0020      	movs	r0, r4
    24ea:	f001 ff09 	bl	4300 <_Z7printlnPKc>
	print  ("Unique ID:    "); printnum(sensor.sensor_id);  println("");
    24ee:	4822      	ldr	r0, [pc, #136]	; (2578 <_Z16temp_init_sensorv+0xf4>)
    24f0:	f001 fef0 	bl	42d4 <_Z5printPKc>
    24f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    24f6:	f001 ff19 	bl	432c <_Z8printnumi>
    24fa:	0020      	movs	r0, r4
    24fc:	f001 ff00 	bl	4300 <_Z7printlnPKc>
	print  ("Max Value:    "); printnum(sensor.max_value);  println(" C");
    2500:	481e      	ldr	r0, [pc, #120]	; (257c <_Z16temp_init_sensorv+0xf8>)
    2502:	f001 fee7 	bl	42d4 <_Z5printPKc>
    2506:	980c      	ldr	r0, [sp, #48]	; 0x30
    2508:	f006 fbe8 	bl	8cdc <__aeabi_f2iz>
    250c:	f001 ff0e 	bl	432c <_Z8printnumi>
    2510:	4d1b      	ldr	r5, [pc, #108]	; (2580 <_Z16temp_init_sensorv+0xfc>)
    2512:	0028      	movs	r0, r5
    2514:	f001 fef4 	bl	4300 <_Z7printlnPKc>
	print  ("Min Value:    "); printnum(sensor.min_value);  println(" C");
    2518:	481a      	ldr	r0, [pc, #104]	; (2584 <_Z16temp_init_sensorv+0x100>)
    251a:	f001 fedb 	bl	42d4 <_Z5printPKc>
    251e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2520:	f006 fbdc 	bl	8cdc <__aeabi_f2iz>
    2524:	f001 ff02 	bl	432c <_Z8printnumi>
    2528:	0028      	movs	r0, r5
    252a:	f001 fee9 	bl	4300 <_Z7printlnPKc>
	print  ("Resolution:   "); printnum(sensor.resolution); println(" C");
    252e:	4816      	ldr	r0, [pc, #88]	; (2588 <_Z16temp_init_sensorv+0x104>)
    2530:	f001 fed0 	bl	42d4 <_Z5printPKc>
    2534:	980e      	ldr	r0, [sp, #56]	; 0x38
    2536:	f006 fbd1 	bl	8cdc <__aeabi_f2iz>
    253a:	f001 fef7 	bl	432c <_Z8printnumi>
    253e:	0028      	movs	r0, r5
    2540:	f001 fede 	bl	4300 <_Z7printlnPKc>
	println("------------------------------------");        println("");
    2544:	0038      	movs	r0, r7
    2546:	f001 fedb 	bl	4300 <_Z7printlnPKc>
    254a:	0020      	movs	r0, r4
    254c:	f001 fed8 	bl	4300 <_Z7printlnPKc>
}
    2550:	0030      	movs	r0, r6
    2552:	b011      	add	sp, #68	; 0x44
    2554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	20000320 	.word	0x20000320
    255c:	20000328 	.word	0x20000328
    2560:	0000efb9 	.word	0x0000efb9
    2564:	0000f0e8 	.word	0x0000f0e8
    2568:	0000f47e 	.word	0x0000f47e
    256c:	0000efd3 	.word	0x0000efd3
    2570:	0000eff8 	.word	0x0000eff8
    2574:	0000f007 	.word	0x0000f007
    2578:	0000f016 	.word	0x0000f016
    257c:	0000f025 	.word	0x0000f025
    2580:	0000f034 	.word	0x0000f034
    2584:	0000f037 	.word	0x0000f037
    2588:	0000f046 	.word	0x0000f046

0000258c <_GLOBAL__sub_I_dht>:
DHT_Unified dht(A1, DHT_TYPE);
    258c:	2301      	movs	r3, #1
sapi_error_t temp_sensor_disable(void)
{
	context.enable = 0;
	context.alertstate = tsat_disabled;
	return SAPI_ERR_OK;
    258e:	b513      	push	{r0, r1, r4, lr}
DHT_Unified dht(A1, DHT_TYPE);
    2590:	4c0b      	ldr	r4, [pc, #44]	; (25c0 <_GLOBAL__sub_I_dht+0x34>)
    2592:	425b      	negs	r3, r3
    2594:	9301      	str	r3, [sp, #4]
    2596:	9300      	str	r3, [sp, #0]
    2598:	220b      	movs	r2, #11
    259a:	3307      	adds	r3, #7
    259c:	2100      	movs	r1, #0
    259e:	0020      	movs	r0, r4
    25a0:	f001 fc52 	bl	3e48 <_ZN11DHT_UnifiedC1Ehhhll>
    25a4:	4a07      	ldr	r2, [pc, #28]	; (25c4 <_GLOBAL__sub_I_dht+0x38>)
    25a6:	4908      	ldr	r1, [pc, #32]	; (25c8 <_GLOBAL__sub_I_dht+0x3c>)
    25a8:	0020      	movs	r0, r4
    25aa:	f005 f85e 	bl	766a <__aeabi_atexit>
float windowLength = 40.0/testFrequency;     // how long to average the signal, for statistist
    25ae:	4b07      	ldr	r3, [pc, #28]	; (25cc <_GLOBAL__sub_I_dht+0x40>)
    25b0:	4807      	ldr	r0, [pc, #28]	; (25d0 <_GLOBAL__sub_I_dht+0x44>)
    25b2:	6819      	ldr	r1, [r3, #0]
    25b4:	f005 fece 	bl	8354 <__aeabi_fdiv>
    25b8:	4b06      	ldr	r3, [pc, #24]	; (25d4 <_GLOBAL__sub_I_dht+0x48>)
    25ba:	6018      	str	r0, [r3, #0]
    25bc:	bd13      	pop	{r0, r1, r4, pc}
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	20000328 	.word	0x20000328
    25c4:	20000000 	.word	0x20000000
    25c8:	00002159 	.word	0x00002159
    25cc:	20000008 	.word	0x20000008
    25d0:	42200000 	.word	0x42200000
    25d4:	2000036c 	.word	0x2000036c

000025d8 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    25d8:	be03      	bkpt	0x0003
    25da:	e7fe      	b.n	25da <Dummy_Handler+0x2>

000025dc <USB_Handler>:
#else
static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    25dc:	4b03      	ldr	r3, [pc, #12]	; (25ec <USB_Handler+0x10>)
{
    25de:	b510      	push	{r4, lr}
  if (usb_isr)
    25e0:	681b      	ldr	r3, [r3, #0]
    25e2:	2b00      	cmp	r3, #0
    25e4:	d000      	beq.n	25e8 <USB_Handler+0xc>
    usb_isr();
    25e6:	4798      	blx	r3
}
    25e8:	bd10      	pop	{r4, pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	20000370 	.word	0x20000370

000025f0 <HardFault_Handler>:
#endif
#endif

void HardFault_Handler(void)
{
  __BKPT(13);
    25f0:	be0d      	bkpt	0x000d
    25f2:	e7fe      	b.n	25f2 <HardFault_Handler+0x2>

000025f4 <Reset_Handler>:
{
    25f4:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    25f6:	490f      	ldr	r1, [pc, #60]	; (2634 <Reset_Handler+0x40>)
    25f8:	4c0f      	ldr	r4, [pc, #60]	; (2638 <Reset_Handler+0x44>)
    25fa:	42a1      	cmp	r1, r4
    25fc:	d104      	bne.n	2608 <Reset_Handler+0x14>
  SystemInit();
    25fe:	f000 f8f5 	bl	27ec <SystemInit>
  main();
    2602:	f000 f8a3 	bl	274c <main>
    2606:	e7fe      	b.n	2606 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2608:	4d0c      	ldr	r5, [pc, #48]	; (263c <Reset_Handler+0x48>)
    260a:	2300      	movs	r3, #0
    260c:	428d      	cmp	r5, r1
    260e:	d0f6      	beq.n	25fe <Reset_Handler+0xa>
    2610:	18ca      	adds	r2, r1, r3
    2612:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2614:	42a2      	cmp	r2, r4
    2616:	d305      	bcc.n	2624 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2618:	4290      	cmp	r0, r2
    261a:	d0f0      	beq.n	25fe <Reset_Handler+0xa>
    261c:	4b08      	ldr	r3, [pc, #32]	; (2640 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    261e:	4909      	ldr	r1, [pc, #36]	; (2644 <Reset_Handler+0x50>)
      *pDest = 0;
    2620:	2200      	movs	r2, #0
    2622:	e004      	b.n	262e <Reset_Handler+0x3a>
      *pDest = *pSrc;
    2624:	6800      	ldr	r0, [r0, #0]
    2626:	3304      	adds	r3, #4
    2628:	6010      	str	r0, [r2, #0]
    262a:	e7f1      	b.n	2610 <Reset_Handler+0x1c>
      *pDest = 0;
    262c:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    262e:	428b      	cmp	r3, r1
    2630:	d3fc      	bcc.n	262c <Reset_Handler+0x38>
    2632:	e7e4      	b.n	25fe <Reset_Handler+0xa>
    2634:	20000000 	.word	0x20000000
    2638:	20000300 	.word	0x20000300
    263c:	000104f4 	.word	0x000104f4
    2640:	20000300 	.word	0x20000300
    2644:	20000f14 	.word	0x20000f14

00002648 <SysTick_Handler>:
{
    2648:	b510      	push	{r4, lr}
  if (sysTickHook())
    264a:	f000 f87c 	bl	2746 <sysTickHook>
    264e:	2800      	cmp	r0, #0
    2650:	d101      	bne.n	2656 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    2652:	f000 f863 	bl	271c <SysTick_DefaultHandler>
}
    2656:	bd10      	pop	{r4, pc}

00002658 <USB_SetHandler>:
  usb_isr = new_usb_isr;
    2658:	4b01      	ldr	r3, [pc, #4]	; (2660 <USB_SetHandler+0x8>)
    265a:	6018      	str	r0, [r3, #0]
}
    265c:	4770      	bx	lr
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	20000370 	.word	0x20000370

00002664 <millis>:
#endif

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    2664:	4b01      	ldr	r3, [pc, #4]	; (266c <millis+0x8>)
    2666:	6818      	ldr	r0, [r3, #0]
}
    2668:	4770      	bx	lr
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	20000374 	.word	0x20000374

00002670 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
    2670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    2672:	4813      	ldr	r0, [pc, #76]	; (26c0 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2674:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
    2676:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
    2678:	4912      	ldr	r1, [pc, #72]	; (26c4 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    267a:	4c13      	ldr	r4, [pc, #76]	; (26c8 <micros+0x58>)
  ticks2  = SysTick->VAL;
    267c:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    267e:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
    2680:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2682:	0e9b      	lsrs	r3, r3, #26
    2684:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2686:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
    2688:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    268a:	6862      	ldr	r2, [r4, #4]
    268c:	9f01      	ldr	r7, [sp, #4]
    268e:	0e92      	lsrs	r2, r2, #26
    2690:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
    2692:	4667      	mov	r7, ip
    2694:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    2696:	4293      	cmp	r3, r2
    2698:	d10e      	bne.n	26b8 <micros+0x48>
    269a:	42bd      	cmp	r5, r7
    269c:	d10c      	bne.n	26b8 <micros+0x48>
    269e:	4286      	cmp	r6, r0
    26a0:	d30a      	bcc.n	26b8 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    26a2:	195b      	adds	r3, r3, r5
    26a4:	25fa      	movs	r5, #250	; 0xfa
    26a6:	6848      	ldr	r0, [r1, #4]
    26a8:	00ad      	lsls	r5, r5, #2
    26aa:	1b86      	subs	r6, r0, r6
    26ac:	4807      	ldr	r0, [pc, #28]	; (26cc <micros+0x5c>)
    26ae:	436b      	muls	r3, r5
    26b0:	4370      	muls	r0, r6
    26b2:	0d00      	lsrs	r0, r0, #20
    26b4:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    26b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    26b8:	003d      	movs	r5, r7
    26ba:	0013      	movs	r3, r2
    26bc:	0006      	movs	r6, r0
    26be:	e7e3      	b.n	2688 <micros+0x18>
    26c0:	20000374 	.word	0x20000374
    26c4:	e000e010 	.word	0xe000e010
    26c8:	e000ed00 	.word	0xe000ed00
    26cc:	00005555 	.word	0x00005555

000026d0 <delay>:

void delay( unsigned long ms )
{
    26d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26d2:	1e04      	subs	r4, r0, #0
  if (ms)
    26d4:	d01c      	beq.n	2710 <delay+0x40>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    26d6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    26da:	b672      	cpsid	i
#if !defined(NO_DELAY_HIGH_WORD)
    uint8_t enableInterrupts = ((__get_PRIMASK() & 0x1) == 0);
    __disable_irq();
#endif

    uint32_t start = _ulTickCount ;
    26dc:	4e0d      	ldr	r6, [pc, #52]	; (2714 <delay+0x44>)
#if !defined(NO_DELAY_HIGH_WORD)
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    26de:	4f0e      	ldr	r7, [pc, #56]	; (2718 <delay+0x48>)
    uint32_t start = _ulTickCount ;
    26e0:	6835      	ldr	r5, [r6, #0]
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    26e2:	683a      	ldr	r2, [r7, #0]
    26e4:	9201      	str	r2, [sp, #4]

    if (enableInterrupts) {
    26e6:	07db      	lsls	r3, r3, #31
    26e8:	d400      	bmi.n	26ec <delay+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
    26ea:	b662      	cpsie	i
      __enable_irq();
    }

    // Check for _ulTickCount overflow
    uint32_t remaining = (0xFFFFFFFF - start);
    26ec:	43eb      	mvns	r3, r5
    if (ms > remaining) {
    26ee:	429c      	cmp	r4, r3
    26f0:	d904      	bls.n	26fc <delay+0x2c>
      ms -= (remaining + 1);
    26f2:	1964      	adds	r4, r4, r5
      start = 0;
    26f4:	2500      	movs	r5, #0
      targetTickCountHighWord++;
    26f6:	9b01      	ldr	r3, [sp, #4]
    26f8:	3301      	adds	r3, #1
    26fa:	9301      	str	r3, [sp, #4]
    }
#endif

    do
    {
      yield() ;
    26fc:	f000 f822 	bl	2744 <yield>
#if !defined(NO_DELAY_HIGH_WORD)
    } while (_ulTickCountHighWord < targetTickCountHighWord || (_ulTickCount - start) < ms ) ;
    2700:	683b      	ldr	r3, [r7, #0]
    2702:	9a01      	ldr	r2, [sp, #4]
    2704:	4293      	cmp	r3, r2
    2706:	d3f9      	bcc.n	26fc <delay+0x2c>
    2708:	6833      	ldr	r3, [r6, #0]
    270a:	1b5b      	subs	r3, r3, r5
    270c:	429c      	cmp	r4, r3
    270e:	d8f5      	bhi.n	26fc <delay+0x2c>
#else
    } while (_ulTickCount - start < ms ) ;
#endif
  }
}
    2710:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	20000374 	.word	0x20000374
    2718:	20000378 	.word	0x20000378

0000271c <SysTick_DefaultHandler>:
#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
  // Increment tick count each ms
  _ulTickCount++;
    271c:	4b07      	ldr	r3, [pc, #28]	; (273c <SysTick_DefaultHandler+0x20>)
{
    271e:	b510      	push	{r4, lr}
  _ulTickCount++;
    2720:	681a      	ldr	r2, [r3, #0]
    2722:	3201      	adds	r2, #1
    2724:	601a      	str	r2, [r3, #0]

#if !defined(NO_DELAY_HIGH_WORD)
  if ( _ulTickCount == 0 )
    2726:	681b      	ldr	r3, [r3, #0]
    2728:	2b00      	cmp	r3, #0
    272a:	d103      	bne.n	2734 <SysTick_DefaultHandler+0x18>
  {
    _ulTickCountHighWord++;
    272c:	4a04      	ldr	r2, [pc, #16]	; (2740 <SysTick_DefaultHandler+0x24>)
    272e:	6813      	ldr	r3, [r2, #0]
    2730:	3301      	adds	r3, #1
    2732:	6013      	str	r3, [r2, #0]
  }
#endif
#if defined(CDC_ONLY) || defined(CDC_HID) || defined(WITH_CDC)
  tickReset();
    2734:	f000 f838 	bl	27a8 <tickReset>
#endif
}
    2738:	bd10      	pop	{r4, pc}
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	20000374 	.word	0x20000374
    2740:	20000378 	.word	0x20000378

00002744 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    2744:	4770      	bx	lr

00002746 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    2746:	2000      	movs	r0, #0
    2748:	4770      	bx	lr

0000274a <_Z11initVariantv>:
#include "sam.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    274a:	4770      	bx	lr

0000274c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    274c:	b510      	push	{r4, lr}
  init();
    274e:	f001 f859 	bl	3804 <init>

  __libc_init_array();
    2752:	f008 fb2d 	bl	adb0 <__libc_init_array>

  initVariant();
    2756:	f7ff fff8 	bl	274a <_Z11initVariantv>

  delay(1);
    275a:	2001      	movs	r0, #1
    275c:	f7ff ffb8 	bl	26d0 <delay>
#if defined(USBCON) && !defined(USB_DISABLED)
  USBDevice.init();
    2760:	4c08      	ldr	r4, [pc, #32]	; (2784 <main+0x38>)
    2762:	0020      	movs	r0, r4
    2764:	f000 faf6 	bl	2d54 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    2768:	0020      	movs	r0, r4
    276a:	f000 fb53 	bl	2e14 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    276e:	f7ff fcd1 	bl	2114 <setup>

  for (;;)
  {
    loop();
    2772:	f7ff fced 	bl	2150 <loop>
    if (serialEventRun) serialEventRun();
    2776:	4b04      	ldr	r3, [pc, #16]	; (2788 <main+0x3c>)
    2778:	2b00      	cmp	r3, #0
    277a:	d0fa      	beq.n	2772 <main+0x26>
    277c:	e000      	b.n	2780 <main+0x34>
    277e:	bf00      	nop
    2780:	e7f7      	b.n	2772 <main+0x26>
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	2000037c 	.word	0x2000037c
    2788:	00000000 	.word	0x00000000

0000278c <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    278c:	4b01      	ldr	r3, [pc, #4]	; (2794 <initiateReset+0x8>)
    278e:	6018      	str	r0, [r3, #0]
}
    2790:	4770      	bx	lr
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	2000000c 	.word	0x2000000c

00002798 <cancelReset>:

void cancelReset() {
	ticks = -1;
    2798:	2201      	movs	r2, #1
    279a:	4b02      	ldr	r3, [pc, #8]	; (27a4 <cancelReset+0xc>)
    279c:	4252      	negs	r2, r2
    279e:	601a      	str	r2, [r3, #0]
}
    27a0:	4770      	bx	lr
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	2000000c 	.word	0x2000000c

000027a8 <tickReset>:

void tickReset() {
	if (ticks == -1)
    27a8:	4a05      	ldr	r2, [pc, #20]	; (27c0 <tickReset+0x18>)
void tickReset() {
    27aa:	b510      	push	{r4, lr}
	if (ticks == -1)
    27ac:	6813      	ldr	r3, [r2, #0]
    27ae:	1c59      	adds	r1, r3, #1
    27b0:	d005      	beq.n	27be <tickReset+0x16>
		return;
	ticks--;
    27b2:	3b01      	subs	r3, #1
    27b4:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    27b6:	2b00      	cmp	r3, #0
    27b8:	d101      	bne.n	27be <tickReset+0x16>
		banzai();
    27ba:	4b02      	ldr	r3, [pc, #8]	; (27c4 <tickReset+0x1c>)
    27bc:	4798      	blx	r3
}
    27be:	bd10      	pop	{r4, pc}
    27c0:	2000000c 	.word	0x2000000c
    27c4:	00010491 	.word	0x00010491

000027c8 <waitForSync>:
void waitForSync( void )
{
#if (SAMD21 || SAMD11)
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21 || SAMD51)
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    27c8:	4902      	ldr	r1, [pc, #8]	; (27d4 <waitForSync+0xc>)
    27ca:	4b03      	ldr	r3, [pc, #12]	; (27d8 <waitForSync+0x10>)
    27cc:	684a      	ldr	r2, [r1, #4]
    27ce:	421a      	tst	r2, r3
    27d0:	d1fc      	bne.n	27cc <waitForSync+0x4>
#endif
}
    27d2:	4770      	bx	lr
    27d4:	40001800 	.word	0x40001800
    27d8:	000007fd 	.word	0x000007fd

000027dc <waitForPLL>:
{
#if (SAMD51)
  while ( OSCCTRL->Dpll[0].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
  while ( OSCCTRL->Dpll[1].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
#else
  while ( OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
    27dc:	230e      	movs	r3, #14
    27de:	4902      	ldr	r1, [pc, #8]	; (27e8 <waitForPLL+0xc>)
    27e0:	780a      	ldrb	r2, [r1, #0]
    27e2:	421a      	tst	r2, r3
    27e4:	d1fc      	bne.n	27e0 <waitForPLL+0x4>
#endif
}
    27e6:	4770      	bx	lr
    27e8:	40000c38 	.word	0x40000c38

000027ec <SystemInit>:
   * Disable automatic NVM write operations (errata reference 13134, applies to D21/D11/L21, but not C21 or D51)
   */
#if (SAMD21 || SAMD11)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_HALF | NVMCTRL_CTRLB_MANW) ; // one wait state
#elif (SAML21 || SAMC21)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27ec:	2284      	movs	r2, #132	; 0x84
{
    27ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27f0:	4b29      	ldr	r3, [pc, #164]	; (2898 <SystemInit+0xac>)
  /* Turn on the digital interface clock */
#if !defined(TRUST_RESET_DEFAULTS)
#if (SAMD21 || SAMD11)
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
#elif (SAML21 || SAMC21 || SAMD51)
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27f2:	4d2a      	ldr	r5, [pc, #168]	; (289c <SystemInit+0xb0>)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27f4:	605a      	str	r2, [r3, #4]
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27f6:	2340      	movs	r3, #64	; 0x40
    27f8:	696a      	ldr	r2, [r5, #20]
#endif
#endif

#if (SAML21)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    27fa:	2102      	movs	r1, #2
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27fc:	4313      	orrs	r3, r2
    27fe:	616b      	str	r3, [r5, #20]
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2800:	2380      	movs	r3, #128	; 0x80
    2802:	2201      	movs	r2, #1
    2804:	05db      	lsls	r3, r3, #23
    2806:	719a      	strb	r2, [r3, #6]
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    2808:	7898      	ldrb	r0, [r3, #2]
    280a:	4301      	orrs	r1, r0
    280c:	7099      	strb	r1, [r3, #2]
  while ( (PM->INTFLAG.reg & PM_INTFLAG_PLRDY) != PM_INTFLAG_PLRDY );
    280e:	7999      	ldrb	r1, [r3, #6]
    2810:	4211      	tst	r1, r2
    2812:	d0fc      	beq.n	280e <SystemInit+0x22>

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) );	/* Wait for reset to complete */
#elif (SAML21 || SAMC21 || SAMD51)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;

  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    2814:	2101      	movs	r1, #1
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    2816:	4c22      	ldr	r4, [pc, #136]	; (28a0 <SystemInit+0xb4>)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2818:	719a      	strb	r2, [r3, #6]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    281a:	4b22      	ldr	r3, [pc, #136]	; (28a4 <SystemInit+0xb8>)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    281c:	7022      	strb	r2, [r4, #0]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    281e:	7822      	ldrb	r2, [r4, #0]
    2820:	420a      	tst	r2, r1
    2822:	d002      	beq.n	282a <SystemInit+0x3e>
    2824:	6862      	ldr	r2, [r4, #4]
    2826:	421a      	tst	r2, r3
    2828:	d1f9      	bne.n	281e <SystemInit+0x32>
  SYSCTRL->DPLLCTRLA.reg = SYSCTRL_DPLLCTRLA_ENABLE;

  while ( (SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) != SYSCTRL_DPLLSTATUS_CLKRDY );

#elif (SAML21 || SAMC21)
  OSC32KCTRL->XOSC32K.reg = (OSC32KCTRL_XOSC32K_STARTUP( 0x4u ) | OSC32KCTRL_XOSC32K_XTALEN | OSC32KCTRL_XOSC32K_EN32K | OSC32KCTRL_XOSC32K_EN1K);
    282a:	4b1f      	ldr	r3, [pc, #124]	; (28a8 <SystemInit+0xbc>)
    282c:	4a1f      	ldr	r2, [pc, #124]	; (28ac <SystemInit+0xc0>)
    282e:	615a      	str	r2, [r3, #20]
  OSC32KCTRL->XOSC32K.bit.ENABLE = 1;
    2830:	2202      	movs	r2, #2
    2832:	6959      	ldr	r1, [r3, #20]
    2834:	430a      	orrs	r2, r1
    2836:	615a      	str	r2, [r3, #20]

  while ( (OSC32KCTRL->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) == 0 );       /* Wait for oscillator stabilization */
    2838:	2201      	movs	r2, #1
    283a:	68d9      	ldr	r1, [r3, #12]
    283c:	4211      	tst	r1, r2
    283e:	d0fc      	beq.n	283a <SystemInit+0x4e>

  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2840:	4b1b      	ldr	r3, [pc, #108]	; (28b0 <SystemInit+0xc4>)
    2842:	4e1c      	ldr	r6, [pc, #112]	; (28b4 <SystemInit+0xc8>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */

  OSCCTRL->DPLLPRESC.reg = 0;
  waitForPLL();

  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2844:	2702      	movs	r7, #2
  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2846:	62f3      	str	r3, [r6, #44]	; 0x2c
  waitForPLL();
    2848:	f7ff ffc8 	bl	27dc <waitForPLL>
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    284c:	2300      	movs	r3, #0
  OSCCTRL->DPLLPRESC.reg = 0;
    284e:	4a1a      	ldr	r2, [pc, #104]	; (28b8 <SystemInit+0xcc>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    2850:	6333      	str	r3, [r6, #48]	; 0x30
  OSCCTRL->DPLLPRESC.reg = 0;
    2852:	7013      	strb	r3, [r2, #0]
  waitForPLL();
    2854:	f7ff ffc2 	bl	27dc <waitForPLL>
  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2858:	4b18      	ldr	r3, [pc, #96]	; (28bc <SystemInit+0xd0>)
    285a:	701f      	strb	r7, [r3, #0]
  waitForPLL();
    285c:	f7ff ffbe 	bl	27dc <waitForPLL>

  while ( (OSCCTRL->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) != OSCCTRL_DPLLSTATUS_CLKRDY );
    2860:	4a17      	ldr	r2, [pc, #92]	; (28c0 <SystemInit+0xd4>)
    2862:	7813      	ldrb	r3, [r2, #0]
    2864:	423b      	tst	r3, r7
    2866:	d0fc      	beq.n	2862 <SystemInit+0x76>
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
#elif (SAML21 || SAMC21)
  MCLK->CPUDIV.reg  = MCLK_CPUDIV_CPUDIV_DIV1 ;
    2868:	2301      	movs	r3, #1
    286a:	712b      	strb	r3, [r5, #4]

#elif (SAML21 || SAMC21)
  /* Setup GCLK0 (GENERIC_CLOCK_GENERATOR_MAIN) which is used for the CPU. */
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch Generic Clock Generator 0 to 96MHz PLL output. The output is divided by two to obtain a 48MHz CPU clock. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_MAIN].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    286c:	4d15      	ldr	r5, [pc, #84]	; (28c4 <SystemInit+0xd8>)
    286e:	6225      	str	r5, [r4, #32]
    waitForSync();
    2870:	f7ff ffaa 	bl	27c8 <waitForSync>
  #endif

#elif (SAML21 || SAMC21)
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch GENERIC_CLOCK_GENERATOR_48MHz to 96MHz PLL output. The output is divided by two to obtain 48MHz. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_48MHz].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    2874:	6325      	str	r5, [r4, #48]	; 0x30
    waitForSync();
    2876:	f7ff ffa7 	bl	27c8 <waitForSync>
  waitForSync();

#elif (SAML21)
  /* Note that after reset, the L21 starts with the OSC16M set to 4MHz, NOT the DFLL@48MHz as stated in some documentation. */
  /* Modify FSEL value of OSC16M to have 8MHz */
  OSCCTRL->OSC16MCTRL.bit.FSEL = OSCCTRL_OSC16MCTRL_FSEL_8_Val;
    287a:	220c      	movs	r2, #12
    287c:	7d33      	ldrb	r3, [r6, #20]
    287e:	4393      	bics	r3, r2
    2880:	001a      	movs	r2, r3
    2882:	2304      	movs	r3, #4
    2884:	4313      	orrs	r3, r2
    2886:	7533      	strb	r3, [r6, #20]

  /* Put OSC16M as source for Generic Clock Generator 3 */
  GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_OSC_HS].reg = ( GCLK_GENCTRL_DIV(1) | GCLK_GENCTRL_SRC_OSC16M | GCLK_GENCTRL_GENEN );
    2888:	4b0f      	ldr	r3, [pc, #60]	; (28c8 <SystemInit+0xdc>)
    288a:	62e3      	str	r3, [r4, #44]	; 0x2c
  waitForSync();
    288c:	f7ff ff9c 	bl	27c8 <waitForSync>
#endif
#endif

  SystemCoreClock=VARIANT_MCK;
    2890:	4a0e      	ldr	r2, [pc, #56]	; (28cc <SystemInit+0xe0>)
    2892:	4b0f      	ldr	r3, [pc, #60]	; (28d0 <SystemInit+0xe4>)
    2894:	601a      	str	r2, [r3, #0]
}
    2896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2898:	41004000 	.word	0x41004000
    289c:	40000400 	.word	0x40000400
    28a0:	40001800 	.word	0x40001800
    28a4:	000007fd 	.word	0x000007fd
    28a8:	40001000 	.word	0x40001000
    28ac:	0000041c 	.word	0x0000041c
    28b0:	00000b71 	.word	0x00000b71
    28b4:	40000c00 	.word	0x40000c00
    28b8:	40000c34 	.word	0x40000c34
    28bc:	40000c28 	.word	0x40000c28
    28c0:	40000c3c 	.word	0x40000c3c
    28c4:	00020308 	.word	0x00020308
    28c8:	00010106 	.word	0x00010106
    28cc:	02dc6c00 	.word	0x02dc6c00
    28d0:	20000038 	.word	0x20000038

000028d4 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    28d4:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    28d6:	250f      	movs	r5, #15
    28d8:	1dcb      	adds	r3, r1, #7
    28da:	3901      	subs	r1, #1
    28dc:	0002      	movs	r2, r0
    28de:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    28e0:	0014      	movs	r4, r2
		val = (val >> 4);
    28e2:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    28e4:	3430      	adds	r4, #48	; 0x30
    28e6:	2a09      	cmp	r2, #9
    28e8:	dd01      	ble.n	28ee <_ZL5utox8mPc+0x1a>
    28ea:	3237      	adds	r2, #55	; 0x37
    28ec:	0014      	movs	r4, r2
    28ee:	701c      	strb	r4, [r3, #0]
    28f0:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    28f2:	428b      	cmp	r3, r1
    28f4:	d1f2      	bne.n	28dc <_ZL5utox8mPc+0x8>
	}
}
    28f6:	bd30      	pop	{r4, r5, pc}

000028f8 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    28f8:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    28fa:	2982      	cmp	r1, #130	; 0x82
    28fc:	d11f      	bne.n	293e <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    28fe:	b2c3      	uxtb	r3, r0
    2900:	4d2c      	ldr	r5, [pc, #176]	; (29b4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    2902:	015a      	lsls	r2, r3, #5
    2904:	18aa      	adds	r2, r5, r2
    2906:	6991      	ldr	r1, [r2, #24]
    2908:	4c2b      	ldr	r4, [pc, #172]	; (29b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    290a:	0180      	lsls	r0, r0, #6
    290c:	400c      	ands	r4, r1
    290e:	21c0      	movs	r1, #192	; 0xc0
    2910:	0589      	lsls	r1, r1, #22
    2912:	4321      	orrs	r1, r4
    2914:	6191      	str	r1, [r2, #24]
    2916:	4929      	ldr	r1, [pc, #164]	; (29bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2918:	3308      	adds	r3, #8
    291a:	1808      	adds	r0, r1, r0
    291c:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    291e:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2920:	682a      	ldr	r2, [r5, #0]
    2922:	015b      	lsls	r3, r3, #5
    2924:	18d0      	adds	r0, r2, r3
    2926:	7904      	ldrb	r4, [r0, #4]
    2928:	4249      	negs	r1, r1
    292a:	4321      	orrs	r1, r4
    292c:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    292e:	2070      	movs	r0, #112	; 0x70
    2930:	5c99      	ldrb	r1, [r3, r2]
    2932:	4381      	bics	r1, r0
    2934:	0008      	movs	r0, r1
    2936:	2130      	movs	r1, #48	; 0x30
    2938:	4301      	orrs	r1, r0
    293a:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    293c:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    293e:	2900      	cmp	r1, #0
    2940:	d1fc      	bne.n	293c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2942:	24c0      	movs	r4, #192	; 0xc0
    2944:	b2c1      	uxtb	r1, r0
    2946:	4e1b      	ldr	r6, [pc, #108]	; (29b4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    2948:	014b      	lsls	r3, r1, #5
    294a:	18f3      	adds	r3, r6, r3
    294c:	689a      	ldr	r2, [r3, #8]
    294e:	4d1a      	ldr	r5, [pc, #104]	; (29b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    2950:	05a4      	lsls	r4, r4, #22
    2952:	402a      	ands	r2, r5
    2954:	4322      	orrs	r2, r4
    2956:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    2958:	4a19      	ldr	r2, [pc, #100]	; (29c0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    295a:	0180      	lsls	r0, r0, #6
    295c:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    295e:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2960:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2962:	6830      	ldr	r0, [r6, #0]
    2964:	2607      	movs	r6, #7
    2966:	3208      	adds	r2, #8
    2968:	0152      	lsls	r2, r2, #5
    296a:	5c11      	ldrb	r1, [r2, r0]
    296c:	43b1      	bics	r1, r6
    296e:	000e      	movs	r6, r1
    2970:	2101      	movs	r1, #1
    2972:	4331      	orrs	r1, r6
    2974:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2976:	6999      	ldr	r1, [r3, #24]
    2978:	400d      	ands	r5, r1
    297a:	432c      	orrs	r4, r5
    297c:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    297e:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2980:	490e      	ldr	r1, [pc, #56]	; (29bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    2982:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2984:	5c11      	ldrb	r1, [r2, r0]
    2986:	43a1      	bics	r1, r4
    2988:	000c      	movs	r4, r1
    298a:	2110      	movs	r1, #16
    298c:	4321      	orrs	r1, r4
    298e:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2990:	6899      	ldr	r1, [r3, #8]
    2992:	4c0c      	ldr	r4, [pc, #48]	; (29c4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    2994:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2996:	400c      	ands	r4, r1
    2998:	2180      	movs	r1, #128	; 0x80
    299a:	0349      	lsls	r1, r1, #13
    299c:	4321      	orrs	r1, r4
    299e:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    29a0:	6899      	ldr	r1, [r3, #8]
    29a2:	0b89      	lsrs	r1, r1, #14
    29a4:	0389      	lsls	r1, r1, #14
    29a6:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    29a8:	2340      	movs	r3, #64	; 0x40
    29aa:	7951      	ldrb	r1, [r2, #5]
    29ac:	430b      	orrs	r3, r1
    29ae:	7153      	strb	r3, [r2, #5]
    29b0:	e7c4      	b.n	293c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	20000834 	.word	0x20000834
    29b8:	8fffffff 	.word	0x8fffffff
    29bc:	200003a8 	.word	0x200003a8
    29c0:	20000568 	.word	0x20000568
    29c4:	f0003fff 	.word	0xf0003fff

000029c8 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    29c8:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    29ca:	0004      	movs	r4, r0
    29cc:	2301      	movs	r3, #1
    29ce:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    29d0:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    29d2:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    29d4:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    29d6:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    29d8:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    29da:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    29dc:	0052      	lsls	r2, r2, #1
    29de:	f008 fa5e 	bl	ae9e <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    29e2:	78ab      	ldrb	r3, [r5, #2]
    29e4:	07db      	lsls	r3, r3, #31
    29e6:	d4fc      	bmi.n	29e2 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    29e8:	626c      	str	r4, [r5, #36]	; 0x24
}
    29ea:	bd70      	pop	{r4, r5, r6, pc}

000029ec <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29ec:	221f      	movs	r2, #31
    29ee:	4b14      	ldr	r3, [pc, #80]	; (2a40 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    29f0:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29f2:	681b      	ldr	r3, [r3, #0]
    29f4:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    29f6:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    29f8:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29fa:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    29fc:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    29fe:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
    2a00:	291f      	cmp	r1, #31
    2a02:	d100      	bne.n	2a06 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    2a04:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    2a06:	2a1f      	cmp	r2, #31
    2a08:	d100      	bne.n	2a0c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    2a0a:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    2a0c:	2b07      	cmp	r3, #7
    2a0e:	d100      	bne.n	2a12 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    2a10:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
    2a12:	251f      	movs	r5, #31
    2a14:	6800      	ldr	r0, [r0, #0]
    2a16:	018e      	lsls	r6, r1, #6
    2a18:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    2a1a:	490a      	ldr	r1, [pc, #40]	; (2a44 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    2a1c:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    2a1e:	4021      	ands	r1, r4
    2a20:	4331      	orrs	r1, r6
    2a22:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    2a24:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    2a26:	0014      	movs	r4, r2
    2a28:	000a      	movs	r2, r1
    2a2a:	43aa      	bics	r2, r5
    2a2c:	4322      	orrs	r2, r4
    2a2e:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    2a30:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    2a32:	0319      	lsls	r1, r3, #12
    2a34:	4b04      	ldr	r3, [pc, #16]	; (2a48 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    2a36:	4013      	ands	r3, r2
    2a38:	430b      	orrs	r3, r1
    2a3a:	8503      	strh	r3, [r0, #40]	; 0x28
}
    2a3c:	bd70      	pop	{r4, r5, r6, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	00806020 	.word	0x00806020
    2a44:	fffff83f 	.word	0xfffff83f
    2a48:	ffff8fff 	.word	0xffff8fff

00002a4c <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a4c:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    2a50:	6003      	str	r3, [r0, #0]
    2a52:	2301      	movs	r3, #1
    2a54:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2a56:	b672      	cpsid	i
		__disable_irq();
	}
    2a58:	4770      	bx	lr

00002a5a <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
    2a5a:	6803      	ldr	r3, [r0, #0]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d102      	bne.n	2a66 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    2a60:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    2a62:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    2a66:	4770      	bx	lr

00002a68 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    2a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    2a6a:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    2a6c:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    2a6e:	4668      	mov	r0, sp
		if (current == 0) {
    2a70:	2d00      	cmp	r5, #0
    2a72:	d114      	bne.n	2a9e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    2a74:	f7ff ffea 	bl	2a4c <_ZN7__GuardC1Ev>
    2a78:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    2a7a:	1d62      	adds	r2, r4, #5
			synchronized {
    2a7c:	3b01      	subs	r3, #1
    2a7e:	d302      	bcc.n	2a86 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    2a80:	7fd5      	ldrb	r5, [r2, #31]
    2a82:	b2ed      	uxtb	r5, r5
    2a84:	e7fa      	b.n	2a7c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    2a86:	4668      	mov	r0, sp
    2a88:	9301      	str	r3, [sp, #4]
    2a8a:	f7ff ffe6 	bl	2a5a <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    2a8e:	2d00      	cmp	r5, #0
    2a90:	d101      	bne.n	2a96 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    2a92:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    2a94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    2a96:	6a20      	ldr	r0, [r4, #32]
    2a98:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    2a9a:	1ac0      	subs	r0, r0, r3
    2a9c:	e7fa      	b.n	2a94 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    2a9e:	f7ff ffd5 	bl	2a4c <_ZN7__GuardC1Ev>
				ready = ready1;
    2aa2:	0022      	movs	r2, r4
			bool ready = false;
    2aa4:	2500      	movs	r5, #0
    2aa6:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    2aa8:	3234      	adds	r2, #52	; 0x34
			synchronized {
    2aaa:	3b01      	subs	r3, #1
    2aac:	d302      	bcc.n	2ab4 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    2aae:	7815      	ldrb	r5, [r2, #0]
    2ab0:	b2ed      	uxtb	r5, r5
			synchronized {
    2ab2:	e7fa      	b.n	2aaa <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    2ab4:	4668      	mov	r0, sp
    2ab6:	9301      	str	r3, [sp, #4]
    2ab8:	f7ff ffcf 	bl	2a5a <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    2abc:	2d00      	cmp	r5, #0
    2abe:	d0e8      	beq.n	2a92 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    2ac0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2ac2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2ac4:	e7e9      	b.n	2a9a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00002ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    2ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2aca:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    2acc:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2ace:	7a03      	ldrb	r3, [r0, #8]
    2ad0:	6831      	ldr	r1, [r6, #0]
    2ad2:	015a      	lsls	r2, r3, #5
    2ad4:	188c      	adds	r4, r1, r2
    2ad6:	34ff      	adds	r4, #255	; 0xff
    2ad8:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2ada:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2adc:	433d      	orrs	r5, r7
    2ade:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    2ae0:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2ae2:	4d09      	ldr	r5, [pc, #36]	; (2b08 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    2ae4:	6890      	ldr	r0, [r2, #8]
    2ae6:	04a4      	lsls	r4, r4, #18
    2ae8:	4028      	ands	r0, r5
    2aea:	0924      	lsrs	r4, r4, #4
    2aec:	4320      	orrs	r0, r4
    2aee:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2af0:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2af2:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2af4:	0b80      	lsrs	r0, r0, #14
    2af6:	0380      	lsls	r0, r0, #14
    2af8:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2afa:	2240      	movs	r2, #64	; 0x40
    2afc:	015b      	lsls	r3, r3, #5
    2afe:	18cb      	adds	r3, r1, r3
    2b00:	7919      	ldrb	r1, [r3, #4]
    2b02:	430a      	orrs	r2, r1
    2b04:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    2b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b08:	f0003fff 	.word	0xf0003fff

00002b0c <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    2b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    2b0e:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    2b10:	0004      	movs	r4, r0
    2b12:	000e      	movs	r6, r1
    2b14:	0017      	movs	r7, r2
			synchronized {
    2b16:	4668      	mov	r0, sp
		if (current == 0) {
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d13d      	bne.n	2b98 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    2b1c:	f7ff ff96 	bl	2a4c <_ZN7__GuardC1Ev>
    2b20:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    2b22:	1d61      	adds	r1, r4, #5
    2b24:	3b01      	subs	r3, #1
			synchronized {
    2b26:	1c5a      	adds	r2, r3, #1
    2b28:	d00c      	beq.n	2b44 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    2b2a:	7fcd      	ldrb	r5, [r1, #31]
    2b2c:	1e5a      	subs	r2, r3, #1
    2b2e:	b2ed      	uxtb	r5, r5
    2b30:	2d00      	cmp	r5, #0
    2b32:	d105      	bne.n	2b40 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    2b34:	4668      	mov	r0, sp
    2b36:	9301      	str	r3, [sp, #4]
    2b38:	f7ff ff8f 	bl	2a5a <_ZN7__GuardD1Ev>
	}
    2b3c:	0028      	movs	r0, r5
    2b3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2b40:	0013      	movs	r3, r2
    2b42:	e7f0      	b.n	2b26 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    2b44:	4668      	mov	r0, sp
    2b46:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    2b48:	2500      	movs	r5, #0
			synchronized {
    2b4a:	f7ff ff86 	bl	2a5a <_ZN7__GuardD1Ev>
    2b4e:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    2b50:	42af      	cmp	r7, r5
    2b52:	d002      	beq.n	2b5a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    2b54:	6a22      	ldr	r2, [r4, #32]
    2b56:	4293      	cmp	r3, r2
    2b58:	d357      	bcc.n	2c0a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    2b5a:	6a22      	ldr	r2, [r4, #32]
    2b5c:	4293      	cmp	r3, r2
    2b5e:	d1ed      	bne.n	2b3c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    2b60:	2300      	movs	r3, #0
    2b62:	61e3      	str	r3, [r4, #28]
				current = 1;
    2b64:	3301      	adds	r3, #1
    2b66:	6123      	str	r3, [r4, #16]
				synchronized {
    2b68:	4668      	mov	r0, sp
    2b6a:	f7ff ff6f 	bl	2a4c <_ZN7__GuardC1Ev>
					if (notify) {
    2b6e:	0022      	movs	r2, r4
					ready0 = false;
    2b70:	2100      	movs	r1, #0
    2b72:	9b01      	ldr	r3, [sp, #4]
    2b74:	1d67      	adds	r7, r4, #5
    2b76:	3b01      	subs	r3, #1
					if (notify) {
    2b78:	3235      	adds	r2, #53	; 0x35
				synchronized {
    2b7a:	1c58      	adds	r0, r3, #1
    2b7c:	d0da      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    2b7e:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    2b80:	7810      	ldrb	r0, [r2, #0]
    2b82:	1e5e      	subs	r6, r3, #1
    2b84:	2800      	cmp	r0, #0
    2b86:	d005      	beq.n	2b94 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    2b88:	7011      	strb	r1, [r2, #0]
						release();
    2b8a:	0020      	movs	r0, r4
    2b8c:	9301      	str	r3, [sp, #4]
    2b8e:	f7ff ff9b 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2b92:	e7ec      	b.n	2b6e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    2b94:	0033      	movs	r3, r6
    2b96:	e7f0      	b.n	2b7a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    2b98:	f7ff ff58 	bl	2a4c <_ZN7__GuardC1Ev>
				if (!ready1) {
    2b9c:	0021      	movs	r1, r4
    2b9e:	9b01      	ldr	r3, [sp, #4]
    2ba0:	3134      	adds	r1, #52	; 0x34
    2ba2:	3b01      	subs	r3, #1
			synchronized {
    2ba4:	1c5a      	adds	r2, r3, #1
    2ba6:	d006      	beq.n	2bb6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    2ba8:	780d      	ldrb	r5, [r1, #0]
    2baa:	1e5a      	subs	r2, r3, #1
    2bac:	b2ed      	uxtb	r5, r5
    2bae:	2d00      	cmp	r5, #0
    2bb0:	d0c0      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    2bb2:	0013      	movs	r3, r2
    2bb4:	e7f6      	b.n	2ba4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    2bb6:	4668      	mov	r0, sp
    2bb8:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    2bba:	2500      	movs	r5, #0
			synchronized {
    2bbc:	f7ff ff4d 	bl	2a5a <_ZN7__GuardD1Ev>
    2bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    2bc2:	42bd      	cmp	r5, r7
    2bc4:	d002      	beq.n	2bcc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    2bc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2bc8:	4293      	cmp	r3, r2
    2bca:	d326      	bcc.n	2c1a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    2bcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2bce:	4293      	cmp	r3, r2
    2bd0:	d1b4      	bne.n	2b3c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    2bd2:	2300      	movs	r3, #0
				synchronized {
    2bd4:	4668      	mov	r0, sp
				first1 = 0;
    2bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    2bd8:	6123      	str	r3, [r4, #16]
				synchronized {
    2bda:	f7ff ff37 	bl	2a4c <_ZN7__GuardC1Ev>
					ready1 = false;
    2bde:	0027      	movs	r7, r4
					if (notify) {
    2be0:	0022      	movs	r2, r4
					ready1 = false;
    2be2:	2100      	movs	r1, #0
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	3734      	adds	r7, #52	; 0x34
    2be8:	3b01      	subs	r3, #1
					if (notify) {
    2bea:	3235      	adds	r2, #53	; 0x35
				synchronized {
    2bec:	1c58      	adds	r0, r3, #1
    2bee:	d0a1      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    2bf0:	7039      	strb	r1, [r7, #0]
					if (notify) {
    2bf2:	7810      	ldrb	r0, [r2, #0]
    2bf4:	1e5e      	subs	r6, r3, #1
    2bf6:	2800      	cmp	r0, #0
    2bf8:	d005      	beq.n	2c06 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    2bfa:	7011      	strb	r1, [r2, #0]
						release();
    2bfc:	0020      	movs	r0, r4
    2bfe:	9301      	str	r3, [sp, #4]
    2c00:	f7ff ff62 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2c04:	e7eb      	b.n	2bde <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    2c06:	0033      	movs	r3, r6
    2c08:	e7f0      	b.n	2bec <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    2c0a:	1c5a      	adds	r2, r3, #1
    2c0c:	61e2      	str	r2, [r4, #28]
    2c0e:	69a2      	ldr	r2, [r4, #24]
    2c10:	18d3      	adds	r3, r2, r3
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    2c16:	3501      	adds	r5, #1
    2c18:	e799      	b.n	2b4e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    2c1a:	1c5a      	adds	r2, r3, #1
    2c1c:	62e2      	str	r2, [r4, #44]	; 0x2c
    2c1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2c20:	18d3      	adds	r3, r2, r3
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    2c26:	3501      	adds	r5, #1
    2c28:	e7ca      	b.n	2bc0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00002c2a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    2c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c2c:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    2c2e:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c30:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    2c32:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c34:	3108      	adds	r1, #8
    2c36:	6818      	ldr	r0, [r3, #0]
    2c38:	0149      	lsls	r1, r1, #5
    2c3a:	1841      	adds	r1, r0, r1
    2c3c:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    2c3e:	07c0      	lsls	r0, r0, #31
    2c40:	d527      	bpl.n	2c92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    2c42:	2501      	movs	r5, #1
    2c44:	0152      	lsls	r2, r2, #5
    2c46:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2c48:	189b      	adds	r3, r3, r2
    2c4a:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    2c4c:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2c4e:	0492      	lsls	r2, r2, #18
    2c50:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    2c52:	2900      	cmp	r1, #0
    2c54:	d121      	bne.n	2c9a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    2c56:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    2c58:	6a22      	ldr	r2, [r4, #32]
    2c5a:	2a00      	cmp	r2, #0
    2c5c:	d03e      	beq.n	2cdc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2c5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    2c60:	6165      	str	r5, [r4, #20]
					synchronized {
    2c62:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2c64:	605a      	str	r2, [r3, #4]
					synchronized {
    2c66:	f7ff fef1 	bl	2a4c <_ZN7__GuardC1Ev>
						if (ready1) {
    2c6a:	0027      	movs	r7, r4
    2c6c:	0021      	movs	r1, r4
    2c6e:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    2c70:	1d66      	adds	r6, r4, #5
    2c72:	3b01      	subs	r3, #1
						if (ready1) {
    2c74:	3734      	adds	r7, #52	; 0x34
    2c76:	3135      	adds	r1, #53	; 0x35
					synchronized {
    2c78:	1c5a      	adds	r2, r3, #1
    2c7a:	d02b      	beq.n	2cd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    2c7c:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    2c7e:	783a      	ldrb	r2, [r7, #0]
    2c80:	1e58      	subs	r0, r3, #1
    2c82:	b2d2      	uxtb	r2, r2
    2c84:	2a00      	cmp	r2, #0
    2c86:	d005      	beq.n	2c94 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    2c88:	9301      	str	r3, [sp, #4]
							return;
    2c8a:	4668      	mov	r0, sp
							notify = true;
    2c8c:	700d      	strb	r5, [r1, #0]
							return;
    2c8e:	f7ff fee4 	bl	2a5a <_ZN7__GuardD1Ev>
	}
    2c92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    2c94:	700a      	strb	r2, [r1, #0]
					synchronized {
    2c96:	0003      	movs	r3, r0
    2c98:	e7ee      	b.n	2c78 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    2c9a:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    2c9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2c9e:	2a00      	cmp	r2, #0
    2ca0:	d01c      	beq.n	2cdc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    2ca2:	2200      	movs	r2, #0
    2ca4:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2ca6:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    2ca8:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2caa:	605a      	str	r2, [r3, #4]
					synchronized {
    2cac:	f7ff fece 	bl	2a4c <_ZN7__GuardC1Ev>
						ready1 = true;
    2cb0:	0026      	movs	r6, r4
    2cb2:	0021      	movs	r1, r4
    2cb4:	9b01      	ldr	r3, [sp, #4]
    2cb6:	3634      	adds	r6, #52	; 0x34
    2cb8:	3b01      	subs	r3, #1
						if (ready0) {
    2cba:	1d67      	adds	r7, r4, #5
    2cbc:	3135      	adds	r1, #53	; 0x35
					synchronized {
    2cbe:	1c5a      	adds	r2, r3, #1
    2cc0:	d008      	beq.n	2cd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    2cc2:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    2cc4:	7ffa      	ldrb	r2, [r7, #31]
    2cc6:	1e58      	subs	r0, r3, #1
    2cc8:	b2d2      	uxtb	r2, r2
    2cca:	2a00      	cmp	r2, #0
    2ccc:	d1dc      	bne.n	2c88 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    2cce:	700a      	strb	r2, [r1, #0]
					synchronized {
    2cd0:	0003      	movs	r3, r0
    2cd2:	e7f4      	b.n	2cbe <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    2cd4:	4668      	mov	r0, sp
    2cd6:	9301      	str	r3, [sp, #4]
    2cd8:	f7ff febf 	bl	2a5a <_ZN7__GuardD1Ev>
			release();
    2cdc:	0020      	movs	r0, r4
    2cde:	f7ff fef3 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2ce2:	e7d6      	b.n	2c92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00002ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    2ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    2ce6:	466b      	mov	r3, sp
    2ce8:	1ddc      	adds	r4, r3, #7
    2cea:	2300      	movs	r3, #0
{
    2cec:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    2cee:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    2cf0:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    2cf2:	f002 fb63 	bl	53bc <_Z16CDC_GetInterfacePh>
    2cf6:	682b      	ldr	r3, [r5, #0]
    2cf8:	1818      	adds	r0, r3, r0
    2cfa:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    2cfc:	f002 fc18 	bl	5530 <_Z12PluggableUSBv>
    2d00:	0021      	movs	r1, r4
    2d02:	f002 fbd1 	bl	54a8 <_ZN13PluggableUSB_12getInterfaceEPh>
    2d06:	682b      	ldr	r3, [r5, #0]
    2d08:	1818      	adds	r0, r3, r0
    2d0a:	6028      	str	r0, [r5, #0]
	return interfaces;
    2d0c:	7820      	ldrb	r0, [r4, #0]
}
    2d0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002d10 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    2d10:	2903      	cmp	r1, #3
    2d12:	d10e      	bne.n	2d32 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2d14:	2280      	movs	r2, #128	; 0x80
    2d16:	4b0e      	ldr	r3, [pc, #56]	; (2d50 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    2d18:	3162      	adds	r1, #98	; 0x62
    2d1a:	681b      	ldr	r3, [r3, #0]
    2d1c:	31ff      	adds	r1, #255	; 0xff
    2d1e:	5c58      	ldrb	r0, [r3, r1]
    2d20:	4252      	negs	r2, r2
    2d22:	4302      	orrs	r2, r0
    2d24:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2d26:	2268      	movs	r2, #104	; 0x68
    2d28:	3963      	subs	r1, #99	; 0x63
    2d2a:	39ff      	subs	r1, #255	; 0xff
    2d2c:	32ff      	adds	r2, #255	; 0xff
    2d2e:	5499      	strb	r1, [r3, r2]
}
    2d30:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    2d32:	2901      	cmp	r1, #1
    2d34:	d1fc      	bne.n	2d30 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2d36:	2280      	movs	r2, #128	; 0x80
    2d38:	4b05      	ldr	r3, [pc, #20]	; (2d50 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    2d3a:	3124      	adds	r1, #36	; 0x24
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	31ff      	adds	r1, #255	; 0xff
    2d40:	5c58      	ldrb	r0, [r3, r1]
    2d42:	4252      	negs	r2, r2
    2d44:	4302      	orrs	r2, r0
    2d46:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2d48:	3923      	subs	r1, #35	; 0x23
    2d4a:	39ff      	subs	r1, #255	; 0xff
    2d4c:	2228      	movs	r2, #40	; 0x28
    2d4e:	e7ed      	b.n	2d2c <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    2d50:	20000834 	.word	0x20000834

00002d54 <_ZN14USBDeviceClass4initEv>:
{
    2d54:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
    2d56:	2400      	movs	r4, #0
    2d58:	4b26      	ldr	r3, [pc, #152]	; (2df4 <_ZN14USBDeviceClass4initEv+0xa0>)
	pinMode(PIN_LED_TXL, OUTPUT);
    2d5a:	2101      	movs	r1, #1
{
    2d5c:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    2d5e:	2015      	movs	r0, #21
	txLEDPulse = 0;
    2d60:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    2d62:	f000 feb1 	bl	3ac8 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    2d66:	2101      	movs	r1, #1
    2d68:	2015      	movs	r0, #21
    2d6a:	f000 feb1 	bl	3ad0 <digitalWrite>
	rxLEDPulse = 0;
    2d6e:	4b22      	ldr	r3, [pc, #136]	; (2df8 <_ZN14USBDeviceClass4initEv+0xa4>)
	pinMode(PIN_LED_RXL, OUTPUT);
    2d70:	2101      	movs	r1, #1
    2d72:	2014      	movs	r0, #20
	rxLEDPulse = 0;
    2d74:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    2d76:	f000 fea7 	bl	3ac8 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    2d7a:	2101      	movs	r1, #1
    2d7c:	2014      	movs	r0, #20
    2d7e:	f000 fea7 	bl	3ad0 <digitalWrite>
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d82:	2301      	movs	r3, #1
    2d84:	4a1d      	ldr	r2, [pc, #116]	; (2dfc <_ZN14USBDeviceClass4initEv+0xa8>)
        pinPeripheral( PIN_USB_DM, PIO_COM );
    2d86:	2018      	movs	r0, #24
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d88:	6991      	ldr	r1, [r2, #24]
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    2d8a:	3440      	adds	r4, #64	; 0x40
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d8c:	430b      	orrs	r3, r1
    2d8e:	6193      	str	r3, [r2, #24]
        pinPeripheral( PIN_USB_DM, PIO_COM );
    2d90:	210f      	movs	r1, #15
    2d92:	f000 ff07 	bl	3ba4 <pinPeripheral>
        pinPeripheral( PIN_USB_DP, PIO_COM );
    2d96:	210f      	movs	r1, #15
    2d98:	2019      	movs	r0, #25
    2d9a:	f000 ff03 	bl	3ba4 <pinPeripheral>
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    2d9e:	4b18      	ldr	r3, [pc, #96]	; (2e00 <_ZN14USBDeviceClass4initEv+0xac>)
    2da0:	601c      	str	r4, [r3, #0]
        while ( (GCLK->PCHCTRL[GCM_USB].reg & GCLK_PCHCTRL_CHEN) == 0 );        // wait for sync
    2da2:	681a      	ldr	r2, [r3, #0]
    2da4:	4222      	tst	r2, r4
    2da6:	d0fc      	beq.n	2da2 <_ZN14USBDeviceClass4initEv+0x4e>
        USB_SetHandler(&UDD_Handler);
    2da8:	4816      	ldr	r0, [pc, #88]	; (2e04 <_ZN14USBDeviceClass4initEv+0xb0>)
    2daa:	f7ff fc55 	bl	2658 <USB_SetHandler>
	usbd.reset();
    2dae:	4e16      	ldr	r6, [pc, #88]	; (2e08 <_ZN14USBDeviceClass4initEv+0xb4>)
    2db0:	0030      	movs	r0, r6
    2db2:	f7ff fe09 	bl	29c8 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    2db6:	0030      	movs	r0, r6
    2db8:	f7ff fe18 	bl	29ec <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    2dbc:	217f      	movs	r1, #127	; 0x7f
    2dbe:	6833      	ldr	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2dc0:	20c1      	movs	r0, #193	; 0xc1
    2dc2:	781a      	ldrb	r2, [r3, #0]
    2dc4:	0080      	lsls	r0, r0, #2
    2dc6:	400a      	ands	r2, r1
    2dc8:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2dca:	2204      	movs	r2, #4
    2dcc:	7819      	ldrb	r1, [r3, #0]
    2dce:	4e0f      	ldr	r6, [pc, #60]	; (2e0c <_ZN14USBDeviceClass4initEv+0xb8>)
    2dd0:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2dd2:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2dd4:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2dd6:	891a      	ldrh	r2, [r3, #8]
    2dd8:	438a      	bics	r2, r1
    2dda:	811a      	strh	r2, [r3, #8]
    2ddc:	4a0c      	ldr	r2, [pc, #48]	; (2e10 <_ZN14USBDeviceClass4initEv+0xbc>)
    2dde:	5811      	ldr	r1, [r2, r0]
    2de0:	4031      	ands	r1, r6
    2de2:	5011      	str	r1, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2de4:	6014      	str	r4, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    2de6:	2202      	movs	r2, #2
    2de8:	7819      	ldrb	r1, [r3, #0]
    2dea:	430a      	orrs	r2, r1
    2dec:	701a      	strb	r2, [r3, #0]
	initialized = true;
    2dee:	2301      	movs	r3, #1
    2df0:	702b      	strb	r3, [r5, #0]
}
    2df2:	bd70      	pop	{r4, r5, r6, pc}
    2df4:	2000039d 	.word	0x2000039d
    2df8:	2000039c 	.word	0x2000039c
    2dfc:	40000400 	.word	0x40000400
    2e00:	40001890 	.word	0x40001890
    2e04:	000037e5 	.word	0x000037e5
    2e08:	20000834 	.word	0x20000834
    2e0c:	ff00ffff 	.word	0xff00ffff
    2e10:	e000e100 	.word	0xe000e100

00002e14 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    2e14:	7800      	ldrb	r0, [r0, #0]
    2e16:	2800      	cmp	r0, #0
    2e18:	d010      	beq.n	2e3c <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    2e1a:	2101      	movs	r1, #1
    2e1c:	4b08      	ldr	r3, [pc, #32]	; (2e40 <_ZN14USBDeviceClass6attachEv+0x2c>)
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	891a      	ldrh	r2, [r3, #8]
    2e22:	438a      	bics	r2, r1
    2e24:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    2e26:	2208      	movs	r2, #8
    2e28:	8b19      	ldrh	r1, [r3, #24]
    2e2a:	430a      	orrs	r2, r1
    2e2c:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    2e2e:	2204      	movs	r2, #4
    2e30:	8b19      	ldrh	r1, [r3, #24]
    2e32:	430a      	orrs	r2, r1
    2e34:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    2e36:	2200      	movs	r2, #0
    2e38:	4b02      	ldr	r3, [pc, #8]	; (2e44 <_ZN14USBDeviceClass6attachEv+0x30>)
    2e3a:	601a      	str	r2, [r3, #0]
}
    2e3c:	4770      	bx	lr
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	20000834 	.word	0x20000834
    2e44:	2000082c 	.word	0x2000082c

00002e48 <_ZN14USBDeviceClass10setAddressEm>:
{
    2e48:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2e4a:	4a10      	ldr	r2, [pc, #64]	; (2e8c <_ZN14USBDeviceClass10setAddressEm+0x44>)
    2e4c:	6993      	ldr	r3, [r2, #24]
    2e4e:	0b9b      	lsrs	r3, r3, #14
    2e50:	039b      	lsls	r3, r3, #14
    2e52:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2e54:	6813      	ldr	r3, [r2, #0]
    2e56:	2202      	movs	r2, #2
    2e58:	33ff      	adds	r3, #255	; 0xff
    2e5a:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2e5c:	7998      	ldrb	r0, [r3, #6]
    2e5e:	3a82      	subs	r2, #130	; 0x82
    2e60:	4302      	orrs	r2, r0
    2e62:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    2e64:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    2e66:	0792      	lsls	r2, r2, #30
    2e68:	d5fc      	bpl.n	2e64 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2e6a:	2282      	movs	r2, #130	; 0x82
    2e6c:	247f      	movs	r4, #127	; 0x7f
    2e6e:	05d2      	lsls	r2, r2, #23
    2e70:	7a93      	ldrb	r3, [r2, #10]
    2e72:	4021      	ands	r1, r4
    2e74:	43a3      	bics	r3, r4
    2e76:	0008      	movs	r0, r1
    2e78:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2e7a:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2e7c:	4301      	orrs	r1, r0
    2e7e:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2e80:	7a91      	ldrb	r1, [r2, #10]
    2e82:	425b      	negs	r3, r3
    2e84:	430b      	orrs	r3, r1
    2e86:	7293      	strb	r3, [r2, #10]
}
    2e88:	bd10      	pop	{r4, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	20000834 	.word	0x20000834

00002e90 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    2e90:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    2e92:	790b      	ldrb	r3, [r1, #4]
{
    2e94:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    2e96:	2b00      	cmp	r3, #0
    2e98:	d10c      	bne.n	2eb4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    2e9a:	0008      	movs	r0, r1
    2e9c:	f002 fa9c 	bl	53d8 <_Z9CDC_SetupR8USBSetup>
    2ea0:	2800      	cmp	r0, #0
    2ea2:	d001      	beq.n	2ea8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    2ea4:	2001      	movs	r0, #1
}
    2ea6:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2ea8:	4a09      	ldr	r2, [pc, #36]	; (2ed0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    2eaa:	6993      	ldr	r3, [r2, #24]
    2eac:	0b9b      	lsrs	r3, r3, #14
    2eae:	039b      	lsls	r3, r3, #14
    2eb0:	6193      	str	r3, [r2, #24]
    2eb2:	e7f7      	b.n	2ea4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    2eb4:	f002 fb3c 	bl	5530 <_Z12PluggableUSBv>
    2eb8:	0021      	movs	r1, r4
    2eba:	f002 fb28 	bl	550e <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    2ebe:	2800      	cmp	r0, #0
    2ec0:	d1f0      	bne.n	2ea4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    2ec2:	4a03      	ldr	r2, [pc, #12]	; (2ed0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    2ec4:	6993      	ldr	r3, [r2, #24]
    2ec6:	0b9b      	lsrs	r3, r3, #14
    2ec8:	039b      	lsls	r3, r3, #14
    2eca:	6193      	str	r3, [r2, #24]
    2ecc:	e7eb      	b.n	2ea6 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	20000834 	.word	0x20000834

00002ed4 <_ZN14USBDeviceClass6initEPEmm>:
{
    2ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ed6:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    2ed8:	2a83      	cmp	r2, #131	; 0x83
    2eda:	d119      	bne.n	2f10 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2edc:	b2cb      	uxtb	r3, r1
    2ede:	4c32      	ldr	r4, [pc, #200]	; (2fa8 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    2ee0:	015a      	lsls	r2, r3, #5
    2ee2:	18a2      	adds	r2, r4, r2
    2ee4:	6991      	ldr	r1, [r2, #24]
    2ee6:	4831      	ldr	r0, [pc, #196]	; (2fac <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    2ee8:	01ad      	lsls	r5, r5, #6
    2eea:	4008      	ands	r0, r1
    2eec:	21c0      	movs	r1, #192	; 0xc0
    2eee:	0589      	lsls	r1, r1, #22
    2ef0:	4301      	orrs	r1, r0
    2ef2:	6191      	str	r1, [r2, #24]
    2ef4:	492e      	ldr	r1, [pc, #184]	; (2fb0 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2ef6:	6820      	ldr	r0, [r4, #0]
    2ef8:	194d      	adds	r5, r1, r5
    2efa:	2170      	movs	r1, #112	; 0x70
    2efc:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2efe:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2f00:	015b      	lsls	r3, r3, #5
    2f02:	5c1a      	ldrb	r2, [r3, r0]
    2f04:	438a      	bics	r2, r1
    2f06:	0011      	movs	r1, r2
    2f08:	2240      	movs	r2, #64	; 0x40
    2f0a:	430a      	orrs	r2, r1
    2f0c:	541a      	strb	r2, [r3, r0]
}
    2f0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    2f10:	2a02      	cmp	r2, #2
    2f12:	d144      	bne.n	2f9e <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
    2f14:	008b      	lsls	r3, r1, #2
    2f16:	9301      	str	r3, [sp, #4]
    2f18:	4b26      	ldr	r3, [pc, #152]	; (2fb4 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    2f1a:	008a      	lsls	r2, r1, #2
    2f1c:	58d6      	ldr	r6, [r2, r3]
    2f1e:	2e00      	cmp	r6, #0
    2f20:	d1f5      	bne.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    2f22:	2038      	movs	r0, #56	; 0x38
    2f24:	f001 fe34 	bl	4b90 <_Znwj>
		notify(false)
    2f28:	4b23      	ldr	r3, [pc, #140]	; (2fb8 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    2f2a:	4f1f      	ldr	r7, [pc, #124]	; (2fa8 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    2f2c:	6003      	str	r3, [r0, #0]
    2f2e:	2380      	movs	r3, #128	; 0x80
    2f30:	005b      	lsls	r3, r3, #1
    2f32:	60c3      	str	r3, [r0, #12]
    2f34:	1d43      	adds	r3, r0, #5
    2f36:	6206      	str	r6, [r0, #32]
    2f38:	6085      	str	r5, [r0, #8]
    2f3a:	6106      	str	r6, [r0, #16]
    2f3c:	6146      	str	r6, [r0, #20]
    2f3e:	61c6      	str	r6, [r0, #28]
    2f40:	0004      	movs	r4, r0
    2f42:	6047      	str	r7, [r0, #4]
    2f44:	77de      	strb	r6, [r3, #31]
    2f46:	62c6      	str	r6, [r0, #44]	; 0x2c
    2f48:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f4a:	2080      	movs	r0, #128	; 0x80
		notify(false)
    2f4c:	332f      	adds	r3, #47	; 0x2f
    2f4e:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f50:	0040      	lsls	r0, r0, #1
		notify(false)
    2f52:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f54:	f007 ff62 	bl	ae1c <malloc>
    2f58:	0006      	movs	r6, r0
    2f5a:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    2f5c:	2080      	movs	r0, #128	; 0x80
    2f5e:	0040      	lsls	r0, r0, #1
    2f60:	f007 ff5c 	bl	ae1c <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f64:	b2ed      	uxtb	r5, r5
    2f66:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    2f68:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	689a      	ldr	r2, [r3, #8]
    2f6e:	490f      	ldr	r1, [pc, #60]	; (2fac <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2f70:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f72:	4011      	ands	r1, r2
    2f74:	22c0      	movs	r2, #192	; 0xc0
    2f76:	0592      	lsls	r2, r2, #22
    2f78:	430a      	orrs	r2, r1
    2f7a:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2f7c:	683a      	ldr	r2, [r7, #0]
    2f7e:	3508      	adds	r5, #8
    2f80:	016d      	lsls	r5, r5, #5
    2f82:	5ca9      	ldrb	r1, [r5, r2]
    2f84:	4381      	bics	r1, r0
    2f86:	0008      	movs	r0, r1
    2f88:	2103      	movs	r1, #3
    2f8a:	4301      	orrs	r1, r0
    2f8c:	54a9      	strb	r1, [r5, r2]
		release();
    2f8e:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2f90:	605e      	str	r6, [r3, #4]
		release();
    2f92:	f7ff fd99 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2f96:	4b07      	ldr	r3, [pc, #28]	; (2fb4 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    2f98:	9a01      	ldr	r2, [sp, #4]
    2f9a:	50d4      	str	r4, [r2, r3]
    2f9c:	e7b7      	b.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
    2f9e:	0011      	movs	r1, r2
    2fa0:	0028      	movs	r0, r5
    2fa2:	f7ff fca9 	bl	28f8 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    2fa6:	e7b2      	b.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
    2fa8:	20000834 	.word	0x20000834
    2fac:	8fffffff 	.word	0x8fffffff
    2fb0:	200003a8 	.word	0x200003a8
    2fb4:	20000380 	.word	0x20000380
    2fb8:	0000f088 	.word	0x0000f088

00002fbc <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    2fbc:	b570      	push	{r4, r5, r6, lr}
    2fbe:	0005      	movs	r5, r0
    2fc0:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    2fc2:	4b06      	ldr	r3, [pc, #24]	; (2fdc <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    2fc4:	00a2      	lsls	r2, r4, #2
    2fc6:	58d2      	ldr	r2, [r2, r3]
    2fc8:	2a00      	cmp	r2, #0
    2fca:	d005      	beq.n	2fd8 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    2fcc:	0021      	movs	r1, r4
    2fce:	0028      	movs	r0, r5
    2fd0:	f7ff ff80 	bl	2ed4 <_ZN14USBDeviceClass6initEPEmm>
    2fd4:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    2fd6:	e7f4      	b.n	2fc2 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    2fd8:	bd70      	pop	{r4, r5, r6, pc}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	20000010 	.word	0x20000010

00002fe0 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    2fe0:	4b08      	ldr	r3, [pc, #32]	; (3004 <_ZN14USBDeviceClass9availableEm+0x24>)
    2fe2:	008a      	lsls	r2, r1, #2
    2fe4:	58d0      	ldr	r0, [r2, r3]
{
    2fe6:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    2fe8:	2800      	cmp	r0, #0
    2fea:	d003      	beq.n	2ff4 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    2fec:	6803      	ldr	r3, [r0, #0]
    2fee:	689b      	ldr	r3, [r3, #8]
    2ff0:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    2ff2:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2ff4:	b2c9      	uxtb	r1, r1
    2ff6:	4b04      	ldr	r3, [pc, #16]	; (3008 <_ZN14USBDeviceClass9availableEm+0x28>)
    2ff8:	0149      	lsls	r1, r1, #5
    2ffa:	1859      	adds	r1, r3, r1
    2ffc:	6888      	ldr	r0, [r1, #8]
    2ffe:	0480      	lsls	r0, r0, #18
    3000:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    3002:	e7f6      	b.n	2ff2 <_ZN14USBDeviceClass9availableEm+0x12>
    3004:	20000380 	.word	0x20000380
    3008:	20000834 	.word	0x20000834

0000300c <_ZN14USBDeviceClass5flushEm>:
{
    300c:	b510      	push	{r4, lr}
    300e:	000c      	movs	r4, r1
	if (available(ep)) {
    3010:	f7ff ffe6 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3014:	2800      	cmp	r0, #0
    3016:	d00c      	beq.n	3032 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3018:	4b06      	ldr	r3, [pc, #24]	; (3034 <_ZN14USBDeviceClass5flushEm+0x28>)
    301a:	b2e4      	uxtb	r4, r4
    301c:	681b      	ldr	r3, [r3, #0]
    301e:	3408      	adds	r4, #8
    3020:	0164      	lsls	r4, r4, #5
    3022:	191c      	adds	r4, r3, r4
    3024:	2380      	movs	r3, #128	; 0x80
    3026:	7962      	ldrb	r2, [r4, #5]
    3028:	425b      	negs	r3, r3
    302a:	4313      	orrs	r3, r2
    302c:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    302e:	2302      	movs	r3, #2
    3030:	71e3      	strb	r3, [r4, #7]
}
    3032:	bd10      	pop	{r4, pc}
    3034:	20000834 	.word	0x20000834

00003038 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    3038:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    303a:	4b13      	ldr	r3, [pc, #76]	; (3088 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    303c:	b2cc      	uxtb	r4, r1
    303e:	4a13      	ldr	r2, [pc, #76]	; (308c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    3040:	0160      	lsls	r0, r4, #5
    3042:	0189      	lsls	r1, r1, #6
    3044:	1859      	adds	r1, r3, r1
    3046:	1813      	adds	r3, r2, r0
    3048:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    304a:	6899      	ldr	r1, [r3, #8]
    304c:	4d10      	ldr	r5, [pc, #64]	; (3090 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    304e:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3050:	400d      	ands	r5, r1
    3052:	2180      	movs	r1, #128	; 0x80
    3054:	0289      	lsls	r1, r1, #10
    3056:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3058:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    305a:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    305c:	6899      	ldr	r1, [r3, #8]
    305e:	0b89      	lsrs	r1, r1, #14
    3060:	0389      	lsls	r1, r1, #14
    3062:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3064:	6811      	ldr	r1, [r2, #0]
    3066:	0163      	lsls	r3, r4, #5
    3068:	18cb      	adds	r3, r1, r3
    306a:	791e      	ldrb	r6, [r3, #4]
    306c:	4335      	orrs	r5, r6
    306e:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    3070:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    3072:	066d      	lsls	r5, r5, #25
    3074:	d5fc      	bpl.n	3070 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    3076:	0164      	lsls	r4, r4, #5
    3078:	1909      	adds	r1, r1, r4
    307a:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    307c:	07db      	lsls	r3, r3, #31
    307e:	d5fc      	bpl.n	307a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3080:	1812      	adds	r2, r2, r0
    3082:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    3084:	b2c0      	uxtb	r0, r0
}
    3086:	bd70      	pop	{r4, r5, r6, pc}
    3088:	20000568 	.word	0x20000568
    308c:	20000834 	.word	0x20000834
    3090:	f0003fff 	.word	0xf0003fff

00003094 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    3094:	b570      	push	{r4, r5, r6, lr}
    3096:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3098:	2240      	movs	r2, #64	; 0x40
    309a:	4b0b      	ldr	r3, [pc, #44]	; (30c8 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    309c:	000d      	movs	r5, r1
    309e:	681b      	ldr	r3, [r3, #0]
    30a0:	33ff      	adds	r3, #255	; 0xff
    30a2:	7959      	ldrb	r1, [r3, #5]
    30a4:	430a      	orrs	r2, r1
    30a6:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    30a8:	2100      	movs	r1, #0
    30aa:	f7ff ffc5 	bl	3038 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    30ae:	42a0      	cmp	r0, r4
    30b0:	d900      	bls.n	30b4 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    30b2:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    30b4:	2300      	movs	r3, #0
		data[i] = buffer[i];
    30b6:	4905      	ldr	r1, [pc, #20]	; (30cc <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    30b8:	42a3      	cmp	r3, r4
    30ba:	d003      	beq.n	30c4 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    30bc:	5c5a      	ldrb	r2, [r3, r1]
    30be:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    30c0:	3301      	adds	r3, #1
    30c2:	e7f9      	b.n	30b8 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    30c4:	bd70      	pop	{r4, r5, r6, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	20000834 	.word	0x20000834
    30cc:	20000568 	.word	0x20000568

000030d0 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    30d0:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    30d2:	b2c9      	uxtb	r1, r1
    30d4:	480b      	ldr	r0, [pc, #44]	; (3104 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    30d6:	0149      	lsls	r1, r1, #5
    30d8:	1842      	adds	r2, r0, r1
    30da:	6893      	ldr	r3, [r2, #8]
    30dc:	049b      	lsls	r3, r3, #18
    30de:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    30e0:	2b3f      	cmp	r3, #63	; 0x3f
    30e2:	dd0b      	ble.n	30fc <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    30e4:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    30e6:	3b40      	subs	r3, #64	; 0x40
    30e8:	049b      	lsls	r3, r3, #18
    30ea:	0ba4      	lsrs	r4, r4, #14
    30ec:	0c9b      	lsrs	r3, r3, #18
    30ee:	03a4      	lsls	r4, r4, #14
    30f0:	4323      	orrs	r3, r4
    30f2:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    30f4:	1841      	adds	r1, r0, r1
    30f6:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    30f8:	b2c0      	uxtb	r0, r0
}
    30fa:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    30fc:	6893      	ldr	r3, [r2, #8]
    30fe:	0b9b      	lsrs	r3, r3, #14
    3100:	039b      	lsls	r3, r3, #14
    3102:	e7f6      	b.n	30f2 <_ZN14USBDeviceClass7armRecvEm+0x22>
    3104:	20000834 	.word	0x20000834

00003108 <_ZN14USBDeviceClass4recvEmPvm>:
{
    3108:	b5f0      	push	{r4, r5, r6, r7, lr}
    310a:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    310c:	4b30      	ldr	r3, [pc, #192]	; (31d0 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    310e:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    3110:	681b      	ldr	r3, [r3, #0]
{
    3112:	0006      	movs	r6, r0
    3114:	000d      	movs	r5, r1
    3116:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    3118:	2b00      	cmp	r3, #0
    311a:	d055      	beq.n	31c8 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
    311c:	4f2d      	ldr	r7, [pc, #180]	; (31d4 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    311e:	7839      	ldrb	r1, [r7, #0]
    3120:	b2c9      	uxtb	r1, r1
    3122:	2900      	cmp	r1, #0
    3124:	d102      	bne.n	312c <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    3126:	2014      	movs	r0, #20
    3128:	f000 fcd2 	bl	3ad0 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
    312c:	2364      	movs	r3, #100	; 0x64
    312e:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
    3130:	4b29      	ldr	r3, [pc, #164]	; (31d8 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    3132:	00aa      	lsls	r2, r5, #2
    3134:	58d0      	ldr	r0, [r2, r3]
    3136:	2800      	cmp	r0, #0
    3138:	d008      	beq.n	314c <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    313a:	6803      	ldr	r3, [r0, #0]
    313c:	0022      	movs	r2, r4
    313e:	685b      	ldr	r3, [r3, #4]
    3140:	9901      	ldr	r1, [sp, #4]
    3142:	4798      	blx	r3
    3144:	0004      	movs	r4, r0
}
    3146:	0020      	movs	r0, r4
    3148:	b005      	add	sp, #20
    314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    314c:	0029      	movs	r1, r5
    314e:	0030      	movs	r0, r6
    3150:	f7ff ff46 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3154:	4284      	cmp	r4, r0
    3156:	d904      	bls.n	3162 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    3158:	0029      	movs	r1, r5
    315a:	0030      	movs	r0, r6
    315c:	f7ff ff40 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3160:	0004      	movs	r4, r0
	armRecv(ep);
    3162:	0029      	movs	r1, r5
    3164:	0030      	movs	r0, r6
    3166:	f7ff ffb3 	bl	30d0 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    316a:	2101      	movs	r1, #1
    316c:	b2eb      	uxtb	r3, r5
    316e:	4f1b      	ldr	r7, [pc, #108]	; (31dc <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    3170:	9303      	str	r3, [sp, #12]
    3172:	015b      	lsls	r3, r3, #5
    3174:	9302      	str	r3, [sp, #8]
    3176:	9a02      	ldr	r2, [sp, #8]
    3178:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    317a:	9801      	ldr	r0, [sp, #4]
    317c:	189b      	adds	r3, r3, r2
    317e:	33ff      	adds	r3, #255	; 0xff
    3180:	7a5a      	ldrb	r2, [r3, #9]
    3182:	430a      	orrs	r2, r1
    3184:	4916      	ldr	r1, [pc, #88]	; (31e0 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    3186:	725a      	strb	r2, [r3, #9]
    3188:	01ab      	lsls	r3, r5, #6
    318a:	18c9      	adds	r1, r1, r3
    318c:	0022      	movs	r2, r4
    318e:	f007 fe6b 	bl	ae68 <memcpy>
	if (len && !available(ep)) {
    3192:	2c00      	cmp	r4, #0
    3194:	d0d7      	beq.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    3196:	0029      	movs	r1, r5
    3198:	0030      	movs	r0, r6
    319a:	f7ff ff21 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    319e:	2800      	cmp	r0, #0
    31a0:	d1d1      	bne.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    31a2:	2140      	movs	r1, #64	; 0x40
    31a4:	9b03      	ldr	r3, [sp, #12]
    31a6:	683a      	ldr	r2, [r7, #0]
    31a8:	3308      	adds	r3, #8
    31aa:	015b      	lsls	r3, r3, #5
    31ac:	18d3      	adds	r3, r2, r3
    31ae:	7918      	ldrb	r0, [r3, #4]
    31b0:	4301      	orrs	r1, r0
    31b2:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    31b4:	2101      	movs	r1, #1
    31b6:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    31b8:	2101      	movs	r1, #1
    31ba:	9b02      	ldr	r3, [sp, #8]
    31bc:	18d3      	adds	r3, r2, r3
    31be:	33ff      	adds	r3, #255	; 0xff
    31c0:	7a9a      	ldrb	r2, [r3, #10]
    31c2:	430a      	orrs	r2, r1
    31c4:	729a      	strb	r2, [r3, #10]
    31c6:	e7be      	b.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    31c8:	2401      	movs	r4, #1
    31ca:	4264      	negs	r4, r4
    31cc:	e7bb      	b.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	2000082c 	.word	0x2000082c
    31d4:	2000039c 	.word	0x2000039c
    31d8:	20000380 	.word	0x20000380
    31dc:	20000834 	.word	0x20000834
    31e0:	20000568 	.word	0x20000568

000031e4 <_ZN14USBDeviceClass4recvEm>:
{
    31e4:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    31e6:	466b      	mov	r3, sp
    31e8:	1ddc      	adds	r4, r3, #7
    31ea:	0022      	movs	r2, r4
    31ec:	2301      	movs	r3, #1
    31ee:	f7ff ff8b 	bl	3108 <_ZN14USBDeviceClass4recvEmPvm>
    31f2:	2801      	cmp	r0, #1
    31f4:	d101      	bne.n	31fa <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    31f6:	7820      	ldrb	r0, [r4, #0]
}
    31f8:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    31fa:	2001      	movs	r0, #1
    31fc:	4240      	negs	r0, r0
    31fe:	e7fb      	b.n	31f8 <_ZN14USBDeviceClass4recvEm+0x14>

00003200 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    3200:	b5f0      	push	{r4, r5, r6, r7, lr}
    3202:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    3204:	4b3a      	ldr	r3, [pc, #232]	; (32f0 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
    3206:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    3208:	681b      	ldr	r3, [r3, #0]
{
    320a:	000f      	movs	r7, r1
    320c:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    320e:	2b00      	cmp	r3, #0
    3210:	d03f      	beq.n	3292 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    3212:	2380      	movs	r3, #128	; 0x80
    3214:	01db      	lsls	r3, r3, #7
    3216:	429e      	cmp	r6, r3
    3218:	d83b      	bhi.n	3292 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    321a:	4c36      	ldr	r4, [pc, #216]	; (32f4 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    321c:	7821      	ldrb	r1, [r4, #0]
    321e:	b2c9      	uxtb	r1, r1
    3220:	2900      	cmp	r1, #0
    3222:	d102      	bne.n	322a <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    3224:	2015      	movs	r0, #21
    3226:	f000 fc53 	bl	3ad0 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    322a:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    322c:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    322e:	4a32      	ldr	r2, [pc, #200]	; (32f8 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    3230:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    3232:	01bb      	lsls	r3, r7, #6
    3234:	18d3      	adds	r3, r2, r3
    3236:	9302      	str	r3, [sp, #8]
	while (len != 0)
    3238:	2e00      	cmp	r6, #0
    323a:	d02c      	beq.n	3296 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    323c:	4b2f      	ldr	r3, [pc, #188]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    323e:	681b      	ldr	r3, [r3, #0]
    3240:	9303      	str	r3, [sp, #12]
    3242:	23ff      	movs	r3, #255	; 0xff
    3244:	403b      	ands	r3, r7
    3246:	001c      	movs	r4, r3
    3248:	9300      	str	r3, [sp, #0]
    324a:	3408      	adds	r4, #8
    324c:	9b03      	ldr	r3, [sp, #12]
    324e:	0164      	lsls	r4, r4, #5
    3250:	191c      	adds	r4, r3, r4
    3252:	79a3      	ldrb	r3, [r4, #6]
    3254:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    3256:	d021      	beq.n	329c <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    3258:	4b29      	ldr	r3, [pc, #164]	; (3300 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    325a:	492a      	ldr	r1, [pc, #168]	; (3304 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    325c:	6818      	ldr	r0, [r3, #0]
    325e:	f004 fcc3 	bl	7be8 <__udivsi3>
    3262:	4b29      	ldr	r3, [pc, #164]	; (3308 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    3264:	2117      	movs	r1, #23
    3266:	4358      	muls	r0, r3
    3268:	f004 fcbe 	bl	7be8 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    326c:	4b27      	ldr	r3, [pc, #156]	; (330c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    326e:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    3270:	0792      	lsls	r2, r2, #30
    3272:	d413      	bmi.n	329c <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    3274:	5dda      	ldrb	r2, [r3, r7]
    3276:	2a00      	cmp	r2, #0
    3278:	d101      	bne.n	327e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    327a:	3801      	subs	r0, #1
    327c:	d2f7      	bcs.n	326e <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    327e:	2201      	movs	r2, #1
    3280:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3282:	9b00      	ldr	r3, [sp, #0]
    3284:	015a      	lsls	r2, r3, #5
    3286:	4b1d      	ldr	r3, [pc, #116]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    3288:	189b      	adds	r3, r3, r2
    328a:	699a      	ldr	r2, [r3, #24]
    328c:	0b92      	lsrs	r2, r2, #14
    328e:	0392      	lsls	r2, r2, #14
    3290:	619a      	str	r2, [r3, #24]
					return -1;
    3292:	2501      	movs	r5, #1
    3294:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    3296:	0028      	movs	r0, r5
    3298:	b005      	add	sp, #20
    329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    329c:	2200      	movs	r2, #0
    329e:	4b1b      	ldr	r3, [pc, #108]	; (330c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    32a0:	0034      	movs	r4, r6
    32a2:	55da      	strb	r2, [r3, r7]
    32a4:	2e3f      	cmp	r6, #63	; 0x3f
    32a6:	d900      	bls.n	32aa <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
    32a8:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    32aa:	0022      	movs	r2, r4
    32ac:	9901      	ldr	r1, [sp, #4]
    32ae:	9802      	ldr	r0, [sp, #8]
    32b0:	f007 fdda 	bl	ae68 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32b4:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32b6:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32b8:	015a      	lsls	r2, r3, #5
    32ba:	4b10      	ldr	r3, [pc, #64]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32bc:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32be:	189b      	adds	r3, r3, r2
    32c0:	9a02      	ldr	r2, [sp, #8]
		written += length;
    32c2:	192d      	adds	r5, r5, r4
    32c4:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32c6:	699a      	ldr	r2, [r3, #24]
		len -= length;
    32c8:	1b36      	subs	r6, r6, r4
    32ca:	0b92      	lsrs	r2, r2, #14
    32cc:	0392      	lsls	r2, r2, #14
    32ce:	430a      	orrs	r2, r1
    32d0:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    32d2:	9b00      	ldr	r3, [sp, #0]
    32d4:	9a03      	ldr	r2, [sp, #12]
    32d6:	3308      	adds	r3, #8
    32d8:	015b      	lsls	r3, r3, #5
    32da:	18d3      	adds	r3, r2, r3
    32dc:	2202      	movs	r2, #2
    32de:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    32e0:	7959      	ldrb	r1, [r3, #5]
    32e2:	3a82      	subs	r2, #130	; 0x82
    32e4:	430a      	orrs	r2, r1
    32e6:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    32e8:	9b01      	ldr	r3, [sp, #4]
    32ea:	191b      	adds	r3, r3, r4
    32ec:	9301      	str	r3, [sp, #4]
	while (len != 0)
    32ee:	e7a3      	b.n	3238 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    32f0:	2000082c 	.word	0x2000082c
    32f4:	2000039d 	.word	0x2000039d
    32f8:	200003a8 	.word	0x200003a8
    32fc:	20000834 	.word	0x20000834
    3300:	20000038 	.word	0x20000038
    3304:	000f4240 	.word	0x000f4240
    3308:	00011170 	.word	0x00011170
    330c:	2000039f 	.word	0x2000039f

00003310 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    3310:	b570      	push	{r4, r5, r6, lr}
    3312:	000d      	movs	r5, r1
    3314:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    3316:	4e0d      	ldr	r6, [pc, #52]	; (334c <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    3318:	01ab      	lsls	r3, r5, #6
    331a:	18f6      	adds	r6, r6, r3
{
    331c:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    331e:	0030      	movs	r0, r6
    3320:	0022      	movs	r2, r4
    3322:	f007 fda1 	bl	ae68 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3326:	b2ed      	uxtb	r5, r5
    3328:	4909      	ldr	r1, [pc, #36]	; (3350 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    332a:	016d      	lsls	r5, r5, #5
    332c:	194d      	adds	r5, r1, r5
    332e:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3330:	69ab      	ldr	r3, [r5, #24]
    3332:	4a08      	ldr	r2, [pc, #32]	; (3354 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    3334:	0020      	movs	r0, r4
    3336:	4013      	ands	r3, r2
    3338:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    333a:	69ab      	ldr	r3, [r5, #24]
    333c:	04a2      	lsls	r2, r4, #18
    333e:	0b9b      	lsrs	r3, r3, #14
    3340:	0c92      	lsrs	r2, r2, #18
    3342:	039b      	lsls	r3, r3, #14
    3344:	4313      	orrs	r3, r2
    3346:	61ab      	str	r3, [r5, #24]
    3348:	bd70      	pop	{r4, r5, r6, pc}
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	200003a8 	.word	0x200003a8
    3350:	20000834 	.word	0x20000834
    3354:	f0003fff 	.word	0xf0003fff

00003358 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    3358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    335a:	4b10      	ldr	r3, [pc, #64]	; (339c <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    335c:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    335e:	781b      	ldrb	r3, [r3, #0]
{
    3360:	000f      	movs	r7, r1
    3362:	0015      	movs	r5, r2
	if (_dry_run == true)
    3364:	2b00      	cmp	r3, #0
    3366:	d10c      	bne.n	3382 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    3368:	4b0d      	ldr	r3, [pc, #52]	; (33a0 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    336a:	0016      	movs	r6, r2
    336c:	781c      	ldrb	r4, [r3, #0]
    336e:	2c00      	cmp	r4, #0
    3370:	d009      	beq.n	3386 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    3372:	4e0c      	ldr	r6, [pc, #48]	; (33a4 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    3374:	480c      	ldr	r0, [pc, #48]	; (33a8 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    3376:	8834      	ldrh	r4, [r6, #0]
    3378:	1900      	adds	r0, r0, r4
		_pack_size += len;
    337a:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    337c:	f007 fd74 	bl	ae68 <memcpy>
		_pack_size += len;
    3380:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    3382:	0028      	movs	r0, r5
    3384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    3386:	2e00      	cmp	r6, #0
    3388:	d0fb      	beq.n	3382 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    338a:	193a      	adds	r2, r7, r4
    338c:	0033      	movs	r3, r6
    338e:	2100      	movs	r1, #0
    3390:	9801      	ldr	r0, [sp, #4]
    3392:	f7ff ffbd 	bl	3310 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    3396:	1824      	adds	r4, r4, r0
		len -= sent;
    3398:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    339a:	e7f4      	b.n	3386 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    339c:	20000728 	.word	0x20000728
    33a0:	20000829 	.word	0x20000829
    33a4:	2000082a 	.word	0x2000082a
    33a8:	20000729 	.word	0x20000729

000033ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    33ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    33ae:	2000      	movs	r0, #0
{
    33b0:	af00      	add	r7, sp, #0
    33b2:	000e      	movs	r6, r1
    33b4:	0015      	movs	r5, r2
	if (maxlen < 2)
    33b6:	2a01      	cmp	r2, #1
    33b8:	dd26      	ble.n	3408 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    33ba:	1dd3      	adds	r3, r2, #7
    33bc:	466a      	mov	r2, sp
    33be:	08db      	lsrs	r3, r3, #3
    33c0:	00db      	lsls	r3, r3, #3
    33c2:	1ad3      	subs	r3, r2, r3
    33c4:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    33c6:	0008      	movs	r0, r1
    33c8:	f008 fe81 	bl	c0ce <strlen>
	uint8_t buffer[maxlen];
    33cc:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    33ce:	2303      	movs	r3, #3
		buffer[i] = 0;
    33d0:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    33d2:	3001      	adds	r0, #1
    33d4:	0040      	lsls	r0, r0, #1
    33d6:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    33d8:	7063      	strb	r3, [r4, #1]
    33da:	1e5a      	subs	r2, r3, #1
    33dc:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    33de:	4295      	cmp	r5, r2
    33e0:	dd0b      	ble.n	33fa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    33e2:	7830      	ldrb	r0, [r6, #0]
    33e4:	2800      	cmp	r0, #0
    33e6:	d008      	beq.n	33fa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    33e8:	3601      	adds	r6, #1
    33ea:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    33ec:	429d      	cmp	r5, r3
    33ee:	d003      	beq.n	33f8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    33f0:	54e1      	strb	r1, [r4, r3]
    33f2:	3302      	adds	r3, #2
    33f4:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    33f6:	e7f0      	b.n	33da <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    33f8:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    33fa:	0021      	movs	r1, r4
    33fc:	4803      	ldr	r0, [pc, #12]	; (340c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    33fe:	f7ff ffab 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
    3402:	1e43      	subs	r3, r0, #1
    3404:	4198      	sbcs	r0, r3
    3406:	b2c0      	uxtb	r0, r0
}
    3408:	46bd      	mov	sp, r7
    340a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    340c:	2000037c 	.word	0x2000037c

00003410 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    3410:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    3412:	2700      	movs	r7, #0
	_dry_run = true;
    3414:	2601      	movs	r6, #1
{
    3416:	b087      	sub	sp, #28
	_dry_run = true;
    3418:	4b1e      	ldr	r3, [pc, #120]	; (3494 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    341a:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    341c:	a902      	add	r1, sp, #8
	_dry_run = true;
    341e:	701e      	strb	r6, [r3, #0]
{
    3420:	0005      	movs	r5, r0
	uint32_t total = 0;
    3422:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    3424:	f7ff fc5e 	bl	2ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    3428:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    342a:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    342c:	2209      	movs	r2, #9
    342e:	0039      	movs	r1, r7
    3430:	0020      	movs	r0, r4
    3432:	f007 fd34 	bl	ae9e <memset>
    3436:	2309      	movs	r3, #9
    3438:	7023      	strb	r3, [r4, #0]
    343a:	2302      	movs	r3, #2
    343c:	7063      	strb	r3, [r4, #1]
    343e:	339e      	adds	r3, #158	; 0x9e
    3440:	71e3      	strb	r3, [r4, #7]
    3442:	335a      	adds	r3, #90	; 0x5a
    3444:	7223      	strb	r3, [r4, #8]
    3446:	9b02      	ldr	r3, [sp, #8]
    3448:	7166      	strb	r6, [r4, #5]
    344a:	3309      	adds	r3, #9
    344c:	8063      	strh	r3, [r4, #2]
    344e:	466b      	mov	r3, sp
    3450:	791b      	ldrb	r3, [r3, #4]
    3452:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    3454:	4b0f      	ldr	r3, [pc, #60]	; (3494 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    3456:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    3458:	9b00      	ldr	r3, [sp, #0]
    345a:	2b09      	cmp	r3, #9
    345c:	d107      	bne.n	346e <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    345e:	001a      	movs	r2, r3
    3460:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    3462:	0028      	movs	r0, r5
    3464:	f7ff ff78 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    3468:	2001      	movs	r0, #1
    346a:	b007      	add	sp, #28
    346c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    346e:	4b0a      	ldr	r3, [pc, #40]	; (3498 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    3470:	2209      	movs	r2, #9
		_pack_message = true;
    3472:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    3474:	4e09      	ldr	r6, [pc, #36]	; (349c <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    3476:	0021      	movs	r1, r4
    3478:	0028      	movs	r0, r5
	total = 0;
    347a:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    347c:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    347e:	f7ff ff6b 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    3482:	a902      	add	r1, sp, #8
    3484:	0028      	movs	r0, r5
    3486:	f7ff fc2d 	bl	2ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    348a:	4b03      	ldr	r3, [pc, #12]	; (3498 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    348c:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    348e:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    3490:	4903      	ldr	r1, [pc, #12]	; (34a0 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    3492:	e7e6      	b.n	3462 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    3494:	20000728 	.word	0x20000728
    3498:	20000829 	.word	0x20000829
    349c:	2000082a 	.word	0x2000082a
    34a0:	20000729 	.word	0x20000729

000034a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    34a4:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    34a6:	78ce      	ldrb	r6, [r1, #3]
{
    34a8:	b092      	sub	sp, #72	; 0x48
    34aa:	0005      	movs	r5, r0
    34ac:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    34ae:	2e02      	cmp	r6, #2
    34b0:	d108      	bne.n	34c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    34b2:	88c9      	ldrh	r1, [r1, #6]
    34b4:	482b      	ldr	r0, [pc, #172]	; (3564 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    34b6:	f7ff ffab 	bl	3410 <_ZN14USBDeviceClass17sendConfigurationEm>
    34ba:	1e43      	subs	r3, r0, #1
    34bc:	4198      	sbcs	r0, r3
    34be:	b2c0      	uxtb	r0, r0
}
    34c0:	b012      	add	sp, #72	; 0x48
    34c2:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    34c4:	f002 f834 	bl	5530 <_Z12PluggableUSBv>
    34c8:	0021      	movs	r1, r4
    34ca:	f002 f801 	bl	54d0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    34ce:	2800      	cmp	r0, #0
    34d0:	d003      	beq.n	34da <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    34d2:	17c3      	asrs	r3, r0, #31
    34d4:	1a18      	subs	r0, r3, r0
    34d6:	0fc0      	lsrs	r0, r0, #31
    34d8:	e7f2      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    34da:	2e01      	cmp	r6, #1
    34dc:	d10b      	bne.n	34f6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (*desc_addr > setup.wLength) {
    34de:	88e2      	ldrh	r2, [r4, #6]
    34e0:	4921      	ldr	r1, [pc, #132]	; (3568 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
    34e2:	2a11      	cmp	r2, #17
    34e4:	dc10      	bgt.n	3508 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    34e6:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    34e8:	2a00      	cmp	r2, #0
    34ea:	d00d      	beq.n	3508 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    34ec:	0028      	movs	r0, r5
    34ee:	f7ff ff33 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    34f2:	2001      	movs	r0, #1
    34f4:	e7e4      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    34f6:	2e03      	cmp	r6, #3
    34f8:	d1e2      	bne.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    34fa:	78a3      	ldrb	r3, [r4, #2]
    34fc:	2b00      	cmp	r3, #0
    34fe:	d105      	bne.n	350c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    3500:	88e2      	ldrh	r2, [r4, #6]
    3502:	491a      	ldr	r1, [pc, #104]	; (356c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    3504:	2a03      	cmp	r2, #3
    3506:	ddee      	ble.n	34e6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    3508:	780a      	ldrb	r2, [r1, #0]
    350a:	e7ef      	b.n	34ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    350c:	2b02      	cmp	r3, #2
    350e:	d105      	bne.n	351c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    3510:	79a2      	ldrb	r2, [r4, #6]
    3512:	4917      	ldr	r1, [pc, #92]	; (3570 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3514:	0028      	movs	r0, r5
    3516:	f7ff ff49 	bl	33ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    351a:	e7d1      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    351c:	2b01      	cmp	r3, #1
    351e:	d102      	bne.n	3526 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3520:	79a2      	ldrb	r2, [r4, #6]
    3522:	4914      	ldr	r1, [pc, #80]	; (3574 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    3524:	e7f6      	b.n	3514 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    3526:	2b03      	cmp	r3, #3
    3528:	d1ca      	bne.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    352a:	4b13      	ldr	r3, [pc, #76]	; (3578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    352c:	a901      	add	r1, sp, #4
    352e:	6818      	ldr	r0, [r3, #0]
    3530:	f7ff f9d0 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    3534:	4b11      	ldr	r3, [pc, #68]	; (357c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    3536:	a903      	add	r1, sp, #12
    3538:	6818      	ldr	r0, [r3, #0]
    353a:	f7ff f9cb 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    353e:	4b10      	ldr	r3, [pc, #64]	; (3580 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    3540:	a905      	add	r1, sp, #20
    3542:	6818      	ldr	r0, [r3, #0]
    3544:	f7ff f9c6 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    3548:	4b0e      	ldr	r3, [pc, #56]	; (3584 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    354a:	a907      	add	r1, sp, #28
    354c:	6818      	ldr	r0, [r3, #0]
    354e:	f7ff f9c1 	bl	28d4 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    3552:	f001 ffed 	bl	5530 <_Z12PluggableUSBv>
    3556:	a909      	add	r1, sp, #36	; 0x24
    3558:	f001 ffca 	bl	54f0 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    355c:	79a2      	ldrb	r2, [r4, #6]
    355e:	a901      	add	r1, sp, #4
    3560:	e7d8      	b.n	3514 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	2000037c 	.word	0x2000037c
    3568:	0000f0b6 	.word	0x0000f0b6
    356c:	0000f0a2 	.word	0x0000f0a2
    3570:	0000f094 	.word	0x0000f094
    3574:	0000f0a6 	.word	0x0000f0a6
    3578:	0080a00c 	.word	0x0080a00c
    357c:	0080a040 	.word	0x0080a040
    3580:	0080a044 	.word	0x0080a044
    3584:	0080a048 	.word	0x0080a048

00003588 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    3588:	b573      	push	{r0, r1, r4, r5, r6, lr}
    358a:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    358c:	7848      	ldrb	r0, [r1, #1]
{
    358e:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    3590:	280b      	cmp	r0, #11
    3592:	d811      	bhi.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    3594:	f004 fb1e 	bl	7bd4 <__gnu_thumb1_case_uqi>
    3598:	2e101d06 	.word	0x2e101d06
    359c:	70484310 	.word	0x70484310
    35a0:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    35a4:	7809      	ldrb	r1, [r1, #0]
    35a6:	aa01      	add	r2, sp, #4
    35a8:	2900      	cmp	r1, #0
    35aa:	d107      	bne.n	35bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    35ac:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    35ae:	7011      	strb	r1, [r2, #0]
    35b0:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    35b2:	0030      	movs	r0, r6
    35b4:	f7ff feac 	bl	3310 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    35b8:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    35ba:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    35bc:	2300      	movs	r3, #0
    35be:	7013      	strb	r3, [r2, #0]
    35c0:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    35c2:	4b2e      	ldr	r3, [pc, #184]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    35c4:	781b      	ldrb	r3, [r3, #0]
    35c6:	2b01      	cmp	r3, #1
    35c8:	d100      	bne.n	35cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    35ca:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    35cc:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    35ce:	2100      	movs	r1, #0
    35d0:	e7ef      	b.n	35b2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    35d2:	788a      	ldrb	r2, [r1, #2]
    35d4:	2300      	movs	r3, #0
    35d6:	2a01      	cmp	r2, #1
    35d8:	d104      	bne.n	35e4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    35da:	aa01      	add	r2, sp, #4
    35dc:	7013      	strb	r3, [r2, #0]
    35de:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    35e0:	4b27      	ldr	r3, [pc, #156]	; (3680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    35e2:	e7ef      	b.n	35c4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    35e4:	4a25      	ldr	r2, [pc, #148]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    35e6:	7013      	strb	r3, [r2, #0]
    35e8:	4a26      	ldr	r2, [pc, #152]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    35ea:	6993      	ldr	r3, [r2, #24]
    35ec:	0b9b      	lsrs	r3, r3, #14
    35ee:	039b      	lsls	r3, r3, #14
    35f0:	6193      	str	r3, [r2, #24]
    35f2:	e7e1      	b.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    35f4:	788c      	ldrb	r4, [r1, #2]
    35f6:	2c01      	cmp	r4, #1
    35f8:	d106      	bne.n	3608 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    35fa:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    35fc:	4b20      	ldr	r3, [pc, #128]	; (3680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    35fe:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    3600:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    3602:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    3604:	0023      	movs	r3, r4
    3606:	e7d4      	b.n	35b2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    3608:	2c00      	cmp	r4, #0
    360a:	d108      	bne.n	361e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    360c:	2001      	movs	r0, #1
    360e:	4b1b      	ldr	r3, [pc, #108]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    3610:	4a1c      	ldr	r2, [pc, #112]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3612:	7018      	strb	r0, [r3, #0]
    3614:	6993      	ldr	r3, [r2, #24]
    3616:	0b9b      	lsrs	r3, r3, #14
    3618:	039b      	lsls	r3, r3, #14
    361a:	6193      	str	r3, [r2, #24]
			return true;
    361c:	e7cd      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    361e:	78a9      	ldrb	r1, [r5, #2]
    3620:	0030      	movs	r0, r6
    3622:	f7ff fc11 	bl	2e48 <_ZN14USBDeviceClass10setAddressEm>
    3626:	e7c7      	b.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    3628:	0030      	movs	r0, r6
    362a:	f7ff ff3b 	bl	34a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    362e:	e7c4      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    3630:	2301      	movs	r3, #1
    3632:	4a15      	ldr	r2, [pc, #84]	; (3688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    3634:	e7cb      	b.n	35ce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    3636:	780b      	ldrb	r3, [r1, #0]
			return false;
    3638:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    363a:	06db      	lsls	r3, r3, #27
    363c:	d1bd      	bne.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    363e:	0030      	movs	r0, r6
    3640:	f7ff fcbc 	bl	2fbc <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    3644:	202a      	movs	r0, #42	; 0x2a
    3646:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    3648:	78aa      	ldrb	r2, [r5, #2]
    364a:	4b0f      	ldr	r3, [pc, #60]	; (3688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    364c:	30ff      	adds	r0, #255	; 0xff
    364e:	601a      	str	r2, [r3, #0]
    3650:	4a0c      	ldr	r2, [pc, #48]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3652:	6813      	ldr	r3, [r2, #0]
    3654:	5c1c      	ldrb	r4, [r3, r0]
    3656:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3658:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    365a:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    365c:	34ff      	adds	r4, #255	; 0xff
    365e:	5d19      	ldrb	r1, [r3, r4]
    3660:	3829      	subs	r0, #41	; 0x29
    3662:	38ff      	subs	r0, #255	; 0xff
    3664:	4301      	orrs	r1, r0
    3666:	5519      	strb	r1, [r3, r4]
    3668:	e7d4      	b.n	3614 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    366a:	2301      	movs	r3, #1
    366c:	4a07      	ldr	r2, [pc, #28]	; (368c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    366e:	e7ae      	b.n	35ce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    3670:	788a      	ldrb	r2, [r1, #2]
    3672:	4b06      	ldr	r3, [pc, #24]	; (368c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    3674:	601a      	str	r2, [r3, #0]
    3676:	e7b7      	b.n	35e8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    3678:	2000      	movs	r0, #0
    367a:	e79e      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    367c:	2000039e 	.word	0x2000039e
    3680:	200003a6 	.word	0x200003a6
    3684:	20000834 	.word	0x20000834
    3688:	2000082c 	.word	0x2000082c
    368c:	20000830 	.word	0x20000830

00003690 <_ZN14USBDeviceClass10ISRHandlerEv>:
}

#else
void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    3690:	4b4c      	ldr	r3, [pc, #304]	; (37c4 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
{
    3692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    3694:	781c      	ldrb	r4, [r3, #0]
{
    3696:	0007      	movs	r7, r0
	if (_pack_message == true) {
    3698:	2c00      	cmp	r4, #0
    369a:	d000      	beq.n	369e <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    369c:	e091      	b.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    369e:	4e4a      	ldr	r6, [pc, #296]	; (37c8 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    36a0:	6833      	ldr	r3, [r6, #0]
    36a2:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    36a4:	071b      	lsls	r3, r3, #28
    36a6:	d50e      	bpl.n	36c6 <_ZN14USBDeviceClass10ISRHandlerEv+0x36>
    36a8:	0021      	movs	r1, r4
    36aa:	0020      	movs	r0, r4
    36ac:	f7ff f924 	bl	28f8 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    36b0:	6832      	ldr	r2, [r6, #0]
    36b2:	2310      	movs	r3, #16
    36b4:	0011      	movs	r1, r2
    36b6:	31ff      	adds	r1, #255	; 0xff
    36b8:	7a88      	ldrb	r0, [r1, #10]
    36ba:	4303      	orrs	r3, r0
    36bc:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    36be:	4b43      	ldr	r3, [pc, #268]	; (37cc <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    36c0:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    36c2:	2308      	movs	r3, #8
    36c4:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    36c6:	6833      	ldr	r3, [r6, #0]
    36c8:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    36ca:	0752      	lsls	r2, r2, #29
    36cc:	d51f      	bpl.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    36ce:	2204      	movs	r2, #4
    36d0:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    36d2:	4a3f      	ldr	r2, [pc, #252]	; (37d0 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    36d4:	7813      	ldrb	r3, [r2, #0]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d00a      	beq.n	36f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
			txLEDPulse--;
    36da:	7813      	ldrb	r3, [r2, #0]
    36dc:	3b01      	subs	r3, #1
    36de:	b2db      	uxtb	r3, r3
    36e0:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    36e2:	7813      	ldrb	r3, [r2, #0]
    36e4:	2b00      	cmp	r3, #0
    36e6:	d103      	bne.n	36f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
				digitalWrite(PIN_LED_TXL, HIGH);
    36e8:	2101      	movs	r1, #1
    36ea:	2015      	movs	r0, #21
    36ec:	f000 f9f0 	bl	3ad0 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    36f0:	4a38      	ldr	r2, [pc, #224]	; (37d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    36f2:	7813      	ldrb	r3, [r2, #0]
    36f4:	2b00      	cmp	r3, #0
    36f6:	d00a      	beq.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
			rxLEDPulse--;
    36f8:	7813      	ldrb	r3, [r2, #0]
    36fa:	3b01      	subs	r3, #1
    36fc:	b2db      	uxtb	r3, r3
    36fe:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    3700:	7813      	ldrb	r3, [r2, #0]
    3702:	2b00      	cmp	r3, #0
    3704:	d103      	bne.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
				digitalWrite(PIN_LED_RXL, HIGH);
    3706:	2101      	movs	r1, #1
    3708:	2014      	movs	r0, #20
    370a:	f000 f9e1 	bl	3ad0 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    370e:	6833      	ldr	r3, [r6, #0]
    3710:	33ff      	adds	r3, #255	; 0xff
    3712:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    3714:	06d2      	lsls	r2, r2, #27
    3716:	d520      	bpl.n	375a <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    3718:	2210      	movs	r2, #16
    371a:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    371c:	7959      	ldrb	r1, [r3, #5]
    371e:	3230      	adds	r2, #48	; 0x30
    3720:	430a      	orrs	r2, r1
    3722:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    3724:	2360      	movs	r3, #96	; 0x60
    3726:	492c      	ldr	r1, [pc, #176]	; (37d8 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    3728:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    372a:	780a      	ldrb	r2, [r1, #0]
    372c:	421a      	tst	r2, r3
    372e:	d135      	bne.n	379c <_ZN14USBDeviceClass10ISRHandlerEv+0x10c>
			ok = handleStandardSetup(*setup);
    3730:	f7ff ff2a 	bl	3588 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    3734:	2800      	cmp	r0, #0
    3736:	d034      	beq.n	37a2 <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3738:	2280      	movs	r2, #128	; 0x80
    373a:	6833      	ldr	r3, [r6, #0]
    373c:	4252      	negs	r2, r2
    373e:	33ff      	adds	r3, #255	; 0xff
    3740:	7999      	ldrb	r1, [r3, #6]
    3742:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    3744:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    3746:	6833      	ldr	r3, [r6, #0]
    3748:	33ff      	adds	r3, #255	; 0xff
    374a:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    374c:	0652      	lsls	r2, r2, #25
    374e:	d504      	bpl.n	375a <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    3750:	2240      	movs	r2, #64	; 0x40
    3752:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    3754:	7a59      	ldrb	r1, [r3, #9]
    3756:	430a      	orrs	r2, r1
    3758:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    375a:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

        uint8_t i = (USB_EPT_NUM - 1);
        uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    375c:	2507      	movs	r5, #7
    375e:	8c1c      	ldrh	r4, [r3, #32]
    3760:	2301      	movs	r3, #1
    3762:	439c      	bics	r4, r3
    3764:	b2e4      	uxtb	r4, r4
        while (ept_int && i)
        {
                // Check if endpoint has a pending interrupt
                if ((ept_int & (1 << i)) != 0)
    3766:	9301      	str	r3, [sp, #4]
    3768:	b2e9      	uxtb	r1, r5
        while (ept_int && i)
    376a:	2c00      	cmp	r4, #0
    376c:	d029      	beq.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
    376e:	2d00      	cmp	r5, #0
    3770:	d027      	beq.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
                if ((ept_int & (1 << i)) != 0)
    3772:	0023      	movs	r3, r4
    3774:	412b      	asrs	r3, r5
    3776:	9a01      	ldr	r2, [sp, #4]
    3778:	4213      	tst	r3, r2
    377a:	d00d      	beq.n	3798 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    377c:	002b      	movs	r3, r5
    377e:	6832      	ldr	r2, [r6, #0]
    3780:	3308      	adds	r3, #8
    3782:	015b      	lsls	r3, r3, #5
    3784:	18d3      	adds	r3, r2, r3
    3786:	79da      	ldrb	r2, [r3, #7]
                {
                        // Endpoint Transfer Complete (0/1) Interrupt
                        if (usbd.epBank0IsTransferComplete(i) ||
    3788:	07d2      	lsls	r2, r2, #31
    378a:	d411      	bmi.n	37b0 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    378c:	79db      	ldrb	r3, [r3, #7]
    378e:	079b      	lsls	r3, r3, #30
    3790:	d40e      	bmi.n	37b0 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
                                        epHandlers[i]->handleEndpoint();
                                } else {
                                        handleEndpoint(i);
                                }
                        }
                        ept_int &= ~(1 << i);
    3792:	9b01      	ldr	r3, [sp, #4]
    3794:	40ab      	lsls	r3, r5
    3796:	439c      	bics	r4, r3
    3798:	3d01      	subs	r5, #1
    379a:	e7e5      	b.n	3768 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
			ok = handleClassInterfaceSetup(*setup);
    379c:	f7ff fb78 	bl	2e90 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    37a0:	e7c8      	b.n	3734 <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    37a2:	2220      	movs	r2, #32
    37a4:	4b0d      	ldr	r3, [pc, #52]	; (37dc <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    37a6:	e7cd      	b.n	3744 <_ZN14USBDeviceClass10ISRHandlerEv+0xb4>
                                        epHandlers[i]->handleEndpoint();
    37a8:	6803      	ldr	r3, [r0, #0]
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	4798      	blx	r3
    37ae:	e7f0      	b.n	3792 <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                                if (epHandlers[i]) {
    37b0:	4b0b      	ldr	r3, [pc, #44]	; (37e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x150>)
    37b2:	00aa      	lsls	r2, r5, #2
    37b4:	58d0      	ldr	r0, [r2, r3]
    37b6:	2800      	cmp	r0, #0
    37b8:	d1f6      	bne.n	37a8 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
                                        handleEndpoint(i);
    37ba:	0038      	movs	r0, r7
    37bc:	f7ff faa8 	bl	2d10 <_ZN14USBDeviceClass14handleEndpointEh>
    37c0:	e7e7      	b.n	3792 <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                }
                i--;
        }
}
    37c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    37c4:	20000829 	.word	0x20000829
    37c8:	20000834 	.word	0x20000834
    37cc:	2000082c 	.word	0x2000082c
    37d0:	2000039d 	.word	0x2000039d
    37d4:	2000039c 	.word	0x2000039c
    37d8:	20000568 	.word	0x20000568
    37dc:	410000ff 	.word	0x410000ff
    37e0:	20000380 	.word	0x20000380

000037e4 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    37e4:	b510      	push	{r4, lr}
  USBDevice.ISRHandler();
    37e6:	4802      	ldr	r0, [pc, #8]	; (37f0 <UDD_Handler+0xc>)
    37e8:	f7ff ff52 	bl	3690 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    37ec:	bd10      	pop	{r4, pc}
    37ee:	46c0      	nop			; (mov r8, r8)
    37f0:	2000037c 	.word	0x2000037c

000037f4 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    37f4:	2282      	movs	r2, #130	; 0x82
    37f6:	4b02      	ldr	r3, [pc, #8]	; (3800 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    37f8:	05d2      	lsls	r2, r2, #23
    37fa:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    37fc:	4770      	bx	lr
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	20000834 	.word	0x20000834

00003804 <init>:
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3804:	20c0      	movs	r0, #192	; 0xc0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3806:	491a      	ldr	r1, [pc, #104]	; (3870 <init+0x6c>)
    3808:	4b1a      	ldr	r3, [pc, #104]	; (3874 <init+0x70>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    380a:	4a1b      	ldr	r2, [pc, #108]	; (3878 <init+0x74>)
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz (optionally 120MHz for D51).
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    380c:	b510      	push	{r4, lr}
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    380e:	604b      	str	r3, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3810:	6a13      	ldr	r3, [r2, #32]
    3812:	0600      	lsls	r0, r0, #24
    3814:	021b      	lsls	r3, r3, #8
    3816:	0a1b      	lsrs	r3, r3, #8
    3818:	4303      	orrs	r3, r0
    381a:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    381c:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    381e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3820:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3822:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3824:	2180      	movs	r1, #128	; 0x80
    3826:	6a13      	ldr	r3, [r2, #32]
    3828:	0609      	lsls	r1, r1, #24
    382a:	021b      	lsls	r3, r3, #8
    382c:	0a1b      	lsrs	r3, r3, #8
    382e:	430b      	orrs	r3, r1
#elif (SAML21 || SAMC21)
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_SERCOM0 | MCLK_APBCMASK_SERCOM1 | MCLK_APBCMASK_SERCOM2 | MCLK_APBCMASK_SERCOM3 | MCLK_APBCMASK_SERCOM4 ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    3830:	2106      	movs	r1, #6
    3832:	6213      	str	r3, [r2, #32]
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;
    3834:	4b11      	ldr	r3, [pc, #68]	; (387c <init+0x78>)
    3836:	69da      	ldr	r2, [r3, #28]
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    3838:	6a18      	ldr	r0, [r3, #32]
    383a:	4301      	orrs	r1, r0
    383c:	6219      	str	r1, [r3, #32]
  regAPBCMASK |= MCLK_APBCMASK_TCC0 | MCLK_APBCMASK_TCC1 | MCLK_APBCMASK_TCC2 | MCLK_APBCMASK_TC0 | MCLK_APBCMASK_TC1 | MCLK_APBCMASK_TC2 | MCLK_APBCMASK_TC3 | MCLK_APBCMASK_TC4 ;
  #endif

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_DAC ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_ADC;	// On the SAML, ADC is on the low power bridge
    383e:	2108      	movs	r1, #8
    3840:	6a18      	ldr	r0, [r3, #32]
    3842:	4301      	orrs	r1, r0
    3844:	6219      	str	r1, [r3, #32]
  #elif (SAMC21)
  regAPBCMASK |= MCLK_APBCMASK_ADC0 | MCLK_APBCMASK_ADC1 | MCLK_APBCMASK_DAC ;
  #endif

  MCLK->APBCMASK.reg |= regAPBCMASK ;
    3846:	69d9      	ldr	r1, [r3, #28]
    3848:	4311      	orrs	r1, r2
    384a:	4a0d      	ldr	r2, [pc, #52]	; (3880 <init+0x7c>)
    384c:	430a      	orrs	r2, r1
    384e:	61da      	str	r2, [r3, #28]
#endif

  // Setup all pins (digital and analog) in STARTUP mode (enable INEN and set default pull direction to pullup (pullup will not be enabled))
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, PIO_STARTUP ) ;
    3850:	0020      	movs	r0, r4
    3852:	211a      	movs	r1, #26
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    3854:	3401      	adds	r4, #1
    pinMode( ul, PIO_STARTUP ) ;
    3856:	f000 f937 	bl	3ac8 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    385a:	2c24      	cmp	r4, #36	; 0x24
    385c:	d1f8      	bne.n	3850 <init+0x4c>
  PORT->Group[0].OUTSET.reg = (uint32_t)(1<<PIN_PA25G_USB_DP);
  PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].reg = (PORT_PINCFG_PULLEN | PORT_PINCFG_INEN);
#endif

#if !defined(ADC_NO_INIT_IF_UNUSED)
  initADC();         // Initialize Analog Controller
    385e:	f000 f89f 	bl	39a0 <initADC>
  analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    3862:	2005      	movs	r0, #5
    3864:	f000 f83c 	bl	38e0 <analogReference>
#endif

#if !defined(DAC_NO_INIT_IF_UNUSED)
  initDAC();         // Initialize DAC
    3868:	f000 f816 	bl	3898 <initDAC>
#endif
}
    386c:	bd10      	pop	{r4, pc}
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	e000e010 	.word	0xe000e010
    3874:	0000bb7f 	.word	0x0000bb7f
    3878:	e000ed00 	.word	0xe000ed00
    387c:	40000400 	.word	0x40000400
    3880:	000017ff 	.word	0x000017ff

00003884 <mapResolution>:
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    3884:	4291      	cmp	r1, r2
    3886:	d002      	beq.n	388e <mapResolution+0xa>
    return value;
  }
  if (from > to) {
    3888:	d902      	bls.n	3890 <mapResolution+0xc>
    return value >> (from-to);
    388a:	1a8a      	subs	r2, r1, r2
    388c:	40d0      	lsrs	r0, r2
  }
  return value << (to-from);
}
    388e:	4770      	bx	lr
  return value << (to-from);
    3890:	1a52      	subs	r2, r2, r1
    3892:	4090      	lsls	r0, r2
    3894:	e7fb      	b.n	388e <mapResolution+0xa>
	...

00003898 <initDAC>:
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    3898:	490c      	ldr	r1, [pc, #48]	; (38cc <initDAC+0x34>)
    389a:	4b0d      	ldr	r3, [pc, #52]	; (38d0 <initDAC+0x38>)
    389c:	684a      	ldr	r2, [r1, #4]
    389e:	421a      	tst	r2, r3
    38a0:	d1fc      	bne.n	389c <initDAC+0x4>
    GCLK->PCHCTRL[GCM_DAC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    38a2:	2340      	movs	r3, #64	; 0x40
    38a4:	4a0b      	ldr	r2, [pc, #44]	; (38d4 <initDAC+0x3c>)
    38a6:	6053      	str	r3, [r2, #4]
  while ( (GCLK->PCHCTRL[GCM_DAC].reg & GCLK_PCHCTRL_CHEN) == 0 );      // wait for sync
    38a8:	6851      	ldr	r1, [r2, #4]
    38aa:	4219      	tst	r1, r3
    38ac:	d0fc      	beq.n	38a8 <initDAC+0x10>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    38ae:	223f      	movs	r2, #63	; 0x3f
    38b0:	4b09      	ldr	r3, [pc, #36]	; (38d8 <initDAC+0x40>)
    38b2:	6899      	ldr	r1, [r3, #8]
    38b4:	4211      	tst	r1, r2
    38b6:	d1fc      	bne.n	38b2 <initDAC+0x1a>
      DAC->CTRLB.reg = DAC_CTRLB_REFSEL_VDDANA;
    38b8:	2202      	movs	r2, #2
    38ba:	705a      	strb	r2, [r3, #1]
    DAC->DACCTRL[0].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    38bc:	22c2      	movs	r2, #194	; 0xc2
    38be:	0092      	lsls	r2, r2, #2
    38c0:	819a      	strh	r2, [r3, #12]
    DAC->DACCTRL[1].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    38c2:	81da      	strh	r2, [r3, #14]
  DACinitialized = 1;
    38c4:	2201      	movs	r2, #1
    38c6:	4b05      	ldr	r3, [pc, #20]	; (38dc <initDAC+0x44>)
    38c8:	701a      	strb	r2, [r3, #0]
}
    38ca:	4770      	bx	lr
    38cc:	40001800 	.word	0x40001800
    38d0:	000007fd 	.word	0x000007fd
    38d4:	400018fc 	.word	0x400018fc
    38d8:	42003000 	.word	0x42003000
    38dc:	20000939 	.word	0x20000939

000038e0 <analogReference>:
 * External Reference should be between 1V and VDDANA-0.6V=2.7V (1V and VDDANA-0.4V=2.9V for D51)
 *
 * Warning : The maximum IO voltage is Vcc (up to 3.6 volts for the SAMD/SAML, 5V for the SAMC)
 */
void analogReference(eAnalogReference mode)
{
    38e0:	b510      	push	{r4, lr}
  if (!ADCinitialized) {
    38e2:	4b2a      	ldr	r3, [pc, #168]	; (398c <analogReference+0xac>)
{
    38e4:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    38e6:	781b      	ldrb	r3, [r3, #0]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d104      	bne.n	38f6 <analogReference+0x16>
    REFinitialized = 1; // to prevent re-entry
    38ec:	2201      	movs	r2, #1
    38ee:	4b28      	ldr	r3, [pc, #160]	; (3990 <analogReference+0xb0>)
    38f0:	701a      	strb	r2, [r3, #0]
    initADC();
    38f2:	f000 f855 	bl	39a0 <initADC>
  }

#if (!SAMD11C)
  #if defined(REFA_PIN)
    if (mode == AR_EXTERNAL_REFA) {
    38f6:	2c03      	cmp	r4, #3
    38f8:	d106      	bne.n	3908 <analogReference+0x28>
#endif

#if (SAMD21 || SAMD11 || SAML21 || SAMD51)
  #if defined(REFB_PIN)
    if (mode == AR_EXTERNAL_REFB) {
      if ( pinPeripheral(REFB_PIN, PIO_ANALOG_REF) != RET_STATUS_OK ) {
    38fa:	2107      	movs	r1, #7
    38fc:	0020      	movs	r0, r4
    38fe:	f000 f951 	bl	3ba4 <pinPeripheral>
    3902:	2800      	cmp	r0, #0
    3904:	d009      	beq.n	391a <analogReference+0x3a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
#endif
  syncADC();

  REFinitialized = 1;
}
    3906:	bd10      	pop	{r4, pc}
    if (mode == AR_EXTERNAL_REFB) {
    3908:	2c04      	cmp	r4, #4
    390a:	d0f6      	beq.n	38fa <analogReference+0x1a>
  if (mode == 0) {		// Set to 1.0V for the SAML, 1.024V for the SAMC
    390c:	2c00      	cmp	r4, #0
    390e:	d12b      	bne.n	3968 <analogReference+0x88>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3910:	4a20      	ldr	r2, [pc, #128]	; (3994 <analogReference+0xb4>)
    3912:	4921      	ldr	r1, [pc, #132]	; (3998 <analogReference+0xb8>)
    3914:	69d3      	ldr	r3, [r2, #28]
    3916:	400b      	ands	r3, r1
    3918:	61d3      	str	r3, [r2, #28]
    ADC->REFCTRL.bit.REFSEL = mode;
    391a:	210f      	movs	r1, #15
    391c:	4b1f      	ldr	r3, [pc, #124]	; (399c <analogReference+0xbc>)
    391e:	400c      	ands	r4, r1
    3920:	789a      	ldrb	r2, [r3, #2]
    3922:	438a      	bics	r2, r1
    3924:	4314      	orrs	r4, r2
    3926:	709c      	strb	r4, [r3, #2]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3928:	8c1a      	ldrh	r2, [r3, #32]
    392a:	0552      	lsls	r2, r2, #21
    392c:	d1fc      	bne.n	3928 <analogReference+0x48>
  ADC->CTRLA.bit.ENABLE = 0x01;              // Enable ADC
    392e:	7819      	ldrb	r1, [r3, #0]
    3930:	3202      	adds	r2, #2
    3932:	430a      	orrs	r2, r1
    3934:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3936:	8c1a      	ldrh	r2, [r3, #32]
    3938:	0552      	lsls	r2, r2, #21
    393a:	d1fc      	bne.n	3936 <analogReference+0x56>
  ADC->SWTRIG.bit.START = 1;
    393c:	7e19      	ldrb	r1, [r3, #24]
    393e:	3202      	adds	r2, #2
    3940:	430a      	orrs	r2, r1
    3942:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3944:	8c1a      	ldrh	r2, [r3, #32]
    3946:	0552      	lsls	r2, r2, #21
    3948:	d1fc      	bne.n	3944 <analogReference+0x64>
  while (ADC->INTFLAG.bit.RESRDY == 0);      // Waiting for conversion to complete
    394a:	799a      	ldrb	r2, [r3, #6]
    394c:	07d2      	lsls	r2, r2, #31
    394e:	d5fc      	bpl.n	394a <analogReference+0x6a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    3950:	2102      	movs	r1, #2
  valueRead = ADC->RESULT.reg;               // Dummy read (will also clear the Data Ready flag)
    3952:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    3954:	781a      	ldrb	r2, [r3, #0]
    3956:	438a      	bics	r2, r1
    3958:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    395a:	8c1a      	ldrh	r2, [r3, #32]
    395c:	0552      	lsls	r2, r2, #21
    395e:	d1fc      	bne.n	395a <analogReference+0x7a>
  REFinitialized = 1;
    3960:	4b0b      	ldr	r3, [pc, #44]	; (3990 <analogReference+0xb0>)
    3962:	3201      	adds	r2, #1
    3964:	701a      	strb	r2, [r3, #0]
    3966:	e7ce      	b.n	3906 <analogReference+0x26>
  } else if (mode >= AR_INTREF_1V0) {		// Values starting at AR_INTREF_1V0 are used for the Supply Controller reference (AR_INTREF)
    3968:	2c05      	cmp	r4, #5
    396a:	d9d6      	bls.n	391a <analogReference+0x3a>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    396c:	4b09      	ldr	r3, [pc, #36]	; (3994 <analogReference+0xb4>)
    396e:	490a      	ldr	r1, [pc, #40]	; (3998 <analogReference+0xb8>)
    3970:	69da      	ldr	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3972:	3c06      	subs	r4, #6
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3974:	400a      	ands	r2, r1
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3976:	21f0      	movs	r1, #240	; 0xf0
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3978:	61da      	str	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    397a:	69da      	ldr	r2, [r3, #28]
    397c:	0424      	lsls	r4, r4, #16
    397e:	0309      	lsls	r1, r1, #12
    3980:	400c      	ands	r4, r1
    3982:	4314      	orrs	r4, r2
    3984:	61dc      	str	r4, [r3, #28]
    mode = 0;
    3986:	2400      	movs	r4, #0
    3988:	e7c7      	b.n	391a <analogReference+0x3a>
    398a:	46c0      	nop			; (mov r8, r8)
    398c:	20000938 	.word	0x20000938
    3990:	2000093a 	.word	0x2000093a
    3994:	40001400 	.word	0x40001400
    3998:	fff0ffff 	.word	0xfff0ffff
    399c:	43000c00 	.word	0x43000c00

000039a0 <initADC>:
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39a0:	4b1e      	ldr	r3, [pc, #120]	; (3a1c <initADC+0x7c>)
    39a2:	2107      	movs	r1, #7
    39a4:	681b      	ldr	r3, [r3, #0]
{
    39a6:	b510      	push	{r4, lr}
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39a8:	001a      	movs	r2, r3
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    39aa:	08db      	lsrs	r3, r3, #3
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39ac:	400a      	ands	r2, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    39ae:	0212      	lsls	r2, r2, #8
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    39b0:	400b      	ands	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    39b2:	4313      	orrs	r3, r2
    39b4:	4a1a      	ldr	r2, [pc, #104]	; (3a20 <initADC+0x80>)
    39b6:	8593      	strh	r3, [r2, #44]	; 0x2c
    39b8:	0013      	movs	r3, r2
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39ba:	8c1a      	ldrh	r2, [r3, #32]
    39bc:	0552      	lsls	r2, r2, #21
    39be:	d1fc      	bne.n	39ba <initADC+0x1a>
  SUPC->VREF.reg |= SUPC_VREF_VREFOE;           // Enable Supply Controller Reference output for use with ADC and DAC (AR_INTREF)
    39c0:	4918      	ldr	r1, [pc, #96]	; (3a24 <initADC+0x84>)
    39c2:	3204      	adds	r2, #4
    39c4:	69c8      	ldr	r0, [r1, #28]
    39c6:	4302      	orrs	r2, r0
    39c8:	61ca      	str	r2, [r1, #28]
    GCLK->PCHCTRL[GCM_ADC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    39ca:	2240      	movs	r2, #64	; 0x40
    39cc:	4916      	ldr	r1, [pc, #88]	; (3a28 <initADC+0x88>)
    39ce:	600a      	str	r2, [r1, #0]
    while ( (GCLK->PCHCTRL[GCM_ADC].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    39d0:	6808      	ldr	r0, [r1, #0]
    39d2:	4210      	tst	r0, r2
    39d4:	d0fc      	beq.n	39d0 <initADC+0x30>
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256;                    // Divide Clock by 256.
    39d6:	2207      	movs	r2, #7
    39d8:	705a      	strb	r2, [r3, #1]
    ADC->CTRLC.reg = ADC_CTRLC_RESSEL_10BIT;                        // 10 bits resolution as default
    39da:	3219      	adds	r2, #25
    39dc:	815a      	strh	r2, [r3, #10]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39de:	8c1a      	ldrh	r2, [r3, #32]
    39e0:	0552      	lsls	r2, r2, #21
    39e2:	d1fc      	bne.n	39de <initADC+0x3e>
  ADC->SAMPCTRL.reg = 0x3f;     // Set max Sampling Time Length
    39e4:	323f      	adds	r2, #63	; 0x3f
    39e6:	735a      	strb	r2, [r3, #13]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39e8:	8c1a      	ldrh	r2, [r3, #32]
    39ea:	0552      	lsls	r2, r2, #21
    39ec:	d1fc      	bne.n	39e8 <initADC+0x48>
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    39ee:	22c0      	movs	r2, #192	; 0xc0
    39f0:	0152      	lsls	r2, r2, #5
    39f2:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39f4:	8c1a      	ldrh	r2, [r3, #32]
    39f6:	0552      	lsls	r2, r2, #21
    39f8:	0d52      	lsrs	r2, r2, #21
    39fa:	d1fb      	bne.n	39f4 <initADC+0x54>
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    39fc:	731a      	strb	r2, [r3, #12]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39fe:	8c1a      	ldrh	r2, [r3, #32]
    3a00:	0552      	lsls	r2, r2, #21
    3a02:	d1fc      	bne.n	39fe <initADC+0x5e>
  ADCinitialized = 1;
    3a04:	4b09      	ldr	r3, [pc, #36]	; (3a2c <initADC+0x8c>)
    3a06:	3201      	adds	r2, #1
    3a08:	701a      	strb	r2, [r3, #0]
  if (!REFinitialized) {
    3a0a:	4b09      	ldr	r3, [pc, #36]	; (3a30 <initADC+0x90>)
    3a0c:	781b      	ldrb	r3, [r3, #0]
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d102      	bne.n	3a18 <initADC+0x78>
    analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    3a12:	2005      	movs	r0, #5
    3a14:	f7ff ff64 	bl	38e0 <analogReference>
}
    3a18:	bd10      	pop	{r4, pc}
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	00806020 	.word	0x00806020
    3a20:	43000c00 	.word	0x43000c00
    3a24:	40001400 	.word	0x40001400
    3a28:	400018f8 	.word	0x400018f8
    3a2c:	20000938 	.word	0x20000938
    3a30:	2000093a 	.word	0x2000093a

00003a34 <analogRead>:

uint32_t analogRead( uint32_t pin )
{
    3a34:	b510      	push	{r4, lr}
  uint32_t valueRead = 0;

  if (!ADCinitialized) {
    3a36:	4b1f      	ldr	r3, [pc, #124]	; (3ab4 <analogRead+0x80>)
{
    3a38:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    3a3a:	781b      	ldrb	r3, [r3, #0]
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d101      	bne.n	3a44 <analogRead+0x10>
    initADC();
    3a40:	f7ff ffae 	bl	39a0 <initADC>
    ADC = ADC0;
  }
#endif

  // pinPeripheral now handles disabling the DAC (if active)
  if ( pinPeripheral(pin, PIO_ANALOG_ADC) == RET_STATUS_OK )
    3a44:	2105      	movs	r1, #5
    3a46:	0020      	movs	r0, r4
    3a48:	f000 f8ac 	bl	3ba4 <pinPeripheral>
    3a4c:	0003      	movs	r3, r0
  uint32_t valueRead = 0;
    3a4e:	2000      	movs	r0, #0
  if ( pinPeripheral(pin, PIO_ANALOG_ADC) == RET_STATUS_OK )
    3a50:	4283      	cmp	r3, r0
    3a52:	d128      	bne.n	3aa6 <analogRead+0x72>
  {
    ADC->INPUTCTRL.bit.MUXPOS = GetADC(pin); // Selection for the positive ADC input
    3a54:	300c      	adds	r0, #12
    3a56:	4344      	muls	r4, r0
    3a58:	4817      	ldr	r0, [pc, #92]	; (3ab8 <analogRead+0x84>)
    3a5a:	4b18      	ldr	r3, [pc, #96]	; (3abc <analogRead+0x88>)
    3a5c:	1900      	adds	r0, r0, r4
    3a5e:	7a41      	ldrb	r1, [r0, #9]
    3a60:	201f      	movs	r0, #31
    3a62:	891a      	ldrh	r2, [r3, #8]
    3a64:	4001      	ands	r1, r0
    3a66:	4382      	bics	r2, r0
    3a68:	430a      	orrs	r2, r1
    3a6a:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a6c:	8c1a      	ldrh	r2, [r3, #32]
    3a6e:	0552      	lsls	r2, r2, #21
    3a70:	d1fc      	bne.n	3a6c <analogRead+0x38>

    syncADC();

    ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    3a72:	7819      	ldrb	r1, [r3, #0]
    3a74:	3202      	adds	r2, #2
    3a76:	430a      	orrs	r2, r1
    3a78:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a7a:	8c1a      	ldrh	r2, [r3, #32]
    3a7c:	0552      	lsls	r2, r2, #21
    3a7e:	d1fc      	bne.n	3a7a <analogRead+0x46>
    syncADC();

    // Start conversion
    ADC->SWTRIG.bit.START = 1;
    3a80:	7e19      	ldrb	r1, [r3, #24]
    3a82:	3202      	adds	r2, #2
    3a84:	430a      	orrs	r2, r1
    3a86:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a88:	8c1a      	ldrh	r2, [r3, #32]
    3a8a:	0552      	lsls	r2, r2, #21
    3a8c:	d1fc      	bne.n	3a88 <analogRead+0x54>
    syncADC();

    // Store the value
    while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    3a8e:	799a      	ldrb	r2, [r3, #6]
    3a90:	07d2      	lsls	r2, r2, #31
    3a92:	d5fc      	bpl.n	3a8e <analogRead+0x5a>
    valueRead = ADC->RESULT.reg;

    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a94:	2102      	movs	r1, #2
    valueRead = ADC->RESULT.reg;
    3a96:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a98:	781a      	ldrb	r2, [r3, #0]
    valueRead = ADC->RESULT.reg;
    3a9a:	b280      	uxth	r0, r0
    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a9c:	438a      	bics	r2, r1
    3a9e:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3aa0:	8c1a      	ldrh	r2, [r3, #32]
    3aa2:	0552      	lsls	r2, r2, #21
    3aa4:	d1fc      	bne.n	3aa0 <analogRead+0x6c>
    syncADC();
  }

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    3aa6:	4b06      	ldr	r3, [pc, #24]	; (3ac0 <analogRead+0x8c>)
    3aa8:	681a      	ldr	r2, [r3, #0]
    3aaa:	4b06      	ldr	r3, [pc, #24]	; (3ac4 <analogRead+0x90>)
    3aac:	6819      	ldr	r1, [r3, #0]
    3aae:	f7ff fee9 	bl	3884 <mapResolution>
}
    3ab2:	bd10      	pop	{r4, pc}
    3ab4:	20000938 	.word	0x20000938
    3ab8:	0000f2cc 	.word	0x0000f2cc
    3abc:	43000c00 	.word	0x43000c00
    3ac0:	20000040 	.word	0x20000040
    3ac4:	2000003c 	.word	0x2000003c

00003ac8 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    3ac8:	b510      	push	{r4, lr}
  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  pinPeripheral(ulPin, ulMode);
    3aca:	f000 f86b 	bl	3ba4 <pinPeripheral>
}
    3ace:	bd10      	pop	{r4, pc}

00003ad0 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    3ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t pinPort = GetPort(ulPin);
    3ad2:	220c      	movs	r2, #12
    3ad4:	4342      	muls	r2, r0
    3ad6:	4d25      	ldr	r5, [pc, #148]	; (3b6c <digitalWrite+0x9c>)
{
    3ad8:	9001      	str	r0, [sp, #4]
  uint8_t pinPort = GetPort(ulPin);
    3ada:	5d53      	ldrb	r3, [r2, r5]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3adc:	2b04      	cmp	r3, #4
    3ade:	d02f      	beq.n	3b40 <digitalWrite+0x70>
    3ae0:	2700      	movs	r7, #0
  uint8_t pinNum = GetPin(ulPin);
    3ae2:	18aa      	adds	r2, r5, r2

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
#endif

  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    3ae4:	7852      	ldrb	r2, [r2, #1]
    3ae6:	01db      	lsls	r3, r3, #7
    3ae8:	4e21      	ldr	r6, [pc, #132]	; (3b70 <digitalWrite+0xa0>)
    3aea:	18d4      	adds	r4, r2, r3
    3aec:	19a4      	adds	r4, r4, r6
    3aee:	7826      	ldrb	r6, [r4, #0]
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    3af0:	4c20      	ldr	r4, [pc, #128]	; (3b74 <digitalWrite+0xa4>)
  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    3af2:	b2f6      	uxtb	r6, r6
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    3af4:	591c      	ldr	r4, [r3, r4]
    3af6:	42bc      	cmp	r4, r7
    3af8:	d004      	beq.n	3b04 <digitalWrite+0x34>
    3afa:	3701      	adds	r7, #1
    3afc:	4097      	lsls	r7, r2
    3afe:	1e7c      	subs	r4, r7, #1
    3b00:	41a7      	sbcs	r7, r4
    3b02:	b2ff      	uxtb	r7, r7
  uint8_t pinOut = (PORT->Group[pinPort].OUT.reg && (1ul << pinNum));
    3b04:	4c1b      	ldr	r4, [pc, #108]	; (3b74 <digitalWrite+0xa4>)
    3b06:	191c      	adds	r4, r3, r4
    3b08:	6924      	ldr	r4, [r4, #16]
    3b0a:	46a4      	mov	ip, r4
    3b0c:	2400      	movs	r4, #0
    3b0e:	4660      	mov	r0, ip
    3b10:	42a0      	cmp	r0, r4
    3b12:	d004      	beq.n	3b1e <digitalWrite+0x4e>
    3b14:	3401      	adds	r4, #1
    3b16:	4094      	lsls	r4, r2
    3b18:	1e60      	subs	r0, r4, #1
    3b1a:	4184      	sbcs	r4, r0
    3b1c:	b2e4      	uxtb	r4, r4

  // Enable pull resistor if pin attributes allow and only if pin is not configured as output
  // Note that most pins should use PIN_ATTR_DIGITAL, which includes both PIN_ATTR_INPUT_PULLUP and PIN_ATTR_INPUT_PULLDOWN.
  if ( pinDir == 0 ) { // pin DIR is input
    3b1e:	2f00      	cmp	r7, #0
    3b20:	d117      	bne.n	3b52 <digitalWrite+0x82>
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    3b22:	9801      	ldr	r0, [sp, #4]
    3b24:	370c      	adds	r7, #12
    3b26:	4378      	muls	r0, r7
    3b28:	182d      	adds	r5, r5, r0
    3b2a:	6868      	ldr	r0, [r5, #4]
     if ( ulVal == HIGH )
    3b2c:	2901      	cmp	r1, #1
    3b2e:	d10d      	bne.n	3b4c <digitalWrite+0x7c>
     {
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    3b30:	2c01      	cmp	r4, #1
    3b32:	d106      	bne.n	3b42 <digitalWrite+0x72>
    3b34:	0741      	lsls	r1, r0, #29
    3b36:	d406      	bmi.n	3b46 <digitalWrite+0x76>
     else
     {
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
     }

     PORT->Group[pinPort].PINCFG[pinNum].reg = pinConfig ;
    3b38:	18d3      	adds	r3, r2, r3
    3b3a:	4a0d      	ldr	r2, [pc, #52]	; (3b70 <digitalWrite+0xa0>)
    3b3c:	189b      	adds	r3, r3, r2
    3b3e:	701e      	strb	r6, [r3, #0]
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    }
  }

  return ;
}
    3b40:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    3b42:	0701      	lsls	r1, r0, #28
    3b44:	d5f8      	bpl.n	3b38 <digitalWrite+0x68>
         pinConfig |= (uint8_t)(PORT_PINCFG_PULLEN) ;
    3b46:	2104      	movs	r1, #4
    3b48:	430e      	orrs	r6, r1
    3b4a:	e7f5      	b.n	3b38 <digitalWrite+0x68>
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
    3b4c:	2104      	movs	r1, #4
    3b4e:	438e      	bics	r6, r1
    3b50:	e7f2      	b.n	3b38 <digitalWrite+0x68>
    if ( ulVal == HIGH ) {
    3b52:	2901      	cmp	r1, #1
    3b54:	d104      	bne.n	3b60 <digitalWrite+0x90>
      PORT->Group[pinPort].OUTSET.reg = (1ul << pinNum) ;
    3b56:	4091      	lsls	r1, r2
    3b58:	4a06      	ldr	r2, [pc, #24]	; (3b74 <digitalWrite+0xa4>)
    3b5a:	189b      	adds	r3, r3, r2
    3b5c:	6199      	str	r1, [r3, #24]
    3b5e:	e7ef      	b.n	3b40 <digitalWrite+0x70>
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    3b60:	2101      	movs	r1, #1
    3b62:	4091      	lsls	r1, r2
    3b64:	4a03      	ldr	r2, [pc, #12]	; (3b74 <digitalWrite+0xa4>)
    3b66:	189b      	adds	r3, r3, r2
    3b68:	6159      	str	r1, [r3, #20]
    3b6a:	e7e9      	b.n	3b40 <digitalWrite+0x70>
    3b6c:	0000f2cc 	.word	0x0000f2cc
    3b70:	40002840 	.word	0x40002840
    3b74:	40002800 	.word	0x40002800

00003b78 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  uint8_t pinPort = GetPort(ulPin);
    3b78:	230c      	movs	r3, #12
    3b7a:	4358      	muls	r0, r3
    3b7c:	4907      	ldr	r1, [pc, #28]	; (3b9c <digitalRead+0x24>)
    3b7e:	2300      	movs	r3, #0
    3b80:	5c42      	ldrb	r2, [r0, r1]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3b82:	2a04      	cmp	r2, #4
    3b84:	d006      	beq.n	3b94 <digitalRead+0x1c>
  {
    return LOW ;
  }

  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    3b86:	4b06      	ldr	r3, [pc, #24]	; (3ba0 <digitalRead+0x28>)
    3b88:	01d2      	lsls	r2, r2, #7
    3b8a:	18d2      	adds	r2, r2, r3
  uint8_t pinNum = GetPin(ulPin);
    3b8c:	1809      	adds	r1, r1, r0
  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    3b8e:	6a13      	ldr	r3, [r2, #32]
    3b90:	784a      	ldrb	r2, [r1, #1]
    3b92:	40d3      	lsrs	r3, r2
    3b94:	2001      	movs	r0, #1
  {
    return HIGH ;
  }

  return LOW ;
}
    3b96:	4018      	ands	r0, r3
    3b98:	4770      	bx	lr
    3b9a:	46c0      	nop			; (mov r8, r8)
    3b9c:	0000f2cc 	.word	0x0000f2cc
    3ba0:	40002800 	.word	0x40002800

00003ba4 <pinPeripheral>:
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
#endif
}

int pinPeripheral( uint32_t ulPin, uint32_t ulPeripheral )
{
    3ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ba6:	0005      	movs	r5, r0
#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
  // Prevent out of bounds access
  if (ulPin >= NUM_PIN_DESCRIPTION_ENTRIES)
    3ba8:	2823      	cmp	r0, #35	; 0x23
    3baa:	d900      	bls.n	3bae <pinPeripheral+0xa>
    3bac:	e06b      	b.n	3c86 <pinPeripheral+0xe2>
  {
    return -1 ;
  }
#endif

  uint8_t pinPort = GetPort(ulPin);
    3bae:	230c      	movs	r3, #12
    3bb0:	4343      	muls	r3, r0
    3bb2:	4f7f      	ldr	r7, [pc, #508]	; (3db0 <pinPeripheral+0x20c>)
    3bb4:	5dda      	ldrb	r2, [r3, r7]
  uint8_t pinNum = GetPin(ulPin);
    3bb6:	18fb      	adds	r3, r7, r3
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    3bb8:	78d8      	ldrb	r0, [r3, #3]
  uint8_t pinNum = GetPin(ulPin);
    3bba:	785c      	ldrb	r4, [r3, #1]
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    3bbc:	9001      	str	r0, [sp, #4]

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint8_t pinType = g_APinDescription[ulPin].ulPinType;
    3bbe:	7898      	ldrb	r0, [r3, #2]
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    3bc0:	685b      	ldr	r3, [r3, #4]
#endif

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3bc2:	2a04      	cmp	r2, #4
    3bc4:	d05f      	beq.n	3c86 <pinPeripheral+0xe2>
  }

#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  // If pinType is not PIO_MULTI or PIO_STARTUP in the pinDescription table, then it must match ulPeripheral
  if ( pinType != PIO_MULTI && pinType != PIO_STARTUP && pinType != ulPeripheral )
    3bc6:	2619      	movs	r6, #25
    3bc8:	4276      	negs	r6, r6
    3bca:	46b4      	mov	ip, r6
    3bcc:	4484      	add	ip, r0
    3bce:	4666      	mov	r6, ip
    3bd0:	2e01      	cmp	r6, #1
    3bd2:	d901      	bls.n	3bd8 <pinPeripheral+0x34>
    3bd4:	4288      	cmp	r0, r1
    3bd6:	d156      	bne.n	3c86 <pinPeripheral+0xe2>
  {
    return -1 ;
  }

  // Make sure ulPeripheral is listed in pinAttribute
  if ( !(pinAttribute & (1UL << ulPeripheral)) && pinType != PIO_STARTUP )
    3bd8:	40cb      	lsrs	r3, r1
    3bda:	07db      	lsls	r3, r3, #31
    3bdc:	d401      	bmi.n	3be2 <pinPeripheral+0x3e>
    3bde:	281a      	cmp	r0, #26
    3be0:	d151      	bne.n	3c86 <pinPeripheral+0xe2>
#endif
#endif

  // Determine hardware peripheral to use
  EPioPeripheral peripheral = PER_PORT;
  switch ( ulPeripheral )
    3be2:	1f08      	subs	r0, r1, #4
    3be4:	2817      	cmp	r0, #23
    3be6:	d863      	bhi.n	3cb0 <pinPeripheral+0x10c>
    3be8:	f003 fff4 	bl	7bd4 <__gnu_thumb1_case_uqi>
    3bec:	64644736 	.word	0x64644736
    3bf0:	62626262 	.word	0x62626262
    3bf4:	0c5d5050 	.word	0x0c5d5050
    3bf8:	6262620c 	.word	0x6262620c
    3bfc:	90626262 	.word	0x90626262
    3c00:	4d624d92 	.word	0x4d624d92
    case PIO_CAN:
#endif
#if (SAMD51)
    case PIO_QSPI:
#endif
      peripheral = PER_COM;
    3c04:	2306      	movs	r3, #6
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
      //DAC->CTRLB.bit.EOEN = 0x00; // The DAC output is turned off.
      syncDAC();
    }
#elif (SAML21 || SAMD51)
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3c06:	2a00      	cmp	r2, #0
    3c08:	d100      	bne.n	3c0c <pinPeripheral+0x68>
    3c0a:	e08f      	b.n	3d2c <pinPeripheral+0x188>
      }
    }
#endif
  }

  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3c0c:	4d69      	ldr	r5, [pc, #420]	; (3db4 <pinPeripheral+0x210>)
    3c0e:	01d0      	lsls	r0, r2, #7
    3c10:	1820      	adds	r0, r4, r0
    3c12:	1940      	adds	r0, r0, r5
    3c14:	7805      	ldrb	r5, [r0, #0]
    3c16:	2004      	movs	r0, #4
    3c18:	4028      	ands	r0, r5

  // INEN should be enabled for both input and output (but not analog)
  if ( ulPeripheral != PIO_ANALOG_ADC && ulPeripheral != PIO_ANALOG_DAC && ulPeripheral != PIO_ANALOG_REF )
    3c1a:	1f4d      	subs	r5, r1, #5
    3c1c:	2d02      	cmp	r5, #2
    3c1e:	d901      	bls.n	3c24 <pinPeripheral+0x80>
  {
    pinCfg |= PORT_PINCFG_INEN;
    3c20:	2502      	movs	r5, #2
    3c22:	4328      	orrs	r0, r5
  }

  // Set pin drive strength (DRVSTR), which is used with PIO_OUTPUT and PIO_SERCOM (UART, SPI, and I2C)
  if ( (peripheralAttribute & PER_ATTR_DRIVE_MASK) == PER_ATTR_DRIVE_STRONG )
    3c24:	9d01      	ldr	r5, [sp, #4]
    3c26:	072d      	lsls	r5, r5, #28
    3c28:	d501      	bpl.n	3c2e <pinPeripheral+0x8a>
  {
    pinCfg |= PORT_PINCFG_DRVSTR;
    3c2a:	2540      	movs	r5, #64	; 0x40
    3c2c:	4328      	orrs	r0, r5
  __ASM volatile ("cpsid i" : : : "memory");
    3c2e:	b672      	cpsid	i
    3c30:	01d2      	lsls	r2, r2, #7
  }

  noInterrupts(); // Avoid possible invalid interim pin state

  if ( ulPeripheral == PIO_INPUT || ulPeripheral == PIO_STARTUP )
    3c32:	2900      	cmp	r1, #0
    3c34:	d001      	beq.n	3c3a <pinPeripheral+0x96>
    3c36:	291a      	cmp	r1, #26
    3c38:	d13e      	bne.n	3cb8 <pinPeripheral+0x114>
  {
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    3c3a:	2301      	movs	r3, #1
    3c3c:	40a3      	lsls	r3, r4
    3c3e:	495e      	ldr	r1, [pc, #376]	; (3db8 <pinPeripheral+0x214>)
    3c40:	1851      	adds	r1, r2, r1
    3c42:	604b      	str	r3, [r1, #4]
    PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;	// set default pull direction to pullup (will not be enabled)
    3c44:	618b      	str	r3, [r1, #24]
    pinCfg |= PORT_PINCFG_PULLEN;
  }
  else if ( ulPeripheral == PIO_OUTPUT )
  {
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    pinCfg &= ~PORT_PINCFG_PULLEN;      // Disable pull resistor
    3c46:	2304      	movs	r3, #4
    3c48:	4398      	bics	r0, r3

    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
  }

  // Set pin drive strength, enable/disable pull resistor, enable/disable INEN, and enable/disable the peripheral mux
  PORT->Group[pinPort].PINCFG[pinNum].reg = (uint8_t)pinCfg ;
    3c4a:	4b5a      	ldr	r3, [pc, #360]	; (3db4 <pinPeripheral+0x210>)
    3c4c:	18a2      	adds	r2, r4, r2
    3c4e:	18d2      	adds	r2, r2, r3
    3c50:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    3c52:	b662      	cpsie	i

  interrupts();
  return 0l ;
    3c54:	2000      	movs	r0, #0
}
    3c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ( GetExtInt(ulPin) == NOT_AN_INTERRUPT )
    3c58:	230c      	movs	r3, #12
    3c5a:	435d      	muls	r5, r3
    3c5c:	197f      	adds	r7, r7, r5
    3c5e:	7abb      	ldrb	r3, [r7, #10]
    3c60:	2b12      	cmp	r3, #18
    3c62:	d010      	beq.n	3c86 <pinPeripheral+0xe2>
      peripheral = PER_EXTINT;
    3c64:	2300      	movs	r3, #0
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3c66:	2a00      	cmp	r2, #0
    3c68:	d060      	beq.n	3d2c <pinPeripheral+0x188>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3c6a:	4d52      	ldr	r5, [pc, #328]	; (3db4 <pinPeripheral+0x210>)
    3c6c:	01d0      	lsls	r0, r2, #7
    3c6e:	1820      	adds	r0, r4, r0
    3c70:	1940      	adds	r0, r0, r5
    3c72:	7805      	ldrb	r5, [r0, #0]
    3c74:	2004      	movs	r0, #4
    3c76:	4028      	ands	r0, r5
    3c78:	e7d2      	b.n	3c20 <pinPeripheral+0x7c>
      if ( GetADC(ulPin) == No_ADC_Channel )
    3c7a:	230c      	movs	r3, #12
    3c7c:	435d      	muls	r5, r3
    3c7e:	197f      	adds	r7, r7, r5
    3c80:	7a7b      	ldrb	r3, [r7, #9]
    3c82:	2b16      	cmp	r3, #22
    3c84:	d14f      	bne.n	3d26 <pinPeripheral+0x182>
    return -1 ;
    3c86:	2001      	movs	r0, #1
    3c88:	4240      	negs	r0, r0
    3c8a:	e7e4      	b.n	3c56 <pinPeripheral+0xb2>
      if ( g_APinDescription[ulPin].ulTCChannel == NOT_ON_TIMER )
    3c8c:	230c      	movs	r3, #12
    3c8e:	435d      	muls	r5, r3
    3c90:	197f      	adds	r7, r7, r5
    3c92:	7a3b      	ldrb	r3, [r7, #8]
    3c94:	2b80      	cmp	r3, #128	; 0x80
    3c96:	d0f6      	beq.n	3c86 <pinPeripheral+0xe2>
      if ( (peripheralAttribute & PER_ATTR_TIMER_MASK) == PER_ATTR_TIMER_STD )
    3c98:	2306      	movs	r3, #6
    3c9a:	9801      	ldr	r0, [sp, #4]
    3c9c:	4003      	ands	r3, r0
        peripheral = PER_TIMER_ALT;
    3c9e:	1e58      	subs	r0, r3, #1
    3ca0:	4183      	sbcs	r3, r0
    3ca2:	3304      	adds	r3, #4
    3ca4:	e7af      	b.n	3c06 <pinPeripheral+0x62>
        peripheral = PER_SERCOM_ALT;
    3ca6:	2301      	movs	r3, #1
    3ca8:	9801      	ldr	r0, [sp, #4]
    3caa:	4003      	ands	r3, r0
    3cac:	3302      	adds	r3, #2
    3cae:	e7da      	b.n	3c66 <pinPeripheral+0xc2>
  EPioPeripheral peripheral = PER_PORT;
    3cb0:	2309      	movs	r3, #9
    3cb2:	e7a8      	b.n	3c06 <pinPeripheral+0x62>
      peripheral = PER_ANALOG;
    3cb4:	2301      	movs	r3, #1
    3cb6:	e7a6      	b.n	3c06 <pinPeripheral+0x62>
  else if ( ulPeripheral == PIO_INPUT_PULLUP || ulPeripheral == PIO_INPUT_PULLDOWN )
    3cb8:	1e8d      	subs	r5, r1, #2
    3cba:	2d01      	cmp	r5, #1
    3cbc:	d80c      	bhi.n	3cd8 <pinPeripheral+0x134>
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    3cbe:	2301      	movs	r3, #1
    3cc0:	40a3      	lsls	r3, r4
    3cc2:	4d3d      	ldr	r5, [pc, #244]	; (3db8 <pinPeripheral+0x214>)
    3cc4:	1955      	adds	r5, r2, r5
    3cc6:	606b      	str	r3, [r5, #4]
    if ( ulPeripheral == PIO_INPUT_PULLDOWN ) {
    3cc8:	2903      	cmp	r1, #3
    3cca:	d103      	bne.n	3cd4 <pinPeripheral+0x130>
      PORT->Group[pinPort].OUTCLR.reg = (uint32_t)(1<<pinNum) ;
    3ccc:	616b      	str	r3, [r5, #20]
    pinCfg |= PORT_PINCFG_PULLEN;
    3cce:	2304      	movs	r3, #4
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    3cd0:	4318      	orrs	r0, r3
    3cd2:	e7ba      	b.n	3c4a <pinPeripheral+0xa6>
      PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;
    3cd4:	61ab      	str	r3, [r5, #24]
    3cd6:	e7fa      	b.n	3cce <pinPeripheral+0x12a>
  else if ( ulPeripheral == PIO_OUTPUT )
    3cd8:	2901      	cmp	r1, #1
    3cda:	d104      	bne.n	3ce6 <pinPeripheral+0x142>
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    3cdc:	40a1      	lsls	r1, r4
    3cde:	4b36      	ldr	r3, [pc, #216]	; (3db8 <pinPeripheral+0x214>)
    3ce0:	18d3      	adds	r3, r2, r3
    3ce2:	6099      	str	r1, [r3, #8]
    3ce4:	e7af      	b.n	3c46 <pinPeripheral+0xa2>
    3ce6:	0861      	lsrs	r1, r4, #1
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3ce8:	4d34      	ldr	r5, [pc, #208]	; (3dbc <pinPeripheral+0x218>)
    3cea:	1851      	adds	r1, r2, r1
    3cec:	1949      	adds	r1, r1, r5
    if ( pinNum & 1 ) // is pin odd?
    3cee:	07e5      	lsls	r5, r4, #31
    3cf0:	d508      	bpl.n	3d04 <pinPeripheral+0x160>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    3cf2:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3cf4:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    3cf6:	011b      	lsls	r3, r3, #4
    3cf8:	4035      	ands	r5, r6
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3cfa:	432b      	orrs	r3, r5
    3cfc:	b2db      	uxtb	r3, r3
    3cfe:	700b      	strb	r3, [r1, #0]
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    3d00:	2301      	movs	r3, #1
    3d02:	e7e5      	b.n	3cd0 <pinPeripheral+0x12c>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3d04:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    3d06:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3d08:	43b5      	bics	r5, r6
    3d0a:	e7f6      	b.n	3cfa <pinPeripheral+0x156>
      peripheral = PER_AC_CLK;
    3d0c:	2307      	movs	r3, #7
    3d0e:	e7aa      	b.n	3c66 <pinPeripheral+0xc2>
      peripheral = PER_CCL;
    3d10:	2308      	movs	r3, #8
    3d12:	e7a8      	b.n	3c66 <pinPeripheral+0xc2>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3d14:	4827      	ldr	r0, [pc, #156]	; (3db4 <pinPeripheral+0x210>)
    3d16:	01d3      	lsls	r3, r2, #7
    3d18:	18e3      	adds	r3, r4, r3
    3d1a:	181b      	adds	r3, r3, r0
    3d1c:	7818      	ldrb	r0, [r3, #0]
    3d1e:	2304      	movs	r3, #4
    3d20:	4018      	ands	r0, r3
      peripheral = PER_ANALOG;
    3d22:	3b03      	subs	r3, #3
    3d24:	e77e      	b.n	3c24 <pinPeripheral+0x80>
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3d26:	2a00      	cmp	r2, #0
    3d28:	d1f4      	bne.n	3d14 <pinPeripheral+0x170>
      peripheral = PER_ANALOG;
    3d2a:	2301      	movs	r3, #1
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3d2c:	2c02      	cmp	r4, #2
    3d2e:	d002      	beq.n	3d36 <pinPeripheral+0x192>
    3d30:	2c05      	cmp	r4, #5
    3d32:	d000      	beq.n	3d36 <pinPeripheral+0x192>
    3d34:	e76a      	b.n	3c0c <pinPeripheral+0x68>
    3d36:	2906      	cmp	r1, #6
    3d38:	d100      	bne.n	3d3c <pinPeripheral+0x198>
    3d3a:	e767      	b.n	3c0c <pinPeripheral+0x68>
    if ( (pinPort == 0) && (pinNum == 5) ) {
    3d3c:	1f65      	subs	r5, r4, #5
    3d3e:	4268      	negs	r0, r5
    3d40:	4145      	adcs	r5, r0
    if (dacEnabled[DACNumber]) {
    3d42:	481f      	ldr	r0, [pc, #124]	; (3dc0 <pinPeripheral+0x21c>)
    3d44:	5d47      	ldrb	r7, [r0, r5]
    3d46:	2f00      	cmp	r7, #0
    3d48:	d100      	bne.n	3d4c <pinPeripheral+0x1a8>
    3d4a:	e75f      	b.n	3c0c <pinPeripheral+0x68>
      dacEnabled[DACNumber] = false;
    3d4c:	2700      	movs	r7, #0
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    3d4e:	2602      	movs	r6, #2
      dacEnabled[DACNumber] = false;
    3d50:	5547      	strb	r7, [r0, r5]
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    3d52:	481c      	ldr	r0, [pc, #112]	; (3dc4 <pinPeripheral+0x220>)
    3d54:	7807      	ldrb	r7, [r0, #0]
    3d56:	43b7      	bics	r7, r6
    3d58:	7007      	strb	r7, [r0, #0]
  // VARIANT_MCK / 1000000 == cycles needed to delay 1uS
  //                     3 == cycles used in a loop
  // Divide by 3 before multiplication with usec, so that the maximum usable usec value
  // with the D51 @ 120MHz is at least what it was when multipling by usec first at 48MHz.
  uint32_t n = usec * ((VARIANT_MCK / 1000000) / 3);
  __asm__ __volatile__(
    3d5a:	27a0      	movs	r7, #160	; 0xa0
    3d5c:	00bf      	lsls	r7, r7, #2
    3d5e:	3f01      	subs	r7, #1
    3d60:	d1fd      	bne.n	3d5e <pinPeripheral+0x1ba>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3d62:	273f      	movs	r7, #63	; 0x3f
    3d64:	6886      	ldr	r6, [r0, #8]
    3d66:	423e      	tst	r6, r7
    3d68:	d1fc      	bne.n	3d64 <pinPeripheral+0x1c0>
      DAC->DACCTRL[DACNumber].bit.ENABLE = 0x00; // The DACx output is turned off.
    3d6a:	4e16      	ldr	r6, [pc, #88]	; (3dc4 <pinPeripheral+0x220>)
    3d6c:	1d2f      	adds	r7, r5, #4
    3d6e:	46b4      	mov	ip, r6
    3d70:	007f      	lsls	r7, r7, #1
    3d72:	44bc      	add	ip, r7
    3d74:	4666      	mov	r6, ip
    3d76:	88b7      	ldrh	r7, [r6, #4]
    3d78:	2602      	movs	r6, #2
    3d7a:	43b7      	bics	r7, r6
    3d7c:	4666      	mov	r6, ip
    3d7e:	80b7      	strh	r7, [r6, #4]
      if (dacEnabled[0] || dacEnabled[1]) {
    3d80:	4f0f      	ldr	r7, [pc, #60]	; (3dc0 <pinPeripheral+0x21c>)
    3d82:	783e      	ldrb	r6, [r7, #0]
    3d84:	2e00      	cmp	r6, #0
    3d86:	d103      	bne.n	3d90 <pinPeripheral+0x1ec>
    3d88:	787f      	ldrb	r7, [r7, #1]
    3d8a:	2f00      	cmp	r7, #0
    3d8c:	d100      	bne.n	3d90 <pinPeripheral+0x1ec>
    3d8e:	e73d      	b.n	3c0c <pinPeripheral+0x68>
        DAC->CTRLA.bit.ENABLE = 0x01;     // Enable DAC controller, so that the other DAC can function
    3d90:	2702      	movs	r7, #2
    3d92:	7806      	ldrb	r6, [r0, #0]
    3d94:	4337      	orrs	r7, r6
    3d96:	7007      	strb	r7, [r0, #0]
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3d98:	273f      	movs	r7, #63	; 0x3f
    3d9a:	6886      	ldr	r6, [r0, #8]
    3d9c:	423e      	tst	r6, r7
    3d9e:	d1fc      	bne.n	3d9a <pinPeripheral+0x1f6>
        while ( (DAC->STATUS.reg & (1 << (1 - DACNumber))) == 0 );   // Must wait for DACx to start
    3da0:	2701      	movs	r7, #1
    3da2:	1b7d      	subs	r5, r7, r5
    3da4:	40af      	lsls	r7, r5
    3da6:	79c5      	ldrb	r5, [r0, #7]
    3da8:	422f      	tst	r7, r5
    3daa:	d0fc      	beq.n	3da6 <pinPeripheral+0x202>
    3dac:	e72e      	b.n	3c0c <pinPeripheral+0x68>
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	0000f2cc 	.word	0x0000f2cc
    3db4:	40002840 	.word	0x40002840
    3db8:	40002800 	.word	0x40002800
    3dbc:	40002830 	.word	0x40002830
    3dc0:	2000093b 	.word	0x2000093b
    3dc4:	42003000 	.word	0x42003000

00003dc8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
    3dc8:	4770      	bx	lr

00003dca <_ZN11DHT_Unified8HumidityD1Ev>:
    DHT_Unified* _parent;
    int32_t _id;

  };

  class Humidity : public Adafruit_Sensor {
    3dca:	4770      	bx	lr

00003dcc <_ZN11DHT_Unified11TemperatureD1Ev>:
  class Temperature : public Adafruit_Sensor {
    3dcc:	4770      	bx	lr

00003dce <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
DHT_Unified::Temperature::Temperature(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    3dce:	b570      	push	{r4, r5, r6, lr}
    3dd0:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3dd2:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    3dd4:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    3dd6:	0032      	movs	r2, r6
    3dd8:	2100      	movs	r1, #0
    3dda:	0020      	movs	r0, r4
    3ddc:	f007 f85f 	bl	ae9e <memset>
  // Populate sensor reading values.
  event->version     = sizeof(sensors_event_t);
  event->sensor_id   = _id;
    3de0:	68eb      	ldr	r3, [r5, #12]
  event->version     = sizeof(sensors_event_t);
    3de2:	6026      	str	r6, [r4, #0]
  event->sensor_id   = _id;
    3de4:	6063      	str	r3, [r4, #4]
  event->type        = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3de6:	230d      	movs	r3, #13
    3de8:	60a3      	str	r3, [r4, #8]
  event->timestamp   = millis();
    3dea:	f7fe fc3b 	bl	2664 <millis>
  event->temperature = _parent->_dht.readTemperature();
    3dee:	2200      	movs	r2, #0
  event->timestamp   = millis();
    3df0:	6120      	str	r0, [r4, #16]
  event->temperature = _parent->_dht.readTemperature();
    3df2:	0011      	movs	r1, r2
    3df4:	68a8      	ldr	r0, [r5, #8]
    3df6:	f001 fd91 	bl	591c <_ZN3DHT15readTemperatureEbb>
    3dfa:	6160      	str	r0, [r4, #20]
  
  return true;
}
    3dfc:	2001      	movs	r0, #1
    3dfe:	bd70      	pop	{r4, r5, r6, pc}

00003e00 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
DHT_Unified::Humidity::Humidity(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    3e00:	b570      	push	{r4, r5, r6, lr}
    3e02:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3e04:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    3e06:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    3e08:	0032      	movs	r2, r6
    3e0a:	2100      	movs	r1, #0
    3e0c:	0020      	movs	r0, r4
    3e0e:	f007 f846 	bl	ae9e <memset>
  // Populate sensor reading values.
  event->version           = sizeof(sensors_event_t);
  event->sensor_id         = _id;
    3e12:	68eb      	ldr	r3, [r5, #12]
  event->version           = sizeof(sensors_event_t);
    3e14:	6026      	str	r6, [r4, #0]
  event->sensor_id         = _id;
    3e16:	6063      	str	r3, [r4, #4]
  event->type              = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3e18:	230c      	movs	r3, #12
    3e1a:	60a3      	str	r3, [r4, #8]
  event->timestamp         = millis();
    3e1c:	f7fe fc22 	bl	2664 <millis>
  event->relative_humidity = _parent->_dht.readHumidity();
    3e20:	2100      	movs	r1, #0
  event->timestamp         = millis();
    3e22:	6120      	str	r0, [r4, #16]
  event->relative_humidity = _parent->_dht.readHumidity();
    3e24:	68a8      	ldr	r0, [r5, #8]
    3e26:	f001 fdc9 	bl	59bc <_ZN3DHT12readHumidityEb>
    3e2a:	6160      	str	r0, [r4, #20]
  
  return true;
}
    3e2c:	2001      	movs	r0, #1
    3e2e:	bd70      	pop	{r4, r5, r6, pc}

00003e30 <_ZN11DHT_Unified8HumidityD0Ev>:
  class Humidity : public Adafruit_Sensor {
    3e30:	b510      	push	{r4, lr}
    3e32:	0004      	movs	r4, r0
    3e34:	f000 feb0 	bl	4b98 <_ZdlPv>
    3e38:	0020      	movs	r0, r4
    3e3a:	bd10      	pop	{r4, pc}

00003e3c <_ZN11DHT_Unified11TemperatureD0Ev>:
  class Temperature : public Adafruit_Sensor {
    3e3c:	b510      	push	{r4, lr}
    3e3e:	0004      	movs	r4, r0
    3e40:	f000 feaa 	bl	4b98 <_ZdlPv>
    3e44:	0020      	movs	r0, r4
    3e46:	bd10      	pop	{r4, pc}

00003e48 <_ZN11DHT_UnifiedC1Ehhhll>:
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count, int32_t tempSensorId, int32_t humiditySensorId):
    3e48:	b570      	push	{r4, r5, r6, lr}
    3e4a:	0004      	movs	r4, r0
    3e4c:	0015      	movs	r5, r2
  _humidity(this, humiditySensorId)
    3e4e:	f001 fcad 	bl	57ac <_ZN3DHTC1Ehhh>
  _id(id)
    3e52:	4b07      	ldr	r3, [pc, #28]	; (3e70 <_ZN11DHT_UnifiedC1Ehhhll+0x28>)
  _humidity(this, humiditySensorId)
    3e54:	7525      	strb	r5, [r4, #20]
  _id(id)
    3e56:	3308      	adds	r3, #8
    3e58:	61a3      	str	r3, [r4, #24]
    3e5a:	9b04      	ldr	r3, [sp, #16]
{}
    3e5c:	0020      	movs	r0, r4
  _id(id)
    3e5e:	6263      	str	r3, [r4, #36]	; 0x24
  _id(id)
    3e60:	4b04      	ldr	r3, [pc, #16]	; (3e74 <_ZN11DHT_UnifiedC1Ehhhll+0x2c>)
  _id(id)
    3e62:	6224      	str	r4, [r4, #32]
  _id(id)
    3e64:	3308      	adds	r3, #8
    3e66:	62a3      	str	r3, [r4, #40]	; 0x28
    3e68:	9b05      	ldr	r3, [sp, #20]
    3e6a:	6324      	str	r4, [r4, #48]	; 0x30
    3e6c:	6363      	str	r3, [r4, #52]	; 0x34
{}
    3e6e:	bd70      	pop	{r4, r5, r6, pc}
    3e70:	0000f0e0 	.word	0x0000f0e0
    3e74:	0000f0fc 	.word	0x0000f0fc

00003e78 <_ZN11DHT_Unified5beginEv>:
void DHT_Unified::begin() {
    3e78:	b510      	push	{r4, lr}
  _dht.begin();
    3e7a:	f001 fcab 	bl	57d4 <_ZN3DHT5beginEv>
}
    3e7e:	bd10      	pop	{r4, pc}

00003e80 <_ZN11DHT_Unified7setNameEP8sensor_t>:
void DHT_Unified::setName(sensor_t* sensor) {
    3e80:	b510      	push	{r4, lr}
  switch(_type) {
    3e82:	7d02      	ldrb	r2, [r0, #20]
void DHT_Unified::setName(sensor_t* sensor) {
    3e84:	000c      	movs	r4, r1
  switch(_type) {
    3e86:	2a15      	cmp	r2, #21
    3e88:	d007      	beq.n	3e9a <_ZN11DHT_Unified7setNameEP8sensor_t+0x1a>
    3e8a:	2a16      	cmp	r2, #22
    3e8c:	d00d      	beq.n	3eaa <_ZN11DHT_Unified7setNameEP8sensor_t+0x2a>
      strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    3e8e:	4908      	ldr	r1, [pc, #32]	; (3eb0 <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>)
  switch(_type) {
    3e90:	2a0b      	cmp	r2, #11
    3e92:	d004      	beq.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    3e94:	220b      	movs	r2, #11
    3e96:	4907      	ldr	r1, [pc, #28]	; (3eb4 <_ZN11DHT_Unified7setNameEP8sensor_t+0x34>)
    3e98:	e001      	b.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    3e9a:	220b      	movs	r2, #11
    3e9c:	4906      	ldr	r1, [pc, #24]	; (3eb8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x38>)
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    3e9e:	0020      	movs	r0, r4
    3ea0:	f008 f92d 	bl	c0fe <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
    3ea4:	2300      	movs	r3, #0
    3ea6:	72e3      	strb	r3, [r4, #11]
}
    3ea8:	bd10      	pop	{r4, pc}
      strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    3eaa:	220b      	movs	r2, #11
    3eac:	4903      	ldr	r1, [pc, #12]	; (3ebc <_ZN11DHT_Unified7setNameEP8sensor_t+0x3c>)
    3eae:	e7f6      	b.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
    3eb0:	0000f0c8 	.word	0x0000f0c8
    3eb4:	0000f0da 	.word	0x0000f0da
    3eb8:	0000f0ce 	.word	0x0000f0ce
    3ebc:	0000f0d4 	.word	0x0000f0d4

00003ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
  switch(_type) {
    3ec0:	7d03      	ldrb	r3, [r0, #20]
    3ec2:	2b15      	cmp	r3, #21
    3ec4:	d006      	beq.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    3ec6:	2b16      	cmp	r3, #22
    3ec8:	d004      	beq.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    3eca:	2b0b      	cmp	r3, #11
    3ecc:	d102      	bne.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
      sensor->min_delay = 1000000L;  // 1 second (in microseconds)
    3ece:	4b02      	ldr	r3, [pc, #8]	; (3ed8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x18>)
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    3ed0:	624b      	str	r3, [r1, #36]	; 0x24
}
    3ed2:	4770      	bx	lr
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    3ed4:	4b01      	ldr	r3, [pc, #4]	; (3edc <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>)
    3ed6:	e7fb      	b.n	3ed0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x10>
    3ed8:	000f4240 	.word	0x000f4240
    3edc:	001e8480 	.word	0x001e8480

00003ee0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:
void DHT_Unified::Temperature::getSensor(sensor_t* sensor) {
    3ee0:	b570      	push	{r4, r5, r6, lr}
    3ee2:	000c      	movs	r4, r1
    3ee4:	0005      	movs	r5, r0
  memset(sensor, 0, sizeof(sensor_t));
    3ee6:	2228      	movs	r2, #40	; 0x28
    3ee8:	2100      	movs	r1, #0
    3eea:	0020      	movs	r0, r4
    3eec:	f006 ffd7 	bl	ae9e <memset>
  _parent->setName(sensor);
    3ef0:	0021      	movs	r1, r4
    3ef2:	68a8      	ldr	r0, [r5, #8]
    3ef4:	f7ff ffc4 	bl	3e80 <_ZN11DHT_Unified7setNameEP8sensor_t>
  sensor->version         = DHT_SENSOR_VERSION;
    3ef8:	2301      	movs	r3, #1
    3efa:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    3efc:	68eb      	ldr	r3, [r5, #12]
  _parent->setMinDelay(sensor);
    3efe:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    3f00:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3f02:	230d      	movs	r3, #13
  _parent->setMinDelay(sensor);
    3f04:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3f06:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    3f08:	f7ff ffda 	bl	3ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    3f0c:	68ab      	ldr	r3, [r5, #8]
    3f0e:	7d1a      	ldrb	r2, [r3, #20]
    3f10:	2a15      	cmp	r2, #21
    3f12:	d00b      	beq.n	3f2c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4c>
    3f14:	2a16      	cmp	r2, #22
    3f16:	d00f      	beq.n	3f38 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x58>
    3f18:	2300      	movs	r3, #0
    3f1a:	2a0b      	cmp	r2, #11
    3f1c:	d10e      	bne.n	3f3c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x5c>
      sensor->min_value   = 0.0F;
    3f1e:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 2.0F;
    3f20:	2380      	movs	r3, #128	; 0x80
      sensor->max_value   = 50.0F;
    3f22:	4a08      	ldr	r2, [pc, #32]	; (3f44 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x64>)
      sensor->resolution  = 2.0F;
    3f24:	05db      	lsls	r3, r3, #23
      sensor->max_value   = 50.0F;
    3f26:	61a2      	str	r2, [r4, #24]
      sensor->resolution  = 0.0F;
    3f28:	6223      	str	r3, [r4, #32]
}
    3f2a:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 80.0F;
    3f2c:	4b06      	ldr	r3, [pc, #24]	; (3f48 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x68>)
      sensor->max_value   = 125.0F;
    3f2e:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = -40.0F;
    3f30:	4b06      	ldr	r3, [pc, #24]	; (3f4c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6c>)
    3f32:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    3f34:	4b06      	ldr	r3, [pc, #24]	; (3f50 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>)
    3f36:	e7f7      	b.n	3f28 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
      sensor->max_value   = 125.0F;
    3f38:	4b06      	ldr	r3, [pc, #24]	; (3f54 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x74>)
    3f3a:	e7f8      	b.n	3f2e <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4e>
      sensor->max_value   = 0.0F;
    3f3c:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3f3e:	61e3      	str	r3, [r4, #28]
    3f40:	e7f2      	b.n	3f28 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	42480000 	.word	0x42480000
    3f48:	42a00000 	.word	0x42a00000
    3f4c:	c2200000 	.word	0xc2200000
    3f50:	3dcccccd 	.word	0x3dcccccd
    3f54:	42fa0000 	.word	0x42fa0000

00003f58 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

void DHT_Unified::Humidity::getSensor(sensor_t* sensor) {
    3f58:	b570      	push	{r4, r5, r6, lr}
    3f5a:	000c      	movs	r4, r1
    3f5c:	0005      	movs	r5, r0
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    3f5e:	2228      	movs	r2, #40	; 0x28
    3f60:	2100      	movs	r1, #0
    3f62:	0020      	movs	r0, r4
    3f64:	f006 ff9b 	bl	ae9e <memset>
  // Set sensor name.
  _parent->setName(sensor);
    3f68:	0021      	movs	r1, r4
    3f6a:	68a8      	ldr	r0, [r5, #8]
    3f6c:	f7ff ff88 	bl	3e80 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version         = DHT_SENSOR_VERSION;
    3f70:	2301      	movs	r3, #1
    3f72:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    3f74:	68eb      	ldr	r3, [r5, #12]
  // Set type and characteristics.
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
    3f76:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    3f78:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3f7a:	230c      	movs	r3, #12
  _parent->setMinDelay(sensor);
    3f7c:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3f7e:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    3f80:	f7ff ff9e 	bl	3ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    3f84:	68ab      	ldr	r3, [r5, #8]
    3f86:	7d1b      	ldrb	r3, [r3, #20]
    3f88:	2b15      	cmp	r3, #21
    3f8a:	d00a      	beq.n	3fa2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    3f8c:	2b16      	cmp	r3, #22
    3f8e:	d008      	beq.n	3fa2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    3f90:	2b0b      	cmp	r3, #11
    3f92:	d10c      	bne.n	3fae <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x56>
    case DHT11:
      sensor->max_value   = 80.0F;
    3f94:	4b08      	ldr	r3, [pc, #32]	; (3fb8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x60>)
    3f96:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 20.0F;
    3f98:	4b08      	ldr	r3, [pc, #32]	; (3fbc <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x64>)
    3f9a:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 5.0F;
    3f9c:	4b08      	ldr	r3, [pc, #32]	; (3fc0 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x68>)
      break;
    default:
      // Unknown type, default to 0.
      sensor->max_value   = 0.0F;
      sensor->min_value   = 0.0F;
      sensor->resolution  = 0.0F;
    3f9e:	6223      	str	r3, [r4, #32]
      break;
  }
}
    3fa0:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 100.0F;
    3fa2:	4b08      	ldr	r3, [pc, #32]	; (3fc4 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6c>)
    3fa4:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3fa6:	2300      	movs	r3, #0
    3fa8:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    3faa:	4b07      	ldr	r3, [pc, #28]	; (3fc8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x70>)
    3fac:	e7f7      	b.n	3f9e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
      sensor->max_value   = 0.0F;
    3fae:	2300      	movs	r3, #0
    3fb0:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3fb2:	61e3      	str	r3, [r4, #28]
    3fb4:	e7f3      	b.n	3f9e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	42a00000 	.word	0x42a00000
    3fbc:	41a00000 	.word	0x41a00000
    3fc0:	40a00000 	.word	0x40a00000
    3fc4:	42c80000 	.word	0x42c80000
    3fc8:	3dcccccd 	.word	0x3dcccccd

00003fcc <_ZN17RunningStatistics13setWindowSecsEf>:
RunningStatistics::RunningStatistics() {
  setWindowSecs( 1 );   // setup with one second average
  setInitialValue( 0 ); // start with zero
}

void RunningStatistics::setWindowSecs( float windowSecs ) {
    3fcc:	b510      	push	{r4, lr}
    3fce:	0004      	movs	r4, r0
  AverageSecs = windowSecs;
    3fd0:	c002      	stmia	r0!, {r1}
  
  averageValue.setRiseTime( AverageSecs );
    3fd2:	f001 fe07 	bl	5be4 <_ZN20FilterOnePoleCascade11setRiseTimeEf>
  averageSquareValue.setRiseTime( AverageSecs );
    3fd6:	0020      	movs	r0, r4
    3fd8:	6821      	ldr	r1, [r4, #0]
    3fda:	3044      	adds	r0, #68	; 0x44
    3fdc:	f001 fe02 	bl	5be4 <_ZN20FilterOnePoleCascade11setRiseTimeEf>
}
    3fe0:	bd10      	pop	{r4, pc}

00003fe2 <_ZN17RunningStatistics15setInitialValueEff>:

void RunningStatistics::setInitialValue( float initialMean, float initialSigma ) {
    3fe2:	b570      	push	{r4, r5, r6, lr}
    3fe4:	1c0d      	adds	r5, r1, #0
    3fe6:	0004      	movs	r4, r0
  averageValue.setToNewValue( initialMean );
    3fe8:	3004      	adds	r0, #4
void RunningStatistics::setInitialValue( float initialMean, float initialSigma ) {
    3fea:	1c16      	adds	r6, r2, #0
  averageValue.setToNewValue( initialMean );
    3fec:	f001 fe17 	bl	5c1e <_ZN20FilterOnePoleCascade13setToNewValueEf>
  averageSquareValue.setToNewValue( sq(initialMean) + sq(initialSigma ) );
    3ff0:	1c29      	adds	r1, r5, #0
    3ff2:	1c28      	adds	r0, r5, #0
    3ff4:	f004 fb9e 	bl	8734 <__aeabi_fmul>
    3ff8:	1c31      	adds	r1, r6, #0
    3ffa:	1c05      	adds	r5, r0, #0
    3ffc:	1c30      	adds	r0, r6, #0
    3ffe:	f004 fb99 	bl	8734 <__aeabi_fmul>
    4002:	1c01      	adds	r1, r0, #0
    4004:	1c28      	adds	r0, r5, #0
    4006:	f004 f813 	bl	8030 <__aeabi_fadd>
    400a:	1c01      	adds	r1, r0, #0
    400c:	0020      	movs	r0, r4
    400e:	3044      	adds	r0, #68	; 0x44
    4010:	f001 fe05 	bl	5c1e <_ZN20FilterOnePoleCascade13setToNewValueEf>
}
    4014:	bd70      	pop	{r4, r5, r6, pc}

00004016 <_ZN17RunningStatisticsC1Ev>:
RunningStatistics::RunningStatistics() {
    4016:	b570      	push	{r4, r5, r6, lr}
    4018:	26fe      	movs	r6, #254	; 0xfe
    401a:	2500      	movs	r5, #0
    401c:	0004      	movs	r4, r0
    401e:	05b6      	lsls	r6, r6, #22
    4020:	1c2a      	adds	r2, r5, #0
    4022:	1c31      	adds	r1, r6, #0
    4024:	3004      	adds	r0, #4
    4026:	f001 fdb5 	bl	5b94 <_ZN20FilterOnePoleCascadeC1Eff>
    402a:	0020      	movs	r0, r4
    402c:	1c2a      	adds	r2, r5, #0
    402e:	1c31      	adds	r1, r6, #0
    4030:	3044      	adds	r0, #68	; 0x44
    4032:	f001 fdaf 	bl	5b94 <_ZN20FilterOnePoleCascadeC1Eff>
  setWindowSecs( 1 );   // setup with one second average
    4036:	1c31      	adds	r1, r6, #0
    4038:	0020      	movs	r0, r4
    403a:	f7ff ffc7 	bl	3fcc <_ZN17RunningStatistics13setWindowSecsEf>
  setInitialValue( 0 ); // start with zero
    403e:	1c2a      	adds	r2, r5, #0
    4040:	1c29      	adds	r1, r5, #0
    4042:	0020      	movs	r0, r4
    4044:	f7ff ffcd 	bl	3fe2 <_ZN17RunningStatistics15setInitialValueEff>
}
    4048:	0020      	movs	r0, r4
    404a:	bd70      	pop	{r4, r5, r6, pc}

0000404c <_ZN17RunningStatistics5inputEf>:

void RunningStatistics::input( float inVal ) {
    404c:	b570      	push	{r4, r5, r6, lr}
    404e:	1c0d      	adds	r5, r1, #0
    4050:	0004      	movs	r4, r0
  averageValue.input(inVal);              // calculates running average
    4052:	3004      	adds	r0, #4
    4054:	f001 fdd6 	bl	5c04 <_ZN20FilterOnePoleCascade5inputEf>
  averageSquareValue.input(inVal*inVal);  // calculates running average of square
    4058:	1c29      	adds	r1, r5, #0
    405a:	1c28      	adds	r0, r5, #0
    405c:	f004 fb6a 	bl	8734 <__aeabi_fmul>
    4060:	1c01      	adds	r1, r0, #0
    4062:	0020      	movs	r0, r4
    4064:	3044      	adds	r0, #68	; 0x44
    4066:	f001 fdcd 	bl	5c04 <_ZN20FilterOnePoleCascade5inputEf>
}
    406a:	bd70      	pop	{r4, r5, r6, pc}

0000406c <_ZN17RunningStatistics8varianceEv>:
  
float RunningStatistics::mean() {
  return averageValue.output();
}
  
float RunningStatistics::variance() {
    406c:	b570      	push	{r4, r5, r6, lr}
    406e:	0004      	movs	r4, r0
  float var = averageSquareValue.output() - averageValue.output()*averageValue.output();
    4070:	3044      	adds	r0, #68	; 0x44
    4072:	f001 fddb 	bl	5c2c <_ZN20FilterOnePoleCascade6outputEv>
    4076:	3404      	adds	r4, #4
    4078:	1c05      	adds	r5, r0, #0
    407a:	0020      	movs	r0, r4
    407c:	f001 fdd6 	bl	5c2c <_ZN20FilterOnePoleCascade6outputEv>
    4080:	1c06      	adds	r6, r0, #0
    4082:	0020      	movs	r0, r4
    4084:	f001 fdd2 	bl	5c2c <_ZN20FilterOnePoleCascade6outputEv>
    4088:	1c01      	adds	r1, r0, #0
    408a:	1c30      	adds	r0, r6, #0
    408c:	f004 fb52 	bl	8734 <__aeabi_fmul>
    4090:	1c01      	adds	r1, r0, #0
    4092:	1c28      	adds	r0, r5, #0
    4094:	f004 fc6e 	bl	8974 <__aeabi_fsub>
    
  // because of the filtering, it's possible that this could be negative ... check!
  if( var < 0 ) var = 0;
    4098:	2100      	movs	r1, #0
  float var = averageSquareValue.output() - averageValue.output()*averageValue.output();
    409a:	1c04      	adds	r4, r0, #0
  if( var < 0 ) var = 0;
    409c:	f003 ff6a 	bl	7f74 <__aeabi_fcmplt>
    40a0:	2800      	cmp	r0, #0
    40a2:	d000      	beq.n	40a6 <_ZN17RunningStatistics8varianceEv+0x3a>
    40a4:	2400      	movs	r4, #0
    
  return var;
}
    40a6:	1c20      	adds	r0, r4, #0
    40a8:	bd70      	pop	{r4, r5, r6, pc}

000040aa <_ZN17RunningStatistics5sigmaEv>:
  
float RunningStatistics::sigma() {
    40aa:	b510      	push	{r4, lr}
  
#ifdef ARM_FLOAT
  return sqrtf(variance());
#else
  return sqrt(variance());
    40ac:	f7ff ffde 	bl	406c <_ZN17RunningStatistics8varianceEv>
  { return __builtin_sqrtf(__x); }
    40b0:	f003 fb64 	bl	777c <sqrtf>
#endif

}
    40b4:	bd10      	pop	{r4, pc}
	...

000040b8 <_Z13rtc_time_initl>:
 *
 * @brief Init the RTC time
 *
 */
error_t rtc_time_init(int32_t zone)
{
    40b8:	b513      	push	{r0, r1, r4, lr}
	// Initialize RTC clock code
	rtc.begin();
    40ba:	4c0a      	ldr	r4, [pc, #40]	; (40e4 <_Z13rtc_time_initl+0x2c>)
    40bc:	0020      	movs	r0, r4
    40be:	f001 fec5 	bl	5e4c <_ZN7RTCZero5beginEv>
	
	// Set default time
	struct rtc_clockreg_value time;
	time.day = 1;
    40c2:	466a      	mov	r2, sp
    40c4:	2301      	movs	r3, #1
    40c6:	70d3      	strb	r3, [r2, #3]
	time.month = 1;
    40c8:	7113      	strb	r3, [r2, #4]
	time.year = 2000;
    40ca:	23fa      	movs	r3, #250	; 0xfa
    40cc:	00db      	lsls	r3, r3, #3
    40ce:	80d3      	strh	r3, [r2, #6]
	time.hour = 0;
    40d0:	2300      	movs	r3, #0
	time.minute = 0;
	time.second = 0;
	
	rtc.rtc_set_time(&time);
    40d2:	0020      	movs	r0, r4
    40d4:	4669      	mov	r1, sp
	time.hour = 0;
    40d6:	7093      	strb	r3, [r2, #2]
	time.minute = 0;
    40d8:	7053      	strb	r3, [r2, #1]
	time.second = 0;
    40da:	7013      	strb	r3, [r2, #0]
	rtc.rtc_set_time(&time);
    40dc:	f001 fe5e 	bl	5d9c <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
	
	// Set the timezone
	set_time_zone(zone);
}
    40e0:	bd16      	pop	{r1, r2, r4, pc}
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	2000093d 	.word	0x2000093d

000040e8 <_Z13get_rtc_epochv>:
 * @brief Get the RTC time in local time
 *
 * 
 */
time_t get_rtc_epoch()
{
    40e8:	b510      	push	{r4, lr}
	// Convert to UTC
	time_t epoch;
	epoch = rtc.getEpoch();
    40ea:	4802      	ldr	r0, [pc, #8]	; (40f4 <_Z13get_rtc_epochv+0xc>)
    40ec:	f001 fe0c 	bl	5d08 <_ZN7RTCZero8getEpochEv>
	return epoch;

} // get_rtc_time()
    40f0:	bd10      	pop	{r4, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	2000093d 	.word	0x2000093d

000040f8 <_Z18print_current_timev>:
* Prints the current time
* The time is set to 0 during boot
*
*/
void print_current_time(void)
{
    40f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    40fa:	4c0c      	ldr	r4, [pc, #48]	; (412c <_Z18print_current_timev+0x34>)
{
    40fc:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    40fe:	0020      	movs	r0, r4
    4100:	f001 fdb0 	bl	5c64 <_ZN7RTCZero10getSecondsEv>
    4104:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    4106:	0020      	movs	r0, r4
    4108:	f001 fdb2 	bl	5c70 <_ZN7RTCZero10getMinutesEv>
    410c:	0005      	movs	r5, r0
	c = rtc.getHours();
    410e:	0020      	movs	r0, r4
    4110:	f001 fdb4 	bl	5c7c <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    4114:	002b      	movs	r3, r5
	c = rtc.getHours();
    4116:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    4118:	4905      	ldr	r1, [pc, #20]	; (4130 <_Z18print_current_timev+0x38>)
	a = rtc.getSeconds();
    411a:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    411c:	a802      	add	r0, sp, #8
    411e:	f007 ff95 	bl	c04c <siprintf>
	println(buffer);
    4122:	a802      	add	r0, sp, #8
    4124:	f000 f8ec 	bl	4300 <_Z7printlnPKc>
	
} // print_current_time
    4128:	b042      	add	sp, #264	; 0x108
    412a:	bd70      	pop	{r4, r5, r6, pc}
    412c:	2000093d 	.word	0x2000093d
    4130:	0000f153 	.word	0x0000f153

00004134 <_Z14print_log_timev>:
* Prints the current time specifically for logging
* The time is set to 0 during boot
*
*/
void print_log_time(void)
{
    4134:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    4136:	4c0c      	ldr	r4, [pc, #48]	; (4168 <_Z14print_log_timev+0x34>)
{
    4138:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    413a:	0020      	movs	r0, r4
    413c:	f001 fd92 	bl	5c64 <_ZN7RTCZero10getSecondsEv>
    4140:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    4142:	0020      	movs	r0, r4
    4144:	f001 fd94 	bl	5c70 <_ZN7RTCZero10getMinutesEv>
    4148:	0005      	movs	r5, r0
	c = rtc.getHours();
    414a:	0020      	movs	r0, r4
    414c:	f001 fd96 	bl	5c7c <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4150:	002b      	movs	r3, r5
	c = rtc.getHours();
    4152:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4154:	4905      	ldr	r1, [pc, #20]	; (416c <_Z14print_log_timev+0x38>)
	a = rtc.getSeconds();
    4156:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4158:	a802      	add	r0, sp, #8
    415a:	f007 ff77 	bl	c04c <siprintf>
	print(buffer);
    415e:	a802      	add	r0, sp, #8
    4160:	f000 f8b8 	bl	42d4 <_Z5printPKc>
	
} // print_current_time
    4164:	b042      	add	sp, #264	; 0x108
    4166:	bd70      	pop	{r4, r5, r6, pc}
    4168:	2000093d 	.word	0x2000093d
    416c:	0000f118 	.word	0x0000f118

00004170 <_Z18print_current_datev>:
* Prints the current date
* The date is set to 0 during boot
*
*/
void print_current_date(void)
{
    4170:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getYear();
    4172:	4c0c      	ldr	r4, [pc, #48]	; (41a4 <_Z18print_current_datev+0x34>)
{
    4174:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getYear();
    4176:	0020      	movs	r0, r4
    4178:	f001 fd92 	bl	5ca0 <_ZN7RTCZero7getYearEv>
    417c:	0006      	movs	r6, r0
	b = rtc.getDay();
    417e:	0020      	movs	r0, r4
    4180:	f001 fd82 	bl	5c88 <_ZN7RTCZero6getDayEv>
    4184:	0005      	movs	r5, r0
	c = rtc.getMonth();
    4186:	0020      	movs	r0, r4
    4188:	f001 fd84 	bl	5c94 <_ZN7RTCZero8getMonthEv>
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    418c:	002b      	movs	r3, r5
	c = rtc.getMonth();
    418e:	0002      	movs	r2, r0
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4190:	4905      	ldr	r1, [pc, #20]	; (41a8 <_Z18print_current_datev+0x38>)
	a = rtc.getYear();
    4192:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4194:	a802      	add	r0, sp, #8
    4196:	f007 ff59 	bl	c04c <siprintf>
	println(buffer);
    419a:	a802      	add	r0, sp, #8
    419c:	f000 f8b0 	bl	4300 <_Z7printlnPKc>
	
} // print_current_date
    41a0:	b042      	add	sp, #264	; 0x108
    41a2:	bd70      	pop	{r4, r5, r6, pc}
    41a4:	2000093d 	.word	0x2000093d
    41a8:	0000f12f 	.word	0x0000f12f

000041ac <_GLOBAL__sub_I_rtc>:
    41ac:	b510      	push	{r4, lr}
RTCZero rtc;
    41ae:	4802      	ldr	r0, [pc, #8]	; (41b8 <_GLOBAL__sub_I_rtc+0xc>)
    41b0:	f001 fd4a 	bl	5c48 <_ZN7RTCZeroC1Ev>
} // print_current_date
    41b4:	bd10      	pop	{r4, pc}
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	2000093d 	.word	0x2000093d

000041bc <_Z10dlog_leveli>:


void dlog_level(int level)
{
    /* force level bounds */
    level = level >= numlevels ? numlevels - 1 : level;
    41bc:	2807      	cmp	r0, #7
    41be:	dd00      	ble.n	41c2 <_Z10dlog_leveli+0x6>
    41c0:	2007      	movs	r0, #7
    level = level < 0 ? 0 : level;
    41c2:	43c3      	mvns	r3, r0
    41c4:	17db      	asrs	r3, r3, #31
    41c6:	4018      	ands	r0, r3

    log_level = level;
    41c8:	4b01      	ldr	r3, [pc, #4]	; (41d0 <_Z10dlog_leveli+0x14>)
    41ca:	6018      	str	r0, [r3, #0]
} // dlog_level
    41cc:	4770      	bx	lr
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	20000044 	.word	0x20000044

000041d4 <_Z8log_initP7Serial_mm>:
{
    41d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pSerMon = pSerial;
    41d6:	4e0e      	ldr	r6, [pc, #56]	; (4210 <_Z8log_initP7Serial_mm+0x3c>)
{
    41d8:	0017      	movs	r7, r2
	pSerMon = pSerial;
    41da:	6030      	str	r0, [r6, #0]
	SerMon.begin(baud);
    41dc:	f001 f93a 	bl	5454 <_ZN7Serial_5beginEm>
	log_enabled = false;
    41e0:	2300      	movs	r3, #0
    41e2:	2408      	movs	r4, #8
    41e4:	4d0b      	ldr	r5, [pc, #44]	; (4214 <_Z8log_initP7Serial_mm+0x40>)
    41e6:	702b      	strb	r3, [r5, #0]
		if (!SerMon){
    41e8:	6830      	ldr	r0, [r6, #0]
    41ea:	f001 f935 	bl	5458 <_ZN7Serial_cvbEv>
    41ee:	2800      	cmp	r0, #0
    41f0:	d10a      	bne.n	4208 <_Z8log_initP7Serial_mm+0x34>
			delay(2000);
    41f2:	20fa      	movs	r0, #250	; 0xfa
    41f4:	3c01      	subs	r4, #1
    41f6:	00c0      	lsls	r0, r0, #3
    41f8:	f7fe fa6a 	bl	26d0 <delay>
	for (int indx=0 ; indx < 8 ; indx++) {
    41fc:	2c00      	cmp	r4, #0
    41fe:	d1f3      	bne.n	41e8 <_Z8log_initP7Serial_mm+0x14>
	dlog_level(log_level);
    4200:	0038      	movs	r0, r7
    4202:	f7ff ffdb 	bl	41bc <_Z10dlog_leveli>
} // log_init
    4206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_enabled = true;
    4208:	2301      	movs	r3, #1
    420a:	702b      	strb	r3, [r5, #0]
			break;
    420c:	e7f8      	b.n	4200 <_Z8log_initP7Serial_mm+0x2c>
    420e:	46c0      	nop			; (mov r8, r8)
    4210:	20000940 	.word	0x20000940
    4214:	2000093e 	.word	0x2000093e

00004218 <_Z4dlogiPKcz>:


void dlog(int level, const char *format, ...)
{
    4218:	b40e      	push	{r1, r2, r3}
    421a:	b500      	push	{lr}
    va_list args;
	char buffer[PRINTF_LEN];
	
	// Is logging enabled?
	if (!log_enabled)
    421c:	4b0c      	ldr	r3, [pc, #48]	; (4250 <_Z4dlogiPKcz+0x38>)
{
    421e:	b0c2      	sub	sp, #264	; 0x108
	if (!log_enabled)
    4220:	781b      	ldrb	r3, [r3, #0]
    4222:	2b00      	cmp	r3, #0
    4224:	d010      	beq.n	4248 <_Z4dlogiPKcz+0x30>
	{
		return;
	}
   
    // Check debug log
    if (level > log_level) 
    4226:	4b0b      	ldr	r3, [pc, #44]	; (4254 <_Z4dlogiPKcz+0x3c>)
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	4283      	cmp	r3, r0
    422c:	db0c      	blt.n	4248 <_Z4dlogiPKcz+0x30>
	{
        return;
    }

	// Print time
	print_log_time();
    422e:	f7ff ff81 	bl	4134 <_Z14print_log_timev>

	// Print to serial port using the format
	va_start( args, format );
    4232:	aa44      	add	r2, sp, #272	; 0x110
	vsprintf( buffer,format, args );
    4234:	9943      	ldr	r1, [sp, #268]	; 0x10c
    4236:	a802      	add	r0, sp, #8
	va_start( args, format );
    4238:	9201      	str	r2, [sp, #4]
	vsprintf( buffer,format, args );
    423a:	f008 fa71 	bl	c720 <vsiprintf>
	SerMon.println(buffer);
    423e:	4b06      	ldr	r3, [pc, #24]	; (4258 <_Z4dlogiPKcz+0x40>)
    4240:	a902      	add	r1, sp, #8
    4242:	6818      	ldr	r0, [r3, #0]
    4244:	f000 fcfe 	bl	4c44 <_ZN5Print7printlnEPKc>
	va_end(args);

} // dlog
    4248:	b042      	add	sp, #264	; 0x108
    424a:	bc08      	pop	{r3}
    424c:	b003      	add	sp, #12
    424e:	4718      	bx	r3
    4250:	2000093e 	.word	0x2000093e
    4254:	20000044 	.word	0x20000044
    4258:	20000940 	.word	0x20000940

0000425c <_Z5ddumpiPKcPKvi>:


void ddump(int level, const char *label, const void *data, int datalen)
{
    425c:	b5f0      	push	{r4, r5, r6, r7, lr}
    425e:	001f      	movs	r7, r3
    const uint8_t *b = (const uint8_t *) data;
	char buffer[PRINTF_LEN];
    int i;
    
    // Is logging enabled?
    if (!log_enabled)
    4260:	4b16      	ldr	r3, [pc, #88]	; (42bc <_Z5ddumpiPKcPKvi+0x60>)
{
    4262:	b0c1      	sub	sp, #260	; 0x104
    if (!log_enabled)
    4264:	781b      	ldrb	r3, [r3, #0]
{
    4266:	000c      	movs	r4, r1
    4268:	0016      	movs	r6, r2
    if (!log_enabled)
    426a:	2b00      	cmp	r3, #0
    426c:	d024      	beq.n	42b8 <_Z5ddumpiPKcPKvi+0x5c>
    {
	    return;
    }

    if (level > log_level) 
    426e:	4b14      	ldr	r3, [pc, #80]	; (42c0 <_Z5ddumpiPKcPKvi+0x64>)
    4270:	681b      	ldr	r3, [r3, #0]
    4272:	4283      	cmp	r3, r0
    4274:	db20      	blt.n	42b8 <_Z5ddumpiPKcPKvi+0x5c>
	{
        return;
    }

	// Print time
	print_log_time();
    4276:	f7ff ff5d 	bl	4134 <_Z14print_log_timev>
    427a:	4d12      	ldr	r5, [pc, #72]	; (42c4 <_Z5ddumpiPKcPKvi+0x68>)

    if (label) 
    427c:	2c00      	cmp	r4, #0
    427e:	d008      	beq.n	4292 <_Z5ddumpiPKcPKvi+0x36>
	{
		sprintf( buffer, "%s:", label );
    4280:	4911      	ldr	r1, [pc, #68]	; (42c8 <_Z5ddumpiPKcPKvi+0x6c>)
    4282:	0022      	movs	r2, r4
    4284:	4668      	mov	r0, sp
    4286:	f007 fee1 	bl	c04c <siprintf>
        SerMon.print(buffer);
    428a:	4669      	mov	r1, sp
    428c:	6828      	ldr	r0, [r5, #0]
    428e:	f000 fcb4 	bl	4bfa <_ZN5Print5printEPKc>
{
    4292:	0034      	movs	r4, r6
    }

    for(i = 0; i < datalen; i++) 
    4294:	1ba3      	subs	r3, r4, r6
    4296:	42bb      	cmp	r3, r7
    4298:	da0a      	bge.n	42b0 <_Z5ddumpiPKcPKvi+0x54>
	{
		sprintf( buffer, " %02x", b[i] );
    429a:	7822      	ldrb	r2, [r4, #0]
    429c:	490b      	ldr	r1, [pc, #44]	; (42cc <_Z5ddumpiPKcPKvi+0x70>)
    429e:	4668      	mov	r0, sp
    42a0:	f007 fed4 	bl	c04c <siprintf>
        SerMon.print(buffer);
    42a4:	4669      	mov	r1, sp
    42a6:	6828      	ldr	r0, [r5, #0]
    42a8:	f000 fca7 	bl	4bfa <_ZN5Print5printEPKc>
    42ac:	3401      	adds	r4, #1
    42ae:	e7f1      	b.n	4294 <_Z5ddumpiPKcPKvi+0x38>
    }
    
    SerMon.println("");
    42b0:	4907      	ldr	r1, [pc, #28]	; (42d0 <_Z5ddumpiPKcPKvi+0x74>)
    42b2:	6828      	ldr	r0, [r5, #0]
    42b4:	f000 fcc6 	bl	4c44 <_ZN5Print7printlnEPKc>

} // ddump
    42b8:	b041      	add	sp, #260	; 0x104
    42ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42bc:	2000093e 	.word	0x2000093e
    42c0:	20000044 	.word	0x20000044
    42c4:	20000940 	.word	0x20000940
    42c8:	0000f175 	.word	0x0000f175
    42cc:	0000f179 	.word	0x0000f179
    42d0:	0000f47e 	.word	0x0000f47e

000042d4 <_Z5printPKc>:


void print( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    42d4:	4b07      	ldr	r3, [pc, #28]	; (42f4 <_Z5printPKc+0x20>)
{
    42d6:	b510      	push	{r4, lr}
	if (!log_enabled)
    42d8:	781b      	ldrb	r3, [r3, #0]
{
    42da:	0001      	movs	r1, r0
	if (!log_enabled)
    42dc:	2b00      	cmp	r3, #0
    42de:	d007      	beq.n	42f0 <_Z5printPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    42e0:	4b05      	ldr	r3, [pc, #20]	; (42f8 <_Z5printPKc+0x24>)
    42e2:	681b      	ldr	r3, [r3, #0]
    42e4:	2b06      	cmp	r3, #6
    42e6:	dd03      	ble.n	42f0 <_Z5printPKc+0x1c>
	{
        return;
    }

	SerMon.print(buf);
    42e8:	4b04      	ldr	r3, [pc, #16]	; (42fc <_Z5printPKc+0x28>)
    42ea:	6818      	ldr	r0, [r3, #0]
    42ec:	f000 fc85 	bl	4bfa <_ZN5Print5printEPKc>
	
} // print
    42f0:	bd10      	pop	{r4, pc}
    42f2:	46c0      	nop			; (mov r8, r8)
    42f4:	2000093e 	.word	0x2000093e
    42f8:	20000044 	.word	0x20000044
    42fc:	20000940 	.word	0x20000940

00004300 <_Z7printlnPKc>:


void println( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    4300:	4b07      	ldr	r3, [pc, #28]	; (4320 <_Z7printlnPKc+0x20>)
{
    4302:	b510      	push	{r4, lr}
	if (!log_enabled)
    4304:	781b      	ldrb	r3, [r3, #0]
{
    4306:	0001      	movs	r1, r0
	if (!log_enabled)
    4308:	2b00      	cmp	r3, #0
    430a:	d007      	beq.n	431c <_Z7printlnPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    430c:	4b05      	ldr	r3, [pc, #20]	; (4324 <_Z7printlnPKc+0x24>)
    430e:	681b      	ldr	r3, [r3, #0]
    4310:	2b06      	cmp	r3, #6
    4312:	dd03      	ble.n	431c <_Z7printlnPKc+0x1c>
	{
        return;
    }

	SerMon.println(buf);
    4314:	4b04      	ldr	r3, [pc, #16]	; (4328 <_Z7printlnPKc+0x28>)
    4316:	6818      	ldr	r0, [r3, #0]
    4318:	f000 fc94 	bl	4c44 <_ZN5Print7printlnEPKc>
	
} // println
    431c:	bd10      	pop	{r4, pc}
    431e:	46c0      	nop			; (mov r8, r8)
    4320:	2000093e 	.word	0x2000093e
    4324:	20000044 	.word	0x20000044
    4328:	20000940 	.word	0x20000940

0000432c <_Z8printnumi>:


void printnum( int n )
{
	// Is logging enabled?
	if (!log_enabled)
    432c:	4b07      	ldr	r3, [pc, #28]	; (434c <_Z8printnumi+0x20>)
{
    432e:	b510      	push	{r4, lr}
	if (!log_enabled)
    4330:	781b      	ldrb	r3, [r3, #0]
{
    4332:	0001      	movs	r1, r0
	if (!log_enabled)
    4334:	2b00      	cmp	r3, #0
    4336:	d008      	beq.n	434a <_Z8printnumi+0x1e>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    4338:	4b05      	ldr	r3, [pc, #20]	; (4350 <_Z8printnumi+0x24>)
    433a:	681b      	ldr	r3, [r3, #0]
    433c:	2b06      	cmp	r3, #6
    433e:	dd04      	ble.n	434a <_Z8printnumi+0x1e>
	{
        return;
    }

	SerMon.print(n);
    4340:	4b04      	ldr	r3, [pc, #16]	; (4354 <_Z8printnumi+0x28>)
    4342:	220a      	movs	r2, #10
    4344:	6818      	ldr	r0, [r3, #0]
    4346:	f000 fcdc 	bl	4d02 <_ZN5Print5printEii>
	
} // println
    434a:	bd10      	pop	{r4, pc}
    434c:	2000093e 	.word	0x2000093e
    4350:	20000044 	.word	0x20000044
    4354:	20000940 	.word	0x20000940

00004358 <_Z8free_ramv>:


// Function to return the amount of Free Ram.
extern "C" char *sbrk(int i);
int free_ram()
{
    4358:	b513      	push	{r0, r1, r4, lr}
	char stack_dummy = 0;
    435a:	2000      	movs	r0, #0
    435c:	466b      	mov	r3, sp
    435e:	1ddc      	adds	r4, r3, #7
    4360:	71d8      	strb	r0, [r3, #7]
	return &stack_dummy - sbrk(0);
    4362:	f007 ff77 	bl	c254 <sbrk>
    4366:	1a20      	subs	r0, r4, r0
}
    4368:	bd16      	pop	{r1, r2, r4, pc}
	...

0000436c <_Z10eraseBlockv>:
//////////////////////////////////////////////////////////////////////////
//
// SPI FLASH Functions
//
//////////////////////////////////////////////////////////////////////////
bool eraseBlock(){
    436c:	b510      	push	{r4, lr}
	if (!flash.eraseBlock64K(1))
    436e:	2101      	movs	r1, #1
    4370:	4801      	ldr	r0, [pc, #4]	; (4378 <_Z10eraseBlockv+0xc>)
    4372:	f001 ff57 	bl	6224 <_ZN8SPIFlash13eraseBlock64KEm>
	return false;
	else
	return true;
}
    4376:	bd10      	pop	{r4, pc}
    4378:	20000948 	.word	0x20000948

0000437c <_Z9getStringi>:
	str += inChar;
	// Serial.println("end run");
	str += '\0';
	return str;
}
String getString(int addr){
    437c:	b5f0      	push	{r4, r5, r6, r7, lr}
    437e:	b0c7      	sub	sp, #284	; 0x11c
    4380:	000c      	movs	r4, r1
    4382:	0005      	movs	r5, r0

	String output = "";
    4384:	4914      	ldr	r1, [pc, #80]	; (43d8 <_Z9getStringi+0x5c>)
    4386:	a803      	add	r0, sp, #12
    4388:	f001 f93a 	bl	5600 <_ZN6StringC1EPKc>
	uint8_t data_buffer[BLOCKSIZE];
	flash.readByteArray(addr, &data_buffer[0], BLOCKSIZE);
    438c:	2300      	movs	r3, #0
    438e:	ae06      	add	r6, sp, #24
    4390:	9300      	str	r3, [sp, #0]
    4392:	3301      	adds	r3, #1
    4394:	0021      	movs	r1, r4
    4396:	33ff      	adds	r3, #255	; 0xff
    4398:	0032      	movs	r2, r6
    439a:	4810      	ldr	r0, [pc, #64]	; (43dc <_Z9getStringi+0x60>)
	for (int i = 2; i < BLOCKSIZE; i++)
    439c:	2780      	movs	r7, #128	; 0x80
	flash.readByteArray(addr, &data_buffer[0], BLOCKSIZE);
    439e:	f001 fdf7 	bl	5f90 <_ZN8SPIFlash13readByteArrayEmPhjb>
	for (int i = 2; i < BLOCKSIZE; i++)
    43a2:	2402      	movs	r4, #2
    43a4:	007f      	lsls	r7, r7, #1
	{
		if (data_buffer[i] == 255 )
    43a6:	5d31      	ldrb	r1, [r6, r4]
    43a8:	29ff      	cmp	r1, #255	; 0xff
    43aa:	d109      	bne.n	43c0 <_Z9getStringi+0x44>
		return output;
    43ac:	a903      	add	r1, sp, #12
    43ae:	0028      	movs	r0, r5
    43b0:	f001 f8d0 	bl	5554 <_ZN6StringC1EOS_>
	String output = "";
    43b4:	a803      	add	r0, sp, #12
    43b6:	f001 f8db 	bl	5570 <_ZN6StringD1Ev>
		output += (char)data_buffer[i];
	}
	return "No Data";
	
}
    43ba:	0028      	movs	r0, r5
    43bc:	b047      	add	sp, #284	; 0x11c
    43be:	bdf0      	pop	{r4, r5, r6, r7, pc}

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    43c0:	a803      	add	r0, sp, #12
	for (int i = 2; i < BLOCKSIZE; i++)
    43c2:	3401      	adds	r4, #1
    43c4:	f001 f97d 	bl	56c2 <_ZN6String6concatEc>
    43c8:	42bc      	cmp	r4, r7
    43ca:	d1ec      	bne.n	43a6 <_Z9getStringi+0x2a>
	return "No Data";
    43cc:	4904      	ldr	r1, [pc, #16]	; (43e0 <_Z9getStringi+0x64>)
    43ce:	0028      	movs	r0, r5
    43d0:	f001 f916 	bl	5600 <_ZN6StringC1EPKc>
    43d4:	e7ee      	b.n	43b4 <_Z9getStringi+0x38>
    43d6:	46c0      	nop			; (mov r8, r8)
    43d8:	0000f47e 	.word	0x0000f47e
    43dc:	20000948 	.word	0x20000948
    43e0:	0000f2c2 	.word	0x0000f2c2

000043e4 <_Z5getIDv>:
String getID(){
    43e4:	b5f0      	push	{r4, r5, r6, r7, lr}

	String ID1 = "";
    43e6:	4914      	ldr	r1, [pc, #80]	; (4438 <_Z5getIDv+0x54>)
String getID(){
    43e8:	b085      	sub	sp, #20
    43ea:	0005      	movs	r5, r0
	//  Serial.println(F("Initialising"));
	//  UniqueIDdump(Serial);
	for (size_t i = 0; i < UniqueIDsize; i++)
    43ec:	2400      	movs	r4, #0
	String ID1 = "";
    43ee:	f001 f907 	bl	5600 <_ZN6StringC1EPKc>
	{
		ID1 += String(UniqueID[i],HEX);
		if (i%4==3 && i < (UniqueIDsize - 1))
    43f2:	2703      	movs	r7, #3
		ID1 += String(UniqueID[i],HEX);
    43f4:	4b11      	ldr	r3, [pc, #68]	; (443c <_Z5getIDv+0x58>)
    43f6:	2210      	movs	r2, #16
    43f8:	5d19      	ldrb	r1, [r3, r4]
    43fa:	a801      	add	r0, sp, #4
    43fc:	f001 f924 	bl	5648 <_ZN6StringC1Ehh>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    4400:	a901      	add	r1, sp, #4
    4402:	0028      	movs	r0, r5
    4404:	f001 f94a 	bl	569c <_ZN6String6concatERKS_>
    4408:	a801      	add	r0, sp, #4
    440a:	f001 f8b1 	bl	5570 <_ZN6StringD1Ev>
		if (i%4==3 && i < (UniqueIDsize - 1))
    440e:	0023      	movs	r3, r4
    4410:	1c66      	adds	r6, r4, #1
    4412:	403b      	ands	r3, r7
    4414:	2b03      	cmp	r3, #3
    4416:	d105      	bne.n	4424 <_Z5getIDv+0x40>
    4418:	2c0f      	cmp	r4, #15
    441a:	d006      	beq.n	442a <_Z5getIDv+0x46>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    441c:	4908      	ldr	r1, [pc, #32]	; (4440 <_Z5getIDv+0x5c>)
    441e:	0028      	movs	r0, r5
    4420:	f001 f942 	bl	56a8 <_ZN6String6concatEPKc>
	for (size_t i = 0; i < UniqueIDsize; i++)
    4424:	0034      	movs	r4, r6
    4426:	2e10      	cmp	r6, #16
    4428:	d1e4      	bne.n	43f4 <_Z5getIDv+0x10>
		{
			ID1 += ("-");
		}
	}
	ID1.toUpperCase();
    442a:	0028      	movs	r0, r5
    442c:	f001 f983 	bl	5736 <_ZN6String11toUpperCaseEv>
	return ID1;
}
    4430:	0028      	movs	r0, r5
    4432:	b005      	add	sp, #20
    4434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4436:	46c0      	nop			; (mov r8, r8)
    4438:	0000f47e 	.word	0x0000f47e
    443c:	20000d44 	.word	0x20000d44
    4440:	00010483 	.word	0x00010483

00004444 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>:
// Register a sensor.
//
//////////////////////////////////////////////////////////////////////////
uint8_t sapi_register_sensor(char *sensor_type, SensorInitFuncPtr sensor_init, SensorReadFuncPtr sensor_read, SensorReadCfgFuncPtr sensor_readcfg,
							 SensorWriteCfgFuncPtr sensor_writecfg, uint8_t is_observer, uint32_t frequency)
{
    4444:	b5f0      	push	{r4, r5, r6, r7, lr}
    4446:	b087      	sub	sp, #28
    4448:	9304      	str	r3, [sp, #16]
    444a:	ab0c      	add	r3, sp, #48	; 0x30
    444c:	9203      	str	r2, [sp, #12]
	uint8_t sensor_id = sensor_info_index;
    444e:	4f1c      	ldr	r7, [pc, #112]	; (44c0 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x7c>)
{
    4450:	cb04      	ldmia	r3!, {r2}
	uint8_t sensor_id = sensor_info_index;
    4452:	783d      	ldrb	r5, [r7, #0]
{
    4454:	781b      	ldrb	r3, [r3, #0]
	
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4456:	4c1b      	ldr	r4, [pc, #108]	; (44c4 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x80>)
{
    4458:	9301      	str	r3, [sp, #4]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    445a:	016b      	lsls	r3, r5, #5
    445c:	18e4      	adds	r4, r4, r3
{
    445e:	9102      	str	r1, [sp, #8]
    4460:	0006      	movs	r6, r0
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4462:	0001      	movs	r1, r0
    4464:	0020      	movs	r0, r4
{
    4466:	9205      	str	r2, [sp, #20]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4468:	f007 fe29 	bl	c0be <strcpy>
	sensor_info[sensor_id].init = sensor_init;
    446c:	9b02      	ldr	r3, [sp, #8]
    446e:	60a3      	str	r3, [r4, #8]
	sensor_info[sensor_id].read = sensor_read;
    4470:	9b03      	ldr	r3, [sp, #12]
    4472:	60e3      	str	r3, [r4, #12]
	sensor_info[sensor_id].readcfg = sensor_readcfg;
    4474:	9b04      	ldr	r3, [sp, #16]
    4476:	6123      	str	r3, [r4, #16]
	sensor_info[sensor_id].writecfg = sensor_writecfg;
    4478:	9b05      	ldr	r3, [sp, #20]
    447a:	6163      	str	r3, [r4, #20]
	sensor_info[sensor_id].frequency = frequency;
    447c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    447e:	61a3      	str	r3, [r4, #24]
	
	sensor_info[sensor_id].observer = 0;
	if (is_observer == 1)
    4480:	9b01      	ldr	r3, [sp, #4]
    4482:	2b01      	cmp	r3, #1
    4484:	d00c      	beq.n	44a0 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x5c>
	sensor_info[sensor_id].observer = 0;
    4486:	2300      	movs	r3, #0
    4488:	7723      	strb	r3, [r4, #28]
		
		// Set the URI used for obtaining token etc in CoAP Observe response msg and set the observe handler, frequency, sensor id.
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
	}
	sensor_info_index++;
    448a:	783b      	ldrb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    448c:	0032      	movs	r2, r6
	sensor_info_index++;
    448e:	3301      	adds	r3, #1
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    4490:	490d      	ldr	r1, [pc, #52]	; (44c8 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x84>)
    4492:	2007      	movs	r0, #7
	sensor_info_index++;
    4494:	703b      	strb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    4496:	f7ff febf 	bl	4218 <_Z4dlogiPKcz>
	return sensor_id;
}
    449a:	0028      	movs	r0, r5
    449c:	b007      	add	sp, #28
    449e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_info[sensor_id].observer = 1;
    44a0:	466b      	mov	r3, sp
    44a2:	791b      	ldrb	r3, [r3, #4]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    44a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		sensor_info[sensor_id].observer = 1;
    44a6:	7723      	strb	r3, [r4, #28]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    44a8:	4908      	ldr	r1, [pc, #32]	; (44cc <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x88>)
    44aa:	002b      	movs	r3, r5
    44ac:	0030      	movs	r0, r6
    44ae:	f002 fbb9 	bl	6c24 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    44b2:	4907      	ldr	r1, [pc, #28]	; (44d0 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x8c>)
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    44b4:	0002      	movs	r2, r0
    44b6:	7760      	strb	r0, [r4, #29]
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    44b8:	2007      	movs	r0, #7
    44ba:	f7ff fead 	bl	4218 <_Z4dlogiPKcz>
    44be:	e7e4      	b.n	448a <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x46>
    44c0:	20000944 	.word	0x20000944
    44c4:	20000a50 	.word	0x20000a50
    44c8:	0000f25d 	.word	0x0000f25d
    44cc:	000047e1 	.word	0x000047e1
    44d0:	0000f249 	.word	0x0000f249

000044d4 <_Z16sapi_init_sensorh>:
//
// Initialize a sensor (hardware) and sensor related code.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t sapi_init_sensor(uint8_t sensor_id)
{
    44d4:	b510      	push	{r4, lr}
	// Initialize Sensor
	SensorInitFuncPtr pInitFunc = sensor_info[sensor_id].init;
    44d6:	0143      	lsls	r3, r0, #5
    44d8:	4802      	ldr	r0, [pc, #8]	; (44e4 <_Z16sapi_init_sensorh+0x10>)
    44da:	18c0      	adds	r0, r0, r3
	sapi_error_t rcode = (*pInitFunc)();
    44dc:	6883      	ldr	r3, [r0, #8]
    44de:	4798      	blx	r3
	
	return rcode;
}
    44e0:	bd10      	pop	{r4, pc}
    44e2:	46c0      	nop			; (mov r8, r8)
    44e4:	20000a50 	.word	0x20000a50

000044e8 <_Z17cbor_enc_nic_typeP8cbor_bufPc>:
//
// Add sensor type to a CBOR payload wrapper
//
//////////////////////////////////////////////////////////////////////////
uint8_t cbor_enc_nic_type(struct cbor_buf *cbuf, char *sensor_type)
{
    44e8:	b570      	push	{r4, r5, r6, lr}
    44ea:	000d      	movs	r5, r1
	uint8_t rcode;

	// Top level map, first element is for device type.
	// Device type used to provide a namespace for use at the MQTT broker.
	if ((rcode = cbor_enc_map(cbuf, 2)))
    44ec:	2102      	movs	r1, #2
{
    44ee:	0004      	movs	r4, r0
	if ((rcode = cbor_enc_map(cbuf, 2)))
    44f0:	f002 fae1 	bl	6ab6 <_Z12cbor_enc_mapP8cbor_bufi>
    44f4:	b2c0      	uxtb	r0, r0
    44f6:	2800      	cmp	r0, #0
    44f8:	d116      	bne.n	4528 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// NIC type, key and value
	if ((rcode = cbor_enc_int(cbuf, NAMESPACE_NIC_TYPE_KEY)))
    44fa:	0001      	movs	r1, r0
    44fc:	0020      	movs	r0, r4
    44fe:	f002 fab2 	bl	6a66 <_Z12cbor_enc_intP8cbor_bufi>
    4502:	b2c0      	uxtb	r0, r0
    4504:	2800      	cmp	r0, #0
    4506:	d10f      	bne.n	4528 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}
	if ((rcode = cbor_enc_text(cbuf, sensor_type, strlen(sensor_type))))
    4508:	0028      	movs	r0, r5
    450a:	f007 fde0 	bl	c0ce <strlen>
    450e:	0029      	movs	r1, r5
    4510:	0002      	movs	r2, r0
    4512:	0020      	movs	r0, r4
    4514:	f002 fab3 	bl	6a7e <_Z13cbor_enc_textP8cbor_bufPKci>
    4518:	b2c0      	uxtb	r0, r0
    451a:	2800      	cmp	r0, #0
    451c:	d104      	bne.n	4528 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// Remaining device-specific key
	rcode = cbor_enc_int(cbuf, NAMESPACE_DEVICE_SPECIFIC_KEY);
    451e:	2101      	movs	r1, #1
    4520:	0020      	movs	r0, r4
    4522:	f002 faa0 	bl	6a66 <_Z12cbor_enc_intP8cbor_bufi>
    4526:	b2c0      	uxtb	r0, r0
	return rcode;
}
    4528:	bd70      	pop	{r4, r5, r6, pc}
	...

0000452c <_Z13build_rsp_msgP4mbufPhPcmh>:
//
// A typical CBOR payload: {0:"temp",1:<text payload>"}
//
//////////////////////////////////////////////////////////////////////////
error_t build_rsp_msg(struct mbuf *m, uint8_t *len, char *payload, uint32_t payloadlen, uint8_t sensor_id)
{
    452c:	b5f0      	push	{r4, r5, r6, r7, lr}
    452e:	b0a7      	sub	sp, #156	; 0x9c
    4530:	001f      	movs	r7, r3
    4532:	ab2c      	add	r3, sp, #176	; 0xb0
    4534:	9101      	str	r1, [sp, #4]
    4536:	781c      	ldrb	r4, [r3, #0]
	
	// If payload needs to be in CBOR format we add the CBOR wrapper.
	error_t	rcode = ERR_FAIL;
	struct cbor_buf cbuf;
		
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    4538:	a906      	add	r1, sp, #24
{
    453a:	0005      	movs	r5, r0
    453c:	0016      	movs	r6, r2
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    453e:	a802      	add	r0, sp, #8
    4540:	2280      	movs	r2, #128	; 0x80
    4542:	f002 fa7f 	bl	6a44 <_Z13cbor_enc_initP8cbor_bufPvi>
	
	if (!cbor_enc_nic_type(&cbuf, sensor_info[sensor_id].devicetype))
    4546:	491c      	ldr	r1, [pc, #112]	; (45b8 <_Z13build_rsp_msgP4mbufPhPcmh+0x8c>)
    4548:	0164      	lsls	r4, r4, #5
    454a:	1909      	adds	r1, r1, r4
    454c:	a802      	add	r0, sp, #8
    454e:	f7ff ffcb 	bl	44e8 <_Z17cbor_enc_nic_typeP8cbor_bufPc>
    4552:	2800      	cmp	r0, #0
    4554:	d003      	beq.n	455e <_Z13build_rsp_msgP4mbufPhPcmh+0x32>
{
    4556:	2363      	movs	r3, #99	; 0x63
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
	
	int freeram = free_ram();
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
	return ERR_OK;
}
    4558:	0018      	movs	r0, r3
    455a:	b027      	add	sp, #156	; 0x9c
    455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!cbor_enc_text(&cbuf, payload, payloadlen))
    455e:	0031      	movs	r1, r6
    4560:	003a      	movs	r2, r7
    4562:	a802      	add	r0, sp, #8
    4564:	f002 fa8b 	bl	6a7e <_Z13cbor_enc_textP8cbor_bufPKci>
    4568:	1e06      	subs	r6, r0, #0
    456a:	d1f4      	bne.n	4556 <_Z13build_rsp_msgP4mbufPhPcmh+0x2a>
	l = cbor_buf_get_len(&cbuf);
    456c:	a802      	add	r0, sp, #8
    456e:	f002 fa76 	bl	6a5e <_Z16cbor_buf_get_lenP8cbor_buf>
    4572:	b2c7      	uxtb	r7, r0
    4574:	0004      	movs	r4, r0
	p = (char *) m_append(m, l);
    4576:	b239      	sxth	r1, r7
    4578:	0028      	movs	r0, r5
    457a:	f002 feaf 	bl	72dc <_Z8m_appendP4mbufs>
		return ERR_NO_MEM;
    457e:	2303      	movs	r3, #3
	if (!p)
    4580:	2800      	cmp	r0, #0
    4582:	d0e9      	beq.n	4558 <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    4584:	b2e4      	uxtb	r4, r4
	memcpy(p, cbor_payload, l);
    4586:	0022      	movs	r2, r4
    4588:	a906      	add	r1, sp, #24
    458a:	f006 fc6d 	bl	ae68 <memcpy>
	*len = l;
    458e:	9b01      	ldr	r3, [sp, #4]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    4590:	490a      	ldr	r1, [pc, #40]	; (45bc <_Z13build_rsp_msgP4mbufPhPcmh+0x90>)
	*len = l;
    4592:	701f      	strb	r7, [r3, #0]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    4594:	2007      	movs	r0, #7
    4596:	f7ff fe3f 	bl	4218 <_Z4dlogiPKcz>
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
    459a:	0023      	movs	r3, r4
    459c:	aa06      	add	r2, sp, #24
    459e:	4908      	ldr	r1, [pc, #32]	; (45c0 <_Z13build_rsp_msgP4mbufPhPcmh+0x94>)
    45a0:	2007      	movs	r0, #7
    45a2:	f7ff fe5b 	bl	425c <_Z5ddumpiPKcPKvi>
	int freeram = free_ram();
    45a6:	f7ff fed7 	bl	4358 <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    45aa:	4906      	ldr	r1, [pc, #24]	; (45c4 <_Z13build_rsp_msgP4mbufPhPcmh+0x98>)
	int freeram = free_ram();
    45ac:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    45ae:	2007      	movs	r0, #7
    45b0:	f7ff fe32 	bl	4218 <_Z4dlogiPKcz>
	return ERR_OK;
    45b4:	0033      	movs	r3, r6
    45b6:	e7cf      	b.n	4558 <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    45b8:	20000a50 	.word	0x20000a50
    45bc:	0000f17f 	.word	0x0000f17f
    45c0:	0000f743 	.word	0x0000f743
    45c4:	0000f192 	.word	0x0000f192

000045c8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>:
{
    45c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    45ca:	0006      	movs	r6, r0
{
    45cc:	b0a9      	sub	sp, #164	; 0xa4
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    45ce:	364c      	adds	r6, #76	; 0x4c
{
    45d0:	9205      	str	r2, [sp, #20]
    45d2:	0005      	movs	r5, r0
    45d4:	000f      	movs	r7, r1
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    45d6:	aa05      	add	r2, sp, #20
    45d8:	210b      	movs	r1, #11
    45da:	0030      	movs	r0, r6
{
    45dc:	001c      	movs	r4, r3
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    45de:	f002 fac5 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    45e2:	9003      	str	r0, [sp, #12]
    if (o)
    45e4:	2800      	cmp	r0, #0
    45e6:	d004      	beq.n	45f2 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x2a>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    45e8:	2384      	movs	r3, #132	; 0x84
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    45ea:	70bb      	strb	r3, [r7, #2]
    rsp->plen = 0;
    45ec:	2300      	movs	r3, #0
    45ee:	643b      	str	r3, [r7, #64]	; 0x40
    return ERR_OK;
    45f0:	e03e      	b.n	4670 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
    if (!(o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL))) 
    45f2:	9a03      	ldr	r2, [sp, #12]
    45f4:	210f      	movs	r1, #15
    45f6:	0030      	movs	r0, r6
    45f8:	f002 fab8 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    45fc:	9002      	str	r0, [sp, #8]
    45fe:	2800      	cmp	r0, #0
    4600:	d101      	bne.n	4606 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3e>
        rsp->code = COAP_RSP_405_METHOD_NOT_ALLOWED;
    4602:	2385      	movs	r3, #133	; 0x85
    4604:	e7f1      	b.n	45ea <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    if (req->code == COAP_REQUEST_GET)
    4606:	78ad      	ldrb	r5, [r5, #2]
    4608:	2d01      	cmp	r5, #1
    460a:	d000      	beq.n	460e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x46>
    460c:	e081      	b.n	4712 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x14a>
        uint8_t len = 0;
    460e:	466a      	mov	r2, sp
    4610:	7b12      	ldrb	r2, [r2, #12]
    4612:	ab02      	add	r3, sp, #8
        if (!coap_opt_strcmp(o, "cfg"))
    4614:	4954      	ldr	r1, [pc, #336]	; (4768 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a0>)
    4616:	9802      	ldr	r0, [sp, #8]
        uint8_t len = 0;
    4618:	759a      	strb	r2, [r3, #22]
        if (!coap_opt_strcmp(o, "cfg"))
    461a:	f002 fa57 	bl	6acc <_Z15coap_opt_strcmpPK5optlvPKc>
    461e:	9003      	str	r0, [sp, #12]
    4620:	2800      	cmp	r0, #0
    4622:	d128      	bne.n	4676 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xae>
            uint8_t payloadlen = 0;
    4624:	ab02      	add	r3, sp, #8
    4626:	3516      	adds	r5, #22
    4628:	18ed      	adds	r5, r5, r3
    462a:	466b      	mov	r3, sp
    462c:	7b1b      	ldrb	r3, [r3, #12]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    462e:	0162      	lsls	r2, r4, #5
            uint8_t payloadlen = 0;
    4630:	702b      	strb	r3, [r5, #0]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    4632:	4b4e      	ldr	r3, [pc, #312]	; (476c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    4634:	0029      	movs	r1, r5
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    4636:	189b      	adds	r3, r3, r2
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    4638:	691b      	ldr	r3, [r3, #16]
    463a:	a808      	add	r0, sp, #32
    463c:	4798      	blx	r3
            rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    463e:	2116      	movs	r1, #22
    4640:	782b      	ldrb	r3, [r5, #0]
    4642:	a802      	add	r0, sp, #8
    4644:	9400      	str	r4, [sp, #0]
    4646:	1809      	adds	r1, r1, r0
    4648:	aa08      	add	r2, sp, #32
    464a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    464c:	f7ff ff6e 	bl	452c <_Z13build_rsp_msgP4mbufPhPcmh>
    4650:	0004      	movs	r4, r0
	uint8_t obs = false;
    4652:	9d03      	ldr	r5, [sp, #12]
        dlog(LOG_DEBUG, "crresourcehandler: GET status: %d len: %d bytes", rc, len);
    4654:	ab02      	add	r3, sp, #8
    4656:	7d9b      	ldrb	r3, [r3, #22]
    4658:	0022      	movs	r2, r4
    465a:	4945      	ldr	r1, [pc, #276]	; (4770 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a8>)
    465c:	2007      	movs	r0, #7
    465e:	f7ff fddb 	bl	4218 <_Z4dlogiPKcz>
        if (!rc)
    4662:	2c00      	cmp	r4, #0
    4664:	d14f      	bne.n	4706 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x13e>
			if (obs)
    4666:	2d00      	cmp	r5, #0
    4668:	d043      	beq.n	46f2 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x12a>
				rsp->code = COAP_RSP_203_VALID;
    466a:	2343      	movs	r3, #67	; 0x43
				rsp->plen = 0;
    466c:	643c      	str	r4, [r7, #64]	; 0x40
				rsp->code = COAP_RSP_203_VALID;
    466e:	70bb      	strb	r3, [r7, #2]
}
    4670:	2000      	movs	r0, #0
    4672:	b029      	add	sp, #164	; 0xa4
    4674:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (!coap_opt_strcmp(o, "sens"))
    4676:	493f      	ldr	r1, [pc, #252]	; (4774 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1ac>)
    4678:	9802      	ldr	r0, [sp, #8]
    467a:	f002 fa27 	bl	6acc <_Z15coap_opt_strcmpPK5optlvPKc>
    467e:	9002      	str	r0, [sp, #8]
    4680:	2800      	cmp	r0, #0
    4682:	d16a      	bne.n	475a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x192>
			if ((o = copt_get_next_opt_type((sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))) 
    4684:	0002      	movs	r2, r0
    4686:	2106      	movs	r1, #6
    4688:	0030      	movs	r0, r6
    468a:	f002 fa6f 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    468e:	1e06      	subs	r6, r0, #0
    4690:	d018      	beq.n	46c4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xfc>
				uint32_t obsval = co_uint32_n2h(o);
    4692:	f002 fa2d 	bl	6af0 <_Z13co_uint32_n2hPK5optlv>
				switch(obsval)
    4696:	2800      	cmp	r0, #0
    4698:	d003      	beq.n	46a2 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xda>
    469a:	2801      	cmp	r0, #1
    469c:	d009      	beq.n	46b2 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xea>
						rc = ERR_INVAL;
    469e:	2404      	movs	r4, #4
    46a0:	e00e      	b.n	46c0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xf8>
						rc = coap_obs_reg_sapi(sensor_info[sensor_id].observer_id);
    46a2:	4b32      	ldr	r3, [pc, #200]	; (476c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    46a4:	0164      	lsls	r4, r4, #5
    46a6:	191c      	adds	r4, r3, r4
    46a8:	7f60      	ldrb	r0, [r4, #29]
    46aa:	f002 fb0b 	bl	6cc4 <_Z17coap_obs_reg_sapih>
    46ae:	0004      	movs	r4, r0
						break;
    46b0:	e7d0      	b.n	4654 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
						rc = coap_obs_dereg_sapi(sensor_info[sensor_id].observer_id);
    46b2:	4b2e      	ldr	r3, [pc, #184]	; (476c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    46b4:	0164      	lsls	r4, r4, #5
    46b6:	191c      	adds	r4, r3, r4
    46b8:	7f60      	ldrb	r0, [r4, #29]
    46ba:	f002 fb17 	bl	6cec <_Z19coap_obs_dereg_sapih>
    46be:	0004      	movs	r4, r0
	uint8_t obs = false;
    46c0:	9d02      	ldr	r5, [sp, #8]
    46c2:	e7c7      	b.n	4654 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				uint8_t payloadlen = 0;
    46c4:	2517      	movs	r5, #23
    46c6:	ab02      	add	r3, sp, #8
    46c8:	18ed      	adds	r5, r5, r3
				SensorReadFuncPtr pReadSensor = sensor_info[sensor_id].read;
    46ca:	4b28      	ldr	r3, [pc, #160]	; (476c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    46cc:	0162      	lsls	r2, r4, #5
    46ce:	189b      	adds	r3, r3, r2
				uint8_t payloadlen = 0;
    46d0:	7028      	strb	r0, [r5, #0]
				sapi_error_t rcode = (*pReadSensor)(payload, &payloadlen);
    46d2:	0029      	movs	r1, r5
    46d4:	68db      	ldr	r3, [r3, #12]
    46d6:	a808      	add	r0, sp, #32
    46d8:	4798      	blx	r3
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    46da:	2116      	movs	r1, #22
    46dc:	782b      	ldrb	r3, [r5, #0]
    46de:	a802      	add	r0, sp, #8
    46e0:	9400      	str	r4, [sp, #0]
    46e2:	1809      	adds	r1, r1, r0
    46e4:	aa08      	add	r2, sp, #32
    46e6:	6d38      	ldr	r0, [r7, #80]	; 0x50
    46e8:	f7ff ff20 	bl	452c <_Z13build_rsp_msgP4mbufPhPcmh>
	uint8_t obs = false;
    46ec:	0035      	movs	r5, r6
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    46ee:	0004      	movs	r4, r0
    46f0:	e7b0      	b.n	4654 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				rsp->plen = len;
    46f2:	ab02      	add	r3, sp, #8
    46f4:	7d9b      	ldrb	r3, [r3, #22]
				rsp->cf = COAP_CF_CSV;
    46f6:	2202      	movs	r2, #2
				rsp->plen = len;
    46f8:	643b      	str	r3, [r7, #64]	; 0x40
				rsp->cf = COAP_CF_CSV;
    46fa:	003b      	movs	r3, r7
    46fc:	333c      	adds	r3, #60	; 0x3c
    46fe:	701a      	strb	r2, [r3, #0]
				rsp->code = COAP_RSP_205_CONTENT;
    4700:	2345      	movs	r3, #69	; 0x45
    4702:	70bb      	strb	r3, [r7, #2]
    4704:	e7b4      	b.n	4670 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
            switch (rc)
    4706:	2c04      	cmp	r4, #4
    4708:	d001      	beq.n	470e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
    470a:	2c14      	cmp	r4, #20
    470c:	d129      	bne.n	4762 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x19a>
			rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    470e:	2386      	movs	r3, #134	; 0x86
    4710:	e76b      	b.n	45ea <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    else if (req->code == COAP_REQUEST_PUT) 
    4712:	2d03      	cmp	r5, #3
    4714:	d000      	beq.n	4718 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x150>
    4716:	e774      	b.n	4602 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3a>
		len = o->ol;
    4718:	2617      	movs	r6, #23
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    471a:	4b14      	ldr	r3, [pc, #80]	; (476c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    471c:	0164      	lsls	r4, r4, #5
    471e:	191c      	adds	r4, r3, r4
    4720:	6963      	ldr	r3, [r4, #20]
		strncpy(payload, (char*)o->ov, len);
    4722:	ac08      	add	r4, sp, #32
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    4724:	9304      	str	r3, [sp, #16]
		len = o->ol;
    4726:	9b02      	ldr	r3, [sp, #8]
		strncpy(payload, (char*)o->ov, len);
    4728:	0020      	movs	r0, r4
		len = o->ol;
    472a:	789d      	ldrb	r5, [r3, #2]
    472c:	ab02      	add	r3, sp, #8
    472e:	18f6      	adds	r6, r6, r3
		strncpy(payload, (char*)o->ov, len);
    4730:	9b02      	ldr	r3, [sp, #8]
		len = o->ol;
    4732:	7035      	strb	r5, [r6, #0]
		strncpy(payload, (char*)o->ov, len);
    4734:	6859      	ldr	r1, [r3, #4]
    4736:	002a      	movs	r2, r5
    4738:	f007 fce1 	bl	c0fe <strncpy>
		payload[len] = '\0';
    473c:	466b      	mov	r3, sp
    473e:	7b1b      	ldrb	r3, [r3, #12]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    4740:	0031      	movs	r1, r6
		payload[len] = '\0';
    4742:	5563      	strb	r3, [r4, r5]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    4744:	0020      	movs	r0, r4
    4746:	9b04      	ldr	r3, [sp, #16]
    4748:	4798      	blx	r3
		if (rcode == SAPI_ERR_OK)
    474a:	2800      	cmp	r0, #0
    474c:	d103      	bne.n	4756 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x18e>
			rsp->code = COAP_RSP_204_CHANGED;
    474e:	2344      	movs	r3, #68	; 0x44
			rsp->plen = 0;
    4750:	6438      	str	r0, [r7, #64]	; 0x40
			rsp->code = COAP_RSP_204_CHANGED;
    4752:	70bb      	strb	r3, [r7, #2]
    4754:	e78c      	b.n	4670 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
		else if (rcode == SAPI_ERR_NOT_IMPLEMENTED)
    4756:	2801      	cmp	r0, #1
    4758:	d101      	bne.n	475e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x196>
			rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    475a:	23a1      	movs	r3, #161	; 0xa1
    475c:	e745      	b.n	45ea <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
		else if (rcode == SAPI_ERR_BAD_DATA)
    475e:	2804      	cmp	r0, #4
    4760:	d0d5      	beq.n	470e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    4762:	23a0      	movs	r3, #160	; 0xa0
    4764:	e741      	b.n	45ea <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	0000f210 	.word	0x0000f210
    476c:	20000a50 	.word	0x20000a50
    4770:	0000f219 	.word	0x0000f219
    4774:	0000f214 	.word	0x0000f214

00004778 <_Z6crsapiP12coap_msg_ctxS0_>:
{
    4778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    477a:	0006      	movs	r6, r0
	void *it = NULL;
    477c:	2400      	movs	r4, #0
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    477e:	364c      	adds	r6, #76	; 0x4c
    4780:	aa01      	add	r2, sp, #4
{
    4782:	0007      	movs	r7, r0
    4784:	000d      	movs	r5, r1
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    4786:	0030      	movs	r0, r6
    4788:	210b      	movs	r1, #11
	void *it = NULL;
    478a:	9401      	str	r4, [sp, #4]
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    478c:	f002 f9ee 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	if ((o = copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it)))
    4790:	0030      	movs	r0, r6
    4792:	aa01      	add	r2, sp, #4
    4794:	210b      	movs	r1, #11
    4796:	f002 f9e9 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    479a:	0006      	movs	r6, r0
    479c:	42a0      	cmp	r0, r4
    479e:	d017      	beq.n	47d0 <_Z6crsapiP12coap_msg_ctxS0_+0x58>
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    47a0:	4b0d      	ldr	r3, [pc, #52]	; (47d8 <_Z6crsapiP12coap_msg_ctxS0_+0x60>)
    47a2:	781b      	ldrb	r3, [r3, #0]
    47a4:	429c      	cmp	r4, r3
    47a6:	da11      	bge.n	47cc <_Z6crsapiP12coap_msg_ctxS0_+0x54>
			if (!coap_opt_strcmp(o, sensor_info[indx].devicetype))
    47a8:	490c      	ldr	r1, [pc, #48]	; (47dc <_Z6crsapiP12coap_msg_ctxS0_+0x64>)
    47aa:	0163      	lsls	r3, r4, #5
    47ac:	18c9      	adds	r1, r1, r3
    47ae:	0030      	movs	r0, r6
    47b0:	f002 f98c 	bl	6acc <_Z15coap_opt_strcmpPK5optlvPKc>
    47b4:	2800      	cmp	r0, #0
    47b6:	d106      	bne.n	47c6 <_Z6crsapiP12coap_msg_ctxS0_+0x4e>
				rc = crresourcehandler(req, rsp, it, indx);
    47b8:	0023      	movs	r3, r4
    47ba:	9a01      	ldr	r2, [sp, #4]
    47bc:	0029      	movs	r1, r5
    47be:	0038      	movs	r0, r7
    47c0:	f7ff ff02 	bl	45c8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>
}
    47c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    47c6:	3401      	adds	r4, #1
    47c8:	b2e4      	uxtb	r4, r4
    47ca:	e7e9      	b.n	47a0 <_Z6crsapiP12coap_msg_ctxS0_+0x28>
		rsp->code = COAP_RSP_404_NOT_FOUND;
    47cc:	2384      	movs	r3, #132	; 0x84
    47ce:	70ab      	strb	r3, [r5, #2]
	rsp->plen = 0;
    47d0:	2000      	movs	r0, #0
    47d2:	6428      	str	r0, [r5, #64]	; 0x40
	return ERR_OK;
    47d4:	e7f6      	b.n	47c4 <_Z6crsapiP12coap_msg_ctxS0_+0x4c>
    47d6:	46c0      	nop			; (mov r8, r8)
    47d8:	20000944 	.word	0x20000944
    47dc:	20000a50 	.word	0x20000a50

000047e0 <_Z24sapi_observation_handlerP4mbufPhh>:
{
    47e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t payloadlen = 0;
    47e2:	250f      	movs	r5, #15
{
    47e4:	b0a7      	sub	sp, #156	; 0x9c
	uint8_t payloadlen = 0;
    47e6:	ab02      	add	r3, sp, #8
    47e8:	18ed      	adds	r5, r5, r3
    47ea:	2300      	movs	r3, #0
{
    47ec:	000f      	movs	r7, r1
    47ee:	0016      	movs	r6, r2
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    47f0:	4c0b      	ldr	r4, [pc, #44]	; (4820 <_Z24sapi_observation_handlerP4mbufPhh+0x40>)
	uint8_t payloadlen = 0;
    47f2:	702b      	strb	r3, [r5, #0]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    47f4:	0153      	lsls	r3, r2, #5
    47f6:	18e4      	adds	r4, r4, r3
    47f8:	0022      	movs	r2, r4
{
    47fa:	9003      	str	r0, [sp, #12]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    47fc:	4909      	ldr	r1, [pc, #36]	; (4824 <_Z24sapi_observation_handlerP4mbufPhh+0x44>)
    47fe:	2007      	movs	r0, #7
    4800:	f7ff fd0a 	bl	4218 <_Z4dlogiPKcz>
	sapi_error_t rcode = (*pReadFunc)(payload, &payloadlen);
    4804:	68e3      	ldr	r3, [r4, #12]
    4806:	0029      	movs	r1, r5
    4808:	a806      	add	r0, sp, #24
    480a:	4798      	blx	r3
	error_t rc = build_rsp_msg(m, len, payload, payloadlen, sensor_id);
    480c:	782b      	ldrb	r3, [r5, #0]
    480e:	aa06      	add	r2, sp, #24
    4810:	9600      	str	r6, [sp, #0]
    4812:	0039      	movs	r1, r7
    4814:	9803      	ldr	r0, [sp, #12]
    4816:	f7ff fe89 	bl	452c <_Z13build_rsp_msgP4mbufPhPcmh>
}
    481a:	b027      	add	sp, #156	; 0x9c
    481c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    481e:	46c0      	nop			; (mov r8, r8)
    4820:	20000a50 	.word	0x20000a50
    4824:	0000f273 	.word	0x0000f273

00004828 <_Z9crarduinoP12coap_msg_ctxS0_>:
//
//////////////////////////////////////////////////////////////////////////
error_t crarduino( struct coap_msg_ctx *req, struct coap_msg_ctx *rsp )
{
	// Dummy. Should not be called!
	rsp->code = COAP_RSP_404_NOT_FOUND;
    4828:	2384      	movs	r3, #132	; 0x84
    482a:	708b      	strb	r3, [r1, #2]
	rsp->plen = 0;
    482c:	2300      	movs	r3, #0
	return ERR_FAIL;
}
    482e:	2063      	movs	r0, #99	; 0x63
	rsp->plen = 0;
    4830:	640b      	str	r3, [r1, #64]	; 0x40
}
    4832:	4770      	bx	lr

00004834 <_Z15sapi_log_bannerv>:
//
// Helper function to print a banner in the log.
//
//////////////////////////////////////////////////////////////////////////
void sapi_log_banner()
{
    4834:	b500      	push	{lr}
    4836:	b091      	sub	sp, #68	; 0x44
	// Log Banner: version number, time and date
	char ver[64];
	strcpy(ver, COAP_SERVER_VERSION_STRING);
    4838:	4915      	ldr	r1, [pc, #84]	; (4890 <_Z15sapi_log_bannerv+0x5c>)
    483a:	4668      	mov	r0, sp
    483c:	f007 fc3f 	bl	c0be <strcpy>
	strcat(ver, COAP_SERVER_VERSION_NUMBER);
    4840:	4914      	ldr	r1, [pc, #80]	; (4894 <_Z15sapi_log_bannerv+0x60>)
    4842:	4668      	mov	r0, sp
    4844:	f007 fc24 	bl	c090 <strcat>
	println(ver);
    4848:	4668      	mov	r0, sp
    484a:	f7ff fd59 	bl	4300 <_Z7printlnPKc>
	
	strcpy(ver, SAPI_VERSION_STRING);
    484e:	4912      	ldr	r1, [pc, #72]	; (4898 <_Z15sapi_log_bannerv+0x64>)
    4850:	4668      	mov	r0, sp
    4852:	f007 fc34 	bl	c0be <strcpy>
	strcat(ver, SAPI_VERSION_NUMBER);
    4856:	4911      	ldr	r1, [pc, #68]	; (489c <_Z15sapi_log_bannerv+0x68>)
    4858:	4668      	mov	r0, sp
    485a:	f007 fc19 	bl	c090 <strcat>
	println(ver);
    485e:	4668      	mov	r0, sp
    4860:	f7ff fd4e 	bl	4300 <_Z7printlnPKc>
	
	sprintf(ver, "Build Time: %s  Date: %s", __TIME__, __DATE__);
    4864:	4b0e      	ldr	r3, [pc, #56]	; (48a0 <_Z15sapi_log_bannerv+0x6c>)
    4866:	4a0f      	ldr	r2, [pc, #60]	; (48a4 <_Z15sapi_log_bannerv+0x70>)
    4868:	490f      	ldr	r1, [pc, #60]	; (48a8 <_Z15sapi_log_bannerv+0x74>)
    486a:	4668      	mov	r0, sp
    486c:	f007 fbee 	bl	c04c <siprintf>
	println(ver);
    4870:	4668      	mov	r0, sp
    4872:	f7ff fd45 	bl	4300 <_Z7printlnPKc>
	println("");
    4876:	480d      	ldr	r0, [pc, #52]	; (48ac <_Z15sapi_log_bannerv+0x78>)
    4878:	f7ff fd42 	bl	4300 <_Z7printlnPKc>
	
	// Log free memory
	int freeram = free_ram();
    487c:	f7ff fd6c 	bl	4358 <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    4880:	490b      	ldr	r1, [pc, #44]	; (48b0 <_Z15sapi_log_bannerv+0x7c>)
	int freeram = free_ram();
    4882:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    4884:	2007      	movs	r0, #7
    4886:	f7ff fcc7 	bl	4218 <_Z4dlogiPKcz>
}
    488a:	b011      	add	sp, #68	; 0x44
    488c:	bd00      	pop	{pc}
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	0000f1ab 	.word	0x0000f1ab
    4894:	0000f1c9 	.word	0x0000f1c9
    4898:	0000f1cf 	.word	0x0000f1cf
    489c:	0000f1dc 	.word	0x0000f1dc
    48a0:	0000f1e2 	.word	0x0000f1e2
    48a4:	0000f1ee 	.word	0x0000f1ee
    48a8:	0000f1f7 	.word	0x0000f1f7
    48ac:	0000f47e 	.word	0x0000f47e
    48b0:	0000f192 	.word	0x0000f192

000048b4 <_Z15sapi_initializePc>:
{
    48b4:	b507      	push	{r0, r1, r2, lr}
	is_sapi = 1;
    48b6:	2201      	movs	r2, #1
    48b8:	4b19      	ldr	r3, [pc, #100]	; (4920 <_Z15sapi_initializePc+0x6c>)
{
    48ba:	0001      	movs	r1, r0
	is_sapi = 1;
    48bc:	701a      	strb	r2, [r3, #0]
	sensor_info_index = 0;
    48be:	2200      	movs	r2, #0
    48c0:	4b18      	ldr	r3, [pc, #96]	; (4924 <_Z15sapi_initializePc+0x70>)
    48c2:	4819      	ldr	r0, [pc, #100]	; (4928 <_Z15sapi_initializePc+0x74>)
    48c4:	701a      	strb	r2, [r3, #0]
	if (url_classifier == NULL)
    48c6:	4291      	cmp	r1, r2
    48c8:	d128      	bne.n	491c <_Z15sapi_initializePc+0x68>
		strncpy(classifier, DEFAULT_CLASSIFIER, CLASSIFIER_MAX_LEN);
    48ca:	4918      	ldr	r1, [pc, #96]	; (492c <_Z15sapi_initializePc+0x78>)
    48cc:	3210      	adds	r2, #16
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    48ce:	f007 fc16 	bl	c0fe <strncpy>
	rtc_time_init(LOCAL_TIME_ZONE);
    48d2:	2008      	movs	r0, #8
    48d4:	4240      	negs	r0, r0
    48d6:	f7ff fbef 	bl	40b8 <_Z13rtc_time_initl>
	log_init(SER_MON_PTR, SER_MON_BAUD_RATE, LOG_LEVEL);
    48da:	21e1      	movs	r1, #225	; 0xe1
    48dc:	2207      	movs	r2, #7
    48de:	0249      	lsls	r1, r1, #9
    48e0:	4813      	ldr	r0, [pc, #76]	; (4930 <_Z15sapi_initializePc+0x7c>)
    48e2:	f7ff fc77 	bl	41d4 <_Z8log_initP7Serial_mm>
	pinMode(MNIC_WAKEUP_PIN, OUTPUT);
    48e6:	2101      	movs	r1, #1
    48e8:	2009      	movs	r0, #9
    48ea:	f7ff f8ed 	bl	3ac8 <pinMode>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    48ee:	2101      	movs	r1, #1
    48f0:	2009      	movs	r0, #9
    48f2:	f7ff f8ed 	bl	3ad0 <digitalWrite>
	coap_s_init(UART_PTR, COAP_MSG_MAX_AGE_IN_SECS, HDLC_UART_TIMEOUT_IN_MS, HDLC_MAX_PAYLOAD_LEN, "", NULL);
    48f6:	2300      	movs	r3, #0
    48f8:	22fa      	movs	r2, #250	; 0xfa
    48fa:	9301      	str	r3, [sp, #4]
    48fc:	4b0d      	ldr	r3, [pc, #52]	; (4934 <_Z15sapi_initializePc+0x80>)
    48fe:	00d2      	lsls	r2, r2, #3
    4900:	215a      	movs	r1, #90	; 0x5a
    4902:	9300      	str	r3, [sp, #0]
    4904:	480c      	ldr	r0, [pc, #48]	; (4938 <_Z15sapi_initializePc+0x84>)
    4906:	23ff      	movs	r3, #255	; 0xff
    4908:	f002 fc92 	bl	7230 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>
	coap_put_ic_reboot_event();
    490c:	f002 fc5e 	bl	71cc <_Z24coap_put_ic_reboot_eventv>
	delay(50);
    4910:	2032      	movs	r0, #50	; 0x32
    4912:	f7fd fedd 	bl	26d0 <delay>
	sapi_log_banner();
    4916:	f7ff ff8d 	bl	4834 <_Z15sapi_log_bannerv>
}
    491a:	bd07      	pop	{r0, r1, r2, pc}
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    491c:	2210      	movs	r2, #16
    491e:	e7d6      	b.n	48ce <_Z15sapi_initializePc+0x1a>
    4920:	20000049 	.word	0x20000049
    4924:	20000944 	.word	0x20000944
    4928:	2000009c 	.word	0x2000009c
    492c:	0000f1a3 	.word	0x0000f1a3
    4930:	20000d1c 	.word	0x20000d1c
    4934:	0000f47e 	.word	0x0000f47e
    4938:	20000b8c 	.word	0x20000b8c

0000493c <_GLOBAL__sub_I_flash>:
}
    493c:	b510      	push	{r4, lr}
SPIFlash flash;
    493e:	4a03      	ldr	r2, [pc, #12]	; (494c <_GLOBAL__sub_I_flash+0x10>)
    4940:	210a      	movs	r1, #10
    4942:	4803      	ldr	r0, [pc, #12]	; (4950 <_GLOBAL__sub_I_flash+0x14>)
    4944:	f001 faa0 	bl	5e88 <_ZN8SPIFlashC1EhP8SPIClass>
}
    4948:	bd10      	pop	{r4, pc}
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	20000d54 	.word	0x20000d54
    4950:	20000948 	.word	0x20000948

00004954 <_Z13readSerialStrv>:
String readSerialStr() {
    4954:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4956:	0005      	movs	r5, r0
	String str = "";
    4958:	4916      	ldr	r1, [pc, #88]	; (49b4 <_Z13readSerialStrv+0x60>)
    495a:	a801      	add	r0, sp, #4
    495c:	f000 fe50 	bl	5600 <_ZN6StringC1EPKc>
	inChar = Serial.read();
    4960:	4e15      	ldr	r6, [pc, #84]	; (49b8 <_Z13readSerialStrv+0x64>)
    4962:	0030      	movs	r0, r6
    4964:	f000 fd18 	bl	5398 <_ZN7Serial_4readEv>
    4968:	b2c4      	uxtb	r4, r0
	while (inChar != '.') {
    496a:	2c2e      	cmp	r4, #46	; 0x2e
    496c:	d015      	beq.n	499a <_Z13readSerialStrv+0x46>
		if (inChar != 255)
    496e:	2cff      	cmp	r4, #255	; 0xff
    4970:	d0f7      	beq.n	4962 <_Z13readSerialStrv+0xe>
	String & operator += (char c)			{concat(c); return (*this);}
    4972:	0021      	movs	r1, r4
    4974:	a801      	add	r0, sp, #4
    4976:	f000 fea4 	bl	56c2 <_ZN6String6concatEc>
		if (inChar == '$')
    497a:	2c24      	cmp	r4, #36	; 0x24
    497c:	d109      	bne.n	4992 <_Z13readSerialStrv+0x3e>
		return "$";
    497e:	490f      	ldr	r1, [pc, #60]	; (49bc <_Z13readSerialStrv+0x68>)
		return "#";
    4980:	0028      	movs	r0, r5
    4982:	f000 fe3d 	bl	5600 <_ZN6StringC1EPKc>
	String str = "";
    4986:	a801      	add	r0, sp, #4
    4988:	f000 fdf2 	bl	5570 <_ZN6StringD1Ev>
}
    498c:	0028      	movs	r0, r5
    498e:	b004      	add	sp, #16
    4990:	bd70      	pop	{r4, r5, r6, pc}
		if (inChar == '#')
    4992:	2c23      	cmp	r4, #35	; 0x23
    4994:	d1e5      	bne.n	4962 <_Z13readSerialStrv+0xe>
		return "#";
    4996:	490a      	ldr	r1, [pc, #40]	; (49c0 <_Z13readSerialStrv+0x6c>)
    4998:	e7f2      	b.n	4980 <_Z13readSerialStrv+0x2c>
    499a:	0021      	movs	r1, r4
    499c:	a801      	add	r0, sp, #4
    499e:	f000 fe90 	bl	56c2 <_ZN6String6concatEc>
    49a2:	2100      	movs	r1, #0
    49a4:	a801      	add	r0, sp, #4
    49a6:	f000 fe8c 	bl	56c2 <_ZN6String6concatEc>
	return str;
    49aa:	a901      	add	r1, sp, #4
    49ac:	0028      	movs	r0, r5
    49ae:	f000 fdd1 	bl	5554 <_ZN6StringC1EOS_>
    49b2:	e7e8      	b.n	4986 <_Z13readSerialStrv+0x32>
    49b4:	0000f47e 	.word	0x0000f47e
    49b8:	20000d1c 	.word	0x20000d1c
    49bc:	0000f19f 	.word	0x0000f19f
    49c0:	0000f1a1 	.word	0x0000f1a1

000049c4 <_Z6GoHerev>:
void GoHere(){
    49c4:	b510      	push	{r4, lr}
    49c6:	b086      	sub	sp, #24
	String str = readSerialStr();
    49c8:	4668      	mov	r0, sp
    49ca:	f7ff ffc3 	bl	4954 <_Z13readSerialStrv>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    49ce:	491a      	ldr	r1, [pc, #104]	; (4a38 <_Z6GoHerev+0x74>)
    49d0:	4668      	mov	r0, sp
    49d2:	f000 fe80 	bl	56d6 <_ZNK6String6equalsEPKc>
    49d6:	4c19      	ldr	r4, [pc, #100]	; (4a3c <_Z6GoHerev+0x78>)
	if (str == "$")
    49d8:	2800      	cmp	r0, #0
    49da:	d00f      	beq.n	49fc <_Z6GoHerev+0x38>
	Serial.println(getString(addr));
    49dc:	2101      	movs	r1, #1
    49de:	a803      	add	r0, sp, #12
    49e0:	f7ff fccc 	bl	437c <_Z9getStringi>
	Serial.println(getID());
    49e4:	a903      	add	r1, sp, #12
    49e6:	0020      	movs	r0, r4
    49e8:	f000 f922 	bl	4c30 <_ZN5Print7printlnERK6String>
    49ec:	a803      	add	r0, sp, #12
    49ee:	f000 fdbf 	bl	5570 <_ZN6StringD1Ev>
	String str = readSerialStr();
    49f2:	4668      	mov	r0, sp
    49f4:	f000 fdbc 	bl	5570 <_ZN6StringD1Ev>
}
    49f8:	b006      	add	sp, #24
    49fa:	bd10      	pop	{r4, pc}
    49fc:	4910      	ldr	r1, [pc, #64]	; (4a40 <_Z6GoHerev+0x7c>)
    49fe:	4668      	mov	r0, sp
    4a00:	f000 fe69 	bl	56d6 <_ZNK6String6equalsEPKc>
	else if (str == "#")
    4a04:	2800      	cmp	r0, #0
    4a06:	d003      	beq.n	4a10 <_Z6GoHerev+0x4c>
	Serial.println(getID());
    4a08:	a803      	add	r0, sp, #12
    4a0a:	f7ff fceb 	bl	43e4 <_Z5getIDv>
    4a0e:	e7e9      	b.n	49e4 <_Z6GoHerev+0x20>
		eraseBlock();
    4a10:	f7ff fcac 	bl	436c <_Z10eraseBlockv>
		if (flash.writeStr(addr, str)) {
    4a14:	2301      	movs	r3, #1
    4a16:	466a      	mov	r2, sp
    4a18:	0019      	movs	r1, r3
    4a1a:	480a      	ldr	r0, [pc, #40]	; (4a44 <_Z6GoHerev+0x80>)
    4a1c:	f001 fada 	bl	5fd4 <_ZN8SPIFlash8writeStrEmR6Stringb>
    4a20:	2800      	cmp	r0, #0
    4a22:	d004      	beq.n	4a2e <_Z6GoHerev+0x6a>
			Serial.println("complete");
    4a24:	4908      	ldr	r1, [pc, #32]	; (4a48 <_Z6GoHerev+0x84>)
    4a26:	0020      	movs	r0, r4
    4a28:	f000 f90c 	bl	4c44 <_ZN5Print7printlnEPKc>
    4a2c:	e7e1      	b.n	49f2 <_Z6GoHerev+0x2e>
			Serial.print("failed");
    4a2e:	4907      	ldr	r1, [pc, #28]	; (4a4c <_Z6GoHerev+0x88>)
    4a30:	0020      	movs	r0, r4
    4a32:	f000 f8e2 	bl	4bfa <_ZN5Print5printEPKc>
    4a36:	e7dc      	b.n	49f2 <_Z6GoHerev+0x2e>
    4a38:	0000f19f 	.word	0x0000f19f
    4a3c:	20000d1c 	.word	0x20000d1c
    4a40:	0000f1a1 	.word	0x0000f1a1
    4a44:	20000948 	.word	0x20000948
    4a48:	0000f28f 	.word	0x0000f28f
    4a4c:	0000f298 	.word	0x0000f298

00004a50 <_Z8sapi_runv>:
{
    4a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(initBoot){ 
    4a52:	4e14      	ldr	r6, [pc, #80]	; (4aa4 <_Z8sapi_runv+0x54>)
    4a54:	7833      	ldrb	r3, [r6, #0]
    4a56:	2b00      	cmp	r3, #0
    4a58:	d022      	beq.n	4aa0 <_Z8sapi_runv+0x50>
		Serial.println("Enter any key to go to BootProgram"); 
    4a5a:	4d13      	ldr	r5, [pc, #76]	; (4aa8 <_Z8sapi_runv+0x58>)
    4a5c:	4913      	ldr	r1, [pc, #76]	; (4aac <_Z8sapi_runv+0x5c>)
    4a5e:	0028      	movs	r0, r5
    4a60:	f000 f8f0 	bl	4c44 <_ZN5Print7printlnEPKc>
		delay(1000); 
    4a64:	27fa      	movs	r7, #250	; 0xfa
		flash.begin(); 
    4a66:	2100      	movs	r1, #0
    4a68:	4811      	ldr	r0, [pc, #68]	; (4ab0 <_Z8sapi_runv+0x60>)
    4a6a:	f001 fa5f 	bl	5f2c <_ZN8SPIFlash5beginEm>
    4a6e:	2405      	movs	r4, #5
		delay(1000); 
    4a70:	00bf      	lsls	r7, r7, #2
			if(Serial.available()){
    4a72:	0028      	movs	r0, r5
    4a74:	f000 fc68 	bl	5348 <_ZN7Serial_9availableEv>
    4a78:	2800      	cmp	r0, #0
    4a7a:	d00a      	beq.n	4a92 <_Z8sapi_runv+0x42>
				input = Serial.read();
    4a7c:	0028      	movs	r0, r5
    4a7e:	f000 fc8b 	bl	5398 <_ZN7Serial_4readEv>
    4a82:	4b0c      	ldr	r3, [pc, #48]	; (4ab4 <_Z8sapi_runv+0x64>)
    4a84:	b2c1      	uxtb	r1, r0
				Serial.println(input);
    4a86:	0028      	movs	r0, r5
				input = Serial.read();
    4a88:	7019      	strb	r1, [r3, #0]
				Serial.println(input);
    4a8a:	f000 f8e5 	bl	4c58 <_ZN5Print7printlnEc>
				GoHere();
    4a8e:	f7ff ff99 	bl	49c4 <_Z6GoHerev>
		delay(1000); 
    4a92:	0038      	movs	r0, r7
    4a94:	3c01      	subs	r4, #1
    4a96:	f7fd fe1b 	bl	26d0 <delay>
		for (int i = 0; i < 5;i++){
    4a9a:	2c00      	cmp	r4, #0
    4a9c:	d1e9      	bne.n	4a72 <_Z8sapi_runv+0x22>
		initBoot = false;
    4a9e:	7034      	strb	r4, [r6, #0]
}
    4aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4aa2:	46c0      	nop			; (mov r8, r8)
    4aa4:	20000048 	.word	0x20000048
    4aa8:	20000d1c 	.word	0x20000d1c
    4aac:	0000f29f 	.word	0x0000f29f
    4ab0:	20000948 	.word	0x20000948
    4ab4:	20000a4c 	.word	0x20000a4c

00004ab8 <SERCOM4_Handler>:

    void SERCOM4_3_Handler(void) {
      Serial1.errorHandler();
    }
  #else
    void SERCOM4_Handler()  {
    4ab8:	b510      	push	{r4, lr}
      Serial1.IrqHandler();
    4aba:	4802      	ldr	r0, [pc, #8]	; (4ac4 <SERCOM4_Handler+0xc>)
    4abc:	f000 fb16 	bl	50ec <_ZN4Uart10IrqHandlerEv>
    }
    4ac0:	bd10      	pop	{r4, pc}
    4ac2:	46c0      	nop			; (mov r8, r8)
    4ac4:	20000ad0 	.word	0x20000ad0

00004ac8 <SERCOM0_Handler>:

    void SERCOM2_3_Handler(void) {
      Serial2.errorHandler();
    }
  #else
    void SERCOM0_Handler()  {
    4ac8:	b510      	push	{r4, lr}
      Serial2.IrqHandler();
    4aca:	4802      	ldr	r0, [pc, #8]	; (4ad4 <SERCOM0_Handler+0xc>)
    4acc:	f000 fb0e 	bl	50ec <_ZN4Uart10IrqHandlerEv>
    }
    4ad0:	bd10      	pop	{r4, pc}
    4ad2:	46c0      	nop			; (mov r8, r8)
    4ad4:	20000b8c 	.word	0x20000b8c

00004ad8 <SERCOM3_Handler>:

    void SERCOM3_3_Handler(void) {
      Serial3.errorHandler();
    }
  #else
    void SERCOM3_Handler()  {
    4ad8:	b510      	push	{r4, lr}
      Serial3.IrqHandler();
    4ada:	4802      	ldr	r0, [pc, #8]	; (4ae4 <SERCOM3_Handler+0xc>)
    4adc:	f000 fb06 	bl	50ec <_ZN4Uart10IrqHandlerEv>
    }
    4ae0:	bd10      	pop	{r4, pc}
    4ae2:	46c0      	nop			; (mov r8, r8)
    4ae4:	20000c48 	.word	0x20000c48

00004ae8 <_GLOBAL__sub_I_g_APinDescription>:
    4ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
SERCOM sercom0( SERCOM0 ) ;
    4aea:	2184      	movs	r1, #132	; 0x84
    4aec:	4f1a      	ldr	r7, [pc, #104]	; (4b58 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    4aee:	05c9      	lsls	r1, r1, #23
    4af0:	0038      	movs	r0, r7
    4af2:	f000 f90a 	bl	4d0a <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    4af6:	4919      	ldr	r1, [pc, #100]	; (4b5c <_GLOBAL__sub_I_g_APinDescription+0x74>)
    4af8:	4819      	ldr	r0, [pc, #100]	; (4b60 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    4afa:	f000 f906 	bl	4d0a <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    4afe:	4919      	ldr	r1, [pc, #100]	; (4b64 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    4b00:	4819      	ldr	r0, [pc, #100]	; (4b68 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    4b02:	f000 f902 	bl	4d0a <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    4b06:	4d19      	ldr	r5, [pc, #100]	; (4b6c <_GLOBAL__sub_I_g_APinDescription+0x84>)
    4b08:	4919      	ldr	r1, [pc, #100]	; (4b70 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    4b0a:	0028      	movs	r0, r5
    4b0c:	f000 f8fd 	bl	4d0a <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    4b10:	4e18      	ldr	r6, [pc, #96]	; (4b74 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    4b12:	4919      	ldr	r1, [pc, #100]	; (4b78 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    4b14:	0030      	movs	r0, r6
    4b16:	f000 f8f8 	bl	4d0a <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    4b1a:	4918      	ldr	r1, [pc, #96]	; (4b7c <_GLOBAL__sub_I_g_APinDescription+0x94>)
    4b1c:	4818      	ldr	r0, [pc, #96]	; (4b80 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    4b1e:	f000 f8f4 	bl	4d0a <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    4b22:	2401      	movs	r4, #1
    4b24:	2300      	movs	r3, #0
    4b26:	0031      	movs	r1, r6
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    4b28:	2603      	movs	r6, #3
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    4b2a:	9301      	str	r3, [sp, #4]
    4b2c:	0022      	movs	r2, r4
    4b2e:	9400      	str	r4, [sp, #0]
    4b30:	4814      	ldr	r0, [pc, #80]	; (4b84 <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    4b32:	f000 faad 	bl	5090 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    4b36:	0039      	movs	r1, r7
    4b38:	9600      	str	r6, [sp, #0]
    4b3a:	9401      	str	r4, [sp, #4]
    4b3c:	230a      	movs	r3, #10
    4b3e:	220b      	movs	r2, #11
    4b40:	4811      	ldr	r0, [pc, #68]	; (4b88 <_GLOBAL__sub_I_g_APinDescription+0xa0>)
    4b42:	f000 faa5 	bl	5090 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial3( SERCOM_INSTANCE_SERIAL3, PIN_SERIAL3_RX, PIN_SERIAL3_TX, PAD_SERIAL3_RX, PAD_SERIAL3_TX ) ;
    4b46:	9600      	str	r6, [sp, #0]
    4b48:	0029      	movs	r1, r5
    4b4a:	9401      	str	r4, [sp, #4]
    4b4c:	2312      	movs	r3, #18
    4b4e:	2213      	movs	r2, #19
    4b50:	480e      	ldr	r0, [pc, #56]	; (4b8c <_GLOBAL__sub_I_g_APinDescription+0xa4>)
    4b52:	f000 fa9d 	bl	5090 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    }
    4b56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4b58:	20000d04 	.word	0x20000d04
    4b5c:	42000400 	.word	0x42000400
    4b60:	20000d08 	.word	0x20000d08
    4b64:	42000800 	.word	0x42000800
    4b68:	20000d0c 	.word	0x20000d0c
    4b6c:	20000d10 	.word	0x20000d10
    4b70:	42000c00 	.word	0x42000c00
    4b74:	20000d14 	.word	0x20000d14
    4b78:	42001000 	.word	0x42001000
    4b7c:	43000400 	.word	0x43000400
    4b80:	20000d18 	.word	0x20000d18
    4b84:	20000ad0 	.word	0x20000ad0
    4b88:	20000b8c 	.word	0x20000b8c
    4b8c:	20000c48 	.word	0x20000c48

00004b90 <_Znwj>:
    4b90:	b510      	push	{r4, lr}
    4b92:	f006 f943 	bl	ae1c <malloc>
    4b96:	bd10      	pop	{r4, pc}

00004b98 <_ZdlPv>:
    4b98:	b510      	push	{r4, lr}
    4b9a:	f006 f949 	bl	ae30 <free>
    4b9e:	bd10      	pop	{r4, pc}

00004ba0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ba2:	0006      	movs	r6, r0
    4ba4:	000d      	movs	r5, r1
    4ba6:	000c      	movs	r4, r1
    4ba8:	188b      	adds	r3, r1, r2
    4baa:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    4bac:	9b01      	ldr	r3, [sp, #4]
    4bae:	1b67      	subs	r7, r4, r5
    4bb0:	429c      	cmp	r4, r3
    4bb2:	d007      	beq.n	4bc4 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    4bb4:	6833      	ldr	r3, [r6, #0]
    4bb6:	7821      	ldrb	r1, [r4, #0]
    4bb8:	681b      	ldr	r3, [r3, #0]
    4bba:	0030      	movs	r0, r6
    4bbc:	4798      	blx	r3
    4bbe:	3401      	adds	r4, #1
    4bc0:	2800      	cmp	r0, #0
    4bc2:	d1f3      	bne.n	4bac <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    4bc4:	0038      	movs	r0, r7
    4bc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004bc8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    4bc8:	b570      	push	{r4, r5, r6, lr}
    4bca:	0005      	movs	r5, r0
    4bcc:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    4bce:	1e08      	subs	r0, r1, #0
    4bd0:	d007      	beq.n	4be2 <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    4bd2:	f007 fa7c 	bl	c0ce <strlen>
    4bd6:	682b      	ldr	r3, [r5, #0]
    4bd8:	0002      	movs	r2, r0
    4bda:	685b      	ldr	r3, [r3, #4]
    4bdc:	0021      	movs	r1, r4
    4bde:	0028      	movs	r0, r5
    4be0:	4798      	blx	r3
    }
    4be2:	bd70      	pop	{r4, r5, r6, pc}

00004be4 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    4be4:	b510      	push	{r4, lr}
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4be6:	f7ff ffef 	bl	4bc8 <_ZN5Print5writeEPKc>
}
    4bea:	bd10      	pop	{r4, pc}

00004bec <_ZN5Print5printERK6String>:
{
    4bec:	b510      	push	{r4, lr}
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    4bee:	6803      	ldr	r3, [r0, #0]
    4bf0:	688a      	ldr	r2, [r1, #8]
    4bf2:	685b      	ldr	r3, [r3, #4]
    4bf4:	6809      	ldr	r1, [r1, #0]
    4bf6:	4798      	blx	r3
}
    4bf8:	bd10      	pop	{r4, pc}

00004bfa <_ZN5Print5printEPKc>:
{
    4bfa:	b510      	push	{r4, lr}
  return write(str);
    4bfc:	f7ff ffe4 	bl	4bc8 <_ZN5Print5writeEPKc>
}
    4c00:	bd10      	pop	{r4, pc}

00004c02 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    4c02:	b510      	push	{r4, lr}
  return write(c);
    4c04:	6803      	ldr	r3, [r0, #0]
    4c06:	681b      	ldr	r3, [r3, #0]
    4c08:	4798      	blx	r3
}
    4c0a:	bd10      	pop	{r4, pc}

00004c0c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    4c0c:	b510      	push	{r4, lr}
  return write("\r\n");
    4c0e:	4902      	ldr	r1, [pc, #8]	; (4c18 <_ZN5Print7printlnEv+0xc>)
    4c10:	f7ff ffda 	bl	4bc8 <_ZN5Print5writeEPKc>
}
    4c14:	bd10      	pop	{r4, pc}
    4c16:	46c0      	nop			; (mov r8, r8)
    4c18:	0000f47c 	.word	0x0000f47c

00004c1c <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
    4c1c:	b570      	push	{r4, r5, r6, lr}
    4c1e:	0004      	movs	r4, r0
  return write(str);
    4c20:	f7ff ffd2 	bl	4bc8 <_ZN5Print5writeEPKc>
    4c24:	0005      	movs	r5, r0
  n += println();
    4c26:	0020      	movs	r0, r4
    4c28:	f7ff fff0 	bl	4c0c <_ZN5Print7printlnEv>
    4c2c:	1940      	adds	r0, r0, r5
}
    4c2e:	bd70      	pop	{r4, r5, r6, pc}

00004c30 <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
    4c30:	b570      	push	{r4, r5, r6, lr}
    4c32:	0005      	movs	r5, r0
  size_t n = print(s);
    4c34:	f7ff ffda 	bl	4bec <_ZN5Print5printERK6String>
    4c38:	0004      	movs	r4, r0
  n += println();
    4c3a:	0028      	movs	r0, r5
    4c3c:	f7ff ffe6 	bl	4c0c <_ZN5Print7printlnEv>
    4c40:	1820      	adds	r0, r4, r0
  return n;
}
    4c42:	bd70      	pop	{r4, r5, r6, pc}

00004c44 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    4c44:	b570      	push	{r4, r5, r6, lr}
    4c46:	0004      	movs	r4, r0
  return write(str);
    4c48:	f7ff ffbe 	bl	4bc8 <_ZN5Print5writeEPKc>
    4c4c:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    4c4e:	0020      	movs	r0, r4
    4c50:	f7ff ffdc 	bl	4c0c <_ZN5Print7printlnEv>
    4c54:	1940      	adds	r0, r0, r5
  return n;
}
    4c56:	bd70      	pop	{r4, r5, r6, pc}

00004c58 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    4c58:	b570      	push	{r4, r5, r6, lr}
    4c5a:	0005      	movs	r5, r0
  size_t n = print(c);
    4c5c:	f7ff ffd1 	bl	4c02 <_ZN5Print5printEc>
    4c60:	0004      	movs	r4, r0
  n += println();
    4c62:	0028      	movs	r0, r5
    4c64:	f7ff ffd2 	bl	4c0c <_ZN5Print7printlnEv>
    4c68:	1820      	adds	r0, r4, r0
  return n;
}
    4c6a:	bd70      	pop	{r4, r5, r6, pc}

00004c6c <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    4c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c6e:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4c70:	2200      	movs	r2, #0
{
    4c72:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
    4c74:	ab02      	add	r3, sp, #8
    4c76:	3305      	adds	r3, #5
{
    4c78:	9001      	str	r0, [sp, #4]
    4c7a:	000d      	movs	r5, r1
  *str = '\0';
    4c7c:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4c7e:	2e01      	cmp	r6, #1
    4c80:	dc00      	bgt.n	4c84 <_ZN5Print11printNumberEmh+0x18>
    4c82:	260a      	movs	r6, #10
    4c84:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    4c86:	0028      	movs	r0, r5
    4c88:	0031      	movs	r1, r6
    4c8a:	f003 f833 	bl	7cf4 <__aeabi_uidivmod>
    4c8e:	000f      	movs	r7, r1
    4c90:	b2cb      	uxtb	r3, r1
    n /= base;
    4c92:	0028      	movs	r0, r5
    4c94:	0031      	movs	r1, r6
    char c = n % base;
    4c96:	9300      	str	r3, [sp, #0]
    n /= base;
    4c98:	f002 ffa6 	bl	7be8 <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4c9c:	b2fb      	uxtb	r3, r7
    4c9e:	3337      	adds	r3, #55	; 0x37
    n /= base;
    4ca0:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4ca2:	3c01      	subs	r4, #1
    4ca4:	b2db      	uxtb	r3, r3
    4ca6:	2f09      	cmp	r7, #9
    4ca8:	d802      	bhi.n	4cb0 <_ZN5Print11printNumberEmh+0x44>
    4caa:	9b00      	ldr	r3, [sp, #0]
    4cac:	3330      	adds	r3, #48	; 0x30
    4cae:	b2db      	uxtb	r3, r3
    4cb0:	7023      	strb	r3, [r4, #0]
  } while(n);
    4cb2:	2d00      	cmp	r5, #0
    4cb4:	d1e7      	bne.n	4c86 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
    4cb6:	0021      	movs	r1, r4
    4cb8:	9801      	ldr	r0, [sp, #4]
    4cba:	f7ff ff85 	bl	4bc8 <_ZN5Print5writeEPKc>
}
    4cbe:	b00d      	add	sp, #52	; 0x34
    4cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004cc2 <_ZN5Print5printEli>:
{
    4cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cc4:	0006      	movs	r6, r0
    4cc6:	000c      	movs	r4, r1
    4cc8:	1e15      	subs	r5, r2, #0
  if (base == 0) {
    4cca:	d104      	bne.n	4cd6 <_ZN5Print5printEli+0x14>
    return write(n);
    4ccc:	6803      	ldr	r3, [r0, #0]
    4cce:	b2c9      	uxtb	r1, r1
    4cd0:	681b      	ldr	r3, [r3, #0]
    4cd2:	4798      	blx	r3
}
    4cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return printNumber((unsigned long)n, base);
    4cd6:	b2d2      	uxtb	r2, r2
  } else if (base == 10) {
    4cd8:	2d0a      	cmp	r5, #10
    4cda:	d10d      	bne.n	4cf8 <_ZN5Print5printEli+0x36>
    return printNumber((unsigned long)n, 10);
    4cdc:	002a      	movs	r2, r5
    if (n < 0) {
    4cde:	2900      	cmp	r1, #0
    4ce0:	da0a      	bge.n	4cf8 <_ZN5Print5printEli+0x36>
      int t = print('-');
    4ce2:	212d      	movs	r1, #45	; 0x2d
    4ce4:	f7ff ff8d 	bl	4c02 <_ZN5Print5printEc>
      n = -n;
    4ce8:	4261      	negs	r1, r4
      int t = print('-');
    4cea:	0007      	movs	r7, r0
      return printNumber((unsigned long)n, 10) + t;
    4cec:	002a      	movs	r2, r5
    4cee:	0030      	movs	r0, r6
    4cf0:	f7ff ffbc 	bl	4c6c <_ZN5Print11printNumberEmh>
    4cf4:	1838      	adds	r0, r7, r0
    4cf6:	e7ed      	b.n	4cd4 <_ZN5Print5printEli+0x12>
    return printNumber((unsigned long)n, base);
    4cf8:	0021      	movs	r1, r4
    4cfa:	0030      	movs	r0, r6
    4cfc:	f7ff ffb6 	bl	4c6c <_ZN5Print11printNumberEmh>
    4d00:	e7e8      	b.n	4cd4 <_ZN5Print5printEli+0x12>

00004d02 <_ZN5Print5printEii>:
{
    4d02:	b510      	push	{r4, lr}
  return print((long) n, base);
    4d04:	f7ff ffdd 	bl	4cc2 <_ZN5Print5printEli>
}
    4d08:	bd10      	pop	{r4, pc}

00004d0a <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    4d0a:	6001      	str	r1, [r0, #0]
}
    4d0c:	4770      	bx	lr

00004d0e <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}

void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    4d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d10:	ac05      	add	r4, sp, #20
    4d12:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4d14:	6804      	ldr	r4, [r0, #0]
    4d16:	1e98      	subs	r0, r3, #2
    4d18:	1e47      	subs	r7, r0, #1
    4d1a:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4d1c:	6826      	ldr	r6, [r4, #0]
    4d1e:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4d20:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4d22:	4332      	orrs	r2, r6
    4d24:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4d26:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4d28:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4d2a:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    4d2c:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    4d2e:	6862      	ldr	r2, [r4, #4]
    4d30:	4329      	orrs	r1, r5
    4d32:	2000      	movs	r0, #0
    4d34:	2b02      	cmp	r3, #2
    4d36:	d000      	beq.n	4d3a <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    4d38:	0358      	lsls	r0, r3, #13
    4d3a:	4311      	orrs	r1, r2
    4d3c:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4d3e:	6061      	str	r1, [r4, #4]
}
    4d40:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d42 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    4d42:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4d44:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4d46:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4d48:	03a4      	lsls	r4, r4, #14
    4d4a:	6818      	ldr	r0, [r3, #0]
    4d4c:	0512      	lsls	r2, r2, #20
    4d4e:	4022      	ands	r2, r4
    4d50:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4d52:	20c0      	movs	r0, #192	; 0xc0
    4d54:	0409      	lsls	r1, r1, #16
    4d56:	0280      	lsls	r0, r0, #10
    4d58:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4d5a:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4d5c:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    4d5e:	685a      	ldr	r2, [r3, #4]
    4d60:	4310      	orrs	r0, r2
    4d62:	6058      	str	r0, [r3, #4]
}
    4d64:	bd10      	pop	{r4, pc}

00004d66 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    4d66:	2201      	movs	r2, #1
    4d68:	6803      	ldr	r3, [r0, #0]
    4d6a:	6819      	ldr	r1, [r3, #0]
    4d6c:	430a      	orrs	r2, r1
    4d6e:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    4d70:	681a      	ldr	r2, [r3, #0]
    4d72:	07d2      	lsls	r2, r2, #31
    4d74:	d4fc      	bmi.n	4d70 <_ZN6SERCOM9resetUARTEv+0xa>
    4d76:	69da      	ldr	r2, [r3, #28]
    4d78:	07d2      	lsls	r2, r2, #31
    4d7a:	d4f9      	bmi.n	4d70 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    4d7c:	4770      	bx	lr

00004d7e <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    4d7e:	2202      	movs	r2, #2
    4d80:	6803      	ldr	r3, [r0, #0]
    4d82:	6819      	ldr	r1, [r3, #0]
    4d84:	430a      	orrs	r2, r1
    4d86:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    4d88:	69da      	ldr	r2, [r3, #28]
    4d8a:	0792      	lsls	r2, r2, #30
    4d8c:	d4fc      	bmi.n	4d88 <_ZN6SERCOM10enableUARTEv+0xa>
}
    4d8e:	4770      	bx	lr

00004d90 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    4d90:	6803      	ldr	r3, [r0, #0]
    4d92:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    4d94:	07d2      	lsls	r2, r2, #31
    4d96:	d402      	bmi.n	4d9e <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    4d98:	7e1a      	ldrb	r2, [r3, #24]
    4d9a:	0792      	lsls	r2, r2, #30
    4d9c:	d5fc      	bpl.n	4d98 <_ZN6SERCOM9flushUARTEv+0x8>
}
    4d9e:	4770      	bx	lr

00004da0 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    4da0:	2200      	movs	r2, #0
    4da2:	6803      	ldr	r3, [r0, #0]
    4da4:	835a      	strh	r2, [r3, #26]
}
    4da6:	4770      	bx	lr

00004da8 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    4da8:	6803      	ldr	r3, [r0, #0]
    4daa:	7e18      	ldrb	r0, [r3, #24]
    4dac:	0740      	lsls	r0, r0, #29
    4dae:	0fc0      	lsrs	r0, r0, #31
}
    4db0:	4770      	bx	lr

00004db2 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    4db2:	6803      	ldr	r3, [r0, #0]
    4db4:	7e18      	ldrb	r0, [r3, #24]
    4db6:	09c0      	lsrs	r0, r0, #7
}
    4db8:	4770      	bx	lr

00004dba <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    4dba:	2380      	movs	r3, #128	; 0x80
    4dbc:	6802      	ldr	r2, [r0, #0]
    4dbe:	425b      	negs	r3, r3
    4dc0:	7e11      	ldrb	r1, [r2, #24]
    4dc2:	430b      	orrs	r3, r1
    4dc4:	7613      	strb	r3, [r2, #24]
}
    4dc6:	4770      	bx	lr

00004dc8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    4dc8:	6803      	ldr	r3, [r0, #0]
    4dca:	7e18      	ldrb	r0, [r3, #24]
    4dcc:	07c0      	lsls	r0, r0, #31
    4dce:	0fc0      	lsrs	r0, r0, #31
}
    4dd0:	4770      	bx	lr

00004dd2 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    4dd2:	6803      	ldr	r3, [r0, #0]
    4dd4:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    4dd6:	b2c0      	uxtb	r0, r0
}
    4dd8:	4770      	bx	lr

00004dda <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    4dda:	6803      	ldr	r3, [r0, #0]
    4ddc:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    4dde:	07d2      	lsls	r2, r2, #31
    4de0:	d5fc      	bpl.n	4ddc <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    4de2:	b289      	uxth	r1, r1
  return 1;
}
    4de4:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    4de6:	8519      	strh	r1, [r3, #40]	; 0x28
}
    4de8:	4770      	bx	lr

00004dea <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    4dea:	2201      	movs	r2, #1
    4dec:	6803      	ldr	r3, [r0, #0]
    4dee:	759a      	strb	r2, [r3, #22]
}
    4df0:	4770      	bx	lr

00004df2 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    4df2:	2201      	movs	r2, #1
    4df4:	6803      	ldr	r3, [r0, #0]
    4df6:	751a      	strb	r2, [r3, #20]
}
    4df8:	4770      	bx	lr
	...

00004dfc <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:


}

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    4dfc:	b570      	push	{r4, r5, r6, lr}
  if((clockMode & (0x1ul)) == 0 )
    cpha = 0;
  else
    cpha = 1;

  if((clockMode & (0x2ul)) == 0)
    4dfe:	2501      	movs	r5, #1
    cpol = 0;
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    4e00:	6804      	ldr	r4, [r0, #0]
  if((clockMode & (0x2ul)) == 0)
    4e02:	084b      	lsrs	r3, r1, #1
    4e04:	402b      	ands	r3, r5
    cpha = 0;
    4e06:	4029      	ands	r1, r5
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    4e08:	6820      	ldr	r0, [r4, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    4e0a:	0709      	lsls	r1, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    4e0c:	075b      	lsls	r3, r3, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    4e0e:	430b      	orrs	r3, r1
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    4e10:	4303      	orrs	r3, r0
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    4e12:	6023      	str	r3, [r4, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint32_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return ((SercomClock / (2 * baudrate)) - 1);
    4e14:	4b04      	ldr	r3, [pc, #16]	; (4e28 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x2c>)
    4e16:	0051      	lsls	r1, r2, #1
    4e18:	6818      	ldr	r0, [r3, #0]
    4e1a:	f002 fee5 	bl	7be8 <__udivsi3>
    4e1e:	3801      	subs	r0, #1
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    4e20:	b2c0      	uxtb	r0, r0
    4e22:	7320      	strb	r0, [r4, #12]
}
    4e24:	bd70      	pop	{r4, r5, r6, pc}
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	2000004c 	.word	0x2000004c

00004e2c <_ZN6SERCOM8resetSPIEv>:
  sercom->SPI.CTRLA.bit.SWRST = 1;
    4e2c:	2201      	movs	r2, #1
    4e2e:	6803      	ldr	r3, [r0, #0]
    4e30:	6819      	ldr	r1, [r3, #0]
    4e32:	430a      	orrs	r2, r1
    4e34:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    4e36:	681a      	ldr	r2, [r3, #0]
    4e38:	07d2      	lsls	r2, r2, #31
    4e3a:	d4fc      	bmi.n	4e36 <_ZN6SERCOM8resetSPIEv+0xa>
    4e3c:	69da      	ldr	r2, [r3, #28]
    4e3e:	07d2      	lsls	r2, r2, #31
    4e40:	d4f9      	bmi.n	4e36 <_ZN6SERCOM8resetSPIEv+0xa>
}
    4e42:	4770      	bx	lr

00004e44 <_ZN6SERCOM9enableSPIEv>:
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    4e44:	2202      	movs	r2, #2
    4e46:	6803      	ldr	r3, [r0, #0]
    4e48:	6819      	ldr	r1, [r3, #0]
    4e4a:	430a      	orrs	r2, r1
    4e4c:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    4e4e:	69da      	ldr	r2, [r3, #28]
    4e50:	0792      	lsls	r2, r2, #30
    4e52:	d4fc      	bmi.n	4e4e <_ZN6SERCOM9enableSPIEv+0xa>
}
    4e54:	4770      	bx	lr

00004e56 <_ZN6SERCOM10disableSPIEv>:
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    4e56:	6803      	ldr	r3, [r0, #0]
    4e58:	69da      	ldr	r2, [r3, #28]
    4e5a:	0792      	lsls	r2, r2, #30
    4e5c:	d4fc      	bmi.n	4e58 <_ZN6SERCOM10disableSPIEv+0x2>
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    4e5e:	2102      	movs	r1, #2
    4e60:	681a      	ldr	r2, [r3, #0]
    4e62:	438a      	bics	r2, r1
    4e64:	601a      	str	r2, [r3, #0]
}
    4e66:	4770      	bx	lr

00004e68 <_ZN6SERCOM15transferDataSPIEh>:
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    4e68:	6802      	ldr	r2, [r0, #0]
    4e6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4e6c:	0a5b      	lsrs	r3, r3, #9
    4e6e:	025b      	lsls	r3, r3, #9
    4e70:	4319      	orrs	r1, r3
    4e72:	6291      	str	r1, [r2, #40]	; 0x28
  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    4e74:	7e13      	ldrb	r3, [r2, #24]
    4e76:	075b      	lsls	r3, r3, #29
    4e78:	d5fc      	bpl.n	4e74 <_ZN6SERCOM15transferDataSPIEh+0xc>
  return sercom->SPI.DATA.bit.DATA;  // Reading data
    4e7a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    4e7c:	b2c0      	uxtb	r0, r0
}
    4e7e:	4770      	bx	lr

00004e80 <_ZN6SERCOM13initClockNVICEv>:
    IRQn_Type IdNvic3=PendSV_IRQn ;
  #else
    IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
  #endif

  if(sercom == SERCOM0)
    4e80:	2284      	movs	r2, #132	; 0x84
    4e82:	6803      	ldr	r3, [r0, #0]
{
    4e84:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    4e86:	05d2      	lsls	r2, r2, #23
    4e88:	4293      	cmp	r3, r2
    4e8a:	d011      	beq.n	4eb0 <_ZN6SERCOM13initClockNVICEv+0x30>
      IdNvic3 = SERCOM0_3_IRQn;
    #else
      IdNvic = SERCOM0_IRQn;
    #endif
  }
  else if(sercom == SERCOM1)
    4e8c:	4a21      	ldr	r2, [pc, #132]	; (4f14 <_ZN6SERCOM13initClockNVICEv+0x94>)
    4e8e:	4293      	cmp	r3, r2
    4e90:	d034      	beq.n	4efc <_ZN6SERCOM13initClockNVICEv+0x7c>
    #else
      IdNvic = SERCOM1_IRQn;
    #endif
  }
#if !(SAMD11C14)
  else if(sercom == SERCOM2)
    4e92:	4a21      	ldr	r2, [pc, #132]	; (4f18 <_ZN6SERCOM13initClockNVICEv+0x98>)
    4e94:	4293      	cmp	r3, r2
    4e96:	d034      	beq.n	4f02 <_ZN6SERCOM13initClockNVICEv+0x82>
      IdNvic = SERCOM2_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES)
  else if(sercom == SERCOM3)
    4e98:	4a20      	ldr	r2, [pc, #128]	; (4f1c <_ZN6SERCOM13initClockNVICEv+0x9c>)
    4e9a:	4293      	cmp	r3, r2
    4e9c:	d034      	beq.n	4f08 <_ZN6SERCOM13initClockNVICEv+0x88>
      IdNvic = SERCOM3_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES) && !(SAMD21E) && !(SAMC21E)
  else if(sercom == SERCOM4)
    4e9e:	4a20      	ldr	r2, [pc, #128]	; (4f20 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    4ea0:	4293      	cmp	r3, r2
    4ea2:	d034      	beq.n	4f0e <_ZN6SERCOM13initClockNVICEv+0x8e>
      IdNvic3 = SERCOM4_3_IRQn;
    #else
      IdNvic = SERCOM4_IRQn;
    #endif
  }
  else if(sercom == SERCOM5)
    4ea4:	4a1f      	ldr	r2, [pc, #124]	; (4f24 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    4ea6:	4293      	cmp	r3, r2
    4ea8:	d127      	bne.n	4efa <_ZN6SERCOM13initClockNVICEv+0x7a>
      IdNvic0 = SERCOM5_0_IRQn;
      IdNvic1 = SERCOM5_1_IRQn;
      IdNvic2 = SERCOM5_2_IRQn;
      IdNvic3 = SERCOM5_3_IRQn;
    #else
      IdNvic = SERCOM5_IRQn;
    4eaa:	230d      	movs	r3, #13
    clockId = GCM_SERCOM5_CORE;
    4eac:	2218      	movs	r2, #24
    4eae:	e001      	b.n	4eb4 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM0_IRQn;
    4eb0:	2308      	movs	r3, #8
    clockId = GCM_SERCOM0_CORE;
    4eb2:	2212      	movs	r2, #18
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4eb4:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4eb6:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4eb8:	4099      	lsls	r1, r3
    4eba:	481b      	ldr	r0, [pc, #108]	; (4f28 <_ZN6SERCOM13initClockNVICEv+0xa8>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4ebc:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4ebe:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4ec0:	0899      	lsrs	r1, r3, #2
    4ec2:	402b      	ands	r3, r5
    4ec4:	40ab      	lsls	r3, r5
    4ec6:	35fc      	adds	r5, #252	; 0xfc
    4ec8:	409d      	lsls	r5, r3
    4eca:	0089      	lsls	r1, r1, #2
    4ecc:	1809      	adds	r1, r1, r0
    4ece:	00a4      	lsls	r4, r4, #2
    4ed0:	5908      	ldr	r0, [r1, r4]
    4ed2:	0092      	lsls	r2, r2, #2
    4ed4:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    4ed6:	25c0      	movs	r5, #192	; 0xc0
    4ed8:	409d      	lsls	r5, r3
    4eda:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4edc:	4303      	orrs	r3, r0
    4ede:	510b      	str	r3, [r1, r4]
#if (SAMD21 || SAMD11)
  GCLK->CLKCTRL.reg = ( GCLK_CLKCTRL_ID( clockId ) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_CLKEN );
  SercomClock = SystemCoreClock;
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21)
  GCLK->PCHCTRL[clockId].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    4ee0:	4b12      	ldr	r3, [pc, #72]	; (4f2c <_ZN6SERCOM13initClockNVICEv+0xac>)
    4ee2:	18d1      	adds	r1, r2, r3
    4ee4:	2340      	movs	r3, #64	; 0x40
    4ee6:	67cb      	str	r3, [r1, #124]	; 0x7c
  SercomClock = SystemCoreClock;
    4ee8:	4911      	ldr	r1, [pc, #68]	; (4f30 <_ZN6SERCOM13initClockNVICEv+0xb0>)
    4eea:	6808      	ldr	r0, [r1, #0]
    4eec:	4911      	ldr	r1, [pc, #68]	; (4f34 <_ZN6SERCOM13initClockNVICEv+0xb4>)
    4eee:	6008      	str	r0, [r1, #0]
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    4ef0:	490e      	ldr	r1, [pc, #56]	; (4f2c <_ZN6SERCOM13initClockNVICEv+0xac>)
    4ef2:	1852      	adds	r2, r2, r1
    4ef4:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    4ef6:	4219      	tst	r1, r3
    4ef8:	d0fc      	beq.n	4ef4 <_ZN6SERCOM13initClockNVICEv+0x74>
  SercomClock = 96000000ul;
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
#else
  #error "SERCOM.cpp: Unsupported chip"
#endif
}
    4efa:	bd30      	pop	{r4, r5, pc}
      IdNvic = SERCOM1_IRQn;
    4efc:	2309      	movs	r3, #9
    clockId = GCM_SERCOM1_CORE;
    4efe:	2213      	movs	r2, #19
    4f00:	e7d8      	b.n	4eb4 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM2_IRQn;
    4f02:	230a      	movs	r3, #10
    clockId = GCM_SERCOM2_CORE;
    4f04:	2214      	movs	r2, #20
    4f06:	e7d5      	b.n	4eb4 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM3_IRQn;
    4f08:	230b      	movs	r3, #11
    clockId = GCM_SERCOM3_CORE;
    4f0a:	2215      	movs	r2, #21
    4f0c:	e7d2      	b.n	4eb4 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM4_IRQn;
    4f0e:	230c      	movs	r3, #12
    clockId = GCM_SERCOM4_CORE;
    4f10:	2216      	movs	r2, #22
    4f12:	e7cf      	b.n	4eb4 <_ZN6SERCOM13initClockNVICEv+0x34>
    4f14:	42000400 	.word	0x42000400
    4f18:	42000800 	.word	0x42000800
    4f1c:	42000c00 	.word	0x42000c00
    4f20:	42001000 	.word	0x42001000
    4f24:	43000400 	.word	0x43000400
    4f28:	e000e100 	.word	0xe000e100
    4f2c:	40001804 	.word	0x40001804
    4f30:	20000038 	.word	0x20000038
    4f34:	2000004c 	.word	0x2000004c

00004f38 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    4f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f3a:	0016      	movs	r6, r2
    4f3c:	001d      	movs	r5, r3
  if (sercom == SERCOM5) {
    4f3e:	6802      	ldr	r2, [r0, #0]
    4f40:	4b18      	ldr	r3, [pc, #96]	; (4fa4 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6c>)
{
    4f42:	0004      	movs	r4, r0
    4f44:	000f      	movs	r7, r1
  if (sercom == SERCOM5) {
    4f46:	429a      	cmp	r2, r3
    4f48:	d100      	bne.n	4f4c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x14>
    sampleRate = SAMPLE_RATE_x16;
    4f4a:	2601      	movs	r6, #1
  initClockNVIC();
    4f4c:	0020      	movs	r0, r4
    4f4e:	f7ff ff97 	bl	4e80 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    4f52:	0020      	movs	r0, r4
    4f54:	f7ff ff07 	bl	4d66 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4f58:	221c      	movs	r2, #28
    4f5a:	00bb      	lsls	r3, r7, #2
    4f5c:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    4f5e:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4f60:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    4f62:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4f64:	4313      	orrs	r3, r2
    4f66:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    4f68:	2384      	movs	r3, #132	; 0x84
    4f6a:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    4f6c:	2f01      	cmp	r7, #1
    4f6e:	d118      	bne.n	4fa2 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6a>
      sampleRateValue = 16;
    4f70:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    4f72:	2e01      	cmp	r6, #1
    4f74:	d000      	beq.n	4f78 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x40>
      sampleRateValue = 8;
    4f76:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SercomClock * 8) / (sampleRateValue * baudrate);
    4f78:	4b0b      	ldr	r3, [pc, #44]	; (4fa8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x70>)
    4f7a:	4369      	muls	r1, r5
    4f7c:	6818      	ldr	r0, [r3, #0]
    4f7e:	00c0      	lsls	r0, r0, #3
    4f80:	f002 fe32 	bl	7be8 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    4f84:	2207      	movs	r2, #7
    4f86:	89a3      	ldrh	r3, [r4, #12]
    4f88:	4002      	ands	r2, r0
    4f8a:	04db      	lsls	r3, r3, #19
    4f8c:	0352      	lsls	r2, r2, #13
    4f8e:	0cdb      	lsrs	r3, r3, #19
    4f90:	4313      	orrs	r3, r2
    4f92:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    4f94:	0403      	lsls	r3, r0, #16
    4f96:	89a0      	ldrh	r0, [r4, #12]
    4f98:	0cdb      	lsrs	r3, r3, #19
    4f9a:	0b40      	lsrs	r0, r0, #13
    4f9c:	0340      	lsls	r0, r0, #13
    4f9e:	4318      	orrs	r0, r3
    4fa0:	81a0      	strh	r0, [r4, #12]
}
    4fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fa4:	43000400 	.word	0x43000400
    4fa8:	2000004c 	.word	0x2000004c

00004fac <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
{
    4fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4fae:	0007      	movs	r7, r0
    4fb0:	9301      	str	r3, [sp, #4]
    4fb2:	ab08      	add	r3, sp, #32
    4fb4:	781e      	ldrb	r6, [r3, #0]
    4fb6:	000d      	movs	r5, r1
    4fb8:	0014      	movs	r4, r2
  resetSPI();
    4fba:	f7ff ff37 	bl	4e2c <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    4fbe:	0038      	movs	r0, r7
    4fc0:	f7ff ff5e 	bl	4e80 <_ZN6SERCOM13initClockNVICEv>
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    4fc4:	22c0      	movs	r2, #192	; 0xc0
    4fc6:	0524      	lsls	r4, r4, #20
    4fc8:	0392      	lsls	r2, r2, #14
    4fca:	4014      	ands	r4, r2
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    4fcc:	07b2      	lsls	r2, r6, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    4fce:	260c      	movs	r6, #12
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    4fd0:	2107      	movs	r1, #7
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    4fd2:	4316      	orrs	r6, r2
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    4fd4:	9a01      	ldr	r2, [sp, #4]
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    4fd6:	4334      	orrs	r4, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    4fd8:	400a      	ands	r2, r1
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    4fda:	26c0      	movs	r6, #192	; 0xc0
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    4fdc:	0011      	movs	r1, r2
    4fde:	2280      	movs	r2, #128	; 0x80
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    4fe0:	02b6      	lsls	r6, r6, #10
    4fe2:	042d      	lsls	r5, r5, #16
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE( SPI_MASTER_OPERATION ) |
    4fe4:	683b      	ldr	r3, [r7, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    4fe6:	4035      	ands	r5, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    4fe8:	0292      	lsls	r2, r2, #10
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    4fea:	4325      	orrs	r5, r4
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    4fec:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE( SPI_MASTER_OPERATION ) |
    4fee:	601d      	str	r5, [r3, #0]
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    4ff0:	605a      	str	r2, [r3, #4]
}
    4ff2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00004ff4 <_ZN4UartcvbEv>:
    void errorHandler();
#else
    void IrqHandler();
#endif

    operator bool() { return true; }
    4ff4:	2001      	movs	r0, #1
    4ff6:	4770      	bx	lr

00004ff8 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    4ff8:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    4ffa:	6803      	ldr	r3, [r0, #0]
    4ffc:	4a01      	ldr	r2, [pc, #4]	; (5004 <_ZN4Uart5beginEm+0xc>)
    4ffe:	6a1b      	ldr	r3, [r3, #32]
    5000:	4798      	blx	r3
}
    5002:	bd10      	pop	{r4, pc}
    5004:	00000413 	.word	0x00000413

00005008 <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    5008:	b510      	push	{r4, lr}
    500a:	0004      	movs	r4, r0
  sercom->resetUART();
    500c:	6900      	ldr	r0, [r0, #16]
    500e:	f7ff feaa 	bl	4d66 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    5012:	0020      	movs	r0, r4
    5014:	3014      	adds	r0, #20
    5016:	f002 fa1d 	bl	7454 <_ZN10RingBuffer5clearEv>
  txBuffer.clear();
    501a:	0020      	movs	r0, r4
    501c:	305c      	adds	r0, #92	; 0x5c
    501e:	f002 fa19 	bl	7454 <_ZN10RingBuffer5clearEv>
}
    5022:	bd10      	pop	{r4, pc}

00005024 <_ZN4Uart9availableEv>:
  }
}
#endif

int Uart::available()
{
    5024:	b510      	push	{r4, lr}
  return rxBuffer.available();
    5026:	3014      	adds	r0, #20
    5028:	f002 fa28 	bl	747c <_ZN10RingBuffer9availableEv>
}
    502c:	bd10      	pop	{r4, pc}

0000502e <_ZN4Uart5flushEv>:
{
    502e:	b510      	push	{r4, lr}
    5030:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    5032:	0020      	movs	r0, r4
    5034:	305c      	adds	r0, #92	; 0x5c
    5036:	f002 fa21 	bl	747c <_ZN10RingBuffer9availableEv>
    503a:	2800      	cmp	r0, #0
    503c:	d1f9      	bne.n	5032 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    503e:	6920      	ldr	r0, [r4, #16]
    5040:	f7ff fea6 	bl	4d90 <_ZN6SERCOM9flushUARTEv>
}
    5044:	bd10      	pop	{r4, pc}

00005046 <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    5046:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    5048:	305c      	adds	r0, #92	; 0x5c
    504a:	f002 fa1d 	bl	7488 <_ZN10RingBuffer17availableForStoreEv>
}
    504e:	bd10      	pop	{r4, pc}

00005050 <_ZN4Uart4readEv>:
{
  return rxBuffer.peek();
}

int Uart::read()
{
    5050:	b570      	push	{r4, r5, r6, lr}
  int c = rxBuffer.read_char();
    5052:	0005      	movs	r5, r0
{
    5054:	0004      	movs	r4, r0
  int c = rxBuffer.read_char();
    5056:	3514      	adds	r5, #20
    5058:	0028      	movs	r0, r5
    505a:	f002 f9ff 	bl	745c <_ZN10RingBuffer9read_charEv>

  if (uc_pinRTS != NO_RTS_PIN) {
    505e:	0023      	movs	r3, r4
    5060:	33a8      	adds	r3, #168	; 0xa8
    5062:	781b      	ldrb	r3, [r3, #0]
  int c = rxBuffer.read_char();
    5064:	0006      	movs	r6, r0
  if (uc_pinRTS != NO_RTS_PIN) {
    5066:	2bff      	cmp	r3, #255	; 0xff
    5068:	d00a      	beq.n	5080 <_ZN4Uart4readEv+0x30>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    506a:	0028      	movs	r0, r5
    506c:	f002 fa0c 	bl	7488 <_ZN10RingBuffer17availableForStoreEv>
    5070:	280a      	cmp	r0, #10
    5072:	dd05      	ble.n	5080 <_ZN4Uart4readEv+0x30>
      *pul_outclrRTS = ul_pinMaskRTS;
    5074:	0023      	movs	r3, r4
    5076:	34b4      	adds	r4, #180	; 0xb4
    5078:	33b0      	adds	r3, #176	; 0xb0
    507a:	681b      	ldr	r3, [r3, #0]
    507c:	6822      	ldr	r2, [r4, #0]
    507e:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
}
    5080:	0030      	movs	r0, r6
    5082:	bd70      	pop	{r4, r5, r6, pc}

00005084 <_ZN4Uart4peekEv>:
{
    5084:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    5086:	3014      	adds	r0, #20
    5088:	f002 fa0c 	bl	74a4 <_ZN10RingBuffer4peekEv>
}
    508c:	bd10      	pop	{r4, pc}
	...

00005090 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    5090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5092:	001d      	movs	r5, r3
    5094:	ab08      	add	r3, sp, #32
    5096:	781b      	ldrb	r3, [r3, #0]
    5098:	0004      	movs	r4, r0
    509a:	9300      	str	r3, [sp, #0]
    509c:	ab09      	add	r3, sp, #36	; 0x24
    509e:	781b      	ldrb	r3, [r3, #0]
    50a0:	0016      	movs	r6, r2
    50a2:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
    50a4:	2300      	movs	r3, #0
    50a6:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    50a8:	23fa      	movs	r3, #250	; 0xfa
    50aa:	009b      	lsls	r3, r3, #2
    50ac:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    50ae:	4b0e      	ldr	r3, [pc, #56]	; (50e8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    50b0:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    50b2:	3308      	adds	r3, #8
    50b4:	6003      	str	r3, [r0, #0]
    50b6:	3014      	adds	r0, #20
    50b8:	f002 f9b6 	bl	7428 <_ZN10RingBufferC1Ev>
    50bc:	0020      	movs	r0, r4
    50be:	305c      	adds	r0, #92	; 0x5c
    50c0:	f002 f9b2 	bl	7428 <_ZN10RingBufferC1Ev>
  uc_padRX = _padRX ;
    50c4:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    50c6:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
    50c8:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    50ca:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
    50cc:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
    50ce:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
    50d0:	466a      	mov	r2, sp
    50d2:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    50d4:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
    50d6:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
    50d8:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
    50da:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
    50dc:	23ff      	movs	r3, #255	; 0xff
    50de:	32a8      	adds	r2, #168	; 0xa8
}
    50e0:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
    50e2:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
    50e4:	7413      	strb	r3, [r2, #16]
}
    50e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    50e8:	0000f480 	.word	0x0000f480

000050ec <_ZN4Uart10IrqHandlerEv>:
{
    50ec:	b570      	push	{r4, r5, r6, lr}
    50ee:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    50f0:	6900      	ldr	r0, [r0, #16]
    50f2:	f7ff fe59 	bl	4da8 <_ZN6SERCOM17availableDataUARTEv>
    50f6:	2800      	cmp	r0, #0
    50f8:	d019      	beq.n	512e <_ZN4Uart10IrqHandlerEv+0x42>
    rxBuffer.store_char(sercom->readDataUART());
    50fa:	0025      	movs	r5, r4
    50fc:	6920      	ldr	r0, [r4, #16]
    50fe:	f7ff fe68 	bl	4dd2 <_ZN6SERCOM12readDataUARTEv>
    5102:	3514      	adds	r5, #20
    5104:	0001      	movs	r1, r0
    5106:	0028      	movs	r0, r5
    5108:	f002 f999 	bl	743e <_ZN10RingBuffer10store_charEh>
    if (uc_pinRTS != NO_RTS_PIN) {
    510c:	0023      	movs	r3, r4
    510e:	33a8      	adds	r3, #168	; 0xa8
    5110:	781b      	ldrb	r3, [r3, #0]
    5112:	2bff      	cmp	r3, #255	; 0xff
    5114:	d00b      	beq.n	512e <_ZN4Uart10IrqHandlerEv+0x42>
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    5116:	0028      	movs	r0, r5
    5118:	f002 f9b6 	bl	7488 <_ZN10RingBuffer17availableForStoreEv>
    511c:	2809      	cmp	r0, #9
    511e:	dc06      	bgt.n	512e <_ZN4Uart10IrqHandlerEv+0x42>
        *pul_outsetRTS = ul_pinMaskRTS;
    5120:	0023      	movs	r3, r4
    5122:	0022      	movs	r2, r4
    5124:	33ac      	adds	r3, #172	; 0xac
    5126:	32b4      	adds	r2, #180	; 0xb4
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	6812      	ldr	r2, [r2, #0]
    512c:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    512e:	6920      	ldr	r0, [r4, #16]
    5130:	f7ff fe4a 	bl	4dc8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    5134:	2800      	cmp	r0, #0
    5136:	d00d      	beq.n	5154 <_ZN4Uart10IrqHandlerEv+0x68>
    if (txBuffer.available()) {
    5138:	0025      	movs	r5, r4
    513a:	355c      	adds	r5, #92	; 0x5c
    513c:	0028      	movs	r0, r5
    513e:	f002 f99d 	bl	747c <_ZN10RingBuffer9availableEv>
    5142:	2800      	cmp	r0, #0
    5144:	d012      	beq.n	516c <_ZN4Uart10IrqHandlerEv+0x80>
      uint8_t data = txBuffer.read_char();
    5146:	0028      	movs	r0, r5
    5148:	f002 f988 	bl	745c <_ZN10RingBuffer9read_charEv>
      sercom->writeDataUART(data);
    514c:	b2c1      	uxtb	r1, r0
    514e:	6920      	ldr	r0, [r4, #16]
    5150:	f7ff fe43 	bl	4dda <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    5154:	6920      	ldr	r0, [r4, #16]
    5156:	f7ff fe2c 	bl	4db2 <_ZN6SERCOM11isUARTErrorEv>
    515a:	2800      	cmp	r0, #0
    515c:	d005      	beq.n	516a <_ZN4Uart10IrqHandlerEv+0x7e>
    sercom->acknowledgeUARTError();
    515e:	6920      	ldr	r0, [r4, #16]
    5160:	f7ff fe2b 	bl	4dba <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    5164:	6920      	ldr	r0, [r4, #16]
    5166:	f7ff fe1b 	bl	4da0 <_ZN6SERCOM15clearStatusUARTEv>
}
    516a:	bd70      	pop	{r4, r5, r6, pc}
      sercom->disableDataRegisterEmptyInterruptUART();
    516c:	6920      	ldr	r0, [r4, #16]
    516e:	f7ff fe40 	bl	4df2 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    5172:	e7ef      	b.n	5154 <_ZN4Uart10IrqHandlerEv+0x68>

00005174 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    5174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5176:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    5178:	6900      	ldr	r0, [r0, #16]
{
    517a:	000e      	movs	r6, r1
    517c:	0025      	movs	r5, r4
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    517e:	f7ff fe23 	bl	4dc8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    5182:	355c      	adds	r5, #92	; 0x5c
    5184:	2800      	cmp	r0, #0
    5186:	d120      	bne.n	51ca <_ZN4Uart5writeEh+0x56>
    while(txBuffer.isFull()) {
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);

      if (interruptsEnabled) {
        //uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    5188:	273f      	movs	r7, #63	; 0x3f
    while(txBuffer.isFull()) {
    518a:	0028      	movs	r0, r5
    518c:	f002 f994 	bl	74b8 <_ZN10RingBuffer6isFullEv>
    5190:	2800      	cmp	r0, #0
    5192:	d02d      	beq.n	51f0 <_ZN4Uart5writeEh+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5194:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    5198:	2201      	movs	r2, #1
    519a:	4213      	tst	r3, r2
    519c:	d10c      	bne.n	51b8 <_ZN4Uart5writeEh+0x44>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    519e:	f3ef 8305 	mrs	r3, IPSR
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    51a2:	403b      	ands	r3, r7

        if (exceptionNumber == 0 ||
    51a4:	d0f1      	beq.n	518a <_ZN4Uart5writeEh+0x16>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    51a6:	3b10      	subs	r3, #16
    51a8:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    51aa:	2b00      	cmp	r3, #0
    51ac:	db17      	blt.n	51de <_ZN4Uart5writeEh+0x6a>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    51ae:	089b      	lsrs	r3, r3, #2
    51b0:	33c0      	adds	r3, #192	; 0xc0
    51b2:	4a14      	ldr	r2, [pc, #80]	; (5204 <_ZN4Uart5writeEh+0x90>)
    51b4:	009b      	lsls	r3, r3, #2
    51b6:	589b      	ldr	r3, [r3, r2]
        }
      }

      // interrupts are disabled or called from ISR with higher or equal priority than the SERCOM IRQ
      // manually call the UART IRQ handler when the data register is empty
      if (sercom->isDataRegisterEmptyUART()) {
    51b8:	6920      	ldr	r0, [r4, #16]
    51ba:	f7ff fe05 	bl	4dc8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    51be:	2800      	cmp	r0, #0
    51c0:	d0e3      	beq.n	518a <_ZN4Uart5writeEh+0x16>
#if (SAMD51)
        dataRegisterEmptyHandler();
#else
        IrqHandler();
    51c2:	0020      	movs	r0, r4
    51c4:	f7ff ff92 	bl	50ec <_ZN4Uart10IrqHandlerEv>
    51c8:	e7df      	b.n	518a <_ZN4Uart5writeEh+0x16>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    51ca:	0028      	movs	r0, r5
    51cc:	f002 f956 	bl	747c <_ZN10RingBuffer9availableEv>
    51d0:	2800      	cmp	r0, #0
    51d2:	d1d9      	bne.n	5188 <_ZN4Uart5writeEh+0x14>
    sercom->writeDataUART(data);
    51d4:	0031      	movs	r1, r6
    51d6:	6920      	ldr	r0, [r4, #16]
    51d8:	f7ff fdff 	bl	4dda <_ZN6SERCOM13writeDataUARTEh>
    txBuffer.store_char(data);

    sercom->enableDataRegisterEmptyInterruptUART();
  }

  return 1;
    51dc:	e00f      	b.n	51fe <_ZN4Uart5writeEh+0x8a>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    51de:	220f      	movs	r2, #15
    51e0:	4013      	ands	r3, r2
    51e2:	3b08      	subs	r3, #8
    51e4:	089b      	lsrs	r3, r3, #2
    51e6:	4a08      	ldr	r2, [pc, #32]	; (5208 <_ZN4Uart5writeEh+0x94>)
    51e8:	009b      	lsls	r3, r3, #2
    51ea:	189b      	adds	r3, r3, r2
    51ec:	681b      	ldr	r3, [r3, #0]
    51ee:	e7e3      	b.n	51b8 <_ZN4Uart5writeEh+0x44>
    txBuffer.store_char(data);
    51f0:	0028      	movs	r0, r5
    51f2:	0031      	movs	r1, r6
    51f4:	f002 f923 	bl	743e <_ZN10RingBuffer10store_charEh>
    sercom->enableDataRegisterEmptyInterruptUART();
    51f8:	6920      	ldr	r0, [r4, #16]
    51fa:	f7ff fdf6 	bl	4dea <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    51fe:	2001      	movs	r0, #1
    5200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	e000e100 	.word	0xe000e100
    5208:	e000ed1c 	.word	0xe000ed1c

0000520c <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    520c:	20f0      	movs	r0, #240	; 0xf0
    520e:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    5210:	3930      	subs	r1, #48	; 0x30
    5212:	4248      	negs	r0, r1
    5214:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    5216:	4770      	bx	lr

00005218 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    5218:	23f0      	movs	r3, #240	; 0xf0
    521a:	011b      	lsls	r3, r3, #4
    521c:	4019      	ands	r1, r3
    521e:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    5220:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    5222:	009b      	lsls	r3, r3, #2
    5224:	4299      	cmp	r1, r3
    5226:	d00a      	beq.n	523e <_ZN4Uart15extractCharSizeEt+0x26>
    5228:	3301      	adds	r3, #1
    522a:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    522c:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    522e:	4299      	cmp	r1, r3
    5230:	d005      	beq.n	523e <_ZN4Uart15extractCharSizeEt+0x26>
    5232:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    5234:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    5236:	005b      	lsls	r3, r3, #1
    5238:	4299      	cmp	r1, r3
    523a:	d000      	beq.n	523e <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    523c:	2000      	movs	r0, #0

  }
}
    523e:	4770      	bx	lr

00005240 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    5240:	200f      	movs	r0, #15
    5242:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    5244:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    5246:	2901      	cmp	r1, #1
    5248:	d003      	beq.n	5252 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    524a:	3902      	subs	r1, #2
    524c:	1e48      	subs	r0, r1, #1
    524e:	4181      	sbcs	r1, r0
    5250:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    5252:	4770      	bx	lr

00005254 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5254:	0003      	movs	r3, r0
{
    5256:	b5f0      	push	{r4, r5, r6, r7, lr}
    5258:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    525a:	33a4      	adds	r3, #164	; 0xa4
{
    525c:	b085      	sub	sp, #20
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    525e:	7818      	ldrb	r0, [r3, #0]
{
    5260:	000f      	movs	r7, r1
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5262:	210e      	movs	r1, #14
{
    5264:	0015      	movs	r5, r2
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5266:	f7fe fc9d 	bl	3ba4 <pinPeripheral>
  pinPeripheral(uc_pinTX, PIO_SERCOM);
    526a:	0023      	movs	r3, r4
    526c:	33a5      	adds	r3, #165	; 0xa5
    526e:	7818      	ldrb	r0, [r3, #0]
    5270:	210e      	movs	r1, #14
    5272:	f7fe fc97 	bl	3ba4 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    5276:	0023      	movs	r3, r4
    5278:	33a7      	adds	r3, #167	; 0xa7
    527a:	9303      	str	r3, [sp, #12]
    527c:	781b      	ldrb	r3, [r3, #0]
    527e:	2b02      	cmp	r3, #2
    5280:	d107      	bne.n	5292 <_ZN4Uart5beginEmt+0x3e>
    if (uc_pinCTS != NO_CTS_PIN) {
    5282:	0023      	movs	r3, r4
    5284:	33b8      	adds	r3, #184	; 0xb8
    5286:	7818      	ldrb	r0, [r3, #0]
    5288:	28ff      	cmp	r0, #255	; 0xff
    528a:	d002      	beq.n	5292 <_ZN4Uart5beginEmt+0x3e>
      pinPeripheral(uc_pinCTS, PIO_SERCOM);
    528c:	210e      	movs	r1, #14
    528e:	f7fe fc89 	bl	3ba4 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    5292:	0026      	movs	r6, r4
    5294:	36a8      	adds	r6, #168	; 0xa8
    5296:	7830      	ldrb	r0, [r6, #0]
    5298:	28ff      	cmp	r0, #255	; 0xff
    529a:	d01a      	beq.n	52d2 <_ZN4Uart5beginEmt+0x7e>
    pinMode(uc_pinRTS, OUTPUT);
    529c:	2101      	movs	r1, #1
    529e:	f7fe fc13 	bl	3ac8 <pinMode>
    uint8_t rtsPort = GetPort(uc_pinRTS);
    52a2:	210c      	movs	r1, #12
    52a4:	7833      	ldrb	r3, [r6, #0]
    52a6:	4a1f      	ldr	r2, [pc, #124]	; (5324 <_ZN4Uart5beginEmt+0xd0>)
    52a8:	4359      	muls	r1, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    52aa:	0020      	movs	r0, r4
    52ac:	5c8b      	ldrb	r3, [r1, r2]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    52ae:	1852      	adds	r2, r2, r1
    52b0:	7851      	ldrb	r1, [r2, #1]
    52b2:	2201      	movs	r2, #1
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    52b4:	4e1c      	ldr	r6, [pc, #112]	; (5328 <_ZN4Uart5beginEmt+0xd4>)
    52b6:	01db      	lsls	r3, r3, #7
    52b8:	30ac      	adds	r0, #172	; 0xac
    52ba:	199e      	adds	r6, r3, r6
    52bc:	6006      	str	r6, [r0, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    52be:	481b      	ldr	r0, [pc, #108]	; (532c <_ZN4Uart5beginEmt+0xd8>)
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    52c0:	408a      	lsls	r2, r1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    52c2:	181b      	adds	r3, r3, r0
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    52c4:	0021      	movs	r1, r4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    52c6:	0020      	movs	r0, r4
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    52c8:	31b4      	adds	r1, #180	; 0xb4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    52ca:	30b0      	adds	r0, #176	; 0xb0
    52cc:	6003      	str	r3, [r0, #0]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    52ce:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
    52d0:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    52d2:	2201      	movs	r2, #1
    52d4:	003b      	movs	r3, r7
    52d6:	0011      	movs	r1, r2
    52d8:	6920      	ldr	r0, [r4, #16]
    52da:	f7ff fe2d 	bl	4f38 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    52de:	0029      	movs	r1, r5
    52e0:	0020      	movs	r0, r4
    52e2:	f7ff ff99 	bl	5218 <_ZN4Uart15extractCharSizeEt>
    52e6:	0029      	movs	r1, r5
    52e8:	0006      	movs	r6, r0
    52ea:	0020      	movs	r0, r4
    52ec:	f7ff ffa8 	bl	5240 <_ZN4Uart13extractParityEt>
    52f0:	0029      	movs	r1, r5
    52f2:	0007      	movs	r7, r0
    52f4:	0020      	movs	r0, r4
    52f6:	f7ff ff89 	bl	520c <_ZN4Uart16extractNbStopBitEt>
    52fa:	003b      	movs	r3, r7
    52fc:	9000      	str	r0, [sp, #0]
    52fe:	0031      	movs	r1, r6
    5300:	6920      	ldr	r0, [r4, #16]
    5302:	2201      	movs	r2, #1
    5304:	f7ff fd03 	bl	4d0e <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    5308:	0023      	movs	r3, r4
    530a:	33a6      	adds	r3, #166	; 0xa6
    530c:	781a      	ldrb	r2, [r3, #0]
    530e:	9b03      	ldr	r3, [sp, #12]
    5310:	6920      	ldr	r0, [r4, #16]
    5312:	7819      	ldrb	r1, [r3, #0]
    5314:	f7ff fd15 	bl	4d42 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    5318:	6920      	ldr	r0, [r4, #16]
    531a:	f7ff fd30 	bl	4d7e <_ZN6SERCOM10enableUARTEv>
}
    531e:	b005      	add	sp, #20
    5320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5322:	46c0      	nop			; (mov r8, r8)
    5324:	0000f2cc 	.word	0x0000f2cc
    5328:	40002818 	.word	0x40002818
    532c:	40002814 	.word	0x40002814

00005330 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    5330:	203f      	movs	r0, #63	; 0x3f
    5332:	4770      	bx	lr

00005334 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    5334:	b513      	push	{r0, r1, r4, lr}
    5336:	466b      	mov	r3, sp
	return write(&c, 1);
    5338:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    533a:	71d9      	strb	r1, [r3, #7]
    533c:	3307      	adds	r3, #7
	return write(&c, 1);
    533e:	6854      	ldr	r4, [r2, #4]
    5340:	0019      	movs	r1, r3
    5342:	2201      	movs	r2, #1
    5344:	47a0      	blx	r4
}
    5346:	bd16      	pop	{r1, r2, r4, pc}

00005348 <_ZN7Serial_9availableEv>:
{
    5348:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    534a:	2102      	movs	r1, #2
    534c:	6900      	ldr	r0, [r0, #16]
    534e:	f7fd fe47 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
}
    5352:	bd10      	pop	{r4, pc}

00005354 <_ZN7Serial_5flushEv>:
{
    5354:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    5356:	2103      	movs	r1, #3
    5358:	6900      	ldr	r0, [r0, #16]
    535a:	f7fd fe57 	bl	300c <_ZN14USBDeviceClass5flushEm>
}
    535e:	bd10      	pop	{r4, pc}

00005360 <_ZN7Serial_5writeEPKhj>:
{
    5360:	b510      	push	{r4, lr}
    5362:	0013      	movs	r3, r2
    5364:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    5366:	000a      	movs	r2, r1
    5368:	6900      	ldr	r0, [r0, #16]
    536a:	2103      	movs	r1, #3
    536c:	f7fd ff48 	bl	3200 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    5370:	2800      	cmp	r0, #0
    5372:	d101      	bne.n	5378 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    5374:	2301      	movs	r3, #1
    5376:	6063      	str	r3, [r4, #4]
}
    5378:	bd10      	pop	{r4, pc}
	...

0000537c <_ZN7Serial_4peekEv>:
{
    537c:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    537e:	4c05      	ldr	r4, [pc, #20]	; (5394 <_ZN7Serial_4peekEv+0x18>)
    5380:	6823      	ldr	r3, [r4, #0]
    5382:	1c5a      	adds	r2, r3, #1
    5384:	d104      	bne.n	5390 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    5386:	6803      	ldr	r3, [r0, #0]
    5388:	695b      	ldr	r3, [r3, #20]
    538a:	4798      	blx	r3
    538c:	0003      	movs	r3, r0
    538e:	6020      	str	r0, [r4, #0]
}
    5390:	0018      	movs	r0, r3
    5392:	bd10      	pop	{r4, pc}
    5394:	20000098 	.word	0x20000098

00005398 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    5398:	4b07      	ldr	r3, [pc, #28]	; (53b8 <_ZN7Serial_4readEv+0x20>)
{
    539a:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    539c:	6818      	ldr	r0, [r3, #0]
{
    539e:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    53a0:	1c41      	adds	r1, r0, #1
    53a2:	d003      	beq.n	53ac <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    53a4:	2201      	movs	r2, #1
    53a6:	4252      	negs	r2, r2
    53a8:	601a      	str	r2, [r3, #0]
}
    53aa:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    53ac:	2102      	movs	r1, #2
    53ae:	6910      	ldr	r0, [r2, #16]
    53b0:	f7fd ff18 	bl	31e4 <_ZN14USBDeviceClass4recvEm>
    53b4:	e7f9      	b.n	53aa <_ZN7Serial_4readEv+0x12>
    53b6:	46c0      	nop			; (mov r8, r8)
    53b8:	20000098 	.word	0x20000098

000053bc <_Z16CDC_GetInterfacePh>:
{
    53bc:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    53be:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    53c0:	223a      	movs	r2, #58	; 0x3a
	interfaceNum[0] += 2;	// uses 2
    53c2:	3302      	adds	r3, #2
    53c4:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    53c6:	4902      	ldr	r1, [pc, #8]	; (53d0 <_Z16CDC_GetInterfacePh+0x14>)
    53c8:	4802      	ldr	r0, [pc, #8]	; (53d4 <_Z16CDC_GetInterfacePh+0x18>)
    53ca:	f7fd ffc5 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    53ce:	bd10      	pop	{r4, pc}
    53d0:	2000005c 	.word	0x2000005c
    53d4:	2000037c 	.word	0x2000037c

000053d8 <_Z9CDC_SetupR8USBSetup>:
{
    53d8:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    53da:	7801      	ldrb	r1, [r0, #0]
{
    53dc:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    53de:	7842      	ldrb	r2, [r0, #1]
	return false;
    53e0:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    53e2:	29a1      	cmp	r1, #161	; 0xa1
    53e4:	d108      	bne.n	53f8 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    53e6:	2a21      	cmp	r2, #33	; 0x21
    53e8:	d105      	bne.n	53f6 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    53ea:	3a1a      	subs	r2, #26
    53ec:	4916      	ldr	r1, [pc, #88]	; (5448 <_Z9CDC_SetupR8USBSetup+0x70>)
    53ee:	4817      	ldr	r0, [pc, #92]	; (544c <_Z9CDC_SetupR8USBSetup+0x74>)
    53f0:	f7fd ffb2 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    53f4:	2001      	movs	r0, #1
}
    53f6:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    53f8:	2921      	cmp	r1, #33	; 0x21
    53fa:	d1fc      	bne.n	53f6 <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    53fc:	2a20      	cmp	r2, #32
    53fe:	d111      	bne.n	5424 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    5400:	3a19      	subs	r2, #25
    5402:	4911      	ldr	r1, [pc, #68]	; (5448 <_Z9CDC_SetupR8USBSetup+0x70>)
    5404:	4811      	ldr	r0, [pc, #68]	; (544c <_Z9CDC_SetupR8USBSetup+0x74>)
    5406:	f7fd fe45 	bl	3094 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    540a:	2296      	movs	r2, #150	; 0x96
    540c:	4b0e      	ldr	r3, [pc, #56]	; (5448 <_Z9CDC_SetupR8USBSetup+0x70>)
    540e:	00d2      	lsls	r2, r2, #3
    5410:	6819      	ldr	r1, [r3, #0]
    5412:	4291      	cmp	r1, r2
    5414:	d103      	bne.n	541e <_Z9CDC_SetupR8USBSetup+0x46>
    5416:	2401      	movs	r4, #1
    5418:	79d8      	ldrb	r0, [r3, #7]
    541a:	4004      	ands	r4, r0
    541c:	d00e      	beq.n	543c <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    541e:	f7fd f9bb 	bl	2798 <cancelReset>
    5422:	e00e      	b.n	5442 <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    5424:	2a22      	cmp	r2, #34	; 0x22
    5426:	d103      	bne.n	5430 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    5428:	789a      	ldrb	r2, [r3, #2]
    542a:	4b07      	ldr	r3, [pc, #28]	; (5448 <_Z9CDC_SetupR8USBSetup+0x70>)
    542c:	71da      	strb	r2, [r3, #7]
    542e:	e7ec      	b.n	540a <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    5430:	2a23      	cmp	r2, #35	; 0x23
    5432:	d1e0      	bne.n	53f6 <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    5434:	885a      	ldrh	r2, [r3, #2]
    5436:	4b06      	ldr	r3, [pc, #24]	; (5450 <_Z9CDC_SetupR8USBSetup+0x78>)
    5438:	601a      	str	r2, [r3, #0]
			return false;
    543a:	e7dc      	b.n	53f6 <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    543c:	20fa      	movs	r0, #250	; 0xfa
    543e:	f7fd f9a5 	bl	278c <initiateReset>
			return false;
    5442:	2000      	movs	r0, #0
    5444:	e7d7      	b.n	53f6 <_Z9CDC_SetupR8USBSetup+0x1e>
    5446:	46c0      	nop			; (mov r8, r8)
    5448:	20000054 	.word	0x20000054
    544c:	2000037c 	.word	0x2000037c
    5450:	20000050 	.word	0x20000050

00005454 <_ZN7Serial_5beginEm>:
}
    5454:	4770      	bx	lr
	...

00005458 <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
    5458:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    545a:	f7fd f903 	bl	2664 <millis>
    545e:	23f4      	movs	r3, #244	; 0xf4
    5460:	33ff      	adds	r3, #255	; 0xff
		return false;
    5462:	2400      	movs	r4, #0
	if (millis() < 500)
    5464:	4298      	cmp	r0, r3
    5466:	d907      	bls.n	5478 <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    5468:	4b04      	ldr	r3, [pc, #16]	; (547c <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
    546a:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
    546c:	79dc      	ldrb	r4, [r3, #7]
    546e:	1e63      	subs	r3, r4, #1
    5470:	419c      	sbcs	r4, r3
    5472:	b2e4      	uxtb	r4, r4
	delay(10);
    5474:	f7fd f92c 	bl	26d0 <delay>
	return result;
}
    5478:	0020      	movs	r0, r4
    547a:	bd10      	pop	{r4, pc}
    547c:	20000054 	.word	0x20000054

00005480 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    5480:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    5482:	2100      	movs	r1, #0
    5484:	4b05      	ldr	r3, [pc, #20]	; (549c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    5486:	0092      	lsls	r2, r2, #2
    5488:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    548a:	4a05      	ldr	r2, [pc, #20]	; (54a0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    548c:	6059      	str	r1, [r3, #4]
    548e:	3208      	adds	r2, #8
    5490:	601a      	str	r2, [r3, #0]
    5492:	4a04      	ldr	r2, [pc, #16]	; (54a4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    5494:	7619      	strb	r1, [r3, #24]
    5496:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    5498:	4770      	bx	lr
    549a:	46c0      	nop			; (mov r8, r8)
    549c:	20000d1c 	.word	0x20000d1c
    54a0:	0000f4b4 	.word	0x0000f4b4
    54a4:	2000037c 	.word	0x2000037c

000054a8 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    54a8:	b570      	push	{r4, r5, r6, lr}
    54aa:	000e      	movs	r6, r1
	int sent = 0;
    54ac:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    54ae:	6844      	ldr	r4, [r0, #4]
    54b0:	2c00      	cmp	r4, #0
    54b2:	d00b      	beq.n	54cc <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    54b4:	6823      	ldr	r3, [r4, #0]
    54b6:	0031      	movs	r1, r6
    54b8:	685b      	ldr	r3, [r3, #4]
    54ba:	0020      	movs	r0, r4
    54bc:	4798      	blx	r3
		if (res < 0)
    54be:	2800      	cmp	r0, #0
    54c0:	db02      	blt.n	54c8 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    54c2:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    54c4:	68e4      	ldr	r4, [r4, #12]
    54c6:	e7f3      	b.n	54b0 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    54c8:	2501      	movs	r5, #1
    54ca:	426d      	negs	r5, r5
	}
	return sent;
}
    54cc:	0028      	movs	r0, r5
    54ce:	bd70      	pop	{r4, r5, r6, pc}

000054d0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    54d0:	b570      	push	{r4, r5, r6, lr}
    54d2:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    54d4:	6844      	ldr	r4, [r0, #4]
    54d6:	2c00      	cmp	r4, #0
    54d8:	d008      	beq.n	54ec <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    54da:	6823      	ldr	r3, [r4, #0]
    54dc:	0029      	movs	r1, r5
    54de:	689b      	ldr	r3, [r3, #8]
    54e0:	0020      	movs	r0, r4
    54e2:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    54e4:	2800      	cmp	r0, #0
    54e6:	d102      	bne.n	54ee <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    54e8:	68e4      	ldr	r4, [r4, #12]
    54ea:	e7f4      	b.n	54d6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    54ec:	0020      	movs	r0, r4
}
    54ee:	bd70      	pop	{r4, r5, r6, pc}

000054f0 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    54f0:	b570      	push	{r4, r5, r6, lr}
    54f2:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    54f4:	6844      	ldr	r4, [r0, #4]
    54f6:	2c00      	cmp	r4, #0
    54f8:	d007      	beq.n	550a <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    54fa:	6823      	ldr	r3, [r4, #0]
    54fc:	0029      	movs	r1, r5
    54fe:	0020      	movs	r0, r4
    5500:	68db      	ldr	r3, [r3, #12]
    5502:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    5504:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    5506:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    5508:	e7f5      	b.n	54f6 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    550a:	702c      	strb	r4, [r5, #0]
}
    550c:	bd70      	pop	{r4, r5, r6, pc}

0000550e <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    550e:	b570      	push	{r4, r5, r6, lr}
    5510:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5512:	6844      	ldr	r4, [r0, #4]
    5514:	2c00      	cmp	r4, #0
    5516:	d008      	beq.n	552a <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    5518:	6823      	ldr	r3, [r4, #0]
    551a:	0029      	movs	r1, r5
    551c:	681b      	ldr	r3, [r3, #0]
    551e:	0020      	movs	r0, r4
    5520:	4798      	blx	r3
    5522:	2800      	cmp	r0, #0
    5524:	d102      	bne.n	552c <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    5526:	68e4      	ldr	r4, [r4, #12]
    5528:	e7f4      	b.n	5514 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    552a:	0020      	movs	r0, r4
}
    552c:	bd70      	pop	{r4, r5, r6, pc}
	...

00005530 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    5530:	2101      	movs	r1, #1
    5532:	4a06      	ldr	r2, [pc, #24]	; (554c <_Z12PluggableUSBv+0x1c>)
{
    5534:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    5536:	6813      	ldr	r3, [r2, #0]
    5538:	4805      	ldr	r0, [pc, #20]	; (5550 <_Z12PluggableUSBv+0x20>)
    553a:	400b      	ands	r3, r1
    553c:	d105      	bne.n	554a <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    553e:	2402      	movs	r4, #2
    5540:	7004      	strb	r4, [r0, #0]
    5542:	1924      	adds	r4, r4, r4
    5544:	7044      	strb	r4, [r0, #1]
    5546:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    5548:	6011      	str	r1, [r2, #0]
}
    554a:	bd10      	pop	{r4, pc}
    554c:	20000d38 	.word	0x20000d38
    5550:	20000d3c 	.word	0x20000d3c

00005554 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5554:	2300      	movs	r3, #0
    5556:	6003      	str	r3, [r0, #0]
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    5558:	680a      	ldr	r2, [r1, #0]
	capacity = 0;
    555a:	6043      	str	r3, [r0, #4]
	buffer = rhs.buffer;
    555c:	6002      	str	r2, [r0, #0]
	capacity = rhs.capacity;
    555e:	684a      	ldr	r2, [r1, #4]
	len = 0;
    5560:	6083      	str	r3, [r0, #8]
	capacity = rhs.capacity;
    5562:	6042      	str	r2, [r0, #4]
	len = rhs.len;
    5564:	688a      	ldr	r2, [r1, #8]
    5566:	6082      	str	r2, [r0, #8]
	rhs.buffer = NULL;
    5568:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
    556a:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
    556c:	608b      	str	r3, [r1, #8]
}
    556e:	4770      	bx	lr

00005570 <_ZN6StringD1Ev>:
String::~String()
    5570:	b510      	push	{r4, lr}
    5572:	0004      	movs	r4, r0
	free(buffer);
    5574:	6800      	ldr	r0, [r0, #0]
    5576:	f005 fc5b 	bl	ae30 <free>
}
    557a:	0020      	movs	r0, r4
    557c:	bd10      	pop	{r4, pc}

0000557e <_ZN6String10invalidateEv>:
{
    557e:	b510      	push	{r4, lr}
    5580:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    5582:	6800      	ldr	r0, [r0, #0]
    5584:	2800      	cmp	r0, #0
    5586:	d001      	beq.n	558c <_ZN6String10invalidateEv+0xe>
    5588:	f005 fc52 	bl	ae30 <free>
	buffer = NULL;
    558c:	2300      	movs	r3, #0
    558e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    5590:	60a3      	str	r3, [r4, #8]
    5592:	6063      	str	r3, [r4, #4]
}
    5594:	bd10      	pop	{r4, pc}

00005596 <_ZN6String12changeBufferEj>:
{
    5596:	b570      	push	{r4, r5, r6, lr}
    5598:	0004      	movs	r4, r0
    559a:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    559c:	6800      	ldr	r0, [r0, #0]
    559e:	3101      	adds	r1, #1
    55a0:	f006 fd38 	bl	c014 <realloc>
    55a4:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    55a6:	d001      	beq.n	55ac <_ZN6String12changeBufferEj+0x16>
		return 1;
    55a8:	2001      	movs	r0, #1
		capacity = maxStrLen;
    55aa:	c428      	stmia	r4!, {r3, r5}
}
    55ac:	bd70      	pop	{r4, r5, r6, pc}

000055ae <_ZN6String7reserveEj>:
	if (buffer && capacity >= size) return 1;
    55ae:	6803      	ldr	r3, [r0, #0]
{
    55b0:	b510      	push	{r4, lr}
    55b2:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    55b4:	2b00      	cmp	r3, #0
    55b6:	d004      	beq.n	55c2 <_ZN6String7reserveEj+0x14>
    55b8:	6843      	ldr	r3, [r0, #4]
    55ba:	428b      	cmp	r3, r1
    55bc:	d301      	bcc.n	55c2 <_ZN6String7reserveEj+0x14>
		if (len == 0) buffer[0] = 0;
    55be:	2001      	movs	r0, #1
}
    55c0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
    55c2:	0020      	movs	r0, r4
    55c4:	f7ff ffe7 	bl	5596 <_ZN6String12changeBufferEj>
    55c8:	2800      	cmp	r0, #0
    55ca:	d0f9      	beq.n	55c0 <_ZN6String7reserveEj+0x12>
		if (len == 0) buffer[0] = 0;
    55cc:	68a3      	ldr	r3, [r4, #8]
    55ce:	2b00      	cmp	r3, #0
    55d0:	d1f5      	bne.n	55be <_ZN6String7reserveEj+0x10>
    55d2:	6822      	ldr	r2, [r4, #0]
    55d4:	7013      	strb	r3, [r2, #0]
    55d6:	e7f2      	b.n	55be <_ZN6String7reserveEj+0x10>

000055d8 <_ZN6String4copyEPKcj>:
{
    55d8:	b570      	push	{r4, r5, r6, lr}
    55da:	000e      	movs	r6, r1
	if (!reserve(length)) {
    55dc:	0011      	movs	r1, r2
{
    55de:	0004      	movs	r4, r0
    55e0:	0015      	movs	r5, r2
	if (!reserve(length)) {
    55e2:	f7ff ffe4 	bl	55ae <_ZN6String7reserveEj>
    55e6:	2800      	cmp	r0, #0
    55e8:	d104      	bne.n	55f4 <_ZN6String4copyEPKcj+0x1c>
		invalidate();
    55ea:	0020      	movs	r0, r4
    55ec:	f7ff ffc7 	bl	557e <_ZN6String10invalidateEv>
}
    55f0:	0020      	movs	r0, r4
    55f2:	bd70      	pop	{r4, r5, r6, pc}
	len = length;
    55f4:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    55f6:	0031      	movs	r1, r6
    55f8:	6820      	ldr	r0, [r4, #0]
    55fa:	f006 fd60 	bl	c0be <strcpy>
	return *this;
    55fe:	e7f7      	b.n	55f0 <_ZN6String4copyEPKcj+0x18>

00005600 <_ZN6StringC1EPKc>:
	buffer = NULL;
    5600:	2300      	movs	r3, #0
String::String(const char *cstr)
    5602:	b570      	push	{r4, r5, r6, lr}
    5604:	0004      	movs	r4, r0
    5606:	000d      	movs	r5, r1
	buffer = NULL;
    5608:	6003      	str	r3, [r0, #0]
	capacity = 0;
    560a:	6043      	str	r3, [r0, #4]
	len = 0;
    560c:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    560e:	4299      	cmp	r1, r3
    5610:	d007      	beq.n	5622 <_ZN6StringC1EPKc+0x22>
    5612:	0008      	movs	r0, r1
    5614:	f006 fd5b 	bl	c0ce <strlen>
    5618:	0029      	movs	r1, r5
    561a:	0002      	movs	r2, r0
    561c:	0020      	movs	r0, r4
    561e:	f7ff ffdb 	bl	55d8 <_ZN6String4copyEPKcj>
}
    5622:	0020      	movs	r0, r4
    5624:	bd70      	pop	{r4, r5, r6, pc}

00005626 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    5626:	b570      	push	{r4, r5, r6, lr}
    5628:	0004      	movs	r4, r0
    562a:	1e0d      	subs	r5, r1, #0
	if (cstr) copy(cstr, strlen(cstr));
    562c:	d009      	beq.n	5642 <_ZN6StringaSEPKc+0x1c>
    562e:	0008      	movs	r0, r1
    5630:	f006 fd4d 	bl	c0ce <strlen>
    5634:	0029      	movs	r1, r5
    5636:	0002      	movs	r2, r0
    5638:	0020      	movs	r0, r4
    563a:	f7ff ffcd 	bl	55d8 <_ZN6String4copyEPKcj>
	else invalidate();
	
	return *this;
}
    563e:	0020      	movs	r0, r4
    5640:	bd70      	pop	{r4, r5, r6, pc}
	else invalidate();
    5642:	f7ff ff9c 	bl	557e <_ZN6String10invalidateEv>
    5646:	e7fa      	b.n	563e <_ZN6StringaSEPKc+0x18>

00005648 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
    5648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    564a:	0004      	movs	r4, r0
	buffer = NULL;
    564c:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
    564e:	0008      	movs	r0, r1
	buffer = NULL;
    5650:	6023      	str	r3, [r4, #0]
	capacity = 0;
    5652:	6063      	str	r3, [r4, #4]
	len = 0;
    5654:	60a3      	str	r3, [r4, #8]
	utoa(value, buf, base);
    5656:	a901      	add	r1, sp, #4
    5658:	f001 fee2 	bl	7420 <utoa>
	*this = buf;
    565c:	a901      	add	r1, sp, #4
    565e:	0020      	movs	r0, r4
    5660:	f7ff ffe1 	bl	5626 <_ZN6StringaSEPKc>
}
    5664:	0020      	movs	r0, r4
    5666:	b004      	add	sp, #16
    5668:	bd10      	pop	{r4, pc}

0000566a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    566a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    566c:	0004      	movs	r4, r0
    566e:	1e0f      	subs	r7, r1, #0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    5670:	d102      	bne.n	5678 <_ZN6String6concatEPKcj+0xe>
    5672:	2600      	movs	r6, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    5674:	0030      	movs	r0, r6
    5676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (length == 0) return 1;
    5678:	2601      	movs	r6, #1
    567a:	2a00      	cmp	r2, #0
    567c:	d0fa      	beq.n	5674 <_ZN6String6concatEPKcj+0xa>
	unsigned int newlen = len + length;
    567e:	6883      	ldr	r3, [r0, #8]
    5680:	18d5      	adds	r5, r2, r3
	if (!reserve(newlen)) return 0;
    5682:	0029      	movs	r1, r5
    5684:	f7ff ff93 	bl	55ae <_ZN6String7reserveEj>
    5688:	2800      	cmp	r0, #0
    568a:	d0f2      	beq.n	5672 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
    568c:	6823      	ldr	r3, [r4, #0]
    568e:	68a2      	ldr	r2, [r4, #8]
    5690:	0039      	movs	r1, r7
    5692:	1898      	adds	r0, r3, r2
    5694:	f006 fd13 	bl	c0be <strcpy>
	len = newlen;
    5698:	60a5      	str	r5, [r4, #8]
	return 1;
    569a:	e7eb      	b.n	5674 <_ZN6String6concatEPKcj+0xa>

0000569c <_ZN6String6concatERKS_>:
{
    569c:	b510      	push	{r4, lr}
	return concat(s.buffer, s.len);
    569e:	688a      	ldr	r2, [r1, #8]
    56a0:	6809      	ldr	r1, [r1, #0]
    56a2:	f7ff ffe2 	bl	566a <_ZN6String6concatEPKcj>
}
    56a6:	bd10      	pop	{r4, pc}

000056a8 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
    56a8:	b570      	push	{r4, r5, r6, lr}
    56aa:	0005      	movs	r5, r0
    56ac:	000c      	movs	r4, r1
	if (!cstr) return 0;
    56ae:	1e08      	subs	r0, r1, #0
    56b0:	d006      	beq.n	56c0 <_ZN6String6concatEPKc+0x18>
	return concat(cstr, strlen(cstr));
    56b2:	f006 fd0c 	bl	c0ce <strlen>
    56b6:	0021      	movs	r1, r4
    56b8:	0002      	movs	r2, r0
    56ba:	0028      	movs	r0, r5
    56bc:	f7ff ffd5 	bl	566a <_ZN6String6concatEPKcj>
}
    56c0:	bd70      	pop	{r4, r5, r6, pc}

000056c2 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    56c2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    56c4:	2200      	movs	r2, #0
	buf[0] = c;
    56c6:	ab01      	add	r3, sp, #4
    56c8:	7019      	strb	r1, [r3, #0]
	buf[1] = 0;
    56ca:	705a      	strb	r2, [r3, #1]
	return concat(buf, 1);
    56cc:	0019      	movs	r1, r3
    56ce:	3201      	adds	r2, #1
    56d0:	f7ff ffcb 	bl	566a <_ZN6String6concatEPKcj>
}
    56d4:	bd0e      	pop	{r1, r2, r3, pc}

000056d6 <_ZNK6String6equalsEPKc>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    56d6:	6883      	ldr	r3, [r0, #8]
{
    56d8:	b510      	push	{r4, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    56da:	2b00      	cmp	r3, #0
    56dc:	d107      	bne.n	56ee <_ZNK6String6equalsEPKc+0x18>
    56de:	2001      	movs	r0, #1
    56e0:	2900      	cmp	r1, #0
    56e2:	d003      	beq.n	56ec <_ZNK6String6equalsEPKc+0x16>
    56e4:	780b      	ldrb	r3, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
    56e6:	4258      	negs	r0, r3
    56e8:	4158      	adcs	r0, r3
    56ea:	b2c0      	uxtb	r0, r0
}
    56ec:	bd10      	pop	{r4, pc}
	if (cstr == NULL) return buffer[0] == 0;
    56ee:	2900      	cmp	r1, #0
    56f0:	d102      	bne.n	56f8 <_ZNK6String6equalsEPKc+0x22>
    56f2:	6803      	ldr	r3, [r0, #0]
    56f4:	781b      	ldrb	r3, [r3, #0]
    56f6:	e7f6      	b.n	56e6 <_ZNK6String6equalsEPKc+0x10>
	return strcmp(buffer, cstr) == 0;
    56f8:	6800      	ldr	r0, [r0, #0]
    56fa:	f006 fcd6 	bl	c0aa <strcmp>
    56fe:	0003      	movs	r3, r0
    5700:	e7f1      	b.n	56e6 <_ZNK6String6equalsEPKc+0x10>

00005702 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    5702:	b570      	push	{r4, r5, r6, lr}
    5704:	000d      	movs	r5, r1
	if (!bufsize || !buf) return;
    5706:	2a00      	cmp	r2, #0
    5708:	d006      	beq.n	5718 <_ZNK6String8getBytesEPhjj+0x16>
    570a:	2900      	cmp	r1, #0
    570c:	d004      	beq.n	5718 <_ZNK6String8getBytesEPhjj+0x16>
	if (index >= len) {
    570e:	6884      	ldr	r4, [r0, #8]
    5710:	429c      	cmp	r4, r3
    5712:	d802      	bhi.n	571a <_ZNK6String8getBytesEPhjj+0x18>
		buf[0] = 0;
    5714:	2300      	movs	r3, #0
    5716:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    5718:	bd70      	pop	{r4, r5, r6, pc}
	unsigned int n = bufsize - 1;
    571a:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
    571c:	1ae4      	subs	r4, r4, r3
    571e:	4294      	cmp	r4, r2
    5720:	d900      	bls.n	5724 <_ZNK6String8getBytesEPhjj+0x22>
    5722:	0014      	movs	r4, r2
	strncpy((char *)buf, buffer + index, n);
    5724:	6801      	ldr	r1, [r0, #0]
    5726:	0022      	movs	r2, r4
    5728:	18c9      	adds	r1, r1, r3
    572a:	0028      	movs	r0, r5
    572c:	f006 fce7 	bl	c0fe <strncpy>
	buf[n] = 0;
    5730:	2300      	movs	r3, #0
    5732:	552b      	strb	r3, [r5, r4]
    5734:	e7f0      	b.n	5718 <_ZNK6String8getBytesEPhjj+0x16>

00005736 <_ZN6String11toUpperCaseEv>:
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
{
    5736:	b510      	push	{r4, lr}
	if (!buffer) return;
    5738:	6804      	ldr	r4, [r0, #0]
    573a:	2c00      	cmp	r4, #0
    573c:	d007      	beq.n	574e <_ZN6String11toUpperCaseEv+0x18>
	for (char *p = buffer; *p; p++) {
    573e:	7820      	ldrb	r0, [r4, #0]
    5740:	2800      	cmp	r0, #0
    5742:	d004      	beq.n	574e <_ZN6String11toUpperCaseEv+0x18>
		*p = toupper(*p);
    5744:	f006 fd90 	bl	c268 <toupper>
    5748:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    574a:	3401      	adds	r4, #1
    574c:	e7f7      	b.n	573e <_ZN6String11toUpperCaseEv+0x8>
	}
}
    574e:	bd10      	pop	{r4, pc}

00005750 <_ZN15ArduinoUniqueIDC1Ev>:
// Copyright © Luiz Henrique Cassettari. All rights reserved.
// Licensed under the MIT license.

#include "ArduinoUniqueID.h"

ArduinoUniqueID::ArduinoUniqueID()
    5750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	uint32_t pdwUniqueID[4];
	pdwUniqueID[0] = SERIAL_NUMBER_WORD_0;
    5752:	4b0e      	ldr	r3, [pc, #56]	; (578c <_ZN15ArduinoUniqueIDC1Ev+0x3c>)
	pdwUniqueID[1] = SERIAL_NUMBER_WORD_1;
	pdwUniqueID[2] = SERIAL_NUMBER_WORD_2;
	pdwUniqueID[3] = SERIAL_NUMBER_WORD_3;
    5754:	2200      	movs	r2, #0
	pdwUniqueID[0] = SERIAL_NUMBER_WORD_0;
    5756:	681b      	ldr	r3, [r3, #0]
    5758:	9300      	str	r3, [sp, #0]
	pdwUniqueID[1] = SERIAL_NUMBER_WORD_1;
    575a:	4b0d      	ldr	r3, [pc, #52]	; (5790 <_ZN15ArduinoUniqueIDC1Ev+0x40>)
    575c:	681b      	ldr	r3, [r3, #0]
    575e:	9301      	str	r3, [sp, #4]
	pdwUniqueID[2] = SERIAL_NUMBER_WORD_2;
    5760:	4b0c      	ldr	r3, [pc, #48]	; (5794 <_ZN15ArduinoUniqueIDC1Ev+0x44>)
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	9302      	str	r3, [sp, #8]
	pdwUniqueID[3] = SERIAL_NUMBER_WORD_3;
    5766:	4b0c      	ldr	r3, [pc, #48]	; (5798 <_ZN15ArduinoUniqueIDC1Ev+0x48>)
    5768:	681b      	ldr	r3, [r3, #0]
    576a:	9303      	str	r3, [sp, #12]
    576c:	0003      	movs	r3, r0

	for (int i = 0; i < 4; i++)
	{
		id[i*4+0] = (uint8_t)(pdwUniqueID[i] >> 24);
    576e:	4669      	mov	r1, sp
    5770:	5889      	ldr	r1, [r1, r2]
    5772:	3204      	adds	r2, #4
    5774:	0e0c      	lsrs	r4, r1, #24
    5776:	701c      	strb	r4, [r3, #0]
		id[i*4+1] = (uint8_t)(pdwUniqueID[i] >> 16);
    5778:	0c0c      	lsrs	r4, r1, #16
    577a:	705c      	strb	r4, [r3, #1]
		id[i*4+2] = (uint8_t)(pdwUniqueID[i] >> 8);
    577c:	0a0c      	lsrs	r4, r1, #8
    577e:	709c      	strb	r4, [r3, #2]
		id[i*4+3] = (uint8_t)(pdwUniqueID[i] >> 0);
    5780:	70d9      	strb	r1, [r3, #3]
    5782:	3304      	adds	r3, #4
	for (int i = 0; i < 4; i++)
    5784:	2a10      	cmp	r2, #16
    5786:	d1f2      	bne.n	576e <_ZN15ArduinoUniqueIDC1Ev+0x1e>
		id[i*4+1] = (uint8_t)(pdwUniqueID[i] >> 16);
		id[i*4+2] = (uint8_t)(pdwUniqueID[i] >> 8);
		id[i*4+3] = (uint8_t)(pdwUniqueID[i] >> 0);
	}
#endif
}
    5788:	b004      	add	sp, #16
    578a:	bd10      	pop	{r4, pc}
    578c:	0080a00c 	.word	0x0080a00c
    5790:	0080a040 	.word	0x0080a040
    5794:	0080a044 	.word	0x0080a044
    5798:	0080a048 	.word	0x0080a048

0000579c <_GLOBAL__sub_I__ZN15ArduinoUniqueIDC2Ev>:

ArduinoUniqueID _UniqueID;
    579c:	b510      	push	{r4, lr}
    579e:	4802      	ldr	r0, [pc, #8]	; (57a8 <_GLOBAL__sub_I__ZN15ArduinoUniqueIDC2Ev+0xc>)
    57a0:	f7ff ffd6 	bl	5750 <_ZN15ArduinoUniqueIDC1Ev>
    57a4:	bd10      	pop	{r4, pc}
    57a6:	46c0      	nop			; (mov r8, r8)
    57a8:	20000d44 	.word	0x20000d44

000057ac <_ZN3DHTC1Ehhh>:
  _type = type;
  #ifdef __AVR
    _bit = digitalPinToBitMask(pin);
    _port = digitalPinToPort(pin);
  #endif
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    57ac:	4b07      	ldr	r3, [pc, #28]	; (57cc <_ZN3DHTC1Ehhh+0x20>)
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
    57ae:	b510      	push	{r4, lr}
    57b0:	0004      	movs	r4, r0
  _pin = pin;
    57b2:	7141      	strb	r1, [r0, #5]
  _type = type;
    57b4:	7182      	strb	r2, [r0, #6]
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    57b6:	4906      	ldr	r1, [pc, #24]	; (57d0 <_ZN3DHTC1Ehhh+0x24>)
    57b8:	6818      	ldr	r0, [r3, #0]
    57ba:	f002 fa15 	bl	7be8 <__udivsi3>
    57be:	23fa      	movs	r3, #250	; 0xfa
    57c0:	009b      	lsls	r3, r3, #2
    57c2:	4358      	muls	r0, r3
    57c4:	60e0      	str	r0, [r4, #12]
                                                 // reading pulses from DHT sensor.
  // Note that count is now ignored as the DHT reading algorithm adjusts itself
  // basd on the speed of the processor.
}
    57c6:	0020      	movs	r0, r4
    57c8:	bd10      	pop	{r4, pc}
    57ca:	46c0      	nop			; (mov r8, r8)
    57cc:	20000038 	.word	0x20000038
    57d0:	000f4240 	.word	0x000f4240

000057d4 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
    57d4:	b510      	push	{r4, lr}
    57d6:	0004      	movs	r4, r0
  // set up the pins!
  pinMode(_pin, INPUT_PULLUP);
    57d8:	2102      	movs	r1, #2
    57da:	7940      	ldrb	r0, [r0, #5]
    57dc:	f7fe f974 	bl	3ac8 <pinMode>
  // Using this value makes sure that millis() - lastreadtime will be
  // >= MIN_INTERVAL right away. Note that this assignment wraps around,
  // but so will the subtraction.
  _lastreadtime = -MIN_INTERVAL;
    57e0:	4b01      	ldr	r3, [pc, #4]	; (57e8 <_ZN3DHT5beginEv+0x14>)
    57e2:	60a3      	str	r3, [r4, #8]
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}
    57e4:	bd10      	pop	{r4, pc}
    57e6:	46c0      	nop			; (mov r8, r8)
    57e8:	fffff830 	.word	0xfffff830

000057ec <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    57ec:	b570      	push	{r4, r5, r6, lr}
    57ee:	0005      	movs	r5, r0
    57f0:	000e      	movs	r6, r1
  uint32_t count = 0;
    57f2:	2400      	movs	r4, #0
      }
    }
  // Otherwise fall back to using digitalRead (this seems to be necessary on ESP8266
  // right now, perhaps bugs in direct port access functions?).
  #else
    while (digitalRead(_pin) == level) {
    57f4:	7968      	ldrb	r0, [r5, #5]
    57f6:	f7fe f9bf 	bl	3b78 <digitalRead>
    57fa:	42b0      	cmp	r0, r6
    57fc:	d104      	bne.n	5808 <_ZN3DHT11expectPulseEb+0x1c>
      if (count++ >= _maxcycles) {
    57fe:	68ea      	ldr	r2, [r5, #12]
    5800:	1c63      	adds	r3, r4, #1
    5802:	4294      	cmp	r4, r2
    5804:	d302      	bcc.n	580c <_ZN3DHT11expectPulseEb+0x20>
        return 0; // Exceeded timeout, fail.
    5806:	2400      	movs	r4, #0
      }
    }
  #endif

  return count;
}
    5808:	0020      	movs	r0, r4
    580a:	bd70      	pop	{r4, r5, r6, pc}
      if (count++ >= _maxcycles) {
    580c:	001c      	movs	r4, r3
    580e:	e7f1      	b.n	57f4 <_ZN3DHT11expectPulseEb+0x8>

00005810 <_ZN3DHT4readEb>:
boolean DHT::read(bool force) {
    5810:	b570      	push	{r4, r5, r6, lr}
    5812:	b0d0      	sub	sp, #320	; 0x140
    5814:	000d      	movs	r5, r1
    5816:	0004      	movs	r4, r0
  uint32_t currenttime = millis();
    5818:	f7fc ff24 	bl	2664 <millis>
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
    581c:	2d00      	cmp	r5, #0
    581e:	d107      	bne.n	5830 <_ZN3DHT4readEb+0x20>
    5820:	68a3      	ldr	r3, [r4, #8]
    5822:	4a3d      	ldr	r2, [pc, #244]	; (5918 <_ZN3DHT4readEb+0x108>)
    5824:	1ac3      	subs	r3, r0, r3
    5826:	4293      	cmp	r3, r2
    5828:	d802      	bhi.n	5830 <_ZN3DHT4readEb+0x20>
    return _lastresult; // return last correct measurement
    582a:	7c20      	ldrb	r0, [r4, #16]
}
    582c:	b050      	add	sp, #320	; 0x140
    582e:	bd70      	pop	{r4, r5, r6, pc}
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    5830:	2500      	movs	r5, #0
  _lastreadtime = currenttime;
    5832:	60a0      	str	r0, [r4, #8]
  digitalWrite(_pin, HIGH);
    5834:	2101      	movs	r1, #1
    5836:	7960      	ldrb	r0, [r4, #5]
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    5838:	7125      	strb	r5, [r4, #4]
    583a:	70e5      	strb	r5, [r4, #3]
    583c:	70a5      	strb	r5, [r4, #2]
    583e:	7065      	strb	r5, [r4, #1]
    5840:	7025      	strb	r5, [r4, #0]
  digitalWrite(_pin, HIGH);
    5842:	f7fe f945 	bl	3ad0 <digitalWrite>
  delay(250);
    5846:	20fa      	movs	r0, #250	; 0xfa
    5848:	f7fc ff42 	bl	26d0 <delay>
  pinMode(_pin, OUTPUT);
    584c:	7960      	ldrb	r0, [r4, #5]
    584e:	2101      	movs	r1, #1
    5850:	f7fe f93a 	bl	3ac8 <pinMode>
  digitalWrite(_pin, LOW);
    5854:	7960      	ldrb	r0, [r4, #5]
    5856:	0029      	movs	r1, r5
    5858:	f7fe f93a 	bl	3ad0 <digitalWrite>
  delay(20);
    585c:	2014      	movs	r0, #20
    585e:	f7fc ff37 	bl	26d0 <delay>
  __ASM volatile ("cpsid i" : : : "memory");
    5862:	b672      	cpsid	i
    digitalWrite(_pin, HIGH);
    5864:	2101      	movs	r1, #1
    5866:	7960      	ldrb	r0, [r4, #5]
    5868:	f7fe f932 	bl	3ad0 <digitalWrite>
    "   sub %0, #1   \n" // substract 1 from %0 (n)
    "   bne 1b       \n" // if result is not 0 jump to 1
    : "+r" (n)           // '%0' is n variable with RW constraints
    :                    // no input
    :                    // no clobber
  );
    586c:	23a0      	movs	r3, #160	; 0xa0
    586e:	009b      	lsls	r3, r3, #2
    5870:	3b01      	subs	r3, #1
    5872:	d1fd      	bne.n	5870 <_ZN3DHT4readEb+0x60>
    pinMode(_pin, INPUT_PULLUP);
    5874:	2102      	movs	r1, #2
    5876:	7960      	ldrb	r0, [r4, #5]
    5878:	f7fe f926 	bl	3ac8 <pinMode>
    587c:	23a0      	movs	r3, #160	; 0xa0
    587e:	3b01      	subs	r3, #1
    5880:	d1fd      	bne.n	587e <_ZN3DHT4readEb+0x6e>
    if (expectPulse(LOW) == 0) {
    5882:	0029      	movs	r1, r5
    5884:	0020      	movs	r0, r4
    5886:	f7ff ffb1 	bl	57ec <_ZN3DHT11expectPulseEb>
    588a:	42a8      	cmp	r0, r5
    588c:	d103      	bne.n	5896 <_ZN3DHT4readEb+0x86>
      _lastresult = false;
    588e:	2000      	movs	r0, #0
    5890:	7420      	strb	r0, [r4, #16]
  __ASM volatile ("cpsie i" : : : "memory");
    5892:	b662      	cpsie	i
    5894:	e7ca      	b.n	582c <_ZN3DHT4readEb+0x1c>
    if (expectPulse(HIGH) == 0) {
    5896:	2101      	movs	r1, #1
    5898:	0020      	movs	r0, r4
    589a:	f7ff ffa7 	bl	57ec <_ZN3DHT11expectPulseEb>
    589e:	2800      	cmp	r0, #0
    58a0:	d0f5      	beq.n	588e <_ZN3DHT4readEb+0x7e>
    for (int i=0; i<80; i+=2) {
    58a2:	26a0      	movs	r6, #160	; 0xa0
    58a4:	0076      	lsls	r6, r6, #1
      cycles[i]   = expectPulse(LOW);
    58a6:	2100      	movs	r1, #0
    58a8:	0020      	movs	r0, r4
    58aa:	f7ff ff9f 	bl	57ec <_ZN3DHT11expectPulseEb>
    58ae:	466b      	mov	r3, sp
      cycles[i+1] = expectPulse(HIGH);
    58b0:	2101      	movs	r1, #1
      cycles[i]   = expectPulse(LOW);
    58b2:	50e8      	str	r0, [r5, r3]
      cycles[i+1] = expectPulse(HIGH);
    58b4:	0020      	movs	r0, r4
    58b6:	f7ff ff99 	bl	57ec <_ZN3DHT11expectPulseEb>
    58ba:	002b      	movs	r3, r5
    58bc:	3508      	adds	r5, #8
    58be:	446b      	add	r3, sp
    58c0:	6058      	str	r0, [r3, #4]
    for (int i=0; i<80; i+=2) {
    58c2:	42b5      	cmp	r5, r6
    58c4:	d1ef      	bne.n	58a6 <_ZN3DHT4readEb+0x96>
    58c6:	b662      	cpsie	i
  for (int i=0; i<40; ++i) {
    58c8:	2200      	movs	r2, #0
      data[i/8] |= 1;
    58ca:	2101      	movs	r1, #1
    uint32_t lowCycles  = cycles[2*i];
    58cc:	4668      	mov	r0, sp
    58ce:	00d3      	lsls	r3, r2, #3
    58d0:	58c0      	ldr	r0, [r0, r3]
    uint32_t highCycles = cycles[2*i+1];
    58d2:	446b      	add	r3, sp
    58d4:	685e      	ldr	r6, [r3, #4]
    if ((lowCycles == 0) || (highCycles == 0)) {
    58d6:	2800      	cmp	r0, #0
    58d8:	d001      	beq.n	58de <_ZN3DHT4readEb+0xce>
    58da:	2e00      	cmp	r6, #0
    58dc:	d102      	bne.n	58e4 <_ZN3DHT4readEb+0xd4>
      _lastresult = false;
    58de:	2000      	movs	r0, #0
    _lastresult = true;
    58e0:	7420      	strb	r0, [r4, #16]
    return _lastresult;
    58e2:	e7a3      	b.n	582c <_ZN3DHT4readEb+0x1c>
    data[i/8] <<= 1;
    58e4:	10d5      	asrs	r5, r2, #3
    58e6:	5d63      	ldrb	r3, [r4, r5]
    58e8:	005b      	lsls	r3, r3, #1
    58ea:	b2db      	uxtb	r3, r3
    if (highCycles > lowCycles) {
    58ec:	42b0      	cmp	r0, r6
    58ee:	d310      	bcc.n	5912 <_ZN3DHT4readEb+0x102>
  for (int i=0; i<40; ++i) {
    58f0:	3201      	adds	r2, #1
      data[i/8] |= 1;
    58f2:	5563      	strb	r3, [r4, r5]
  for (int i=0; i<40; ++i) {
    58f4:	2a28      	cmp	r2, #40	; 0x28
    58f6:	d1e9      	bne.n	58cc <_ZN3DHT4readEb+0xbc>
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    58f8:	7861      	ldrb	r1, [r4, #1]
    58fa:	7823      	ldrb	r3, [r4, #0]
    58fc:	7922      	ldrb	r2, [r4, #4]
    58fe:	185b      	adds	r3, r3, r1
    5900:	78a1      	ldrb	r1, [r4, #2]
    5902:	185b      	adds	r3, r3, r1
    5904:	78e1      	ldrb	r1, [r4, #3]
    5906:	185b      	adds	r3, r3, r1
    5908:	b2db      	uxtb	r3, r3
    590a:	429a      	cmp	r2, r3
    590c:	d1e7      	bne.n	58de <_ZN3DHT4readEb+0xce>
    _lastresult = true;
    590e:	2001      	movs	r0, #1
    5910:	e7e6      	b.n	58e0 <_ZN3DHT4readEb+0xd0>
      data[i/8] |= 1;
    5912:	430b      	orrs	r3, r1
    5914:	e7ec      	b.n	58f0 <_ZN3DHT4readEb+0xe0>
    5916:	46c0      	nop			; (mov r8, r8)
    5918:	000007cf 	.word	0x000007cf

0000591c <_ZN3DHT15readTemperatureEbb>:
float DHT::readTemperature(bool S, bool force) {
    591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    591e:	000d      	movs	r5, r1
  if (read(force)) {
    5920:	0011      	movs	r1, r2
float DHT::readTemperature(bool S, bool force) {
    5922:	0004      	movs	r4, r0
  if (read(force)) {
    5924:	f7ff ff74 	bl	5810 <_ZN3DHT4readEb>
    5928:	2800      	cmp	r0, #0
    592a:	d007      	beq.n	593c <_ZN3DHT15readTemperatureEbb+0x20>
    switch (_type) {
    592c:	79a3      	ldrb	r3, [r4, #6]
    592e:	b2da      	uxtb	r2, r3
    5930:	2a0b      	cmp	r2, #11
    5932:	d005      	beq.n	5940 <_ZN3DHT15readTemperatureEbb+0x24>
    5934:	d302      	bcc.n	593c <_ZN3DHT15readTemperatureEbb+0x20>
    5936:	3b15      	subs	r3, #21
    5938:	2b01      	cmp	r3, #1
    593a:	d913      	bls.n	5964 <_ZN3DHT15readTemperatureEbb+0x48>
  float f = NAN;
    593c:	4819      	ldr	r0, [pc, #100]	; (59a4 <_ZN3DHT15readTemperatureEbb+0x88>)
  return f;
    593e:	e010      	b.n	5962 <_ZN3DHT15readTemperatureEbb+0x46>
      f = data[2];
    5940:	78a0      	ldrb	r0, [r4, #2]
    5942:	f003 fa3b 	bl	8dbc <__aeabi_ui2f>
      if(S) {
    5946:	2d00      	cmp	r5, #0
    5948:	d00b      	beq.n	5962 <_ZN3DHT15readTemperatureEbb+0x46>
  return c * 1.8 + 32;
    594a:	f005 f825 	bl	a998 <__aeabi_f2d>
    594e:	4a16      	ldr	r2, [pc, #88]	; (59a8 <_ZN3DHT15readTemperatureEbb+0x8c>)
    5950:	4b16      	ldr	r3, [pc, #88]	; (59ac <_ZN3DHT15readTemperatureEbb+0x90>)
    5952:	f004 f9bd 	bl	9cd0 <__aeabi_dmul>
    5956:	2200      	movs	r2, #0
    5958:	4b15      	ldr	r3, [pc, #84]	; (59b0 <_ZN3DHT15readTemperatureEbb+0x94>)
    595a:	f003 fa75 	bl	8e48 <__aeabi_dadd>
    595e:	f005 f86d 	bl	aa3c <__aeabi_d2f>
}
    5962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      f = data[2] & 0x7F;
    5964:	207f      	movs	r0, #127	; 0x7f
    5966:	78a6      	ldrb	r6, [r4, #2]
    5968:	4030      	ands	r0, r6
    596a:	f003 f9d7 	bl	8d1c <__aeabi_i2f>
      f *= 256;
    596e:	2187      	movs	r1, #135	; 0x87
    5970:	05c9      	lsls	r1, r1, #23
    5972:	f002 fedf 	bl	8734 <__aeabi_fmul>
    5976:	1c07      	adds	r7, r0, #0
      f += data[3];
    5978:	78e0      	ldrb	r0, [r4, #3]
    597a:	f003 f9cf 	bl	8d1c <__aeabi_i2f>
    597e:	1c39      	adds	r1, r7, #0
    5980:	f002 fb56 	bl	8030 <__aeabi_fadd>
      f *= 0.1;
    5984:	f005 f808 	bl	a998 <__aeabi_f2d>
    5988:	4a0a      	ldr	r2, [pc, #40]	; (59b4 <_ZN3DHT15readTemperatureEbb+0x98>)
    598a:	4b0b      	ldr	r3, [pc, #44]	; (59b8 <_ZN3DHT15readTemperatureEbb+0x9c>)
    598c:	f004 f9a0 	bl	9cd0 <__aeabi_dmul>
      if (data[2] & 0x80) {
    5990:	b276      	sxtb	r6, r6
      f *= 0.1;
    5992:	f005 f853 	bl	aa3c <__aeabi_d2f>
      if (data[2] & 0x80) {
    5996:	2e00      	cmp	r6, #0
    5998:	dad5      	bge.n	5946 <_ZN3DHT15readTemperatureEbb+0x2a>
        f *= -1;
    599a:	2380      	movs	r3, #128	; 0x80
    599c:	061b      	lsls	r3, r3, #24
    599e:	18c0      	adds	r0, r0, r3
    59a0:	e7d1      	b.n	5946 <_ZN3DHT15readTemperatureEbb+0x2a>
    59a2:	46c0      	nop			; (mov r8, r8)
    59a4:	7fc00000 	.word	0x7fc00000
    59a8:	cccccccd 	.word	0xcccccccd
    59ac:	3ffccccc 	.word	0x3ffccccc
    59b0:	40400000 	.word	0x40400000
    59b4:	9999999a 	.word	0x9999999a
    59b8:	3fb99999 	.word	0x3fb99999

000059bc <_ZN3DHT12readHumidityEb>:
float DHT::readHumidity(bool force) {
    59bc:	b570      	push	{r4, r5, r6, lr}
  if (read()) {
    59be:	2100      	movs	r1, #0
float DHT::readHumidity(bool force) {
    59c0:	0004      	movs	r4, r0
  if (read()) {
    59c2:	f7ff ff25 	bl	5810 <_ZN3DHT4readEb>
    59c6:	2800      	cmp	r0, #0
    59c8:	d007      	beq.n	59da <_ZN3DHT12readHumidityEb+0x1e>
    switch (_type) {
    59ca:	79a3      	ldrb	r3, [r4, #6]
    59cc:	b2da      	uxtb	r2, r3
    59ce:	2a0b      	cmp	r2, #11
    59d0:	d005      	beq.n	59de <_ZN3DHT12readHumidityEb+0x22>
    59d2:	d302      	bcc.n	59da <_ZN3DHT12readHumidityEb+0x1e>
    59d4:	3b15      	subs	r3, #21
    59d6:	2b01      	cmp	r3, #1
    59d8:	d905      	bls.n	59e6 <_ZN3DHT12readHumidityEb+0x2a>
  float f = NAN;
    59da:	480e      	ldr	r0, [pc, #56]	; (5a14 <_ZN3DHT12readHumidityEb+0x58>)
  return f;
    59dc:	e002      	b.n	59e4 <_ZN3DHT12readHumidityEb+0x28>
      f = data[0];
    59de:	7820      	ldrb	r0, [r4, #0]
    59e0:	f003 f9ec 	bl	8dbc <__aeabi_ui2f>
}
    59e4:	bd70      	pop	{r4, r5, r6, pc}
      f = data[0];
    59e6:	7820      	ldrb	r0, [r4, #0]
    59e8:	f003 f9e8 	bl	8dbc <__aeabi_ui2f>
      f *= 256;
    59ec:	2187      	movs	r1, #135	; 0x87
    59ee:	05c9      	lsls	r1, r1, #23
    59f0:	f002 fea0 	bl	8734 <__aeabi_fmul>
    59f4:	1c05      	adds	r5, r0, #0
      f += data[1];
    59f6:	7860      	ldrb	r0, [r4, #1]
    59f8:	f003 f990 	bl	8d1c <__aeabi_i2f>
    59fc:	1c29      	adds	r1, r5, #0
    59fe:	f002 fb17 	bl	8030 <__aeabi_fadd>
      f *= 0.1;
    5a02:	f004 ffc9 	bl	a998 <__aeabi_f2d>
    5a06:	4a04      	ldr	r2, [pc, #16]	; (5a18 <_ZN3DHT12readHumidityEb+0x5c>)
    5a08:	4b04      	ldr	r3, [pc, #16]	; (5a1c <_ZN3DHT12readHumidityEb+0x60>)
    5a0a:	f004 f961 	bl	9cd0 <__aeabi_dmul>
    5a0e:	f005 f815 	bl	aa3c <__aeabi_d2f>
      break;
    5a12:	e7e7      	b.n	59e4 <_ZN3DHT12readHumidityEb+0x28>
    5a14:	7fc00000 	.word	0x7fc00000
    5a18:	9999999a 	.word	0x9999999a
    5a1c:	3fb99999 	.word	0x3fb99999

00005a20 <_ZN13FilterOnePole12setFrequencyEf>:
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
    5a20:	b510      	push	{r4, lr}
    5a22:	0004      	movs	r4, r0
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    5a24:	1c08      	adds	r0, r1, #0
    5a26:	f004 ffb7 	bl	a998 <__aeabi_f2d>
    5a2a:	4a08      	ldr	r2, [pc, #32]	; (5a4c <_ZN13FilterOnePole12setFrequencyEf+0x2c>)
    5a2c:	4b08      	ldr	r3, [pc, #32]	; (5a50 <_ZN13FilterOnePole12setFrequencyEf+0x30>)
    5a2e:	f004 f94f 	bl	9cd0 <__aeabi_dmul>
    5a32:	0002      	movs	r2, r0
    5a34:	000b      	movs	r3, r1
    5a36:	2000      	movs	r0, #0
    5a38:	4906      	ldr	r1, [pc, #24]	; (5a54 <_ZN13FilterOnePole12setFrequencyEf+0x34>)
    5a3a:	f003 fd15 	bl	9468 <__aeabi_ddiv>
    5a3e:	f004 fffd 	bl	aa3c <__aeabi_d2f>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    5a42:	4905      	ldr	r1, [pc, #20]	; (5a58 <_ZN13FilterOnePole12setFrequencyEf+0x38>)
    5a44:	f002 fe76 	bl	8734 <__aeabi_fmul>
    5a48:	6060      	str	r0, [r4, #4]
}
    5a4a:	bd10      	pop	{r4, pc}
    5a4c:	54442d18 	.word	0x54442d18
    5a50:	401921fb 	.word	0x401921fb
    5a54:	3ff00000 	.word	0x3ff00000
    5a58:	49742400 	.word	0x49742400

00005a5c <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>:
void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
    5a5c:	b570      	push	{r4, r5, r6, lr}
    5a5e:	0004      	movs	r4, r0
    5a60:	1c1d      	adds	r5, r3, #0
  FT = ft;
    5a62:	7001      	strb	r1, [r0, #0]
  setFrequency( fc );
    5a64:	1c11      	adds	r1, r2, #0
    5a66:	f7ff ffdb 	bl	5a20 <_ZN13FilterOnePole12setFrequencyEf>
  Y = initialValue;
    5a6a:	60e5      	str	r5, [r4, #12]
  Ylast = initialValue;
    5a6c:	6125      	str	r5, [r4, #16]
  X = initialValue;
    5a6e:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    5a70:	f7fc fdfe 	bl	2670 <micros>
    5a74:	61e0      	str	r0, [r4, #28]
}
    5a76:	bd70      	pop	{r4, r5, r6, pc}

00005a78 <_ZN13FilterOnePole6outputEv>:
}

float FilterOnePole::output() {
    5a78:	b5d0      	push	{r4, r6, r7, lr}
    5a7a:	0004      	movs	r4, r0
    // figure out which button to read
  switch (FT) {
    5a7c:	7800      	ldrb	r0, [r0, #0]
    5a7e:	2803      	cmp	r0, #3
    5a80:	d835      	bhi.n	5aee <_ZN13FilterOnePole6outputEv+0x76>
    5a82:	f002 f8a7 	bl	7bd4 <__gnu_thumb1_case_uqi>
    5a86:	0219      	.short	0x0219
    5a88:	1e04      	.short	0x1e04
    case LOWPASS:         
      // return the last value
      return Y; 
    5a8a:	68e0      	ldr	r0, [r4, #12]
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    5a8c:	bdd0      	pop	{r4, r6, r7, pc}
      return Y * (TauUS/1.0e6);
    5a8e:	6860      	ldr	r0, [r4, #4]
    5a90:	f004 ff82 	bl	a998 <__aeabi_f2d>
    5a94:	2200      	movs	r2, #0
    5a96:	4b17      	ldr	r3, [pc, #92]	; (5af4 <_ZN13FilterOnePole6outputEv+0x7c>)
    5a98:	f003 fce6 	bl	9468 <__aeabi_ddiv>
    5a9c:	0006      	movs	r6, r0
    5a9e:	68e0      	ldr	r0, [r4, #12]
    5aa0:	000f      	movs	r7, r1
    5aa2:	f004 ff79 	bl	a998 <__aeabi_f2d>
    5aa6:	0002      	movs	r2, r0
    5aa8:	000b      	movs	r3, r1
    5aaa:	0030      	movs	r0, r6
    5aac:	0039      	movs	r1, r7
    5aae:	f004 f90f 	bl	9cd0 <__aeabi_dmul>
      return (X-Y)/(TauUS/1.0e6);
    5ab2:	f004 ffc3 	bl	aa3c <__aeabi_d2f>
    5ab6:	e7e9      	b.n	5a8c <_ZN13FilterOnePole6outputEv+0x14>
      return X-Y;
    5ab8:	68e1      	ldr	r1, [r4, #12]
    5aba:	6960      	ldr	r0, [r4, #20]
    5abc:	f002 ff5a 	bl	8974 <__aeabi_fsub>
    5ac0:	e7e4      	b.n	5a8c <_ZN13FilterOnePole6outputEv+0x14>
      return (X-Y)/(TauUS/1.0e6);
    5ac2:	68e1      	ldr	r1, [r4, #12]
    5ac4:	6960      	ldr	r0, [r4, #20]
    5ac6:	f002 ff55 	bl	8974 <__aeabi_fsub>
    5aca:	f004 ff65 	bl	a998 <__aeabi_f2d>
    5ace:	0006      	movs	r6, r0
    5ad0:	6860      	ldr	r0, [r4, #4]
    5ad2:	000f      	movs	r7, r1
    5ad4:	f004 ff60 	bl	a998 <__aeabi_f2d>
    5ad8:	2200      	movs	r2, #0
    5ada:	4b06      	ldr	r3, [pc, #24]	; (5af4 <_ZN13FilterOnePole6outputEv+0x7c>)
    5adc:	f003 fcc4 	bl	9468 <__aeabi_ddiv>
    5ae0:	0002      	movs	r2, r0
    5ae2:	000b      	movs	r3, r1
    5ae4:	0030      	movs	r0, r6
    5ae6:	0039      	movs	r1, r7
    5ae8:	f003 fcbe 	bl	9468 <__aeabi_ddiv>
    5aec:	e7e1      	b.n	5ab2 <_ZN13FilterOnePole6outputEv+0x3a>
      return 0;
    5aee:	2000      	movs	r0, #0
    5af0:	e7cc      	b.n	5a8c <_ZN13FilterOnePole6outputEv+0x14>
    5af2:	46c0      	nop			; (mov r8, r8)
    5af4:	412e8480 	.word	0x412e8480

00005af8 <_ZN13FilterOnePole5inputEf>:
float FilterOnePole::input( float inVal ) {
    5af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5afa:	0004      	movs	r4, r0
    5afc:	1c0e      	adds	r6, r1, #0
  long time = micros();
    5afe:	f7fc fdb7 	bl	2670 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5b02:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    5b04:	0005      	movs	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5b06:	1ac0      	subs	r0, r0, r3
    5b08:	f003 f908 	bl	8d1c <__aeabi_i2f>
  Ylast = Y;
    5b0c:	68e3      	ldr	r3, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5b0e:	1c01      	adds	r1, r0, #0
  Ylast = Y;
    5b10:	6123      	str	r3, [r4, #16]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5b12:	61a0      	str	r0, [r4, #24]
  LastUS = time;                      // update this now
    5b14:	61e5      	str	r5, [r4, #28]
  X = inVal;                          // this is now the most recent input value
    5b16:	6166      	str	r6, [r4, #20]
  TauSamps = TauUS / ElapsedUS;
    5b18:	6860      	ldr	r0, [r4, #4]
    5b1a:	f002 fc1b 	bl	8354 <__aeabi_fdiv>
    5b1e:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    5b20:	f004 ff3a 	bl	a998 <__aeabi_f2d>
    5b24:	0002      	movs	r2, r0
    5b26:	000b      	movs	r3, r1
    5b28:	2000      	movs	r0, #0
    5b2a:	4918      	ldr	r1, [pc, #96]	; (5b8c <_ZN13FilterOnePole5inputEf+0x94>)
    5b2c:	f003 fc9c 	bl	9468 <__aeabi_ddiv>
    5b30:	f001 fda2 	bl	7678 <exp>
    5b34:	f004 ff82 	bl	aa3c <__aeabi_d2f>
    5b38:	1c05      	adds	r5, r0, #0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    5b3a:	f004 ff2d 	bl	a998 <__aeabi_f2d>
    5b3e:	0002      	movs	r2, r0
    5b40:	000b      	movs	r3, r1
    5b42:	2000      	movs	r0, #0
    5b44:	4912      	ldr	r1, [pc, #72]	; (5b90 <_ZN13FilterOnePole5inputEf+0x98>)
    5b46:	f004 fb43 	bl	a1d0 <__aeabi_dsub>
    5b4a:	0006      	movs	r6, r0
    5b4c:	6960      	ldr	r0, [r4, #20]
    5b4e:	000f      	movs	r7, r1
    5b50:	f004 ff22 	bl	a998 <__aeabi_f2d>
    5b54:	0002      	movs	r2, r0
    5b56:	000b      	movs	r3, r1
    5b58:	0030      	movs	r0, r6
    5b5a:	0039      	movs	r1, r7
    5b5c:	f004 f8b8 	bl	9cd0 <__aeabi_dmul>
    5b60:	0006      	movs	r6, r0
    5b62:	000f      	movs	r7, r1
    5b64:	1c28      	adds	r0, r5, #0
    5b66:	6921      	ldr	r1, [r4, #16]
    5b68:	f002 fde4 	bl	8734 <__aeabi_fmul>
    5b6c:	f004 ff14 	bl	a998 <__aeabi_f2d>
    5b70:	0002      	movs	r2, r0
    5b72:	000b      	movs	r3, r1
    5b74:	0030      	movs	r0, r6
    5b76:	0039      	movs	r1, r7
    5b78:	f003 f966 	bl	8e48 <__aeabi_dadd>
    5b7c:	f004 ff5e 	bl	aa3c <__aeabi_d2f>
    5b80:	60e0      	str	r0, [r4, #12]
  return output();
    5b82:	0020      	movs	r0, r4
    5b84:	f7ff ff78 	bl	5a78 <_ZN13FilterOnePole6outputEv>
}
    5b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b8a:	46c0      	nop			; (mov r8, r8)
    5b8c:	bff00000 	.word	0xbff00000
    5b90:	3ff00000 	.word	0x3ff00000

00005b94 <_ZN20FilterOnePoleCascadeC1Eff>:
}


// stuff for filter2 (lowpass only)
// should be able to set a separate fall time as well
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  setFilter( ft, fc, initialValue );
    5b96:	26fe      	movs	r6, #254	; 0xfe
    5b98:	2700      	movs	r7, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5b9a:	0004      	movs	r4, r0
  setFilter( ft, fc, initialValue );
    5b9c:	05b6      	lsls	r6, r6, #22
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5b9e:	1c15      	adds	r5, r2, #0
  setFilter( ft, fc, initialValue );
    5ba0:	1c3b      	adds	r3, r7, #0
    5ba2:	1c32      	adds	r2, r6, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5ba4:	9101      	str	r1, [sp, #4]
  setFilter( ft, fc, initialValue );
    5ba6:	2101      	movs	r1, #1
    5ba8:	f7ff ff58 	bl	5a5c <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5bac:	0020      	movs	r0, r4
  setFilter( ft, fc, initialValue );
    5bae:	1c3b      	adds	r3, r7, #0
    5bb0:	1c32      	adds	r2, r6, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5bb2:	3020      	adds	r0, #32
  setFilter( ft, fc, initialValue );
    5bb4:	2101      	movs	r1, #1
    5bb6:	f7ff ff51 	bl	5a5c <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>
}

void FilterOnePoleCascade::setRiseTime( float riseTime ) {
  float tauScale = 3.36;      // found emperically, by running test();

  Pole1.setTau( riseTime / tauScale );
    5bba:	4908      	ldr	r1, [pc, #32]	; (5bdc <_ZN20FilterOnePoleCascadeC1Eff+0x48>)
    5bbc:	9801      	ldr	r0, [sp, #4]
    5bbe:	f002 fbc9 	bl	8354 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
    5bc2:	4907      	ldr	r1, [pc, #28]	; (5be0 <_ZN20FilterOnePoleCascadeC1Eff+0x4c>)
    5bc4:	f002 fdb6 	bl	8734 <__aeabi_fmul>
    5bc8:	6060      	str	r0, [r4, #4]
    5bca:	6260      	str	r0, [r4, #36]	; 0x24
  Y = Ylast = X = newVal;
    5bcc:	6165      	str	r5, [r4, #20]
    5bce:	6125      	str	r5, [r4, #16]
    5bd0:	60e5      	str	r5, [r4, #12]
    5bd2:	6365      	str	r5, [r4, #52]	; 0x34
    5bd4:	6325      	str	r5, [r4, #48]	; 0x30
    5bd6:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    5bd8:	0020      	movs	r0, r4
    5bda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5bdc:	40570a3d 	.word	0x40570a3d
    5be0:	49742400 	.word	0x49742400

00005be4 <_ZN20FilterOnePoleCascade11setRiseTimeEf>:
void FilterOnePoleCascade::setRiseTime( float riseTime ) {
    5be4:	b510      	push	{r4, lr}
    5be6:	0004      	movs	r4, r0
    5be8:	1c08      	adds	r0, r1, #0
  Pole1.setTau( riseTime / tauScale );
    5bea:	4904      	ldr	r1, [pc, #16]	; (5bfc <_ZN20FilterOnePoleCascade11setRiseTimeEf+0x18>)
    5bec:	f002 fbb2 	bl	8354 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
    5bf0:	4903      	ldr	r1, [pc, #12]	; (5c00 <_ZN20FilterOnePoleCascade11setRiseTimeEf+0x1c>)
    5bf2:	f002 fd9f 	bl	8734 <__aeabi_fmul>
    5bf6:	6060      	str	r0, [r4, #4]
    5bf8:	6260      	str	r0, [r4, #36]	; 0x24
  Pole2.setTau( riseTime / tauScale );
}
    5bfa:	bd10      	pop	{r4, pc}
    5bfc:	40570a3d 	.word	0x40570a3d
    5c00:	49742400 	.word	0x49742400

00005c04 <_ZN20FilterOnePoleCascade5inputEf>:

float FilterOnePoleCascade::input( float inVal  ) {
    5c04:	b510      	push	{r4, lr}
  Pole2.input( Pole1.input( inVal ));
    5c06:	0004      	movs	r4, r0
    5c08:	f7ff ff76 	bl	5af8 <_ZN13FilterOnePole5inputEf>
    5c0c:	3420      	adds	r4, #32
    5c0e:	1c01      	adds	r1, r0, #0
    5c10:	0020      	movs	r0, r4
    5c12:	f7ff ff71 	bl	5af8 <_ZN13FilterOnePole5inputEf>
  Pole1.setToNewValue( newVal );
  Pole2.setToNewValue( newVal );
}

float FilterOnePoleCascade::output() {
  return Pole2.output();
    5c16:	0020      	movs	r0, r4
    5c18:	f7ff ff2e 	bl	5a78 <_ZN13FilterOnePole6outputEv>
}
    5c1c:	bd10      	pop	{r4, pc}

00005c1e <_ZN20FilterOnePoleCascade13setToNewValueEf>:
  Y = Ylast = X = newVal;
    5c1e:	6141      	str	r1, [r0, #20]
    5c20:	6101      	str	r1, [r0, #16]
    5c22:	60c1      	str	r1, [r0, #12]
    5c24:	6341      	str	r1, [r0, #52]	; 0x34
    5c26:	6301      	str	r1, [r0, #48]	; 0x30
    5c28:	62c1      	str	r1, [r0, #44]	; 0x2c
}
    5c2a:	4770      	bx	lr

00005c2c <_ZN20FilterOnePoleCascade6outputEv>:
float FilterOnePoleCascade::output() {
    5c2c:	b510      	push	{r4, lr}
  return Pole2.output();
    5c2e:	3020      	adds	r0, #32
    5c30:	f7ff ff22 	bl	5a78 <_ZN13FilterOnePole6outputEv>
}
    5c34:	bd10      	pop	{r4, pc}
	...

00005c38 <_ZL15is_rtc_syncbusyv>:
}


static inline bool is_rtc_syncbusy()
{
	if (RTC->MODE2.SYNCBUSY.reg)
    5c38:	4b02      	ldr	r3, [pc, #8]	; (5c44 <_ZL15is_rtc_syncbusyv+0xc>)
    5c3a:	6918      	ldr	r0, [r3, #16]
    5c3c:	1e43      	subs	r3, r0, #1
    5c3e:	4198      	sbcs	r0, r3
    5c40:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	
	return false;
}
    5c42:	4770      	bx	lr
    5c44:	40002000 	.word	0x40002000

00005c48 <_ZN7RTCZeroC1Ev>:
	_configured = false;
    5c48:	2300      	movs	r3, #0
    5c4a:	7003      	strb	r3, [r0, #0]
}
    5c4c:	4770      	bx	lr
	...

00005c50 <_ZN7RTCZero12rtc_get_timeEv>:
{
    5c50:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    5c52:	f7ff fff1 	bl	5c38 <_ZL15is_rtc_syncbusyv>
    5c56:	2800      	cmp	r0, #0
    5c58:	d1fb      	bne.n	5c52 <_ZN7RTCZero12rtc_get_timeEv+0x2>
	uint32_t register_value = RTC->MODE2.CLOCK.reg;
    5c5a:	4b01      	ldr	r3, [pc, #4]	; (5c60 <_ZN7RTCZero12rtc_get_timeEv+0x10>)
    5c5c:	6998      	ldr	r0, [r3, #24]
}
    5c5e:	bd10      	pop	{r4, pc}
    5c60:	40002000 	.word	0x40002000

00005c64 <_ZN7RTCZero10getSecondsEv>:
{
    5c64:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5c66:	f7ff fff3 	bl	5c50 <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    5c6a:	233f      	movs	r3, #63	; 0x3f
    5c6c:	4018      	ands	r0, r3
}
    5c6e:	bd10      	pop	{r4, pc}

00005c70 <_ZN7RTCZero10getMinutesEv>:
{
    5c70:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5c72:	f7ff ffed 	bl	5c50 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5c76:	0500      	lsls	r0, r0, #20
	return value;
    5c78:	0e80      	lsrs	r0, r0, #26
}
    5c7a:	bd10      	pop	{r4, pc}

00005c7c <_ZN7RTCZero8getHoursEv>:
{
    5c7c:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5c7e:	f7ff ffe7 	bl	5c50 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    5c82:	03c0      	lsls	r0, r0, #15
	return value;
    5c84:	0ec0      	lsrs	r0, r0, #27
}
    5c86:	bd10      	pop	{r4, pc}

00005c88 <_ZN7RTCZero6getDayEv>:
{
    5c88:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5c8a:	f7ff ffe1 	bl	5c50 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5c8e:	0280      	lsls	r0, r0, #10
	return value;
    5c90:	0ec0      	lsrs	r0, r0, #27
}
    5c92:	bd10      	pop	{r4, pc}

00005c94 <_ZN7RTCZero8getMonthEv>:
{
    5c94:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5c96:	f7ff ffdb 	bl	5c50 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    5c9a:	0180      	lsls	r0, r0, #6
	return value;
    5c9c:	0f00      	lsrs	r0, r0, #28
}
    5c9e:	bd10      	pop	{r4, pc}

00005ca0 <_ZN7RTCZero7getYearEv>:
{
    5ca0:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5ca2:	f7ff ffd5 	bl	5c50 <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    5ca6:	0e80      	lsrs	r0, r0, #26
}
    5ca8:	bd10      	pop	{r4, pc}
	...

00005cac <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>:
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    5cac:	88c8      	ldrh	r0, [r1, #6]
    5cae:	4b09      	ldr	r3, [pc, #36]	; (5cd4 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value+0x28>)
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    5cb0:	78ca      	ldrb	r2, [r1, #3]
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    5cb2:	18c0      	adds	r0, r0, r3
    5cb4:	0683      	lsls	r3, r0, #26
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    5cb6:	7908      	ldrb	r0, [r1, #4]
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    5cb8:	0452      	lsls	r2, r2, #17
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    5cba:	0580      	lsls	r0, r0, #22
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5cbc:	4310      	orrs	r0, r2
    5cbe:	780a      	ldrb	r2, [r1, #0]
    5cc0:	4310      	orrs	r0, r2
	clock_reg_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    5cc2:	788a      	ldrb	r2, [r1, #2]
    5cc4:	0312      	lsls	r2, r2, #12
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5cc6:	4310      	orrs	r0, r2
	clock_reg_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    5cc8:	784a      	ldrb	r2, [r1, #1]
    5cca:	0192      	lsls	r2, r2, #6
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5ccc:	4310      	orrs	r0, r2
    5cce:	4318      	orrs	r0, r3
}
    5cd0:	4770      	bx	lr
    5cd2:	46c0      	nop			; (mov r8, r8)
    5cd4:	fffff830 	.word	0xfffff830

00005cd8 <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>:
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5cd8:	20fa      	movs	r0, #250	; 0xfa
{
    5cda:	b510      	push	{r4, lr}
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5cdc:	241f      	movs	r4, #31
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5cde:	0e8b      	lsrs	r3, r1, #26
    5ce0:	00c0      	lsls	r0, r0, #3
    5ce2:	181b      	adds	r3, r3, r0
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5ce4:	0c48      	lsrs	r0, r1, #17
    5ce6:	4020      	ands	r0, r4
    5ce8:	70d0      	strb	r0, [r2, #3]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5cea:	203f      	movs	r0, #63	; 0x3f
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5cec:	80d3      	strh	r3, [r2, #6]
	time->month = ((clock_reg_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    5cee:	018b      	lsls	r3, r1, #6
    5cf0:	0f1b      	lsrs	r3, r3, #28
    5cf2:	7113      	strb	r3, [r2, #4]
	time->hour = ((clock_reg_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    5cf4:	0b0b      	lsrs	r3, r1, #12
    5cf6:	4023      	ands	r3, r4
    5cf8:	7093      	strb	r3, [r2, #2]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5cfa:	098b      	lsrs	r3, r1, #6
    5cfc:	4003      	ands	r3, r0
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    5cfe:	4001      	ands	r1, r0
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5d00:	7053      	strb	r3, [r2, #1]
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    5d02:	7011      	strb	r1, [r2, #0]
}
    5d04:	bd10      	pop	{r4, pc}
	...

00005d08 <_ZN7RTCZero8getEpochEv>:
{
    5d08:	b530      	push	{r4, r5, lr}
    5d0a:	b08d      	sub	sp, #52	; 0x34
    5d0c:	0005      	movs	r5, r0
	uint32_t register_value = rtc_get_time();
    5d0e:	f7ff ff9f 	bl	5c50 <_ZN7RTCZero12rtc_get_timeEv>
	rtc_register_value_to_time(register_value, &time);
    5d12:	ac01      	add	r4, sp, #4
	uint32_t register_value = rtc_get_time();
    5d14:	0001      	movs	r1, r0
	rtc_register_value_to_time(register_value, &time);
    5d16:	0022      	movs	r2, r4
    5d18:	0028      	movs	r0, r5
    5d1a:	f7ff ffdd 	bl	5cd8 <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>
	tm.tm_year = time.year - 1900;		// Years since 1900
    5d1e:	88e3      	ldrh	r3, [r4, #6]
    5d20:	4a09      	ldr	r2, [pc, #36]	; (5d48 <_ZN7RTCZero8getEpochEv+0x40>)
	uint32_t epoch = mktime(&tm);
    5d22:	a803      	add	r0, sp, #12
	tm.tm_year = time.year - 1900;		// Years since 1900
    5d24:	189b      	adds	r3, r3, r2
    5d26:	9308      	str	r3, [sp, #32]
	tm.tm_mon  = time.month - 1;
    5d28:	7923      	ldrb	r3, [r4, #4]
    5d2a:	3b01      	subs	r3, #1
    5d2c:	9307      	str	r3, [sp, #28]
	tm.tm_mday = time.day;
    5d2e:	78e3      	ldrb	r3, [r4, #3]
    5d30:	9306      	str	r3, [sp, #24]
	tm.tm_hour = time.hour;
    5d32:	78a3      	ldrb	r3, [r4, #2]
    5d34:	9305      	str	r3, [sp, #20]
	tm.tm_min  = time.minute;
    5d36:	7863      	ldrb	r3, [r4, #1]
    5d38:	9304      	str	r3, [sp, #16]
	tm.tm_sec  = time.second;
    5d3a:	7823      	ldrb	r3, [r4, #0]
    5d3c:	9303      	str	r3, [sp, #12]
	uint32_t epoch = mktime(&tm);
    5d3e:	f005 f983 	bl	b048 <mktime>
}
    5d42:	b00d      	add	sp, #52	; 0x34
    5d44:	bd30      	pop	{r4, r5, pc}
    5d46:	46c0      	nop			; (mov r8, r8)
    5d48:	fffff894 	.word	0xfffff894

00005d4c <_ZN7RTCZero10RTCdisableEv>:


void RTCZero::RTCdisable()
{
    5d4c:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    5d4e:	f7ff ff73 	bl	5c38 <_ZL15is_rtc_syncbusyv>
    5d52:	2800      	cmp	r0, #0
    5d54:	d1fb      	bne.n	5d4e <_ZN7RTCZero10RTCdisableEv+0x2>
		// Wait for synchronization
	}
	
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    5d56:	2102      	movs	r1, #2
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
    5d58:	4b05      	ldr	r3, [pc, #20]	; (5d70 <_ZN7RTCZero10RTCdisableEv+0x24>)
    5d5a:	4a06      	ldr	r2, [pc, #24]	; (5d74 <_ZN7RTCZero10RTCdisableEv+0x28>)
    5d5c:	811a      	strh	r2, [r3, #8]
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
    5d5e:	819a      	strh	r2, [r3, #12]
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    5d60:	881a      	ldrh	r2, [r3, #0]
    5d62:	438a      	bics	r2, r1
    5d64:	801a      	strh	r2, [r3, #0]
	
	while (is_rtc_syncbusy())
    5d66:	f7ff ff67 	bl	5c38 <_ZL15is_rtc_syncbusyv>
    5d6a:	2800      	cmp	r0, #0
    5d6c:	d1fb      	bne.n	5d66 <_ZN7RTCZero10RTCdisableEv+0x1a>
	{
		// Wait for synchronization
	}
}
    5d6e:	bd10      	pop	{r4, pc}
    5d70:	40002000 	.word	0x40002000
    5d74:	ffff81ff 	.word	0xffff81ff

00005d78 <_ZN7RTCZero9RTCenableEv>:

void RTCZero::RTCenable()
{
    5d78:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    5d7a:	f7ff ff5d 	bl	5c38 <_ZL15is_rtc_syncbusyv>
    5d7e:	2800      	cmp	r0, #0
    5d80:	d1fb      	bne.n	5d7a <_ZN7RTCZero9RTCenableEv+0x2>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;			// enable RTC
    5d82:	2302      	movs	r3, #2
    5d84:	4a04      	ldr	r2, [pc, #16]	; (5d98 <_ZN7RTCZero9RTCenableEv+0x20>)
    5d86:	8811      	ldrh	r1, [r2, #0]
    5d88:	430b      	orrs	r3, r1
    5d8a:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    5d8c:	f7ff ff54 	bl	5c38 <_ZL15is_rtc_syncbusyv>
    5d90:	2800      	cmp	r0, #0
    5d92:	d1fb      	bne.n	5d8c <_ZN7RTCZero9RTCenableEv+0x14>
	{
		// Wait for synchronization
	}
}
    5d94:	bd10      	pop	{r4, pc}
    5d96:	46c0      	nop			; (mov r8, r8)
    5d98:	40002000 	.word	0x40002000

00005d9c <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>:
{
    5d9c:	b570      	push	{r4, r5, r6, lr}
    5d9e:	0005      	movs	r5, r0
	uint32_t register_value = rtc_time_to_register_value(time);
    5da0:	f7ff ff84 	bl	5cac <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>
    5da4:	0006      	movs	r6, r0
	while (is_rtc_syncbusy())
    5da6:	f7ff ff47 	bl	5c38 <_ZL15is_rtc_syncbusyv>
    5daa:	2800      	cmp	r0, #0
    5dac:	d1fb      	bne.n	5da6 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0xa>
	RTC->MODE2.CLOCK.reg = register_value;
    5dae:	4c0b      	ldr	r4, [pc, #44]	; (5ddc <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x40>)
	RTCdisable();
    5db0:	0028      	movs	r0, r5
    5db2:	f7ff ffcb 	bl	5d4c <_ZN7RTCZero10RTCdisableEv>
	RTC->MODE2.CLOCK.reg = register_value;
    5db6:	61a6      	str	r6, [r4, #24]
	while (is_rtc_syncbusy())
    5db8:	f7ff ff3e 	bl	5c38 <_ZL15is_rtc_syncbusyv>
    5dbc:	2800      	cmp	r0, #0
    5dbe:	d1fb      	bne.n	5db8 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x1c>
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_SYNCBUSY_CLOCKSYNC;
    5dc0:	2280      	movs	r2, #128	; 0x80
    5dc2:	8823      	ldrh	r3, [r4, #0]
    5dc4:	0212      	lsls	r2, r2, #8
    5dc6:	4313      	orrs	r3, r2
    5dc8:	8023      	strh	r3, [r4, #0]
	while (is_rtc_syncbusy())
    5dca:	f7ff ff35 	bl	5c38 <_ZL15is_rtc_syncbusyv>
    5dce:	2800      	cmp	r0, #0
    5dd0:	d1fb      	bne.n	5dca <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x2e>
	RTCenable();
    5dd2:	0028      	movs	r0, r5
    5dd4:	f7ff ffd0 	bl	5d78 <_ZN7RTCZero9RTCenableEv>
}
    5dd8:	bd70      	pop	{r4, r5, r6, pc}
    5dda:	46c0      	nop			; (mov r8, r8)
    5ddc:	40002000 	.word	0x40002000

00005de0 <_ZN7RTCZero8setEpochEm>:
{
    5de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	time_t etime = epoch;
    5de2:	4b0e      	ldr	r3, [pc, #56]	; (5e1c <_ZN7RTCZero8setEpochEm+0x3c>)
{
    5de4:	0004      	movs	r4, r0
	time_t etime = epoch;
    5de6:	4299      	cmp	r1, r3
    5de8:	d200      	bcs.n	5dec <_ZN7RTCZero8setEpochEm+0xc>
    5dea:	0019      	movs	r1, r3
	struct tm* tmp = gmtime(&etime);
    5dec:	a801      	add	r0, sp, #4
	time_t etime = epoch;
    5dee:	9101      	str	r1, [sp, #4]
	struct tm* tmp = gmtime(&etime);
    5df0:	f004 ff0e 	bl	ac10 <gmtime>
	time.day    = tmp->tm_mday;
    5df4:	7b03      	ldrb	r3, [r0, #12]
    5df6:	a902      	add	r1, sp, #8
    5df8:	70cb      	strb	r3, [r1, #3]
	time.month  = tmp->tm_mon + 1;
    5dfa:	6903      	ldr	r3, [r0, #16]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    5dfc:	4a08      	ldr	r2, [pc, #32]	; (5e20 <_ZN7RTCZero8setEpochEm+0x40>)
	time.month  = tmp->tm_mon + 1;
    5dfe:	3301      	adds	r3, #1
    5e00:	710b      	strb	r3, [r1, #4]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    5e02:	6943      	ldr	r3, [r0, #20]
    5e04:	189b      	adds	r3, r3, r2
    5e06:	80cb      	strh	r3, [r1, #6]
	time.hour   = tmp->tm_hour;
    5e08:	7a03      	ldrb	r3, [r0, #8]
    5e0a:	708b      	strb	r3, [r1, #2]
	time.minute = tmp->tm_min;
    5e0c:	7903      	ldrb	r3, [r0, #4]
    5e0e:	704b      	strb	r3, [r1, #1]
	time.second = tmp->tm_sec;
    5e10:	6803      	ldr	r3, [r0, #0]
	rtc_set_time(&time);
    5e12:	0020      	movs	r0, r4
	time.second = tmp->tm_sec;
    5e14:	700b      	strb	r3, [r1, #0]
	rtc_set_time(&time);
    5e16:	f7ff ffc1 	bl	5d9c <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
}
    5e1a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    5e1c:	386d4380 	.word	0x386d4380
    5e20:	0000076c 	.word	0x0000076c

00005e24 <_ZN7RTCZero8RTCresetEv>:

void RTCZero::RTCreset()
{
    5e24:	b510      	push	{r4, lr}
	RTCdisable();
    5e26:	f7ff ff91 	bl	5d4c <_ZN7RTCZero10RTCdisableEv>
	
	while (is_rtc_syncbusy())
    5e2a:	f7ff ff05 	bl	5c38 <_ZL15is_rtc_syncbusyv>
    5e2e:	2800      	cmp	r0, #0
    5e30:	d1fb      	bne.n	5e2a <_ZN7RTCZero8RTCresetEv+0x6>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;			// software reset
    5e32:	2301      	movs	r3, #1
    5e34:	4a04      	ldr	r2, [pc, #16]	; (5e48 <_ZN7RTCZero8RTCresetEv+0x24>)
    5e36:	8811      	ldrh	r1, [r2, #0]
    5e38:	430b      	orrs	r3, r1
    5e3a:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    5e3c:	f7ff fefc 	bl	5c38 <_ZL15is_rtc_syncbusyv>
    5e40:	2800      	cmp	r0, #0
    5e42:	d1fb      	bne.n	5e3c <_ZN7RTCZero8RTCresetEv+0x18>
	{
		// Wait for synchronization
	}
}
    5e44:	bd10      	pop	{r4, pc}
    5e46:	46c0      	nop			; (mov r8, r8)
    5e48:	40002000 	.word	0x40002000

00005e4c <_ZN7RTCZero5beginEv>:
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5e4c:	2380      	movs	r3, #128	; 0x80
{
    5e4e:	b510      	push	{r4, lr}
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5e50:	4a09      	ldr	r2, [pc, #36]	; (5e78 <_ZN7RTCZero5beginEv+0x2c>)
    5e52:	005b      	lsls	r3, r3, #1
    5e54:	6951      	ldr	r1, [r2, #20]
{
    5e56:	0004      	movs	r4, r0
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5e58:	430b      	orrs	r3, r1
    5e5a:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = OSC32KCTRL_RTCCTRL_RTCSEL_XOSC1K;
    5e5c:	2204      	movs	r2, #4
    5e5e:	4b07      	ldr	r3, [pc, #28]	; (5e7c <_ZN7RTCZero5beginEv+0x30>)
    5e60:	611a      	str	r2, [r3, #16]
	RTCreset();
    5e62:	f7ff ffdf 	bl	5e24 <_ZN7RTCZero8RTCresetEv>
	RTC->MODE2.CTRLA.reg = tmp_reg;
    5e66:	4a06      	ldr	r2, [pc, #24]	; (5e80 <_ZN7RTCZero5beginEv+0x34>)
    5e68:	4b06      	ldr	r3, [pc, #24]	; (5e84 <_ZN7RTCZero5beginEv+0x38>)
	RTCenable();
    5e6a:	0020      	movs	r0, r4
	RTC->MODE2.CTRLA.reg = tmp_reg;
    5e6c:	801a      	strh	r2, [r3, #0]
	RTCenable();
    5e6e:	f7ff ff83 	bl	5d78 <_ZN7RTCZero9RTCenableEv>
	_configured = true;
    5e72:	2301      	movs	r3, #1
    5e74:	7023      	strb	r3, [r4, #0]
}
    5e76:	bd10      	pop	{r4, pc}
    5e78:	40000400 	.word	0x40000400
    5e7c:	40001000 	.word	0x40001000
    5e80:	ffff8b08 	.word	0xffff8b08
    5e84:	40002000 	.word	0x40002000

00005e88 <_ZN8SPIFlashC1EhP8SPIClass>:
  cs_mask = digitalPinToBitMask(csPin);
  pinMode(csPin, OUTPUT);
  CHIP_DESELECT
}
#elif defined (ARDUINO_ARCH_SAMD) || defined (ARCH_STM32) || defined(ARDUINO_ARCH_ESP32)
SPIFlash::SPIFlash(uint8_t cs, SPIClass *spiinterface) {
    5e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    // The SAMD51 SERCOM runs at 96MHz when the cpu runs at 120MHz
    #if F_CPU == 120000000
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? 96000000ul / SPI_MIN_CLOCK_DIVIDER : clock);
    #else
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    5e8a:	4b25      	ldr	r3, [pc, #148]	; (5f20 <_ZN8SPIFlashC1EhP8SPIClass+0x98>)
    5e8c:	0016      	movs	r6, r2
  // Object declaration for the GPIO HAL type for csPin - @boseji <salearj@hotmail.com> 02.03.17
  gpio_t      csPin;
  #endif

  // Variables specific to using non-standard SPI (currently only tested with ESP32)
  struct _SPIPins {
    5e8e:	22ff      	movs	r2, #255	; 0xff
    5e90:	6003      	str	r3, [r0, #0]
    #endif

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    5e92:	2300      	movs	r3, #0
    5e94:	000d      	movs	r5, r1
    5e96:	2152      	movs	r1, #82	; 0x52
    5e98:	7442      	strb	r2, [r0, #17]
    5e9a:	7482      	strb	r2, [r0, #18]
    5e9c:	74c2      	strb	r2, [r0, #19]
    5e9e:	7502      	strb	r2, [r0, #20]
    5ea0:	1c42      	adds	r2, r0, #1
    5ea2:	7143      	strb	r3, [r0, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    5ea4:	7103      	strb	r3, [r0, #4]
    5ea6:	7203      	strb	r3, [r0, #8]
    5ea8:	7743      	strb	r3, [r0, #29]
    5eaa:	7783      	strb	r3, [r0, #30]
    5eac:	77c3      	strb	r3, [r0, #31]
    5eae:	77d3      	strb	r3, [r2, #31]
    5eb0:	322a      	adds	r2, #42	; 0x2a
    5eb2:	7011      	strb	r1, [r2, #0]
    5eb4:	3105      	adds	r1, #5
    5eb6:	7051      	strb	r1, [r2, #1]
    5eb8:	2200      	movs	r2, #0
    5eba:	0004      	movs	r4, r0
    5ebc:	4f19      	ldr	r7, [pc, #100]	; (5f24 <_ZN8SPIFlashC1EhP8SPIClass+0x9c>)
    5ebe:	6783      	str	r3, [r0, #120]	; 0x78
    5ec0:	67c3      	str	r3, [r0, #124]	; 0x7c
    5ec2:	6302      	str	r2, [r0, #48]	; 0x30
    5ec4:	0039      	movs	r1, r7
    5ec6:	2212      	movs	r2, #18
    5ec8:	309c      	adds	r0, #156	; 0x9c
    5eca:	f004 ffcd 	bl	ae68 <memcpy>
    5ece:	0020      	movs	r0, r4
    5ed0:	0039      	movs	r1, r7
    5ed2:	2248      	movs	r2, #72	; 0x48
    5ed4:	3114      	adds	r1, #20
    5ed6:	30b0      	adds	r0, #176	; 0xb0
    5ed8:	f004 ffc6 	bl	ae68 <memcpy>
    5edc:	0020      	movs	r0, r4
    5ede:	0039      	movs	r1, r7
    5ee0:	2209      	movs	r2, #9
    5ee2:	315c      	adds	r1, #92	; 0x5c
    5ee4:	30f8      	adds	r0, #248	; 0xf8
    5ee6:	f004 ffbf 	bl	ae68 <memcpy>
    5eea:	0039      	movs	r1, r7
    5eec:	1ca0      	adds	r0, r4, #2
    5eee:	3165      	adds	r1, #101	; 0x65
    5ef0:	30ff      	adds	r0, #255	; 0xff
    5ef2:	2203      	movs	r2, #3
    5ef4:	f004 ffb8 	bl	ae68 <memcpy>
  _spi = spiinterface;  //Sets SPI interface - if no user selection is made, this defaults to SPI
  if (_spi == &SPI) {
    5ef8:	4b0b      	ldr	r3, [pc, #44]	; (5f28 <_ZN8SPIFlashC1EhP8SPIClass+0xa0>)
  _spi = spiinterface;  //Sets SPI interface - if no user selection is made, this defaults to SPI
    5efa:	60e6      	str	r6, [r4, #12]
  if (_spi == &SPI) {
    5efc:	429e      	cmp	r6, r3
    5efe:	d10c      	bne.n	5f1a <_ZN8SPIFlashC1EhP8SPIClass+0x92>
    _SPIInUse = STDSPI;
    5f00:	230a      	movs	r3, #10
  }
  else {
    _SPIInUse = ALTSPI;
  }
  csPin = cs;
  pinMode(csPin, OUTPUT);
    5f02:	0028      	movs	r0, r5
    _SPIInUse = ALTSPI;
    5f04:	7563      	strb	r3, [r4, #21]
  csPin = cs;
    5f06:	7425      	strb	r5, [r4, #16]
  pinMode(csPin, OUTPUT);
    5f08:	2101      	movs	r1, #1
    5f0a:	f7fd fddd 	bl	3ac8 <pinMode>
  CHIP_DESELECT
    5f0e:	7c20      	ldrb	r0, [r4, #16]
    5f10:	2101      	movs	r1, #1
    5f12:	f7fd fddd 	bl	3ad0 <digitalWrite>
}
    5f16:	0020      	movs	r0, r4
    5f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _SPIInUse = ALTSPI;
    5f1a:	230b      	movs	r3, #11
    5f1c:	e7f1      	b.n	5f02 <_ZN8SPIFlashC1EhP8SPIClass+0x7a>
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	003d0900 	.word	0x003d0900
    5f24:	0000f4d8 	.word	0x0000f4d8
    5f28:	20000d54 	.word	0x20000d54

00005f2c <_ZN8SPIFlash5beginEm>:
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//     Public functions used for read, write and erase operations     //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//Identifies chip and establishes parameters
bool SPIFlash::begin(uint32_t flashChipSize) {
    5f2c:	b570      	push	{r4, r5, r6, lr}
#endif
#ifdef HIGHSPEED
  Serial.println(F("Highspeed mode initiated."));
  Serial.println();
#endif
  if (_SPIInUse == ALTSPI) {
    5f2e:	7d43      	ldrb	r3, [r0, #21]
bool SPIFlash::begin(uint32_t flashChipSize) {
    5f30:	0004      	movs	r4, r0
    5f32:	000d      	movs	r5, r1
  if (_SPIInUse == ALTSPI) {
    5f34:	2b0b      	cmp	r3, #11
    5f36:	d002      	beq.n	5f3e <_ZN8SPIFlash5beginEm+0x12>
    #if defined (ARDUINO_ARCH_ESP32)
    SPI.begin(_nonStdSPI.sck, _nonStdSPI.miso, _nonStdSPI.mosi, _nonStdSPI.ss);
    #endif
  }
  else {
    BEGIN_SPI
    5f38:	68c0      	ldr	r0, [r0, #12]
    5f3a:	f000 fcbf 	bl	68bc <_ZN8SPIClass5beginEv>
  }

#ifdef SPI_HAS_TRANSACTION
  //Define the settings to be used by the SPI bus
  if (!_SPISettingsSet) {
    5f3e:	7a23      	ldrb	r3, [r4, #8]
    5f40:	2b00      	cmp	r3, #0
    5f42:	d107      	bne.n	5f54 <_ZN8SPIFlash5beginEm+0x28>
    _settings = SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
    5f44:	221b      	movs	r2, #27
    5f46:	7062      	strb	r2, [r4, #1]
    5f48:	3a64      	subs	r2, #100	; 0x64
    5f4a:	7023      	strb	r3, [r4, #0]
    5f4c:	70a2      	strb	r2, [r4, #2]
    5f4e:	70e3      	strb	r3, [r4, #3]
    5f50:	7123      	strb	r3, [r4, #4]
    5f52:	7163      	strb	r3, [r4, #5]
#else
  if (!_clockdiv) {
    _clockdiv = SPI_CLOCK_DIV2;
  }
#endif
  bool retVal = _chipID(flashChipSize);
    5f54:	0029      	movs	r1, r5
    5f56:	0020      	movs	r0, r4
    5f58:	f000 fbe4 	bl	6724 <_ZN8SPIFlash7_chipIDEm>
    5f5c:	0005      	movs	r5, r0
  _endSPI();
    5f5e:	0020      	movs	r0, r4
    5f60:	f000 faa0 	bl	64a4 <_ZN8SPIFlash7_endSPIEv>
  chipPoweredDown = false;
    5f64:	2300      	movs	r3, #0
  _disableGlobalBlockProtect();
    5f66:	0020      	movs	r0, r4
  chipPoweredDown = false;
    5f68:	77a3      	strb	r3, [r4, #30]
  _disableGlobalBlockProtect();
    5f6a:	f000 fb95 	bl	6698 <_ZN8SPIFlash26_disableGlobalBlockProtectEv>
  return retVal;
}
    5f6e:	0028      	movs	r0, r5
    5f70:	bd70      	pop	{r4, r5, r6, pc}
	...

00005f74 <_ZN8SPIFlash5errorEb>:
void SPIFlash::setClock(uint8_t clockdiv) {
  _clockdiv = clockdiv;
}
#endif

uint8_t SPIFlash::error(bool _verbosity) {
    5f74:	b510      	push	{r4, lr}
    5f76:	4c05      	ldr	r4, [pc, #20]	; (5f8c <_ZN8SPIFlash5errorEb+0x18>)
  if (!_verbosity) {
    5f78:	2900      	cmp	r1, #0
    5f7a:	d101      	bne.n	5f80 <_ZN8SPIFlash5errorEb+0xc>
    return diagnostics.errorcode;
  }
  else {
    _troubleshoot(diagnostics.errorcode, PRINTOVERRIDE);
    return diagnostics.errorcode;
    5f7c:	7820      	ldrb	r0, [r4, #0]
  }
}
    5f7e:	bd10      	pop	{r4, pc}
    _troubleshoot(diagnostics.errorcode, PRINTOVERRIDE);
    5f80:	7821      	ldrb	r1, [r4, #0]
    5f82:	2201      	movs	r2, #1
    5f84:	f000 fc6e 	bl	6864 <_ZN8SPIFlash13_troubleshootEhb>
    5f88:	e7f8      	b.n	5f7c <_ZN8SPIFlash5errorEb+0x8>
    5f8a:	46c0      	nop			; (mov r8, r8)
    5f8c:	20000ed0 	.word	0x20000ed0

00005f90 <_ZN8SPIFlash13readByteArrayEmPhjb>:
//    1. _addr --> Any address from 0 to capacity
//    2. data_buffer --> The array of bytes to be read from the flash memory - starting at the address indicated
//    3. bufferSize --> The size of the buffer - in number of bytes.
//    4. fastRead --> defaults to false - executes _beginFastRead() if set to true

bool  SPIFlash::readByteArray(uint32_t _addr, uint8_t *data_buffer, size_t bufferSize, bool fastRead) {
    5f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f92:	001e      	movs	r6, r3
    5f94:	ab08      	add	r3, sp, #32
    5f96:	781b      	ldrb	r3, [r3, #0]
    5f98:	0017      	movs	r7, r2
    5f9a:	9301      	str	r3, [sp, #4]
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros();
  #endif
  if (!_prep(READDATA, _addr, bufferSize)) {
    5f9c:	000a      	movs	r2, r1
    5f9e:	0033      	movs	r3, r6
    5fa0:	2103      	movs	r1, #3
bool  SPIFlash::readByteArray(uint32_t _addr, uint8_t *data_buffer, size_t bufferSize, bool fastRead) {
    5fa2:	0004      	movs	r4, r0
  if (!_prep(READDATA, _addr, bufferSize)) {
    5fa4:	f000 fae2 	bl	656c <_ZN8SPIFlash5_prepEhmm>
    5fa8:	1e05      	subs	r5, r0, #0
    5faa:	d010      	beq.n	5fce <_ZN8SPIFlash13readByteArrayEmPhjb+0x3e>
    return false;
  }
  if(fastRead) {
    5fac:	9b01      	ldr	r3, [sp, #4]
    _beginSPI(FASTREAD);
    5fae:	210b      	movs	r1, #11
  if(fastRead) {
    5fb0:	2b00      	cmp	r3, #0
    5fb2:	d100      	bne.n	5fb6 <_ZN8SPIFlash13readByteArrayEmPhjb+0x26>
  }
  else {
    _beginSPI(READDATA);
    5fb4:	2103      	movs	r1, #3
    5fb6:	0020      	movs	r0, r4
    5fb8:	f000 f9aa 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
  }
  _nextBuf(READDATA, &(*data_buffer), bufferSize);
    5fbc:	0020      	movs	r0, r4
    5fbe:	0033      	movs	r3, r6
    5fc0:	003a      	movs	r2, r7
    5fc2:	2103      	movs	r1, #3
    5fc4:	f000 f9fe 	bl	63c4 <_ZN8SPIFlash8_nextBufEhPhm>
  _endSPI();
    5fc8:	0020      	movs	r0, r4
    5fca:	f000 fa6b 	bl	64a4 <_ZN8SPIFlash7_endSPIEv>
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
	return true;
}
    5fce:	0028      	movs	r0, r5
    5fd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00005fd4 <_ZN8SPIFlash8writeStrEmR6Stringb>:
//    1. _addr --> Any address - from 0 to capacity
//    2. data --> One String to be written to a particular location on a page
//    3. errorCheck --> Turned on by default. Checks for writing errors
// WARNING: You can only write to previously erased memory locations (see datasheet).
// Use the eraseSector()/eraseBlock32K/eraseBlock64K commands to first clear memory (write 0xFFs)
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    5fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fd6:	b089      	sub	sp, #36	; 0x24
    5fd8:	6896      	ldr	r6, [r2, #8]
    5fda:	0004      	movs	r4, r0
    5fdc:	0010      	movs	r0, r2
  _spifuncruntime = micros();
  #endif

  uint32_t _sz = (sizeof(char)*(data.length()+1));

  char _outCharArray[_sz];
    5fde:	466a      	mov	r2, sp
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    5fe0:	af00      	add	r7, sp, #0
    5fe2:	607b      	str	r3, [r7, #4]
  uint32_t _sz = (sizeof(char)*(data.length()+1));
    5fe4:	1c73      	adds	r3, r6, #1
    5fe6:	61fb      	str	r3, [r7, #28]
  char _outCharArray[_sz];
    5fe8:	3307      	adds	r3, #7
    5fea:	08db      	lsrs	r3, r3, #3
    5fec:	00db      	lsls	r3, r3, #3
    5fee:	1ad3      	subs	r3, r2, r3
    5ff0:	469d      	mov	sp, r3
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    5ff2:	6179      	str	r1, [r7, #20]
  char _outCharArray[_sz];
    5ff4:	60fb      	str	r3, [r7, #12]
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    5ff6:	1c72      	adds	r2, r6, #1
    5ff8:	2300      	movs	r3, #0
    5ffa:	4669      	mov	r1, sp
    5ffc:	f7ff fb81 	bl	5702 <_ZNK6String8getBytesEPhjj>
  data.toCharArray(_outCharArray, _sz);

  if(_isChipPoweredDown() || !_addressCheck(_addr, sizeof(_sz)) || !_notPrevWritten(_addr, sizeof(_sz)+_sz) || !_notBusy() || !_writeEnable()) {
    6000:	0020      	movs	r0, r4
    6002:	f000 fa61 	bl	64c8 <_ZN8SPIFlash18_isChipPoweredDownEv>
    6006:	1e05      	subs	r5, r0, #0
    6008:	d002      	beq.n	6010 <_ZN8SPIFlash8writeStrEmR6Stringb+0x3c>
    return false;
    600a:	2300      	movs	r3, #0
    600c:	61bb      	str	r3, [r7, #24]
    600e:	e074      	b.n	60fa <_ZN8SPIFlash8writeStrEmR6Stringb+0x126>
  if(_isChipPoweredDown() || !_addressCheck(_addr, sizeof(_sz)) || !_notPrevWritten(_addr, sizeof(_sz)+_sz) || !_notBusy() || !_writeEnable()) {
    6010:	2204      	movs	r2, #4
    6012:	6979      	ldr	r1, [r7, #20]
    6014:	0020      	movs	r0, r4
    6016:	f000 f92f 	bl	6278 <_ZN8SPIFlash13_addressCheckEmm>
    601a:	2800      	cmp	r0, #0
    601c:	d0f5      	beq.n	600a <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    601e:	1d72      	adds	r2, r6, #5
    6020:	6979      	ldr	r1, [r7, #20]
    6022:	0020      	movs	r0, r4
    6024:	f000 f9a4 	bl	6370 <_ZN8SPIFlash15_notPrevWrittenEmm>
    6028:	2800      	cmp	r0, #0
    602a:	d0ee      	beq.n	600a <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    602c:	497c      	ldr	r1, [pc, #496]	; (6220 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    602e:	0020      	movs	r0, r4
    6030:	f000 fa58 	bl	64e4 <_ZN8SPIFlash8_notBusyEm>
    6034:	2800      	cmp	r0, #0
    6036:	d0e8      	beq.n	600a <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    6038:	2101      	movs	r1, #1
    603a:	0020      	movs	r0, r4
    603c:	f000 fa78 	bl	6530 <_ZN8SPIFlash12_writeEnableEb>
    6040:	2800      	cmp	r0, #0
    6042:	d0e2      	beq.n	600a <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
  }

  _beginSPI(PAGEPROG);
    6044:	2102      	movs	r1, #2
    6046:	0020      	movs	r0, r4
    6048:	f000 f962 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
  for (uint8_t i = 0; i < sizeof(_sz); i++) {
    _nextByte(WRITE, _sz >> (8*i));
    604c:	69fa      	ldr	r2, [r7, #28]
    604e:	0026      	movs	r6, r4
    6050:	40ea      	lsrs	r2, r5
    6052:	362c      	adds	r6, #44	; 0x2c
    6054:	b2d2      	uxtb	r2, r2
    6056:	7831      	ldrb	r1, [r6, #0]
    6058:	0020      	movs	r0, r4
    605a:	3508      	adds	r5, #8
    605c:	f000 f9ac 	bl	63b8 <_ZN8SPIFlash9_nextByteEch>
  for (uint8_t i = 0; i < sizeof(_sz); i++) {
    6060:	2d20      	cmp	r5, #32
    6062:	d1f3      	bne.n	604c <_ZN8SPIFlash8writeStrEmR6Stringb+0x78>
  }
  CHIP_DESELECT
    6064:	2101      	movs	r1, #1
    6066:	7c20      	ldrb	r0, [r4, #16]
    6068:	f7fd fd32 	bl	3ad0 <digitalWrite>
  _endSPI();
    606c:	0020      	movs	r0, r4
    606e:	f000 fa19 	bl	64a4 <_ZN8SPIFlash7_endSPIEv>

  if(!_addressCheck(_addr+sizeof(_sz), _sz) || !_notBusy() || !_writeEnable()) {
    6072:	697b      	ldr	r3, [r7, #20]
    6074:	69fa      	ldr	r2, [r7, #28]
    6076:	3304      	adds	r3, #4
    6078:	0019      	movs	r1, r3
    607a:	0020      	movs	r0, r4
    607c:	60bb      	str	r3, [r7, #8]
    607e:	f000 f8fb 	bl	6278 <_ZN8SPIFlash13_addressCheckEmm>
    6082:	2800      	cmp	r0, #0
    6084:	d0c1      	beq.n	600a <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    6086:	4966      	ldr	r1, [pc, #408]	; (6220 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    6088:	0020      	movs	r0, r4
    608a:	f000 fa2b 	bl	64e4 <_ZN8SPIFlash8_notBusyEm>
    608e:	2800      	cmp	r0, #0
    6090:	d0bb      	beq.n	600a <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    6092:	2101      	movs	r1, #1
    6094:	0020      	movs	r0, r4
    6096:	f000 fa4b 	bl	6530 <_ZN8SPIFlash12_writeEnableEb>
    609a:	61b8      	str	r0, [r7, #24]
    609c:	2800      	cmp	r0, #0
    609e:	d0b4      	beq.n	600a <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    return false;
  }
  uint16_t maxBytes = SPI_PAGESIZE-(_addr % SPI_PAGESIZE);  // Force the first set of bytes to stay within the first page
    60a0:	2580      	movs	r5, #128	; 0x80
    60a2:	7d3b      	ldrb	r3, [r7, #20]
    60a4:	006d      	lsls	r5, r5, #1
    60a6:	1aed      	subs	r5, r5, r3

  if (_sz <= maxBytes) {
    60a8:	69fb      	ldr	r3, [r7, #28]
  uint16_t maxBytes = SPI_PAGESIZE-(_addr % SPI_PAGESIZE);  // Force the first set of bytes to stay within the first page
    60aa:	b2ad      	uxth	r5, r5
  if (_sz <= maxBytes) {
    60ac:	42ab      	cmp	r3, r5
    60ae:	d828      	bhi.n	6102 <_ZN8SPIFlash8writeStrEmR6Stringb+0x12e>
    CHIP_SELECT
    60b0:	7c20      	ldrb	r0, [r4, #16]
    60b2:	2100      	movs	r1, #0
    60b4:	f7fd fd0c 	bl	3ad0 <digitalWrite>
    _nextByte(WRITE, PAGEPROG);
    60b8:	7831      	ldrb	r1, [r6, #0]
    60ba:	2202      	movs	r2, #2
    60bc:	0020      	movs	r0, r4
    60be:	f000 f97b 	bl	63b8 <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    60c2:	0020      	movs	r0, r4
    60c4:	f000 f8fc 	bl	62c0 <_ZN8SPIFlash16_transferAddressEv>
    //_nextBuf(PAGEPROG, &_outCharArray[0], _sz);
    for (uint16_t i = 0; i < _sz; ++i) {
    60c8:	2500      	movs	r5, #0
    60ca:	69fb      	ldr	r3, [r7, #28]
    60cc:	42ab      	cmp	r3, r5
    60ce:	d90a      	bls.n	60e6 <_ZN8SPIFlash8writeStrEmR6Stringb+0x112>
      _nextByte(WRITE, _outCharArray[i]);
    60d0:	68fb      	ldr	r3, [r7, #12]
    60d2:	0020      	movs	r0, r4
    60d4:	5d5a      	ldrb	r2, [r3, r5]
    60d6:	0023      	movs	r3, r4
    60d8:	332c      	adds	r3, #44	; 0x2c
    60da:	7819      	ldrb	r1, [r3, #0]
    for (uint16_t i = 0; i < _sz; ++i) {
    60dc:	3501      	adds	r5, #1
      _nextByte(WRITE, _outCharArray[i]);
    60de:	f000 f96b 	bl	63b8 <_ZN8SPIFlash9_nextByteEch>
    for (uint16_t i = 0; i < _sz; ++i) {
    60e2:	b2ad      	uxth	r5, r5
    60e4:	e7f1      	b.n	60ca <_ZN8SPIFlash8writeStrEmR6Stringb+0xf6>
    }
    CHIP_DESELECT
    60e6:	7c20      	ldrb	r0, [r4, #16]
    60e8:	2101      	movs	r1, #1
    60ea:	f7fd fcf1 	bl	3ad0 <digitalWrite>
      }

    } while (length > 0);
  }

  if (!errorCheck) {
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	2b00      	cmp	r3, #0
    60f2:	d14f      	bne.n	6194 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1c0>
    _endSPI();
    60f4:	0020      	movs	r0, r4
    60f6:	f000 f9d5 	bl	64a4 <_ZN8SPIFlash7_endSPIEv>
    #ifdef RUNDIAGNOSTIC
      _spifuncruntime = micros() - _spifuncruntime;
    #endif
  }
  return true;
}
    60fa:	46bd      	mov	sp, r7
    60fc:	69b8      	ldr	r0, [r7, #24]
    60fe:	b009      	add	sp, #36	; 0x24
    6100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t length = _sz;
    6102:	8bbb      	ldrh	r3, [r7, #28]
    6104:	617b      	str	r3, [r7, #20]
    uint16_t data_offset = 0;
    6106:	2300      	movs	r3, #0
    6108:	613b      	str	r3, [r7, #16]
      writeBufSz = (length<=maxBytes) ? length : maxBytes;
    610a:	697b      	ldr	r3, [r7, #20]
    610c:	42ab      	cmp	r3, r5
    610e:	dc00      	bgt.n	6112 <_ZN8SPIFlash8writeStrEmR6Stringb+0x13e>
    6110:	001d      	movs	r5, r3
      CHIP_SELECT
    6112:	7c20      	ldrb	r0, [r4, #16]
    6114:	2100      	movs	r1, #0
    6116:	f7fd fcdb 	bl	3ad0 <digitalWrite>
      _nextByte(WRITE, PAGEPROG);
    611a:	0023      	movs	r3, r4
    611c:	332c      	adds	r3, #44	; 0x2c
    611e:	7819      	ldrb	r1, [r3, #0]
    6120:	2202      	movs	r2, #2
    6122:	0020      	movs	r0, r4
    6124:	f000 f948 	bl	63b8 <_ZN8SPIFlash9_nextByteEch>
      _transferAddress();
    6128:	0020      	movs	r0, r4
    612a:	f000 f8c9 	bl	62c0 <_ZN8SPIFlash16_transferAddressEv>
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    612e:	2600      	movs	r6, #0
    6130:	42ae      	cmp	r6, r5
    6132:	da0c      	bge.n	614e <_ZN8SPIFlash8writeStrEmR6Stringb+0x17a>
        _nextByte(WRITE, _outCharArray[data_offset + i]);
    6134:	693a      	ldr	r2, [r7, #16]
    6136:	68fb      	ldr	r3, [r7, #12]
    6138:	0020      	movs	r0, r4
    613a:	189b      	adds	r3, r3, r2
    613c:	5d9a      	ldrb	r2, [r3, r6]
    613e:	0023      	movs	r3, r4
    6140:	332c      	adds	r3, #44	; 0x2c
    6142:	7819      	ldrb	r1, [r3, #0]
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    6144:	3601      	adds	r6, #1
        _nextByte(WRITE, _outCharArray[data_offset + i]);
    6146:	f000 f937 	bl	63b8 <_ZN8SPIFlash9_nextByteEch>
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    614a:	b2b6      	uxth	r6, r6
    614c:	e7f0      	b.n	6130 <_ZN8SPIFlash8writeStrEmR6Stringb+0x15c>
      CHIP_DESELECT
    614e:	7c20      	ldrb	r0, [r4, #16]
    6150:	2101      	movs	r1, #1
    6152:	f7fd fcbd 	bl	3ad0 <digitalWrite>
      _currentAddress += writeBufSz;
    6156:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      if(!_notBusy() || !_writeEnable()){
    6158:	4931      	ldr	r1, [pc, #196]	; (6220 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
      _currentAddress += writeBufSz;
    615a:	195b      	adds	r3, r3, r5
    615c:	67a3      	str	r3, [r4, #120]	; 0x78
      data_offset += writeBufSz;
    615e:	693b      	ldr	r3, [r7, #16]
      if(!_notBusy() || !_writeEnable()){
    6160:	0020      	movs	r0, r4
      data_offset += writeBufSz;
    6162:	195b      	adds	r3, r3, r5
    6164:	b29b      	uxth	r3, r3
    6166:	613b      	str	r3, [r7, #16]
      length -= writeBufSz;
    6168:	697b      	ldr	r3, [r7, #20]
    616a:	1b5d      	subs	r5, r3, r5
    616c:	b2ab      	uxth	r3, r5
    616e:	617b      	str	r3, [r7, #20]
      if(!_notBusy() || !_writeEnable()){
    6170:	f000 f9b8 	bl	64e4 <_ZN8SPIFlash8_notBusyEm>
    6174:	2800      	cmp	r0, #0
    6176:	d100      	bne.n	617a <_ZN8SPIFlash8writeStrEmR6Stringb+0x1a6>
    6178:	e747      	b.n	600a <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    617a:	2101      	movs	r1, #1
    617c:	0020      	movs	r0, r4
    617e:	f000 f9d7 	bl	6530 <_ZN8SPIFlash12_writeEnableEb>
    6182:	2800      	cmp	r0, #0
    6184:	d100      	bne.n	6188 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1b4>
    6186:	e740      	b.n	600a <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
      maxBytes = 256;   // Now we can do up to 256 bytes per loop
    6188:	2580      	movs	r5, #128	; 0x80
    } while (length > 0);
    618a:	697b      	ldr	r3, [r7, #20]
      maxBytes = 256;   // Now we can do up to 256 bytes per loop
    618c:	006d      	lsls	r5, r5, #1
    } while (length > 0);
    618e:	2b00      	cmp	r3, #0
    6190:	d1bb      	bne.n	610a <_ZN8SPIFlash8writeStrEmR6Stringb+0x136>
    6192:	e7ac      	b.n	60ee <_ZN8SPIFlash8writeStrEmR6Stringb+0x11a>
    }
    6194:	466b      	mov	r3, sp
    if (!_notBusy()) {
    6196:	4922      	ldr	r1, [pc, #136]	; (6220 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    6198:	0020      	movs	r0, r4
    }
    619a:	617b      	str	r3, [r7, #20]
    if (!_notBusy()) {
    619c:	f000 f9a2 	bl	64e4 <_ZN8SPIFlash8_notBusyEm>
    61a0:	61b8      	str	r0, [r7, #24]
    61a2:	2800      	cmp	r0, #0
    61a4:	d038      	beq.n	6218 <_ZN8SPIFlash8writeStrEmR6Stringb+0x244>
    char _inCharArray[_sz];
    61a6:	466a      	mov	r2, sp
    _currentAddress = (_addr + sizeof(_sz));
    61a8:	68bb      	ldr	r3, [r7, #8]
    CHIP_SELECT
    61aa:	7c20      	ldrb	r0, [r4, #16]
    _currentAddress = (_addr + sizeof(_sz));
    61ac:	67a3      	str	r3, [r4, #120]	; 0x78
    char _inCharArray[_sz];
    61ae:	69fb      	ldr	r3, [r7, #28]
    CHIP_SELECT
    61b0:	2100      	movs	r1, #0
    char _inCharArray[_sz];
    61b2:	3307      	adds	r3, #7
    61b4:	08db      	lsrs	r3, r3, #3
    61b6:	00db      	lsls	r3, r3, #3
    61b8:	1ad3      	subs	r3, r2, r3
    61ba:	469d      	mov	sp, r3
    CHIP_SELECT
    61bc:	f7fd fc88 	bl	3ad0 <digitalWrite>
    _nextByte(WRITE, READDATA);
    61c0:	0023      	movs	r3, r4
    61c2:	332c      	adds	r3, #44	; 0x2c
    61c4:	7819      	ldrb	r1, [r3, #0]
    61c6:	2203      	movs	r2, #3
    61c8:	0020      	movs	r0, r4
    61ca:	f000 f8f5 	bl	63b8 <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    61ce:	0020      	movs	r0, r4
    char _inCharArray[_sz];
    61d0:	466e      	mov	r6, sp
    _transferAddress();
    61d2:	f000 f875 	bl	62c0 <_ZN8SPIFlash16_transferAddressEv>
    for (uint8_t i = 0; i < _sz; i++) {
    61d6:	2500      	movs	r5, #0
    61d8:	69fb      	ldr	r3, [r7, #28]
    61da:	42ab      	cmp	r3, r5
    61dc:	d90a      	bls.n	61f4 <_ZN8SPIFlash8writeStrEmR6Stringb+0x220>
      _inCharArray[i] = _nextByte(READ);
    61de:	0023      	movs	r3, r4
    61e0:	332b      	adds	r3, #43	; 0x2b
    61e2:	7819      	ldrb	r1, [r3, #0]
    61e4:	2200      	movs	r2, #0
    61e6:	0020      	movs	r0, r4
    61e8:	f000 f8e6 	bl	63b8 <_ZN8SPIFlash9_nextByteEch>
    61ec:	5570      	strb	r0, [r6, r5]
    for (uint8_t i = 0; i < _sz; i++) {
    61ee:	3501      	adds	r5, #1
    61f0:	b2ed      	uxtb	r5, r5
    61f2:	e7f1      	b.n	61d8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x204>
    _endSPI();
    61f4:	0020      	movs	r0, r4
    61f6:	f000 f955 	bl	64a4 <_ZN8SPIFlash7_endSPIEv>
    for (uint8_t i = 0; i < _sz; i++) {
    61fa:	2300      	movs	r3, #0
    61fc:	69fa      	ldr	r2, [r7, #28]
    61fe:	429a      	cmp	r2, r3
    6200:	d907      	bls.n	6212 <_ZN8SPIFlash8writeStrEmR6Stringb+0x23e>
      if (_inCharArray[i] != _outCharArray[i]) {
    6202:	68fa      	ldr	r2, [r7, #12]
    6204:	5cf1      	ldrb	r1, [r6, r3]
    6206:	5cd2      	ldrb	r2, [r2, r3]
    6208:	4291      	cmp	r1, r2
    620a:	d105      	bne.n	6218 <_ZN8SPIFlash8writeStrEmR6Stringb+0x244>
    for (uint8_t i = 0; i < _sz; i++) {
    620c:	3301      	adds	r3, #1
    620e:	b2db      	uxtb	r3, r3
    6210:	e7f4      	b.n	61fc <_ZN8SPIFlash8writeStrEmR6Stringb+0x228>
    6212:	697b      	ldr	r3, [r7, #20]
    6214:	469d      	mov	sp, r3
  return true;
    6216:	e770      	b.n	60fa <_ZN8SPIFlash8writeStrEmR6Stringb+0x126>
    6218:	697b      	ldr	r3, [r7, #20]
    621a:	469d      	mov	sp, r3
    621c:	e6f5      	b.n	600a <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    621e:	46c0      	nop			; (mov r8, r8)
    6220:	3b9aca00 	.word	0x3b9aca00

00006224 <_ZN8SPIFlash13eraseBlock64KEm>:
}

// Erases one 64k block.
//  Takes an address as the argument and erases the block containing the address.
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
  if (!kb64Erase.supported) {
    6224:	0003      	movs	r3, r0
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
    6226:	b570      	push	{r4, r5, r6, lr}
  if (!kb64Erase.supported) {
    6228:	3354      	adds	r3, #84	; 0x54
    622a:	781d      	ldrb	r5, [r3, #0]
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
    622c:	0004      	movs	r4, r0
    622e:	000a      	movs	r2, r1
  if (!kb64Erase.supported) {
    6230:	2d00      	cmp	r5, #0
    6232:	d105      	bne.n	6240 <_ZN8SPIFlash13eraseBlock64KEm+0x1c>
    _troubleshoot(UNSUPPORTEDFUNC);
    6234:	002a      	movs	r2, r5
    6236:	210c      	movs	r1, #12
    6238:	f000 fb14 	bl	6864 <_ZN8SPIFlash13_troubleshootEhb>
  }
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
	return true;
}
    623c:	0028      	movs	r0, r5
    623e:	bd70      	pop	{r4, r5, r6, pc}
  if (!_prep(ERASEFUNC, _addr, KB(64))) {
    6240:	2380      	movs	r3, #128	; 0x80
    6242:	21ef      	movs	r1, #239	; 0xef
    6244:	025b      	lsls	r3, r3, #9
    6246:	f000 f991 	bl	656c <_ZN8SPIFlash5_prepEhmm>
    624a:	1e05      	subs	r5, r0, #0
    624c:	d0f6      	beq.n	623c <_ZN8SPIFlash13eraseBlock64KEm+0x18>
  _beginSPI(kb64Erase.opcode);
    624e:	0023      	movs	r3, r4
    6250:	3355      	adds	r3, #85	; 0x55
    6252:	7819      	ldrb	r1, [r3, #0]
    6254:	0020      	movs	r0, r4
    6256:	f000 f85b 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
  _endSPI();
    625a:	0020      	movs	r0, r4
    625c:	f000 f922 	bl	64a4 <_ZN8SPIFlash7_endSPIEv>
  if(!_notBusy(kb64Erase.time)) {
    6260:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6262:	0020      	movs	r0, r4
    6264:	f000 f93e 	bl	64e4 <_ZN8SPIFlash8_notBusyEm>
    6268:	0005      	movs	r5, r0
    626a:	e7e7      	b.n	623c <_ZN8SPIFlash13eraseBlock64KEm+0x18>

0000626c <_ZN8SPIFlash9_nextByteEch.constprop.8>:
   return true;
 }
 //SPI data lines are left open until _endSPI() is called

 //Reads/Writes next byte. Call 'n' times to read/write 'n' number of bytes. Should be called after _beginSPI()
 uint8_t SPIFlash::_nextByte(char IOType, uint8_t data) {
    626c:	b510      	push	{r4, lr}
     } rxData, txData;
     txData.val = data;
     spi_transfer(txData.dataBuf, rxData.dataBuf, 1);
     return rxData.val;
   #else
     return xfer(data);
    626e:	68c0      	ldr	r0, [r0, #12]
    6270:	f000 fb6c 	bl	694c <_ZN8SPIClass8transferEh>
   #endif
 #else
   return xfer(data);
 #endif
 }
    6274:	bd10      	pop	{r4, pc}
	...

00006278 <_ZN8SPIFlash13_addressCheckEmm>:
 bool SPIFlash::_addressCheck(uint32_t _addr, uint32_t size) {
    6278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    627a:	000f      	movs	r7, r1
   uint8_t _errorcode = error();
    627c:	2100      	movs	r1, #0
 bool SPIFlash::_addressCheck(uint32_t _addr, uint32_t size) {
    627e:	0005      	movs	r5, r0
    6280:	0016      	movs	r6, r2
   uint8_t _errorcode = error();
    6282:	f7ff fe77 	bl	5f74 <_ZN8SPIFlash5errorEb>
   if (_errorcode == UNKNOWNCAP || _errorcode == NORESPONSE) {
    6286:	23f7      	movs	r3, #247	; 0xf7
    6288:	4003      	ands	r3, r0
     return false;
    628a:	2000      	movs	r0, #0
   if (_errorcode == UNKNOWNCAP || _errorcode == NORESPONSE) {
    628c:	2b03      	cmp	r3, #3
    628e:	d008      	beq.n	62a2 <_ZN8SPIFlash13_addressCheckEmm+0x2a>
 	if (!_chip.capacity) {
    6290:	6bec      	ldr	r4, [r5, #60]	; 0x3c
    6292:	4284      	cmp	r4, r0
    6294:	d106      	bne.n	62a4 <_ZN8SPIFlash13_addressCheckEmm+0x2c>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    6296:	4809      	ldr	r0, [pc, #36]	; (62bc <_ZN8SPIFlash13_addressCheckEmm+0x44>)
    6298:	0022      	movs	r2, r4
    629a:	2101      	movs	r1, #1
    629c:	f001 f92a 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
    62a0:	0020      	movs	r0, r4
 }
    62a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   if (_submittedAddress + size >= _chip.capacity) {
    62a4:	19be      	adds	r6, r7, r6
    62a6:	42b4      	cmp	r4, r6
    62a8:	d804      	bhi.n	62b4 <_ZN8SPIFlash13_addressCheckEmm+0x3c>
     _addressOverflow = ((_submittedAddress + size) - _chip.capacity);
    62aa:	1b36      	subs	r6, r6, r4
    62ac:	67ee      	str	r6, [r5, #124]	; 0x7c
     _currentAddress = _addr;
    62ae:	67af      	str	r7, [r5, #120]	; 0x78
     return true;				// Not at end of memory if (address < _chip.capacity)
    62b0:	2001      	movs	r0, #1
    62b2:	e7f6      	b.n	62a2 <_ZN8SPIFlash13_addressCheckEmm+0x2a>
     _addressOverflow = false;
    62b4:	2300      	movs	r3, #0
    62b6:	67eb      	str	r3, [r5, #124]	; 0x7c
    62b8:	e7f9      	b.n	62ae <_ZN8SPIFlash13_addressCheckEmm+0x36>
    62ba:	46c0      	nop			; (mov r8, r8)
    62bc:	20000ed0 	.word	0x20000ed0

000062c0 <_ZN8SPIFlash16_transferAddressEv>:
 bool SPIFlash::_transferAddress(void) {
    62c0:	b510      	push	{r4, lr}
   if (address4ByteEnabled) {
    62c2:	7fc3      	ldrb	r3, [r0, #31]
 bool SPIFlash::_transferAddress(void) {
    62c4:	0004      	movs	r4, r0
   if (address4ByteEnabled) {
    62c6:	2b00      	cmp	r3, #0
    62c8:	d004      	beq.n	62d4 <_ZN8SPIFlash16_transferAddressEv+0x14>
     _nextByte(WRITE, Highest(_currentAddress));
    62ca:	0003      	movs	r3, r0
    62cc:	337b      	adds	r3, #123	; 0x7b
    62ce:	7819      	ldrb	r1, [r3, #0]
    62d0:	f7ff ffcc 	bl	626c <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Higher(_currentAddress));
    62d4:	0023      	movs	r3, r4
    62d6:	337a      	adds	r3, #122	; 0x7a
    62d8:	7819      	ldrb	r1, [r3, #0]
    62da:	0020      	movs	r0, r4
    62dc:	f7ff ffc6 	bl	626c <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Hi(_currentAddress));
    62e0:	0023      	movs	r3, r4
    62e2:	3379      	adds	r3, #121	; 0x79
    62e4:	7819      	ldrb	r1, [r3, #0]
    62e6:	0020      	movs	r0, r4
    62e8:	f7ff ffc0 	bl	626c <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Lo(_currentAddress));
    62ec:	0023      	movs	r3, r4
    62ee:	3378      	adds	r3, #120	; 0x78
    62f0:	7819      	ldrb	r1, [r3, #0]
    62f2:	0020      	movs	r0, r4
    62f4:	f7ff ffba 	bl	626c <_ZN8SPIFlash9_nextByteEch.constprop.8>
 }
    62f8:	2001      	movs	r0, #1
    62fa:	bd10      	pop	{r4, pc}

000062fc <_ZN8SPIFlash12_startSPIBusEv>:
 bool SPIFlash::_startSPIBus(void) {
    62fc:	b510      	push	{r4, lr}
       _spi->beginTransaction(_settings);
    62fe:	6801      	ldr	r1, [r0, #0]
 bool SPIFlash::_startSPIBus(void) {
    6300:	0004      	movs	r4, r0
       _spi->beginTransaction(_settings);
    6302:	6842      	ldr	r2, [r0, #4]
    6304:	68c0      	ldr	r0, [r0, #12]
    6306:	f000 faf1 	bl	68ec <_ZN8SPIClass16beginTransactionE11SPISettings>
   SPIBusState = true;
    630a:	2001      	movs	r0, #1
    630c:	7760      	strb	r0, [r4, #29]
 }
    630e:	bd10      	pop	{r4, pc}

00006310 <_ZN8SPIFlash9_beginSPIEh>:
 bool SPIFlash::_beginSPI(uint8_t opcode) {
    6310:	b570      	push	{r4, r5, r6, lr}
   if (!SPIBusState) {
    6312:	7f43      	ldrb	r3, [r0, #29]
 bool SPIFlash::_beginSPI(uint8_t opcode) {
    6314:	0004      	movs	r4, r0
    6316:	000d      	movs	r5, r1
   if (!SPIBusState) {
    6318:	2b00      	cmp	r3, #0
    631a:	d101      	bne.n	6320 <_ZN8SPIFlash9_beginSPIEh+0x10>
     _startSPIBus();
    631c:	f7ff ffee 	bl	62fc <_ZN8SPIFlash12_startSPIBusEv>
   CHIP_SELECT
    6320:	7c20      	ldrb	r0, [r4, #16]
    6322:	2100      	movs	r1, #0
    6324:	f7fd fbd4 	bl	3ad0 <digitalWrite>
   switch (opcode) {
    6328:	2d0b      	cmp	r5, #11
    632a:	d015      	beq.n	6358 <_ZN8SPIFlash9_beginSPIEh+0x48>
    632c:	d805      	bhi.n	633a <_ZN8SPIFlash9_beginSPIEh+0x2a>
    632e:	2d02      	cmp	r5, #2
    6330:	d009      	beq.n	6346 <_ZN8SPIFlash9_beginSPIEh+0x36>
    6332:	2d03      	cmp	r5, #3
    6334:	d007      	beq.n	6346 <_ZN8SPIFlash9_beginSPIEh+0x36>
     _nextByte(WRITE, opcode);
    6336:	0029      	movs	r1, r5
    6338:	e016      	b.n	6368 <_ZN8SPIFlash9_beginSPIEh+0x58>
   switch (opcode) {
    633a:	2d52      	cmp	r5, #82	; 0x52
    633c:	d003      	beq.n	6346 <_ZN8SPIFlash9_beginSPIEh+0x36>
    633e:	2dd8      	cmp	r5, #216	; 0xd8
    6340:	d001      	beq.n	6346 <_ZN8SPIFlash9_beginSPIEh+0x36>
    6342:	2d20      	cmp	r5, #32
    6344:	d1f7      	bne.n	6336 <_ZN8SPIFlash9_beginSPIEh+0x26>
     _nextByte(WRITE, opcode);
    6346:	0029      	movs	r1, r5
    6348:	0020      	movs	r0, r4
    634a:	f7ff ff8f 	bl	626c <_ZN8SPIFlash9_nextByteEch.constprop.8>
     _transferAddress();
    634e:	0020      	movs	r0, r4
    6350:	f7ff ffb6 	bl	62c0 <_ZN8SPIFlash16_transferAddressEv>
 }
    6354:	2001      	movs	r0, #1
    6356:	bd70      	pop	{r4, r5, r6, pc}
     _nextByte(WRITE, opcode);
    6358:	0029      	movs	r1, r5
    635a:	0020      	movs	r0, r4
    635c:	f7ff ff86 	bl	626c <_ZN8SPIFlash9_nextByteEch.constprop.8>
     _transferAddress();
    6360:	0020      	movs	r0, r4
    6362:	f7ff ffad 	bl	62c0 <_ZN8SPIFlash16_transferAddressEv>
     _nextByte(WRITE, DUMMYBYTE);
    6366:	21ee      	movs	r1, #238	; 0xee
     _nextByte(WRITE, opcode);
    6368:	0020      	movs	r0, r4
    636a:	f7ff ff7f 	bl	626c <_ZN8SPIFlash9_nextByteEch.constprop.8>
     break;
    636e:	e7f1      	b.n	6354 <_ZN8SPIFlash9_beginSPIEh+0x44>

00006370 <_ZN8SPIFlash15_notPrevWrittenEmm>:
 bool SPIFlash::_notPrevWritten(uint32_t _addr, uint32_t size) {
    6370:	b570      	push	{r4, r5, r6, lr}
   _beginSPI(READDATA);
    6372:	2103      	movs	r1, #3
 bool SPIFlash::_notPrevWritten(uint32_t _addr, uint32_t size) {
    6374:	0004      	movs	r4, r0
    6376:	0016      	movs	r6, r2
   for (uint32_t i = 0; i < size; i++) {
    6378:	2500      	movs	r5, #0
   _beginSPI(READDATA);
    637a:	f7ff ffc9 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
   for (uint32_t i = 0; i < size; i++) {
    637e:	42b5      	cmp	r5, r6
    6380:	d012      	beq.n	63a8 <_ZN8SPIFlash15_notPrevWrittenEmm+0x38>
     return xfer(data);
    6382:	2100      	movs	r1, #0
    6384:	68e0      	ldr	r0, [r4, #12]
    6386:	f000 fae1 	bl	694c <_ZN8SPIClass8transferEh>
     if (_nextByte(READ) != 0xFF) {
    638a:	28ff      	cmp	r0, #255	; 0xff
    638c:	d00a      	beq.n	63a4 <_ZN8SPIFlash15_notPrevWrittenEmm+0x34>
       CHIP_DESELECT;
    638e:	7c20      	ldrb	r0, [r4, #16]
    6390:	2101      	movs	r1, #1
    6392:	f7fd fb9d 	bl	3ad0 <digitalWrite>
   diagnostics.troubleshoot(_code, printoverride);
    6396:	4807      	ldr	r0, [pc, #28]	; (63b4 <_ZN8SPIFlash15_notPrevWrittenEmm+0x44>)
    6398:	2200      	movs	r2, #0
    639a:	2107      	movs	r1, #7
    639c:	f001 f8aa 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
    63a0:	2000      	movs	r0, #0
 }
    63a2:	bd70      	pop	{r4, r5, r6, pc}
   for (uint32_t i = 0; i < size; i++) {
    63a4:	3501      	adds	r5, #1
    63a6:	e7ea      	b.n	637e <_ZN8SPIFlash15_notPrevWrittenEmm+0xe>
   CHIP_DESELECT
    63a8:	7c20      	ldrb	r0, [r4, #16]
    63aa:	2101      	movs	r1, #1
    63ac:	f7fd fb90 	bl	3ad0 <digitalWrite>
   return true;
    63b0:	2001      	movs	r0, #1
    63b2:	e7f6      	b.n	63a2 <_ZN8SPIFlash15_notPrevWrittenEmm+0x32>
    63b4:	20000ed0 	.word	0x20000ed0

000063b8 <_ZN8SPIFlash9_nextByteEch>:
 uint8_t SPIFlash::_nextByte(char IOType, uint8_t data) {
    63b8:	b510      	push	{r4, lr}
     return xfer(data);
    63ba:	0011      	movs	r1, r2
    63bc:	68c0      	ldr	r0, [r0, #12]
    63be:	f000 fac5 	bl	694c <_ZN8SPIClass8transferEh>
 }
    63c2:	bd10      	pop	{r4, pc}

000063c4 <_ZN8SPIFlash8_nextBufEhPhm>:
 void SPIFlash::_nextBuf(uint8_t opcode, uint8_t *data_buffer, uint32_t size) {
    63c4:	b510      	push	{r4, lr}
    63c6:	000c      	movs	r4, r1
    63c8:	0011      	movs	r1, r2
    63ca:	001a      	movs	r2, r3
   switch (opcode) {
    63cc:	2c02      	cmp	r4, #2
    63ce:	d001      	beq.n	63d4 <_ZN8SPIFlash8_nextBufEhPhm+0x10>
    63d0:	2c03      	cmp	r4, #3
    63d2:	d102      	bne.n	63da <_ZN8SPIFlash8_nextBufEhPhm+0x16>
         _spi->transfer(&data_buffer[0], size);
    63d4:	68c0      	ldr	r0, [r0, #12]
    63d6:	f000 fabe 	bl	6956 <_ZN8SPIClass8transferEPvj>
 }
    63da:	bd10      	pop	{r4, pc}

000063dc <_ZN8SPIFlash10_readStat1Ev>:
 uint8_t SPIFlash::_readStat1(void) {
    63dc:	b570      	push	{r4, r5, r6, lr}
    63de:	0004      	movs	r4, r0
   _beginSPI(READSTAT1);
    63e0:	2105      	movs	r1, #5
    63e2:	f7ff ff95 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
     return xfer(data);
    63e6:	2100      	movs	r1, #0
    63e8:	68e0      	ldr	r0, [r4, #12]
    63ea:	f000 faaf 	bl	694c <_ZN8SPIClass8transferEh>
   stat1 = _nextByte(READ);
    63ee:	1d25      	adds	r5, r4, #4
    63f0:	77e8      	strb	r0, [r5, #31]
   CHIP_DESELECT
    63f2:	7c20      	ldrb	r0, [r4, #16]
    63f4:	2101      	movs	r1, #1
    63f6:	f7fd fb6b 	bl	3ad0 <digitalWrite>
   return stat1;
    63fa:	7fe8      	ldrb	r0, [r5, #31]
 }
    63fc:	bd70      	pop	{r4, r5, r6, pc}

000063fe <_ZN8SPIFlash10_readStat3Ev>:
 uint8_t SPIFlash::_readStat3(void) {
    63fe:	b570      	push	{r4, r5, r6, lr}
    6400:	0004      	movs	r4, r0
   _beginSPI(READSTAT3);
    6402:	2115      	movs	r1, #21
    6404:	f7ff ff84 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
     return xfer(data);
    6408:	2100      	movs	r1, #0
    640a:	68e0      	ldr	r0, [r4, #12]
    640c:	f000 fa9e 	bl	694c <_ZN8SPIClass8transferEh>
   stat3 = _nextByte(READ);
    6410:	1da5      	adds	r5, r4, #6
    6412:	77e8      	strb	r0, [r5, #31]
   CHIP_DESELECT
    6414:	7c20      	ldrb	r0, [r4, #16]
    6416:	2101      	movs	r1, #1
    6418:	f7fd fb5a 	bl	3ad0 <digitalWrite>
   return stat3;
    641c:	7fe8      	ldrb	r0, [r5, #31]
 }
    641e:	bd70      	pop	{r4, r5, r6, pc}

00006420 <_ZN8SPIFlash22_enable4ByteAddressingEv>:
 bool SPIFlash::_enable4ByteAddressing(void) {
    6420:	b570      	push	{r4, r5, r6, lr}
    6422:	0006      	movs	r6, r0
     return true;
    6424:	2401      	movs	r4, #1
   if (_readStat3() & ADS) {
    6426:	f7ff ffea 	bl	63fe <_ZN8SPIFlash10_readStat3Ev>
    642a:	4220      	tst	r0, r4
    642c:	d10e      	bne.n	644c <_ZN8SPIFlash22_enable4ByteAddressingEv+0x2c>
   _beginSPI(ADDR4BYTE_EN);
    642e:	21b7      	movs	r1, #183	; 0xb7
    6430:	0030      	movs	r0, r6
    6432:	f7ff ff6d 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    6436:	7c30      	ldrb	r0, [r6, #16]
    6438:	0021      	movs	r1, r4
    643a:	f7fd fb49 	bl	3ad0 <digitalWrite>
   if (_readStat3() & ADS) {
    643e:	0030      	movs	r0, r6
    6440:	f7ff ffdd 	bl	63fe <_ZN8SPIFlash10_readStat3Ev>
    6444:	4020      	ands	r0, r4
    6446:	1e05      	subs	r5, r0, #0
    6448:	d002      	beq.n	6450 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x30>
     address4ByteEnabled = true;
    644a:	77f4      	strb	r4, [r6, #31]
 }
    644c:	0020      	movs	r0, r4
    644e:	bd70      	pop	{r4, r5, r6, pc}
   diagnostics.troubleshoot(_code, printoverride);
    6450:	0002      	movs	r2, r0
    6452:	210d      	movs	r1, #13
    6454:	4802      	ldr	r0, [pc, #8]	; (6460 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x40>)
    6456:	f001 f84d 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
    645a:	002c      	movs	r4, r5
    645c:	e7f6      	b.n	644c <_ZN8SPIFlash22_enable4ByteAddressingEv+0x2c>
    645e:	46c0      	nop			; (mov r8, r8)
    6460:	20000ed0 	.word	0x20000ed0

00006464 <_ZN8SPIFlash23_disable4ByteAddressingEv>:
 bool SPIFlash::_disable4ByteAddressing(void) {
    6464:	b570      	push	{r4, r5, r6, lr}
    6466:	0005      	movs	r5, r0
     return true;
    6468:	2401      	movs	r4, #1
   if (!(_readStat3() & ADS)) {      // If 4 byte addressing is disabled (default state)
    646a:	f7ff ffc8 	bl	63fe <_ZN8SPIFlash10_readStat3Ev>
    646e:	4220      	tst	r0, r4
    6470:	d012      	beq.n	6498 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x34>
   _beginSPI(ADDR4BYTE_DIS);
    6472:	21e9      	movs	r1, #233	; 0xe9
    6474:	0028      	movs	r0, r5
    6476:	f7ff ff4b 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    647a:	7c28      	ldrb	r0, [r5, #16]
    647c:	0021      	movs	r1, r4
    647e:	f7fd fb27 	bl	3ad0 <digitalWrite>
   if (_readStat3() & ADS) {
    6482:	0028      	movs	r0, r5
    6484:	f7ff ffbb 	bl	63fe <_ZN8SPIFlash10_readStat3Ev>
    6488:	4020      	ands	r0, r4
    648a:	d007      	beq.n	649c <_ZN8SPIFlash23_disable4ByteAddressingEv+0x38>
   diagnostics.troubleshoot(_code, printoverride);
    648c:	2200      	movs	r2, #0
    648e:	210e      	movs	r1, #14
    6490:	4803      	ldr	r0, [pc, #12]	; (64a0 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x3c>)
    6492:	f001 f82f 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
    6496:	2400      	movs	r4, #0
 }
    6498:	0020      	movs	r0, r4
    649a:	bd70      	pop	{r4, r5, r6, pc}
   address4ByteEnabled = false;
    649c:	77e8      	strb	r0, [r5, #31]
   return true;
    649e:	e7fb      	b.n	6498 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x34>
    64a0:	20000ed0 	.word	0x20000ed0

000064a4 <_ZN8SPIFlash7_endSPIEv>:
 void SPIFlash::_endSPI(void) {
    64a4:	b510      	push	{r4, lr}
    64a6:	0004      	movs	r4, r0
   CHIP_DESELECT
    64a8:	2101      	movs	r1, #1
    64aa:	7c00      	ldrb	r0, [r0, #16]
    64ac:	f7fd fb10 	bl	3ad0 <digitalWrite>
   if (address4ByteEnabled) {          // If the previous operation enabled 4-byte addressing, disable it
    64b0:	7fe3      	ldrb	r3, [r4, #31]
    64b2:	2b00      	cmp	r3, #0
    64b4:	d002      	beq.n	64bc <_ZN8SPIFlash7_endSPIEv+0x18>
     _disable4ByteAddressing();
    64b6:	0020      	movs	r0, r4
    64b8:	f7ff ffd4 	bl	6464 <_ZN8SPIFlash23_disable4ByteAddressingEv>
     _spi->endTransaction();
    64bc:	68e0      	ldr	r0, [r4, #12]
    64be:	f000 fa31 	bl	6924 <_ZN8SPIClass14endTransactionEv>
   SPIBusState = false;
    64c2:	2300      	movs	r3, #0
    64c4:	7763      	strb	r3, [r4, #29]
 }
    64c6:	bd10      	pop	{r4, pc}

000064c8 <_ZN8SPIFlash18_isChipPoweredDownEv>:
 bool SPIFlash::_isChipPoweredDown(void) {
    64c8:	b510      	push	{r4, lr}
   if (chipPoweredDown) {
    64ca:	7f84      	ldrb	r4, [r0, #30]
    64cc:	2c00      	cmp	r4, #0
    64ce:	d004      	beq.n	64da <_ZN8SPIFlash18_isChipPoweredDownEv+0x12>
   diagnostics.troubleshoot(_code, printoverride);
    64d0:	2200      	movs	r2, #0
    64d2:	210f      	movs	r1, #15
    64d4:	4802      	ldr	r0, [pc, #8]	; (64e0 <_ZN8SPIFlash18_isChipPoweredDownEv+0x18>)
    64d6:	f001 f80d 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
 }
    64da:	0020      	movs	r0, r4
    64dc:	bd10      	pop	{r4, pc}
    64de:	46c0      	nop			; (mov r8, r8)
    64e0:	20000ed0 	.word	0x20000ed0

000064e4 <_ZN8SPIFlash8_notBusyEm>:
 bool SPIFlash::_notBusy(uint32_t timeout) {
    64e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64e6:	0006      	movs	r6, r0
    64e8:	000c      	movs	r4, r1
    64ea:	2320      	movs	r3, #32
    64ec:	3b01      	subs	r3, #1
    64ee:	d1fd      	bne.n	64ec <_ZN8SPIFlash8_notBusyEm+0x8>
   uint32_t _time = micros();
    64f0:	f7fc f8be 	bl	2670 <micros>
     if (!(stat1 & BUSY))
    64f4:	2701      	movs	r7, #1
   uint32_t _time = micros();
    64f6:	0005      	movs	r5, r0
     _readStat1();
    64f8:	0030      	movs	r0, r6
    64fa:	f7ff ff6f 	bl	63dc <_ZN8SPIFlash10_readStat1Ev>
     if (!(stat1 & BUSY))
    64fe:	1d33      	adds	r3, r6, #4
    6500:	7fdb      	ldrb	r3, [r3, #31]
    6502:	423b      	tst	r3, r7
    6504:	d101      	bne.n	650a <_ZN8SPIFlash8_notBusyEm+0x26>
       return true;
    6506:	2001      	movs	r0, #1
 }
    6508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   } while ((micros() - _time) < timeout);
    650a:	f7fc f8b1 	bl	2670 <micros>
    650e:	1b40      	subs	r0, r0, r5
   do {
    6510:	42a0      	cmp	r0, r4
    6512:	d3f1      	bcc.n	64f8 <_ZN8SPIFlash8_notBusyEm+0x14>
   if (timeout <= (micros() - _time)) {
    6514:	f7fc f8ac 	bl	2670 <micros>
    6518:	1b40      	subs	r0, r0, r5
    651a:	4284      	cmp	r4, r0
    651c:	d8f3      	bhi.n	6506 <_ZN8SPIFlash8_notBusyEm+0x22>
   diagnostics.troubleshoot(_code, printoverride);
    651e:	4803      	ldr	r0, [pc, #12]	; (652c <_ZN8SPIFlash8_notBusyEm+0x48>)
    6520:	2200      	movs	r2, #0
    6522:	2104      	movs	r1, #4
    6524:	f000 ffe6 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
    6528:	2000      	movs	r0, #0
    652a:	e7ed      	b.n	6508 <_ZN8SPIFlash8_notBusyEm+0x24>
    652c:	20000ed0 	.word	0x20000ed0

00006530 <_ZN8SPIFlash12_writeEnableEb>:
 bool SPIFlash::_writeEnable(bool _troubleshootEnable) {
    6530:	b570      	push	{r4, r5, r6, lr}
    6532:	0004      	movs	r4, r0
    6534:	000d      	movs	r5, r1
   _beginSPI(WRITEENABLE);
    6536:	2106      	movs	r1, #6
    6538:	f7ff feea 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    653c:	7c20      	ldrb	r0, [r4, #16]
    653e:	2101      	movs	r1, #1
    6540:	f7fd fac6 	bl	3ad0 <digitalWrite>
   if (!(_readStat1() & WRTEN)) {
    6544:	0020      	movs	r0, r4
    6546:	f7ff ff49 	bl	63dc <_ZN8SPIFlash10_readStat1Ev>
    654a:	2402      	movs	r4, #2
    654c:	4004      	ands	r4, r0
    654e:	d109      	bne.n	6564 <_ZN8SPIFlash12_writeEnableEb+0x34>
     if (_troubleshootEnable) {
    6550:	2d00      	cmp	r5, #0
    6552:	d005      	beq.n	6560 <_ZN8SPIFlash12_writeEnableEb+0x30>
   diagnostics.troubleshoot(_code, printoverride);
    6554:	0022      	movs	r2, r4
    6556:	2106      	movs	r1, #6
    6558:	4803      	ldr	r0, [pc, #12]	; (6568 <_ZN8SPIFlash12_writeEnableEb+0x38>)
    655a:	f000 ffcb 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
    655e:	0025      	movs	r5, r4
 }
    6560:	0028      	movs	r0, r5
    6562:	bd70      	pop	{r4, r5, r6, pc}
   return true;
    6564:	2501      	movs	r5, #1
    6566:	e7fb      	b.n	6560 <_ZN8SPIFlash12_writeEnableEb+0x30>
    6568:	20000ed0 	.word	0x20000ed0

0000656c <_ZN8SPIFlash5_prepEhmm>:
 bool SPIFlash::_prep(uint8_t opcode, uint32_t _addr, uint32_t size) {
    656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    656e:	001e      	movs	r6, r3
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    6570:	0003      	movs	r3, r0
    6572:	3337      	adds	r3, #55	; 0x37
    6574:	781b      	ldrb	r3, [r3, #0]
 bool SPIFlash::_prep(uint8_t opcode, uint32_t _addr, uint32_t size) {
    6576:	0004      	movs	r4, r0
    6578:	000f      	movs	r7, r1
    657a:	0015      	movs	r5, r2
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    657c:	2bef      	cmp	r3, #239	; 0xef
    657e:	d014      	beq.n	65aa <_ZN8SPIFlash5_prepEhmm+0x3e>
   switch (opcode) {
    6580:	2f02      	cmp	r7, #2
    6582:	d01b      	beq.n	65bc <_ZN8SPIFlash5_prepEhmm+0x50>
    6584:	2fef      	cmp	r7, #239	; 0xef
    6586:	d037      	beq.n	65f8 <_ZN8SPIFlash5_prepEhmm+0x8c>
       if (_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notBusy()) {
    6588:	0020      	movs	r0, r4
    658a:	f7ff ff9d 	bl	64c8 <_ZN8SPIFlash18_isChipPoweredDownEv>
    658e:	2800      	cmp	r0, #0
    6590:	d112      	bne.n	65b8 <_ZN8SPIFlash5_prepEhmm+0x4c>
    6592:	0032      	movs	r2, r6
    6594:	0029      	movs	r1, r5
    6596:	0020      	movs	r0, r4
    6598:	f7ff fe6e 	bl	6278 <_ZN8SPIFlash13_addressCheckEmm>
    659c:	2800      	cmp	r0, #0
    659e:	d00b      	beq.n	65b8 <_ZN8SPIFlash5_prepEhmm+0x4c>
    65a0:	491b      	ldr	r1, [pc, #108]	; (6610 <_ZN8SPIFlash5_prepEhmm+0xa4>)
    65a2:	0020      	movs	r0, r4
    65a4:	f7ff ff9e 	bl	64e4 <_ZN8SPIFlash8_notBusyEm>
    65a8:	e007      	b.n	65ba <_ZN8SPIFlash5_prepEhmm+0x4e>
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    65aa:	4b1a      	ldr	r3, [pc, #104]	; (6614 <_ZN8SPIFlash5_prepEhmm+0xa8>)
    65ac:	429a      	cmp	r2, r3
    65ae:	d9e7      	bls.n	6580 <_ZN8SPIFlash5_prepEhmm+0x14>
     if (!_enable4ByteAddressing()) {    // If unable to enable 4-byte addressing
    65b0:	f7ff ff36 	bl	6420 <_ZN8SPIFlash22_enable4ByteAddressingEv>
    65b4:	2800      	cmp	r0, #0
    65b6:	d1e3      	bne.n	6580 <_ZN8SPIFlash5_prepEhmm+0x14>
       return false;
    65b8:	2000      	movs	r0, #0
 }
    65ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       if(_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notPrevWritten(_addr, size) || !_notBusy() || !_writeEnable()) {
    65bc:	0020      	movs	r0, r4
    65be:	f7ff ff83 	bl	64c8 <_ZN8SPIFlash18_isChipPoweredDownEv>
    65c2:	2800      	cmp	r0, #0
    65c4:	d1f8      	bne.n	65b8 <_ZN8SPIFlash5_prepEhmm+0x4c>
    65c6:	0032      	movs	r2, r6
    65c8:	0029      	movs	r1, r5
    65ca:	0020      	movs	r0, r4
    65cc:	f7ff fe54 	bl	6278 <_ZN8SPIFlash13_addressCheckEmm>
    65d0:	2800      	cmp	r0, #0
    65d2:	d0f1      	beq.n	65b8 <_ZN8SPIFlash5_prepEhmm+0x4c>
    65d4:	0032      	movs	r2, r6
    65d6:	0029      	movs	r1, r5
    65d8:	0020      	movs	r0, r4
    65da:	f7ff fec9 	bl	6370 <_ZN8SPIFlash15_notPrevWrittenEmm>
     if(_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notBusy() || !_writeEnable()) {
    65de:	2800      	cmp	r0, #0
    65e0:	d0ea      	beq.n	65b8 <_ZN8SPIFlash5_prepEhmm+0x4c>
    65e2:	490b      	ldr	r1, [pc, #44]	; (6610 <_ZN8SPIFlash5_prepEhmm+0xa4>)
    65e4:	0020      	movs	r0, r4
    65e6:	f7ff ff7d 	bl	64e4 <_ZN8SPIFlash8_notBusyEm>
    65ea:	2800      	cmp	r0, #0
    65ec:	d0e4      	beq.n	65b8 <_ZN8SPIFlash5_prepEhmm+0x4c>
    65ee:	2101      	movs	r1, #1
    65f0:	0020      	movs	r0, r4
    65f2:	f7ff ff9d 	bl	6530 <_ZN8SPIFlash12_writeEnableEb>
    65f6:	e7e0      	b.n	65ba <_ZN8SPIFlash5_prepEhmm+0x4e>
    65f8:	0020      	movs	r0, r4
    65fa:	f7ff ff65 	bl	64c8 <_ZN8SPIFlash18_isChipPoweredDownEv>
    65fe:	2800      	cmp	r0, #0
    6600:	d1da      	bne.n	65b8 <_ZN8SPIFlash5_prepEhmm+0x4c>
    6602:	0032      	movs	r2, r6
    6604:	0029      	movs	r1, r5
    6606:	0020      	movs	r0, r4
    6608:	f7ff fe36 	bl	6278 <_ZN8SPIFlash13_addressCheckEmm>
    660c:	e7e7      	b.n	65de <_ZN8SPIFlash5_prepEhmm+0x72>
    660e:	46c0      	nop			; (mov r8, r8)
    6610:	3b9aca00 	.word	0x3b9aca00
    6614:	00ffffff 	.word	0x00ffffff

00006618 <_ZN8SPIFlash13_writeDisableEv>:
 bool SPIFlash::_writeDisable(void) {
    6618:	b510      	push	{r4, lr}
    661a:	0004      	movs	r4, r0
 	_beginSPI(WRITEDISABLE);
    661c:	2104      	movs	r1, #4
    661e:	f7ff fe77 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    6622:	7c20      	ldrb	r0, [r4, #16]
    6624:	2101      	movs	r1, #1
    6626:	f7fd fa53 	bl	3ad0 <digitalWrite>
 }
    662a:	2001      	movs	r0, #1
    662c:	bd10      	pop	{r4, pc}
	...

00006630 <_ZN8SPIFlash11_getJedecIdEv>:
 bool SPIFlash::_getJedecId(void) {
    6630:	b570      	push	{r4, r5, r6, lr}
   if(!_notBusy()) {
    6632:	4917      	ldr	r1, [pc, #92]	; (6690 <_ZN8SPIFlash11_getJedecIdEv+0x60>)
 bool SPIFlash::_getJedecId(void) {
    6634:	0004      	movs	r4, r0
   if(!_notBusy()) {
    6636:	f7ff ff55 	bl	64e4 <_ZN8SPIFlash8_notBusyEm>
    663a:	1e05      	subs	r5, r0, #0
    663c:	d025      	beq.n	668a <_ZN8SPIFlash11_getJedecIdEv+0x5a>
   _beginSPI(JEDECID);
    663e:	219f      	movs	r1, #159	; 0x9f
    6640:	0020      	movs	r0, r4
    6642:	f7ff fe65 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    6646:	0026      	movs	r6, r4
     return xfer(data);
    6648:	2100      	movs	r1, #0
    664a:	68e0      	ldr	r0, [r4, #12]
    664c:	f000 f97e 	bl	694c <_ZN8SPIClass8transferEh>
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    6650:	3637      	adds	r6, #55	; 0x37
    6652:	7030      	strb	r0, [r6, #0]
     return xfer(data);
    6654:	2100      	movs	r1, #0
    6656:	68e0      	ldr	r0, [r4, #12]
    6658:	f000 f978 	bl	694c <_ZN8SPIClass8transferEh>
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
    665c:	0023      	movs	r3, r4
    665e:	3338      	adds	r3, #56	; 0x38
    6660:	7018      	strb	r0, [r3, #0]
     return xfer(data);
    6662:	2100      	movs	r1, #0
    6664:	68e0      	ldr	r0, [r4, #12]
    6666:	f000 f971 	bl	694c <_ZN8SPIClass8transferEh>
 	_chip.capacityID = _nextByte(READ);		// capacity
    666a:	0023      	movs	r3, r4
    666c:	3339      	adds	r3, #57	; 0x39
    666e:	7018      	strb	r0, [r3, #0]
   CHIP_DESELECT
    6670:	7c20      	ldrb	r0, [r4, #16]
    6672:	2101      	movs	r1, #1
    6674:	f7fd fa2c 	bl	3ad0 <digitalWrite>
   if (!_chip.manufacturerID) {
    6678:	7834      	ldrb	r4, [r6, #0]
    667a:	2c00      	cmp	r4, #0
    667c:	d105      	bne.n	668a <_ZN8SPIFlash11_getJedecIdEv+0x5a>
   diagnostics.troubleshoot(_code, printoverride);
    667e:	0022      	movs	r2, r4
    6680:	210b      	movs	r1, #11
    6682:	4804      	ldr	r0, [pc, #16]	; (6694 <_ZN8SPIFlash11_getJedecIdEv+0x64>)
    6684:	f000 ff36 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
    6688:	0025      	movs	r5, r4
 }
    668a:	0028      	movs	r0, r5
    668c:	bd70      	pop	{r4, r5, r6, pc}
    668e:	46c0      	nop			; (mov r8, r8)
    6690:	3b9aca00 	.word	0x3b9aca00
    6694:	20000ed0 	.word	0x20000ed0

00006698 <_ZN8SPIFlash26_disableGlobalBlockProtectEv>:
   if (_chip.memoryTypeID == SST25) {
    6698:	0003      	movs	r3, r0
 bool SPIFlash::_disableGlobalBlockProtect(void) {
    669a:	b570      	push	{r4, r5, r6, lr}
   if (_chip.memoryTypeID == SST25) {
    669c:	3338      	adds	r3, #56	; 0x38
    669e:	781b      	ldrb	r3, [r3, #0]
 bool SPIFlash::_disableGlobalBlockProtect(void) {
    66a0:	0004      	movs	r4, r0
   if (_chip.memoryTypeID == SST25) {
    66a2:	2b25      	cmp	r3, #37	; 0x25
    66a4:	d11c      	bne.n	66e0 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x48>
     _readStat1();
    66a6:	f7ff fe99 	bl	63dc <_ZN8SPIFlash10_readStat1Ev>
     uint8_t _tempStat1 = stat1 & 0xC3;
    66aa:	1d23      	adds	r3, r4, #4
    66ac:	7fdd      	ldrb	r5, [r3, #31]
    66ae:	233c      	movs	r3, #60	; 0x3c
     _beginSPI(WRITESTATEN);
    66b0:	2150      	movs	r1, #80	; 0x50
    66b2:	0020      	movs	r0, r4
     uint8_t _tempStat1 = stat1 & 0xC3;
    66b4:	439d      	bics	r5, r3
     _beginSPI(WRITESTATEN);
    66b6:	f7ff fe2b 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    66ba:	7c20      	ldrb	r0, [r4, #16]
    66bc:	2101      	movs	r1, #1
    66be:	f7fd fa07 	bl	3ad0 <digitalWrite>
     _beginSPI(WRITESTAT1);
    66c2:	2101      	movs	r1, #1
    66c4:	0020      	movs	r0, r4
    66c6:	f7ff fe23 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
     _nextByte(WRITE, _tempStat1);
    66ca:	0029      	movs	r1, r5
    66cc:	0020      	movs	r0, r4
    66ce:	f7ff fdcd 	bl	626c <_ZN8SPIFlash9_nextByteEch.constprop.8>
     CHIP_DESELECT
    66d2:	7c20      	ldrb	r0, [r4, #16]
    66d4:	2101      	movs	r1, #1
    66d6:	f7fd f9fb 	bl	3ad0 <digitalWrite>
   return true;
    66da:	2501      	movs	r5, #1
 }
    66dc:	0028      	movs	r0, r5
    66de:	bd70      	pop	{r4, r5, r6, pc}
   return true;
    66e0:	2501      	movs	r5, #1
   else if (_chip.memoryTypeID == SST26) {
    66e2:	2b26      	cmp	r3, #38	; 0x26
    66e4:	d1fa      	bne.n	66dc <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
     if(!_notBusy()) {
    66e6:	490e      	ldr	r1, [pc, #56]	; (6720 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x88>)
    66e8:	f7ff fefc 	bl	64e4 <_ZN8SPIFlash8_notBusyEm>
    66ec:	1e05      	subs	r5, r0, #0
    66ee:	d0f5      	beq.n	66dc <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
     _writeEnable();
    66f0:	2101      	movs	r1, #1
    66f2:	0020      	movs	r0, r4
    66f4:	f7ff ff1c 	bl	6530 <_ZN8SPIFlash12_writeEnableEb>
    66f8:	23a0      	movs	r3, #160	; 0xa0
    66fa:	3b01      	subs	r3, #1
    66fc:	d1fd      	bne.n	66fa <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x62>
     _beginSPI(ULBPR);
    66fe:	2198      	movs	r1, #152	; 0x98
    6700:	0020      	movs	r0, r4
    6702:	f7ff fe05 	bl	6310 <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    6706:	7c20      	ldrb	r0, [r4, #16]
    6708:	2101      	movs	r1, #1
    670a:	f7fd f9e1 	bl	3ad0 <digitalWrite>
    670e:	23c8      	movs	r3, #200	; 0xc8
    6710:	009b      	lsls	r3, r3, #2
    6712:	3b01      	subs	r3, #1
    6714:	d1fd      	bne.n	6712 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x7a>
     _writeDisable();
    6716:	0020      	movs	r0, r4
    6718:	f7ff ff7e 	bl	6618 <_ZN8SPIFlash13_writeDisableEv>
    671c:	e7de      	b.n	66dc <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
    671e:	46c0      	nop			; (mov r8, r8)
    6720:	3b9aca00 	.word	0x3b9aca00

00006724 <_ZN8SPIFlash7_chipIDEm>:
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    6724:	0002      	movs	r2, r0
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    6726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    6728:	2301      	movs	r3, #1
    672a:	3264      	adds	r2, #100	; 0x64
    672c:	7013      	strb	r3, [r2, #0]
    672e:	3a10      	subs	r2, #16
    6730:	7013      	strb	r3, [r2, #0]
    6732:	3a08      	subs	r2, #8
    6734:	7013      	strb	r3, [r2, #0]
    6736:	3a08      	subs	r2, #8
    6738:	7013      	strb	r3, [r2, #0]
   kb4Erase.opcode = SECTORERASE;
    673a:	0003      	movs	r3, r0
    673c:	2220      	movs	r2, #32
    673e:	3345      	adds	r3, #69	; 0x45
    6740:	701a      	strb	r2, [r3, #0]
   kb32Erase.opcode = BLOCK32ERASE;
    6742:	3232      	adds	r2, #50	; 0x32
    6744:	721a      	strb	r2, [r3, #8]
   kb64Erase.opcode = BLOCK64ERASE;
    6746:	3286      	adds	r2, #134	; 0x86
    6748:	741a      	strb	r2, [r3, #16]
   kb4Erase.time = BUSY_TIMEOUT;
    674a:	4b41      	ldr	r3, [pc, #260]	; (6850 <_ZN8SPIFlash7_chipIDEm+0x12c>)
   kb256Erase.supported = false;
    674c:	2200      	movs	r2, #0
   kb4Erase.time = BUSY_TIMEOUT;
    674e:	6483      	str	r3, [r0, #72]	; 0x48
   kb32Erase.time = kb4Erase.time * 8;
    6750:	4b40      	ldr	r3, [pc, #256]	; (6854 <_ZN8SPIFlash7_chipIDEm+0x130>)
   chipErase.opcode = CHIPERASE;
    6752:	0005      	movs	r5, r0
   kb32Erase.time = kb4Erase.time * 8;
    6754:	6503      	str	r3, [r0, #80]	; 0x50
   kb64Erase.time = kb32Erase.time * 4;
    6756:	4b40      	ldr	r3, [pc, #256]	; (6858 <_ZN8SPIFlash7_chipIDEm+0x134>)
   chipErase.opcode = CHIPERASE;
    6758:	3565      	adds	r5, #101	; 0x65
   kb64Erase.time = kb32Erase.time * 4;
    675a:	6583      	str	r3, [r0, #88]	; 0x58
   kb256Erase.supported = false;
    675c:	0003      	movs	r3, r0
    675e:	335c      	adds	r3, #92	; 0x5c
    6760:	701a      	strb	r2, [r3, #0]
   chipErase.opcode = CHIPERASE;
    6762:	2360      	movs	r3, #96	; 0x60
    6764:	702b      	strb	r3, [r5, #0]
   chipErase.time = kb64Erase.time * 100L;
    6766:	4b3d      	ldr	r3, [pc, #244]	; (685c <_ZN8SPIFlash7_chipIDEm+0x138>)
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    6768:	0004      	movs	r4, r0
   chipErase.time = kb64Erase.time * 100L;
    676a:	6683      	str	r3, [r0, #104]	; 0x68
   _pageSize = SPI_PAGESIZE;
    676c:	0003      	movs	r3, r0
    676e:	3201      	adds	r2, #1
    6770:	3372      	adds	r3, #114	; 0x72
    6772:	32ff      	adds	r2, #255	; 0xff
    6774:	801a      	strh	r2, [r3, #0]
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    6776:	000e      	movs	r6, r1
   _getJedecId();
    6778:	f7ff ff5a 	bl	6630 <_ZN8SPIFlash11_getJedecIdEv>
     if (_chip.manufacturerID == _supportedManID[i]) {
    677c:	0023      	movs	r3, r4
    677e:	1ca2      	adds	r2, r4, #2
    6780:	3337      	adds	r3, #55	; 0x37
    6782:	7819      	ldrb	r1, [r3, #0]
    6784:	32ff      	adds	r2, #255	; 0xff
    6786:	33c1      	adds	r3, #193	; 0xc1
    6788:	7818      	ldrb	r0, [r3, #0]
    678a:	4288      	cmp	r0, r1
    678c:	d127      	bne.n	67de <_ZN8SPIFlash7_chipIDEm+0xba>
       _chip.supportedMan = true;
    678e:	0023      	movs	r3, r4
    6790:	2201      	movs	r2, #1
    6792:	3335      	adds	r3, #53	; 0x35
    6794:	701a      	strb	r2, [r3, #0]
     if (_chip.memoryTypeID == _altChipEraseReq[i]) {
    6796:	0023      	movs	r3, r4
    6798:	0022      	movs	r2, r4
    679a:	3338      	adds	r3, #56	; 0x38
    679c:	32ff      	adds	r2, #255	; 0xff
    679e:	781b      	ldrb	r3, [r3, #0]
    67a0:	7890      	ldrb	r0, [r2, #2]
    67a2:	4298      	cmp	r0, r3
    67a4:	d005      	beq.n	67b2 <_ZN8SPIFlash7_chipIDEm+0x8e>
    67a6:	78d0      	ldrb	r0, [r2, #3]
    67a8:	4298      	cmp	r0, r3
    67aa:	d002      	beq.n	67b2 <_ZN8SPIFlash7_chipIDEm+0x8e>
    67ac:	7912      	ldrb	r2, [r2, #4]
    67ae:	429a      	cmp	r2, r3
    67b0:	d101      	bne.n	67b6 <_ZN8SPIFlash7_chipIDEm+0x92>
       chipErase.opcode = ALT_CHIPERASE;
    67b2:	23c7      	movs	r3, #199	; 0xc7
    67b4:	702b      	strb	r3, [r5, #0]
   if (_chip.supportedMan) {
    67b6:	0023      	movs	r3, r4
    67b8:	3335      	adds	r3, #53	; 0x35
    67ba:	781d      	ldrb	r5, [r3, #0]
    67bc:	2d00      	cmp	r5, #0
    67be:	d032      	beq.n	6826 <_ZN8SPIFlash7_chipIDEm+0x102>
    67c0:	0027      	movs	r7, r4
    67c2:	3739      	adds	r7, #57	; 0x39
     if(_chip.manufacturerID == MACRONIX_MANID)
    67c4:	29c2      	cmp	r1, #194	; 0xc2
    67c6:	d111      	bne.n	67ec <_ZN8SPIFlash7_chipIDEm+0xc8>
       switch(_chip.capacityID)
    67c8:	783b      	ldrb	r3, [r7, #0]
    67ca:	2b13      	cmp	r3, #19
    67cc:	d00b      	beq.n	67e6 <_ZN8SPIFlash7_chipIDEm+0xc2>
    67ce:	2b14      	cmp	r3, #20
    67d0:	d01b      	beq.n	680a <_ZN8SPIFlash7_chipIDEm+0xe6>
   diagnostics.troubleshoot(_code, printoverride);
    67d2:	2200      	movs	r2, #0
    67d4:	2102      	movs	r1, #2
    67d6:	4822      	ldr	r0, [pc, #136]	; (6860 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    67d8:	f000 fe8c 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
    67dc:	e006      	b.n	67ec <_ZN8SPIFlash7_chipIDEm+0xc8>
    67de:	3301      	adds	r3, #1
   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
    67e0:	4293      	cmp	r3, r2
    67e2:	d1d1      	bne.n	6788 <_ZN8SPIFlash7_chipIDEm+0x64>
    67e4:	e7d7      	b.n	6796 <_ZN8SPIFlash7_chipIDEm+0x72>
         _chip.capacity = MB(4);
    67e6:	2380      	movs	r3, #128	; 0x80
    67e8:	03db      	lsls	r3, r3, #15
         _chip.capacity = MB(8);
    67ea:	63e3      	str	r3, [r4, #60]	; 0x3c
       if (_chip.capacityID == _capID[j]) {
    67ec:	2300      	movs	r3, #0
    67ee:	783a      	ldrb	r2, [r7, #0]
    67f0:	0019      	movs	r1, r3
    67f2:	319c      	adds	r1, #156	; 0x9c
    67f4:	5c61      	ldrb	r1, [r4, r1]
    67f6:	4291      	cmp	r1, r2
    67f8:	d10a      	bne.n	6810 <_ZN8SPIFlash7_chipIDEm+0xec>
         _chip.capacity = (_memSize[j]);
    67fa:	332c      	adds	r3, #44	; 0x2c
    67fc:	009b      	lsls	r3, r3, #2
    67fe:	591b      	ldr	r3, [r3, r4]
         _chip.supported = true;
    6800:	3434      	adds	r4, #52	; 0x34
         _chip.capacity = (_memSize[j]);
    6802:	60a3      	str	r3, [r4, #8]
         _chip.supported = true;
    6804:	2301      	movs	r3, #1
       _chip.supported = false;
    6806:	7023      	strb	r3, [r4, #0]
       return true;
    6808:	e012      	b.n	6830 <_ZN8SPIFlash7_chipIDEm+0x10c>
         _chip.capacity = MB(8);
    680a:	2380      	movs	r3, #128	; 0x80
    680c:	041b      	lsls	r3, r3, #16
    680e:	e7ec      	b.n	67ea <_ZN8SPIFlash7_chipIDEm+0xc6>
    6810:	3301      	adds	r3, #1
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
    6812:	2b12      	cmp	r3, #18
    6814:	d1ec      	bne.n	67f0 <_ZN8SPIFlash7_chipIDEm+0xcc>
   if (!_chip.capacity) {
    6816:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6818:	2b00      	cmp	r3, #0
    681a:	d108      	bne.n	682e <_ZN8SPIFlash7_chipIDEm+0x10a>
     if (flashChipSize) {
    681c:	2e00      	cmp	r6, #0
    681e:	d00f      	beq.n	6840 <_ZN8SPIFlash7_chipIDEm+0x11c>
       _chip.capacity = flashChipSize;
    6820:	63e6      	str	r6, [r4, #60]	; 0x3c
       _chip.supported = false;
    6822:	3434      	adds	r4, #52	; 0x34
    6824:	e7ef      	b.n	6806 <_ZN8SPIFlash7_chipIDEm+0xe2>
     if (_chip.sfdpAvailable) {
    6826:	3436      	adds	r4, #54	; 0x36
    6828:	7825      	ldrb	r5, [r4, #0]
    682a:	2d00      	cmp	r5, #0
    682c:	d002      	beq.n	6834 <_ZN8SPIFlash7_chipIDEm+0x110>
       return true;
    682e:	2501      	movs	r5, #1
 }
    6830:	0028      	movs	r0, r5
    6832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   diagnostics.troubleshoot(_code, printoverride);
    6834:	002a      	movs	r2, r5
    6836:	2102      	movs	r1, #2
    6838:	4809      	ldr	r0, [pc, #36]	; (6860 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    683a:	f000 fe5b 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
       return false;
    683e:	e7f7      	b.n	6830 <_ZN8SPIFlash7_chipIDEm+0x10c>
   diagnostics.troubleshoot(_code, printoverride);
    6840:	0032      	movs	r2, r6
    6842:	2103      	movs	r1, #3
    6844:	4806      	ldr	r0, [pc, #24]	; (6860 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    6846:	f000 fe55 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
       return false;
    684a:	0035      	movs	r5, r6
    684c:	e7f0      	b.n	6830 <_ZN8SPIFlash7_chipIDEm+0x10c>
    684e:	46c0      	nop			; (mov r8, r8)
    6850:	3b9aca00 	.word	0x3b9aca00
    6854:	dcd65000 	.word	0xdcd65000
    6858:	73594000 	.word	0x73594000
    685c:	0edd0000 	.word	0x0edd0000
    6860:	20000ed0 	.word	0x20000ed0

00006864 <_ZN8SPIFlash13_troubleshootEhb>:
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
    6864:	b510      	push	{r4, lr}
   diagnostics.troubleshoot(_code, printoverride);
    6866:	4802      	ldr	r0, [pc, #8]	; (6870 <_ZN8SPIFlash13_troubleshootEhb+0xc>)
    6868:	f000 fe44 	bl	74f4 <_ZN11Diagnostics12troubleshootEhb>
 }
    686c:	bd10      	pop	{r4, pc}
    686e:	46c0      	nop			; (mov r8, r8)
    6870:	20000ed0 	.word	0x20000ed0

00006874 <_ZN8SPIClass4initEv>:
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    6874:	7a43      	ldrb	r3, [r0, #9]
    6876:	2b00      	cmp	r3, #0
    6878:	d104      	bne.n	6884 <_ZN8SPIClass4initEv+0x10>
    return;
  interruptMode = SPI_IMODE_NONE;
    687a:	7283      	strb	r3, [r0, #10]
  interruptSave = 0;
    687c:	72c3      	strb	r3, [r0, #11]
  interruptMask = 0;
    687e:	60c3      	str	r3, [r0, #12]
  initialized = true;
    6880:	3301      	adds	r3, #1
    6882:	7243      	strb	r3, [r0, #9]
}
    6884:	4770      	bx	lr

00006886 <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    6886:	b530      	push	{r4, r5, lr}
    6888:	0004      	movs	r4, r0
    688a:	b085      	sub	sp, #20
    688c:	ad02      	add	r5, sp, #8
  _p_sercom->disableSPI();
    688e:	6800      	ldr	r0, [r0, #0]
{
    6890:	9102      	str	r1, [sp, #8]
    6892:	9203      	str	r2, [sp, #12]
  _p_sercom->disableSPI();
    6894:	f7fe fadf 	bl	4e56 <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    6898:	796b      	ldrb	r3, [r5, #5]
    689a:	7a22      	ldrb	r2, [r4, #8]
    689c:	79e1      	ldrb	r1, [r4, #7]
    689e:	9300      	str	r3, [sp, #0]
    68a0:	6820      	ldr	r0, [r4, #0]
    68a2:	2300      	movs	r3, #0
    68a4:	f7fe fb82 	bl	4fac <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    68a8:	7929      	ldrb	r1, [r5, #4]
    68aa:	9a02      	ldr	r2, [sp, #8]
    68ac:	6820      	ldr	r0, [r4, #0]
    68ae:	f7fe faa5 	bl	4dfc <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    68b2:	6820      	ldr	r0, [r4, #0]
    68b4:	f7fe fac6 	bl	4e44 <_ZN6SERCOM9enableSPIEv>
}
    68b8:	b005      	add	sp, #20
    68ba:	bd30      	pop	{r4, r5, pc}

000068bc <_ZN8SPIClass5beginEv>:
{
    68bc:	b510      	push	{r4, lr}
    68be:	0004      	movs	r4, r0
  init();
    68c0:	f7ff ffd8 	bl	6874 <_ZN8SPIClass4initEv>
  pinPeripheral(_uc_pinMiso, PIO_SERCOM);
    68c4:	7920      	ldrb	r0, [r4, #4]
    68c6:	210e      	movs	r1, #14
    68c8:	f7fd f96c 	bl	3ba4 <pinPeripheral>
  pinPeripheral(_uc_pinSCK, PIO_SERCOM);
    68cc:	79a0      	ldrb	r0, [r4, #6]
    68ce:	210e      	movs	r1, #14
    68d0:	f7fd f968 	bl	3ba4 <pinPeripheral>
  pinPeripheral(_uc_pinMosi, PIO_SERCOM);
    68d4:	7960      	ldrb	r0, [r4, #5]
    68d6:	210e      	movs	r1, #14
    68d8:	f7fd f964 	bl	3ba4 <pinPeripheral>
  config(DEFAULT_SPI_SETTINGS);
    68dc:	4b02      	ldr	r3, [pc, #8]	; (68e8 <_ZN8SPIClass5beginEv+0x2c>)
    68de:	0020      	movs	r0, r4
    68e0:	cb06      	ldmia	r3!, {r1, r2}
    68e2:	f7ff ffd0 	bl	6886 <_ZN8SPIClass6configE11SPISettings>
}
    68e6:	bd10      	pop	{r4, pc}
    68e8:	20000d64 	.word	0x20000d64

000068ec <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    68ec:	b507      	push	{r0, r1, r2, lr}
  if (interruptMode != SPI_IMODE_NONE)
    68ee:	7a83      	ldrb	r3, [r0, #10]
{
    68f0:	9100      	str	r1, [sp, #0]
    68f2:	9201      	str	r2, [sp, #4]
  if (interruptMode != SPI_IMODE_NONE)
    68f4:	2b00      	cmp	r3, #0
    68f6:	d007      	beq.n	6908 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    68f8:	079a      	lsls	r2, r3, #30
    68fa:	d50a      	bpl.n	6912 <_ZN8SPIClass16beginTransactionE11SPISettings+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    68fc:	f3ef 8210 	mrs	r2, PRIMASK
  return (__get_PRIMASK() ? 0 : 1);
    6900:	4253      	negs	r3, r2
    6902:	4153      	adcs	r3, r2
    {
      interruptSave = interruptsStatus();
    6904:	72c3      	strb	r3, [r0, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    6906:	b672      	cpsid	i
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
  }

  config(settings);
    6908:	9900      	ldr	r1, [sp, #0]
    690a:	9a01      	ldr	r2, [sp, #4]
    690c:	f7ff ffbb 	bl	6886 <_ZN8SPIClass6configE11SPISettings>
}
    6910:	bd07      	pop	{r0, r1, r2, pc}
    else if (interruptMode & SPI_IMODE_EXTINT)
    6912:	07db      	lsls	r3, r3, #31
    6914:	d5f8      	bpl.n	6908 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    6916:	8983      	ldrh	r3, [r0, #12]
    6918:	4a01      	ldr	r2, [pc, #4]	; (6920 <_ZN8SPIClass16beginTransactionE11SPISettings+0x34>)
    691a:	60d3      	str	r3, [r2, #12]
    691c:	e7f4      	b.n	6908 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
    691e:	46c0      	nop			; (mov r8, r8)
    6920:	40002400 	.word	0x40002400

00006924 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
  if (interruptMode != SPI_IMODE_NONE)
    6924:	7a83      	ldrb	r3, [r0, #10]
    6926:	2b00      	cmp	r3, #0
    6928:	d005      	beq.n	6936 <_ZN8SPIClass14endTransactionEv+0x12>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    692a:	079a      	lsls	r2, r3, #30
    692c:	d504      	bpl.n	6938 <_ZN8SPIClass14endTransactionEv+0x14>
    {
      if (interruptSave)
    692e:	7ac3      	ldrb	r3, [r0, #11]
    6930:	2b00      	cmp	r3, #0
    6932:	d000      	beq.n	6936 <_ZN8SPIClass14endTransactionEv+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
    6934:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    6936:	4770      	bx	lr
    else if (interruptMode & SPI_IMODE_EXTINT)
    6938:	07db      	lsls	r3, r3, #31
    693a:	d5fc      	bpl.n	6936 <_ZN8SPIClass14endTransactionEv+0x12>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    693c:	68c3      	ldr	r3, [r0, #12]
    693e:	4a02      	ldr	r2, [pc, #8]	; (6948 <_ZN8SPIClass14endTransactionEv+0x24>)
    6940:	b29b      	uxth	r3, r3
    6942:	6113      	str	r3, [r2, #16]
}
    6944:	e7f7      	b.n	6936 <_ZN8SPIClass14endTransactionEv+0x12>
    6946:	46c0      	nop			; (mov r8, r8)
    6948:	40002400 	.word	0x40002400

0000694c <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    694c:	b510      	push	{r4, lr}
  return _p_sercom->transferDataSPI(data);
    694e:	6800      	ldr	r0, [r0, #0]
    6950:	f7fe fa8a 	bl	4e68 <_ZN6SERCOM15transferDataSPIEh>
}
    6954:	bd10      	pop	{r4, pc}

00006956 <_ZN8SPIClass8transferEPvj>:

  return t.val;
}

void SPIClass::transfer(void *buf, size_t count)
{
    6956:	b570      	push	{r4, r5, r6, lr}
    6958:	0006      	movs	r6, r0
  uint8_t *buffer = reinterpret_cast<uint8_t *>(buf);
    695a:	000c      	movs	r4, r1
    695c:	188d      	adds	r5, r1, r2
  for (size_t i=0; i<count; i++) {
    695e:	42ac      	cmp	r4, r5
    6960:	d006      	beq.n	6970 <_ZN8SPIClass8transferEPvj+0x1a>
    *buffer = transfer(*buffer);
    6962:	7821      	ldrb	r1, [r4, #0]
    6964:	0030      	movs	r0, r6
    6966:	f7ff fff1 	bl	694c <_ZN8SPIClass8transferEh>
    696a:	7020      	strb	r0, [r4, #0]
    buffer++;
    696c:	3401      	adds	r4, #1
  for (size_t i=0; i<count; i++) {
    696e:	e7f6      	b.n	695e <_ZN8SPIClass8transferEPvj+0x8>
  }
}
    6970:	bd70      	pop	{r4, r5, r6, pc}
	...

00006974 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    6974:	4b09      	ldr	r3, [pc, #36]	; (699c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x28>)
    6976:	4a0a      	ldr	r2, [pc, #40]	; (69a0 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2c>)
    6978:	601a      	str	r2, [r3, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    697a:	2200      	movs	r2, #0
    697c:	715a      	strb	r2, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    697e:	711a      	strb	r2, [r3, #4]
  initialized = false;
    6980:	4b08      	ldr	r3, [pc, #32]	; (69a4 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x30>)
    6982:	725a      	strb	r2, [r3, #9]
  _p_sercom = p_sercom;
    6984:	4a08      	ldr	r2, [pc, #32]	; (69a8 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x34>)
    6986:	601a      	str	r2, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
    6988:	2223      	movs	r2, #35	; 0x23
    698a:	711a      	strb	r2, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    698c:	3a02      	subs	r2, #2
    698e:	719a      	strb	r2, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    6990:	3a01      	subs	r2, #1
    6992:	715a      	strb	r2, [r3, #5]
  _padTx=PadTx;
    6994:	3a1f      	subs	r2, #31
    6996:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    6998:	721a      	strb	r2, [r3, #8]
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom5                 //sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3        //SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_1        //SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    699a:	4770      	bx	lr
    699c:	20000d64 	.word	0x20000d64
    69a0:	003d0900 	.word	0x003d0900
    69a4:	20000d54 	.word	0x20000d54
    69a8:	20000d18 	.word	0x20000d18

000069ac <_ZL15cbor_enc_lengthhP8cbor_bufm>:
}

/* Variable length encoder for integer types - UINT/NINT and ARRAY/MAP dimensions */
static int
cbor_enc_length(uint8_t major_type, struct cbor_buf * cbuf, uint32_t val)
{
    69ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    69ae:	4684      	mov	ip, r0
    69b0:	000d      	movs	r5, r1
    69b2:	9201      	str	r2, [sp, #4]
    69b4:	ba16      	rev	r6, r2
        *addnl_info = val;
    69b6:	b2d3      	uxtb	r3, r2
        retbytes = 0;
    69b8:	2400      	movs	r4, #0
    if (val <= CBOR_MJR0_THRESHOLD) {
    69ba:	2a17      	cmp	r2, #23
    69bc:	d90a      	bls.n	69d4 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    } else if (val > CBOR_MJR0_THRESHOLD && val <= UINT8_MAX) {
    69be:	0013      	movs	r3, r2
    69c0:	3b18      	subs	r3, #24
    69c2:	2be7      	cmp	r3, #231	; 0xe7
    69c4:	d911      	bls.n	69ea <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3e>
    } else if (val > UINT8_MAX && val <= UINT16_MAX) {
    69c6:	1e53      	subs	r3, r2, #1
    69c8:	491c      	ldr	r1, [pc, #112]	; (6a3c <_ZL15cbor_enc_lengthhP8cbor_bufm+0x90>)
    69ca:	3bff      	subs	r3, #255	; 0xff
    69cc:	428b      	cmp	r3, r1
    69ce:	d80f      	bhi.n	69f0 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x44>
        *addnl_info = CBOR_ADDL_BYTE_UINT16;
    69d0:	2319      	movs	r3, #25
        retbytes = SIZE_UINT16;
    69d2:	2402      	movs	r4, #2
    int addnlBytes;
    uint8_t additionalInfo;

    addnlBytes = cbor_get_addnl_info(val, &additionalInfo);

    if ((cbuf->next + addnlBytes) > cbuf->tail) {
    69d4:	68a9      	ldr	r1, [r5, #8]
    69d6:	6868      	ldr	r0, [r5, #4]
    69d8:	190f      	adds	r7, r1, r4
    69da:	42b8      	cmp	r0, r7
    69dc:	d20b      	bcs.n	69f6 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x4a>
        cbuf->err = CBOR_NO_MEM;
    69de:	2301      	movs	r3, #1
            break;
#endif
        default:
            /* TODO - error handling */
           cbuf->err = CBOR_INV_ADDNL_INFO;
           return CBOR_ERR;
    69e0:	2401      	movs	r4, #1
           cbuf->err = CBOR_INV_ADDNL_INFO;
    69e2:	60eb      	str	r3, [r5, #12]
           return CBOR_ERR;
    69e4:	4264      	negs	r4, r4
        }
        memcpy(cbuf->next, &val, addnlBytes);
        cbuf->next += addnlBytes;
    }
    return CBOR_OK;
}
    69e6:	0020      	movs	r0, r4
    69e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *addnl_info = CBOR_ADDL_BYTE_UINT8;
    69ea:	2318      	movs	r3, #24
        retbytes = SIZE_UINT8;
    69ec:	2401      	movs	r4, #1
    69ee:	e7f1      	b.n	69d4 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
        *addnl_info = CBOR_ADDL_BYTE_UINT32;
    69f0:	231a      	movs	r3, #26
        retbytes = SIZE_UINT;
    69f2:	2404      	movs	r4, #4
    69f4:	e7ee      	b.n	69d4 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    *cbuf->next++ = major_type | additionalInfo;
    69f6:	4660      	mov	r0, ip
    69f8:	1c4f      	adds	r7, r1, #1
    69fa:	4318      	orrs	r0, r3
    69fc:	60af      	str	r7, [r5, #8]
    69fe:	7008      	strb	r0, [r1, #0]
    if (addnlBytes) {
    6a00:	2c00      	cmp	r4, #0
    6a02:	d0f0      	beq.n	69e6 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
        switch(addnlBytes) {
    6a04:	2c02      	cmp	r4, #2
    6a06:	d00e      	beq.n	6a26 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x7a>
    6a08:	2c04      	cmp	r4, #4
    6a0a:	d015      	beq.n	6a38 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x8c>
           cbuf->err = CBOR_INV_ADDNL_INFO;
    6a0c:	2308      	movs	r3, #8
        switch(addnlBytes) {
    6a0e:	2c01      	cmp	r4, #1
    6a10:	d1e6      	bne.n	69e0 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x34>
        memcpy(cbuf->next, &val, addnlBytes);
    6a12:	0022      	movs	r2, r4
    6a14:	a901      	add	r1, sp, #4
    6a16:	68a8      	ldr	r0, [r5, #8]
    6a18:	f004 fa26 	bl	ae68 <memcpy>
        cbuf->next += addnlBytes;
    6a1c:	68ab      	ldr	r3, [r5, #8]
    6a1e:	191c      	adds	r4, r3, r4
    6a20:	60ac      	str	r4, [r5, #8]
    return CBOR_OK;
    6a22:	2400      	movs	r4, #0
    6a24:	e7df      	b.n	69e6 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
            val = htons(val);
    6a26:	4906      	ldr	r1, [pc, #24]	; (6a40 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x94>)
    6a28:	0213      	lsls	r3, r2, #8
    6a2a:	b292      	uxth	r2, r2
    6a2c:	400b      	ands	r3, r1
    6a2e:	0a12      	lsrs	r2, r2, #8
    6a30:	431a      	orrs	r2, r3
    6a32:	b292      	uxth	r2, r2
    6a34:	9201      	str	r2, [sp, #4]
            break;
    6a36:	e7ec      	b.n	6a12 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
            val = htonl(val);
    6a38:	9601      	str	r6, [sp, #4]
            break;
    6a3a:	e7ea      	b.n	6a12 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
    6a3c:	0000feff 	.word	0x0000feff
    6a40:	00ffff00 	.word	0x00ffff00

00006a44 <_Z13cbor_enc_initP8cbor_bufPvi>:
{
    6a44:	b570      	push	{r4, r5, r6, lr}
    6a46:	0005      	movs	r5, r0
    6a48:	000c      	movs	r4, r1
    6a4a:	0016      	movs	r6, r2
    memset(cbuf, 0, sizeof(struct cbor_buf));
    6a4c:	2100      	movs	r1, #0
    6a4e:	2210      	movs	r2, #16
    6a50:	f004 fa25 	bl	ae9e <memset>
    cbuf->head = (uint8_t*)buf;
    6a54:	602c      	str	r4, [r5, #0]
    cbuf->next = (uint8_t*)buf;
    6a56:	60ac      	str	r4, [r5, #8]
    cbuf->tail = cbuf->head + len;
    6a58:	19a4      	adds	r4, r4, r6
    6a5a:	606c      	str	r4, [r5, #4]
}
    6a5c:	bd70      	pop	{r4, r5, r6, pc}

00006a5e <_Z16cbor_buf_get_lenP8cbor_buf>:
    return cbuf->next - cbuf->head;
    6a5e:	6883      	ldr	r3, [r0, #8]
    6a60:	6800      	ldr	r0, [r0, #0]
    6a62:	1a18      	subs	r0, r3, r0
}
    6a64:	4770      	bx	lr

00006a66 <_Z12cbor_enc_intP8cbor_bufi>:
 *         Error (negative values)
 */
int
cbor_enc_int(struct cbor_buf *cbuf, int val)
{
    uint8_t major_type = CBOR_TYPE_UINT;
    6a66:	2300      	movs	r3, #0
{
    6a68:	b510      	push	{r4, lr}
    6a6a:	000a      	movs	r2, r1

    if (val < 0) {
    6a6c:	4299      	cmp	r1, r3
    6a6e:	da01      	bge.n	6a74 <_Z12cbor_enc_intP8cbor_bufi+0xe>
        val = -1 - val;
    6a70:	43ca      	mvns	r2, r1
        major_type = CBOR_TYPE_NINT;
    6a72:	3320      	adds	r3, #32
    }

    return (cbor_enc_length(major_type, cbuf, val));
    6a74:	0001      	movs	r1, r0
    6a76:	0018      	movs	r0, r3
    6a78:	f7ff ff98 	bl	69ac <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    6a7c:	bd10      	pop	{r4, pc}

00006a7e <_Z13cbor_enc_textP8cbor_bufPKci>:
 * output: status of encode operation.
 */
int
cbor_enc_text(struct cbor_buf *cbuf,
                const char *inp_string, int len)
{
    6a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a80:	0004      	movs	r4, r0
    6a82:	000f      	movs	r7, r1
    int rc = CBOR_OK;
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    6a84:	0001      	movs	r1, r0
    6a86:	2060      	movs	r0, #96	; 0x60
{
    6a88:	0015      	movs	r5, r2
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    6a8a:	f7ff ff8f 	bl	69ac <_ZL15cbor_enc_lengthhP8cbor_bufm>
    6a8e:	1e06      	subs	r6, r0, #0

    if (!rc) {
    6a90:	d107      	bne.n	6aa2 <_Z13cbor_enc_textP8cbor_bufPKci+0x24>
        if (len > (cbuf->tail - cbuf->next)) {
    6a92:	68a0      	ldr	r0, [r4, #8]
    6a94:	6863      	ldr	r3, [r4, #4]
    6a96:	1a1b      	subs	r3, r3, r0
    6a98:	429d      	cmp	r5, r3
    6a9a:	dd04      	ble.n	6aa6 <_Z13cbor_enc_textP8cbor_bufPKci+0x28>
            cbuf->err = CBOR_NO_MEM;
    6a9c:	2301      	movs	r3, #1
            rc = CBOR_ERR;
    6a9e:	3e01      	subs	r6, #1
            cbuf->err = CBOR_NO_MEM;
    6aa0:	60e3      	str	r3, [r4, #12]
            memcpy(cbuf->next, inp_string, len);
            cbuf->next += len;
        }
    }
    return rc;
}
    6aa2:	0030      	movs	r0, r6
    6aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            memcpy(cbuf->next, inp_string, len);
    6aa6:	002a      	movs	r2, r5
    6aa8:	0039      	movs	r1, r7
    6aaa:	f004 f9dd 	bl	ae68 <memcpy>
            cbuf->next += len;
    6aae:	68a3      	ldr	r3, [r4, #8]
    6ab0:	195d      	adds	r5, r3, r5
    6ab2:	60a5      	str	r5, [r4, #8]
    return rc;
    6ab4:	e7f5      	b.n	6aa2 <_Z13cbor_enc_textP8cbor_bufPKci+0x24>

00006ab6 <_Z12cbor_enc_mapP8cbor_bufi>:
 *        num_elements -> number of elements in the map
 * output: status of encode operation.
 */
int
cbor_enc_map(struct cbor_buf *cbuf, int num_elements)
{
    6ab6:	b510      	push	{r4, lr}
    6ab8:	000a      	movs	r2, r1
    return(cbor_enc_length(CBOR_TYPE_MAP, cbuf, num_elements));
    6aba:	0001      	movs	r1, r0
    6abc:	20a0      	movs	r0, #160	; 0xa0
    6abe:	f7ff ff75 	bl	69ac <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    6ac2:	bd10      	pop	{r4, pc}

00006ac4 <_Z13co_uint32_h2nPK5optlv.part.1>:
    return b;
}


uint32_t
co_uint32_h2n(const struct optlv *o)
    6ac4:	6843      	ldr	r3, [r0, #4]
    case 4: b = htonl(*(uint32_t *)(o->ov));
            break;
    }

    return b;
}
    6ac6:	6818      	ldr	r0, [r3, #0]
    6ac8:	ba00      	rev	r0, r0
    6aca:	4770      	bx	lr

00006acc <_Z15coap_opt_strcmpPK5optlvPKc>:
{
    6acc:	b570      	push	{r4, r5, r6, lr}
    6ace:	0003      	movs	r3, r0
    6ad0:	000c      	movs	r4, r1
        return 1;
    6ad2:	2001      	movs	r0, #1
    if (!str) {
    6ad4:	2900      	cmp	r1, #0
    6ad6:	d00a      	beq.n	6aee <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
    diff = strncmp((char*)opt->ov, str, opt->ol);  /* option is not NUL terminated */
    6ad8:	885d      	ldrh	r5, [r3, #2]
    6ada:	6858      	ldr	r0, [r3, #4]
    6adc:	002a      	movs	r2, r5
    6ade:	f005 fafd 	bl	c0dc <strncmp>
    if (diff) {
    6ae2:	2800      	cmp	r0, #0
    6ae4:	d103      	bne.n	6aee <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
        return (opt->ol - strlen(str));
    6ae6:	0020      	movs	r0, r4
    6ae8:	f005 faf1 	bl	c0ce <strlen>
    6aec:	1a28      	subs	r0, r5, r0
}
    6aee:	bd70      	pop	{r4, r5, r6, pc}

00006af0 <_Z13co_uint32_n2hPK5optlv>:
{
    6af0:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    6af2:	8842      	ldrh	r2, [r0, #2]
{
    6af4:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    6af6:	2a04      	cmp	r2, #4
    6af8:	d906      	bls.n	6b08 <_Z13co_uint32_n2hPK5optlv+0x18>
    6afa:	2120      	movs	r1, #32
    6afc:	4b14      	ldr	r3, [pc, #80]	; (6b50 <_Z13co_uint32_n2hPK5optlv+0x60>)
    6afe:	4a15      	ldr	r2, [pc, #84]	; (6b54 <_Z13co_uint32_n2hPK5optlv+0x64>)
    6b00:	31ff      	adds	r1, #255	; 0xff
    6b02:	4815      	ldr	r0, [pc, #84]	; (6b58 <_Z13co_uint32_n2hPK5optlv+0x68>)
    6b04:	f004 f842 	bl	ab8c <__assert_func>
    switch (o->ol) {
    6b08:	3a01      	subs	r2, #1
    uint32_t b = 0;
    6b0a:	2000      	movs	r0, #0
    switch (o->ol) {
    6b0c:	2a03      	cmp	r2, #3
    6b0e:	d806      	bhi.n	6b1e <_Z13co_uint32_n2hPK5optlv+0x2e>
    6b10:	0010      	movs	r0, r2
    6b12:	f001 f85f 	bl	7bd4 <__gnu_thumb1_case_uqi>
    6b16:	0502      	.short	0x0502
    6b18:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    6b1a:	685b      	ldr	r3, [r3, #4]
    6b1c:	7818      	ldrb	r0, [r3, #0]
}
    6b1e:	bd10      	pop	{r4, pc}
    case 2: b = ntohs(*(uint16_t *)(o->ov));
    6b20:	685b      	ldr	r3, [r3, #4]
    6b22:	881b      	ldrh	r3, [r3, #0]
    6b24:	0a18      	lsrs	r0, r3, #8
    6b26:	021b      	lsls	r3, r3, #8
    6b28:	4318      	orrs	r0, r3
    6b2a:	b280      	uxth	r0, r0
            break;
    6b2c:	e7f7      	b.n	6b1e <_Z13co_uint32_n2hPK5optlv+0x2e>
    case 3: b = ntohl(*(uint32_t *)(o->ov) << 8);
    6b2e:	685b      	ldr	r3, [r3, #4]
    6b30:	490a      	ldr	r1, [pc, #40]	; (6b5c <_Z13co_uint32_n2hPK5optlv+0x6c>)
    6b32:	681b      	ldr	r3, [r3, #0]
    6b34:	0218      	lsls	r0, r3, #8
    6b36:	041a      	lsls	r2, r3, #16
    6b38:	400a      	ands	r2, r1
    6b3a:	0e00      	lsrs	r0, r0, #24
    6b3c:	4310      	orrs	r0, r2
    6b3e:	22ff      	movs	r2, #255	; 0xff
    6b40:	0212      	lsls	r2, r2, #8
    6b42:	4013      	ands	r3, r2
    6b44:	4318      	orrs	r0, r3
            break;
    6b46:	e7ea      	b.n	6b1e <_Z13co_uint32_n2hPK5optlv+0x2e>
    6b48:	0018      	movs	r0, r3
    6b4a:	f7ff ffbb 	bl	6ac4 <_Z13co_uint32_h2nPK5optlv.part.1>
    6b4e:	e7e6      	b.n	6b1e <_Z13co_uint32_n2hPK5optlv+0x2e>
    6b50:	0000f540 	.word	0x0000f540
    6b54:	0000f588 	.word	0x0000f588
    6b58:	0000f55a 	.word	0x0000f55a
    6b5c:	00ffff00 	.word	0x00ffff00

00006b60 <_Z16coap_set_max_agem>:
 * 
 *
 */ 
void coap_set_max_age( uint32_t max_age )
{
	coap_max_age_in_seconds = max_age;
    6b60:	4b01      	ldr	r3, [pc, #4]	; (6b68 <_Z16coap_set_max_agem+0x8>)
    6b62:	6018      	str	r0, [r3, #0]
	
} // coap_set_max_age
    6b64:	4770      	bx	lr
    6b66:	46c0      	nop			; (mov r8, r8)
    6b68:	20000d6c 	.word	0x20000d6c

00006b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>:
 *
 * @return: The next option (as optlv) in the list, or NULL if no more.
 */
struct optlv *
copt_get_next_opt_type(const struct sl_co *hd, uint16_t ot, void **it)
{
    6b6c:	b507      	push	{r0, r1, r2, lr}
    struct optlv *opt;
    coap_opt **ppco = (coap_opt **)it;
    coap_opt *pco;

    assert(hd);
    6b6e:	2800      	cmp	r0, #0
    6b70:	d106      	bne.n	6b80 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x14>
    6b72:	2183      	movs	r1, #131	; 0x83
    6b74:	4b0e      	ldr	r3, [pc, #56]	; (6bb0 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x44>)
    6b76:	4a0f      	ldr	r2, [pc, #60]	; (6bb4 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x48>)
    6b78:	0049      	lsls	r1, r1, #1
    6b7a:	480f      	ldr	r0, [pc, #60]	; (6bb8 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x4c>)
    6b7c:	f004 f806 	bl	ab8c <__assert_func>
    pco = SLIST_FIRST(hd);
    6b80:	6800      	ldr	r0, [r0, #0]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
        ppco = &pco;
    6b82:	ab01      	add	r3, sp, #4
    pco = SLIST_FIRST(hd);
    6b84:	9001      	str	r0, [sp, #4]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
    6b86:	2a00      	cmp	r2, #0
    6b88:	d004      	beq.n	6b94 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
    } else if (!*ppco) {
    6b8a:	6813      	ldr	r3, [r2, #0]
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	d10a      	bne.n	6ba6 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x3a>
        *ppco = SLIST_FIRST(hd);
    6b90:	6010      	str	r0, [r2, #0]
    } else {
        *ppco = SLIST_NEXT(*ppco, nxt);
    6b92:	0013      	movs	r3, r2
    }
    while (*ppco) {
    6b94:	6818      	ldr	r0, [r3, #0]
    6b96:	2800      	cmp	r0, #0
    6b98:	d008      	beq.n	6bac <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
        if ((*ppco)->o.ot == ot) {
    6b9a:	8802      	ldrh	r2, [r0, #0]
    6b9c:	428a      	cmp	r2, r1
    6b9e:	d005      	beq.n	6bac <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
            break;
        }
        *ppco = SLIST_NEXT(*ppco, nxt);
    6ba0:	6882      	ldr	r2, [r0, #8]
    6ba2:	601a      	str	r2, [r3, #0]
    while (*ppco) {
    6ba4:	e7f6      	b.n	6b94 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
        *ppco = SLIST_NEXT(*ppco, nxt);
    6ba6:	689b      	ldr	r3, [r3, #8]
    6ba8:	6013      	str	r3, [r2, #0]
    6baa:	e7f2      	b.n	6b92 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x26>
        opt = &((*ppco)->o);
    } else {
        opt = NULL;
    }
    return opt;
}
    6bac:	bd0e      	pop	{r1, r2, r3, pc}
    6bae:	46c0      	nop			; (mov r8, r8)
    6bb0:	0000f5d6 	.word	0x0000f5d6
    6bb4:	0000f633 	.word	0x0000f633
    6bb8:	0000f5d9 	.word	0x0000f5d9

00006bbc <_Z17copt_del_opt_typeP5sl_cot>:
 *
 * @return: 0 if anything deleted.
 */
error_t
copt_del_opt_type(struct sl_co *hd, uint16_t ot)
{
    6bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bbe:	0004      	movs	r4, r0
    6bc0:	000f      	movs	r7, r1
    error_t rc = ERR_NO_ENTRY;
    assert(hd);
    6bc2:	2800      	cmp	r0, #0
    6bc4:	d106      	bne.n	6bd4 <_Z17copt_del_opt_typeP5sl_cot+0x18>
    6bc6:	214c      	movs	r1, #76	; 0x4c
    6bc8:	4b12      	ldr	r3, [pc, #72]	; (6c14 <_Z17copt_del_opt_typeP5sl_cot+0x58>)
    6bca:	4a13      	ldr	r2, [pc, #76]	; (6c18 <_Z17copt_del_opt_typeP5sl_cot+0x5c>)
    6bcc:	31ff      	adds	r1, #255	; 0xff
    6bce:	4813      	ldr	r0, [pc, #76]	; (6c1c <_Z17copt_del_opt_typeP5sl_cot+0x60>)
    6bd0:	f003 ffdc 	bl	ab8c <__assert_func>
    error_t rc = ERR_NO_ENTRY;
    6bd4:	250c      	movs	r5, #12
    coap_opt *o, *tmp;

    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    6bd6:	6800      	ldr	r0, [r0, #0]
    6bd8:	2800      	cmp	r0, #0
    6bda:	d012      	beq.n	6c02 <_Z17copt_del_opt_typeP5sl_cot+0x46>
        if (o->o.ot == ot) {
    6bdc:	8803      	ldrh	r3, [r0, #0]
    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    6bde:	6886      	ldr	r6, [r0, #8]
        if (o->o.ot == ot) {
    6be0:	42bb      	cmp	r3, r7
    6be2:	d106      	bne.n	6bf2 <_Z17copt_del_opt_typeP5sl_cot+0x36>
            rc = ERR_OK;
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    6be4:	6823      	ldr	r3, [r4, #0]
    6be6:	4298      	cmp	r0, r3
    6be8:	d106      	bne.n	6bf8 <_Z17copt_del_opt_typeP5sl_cot+0x3c>
    6bea:	6026      	str	r6, [r4, #0]
        free(co);
    6bec:	f004 f920 	bl	ae30 <free>
            rc = ERR_OK;
    6bf0:	2500      	movs	r5, #0
    6bf2:	0030      	movs	r0, r6
    6bf4:	e7f0      	b.n	6bd8 <_Z17copt_del_opt_typeP5sl_cot+0x1c>
    6bf6:	0013      	movs	r3, r2
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    6bf8:	689a      	ldr	r2, [r3, #8]
    6bfa:	4290      	cmp	r0, r2
    6bfc:	d1fb      	bne.n	6bf6 <_Z17copt_del_opt_typeP5sl_cot+0x3a>
    6bfe:	609e      	str	r6, [r3, #8]
    6c00:	e7f4      	b.n	6bec <_Z17copt_del_opt_typeP5sl_cot+0x30>
            copt_dealloc(o);
        }
    }

    if (rc) {
    6c02:	2d00      	cmp	r5, #0
    6c04:	d004      	beq.n	6c10 <_Z17copt_del_opt_typeP5sl_cot+0x54>
        dlog(LOG_DEBUG, "Didn't find option %d to delete.", ot);
    6c06:	003a      	movs	r2, r7
    6c08:	4905      	ldr	r1, [pc, #20]	; (6c20 <_Z17copt_del_opt_typeP5sl_cot+0x64>)
    6c0a:	2007      	movs	r0, #7
    6c0c:	f7fd fb04 	bl	4218 <_Z4dlogiPKcz>
    }

    return rc;
}
    6c10:	0028      	movs	r0, r5
    6c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c14:	0000f5d6 	.word	0x0000f5d6
    6c18:	0000f607 	.word	0x0000f607
    6c1c:	0000f5d9 	.word	0x0000f5d9
    6c20:	0000f5b5 	.word	0x0000f5b5

00006c24 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>:



// This function assembles an URI and sets the function used to read a sensor
uint8_t set_observer_sapi(const char *sensor_type, ObsFuncPtr p, uint32_t frequency, uint8_t sensor_id)
{
    6c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Assemble the full resource URI; e.g. "/arduino/temp". Link to master observe table.
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    6c26:	2434      	movs	r4, #52	; 0x34
{
    6c28:	4684      	mov	ip, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    6c2a:	4d11      	ldr	r5, [pc, #68]	; (6c70 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x4c>)
    6c2c:	4e11      	ldr	r6, [pc, #68]	; (6c74 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x50>)
    6c2e:	7828      	ldrb	r0, [r5, #0]
{
    6c30:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    6c32:	4360      	muls	r0, r4
{
    6c34:	9200      	str	r2, [sp, #0]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    6c36:	4910      	ldr	r1, [pc, #64]	; (6c78 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x54>)
    6c38:	4662      	mov	r2, ip
    6c3a:	1830      	adds	r0, r6, r0
{
    6c3c:	9301      	str	r3, [sp, #4]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    6c3e:	f005 fa05 	bl	c04c <siprintf>
	
	observe_info[observe_info_index].pObsFunc = p;
    6c42:	782b      	ldrb	r3, [r5, #0]
	observe_info[observe_info_index].frequency = frequency;
	observe_info[observe_info_index].sensor_id = sensor_id;
    6c44:	466a      	mov	r2, sp
	observe_info[observe_info_index].pObsFunc = p;
    6c46:	435c      	muls	r4, r3
	observe_info[observe_info_index].frequency = frequency;
    6c48:	9b00      	ldr	r3, [sp, #0]
	observe_info[observe_info_index].pObsFunc = p;
    6c4a:	1936      	adds	r6, r6, r4
	observe_info[observe_info_index].frequency = frequency;
    6c4c:	62b3      	str	r3, [r6, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = sensor_id;
    6c4e:	0033      	movs	r3, r6
    6c50:	7912      	ldrb	r2, [r2, #4]
    6c52:	3331      	adds	r3, #49	; 0x31
    6c54:	701a      	strb	r2, [r3, #0]
	observe_info[observe_info_index].obs_flag = 0;
    6c56:	0032      	movs	r2, r6
    6c58:	2300      	movs	r3, #0
    6c5a:	3230      	adds	r2, #48	; 0x30
	observe_info[observe_info_index].pObsFunc = p;
    6c5c:	6237      	str	r7, [r6, #32]
	observe_info[observe_info_index].ack_seqno = 0;
    6c5e:	62f3      	str	r3, [r6, #44]	; 0x2c
	observe_info[observe_info_index].obs_flag = 0;
    6c60:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    6c62:	f7fd fa41 	bl	40e8 <_Z13get_rtc_epochv>
    6c66:	6270      	str	r0, [r6, #36]	; 0x24
	
	return observe_info_index++;
    6c68:	7828      	ldrb	r0, [r5, #0]
    6c6a:	1c43      	adds	r3, r0, #1
    6c6c:	702b      	strb	r3, [r5, #0]
}
    6c6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6c70:	20000d70 	.word	0x20000d70
    6c74:	20000d74 	.word	0x20000d74
    6c78:	0000f671 	.word	0x0000f671

00006c7c <_Z12set_observerPKcPF7error_eP4mbufPhhE>:


// This function assembles an URI and sets the function used to read a sensor.
// Supports backward compatibility.
void set_observer( const char *uri_rsrc_name, ObsFuncPtr p )
{
    6c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Assemble the full resource URI; e.g. "/arduino/temp". Link to master observe table.
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    6c7e:	2534      	movs	r5, #52	; 0x34
    6c80:	4c0d      	ldr	r4, [pc, #52]	; (6cb8 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x3c>)
    6c82:	4e0e      	ldr	r6, [pc, #56]	; (6cbc <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x40>)
    6c84:	7823      	ldrb	r3, [r4, #0]
{
    6c86:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    6c88:	436b      	muls	r3, r5
{
    6c8a:	0002      	movs	r2, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    6c8c:	490c      	ldr	r1, [pc, #48]	; (6cc0 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x44>)
    6c8e:	18f0      	adds	r0, r6, r3
    6c90:	f005 f9dc 	bl	c04c <siprintf>
	
	observe_info[observe_info_index].pObsFunc = p;
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    6c94:	233c      	movs	r3, #60	; 0x3c
	observe_info[observe_info_index].pObsFunc = p;
    6c96:	7824      	ldrb	r4, [r4, #0]
    6c98:	436c      	muls	r4, r5
    6c9a:	1934      	adds	r4, r6, r4
	observe_info[observe_info_index].sensor_id = 0;
    6c9c:	0022      	movs	r2, r4
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    6c9e:	62a3      	str	r3, [r4, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = 0;
    6ca0:	2300      	movs	r3, #0
    6ca2:	3231      	adds	r2, #49	; 0x31
    6ca4:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].obs_flag = 0;
    6ca6:	3a01      	subs	r2, #1
	observe_info[observe_info_index].pObsFunc = p;
    6ca8:	6227      	str	r7, [r4, #32]
	observe_info[observe_info_index].obs_flag = 0;
    6caa:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].ack_seqno = 0;
    6cac:	62e3      	str	r3, [r4, #44]	; 0x2c
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    6cae:	f7fd fa1b 	bl	40e8 <_Z13get_rtc_epochv>
    6cb2:	6260      	str	r0, [r4, #36]	; 0x24
	
	// Set the pointer to the Observe function
	//pObsFunc = p;
	
	//base_epoch = get_rtc_epoch();
}
    6cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6cb6:	46c0      	nop			; (mov r8, r8)
    6cb8:	20000d70 	.word	0x20000d70
    6cbc:	20000d74 	.word	0x20000d74
    6cc0:	0000f671 	.word	0x0000f671

00006cc4 <_Z17coap_obs_reg_sapih>:
} // do_observe


// Register for Observe used by SAPI handlers.
error_t coap_obs_reg_sapi(uint8_t observer_id)
{
    6cc4:	b510      	push	{r4, lr}
    6cc6:	0004      	movs	r4, r0
	// Record the minute that we turn on Observe
	// Make sure we don't send Observe response more than once per minute
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    6cc8:	f7fd fa0e 	bl	40e8 <_Z13get_rtc_epochv>
    6ccc:	2334      	movs	r3, #52	; 0x34
    6cce:	435c      	muls	r4, r3
    6cd0:	4b05      	ldr	r3, [pc, #20]	; (6ce8 <_Z17coap_obs_reg_sapih+0x24>)
	
	// Flag that we are doing Observe
	observe_info[observer_id].obs_flag = 1;
    6cd2:	2101      	movs	r1, #1
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    6cd4:	191b      	adds	r3, r3, r4
	observe_info[observer_id].obs_flag = 1;
    6cd6:	001a      	movs	r2, r3
    6cd8:	3230      	adds	r2, #48	; 0x30
    6cda:	7011      	strb	r1, [r2, #0]
	
	// Set start sequence number (must be non-zero)
	observe_info[observer_id].ack_seqno = 10;
    6cdc:	220a      	movs	r2, #10
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    6cde:	6258      	str	r0, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 10;
    6ce0:	62da      	str	r2, [r3, #44]	; 0x2c
	// Set mNIC wake-up pin to HIGH, so that we can toggle it 0 -> 1
	//pinMode(MNIC_WAKEUP_PIN,OUTPUT);
	//digitalWrite(MNIC_WAKEUP_PIN,HIGH);

	return ERR_OK;
}
    6ce2:	2000      	movs	r0, #0
    6ce4:	bd10      	pop	{r4, pc}
    6ce6:	46c0      	nop			; (mov r8, r8)
    6ce8:	20000d74 	.word	0x20000d74

00006cec <_Z19coap_obs_dereg_sapih>:

// Register for Observe used by SAPI handlers.
error_t coap_obs_dereg_sapi(uint8_t observer_id)
{
	// Flag that we are not doing Observe
	observe_info[observer_id].obs_flag = 0;
    6cec:	2134      	movs	r1, #52	; 0x34
    6cee:	4341      	muls	r1, r0
    6cf0:	4b07      	ldr	r3, [pc, #28]	; (6d10 <_Z19coap_obs_dereg_sapih+0x24>)
{
    6cf2:	b510      	push	{r4, lr}
	observe_info[observer_id].obs_flag = 0;
    6cf4:	185b      	adds	r3, r3, r1
    6cf6:	0019      	movs	r1, r3
    6cf8:	2400      	movs	r4, #0
    6cfa:	3130      	adds	r1, #48	; 0x30
{
    6cfc:	0002      	movs	r2, r0
	observe_info[observer_id].obs_flag = 0;
    6cfe:	700c      	strb	r4, [r1, #0]
	observe_info[observer_id].base_epoch = 0;
    6d00:	625c      	str	r4, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 0;
    6d02:	62dc      	str	r4, [r3, #44]	; 0x2c

	dlog(LOG_DEBUG, "De-register Observe: %d", observer_id);
    6d04:	4903      	ldr	r1, [pc, #12]	; (6d14 <_Z19coap_obs_dereg_sapih+0x28>)
    6d06:	2007      	movs	r0, #7
    6d08:	f7fd fa86 	bl	4218 <_Z4dlogiPKcz>
	return ERR_OK;

}
    6d0c:	0020      	movs	r0, r4
    6d0e:	bd10      	pop	{r4, pc}
    6d10:	20000d74 	.word	0x20000d74
    6d14:	0000f67d 	.word	0x0000f67d

00006d18 <_ZL8crsystemP12coap_msg_ctxS0_>:
}


// The "sys" dispatcher.
static error_t crsystem(struct coap_msg_ctx *req, struct coap_msg_ctx *rsp)
{
    6d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    struct optlv *o;
    void *it = NULL;
	
    /* No observes on system */
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6d1a:	0006      	movs	r6, r0
    void *it = NULL;
    6d1c:	2200      	movs	r2, #0
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6d1e:	364c      	adds	r6, #76	; 0x4c
{
    6d20:	b087      	sub	sp, #28
    6d22:	0005      	movs	r5, r0
    6d24:	000c      	movs	r4, r1
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6d26:	0030      	movs	r0, r6
    6d28:	2106      	movs	r1, #6
    void *it = NULL;
    6d2a:	9203      	str	r2, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6d2c:	f7ff ff1e 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6d30:	2800      	cmp	r0, #0
    6d32:	d004      	beq.n	6d3e <_ZL8crsystemP12coap_msg_ctxS0_+0x26>
	{
        copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    6d34:	0020      	movs	r0, r4
    6d36:	2106      	movs	r1, #6
    6d38:	304c      	adds	r0, #76	; 0x4c
    6d3a:	f7ff ff3f 	bl	6bbc <_Z17copt_del_opt_typeP5sl_cot>
    }
    /* 
     * No URI path beyond /system, except /time and /stats is supported, so
     * reject if present. 
     */
    copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    6d3e:	aa03      	add	r2, sp, #12
    6d40:	210b      	movs	r1, #11
    6d42:	0030      	movs	r0, r6
    6d44:	f7ff ff12 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	
    if ((o = copt_get_next_opt_type((const sl_co*) &(req->oh), COAP_OPTION_URI_PATH, &it)))
    6d48:	aa03      	add	r2, sp, #12
    6d4a:	210b      	movs	r1, #11
    6d4c:	0030      	movs	r0, r6
    6d4e:	f7ff ff0d 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6d52:	1e07      	subs	r7, r0, #0
    6d54:	d100      	bne.n	6d58 <_ZL8crsystemP12coap_msg_ctxS0_+0x40>
    6d56:	e094      	b.n	6e82 <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
	{
        if (!coap_opt_strcmp(o, S_TIME_URI))
    6d58:	4981      	ldr	r1, [pc, #516]	; (6f60 <_ZL8crsystemP12coap_msg_ctxS0_+0x248>)
    6d5a:	f7ff feb7 	bl	6acc <_Z15coap_opt_strcmpPK5optlvPKc>
    6d5e:	9001      	str	r0, [sp, #4]
    6d60:	2800      	cmp	r0, #0
    6d62:	d000      	beq.n	6d66 <_ZL8crsystemP12coap_msg_ctxS0_+0x4e>
    6d64:	e07e      	b.n	6e64 <_ZL8crsystemP12coap_msg_ctxS0_+0x14c>
    6d66:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)))
    6d68:	0030      	movs	r0, r6
    6d6a:	aa04      	add	r2, sp, #16
    6d6c:	210b      	movs	r1, #11
    6d6e:	9304      	str	r3, [sp, #16]
    6d70:	f7ff fefc 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6d74:	1e06      	subs	r6, r0, #0
    6d76:	d005      	beq.n	6d84 <_ZL8crsystemP12coap_msg_ctxS0_+0x6c>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    6d78:	2384      	movs	r3, #132	; 0x84
    6d7a:	70a3      	strb	r3, [r4, #2]
        rsp->plen = 0;
    6d7c:	9b01      	ldr	r3, [sp, #4]
    6d7e:	6423      	str	r3, [r4, #64]	; 0x40
    return ERR_OK;
    6d80:	2500      	movs	r5, #0
    6d82:	e017      	b.n	6db4 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    if (req->code == COAP_REQUEST_GET)
    6d84:	78ab      	ldrb	r3, [r5, #2]
    6d86:	2b01      	cmp	r3, #1
    6d88:	d124      	bne.n	6dd4 <_ZL8crsystemP12coap_msg_ctxS0_+0xbc>
		now = get_rtc_epoch();
    6d8a:	f7fd f9ad 	bl	40e8 <_Z13get_rtc_epochv>
    6d8e:	0005      	movs	r5, r0
		dlog(LOG_DEBUG, "Epoch for GET of sys time: %08x", now);
    6d90:	0002      	movs	r2, r0
    6d92:	4974      	ldr	r1, [pc, #464]	; (6f64 <_ZL8crsystemP12coap_msg_ctxS0_+0x24c>)
    6d94:	2007      	movs	r0, #7
    6d96:	f7fd fa3f 	bl	4218 <_Z4dlogiPKcz>
    6d9a:	ba2d      	rev	r5, r5
        d = m_append(rsp->msg, len);
    6d9c:	2104      	movs	r1, #4
    6d9e:	6d20      	ldr	r0, [r4, #80]	; 0x50
        now = htonl(now);
    6da0:	9505      	str	r5, [sp, #20]
        d = m_append(rsp->msg, len);
    6da2:	f000 fa9b 	bl	72dc <_Z8m_appendP4mbufs>
        if (!d)
    6da6:	2800      	cmp	r0, #0
    6da8:	d107      	bne.n	6dba <_ZL8crsystemP12coap_msg_ctxS0_+0xa2>
            return ERR_NO_MEM;
    6daa:	2503      	movs	r5, #3
            coap_stats.no_mbufs++;
    6dac:	4a6e      	ldr	r2, [pc, #440]	; (6f68 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    6dae:	6813      	ldr	r3, [r2, #0]
    6db0:	3301      	adds	r3, #1
    6db2:	6013      	str	r3, [r2, #0]
    }

    rsp->plen = 0;

    return ERR_OK;
}
    6db4:	0028      	movs	r0, r5
    6db6:	b007      	add	sp, #28
    6db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(d, &now, len);
    6dba:	2504      	movs	r5, #4
    6dbc:	a905      	add	r1, sp, #20
    6dbe:	002a      	movs	r2, r5
    6dc0:	f004 f852 	bl	ae68 <memcpy>
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    6dc4:	0023      	movs	r3, r4
    6dc6:	222a      	movs	r2, #42	; 0x2a
    6dc8:	333c      	adds	r3, #60	; 0x3c
        rsp->plen = len;
    6dca:	6425      	str	r5, [r4, #64]	; 0x40
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    6dcc:	701a      	strb	r2, [r3, #0]
        rsp->code = COAP_RSP_205_CONTENT;
    6dce:	2345      	movs	r3, #69	; 0x45
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    6dd0:	70a3      	strb	r3, [r4, #2]
    6dd2:	e7d5      	b.n	6d80 <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
	else if (req->code == COAP_REQUEST_PUT)
    6dd4:	2b03      	cmp	r3, #3
    6dd6:	d141      	bne.n	6e5c <_ZL8crsystemP12coap_msg_ctxS0_+0x144>
        m_adj(req->msg, req->hdrlen);
    6dd8:	6969      	ldr	r1, [r5, #20]
    6dda:	6d28      	ldr	r0, [r5, #80]	; 0x50
    6ddc:	f000 fa8e 	bl	72fc <_Z5m_adjP4mbufi>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    6de0:	6d2f      	ldr	r7, [r5, #80]	; 0x50
        if ((req->msg->m_pktlen == 0) || ((td->tl.u.rdt != crdt_time_abs) && (td->tl.u.rdt != crdt_time_delta)) || 
    6de2:	883b      	ldrh	r3, [r7, #0]
    6de4:	2b00      	cmp	r3, #0
    6de6:	d006      	beq.n	6df6 <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    6de8:	793b      	ldrb	r3, [r7, #4]
    6dea:	1f9a      	subs	r2, r3, #6
    6dec:	2a01      	cmp	r2, #1
    6dee:	d802      	bhi.n	6df6 <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    6df0:	797a      	ldrb	r2, [r7, #5]
    6df2:	2a08      	cmp	r2, #8
    6df4:	d001      	beq.n	6dfa <_ZL8crsystemP12coap_msg_ctxS0_+0xe2>
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    6df6:	2386      	movs	r3, #134	; 0x86
    6df8:	e7ea      	b.n	6dd0 <_ZL8crsystemP12coap_msg_ctxS0_+0xb8>
    return ERR_OK;
    6dfa:	0035      	movs	r5, r6
		else if (td->tl.u.rdt == crdt_time_abs)
    6dfc:	2b06      	cmp	r3, #6
    6dfe:	d1d9      	bne.n	6db4 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    6e00:	1d3a      	adds	r2, r7, #4
			ddump(LOG_DEBUG, "PUT /sys/time Payload", (void *)td, sizeof(coap_sys_time_data_t));
    6e02:	3304      	adds	r3, #4
    6e04:	4959      	ldr	r1, [pc, #356]	; (6f6c <_ZL8crsystemP12coap_msg_ctxS0_+0x254>)
    6e06:	2007      	movs	r0, #7
    6e08:	f7fd fa28 	bl	425c <_Z5ddumpiPKcPKvi>
			epoch = (uint32_t) ntohl(td->sec);
    6e0c:	21ff      	movs	r1, #255	; 0xff
    6e0e:	79fa      	ldrb	r2, [r7, #7]
    6e10:	79bb      	ldrb	r3, [r7, #6]
    6e12:	0212      	lsls	r2, r2, #8
    6e14:	431a      	orrs	r2, r3
    6e16:	7a3b      	ldrb	r3, [r7, #8]
    6e18:	0209      	lsls	r1, r1, #8
    6e1a:	041b      	lsls	r3, r3, #16
    6e1c:	431a      	orrs	r2, r3
    6e1e:	7a7b      	ldrb	r3, [r7, #9]
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    6e20:	2007      	movs	r0, #7
			epoch = (uint32_t) ntohl(td->sec);
    6e22:	061b      	lsls	r3, r3, #24
    6e24:	4313      	orrs	r3, r2
    6e26:	061a      	lsls	r2, r3, #24
    6e28:	0e1e      	lsrs	r6, r3, #24
    6e2a:	4316      	orrs	r6, r2
    6e2c:	0a1a      	lsrs	r2, r3, #8
    6e2e:	400a      	ands	r2, r1
    6e30:	4316      	orrs	r6, r2
    6e32:	22ff      	movs	r2, #255	; 0xff
    6e34:	021b      	lsls	r3, r3, #8
    6e36:	0412      	lsls	r2, r2, #16
    6e38:	4013      	ands	r3, r2
    6e3a:	431e      	orrs	r6, r3
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    6e3c:	0032      	movs	r2, r6
    6e3e:	494c      	ldr	r1, [pc, #304]	; (6f70 <_ZL8crsystemP12coap_msg_ctxS0_+0x258>)
    6e40:	f7fd f9ea 	bl	4218 <_Z4dlogiPKcz>
			rtc.setEpoch(epoch);
    6e44:	0031      	movs	r1, r6
    6e46:	484b      	ldr	r0, [pc, #300]	; (6f74 <_ZL8crsystemP12coap_msg_ctxS0_+0x25c>)
    6e48:	f7fe ffca 	bl	5de0 <_ZN7RTCZero8setEpochEm>
			print_current_date();
    6e4c:	f7fd f990 	bl	4170 <_Z18print_current_datev>
			print_current_time();
    6e50:	f7fd f952 	bl	40f8 <_Z18print_current_timev>
			rsp->code = COAP_RSP_204_CHANGED;
    6e54:	2344      	movs	r3, #68	; 0x44
    6e56:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    6e58:	6425      	str	r5, [r4, #64]	; 0x40
    return ERR_OK;
    6e5a:	e7ab      	b.n	6db4 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6e5c:	23a1      	movs	r3, #161	; 0xa1
        rsp->plen = 0;
    6e5e:	6420      	str	r0, [r4, #64]	; 0x40
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6e60:	70a3      	strb	r3, [r4, #2]
    6e62:	e78d      	b.n	6d80 <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
		else if (!coap_opt_strcmp(o, S_STAT_URI))
    6e64:	4944      	ldr	r1, [pc, #272]	; (6f78 <_ZL8crsystemP12coap_msg_ctxS0_+0x260>)
    6e66:	0038      	movs	r0, r7
    6e68:	f7ff fe30 	bl	6acc <_Z15coap_opt_strcmpPK5optlvPKc>
    6e6c:	2800      	cmp	r0, #0
    6e6e:	d108      	bne.n	6e82 <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
    6e70:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it))) {
    6e72:	aa05      	add	r2, sp, #20
    6e74:	210b      	movs	r1, #11
    6e76:	0030      	movs	r0, r6
    6e78:	9305      	str	r3, [sp, #20]
    6e7a:	f7ff fe77 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6e7e:	1e02      	subs	r2, r0, #0
    6e80:	d001      	beq.n	6e86 <_ZL8crsystemP12coap_msg_ctxS0_+0x16e>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    6e82:	2384      	movs	r3, #132	; 0x84
    6e84:	e04f      	b.n	6f26 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    6e86:	0030      	movs	r0, r6
    6e88:	210f      	movs	r1, #15
    6e8a:	f7ff fe6f 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if (req->code == COAP_REQUEST_GET) {
    6e8e:	78ab      	ldrb	r3, [r5, #2]
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    6e90:	0006      	movs	r6, r0
    if (req->code == COAP_REQUEST_GET) {
    6e92:	2b01      	cmp	r3, #1
    6e94:	d151      	bne.n	6f3a <_ZL8crsystemP12coap_msg_ctxS0_+0x222>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    6e96:	4939      	ldr	r1, [pc, #228]	; (6f7c <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    6e98:	f7ff fe18 	bl	6acc <_Z15coap_opt_strcmpPK5optlvPKc>
    6e9c:	1e05      	subs	r5, r0, #0
    6e9e:	d13b      	bne.n	6f18 <_ZL8crsystemP12coap_msg_ctxS0_+0x200>
    coap_sys_coap_stats_t *d = (coap_sys_coap_stats_t *) m_append(m, sizeof(coap_sys_coap_stats_t));
    6ea0:	2128      	movs	r1, #40	; 0x28
    6ea2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6ea4:	f000 fa1a 	bl	72dc <_Z8m_appendP4mbufs>
    6ea8:	4b2f      	ldr	r3, [pc, #188]	; (6f68 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    if (!d) {
    6eaa:	2800      	cmp	r0, #0
    6eac:	d114      	bne.n	6ed8 <_ZL8crsystemP12coap_msg_ctxS0_+0x1c0>
        coap_stats.no_mbufs++;
    6eae:	681a      	ldr	r2, [r3, #0]
        return ERR_NO_MEM;
    6eb0:	3503      	adds	r5, #3
        coap_stats.no_mbufs++;
    6eb2:	3201      	adds	r2, #1
    6eb4:	601a      	str	r2, [r3, #0]
        dlog(LOG_DEBUG, "GET (status %d) read %d bytes.", rc, len);
    6eb6:	2328      	movs	r3, #40	; 0x28
    6eb8:	002a      	movs	r2, r5
    6eba:	4931      	ldr	r1, [pc, #196]	; (6f80 <_ZL8crsystemP12coap_msg_ctxS0_+0x268>)
    6ebc:	2007      	movs	r0, #7
    6ebe:	f7fd f9ab 	bl	4218 <_Z4dlogiPKcz>
        if (!rc) {
    6ec2:	2d00      	cmp	r5, #0
    6ec4:	d134      	bne.n	6f30 <_ZL8crsystemP12coap_msg_ctxS0_+0x218>
            rsp->plen = len;
    6ec6:	2328      	movs	r3, #40	; 0x28
    6ec8:	6423      	str	r3, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    6eca:	0023      	movs	r3, r4
    6ecc:	222a      	movs	r2, #42	; 0x2a
    6ece:	333c      	adds	r3, #60	; 0x3c
    6ed0:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    6ed2:	2345      	movs	r3, #69	; 0x45
    6ed4:	70a3      	strb	r3, [r4, #2]
    6ed6:	e76d      	b.n	6db4 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    d->tl.u.rdt = crdt_stat_coap;
    6ed8:	2208      	movs	r2, #8
    6eda:	7002      	strb	r2, [r0, #0]
    d->tl.l = sizeof(coap_stats);
    6edc:	321c      	adds	r2, #28
    6ede:	7042      	strb	r2, [r0, #1]
    6ee0:	681a      	ldr	r2, [r3, #0]
    6ee2:	ba12      	rev	r2, r2
    d->cs.no_mbufs = htonl(coap_stats.no_mbufs);
    6ee4:	6042      	str	r2, [r0, #4]
    6ee6:	685a      	ldr	r2, [r3, #4]
    6ee8:	ba12      	rev	r2, r2
    d->cs.no_mem = htonl(coap_stats.no_mem);
    6eea:	6082      	str	r2, [r0, #8]
    6eec:	689a      	ldr	r2, [r3, #8]
    6eee:	ba12      	rev	r2, r2
    d->cs.sensors_enabled = htonl(coap_stats.sensors_enabled);
    6ef0:	60c2      	str	r2, [r0, #12]
    6ef2:	68da      	ldr	r2, [r3, #12]
    6ef4:	ba12      	rev	r2, r2
    d->cs.sensors_disabled = htonl(coap_stats.sensors_disabled);
    6ef6:	6102      	str	r2, [r0, #16]
    6ef8:	691a      	ldr	r2, [r3, #16]
    6efa:	ba12      	rev	r2, r2
    d->cs.err_hdlc_send = htonl(coap_stats.err_hdlc_send);
    6efc:	6142      	str	r2, [r0, #20]
    6efe:	695a      	ldr	r2, [r3, #20]
    6f00:	ba12      	rev	r2, r2
    d->cs.active_obs = htonl(coap_stats.active_obs);
    6f02:	6182      	str	r2, [r0, #24]
    6f04:	699a      	ldr	r2, [r3, #24]
    6f06:	ba12      	rev	r2, r2
    d->cs.rx_success = htonl(coap_stats.rx_success);
    6f08:	61c2      	str	r2, [r0, #28]
    6f0a:	69da      	ldr	r2, [r3, #28]
    6f0c:	6a1b      	ldr	r3, [r3, #32]
    6f0e:	ba12      	rev	r2, r2
    6f10:	ba1b      	rev	r3, r3
    d->cs.tx_success = htonl(coap_stats.tx_success);
    6f12:	6202      	str	r2, [r0, #32]
    d->cs.nretries_exceeded = htonl(coap_stats.nretries_exceeded);
    6f14:	6243      	str	r3, [r0, #36]	; 0x24
    6f16:	e7ce      	b.n	6eb6 <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    6f18:	491a      	ldr	r1, [pc, #104]	; (6f84 <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    6f1a:	0030      	movs	r0, r6
    6f1c:	f7ff fdd6 	bl	6acc <_Z15coap_opt_strcmpPK5optlvPKc>
    6f20:	2800      	cmp	r0, #0
    6f22:	d003      	beq.n	6f2c <_ZL8crsystemP12coap_msg_ctxS0_+0x214>
            rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6f24:	23a1      	movs	r3, #161	; 0xa1
            rsp->code = COAP_RSP_404_NOT_FOUND;
    6f26:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    6f28:	2500      	movs	r5, #0
    6f2a:	e795      	b.n	6e58 <_ZL8crsystemP12coap_msg_ctxS0_+0x140>
            rc = ERR_INVAL;
    6f2c:	2504      	movs	r5, #4
    6f2e:	e7c2      	b.n	6eb6 <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    6f30:	23a0      	movs	r3, #160	; 0xa0
            switch (rc) {
    6f32:	2d04      	cmp	r5, #4
    6f34:	d1f7      	bne.n	6f26 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
                rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    6f36:	2386      	movs	r3, #134	; 0x86
    6f38:	e7f5      	b.n	6f26 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    } else if (req->code == COAP_REQUEST_PUT) {
    6f3a:	2b03      	cmp	r3, #3
    6f3c:	d1f2      	bne.n	6f24 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    6f3e:	490f      	ldr	r1, [pc, #60]	; (6f7c <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    6f40:	f7ff fdc4 	bl	6acc <_Z15coap_opt_strcmpPK5optlvPKc>
    6f44:	2800      	cmp	r0, #0
    6f46:	d0ed      	beq.n	6f24 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    6f48:	490e      	ldr	r1, [pc, #56]	; (6f84 <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    6f4a:	0030      	movs	r0, r6
    6f4c:	f7ff fdbe 	bl	6acc <_Z15coap_opt_strcmpPK5optlvPKc>
    6f50:	2800      	cmp	r0, #0
    6f52:	d1e7      	bne.n	6f24 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        dlog(LOG_DEBUG, "SET (status %d).", rc);
    6f54:	2204      	movs	r2, #4
    6f56:	490c      	ldr	r1, [pc, #48]	; (6f88 <_ZL8crsystemP12coap_msg_ctxS0_+0x270>)
    6f58:	3007      	adds	r0, #7
    6f5a:	f7fd f95d 	bl	4218 <_Z4dlogiPKcz>
    6f5e:	e7ea      	b.n	6f36 <_ZL8crsystemP12coap_msg_ctxS0_+0x21e>
    6f60:	0000f710 	.word	0x0000f710
    6f64:	0000f715 	.word	0x0000f715
    6f68:	20000e7c 	.word	0x20000e7c
    6f6c:	0000f735 	.word	0x0000f735
    6f70:	0000f74b 	.word	0x0000f74b
    6f74:	2000093d 	.word	0x2000093d
    6f78:	0000f766 	.word	0x0000f766
    6f7c:	0000f76c 	.word	0x0000f76c
    6f80:	0000f77d 	.word	0x0000f77d
    6f84:	0000f775 	.word	0x0000f775
    6f88:	0000f79c 	.word	0x0000f79c

00006f8c <_ZL11crwellknownP12coap_msg_ctxS0_>:
{
    6f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    6f8e:	4b45      	ldr	r3, [pc, #276]	; (70a4 <_ZL11crwellknownP12coap_msg_ctxS0_+0x118>)
{
    6f90:	b087      	sub	sp, #28
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    6f92:	681b      	ldr	r3, [r3, #0]
{
    6f94:	000d      	movs	r5, r1
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    6f96:	9303      	str	r3, [sp, #12]
    void *it = NULL;
    6f98:	2300      	movs	r3, #0
    6f9a:	9305      	str	r3, [sp, #20]
    rsp->code = 0;  /* unknown yet - fill in below */
    6f9c:	708b      	strb	r3, [r1, #2]
    if (req->code == COAP_REQUEST_GET) {
    6f9e:	7882      	ldrb	r2, [r0, #2]
    6fa0:	2a01      	cmp	r2, #1
    6fa2:	d000      	beq.n	6fa6 <_ZL11crwellknownP12coap_msg_ctxS0_+0x1a>
    6fa4:	e079      	b.n	709a <_ZL11crwellknownP12coap_msg_ctxS0_+0x10e>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    6fa6:	304c      	adds	r0, #76	; 0x4c
    6fa8:	aa05      	add	r2, sp, #20
    6faa:	210b      	movs	r1, #11
    6fac:	0004      	movs	r4, r0
    6fae:	f7ff fddd 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    6fb2:	2800      	cmp	r0, #0
    6fb4:	d100      	bne.n	6fb8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x2c>
    6fb6:	e073      	b.n	70a0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    6fb8:	aa05      	add	r2, sp, #20
    6fba:	210b      	movs	r1, #11
    6fbc:	0020      	movs	r0, r4
    6fbe:	f7ff fdd5 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6fc2:	2800      	cmp	r0, #0
    6fc4:	d100      	bne.n	6fc8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x3c>
    6fc6:	e06b      	b.n	70a0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            coap_opt_strcmp(op, "core")                                      ||
    6fc8:	4937      	ldr	r1, [pc, #220]	; (70a8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x11c>)
    6fca:	f7ff fd7f 	bl	6acc <_Z15coap_opt_strcmpPK5optlvPKc>
                copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) ||
    6fce:	2800      	cmp	r0, #0
    6fd0:	d166      	bne.n	70a0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) {
    6fd2:	aa05      	add	r2, sp, #20
    6fd4:	210b      	movs	r1, #11
    6fd6:	0020      	movs	r0, r4
    6fd8:	f7ff fdc8 	bl	6b6c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    6fdc:	2800      	cmp	r0, #0
    6fde:	d15f      	bne.n	70a0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
    6fe0:	2302      	movs	r3, #2
    6fe2:	4e32      	ldr	r6, [pc, #200]	; (70ac <_ZL11crwellknownP12coap_msg_ctxS0_+0x120>)
    6fe4:	9300      	str	r3, [sp, #0]
    6fe6:	3618      	adds	r6, #24
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    6fe8:	9b00      	ldr	r3, [sp, #0]
    6fea:	9a03      	ldr	r2, [sp, #12]
    6fec:	4293      	cmp	r3, r2
    6fee:	da4a      	bge.n	7086 <_ZL11crwellknownP12coap_msg_ctxS0_+0xfa>
            len = strlen(cr->path) + 4;         /* adding </ > , */
    6ff0:	6830      	ldr	r0, [r6, #0]
    6ff2:	f005 f86c 	bl	c0ce <strlen>
    6ff6:	0004      	movs	r4, r0
            if (cr->link) {
    6ff8:	68b0      	ldr	r0, [r6, #8]
            len = strlen(cr->path) + 4;         /* adding </ > , */
    6ffa:	1d23      	adds	r3, r4, #4
            if (cr->link) {
    6ffc:	2800      	cmp	r0, #0
    6ffe:	d003      	beq.n	7008 <_ZL11crwellknownP12coap_msg_ctxS0_+0x7c>
                len += strlen(cr->link) + 1;    /* ; */
    7000:	f005 f865 	bl	c0ce <strlen>
    7004:	3405      	adds	r4, #5
    7006:	1823      	adds	r3, r4, r0
    7008:	9301      	str	r3, [sp, #4]
            ls = (char*) m_append(rsp->msg, len);
    700a:	466b      	mov	r3, sp
    700c:	6d28      	ldr	r0, [r5, #80]	; 0x50
    700e:	2104      	movs	r1, #4
    7010:	5e59      	ldrsh	r1, [r3, r1]
    7012:	f000 f963 	bl	72dc <_Z8m_appendP4mbufs>
    7016:	1e04      	subs	r4, r0, #0
            if (!ls) {
    7018:	d107      	bne.n	702a <_ZL11crwellknownP12coap_msg_ctxS0_+0x9e>
                coap_stats.no_mbufs++;
    701a:	4a25      	ldr	r2, [pc, #148]	; (70b0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x124>)
    701c:	6813      	ldr	r3, [r2, #0]
    701e:	3301      	adds	r3, #1
    7020:	6013      	str	r3, [r2, #0]
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    7022:	23a0      	movs	r3, #160	; 0xa0
            rsp->code = COAP_RSP_404_NOT_FOUND;
    7024:	70ab      	strb	r3, [r5, #2]
            return ERR_FAIL;
    7026:	2063      	movs	r0, #99	; 0x63
    7028:	e035      	b.n	7096 <_ZL11crwellknownP12coap_msg_ctxS0_+0x10a>
            memcpy(ls, "</", n);
    702a:	2202      	movs	r2, #2
    702c:	4921      	ldr	r1, [pc, #132]	; (70b4 <_ZL11crwellknownP12coap_msg_ctxS0_+0x128>)
    702e:	f003 ff1b 	bl	ae68 <memcpy>
            m = strlen(cr->path);
    7032:	6837      	ldr	r7, [r6, #0]
    7034:	0038      	movs	r0, r7
    7036:	f005 f84a 	bl	c0ce <strlen>
    703a:	9002      	str	r0, [sp, #8]
            memcpy(&(ls[n]), cr->path, m);
    703c:	9a02      	ldr	r2, [sp, #8]
    703e:	1ca0      	adds	r0, r4, #2
    7040:	0039      	movs	r1, r7
    7042:	f003 ff11 	bl	ae68 <memcpy>
            ls[n++] = '>';
    7046:	223e      	movs	r2, #62	; 0x3e
    7048:	9b02      	ldr	r3, [sp, #8]
    704a:	18e3      	adds	r3, r4, r3
    704c:	709a      	strb	r2, [r3, #2]
            if (cr->link) {
    704e:	68b2      	ldr	r2, [r6, #8]
    7050:	2a00      	cmp	r2, #0
    7052:	d00c      	beq.n	706e <_ZL11crwellknownP12coap_msg_ctxS0_+0xe2>
                ls[n++] = ';';
    7054:	223b      	movs	r2, #59	; 0x3b
    7056:	70da      	strb	r2, [r3, #3]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    7058:	68b7      	ldr	r7, [r6, #8]
    705a:	0038      	movs	r0, r7
    705c:	f005 f837 	bl	c0ce <strlen>
    7060:	0002      	movs	r2, r0
                ls[n++] = ';';
    7062:	9802      	ldr	r0, [sp, #8]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    7064:	0039      	movs	r1, r7
                ls[n++] = ';';
    7066:	3004      	adds	r0, #4
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    7068:	1820      	adds	r0, r4, r0
    706a:	f003 fefd 	bl	ae68 <memcpy>
            ls[len-1] = ',';
    706e:	9b01      	ldr	r3, [sp, #4]
    7070:	360c      	adds	r6, #12
    7072:	18e4      	adds	r4, r4, r3
    7074:	232c      	movs	r3, #44	; 0x2c
    7076:	3c01      	subs	r4, #1
    7078:	7023      	strb	r3, [r4, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    707a:	3319      	adds	r3, #25
    707c:	70ab      	strb	r3, [r5, #2]
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    707e:	9b00      	ldr	r3, [sp, #0]
    7080:	3301      	adds	r3, #1
    7082:	9300      	str	r3, [sp, #0]
    7084:	e7b0      	b.n	6fe8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x5c>
        rsp->cf = COAP_CF_APPLICATION_LINK_FORMAT; /* application/link-format */
    7086:	002b      	movs	r3, r5
    7088:	2228      	movs	r2, #40	; 0x28
    708a:	333c      	adds	r3, #60	; 0x3c
    708c:	701a      	strb	r2, [r3, #0]
        rsp->plen = rsp->msg->m_pktlen;
    708e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    7090:	881b      	ldrh	r3, [r3, #0]
    7092:	642b      	str	r3, [r5, #64]	; 0x40
    return ERR_OK;
    7094:	2000      	movs	r0, #0
}
    7096:	b007      	add	sp, #28
    7098:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    709a:	22a1      	movs	r2, #161	; 0xa1
    709c:	708a      	strb	r2, [r1, #2]
    709e:	e7f9      	b.n	7094 <_ZL11crwellknownP12coap_msg_ctxS0_+0x108>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    70a0:	2384      	movs	r3, #132	; 0x84
    70a2:	e7bf      	b.n	7024 <_ZL11crwellknownP12coap_msg_ctxS0_+0x98>
    70a4:	20000e48 	.word	0x20000e48
    70a8:	0000f708 	.word	0x0000f708
    70ac:	20000e4c 	.word	0x20000e4c
    70b0:	20000e7c 	.word	0x20000e7c
    70b4:	0000f70d 	.word	0x0000f70d

000070b8 <_ZL7crtitleP12coap_msg_ctxS0_>:
{
    70b8:	b530      	push	{r4, r5, lr}
    if (req->code == COAP_REQUEST_GET)
    70ba:	7883      	ldrb	r3, [r0, #2]
{
    70bc:	b091      	sub	sp, #68	; 0x44
    70be:	000c      	movs	r4, r1
    if (req->code == COAP_REQUEST_GET)
    70c0:	2b01      	cmp	r3, #1
    70c2:	d12b      	bne.n	711c <_ZL7crtitleP12coap_msg_ctxS0_+0x64>
		strcpy(id, COAP_SERVER_VERSION_STRING);
    70c4:	4916      	ldr	r1, [pc, #88]	; (7120 <_ZL7crtitleP12coap_msg_ctxS0_+0x68>)
    70c6:	4668      	mov	r0, sp
    70c8:	f004 fff9 	bl	c0be <strcpy>
		strcat(id, COAP_SERVER_VERSION_NUMBER);
    70cc:	4915      	ldr	r1, [pc, #84]	; (7124 <_ZL7crtitleP12coap_msg_ctxS0_+0x6c>)
    70ce:	4668      	mov	r0, sp
    70d0:	f004 ffde 	bl	c090 <strcat>
        d = (char*) m_append(rsp->msg, strlen(id));
    70d4:	4668      	mov	r0, sp
    70d6:	f004 fffa 	bl	c0ce <strlen>
    70da:	b201      	sxth	r1, r0
    70dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    70de:	f000 f8fd 	bl	72dc <_Z8m_appendP4mbufs>
    70e2:	1e05      	subs	r5, r0, #0
        if (!d)
    70e4:	d108      	bne.n	70f8 <_ZL7crtitleP12coap_msg_ctxS0_+0x40>
            coap_stats.no_mbufs++;
    70e6:	4a10      	ldr	r2, [pc, #64]	; (7128 <_ZL7crtitleP12coap_msg_ctxS0_+0x70>)
    70e8:	6813      	ldr	r3, [r2, #0]
    70ea:	3301      	adds	r3, #1
    70ec:	6013      	str	r3, [r2, #0]
            rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    70ee:	23a0      	movs	r3, #160	; 0xa0
}
    70f0:	2000      	movs	r0, #0
        rsp->code = COAP_RSP_403_FORBIDDEN;
    70f2:	70a3      	strb	r3, [r4, #2]
}
    70f4:	b011      	add	sp, #68	; 0x44
    70f6:	bd30      	pop	{r4, r5, pc}
            memcpy(d, id, strlen(id));
    70f8:	4668      	mov	r0, sp
    70fa:	f004 ffe8 	bl	c0ce <strlen>
    70fe:	4669      	mov	r1, sp
    7100:	0002      	movs	r2, r0
    7102:	0028      	movs	r0, r5
    7104:	f003 feb0 	bl	ae68 <memcpy>
            rsp->plen = strlen(id);
    7108:	4668      	mov	r0, sp
    710a:	f004 ffe0 	bl	c0ce <strlen>
            rsp->cf = COAP_CF_TEXT_PLAIN;
    710e:	0023      	movs	r3, r4
    7110:	2200      	movs	r2, #0
    7112:	333c      	adds	r3, #60	; 0x3c
            rsp->plen = strlen(id);
    7114:	6420      	str	r0, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_TEXT_PLAIN;
    7116:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    7118:	2345      	movs	r3, #69	; 0x45
    711a:	e7e9      	b.n	70f0 <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
        rsp->code = COAP_RSP_403_FORBIDDEN;
    711c:	2383      	movs	r3, #131	; 0x83
    711e:	e7e7      	b.n	70f0 <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
    7120:	0000f1ab 	.word	0x0000f1ab
    7124:	0000f1c9 	.word	0x0000f1c9
    7128:	20000e7c 	.word	0x20000e7c

0000712c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>:
        return ERR_NO_MEM;
    712c:	2303      	movs	r3, #3
{
    712e:	b530      	push	{r4, r5, lr}
    if (coap_reg_size < COAP_MAX_CBR)
    7130:	4c07      	ldr	r4, [pc, #28]	; (7150 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x24>)
    7132:	6825      	ldr	r5, [r4, #0]
    7134:	429d      	cmp	r5, r3
    7136:	dc09      	bgt.n	714c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x20>
        idx = coap_reg_size++;    
    7138:	1c6b      	adds	r3, r5, #1
    713a:	6023      	str	r3, [r4, #0]
    coap_registry[idx].path = path;
    713c:	240c      	movs	r4, #12
    713e:	436c      	muls	r4, r5
    7140:	4b04      	ldr	r3, [pc, #16]	; (7154 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x28>)
    7142:	50e0      	str	r0, [r4, r3]
    coap_registry[idx].cb = cbfunc;
    7144:	191b      	adds	r3, r3, r4
    7146:	6059      	str	r1, [r3, #4]
    coap_registry[idx].link = corelink;
    7148:	609a      	str	r2, [r3, #8]
    return ERR_OK;
    714a:	2300      	movs	r3, #0
}
    714c:	0018      	movs	r0, r3
    714e:	bd30      	pop	{r4, r5, pc}
    7150:	20000e48 	.word	0x20000e48
    7154:	20000e4c 	.word	0x20000e4c

00007158 <_Z18coap_registry_initv>:
{
    7158:	b510      	push	{r4, lr}
	coap_reg_size = 0;
    715a:	2400      	movs	r4, #0
    715c:	4b0d      	ldr	r3, [pc, #52]	; (7194 <_Z18coap_registry_initv+0x3c>)
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    715e:	4a0e      	ldr	r2, [pc, #56]	; (7198 <_Z18coap_registry_initv+0x40>)
    7160:	490e      	ldr	r1, [pc, #56]	; (719c <_Z18coap_registry_initv+0x44>)
    7162:	480f      	ldr	r0, [pc, #60]	; (71a0 <_Z18coap_registry_initv+0x48>)
	coap_reg_size = 0;
    7164:	601c      	str	r4, [r3, #0]
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    7166:	f7ff ffe1 	bl	712c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(".well-known", crwellknown, NULL);
    716a:	0022      	movs	r2, r4
    716c:	490d      	ldr	r1, [pc, #52]	; (71a4 <_Z18coap_registry_initv+0x4c>)
    716e:	480e      	ldr	r0, [pc, #56]	; (71a8 <_Z18coap_registry_initv+0x50>)
    7170:	f7ff ffdc 	bl	712c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(S_URI_SYSTEM, crsystem, CLA_SYSTEM);
    7174:	4a0d      	ldr	r2, [pc, #52]	; (71ac <_Z18coap_registry_initv+0x54>)
    7176:	490e      	ldr	r1, [pc, #56]	; (71b0 <_Z18coap_registry_initv+0x58>)
    7178:	480e      	ldr	r0, [pc, #56]	; (71b4 <_Z18coap_registry_initv+0x5c>)
    717a:	f7ff ffd7 	bl	712c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
	if (is_sapi == 1)
    717e:	4b0e      	ldr	r3, [pc, #56]	; (71b8 <_Z18coap_registry_initv+0x60>)
    7180:	4a0e      	ldr	r2, [pc, #56]	; (71bc <_Z18coap_registry_initv+0x64>)
    7182:	781b      	ldrb	r3, [r3, #0]
    7184:	480e      	ldr	r0, [pc, #56]	; (71c0 <_Z18coap_registry_initv+0x68>)
		(void)coap_uri_register(classifier, crsapi, CLA_ARDUINO);
    7186:	490f      	ldr	r1, [pc, #60]	; (71c4 <_Z18coap_registry_initv+0x6c>)
	if (is_sapi == 1)
    7188:	2b01      	cmp	r3, #1
    718a:	d000      	beq.n	718e <_Z18coap_registry_initv+0x36>
		(void)coap_uri_register(classifier, crarduino, CLA_ARDUINO);
    718c:	490e      	ldr	r1, [pc, #56]	; (71c8 <_Z18coap_registry_initv+0x70>)
    718e:	f7ff ffcd 	bl	712c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
}
    7192:	bd10      	pop	{r4, pc}
    7194:	20000e48 	.word	0x20000e48
    7198:	0000f695 	.word	0x0000f695
    719c:	000070b9 	.word	0x000070b9
    71a0:	0000f47e 	.word	0x0000f47e
    71a4:	00006f8d 	.word	0x00006f8d
    71a8:	0000f6a7 	.word	0x0000f6a7
    71ac:	0000f6b3 	.word	0x0000f6b3
    71b0:	00006d19 	.word	0x00006d19
    71b4:	0000f6d8 	.word	0x0000f6d8
    71b8:	20000049 	.word	0x20000049
    71bc:	0000f6dc 	.word	0x0000f6dc
    71c0:	2000009c 	.word	0x2000009c
    71c4:	00004779 	.word	0x00004779
    71c8:	00004829 	.word	0x00004829

000071cc <_Z24coap_put_ic_reboot_eventv>:
 *
 * Given that there are HDLC retries, we're not going to attempt CoAP retries.
 * Could be added later if required.
 */
error_t coap_put_ic_reboot_event(void)
{
    71cc:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *req;
	uint8_t     *ptr;

	/* Allocate request buffer */
	MGETHDR(req);
    71ce:	f000 f851 	bl	7274 <_Z5m_getv>
    71d2:	1e04      	subs	r4, r0, #0
	if (!req) 
    71d4:	d105      	bne.n	71e2 <_Z24coap_put_ic_reboot_eventv+0x16>
	{
		coap_stats.no_mbufs++;
		return ERR_NO_MEM;
    71d6:	2003      	movs	r0, #3
		coap_stats.no_mbufs++;
    71d8:	4a11      	ldr	r2, [pc, #68]	; (7220 <_Z24coap_put_ic_reboot_eventv+0x54>)
    71da:	6813      	ldr	r3, [r2, #0]
    71dc:	3301      	adds	r3, #1
    71de:	6013      	str	r3, [r2, #0]
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
	delay(1);
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);

	return ERR_OK;
    71e0:	bd70      	pop	{r4, r5, r6, pc}
	ptr = (uint8_t *)m_append(req, sizeof(rbtput));
    71e2:	2114      	movs	r1, #20
    71e4:	f000 f87a 	bl	72dc <_Z8m_appendP4mbufs>
	memcpy(ptr, rbtput, sizeof(rbtput));
    71e8:	2214      	movs	r2, #20
    71ea:	490e      	ldr	r1, [pc, #56]	; (7224 <_Z24coap_put_ic_reboot_eventv+0x58>)
    71ec:	f003 fe3c 	bl	ae68 <memcpy>
	if (pending_rsp)
    71f0:	4d0d      	ldr	r5, [pc, #52]	; (7228 <_Z24coap_put_ic_reboot_eventv+0x5c>)
    71f2:	6828      	ldr	r0, [r5, #0]
    71f4:	2800      	cmp	r0, #0
    71f6:	d001      	beq.n	71fc <_Z24coap_put_ic_reboot_eventv+0x30>
		m_free(pending_rsp);
    71f8:	f000 f866 	bl	72c8 <_Z6m_freeP4mbuf>
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    71fc:	490b      	ldr	r1, [pc, #44]	; (722c <_Z24coap_put_ic_reboot_eventv+0x60>)
    71fe:	2007      	movs	r0, #7
	pending_rsp = req;
    7200:	602c      	str	r4, [r5, #0]
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    7202:	f7fd f809 	bl	4218 <_Z4dlogiPKcz>
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
    7206:	2100      	movs	r1, #0
    7208:	2009      	movs	r0, #9
    720a:	f7fc fc61 	bl	3ad0 <digitalWrite>
	delay(1);
    720e:	2001      	movs	r0, #1
    7210:	f7fb fa5e 	bl	26d0 <delay>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    7214:	2009      	movs	r0, #9
    7216:	2101      	movs	r1, #1
    7218:	f7fc fc5a 	bl	3ad0 <digitalWrite>
	return ERR_OK;
    721c:	2000      	movs	r0, #0
    721e:	e7df      	b.n	71e0 <_Z24coap_put_ic_reboot_eventv+0x14>
    7220:	20000e7c 	.word	0x20000e7c
    7224:	0000f7c9 	.word	0x0000f7c9
    7228:	20000e44 	.word	0x20000e44
    722c:	0000f7ad 	.word	0x0000f7ad

00007230 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>:
 */


// CoAP Server initialization
void coap_s_init(HardwareSerial *pSerial, uint32_t max_age, uint32_t uart_timeout_ms, uint32_t max_hdlc_payload_size, const char *uri_rsrc_name, ObsFuncPtr pObsFuncPtr)
{
    7230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7232:	000f      	movs	r7, r1
    7234:	0015      	movs	r5, r2
    7236:	001e      	movs	r6, r3
    7238:	0004      	movs	r4, r0
	int res;
	
	// Initialize CoAP Server registry
	coap_registry_init();
    723a:	f7ff ff8d 	bl	7158 <_Z18coap_registry_initv>

	// Set Max-Age: CoAP Server Response Option 14
	coap_set_max_age(max_age);
    723e:	0038      	movs	r0, r7
    7240:	f7ff fc8e 	bl	6b60 <_Z16coap_set_max_agem>
	
	// Set the URI used for obtaining token etc in CoAP Observe response msg
	set_observer(uri_rsrc_name, pObsFuncPtr);
    7244:	9907      	ldr	r1, [sp, #28]
    7246:	9806      	ldr	r0, [sp, #24]
    7248:	f7ff fd18 	bl	6c7c <_Z12set_observerPKcPF7error_eP4mbufPhhE>

	// Open the HDLC connection
	res = hdlcs_open(pSerial, uart_timeout_ms, max_hdlc_payload_size);
    724c:	0032      	movs	r2, r6
    724e:	0029      	movs	r1, r5
    7250:	0020      	movs	r0, r4
    7252:	f000 f86d 	bl	7330 <_Z10hdlcs_openP14HardwareSerialmm>
	if (res) 
    7256:	2800      	cmp	r0, #0
    7258:	d003      	beq.n	7262 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x32>
	{
		dlog(LOG_ERR, "HDLC initialization failed!");
    725a:	4902      	ldr	r1, [pc, #8]	; (7264 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x34>)
    725c:	2003      	movs	r0, #3
    725e:	f7fc ffdb 	bl	4218 <_Z4dlogiPKcz>
	}
	
	// That's all folks!
} // coap_s_init()
    7262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7264:	0000f7dd 	.word	0x0000f7dd

00007268 <_Z18set_mbuf_data_sizei>:
// Set the size of the mbuf data buffer
static int mbuf_data_buf_size = 0;
void set_mbuf_data_size( int buf_size )
{
	// Get the size of the mbuf data buffer
	mbuf_data_buf_size = buf_size;
    7268:	4b01      	ldr	r3, [pc, #4]	; (7270 <_Z18set_mbuf_data_sizei+0x8>)
    726a:	6018      	str	r0, [r3, #0]
	
} // set_mbuf_size
    726c:	4770      	bx	lr
    726e:	46c0      	nop			; (mov r8, r8)
    7270:	20000ea0 	.word	0x20000ea0

00007274 <_Z5m_getv>:
	
} // get_mbuf_size


struct mbuf * m_get()
{
    7274:	b570      	push	{r4, r5, r6, lr}
    struct mbuf *m;
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    7276:	4d0e      	ldr	r5, [pc, #56]	; (72b0 <_Z5m_getv+0x3c>)
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    7278:	2007      	movs	r0, #7
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    727a:	682b      	ldr	r3, [r5, #0]
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    727c:	490d      	ldr	r1, [pc, #52]	; (72b4 <_Z5m_getv+0x40>)
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    727e:	1d1c      	adds	r4, r3, #4
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    7280:	0022      	movs	r2, r4
    7282:	f7fc ffc9 	bl	4218 <_Z4dlogiPKcz>
    m = (struct mbuf *) malloc(mbuf_size);
    7286:	0020      	movs	r0, r4
    7288:	f003 fdc8 	bl	ae1c <malloc>
    assert(m);
    728c:	2800      	cmp	r0, #0
    728e:	d105      	bne.n	729c <_Z5m_getv+0x28>
    7290:	4b09      	ldr	r3, [pc, #36]	; (72b8 <_Z5m_getv+0x44>)
    7292:	4a0a      	ldr	r2, [pc, #40]	; (72bc <_Z5m_getv+0x48>)
    7294:	214a      	movs	r1, #74	; 0x4a
    7296:	480a      	ldr	r0, [pc, #40]	; (72c0 <_Z5m_getv+0x4c>)
    7298:	f003 fc78 	bl	ab8c <__assert_func>
    m->len = 0;
    729c:	2300      	movs	r3, #0
    m->size = mbuf_data_buf_size;
    malloc_cnt++;
    729e:	4a09      	ldr	r2, [pc, #36]	; (72c4 <_Z5m_getv+0x50>)
    m->len = 0;
    72a0:	8003      	strh	r3, [r0, #0]
    m->size = mbuf_data_buf_size;
    72a2:	682b      	ldr	r3, [r5, #0]
    72a4:	8043      	strh	r3, [r0, #2]
    malloc_cnt++;
    72a6:	6813      	ldr	r3, [r2, #0]
    72a8:	3301      	adds	r3, #1
    72aa:	6013      	str	r3, [r2, #0]
    return m;
}
    72ac:	bd70      	pop	{r4, r5, r6, pc}
    72ae:	46c0      	nop			; (mov r8, r8)
    72b0:	20000ea0 	.word	0x20000ea0
    72b4:	0000f7f9 	.word	0x0000f7f9
    72b8:	0000f2c0 	.word	0x0000f2c0
    72bc:	0000f840 	.word	0x0000f840
    72c0:	0000f815 	.word	0x0000f815
    72c4:	20000ea8 	.word	0x20000ea8

000072c8 <_Z6m_freeP4mbuf>:

void
m_free(struct mbuf *m)
{
    72c8:	b510      	push	{r4, lr}
    free(m);
    72ca:	f003 fdb1 	bl	ae30 <free>
    free_cnt++;
    72ce:	4a02      	ldr	r2, [pc, #8]	; (72d8 <_Z6m_freeP4mbuf+0x10>)
    72d0:	6813      	ldr	r3, [r2, #0]
    72d2:	3301      	adds	r3, #1
    72d4:	6013      	str	r3, [r2, #0]
}
    72d6:	bd10      	pop	{r4, pc}
    72d8:	20000ea4 	.word	0x20000ea4

000072dc <_Z8m_appendP4mbufs>:

void *
m_append(struct mbuf *m, int16_t len)
{
    void *d;
    if (m->len + len > mbuf_data_buf_size) {
    72dc:	4b06      	ldr	r3, [pc, #24]	; (72f8 <_Z8m_appendP4mbufs+0x1c>)
{
    72de:	b510      	push	{r4, lr}
    if (m->len + len > mbuf_data_buf_size) {
    72e0:	8804      	ldrh	r4, [r0, #0]
    72e2:	681b      	ldr	r3, [r3, #0]
    72e4:	1861      	adds	r1, r4, r1
{
    72e6:	0002      	movs	r2, r0
        return NULL;
    72e8:	2000      	movs	r0, #0
    if (m->len + len > mbuf_data_buf_size) {
    72ea:	4299      	cmp	r1, r3
    72ec:	dc02      	bgt.n	72f4 <_Z8m_appendP4mbufs+0x18>
    }

    d = m->data + m->len;
    72ee:	1d10      	adds	r0, r2, #4
    72f0:	1900      	adds	r0, r0, r4
    m->len += len;
    72f2:	8011      	strh	r1, [r2, #0]
    
    return d;

}
    72f4:	bd10      	pop	{r4, pc}
    72f6:	46c0      	nop			; (mov r8, r8)
    72f8:	20000ea0 	.word	0x20000ea0

000072fc <_Z5m_adjP4mbufi>:



void
m_adj(struct mbuf *mp, int req_len)
{
    72fc:	b510      	push	{r4, lr}
    if (mp == NULL) {
    72fe:	2800      	cmp	r0, #0
    7300:	d011      	beq.n	7326 <_Z5m_adjP4mbufi+0x2a>
        return;
    }
    if ((req_len > mp->len) || (-1*(req_len) > mp->len)) {
    7302:	8802      	ldrh	r2, [r0, #0]
    7304:	0013      	movs	r3, r2
    7306:	428a      	cmp	r2, r1
    7308:	db05      	blt.n	7316 <_Z5m_adjP4mbufi+0x1a>
    730a:	424c      	negs	r4, r1
    730c:	42a2      	cmp	r2, r4
    730e:	db02      	blt.n	7316 <_Z5m_adjP4mbufi+0x1a>
        req_len = mp->len;
    }

    if (req_len >= 0) {
    7310:	2900      	cmp	r1, #0
    7312:	db09      	blt.n	7328 <_Z5m_adjP4mbufi+0x2c>
    7314:	000b      	movs	r3, r1
        /* Trim from head. */
        mp->len -= req_len;
    7316:	1ad2      	subs	r2, r2, r3
    7318:	b292      	uxth	r2, r2
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    731a:	1d19      	adds	r1, r3, #4
        mp->len -= req_len;
    731c:	8002      	strh	r2, [r0, #0]
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    731e:	1841      	adds	r1, r0, r1
    7320:	3004      	adds	r0, #4
    7322:	f003 fdaa 	bl	ae7a <memmove>
    } else {
        /* Trim from tail. */
        mp->len += req_len;
    }
}
    7326:	bd10      	pop	{r4, pc}
        mp->len += req_len;
    7328:	1852      	adds	r2, r2, r1
    732a:	8002      	strh	r2, [r0, #0]
    732c:	e7fb      	b.n	7326 <_Z5m_adjP4mbufi+0x2a>
	...

00007330 <_Z10hdlcs_openP14HardwareSerialmm>:
// Time-out period in ms of the UART
static uint32_t uart_timeout_ms		= 0;

/* Open HDLCS connection */
error_t hdlcs_open( HardwareSerial * pUART, uint32_t timeout_ms, uint32_t max_info_len )
{
    7330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Check that we are not already open
    if (hss.open) 
    7332:	4c1c      	ldr	r4, [pc, #112]	; (73a4 <_Z10hdlcs_openP14HardwareSerialmm+0x74>)
{
    7334:	9101      	str	r1, [sp, #4]
    if (hss.open) 
    7336:	6826      	ldr	r6, [r4, #0]
{
    7338:	0015      	movs	r5, r2
	{
        /* already open - err */
        return ERR_FAIL;
    733a:	2763      	movs	r7, #99	; 0x63
    if (hss.open) 
    733c:	2e00      	cmp	r6, #0
    733e:	d106      	bne.n	734e <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
    }
	
	// Check that the specified max payload size is not larger than the corresponding size on the mNIC
	if ( max_info_len > MNIC_MAX_PAYLOAD_SIZE )
    7340:	2aff      	cmp	r2, #255	; 0xff
    7342:	d906      	bls.n	7352 <_Z10hdlcs_openP14HardwareSerialmm+0x22>
	{
		dlog( LOG_DEBUG, "The max payload size specified is too large: %d bytes. The maximum allowed is %d bytes ", max_info_len, MNIC_MAX_PAYLOAD_SIZE );
    7344:	23ff      	movs	r3, #255	; 0xff
    7346:	4918      	ldr	r1, [pc, #96]	; (73a8 <_Z10hdlcs_openP14HardwareSerialmm+0x78>)
    7348:	2007      	movs	r0, #7
    734a:	f7fc ff65 	bl	4218 <_Z4dlogiPKcz>
    hss.esrc = hdlc_addr_encode(1);
    /* update this when the connection is made.  fixed now */
    hss.edst = hdlc_addr_encode(1);

    return ERR_OK;
}
    734e:	0038      	movs	r0, r7
    7350:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hss.open = 1;
    7352:	2701      	movs	r7, #1
	hdlc_init( pUART, max_info_len );
    7354:	0011      	movs	r1, r2
    7356:	f000 f973 	bl	7640 <_Z9hdlc_initP14HardwareSerialm>
	uart_timeout_ms = timeout_ms;
    735a:	4b14      	ldr	r3, [pc, #80]	; (73ac <_Z10hdlcs_openP14HardwareSerialmm+0x7c>)
    735c:	9a01      	ldr	r2, [sp, #4]
    memset(&hss, 0, sizeof(hss));
    735e:	0031      	movs	r1, r6
	uart_timeout_ms = timeout_ms;
    7360:	601a      	str	r2, [r3, #0]
    memset(&hss, 0, sizeof(hss));
    7362:	0020      	movs	r0, r4
    7364:	2220      	movs	r2, #32
    7366:	f003 fd9a 	bl	ae9e <memset>
	set_mbuf_data_size(size);
    736a:	0028      	movs	r0, r5
    hss.open = 1;
    736c:	6027      	str	r7, [r4, #0]
    hss.cfg.max_info_tx = max_info_len;
    736e:	6065      	str	r5, [r4, #4]
    hss.cfg.max_info_rx = max_info_len;
    7370:	60a5      	str	r5, [r4, #8]
    hss.state = HSS_DISC;
    7372:	7327      	strb	r7, [r4, #12]
	set_mbuf_data_size(size);
    7374:	f7ff ff78 	bl	7268 <_Z18set_mbuf_data_sizei>
    hss.recv = m_get();
    7378:	f7ff ff7c 	bl	7274 <_Z5m_getv>
    737c:	61a0      	str	r0, [r4, #24]
    assert(hss.recv);
    737e:	2800      	cmp	r0, #0
    7380:	d105      	bne.n	738e <_Z10hdlcs_openP14HardwareSerialmm+0x5e>
    7382:	4b0b      	ldr	r3, [pc, #44]	; (73b0 <_Z10hdlcs_openP14HardwareSerialmm+0x80>)
    7384:	4a0b      	ldr	r2, [pc, #44]	; (73b4 <_Z10hdlcs_openP14HardwareSerialmm+0x84>)
    7386:	2164      	movs	r1, #100	; 0x64
    7388:	480b      	ldr	r0, [pc, #44]	; (73b8 <_Z10hdlcs_openP14HardwareSerialmm+0x88>)
    738a:	f003 fbff 	bl	ab8c <__assert_func>
    hss.esrc = hdlc_addr_encode(1);
    738e:	0038      	movs	r0, r7
    7390:	f000 f966 	bl	7660 <_Z16hdlc_addr_encodem>
    7394:	7360      	strb	r0, [r4, #13]
    hss.edst = hdlc_addr_encode(1);
    7396:	0038      	movs	r0, r7
    7398:	f000 f962 	bl	7660 <_Z16hdlc_addr_encodem>
    return ERR_OK;
    739c:	0037      	movs	r7, r6
    hss.edst = hdlc_addr_encode(1);
    739e:	73a0      	strb	r0, [r4, #14]
    return ERR_OK;
    73a0:	e7d5      	b.n	734e <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
    73a2:	46c0      	nop			; (mov r8, r8)
    73a4:	20000eb0 	.word	0x20000eb0
    73a8:	0000f84e 	.word	0x0000f84e
    73ac:	20000eac 	.word	0x20000eac
    73b0:	0000f8a6 	.word	0x0000f8a6
    73b4:	0000f8db 	.word	0x0000f8db
    73b8:	0000f8af 	.word	0x0000f8af

000073bc <ultoa>:
        {
            return ultoa(value, string, radix);
        }

        extern char* ultoa(unsigned long value, char*string, int radix)
        {
    73bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    73be:	b08d      	sub	sp, #52	; 0x34
    73c0:	0007      	movs	r7, r0
    73c2:	1e0e      	subs	r6, r1, #0
    73c4:	9201      	str	r2, [sp, #4]
            char* tp = tmp;
            long i;
            unsigned long v = value;
            char* sp;

            if (string == NULL)
    73c6:	d021      	beq.n	740c <ultoa+0x50>
            {
                return 0;
            }

            if (radix > 36 || radix <= 1)
    73c8:	0013      	movs	r3, r2
    73ca:	3b02      	subs	r3, #2
    73cc:	ad03      	add	r5, sp, #12
    73ce:	2b22      	cmp	r3, #34	; 0x22
    73d0:	d910      	bls.n	73f4 <ultoa+0x38>
                return 0;
    73d2:	2600      	movs	r6, #0
    73d4:	e01a      	b.n	740c <ultoa+0x50>
                return 0;
            }

            while (v || tp == tmp)
            {
                i = v % radix;
    73d6:	0038      	movs	r0, r7
    73d8:	9901      	ldr	r1, [sp, #4]
    73da:	f000 fc8b 	bl	7cf4 <__aeabi_uidivmod>
                v = v / radix;
    73de:	0038      	movs	r0, r7
                i = v % radix;
    73e0:	000c      	movs	r4, r1
                v = v / radix;
    73e2:	9901      	ldr	r1, [sp, #4]
    73e4:	f000 fc00 	bl	7be8 <__udivsi3>
    73e8:	0007      	movs	r7, r0
                if (i < 10)
    73ea:	2c09      	cmp	r4, #9
    73ec:	d811      	bhi.n	7412 <ultoa+0x56>
                    *tp++ = i + '0';
    73ee:	3430      	adds	r4, #48	; 0x30
                else
                    *tp++ = i + 'a' - 10;
    73f0:	702c      	strb	r4, [r5, #0]
    73f2:	3501      	adds	r5, #1
    73f4:	002b      	movs	r3, r5
            while (v || tp == tmp)
    73f6:	2f00      	cmp	r7, #0
    73f8:	d1ed      	bne.n	73d6 <ultoa+0x1a>
    73fa:	aa03      	add	r2, sp, #12
    73fc:	42aa      	cmp	r2, r5
    73fe:	d0ea      	beq.n	73d6 <ultoa+0x1a>
    7400:	0032      	movs	r2, r6
            }

            sp = string;


            while (tp > tmp)
    7402:	a903      	add	r1, sp, #12
    7404:	428b      	cmp	r3, r1
    7406:	d806      	bhi.n	7416 <ultoa+0x5a>
                *sp++ = *--tp;
            *sp = 0;
    7408:	2300      	movs	r3, #0
    740a:	7013      	strb	r3, [r2, #0]

            return string;
        }
    740c:	0030      	movs	r0, r6
    740e:	b00d      	add	sp, #52	; 0x34
    7410:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    *tp++ = i + 'a' - 10;
    7412:	3457      	adds	r4, #87	; 0x57
    7414:	e7ec      	b.n	73f0 <ultoa+0x34>
                *sp++ = *--tp;
    7416:	3b01      	subs	r3, #1
    7418:	7819      	ldrb	r1, [r3, #0]
    741a:	7011      	strb	r1, [r2, #0]
    741c:	3201      	adds	r2, #1
    741e:	e7f0      	b.n	7402 <ultoa+0x46>

00007420 <utoa>:
        {
    7420:	b510      	push	{r4, lr}
            return ultoa(value, string, radix);
    7422:	f7ff ffcb 	bl	73bc <ultoa>
        }
    7426:	bd10      	pop	{r4, pc}

00007428 <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    7428:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    742a:	2240      	movs	r2, #64	; 0x40
    742c:	2100      	movs	r1, #0
RingBuffer::RingBuffer( void )
    742e:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    7430:	f003 fd35 	bl	ae9e <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    7434:	2300      	movs	r3, #0
}
    7436:	0020      	movs	r0, r4
	_iHead = 0;
    7438:	6423      	str	r3, [r4, #64]	; 0x40
	_iTail = 0;
    743a:	6463      	str	r3, [r4, #68]	; 0x44
}
    743c:	bd10      	pop	{r4, pc}

0000743e <_ZN10RingBuffer10store_charEh>:
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    743e:	223f      	movs	r2, #63	; 0x3f
  int i = nextIndex(_iHead);
    7440:	6c03      	ldr	r3, [r0, #64]	; 0x40
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    7442:	3301      	adds	r3, #1
    7444:	4013      	ands	r3, r2
  if ( i != _iTail )
    7446:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7448:	429a      	cmp	r2, r3
    744a:	d002      	beq.n	7452 <_ZN10RingBuffer10store_charEh+0x14>
    _aucBuffer[_iHead] = c ;
    744c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    744e:	5481      	strb	r1, [r0, r2]
    _iHead = i ;
    7450:	6403      	str	r3, [r0, #64]	; 0x40
}
    7452:	4770      	bx	lr

00007454 <_ZN10RingBuffer5clearEv>:
	_iHead = 0;
    7454:	2300      	movs	r3, #0
    7456:	6403      	str	r3, [r0, #64]	; 0x40
	_iTail = 0;
    7458:	6443      	str	r3, [r0, #68]	; 0x44
}
    745a:	4770      	bx	lr

0000745c <_ZN10RingBuffer9read_charEv>:
	if(_iTail == _iHead)
    745c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    745e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    7460:	429a      	cmp	r2, r3
    7462:	d008      	beq.n	7476 <_ZN10RingBuffer9read_charEv+0x1a>
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    7464:	213f      	movs	r1, #63	; 0x3f
	uint8_t value = _aucBuffer[_iTail];
    7466:	6c43      	ldr	r3, [r0, #68]	; 0x44
    7468:	5cc2      	ldrb	r2, [r0, r3]
	_iTail = nextIndex(_iTail);
    746a:	6c43      	ldr	r3, [r0, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    746c:	3301      	adds	r3, #1
    746e:	400b      	ands	r3, r1
	_iTail = nextIndex(_iTail);
    7470:	6443      	str	r3, [r0, #68]	; 0x44
	return value;
    7472:	0010      	movs	r0, r2
}
    7474:	4770      	bx	lr
		return -1;
    7476:	2001      	movs	r0, #1
    7478:	4240      	negs	r0, r0
    747a:	e7fb      	b.n	7474 <_ZN10RingBuffer9read_charEv+0x18>

0000747c <_ZN10RingBuffer9availableEv>:
	int delta = _iHead - _iTail;
    747c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    747e:	6c40      	ldr	r0, [r0, #68]	; 0x44
    7480:	1a18      	subs	r0, r3, r0
	if(delta < 0)
    7482:	d500      	bpl.n	7486 <_ZN10RingBuffer9availableEv+0xa>
		return SERIAL_BUFFER_SIZE + delta;
    7484:	3040      	adds	r0, #64	; 0x40
}
    7486:	4770      	bx	lr

00007488 <_ZN10RingBuffer17availableForStoreEv>:
	if (_iHead >= _iTail)
    7488:	6c02      	ldr	r2, [r0, #64]	; 0x40
    748a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    748c:	429a      	cmp	r2, r3
    748e:	db04      	blt.n	749a <_ZN10RingBuffer17availableForStoreEv+0x12>
		return SERIAL_BUFFER_SIZE - 1 - _iHead + _iTail;
    7490:	6c03      	ldr	r3, [r0, #64]	; 0x40
    7492:	6c40      	ldr	r0, [r0, #68]	; 0x44
    7494:	1ac0      	subs	r0, r0, r3
    7496:	303f      	adds	r0, #63	; 0x3f
}
    7498:	4770      	bx	lr
		return _iTail - _iHead - 1;
    749a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    749c:	6c00      	ldr	r0, [r0, #64]	; 0x40
    749e:	1a18      	subs	r0, r3, r0
    74a0:	3801      	subs	r0, #1
    74a2:	e7f9      	b.n	7498 <_ZN10RingBuffer17availableForStoreEv+0x10>

000074a4 <_ZN10RingBuffer4peekEv>:
	if(_iTail == _iHead)
    74a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
    74a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
    74a8:	429a      	cmp	r2, r3
    74aa:	d002      	beq.n	74b2 <_ZN10RingBuffer4peekEv+0xe>
	return _aucBuffer[_iTail];
    74ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
    74ae:	5cc0      	ldrb	r0, [r0, r3]
}
    74b0:	4770      	bx	lr
		return -1;
    74b2:	2001      	movs	r0, #1
    74b4:	4240      	negs	r0, r0
    74b6:	e7fb      	b.n	74b0 <_ZN10RingBuffer4peekEv+0xc>

000074b8 <_ZN10RingBuffer6isFullEv>:
}

bool RingBuffer::isFull()
{
    74b8:	0003      	movs	r3, r0
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    74ba:	223f      	movs	r2, #63	; 0x3f
	return (nextIndex(_iHead) == _iTail);
    74bc:	6c00      	ldr	r0, [r0, #64]	; 0x40
    74be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    74c0:	3001      	adds	r0, #1
    74c2:	4010      	ands	r0, r2
	return (nextIndex(_iHead) == _iTail);
    74c4:	1ac0      	subs	r0, r0, r3
    74c6:	4243      	negs	r3, r0
    74c8:	4158      	adcs	r0, r3
    74ca:	b2c0      	uxtb	r0, r0
}
    74cc:	4770      	bx	lr

000074ce <_ZN11DiagnosticsD1Ev>:
 class Diagnostics {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
  ~Diagnostics(void){};
    74ce:	4770      	bx	lr

000074d0 <_ZN11Diagnostics17_printSupportLinkEv>:
    Serial.print(F("0"));
  }
  Serial.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
    74d0:	b510      	push	{r4, lr}
  Serial.print(F("If this does not help resolve/clarify this issue, "));
    74d2:	4c05      	ldr	r4, [pc, #20]	; (74e8 <_ZN11Diagnostics17_printSupportLinkEv+0x18>)
    74d4:	4905      	ldr	r1, [pc, #20]	; (74ec <_ZN11Diagnostics17_printSupportLinkEv+0x1c>)
    74d6:	0020      	movs	r0, r4
    74d8:	f7fd fb84 	bl	4be4 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(F("please raise an issue at http://www.github.com/Marzogh/SPIMemory/issues with the details of what your were doing when this error occurred"));
    74dc:	4904      	ldr	r1, [pc, #16]	; (74f0 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
    74de:	0020      	movs	r0, r4
    74e0:	f7fd fb9c 	bl	4c1c <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    74e4:	bd10      	pop	{r4, pc}
    74e6:	46c0      	nop			; (mov r8, r8)
    74e8:	20000d1c 	.word	0x20000d1c
    74ec:	0000fe30 	.word	0x0000fe30
    74f0:	0000fe63 	.word	0x0000fe63

000074f4 <_ZN11Diagnostics12troubleshootEhb>:
//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
    74f4:	b570      	push	{r4, r5, r6, lr}
    74f6:	0006      	movs	r6, r0
    74f8:	000d      	movs	r5, r1
  bool _printoverride;
  errorcode = _code;
    74fa:	7031      	strb	r1, [r6, #0]
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
#endif
  if (_printoverride) {
    74fc:	2a00      	cmp	r2, #0
    74fe:	d014      	beq.n	752a <_ZN11Diagnostics12troubleshootEhb+0x36>
    7500:	4c2e      	ldr	r4, [pc, #184]	; (75bc <_ZN11Diagnostics12troubleshootEhb+0xc8>)
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
    7502:	2914      	cmp	r1, #20
    7504:	d84c      	bhi.n	75a0 <_ZN11Diagnostics12troubleshootEhb+0xac>
    7506:	0008      	movs	r0, r1
    7508:	f000 fb64 	bl	7bd4 <__gnu_thumb1_case_uqi>
    750c:	1c1a180b 	.word	0x1c1a180b
    7510:	2c26241e 	.word	0x2c26241e
    7514:	10383632 	.word	0x10383632
    7518:	3e3c3a34 	.word	0x3e3c3a34
    751c:	46444240 	.word	0x46444240
    7520:	48          	.byte	0x48
    7521:	00          	.byte	0x00
      case SUCCESS:
      Serial.println(F("Function executed successfully"));
    7522:	4927      	ldr	r1, [pc, #156]	; (75c0 <_ZN11Diagnostics12troubleshootEhb+0xcc>)
      case NORESPONSE:
      Serial.println(F("Check your wiring. Flash chip is non-responsive."));
      break;

      case CALLBEGIN:
      Serial.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    7524:	0020      	movs	r0, r4
    7526:	f7fd fb79 	bl	4c1c <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
      _printSupportLink();
    }
  #endif
  }
}
    752a:	bd70      	pop	{r4, r5, r6, pc}
      Serial.println(F("Check your wiring. Flash chip is non-responsive."));
    752c:	4925      	ldr	r1, [pc, #148]	; (75c4 <_ZN11Diagnostics12troubleshootEhb+0xd0>)
      Serial.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    752e:	0020      	movs	r0, r4
    7530:	f7fd fb74 	bl	4c1c <_ZN5Print7printlnEPK19__FlashStringHelper>
      _printSupportLink();
    7534:	0030      	movs	r0, r6
    7536:	f7ff ffcb 	bl	74d0 <_ZN11Diagnostics17_printSupportLinkEv>
}
    753a:	e7f6      	b.n	752a <_ZN11Diagnostics12troubleshootEhb+0x36>
      Serial.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    753c:	4922      	ldr	r1, [pc, #136]	; (75c8 <_ZN11Diagnostics12troubleshootEhb+0xd4>)
    753e:	e7f1      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    7540:	4922      	ldr	r1, [pc, #136]	; (75cc <_ZN11Diagnostics12troubleshootEhb+0xd8>)
    7542:	e7f4      	b.n	752e <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
    7544:	4922      	ldr	r1, [pc, #136]	; (75d0 <_ZN11Diagnostics12troubleshootEhb+0xdc>)
    7546:	e7ed      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Chip is busy."));
    7548:	4922      	ldr	r1, [pc, #136]	; (75d4 <_ZN11Diagnostics12troubleshootEhb+0xe0>)
    754a:	0020      	movs	r0, r4
    754c:	f7fd fb66 	bl	4c1c <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Make sure all pins have been connected properly"));
    7550:	4921      	ldr	r1, [pc, #132]	; (75d8 <_ZN11Diagnostics12troubleshootEhb+0xe4>)
    7552:	e7e7      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Page overflow has been disabled and the address called exceeds the memory"));
    7554:	4921      	ldr	r1, [pc, #132]	; (75dc <_ZN11Diagnostics12troubleshootEhb+0xe8>)
    7556:	e7e5      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to Enable Writing to chip."));
    7558:	4921      	ldr	r1, [pc, #132]	; (75e0 <_ZN11Diagnostics12troubleshootEhb+0xec>)
    755a:	0020      	movs	r0, r4
    755c:	f7fd fb5e 	bl	4c1c <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
    7560:	4920      	ldr	r1, [pc, #128]	; (75e4 <_ZN11Diagnostics12troubleshootEhb+0xf0>)
    7562:	e7e4      	b.n	752e <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("This sector already contains data."));
    7564:	4920      	ldr	r1, [pc, #128]	; (75e8 <_ZN11Diagnostics12troubleshootEhb+0xf4>)
    7566:	0020      	movs	r0, r4
    7568:	f7fd fb58 	bl	4c1c <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Please make sure the sectors being written to are erased."));
    756c:	491f      	ldr	r1, [pc, #124]	; (75ec <_ZN11Diagnostics12troubleshootEhb+0xf8>)
    756e:	e7d9      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
    7570:	491f      	ldr	r1, [pc, #124]	; (75f0 <_ZN11Diagnostics12troubleshootEhb+0xfc>)
    7572:	e7d7      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("This function is not supported by the flash memory hardware."));
    7574:	491f      	ldr	r1, [pc, #124]	; (75f4 <_ZN11Diagnostics12troubleshootEhb+0x100>)
    7576:	e7d5      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to suspend/resume operation."));
    7578:	491f      	ldr	r1, [pc, #124]	; (75f8 <_ZN11Diagnostics12troubleshootEhb+0x104>)
    757a:	e7d3      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Write Function has failed errorcheck."));
    757c:	491f      	ldr	r1, [pc, #124]	; (75fc <_ZN11Diagnostics12troubleshootEhb+0x108>)
    757e:	e7d6      	b.n	752e <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("Unable to enable 4-byte addressing."));
    7580:	491f      	ldr	r1, [pc, #124]	; (7600 <_ZN11Diagnostics12troubleshootEhb+0x10c>)
    7582:	e7cf      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to disable 4-byte addressing."));
    7584:	491f      	ldr	r1, [pc, #124]	; (7604 <_ZN11Diagnostics12troubleshootEhb+0x110>)
    7586:	e7cd      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("The chip is currently powered down."));
    7588:	491f      	ldr	r1, [pc, #124]	; (7608 <_ZN11Diagnostics12troubleshootEhb+0x114>)
    758a:	e7cb      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("The Flash chip does not support SFDP."));
    758c:	491f      	ldr	r1, [pc, #124]	; (760c <_ZN11Diagnostics12troubleshootEhb+0x118>)
    758e:	e7c9      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
    7590:	491f      	ldr	r1, [pc, #124]	; (7610 <_ZN11Diagnostics12troubleshootEhb+0x11c>)
    7592:	e7c7      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
    7594:	491f      	ldr	r1, [pc, #124]	; (7614 <_ZN11Diagnostics12troubleshootEhb+0x120>)
    7596:	e7c5      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
    7598:	491f      	ldr	r1, [pc, #124]	; (7618 <_ZN11Diagnostics12troubleshootEhb+0x124>)
    759a:	e7c3      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("No Chip Select pin defined in the custom SPI Array."));
    759c:	491f      	ldr	r1, [pc, #124]	; (761c <_ZN11Diagnostics12troubleshootEhb+0x128>)
    759e:	e7c1      	b.n	7524 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unknown error"));
    75a0:	491f      	ldr	r1, [pc, #124]	; (7620 <_ZN11Diagnostics12troubleshootEhb+0x12c>)
    75a2:	0020      	movs	r0, r4
    75a4:	f7fd fb3a 	bl	4c1c <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
    75a8:	002b      	movs	r3, r5
    75aa:	3b0a      	subs	r3, #10
    75ac:	2b01      	cmp	r3, #1
    75ae:	d9c1      	bls.n	7534 <_ZN11Diagnostics12troubleshootEhb+0x40>
    75b0:	2304      	movs	r3, #4
    75b2:	439d      	bics	r5, r3
    75b4:	2d02      	cmp	r5, #2
    75b6:	d0bd      	beq.n	7534 <_ZN11Diagnostics12troubleshootEhb+0x40>
    75b8:	e7b7      	b.n	752a <_ZN11Diagnostics12troubleshootEhb+0x36>
    75ba:	46c0      	nop			; (mov r8, r8)
    75bc:	20000d1c 	.word	0x20000d1c
    75c0:	0000f8f3 	.word	0x0000f8f3
    75c4:	0000f912 	.word	0x0000f912
    75c8:	0000f943 	.word	0x0000f943
    75cc:	0000f982 	.word	0x0000f982
    75d0:	0000f9c0 	.word	0x0000f9c0
    75d4:	0000fa55 	.word	0x0000fa55
    75d8:	0000fa63 	.word	0x0000fa63
    75dc:	0000fa93 	.word	0x0000fa93
    75e0:	0000fadd 	.word	0x0000fadd
    75e4:	0000faff 	.word	0x0000faff
    75e8:	0000fb42 	.word	0x0000fb42
    75ec:	0000fb65 	.word	0x0000fb65
    75f0:	0000fb9f 	.word	0x0000fb9f
    75f4:	0000fbee 	.word	0x0000fbee
    75f8:	0000fc2b 	.word	0x0000fc2b
    75fc:	0000fc4f 	.word	0x0000fc4f
    7600:	0000fc75 	.word	0x0000fc75
    7604:	0000fc99 	.word	0x0000fc99
    7608:	0000fcbe 	.word	0x0000fcbe
    760c:	0000fce2 	.word	0x0000fce2
    7610:	0000fd08 	.word	0x0000fd08
    7614:	0000fd52 	.word	0x0000fd52
    7618:	0000fd9f 	.word	0x0000fd9f
    761c:	0000fdee 	.word	0x0000fdee
    7620:	0000fe22 	.word	0x0000fe22

00007624 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
    7624:	b510      	push	{r4, lr}
    7626:	4a03      	ldr	r2, [pc, #12]	; (7634 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x10>)
    7628:	4903      	ldr	r1, [pc, #12]	; (7638 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x14>)
    762a:	4804      	ldr	r0, [pc, #16]	; (763c <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x18>)
    762c:	f000 f81d 	bl	766a <__aeabi_atexit>
    7630:	bd10      	pop	{r4, pc}
    7632:	46c0      	nop			; (mov r8, r8)
    7634:	20000000 	.word	0x20000000
    7638:	000074cf 	.word	0x000074cf
    763c:	20000ed0 	.word	0x20000ed0

00007640 <_Z9hdlc_initP14HardwareSerialm>:

// Pointer to Serial console and UART
static HardwareSerial * pU;
#define uart (*pU)
void hdlc_init( HardwareSerial * pUART, uint32_t max_info_len )
{
    7640:	b510      	push	{r4, lr}
    7642:	000c      	movs	r4, r1
	// Set pointer to UART object
	pU = pUART;

	// Set baud rate for the mShield UART
	// NOTE: This baud rate is fixed and cannot be changed
	uart.begin(UART_BAUD_RATE);
    7644:	2196      	movs	r1, #150	; 0x96
	pU = pUART;
    7646:	4b04      	ldr	r3, [pc, #16]	; (7658 <_Z9hdlc_initP14HardwareSerialm+0x18>)
	uart.begin(UART_BAUD_RATE);
    7648:	0209      	lsls	r1, r1, #8
	pU = pUART;
    764a:	6018      	str	r0, [r3, #0]
	uart.begin(UART_BAUD_RATE);
    764c:	6803      	ldr	r3, [r0, #0]
    764e:	69db      	ldr	r3, [r3, #28]
    7650:	4798      	blx	r3
	
	// Set the max payload size
	max_payload_size = max_info_len;
    7652:	4b02      	ldr	r3, [pc, #8]	; (765c <_Z9hdlc_initP14HardwareSerialm+0x1c>)
    7654:	601c      	str	r4, [r3, #0]

} // hdlc_set_serial
    7656:	bd10      	pop	{r4, pc}
    7658:	20000ed8 	.word	0x20000ed8
    765c:	20000ed4 	.word	0x20000ed4

00007660 <_Z16hdlc_addr_encodem>:
 * Limited to single byte encoding only
*/
uint8_t
hdlc_addr_encode(uint32_t address)
{    
    return ((address & 0x7F) << 1) | 1;
    7660:	0043      	lsls	r3, r0, #1
    7662:	2001      	movs	r0, #1
    7664:	4318      	orrs	r0, r3
    7666:	b2c0      	uxtb	r0, r0
}
    7668:	4770      	bx	lr

0000766a <__aeabi_atexit>:
    766a:	000b      	movs	r3, r1
    766c:	b510      	push	{r4, lr}
    766e:	0001      	movs	r1, r0
    7670:	0018      	movs	r0, r3
    7672:	f003 faa9 	bl	abc8 <__cxa_atexit>
    7676:	bd10      	pop	{r4, pc}

00007678 <exp>:
    7678:	b5f0      	push	{r4, r5, r6, r7, lr}
    767a:	4647      	mov	r7, r8
    767c:	46ce      	mov	lr, r9
    767e:	b580      	push	{r7, lr}
    7680:	b08b      	sub	sp, #44	; 0x2c
    7682:	0004      	movs	r4, r0
    7684:	000d      	movs	r5, r1
    7686:	f000 f8cb 	bl	7820 <__ieee754_exp>
    768a:	4b34      	ldr	r3, [pc, #208]	; (775c <exp+0xe4>)
    768c:	0006      	movs	r6, r0
    768e:	4698      	mov	r8, r3
    7690:	781b      	ldrb	r3, [r3, #0]
    7692:	000f      	movs	r7, r1
    7694:	b25b      	sxtb	r3, r3
    7696:	3301      	adds	r3, #1
    7698:	d038      	beq.n	770c <exp+0x94>
    769a:	0020      	movs	r0, r4
    769c:	0029      	movs	r1, r5
    769e:	f000 fa8d 	bl	7bbc <finite>
    76a2:	2800      	cmp	r0, #0
    76a4:	d032      	beq.n	770c <exp+0x94>
    76a6:	4a2e      	ldr	r2, [pc, #184]	; (7760 <exp+0xe8>)
    76a8:	4b2e      	ldr	r3, [pc, #184]	; (7764 <exp+0xec>)
    76aa:	0020      	movs	r0, r4
    76ac:	0029      	movs	r1, r5
    76ae:	f000 fc3b 	bl	7f28 <__aeabi_dcmpgt>
    76b2:	4681      	mov	r9, r0
    76b4:	2800      	cmp	r0, #0
    76b6:	d130      	bne.n	771a <exp+0xa2>
    76b8:	4a2b      	ldr	r2, [pc, #172]	; (7768 <exp+0xf0>)
    76ba:	4b2c      	ldr	r3, [pc, #176]	; (776c <exp+0xf4>)
    76bc:	0020      	movs	r0, r4
    76be:	0029      	movs	r1, r5
    76c0:	f000 fc1e 	bl	7f00 <__aeabi_dcmplt>
    76c4:	2800      	cmp	r0, #0
    76c6:	d021      	beq.n	770c <exp+0x94>
    76c8:	2304      	movs	r3, #4
    76ca:	9300      	str	r3, [sp, #0]
    76cc:	4b28      	ldr	r3, [pc, #160]	; (7770 <exp+0xf8>)
    76ce:	2200      	movs	r2, #0
    76d0:	9301      	str	r3, [sp, #4]
    76d2:	464b      	mov	r3, r9
    76d4:	9308      	str	r3, [sp, #32]
    76d6:	2300      	movs	r3, #0
    76d8:	9206      	str	r2, [sp, #24]
    76da:	9307      	str	r3, [sp, #28]
    76dc:	4643      	mov	r3, r8
    76de:	781b      	ldrb	r3, [r3, #0]
    76e0:	466e      	mov	r6, sp
    76e2:	b25b      	sxtb	r3, r3
    76e4:	9404      	str	r4, [sp, #16]
    76e6:	9505      	str	r5, [sp, #20]
    76e8:	9402      	str	r4, [sp, #8]
    76ea:	9503      	str	r5, [sp, #12]
    76ec:	2b02      	cmp	r3, #2
    76ee:	d030      	beq.n	7752 <exp+0xda>
    76f0:	0030      	movs	r0, r6
    76f2:	f000 fa6d 	bl	7bd0 <matherr>
    76f6:	2800      	cmp	r0, #0
    76f8:	d02b      	beq.n	7752 <exp+0xda>
    76fa:	6a33      	ldr	r3, [r6, #32]
    76fc:	2b00      	cmp	r3, #0
    76fe:	d003      	beq.n	7708 <exp+0x90>
    7700:	f003 fa70 	bl	abe4 <__errno>
    7704:	6a33      	ldr	r3, [r6, #32]
    7706:	6003      	str	r3, [r0, #0]
    7708:	69f7      	ldr	r7, [r6, #28]
    770a:	69b6      	ldr	r6, [r6, #24]
    770c:	0030      	movs	r0, r6
    770e:	0039      	movs	r1, r7
    7710:	b00b      	add	sp, #44	; 0x2c
    7712:	bc0c      	pop	{r2, r3}
    7714:	4690      	mov	r8, r2
    7716:	4699      	mov	r9, r3
    7718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    771a:	2303      	movs	r3, #3
    771c:	9300      	str	r3, [sp, #0]
    771e:	4b14      	ldr	r3, [pc, #80]	; (7770 <exp+0xf8>)
    7720:	466e      	mov	r6, sp
    7722:	9301      	str	r3, [sp, #4]
    7724:	2300      	movs	r3, #0
    7726:	9308      	str	r3, [sp, #32]
    7728:	4643      	mov	r3, r8
    772a:	781b      	ldrb	r3, [r3, #0]
    772c:	9404      	str	r4, [sp, #16]
    772e:	9505      	str	r5, [sp, #20]
    7730:	b25b      	sxtb	r3, r3
    7732:	9402      	str	r4, [sp, #8]
    7734:	9503      	str	r5, [sp, #12]
    7736:	2b00      	cmp	r3, #0
    7738:	d105      	bne.n	7746 <exp+0xce>
    773a:	22e0      	movs	r2, #224	; 0xe0
    773c:	4b0d      	ldr	r3, [pc, #52]	; (7774 <exp+0xfc>)
    773e:	0612      	lsls	r2, r2, #24
    7740:	9206      	str	r2, [sp, #24]
    7742:	9307      	str	r3, [sp, #28]
    7744:	e7d4      	b.n	76f0 <exp+0x78>
    7746:	2000      	movs	r0, #0
    7748:	490b      	ldr	r1, [pc, #44]	; (7778 <exp+0x100>)
    774a:	9006      	str	r0, [sp, #24]
    774c:	9107      	str	r1, [sp, #28]
    774e:	2b02      	cmp	r3, #2
    7750:	d1ce      	bne.n	76f0 <exp+0x78>
    7752:	f003 fa47 	bl	abe4 <__errno>
    7756:	2322      	movs	r3, #34	; 0x22
    7758:	6003      	str	r3, [r0, #0]
    775a:	e7ce      	b.n	76fa <exp+0x82>
    775c:	200000ac 	.word	0x200000ac
    7760:	fefa39ef 	.word	0xfefa39ef
    7764:	40862e42 	.word	0x40862e42
    7768:	d52d3051 	.word	0xd52d3051
    776c:	c0874910 	.word	0xc0874910
    7770:	0000fef0 	.word	0x0000fef0
    7774:	47efffff 	.word	0x47efffff
    7778:	7ff00000 	.word	0x7ff00000

0000777c <sqrtf>:
    777c:	b5f0      	push	{r4, r5, r6, r7, lr}
    777e:	2500      	movs	r5, #0
    7780:	b08d      	sub	sp, #52	; 0x34
    7782:	1c04      	adds	r4, r0, #0
    7784:	f000 f9be 	bl	7b04 <__ieee754_sqrtf>
    7788:	4b23      	ldr	r3, [pc, #140]	; (7818 <sqrtf+0x9c>)
    778a:	1c06      	adds	r6, r0, #0
    778c:	575d      	ldrsb	r5, [r3, r5]
    778e:	1c6b      	adds	r3, r5, #1
    7790:	d00b      	beq.n	77aa <sqrtf+0x2e>
    7792:	1c21      	adds	r1, r4, #0
    7794:	1c20      	adds	r0, r4, #0
    7796:	f001 fa89 	bl	8cac <__aeabi_fcmpun>
    779a:	1e07      	subs	r7, r0, #0
    779c:	d105      	bne.n	77aa <sqrtf+0x2e>
    779e:	2100      	movs	r1, #0
    77a0:	1c20      	adds	r0, r4, #0
    77a2:	f000 fbe7 	bl	7f74 <__aeabi_fcmplt>
    77a6:	2800      	cmp	r0, #0
    77a8:	d102      	bne.n	77b0 <sqrtf+0x34>
    77aa:	1c30      	adds	r0, r6, #0
    77ac:	b00d      	add	sp, #52	; 0x34
    77ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77b0:	2301      	movs	r3, #1
    77b2:	9302      	str	r3, [sp, #8]
    77b4:	4b19      	ldr	r3, [pc, #100]	; (781c <sqrtf+0xa0>)
    77b6:	1c20      	adds	r0, r4, #0
    77b8:	9303      	str	r3, [sp, #12]
    77ba:	970a      	str	r7, [sp, #40]	; 0x28
    77bc:	f003 f8ec 	bl	a998 <__aeabi_f2d>
    77c0:	2200      	movs	r2, #0
    77c2:	9006      	str	r0, [sp, #24]
    77c4:	9107      	str	r1, [sp, #28]
    77c6:	9004      	str	r0, [sp, #16]
    77c8:	9105      	str	r1, [sp, #20]
    77ca:	2300      	movs	r3, #0
    77cc:	2d00      	cmp	r5, #0
    77ce:	d015      	beq.n	77fc <sqrtf+0x80>
    77d0:	0010      	movs	r0, r2
    77d2:	0019      	movs	r1, r3
    77d4:	f001 fe48 	bl	9468 <__aeabi_ddiv>
    77d8:	9008      	str	r0, [sp, #32]
    77da:	9109      	str	r1, [sp, #36]	; 0x24
    77dc:	2d02      	cmp	r5, #2
    77de:	d10f      	bne.n	7800 <sqrtf+0x84>
    77e0:	f003 fa00 	bl	abe4 <__errno>
    77e4:	2321      	movs	r3, #33	; 0x21
    77e6:	6003      	str	r3, [r0, #0]
    77e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    77ea:	9301      	str	r3, [sp, #4]
    77ec:	2b00      	cmp	r3, #0
    77ee:	d10d      	bne.n	780c <sqrtf+0x90>
    77f0:	9808      	ldr	r0, [sp, #32]
    77f2:	9909      	ldr	r1, [sp, #36]	; 0x24
    77f4:	f003 f922 	bl	aa3c <__aeabi_d2f>
    77f8:	1c06      	adds	r6, r0, #0
    77fa:	e7d6      	b.n	77aa <sqrtf+0x2e>
    77fc:	9208      	str	r2, [sp, #32]
    77fe:	9309      	str	r3, [sp, #36]	; 0x24
    7800:	a802      	add	r0, sp, #8
    7802:	f000 f9e5 	bl	7bd0 <matherr>
    7806:	2800      	cmp	r0, #0
    7808:	d1ee      	bne.n	77e8 <sqrtf+0x6c>
    780a:	e7e9      	b.n	77e0 <sqrtf+0x64>
    780c:	f003 f9ea 	bl	abe4 <__errno>
    7810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7812:	9301      	str	r3, [sp, #4]
    7814:	6003      	str	r3, [r0, #0]
    7816:	e7eb      	b.n	77f0 <sqrtf+0x74>
    7818:	200000ac 	.word	0x200000ac
    781c:	0000fef4 	.word	0x0000fef4

00007820 <__ieee754_exp>:
    7820:	b5f0      	push	{r4, r5, r6, r7, lr}
    7822:	46d6      	mov	lr, sl
    7824:	b500      	push	{lr}
    7826:	004b      	lsls	r3, r1, #1
    7828:	000e      	movs	r6, r1
    782a:	0fcc      	lsrs	r4, r1, #31
    782c:	4995      	ldr	r1, [pc, #596]	; (7a84 <__ieee754_exp+0x264>)
    782e:	b084      	sub	sp, #16
    7830:	0007      	movs	r7, r0
    7832:	085b      	lsrs	r3, r3, #1
    7834:	428b      	cmp	r3, r1
    7836:	d90e      	bls.n	7856 <__ieee754_exp+0x36>
    7838:	4993      	ldr	r1, [pc, #588]	; (7a88 <__ieee754_exp+0x268>)
    783a:	428b      	cmp	r3, r1
    783c:	d800      	bhi.n	7840 <__ieee754_exp+0x20>
    783e:	e084      	b.n	794a <__ieee754_exp+0x12a>
    7840:	0332      	lsls	r2, r6, #12
    7842:	0b12      	lsrs	r2, r2, #12
    7844:	4302      	orrs	r2, r0
    7846:	d000      	beq.n	784a <__ieee754_exp+0x2a>
    7848:	e0f7      	b.n	7a3a <__ieee754_exp+0x21a>
    784a:	0031      	movs	r1, r6
    784c:	2c00      	cmp	r4, #0
    784e:	d078      	beq.n	7942 <__ieee754_exp+0x122>
    7850:	2000      	movs	r0, #0
    7852:	2100      	movs	r1, #0
    7854:	e075      	b.n	7942 <__ieee754_exp+0x122>
    7856:	4a8d      	ldr	r2, [pc, #564]	; (7a8c <__ieee754_exp+0x26c>)
    7858:	4293      	cmp	r3, r2
    785a:	d900      	bls.n	785e <__ieee754_exp+0x3e>
    785c:	e0b6      	b.n	79cc <__ieee754_exp+0x1ac>
    785e:	4a8c      	ldr	r2, [pc, #560]	; (7a90 <__ieee754_exp+0x270>)
    7860:	4293      	cmp	r3, r2
    7862:	d800      	bhi.n	7866 <__ieee754_exp+0x46>
    7864:	e0ca      	b.n	79fc <__ieee754_exp+0x1dc>
    7866:	2300      	movs	r3, #0
    7868:	469a      	mov	sl, r3
    786a:	003a      	movs	r2, r7
    786c:	0033      	movs	r3, r6
    786e:	0038      	movs	r0, r7
    7870:	0031      	movs	r1, r6
    7872:	f002 fa2d 	bl	9cd0 <__aeabi_dmul>
    7876:	0004      	movs	r4, r0
    7878:	000d      	movs	r5, r1
    787a:	4a86      	ldr	r2, [pc, #536]	; (7a94 <__ieee754_exp+0x274>)
    787c:	4b86      	ldr	r3, [pc, #536]	; (7a98 <__ieee754_exp+0x278>)
    787e:	f002 fa27 	bl	9cd0 <__aeabi_dmul>
    7882:	4a86      	ldr	r2, [pc, #536]	; (7a9c <__ieee754_exp+0x27c>)
    7884:	4b86      	ldr	r3, [pc, #536]	; (7aa0 <__ieee754_exp+0x280>)
    7886:	f002 fca3 	bl	a1d0 <__aeabi_dsub>
    788a:	0022      	movs	r2, r4
    788c:	002b      	movs	r3, r5
    788e:	f002 fa1f 	bl	9cd0 <__aeabi_dmul>
    7892:	4a84      	ldr	r2, [pc, #528]	; (7aa4 <__ieee754_exp+0x284>)
    7894:	4b84      	ldr	r3, [pc, #528]	; (7aa8 <__ieee754_exp+0x288>)
    7896:	f001 fad7 	bl	8e48 <__aeabi_dadd>
    789a:	0022      	movs	r2, r4
    789c:	002b      	movs	r3, r5
    789e:	f002 fa17 	bl	9cd0 <__aeabi_dmul>
    78a2:	4a82      	ldr	r2, [pc, #520]	; (7aac <__ieee754_exp+0x28c>)
    78a4:	4b82      	ldr	r3, [pc, #520]	; (7ab0 <__ieee754_exp+0x290>)
    78a6:	f002 fc93 	bl	a1d0 <__aeabi_dsub>
    78aa:	0022      	movs	r2, r4
    78ac:	002b      	movs	r3, r5
    78ae:	f002 fa0f 	bl	9cd0 <__aeabi_dmul>
    78b2:	4a80      	ldr	r2, [pc, #512]	; (7ab4 <__ieee754_exp+0x294>)
    78b4:	4b80      	ldr	r3, [pc, #512]	; (7ab8 <__ieee754_exp+0x298>)
    78b6:	f001 fac7 	bl	8e48 <__aeabi_dadd>
    78ba:	0022      	movs	r2, r4
    78bc:	002b      	movs	r3, r5
    78be:	f002 fa07 	bl	9cd0 <__aeabi_dmul>
    78c2:	0002      	movs	r2, r0
    78c4:	000b      	movs	r3, r1
    78c6:	0038      	movs	r0, r7
    78c8:	0031      	movs	r1, r6
    78ca:	f002 fc81 	bl	a1d0 <__aeabi_dsub>
    78ce:	4653      	mov	r3, sl
    78d0:	0004      	movs	r4, r0
    78d2:	000d      	movs	r5, r1
    78d4:	0002      	movs	r2, r0
    78d6:	2b00      	cmp	r3, #0
    78d8:	d100      	bne.n	78dc <__ieee754_exp+0xbc>
    78da:	e0b4      	b.n	7a46 <__ieee754_exp+0x226>
    78dc:	000b      	movs	r3, r1
    78de:	0038      	movs	r0, r7
    78e0:	0031      	movs	r1, r6
    78e2:	f002 f9f5 	bl	9cd0 <__aeabi_dmul>
    78e6:	000f      	movs	r7, r1
    78e8:	2180      	movs	r1, #128	; 0x80
    78ea:	0006      	movs	r6, r0
    78ec:	0022      	movs	r2, r4
    78ee:	002b      	movs	r3, r5
    78f0:	2000      	movs	r0, #0
    78f2:	05c9      	lsls	r1, r1, #23
    78f4:	f002 fc6c 	bl	a1d0 <__aeabi_dsub>
    78f8:	0002      	movs	r2, r0
    78fa:	000b      	movs	r3, r1
    78fc:	0030      	movs	r0, r6
    78fe:	0039      	movs	r1, r7
    7900:	f001 fdb2 	bl	9468 <__aeabi_ddiv>
    7904:	0002      	movs	r2, r0
    7906:	000b      	movs	r3, r1
    7908:	9802      	ldr	r0, [sp, #8]
    790a:	9903      	ldr	r1, [sp, #12]
    790c:	f002 fc60 	bl	a1d0 <__aeabi_dsub>
    7910:	9a00      	ldr	r2, [sp, #0]
    7912:	9b01      	ldr	r3, [sp, #4]
    7914:	f002 fc5c 	bl	a1d0 <__aeabi_dsub>
    7918:	000b      	movs	r3, r1
    791a:	0002      	movs	r2, r0
    791c:	4967      	ldr	r1, [pc, #412]	; (7abc <__ieee754_exp+0x29c>)
    791e:	2000      	movs	r0, #0
    7920:	f002 fc56 	bl	a1d0 <__aeabi_dsub>
    7924:	4b66      	ldr	r3, [pc, #408]	; (7ac0 <__ieee754_exp+0x2a0>)
    7926:	459a      	cmp	sl, r3
    7928:	db00      	blt.n	792c <__ieee754_exp+0x10c>
    792a:	e07a      	b.n	7a22 <__ieee754_exp+0x202>
    792c:	24fa      	movs	r4, #250	; 0xfa
    792e:	00a4      	lsls	r4, r4, #2
    7930:	4454      	add	r4, sl
    7932:	0524      	lsls	r4, r4, #20
    7934:	1863      	adds	r3, r4, r1
    7936:	0019      	movs	r1, r3
    7938:	23b8      	movs	r3, #184	; 0xb8
    793a:	2200      	movs	r2, #0
    793c:	045b      	lsls	r3, r3, #17
    793e:	f002 f9c7 	bl	9cd0 <__aeabi_dmul>
    7942:	b004      	add	sp, #16
    7944:	bc04      	pop	{r2}
    7946:	4692      	mov	sl, r2
    7948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    794a:	4a5e      	ldr	r2, [pc, #376]	; (7ac4 <__ieee754_exp+0x2a4>)
    794c:	4b5e      	ldr	r3, [pc, #376]	; (7ac8 <__ieee754_exp+0x2a8>)
    794e:	0031      	movs	r1, r6
    7950:	f000 faea 	bl	7f28 <__aeabi_dcmpgt>
    7954:	2800      	cmp	r0, #0
    7956:	d169      	bne.n	7a2c <__ieee754_exp+0x20c>
    7958:	4a5c      	ldr	r2, [pc, #368]	; (7acc <__ieee754_exp+0x2ac>)
    795a:	4b5d      	ldr	r3, [pc, #372]	; (7ad0 <__ieee754_exp+0x2b0>)
    795c:	0038      	movs	r0, r7
    795e:	0031      	movs	r1, r6
    7960:	f000 face 	bl	7f00 <__aeabi_dcmplt>
    7964:	2800      	cmp	r0, #0
    7966:	d000      	beq.n	796a <__ieee754_exp+0x14a>
    7968:	e772      	b.n	7850 <__ieee754_exp+0x30>
    796a:	4b5a      	ldr	r3, [pc, #360]	; (7ad4 <__ieee754_exp+0x2b4>)
    796c:	00e4      	lsls	r4, r4, #3
    796e:	191c      	adds	r4, r3, r4
    7970:	4a59      	ldr	r2, [pc, #356]	; (7ad8 <__ieee754_exp+0x2b8>)
    7972:	4b5a      	ldr	r3, [pc, #360]	; (7adc <__ieee754_exp+0x2bc>)
    7974:	0038      	movs	r0, r7
    7976:	0031      	movs	r1, r6
    7978:	f002 f9aa 	bl	9cd0 <__aeabi_dmul>
    797c:	6822      	ldr	r2, [r4, #0]
    797e:	6863      	ldr	r3, [r4, #4]
    7980:	f001 fa62 	bl	8e48 <__aeabi_dadd>
    7984:	f002 ff5a 	bl	a83c <__aeabi_d2iz>
    7988:	4682      	mov	sl, r0
    798a:	f002 ff8b 	bl	a8a4 <__aeabi_i2d>
    798e:	4a54      	ldr	r2, [pc, #336]	; (7ae0 <__ieee754_exp+0x2c0>)
    7990:	4b54      	ldr	r3, [pc, #336]	; (7ae4 <__ieee754_exp+0x2c4>)
    7992:	0004      	movs	r4, r0
    7994:	000d      	movs	r5, r1
    7996:	f002 f99b 	bl	9cd0 <__aeabi_dmul>
    799a:	0002      	movs	r2, r0
    799c:	000b      	movs	r3, r1
    799e:	0038      	movs	r0, r7
    79a0:	0031      	movs	r1, r6
    79a2:	f002 fc15 	bl	a1d0 <__aeabi_dsub>
    79a6:	4a50      	ldr	r2, [pc, #320]	; (7ae8 <__ieee754_exp+0x2c8>)
    79a8:	9000      	str	r0, [sp, #0]
    79aa:	9101      	str	r1, [sp, #4]
    79ac:	4b4f      	ldr	r3, [pc, #316]	; (7aec <__ieee754_exp+0x2cc>)
    79ae:	0020      	movs	r0, r4
    79b0:	0029      	movs	r1, r5
    79b2:	f002 f98d 	bl	9cd0 <__aeabi_dmul>
    79b6:	9002      	str	r0, [sp, #8]
    79b8:	9103      	str	r1, [sp, #12]
    79ba:	9a02      	ldr	r2, [sp, #8]
    79bc:	9b03      	ldr	r3, [sp, #12]
    79be:	9800      	ldr	r0, [sp, #0]
    79c0:	9901      	ldr	r1, [sp, #4]
    79c2:	f002 fc05 	bl	a1d0 <__aeabi_dsub>
    79c6:	0007      	movs	r7, r0
    79c8:	000e      	movs	r6, r1
    79ca:	e74e      	b.n	786a <__ieee754_exp+0x4a>
    79cc:	4a48      	ldr	r2, [pc, #288]	; (7af0 <__ieee754_exp+0x2d0>)
    79ce:	4293      	cmp	r3, r2
    79d0:	d8cb      	bhi.n	796a <__ieee754_exp+0x14a>
    79d2:	4b48      	ldr	r3, [pc, #288]	; (7af4 <__ieee754_exp+0x2d4>)
    79d4:	00e5      	lsls	r5, r4, #3
    79d6:	195b      	adds	r3, r3, r5
    79d8:	681a      	ldr	r2, [r3, #0]
    79da:	685b      	ldr	r3, [r3, #4]
    79dc:	0031      	movs	r1, r6
    79de:	f002 fbf7 	bl	a1d0 <__aeabi_dsub>
    79e2:	4b45      	ldr	r3, [pc, #276]	; (7af8 <__ieee754_exp+0x2d8>)
    79e4:	9000      	str	r0, [sp, #0]
    79e6:	9101      	str	r1, [sp, #4]
    79e8:	195b      	adds	r3, r3, r5
    79ea:	681a      	ldr	r2, [r3, #0]
    79ec:	685b      	ldr	r3, [r3, #4]
    79ee:	9202      	str	r2, [sp, #8]
    79f0:	9303      	str	r3, [sp, #12]
    79f2:	2301      	movs	r3, #1
    79f4:	1b1b      	subs	r3, r3, r4
    79f6:	1b1b      	subs	r3, r3, r4
    79f8:	469a      	mov	sl, r3
    79fa:	e7de      	b.n	79ba <__ieee754_exp+0x19a>
    79fc:	4a3f      	ldr	r2, [pc, #252]	; (7afc <__ieee754_exp+0x2dc>)
    79fe:	4b40      	ldr	r3, [pc, #256]	; (7b00 <__ieee754_exp+0x2e0>)
    7a00:	0031      	movs	r1, r6
    7a02:	f001 fa21 	bl	8e48 <__aeabi_dadd>
    7a06:	2200      	movs	r2, #0
    7a08:	4b2c      	ldr	r3, [pc, #176]	; (7abc <__ieee754_exp+0x29c>)
    7a0a:	f000 fa8d 	bl	7f28 <__aeabi_dcmpgt>
    7a0e:	2800      	cmp	r0, #0
    7a10:	d100      	bne.n	7a14 <__ieee754_exp+0x1f4>
    7a12:	e728      	b.n	7866 <__ieee754_exp+0x46>
    7a14:	2200      	movs	r2, #0
    7a16:	4b29      	ldr	r3, [pc, #164]	; (7abc <__ieee754_exp+0x29c>)
    7a18:	0038      	movs	r0, r7
    7a1a:	0031      	movs	r1, r6
    7a1c:	f001 fa14 	bl	8e48 <__aeabi_dadd>
    7a20:	e78f      	b.n	7942 <__ieee754_exp+0x122>
    7a22:	4654      	mov	r4, sl
    7a24:	0524      	lsls	r4, r4, #20
    7a26:	1863      	adds	r3, r4, r1
    7a28:	0019      	movs	r1, r3
    7a2a:	e78a      	b.n	7942 <__ieee754_exp+0x122>
    7a2c:	4a33      	ldr	r2, [pc, #204]	; (7afc <__ieee754_exp+0x2dc>)
    7a2e:	4b34      	ldr	r3, [pc, #208]	; (7b00 <__ieee754_exp+0x2e0>)
    7a30:	0010      	movs	r0, r2
    7a32:	0019      	movs	r1, r3
    7a34:	f002 f94c 	bl	9cd0 <__aeabi_dmul>
    7a38:	e783      	b.n	7942 <__ieee754_exp+0x122>
    7a3a:	0002      	movs	r2, r0
    7a3c:	0033      	movs	r3, r6
    7a3e:	0031      	movs	r1, r6
    7a40:	f001 fa02 	bl	8e48 <__aeabi_dadd>
    7a44:	e77d      	b.n	7942 <__ieee754_exp+0x122>
    7a46:	000b      	movs	r3, r1
    7a48:	0038      	movs	r0, r7
    7a4a:	0031      	movs	r1, r6
    7a4c:	f002 f940 	bl	9cd0 <__aeabi_dmul>
    7a50:	2380      	movs	r3, #128	; 0x80
    7a52:	9000      	str	r0, [sp, #0]
    7a54:	9101      	str	r1, [sp, #4]
    7a56:	2200      	movs	r2, #0
    7a58:	05db      	lsls	r3, r3, #23
    7a5a:	0020      	movs	r0, r4
    7a5c:	0029      	movs	r1, r5
    7a5e:	f002 fbb7 	bl	a1d0 <__aeabi_dsub>
    7a62:	0002      	movs	r2, r0
    7a64:	000b      	movs	r3, r1
    7a66:	9800      	ldr	r0, [sp, #0]
    7a68:	9901      	ldr	r1, [sp, #4]
    7a6a:	f001 fcfd 	bl	9468 <__aeabi_ddiv>
    7a6e:	003a      	movs	r2, r7
    7a70:	0033      	movs	r3, r6
    7a72:	f002 fbad 	bl	a1d0 <__aeabi_dsub>
    7a76:	0002      	movs	r2, r0
    7a78:	000b      	movs	r3, r1
    7a7a:	2000      	movs	r0, #0
    7a7c:	490f      	ldr	r1, [pc, #60]	; (7abc <__ieee754_exp+0x29c>)
    7a7e:	f002 fba7 	bl	a1d0 <__aeabi_dsub>
    7a82:	e75e      	b.n	7942 <__ieee754_exp+0x122>
    7a84:	40862e41 	.word	0x40862e41
    7a88:	7fefffff 	.word	0x7fefffff
    7a8c:	3fd62e42 	.word	0x3fd62e42
    7a90:	3e2fffff 	.word	0x3e2fffff
    7a94:	72bea4d0 	.word	0x72bea4d0
    7a98:	3e663769 	.word	0x3e663769
    7a9c:	c5d26bf1 	.word	0xc5d26bf1
    7aa0:	3ebbbd41 	.word	0x3ebbbd41
    7aa4:	af25de2c 	.word	0xaf25de2c
    7aa8:	3f11566a 	.word	0x3f11566a
    7aac:	16bebd93 	.word	0x16bebd93
    7ab0:	3f66c16c 	.word	0x3f66c16c
    7ab4:	5555553e 	.word	0x5555553e
    7ab8:	3fc55555 	.word	0x3fc55555
    7abc:	3ff00000 	.word	0x3ff00000
    7ac0:	fffffc03 	.word	0xfffffc03
    7ac4:	fefa39ef 	.word	0xfefa39ef
    7ac8:	40862e42 	.word	0x40862e42
    7acc:	d52d3051 	.word	0xd52d3051
    7ad0:	c0874910 	.word	0xc0874910
    7ad4:	0000ff00 	.word	0x0000ff00
    7ad8:	652b82fe 	.word	0x652b82fe
    7adc:	3ff71547 	.word	0x3ff71547
    7ae0:	fee00000 	.word	0xfee00000
    7ae4:	3fe62e42 	.word	0x3fe62e42
    7ae8:	35793c76 	.word	0x35793c76
    7aec:	3dea39ef 	.word	0x3dea39ef
    7af0:	3ff0a2b1 	.word	0x3ff0a2b1
    7af4:	0000ff10 	.word	0x0000ff10
    7af8:	0000ff20 	.word	0x0000ff20
    7afc:	8800759c 	.word	0x8800759c
    7b00:	7e37e43c 	.word	0x7e37e43c

00007b04 <__ieee754_sqrtf>:
    7b04:	492b      	ldr	r1, [pc, #172]	; (7bb4 <__ieee754_sqrtf+0xb0>)
    7b06:	0042      	lsls	r2, r0, #1
    7b08:	b570      	push	{r4, r5, r6, lr}
    7b0a:	0003      	movs	r3, r0
    7b0c:	1c04      	adds	r4, r0, #0
    7b0e:	0852      	lsrs	r2, r2, #1
    7b10:	428a      	cmp	r2, r1
    7b12:	d83a      	bhi.n	7b8a <__ieee754_sqrtf+0x86>
    7b14:	2a00      	cmp	r2, #0
    7b16:	d037      	beq.n	7b88 <__ieee754_sqrtf+0x84>
    7b18:	2800      	cmp	r0, #0
    7b1a:	db3f      	blt.n	7b9c <__ieee754_sqrtf+0x98>
    7b1c:	4926      	ldr	r1, [pc, #152]	; (7bb8 <__ieee754_sqrtf+0xb4>)
    7b1e:	15c6      	asrs	r6, r0, #23
    7b20:	428a      	cmp	r2, r1
    7b22:	d80b      	bhi.n	7b3c <__ieee754_sqrtf+0x38>
    7b24:	2080      	movs	r0, #128	; 0x80
    7b26:	0400      	lsls	r0, r0, #16
    7b28:	4220      	tst	r0, r4
    7b2a:	d13e      	bne.n	7baa <__ieee754_sqrtf+0xa6>
    7b2c:	2200      	movs	r2, #0
    7b2e:	e000      	b.n	7b32 <__ieee754_sqrtf+0x2e>
    7b30:	000a      	movs	r2, r1
    7b32:	005b      	lsls	r3, r3, #1
    7b34:	1c51      	adds	r1, r2, #1
    7b36:	4203      	tst	r3, r0
    7b38:	d0fa      	beq.n	7b30 <__ieee754_sqrtf+0x2c>
    7b3a:	1ab6      	subs	r6, r6, r2
    7b3c:	025b      	lsls	r3, r3, #9
    7b3e:	0a5a      	lsrs	r2, r3, #9
    7b40:	2380      	movs	r3, #128	; 0x80
    7b42:	3e7f      	subs	r6, #127	; 0x7f
    7b44:	041b      	lsls	r3, r3, #16
    7b46:	4313      	orrs	r3, r2
    7b48:	07f2      	lsls	r2, r6, #31
    7b4a:	d425      	bmi.n	7b98 <__ieee754_sqrtf+0x94>
    7b4c:	2280      	movs	r2, #128	; 0x80
    7b4e:	1070      	asrs	r0, r6, #1
    7b50:	2119      	movs	r1, #25
    7b52:	2600      	movs	r6, #0
    7b54:	2500      	movs	r5, #0
    7b56:	005b      	lsls	r3, r3, #1
    7b58:	0452      	lsls	r2, r2, #17
    7b5a:	18ac      	adds	r4, r5, r2
    7b5c:	429c      	cmp	r4, r3
    7b5e:	dc02      	bgt.n	7b66 <__ieee754_sqrtf+0x62>
    7b60:	18a5      	adds	r5, r4, r2
    7b62:	1b1b      	subs	r3, r3, r4
    7b64:	18b6      	adds	r6, r6, r2
    7b66:	3901      	subs	r1, #1
    7b68:	005b      	lsls	r3, r3, #1
    7b6a:	0852      	lsrs	r2, r2, #1
    7b6c:	2900      	cmp	r1, #0
    7b6e:	d1f4      	bne.n	7b5a <__ieee754_sqrtf+0x56>
    7b70:	2b00      	cmp	r3, #0
    7b72:	d002      	beq.n	7b7a <__ieee754_sqrtf+0x76>
    7b74:	2301      	movs	r3, #1
    7b76:	3601      	adds	r6, #1
    7b78:	439e      	bics	r6, r3
    7b7a:	23fc      	movs	r3, #252	; 0xfc
    7b7c:	059b      	lsls	r3, r3, #22
    7b7e:	469c      	mov	ip, r3
    7b80:	1076      	asrs	r6, r6, #1
    7b82:	4466      	add	r6, ip
    7b84:	05c0      	lsls	r0, r0, #23
    7b86:	1980      	adds	r0, r0, r6
    7b88:	bd70      	pop	{r4, r5, r6, pc}
    7b8a:	1c01      	adds	r1, r0, #0
    7b8c:	f000 fdd2 	bl	8734 <__aeabi_fmul>
    7b90:	1c21      	adds	r1, r4, #0
    7b92:	f000 fa4d 	bl	8030 <__aeabi_fadd>
    7b96:	e7f7      	b.n	7b88 <__ieee754_sqrtf+0x84>
    7b98:	005b      	lsls	r3, r3, #1
    7b9a:	e7d7      	b.n	7b4c <__ieee754_sqrtf+0x48>
    7b9c:	1c01      	adds	r1, r0, #0
    7b9e:	f000 fee9 	bl	8974 <__aeabi_fsub>
    7ba2:	1c01      	adds	r1, r0, #0
    7ba4:	f000 fbd6 	bl	8354 <__aeabi_fdiv>
    7ba8:	e7ee      	b.n	7b88 <__ieee754_sqrtf+0x84>
    7baa:	2201      	movs	r2, #1
    7bac:	4252      	negs	r2, r2
    7bae:	1ab6      	subs	r6, r6, r2
    7bb0:	e7c4      	b.n	7b3c <__ieee754_sqrtf+0x38>
    7bb2:	46c0      	nop			; (mov r8, r8)
    7bb4:	7f7fffff 	.word	0x7f7fffff
    7bb8:	007fffff 	.word	0x007fffff

00007bbc <finite>:
    7bbc:	4b03      	ldr	r3, [pc, #12]	; (7bcc <finite+0x10>)
    7bbe:	0048      	lsls	r0, r1, #1
    7bc0:	469c      	mov	ip, r3
    7bc2:	0840      	lsrs	r0, r0, #1
    7bc4:	4460      	add	r0, ip
    7bc6:	0fc0      	lsrs	r0, r0, #31
    7bc8:	4770      	bx	lr
    7bca:	46c0      	nop			; (mov r8, r8)
    7bcc:	80100000 	.word	0x80100000

00007bd0 <matherr>:
    7bd0:	2000      	movs	r0, #0
    7bd2:	4770      	bx	lr

00007bd4 <__gnu_thumb1_case_uqi>:
    7bd4:	b402      	push	{r1}
    7bd6:	4671      	mov	r1, lr
    7bd8:	0849      	lsrs	r1, r1, #1
    7bda:	0049      	lsls	r1, r1, #1
    7bdc:	5c09      	ldrb	r1, [r1, r0]
    7bde:	0049      	lsls	r1, r1, #1
    7be0:	448e      	add	lr, r1
    7be2:	bc02      	pop	{r1}
    7be4:	4770      	bx	lr
    7be6:	46c0      	nop			; (mov r8, r8)

00007be8 <__udivsi3>:
    7be8:	2200      	movs	r2, #0
    7bea:	0843      	lsrs	r3, r0, #1
    7bec:	428b      	cmp	r3, r1
    7bee:	d374      	bcc.n	7cda <__udivsi3+0xf2>
    7bf0:	0903      	lsrs	r3, r0, #4
    7bf2:	428b      	cmp	r3, r1
    7bf4:	d35f      	bcc.n	7cb6 <__udivsi3+0xce>
    7bf6:	0a03      	lsrs	r3, r0, #8
    7bf8:	428b      	cmp	r3, r1
    7bfa:	d344      	bcc.n	7c86 <__udivsi3+0x9e>
    7bfc:	0b03      	lsrs	r3, r0, #12
    7bfe:	428b      	cmp	r3, r1
    7c00:	d328      	bcc.n	7c54 <__udivsi3+0x6c>
    7c02:	0c03      	lsrs	r3, r0, #16
    7c04:	428b      	cmp	r3, r1
    7c06:	d30d      	bcc.n	7c24 <__udivsi3+0x3c>
    7c08:	22ff      	movs	r2, #255	; 0xff
    7c0a:	0209      	lsls	r1, r1, #8
    7c0c:	ba12      	rev	r2, r2
    7c0e:	0c03      	lsrs	r3, r0, #16
    7c10:	428b      	cmp	r3, r1
    7c12:	d302      	bcc.n	7c1a <__udivsi3+0x32>
    7c14:	1212      	asrs	r2, r2, #8
    7c16:	0209      	lsls	r1, r1, #8
    7c18:	d065      	beq.n	7ce6 <__udivsi3+0xfe>
    7c1a:	0b03      	lsrs	r3, r0, #12
    7c1c:	428b      	cmp	r3, r1
    7c1e:	d319      	bcc.n	7c54 <__udivsi3+0x6c>
    7c20:	e000      	b.n	7c24 <__udivsi3+0x3c>
    7c22:	0a09      	lsrs	r1, r1, #8
    7c24:	0bc3      	lsrs	r3, r0, #15
    7c26:	428b      	cmp	r3, r1
    7c28:	d301      	bcc.n	7c2e <__udivsi3+0x46>
    7c2a:	03cb      	lsls	r3, r1, #15
    7c2c:	1ac0      	subs	r0, r0, r3
    7c2e:	4152      	adcs	r2, r2
    7c30:	0b83      	lsrs	r3, r0, #14
    7c32:	428b      	cmp	r3, r1
    7c34:	d301      	bcc.n	7c3a <__udivsi3+0x52>
    7c36:	038b      	lsls	r3, r1, #14
    7c38:	1ac0      	subs	r0, r0, r3
    7c3a:	4152      	adcs	r2, r2
    7c3c:	0b43      	lsrs	r3, r0, #13
    7c3e:	428b      	cmp	r3, r1
    7c40:	d301      	bcc.n	7c46 <__udivsi3+0x5e>
    7c42:	034b      	lsls	r3, r1, #13
    7c44:	1ac0      	subs	r0, r0, r3
    7c46:	4152      	adcs	r2, r2
    7c48:	0b03      	lsrs	r3, r0, #12
    7c4a:	428b      	cmp	r3, r1
    7c4c:	d301      	bcc.n	7c52 <__udivsi3+0x6a>
    7c4e:	030b      	lsls	r3, r1, #12
    7c50:	1ac0      	subs	r0, r0, r3
    7c52:	4152      	adcs	r2, r2
    7c54:	0ac3      	lsrs	r3, r0, #11
    7c56:	428b      	cmp	r3, r1
    7c58:	d301      	bcc.n	7c5e <__udivsi3+0x76>
    7c5a:	02cb      	lsls	r3, r1, #11
    7c5c:	1ac0      	subs	r0, r0, r3
    7c5e:	4152      	adcs	r2, r2
    7c60:	0a83      	lsrs	r3, r0, #10
    7c62:	428b      	cmp	r3, r1
    7c64:	d301      	bcc.n	7c6a <__udivsi3+0x82>
    7c66:	028b      	lsls	r3, r1, #10
    7c68:	1ac0      	subs	r0, r0, r3
    7c6a:	4152      	adcs	r2, r2
    7c6c:	0a43      	lsrs	r3, r0, #9
    7c6e:	428b      	cmp	r3, r1
    7c70:	d301      	bcc.n	7c76 <__udivsi3+0x8e>
    7c72:	024b      	lsls	r3, r1, #9
    7c74:	1ac0      	subs	r0, r0, r3
    7c76:	4152      	adcs	r2, r2
    7c78:	0a03      	lsrs	r3, r0, #8
    7c7a:	428b      	cmp	r3, r1
    7c7c:	d301      	bcc.n	7c82 <__udivsi3+0x9a>
    7c7e:	020b      	lsls	r3, r1, #8
    7c80:	1ac0      	subs	r0, r0, r3
    7c82:	4152      	adcs	r2, r2
    7c84:	d2cd      	bcs.n	7c22 <__udivsi3+0x3a>
    7c86:	09c3      	lsrs	r3, r0, #7
    7c88:	428b      	cmp	r3, r1
    7c8a:	d301      	bcc.n	7c90 <__udivsi3+0xa8>
    7c8c:	01cb      	lsls	r3, r1, #7
    7c8e:	1ac0      	subs	r0, r0, r3
    7c90:	4152      	adcs	r2, r2
    7c92:	0983      	lsrs	r3, r0, #6
    7c94:	428b      	cmp	r3, r1
    7c96:	d301      	bcc.n	7c9c <__udivsi3+0xb4>
    7c98:	018b      	lsls	r3, r1, #6
    7c9a:	1ac0      	subs	r0, r0, r3
    7c9c:	4152      	adcs	r2, r2
    7c9e:	0943      	lsrs	r3, r0, #5
    7ca0:	428b      	cmp	r3, r1
    7ca2:	d301      	bcc.n	7ca8 <__udivsi3+0xc0>
    7ca4:	014b      	lsls	r3, r1, #5
    7ca6:	1ac0      	subs	r0, r0, r3
    7ca8:	4152      	adcs	r2, r2
    7caa:	0903      	lsrs	r3, r0, #4
    7cac:	428b      	cmp	r3, r1
    7cae:	d301      	bcc.n	7cb4 <__udivsi3+0xcc>
    7cb0:	010b      	lsls	r3, r1, #4
    7cb2:	1ac0      	subs	r0, r0, r3
    7cb4:	4152      	adcs	r2, r2
    7cb6:	08c3      	lsrs	r3, r0, #3
    7cb8:	428b      	cmp	r3, r1
    7cba:	d301      	bcc.n	7cc0 <__udivsi3+0xd8>
    7cbc:	00cb      	lsls	r3, r1, #3
    7cbe:	1ac0      	subs	r0, r0, r3
    7cc0:	4152      	adcs	r2, r2
    7cc2:	0883      	lsrs	r3, r0, #2
    7cc4:	428b      	cmp	r3, r1
    7cc6:	d301      	bcc.n	7ccc <__udivsi3+0xe4>
    7cc8:	008b      	lsls	r3, r1, #2
    7cca:	1ac0      	subs	r0, r0, r3
    7ccc:	4152      	adcs	r2, r2
    7cce:	0843      	lsrs	r3, r0, #1
    7cd0:	428b      	cmp	r3, r1
    7cd2:	d301      	bcc.n	7cd8 <__udivsi3+0xf0>
    7cd4:	004b      	lsls	r3, r1, #1
    7cd6:	1ac0      	subs	r0, r0, r3
    7cd8:	4152      	adcs	r2, r2
    7cda:	1a41      	subs	r1, r0, r1
    7cdc:	d200      	bcs.n	7ce0 <__udivsi3+0xf8>
    7cde:	4601      	mov	r1, r0
    7ce0:	4152      	adcs	r2, r2
    7ce2:	4610      	mov	r0, r2
    7ce4:	4770      	bx	lr
    7ce6:	e7ff      	b.n	7ce8 <__udivsi3+0x100>
    7ce8:	b501      	push	{r0, lr}
    7cea:	2000      	movs	r0, #0
    7cec:	f000 f8f0 	bl	7ed0 <__aeabi_idiv0>
    7cf0:	bd02      	pop	{r1, pc}
    7cf2:	46c0      	nop			; (mov r8, r8)

00007cf4 <__aeabi_uidivmod>:
    7cf4:	2900      	cmp	r1, #0
    7cf6:	d0f7      	beq.n	7ce8 <__udivsi3+0x100>
    7cf8:	e776      	b.n	7be8 <__udivsi3>
    7cfa:	4770      	bx	lr

00007cfc <__divsi3>:
    7cfc:	4603      	mov	r3, r0
    7cfe:	430b      	orrs	r3, r1
    7d00:	d47f      	bmi.n	7e02 <__divsi3+0x106>
    7d02:	2200      	movs	r2, #0
    7d04:	0843      	lsrs	r3, r0, #1
    7d06:	428b      	cmp	r3, r1
    7d08:	d374      	bcc.n	7df4 <__divsi3+0xf8>
    7d0a:	0903      	lsrs	r3, r0, #4
    7d0c:	428b      	cmp	r3, r1
    7d0e:	d35f      	bcc.n	7dd0 <__divsi3+0xd4>
    7d10:	0a03      	lsrs	r3, r0, #8
    7d12:	428b      	cmp	r3, r1
    7d14:	d344      	bcc.n	7da0 <__divsi3+0xa4>
    7d16:	0b03      	lsrs	r3, r0, #12
    7d18:	428b      	cmp	r3, r1
    7d1a:	d328      	bcc.n	7d6e <__divsi3+0x72>
    7d1c:	0c03      	lsrs	r3, r0, #16
    7d1e:	428b      	cmp	r3, r1
    7d20:	d30d      	bcc.n	7d3e <__divsi3+0x42>
    7d22:	22ff      	movs	r2, #255	; 0xff
    7d24:	0209      	lsls	r1, r1, #8
    7d26:	ba12      	rev	r2, r2
    7d28:	0c03      	lsrs	r3, r0, #16
    7d2a:	428b      	cmp	r3, r1
    7d2c:	d302      	bcc.n	7d34 <__divsi3+0x38>
    7d2e:	1212      	asrs	r2, r2, #8
    7d30:	0209      	lsls	r1, r1, #8
    7d32:	d065      	beq.n	7e00 <__divsi3+0x104>
    7d34:	0b03      	lsrs	r3, r0, #12
    7d36:	428b      	cmp	r3, r1
    7d38:	d319      	bcc.n	7d6e <__divsi3+0x72>
    7d3a:	e000      	b.n	7d3e <__divsi3+0x42>
    7d3c:	0a09      	lsrs	r1, r1, #8
    7d3e:	0bc3      	lsrs	r3, r0, #15
    7d40:	428b      	cmp	r3, r1
    7d42:	d301      	bcc.n	7d48 <__divsi3+0x4c>
    7d44:	03cb      	lsls	r3, r1, #15
    7d46:	1ac0      	subs	r0, r0, r3
    7d48:	4152      	adcs	r2, r2
    7d4a:	0b83      	lsrs	r3, r0, #14
    7d4c:	428b      	cmp	r3, r1
    7d4e:	d301      	bcc.n	7d54 <__divsi3+0x58>
    7d50:	038b      	lsls	r3, r1, #14
    7d52:	1ac0      	subs	r0, r0, r3
    7d54:	4152      	adcs	r2, r2
    7d56:	0b43      	lsrs	r3, r0, #13
    7d58:	428b      	cmp	r3, r1
    7d5a:	d301      	bcc.n	7d60 <__divsi3+0x64>
    7d5c:	034b      	lsls	r3, r1, #13
    7d5e:	1ac0      	subs	r0, r0, r3
    7d60:	4152      	adcs	r2, r2
    7d62:	0b03      	lsrs	r3, r0, #12
    7d64:	428b      	cmp	r3, r1
    7d66:	d301      	bcc.n	7d6c <__divsi3+0x70>
    7d68:	030b      	lsls	r3, r1, #12
    7d6a:	1ac0      	subs	r0, r0, r3
    7d6c:	4152      	adcs	r2, r2
    7d6e:	0ac3      	lsrs	r3, r0, #11
    7d70:	428b      	cmp	r3, r1
    7d72:	d301      	bcc.n	7d78 <__divsi3+0x7c>
    7d74:	02cb      	lsls	r3, r1, #11
    7d76:	1ac0      	subs	r0, r0, r3
    7d78:	4152      	adcs	r2, r2
    7d7a:	0a83      	lsrs	r3, r0, #10
    7d7c:	428b      	cmp	r3, r1
    7d7e:	d301      	bcc.n	7d84 <__divsi3+0x88>
    7d80:	028b      	lsls	r3, r1, #10
    7d82:	1ac0      	subs	r0, r0, r3
    7d84:	4152      	adcs	r2, r2
    7d86:	0a43      	lsrs	r3, r0, #9
    7d88:	428b      	cmp	r3, r1
    7d8a:	d301      	bcc.n	7d90 <__divsi3+0x94>
    7d8c:	024b      	lsls	r3, r1, #9
    7d8e:	1ac0      	subs	r0, r0, r3
    7d90:	4152      	adcs	r2, r2
    7d92:	0a03      	lsrs	r3, r0, #8
    7d94:	428b      	cmp	r3, r1
    7d96:	d301      	bcc.n	7d9c <__divsi3+0xa0>
    7d98:	020b      	lsls	r3, r1, #8
    7d9a:	1ac0      	subs	r0, r0, r3
    7d9c:	4152      	adcs	r2, r2
    7d9e:	d2cd      	bcs.n	7d3c <__divsi3+0x40>
    7da0:	09c3      	lsrs	r3, r0, #7
    7da2:	428b      	cmp	r3, r1
    7da4:	d301      	bcc.n	7daa <__divsi3+0xae>
    7da6:	01cb      	lsls	r3, r1, #7
    7da8:	1ac0      	subs	r0, r0, r3
    7daa:	4152      	adcs	r2, r2
    7dac:	0983      	lsrs	r3, r0, #6
    7dae:	428b      	cmp	r3, r1
    7db0:	d301      	bcc.n	7db6 <__divsi3+0xba>
    7db2:	018b      	lsls	r3, r1, #6
    7db4:	1ac0      	subs	r0, r0, r3
    7db6:	4152      	adcs	r2, r2
    7db8:	0943      	lsrs	r3, r0, #5
    7dba:	428b      	cmp	r3, r1
    7dbc:	d301      	bcc.n	7dc2 <__divsi3+0xc6>
    7dbe:	014b      	lsls	r3, r1, #5
    7dc0:	1ac0      	subs	r0, r0, r3
    7dc2:	4152      	adcs	r2, r2
    7dc4:	0903      	lsrs	r3, r0, #4
    7dc6:	428b      	cmp	r3, r1
    7dc8:	d301      	bcc.n	7dce <__divsi3+0xd2>
    7dca:	010b      	lsls	r3, r1, #4
    7dcc:	1ac0      	subs	r0, r0, r3
    7dce:	4152      	adcs	r2, r2
    7dd0:	08c3      	lsrs	r3, r0, #3
    7dd2:	428b      	cmp	r3, r1
    7dd4:	d301      	bcc.n	7dda <__divsi3+0xde>
    7dd6:	00cb      	lsls	r3, r1, #3
    7dd8:	1ac0      	subs	r0, r0, r3
    7dda:	4152      	adcs	r2, r2
    7ddc:	0883      	lsrs	r3, r0, #2
    7dde:	428b      	cmp	r3, r1
    7de0:	d301      	bcc.n	7de6 <__divsi3+0xea>
    7de2:	008b      	lsls	r3, r1, #2
    7de4:	1ac0      	subs	r0, r0, r3
    7de6:	4152      	adcs	r2, r2
    7de8:	0843      	lsrs	r3, r0, #1
    7dea:	428b      	cmp	r3, r1
    7dec:	d301      	bcc.n	7df2 <__divsi3+0xf6>
    7dee:	004b      	lsls	r3, r1, #1
    7df0:	1ac0      	subs	r0, r0, r3
    7df2:	4152      	adcs	r2, r2
    7df4:	1a41      	subs	r1, r0, r1
    7df6:	d200      	bcs.n	7dfa <__divsi3+0xfe>
    7df8:	4601      	mov	r1, r0
    7dfa:	4152      	adcs	r2, r2
    7dfc:	4610      	mov	r0, r2
    7dfe:	4770      	bx	lr
    7e00:	e05d      	b.n	7ebe <__divsi3+0x1c2>
    7e02:	0fca      	lsrs	r2, r1, #31
    7e04:	d000      	beq.n	7e08 <__divsi3+0x10c>
    7e06:	4249      	negs	r1, r1
    7e08:	1003      	asrs	r3, r0, #32
    7e0a:	d300      	bcc.n	7e0e <__divsi3+0x112>
    7e0c:	4240      	negs	r0, r0
    7e0e:	4053      	eors	r3, r2
    7e10:	2200      	movs	r2, #0
    7e12:	469c      	mov	ip, r3
    7e14:	0903      	lsrs	r3, r0, #4
    7e16:	428b      	cmp	r3, r1
    7e18:	d32d      	bcc.n	7e76 <__divsi3+0x17a>
    7e1a:	0a03      	lsrs	r3, r0, #8
    7e1c:	428b      	cmp	r3, r1
    7e1e:	d312      	bcc.n	7e46 <__divsi3+0x14a>
    7e20:	22fc      	movs	r2, #252	; 0xfc
    7e22:	0189      	lsls	r1, r1, #6
    7e24:	ba12      	rev	r2, r2
    7e26:	0a03      	lsrs	r3, r0, #8
    7e28:	428b      	cmp	r3, r1
    7e2a:	d30c      	bcc.n	7e46 <__divsi3+0x14a>
    7e2c:	0189      	lsls	r1, r1, #6
    7e2e:	1192      	asrs	r2, r2, #6
    7e30:	428b      	cmp	r3, r1
    7e32:	d308      	bcc.n	7e46 <__divsi3+0x14a>
    7e34:	0189      	lsls	r1, r1, #6
    7e36:	1192      	asrs	r2, r2, #6
    7e38:	428b      	cmp	r3, r1
    7e3a:	d304      	bcc.n	7e46 <__divsi3+0x14a>
    7e3c:	0189      	lsls	r1, r1, #6
    7e3e:	d03a      	beq.n	7eb6 <__divsi3+0x1ba>
    7e40:	1192      	asrs	r2, r2, #6
    7e42:	e000      	b.n	7e46 <__divsi3+0x14a>
    7e44:	0989      	lsrs	r1, r1, #6
    7e46:	09c3      	lsrs	r3, r0, #7
    7e48:	428b      	cmp	r3, r1
    7e4a:	d301      	bcc.n	7e50 <__divsi3+0x154>
    7e4c:	01cb      	lsls	r3, r1, #7
    7e4e:	1ac0      	subs	r0, r0, r3
    7e50:	4152      	adcs	r2, r2
    7e52:	0983      	lsrs	r3, r0, #6
    7e54:	428b      	cmp	r3, r1
    7e56:	d301      	bcc.n	7e5c <__divsi3+0x160>
    7e58:	018b      	lsls	r3, r1, #6
    7e5a:	1ac0      	subs	r0, r0, r3
    7e5c:	4152      	adcs	r2, r2
    7e5e:	0943      	lsrs	r3, r0, #5
    7e60:	428b      	cmp	r3, r1
    7e62:	d301      	bcc.n	7e68 <__divsi3+0x16c>
    7e64:	014b      	lsls	r3, r1, #5
    7e66:	1ac0      	subs	r0, r0, r3
    7e68:	4152      	adcs	r2, r2
    7e6a:	0903      	lsrs	r3, r0, #4
    7e6c:	428b      	cmp	r3, r1
    7e6e:	d301      	bcc.n	7e74 <__divsi3+0x178>
    7e70:	010b      	lsls	r3, r1, #4
    7e72:	1ac0      	subs	r0, r0, r3
    7e74:	4152      	adcs	r2, r2
    7e76:	08c3      	lsrs	r3, r0, #3
    7e78:	428b      	cmp	r3, r1
    7e7a:	d301      	bcc.n	7e80 <__divsi3+0x184>
    7e7c:	00cb      	lsls	r3, r1, #3
    7e7e:	1ac0      	subs	r0, r0, r3
    7e80:	4152      	adcs	r2, r2
    7e82:	0883      	lsrs	r3, r0, #2
    7e84:	428b      	cmp	r3, r1
    7e86:	d301      	bcc.n	7e8c <__divsi3+0x190>
    7e88:	008b      	lsls	r3, r1, #2
    7e8a:	1ac0      	subs	r0, r0, r3
    7e8c:	4152      	adcs	r2, r2
    7e8e:	d2d9      	bcs.n	7e44 <__divsi3+0x148>
    7e90:	0843      	lsrs	r3, r0, #1
    7e92:	428b      	cmp	r3, r1
    7e94:	d301      	bcc.n	7e9a <__divsi3+0x19e>
    7e96:	004b      	lsls	r3, r1, #1
    7e98:	1ac0      	subs	r0, r0, r3
    7e9a:	4152      	adcs	r2, r2
    7e9c:	1a41      	subs	r1, r0, r1
    7e9e:	d200      	bcs.n	7ea2 <__divsi3+0x1a6>
    7ea0:	4601      	mov	r1, r0
    7ea2:	4663      	mov	r3, ip
    7ea4:	4152      	adcs	r2, r2
    7ea6:	105b      	asrs	r3, r3, #1
    7ea8:	4610      	mov	r0, r2
    7eaa:	d301      	bcc.n	7eb0 <__divsi3+0x1b4>
    7eac:	4240      	negs	r0, r0
    7eae:	2b00      	cmp	r3, #0
    7eb0:	d500      	bpl.n	7eb4 <__divsi3+0x1b8>
    7eb2:	4249      	negs	r1, r1
    7eb4:	4770      	bx	lr
    7eb6:	4663      	mov	r3, ip
    7eb8:	105b      	asrs	r3, r3, #1
    7eba:	d300      	bcc.n	7ebe <__divsi3+0x1c2>
    7ebc:	4240      	negs	r0, r0
    7ebe:	b501      	push	{r0, lr}
    7ec0:	2000      	movs	r0, #0
    7ec2:	f000 f805 	bl	7ed0 <__aeabi_idiv0>
    7ec6:	bd02      	pop	{r1, pc}

00007ec8 <__aeabi_idivmod>:
    7ec8:	2900      	cmp	r1, #0
    7eca:	d0f8      	beq.n	7ebe <__divsi3+0x1c2>
    7ecc:	e716      	b.n	7cfc <__divsi3>
    7ece:	4770      	bx	lr

00007ed0 <__aeabi_idiv0>:
    7ed0:	4770      	bx	lr
    7ed2:	46c0      	nop			; (mov r8, r8)

00007ed4 <__aeabi_cdrcmple>:
    7ed4:	4684      	mov	ip, r0
    7ed6:	1c10      	adds	r0, r2, #0
    7ed8:	4662      	mov	r2, ip
    7eda:	468c      	mov	ip, r1
    7edc:	1c19      	adds	r1, r3, #0
    7ede:	4663      	mov	r3, ip
    7ee0:	e000      	b.n	7ee4 <__aeabi_cdcmpeq>
    7ee2:	46c0      	nop			; (mov r8, r8)

00007ee4 <__aeabi_cdcmpeq>:
    7ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7ee6:	f001 fe91 	bl	9c0c <__ledf2>
    7eea:	2800      	cmp	r0, #0
    7eec:	d401      	bmi.n	7ef2 <__aeabi_cdcmpeq+0xe>
    7eee:	2100      	movs	r1, #0
    7ef0:	42c8      	cmn	r0, r1
    7ef2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007ef4 <__aeabi_dcmpeq>:
    7ef4:	b510      	push	{r4, lr}
    7ef6:	f001 fdeb 	bl	9ad0 <__eqdf2>
    7efa:	4240      	negs	r0, r0
    7efc:	3001      	adds	r0, #1
    7efe:	bd10      	pop	{r4, pc}

00007f00 <__aeabi_dcmplt>:
    7f00:	b510      	push	{r4, lr}
    7f02:	f001 fe83 	bl	9c0c <__ledf2>
    7f06:	2800      	cmp	r0, #0
    7f08:	db01      	blt.n	7f0e <__aeabi_dcmplt+0xe>
    7f0a:	2000      	movs	r0, #0
    7f0c:	bd10      	pop	{r4, pc}
    7f0e:	2001      	movs	r0, #1
    7f10:	bd10      	pop	{r4, pc}
    7f12:	46c0      	nop			; (mov r8, r8)

00007f14 <__aeabi_dcmple>:
    7f14:	b510      	push	{r4, lr}
    7f16:	f001 fe79 	bl	9c0c <__ledf2>
    7f1a:	2800      	cmp	r0, #0
    7f1c:	dd01      	ble.n	7f22 <__aeabi_dcmple+0xe>
    7f1e:	2000      	movs	r0, #0
    7f20:	bd10      	pop	{r4, pc}
    7f22:	2001      	movs	r0, #1
    7f24:	bd10      	pop	{r4, pc}
    7f26:	46c0      	nop			; (mov r8, r8)

00007f28 <__aeabi_dcmpgt>:
    7f28:	b510      	push	{r4, lr}
    7f2a:	f001 fe0b 	bl	9b44 <__gedf2>
    7f2e:	2800      	cmp	r0, #0
    7f30:	dc01      	bgt.n	7f36 <__aeabi_dcmpgt+0xe>
    7f32:	2000      	movs	r0, #0
    7f34:	bd10      	pop	{r4, pc}
    7f36:	2001      	movs	r0, #1
    7f38:	bd10      	pop	{r4, pc}
    7f3a:	46c0      	nop			; (mov r8, r8)

00007f3c <__aeabi_dcmpge>:
    7f3c:	b510      	push	{r4, lr}
    7f3e:	f001 fe01 	bl	9b44 <__gedf2>
    7f42:	2800      	cmp	r0, #0
    7f44:	da01      	bge.n	7f4a <__aeabi_dcmpge+0xe>
    7f46:	2000      	movs	r0, #0
    7f48:	bd10      	pop	{r4, pc}
    7f4a:	2001      	movs	r0, #1
    7f4c:	bd10      	pop	{r4, pc}
    7f4e:	46c0      	nop			; (mov r8, r8)

00007f50 <__aeabi_cfrcmple>:
    7f50:	4684      	mov	ip, r0
    7f52:	1c08      	adds	r0, r1, #0
    7f54:	4661      	mov	r1, ip
    7f56:	e7ff      	b.n	7f58 <__aeabi_cfcmpeq>

00007f58 <__aeabi_cfcmpeq>:
    7f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7f5a:	f000 fba9 	bl	86b0 <__lesf2>
    7f5e:	2800      	cmp	r0, #0
    7f60:	d401      	bmi.n	7f66 <__aeabi_cfcmpeq+0xe>
    7f62:	2100      	movs	r1, #0
    7f64:	42c8      	cmn	r0, r1
    7f66:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007f68 <__aeabi_fcmpeq>:
    7f68:	b510      	push	{r4, lr}
    7f6a:	f000 fb3b 	bl	85e4 <__eqsf2>
    7f6e:	4240      	negs	r0, r0
    7f70:	3001      	adds	r0, #1
    7f72:	bd10      	pop	{r4, pc}

00007f74 <__aeabi_fcmplt>:
    7f74:	b510      	push	{r4, lr}
    7f76:	f000 fb9b 	bl	86b0 <__lesf2>
    7f7a:	2800      	cmp	r0, #0
    7f7c:	db01      	blt.n	7f82 <__aeabi_fcmplt+0xe>
    7f7e:	2000      	movs	r0, #0
    7f80:	bd10      	pop	{r4, pc}
    7f82:	2001      	movs	r0, #1
    7f84:	bd10      	pop	{r4, pc}
    7f86:	46c0      	nop			; (mov r8, r8)

00007f88 <__aeabi_fcmple>:
    7f88:	b510      	push	{r4, lr}
    7f8a:	f000 fb91 	bl	86b0 <__lesf2>
    7f8e:	2800      	cmp	r0, #0
    7f90:	dd01      	ble.n	7f96 <__aeabi_fcmple+0xe>
    7f92:	2000      	movs	r0, #0
    7f94:	bd10      	pop	{r4, pc}
    7f96:	2001      	movs	r0, #1
    7f98:	bd10      	pop	{r4, pc}
    7f9a:	46c0      	nop			; (mov r8, r8)

00007f9c <__aeabi_fcmpgt>:
    7f9c:	b510      	push	{r4, lr}
    7f9e:	f000 fb47 	bl	8630 <__gesf2>
    7fa2:	2800      	cmp	r0, #0
    7fa4:	dc01      	bgt.n	7faa <__aeabi_fcmpgt+0xe>
    7fa6:	2000      	movs	r0, #0
    7fa8:	bd10      	pop	{r4, pc}
    7faa:	2001      	movs	r0, #1
    7fac:	bd10      	pop	{r4, pc}
    7fae:	46c0      	nop			; (mov r8, r8)

00007fb0 <__aeabi_fcmpge>:
    7fb0:	b510      	push	{r4, lr}
    7fb2:	f000 fb3d 	bl	8630 <__gesf2>
    7fb6:	2800      	cmp	r0, #0
    7fb8:	da01      	bge.n	7fbe <__aeabi_fcmpge+0xe>
    7fba:	2000      	movs	r0, #0
    7fbc:	bd10      	pop	{r4, pc}
    7fbe:	2001      	movs	r0, #1
    7fc0:	bd10      	pop	{r4, pc}
    7fc2:	46c0      	nop			; (mov r8, r8)

00007fc4 <__aeabi_f2uiz>:
    7fc4:	219e      	movs	r1, #158	; 0x9e
    7fc6:	b510      	push	{r4, lr}
    7fc8:	05c9      	lsls	r1, r1, #23
    7fca:	1c04      	adds	r4, r0, #0
    7fcc:	f7ff fff0 	bl	7fb0 <__aeabi_fcmpge>
    7fd0:	2800      	cmp	r0, #0
    7fd2:	d103      	bne.n	7fdc <__aeabi_f2uiz+0x18>
    7fd4:	1c20      	adds	r0, r4, #0
    7fd6:	f000 fe81 	bl	8cdc <__aeabi_f2iz>
    7fda:	bd10      	pop	{r4, pc}
    7fdc:	219e      	movs	r1, #158	; 0x9e
    7fde:	1c20      	adds	r0, r4, #0
    7fe0:	05c9      	lsls	r1, r1, #23
    7fe2:	f000 fcc7 	bl	8974 <__aeabi_fsub>
    7fe6:	f000 fe79 	bl	8cdc <__aeabi_f2iz>
    7fea:	2380      	movs	r3, #128	; 0x80
    7fec:	061b      	lsls	r3, r3, #24
    7fee:	469c      	mov	ip, r3
    7ff0:	4460      	add	r0, ip
    7ff2:	e7f2      	b.n	7fda <__aeabi_f2uiz+0x16>

00007ff4 <__aeabi_d2uiz>:
    7ff4:	b570      	push	{r4, r5, r6, lr}
    7ff6:	2200      	movs	r2, #0
    7ff8:	4b0c      	ldr	r3, [pc, #48]	; (802c <__aeabi_d2uiz+0x38>)
    7ffa:	0004      	movs	r4, r0
    7ffc:	000d      	movs	r5, r1
    7ffe:	f7ff ff9d 	bl	7f3c <__aeabi_dcmpge>
    8002:	2800      	cmp	r0, #0
    8004:	d104      	bne.n	8010 <__aeabi_d2uiz+0x1c>
    8006:	0020      	movs	r0, r4
    8008:	0029      	movs	r1, r5
    800a:	f002 fc17 	bl	a83c <__aeabi_d2iz>
    800e:	bd70      	pop	{r4, r5, r6, pc}
    8010:	4b06      	ldr	r3, [pc, #24]	; (802c <__aeabi_d2uiz+0x38>)
    8012:	2200      	movs	r2, #0
    8014:	0020      	movs	r0, r4
    8016:	0029      	movs	r1, r5
    8018:	f002 f8da 	bl	a1d0 <__aeabi_dsub>
    801c:	f002 fc0e 	bl	a83c <__aeabi_d2iz>
    8020:	2380      	movs	r3, #128	; 0x80
    8022:	061b      	lsls	r3, r3, #24
    8024:	469c      	mov	ip, r3
    8026:	4460      	add	r0, ip
    8028:	e7f1      	b.n	800e <__aeabi_d2uiz+0x1a>
    802a:	46c0      	nop			; (mov r8, r8)
    802c:	41e00000 	.word	0x41e00000

00008030 <__aeabi_fadd>:
    8030:	b5f0      	push	{r4, r5, r6, r7, lr}
    8032:	46c6      	mov	lr, r8
    8034:	024e      	lsls	r6, r1, #9
    8036:	0247      	lsls	r7, r0, #9
    8038:	0a76      	lsrs	r6, r6, #9
    803a:	0a7b      	lsrs	r3, r7, #9
    803c:	0044      	lsls	r4, r0, #1
    803e:	0fc5      	lsrs	r5, r0, #31
    8040:	00f7      	lsls	r7, r6, #3
    8042:	0048      	lsls	r0, r1, #1
    8044:	4698      	mov	r8, r3
    8046:	b500      	push	{lr}
    8048:	0e24      	lsrs	r4, r4, #24
    804a:	002a      	movs	r2, r5
    804c:	00db      	lsls	r3, r3, #3
    804e:	0e00      	lsrs	r0, r0, #24
    8050:	0fc9      	lsrs	r1, r1, #31
    8052:	46bc      	mov	ip, r7
    8054:	428d      	cmp	r5, r1
    8056:	d067      	beq.n	8128 <__aeabi_fadd+0xf8>
    8058:	1a22      	subs	r2, r4, r0
    805a:	2a00      	cmp	r2, #0
    805c:	dc00      	bgt.n	8060 <__aeabi_fadd+0x30>
    805e:	e0a5      	b.n	81ac <__aeabi_fadd+0x17c>
    8060:	2800      	cmp	r0, #0
    8062:	d13a      	bne.n	80da <__aeabi_fadd+0xaa>
    8064:	2f00      	cmp	r7, #0
    8066:	d100      	bne.n	806a <__aeabi_fadd+0x3a>
    8068:	e093      	b.n	8192 <__aeabi_fadd+0x162>
    806a:	1e51      	subs	r1, r2, #1
    806c:	2900      	cmp	r1, #0
    806e:	d000      	beq.n	8072 <__aeabi_fadd+0x42>
    8070:	e0bc      	b.n	81ec <__aeabi_fadd+0x1bc>
    8072:	2401      	movs	r4, #1
    8074:	1bdb      	subs	r3, r3, r7
    8076:	015a      	lsls	r2, r3, #5
    8078:	d546      	bpl.n	8108 <__aeabi_fadd+0xd8>
    807a:	019b      	lsls	r3, r3, #6
    807c:	099e      	lsrs	r6, r3, #6
    807e:	0030      	movs	r0, r6
    8080:	f002 fd66 	bl	ab50 <__clzsi2>
    8084:	3805      	subs	r0, #5
    8086:	4086      	lsls	r6, r0
    8088:	4284      	cmp	r4, r0
    808a:	dd00      	ble.n	808e <__aeabi_fadd+0x5e>
    808c:	e09d      	b.n	81ca <__aeabi_fadd+0x19a>
    808e:	1b04      	subs	r4, r0, r4
    8090:	0032      	movs	r2, r6
    8092:	2020      	movs	r0, #32
    8094:	3401      	adds	r4, #1
    8096:	40e2      	lsrs	r2, r4
    8098:	1b04      	subs	r4, r0, r4
    809a:	40a6      	lsls	r6, r4
    809c:	0033      	movs	r3, r6
    809e:	1e5e      	subs	r6, r3, #1
    80a0:	41b3      	sbcs	r3, r6
    80a2:	2400      	movs	r4, #0
    80a4:	4313      	orrs	r3, r2
    80a6:	075a      	lsls	r2, r3, #29
    80a8:	d004      	beq.n	80b4 <__aeabi_fadd+0x84>
    80aa:	220f      	movs	r2, #15
    80ac:	401a      	ands	r2, r3
    80ae:	2a04      	cmp	r2, #4
    80b0:	d000      	beq.n	80b4 <__aeabi_fadd+0x84>
    80b2:	3304      	adds	r3, #4
    80b4:	015a      	lsls	r2, r3, #5
    80b6:	d529      	bpl.n	810c <__aeabi_fadd+0xdc>
    80b8:	3401      	adds	r4, #1
    80ba:	2cff      	cmp	r4, #255	; 0xff
    80bc:	d100      	bne.n	80c0 <__aeabi_fadd+0x90>
    80be:	e081      	b.n	81c4 <__aeabi_fadd+0x194>
    80c0:	002a      	movs	r2, r5
    80c2:	019b      	lsls	r3, r3, #6
    80c4:	0a5b      	lsrs	r3, r3, #9
    80c6:	b2e4      	uxtb	r4, r4
    80c8:	025b      	lsls	r3, r3, #9
    80ca:	05e4      	lsls	r4, r4, #23
    80cc:	0a58      	lsrs	r0, r3, #9
    80ce:	07d2      	lsls	r2, r2, #31
    80d0:	4320      	orrs	r0, r4
    80d2:	4310      	orrs	r0, r2
    80d4:	bc04      	pop	{r2}
    80d6:	4690      	mov	r8, r2
    80d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80da:	2cff      	cmp	r4, #255	; 0xff
    80dc:	d0e3      	beq.n	80a6 <__aeabi_fadd+0x76>
    80de:	2180      	movs	r1, #128	; 0x80
    80e0:	0038      	movs	r0, r7
    80e2:	04c9      	lsls	r1, r1, #19
    80e4:	4308      	orrs	r0, r1
    80e6:	4684      	mov	ip, r0
    80e8:	2a1b      	cmp	r2, #27
    80ea:	dd00      	ble.n	80ee <__aeabi_fadd+0xbe>
    80ec:	e082      	b.n	81f4 <__aeabi_fadd+0x1c4>
    80ee:	2020      	movs	r0, #32
    80f0:	4661      	mov	r1, ip
    80f2:	40d1      	lsrs	r1, r2
    80f4:	1a82      	subs	r2, r0, r2
    80f6:	4660      	mov	r0, ip
    80f8:	4090      	lsls	r0, r2
    80fa:	0002      	movs	r2, r0
    80fc:	1e50      	subs	r0, r2, #1
    80fe:	4182      	sbcs	r2, r0
    8100:	430a      	orrs	r2, r1
    8102:	1a9b      	subs	r3, r3, r2
    8104:	015a      	lsls	r2, r3, #5
    8106:	d4b8      	bmi.n	807a <__aeabi_fadd+0x4a>
    8108:	075a      	lsls	r2, r3, #29
    810a:	d1ce      	bne.n	80aa <__aeabi_fadd+0x7a>
    810c:	08de      	lsrs	r6, r3, #3
    810e:	002a      	movs	r2, r5
    8110:	2cff      	cmp	r4, #255	; 0xff
    8112:	d13a      	bne.n	818a <__aeabi_fadd+0x15a>
    8114:	2e00      	cmp	r6, #0
    8116:	d100      	bne.n	811a <__aeabi_fadd+0xea>
    8118:	e0ae      	b.n	8278 <__aeabi_fadd+0x248>
    811a:	2380      	movs	r3, #128	; 0x80
    811c:	03db      	lsls	r3, r3, #15
    811e:	4333      	orrs	r3, r6
    8120:	025b      	lsls	r3, r3, #9
    8122:	0a5b      	lsrs	r3, r3, #9
    8124:	24ff      	movs	r4, #255	; 0xff
    8126:	e7cf      	b.n	80c8 <__aeabi_fadd+0x98>
    8128:	1a21      	subs	r1, r4, r0
    812a:	2900      	cmp	r1, #0
    812c:	dd52      	ble.n	81d4 <__aeabi_fadd+0x1a4>
    812e:	2800      	cmp	r0, #0
    8130:	d031      	beq.n	8196 <__aeabi_fadd+0x166>
    8132:	2cff      	cmp	r4, #255	; 0xff
    8134:	d0b7      	beq.n	80a6 <__aeabi_fadd+0x76>
    8136:	2080      	movs	r0, #128	; 0x80
    8138:	003e      	movs	r6, r7
    813a:	04c0      	lsls	r0, r0, #19
    813c:	4306      	orrs	r6, r0
    813e:	46b4      	mov	ip, r6
    8140:	291b      	cmp	r1, #27
    8142:	dd00      	ble.n	8146 <__aeabi_fadd+0x116>
    8144:	e0aa      	b.n	829c <__aeabi_fadd+0x26c>
    8146:	2620      	movs	r6, #32
    8148:	4660      	mov	r0, ip
    814a:	40c8      	lsrs	r0, r1
    814c:	1a71      	subs	r1, r6, r1
    814e:	4666      	mov	r6, ip
    8150:	408e      	lsls	r6, r1
    8152:	0031      	movs	r1, r6
    8154:	1e4e      	subs	r6, r1, #1
    8156:	41b1      	sbcs	r1, r6
    8158:	4301      	orrs	r1, r0
    815a:	185b      	adds	r3, r3, r1
    815c:	0159      	lsls	r1, r3, #5
    815e:	d5d3      	bpl.n	8108 <__aeabi_fadd+0xd8>
    8160:	3401      	adds	r4, #1
    8162:	2cff      	cmp	r4, #255	; 0xff
    8164:	d100      	bne.n	8168 <__aeabi_fadd+0x138>
    8166:	e087      	b.n	8278 <__aeabi_fadd+0x248>
    8168:	2201      	movs	r2, #1
    816a:	4978      	ldr	r1, [pc, #480]	; (834c <__aeabi_fadd+0x31c>)
    816c:	401a      	ands	r2, r3
    816e:	085b      	lsrs	r3, r3, #1
    8170:	400b      	ands	r3, r1
    8172:	4313      	orrs	r3, r2
    8174:	e797      	b.n	80a6 <__aeabi_fadd+0x76>
    8176:	2c00      	cmp	r4, #0
    8178:	d000      	beq.n	817c <__aeabi_fadd+0x14c>
    817a:	e0a7      	b.n	82cc <__aeabi_fadd+0x29c>
    817c:	2b00      	cmp	r3, #0
    817e:	d000      	beq.n	8182 <__aeabi_fadd+0x152>
    8180:	e0b6      	b.n	82f0 <__aeabi_fadd+0x2c0>
    8182:	1e3b      	subs	r3, r7, #0
    8184:	d162      	bne.n	824c <__aeabi_fadd+0x21c>
    8186:	2600      	movs	r6, #0
    8188:	2200      	movs	r2, #0
    818a:	0273      	lsls	r3, r6, #9
    818c:	0a5b      	lsrs	r3, r3, #9
    818e:	b2e4      	uxtb	r4, r4
    8190:	e79a      	b.n	80c8 <__aeabi_fadd+0x98>
    8192:	0014      	movs	r4, r2
    8194:	e787      	b.n	80a6 <__aeabi_fadd+0x76>
    8196:	2f00      	cmp	r7, #0
    8198:	d04d      	beq.n	8236 <__aeabi_fadd+0x206>
    819a:	1e48      	subs	r0, r1, #1
    819c:	2800      	cmp	r0, #0
    819e:	d157      	bne.n	8250 <__aeabi_fadd+0x220>
    81a0:	4463      	add	r3, ip
    81a2:	2401      	movs	r4, #1
    81a4:	015a      	lsls	r2, r3, #5
    81a6:	d5af      	bpl.n	8108 <__aeabi_fadd+0xd8>
    81a8:	2402      	movs	r4, #2
    81aa:	e7dd      	b.n	8168 <__aeabi_fadd+0x138>
    81ac:	2a00      	cmp	r2, #0
    81ae:	d124      	bne.n	81fa <__aeabi_fadd+0x1ca>
    81b0:	1c62      	adds	r2, r4, #1
    81b2:	b2d2      	uxtb	r2, r2
    81b4:	2a01      	cmp	r2, #1
    81b6:	ddde      	ble.n	8176 <__aeabi_fadd+0x146>
    81b8:	1bde      	subs	r6, r3, r7
    81ba:	0172      	lsls	r2, r6, #5
    81bc:	d535      	bpl.n	822a <__aeabi_fadd+0x1fa>
    81be:	1afe      	subs	r6, r7, r3
    81c0:	000d      	movs	r5, r1
    81c2:	e75c      	b.n	807e <__aeabi_fadd+0x4e>
    81c4:	002a      	movs	r2, r5
    81c6:	2300      	movs	r3, #0
    81c8:	e77e      	b.n	80c8 <__aeabi_fadd+0x98>
    81ca:	0033      	movs	r3, r6
    81cc:	4a60      	ldr	r2, [pc, #384]	; (8350 <__aeabi_fadd+0x320>)
    81ce:	1a24      	subs	r4, r4, r0
    81d0:	4013      	ands	r3, r2
    81d2:	e768      	b.n	80a6 <__aeabi_fadd+0x76>
    81d4:	2900      	cmp	r1, #0
    81d6:	d163      	bne.n	82a0 <__aeabi_fadd+0x270>
    81d8:	1c61      	adds	r1, r4, #1
    81da:	b2c8      	uxtb	r0, r1
    81dc:	2801      	cmp	r0, #1
    81de:	dd4e      	ble.n	827e <__aeabi_fadd+0x24e>
    81e0:	29ff      	cmp	r1, #255	; 0xff
    81e2:	d049      	beq.n	8278 <__aeabi_fadd+0x248>
    81e4:	4463      	add	r3, ip
    81e6:	085b      	lsrs	r3, r3, #1
    81e8:	000c      	movs	r4, r1
    81ea:	e75c      	b.n	80a6 <__aeabi_fadd+0x76>
    81ec:	2aff      	cmp	r2, #255	; 0xff
    81ee:	d041      	beq.n	8274 <__aeabi_fadd+0x244>
    81f0:	000a      	movs	r2, r1
    81f2:	e779      	b.n	80e8 <__aeabi_fadd+0xb8>
    81f4:	2201      	movs	r2, #1
    81f6:	1a9b      	subs	r3, r3, r2
    81f8:	e784      	b.n	8104 <__aeabi_fadd+0xd4>
    81fa:	2c00      	cmp	r4, #0
    81fc:	d01d      	beq.n	823a <__aeabi_fadd+0x20a>
    81fe:	28ff      	cmp	r0, #255	; 0xff
    8200:	d022      	beq.n	8248 <__aeabi_fadd+0x218>
    8202:	2480      	movs	r4, #128	; 0x80
    8204:	04e4      	lsls	r4, r4, #19
    8206:	4252      	negs	r2, r2
    8208:	4323      	orrs	r3, r4
    820a:	2a1b      	cmp	r2, #27
    820c:	dd00      	ble.n	8210 <__aeabi_fadd+0x1e0>
    820e:	e08a      	b.n	8326 <__aeabi_fadd+0x2f6>
    8210:	001c      	movs	r4, r3
    8212:	2520      	movs	r5, #32
    8214:	40d4      	lsrs	r4, r2
    8216:	1aaa      	subs	r2, r5, r2
    8218:	4093      	lsls	r3, r2
    821a:	1e5a      	subs	r2, r3, #1
    821c:	4193      	sbcs	r3, r2
    821e:	4323      	orrs	r3, r4
    8220:	4662      	mov	r2, ip
    8222:	0004      	movs	r4, r0
    8224:	1ad3      	subs	r3, r2, r3
    8226:	000d      	movs	r5, r1
    8228:	e725      	b.n	8076 <__aeabi_fadd+0x46>
    822a:	2e00      	cmp	r6, #0
    822c:	d000      	beq.n	8230 <__aeabi_fadd+0x200>
    822e:	e726      	b.n	807e <__aeabi_fadd+0x4e>
    8230:	2200      	movs	r2, #0
    8232:	2400      	movs	r4, #0
    8234:	e7a9      	b.n	818a <__aeabi_fadd+0x15a>
    8236:	000c      	movs	r4, r1
    8238:	e735      	b.n	80a6 <__aeabi_fadd+0x76>
    823a:	2b00      	cmp	r3, #0
    823c:	d04d      	beq.n	82da <__aeabi_fadd+0x2aa>
    823e:	43d2      	mvns	r2, r2
    8240:	2a00      	cmp	r2, #0
    8242:	d0ed      	beq.n	8220 <__aeabi_fadd+0x1f0>
    8244:	28ff      	cmp	r0, #255	; 0xff
    8246:	d1e0      	bne.n	820a <__aeabi_fadd+0x1da>
    8248:	4663      	mov	r3, ip
    824a:	24ff      	movs	r4, #255	; 0xff
    824c:	000d      	movs	r5, r1
    824e:	e72a      	b.n	80a6 <__aeabi_fadd+0x76>
    8250:	29ff      	cmp	r1, #255	; 0xff
    8252:	d00f      	beq.n	8274 <__aeabi_fadd+0x244>
    8254:	0001      	movs	r1, r0
    8256:	e773      	b.n	8140 <__aeabi_fadd+0x110>
    8258:	2b00      	cmp	r3, #0
    825a:	d061      	beq.n	8320 <__aeabi_fadd+0x2f0>
    825c:	24ff      	movs	r4, #255	; 0xff
    825e:	2f00      	cmp	r7, #0
    8260:	d100      	bne.n	8264 <__aeabi_fadd+0x234>
    8262:	e720      	b.n	80a6 <__aeabi_fadd+0x76>
    8264:	2280      	movs	r2, #128	; 0x80
    8266:	4641      	mov	r1, r8
    8268:	03d2      	lsls	r2, r2, #15
    826a:	4211      	tst	r1, r2
    826c:	d002      	beq.n	8274 <__aeabi_fadd+0x244>
    826e:	4216      	tst	r6, r2
    8270:	d100      	bne.n	8274 <__aeabi_fadd+0x244>
    8272:	003b      	movs	r3, r7
    8274:	24ff      	movs	r4, #255	; 0xff
    8276:	e716      	b.n	80a6 <__aeabi_fadd+0x76>
    8278:	24ff      	movs	r4, #255	; 0xff
    827a:	2300      	movs	r3, #0
    827c:	e724      	b.n	80c8 <__aeabi_fadd+0x98>
    827e:	2c00      	cmp	r4, #0
    8280:	d1ea      	bne.n	8258 <__aeabi_fadd+0x228>
    8282:	2b00      	cmp	r3, #0
    8284:	d058      	beq.n	8338 <__aeabi_fadd+0x308>
    8286:	2f00      	cmp	r7, #0
    8288:	d100      	bne.n	828c <__aeabi_fadd+0x25c>
    828a:	e70c      	b.n	80a6 <__aeabi_fadd+0x76>
    828c:	4463      	add	r3, ip
    828e:	015a      	lsls	r2, r3, #5
    8290:	d400      	bmi.n	8294 <__aeabi_fadd+0x264>
    8292:	e739      	b.n	8108 <__aeabi_fadd+0xd8>
    8294:	4a2e      	ldr	r2, [pc, #184]	; (8350 <__aeabi_fadd+0x320>)
    8296:	000c      	movs	r4, r1
    8298:	4013      	ands	r3, r2
    829a:	e704      	b.n	80a6 <__aeabi_fadd+0x76>
    829c:	2101      	movs	r1, #1
    829e:	e75c      	b.n	815a <__aeabi_fadd+0x12a>
    82a0:	2c00      	cmp	r4, #0
    82a2:	d11e      	bne.n	82e2 <__aeabi_fadd+0x2b2>
    82a4:	2b00      	cmp	r3, #0
    82a6:	d040      	beq.n	832a <__aeabi_fadd+0x2fa>
    82a8:	43c9      	mvns	r1, r1
    82aa:	2900      	cmp	r1, #0
    82ac:	d00b      	beq.n	82c6 <__aeabi_fadd+0x296>
    82ae:	28ff      	cmp	r0, #255	; 0xff
    82b0:	d036      	beq.n	8320 <__aeabi_fadd+0x2f0>
    82b2:	291b      	cmp	r1, #27
    82b4:	dc47      	bgt.n	8346 <__aeabi_fadd+0x316>
    82b6:	001c      	movs	r4, r3
    82b8:	2620      	movs	r6, #32
    82ba:	40cc      	lsrs	r4, r1
    82bc:	1a71      	subs	r1, r6, r1
    82be:	408b      	lsls	r3, r1
    82c0:	1e59      	subs	r1, r3, #1
    82c2:	418b      	sbcs	r3, r1
    82c4:	4323      	orrs	r3, r4
    82c6:	4463      	add	r3, ip
    82c8:	0004      	movs	r4, r0
    82ca:	e747      	b.n	815c <__aeabi_fadd+0x12c>
    82cc:	2b00      	cmp	r3, #0
    82ce:	d118      	bne.n	8302 <__aeabi_fadd+0x2d2>
    82d0:	1e3b      	subs	r3, r7, #0
    82d2:	d02d      	beq.n	8330 <__aeabi_fadd+0x300>
    82d4:	000d      	movs	r5, r1
    82d6:	24ff      	movs	r4, #255	; 0xff
    82d8:	e6e5      	b.n	80a6 <__aeabi_fadd+0x76>
    82da:	003b      	movs	r3, r7
    82dc:	0004      	movs	r4, r0
    82de:	000d      	movs	r5, r1
    82e0:	e6e1      	b.n	80a6 <__aeabi_fadd+0x76>
    82e2:	28ff      	cmp	r0, #255	; 0xff
    82e4:	d01c      	beq.n	8320 <__aeabi_fadd+0x2f0>
    82e6:	2480      	movs	r4, #128	; 0x80
    82e8:	04e4      	lsls	r4, r4, #19
    82ea:	4249      	negs	r1, r1
    82ec:	4323      	orrs	r3, r4
    82ee:	e7e0      	b.n	82b2 <__aeabi_fadd+0x282>
    82f0:	2f00      	cmp	r7, #0
    82f2:	d100      	bne.n	82f6 <__aeabi_fadd+0x2c6>
    82f4:	e6d7      	b.n	80a6 <__aeabi_fadd+0x76>
    82f6:	1bde      	subs	r6, r3, r7
    82f8:	0172      	lsls	r2, r6, #5
    82fa:	d51f      	bpl.n	833c <__aeabi_fadd+0x30c>
    82fc:	1afb      	subs	r3, r7, r3
    82fe:	000d      	movs	r5, r1
    8300:	e6d1      	b.n	80a6 <__aeabi_fadd+0x76>
    8302:	24ff      	movs	r4, #255	; 0xff
    8304:	2f00      	cmp	r7, #0
    8306:	d100      	bne.n	830a <__aeabi_fadd+0x2da>
    8308:	e6cd      	b.n	80a6 <__aeabi_fadd+0x76>
    830a:	2280      	movs	r2, #128	; 0x80
    830c:	4640      	mov	r0, r8
    830e:	03d2      	lsls	r2, r2, #15
    8310:	4210      	tst	r0, r2
    8312:	d0af      	beq.n	8274 <__aeabi_fadd+0x244>
    8314:	4216      	tst	r6, r2
    8316:	d1ad      	bne.n	8274 <__aeabi_fadd+0x244>
    8318:	003b      	movs	r3, r7
    831a:	000d      	movs	r5, r1
    831c:	24ff      	movs	r4, #255	; 0xff
    831e:	e6c2      	b.n	80a6 <__aeabi_fadd+0x76>
    8320:	4663      	mov	r3, ip
    8322:	24ff      	movs	r4, #255	; 0xff
    8324:	e6bf      	b.n	80a6 <__aeabi_fadd+0x76>
    8326:	2301      	movs	r3, #1
    8328:	e77a      	b.n	8220 <__aeabi_fadd+0x1f0>
    832a:	003b      	movs	r3, r7
    832c:	0004      	movs	r4, r0
    832e:	e6ba      	b.n	80a6 <__aeabi_fadd+0x76>
    8330:	2680      	movs	r6, #128	; 0x80
    8332:	2200      	movs	r2, #0
    8334:	03f6      	lsls	r6, r6, #15
    8336:	e6f0      	b.n	811a <__aeabi_fadd+0xea>
    8338:	003b      	movs	r3, r7
    833a:	e6b4      	b.n	80a6 <__aeabi_fadd+0x76>
    833c:	1e33      	subs	r3, r6, #0
    833e:	d000      	beq.n	8342 <__aeabi_fadd+0x312>
    8340:	e6e2      	b.n	8108 <__aeabi_fadd+0xd8>
    8342:	2200      	movs	r2, #0
    8344:	e721      	b.n	818a <__aeabi_fadd+0x15a>
    8346:	2301      	movs	r3, #1
    8348:	e7bd      	b.n	82c6 <__aeabi_fadd+0x296>
    834a:	46c0      	nop			; (mov r8, r8)
    834c:	7dffffff 	.word	0x7dffffff
    8350:	fbffffff 	.word	0xfbffffff

00008354 <__aeabi_fdiv>:
    8354:	b5f0      	push	{r4, r5, r6, r7, lr}
    8356:	4657      	mov	r7, sl
    8358:	464e      	mov	r6, r9
    835a:	46de      	mov	lr, fp
    835c:	4645      	mov	r5, r8
    835e:	b5e0      	push	{r5, r6, r7, lr}
    8360:	0244      	lsls	r4, r0, #9
    8362:	0043      	lsls	r3, r0, #1
    8364:	0fc6      	lsrs	r6, r0, #31
    8366:	b083      	sub	sp, #12
    8368:	1c0f      	adds	r7, r1, #0
    836a:	0a64      	lsrs	r4, r4, #9
    836c:	0e1b      	lsrs	r3, r3, #24
    836e:	46b2      	mov	sl, r6
    8370:	d053      	beq.n	841a <__aeabi_fdiv+0xc6>
    8372:	2bff      	cmp	r3, #255	; 0xff
    8374:	d027      	beq.n	83c6 <__aeabi_fdiv+0x72>
    8376:	2280      	movs	r2, #128	; 0x80
    8378:	00e4      	lsls	r4, r4, #3
    837a:	04d2      	lsls	r2, r2, #19
    837c:	4314      	orrs	r4, r2
    837e:	227f      	movs	r2, #127	; 0x7f
    8380:	4252      	negs	r2, r2
    8382:	4690      	mov	r8, r2
    8384:	4498      	add	r8, r3
    8386:	2300      	movs	r3, #0
    8388:	4699      	mov	r9, r3
    838a:	469b      	mov	fp, r3
    838c:	027d      	lsls	r5, r7, #9
    838e:	0078      	lsls	r0, r7, #1
    8390:	0ffb      	lsrs	r3, r7, #31
    8392:	0a6d      	lsrs	r5, r5, #9
    8394:	0e00      	lsrs	r0, r0, #24
    8396:	9300      	str	r3, [sp, #0]
    8398:	d024      	beq.n	83e4 <__aeabi_fdiv+0x90>
    839a:	28ff      	cmp	r0, #255	; 0xff
    839c:	d046      	beq.n	842c <__aeabi_fdiv+0xd8>
    839e:	2380      	movs	r3, #128	; 0x80
    83a0:	2100      	movs	r1, #0
    83a2:	00ed      	lsls	r5, r5, #3
    83a4:	04db      	lsls	r3, r3, #19
    83a6:	431d      	orrs	r5, r3
    83a8:	387f      	subs	r0, #127	; 0x7f
    83aa:	4647      	mov	r7, r8
    83ac:	1a38      	subs	r0, r7, r0
    83ae:	464f      	mov	r7, r9
    83b0:	430f      	orrs	r7, r1
    83b2:	00bf      	lsls	r7, r7, #2
    83b4:	46b9      	mov	r9, r7
    83b6:	0033      	movs	r3, r6
    83b8:	9a00      	ldr	r2, [sp, #0]
    83ba:	4f87      	ldr	r7, [pc, #540]	; (85d8 <__aeabi_fdiv+0x284>)
    83bc:	4053      	eors	r3, r2
    83be:	464a      	mov	r2, r9
    83c0:	58ba      	ldr	r2, [r7, r2]
    83c2:	9301      	str	r3, [sp, #4]
    83c4:	4697      	mov	pc, r2
    83c6:	2c00      	cmp	r4, #0
    83c8:	d14e      	bne.n	8468 <__aeabi_fdiv+0x114>
    83ca:	2308      	movs	r3, #8
    83cc:	4699      	mov	r9, r3
    83ce:	33f7      	adds	r3, #247	; 0xf7
    83d0:	4698      	mov	r8, r3
    83d2:	3bfd      	subs	r3, #253	; 0xfd
    83d4:	469b      	mov	fp, r3
    83d6:	027d      	lsls	r5, r7, #9
    83d8:	0078      	lsls	r0, r7, #1
    83da:	0ffb      	lsrs	r3, r7, #31
    83dc:	0a6d      	lsrs	r5, r5, #9
    83de:	0e00      	lsrs	r0, r0, #24
    83e0:	9300      	str	r3, [sp, #0]
    83e2:	d1da      	bne.n	839a <__aeabi_fdiv+0x46>
    83e4:	2d00      	cmp	r5, #0
    83e6:	d126      	bne.n	8436 <__aeabi_fdiv+0xe2>
    83e8:	2000      	movs	r0, #0
    83ea:	2101      	movs	r1, #1
    83ec:	0033      	movs	r3, r6
    83ee:	9a00      	ldr	r2, [sp, #0]
    83f0:	4f7a      	ldr	r7, [pc, #488]	; (85dc <__aeabi_fdiv+0x288>)
    83f2:	4053      	eors	r3, r2
    83f4:	4642      	mov	r2, r8
    83f6:	1a10      	subs	r0, r2, r0
    83f8:	464a      	mov	r2, r9
    83fa:	430a      	orrs	r2, r1
    83fc:	0092      	lsls	r2, r2, #2
    83fe:	58ba      	ldr	r2, [r7, r2]
    8400:	001d      	movs	r5, r3
    8402:	4697      	mov	pc, r2
    8404:	9b00      	ldr	r3, [sp, #0]
    8406:	002c      	movs	r4, r5
    8408:	469a      	mov	sl, r3
    840a:	468b      	mov	fp, r1
    840c:	465b      	mov	r3, fp
    840e:	2b02      	cmp	r3, #2
    8410:	d131      	bne.n	8476 <__aeabi_fdiv+0x122>
    8412:	4653      	mov	r3, sl
    8414:	21ff      	movs	r1, #255	; 0xff
    8416:	2400      	movs	r4, #0
    8418:	e038      	b.n	848c <__aeabi_fdiv+0x138>
    841a:	2c00      	cmp	r4, #0
    841c:	d117      	bne.n	844e <__aeabi_fdiv+0xfa>
    841e:	2304      	movs	r3, #4
    8420:	4699      	mov	r9, r3
    8422:	2300      	movs	r3, #0
    8424:	4698      	mov	r8, r3
    8426:	3301      	adds	r3, #1
    8428:	469b      	mov	fp, r3
    842a:	e7af      	b.n	838c <__aeabi_fdiv+0x38>
    842c:	20ff      	movs	r0, #255	; 0xff
    842e:	2d00      	cmp	r5, #0
    8430:	d10b      	bne.n	844a <__aeabi_fdiv+0xf6>
    8432:	2102      	movs	r1, #2
    8434:	e7da      	b.n	83ec <__aeabi_fdiv+0x98>
    8436:	0028      	movs	r0, r5
    8438:	f002 fb8a 	bl	ab50 <__clzsi2>
    843c:	1f43      	subs	r3, r0, #5
    843e:	409d      	lsls	r5, r3
    8440:	2376      	movs	r3, #118	; 0x76
    8442:	425b      	negs	r3, r3
    8444:	1a18      	subs	r0, r3, r0
    8446:	2100      	movs	r1, #0
    8448:	e7af      	b.n	83aa <__aeabi_fdiv+0x56>
    844a:	2103      	movs	r1, #3
    844c:	e7ad      	b.n	83aa <__aeabi_fdiv+0x56>
    844e:	0020      	movs	r0, r4
    8450:	f002 fb7e 	bl	ab50 <__clzsi2>
    8454:	1f43      	subs	r3, r0, #5
    8456:	409c      	lsls	r4, r3
    8458:	2376      	movs	r3, #118	; 0x76
    845a:	425b      	negs	r3, r3
    845c:	1a1b      	subs	r3, r3, r0
    845e:	4698      	mov	r8, r3
    8460:	2300      	movs	r3, #0
    8462:	4699      	mov	r9, r3
    8464:	469b      	mov	fp, r3
    8466:	e791      	b.n	838c <__aeabi_fdiv+0x38>
    8468:	230c      	movs	r3, #12
    846a:	4699      	mov	r9, r3
    846c:	33f3      	adds	r3, #243	; 0xf3
    846e:	4698      	mov	r8, r3
    8470:	3bfc      	subs	r3, #252	; 0xfc
    8472:	469b      	mov	fp, r3
    8474:	e78a      	b.n	838c <__aeabi_fdiv+0x38>
    8476:	2b03      	cmp	r3, #3
    8478:	d100      	bne.n	847c <__aeabi_fdiv+0x128>
    847a:	e0a5      	b.n	85c8 <__aeabi_fdiv+0x274>
    847c:	4655      	mov	r5, sl
    847e:	2b01      	cmp	r3, #1
    8480:	d000      	beq.n	8484 <__aeabi_fdiv+0x130>
    8482:	e081      	b.n	8588 <__aeabi_fdiv+0x234>
    8484:	2301      	movs	r3, #1
    8486:	2100      	movs	r1, #0
    8488:	2400      	movs	r4, #0
    848a:	402b      	ands	r3, r5
    848c:	0264      	lsls	r4, r4, #9
    848e:	05c9      	lsls	r1, r1, #23
    8490:	0a60      	lsrs	r0, r4, #9
    8492:	07db      	lsls	r3, r3, #31
    8494:	4308      	orrs	r0, r1
    8496:	4318      	orrs	r0, r3
    8498:	b003      	add	sp, #12
    849a:	bc3c      	pop	{r2, r3, r4, r5}
    849c:	4690      	mov	r8, r2
    849e:	4699      	mov	r9, r3
    84a0:	46a2      	mov	sl, r4
    84a2:	46ab      	mov	fp, r5
    84a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84a6:	2480      	movs	r4, #128	; 0x80
    84a8:	2300      	movs	r3, #0
    84aa:	03e4      	lsls	r4, r4, #15
    84ac:	21ff      	movs	r1, #255	; 0xff
    84ae:	e7ed      	b.n	848c <__aeabi_fdiv+0x138>
    84b0:	21ff      	movs	r1, #255	; 0xff
    84b2:	2400      	movs	r4, #0
    84b4:	e7ea      	b.n	848c <__aeabi_fdiv+0x138>
    84b6:	2301      	movs	r3, #1
    84b8:	1a59      	subs	r1, r3, r1
    84ba:	291b      	cmp	r1, #27
    84bc:	dd66      	ble.n	858c <__aeabi_fdiv+0x238>
    84be:	9a01      	ldr	r2, [sp, #4]
    84c0:	4013      	ands	r3, r2
    84c2:	2100      	movs	r1, #0
    84c4:	2400      	movs	r4, #0
    84c6:	e7e1      	b.n	848c <__aeabi_fdiv+0x138>
    84c8:	2380      	movs	r3, #128	; 0x80
    84ca:	03db      	lsls	r3, r3, #15
    84cc:	421c      	tst	r4, r3
    84ce:	d038      	beq.n	8542 <__aeabi_fdiv+0x1ee>
    84d0:	421d      	tst	r5, r3
    84d2:	d051      	beq.n	8578 <__aeabi_fdiv+0x224>
    84d4:	431c      	orrs	r4, r3
    84d6:	0264      	lsls	r4, r4, #9
    84d8:	0a64      	lsrs	r4, r4, #9
    84da:	0033      	movs	r3, r6
    84dc:	21ff      	movs	r1, #255	; 0xff
    84de:	e7d5      	b.n	848c <__aeabi_fdiv+0x138>
    84e0:	0163      	lsls	r3, r4, #5
    84e2:	016c      	lsls	r4, r5, #5
    84e4:	42a3      	cmp	r3, r4
    84e6:	d23b      	bcs.n	8560 <__aeabi_fdiv+0x20c>
    84e8:	261b      	movs	r6, #27
    84ea:	2100      	movs	r1, #0
    84ec:	3801      	subs	r0, #1
    84ee:	2501      	movs	r5, #1
    84f0:	001f      	movs	r7, r3
    84f2:	0049      	lsls	r1, r1, #1
    84f4:	005b      	lsls	r3, r3, #1
    84f6:	2f00      	cmp	r7, #0
    84f8:	db01      	blt.n	84fe <__aeabi_fdiv+0x1aa>
    84fa:	429c      	cmp	r4, r3
    84fc:	d801      	bhi.n	8502 <__aeabi_fdiv+0x1ae>
    84fe:	1b1b      	subs	r3, r3, r4
    8500:	4329      	orrs	r1, r5
    8502:	3e01      	subs	r6, #1
    8504:	2e00      	cmp	r6, #0
    8506:	d1f3      	bne.n	84f0 <__aeabi_fdiv+0x19c>
    8508:	001c      	movs	r4, r3
    850a:	1e63      	subs	r3, r4, #1
    850c:	419c      	sbcs	r4, r3
    850e:	430c      	orrs	r4, r1
    8510:	0001      	movs	r1, r0
    8512:	317f      	adds	r1, #127	; 0x7f
    8514:	2900      	cmp	r1, #0
    8516:	ddce      	ble.n	84b6 <__aeabi_fdiv+0x162>
    8518:	0763      	lsls	r3, r4, #29
    851a:	d004      	beq.n	8526 <__aeabi_fdiv+0x1d2>
    851c:	230f      	movs	r3, #15
    851e:	4023      	ands	r3, r4
    8520:	2b04      	cmp	r3, #4
    8522:	d000      	beq.n	8526 <__aeabi_fdiv+0x1d2>
    8524:	3404      	adds	r4, #4
    8526:	0123      	lsls	r3, r4, #4
    8528:	d503      	bpl.n	8532 <__aeabi_fdiv+0x1de>
    852a:	0001      	movs	r1, r0
    852c:	4b2c      	ldr	r3, [pc, #176]	; (85e0 <__aeabi_fdiv+0x28c>)
    852e:	3180      	adds	r1, #128	; 0x80
    8530:	401c      	ands	r4, r3
    8532:	29fe      	cmp	r1, #254	; 0xfe
    8534:	dd0d      	ble.n	8552 <__aeabi_fdiv+0x1fe>
    8536:	2301      	movs	r3, #1
    8538:	9a01      	ldr	r2, [sp, #4]
    853a:	21ff      	movs	r1, #255	; 0xff
    853c:	4013      	ands	r3, r2
    853e:	2400      	movs	r4, #0
    8540:	e7a4      	b.n	848c <__aeabi_fdiv+0x138>
    8542:	2380      	movs	r3, #128	; 0x80
    8544:	03db      	lsls	r3, r3, #15
    8546:	431c      	orrs	r4, r3
    8548:	0264      	lsls	r4, r4, #9
    854a:	0a64      	lsrs	r4, r4, #9
    854c:	0033      	movs	r3, r6
    854e:	21ff      	movs	r1, #255	; 0xff
    8550:	e79c      	b.n	848c <__aeabi_fdiv+0x138>
    8552:	2301      	movs	r3, #1
    8554:	9a01      	ldr	r2, [sp, #4]
    8556:	01a4      	lsls	r4, r4, #6
    8558:	0a64      	lsrs	r4, r4, #9
    855a:	b2c9      	uxtb	r1, r1
    855c:	4013      	ands	r3, r2
    855e:	e795      	b.n	848c <__aeabi_fdiv+0x138>
    8560:	1b1b      	subs	r3, r3, r4
    8562:	261a      	movs	r6, #26
    8564:	2101      	movs	r1, #1
    8566:	e7c2      	b.n	84ee <__aeabi_fdiv+0x19a>
    8568:	9b00      	ldr	r3, [sp, #0]
    856a:	468b      	mov	fp, r1
    856c:	469a      	mov	sl, r3
    856e:	2400      	movs	r4, #0
    8570:	e74c      	b.n	840c <__aeabi_fdiv+0xb8>
    8572:	0263      	lsls	r3, r4, #9
    8574:	d5e5      	bpl.n	8542 <__aeabi_fdiv+0x1ee>
    8576:	2500      	movs	r5, #0
    8578:	2480      	movs	r4, #128	; 0x80
    857a:	03e4      	lsls	r4, r4, #15
    857c:	432c      	orrs	r4, r5
    857e:	0264      	lsls	r4, r4, #9
    8580:	0a64      	lsrs	r4, r4, #9
    8582:	9b00      	ldr	r3, [sp, #0]
    8584:	21ff      	movs	r1, #255	; 0xff
    8586:	e781      	b.n	848c <__aeabi_fdiv+0x138>
    8588:	9501      	str	r5, [sp, #4]
    858a:	e7c1      	b.n	8510 <__aeabi_fdiv+0x1bc>
    858c:	0023      	movs	r3, r4
    858e:	2020      	movs	r0, #32
    8590:	40cb      	lsrs	r3, r1
    8592:	1a41      	subs	r1, r0, r1
    8594:	408c      	lsls	r4, r1
    8596:	1e61      	subs	r1, r4, #1
    8598:	418c      	sbcs	r4, r1
    859a:	431c      	orrs	r4, r3
    859c:	0763      	lsls	r3, r4, #29
    859e:	d004      	beq.n	85aa <__aeabi_fdiv+0x256>
    85a0:	230f      	movs	r3, #15
    85a2:	4023      	ands	r3, r4
    85a4:	2b04      	cmp	r3, #4
    85a6:	d000      	beq.n	85aa <__aeabi_fdiv+0x256>
    85a8:	3404      	adds	r4, #4
    85aa:	0163      	lsls	r3, r4, #5
    85ac:	d505      	bpl.n	85ba <__aeabi_fdiv+0x266>
    85ae:	2301      	movs	r3, #1
    85b0:	9a01      	ldr	r2, [sp, #4]
    85b2:	2101      	movs	r1, #1
    85b4:	4013      	ands	r3, r2
    85b6:	2400      	movs	r4, #0
    85b8:	e768      	b.n	848c <__aeabi_fdiv+0x138>
    85ba:	2301      	movs	r3, #1
    85bc:	9a01      	ldr	r2, [sp, #4]
    85be:	01a4      	lsls	r4, r4, #6
    85c0:	0a64      	lsrs	r4, r4, #9
    85c2:	4013      	ands	r3, r2
    85c4:	2100      	movs	r1, #0
    85c6:	e761      	b.n	848c <__aeabi_fdiv+0x138>
    85c8:	2380      	movs	r3, #128	; 0x80
    85ca:	03db      	lsls	r3, r3, #15
    85cc:	431c      	orrs	r4, r3
    85ce:	0264      	lsls	r4, r4, #9
    85d0:	0a64      	lsrs	r4, r4, #9
    85d2:	4653      	mov	r3, sl
    85d4:	21ff      	movs	r1, #255	; 0xff
    85d6:	e759      	b.n	848c <__aeabi_fdiv+0x138>
    85d8:	0000ff30 	.word	0x0000ff30
    85dc:	0000ff70 	.word	0x0000ff70
    85e0:	f7ffffff 	.word	0xf7ffffff

000085e4 <__eqsf2>:
    85e4:	b570      	push	{r4, r5, r6, lr}
    85e6:	0042      	lsls	r2, r0, #1
    85e8:	0245      	lsls	r5, r0, #9
    85ea:	024e      	lsls	r6, r1, #9
    85ec:	004c      	lsls	r4, r1, #1
    85ee:	0fc3      	lsrs	r3, r0, #31
    85f0:	0a6d      	lsrs	r5, r5, #9
    85f2:	0e12      	lsrs	r2, r2, #24
    85f4:	0a76      	lsrs	r6, r6, #9
    85f6:	0e24      	lsrs	r4, r4, #24
    85f8:	0fc9      	lsrs	r1, r1, #31
    85fa:	2001      	movs	r0, #1
    85fc:	2aff      	cmp	r2, #255	; 0xff
    85fe:	d006      	beq.n	860e <__eqsf2+0x2a>
    8600:	2cff      	cmp	r4, #255	; 0xff
    8602:	d003      	beq.n	860c <__eqsf2+0x28>
    8604:	42a2      	cmp	r2, r4
    8606:	d101      	bne.n	860c <__eqsf2+0x28>
    8608:	42b5      	cmp	r5, r6
    860a:	d006      	beq.n	861a <__eqsf2+0x36>
    860c:	bd70      	pop	{r4, r5, r6, pc}
    860e:	2d00      	cmp	r5, #0
    8610:	d1fc      	bne.n	860c <__eqsf2+0x28>
    8612:	2cff      	cmp	r4, #255	; 0xff
    8614:	d1fa      	bne.n	860c <__eqsf2+0x28>
    8616:	2e00      	cmp	r6, #0
    8618:	d1f8      	bne.n	860c <__eqsf2+0x28>
    861a:	428b      	cmp	r3, r1
    861c:	d006      	beq.n	862c <__eqsf2+0x48>
    861e:	2001      	movs	r0, #1
    8620:	2a00      	cmp	r2, #0
    8622:	d1f3      	bne.n	860c <__eqsf2+0x28>
    8624:	0028      	movs	r0, r5
    8626:	1e45      	subs	r5, r0, #1
    8628:	41a8      	sbcs	r0, r5
    862a:	e7ef      	b.n	860c <__eqsf2+0x28>
    862c:	2000      	movs	r0, #0
    862e:	e7ed      	b.n	860c <__eqsf2+0x28>

00008630 <__gesf2>:
    8630:	b5f0      	push	{r4, r5, r6, r7, lr}
    8632:	0042      	lsls	r2, r0, #1
    8634:	0245      	lsls	r5, r0, #9
    8636:	024c      	lsls	r4, r1, #9
    8638:	0fc3      	lsrs	r3, r0, #31
    863a:	0048      	lsls	r0, r1, #1
    863c:	0a6d      	lsrs	r5, r5, #9
    863e:	0e12      	lsrs	r2, r2, #24
    8640:	0a64      	lsrs	r4, r4, #9
    8642:	0e00      	lsrs	r0, r0, #24
    8644:	0fc9      	lsrs	r1, r1, #31
    8646:	2aff      	cmp	r2, #255	; 0xff
    8648:	d01e      	beq.n	8688 <__gesf2+0x58>
    864a:	28ff      	cmp	r0, #255	; 0xff
    864c:	d021      	beq.n	8692 <__gesf2+0x62>
    864e:	2a00      	cmp	r2, #0
    8650:	d10a      	bne.n	8668 <__gesf2+0x38>
    8652:	426e      	negs	r6, r5
    8654:	416e      	adcs	r6, r5
    8656:	b2f6      	uxtb	r6, r6
    8658:	2800      	cmp	r0, #0
    865a:	d10f      	bne.n	867c <__gesf2+0x4c>
    865c:	2c00      	cmp	r4, #0
    865e:	d10d      	bne.n	867c <__gesf2+0x4c>
    8660:	2000      	movs	r0, #0
    8662:	2d00      	cmp	r5, #0
    8664:	d009      	beq.n	867a <__gesf2+0x4a>
    8666:	e005      	b.n	8674 <__gesf2+0x44>
    8668:	2800      	cmp	r0, #0
    866a:	d101      	bne.n	8670 <__gesf2+0x40>
    866c:	2c00      	cmp	r4, #0
    866e:	d001      	beq.n	8674 <__gesf2+0x44>
    8670:	428b      	cmp	r3, r1
    8672:	d011      	beq.n	8698 <__gesf2+0x68>
    8674:	2101      	movs	r1, #1
    8676:	4258      	negs	r0, r3
    8678:	4308      	orrs	r0, r1
    867a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    867c:	2e00      	cmp	r6, #0
    867e:	d0f7      	beq.n	8670 <__gesf2+0x40>
    8680:	2001      	movs	r0, #1
    8682:	3901      	subs	r1, #1
    8684:	4308      	orrs	r0, r1
    8686:	e7f8      	b.n	867a <__gesf2+0x4a>
    8688:	2d00      	cmp	r5, #0
    868a:	d0de      	beq.n	864a <__gesf2+0x1a>
    868c:	2002      	movs	r0, #2
    868e:	4240      	negs	r0, r0
    8690:	e7f3      	b.n	867a <__gesf2+0x4a>
    8692:	2c00      	cmp	r4, #0
    8694:	d0db      	beq.n	864e <__gesf2+0x1e>
    8696:	e7f9      	b.n	868c <__gesf2+0x5c>
    8698:	4282      	cmp	r2, r0
    869a:	dceb      	bgt.n	8674 <__gesf2+0x44>
    869c:	db04      	blt.n	86a8 <__gesf2+0x78>
    869e:	42a5      	cmp	r5, r4
    86a0:	d8e8      	bhi.n	8674 <__gesf2+0x44>
    86a2:	2000      	movs	r0, #0
    86a4:	42a5      	cmp	r5, r4
    86a6:	d2e8      	bcs.n	867a <__gesf2+0x4a>
    86a8:	2101      	movs	r1, #1
    86aa:	1e58      	subs	r0, r3, #1
    86ac:	4308      	orrs	r0, r1
    86ae:	e7e4      	b.n	867a <__gesf2+0x4a>

000086b0 <__lesf2>:
    86b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    86b2:	0042      	lsls	r2, r0, #1
    86b4:	024d      	lsls	r5, r1, #9
    86b6:	004c      	lsls	r4, r1, #1
    86b8:	0246      	lsls	r6, r0, #9
    86ba:	0a76      	lsrs	r6, r6, #9
    86bc:	0e12      	lsrs	r2, r2, #24
    86be:	0fc3      	lsrs	r3, r0, #31
    86c0:	0a6d      	lsrs	r5, r5, #9
    86c2:	0e24      	lsrs	r4, r4, #24
    86c4:	0fc9      	lsrs	r1, r1, #31
    86c6:	2aff      	cmp	r2, #255	; 0xff
    86c8:	d016      	beq.n	86f8 <__lesf2+0x48>
    86ca:	2cff      	cmp	r4, #255	; 0xff
    86cc:	d018      	beq.n	8700 <__lesf2+0x50>
    86ce:	2a00      	cmp	r2, #0
    86d0:	d10a      	bne.n	86e8 <__lesf2+0x38>
    86d2:	4270      	negs	r0, r6
    86d4:	4170      	adcs	r0, r6
    86d6:	b2c0      	uxtb	r0, r0
    86d8:	2c00      	cmp	r4, #0
    86da:	d015      	beq.n	8708 <__lesf2+0x58>
    86dc:	2800      	cmp	r0, #0
    86de:	d005      	beq.n	86ec <__lesf2+0x3c>
    86e0:	2001      	movs	r0, #1
    86e2:	3901      	subs	r1, #1
    86e4:	4308      	orrs	r0, r1
    86e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86e8:	2c00      	cmp	r4, #0
    86ea:	d013      	beq.n	8714 <__lesf2+0x64>
    86ec:	4299      	cmp	r1, r3
    86ee:	d014      	beq.n	871a <__lesf2+0x6a>
    86f0:	2001      	movs	r0, #1
    86f2:	425b      	negs	r3, r3
    86f4:	4318      	orrs	r0, r3
    86f6:	e7f6      	b.n	86e6 <__lesf2+0x36>
    86f8:	2002      	movs	r0, #2
    86fa:	2e00      	cmp	r6, #0
    86fc:	d1f3      	bne.n	86e6 <__lesf2+0x36>
    86fe:	e7e4      	b.n	86ca <__lesf2+0x1a>
    8700:	2002      	movs	r0, #2
    8702:	2d00      	cmp	r5, #0
    8704:	d1ef      	bne.n	86e6 <__lesf2+0x36>
    8706:	e7e2      	b.n	86ce <__lesf2+0x1e>
    8708:	2d00      	cmp	r5, #0
    870a:	d1e7      	bne.n	86dc <__lesf2+0x2c>
    870c:	2000      	movs	r0, #0
    870e:	2e00      	cmp	r6, #0
    8710:	d0e9      	beq.n	86e6 <__lesf2+0x36>
    8712:	e7ed      	b.n	86f0 <__lesf2+0x40>
    8714:	2d00      	cmp	r5, #0
    8716:	d1e9      	bne.n	86ec <__lesf2+0x3c>
    8718:	e7ea      	b.n	86f0 <__lesf2+0x40>
    871a:	42a2      	cmp	r2, r4
    871c:	dc06      	bgt.n	872c <__lesf2+0x7c>
    871e:	dbdf      	blt.n	86e0 <__lesf2+0x30>
    8720:	42ae      	cmp	r6, r5
    8722:	d803      	bhi.n	872c <__lesf2+0x7c>
    8724:	2000      	movs	r0, #0
    8726:	42ae      	cmp	r6, r5
    8728:	d3da      	bcc.n	86e0 <__lesf2+0x30>
    872a:	e7dc      	b.n	86e6 <__lesf2+0x36>
    872c:	2001      	movs	r0, #1
    872e:	4249      	negs	r1, r1
    8730:	4308      	orrs	r0, r1
    8732:	e7d8      	b.n	86e6 <__lesf2+0x36>

00008734 <__aeabi_fmul>:
    8734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8736:	4657      	mov	r7, sl
    8738:	464e      	mov	r6, r9
    873a:	4645      	mov	r5, r8
    873c:	46de      	mov	lr, fp
    873e:	b5e0      	push	{r5, r6, r7, lr}
    8740:	0247      	lsls	r7, r0, #9
    8742:	0046      	lsls	r6, r0, #1
    8744:	4688      	mov	r8, r1
    8746:	0a7f      	lsrs	r7, r7, #9
    8748:	0e36      	lsrs	r6, r6, #24
    874a:	0fc4      	lsrs	r4, r0, #31
    874c:	2e00      	cmp	r6, #0
    874e:	d047      	beq.n	87e0 <__aeabi_fmul+0xac>
    8750:	2eff      	cmp	r6, #255	; 0xff
    8752:	d024      	beq.n	879e <__aeabi_fmul+0x6a>
    8754:	00fb      	lsls	r3, r7, #3
    8756:	2780      	movs	r7, #128	; 0x80
    8758:	04ff      	lsls	r7, r7, #19
    875a:	431f      	orrs	r7, r3
    875c:	2300      	movs	r3, #0
    875e:	4699      	mov	r9, r3
    8760:	469a      	mov	sl, r3
    8762:	3e7f      	subs	r6, #127	; 0x7f
    8764:	4643      	mov	r3, r8
    8766:	025d      	lsls	r5, r3, #9
    8768:	0058      	lsls	r0, r3, #1
    876a:	0fdb      	lsrs	r3, r3, #31
    876c:	0a6d      	lsrs	r5, r5, #9
    876e:	0e00      	lsrs	r0, r0, #24
    8770:	4698      	mov	r8, r3
    8772:	d043      	beq.n	87fc <__aeabi_fmul+0xc8>
    8774:	28ff      	cmp	r0, #255	; 0xff
    8776:	d03b      	beq.n	87f0 <__aeabi_fmul+0xbc>
    8778:	00eb      	lsls	r3, r5, #3
    877a:	2580      	movs	r5, #128	; 0x80
    877c:	2200      	movs	r2, #0
    877e:	04ed      	lsls	r5, r5, #19
    8780:	431d      	orrs	r5, r3
    8782:	387f      	subs	r0, #127	; 0x7f
    8784:	1836      	adds	r6, r6, r0
    8786:	1c73      	adds	r3, r6, #1
    8788:	4641      	mov	r1, r8
    878a:	469b      	mov	fp, r3
    878c:	464b      	mov	r3, r9
    878e:	4061      	eors	r1, r4
    8790:	4313      	orrs	r3, r2
    8792:	2b0f      	cmp	r3, #15
    8794:	d864      	bhi.n	8860 <__aeabi_fmul+0x12c>
    8796:	4875      	ldr	r0, [pc, #468]	; (896c <__aeabi_fmul+0x238>)
    8798:	009b      	lsls	r3, r3, #2
    879a:	58c3      	ldr	r3, [r0, r3]
    879c:	469f      	mov	pc, r3
    879e:	2f00      	cmp	r7, #0
    87a0:	d142      	bne.n	8828 <__aeabi_fmul+0xf4>
    87a2:	2308      	movs	r3, #8
    87a4:	4699      	mov	r9, r3
    87a6:	3b06      	subs	r3, #6
    87a8:	26ff      	movs	r6, #255	; 0xff
    87aa:	469a      	mov	sl, r3
    87ac:	e7da      	b.n	8764 <__aeabi_fmul+0x30>
    87ae:	4641      	mov	r1, r8
    87b0:	2a02      	cmp	r2, #2
    87b2:	d028      	beq.n	8806 <__aeabi_fmul+0xd2>
    87b4:	2a03      	cmp	r2, #3
    87b6:	d100      	bne.n	87ba <__aeabi_fmul+0x86>
    87b8:	e0ce      	b.n	8958 <__aeabi_fmul+0x224>
    87ba:	2a01      	cmp	r2, #1
    87bc:	d000      	beq.n	87c0 <__aeabi_fmul+0x8c>
    87be:	e0ac      	b.n	891a <__aeabi_fmul+0x1e6>
    87c0:	4011      	ands	r1, r2
    87c2:	2000      	movs	r0, #0
    87c4:	2200      	movs	r2, #0
    87c6:	b2cc      	uxtb	r4, r1
    87c8:	0240      	lsls	r0, r0, #9
    87ca:	05d2      	lsls	r2, r2, #23
    87cc:	0a40      	lsrs	r0, r0, #9
    87ce:	07e4      	lsls	r4, r4, #31
    87d0:	4310      	orrs	r0, r2
    87d2:	4320      	orrs	r0, r4
    87d4:	bc3c      	pop	{r2, r3, r4, r5}
    87d6:	4690      	mov	r8, r2
    87d8:	4699      	mov	r9, r3
    87da:	46a2      	mov	sl, r4
    87dc:	46ab      	mov	fp, r5
    87de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    87e0:	2f00      	cmp	r7, #0
    87e2:	d115      	bne.n	8810 <__aeabi_fmul+0xdc>
    87e4:	2304      	movs	r3, #4
    87e6:	4699      	mov	r9, r3
    87e8:	3b03      	subs	r3, #3
    87ea:	2600      	movs	r6, #0
    87ec:	469a      	mov	sl, r3
    87ee:	e7b9      	b.n	8764 <__aeabi_fmul+0x30>
    87f0:	20ff      	movs	r0, #255	; 0xff
    87f2:	2202      	movs	r2, #2
    87f4:	2d00      	cmp	r5, #0
    87f6:	d0c5      	beq.n	8784 <__aeabi_fmul+0x50>
    87f8:	2203      	movs	r2, #3
    87fa:	e7c3      	b.n	8784 <__aeabi_fmul+0x50>
    87fc:	2d00      	cmp	r5, #0
    87fe:	d119      	bne.n	8834 <__aeabi_fmul+0x100>
    8800:	2000      	movs	r0, #0
    8802:	2201      	movs	r2, #1
    8804:	e7be      	b.n	8784 <__aeabi_fmul+0x50>
    8806:	2401      	movs	r4, #1
    8808:	22ff      	movs	r2, #255	; 0xff
    880a:	400c      	ands	r4, r1
    880c:	2000      	movs	r0, #0
    880e:	e7db      	b.n	87c8 <__aeabi_fmul+0x94>
    8810:	0038      	movs	r0, r7
    8812:	f002 f99d 	bl	ab50 <__clzsi2>
    8816:	2676      	movs	r6, #118	; 0x76
    8818:	1f43      	subs	r3, r0, #5
    881a:	409f      	lsls	r7, r3
    881c:	2300      	movs	r3, #0
    881e:	4276      	negs	r6, r6
    8820:	1a36      	subs	r6, r6, r0
    8822:	4699      	mov	r9, r3
    8824:	469a      	mov	sl, r3
    8826:	e79d      	b.n	8764 <__aeabi_fmul+0x30>
    8828:	230c      	movs	r3, #12
    882a:	4699      	mov	r9, r3
    882c:	3b09      	subs	r3, #9
    882e:	26ff      	movs	r6, #255	; 0xff
    8830:	469a      	mov	sl, r3
    8832:	e797      	b.n	8764 <__aeabi_fmul+0x30>
    8834:	0028      	movs	r0, r5
    8836:	f002 f98b 	bl	ab50 <__clzsi2>
    883a:	1f43      	subs	r3, r0, #5
    883c:	409d      	lsls	r5, r3
    883e:	2376      	movs	r3, #118	; 0x76
    8840:	425b      	negs	r3, r3
    8842:	1a18      	subs	r0, r3, r0
    8844:	2200      	movs	r2, #0
    8846:	e79d      	b.n	8784 <__aeabi_fmul+0x50>
    8848:	2080      	movs	r0, #128	; 0x80
    884a:	2400      	movs	r4, #0
    884c:	03c0      	lsls	r0, r0, #15
    884e:	22ff      	movs	r2, #255	; 0xff
    8850:	e7ba      	b.n	87c8 <__aeabi_fmul+0x94>
    8852:	003d      	movs	r5, r7
    8854:	4652      	mov	r2, sl
    8856:	e7ab      	b.n	87b0 <__aeabi_fmul+0x7c>
    8858:	003d      	movs	r5, r7
    885a:	0021      	movs	r1, r4
    885c:	4652      	mov	r2, sl
    885e:	e7a7      	b.n	87b0 <__aeabi_fmul+0x7c>
    8860:	0c3b      	lsrs	r3, r7, #16
    8862:	469c      	mov	ip, r3
    8864:	042a      	lsls	r2, r5, #16
    8866:	0c12      	lsrs	r2, r2, #16
    8868:	0c2b      	lsrs	r3, r5, #16
    886a:	0014      	movs	r4, r2
    886c:	4660      	mov	r0, ip
    886e:	4665      	mov	r5, ip
    8870:	043f      	lsls	r7, r7, #16
    8872:	0c3f      	lsrs	r7, r7, #16
    8874:	437c      	muls	r4, r7
    8876:	4342      	muls	r2, r0
    8878:	435d      	muls	r5, r3
    887a:	437b      	muls	r3, r7
    887c:	0c27      	lsrs	r7, r4, #16
    887e:	189b      	adds	r3, r3, r2
    8880:	18ff      	adds	r7, r7, r3
    8882:	42ba      	cmp	r2, r7
    8884:	d903      	bls.n	888e <__aeabi_fmul+0x15a>
    8886:	2380      	movs	r3, #128	; 0x80
    8888:	025b      	lsls	r3, r3, #9
    888a:	469c      	mov	ip, r3
    888c:	4465      	add	r5, ip
    888e:	0424      	lsls	r4, r4, #16
    8890:	043a      	lsls	r2, r7, #16
    8892:	0c24      	lsrs	r4, r4, #16
    8894:	1912      	adds	r2, r2, r4
    8896:	0193      	lsls	r3, r2, #6
    8898:	1e5c      	subs	r4, r3, #1
    889a:	41a3      	sbcs	r3, r4
    889c:	0c3f      	lsrs	r7, r7, #16
    889e:	0e92      	lsrs	r2, r2, #26
    88a0:	197d      	adds	r5, r7, r5
    88a2:	431a      	orrs	r2, r3
    88a4:	01ad      	lsls	r5, r5, #6
    88a6:	4315      	orrs	r5, r2
    88a8:	012b      	lsls	r3, r5, #4
    88aa:	d504      	bpl.n	88b6 <__aeabi_fmul+0x182>
    88ac:	2301      	movs	r3, #1
    88ae:	465e      	mov	r6, fp
    88b0:	086a      	lsrs	r2, r5, #1
    88b2:	401d      	ands	r5, r3
    88b4:	4315      	orrs	r5, r2
    88b6:	0032      	movs	r2, r6
    88b8:	327f      	adds	r2, #127	; 0x7f
    88ba:	2a00      	cmp	r2, #0
    88bc:	dd25      	ble.n	890a <__aeabi_fmul+0x1d6>
    88be:	076b      	lsls	r3, r5, #29
    88c0:	d004      	beq.n	88cc <__aeabi_fmul+0x198>
    88c2:	230f      	movs	r3, #15
    88c4:	402b      	ands	r3, r5
    88c6:	2b04      	cmp	r3, #4
    88c8:	d000      	beq.n	88cc <__aeabi_fmul+0x198>
    88ca:	3504      	adds	r5, #4
    88cc:	012b      	lsls	r3, r5, #4
    88ce:	d503      	bpl.n	88d8 <__aeabi_fmul+0x1a4>
    88d0:	0032      	movs	r2, r6
    88d2:	4b27      	ldr	r3, [pc, #156]	; (8970 <__aeabi_fmul+0x23c>)
    88d4:	3280      	adds	r2, #128	; 0x80
    88d6:	401d      	ands	r5, r3
    88d8:	2afe      	cmp	r2, #254	; 0xfe
    88da:	dc94      	bgt.n	8806 <__aeabi_fmul+0xd2>
    88dc:	2401      	movs	r4, #1
    88de:	01a8      	lsls	r0, r5, #6
    88e0:	0a40      	lsrs	r0, r0, #9
    88e2:	b2d2      	uxtb	r2, r2
    88e4:	400c      	ands	r4, r1
    88e6:	e76f      	b.n	87c8 <__aeabi_fmul+0x94>
    88e8:	2080      	movs	r0, #128	; 0x80
    88ea:	03c0      	lsls	r0, r0, #15
    88ec:	4207      	tst	r7, r0
    88ee:	d007      	beq.n	8900 <__aeabi_fmul+0x1cc>
    88f0:	4205      	tst	r5, r0
    88f2:	d105      	bne.n	8900 <__aeabi_fmul+0x1cc>
    88f4:	4328      	orrs	r0, r5
    88f6:	0240      	lsls	r0, r0, #9
    88f8:	0a40      	lsrs	r0, r0, #9
    88fa:	4644      	mov	r4, r8
    88fc:	22ff      	movs	r2, #255	; 0xff
    88fe:	e763      	b.n	87c8 <__aeabi_fmul+0x94>
    8900:	4338      	orrs	r0, r7
    8902:	0240      	lsls	r0, r0, #9
    8904:	0a40      	lsrs	r0, r0, #9
    8906:	22ff      	movs	r2, #255	; 0xff
    8908:	e75e      	b.n	87c8 <__aeabi_fmul+0x94>
    890a:	2401      	movs	r4, #1
    890c:	1aa3      	subs	r3, r4, r2
    890e:	2b1b      	cmp	r3, #27
    8910:	dd05      	ble.n	891e <__aeabi_fmul+0x1ea>
    8912:	400c      	ands	r4, r1
    8914:	2200      	movs	r2, #0
    8916:	2000      	movs	r0, #0
    8918:	e756      	b.n	87c8 <__aeabi_fmul+0x94>
    891a:	465e      	mov	r6, fp
    891c:	e7cb      	b.n	88b6 <__aeabi_fmul+0x182>
    891e:	002a      	movs	r2, r5
    8920:	2020      	movs	r0, #32
    8922:	40da      	lsrs	r2, r3
    8924:	1ac3      	subs	r3, r0, r3
    8926:	409d      	lsls	r5, r3
    8928:	002b      	movs	r3, r5
    892a:	1e5d      	subs	r5, r3, #1
    892c:	41ab      	sbcs	r3, r5
    892e:	4313      	orrs	r3, r2
    8930:	075a      	lsls	r2, r3, #29
    8932:	d004      	beq.n	893e <__aeabi_fmul+0x20a>
    8934:	220f      	movs	r2, #15
    8936:	401a      	ands	r2, r3
    8938:	2a04      	cmp	r2, #4
    893a:	d000      	beq.n	893e <__aeabi_fmul+0x20a>
    893c:	3304      	adds	r3, #4
    893e:	015a      	lsls	r2, r3, #5
    8940:	d504      	bpl.n	894c <__aeabi_fmul+0x218>
    8942:	2401      	movs	r4, #1
    8944:	2201      	movs	r2, #1
    8946:	400c      	ands	r4, r1
    8948:	2000      	movs	r0, #0
    894a:	e73d      	b.n	87c8 <__aeabi_fmul+0x94>
    894c:	2401      	movs	r4, #1
    894e:	019b      	lsls	r3, r3, #6
    8950:	0a58      	lsrs	r0, r3, #9
    8952:	400c      	ands	r4, r1
    8954:	2200      	movs	r2, #0
    8956:	e737      	b.n	87c8 <__aeabi_fmul+0x94>
    8958:	2080      	movs	r0, #128	; 0x80
    895a:	2401      	movs	r4, #1
    895c:	03c0      	lsls	r0, r0, #15
    895e:	4328      	orrs	r0, r5
    8960:	0240      	lsls	r0, r0, #9
    8962:	0a40      	lsrs	r0, r0, #9
    8964:	400c      	ands	r4, r1
    8966:	22ff      	movs	r2, #255	; 0xff
    8968:	e72e      	b.n	87c8 <__aeabi_fmul+0x94>
    896a:	46c0      	nop			; (mov r8, r8)
    896c:	0000ffb0 	.word	0x0000ffb0
    8970:	f7ffffff 	.word	0xf7ffffff

00008974 <__aeabi_fsub>:
    8974:	b5f0      	push	{r4, r5, r6, r7, lr}
    8976:	464f      	mov	r7, r9
    8978:	46d6      	mov	lr, sl
    897a:	4646      	mov	r6, r8
    897c:	0044      	lsls	r4, r0, #1
    897e:	b5c0      	push	{r6, r7, lr}
    8980:	0fc2      	lsrs	r2, r0, #31
    8982:	0247      	lsls	r7, r0, #9
    8984:	0248      	lsls	r0, r1, #9
    8986:	0a40      	lsrs	r0, r0, #9
    8988:	4684      	mov	ip, r0
    898a:	4666      	mov	r6, ip
    898c:	0a7b      	lsrs	r3, r7, #9
    898e:	0048      	lsls	r0, r1, #1
    8990:	0fc9      	lsrs	r1, r1, #31
    8992:	469a      	mov	sl, r3
    8994:	0e24      	lsrs	r4, r4, #24
    8996:	0015      	movs	r5, r2
    8998:	00db      	lsls	r3, r3, #3
    899a:	0e00      	lsrs	r0, r0, #24
    899c:	4689      	mov	r9, r1
    899e:	00f6      	lsls	r6, r6, #3
    89a0:	28ff      	cmp	r0, #255	; 0xff
    89a2:	d100      	bne.n	89a6 <__aeabi_fsub+0x32>
    89a4:	e08f      	b.n	8ac6 <__aeabi_fsub+0x152>
    89a6:	2101      	movs	r1, #1
    89a8:	464f      	mov	r7, r9
    89aa:	404f      	eors	r7, r1
    89ac:	0039      	movs	r1, r7
    89ae:	4291      	cmp	r1, r2
    89b0:	d066      	beq.n	8a80 <__aeabi_fsub+0x10c>
    89b2:	1a22      	subs	r2, r4, r0
    89b4:	2a00      	cmp	r2, #0
    89b6:	dc00      	bgt.n	89ba <__aeabi_fsub+0x46>
    89b8:	e09d      	b.n	8af6 <__aeabi_fsub+0x182>
    89ba:	2800      	cmp	r0, #0
    89bc:	d13d      	bne.n	8a3a <__aeabi_fsub+0xc6>
    89be:	2e00      	cmp	r6, #0
    89c0:	d100      	bne.n	89c4 <__aeabi_fsub+0x50>
    89c2:	e08b      	b.n	8adc <__aeabi_fsub+0x168>
    89c4:	1e51      	subs	r1, r2, #1
    89c6:	2900      	cmp	r1, #0
    89c8:	d000      	beq.n	89cc <__aeabi_fsub+0x58>
    89ca:	e0b5      	b.n	8b38 <__aeabi_fsub+0x1c4>
    89cc:	2401      	movs	r4, #1
    89ce:	1b9b      	subs	r3, r3, r6
    89d0:	015a      	lsls	r2, r3, #5
    89d2:	d544      	bpl.n	8a5e <__aeabi_fsub+0xea>
    89d4:	019b      	lsls	r3, r3, #6
    89d6:	099f      	lsrs	r7, r3, #6
    89d8:	0038      	movs	r0, r7
    89da:	f002 f8b9 	bl	ab50 <__clzsi2>
    89de:	3805      	subs	r0, #5
    89e0:	4087      	lsls	r7, r0
    89e2:	4284      	cmp	r4, r0
    89e4:	dd00      	ble.n	89e8 <__aeabi_fsub+0x74>
    89e6:	e096      	b.n	8b16 <__aeabi_fsub+0x1a2>
    89e8:	1b04      	subs	r4, r0, r4
    89ea:	003a      	movs	r2, r7
    89ec:	2020      	movs	r0, #32
    89ee:	3401      	adds	r4, #1
    89f0:	40e2      	lsrs	r2, r4
    89f2:	1b04      	subs	r4, r0, r4
    89f4:	40a7      	lsls	r7, r4
    89f6:	003b      	movs	r3, r7
    89f8:	1e5f      	subs	r7, r3, #1
    89fa:	41bb      	sbcs	r3, r7
    89fc:	2400      	movs	r4, #0
    89fe:	4313      	orrs	r3, r2
    8a00:	075a      	lsls	r2, r3, #29
    8a02:	d004      	beq.n	8a0e <__aeabi_fsub+0x9a>
    8a04:	220f      	movs	r2, #15
    8a06:	401a      	ands	r2, r3
    8a08:	2a04      	cmp	r2, #4
    8a0a:	d000      	beq.n	8a0e <__aeabi_fsub+0x9a>
    8a0c:	3304      	adds	r3, #4
    8a0e:	015a      	lsls	r2, r3, #5
    8a10:	d527      	bpl.n	8a62 <__aeabi_fsub+0xee>
    8a12:	3401      	adds	r4, #1
    8a14:	2cff      	cmp	r4, #255	; 0xff
    8a16:	d100      	bne.n	8a1a <__aeabi_fsub+0xa6>
    8a18:	e079      	b.n	8b0e <__aeabi_fsub+0x19a>
    8a1a:	2201      	movs	r2, #1
    8a1c:	019b      	lsls	r3, r3, #6
    8a1e:	0a5b      	lsrs	r3, r3, #9
    8a20:	b2e4      	uxtb	r4, r4
    8a22:	402a      	ands	r2, r5
    8a24:	025b      	lsls	r3, r3, #9
    8a26:	05e4      	lsls	r4, r4, #23
    8a28:	0a58      	lsrs	r0, r3, #9
    8a2a:	07d2      	lsls	r2, r2, #31
    8a2c:	4320      	orrs	r0, r4
    8a2e:	4310      	orrs	r0, r2
    8a30:	bc1c      	pop	{r2, r3, r4}
    8a32:	4690      	mov	r8, r2
    8a34:	4699      	mov	r9, r3
    8a36:	46a2      	mov	sl, r4
    8a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a3a:	2cff      	cmp	r4, #255	; 0xff
    8a3c:	d0e0      	beq.n	8a00 <__aeabi_fsub+0x8c>
    8a3e:	2180      	movs	r1, #128	; 0x80
    8a40:	04c9      	lsls	r1, r1, #19
    8a42:	430e      	orrs	r6, r1
    8a44:	2a1b      	cmp	r2, #27
    8a46:	dc7b      	bgt.n	8b40 <__aeabi_fsub+0x1cc>
    8a48:	0031      	movs	r1, r6
    8a4a:	2020      	movs	r0, #32
    8a4c:	40d1      	lsrs	r1, r2
    8a4e:	1a82      	subs	r2, r0, r2
    8a50:	4096      	lsls	r6, r2
    8a52:	1e72      	subs	r2, r6, #1
    8a54:	4196      	sbcs	r6, r2
    8a56:	430e      	orrs	r6, r1
    8a58:	1b9b      	subs	r3, r3, r6
    8a5a:	015a      	lsls	r2, r3, #5
    8a5c:	d4ba      	bmi.n	89d4 <__aeabi_fsub+0x60>
    8a5e:	075a      	lsls	r2, r3, #29
    8a60:	d1d0      	bne.n	8a04 <__aeabi_fsub+0x90>
    8a62:	2201      	movs	r2, #1
    8a64:	08df      	lsrs	r7, r3, #3
    8a66:	402a      	ands	r2, r5
    8a68:	2cff      	cmp	r4, #255	; 0xff
    8a6a:	d133      	bne.n	8ad4 <__aeabi_fsub+0x160>
    8a6c:	2f00      	cmp	r7, #0
    8a6e:	d100      	bne.n	8a72 <__aeabi_fsub+0xfe>
    8a70:	e0a8      	b.n	8bc4 <__aeabi_fsub+0x250>
    8a72:	2380      	movs	r3, #128	; 0x80
    8a74:	03db      	lsls	r3, r3, #15
    8a76:	433b      	orrs	r3, r7
    8a78:	025b      	lsls	r3, r3, #9
    8a7a:	0a5b      	lsrs	r3, r3, #9
    8a7c:	24ff      	movs	r4, #255	; 0xff
    8a7e:	e7d1      	b.n	8a24 <__aeabi_fsub+0xb0>
    8a80:	1a21      	subs	r1, r4, r0
    8a82:	2900      	cmp	r1, #0
    8a84:	dd4c      	ble.n	8b20 <__aeabi_fsub+0x1ac>
    8a86:	2800      	cmp	r0, #0
    8a88:	d02a      	beq.n	8ae0 <__aeabi_fsub+0x16c>
    8a8a:	2cff      	cmp	r4, #255	; 0xff
    8a8c:	d0b8      	beq.n	8a00 <__aeabi_fsub+0x8c>
    8a8e:	2080      	movs	r0, #128	; 0x80
    8a90:	04c0      	lsls	r0, r0, #19
    8a92:	4306      	orrs	r6, r0
    8a94:	291b      	cmp	r1, #27
    8a96:	dd00      	ble.n	8a9a <__aeabi_fsub+0x126>
    8a98:	e0af      	b.n	8bfa <__aeabi_fsub+0x286>
    8a9a:	0030      	movs	r0, r6
    8a9c:	2720      	movs	r7, #32
    8a9e:	40c8      	lsrs	r0, r1
    8aa0:	1a79      	subs	r1, r7, r1
    8aa2:	408e      	lsls	r6, r1
    8aa4:	1e71      	subs	r1, r6, #1
    8aa6:	418e      	sbcs	r6, r1
    8aa8:	4306      	orrs	r6, r0
    8aaa:	199b      	adds	r3, r3, r6
    8aac:	0159      	lsls	r1, r3, #5
    8aae:	d5d6      	bpl.n	8a5e <__aeabi_fsub+0xea>
    8ab0:	3401      	adds	r4, #1
    8ab2:	2cff      	cmp	r4, #255	; 0xff
    8ab4:	d100      	bne.n	8ab8 <__aeabi_fsub+0x144>
    8ab6:	e085      	b.n	8bc4 <__aeabi_fsub+0x250>
    8ab8:	2201      	movs	r2, #1
    8aba:	497a      	ldr	r1, [pc, #488]	; (8ca4 <__aeabi_fsub+0x330>)
    8abc:	401a      	ands	r2, r3
    8abe:	085b      	lsrs	r3, r3, #1
    8ac0:	400b      	ands	r3, r1
    8ac2:	4313      	orrs	r3, r2
    8ac4:	e79c      	b.n	8a00 <__aeabi_fsub+0x8c>
    8ac6:	2e00      	cmp	r6, #0
    8ac8:	d000      	beq.n	8acc <__aeabi_fsub+0x158>
    8aca:	e770      	b.n	89ae <__aeabi_fsub+0x3a>
    8acc:	e76b      	b.n	89a6 <__aeabi_fsub+0x32>
    8ace:	1e3b      	subs	r3, r7, #0
    8ad0:	d1c5      	bne.n	8a5e <__aeabi_fsub+0xea>
    8ad2:	2200      	movs	r2, #0
    8ad4:	027b      	lsls	r3, r7, #9
    8ad6:	0a5b      	lsrs	r3, r3, #9
    8ad8:	b2e4      	uxtb	r4, r4
    8ada:	e7a3      	b.n	8a24 <__aeabi_fsub+0xb0>
    8adc:	0014      	movs	r4, r2
    8ade:	e78f      	b.n	8a00 <__aeabi_fsub+0x8c>
    8ae0:	2e00      	cmp	r6, #0
    8ae2:	d04d      	beq.n	8b80 <__aeabi_fsub+0x20c>
    8ae4:	1e48      	subs	r0, r1, #1
    8ae6:	2800      	cmp	r0, #0
    8ae8:	d157      	bne.n	8b9a <__aeabi_fsub+0x226>
    8aea:	199b      	adds	r3, r3, r6
    8aec:	2401      	movs	r4, #1
    8aee:	015a      	lsls	r2, r3, #5
    8af0:	d5b5      	bpl.n	8a5e <__aeabi_fsub+0xea>
    8af2:	2402      	movs	r4, #2
    8af4:	e7e0      	b.n	8ab8 <__aeabi_fsub+0x144>
    8af6:	2a00      	cmp	r2, #0
    8af8:	d125      	bne.n	8b46 <__aeabi_fsub+0x1d2>
    8afa:	1c62      	adds	r2, r4, #1
    8afc:	b2d2      	uxtb	r2, r2
    8afe:	2a01      	cmp	r2, #1
    8b00:	dd72      	ble.n	8be8 <__aeabi_fsub+0x274>
    8b02:	1b9f      	subs	r7, r3, r6
    8b04:	017a      	lsls	r2, r7, #5
    8b06:	d535      	bpl.n	8b74 <__aeabi_fsub+0x200>
    8b08:	1af7      	subs	r7, r6, r3
    8b0a:	000d      	movs	r5, r1
    8b0c:	e764      	b.n	89d8 <__aeabi_fsub+0x64>
    8b0e:	2201      	movs	r2, #1
    8b10:	2300      	movs	r3, #0
    8b12:	402a      	ands	r2, r5
    8b14:	e786      	b.n	8a24 <__aeabi_fsub+0xb0>
    8b16:	003b      	movs	r3, r7
    8b18:	4a63      	ldr	r2, [pc, #396]	; (8ca8 <__aeabi_fsub+0x334>)
    8b1a:	1a24      	subs	r4, r4, r0
    8b1c:	4013      	ands	r3, r2
    8b1e:	e76f      	b.n	8a00 <__aeabi_fsub+0x8c>
    8b20:	2900      	cmp	r1, #0
    8b22:	d16c      	bne.n	8bfe <__aeabi_fsub+0x28a>
    8b24:	1c61      	adds	r1, r4, #1
    8b26:	b2c8      	uxtb	r0, r1
    8b28:	2801      	cmp	r0, #1
    8b2a:	dd4e      	ble.n	8bca <__aeabi_fsub+0x256>
    8b2c:	29ff      	cmp	r1, #255	; 0xff
    8b2e:	d049      	beq.n	8bc4 <__aeabi_fsub+0x250>
    8b30:	199b      	adds	r3, r3, r6
    8b32:	085b      	lsrs	r3, r3, #1
    8b34:	000c      	movs	r4, r1
    8b36:	e763      	b.n	8a00 <__aeabi_fsub+0x8c>
    8b38:	2aff      	cmp	r2, #255	; 0xff
    8b3a:	d041      	beq.n	8bc0 <__aeabi_fsub+0x24c>
    8b3c:	000a      	movs	r2, r1
    8b3e:	e781      	b.n	8a44 <__aeabi_fsub+0xd0>
    8b40:	2601      	movs	r6, #1
    8b42:	1b9b      	subs	r3, r3, r6
    8b44:	e789      	b.n	8a5a <__aeabi_fsub+0xe6>
    8b46:	2c00      	cmp	r4, #0
    8b48:	d01c      	beq.n	8b84 <__aeabi_fsub+0x210>
    8b4a:	28ff      	cmp	r0, #255	; 0xff
    8b4c:	d021      	beq.n	8b92 <__aeabi_fsub+0x21e>
    8b4e:	2480      	movs	r4, #128	; 0x80
    8b50:	04e4      	lsls	r4, r4, #19
    8b52:	4252      	negs	r2, r2
    8b54:	4323      	orrs	r3, r4
    8b56:	2a1b      	cmp	r2, #27
    8b58:	dd00      	ble.n	8b5c <__aeabi_fsub+0x1e8>
    8b5a:	e096      	b.n	8c8a <__aeabi_fsub+0x316>
    8b5c:	001c      	movs	r4, r3
    8b5e:	2520      	movs	r5, #32
    8b60:	40d4      	lsrs	r4, r2
    8b62:	1aaa      	subs	r2, r5, r2
    8b64:	4093      	lsls	r3, r2
    8b66:	1e5a      	subs	r2, r3, #1
    8b68:	4193      	sbcs	r3, r2
    8b6a:	4323      	orrs	r3, r4
    8b6c:	1af3      	subs	r3, r6, r3
    8b6e:	0004      	movs	r4, r0
    8b70:	000d      	movs	r5, r1
    8b72:	e72d      	b.n	89d0 <__aeabi_fsub+0x5c>
    8b74:	2f00      	cmp	r7, #0
    8b76:	d000      	beq.n	8b7a <__aeabi_fsub+0x206>
    8b78:	e72e      	b.n	89d8 <__aeabi_fsub+0x64>
    8b7a:	2200      	movs	r2, #0
    8b7c:	2400      	movs	r4, #0
    8b7e:	e7a9      	b.n	8ad4 <__aeabi_fsub+0x160>
    8b80:	000c      	movs	r4, r1
    8b82:	e73d      	b.n	8a00 <__aeabi_fsub+0x8c>
    8b84:	2b00      	cmp	r3, #0
    8b86:	d058      	beq.n	8c3a <__aeabi_fsub+0x2c6>
    8b88:	43d2      	mvns	r2, r2
    8b8a:	2a00      	cmp	r2, #0
    8b8c:	d0ee      	beq.n	8b6c <__aeabi_fsub+0x1f8>
    8b8e:	28ff      	cmp	r0, #255	; 0xff
    8b90:	d1e1      	bne.n	8b56 <__aeabi_fsub+0x1e2>
    8b92:	0033      	movs	r3, r6
    8b94:	24ff      	movs	r4, #255	; 0xff
    8b96:	000d      	movs	r5, r1
    8b98:	e732      	b.n	8a00 <__aeabi_fsub+0x8c>
    8b9a:	29ff      	cmp	r1, #255	; 0xff
    8b9c:	d010      	beq.n	8bc0 <__aeabi_fsub+0x24c>
    8b9e:	0001      	movs	r1, r0
    8ba0:	e778      	b.n	8a94 <__aeabi_fsub+0x120>
    8ba2:	2b00      	cmp	r3, #0
    8ba4:	d06e      	beq.n	8c84 <__aeabi_fsub+0x310>
    8ba6:	24ff      	movs	r4, #255	; 0xff
    8ba8:	2e00      	cmp	r6, #0
    8baa:	d100      	bne.n	8bae <__aeabi_fsub+0x23a>
    8bac:	e728      	b.n	8a00 <__aeabi_fsub+0x8c>
    8bae:	2280      	movs	r2, #128	; 0x80
    8bb0:	4651      	mov	r1, sl
    8bb2:	03d2      	lsls	r2, r2, #15
    8bb4:	4211      	tst	r1, r2
    8bb6:	d003      	beq.n	8bc0 <__aeabi_fsub+0x24c>
    8bb8:	4661      	mov	r1, ip
    8bba:	4211      	tst	r1, r2
    8bbc:	d100      	bne.n	8bc0 <__aeabi_fsub+0x24c>
    8bbe:	0033      	movs	r3, r6
    8bc0:	24ff      	movs	r4, #255	; 0xff
    8bc2:	e71d      	b.n	8a00 <__aeabi_fsub+0x8c>
    8bc4:	24ff      	movs	r4, #255	; 0xff
    8bc6:	2300      	movs	r3, #0
    8bc8:	e72c      	b.n	8a24 <__aeabi_fsub+0xb0>
    8bca:	2c00      	cmp	r4, #0
    8bcc:	d1e9      	bne.n	8ba2 <__aeabi_fsub+0x22e>
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d063      	beq.n	8c9a <__aeabi_fsub+0x326>
    8bd2:	2e00      	cmp	r6, #0
    8bd4:	d100      	bne.n	8bd8 <__aeabi_fsub+0x264>
    8bd6:	e713      	b.n	8a00 <__aeabi_fsub+0x8c>
    8bd8:	199b      	adds	r3, r3, r6
    8bda:	015a      	lsls	r2, r3, #5
    8bdc:	d400      	bmi.n	8be0 <__aeabi_fsub+0x26c>
    8bde:	e73e      	b.n	8a5e <__aeabi_fsub+0xea>
    8be0:	4a31      	ldr	r2, [pc, #196]	; (8ca8 <__aeabi_fsub+0x334>)
    8be2:	000c      	movs	r4, r1
    8be4:	4013      	ands	r3, r2
    8be6:	e70b      	b.n	8a00 <__aeabi_fsub+0x8c>
    8be8:	2c00      	cmp	r4, #0
    8bea:	d11e      	bne.n	8c2a <__aeabi_fsub+0x2b6>
    8bec:	2b00      	cmp	r3, #0
    8bee:	d12f      	bne.n	8c50 <__aeabi_fsub+0x2dc>
    8bf0:	2e00      	cmp	r6, #0
    8bf2:	d04f      	beq.n	8c94 <__aeabi_fsub+0x320>
    8bf4:	0033      	movs	r3, r6
    8bf6:	000d      	movs	r5, r1
    8bf8:	e702      	b.n	8a00 <__aeabi_fsub+0x8c>
    8bfa:	2601      	movs	r6, #1
    8bfc:	e755      	b.n	8aaa <__aeabi_fsub+0x136>
    8bfe:	2c00      	cmp	r4, #0
    8c00:	d11f      	bne.n	8c42 <__aeabi_fsub+0x2ce>
    8c02:	2b00      	cmp	r3, #0
    8c04:	d043      	beq.n	8c8e <__aeabi_fsub+0x31a>
    8c06:	43c9      	mvns	r1, r1
    8c08:	2900      	cmp	r1, #0
    8c0a:	d00b      	beq.n	8c24 <__aeabi_fsub+0x2b0>
    8c0c:	28ff      	cmp	r0, #255	; 0xff
    8c0e:	d039      	beq.n	8c84 <__aeabi_fsub+0x310>
    8c10:	291b      	cmp	r1, #27
    8c12:	dc44      	bgt.n	8c9e <__aeabi_fsub+0x32a>
    8c14:	001c      	movs	r4, r3
    8c16:	2720      	movs	r7, #32
    8c18:	40cc      	lsrs	r4, r1
    8c1a:	1a79      	subs	r1, r7, r1
    8c1c:	408b      	lsls	r3, r1
    8c1e:	1e59      	subs	r1, r3, #1
    8c20:	418b      	sbcs	r3, r1
    8c22:	4323      	orrs	r3, r4
    8c24:	199b      	adds	r3, r3, r6
    8c26:	0004      	movs	r4, r0
    8c28:	e740      	b.n	8aac <__aeabi_fsub+0x138>
    8c2a:	2b00      	cmp	r3, #0
    8c2c:	d11a      	bne.n	8c64 <__aeabi_fsub+0x2f0>
    8c2e:	2e00      	cmp	r6, #0
    8c30:	d124      	bne.n	8c7c <__aeabi_fsub+0x308>
    8c32:	2780      	movs	r7, #128	; 0x80
    8c34:	2200      	movs	r2, #0
    8c36:	03ff      	lsls	r7, r7, #15
    8c38:	e71b      	b.n	8a72 <__aeabi_fsub+0xfe>
    8c3a:	0033      	movs	r3, r6
    8c3c:	0004      	movs	r4, r0
    8c3e:	000d      	movs	r5, r1
    8c40:	e6de      	b.n	8a00 <__aeabi_fsub+0x8c>
    8c42:	28ff      	cmp	r0, #255	; 0xff
    8c44:	d01e      	beq.n	8c84 <__aeabi_fsub+0x310>
    8c46:	2480      	movs	r4, #128	; 0x80
    8c48:	04e4      	lsls	r4, r4, #19
    8c4a:	4249      	negs	r1, r1
    8c4c:	4323      	orrs	r3, r4
    8c4e:	e7df      	b.n	8c10 <__aeabi_fsub+0x29c>
    8c50:	2e00      	cmp	r6, #0
    8c52:	d100      	bne.n	8c56 <__aeabi_fsub+0x2e2>
    8c54:	e6d4      	b.n	8a00 <__aeabi_fsub+0x8c>
    8c56:	1b9f      	subs	r7, r3, r6
    8c58:	017a      	lsls	r2, r7, #5
    8c5a:	d400      	bmi.n	8c5e <__aeabi_fsub+0x2ea>
    8c5c:	e737      	b.n	8ace <__aeabi_fsub+0x15a>
    8c5e:	1af3      	subs	r3, r6, r3
    8c60:	000d      	movs	r5, r1
    8c62:	e6cd      	b.n	8a00 <__aeabi_fsub+0x8c>
    8c64:	24ff      	movs	r4, #255	; 0xff
    8c66:	2e00      	cmp	r6, #0
    8c68:	d100      	bne.n	8c6c <__aeabi_fsub+0x2f8>
    8c6a:	e6c9      	b.n	8a00 <__aeabi_fsub+0x8c>
    8c6c:	2280      	movs	r2, #128	; 0x80
    8c6e:	4650      	mov	r0, sl
    8c70:	03d2      	lsls	r2, r2, #15
    8c72:	4210      	tst	r0, r2
    8c74:	d0a4      	beq.n	8bc0 <__aeabi_fsub+0x24c>
    8c76:	4660      	mov	r0, ip
    8c78:	4210      	tst	r0, r2
    8c7a:	d1a1      	bne.n	8bc0 <__aeabi_fsub+0x24c>
    8c7c:	0033      	movs	r3, r6
    8c7e:	000d      	movs	r5, r1
    8c80:	24ff      	movs	r4, #255	; 0xff
    8c82:	e6bd      	b.n	8a00 <__aeabi_fsub+0x8c>
    8c84:	0033      	movs	r3, r6
    8c86:	24ff      	movs	r4, #255	; 0xff
    8c88:	e6ba      	b.n	8a00 <__aeabi_fsub+0x8c>
    8c8a:	2301      	movs	r3, #1
    8c8c:	e76e      	b.n	8b6c <__aeabi_fsub+0x1f8>
    8c8e:	0033      	movs	r3, r6
    8c90:	0004      	movs	r4, r0
    8c92:	e6b5      	b.n	8a00 <__aeabi_fsub+0x8c>
    8c94:	2700      	movs	r7, #0
    8c96:	2200      	movs	r2, #0
    8c98:	e71c      	b.n	8ad4 <__aeabi_fsub+0x160>
    8c9a:	0033      	movs	r3, r6
    8c9c:	e6b0      	b.n	8a00 <__aeabi_fsub+0x8c>
    8c9e:	2301      	movs	r3, #1
    8ca0:	e7c0      	b.n	8c24 <__aeabi_fsub+0x2b0>
    8ca2:	46c0      	nop			; (mov r8, r8)
    8ca4:	7dffffff 	.word	0x7dffffff
    8ca8:	fbffffff 	.word	0xfbffffff

00008cac <__aeabi_fcmpun>:
    8cac:	0242      	lsls	r2, r0, #9
    8cae:	024b      	lsls	r3, r1, #9
    8cb0:	0040      	lsls	r0, r0, #1
    8cb2:	0049      	lsls	r1, r1, #1
    8cb4:	0a52      	lsrs	r2, r2, #9
    8cb6:	0e00      	lsrs	r0, r0, #24
    8cb8:	0a5b      	lsrs	r3, r3, #9
    8cba:	0e09      	lsrs	r1, r1, #24
    8cbc:	28ff      	cmp	r0, #255	; 0xff
    8cbe:	d003      	beq.n	8cc8 <__aeabi_fcmpun+0x1c>
    8cc0:	2000      	movs	r0, #0
    8cc2:	29ff      	cmp	r1, #255	; 0xff
    8cc4:	d006      	beq.n	8cd4 <__aeabi_fcmpun+0x28>
    8cc6:	4770      	bx	lr
    8cc8:	38fe      	subs	r0, #254	; 0xfe
    8cca:	2a00      	cmp	r2, #0
    8ccc:	d1fb      	bne.n	8cc6 <__aeabi_fcmpun+0x1a>
    8cce:	2000      	movs	r0, #0
    8cd0:	29ff      	cmp	r1, #255	; 0xff
    8cd2:	d1f8      	bne.n	8cc6 <__aeabi_fcmpun+0x1a>
    8cd4:	0018      	movs	r0, r3
    8cd6:	1e43      	subs	r3, r0, #1
    8cd8:	4198      	sbcs	r0, r3
    8cda:	e7f4      	b.n	8cc6 <__aeabi_fcmpun+0x1a>

00008cdc <__aeabi_f2iz>:
    8cdc:	0241      	lsls	r1, r0, #9
    8cde:	0043      	lsls	r3, r0, #1
    8ce0:	0fc2      	lsrs	r2, r0, #31
    8ce2:	0a49      	lsrs	r1, r1, #9
    8ce4:	0e1b      	lsrs	r3, r3, #24
    8ce6:	2000      	movs	r0, #0
    8ce8:	2b7e      	cmp	r3, #126	; 0x7e
    8cea:	dd0d      	ble.n	8d08 <__aeabi_f2iz+0x2c>
    8cec:	2b9d      	cmp	r3, #157	; 0x9d
    8cee:	dc0c      	bgt.n	8d0a <__aeabi_f2iz+0x2e>
    8cf0:	2080      	movs	r0, #128	; 0x80
    8cf2:	0400      	lsls	r0, r0, #16
    8cf4:	4301      	orrs	r1, r0
    8cf6:	2b95      	cmp	r3, #149	; 0x95
    8cf8:	dc0a      	bgt.n	8d10 <__aeabi_f2iz+0x34>
    8cfa:	2096      	movs	r0, #150	; 0x96
    8cfc:	1ac3      	subs	r3, r0, r3
    8cfe:	40d9      	lsrs	r1, r3
    8d00:	4248      	negs	r0, r1
    8d02:	2a00      	cmp	r2, #0
    8d04:	d100      	bne.n	8d08 <__aeabi_f2iz+0x2c>
    8d06:	0008      	movs	r0, r1
    8d08:	4770      	bx	lr
    8d0a:	4b03      	ldr	r3, [pc, #12]	; (8d18 <__aeabi_f2iz+0x3c>)
    8d0c:	18d0      	adds	r0, r2, r3
    8d0e:	e7fb      	b.n	8d08 <__aeabi_f2iz+0x2c>
    8d10:	3b96      	subs	r3, #150	; 0x96
    8d12:	4099      	lsls	r1, r3
    8d14:	e7f4      	b.n	8d00 <__aeabi_f2iz+0x24>
    8d16:	46c0      	nop			; (mov r8, r8)
    8d18:	7fffffff 	.word	0x7fffffff

00008d1c <__aeabi_i2f>:
    8d1c:	b570      	push	{r4, r5, r6, lr}
    8d1e:	2800      	cmp	r0, #0
    8d20:	d030      	beq.n	8d84 <__aeabi_i2f+0x68>
    8d22:	17c3      	asrs	r3, r0, #31
    8d24:	18c4      	adds	r4, r0, r3
    8d26:	405c      	eors	r4, r3
    8d28:	0fc5      	lsrs	r5, r0, #31
    8d2a:	0020      	movs	r0, r4
    8d2c:	f001 ff10 	bl	ab50 <__clzsi2>
    8d30:	239e      	movs	r3, #158	; 0x9e
    8d32:	1a1b      	subs	r3, r3, r0
    8d34:	2b96      	cmp	r3, #150	; 0x96
    8d36:	dc0d      	bgt.n	8d54 <__aeabi_i2f+0x38>
    8d38:	2296      	movs	r2, #150	; 0x96
    8d3a:	1ad2      	subs	r2, r2, r3
    8d3c:	4094      	lsls	r4, r2
    8d3e:	002a      	movs	r2, r5
    8d40:	0264      	lsls	r4, r4, #9
    8d42:	0a64      	lsrs	r4, r4, #9
    8d44:	b2db      	uxtb	r3, r3
    8d46:	0264      	lsls	r4, r4, #9
    8d48:	05db      	lsls	r3, r3, #23
    8d4a:	0a60      	lsrs	r0, r4, #9
    8d4c:	07d2      	lsls	r2, r2, #31
    8d4e:	4318      	orrs	r0, r3
    8d50:	4310      	orrs	r0, r2
    8d52:	bd70      	pop	{r4, r5, r6, pc}
    8d54:	2b99      	cmp	r3, #153	; 0x99
    8d56:	dc19      	bgt.n	8d8c <__aeabi_i2f+0x70>
    8d58:	2299      	movs	r2, #153	; 0x99
    8d5a:	1ad2      	subs	r2, r2, r3
    8d5c:	2a00      	cmp	r2, #0
    8d5e:	dd29      	ble.n	8db4 <__aeabi_i2f+0x98>
    8d60:	4094      	lsls	r4, r2
    8d62:	0022      	movs	r2, r4
    8d64:	4c14      	ldr	r4, [pc, #80]	; (8db8 <__aeabi_i2f+0x9c>)
    8d66:	4014      	ands	r4, r2
    8d68:	0751      	lsls	r1, r2, #29
    8d6a:	d004      	beq.n	8d76 <__aeabi_i2f+0x5a>
    8d6c:	210f      	movs	r1, #15
    8d6e:	400a      	ands	r2, r1
    8d70:	2a04      	cmp	r2, #4
    8d72:	d000      	beq.n	8d76 <__aeabi_i2f+0x5a>
    8d74:	3404      	adds	r4, #4
    8d76:	0162      	lsls	r2, r4, #5
    8d78:	d413      	bmi.n	8da2 <__aeabi_i2f+0x86>
    8d7a:	01a4      	lsls	r4, r4, #6
    8d7c:	0a64      	lsrs	r4, r4, #9
    8d7e:	b2db      	uxtb	r3, r3
    8d80:	002a      	movs	r2, r5
    8d82:	e7e0      	b.n	8d46 <__aeabi_i2f+0x2a>
    8d84:	2200      	movs	r2, #0
    8d86:	2300      	movs	r3, #0
    8d88:	2400      	movs	r4, #0
    8d8a:	e7dc      	b.n	8d46 <__aeabi_i2f+0x2a>
    8d8c:	2205      	movs	r2, #5
    8d8e:	0021      	movs	r1, r4
    8d90:	1a12      	subs	r2, r2, r0
    8d92:	40d1      	lsrs	r1, r2
    8d94:	22b9      	movs	r2, #185	; 0xb9
    8d96:	1ad2      	subs	r2, r2, r3
    8d98:	4094      	lsls	r4, r2
    8d9a:	1e62      	subs	r2, r4, #1
    8d9c:	4194      	sbcs	r4, r2
    8d9e:	430c      	orrs	r4, r1
    8da0:	e7da      	b.n	8d58 <__aeabi_i2f+0x3c>
    8da2:	4b05      	ldr	r3, [pc, #20]	; (8db8 <__aeabi_i2f+0x9c>)
    8da4:	002a      	movs	r2, r5
    8da6:	401c      	ands	r4, r3
    8da8:	239f      	movs	r3, #159	; 0x9f
    8daa:	01a4      	lsls	r4, r4, #6
    8dac:	1a1b      	subs	r3, r3, r0
    8dae:	0a64      	lsrs	r4, r4, #9
    8db0:	b2db      	uxtb	r3, r3
    8db2:	e7c8      	b.n	8d46 <__aeabi_i2f+0x2a>
    8db4:	0022      	movs	r2, r4
    8db6:	e7d5      	b.n	8d64 <__aeabi_i2f+0x48>
    8db8:	fbffffff 	.word	0xfbffffff

00008dbc <__aeabi_ui2f>:
    8dbc:	b510      	push	{r4, lr}
    8dbe:	1e04      	subs	r4, r0, #0
    8dc0:	d027      	beq.n	8e12 <__aeabi_ui2f+0x56>
    8dc2:	f001 fec5 	bl	ab50 <__clzsi2>
    8dc6:	239e      	movs	r3, #158	; 0x9e
    8dc8:	1a1b      	subs	r3, r3, r0
    8dca:	2b96      	cmp	r3, #150	; 0x96
    8dcc:	dc0a      	bgt.n	8de4 <__aeabi_ui2f+0x28>
    8dce:	2296      	movs	r2, #150	; 0x96
    8dd0:	1ad2      	subs	r2, r2, r3
    8dd2:	4094      	lsls	r4, r2
    8dd4:	0264      	lsls	r4, r4, #9
    8dd6:	0a64      	lsrs	r4, r4, #9
    8dd8:	b2db      	uxtb	r3, r3
    8dda:	0264      	lsls	r4, r4, #9
    8ddc:	05db      	lsls	r3, r3, #23
    8dde:	0a60      	lsrs	r0, r4, #9
    8de0:	4318      	orrs	r0, r3
    8de2:	bd10      	pop	{r4, pc}
    8de4:	2b99      	cmp	r3, #153	; 0x99
    8de6:	dc17      	bgt.n	8e18 <__aeabi_ui2f+0x5c>
    8de8:	2299      	movs	r2, #153	; 0x99
    8dea:	1ad2      	subs	r2, r2, r3
    8dec:	2a00      	cmp	r2, #0
    8dee:	dd27      	ble.n	8e40 <__aeabi_ui2f+0x84>
    8df0:	4094      	lsls	r4, r2
    8df2:	0022      	movs	r2, r4
    8df4:	4c13      	ldr	r4, [pc, #76]	; (8e44 <__aeabi_ui2f+0x88>)
    8df6:	4014      	ands	r4, r2
    8df8:	0751      	lsls	r1, r2, #29
    8dfa:	d004      	beq.n	8e06 <__aeabi_ui2f+0x4a>
    8dfc:	210f      	movs	r1, #15
    8dfe:	400a      	ands	r2, r1
    8e00:	2a04      	cmp	r2, #4
    8e02:	d000      	beq.n	8e06 <__aeabi_ui2f+0x4a>
    8e04:	3404      	adds	r4, #4
    8e06:	0162      	lsls	r2, r4, #5
    8e08:	d412      	bmi.n	8e30 <__aeabi_ui2f+0x74>
    8e0a:	01a4      	lsls	r4, r4, #6
    8e0c:	0a64      	lsrs	r4, r4, #9
    8e0e:	b2db      	uxtb	r3, r3
    8e10:	e7e3      	b.n	8dda <__aeabi_ui2f+0x1e>
    8e12:	2300      	movs	r3, #0
    8e14:	2400      	movs	r4, #0
    8e16:	e7e0      	b.n	8dda <__aeabi_ui2f+0x1e>
    8e18:	22b9      	movs	r2, #185	; 0xb9
    8e1a:	0021      	movs	r1, r4
    8e1c:	1ad2      	subs	r2, r2, r3
    8e1e:	4091      	lsls	r1, r2
    8e20:	000a      	movs	r2, r1
    8e22:	1e51      	subs	r1, r2, #1
    8e24:	418a      	sbcs	r2, r1
    8e26:	2105      	movs	r1, #5
    8e28:	1a09      	subs	r1, r1, r0
    8e2a:	40cc      	lsrs	r4, r1
    8e2c:	4314      	orrs	r4, r2
    8e2e:	e7db      	b.n	8de8 <__aeabi_ui2f+0x2c>
    8e30:	4b04      	ldr	r3, [pc, #16]	; (8e44 <__aeabi_ui2f+0x88>)
    8e32:	401c      	ands	r4, r3
    8e34:	239f      	movs	r3, #159	; 0x9f
    8e36:	01a4      	lsls	r4, r4, #6
    8e38:	1a1b      	subs	r3, r3, r0
    8e3a:	0a64      	lsrs	r4, r4, #9
    8e3c:	b2db      	uxtb	r3, r3
    8e3e:	e7cc      	b.n	8dda <__aeabi_ui2f+0x1e>
    8e40:	0022      	movs	r2, r4
    8e42:	e7d7      	b.n	8df4 <__aeabi_ui2f+0x38>
    8e44:	fbffffff 	.word	0xfbffffff

00008e48 <__aeabi_dadd>:
    8e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e4a:	4645      	mov	r5, r8
    8e4c:	46de      	mov	lr, fp
    8e4e:	4657      	mov	r7, sl
    8e50:	464e      	mov	r6, r9
    8e52:	030c      	lsls	r4, r1, #12
    8e54:	b5e0      	push	{r5, r6, r7, lr}
    8e56:	004e      	lsls	r6, r1, #1
    8e58:	0fc9      	lsrs	r1, r1, #31
    8e5a:	4688      	mov	r8, r1
    8e5c:	000d      	movs	r5, r1
    8e5e:	0a61      	lsrs	r1, r4, #9
    8e60:	0f44      	lsrs	r4, r0, #29
    8e62:	430c      	orrs	r4, r1
    8e64:	00c7      	lsls	r7, r0, #3
    8e66:	0319      	lsls	r1, r3, #12
    8e68:	0058      	lsls	r0, r3, #1
    8e6a:	0fdb      	lsrs	r3, r3, #31
    8e6c:	469b      	mov	fp, r3
    8e6e:	0a4b      	lsrs	r3, r1, #9
    8e70:	0f51      	lsrs	r1, r2, #29
    8e72:	430b      	orrs	r3, r1
    8e74:	0d76      	lsrs	r6, r6, #21
    8e76:	0d40      	lsrs	r0, r0, #21
    8e78:	0019      	movs	r1, r3
    8e7a:	00d2      	lsls	r2, r2, #3
    8e7c:	45d8      	cmp	r8, fp
    8e7e:	d100      	bne.n	8e82 <__aeabi_dadd+0x3a>
    8e80:	e0ae      	b.n	8fe0 <__aeabi_dadd+0x198>
    8e82:	1a35      	subs	r5, r6, r0
    8e84:	2d00      	cmp	r5, #0
    8e86:	dc00      	bgt.n	8e8a <__aeabi_dadd+0x42>
    8e88:	e0f6      	b.n	9078 <__aeabi_dadd+0x230>
    8e8a:	2800      	cmp	r0, #0
    8e8c:	d10f      	bne.n	8eae <__aeabi_dadd+0x66>
    8e8e:	4313      	orrs	r3, r2
    8e90:	d100      	bne.n	8e94 <__aeabi_dadd+0x4c>
    8e92:	e0db      	b.n	904c <__aeabi_dadd+0x204>
    8e94:	1e6b      	subs	r3, r5, #1
    8e96:	2b00      	cmp	r3, #0
    8e98:	d000      	beq.n	8e9c <__aeabi_dadd+0x54>
    8e9a:	e137      	b.n	910c <__aeabi_dadd+0x2c4>
    8e9c:	1aba      	subs	r2, r7, r2
    8e9e:	4297      	cmp	r7, r2
    8ea0:	41bf      	sbcs	r7, r7
    8ea2:	1a64      	subs	r4, r4, r1
    8ea4:	427f      	negs	r7, r7
    8ea6:	1be4      	subs	r4, r4, r7
    8ea8:	2601      	movs	r6, #1
    8eaa:	0017      	movs	r7, r2
    8eac:	e024      	b.n	8ef8 <__aeabi_dadd+0xb0>
    8eae:	4bc6      	ldr	r3, [pc, #792]	; (91c8 <__aeabi_dadd+0x380>)
    8eb0:	429e      	cmp	r6, r3
    8eb2:	d04d      	beq.n	8f50 <__aeabi_dadd+0x108>
    8eb4:	2380      	movs	r3, #128	; 0x80
    8eb6:	041b      	lsls	r3, r3, #16
    8eb8:	4319      	orrs	r1, r3
    8eba:	2d38      	cmp	r5, #56	; 0x38
    8ebc:	dd00      	ble.n	8ec0 <__aeabi_dadd+0x78>
    8ebe:	e107      	b.n	90d0 <__aeabi_dadd+0x288>
    8ec0:	2d1f      	cmp	r5, #31
    8ec2:	dd00      	ble.n	8ec6 <__aeabi_dadd+0x7e>
    8ec4:	e138      	b.n	9138 <__aeabi_dadd+0x2f0>
    8ec6:	2020      	movs	r0, #32
    8ec8:	1b43      	subs	r3, r0, r5
    8eca:	469a      	mov	sl, r3
    8ecc:	000b      	movs	r3, r1
    8ece:	4650      	mov	r0, sl
    8ed0:	4083      	lsls	r3, r0
    8ed2:	4699      	mov	r9, r3
    8ed4:	0013      	movs	r3, r2
    8ed6:	4648      	mov	r0, r9
    8ed8:	40eb      	lsrs	r3, r5
    8eda:	4318      	orrs	r0, r3
    8edc:	0003      	movs	r3, r0
    8ede:	4650      	mov	r0, sl
    8ee0:	4082      	lsls	r2, r0
    8ee2:	1e50      	subs	r0, r2, #1
    8ee4:	4182      	sbcs	r2, r0
    8ee6:	40e9      	lsrs	r1, r5
    8ee8:	431a      	orrs	r2, r3
    8eea:	1aba      	subs	r2, r7, r2
    8eec:	1a61      	subs	r1, r4, r1
    8eee:	4297      	cmp	r7, r2
    8ef0:	41a4      	sbcs	r4, r4
    8ef2:	0017      	movs	r7, r2
    8ef4:	4264      	negs	r4, r4
    8ef6:	1b0c      	subs	r4, r1, r4
    8ef8:	0223      	lsls	r3, r4, #8
    8efa:	d562      	bpl.n	8fc2 <__aeabi_dadd+0x17a>
    8efc:	0264      	lsls	r4, r4, #9
    8efe:	0a65      	lsrs	r5, r4, #9
    8f00:	2d00      	cmp	r5, #0
    8f02:	d100      	bne.n	8f06 <__aeabi_dadd+0xbe>
    8f04:	e0df      	b.n	90c6 <__aeabi_dadd+0x27e>
    8f06:	0028      	movs	r0, r5
    8f08:	f001 fe22 	bl	ab50 <__clzsi2>
    8f0c:	0003      	movs	r3, r0
    8f0e:	3b08      	subs	r3, #8
    8f10:	2b1f      	cmp	r3, #31
    8f12:	dd00      	ble.n	8f16 <__aeabi_dadd+0xce>
    8f14:	e0d2      	b.n	90bc <__aeabi_dadd+0x274>
    8f16:	2220      	movs	r2, #32
    8f18:	003c      	movs	r4, r7
    8f1a:	1ad2      	subs	r2, r2, r3
    8f1c:	409d      	lsls	r5, r3
    8f1e:	40d4      	lsrs	r4, r2
    8f20:	409f      	lsls	r7, r3
    8f22:	4325      	orrs	r5, r4
    8f24:	429e      	cmp	r6, r3
    8f26:	dd00      	ble.n	8f2a <__aeabi_dadd+0xe2>
    8f28:	e0c4      	b.n	90b4 <__aeabi_dadd+0x26c>
    8f2a:	1b9e      	subs	r6, r3, r6
    8f2c:	1c73      	adds	r3, r6, #1
    8f2e:	2b1f      	cmp	r3, #31
    8f30:	dd00      	ble.n	8f34 <__aeabi_dadd+0xec>
    8f32:	e0f1      	b.n	9118 <__aeabi_dadd+0x2d0>
    8f34:	2220      	movs	r2, #32
    8f36:	0038      	movs	r0, r7
    8f38:	0029      	movs	r1, r5
    8f3a:	1ad2      	subs	r2, r2, r3
    8f3c:	40d8      	lsrs	r0, r3
    8f3e:	4091      	lsls	r1, r2
    8f40:	4097      	lsls	r7, r2
    8f42:	002c      	movs	r4, r5
    8f44:	4301      	orrs	r1, r0
    8f46:	1e78      	subs	r0, r7, #1
    8f48:	4187      	sbcs	r7, r0
    8f4a:	40dc      	lsrs	r4, r3
    8f4c:	2600      	movs	r6, #0
    8f4e:	430f      	orrs	r7, r1
    8f50:	077b      	lsls	r3, r7, #29
    8f52:	d009      	beq.n	8f68 <__aeabi_dadd+0x120>
    8f54:	230f      	movs	r3, #15
    8f56:	403b      	ands	r3, r7
    8f58:	2b04      	cmp	r3, #4
    8f5a:	d005      	beq.n	8f68 <__aeabi_dadd+0x120>
    8f5c:	1d3b      	adds	r3, r7, #4
    8f5e:	42bb      	cmp	r3, r7
    8f60:	41bf      	sbcs	r7, r7
    8f62:	427f      	negs	r7, r7
    8f64:	19e4      	adds	r4, r4, r7
    8f66:	001f      	movs	r7, r3
    8f68:	0223      	lsls	r3, r4, #8
    8f6a:	d52c      	bpl.n	8fc6 <__aeabi_dadd+0x17e>
    8f6c:	4b96      	ldr	r3, [pc, #600]	; (91c8 <__aeabi_dadd+0x380>)
    8f6e:	3601      	adds	r6, #1
    8f70:	429e      	cmp	r6, r3
    8f72:	d100      	bne.n	8f76 <__aeabi_dadd+0x12e>
    8f74:	e09a      	b.n	90ac <__aeabi_dadd+0x264>
    8f76:	4645      	mov	r5, r8
    8f78:	4b94      	ldr	r3, [pc, #592]	; (91cc <__aeabi_dadd+0x384>)
    8f7a:	08ff      	lsrs	r7, r7, #3
    8f7c:	401c      	ands	r4, r3
    8f7e:	0760      	lsls	r0, r4, #29
    8f80:	0576      	lsls	r6, r6, #21
    8f82:	0264      	lsls	r4, r4, #9
    8f84:	4307      	orrs	r7, r0
    8f86:	0b24      	lsrs	r4, r4, #12
    8f88:	0d76      	lsrs	r6, r6, #21
    8f8a:	2100      	movs	r1, #0
    8f8c:	0324      	lsls	r4, r4, #12
    8f8e:	0b23      	lsrs	r3, r4, #12
    8f90:	0d0c      	lsrs	r4, r1, #20
    8f92:	4a8f      	ldr	r2, [pc, #572]	; (91d0 <__aeabi_dadd+0x388>)
    8f94:	0524      	lsls	r4, r4, #20
    8f96:	431c      	orrs	r4, r3
    8f98:	4014      	ands	r4, r2
    8f9a:	0533      	lsls	r3, r6, #20
    8f9c:	4323      	orrs	r3, r4
    8f9e:	005b      	lsls	r3, r3, #1
    8fa0:	07ed      	lsls	r5, r5, #31
    8fa2:	085b      	lsrs	r3, r3, #1
    8fa4:	432b      	orrs	r3, r5
    8fa6:	0038      	movs	r0, r7
    8fa8:	0019      	movs	r1, r3
    8faa:	bc3c      	pop	{r2, r3, r4, r5}
    8fac:	4690      	mov	r8, r2
    8fae:	4699      	mov	r9, r3
    8fb0:	46a2      	mov	sl, r4
    8fb2:	46ab      	mov	fp, r5
    8fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fb6:	4664      	mov	r4, ip
    8fb8:	4304      	orrs	r4, r0
    8fba:	d100      	bne.n	8fbe <__aeabi_dadd+0x176>
    8fbc:	e211      	b.n	93e2 <__aeabi_dadd+0x59a>
    8fbe:	0004      	movs	r4, r0
    8fc0:	4667      	mov	r7, ip
    8fc2:	077b      	lsls	r3, r7, #29
    8fc4:	d1c6      	bne.n	8f54 <__aeabi_dadd+0x10c>
    8fc6:	4645      	mov	r5, r8
    8fc8:	0760      	lsls	r0, r4, #29
    8fca:	08ff      	lsrs	r7, r7, #3
    8fcc:	4307      	orrs	r7, r0
    8fce:	08e4      	lsrs	r4, r4, #3
    8fd0:	4b7d      	ldr	r3, [pc, #500]	; (91c8 <__aeabi_dadd+0x380>)
    8fd2:	429e      	cmp	r6, r3
    8fd4:	d030      	beq.n	9038 <__aeabi_dadd+0x1f0>
    8fd6:	0324      	lsls	r4, r4, #12
    8fd8:	0576      	lsls	r6, r6, #21
    8fda:	0b24      	lsrs	r4, r4, #12
    8fdc:	0d76      	lsrs	r6, r6, #21
    8fde:	e7d4      	b.n	8f8a <__aeabi_dadd+0x142>
    8fe0:	1a33      	subs	r3, r6, r0
    8fe2:	469a      	mov	sl, r3
    8fe4:	2b00      	cmp	r3, #0
    8fe6:	dd78      	ble.n	90da <__aeabi_dadd+0x292>
    8fe8:	2800      	cmp	r0, #0
    8fea:	d031      	beq.n	9050 <__aeabi_dadd+0x208>
    8fec:	4876      	ldr	r0, [pc, #472]	; (91c8 <__aeabi_dadd+0x380>)
    8fee:	4286      	cmp	r6, r0
    8ff0:	d0ae      	beq.n	8f50 <__aeabi_dadd+0x108>
    8ff2:	2080      	movs	r0, #128	; 0x80
    8ff4:	0400      	lsls	r0, r0, #16
    8ff6:	4301      	orrs	r1, r0
    8ff8:	4653      	mov	r3, sl
    8ffa:	2b38      	cmp	r3, #56	; 0x38
    8ffc:	dc00      	bgt.n	9000 <__aeabi_dadd+0x1b8>
    8ffe:	e0e9      	b.n	91d4 <__aeabi_dadd+0x38c>
    9000:	430a      	orrs	r2, r1
    9002:	1e51      	subs	r1, r2, #1
    9004:	418a      	sbcs	r2, r1
    9006:	2100      	movs	r1, #0
    9008:	19d2      	adds	r2, r2, r7
    900a:	42ba      	cmp	r2, r7
    900c:	41bf      	sbcs	r7, r7
    900e:	1909      	adds	r1, r1, r4
    9010:	427c      	negs	r4, r7
    9012:	0017      	movs	r7, r2
    9014:	190c      	adds	r4, r1, r4
    9016:	0223      	lsls	r3, r4, #8
    9018:	d5d3      	bpl.n	8fc2 <__aeabi_dadd+0x17a>
    901a:	4b6b      	ldr	r3, [pc, #428]	; (91c8 <__aeabi_dadd+0x380>)
    901c:	3601      	adds	r6, #1
    901e:	429e      	cmp	r6, r3
    9020:	d100      	bne.n	9024 <__aeabi_dadd+0x1dc>
    9022:	e13a      	b.n	929a <__aeabi_dadd+0x452>
    9024:	2001      	movs	r0, #1
    9026:	4b69      	ldr	r3, [pc, #420]	; (91cc <__aeabi_dadd+0x384>)
    9028:	401c      	ands	r4, r3
    902a:	087b      	lsrs	r3, r7, #1
    902c:	4007      	ands	r7, r0
    902e:	431f      	orrs	r7, r3
    9030:	07e0      	lsls	r0, r4, #31
    9032:	4307      	orrs	r7, r0
    9034:	0864      	lsrs	r4, r4, #1
    9036:	e78b      	b.n	8f50 <__aeabi_dadd+0x108>
    9038:	0023      	movs	r3, r4
    903a:	433b      	orrs	r3, r7
    903c:	d100      	bne.n	9040 <__aeabi_dadd+0x1f8>
    903e:	e1cb      	b.n	93d8 <__aeabi_dadd+0x590>
    9040:	2280      	movs	r2, #128	; 0x80
    9042:	0312      	lsls	r2, r2, #12
    9044:	4314      	orrs	r4, r2
    9046:	0324      	lsls	r4, r4, #12
    9048:	0b24      	lsrs	r4, r4, #12
    904a:	e79e      	b.n	8f8a <__aeabi_dadd+0x142>
    904c:	002e      	movs	r6, r5
    904e:	e77f      	b.n	8f50 <__aeabi_dadd+0x108>
    9050:	0008      	movs	r0, r1
    9052:	4310      	orrs	r0, r2
    9054:	d100      	bne.n	9058 <__aeabi_dadd+0x210>
    9056:	e0b4      	b.n	91c2 <__aeabi_dadd+0x37a>
    9058:	1e58      	subs	r0, r3, #1
    905a:	2800      	cmp	r0, #0
    905c:	d000      	beq.n	9060 <__aeabi_dadd+0x218>
    905e:	e0de      	b.n	921e <__aeabi_dadd+0x3d6>
    9060:	18ba      	adds	r2, r7, r2
    9062:	42ba      	cmp	r2, r7
    9064:	419b      	sbcs	r3, r3
    9066:	1864      	adds	r4, r4, r1
    9068:	425b      	negs	r3, r3
    906a:	18e4      	adds	r4, r4, r3
    906c:	0017      	movs	r7, r2
    906e:	2601      	movs	r6, #1
    9070:	0223      	lsls	r3, r4, #8
    9072:	d5a6      	bpl.n	8fc2 <__aeabi_dadd+0x17a>
    9074:	2602      	movs	r6, #2
    9076:	e7d5      	b.n	9024 <__aeabi_dadd+0x1dc>
    9078:	2d00      	cmp	r5, #0
    907a:	d16e      	bne.n	915a <__aeabi_dadd+0x312>
    907c:	1c70      	adds	r0, r6, #1
    907e:	0540      	lsls	r0, r0, #21
    9080:	0d40      	lsrs	r0, r0, #21
    9082:	2801      	cmp	r0, #1
    9084:	dc00      	bgt.n	9088 <__aeabi_dadd+0x240>
    9086:	e0f9      	b.n	927c <__aeabi_dadd+0x434>
    9088:	1ab8      	subs	r0, r7, r2
    908a:	4684      	mov	ip, r0
    908c:	4287      	cmp	r7, r0
    908e:	4180      	sbcs	r0, r0
    9090:	1ae5      	subs	r5, r4, r3
    9092:	4240      	negs	r0, r0
    9094:	1a2d      	subs	r5, r5, r0
    9096:	0228      	lsls	r0, r5, #8
    9098:	d400      	bmi.n	909c <__aeabi_dadd+0x254>
    909a:	e089      	b.n	91b0 <__aeabi_dadd+0x368>
    909c:	1bd7      	subs	r7, r2, r7
    909e:	42ba      	cmp	r2, r7
    90a0:	4192      	sbcs	r2, r2
    90a2:	1b1c      	subs	r4, r3, r4
    90a4:	4252      	negs	r2, r2
    90a6:	1aa5      	subs	r5, r4, r2
    90a8:	46d8      	mov	r8, fp
    90aa:	e729      	b.n	8f00 <__aeabi_dadd+0xb8>
    90ac:	4645      	mov	r5, r8
    90ae:	2400      	movs	r4, #0
    90b0:	2700      	movs	r7, #0
    90b2:	e76a      	b.n	8f8a <__aeabi_dadd+0x142>
    90b4:	4c45      	ldr	r4, [pc, #276]	; (91cc <__aeabi_dadd+0x384>)
    90b6:	1af6      	subs	r6, r6, r3
    90b8:	402c      	ands	r4, r5
    90ba:	e749      	b.n	8f50 <__aeabi_dadd+0x108>
    90bc:	003d      	movs	r5, r7
    90be:	3828      	subs	r0, #40	; 0x28
    90c0:	4085      	lsls	r5, r0
    90c2:	2700      	movs	r7, #0
    90c4:	e72e      	b.n	8f24 <__aeabi_dadd+0xdc>
    90c6:	0038      	movs	r0, r7
    90c8:	f001 fd42 	bl	ab50 <__clzsi2>
    90cc:	3020      	adds	r0, #32
    90ce:	e71d      	b.n	8f0c <__aeabi_dadd+0xc4>
    90d0:	430a      	orrs	r2, r1
    90d2:	1e51      	subs	r1, r2, #1
    90d4:	418a      	sbcs	r2, r1
    90d6:	2100      	movs	r1, #0
    90d8:	e707      	b.n	8eea <__aeabi_dadd+0xa2>
    90da:	2b00      	cmp	r3, #0
    90dc:	d000      	beq.n	90e0 <__aeabi_dadd+0x298>
    90de:	e0f3      	b.n	92c8 <__aeabi_dadd+0x480>
    90e0:	1c70      	adds	r0, r6, #1
    90e2:	0543      	lsls	r3, r0, #21
    90e4:	0d5b      	lsrs	r3, r3, #21
    90e6:	2b01      	cmp	r3, #1
    90e8:	dc00      	bgt.n	90ec <__aeabi_dadd+0x2a4>
    90ea:	e0ad      	b.n	9248 <__aeabi_dadd+0x400>
    90ec:	4b36      	ldr	r3, [pc, #216]	; (91c8 <__aeabi_dadd+0x380>)
    90ee:	4298      	cmp	r0, r3
    90f0:	d100      	bne.n	90f4 <__aeabi_dadd+0x2ac>
    90f2:	e0d1      	b.n	9298 <__aeabi_dadd+0x450>
    90f4:	18ba      	adds	r2, r7, r2
    90f6:	42ba      	cmp	r2, r7
    90f8:	41bf      	sbcs	r7, r7
    90fa:	1864      	adds	r4, r4, r1
    90fc:	427f      	negs	r7, r7
    90fe:	19e4      	adds	r4, r4, r7
    9100:	07e7      	lsls	r7, r4, #31
    9102:	0852      	lsrs	r2, r2, #1
    9104:	4317      	orrs	r7, r2
    9106:	0864      	lsrs	r4, r4, #1
    9108:	0006      	movs	r6, r0
    910a:	e721      	b.n	8f50 <__aeabi_dadd+0x108>
    910c:	482e      	ldr	r0, [pc, #184]	; (91c8 <__aeabi_dadd+0x380>)
    910e:	4285      	cmp	r5, r0
    9110:	d100      	bne.n	9114 <__aeabi_dadd+0x2cc>
    9112:	e093      	b.n	923c <__aeabi_dadd+0x3f4>
    9114:	001d      	movs	r5, r3
    9116:	e6d0      	b.n	8eba <__aeabi_dadd+0x72>
    9118:	0029      	movs	r1, r5
    911a:	3e1f      	subs	r6, #31
    911c:	40f1      	lsrs	r1, r6
    911e:	2b20      	cmp	r3, #32
    9120:	d100      	bne.n	9124 <__aeabi_dadd+0x2dc>
    9122:	e08d      	b.n	9240 <__aeabi_dadd+0x3f8>
    9124:	2240      	movs	r2, #64	; 0x40
    9126:	1ad3      	subs	r3, r2, r3
    9128:	409d      	lsls	r5, r3
    912a:	432f      	orrs	r7, r5
    912c:	1e7d      	subs	r5, r7, #1
    912e:	41af      	sbcs	r7, r5
    9130:	2400      	movs	r4, #0
    9132:	430f      	orrs	r7, r1
    9134:	2600      	movs	r6, #0
    9136:	e744      	b.n	8fc2 <__aeabi_dadd+0x17a>
    9138:	002b      	movs	r3, r5
    913a:	0008      	movs	r0, r1
    913c:	3b20      	subs	r3, #32
    913e:	40d8      	lsrs	r0, r3
    9140:	0003      	movs	r3, r0
    9142:	2d20      	cmp	r5, #32
    9144:	d100      	bne.n	9148 <__aeabi_dadd+0x300>
    9146:	e07d      	b.n	9244 <__aeabi_dadd+0x3fc>
    9148:	2040      	movs	r0, #64	; 0x40
    914a:	1b45      	subs	r5, r0, r5
    914c:	40a9      	lsls	r1, r5
    914e:	430a      	orrs	r2, r1
    9150:	1e51      	subs	r1, r2, #1
    9152:	418a      	sbcs	r2, r1
    9154:	2100      	movs	r1, #0
    9156:	431a      	orrs	r2, r3
    9158:	e6c7      	b.n	8eea <__aeabi_dadd+0xa2>
    915a:	2e00      	cmp	r6, #0
    915c:	d050      	beq.n	9200 <__aeabi_dadd+0x3b8>
    915e:	4e1a      	ldr	r6, [pc, #104]	; (91c8 <__aeabi_dadd+0x380>)
    9160:	42b0      	cmp	r0, r6
    9162:	d057      	beq.n	9214 <__aeabi_dadd+0x3cc>
    9164:	2680      	movs	r6, #128	; 0x80
    9166:	426b      	negs	r3, r5
    9168:	4699      	mov	r9, r3
    916a:	0436      	lsls	r6, r6, #16
    916c:	4334      	orrs	r4, r6
    916e:	464b      	mov	r3, r9
    9170:	2b38      	cmp	r3, #56	; 0x38
    9172:	dd00      	ble.n	9176 <__aeabi_dadd+0x32e>
    9174:	e0d6      	b.n	9324 <__aeabi_dadd+0x4dc>
    9176:	2b1f      	cmp	r3, #31
    9178:	dd00      	ble.n	917c <__aeabi_dadd+0x334>
    917a:	e135      	b.n	93e8 <__aeabi_dadd+0x5a0>
    917c:	2620      	movs	r6, #32
    917e:	1af5      	subs	r5, r6, r3
    9180:	0026      	movs	r6, r4
    9182:	40ae      	lsls	r6, r5
    9184:	46b2      	mov	sl, r6
    9186:	003e      	movs	r6, r7
    9188:	40de      	lsrs	r6, r3
    918a:	46ac      	mov	ip, r5
    918c:	0035      	movs	r5, r6
    918e:	4656      	mov	r6, sl
    9190:	432e      	orrs	r6, r5
    9192:	4665      	mov	r5, ip
    9194:	40af      	lsls	r7, r5
    9196:	1e7d      	subs	r5, r7, #1
    9198:	41af      	sbcs	r7, r5
    919a:	40dc      	lsrs	r4, r3
    919c:	4337      	orrs	r7, r6
    919e:	1bd7      	subs	r7, r2, r7
    91a0:	42ba      	cmp	r2, r7
    91a2:	4192      	sbcs	r2, r2
    91a4:	1b0c      	subs	r4, r1, r4
    91a6:	4252      	negs	r2, r2
    91a8:	1aa4      	subs	r4, r4, r2
    91aa:	0006      	movs	r6, r0
    91ac:	46d8      	mov	r8, fp
    91ae:	e6a3      	b.n	8ef8 <__aeabi_dadd+0xb0>
    91b0:	4664      	mov	r4, ip
    91b2:	4667      	mov	r7, ip
    91b4:	432c      	orrs	r4, r5
    91b6:	d000      	beq.n	91ba <__aeabi_dadd+0x372>
    91b8:	e6a2      	b.n	8f00 <__aeabi_dadd+0xb8>
    91ba:	2500      	movs	r5, #0
    91bc:	2600      	movs	r6, #0
    91be:	2700      	movs	r7, #0
    91c0:	e706      	b.n	8fd0 <__aeabi_dadd+0x188>
    91c2:	001e      	movs	r6, r3
    91c4:	e6c4      	b.n	8f50 <__aeabi_dadd+0x108>
    91c6:	46c0      	nop			; (mov r8, r8)
    91c8:	000007ff 	.word	0x000007ff
    91cc:	ff7fffff 	.word	0xff7fffff
    91d0:	800fffff 	.word	0x800fffff
    91d4:	2b1f      	cmp	r3, #31
    91d6:	dc63      	bgt.n	92a0 <__aeabi_dadd+0x458>
    91d8:	2020      	movs	r0, #32
    91da:	1ac3      	subs	r3, r0, r3
    91dc:	0008      	movs	r0, r1
    91de:	4098      	lsls	r0, r3
    91e0:	469c      	mov	ip, r3
    91e2:	4683      	mov	fp, r0
    91e4:	4653      	mov	r3, sl
    91e6:	0010      	movs	r0, r2
    91e8:	40d8      	lsrs	r0, r3
    91ea:	0003      	movs	r3, r0
    91ec:	4658      	mov	r0, fp
    91ee:	4318      	orrs	r0, r3
    91f0:	4663      	mov	r3, ip
    91f2:	409a      	lsls	r2, r3
    91f4:	1e53      	subs	r3, r2, #1
    91f6:	419a      	sbcs	r2, r3
    91f8:	4653      	mov	r3, sl
    91fa:	4302      	orrs	r2, r0
    91fc:	40d9      	lsrs	r1, r3
    91fe:	e703      	b.n	9008 <__aeabi_dadd+0x1c0>
    9200:	0026      	movs	r6, r4
    9202:	433e      	orrs	r6, r7
    9204:	d006      	beq.n	9214 <__aeabi_dadd+0x3cc>
    9206:	43eb      	mvns	r3, r5
    9208:	4699      	mov	r9, r3
    920a:	2b00      	cmp	r3, #0
    920c:	d0c7      	beq.n	919e <__aeabi_dadd+0x356>
    920e:	4e94      	ldr	r6, [pc, #592]	; (9460 <__aeabi_dadd+0x618>)
    9210:	42b0      	cmp	r0, r6
    9212:	d1ac      	bne.n	916e <__aeabi_dadd+0x326>
    9214:	000c      	movs	r4, r1
    9216:	0017      	movs	r7, r2
    9218:	0006      	movs	r6, r0
    921a:	46d8      	mov	r8, fp
    921c:	e698      	b.n	8f50 <__aeabi_dadd+0x108>
    921e:	4b90      	ldr	r3, [pc, #576]	; (9460 <__aeabi_dadd+0x618>)
    9220:	459a      	cmp	sl, r3
    9222:	d00b      	beq.n	923c <__aeabi_dadd+0x3f4>
    9224:	4682      	mov	sl, r0
    9226:	e6e7      	b.n	8ff8 <__aeabi_dadd+0x1b0>
    9228:	2800      	cmp	r0, #0
    922a:	d000      	beq.n	922e <__aeabi_dadd+0x3e6>
    922c:	e09e      	b.n	936c <__aeabi_dadd+0x524>
    922e:	0018      	movs	r0, r3
    9230:	4310      	orrs	r0, r2
    9232:	d100      	bne.n	9236 <__aeabi_dadd+0x3ee>
    9234:	e0e9      	b.n	940a <__aeabi_dadd+0x5c2>
    9236:	001c      	movs	r4, r3
    9238:	0017      	movs	r7, r2
    923a:	46d8      	mov	r8, fp
    923c:	4e88      	ldr	r6, [pc, #544]	; (9460 <__aeabi_dadd+0x618>)
    923e:	e687      	b.n	8f50 <__aeabi_dadd+0x108>
    9240:	2500      	movs	r5, #0
    9242:	e772      	b.n	912a <__aeabi_dadd+0x2e2>
    9244:	2100      	movs	r1, #0
    9246:	e782      	b.n	914e <__aeabi_dadd+0x306>
    9248:	0023      	movs	r3, r4
    924a:	433b      	orrs	r3, r7
    924c:	2e00      	cmp	r6, #0
    924e:	d000      	beq.n	9252 <__aeabi_dadd+0x40a>
    9250:	e0ab      	b.n	93aa <__aeabi_dadd+0x562>
    9252:	2b00      	cmp	r3, #0
    9254:	d100      	bne.n	9258 <__aeabi_dadd+0x410>
    9256:	e0e7      	b.n	9428 <__aeabi_dadd+0x5e0>
    9258:	000b      	movs	r3, r1
    925a:	4313      	orrs	r3, r2
    925c:	d100      	bne.n	9260 <__aeabi_dadd+0x418>
    925e:	e677      	b.n	8f50 <__aeabi_dadd+0x108>
    9260:	18ba      	adds	r2, r7, r2
    9262:	42ba      	cmp	r2, r7
    9264:	41bf      	sbcs	r7, r7
    9266:	1864      	adds	r4, r4, r1
    9268:	427f      	negs	r7, r7
    926a:	19e4      	adds	r4, r4, r7
    926c:	0223      	lsls	r3, r4, #8
    926e:	d400      	bmi.n	9272 <__aeabi_dadd+0x42a>
    9270:	e0f2      	b.n	9458 <__aeabi_dadd+0x610>
    9272:	4b7c      	ldr	r3, [pc, #496]	; (9464 <__aeabi_dadd+0x61c>)
    9274:	0017      	movs	r7, r2
    9276:	401c      	ands	r4, r3
    9278:	0006      	movs	r6, r0
    927a:	e669      	b.n	8f50 <__aeabi_dadd+0x108>
    927c:	0020      	movs	r0, r4
    927e:	4338      	orrs	r0, r7
    9280:	2e00      	cmp	r6, #0
    9282:	d1d1      	bne.n	9228 <__aeabi_dadd+0x3e0>
    9284:	2800      	cmp	r0, #0
    9286:	d15b      	bne.n	9340 <__aeabi_dadd+0x4f8>
    9288:	001c      	movs	r4, r3
    928a:	4314      	orrs	r4, r2
    928c:	d100      	bne.n	9290 <__aeabi_dadd+0x448>
    928e:	e0a8      	b.n	93e2 <__aeabi_dadd+0x59a>
    9290:	001c      	movs	r4, r3
    9292:	0017      	movs	r7, r2
    9294:	46d8      	mov	r8, fp
    9296:	e65b      	b.n	8f50 <__aeabi_dadd+0x108>
    9298:	0006      	movs	r6, r0
    929a:	2400      	movs	r4, #0
    929c:	2700      	movs	r7, #0
    929e:	e697      	b.n	8fd0 <__aeabi_dadd+0x188>
    92a0:	4650      	mov	r0, sl
    92a2:	000b      	movs	r3, r1
    92a4:	3820      	subs	r0, #32
    92a6:	40c3      	lsrs	r3, r0
    92a8:	4699      	mov	r9, r3
    92aa:	4653      	mov	r3, sl
    92ac:	2b20      	cmp	r3, #32
    92ae:	d100      	bne.n	92b2 <__aeabi_dadd+0x46a>
    92b0:	e095      	b.n	93de <__aeabi_dadd+0x596>
    92b2:	2340      	movs	r3, #64	; 0x40
    92b4:	4650      	mov	r0, sl
    92b6:	1a1b      	subs	r3, r3, r0
    92b8:	4099      	lsls	r1, r3
    92ba:	430a      	orrs	r2, r1
    92bc:	1e51      	subs	r1, r2, #1
    92be:	418a      	sbcs	r2, r1
    92c0:	464b      	mov	r3, r9
    92c2:	2100      	movs	r1, #0
    92c4:	431a      	orrs	r2, r3
    92c6:	e69f      	b.n	9008 <__aeabi_dadd+0x1c0>
    92c8:	2e00      	cmp	r6, #0
    92ca:	d130      	bne.n	932e <__aeabi_dadd+0x4e6>
    92cc:	0026      	movs	r6, r4
    92ce:	433e      	orrs	r6, r7
    92d0:	d067      	beq.n	93a2 <__aeabi_dadd+0x55a>
    92d2:	43db      	mvns	r3, r3
    92d4:	469a      	mov	sl, r3
    92d6:	2b00      	cmp	r3, #0
    92d8:	d01c      	beq.n	9314 <__aeabi_dadd+0x4cc>
    92da:	4e61      	ldr	r6, [pc, #388]	; (9460 <__aeabi_dadd+0x618>)
    92dc:	42b0      	cmp	r0, r6
    92de:	d060      	beq.n	93a2 <__aeabi_dadd+0x55a>
    92e0:	4653      	mov	r3, sl
    92e2:	2b38      	cmp	r3, #56	; 0x38
    92e4:	dd00      	ble.n	92e8 <__aeabi_dadd+0x4a0>
    92e6:	e096      	b.n	9416 <__aeabi_dadd+0x5ce>
    92e8:	2b1f      	cmp	r3, #31
    92ea:	dd00      	ble.n	92ee <__aeabi_dadd+0x4a6>
    92ec:	e09f      	b.n	942e <__aeabi_dadd+0x5e6>
    92ee:	2620      	movs	r6, #32
    92f0:	1af3      	subs	r3, r6, r3
    92f2:	0026      	movs	r6, r4
    92f4:	409e      	lsls	r6, r3
    92f6:	469c      	mov	ip, r3
    92f8:	46b3      	mov	fp, r6
    92fa:	4653      	mov	r3, sl
    92fc:	003e      	movs	r6, r7
    92fe:	40de      	lsrs	r6, r3
    9300:	0033      	movs	r3, r6
    9302:	465e      	mov	r6, fp
    9304:	431e      	orrs	r6, r3
    9306:	4663      	mov	r3, ip
    9308:	409f      	lsls	r7, r3
    930a:	1e7b      	subs	r3, r7, #1
    930c:	419f      	sbcs	r7, r3
    930e:	4653      	mov	r3, sl
    9310:	40dc      	lsrs	r4, r3
    9312:	4337      	orrs	r7, r6
    9314:	18bf      	adds	r7, r7, r2
    9316:	4297      	cmp	r7, r2
    9318:	4192      	sbcs	r2, r2
    931a:	1864      	adds	r4, r4, r1
    931c:	4252      	negs	r2, r2
    931e:	18a4      	adds	r4, r4, r2
    9320:	0006      	movs	r6, r0
    9322:	e678      	b.n	9016 <__aeabi_dadd+0x1ce>
    9324:	4327      	orrs	r7, r4
    9326:	1e7c      	subs	r4, r7, #1
    9328:	41a7      	sbcs	r7, r4
    932a:	2400      	movs	r4, #0
    932c:	e737      	b.n	919e <__aeabi_dadd+0x356>
    932e:	4e4c      	ldr	r6, [pc, #304]	; (9460 <__aeabi_dadd+0x618>)
    9330:	42b0      	cmp	r0, r6
    9332:	d036      	beq.n	93a2 <__aeabi_dadd+0x55a>
    9334:	2680      	movs	r6, #128	; 0x80
    9336:	425b      	negs	r3, r3
    9338:	0436      	lsls	r6, r6, #16
    933a:	469a      	mov	sl, r3
    933c:	4334      	orrs	r4, r6
    933e:	e7cf      	b.n	92e0 <__aeabi_dadd+0x498>
    9340:	0018      	movs	r0, r3
    9342:	4310      	orrs	r0, r2
    9344:	d100      	bne.n	9348 <__aeabi_dadd+0x500>
    9346:	e603      	b.n	8f50 <__aeabi_dadd+0x108>
    9348:	1ab8      	subs	r0, r7, r2
    934a:	4684      	mov	ip, r0
    934c:	4567      	cmp	r7, ip
    934e:	41ad      	sbcs	r5, r5
    9350:	1ae0      	subs	r0, r4, r3
    9352:	426d      	negs	r5, r5
    9354:	1b40      	subs	r0, r0, r5
    9356:	0205      	lsls	r5, r0, #8
    9358:	d400      	bmi.n	935c <__aeabi_dadd+0x514>
    935a:	e62c      	b.n	8fb6 <__aeabi_dadd+0x16e>
    935c:	1bd7      	subs	r7, r2, r7
    935e:	42ba      	cmp	r2, r7
    9360:	4192      	sbcs	r2, r2
    9362:	1b1c      	subs	r4, r3, r4
    9364:	4252      	negs	r2, r2
    9366:	1aa4      	subs	r4, r4, r2
    9368:	46d8      	mov	r8, fp
    936a:	e5f1      	b.n	8f50 <__aeabi_dadd+0x108>
    936c:	0018      	movs	r0, r3
    936e:	4310      	orrs	r0, r2
    9370:	d100      	bne.n	9374 <__aeabi_dadd+0x52c>
    9372:	e763      	b.n	923c <__aeabi_dadd+0x3f4>
    9374:	08f8      	lsrs	r0, r7, #3
    9376:	0767      	lsls	r7, r4, #29
    9378:	4307      	orrs	r7, r0
    937a:	2080      	movs	r0, #128	; 0x80
    937c:	08e4      	lsrs	r4, r4, #3
    937e:	0300      	lsls	r0, r0, #12
    9380:	4204      	tst	r4, r0
    9382:	d008      	beq.n	9396 <__aeabi_dadd+0x54e>
    9384:	08dd      	lsrs	r5, r3, #3
    9386:	4205      	tst	r5, r0
    9388:	d105      	bne.n	9396 <__aeabi_dadd+0x54e>
    938a:	08d2      	lsrs	r2, r2, #3
    938c:	0759      	lsls	r1, r3, #29
    938e:	4311      	orrs	r1, r2
    9390:	000f      	movs	r7, r1
    9392:	002c      	movs	r4, r5
    9394:	46d8      	mov	r8, fp
    9396:	0f7b      	lsrs	r3, r7, #29
    9398:	00e4      	lsls	r4, r4, #3
    939a:	431c      	orrs	r4, r3
    939c:	00ff      	lsls	r7, r7, #3
    939e:	4e30      	ldr	r6, [pc, #192]	; (9460 <__aeabi_dadd+0x618>)
    93a0:	e5d6      	b.n	8f50 <__aeabi_dadd+0x108>
    93a2:	000c      	movs	r4, r1
    93a4:	0017      	movs	r7, r2
    93a6:	0006      	movs	r6, r0
    93a8:	e5d2      	b.n	8f50 <__aeabi_dadd+0x108>
    93aa:	2b00      	cmp	r3, #0
    93ac:	d038      	beq.n	9420 <__aeabi_dadd+0x5d8>
    93ae:	000b      	movs	r3, r1
    93b0:	4313      	orrs	r3, r2
    93b2:	d100      	bne.n	93b6 <__aeabi_dadd+0x56e>
    93b4:	e742      	b.n	923c <__aeabi_dadd+0x3f4>
    93b6:	08f8      	lsrs	r0, r7, #3
    93b8:	0767      	lsls	r7, r4, #29
    93ba:	4307      	orrs	r7, r0
    93bc:	2080      	movs	r0, #128	; 0x80
    93be:	08e4      	lsrs	r4, r4, #3
    93c0:	0300      	lsls	r0, r0, #12
    93c2:	4204      	tst	r4, r0
    93c4:	d0e7      	beq.n	9396 <__aeabi_dadd+0x54e>
    93c6:	08cb      	lsrs	r3, r1, #3
    93c8:	4203      	tst	r3, r0
    93ca:	d1e4      	bne.n	9396 <__aeabi_dadd+0x54e>
    93cc:	08d2      	lsrs	r2, r2, #3
    93ce:	0749      	lsls	r1, r1, #29
    93d0:	4311      	orrs	r1, r2
    93d2:	000f      	movs	r7, r1
    93d4:	001c      	movs	r4, r3
    93d6:	e7de      	b.n	9396 <__aeabi_dadd+0x54e>
    93d8:	2700      	movs	r7, #0
    93da:	2400      	movs	r4, #0
    93dc:	e5d5      	b.n	8f8a <__aeabi_dadd+0x142>
    93de:	2100      	movs	r1, #0
    93e0:	e76b      	b.n	92ba <__aeabi_dadd+0x472>
    93e2:	2500      	movs	r5, #0
    93e4:	2700      	movs	r7, #0
    93e6:	e5f3      	b.n	8fd0 <__aeabi_dadd+0x188>
    93e8:	464e      	mov	r6, r9
    93ea:	0025      	movs	r5, r4
    93ec:	3e20      	subs	r6, #32
    93ee:	40f5      	lsrs	r5, r6
    93f0:	464b      	mov	r3, r9
    93f2:	002e      	movs	r6, r5
    93f4:	2b20      	cmp	r3, #32
    93f6:	d02d      	beq.n	9454 <__aeabi_dadd+0x60c>
    93f8:	2540      	movs	r5, #64	; 0x40
    93fa:	1aed      	subs	r5, r5, r3
    93fc:	40ac      	lsls	r4, r5
    93fe:	4327      	orrs	r7, r4
    9400:	1e7c      	subs	r4, r7, #1
    9402:	41a7      	sbcs	r7, r4
    9404:	2400      	movs	r4, #0
    9406:	4337      	orrs	r7, r6
    9408:	e6c9      	b.n	919e <__aeabi_dadd+0x356>
    940a:	2480      	movs	r4, #128	; 0x80
    940c:	2500      	movs	r5, #0
    940e:	0324      	lsls	r4, r4, #12
    9410:	4e13      	ldr	r6, [pc, #76]	; (9460 <__aeabi_dadd+0x618>)
    9412:	2700      	movs	r7, #0
    9414:	e5dc      	b.n	8fd0 <__aeabi_dadd+0x188>
    9416:	4327      	orrs	r7, r4
    9418:	1e7c      	subs	r4, r7, #1
    941a:	41a7      	sbcs	r7, r4
    941c:	2400      	movs	r4, #0
    941e:	e779      	b.n	9314 <__aeabi_dadd+0x4cc>
    9420:	000c      	movs	r4, r1
    9422:	0017      	movs	r7, r2
    9424:	4e0e      	ldr	r6, [pc, #56]	; (9460 <__aeabi_dadd+0x618>)
    9426:	e593      	b.n	8f50 <__aeabi_dadd+0x108>
    9428:	000c      	movs	r4, r1
    942a:	0017      	movs	r7, r2
    942c:	e590      	b.n	8f50 <__aeabi_dadd+0x108>
    942e:	4656      	mov	r6, sl
    9430:	0023      	movs	r3, r4
    9432:	3e20      	subs	r6, #32
    9434:	40f3      	lsrs	r3, r6
    9436:	4699      	mov	r9, r3
    9438:	4653      	mov	r3, sl
    943a:	2b20      	cmp	r3, #32
    943c:	d00e      	beq.n	945c <__aeabi_dadd+0x614>
    943e:	2340      	movs	r3, #64	; 0x40
    9440:	4656      	mov	r6, sl
    9442:	1b9b      	subs	r3, r3, r6
    9444:	409c      	lsls	r4, r3
    9446:	4327      	orrs	r7, r4
    9448:	1e7c      	subs	r4, r7, #1
    944a:	41a7      	sbcs	r7, r4
    944c:	464b      	mov	r3, r9
    944e:	2400      	movs	r4, #0
    9450:	431f      	orrs	r7, r3
    9452:	e75f      	b.n	9314 <__aeabi_dadd+0x4cc>
    9454:	2400      	movs	r4, #0
    9456:	e7d2      	b.n	93fe <__aeabi_dadd+0x5b6>
    9458:	0017      	movs	r7, r2
    945a:	e5b2      	b.n	8fc2 <__aeabi_dadd+0x17a>
    945c:	2400      	movs	r4, #0
    945e:	e7f2      	b.n	9446 <__aeabi_dadd+0x5fe>
    9460:	000007ff 	.word	0x000007ff
    9464:	ff7fffff 	.word	0xff7fffff

00009468 <__aeabi_ddiv>:
    9468:	b5f0      	push	{r4, r5, r6, r7, lr}
    946a:	4657      	mov	r7, sl
    946c:	4645      	mov	r5, r8
    946e:	46de      	mov	lr, fp
    9470:	464e      	mov	r6, r9
    9472:	b5e0      	push	{r5, r6, r7, lr}
    9474:	004c      	lsls	r4, r1, #1
    9476:	030e      	lsls	r6, r1, #12
    9478:	b087      	sub	sp, #28
    947a:	4683      	mov	fp, r0
    947c:	4692      	mov	sl, r2
    947e:	001d      	movs	r5, r3
    9480:	4680      	mov	r8, r0
    9482:	0b36      	lsrs	r6, r6, #12
    9484:	0d64      	lsrs	r4, r4, #21
    9486:	0fcf      	lsrs	r7, r1, #31
    9488:	2c00      	cmp	r4, #0
    948a:	d04f      	beq.n	952c <__aeabi_ddiv+0xc4>
    948c:	4b6f      	ldr	r3, [pc, #444]	; (964c <__aeabi_ddiv+0x1e4>)
    948e:	429c      	cmp	r4, r3
    9490:	d035      	beq.n	94fe <__aeabi_ddiv+0x96>
    9492:	2380      	movs	r3, #128	; 0x80
    9494:	0f42      	lsrs	r2, r0, #29
    9496:	041b      	lsls	r3, r3, #16
    9498:	00f6      	lsls	r6, r6, #3
    949a:	4313      	orrs	r3, r2
    949c:	4333      	orrs	r3, r6
    949e:	4699      	mov	r9, r3
    94a0:	00c3      	lsls	r3, r0, #3
    94a2:	4698      	mov	r8, r3
    94a4:	4b6a      	ldr	r3, [pc, #424]	; (9650 <__aeabi_ddiv+0x1e8>)
    94a6:	2600      	movs	r6, #0
    94a8:	469c      	mov	ip, r3
    94aa:	2300      	movs	r3, #0
    94ac:	4464      	add	r4, ip
    94ae:	9303      	str	r3, [sp, #12]
    94b0:	032b      	lsls	r3, r5, #12
    94b2:	0b1b      	lsrs	r3, r3, #12
    94b4:	469b      	mov	fp, r3
    94b6:	006b      	lsls	r3, r5, #1
    94b8:	0fed      	lsrs	r5, r5, #31
    94ba:	4650      	mov	r0, sl
    94bc:	0d5b      	lsrs	r3, r3, #21
    94be:	9501      	str	r5, [sp, #4]
    94c0:	d05e      	beq.n	9580 <__aeabi_ddiv+0x118>
    94c2:	4a62      	ldr	r2, [pc, #392]	; (964c <__aeabi_ddiv+0x1e4>)
    94c4:	4293      	cmp	r3, r2
    94c6:	d053      	beq.n	9570 <__aeabi_ddiv+0x108>
    94c8:	465a      	mov	r2, fp
    94ca:	00d1      	lsls	r1, r2, #3
    94cc:	2280      	movs	r2, #128	; 0x80
    94ce:	0f40      	lsrs	r0, r0, #29
    94d0:	0412      	lsls	r2, r2, #16
    94d2:	4302      	orrs	r2, r0
    94d4:	430a      	orrs	r2, r1
    94d6:	4693      	mov	fp, r2
    94d8:	4652      	mov	r2, sl
    94da:	00d1      	lsls	r1, r2, #3
    94dc:	4a5c      	ldr	r2, [pc, #368]	; (9650 <__aeabi_ddiv+0x1e8>)
    94de:	4694      	mov	ip, r2
    94e0:	2200      	movs	r2, #0
    94e2:	4463      	add	r3, ip
    94e4:	0038      	movs	r0, r7
    94e6:	4068      	eors	r0, r5
    94e8:	4684      	mov	ip, r0
    94ea:	9002      	str	r0, [sp, #8]
    94ec:	1ae4      	subs	r4, r4, r3
    94ee:	4316      	orrs	r6, r2
    94f0:	2e0f      	cmp	r6, #15
    94f2:	d900      	bls.n	94f6 <__aeabi_ddiv+0x8e>
    94f4:	e0b4      	b.n	9660 <__aeabi_ddiv+0x1f8>
    94f6:	4b57      	ldr	r3, [pc, #348]	; (9654 <__aeabi_ddiv+0x1ec>)
    94f8:	00b6      	lsls	r6, r6, #2
    94fa:	599b      	ldr	r3, [r3, r6]
    94fc:	469f      	mov	pc, r3
    94fe:	0003      	movs	r3, r0
    9500:	4333      	orrs	r3, r6
    9502:	4699      	mov	r9, r3
    9504:	d16c      	bne.n	95e0 <__aeabi_ddiv+0x178>
    9506:	2300      	movs	r3, #0
    9508:	4698      	mov	r8, r3
    950a:	3302      	adds	r3, #2
    950c:	2608      	movs	r6, #8
    950e:	9303      	str	r3, [sp, #12]
    9510:	e7ce      	b.n	94b0 <__aeabi_ddiv+0x48>
    9512:	46cb      	mov	fp, r9
    9514:	4641      	mov	r1, r8
    9516:	9a03      	ldr	r2, [sp, #12]
    9518:	9701      	str	r7, [sp, #4]
    951a:	2a02      	cmp	r2, #2
    951c:	d165      	bne.n	95ea <__aeabi_ddiv+0x182>
    951e:	9b01      	ldr	r3, [sp, #4]
    9520:	4c4a      	ldr	r4, [pc, #296]	; (964c <__aeabi_ddiv+0x1e4>)
    9522:	469c      	mov	ip, r3
    9524:	2300      	movs	r3, #0
    9526:	2200      	movs	r2, #0
    9528:	4698      	mov	r8, r3
    952a:	e06b      	b.n	9604 <__aeabi_ddiv+0x19c>
    952c:	0003      	movs	r3, r0
    952e:	4333      	orrs	r3, r6
    9530:	4699      	mov	r9, r3
    9532:	d04e      	beq.n	95d2 <__aeabi_ddiv+0x16a>
    9534:	2e00      	cmp	r6, #0
    9536:	d100      	bne.n	953a <__aeabi_ddiv+0xd2>
    9538:	e1bc      	b.n	98b4 <__aeabi_ddiv+0x44c>
    953a:	0030      	movs	r0, r6
    953c:	f001 fb08 	bl	ab50 <__clzsi2>
    9540:	0003      	movs	r3, r0
    9542:	3b0b      	subs	r3, #11
    9544:	2b1c      	cmp	r3, #28
    9546:	dd00      	ble.n	954a <__aeabi_ddiv+0xe2>
    9548:	e1ac      	b.n	98a4 <__aeabi_ddiv+0x43c>
    954a:	221d      	movs	r2, #29
    954c:	1ad3      	subs	r3, r2, r3
    954e:	465a      	mov	r2, fp
    9550:	0001      	movs	r1, r0
    9552:	40da      	lsrs	r2, r3
    9554:	3908      	subs	r1, #8
    9556:	408e      	lsls	r6, r1
    9558:	0013      	movs	r3, r2
    955a:	4333      	orrs	r3, r6
    955c:	4699      	mov	r9, r3
    955e:	465b      	mov	r3, fp
    9560:	408b      	lsls	r3, r1
    9562:	4698      	mov	r8, r3
    9564:	2300      	movs	r3, #0
    9566:	4c3c      	ldr	r4, [pc, #240]	; (9658 <__aeabi_ddiv+0x1f0>)
    9568:	2600      	movs	r6, #0
    956a:	1a24      	subs	r4, r4, r0
    956c:	9303      	str	r3, [sp, #12]
    956e:	e79f      	b.n	94b0 <__aeabi_ddiv+0x48>
    9570:	4651      	mov	r1, sl
    9572:	465a      	mov	r2, fp
    9574:	4311      	orrs	r1, r2
    9576:	d129      	bne.n	95cc <__aeabi_ddiv+0x164>
    9578:	2200      	movs	r2, #0
    957a:	4693      	mov	fp, r2
    957c:	3202      	adds	r2, #2
    957e:	e7b1      	b.n	94e4 <__aeabi_ddiv+0x7c>
    9580:	4659      	mov	r1, fp
    9582:	4301      	orrs	r1, r0
    9584:	d01e      	beq.n	95c4 <__aeabi_ddiv+0x15c>
    9586:	465b      	mov	r3, fp
    9588:	2b00      	cmp	r3, #0
    958a:	d100      	bne.n	958e <__aeabi_ddiv+0x126>
    958c:	e19e      	b.n	98cc <__aeabi_ddiv+0x464>
    958e:	4658      	mov	r0, fp
    9590:	f001 fade 	bl	ab50 <__clzsi2>
    9594:	0003      	movs	r3, r0
    9596:	3b0b      	subs	r3, #11
    9598:	2b1c      	cmp	r3, #28
    959a:	dd00      	ble.n	959e <__aeabi_ddiv+0x136>
    959c:	e18f      	b.n	98be <__aeabi_ddiv+0x456>
    959e:	0002      	movs	r2, r0
    95a0:	4659      	mov	r1, fp
    95a2:	3a08      	subs	r2, #8
    95a4:	4091      	lsls	r1, r2
    95a6:	468b      	mov	fp, r1
    95a8:	211d      	movs	r1, #29
    95aa:	1acb      	subs	r3, r1, r3
    95ac:	4651      	mov	r1, sl
    95ae:	40d9      	lsrs	r1, r3
    95b0:	000b      	movs	r3, r1
    95b2:	4659      	mov	r1, fp
    95b4:	430b      	orrs	r3, r1
    95b6:	4651      	mov	r1, sl
    95b8:	469b      	mov	fp, r3
    95ba:	4091      	lsls	r1, r2
    95bc:	4b26      	ldr	r3, [pc, #152]	; (9658 <__aeabi_ddiv+0x1f0>)
    95be:	2200      	movs	r2, #0
    95c0:	1a1b      	subs	r3, r3, r0
    95c2:	e78f      	b.n	94e4 <__aeabi_ddiv+0x7c>
    95c4:	2300      	movs	r3, #0
    95c6:	2201      	movs	r2, #1
    95c8:	469b      	mov	fp, r3
    95ca:	e78b      	b.n	94e4 <__aeabi_ddiv+0x7c>
    95cc:	4651      	mov	r1, sl
    95ce:	2203      	movs	r2, #3
    95d0:	e788      	b.n	94e4 <__aeabi_ddiv+0x7c>
    95d2:	2300      	movs	r3, #0
    95d4:	4698      	mov	r8, r3
    95d6:	3301      	adds	r3, #1
    95d8:	2604      	movs	r6, #4
    95da:	2400      	movs	r4, #0
    95dc:	9303      	str	r3, [sp, #12]
    95de:	e767      	b.n	94b0 <__aeabi_ddiv+0x48>
    95e0:	2303      	movs	r3, #3
    95e2:	46b1      	mov	r9, r6
    95e4:	9303      	str	r3, [sp, #12]
    95e6:	260c      	movs	r6, #12
    95e8:	e762      	b.n	94b0 <__aeabi_ddiv+0x48>
    95ea:	2a03      	cmp	r2, #3
    95ec:	d100      	bne.n	95f0 <__aeabi_ddiv+0x188>
    95ee:	e25c      	b.n	9aaa <__aeabi_ddiv+0x642>
    95f0:	9b01      	ldr	r3, [sp, #4]
    95f2:	2a01      	cmp	r2, #1
    95f4:	d000      	beq.n	95f8 <__aeabi_ddiv+0x190>
    95f6:	e1e4      	b.n	99c2 <__aeabi_ddiv+0x55a>
    95f8:	4013      	ands	r3, r2
    95fa:	469c      	mov	ip, r3
    95fc:	2300      	movs	r3, #0
    95fe:	2400      	movs	r4, #0
    9600:	2200      	movs	r2, #0
    9602:	4698      	mov	r8, r3
    9604:	2100      	movs	r1, #0
    9606:	0312      	lsls	r2, r2, #12
    9608:	0b13      	lsrs	r3, r2, #12
    960a:	0d0a      	lsrs	r2, r1, #20
    960c:	0512      	lsls	r2, r2, #20
    960e:	431a      	orrs	r2, r3
    9610:	0523      	lsls	r3, r4, #20
    9612:	4c12      	ldr	r4, [pc, #72]	; (965c <__aeabi_ddiv+0x1f4>)
    9614:	4640      	mov	r0, r8
    9616:	4022      	ands	r2, r4
    9618:	4313      	orrs	r3, r2
    961a:	4662      	mov	r2, ip
    961c:	005b      	lsls	r3, r3, #1
    961e:	07d2      	lsls	r2, r2, #31
    9620:	085b      	lsrs	r3, r3, #1
    9622:	4313      	orrs	r3, r2
    9624:	0019      	movs	r1, r3
    9626:	b007      	add	sp, #28
    9628:	bc3c      	pop	{r2, r3, r4, r5}
    962a:	4690      	mov	r8, r2
    962c:	4699      	mov	r9, r3
    962e:	46a2      	mov	sl, r4
    9630:	46ab      	mov	fp, r5
    9632:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9634:	2300      	movs	r3, #0
    9636:	2280      	movs	r2, #128	; 0x80
    9638:	469c      	mov	ip, r3
    963a:	0312      	lsls	r2, r2, #12
    963c:	4698      	mov	r8, r3
    963e:	4c03      	ldr	r4, [pc, #12]	; (964c <__aeabi_ddiv+0x1e4>)
    9640:	e7e0      	b.n	9604 <__aeabi_ddiv+0x19c>
    9642:	2300      	movs	r3, #0
    9644:	4c01      	ldr	r4, [pc, #4]	; (964c <__aeabi_ddiv+0x1e4>)
    9646:	2200      	movs	r2, #0
    9648:	4698      	mov	r8, r3
    964a:	e7db      	b.n	9604 <__aeabi_ddiv+0x19c>
    964c:	000007ff 	.word	0x000007ff
    9650:	fffffc01 	.word	0xfffffc01
    9654:	0000fff0 	.word	0x0000fff0
    9658:	fffffc0d 	.word	0xfffffc0d
    965c:	800fffff 	.word	0x800fffff
    9660:	45d9      	cmp	r9, fp
    9662:	d900      	bls.n	9666 <__aeabi_ddiv+0x1fe>
    9664:	e139      	b.n	98da <__aeabi_ddiv+0x472>
    9666:	d100      	bne.n	966a <__aeabi_ddiv+0x202>
    9668:	e134      	b.n	98d4 <__aeabi_ddiv+0x46c>
    966a:	2300      	movs	r3, #0
    966c:	4646      	mov	r6, r8
    966e:	464d      	mov	r5, r9
    9670:	469a      	mov	sl, r3
    9672:	3c01      	subs	r4, #1
    9674:	465b      	mov	r3, fp
    9676:	0e0a      	lsrs	r2, r1, #24
    9678:	021b      	lsls	r3, r3, #8
    967a:	431a      	orrs	r2, r3
    967c:	020b      	lsls	r3, r1, #8
    967e:	0c17      	lsrs	r7, r2, #16
    9680:	9303      	str	r3, [sp, #12]
    9682:	0413      	lsls	r3, r2, #16
    9684:	0c1b      	lsrs	r3, r3, #16
    9686:	0039      	movs	r1, r7
    9688:	0028      	movs	r0, r5
    968a:	4690      	mov	r8, r2
    968c:	9301      	str	r3, [sp, #4]
    968e:	f7fe faab 	bl	7be8 <__udivsi3>
    9692:	0002      	movs	r2, r0
    9694:	9b01      	ldr	r3, [sp, #4]
    9696:	4683      	mov	fp, r0
    9698:	435a      	muls	r2, r3
    969a:	0028      	movs	r0, r5
    969c:	0039      	movs	r1, r7
    969e:	4691      	mov	r9, r2
    96a0:	f7fe fb28 	bl	7cf4 <__aeabi_uidivmod>
    96a4:	0c35      	lsrs	r5, r6, #16
    96a6:	0409      	lsls	r1, r1, #16
    96a8:	430d      	orrs	r5, r1
    96aa:	45a9      	cmp	r9, r5
    96ac:	d90d      	bls.n	96ca <__aeabi_ddiv+0x262>
    96ae:	465b      	mov	r3, fp
    96b0:	4445      	add	r5, r8
    96b2:	3b01      	subs	r3, #1
    96b4:	45a8      	cmp	r8, r5
    96b6:	d900      	bls.n	96ba <__aeabi_ddiv+0x252>
    96b8:	e13a      	b.n	9930 <__aeabi_ddiv+0x4c8>
    96ba:	45a9      	cmp	r9, r5
    96bc:	d800      	bhi.n	96c0 <__aeabi_ddiv+0x258>
    96be:	e137      	b.n	9930 <__aeabi_ddiv+0x4c8>
    96c0:	2302      	movs	r3, #2
    96c2:	425b      	negs	r3, r3
    96c4:	469c      	mov	ip, r3
    96c6:	4445      	add	r5, r8
    96c8:	44e3      	add	fp, ip
    96ca:	464b      	mov	r3, r9
    96cc:	1aeb      	subs	r3, r5, r3
    96ce:	0039      	movs	r1, r7
    96d0:	0018      	movs	r0, r3
    96d2:	9304      	str	r3, [sp, #16]
    96d4:	f7fe fa88 	bl	7be8 <__udivsi3>
    96d8:	9b01      	ldr	r3, [sp, #4]
    96da:	0005      	movs	r5, r0
    96dc:	4343      	muls	r3, r0
    96de:	0039      	movs	r1, r7
    96e0:	9804      	ldr	r0, [sp, #16]
    96e2:	4699      	mov	r9, r3
    96e4:	f7fe fb06 	bl	7cf4 <__aeabi_uidivmod>
    96e8:	0433      	lsls	r3, r6, #16
    96ea:	0409      	lsls	r1, r1, #16
    96ec:	0c1b      	lsrs	r3, r3, #16
    96ee:	430b      	orrs	r3, r1
    96f0:	4599      	cmp	r9, r3
    96f2:	d909      	bls.n	9708 <__aeabi_ddiv+0x2a0>
    96f4:	4443      	add	r3, r8
    96f6:	1e6a      	subs	r2, r5, #1
    96f8:	4598      	cmp	r8, r3
    96fa:	d900      	bls.n	96fe <__aeabi_ddiv+0x296>
    96fc:	e11a      	b.n	9934 <__aeabi_ddiv+0x4cc>
    96fe:	4599      	cmp	r9, r3
    9700:	d800      	bhi.n	9704 <__aeabi_ddiv+0x29c>
    9702:	e117      	b.n	9934 <__aeabi_ddiv+0x4cc>
    9704:	3d02      	subs	r5, #2
    9706:	4443      	add	r3, r8
    9708:	464a      	mov	r2, r9
    970a:	1a9b      	subs	r3, r3, r2
    970c:	465a      	mov	r2, fp
    970e:	0412      	lsls	r2, r2, #16
    9710:	432a      	orrs	r2, r5
    9712:	9903      	ldr	r1, [sp, #12]
    9714:	4693      	mov	fp, r2
    9716:	0c10      	lsrs	r0, r2, #16
    9718:	0c0a      	lsrs	r2, r1, #16
    971a:	4691      	mov	r9, r2
    971c:	0409      	lsls	r1, r1, #16
    971e:	465a      	mov	r2, fp
    9720:	0c09      	lsrs	r1, r1, #16
    9722:	464e      	mov	r6, r9
    9724:	000d      	movs	r5, r1
    9726:	0412      	lsls	r2, r2, #16
    9728:	0c12      	lsrs	r2, r2, #16
    972a:	4345      	muls	r5, r0
    972c:	9105      	str	r1, [sp, #20]
    972e:	4351      	muls	r1, r2
    9730:	4372      	muls	r2, r6
    9732:	4370      	muls	r0, r6
    9734:	1952      	adds	r2, r2, r5
    9736:	0c0e      	lsrs	r6, r1, #16
    9738:	18b2      	adds	r2, r6, r2
    973a:	4295      	cmp	r5, r2
    973c:	d903      	bls.n	9746 <__aeabi_ddiv+0x2de>
    973e:	2580      	movs	r5, #128	; 0x80
    9740:	026d      	lsls	r5, r5, #9
    9742:	46ac      	mov	ip, r5
    9744:	4460      	add	r0, ip
    9746:	0c15      	lsrs	r5, r2, #16
    9748:	0409      	lsls	r1, r1, #16
    974a:	0412      	lsls	r2, r2, #16
    974c:	0c09      	lsrs	r1, r1, #16
    974e:	1828      	adds	r0, r5, r0
    9750:	1852      	adds	r2, r2, r1
    9752:	4283      	cmp	r3, r0
    9754:	d200      	bcs.n	9758 <__aeabi_ddiv+0x2f0>
    9756:	e0ce      	b.n	98f6 <__aeabi_ddiv+0x48e>
    9758:	d100      	bne.n	975c <__aeabi_ddiv+0x2f4>
    975a:	e0c8      	b.n	98ee <__aeabi_ddiv+0x486>
    975c:	1a1d      	subs	r5, r3, r0
    975e:	4653      	mov	r3, sl
    9760:	1a9e      	subs	r6, r3, r2
    9762:	45b2      	cmp	sl, r6
    9764:	4192      	sbcs	r2, r2
    9766:	4252      	negs	r2, r2
    9768:	1aab      	subs	r3, r5, r2
    976a:	469a      	mov	sl, r3
    976c:	4598      	cmp	r8, r3
    976e:	d100      	bne.n	9772 <__aeabi_ddiv+0x30a>
    9770:	e117      	b.n	99a2 <__aeabi_ddiv+0x53a>
    9772:	0039      	movs	r1, r7
    9774:	0018      	movs	r0, r3
    9776:	f7fe fa37 	bl	7be8 <__udivsi3>
    977a:	9b01      	ldr	r3, [sp, #4]
    977c:	0005      	movs	r5, r0
    977e:	4343      	muls	r3, r0
    9780:	0039      	movs	r1, r7
    9782:	4650      	mov	r0, sl
    9784:	9304      	str	r3, [sp, #16]
    9786:	f7fe fab5 	bl	7cf4 <__aeabi_uidivmod>
    978a:	9804      	ldr	r0, [sp, #16]
    978c:	040b      	lsls	r3, r1, #16
    978e:	0c31      	lsrs	r1, r6, #16
    9790:	4319      	orrs	r1, r3
    9792:	4288      	cmp	r0, r1
    9794:	d909      	bls.n	97aa <__aeabi_ddiv+0x342>
    9796:	4441      	add	r1, r8
    9798:	1e6b      	subs	r3, r5, #1
    979a:	4588      	cmp	r8, r1
    979c:	d900      	bls.n	97a0 <__aeabi_ddiv+0x338>
    979e:	e107      	b.n	99b0 <__aeabi_ddiv+0x548>
    97a0:	4288      	cmp	r0, r1
    97a2:	d800      	bhi.n	97a6 <__aeabi_ddiv+0x33e>
    97a4:	e104      	b.n	99b0 <__aeabi_ddiv+0x548>
    97a6:	3d02      	subs	r5, #2
    97a8:	4441      	add	r1, r8
    97aa:	9b04      	ldr	r3, [sp, #16]
    97ac:	1acb      	subs	r3, r1, r3
    97ae:	0018      	movs	r0, r3
    97b0:	0039      	movs	r1, r7
    97b2:	9304      	str	r3, [sp, #16]
    97b4:	f7fe fa18 	bl	7be8 <__udivsi3>
    97b8:	9b01      	ldr	r3, [sp, #4]
    97ba:	4682      	mov	sl, r0
    97bc:	4343      	muls	r3, r0
    97be:	0039      	movs	r1, r7
    97c0:	9804      	ldr	r0, [sp, #16]
    97c2:	9301      	str	r3, [sp, #4]
    97c4:	f7fe fa96 	bl	7cf4 <__aeabi_uidivmod>
    97c8:	9801      	ldr	r0, [sp, #4]
    97ca:	040b      	lsls	r3, r1, #16
    97cc:	0431      	lsls	r1, r6, #16
    97ce:	0c09      	lsrs	r1, r1, #16
    97d0:	4319      	orrs	r1, r3
    97d2:	4288      	cmp	r0, r1
    97d4:	d90d      	bls.n	97f2 <__aeabi_ddiv+0x38a>
    97d6:	4653      	mov	r3, sl
    97d8:	4441      	add	r1, r8
    97da:	3b01      	subs	r3, #1
    97dc:	4588      	cmp	r8, r1
    97de:	d900      	bls.n	97e2 <__aeabi_ddiv+0x37a>
    97e0:	e0e8      	b.n	99b4 <__aeabi_ddiv+0x54c>
    97e2:	4288      	cmp	r0, r1
    97e4:	d800      	bhi.n	97e8 <__aeabi_ddiv+0x380>
    97e6:	e0e5      	b.n	99b4 <__aeabi_ddiv+0x54c>
    97e8:	2302      	movs	r3, #2
    97ea:	425b      	negs	r3, r3
    97ec:	469c      	mov	ip, r3
    97ee:	4441      	add	r1, r8
    97f0:	44e2      	add	sl, ip
    97f2:	9b01      	ldr	r3, [sp, #4]
    97f4:	042d      	lsls	r5, r5, #16
    97f6:	1ace      	subs	r6, r1, r3
    97f8:	4651      	mov	r1, sl
    97fa:	4329      	orrs	r1, r5
    97fc:	9d05      	ldr	r5, [sp, #20]
    97fe:	464f      	mov	r7, r9
    9800:	002a      	movs	r2, r5
    9802:	040b      	lsls	r3, r1, #16
    9804:	0c08      	lsrs	r0, r1, #16
    9806:	0c1b      	lsrs	r3, r3, #16
    9808:	435a      	muls	r2, r3
    980a:	4345      	muls	r5, r0
    980c:	437b      	muls	r3, r7
    980e:	4378      	muls	r0, r7
    9810:	195b      	adds	r3, r3, r5
    9812:	0c17      	lsrs	r7, r2, #16
    9814:	18fb      	adds	r3, r7, r3
    9816:	429d      	cmp	r5, r3
    9818:	d903      	bls.n	9822 <__aeabi_ddiv+0x3ba>
    981a:	2580      	movs	r5, #128	; 0x80
    981c:	026d      	lsls	r5, r5, #9
    981e:	46ac      	mov	ip, r5
    9820:	4460      	add	r0, ip
    9822:	0c1d      	lsrs	r5, r3, #16
    9824:	0412      	lsls	r2, r2, #16
    9826:	041b      	lsls	r3, r3, #16
    9828:	0c12      	lsrs	r2, r2, #16
    982a:	1828      	adds	r0, r5, r0
    982c:	189b      	adds	r3, r3, r2
    982e:	4286      	cmp	r6, r0
    9830:	d200      	bcs.n	9834 <__aeabi_ddiv+0x3cc>
    9832:	e093      	b.n	995c <__aeabi_ddiv+0x4f4>
    9834:	d100      	bne.n	9838 <__aeabi_ddiv+0x3d0>
    9836:	e08e      	b.n	9956 <__aeabi_ddiv+0x4ee>
    9838:	2301      	movs	r3, #1
    983a:	4319      	orrs	r1, r3
    983c:	4ba0      	ldr	r3, [pc, #640]	; (9ac0 <__aeabi_ddiv+0x658>)
    983e:	18e3      	adds	r3, r4, r3
    9840:	2b00      	cmp	r3, #0
    9842:	dc00      	bgt.n	9846 <__aeabi_ddiv+0x3de>
    9844:	e099      	b.n	997a <__aeabi_ddiv+0x512>
    9846:	074a      	lsls	r2, r1, #29
    9848:	d000      	beq.n	984c <__aeabi_ddiv+0x3e4>
    984a:	e09e      	b.n	998a <__aeabi_ddiv+0x522>
    984c:	465a      	mov	r2, fp
    984e:	01d2      	lsls	r2, r2, #7
    9850:	d506      	bpl.n	9860 <__aeabi_ddiv+0x3f8>
    9852:	465a      	mov	r2, fp
    9854:	4b9b      	ldr	r3, [pc, #620]	; (9ac4 <__aeabi_ddiv+0x65c>)
    9856:	401a      	ands	r2, r3
    9858:	2380      	movs	r3, #128	; 0x80
    985a:	4693      	mov	fp, r2
    985c:	00db      	lsls	r3, r3, #3
    985e:	18e3      	adds	r3, r4, r3
    9860:	4a99      	ldr	r2, [pc, #612]	; (9ac8 <__aeabi_ddiv+0x660>)
    9862:	4293      	cmp	r3, r2
    9864:	dd68      	ble.n	9938 <__aeabi_ddiv+0x4d0>
    9866:	2301      	movs	r3, #1
    9868:	9a02      	ldr	r2, [sp, #8]
    986a:	4c98      	ldr	r4, [pc, #608]	; (9acc <__aeabi_ddiv+0x664>)
    986c:	401a      	ands	r2, r3
    986e:	2300      	movs	r3, #0
    9870:	4694      	mov	ip, r2
    9872:	4698      	mov	r8, r3
    9874:	2200      	movs	r2, #0
    9876:	e6c5      	b.n	9604 <__aeabi_ddiv+0x19c>
    9878:	2280      	movs	r2, #128	; 0x80
    987a:	464b      	mov	r3, r9
    987c:	0312      	lsls	r2, r2, #12
    987e:	4213      	tst	r3, r2
    9880:	d00a      	beq.n	9898 <__aeabi_ddiv+0x430>
    9882:	465b      	mov	r3, fp
    9884:	4213      	tst	r3, r2
    9886:	d106      	bne.n	9896 <__aeabi_ddiv+0x42e>
    9888:	431a      	orrs	r2, r3
    988a:	0312      	lsls	r2, r2, #12
    988c:	0b12      	lsrs	r2, r2, #12
    988e:	46ac      	mov	ip, r5
    9890:	4688      	mov	r8, r1
    9892:	4c8e      	ldr	r4, [pc, #568]	; (9acc <__aeabi_ddiv+0x664>)
    9894:	e6b6      	b.n	9604 <__aeabi_ddiv+0x19c>
    9896:	464b      	mov	r3, r9
    9898:	431a      	orrs	r2, r3
    989a:	0312      	lsls	r2, r2, #12
    989c:	0b12      	lsrs	r2, r2, #12
    989e:	46bc      	mov	ip, r7
    98a0:	4c8a      	ldr	r4, [pc, #552]	; (9acc <__aeabi_ddiv+0x664>)
    98a2:	e6af      	b.n	9604 <__aeabi_ddiv+0x19c>
    98a4:	0003      	movs	r3, r0
    98a6:	465a      	mov	r2, fp
    98a8:	3b28      	subs	r3, #40	; 0x28
    98aa:	409a      	lsls	r2, r3
    98ac:	2300      	movs	r3, #0
    98ae:	4691      	mov	r9, r2
    98b0:	4698      	mov	r8, r3
    98b2:	e657      	b.n	9564 <__aeabi_ddiv+0xfc>
    98b4:	4658      	mov	r0, fp
    98b6:	f001 f94b 	bl	ab50 <__clzsi2>
    98ba:	3020      	adds	r0, #32
    98bc:	e640      	b.n	9540 <__aeabi_ddiv+0xd8>
    98be:	0003      	movs	r3, r0
    98c0:	4652      	mov	r2, sl
    98c2:	3b28      	subs	r3, #40	; 0x28
    98c4:	409a      	lsls	r2, r3
    98c6:	2100      	movs	r1, #0
    98c8:	4693      	mov	fp, r2
    98ca:	e677      	b.n	95bc <__aeabi_ddiv+0x154>
    98cc:	f001 f940 	bl	ab50 <__clzsi2>
    98d0:	3020      	adds	r0, #32
    98d2:	e65f      	b.n	9594 <__aeabi_ddiv+0x12c>
    98d4:	4588      	cmp	r8, r1
    98d6:	d200      	bcs.n	98da <__aeabi_ddiv+0x472>
    98d8:	e6c7      	b.n	966a <__aeabi_ddiv+0x202>
    98da:	464b      	mov	r3, r9
    98dc:	07de      	lsls	r6, r3, #31
    98de:	085d      	lsrs	r5, r3, #1
    98e0:	4643      	mov	r3, r8
    98e2:	085b      	lsrs	r3, r3, #1
    98e4:	431e      	orrs	r6, r3
    98e6:	4643      	mov	r3, r8
    98e8:	07db      	lsls	r3, r3, #31
    98ea:	469a      	mov	sl, r3
    98ec:	e6c2      	b.n	9674 <__aeabi_ddiv+0x20c>
    98ee:	2500      	movs	r5, #0
    98f0:	4592      	cmp	sl, r2
    98f2:	d300      	bcc.n	98f6 <__aeabi_ddiv+0x48e>
    98f4:	e733      	b.n	975e <__aeabi_ddiv+0x2f6>
    98f6:	9e03      	ldr	r6, [sp, #12]
    98f8:	4659      	mov	r1, fp
    98fa:	46b4      	mov	ip, r6
    98fc:	44e2      	add	sl, ip
    98fe:	45b2      	cmp	sl, r6
    9900:	41ad      	sbcs	r5, r5
    9902:	426d      	negs	r5, r5
    9904:	4445      	add	r5, r8
    9906:	18eb      	adds	r3, r5, r3
    9908:	3901      	subs	r1, #1
    990a:	4598      	cmp	r8, r3
    990c:	d207      	bcs.n	991e <__aeabi_ddiv+0x4b6>
    990e:	4298      	cmp	r0, r3
    9910:	d900      	bls.n	9914 <__aeabi_ddiv+0x4ac>
    9912:	e07f      	b.n	9a14 <__aeabi_ddiv+0x5ac>
    9914:	d100      	bne.n	9918 <__aeabi_ddiv+0x4b0>
    9916:	e0bc      	b.n	9a92 <__aeabi_ddiv+0x62a>
    9918:	1a1d      	subs	r5, r3, r0
    991a:	468b      	mov	fp, r1
    991c:	e71f      	b.n	975e <__aeabi_ddiv+0x2f6>
    991e:	4598      	cmp	r8, r3
    9920:	d1fa      	bne.n	9918 <__aeabi_ddiv+0x4b0>
    9922:	9d03      	ldr	r5, [sp, #12]
    9924:	4555      	cmp	r5, sl
    9926:	d9f2      	bls.n	990e <__aeabi_ddiv+0x4a6>
    9928:	4643      	mov	r3, r8
    992a:	468b      	mov	fp, r1
    992c:	1a1d      	subs	r5, r3, r0
    992e:	e716      	b.n	975e <__aeabi_ddiv+0x2f6>
    9930:	469b      	mov	fp, r3
    9932:	e6ca      	b.n	96ca <__aeabi_ddiv+0x262>
    9934:	0015      	movs	r5, r2
    9936:	e6e7      	b.n	9708 <__aeabi_ddiv+0x2a0>
    9938:	465a      	mov	r2, fp
    993a:	08c9      	lsrs	r1, r1, #3
    993c:	0752      	lsls	r2, r2, #29
    993e:	430a      	orrs	r2, r1
    9940:	055b      	lsls	r3, r3, #21
    9942:	4690      	mov	r8, r2
    9944:	0d5c      	lsrs	r4, r3, #21
    9946:	465a      	mov	r2, fp
    9948:	2301      	movs	r3, #1
    994a:	9902      	ldr	r1, [sp, #8]
    994c:	0252      	lsls	r2, r2, #9
    994e:	4019      	ands	r1, r3
    9950:	0b12      	lsrs	r2, r2, #12
    9952:	468c      	mov	ip, r1
    9954:	e656      	b.n	9604 <__aeabi_ddiv+0x19c>
    9956:	2b00      	cmp	r3, #0
    9958:	d100      	bne.n	995c <__aeabi_ddiv+0x4f4>
    995a:	e76f      	b.n	983c <__aeabi_ddiv+0x3d4>
    995c:	4446      	add	r6, r8
    995e:	1e4a      	subs	r2, r1, #1
    9960:	45b0      	cmp	r8, r6
    9962:	d929      	bls.n	99b8 <__aeabi_ddiv+0x550>
    9964:	0011      	movs	r1, r2
    9966:	4286      	cmp	r6, r0
    9968:	d000      	beq.n	996c <__aeabi_ddiv+0x504>
    996a:	e765      	b.n	9838 <__aeabi_ddiv+0x3d0>
    996c:	9a03      	ldr	r2, [sp, #12]
    996e:	4293      	cmp	r3, r2
    9970:	d000      	beq.n	9974 <__aeabi_ddiv+0x50c>
    9972:	e761      	b.n	9838 <__aeabi_ddiv+0x3d0>
    9974:	e762      	b.n	983c <__aeabi_ddiv+0x3d4>
    9976:	2101      	movs	r1, #1
    9978:	4249      	negs	r1, r1
    997a:	2001      	movs	r0, #1
    997c:	1ac2      	subs	r2, r0, r3
    997e:	2a38      	cmp	r2, #56	; 0x38
    9980:	dd21      	ble.n	99c6 <__aeabi_ddiv+0x55e>
    9982:	9b02      	ldr	r3, [sp, #8]
    9984:	4003      	ands	r3, r0
    9986:	469c      	mov	ip, r3
    9988:	e638      	b.n	95fc <__aeabi_ddiv+0x194>
    998a:	220f      	movs	r2, #15
    998c:	400a      	ands	r2, r1
    998e:	2a04      	cmp	r2, #4
    9990:	d100      	bne.n	9994 <__aeabi_ddiv+0x52c>
    9992:	e75b      	b.n	984c <__aeabi_ddiv+0x3e4>
    9994:	000a      	movs	r2, r1
    9996:	1d11      	adds	r1, r2, #4
    9998:	4291      	cmp	r1, r2
    999a:	4192      	sbcs	r2, r2
    999c:	4252      	negs	r2, r2
    999e:	4493      	add	fp, r2
    99a0:	e754      	b.n	984c <__aeabi_ddiv+0x3e4>
    99a2:	4b47      	ldr	r3, [pc, #284]	; (9ac0 <__aeabi_ddiv+0x658>)
    99a4:	18e3      	adds	r3, r4, r3
    99a6:	2b00      	cmp	r3, #0
    99a8:	dde5      	ble.n	9976 <__aeabi_ddiv+0x50e>
    99aa:	2201      	movs	r2, #1
    99ac:	4252      	negs	r2, r2
    99ae:	e7f2      	b.n	9996 <__aeabi_ddiv+0x52e>
    99b0:	001d      	movs	r5, r3
    99b2:	e6fa      	b.n	97aa <__aeabi_ddiv+0x342>
    99b4:	469a      	mov	sl, r3
    99b6:	e71c      	b.n	97f2 <__aeabi_ddiv+0x38a>
    99b8:	42b0      	cmp	r0, r6
    99ba:	d839      	bhi.n	9a30 <__aeabi_ddiv+0x5c8>
    99bc:	d06e      	beq.n	9a9c <__aeabi_ddiv+0x634>
    99be:	0011      	movs	r1, r2
    99c0:	e73a      	b.n	9838 <__aeabi_ddiv+0x3d0>
    99c2:	9302      	str	r3, [sp, #8]
    99c4:	e73a      	b.n	983c <__aeabi_ddiv+0x3d4>
    99c6:	2a1f      	cmp	r2, #31
    99c8:	dc3c      	bgt.n	9a44 <__aeabi_ddiv+0x5dc>
    99ca:	2320      	movs	r3, #32
    99cc:	1a9b      	subs	r3, r3, r2
    99ce:	000c      	movs	r4, r1
    99d0:	4658      	mov	r0, fp
    99d2:	4099      	lsls	r1, r3
    99d4:	4098      	lsls	r0, r3
    99d6:	1e4b      	subs	r3, r1, #1
    99d8:	4199      	sbcs	r1, r3
    99da:	465b      	mov	r3, fp
    99dc:	40d4      	lsrs	r4, r2
    99de:	40d3      	lsrs	r3, r2
    99e0:	4320      	orrs	r0, r4
    99e2:	4308      	orrs	r0, r1
    99e4:	001a      	movs	r2, r3
    99e6:	0743      	lsls	r3, r0, #29
    99e8:	d009      	beq.n	99fe <__aeabi_ddiv+0x596>
    99ea:	230f      	movs	r3, #15
    99ec:	4003      	ands	r3, r0
    99ee:	2b04      	cmp	r3, #4
    99f0:	d005      	beq.n	99fe <__aeabi_ddiv+0x596>
    99f2:	0001      	movs	r1, r0
    99f4:	1d08      	adds	r0, r1, #4
    99f6:	4288      	cmp	r0, r1
    99f8:	419b      	sbcs	r3, r3
    99fa:	425b      	negs	r3, r3
    99fc:	18d2      	adds	r2, r2, r3
    99fe:	0213      	lsls	r3, r2, #8
    9a00:	d53a      	bpl.n	9a78 <__aeabi_ddiv+0x610>
    9a02:	2301      	movs	r3, #1
    9a04:	9a02      	ldr	r2, [sp, #8]
    9a06:	2401      	movs	r4, #1
    9a08:	401a      	ands	r2, r3
    9a0a:	2300      	movs	r3, #0
    9a0c:	4694      	mov	ip, r2
    9a0e:	4698      	mov	r8, r3
    9a10:	2200      	movs	r2, #0
    9a12:	e5f7      	b.n	9604 <__aeabi_ddiv+0x19c>
    9a14:	2102      	movs	r1, #2
    9a16:	4249      	negs	r1, r1
    9a18:	468c      	mov	ip, r1
    9a1a:	9d03      	ldr	r5, [sp, #12]
    9a1c:	44e3      	add	fp, ip
    9a1e:	46ac      	mov	ip, r5
    9a20:	44e2      	add	sl, ip
    9a22:	45aa      	cmp	sl, r5
    9a24:	41ad      	sbcs	r5, r5
    9a26:	426d      	negs	r5, r5
    9a28:	4445      	add	r5, r8
    9a2a:	18ed      	adds	r5, r5, r3
    9a2c:	1a2d      	subs	r5, r5, r0
    9a2e:	e696      	b.n	975e <__aeabi_ddiv+0x2f6>
    9a30:	1e8a      	subs	r2, r1, #2
    9a32:	9903      	ldr	r1, [sp, #12]
    9a34:	004d      	lsls	r5, r1, #1
    9a36:	428d      	cmp	r5, r1
    9a38:	4189      	sbcs	r1, r1
    9a3a:	4249      	negs	r1, r1
    9a3c:	4441      	add	r1, r8
    9a3e:	1876      	adds	r6, r6, r1
    9a40:	9503      	str	r5, [sp, #12]
    9a42:	e78f      	b.n	9964 <__aeabi_ddiv+0x4fc>
    9a44:	201f      	movs	r0, #31
    9a46:	4240      	negs	r0, r0
    9a48:	1ac3      	subs	r3, r0, r3
    9a4a:	4658      	mov	r0, fp
    9a4c:	40d8      	lsrs	r0, r3
    9a4e:	0003      	movs	r3, r0
    9a50:	2a20      	cmp	r2, #32
    9a52:	d028      	beq.n	9aa6 <__aeabi_ddiv+0x63e>
    9a54:	2040      	movs	r0, #64	; 0x40
    9a56:	465d      	mov	r5, fp
    9a58:	1a82      	subs	r2, r0, r2
    9a5a:	4095      	lsls	r5, r2
    9a5c:	4329      	orrs	r1, r5
    9a5e:	1e4a      	subs	r2, r1, #1
    9a60:	4191      	sbcs	r1, r2
    9a62:	4319      	orrs	r1, r3
    9a64:	2307      	movs	r3, #7
    9a66:	2200      	movs	r2, #0
    9a68:	400b      	ands	r3, r1
    9a6a:	d009      	beq.n	9a80 <__aeabi_ddiv+0x618>
    9a6c:	230f      	movs	r3, #15
    9a6e:	2200      	movs	r2, #0
    9a70:	400b      	ands	r3, r1
    9a72:	0008      	movs	r0, r1
    9a74:	2b04      	cmp	r3, #4
    9a76:	d1bd      	bne.n	99f4 <__aeabi_ddiv+0x58c>
    9a78:	0001      	movs	r1, r0
    9a7a:	0753      	lsls	r3, r2, #29
    9a7c:	0252      	lsls	r2, r2, #9
    9a7e:	0b12      	lsrs	r2, r2, #12
    9a80:	08c9      	lsrs	r1, r1, #3
    9a82:	4319      	orrs	r1, r3
    9a84:	2301      	movs	r3, #1
    9a86:	4688      	mov	r8, r1
    9a88:	9902      	ldr	r1, [sp, #8]
    9a8a:	2400      	movs	r4, #0
    9a8c:	4019      	ands	r1, r3
    9a8e:	468c      	mov	ip, r1
    9a90:	e5b8      	b.n	9604 <__aeabi_ddiv+0x19c>
    9a92:	4552      	cmp	r2, sl
    9a94:	d8be      	bhi.n	9a14 <__aeabi_ddiv+0x5ac>
    9a96:	468b      	mov	fp, r1
    9a98:	2500      	movs	r5, #0
    9a9a:	e660      	b.n	975e <__aeabi_ddiv+0x2f6>
    9a9c:	9d03      	ldr	r5, [sp, #12]
    9a9e:	429d      	cmp	r5, r3
    9aa0:	d3c6      	bcc.n	9a30 <__aeabi_ddiv+0x5c8>
    9aa2:	0011      	movs	r1, r2
    9aa4:	e762      	b.n	996c <__aeabi_ddiv+0x504>
    9aa6:	2500      	movs	r5, #0
    9aa8:	e7d8      	b.n	9a5c <__aeabi_ddiv+0x5f4>
    9aaa:	2280      	movs	r2, #128	; 0x80
    9aac:	465b      	mov	r3, fp
    9aae:	0312      	lsls	r2, r2, #12
    9ab0:	431a      	orrs	r2, r3
    9ab2:	9b01      	ldr	r3, [sp, #4]
    9ab4:	0312      	lsls	r2, r2, #12
    9ab6:	0b12      	lsrs	r2, r2, #12
    9ab8:	469c      	mov	ip, r3
    9aba:	4688      	mov	r8, r1
    9abc:	4c03      	ldr	r4, [pc, #12]	; (9acc <__aeabi_ddiv+0x664>)
    9abe:	e5a1      	b.n	9604 <__aeabi_ddiv+0x19c>
    9ac0:	000003ff 	.word	0x000003ff
    9ac4:	feffffff 	.word	0xfeffffff
    9ac8:	000007fe 	.word	0x000007fe
    9acc:	000007ff 	.word	0x000007ff

00009ad0 <__eqdf2>:
    9ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ad2:	464f      	mov	r7, r9
    9ad4:	4646      	mov	r6, r8
    9ad6:	46d6      	mov	lr, sl
    9ad8:	005c      	lsls	r4, r3, #1
    9ada:	b5c0      	push	{r6, r7, lr}
    9adc:	031f      	lsls	r7, r3, #12
    9ade:	0fdb      	lsrs	r3, r3, #31
    9ae0:	469a      	mov	sl, r3
    9ae2:	4b17      	ldr	r3, [pc, #92]	; (9b40 <__eqdf2+0x70>)
    9ae4:	030e      	lsls	r6, r1, #12
    9ae6:	004d      	lsls	r5, r1, #1
    9ae8:	4684      	mov	ip, r0
    9aea:	4680      	mov	r8, r0
    9aec:	0b36      	lsrs	r6, r6, #12
    9aee:	0d6d      	lsrs	r5, r5, #21
    9af0:	0fc9      	lsrs	r1, r1, #31
    9af2:	4691      	mov	r9, r2
    9af4:	0b3f      	lsrs	r7, r7, #12
    9af6:	0d64      	lsrs	r4, r4, #21
    9af8:	2001      	movs	r0, #1
    9afa:	429d      	cmp	r5, r3
    9afc:	d008      	beq.n	9b10 <__eqdf2+0x40>
    9afe:	429c      	cmp	r4, r3
    9b00:	d001      	beq.n	9b06 <__eqdf2+0x36>
    9b02:	42a5      	cmp	r5, r4
    9b04:	d00b      	beq.n	9b1e <__eqdf2+0x4e>
    9b06:	bc1c      	pop	{r2, r3, r4}
    9b08:	4690      	mov	r8, r2
    9b0a:	4699      	mov	r9, r3
    9b0c:	46a2      	mov	sl, r4
    9b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b10:	4663      	mov	r3, ip
    9b12:	4333      	orrs	r3, r6
    9b14:	d1f7      	bne.n	9b06 <__eqdf2+0x36>
    9b16:	42ac      	cmp	r4, r5
    9b18:	d1f5      	bne.n	9b06 <__eqdf2+0x36>
    9b1a:	433a      	orrs	r2, r7
    9b1c:	d1f3      	bne.n	9b06 <__eqdf2+0x36>
    9b1e:	2001      	movs	r0, #1
    9b20:	42be      	cmp	r6, r7
    9b22:	d1f0      	bne.n	9b06 <__eqdf2+0x36>
    9b24:	45c8      	cmp	r8, r9
    9b26:	d1ee      	bne.n	9b06 <__eqdf2+0x36>
    9b28:	4551      	cmp	r1, sl
    9b2a:	d007      	beq.n	9b3c <__eqdf2+0x6c>
    9b2c:	2d00      	cmp	r5, #0
    9b2e:	d1ea      	bne.n	9b06 <__eqdf2+0x36>
    9b30:	4663      	mov	r3, ip
    9b32:	431e      	orrs	r6, r3
    9b34:	0030      	movs	r0, r6
    9b36:	1e46      	subs	r6, r0, #1
    9b38:	41b0      	sbcs	r0, r6
    9b3a:	e7e4      	b.n	9b06 <__eqdf2+0x36>
    9b3c:	2000      	movs	r0, #0
    9b3e:	e7e2      	b.n	9b06 <__eqdf2+0x36>
    9b40:	000007ff 	.word	0x000007ff

00009b44 <__gedf2>:
    9b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b46:	4645      	mov	r5, r8
    9b48:	46de      	mov	lr, fp
    9b4a:	4657      	mov	r7, sl
    9b4c:	464e      	mov	r6, r9
    9b4e:	b5e0      	push	{r5, r6, r7, lr}
    9b50:	031f      	lsls	r7, r3, #12
    9b52:	0b3d      	lsrs	r5, r7, #12
    9b54:	4f2c      	ldr	r7, [pc, #176]	; (9c08 <__gedf2+0xc4>)
    9b56:	030e      	lsls	r6, r1, #12
    9b58:	004c      	lsls	r4, r1, #1
    9b5a:	46ab      	mov	fp, r5
    9b5c:	005d      	lsls	r5, r3, #1
    9b5e:	4684      	mov	ip, r0
    9b60:	0b36      	lsrs	r6, r6, #12
    9b62:	0d64      	lsrs	r4, r4, #21
    9b64:	0fc9      	lsrs	r1, r1, #31
    9b66:	4690      	mov	r8, r2
    9b68:	0d6d      	lsrs	r5, r5, #21
    9b6a:	0fdb      	lsrs	r3, r3, #31
    9b6c:	42bc      	cmp	r4, r7
    9b6e:	d02a      	beq.n	9bc6 <__gedf2+0x82>
    9b70:	4f25      	ldr	r7, [pc, #148]	; (9c08 <__gedf2+0xc4>)
    9b72:	42bd      	cmp	r5, r7
    9b74:	d02d      	beq.n	9bd2 <__gedf2+0x8e>
    9b76:	2c00      	cmp	r4, #0
    9b78:	d10f      	bne.n	9b9a <__gedf2+0x56>
    9b7a:	4330      	orrs	r0, r6
    9b7c:	0007      	movs	r7, r0
    9b7e:	4681      	mov	r9, r0
    9b80:	4278      	negs	r0, r7
    9b82:	4178      	adcs	r0, r7
    9b84:	b2c0      	uxtb	r0, r0
    9b86:	2d00      	cmp	r5, #0
    9b88:	d117      	bne.n	9bba <__gedf2+0x76>
    9b8a:	465f      	mov	r7, fp
    9b8c:	433a      	orrs	r2, r7
    9b8e:	d114      	bne.n	9bba <__gedf2+0x76>
    9b90:	464b      	mov	r3, r9
    9b92:	2000      	movs	r0, #0
    9b94:	2b00      	cmp	r3, #0
    9b96:	d00a      	beq.n	9bae <__gedf2+0x6a>
    9b98:	e006      	b.n	9ba8 <__gedf2+0x64>
    9b9a:	2d00      	cmp	r5, #0
    9b9c:	d102      	bne.n	9ba4 <__gedf2+0x60>
    9b9e:	4658      	mov	r0, fp
    9ba0:	4302      	orrs	r2, r0
    9ba2:	d001      	beq.n	9ba8 <__gedf2+0x64>
    9ba4:	4299      	cmp	r1, r3
    9ba6:	d018      	beq.n	9bda <__gedf2+0x96>
    9ba8:	4248      	negs	r0, r1
    9baa:	2101      	movs	r1, #1
    9bac:	4308      	orrs	r0, r1
    9bae:	bc3c      	pop	{r2, r3, r4, r5}
    9bb0:	4690      	mov	r8, r2
    9bb2:	4699      	mov	r9, r3
    9bb4:	46a2      	mov	sl, r4
    9bb6:	46ab      	mov	fp, r5
    9bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bba:	2800      	cmp	r0, #0
    9bbc:	d0f2      	beq.n	9ba4 <__gedf2+0x60>
    9bbe:	2001      	movs	r0, #1
    9bc0:	3b01      	subs	r3, #1
    9bc2:	4318      	orrs	r0, r3
    9bc4:	e7f3      	b.n	9bae <__gedf2+0x6a>
    9bc6:	0037      	movs	r7, r6
    9bc8:	4307      	orrs	r7, r0
    9bca:	d0d1      	beq.n	9b70 <__gedf2+0x2c>
    9bcc:	2002      	movs	r0, #2
    9bce:	4240      	negs	r0, r0
    9bd0:	e7ed      	b.n	9bae <__gedf2+0x6a>
    9bd2:	465f      	mov	r7, fp
    9bd4:	4317      	orrs	r7, r2
    9bd6:	d0ce      	beq.n	9b76 <__gedf2+0x32>
    9bd8:	e7f8      	b.n	9bcc <__gedf2+0x88>
    9bda:	42ac      	cmp	r4, r5
    9bdc:	dce4      	bgt.n	9ba8 <__gedf2+0x64>
    9bde:	da03      	bge.n	9be8 <__gedf2+0xa4>
    9be0:	1e48      	subs	r0, r1, #1
    9be2:	2101      	movs	r1, #1
    9be4:	4308      	orrs	r0, r1
    9be6:	e7e2      	b.n	9bae <__gedf2+0x6a>
    9be8:	455e      	cmp	r6, fp
    9bea:	d8dd      	bhi.n	9ba8 <__gedf2+0x64>
    9bec:	d006      	beq.n	9bfc <__gedf2+0xb8>
    9bee:	2000      	movs	r0, #0
    9bf0:	455e      	cmp	r6, fp
    9bf2:	d2dc      	bcs.n	9bae <__gedf2+0x6a>
    9bf4:	2301      	movs	r3, #1
    9bf6:	1e48      	subs	r0, r1, #1
    9bf8:	4318      	orrs	r0, r3
    9bfa:	e7d8      	b.n	9bae <__gedf2+0x6a>
    9bfc:	45c4      	cmp	ip, r8
    9bfe:	d8d3      	bhi.n	9ba8 <__gedf2+0x64>
    9c00:	2000      	movs	r0, #0
    9c02:	45c4      	cmp	ip, r8
    9c04:	d3f6      	bcc.n	9bf4 <__gedf2+0xb0>
    9c06:	e7d2      	b.n	9bae <__gedf2+0x6a>
    9c08:	000007ff 	.word	0x000007ff

00009c0c <__ledf2>:
    9c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c0e:	464e      	mov	r6, r9
    9c10:	4645      	mov	r5, r8
    9c12:	46de      	mov	lr, fp
    9c14:	4657      	mov	r7, sl
    9c16:	005c      	lsls	r4, r3, #1
    9c18:	b5e0      	push	{r5, r6, r7, lr}
    9c1a:	031f      	lsls	r7, r3, #12
    9c1c:	0fdb      	lsrs	r3, r3, #31
    9c1e:	4699      	mov	r9, r3
    9c20:	4b2a      	ldr	r3, [pc, #168]	; (9ccc <__ledf2+0xc0>)
    9c22:	030e      	lsls	r6, r1, #12
    9c24:	004d      	lsls	r5, r1, #1
    9c26:	0fc9      	lsrs	r1, r1, #31
    9c28:	4684      	mov	ip, r0
    9c2a:	0b36      	lsrs	r6, r6, #12
    9c2c:	0d6d      	lsrs	r5, r5, #21
    9c2e:	468b      	mov	fp, r1
    9c30:	4690      	mov	r8, r2
    9c32:	0b3f      	lsrs	r7, r7, #12
    9c34:	0d64      	lsrs	r4, r4, #21
    9c36:	429d      	cmp	r5, r3
    9c38:	d020      	beq.n	9c7c <__ledf2+0x70>
    9c3a:	4b24      	ldr	r3, [pc, #144]	; (9ccc <__ledf2+0xc0>)
    9c3c:	429c      	cmp	r4, r3
    9c3e:	d022      	beq.n	9c86 <__ledf2+0x7a>
    9c40:	2d00      	cmp	r5, #0
    9c42:	d112      	bne.n	9c6a <__ledf2+0x5e>
    9c44:	4330      	orrs	r0, r6
    9c46:	4243      	negs	r3, r0
    9c48:	4143      	adcs	r3, r0
    9c4a:	b2db      	uxtb	r3, r3
    9c4c:	2c00      	cmp	r4, #0
    9c4e:	d01f      	beq.n	9c90 <__ledf2+0x84>
    9c50:	2b00      	cmp	r3, #0
    9c52:	d00c      	beq.n	9c6e <__ledf2+0x62>
    9c54:	464b      	mov	r3, r9
    9c56:	2001      	movs	r0, #1
    9c58:	3b01      	subs	r3, #1
    9c5a:	4303      	orrs	r3, r0
    9c5c:	0018      	movs	r0, r3
    9c5e:	bc3c      	pop	{r2, r3, r4, r5}
    9c60:	4690      	mov	r8, r2
    9c62:	4699      	mov	r9, r3
    9c64:	46a2      	mov	sl, r4
    9c66:	46ab      	mov	fp, r5
    9c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c6a:	2c00      	cmp	r4, #0
    9c6c:	d016      	beq.n	9c9c <__ledf2+0x90>
    9c6e:	45cb      	cmp	fp, r9
    9c70:	d017      	beq.n	9ca2 <__ledf2+0x96>
    9c72:	465b      	mov	r3, fp
    9c74:	4259      	negs	r1, r3
    9c76:	2301      	movs	r3, #1
    9c78:	430b      	orrs	r3, r1
    9c7a:	e7ef      	b.n	9c5c <__ledf2+0x50>
    9c7c:	0031      	movs	r1, r6
    9c7e:	2302      	movs	r3, #2
    9c80:	4301      	orrs	r1, r0
    9c82:	d1eb      	bne.n	9c5c <__ledf2+0x50>
    9c84:	e7d9      	b.n	9c3a <__ledf2+0x2e>
    9c86:	0039      	movs	r1, r7
    9c88:	2302      	movs	r3, #2
    9c8a:	4311      	orrs	r1, r2
    9c8c:	d1e6      	bne.n	9c5c <__ledf2+0x50>
    9c8e:	e7d7      	b.n	9c40 <__ledf2+0x34>
    9c90:	433a      	orrs	r2, r7
    9c92:	d1dd      	bne.n	9c50 <__ledf2+0x44>
    9c94:	2300      	movs	r3, #0
    9c96:	2800      	cmp	r0, #0
    9c98:	d0e0      	beq.n	9c5c <__ledf2+0x50>
    9c9a:	e7ea      	b.n	9c72 <__ledf2+0x66>
    9c9c:	433a      	orrs	r2, r7
    9c9e:	d1e6      	bne.n	9c6e <__ledf2+0x62>
    9ca0:	e7e7      	b.n	9c72 <__ledf2+0x66>
    9ca2:	42a5      	cmp	r5, r4
    9ca4:	dce5      	bgt.n	9c72 <__ledf2+0x66>
    9ca6:	db05      	blt.n	9cb4 <__ledf2+0xa8>
    9ca8:	42be      	cmp	r6, r7
    9caa:	d8e2      	bhi.n	9c72 <__ledf2+0x66>
    9cac:	d007      	beq.n	9cbe <__ledf2+0xb2>
    9cae:	2300      	movs	r3, #0
    9cb0:	42be      	cmp	r6, r7
    9cb2:	d2d3      	bcs.n	9c5c <__ledf2+0x50>
    9cb4:	4659      	mov	r1, fp
    9cb6:	2301      	movs	r3, #1
    9cb8:	3901      	subs	r1, #1
    9cba:	430b      	orrs	r3, r1
    9cbc:	e7ce      	b.n	9c5c <__ledf2+0x50>
    9cbe:	45c4      	cmp	ip, r8
    9cc0:	d8d7      	bhi.n	9c72 <__ledf2+0x66>
    9cc2:	2300      	movs	r3, #0
    9cc4:	45c4      	cmp	ip, r8
    9cc6:	d3f5      	bcc.n	9cb4 <__ledf2+0xa8>
    9cc8:	e7c8      	b.n	9c5c <__ledf2+0x50>
    9cca:	46c0      	nop			; (mov r8, r8)
    9ccc:	000007ff 	.word	0x000007ff

00009cd0 <__aeabi_dmul>:
    9cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cd2:	4657      	mov	r7, sl
    9cd4:	4645      	mov	r5, r8
    9cd6:	46de      	mov	lr, fp
    9cd8:	464e      	mov	r6, r9
    9cda:	b5e0      	push	{r5, r6, r7, lr}
    9cdc:	030c      	lsls	r4, r1, #12
    9cde:	4698      	mov	r8, r3
    9ce0:	004e      	lsls	r6, r1, #1
    9ce2:	0b23      	lsrs	r3, r4, #12
    9ce4:	b087      	sub	sp, #28
    9ce6:	0007      	movs	r7, r0
    9ce8:	4692      	mov	sl, r2
    9cea:	469b      	mov	fp, r3
    9cec:	0d76      	lsrs	r6, r6, #21
    9cee:	0fcd      	lsrs	r5, r1, #31
    9cf0:	2e00      	cmp	r6, #0
    9cf2:	d06b      	beq.n	9dcc <__aeabi_dmul+0xfc>
    9cf4:	4b6d      	ldr	r3, [pc, #436]	; (9eac <__aeabi_dmul+0x1dc>)
    9cf6:	429e      	cmp	r6, r3
    9cf8:	d035      	beq.n	9d66 <__aeabi_dmul+0x96>
    9cfa:	2480      	movs	r4, #128	; 0x80
    9cfc:	465b      	mov	r3, fp
    9cfe:	0f42      	lsrs	r2, r0, #29
    9d00:	0424      	lsls	r4, r4, #16
    9d02:	00db      	lsls	r3, r3, #3
    9d04:	4314      	orrs	r4, r2
    9d06:	431c      	orrs	r4, r3
    9d08:	00c3      	lsls	r3, r0, #3
    9d0a:	4699      	mov	r9, r3
    9d0c:	4b68      	ldr	r3, [pc, #416]	; (9eb0 <__aeabi_dmul+0x1e0>)
    9d0e:	46a3      	mov	fp, r4
    9d10:	469c      	mov	ip, r3
    9d12:	2300      	movs	r3, #0
    9d14:	2700      	movs	r7, #0
    9d16:	4466      	add	r6, ip
    9d18:	9302      	str	r3, [sp, #8]
    9d1a:	4643      	mov	r3, r8
    9d1c:	031c      	lsls	r4, r3, #12
    9d1e:	005a      	lsls	r2, r3, #1
    9d20:	0fdb      	lsrs	r3, r3, #31
    9d22:	4650      	mov	r0, sl
    9d24:	0b24      	lsrs	r4, r4, #12
    9d26:	0d52      	lsrs	r2, r2, #21
    9d28:	4698      	mov	r8, r3
    9d2a:	d100      	bne.n	9d2e <__aeabi_dmul+0x5e>
    9d2c:	e076      	b.n	9e1c <__aeabi_dmul+0x14c>
    9d2e:	4b5f      	ldr	r3, [pc, #380]	; (9eac <__aeabi_dmul+0x1dc>)
    9d30:	429a      	cmp	r2, r3
    9d32:	d06d      	beq.n	9e10 <__aeabi_dmul+0x140>
    9d34:	2380      	movs	r3, #128	; 0x80
    9d36:	0f41      	lsrs	r1, r0, #29
    9d38:	041b      	lsls	r3, r3, #16
    9d3a:	430b      	orrs	r3, r1
    9d3c:	495c      	ldr	r1, [pc, #368]	; (9eb0 <__aeabi_dmul+0x1e0>)
    9d3e:	00e4      	lsls	r4, r4, #3
    9d40:	468c      	mov	ip, r1
    9d42:	431c      	orrs	r4, r3
    9d44:	00c3      	lsls	r3, r0, #3
    9d46:	2000      	movs	r0, #0
    9d48:	4462      	add	r2, ip
    9d4a:	4641      	mov	r1, r8
    9d4c:	18b6      	adds	r6, r6, r2
    9d4e:	4069      	eors	r1, r5
    9d50:	1c72      	adds	r2, r6, #1
    9d52:	9101      	str	r1, [sp, #4]
    9d54:	4694      	mov	ip, r2
    9d56:	4307      	orrs	r7, r0
    9d58:	2f0f      	cmp	r7, #15
    9d5a:	d900      	bls.n	9d5e <__aeabi_dmul+0x8e>
    9d5c:	e0b0      	b.n	9ec0 <__aeabi_dmul+0x1f0>
    9d5e:	4a55      	ldr	r2, [pc, #340]	; (9eb4 <__aeabi_dmul+0x1e4>)
    9d60:	00bf      	lsls	r7, r7, #2
    9d62:	59d2      	ldr	r2, [r2, r7]
    9d64:	4697      	mov	pc, r2
    9d66:	465b      	mov	r3, fp
    9d68:	4303      	orrs	r3, r0
    9d6a:	4699      	mov	r9, r3
    9d6c:	d000      	beq.n	9d70 <__aeabi_dmul+0xa0>
    9d6e:	e087      	b.n	9e80 <__aeabi_dmul+0x1b0>
    9d70:	2300      	movs	r3, #0
    9d72:	469b      	mov	fp, r3
    9d74:	3302      	adds	r3, #2
    9d76:	2708      	movs	r7, #8
    9d78:	9302      	str	r3, [sp, #8]
    9d7a:	e7ce      	b.n	9d1a <__aeabi_dmul+0x4a>
    9d7c:	4642      	mov	r2, r8
    9d7e:	9201      	str	r2, [sp, #4]
    9d80:	2802      	cmp	r0, #2
    9d82:	d067      	beq.n	9e54 <__aeabi_dmul+0x184>
    9d84:	2803      	cmp	r0, #3
    9d86:	d100      	bne.n	9d8a <__aeabi_dmul+0xba>
    9d88:	e20e      	b.n	a1a8 <__aeabi_dmul+0x4d8>
    9d8a:	2801      	cmp	r0, #1
    9d8c:	d000      	beq.n	9d90 <__aeabi_dmul+0xc0>
    9d8e:	e162      	b.n	a056 <__aeabi_dmul+0x386>
    9d90:	2300      	movs	r3, #0
    9d92:	2400      	movs	r4, #0
    9d94:	2200      	movs	r2, #0
    9d96:	4699      	mov	r9, r3
    9d98:	9901      	ldr	r1, [sp, #4]
    9d9a:	4001      	ands	r1, r0
    9d9c:	b2cd      	uxtb	r5, r1
    9d9e:	2100      	movs	r1, #0
    9da0:	0312      	lsls	r2, r2, #12
    9da2:	0d0b      	lsrs	r3, r1, #20
    9da4:	0b12      	lsrs	r2, r2, #12
    9da6:	051b      	lsls	r3, r3, #20
    9da8:	4313      	orrs	r3, r2
    9daa:	4a43      	ldr	r2, [pc, #268]	; (9eb8 <__aeabi_dmul+0x1e8>)
    9dac:	0524      	lsls	r4, r4, #20
    9dae:	4013      	ands	r3, r2
    9db0:	431c      	orrs	r4, r3
    9db2:	0064      	lsls	r4, r4, #1
    9db4:	07ed      	lsls	r5, r5, #31
    9db6:	0864      	lsrs	r4, r4, #1
    9db8:	432c      	orrs	r4, r5
    9dba:	4648      	mov	r0, r9
    9dbc:	0021      	movs	r1, r4
    9dbe:	b007      	add	sp, #28
    9dc0:	bc3c      	pop	{r2, r3, r4, r5}
    9dc2:	4690      	mov	r8, r2
    9dc4:	4699      	mov	r9, r3
    9dc6:	46a2      	mov	sl, r4
    9dc8:	46ab      	mov	fp, r5
    9dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dcc:	4303      	orrs	r3, r0
    9dce:	4699      	mov	r9, r3
    9dd0:	d04f      	beq.n	9e72 <__aeabi_dmul+0x1a2>
    9dd2:	465b      	mov	r3, fp
    9dd4:	2b00      	cmp	r3, #0
    9dd6:	d100      	bne.n	9dda <__aeabi_dmul+0x10a>
    9dd8:	e189      	b.n	a0ee <__aeabi_dmul+0x41e>
    9dda:	4658      	mov	r0, fp
    9ddc:	f000 feb8 	bl	ab50 <__clzsi2>
    9de0:	0003      	movs	r3, r0
    9de2:	3b0b      	subs	r3, #11
    9de4:	2b1c      	cmp	r3, #28
    9de6:	dd00      	ble.n	9dea <__aeabi_dmul+0x11a>
    9de8:	e17a      	b.n	a0e0 <__aeabi_dmul+0x410>
    9dea:	221d      	movs	r2, #29
    9dec:	1ad3      	subs	r3, r2, r3
    9dee:	003a      	movs	r2, r7
    9df0:	0001      	movs	r1, r0
    9df2:	465c      	mov	r4, fp
    9df4:	40da      	lsrs	r2, r3
    9df6:	3908      	subs	r1, #8
    9df8:	408c      	lsls	r4, r1
    9dfa:	0013      	movs	r3, r2
    9dfc:	408f      	lsls	r7, r1
    9dfe:	4323      	orrs	r3, r4
    9e00:	469b      	mov	fp, r3
    9e02:	46b9      	mov	r9, r7
    9e04:	2300      	movs	r3, #0
    9e06:	4e2d      	ldr	r6, [pc, #180]	; (9ebc <__aeabi_dmul+0x1ec>)
    9e08:	2700      	movs	r7, #0
    9e0a:	1a36      	subs	r6, r6, r0
    9e0c:	9302      	str	r3, [sp, #8]
    9e0e:	e784      	b.n	9d1a <__aeabi_dmul+0x4a>
    9e10:	4653      	mov	r3, sl
    9e12:	4323      	orrs	r3, r4
    9e14:	d12a      	bne.n	9e6c <__aeabi_dmul+0x19c>
    9e16:	2400      	movs	r4, #0
    9e18:	2002      	movs	r0, #2
    9e1a:	e796      	b.n	9d4a <__aeabi_dmul+0x7a>
    9e1c:	4653      	mov	r3, sl
    9e1e:	4323      	orrs	r3, r4
    9e20:	d020      	beq.n	9e64 <__aeabi_dmul+0x194>
    9e22:	2c00      	cmp	r4, #0
    9e24:	d100      	bne.n	9e28 <__aeabi_dmul+0x158>
    9e26:	e157      	b.n	a0d8 <__aeabi_dmul+0x408>
    9e28:	0020      	movs	r0, r4
    9e2a:	f000 fe91 	bl	ab50 <__clzsi2>
    9e2e:	0003      	movs	r3, r0
    9e30:	3b0b      	subs	r3, #11
    9e32:	2b1c      	cmp	r3, #28
    9e34:	dd00      	ble.n	9e38 <__aeabi_dmul+0x168>
    9e36:	e149      	b.n	a0cc <__aeabi_dmul+0x3fc>
    9e38:	211d      	movs	r1, #29
    9e3a:	1acb      	subs	r3, r1, r3
    9e3c:	4651      	mov	r1, sl
    9e3e:	0002      	movs	r2, r0
    9e40:	40d9      	lsrs	r1, r3
    9e42:	4653      	mov	r3, sl
    9e44:	3a08      	subs	r2, #8
    9e46:	4094      	lsls	r4, r2
    9e48:	4093      	lsls	r3, r2
    9e4a:	430c      	orrs	r4, r1
    9e4c:	4a1b      	ldr	r2, [pc, #108]	; (9ebc <__aeabi_dmul+0x1ec>)
    9e4e:	1a12      	subs	r2, r2, r0
    9e50:	2000      	movs	r0, #0
    9e52:	e77a      	b.n	9d4a <__aeabi_dmul+0x7a>
    9e54:	2501      	movs	r5, #1
    9e56:	9b01      	ldr	r3, [sp, #4]
    9e58:	4c14      	ldr	r4, [pc, #80]	; (9eac <__aeabi_dmul+0x1dc>)
    9e5a:	401d      	ands	r5, r3
    9e5c:	2300      	movs	r3, #0
    9e5e:	2200      	movs	r2, #0
    9e60:	4699      	mov	r9, r3
    9e62:	e79c      	b.n	9d9e <__aeabi_dmul+0xce>
    9e64:	2400      	movs	r4, #0
    9e66:	2200      	movs	r2, #0
    9e68:	2001      	movs	r0, #1
    9e6a:	e76e      	b.n	9d4a <__aeabi_dmul+0x7a>
    9e6c:	4653      	mov	r3, sl
    9e6e:	2003      	movs	r0, #3
    9e70:	e76b      	b.n	9d4a <__aeabi_dmul+0x7a>
    9e72:	2300      	movs	r3, #0
    9e74:	469b      	mov	fp, r3
    9e76:	3301      	adds	r3, #1
    9e78:	2704      	movs	r7, #4
    9e7a:	2600      	movs	r6, #0
    9e7c:	9302      	str	r3, [sp, #8]
    9e7e:	e74c      	b.n	9d1a <__aeabi_dmul+0x4a>
    9e80:	2303      	movs	r3, #3
    9e82:	4681      	mov	r9, r0
    9e84:	270c      	movs	r7, #12
    9e86:	9302      	str	r3, [sp, #8]
    9e88:	e747      	b.n	9d1a <__aeabi_dmul+0x4a>
    9e8a:	2280      	movs	r2, #128	; 0x80
    9e8c:	2300      	movs	r3, #0
    9e8e:	2500      	movs	r5, #0
    9e90:	0312      	lsls	r2, r2, #12
    9e92:	4699      	mov	r9, r3
    9e94:	4c05      	ldr	r4, [pc, #20]	; (9eac <__aeabi_dmul+0x1dc>)
    9e96:	e782      	b.n	9d9e <__aeabi_dmul+0xce>
    9e98:	465c      	mov	r4, fp
    9e9a:	464b      	mov	r3, r9
    9e9c:	9802      	ldr	r0, [sp, #8]
    9e9e:	e76f      	b.n	9d80 <__aeabi_dmul+0xb0>
    9ea0:	465c      	mov	r4, fp
    9ea2:	464b      	mov	r3, r9
    9ea4:	9501      	str	r5, [sp, #4]
    9ea6:	9802      	ldr	r0, [sp, #8]
    9ea8:	e76a      	b.n	9d80 <__aeabi_dmul+0xb0>
    9eaa:	46c0      	nop			; (mov r8, r8)
    9eac:	000007ff 	.word	0x000007ff
    9eb0:	fffffc01 	.word	0xfffffc01
    9eb4:	00010030 	.word	0x00010030
    9eb8:	800fffff 	.word	0x800fffff
    9ebc:	fffffc0d 	.word	0xfffffc0d
    9ec0:	464a      	mov	r2, r9
    9ec2:	4649      	mov	r1, r9
    9ec4:	0c17      	lsrs	r7, r2, #16
    9ec6:	0c1a      	lsrs	r2, r3, #16
    9ec8:	041b      	lsls	r3, r3, #16
    9eca:	0c1b      	lsrs	r3, r3, #16
    9ecc:	0408      	lsls	r0, r1, #16
    9ece:	0019      	movs	r1, r3
    9ed0:	0c00      	lsrs	r0, r0, #16
    9ed2:	4341      	muls	r1, r0
    9ed4:	0015      	movs	r5, r2
    9ed6:	4688      	mov	r8, r1
    9ed8:	0019      	movs	r1, r3
    9eda:	437d      	muls	r5, r7
    9edc:	4379      	muls	r1, r7
    9ede:	9503      	str	r5, [sp, #12]
    9ee0:	4689      	mov	r9, r1
    9ee2:	0029      	movs	r1, r5
    9ee4:	0015      	movs	r5, r2
    9ee6:	4345      	muls	r5, r0
    9ee8:	444d      	add	r5, r9
    9eea:	9502      	str	r5, [sp, #8]
    9eec:	4645      	mov	r5, r8
    9eee:	0c2d      	lsrs	r5, r5, #16
    9ef0:	46aa      	mov	sl, r5
    9ef2:	9d02      	ldr	r5, [sp, #8]
    9ef4:	4455      	add	r5, sl
    9ef6:	45a9      	cmp	r9, r5
    9ef8:	d906      	bls.n	9f08 <__aeabi_dmul+0x238>
    9efa:	468a      	mov	sl, r1
    9efc:	2180      	movs	r1, #128	; 0x80
    9efe:	0249      	lsls	r1, r1, #9
    9f00:	4689      	mov	r9, r1
    9f02:	44ca      	add	sl, r9
    9f04:	4651      	mov	r1, sl
    9f06:	9103      	str	r1, [sp, #12]
    9f08:	0c29      	lsrs	r1, r5, #16
    9f0a:	9104      	str	r1, [sp, #16]
    9f0c:	4641      	mov	r1, r8
    9f0e:	0409      	lsls	r1, r1, #16
    9f10:	042d      	lsls	r5, r5, #16
    9f12:	0c09      	lsrs	r1, r1, #16
    9f14:	4688      	mov	r8, r1
    9f16:	0029      	movs	r1, r5
    9f18:	0c25      	lsrs	r5, r4, #16
    9f1a:	0424      	lsls	r4, r4, #16
    9f1c:	4441      	add	r1, r8
    9f1e:	0c24      	lsrs	r4, r4, #16
    9f20:	9105      	str	r1, [sp, #20]
    9f22:	0021      	movs	r1, r4
    9f24:	4341      	muls	r1, r0
    9f26:	4688      	mov	r8, r1
    9f28:	0021      	movs	r1, r4
    9f2a:	4379      	muls	r1, r7
    9f2c:	468a      	mov	sl, r1
    9f2e:	4368      	muls	r0, r5
    9f30:	4641      	mov	r1, r8
    9f32:	4450      	add	r0, sl
    9f34:	4681      	mov	r9, r0
    9f36:	0c08      	lsrs	r0, r1, #16
    9f38:	4448      	add	r0, r9
    9f3a:	436f      	muls	r7, r5
    9f3c:	4582      	cmp	sl, r0
    9f3e:	d903      	bls.n	9f48 <__aeabi_dmul+0x278>
    9f40:	2180      	movs	r1, #128	; 0x80
    9f42:	0249      	lsls	r1, r1, #9
    9f44:	4689      	mov	r9, r1
    9f46:	444f      	add	r7, r9
    9f48:	0c01      	lsrs	r1, r0, #16
    9f4a:	4689      	mov	r9, r1
    9f4c:	0039      	movs	r1, r7
    9f4e:	4449      	add	r1, r9
    9f50:	9102      	str	r1, [sp, #8]
    9f52:	4641      	mov	r1, r8
    9f54:	040f      	lsls	r7, r1, #16
    9f56:	9904      	ldr	r1, [sp, #16]
    9f58:	0c3f      	lsrs	r7, r7, #16
    9f5a:	4688      	mov	r8, r1
    9f5c:	0400      	lsls	r0, r0, #16
    9f5e:	19c0      	adds	r0, r0, r7
    9f60:	4480      	add	r8, r0
    9f62:	4641      	mov	r1, r8
    9f64:	9104      	str	r1, [sp, #16]
    9f66:	4659      	mov	r1, fp
    9f68:	0c0f      	lsrs	r7, r1, #16
    9f6a:	0409      	lsls	r1, r1, #16
    9f6c:	0c09      	lsrs	r1, r1, #16
    9f6e:	4688      	mov	r8, r1
    9f70:	4359      	muls	r1, r3
    9f72:	468a      	mov	sl, r1
    9f74:	0039      	movs	r1, r7
    9f76:	4351      	muls	r1, r2
    9f78:	4689      	mov	r9, r1
    9f7a:	4641      	mov	r1, r8
    9f7c:	434a      	muls	r2, r1
    9f7e:	4651      	mov	r1, sl
    9f80:	0c09      	lsrs	r1, r1, #16
    9f82:	468b      	mov	fp, r1
    9f84:	437b      	muls	r3, r7
    9f86:	18d2      	adds	r2, r2, r3
    9f88:	445a      	add	r2, fp
    9f8a:	4293      	cmp	r3, r2
    9f8c:	d903      	bls.n	9f96 <__aeabi_dmul+0x2c6>
    9f8e:	2380      	movs	r3, #128	; 0x80
    9f90:	025b      	lsls	r3, r3, #9
    9f92:	469b      	mov	fp, r3
    9f94:	44d9      	add	r9, fp
    9f96:	4651      	mov	r1, sl
    9f98:	0409      	lsls	r1, r1, #16
    9f9a:	0c09      	lsrs	r1, r1, #16
    9f9c:	468a      	mov	sl, r1
    9f9e:	4641      	mov	r1, r8
    9fa0:	4361      	muls	r1, r4
    9fa2:	437c      	muls	r4, r7
    9fa4:	0c13      	lsrs	r3, r2, #16
    9fa6:	0412      	lsls	r2, r2, #16
    9fa8:	444b      	add	r3, r9
    9faa:	4452      	add	r2, sl
    9fac:	46a1      	mov	r9, r4
    9fae:	468a      	mov	sl, r1
    9fb0:	003c      	movs	r4, r7
    9fb2:	4641      	mov	r1, r8
    9fb4:	436c      	muls	r4, r5
    9fb6:	434d      	muls	r5, r1
    9fb8:	4651      	mov	r1, sl
    9fba:	444d      	add	r5, r9
    9fbc:	0c0f      	lsrs	r7, r1, #16
    9fbe:	197d      	adds	r5, r7, r5
    9fc0:	45a9      	cmp	r9, r5
    9fc2:	d903      	bls.n	9fcc <__aeabi_dmul+0x2fc>
    9fc4:	2180      	movs	r1, #128	; 0x80
    9fc6:	0249      	lsls	r1, r1, #9
    9fc8:	4688      	mov	r8, r1
    9fca:	4444      	add	r4, r8
    9fcc:	9f04      	ldr	r7, [sp, #16]
    9fce:	9903      	ldr	r1, [sp, #12]
    9fd0:	46b8      	mov	r8, r7
    9fd2:	4441      	add	r1, r8
    9fd4:	468b      	mov	fp, r1
    9fd6:	4583      	cmp	fp, r0
    9fd8:	4180      	sbcs	r0, r0
    9fda:	4241      	negs	r1, r0
    9fdc:	4688      	mov	r8, r1
    9fde:	4651      	mov	r1, sl
    9fe0:	0408      	lsls	r0, r1, #16
    9fe2:	042f      	lsls	r7, r5, #16
    9fe4:	0c00      	lsrs	r0, r0, #16
    9fe6:	183f      	adds	r7, r7, r0
    9fe8:	4658      	mov	r0, fp
    9fea:	9902      	ldr	r1, [sp, #8]
    9fec:	1810      	adds	r0, r2, r0
    9fee:	4689      	mov	r9, r1
    9ff0:	4290      	cmp	r0, r2
    9ff2:	4192      	sbcs	r2, r2
    9ff4:	444f      	add	r7, r9
    9ff6:	46ba      	mov	sl, r7
    9ff8:	4252      	negs	r2, r2
    9ffa:	4699      	mov	r9, r3
    9ffc:	4693      	mov	fp, r2
    9ffe:	44c2      	add	sl, r8
    a000:	44d1      	add	r9, sl
    a002:	44cb      	add	fp, r9
    a004:	428f      	cmp	r7, r1
    a006:	41bf      	sbcs	r7, r7
    a008:	45c2      	cmp	sl, r8
    a00a:	4189      	sbcs	r1, r1
    a00c:	4599      	cmp	r9, r3
    a00e:	419b      	sbcs	r3, r3
    a010:	4593      	cmp	fp, r2
    a012:	4192      	sbcs	r2, r2
    a014:	427f      	negs	r7, r7
    a016:	4249      	negs	r1, r1
    a018:	0c2d      	lsrs	r5, r5, #16
    a01a:	4252      	negs	r2, r2
    a01c:	430f      	orrs	r7, r1
    a01e:	425b      	negs	r3, r3
    a020:	4313      	orrs	r3, r2
    a022:	197f      	adds	r7, r7, r5
    a024:	18ff      	adds	r7, r7, r3
    a026:	465b      	mov	r3, fp
    a028:	193c      	adds	r4, r7, r4
    a02a:	0ddb      	lsrs	r3, r3, #23
    a02c:	9a05      	ldr	r2, [sp, #20]
    a02e:	0264      	lsls	r4, r4, #9
    a030:	431c      	orrs	r4, r3
    a032:	0243      	lsls	r3, r0, #9
    a034:	4313      	orrs	r3, r2
    a036:	1e5d      	subs	r5, r3, #1
    a038:	41ab      	sbcs	r3, r5
    a03a:	465a      	mov	r2, fp
    a03c:	0dc0      	lsrs	r0, r0, #23
    a03e:	4303      	orrs	r3, r0
    a040:	0252      	lsls	r2, r2, #9
    a042:	4313      	orrs	r3, r2
    a044:	01e2      	lsls	r2, r4, #7
    a046:	d556      	bpl.n	a0f6 <__aeabi_dmul+0x426>
    a048:	2001      	movs	r0, #1
    a04a:	085a      	lsrs	r2, r3, #1
    a04c:	4003      	ands	r3, r0
    a04e:	4313      	orrs	r3, r2
    a050:	07e2      	lsls	r2, r4, #31
    a052:	4313      	orrs	r3, r2
    a054:	0864      	lsrs	r4, r4, #1
    a056:	485a      	ldr	r0, [pc, #360]	; (a1c0 <__aeabi_dmul+0x4f0>)
    a058:	4460      	add	r0, ip
    a05a:	2800      	cmp	r0, #0
    a05c:	dd4d      	ble.n	a0fa <__aeabi_dmul+0x42a>
    a05e:	075a      	lsls	r2, r3, #29
    a060:	d009      	beq.n	a076 <__aeabi_dmul+0x3a6>
    a062:	220f      	movs	r2, #15
    a064:	401a      	ands	r2, r3
    a066:	2a04      	cmp	r2, #4
    a068:	d005      	beq.n	a076 <__aeabi_dmul+0x3a6>
    a06a:	1d1a      	adds	r2, r3, #4
    a06c:	429a      	cmp	r2, r3
    a06e:	419b      	sbcs	r3, r3
    a070:	425b      	negs	r3, r3
    a072:	18e4      	adds	r4, r4, r3
    a074:	0013      	movs	r3, r2
    a076:	01e2      	lsls	r2, r4, #7
    a078:	d504      	bpl.n	a084 <__aeabi_dmul+0x3b4>
    a07a:	2080      	movs	r0, #128	; 0x80
    a07c:	4a51      	ldr	r2, [pc, #324]	; (a1c4 <__aeabi_dmul+0x4f4>)
    a07e:	00c0      	lsls	r0, r0, #3
    a080:	4014      	ands	r4, r2
    a082:	4460      	add	r0, ip
    a084:	4a50      	ldr	r2, [pc, #320]	; (a1c8 <__aeabi_dmul+0x4f8>)
    a086:	4290      	cmp	r0, r2
    a088:	dd00      	ble.n	a08c <__aeabi_dmul+0x3bc>
    a08a:	e6e3      	b.n	9e54 <__aeabi_dmul+0x184>
    a08c:	2501      	movs	r5, #1
    a08e:	08db      	lsrs	r3, r3, #3
    a090:	0762      	lsls	r2, r4, #29
    a092:	431a      	orrs	r2, r3
    a094:	0264      	lsls	r4, r4, #9
    a096:	9b01      	ldr	r3, [sp, #4]
    a098:	4691      	mov	r9, r2
    a09a:	0b22      	lsrs	r2, r4, #12
    a09c:	0544      	lsls	r4, r0, #21
    a09e:	0d64      	lsrs	r4, r4, #21
    a0a0:	401d      	ands	r5, r3
    a0a2:	e67c      	b.n	9d9e <__aeabi_dmul+0xce>
    a0a4:	2280      	movs	r2, #128	; 0x80
    a0a6:	4659      	mov	r1, fp
    a0a8:	0312      	lsls	r2, r2, #12
    a0aa:	4211      	tst	r1, r2
    a0ac:	d008      	beq.n	a0c0 <__aeabi_dmul+0x3f0>
    a0ae:	4214      	tst	r4, r2
    a0b0:	d106      	bne.n	a0c0 <__aeabi_dmul+0x3f0>
    a0b2:	4322      	orrs	r2, r4
    a0b4:	0312      	lsls	r2, r2, #12
    a0b6:	0b12      	lsrs	r2, r2, #12
    a0b8:	4645      	mov	r5, r8
    a0ba:	4699      	mov	r9, r3
    a0bc:	4c43      	ldr	r4, [pc, #268]	; (a1cc <__aeabi_dmul+0x4fc>)
    a0be:	e66e      	b.n	9d9e <__aeabi_dmul+0xce>
    a0c0:	465b      	mov	r3, fp
    a0c2:	431a      	orrs	r2, r3
    a0c4:	0312      	lsls	r2, r2, #12
    a0c6:	0b12      	lsrs	r2, r2, #12
    a0c8:	4c40      	ldr	r4, [pc, #256]	; (a1cc <__aeabi_dmul+0x4fc>)
    a0ca:	e668      	b.n	9d9e <__aeabi_dmul+0xce>
    a0cc:	0003      	movs	r3, r0
    a0ce:	4654      	mov	r4, sl
    a0d0:	3b28      	subs	r3, #40	; 0x28
    a0d2:	409c      	lsls	r4, r3
    a0d4:	2300      	movs	r3, #0
    a0d6:	e6b9      	b.n	9e4c <__aeabi_dmul+0x17c>
    a0d8:	f000 fd3a 	bl	ab50 <__clzsi2>
    a0dc:	3020      	adds	r0, #32
    a0de:	e6a6      	b.n	9e2e <__aeabi_dmul+0x15e>
    a0e0:	0003      	movs	r3, r0
    a0e2:	3b28      	subs	r3, #40	; 0x28
    a0e4:	409f      	lsls	r7, r3
    a0e6:	2300      	movs	r3, #0
    a0e8:	46bb      	mov	fp, r7
    a0ea:	4699      	mov	r9, r3
    a0ec:	e68a      	b.n	9e04 <__aeabi_dmul+0x134>
    a0ee:	f000 fd2f 	bl	ab50 <__clzsi2>
    a0f2:	3020      	adds	r0, #32
    a0f4:	e674      	b.n	9de0 <__aeabi_dmul+0x110>
    a0f6:	46b4      	mov	ip, r6
    a0f8:	e7ad      	b.n	a056 <__aeabi_dmul+0x386>
    a0fa:	2501      	movs	r5, #1
    a0fc:	1a2a      	subs	r2, r5, r0
    a0fe:	2a38      	cmp	r2, #56	; 0x38
    a100:	dd06      	ble.n	a110 <__aeabi_dmul+0x440>
    a102:	9b01      	ldr	r3, [sp, #4]
    a104:	2400      	movs	r4, #0
    a106:	401d      	ands	r5, r3
    a108:	2300      	movs	r3, #0
    a10a:	2200      	movs	r2, #0
    a10c:	4699      	mov	r9, r3
    a10e:	e646      	b.n	9d9e <__aeabi_dmul+0xce>
    a110:	2a1f      	cmp	r2, #31
    a112:	dc21      	bgt.n	a158 <__aeabi_dmul+0x488>
    a114:	2520      	movs	r5, #32
    a116:	0020      	movs	r0, r4
    a118:	1aad      	subs	r5, r5, r2
    a11a:	001e      	movs	r6, r3
    a11c:	40ab      	lsls	r3, r5
    a11e:	40a8      	lsls	r0, r5
    a120:	40d6      	lsrs	r6, r2
    a122:	1e5d      	subs	r5, r3, #1
    a124:	41ab      	sbcs	r3, r5
    a126:	4330      	orrs	r0, r6
    a128:	4318      	orrs	r0, r3
    a12a:	40d4      	lsrs	r4, r2
    a12c:	0743      	lsls	r3, r0, #29
    a12e:	d009      	beq.n	a144 <__aeabi_dmul+0x474>
    a130:	230f      	movs	r3, #15
    a132:	4003      	ands	r3, r0
    a134:	2b04      	cmp	r3, #4
    a136:	d005      	beq.n	a144 <__aeabi_dmul+0x474>
    a138:	0003      	movs	r3, r0
    a13a:	1d18      	adds	r0, r3, #4
    a13c:	4298      	cmp	r0, r3
    a13e:	419b      	sbcs	r3, r3
    a140:	425b      	negs	r3, r3
    a142:	18e4      	adds	r4, r4, r3
    a144:	0223      	lsls	r3, r4, #8
    a146:	d521      	bpl.n	a18c <__aeabi_dmul+0x4bc>
    a148:	2501      	movs	r5, #1
    a14a:	9b01      	ldr	r3, [sp, #4]
    a14c:	2401      	movs	r4, #1
    a14e:	401d      	ands	r5, r3
    a150:	2300      	movs	r3, #0
    a152:	2200      	movs	r2, #0
    a154:	4699      	mov	r9, r3
    a156:	e622      	b.n	9d9e <__aeabi_dmul+0xce>
    a158:	251f      	movs	r5, #31
    a15a:	0021      	movs	r1, r4
    a15c:	426d      	negs	r5, r5
    a15e:	1a28      	subs	r0, r5, r0
    a160:	40c1      	lsrs	r1, r0
    a162:	0008      	movs	r0, r1
    a164:	2a20      	cmp	r2, #32
    a166:	d01d      	beq.n	a1a4 <__aeabi_dmul+0x4d4>
    a168:	355f      	adds	r5, #95	; 0x5f
    a16a:	1aaa      	subs	r2, r5, r2
    a16c:	4094      	lsls	r4, r2
    a16e:	4323      	orrs	r3, r4
    a170:	1e5c      	subs	r4, r3, #1
    a172:	41a3      	sbcs	r3, r4
    a174:	2507      	movs	r5, #7
    a176:	4303      	orrs	r3, r0
    a178:	401d      	ands	r5, r3
    a17a:	2200      	movs	r2, #0
    a17c:	2d00      	cmp	r5, #0
    a17e:	d009      	beq.n	a194 <__aeabi_dmul+0x4c4>
    a180:	220f      	movs	r2, #15
    a182:	2400      	movs	r4, #0
    a184:	401a      	ands	r2, r3
    a186:	0018      	movs	r0, r3
    a188:	2a04      	cmp	r2, #4
    a18a:	d1d6      	bne.n	a13a <__aeabi_dmul+0x46a>
    a18c:	0003      	movs	r3, r0
    a18e:	0765      	lsls	r5, r4, #29
    a190:	0264      	lsls	r4, r4, #9
    a192:	0b22      	lsrs	r2, r4, #12
    a194:	08db      	lsrs	r3, r3, #3
    a196:	432b      	orrs	r3, r5
    a198:	2501      	movs	r5, #1
    a19a:	4699      	mov	r9, r3
    a19c:	9b01      	ldr	r3, [sp, #4]
    a19e:	2400      	movs	r4, #0
    a1a0:	401d      	ands	r5, r3
    a1a2:	e5fc      	b.n	9d9e <__aeabi_dmul+0xce>
    a1a4:	2400      	movs	r4, #0
    a1a6:	e7e2      	b.n	a16e <__aeabi_dmul+0x49e>
    a1a8:	2280      	movs	r2, #128	; 0x80
    a1aa:	2501      	movs	r5, #1
    a1ac:	0312      	lsls	r2, r2, #12
    a1ae:	4322      	orrs	r2, r4
    a1b0:	9901      	ldr	r1, [sp, #4]
    a1b2:	0312      	lsls	r2, r2, #12
    a1b4:	0b12      	lsrs	r2, r2, #12
    a1b6:	400d      	ands	r5, r1
    a1b8:	4699      	mov	r9, r3
    a1ba:	4c04      	ldr	r4, [pc, #16]	; (a1cc <__aeabi_dmul+0x4fc>)
    a1bc:	e5ef      	b.n	9d9e <__aeabi_dmul+0xce>
    a1be:	46c0      	nop			; (mov r8, r8)
    a1c0:	000003ff 	.word	0x000003ff
    a1c4:	feffffff 	.word	0xfeffffff
    a1c8:	000007fe 	.word	0x000007fe
    a1cc:	000007ff 	.word	0x000007ff

0000a1d0 <__aeabi_dsub>:
    a1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1d2:	4646      	mov	r6, r8
    a1d4:	46d6      	mov	lr, sl
    a1d6:	464f      	mov	r7, r9
    a1d8:	030c      	lsls	r4, r1, #12
    a1da:	b5c0      	push	{r6, r7, lr}
    a1dc:	0fcd      	lsrs	r5, r1, #31
    a1de:	004e      	lsls	r6, r1, #1
    a1e0:	0a61      	lsrs	r1, r4, #9
    a1e2:	0f44      	lsrs	r4, r0, #29
    a1e4:	430c      	orrs	r4, r1
    a1e6:	00c1      	lsls	r1, r0, #3
    a1e8:	0058      	lsls	r0, r3, #1
    a1ea:	0d40      	lsrs	r0, r0, #21
    a1ec:	4684      	mov	ip, r0
    a1ee:	468a      	mov	sl, r1
    a1f0:	000f      	movs	r7, r1
    a1f2:	0319      	lsls	r1, r3, #12
    a1f4:	0f50      	lsrs	r0, r2, #29
    a1f6:	0a49      	lsrs	r1, r1, #9
    a1f8:	4301      	orrs	r1, r0
    a1fa:	48c6      	ldr	r0, [pc, #792]	; (a514 <__aeabi_dsub+0x344>)
    a1fc:	0d76      	lsrs	r6, r6, #21
    a1fe:	46a8      	mov	r8, r5
    a200:	0fdb      	lsrs	r3, r3, #31
    a202:	00d2      	lsls	r2, r2, #3
    a204:	4584      	cmp	ip, r0
    a206:	d100      	bne.n	a20a <__aeabi_dsub+0x3a>
    a208:	e0d8      	b.n	a3bc <__aeabi_dsub+0x1ec>
    a20a:	2001      	movs	r0, #1
    a20c:	4043      	eors	r3, r0
    a20e:	42ab      	cmp	r3, r5
    a210:	d100      	bne.n	a214 <__aeabi_dsub+0x44>
    a212:	e0a6      	b.n	a362 <__aeabi_dsub+0x192>
    a214:	4660      	mov	r0, ip
    a216:	1a35      	subs	r5, r6, r0
    a218:	2d00      	cmp	r5, #0
    a21a:	dc00      	bgt.n	a21e <__aeabi_dsub+0x4e>
    a21c:	e105      	b.n	a42a <__aeabi_dsub+0x25a>
    a21e:	2800      	cmp	r0, #0
    a220:	d110      	bne.n	a244 <__aeabi_dsub+0x74>
    a222:	000b      	movs	r3, r1
    a224:	4313      	orrs	r3, r2
    a226:	d100      	bne.n	a22a <__aeabi_dsub+0x5a>
    a228:	e0d7      	b.n	a3da <__aeabi_dsub+0x20a>
    a22a:	1e6b      	subs	r3, r5, #1
    a22c:	2b00      	cmp	r3, #0
    a22e:	d000      	beq.n	a232 <__aeabi_dsub+0x62>
    a230:	e14b      	b.n	a4ca <__aeabi_dsub+0x2fa>
    a232:	4653      	mov	r3, sl
    a234:	1a9f      	subs	r7, r3, r2
    a236:	45ba      	cmp	sl, r7
    a238:	4180      	sbcs	r0, r0
    a23a:	1a64      	subs	r4, r4, r1
    a23c:	4240      	negs	r0, r0
    a23e:	1a24      	subs	r4, r4, r0
    a240:	2601      	movs	r6, #1
    a242:	e01e      	b.n	a282 <__aeabi_dsub+0xb2>
    a244:	4bb3      	ldr	r3, [pc, #716]	; (a514 <__aeabi_dsub+0x344>)
    a246:	429e      	cmp	r6, r3
    a248:	d048      	beq.n	a2dc <__aeabi_dsub+0x10c>
    a24a:	2380      	movs	r3, #128	; 0x80
    a24c:	041b      	lsls	r3, r3, #16
    a24e:	4319      	orrs	r1, r3
    a250:	2d38      	cmp	r5, #56	; 0x38
    a252:	dd00      	ble.n	a256 <__aeabi_dsub+0x86>
    a254:	e119      	b.n	a48a <__aeabi_dsub+0x2ba>
    a256:	2d1f      	cmp	r5, #31
    a258:	dd00      	ble.n	a25c <__aeabi_dsub+0x8c>
    a25a:	e14c      	b.n	a4f6 <__aeabi_dsub+0x326>
    a25c:	2320      	movs	r3, #32
    a25e:	000f      	movs	r7, r1
    a260:	1b5b      	subs	r3, r3, r5
    a262:	0010      	movs	r0, r2
    a264:	409a      	lsls	r2, r3
    a266:	409f      	lsls	r7, r3
    a268:	40e8      	lsrs	r0, r5
    a26a:	1e53      	subs	r3, r2, #1
    a26c:	419a      	sbcs	r2, r3
    a26e:	40e9      	lsrs	r1, r5
    a270:	4307      	orrs	r7, r0
    a272:	4317      	orrs	r7, r2
    a274:	4653      	mov	r3, sl
    a276:	1bdf      	subs	r7, r3, r7
    a278:	1a61      	subs	r1, r4, r1
    a27a:	45ba      	cmp	sl, r7
    a27c:	41a4      	sbcs	r4, r4
    a27e:	4264      	negs	r4, r4
    a280:	1b0c      	subs	r4, r1, r4
    a282:	0223      	lsls	r3, r4, #8
    a284:	d400      	bmi.n	a288 <__aeabi_dsub+0xb8>
    a286:	e0c5      	b.n	a414 <__aeabi_dsub+0x244>
    a288:	0264      	lsls	r4, r4, #9
    a28a:	0a65      	lsrs	r5, r4, #9
    a28c:	2d00      	cmp	r5, #0
    a28e:	d100      	bne.n	a292 <__aeabi_dsub+0xc2>
    a290:	e0f6      	b.n	a480 <__aeabi_dsub+0x2b0>
    a292:	0028      	movs	r0, r5
    a294:	f000 fc5c 	bl	ab50 <__clzsi2>
    a298:	0003      	movs	r3, r0
    a29a:	3b08      	subs	r3, #8
    a29c:	2b1f      	cmp	r3, #31
    a29e:	dd00      	ble.n	a2a2 <__aeabi_dsub+0xd2>
    a2a0:	e0e9      	b.n	a476 <__aeabi_dsub+0x2a6>
    a2a2:	2220      	movs	r2, #32
    a2a4:	003c      	movs	r4, r7
    a2a6:	1ad2      	subs	r2, r2, r3
    a2a8:	409d      	lsls	r5, r3
    a2aa:	40d4      	lsrs	r4, r2
    a2ac:	409f      	lsls	r7, r3
    a2ae:	4325      	orrs	r5, r4
    a2b0:	429e      	cmp	r6, r3
    a2b2:	dd00      	ble.n	a2b6 <__aeabi_dsub+0xe6>
    a2b4:	e0db      	b.n	a46e <__aeabi_dsub+0x29e>
    a2b6:	1b9e      	subs	r6, r3, r6
    a2b8:	1c73      	adds	r3, r6, #1
    a2ba:	2b1f      	cmp	r3, #31
    a2bc:	dd00      	ble.n	a2c0 <__aeabi_dsub+0xf0>
    a2be:	e10a      	b.n	a4d6 <__aeabi_dsub+0x306>
    a2c0:	2220      	movs	r2, #32
    a2c2:	0038      	movs	r0, r7
    a2c4:	1ad2      	subs	r2, r2, r3
    a2c6:	0029      	movs	r1, r5
    a2c8:	4097      	lsls	r7, r2
    a2ca:	002c      	movs	r4, r5
    a2cc:	4091      	lsls	r1, r2
    a2ce:	40d8      	lsrs	r0, r3
    a2d0:	1e7a      	subs	r2, r7, #1
    a2d2:	4197      	sbcs	r7, r2
    a2d4:	40dc      	lsrs	r4, r3
    a2d6:	2600      	movs	r6, #0
    a2d8:	4301      	orrs	r1, r0
    a2da:	430f      	orrs	r7, r1
    a2dc:	077b      	lsls	r3, r7, #29
    a2de:	d009      	beq.n	a2f4 <__aeabi_dsub+0x124>
    a2e0:	230f      	movs	r3, #15
    a2e2:	403b      	ands	r3, r7
    a2e4:	2b04      	cmp	r3, #4
    a2e6:	d005      	beq.n	a2f4 <__aeabi_dsub+0x124>
    a2e8:	1d3b      	adds	r3, r7, #4
    a2ea:	42bb      	cmp	r3, r7
    a2ec:	41bf      	sbcs	r7, r7
    a2ee:	427f      	negs	r7, r7
    a2f0:	19e4      	adds	r4, r4, r7
    a2f2:	001f      	movs	r7, r3
    a2f4:	0223      	lsls	r3, r4, #8
    a2f6:	d525      	bpl.n	a344 <__aeabi_dsub+0x174>
    a2f8:	4b86      	ldr	r3, [pc, #536]	; (a514 <__aeabi_dsub+0x344>)
    a2fa:	3601      	adds	r6, #1
    a2fc:	429e      	cmp	r6, r3
    a2fe:	d100      	bne.n	a302 <__aeabi_dsub+0x132>
    a300:	e0af      	b.n	a462 <__aeabi_dsub+0x292>
    a302:	4b85      	ldr	r3, [pc, #532]	; (a518 <__aeabi_dsub+0x348>)
    a304:	2501      	movs	r5, #1
    a306:	401c      	ands	r4, r3
    a308:	4643      	mov	r3, r8
    a30a:	0762      	lsls	r2, r4, #29
    a30c:	08ff      	lsrs	r7, r7, #3
    a30e:	0264      	lsls	r4, r4, #9
    a310:	0576      	lsls	r6, r6, #21
    a312:	4317      	orrs	r7, r2
    a314:	0b24      	lsrs	r4, r4, #12
    a316:	0d76      	lsrs	r6, r6, #21
    a318:	401d      	ands	r5, r3
    a31a:	2100      	movs	r1, #0
    a31c:	0324      	lsls	r4, r4, #12
    a31e:	0b23      	lsrs	r3, r4, #12
    a320:	0d0c      	lsrs	r4, r1, #20
    a322:	4a7e      	ldr	r2, [pc, #504]	; (a51c <__aeabi_dsub+0x34c>)
    a324:	0524      	lsls	r4, r4, #20
    a326:	431c      	orrs	r4, r3
    a328:	4014      	ands	r4, r2
    a32a:	0533      	lsls	r3, r6, #20
    a32c:	4323      	orrs	r3, r4
    a32e:	005b      	lsls	r3, r3, #1
    a330:	07ed      	lsls	r5, r5, #31
    a332:	085b      	lsrs	r3, r3, #1
    a334:	432b      	orrs	r3, r5
    a336:	0038      	movs	r0, r7
    a338:	0019      	movs	r1, r3
    a33a:	bc1c      	pop	{r2, r3, r4}
    a33c:	4690      	mov	r8, r2
    a33e:	4699      	mov	r9, r3
    a340:	46a2      	mov	sl, r4
    a342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a344:	2501      	movs	r5, #1
    a346:	4643      	mov	r3, r8
    a348:	0762      	lsls	r2, r4, #29
    a34a:	08ff      	lsrs	r7, r7, #3
    a34c:	4317      	orrs	r7, r2
    a34e:	08e4      	lsrs	r4, r4, #3
    a350:	401d      	ands	r5, r3
    a352:	4b70      	ldr	r3, [pc, #448]	; (a514 <__aeabi_dsub+0x344>)
    a354:	429e      	cmp	r6, r3
    a356:	d036      	beq.n	a3c6 <__aeabi_dsub+0x1f6>
    a358:	0324      	lsls	r4, r4, #12
    a35a:	0576      	lsls	r6, r6, #21
    a35c:	0b24      	lsrs	r4, r4, #12
    a35e:	0d76      	lsrs	r6, r6, #21
    a360:	e7db      	b.n	a31a <__aeabi_dsub+0x14a>
    a362:	4663      	mov	r3, ip
    a364:	1af3      	subs	r3, r6, r3
    a366:	2b00      	cmp	r3, #0
    a368:	dc00      	bgt.n	a36c <__aeabi_dsub+0x19c>
    a36a:	e094      	b.n	a496 <__aeabi_dsub+0x2c6>
    a36c:	4660      	mov	r0, ip
    a36e:	2800      	cmp	r0, #0
    a370:	d035      	beq.n	a3de <__aeabi_dsub+0x20e>
    a372:	4868      	ldr	r0, [pc, #416]	; (a514 <__aeabi_dsub+0x344>)
    a374:	4286      	cmp	r6, r0
    a376:	d0b1      	beq.n	a2dc <__aeabi_dsub+0x10c>
    a378:	2780      	movs	r7, #128	; 0x80
    a37a:	043f      	lsls	r7, r7, #16
    a37c:	4339      	orrs	r1, r7
    a37e:	2b38      	cmp	r3, #56	; 0x38
    a380:	dc00      	bgt.n	a384 <__aeabi_dsub+0x1b4>
    a382:	e0fd      	b.n	a580 <__aeabi_dsub+0x3b0>
    a384:	430a      	orrs	r2, r1
    a386:	0017      	movs	r7, r2
    a388:	2100      	movs	r1, #0
    a38a:	1e7a      	subs	r2, r7, #1
    a38c:	4197      	sbcs	r7, r2
    a38e:	4457      	add	r7, sl
    a390:	4557      	cmp	r7, sl
    a392:	4180      	sbcs	r0, r0
    a394:	1909      	adds	r1, r1, r4
    a396:	4244      	negs	r4, r0
    a398:	190c      	adds	r4, r1, r4
    a39a:	0223      	lsls	r3, r4, #8
    a39c:	d53a      	bpl.n	a414 <__aeabi_dsub+0x244>
    a39e:	4b5d      	ldr	r3, [pc, #372]	; (a514 <__aeabi_dsub+0x344>)
    a3a0:	3601      	adds	r6, #1
    a3a2:	429e      	cmp	r6, r3
    a3a4:	d100      	bne.n	a3a8 <__aeabi_dsub+0x1d8>
    a3a6:	e14b      	b.n	a640 <__aeabi_dsub+0x470>
    a3a8:	2201      	movs	r2, #1
    a3aa:	4b5b      	ldr	r3, [pc, #364]	; (a518 <__aeabi_dsub+0x348>)
    a3ac:	401c      	ands	r4, r3
    a3ae:	087b      	lsrs	r3, r7, #1
    a3b0:	4017      	ands	r7, r2
    a3b2:	431f      	orrs	r7, r3
    a3b4:	07e2      	lsls	r2, r4, #31
    a3b6:	4317      	orrs	r7, r2
    a3b8:	0864      	lsrs	r4, r4, #1
    a3ba:	e78f      	b.n	a2dc <__aeabi_dsub+0x10c>
    a3bc:	0008      	movs	r0, r1
    a3be:	4310      	orrs	r0, r2
    a3c0:	d000      	beq.n	a3c4 <__aeabi_dsub+0x1f4>
    a3c2:	e724      	b.n	a20e <__aeabi_dsub+0x3e>
    a3c4:	e721      	b.n	a20a <__aeabi_dsub+0x3a>
    a3c6:	0023      	movs	r3, r4
    a3c8:	433b      	orrs	r3, r7
    a3ca:	d100      	bne.n	a3ce <__aeabi_dsub+0x1fe>
    a3cc:	e1b9      	b.n	a742 <__aeabi_dsub+0x572>
    a3ce:	2280      	movs	r2, #128	; 0x80
    a3d0:	0312      	lsls	r2, r2, #12
    a3d2:	4314      	orrs	r4, r2
    a3d4:	0324      	lsls	r4, r4, #12
    a3d6:	0b24      	lsrs	r4, r4, #12
    a3d8:	e79f      	b.n	a31a <__aeabi_dsub+0x14a>
    a3da:	002e      	movs	r6, r5
    a3dc:	e77e      	b.n	a2dc <__aeabi_dsub+0x10c>
    a3de:	0008      	movs	r0, r1
    a3e0:	4310      	orrs	r0, r2
    a3e2:	d100      	bne.n	a3e6 <__aeabi_dsub+0x216>
    a3e4:	e0ca      	b.n	a57c <__aeabi_dsub+0x3ac>
    a3e6:	1e58      	subs	r0, r3, #1
    a3e8:	4684      	mov	ip, r0
    a3ea:	2800      	cmp	r0, #0
    a3ec:	d000      	beq.n	a3f0 <__aeabi_dsub+0x220>
    a3ee:	e0e7      	b.n	a5c0 <__aeabi_dsub+0x3f0>
    a3f0:	4452      	add	r2, sl
    a3f2:	4552      	cmp	r2, sl
    a3f4:	4180      	sbcs	r0, r0
    a3f6:	1864      	adds	r4, r4, r1
    a3f8:	4240      	negs	r0, r0
    a3fa:	1824      	adds	r4, r4, r0
    a3fc:	0017      	movs	r7, r2
    a3fe:	2601      	movs	r6, #1
    a400:	0223      	lsls	r3, r4, #8
    a402:	d507      	bpl.n	a414 <__aeabi_dsub+0x244>
    a404:	2602      	movs	r6, #2
    a406:	e7cf      	b.n	a3a8 <__aeabi_dsub+0x1d8>
    a408:	4664      	mov	r4, ip
    a40a:	432c      	orrs	r4, r5
    a40c:	d100      	bne.n	a410 <__aeabi_dsub+0x240>
    a40e:	e1b3      	b.n	a778 <__aeabi_dsub+0x5a8>
    a410:	002c      	movs	r4, r5
    a412:	4667      	mov	r7, ip
    a414:	077b      	lsls	r3, r7, #29
    a416:	d000      	beq.n	a41a <__aeabi_dsub+0x24a>
    a418:	e762      	b.n	a2e0 <__aeabi_dsub+0x110>
    a41a:	0763      	lsls	r3, r4, #29
    a41c:	08ff      	lsrs	r7, r7, #3
    a41e:	431f      	orrs	r7, r3
    a420:	2501      	movs	r5, #1
    a422:	4643      	mov	r3, r8
    a424:	08e4      	lsrs	r4, r4, #3
    a426:	401d      	ands	r5, r3
    a428:	e793      	b.n	a352 <__aeabi_dsub+0x182>
    a42a:	2d00      	cmp	r5, #0
    a42c:	d178      	bne.n	a520 <__aeabi_dsub+0x350>
    a42e:	1c75      	adds	r5, r6, #1
    a430:	056d      	lsls	r5, r5, #21
    a432:	0d6d      	lsrs	r5, r5, #21
    a434:	2d01      	cmp	r5, #1
    a436:	dc00      	bgt.n	a43a <__aeabi_dsub+0x26a>
    a438:	e0f2      	b.n	a620 <__aeabi_dsub+0x450>
    a43a:	4650      	mov	r0, sl
    a43c:	1a80      	subs	r0, r0, r2
    a43e:	4582      	cmp	sl, r0
    a440:	41bf      	sbcs	r7, r7
    a442:	1a65      	subs	r5, r4, r1
    a444:	427f      	negs	r7, r7
    a446:	1bed      	subs	r5, r5, r7
    a448:	4684      	mov	ip, r0
    a44a:	0228      	lsls	r0, r5, #8
    a44c:	d400      	bmi.n	a450 <__aeabi_dsub+0x280>
    a44e:	e08c      	b.n	a56a <__aeabi_dsub+0x39a>
    a450:	4650      	mov	r0, sl
    a452:	1a17      	subs	r7, r2, r0
    a454:	42ba      	cmp	r2, r7
    a456:	4192      	sbcs	r2, r2
    a458:	1b0c      	subs	r4, r1, r4
    a45a:	4255      	negs	r5, r2
    a45c:	1b65      	subs	r5, r4, r5
    a45e:	4698      	mov	r8, r3
    a460:	e714      	b.n	a28c <__aeabi_dsub+0xbc>
    a462:	2501      	movs	r5, #1
    a464:	4643      	mov	r3, r8
    a466:	2400      	movs	r4, #0
    a468:	401d      	ands	r5, r3
    a46a:	2700      	movs	r7, #0
    a46c:	e755      	b.n	a31a <__aeabi_dsub+0x14a>
    a46e:	4c2a      	ldr	r4, [pc, #168]	; (a518 <__aeabi_dsub+0x348>)
    a470:	1af6      	subs	r6, r6, r3
    a472:	402c      	ands	r4, r5
    a474:	e732      	b.n	a2dc <__aeabi_dsub+0x10c>
    a476:	003d      	movs	r5, r7
    a478:	3828      	subs	r0, #40	; 0x28
    a47a:	4085      	lsls	r5, r0
    a47c:	2700      	movs	r7, #0
    a47e:	e717      	b.n	a2b0 <__aeabi_dsub+0xe0>
    a480:	0038      	movs	r0, r7
    a482:	f000 fb65 	bl	ab50 <__clzsi2>
    a486:	3020      	adds	r0, #32
    a488:	e706      	b.n	a298 <__aeabi_dsub+0xc8>
    a48a:	430a      	orrs	r2, r1
    a48c:	0017      	movs	r7, r2
    a48e:	2100      	movs	r1, #0
    a490:	1e7a      	subs	r2, r7, #1
    a492:	4197      	sbcs	r7, r2
    a494:	e6ee      	b.n	a274 <__aeabi_dsub+0xa4>
    a496:	2b00      	cmp	r3, #0
    a498:	d000      	beq.n	a49c <__aeabi_dsub+0x2cc>
    a49a:	e0e5      	b.n	a668 <__aeabi_dsub+0x498>
    a49c:	1c73      	adds	r3, r6, #1
    a49e:	469c      	mov	ip, r3
    a4a0:	055b      	lsls	r3, r3, #21
    a4a2:	0d5b      	lsrs	r3, r3, #21
    a4a4:	2b01      	cmp	r3, #1
    a4a6:	dc00      	bgt.n	a4aa <__aeabi_dsub+0x2da>
    a4a8:	e09f      	b.n	a5ea <__aeabi_dsub+0x41a>
    a4aa:	4b1a      	ldr	r3, [pc, #104]	; (a514 <__aeabi_dsub+0x344>)
    a4ac:	459c      	cmp	ip, r3
    a4ae:	d100      	bne.n	a4b2 <__aeabi_dsub+0x2e2>
    a4b0:	e0c5      	b.n	a63e <__aeabi_dsub+0x46e>
    a4b2:	4452      	add	r2, sl
    a4b4:	4552      	cmp	r2, sl
    a4b6:	4180      	sbcs	r0, r0
    a4b8:	1864      	adds	r4, r4, r1
    a4ba:	4240      	negs	r0, r0
    a4bc:	1824      	adds	r4, r4, r0
    a4be:	07e7      	lsls	r7, r4, #31
    a4c0:	0852      	lsrs	r2, r2, #1
    a4c2:	4317      	orrs	r7, r2
    a4c4:	0864      	lsrs	r4, r4, #1
    a4c6:	4666      	mov	r6, ip
    a4c8:	e708      	b.n	a2dc <__aeabi_dsub+0x10c>
    a4ca:	4812      	ldr	r0, [pc, #72]	; (a514 <__aeabi_dsub+0x344>)
    a4cc:	4285      	cmp	r5, r0
    a4ce:	d100      	bne.n	a4d2 <__aeabi_dsub+0x302>
    a4d0:	e085      	b.n	a5de <__aeabi_dsub+0x40e>
    a4d2:	001d      	movs	r5, r3
    a4d4:	e6bc      	b.n	a250 <__aeabi_dsub+0x80>
    a4d6:	0029      	movs	r1, r5
    a4d8:	3e1f      	subs	r6, #31
    a4da:	40f1      	lsrs	r1, r6
    a4dc:	2b20      	cmp	r3, #32
    a4de:	d100      	bne.n	a4e2 <__aeabi_dsub+0x312>
    a4e0:	e07f      	b.n	a5e2 <__aeabi_dsub+0x412>
    a4e2:	2240      	movs	r2, #64	; 0x40
    a4e4:	1ad3      	subs	r3, r2, r3
    a4e6:	409d      	lsls	r5, r3
    a4e8:	432f      	orrs	r7, r5
    a4ea:	1e7d      	subs	r5, r7, #1
    a4ec:	41af      	sbcs	r7, r5
    a4ee:	2400      	movs	r4, #0
    a4f0:	430f      	orrs	r7, r1
    a4f2:	2600      	movs	r6, #0
    a4f4:	e78e      	b.n	a414 <__aeabi_dsub+0x244>
    a4f6:	002b      	movs	r3, r5
    a4f8:	000f      	movs	r7, r1
    a4fa:	3b20      	subs	r3, #32
    a4fc:	40df      	lsrs	r7, r3
    a4fe:	2d20      	cmp	r5, #32
    a500:	d071      	beq.n	a5e6 <__aeabi_dsub+0x416>
    a502:	2340      	movs	r3, #64	; 0x40
    a504:	1b5d      	subs	r5, r3, r5
    a506:	40a9      	lsls	r1, r5
    a508:	430a      	orrs	r2, r1
    a50a:	1e51      	subs	r1, r2, #1
    a50c:	418a      	sbcs	r2, r1
    a50e:	2100      	movs	r1, #0
    a510:	4317      	orrs	r7, r2
    a512:	e6af      	b.n	a274 <__aeabi_dsub+0xa4>
    a514:	000007ff 	.word	0x000007ff
    a518:	ff7fffff 	.word	0xff7fffff
    a51c:	800fffff 	.word	0x800fffff
    a520:	2e00      	cmp	r6, #0
    a522:	d03e      	beq.n	a5a2 <__aeabi_dsub+0x3d2>
    a524:	4eb3      	ldr	r6, [pc, #716]	; (a7f4 <__aeabi_dsub+0x624>)
    a526:	45b4      	cmp	ip, r6
    a528:	d045      	beq.n	a5b6 <__aeabi_dsub+0x3e6>
    a52a:	2680      	movs	r6, #128	; 0x80
    a52c:	0436      	lsls	r6, r6, #16
    a52e:	426d      	negs	r5, r5
    a530:	4334      	orrs	r4, r6
    a532:	2d38      	cmp	r5, #56	; 0x38
    a534:	dd00      	ble.n	a538 <__aeabi_dsub+0x368>
    a536:	e0a8      	b.n	a68a <__aeabi_dsub+0x4ba>
    a538:	2d1f      	cmp	r5, #31
    a53a:	dd00      	ble.n	a53e <__aeabi_dsub+0x36e>
    a53c:	e11f      	b.n	a77e <__aeabi_dsub+0x5ae>
    a53e:	2620      	movs	r6, #32
    a540:	0027      	movs	r7, r4
    a542:	4650      	mov	r0, sl
    a544:	1b76      	subs	r6, r6, r5
    a546:	40b7      	lsls	r7, r6
    a548:	40e8      	lsrs	r0, r5
    a54a:	4307      	orrs	r7, r0
    a54c:	4650      	mov	r0, sl
    a54e:	40b0      	lsls	r0, r6
    a550:	1e46      	subs	r6, r0, #1
    a552:	41b0      	sbcs	r0, r6
    a554:	40ec      	lsrs	r4, r5
    a556:	4338      	orrs	r0, r7
    a558:	1a17      	subs	r7, r2, r0
    a55a:	42ba      	cmp	r2, r7
    a55c:	4192      	sbcs	r2, r2
    a55e:	1b0c      	subs	r4, r1, r4
    a560:	4252      	negs	r2, r2
    a562:	1aa4      	subs	r4, r4, r2
    a564:	4666      	mov	r6, ip
    a566:	4698      	mov	r8, r3
    a568:	e68b      	b.n	a282 <__aeabi_dsub+0xb2>
    a56a:	4664      	mov	r4, ip
    a56c:	4667      	mov	r7, ip
    a56e:	432c      	orrs	r4, r5
    a570:	d000      	beq.n	a574 <__aeabi_dsub+0x3a4>
    a572:	e68b      	b.n	a28c <__aeabi_dsub+0xbc>
    a574:	2500      	movs	r5, #0
    a576:	2600      	movs	r6, #0
    a578:	2700      	movs	r7, #0
    a57a:	e6ea      	b.n	a352 <__aeabi_dsub+0x182>
    a57c:	001e      	movs	r6, r3
    a57e:	e6ad      	b.n	a2dc <__aeabi_dsub+0x10c>
    a580:	2b1f      	cmp	r3, #31
    a582:	dc60      	bgt.n	a646 <__aeabi_dsub+0x476>
    a584:	2720      	movs	r7, #32
    a586:	1af8      	subs	r0, r7, r3
    a588:	000f      	movs	r7, r1
    a58a:	4684      	mov	ip, r0
    a58c:	4087      	lsls	r7, r0
    a58e:	0010      	movs	r0, r2
    a590:	40d8      	lsrs	r0, r3
    a592:	4307      	orrs	r7, r0
    a594:	4660      	mov	r0, ip
    a596:	4082      	lsls	r2, r0
    a598:	1e50      	subs	r0, r2, #1
    a59a:	4182      	sbcs	r2, r0
    a59c:	40d9      	lsrs	r1, r3
    a59e:	4317      	orrs	r7, r2
    a5a0:	e6f5      	b.n	a38e <__aeabi_dsub+0x1be>
    a5a2:	0026      	movs	r6, r4
    a5a4:	4650      	mov	r0, sl
    a5a6:	4306      	orrs	r6, r0
    a5a8:	d005      	beq.n	a5b6 <__aeabi_dsub+0x3e6>
    a5aa:	43ed      	mvns	r5, r5
    a5ac:	2d00      	cmp	r5, #0
    a5ae:	d0d3      	beq.n	a558 <__aeabi_dsub+0x388>
    a5b0:	4e90      	ldr	r6, [pc, #576]	; (a7f4 <__aeabi_dsub+0x624>)
    a5b2:	45b4      	cmp	ip, r6
    a5b4:	d1bd      	bne.n	a532 <__aeabi_dsub+0x362>
    a5b6:	000c      	movs	r4, r1
    a5b8:	0017      	movs	r7, r2
    a5ba:	4666      	mov	r6, ip
    a5bc:	4698      	mov	r8, r3
    a5be:	e68d      	b.n	a2dc <__aeabi_dsub+0x10c>
    a5c0:	488c      	ldr	r0, [pc, #560]	; (a7f4 <__aeabi_dsub+0x624>)
    a5c2:	4283      	cmp	r3, r0
    a5c4:	d00b      	beq.n	a5de <__aeabi_dsub+0x40e>
    a5c6:	4663      	mov	r3, ip
    a5c8:	e6d9      	b.n	a37e <__aeabi_dsub+0x1ae>
    a5ca:	2d00      	cmp	r5, #0
    a5cc:	d000      	beq.n	a5d0 <__aeabi_dsub+0x400>
    a5ce:	e096      	b.n	a6fe <__aeabi_dsub+0x52e>
    a5d0:	0008      	movs	r0, r1
    a5d2:	4310      	orrs	r0, r2
    a5d4:	d100      	bne.n	a5d8 <__aeabi_dsub+0x408>
    a5d6:	e0e2      	b.n	a79e <__aeabi_dsub+0x5ce>
    a5d8:	000c      	movs	r4, r1
    a5da:	0017      	movs	r7, r2
    a5dc:	4698      	mov	r8, r3
    a5de:	4e85      	ldr	r6, [pc, #532]	; (a7f4 <__aeabi_dsub+0x624>)
    a5e0:	e67c      	b.n	a2dc <__aeabi_dsub+0x10c>
    a5e2:	2500      	movs	r5, #0
    a5e4:	e780      	b.n	a4e8 <__aeabi_dsub+0x318>
    a5e6:	2100      	movs	r1, #0
    a5e8:	e78e      	b.n	a508 <__aeabi_dsub+0x338>
    a5ea:	0023      	movs	r3, r4
    a5ec:	4650      	mov	r0, sl
    a5ee:	4303      	orrs	r3, r0
    a5f0:	2e00      	cmp	r6, #0
    a5f2:	d000      	beq.n	a5f6 <__aeabi_dsub+0x426>
    a5f4:	e0a8      	b.n	a748 <__aeabi_dsub+0x578>
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	d100      	bne.n	a5fc <__aeabi_dsub+0x42c>
    a5fa:	e0de      	b.n	a7ba <__aeabi_dsub+0x5ea>
    a5fc:	000b      	movs	r3, r1
    a5fe:	4313      	orrs	r3, r2
    a600:	d100      	bne.n	a604 <__aeabi_dsub+0x434>
    a602:	e66b      	b.n	a2dc <__aeabi_dsub+0x10c>
    a604:	4452      	add	r2, sl
    a606:	4552      	cmp	r2, sl
    a608:	4180      	sbcs	r0, r0
    a60a:	1864      	adds	r4, r4, r1
    a60c:	4240      	negs	r0, r0
    a60e:	1824      	adds	r4, r4, r0
    a610:	0017      	movs	r7, r2
    a612:	0223      	lsls	r3, r4, #8
    a614:	d400      	bmi.n	a618 <__aeabi_dsub+0x448>
    a616:	e6fd      	b.n	a414 <__aeabi_dsub+0x244>
    a618:	4b77      	ldr	r3, [pc, #476]	; (a7f8 <__aeabi_dsub+0x628>)
    a61a:	4666      	mov	r6, ip
    a61c:	401c      	ands	r4, r3
    a61e:	e65d      	b.n	a2dc <__aeabi_dsub+0x10c>
    a620:	0025      	movs	r5, r4
    a622:	4650      	mov	r0, sl
    a624:	4305      	orrs	r5, r0
    a626:	2e00      	cmp	r6, #0
    a628:	d1cf      	bne.n	a5ca <__aeabi_dsub+0x3fa>
    a62a:	2d00      	cmp	r5, #0
    a62c:	d14f      	bne.n	a6ce <__aeabi_dsub+0x4fe>
    a62e:	000c      	movs	r4, r1
    a630:	4314      	orrs	r4, r2
    a632:	d100      	bne.n	a636 <__aeabi_dsub+0x466>
    a634:	e0a0      	b.n	a778 <__aeabi_dsub+0x5a8>
    a636:	000c      	movs	r4, r1
    a638:	0017      	movs	r7, r2
    a63a:	4698      	mov	r8, r3
    a63c:	e64e      	b.n	a2dc <__aeabi_dsub+0x10c>
    a63e:	4666      	mov	r6, ip
    a640:	2400      	movs	r4, #0
    a642:	2700      	movs	r7, #0
    a644:	e685      	b.n	a352 <__aeabi_dsub+0x182>
    a646:	001f      	movs	r7, r3
    a648:	0008      	movs	r0, r1
    a64a:	3f20      	subs	r7, #32
    a64c:	40f8      	lsrs	r0, r7
    a64e:	0007      	movs	r7, r0
    a650:	2b20      	cmp	r3, #32
    a652:	d100      	bne.n	a656 <__aeabi_dsub+0x486>
    a654:	e08e      	b.n	a774 <__aeabi_dsub+0x5a4>
    a656:	2040      	movs	r0, #64	; 0x40
    a658:	1ac3      	subs	r3, r0, r3
    a65a:	4099      	lsls	r1, r3
    a65c:	430a      	orrs	r2, r1
    a65e:	1e51      	subs	r1, r2, #1
    a660:	418a      	sbcs	r2, r1
    a662:	2100      	movs	r1, #0
    a664:	4317      	orrs	r7, r2
    a666:	e692      	b.n	a38e <__aeabi_dsub+0x1be>
    a668:	2e00      	cmp	r6, #0
    a66a:	d114      	bne.n	a696 <__aeabi_dsub+0x4c6>
    a66c:	0026      	movs	r6, r4
    a66e:	4650      	mov	r0, sl
    a670:	4306      	orrs	r6, r0
    a672:	d062      	beq.n	a73a <__aeabi_dsub+0x56a>
    a674:	43db      	mvns	r3, r3
    a676:	2b00      	cmp	r3, #0
    a678:	d15c      	bne.n	a734 <__aeabi_dsub+0x564>
    a67a:	1887      	adds	r7, r0, r2
    a67c:	4297      	cmp	r7, r2
    a67e:	4192      	sbcs	r2, r2
    a680:	1864      	adds	r4, r4, r1
    a682:	4252      	negs	r2, r2
    a684:	18a4      	adds	r4, r4, r2
    a686:	4666      	mov	r6, ip
    a688:	e687      	b.n	a39a <__aeabi_dsub+0x1ca>
    a68a:	4650      	mov	r0, sl
    a68c:	4320      	orrs	r0, r4
    a68e:	1e44      	subs	r4, r0, #1
    a690:	41a0      	sbcs	r0, r4
    a692:	2400      	movs	r4, #0
    a694:	e760      	b.n	a558 <__aeabi_dsub+0x388>
    a696:	4e57      	ldr	r6, [pc, #348]	; (a7f4 <__aeabi_dsub+0x624>)
    a698:	45b4      	cmp	ip, r6
    a69a:	d04e      	beq.n	a73a <__aeabi_dsub+0x56a>
    a69c:	2680      	movs	r6, #128	; 0x80
    a69e:	0436      	lsls	r6, r6, #16
    a6a0:	425b      	negs	r3, r3
    a6a2:	4334      	orrs	r4, r6
    a6a4:	2b38      	cmp	r3, #56	; 0x38
    a6a6:	dd00      	ble.n	a6aa <__aeabi_dsub+0x4da>
    a6a8:	e07f      	b.n	a7aa <__aeabi_dsub+0x5da>
    a6aa:	2b1f      	cmp	r3, #31
    a6ac:	dd00      	ble.n	a6b0 <__aeabi_dsub+0x4e0>
    a6ae:	e08b      	b.n	a7c8 <__aeabi_dsub+0x5f8>
    a6b0:	2620      	movs	r6, #32
    a6b2:	0027      	movs	r7, r4
    a6b4:	4650      	mov	r0, sl
    a6b6:	1af6      	subs	r6, r6, r3
    a6b8:	40b7      	lsls	r7, r6
    a6ba:	40d8      	lsrs	r0, r3
    a6bc:	4307      	orrs	r7, r0
    a6be:	4650      	mov	r0, sl
    a6c0:	40b0      	lsls	r0, r6
    a6c2:	1e46      	subs	r6, r0, #1
    a6c4:	41b0      	sbcs	r0, r6
    a6c6:	4307      	orrs	r7, r0
    a6c8:	40dc      	lsrs	r4, r3
    a6ca:	18bf      	adds	r7, r7, r2
    a6cc:	e7d6      	b.n	a67c <__aeabi_dsub+0x4ac>
    a6ce:	000d      	movs	r5, r1
    a6d0:	4315      	orrs	r5, r2
    a6d2:	d100      	bne.n	a6d6 <__aeabi_dsub+0x506>
    a6d4:	e602      	b.n	a2dc <__aeabi_dsub+0x10c>
    a6d6:	4650      	mov	r0, sl
    a6d8:	1a80      	subs	r0, r0, r2
    a6da:	4582      	cmp	sl, r0
    a6dc:	41bf      	sbcs	r7, r7
    a6de:	1a65      	subs	r5, r4, r1
    a6e0:	427f      	negs	r7, r7
    a6e2:	1bed      	subs	r5, r5, r7
    a6e4:	4684      	mov	ip, r0
    a6e6:	0228      	lsls	r0, r5, #8
    a6e8:	d400      	bmi.n	a6ec <__aeabi_dsub+0x51c>
    a6ea:	e68d      	b.n	a408 <__aeabi_dsub+0x238>
    a6ec:	4650      	mov	r0, sl
    a6ee:	1a17      	subs	r7, r2, r0
    a6f0:	42ba      	cmp	r2, r7
    a6f2:	4192      	sbcs	r2, r2
    a6f4:	1b0c      	subs	r4, r1, r4
    a6f6:	4252      	negs	r2, r2
    a6f8:	1aa4      	subs	r4, r4, r2
    a6fa:	4698      	mov	r8, r3
    a6fc:	e5ee      	b.n	a2dc <__aeabi_dsub+0x10c>
    a6fe:	000d      	movs	r5, r1
    a700:	4315      	orrs	r5, r2
    a702:	d100      	bne.n	a706 <__aeabi_dsub+0x536>
    a704:	e76b      	b.n	a5de <__aeabi_dsub+0x40e>
    a706:	4650      	mov	r0, sl
    a708:	0767      	lsls	r7, r4, #29
    a70a:	08c0      	lsrs	r0, r0, #3
    a70c:	4307      	orrs	r7, r0
    a70e:	2080      	movs	r0, #128	; 0x80
    a710:	08e4      	lsrs	r4, r4, #3
    a712:	0300      	lsls	r0, r0, #12
    a714:	4204      	tst	r4, r0
    a716:	d007      	beq.n	a728 <__aeabi_dsub+0x558>
    a718:	08cd      	lsrs	r5, r1, #3
    a71a:	4205      	tst	r5, r0
    a71c:	d104      	bne.n	a728 <__aeabi_dsub+0x558>
    a71e:	002c      	movs	r4, r5
    a720:	4698      	mov	r8, r3
    a722:	08d7      	lsrs	r7, r2, #3
    a724:	0749      	lsls	r1, r1, #29
    a726:	430f      	orrs	r7, r1
    a728:	0f7b      	lsrs	r3, r7, #29
    a72a:	00e4      	lsls	r4, r4, #3
    a72c:	431c      	orrs	r4, r3
    a72e:	00ff      	lsls	r7, r7, #3
    a730:	4e30      	ldr	r6, [pc, #192]	; (a7f4 <__aeabi_dsub+0x624>)
    a732:	e5d3      	b.n	a2dc <__aeabi_dsub+0x10c>
    a734:	4e2f      	ldr	r6, [pc, #188]	; (a7f4 <__aeabi_dsub+0x624>)
    a736:	45b4      	cmp	ip, r6
    a738:	d1b4      	bne.n	a6a4 <__aeabi_dsub+0x4d4>
    a73a:	000c      	movs	r4, r1
    a73c:	0017      	movs	r7, r2
    a73e:	4666      	mov	r6, ip
    a740:	e5cc      	b.n	a2dc <__aeabi_dsub+0x10c>
    a742:	2700      	movs	r7, #0
    a744:	2400      	movs	r4, #0
    a746:	e5e8      	b.n	a31a <__aeabi_dsub+0x14a>
    a748:	2b00      	cmp	r3, #0
    a74a:	d039      	beq.n	a7c0 <__aeabi_dsub+0x5f0>
    a74c:	000b      	movs	r3, r1
    a74e:	4313      	orrs	r3, r2
    a750:	d100      	bne.n	a754 <__aeabi_dsub+0x584>
    a752:	e744      	b.n	a5de <__aeabi_dsub+0x40e>
    a754:	08c0      	lsrs	r0, r0, #3
    a756:	0767      	lsls	r7, r4, #29
    a758:	4307      	orrs	r7, r0
    a75a:	2080      	movs	r0, #128	; 0x80
    a75c:	08e4      	lsrs	r4, r4, #3
    a75e:	0300      	lsls	r0, r0, #12
    a760:	4204      	tst	r4, r0
    a762:	d0e1      	beq.n	a728 <__aeabi_dsub+0x558>
    a764:	08cb      	lsrs	r3, r1, #3
    a766:	4203      	tst	r3, r0
    a768:	d1de      	bne.n	a728 <__aeabi_dsub+0x558>
    a76a:	08d7      	lsrs	r7, r2, #3
    a76c:	0749      	lsls	r1, r1, #29
    a76e:	430f      	orrs	r7, r1
    a770:	001c      	movs	r4, r3
    a772:	e7d9      	b.n	a728 <__aeabi_dsub+0x558>
    a774:	2100      	movs	r1, #0
    a776:	e771      	b.n	a65c <__aeabi_dsub+0x48c>
    a778:	2500      	movs	r5, #0
    a77a:	2700      	movs	r7, #0
    a77c:	e5e9      	b.n	a352 <__aeabi_dsub+0x182>
    a77e:	002e      	movs	r6, r5
    a780:	0027      	movs	r7, r4
    a782:	3e20      	subs	r6, #32
    a784:	40f7      	lsrs	r7, r6
    a786:	2d20      	cmp	r5, #32
    a788:	d02f      	beq.n	a7ea <__aeabi_dsub+0x61a>
    a78a:	2640      	movs	r6, #64	; 0x40
    a78c:	1b75      	subs	r5, r6, r5
    a78e:	40ac      	lsls	r4, r5
    a790:	4650      	mov	r0, sl
    a792:	4320      	orrs	r0, r4
    a794:	1e44      	subs	r4, r0, #1
    a796:	41a0      	sbcs	r0, r4
    a798:	2400      	movs	r4, #0
    a79a:	4338      	orrs	r0, r7
    a79c:	e6dc      	b.n	a558 <__aeabi_dsub+0x388>
    a79e:	2480      	movs	r4, #128	; 0x80
    a7a0:	2500      	movs	r5, #0
    a7a2:	0324      	lsls	r4, r4, #12
    a7a4:	4e13      	ldr	r6, [pc, #76]	; (a7f4 <__aeabi_dsub+0x624>)
    a7a6:	2700      	movs	r7, #0
    a7a8:	e5d3      	b.n	a352 <__aeabi_dsub+0x182>
    a7aa:	4650      	mov	r0, sl
    a7ac:	4320      	orrs	r0, r4
    a7ae:	0007      	movs	r7, r0
    a7b0:	1e78      	subs	r0, r7, #1
    a7b2:	4187      	sbcs	r7, r0
    a7b4:	2400      	movs	r4, #0
    a7b6:	18bf      	adds	r7, r7, r2
    a7b8:	e760      	b.n	a67c <__aeabi_dsub+0x4ac>
    a7ba:	000c      	movs	r4, r1
    a7bc:	0017      	movs	r7, r2
    a7be:	e58d      	b.n	a2dc <__aeabi_dsub+0x10c>
    a7c0:	000c      	movs	r4, r1
    a7c2:	0017      	movs	r7, r2
    a7c4:	4e0b      	ldr	r6, [pc, #44]	; (a7f4 <__aeabi_dsub+0x624>)
    a7c6:	e589      	b.n	a2dc <__aeabi_dsub+0x10c>
    a7c8:	001e      	movs	r6, r3
    a7ca:	0027      	movs	r7, r4
    a7cc:	3e20      	subs	r6, #32
    a7ce:	40f7      	lsrs	r7, r6
    a7d0:	2b20      	cmp	r3, #32
    a7d2:	d00c      	beq.n	a7ee <__aeabi_dsub+0x61e>
    a7d4:	2640      	movs	r6, #64	; 0x40
    a7d6:	1af3      	subs	r3, r6, r3
    a7d8:	409c      	lsls	r4, r3
    a7da:	4650      	mov	r0, sl
    a7dc:	4320      	orrs	r0, r4
    a7de:	1e44      	subs	r4, r0, #1
    a7e0:	41a0      	sbcs	r0, r4
    a7e2:	4307      	orrs	r7, r0
    a7e4:	2400      	movs	r4, #0
    a7e6:	18bf      	adds	r7, r7, r2
    a7e8:	e748      	b.n	a67c <__aeabi_dsub+0x4ac>
    a7ea:	2400      	movs	r4, #0
    a7ec:	e7d0      	b.n	a790 <__aeabi_dsub+0x5c0>
    a7ee:	2400      	movs	r4, #0
    a7f0:	e7f3      	b.n	a7da <__aeabi_dsub+0x60a>
    a7f2:	46c0      	nop			; (mov r8, r8)
    a7f4:	000007ff 	.word	0x000007ff
    a7f8:	ff7fffff 	.word	0xff7fffff

0000a7fc <__aeabi_dcmpun>:
    a7fc:	b570      	push	{r4, r5, r6, lr}
    a7fe:	4e0e      	ldr	r6, [pc, #56]	; (a838 <__aeabi_dcmpun+0x3c>)
    a800:	030d      	lsls	r5, r1, #12
    a802:	031c      	lsls	r4, r3, #12
    a804:	0049      	lsls	r1, r1, #1
    a806:	005b      	lsls	r3, r3, #1
    a808:	0b2d      	lsrs	r5, r5, #12
    a80a:	0d49      	lsrs	r1, r1, #21
    a80c:	0b24      	lsrs	r4, r4, #12
    a80e:	0d5b      	lsrs	r3, r3, #21
    a810:	42b1      	cmp	r1, r6
    a812:	d004      	beq.n	a81e <__aeabi_dcmpun+0x22>
    a814:	4908      	ldr	r1, [pc, #32]	; (a838 <__aeabi_dcmpun+0x3c>)
    a816:	2000      	movs	r0, #0
    a818:	428b      	cmp	r3, r1
    a81a:	d008      	beq.n	a82e <__aeabi_dcmpun+0x32>
    a81c:	bd70      	pop	{r4, r5, r6, pc}
    a81e:	4305      	orrs	r5, r0
    a820:	2001      	movs	r0, #1
    a822:	2d00      	cmp	r5, #0
    a824:	d1fa      	bne.n	a81c <__aeabi_dcmpun+0x20>
    a826:	4904      	ldr	r1, [pc, #16]	; (a838 <__aeabi_dcmpun+0x3c>)
    a828:	2000      	movs	r0, #0
    a82a:	428b      	cmp	r3, r1
    a82c:	d1f6      	bne.n	a81c <__aeabi_dcmpun+0x20>
    a82e:	4314      	orrs	r4, r2
    a830:	0020      	movs	r0, r4
    a832:	1e44      	subs	r4, r0, #1
    a834:	41a0      	sbcs	r0, r4
    a836:	e7f1      	b.n	a81c <__aeabi_dcmpun+0x20>
    a838:	000007ff 	.word	0x000007ff

0000a83c <__aeabi_d2iz>:
    a83c:	b530      	push	{r4, r5, lr}
    a83e:	4d13      	ldr	r5, [pc, #76]	; (a88c <__aeabi_d2iz+0x50>)
    a840:	030a      	lsls	r2, r1, #12
    a842:	004b      	lsls	r3, r1, #1
    a844:	0b12      	lsrs	r2, r2, #12
    a846:	0d5b      	lsrs	r3, r3, #21
    a848:	0fc9      	lsrs	r1, r1, #31
    a84a:	2400      	movs	r4, #0
    a84c:	42ab      	cmp	r3, r5
    a84e:	dd10      	ble.n	a872 <__aeabi_d2iz+0x36>
    a850:	4c0f      	ldr	r4, [pc, #60]	; (a890 <__aeabi_d2iz+0x54>)
    a852:	42a3      	cmp	r3, r4
    a854:	dc0f      	bgt.n	a876 <__aeabi_d2iz+0x3a>
    a856:	2480      	movs	r4, #128	; 0x80
    a858:	4d0e      	ldr	r5, [pc, #56]	; (a894 <__aeabi_d2iz+0x58>)
    a85a:	0364      	lsls	r4, r4, #13
    a85c:	4322      	orrs	r2, r4
    a85e:	1aed      	subs	r5, r5, r3
    a860:	2d1f      	cmp	r5, #31
    a862:	dd0b      	ble.n	a87c <__aeabi_d2iz+0x40>
    a864:	480c      	ldr	r0, [pc, #48]	; (a898 <__aeabi_d2iz+0x5c>)
    a866:	1ac3      	subs	r3, r0, r3
    a868:	40da      	lsrs	r2, r3
    a86a:	4254      	negs	r4, r2
    a86c:	2900      	cmp	r1, #0
    a86e:	d100      	bne.n	a872 <__aeabi_d2iz+0x36>
    a870:	0014      	movs	r4, r2
    a872:	0020      	movs	r0, r4
    a874:	bd30      	pop	{r4, r5, pc}
    a876:	4b09      	ldr	r3, [pc, #36]	; (a89c <__aeabi_d2iz+0x60>)
    a878:	18cc      	adds	r4, r1, r3
    a87a:	e7fa      	b.n	a872 <__aeabi_d2iz+0x36>
    a87c:	4c08      	ldr	r4, [pc, #32]	; (a8a0 <__aeabi_d2iz+0x64>)
    a87e:	40e8      	lsrs	r0, r5
    a880:	46a4      	mov	ip, r4
    a882:	4463      	add	r3, ip
    a884:	409a      	lsls	r2, r3
    a886:	4302      	orrs	r2, r0
    a888:	e7ef      	b.n	a86a <__aeabi_d2iz+0x2e>
    a88a:	46c0      	nop			; (mov r8, r8)
    a88c:	000003fe 	.word	0x000003fe
    a890:	0000041d 	.word	0x0000041d
    a894:	00000433 	.word	0x00000433
    a898:	00000413 	.word	0x00000413
    a89c:	7fffffff 	.word	0x7fffffff
    a8a0:	fffffbed 	.word	0xfffffbed

0000a8a4 <__aeabi_i2d>:
    a8a4:	b570      	push	{r4, r5, r6, lr}
    a8a6:	2800      	cmp	r0, #0
    a8a8:	d030      	beq.n	a90c <__aeabi_i2d+0x68>
    a8aa:	17c3      	asrs	r3, r0, #31
    a8ac:	18c4      	adds	r4, r0, r3
    a8ae:	405c      	eors	r4, r3
    a8b0:	0fc5      	lsrs	r5, r0, #31
    a8b2:	0020      	movs	r0, r4
    a8b4:	f000 f94c 	bl	ab50 <__clzsi2>
    a8b8:	4b17      	ldr	r3, [pc, #92]	; (a918 <__aeabi_i2d+0x74>)
    a8ba:	4a18      	ldr	r2, [pc, #96]	; (a91c <__aeabi_i2d+0x78>)
    a8bc:	1a1b      	subs	r3, r3, r0
    a8be:	1ad2      	subs	r2, r2, r3
    a8c0:	2a1f      	cmp	r2, #31
    a8c2:	dd18      	ble.n	a8f6 <__aeabi_i2d+0x52>
    a8c4:	4a16      	ldr	r2, [pc, #88]	; (a920 <__aeabi_i2d+0x7c>)
    a8c6:	1ad2      	subs	r2, r2, r3
    a8c8:	4094      	lsls	r4, r2
    a8ca:	2200      	movs	r2, #0
    a8cc:	0324      	lsls	r4, r4, #12
    a8ce:	055b      	lsls	r3, r3, #21
    a8d0:	0b24      	lsrs	r4, r4, #12
    a8d2:	0d5b      	lsrs	r3, r3, #21
    a8d4:	2100      	movs	r1, #0
    a8d6:	0010      	movs	r0, r2
    a8d8:	0324      	lsls	r4, r4, #12
    a8da:	0d0a      	lsrs	r2, r1, #20
    a8dc:	0b24      	lsrs	r4, r4, #12
    a8de:	0512      	lsls	r2, r2, #20
    a8e0:	4322      	orrs	r2, r4
    a8e2:	4c10      	ldr	r4, [pc, #64]	; (a924 <__aeabi_i2d+0x80>)
    a8e4:	051b      	lsls	r3, r3, #20
    a8e6:	4022      	ands	r2, r4
    a8e8:	4313      	orrs	r3, r2
    a8ea:	005b      	lsls	r3, r3, #1
    a8ec:	07ed      	lsls	r5, r5, #31
    a8ee:	085b      	lsrs	r3, r3, #1
    a8f0:	432b      	orrs	r3, r5
    a8f2:	0019      	movs	r1, r3
    a8f4:	bd70      	pop	{r4, r5, r6, pc}
    a8f6:	0021      	movs	r1, r4
    a8f8:	4091      	lsls	r1, r2
    a8fa:	000a      	movs	r2, r1
    a8fc:	210b      	movs	r1, #11
    a8fe:	1a08      	subs	r0, r1, r0
    a900:	40c4      	lsrs	r4, r0
    a902:	055b      	lsls	r3, r3, #21
    a904:	0324      	lsls	r4, r4, #12
    a906:	0b24      	lsrs	r4, r4, #12
    a908:	0d5b      	lsrs	r3, r3, #21
    a90a:	e7e3      	b.n	a8d4 <__aeabi_i2d+0x30>
    a90c:	2500      	movs	r5, #0
    a90e:	2300      	movs	r3, #0
    a910:	2400      	movs	r4, #0
    a912:	2200      	movs	r2, #0
    a914:	e7de      	b.n	a8d4 <__aeabi_i2d+0x30>
    a916:	46c0      	nop			; (mov r8, r8)
    a918:	0000041e 	.word	0x0000041e
    a91c:	00000433 	.word	0x00000433
    a920:	00000413 	.word	0x00000413
    a924:	800fffff 	.word	0x800fffff

0000a928 <__aeabi_ui2d>:
    a928:	b510      	push	{r4, lr}
    a92a:	1e04      	subs	r4, r0, #0
    a92c:	d028      	beq.n	a980 <__aeabi_ui2d+0x58>
    a92e:	f000 f90f 	bl	ab50 <__clzsi2>
    a932:	4b15      	ldr	r3, [pc, #84]	; (a988 <__aeabi_ui2d+0x60>)
    a934:	4a15      	ldr	r2, [pc, #84]	; (a98c <__aeabi_ui2d+0x64>)
    a936:	1a1b      	subs	r3, r3, r0
    a938:	1ad2      	subs	r2, r2, r3
    a93a:	2a1f      	cmp	r2, #31
    a93c:	dd15      	ble.n	a96a <__aeabi_ui2d+0x42>
    a93e:	4a14      	ldr	r2, [pc, #80]	; (a990 <__aeabi_ui2d+0x68>)
    a940:	1ad2      	subs	r2, r2, r3
    a942:	4094      	lsls	r4, r2
    a944:	2200      	movs	r2, #0
    a946:	0324      	lsls	r4, r4, #12
    a948:	055b      	lsls	r3, r3, #21
    a94a:	0b24      	lsrs	r4, r4, #12
    a94c:	0d5b      	lsrs	r3, r3, #21
    a94e:	2100      	movs	r1, #0
    a950:	0010      	movs	r0, r2
    a952:	0324      	lsls	r4, r4, #12
    a954:	0d0a      	lsrs	r2, r1, #20
    a956:	0b24      	lsrs	r4, r4, #12
    a958:	0512      	lsls	r2, r2, #20
    a95a:	4322      	orrs	r2, r4
    a95c:	4c0d      	ldr	r4, [pc, #52]	; (a994 <__aeabi_ui2d+0x6c>)
    a95e:	051b      	lsls	r3, r3, #20
    a960:	4022      	ands	r2, r4
    a962:	4313      	orrs	r3, r2
    a964:	005b      	lsls	r3, r3, #1
    a966:	0859      	lsrs	r1, r3, #1
    a968:	bd10      	pop	{r4, pc}
    a96a:	0021      	movs	r1, r4
    a96c:	4091      	lsls	r1, r2
    a96e:	000a      	movs	r2, r1
    a970:	210b      	movs	r1, #11
    a972:	1a08      	subs	r0, r1, r0
    a974:	40c4      	lsrs	r4, r0
    a976:	055b      	lsls	r3, r3, #21
    a978:	0324      	lsls	r4, r4, #12
    a97a:	0b24      	lsrs	r4, r4, #12
    a97c:	0d5b      	lsrs	r3, r3, #21
    a97e:	e7e6      	b.n	a94e <__aeabi_ui2d+0x26>
    a980:	2300      	movs	r3, #0
    a982:	2400      	movs	r4, #0
    a984:	2200      	movs	r2, #0
    a986:	e7e2      	b.n	a94e <__aeabi_ui2d+0x26>
    a988:	0000041e 	.word	0x0000041e
    a98c:	00000433 	.word	0x00000433
    a990:	00000413 	.word	0x00000413
    a994:	800fffff 	.word	0x800fffff

0000a998 <__aeabi_f2d>:
    a998:	0041      	lsls	r1, r0, #1
    a99a:	0e09      	lsrs	r1, r1, #24
    a99c:	1c4b      	adds	r3, r1, #1
    a99e:	b570      	push	{r4, r5, r6, lr}
    a9a0:	b2db      	uxtb	r3, r3
    a9a2:	0246      	lsls	r6, r0, #9
    a9a4:	0a75      	lsrs	r5, r6, #9
    a9a6:	0fc4      	lsrs	r4, r0, #31
    a9a8:	2b01      	cmp	r3, #1
    a9aa:	dd14      	ble.n	a9d6 <__aeabi_f2d+0x3e>
    a9ac:	23e0      	movs	r3, #224	; 0xe0
    a9ae:	009b      	lsls	r3, r3, #2
    a9b0:	076d      	lsls	r5, r5, #29
    a9b2:	0b36      	lsrs	r6, r6, #12
    a9b4:	18cb      	adds	r3, r1, r3
    a9b6:	2100      	movs	r1, #0
    a9b8:	0d0a      	lsrs	r2, r1, #20
    a9ba:	0028      	movs	r0, r5
    a9bc:	0512      	lsls	r2, r2, #20
    a9be:	4d1c      	ldr	r5, [pc, #112]	; (aa30 <__aeabi_f2d+0x98>)
    a9c0:	4332      	orrs	r2, r6
    a9c2:	055b      	lsls	r3, r3, #21
    a9c4:	402a      	ands	r2, r5
    a9c6:	085b      	lsrs	r3, r3, #1
    a9c8:	4313      	orrs	r3, r2
    a9ca:	005b      	lsls	r3, r3, #1
    a9cc:	07e4      	lsls	r4, r4, #31
    a9ce:	085b      	lsrs	r3, r3, #1
    a9d0:	4323      	orrs	r3, r4
    a9d2:	0019      	movs	r1, r3
    a9d4:	bd70      	pop	{r4, r5, r6, pc}
    a9d6:	2900      	cmp	r1, #0
    a9d8:	d114      	bne.n	aa04 <__aeabi_f2d+0x6c>
    a9da:	2d00      	cmp	r5, #0
    a9dc:	d01e      	beq.n	aa1c <__aeabi_f2d+0x84>
    a9de:	0028      	movs	r0, r5
    a9e0:	f000 f8b6 	bl	ab50 <__clzsi2>
    a9e4:	280a      	cmp	r0, #10
    a9e6:	dc1c      	bgt.n	aa22 <__aeabi_f2d+0x8a>
    a9e8:	230b      	movs	r3, #11
    a9ea:	002a      	movs	r2, r5
    a9ec:	1a1b      	subs	r3, r3, r0
    a9ee:	40da      	lsrs	r2, r3
    a9f0:	0003      	movs	r3, r0
    a9f2:	3315      	adds	r3, #21
    a9f4:	409d      	lsls	r5, r3
    a9f6:	4b0f      	ldr	r3, [pc, #60]	; (aa34 <__aeabi_f2d+0x9c>)
    a9f8:	0312      	lsls	r2, r2, #12
    a9fa:	1a1b      	subs	r3, r3, r0
    a9fc:	055b      	lsls	r3, r3, #21
    a9fe:	0b16      	lsrs	r6, r2, #12
    aa00:	0d5b      	lsrs	r3, r3, #21
    aa02:	e7d8      	b.n	a9b6 <__aeabi_f2d+0x1e>
    aa04:	2d00      	cmp	r5, #0
    aa06:	d006      	beq.n	aa16 <__aeabi_f2d+0x7e>
    aa08:	0b32      	lsrs	r2, r6, #12
    aa0a:	2680      	movs	r6, #128	; 0x80
    aa0c:	0336      	lsls	r6, r6, #12
    aa0e:	076d      	lsls	r5, r5, #29
    aa10:	4316      	orrs	r6, r2
    aa12:	4b09      	ldr	r3, [pc, #36]	; (aa38 <__aeabi_f2d+0xa0>)
    aa14:	e7cf      	b.n	a9b6 <__aeabi_f2d+0x1e>
    aa16:	4b08      	ldr	r3, [pc, #32]	; (aa38 <__aeabi_f2d+0xa0>)
    aa18:	2600      	movs	r6, #0
    aa1a:	e7cc      	b.n	a9b6 <__aeabi_f2d+0x1e>
    aa1c:	2300      	movs	r3, #0
    aa1e:	2600      	movs	r6, #0
    aa20:	e7c9      	b.n	a9b6 <__aeabi_f2d+0x1e>
    aa22:	0003      	movs	r3, r0
    aa24:	002a      	movs	r2, r5
    aa26:	3b0b      	subs	r3, #11
    aa28:	409a      	lsls	r2, r3
    aa2a:	2500      	movs	r5, #0
    aa2c:	e7e3      	b.n	a9f6 <__aeabi_f2d+0x5e>
    aa2e:	46c0      	nop			; (mov r8, r8)
    aa30:	800fffff 	.word	0x800fffff
    aa34:	00000389 	.word	0x00000389
    aa38:	000007ff 	.word	0x000007ff

0000aa3c <__aeabi_d2f>:
    aa3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa3e:	004c      	lsls	r4, r1, #1
    aa40:	0d64      	lsrs	r4, r4, #21
    aa42:	030b      	lsls	r3, r1, #12
    aa44:	1c62      	adds	r2, r4, #1
    aa46:	0f45      	lsrs	r5, r0, #29
    aa48:	0a5b      	lsrs	r3, r3, #9
    aa4a:	0552      	lsls	r2, r2, #21
    aa4c:	432b      	orrs	r3, r5
    aa4e:	0fc9      	lsrs	r1, r1, #31
    aa50:	00c5      	lsls	r5, r0, #3
    aa52:	0d52      	lsrs	r2, r2, #21
    aa54:	2a01      	cmp	r2, #1
    aa56:	dd28      	ble.n	aaaa <__aeabi_d2f+0x6e>
    aa58:	4a3a      	ldr	r2, [pc, #232]	; (ab44 <__aeabi_d2f+0x108>)
    aa5a:	18a6      	adds	r6, r4, r2
    aa5c:	2efe      	cmp	r6, #254	; 0xfe
    aa5e:	dc1b      	bgt.n	aa98 <__aeabi_d2f+0x5c>
    aa60:	2e00      	cmp	r6, #0
    aa62:	dd3e      	ble.n	aae2 <__aeabi_d2f+0xa6>
    aa64:	0180      	lsls	r0, r0, #6
    aa66:	0002      	movs	r2, r0
    aa68:	1e50      	subs	r0, r2, #1
    aa6a:	4182      	sbcs	r2, r0
    aa6c:	0f6d      	lsrs	r5, r5, #29
    aa6e:	432a      	orrs	r2, r5
    aa70:	00db      	lsls	r3, r3, #3
    aa72:	4313      	orrs	r3, r2
    aa74:	075a      	lsls	r2, r3, #29
    aa76:	d004      	beq.n	aa82 <__aeabi_d2f+0x46>
    aa78:	220f      	movs	r2, #15
    aa7a:	401a      	ands	r2, r3
    aa7c:	2a04      	cmp	r2, #4
    aa7e:	d000      	beq.n	aa82 <__aeabi_d2f+0x46>
    aa80:	3304      	adds	r3, #4
    aa82:	2280      	movs	r2, #128	; 0x80
    aa84:	04d2      	lsls	r2, r2, #19
    aa86:	401a      	ands	r2, r3
    aa88:	d05a      	beq.n	ab40 <__aeabi_d2f+0x104>
    aa8a:	3601      	adds	r6, #1
    aa8c:	2eff      	cmp	r6, #255	; 0xff
    aa8e:	d003      	beq.n	aa98 <__aeabi_d2f+0x5c>
    aa90:	019b      	lsls	r3, r3, #6
    aa92:	0a5b      	lsrs	r3, r3, #9
    aa94:	b2f4      	uxtb	r4, r6
    aa96:	e001      	b.n	aa9c <__aeabi_d2f+0x60>
    aa98:	24ff      	movs	r4, #255	; 0xff
    aa9a:	2300      	movs	r3, #0
    aa9c:	0258      	lsls	r0, r3, #9
    aa9e:	05e4      	lsls	r4, r4, #23
    aaa0:	0a40      	lsrs	r0, r0, #9
    aaa2:	07c9      	lsls	r1, r1, #31
    aaa4:	4320      	orrs	r0, r4
    aaa6:	4308      	orrs	r0, r1
    aaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aaaa:	2c00      	cmp	r4, #0
    aaac:	d007      	beq.n	aabe <__aeabi_d2f+0x82>
    aaae:	431d      	orrs	r5, r3
    aab0:	d0f2      	beq.n	aa98 <__aeabi_d2f+0x5c>
    aab2:	2080      	movs	r0, #128	; 0x80
    aab4:	00db      	lsls	r3, r3, #3
    aab6:	0480      	lsls	r0, r0, #18
    aab8:	4303      	orrs	r3, r0
    aaba:	26ff      	movs	r6, #255	; 0xff
    aabc:	e7da      	b.n	aa74 <__aeabi_d2f+0x38>
    aabe:	432b      	orrs	r3, r5
    aac0:	d003      	beq.n	aaca <__aeabi_d2f+0x8e>
    aac2:	2305      	movs	r3, #5
    aac4:	08db      	lsrs	r3, r3, #3
    aac6:	2cff      	cmp	r4, #255	; 0xff
    aac8:	d003      	beq.n	aad2 <__aeabi_d2f+0x96>
    aaca:	025b      	lsls	r3, r3, #9
    aacc:	0a5b      	lsrs	r3, r3, #9
    aace:	b2e4      	uxtb	r4, r4
    aad0:	e7e4      	b.n	aa9c <__aeabi_d2f+0x60>
    aad2:	2b00      	cmp	r3, #0
    aad4:	d032      	beq.n	ab3c <__aeabi_d2f+0x100>
    aad6:	2080      	movs	r0, #128	; 0x80
    aad8:	03c0      	lsls	r0, r0, #15
    aada:	4303      	orrs	r3, r0
    aadc:	025b      	lsls	r3, r3, #9
    aade:	0a5b      	lsrs	r3, r3, #9
    aae0:	e7dc      	b.n	aa9c <__aeabi_d2f+0x60>
    aae2:	0032      	movs	r2, r6
    aae4:	3217      	adds	r2, #23
    aae6:	db14      	blt.n	ab12 <__aeabi_d2f+0xd6>
    aae8:	2280      	movs	r2, #128	; 0x80
    aaea:	271e      	movs	r7, #30
    aaec:	0412      	lsls	r2, r2, #16
    aaee:	4313      	orrs	r3, r2
    aaf0:	1bbf      	subs	r7, r7, r6
    aaf2:	2f1f      	cmp	r7, #31
    aaf4:	dc0f      	bgt.n	ab16 <__aeabi_d2f+0xda>
    aaf6:	4a14      	ldr	r2, [pc, #80]	; (ab48 <__aeabi_d2f+0x10c>)
    aaf8:	4694      	mov	ip, r2
    aafa:	4464      	add	r4, ip
    aafc:	002a      	movs	r2, r5
    aafe:	40a5      	lsls	r5, r4
    ab00:	002e      	movs	r6, r5
    ab02:	40a3      	lsls	r3, r4
    ab04:	1e75      	subs	r5, r6, #1
    ab06:	41ae      	sbcs	r6, r5
    ab08:	40fa      	lsrs	r2, r7
    ab0a:	4333      	orrs	r3, r6
    ab0c:	4313      	orrs	r3, r2
    ab0e:	2600      	movs	r6, #0
    ab10:	e7b0      	b.n	aa74 <__aeabi_d2f+0x38>
    ab12:	2400      	movs	r4, #0
    ab14:	e7d5      	b.n	aac2 <__aeabi_d2f+0x86>
    ab16:	2202      	movs	r2, #2
    ab18:	4252      	negs	r2, r2
    ab1a:	1b96      	subs	r6, r2, r6
    ab1c:	001a      	movs	r2, r3
    ab1e:	40f2      	lsrs	r2, r6
    ab20:	2f20      	cmp	r7, #32
    ab22:	d009      	beq.n	ab38 <__aeabi_d2f+0xfc>
    ab24:	4809      	ldr	r0, [pc, #36]	; (ab4c <__aeabi_d2f+0x110>)
    ab26:	4684      	mov	ip, r0
    ab28:	4464      	add	r4, ip
    ab2a:	40a3      	lsls	r3, r4
    ab2c:	432b      	orrs	r3, r5
    ab2e:	1e5d      	subs	r5, r3, #1
    ab30:	41ab      	sbcs	r3, r5
    ab32:	2600      	movs	r6, #0
    ab34:	4313      	orrs	r3, r2
    ab36:	e79d      	b.n	aa74 <__aeabi_d2f+0x38>
    ab38:	2300      	movs	r3, #0
    ab3a:	e7f7      	b.n	ab2c <__aeabi_d2f+0xf0>
    ab3c:	2300      	movs	r3, #0
    ab3e:	e7ad      	b.n	aa9c <__aeabi_d2f+0x60>
    ab40:	0034      	movs	r4, r6
    ab42:	e7bf      	b.n	aac4 <__aeabi_d2f+0x88>
    ab44:	fffffc80 	.word	0xfffffc80
    ab48:	fffffc82 	.word	0xfffffc82
    ab4c:	fffffca2 	.word	0xfffffca2

0000ab50 <__clzsi2>:
    ab50:	211c      	movs	r1, #28
    ab52:	2301      	movs	r3, #1
    ab54:	041b      	lsls	r3, r3, #16
    ab56:	4298      	cmp	r0, r3
    ab58:	d301      	bcc.n	ab5e <__clzsi2+0xe>
    ab5a:	0c00      	lsrs	r0, r0, #16
    ab5c:	3910      	subs	r1, #16
    ab5e:	0a1b      	lsrs	r3, r3, #8
    ab60:	4298      	cmp	r0, r3
    ab62:	d301      	bcc.n	ab68 <__clzsi2+0x18>
    ab64:	0a00      	lsrs	r0, r0, #8
    ab66:	3908      	subs	r1, #8
    ab68:	091b      	lsrs	r3, r3, #4
    ab6a:	4298      	cmp	r0, r3
    ab6c:	d301      	bcc.n	ab72 <__clzsi2+0x22>
    ab6e:	0900      	lsrs	r0, r0, #4
    ab70:	3904      	subs	r1, #4
    ab72:	a202      	add	r2, pc, #8	; (adr r2, ab7c <__clzsi2+0x2c>)
    ab74:	5c10      	ldrb	r0, [r2, r0]
    ab76:	1840      	adds	r0, r0, r1
    ab78:	4770      	bx	lr
    ab7a:	46c0      	nop			; (mov r8, r8)
    ab7c:	02020304 	.word	0x02020304
    ab80:	01010101 	.word	0x01010101
	...

0000ab8c <__assert_func>:
    ab8c:	b530      	push	{r4, r5, lr}
    ab8e:	001c      	movs	r4, r3
    ab90:	4b09      	ldr	r3, [pc, #36]	; (abb8 <__assert_func+0x2c>)
    ab92:	0005      	movs	r5, r0
    ab94:	681b      	ldr	r3, [r3, #0]
    ab96:	b085      	sub	sp, #20
    ab98:	68d8      	ldr	r0, [r3, #12]
    ab9a:	4b08      	ldr	r3, [pc, #32]	; (abbc <__assert_func+0x30>)
    ab9c:	2a00      	cmp	r2, #0
    ab9e:	d101      	bne.n	aba4 <__assert_func+0x18>
    aba0:	4b07      	ldr	r3, [pc, #28]	; (abc0 <__assert_func+0x34>)
    aba2:	001a      	movs	r2, r3
    aba4:	9202      	str	r2, [sp, #8]
    aba6:	9301      	str	r3, [sp, #4]
    aba8:	9100      	str	r1, [sp, #0]
    abaa:	002b      	movs	r3, r5
    abac:	0022      	movs	r2, r4
    abae:	4905      	ldr	r1, [pc, #20]	; (abc4 <__assert_func+0x38>)
    abb0:	f000 f81e 	bl	abf0 <fiprintf>
    abb4:	f001 fe98 	bl	c8e8 <abort>
    abb8:	200000b0 	.word	0x200000b0
    abbc:	00010070 	.word	0x00010070
    abc0:	0000f47e 	.word	0x0000f47e
    abc4:	0001007d 	.word	0x0001007d

0000abc8 <__cxa_atexit>:
    abc8:	b570      	push	{r4, r5, r6, lr}
    abca:	4c05      	ldr	r4, [pc, #20]	; (abe0 <__cxa_atexit+0x18>)
    abcc:	0005      	movs	r5, r0
    abce:	0013      	movs	r3, r2
    abd0:	1e20      	subs	r0, r4, #0
    abd2:	d004      	beq.n	abde <__cxa_atexit+0x16>
    abd4:	000a      	movs	r2, r1
    abd6:	2002      	movs	r0, #2
    abd8:	0029      	movs	r1, r5
    abda:	e000      	b.n	abde <__cxa_atexit+0x16>
    abdc:	bf00      	nop
    abde:	bd70      	pop	{r4, r5, r6, pc}
    abe0:	00000000 	.word	0x00000000

0000abe4 <__errno>:
    abe4:	4b01      	ldr	r3, [pc, #4]	; (abec <__errno+0x8>)
    abe6:	6818      	ldr	r0, [r3, #0]
    abe8:	4770      	bx	lr
    abea:	46c0      	nop			; (mov r8, r8)
    abec:	200000b0 	.word	0x200000b0

0000abf0 <fiprintf>:
    abf0:	b40e      	push	{r1, r2, r3}
    abf2:	b503      	push	{r0, r1, lr}
    abf4:	0001      	movs	r1, r0
    abf6:	ab03      	add	r3, sp, #12
    abf8:	4804      	ldr	r0, [pc, #16]	; (ac0c <fiprintf+0x1c>)
    abfa:	cb04      	ldmia	r3!, {r2}
    abfc:	6800      	ldr	r0, [r0, #0]
    abfe:	9301      	str	r3, [sp, #4]
    ac00:	f000 fc7c 	bl	b4fc <_vfiprintf_r>
    ac04:	b002      	add	sp, #8
    ac06:	bc08      	pop	{r3}
    ac08:	b003      	add	sp, #12
    ac0a:	4718      	bx	r3
    ac0c:	200000b0 	.word	0x200000b0

0000ac10 <gmtime>:
    ac10:	4b07      	ldr	r3, [pc, #28]	; (ac30 <gmtime+0x20>)
    ac12:	b570      	push	{r4, r5, r6, lr}
    ac14:	681c      	ldr	r4, [r3, #0]
    ac16:	0005      	movs	r5, r0
    ac18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d103      	bne.n	ac26 <gmtime+0x16>
    ac1e:	2024      	movs	r0, #36	; 0x24
    ac20:	f000 f8fc 	bl	ae1c <malloc>
    ac24:	63e0      	str	r0, [r4, #60]	; 0x3c
    ac26:	0028      	movs	r0, r5
    ac28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    ac2a:	f000 f803 	bl	ac34 <gmtime_r>
    ac2e:	bd70      	pop	{r4, r5, r6, pc}
    ac30:	200000b0 	.word	0x200000b0

0000ac34 <gmtime_r>:
    ac34:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac36:	6805      	ldr	r5, [r0, #0]
    ac38:	b085      	sub	sp, #20
    ac3a:	000c      	movs	r4, r1
    ac3c:	0028      	movs	r0, r5
    ac3e:	4952      	ldr	r1, [pc, #328]	; (ad88 <gmtime_r+0x154>)
    ac40:	f7fd f85c 	bl	7cfc <__divsi3>
    ac44:	4950      	ldr	r1, [pc, #320]	; (ad88 <gmtime_r+0x154>)
    ac46:	0006      	movs	r6, r0
    ac48:	0028      	movs	r0, r5
    ac4a:	f7fd f93d 	bl	7ec8 <__aeabi_idivmod>
    ac4e:	1e0f      	subs	r7, r1, #0
    ac50:	da00      	bge.n	ac54 <gmtime_r+0x20>
    ac52:	e080      	b.n	ad56 <gmtime_r+0x122>
    ac54:	4b4d      	ldr	r3, [pc, #308]	; (ad8c <gmtime_r+0x158>)
    ac56:	21e1      	movs	r1, #225	; 0xe1
    ac58:	0038      	movs	r0, r7
    ac5a:	0109      	lsls	r1, r1, #4
    ac5c:	18f5      	adds	r5, r6, r3
    ac5e:	f7fd f84d 	bl	7cfc <__divsi3>
    ac62:	21e1      	movs	r1, #225	; 0xe1
    ac64:	60a0      	str	r0, [r4, #8]
    ac66:	0109      	lsls	r1, r1, #4
    ac68:	0038      	movs	r0, r7
    ac6a:	f7fd f92d 	bl	7ec8 <__aeabi_idivmod>
    ac6e:	000e      	movs	r6, r1
    ac70:	213c      	movs	r1, #60	; 0x3c
    ac72:	0030      	movs	r0, r6
    ac74:	f7fd f842 	bl	7cfc <__divsi3>
    ac78:	213c      	movs	r1, #60	; 0x3c
    ac7a:	6060      	str	r0, [r4, #4]
    ac7c:	0030      	movs	r0, r6
    ac7e:	f7fd f923 	bl	7ec8 <__aeabi_idivmod>
    ac82:	1ce8      	adds	r0, r5, #3
    ac84:	6021      	str	r1, [r4, #0]
    ac86:	2107      	movs	r1, #7
    ac88:	f7fd f91e 	bl	7ec8 <__aeabi_idivmod>
    ac8c:	0028      	movs	r0, r5
    ac8e:	61a1      	str	r1, [r4, #24]
    ac90:	493f      	ldr	r1, [pc, #252]	; (ad90 <gmtime_r+0x15c>)
    ac92:	f7fd f833 	bl	7cfc <__divsi3>
    ac96:	4e3f      	ldr	r6, [pc, #252]	; (ad94 <gmtime_r+0x160>)
    ac98:	493f      	ldr	r1, [pc, #252]	; (ad98 <gmtime_r+0x164>)
    ac9a:	4346      	muls	r6, r0
    ac9c:	1976      	adds	r6, r6, r5
    ac9e:	0007      	movs	r7, r0
    aca0:	0030      	movs	r0, r6
    aca2:	f7fc ffa1 	bl	7be8 <__udivsi3>
    aca6:	493d      	ldr	r1, [pc, #244]	; (ad9c <gmtime_r+0x168>)
    aca8:	1985      	adds	r5, r0, r6
    acaa:	0030      	movs	r0, r6
    acac:	f7fc ff9c 	bl	7be8 <__udivsi3>
    acb0:	493b      	ldr	r1, [pc, #236]	; (ada0 <gmtime_r+0x16c>)
    acb2:	1a2d      	subs	r5, r5, r0
    acb4:	0030      	movs	r0, r6
    acb6:	f7fc ff97 	bl	7be8 <__udivsi3>
    acba:	216e      	movs	r1, #110	; 0x6e
    acbc:	1a2d      	subs	r5, r5, r0
    acbe:	31ff      	adds	r1, #255	; 0xff
    acc0:	0028      	movs	r0, r5
    acc2:	f7fc ff91 	bl	7be8 <__udivsi3>
    acc6:	4937      	ldr	r1, [pc, #220]	; (ada4 <gmtime_r+0x170>)
    acc8:	9001      	str	r0, [sp, #4]
    acca:	0028      	movs	r0, r5
    accc:	f7fc ff8c 	bl	7be8 <__udivsi3>
    acd0:	4932      	ldr	r1, [pc, #200]	; (ad9c <gmtime_r+0x168>)
    acd2:	1986      	adds	r6, r0, r6
    acd4:	0028      	movs	r0, r5
    acd6:	f7fc ff87 	bl	7be8 <__udivsi3>
    acda:	216e      	movs	r1, #110	; 0x6e
    acdc:	9b01      	ldr	r3, [sp, #4]
    acde:	31ff      	adds	r1, #255	; 0xff
    ace0:	4359      	muls	r1, r3
    ace2:	1a36      	subs	r6, r6, r0
    ace4:	1a73      	subs	r3, r6, r1
    ace6:	0018      	movs	r0, r3
    ace8:	2605      	movs	r6, #5
    acea:	4370      	muls	r0, r6
    acec:	2199      	movs	r1, #153	; 0x99
    acee:	3002      	adds	r0, #2
    acf0:	9302      	str	r3, [sp, #8]
    acf2:	f7fc ff79 	bl	7be8 <__udivsi3>
    acf6:	0005      	movs	r5, r0
    acf8:	2099      	movs	r0, #153	; 0x99
    acfa:	4368      	muls	r0, r5
    acfc:	9b02      	ldr	r3, [sp, #8]
    acfe:	3002      	adds	r0, #2
    ad00:	3301      	adds	r3, #1
    ad02:	0031      	movs	r1, r6
    ad04:	9303      	str	r3, [sp, #12]
    ad06:	f7fc ff6f 	bl	7be8 <__udivsi3>
    ad0a:	9b03      	ldr	r3, [sp, #12]
    ad0c:	1a1b      	subs	r3, r3, r0
    ad0e:	9303      	str	r3, [sp, #12]
    ad10:	2302      	movs	r3, #2
    ad12:	2d09      	cmp	r5, #9
    ad14:	d900      	bls.n	ad18 <gmtime_r+0xe4>
    ad16:	3b0c      	subs	r3, #12
    ad18:	195d      	adds	r5, r3, r5
    ad1a:	23c8      	movs	r3, #200	; 0xc8
    ad1c:	005b      	lsls	r3, r3, #1
    ad1e:	435f      	muls	r7, r3
    ad20:	9b01      	ldr	r3, [sp, #4]
    ad22:	2601      	movs	r6, #1
    ad24:	18ff      	adds	r7, r7, r3
    ad26:	2300      	movs	r3, #0
    ad28:	42ae      	cmp	r6, r5
    ad2a:	415b      	adcs	r3, r3
    ad2c:	18ff      	adds	r7, r7, r3
    ad2e:	2332      	movs	r3, #50	; 0x32
    ad30:	9a02      	ldr	r2, [sp, #8]
    ad32:	33ff      	adds	r3, #255	; 0xff
    ad34:	429a      	cmp	r2, r3
    ad36:	d912      	bls.n	ad5e <gmtime_r+0x12a>
    ad38:	0016      	movs	r6, r2
    ad3a:	3e33      	subs	r6, #51	; 0x33
    ad3c:	3eff      	subs	r6, #255	; 0xff
    ad3e:	4b1a      	ldr	r3, [pc, #104]	; (ada8 <gmtime_r+0x174>)
    ad40:	0020      	movs	r0, r4
    ad42:	18ff      	adds	r7, r7, r3
    ad44:	9b03      	ldr	r3, [sp, #12]
    ad46:	61e6      	str	r6, [r4, #28]
    ad48:	60e3      	str	r3, [r4, #12]
    ad4a:	2300      	movs	r3, #0
    ad4c:	6167      	str	r7, [r4, #20]
    ad4e:	6125      	str	r5, [r4, #16]
    ad50:	6223      	str	r3, [r4, #32]
    ad52:	b005      	add	sp, #20
    ad54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad56:	4b0c      	ldr	r3, [pc, #48]	; (ad88 <gmtime_r+0x154>)
    ad58:	18cf      	adds	r7, r1, r3
    ad5a:	4b14      	ldr	r3, [pc, #80]	; (adac <gmtime_r+0x178>)
    ad5c:	e77b      	b.n	ac56 <gmtime_r+0x22>
    ad5e:	9b01      	ldr	r3, [sp, #4]
    ad60:	079b      	lsls	r3, r3, #30
    ad62:	d105      	bne.n	ad70 <gmtime_r+0x13c>
    ad64:	2164      	movs	r1, #100	; 0x64
    ad66:	9801      	ldr	r0, [sp, #4]
    ad68:	f7fc ffc4 	bl	7cf4 <__aeabi_uidivmod>
    ad6c:	2900      	cmp	r1, #0
    ad6e:	d106      	bne.n	ad7e <gmtime_r+0x14a>
    ad70:	21c8      	movs	r1, #200	; 0xc8
    ad72:	9801      	ldr	r0, [sp, #4]
    ad74:	0049      	lsls	r1, r1, #1
    ad76:	f7fc ffbd 	bl	7cf4 <__aeabi_uidivmod>
    ad7a:	424e      	negs	r6, r1
    ad7c:	414e      	adcs	r6, r1
    ad7e:	9802      	ldr	r0, [sp, #8]
    ad80:	303b      	adds	r0, #59	; 0x3b
    ad82:	1986      	adds	r6, r0, r6
    ad84:	e7db      	b.n	ad3e <gmtime_r+0x10a>
    ad86:	46c0      	nop			; (mov r8, r8)
    ad88:	00015180 	.word	0x00015180
    ad8c:	000afa6c 	.word	0x000afa6c
    ad90:	00023ab1 	.word	0x00023ab1
    ad94:	fffdc54f 	.word	0xfffdc54f
    ad98:	00008eac 	.word	0x00008eac
    ad9c:	000005b4 	.word	0x000005b4
    ada0:	00023ab0 	.word	0x00023ab0
    ada4:	00008e94 	.word	0x00008e94
    ada8:	fffff894 	.word	0xfffff894
    adac:	000afa6b 	.word	0x000afa6b

0000adb0 <__libc_init_array>:
    adb0:	b570      	push	{r4, r5, r6, lr}
    adb2:	2600      	movs	r6, #0
    adb4:	4d0c      	ldr	r5, [pc, #48]	; (ade8 <__libc_init_array+0x38>)
    adb6:	4c0d      	ldr	r4, [pc, #52]	; (adec <__libc_init_array+0x3c>)
    adb8:	1b64      	subs	r4, r4, r5
    adba:	10a4      	asrs	r4, r4, #2
    adbc:	42a6      	cmp	r6, r4
    adbe:	d109      	bne.n	add4 <__libc_init_array+0x24>
    adc0:	2600      	movs	r6, #0
    adc2:	f004 f8e5 	bl	ef90 <_init>
    adc6:	4d0a      	ldr	r5, [pc, #40]	; (adf0 <__libc_init_array+0x40>)
    adc8:	4c0a      	ldr	r4, [pc, #40]	; (adf4 <__libc_init_array+0x44>)
    adca:	1b64      	subs	r4, r4, r5
    adcc:	10a4      	asrs	r4, r4, #2
    adce:	42a6      	cmp	r6, r4
    add0:	d105      	bne.n	adde <__libc_init_array+0x2e>
    add2:	bd70      	pop	{r4, r5, r6, pc}
    add4:	00b3      	lsls	r3, r6, #2
    add6:	58eb      	ldr	r3, [r5, r3]
    add8:	4798      	blx	r3
    adda:	3601      	adds	r6, #1
    addc:	e7ee      	b.n	adbc <__libc_init_array+0xc>
    adde:	00b3      	lsls	r3, r6, #2
    ade0:	58eb      	ldr	r3, [r5, r3]
    ade2:	4798      	blx	r3
    ade4:	3601      	adds	r6, #1
    ade6:	e7f2      	b.n	adce <__libc_init_array+0x1e>
    ade8:	200002cc 	.word	0x200002cc
    adec:	200002cc 	.word	0x200002cc
    adf0:	200002cc 	.word	0x200002cc
    adf4:	200002f4 	.word	0x200002f4

0000adf8 <__locale_ctype_ptr_l>:
    adf8:	30ec      	adds	r0, #236	; 0xec
    adfa:	6800      	ldr	r0, [r0, #0]
    adfc:	4770      	bx	lr
	...

0000ae00 <__locale_ctype_ptr>:
    ae00:	4b04      	ldr	r3, [pc, #16]	; (ae14 <__locale_ctype_ptr+0x14>)
    ae02:	681b      	ldr	r3, [r3, #0]
    ae04:	6a1b      	ldr	r3, [r3, #32]
    ae06:	2b00      	cmp	r3, #0
    ae08:	d100      	bne.n	ae0c <__locale_ctype_ptr+0xc>
    ae0a:	4b03      	ldr	r3, [pc, #12]	; (ae18 <__locale_ctype_ptr+0x18>)
    ae0c:	33ec      	adds	r3, #236	; 0xec
    ae0e:	6818      	ldr	r0, [r3, #0]
    ae10:	4770      	bx	lr
    ae12:	46c0      	nop			; (mov r8, r8)
    ae14:	200000b0 	.word	0x200000b0
    ae18:	20000114 	.word	0x20000114

0000ae1c <malloc>:
    ae1c:	b510      	push	{r4, lr}
    ae1e:	4b03      	ldr	r3, [pc, #12]	; (ae2c <malloc+0x10>)
    ae20:	0001      	movs	r1, r0
    ae22:	6818      	ldr	r0, [r3, #0]
    ae24:	f000 fae4 	bl	b3f0 <_malloc_r>
    ae28:	bd10      	pop	{r4, pc}
    ae2a:	46c0      	nop			; (mov r8, r8)
    ae2c:	200000b0 	.word	0x200000b0

0000ae30 <free>:
    ae30:	b510      	push	{r4, lr}
    ae32:	4b03      	ldr	r3, [pc, #12]	; (ae40 <free+0x10>)
    ae34:	0001      	movs	r1, r0
    ae36:	6818      	ldr	r0, [r3, #0]
    ae38:	f000 fa90 	bl	b35c <_free_r>
    ae3c:	bd10      	pop	{r4, pc}
    ae3e:	46c0      	nop			; (mov r8, r8)
    ae40:	200000b0 	.word	0x200000b0

0000ae44 <__ascii_mbtowc>:
    ae44:	b082      	sub	sp, #8
    ae46:	2900      	cmp	r1, #0
    ae48:	d100      	bne.n	ae4c <__ascii_mbtowc+0x8>
    ae4a:	a901      	add	r1, sp, #4
    ae4c:	1e10      	subs	r0, r2, #0
    ae4e:	d006      	beq.n	ae5e <__ascii_mbtowc+0x1a>
    ae50:	2b00      	cmp	r3, #0
    ae52:	d006      	beq.n	ae62 <__ascii_mbtowc+0x1e>
    ae54:	7813      	ldrb	r3, [r2, #0]
    ae56:	600b      	str	r3, [r1, #0]
    ae58:	7810      	ldrb	r0, [r2, #0]
    ae5a:	1e43      	subs	r3, r0, #1
    ae5c:	4198      	sbcs	r0, r3
    ae5e:	b002      	add	sp, #8
    ae60:	4770      	bx	lr
    ae62:	2002      	movs	r0, #2
    ae64:	4240      	negs	r0, r0
    ae66:	e7fa      	b.n	ae5e <__ascii_mbtowc+0x1a>

0000ae68 <memcpy>:
    ae68:	2300      	movs	r3, #0
    ae6a:	b510      	push	{r4, lr}
    ae6c:	429a      	cmp	r2, r3
    ae6e:	d100      	bne.n	ae72 <memcpy+0xa>
    ae70:	bd10      	pop	{r4, pc}
    ae72:	5ccc      	ldrb	r4, [r1, r3]
    ae74:	54c4      	strb	r4, [r0, r3]
    ae76:	3301      	adds	r3, #1
    ae78:	e7f8      	b.n	ae6c <memcpy+0x4>

0000ae7a <memmove>:
    ae7a:	b510      	push	{r4, lr}
    ae7c:	4288      	cmp	r0, r1
    ae7e:	d902      	bls.n	ae86 <memmove+0xc>
    ae80:	188b      	adds	r3, r1, r2
    ae82:	4298      	cmp	r0, r3
    ae84:	d308      	bcc.n	ae98 <memmove+0x1e>
    ae86:	2300      	movs	r3, #0
    ae88:	429a      	cmp	r2, r3
    ae8a:	d007      	beq.n	ae9c <memmove+0x22>
    ae8c:	5ccc      	ldrb	r4, [r1, r3]
    ae8e:	54c4      	strb	r4, [r0, r3]
    ae90:	3301      	adds	r3, #1
    ae92:	e7f9      	b.n	ae88 <memmove+0xe>
    ae94:	5c8b      	ldrb	r3, [r1, r2]
    ae96:	5483      	strb	r3, [r0, r2]
    ae98:	3a01      	subs	r2, #1
    ae9a:	d2fb      	bcs.n	ae94 <memmove+0x1a>
    ae9c:	bd10      	pop	{r4, pc}

0000ae9e <memset>:
    ae9e:	0003      	movs	r3, r0
    aea0:	1882      	adds	r2, r0, r2
    aea2:	4293      	cmp	r3, r2
    aea4:	d100      	bne.n	aea8 <memset+0xa>
    aea6:	4770      	bx	lr
    aea8:	7019      	strb	r1, [r3, #0]
    aeaa:	3301      	adds	r3, #1
    aeac:	e7f9      	b.n	aea2 <memset+0x4>
	...

0000aeb0 <validate_structure>:
    aeb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aeb2:	6801      	ldr	r1, [r0, #0]
    aeb4:	0004      	movs	r4, r0
    aeb6:	293b      	cmp	r1, #59	; 0x3b
    aeb8:	d90b      	bls.n	aed2 <validate_structure+0x22>
    aeba:	223c      	movs	r2, #60	; 0x3c
    aebc:	4668      	mov	r0, sp
    aebe:	f001 fd1a 	bl	c8f6 <div>
    aec2:	6863      	ldr	r3, [r4, #4]
    aec4:	9900      	ldr	r1, [sp, #0]
    aec6:	9a01      	ldr	r2, [sp, #4]
    aec8:	185b      	adds	r3, r3, r1
    aeca:	6063      	str	r3, [r4, #4]
    aecc:	2a00      	cmp	r2, #0
    aece:	db6c      	blt.n	afaa <validate_structure+0xfa>
    aed0:	6022      	str	r2, [r4, #0]
    aed2:	6861      	ldr	r1, [r4, #4]
    aed4:	293b      	cmp	r1, #59	; 0x3b
    aed6:	d90b      	bls.n	aef0 <validate_structure+0x40>
    aed8:	223c      	movs	r2, #60	; 0x3c
    aeda:	4668      	mov	r0, sp
    aedc:	f001 fd0b 	bl	c8f6 <div>
    aee0:	68a3      	ldr	r3, [r4, #8]
    aee2:	9900      	ldr	r1, [sp, #0]
    aee4:	9a01      	ldr	r2, [sp, #4]
    aee6:	185b      	adds	r3, r3, r1
    aee8:	60a3      	str	r3, [r4, #8]
    aeea:	2a00      	cmp	r2, #0
    aeec:	db62      	blt.n	afb4 <validate_structure+0x104>
    aeee:	6062      	str	r2, [r4, #4]
    aef0:	68a1      	ldr	r1, [r4, #8]
    aef2:	2917      	cmp	r1, #23
    aef4:	d90b      	bls.n	af0e <validate_structure+0x5e>
    aef6:	2218      	movs	r2, #24
    aef8:	4668      	mov	r0, sp
    aefa:	f001 fcfc 	bl	c8f6 <div>
    aefe:	68e3      	ldr	r3, [r4, #12]
    af00:	9900      	ldr	r1, [sp, #0]
    af02:	9a01      	ldr	r2, [sp, #4]
    af04:	185b      	adds	r3, r3, r1
    af06:	60e3      	str	r3, [r4, #12]
    af08:	2a00      	cmp	r2, #0
    af0a:	db58      	blt.n	afbe <validate_structure+0x10e>
    af0c:	60a2      	str	r2, [r4, #8]
    af0e:	6921      	ldr	r1, [r4, #16]
    af10:	290b      	cmp	r1, #11
    af12:	d90b      	bls.n	af2c <validate_structure+0x7c>
    af14:	220c      	movs	r2, #12
    af16:	4668      	mov	r0, sp
    af18:	f001 fced 	bl	c8f6 <div>
    af1c:	6963      	ldr	r3, [r4, #20]
    af1e:	9900      	ldr	r1, [sp, #0]
    af20:	9a01      	ldr	r2, [sp, #4]
    af22:	185b      	adds	r3, r3, r1
    af24:	6163      	str	r3, [r4, #20]
    af26:	2a00      	cmp	r2, #0
    af28:	db4e      	blt.n	afc8 <validate_structure+0x118>
    af2a:	6122      	str	r2, [r4, #16]
    af2c:	6965      	ldr	r5, [r4, #20]
    af2e:	231c      	movs	r3, #28
    af30:	07aa      	lsls	r2, r5, #30
    af32:	d10f      	bne.n	af54 <validate_structure+0xa4>
    af34:	2164      	movs	r1, #100	; 0x64
    af36:	0028      	movs	r0, r5
    af38:	f7fc ffc6 	bl	7ec8 <__aeabi_idivmod>
    af3c:	231d      	movs	r3, #29
    af3e:	2900      	cmp	r1, #0
    af40:	d108      	bne.n	af54 <validate_structure+0xa4>
    af42:	4b3d      	ldr	r3, [pc, #244]	; (b038 <validate_structure+0x188>)
    af44:	3191      	adds	r1, #145	; 0x91
    af46:	18e8      	adds	r0, r5, r3
    af48:	31ff      	adds	r1, #255	; 0xff
    af4a:	f7fc ffbd 	bl	7ec8 <__aeabi_idivmod>
    af4e:	424b      	negs	r3, r1
    af50:	414b      	adcs	r3, r1
    af52:	331c      	adds	r3, #28
    af54:	68e2      	ldr	r2, [r4, #12]
    af56:	2a00      	cmp	r2, #0
    af58:	dd3b      	ble.n	afd2 <validate_structure+0x122>
    af5a:	2602      	movs	r6, #2
    af5c:	4f37      	ldr	r7, [pc, #220]	; (b03c <validate_structure+0x18c>)
    af5e:	6921      	ldr	r1, [r4, #16]
    af60:	68e2      	ldr	r2, [r4, #12]
    af62:	2901      	cmp	r1, #1
    af64:	d061      	beq.n	b02a <validate_structure+0x17a>
    af66:	0088      	lsls	r0, r1, #2
    af68:	59c0      	ldr	r0, [r0, r7]
    af6a:	4282      	cmp	r2, r0
    af6c:	dd35      	ble.n	afda <validate_structure+0x12a>
    af6e:	1a12      	subs	r2, r2, r0
    af70:	3101      	adds	r1, #1
    af72:	60e2      	str	r2, [r4, #12]
    af74:	6121      	str	r1, [r4, #16]
    af76:	290c      	cmp	r1, #12
    af78:	d1f1      	bne.n	af5e <validate_structure+0xae>
    af7a:	2300      	movs	r3, #0
    af7c:	6965      	ldr	r5, [r4, #20]
    af7e:	6123      	str	r3, [r4, #16]
    af80:	1c68      	adds	r0, r5, #1
    af82:	6160      	str	r0, [r4, #20]
    af84:	331c      	adds	r3, #28
    af86:	0782      	lsls	r2, r0, #30
    af88:	d1e9      	bne.n	af5e <validate_structure+0xae>
    af8a:	3158      	adds	r1, #88	; 0x58
    af8c:	f7fc ff9c 	bl	7ec8 <__aeabi_idivmod>
    af90:	231d      	movs	r3, #29
    af92:	2900      	cmp	r1, #0
    af94:	d1e3      	bne.n	af5e <validate_structure+0xae>
    af96:	4b2a      	ldr	r3, [pc, #168]	; (b040 <validate_structure+0x190>)
    af98:	3191      	adds	r1, #145	; 0x91
    af9a:	18e8      	adds	r0, r5, r3
    af9c:	31ff      	adds	r1, #255	; 0xff
    af9e:	f7fc ff93 	bl	7ec8 <__aeabi_idivmod>
    afa2:	424b      	negs	r3, r1
    afa4:	414b      	adcs	r3, r1
    afa6:	331c      	adds	r3, #28
    afa8:	e7d9      	b.n	af5e <validate_structure+0xae>
    afaa:	323c      	adds	r2, #60	; 0x3c
    afac:	3b01      	subs	r3, #1
    afae:	6022      	str	r2, [r4, #0]
    afb0:	6063      	str	r3, [r4, #4]
    afb2:	e78e      	b.n	aed2 <validate_structure+0x22>
    afb4:	323c      	adds	r2, #60	; 0x3c
    afb6:	3b01      	subs	r3, #1
    afb8:	6062      	str	r2, [r4, #4]
    afba:	60a3      	str	r3, [r4, #8]
    afbc:	e798      	b.n	aef0 <validate_structure+0x40>
    afbe:	3218      	adds	r2, #24
    afc0:	3b01      	subs	r3, #1
    afc2:	60a2      	str	r2, [r4, #8]
    afc4:	60e3      	str	r3, [r4, #12]
    afc6:	e7a2      	b.n	af0e <validate_structure+0x5e>
    afc8:	320c      	adds	r2, #12
    afca:	3b01      	subs	r3, #1
    afcc:	6122      	str	r2, [r4, #16]
    afce:	6163      	str	r3, [r4, #20]
    afd0:	e7ac      	b.n	af2c <validate_structure+0x7c>
    afd2:	271d      	movs	r7, #29
    afd4:	68e6      	ldr	r6, [r4, #12]
    afd6:	2e00      	cmp	r6, #0
    afd8:	dd00      	ble.n	afdc <validate_structure+0x12c>
    afda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    afdc:	6922      	ldr	r2, [r4, #16]
    afde:	3a01      	subs	r2, #1
    afe0:	6122      	str	r2, [r4, #16]
    afe2:	3201      	adds	r2, #1
    afe4:	d117      	bne.n	b016 <validate_structure+0x166>
    afe6:	230b      	movs	r3, #11
    afe8:	2203      	movs	r2, #3
    afea:	6965      	ldr	r5, [r4, #20]
    afec:	6123      	str	r3, [r4, #16]
    afee:	1e68      	subs	r0, r5, #1
    aff0:	6160      	str	r0, [r4, #20]
    aff2:	3311      	adds	r3, #17
    aff4:	4210      	tst	r0, r2
    aff6:	d10e      	bne.n	b016 <validate_structure+0x166>
    aff8:	2164      	movs	r1, #100	; 0x64
    affa:	f7fc ff65 	bl	7ec8 <__aeabi_idivmod>
    affe:	003b      	movs	r3, r7
    b000:	2900      	cmp	r1, #0
    b002:	d108      	bne.n	b016 <validate_structure+0x166>
    b004:	4b0f      	ldr	r3, [pc, #60]	; (b044 <validate_structure+0x194>)
    b006:	3191      	adds	r1, #145	; 0x91
    b008:	18e8      	adds	r0, r5, r3
    b00a:	31ff      	adds	r1, #255	; 0xff
    b00c:	f7fc ff5c 	bl	7ec8 <__aeabi_idivmod>
    b010:	424b      	negs	r3, r1
    b012:	414b      	adcs	r3, r1
    b014:	331c      	adds	r3, #28
    b016:	6921      	ldr	r1, [r4, #16]
    b018:	001a      	movs	r2, r3
    b01a:	2901      	cmp	r1, #1
    b01c:	d002      	beq.n	b024 <validate_structure+0x174>
    b01e:	4a07      	ldr	r2, [pc, #28]	; (b03c <validate_structure+0x18c>)
    b020:	0089      	lsls	r1, r1, #2
    b022:	588a      	ldr	r2, [r1, r2]
    b024:	1996      	adds	r6, r2, r6
    b026:	60e6      	str	r6, [r4, #12]
    b028:	e7d4      	b.n	afd4 <validate_structure+0x124>
    b02a:	4293      	cmp	r3, r2
    b02c:	dad5      	bge.n	afda <validate_structure+0x12a>
    b02e:	1ad2      	subs	r2, r2, r3
    b030:	60e2      	str	r2, [r4, #12]
    b032:	6126      	str	r6, [r4, #16]
    b034:	e793      	b.n	af5e <validate_structure+0xae>
    b036:	46c0      	nop			; (mov r8, r8)
    b038:	0000076c 	.word	0x0000076c
    b03c:	000100b8 	.word	0x000100b8
    b040:	0000076d 	.word	0x0000076d
    b044:	0000076b 	.word	0x0000076b

0000b048 <mktime>:
    b048:	b5f0      	push	{r4, r5, r6, r7, lr}
    b04a:	b087      	sub	sp, #28
    b04c:	0004      	movs	r4, r0
    b04e:	f002 fcab 	bl	d9a8 <__gettzinfo>
    b052:	9004      	str	r0, [sp, #16]
    b054:	0020      	movs	r0, r4
    b056:	f7ff ff2b 	bl	aeb0 <validate_structure>
    b05a:	233c      	movs	r3, #60	; 0x3c
    b05c:	6862      	ldr	r2, [r4, #4]
    b05e:	68a1      	ldr	r1, [r4, #8]
    b060:	4353      	muls	r3, r2
    b062:	6822      	ldr	r2, [r4, #0]
    b064:	6965      	ldr	r5, [r4, #20]
    b066:	189b      	adds	r3, r3, r2
    b068:	22e1      	movs	r2, #225	; 0xe1
    b06a:	0112      	lsls	r2, r2, #4
    b06c:	434a      	muls	r2, r1
    b06e:	189b      	adds	r3, r3, r2
    b070:	68e2      	ldr	r2, [r4, #12]
    b072:	9303      	str	r3, [sp, #12]
    b074:	6923      	ldr	r3, [r4, #16]
    b076:	1e50      	subs	r0, r2, #1
    b078:	4ab1      	ldr	r2, [pc, #708]	; (b340 <mktime+0x2f8>)
    b07a:	0099      	lsls	r1, r3, #2
    b07c:	588a      	ldr	r2, [r1, r2]
    b07e:	1882      	adds	r2, r0, r2
    b080:	9201      	str	r2, [sp, #4]
    b082:	2b01      	cmp	r3, #1
    b084:	dd12      	ble.n	b0ac <mktime+0x64>
    b086:	07ab      	lsls	r3, r5, #30
    b088:	d110      	bne.n	b0ac <mktime+0x64>
    b08a:	2164      	movs	r1, #100	; 0x64
    b08c:	0028      	movs	r0, r5
    b08e:	f7fc ff1b 	bl	7ec8 <__aeabi_idivmod>
    b092:	2900      	cmp	r1, #0
    b094:	d107      	bne.n	b0a6 <mktime+0x5e>
    b096:	4bab      	ldr	r3, [pc, #684]	; (b344 <mktime+0x2fc>)
    b098:	3191      	adds	r1, #145	; 0x91
    b09a:	31ff      	adds	r1, #255	; 0xff
    b09c:	18e8      	adds	r0, r5, r3
    b09e:	f7fc ff13 	bl	7ec8 <__aeabi_idivmod>
    b0a2:	2900      	cmp	r1, #0
    b0a4:	d102      	bne.n	b0ac <mktime+0x64>
    b0a6:	9b01      	ldr	r3, [sp, #4]
    b0a8:	3301      	adds	r3, #1
    b0aa:	9301      	str	r3, [sp, #4]
    b0ac:	9b01      	ldr	r3, [sp, #4]
    b0ae:	4aa6      	ldr	r2, [pc, #664]	; (b348 <mktime+0x300>)
    b0b0:	61e3      	str	r3, [r4, #28]
    b0b2:	4ba6      	ldr	r3, [pc, #664]	; (b34c <mktime+0x304>)
    b0b4:	18eb      	adds	r3, r5, r3
    b0b6:	4293      	cmp	r3, r2
    b0b8:	d900      	bls.n	b0bc <mktime+0x74>
    b0ba:	e0f8      	b.n	b2ae <mktime+0x266>
    b0bc:	2346      	movs	r3, #70	; 0x46
    b0be:	9302      	str	r3, [sp, #8]
    b0c0:	2d46      	cmp	r5, #70	; 0x46
    b0c2:	dc00      	bgt.n	b0c6 <mktime+0x7e>
    b0c4:	e072      	b.n	b1ac <mktime+0x164>
    b0c6:	27b7      	movs	r7, #183	; 0xb7
    b0c8:	26c8      	movs	r6, #200	; 0xc8
    b0ca:	007f      	lsls	r7, r7, #1
    b0cc:	0076      	lsls	r6, r6, #1
    b0ce:	2203      	movs	r2, #3
    b0d0:	9b02      	ldr	r3, [sp, #8]
    b0d2:	4213      	tst	r3, r2
    b0d4:	d168      	bne.n	b1a8 <mktime+0x160>
    b0d6:	0018      	movs	r0, r3
    b0d8:	2164      	movs	r1, #100	; 0x64
    b0da:	f7fc fef5 	bl	7ec8 <__aeabi_idivmod>
    b0de:	003b      	movs	r3, r7
    b0e0:	2900      	cmp	r1, #0
    b0e2:	d109      	bne.n	b0f8 <mktime+0xb0>
    b0e4:	9b02      	ldr	r3, [sp, #8]
    b0e6:	4a97      	ldr	r2, [pc, #604]	; (b344 <mktime+0x2fc>)
    b0e8:	0031      	movs	r1, r6
    b0ea:	1898      	adds	r0, r3, r2
    b0ec:	f7fc feec 	bl	7ec8 <__aeabi_idivmod>
    b0f0:	424b      	negs	r3, r1
    b0f2:	414b      	adcs	r3, r1
    b0f4:	336e      	adds	r3, #110	; 0x6e
    b0f6:	33ff      	adds	r3, #255	; 0xff
    b0f8:	9a01      	ldr	r2, [sp, #4]
    b0fa:	18d3      	adds	r3, r2, r3
    b0fc:	9301      	str	r3, [sp, #4]
    b0fe:	9b02      	ldr	r3, [sp, #8]
    b100:	3301      	adds	r3, #1
    b102:	9302      	str	r3, [sp, #8]
    b104:	429d      	cmp	r5, r3
    b106:	d1e2      	bne.n	b0ce <mktime+0x86>
    b108:	9a01      	ldr	r2, [sp, #4]
    b10a:	4b91      	ldr	r3, [pc, #580]	; (b350 <mktime+0x308>)
    b10c:	4353      	muls	r3, r2
    b10e:	9a03      	ldr	r2, [sp, #12]
    b110:	189b      	adds	r3, r3, r2
    b112:	9303      	str	r3, [sp, #12]
    b114:	f001 f964 	bl	c3e0 <__tz_lock>
    b118:	f001 f964 	bl	c3e4 <_tzset_unlocked>
    b11c:	4b8d      	ldr	r3, [pc, #564]	; (b354 <mktime+0x30c>)
    b11e:	681d      	ldr	r5, [r3, #0]
    b120:	2d00      	cmp	r5, #0
    b122:	d100      	bne.n	b126 <mktime+0xde>
    b124:	e107      	b.n	b336 <mktime+0x2ee>
    b126:	6963      	ldr	r3, [r4, #20]
    b128:	4a86      	ldr	r2, [pc, #536]	; (b344 <mktime+0x2fc>)
    b12a:	6a26      	ldr	r6, [r4, #32]
    b12c:	1898      	adds	r0, r3, r2
    b12e:	2e00      	cmp	r6, #0
    b130:	dd00      	ble.n	b134 <mktime+0xec>
    b132:	2601      	movs	r6, #1
    b134:	9b04      	ldr	r3, [sp, #16]
    b136:	685b      	ldr	r3, [r3, #4]
    b138:	9305      	str	r3, [sp, #20]
    b13a:	4298      	cmp	r0, r3
    b13c:	d000      	beq.n	b140 <mktime+0xf8>
    b13e:	e073      	b.n	b228 <mktime+0x1e0>
    b140:	9b04      	ldr	r3, [sp, #16]
    b142:	9d03      	ldr	r5, [sp, #12]
    b144:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    b146:	69db      	ldr	r3, [r3, #28]
    b148:	9305      	str	r3, [sp, #20]
    b14a:	1a1a      	subs	r2, r3, r0
    b14c:	9b04      	ldr	r3, [sp, #16]
    b14e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    b150:	6a1b      	ldr	r3, [r3, #32]
    b152:	1acf      	subs	r7, r1, r3
    b154:	42bd      	cmp	r5, r7
    b156:	db00      	blt.n	b15a <mktime+0x112>
    b158:	e06d      	b.n	b236 <mktime+0x1ee>
    b15a:	9904      	ldr	r1, [sp, #16]
    b15c:	6809      	ldr	r1, [r1, #0]
    b15e:	2900      	cmp	r1, #0
    b160:	d100      	bne.n	b164 <mktime+0x11c>
    b162:	e06d      	b.n	b240 <mktime+0x1f8>
    b164:	9903      	ldr	r1, [sp, #12]
    b166:	4291      	cmp	r1, r2
    b168:	da00      	bge.n	b16c <mktime+0x124>
    b16a:	e0e1      	b.n	b330 <mktime+0x2e8>
    b16c:	2501      	movs	r5, #1
    b16e:	42b9      	cmp	r1, r7
    b170:	db00      	blt.n	b174 <mktime+0x12c>
    b172:	2500      	movs	r5, #0
    b174:	2e00      	cmp	r6, #0
    b176:	db00      	blt.n	b17a <mktime+0x132>
    b178:	e0a0      	b.n	b2bc <mktime+0x274>
    b17a:	2d01      	cmp	r5, #1
    b17c:	d000      	beq.n	b180 <mktime+0x138>
    b17e:	e0da      	b.n	b336 <mktime+0x2ee>
    b180:	2501      	movs	r5, #1
    b182:	9b04      	ldr	r3, [sp, #16]
    b184:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    b186:	9b03      	ldr	r3, [sp, #12]
    b188:	199e      	adds	r6, r3, r6
    b18a:	f001 f92a 	bl	c3e2 <__tz_unlock>
    b18e:	9801      	ldr	r0, [sp, #4]
    b190:	6225      	str	r5, [r4, #32]
    b192:	3004      	adds	r0, #4
    b194:	2107      	movs	r1, #7
    b196:	f7fc fe97 	bl	7ec8 <__aeabi_idivmod>
    b19a:	2900      	cmp	r1, #0
    b19c:	da00      	bge.n	b1a0 <mktime+0x158>
    b19e:	e084      	b.n	b2aa <mktime+0x262>
    b1a0:	61a1      	str	r1, [r4, #24]
    b1a2:	0030      	movs	r0, r6
    b1a4:	b007      	add	sp, #28
    b1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1a8:	236e      	movs	r3, #110	; 0x6e
    b1aa:	e7a4      	b.n	b0f6 <mktime+0xae>
    b1ac:	429d      	cmp	r5, r3
    b1ae:	d0ab      	beq.n	b108 <mktime+0xc0>
    b1b0:	2645      	movs	r6, #69	; 0x45
    b1b2:	2703      	movs	r7, #3
    b1b4:	42ae      	cmp	r6, r5
    b1b6:	dc17      	bgt.n	b1e8 <mktime+0x1a0>
    b1b8:	423d      	tst	r5, r7
    b1ba:	d130      	bne.n	b21e <mktime+0x1d6>
    b1bc:	2164      	movs	r1, #100	; 0x64
    b1be:	0028      	movs	r0, r5
    b1c0:	f7fc fe82 	bl	7ec8 <__aeabi_idivmod>
    b1c4:	2900      	cmp	r1, #0
    b1c6:	d12c      	bne.n	b222 <mktime+0x1da>
    b1c8:	4b5e      	ldr	r3, [pc, #376]	; (b344 <mktime+0x2fc>)
    b1ca:	3191      	adds	r1, #145	; 0x91
    b1cc:	18e8      	adds	r0, r5, r3
    b1ce:	31ff      	adds	r1, #255	; 0xff
    b1d0:	f7fc fe7a 	bl	7ec8 <__aeabi_idivmod>
    b1d4:	000b      	movs	r3, r1
    b1d6:	4259      	negs	r1, r3
    b1d8:	4159      	adcs	r1, r3
    b1da:	316e      	adds	r1, #110	; 0x6e
    b1dc:	31ff      	adds	r1, #255	; 0xff
    b1de:	9b01      	ldr	r3, [sp, #4]
    b1e0:	9502      	str	r5, [sp, #8]
    b1e2:	1a5b      	subs	r3, r3, r1
    b1e4:	9301      	str	r3, [sp, #4]
    b1e6:	e78f      	b.n	b108 <mktime+0xc0>
    b1e8:	423e      	tst	r6, r7
    b1ea:	d116      	bne.n	b21a <mktime+0x1d2>
    b1ec:	2164      	movs	r1, #100	; 0x64
    b1ee:	0030      	movs	r0, r6
    b1f0:	f7fc fe6a 	bl	7ec8 <__aeabi_idivmod>
    b1f4:	23b7      	movs	r3, #183	; 0xb7
    b1f6:	005b      	lsls	r3, r3, #1
    b1f8:	2900      	cmp	r1, #0
    b1fa:	d109      	bne.n	b210 <mktime+0x1c8>
    b1fc:	4b51      	ldr	r3, [pc, #324]	; (b344 <mktime+0x2fc>)
    b1fe:	3191      	adds	r1, #145	; 0x91
    b200:	18f0      	adds	r0, r6, r3
    b202:	31ff      	adds	r1, #255	; 0xff
    b204:	f7fc fe60 	bl	7ec8 <__aeabi_idivmod>
    b208:	424b      	negs	r3, r1
    b20a:	414b      	adcs	r3, r1
    b20c:	336e      	adds	r3, #110	; 0x6e
    b20e:	33ff      	adds	r3, #255	; 0xff
    b210:	9a01      	ldr	r2, [sp, #4]
    b212:	3e01      	subs	r6, #1
    b214:	1ad3      	subs	r3, r2, r3
    b216:	9301      	str	r3, [sp, #4]
    b218:	e7cc      	b.n	b1b4 <mktime+0x16c>
    b21a:	236e      	movs	r3, #110	; 0x6e
    b21c:	e7f7      	b.n	b20e <mktime+0x1c6>
    b21e:	216e      	movs	r1, #110	; 0x6e
    b220:	e7dc      	b.n	b1dc <mktime+0x194>
    b222:	21b7      	movs	r1, #183	; 0xb7
    b224:	0049      	lsls	r1, r1, #1
    b226:	e7da      	b.n	b1de <mktime+0x196>
    b228:	f001 f82c 	bl	c284 <__tzcalc_limits>
    b22c:	2800      	cmp	r0, #0
    b22e:	d000      	beq.n	b232 <mktime+0x1ea>
    b230:	e786      	b.n	b140 <mktime+0xf8>
    b232:	0035      	movs	r5, r6
    b234:	e7a1      	b.n	b17a <mktime+0x132>
    b236:	9d03      	ldr	r5, [sp, #12]
    b238:	1a09      	subs	r1, r1, r0
    b23a:	428d      	cmp	r5, r1
    b23c:	dbf9      	blt.n	b232 <mktime+0x1ea>
    b23e:	e78c      	b.n	b15a <mktime+0x112>
    b240:	9d03      	ldr	r5, [sp, #12]
    b242:	4295      	cmp	r5, r2
    b244:	da36      	bge.n	b2b4 <mktime+0x26c>
    b246:	9a03      	ldr	r2, [sp, #12]
    b248:	2501      	movs	r5, #1
    b24a:	42ba      	cmp	r2, r7
    b24c:	da00      	bge.n	b250 <mktime+0x208>
    b24e:	e791      	b.n	b174 <mktime+0x12c>
    b250:	000d      	movs	r5, r1
    b252:	e78f      	b.n	b174 <mktime+0x12c>
    b254:	2701      	movs	r7, #1
    b256:	427f      	negs	r7, r7
    b258:	e04b      	b.n	b2f2 <mktime+0x2aa>
    b25a:	21b6      	movs	r1, #182	; 0xb6
    b25c:	0049      	lsls	r1, r1, #1
    b25e:	61e1      	str	r1, [r4, #28]
    b260:	e78b      	b.n	b17a <mktime+0x132>
    b262:	216e      	movs	r1, #110	; 0x6e
    b264:	e062      	b.n	b32c <mktime+0x2e4>
    b266:	9a02      	ldr	r2, [sp, #8]
    b268:	421a      	tst	r2, r3
    b26a:	d117      	bne.n	b29c <mktime+0x254>
    b26c:	2164      	movs	r1, #100	; 0x64
    b26e:	0010      	movs	r0, r2
    b270:	f7fc fe2a 	bl	7ec8 <__aeabi_idivmod>
    b274:	2900      	cmp	r1, #0
    b276:	d113      	bne.n	b2a0 <mktime+0x258>
    b278:	4a32      	ldr	r2, [pc, #200]	; (b344 <mktime+0x2fc>)
    b27a:	9b02      	ldr	r3, [sp, #8]
    b27c:	4694      	mov	ip, r2
    b27e:	3191      	adds	r1, #145	; 0x91
    b280:	4463      	add	r3, ip
    b282:	0018      	movs	r0, r3
    b284:	31ff      	adds	r1, #255	; 0xff
    b286:	f7fc fe1f 	bl	7ec8 <__aeabi_idivmod>
    b28a:	000b      	movs	r3, r1
    b28c:	4259      	negs	r1, r3
    b28e:	4159      	adcs	r1, r3
    b290:	316e      	adds	r1, #110	; 0x6e
    b292:	31ff      	adds	r1, #255	; 0xff
    b294:	42b9      	cmp	r1, r7
    b296:	dd06      	ble.n	b2a6 <mktime+0x25e>
    b298:	61e7      	str	r7, [r4, #28]
    b29a:	e76e      	b.n	b17a <mktime+0x132>
    b29c:	216e      	movs	r1, #110	; 0x6e
    b29e:	e7f8      	b.n	b292 <mktime+0x24a>
    b2a0:	21b7      	movs	r1, #183	; 0xb7
    b2a2:	0049      	lsls	r1, r1, #1
    b2a4:	e7f6      	b.n	b294 <mktime+0x24c>
    b2a6:	1a7f      	subs	r7, r7, r1
    b2a8:	e7f6      	b.n	b298 <mktime+0x250>
    b2aa:	3107      	adds	r1, #7
    b2ac:	e778      	b.n	b1a0 <mktime+0x158>
    b2ae:	2601      	movs	r6, #1
    b2b0:	4276      	negs	r6, r6
    b2b2:	e776      	b.n	b1a2 <mktime+0x15a>
    b2b4:	2501      	movs	r5, #1
    b2b6:	2e00      	cmp	r6, #0
    b2b8:	da00      	bge.n	b2bc <mktime+0x274>
    b2ba:	e761      	b.n	b180 <mktime+0x138>
    b2bc:	406e      	eors	r6, r5
    b2be:	2e01      	cmp	r6, #1
    b2c0:	d000      	beq.n	b2c4 <mktime+0x27c>
    b2c2:	e75a      	b.n	b17a <mktime+0x132>
    b2c4:	1a1b      	subs	r3, r3, r0
    b2c6:	2d00      	cmp	r5, #0
    b2c8:	d100      	bne.n	b2cc <mktime+0x284>
    b2ca:	425b      	negs	r3, r3
    b2cc:	6822      	ldr	r2, [r4, #0]
    b2ce:	0020      	movs	r0, r4
    b2d0:	18d2      	adds	r2, r2, r3
    b2d2:	6022      	str	r2, [r4, #0]
    b2d4:	9a03      	ldr	r2, [sp, #12]
    b2d6:	68e7      	ldr	r7, [r4, #12]
    b2d8:	18d3      	adds	r3, r2, r3
    b2da:	9303      	str	r3, [sp, #12]
    b2dc:	f7ff fde8 	bl	aeb0 <validate_structure>
    b2e0:	68e3      	ldr	r3, [r4, #12]
    b2e2:	1bdf      	subs	r7, r3, r7
    b2e4:	d100      	bne.n	b2e8 <mktime+0x2a0>
    b2e6:	e748      	b.n	b17a <mktime+0x132>
    b2e8:	2f01      	cmp	r7, #1
    b2ea:	dcb3      	bgt.n	b254 <mktime+0x20c>
    b2ec:	1c7b      	adds	r3, r7, #1
    b2ee:	da00      	bge.n	b2f2 <mktime+0x2aa>
    b2f0:	0037      	movs	r7, r6
    b2f2:	9b01      	ldr	r3, [sp, #4]
    b2f4:	69e2      	ldr	r2, [r4, #28]
    b2f6:	19db      	adds	r3, r3, r7
    b2f8:	9301      	str	r3, [sp, #4]
    b2fa:	2303      	movs	r3, #3
    b2fc:	18bf      	adds	r7, r7, r2
    b2fe:	d5b2      	bpl.n	b266 <mktime+0x21e>
    b300:	9a02      	ldr	r2, [sp, #8]
    b302:	1e50      	subs	r0, r2, #1
    b304:	4218      	tst	r0, r3
    b306:	d1a8      	bne.n	b25a <mktime+0x212>
    b308:	2164      	movs	r1, #100	; 0x64
    b30a:	f7fc fddd 	bl	7ec8 <__aeabi_idivmod>
    b30e:	2900      	cmp	r1, #0
    b310:	d1a7      	bne.n	b262 <mktime+0x21a>
    b312:	4a11      	ldr	r2, [pc, #68]	; (b358 <mktime+0x310>)
    b314:	9b02      	ldr	r3, [sp, #8]
    b316:	4694      	mov	ip, r2
    b318:	3191      	adds	r1, #145	; 0x91
    b31a:	4463      	add	r3, ip
    b31c:	0018      	movs	r0, r3
    b31e:	31ff      	adds	r1, #255	; 0xff
    b320:	f7fc fdd2 	bl	7ec8 <__aeabi_idivmod>
    b324:	000b      	movs	r3, r1
    b326:	4259      	negs	r1, r3
    b328:	4159      	adcs	r1, r3
    b32a:	316d      	adds	r1, #109	; 0x6d
    b32c:	31ff      	adds	r1, #255	; 0xff
    b32e:	e796      	b.n	b25e <mktime+0x216>
    b330:	2500      	movs	r5, #0
    b332:	2e00      	cmp	r6, #0
    b334:	dac2      	bge.n	b2bc <mktime+0x274>
    b336:	9b04      	ldr	r3, [sp, #16]
    b338:	6a1e      	ldr	r6, [r3, #32]
    b33a:	9b03      	ldr	r3, [sp, #12]
    b33c:	199e      	adds	r6, r3, r6
    b33e:	e724      	b.n	b18a <mktime+0x142>
    b340:	000100e8 	.word	0x000100e8
    b344:	0000076c 	.word	0x0000076c
    b348:	00004e20 	.word	0x00004e20
    b34c:	00002710 	.word	0x00002710
    b350:	00015180 	.word	0x00015180
    b354:	20000f00 	.word	0x20000f00
    b358:	0000076b 	.word	0x0000076b

0000b35c <_free_r>:
    b35c:	b570      	push	{r4, r5, r6, lr}
    b35e:	0005      	movs	r5, r0
    b360:	2900      	cmp	r1, #0
    b362:	d010      	beq.n	b386 <_free_r+0x2a>
    b364:	1f0c      	subs	r4, r1, #4
    b366:	6823      	ldr	r3, [r4, #0]
    b368:	2b00      	cmp	r3, #0
    b36a:	da00      	bge.n	b36e <_free_r+0x12>
    b36c:	18e4      	adds	r4, r4, r3
    b36e:	0028      	movs	r0, r5
    b370:	f002 fba1 	bl	dab6 <__malloc_lock>
    b374:	4a1d      	ldr	r2, [pc, #116]	; (b3ec <_free_r+0x90>)
    b376:	6813      	ldr	r3, [r2, #0]
    b378:	2b00      	cmp	r3, #0
    b37a:	d105      	bne.n	b388 <_free_r+0x2c>
    b37c:	6063      	str	r3, [r4, #4]
    b37e:	6014      	str	r4, [r2, #0]
    b380:	0028      	movs	r0, r5
    b382:	f002 fb99 	bl	dab8 <__malloc_unlock>
    b386:	bd70      	pop	{r4, r5, r6, pc}
    b388:	42a3      	cmp	r3, r4
    b38a:	d909      	bls.n	b3a0 <_free_r+0x44>
    b38c:	6821      	ldr	r1, [r4, #0]
    b38e:	1860      	adds	r0, r4, r1
    b390:	4283      	cmp	r3, r0
    b392:	d1f3      	bne.n	b37c <_free_r+0x20>
    b394:	6818      	ldr	r0, [r3, #0]
    b396:	685b      	ldr	r3, [r3, #4]
    b398:	1841      	adds	r1, r0, r1
    b39a:	6021      	str	r1, [r4, #0]
    b39c:	e7ee      	b.n	b37c <_free_r+0x20>
    b39e:	0013      	movs	r3, r2
    b3a0:	685a      	ldr	r2, [r3, #4]
    b3a2:	2a00      	cmp	r2, #0
    b3a4:	d001      	beq.n	b3aa <_free_r+0x4e>
    b3a6:	42a2      	cmp	r2, r4
    b3a8:	d9f9      	bls.n	b39e <_free_r+0x42>
    b3aa:	6819      	ldr	r1, [r3, #0]
    b3ac:	1858      	adds	r0, r3, r1
    b3ae:	42a0      	cmp	r0, r4
    b3b0:	d10b      	bne.n	b3ca <_free_r+0x6e>
    b3b2:	6820      	ldr	r0, [r4, #0]
    b3b4:	1809      	adds	r1, r1, r0
    b3b6:	1858      	adds	r0, r3, r1
    b3b8:	6019      	str	r1, [r3, #0]
    b3ba:	4282      	cmp	r2, r0
    b3bc:	d1e0      	bne.n	b380 <_free_r+0x24>
    b3be:	6810      	ldr	r0, [r2, #0]
    b3c0:	6852      	ldr	r2, [r2, #4]
    b3c2:	1841      	adds	r1, r0, r1
    b3c4:	6019      	str	r1, [r3, #0]
    b3c6:	605a      	str	r2, [r3, #4]
    b3c8:	e7da      	b.n	b380 <_free_r+0x24>
    b3ca:	42a0      	cmp	r0, r4
    b3cc:	d902      	bls.n	b3d4 <_free_r+0x78>
    b3ce:	230c      	movs	r3, #12
    b3d0:	602b      	str	r3, [r5, #0]
    b3d2:	e7d5      	b.n	b380 <_free_r+0x24>
    b3d4:	6821      	ldr	r1, [r4, #0]
    b3d6:	1860      	adds	r0, r4, r1
    b3d8:	4282      	cmp	r2, r0
    b3da:	d103      	bne.n	b3e4 <_free_r+0x88>
    b3dc:	6810      	ldr	r0, [r2, #0]
    b3de:	6852      	ldr	r2, [r2, #4]
    b3e0:	1841      	adds	r1, r0, r1
    b3e2:	6021      	str	r1, [r4, #0]
    b3e4:	6062      	str	r2, [r4, #4]
    b3e6:	605c      	str	r4, [r3, #4]
    b3e8:	e7ca      	b.n	b380 <_free_r+0x24>
    b3ea:	46c0      	nop			; (mov r8, r8)
    b3ec:	20000edc 	.word	0x20000edc

0000b3f0 <_malloc_r>:
    b3f0:	2303      	movs	r3, #3
    b3f2:	b570      	push	{r4, r5, r6, lr}
    b3f4:	1ccd      	adds	r5, r1, #3
    b3f6:	439d      	bics	r5, r3
    b3f8:	3508      	adds	r5, #8
    b3fa:	0006      	movs	r6, r0
    b3fc:	2d0c      	cmp	r5, #12
    b3fe:	d21e      	bcs.n	b43e <_malloc_r+0x4e>
    b400:	250c      	movs	r5, #12
    b402:	42a9      	cmp	r1, r5
    b404:	d81d      	bhi.n	b442 <_malloc_r+0x52>
    b406:	0030      	movs	r0, r6
    b408:	f002 fb55 	bl	dab6 <__malloc_lock>
    b40c:	4a25      	ldr	r2, [pc, #148]	; (b4a4 <_malloc_r+0xb4>)
    b40e:	6814      	ldr	r4, [r2, #0]
    b410:	0021      	movs	r1, r4
    b412:	2900      	cmp	r1, #0
    b414:	d119      	bne.n	b44a <_malloc_r+0x5a>
    b416:	4c24      	ldr	r4, [pc, #144]	; (b4a8 <_malloc_r+0xb8>)
    b418:	6823      	ldr	r3, [r4, #0]
    b41a:	2b00      	cmp	r3, #0
    b41c:	d103      	bne.n	b426 <_malloc_r+0x36>
    b41e:	0030      	movs	r0, r6
    b420:	f000 fe02 	bl	c028 <_sbrk_r>
    b424:	6020      	str	r0, [r4, #0]
    b426:	0029      	movs	r1, r5
    b428:	0030      	movs	r0, r6
    b42a:	f000 fdfd 	bl	c028 <_sbrk_r>
    b42e:	1c43      	adds	r3, r0, #1
    b430:	d12c      	bne.n	b48c <_malloc_r+0x9c>
    b432:	230c      	movs	r3, #12
    b434:	0030      	movs	r0, r6
    b436:	6033      	str	r3, [r6, #0]
    b438:	f002 fb3e 	bl	dab8 <__malloc_unlock>
    b43c:	e003      	b.n	b446 <_malloc_r+0x56>
    b43e:	2d00      	cmp	r5, #0
    b440:	dadf      	bge.n	b402 <_malloc_r+0x12>
    b442:	230c      	movs	r3, #12
    b444:	6033      	str	r3, [r6, #0]
    b446:	2000      	movs	r0, #0
    b448:	bd70      	pop	{r4, r5, r6, pc}
    b44a:	680b      	ldr	r3, [r1, #0]
    b44c:	1b5b      	subs	r3, r3, r5
    b44e:	d41a      	bmi.n	b486 <_malloc_r+0x96>
    b450:	2b0b      	cmp	r3, #11
    b452:	d903      	bls.n	b45c <_malloc_r+0x6c>
    b454:	600b      	str	r3, [r1, #0]
    b456:	18cc      	adds	r4, r1, r3
    b458:	6025      	str	r5, [r4, #0]
    b45a:	e003      	b.n	b464 <_malloc_r+0x74>
    b45c:	428c      	cmp	r4, r1
    b45e:	d10e      	bne.n	b47e <_malloc_r+0x8e>
    b460:	6863      	ldr	r3, [r4, #4]
    b462:	6013      	str	r3, [r2, #0]
    b464:	0030      	movs	r0, r6
    b466:	f002 fb27 	bl	dab8 <__malloc_unlock>
    b46a:	0020      	movs	r0, r4
    b46c:	2207      	movs	r2, #7
    b46e:	300b      	adds	r0, #11
    b470:	1d23      	adds	r3, r4, #4
    b472:	4390      	bics	r0, r2
    b474:	1ac3      	subs	r3, r0, r3
    b476:	d0e7      	beq.n	b448 <_malloc_r+0x58>
    b478:	425a      	negs	r2, r3
    b47a:	50e2      	str	r2, [r4, r3]
    b47c:	e7e4      	b.n	b448 <_malloc_r+0x58>
    b47e:	684b      	ldr	r3, [r1, #4]
    b480:	6063      	str	r3, [r4, #4]
    b482:	000c      	movs	r4, r1
    b484:	e7ee      	b.n	b464 <_malloc_r+0x74>
    b486:	000c      	movs	r4, r1
    b488:	6849      	ldr	r1, [r1, #4]
    b48a:	e7c2      	b.n	b412 <_malloc_r+0x22>
    b48c:	2303      	movs	r3, #3
    b48e:	1cc4      	adds	r4, r0, #3
    b490:	439c      	bics	r4, r3
    b492:	42a0      	cmp	r0, r4
    b494:	d0e0      	beq.n	b458 <_malloc_r+0x68>
    b496:	1a21      	subs	r1, r4, r0
    b498:	0030      	movs	r0, r6
    b49a:	f000 fdc5 	bl	c028 <_sbrk_r>
    b49e:	1c43      	adds	r3, r0, #1
    b4a0:	d1da      	bne.n	b458 <_malloc_r+0x68>
    b4a2:	e7c6      	b.n	b432 <_malloc_r+0x42>
    b4a4:	20000edc 	.word	0x20000edc
    b4a8:	20000ee0 	.word	0x20000ee0

0000b4ac <__sfputc_r>:
    b4ac:	6893      	ldr	r3, [r2, #8]
    b4ae:	b510      	push	{r4, lr}
    b4b0:	3b01      	subs	r3, #1
    b4b2:	6093      	str	r3, [r2, #8]
    b4b4:	2b00      	cmp	r3, #0
    b4b6:	da05      	bge.n	b4c4 <__sfputc_r+0x18>
    b4b8:	6994      	ldr	r4, [r2, #24]
    b4ba:	42a3      	cmp	r3, r4
    b4bc:	db08      	blt.n	b4d0 <__sfputc_r+0x24>
    b4be:	b2cb      	uxtb	r3, r1
    b4c0:	2b0a      	cmp	r3, #10
    b4c2:	d005      	beq.n	b4d0 <__sfputc_r+0x24>
    b4c4:	6813      	ldr	r3, [r2, #0]
    b4c6:	1c58      	adds	r0, r3, #1
    b4c8:	6010      	str	r0, [r2, #0]
    b4ca:	7019      	strb	r1, [r3, #0]
    b4cc:	b2c8      	uxtb	r0, r1
    b4ce:	bd10      	pop	{r4, pc}
    b4d0:	f001 f932 	bl	c738 <__swbuf_r>
    b4d4:	e7fb      	b.n	b4ce <__sfputc_r+0x22>

0000b4d6 <__sfputs_r>:
    b4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4d8:	0006      	movs	r6, r0
    b4da:	000f      	movs	r7, r1
    b4dc:	0014      	movs	r4, r2
    b4de:	18d5      	adds	r5, r2, r3
    b4e0:	42ac      	cmp	r4, r5
    b4e2:	d101      	bne.n	b4e8 <__sfputs_r+0x12>
    b4e4:	2000      	movs	r0, #0
    b4e6:	e007      	b.n	b4f8 <__sfputs_r+0x22>
    b4e8:	7821      	ldrb	r1, [r4, #0]
    b4ea:	003a      	movs	r2, r7
    b4ec:	0030      	movs	r0, r6
    b4ee:	f7ff ffdd 	bl	b4ac <__sfputc_r>
    b4f2:	3401      	adds	r4, #1
    b4f4:	1c43      	adds	r3, r0, #1
    b4f6:	d1f3      	bne.n	b4e0 <__sfputs_r+0xa>
    b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000b4fc <_vfiprintf_r>:
    b4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4fe:	b09f      	sub	sp, #124	; 0x7c
    b500:	0006      	movs	r6, r0
    b502:	000f      	movs	r7, r1
    b504:	0014      	movs	r4, r2
    b506:	9305      	str	r3, [sp, #20]
    b508:	2800      	cmp	r0, #0
    b50a:	d004      	beq.n	b516 <_vfiprintf_r+0x1a>
    b50c:	6983      	ldr	r3, [r0, #24]
    b50e:	2b00      	cmp	r3, #0
    b510:	d101      	bne.n	b516 <_vfiprintf_r+0x1a>
    b512:	f002 f971 	bl	d7f8 <__sinit>
    b516:	4b7f      	ldr	r3, [pc, #508]	; (b714 <_vfiprintf_r+0x218>)
    b518:	429f      	cmp	r7, r3
    b51a:	d15c      	bne.n	b5d6 <_vfiprintf_r+0xda>
    b51c:	6877      	ldr	r7, [r6, #4]
    b51e:	89bb      	ldrh	r3, [r7, #12]
    b520:	071b      	lsls	r3, r3, #28
    b522:	d562      	bpl.n	b5ea <_vfiprintf_r+0xee>
    b524:	693b      	ldr	r3, [r7, #16]
    b526:	2b00      	cmp	r3, #0
    b528:	d05f      	beq.n	b5ea <_vfiprintf_r+0xee>
    b52a:	2300      	movs	r3, #0
    b52c:	ad06      	add	r5, sp, #24
    b52e:	616b      	str	r3, [r5, #20]
    b530:	3320      	adds	r3, #32
    b532:	766b      	strb	r3, [r5, #25]
    b534:	3310      	adds	r3, #16
    b536:	76ab      	strb	r3, [r5, #26]
    b538:	9402      	str	r4, [sp, #8]
    b53a:	9c02      	ldr	r4, [sp, #8]
    b53c:	7823      	ldrb	r3, [r4, #0]
    b53e:	2b00      	cmp	r3, #0
    b540:	d15d      	bne.n	b5fe <_vfiprintf_r+0x102>
    b542:	9b02      	ldr	r3, [sp, #8]
    b544:	1ae3      	subs	r3, r4, r3
    b546:	9304      	str	r3, [sp, #16]
    b548:	d00d      	beq.n	b566 <_vfiprintf_r+0x6a>
    b54a:	9b04      	ldr	r3, [sp, #16]
    b54c:	9a02      	ldr	r2, [sp, #8]
    b54e:	0039      	movs	r1, r7
    b550:	0030      	movs	r0, r6
    b552:	f7ff ffc0 	bl	b4d6 <__sfputs_r>
    b556:	1c43      	adds	r3, r0, #1
    b558:	d100      	bne.n	b55c <_vfiprintf_r+0x60>
    b55a:	e0cc      	b.n	b6f6 <_vfiprintf_r+0x1fa>
    b55c:	696a      	ldr	r2, [r5, #20]
    b55e:	9b04      	ldr	r3, [sp, #16]
    b560:	4694      	mov	ip, r2
    b562:	4463      	add	r3, ip
    b564:	616b      	str	r3, [r5, #20]
    b566:	7823      	ldrb	r3, [r4, #0]
    b568:	2b00      	cmp	r3, #0
    b56a:	d100      	bne.n	b56e <_vfiprintf_r+0x72>
    b56c:	e0c3      	b.n	b6f6 <_vfiprintf_r+0x1fa>
    b56e:	2201      	movs	r2, #1
    b570:	2300      	movs	r3, #0
    b572:	4252      	negs	r2, r2
    b574:	606a      	str	r2, [r5, #4]
    b576:	a902      	add	r1, sp, #8
    b578:	3254      	adds	r2, #84	; 0x54
    b57a:	1852      	adds	r2, r2, r1
    b57c:	3401      	adds	r4, #1
    b57e:	602b      	str	r3, [r5, #0]
    b580:	60eb      	str	r3, [r5, #12]
    b582:	60ab      	str	r3, [r5, #8]
    b584:	7013      	strb	r3, [r2, #0]
    b586:	65ab      	str	r3, [r5, #88]	; 0x58
    b588:	7821      	ldrb	r1, [r4, #0]
    b58a:	2205      	movs	r2, #5
    b58c:	4862      	ldr	r0, [pc, #392]	; (b718 <_vfiprintf_r+0x21c>)
    b58e:	f002 fa87 	bl	daa0 <memchr>
    b592:	1c63      	adds	r3, r4, #1
    b594:	469c      	mov	ip, r3
    b596:	2800      	cmp	r0, #0
    b598:	d135      	bne.n	b606 <_vfiprintf_r+0x10a>
    b59a:	6829      	ldr	r1, [r5, #0]
    b59c:	06cb      	lsls	r3, r1, #27
    b59e:	d504      	bpl.n	b5aa <_vfiprintf_r+0xae>
    b5a0:	2353      	movs	r3, #83	; 0x53
    b5a2:	aa02      	add	r2, sp, #8
    b5a4:	3020      	adds	r0, #32
    b5a6:	189b      	adds	r3, r3, r2
    b5a8:	7018      	strb	r0, [r3, #0]
    b5aa:	070b      	lsls	r3, r1, #28
    b5ac:	d504      	bpl.n	b5b8 <_vfiprintf_r+0xbc>
    b5ae:	2353      	movs	r3, #83	; 0x53
    b5b0:	202b      	movs	r0, #43	; 0x2b
    b5b2:	aa02      	add	r2, sp, #8
    b5b4:	189b      	adds	r3, r3, r2
    b5b6:	7018      	strb	r0, [r3, #0]
    b5b8:	7823      	ldrb	r3, [r4, #0]
    b5ba:	2b2a      	cmp	r3, #42	; 0x2a
    b5bc:	d02c      	beq.n	b618 <_vfiprintf_r+0x11c>
    b5be:	2000      	movs	r0, #0
    b5c0:	210a      	movs	r1, #10
    b5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5c4:	7822      	ldrb	r2, [r4, #0]
    b5c6:	3a30      	subs	r2, #48	; 0x30
    b5c8:	2a09      	cmp	r2, #9
    b5ca:	d800      	bhi.n	b5ce <_vfiprintf_r+0xd2>
    b5cc:	e06b      	b.n	b6a6 <_vfiprintf_r+0x1aa>
    b5ce:	2800      	cmp	r0, #0
    b5d0:	d02a      	beq.n	b628 <_vfiprintf_r+0x12c>
    b5d2:	9309      	str	r3, [sp, #36]	; 0x24
    b5d4:	e028      	b.n	b628 <_vfiprintf_r+0x12c>
    b5d6:	4b51      	ldr	r3, [pc, #324]	; (b71c <_vfiprintf_r+0x220>)
    b5d8:	429f      	cmp	r7, r3
    b5da:	d101      	bne.n	b5e0 <_vfiprintf_r+0xe4>
    b5dc:	68b7      	ldr	r7, [r6, #8]
    b5de:	e79e      	b.n	b51e <_vfiprintf_r+0x22>
    b5e0:	4b4f      	ldr	r3, [pc, #316]	; (b720 <_vfiprintf_r+0x224>)
    b5e2:	429f      	cmp	r7, r3
    b5e4:	d19b      	bne.n	b51e <_vfiprintf_r+0x22>
    b5e6:	68f7      	ldr	r7, [r6, #12]
    b5e8:	e799      	b.n	b51e <_vfiprintf_r+0x22>
    b5ea:	0039      	movs	r1, r7
    b5ec:	0030      	movs	r0, r6
    b5ee:	f001 f905 	bl	c7fc <__swsetup_r>
    b5f2:	2800      	cmp	r0, #0
    b5f4:	d099      	beq.n	b52a <_vfiprintf_r+0x2e>
    b5f6:	2001      	movs	r0, #1
    b5f8:	4240      	negs	r0, r0
    b5fa:	b01f      	add	sp, #124	; 0x7c
    b5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5fe:	2b25      	cmp	r3, #37	; 0x25
    b600:	d09f      	beq.n	b542 <_vfiprintf_r+0x46>
    b602:	3401      	adds	r4, #1
    b604:	e79a      	b.n	b53c <_vfiprintf_r+0x40>
    b606:	4b44      	ldr	r3, [pc, #272]	; (b718 <_vfiprintf_r+0x21c>)
    b608:	6829      	ldr	r1, [r5, #0]
    b60a:	1ac0      	subs	r0, r0, r3
    b60c:	2301      	movs	r3, #1
    b60e:	4083      	lsls	r3, r0
    b610:	430b      	orrs	r3, r1
    b612:	602b      	str	r3, [r5, #0]
    b614:	4664      	mov	r4, ip
    b616:	e7b7      	b.n	b588 <_vfiprintf_r+0x8c>
    b618:	9b05      	ldr	r3, [sp, #20]
    b61a:	1d18      	adds	r0, r3, #4
    b61c:	681b      	ldr	r3, [r3, #0]
    b61e:	9005      	str	r0, [sp, #20]
    b620:	2b00      	cmp	r3, #0
    b622:	db3a      	blt.n	b69a <_vfiprintf_r+0x19e>
    b624:	9309      	str	r3, [sp, #36]	; 0x24
    b626:	4664      	mov	r4, ip
    b628:	7823      	ldrb	r3, [r4, #0]
    b62a:	2b2e      	cmp	r3, #46	; 0x2e
    b62c:	d10b      	bne.n	b646 <_vfiprintf_r+0x14a>
    b62e:	7863      	ldrb	r3, [r4, #1]
    b630:	1c62      	adds	r2, r4, #1
    b632:	2b2a      	cmp	r3, #42	; 0x2a
    b634:	d13f      	bne.n	b6b6 <_vfiprintf_r+0x1ba>
    b636:	9b05      	ldr	r3, [sp, #20]
    b638:	3402      	adds	r4, #2
    b63a:	1d1a      	adds	r2, r3, #4
    b63c:	681b      	ldr	r3, [r3, #0]
    b63e:	9205      	str	r2, [sp, #20]
    b640:	2b00      	cmp	r3, #0
    b642:	db35      	blt.n	b6b0 <_vfiprintf_r+0x1b4>
    b644:	9307      	str	r3, [sp, #28]
    b646:	7821      	ldrb	r1, [r4, #0]
    b648:	2203      	movs	r2, #3
    b64a:	4836      	ldr	r0, [pc, #216]	; (b724 <_vfiprintf_r+0x228>)
    b64c:	f002 fa28 	bl	daa0 <memchr>
    b650:	2800      	cmp	r0, #0
    b652:	d007      	beq.n	b664 <_vfiprintf_r+0x168>
    b654:	4b33      	ldr	r3, [pc, #204]	; (b724 <_vfiprintf_r+0x228>)
    b656:	682a      	ldr	r2, [r5, #0]
    b658:	1ac0      	subs	r0, r0, r3
    b65a:	2340      	movs	r3, #64	; 0x40
    b65c:	4083      	lsls	r3, r0
    b65e:	4313      	orrs	r3, r2
    b660:	602b      	str	r3, [r5, #0]
    b662:	3401      	adds	r4, #1
    b664:	7821      	ldrb	r1, [r4, #0]
    b666:	1c63      	adds	r3, r4, #1
    b668:	2206      	movs	r2, #6
    b66a:	482f      	ldr	r0, [pc, #188]	; (b728 <_vfiprintf_r+0x22c>)
    b66c:	9302      	str	r3, [sp, #8]
    b66e:	7629      	strb	r1, [r5, #24]
    b670:	f002 fa16 	bl	daa0 <memchr>
    b674:	2800      	cmp	r0, #0
    b676:	d044      	beq.n	b702 <_vfiprintf_r+0x206>
    b678:	4b2c      	ldr	r3, [pc, #176]	; (b72c <_vfiprintf_r+0x230>)
    b67a:	2b00      	cmp	r3, #0
    b67c:	d12f      	bne.n	b6de <_vfiprintf_r+0x1e2>
    b67e:	6829      	ldr	r1, [r5, #0]
    b680:	9b05      	ldr	r3, [sp, #20]
    b682:	2207      	movs	r2, #7
    b684:	05c9      	lsls	r1, r1, #23
    b686:	d528      	bpl.n	b6da <_vfiprintf_r+0x1de>
    b688:	189b      	adds	r3, r3, r2
    b68a:	4393      	bics	r3, r2
    b68c:	3308      	adds	r3, #8
    b68e:	9305      	str	r3, [sp, #20]
    b690:	696b      	ldr	r3, [r5, #20]
    b692:	9a03      	ldr	r2, [sp, #12]
    b694:	189b      	adds	r3, r3, r2
    b696:	616b      	str	r3, [r5, #20]
    b698:	e74f      	b.n	b53a <_vfiprintf_r+0x3e>
    b69a:	425b      	negs	r3, r3
    b69c:	60eb      	str	r3, [r5, #12]
    b69e:	2302      	movs	r3, #2
    b6a0:	430b      	orrs	r3, r1
    b6a2:	602b      	str	r3, [r5, #0]
    b6a4:	e7bf      	b.n	b626 <_vfiprintf_r+0x12a>
    b6a6:	434b      	muls	r3, r1
    b6a8:	3401      	adds	r4, #1
    b6aa:	189b      	adds	r3, r3, r2
    b6ac:	2001      	movs	r0, #1
    b6ae:	e789      	b.n	b5c4 <_vfiprintf_r+0xc8>
    b6b0:	2301      	movs	r3, #1
    b6b2:	425b      	negs	r3, r3
    b6b4:	e7c6      	b.n	b644 <_vfiprintf_r+0x148>
    b6b6:	2300      	movs	r3, #0
    b6b8:	0014      	movs	r4, r2
    b6ba:	200a      	movs	r0, #10
    b6bc:	001a      	movs	r2, r3
    b6be:	606b      	str	r3, [r5, #4]
    b6c0:	7821      	ldrb	r1, [r4, #0]
    b6c2:	3930      	subs	r1, #48	; 0x30
    b6c4:	2909      	cmp	r1, #9
    b6c6:	d903      	bls.n	b6d0 <_vfiprintf_r+0x1d4>
    b6c8:	2b00      	cmp	r3, #0
    b6ca:	d0bc      	beq.n	b646 <_vfiprintf_r+0x14a>
    b6cc:	9207      	str	r2, [sp, #28]
    b6ce:	e7ba      	b.n	b646 <_vfiprintf_r+0x14a>
    b6d0:	4342      	muls	r2, r0
    b6d2:	3401      	adds	r4, #1
    b6d4:	1852      	adds	r2, r2, r1
    b6d6:	2301      	movs	r3, #1
    b6d8:	e7f2      	b.n	b6c0 <_vfiprintf_r+0x1c4>
    b6da:	3307      	adds	r3, #7
    b6dc:	e7d5      	b.n	b68a <_vfiprintf_r+0x18e>
    b6de:	ab05      	add	r3, sp, #20
    b6e0:	9300      	str	r3, [sp, #0]
    b6e2:	003a      	movs	r2, r7
    b6e4:	4b12      	ldr	r3, [pc, #72]	; (b730 <_vfiprintf_r+0x234>)
    b6e6:	0029      	movs	r1, r5
    b6e8:	0030      	movs	r0, r6
    b6ea:	f000 f8bf 	bl	b86c <_printf_float>
    b6ee:	9003      	str	r0, [sp, #12]
    b6f0:	9b03      	ldr	r3, [sp, #12]
    b6f2:	3301      	adds	r3, #1
    b6f4:	d1cc      	bne.n	b690 <_vfiprintf_r+0x194>
    b6f6:	89bb      	ldrh	r3, [r7, #12]
    b6f8:	065b      	lsls	r3, r3, #25
    b6fa:	d500      	bpl.n	b6fe <_vfiprintf_r+0x202>
    b6fc:	e77b      	b.n	b5f6 <_vfiprintf_r+0xfa>
    b6fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b700:	e77b      	b.n	b5fa <_vfiprintf_r+0xfe>
    b702:	ab05      	add	r3, sp, #20
    b704:	9300      	str	r3, [sp, #0]
    b706:	003a      	movs	r2, r7
    b708:	4b09      	ldr	r3, [pc, #36]	; (b730 <_vfiprintf_r+0x234>)
    b70a:	0029      	movs	r1, r5
    b70c:	0030      	movs	r0, r6
    b70e:	f000 fb67 	bl	bde0 <_printf_i>
    b712:	e7ec      	b.n	b6ee <_vfiprintf_r+0x1f2>
    b714:	000102c8 	.word	0x000102c8
    b718:	00010118 	.word	0x00010118
    b71c:	000102e8 	.word	0x000102e8
    b720:	000102a8 	.word	0x000102a8
    b724:	0001011e 	.word	0x0001011e
    b728:	00010122 	.word	0x00010122
    b72c:	0000b86d 	.word	0x0000b86d
    b730:	0000b4d7 	.word	0x0000b4d7

0000b734 <__cvt>:
    b734:	b5f0      	push	{r4, r5, r6, r7, lr}
    b736:	b08b      	sub	sp, #44	; 0x2c
    b738:	0014      	movs	r4, r2
    b73a:	1e1d      	subs	r5, r3, #0
    b73c:	9912      	ldr	r1, [sp, #72]	; 0x48
    b73e:	da53      	bge.n	b7e8 <__cvt+0xb4>
    b740:	2480      	movs	r4, #128	; 0x80
    b742:	0624      	lsls	r4, r4, #24
    b744:	191b      	adds	r3, r3, r4
    b746:	001d      	movs	r5, r3
    b748:	0014      	movs	r4, r2
    b74a:	232d      	movs	r3, #45	; 0x2d
    b74c:	700b      	strb	r3, [r1, #0]
    b74e:	2320      	movs	r3, #32
    b750:	9e14      	ldr	r6, [sp, #80]	; 0x50
    b752:	2203      	movs	r2, #3
    b754:	439e      	bics	r6, r3
    b756:	2e46      	cmp	r6, #70	; 0x46
    b758:	d007      	beq.n	b76a <__cvt+0x36>
    b75a:	0033      	movs	r3, r6
    b75c:	3b45      	subs	r3, #69	; 0x45
    b75e:	4259      	negs	r1, r3
    b760:	414b      	adcs	r3, r1
    b762:	9910      	ldr	r1, [sp, #64]	; 0x40
    b764:	3a01      	subs	r2, #1
    b766:	18cb      	adds	r3, r1, r3
    b768:	9310      	str	r3, [sp, #64]	; 0x40
    b76a:	ab09      	add	r3, sp, #36	; 0x24
    b76c:	9304      	str	r3, [sp, #16]
    b76e:	ab08      	add	r3, sp, #32
    b770:	9303      	str	r3, [sp, #12]
    b772:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b774:	9200      	str	r2, [sp, #0]
    b776:	9302      	str	r3, [sp, #8]
    b778:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b77a:	0022      	movs	r2, r4
    b77c:	9301      	str	r3, [sp, #4]
    b77e:	002b      	movs	r3, r5
    b780:	f001 f95a 	bl	ca38 <_dtoa_r>
    b784:	0007      	movs	r7, r0
    b786:	2e47      	cmp	r6, #71	; 0x47
    b788:	d102      	bne.n	b790 <__cvt+0x5c>
    b78a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b78c:	07db      	lsls	r3, r3, #31
    b78e:	d524      	bpl.n	b7da <__cvt+0xa6>
    b790:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b792:	18fb      	adds	r3, r7, r3
    b794:	9307      	str	r3, [sp, #28]
    b796:	2e46      	cmp	r6, #70	; 0x46
    b798:	d114      	bne.n	b7c4 <__cvt+0x90>
    b79a:	783b      	ldrb	r3, [r7, #0]
    b79c:	2b30      	cmp	r3, #48	; 0x30
    b79e:	d10c      	bne.n	b7ba <__cvt+0x86>
    b7a0:	2200      	movs	r2, #0
    b7a2:	2300      	movs	r3, #0
    b7a4:	0020      	movs	r0, r4
    b7a6:	0029      	movs	r1, r5
    b7a8:	f7fc fba4 	bl	7ef4 <__aeabi_dcmpeq>
    b7ac:	2800      	cmp	r0, #0
    b7ae:	d104      	bne.n	b7ba <__cvt+0x86>
    b7b0:	2301      	movs	r3, #1
    b7b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b7b4:	1a9b      	subs	r3, r3, r2
    b7b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b7b8:	6013      	str	r3, [r2, #0]
    b7ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b7bc:	9a07      	ldr	r2, [sp, #28]
    b7be:	681b      	ldr	r3, [r3, #0]
    b7c0:	18d3      	adds	r3, r2, r3
    b7c2:	9307      	str	r3, [sp, #28]
    b7c4:	2200      	movs	r2, #0
    b7c6:	2300      	movs	r3, #0
    b7c8:	0020      	movs	r0, r4
    b7ca:	0029      	movs	r1, r5
    b7cc:	f7fc fb92 	bl	7ef4 <__aeabi_dcmpeq>
    b7d0:	2230      	movs	r2, #48	; 0x30
    b7d2:	2800      	cmp	r0, #0
    b7d4:	d00d      	beq.n	b7f2 <__cvt+0xbe>
    b7d6:	9b07      	ldr	r3, [sp, #28]
    b7d8:	9309      	str	r3, [sp, #36]	; 0x24
    b7da:	0038      	movs	r0, r7
    b7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7de:	9a15      	ldr	r2, [sp, #84]	; 0x54
    b7e0:	1bdb      	subs	r3, r3, r7
    b7e2:	6013      	str	r3, [r2, #0]
    b7e4:	b00b      	add	sp, #44	; 0x2c
    b7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7e8:	2300      	movs	r3, #0
    b7ea:	e7af      	b.n	b74c <__cvt+0x18>
    b7ec:	1c59      	adds	r1, r3, #1
    b7ee:	9109      	str	r1, [sp, #36]	; 0x24
    b7f0:	701a      	strb	r2, [r3, #0]
    b7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7f4:	9907      	ldr	r1, [sp, #28]
    b7f6:	4299      	cmp	r1, r3
    b7f8:	d8f8      	bhi.n	b7ec <__cvt+0xb8>
    b7fa:	e7ee      	b.n	b7da <__cvt+0xa6>

0000b7fc <__exponent>:
    b7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7fe:	232b      	movs	r3, #43	; 0x2b
    b800:	b085      	sub	sp, #20
    b802:	0007      	movs	r7, r0
    b804:	000c      	movs	r4, r1
    b806:	7002      	strb	r2, [r0, #0]
    b808:	1c86      	adds	r6, r0, #2
    b80a:	2900      	cmp	r1, #0
    b80c:	da01      	bge.n	b812 <__exponent+0x16>
    b80e:	232d      	movs	r3, #45	; 0x2d
    b810:	424c      	negs	r4, r1
    b812:	707b      	strb	r3, [r7, #1]
    b814:	2c09      	cmp	r4, #9
    b816:	dd23      	ble.n	b860 <__exponent+0x64>
    b818:	ab02      	add	r3, sp, #8
    b81a:	1ddd      	adds	r5, r3, #7
    b81c:	1e6b      	subs	r3, r5, #1
    b81e:	0020      	movs	r0, r4
    b820:	210a      	movs	r1, #10
    b822:	9301      	str	r3, [sp, #4]
    b824:	f7fc fb50 	bl	7ec8 <__aeabi_idivmod>
    b828:	1e6b      	subs	r3, r5, #1
    b82a:	3130      	adds	r1, #48	; 0x30
    b82c:	7019      	strb	r1, [r3, #0]
    b82e:	0020      	movs	r0, r4
    b830:	210a      	movs	r1, #10
    b832:	f7fc fa63 	bl	7cfc <__divsi3>
    b836:	0004      	movs	r4, r0
    b838:	2809      	cmp	r0, #9
    b83a:	dc0a      	bgt.n	b852 <__exponent+0x56>
    b83c:	3d02      	subs	r5, #2
    b83e:	3430      	adds	r4, #48	; 0x30
    b840:	702c      	strb	r4, [r5, #0]
    b842:	ab02      	add	r3, sp, #8
    b844:	3307      	adds	r3, #7
    b846:	0030      	movs	r0, r6
    b848:	42ab      	cmp	r3, r5
    b84a:	d804      	bhi.n	b856 <__exponent+0x5a>
    b84c:	1bc0      	subs	r0, r0, r7
    b84e:	b005      	add	sp, #20
    b850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b852:	9d01      	ldr	r5, [sp, #4]
    b854:	e7e2      	b.n	b81c <__exponent+0x20>
    b856:	782b      	ldrb	r3, [r5, #0]
    b858:	3501      	adds	r5, #1
    b85a:	7033      	strb	r3, [r6, #0]
    b85c:	3601      	adds	r6, #1
    b85e:	e7f0      	b.n	b842 <__exponent+0x46>
    b860:	2330      	movs	r3, #48	; 0x30
    b862:	18e4      	adds	r4, r4, r3
    b864:	7033      	strb	r3, [r6, #0]
    b866:	1cb0      	adds	r0, r6, #2
    b868:	7074      	strb	r4, [r6, #1]
    b86a:	e7ef      	b.n	b84c <__exponent+0x50>

0000b86c <_printf_float>:
    b86c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b86e:	b095      	sub	sp, #84	; 0x54
    b870:	000c      	movs	r4, r1
    b872:	920a      	str	r2, [sp, #40]	; 0x28
    b874:	930b      	str	r3, [sp, #44]	; 0x2c
    b876:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    b878:	9009      	str	r0, [sp, #36]	; 0x24
    b87a:	f002 f899 	bl	d9b0 <_localeconv_r>
    b87e:	6803      	ldr	r3, [r0, #0]
    b880:	0018      	movs	r0, r3
    b882:	930d      	str	r3, [sp, #52]	; 0x34
    b884:	f000 fc23 	bl	c0ce <strlen>
    b888:	2300      	movs	r3, #0
    b88a:	9312      	str	r3, [sp, #72]	; 0x48
    b88c:	6823      	ldr	r3, [r4, #0]
    b88e:	900e      	str	r0, [sp, #56]	; 0x38
    b890:	930c      	str	r3, [sp, #48]	; 0x30
    b892:	990c      	ldr	r1, [sp, #48]	; 0x30
    b894:	7e27      	ldrb	r7, [r4, #24]
    b896:	682b      	ldr	r3, [r5, #0]
    b898:	2207      	movs	r2, #7
    b89a:	05c9      	lsls	r1, r1, #23
    b89c:	d547      	bpl.n	b92e <_printf_float+0xc2>
    b89e:	189b      	adds	r3, r3, r2
    b8a0:	4393      	bics	r3, r2
    b8a2:	001a      	movs	r2, r3
    b8a4:	3208      	adds	r2, #8
    b8a6:	602a      	str	r2, [r5, #0]
    b8a8:	681a      	ldr	r2, [r3, #0]
    b8aa:	685b      	ldr	r3, [r3, #4]
    b8ac:	64a2      	str	r2, [r4, #72]	; 0x48
    b8ae:	64e3      	str	r3, [r4, #76]	; 0x4c
    b8b0:	2201      	movs	r2, #1
    b8b2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    b8b4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    b8b6:	006b      	lsls	r3, r5, #1
    b8b8:	085b      	lsrs	r3, r3, #1
    b8ba:	930f      	str	r3, [sp, #60]	; 0x3c
    b8bc:	4252      	negs	r2, r2
    b8be:	4ba7      	ldr	r3, [pc, #668]	; (bb5c <_printf_float+0x2f0>)
    b8c0:	0030      	movs	r0, r6
    b8c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b8c4:	f7fe ff9a 	bl	a7fc <__aeabi_dcmpun>
    b8c8:	2800      	cmp	r0, #0
    b8ca:	d000      	beq.n	b8ce <_printf_float+0x62>
    b8cc:	e206      	b.n	bcdc <_printf_float+0x470>
    b8ce:	2201      	movs	r2, #1
    b8d0:	4ba2      	ldr	r3, [pc, #648]	; (bb5c <_printf_float+0x2f0>)
    b8d2:	4252      	negs	r2, r2
    b8d4:	0030      	movs	r0, r6
    b8d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b8d8:	f7fc fb1c 	bl	7f14 <__aeabi_dcmple>
    b8dc:	2800      	cmp	r0, #0
    b8de:	d000      	beq.n	b8e2 <_printf_float+0x76>
    b8e0:	e1fc      	b.n	bcdc <_printf_float+0x470>
    b8e2:	2200      	movs	r2, #0
    b8e4:	2300      	movs	r3, #0
    b8e6:	0030      	movs	r0, r6
    b8e8:	0029      	movs	r1, r5
    b8ea:	f7fc fb09 	bl	7f00 <__aeabi_dcmplt>
    b8ee:	2800      	cmp	r0, #0
    b8f0:	d003      	beq.n	b8fa <_printf_float+0x8e>
    b8f2:	0023      	movs	r3, r4
    b8f4:	222d      	movs	r2, #45	; 0x2d
    b8f6:	3343      	adds	r3, #67	; 0x43
    b8f8:	701a      	strb	r2, [r3, #0]
    b8fa:	4d99      	ldr	r5, [pc, #612]	; (bb60 <_printf_float+0x2f4>)
    b8fc:	2f47      	cmp	r7, #71	; 0x47
    b8fe:	d800      	bhi.n	b902 <_printf_float+0x96>
    b900:	4d98      	ldr	r5, [pc, #608]	; (bb64 <_printf_float+0x2f8>)
    b902:	2303      	movs	r3, #3
    b904:	2600      	movs	r6, #0
    b906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b908:	6123      	str	r3, [r4, #16]
    b90a:	3301      	adds	r3, #1
    b90c:	439a      	bics	r2, r3
    b90e:	6022      	str	r2, [r4, #0]
    b910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b912:	aa13      	add	r2, sp, #76	; 0x4c
    b914:	9300      	str	r3, [sp, #0]
    b916:	0021      	movs	r1, r4
    b918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b91a:	9809      	ldr	r0, [sp, #36]	; 0x24
    b91c:	f000 f9f2 	bl	bd04 <_printf_common>
    b920:	1c43      	adds	r3, r0, #1
    b922:	d000      	beq.n	b926 <_printf_float+0xba>
    b924:	e09c      	b.n	ba60 <_printf_float+0x1f4>
    b926:	2001      	movs	r0, #1
    b928:	4240      	negs	r0, r0
    b92a:	b015      	add	sp, #84	; 0x54
    b92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b92e:	3307      	adds	r3, #7
    b930:	e7b6      	b.n	b8a0 <_printf_float+0x34>
    b932:	2380      	movs	r3, #128	; 0x80
    b934:	6862      	ldr	r2, [r4, #4]
    b936:	00db      	lsls	r3, r3, #3
    b938:	1c51      	adds	r1, r2, #1
    b93a:	d145      	bne.n	b9c8 <_printf_float+0x15c>
    b93c:	3207      	adds	r2, #7
    b93e:	6062      	str	r2, [r4, #4]
    b940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b942:	2100      	movs	r1, #0
    b944:	4313      	orrs	r3, r2
    b946:	aa12      	add	r2, sp, #72	; 0x48
    b948:	9205      	str	r2, [sp, #20]
    b94a:	aa11      	add	r2, sp, #68	; 0x44
    b94c:	9203      	str	r2, [sp, #12]
    b94e:	2223      	movs	r2, #35	; 0x23
    b950:	6023      	str	r3, [r4, #0]
    b952:	9106      	str	r1, [sp, #24]
    b954:	9301      	str	r3, [sp, #4]
    b956:	a908      	add	r1, sp, #32
    b958:	6863      	ldr	r3, [r4, #4]
    b95a:	1852      	adds	r2, r2, r1
    b95c:	9202      	str	r2, [sp, #8]
    b95e:	9300      	str	r3, [sp, #0]
    b960:	0032      	movs	r2, r6
    b962:	002b      	movs	r3, r5
    b964:	9704      	str	r7, [sp, #16]
    b966:	9809      	ldr	r0, [sp, #36]	; 0x24
    b968:	f7ff fee4 	bl	b734 <__cvt>
    b96c:	2320      	movs	r3, #32
    b96e:	003a      	movs	r2, r7
    b970:	0005      	movs	r5, r0
    b972:	439a      	bics	r2, r3
    b974:	2a47      	cmp	r2, #71	; 0x47
    b976:	d107      	bne.n	b988 <_printf_float+0x11c>
    b978:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b97a:	1cda      	adds	r2, r3, #3
    b97c:	db02      	blt.n	b984 <_printf_float+0x118>
    b97e:	6862      	ldr	r2, [r4, #4]
    b980:	4293      	cmp	r3, r2
    b982:	dd5b      	ble.n	ba3c <_printf_float+0x1d0>
    b984:	3f02      	subs	r7, #2
    b986:	b2ff      	uxtb	r7, r7
    b988:	9911      	ldr	r1, [sp, #68]	; 0x44
    b98a:	2f65      	cmp	r7, #101	; 0x65
    b98c:	d83b      	bhi.n	ba06 <_printf_float+0x19a>
    b98e:	0020      	movs	r0, r4
    b990:	3901      	subs	r1, #1
    b992:	003a      	movs	r2, r7
    b994:	3050      	adds	r0, #80	; 0x50
    b996:	9111      	str	r1, [sp, #68]	; 0x44
    b998:	f7ff ff30 	bl	b7fc <__exponent>
    b99c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b99e:	0006      	movs	r6, r0
    b9a0:	1883      	adds	r3, r0, r2
    b9a2:	6123      	str	r3, [r4, #16]
    b9a4:	2a01      	cmp	r2, #1
    b9a6:	dc02      	bgt.n	b9ae <_printf_float+0x142>
    b9a8:	6822      	ldr	r2, [r4, #0]
    b9aa:	07d2      	lsls	r2, r2, #31
    b9ac:	d501      	bpl.n	b9b2 <_printf_float+0x146>
    b9ae:	3301      	adds	r3, #1
    b9b0:	6123      	str	r3, [r4, #16]
    b9b2:	2323      	movs	r3, #35	; 0x23
    b9b4:	aa08      	add	r2, sp, #32
    b9b6:	189b      	adds	r3, r3, r2
    b9b8:	781b      	ldrb	r3, [r3, #0]
    b9ba:	2b00      	cmp	r3, #0
    b9bc:	d0a8      	beq.n	b910 <_printf_float+0xa4>
    b9be:	0023      	movs	r3, r4
    b9c0:	222d      	movs	r2, #45	; 0x2d
    b9c2:	3343      	adds	r3, #67	; 0x43
    b9c4:	701a      	strb	r2, [r3, #0]
    b9c6:	e7a3      	b.n	b910 <_printf_float+0xa4>
    b9c8:	2f67      	cmp	r7, #103	; 0x67
    b9ca:	d001      	beq.n	b9d0 <_printf_float+0x164>
    b9cc:	2f47      	cmp	r7, #71	; 0x47
    b9ce:	d1b7      	bne.n	b940 <_printf_float+0xd4>
    b9d0:	2a00      	cmp	r2, #0
    b9d2:	d016      	beq.n	ba02 <_printf_float+0x196>
    b9d4:	990c      	ldr	r1, [sp, #48]	; 0x30
    b9d6:	a808      	add	r0, sp, #32
    b9d8:	430b      	orrs	r3, r1
    b9da:	2100      	movs	r1, #0
    b9dc:	9106      	str	r1, [sp, #24]
    b9de:	a912      	add	r1, sp, #72	; 0x48
    b9e0:	9105      	str	r1, [sp, #20]
    b9e2:	a911      	add	r1, sp, #68	; 0x44
    b9e4:	9103      	str	r1, [sp, #12]
    b9e6:	2123      	movs	r1, #35	; 0x23
    b9e8:	1809      	adds	r1, r1, r0
    b9ea:	6023      	str	r3, [r4, #0]
    b9ec:	9301      	str	r3, [sp, #4]
    b9ee:	9200      	str	r2, [sp, #0]
    b9f0:	002b      	movs	r3, r5
    b9f2:	9704      	str	r7, [sp, #16]
    b9f4:	9102      	str	r1, [sp, #8]
    b9f6:	0032      	movs	r2, r6
    b9f8:	9809      	ldr	r0, [sp, #36]	; 0x24
    b9fa:	f7ff fe9b 	bl	b734 <__cvt>
    b9fe:	0005      	movs	r5, r0
    ba00:	e7ba      	b.n	b978 <_printf_float+0x10c>
    ba02:	2201      	movs	r2, #1
    ba04:	e79b      	b.n	b93e <_printf_float+0xd2>
    ba06:	2f66      	cmp	r7, #102	; 0x66
    ba08:	d119      	bne.n	ba3e <_printf_float+0x1d2>
    ba0a:	6863      	ldr	r3, [r4, #4]
    ba0c:	2900      	cmp	r1, #0
    ba0e:	dd0c      	ble.n	ba2a <_printf_float+0x1be>
    ba10:	6121      	str	r1, [r4, #16]
    ba12:	2b00      	cmp	r3, #0
    ba14:	d102      	bne.n	ba1c <_printf_float+0x1b0>
    ba16:	6822      	ldr	r2, [r4, #0]
    ba18:	07d2      	lsls	r2, r2, #31
    ba1a:	d502      	bpl.n	ba22 <_printf_float+0x1b6>
    ba1c:	3301      	adds	r3, #1
    ba1e:	185b      	adds	r3, r3, r1
    ba20:	6123      	str	r3, [r4, #16]
    ba22:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba24:	2600      	movs	r6, #0
    ba26:	65a3      	str	r3, [r4, #88]	; 0x58
    ba28:	e7c3      	b.n	b9b2 <_printf_float+0x146>
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	d103      	bne.n	ba36 <_printf_float+0x1ca>
    ba2e:	2201      	movs	r2, #1
    ba30:	6821      	ldr	r1, [r4, #0]
    ba32:	4211      	tst	r1, r2
    ba34:	d000      	beq.n	ba38 <_printf_float+0x1cc>
    ba36:	1c9a      	adds	r2, r3, #2
    ba38:	6122      	str	r2, [r4, #16]
    ba3a:	e7f2      	b.n	ba22 <_printf_float+0x1b6>
    ba3c:	2767      	movs	r7, #103	; 0x67
    ba3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba40:	9812      	ldr	r0, [sp, #72]	; 0x48
    ba42:	4283      	cmp	r3, r0
    ba44:	db05      	blt.n	ba52 <_printf_float+0x1e6>
    ba46:	6822      	ldr	r2, [r4, #0]
    ba48:	6123      	str	r3, [r4, #16]
    ba4a:	07d2      	lsls	r2, r2, #31
    ba4c:	d5e9      	bpl.n	ba22 <_printf_float+0x1b6>
    ba4e:	3301      	adds	r3, #1
    ba50:	e7e6      	b.n	ba20 <_printf_float+0x1b4>
    ba52:	2201      	movs	r2, #1
    ba54:	2b00      	cmp	r3, #0
    ba56:	dc01      	bgt.n	ba5c <_printf_float+0x1f0>
    ba58:	1892      	adds	r2, r2, r2
    ba5a:	1ad2      	subs	r2, r2, r3
    ba5c:	1812      	adds	r2, r2, r0
    ba5e:	e7eb      	b.n	ba38 <_printf_float+0x1cc>
    ba60:	6822      	ldr	r2, [r4, #0]
    ba62:	0553      	lsls	r3, r2, #21
    ba64:	d408      	bmi.n	ba78 <_printf_float+0x20c>
    ba66:	6923      	ldr	r3, [r4, #16]
    ba68:	002a      	movs	r2, r5
    ba6a:	990a      	ldr	r1, [sp, #40]	; 0x28
    ba6c:	9809      	ldr	r0, [sp, #36]	; 0x24
    ba6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ba70:	47a8      	blx	r5
    ba72:	1c43      	adds	r3, r0, #1
    ba74:	d129      	bne.n	baca <_printf_float+0x25e>
    ba76:	e756      	b.n	b926 <_printf_float+0xba>
    ba78:	2f65      	cmp	r7, #101	; 0x65
    ba7a:	d800      	bhi.n	ba7e <_printf_float+0x212>
    ba7c:	e0dc      	b.n	bc38 <_printf_float+0x3cc>
    ba7e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    ba80:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    ba82:	2200      	movs	r2, #0
    ba84:	2300      	movs	r3, #0
    ba86:	f7fc fa35 	bl	7ef4 <__aeabi_dcmpeq>
    ba8a:	2800      	cmp	r0, #0
    ba8c:	d035      	beq.n	bafa <_printf_float+0x28e>
    ba8e:	2301      	movs	r3, #1
    ba90:	4a35      	ldr	r2, [pc, #212]	; (bb68 <_printf_float+0x2fc>)
    ba92:	990a      	ldr	r1, [sp, #40]	; 0x28
    ba94:	9809      	ldr	r0, [sp, #36]	; 0x24
    ba96:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ba98:	47a8      	blx	r5
    ba9a:	1c43      	adds	r3, r0, #1
    ba9c:	d100      	bne.n	baa0 <_printf_float+0x234>
    ba9e:	e742      	b.n	b926 <_printf_float+0xba>
    baa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    baa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    baa4:	4293      	cmp	r3, r2
    baa6:	db02      	blt.n	baae <_printf_float+0x242>
    baa8:	6823      	ldr	r3, [r4, #0]
    baaa:	07db      	lsls	r3, r3, #31
    baac:	d50d      	bpl.n	baca <_printf_float+0x25e>
    baae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bab2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bab4:	990a      	ldr	r1, [sp, #40]	; 0x28
    bab6:	9809      	ldr	r0, [sp, #36]	; 0x24
    bab8:	47a8      	blx	r5
    baba:	2500      	movs	r5, #0
    babc:	1c43      	adds	r3, r0, #1
    babe:	d100      	bne.n	bac2 <_printf_float+0x256>
    bac0:	e731      	b.n	b926 <_printf_float+0xba>
    bac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bac4:	3b01      	subs	r3, #1
    bac6:	429d      	cmp	r5, r3
    bac8:	db0b      	blt.n	bae2 <_printf_float+0x276>
    baca:	6823      	ldr	r3, [r4, #0]
    bacc:	2500      	movs	r5, #0
    bace:	079b      	lsls	r3, r3, #30
    bad0:	d500      	bpl.n	bad4 <_printf_float+0x268>
    bad2:	e0fd      	b.n	bcd0 <_printf_float+0x464>
    bad4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bad6:	68e0      	ldr	r0, [r4, #12]
    bad8:	4298      	cmp	r0, r3
    bada:	db00      	blt.n	bade <_printf_float+0x272>
    badc:	e725      	b.n	b92a <_printf_float+0xbe>
    bade:	0018      	movs	r0, r3
    bae0:	e723      	b.n	b92a <_printf_float+0xbe>
    bae2:	0022      	movs	r2, r4
    bae4:	2301      	movs	r3, #1
    bae6:	321a      	adds	r2, #26
    bae8:	990a      	ldr	r1, [sp, #40]	; 0x28
    baea:	9809      	ldr	r0, [sp, #36]	; 0x24
    baec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    baee:	47b0      	blx	r6
    baf0:	1c43      	adds	r3, r0, #1
    baf2:	d100      	bne.n	baf6 <_printf_float+0x28a>
    baf4:	e717      	b.n	b926 <_printf_float+0xba>
    baf6:	3501      	adds	r5, #1
    baf8:	e7e3      	b.n	bac2 <_printf_float+0x256>
    bafa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bafc:	2b00      	cmp	r3, #0
    bafe:	dc35      	bgt.n	bb6c <_printf_float+0x300>
    bb00:	2301      	movs	r3, #1
    bb02:	4a19      	ldr	r2, [pc, #100]	; (bb68 <_printf_float+0x2fc>)
    bb04:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb06:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bb0a:	47b0      	blx	r6
    bb0c:	1c43      	adds	r3, r0, #1
    bb0e:	d100      	bne.n	bb12 <_printf_float+0x2a6>
    bb10:	e709      	b.n	b926 <_printf_float+0xba>
    bb12:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bb14:	2b00      	cmp	r3, #0
    bb16:	d105      	bne.n	bb24 <_printf_float+0x2b8>
    bb18:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bb1a:	2b00      	cmp	r3, #0
    bb1c:	d102      	bne.n	bb24 <_printf_float+0x2b8>
    bb1e:	6823      	ldr	r3, [r4, #0]
    bb20:	07db      	lsls	r3, r3, #31
    bb22:	d5d2      	bpl.n	baca <_printf_float+0x25e>
    bb24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bb26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bb28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bb2a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb2c:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb2e:	47b0      	blx	r6
    bb30:	2600      	movs	r6, #0
    bb32:	1c43      	adds	r3, r0, #1
    bb34:	d100      	bne.n	bb38 <_printf_float+0x2cc>
    bb36:	e6f6      	b.n	b926 <_printf_float+0xba>
    bb38:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bb3a:	425b      	negs	r3, r3
    bb3c:	429e      	cmp	r6, r3
    bb3e:	db01      	blt.n	bb44 <_printf_float+0x2d8>
    bb40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bb42:	e791      	b.n	ba68 <_printf_float+0x1fc>
    bb44:	0022      	movs	r2, r4
    bb46:	2301      	movs	r3, #1
    bb48:	321a      	adds	r2, #26
    bb4a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb4c:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb4e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bb50:	47b8      	blx	r7
    bb52:	1c43      	adds	r3, r0, #1
    bb54:	d100      	bne.n	bb58 <_printf_float+0x2ec>
    bb56:	e6e6      	b.n	b926 <_printf_float+0xba>
    bb58:	3601      	adds	r6, #1
    bb5a:	e7ed      	b.n	bb38 <_printf_float+0x2cc>
    bb5c:	7fefffff 	.word	0x7fefffff
    bb60:	0001012d 	.word	0x0001012d
    bb64:	00010129 	.word	0x00010129
    bb68:	0000f1e0 	.word	0x0000f1e0
    bb6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    bb6e:	9e12      	ldr	r6, [sp, #72]	; 0x48
    bb70:	429e      	cmp	r6, r3
    bb72:	dd00      	ble.n	bb76 <_printf_float+0x30a>
    bb74:	001e      	movs	r6, r3
    bb76:	2e00      	cmp	r6, #0
    bb78:	dc35      	bgt.n	bbe6 <_printf_float+0x37a>
    bb7a:	2300      	movs	r3, #0
    bb7c:	930c      	str	r3, [sp, #48]	; 0x30
    bb7e:	43f3      	mvns	r3, r6
    bb80:	17db      	asrs	r3, r3, #31
    bb82:	930f      	str	r3, [sp, #60]	; 0x3c
    bb84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bb86:	6da7      	ldr	r7, [r4, #88]	; 0x58
    bb88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bb8a:	4033      	ands	r3, r6
    bb8c:	1afb      	subs	r3, r7, r3
    bb8e:	429a      	cmp	r2, r3
    bb90:	db32      	blt.n	bbf8 <_printf_float+0x38c>
    bb92:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bb94:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bb96:	4293      	cmp	r3, r2
    bb98:	db3c      	blt.n	bc14 <_printf_float+0x3a8>
    bb9a:	6823      	ldr	r3, [r4, #0]
    bb9c:	07db      	lsls	r3, r3, #31
    bb9e:	d439      	bmi.n	bc14 <_printf_float+0x3a8>
    bba0:	9e12      	ldr	r6, [sp, #72]	; 0x48
    bba2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    bba4:	1bf3      	subs	r3, r6, r7
    bba6:	1ab6      	subs	r6, r6, r2
    bba8:	429e      	cmp	r6, r3
    bbaa:	dd00      	ble.n	bbae <_printf_float+0x342>
    bbac:	001e      	movs	r6, r3
    bbae:	2e00      	cmp	r6, #0
    bbb0:	dc39      	bgt.n	bc26 <_printf_float+0x3ba>
    bbb2:	43f7      	mvns	r7, r6
    bbb4:	2500      	movs	r5, #0
    bbb6:	17fb      	asrs	r3, r7, #31
    bbb8:	930c      	str	r3, [sp, #48]	; 0x30
    bbba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    bbbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bbbe:	990c      	ldr	r1, [sp, #48]	; 0x30
    bbc0:	1a9b      	subs	r3, r3, r2
    bbc2:	0032      	movs	r2, r6
    bbc4:	400a      	ands	r2, r1
    bbc6:	1a9b      	subs	r3, r3, r2
    bbc8:	429d      	cmp	r5, r3
    bbca:	db00      	blt.n	bbce <_printf_float+0x362>
    bbcc:	e77d      	b.n	baca <_printf_float+0x25e>
    bbce:	0022      	movs	r2, r4
    bbd0:	2301      	movs	r3, #1
    bbd2:	321a      	adds	r2, #26
    bbd4:	990a      	ldr	r1, [sp, #40]	; 0x28
    bbd6:	9809      	ldr	r0, [sp, #36]	; 0x24
    bbd8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bbda:	47b8      	blx	r7
    bbdc:	1c43      	adds	r3, r0, #1
    bbde:	d100      	bne.n	bbe2 <_printf_float+0x376>
    bbe0:	e6a1      	b.n	b926 <_printf_float+0xba>
    bbe2:	3501      	adds	r5, #1
    bbe4:	e7e9      	b.n	bbba <_printf_float+0x34e>
    bbe6:	0033      	movs	r3, r6
    bbe8:	002a      	movs	r2, r5
    bbea:	990a      	ldr	r1, [sp, #40]	; 0x28
    bbec:	9809      	ldr	r0, [sp, #36]	; 0x24
    bbee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bbf0:	47b8      	blx	r7
    bbf2:	1c43      	adds	r3, r0, #1
    bbf4:	d1c1      	bne.n	bb7a <_printf_float+0x30e>
    bbf6:	e696      	b.n	b926 <_printf_float+0xba>
    bbf8:	0022      	movs	r2, r4
    bbfa:	2301      	movs	r3, #1
    bbfc:	321a      	adds	r2, #26
    bbfe:	990a      	ldr	r1, [sp, #40]	; 0x28
    bc00:	9809      	ldr	r0, [sp, #36]	; 0x24
    bc02:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bc04:	47b8      	blx	r7
    bc06:	1c43      	adds	r3, r0, #1
    bc08:	d100      	bne.n	bc0c <_printf_float+0x3a0>
    bc0a:	e68c      	b.n	b926 <_printf_float+0xba>
    bc0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bc0e:	3301      	adds	r3, #1
    bc10:	930c      	str	r3, [sp, #48]	; 0x30
    bc12:	e7b7      	b.n	bb84 <_printf_float+0x318>
    bc14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bc16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bc18:	990a      	ldr	r1, [sp, #40]	; 0x28
    bc1a:	9809      	ldr	r0, [sp, #36]	; 0x24
    bc1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bc1e:	47b0      	blx	r6
    bc20:	1c43      	adds	r3, r0, #1
    bc22:	d1bd      	bne.n	bba0 <_printf_float+0x334>
    bc24:	e67f      	b.n	b926 <_printf_float+0xba>
    bc26:	19ea      	adds	r2, r5, r7
    bc28:	0033      	movs	r3, r6
    bc2a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bc2c:	9809      	ldr	r0, [sp, #36]	; 0x24
    bc2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bc30:	47a8      	blx	r5
    bc32:	1c43      	adds	r3, r0, #1
    bc34:	d1bd      	bne.n	bbb2 <_printf_float+0x346>
    bc36:	e676      	b.n	b926 <_printf_float+0xba>
    bc38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bc3a:	2b01      	cmp	r3, #1
    bc3c:	dc02      	bgt.n	bc44 <_printf_float+0x3d8>
    bc3e:	2301      	movs	r3, #1
    bc40:	421a      	tst	r2, r3
    bc42:	d038      	beq.n	bcb6 <_printf_float+0x44a>
    bc44:	2301      	movs	r3, #1
    bc46:	002a      	movs	r2, r5
    bc48:	990a      	ldr	r1, [sp, #40]	; 0x28
    bc4a:	9809      	ldr	r0, [sp, #36]	; 0x24
    bc4c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bc4e:	47b8      	blx	r7
    bc50:	1c43      	adds	r3, r0, #1
    bc52:	d100      	bne.n	bc56 <_printf_float+0x3ea>
    bc54:	e667      	b.n	b926 <_printf_float+0xba>
    bc56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bc58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bc5a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bc5c:	9809      	ldr	r0, [sp, #36]	; 0x24
    bc5e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bc60:	47b8      	blx	r7
    bc62:	1c43      	adds	r3, r0, #1
    bc64:	d100      	bne.n	bc68 <_printf_float+0x3fc>
    bc66:	e65e      	b.n	b926 <_printf_float+0xba>
    bc68:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    bc6a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    bc6c:	2200      	movs	r2, #0
    bc6e:	2300      	movs	r3, #0
    bc70:	f7fc f940 	bl	7ef4 <__aeabi_dcmpeq>
    bc74:	2800      	cmp	r0, #0
    bc76:	d008      	beq.n	bc8a <_printf_float+0x41e>
    bc78:	2500      	movs	r5, #0
    bc7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bc7c:	3b01      	subs	r3, #1
    bc7e:	429d      	cmp	r5, r3
    bc80:	db0d      	blt.n	bc9e <_printf_float+0x432>
    bc82:	0022      	movs	r2, r4
    bc84:	0033      	movs	r3, r6
    bc86:	3250      	adds	r2, #80	; 0x50
    bc88:	e6ef      	b.n	ba6a <_printf_float+0x1fe>
    bc8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bc8c:	1c6a      	adds	r2, r5, #1
    bc8e:	3b01      	subs	r3, #1
    bc90:	990a      	ldr	r1, [sp, #40]	; 0x28
    bc92:	9809      	ldr	r0, [sp, #36]	; 0x24
    bc94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bc96:	47a8      	blx	r5
    bc98:	1c43      	adds	r3, r0, #1
    bc9a:	d1f2      	bne.n	bc82 <_printf_float+0x416>
    bc9c:	e643      	b.n	b926 <_printf_float+0xba>
    bc9e:	0022      	movs	r2, r4
    bca0:	2301      	movs	r3, #1
    bca2:	321a      	adds	r2, #26
    bca4:	990a      	ldr	r1, [sp, #40]	; 0x28
    bca6:	9809      	ldr	r0, [sp, #36]	; 0x24
    bca8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bcaa:	47b8      	blx	r7
    bcac:	1c43      	adds	r3, r0, #1
    bcae:	d100      	bne.n	bcb2 <_printf_float+0x446>
    bcb0:	e639      	b.n	b926 <_printf_float+0xba>
    bcb2:	3501      	adds	r5, #1
    bcb4:	e7e1      	b.n	bc7a <_printf_float+0x40e>
    bcb6:	002a      	movs	r2, r5
    bcb8:	e7ea      	b.n	bc90 <_printf_float+0x424>
    bcba:	0022      	movs	r2, r4
    bcbc:	2301      	movs	r3, #1
    bcbe:	3219      	adds	r2, #25
    bcc0:	990a      	ldr	r1, [sp, #40]	; 0x28
    bcc2:	9809      	ldr	r0, [sp, #36]	; 0x24
    bcc4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bcc6:	47b0      	blx	r6
    bcc8:	1c43      	adds	r3, r0, #1
    bcca:	d100      	bne.n	bcce <_printf_float+0x462>
    bccc:	e62b      	b.n	b926 <_printf_float+0xba>
    bcce:	3501      	adds	r5, #1
    bcd0:	68e3      	ldr	r3, [r4, #12]
    bcd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bcd4:	1a9b      	subs	r3, r3, r2
    bcd6:	429d      	cmp	r5, r3
    bcd8:	dbef      	blt.n	bcba <_printf_float+0x44e>
    bcda:	e6fb      	b.n	bad4 <_printf_float+0x268>
    bcdc:	0032      	movs	r2, r6
    bcde:	002b      	movs	r3, r5
    bce0:	0030      	movs	r0, r6
    bce2:	0029      	movs	r1, r5
    bce4:	f7fe fd8a 	bl	a7fc <__aeabi_dcmpun>
    bce8:	2800      	cmp	r0, #0
    bcea:	d100      	bne.n	bcee <_printf_float+0x482>
    bcec:	e621      	b.n	b932 <_printf_float+0xc6>
    bcee:	4d03      	ldr	r5, [pc, #12]	; (bcfc <_printf_float+0x490>)
    bcf0:	2f47      	cmp	r7, #71	; 0x47
    bcf2:	d900      	bls.n	bcf6 <_printf_float+0x48a>
    bcf4:	e605      	b.n	b902 <_printf_float+0x96>
    bcf6:	4d02      	ldr	r5, [pc, #8]	; (bd00 <_printf_float+0x494>)
    bcf8:	e603      	b.n	b902 <_printf_float+0x96>
    bcfa:	46c0      	nop			; (mov r8, r8)
    bcfc:	00010135 	.word	0x00010135
    bd00:	00010131 	.word	0x00010131

0000bd04 <_printf_common>:
    bd04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bd06:	0015      	movs	r5, r2
    bd08:	9301      	str	r3, [sp, #4]
    bd0a:	688a      	ldr	r2, [r1, #8]
    bd0c:	690b      	ldr	r3, [r1, #16]
    bd0e:	9000      	str	r0, [sp, #0]
    bd10:	000c      	movs	r4, r1
    bd12:	4293      	cmp	r3, r2
    bd14:	da00      	bge.n	bd18 <_printf_common+0x14>
    bd16:	0013      	movs	r3, r2
    bd18:	0022      	movs	r2, r4
    bd1a:	602b      	str	r3, [r5, #0]
    bd1c:	3243      	adds	r2, #67	; 0x43
    bd1e:	7812      	ldrb	r2, [r2, #0]
    bd20:	2a00      	cmp	r2, #0
    bd22:	d001      	beq.n	bd28 <_printf_common+0x24>
    bd24:	3301      	adds	r3, #1
    bd26:	602b      	str	r3, [r5, #0]
    bd28:	6823      	ldr	r3, [r4, #0]
    bd2a:	069b      	lsls	r3, r3, #26
    bd2c:	d502      	bpl.n	bd34 <_printf_common+0x30>
    bd2e:	682b      	ldr	r3, [r5, #0]
    bd30:	3302      	adds	r3, #2
    bd32:	602b      	str	r3, [r5, #0]
    bd34:	2706      	movs	r7, #6
    bd36:	6823      	ldr	r3, [r4, #0]
    bd38:	401f      	ands	r7, r3
    bd3a:	d027      	beq.n	bd8c <_printf_common+0x88>
    bd3c:	0023      	movs	r3, r4
    bd3e:	3343      	adds	r3, #67	; 0x43
    bd40:	781b      	ldrb	r3, [r3, #0]
    bd42:	1e5a      	subs	r2, r3, #1
    bd44:	4193      	sbcs	r3, r2
    bd46:	6822      	ldr	r2, [r4, #0]
    bd48:	0692      	lsls	r2, r2, #26
    bd4a:	d430      	bmi.n	bdae <_printf_common+0xaa>
    bd4c:	0022      	movs	r2, r4
    bd4e:	9901      	ldr	r1, [sp, #4]
    bd50:	3243      	adds	r2, #67	; 0x43
    bd52:	9800      	ldr	r0, [sp, #0]
    bd54:	9e08      	ldr	r6, [sp, #32]
    bd56:	47b0      	blx	r6
    bd58:	1c43      	adds	r3, r0, #1
    bd5a:	d025      	beq.n	bda8 <_printf_common+0xa4>
    bd5c:	2306      	movs	r3, #6
    bd5e:	6820      	ldr	r0, [r4, #0]
    bd60:	682a      	ldr	r2, [r5, #0]
    bd62:	68e1      	ldr	r1, [r4, #12]
    bd64:	4003      	ands	r3, r0
    bd66:	2500      	movs	r5, #0
    bd68:	2b04      	cmp	r3, #4
    bd6a:	d103      	bne.n	bd74 <_printf_common+0x70>
    bd6c:	1a8d      	subs	r5, r1, r2
    bd6e:	43eb      	mvns	r3, r5
    bd70:	17db      	asrs	r3, r3, #31
    bd72:	401d      	ands	r5, r3
    bd74:	68a3      	ldr	r3, [r4, #8]
    bd76:	6922      	ldr	r2, [r4, #16]
    bd78:	4293      	cmp	r3, r2
    bd7a:	dd01      	ble.n	bd80 <_printf_common+0x7c>
    bd7c:	1a9b      	subs	r3, r3, r2
    bd7e:	18ed      	adds	r5, r5, r3
    bd80:	2700      	movs	r7, #0
    bd82:	42bd      	cmp	r5, r7
    bd84:	d120      	bne.n	bdc8 <_printf_common+0xc4>
    bd86:	2000      	movs	r0, #0
    bd88:	e010      	b.n	bdac <_printf_common+0xa8>
    bd8a:	3701      	adds	r7, #1
    bd8c:	68e3      	ldr	r3, [r4, #12]
    bd8e:	682a      	ldr	r2, [r5, #0]
    bd90:	1a9b      	subs	r3, r3, r2
    bd92:	429f      	cmp	r7, r3
    bd94:	dad2      	bge.n	bd3c <_printf_common+0x38>
    bd96:	0022      	movs	r2, r4
    bd98:	2301      	movs	r3, #1
    bd9a:	3219      	adds	r2, #25
    bd9c:	9901      	ldr	r1, [sp, #4]
    bd9e:	9800      	ldr	r0, [sp, #0]
    bda0:	9e08      	ldr	r6, [sp, #32]
    bda2:	47b0      	blx	r6
    bda4:	1c43      	adds	r3, r0, #1
    bda6:	d1f0      	bne.n	bd8a <_printf_common+0x86>
    bda8:	2001      	movs	r0, #1
    bdaa:	4240      	negs	r0, r0
    bdac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bdae:	2030      	movs	r0, #48	; 0x30
    bdb0:	18e1      	adds	r1, r4, r3
    bdb2:	3143      	adds	r1, #67	; 0x43
    bdb4:	7008      	strb	r0, [r1, #0]
    bdb6:	0021      	movs	r1, r4
    bdb8:	1c5a      	adds	r2, r3, #1
    bdba:	3145      	adds	r1, #69	; 0x45
    bdbc:	7809      	ldrb	r1, [r1, #0]
    bdbe:	18a2      	adds	r2, r4, r2
    bdc0:	3243      	adds	r2, #67	; 0x43
    bdc2:	3302      	adds	r3, #2
    bdc4:	7011      	strb	r1, [r2, #0]
    bdc6:	e7c1      	b.n	bd4c <_printf_common+0x48>
    bdc8:	0022      	movs	r2, r4
    bdca:	2301      	movs	r3, #1
    bdcc:	321a      	adds	r2, #26
    bdce:	9901      	ldr	r1, [sp, #4]
    bdd0:	9800      	ldr	r0, [sp, #0]
    bdd2:	9e08      	ldr	r6, [sp, #32]
    bdd4:	47b0      	blx	r6
    bdd6:	1c43      	adds	r3, r0, #1
    bdd8:	d0e6      	beq.n	bda8 <_printf_common+0xa4>
    bdda:	3701      	adds	r7, #1
    bddc:	e7d1      	b.n	bd82 <_printf_common+0x7e>
	...

0000bde0 <_printf_i>:
    bde0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bde2:	b08b      	sub	sp, #44	; 0x2c
    bde4:	9206      	str	r2, [sp, #24]
    bde6:	000a      	movs	r2, r1
    bde8:	3243      	adds	r2, #67	; 0x43
    bdea:	9307      	str	r3, [sp, #28]
    bdec:	9005      	str	r0, [sp, #20]
    bdee:	9204      	str	r2, [sp, #16]
    bdf0:	7e0a      	ldrb	r2, [r1, #24]
    bdf2:	000c      	movs	r4, r1
    bdf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bdf6:	2a6e      	cmp	r2, #110	; 0x6e
    bdf8:	d100      	bne.n	bdfc <_printf_i+0x1c>
    bdfa:	e08f      	b.n	bf1c <_printf_i+0x13c>
    bdfc:	d817      	bhi.n	be2e <_printf_i+0x4e>
    bdfe:	2a63      	cmp	r2, #99	; 0x63
    be00:	d02c      	beq.n	be5c <_printf_i+0x7c>
    be02:	d808      	bhi.n	be16 <_printf_i+0x36>
    be04:	2a00      	cmp	r2, #0
    be06:	d100      	bne.n	be0a <_printf_i+0x2a>
    be08:	e099      	b.n	bf3e <_printf_i+0x15e>
    be0a:	2a58      	cmp	r2, #88	; 0x58
    be0c:	d054      	beq.n	beb8 <_printf_i+0xd8>
    be0e:	0026      	movs	r6, r4
    be10:	3642      	adds	r6, #66	; 0x42
    be12:	7032      	strb	r2, [r6, #0]
    be14:	e029      	b.n	be6a <_printf_i+0x8a>
    be16:	2a64      	cmp	r2, #100	; 0x64
    be18:	d001      	beq.n	be1e <_printf_i+0x3e>
    be1a:	2a69      	cmp	r2, #105	; 0x69
    be1c:	d1f7      	bne.n	be0e <_printf_i+0x2e>
    be1e:	6821      	ldr	r1, [r4, #0]
    be20:	681a      	ldr	r2, [r3, #0]
    be22:	0608      	lsls	r0, r1, #24
    be24:	d523      	bpl.n	be6e <_printf_i+0x8e>
    be26:	1d11      	adds	r1, r2, #4
    be28:	6019      	str	r1, [r3, #0]
    be2a:	6815      	ldr	r5, [r2, #0]
    be2c:	e025      	b.n	be7a <_printf_i+0x9a>
    be2e:	2a73      	cmp	r2, #115	; 0x73
    be30:	d100      	bne.n	be34 <_printf_i+0x54>
    be32:	e088      	b.n	bf46 <_printf_i+0x166>
    be34:	d808      	bhi.n	be48 <_printf_i+0x68>
    be36:	2a6f      	cmp	r2, #111	; 0x6f
    be38:	d029      	beq.n	be8e <_printf_i+0xae>
    be3a:	2a70      	cmp	r2, #112	; 0x70
    be3c:	d1e7      	bne.n	be0e <_printf_i+0x2e>
    be3e:	2220      	movs	r2, #32
    be40:	6809      	ldr	r1, [r1, #0]
    be42:	430a      	orrs	r2, r1
    be44:	6022      	str	r2, [r4, #0]
    be46:	e003      	b.n	be50 <_printf_i+0x70>
    be48:	2a75      	cmp	r2, #117	; 0x75
    be4a:	d020      	beq.n	be8e <_printf_i+0xae>
    be4c:	2a78      	cmp	r2, #120	; 0x78
    be4e:	d1de      	bne.n	be0e <_printf_i+0x2e>
    be50:	0022      	movs	r2, r4
    be52:	2178      	movs	r1, #120	; 0x78
    be54:	3245      	adds	r2, #69	; 0x45
    be56:	7011      	strb	r1, [r2, #0]
    be58:	4a6c      	ldr	r2, [pc, #432]	; (c00c <_printf_i+0x22c>)
    be5a:	e030      	b.n	bebe <_printf_i+0xde>
    be5c:	000e      	movs	r6, r1
    be5e:	681a      	ldr	r2, [r3, #0]
    be60:	3642      	adds	r6, #66	; 0x42
    be62:	1d11      	adds	r1, r2, #4
    be64:	6019      	str	r1, [r3, #0]
    be66:	6813      	ldr	r3, [r2, #0]
    be68:	7033      	strb	r3, [r6, #0]
    be6a:	2301      	movs	r3, #1
    be6c:	e079      	b.n	bf62 <_printf_i+0x182>
    be6e:	0649      	lsls	r1, r1, #25
    be70:	d5d9      	bpl.n	be26 <_printf_i+0x46>
    be72:	1d11      	adds	r1, r2, #4
    be74:	6019      	str	r1, [r3, #0]
    be76:	2300      	movs	r3, #0
    be78:	5ed5      	ldrsh	r5, [r2, r3]
    be7a:	2d00      	cmp	r5, #0
    be7c:	da03      	bge.n	be86 <_printf_i+0xa6>
    be7e:	232d      	movs	r3, #45	; 0x2d
    be80:	9a04      	ldr	r2, [sp, #16]
    be82:	426d      	negs	r5, r5
    be84:	7013      	strb	r3, [r2, #0]
    be86:	4b62      	ldr	r3, [pc, #392]	; (c010 <_printf_i+0x230>)
    be88:	270a      	movs	r7, #10
    be8a:	9303      	str	r3, [sp, #12]
    be8c:	e02f      	b.n	beee <_printf_i+0x10e>
    be8e:	6820      	ldr	r0, [r4, #0]
    be90:	6819      	ldr	r1, [r3, #0]
    be92:	0605      	lsls	r5, r0, #24
    be94:	d503      	bpl.n	be9e <_printf_i+0xbe>
    be96:	1d08      	adds	r0, r1, #4
    be98:	6018      	str	r0, [r3, #0]
    be9a:	680d      	ldr	r5, [r1, #0]
    be9c:	e005      	b.n	beaa <_printf_i+0xca>
    be9e:	0640      	lsls	r0, r0, #25
    bea0:	d5f9      	bpl.n	be96 <_printf_i+0xb6>
    bea2:	680d      	ldr	r5, [r1, #0]
    bea4:	1d08      	adds	r0, r1, #4
    bea6:	6018      	str	r0, [r3, #0]
    bea8:	b2ad      	uxth	r5, r5
    beaa:	4b59      	ldr	r3, [pc, #356]	; (c010 <_printf_i+0x230>)
    beac:	2708      	movs	r7, #8
    beae:	9303      	str	r3, [sp, #12]
    beb0:	2a6f      	cmp	r2, #111	; 0x6f
    beb2:	d018      	beq.n	bee6 <_printf_i+0x106>
    beb4:	270a      	movs	r7, #10
    beb6:	e016      	b.n	bee6 <_printf_i+0x106>
    beb8:	3145      	adds	r1, #69	; 0x45
    beba:	700a      	strb	r2, [r1, #0]
    bebc:	4a54      	ldr	r2, [pc, #336]	; (c010 <_printf_i+0x230>)
    bebe:	9203      	str	r2, [sp, #12]
    bec0:	681a      	ldr	r2, [r3, #0]
    bec2:	6821      	ldr	r1, [r4, #0]
    bec4:	1d10      	adds	r0, r2, #4
    bec6:	6018      	str	r0, [r3, #0]
    bec8:	6815      	ldr	r5, [r2, #0]
    beca:	0608      	lsls	r0, r1, #24
    becc:	d522      	bpl.n	bf14 <_printf_i+0x134>
    bece:	07cb      	lsls	r3, r1, #31
    bed0:	d502      	bpl.n	bed8 <_printf_i+0xf8>
    bed2:	2320      	movs	r3, #32
    bed4:	4319      	orrs	r1, r3
    bed6:	6021      	str	r1, [r4, #0]
    bed8:	2710      	movs	r7, #16
    beda:	2d00      	cmp	r5, #0
    bedc:	d103      	bne.n	bee6 <_printf_i+0x106>
    bede:	2320      	movs	r3, #32
    bee0:	6822      	ldr	r2, [r4, #0]
    bee2:	439a      	bics	r2, r3
    bee4:	6022      	str	r2, [r4, #0]
    bee6:	0023      	movs	r3, r4
    bee8:	2200      	movs	r2, #0
    beea:	3343      	adds	r3, #67	; 0x43
    beec:	701a      	strb	r2, [r3, #0]
    beee:	6863      	ldr	r3, [r4, #4]
    bef0:	60a3      	str	r3, [r4, #8]
    bef2:	2b00      	cmp	r3, #0
    bef4:	db5c      	blt.n	bfb0 <_printf_i+0x1d0>
    bef6:	2204      	movs	r2, #4
    bef8:	6821      	ldr	r1, [r4, #0]
    befa:	4391      	bics	r1, r2
    befc:	6021      	str	r1, [r4, #0]
    befe:	2d00      	cmp	r5, #0
    bf00:	d158      	bne.n	bfb4 <_printf_i+0x1d4>
    bf02:	9e04      	ldr	r6, [sp, #16]
    bf04:	2b00      	cmp	r3, #0
    bf06:	d064      	beq.n	bfd2 <_printf_i+0x1f2>
    bf08:	0026      	movs	r6, r4
    bf0a:	9b03      	ldr	r3, [sp, #12]
    bf0c:	3642      	adds	r6, #66	; 0x42
    bf0e:	781b      	ldrb	r3, [r3, #0]
    bf10:	7033      	strb	r3, [r6, #0]
    bf12:	e05e      	b.n	bfd2 <_printf_i+0x1f2>
    bf14:	0648      	lsls	r0, r1, #25
    bf16:	d5da      	bpl.n	bece <_printf_i+0xee>
    bf18:	b2ad      	uxth	r5, r5
    bf1a:	e7d8      	b.n	bece <_printf_i+0xee>
    bf1c:	6809      	ldr	r1, [r1, #0]
    bf1e:	681a      	ldr	r2, [r3, #0]
    bf20:	0608      	lsls	r0, r1, #24
    bf22:	d505      	bpl.n	bf30 <_printf_i+0x150>
    bf24:	1d11      	adds	r1, r2, #4
    bf26:	6019      	str	r1, [r3, #0]
    bf28:	6813      	ldr	r3, [r2, #0]
    bf2a:	6962      	ldr	r2, [r4, #20]
    bf2c:	601a      	str	r2, [r3, #0]
    bf2e:	e006      	b.n	bf3e <_printf_i+0x15e>
    bf30:	0649      	lsls	r1, r1, #25
    bf32:	d5f7      	bpl.n	bf24 <_printf_i+0x144>
    bf34:	1d11      	adds	r1, r2, #4
    bf36:	6019      	str	r1, [r3, #0]
    bf38:	6813      	ldr	r3, [r2, #0]
    bf3a:	8aa2      	ldrh	r2, [r4, #20]
    bf3c:	801a      	strh	r2, [r3, #0]
    bf3e:	2300      	movs	r3, #0
    bf40:	9e04      	ldr	r6, [sp, #16]
    bf42:	6123      	str	r3, [r4, #16]
    bf44:	e054      	b.n	bff0 <_printf_i+0x210>
    bf46:	681a      	ldr	r2, [r3, #0]
    bf48:	1d11      	adds	r1, r2, #4
    bf4a:	6019      	str	r1, [r3, #0]
    bf4c:	6816      	ldr	r6, [r2, #0]
    bf4e:	2100      	movs	r1, #0
    bf50:	6862      	ldr	r2, [r4, #4]
    bf52:	0030      	movs	r0, r6
    bf54:	f001 fda4 	bl	daa0 <memchr>
    bf58:	2800      	cmp	r0, #0
    bf5a:	d001      	beq.n	bf60 <_printf_i+0x180>
    bf5c:	1b80      	subs	r0, r0, r6
    bf5e:	6060      	str	r0, [r4, #4]
    bf60:	6863      	ldr	r3, [r4, #4]
    bf62:	6123      	str	r3, [r4, #16]
    bf64:	2300      	movs	r3, #0
    bf66:	9a04      	ldr	r2, [sp, #16]
    bf68:	7013      	strb	r3, [r2, #0]
    bf6a:	e041      	b.n	bff0 <_printf_i+0x210>
    bf6c:	6923      	ldr	r3, [r4, #16]
    bf6e:	0032      	movs	r2, r6
    bf70:	9906      	ldr	r1, [sp, #24]
    bf72:	9805      	ldr	r0, [sp, #20]
    bf74:	9d07      	ldr	r5, [sp, #28]
    bf76:	47a8      	blx	r5
    bf78:	1c43      	adds	r3, r0, #1
    bf7a:	d043      	beq.n	c004 <_printf_i+0x224>
    bf7c:	6823      	ldr	r3, [r4, #0]
    bf7e:	2500      	movs	r5, #0
    bf80:	079b      	lsls	r3, r3, #30
    bf82:	d40f      	bmi.n	bfa4 <_printf_i+0x1c4>
    bf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf86:	68e0      	ldr	r0, [r4, #12]
    bf88:	4298      	cmp	r0, r3
    bf8a:	da3d      	bge.n	c008 <_printf_i+0x228>
    bf8c:	0018      	movs	r0, r3
    bf8e:	e03b      	b.n	c008 <_printf_i+0x228>
    bf90:	0022      	movs	r2, r4
    bf92:	2301      	movs	r3, #1
    bf94:	3219      	adds	r2, #25
    bf96:	9906      	ldr	r1, [sp, #24]
    bf98:	9805      	ldr	r0, [sp, #20]
    bf9a:	9e07      	ldr	r6, [sp, #28]
    bf9c:	47b0      	blx	r6
    bf9e:	1c43      	adds	r3, r0, #1
    bfa0:	d030      	beq.n	c004 <_printf_i+0x224>
    bfa2:	3501      	adds	r5, #1
    bfa4:	68e3      	ldr	r3, [r4, #12]
    bfa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bfa8:	1a9b      	subs	r3, r3, r2
    bfaa:	429d      	cmp	r5, r3
    bfac:	dbf0      	blt.n	bf90 <_printf_i+0x1b0>
    bfae:	e7e9      	b.n	bf84 <_printf_i+0x1a4>
    bfb0:	2d00      	cmp	r5, #0
    bfb2:	d0a9      	beq.n	bf08 <_printf_i+0x128>
    bfb4:	9e04      	ldr	r6, [sp, #16]
    bfb6:	0028      	movs	r0, r5
    bfb8:	0039      	movs	r1, r7
    bfba:	f7fb fe9b 	bl	7cf4 <__aeabi_uidivmod>
    bfbe:	9b03      	ldr	r3, [sp, #12]
    bfc0:	3e01      	subs	r6, #1
    bfc2:	5c5b      	ldrb	r3, [r3, r1]
    bfc4:	0028      	movs	r0, r5
    bfc6:	7033      	strb	r3, [r6, #0]
    bfc8:	0039      	movs	r1, r7
    bfca:	f7fb fe0d 	bl	7be8 <__udivsi3>
    bfce:	1e05      	subs	r5, r0, #0
    bfd0:	d1f1      	bne.n	bfb6 <_printf_i+0x1d6>
    bfd2:	2f08      	cmp	r7, #8
    bfd4:	d109      	bne.n	bfea <_printf_i+0x20a>
    bfd6:	6823      	ldr	r3, [r4, #0]
    bfd8:	07db      	lsls	r3, r3, #31
    bfda:	d506      	bpl.n	bfea <_printf_i+0x20a>
    bfdc:	6863      	ldr	r3, [r4, #4]
    bfde:	6922      	ldr	r2, [r4, #16]
    bfe0:	4293      	cmp	r3, r2
    bfe2:	dc02      	bgt.n	bfea <_printf_i+0x20a>
    bfe4:	2330      	movs	r3, #48	; 0x30
    bfe6:	3e01      	subs	r6, #1
    bfe8:	7033      	strb	r3, [r6, #0]
    bfea:	9b04      	ldr	r3, [sp, #16]
    bfec:	1b9b      	subs	r3, r3, r6
    bfee:	6123      	str	r3, [r4, #16]
    bff0:	9b07      	ldr	r3, [sp, #28]
    bff2:	aa09      	add	r2, sp, #36	; 0x24
    bff4:	9300      	str	r3, [sp, #0]
    bff6:	0021      	movs	r1, r4
    bff8:	9b06      	ldr	r3, [sp, #24]
    bffa:	9805      	ldr	r0, [sp, #20]
    bffc:	f7ff fe82 	bl	bd04 <_printf_common>
    c000:	1c43      	adds	r3, r0, #1
    c002:	d1b3      	bne.n	bf6c <_printf_i+0x18c>
    c004:	2001      	movs	r0, #1
    c006:	4240      	negs	r0, r0
    c008:	b00b      	add	sp, #44	; 0x2c
    c00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c00c:	0001014a 	.word	0x0001014a
    c010:	00010139 	.word	0x00010139

0000c014 <realloc>:
    c014:	b510      	push	{r4, lr}
    c016:	4b03      	ldr	r3, [pc, #12]	; (c024 <realloc+0x10>)
    c018:	000a      	movs	r2, r1
    c01a:	0001      	movs	r1, r0
    c01c:	6818      	ldr	r0, [r3, #0]
    c01e:	f002 f83d 	bl	e09c <_realloc_r>
    c022:	bd10      	pop	{r4, pc}
    c024:	200000b0 	.word	0x200000b0

0000c028 <_sbrk_r>:
    c028:	2300      	movs	r3, #0
    c02a:	b570      	push	{r4, r5, r6, lr}
    c02c:	4c06      	ldr	r4, [pc, #24]	; (c048 <_sbrk_r+0x20>)
    c02e:	0005      	movs	r5, r0
    c030:	0008      	movs	r0, r1
    c032:	6023      	str	r3, [r4, #0]
    c034:	f002 ff94 	bl	ef60 <_sbrk>
    c038:	1c43      	adds	r3, r0, #1
    c03a:	d103      	bne.n	c044 <_sbrk_r+0x1c>
    c03c:	6823      	ldr	r3, [r4, #0]
    c03e:	2b00      	cmp	r3, #0
    c040:	d000      	beq.n	c044 <_sbrk_r+0x1c>
    c042:	602b      	str	r3, [r5, #0]
    c044:	bd70      	pop	{r4, r5, r6, pc}
    c046:	46c0      	nop			; (mov r8, r8)
    c048:	20000f10 	.word	0x20000f10

0000c04c <siprintf>:
    c04c:	b40e      	push	{r1, r2, r3}
    c04e:	b510      	push	{r4, lr}
    c050:	b09d      	sub	sp, #116	; 0x74
    c052:	a902      	add	r1, sp, #8
    c054:	9002      	str	r0, [sp, #8]
    c056:	6108      	str	r0, [r1, #16]
    c058:	480b      	ldr	r0, [pc, #44]	; (c088 <siprintf+0x3c>)
    c05a:	2482      	movs	r4, #130	; 0x82
    c05c:	6088      	str	r0, [r1, #8]
    c05e:	6148      	str	r0, [r1, #20]
    c060:	2001      	movs	r0, #1
    c062:	4240      	negs	r0, r0
    c064:	ab1f      	add	r3, sp, #124	; 0x7c
    c066:	81c8      	strh	r0, [r1, #14]
    c068:	4808      	ldr	r0, [pc, #32]	; (c08c <siprintf+0x40>)
    c06a:	cb04      	ldmia	r3!, {r2}
    c06c:	00a4      	lsls	r4, r4, #2
    c06e:	6800      	ldr	r0, [r0, #0]
    c070:	9301      	str	r3, [sp, #4]
    c072:	818c      	strh	r4, [r1, #12]
    c074:	f002 f89a 	bl	e1ac <_svfiprintf_r>
    c078:	2300      	movs	r3, #0
    c07a:	9a02      	ldr	r2, [sp, #8]
    c07c:	7013      	strb	r3, [r2, #0]
    c07e:	b01d      	add	sp, #116	; 0x74
    c080:	bc10      	pop	{r4}
    c082:	bc08      	pop	{r3}
    c084:	b003      	add	sp, #12
    c086:	4718      	bx	r3
    c088:	7fffffff 	.word	0x7fffffff
    c08c:	200000b0 	.word	0x200000b0

0000c090 <strcat>:
    c090:	0002      	movs	r2, r0
    c092:	b510      	push	{r4, lr}
    c094:	7813      	ldrb	r3, [r2, #0]
    c096:	2b00      	cmp	r3, #0
    c098:	d105      	bne.n	c0a6 <strcat+0x16>
    c09a:	5ccc      	ldrb	r4, [r1, r3]
    c09c:	54d4      	strb	r4, [r2, r3]
    c09e:	3301      	adds	r3, #1
    c0a0:	2c00      	cmp	r4, #0
    c0a2:	d1fa      	bne.n	c09a <strcat+0xa>
    c0a4:	bd10      	pop	{r4, pc}
    c0a6:	3201      	adds	r2, #1
    c0a8:	e7f4      	b.n	c094 <strcat+0x4>

0000c0aa <strcmp>:
    c0aa:	7802      	ldrb	r2, [r0, #0]
    c0ac:	780b      	ldrb	r3, [r1, #0]
    c0ae:	2a00      	cmp	r2, #0
    c0b0:	d003      	beq.n	c0ba <strcmp+0x10>
    c0b2:	3001      	adds	r0, #1
    c0b4:	3101      	adds	r1, #1
    c0b6:	429a      	cmp	r2, r3
    c0b8:	d0f7      	beq.n	c0aa <strcmp>
    c0ba:	1ad0      	subs	r0, r2, r3
    c0bc:	4770      	bx	lr

0000c0be <strcpy>:
    c0be:	1c03      	adds	r3, r0, #0
    c0c0:	780a      	ldrb	r2, [r1, #0]
    c0c2:	3101      	adds	r1, #1
    c0c4:	701a      	strb	r2, [r3, #0]
    c0c6:	3301      	adds	r3, #1
    c0c8:	2a00      	cmp	r2, #0
    c0ca:	d1f9      	bne.n	c0c0 <strcpy+0x2>
    c0cc:	4770      	bx	lr

0000c0ce <strlen>:
    c0ce:	2300      	movs	r3, #0
    c0d0:	5cc2      	ldrb	r2, [r0, r3]
    c0d2:	3301      	adds	r3, #1
    c0d4:	2a00      	cmp	r2, #0
    c0d6:	d1fb      	bne.n	c0d0 <strlen+0x2>
    c0d8:	1e58      	subs	r0, r3, #1
    c0da:	4770      	bx	lr

0000c0dc <strncmp>:
    c0dc:	2300      	movs	r3, #0
    c0de:	b530      	push	{r4, r5, lr}
    c0e0:	429a      	cmp	r2, r3
    c0e2:	d00a      	beq.n	c0fa <strncmp+0x1e>
    c0e4:	3a01      	subs	r2, #1
    c0e6:	5cc4      	ldrb	r4, [r0, r3]
    c0e8:	5ccd      	ldrb	r5, [r1, r3]
    c0ea:	42ac      	cmp	r4, r5
    c0ec:	d104      	bne.n	c0f8 <strncmp+0x1c>
    c0ee:	429a      	cmp	r2, r3
    c0f0:	d002      	beq.n	c0f8 <strncmp+0x1c>
    c0f2:	3301      	adds	r3, #1
    c0f4:	2c00      	cmp	r4, #0
    c0f6:	d1f6      	bne.n	c0e6 <strncmp+0xa>
    c0f8:	1b63      	subs	r3, r4, r5
    c0fa:	0018      	movs	r0, r3
    c0fc:	bd30      	pop	{r4, r5, pc}

0000c0fe <strncpy>:
    c0fe:	b570      	push	{r4, r5, r6, lr}
    c100:	0004      	movs	r4, r0
    c102:	2a00      	cmp	r2, #0
    c104:	d100      	bne.n	c108 <strncpy+0xa>
    c106:	bd70      	pop	{r4, r5, r6, pc}
    c108:	780d      	ldrb	r5, [r1, #0]
    c10a:	1e56      	subs	r6, r2, #1
    c10c:	1c63      	adds	r3, r4, #1
    c10e:	7025      	strb	r5, [r4, #0]
    c110:	3101      	adds	r1, #1
    c112:	2d00      	cmp	r5, #0
    c114:	d105      	bne.n	c122 <strncpy+0x24>
    c116:	18a4      	adds	r4, r4, r2
    c118:	429c      	cmp	r4, r3
    c11a:	d0f4      	beq.n	c106 <strncpy+0x8>
    c11c:	701d      	strb	r5, [r3, #0]
    c11e:	3301      	adds	r3, #1
    c120:	e7fa      	b.n	c118 <strncpy+0x1a>
    c122:	001c      	movs	r4, r3
    c124:	0032      	movs	r2, r6
    c126:	e7ec      	b.n	c102 <strncpy+0x4>

0000c128 <_strtol_l.isra.0>:
    c128:	b5f0      	push	{r4, r5, r6, r7, lr}
    c12a:	001f      	movs	r7, r3
    c12c:	000e      	movs	r6, r1
    c12e:	b087      	sub	sp, #28
    c130:	9005      	str	r0, [sp, #20]
    c132:	9103      	str	r1, [sp, #12]
    c134:	9202      	str	r2, [sp, #8]
    c136:	980c      	ldr	r0, [sp, #48]	; 0x30
    c138:	7834      	ldrb	r4, [r6, #0]
    c13a:	f7fe fe5d 	bl	adf8 <__locale_ctype_ptr_l>
    c13e:	2208      	movs	r2, #8
    c140:	1900      	adds	r0, r0, r4
    c142:	7843      	ldrb	r3, [r0, #1]
    c144:	1c75      	adds	r5, r6, #1
    c146:	4013      	ands	r3, r2
    c148:	d10c      	bne.n	c164 <_strtol_l.isra.0+0x3c>
    c14a:	2c2d      	cmp	r4, #45	; 0x2d
    c14c:	d10c      	bne.n	c168 <_strtol_l.isra.0+0x40>
    c14e:	3301      	adds	r3, #1
    c150:	782c      	ldrb	r4, [r5, #0]
    c152:	9301      	str	r3, [sp, #4]
    c154:	1cb5      	adds	r5, r6, #2
    c156:	2f00      	cmp	r7, #0
    c158:	d00c      	beq.n	c174 <_strtol_l.isra.0+0x4c>
    c15a:	2f10      	cmp	r7, #16
    c15c:	d114      	bne.n	c188 <_strtol_l.isra.0+0x60>
    c15e:	2c30      	cmp	r4, #48	; 0x30
    c160:	d00a      	beq.n	c178 <_strtol_l.isra.0+0x50>
    c162:	e011      	b.n	c188 <_strtol_l.isra.0+0x60>
    c164:	002e      	movs	r6, r5
    c166:	e7e6      	b.n	c136 <_strtol_l.isra.0+0xe>
    c168:	9301      	str	r3, [sp, #4]
    c16a:	2c2b      	cmp	r4, #43	; 0x2b
    c16c:	d1f3      	bne.n	c156 <_strtol_l.isra.0+0x2e>
    c16e:	782c      	ldrb	r4, [r5, #0]
    c170:	1cb5      	adds	r5, r6, #2
    c172:	e7f0      	b.n	c156 <_strtol_l.isra.0+0x2e>
    c174:	2c30      	cmp	r4, #48	; 0x30
    c176:	d12f      	bne.n	c1d8 <_strtol_l.isra.0+0xb0>
    c178:	2220      	movs	r2, #32
    c17a:	782b      	ldrb	r3, [r5, #0]
    c17c:	4393      	bics	r3, r2
    c17e:	2b58      	cmp	r3, #88	; 0x58
    c180:	d151      	bne.n	c226 <_strtol_l.isra.0+0xfe>
    c182:	2710      	movs	r7, #16
    c184:	786c      	ldrb	r4, [r5, #1]
    c186:	3502      	adds	r5, #2
    c188:	9b01      	ldr	r3, [sp, #4]
    c18a:	4a29      	ldr	r2, [pc, #164]	; (c230 <_strtol_l.isra.0+0x108>)
    c18c:	0039      	movs	r1, r7
    c18e:	189e      	adds	r6, r3, r2
    c190:	0030      	movs	r0, r6
    c192:	f7fb fdaf 	bl	7cf4 <__aeabi_uidivmod>
    c196:	0030      	movs	r0, r6
    c198:	9104      	str	r1, [sp, #16]
    c19a:	0039      	movs	r1, r7
    c19c:	f7fb fd24 	bl	7be8 <__udivsi3>
    c1a0:	2101      	movs	r1, #1
    c1a2:	2300      	movs	r3, #0
    c1a4:	4249      	negs	r1, r1
    c1a6:	0002      	movs	r2, r0
    c1a8:	468c      	mov	ip, r1
    c1aa:	0018      	movs	r0, r3
    c1ac:	0021      	movs	r1, r4
    c1ae:	3930      	subs	r1, #48	; 0x30
    c1b0:	2909      	cmp	r1, #9
    c1b2:	d813      	bhi.n	c1dc <_strtol_l.isra.0+0xb4>
    c1b4:	000c      	movs	r4, r1
    c1b6:	42a7      	cmp	r7, r4
    c1b8:	dd1c      	ble.n	c1f4 <_strtol_l.isra.0+0xcc>
    c1ba:	1c59      	adds	r1, r3, #1
    c1bc:	d009      	beq.n	c1d2 <_strtol_l.isra.0+0xaa>
    c1be:	4663      	mov	r3, ip
    c1c0:	4282      	cmp	r2, r0
    c1c2:	d306      	bcc.n	c1d2 <_strtol_l.isra.0+0xaa>
    c1c4:	d102      	bne.n	c1cc <_strtol_l.isra.0+0xa4>
    c1c6:	9904      	ldr	r1, [sp, #16]
    c1c8:	42a1      	cmp	r1, r4
    c1ca:	db02      	blt.n	c1d2 <_strtol_l.isra.0+0xaa>
    c1cc:	2301      	movs	r3, #1
    c1ce:	4378      	muls	r0, r7
    c1d0:	1820      	adds	r0, r4, r0
    c1d2:	782c      	ldrb	r4, [r5, #0]
    c1d4:	3501      	adds	r5, #1
    c1d6:	e7e9      	b.n	c1ac <_strtol_l.isra.0+0x84>
    c1d8:	270a      	movs	r7, #10
    c1da:	e7d5      	b.n	c188 <_strtol_l.isra.0+0x60>
    c1dc:	0021      	movs	r1, r4
    c1de:	3941      	subs	r1, #65	; 0x41
    c1e0:	2919      	cmp	r1, #25
    c1e2:	d801      	bhi.n	c1e8 <_strtol_l.isra.0+0xc0>
    c1e4:	3c37      	subs	r4, #55	; 0x37
    c1e6:	e7e6      	b.n	c1b6 <_strtol_l.isra.0+0x8e>
    c1e8:	0021      	movs	r1, r4
    c1ea:	3961      	subs	r1, #97	; 0x61
    c1ec:	2919      	cmp	r1, #25
    c1ee:	d801      	bhi.n	c1f4 <_strtol_l.isra.0+0xcc>
    c1f0:	3c57      	subs	r4, #87	; 0x57
    c1f2:	e7e0      	b.n	c1b6 <_strtol_l.isra.0+0x8e>
    c1f4:	1c5a      	adds	r2, r3, #1
    c1f6:	d108      	bne.n	c20a <_strtol_l.isra.0+0xe2>
    c1f8:	9a05      	ldr	r2, [sp, #20]
    c1fa:	3323      	adds	r3, #35	; 0x23
    c1fc:	6013      	str	r3, [r2, #0]
    c1fe:	9b02      	ldr	r3, [sp, #8]
    c200:	0030      	movs	r0, r6
    c202:	2b00      	cmp	r3, #0
    c204:	d10b      	bne.n	c21e <_strtol_l.isra.0+0xf6>
    c206:	b007      	add	sp, #28
    c208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c20a:	9a01      	ldr	r2, [sp, #4]
    c20c:	2a00      	cmp	r2, #0
    c20e:	d000      	beq.n	c212 <_strtol_l.isra.0+0xea>
    c210:	4240      	negs	r0, r0
    c212:	9a02      	ldr	r2, [sp, #8]
    c214:	2a00      	cmp	r2, #0
    c216:	d0f6      	beq.n	c206 <_strtol_l.isra.0+0xde>
    c218:	9a03      	ldr	r2, [sp, #12]
    c21a:	2b00      	cmp	r3, #0
    c21c:	d000      	beq.n	c220 <_strtol_l.isra.0+0xf8>
    c21e:	1e6a      	subs	r2, r5, #1
    c220:	9b02      	ldr	r3, [sp, #8]
    c222:	601a      	str	r2, [r3, #0]
    c224:	e7ef      	b.n	c206 <_strtol_l.isra.0+0xde>
    c226:	2430      	movs	r4, #48	; 0x30
    c228:	2f00      	cmp	r7, #0
    c22a:	d1ad      	bne.n	c188 <_strtol_l.isra.0+0x60>
    c22c:	3708      	adds	r7, #8
    c22e:	e7ab      	b.n	c188 <_strtol_l.isra.0+0x60>
    c230:	7fffffff 	.word	0x7fffffff

0000c234 <_strtol_r>:
    c234:	b513      	push	{r0, r1, r4, lr}
    c236:	4c05      	ldr	r4, [pc, #20]	; (c24c <_strtol_r+0x18>)
    c238:	6824      	ldr	r4, [r4, #0]
    c23a:	6a24      	ldr	r4, [r4, #32]
    c23c:	2c00      	cmp	r4, #0
    c23e:	d100      	bne.n	c242 <_strtol_r+0xe>
    c240:	4c03      	ldr	r4, [pc, #12]	; (c250 <_strtol_r+0x1c>)
    c242:	9400      	str	r4, [sp, #0]
    c244:	f7ff ff70 	bl	c128 <_strtol_l.isra.0>
    c248:	bd16      	pop	{r1, r2, r4, pc}
    c24a:	46c0      	nop			; (mov r8, r8)
    c24c:	200000b0 	.word	0x200000b0
    c250:	20000114 	.word	0x20000114

0000c254 <sbrk>:
    c254:	b510      	push	{r4, lr}
    c256:	4b03      	ldr	r3, [pc, #12]	; (c264 <sbrk+0x10>)
    c258:	0001      	movs	r1, r0
    c25a:	6818      	ldr	r0, [r3, #0]
    c25c:	f7ff fee4 	bl	c028 <_sbrk_r>
    c260:	bd10      	pop	{r4, pc}
    c262:	46c0      	nop			; (mov r8, r8)
    c264:	200000b0 	.word	0x200000b0

0000c268 <toupper>:
    c268:	b510      	push	{r4, lr}
    c26a:	0004      	movs	r4, r0
    c26c:	f7fe fdc8 	bl	ae00 <__locale_ctype_ptr>
    c270:	2203      	movs	r2, #3
    c272:	1900      	adds	r0, r0, r4
    c274:	7843      	ldrb	r3, [r0, #1]
    c276:	4013      	ands	r3, r2
    c278:	2b02      	cmp	r3, #2
    c27a:	d100      	bne.n	c27e <toupper+0x16>
    c27c:	3c20      	subs	r4, #32
    c27e:	0020      	movs	r0, r4
    c280:	bd10      	pop	{r4, pc}
	...

0000c284 <__tzcalc_limits>:
    c284:	b5f0      	push	{r4, r5, r6, r7, lr}
    c286:	b089      	sub	sp, #36	; 0x24
    c288:	0004      	movs	r4, r0
    c28a:	f001 fb8d 	bl	d9a8 <__gettzinfo>
    c28e:	4b4c      	ldr	r3, [pc, #304]	; (c3c0 <__tzcalc_limits+0x13c>)
    c290:	0007      	movs	r7, r0
    c292:	2000      	movs	r0, #0
    c294:	429c      	cmp	r4, r3
    c296:	dd58      	ble.n	c34a <__tzcalc_limits+0xc6>
    c298:	256e      	movs	r5, #110	; 0x6e
    c29a:	2164      	movs	r1, #100	; 0x64
    c29c:	4b49      	ldr	r3, [pc, #292]	; (c3c4 <__tzcalc_limits+0x140>)
    c29e:	35ff      	adds	r5, #255	; 0xff
    c2a0:	18e0      	adds	r0, r4, r3
    c2a2:	4345      	muls	r5, r0
    c2a4:	4b48      	ldr	r3, [pc, #288]	; (c3c8 <__tzcalc_limits+0x144>)
    c2a6:	607c      	str	r4, [r7, #4]
    c2a8:	18e0      	adds	r0, r4, r3
    c2aa:	4b48      	ldr	r3, [pc, #288]	; (c3cc <__tzcalc_limits+0x148>)
    c2ac:	1080      	asrs	r0, r0, #2
    c2ae:	182d      	adds	r5, r5, r0
    c2b0:	4249      	negs	r1, r1
    c2b2:	18e0      	adds	r0, r4, r3
    c2b4:	f7fb fd22 	bl	7cfc <__divsi3>
    c2b8:	21c8      	movs	r1, #200	; 0xc8
    c2ba:	4b45      	ldr	r3, [pc, #276]	; (c3d0 <__tzcalc_limits+0x14c>)
    c2bc:	182d      	adds	r5, r5, r0
    c2be:	0049      	lsls	r1, r1, #1
    c2c0:	18e0      	adds	r0, r4, r3
    c2c2:	f7fb fd1b 	bl	7cfc <__divsi3>
    c2c6:	2164      	movs	r1, #100	; 0x64
    c2c8:	182b      	adds	r3, r5, r0
    c2ca:	0020      	movs	r0, r4
    c2cc:	9301      	str	r3, [sp, #4]
    c2ce:	f7fb fdfb 	bl	7ec8 <__aeabi_idivmod>
    c2d2:	9102      	str	r1, [sp, #8]
    c2d4:	21c8      	movs	r1, #200	; 0xc8
    c2d6:	0020      	movs	r0, r4
    c2d8:	0049      	lsls	r1, r1, #1
    c2da:	f7fb fdf5 	bl	7ec8 <__aeabi_idivmod>
    c2de:	000a      	movs	r2, r1
    c2e0:	4253      	negs	r3, r2
    c2e2:	415a      	adcs	r2, r3
    c2e4:	003b      	movs	r3, r7
    c2e6:	3340      	adds	r3, #64	; 0x40
    c2e8:	9307      	str	r3, [sp, #28]
    c2ea:	2303      	movs	r3, #3
    c2ec:	003d      	movs	r5, r7
    c2ee:	401c      	ands	r4, r3
    c2f0:	9103      	str	r1, [sp, #12]
    c2f2:	9205      	str	r2, [sp, #20]
    c2f4:	3508      	adds	r5, #8
    c2f6:	9406      	str	r4, [sp, #24]
    c2f8:	782b      	ldrb	r3, [r5, #0]
    c2fa:	2b4a      	cmp	r3, #74	; 0x4a
    c2fc:	d127      	bne.n	c34e <__tzcalc_limits+0xca>
    c2fe:	9a01      	ldr	r2, [sp, #4]
    c300:	68eb      	ldr	r3, [r5, #12]
    c302:	18d1      	adds	r1, r2, r3
    c304:	9a06      	ldr	r2, [sp, #24]
    c306:	2a00      	cmp	r2, #0
    c308:	d102      	bne.n	c310 <__tzcalc_limits+0x8c>
    c30a:	9a02      	ldr	r2, [sp, #8]
    c30c:	2a00      	cmp	r2, #0
    c30e:	d103      	bne.n	c318 <__tzcalc_limits+0x94>
    c310:	2400      	movs	r4, #0
    c312:	9a03      	ldr	r2, [sp, #12]
    c314:	42a2      	cmp	r2, r4
    c316:	d103      	bne.n	c320 <__tzcalc_limits+0x9c>
    c318:	2401      	movs	r4, #1
    c31a:	2b3b      	cmp	r3, #59	; 0x3b
    c31c:	dc00      	bgt.n	c320 <__tzcalc_limits+0x9c>
    c31e:	2400      	movs	r4, #0
    c320:	1864      	adds	r4, r4, r1
    c322:	3c01      	subs	r4, #1
    c324:	492b      	ldr	r1, [pc, #172]	; (c3d4 <__tzcalc_limits+0x150>)
    c326:	692b      	ldr	r3, [r5, #16]
    c328:	434c      	muls	r4, r1
    c32a:	18e4      	adds	r4, r4, r3
    c32c:	69ab      	ldr	r3, [r5, #24]
    c32e:	18e4      	adds	r4, r4, r3
    c330:	9b07      	ldr	r3, [sp, #28]
    c332:	616c      	str	r4, [r5, #20]
    c334:	351c      	adds	r5, #28
    c336:	42ab      	cmp	r3, r5
    c338:	d1de      	bne.n	c2f8 <__tzcalc_limits+0x74>
    c33a:	69fa      	ldr	r2, [r7, #28]
    c33c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    c33e:	2301      	movs	r3, #1
    c340:	428a      	cmp	r2, r1
    c342:	db00      	blt.n	c346 <__tzcalc_limits+0xc2>
    c344:	2300      	movs	r3, #0
    c346:	2001      	movs	r0, #1
    c348:	603b      	str	r3, [r7, #0]
    c34a:	b009      	add	sp, #36	; 0x24
    c34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c34e:	2b44      	cmp	r3, #68	; 0x44
    c350:	d103      	bne.n	c35a <__tzcalc_limits+0xd6>
    c352:	9b01      	ldr	r3, [sp, #4]
    c354:	68ea      	ldr	r2, [r5, #12]
    c356:	189c      	adds	r4, r3, r2
    c358:	e7e4      	b.n	c324 <__tzcalc_limits+0xa0>
    c35a:	9a06      	ldr	r2, [sp, #24]
    c35c:	9b05      	ldr	r3, [sp, #20]
    c35e:	2a00      	cmp	r2, #0
    c360:	d103      	bne.n	c36a <__tzcalc_limits+0xe6>
    c362:	9a02      	ldr	r2, [sp, #8]
    c364:	2a00      	cmp	r2, #0
    c366:	d000      	beq.n	c36a <__tzcalc_limits+0xe6>
    c368:	2301      	movs	r3, #1
    c36a:	2230      	movs	r2, #48	; 0x30
    c36c:	4353      	muls	r3, r2
    c36e:	4a1a      	ldr	r2, [pc, #104]	; (c3d8 <__tzcalc_limits+0x154>)
    c370:	686e      	ldr	r6, [r5, #4]
    c372:	189b      	adds	r3, r3, r2
    c374:	9304      	str	r3, [sp, #16]
    c376:	001a      	movs	r2, r3
    c378:	2301      	movs	r3, #1
    c37a:	9c01      	ldr	r4, [sp, #4]
    c37c:	42b3      	cmp	r3, r6
    c37e:	db18      	blt.n	c3b2 <__tzcalc_limits+0x12e>
    c380:	2e00      	cmp	r6, #0
    c382:	dc00      	bgt.n	c386 <__tzcalc_limits+0x102>
    c384:	2601      	movs	r6, #1
    c386:	1d20      	adds	r0, r4, #4
    c388:	2107      	movs	r1, #7
    c38a:	f7fb fd9d 	bl	7ec8 <__aeabi_idivmod>
    c38e:	68eb      	ldr	r3, [r5, #12]
    c390:	1a5b      	subs	r3, r3, r1
    c392:	d500      	bpl.n	c396 <__tzcalc_limits+0x112>
    c394:	3307      	adds	r3, #7
    c396:	2107      	movs	r1, #7
    c398:	68aa      	ldr	r2, [r5, #8]
    c39a:	3a01      	subs	r2, #1
    c39c:	4351      	muls	r1, r2
    c39e:	18c9      	adds	r1, r1, r3
    c3a0:	4b0e      	ldr	r3, [pc, #56]	; (c3dc <__tzcalc_limits+0x158>)
    c3a2:	18f6      	adds	r6, r6, r3
    c3a4:	9b04      	ldr	r3, [sp, #16]
    c3a6:	00b6      	lsls	r6, r6, #2
    c3a8:	58f3      	ldr	r3, [r6, r3]
    c3aa:	4299      	cmp	r1, r3
    c3ac:	da05      	bge.n	c3ba <__tzcalc_limits+0x136>
    c3ae:	1864      	adds	r4, r4, r1
    c3b0:	e7b8      	b.n	c324 <__tzcalc_limits+0xa0>
    c3b2:	ca02      	ldmia	r2!, {r1}
    c3b4:	3301      	adds	r3, #1
    c3b6:	1864      	adds	r4, r4, r1
    c3b8:	e7e0      	b.n	c37c <__tzcalc_limits+0xf8>
    c3ba:	3907      	subs	r1, #7
    c3bc:	e7f5      	b.n	c3aa <__tzcalc_limits+0x126>
    c3be:	46c0      	nop			; (mov r8, r8)
    c3c0:	000007b1 	.word	0x000007b1
    c3c4:	fffff84e 	.word	0xfffff84e
    c3c8:	fffff84f 	.word	0xfffff84f
    c3cc:	fffff893 	.word	0xfffff893
    c3d0:	fffff9bf 	.word	0xfffff9bf
    c3d4:	00015180 	.word	0x00015180
    c3d8:	00010308 	.word	0x00010308
    c3dc:	3fffffff 	.word	0x3fffffff

0000c3e0 <__tz_lock>:
    c3e0:	4770      	bx	lr

0000c3e2 <__tz_unlock>:
    c3e2:	4770      	bx	lr

0000c3e4 <_tzset_unlocked>:
    c3e4:	b510      	push	{r4, lr}
    c3e6:	4b02      	ldr	r3, [pc, #8]	; (c3f0 <_tzset_unlocked+0xc>)
    c3e8:	6818      	ldr	r0, [r3, #0]
    c3ea:	f000 f803 	bl	c3f4 <_tzset_unlocked_r>
    c3ee:	bd10      	pop	{r4, pc}
    c3f0:	200000b0 	.word	0x200000b0

0000c3f4 <_tzset_unlocked_r>:
    c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3f6:	b08d      	sub	sp, #52	; 0x34
    c3f8:	0007      	movs	r7, r0
    c3fa:	f001 fad5 	bl	d9a8 <__gettzinfo>
    c3fe:	49af      	ldr	r1, [pc, #700]	; (c6bc <_tzset_unlocked_r+0x2c8>)
    c400:	0006      	movs	r6, r0
    c402:	0038      	movs	r0, r7
    c404:	f001 faca 	bl	d99c <_getenv_r>
    c408:	4dad      	ldr	r5, [pc, #692]	; (c6c0 <_tzset_unlocked_r+0x2cc>)
    c40a:	1e04      	subs	r4, r0, #0
    c40c:	d10d      	bne.n	c42a <_tzset_unlocked_r+0x36>
    c40e:	4bad      	ldr	r3, [pc, #692]	; (c6c4 <_tzset_unlocked_r+0x2d0>)
    c410:	4aad      	ldr	r2, [pc, #692]	; (c6c8 <_tzset_unlocked_r+0x2d4>)
    c412:	6018      	str	r0, [r3, #0]
    c414:	4bad      	ldr	r3, [pc, #692]	; (c6cc <_tzset_unlocked_r+0x2d8>)
    c416:	6018      	str	r0, [r3, #0]
    c418:	4bad      	ldr	r3, [pc, #692]	; (c6d0 <_tzset_unlocked_r+0x2dc>)
    c41a:	6828      	ldr	r0, [r5, #0]
    c41c:	601a      	str	r2, [r3, #0]
    c41e:	605a      	str	r2, [r3, #4]
    c420:	f7fe fd06 	bl	ae30 <free>
    c424:	602c      	str	r4, [r5, #0]
    c426:	b00d      	add	sp, #52	; 0x34
    c428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c42a:	6829      	ldr	r1, [r5, #0]
    c42c:	2900      	cmp	r1, #0
    c42e:	d15a      	bne.n	c4e6 <_tzset_unlocked_r+0xf2>
    c430:	6828      	ldr	r0, [r5, #0]
    c432:	f7fe fcfd 	bl	ae30 <free>
    c436:	0020      	movs	r0, r4
    c438:	f7ff fe49 	bl	c0ce <strlen>
    c43c:	1c41      	adds	r1, r0, #1
    c43e:	0038      	movs	r0, r7
    c440:	f7fe ffd6 	bl	b3f0 <_malloc_r>
    c444:	6028      	str	r0, [r5, #0]
    c446:	2800      	cmp	r0, #0
    c448:	d152      	bne.n	c4f0 <_tzset_unlocked_r+0xfc>
    c44a:	7823      	ldrb	r3, [r4, #0]
    c44c:	3b3a      	subs	r3, #58	; 0x3a
    c44e:	4259      	negs	r1, r3
    c450:	4159      	adcs	r1, r3
    c452:	1864      	adds	r4, r4, r1
    c454:	ab0a      	add	r3, sp, #40	; 0x28
    c456:	4a9f      	ldr	r2, [pc, #636]	; (c6d4 <_tzset_unlocked_r+0x2e0>)
    c458:	499f      	ldr	r1, [pc, #636]	; (c6d8 <_tzset_unlocked_r+0x2e4>)
    c45a:	0020      	movs	r0, r4
    c45c:	f001 fff4 	bl	e448 <siscanf>
    c460:	2800      	cmp	r0, #0
    c462:	dde0      	ble.n	c426 <_tzset_unlocked_r+0x32>
    c464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c466:	18e4      	adds	r4, r4, r3
    c468:	7823      	ldrb	r3, [r4, #0]
    c46a:	2b2d      	cmp	r3, #45	; 0x2d
    c46c:	d144      	bne.n	c4f8 <_tzset_unlocked_r+0x104>
    c46e:	3b2e      	subs	r3, #46	; 0x2e
    c470:	3401      	adds	r4, #1
    c472:	9304      	str	r3, [sp, #16]
    c474:	2716      	movs	r7, #22
    c476:	ab02      	add	r3, sp, #8
    c478:	18ff      	adds	r7, r7, r3
    c47a:	2300      	movs	r3, #0
    c47c:	803b      	strh	r3, [r7, #0]
    c47e:	2300      	movs	r3, #0
    c480:	ad08      	add	r5, sp, #32
    c482:	802b      	strh	r3, [r5, #0]
    c484:	ab0a      	add	r3, sp, #40	; 0x28
    c486:	9303      	str	r3, [sp, #12]
    c488:	9502      	str	r5, [sp, #8]
    c48a:	9301      	str	r3, [sp, #4]
    c48c:	9700      	str	r7, [sp, #0]
    c48e:	aa07      	add	r2, sp, #28
    c490:	4992      	ldr	r1, [pc, #584]	; (c6dc <_tzset_unlocked_r+0x2e8>)
    c492:	0020      	movs	r0, r4
    c494:	f001 ffd8 	bl	e448 <siscanf>
    c498:	2800      	cmp	r0, #0
    c49a:	ddc4      	ble.n	c426 <_tzset_unlocked_r+0x32>
    c49c:	233c      	movs	r3, #60	; 0x3c
    c49e:	883a      	ldrh	r2, [r7, #0]
    c4a0:	4f8f      	ldr	r7, [pc, #572]	; (c6e0 <_tzset_unlocked_r+0x2ec>)
    c4a2:	4353      	muls	r3, r2
    c4a4:	882a      	ldrh	r2, [r5, #0]
    c4a6:	4d8a      	ldr	r5, [pc, #552]	; (c6d0 <_tzset_unlocked_r+0x2dc>)
    c4a8:	189b      	adds	r3, r3, r2
    c4aa:	aa02      	add	r2, sp, #8
    c4ac:	8a91      	ldrh	r1, [r2, #20]
    c4ae:	22e1      	movs	r2, #225	; 0xe1
    c4b0:	0112      	lsls	r2, r2, #4
    c4b2:	434a      	muls	r2, r1
    c4b4:	189b      	adds	r3, r3, r2
    c4b6:	9a04      	ldr	r2, [sp, #16]
    c4b8:	4987      	ldr	r1, [pc, #540]	; (c6d8 <_tzset_unlocked_r+0x2e4>)
    c4ba:	435a      	muls	r2, r3
    c4bc:	4b85      	ldr	r3, [pc, #532]	; (c6d4 <_tzset_unlocked_r+0x2e0>)
    c4be:	6232      	str	r2, [r6, #32]
    c4c0:	602b      	str	r3, [r5, #0]
    c4c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4c4:	003a      	movs	r2, r7
    c4c6:	18e4      	adds	r4, r4, r3
    c4c8:	0020      	movs	r0, r4
    c4ca:	ab0a      	add	r3, sp, #40	; 0x28
    c4cc:	f001 ffbc 	bl	e448 <siscanf>
    c4d0:	2800      	cmp	r0, #0
    c4d2:	dc18      	bgt.n	c506 <_tzset_unlocked_r+0x112>
    c4d4:	682b      	ldr	r3, [r5, #0]
    c4d6:	6a32      	ldr	r2, [r6, #32]
    c4d8:	606b      	str	r3, [r5, #4]
    c4da:	4b7a      	ldr	r3, [pc, #488]	; (c6c4 <_tzset_unlocked_r+0x2d0>)
    c4dc:	601a      	str	r2, [r3, #0]
    c4de:	2200      	movs	r2, #0
    c4e0:	4b7a      	ldr	r3, [pc, #488]	; (c6cc <_tzset_unlocked_r+0x2d8>)
    c4e2:	601a      	str	r2, [r3, #0]
    c4e4:	e79f      	b.n	c426 <_tzset_unlocked_r+0x32>
    c4e6:	f7ff fde0 	bl	c0aa <strcmp>
    c4ea:	2800      	cmp	r0, #0
    c4ec:	d09b      	beq.n	c426 <_tzset_unlocked_r+0x32>
    c4ee:	e79f      	b.n	c430 <_tzset_unlocked_r+0x3c>
    c4f0:	0021      	movs	r1, r4
    c4f2:	f7ff fde4 	bl	c0be <strcpy>
    c4f6:	e7a8      	b.n	c44a <_tzset_unlocked_r+0x56>
    c4f8:	2201      	movs	r2, #1
    c4fa:	3b2b      	subs	r3, #43	; 0x2b
    c4fc:	9204      	str	r2, [sp, #16]
    c4fe:	4259      	negs	r1, r3
    c500:	4159      	adcs	r1, r3
    c502:	1864      	adds	r4, r4, r1
    c504:	e7b6      	b.n	c474 <_tzset_unlocked_r+0x80>
    c506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c508:	606f      	str	r7, [r5, #4]
    c50a:	18e4      	adds	r4, r4, r3
    c50c:	7823      	ldrb	r3, [r4, #0]
    c50e:	2b2d      	cmp	r3, #45	; 0x2d
    c510:	d000      	beq.n	c514 <_tzset_unlocked_r+0x120>
    c512:	e08f      	b.n	c634 <_tzset_unlocked_r+0x240>
    c514:	3b2e      	subs	r3, #46	; 0x2e
    c516:	3401      	adds	r4, #1
    c518:	9304      	str	r3, [sp, #16]
    c51a:	2716      	movs	r7, #22
    c51c:	2300      	movs	r3, #0
    c51e:	aa02      	add	r2, sp, #8
    c520:	18bf      	adds	r7, r7, r2
    c522:	ad07      	add	r5, sp, #28
    c524:	8313      	strh	r3, [r2, #24]
    c526:	802b      	strh	r3, [r5, #0]
    c528:	803b      	strh	r3, [r7, #0]
    c52a:	aa08      	add	r2, sp, #32
    c52c:	930a      	str	r3, [sp, #40]	; 0x28
    c52e:	ab0a      	add	r3, sp, #40	; 0x28
    c530:	9202      	str	r2, [sp, #8]
    c532:	9303      	str	r3, [sp, #12]
    c534:	9301      	str	r3, [sp, #4]
    c536:	9700      	str	r7, [sp, #0]
    c538:	002a      	movs	r2, r5
    c53a:	4968      	ldr	r1, [pc, #416]	; (c6dc <_tzset_unlocked_r+0x2e8>)
    c53c:	0020      	movs	r0, r4
    c53e:	f001 ff83 	bl	e448 <siscanf>
    c542:	2800      	cmp	r0, #0
    c544:	dd00      	ble.n	c548 <_tzset_unlocked_r+0x154>
    c546:	e07c      	b.n	c642 <_tzset_unlocked_r+0x24e>
    c548:	6a33      	ldr	r3, [r6, #32]
    c54a:	4a66      	ldr	r2, [pc, #408]	; (c6e4 <_tzset_unlocked_r+0x2f0>)
    c54c:	189b      	adds	r3, r3, r2
    c54e:	63f3      	str	r3, [r6, #60]	; 0x3c
    c550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c552:	0037      	movs	r7, r6
    c554:	18e4      	adds	r4, r4, r3
    c556:	2300      	movs	r3, #0
    c558:	3708      	adds	r7, #8
    c55a:	9304      	str	r3, [sp, #16]
    c55c:	7823      	ldrb	r3, [r4, #0]
    c55e:	3b2c      	subs	r3, #44	; 0x2c
    c560:	4259      	negs	r1, r3
    c562:	4159      	adcs	r1, r3
    c564:	1864      	adds	r4, r4, r1
    c566:	7825      	ldrb	r5, [r4, #0]
    c568:	2d4d      	cmp	r5, #77	; 0x4d
    c56a:	d000      	beq.n	c56e <_tzset_unlocked_r+0x17a>
    c56c:	e078      	b.n	c660 <_tzset_unlocked_r+0x26c>
    c56e:	221e      	movs	r2, #30
    c570:	a902      	add	r1, sp, #8
    c572:	1852      	adds	r2, r2, r1
    c574:	9202      	str	r2, [sp, #8]
    c576:	aa09      	add	r2, sp, #36	; 0x24
    c578:	9200      	str	r2, [sp, #0]
    c57a:	221a      	movs	r2, #26
    c57c:	ab0a      	add	r3, sp, #40	; 0x28
    c57e:	1852      	adds	r2, r2, r1
    c580:	9303      	str	r3, [sp, #12]
    c582:	9301      	str	r3, [sp, #4]
    c584:	4958      	ldr	r1, [pc, #352]	; (c6e8 <_tzset_unlocked_r+0x2f4>)
    c586:	0020      	movs	r0, r4
    c588:	f001 ff5e 	bl	e448 <siscanf>
    c58c:	2803      	cmp	r0, #3
    c58e:	d000      	beq.n	c592 <_tzset_unlocked_r+0x19e>
    c590:	e749      	b.n	c426 <_tzset_unlocked_r+0x32>
    c592:	ab02      	add	r3, sp, #8
    c594:	8b59      	ldrh	r1, [r3, #26]
    c596:	1e4b      	subs	r3, r1, #1
    c598:	2b0b      	cmp	r3, #11
    c59a:	d900      	bls.n	c59e <_tzset_unlocked_r+0x1aa>
    c59c:	e743      	b.n	c426 <_tzset_unlocked_r+0x32>
    c59e:	ab02      	add	r3, sp, #8
    c5a0:	8b9a      	ldrh	r2, [r3, #28]
    c5a2:	1e53      	subs	r3, r2, #1
    c5a4:	2b04      	cmp	r3, #4
    c5a6:	d900      	bls.n	c5aa <_tzset_unlocked_r+0x1b6>
    c5a8:	e73d      	b.n	c426 <_tzset_unlocked_r+0x32>
    c5aa:	ab02      	add	r3, sp, #8
    c5ac:	8bdb      	ldrh	r3, [r3, #30]
    c5ae:	2b06      	cmp	r3, #6
    c5b0:	d900      	bls.n	c5b4 <_tzset_unlocked_r+0x1c0>
    c5b2:	e738      	b.n	c426 <_tzset_unlocked_r+0x32>
    c5b4:	703d      	strb	r5, [r7, #0]
    c5b6:	6079      	str	r1, [r7, #4]
    c5b8:	60ba      	str	r2, [r7, #8]
    c5ba:	60fb      	str	r3, [r7, #12]
    c5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5be:	18e5      	adds	r5, r4, r3
    c5c0:	2302      	movs	r3, #2
    c5c2:	aa07      	add	r2, sp, #28
    c5c4:	8013      	strh	r3, [r2, #0]
    c5c6:	2300      	movs	r3, #0
    c5c8:	a902      	add	r1, sp, #8
    c5ca:	ac08      	add	r4, sp, #32
    c5cc:	82cb      	strh	r3, [r1, #22]
    c5ce:	8023      	strh	r3, [r4, #0]
    c5d0:	930a      	str	r3, [sp, #40]	; 0x28
    c5d2:	782b      	ldrb	r3, [r5, #0]
    c5d4:	2b2f      	cmp	r3, #47	; 0x2f
    c5d6:	d10b      	bne.n	c5f0 <_tzset_unlocked_r+0x1fc>
    c5d8:	2116      	movs	r1, #22
    c5da:	a802      	add	r0, sp, #8
    c5dc:	1809      	adds	r1, r1, r0
    c5de:	ab0a      	add	r3, sp, #40	; 0x28
    c5e0:	9100      	str	r1, [sp, #0]
    c5e2:	9303      	str	r3, [sp, #12]
    c5e4:	9402      	str	r4, [sp, #8]
    c5e6:	9301      	str	r3, [sp, #4]
    c5e8:	4940      	ldr	r1, [pc, #256]	; (c6ec <_tzset_unlocked_r+0x2f8>)
    c5ea:	0028      	movs	r0, r5
    c5ec:	f001 ff2c 	bl	e448 <siscanf>
    c5f0:	ab02      	add	r3, sp, #8
    c5f2:	8ada      	ldrh	r2, [r3, #22]
    c5f4:	233c      	movs	r3, #60	; 0x3c
    c5f6:	4353      	muls	r3, r2
    c5f8:	8822      	ldrh	r2, [r4, #0]
    c5fa:	189b      	adds	r3, r3, r2
    c5fc:	aa07      	add	r2, sp, #28
    c5fe:	8811      	ldrh	r1, [r2, #0]
    c600:	22e1      	movs	r2, #225	; 0xe1
    c602:	0112      	lsls	r2, r2, #4
    c604:	434a      	muls	r2, r1
    c606:	189b      	adds	r3, r3, r2
    c608:	613b      	str	r3, [r7, #16]
    c60a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c60c:	371c      	adds	r7, #28
    c60e:	18ec      	adds	r4, r5, r3
    c610:	9b04      	ldr	r3, [sp, #16]
    c612:	3301      	adds	r3, #1
    c614:	9304      	str	r3, [sp, #16]
    c616:	2b02      	cmp	r3, #2
    c618:	d1a0      	bne.n	c55c <_tzset_unlocked_r+0x168>
    c61a:	6870      	ldr	r0, [r6, #4]
    c61c:	f7ff fe32 	bl	c284 <__tzcalc_limits>
    c620:	6a32      	ldr	r2, [r6, #32]
    c622:	4b28      	ldr	r3, [pc, #160]	; (c6c4 <_tzset_unlocked_r+0x2d0>)
    c624:	601a      	str	r2, [r3, #0]
    c626:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    c628:	1a9b      	subs	r3, r3, r2
    c62a:	1e5a      	subs	r2, r3, #1
    c62c:	4193      	sbcs	r3, r2
    c62e:	4a27      	ldr	r2, [pc, #156]	; (c6cc <_tzset_unlocked_r+0x2d8>)
    c630:	6013      	str	r3, [r2, #0]
    c632:	e6f8      	b.n	c426 <_tzset_unlocked_r+0x32>
    c634:	2201      	movs	r2, #1
    c636:	3b2b      	subs	r3, #43	; 0x2b
    c638:	9204      	str	r2, [sp, #16]
    c63a:	4259      	negs	r1, r3
    c63c:	4159      	adcs	r1, r3
    c63e:	1864      	adds	r4, r4, r1
    c640:	e76b      	b.n	c51a <_tzset_unlocked_r+0x126>
    c642:	233c      	movs	r3, #60	; 0x3c
    c644:	883a      	ldrh	r2, [r7, #0]
    c646:	8829      	ldrh	r1, [r5, #0]
    c648:	4353      	muls	r3, r2
    c64a:	aa02      	add	r2, sp, #8
    c64c:	8b12      	ldrh	r2, [r2, #24]
    c64e:	189b      	adds	r3, r3, r2
    c650:	22e1      	movs	r2, #225	; 0xe1
    c652:	0112      	lsls	r2, r2, #4
    c654:	434a      	muls	r2, r1
    c656:	189b      	adds	r3, r3, r2
    c658:	9a04      	ldr	r2, [sp, #16]
    c65a:	435a      	muls	r2, r3
    c65c:	0013      	movs	r3, r2
    c65e:	e776      	b.n	c54e <_tzset_unlocked_r+0x15a>
    c660:	2344      	movs	r3, #68	; 0x44
    c662:	9305      	str	r3, [sp, #20]
    c664:	2d4a      	cmp	r5, #74	; 0x4a
    c666:	d101      	bne.n	c66c <_tzset_unlocked_r+0x278>
    c668:	3401      	adds	r4, #1
    c66a:	9505      	str	r5, [sp, #20]
    c66c:	220a      	movs	r2, #10
    c66e:	a90b      	add	r1, sp, #44	; 0x2c
    c670:	0020      	movs	r0, r4
    c672:	f001 fff7 	bl	e664 <strtoul>
    c676:	231e      	movs	r3, #30
    c678:	aa02      	add	r2, sp, #8
    c67a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c67c:	189b      	adds	r3, r3, r2
    c67e:	8018      	strh	r0, [r3, #0]
    c680:	42ac      	cmp	r4, r5
    c682:	d115      	bne.n	c6b0 <_tzset_unlocked_r+0x2bc>
    c684:	9b04      	ldr	r3, [sp, #16]
    c686:	2b00      	cmp	r3, #0
    c688:	d108      	bne.n	c69c <_tzset_unlocked_r+0x2a8>
    c68a:	334d      	adds	r3, #77	; 0x4d
    c68c:	7233      	strb	r3, [r6, #8]
    c68e:	2303      	movs	r3, #3
    c690:	60f3      	str	r3, [r6, #12]
    c692:	3b01      	subs	r3, #1
    c694:	6133      	str	r3, [r6, #16]
    c696:	9b04      	ldr	r3, [sp, #16]
    c698:	6173      	str	r3, [r6, #20]
    c69a:	e791      	b.n	c5c0 <_tzset_unlocked_r+0x1cc>
    c69c:	224d      	movs	r2, #77	; 0x4d
    c69e:	1d73      	adds	r3, r6, #5
    c6a0:	77da      	strb	r2, [r3, #31]
    c6a2:	230b      	movs	r3, #11
    c6a4:	62b3      	str	r3, [r6, #40]	; 0x28
    c6a6:	3b0a      	subs	r3, #10
    c6a8:	62f3      	str	r3, [r6, #44]	; 0x2c
    c6aa:	2300      	movs	r3, #0
    c6ac:	6333      	str	r3, [r6, #48]	; 0x30
    c6ae:	e787      	b.n	c5c0 <_tzset_unlocked_r+0x1cc>
    c6b0:	466b      	mov	r3, sp
    c6b2:	7d1b      	ldrb	r3, [r3, #20]
    c6b4:	b280      	uxth	r0, r0
    c6b6:	703b      	strb	r3, [r7, #0]
    c6b8:	60f8      	str	r0, [r7, #12]
    c6ba:	e781      	b.n	c5c0 <_tzset_unlocked_r+0x1cc>
    c6bc:	0001015b 	.word	0x0001015b
    c6c0:	20000efc 	.word	0x20000efc
    c6c4:	20000f04 	.word	0x20000f04
    c6c8:	0001015e 	.word	0x0001015e
    c6cc:	20000f00 	.word	0x20000f00
    c6d0:	20000280 	.word	0x20000280
    c6d4:	20000eef 	.word	0x20000eef
    c6d8:	00010162 	.word	0x00010162
    c6dc:	00010185 	.word	0x00010185
    c6e0:	20000ee4 	.word	0x20000ee4
    c6e4:	fffff1f0 	.word	0xfffff1f0
    c6e8:	00010171 	.word	0x00010171
    c6ec:	00010184 	.word	0x00010184

0000c6f0 <_vsiprintf_r>:
    c6f0:	b530      	push	{r4, r5, lr}
    c6f2:	b09b      	sub	sp, #108	; 0x6c
    c6f4:	9100      	str	r1, [sp, #0]
    c6f6:	9104      	str	r1, [sp, #16]
    c6f8:	4908      	ldr	r1, [pc, #32]	; (c71c <_vsiprintf_r+0x2c>)
    c6fa:	466d      	mov	r5, sp
    c6fc:	9102      	str	r1, [sp, #8]
    c6fe:	9105      	str	r1, [sp, #20]
    c700:	2101      	movs	r1, #1
    c702:	2482      	movs	r4, #130	; 0x82
    c704:	4249      	negs	r1, r1
    c706:	81e9      	strh	r1, [r5, #14]
    c708:	00a4      	lsls	r4, r4, #2
    c70a:	4669      	mov	r1, sp
    c70c:	81ac      	strh	r4, [r5, #12]
    c70e:	f001 fd4d 	bl	e1ac <_svfiprintf_r>
    c712:	2300      	movs	r3, #0
    c714:	9a00      	ldr	r2, [sp, #0]
    c716:	7013      	strb	r3, [r2, #0]
    c718:	b01b      	add	sp, #108	; 0x6c
    c71a:	bd30      	pop	{r4, r5, pc}
    c71c:	7fffffff 	.word	0x7fffffff

0000c720 <vsiprintf>:
    c720:	b510      	push	{r4, lr}
    c722:	0013      	movs	r3, r2
    c724:	000a      	movs	r2, r1
    c726:	0001      	movs	r1, r0
    c728:	4802      	ldr	r0, [pc, #8]	; (c734 <vsiprintf+0x14>)
    c72a:	6800      	ldr	r0, [r0, #0]
    c72c:	f7ff ffe0 	bl	c6f0 <_vsiprintf_r>
    c730:	bd10      	pop	{r4, pc}
    c732:	46c0      	nop			; (mov r8, r8)
    c734:	200000b0 	.word	0x200000b0

0000c738 <__swbuf_r>:
    c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c73a:	0005      	movs	r5, r0
    c73c:	000e      	movs	r6, r1
    c73e:	0014      	movs	r4, r2
    c740:	2800      	cmp	r0, #0
    c742:	d004      	beq.n	c74e <__swbuf_r+0x16>
    c744:	6983      	ldr	r3, [r0, #24]
    c746:	2b00      	cmp	r3, #0
    c748:	d101      	bne.n	c74e <__swbuf_r+0x16>
    c74a:	f001 f855 	bl	d7f8 <__sinit>
    c74e:	4b22      	ldr	r3, [pc, #136]	; (c7d8 <__swbuf_r+0xa0>)
    c750:	429c      	cmp	r4, r3
    c752:	d12d      	bne.n	c7b0 <__swbuf_r+0x78>
    c754:	686c      	ldr	r4, [r5, #4]
    c756:	69a3      	ldr	r3, [r4, #24]
    c758:	60a3      	str	r3, [r4, #8]
    c75a:	89a3      	ldrh	r3, [r4, #12]
    c75c:	071b      	lsls	r3, r3, #28
    c75e:	d531      	bpl.n	c7c4 <__swbuf_r+0x8c>
    c760:	6923      	ldr	r3, [r4, #16]
    c762:	2b00      	cmp	r3, #0
    c764:	d02e      	beq.n	c7c4 <__swbuf_r+0x8c>
    c766:	6823      	ldr	r3, [r4, #0]
    c768:	6922      	ldr	r2, [r4, #16]
    c76a:	b2f7      	uxtb	r7, r6
    c76c:	1a98      	subs	r0, r3, r2
    c76e:	6963      	ldr	r3, [r4, #20]
    c770:	b2f6      	uxtb	r6, r6
    c772:	4298      	cmp	r0, r3
    c774:	db05      	blt.n	c782 <__swbuf_r+0x4a>
    c776:	0021      	movs	r1, r4
    c778:	0028      	movs	r0, r5
    c77a:	f000 ffcf 	bl	d71c <_fflush_r>
    c77e:	2800      	cmp	r0, #0
    c780:	d126      	bne.n	c7d0 <__swbuf_r+0x98>
    c782:	68a3      	ldr	r3, [r4, #8]
    c784:	3001      	adds	r0, #1
    c786:	3b01      	subs	r3, #1
    c788:	60a3      	str	r3, [r4, #8]
    c78a:	6823      	ldr	r3, [r4, #0]
    c78c:	1c5a      	adds	r2, r3, #1
    c78e:	6022      	str	r2, [r4, #0]
    c790:	701f      	strb	r7, [r3, #0]
    c792:	6963      	ldr	r3, [r4, #20]
    c794:	4298      	cmp	r0, r3
    c796:	d004      	beq.n	c7a2 <__swbuf_r+0x6a>
    c798:	89a3      	ldrh	r3, [r4, #12]
    c79a:	07db      	lsls	r3, r3, #31
    c79c:	d51a      	bpl.n	c7d4 <__swbuf_r+0x9c>
    c79e:	2e0a      	cmp	r6, #10
    c7a0:	d118      	bne.n	c7d4 <__swbuf_r+0x9c>
    c7a2:	0021      	movs	r1, r4
    c7a4:	0028      	movs	r0, r5
    c7a6:	f000 ffb9 	bl	d71c <_fflush_r>
    c7aa:	2800      	cmp	r0, #0
    c7ac:	d012      	beq.n	c7d4 <__swbuf_r+0x9c>
    c7ae:	e00f      	b.n	c7d0 <__swbuf_r+0x98>
    c7b0:	4b0a      	ldr	r3, [pc, #40]	; (c7dc <__swbuf_r+0xa4>)
    c7b2:	429c      	cmp	r4, r3
    c7b4:	d101      	bne.n	c7ba <__swbuf_r+0x82>
    c7b6:	68ac      	ldr	r4, [r5, #8]
    c7b8:	e7cd      	b.n	c756 <__swbuf_r+0x1e>
    c7ba:	4b09      	ldr	r3, [pc, #36]	; (c7e0 <__swbuf_r+0xa8>)
    c7bc:	429c      	cmp	r4, r3
    c7be:	d1ca      	bne.n	c756 <__swbuf_r+0x1e>
    c7c0:	68ec      	ldr	r4, [r5, #12]
    c7c2:	e7c8      	b.n	c756 <__swbuf_r+0x1e>
    c7c4:	0021      	movs	r1, r4
    c7c6:	0028      	movs	r0, r5
    c7c8:	f000 f818 	bl	c7fc <__swsetup_r>
    c7cc:	2800      	cmp	r0, #0
    c7ce:	d0ca      	beq.n	c766 <__swbuf_r+0x2e>
    c7d0:	2601      	movs	r6, #1
    c7d2:	4276      	negs	r6, r6
    c7d4:	0030      	movs	r0, r6
    c7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c7d8:	000102c8 	.word	0x000102c8
    c7dc:	000102e8 	.word	0x000102e8
    c7e0:	000102a8 	.word	0x000102a8

0000c7e4 <__ascii_wctomb>:
    c7e4:	1e0b      	subs	r3, r1, #0
    c7e6:	d004      	beq.n	c7f2 <__ascii_wctomb+0xe>
    c7e8:	2aff      	cmp	r2, #255	; 0xff
    c7ea:	d904      	bls.n	c7f6 <__ascii_wctomb+0x12>
    c7ec:	238a      	movs	r3, #138	; 0x8a
    c7ee:	6003      	str	r3, [r0, #0]
    c7f0:	3b8b      	subs	r3, #139	; 0x8b
    c7f2:	0018      	movs	r0, r3
    c7f4:	4770      	bx	lr
    c7f6:	700a      	strb	r2, [r1, #0]
    c7f8:	2301      	movs	r3, #1
    c7fa:	e7fa      	b.n	c7f2 <__ascii_wctomb+0xe>

0000c7fc <__swsetup_r>:
    c7fc:	4b36      	ldr	r3, [pc, #216]	; (c8d8 <__swsetup_r+0xdc>)
    c7fe:	b570      	push	{r4, r5, r6, lr}
    c800:	681d      	ldr	r5, [r3, #0]
    c802:	0006      	movs	r6, r0
    c804:	000c      	movs	r4, r1
    c806:	2d00      	cmp	r5, #0
    c808:	d005      	beq.n	c816 <__swsetup_r+0x1a>
    c80a:	69ab      	ldr	r3, [r5, #24]
    c80c:	2b00      	cmp	r3, #0
    c80e:	d102      	bne.n	c816 <__swsetup_r+0x1a>
    c810:	0028      	movs	r0, r5
    c812:	f000 fff1 	bl	d7f8 <__sinit>
    c816:	4b31      	ldr	r3, [pc, #196]	; (c8dc <__swsetup_r+0xe0>)
    c818:	429c      	cmp	r4, r3
    c81a:	d10f      	bne.n	c83c <__swsetup_r+0x40>
    c81c:	686c      	ldr	r4, [r5, #4]
    c81e:	230c      	movs	r3, #12
    c820:	5ee2      	ldrsh	r2, [r4, r3]
    c822:	b293      	uxth	r3, r2
    c824:	0719      	lsls	r1, r3, #28
    c826:	d42d      	bmi.n	c884 <__swsetup_r+0x88>
    c828:	06d9      	lsls	r1, r3, #27
    c82a:	d411      	bmi.n	c850 <__swsetup_r+0x54>
    c82c:	2309      	movs	r3, #9
    c82e:	2001      	movs	r0, #1
    c830:	6033      	str	r3, [r6, #0]
    c832:	3337      	adds	r3, #55	; 0x37
    c834:	4313      	orrs	r3, r2
    c836:	81a3      	strh	r3, [r4, #12]
    c838:	4240      	negs	r0, r0
    c83a:	bd70      	pop	{r4, r5, r6, pc}
    c83c:	4b28      	ldr	r3, [pc, #160]	; (c8e0 <__swsetup_r+0xe4>)
    c83e:	429c      	cmp	r4, r3
    c840:	d101      	bne.n	c846 <__swsetup_r+0x4a>
    c842:	68ac      	ldr	r4, [r5, #8]
    c844:	e7eb      	b.n	c81e <__swsetup_r+0x22>
    c846:	4b27      	ldr	r3, [pc, #156]	; (c8e4 <__swsetup_r+0xe8>)
    c848:	429c      	cmp	r4, r3
    c84a:	d1e8      	bne.n	c81e <__swsetup_r+0x22>
    c84c:	68ec      	ldr	r4, [r5, #12]
    c84e:	e7e6      	b.n	c81e <__swsetup_r+0x22>
    c850:	075b      	lsls	r3, r3, #29
    c852:	d513      	bpl.n	c87c <__swsetup_r+0x80>
    c854:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c856:	2900      	cmp	r1, #0
    c858:	d008      	beq.n	c86c <__swsetup_r+0x70>
    c85a:	0023      	movs	r3, r4
    c85c:	3344      	adds	r3, #68	; 0x44
    c85e:	4299      	cmp	r1, r3
    c860:	d002      	beq.n	c868 <__swsetup_r+0x6c>
    c862:	0030      	movs	r0, r6
    c864:	f7fe fd7a 	bl	b35c <_free_r>
    c868:	2300      	movs	r3, #0
    c86a:	6363      	str	r3, [r4, #52]	; 0x34
    c86c:	2224      	movs	r2, #36	; 0x24
    c86e:	89a3      	ldrh	r3, [r4, #12]
    c870:	4393      	bics	r3, r2
    c872:	81a3      	strh	r3, [r4, #12]
    c874:	2300      	movs	r3, #0
    c876:	6063      	str	r3, [r4, #4]
    c878:	6923      	ldr	r3, [r4, #16]
    c87a:	6023      	str	r3, [r4, #0]
    c87c:	2308      	movs	r3, #8
    c87e:	89a2      	ldrh	r2, [r4, #12]
    c880:	4313      	orrs	r3, r2
    c882:	81a3      	strh	r3, [r4, #12]
    c884:	6923      	ldr	r3, [r4, #16]
    c886:	2b00      	cmp	r3, #0
    c888:	d10b      	bne.n	c8a2 <__swsetup_r+0xa6>
    c88a:	21a0      	movs	r1, #160	; 0xa0
    c88c:	2280      	movs	r2, #128	; 0x80
    c88e:	89a3      	ldrh	r3, [r4, #12]
    c890:	0089      	lsls	r1, r1, #2
    c892:	0092      	lsls	r2, r2, #2
    c894:	400b      	ands	r3, r1
    c896:	4293      	cmp	r3, r2
    c898:	d003      	beq.n	c8a2 <__swsetup_r+0xa6>
    c89a:	0021      	movs	r1, r4
    c89c:	0030      	movs	r0, r6
    c89e:	f001 f8bb 	bl	da18 <__smakebuf_r>
    c8a2:	2301      	movs	r3, #1
    c8a4:	89a2      	ldrh	r2, [r4, #12]
    c8a6:	4013      	ands	r3, r2
    c8a8:	d011      	beq.n	c8ce <__swsetup_r+0xd2>
    c8aa:	2300      	movs	r3, #0
    c8ac:	60a3      	str	r3, [r4, #8]
    c8ae:	6963      	ldr	r3, [r4, #20]
    c8b0:	425b      	negs	r3, r3
    c8b2:	61a3      	str	r3, [r4, #24]
    c8b4:	2000      	movs	r0, #0
    c8b6:	6923      	ldr	r3, [r4, #16]
    c8b8:	4283      	cmp	r3, r0
    c8ba:	d1be      	bne.n	c83a <__swsetup_r+0x3e>
    c8bc:	230c      	movs	r3, #12
    c8be:	5ee2      	ldrsh	r2, [r4, r3]
    c8c0:	0613      	lsls	r3, r2, #24
    c8c2:	d5ba      	bpl.n	c83a <__swsetup_r+0x3e>
    c8c4:	2340      	movs	r3, #64	; 0x40
    c8c6:	4313      	orrs	r3, r2
    c8c8:	81a3      	strh	r3, [r4, #12]
    c8ca:	3801      	subs	r0, #1
    c8cc:	e7b5      	b.n	c83a <__swsetup_r+0x3e>
    c8ce:	0792      	lsls	r2, r2, #30
    c8d0:	d400      	bmi.n	c8d4 <__swsetup_r+0xd8>
    c8d2:	6963      	ldr	r3, [r4, #20]
    c8d4:	60a3      	str	r3, [r4, #8]
    c8d6:	e7ed      	b.n	c8b4 <__swsetup_r+0xb8>
    c8d8:	200000b0 	.word	0x200000b0
    c8dc:	000102c8 	.word	0x000102c8
    c8e0:	000102e8 	.word	0x000102e8
    c8e4:	000102a8 	.word	0x000102a8

0000c8e8 <abort>:
    c8e8:	b510      	push	{r4, lr}
    c8ea:	2006      	movs	r0, #6
    c8ec:	f001 fd8c 	bl	e408 <raise>
    c8f0:	2001      	movs	r0, #1
    c8f2:	f002 fb4b 	bl	ef8c <_exit>

0000c8f6 <div>:
    c8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8f8:	000f      	movs	r7, r1
    c8fa:	0006      	movs	r6, r0
    c8fc:	0011      	movs	r1, r2
    c8fe:	0038      	movs	r0, r7
    c900:	0015      	movs	r5, r2
    c902:	f7fb f9fb 	bl	7cfc <__divsi3>
    c906:	0029      	movs	r1, r5
    c908:	0004      	movs	r4, r0
    c90a:	0038      	movs	r0, r7
    c90c:	f7fb fadc 	bl	7ec8 <__aeabi_idivmod>
    c910:	2f00      	cmp	r7, #0
    c912:	db07      	blt.n	c924 <div+0x2e>
    c914:	2900      	cmp	r1, #0
    c916:	da01      	bge.n	c91c <div+0x26>
    c918:	3401      	adds	r4, #1
    c91a:	1b49      	subs	r1, r1, r5
    c91c:	0030      	movs	r0, r6
    c91e:	6034      	str	r4, [r6, #0]
    c920:	6071      	str	r1, [r6, #4]
    c922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c924:	2900      	cmp	r1, #0
    c926:	ddf9      	ble.n	c91c <div+0x26>
    c928:	3c01      	subs	r4, #1
    c92a:	1949      	adds	r1, r1, r5
    c92c:	e7f6      	b.n	c91c <div+0x26>

0000c92e <quorem>:
    c92e:	b5f0      	push	{r4, r5, r6, r7, lr}
    c930:	6903      	ldr	r3, [r0, #16]
    c932:	690c      	ldr	r4, [r1, #16]
    c934:	b089      	sub	sp, #36	; 0x24
    c936:	0007      	movs	r7, r0
    c938:	9105      	str	r1, [sp, #20]
    c93a:	2600      	movs	r6, #0
    c93c:	429c      	cmp	r4, r3
    c93e:	dc6d      	bgt.n	ca1c <quorem+0xee>
    c940:	000b      	movs	r3, r1
    c942:	3c01      	subs	r4, #1
    c944:	3314      	adds	r3, #20
    c946:	00a5      	lsls	r5, r4, #2
    c948:	9303      	str	r3, [sp, #12]
    c94a:	195b      	adds	r3, r3, r5
    c94c:	9304      	str	r3, [sp, #16]
    c94e:	0003      	movs	r3, r0
    c950:	3314      	adds	r3, #20
    c952:	9302      	str	r3, [sp, #8]
    c954:	195d      	adds	r5, r3, r5
    c956:	9b04      	ldr	r3, [sp, #16]
    c958:	6828      	ldr	r0, [r5, #0]
    c95a:	681b      	ldr	r3, [r3, #0]
    c95c:	1c59      	adds	r1, r3, #1
    c95e:	9301      	str	r3, [sp, #4]
    c960:	f7fb f942 	bl	7be8 <__udivsi3>
    c964:	9001      	str	r0, [sp, #4]
    c966:	42b0      	cmp	r0, r6
    c968:	d02d      	beq.n	c9c6 <quorem+0x98>
    c96a:	9b03      	ldr	r3, [sp, #12]
    c96c:	9802      	ldr	r0, [sp, #8]
    c96e:	469c      	mov	ip, r3
    c970:	9606      	str	r6, [sp, #24]
    c972:	4662      	mov	r2, ip
    c974:	ca08      	ldmia	r2!, {r3}
    c976:	4694      	mov	ip, r2
    c978:	9a01      	ldr	r2, [sp, #4]
    c97a:	b299      	uxth	r1, r3
    c97c:	4351      	muls	r1, r2
    c97e:	0c1b      	lsrs	r3, r3, #16
    c980:	4353      	muls	r3, r2
    c982:	1989      	adds	r1, r1, r6
    c984:	0c0a      	lsrs	r2, r1, #16
    c986:	189b      	adds	r3, r3, r2
    c988:	9307      	str	r3, [sp, #28]
    c98a:	8802      	ldrh	r2, [r0, #0]
    c98c:	0c1e      	lsrs	r6, r3, #16
    c98e:	9b06      	ldr	r3, [sp, #24]
    c990:	b289      	uxth	r1, r1
    c992:	18d2      	adds	r2, r2, r3
    c994:	6803      	ldr	r3, [r0, #0]
    c996:	1a52      	subs	r2, r2, r1
    c998:	0c19      	lsrs	r1, r3, #16
    c99a:	466b      	mov	r3, sp
    c99c:	8b9b      	ldrh	r3, [r3, #28]
    c99e:	1acb      	subs	r3, r1, r3
    c9a0:	1411      	asrs	r1, r2, #16
    c9a2:	185b      	adds	r3, r3, r1
    c9a4:	1419      	asrs	r1, r3, #16
    c9a6:	b292      	uxth	r2, r2
    c9a8:	041b      	lsls	r3, r3, #16
    c9aa:	431a      	orrs	r2, r3
    c9ac:	9b04      	ldr	r3, [sp, #16]
    c9ae:	9106      	str	r1, [sp, #24]
    c9b0:	c004      	stmia	r0!, {r2}
    c9b2:	4563      	cmp	r3, ip
    c9b4:	d2dd      	bcs.n	c972 <quorem+0x44>
    c9b6:	682b      	ldr	r3, [r5, #0]
    c9b8:	2b00      	cmp	r3, #0
    c9ba:	d104      	bne.n	c9c6 <quorem+0x98>
    c9bc:	9b02      	ldr	r3, [sp, #8]
    c9be:	3d04      	subs	r5, #4
    c9c0:	42ab      	cmp	r3, r5
    c9c2:	d32e      	bcc.n	ca22 <quorem+0xf4>
    c9c4:	613c      	str	r4, [r7, #16]
    c9c6:	9905      	ldr	r1, [sp, #20]
    c9c8:	0038      	movs	r0, r7
    c9ca:	f001 fa88 	bl	dede <__mcmp>
    c9ce:	2800      	cmp	r0, #0
    c9d0:	db23      	blt.n	ca1a <quorem+0xec>
    c9d2:	2500      	movs	r5, #0
    c9d4:	9b01      	ldr	r3, [sp, #4]
    c9d6:	9802      	ldr	r0, [sp, #8]
    c9d8:	3301      	adds	r3, #1
    c9da:	9903      	ldr	r1, [sp, #12]
    c9dc:	9301      	str	r3, [sp, #4]
    c9de:	c908      	ldmia	r1!, {r3}
    c9e0:	8802      	ldrh	r2, [r0, #0]
    c9e2:	1955      	adds	r5, r2, r5
    c9e4:	b29a      	uxth	r2, r3
    c9e6:	1aaa      	subs	r2, r5, r2
    c9e8:	6805      	ldr	r5, [r0, #0]
    c9ea:	0c1b      	lsrs	r3, r3, #16
    c9ec:	0c2d      	lsrs	r5, r5, #16
    c9ee:	1aeb      	subs	r3, r5, r3
    c9f0:	1415      	asrs	r5, r2, #16
    c9f2:	195b      	adds	r3, r3, r5
    c9f4:	141d      	asrs	r5, r3, #16
    c9f6:	b292      	uxth	r2, r2
    c9f8:	041b      	lsls	r3, r3, #16
    c9fa:	4313      	orrs	r3, r2
    c9fc:	c008      	stmia	r0!, {r3}
    c9fe:	9b04      	ldr	r3, [sp, #16]
    ca00:	428b      	cmp	r3, r1
    ca02:	d2ec      	bcs.n	c9de <quorem+0xb0>
    ca04:	9a02      	ldr	r2, [sp, #8]
    ca06:	00a3      	lsls	r3, r4, #2
    ca08:	18d3      	adds	r3, r2, r3
    ca0a:	681a      	ldr	r2, [r3, #0]
    ca0c:	2a00      	cmp	r2, #0
    ca0e:	d104      	bne.n	ca1a <quorem+0xec>
    ca10:	9a02      	ldr	r2, [sp, #8]
    ca12:	3b04      	subs	r3, #4
    ca14:	429a      	cmp	r2, r3
    ca16:	d309      	bcc.n	ca2c <quorem+0xfe>
    ca18:	613c      	str	r4, [r7, #16]
    ca1a:	9e01      	ldr	r6, [sp, #4]
    ca1c:	0030      	movs	r0, r6
    ca1e:	b009      	add	sp, #36	; 0x24
    ca20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca22:	682b      	ldr	r3, [r5, #0]
    ca24:	2b00      	cmp	r3, #0
    ca26:	d1cd      	bne.n	c9c4 <quorem+0x96>
    ca28:	3c01      	subs	r4, #1
    ca2a:	e7c7      	b.n	c9bc <quorem+0x8e>
    ca2c:	681a      	ldr	r2, [r3, #0]
    ca2e:	2a00      	cmp	r2, #0
    ca30:	d1f2      	bne.n	ca18 <quorem+0xea>
    ca32:	3c01      	subs	r4, #1
    ca34:	e7ec      	b.n	ca10 <quorem+0xe2>
	...

0000ca38 <_dtoa_r>:
    ca38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca3a:	0016      	movs	r6, r2
    ca3c:	001f      	movs	r7, r3
    ca3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ca40:	b09d      	sub	sp, #116	; 0x74
    ca42:	9004      	str	r0, [sp, #16]
    ca44:	9d25      	ldr	r5, [sp, #148]	; 0x94
    ca46:	9606      	str	r6, [sp, #24]
    ca48:	9707      	str	r7, [sp, #28]
    ca4a:	2c00      	cmp	r4, #0
    ca4c:	d108      	bne.n	ca60 <_dtoa_r+0x28>
    ca4e:	2010      	movs	r0, #16
    ca50:	f7fe f9e4 	bl	ae1c <malloc>
    ca54:	9b04      	ldr	r3, [sp, #16]
    ca56:	6258      	str	r0, [r3, #36]	; 0x24
    ca58:	6044      	str	r4, [r0, #4]
    ca5a:	6084      	str	r4, [r0, #8]
    ca5c:	6004      	str	r4, [r0, #0]
    ca5e:	60c4      	str	r4, [r0, #12]
    ca60:	9b04      	ldr	r3, [sp, #16]
    ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ca64:	6819      	ldr	r1, [r3, #0]
    ca66:	2900      	cmp	r1, #0
    ca68:	d00b      	beq.n	ca82 <_dtoa_r+0x4a>
    ca6a:	685a      	ldr	r2, [r3, #4]
    ca6c:	2301      	movs	r3, #1
    ca6e:	4093      	lsls	r3, r2
    ca70:	604a      	str	r2, [r1, #4]
    ca72:	608b      	str	r3, [r1, #8]
    ca74:	9804      	ldr	r0, [sp, #16]
    ca76:	f001 f858 	bl	db2a <_Bfree>
    ca7a:	2200      	movs	r2, #0
    ca7c:	9b04      	ldr	r3, [sp, #16]
    ca7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ca80:	601a      	str	r2, [r3, #0]
    ca82:	9b07      	ldr	r3, [sp, #28]
    ca84:	2b00      	cmp	r3, #0
    ca86:	da1f      	bge.n	cac8 <_dtoa_r+0x90>
    ca88:	2301      	movs	r3, #1
    ca8a:	602b      	str	r3, [r5, #0]
    ca8c:	007b      	lsls	r3, r7, #1
    ca8e:	085b      	lsrs	r3, r3, #1
    ca90:	9307      	str	r3, [sp, #28]
    ca92:	9c07      	ldr	r4, [sp, #28]
    ca94:	4bb7      	ldr	r3, [pc, #732]	; (cd74 <_dtoa_r+0x33c>)
    ca96:	0022      	movs	r2, r4
    ca98:	9319      	str	r3, [sp, #100]	; 0x64
    ca9a:	401a      	ands	r2, r3
    ca9c:	429a      	cmp	r2, r3
    ca9e:	d116      	bne.n	cace <_dtoa_r+0x96>
    caa0:	4bb5      	ldr	r3, [pc, #724]	; (cd78 <_dtoa_r+0x340>)
    caa2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    caa4:	6013      	str	r3, [r2, #0]
    caa6:	9b06      	ldr	r3, [sp, #24]
    caa8:	2b00      	cmp	r3, #0
    caaa:	d103      	bne.n	cab4 <_dtoa_r+0x7c>
    caac:	0324      	lsls	r4, r4, #12
    caae:	d101      	bne.n	cab4 <_dtoa_r+0x7c>
    cab0:	f000 fd91 	bl	d5d6 <_dtoa_r+0xb9e>
    cab4:	4bb1      	ldr	r3, [pc, #708]	; (cd7c <_dtoa_r+0x344>)
    cab6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    cab8:	930a      	str	r3, [sp, #40]	; 0x28
    caba:	4bb1      	ldr	r3, [pc, #708]	; (cd80 <_dtoa_r+0x348>)
    cabc:	2a00      	cmp	r2, #0
    cabe:	d001      	beq.n	cac4 <_dtoa_r+0x8c>
    cac0:	f000 fd8f 	bl	d5e2 <_dtoa_r+0xbaa>
    cac4:	f000 fd8f 	bl	d5e6 <_dtoa_r+0xbae>
    cac8:	2300      	movs	r3, #0
    caca:	602b      	str	r3, [r5, #0]
    cacc:	e7e1      	b.n	ca92 <_dtoa_r+0x5a>
    cace:	9e06      	ldr	r6, [sp, #24]
    cad0:	9f07      	ldr	r7, [sp, #28]
    cad2:	2200      	movs	r2, #0
    cad4:	2300      	movs	r3, #0
    cad6:	0030      	movs	r0, r6
    cad8:	0039      	movs	r1, r7
    cada:	f7fb fa0b 	bl	7ef4 <__aeabi_dcmpeq>
    cade:	1e05      	subs	r5, r0, #0
    cae0:	d00e      	beq.n	cb00 <_dtoa_r+0xc8>
    cae2:	2301      	movs	r3, #1
    cae4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    cae6:	6013      	str	r3, [r2, #0]
    cae8:	4ba6      	ldr	r3, [pc, #664]	; (cd84 <_dtoa_r+0x34c>)
    caea:	9a26      	ldr	r2, [sp, #152]	; 0x98
    caec:	930a      	str	r3, [sp, #40]	; 0x28
    caee:	2a00      	cmp	r2, #0
    caf0:	d101      	bne.n	caf6 <_dtoa_r+0xbe>
    caf2:	f000 fd78 	bl	d5e6 <_dtoa_r+0xbae>
    caf6:	4aa4      	ldr	r2, [pc, #656]	; (cd88 <_dtoa_r+0x350>)
    caf8:	9926      	ldr	r1, [sp, #152]	; 0x98
    cafa:	600a      	str	r2, [r1, #0]
    cafc:	f000 fd73 	bl	d5e6 <_dtoa_r+0xbae>
    cb00:	ab1a      	add	r3, sp, #104	; 0x68
    cb02:	9301      	str	r3, [sp, #4]
    cb04:	ab1b      	add	r3, sp, #108	; 0x6c
    cb06:	9300      	str	r3, [sp, #0]
    cb08:	0032      	movs	r2, r6
    cb0a:	003b      	movs	r3, r7
    cb0c:	9804      	ldr	r0, [sp, #16]
    cb0e:	f001 fa63 	bl	dfd8 <__d2b>
    cb12:	0063      	lsls	r3, r4, #1
    cb14:	9005      	str	r0, [sp, #20]
    cb16:	0d5b      	lsrs	r3, r3, #21
    cb18:	d100      	bne.n	cb1c <_dtoa_r+0xe4>
    cb1a:	e07f      	b.n	cc1c <_dtoa_r+0x1e4>
    cb1c:	033a      	lsls	r2, r7, #12
    cb1e:	4c9b      	ldr	r4, [pc, #620]	; (cd8c <_dtoa_r+0x354>)
    cb20:	0b12      	lsrs	r2, r2, #12
    cb22:	4314      	orrs	r4, r2
    cb24:	0021      	movs	r1, r4
    cb26:	4a9a      	ldr	r2, [pc, #616]	; (cd90 <_dtoa_r+0x358>)
    cb28:	0030      	movs	r0, r6
    cb2a:	9518      	str	r5, [sp, #96]	; 0x60
    cb2c:	189e      	adds	r6, r3, r2
    cb2e:	2200      	movs	r2, #0
    cb30:	4b98      	ldr	r3, [pc, #608]	; (cd94 <_dtoa_r+0x35c>)
    cb32:	f7fd fb4d 	bl	a1d0 <__aeabi_dsub>
    cb36:	4a98      	ldr	r2, [pc, #608]	; (cd98 <_dtoa_r+0x360>)
    cb38:	4b98      	ldr	r3, [pc, #608]	; (cd9c <_dtoa_r+0x364>)
    cb3a:	f7fd f8c9 	bl	9cd0 <__aeabi_dmul>
    cb3e:	4a98      	ldr	r2, [pc, #608]	; (cda0 <_dtoa_r+0x368>)
    cb40:	4b98      	ldr	r3, [pc, #608]	; (cda4 <_dtoa_r+0x36c>)
    cb42:	f7fc f981 	bl	8e48 <__aeabi_dadd>
    cb46:	0004      	movs	r4, r0
    cb48:	0030      	movs	r0, r6
    cb4a:	000d      	movs	r5, r1
    cb4c:	f7fd feaa 	bl	a8a4 <__aeabi_i2d>
    cb50:	4a95      	ldr	r2, [pc, #596]	; (cda8 <_dtoa_r+0x370>)
    cb52:	4b96      	ldr	r3, [pc, #600]	; (cdac <_dtoa_r+0x374>)
    cb54:	f7fd f8bc 	bl	9cd0 <__aeabi_dmul>
    cb58:	0002      	movs	r2, r0
    cb5a:	000b      	movs	r3, r1
    cb5c:	0020      	movs	r0, r4
    cb5e:	0029      	movs	r1, r5
    cb60:	f7fc f972 	bl	8e48 <__aeabi_dadd>
    cb64:	0004      	movs	r4, r0
    cb66:	000d      	movs	r5, r1
    cb68:	f7fd fe68 	bl	a83c <__aeabi_d2iz>
    cb6c:	2200      	movs	r2, #0
    cb6e:	9003      	str	r0, [sp, #12]
    cb70:	2300      	movs	r3, #0
    cb72:	0020      	movs	r0, r4
    cb74:	0029      	movs	r1, r5
    cb76:	f7fb f9c3 	bl	7f00 <__aeabi_dcmplt>
    cb7a:	2800      	cmp	r0, #0
    cb7c:	d00e      	beq.n	cb9c <_dtoa_r+0x164>
    cb7e:	9803      	ldr	r0, [sp, #12]
    cb80:	f7fd fe90 	bl	a8a4 <__aeabi_i2d>
    cb84:	000b      	movs	r3, r1
    cb86:	0002      	movs	r2, r0
    cb88:	0029      	movs	r1, r5
    cb8a:	0020      	movs	r0, r4
    cb8c:	f7fb f9b2 	bl	7ef4 <__aeabi_dcmpeq>
    cb90:	0003      	movs	r3, r0
    cb92:	4258      	negs	r0, r3
    cb94:	4158      	adcs	r0, r3
    cb96:	9b03      	ldr	r3, [sp, #12]
    cb98:	1a1b      	subs	r3, r3, r0
    cb9a:	9303      	str	r3, [sp, #12]
    cb9c:	2301      	movs	r3, #1
    cb9e:	9316      	str	r3, [sp, #88]	; 0x58
    cba0:	9b03      	ldr	r3, [sp, #12]
    cba2:	2b16      	cmp	r3, #22
    cba4:	d80f      	bhi.n	cbc6 <_dtoa_r+0x18e>
    cba6:	4982      	ldr	r1, [pc, #520]	; (cdb0 <_dtoa_r+0x378>)
    cba8:	00db      	lsls	r3, r3, #3
    cbaa:	18c9      	adds	r1, r1, r3
    cbac:	6808      	ldr	r0, [r1, #0]
    cbae:	6849      	ldr	r1, [r1, #4]
    cbb0:	9a06      	ldr	r2, [sp, #24]
    cbb2:	9b07      	ldr	r3, [sp, #28]
    cbb4:	f7fb f9b8 	bl	7f28 <__aeabi_dcmpgt>
    cbb8:	2800      	cmp	r0, #0
    cbba:	d04b      	beq.n	cc54 <_dtoa_r+0x21c>
    cbbc:	9b03      	ldr	r3, [sp, #12]
    cbbe:	3b01      	subs	r3, #1
    cbc0:	9303      	str	r3, [sp, #12]
    cbc2:	2300      	movs	r3, #0
    cbc4:	9316      	str	r3, [sp, #88]	; 0x58
    cbc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cbc8:	1b9e      	subs	r6, r3, r6
    cbca:	2300      	movs	r3, #0
    cbcc:	930b      	str	r3, [sp, #44]	; 0x2c
    cbce:	0033      	movs	r3, r6
    cbd0:	3b01      	subs	r3, #1
    cbd2:	930c      	str	r3, [sp, #48]	; 0x30
    cbd4:	d504      	bpl.n	cbe0 <_dtoa_r+0x1a8>
    cbd6:	2301      	movs	r3, #1
    cbd8:	1b9b      	subs	r3, r3, r6
    cbda:	930b      	str	r3, [sp, #44]	; 0x2c
    cbdc:	2300      	movs	r3, #0
    cbde:	930c      	str	r3, [sp, #48]	; 0x30
    cbe0:	9b03      	ldr	r3, [sp, #12]
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	db38      	blt.n	cc58 <_dtoa_r+0x220>
    cbe6:	9a03      	ldr	r2, [sp, #12]
    cbe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbea:	4694      	mov	ip, r2
    cbec:	4463      	add	r3, ip
    cbee:	930c      	str	r3, [sp, #48]	; 0x30
    cbf0:	2300      	movs	r3, #0
    cbf2:	920f      	str	r2, [sp, #60]	; 0x3c
    cbf4:	9308      	str	r3, [sp, #32]
    cbf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cbf8:	2501      	movs	r5, #1
    cbfa:	2b09      	cmp	r3, #9
    cbfc:	d900      	bls.n	cc00 <_dtoa_r+0x1c8>
    cbfe:	e091      	b.n	cd24 <_dtoa_r+0x2ec>
    cc00:	2b05      	cmp	r3, #5
    cc02:	dd02      	ble.n	cc0a <_dtoa_r+0x1d2>
    cc04:	2500      	movs	r5, #0
    cc06:	3b04      	subs	r3, #4
    cc08:	9322      	str	r3, [sp, #136]	; 0x88
    cc0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cc0c:	1e98      	subs	r0, r3, #2
    cc0e:	2803      	cmp	r0, #3
    cc10:	d900      	bls.n	cc14 <_dtoa_r+0x1dc>
    cc12:	e091      	b.n	cd38 <_dtoa_r+0x300>
    cc14:	f7fa ffde 	bl	7bd4 <__gnu_thumb1_case_uqi>
    cc18:	76298482 	.word	0x76298482
    cc1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cc1e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    cc20:	189e      	adds	r6, r3, r2
    cc22:	4b64      	ldr	r3, [pc, #400]	; (cdb4 <_dtoa_r+0x37c>)
    cc24:	18f2      	adds	r2, r6, r3
    cc26:	2a20      	cmp	r2, #32
    cc28:	dd0f      	ble.n	cc4a <_dtoa_r+0x212>
    cc2a:	4b63      	ldr	r3, [pc, #396]	; (cdb8 <_dtoa_r+0x380>)
    cc2c:	9806      	ldr	r0, [sp, #24]
    cc2e:	18f3      	adds	r3, r6, r3
    cc30:	40d8      	lsrs	r0, r3
    cc32:	2340      	movs	r3, #64	; 0x40
    cc34:	1a9b      	subs	r3, r3, r2
    cc36:	409c      	lsls	r4, r3
    cc38:	4320      	orrs	r0, r4
    cc3a:	f7fd fe75 	bl	a928 <__aeabi_ui2d>
    cc3e:	2301      	movs	r3, #1
    cc40:	4c5e      	ldr	r4, [pc, #376]	; (cdbc <_dtoa_r+0x384>)
    cc42:	3e01      	subs	r6, #1
    cc44:	1909      	adds	r1, r1, r4
    cc46:	9318      	str	r3, [sp, #96]	; 0x60
    cc48:	e771      	b.n	cb2e <_dtoa_r+0xf6>
    cc4a:	2320      	movs	r3, #32
    cc4c:	9806      	ldr	r0, [sp, #24]
    cc4e:	1a9b      	subs	r3, r3, r2
    cc50:	4098      	lsls	r0, r3
    cc52:	e7f2      	b.n	cc3a <_dtoa_r+0x202>
    cc54:	9016      	str	r0, [sp, #88]	; 0x58
    cc56:	e7b6      	b.n	cbc6 <_dtoa_r+0x18e>
    cc58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc5a:	9a03      	ldr	r2, [sp, #12]
    cc5c:	1a9b      	subs	r3, r3, r2
    cc5e:	930b      	str	r3, [sp, #44]	; 0x2c
    cc60:	4253      	negs	r3, r2
    cc62:	9308      	str	r3, [sp, #32]
    cc64:	2300      	movs	r3, #0
    cc66:	930f      	str	r3, [sp, #60]	; 0x3c
    cc68:	e7c5      	b.n	cbf6 <_dtoa_r+0x1be>
    cc6a:	2301      	movs	r3, #1
    cc6c:	930e      	str	r3, [sp, #56]	; 0x38
    cc6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cc70:	2b00      	cmp	r3, #0
    cc72:	dd65      	ble.n	cd40 <_dtoa_r+0x308>
    cc74:	001f      	movs	r7, r3
    cc76:	930d      	str	r3, [sp, #52]	; 0x34
    cc78:	9a04      	ldr	r2, [sp, #16]
    cc7a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    cc7c:	2200      	movs	r2, #0
    cc7e:	6062      	str	r2, [r4, #4]
    cc80:	3204      	adds	r2, #4
    cc82:	0011      	movs	r1, r2
    cc84:	3114      	adds	r1, #20
    cc86:	4299      	cmp	r1, r3
    cc88:	d95f      	bls.n	cd4a <_dtoa_r+0x312>
    cc8a:	6861      	ldr	r1, [r4, #4]
    cc8c:	9804      	ldr	r0, [sp, #16]
    cc8e:	f000 ff14 	bl	daba <_Balloc>
    cc92:	9b04      	ldr	r3, [sp, #16]
    cc94:	6020      	str	r0, [r4, #0]
    cc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cc98:	681b      	ldr	r3, [r3, #0]
    cc9a:	930a      	str	r3, [sp, #40]	; 0x28
    cc9c:	2f0e      	cmp	r7, #14
    cc9e:	d900      	bls.n	cca2 <_dtoa_r+0x26a>
    cca0:	e105      	b.n	ceae <_dtoa_r+0x476>
    cca2:	2d00      	cmp	r5, #0
    cca4:	d100      	bne.n	cca8 <_dtoa_r+0x270>
    cca6:	e102      	b.n	ceae <_dtoa_r+0x476>
    cca8:	9b06      	ldr	r3, [sp, #24]
    ccaa:	9c07      	ldr	r4, [sp, #28]
    ccac:	9314      	str	r3, [sp, #80]	; 0x50
    ccae:	9415      	str	r4, [sp, #84]	; 0x54
    ccb0:	9b03      	ldr	r3, [sp, #12]
    ccb2:	2b00      	cmp	r3, #0
    ccb4:	dc00      	bgt.n	ccb8 <_dtoa_r+0x280>
    ccb6:	e085      	b.n	cdc4 <_dtoa_r+0x38c>
    ccb8:	001a      	movs	r2, r3
    ccba:	210f      	movs	r1, #15
    ccbc:	4b3c      	ldr	r3, [pc, #240]	; (cdb0 <_dtoa_r+0x378>)
    ccbe:	400a      	ands	r2, r1
    ccc0:	00d2      	lsls	r2, r2, #3
    ccc2:	189b      	adds	r3, r3, r2
    ccc4:	685c      	ldr	r4, [r3, #4]
    ccc6:	681b      	ldr	r3, [r3, #0]
    ccc8:	9310      	str	r3, [sp, #64]	; 0x40
    ccca:	9411      	str	r4, [sp, #68]	; 0x44
    cccc:	9b03      	ldr	r3, [sp, #12]
    ccce:	2402      	movs	r4, #2
    ccd0:	111d      	asrs	r5, r3, #4
    ccd2:	06eb      	lsls	r3, r5, #27
    ccd4:	d50a      	bpl.n	ccec <_dtoa_r+0x2b4>
    ccd6:	4b3a      	ldr	r3, [pc, #232]	; (cdc0 <_dtoa_r+0x388>)
    ccd8:	400d      	ands	r5, r1
    ccda:	6a1a      	ldr	r2, [r3, #32]
    ccdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ccde:	9814      	ldr	r0, [sp, #80]	; 0x50
    cce0:	9915      	ldr	r1, [sp, #84]	; 0x54
    cce2:	f7fc fbc1 	bl	9468 <__aeabi_ddiv>
    cce6:	9006      	str	r0, [sp, #24]
    cce8:	9107      	str	r1, [sp, #28]
    ccea:	3401      	adds	r4, #1
    ccec:	4e34      	ldr	r6, [pc, #208]	; (cdc0 <_dtoa_r+0x388>)
    ccee:	2d00      	cmp	r5, #0
    ccf0:	d130      	bne.n	cd54 <_dtoa_r+0x31c>
    ccf2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ccf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ccf6:	9806      	ldr	r0, [sp, #24]
    ccf8:	9907      	ldr	r1, [sp, #28]
    ccfa:	f7fc fbb5 	bl	9468 <__aeabi_ddiv>
    ccfe:	9006      	str	r0, [sp, #24]
    cd00:	9107      	str	r1, [sp, #28]
    cd02:	e07a      	b.n	cdfa <_dtoa_r+0x3c2>
    cd04:	2301      	movs	r3, #1
    cd06:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    cd08:	930e      	str	r3, [sp, #56]	; 0x38
    cd0a:	4694      	mov	ip, r2
    cd0c:	9b03      	ldr	r3, [sp, #12]
    cd0e:	4463      	add	r3, ip
    cd10:	1c5f      	adds	r7, r3, #1
    cd12:	930d      	str	r3, [sp, #52]	; 0x34
    cd14:	1e3b      	subs	r3, r7, #0
    cd16:	dcaf      	bgt.n	cc78 <_dtoa_r+0x240>
    cd18:	2301      	movs	r3, #1
    cd1a:	e7ad      	b.n	cc78 <_dtoa_r+0x240>
    cd1c:	2300      	movs	r3, #0
    cd1e:	e7a5      	b.n	cc6c <_dtoa_r+0x234>
    cd20:	2300      	movs	r3, #0
    cd22:	e7f0      	b.n	cd06 <_dtoa_r+0x2ce>
    cd24:	2300      	movs	r3, #0
    cd26:	950e      	str	r5, [sp, #56]	; 0x38
    cd28:	9322      	str	r3, [sp, #136]	; 0x88
    cd2a:	3b01      	subs	r3, #1
    cd2c:	2200      	movs	r2, #0
    cd2e:	930d      	str	r3, [sp, #52]	; 0x34
    cd30:	001f      	movs	r7, r3
    cd32:	3313      	adds	r3, #19
    cd34:	9223      	str	r2, [sp, #140]	; 0x8c
    cd36:	e79f      	b.n	cc78 <_dtoa_r+0x240>
    cd38:	2301      	movs	r3, #1
    cd3a:	930e      	str	r3, [sp, #56]	; 0x38
    cd3c:	3b02      	subs	r3, #2
    cd3e:	e7f5      	b.n	cd2c <_dtoa_r+0x2f4>
    cd40:	2301      	movs	r3, #1
    cd42:	930d      	str	r3, [sp, #52]	; 0x34
    cd44:	001f      	movs	r7, r3
    cd46:	001a      	movs	r2, r3
    cd48:	e7f4      	b.n	cd34 <_dtoa_r+0x2fc>
    cd4a:	6861      	ldr	r1, [r4, #4]
    cd4c:	0052      	lsls	r2, r2, #1
    cd4e:	3101      	adds	r1, #1
    cd50:	6061      	str	r1, [r4, #4]
    cd52:	e796      	b.n	cc82 <_dtoa_r+0x24a>
    cd54:	2301      	movs	r3, #1
    cd56:	421d      	tst	r5, r3
    cd58:	d008      	beq.n	cd6c <_dtoa_r+0x334>
    cd5a:	9810      	ldr	r0, [sp, #64]	; 0x40
    cd5c:	9911      	ldr	r1, [sp, #68]	; 0x44
    cd5e:	18e4      	adds	r4, r4, r3
    cd60:	6832      	ldr	r2, [r6, #0]
    cd62:	6873      	ldr	r3, [r6, #4]
    cd64:	f7fc ffb4 	bl	9cd0 <__aeabi_dmul>
    cd68:	9010      	str	r0, [sp, #64]	; 0x40
    cd6a:	9111      	str	r1, [sp, #68]	; 0x44
    cd6c:	106d      	asrs	r5, r5, #1
    cd6e:	3608      	adds	r6, #8
    cd70:	e7bd      	b.n	ccee <_dtoa_r+0x2b6>
    cd72:	46c0      	nop			; (mov r8, r8)
    cd74:	7ff00000 	.word	0x7ff00000
    cd78:	0000270f 	.word	0x0000270f
    cd7c:	000102a1 	.word	0x000102a1
    cd80:	000102a4 	.word	0x000102a4
    cd84:	0000f1e0 	.word	0x0000f1e0
    cd88:	0000f1e1 	.word	0x0000f1e1
    cd8c:	3ff00000 	.word	0x3ff00000
    cd90:	fffffc01 	.word	0xfffffc01
    cd94:	3ff80000 	.word	0x3ff80000
    cd98:	636f4361 	.word	0x636f4361
    cd9c:	3fd287a7 	.word	0x3fd287a7
    cda0:	8b60c8b3 	.word	0x8b60c8b3
    cda4:	3fc68a28 	.word	0x3fc68a28
    cda8:	509f79fb 	.word	0x509f79fb
    cdac:	3fd34413 	.word	0x3fd34413
    cdb0:	00010390 	.word	0x00010390
    cdb4:	00000432 	.word	0x00000432
    cdb8:	00000412 	.word	0x00000412
    cdbc:	fe100000 	.word	0xfe100000
    cdc0:	00010368 	.word	0x00010368
    cdc4:	9b03      	ldr	r3, [sp, #12]
    cdc6:	2402      	movs	r4, #2
    cdc8:	2b00      	cmp	r3, #0
    cdca:	d016      	beq.n	cdfa <_dtoa_r+0x3c2>
    cdcc:	9814      	ldr	r0, [sp, #80]	; 0x50
    cdce:	9915      	ldr	r1, [sp, #84]	; 0x54
    cdd0:	425d      	negs	r5, r3
    cdd2:	230f      	movs	r3, #15
    cdd4:	4aca      	ldr	r2, [pc, #808]	; (d100 <_dtoa_r+0x6c8>)
    cdd6:	402b      	ands	r3, r5
    cdd8:	00db      	lsls	r3, r3, #3
    cdda:	18d3      	adds	r3, r2, r3
    cddc:	681a      	ldr	r2, [r3, #0]
    cdde:	685b      	ldr	r3, [r3, #4]
    cde0:	f7fc ff76 	bl	9cd0 <__aeabi_dmul>
    cde4:	2300      	movs	r3, #0
    cde6:	9006      	str	r0, [sp, #24]
    cde8:	9107      	str	r1, [sp, #28]
    cdea:	4ec6      	ldr	r6, [pc, #792]	; (d104 <_dtoa_r+0x6cc>)
    cdec:	112d      	asrs	r5, r5, #4
    cdee:	2d00      	cmp	r5, #0
    cdf0:	d000      	beq.n	cdf4 <_dtoa_r+0x3bc>
    cdf2:	e08c      	b.n	cf0e <_dtoa_r+0x4d6>
    cdf4:	2b00      	cmp	r3, #0
    cdf6:	d000      	beq.n	cdfa <_dtoa_r+0x3c2>
    cdf8:	e781      	b.n	ccfe <_dtoa_r+0x2c6>
    cdfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	d100      	bne.n	ce02 <_dtoa_r+0x3ca>
    ce00:	e091      	b.n	cf26 <_dtoa_r+0x4ee>
    ce02:	9a06      	ldr	r2, [sp, #24]
    ce04:	9b07      	ldr	r3, [sp, #28]
    ce06:	9210      	str	r2, [sp, #64]	; 0x40
    ce08:	9311      	str	r3, [sp, #68]	; 0x44
    ce0a:	9810      	ldr	r0, [sp, #64]	; 0x40
    ce0c:	9911      	ldr	r1, [sp, #68]	; 0x44
    ce0e:	2200      	movs	r2, #0
    ce10:	4bbd      	ldr	r3, [pc, #756]	; (d108 <_dtoa_r+0x6d0>)
    ce12:	f7fb f875 	bl	7f00 <__aeabi_dcmplt>
    ce16:	2800      	cmp	r0, #0
    ce18:	d100      	bne.n	ce1c <_dtoa_r+0x3e4>
    ce1a:	e084      	b.n	cf26 <_dtoa_r+0x4ee>
    ce1c:	2f00      	cmp	r7, #0
    ce1e:	d100      	bne.n	ce22 <_dtoa_r+0x3ea>
    ce20:	e081      	b.n	cf26 <_dtoa_r+0x4ee>
    ce22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce24:	2b00      	cmp	r3, #0
    ce26:	dd3e      	ble.n	cea6 <_dtoa_r+0x46e>
    ce28:	9810      	ldr	r0, [sp, #64]	; 0x40
    ce2a:	9911      	ldr	r1, [sp, #68]	; 0x44
    ce2c:	9b03      	ldr	r3, [sp, #12]
    ce2e:	2200      	movs	r2, #0
    ce30:	1e5e      	subs	r6, r3, #1
    ce32:	4bb6      	ldr	r3, [pc, #728]	; (d10c <_dtoa_r+0x6d4>)
    ce34:	f7fc ff4c 	bl	9cd0 <__aeabi_dmul>
    ce38:	9006      	str	r0, [sp, #24]
    ce3a:	9107      	str	r1, [sp, #28]
    ce3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    ce3e:	3401      	adds	r4, #1
    ce40:	0020      	movs	r0, r4
    ce42:	f7fd fd2f 	bl	a8a4 <__aeabi_i2d>
    ce46:	9a06      	ldr	r2, [sp, #24]
    ce48:	9b07      	ldr	r3, [sp, #28]
    ce4a:	f7fc ff41 	bl	9cd0 <__aeabi_dmul>
    ce4e:	2200      	movs	r2, #0
    ce50:	4baf      	ldr	r3, [pc, #700]	; (d110 <_dtoa_r+0x6d8>)
    ce52:	f7fb fff9 	bl	8e48 <__aeabi_dadd>
    ce56:	9012      	str	r0, [sp, #72]	; 0x48
    ce58:	9113      	str	r1, [sp, #76]	; 0x4c
    ce5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ce5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    ce5e:	4aad      	ldr	r2, [pc, #692]	; (d114 <_dtoa_r+0x6dc>)
    ce60:	9310      	str	r3, [sp, #64]	; 0x40
    ce62:	9411      	str	r4, [sp, #68]	; 0x44
    ce64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ce66:	189c      	adds	r4, r3, r2
    ce68:	9411      	str	r4, [sp, #68]	; 0x44
    ce6a:	2d00      	cmp	r5, #0
    ce6c:	d15e      	bne.n	cf2c <_dtoa_r+0x4f4>
    ce6e:	9806      	ldr	r0, [sp, #24]
    ce70:	9907      	ldr	r1, [sp, #28]
    ce72:	2200      	movs	r2, #0
    ce74:	4ba8      	ldr	r3, [pc, #672]	; (d118 <_dtoa_r+0x6e0>)
    ce76:	f7fd f9ab 	bl	a1d0 <__aeabi_dsub>
    ce7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce7c:	0023      	movs	r3, r4
    ce7e:	9006      	str	r0, [sp, #24]
    ce80:	9107      	str	r1, [sp, #28]
    ce82:	f7fb f851 	bl	7f28 <__aeabi_dcmpgt>
    ce86:	2800      	cmp	r0, #0
    ce88:	d000      	beq.n	ce8c <_dtoa_r+0x454>
    ce8a:	e301      	b.n	d490 <_dtoa_r+0xa58>
    ce8c:	48a3      	ldr	r0, [pc, #652]	; (d11c <_dtoa_r+0x6e4>)
    ce8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ce90:	4684      	mov	ip, r0
    ce92:	4461      	add	r1, ip
    ce94:	000b      	movs	r3, r1
    ce96:	9806      	ldr	r0, [sp, #24]
    ce98:	9907      	ldr	r1, [sp, #28]
    ce9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce9c:	f7fb f830 	bl	7f00 <__aeabi_dcmplt>
    cea0:	2800      	cmp	r0, #0
    cea2:	d000      	beq.n	cea6 <_dtoa_r+0x46e>
    cea4:	e2e8      	b.n	d478 <_dtoa_r+0xa40>
    cea6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cea8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    ceaa:	9306      	str	r3, [sp, #24]
    ceac:	9407      	str	r4, [sp, #28]
    ceae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	da00      	bge.n	ceb6 <_dtoa_r+0x47e>
    ceb4:	e157      	b.n	d166 <_dtoa_r+0x72e>
    ceb6:	9a03      	ldr	r2, [sp, #12]
    ceb8:	2a0e      	cmp	r2, #14
    ceba:	dd00      	ble.n	cebe <_dtoa_r+0x486>
    cebc:	e153      	b.n	d166 <_dtoa_r+0x72e>
    cebe:	4b90      	ldr	r3, [pc, #576]	; (d100 <_dtoa_r+0x6c8>)
    cec0:	00d2      	lsls	r2, r2, #3
    cec2:	189b      	adds	r3, r3, r2
    cec4:	685c      	ldr	r4, [r3, #4]
    cec6:	681b      	ldr	r3, [r3, #0]
    cec8:	9308      	str	r3, [sp, #32]
    ceca:	9409      	str	r4, [sp, #36]	; 0x24
    cecc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cece:	2b00      	cmp	r3, #0
    ced0:	db00      	blt.n	ced4 <_dtoa_r+0x49c>
    ced2:	e0ce      	b.n	d072 <_dtoa_r+0x63a>
    ced4:	2f00      	cmp	r7, #0
    ced6:	dd00      	ble.n	ceda <_dtoa_r+0x4a2>
    ced8:	e0cb      	b.n	d072 <_dtoa_r+0x63a>
    ceda:	d000      	beq.n	cede <_dtoa_r+0x4a6>
    cedc:	e2cf      	b.n	d47e <_dtoa_r+0xa46>
    cede:	9808      	ldr	r0, [sp, #32]
    cee0:	9909      	ldr	r1, [sp, #36]	; 0x24
    cee2:	2200      	movs	r2, #0
    cee4:	4b8c      	ldr	r3, [pc, #560]	; (d118 <_dtoa_r+0x6e0>)
    cee6:	f7fc fef3 	bl	9cd0 <__aeabi_dmul>
    ceea:	9a06      	ldr	r2, [sp, #24]
    ceec:	9b07      	ldr	r3, [sp, #28]
    ceee:	f7fb f825 	bl	7f3c <__aeabi_dcmpge>
    cef2:	003e      	movs	r6, r7
    cef4:	9708      	str	r7, [sp, #32]
    cef6:	2800      	cmp	r0, #0
    cef8:	d000      	beq.n	cefc <_dtoa_r+0x4c4>
    cefa:	e2a4      	b.n	d446 <_dtoa_r+0xa0e>
    cefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cefe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cf00:	1c5d      	adds	r5, r3, #1
    cf02:	2331      	movs	r3, #49	; 0x31
    cf04:	7013      	strb	r3, [r2, #0]
    cf06:	9b03      	ldr	r3, [sp, #12]
    cf08:	3301      	adds	r3, #1
    cf0a:	9303      	str	r3, [sp, #12]
    cf0c:	e29f      	b.n	d44e <_dtoa_r+0xa16>
    cf0e:	2201      	movs	r2, #1
    cf10:	4215      	tst	r5, r2
    cf12:	d005      	beq.n	cf20 <_dtoa_r+0x4e8>
    cf14:	18a4      	adds	r4, r4, r2
    cf16:	6832      	ldr	r2, [r6, #0]
    cf18:	6873      	ldr	r3, [r6, #4]
    cf1a:	f7fc fed9 	bl	9cd0 <__aeabi_dmul>
    cf1e:	2301      	movs	r3, #1
    cf20:	106d      	asrs	r5, r5, #1
    cf22:	3608      	adds	r6, #8
    cf24:	e763      	b.n	cdee <_dtoa_r+0x3b6>
    cf26:	9e03      	ldr	r6, [sp, #12]
    cf28:	003d      	movs	r5, r7
    cf2a:	e789      	b.n	ce40 <_dtoa_r+0x408>
    cf2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cf2e:	1e69      	subs	r1, r5, #1
    cf30:	1952      	adds	r2, r2, r5
    cf32:	9217      	str	r2, [sp, #92]	; 0x5c
    cf34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cf36:	4b72      	ldr	r3, [pc, #456]	; (d100 <_dtoa_r+0x6c8>)
    cf38:	00c9      	lsls	r1, r1, #3
    cf3a:	2a00      	cmp	r2, #0
    cf3c:	d04a      	beq.n	cfd4 <_dtoa_r+0x59c>
    cf3e:	185b      	adds	r3, r3, r1
    cf40:	681a      	ldr	r2, [r3, #0]
    cf42:	685b      	ldr	r3, [r3, #4]
    cf44:	2000      	movs	r0, #0
    cf46:	4976      	ldr	r1, [pc, #472]	; (d120 <_dtoa_r+0x6e8>)
    cf48:	f7fc fa8e 	bl	9468 <__aeabi_ddiv>
    cf4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf50:	f7fd f93e 	bl	a1d0 <__aeabi_dsub>
    cf54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf56:	9010      	str	r0, [sp, #64]	; 0x40
    cf58:	9111      	str	r1, [sp, #68]	; 0x44
    cf5a:	9312      	str	r3, [sp, #72]	; 0x48
    cf5c:	9806      	ldr	r0, [sp, #24]
    cf5e:	9907      	ldr	r1, [sp, #28]
    cf60:	f7fd fc6c 	bl	a83c <__aeabi_d2iz>
    cf64:	0004      	movs	r4, r0
    cf66:	f7fd fc9d 	bl	a8a4 <__aeabi_i2d>
    cf6a:	0002      	movs	r2, r0
    cf6c:	000b      	movs	r3, r1
    cf6e:	9806      	ldr	r0, [sp, #24]
    cf70:	9907      	ldr	r1, [sp, #28]
    cf72:	f7fd f92d 	bl	a1d0 <__aeabi_dsub>
    cf76:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cf78:	3430      	adds	r4, #48	; 0x30
    cf7a:	1c5d      	adds	r5, r3, #1
    cf7c:	701c      	strb	r4, [r3, #0]
    cf7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf80:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf82:	9006      	str	r0, [sp, #24]
    cf84:	9107      	str	r1, [sp, #28]
    cf86:	f7fa ffbb 	bl	7f00 <__aeabi_dcmplt>
    cf8a:	2800      	cmp	r0, #0
    cf8c:	d165      	bne.n	d05a <_dtoa_r+0x622>
    cf8e:	9a06      	ldr	r2, [sp, #24]
    cf90:	9b07      	ldr	r3, [sp, #28]
    cf92:	2000      	movs	r0, #0
    cf94:	495c      	ldr	r1, [pc, #368]	; (d108 <_dtoa_r+0x6d0>)
    cf96:	f7fd f91b 	bl	a1d0 <__aeabi_dsub>
    cf9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf9e:	f7fa ffaf 	bl	7f00 <__aeabi_dcmplt>
    cfa2:	2800      	cmp	r0, #0
    cfa4:	d000      	beq.n	cfa8 <_dtoa_r+0x570>
    cfa6:	e0be      	b.n	d126 <_dtoa_r+0x6ee>
    cfa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cfaa:	429d      	cmp	r5, r3
    cfac:	d100      	bne.n	cfb0 <_dtoa_r+0x578>
    cfae:	e77a      	b.n	cea6 <_dtoa_r+0x46e>
    cfb0:	9810      	ldr	r0, [sp, #64]	; 0x40
    cfb2:	9911      	ldr	r1, [sp, #68]	; 0x44
    cfb4:	2200      	movs	r2, #0
    cfb6:	4b55      	ldr	r3, [pc, #340]	; (d10c <_dtoa_r+0x6d4>)
    cfb8:	f7fc fe8a 	bl	9cd0 <__aeabi_dmul>
    cfbc:	2200      	movs	r2, #0
    cfbe:	9010      	str	r0, [sp, #64]	; 0x40
    cfc0:	9111      	str	r1, [sp, #68]	; 0x44
    cfc2:	9806      	ldr	r0, [sp, #24]
    cfc4:	9907      	ldr	r1, [sp, #28]
    cfc6:	4b51      	ldr	r3, [pc, #324]	; (d10c <_dtoa_r+0x6d4>)
    cfc8:	f7fc fe82 	bl	9cd0 <__aeabi_dmul>
    cfcc:	9512      	str	r5, [sp, #72]	; 0x48
    cfce:	9006      	str	r0, [sp, #24]
    cfd0:	9107      	str	r1, [sp, #28]
    cfd2:	e7c3      	b.n	cf5c <_dtoa_r+0x524>
    cfd4:	1859      	adds	r1, r3, r1
    cfd6:	6808      	ldr	r0, [r1, #0]
    cfd8:	6849      	ldr	r1, [r1, #4]
    cfda:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cfde:	f7fc fe77 	bl	9cd0 <__aeabi_dmul>
    cfe2:	9010      	str	r0, [sp, #64]	; 0x40
    cfe4:	9111      	str	r1, [sp, #68]	; 0x44
    cfe6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cfe8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    cfea:	9806      	ldr	r0, [sp, #24]
    cfec:	9907      	ldr	r1, [sp, #28]
    cfee:	f7fd fc25 	bl	a83c <__aeabi_d2iz>
    cff2:	9012      	str	r0, [sp, #72]	; 0x48
    cff4:	f7fd fc56 	bl	a8a4 <__aeabi_i2d>
    cff8:	0002      	movs	r2, r0
    cffa:	000b      	movs	r3, r1
    cffc:	9806      	ldr	r0, [sp, #24]
    cffe:	9907      	ldr	r1, [sp, #28]
    d000:	f7fd f8e6 	bl	a1d0 <__aeabi_dsub>
    d004:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d006:	9006      	str	r0, [sp, #24]
    d008:	9107      	str	r1, [sp, #28]
    d00a:	3330      	adds	r3, #48	; 0x30
    d00c:	7023      	strb	r3, [r4, #0]
    d00e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d010:	3401      	adds	r4, #1
    d012:	2200      	movs	r2, #0
    d014:	42a3      	cmp	r3, r4
    d016:	d124      	bne.n	d062 <_dtoa_r+0x62a>
    d018:	4b41      	ldr	r3, [pc, #260]	; (d120 <_dtoa_r+0x6e8>)
    d01a:	9810      	ldr	r0, [sp, #64]	; 0x40
    d01c:	9911      	ldr	r1, [sp, #68]	; 0x44
    d01e:	f7fb ff13 	bl	8e48 <__aeabi_dadd>
    d022:	0002      	movs	r2, r0
    d024:	000b      	movs	r3, r1
    d026:	9806      	ldr	r0, [sp, #24]
    d028:	9907      	ldr	r1, [sp, #28]
    d02a:	f7fa ff7d 	bl	7f28 <__aeabi_dcmpgt>
    d02e:	2800      	cmp	r0, #0
    d030:	d000      	beq.n	d034 <_dtoa_r+0x5fc>
    d032:	e078      	b.n	d126 <_dtoa_r+0x6ee>
    d034:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d036:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d038:	2000      	movs	r0, #0
    d03a:	4939      	ldr	r1, [pc, #228]	; (d120 <_dtoa_r+0x6e8>)
    d03c:	f7fd f8c8 	bl	a1d0 <__aeabi_dsub>
    d040:	0002      	movs	r2, r0
    d042:	000b      	movs	r3, r1
    d044:	9806      	ldr	r0, [sp, #24]
    d046:	9907      	ldr	r1, [sp, #28]
    d048:	f7fa ff5a 	bl	7f00 <__aeabi_dcmplt>
    d04c:	2800      	cmp	r0, #0
    d04e:	d100      	bne.n	d052 <_dtoa_r+0x61a>
    d050:	e729      	b.n	cea6 <_dtoa_r+0x46e>
    d052:	1e6b      	subs	r3, r5, #1
    d054:	781a      	ldrb	r2, [r3, #0]
    d056:	2a30      	cmp	r2, #48	; 0x30
    d058:	d001      	beq.n	d05e <_dtoa_r+0x626>
    d05a:	9603      	str	r6, [sp, #12]
    d05c:	e03f      	b.n	d0de <_dtoa_r+0x6a6>
    d05e:	001d      	movs	r5, r3
    d060:	e7f7      	b.n	d052 <_dtoa_r+0x61a>
    d062:	9806      	ldr	r0, [sp, #24]
    d064:	9907      	ldr	r1, [sp, #28]
    d066:	4b29      	ldr	r3, [pc, #164]	; (d10c <_dtoa_r+0x6d4>)
    d068:	f7fc fe32 	bl	9cd0 <__aeabi_dmul>
    d06c:	9006      	str	r0, [sp, #24]
    d06e:	9107      	str	r1, [sp, #28]
    d070:	e7bb      	b.n	cfea <_dtoa_r+0x5b2>
    d072:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    d074:	9a08      	ldr	r2, [sp, #32]
    d076:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d078:	9806      	ldr	r0, [sp, #24]
    d07a:	9907      	ldr	r1, [sp, #28]
    d07c:	f7fc f9f4 	bl	9468 <__aeabi_ddiv>
    d080:	f7fd fbdc 	bl	a83c <__aeabi_d2iz>
    d084:	0004      	movs	r4, r0
    d086:	f7fd fc0d 	bl	a8a4 <__aeabi_i2d>
    d08a:	9a08      	ldr	r2, [sp, #32]
    d08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d08e:	f7fc fe1f 	bl	9cd0 <__aeabi_dmul>
    d092:	000b      	movs	r3, r1
    d094:	0002      	movs	r2, r0
    d096:	9806      	ldr	r0, [sp, #24]
    d098:	9907      	ldr	r1, [sp, #28]
    d09a:	f7fd f899 	bl	a1d0 <__aeabi_dsub>
    d09e:	0023      	movs	r3, r4
    d0a0:	3330      	adds	r3, #48	; 0x30
    d0a2:	7033      	strb	r3, [r6, #0]
    d0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d0a6:	1c75      	adds	r5, r6, #1
    d0a8:	1aeb      	subs	r3, r5, r3
    d0aa:	429f      	cmp	r7, r3
    d0ac:	d14c      	bne.n	d148 <_dtoa_r+0x710>
    d0ae:	0002      	movs	r2, r0
    d0b0:	000b      	movs	r3, r1
    d0b2:	f7fb fec9 	bl	8e48 <__aeabi_dadd>
    d0b6:	0006      	movs	r6, r0
    d0b8:	000f      	movs	r7, r1
    d0ba:	0002      	movs	r2, r0
    d0bc:	000b      	movs	r3, r1
    d0be:	9808      	ldr	r0, [sp, #32]
    d0c0:	9909      	ldr	r1, [sp, #36]	; 0x24
    d0c2:	f7fa ff1d 	bl	7f00 <__aeabi_dcmplt>
    d0c6:	2800      	cmp	r0, #0
    d0c8:	d12c      	bne.n	d124 <_dtoa_r+0x6ec>
    d0ca:	9808      	ldr	r0, [sp, #32]
    d0cc:	9909      	ldr	r1, [sp, #36]	; 0x24
    d0ce:	0032      	movs	r2, r6
    d0d0:	003b      	movs	r3, r7
    d0d2:	f7fa ff0f 	bl	7ef4 <__aeabi_dcmpeq>
    d0d6:	2800      	cmp	r0, #0
    d0d8:	d001      	beq.n	d0de <_dtoa_r+0x6a6>
    d0da:	07e3      	lsls	r3, r4, #31
    d0dc:	d422      	bmi.n	d124 <_dtoa_r+0x6ec>
    d0de:	9905      	ldr	r1, [sp, #20]
    d0e0:	9804      	ldr	r0, [sp, #16]
    d0e2:	f000 fd22 	bl	db2a <_Bfree>
    d0e6:	2300      	movs	r3, #0
    d0e8:	702b      	strb	r3, [r5, #0]
    d0ea:	9b03      	ldr	r3, [sp, #12]
    d0ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d0ee:	3301      	adds	r3, #1
    d0f0:	6013      	str	r3, [r2, #0]
    d0f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d100      	bne.n	d0fa <_dtoa_r+0x6c2>
    d0f8:	e275      	b.n	d5e6 <_dtoa_r+0xbae>
    d0fa:	601d      	str	r5, [r3, #0]
    d0fc:	e273      	b.n	d5e6 <_dtoa_r+0xbae>
    d0fe:	46c0      	nop			; (mov r8, r8)
    d100:	00010390 	.word	0x00010390
    d104:	00010368 	.word	0x00010368
    d108:	3ff00000 	.word	0x3ff00000
    d10c:	40240000 	.word	0x40240000
    d110:	401c0000 	.word	0x401c0000
    d114:	fcc00000 	.word	0xfcc00000
    d118:	40140000 	.word	0x40140000
    d11c:	7cc00000 	.word	0x7cc00000
    d120:	3fe00000 	.word	0x3fe00000
    d124:	9e03      	ldr	r6, [sp, #12]
    d126:	1e6b      	subs	r3, r5, #1
    d128:	781a      	ldrb	r2, [r3, #0]
    d12a:	2a39      	cmp	r2, #57	; 0x39
    d12c:	d106      	bne.n	d13c <_dtoa_r+0x704>
    d12e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d130:	429a      	cmp	r2, r3
    d132:	d107      	bne.n	d144 <_dtoa_r+0x70c>
    d134:	2330      	movs	r3, #48	; 0x30
    d136:	7013      	strb	r3, [r2, #0]
    d138:	0013      	movs	r3, r2
    d13a:	3601      	adds	r6, #1
    d13c:	781a      	ldrb	r2, [r3, #0]
    d13e:	3201      	adds	r2, #1
    d140:	701a      	strb	r2, [r3, #0]
    d142:	e78a      	b.n	d05a <_dtoa_r+0x622>
    d144:	001d      	movs	r5, r3
    d146:	e7ee      	b.n	d126 <_dtoa_r+0x6ee>
    d148:	2200      	movs	r2, #0
    d14a:	4bcf      	ldr	r3, [pc, #828]	; (d488 <_dtoa_r+0xa50>)
    d14c:	f7fc fdc0 	bl	9cd0 <__aeabi_dmul>
    d150:	2200      	movs	r2, #0
    d152:	2300      	movs	r3, #0
    d154:	9006      	str	r0, [sp, #24]
    d156:	9107      	str	r1, [sp, #28]
    d158:	002e      	movs	r6, r5
    d15a:	f7fa fecb 	bl	7ef4 <__aeabi_dcmpeq>
    d15e:	2800      	cmp	r0, #0
    d160:	d100      	bne.n	d164 <_dtoa_r+0x72c>
    d162:	e787      	b.n	d074 <_dtoa_r+0x63c>
    d164:	e7bb      	b.n	d0de <_dtoa_r+0x6a6>
    d166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d168:	2a00      	cmp	r2, #0
    d16a:	d100      	bne.n	d16e <_dtoa_r+0x736>
    d16c:	e087      	b.n	d27e <_dtoa_r+0x846>
    d16e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d170:	2a01      	cmp	r2, #1
    d172:	dc6e      	bgt.n	d252 <_dtoa_r+0x81a>
    d174:	9a18      	ldr	r2, [sp, #96]	; 0x60
    d176:	2a00      	cmp	r2, #0
    d178:	d067      	beq.n	d24a <_dtoa_r+0x812>
    d17a:	4ac4      	ldr	r2, [pc, #784]	; (d48c <_dtoa_r+0xa54>)
    d17c:	189b      	adds	r3, r3, r2
    d17e:	9d08      	ldr	r5, [sp, #32]
    d180:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d184:	2101      	movs	r1, #1
    d186:	18d2      	adds	r2, r2, r3
    d188:	920b      	str	r2, [sp, #44]	; 0x2c
    d18a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d18c:	9804      	ldr	r0, [sp, #16]
    d18e:	18d3      	adds	r3, r2, r3
    d190:	930c      	str	r3, [sp, #48]	; 0x30
    d192:	f000 fd68 	bl	dc66 <__i2b>
    d196:	0006      	movs	r6, r0
    d198:	2c00      	cmp	r4, #0
    d19a:	dd0e      	ble.n	d1ba <_dtoa_r+0x782>
    d19c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d19e:	2b00      	cmp	r3, #0
    d1a0:	dd0b      	ble.n	d1ba <_dtoa_r+0x782>
    d1a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d1a4:	0023      	movs	r3, r4
    d1a6:	4294      	cmp	r4, r2
    d1a8:	dd00      	ble.n	d1ac <_dtoa_r+0x774>
    d1aa:	0013      	movs	r3, r2
    d1ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d1ae:	1ae4      	subs	r4, r4, r3
    d1b0:	1ad2      	subs	r2, r2, r3
    d1b2:	920b      	str	r2, [sp, #44]	; 0x2c
    d1b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d1b6:	1ad3      	subs	r3, r2, r3
    d1b8:	930c      	str	r3, [sp, #48]	; 0x30
    d1ba:	9b08      	ldr	r3, [sp, #32]
    d1bc:	2b00      	cmp	r3, #0
    d1be:	d01e      	beq.n	d1fe <_dtoa_r+0x7c6>
    d1c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d1c2:	2b00      	cmp	r3, #0
    d1c4:	d05f      	beq.n	d286 <_dtoa_r+0x84e>
    d1c6:	2d00      	cmp	r5, #0
    d1c8:	dd11      	ble.n	d1ee <_dtoa_r+0x7b6>
    d1ca:	0031      	movs	r1, r6
    d1cc:	002a      	movs	r2, r5
    d1ce:	9804      	ldr	r0, [sp, #16]
    d1d0:	f000 fde2 	bl	dd98 <__pow5mult>
    d1d4:	9a05      	ldr	r2, [sp, #20]
    d1d6:	0001      	movs	r1, r0
    d1d8:	0006      	movs	r6, r0
    d1da:	9804      	ldr	r0, [sp, #16]
    d1dc:	f000 fd4c 	bl	dc78 <__multiply>
    d1e0:	9905      	ldr	r1, [sp, #20]
    d1e2:	9010      	str	r0, [sp, #64]	; 0x40
    d1e4:	9804      	ldr	r0, [sp, #16]
    d1e6:	f000 fca0 	bl	db2a <_Bfree>
    d1ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1ec:	9305      	str	r3, [sp, #20]
    d1ee:	9b08      	ldr	r3, [sp, #32]
    d1f0:	1b5a      	subs	r2, r3, r5
    d1f2:	d004      	beq.n	d1fe <_dtoa_r+0x7c6>
    d1f4:	9905      	ldr	r1, [sp, #20]
    d1f6:	9804      	ldr	r0, [sp, #16]
    d1f8:	f000 fdce 	bl	dd98 <__pow5mult>
    d1fc:	9005      	str	r0, [sp, #20]
    d1fe:	2101      	movs	r1, #1
    d200:	9804      	ldr	r0, [sp, #16]
    d202:	f000 fd30 	bl	dc66 <__i2b>
    d206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d208:	9008      	str	r0, [sp, #32]
    d20a:	2b00      	cmp	r3, #0
    d20c:	dd3d      	ble.n	d28a <_dtoa_r+0x852>
    d20e:	001a      	movs	r2, r3
    d210:	0001      	movs	r1, r0
    d212:	9804      	ldr	r0, [sp, #16]
    d214:	f000 fdc0 	bl	dd98 <__pow5mult>
    d218:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d21a:	9008      	str	r0, [sp, #32]
    d21c:	2500      	movs	r5, #0
    d21e:	2b01      	cmp	r3, #1
    d220:	dc3b      	bgt.n	d29a <_dtoa_r+0x862>
    d222:	2500      	movs	r5, #0
    d224:	9b06      	ldr	r3, [sp, #24]
    d226:	42ab      	cmp	r3, r5
    d228:	d133      	bne.n	d292 <_dtoa_r+0x85a>
    d22a:	9b07      	ldr	r3, [sp, #28]
    d22c:	031b      	lsls	r3, r3, #12
    d22e:	42ab      	cmp	r3, r5
    d230:	d12f      	bne.n	d292 <_dtoa_r+0x85a>
    d232:	9b19      	ldr	r3, [sp, #100]	; 0x64
    d234:	9a07      	ldr	r2, [sp, #28]
    d236:	4213      	tst	r3, r2
    d238:	d02b      	beq.n	d292 <_dtoa_r+0x85a>
    d23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d23c:	3501      	adds	r5, #1
    d23e:	3301      	adds	r3, #1
    d240:	930b      	str	r3, [sp, #44]	; 0x2c
    d242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d244:	3301      	adds	r3, #1
    d246:	930c      	str	r3, [sp, #48]	; 0x30
    d248:	e023      	b.n	d292 <_dtoa_r+0x85a>
    d24a:	2336      	movs	r3, #54	; 0x36
    d24c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    d24e:	1a9b      	subs	r3, r3, r2
    d250:	e795      	b.n	d17e <_dtoa_r+0x746>
    d252:	9b08      	ldr	r3, [sp, #32]
    d254:	1e7d      	subs	r5, r7, #1
    d256:	42ab      	cmp	r3, r5
    d258:	db06      	blt.n	d268 <_dtoa_r+0x830>
    d25a:	1b5d      	subs	r5, r3, r5
    d25c:	2f00      	cmp	r7, #0
    d25e:	da0b      	bge.n	d278 <_dtoa_r+0x840>
    d260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d262:	1bdc      	subs	r4, r3, r7
    d264:	2300      	movs	r3, #0
    d266:	e78c      	b.n	d182 <_dtoa_r+0x74a>
    d268:	9b08      	ldr	r3, [sp, #32]
    d26a:	9508      	str	r5, [sp, #32]
    d26c:	1aea      	subs	r2, r5, r3
    d26e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d270:	2500      	movs	r5, #0
    d272:	189b      	adds	r3, r3, r2
    d274:	930f      	str	r3, [sp, #60]	; 0x3c
    d276:	e7f1      	b.n	d25c <_dtoa_r+0x824>
    d278:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d27a:	003b      	movs	r3, r7
    d27c:	e781      	b.n	d182 <_dtoa_r+0x74a>
    d27e:	9d08      	ldr	r5, [sp, #32]
    d280:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d282:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    d284:	e788      	b.n	d198 <_dtoa_r+0x760>
    d286:	9a08      	ldr	r2, [sp, #32]
    d288:	e7b4      	b.n	d1f4 <_dtoa_r+0x7bc>
    d28a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d28c:	2500      	movs	r5, #0
    d28e:	2b01      	cmp	r3, #1
    d290:	ddc7      	ble.n	d222 <_dtoa_r+0x7ea>
    d292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d294:	2001      	movs	r0, #1
    d296:	2b00      	cmp	r3, #0
    d298:	d00b      	beq.n	d2b2 <_dtoa_r+0x87a>
    d29a:	9b08      	ldr	r3, [sp, #32]
    d29c:	9a08      	ldr	r2, [sp, #32]
    d29e:	691b      	ldr	r3, [r3, #16]
    d2a0:	930f      	str	r3, [sp, #60]	; 0x3c
    d2a2:	3303      	adds	r3, #3
    d2a4:	009b      	lsls	r3, r3, #2
    d2a6:	18d3      	adds	r3, r2, r3
    d2a8:	6858      	ldr	r0, [r3, #4]
    d2aa:	f000 fc93 	bl	dbd4 <__hi0bits>
    d2ae:	2320      	movs	r3, #32
    d2b0:	1a18      	subs	r0, r3, r0
    d2b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2b4:	18c0      	adds	r0, r0, r3
    d2b6:	231f      	movs	r3, #31
    d2b8:	4018      	ands	r0, r3
    d2ba:	d100      	bne.n	d2be <_dtoa_r+0x886>
    d2bc:	e0ab      	b.n	d416 <_dtoa_r+0x9de>
    d2be:	3301      	adds	r3, #1
    d2c0:	1a1b      	subs	r3, r3, r0
    d2c2:	2b04      	cmp	r3, #4
    d2c4:	dc00      	bgt.n	d2c8 <_dtoa_r+0x890>
    d2c6:	e09b      	b.n	d400 <_dtoa_r+0x9c8>
    d2c8:	231c      	movs	r3, #28
    d2ca:	1a18      	subs	r0, r3, r0
    d2cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d2ce:	1824      	adds	r4, r4, r0
    d2d0:	181b      	adds	r3, r3, r0
    d2d2:	930b      	str	r3, [sp, #44]	; 0x2c
    d2d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2d6:	181b      	adds	r3, r3, r0
    d2d8:	930c      	str	r3, [sp, #48]	; 0x30
    d2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d2dc:	2b00      	cmp	r3, #0
    d2de:	dd05      	ble.n	d2ec <_dtoa_r+0x8b4>
    d2e0:	001a      	movs	r2, r3
    d2e2:	9905      	ldr	r1, [sp, #20]
    d2e4:	9804      	ldr	r0, [sp, #16]
    d2e6:	f000 fda9 	bl	de3c <__lshift>
    d2ea:	9005      	str	r0, [sp, #20]
    d2ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	dd05      	ble.n	d2fe <_dtoa_r+0x8c6>
    d2f2:	001a      	movs	r2, r3
    d2f4:	9908      	ldr	r1, [sp, #32]
    d2f6:	9804      	ldr	r0, [sp, #16]
    d2f8:	f000 fda0 	bl	de3c <__lshift>
    d2fc:	9008      	str	r0, [sp, #32]
    d2fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d300:	2b00      	cmp	r3, #0
    d302:	d100      	bne.n	d306 <_dtoa_r+0x8ce>
    d304:	e089      	b.n	d41a <_dtoa_r+0x9e2>
    d306:	9908      	ldr	r1, [sp, #32]
    d308:	9805      	ldr	r0, [sp, #20]
    d30a:	f000 fde8 	bl	dede <__mcmp>
    d30e:	2800      	cmp	r0, #0
    d310:	db00      	blt.n	d314 <_dtoa_r+0x8dc>
    d312:	e082      	b.n	d41a <_dtoa_r+0x9e2>
    d314:	9b03      	ldr	r3, [sp, #12]
    d316:	220a      	movs	r2, #10
    d318:	3b01      	subs	r3, #1
    d31a:	9303      	str	r3, [sp, #12]
    d31c:	9905      	ldr	r1, [sp, #20]
    d31e:	2300      	movs	r3, #0
    d320:	9804      	ldr	r0, [sp, #16]
    d322:	f000 fc1b 	bl	db5c <__multadd>
    d326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d328:	9005      	str	r0, [sp, #20]
    d32a:	2b00      	cmp	r3, #0
    d32c:	d100      	bne.n	d330 <_dtoa_r+0x8f8>
    d32e:	e15d      	b.n	d5ec <_dtoa_r+0xbb4>
    d330:	2300      	movs	r3, #0
    d332:	0031      	movs	r1, r6
    d334:	220a      	movs	r2, #10
    d336:	9804      	ldr	r0, [sp, #16]
    d338:	f000 fc10 	bl	db5c <__multadd>
    d33c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d33e:	0006      	movs	r6, r0
    d340:	2b00      	cmp	r3, #0
    d342:	dc02      	bgt.n	d34a <_dtoa_r+0x912>
    d344:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d346:	2b02      	cmp	r3, #2
    d348:	dc6d      	bgt.n	d426 <_dtoa_r+0x9ee>
    d34a:	2c00      	cmp	r4, #0
    d34c:	dd05      	ble.n	d35a <_dtoa_r+0x922>
    d34e:	0031      	movs	r1, r6
    d350:	0022      	movs	r2, r4
    d352:	9804      	ldr	r0, [sp, #16]
    d354:	f000 fd72 	bl	de3c <__lshift>
    d358:	0006      	movs	r6, r0
    d35a:	0030      	movs	r0, r6
    d35c:	2d00      	cmp	r5, #0
    d35e:	d011      	beq.n	d384 <_dtoa_r+0x94c>
    d360:	6871      	ldr	r1, [r6, #4]
    d362:	9804      	ldr	r0, [sp, #16]
    d364:	f000 fba9 	bl	daba <_Balloc>
    d368:	0031      	movs	r1, r6
    d36a:	0004      	movs	r4, r0
    d36c:	6933      	ldr	r3, [r6, #16]
    d36e:	310c      	adds	r1, #12
    d370:	1c9a      	adds	r2, r3, #2
    d372:	0092      	lsls	r2, r2, #2
    d374:	300c      	adds	r0, #12
    d376:	f7fd fd77 	bl	ae68 <memcpy>
    d37a:	2201      	movs	r2, #1
    d37c:	0021      	movs	r1, r4
    d37e:	9804      	ldr	r0, [sp, #16]
    d380:	f000 fd5c 	bl	de3c <__lshift>
    d384:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    d386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d388:	3f01      	subs	r7, #1
    d38a:	930b      	str	r3, [sp, #44]	; 0x2c
    d38c:	19db      	adds	r3, r3, r7
    d38e:	0037      	movs	r7, r6
    d390:	0006      	movs	r6, r0
    d392:	930f      	str	r3, [sp, #60]	; 0x3c
    d394:	9908      	ldr	r1, [sp, #32]
    d396:	9805      	ldr	r0, [sp, #20]
    d398:	f7ff fac9 	bl	c92e <quorem>
    d39c:	0039      	movs	r1, r7
    d39e:	900d      	str	r0, [sp, #52]	; 0x34
    d3a0:	0004      	movs	r4, r0
    d3a2:	9805      	ldr	r0, [sp, #20]
    d3a4:	f000 fd9b 	bl	dede <__mcmp>
    d3a8:	0032      	movs	r2, r6
    d3aa:	900e      	str	r0, [sp, #56]	; 0x38
    d3ac:	9908      	ldr	r1, [sp, #32]
    d3ae:	9804      	ldr	r0, [sp, #16]
    d3b0:	f000 fdae 	bl	df10 <__mdiff>
    d3b4:	2301      	movs	r3, #1
    d3b6:	930c      	str	r3, [sp, #48]	; 0x30
    d3b8:	68c3      	ldr	r3, [r0, #12]
    d3ba:	3430      	adds	r4, #48	; 0x30
    d3bc:	0005      	movs	r5, r0
    d3be:	2b00      	cmp	r3, #0
    d3c0:	d104      	bne.n	d3cc <_dtoa_r+0x994>
    d3c2:	0001      	movs	r1, r0
    d3c4:	9805      	ldr	r0, [sp, #20]
    d3c6:	f000 fd8a 	bl	dede <__mcmp>
    d3ca:	900c      	str	r0, [sp, #48]	; 0x30
    d3cc:	0029      	movs	r1, r5
    d3ce:	9804      	ldr	r0, [sp, #16]
    d3d0:	f000 fbab 	bl	db2a <_Bfree>
    d3d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d3d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d3d8:	4313      	orrs	r3, r2
    d3da:	d000      	beq.n	d3de <_dtoa_r+0x9a6>
    d3dc:	e089      	b.n	d4f2 <_dtoa_r+0xaba>
    d3de:	9a06      	ldr	r2, [sp, #24]
    d3e0:	3301      	adds	r3, #1
    d3e2:	4213      	tst	r3, r2
    d3e4:	d000      	beq.n	d3e8 <_dtoa_r+0x9b0>
    d3e6:	e084      	b.n	d4f2 <_dtoa_r+0xaba>
    d3e8:	2c39      	cmp	r4, #57	; 0x39
    d3ea:	d100      	bne.n	d3ee <_dtoa_r+0x9b6>
    d3ec:	e0a3      	b.n	d536 <_dtoa_r+0xafe>
    d3ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d3f0:	2b00      	cmp	r3, #0
    d3f2:	dd01      	ble.n	d3f8 <_dtoa_r+0x9c0>
    d3f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    d3f6:	3431      	adds	r4, #49	; 0x31
    d3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d3fa:	1c5d      	adds	r5, r3, #1
    d3fc:	701c      	strb	r4, [r3, #0]
    d3fe:	e027      	b.n	d450 <_dtoa_r+0xa18>
    d400:	2b04      	cmp	r3, #4
    d402:	d100      	bne.n	d406 <_dtoa_r+0x9ce>
    d404:	e769      	b.n	d2da <_dtoa_r+0x8a2>
    d406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d408:	331c      	adds	r3, #28
    d40a:	18d2      	adds	r2, r2, r3
    d40c:	920b      	str	r2, [sp, #44]	; 0x2c
    d40e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d410:	18e4      	adds	r4, r4, r3
    d412:	18d3      	adds	r3, r2, r3
    d414:	e760      	b.n	d2d8 <_dtoa_r+0x8a0>
    d416:	0003      	movs	r3, r0
    d418:	e7f5      	b.n	d406 <_dtoa_r+0x9ce>
    d41a:	2f00      	cmp	r7, #0
    d41c:	dc3c      	bgt.n	d498 <_dtoa_r+0xa60>
    d41e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d420:	2b02      	cmp	r3, #2
    d422:	dd39      	ble.n	d498 <_dtoa_r+0xa60>
    d424:	970d      	str	r7, [sp, #52]	; 0x34
    d426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d428:	2b00      	cmp	r3, #0
    d42a:	d10c      	bne.n	d446 <_dtoa_r+0xa0e>
    d42c:	9908      	ldr	r1, [sp, #32]
    d42e:	2205      	movs	r2, #5
    d430:	9804      	ldr	r0, [sp, #16]
    d432:	f000 fb93 	bl	db5c <__multadd>
    d436:	9008      	str	r0, [sp, #32]
    d438:	0001      	movs	r1, r0
    d43a:	9805      	ldr	r0, [sp, #20]
    d43c:	f000 fd4f 	bl	dede <__mcmp>
    d440:	2800      	cmp	r0, #0
    d442:	dd00      	ble.n	d446 <_dtoa_r+0xa0e>
    d444:	e55a      	b.n	cefc <_dtoa_r+0x4c4>
    d446:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d448:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    d44a:	43db      	mvns	r3, r3
    d44c:	9303      	str	r3, [sp, #12]
    d44e:	2700      	movs	r7, #0
    d450:	9908      	ldr	r1, [sp, #32]
    d452:	9804      	ldr	r0, [sp, #16]
    d454:	f000 fb69 	bl	db2a <_Bfree>
    d458:	2e00      	cmp	r6, #0
    d45a:	d100      	bne.n	d45e <_dtoa_r+0xa26>
    d45c:	e63f      	b.n	d0de <_dtoa_r+0x6a6>
    d45e:	2f00      	cmp	r7, #0
    d460:	d005      	beq.n	d46e <_dtoa_r+0xa36>
    d462:	42b7      	cmp	r7, r6
    d464:	d003      	beq.n	d46e <_dtoa_r+0xa36>
    d466:	0039      	movs	r1, r7
    d468:	9804      	ldr	r0, [sp, #16]
    d46a:	f000 fb5e 	bl	db2a <_Bfree>
    d46e:	0031      	movs	r1, r6
    d470:	9804      	ldr	r0, [sp, #16]
    d472:	f000 fb5a 	bl	db2a <_Bfree>
    d476:	e632      	b.n	d0de <_dtoa_r+0x6a6>
    d478:	9508      	str	r5, [sp, #32]
    d47a:	002e      	movs	r6, r5
    d47c:	e7e3      	b.n	d446 <_dtoa_r+0xa0e>
    d47e:	2300      	movs	r3, #0
    d480:	9308      	str	r3, [sp, #32]
    d482:	001e      	movs	r6, r3
    d484:	e7df      	b.n	d446 <_dtoa_r+0xa0e>
    d486:	46c0      	nop			; (mov r8, r8)
    d488:	40240000 	.word	0x40240000
    d48c:	00000433 	.word	0x00000433
    d490:	9603      	str	r6, [sp, #12]
    d492:	9508      	str	r5, [sp, #32]
    d494:	002e      	movs	r6, r5
    d496:	e531      	b.n	cefc <_dtoa_r+0x4c4>
    d498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d49a:	970d      	str	r7, [sp, #52]	; 0x34
    d49c:	2b00      	cmp	r3, #0
    d49e:	d000      	beq.n	d4a2 <_dtoa_r+0xa6a>
    d4a0:	e753      	b.n	d34a <_dtoa_r+0x912>
    d4a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    d4a4:	9908      	ldr	r1, [sp, #32]
    d4a6:	9805      	ldr	r0, [sp, #20]
    d4a8:	f7ff fa41 	bl	c92e <quorem>
    d4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d4ae:	3030      	adds	r0, #48	; 0x30
    d4b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d4b2:	7028      	strb	r0, [r5, #0]
    d4b4:	3501      	adds	r5, #1
    d4b6:	0004      	movs	r4, r0
    d4b8:	1aeb      	subs	r3, r5, r3
    d4ba:	429a      	cmp	r2, r3
    d4bc:	dc78      	bgt.n	d5b0 <_dtoa_r+0xb78>
    d4be:	1e15      	subs	r5, r2, #0
    d4c0:	dc00      	bgt.n	d4c4 <_dtoa_r+0xa8c>
    d4c2:	2501      	movs	r5, #1
    d4c4:	2700      	movs	r7, #0
    d4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d4c8:	195d      	adds	r5, r3, r5
    d4ca:	9905      	ldr	r1, [sp, #20]
    d4cc:	2201      	movs	r2, #1
    d4ce:	9804      	ldr	r0, [sp, #16]
    d4d0:	f000 fcb4 	bl	de3c <__lshift>
    d4d4:	9908      	ldr	r1, [sp, #32]
    d4d6:	9005      	str	r0, [sp, #20]
    d4d8:	f000 fd01 	bl	dede <__mcmp>
    d4dc:	2800      	cmp	r0, #0
    d4de:	dc2f      	bgt.n	d540 <_dtoa_r+0xb08>
    d4e0:	d101      	bne.n	d4e6 <_dtoa_r+0xaae>
    d4e2:	07e3      	lsls	r3, r4, #31
    d4e4:	d42c      	bmi.n	d540 <_dtoa_r+0xb08>
    d4e6:	1e6b      	subs	r3, r5, #1
    d4e8:	781a      	ldrb	r2, [r3, #0]
    d4ea:	2a30      	cmp	r2, #48	; 0x30
    d4ec:	d1b0      	bne.n	d450 <_dtoa_r+0xa18>
    d4ee:	001d      	movs	r5, r3
    d4f0:	e7f9      	b.n	d4e6 <_dtoa_r+0xaae>
    d4f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d4f4:	2b00      	cmp	r3, #0
    d4f6:	db07      	blt.n	d508 <_dtoa_r+0xad0>
    d4f8:	001d      	movs	r5, r3
    d4fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d4fc:	431d      	orrs	r5, r3
    d4fe:	d126      	bne.n	d54e <_dtoa_r+0xb16>
    d500:	2301      	movs	r3, #1
    d502:	9a06      	ldr	r2, [sp, #24]
    d504:	4213      	tst	r3, r2
    d506:	d122      	bne.n	d54e <_dtoa_r+0xb16>
    d508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d50a:	2b00      	cmp	r3, #0
    d50c:	dc00      	bgt.n	d510 <_dtoa_r+0xad8>
    d50e:	e773      	b.n	d3f8 <_dtoa_r+0x9c0>
    d510:	9905      	ldr	r1, [sp, #20]
    d512:	2201      	movs	r2, #1
    d514:	9804      	ldr	r0, [sp, #16]
    d516:	f000 fc91 	bl	de3c <__lshift>
    d51a:	9908      	ldr	r1, [sp, #32]
    d51c:	9005      	str	r0, [sp, #20]
    d51e:	f000 fcde 	bl	dede <__mcmp>
    d522:	2800      	cmp	r0, #0
    d524:	dc04      	bgt.n	d530 <_dtoa_r+0xaf8>
    d526:	d000      	beq.n	d52a <_dtoa_r+0xaf2>
    d528:	e766      	b.n	d3f8 <_dtoa_r+0x9c0>
    d52a:	07e3      	lsls	r3, r4, #31
    d52c:	d400      	bmi.n	d530 <_dtoa_r+0xaf8>
    d52e:	e763      	b.n	d3f8 <_dtoa_r+0x9c0>
    d530:	2c39      	cmp	r4, #57	; 0x39
    d532:	d000      	beq.n	d536 <_dtoa_r+0xafe>
    d534:	e75e      	b.n	d3f4 <_dtoa_r+0x9bc>
    d536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d53a:	1c5d      	adds	r5, r3, #1
    d53c:	2339      	movs	r3, #57	; 0x39
    d53e:	7013      	strb	r3, [r2, #0]
    d540:	1e6b      	subs	r3, r5, #1
    d542:	781a      	ldrb	r2, [r3, #0]
    d544:	2a39      	cmp	r2, #57	; 0x39
    d546:	d03b      	beq.n	d5c0 <_dtoa_r+0xb88>
    d548:	3201      	adds	r2, #1
    d54a:	701a      	strb	r2, [r3, #0]
    d54c:	e780      	b.n	d450 <_dtoa_r+0xa18>
    d54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d550:	3301      	adds	r3, #1
    d552:	930d      	str	r3, [sp, #52]	; 0x34
    d554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d556:	2b00      	cmp	r3, #0
    d558:	dd05      	ble.n	d566 <_dtoa_r+0xb2e>
    d55a:	2c39      	cmp	r4, #57	; 0x39
    d55c:	d0eb      	beq.n	d536 <_dtoa_r+0xafe>
    d55e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    d560:	3401      	adds	r4, #1
    d562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d564:	e74a      	b.n	d3fc <_dtoa_r+0x9c4>
    d566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d568:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d56a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    d56c:	701c      	strb	r4, [r3, #0]
    d56e:	4293      	cmp	r3, r2
    d570:	d0ab      	beq.n	d4ca <_dtoa_r+0xa92>
    d572:	2300      	movs	r3, #0
    d574:	220a      	movs	r2, #10
    d576:	9905      	ldr	r1, [sp, #20]
    d578:	9804      	ldr	r0, [sp, #16]
    d57a:	f000 faef 	bl	db5c <__multadd>
    d57e:	2300      	movs	r3, #0
    d580:	9005      	str	r0, [sp, #20]
    d582:	220a      	movs	r2, #10
    d584:	0039      	movs	r1, r7
    d586:	9804      	ldr	r0, [sp, #16]
    d588:	42b7      	cmp	r7, r6
    d58a:	d106      	bne.n	d59a <_dtoa_r+0xb62>
    d58c:	f000 fae6 	bl	db5c <__multadd>
    d590:	0007      	movs	r7, r0
    d592:	0006      	movs	r6, r0
    d594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d596:	930b      	str	r3, [sp, #44]	; 0x2c
    d598:	e6fc      	b.n	d394 <_dtoa_r+0x95c>
    d59a:	f000 fadf 	bl	db5c <__multadd>
    d59e:	0031      	movs	r1, r6
    d5a0:	0007      	movs	r7, r0
    d5a2:	2300      	movs	r3, #0
    d5a4:	220a      	movs	r2, #10
    d5a6:	9804      	ldr	r0, [sp, #16]
    d5a8:	f000 fad8 	bl	db5c <__multadd>
    d5ac:	0006      	movs	r6, r0
    d5ae:	e7f1      	b.n	d594 <_dtoa_r+0xb5c>
    d5b0:	2300      	movs	r3, #0
    d5b2:	220a      	movs	r2, #10
    d5b4:	9905      	ldr	r1, [sp, #20]
    d5b6:	9804      	ldr	r0, [sp, #16]
    d5b8:	f000 fad0 	bl	db5c <__multadd>
    d5bc:	9005      	str	r0, [sp, #20]
    d5be:	e771      	b.n	d4a4 <_dtoa_r+0xa6c>
    d5c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d5c2:	429a      	cmp	r2, r3
    d5c4:	d105      	bne.n	d5d2 <_dtoa_r+0xb9a>
    d5c6:	9b03      	ldr	r3, [sp, #12]
    d5c8:	3301      	adds	r3, #1
    d5ca:	9303      	str	r3, [sp, #12]
    d5cc:	2331      	movs	r3, #49	; 0x31
    d5ce:	7013      	strb	r3, [r2, #0]
    d5d0:	e73e      	b.n	d450 <_dtoa_r+0xa18>
    d5d2:	001d      	movs	r5, r3
    d5d4:	e7b4      	b.n	d540 <_dtoa_r+0xb08>
    d5d6:	4b0a      	ldr	r3, [pc, #40]	; (d600 <_dtoa_r+0xbc8>)
    d5d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d5da:	930a      	str	r3, [sp, #40]	; 0x28
    d5dc:	4b09      	ldr	r3, [pc, #36]	; (d604 <_dtoa_r+0xbcc>)
    d5de:	2a00      	cmp	r2, #0
    d5e0:	d001      	beq.n	d5e6 <_dtoa_r+0xbae>
    d5e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d5e4:	6013      	str	r3, [r2, #0]
    d5e6:	980a      	ldr	r0, [sp, #40]	; 0x28
    d5e8:	b01d      	add	sp, #116	; 0x74
    d5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d5ee:	2b00      	cmp	r3, #0
    d5f0:	dd00      	ble.n	d5f4 <_dtoa_r+0xbbc>
    d5f2:	e756      	b.n	d4a2 <_dtoa_r+0xa6a>
    d5f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d5f6:	2b02      	cmp	r3, #2
    d5f8:	dc00      	bgt.n	d5fc <_dtoa_r+0xbc4>
    d5fa:	e752      	b.n	d4a2 <_dtoa_r+0xa6a>
    d5fc:	e713      	b.n	d426 <_dtoa_r+0x9ee>
    d5fe:	46c0      	nop			; (mov r8, r8)
    d600:	00010298 	.word	0x00010298
    d604:	000102a0 	.word	0x000102a0

0000d608 <__sflush_r>:
    d608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d60a:	898a      	ldrh	r2, [r1, #12]
    d60c:	0005      	movs	r5, r0
    d60e:	000c      	movs	r4, r1
    d610:	0713      	lsls	r3, r2, #28
    d612:	d460      	bmi.n	d6d6 <__sflush_r+0xce>
    d614:	684b      	ldr	r3, [r1, #4]
    d616:	2b00      	cmp	r3, #0
    d618:	dc04      	bgt.n	d624 <__sflush_r+0x1c>
    d61a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    d61c:	2b00      	cmp	r3, #0
    d61e:	dc01      	bgt.n	d624 <__sflush_r+0x1c>
    d620:	2000      	movs	r0, #0
    d622:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d624:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    d626:	2f00      	cmp	r7, #0
    d628:	d0fa      	beq.n	d620 <__sflush_r+0x18>
    d62a:	2300      	movs	r3, #0
    d62c:	682e      	ldr	r6, [r5, #0]
    d62e:	602b      	str	r3, [r5, #0]
    d630:	2380      	movs	r3, #128	; 0x80
    d632:	015b      	lsls	r3, r3, #5
    d634:	401a      	ands	r2, r3
    d636:	d034      	beq.n	d6a2 <__sflush_r+0x9a>
    d638:	6d60      	ldr	r0, [r4, #84]	; 0x54
    d63a:	89a3      	ldrh	r3, [r4, #12]
    d63c:	075b      	lsls	r3, r3, #29
    d63e:	d506      	bpl.n	d64e <__sflush_r+0x46>
    d640:	6863      	ldr	r3, [r4, #4]
    d642:	1ac0      	subs	r0, r0, r3
    d644:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d646:	2b00      	cmp	r3, #0
    d648:	d001      	beq.n	d64e <__sflush_r+0x46>
    d64a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d64c:	1ac0      	subs	r0, r0, r3
    d64e:	0002      	movs	r2, r0
    d650:	6a21      	ldr	r1, [r4, #32]
    d652:	2300      	movs	r3, #0
    d654:	0028      	movs	r0, r5
    d656:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    d658:	47b8      	blx	r7
    d65a:	89a1      	ldrh	r1, [r4, #12]
    d65c:	1c43      	adds	r3, r0, #1
    d65e:	d106      	bne.n	d66e <__sflush_r+0x66>
    d660:	682b      	ldr	r3, [r5, #0]
    d662:	2b1d      	cmp	r3, #29
    d664:	d831      	bhi.n	d6ca <__sflush_r+0xc2>
    d666:	4a2c      	ldr	r2, [pc, #176]	; (d718 <__sflush_r+0x110>)
    d668:	40da      	lsrs	r2, r3
    d66a:	07d3      	lsls	r3, r2, #31
    d66c:	d52d      	bpl.n	d6ca <__sflush_r+0xc2>
    d66e:	2300      	movs	r3, #0
    d670:	6063      	str	r3, [r4, #4]
    d672:	6923      	ldr	r3, [r4, #16]
    d674:	6023      	str	r3, [r4, #0]
    d676:	04cb      	lsls	r3, r1, #19
    d678:	d505      	bpl.n	d686 <__sflush_r+0x7e>
    d67a:	1c43      	adds	r3, r0, #1
    d67c:	d102      	bne.n	d684 <__sflush_r+0x7c>
    d67e:	682b      	ldr	r3, [r5, #0]
    d680:	2b00      	cmp	r3, #0
    d682:	d100      	bne.n	d686 <__sflush_r+0x7e>
    d684:	6560      	str	r0, [r4, #84]	; 0x54
    d686:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d688:	602e      	str	r6, [r5, #0]
    d68a:	2900      	cmp	r1, #0
    d68c:	d0c8      	beq.n	d620 <__sflush_r+0x18>
    d68e:	0023      	movs	r3, r4
    d690:	3344      	adds	r3, #68	; 0x44
    d692:	4299      	cmp	r1, r3
    d694:	d002      	beq.n	d69c <__sflush_r+0x94>
    d696:	0028      	movs	r0, r5
    d698:	f7fd fe60 	bl	b35c <_free_r>
    d69c:	2000      	movs	r0, #0
    d69e:	6360      	str	r0, [r4, #52]	; 0x34
    d6a0:	e7bf      	b.n	d622 <__sflush_r+0x1a>
    d6a2:	2301      	movs	r3, #1
    d6a4:	6a21      	ldr	r1, [r4, #32]
    d6a6:	0028      	movs	r0, r5
    d6a8:	47b8      	blx	r7
    d6aa:	1c43      	adds	r3, r0, #1
    d6ac:	d1c5      	bne.n	d63a <__sflush_r+0x32>
    d6ae:	682b      	ldr	r3, [r5, #0]
    d6b0:	2b00      	cmp	r3, #0
    d6b2:	d0c2      	beq.n	d63a <__sflush_r+0x32>
    d6b4:	2b1d      	cmp	r3, #29
    d6b6:	d001      	beq.n	d6bc <__sflush_r+0xb4>
    d6b8:	2b16      	cmp	r3, #22
    d6ba:	d101      	bne.n	d6c0 <__sflush_r+0xb8>
    d6bc:	602e      	str	r6, [r5, #0]
    d6be:	e7af      	b.n	d620 <__sflush_r+0x18>
    d6c0:	2340      	movs	r3, #64	; 0x40
    d6c2:	89a2      	ldrh	r2, [r4, #12]
    d6c4:	4313      	orrs	r3, r2
    d6c6:	81a3      	strh	r3, [r4, #12]
    d6c8:	e7ab      	b.n	d622 <__sflush_r+0x1a>
    d6ca:	2340      	movs	r3, #64	; 0x40
    d6cc:	430b      	orrs	r3, r1
    d6ce:	2001      	movs	r0, #1
    d6d0:	81a3      	strh	r3, [r4, #12]
    d6d2:	4240      	negs	r0, r0
    d6d4:	e7a5      	b.n	d622 <__sflush_r+0x1a>
    d6d6:	690f      	ldr	r7, [r1, #16]
    d6d8:	2f00      	cmp	r7, #0
    d6da:	d0a1      	beq.n	d620 <__sflush_r+0x18>
    d6dc:	680b      	ldr	r3, [r1, #0]
    d6de:	600f      	str	r7, [r1, #0]
    d6e0:	1bdb      	subs	r3, r3, r7
    d6e2:	9301      	str	r3, [sp, #4]
    d6e4:	2300      	movs	r3, #0
    d6e6:	0792      	lsls	r2, r2, #30
    d6e8:	d100      	bne.n	d6ec <__sflush_r+0xe4>
    d6ea:	694b      	ldr	r3, [r1, #20]
    d6ec:	60a3      	str	r3, [r4, #8]
    d6ee:	9b01      	ldr	r3, [sp, #4]
    d6f0:	2b00      	cmp	r3, #0
    d6f2:	dc00      	bgt.n	d6f6 <__sflush_r+0xee>
    d6f4:	e794      	b.n	d620 <__sflush_r+0x18>
    d6f6:	9b01      	ldr	r3, [sp, #4]
    d6f8:	003a      	movs	r2, r7
    d6fa:	6a21      	ldr	r1, [r4, #32]
    d6fc:	0028      	movs	r0, r5
    d6fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    d700:	47b0      	blx	r6
    d702:	2800      	cmp	r0, #0
    d704:	dc03      	bgt.n	d70e <__sflush_r+0x106>
    d706:	2340      	movs	r3, #64	; 0x40
    d708:	89a2      	ldrh	r2, [r4, #12]
    d70a:	4313      	orrs	r3, r2
    d70c:	e7df      	b.n	d6ce <__sflush_r+0xc6>
    d70e:	9b01      	ldr	r3, [sp, #4]
    d710:	183f      	adds	r7, r7, r0
    d712:	1a1b      	subs	r3, r3, r0
    d714:	9301      	str	r3, [sp, #4]
    d716:	e7ea      	b.n	d6ee <__sflush_r+0xe6>
    d718:	20400001 	.word	0x20400001

0000d71c <_fflush_r>:
    d71c:	690b      	ldr	r3, [r1, #16]
    d71e:	b570      	push	{r4, r5, r6, lr}
    d720:	0005      	movs	r5, r0
    d722:	000c      	movs	r4, r1
    d724:	2b00      	cmp	r3, #0
    d726:	d101      	bne.n	d72c <_fflush_r+0x10>
    d728:	2000      	movs	r0, #0
    d72a:	bd70      	pop	{r4, r5, r6, pc}
    d72c:	2800      	cmp	r0, #0
    d72e:	d004      	beq.n	d73a <_fflush_r+0x1e>
    d730:	6983      	ldr	r3, [r0, #24]
    d732:	2b00      	cmp	r3, #0
    d734:	d101      	bne.n	d73a <_fflush_r+0x1e>
    d736:	f000 f85f 	bl	d7f8 <__sinit>
    d73a:	4b0b      	ldr	r3, [pc, #44]	; (d768 <_fflush_r+0x4c>)
    d73c:	429c      	cmp	r4, r3
    d73e:	d109      	bne.n	d754 <_fflush_r+0x38>
    d740:	686c      	ldr	r4, [r5, #4]
    d742:	220c      	movs	r2, #12
    d744:	5ea3      	ldrsh	r3, [r4, r2]
    d746:	2b00      	cmp	r3, #0
    d748:	d0ee      	beq.n	d728 <_fflush_r+0xc>
    d74a:	0021      	movs	r1, r4
    d74c:	0028      	movs	r0, r5
    d74e:	f7ff ff5b 	bl	d608 <__sflush_r>
    d752:	e7ea      	b.n	d72a <_fflush_r+0xe>
    d754:	4b05      	ldr	r3, [pc, #20]	; (d76c <_fflush_r+0x50>)
    d756:	429c      	cmp	r4, r3
    d758:	d101      	bne.n	d75e <_fflush_r+0x42>
    d75a:	68ac      	ldr	r4, [r5, #8]
    d75c:	e7f1      	b.n	d742 <_fflush_r+0x26>
    d75e:	4b04      	ldr	r3, [pc, #16]	; (d770 <_fflush_r+0x54>)
    d760:	429c      	cmp	r4, r3
    d762:	d1ee      	bne.n	d742 <_fflush_r+0x26>
    d764:	68ec      	ldr	r4, [r5, #12]
    d766:	e7ec      	b.n	d742 <_fflush_r+0x26>
    d768:	000102c8 	.word	0x000102c8
    d76c:	000102e8 	.word	0x000102e8
    d770:	000102a8 	.word	0x000102a8

0000d774 <_cleanup_r>:
    d774:	b510      	push	{r4, lr}
    d776:	4902      	ldr	r1, [pc, #8]	; (d780 <_cleanup_r+0xc>)
    d778:	f000 f8b2 	bl	d8e0 <_fwalk_reent>
    d77c:	bd10      	pop	{r4, pc}
    d77e:	46c0      	nop			; (mov r8, r8)
    d780:	0000d71d 	.word	0x0000d71d

0000d784 <std.isra.0>:
    d784:	2300      	movs	r3, #0
    d786:	b510      	push	{r4, lr}
    d788:	0004      	movs	r4, r0
    d78a:	6003      	str	r3, [r0, #0]
    d78c:	6043      	str	r3, [r0, #4]
    d78e:	6083      	str	r3, [r0, #8]
    d790:	8181      	strh	r1, [r0, #12]
    d792:	6643      	str	r3, [r0, #100]	; 0x64
    d794:	81c2      	strh	r2, [r0, #14]
    d796:	6103      	str	r3, [r0, #16]
    d798:	6143      	str	r3, [r0, #20]
    d79a:	6183      	str	r3, [r0, #24]
    d79c:	0019      	movs	r1, r3
    d79e:	2208      	movs	r2, #8
    d7a0:	305c      	adds	r0, #92	; 0x5c
    d7a2:	f7fd fb7c 	bl	ae9e <memset>
    d7a6:	4b05      	ldr	r3, [pc, #20]	; (d7bc <std.isra.0+0x38>)
    d7a8:	6224      	str	r4, [r4, #32]
    d7aa:	6263      	str	r3, [r4, #36]	; 0x24
    d7ac:	4b04      	ldr	r3, [pc, #16]	; (d7c0 <std.isra.0+0x3c>)
    d7ae:	62a3      	str	r3, [r4, #40]	; 0x28
    d7b0:	4b04      	ldr	r3, [pc, #16]	; (d7c4 <std.isra.0+0x40>)
    d7b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    d7b4:	4b04      	ldr	r3, [pc, #16]	; (d7c8 <std.isra.0+0x44>)
    d7b6:	6323      	str	r3, [r4, #48]	; 0x30
    d7b8:	bd10      	pop	{r4, pc}
    d7ba:	46c0      	nop			; (mov r8, r8)
    d7bc:	0000e499 	.word	0x0000e499
    d7c0:	0000e4c5 	.word	0x0000e4c5
    d7c4:	0000e4fd 	.word	0x0000e4fd
    d7c8:	0000e529 	.word	0x0000e529

0000d7cc <__sfmoreglue>:
    d7cc:	b570      	push	{r4, r5, r6, lr}
    d7ce:	2568      	movs	r5, #104	; 0x68
    d7d0:	1e4a      	subs	r2, r1, #1
    d7d2:	4355      	muls	r5, r2
    d7d4:	000e      	movs	r6, r1
    d7d6:	0029      	movs	r1, r5
    d7d8:	3174      	adds	r1, #116	; 0x74
    d7da:	f7fd fe09 	bl	b3f0 <_malloc_r>
    d7de:	1e04      	subs	r4, r0, #0
    d7e0:	d008      	beq.n	d7f4 <__sfmoreglue+0x28>
    d7e2:	2100      	movs	r1, #0
    d7e4:	002a      	movs	r2, r5
    d7e6:	6001      	str	r1, [r0, #0]
    d7e8:	6046      	str	r6, [r0, #4]
    d7ea:	300c      	adds	r0, #12
    d7ec:	60a0      	str	r0, [r4, #8]
    d7ee:	3268      	adds	r2, #104	; 0x68
    d7f0:	f7fd fb55 	bl	ae9e <memset>
    d7f4:	0020      	movs	r0, r4
    d7f6:	bd70      	pop	{r4, r5, r6, pc}

0000d7f8 <__sinit>:
    d7f8:	6983      	ldr	r3, [r0, #24]
    d7fa:	b513      	push	{r0, r1, r4, lr}
    d7fc:	0004      	movs	r4, r0
    d7fe:	2b00      	cmp	r3, #0
    d800:	d128      	bne.n	d854 <__sinit+0x5c>
    d802:	6483      	str	r3, [r0, #72]	; 0x48
    d804:	64c3      	str	r3, [r0, #76]	; 0x4c
    d806:	6503      	str	r3, [r0, #80]	; 0x50
    d808:	4b13      	ldr	r3, [pc, #76]	; (d858 <__sinit+0x60>)
    d80a:	4a14      	ldr	r2, [pc, #80]	; (d85c <__sinit+0x64>)
    d80c:	681b      	ldr	r3, [r3, #0]
    d80e:	6282      	str	r2, [r0, #40]	; 0x28
    d810:	9301      	str	r3, [sp, #4]
    d812:	4298      	cmp	r0, r3
    d814:	d101      	bne.n	d81a <__sinit+0x22>
    d816:	2301      	movs	r3, #1
    d818:	6183      	str	r3, [r0, #24]
    d81a:	0020      	movs	r0, r4
    d81c:	f000 f820 	bl	d860 <__sfp>
    d820:	6060      	str	r0, [r4, #4]
    d822:	0020      	movs	r0, r4
    d824:	f000 f81c 	bl	d860 <__sfp>
    d828:	60a0      	str	r0, [r4, #8]
    d82a:	0020      	movs	r0, r4
    d82c:	f000 f818 	bl	d860 <__sfp>
    d830:	2200      	movs	r2, #0
    d832:	60e0      	str	r0, [r4, #12]
    d834:	2104      	movs	r1, #4
    d836:	6860      	ldr	r0, [r4, #4]
    d838:	f7ff ffa4 	bl	d784 <std.isra.0>
    d83c:	2201      	movs	r2, #1
    d83e:	2109      	movs	r1, #9
    d840:	68a0      	ldr	r0, [r4, #8]
    d842:	f7ff ff9f 	bl	d784 <std.isra.0>
    d846:	2202      	movs	r2, #2
    d848:	2112      	movs	r1, #18
    d84a:	68e0      	ldr	r0, [r4, #12]
    d84c:	f7ff ff9a 	bl	d784 <std.isra.0>
    d850:	2301      	movs	r3, #1
    d852:	61a3      	str	r3, [r4, #24]
    d854:	bd13      	pop	{r0, r1, r4, pc}
    d856:	46c0      	nop			; (mov r8, r8)
    d858:	000100ac 	.word	0x000100ac
    d85c:	0000d775 	.word	0x0000d775

0000d860 <__sfp>:
    d860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d862:	4b1e      	ldr	r3, [pc, #120]	; (d8dc <__sfp+0x7c>)
    d864:	0007      	movs	r7, r0
    d866:	681e      	ldr	r6, [r3, #0]
    d868:	69b3      	ldr	r3, [r6, #24]
    d86a:	2b00      	cmp	r3, #0
    d86c:	d102      	bne.n	d874 <__sfp+0x14>
    d86e:	0030      	movs	r0, r6
    d870:	f7ff ffc2 	bl	d7f8 <__sinit>
    d874:	3648      	adds	r6, #72	; 0x48
    d876:	68b4      	ldr	r4, [r6, #8]
    d878:	6873      	ldr	r3, [r6, #4]
    d87a:	3b01      	subs	r3, #1
    d87c:	d504      	bpl.n	d888 <__sfp+0x28>
    d87e:	6833      	ldr	r3, [r6, #0]
    d880:	2b00      	cmp	r3, #0
    d882:	d007      	beq.n	d894 <__sfp+0x34>
    d884:	6836      	ldr	r6, [r6, #0]
    d886:	e7f6      	b.n	d876 <__sfp+0x16>
    d888:	220c      	movs	r2, #12
    d88a:	5ea5      	ldrsh	r5, [r4, r2]
    d88c:	2d00      	cmp	r5, #0
    d88e:	d00d      	beq.n	d8ac <__sfp+0x4c>
    d890:	3468      	adds	r4, #104	; 0x68
    d892:	e7f2      	b.n	d87a <__sfp+0x1a>
    d894:	2104      	movs	r1, #4
    d896:	0038      	movs	r0, r7
    d898:	f7ff ff98 	bl	d7cc <__sfmoreglue>
    d89c:	6030      	str	r0, [r6, #0]
    d89e:	2800      	cmp	r0, #0
    d8a0:	d1f0      	bne.n	d884 <__sfp+0x24>
    d8a2:	230c      	movs	r3, #12
    d8a4:	0004      	movs	r4, r0
    d8a6:	603b      	str	r3, [r7, #0]
    d8a8:	0020      	movs	r0, r4
    d8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d8ac:	2301      	movs	r3, #1
    d8ae:	0020      	movs	r0, r4
    d8b0:	425b      	negs	r3, r3
    d8b2:	81e3      	strh	r3, [r4, #14]
    d8b4:	3302      	adds	r3, #2
    d8b6:	81a3      	strh	r3, [r4, #12]
    d8b8:	6665      	str	r5, [r4, #100]	; 0x64
    d8ba:	6025      	str	r5, [r4, #0]
    d8bc:	60a5      	str	r5, [r4, #8]
    d8be:	6065      	str	r5, [r4, #4]
    d8c0:	6125      	str	r5, [r4, #16]
    d8c2:	6165      	str	r5, [r4, #20]
    d8c4:	61a5      	str	r5, [r4, #24]
    d8c6:	2208      	movs	r2, #8
    d8c8:	0029      	movs	r1, r5
    d8ca:	305c      	adds	r0, #92	; 0x5c
    d8cc:	f7fd fae7 	bl	ae9e <memset>
    d8d0:	6365      	str	r5, [r4, #52]	; 0x34
    d8d2:	63a5      	str	r5, [r4, #56]	; 0x38
    d8d4:	64a5      	str	r5, [r4, #72]	; 0x48
    d8d6:	64e5      	str	r5, [r4, #76]	; 0x4c
    d8d8:	e7e6      	b.n	d8a8 <__sfp+0x48>
    d8da:	46c0      	nop			; (mov r8, r8)
    d8dc:	000100ac 	.word	0x000100ac

0000d8e0 <_fwalk_reent>:
    d8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d8e2:	0004      	movs	r4, r0
    d8e4:	0007      	movs	r7, r0
    d8e6:	2600      	movs	r6, #0
    d8e8:	9101      	str	r1, [sp, #4]
    d8ea:	3448      	adds	r4, #72	; 0x48
    d8ec:	2c00      	cmp	r4, #0
    d8ee:	d101      	bne.n	d8f4 <_fwalk_reent+0x14>
    d8f0:	0030      	movs	r0, r6
    d8f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d8f4:	6863      	ldr	r3, [r4, #4]
    d8f6:	68a5      	ldr	r5, [r4, #8]
    d8f8:	9300      	str	r3, [sp, #0]
    d8fa:	9b00      	ldr	r3, [sp, #0]
    d8fc:	3b01      	subs	r3, #1
    d8fe:	9300      	str	r3, [sp, #0]
    d900:	d501      	bpl.n	d906 <_fwalk_reent+0x26>
    d902:	6824      	ldr	r4, [r4, #0]
    d904:	e7f2      	b.n	d8ec <_fwalk_reent+0xc>
    d906:	89ab      	ldrh	r3, [r5, #12]
    d908:	2b01      	cmp	r3, #1
    d90a:	d908      	bls.n	d91e <_fwalk_reent+0x3e>
    d90c:	220e      	movs	r2, #14
    d90e:	5eab      	ldrsh	r3, [r5, r2]
    d910:	3301      	adds	r3, #1
    d912:	d004      	beq.n	d91e <_fwalk_reent+0x3e>
    d914:	0029      	movs	r1, r5
    d916:	0038      	movs	r0, r7
    d918:	9b01      	ldr	r3, [sp, #4]
    d91a:	4798      	blx	r3
    d91c:	4306      	orrs	r6, r0
    d91e:	3568      	adds	r5, #104	; 0x68
    d920:	e7eb      	b.n	d8fa <_fwalk_reent+0x1a>
	...

0000d924 <_findenv_r>:
    d924:	b5f0      	push	{r4, r5, r6, r7, lr}
    d926:	000e      	movs	r6, r1
    d928:	b085      	sub	sp, #20
    d92a:	0007      	movs	r7, r0
    d92c:	9203      	str	r2, [sp, #12]
    d92e:	f000 fed3 	bl	e6d8 <__env_lock>
    d932:	4c19      	ldr	r4, [pc, #100]	; (d998 <_findenv_r+0x74>)
    d934:	0033      	movs	r3, r6
    d936:	6825      	ldr	r5, [r4, #0]
    d938:	2d00      	cmp	r5, #0
    d93a:	d106      	bne.n	d94a <_findenv_r+0x26>
    d93c:	0038      	movs	r0, r7
    d93e:	f000 fecc 	bl	e6da <__env_unlock>
    d942:	2000      	movs	r0, #0
    d944:	b005      	add	sp, #20
    d946:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d948:	3301      	adds	r3, #1
    d94a:	781a      	ldrb	r2, [r3, #0]
    d94c:	2a00      	cmp	r2, #0
    d94e:	d01f      	beq.n	d990 <_findenv_r+0x6c>
    d950:	2a3d      	cmp	r2, #61	; 0x3d
    d952:	d1f9      	bne.n	d948 <_findenv_r+0x24>
    d954:	e7f2      	b.n	d93c <_findenv_r+0x18>
    d956:	3504      	adds	r5, #4
    d958:	6828      	ldr	r0, [r5, #0]
    d95a:	2800      	cmp	r0, #0
    d95c:	d0ee      	beq.n	d93c <_findenv_r+0x18>
    d95e:	9a01      	ldr	r2, [sp, #4]
    d960:	0031      	movs	r1, r6
    d962:	f7fe fbbb 	bl	c0dc <strncmp>
    d966:	2800      	cmp	r0, #0
    d968:	d1f5      	bne.n	d956 <_findenv_r+0x32>
    d96a:	9a01      	ldr	r2, [sp, #4]
    d96c:	682b      	ldr	r3, [r5, #0]
    d96e:	4694      	mov	ip, r2
    d970:	4463      	add	r3, ip
    d972:	9302      	str	r3, [sp, #8]
    d974:	781b      	ldrb	r3, [r3, #0]
    d976:	2b3d      	cmp	r3, #61	; 0x3d
    d978:	d1ed      	bne.n	d956 <_findenv_r+0x32>
    d97a:	6823      	ldr	r3, [r4, #0]
    d97c:	0038      	movs	r0, r7
    d97e:	1aed      	subs	r5, r5, r3
    d980:	9b03      	ldr	r3, [sp, #12]
    d982:	10ad      	asrs	r5, r5, #2
    d984:	601d      	str	r5, [r3, #0]
    d986:	f000 fea8 	bl	e6da <__env_unlock>
    d98a:	9802      	ldr	r0, [sp, #8]
    d98c:	3001      	adds	r0, #1
    d98e:	e7d9      	b.n	d944 <_findenv_r+0x20>
    d990:	1b9b      	subs	r3, r3, r6
    d992:	9301      	str	r3, [sp, #4]
    d994:	e7e0      	b.n	d958 <_findenv_r+0x34>
    d996:	46c0      	nop			; (mov r8, r8)
    d998:	200002c8 	.word	0x200002c8

0000d99c <_getenv_r>:
    d99c:	b507      	push	{r0, r1, r2, lr}
    d99e:	aa01      	add	r2, sp, #4
    d9a0:	f7ff ffc0 	bl	d924 <_findenv_r>
    d9a4:	bd0e      	pop	{r1, r2, r3, pc}
	...

0000d9a8 <__gettzinfo>:
    d9a8:	4800      	ldr	r0, [pc, #0]	; (d9ac <__gettzinfo+0x4>)
    d9aa:	4770      	bx	lr
    d9ac:	20000288 	.word	0x20000288

0000d9b0 <_localeconv_r>:
    d9b0:	4b03      	ldr	r3, [pc, #12]	; (d9c0 <_localeconv_r+0x10>)
    d9b2:	681b      	ldr	r3, [r3, #0]
    d9b4:	6a18      	ldr	r0, [r3, #32]
    d9b6:	2800      	cmp	r0, #0
    d9b8:	d100      	bne.n	d9bc <_localeconv_r+0xc>
    d9ba:	4802      	ldr	r0, [pc, #8]	; (d9c4 <_localeconv_r+0x14>)
    d9bc:	30f0      	adds	r0, #240	; 0xf0
    d9be:	4770      	bx	lr
    d9c0:	200000b0 	.word	0x200000b0
    d9c4:	20000114 	.word	0x20000114

0000d9c8 <__swhatbuf_r>:
    d9c8:	b570      	push	{r4, r5, r6, lr}
    d9ca:	000e      	movs	r6, r1
    d9cc:	001d      	movs	r5, r3
    d9ce:	230e      	movs	r3, #14
    d9d0:	5ec9      	ldrsh	r1, [r1, r3]
    d9d2:	b090      	sub	sp, #64	; 0x40
    d9d4:	0014      	movs	r4, r2
    d9d6:	2900      	cmp	r1, #0
    d9d8:	da07      	bge.n	d9ea <__swhatbuf_r+0x22>
    d9da:	2300      	movs	r3, #0
    d9dc:	602b      	str	r3, [r5, #0]
    d9de:	89b3      	ldrh	r3, [r6, #12]
    d9e0:	061b      	lsls	r3, r3, #24
    d9e2:	d411      	bmi.n	da08 <__swhatbuf_r+0x40>
    d9e4:	2380      	movs	r3, #128	; 0x80
    d9e6:	00db      	lsls	r3, r3, #3
    d9e8:	e00f      	b.n	da0a <__swhatbuf_r+0x42>
    d9ea:	aa01      	add	r2, sp, #4
    d9ec:	f000 fe76 	bl	e6dc <_fstat_r>
    d9f0:	2800      	cmp	r0, #0
    d9f2:	dbf2      	blt.n	d9da <__swhatbuf_r+0x12>
    d9f4:	22f0      	movs	r2, #240	; 0xf0
    d9f6:	9b02      	ldr	r3, [sp, #8]
    d9f8:	0212      	lsls	r2, r2, #8
    d9fa:	4013      	ands	r3, r2
    d9fc:	4a05      	ldr	r2, [pc, #20]	; (da14 <__swhatbuf_r+0x4c>)
    d9fe:	189b      	adds	r3, r3, r2
    da00:	425a      	negs	r2, r3
    da02:	4153      	adcs	r3, r2
    da04:	602b      	str	r3, [r5, #0]
    da06:	e7ed      	b.n	d9e4 <__swhatbuf_r+0x1c>
    da08:	2340      	movs	r3, #64	; 0x40
    da0a:	2000      	movs	r0, #0
    da0c:	6023      	str	r3, [r4, #0]
    da0e:	b010      	add	sp, #64	; 0x40
    da10:	bd70      	pop	{r4, r5, r6, pc}
    da12:	46c0      	nop			; (mov r8, r8)
    da14:	ffffe000 	.word	0xffffe000

0000da18 <__smakebuf_r>:
    da18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    da1a:	2602      	movs	r6, #2
    da1c:	898b      	ldrh	r3, [r1, #12]
    da1e:	0005      	movs	r5, r0
    da20:	000c      	movs	r4, r1
    da22:	4233      	tst	r3, r6
    da24:	d006      	beq.n	da34 <__smakebuf_r+0x1c>
    da26:	0023      	movs	r3, r4
    da28:	3347      	adds	r3, #71	; 0x47
    da2a:	6023      	str	r3, [r4, #0]
    da2c:	6123      	str	r3, [r4, #16]
    da2e:	2301      	movs	r3, #1
    da30:	6163      	str	r3, [r4, #20]
    da32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    da34:	ab01      	add	r3, sp, #4
    da36:	466a      	mov	r2, sp
    da38:	f7ff ffc6 	bl	d9c8 <__swhatbuf_r>
    da3c:	9900      	ldr	r1, [sp, #0]
    da3e:	0007      	movs	r7, r0
    da40:	0028      	movs	r0, r5
    da42:	f7fd fcd5 	bl	b3f0 <_malloc_r>
    da46:	2800      	cmp	r0, #0
    da48:	d108      	bne.n	da5c <__smakebuf_r+0x44>
    da4a:	220c      	movs	r2, #12
    da4c:	5ea3      	ldrsh	r3, [r4, r2]
    da4e:	059a      	lsls	r2, r3, #22
    da50:	d4ef      	bmi.n	da32 <__smakebuf_r+0x1a>
    da52:	2203      	movs	r2, #3
    da54:	4393      	bics	r3, r2
    da56:	431e      	orrs	r6, r3
    da58:	81a6      	strh	r6, [r4, #12]
    da5a:	e7e4      	b.n	da26 <__smakebuf_r+0xe>
    da5c:	4b0f      	ldr	r3, [pc, #60]	; (da9c <__smakebuf_r+0x84>)
    da5e:	62ab      	str	r3, [r5, #40]	; 0x28
    da60:	2380      	movs	r3, #128	; 0x80
    da62:	89a2      	ldrh	r2, [r4, #12]
    da64:	6020      	str	r0, [r4, #0]
    da66:	4313      	orrs	r3, r2
    da68:	81a3      	strh	r3, [r4, #12]
    da6a:	9b00      	ldr	r3, [sp, #0]
    da6c:	6120      	str	r0, [r4, #16]
    da6e:	6163      	str	r3, [r4, #20]
    da70:	9b01      	ldr	r3, [sp, #4]
    da72:	2b00      	cmp	r3, #0
    da74:	d00d      	beq.n	da92 <__smakebuf_r+0x7a>
    da76:	230e      	movs	r3, #14
    da78:	5ee1      	ldrsh	r1, [r4, r3]
    da7a:	0028      	movs	r0, r5
    da7c:	f000 fe40 	bl	e700 <_isatty_r>
    da80:	2800      	cmp	r0, #0
    da82:	d006      	beq.n	da92 <__smakebuf_r+0x7a>
    da84:	2203      	movs	r2, #3
    da86:	89a3      	ldrh	r3, [r4, #12]
    da88:	4393      	bics	r3, r2
    da8a:	001a      	movs	r2, r3
    da8c:	2301      	movs	r3, #1
    da8e:	4313      	orrs	r3, r2
    da90:	81a3      	strh	r3, [r4, #12]
    da92:	89a0      	ldrh	r0, [r4, #12]
    da94:	4338      	orrs	r0, r7
    da96:	81a0      	strh	r0, [r4, #12]
    da98:	e7cb      	b.n	da32 <__smakebuf_r+0x1a>
    da9a:	46c0      	nop			; (mov r8, r8)
    da9c:	0000d775 	.word	0x0000d775

0000daa0 <memchr>:
    daa0:	b2c9      	uxtb	r1, r1
    daa2:	1882      	adds	r2, r0, r2
    daa4:	4290      	cmp	r0, r2
    daa6:	d101      	bne.n	daac <memchr+0xc>
    daa8:	2000      	movs	r0, #0
    daaa:	4770      	bx	lr
    daac:	7803      	ldrb	r3, [r0, #0]
    daae:	428b      	cmp	r3, r1
    dab0:	d0fb      	beq.n	daaa <memchr+0xa>
    dab2:	3001      	adds	r0, #1
    dab4:	e7f6      	b.n	daa4 <memchr+0x4>

0000dab6 <__malloc_lock>:
    dab6:	4770      	bx	lr

0000dab8 <__malloc_unlock>:
    dab8:	4770      	bx	lr

0000daba <_Balloc>:
    daba:	b570      	push	{r4, r5, r6, lr}
    dabc:	6a46      	ldr	r6, [r0, #36]	; 0x24
    dabe:	0004      	movs	r4, r0
    dac0:	000d      	movs	r5, r1
    dac2:	2e00      	cmp	r6, #0
    dac4:	d107      	bne.n	dad6 <_Balloc+0x1c>
    dac6:	2010      	movs	r0, #16
    dac8:	f7fd f9a8 	bl	ae1c <malloc>
    dacc:	6260      	str	r0, [r4, #36]	; 0x24
    dace:	6046      	str	r6, [r0, #4]
    dad0:	6086      	str	r6, [r0, #8]
    dad2:	6006      	str	r6, [r0, #0]
    dad4:	60c6      	str	r6, [r0, #12]
    dad6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    dad8:	68f3      	ldr	r3, [r6, #12]
    dada:	2b00      	cmp	r3, #0
    dadc:	d013      	beq.n	db06 <_Balloc+0x4c>
    dade:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dae0:	00aa      	lsls	r2, r5, #2
    dae2:	68db      	ldr	r3, [r3, #12]
    dae4:	189b      	adds	r3, r3, r2
    dae6:	6818      	ldr	r0, [r3, #0]
    dae8:	2800      	cmp	r0, #0
    daea:	d118      	bne.n	db1e <_Balloc+0x64>
    daec:	2101      	movs	r1, #1
    daee:	000e      	movs	r6, r1
    daf0:	40ae      	lsls	r6, r5
    daf2:	1d72      	adds	r2, r6, #5
    daf4:	0092      	lsls	r2, r2, #2
    daf6:	0020      	movs	r0, r4
    daf8:	f000 fac2 	bl	e080 <_calloc_r>
    dafc:	2800      	cmp	r0, #0
    dafe:	d00c      	beq.n	db1a <_Balloc+0x60>
    db00:	6045      	str	r5, [r0, #4]
    db02:	6086      	str	r6, [r0, #8]
    db04:	e00d      	b.n	db22 <_Balloc+0x68>
    db06:	2221      	movs	r2, #33	; 0x21
    db08:	2104      	movs	r1, #4
    db0a:	0020      	movs	r0, r4
    db0c:	f000 fab8 	bl	e080 <_calloc_r>
    db10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    db12:	60f0      	str	r0, [r6, #12]
    db14:	68db      	ldr	r3, [r3, #12]
    db16:	2b00      	cmp	r3, #0
    db18:	d1e1      	bne.n	dade <_Balloc+0x24>
    db1a:	2000      	movs	r0, #0
    db1c:	bd70      	pop	{r4, r5, r6, pc}
    db1e:	6802      	ldr	r2, [r0, #0]
    db20:	601a      	str	r2, [r3, #0]
    db22:	2300      	movs	r3, #0
    db24:	6103      	str	r3, [r0, #16]
    db26:	60c3      	str	r3, [r0, #12]
    db28:	e7f8      	b.n	db1c <_Balloc+0x62>

0000db2a <_Bfree>:
    db2a:	b570      	push	{r4, r5, r6, lr}
    db2c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    db2e:	0006      	movs	r6, r0
    db30:	000d      	movs	r5, r1
    db32:	2c00      	cmp	r4, #0
    db34:	d107      	bne.n	db46 <_Bfree+0x1c>
    db36:	2010      	movs	r0, #16
    db38:	f7fd f970 	bl	ae1c <malloc>
    db3c:	6270      	str	r0, [r6, #36]	; 0x24
    db3e:	6044      	str	r4, [r0, #4]
    db40:	6084      	str	r4, [r0, #8]
    db42:	6004      	str	r4, [r0, #0]
    db44:	60c4      	str	r4, [r0, #12]
    db46:	2d00      	cmp	r5, #0
    db48:	d007      	beq.n	db5a <_Bfree+0x30>
    db4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    db4c:	686a      	ldr	r2, [r5, #4]
    db4e:	68db      	ldr	r3, [r3, #12]
    db50:	0092      	lsls	r2, r2, #2
    db52:	189b      	adds	r3, r3, r2
    db54:	681a      	ldr	r2, [r3, #0]
    db56:	602a      	str	r2, [r5, #0]
    db58:	601d      	str	r5, [r3, #0]
    db5a:	bd70      	pop	{r4, r5, r6, pc}

0000db5c <__multadd>:
    db5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    db5e:	001e      	movs	r6, r3
    db60:	2314      	movs	r3, #20
    db62:	469c      	mov	ip, r3
    db64:	0007      	movs	r7, r0
    db66:	000c      	movs	r4, r1
    db68:	2000      	movs	r0, #0
    db6a:	690d      	ldr	r5, [r1, #16]
    db6c:	448c      	add	ip, r1
    db6e:	4663      	mov	r3, ip
    db70:	8819      	ldrh	r1, [r3, #0]
    db72:	681b      	ldr	r3, [r3, #0]
    db74:	4351      	muls	r1, r2
    db76:	0c1b      	lsrs	r3, r3, #16
    db78:	4353      	muls	r3, r2
    db7a:	1989      	adds	r1, r1, r6
    db7c:	0c0e      	lsrs	r6, r1, #16
    db7e:	199b      	adds	r3, r3, r6
    db80:	b289      	uxth	r1, r1
    db82:	0c1e      	lsrs	r6, r3, #16
    db84:	041b      	lsls	r3, r3, #16
    db86:	185b      	adds	r3, r3, r1
    db88:	4661      	mov	r1, ip
    db8a:	3001      	adds	r0, #1
    db8c:	c108      	stmia	r1!, {r3}
    db8e:	468c      	mov	ip, r1
    db90:	4285      	cmp	r5, r0
    db92:	dcec      	bgt.n	db6e <__multadd+0x12>
    db94:	2e00      	cmp	r6, #0
    db96:	d01b      	beq.n	dbd0 <__multadd+0x74>
    db98:	68a3      	ldr	r3, [r4, #8]
    db9a:	429d      	cmp	r5, r3
    db9c:	db12      	blt.n	dbc4 <__multadd+0x68>
    db9e:	6863      	ldr	r3, [r4, #4]
    dba0:	0038      	movs	r0, r7
    dba2:	1c59      	adds	r1, r3, #1
    dba4:	f7ff ff89 	bl	daba <_Balloc>
    dba8:	0021      	movs	r1, r4
    dbaa:	6923      	ldr	r3, [r4, #16]
    dbac:	9001      	str	r0, [sp, #4]
    dbae:	1c9a      	adds	r2, r3, #2
    dbb0:	0092      	lsls	r2, r2, #2
    dbb2:	310c      	adds	r1, #12
    dbb4:	300c      	adds	r0, #12
    dbb6:	f7fd f957 	bl	ae68 <memcpy>
    dbba:	0021      	movs	r1, r4
    dbbc:	0038      	movs	r0, r7
    dbbe:	f7ff ffb4 	bl	db2a <_Bfree>
    dbc2:	9c01      	ldr	r4, [sp, #4]
    dbc4:	1d2b      	adds	r3, r5, #4
    dbc6:	009b      	lsls	r3, r3, #2
    dbc8:	18e3      	adds	r3, r4, r3
    dbca:	3501      	adds	r5, #1
    dbcc:	605e      	str	r6, [r3, #4]
    dbce:	6125      	str	r5, [r4, #16]
    dbd0:	0020      	movs	r0, r4
    dbd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000dbd4 <__hi0bits>:
    dbd4:	0003      	movs	r3, r0
    dbd6:	0c02      	lsrs	r2, r0, #16
    dbd8:	2000      	movs	r0, #0
    dbda:	4282      	cmp	r2, r0
    dbdc:	d101      	bne.n	dbe2 <__hi0bits+0xe>
    dbde:	041b      	lsls	r3, r3, #16
    dbe0:	3010      	adds	r0, #16
    dbe2:	0e1a      	lsrs	r2, r3, #24
    dbe4:	d101      	bne.n	dbea <__hi0bits+0x16>
    dbe6:	3008      	adds	r0, #8
    dbe8:	021b      	lsls	r3, r3, #8
    dbea:	0f1a      	lsrs	r2, r3, #28
    dbec:	d101      	bne.n	dbf2 <__hi0bits+0x1e>
    dbee:	3004      	adds	r0, #4
    dbf0:	011b      	lsls	r3, r3, #4
    dbf2:	0f9a      	lsrs	r2, r3, #30
    dbf4:	d101      	bne.n	dbfa <__hi0bits+0x26>
    dbf6:	3002      	adds	r0, #2
    dbf8:	009b      	lsls	r3, r3, #2
    dbfa:	2b00      	cmp	r3, #0
    dbfc:	db03      	blt.n	dc06 <__hi0bits+0x32>
    dbfe:	3001      	adds	r0, #1
    dc00:	005b      	lsls	r3, r3, #1
    dc02:	d400      	bmi.n	dc06 <__hi0bits+0x32>
    dc04:	2020      	movs	r0, #32
    dc06:	4770      	bx	lr

0000dc08 <__lo0bits>:
    dc08:	2207      	movs	r2, #7
    dc0a:	6803      	ldr	r3, [r0, #0]
    dc0c:	b510      	push	{r4, lr}
    dc0e:	0001      	movs	r1, r0
    dc10:	401a      	ands	r2, r3
    dc12:	d00d      	beq.n	dc30 <__lo0bits+0x28>
    dc14:	2401      	movs	r4, #1
    dc16:	2000      	movs	r0, #0
    dc18:	4223      	tst	r3, r4
    dc1a:	d105      	bne.n	dc28 <__lo0bits+0x20>
    dc1c:	3002      	adds	r0, #2
    dc1e:	4203      	tst	r3, r0
    dc20:	d003      	beq.n	dc2a <__lo0bits+0x22>
    dc22:	40e3      	lsrs	r3, r4
    dc24:	0020      	movs	r0, r4
    dc26:	600b      	str	r3, [r1, #0]
    dc28:	bd10      	pop	{r4, pc}
    dc2a:	089b      	lsrs	r3, r3, #2
    dc2c:	600b      	str	r3, [r1, #0]
    dc2e:	e7fb      	b.n	dc28 <__lo0bits+0x20>
    dc30:	b29c      	uxth	r4, r3
    dc32:	0010      	movs	r0, r2
    dc34:	2c00      	cmp	r4, #0
    dc36:	d101      	bne.n	dc3c <__lo0bits+0x34>
    dc38:	2010      	movs	r0, #16
    dc3a:	0c1b      	lsrs	r3, r3, #16
    dc3c:	b2da      	uxtb	r2, r3
    dc3e:	2a00      	cmp	r2, #0
    dc40:	d101      	bne.n	dc46 <__lo0bits+0x3e>
    dc42:	3008      	adds	r0, #8
    dc44:	0a1b      	lsrs	r3, r3, #8
    dc46:	071a      	lsls	r2, r3, #28
    dc48:	d101      	bne.n	dc4e <__lo0bits+0x46>
    dc4a:	3004      	adds	r0, #4
    dc4c:	091b      	lsrs	r3, r3, #4
    dc4e:	079a      	lsls	r2, r3, #30
    dc50:	d101      	bne.n	dc56 <__lo0bits+0x4e>
    dc52:	3002      	adds	r0, #2
    dc54:	089b      	lsrs	r3, r3, #2
    dc56:	07da      	lsls	r2, r3, #31
    dc58:	d4e8      	bmi.n	dc2c <__lo0bits+0x24>
    dc5a:	085b      	lsrs	r3, r3, #1
    dc5c:	d001      	beq.n	dc62 <__lo0bits+0x5a>
    dc5e:	3001      	adds	r0, #1
    dc60:	e7e4      	b.n	dc2c <__lo0bits+0x24>
    dc62:	2020      	movs	r0, #32
    dc64:	e7e0      	b.n	dc28 <__lo0bits+0x20>

0000dc66 <__i2b>:
    dc66:	b510      	push	{r4, lr}
    dc68:	000c      	movs	r4, r1
    dc6a:	2101      	movs	r1, #1
    dc6c:	f7ff ff25 	bl	daba <_Balloc>
    dc70:	2301      	movs	r3, #1
    dc72:	6144      	str	r4, [r0, #20]
    dc74:	6103      	str	r3, [r0, #16]
    dc76:	bd10      	pop	{r4, pc}

0000dc78 <__multiply>:
    dc78:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc7a:	690b      	ldr	r3, [r1, #16]
    dc7c:	0015      	movs	r5, r2
    dc7e:	6912      	ldr	r2, [r2, #16]
    dc80:	b089      	sub	sp, #36	; 0x24
    dc82:	000c      	movs	r4, r1
    dc84:	4293      	cmp	r3, r2
    dc86:	da01      	bge.n	dc8c <__multiply+0x14>
    dc88:	002c      	movs	r4, r5
    dc8a:	000d      	movs	r5, r1
    dc8c:	6927      	ldr	r7, [r4, #16]
    dc8e:	692e      	ldr	r6, [r5, #16]
    dc90:	68a2      	ldr	r2, [r4, #8]
    dc92:	19bb      	adds	r3, r7, r6
    dc94:	6861      	ldr	r1, [r4, #4]
    dc96:	9301      	str	r3, [sp, #4]
    dc98:	4293      	cmp	r3, r2
    dc9a:	dd00      	ble.n	dc9e <__multiply+0x26>
    dc9c:	3101      	adds	r1, #1
    dc9e:	f7ff ff0c 	bl	daba <_Balloc>
    dca2:	0003      	movs	r3, r0
    dca4:	3314      	adds	r3, #20
    dca6:	9300      	str	r3, [sp, #0]
    dca8:	9a00      	ldr	r2, [sp, #0]
    dcaa:	19bb      	adds	r3, r7, r6
    dcac:	4694      	mov	ip, r2
    dcae:	009b      	lsls	r3, r3, #2
    dcb0:	449c      	add	ip, r3
    dcb2:	0013      	movs	r3, r2
    dcb4:	2200      	movs	r2, #0
    dcb6:	9004      	str	r0, [sp, #16]
    dcb8:	4563      	cmp	r3, ip
    dcba:	d31c      	bcc.n	dcf6 <__multiply+0x7e>
    dcbc:	002a      	movs	r2, r5
    dcbe:	3414      	adds	r4, #20
    dcc0:	00bf      	lsls	r7, r7, #2
    dcc2:	19e3      	adds	r3, r4, r7
    dcc4:	3214      	adds	r2, #20
    dcc6:	00b6      	lsls	r6, r6, #2
    dcc8:	9305      	str	r3, [sp, #20]
    dcca:	1993      	adds	r3, r2, r6
    dccc:	9402      	str	r4, [sp, #8]
    dcce:	9306      	str	r3, [sp, #24]
    dcd0:	9b06      	ldr	r3, [sp, #24]
    dcd2:	429a      	cmp	r2, r3
    dcd4:	d311      	bcc.n	dcfa <__multiply+0x82>
    dcd6:	9b01      	ldr	r3, [sp, #4]
    dcd8:	2b00      	cmp	r3, #0
    dcda:	dd06      	ble.n	dcea <__multiply+0x72>
    dcdc:	2304      	movs	r3, #4
    dcde:	425b      	negs	r3, r3
    dce0:	449c      	add	ip, r3
    dce2:	4663      	mov	r3, ip
    dce4:	681b      	ldr	r3, [r3, #0]
    dce6:	2b00      	cmp	r3, #0
    dce8:	d051      	beq.n	dd8e <__multiply+0x116>
    dcea:	9b04      	ldr	r3, [sp, #16]
    dcec:	9a01      	ldr	r2, [sp, #4]
    dcee:	0018      	movs	r0, r3
    dcf0:	611a      	str	r2, [r3, #16]
    dcf2:	b009      	add	sp, #36	; 0x24
    dcf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcf6:	c304      	stmia	r3!, {r2}
    dcf8:	e7de      	b.n	dcb8 <__multiply+0x40>
    dcfa:	8814      	ldrh	r4, [r2, #0]
    dcfc:	2c00      	cmp	r4, #0
    dcfe:	d01e      	beq.n	dd3e <__multiply+0xc6>
    dd00:	2600      	movs	r6, #0
    dd02:	9d00      	ldr	r5, [sp, #0]
    dd04:	9f02      	ldr	r7, [sp, #8]
    dd06:	cf01      	ldmia	r7!, {r0}
    dd08:	9507      	str	r5, [sp, #28]
    dd0a:	cd08      	ldmia	r5!, {r3}
    dd0c:	9303      	str	r3, [sp, #12]
    dd0e:	b283      	uxth	r3, r0
    dd10:	4363      	muls	r3, r4
    dd12:	0019      	movs	r1, r3
    dd14:	466b      	mov	r3, sp
    dd16:	0c00      	lsrs	r0, r0, #16
    dd18:	899b      	ldrh	r3, [r3, #12]
    dd1a:	4360      	muls	r0, r4
    dd1c:	18cb      	adds	r3, r1, r3
    dd1e:	9903      	ldr	r1, [sp, #12]
    dd20:	199b      	adds	r3, r3, r6
    dd22:	0c09      	lsrs	r1, r1, #16
    dd24:	1841      	adds	r1, r0, r1
    dd26:	0c18      	lsrs	r0, r3, #16
    dd28:	1809      	adds	r1, r1, r0
    dd2a:	0c0e      	lsrs	r6, r1, #16
    dd2c:	b29b      	uxth	r3, r3
    dd2e:	0409      	lsls	r1, r1, #16
    dd30:	430b      	orrs	r3, r1
    dd32:	9907      	ldr	r1, [sp, #28]
    dd34:	600b      	str	r3, [r1, #0]
    dd36:	9b05      	ldr	r3, [sp, #20]
    dd38:	42bb      	cmp	r3, r7
    dd3a:	d8e4      	bhi.n	dd06 <__multiply+0x8e>
    dd3c:	602e      	str	r6, [r5, #0]
    dd3e:	6813      	ldr	r3, [r2, #0]
    dd40:	0c1b      	lsrs	r3, r3, #16
    dd42:	9303      	str	r3, [sp, #12]
    dd44:	d01e      	beq.n	dd84 <__multiply+0x10c>
    dd46:	2600      	movs	r6, #0
    dd48:	9b00      	ldr	r3, [sp, #0]
    dd4a:	9c02      	ldr	r4, [sp, #8]
    dd4c:	681b      	ldr	r3, [r3, #0]
    dd4e:	9800      	ldr	r0, [sp, #0]
    dd50:	0007      	movs	r7, r0
    dd52:	8821      	ldrh	r1, [r4, #0]
    dd54:	9d03      	ldr	r5, [sp, #12]
    dd56:	b29b      	uxth	r3, r3
    dd58:	4369      	muls	r1, r5
    dd5a:	c820      	ldmia	r0!, {r5}
    dd5c:	0c2d      	lsrs	r5, r5, #16
    dd5e:	1949      	adds	r1, r1, r5
    dd60:	198e      	adds	r6, r1, r6
    dd62:	0431      	lsls	r1, r6, #16
    dd64:	430b      	orrs	r3, r1
    dd66:	603b      	str	r3, [r7, #0]
    dd68:	cc08      	ldmia	r4!, {r3}
    dd6a:	9903      	ldr	r1, [sp, #12]
    dd6c:	0c1b      	lsrs	r3, r3, #16
    dd6e:	434b      	muls	r3, r1
    dd70:	6879      	ldr	r1, [r7, #4]
    dd72:	0c36      	lsrs	r6, r6, #16
    dd74:	b289      	uxth	r1, r1
    dd76:	185b      	adds	r3, r3, r1
    dd78:	9905      	ldr	r1, [sp, #20]
    dd7a:	199b      	adds	r3, r3, r6
    dd7c:	0c1e      	lsrs	r6, r3, #16
    dd7e:	42a1      	cmp	r1, r4
    dd80:	d8e6      	bhi.n	dd50 <__multiply+0xd8>
    dd82:	6003      	str	r3, [r0, #0]
    dd84:	9b00      	ldr	r3, [sp, #0]
    dd86:	3204      	adds	r2, #4
    dd88:	3304      	adds	r3, #4
    dd8a:	9300      	str	r3, [sp, #0]
    dd8c:	e7a0      	b.n	dcd0 <__multiply+0x58>
    dd8e:	9b01      	ldr	r3, [sp, #4]
    dd90:	3b01      	subs	r3, #1
    dd92:	9301      	str	r3, [sp, #4]
    dd94:	e79f      	b.n	dcd6 <__multiply+0x5e>
	...

0000dd98 <__pow5mult>:
    dd98:	2303      	movs	r3, #3
    dd9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dd9c:	4013      	ands	r3, r2
    dd9e:	0005      	movs	r5, r0
    dda0:	000e      	movs	r6, r1
    dda2:	0014      	movs	r4, r2
    dda4:	2b00      	cmp	r3, #0
    dda6:	d008      	beq.n	ddba <__pow5mult+0x22>
    dda8:	4922      	ldr	r1, [pc, #136]	; (de34 <__pow5mult+0x9c>)
    ddaa:	3b01      	subs	r3, #1
    ddac:	009a      	lsls	r2, r3, #2
    ddae:	5852      	ldr	r2, [r2, r1]
    ddb0:	2300      	movs	r3, #0
    ddb2:	0031      	movs	r1, r6
    ddb4:	f7ff fed2 	bl	db5c <__multadd>
    ddb8:	0006      	movs	r6, r0
    ddba:	10a3      	asrs	r3, r4, #2
    ddbc:	9301      	str	r3, [sp, #4]
    ddbe:	d036      	beq.n	de2e <__pow5mult+0x96>
    ddc0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    ddc2:	2c00      	cmp	r4, #0
    ddc4:	d107      	bne.n	ddd6 <__pow5mult+0x3e>
    ddc6:	2010      	movs	r0, #16
    ddc8:	f7fd f828 	bl	ae1c <malloc>
    ddcc:	6268      	str	r0, [r5, #36]	; 0x24
    ddce:	6044      	str	r4, [r0, #4]
    ddd0:	6084      	str	r4, [r0, #8]
    ddd2:	6004      	str	r4, [r0, #0]
    ddd4:	60c4      	str	r4, [r0, #12]
    ddd6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ddd8:	68bc      	ldr	r4, [r7, #8]
    ddda:	2c00      	cmp	r4, #0
    dddc:	d107      	bne.n	ddee <__pow5mult+0x56>
    ddde:	4916      	ldr	r1, [pc, #88]	; (de38 <__pow5mult+0xa0>)
    dde0:	0028      	movs	r0, r5
    dde2:	f7ff ff40 	bl	dc66 <__i2b>
    dde6:	2300      	movs	r3, #0
    dde8:	0004      	movs	r4, r0
    ddea:	60b8      	str	r0, [r7, #8]
    ddec:	6003      	str	r3, [r0, #0]
    ddee:	2201      	movs	r2, #1
    ddf0:	9b01      	ldr	r3, [sp, #4]
    ddf2:	4213      	tst	r3, r2
    ddf4:	d00a      	beq.n	de0c <__pow5mult+0x74>
    ddf6:	0031      	movs	r1, r6
    ddf8:	0022      	movs	r2, r4
    ddfa:	0028      	movs	r0, r5
    ddfc:	f7ff ff3c 	bl	dc78 <__multiply>
    de00:	0007      	movs	r7, r0
    de02:	0031      	movs	r1, r6
    de04:	0028      	movs	r0, r5
    de06:	f7ff fe90 	bl	db2a <_Bfree>
    de0a:	003e      	movs	r6, r7
    de0c:	9b01      	ldr	r3, [sp, #4]
    de0e:	105b      	asrs	r3, r3, #1
    de10:	9301      	str	r3, [sp, #4]
    de12:	d00c      	beq.n	de2e <__pow5mult+0x96>
    de14:	6820      	ldr	r0, [r4, #0]
    de16:	2800      	cmp	r0, #0
    de18:	d107      	bne.n	de2a <__pow5mult+0x92>
    de1a:	0022      	movs	r2, r4
    de1c:	0021      	movs	r1, r4
    de1e:	0028      	movs	r0, r5
    de20:	f7ff ff2a 	bl	dc78 <__multiply>
    de24:	2300      	movs	r3, #0
    de26:	6020      	str	r0, [r4, #0]
    de28:	6003      	str	r3, [r0, #0]
    de2a:	0004      	movs	r4, r0
    de2c:	e7df      	b.n	ddee <__pow5mult+0x56>
    de2e:	0030      	movs	r0, r6
    de30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    de32:	46c0      	nop			; (mov r8, r8)
    de34:	00010458 	.word	0x00010458
    de38:	00000271 	.word	0x00000271

0000de3c <__lshift>:
    de3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    de3e:	000d      	movs	r5, r1
    de40:	0017      	movs	r7, r2
    de42:	692b      	ldr	r3, [r5, #16]
    de44:	1154      	asrs	r4, r2, #5
    de46:	b085      	sub	sp, #20
    de48:	18e3      	adds	r3, r4, r3
    de4a:	9302      	str	r3, [sp, #8]
    de4c:	3301      	adds	r3, #1
    de4e:	9301      	str	r3, [sp, #4]
    de50:	6849      	ldr	r1, [r1, #4]
    de52:	68ab      	ldr	r3, [r5, #8]
    de54:	9003      	str	r0, [sp, #12]
    de56:	9a01      	ldr	r2, [sp, #4]
    de58:	4293      	cmp	r3, r2
    de5a:	db34      	blt.n	dec6 <__lshift+0x8a>
    de5c:	9803      	ldr	r0, [sp, #12]
    de5e:	f7ff fe2c 	bl	daba <_Balloc>
    de62:	2300      	movs	r3, #0
    de64:	0002      	movs	r2, r0
    de66:	0006      	movs	r6, r0
    de68:	0019      	movs	r1, r3
    de6a:	3214      	adds	r2, #20
    de6c:	42a3      	cmp	r3, r4
    de6e:	db2d      	blt.n	decc <__lshift+0x90>
    de70:	43e3      	mvns	r3, r4
    de72:	17db      	asrs	r3, r3, #31
    de74:	401c      	ands	r4, r3
    de76:	002b      	movs	r3, r5
    de78:	211f      	movs	r1, #31
    de7a:	00a4      	lsls	r4, r4, #2
    de7c:	1914      	adds	r4, r2, r4
    de7e:	692a      	ldr	r2, [r5, #16]
    de80:	3314      	adds	r3, #20
    de82:	0092      	lsls	r2, r2, #2
    de84:	189a      	adds	r2, r3, r2
    de86:	400f      	ands	r7, r1
    de88:	d024      	beq.n	ded4 <__lshift+0x98>
    de8a:	3101      	adds	r1, #1
    de8c:	1bc9      	subs	r1, r1, r7
    de8e:	468c      	mov	ip, r1
    de90:	2100      	movs	r1, #0
    de92:	6818      	ldr	r0, [r3, #0]
    de94:	40b8      	lsls	r0, r7
    de96:	4301      	orrs	r1, r0
    de98:	4660      	mov	r0, ip
    de9a:	6021      	str	r1, [r4, #0]
    de9c:	cb02      	ldmia	r3!, {r1}
    de9e:	3404      	adds	r4, #4
    dea0:	40c1      	lsrs	r1, r0
    dea2:	429a      	cmp	r2, r3
    dea4:	d8f5      	bhi.n	de92 <__lshift+0x56>
    dea6:	6021      	str	r1, [r4, #0]
    dea8:	2900      	cmp	r1, #0
    deaa:	d002      	beq.n	deb2 <__lshift+0x76>
    deac:	9b02      	ldr	r3, [sp, #8]
    deae:	3302      	adds	r3, #2
    deb0:	9301      	str	r3, [sp, #4]
    deb2:	9b01      	ldr	r3, [sp, #4]
    deb4:	9803      	ldr	r0, [sp, #12]
    deb6:	3b01      	subs	r3, #1
    deb8:	6133      	str	r3, [r6, #16]
    deba:	0029      	movs	r1, r5
    debc:	f7ff fe35 	bl	db2a <_Bfree>
    dec0:	0030      	movs	r0, r6
    dec2:	b005      	add	sp, #20
    dec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dec6:	3101      	adds	r1, #1
    dec8:	005b      	lsls	r3, r3, #1
    deca:	e7c4      	b.n	de56 <__lshift+0x1a>
    decc:	0098      	lsls	r0, r3, #2
    dece:	5011      	str	r1, [r2, r0]
    ded0:	3301      	adds	r3, #1
    ded2:	e7cb      	b.n	de6c <__lshift+0x30>
    ded4:	cb02      	ldmia	r3!, {r1}
    ded6:	c402      	stmia	r4!, {r1}
    ded8:	429a      	cmp	r2, r3
    deda:	d8fb      	bhi.n	ded4 <__lshift+0x98>
    dedc:	e7e9      	b.n	deb2 <__lshift+0x76>

0000dede <__mcmp>:
    dede:	690a      	ldr	r2, [r1, #16]
    dee0:	6903      	ldr	r3, [r0, #16]
    dee2:	b530      	push	{r4, r5, lr}
    dee4:	1a9b      	subs	r3, r3, r2
    dee6:	d10e      	bne.n	df06 <__mcmp+0x28>
    dee8:	0092      	lsls	r2, r2, #2
    deea:	3014      	adds	r0, #20
    deec:	3114      	adds	r1, #20
    deee:	1884      	adds	r4, r0, r2
    def0:	1889      	adds	r1, r1, r2
    def2:	3c04      	subs	r4, #4
    def4:	3904      	subs	r1, #4
    def6:	6822      	ldr	r2, [r4, #0]
    def8:	680d      	ldr	r5, [r1, #0]
    defa:	42aa      	cmp	r2, r5
    defc:	d005      	beq.n	df0a <__mcmp+0x2c>
    defe:	42aa      	cmp	r2, r5
    df00:	4192      	sbcs	r2, r2
    df02:	2301      	movs	r3, #1
    df04:	4313      	orrs	r3, r2
    df06:	0018      	movs	r0, r3
    df08:	bd30      	pop	{r4, r5, pc}
    df0a:	42a0      	cmp	r0, r4
    df0c:	d3f1      	bcc.n	def2 <__mcmp+0x14>
    df0e:	e7fa      	b.n	df06 <__mcmp+0x28>

0000df10 <__mdiff>:
    df10:	b5f0      	push	{r4, r5, r6, r7, lr}
    df12:	000d      	movs	r5, r1
    df14:	b085      	sub	sp, #20
    df16:	0007      	movs	r7, r0
    df18:	0011      	movs	r1, r2
    df1a:	0028      	movs	r0, r5
    df1c:	0014      	movs	r4, r2
    df1e:	f7ff ffde 	bl	dede <__mcmp>
    df22:	1e06      	subs	r6, r0, #0
    df24:	d108      	bne.n	df38 <__mdiff+0x28>
    df26:	0001      	movs	r1, r0
    df28:	0038      	movs	r0, r7
    df2a:	f7ff fdc6 	bl	daba <_Balloc>
    df2e:	2301      	movs	r3, #1
    df30:	6146      	str	r6, [r0, #20]
    df32:	6103      	str	r3, [r0, #16]
    df34:	b005      	add	sp, #20
    df36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df38:	2301      	movs	r3, #1
    df3a:	9301      	str	r3, [sp, #4]
    df3c:	2800      	cmp	r0, #0
    df3e:	db04      	blt.n	df4a <__mdiff+0x3a>
    df40:	0023      	movs	r3, r4
    df42:	002c      	movs	r4, r5
    df44:	001d      	movs	r5, r3
    df46:	2300      	movs	r3, #0
    df48:	9301      	str	r3, [sp, #4]
    df4a:	6861      	ldr	r1, [r4, #4]
    df4c:	0038      	movs	r0, r7
    df4e:	f7ff fdb4 	bl	daba <_Balloc>
    df52:	002f      	movs	r7, r5
    df54:	2200      	movs	r2, #0
    df56:	9b01      	ldr	r3, [sp, #4]
    df58:	6926      	ldr	r6, [r4, #16]
    df5a:	60c3      	str	r3, [r0, #12]
    df5c:	3414      	adds	r4, #20
    df5e:	00b3      	lsls	r3, r6, #2
    df60:	18e3      	adds	r3, r4, r3
    df62:	9302      	str	r3, [sp, #8]
    df64:	692b      	ldr	r3, [r5, #16]
    df66:	3714      	adds	r7, #20
    df68:	009b      	lsls	r3, r3, #2
    df6a:	18fb      	adds	r3, r7, r3
    df6c:	9303      	str	r3, [sp, #12]
    df6e:	0003      	movs	r3, r0
    df70:	4694      	mov	ip, r2
    df72:	3314      	adds	r3, #20
    df74:	cc20      	ldmia	r4!, {r5}
    df76:	cf04      	ldmia	r7!, {r2}
    df78:	9201      	str	r2, [sp, #4]
    df7a:	b2aa      	uxth	r2, r5
    df7c:	4494      	add	ip, r2
    df7e:	466a      	mov	r2, sp
    df80:	4661      	mov	r1, ip
    df82:	8892      	ldrh	r2, [r2, #4]
    df84:	0c2d      	lsrs	r5, r5, #16
    df86:	1a8a      	subs	r2, r1, r2
    df88:	9901      	ldr	r1, [sp, #4]
    df8a:	0c09      	lsrs	r1, r1, #16
    df8c:	1a69      	subs	r1, r5, r1
    df8e:	1415      	asrs	r5, r2, #16
    df90:	1949      	adds	r1, r1, r5
    df92:	140d      	asrs	r5, r1, #16
    df94:	b292      	uxth	r2, r2
    df96:	0409      	lsls	r1, r1, #16
    df98:	430a      	orrs	r2, r1
    df9a:	601a      	str	r2, [r3, #0]
    df9c:	9a03      	ldr	r2, [sp, #12]
    df9e:	46ac      	mov	ip, r5
    dfa0:	3304      	adds	r3, #4
    dfa2:	42ba      	cmp	r2, r7
    dfa4:	d8e6      	bhi.n	df74 <__mdiff+0x64>
    dfa6:	9902      	ldr	r1, [sp, #8]
    dfa8:	001a      	movs	r2, r3
    dfaa:	428c      	cmp	r4, r1
    dfac:	d305      	bcc.n	dfba <__mdiff+0xaa>
    dfae:	3a04      	subs	r2, #4
    dfb0:	6813      	ldr	r3, [r2, #0]
    dfb2:	2b00      	cmp	r3, #0
    dfb4:	d00e      	beq.n	dfd4 <__mdiff+0xc4>
    dfb6:	6106      	str	r6, [r0, #16]
    dfb8:	e7bc      	b.n	df34 <__mdiff+0x24>
    dfba:	cc04      	ldmia	r4!, {r2}
    dfbc:	b291      	uxth	r1, r2
    dfbe:	4461      	add	r1, ip
    dfc0:	140d      	asrs	r5, r1, #16
    dfc2:	0c12      	lsrs	r2, r2, #16
    dfc4:	1952      	adds	r2, r2, r5
    dfc6:	1415      	asrs	r5, r2, #16
    dfc8:	b289      	uxth	r1, r1
    dfca:	0412      	lsls	r2, r2, #16
    dfcc:	430a      	orrs	r2, r1
    dfce:	46ac      	mov	ip, r5
    dfd0:	c304      	stmia	r3!, {r2}
    dfd2:	e7e8      	b.n	dfa6 <__mdiff+0x96>
    dfd4:	3e01      	subs	r6, #1
    dfd6:	e7ea      	b.n	dfae <__mdiff+0x9e>

0000dfd8 <__d2b>:
    dfd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dfda:	001d      	movs	r5, r3
    dfdc:	2101      	movs	r1, #1
    dfde:	9f08      	ldr	r7, [sp, #32]
    dfe0:	0014      	movs	r4, r2
    dfe2:	f7ff fd6a 	bl	daba <_Balloc>
    dfe6:	032b      	lsls	r3, r5, #12
    dfe8:	006d      	lsls	r5, r5, #1
    dfea:	0006      	movs	r6, r0
    dfec:	0b1b      	lsrs	r3, r3, #12
    dfee:	0d6d      	lsrs	r5, r5, #21
    dff0:	d124      	bne.n	e03c <__d2b+0x64>
    dff2:	9301      	str	r3, [sp, #4]
    dff4:	2c00      	cmp	r4, #0
    dff6:	d027      	beq.n	e048 <__d2b+0x70>
    dff8:	4668      	mov	r0, sp
    dffa:	9400      	str	r4, [sp, #0]
    dffc:	f7ff fe04 	bl	dc08 <__lo0bits>
    e000:	9c00      	ldr	r4, [sp, #0]
    e002:	2800      	cmp	r0, #0
    e004:	d01e      	beq.n	e044 <__d2b+0x6c>
    e006:	9b01      	ldr	r3, [sp, #4]
    e008:	2120      	movs	r1, #32
    e00a:	001a      	movs	r2, r3
    e00c:	1a09      	subs	r1, r1, r0
    e00e:	408a      	lsls	r2, r1
    e010:	40c3      	lsrs	r3, r0
    e012:	4322      	orrs	r2, r4
    e014:	6172      	str	r2, [r6, #20]
    e016:	9301      	str	r3, [sp, #4]
    e018:	9c01      	ldr	r4, [sp, #4]
    e01a:	61b4      	str	r4, [r6, #24]
    e01c:	1e63      	subs	r3, r4, #1
    e01e:	419c      	sbcs	r4, r3
    e020:	3401      	adds	r4, #1
    e022:	6134      	str	r4, [r6, #16]
    e024:	2d00      	cmp	r5, #0
    e026:	d018      	beq.n	e05a <__d2b+0x82>
    e028:	4b12      	ldr	r3, [pc, #72]	; (e074 <__d2b+0x9c>)
    e02a:	18ed      	adds	r5, r5, r3
    e02c:	2335      	movs	r3, #53	; 0x35
    e02e:	182d      	adds	r5, r5, r0
    e030:	603d      	str	r5, [r7, #0]
    e032:	1a18      	subs	r0, r3, r0
    e034:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e036:	6018      	str	r0, [r3, #0]
    e038:	0030      	movs	r0, r6
    e03a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e03c:	2280      	movs	r2, #128	; 0x80
    e03e:	0352      	lsls	r2, r2, #13
    e040:	4313      	orrs	r3, r2
    e042:	e7d6      	b.n	dff2 <__d2b+0x1a>
    e044:	6174      	str	r4, [r6, #20]
    e046:	e7e7      	b.n	e018 <__d2b+0x40>
    e048:	a801      	add	r0, sp, #4
    e04a:	f7ff fddd 	bl	dc08 <__lo0bits>
    e04e:	2401      	movs	r4, #1
    e050:	9b01      	ldr	r3, [sp, #4]
    e052:	6134      	str	r4, [r6, #16]
    e054:	6173      	str	r3, [r6, #20]
    e056:	3020      	adds	r0, #32
    e058:	e7e4      	b.n	e024 <__d2b+0x4c>
    e05a:	4b07      	ldr	r3, [pc, #28]	; (e078 <__d2b+0xa0>)
    e05c:	18c0      	adds	r0, r0, r3
    e05e:	4b07      	ldr	r3, [pc, #28]	; (e07c <__d2b+0xa4>)
    e060:	6038      	str	r0, [r7, #0]
    e062:	18e3      	adds	r3, r4, r3
    e064:	009b      	lsls	r3, r3, #2
    e066:	18f3      	adds	r3, r6, r3
    e068:	6958      	ldr	r0, [r3, #20]
    e06a:	f7ff fdb3 	bl	dbd4 <__hi0bits>
    e06e:	0164      	lsls	r4, r4, #5
    e070:	1a20      	subs	r0, r4, r0
    e072:	e7df      	b.n	e034 <__d2b+0x5c>
    e074:	fffffbcd 	.word	0xfffffbcd
    e078:	fffffbce 	.word	0xfffffbce
    e07c:	3fffffff 	.word	0x3fffffff

0000e080 <_calloc_r>:
    e080:	434a      	muls	r2, r1
    e082:	b570      	push	{r4, r5, r6, lr}
    e084:	0011      	movs	r1, r2
    e086:	0014      	movs	r4, r2
    e088:	f7fd f9b2 	bl	b3f0 <_malloc_r>
    e08c:	1e05      	subs	r5, r0, #0
    e08e:	d003      	beq.n	e098 <_calloc_r+0x18>
    e090:	0022      	movs	r2, r4
    e092:	2100      	movs	r1, #0
    e094:	f7fc ff03 	bl	ae9e <memset>
    e098:	0028      	movs	r0, r5
    e09a:	bd70      	pop	{r4, r5, r6, pc}

0000e09c <_realloc_r>:
    e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e09e:	0007      	movs	r7, r0
    e0a0:	000d      	movs	r5, r1
    e0a2:	0016      	movs	r6, r2
    e0a4:	2900      	cmp	r1, #0
    e0a6:	d105      	bne.n	e0b4 <_realloc_r+0x18>
    e0a8:	0011      	movs	r1, r2
    e0aa:	f7fd f9a1 	bl	b3f0 <_malloc_r>
    e0ae:	0004      	movs	r4, r0
    e0b0:	0020      	movs	r0, r4
    e0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e0b4:	2a00      	cmp	r2, #0
    e0b6:	d103      	bne.n	e0c0 <_realloc_r+0x24>
    e0b8:	f7fd f950 	bl	b35c <_free_r>
    e0bc:	0034      	movs	r4, r6
    e0be:	e7f7      	b.n	e0b0 <_realloc_r+0x14>
    e0c0:	f000 fb44 	bl	e74c <_malloc_usable_size_r>
    e0c4:	002c      	movs	r4, r5
    e0c6:	4286      	cmp	r6, r0
    e0c8:	d9f2      	bls.n	e0b0 <_realloc_r+0x14>
    e0ca:	0031      	movs	r1, r6
    e0cc:	0038      	movs	r0, r7
    e0ce:	f7fd f98f 	bl	b3f0 <_malloc_r>
    e0d2:	1e04      	subs	r4, r0, #0
    e0d4:	d0ec      	beq.n	e0b0 <_realloc_r+0x14>
    e0d6:	0029      	movs	r1, r5
    e0d8:	0032      	movs	r2, r6
    e0da:	f7fc fec5 	bl	ae68 <memcpy>
    e0de:	0029      	movs	r1, r5
    e0e0:	0038      	movs	r0, r7
    e0e2:	f7fd f93b 	bl	b35c <_free_r>
    e0e6:	e7e3      	b.n	e0b0 <_realloc_r+0x14>

0000e0e8 <__ssputs_r>:
    e0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0ea:	688e      	ldr	r6, [r1, #8]
    e0ec:	b085      	sub	sp, #20
    e0ee:	0007      	movs	r7, r0
    e0f0:	000c      	movs	r4, r1
    e0f2:	9203      	str	r2, [sp, #12]
    e0f4:	9301      	str	r3, [sp, #4]
    e0f6:	429e      	cmp	r6, r3
    e0f8:	d839      	bhi.n	e16e <__ssputs_r+0x86>
    e0fa:	2390      	movs	r3, #144	; 0x90
    e0fc:	898a      	ldrh	r2, [r1, #12]
    e0fe:	00db      	lsls	r3, r3, #3
    e100:	421a      	tst	r2, r3
    e102:	d034      	beq.n	e16e <__ssputs_r+0x86>
    e104:	2503      	movs	r5, #3
    e106:	6909      	ldr	r1, [r1, #16]
    e108:	6823      	ldr	r3, [r4, #0]
    e10a:	1a5b      	subs	r3, r3, r1
    e10c:	9302      	str	r3, [sp, #8]
    e10e:	6963      	ldr	r3, [r4, #20]
    e110:	9802      	ldr	r0, [sp, #8]
    e112:	435d      	muls	r5, r3
    e114:	0feb      	lsrs	r3, r5, #31
    e116:	195d      	adds	r5, r3, r5
    e118:	9b01      	ldr	r3, [sp, #4]
    e11a:	106d      	asrs	r5, r5, #1
    e11c:	3301      	adds	r3, #1
    e11e:	181b      	adds	r3, r3, r0
    e120:	42ab      	cmp	r3, r5
    e122:	d900      	bls.n	e126 <__ssputs_r+0x3e>
    e124:	001d      	movs	r5, r3
    e126:	0553      	lsls	r3, r2, #21
    e128:	d532      	bpl.n	e190 <__ssputs_r+0xa8>
    e12a:	0029      	movs	r1, r5
    e12c:	0038      	movs	r0, r7
    e12e:	f7fd f95f 	bl	b3f0 <_malloc_r>
    e132:	1e06      	subs	r6, r0, #0
    e134:	d109      	bne.n	e14a <__ssputs_r+0x62>
    e136:	230c      	movs	r3, #12
    e138:	603b      	str	r3, [r7, #0]
    e13a:	2340      	movs	r3, #64	; 0x40
    e13c:	2001      	movs	r0, #1
    e13e:	89a2      	ldrh	r2, [r4, #12]
    e140:	4240      	negs	r0, r0
    e142:	4313      	orrs	r3, r2
    e144:	81a3      	strh	r3, [r4, #12]
    e146:	b005      	add	sp, #20
    e148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e14a:	9a02      	ldr	r2, [sp, #8]
    e14c:	6921      	ldr	r1, [r4, #16]
    e14e:	f7fc fe8b 	bl	ae68 <memcpy>
    e152:	89a3      	ldrh	r3, [r4, #12]
    e154:	4a14      	ldr	r2, [pc, #80]	; (e1a8 <__ssputs_r+0xc0>)
    e156:	401a      	ands	r2, r3
    e158:	2380      	movs	r3, #128	; 0x80
    e15a:	4313      	orrs	r3, r2
    e15c:	81a3      	strh	r3, [r4, #12]
    e15e:	9b02      	ldr	r3, [sp, #8]
    e160:	6126      	str	r6, [r4, #16]
    e162:	18f6      	adds	r6, r6, r3
    e164:	6026      	str	r6, [r4, #0]
    e166:	6165      	str	r5, [r4, #20]
    e168:	9e01      	ldr	r6, [sp, #4]
    e16a:	1aed      	subs	r5, r5, r3
    e16c:	60a5      	str	r5, [r4, #8]
    e16e:	9b01      	ldr	r3, [sp, #4]
    e170:	42b3      	cmp	r3, r6
    e172:	d200      	bcs.n	e176 <__ssputs_r+0x8e>
    e174:	001e      	movs	r6, r3
    e176:	0032      	movs	r2, r6
    e178:	9903      	ldr	r1, [sp, #12]
    e17a:	6820      	ldr	r0, [r4, #0]
    e17c:	f7fc fe7d 	bl	ae7a <memmove>
    e180:	68a3      	ldr	r3, [r4, #8]
    e182:	2000      	movs	r0, #0
    e184:	1b9b      	subs	r3, r3, r6
    e186:	60a3      	str	r3, [r4, #8]
    e188:	6823      	ldr	r3, [r4, #0]
    e18a:	199e      	adds	r6, r3, r6
    e18c:	6026      	str	r6, [r4, #0]
    e18e:	e7da      	b.n	e146 <__ssputs_r+0x5e>
    e190:	002a      	movs	r2, r5
    e192:	0038      	movs	r0, r7
    e194:	f7ff ff82 	bl	e09c <_realloc_r>
    e198:	1e06      	subs	r6, r0, #0
    e19a:	d1e0      	bne.n	e15e <__ssputs_r+0x76>
    e19c:	6921      	ldr	r1, [r4, #16]
    e19e:	0038      	movs	r0, r7
    e1a0:	f7fd f8dc 	bl	b35c <_free_r>
    e1a4:	e7c7      	b.n	e136 <__ssputs_r+0x4e>
    e1a6:	46c0      	nop			; (mov r8, r8)
    e1a8:	fffffb7f 	.word	0xfffffb7f

0000e1ac <_svfiprintf_r>:
    e1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1ae:	b09f      	sub	sp, #124	; 0x7c
    e1b0:	9002      	str	r0, [sp, #8]
    e1b2:	9305      	str	r3, [sp, #20]
    e1b4:	898b      	ldrh	r3, [r1, #12]
    e1b6:	000f      	movs	r7, r1
    e1b8:	0016      	movs	r6, r2
    e1ba:	061b      	lsls	r3, r3, #24
    e1bc:	d511      	bpl.n	e1e2 <_svfiprintf_r+0x36>
    e1be:	690b      	ldr	r3, [r1, #16]
    e1c0:	2b00      	cmp	r3, #0
    e1c2:	d10e      	bne.n	e1e2 <_svfiprintf_r+0x36>
    e1c4:	2140      	movs	r1, #64	; 0x40
    e1c6:	f7fd f913 	bl	b3f0 <_malloc_r>
    e1ca:	6038      	str	r0, [r7, #0]
    e1cc:	6138      	str	r0, [r7, #16]
    e1ce:	2800      	cmp	r0, #0
    e1d0:	d105      	bne.n	e1de <_svfiprintf_r+0x32>
    e1d2:	230c      	movs	r3, #12
    e1d4:	9a02      	ldr	r2, [sp, #8]
    e1d6:	3801      	subs	r0, #1
    e1d8:	6013      	str	r3, [r2, #0]
    e1da:	b01f      	add	sp, #124	; 0x7c
    e1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1de:	2340      	movs	r3, #64	; 0x40
    e1e0:	617b      	str	r3, [r7, #20]
    e1e2:	2300      	movs	r3, #0
    e1e4:	ad06      	add	r5, sp, #24
    e1e6:	616b      	str	r3, [r5, #20]
    e1e8:	3320      	adds	r3, #32
    e1ea:	766b      	strb	r3, [r5, #25]
    e1ec:	3310      	adds	r3, #16
    e1ee:	76ab      	strb	r3, [r5, #26]
    e1f0:	0034      	movs	r4, r6
    e1f2:	7823      	ldrb	r3, [r4, #0]
    e1f4:	2b00      	cmp	r3, #0
    e1f6:	d147      	bne.n	e288 <_svfiprintf_r+0xdc>
    e1f8:	1ba3      	subs	r3, r4, r6
    e1fa:	9304      	str	r3, [sp, #16]
    e1fc:	d00d      	beq.n	e21a <_svfiprintf_r+0x6e>
    e1fe:	1ba3      	subs	r3, r4, r6
    e200:	0032      	movs	r2, r6
    e202:	0039      	movs	r1, r7
    e204:	9802      	ldr	r0, [sp, #8]
    e206:	f7ff ff6f 	bl	e0e8 <__ssputs_r>
    e20a:	1c43      	adds	r3, r0, #1
    e20c:	d100      	bne.n	e210 <_svfiprintf_r+0x64>
    e20e:	e0b5      	b.n	e37c <_svfiprintf_r+0x1d0>
    e210:	696a      	ldr	r2, [r5, #20]
    e212:	9b04      	ldr	r3, [sp, #16]
    e214:	4694      	mov	ip, r2
    e216:	4463      	add	r3, ip
    e218:	616b      	str	r3, [r5, #20]
    e21a:	7823      	ldrb	r3, [r4, #0]
    e21c:	2b00      	cmp	r3, #0
    e21e:	d100      	bne.n	e222 <_svfiprintf_r+0x76>
    e220:	e0ac      	b.n	e37c <_svfiprintf_r+0x1d0>
    e222:	2201      	movs	r2, #1
    e224:	2300      	movs	r3, #0
    e226:	4252      	negs	r2, r2
    e228:	606a      	str	r2, [r5, #4]
    e22a:	a902      	add	r1, sp, #8
    e22c:	3254      	adds	r2, #84	; 0x54
    e22e:	1852      	adds	r2, r2, r1
    e230:	3401      	adds	r4, #1
    e232:	602b      	str	r3, [r5, #0]
    e234:	60eb      	str	r3, [r5, #12]
    e236:	60ab      	str	r3, [r5, #8]
    e238:	7013      	strb	r3, [r2, #0]
    e23a:	65ab      	str	r3, [r5, #88]	; 0x58
    e23c:	4e58      	ldr	r6, [pc, #352]	; (e3a0 <_svfiprintf_r+0x1f4>)
    e23e:	2205      	movs	r2, #5
    e240:	7821      	ldrb	r1, [r4, #0]
    e242:	0030      	movs	r0, r6
    e244:	f7ff fc2c 	bl	daa0 <memchr>
    e248:	1c62      	adds	r2, r4, #1
    e24a:	2800      	cmp	r0, #0
    e24c:	d120      	bne.n	e290 <_svfiprintf_r+0xe4>
    e24e:	6829      	ldr	r1, [r5, #0]
    e250:	06cb      	lsls	r3, r1, #27
    e252:	d504      	bpl.n	e25e <_svfiprintf_r+0xb2>
    e254:	2353      	movs	r3, #83	; 0x53
    e256:	ae02      	add	r6, sp, #8
    e258:	3020      	adds	r0, #32
    e25a:	199b      	adds	r3, r3, r6
    e25c:	7018      	strb	r0, [r3, #0]
    e25e:	070b      	lsls	r3, r1, #28
    e260:	d504      	bpl.n	e26c <_svfiprintf_r+0xc0>
    e262:	2353      	movs	r3, #83	; 0x53
    e264:	202b      	movs	r0, #43	; 0x2b
    e266:	ae02      	add	r6, sp, #8
    e268:	199b      	adds	r3, r3, r6
    e26a:	7018      	strb	r0, [r3, #0]
    e26c:	7823      	ldrb	r3, [r4, #0]
    e26e:	2b2a      	cmp	r3, #42	; 0x2a
    e270:	d016      	beq.n	e2a0 <_svfiprintf_r+0xf4>
    e272:	2000      	movs	r0, #0
    e274:	210a      	movs	r1, #10
    e276:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e278:	7822      	ldrb	r2, [r4, #0]
    e27a:	3a30      	subs	r2, #48	; 0x30
    e27c:	2a09      	cmp	r2, #9
    e27e:	d955      	bls.n	e32c <_svfiprintf_r+0x180>
    e280:	2800      	cmp	r0, #0
    e282:	d015      	beq.n	e2b0 <_svfiprintf_r+0x104>
    e284:	9309      	str	r3, [sp, #36]	; 0x24
    e286:	e013      	b.n	e2b0 <_svfiprintf_r+0x104>
    e288:	2b25      	cmp	r3, #37	; 0x25
    e28a:	d0b5      	beq.n	e1f8 <_svfiprintf_r+0x4c>
    e28c:	3401      	adds	r4, #1
    e28e:	e7b0      	b.n	e1f2 <_svfiprintf_r+0x46>
    e290:	2301      	movs	r3, #1
    e292:	1b80      	subs	r0, r0, r6
    e294:	4083      	lsls	r3, r0
    e296:	6829      	ldr	r1, [r5, #0]
    e298:	0014      	movs	r4, r2
    e29a:	430b      	orrs	r3, r1
    e29c:	602b      	str	r3, [r5, #0]
    e29e:	e7cd      	b.n	e23c <_svfiprintf_r+0x90>
    e2a0:	9b05      	ldr	r3, [sp, #20]
    e2a2:	1d18      	adds	r0, r3, #4
    e2a4:	681b      	ldr	r3, [r3, #0]
    e2a6:	9005      	str	r0, [sp, #20]
    e2a8:	2b00      	cmp	r3, #0
    e2aa:	db39      	blt.n	e320 <_svfiprintf_r+0x174>
    e2ac:	9309      	str	r3, [sp, #36]	; 0x24
    e2ae:	0014      	movs	r4, r2
    e2b0:	7823      	ldrb	r3, [r4, #0]
    e2b2:	2b2e      	cmp	r3, #46	; 0x2e
    e2b4:	d10b      	bne.n	e2ce <_svfiprintf_r+0x122>
    e2b6:	7863      	ldrb	r3, [r4, #1]
    e2b8:	1c62      	adds	r2, r4, #1
    e2ba:	2b2a      	cmp	r3, #42	; 0x2a
    e2bc:	d13e      	bne.n	e33c <_svfiprintf_r+0x190>
    e2be:	9b05      	ldr	r3, [sp, #20]
    e2c0:	3402      	adds	r4, #2
    e2c2:	1d1a      	adds	r2, r3, #4
    e2c4:	681b      	ldr	r3, [r3, #0]
    e2c6:	9205      	str	r2, [sp, #20]
    e2c8:	2b00      	cmp	r3, #0
    e2ca:	db34      	blt.n	e336 <_svfiprintf_r+0x18a>
    e2cc:	9307      	str	r3, [sp, #28]
    e2ce:	4e35      	ldr	r6, [pc, #212]	; (e3a4 <_svfiprintf_r+0x1f8>)
    e2d0:	7821      	ldrb	r1, [r4, #0]
    e2d2:	2203      	movs	r2, #3
    e2d4:	0030      	movs	r0, r6
    e2d6:	f7ff fbe3 	bl	daa0 <memchr>
    e2da:	2800      	cmp	r0, #0
    e2dc:	d006      	beq.n	e2ec <_svfiprintf_r+0x140>
    e2de:	2340      	movs	r3, #64	; 0x40
    e2e0:	1b80      	subs	r0, r0, r6
    e2e2:	4083      	lsls	r3, r0
    e2e4:	682a      	ldr	r2, [r5, #0]
    e2e6:	3401      	adds	r4, #1
    e2e8:	4313      	orrs	r3, r2
    e2ea:	602b      	str	r3, [r5, #0]
    e2ec:	7821      	ldrb	r1, [r4, #0]
    e2ee:	2206      	movs	r2, #6
    e2f0:	482d      	ldr	r0, [pc, #180]	; (e3a8 <_svfiprintf_r+0x1fc>)
    e2f2:	1c66      	adds	r6, r4, #1
    e2f4:	7629      	strb	r1, [r5, #24]
    e2f6:	f7ff fbd3 	bl	daa0 <memchr>
    e2fa:	2800      	cmp	r0, #0
    e2fc:	d046      	beq.n	e38c <_svfiprintf_r+0x1e0>
    e2fe:	4b2b      	ldr	r3, [pc, #172]	; (e3ac <_svfiprintf_r+0x200>)
    e300:	2b00      	cmp	r3, #0
    e302:	d12f      	bne.n	e364 <_svfiprintf_r+0x1b8>
    e304:	6829      	ldr	r1, [r5, #0]
    e306:	9b05      	ldr	r3, [sp, #20]
    e308:	2207      	movs	r2, #7
    e30a:	05c9      	lsls	r1, r1, #23
    e30c:	d528      	bpl.n	e360 <_svfiprintf_r+0x1b4>
    e30e:	189b      	adds	r3, r3, r2
    e310:	4393      	bics	r3, r2
    e312:	3308      	adds	r3, #8
    e314:	9305      	str	r3, [sp, #20]
    e316:	696b      	ldr	r3, [r5, #20]
    e318:	9a03      	ldr	r2, [sp, #12]
    e31a:	189b      	adds	r3, r3, r2
    e31c:	616b      	str	r3, [r5, #20]
    e31e:	e767      	b.n	e1f0 <_svfiprintf_r+0x44>
    e320:	425b      	negs	r3, r3
    e322:	60eb      	str	r3, [r5, #12]
    e324:	2302      	movs	r3, #2
    e326:	430b      	orrs	r3, r1
    e328:	602b      	str	r3, [r5, #0]
    e32a:	e7c0      	b.n	e2ae <_svfiprintf_r+0x102>
    e32c:	434b      	muls	r3, r1
    e32e:	3401      	adds	r4, #1
    e330:	189b      	adds	r3, r3, r2
    e332:	2001      	movs	r0, #1
    e334:	e7a0      	b.n	e278 <_svfiprintf_r+0xcc>
    e336:	2301      	movs	r3, #1
    e338:	425b      	negs	r3, r3
    e33a:	e7c7      	b.n	e2cc <_svfiprintf_r+0x120>
    e33c:	2300      	movs	r3, #0
    e33e:	0014      	movs	r4, r2
    e340:	200a      	movs	r0, #10
    e342:	001a      	movs	r2, r3
    e344:	606b      	str	r3, [r5, #4]
    e346:	7821      	ldrb	r1, [r4, #0]
    e348:	3930      	subs	r1, #48	; 0x30
    e34a:	2909      	cmp	r1, #9
    e34c:	d903      	bls.n	e356 <_svfiprintf_r+0x1aa>
    e34e:	2b00      	cmp	r3, #0
    e350:	d0bd      	beq.n	e2ce <_svfiprintf_r+0x122>
    e352:	9207      	str	r2, [sp, #28]
    e354:	e7bb      	b.n	e2ce <_svfiprintf_r+0x122>
    e356:	4342      	muls	r2, r0
    e358:	3401      	adds	r4, #1
    e35a:	1852      	adds	r2, r2, r1
    e35c:	2301      	movs	r3, #1
    e35e:	e7f2      	b.n	e346 <_svfiprintf_r+0x19a>
    e360:	3307      	adds	r3, #7
    e362:	e7d5      	b.n	e310 <_svfiprintf_r+0x164>
    e364:	ab05      	add	r3, sp, #20
    e366:	9300      	str	r3, [sp, #0]
    e368:	003a      	movs	r2, r7
    e36a:	4b11      	ldr	r3, [pc, #68]	; (e3b0 <_svfiprintf_r+0x204>)
    e36c:	0029      	movs	r1, r5
    e36e:	9802      	ldr	r0, [sp, #8]
    e370:	f7fd fa7c 	bl	b86c <_printf_float>
    e374:	9003      	str	r0, [sp, #12]
    e376:	9b03      	ldr	r3, [sp, #12]
    e378:	3301      	adds	r3, #1
    e37a:	d1cc      	bne.n	e316 <_svfiprintf_r+0x16a>
    e37c:	89bb      	ldrh	r3, [r7, #12]
    e37e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e380:	065b      	lsls	r3, r3, #25
    e382:	d400      	bmi.n	e386 <_svfiprintf_r+0x1da>
    e384:	e729      	b.n	e1da <_svfiprintf_r+0x2e>
    e386:	2001      	movs	r0, #1
    e388:	4240      	negs	r0, r0
    e38a:	e726      	b.n	e1da <_svfiprintf_r+0x2e>
    e38c:	ab05      	add	r3, sp, #20
    e38e:	9300      	str	r3, [sp, #0]
    e390:	003a      	movs	r2, r7
    e392:	4b07      	ldr	r3, [pc, #28]	; (e3b0 <_svfiprintf_r+0x204>)
    e394:	0029      	movs	r1, r5
    e396:	9802      	ldr	r0, [sp, #8]
    e398:	f7fd fd22 	bl	bde0 <_printf_i>
    e39c:	e7ea      	b.n	e374 <_svfiprintf_r+0x1c8>
    e39e:	46c0      	nop			; (mov r8, r8)
    e3a0:	00010118 	.word	0x00010118
    e3a4:	0001011e 	.word	0x0001011e
    e3a8:	00010122 	.word	0x00010122
    e3ac:	0000b86d 	.word	0x0000b86d
    e3b0:	0000e0e9 	.word	0x0000e0e9

0000e3b4 <_raise_r>:
    e3b4:	b570      	push	{r4, r5, r6, lr}
    e3b6:	0004      	movs	r4, r0
    e3b8:	000d      	movs	r5, r1
    e3ba:	291f      	cmp	r1, #31
    e3bc:	d904      	bls.n	e3c8 <_raise_r+0x14>
    e3be:	2316      	movs	r3, #22
    e3c0:	6003      	str	r3, [r0, #0]
    e3c2:	2001      	movs	r0, #1
    e3c4:	4240      	negs	r0, r0
    e3c6:	bd70      	pop	{r4, r5, r6, pc}
    e3c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e3ca:	2b00      	cmp	r3, #0
    e3cc:	d004      	beq.n	e3d8 <_raise_r+0x24>
    e3ce:	008a      	lsls	r2, r1, #2
    e3d0:	189b      	adds	r3, r3, r2
    e3d2:	681a      	ldr	r2, [r3, #0]
    e3d4:	2a00      	cmp	r2, #0
    e3d6:	d108      	bne.n	e3ea <_raise_r+0x36>
    e3d8:	0020      	movs	r0, r4
    e3da:	f000 f831 	bl	e440 <_getpid_r>
    e3de:	002a      	movs	r2, r5
    e3e0:	0001      	movs	r1, r0
    e3e2:	0020      	movs	r0, r4
    e3e4:	f000 f81a 	bl	e41c <_kill_r>
    e3e8:	e7ed      	b.n	e3c6 <_raise_r+0x12>
    e3ea:	2000      	movs	r0, #0
    e3ec:	2a01      	cmp	r2, #1
    e3ee:	d0ea      	beq.n	e3c6 <_raise_r+0x12>
    e3f0:	1c51      	adds	r1, r2, #1
    e3f2:	d103      	bne.n	e3fc <_raise_r+0x48>
    e3f4:	2316      	movs	r3, #22
    e3f6:	3001      	adds	r0, #1
    e3f8:	6023      	str	r3, [r4, #0]
    e3fa:	e7e4      	b.n	e3c6 <_raise_r+0x12>
    e3fc:	2400      	movs	r4, #0
    e3fe:	0028      	movs	r0, r5
    e400:	601c      	str	r4, [r3, #0]
    e402:	4790      	blx	r2
    e404:	0020      	movs	r0, r4
    e406:	e7de      	b.n	e3c6 <_raise_r+0x12>

0000e408 <raise>:
    e408:	b510      	push	{r4, lr}
    e40a:	4b03      	ldr	r3, [pc, #12]	; (e418 <raise+0x10>)
    e40c:	0001      	movs	r1, r0
    e40e:	6818      	ldr	r0, [r3, #0]
    e410:	f7ff ffd0 	bl	e3b4 <_raise_r>
    e414:	bd10      	pop	{r4, pc}
    e416:	46c0      	nop			; (mov r8, r8)
    e418:	200000b0 	.word	0x200000b0

0000e41c <_kill_r>:
    e41c:	2300      	movs	r3, #0
    e41e:	b570      	push	{r4, r5, r6, lr}
    e420:	4c06      	ldr	r4, [pc, #24]	; (e43c <_kill_r+0x20>)
    e422:	0005      	movs	r5, r0
    e424:	0008      	movs	r0, r1
    e426:	0011      	movs	r1, r2
    e428:	6023      	str	r3, [r4, #0]
    e42a:	f000 fd81 	bl	ef30 <_kill>
    e42e:	1c43      	adds	r3, r0, #1
    e430:	d103      	bne.n	e43a <_kill_r+0x1e>
    e432:	6823      	ldr	r3, [r4, #0]
    e434:	2b00      	cmp	r3, #0
    e436:	d000      	beq.n	e43a <_kill_r+0x1e>
    e438:	602b      	str	r3, [r5, #0]
    e43a:	bd70      	pop	{r4, r5, r6, pc}
    e43c:	20000f10 	.word	0x20000f10

0000e440 <_getpid_r>:
    e440:	b510      	push	{r4, lr}
    e442:	f000 fd65 	bl	ef10 <_getpid>
    e446:	bd10      	pop	{r4, pc}

0000e448 <siscanf>:
    e448:	b40e      	push	{r1, r2, r3}
    e44a:	2381      	movs	r3, #129	; 0x81
    e44c:	b570      	push	{r4, r5, r6, lr}
    e44e:	b09d      	sub	sp, #116	; 0x74
    e450:	ac02      	add	r4, sp, #8
    e452:	ad21      	add	r5, sp, #132	; 0x84
    e454:	009b      	lsls	r3, r3, #2
    e456:	cd40      	ldmia	r5!, {r6}
    e458:	81a3      	strh	r3, [r4, #12]
    e45a:	9002      	str	r0, [sp, #8]
    e45c:	9006      	str	r0, [sp, #24]
    e45e:	f7fd fe36 	bl	c0ce <strlen>
    e462:	4b0b      	ldr	r3, [pc, #44]	; (e490 <siscanf+0x48>)
    e464:	6060      	str	r0, [r4, #4]
    e466:	6263      	str	r3, [r4, #36]	; 0x24
    e468:	2300      	movs	r3, #0
    e46a:	6160      	str	r0, [r4, #20]
    e46c:	4809      	ldr	r0, [pc, #36]	; (e494 <siscanf+0x4c>)
    e46e:	6363      	str	r3, [r4, #52]	; 0x34
    e470:	64a3      	str	r3, [r4, #72]	; 0x48
    e472:	3b01      	subs	r3, #1
    e474:	81e3      	strh	r3, [r4, #14]
    e476:	0032      	movs	r2, r6
    e478:	002b      	movs	r3, r5
    e47a:	0021      	movs	r1, r4
    e47c:	6800      	ldr	r0, [r0, #0]
    e47e:	9501      	str	r5, [sp, #4]
    e480:	f000 f9c8 	bl	e814 <__ssvfiscanf_r>
    e484:	b01d      	add	sp, #116	; 0x74
    e486:	bc70      	pop	{r4, r5, r6}
    e488:	bc08      	pop	{r3}
    e48a:	b003      	add	sp, #12
    e48c:	4718      	bx	r3
    e48e:	46c0      	nop			; (mov r8, r8)
    e490:	0000e4c1 	.word	0x0000e4c1
    e494:	200000b0 	.word	0x200000b0

0000e498 <__sread>:
    e498:	b570      	push	{r4, r5, r6, lr}
    e49a:	000c      	movs	r4, r1
    e49c:	250e      	movs	r5, #14
    e49e:	5f49      	ldrsh	r1, [r1, r5]
    e4a0:	f000 fca2 	bl	ede8 <_read_r>
    e4a4:	2800      	cmp	r0, #0
    e4a6:	db03      	blt.n	e4b0 <__sread+0x18>
    e4a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e4aa:	181b      	adds	r3, r3, r0
    e4ac:	6563      	str	r3, [r4, #84]	; 0x54
    e4ae:	bd70      	pop	{r4, r5, r6, pc}
    e4b0:	89a3      	ldrh	r3, [r4, #12]
    e4b2:	4a02      	ldr	r2, [pc, #8]	; (e4bc <__sread+0x24>)
    e4b4:	4013      	ands	r3, r2
    e4b6:	81a3      	strh	r3, [r4, #12]
    e4b8:	e7f9      	b.n	e4ae <__sread+0x16>
    e4ba:	46c0      	nop			; (mov r8, r8)
    e4bc:	ffffefff 	.word	0xffffefff

0000e4c0 <__seofread>:
    e4c0:	2000      	movs	r0, #0
    e4c2:	4770      	bx	lr

0000e4c4 <__swrite>:
    e4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4c6:	001f      	movs	r7, r3
    e4c8:	898b      	ldrh	r3, [r1, #12]
    e4ca:	0005      	movs	r5, r0
    e4cc:	000c      	movs	r4, r1
    e4ce:	0016      	movs	r6, r2
    e4d0:	05db      	lsls	r3, r3, #23
    e4d2:	d505      	bpl.n	e4e0 <__swrite+0x1c>
    e4d4:	230e      	movs	r3, #14
    e4d6:	5ec9      	ldrsh	r1, [r1, r3]
    e4d8:	2200      	movs	r2, #0
    e4da:	2302      	movs	r3, #2
    e4dc:	f000 f922 	bl	e724 <_lseek_r>
    e4e0:	89a3      	ldrh	r3, [r4, #12]
    e4e2:	4a05      	ldr	r2, [pc, #20]	; (e4f8 <__swrite+0x34>)
    e4e4:	0028      	movs	r0, r5
    e4e6:	4013      	ands	r3, r2
    e4e8:	81a3      	strh	r3, [r4, #12]
    e4ea:	0032      	movs	r2, r6
    e4ec:	230e      	movs	r3, #14
    e4ee:	5ee1      	ldrsh	r1, [r4, r3]
    e4f0:	003b      	movs	r3, r7
    e4f2:	f000 f8cb 	bl	e68c <_write_r>
    e4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4f8:	ffffefff 	.word	0xffffefff

0000e4fc <__sseek>:
    e4fc:	b570      	push	{r4, r5, r6, lr}
    e4fe:	000c      	movs	r4, r1
    e500:	250e      	movs	r5, #14
    e502:	5f49      	ldrsh	r1, [r1, r5]
    e504:	f000 f90e 	bl	e724 <_lseek_r>
    e508:	89a3      	ldrh	r3, [r4, #12]
    e50a:	1c42      	adds	r2, r0, #1
    e50c:	d103      	bne.n	e516 <__sseek+0x1a>
    e50e:	4a05      	ldr	r2, [pc, #20]	; (e524 <__sseek+0x28>)
    e510:	4013      	ands	r3, r2
    e512:	81a3      	strh	r3, [r4, #12]
    e514:	bd70      	pop	{r4, r5, r6, pc}
    e516:	2280      	movs	r2, #128	; 0x80
    e518:	0152      	lsls	r2, r2, #5
    e51a:	4313      	orrs	r3, r2
    e51c:	81a3      	strh	r3, [r4, #12]
    e51e:	6560      	str	r0, [r4, #84]	; 0x54
    e520:	e7f8      	b.n	e514 <__sseek+0x18>
    e522:	46c0      	nop			; (mov r8, r8)
    e524:	ffffefff 	.word	0xffffefff

0000e528 <__sclose>:
    e528:	b510      	push	{r4, lr}
    e52a:	230e      	movs	r3, #14
    e52c:	5ec9      	ldrsh	r1, [r1, r3]
    e52e:	f000 f8c1 	bl	e6b4 <_close_r>
    e532:	bd10      	pop	{r4, pc}

0000e534 <_strtoul_l.isra.0>:
    e534:	b5f0      	push	{r4, r5, r6, r7, lr}
    e536:	001f      	movs	r7, r3
    e538:	000e      	movs	r6, r1
    e53a:	b087      	sub	sp, #28
    e53c:	9005      	str	r0, [sp, #20]
    e53e:	9103      	str	r1, [sp, #12]
    e540:	9201      	str	r2, [sp, #4]
    e542:	980c      	ldr	r0, [sp, #48]	; 0x30
    e544:	7834      	ldrb	r4, [r6, #0]
    e546:	f7fc fc57 	bl	adf8 <__locale_ctype_ptr_l>
    e54a:	2208      	movs	r2, #8
    e54c:	1900      	adds	r0, r0, r4
    e54e:	7843      	ldrb	r3, [r0, #1]
    e550:	1c75      	adds	r5, r6, #1
    e552:	4013      	ands	r3, r2
    e554:	d10c      	bne.n	e570 <_strtoul_l.isra.0+0x3c>
    e556:	2c2d      	cmp	r4, #45	; 0x2d
    e558:	d10c      	bne.n	e574 <_strtoul_l.isra.0+0x40>
    e55a:	3301      	adds	r3, #1
    e55c:	782c      	ldrb	r4, [r5, #0]
    e55e:	9302      	str	r3, [sp, #8]
    e560:	1cb5      	adds	r5, r6, #2
    e562:	2f00      	cmp	r7, #0
    e564:	d00c      	beq.n	e580 <_strtoul_l.isra.0+0x4c>
    e566:	2f10      	cmp	r7, #16
    e568:	d114      	bne.n	e594 <_strtoul_l.isra.0+0x60>
    e56a:	2c30      	cmp	r4, #48	; 0x30
    e56c:	d00a      	beq.n	e584 <_strtoul_l.isra.0+0x50>
    e56e:	e011      	b.n	e594 <_strtoul_l.isra.0+0x60>
    e570:	002e      	movs	r6, r5
    e572:	e7e6      	b.n	e542 <_strtoul_l.isra.0+0xe>
    e574:	9302      	str	r3, [sp, #8]
    e576:	2c2b      	cmp	r4, #43	; 0x2b
    e578:	d1f3      	bne.n	e562 <_strtoul_l.isra.0+0x2e>
    e57a:	782c      	ldrb	r4, [r5, #0]
    e57c:	1cb5      	adds	r5, r6, #2
    e57e:	e7f0      	b.n	e562 <_strtoul_l.isra.0+0x2e>
    e580:	2c30      	cmp	r4, #48	; 0x30
    e582:	d12f      	bne.n	e5e4 <_strtoul_l.isra.0+0xb0>
    e584:	2220      	movs	r2, #32
    e586:	782b      	ldrb	r3, [r5, #0]
    e588:	4393      	bics	r3, r2
    e58a:	2b58      	cmp	r3, #88	; 0x58
    e58c:	d154      	bne.n	e638 <_strtoul_l.isra.0+0x104>
    e58e:	2710      	movs	r7, #16
    e590:	786c      	ldrb	r4, [r5, #1]
    e592:	3502      	adds	r5, #2
    e594:	2001      	movs	r0, #1
    e596:	0039      	movs	r1, r7
    e598:	4240      	negs	r0, r0
    e59a:	f7f9 fb25 	bl	7be8 <__udivsi3>
    e59e:	0006      	movs	r6, r0
    e5a0:	2001      	movs	r0, #1
    e5a2:	0039      	movs	r1, r7
    e5a4:	4240      	negs	r0, r0
    e5a6:	f7f9 fba5 	bl	7cf4 <__aeabi_uidivmod>
    e5aa:	2300      	movs	r3, #0
    e5ac:	9104      	str	r1, [sp, #16]
    e5ae:	2101      	movs	r1, #1
    e5b0:	2201      	movs	r2, #1
    e5b2:	0018      	movs	r0, r3
    e5b4:	468c      	mov	ip, r1
    e5b6:	4252      	negs	r2, r2
    e5b8:	0021      	movs	r1, r4
    e5ba:	3930      	subs	r1, #48	; 0x30
    e5bc:	2909      	cmp	r1, #9
    e5be:	d813      	bhi.n	e5e8 <_strtoul_l.isra.0+0xb4>
    e5c0:	000c      	movs	r4, r1
    e5c2:	42a7      	cmp	r7, r4
    e5c4:	dd1e      	ble.n	e604 <_strtoul_l.isra.0+0xd0>
    e5c6:	2b00      	cmp	r3, #0
    e5c8:	db1a      	blt.n	e600 <_strtoul_l.isra.0+0xcc>
    e5ca:	0013      	movs	r3, r2
    e5cc:	4286      	cmp	r6, r0
    e5ce:	d306      	bcc.n	e5de <_strtoul_l.isra.0+0xaa>
    e5d0:	d102      	bne.n	e5d8 <_strtoul_l.isra.0+0xa4>
    e5d2:	9904      	ldr	r1, [sp, #16]
    e5d4:	42a1      	cmp	r1, r4
    e5d6:	db02      	blt.n	e5de <_strtoul_l.isra.0+0xaa>
    e5d8:	4663      	mov	r3, ip
    e5da:	4378      	muls	r0, r7
    e5dc:	1820      	adds	r0, r4, r0
    e5de:	782c      	ldrb	r4, [r5, #0]
    e5e0:	3501      	adds	r5, #1
    e5e2:	e7e9      	b.n	e5b8 <_strtoul_l.isra.0+0x84>
    e5e4:	270a      	movs	r7, #10
    e5e6:	e7d5      	b.n	e594 <_strtoul_l.isra.0+0x60>
    e5e8:	0021      	movs	r1, r4
    e5ea:	3941      	subs	r1, #65	; 0x41
    e5ec:	2919      	cmp	r1, #25
    e5ee:	d801      	bhi.n	e5f4 <_strtoul_l.isra.0+0xc0>
    e5f0:	3c37      	subs	r4, #55	; 0x37
    e5f2:	e7e6      	b.n	e5c2 <_strtoul_l.isra.0+0x8e>
    e5f4:	0021      	movs	r1, r4
    e5f6:	3961      	subs	r1, #97	; 0x61
    e5f8:	2919      	cmp	r1, #25
    e5fa:	d803      	bhi.n	e604 <_strtoul_l.isra.0+0xd0>
    e5fc:	3c57      	subs	r4, #87	; 0x57
    e5fe:	e7e0      	b.n	e5c2 <_strtoul_l.isra.0+0x8e>
    e600:	0013      	movs	r3, r2
    e602:	e7ec      	b.n	e5de <_strtoul_l.isra.0+0xaa>
    e604:	2b00      	cmp	r3, #0
    e606:	da09      	bge.n	e61c <_strtoul_l.isra.0+0xe8>
    e608:	2322      	movs	r3, #34	; 0x22
    e60a:	2001      	movs	r0, #1
    e60c:	9a05      	ldr	r2, [sp, #20]
    e60e:	4240      	negs	r0, r0
    e610:	6013      	str	r3, [r2, #0]
    e612:	9b01      	ldr	r3, [sp, #4]
    e614:	2b00      	cmp	r3, #0
    e616:	d10b      	bne.n	e630 <_strtoul_l.isra.0+0xfc>
    e618:	b007      	add	sp, #28
    e61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e61c:	9a02      	ldr	r2, [sp, #8]
    e61e:	2a00      	cmp	r2, #0
    e620:	d000      	beq.n	e624 <_strtoul_l.isra.0+0xf0>
    e622:	4240      	negs	r0, r0
    e624:	9a01      	ldr	r2, [sp, #4]
    e626:	2a00      	cmp	r2, #0
    e628:	d0f6      	beq.n	e618 <_strtoul_l.isra.0+0xe4>
    e62a:	9a03      	ldr	r2, [sp, #12]
    e62c:	2b00      	cmp	r3, #0
    e62e:	d000      	beq.n	e632 <_strtoul_l.isra.0+0xfe>
    e630:	1e6a      	subs	r2, r5, #1
    e632:	9b01      	ldr	r3, [sp, #4]
    e634:	601a      	str	r2, [r3, #0]
    e636:	e7ef      	b.n	e618 <_strtoul_l.isra.0+0xe4>
    e638:	2430      	movs	r4, #48	; 0x30
    e63a:	2f00      	cmp	r7, #0
    e63c:	d1aa      	bne.n	e594 <_strtoul_l.isra.0+0x60>
    e63e:	3708      	adds	r7, #8
    e640:	e7a8      	b.n	e594 <_strtoul_l.isra.0+0x60>
	...

0000e644 <_strtoul_r>:
    e644:	b513      	push	{r0, r1, r4, lr}
    e646:	4c05      	ldr	r4, [pc, #20]	; (e65c <_strtoul_r+0x18>)
    e648:	6824      	ldr	r4, [r4, #0]
    e64a:	6a24      	ldr	r4, [r4, #32]
    e64c:	2c00      	cmp	r4, #0
    e64e:	d100      	bne.n	e652 <_strtoul_r+0xe>
    e650:	4c03      	ldr	r4, [pc, #12]	; (e660 <_strtoul_r+0x1c>)
    e652:	9400      	str	r4, [sp, #0]
    e654:	f7ff ff6e 	bl	e534 <_strtoul_l.isra.0>
    e658:	bd16      	pop	{r1, r2, r4, pc}
    e65a:	46c0      	nop			; (mov r8, r8)
    e65c:	200000b0 	.word	0x200000b0
    e660:	20000114 	.word	0x20000114

0000e664 <strtoul>:
    e664:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e666:	0013      	movs	r3, r2
    e668:	4a06      	ldr	r2, [pc, #24]	; (e684 <strtoul+0x20>)
    e66a:	0005      	movs	r5, r0
    e66c:	6810      	ldr	r0, [r2, #0]
    e66e:	6a04      	ldr	r4, [r0, #32]
    e670:	2c00      	cmp	r4, #0
    e672:	d100      	bne.n	e676 <strtoul+0x12>
    e674:	4c04      	ldr	r4, [pc, #16]	; (e688 <strtoul+0x24>)
    e676:	000a      	movs	r2, r1
    e678:	9400      	str	r4, [sp, #0]
    e67a:	0029      	movs	r1, r5
    e67c:	f7ff ff5a 	bl	e534 <_strtoul_l.isra.0>
    e680:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e682:	46c0      	nop			; (mov r8, r8)
    e684:	200000b0 	.word	0x200000b0
    e688:	20000114 	.word	0x20000114

0000e68c <_write_r>:
    e68c:	b570      	push	{r4, r5, r6, lr}
    e68e:	0005      	movs	r5, r0
    e690:	0008      	movs	r0, r1
    e692:	0011      	movs	r1, r2
    e694:	2200      	movs	r2, #0
    e696:	4c06      	ldr	r4, [pc, #24]	; (e6b0 <_write_r+0x24>)
    e698:	6022      	str	r2, [r4, #0]
    e69a:	001a      	movs	r2, r3
    e69c:	f000 fc6e 	bl	ef7c <_write>
    e6a0:	1c43      	adds	r3, r0, #1
    e6a2:	d103      	bne.n	e6ac <_write_r+0x20>
    e6a4:	6823      	ldr	r3, [r4, #0]
    e6a6:	2b00      	cmp	r3, #0
    e6a8:	d000      	beq.n	e6ac <_write_r+0x20>
    e6aa:	602b      	str	r3, [r5, #0]
    e6ac:	bd70      	pop	{r4, r5, r6, pc}
    e6ae:	46c0      	nop			; (mov r8, r8)
    e6b0:	20000f10 	.word	0x20000f10

0000e6b4 <_close_r>:
    e6b4:	2300      	movs	r3, #0
    e6b6:	b570      	push	{r4, r5, r6, lr}
    e6b8:	4c06      	ldr	r4, [pc, #24]	; (e6d4 <_close_r+0x20>)
    e6ba:	0005      	movs	r5, r0
    e6bc:	0008      	movs	r0, r1
    e6be:	6023      	str	r3, [r4, #0]
    e6c0:	f000 fc16 	bl	eef0 <_close>
    e6c4:	1c43      	adds	r3, r0, #1
    e6c6:	d103      	bne.n	e6d0 <_close_r+0x1c>
    e6c8:	6823      	ldr	r3, [r4, #0]
    e6ca:	2b00      	cmp	r3, #0
    e6cc:	d000      	beq.n	e6d0 <_close_r+0x1c>
    e6ce:	602b      	str	r3, [r5, #0]
    e6d0:	bd70      	pop	{r4, r5, r6, pc}
    e6d2:	46c0      	nop			; (mov r8, r8)
    e6d4:	20000f10 	.word	0x20000f10

0000e6d8 <__env_lock>:
    e6d8:	4770      	bx	lr

0000e6da <__env_unlock>:
    e6da:	4770      	bx	lr

0000e6dc <_fstat_r>:
    e6dc:	2300      	movs	r3, #0
    e6de:	b570      	push	{r4, r5, r6, lr}
    e6e0:	4c06      	ldr	r4, [pc, #24]	; (e6fc <_fstat_r+0x20>)
    e6e2:	0005      	movs	r5, r0
    e6e4:	0008      	movs	r0, r1
    e6e6:	0011      	movs	r1, r2
    e6e8:	6023      	str	r3, [r4, #0]
    e6ea:	f000 fc09 	bl	ef00 <_fstat>
    e6ee:	1c43      	adds	r3, r0, #1
    e6f0:	d103      	bne.n	e6fa <_fstat_r+0x1e>
    e6f2:	6823      	ldr	r3, [r4, #0]
    e6f4:	2b00      	cmp	r3, #0
    e6f6:	d000      	beq.n	e6fa <_fstat_r+0x1e>
    e6f8:	602b      	str	r3, [r5, #0]
    e6fa:	bd70      	pop	{r4, r5, r6, pc}
    e6fc:	20000f10 	.word	0x20000f10

0000e700 <_isatty_r>:
    e700:	2300      	movs	r3, #0
    e702:	b570      	push	{r4, r5, r6, lr}
    e704:	4c06      	ldr	r4, [pc, #24]	; (e720 <_isatty_r+0x20>)
    e706:	0005      	movs	r5, r0
    e708:	0008      	movs	r0, r1
    e70a:	6023      	str	r3, [r4, #0]
    e70c:	f000 fc08 	bl	ef20 <_isatty>
    e710:	1c43      	adds	r3, r0, #1
    e712:	d103      	bne.n	e71c <_isatty_r+0x1c>
    e714:	6823      	ldr	r3, [r4, #0]
    e716:	2b00      	cmp	r3, #0
    e718:	d000      	beq.n	e71c <_isatty_r+0x1c>
    e71a:	602b      	str	r3, [r5, #0]
    e71c:	bd70      	pop	{r4, r5, r6, pc}
    e71e:	46c0      	nop			; (mov r8, r8)
    e720:	20000f10 	.word	0x20000f10

0000e724 <_lseek_r>:
    e724:	b570      	push	{r4, r5, r6, lr}
    e726:	0005      	movs	r5, r0
    e728:	0008      	movs	r0, r1
    e72a:	0011      	movs	r1, r2
    e72c:	2200      	movs	r2, #0
    e72e:	4c06      	ldr	r4, [pc, #24]	; (e748 <_lseek_r+0x24>)
    e730:	6022      	str	r2, [r4, #0]
    e732:	001a      	movs	r2, r3
    e734:	f000 fc04 	bl	ef40 <_lseek>
    e738:	1c43      	adds	r3, r0, #1
    e73a:	d103      	bne.n	e744 <_lseek_r+0x20>
    e73c:	6823      	ldr	r3, [r4, #0]
    e73e:	2b00      	cmp	r3, #0
    e740:	d000      	beq.n	e744 <_lseek_r+0x20>
    e742:	602b      	str	r3, [r5, #0]
    e744:	bd70      	pop	{r4, r5, r6, pc}
    e746:	46c0      	nop			; (mov r8, r8)
    e748:	20000f10 	.word	0x20000f10

0000e74c <_malloc_usable_size_r>:
    e74c:	1f0b      	subs	r3, r1, #4
    e74e:	681b      	ldr	r3, [r3, #0]
    e750:	1f18      	subs	r0, r3, #4
    e752:	2b00      	cmp	r3, #0
    e754:	da01      	bge.n	e75a <_malloc_usable_size_r+0xe>
    e756:	580b      	ldr	r3, [r1, r0]
    e758:	18c0      	adds	r0, r0, r3
    e75a:	4770      	bx	lr

0000e75c <_sungetc_r>:
    e75c:	b570      	push	{r4, r5, r6, lr}
    e75e:	0014      	movs	r4, r2
    e760:	1c4b      	adds	r3, r1, #1
    e762:	d103      	bne.n	e76c <_sungetc_r+0x10>
    e764:	2501      	movs	r5, #1
    e766:	426d      	negs	r5, r5
    e768:	0028      	movs	r0, r5
    e76a:	bd70      	pop	{r4, r5, r6, pc}
    e76c:	8993      	ldrh	r3, [r2, #12]
    e76e:	2220      	movs	r2, #32
    e770:	4393      	bics	r3, r2
    e772:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e774:	81a3      	strh	r3, [r4, #12]
    e776:	b2ce      	uxtb	r6, r1
    e778:	b2cd      	uxtb	r5, r1
    e77a:	6863      	ldr	r3, [r4, #4]
    e77c:	2a00      	cmp	r2, #0
    e77e:	d010      	beq.n	e7a2 <_sungetc_r+0x46>
    e780:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e782:	4293      	cmp	r3, r2
    e784:	da07      	bge.n	e796 <_sungetc_r+0x3a>
    e786:	6823      	ldr	r3, [r4, #0]
    e788:	3b01      	subs	r3, #1
    e78a:	6023      	str	r3, [r4, #0]
    e78c:	701e      	strb	r6, [r3, #0]
    e78e:	6863      	ldr	r3, [r4, #4]
    e790:	3301      	adds	r3, #1
    e792:	6063      	str	r3, [r4, #4]
    e794:	e7e8      	b.n	e768 <_sungetc_r+0xc>
    e796:	0021      	movs	r1, r4
    e798:	f000 fb6c 	bl	ee74 <__submore>
    e79c:	2800      	cmp	r0, #0
    e79e:	d0f2      	beq.n	e786 <_sungetc_r+0x2a>
    e7a0:	e7e0      	b.n	e764 <_sungetc_r+0x8>
    e7a2:	6921      	ldr	r1, [r4, #16]
    e7a4:	6822      	ldr	r2, [r4, #0]
    e7a6:	2900      	cmp	r1, #0
    e7a8:	d007      	beq.n	e7ba <_sungetc_r+0x5e>
    e7aa:	4291      	cmp	r1, r2
    e7ac:	d205      	bcs.n	e7ba <_sungetc_r+0x5e>
    e7ae:	1e51      	subs	r1, r2, #1
    e7b0:	7808      	ldrb	r0, [r1, #0]
    e7b2:	4285      	cmp	r5, r0
    e7b4:	d101      	bne.n	e7ba <_sungetc_r+0x5e>
    e7b6:	6021      	str	r1, [r4, #0]
    e7b8:	e7ea      	b.n	e790 <_sungetc_r+0x34>
    e7ba:	6423      	str	r3, [r4, #64]	; 0x40
    e7bc:	0023      	movs	r3, r4
    e7be:	3344      	adds	r3, #68	; 0x44
    e7c0:	6363      	str	r3, [r4, #52]	; 0x34
    e7c2:	2303      	movs	r3, #3
    e7c4:	63a3      	str	r3, [r4, #56]	; 0x38
    e7c6:	0023      	movs	r3, r4
    e7c8:	3346      	adds	r3, #70	; 0x46
    e7ca:	63e2      	str	r2, [r4, #60]	; 0x3c
    e7cc:	701e      	strb	r6, [r3, #0]
    e7ce:	6023      	str	r3, [r4, #0]
    e7d0:	2301      	movs	r3, #1
    e7d2:	e7de      	b.n	e792 <_sungetc_r+0x36>

0000e7d4 <__ssrefill_r>:
    e7d4:	b510      	push	{r4, lr}
    e7d6:	000c      	movs	r4, r1
    e7d8:	6b49      	ldr	r1, [r1, #52]	; 0x34
    e7da:	2900      	cmp	r1, #0
    e7dc:	d00e      	beq.n	e7fc <__ssrefill_r+0x28>
    e7de:	0023      	movs	r3, r4
    e7e0:	3344      	adds	r3, #68	; 0x44
    e7e2:	4299      	cmp	r1, r3
    e7e4:	d001      	beq.n	e7ea <__ssrefill_r+0x16>
    e7e6:	f7fc fdb9 	bl	b35c <_free_r>
    e7ea:	2000      	movs	r0, #0
    e7ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e7ee:	6360      	str	r0, [r4, #52]	; 0x34
    e7f0:	6063      	str	r3, [r4, #4]
    e7f2:	4283      	cmp	r3, r0
    e7f4:	d002      	beq.n	e7fc <__ssrefill_r+0x28>
    e7f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e7f8:	6023      	str	r3, [r4, #0]
    e7fa:	bd10      	pop	{r4, pc}
    e7fc:	6923      	ldr	r3, [r4, #16]
    e7fe:	2001      	movs	r0, #1
    e800:	6023      	str	r3, [r4, #0]
    e802:	2300      	movs	r3, #0
    e804:	89a2      	ldrh	r2, [r4, #12]
    e806:	6063      	str	r3, [r4, #4]
    e808:	3320      	adds	r3, #32
    e80a:	4313      	orrs	r3, r2
    e80c:	81a3      	strh	r3, [r4, #12]
    e80e:	4240      	negs	r0, r0
    e810:	e7f3      	b.n	e7fa <__ssrefill_r+0x26>
	...

0000e814 <__ssvfiscanf_r>:
    e814:	b5f0      	push	{r4, r5, r6, r7, lr}
    e816:	4cbd      	ldr	r4, [pc, #756]	; (eb0c <__ssvfiscanf_r+0x2f8>)
    e818:	2586      	movs	r5, #134	; 0x86
    e81a:	44a5      	add	sp, r4
    e81c:	9303      	str	r3, [sp, #12]
    e81e:	2300      	movs	r3, #0
    e820:	9348      	str	r3, [sp, #288]	; 0x120
    e822:	9349      	str	r3, [sp, #292]	; 0x124
    e824:	ab05      	add	r3, sp, #20
    e826:	934a      	str	r3, [sp, #296]	; 0x128
    e828:	23be      	movs	r3, #190	; 0xbe
    e82a:	006d      	lsls	r5, r5, #1
    e82c:	9000      	str	r0, [sp, #0]
    e82e:	000c      	movs	r4, r1
    e830:	a802      	add	r0, sp, #8
    e832:	49b7      	ldr	r1, [pc, #732]	; (eb10 <__ssvfiscanf_r+0x2fc>)
    e834:	005b      	lsls	r3, r3, #1
    e836:	1940      	adds	r0, r0, r5
    e838:	27c0      	movs	r7, #192	; 0xc0
    e83a:	50c1      	str	r1, [r0, r3]
    e83c:	ab02      	add	r3, sp, #8
    e83e:	195b      	adds	r3, r3, r5
    e840:	0015      	movs	r5, r2
    e842:	49b4      	ldr	r1, [pc, #720]	; (eb14 <__ssvfiscanf_r+0x300>)
    e844:	007f      	lsls	r7, r7, #1
    e846:	51d9      	str	r1, [r3, r7]
    e848:	782b      	ldrb	r3, [r5, #0]
    e84a:	2b00      	cmp	r3, #0
    e84c:	d100      	bne.n	e850 <__ssvfiscanf_r+0x3c>
    e84e:	e15b      	b.n	eb08 <__ssvfiscanf_r+0x2f4>
    e850:	f7fc fad6 	bl	ae00 <__locale_ctype_ptr>
    e854:	2208      	movs	r2, #8
    e856:	782b      	ldrb	r3, [r5, #0]
    e858:	18c0      	adds	r0, r0, r3
    e85a:	9301      	str	r3, [sp, #4]
    e85c:	7843      	ldrb	r3, [r0, #1]
    e85e:	4013      	ands	r3, r2
    e860:	d141      	bne.n	e8e6 <__ssvfiscanf_r+0xd2>
    e862:	9a01      	ldr	r2, [sp, #4]
    e864:	1c6e      	adds	r6, r5, #1
    e866:	2a25      	cmp	r2, #37	; 0x25
    e868:	d000      	beq.n	e86c <__ssvfiscanf_r+0x58>
    e86a:	e0a8      	b.n	e9be <__ssvfiscanf_r+0x1aa>
    e86c:	9347      	str	r3, [sp, #284]	; 0x11c
    e86e:	9345      	str	r3, [sp, #276]	; 0x114
    e870:	786b      	ldrb	r3, [r5, #1]
    e872:	2b2a      	cmp	r3, #42	; 0x2a
    e874:	d102      	bne.n	e87c <__ssvfiscanf_r+0x68>
    e876:	3b1a      	subs	r3, #26
    e878:	9345      	str	r3, [sp, #276]	; 0x114
    e87a:	1cae      	adds	r6, r5, #2
    e87c:	0035      	movs	r5, r6
    e87e:	220a      	movs	r2, #10
    e880:	7829      	ldrb	r1, [r5, #0]
    e882:	000b      	movs	r3, r1
    e884:	3b30      	subs	r3, #48	; 0x30
    e886:	2b09      	cmp	r3, #9
    e888:	d948      	bls.n	e91c <__ssvfiscanf_r+0x108>
    e88a:	4ea3      	ldr	r6, [pc, #652]	; (eb18 <__ssvfiscanf_r+0x304>)
    e88c:	2203      	movs	r2, #3
    e88e:	0030      	movs	r0, r6
    e890:	f7ff f906 	bl	daa0 <memchr>
    e894:	2800      	cmp	r0, #0
    e896:	d007      	beq.n	e8a8 <__ssvfiscanf_r+0x94>
    e898:	2301      	movs	r3, #1
    e89a:	1b80      	subs	r0, r0, r6
    e89c:	4083      	lsls	r3, r0
    e89e:	9a45      	ldr	r2, [sp, #276]	; 0x114
    e8a0:	3501      	adds	r5, #1
    e8a2:	4313      	orrs	r3, r2
    e8a4:	9202      	str	r2, [sp, #8]
    e8a6:	9345      	str	r3, [sp, #276]	; 0x114
    e8a8:	782b      	ldrb	r3, [r5, #0]
    e8aa:	1c6e      	adds	r6, r5, #1
    e8ac:	2b67      	cmp	r3, #103	; 0x67
    e8ae:	d858      	bhi.n	e962 <__ssvfiscanf_r+0x14e>
    e8b0:	2b65      	cmp	r3, #101	; 0x65
    e8b2:	d300      	bcc.n	e8b6 <__ssvfiscanf_r+0xa2>
    e8b4:	e0dd      	b.n	ea72 <__ssvfiscanf_r+0x25e>
    e8b6:	2b47      	cmp	r3, #71	; 0x47
    e8b8:	d838      	bhi.n	e92c <__ssvfiscanf_r+0x118>
    e8ba:	2b45      	cmp	r3, #69	; 0x45
    e8bc:	d300      	bcc.n	e8c0 <__ssvfiscanf_r+0xac>
    e8be:	e0d8      	b.n	ea72 <__ssvfiscanf_r+0x25e>
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	d100      	bne.n	e8c6 <__ssvfiscanf_r+0xb2>
    e8c4:	e11d      	b.n	eb02 <__ssvfiscanf_r+0x2ee>
    e8c6:	2b25      	cmp	r3, #37	; 0x25
    e8c8:	d079      	beq.n	e9be <__ssvfiscanf_r+0x1aa>
    e8ca:	2303      	movs	r3, #3
    e8cc:	934b      	str	r3, [sp, #300]	; 0x12c
    e8ce:	3307      	adds	r3, #7
    e8d0:	9346      	str	r3, [sp, #280]	; 0x118
    e8d2:	e053      	b.n	e97c <__ssvfiscanf_r+0x168>
    e8d4:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e8d6:	3301      	adds	r3, #1
    e8d8:	9201      	str	r2, [sp, #4]
    e8da:	3201      	adds	r2, #1
    e8dc:	9249      	str	r2, [sp, #292]	; 0x124
    e8de:	6862      	ldr	r2, [r4, #4]
    e8e0:	6023      	str	r3, [r4, #0]
    e8e2:	3a01      	subs	r2, #1
    e8e4:	6062      	str	r2, [r4, #4]
    e8e6:	6863      	ldr	r3, [r4, #4]
    e8e8:	2b00      	cmp	r3, #0
    e8ea:	dd0b      	ble.n	e904 <__ssvfiscanf_r+0xf0>
    e8ec:	f7fc fa88 	bl	ae00 <__locale_ctype_ptr>
    e8f0:	2108      	movs	r1, #8
    e8f2:	6823      	ldr	r3, [r4, #0]
    e8f4:	781a      	ldrb	r2, [r3, #0]
    e8f6:	1880      	adds	r0, r0, r2
    e8f8:	7842      	ldrb	r2, [r0, #1]
    e8fa:	420a      	tst	r2, r1
    e8fc:	d1ea      	bne.n	e8d4 <__ssvfiscanf_r+0xc0>
    e8fe:	1c6e      	adds	r6, r5, #1
    e900:	0035      	movs	r5, r6
    e902:	e7a1      	b.n	e848 <__ssvfiscanf_r+0x34>
    e904:	2286      	movs	r2, #134	; 0x86
    e906:	ab02      	add	r3, sp, #8
    e908:	0052      	lsls	r2, r2, #1
    e90a:	189b      	adds	r3, r3, r2
    e90c:	59db      	ldr	r3, [r3, r7]
    e90e:	0021      	movs	r1, r4
    e910:	9800      	ldr	r0, [sp, #0]
    e912:	9301      	str	r3, [sp, #4]
    e914:	4798      	blx	r3
    e916:	2800      	cmp	r0, #0
    e918:	d0e8      	beq.n	e8ec <__ssvfiscanf_r+0xd8>
    e91a:	e7f0      	b.n	e8fe <__ssvfiscanf_r+0xea>
    e91c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    e91e:	3501      	adds	r5, #1
    e920:	9302      	str	r3, [sp, #8]
    e922:	4353      	muls	r3, r2
    e924:	3b30      	subs	r3, #48	; 0x30
    e926:	1859      	adds	r1, r3, r1
    e928:	9147      	str	r1, [sp, #284]	; 0x11c
    e92a:	e7a9      	b.n	e880 <__ssvfiscanf_r+0x6c>
    e92c:	2b5b      	cmp	r3, #91	; 0x5b
    e92e:	d100      	bne.n	e932 <__ssvfiscanf_r+0x11e>
    e930:	e077      	b.n	ea22 <__ssvfiscanf_r+0x20e>
    e932:	d80f      	bhi.n	e954 <__ssvfiscanf_r+0x140>
    e934:	2b58      	cmp	r3, #88	; 0x58
    e936:	d1c8      	bne.n	e8ca <__ssvfiscanf_r+0xb6>
    e938:	9a45      	ldr	r2, [sp, #276]	; 0x114
    e93a:	9201      	str	r2, [sp, #4]
    e93c:	2280      	movs	r2, #128	; 0x80
    e93e:	9901      	ldr	r1, [sp, #4]
    e940:	0092      	lsls	r2, r2, #2
    e942:	430a      	orrs	r2, r1
    e944:	9245      	str	r2, [sp, #276]	; 0x114
    e946:	2210      	movs	r2, #16
    e948:	9246      	str	r2, [sp, #280]	; 0x118
    e94a:	2203      	movs	r2, #3
    e94c:	2b6e      	cmp	r3, #110	; 0x6e
    e94e:	dd14      	ble.n	e97a <__ssvfiscanf_r+0x166>
    e950:	3201      	adds	r2, #1
    e952:	e012      	b.n	e97a <__ssvfiscanf_r+0x166>
    e954:	2b63      	cmp	r3, #99	; 0x63
    e956:	d100      	bne.n	e95a <__ssvfiscanf_r+0x146>
    e958:	e071      	b.n	ea3e <__ssvfiscanf_r+0x22a>
    e95a:	2b64      	cmp	r3, #100	; 0x64
    e95c:	d1b5      	bne.n	e8ca <__ssvfiscanf_r+0xb6>
    e95e:	220a      	movs	r2, #10
    e960:	e7f2      	b.n	e948 <__ssvfiscanf_r+0x134>
    e962:	2b70      	cmp	r3, #112	; 0x70
    e964:	d052      	beq.n	ea0c <__ssvfiscanf_r+0x1f8>
    e966:	d822      	bhi.n	e9ae <__ssvfiscanf_r+0x19a>
    e968:	2b6e      	cmp	r3, #110	; 0x6e
    e96a:	d100      	bne.n	e96e <__ssvfiscanf_r+0x15a>
    e96c:	e06f      	b.n	ea4e <__ssvfiscanf_r+0x23a>
    e96e:	d854      	bhi.n	ea1a <__ssvfiscanf_r+0x206>
    e970:	2b69      	cmp	r3, #105	; 0x69
    e972:	d1aa      	bne.n	e8ca <__ssvfiscanf_r+0xb6>
    e974:	2300      	movs	r3, #0
    e976:	2203      	movs	r2, #3
    e978:	9346      	str	r3, [sp, #280]	; 0x118
    e97a:	924b      	str	r2, [sp, #300]	; 0x12c
    e97c:	6863      	ldr	r3, [r4, #4]
    e97e:	2b00      	cmp	r3, #0
    e980:	dc00      	bgt.n	e984 <__ssvfiscanf_r+0x170>
    e982:	e078      	b.n	ea76 <__ssvfiscanf_r+0x262>
    e984:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e986:	9301      	str	r3, [sp, #4]
    e988:	065b      	lsls	r3, r3, #25
    e98a:	d400      	bmi.n	e98e <__ssvfiscanf_r+0x17a>
    e98c:	e08b      	b.n	eaa6 <__ssvfiscanf_r+0x292>
    e98e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    e990:	2b02      	cmp	r3, #2
    e992:	dd00      	ble.n	e996 <__ssvfiscanf_r+0x182>
    e994:	e09d      	b.n	ead2 <__ssvfiscanf_r+0x2be>
    e996:	ab03      	add	r3, sp, #12
    e998:	0022      	movs	r2, r4
    e99a:	a945      	add	r1, sp, #276	; 0x114
    e99c:	9800      	ldr	r0, [sp, #0]
    e99e:	f000 f8bf 	bl	eb20 <_scanf_chars>
    e9a2:	2801      	cmp	r0, #1
    e9a4:	d100      	bne.n	e9a8 <__ssvfiscanf_r+0x194>
    e9a6:	e0af      	b.n	eb08 <__ssvfiscanf_r+0x2f4>
    e9a8:	2802      	cmp	r0, #2
    e9aa:	d1a9      	bne.n	e900 <__ssvfiscanf_r+0xec>
    e9ac:	e025      	b.n	e9fa <__ssvfiscanf_r+0x1e6>
    e9ae:	2b75      	cmp	r3, #117	; 0x75
    e9b0:	d0d5      	beq.n	e95e <__ssvfiscanf_r+0x14a>
    e9b2:	2b78      	cmp	r3, #120	; 0x78
    e9b4:	d0c0      	beq.n	e938 <__ssvfiscanf_r+0x124>
    e9b6:	2b73      	cmp	r3, #115	; 0x73
    e9b8:	d187      	bne.n	e8ca <__ssvfiscanf_r+0xb6>
    e9ba:	2302      	movs	r3, #2
    e9bc:	e03d      	b.n	ea3a <__ssvfiscanf_r+0x226>
    e9be:	6863      	ldr	r3, [r4, #4]
    e9c0:	2b00      	cmp	r3, #0
    e9c2:	dd0f      	ble.n	e9e4 <__ssvfiscanf_r+0x1d0>
    e9c4:	6823      	ldr	r3, [r4, #0]
    e9c6:	9901      	ldr	r1, [sp, #4]
    e9c8:	781a      	ldrb	r2, [r3, #0]
    e9ca:	4291      	cmp	r1, r2
    e9cc:	d000      	beq.n	e9d0 <__ssvfiscanf_r+0x1bc>
    e9ce:	e09b      	b.n	eb08 <__ssvfiscanf_r+0x2f4>
    e9d0:	3301      	adds	r3, #1
    e9d2:	6862      	ldr	r2, [r4, #4]
    e9d4:	6023      	str	r3, [r4, #0]
    e9d6:	9b49      	ldr	r3, [sp, #292]	; 0x124
    e9d8:	3a01      	subs	r2, #1
    e9da:	9301      	str	r3, [sp, #4]
    e9dc:	3301      	adds	r3, #1
    e9de:	6062      	str	r2, [r4, #4]
    e9e0:	9349      	str	r3, [sp, #292]	; 0x124
    e9e2:	e78d      	b.n	e900 <__ssvfiscanf_r+0xec>
    e9e4:	2286      	movs	r2, #134	; 0x86
    e9e6:	ab02      	add	r3, sp, #8
    e9e8:	0052      	lsls	r2, r2, #1
    e9ea:	189b      	adds	r3, r3, r2
    e9ec:	59db      	ldr	r3, [r3, r7]
    e9ee:	0021      	movs	r1, r4
    e9f0:	9800      	ldr	r0, [sp, #0]
    e9f2:	9302      	str	r3, [sp, #8]
    e9f4:	4798      	blx	r3
    e9f6:	2800      	cmp	r0, #0
    e9f8:	d0e4      	beq.n	e9c4 <__ssvfiscanf_r+0x1b0>
    e9fa:	9848      	ldr	r0, [sp, #288]	; 0x120
    e9fc:	2800      	cmp	r0, #0
    e9fe:	d000      	beq.n	ea02 <__ssvfiscanf_r+0x1ee>
    ea00:	e07b      	b.n	eafa <__ssvfiscanf_r+0x2e6>
    ea02:	3801      	subs	r0, #1
    ea04:	23a7      	movs	r3, #167	; 0xa7
    ea06:	009b      	lsls	r3, r3, #2
    ea08:	449d      	add	sp, r3
    ea0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    ea0e:	9201      	str	r2, [sp, #4]
    ea10:	2220      	movs	r2, #32
    ea12:	9901      	ldr	r1, [sp, #4]
    ea14:	430a      	orrs	r2, r1
    ea16:	9245      	str	r2, [sp, #276]	; 0x114
    ea18:	e78e      	b.n	e938 <__ssvfiscanf_r+0x124>
    ea1a:	2308      	movs	r3, #8
    ea1c:	2204      	movs	r2, #4
    ea1e:	9346      	str	r3, [sp, #280]	; 0x118
    ea20:	e7ab      	b.n	e97a <__ssvfiscanf_r+0x166>
    ea22:	0031      	movs	r1, r6
    ea24:	a805      	add	r0, sp, #20
    ea26:	f000 f9f3 	bl	ee10 <__sccl>
    ea2a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    ea2c:	0006      	movs	r6, r0
    ea2e:	9301      	str	r3, [sp, #4]
    ea30:	2340      	movs	r3, #64	; 0x40
    ea32:	9a01      	ldr	r2, [sp, #4]
    ea34:	4313      	orrs	r3, r2
    ea36:	9345      	str	r3, [sp, #276]	; 0x114
    ea38:	2301      	movs	r3, #1
    ea3a:	934b      	str	r3, [sp, #300]	; 0x12c
    ea3c:	e79e      	b.n	e97c <__ssvfiscanf_r+0x168>
    ea3e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    ea40:	9301      	str	r3, [sp, #4]
    ea42:	2340      	movs	r3, #64	; 0x40
    ea44:	9a01      	ldr	r2, [sp, #4]
    ea46:	4313      	orrs	r3, r2
    ea48:	9345      	str	r3, [sp, #276]	; 0x114
    ea4a:	2300      	movs	r3, #0
    ea4c:	e7f5      	b.n	ea3a <__ssvfiscanf_r+0x226>
    ea4e:	9945      	ldr	r1, [sp, #276]	; 0x114
    ea50:	06cb      	lsls	r3, r1, #27
    ea52:	d500      	bpl.n	ea56 <__ssvfiscanf_r+0x242>
    ea54:	e754      	b.n	e900 <__ssvfiscanf_r+0xec>
    ea56:	9b03      	ldr	r3, [sp, #12]
    ea58:	9a49      	ldr	r2, [sp, #292]	; 0x124
    ea5a:	07c8      	lsls	r0, r1, #31
    ea5c:	d504      	bpl.n	ea68 <__ssvfiscanf_r+0x254>
    ea5e:	1d19      	adds	r1, r3, #4
    ea60:	9103      	str	r1, [sp, #12]
    ea62:	681b      	ldr	r3, [r3, #0]
    ea64:	801a      	strh	r2, [r3, #0]
    ea66:	e74b      	b.n	e900 <__ssvfiscanf_r+0xec>
    ea68:	1d19      	adds	r1, r3, #4
    ea6a:	9103      	str	r1, [sp, #12]
    ea6c:	681b      	ldr	r3, [r3, #0]
    ea6e:	601a      	str	r2, [r3, #0]
    ea70:	e746      	b.n	e900 <__ssvfiscanf_r+0xec>
    ea72:	2305      	movs	r3, #5
    ea74:	e7e1      	b.n	ea3a <__ssvfiscanf_r+0x226>
    ea76:	2286      	movs	r2, #134	; 0x86
    ea78:	ab02      	add	r3, sp, #8
    ea7a:	0052      	lsls	r2, r2, #1
    ea7c:	189b      	adds	r3, r3, r2
    ea7e:	59db      	ldr	r3, [r3, r7]
    ea80:	0021      	movs	r1, r4
    ea82:	9800      	ldr	r0, [sp, #0]
    ea84:	9301      	str	r3, [sp, #4]
    ea86:	4798      	blx	r3
    ea88:	2800      	cmp	r0, #0
    ea8a:	d100      	bne.n	ea8e <__ssvfiscanf_r+0x27a>
    ea8c:	e77a      	b.n	e984 <__ssvfiscanf_r+0x170>
    ea8e:	e7b4      	b.n	e9fa <__ssvfiscanf_r+0x1e6>
    ea90:	9a49      	ldr	r2, [sp, #292]	; 0x124
    ea92:	9201      	str	r2, [sp, #4]
    ea94:	3201      	adds	r2, #1
    ea96:	9249      	str	r2, [sp, #292]	; 0x124
    ea98:	6862      	ldr	r2, [r4, #4]
    ea9a:	3a01      	subs	r2, #1
    ea9c:	6062      	str	r2, [r4, #4]
    ea9e:	2a00      	cmp	r2, #0
    eaa0:	dd0b      	ble.n	eaba <__ssvfiscanf_r+0x2a6>
    eaa2:	3301      	adds	r3, #1
    eaa4:	6023      	str	r3, [r4, #0]
    eaa6:	f7fc f9ab 	bl	ae00 <__locale_ctype_ptr>
    eaaa:	2108      	movs	r1, #8
    eaac:	6823      	ldr	r3, [r4, #0]
    eaae:	781a      	ldrb	r2, [r3, #0]
    eab0:	1880      	adds	r0, r0, r2
    eab2:	7842      	ldrb	r2, [r0, #1]
    eab4:	420a      	tst	r2, r1
    eab6:	d1eb      	bne.n	ea90 <__ssvfiscanf_r+0x27c>
    eab8:	e769      	b.n	e98e <__ssvfiscanf_r+0x17a>
    eaba:	2286      	movs	r2, #134	; 0x86
    eabc:	ab02      	add	r3, sp, #8
    eabe:	0052      	lsls	r2, r2, #1
    eac0:	189b      	adds	r3, r3, r2
    eac2:	59db      	ldr	r3, [r3, r7]
    eac4:	0021      	movs	r1, r4
    eac6:	9800      	ldr	r0, [sp, #0]
    eac8:	9301      	str	r3, [sp, #4]
    eaca:	4798      	blx	r3
    eacc:	2800      	cmp	r0, #0
    eace:	d0ea      	beq.n	eaa6 <__ssvfiscanf_r+0x292>
    ead0:	e793      	b.n	e9fa <__ssvfiscanf_r+0x1e6>
    ead2:	2b04      	cmp	r3, #4
    ead4:	dc06      	bgt.n	eae4 <__ssvfiscanf_r+0x2d0>
    ead6:	ab03      	add	r3, sp, #12
    ead8:	0022      	movs	r2, r4
    eada:	a945      	add	r1, sp, #276	; 0x114
    eadc:	9800      	ldr	r0, [sp, #0]
    eade:	f000 f883 	bl	ebe8 <_scanf_i>
    eae2:	e75e      	b.n	e9a2 <__ssvfiscanf_r+0x18e>
    eae4:	4b0d      	ldr	r3, [pc, #52]	; (eb1c <__ssvfiscanf_r+0x308>)
    eae6:	2b00      	cmp	r3, #0
    eae8:	d100      	bne.n	eaec <__ssvfiscanf_r+0x2d8>
    eaea:	e709      	b.n	e900 <__ssvfiscanf_r+0xec>
    eaec:	ab03      	add	r3, sp, #12
    eaee:	0022      	movs	r2, r4
    eaf0:	a945      	add	r1, sp, #276	; 0x114
    eaf2:	9800      	ldr	r0, [sp, #0]
    eaf4:	e000      	b.n	eaf8 <__ssvfiscanf_r+0x2e4>
    eaf6:	bf00      	nop
    eaf8:	e753      	b.n	e9a2 <__ssvfiscanf_r+0x18e>
    eafa:	89a3      	ldrh	r3, [r4, #12]
    eafc:	065b      	lsls	r3, r3, #25
    eafe:	d400      	bmi.n	eb02 <__ssvfiscanf_r+0x2ee>
    eb00:	e780      	b.n	ea04 <__ssvfiscanf_r+0x1f0>
    eb02:	2001      	movs	r0, #1
    eb04:	4240      	negs	r0, r0
    eb06:	e77d      	b.n	ea04 <__ssvfiscanf_r+0x1f0>
    eb08:	9848      	ldr	r0, [sp, #288]	; 0x120
    eb0a:	e77b      	b.n	ea04 <__ssvfiscanf_r+0x1f0>
    eb0c:	fffffd64 	.word	0xfffffd64
    eb10:	0000e75d 	.word	0x0000e75d
    eb14:	0000e7d5 	.word	0x0000e7d5
    eb18:	0001011e 	.word	0x0001011e
    eb1c:	00000000 	.word	0x00000000

0000eb20 <_scanf_chars>:
    eb20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    eb22:	0015      	movs	r5, r2
    eb24:	688a      	ldr	r2, [r1, #8]
    eb26:	9001      	str	r0, [sp, #4]
    eb28:	000c      	movs	r4, r1
    eb2a:	2a00      	cmp	r2, #0
    eb2c:	d106      	bne.n	eb3c <_scanf_chars+0x1c>
    eb2e:	698a      	ldr	r2, [r1, #24]
    eb30:	1e51      	subs	r1, r2, #1
    eb32:	418a      	sbcs	r2, r1
    eb34:	2101      	movs	r1, #1
    eb36:	4252      	negs	r2, r2
    eb38:	430a      	orrs	r2, r1
    eb3a:	60a2      	str	r2, [r4, #8]
    eb3c:	6822      	ldr	r2, [r4, #0]
    eb3e:	06d2      	lsls	r2, r2, #27
    eb40:	d403      	bmi.n	eb4a <_scanf_chars+0x2a>
    eb42:	681a      	ldr	r2, [r3, #0]
    eb44:	1d11      	adds	r1, r2, #4
    eb46:	6019      	str	r1, [r3, #0]
    eb48:	6817      	ldr	r7, [r2, #0]
    eb4a:	2600      	movs	r6, #0
    eb4c:	69a3      	ldr	r3, [r4, #24]
    eb4e:	2b00      	cmp	r3, #0
    eb50:	d01c      	beq.n	eb8c <_scanf_chars+0x6c>
    eb52:	2b01      	cmp	r3, #1
    eb54:	d108      	bne.n	eb68 <_scanf_chars+0x48>
    eb56:	682b      	ldr	r3, [r5, #0]
    eb58:	6962      	ldr	r2, [r4, #20]
    eb5a:	781b      	ldrb	r3, [r3, #0]
    eb5c:	5cd3      	ldrb	r3, [r2, r3]
    eb5e:	2b00      	cmp	r3, #0
    eb60:	d114      	bne.n	eb8c <_scanf_chars+0x6c>
    eb62:	2e00      	cmp	r6, #0
    eb64:	d130      	bne.n	ebc8 <_scanf_chars+0xa8>
    eb66:	e006      	b.n	eb76 <_scanf_chars+0x56>
    eb68:	2b02      	cmp	r3, #2
    eb6a:	d006      	beq.n	eb7a <_scanf_chars+0x5a>
    eb6c:	2e00      	cmp	r6, #0
    eb6e:	d12b      	bne.n	ebc8 <_scanf_chars+0xa8>
    eb70:	69a3      	ldr	r3, [r4, #24]
    eb72:	2b01      	cmp	r3, #1
    eb74:	d128      	bne.n	ebc8 <_scanf_chars+0xa8>
    eb76:	2001      	movs	r0, #1
    eb78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb7a:	f7fc f941 	bl	ae00 <__locale_ctype_ptr>
    eb7e:	2208      	movs	r2, #8
    eb80:	682b      	ldr	r3, [r5, #0]
    eb82:	781b      	ldrb	r3, [r3, #0]
    eb84:	18c0      	adds	r0, r0, r3
    eb86:	7843      	ldrb	r3, [r0, #1]
    eb88:	4213      	tst	r3, r2
    eb8a:	d1ef      	bne.n	eb6c <_scanf_chars+0x4c>
    eb8c:	2210      	movs	r2, #16
    eb8e:	6823      	ldr	r3, [r4, #0]
    eb90:	3601      	adds	r6, #1
    eb92:	4213      	tst	r3, r2
    eb94:	d103      	bne.n	eb9e <_scanf_chars+0x7e>
    eb96:	682b      	ldr	r3, [r5, #0]
    eb98:	781b      	ldrb	r3, [r3, #0]
    eb9a:	703b      	strb	r3, [r7, #0]
    eb9c:	3701      	adds	r7, #1
    eb9e:	682a      	ldr	r2, [r5, #0]
    eba0:	686b      	ldr	r3, [r5, #4]
    eba2:	3201      	adds	r2, #1
    eba4:	602a      	str	r2, [r5, #0]
    eba6:	68a2      	ldr	r2, [r4, #8]
    eba8:	3b01      	subs	r3, #1
    ebaa:	3a01      	subs	r2, #1
    ebac:	606b      	str	r3, [r5, #4]
    ebae:	60a2      	str	r2, [r4, #8]
    ebb0:	2a00      	cmp	r2, #0
    ebb2:	d009      	beq.n	ebc8 <_scanf_chars+0xa8>
    ebb4:	2b00      	cmp	r3, #0
    ebb6:	dcc9      	bgt.n	eb4c <_scanf_chars+0x2c>
    ebb8:	23c0      	movs	r3, #192	; 0xc0
    ebba:	005b      	lsls	r3, r3, #1
    ebbc:	58e3      	ldr	r3, [r4, r3]
    ebbe:	0029      	movs	r1, r5
    ebc0:	9801      	ldr	r0, [sp, #4]
    ebc2:	4798      	blx	r3
    ebc4:	2800      	cmp	r0, #0
    ebc6:	d0c1      	beq.n	eb4c <_scanf_chars+0x2c>
    ebc8:	2310      	movs	r3, #16
    ebca:	6822      	ldr	r2, [r4, #0]
    ebcc:	4013      	ands	r3, r2
    ebce:	d106      	bne.n	ebde <_scanf_chars+0xbe>
    ebd0:	68e2      	ldr	r2, [r4, #12]
    ebd2:	3201      	adds	r2, #1
    ebd4:	60e2      	str	r2, [r4, #12]
    ebd6:	69a2      	ldr	r2, [r4, #24]
    ebd8:	2a00      	cmp	r2, #0
    ebda:	d000      	beq.n	ebde <_scanf_chars+0xbe>
    ebdc:	703b      	strb	r3, [r7, #0]
    ebde:	6923      	ldr	r3, [r4, #16]
    ebe0:	2000      	movs	r0, #0
    ebe2:	199e      	adds	r6, r3, r6
    ebe4:	6126      	str	r6, [r4, #16]
    ebe6:	e7c7      	b.n	eb78 <_scanf_chars+0x58>

0000ebe8 <_scanf_i>:
    ebe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebea:	000c      	movs	r4, r1
    ebec:	b08d      	sub	sp, #52	; 0x34
    ebee:	9302      	str	r3, [sp, #8]
    ebf0:	4b77      	ldr	r3, [pc, #476]	; (edd0 <_scanf_i+0x1e8>)
    ebf2:	9005      	str	r0, [sp, #20]
    ebf4:	0016      	movs	r6, r2
    ebf6:	aa09      	add	r2, sp, #36	; 0x24
    ebf8:	cb23      	ldmia	r3!, {r0, r1, r5}
    ebfa:	c223      	stmia	r2!, {r0, r1, r5}
    ebfc:	4b75      	ldr	r3, [pc, #468]	; (edd4 <_scanf_i+0x1ec>)
    ebfe:	9306      	str	r3, [sp, #24]
    ec00:	69a3      	ldr	r3, [r4, #24]
    ec02:	2b03      	cmp	r3, #3
    ec04:	d001      	beq.n	ec0a <_scanf_i+0x22>
    ec06:	4b74      	ldr	r3, [pc, #464]	; (edd8 <_scanf_i+0x1f0>)
    ec08:	9306      	str	r3, [sp, #24]
    ec0a:	22ae      	movs	r2, #174	; 0xae
    ec0c:	2000      	movs	r0, #0
    ec0e:	68a3      	ldr	r3, [r4, #8]
    ec10:	0052      	lsls	r2, r2, #1
    ec12:	1e59      	subs	r1, r3, #1
    ec14:	9004      	str	r0, [sp, #16]
    ec16:	4291      	cmp	r1, r2
    ec18:	d905      	bls.n	ec26 <_scanf_i+0x3e>
    ec1a:	3b5e      	subs	r3, #94	; 0x5e
    ec1c:	3bff      	subs	r3, #255	; 0xff
    ec1e:	9304      	str	r3, [sp, #16]
    ec20:	235e      	movs	r3, #94	; 0x5e
    ec22:	33ff      	adds	r3, #255	; 0xff
    ec24:	60a3      	str	r3, [r4, #8]
    ec26:	0023      	movs	r3, r4
    ec28:	331c      	adds	r3, #28
    ec2a:	9301      	str	r3, [sp, #4]
    ec2c:	23d0      	movs	r3, #208	; 0xd0
    ec2e:	2700      	movs	r7, #0
    ec30:	6822      	ldr	r2, [r4, #0]
    ec32:	011b      	lsls	r3, r3, #4
    ec34:	4313      	orrs	r3, r2
    ec36:	6023      	str	r3, [r4, #0]
    ec38:	9b01      	ldr	r3, [sp, #4]
    ec3a:	9303      	str	r3, [sp, #12]
    ec3c:	6833      	ldr	r3, [r6, #0]
    ec3e:	a809      	add	r0, sp, #36	; 0x24
    ec40:	7819      	ldrb	r1, [r3, #0]
    ec42:	00bb      	lsls	r3, r7, #2
    ec44:	2202      	movs	r2, #2
    ec46:	5818      	ldr	r0, [r3, r0]
    ec48:	f7fe ff2a 	bl	daa0 <memchr>
    ec4c:	2800      	cmp	r0, #0
    ec4e:	d02b      	beq.n	eca8 <_scanf_i+0xc0>
    ec50:	2f01      	cmp	r7, #1
    ec52:	d15f      	bne.n	ed14 <_scanf_i+0x12c>
    ec54:	6863      	ldr	r3, [r4, #4]
    ec56:	2b00      	cmp	r3, #0
    ec58:	d106      	bne.n	ec68 <_scanf_i+0x80>
    ec5a:	3308      	adds	r3, #8
    ec5c:	6822      	ldr	r2, [r4, #0]
    ec5e:	6063      	str	r3, [r4, #4]
    ec60:	33f9      	adds	r3, #249	; 0xf9
    ec62:	33ff      	adds	r3, #255	; 0xff
    ec64:	4313      	orrs	r3, r2
    ec66:	6023      	str	r3, [r4, #0]
    ec68:	4b5c      	ldr	r3, [pc, #368]	; (eddc <_scanf_i+0x1f4>)
    ec6a:	6822      	ldr	r2, [r4, #0]
    ec6c:	4013      	ands	r3, r2
    ec6e:	6023      	str	r3, [r4, #0]
    ec70:	68a3      	ldr	r3, [r4, #8]
    ec72:	1e5a      	subs	r2, r3, #1
    ec74:	60a2      	str	r2, [r4, #8]
    ec76:	2b00      	cmp	r3, #0
    ec78:	d016      	beq.n	eca8 <_scanf_i+0xc0>
    ec7a:	9b03      	ldr	r3, [sp, #12]
    ec7c:	1c5d      	adds	r5, r3, #1
    ec7e:	6833      	ldr	r3, [r6, #0]
    ec80:	1c5a      	adds	r2, r3, #1
    ec82:	6032      	str	r2, [r6, #0]
    ec84:	781b      	ldrb	r3, [r3, #0]
    ec86:	9a03      	ldr	r2, [sp, #12]
    ec88:	9503      	str	r5, [sp, #12]
    ec8a:	7013      	strb	r3, [r2, #0]
    ec8c:	6873      	ldr	r3, [r6, #4]
    ec8e:	3b01      	subs	r3, #1
    ec90:	6073      	str	r3, [r6, #4]
    ec92:	2b00      	cmp	r3, #0
    ec94:	dc08      	bgt.n	eca8 <_scanf_i+0xc0>
    ec96:	23c0      	movs	r3, #192	; 0xc0
    ec98:	005b      	lsls	r3, r3, #1
    ec9a:	58e3      	ldr	r3, [r4, r3]
    ec9c:	0031      	movs	r1, r6
    ec9e:	9805      	ldr	r0, [sp, #20]
    eca0:	9307      	str	r3, [sp, #28]
    eca2:	4798      	blx	r3
    eca4:	2800      	cmp	r0, #0
    eca6:	d17d      	bne.n	eda4 <_scanf_i+0x1bc>
    eca8:	3701      	adds	r7, #1
    ecaa:	2f03      	cmp	r7, #3
    ecac:	d1c6      	bne.n	ec3c <_scanf_i+0x54>
    ecae:	6863      	ldr	r3, [r4, #4]
    ecb0:	2b00      	cmp	r3, #0
    ecb2:	d101      	bne.n	ecb8 <_scanf_i+0xd0>
    ecb4:	330a      	adds	r3, #10
    ecb6:	6063      	str	r3, [r4, #4]
    ecb8:	2110      	movs	r1, #16
    ecba:	2700      	movs	r7, #0
    ecbc:	6863      	ldr	r3, [r4, #4]
    ecbe:	6960      	ldr	r0, [r4, #20]
    ecc0:	1ac9      	subs	r1, r1, r3
    ecc2:	4b47      	ldr	r3, [pc, #284]	; (ede0 <_scanf_i+0x1f8>)
    ecc4:	18c9      	adds	r1, r1, r3
    ecc6:	f000 f8a3 	bl	ee10 <__sccl>
    ecca:	9d03      	ldr	r5, [sp, #12]
    eccc:	68a3      	ldr	r3, [r4, #8]
    ecce:	2b00      	cmp	r3, #0
    ecd0:	d041      	beq.n	ed56 <_scanf_i+0x16e>
    ecd2:	6832      	ldr	r2, [r6, #0]
    ecd4:	6960      	ldr	r0, [r4, #20]
    ecd6:	7811      	ldrb	r1, [r2, #0]
    ecd8:	5c40      	ldrb	r0, [r0, r1]
    ecda:	2800      	cmp	r0, #0
    ecdc:	d03b      	beq.n	ed56 <_scanf_i+0x16e>
    ecde:	2930      	cmp	r1, #48	; 0x30
    ece0:	d128      	bne.n	ed34 <_scanf_i+0x14c>
    ece2:	2080      	movs	r0, #128	; 0x80
    ece4:	6821      	ldr	r1, [r4, #0]
    ece6:	0100      	lsls	r0, r0, #4
    ece8:	4201      	tst	r1, r0
    ecea:	d023      	beq.n	ed34 <_scanf_i+0x14c>
    ecec:	9a04      	ldr	r2, [sp, #16]
    ecee:	3701      	adds	r7, #1
    ecf0:	2a00      	cmp	r2, #0
    ecf2:	d003      	beq.n	ecfc <_scanf_i+0x114>
    ecf4:	3a01      	subs	r2, #1
    ecf6:	3301      	adds	r3, #1
    ecf8:	9204      	str	r2, [sp, #16]
    ecfa:	60a3      	str	r3, [r4, #8]
    ecfc:	6873      	ldr	r3, [r6, #4]
    ecfe:	3b01      	subs	r3, #1
    ed00:	6073      	str	r3, [r6, #4]
    ed02:	2b00      	cmp	r3, #0
    ed04:	dd1e      	ble.n	ed44 <_scanf_i+0x15c>
    ed06:	6833      	ldr	r3, [r6, #0]
    ed08:	3301      	adds	r3, #1
    ed0a:	6033      	str	r3, [r6, #0]
    ed0c:	68a3      	ldr	r3, [r4, #8]
    ed0e:	3b01      	subs	r3, #1
    ed10:	60a3      	str	r3, [r4, #8]
    ed12:	e7db      	b.n	eccc <_scanf_i+0xe4>
    ed14:	2f02      	cmp	r7, #2
    ed16:	d1ab      	bne.n	ec70 <_scanf_i+0x88>
    ed18:	21c0      	movs	r1, #192	; 0xc0
    ed1a:	2380      	movs	r3, #128	; 0x80
    ed1c:	6822      	ldr	r2, [r4, #0]
    ed1e:	00c9      	lsls	r1, r1, #3
    ed20:	4011      	ands	r1, r2
    ed22:	009b      	lsls	r3, r3, #2
    ed24:	4299      	cmp	r1, r3
    ed26:	d1c2      	bne.n	ecae <_scanf_i+0xc6>
    ed28:	3bf1      	subs	r3, #241	; 0xf1
    ed2a:	3bff      	subs	r3, #255	; 0xff
    ed2c:	6063      	str	r3, [r4, #4]
    ed2e:	33f0      	adds	r3, #240	; 0xf0
    ed30:	4313      	orrs	r3, r2
    ed32:	e79c      	b.n	ec6e <_scanf_i+0x86>
    ed34:	6821      	ldr	r1, [r4, #0]
    ed36:	4b2b      	ldr	r3, [pc, #172]	; (ede4 <_scanf_i+0x1fc>)
    ed38:	400b      	ands	r3, r1
    ed3a:	6023      	str	r3, [r4, #0]
    ed3c:	7813      	ldrb	r3, [r2, #0]
    ed3e:	702b      	strb	r3, [r5, #0]
    ed40:	3501      	adds	r5, #1
    ed42:	e7db      	b.n	ecfc <_scanf_i+0x114>
    ed44:	23c0      	movs	r3, #192	; 0xc0
    ed46:	005b      	lsls	r3, r3, #1
    ed48:	58e3      	ldr	r3, [r4, r3]
    ed4a:	0031      	movs	r1, r6
    ed4c:	9805      	ldr	r0, [sp, #20]
    ed4e:	9303      	str	r3, [sp, #12]
    ed50:	4798      	blx	r3
    ed52:	2800      	cmp	r0, #0
    ed54:	d0da      	beq.n	ed0c <_scanf_i+0x124>
    ed56:	6823      	ldr	r3, [r4, #0]
    ed58:	05db      	lsls	r3, r3, #23
    ed5a:	d50e      	bpl.n	ed7a <_scanf_i+0x192>
    ed5c:	9b01      	ldr	r3, [sp, #4]
    ed5e:	429d      	cmp	r5, r3
    ed60:	d907      	bls.n	ed72 <_scanf_i+0x18a>
    ed62:	23be      	movs	r3, #190	; 0xbe
    ed64:	3d01      	subs	r5, #1
    ed66:	005b      	lsls	r3, r3, #1
    ed68:	7829      	ldrb	r1, [r5, #0]
    ed6a:	58e3      	ldr	r3, [r4, r3]
    ed6c:	0032      	movs	r2, r6
    ed6e:	9805      	ldr	r0, [sp, #20]
    ed70:	4798      	blx	r3
    ed72:	9b01      	ldr	r3, [sp, #4]
    ed74:	2001      	movs	r0, #1
    ed76:	429d      	cmp	r5, r3
    ed78:	d027      	beq.n	edca <_scanf_i+0x1e2>
    ed7a:	2210      	movs	r2, #16
    ed7c:	6823      	ldr	r3, [r4, #0]
    ed7e:	401a      	ands	r2, r3
    ed80:	d11c      	bne.n	edbc <_scanf_i+0x1d4>
    ed82:	702a      	strb	r2, [r5, #0]
    ed84:	6863      	ldr	r3, [r4, #4]
    ed86:	9901      	ldr	r1, [sp, #4]
    ed88:	9805      	ldr	r0, [sp, #20]
    ed8a:	9e06      	ldr	r6, [sp, #24]
    ed8c:	47b0      	blx	r6
    ed8e:	9b02      	ldr	r3, [sp, #8]
    ed90:	6822      	ldr	r2, [r4, #0]
    ed92:	681b      	ldr	r3, [r3, #0]
    ed94:	0691      	lsls	r1, r2, #26
    ed96:	d507      	bpl.n	eda8 <_scanf_i+0x1c0>
    ed98:	9902      	ldr	r1, [sp, #8]
    ed9a:	1d1a      	adds	r2, r3, #4
    ed9c:	600a      	str	r2, [r1, #0]
    ed9e:	681b      	ldr	r3, [r3, #0]
    eda0:	6018      	str	r0, [r3, #0]
    eda2:	e008      	b.n	edb6 <_scanf_i+0x1ce>
    eda4:	2700      	movs	r7, #0
    eda6:	e7d6      	b.n	ed56 <_scanf_i+0x16e>
    eda8:	07d1      	lsls	r1, r2, #31
    edaa:	d5f5      	bpl.n	ed98 <_scanf_i+0x1b0>
    edac:	9902      	ldr	r1, [sp, #8]
    edae:	1d1a      	adds	r2, r3, #4
    edb0:	600a      	str	r2, [r1, #0]
    edb2:	681b      	ldr	r3, [r3, #0]
    edb4:	8018      	strh	r0, [r3, #0]
    edb6:	68e3      	ldr	r3, [r4, #12]
    edb8:	3301      	adds	r3, #1
    edba:	60e3      	str	r3, [r4, #12]
    edbc:	2000      	movs	r0, #0
    edbe:	9b01      	ldr	r3, [sp, #4]
    edc0:	1aed      	subs	r5, r5, r3
    edc2:	6923      	ldr	r3, [r4, #16]
    edc4:	19ef      	adds	r7, r5, r7
    edc6:	19df      	adds	r7, r3, r7
    edc8:	6127      	str	r7, [r4, #16]
    edca:	b00d      	add	sp, #52	; 0x34
    edcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    edce:	46c0      	nop			; (mov r8, r8)
    edd0:	00010464 	.word	0x00010464
    edd4:	0000c235 	.word	0x0000c235
    edd8:	0000e645 	.word	0x0000e645
    eddc:	fffffaff 	.word	0xfffffaff
    ede0:	00010470 	.word	0x00010470
    ede4:	fffff6ff 	.word	0xfffff6ff

0000ede8 <_read_r>:
    ede8:	b570      	push	{r4, r5, r6, lr}
    edea:	0005      	movs	r5, r0
    edec:	0008      	movs	r0, r1
    edee:	0011      	movs	r1, r2
    edf0:	2200      	movs	r2, #0
    edf2:	4c06      	ldr	r4, [pc, #24]	; (ee0c <_read_r+0x24>)
    edf4:	6022      	str	r2, [r4, #0]
    edf6:	001a      	movs	r2, r3
    edf8:	f000 f8aa 	bl	ef50 <_read>
    edfc:	1c43      	adds	r3, r0, #1
    edfe:	d103      	bne.n	ee08 <_read_r+0x20>
    ee00:	6823      	ldr	r3, [r4, #0]
    ee02:	2b00      	cmp	r3, #0
    ee04:	d000      	beq.n	ee08 <_read_r+0x20>
    ee06:	602b      	str	r3, [r5, #0]
    ee08:	bd70      	pop	{r4, r5, r6, pc}
    ee0a:	46c0      	nop			; (mov r8, r8)
    ee0c:	20000f10 	.word	0x20000f10

0000ee10 <__sccl>:
    ee10:	b570      	push	{r4, r5, r6, lr}
    ee12:	780b      	ldrb	r3, [r1, #0]
    ee14:	2b5e      	cmp	r3, #94	; 0x5e
    ee16:	d00d      	beq.n	ee34 <__sccl+0x24>
    ee18:	1c4a      	adds	r2, r1, #1
    ee1a:	2100      	movs	r1, #0
    ee1c:	0004      	movs	r4, r0
    ee1e:	1c45      	adds	r5, r0, #1
    ee20:	35ff      	adds	r5, #255	; 0xff
    ee22:	7021      	strb	r1, [r4, #0]
    ee24:	3401      	adds	r4, #1
    ee26:	42a5      	cmp	r5, r4
    ee28:	d1fb      	bne.n	ee22 <__sccl+0x12>
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d106      	bne.n	ee3c <__sccl+0x2c>
    ee2e:	3a01      	subs	r2, #1
    ee30:	0010      	movs	r0, r2
    ee32:	bd70      	pop	{r4, r5, r6, pc}
    ee34:	1c8a      	adds	r2, r1, #2
    ee36:	784b      	ldrb	r3, [r1, #1]
    ee38:	2101      	movs	r1, #1
    ee3a:	e7ef      	b.n	ee1c <__sccl+0xc>
    ee3c:	2401      	movs	r4, #1
    ee3e:	404c      	eors	r4, r1
    ee40:	0011      	movs	r1, r2
    ee42:	54c4      	strb	r4, [r0, r3]
    ee44:	780d      	ldrb	r5, [r1, #0]
    ee46:	1c4a      	adds	r2, r1, #1
    ee48:	2d2d      	cmp	r5, #45	; 0x2d
    ee4a:	d007      	beq.n	ee5c <__sccl+0x4c>
    ee4c:	2d5d      	cmp	r5, #93	; 0x5d
    ee4e:	d0ef      	beq.n	ee30 <__sccl+0x20>
    ee50:	2d00      	cmp	r5, #0
    ee52:	d101      	bne.n	ee58 <__sccl+0x48>
    ee54:	000a      	movs	r2, r1
    ee56:	e7eb      	b.n	ee30 <__sccl+0x20>
    ee58:	002b      	movs	r3, r5
    ee5a:	e7f1      	b.n	ee40 <__sccl+0x30>
    ee5c:	784e      	ldrb	r6, [r1, #1]
    ee5e:	2e5d      	cmp	r6, #93	; 0x5d
    ee60:	d0fa      	beq.n	ee58 <__sccl+0x48>
    ee62:	42b3      	cmp	r3, r6
    ee64:	dcf8      	bgt.n	ee58 <__sccl+0x48>
    ee66:	3102      	adds	r1, #2
    ee68:	3301      	adds	r3, #1
    ee6a:	54c4      	strb	r4, [r0, r3]
    ee6c:	429e      	cmp	r6, r3
    ee6e:	dcfb      	bgt.n	ee68 <__sccl+0x58>
    ee70:	e7e8      	b.n	ee44 <__sccl+0x34>
	...

0000ee74 <__submore>:
    ee74:	000b      	movs	r3, r1
    ee76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ee78:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    ee7a:	3344      	adds	r3, #68	; 0x44
    ee7c:	000c      	movs	r4, r1
    ee7e:	429d      	cmp	r5, r3
    ee80:	d11c      	bne.n	eebc <__submore+0x48>
    ee82:	2680      	movs	r6, #128	; 0x80
    ee84:	00f6      	lsls	r6, r6, #3
    ee86:	0031      	movs	r1, r6
    ee88:	f7fc fab2 	bl	b3f0 <_malloc_r>
    ee8c:	2800      	cmp	r0, #0
    ee8e:	d102      	bne.n	ee96 <__submore+0x22>
    ee90:	2001      	movs	r0, #1
    ee92:	4240      	negs	r0, r0
    ee94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ee96:	0023      	movs	r3, r4
    ee98:	6360      	str	r0, [r4, #52]	; 0x34
    ee9a:	63a6      	str	r6, [r4, #56]	; 0x38
    ee9c:	3346      	adds	r3, #70	; 0x46
    ee9e:	781a      	ldrb	r2, [r3, #0]
    eea0:	4b10      	ldr	r3, [pc, #64]	; (eee4 <__submore+0x70>)
    eea2:	54c2      	strb	r2, [r0, r3]
    eea4:	0023      	movs	r3, r4
    eea6:	3345      	adds	r3, #69	; 0x45
    eea8:	781a      	ldrb	r2, [r3, #0]
    eeaa:	4b0f      	ldr	r3, [pc, #60]	; (eee8 <__submore+0x74>)
    eeac:	54c2      	strb	r2, [r0, r3]
    eeae:	782a      	ldrb	r2, [r5, #0]
    eeb0:	4b0e      	ldr	r3, [pc, #56]	; (eeec <__submore+0x78>)
    eeb2:	54c2      	strb	r2, [r0, r3]
    eeb4:	18c0      	adds	r0, r0, r3
    eeb6:	6020      	str	r0, [r4, #0]
    eeb8:	2000      	movs	r0, #0
    eeba:	e7eb      	b.n	ee94 <__submore+0x20>
    eebc:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    eebe:	0029      	movs	r1, r5
    eec0:	0073      	lsls	r3, r6, #1
    eec2:	001a      	movs	r2, r3
    eec4:	9301      	str	r3, [sp, #4]
    eec6:	f7ff f8e9 	bl	e09c <_realloc_r>
    eeca:	1e05      	subs	r5, r0, #0
    eecc:	d0e0      	beq.n	ee90 <__submore+0x1c>
    eece:	1987      	adds	r7, r0, r6
    eed0:	0001      	movs	r1, r0
    eed2:	0032      	movs	r2, r6
    eed4:	0038      	movs	r0, r7
    eed6:	f7fb ffc7 	bl	ae68 <memcpy>
    eeda:	9b01      	ldr	r3, [sp, #4]
    eedc:	6027      	str	r7, [r4, #0]
    eede:	6365      	str	r5, [r4, #52]	; 0x34
    eee0:	63a3      	str	r3, [r4, #56]	; 0x38
    eee2:	e7e9      	b.n	eeb8 <__submore+0x44>
    eee4:	000003ff 	.word	0x000003ff
    eee8:	000003fe 	.word	0x000003fe
    eeec:	000003fd 	.word	0x000003fd

0000eef0 <_close>:
    eef0:	2258      	movs	r2, #88	; 0x58
    eef2:	2001      	movs	r0, #1
    eef4:	4b01      	ldr	r3, [pc, #4]	; (eefc <_close+0xc>)
    eef6:	4240      	negs	r0, r0
    eef8:	601a      	str	r2, [r3, #0]
    eefa:	4770      	bx	lr
    eefc:	20000f10 	.word	0x20000f10

0000ef00 <_fstat>:
    ef00:	2258      	movs	r2, #88	; 0x58
    ef02:	2001      	movs	r0, #1
    ef04:	4b01      	ldr	r3, [pc, #4]	; (ef0c <_fstat+0xc>)
    ef06:	4240      	negs	r0, r0
    ef08:	601a      	str	r2, [r3, #0]
    ef0a:	4770      	bx	lr
    ef0c:	20000f10 	.word	0x20000f10

0000ef10 <_getpid>:
    ef10:	2258      	movs	r2, #88	; 0x58
    ef12:	2001      	movs	r0, #1
    ef14:	4b01      	ldr	r3, [pc, #4]	; (ef1c <_getpid+0xc>)
    ef16:	4240      	negs	r0, r0
    ef18:	601a      	str	r2, [r3, #0]
    ef1a:	4770      	bx	lr
    ef1c:	20000f10 	.word	0x20000f10

0000ef20 <_isatty>:
    ef20:	2258      	movs	r2, #88	; 0x58
    ef22:	4b02      	ldr	r3, [pc, #8]	; (ef2c <_isatty+0xc>)
    ef24:	2000      	movs	r0, #0
    ef26:	601a      	str	r2, [r3, #0]
    ef28:	4770      	bx	lr
    ef2a:	46c0      	nop			; (mov r8, r8)
    ef2c:	20000f10 	.word	0x20000f10

0000ef30 <_kill>:
    ef30:	2258      	movs	r2, #88	; 0x58
    ef32:	2001      	movs	r0, #1
    ef34:	4b01      	ldr	r3, [pc, #4]	; (ef3c <_kill+0xc>)
    ef36:	4240      	negs	r0, r0
    ef38:	601a      	str	r2, [r3, #0]
    ef3a:	4770      	bx	lr
    ef3c:	20000f10 	.word	0x20000f10

0000ef40 <_lseek>:
    ef40:	2258      	movs	r2, #88	; 0x58
    ef42:	2001      	movs	r0, #1
    ef44:	4b01      	ldr	r3, [pc, #4]	; (ef4c <_lseek+0xc>)
    ef46:	4240      	negs	r0, r0
    ef48:	601a      	str	r2, [r3, #0]
    ef4a:	4770      	bx	lr
    ef4c:	20000f10 	.word	0x20000f10

0000ef50 <_read>:
    ef50:	2258      	movs	r2, #88	; 0x58
    ef52:	2001      	movs	r0, #1
    ef54:	4b01      	ldr	r3, [pc, #4]	; (ef5c <_read+0xc>)
    ef56:	4240      	negs	r0, r0
    ef58:	601a      	str	r2, [r3, #0]
    ef5a:	4770      	bx	lr
    ef5c:	20000f10 	.word	0x20000f10

0000ef60 <_sbrk>:
    ef60:	4a04      	ldr	r2, [pc, #16]	; (ef74 <_sbrk+0x14>)
    ef62:	6813      	ldr	r3, [r2, #0]
    ef64:	2b00      	cmp	r3, #0
    ef66:	d003      	beq.n	ef70 <_sbrk+0x10>
    ef68:	1818      	adds	r0, r3, r0
    ef6a:	6010      	str	r0, [r2, #0]
    ef6c:	0018      	movs	r0, r3
    ef6e:	4770      	bx	lr
    ef70:	4b01      	ldr	r3, [pc, #4]	; (ef78 <_sbrk+0x18>)
    ef72:	e7f9      	b.n	ef68 <_sbrk+0x8>
    ef74:	20000f0c 	.word	0x20000f0c
    ef78:	20000f14 	.word	0x20000f14

0000ef7c <_write>:
    ef7c:	2258      	movs	r2, #88	; 0x58
    ef7e:	2001      	movs	r0, #1
    ef80:	4b01      	ldr	r3, [pc, #4]	; (ef88 <_write+0xc>)
    ef82:	4240      	negs	r0, r0
    ef84:	601a      	str	r2, [r3, #0]
    ef86:	4770      	bx	lr
    ef88:	20000f10 	.word	0x20000f10

0000ef8c <_exit>:
    ef8c:	e7fe      	b.n	ef8c <_exit>
    ef8e:	46c0      	nop			; (mov r8, r8)

0000ef90 <_init>:
    ef90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef92:	46c0      	nop			; (mov r8, r8)
    ef94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ef96:	bc08      	pop	{r3}
    ef98:	469e      	mov	lr, r3
    ef9a:	4770      	bx	lr

0000ef9c <_fini>:
    ef9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef9e:	46c0      	nop			; (mov r8, r8)
    efa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    efa2:	bc08      	pop	{r3}
    efa4:	469e      	mov	lr, r3
    efa6:	4770      	bx	lr
    efa8:	706d6574 	.word	0x706d6574
    efac:	00          	.byte	0x00
    efad:	63          	.byte	0x63
    efae:	6766      	.short	0x6766
    efb0:	6300433d 	.word	0x6300433d
    efb4:	463d6766 	.word	0x463d6766
    efb8:	00          	.byte	0x00
    efb9:	44          	.byte	0x44
    efba:	5448      	.short	0x5448
    efbc:	53203131 	.word	0x53203131
    efc0:	6f736e65 	.word	0x6f736e65
    efc4:	6e492072 	.word	0x6e492072
    efc8:	61697469 	.word	0x61697469
    efcc:	657a696c 	.word	0x657a696c
    efd0:	2d002164 	.word	0x2d002164
    efd4:	2d2d2d2d 	.word	0x2d2d2d2d
    efd8:	2d2d2d2d 	.word	0x2d2d2d2d
    efdc:	2d2d2d2d 	.word	0x2d2d2d2d
    efe0:	2d2d2d2d 	.word	0x2d2d2d2d
    efe4:	2d2d2d2d 	.word	0x2d2d2d2d
    efe8:	2d2d2d2d 	.word	0x2d2d2d2d
    efec:	2d2d2d2d 	.word	0x2d2d2d2d
    eff0:	2d2d2d2d 	.word	0x2d2d2d2d
    eff4:	002d2d2d 	.word	0x002d2d2d
    eff8:	736e6553 	.word	0x736e6553
    effc:	203a726f 	.word	0x203a726f
    f000:	20202020 	.word	0x20202020
    f004:	44002020 	.word	0x44002020
    f008:	65766972 	.word	0x65766972
    f00c:	65562072 	.word	0x65562072
    f010:	20203a72 	.word	0x20203a72
    f014:	6e550020 	.word	0x6e550020
    f018:	65757169 	.word	0x65757169
    f01c:	3a444920 	.word	0x3a444920
    f020:	20202020 	.word	0x20202020
    f024:	78614d00 	.word	0x78614d00
    f028:	6c615620 	.word	0x6c615620
    f02c:	203a6575 	.word	0x203a6575
    f030:	00202020 	.word	0x00202020
    f034:	4d004320 	.word	0x4d004320
    f038:	56206e69 	.word	0x56206e69
    f03c:	65756c61 	.word	0x65756c61
    f040:	2020203a 	.word	0x2020203a
    f044:	65520020 	.word	0x65520020
    f048:	756c6f73 	.word	0x756c6f73
    f04c:	6e6f6974 	.word	0x6e6f6974
    f050:	2020203a 	.word	0x2020203a
    f054:	00          	.byte	0x00
    f055:	25          	.byte	0x25
    f056:	322e      	.short	0x322e
    f058:	25002c66 	.word	0x25002c66
    f05c:	54002c64 	.word	0x54002c64
    f060:	20706d65 	.word	0x20706d65
    f064:	6c796150 	.word	0x6c796150
    f068:	3a64616f 	.word	0x3a64616f
    f06c:	00732520 	.word	0x00732520
    f070:	2e303231 	.word	0x2e303231
    f074:	002c3030 	.word	0x002c3030
    f078:	33322e30 	.word	0x33322e30
    f07c:	0000002c 	.word	0x0000002c

0000f080 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    f088:	00002c2b 00002b0d 00002a69              +,...+..i*..

0000f094 <_ZL14STRING_PRODUCT>:
    f094:	20425355 42204f49 6472616f 03040000              USB IO Board..

0000f0a2 <_ZL15STRING_LANGUAGE>:
    f0a2:	04090304                                ....

0000f0a6 <_ZL19STRING_MANUFACTURER>:
    f0a6:	7474614d 54726961 20686365 00434c4c     MattairTech LLC.

0000f0b6 <_ZL21USB_DeviceDescriptorC>:
    f0b6:	01100112 40000002 055716d0 02010100     .......@..W.....
    f0c6:	48440103 00313154 32544844 48440031     ..DHT11.DHT21.DH
    f0d6:	00323254 3f544844 00000000                       T22.DHT?..

0000f0e0 <_ZTVN11DHT_Unified11TemperatureE>:
	...
    f0e8:	00003dcd 00003e3d 00003dc9 00003dcf     .=..=>...=...=..
    f0f8:	00003ee1                                .>..

0000f0fc <_ZTVN11DHT_Unified8HumidityE>:
	...
    f104:	00003dcb 00003e31 00003dc9 00003e01     .=..1>...=...>..
    f114:	00003f59 656d6954 3025203a 253a6432     Y?..Time: %02d:%
    f124:	3a643230 64323025 4400203a 3a657461     02d:%02d: .Date:
    f134:	32302520 30253a64 253a6432 20643230      %02d:%02d:%02d 
    f144:	6e6f6d5b 7961643a 6165793a 54005d72     [mon:day:year].T
    f154:	3a656d69 32302520 30253a64 253a6432     ime: %02d:%02d:%
    f164:	20643230 3a72685b 3a6e696d 5d636573     02d [hr:min:sec]
    f174:	3a732500 30252000 43007832 20524f42     .%s:. %02x.CBOR 
    f184:	6c796150 2064616f 706d7544 7246003a     Payload Dump:.Fr
    f194:	52206565 203a6d61 24006425 61002300     ee Ram: %d.$.#.a
    f1a4:	69756472 49006f6e 6e6f7274 66655220     rduino.Itron Ref
    f1b4:	6e657265 43206563 2050416f 76726553     erence CoAP Serv
    f1c4:	203a7265 342e3100 4900362e 6e6f7274     er: .1.4.6.Itron
    f1d4:	50415320 00203a49 2e302e31 6f4e0030      SAPI: .1.0.0.No
    f1e4:	30322076 31303220 34310039 3a34313a     v 20 2019.14:14:
    f1f4:	42003832 646c6975 6d695420 25203a65     28.Build Time: %
    f204:	44202073 3a657461 00732520 00676663     s  Date: %s.cfg.
    f214:	736e6573 72726300 756f7365 68656372     sens.crresourceh
    f224:	6c646e61 203a7265 20544547 74617473     andler: GET stat
    f234:	203a7375 6c206425 203a6e65 62206425     us: %d len: %d b
    f244:	73657479 74655300 73624f20 65767265     ytes.Set Observe
    f254:	64492072 6425203a 67655200 65747369     r Id: %d.Registe
    f264:	20646572 736e6573 203a726f 53007325     red sensor: %s.S
    f274:	20495041 6573626f 20657672 20726f66     API observe for 
    f284:	736e6573 203a726f 63007325 6c706d6f     sensor: %s.compl
    f294:	00657465 6c696166 45006465 7265746e     ete.failed.Enter
    f2a4:	796e6120 79656b20 206f7420 74206f67      any key to go t
    f2b4:	6f42206f 7250746f 6172676f 6f4e006d     o BootProgram.No
    f2c4:	74614420 00000061                        Data...

0000f2cc <g_APinDescription>:
    f2cc:	09190801 0000703f 80080208 09190901     ....?p..........
    f2dc:	0000703f 80090309 08190200 0000006f     ?p..........o...
    f2ec:	80120080 08190300 000000af 80120180     ................
    f2fc:	08190400 000000af 80120480 08190500     ................
    f30c:	0000006f 80120580 08190600 0000002f     o.........../...
    f31c:	80120680 08190700 0000002f 80120780     ......../.......
    f32c:	08190800 0000402f 80121080 08190900     ..../@..........
    f33c:	0000402f 80121180 08190a00 0000402f     /@........../@..
    f34c:	80121280 08190b00 0000403f 800b1380     ........?@......
    f35c:	08190c00 0000701f 800c1620 08190d00     .....p.. .......
    f36c:	0000701f 800d1621 08190a01 0000301f     .p..!........0..
    f37c:	800a1618 08190b01 0000300f 80121619     .........0......
    f38c:	08191000 0000401f 80001680 08191100     .....@..........
    f39c:	0000401f 80011680 09191200 0000401f     .@...........@..
    f3ac:	80021680 09191300 0000401f 80031680     .........@......
    f3bc:	0a191400 0000701f 80041602 0a191500     .....p..........
    f3cc:	0000701f 80051603 0b191600 0000700f     .p...........p..
    f3dc:	80121600 0b191700 0000700f 80121601     .........p......
    f3ec:	08191800 0000800f 80121680 08191900     ................
    f3fc:	0000800f 80121680 001b0004 00000000     ................
    f40c:	80121680 08191b00 0000000f 80121680     ................
    f41c:	001b0004 00000000 80121680 001b0004     ................
    f42c:	00000000 80121680 08191e00 0000300f     .............0..
    f43c:	80121610 08191f00 0000300f 80121611     .........0......
    f44c:	08191601 0000001f 80061680 08191701     ................
    f45c:	0000001f 80071680 08190201 0000002f     ............/...
    f46c:	80120a80 08190301 0000002f 80120b80     ......../.......
    f47c:	00000a0d                                ....

0000f480 <_ZTV4Uart>:
	...
    f488:	00005175 00004ba1 00005047 0000502f     uQ...K..GP../P..
    f498:	00005025 00005051 00005085 00004ff9     %P..QP...P...O..
    f4a8:	00005255 00005009 00004ff5              UR...P...O..

0000f4b4 <_ZTV7Serial_>:
	...
    f4bc:	00005335 00005361 00005331 00005355     5S..aS..1S..US..
    f4cc:	00005349 00005399 0000537d 13121110     IS...S..}S......
    f4dc:	17161514 42411918 01004b43 00003713     ......ABCK...7..
    f4ec:	00010000 00020000 00040000 00080000     ................
    f4fc:	00100000 00200000 00400000 00800000     ...... ...@.....
    f50c:	01000000 02000000 00200000 00400000     .......... ...@.
    f51c:	00800000 00800000 00040000 00080000     ................
    f52c:	00400000 00080000 1f01bfef 37c86220     ..@......... b.7
    f53c:	262030c2 6f3e2d6f 3d3c206c 7a697320     .0 &o->ol <= siz
    f54c:	28666f65 746e6975 745f3233 2e2e0029     eof(uint32_t)...
    f55c:	6372732f 62696c2f 69726172 732f7365     /src/libraries/s
    f56c:	5f696e73 70616f63 7265735f 2f726576     sni_coap_server/
    f57c:	70616f63 2e67736d 00707063              coapmsg.cpp.

0000f588 <_ZZ13co_uint32_n2hPK5optlvE19__PRETTY_FUNCTION__>:
    f588:	746e6975 745f3233 5f6f6320 746e6975     uint32_t co_uint
    f598:	6e5f3233 63286832 74736e6f 74706f20     32_n2h(const opt
    f5a8:	292a766c 74706f00 766f3e2d 64694400     lv*).opt->ov.Did
    f5b8:	2074276e 646e6966 74706f20 206e6f69     n't find option 
    f5c8:	74206425 6564206f 6574656c 6468002e     %d to delete..hd
    f5d8:	2f2e2e00 2f637273 7262696c 65697261     .../src/librarie
    f5e8:	73732f73 635f696e 5f70616f 76726573     s/ssni_coap_serv
    f5f8:	632f7265 6f70616f 632e7470 65007070              er/coapopt.cpp.

0000f607 <_ZZ17copt_del_opt_typeP5sl_cotE19__PRETTY_FUNCTION__>:
    f607:	6f727265 20745f72 74706f63 6c65645f     error_t copt_del
    f617:	74706f5f 7079745f 6c732865 2a6f635f     _opt_type(sl_co*
    f627:	6975202c 3631746e 0029745f              , uint16_t).

0000f633 <_ZZ22copt_get_next_opt_typePK5sl_cotPPvE19__PRETTY_FUNCTION__>:
    f633:	6c74706f 63202a76 5f74706f 5f746567     optlv* copt_get_
    f643:	7478656e 74706f5f 7079745f 6f632865     next_opt_type(co
    f653:	2074736e 635f6c73 202c2a6f 746e6975     nst sl_co*, uint
    f663:	745f3631 6f76202c 2a2a6469 612f0029     16_t, void**)./a
    f673:	69756472 252f6f6e 65440073 6765722d     rduino/%s.De-reg
    f683:	65747369 624f2072 76726573 25203a65     ister Observe: %
    f693:	69740064 3d656c74 666e4922 633b226f     d.title="Info";c
    f6a3:	00303d74 6c65772e 6e6b2d6c 006e776f     t=0..well-known.
    f6b3:	223d6669 22737973 7469743b 223d656c     if="sys";title="
    f6c3:	74737953 3b226d65 343d7463 65723b32     System";ct=42;re
    f6d3:	3b313d76 73797300 3d666900 64726122     v=1;.sys.if="ard
    f6e3:	6f6e6975 69743b22 3d656c74 64724122     uino";title="Ard
    f6f3:	6f6e6975 6e655320 73726f73 74633b22     uino Sensors";ct
    f703:	3b32343d 726f6300 2f3c0065 6d697400     =42;.core.</.tim
    f713:	70450065 2068636f 20726f66 20544547     e.Epoch for GET 
    f723:	7320666f 74207379 3a656d69 38302520     of sys time: %08
    f733:	55500078 732f2054 742f7379 20656d69     x.PUT /sys/time 
    f743:	6c796150 0064616f 74746553 20676e69     Payload.Setting 
    f753:	20435452 65206f74 68636f70 3025203a     RTC to epoch: %0
    f763:	73007838 73746174 646f6d00 616f633d     8x.stats.mod=coa
    f773:	6f6d0070 77703d64 45470072 73282054     p.mod=pwr.GET (s
    f783:	75746174 64252073 65722029 25206461     tatus %d) read %
    f793:	79622064 2e736574 54455300 74732820     d bytes..SET (st
    f7a3:	73757461 29642520 6553002e 6e69646e     atus %d)..Sendin
    f7b3:	65722067 20746573 6e657665 6f742074     g reset event to
    f7c3:	696e6d20 03500063                                 mnic.

0000f7c9 <_ZL6rbtput>:
    f7c9:	ffff0350 737973b3 736e7304 76654672     P....sys.snsrFev
    f7d9:	7462723d 434c4448 696e6920 6c616974     =rbtHDLC initial
    f7e9:	74617a69 206e6f69 6c696166 00216465     ization failed!.
    f7f9:	6f6c6c41 65746163 75626d20 69772066     Allocate mbuf wi
    f809:	73206874 3a657a69 00642520 732f2e2e     th size: %d.../s
    f819:	6c2f6372 61726269 73656972 6e73732f     rc/libraries/ssn
    f829:	6f635f69 735f7061 65767265 62682f72     i_coap_server/hb
    f839:	632e6675 6d007070                                uf.cpp.

0000f840 <_ZZ5m_getvE19__PRETTY_FUNCTION__>:
    f840:	6675626d 5f6d202a 28746567 68540029     mbuf* m_get().Th
    f850:	616d2065 61702078 616f6c79 69732064     e max payload si
    f860:	7320657a 69636570 64656966 20736920     ze specified is 
    f870:	206f6f74 6772616c 25203a65 79622064     too large: %d by
    f880:	2e736574 65685420 78616d20 6d756d69     tes. The maximum
    f890:	6c6c6120 6465776f 20736920 62206425      allowed is %d b
    f8a0:	73657479 73680020 65722e73 2e007663     ytes .hss.recv..
    f8b0:	72732f2e 696c2f63 72617262 2f736569     ./src/libraries/
    f8c0:	696e7373 616f635f 65735f70 72657672     ssni_coap_server
    f8d0:	6c64682f 632e7363 76007070                       /hdlcs.cpp.

0000f8db <_ZZL13hdlcs_get_bufiE19__PRETTY_FUNCTION__>:
    f8db:	64696f76 6c646820 675f7363 625f7465     void hdlcs_get_b
    f8eb:	69286675 0029746e 636e7546 6e6f6974     uf(int).Function
    f8fb:	65786520 65747563 75732064 73656363      executed succes
    f90b:	6c756673 4300796c 6b636568 756f7920     sfully.Check you
    f91b:	69772072 676e6972 6c46202e 20687361     r wiring. Flash 
    f92b:	70696863 20736920 2d6e6f6e 70736572     chip is non-resp
    f93b:	69736e6f 002e6576 6e6f632a 75727473     onsive..*constru
    f94b:	726f7463 5f666f5f 696f6863 2e2a6563     ctor_of_choice*.
    f95b:	69676562 2029286e 20736177 20746f6e     begin() was not 
    f96b:	6c6c6163 69206465 6f76206e 73206469     called in void s
    f97b:	70757465 55002928 6c62616e 6f742065     etup().Unable to
    f98b:	65646920 6669746e 68632079 202e7069      identify chip. 
    f99b:	20657241 20756f79 65727573 69687420     Are you sure thi
    f9ab:	68632073 69207069 75732073 726f7070     s chip is suppor
    f9bb:	3f646574 616e5500 20656c62 69206f74     ted?.Unable to i
    f9cb:	746e6564 20796669 61706163 79746963     dentify capacity
    f9db:	7349202e 69687420 68632073 6f207069     . Is this chip o
    f9eb:	63696666 6c6c6169 75732079 726f7070     fficially suppor
    f9fb:	3f646574 20664920 2c746f6e 656c7020     ted? If not, ple
    fa0b:	20657361 69666564 6120656e 41436020     ase define a `CA
    fa1b:	49434150 20605954 736e6f63 746e6174     PACITY` constant
    fa2b:	646e6120 636e6920 6564756c 20746920      and include it 
    fa3b:	66206e69 6873616c 6765622e 43286e69     in flash.begin(C
    fa4b:	43415041 29595449 6843002e 69207069     APACITY)..Chip i
    fa5b:	75622073 002e7973 656b614d 72757320     s busy..Make sur
    fa6b:	6c612065 6970206c 6820736e 20657661     e all pins have 
    fa7b:	6e656562 6e6f6320 7463656e 70206465     been connected p
    fa8b:	65706f72 00796c72 65676150 65766f20     roperly.Page ove
    fa9b:	6f6c6672 61682077 65622073 64206e65     rflow has been d
    faab:	62617369 2064656c 20646e61 20656874     isabled and the 
    fabb:	72646461 20737365 6c6c6163 65206465     address called e
    facb:	65656378 74207364 6d206568 726f6d65     xceeds the memor
    fadb:	6e550079 656c6261 206f7420 62616e45     y.Unable to Enab
    faeb:	5720656c 69746972 7420676e 6863206f     le Writing to ch
    fafb:	002e7069 61656c50 6d206573 20656b61     ip..Please make 
    fb0b:	65727573 65687420 4c4f4820 20262044     sure the HOLD & 
    fb1b:	54495257 4f525045 54434554 6e697020     WRITEPROTECT pin
    fb2b:	72612073 75702065 64656c6c 20707520     s are pulled up 
    fb3b:	56206f74 54004343 20736968 74636573     to VCC.This sect
    fb4b:	6120726f 6165726c 63207964 61746e6f     or already conta
    fb5b:	20736e69 61746164 6c50002e 65736165     ins data..Please
    fb6b:	6b616d20 75732065 74206572 73206568      make sure the s
    fb7b:	6f746365 62207372 676e6965 69727720     ectors being wri
    fb8b:	6e657474 206f7420 20657261 73617265     tten to are eras
    fb9b:	002e6465 20756f59 20657261 6e6e7572     ed..You are runn
    fbab:	20676e69 20776f6c 53206e6f 2e4d4152     ing low on SRAM.
    fbbb:	656c5020 20657361 6974706f 6573696d      Please optimise
    fbcb:	756f7920 72702072 6172676f 6f66206d      your program fo
    fbdb:	65622072 72657474 4d415220 61737520     r better RAM usa
    fbeb:	54006567 20736968 636e7566 6e6f6974     ge.This function
    fbfb:	20736920 20746f6e 70707573 6574726f      is not supporte
    fc0b:	79622064 65687420 616c6620 6d206873     d by the flash m
    fc1b:	726f6d65 61682079 61776472 002e6572     emory hardware..
    fc2b:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
    fc3b:	65722f64 656d7573 65706f20 69746172     d/resume operati
    fc4b:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
    fc5b:	68206e6f 66207361 656c6961 72652064     on has failed er
    fc6b:	63726f72 6b636568 6e55002e 656c6261     rorcheck..Unable
    fc7b:	206f7420 62616e65 3420656c 7479622d      to enable 4-byt
    fc8b:	64612065 73657264 676e6973 6e55002e     e addressing..Un
    fc9b:	656c6261 206f7420 61736964 20656c62     able to disable 
    fcab:	79622d34 61206574 65726464 6e697373     4-byte addressin
    fcbb:	54002e67 63206568 20706968 63207369     g..The chip is c
    fccb:	65727275 796c746e 776f7020 64657265     urrently powered
    fcdb:	776f6420 54002e6e 46206568 6873616c      down..The Flash
    fceb:	69686320 6f642070 6e207365 7320746f      chip does not s
    fcfb:	6f707075 53207472 2e504446 616e5500     upport SFDP..Una
    fd0b:	20656c62 72206f74 20646165 73617245     ble to read Eras
    fd1b:	61502065 656d6172 73726574 6f726620     e Parameters fro
    fd2b:	6863206d 202e7069 65766552 6e697472     m chip. Revertin
    fd3b:	6f742067 62696c20 79726172 66656420     g to library def
    fd4b:	746c7561 55002e73 6c62616e 6f742065     aults..Unable to
    fd5b:	61657220 72652064 20657361 656d6974      read erase time
    fd6b:	72662073 66206d6f 6873616c 6d656d20     s from flash mem
    fd7b:	2e79726f 76655220 69747265 7420676e     ory. Reverting t
    fd8b:	696c206f 72617262 65642079 6c756166     o library defaul
    fd9b:	002e7374 62616e55 7420656c 6572206f     ts..Unable to re
    fdab:	70206461 72676f72 74206d61 73656d69     ad program times
    fdbb:	6f726620 6c66206d 20687361 6f6d656d      from flash memo
    fdcb:	202e7972 65766552 6e697472 6f742067     ry. Reverting to
    fddb:	62696c20 79726172 66656420 746c7561      library default
    fdeb:	4e002e73 6843206f 53207069 63656c65     s..No Chip Selec
    fdfb:	69702074 6564206e 656e6966 6e692064     t pin defined in
    fe0b:	65687420 73756320 206d6f74 20495053      the custom SPI 
    fe1b:	61727241 55002e79 6f6e6b6e 65206e77     Array..Unknown e
    fe2b:	726f7272 20664900 73696874 656f6420     rror.If this doe
    fe3b:	6f6e2073 65682074 7220706c 6c6f7365     s not help resol
    fe4b:	632f6576 6972616c 74207966 20736968     ve/clarify this 
    fe5b:	75737369 00202c65 61656c70 72206573     issue, .please r
    fe6b:	65736961 206e6120 75737369 74612065     aise an issue at
    fe7b:	74746820 2f2f3a70 2e777777 68746967      http://www.gith
    fe8b:	632e6275 4d2f6d6f 6f7a7261 532f6867     ub.com/Marzogh/S
    fe9b:	654d4950 79726f6d 7373692f 20736575     PIMemory/issues 
    feab:	68746977 65687420 74656420 736c6961     with the details
    febb:	20666f20 74616877 756f7920 65772072      of what your we
    fecb:	64206572 676e696f 65687720 6874206e     re doing when th
    fedb:	65207369 726f7272 63636f20 65727275     is error occurre
    feeb:	00000064 70786500 72717300 00006674     d....exp.sqrtf..
    fefb:	00000000 00000000                                .....

0000ff00 <halF>:
    ff00:	00000000 3fe00000 00000000 bfe00000     .......?........

0000ff10 <ln2HI>:
    ff10:	fee00000 3fe62e42 fee00000 bfe62e42     ....B..?....B...

0000ff20 <ln2LO>:
    ff20:	35793c76 3dea39ef 35793c76 bdea39ef     v<y5.9.=v<y5.9..
    ff30:	000084e0 000084b0 000084c2 00008404     ................
    ff40:	000084c2 000084a6 000084c2 00008404     ................
    ff50:	000084b0 000084b0 000084a6 00008404     ................
    ff60:	0000840c 0000840c 0000840c 000084c8     ................
    ff70:	000084b0 000084b0 00008484 00008568     ............h...
    ff80:	00008484 000084a6 00008484 00008568     ............h...
    ff90:	000084b0 000084b0 000084a6 00008568     ............h...
    ffa0:	0000840c 0000840c 0000840c 00008572     ............r...
    ffb0:	00008860 000087b0 000087b0 000087ae     `...............
    ffc0:	00008852 00008852 00008848 000087ae     R...R...H.......
    ffd0:	00008852 00008848 00008852 000087ae     R...H...R.......
    ffe0:	00008858 00008858 00008858 000088e8     X...X...X.......
    fff0:	00009660 00009642 000095fc 0000951a     `...B...........
   10000:	000095fc 00009634 000095fc 0000951a     ....4...........
   10010:	00009642 00009642 00009634 0000951a     B...B...4.......
   10020:	00009512 00009512 00009512 00009878     ............x...
   10030:	00009ec0 00009d80 00009d80 00009d7c     ............|...
   10040:	00009e98 00009e98 00009e8a 00009d7c     ............|...
   10050:	00009e98 00009e8a 00009e98 00009d7c     ............|...
   10060:	00009ea0 00009ea0 00009ea0 0000a0a4     ................
   10070:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
   10080:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
   10090:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
   100a0:	20656e69 73256425 000a7325              ine %d%s%s..

000100ac <_global_impure_ptr>:
   100ac:	200000b4 49534f50 00000058              ... POSIX...

000100b8 <DAYS_IN_MONTH>:
   100b8:	0000001f 0000001c 0000001f 0000001e     ................
   100c8:	0000001f 0000001e 0000001f 0000001f     ................
   100d8:	0000001e 0000001f 0000001e 0000001f     ................

000100e8 <_DAYS_BEFORE_MONTH>:
   100e8:	00000000 0000001f 0000003b 0000005a     ........;...Z...
   100f8:	00000078 00000097 000000b5 000000d4     x...............
   10108:	000000f3 00000111 00000130 0000014e     ........0...N...
   10118:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   10128:	464e4900 666e6900 4e414e00 6e616e00     .INF.inf.NAN.nan
   10138:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   10148:	31300046 35343332 39383736 64636261     F.0123456789abcd
   10158:	54006665 4d47005a 31250054 305e5b30     ef.TZ.GMT.%10[^0
   10168:	2b2c392d 6e255d2d 68254d00 2e6e2575     -9,+-]%n.M%hu%n.
   10178:	25756825 68252e6e 006e2575 7568252f     %hu%n.%hu%n./%hu
   10188:	253a6e25 6e257568 7568253a 00006e25              %n:%hu%n:%hu%n.

00010197 <_ctype_>:
   10197:	20202000 20202020 28282020 20282828     .         ((((( 
   101a7:	20202020 20202020 20202020 20202020                     
   101b7:	10108820 10101010 10101010 10101010      ...............
   101c7:	04040410 04040404 10040404 10101010     ................
   101d7:	41411010 41414141 01010101 01010101     ..AAAAAA........
   101e7:	01010101 01010101 01010101 10101010     ................
   101f7:	42421010 42424242 02020202 02020202     ..BBBBBB........
   10207:	02020202 02020202 02020202 10101010     ................
   10217:	00000020 00000000 00000000 00000000      ...............
	...
   10297:	666e4900 74696e69 614e0079 0000004e     .Infinity.NaN...
	...

000102a8 <__sf_fake_stderr>:
	...

000102c8 <__sf_fake_stdin>:
	...

000102e8 <__sf_fake_stdout>:
	...

00010308 <__month_lengths>:
   10308:	0000001f 0000001c 0000001f 0000001e     ................
   10318:	0000001f 0000001e 0000001f 0000001f     ................
   10328:	0000001e 0000001f 0000001e 0000001f     ................
   10338:	0000001f 0000001d 0000001f 0000001e     ................
   10348:	0000001f 0000001e 0000001f 0000001f     ................
   10358:	0000001e 0000001f 0000001e 0000001f     ................

00010368 <__mprec_bigtens>:
   10368:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   10378:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   10388:	7f73bf3c 75154fdd                       <.s..O.u

00010390 <__mprec_tens>:
   10390:	00000000 3ff00000 00000000 40240000     .......?......$@
   103a0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   103b0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   103c0:	00000000 412e8480 00000000 416312d0     .......A......cA
   103d0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   103e0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   103f0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   10400:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   10410:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   10420:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   10430:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   10440:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   10450:	79d99db4 44ea7843                       ...yCx.D

00010458 <p05.6047>:
   10458:	00000005 00000019 0000007d 00010482     ........}.......
   10468:	00010485 00010488 61462d41 3938662d     ........A-Fa-f89
   10478:	33323130 37363534 2d2b005d 00303000     01234567].+-.00.
   10488:	00005878                                xX..

0001048c <__EH_FRAME_BEGIN__>:
   1048c:	00000000                                ....

Disassembly of section .ramfunc:

00010490 <banzai>:
void banzai() {
   10490:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   10492:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
   10494:	4b11      	ldr	r3, [pc, #68]	; (104dc <banzai+0x4c>)
   10496:	4a12      	ldr	r2, [pc, #72]	; (104e0 <banzai+0x50>)
   10498:	3304      	adds	r3, #4
   1049a:	4293      	cmp	r3, r2
   1049c:	d808      	bhi.n	104b0 <banzai+0x20>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1049e:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
   104a2:	4a10      	ldr	r2, [pc, #64]	; (104e4 <banzai+0x54>)
   104a4:	4b10      	ldr	r3, [pc, #64]	; (104e8 <banzai+0x58>)
   104a6:	60da      	str	r2, [r3, #12]
   104a8:	f3bf 8f4f 	dsb	sy
    __NOP();
   104ac:	46c0      	nop			; (mov r8, r8)
   104ae:	e7fd      	b.n	104ac <banzai+0x1c>
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   104b0:	4a0e      	ldr	r2, [pc, #56]	; (104ec <banzai+0x5c>)
	while (!nvmReady())
   104b2:	2101      	movs	r1, #1
   104b4:	0010      	movs	r0, r2
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   104b6:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
   104b8:	420c      	tst	r4, r1
   104ba:	d0fc      	beq.n	104b6 <banzai+0x26>
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   104bc:	2120      	movs	r1, #32
   104be:	8b14      	ldrh	r4, [r2, #24]
   104c0:	31ff      	adds	r1, #255	; 0xff
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   104c2:	089b      	lsrs	r3, r3, #2
   104c4:	005b      	lsls	r3, r3, #1
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   104c6:	4321      	orrs	r1, r4
   104c8:	8311      	strh	r1, [r2, #24]
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   104ca:	61d3      	str	r3, [r2, #28]
          NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
   104cc:	4b08      	ldr	r3, [pc, #32]	; (104f0 <banzai+0x60>)
   104ce:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
   104d0:	2301      	movs	r3, #1
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   104d2:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
   104d4:	421a      	tst	r2, r3
   104d6:	d0fc      	beq.n	104d2 <banzai+0x42>
   104d8:	e7e1      	b.n	1049e <banzai+0xe>
   104da:	46c0      	nop			; (mov r8, r8)
   104dc:	00002000 	.word	0x00002000
   104e0:	00000203 	.word	0x00000203
   104e4:	05fa0004 	.word	0x05fa0004
   104e8:	e000ed00 	.word	0xe000ed00
   104ec:	41004000 	.word	0x41004000
   104f0:	ffffa502 	.word	0xffffa502
