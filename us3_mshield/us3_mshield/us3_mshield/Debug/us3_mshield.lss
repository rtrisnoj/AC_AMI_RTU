
us3_mshield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f390  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000064  00011390  00011390  00011390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002f0  20000000  000113f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001b74  200002f0  000116e4  000202f0  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
  6 .debug_info   000cc568  00000000  00000000  00020371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000f95b  00000000  00000000  000ec8d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000121f3  00000000  00000000  000fc234  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000012f8  00000000  00000000  0010e427  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001e88  00000000  00000000  0010f71f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015890  00000000  00000000  001115a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000232f1  00000000  00000000  00126e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009c54f  00000000  00000000  0014a128  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004e54  00000000  00000000  001e6678  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stab         000000cc  00000000  00000000  001eb4cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      000001b9  00000000  00000000  001eb598  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 f5 25 00 00 d9 25 00 00 f1 25 00 00     ... .%...%...%..
	...
    202c:	d9 25 00 00 00 00 00 00 00 00 00 00 d9 25 00 00     .%...........%..
    203c:	49 26 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     I&...%...%...%..
    204c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 dd 25 00 00     .%...%...%...%..
    205c:	d9 25 00 00 f5 49 00 00 d9 25 00 00 d9 25 00 00     .%...I...%...%..
    206c:	05 4a 00 00 e5 49 00 00 d9 25 00 00 d9 25 00 00     .J...I...%...%..
    207c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    208c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    209c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    20ac:	d9 25 00 00 00 00 00 00                             .%......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	200002f0 	.word	0x200002f0
    20d4:	00000000 	.word	0x00000000
    20d8:	0001138c 	.word	0x0001138c

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	200002f4 	.word	0x200002f4
    2108:	0001138c 	.word	0x0001138c
    210c:	200002ec 	.word	0x200002ec
    2110:	00000000 	.word	0x00000000

00002114 <setup>:

//
//  Arduino setup function.
//
void setup()
{
    2114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sapi_error_t rcode;
	
	// Initialize Sensor API
	sapi_initialize(NULL);
    2116:	2000      	movs	r0, #0
    2118:	f002 fbf2 	bl	4900 <_Z15sapi_initializePc>
	
	// Register temp sensor
	temp_sensor_id = sapi_register_sensor(TEMP_SENSOR_TYPE, temp_init_sensor, temp_read_sensor, temp_read_cfg, temp_write_cfg, 1, 60);
    211c:	233c      	movs	r3, #60	; 0x3c
    211e:	9302      	str	r3, [sp, #8]
    2120:	3b3b      	subs	r3, #59	; 0x3b
    2122:	9301      	str	r3, [sp, #4]
    2124:	4b05      	ldr	r3, [pc, #20]	; (213c <setup+0x28>)
    2126:	4a06      	ldr	r2, [pc, #24]	; (2140 <setup+0x2c>)
    2128:	9300      	str	r3, [sp, #0]
    212a:	4906      	ldr	r1, [pc, #24]	; (2144 <setup+0x30>)
    212c:	4b06      	ldr	r3, [pc, #24]	; (2148 <setup+0x34>)
    212e:	4807      	ldr	r0, [pc, #28]	; (214c <setup+0x38>)
    2130:	f002 f9ae 	bl	4490 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>
	
	// Initialize temp sensor
	rcode = sapi_init_sensor(temp_sensor_id);
    2134:	f002 f9f4 	bl	4520 <_Z16sapi_init_sensorh>
	
	// Initialize echo sensor
	//rcode = sapi_init_sensor(echo_sensor_id);
	
	
}
    2138:	b005      	add	sp, #20
    213a:	bd00      	pop	{pc}
    213c:	0000215d 	.word	0x0000215d
    2140:	00002439 	.word	0x00002439
    2144:	00002485 	.word	0x00002485
    2148:	000023a5 	.word	0x000023a5
    214c:	0000f924 	.word	0x0000f924

00002150 <loop>:

//
// Arduino main loop function.
//
void loop()
{
    2150:	b510      	push	{r4, lr}
	// Call SAPI run to do the heavy lifting
	sapi_run();
    2152:	f002 fc19 	bl	4988 <_Z8sapi_runv>

    2156:	bd10      	pop	{r4, pc}

00002158 <_ZN11DHT_UnifiedD1Ev>:
#include <Adafruit_Sensor.h>
#include <DHT.h>

#define DHT_SENSOR_VERSION 1

class DHT_Unified {
    2158:	4770      	bx	lr
	...

0000215c <_Z14temp_write_cfgPcPh>:
// Write sensor configuration. Processes payload sent from client. Callback called on
//  CoAP Put configuration value
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_write_cfg(char *payload, uint8_t *len)
{
    215c:	b510      	push	{r4, lr}
	if (!strcmp(payload, "cfg=C"))
    215e:	490b      	ldr	r1, [pc, #44]	; (218c <_Z14temp_write_cfgPcPh+0x30>)
{
    2160:	0004      	movs	r4, r0
	if (!strcmp(payload, "cfg=C"))
    2162:	f00a fc58 	bl	ca16 <strcmp>
    2166:	2800      	cmp	r0, #0
    2168:	d103      	bne.n	2172 <_Z14temp_write_cfgPcPh+0x16>
	{
		context.scalecfg = CELSIUS_SCALE;
    216a:	2243      	movs	r2, #67	; 0x43
    216c:	4b08      	ldr	r3, [pc, #32]	; (2190 <_Z14temp_write_cfgPcPh+0x34>)
    216e:	701a      	strb	r2, [r3, #0]
	{
		return SAPI_ERR_NOT_IMPLEMENTED;
	}

	return SAPI_ERR_OK;
}
    2170:	bd10      	pop	{r4, pc}
	else if (!strcmp(payload, "cfg=F"))
    2172:	4908      	ldr	r1, [pc, #32]	; (2194 <_Z14temp_write_cfgPcPh+0x38>)
    2174:	0020      	movs	r0, r4
    2176:	f00a fc4e 	bl	ca16 <strcmp>
    217a:	0003      	movs	r3, r0
		return SAPI_ERR_NOT_IMPLEMENTED;
    217c:	2001      	movs	r0, #1
	else if (!strcmp(payload, "cfg=F"))
    217e:	2b00      	cmp	r3, #0
    2180:	d1f6      	bne.n	2170 <_Z14temp_write_cfgPcPh+0x14>
		context.scalecfg = FAHRENHEIT_SCALE;
    2182:	2146      	movs	r1, #70	; 0x46
    2184:	4a02      	ldr	r2, [pc, #8]	; (2190 <_Z14temp_write_cfgPcPh+0x34>)
	return SAPI_ERR_OK;
    2186:	0018      	movs	r0, r3
		context.scalecfg = FAHRENHEIT_SCALE;
    2188:	7011      	strb	r1, [r2, #0]
    218a:	e7f1      	b.n	2170 <_Z14temp_write_cfgPcPh+0x14>
    218c:	0000f929 	.word	0x0000f929
    2190:	20000310 	.word	0x20000310
    2194:	0000f92f 	.word	0x0000f92f

00002198 <_Z16calculateVoltagev>:
 * relay have to be powered with 3.3V
 * LOW to turn on
 * HIGH to turn off
 */
//digitalWrite(pinRelay, LOW); // turn on tehe light
float calculateVoltage(){
    2198:	b530      	push	{r4, r5, lr}
    219a:	b0a3      	sub	sp, #140	; 0x8c
  //digitalWrite(pinRelay, LOW); //turn on the light
  //analogWrite(pinRelay, 255);
  // Measuring Voltage
  RunningStatistics inputStats;
    219c:	a801      	add	r0, sp, #4
    219e:	f001 ff3a 	bl	4016 <_ZN17RunningStatisticsC1Ev>
  inputStats.setWindowSecs( windowLength );
    21a2:	4b17      	ldr	r3, [pc, #92]	; (2200 <_Z16calculateVoltagev+0x68>)
    21a4:	a801      	add	r0, sp, #4
    21a6:	6819      	ldr	r1, [r3, #0]
    21a8:	f001 ff10 	bl	3fcc <_ZN17RunningStatistics13setWindowSecsEf>

  //take 10000 samples to get more accurate reading
  while(temp != 10000){
    21ac:	4c15      	ldr	r4, [pc, #84]	; (2204 <_Z16calculateVoltagev+0x6c>)
    21ae:	4b16      	ldr	r3, [pc, #88]	; (2208 <_Z16calculateVoltagev+0x70>)
    21b0:	6822      	ldr	r2, [r4, #0]
    21b2:	4d16      	ldr	r5, [pc, #88]	; (220c <_Z16calculateVoltagev+0x74>)
    21b4:	429a      	cmp	r2, r3
    21b6:	d01e      	beq.n	21f6 <_Z16calculateVoltagev+0x5e>
    rawValue = analogRead(A4);
    21b8:	2005      	movs	r0, #5
    21ba:	f001 fc3b 	bl	3a34 <analogRead>
    21be:	4b14      	ldr	r3, [pc, #80]	; (2210 <_Z16calculateVoltagev+0x78>)
    21c0:	6018      	str	r0, [r3, #0]
    inputStats.input(rawValue);
    21c2:	f007 fa5d 	bl	9680 <__aeabi_i2f>
    21c6:	1c01      	adds	r1, r0, #0
    21c8:	a801      	add	r0, sp, #4
    21ca:	f001 ff3f 	bl	404c <_ZN17RunningStatistics5inputEf>

    //Serial.print("Raw Value : ");
    //Serial.println(inputStats.sigma());

    voltageReading = slope * inputStats.sigma();
    21ce:	a801      	add	r0, sp, #4
    21d0:	f001 ff6b 	bl	40aa <_ZN17RunningStatistics5sigmaEv>
    21d4:	4b0f      	ldr	r3, [pc, #60]	; (2214 <_Z16calculateVoltagev+0x7c>)
    21d6:	6819      	ldr	r1, [r3, #0]
    21d8:	f006 ff5e 	bl	9098 <__aeabi_fmul>
    //voltageReading = voltageReading * 40.3231;
    voltageReading = voltageReading * 47.1931;
    21dc:	f009 f88e 	bl	b2fc <__aeabi_f2d>
    21e0:	4b0d      	ldr	r3, [pc, #52]	; (2218 <_Z16calculateVoltagev+0x80>)
    21e2:	4a0e      	ldr	r2, [pc, #56]	; (221c <_Z16calculateVoltagev+0x84>)
    21e4:	f008 fa26 	bl	a634 <__aeabi_dmul>
    21e8:	f009 f8da 	bl	b3a0 <__aeabi_d2f>

    temp = temp + 1;
    21ec:	6823      	ldr	r3, [r4, #0]
    voltageReading = voltageReading * 47.1931;
    21ee:	6028      	str	r0, [r5, #0]
    temp = temp + 1;
    21f0:	3301      	adds	r3, #1
    21f2:	6023      	str	r3, [r4, #0]
  while(temp != 10000){
    21f4:	e7da      	b.n	21ac <_Z16calculateVoltagev+0x14>
  }
	temp = 0;
    21f6:	2300      	movs	r3, #0
  //Serial.print("Voltage = ");
  //Serial.println(voltageReading);

  return voltageReading;
    21f8:	6828      	ldr	r0, [r5, #0]
	temp = 0;
    21fa:	6023      	str	r3, [r4, #0]
 }
    21fc:	b023      	add	sp, #140	; 0x8c
    21fe:	bd30      	pop	{r4, r5, pc}
    2200:	2000035c 	.word	0x2000035c
    2204:	20000354 	.word	0x20000354
    2208:	00002710 	.word	0x00002710
    220c:	20000358 	.word	0x20000358
    2210:	20000350 	.word	0x20000350
    2214:	20000004 	.word	0x20000004
    2218:	404798b7 	.word	0x404798b7
    221c:	80346dc6 	.word	0x80346dc6

00002220 <_Z18readACCurrentValuev>:

 float readACCurrentValue()
{
    2220:	b570      	push	{r4, r5, r6, lr}
  float ACCurrtntValue = 0;
  unsigned int peakVoltage = 0;
    2222:	2400      	movs	r4, #0
{
    2224:	4d17      	ldr	r5, [pc, #92]	; (2284 <_Z18readACCurrentValuev+0x64>)
  unsigned int voltageVirtualValue = 0;  //Vrms
  for (int i = 0; i < 3000; i++ )
  {
    peakVoltage  += analogRead(ACPin);   //read peak voltage
    2226:	2022      	movs	r0, #34	; 0x22
    2228:	f001 fc04 	bl	3a34 <analogRead>
    222c:	3d01      	subs	r5, #1
    222e:	1824      	adds	r4, r4, r0
    delay(1);
    2230:	2001      	movs	r0, #1
    2232:	f000 fa4d 	bl	26d0 <delay>
  for (int i = 0; i < 3000; i++ )
    2236:	2d00      	cmp	r5, #0
    2238:	d1f5      	bne.n	2226 <_Z18readACCurrentValuev+0x6>
  }
  peakVoltage = peakVoltage / 5;
    223a:	2105      	movs	r1, #5
    223c:	0020      	movs	r0, r4
    223e:	f006 f985 	bl	854c <__udivsi3>
  voltageVirtualValue = peakVoltage * 0.707;    //change the peak voltage to the Virtual Value of voltage
    2242:	f009 f823 	bl	b28c <__aeabi_ui2d>
    2246:	4a10      	ldr	r2, [pc, #64]	; (2288 <_Z18readACCurrentValuev+0x68>)
    2248:	4b10      	ldr	r3, [pc, #64]	; (228c <_Z18readACCurrentValuev+0x6c>)
    224a:	f008 f9f3 	bl	a634 <__aeabi_dmul>
    224e:	f006 fb83 	bl	8958 <__aeabi_d2uiz>

  /*The circuit is amplified by 2 times, so it is divided by 2.*/
  voltageVirtualValue = (voltageVirtualValue * Vref / 1024) / 2;
    2252:	f007 fa65 	bl	9720 <__aeabi_ui2f>
    2256:	4b0e      	ldr	r3, [pc, #56]	; (2290 <_Z18readACCurrentValuev+0x70>)
    2258:	6819      	ldr	r1, [r3, #0]
    225a:	f006 ff1d 	bl	9098 <__aeabi_fmul>
    225e:	21ea      	movs	r1, #234	; 0xea
    2260:	0589      	lsls	r1, r1, #22
    2262:	f006 ff19 	bl	9098 <__aeabi_fmul>
    2266:	21fc      	movs	r1, #252	; 0xfc
    2268:	0589      	lsls	r1, r1, #22
    226a:	f006 ff15 	bl	9098 <__aeabi_fmul>
    226e:	f006 fb5b 	bl	8928 <__aeabi_f2uiz>

  ACCurrtntValue = voltageVirtualValue * ACTectionRange;
    2272:	2314      	movs	r3, #20
    2274:	4358      	muls	r0, r3
    2276:	f007 fa53 	bl	9720 <__aeabi_ui2f>

  return ACCurrtntValue/1000;
    227a:	4906      	ldr	r1, [pc, #24]	; (2294 <_Z18readACCurrentValuev+0x74>)
    227c:	f006 fd1c 	bl	8cb8 <__aeabi_fdiv>
}
    2280:	bd70      	pop	{r4, r5, r6, pc}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	00000bb8 	.word	0x00000bb8
    2288:	76c8b439 	.word	0x76c8b439
    228c:	3fe69fbe 	.word	0x3fe69fbe
    2290:	2000030c 	.word	0x2000030c
    2294:	447a0000 	.word	0x447a0000

00002298 <_Z18temp_build_payloadPcPf>:
//
//  Note that the payload is text. Payloads can also be a byte array of binary data.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_build_payload(char *buf, float *reading)
{
    2298:	b5f0      	push	{r4, r5, r6, r7, lr}
	char 		payload[64];
	char		reading_buf[32];
	char        datatype30[] = "30,";
    229a:	4b38      	ldr	r3, [pc, #224]	; (237c <_Z18temp_build_payloadPcPf+0xe4>)
{
    229c:	b09f      	sub	sp, #124	; 0x7c
	char        datatype30[] = "30,";
    229e:	9302      	str	r3, [sp, #8]
	char		datatype31[] = "31,"; //current datatype is 31
    22a0:	4b37      	ldr	r3, [pc, #220]	; (2380 <_Z18temp_build_payloadPcPf+0xe8>)
	char		unitVoltage[] = "V";
    22a2:	466a      	mov	r2, sp
	char		datatype31[] = "31,"; //current datatype is 31
    22a4:	9303      	str	r3, [sp, #12]
	char		unitVoltage[] = "V";
    22a6:	2356      	movs	r3, #86	; 0x56
{
    22a8:	0007      	movs	r7, r0
	char		unitVoltage[] = "V";
    22aa:	8013      	strh	r3, [r2, #0]
	char		unitCurrent[] = "A";
    22ac:	ac01      	add	r4, sp, #4
    22ae:	3b15      	subs	r3, #21
	char		unit_buf[4];
	time_t     	epoch;
	uint32_t	indx;
	char    rvoltage[] = "120.00,";
    22b0:	2208      	movs	r2, #8
    22b2:	4934      	ldr	r1, [pc, #208]	; (2384 <_Z18temp_build_payloadPcPf+0xec>)
    22b4:	a807      	add	r0, sp, #28
	char		unitCurrent[] = "A";
    22b6:	8023      	strh	r3, [r4, #0]
	char    rvoltage[] = "120.00,";
    22b8:	f009 fa97 	bl	b7ea <memcpy>
	char    rcurrent[] = "0.23,";
    22bc:	4932      	ldr	r1, [pc, #200]	; (2388 <_Z18temp_build_payloadPcPf+0xf0>)
    22be:	2206      	movs	r2, #6
    22c0:	a805      	add	r0, sp, #20
    22c2:	f009 fa92 	bl	b7ea <memcpy>
	char    temp_epoch[20];
	
	
	
	Vref = readVref();
    22c6:	4a31      	ldr	r2, [pc, #196]	; (238c <_Z18temp_build_payloadPcPf+0xf4>)
    22c8:	4b31      	ldr	r3, [pc, #196]	; (2390 <_Z18temp_build_payloadPcPf+0xf8>)
    22ca:	601a      	str	r2, [r3, #0]
	sprintf(rvoltage, "%.2f,", calculateVoltage());
    22cc:	f7ff ff64 	bl	2198 <_Z16calculateVoltagev>
    22d0:	f009 f814 	bl	b2fc <__aeabi_f2d>
    22d4:	4d2f      	ldr	r5, [pc, #188]	; (2394 <_Z18temp_build_payloadPcPf+0xfc>)
    22d6:	0002      	movs	r2, r0
    22d8:	000b      	movs	r3, r1
    22da:	a807      	add	r0, sp, #28
    22dc:	0029      	movs	r1, r5
    22de:	f00a fb6b 	bl	c9b8 <siprintf>
	sprintf(rcurrent, "%.2f,", readACCurrentValue());
    22e2:	f7ff ff9d 	bl	2220 <_Z18readACCurrentValuev>
    22e6:	f009 f809 	bl	b2fc <__aeabi_f2d>
    22ea:	000b      	movs	r3, r1
    22ec:	0002      	movs	r2, r0
    22ee:	0029      	movs	r1, r5
    22f0:	a805      	add	r0, sp, #20
    22f2:	f00a fb61 	bl	c9b8 <siprintf>
	
	// Create string containing the UNIX epoch
	epoch = get_rtc_epoch();
    22f6:	f001 fef7 	bl	40e8 <_Z13get_rtc_epochv>
    22fa:	0006      	movs	r6, r0
	sprintf(temp_epoch, "%d,", epoch);
    22fc:	4d26      	ldr	r5, [pc, #152]	; (2398 <_Z18temp_build_payloadPcPf+0x100>)
    22fe:	0002      	movs	r2, r0
    2300:	0029      	movs	r1, r5
    2302:	a809      	add	r0, sp, #36	; 0x24
    2304:	f00a fb58 	bl	c9b8 <siprintf>
	sprintf(payload, "%d,", epoch);
    2308:	0032      	movs	r2, r6
    230a:	0029      	movs	r1, r5
    230c:	a80e      	add	r0, sp, #56	; 0x38
    230e:	f00a fb53 	bl	c9b8 <siprintf>
	strcat(payload, datatype30);
    2312:	a902      	add	r1, sp, #8
    2314:	a80e      	add	r0, sp, #56	; 0x38
    2316:	f00a fb71 	bl	c9fc <strcat>
	strcat(payload, rvoltage);
    231a:	a907      	add	r1, sp, #28
    231c:	a80e      	add	r0, sp, #56	; 0x38
    231e:	f00a fb6d 	bl	c9fc <strcat>
	strcpy(unit_buf, unitVoltage);
    2322:	4669      	mov	r1, sp
    2324:	a804      	add	r0, sp, #16
    2326:	f00a fb80 	bl	ca2a <strcpy>
	strcat(payload, unit_buf);
    232a:	a904      	add	r1, sp, #16
    232c:	a80e      	add	r0, sp, #56	; 0x38
    232e:	f00a fb65 	bl	c9fc <strcat>
	strcat(payload, ";");
    2332:	491a      	ldr	r1, [pc, #104]	; (239c <_Z18temp_build_payloadPcPf+0x104>)
    2334:	a80e      	add	r0, sp, #56	; 0x38
    2336:	f00a fb61 	bl	c9fc <strcat>
	
	strcat(payload,temp_epoch);
    233a:	a909      	add	r1, sp, #36	; 0x24
    233c:	a80e      	add	r0, sp, #56	; 0x38
    233e:	f00a fb5d 	bl	c9fc <strcat>
	strcat(payload, datatype31);
    2342:	a903      	add	r1, sp, #12
    2344:	a80e      	add	r0, sp, #56	; 0x38
    2346:	f00a fb59 	bl	c9fc <strcat>
	strcat(payload, rcurrent);
    234a:	a905      	add	r1, sp, #20
    234c:	a80e      	add	r0, sp, #56	; 0x38
    234e:	f00a fb55 	bl	c9fc <strcat>
	strcpy(unit_buf, unitCurrent);
    2352:	0021      	movs	r1, r4
    2354:	a804      	add	r0, sp, #16
    2356:	f00a fb68 	bl	ca2a <strcpy>
	strcat(payload, unit_buf);
    235a:	a904      	add	r1, sp, #16
    235c:	a80e      	add	r0, sp, #56	; 0x38
    235e:	f00a fb4d 	bl	c9fc <strcat>
	strcat(payload, data2);
	strcat(payload, ";A4,");
	sprintf(data4, "%d", valueA4);
	strcat(payload, data4);
*/
	strcpy(buf, payload);
    2362:	a90e      	add	r1, sp, #56	; 0x38
    2364:	0038      	movs	r0, r7
    2366:	f00a fb60 	bl	ca2a <strcpy>
	
	dlog(LOG_DEBUG, "Temp Payload: %s", payload);
    236a:	aa0e      	add	r2, sp, #56	; 0x38
    236c:	490c      	ldr	r1, [pc, #48]	; (23a0 <_Z18temp_build_payloadPcPf+0x108>)
    236e:	2007      	movs	r0, #7
    2370:	f001 ff52 	bl	4218 <_Z4dlogiPKcz>
	return SAPI_ERR_OK;
}
    2374:	2000      	movs	r0, #0
    2376:	b01f      	add	sp, #124	; 0x7c
    2378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	002c3033 	.word	0x002c3033
    2380:	002c3133 	.word	0x002c3133
    2384:	0000f9ec 	.word	0x0000f9ec
    2388:	0000f9f4 	.word	0x0000f9f4
    238c:	454e4000 	.word	0x454e4000
    2390:	2000030c 	.word	0x2000030c
    2394:	0000f9d1 	.word	0x0000f9d1
    2398:	0000f9d7 	.word	0x0000f9d7
    239c:	00010499 	.word	0x00010499
    23a0:	0000f9db 	.word	0x0000f9db

000023a4 <_Z13temp_read_cfgPcPh>:
{
    23a4:	b570      	push	{r4, r5, r6, lr}
    23a6:	000e      	movs	r6, r1
	sapi_error_t rc = temp_build_payload(payload, NULL);
    23a8:	2100      	movs	r1, #0
{
    23aa:	0004      	movs	r4, r0
	sapi_error_t rc = temp_build_payload(payload, NULL);
    23ac:	f7ff ff74 	bl	2298 <_Z18temp_build_payloadPcPf>
    23b0:	0005      	movs	r5, r0
	*len = strlen(payload);
    23b2:	0020      	movs	r0, r4
    23b4:	f00a fb41 	bl	ca3a <strlen>
    23b8:	7030      	strb	r0, [r6, #0]
}
    23ba:	0028      	movs	r0, r5
    23bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000023c0 <_Z10read_dht11Pf>:
//
// Read the temp value from the DHT11 sensor.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t read_dht11(float *reading)
{
    23c0:	b530      	push	{r4, r5, lr}
    float    min_value;                       /**< minimum value of this sensor's value in SI units */
    float    resolution;                      /**< smallest difference between two values reported by this sensor */
    int32_t  min_delay;                       /**< min delay in microseconds between events. zero = not a constant rate */
} sensor_t;

class Adafruit_Sensor {
    23c2:	4b17      	ldr	r3, [pc, #92]	; (2420 <_Z10read_dht11Pf+0x60>)
    23c4:	b08f      	sub	sp, #60	; 0x3c
    23c6:	7f1a      	ldrb	r2, [r3, #28]
    23c8:	0005      	movs	r5, r0
    23ca:	a801      	add	r0, sp, #4
    23cc:	7102      	strb	r2, [r0, #4]
public:
  DHT_Unified(uint8_t pin, uint8_t type, uint8_t count=6, int32_t tempSensorId=-1, int32_t humiditySensorId=-1);
  void begin();

  class Temperature : public Adafruit_Sensor {
    23ce:	4a15      	ldr	r2, [pc, #84]	; (2424 <_Z10read_dht11Pf+0x64>)
	sapi_error_t rc = SAPI_ERR_OK;
	float re = INVALID_TEMP;

	// Get temperature event
	sensors_event_t event;
	dht.temperature().getEvent(&event);
    23d0:	a905      	add	r1, sp, #20
    23d2:	9201      	str	r2, [sp, #4]
    23d4:	6a1a      	ldr	r2, [r3, #32]
    23d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    23d8:	6082      	str	r2, [r0, #8]
    23da:	60c3      	str	r3, [r0, #12]
    23dc:	f001 fcf7 	bl	3dce <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>

	// Check for NaN
	if (isnan(event.temperature))
    23e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
    23e2:	1c21      	adds	r1, r4, #0
    23e4:	1c20      	adds	r0, r4, #0
    23e6:	f007 f913 	bl	9610 <__aeabi_fcmpun>
    23ea:	2800      	cmp	r0, #0
    23ec:	d000      	beq.n	23f0 <_Z10read_dht11Pf+0x30>
	{
		re = NO_SENSOR_TEMP;
    23ee:	4c0e      	ldr	r4, [pc, #56]	; (2428 <_Z10read_dht11Pf+0x68>)
		re = event.temperature;
		rc = SAPI_ERR_OK;
	}
	
	// Reading is in C. Convert to F if needed.
	if (context.scalecfg == FAHRENHEIT_SCALE)
    23f0:	4b0e      	ldr	r3, [pc, #56]	; (242c <_Z10read_dht11Pf+0x6c>)
    23f2:	781b      	ldrb	r3, [r3, #0]
    23f4:	b25b      	sxtb	r3, r3
    23f6:	2b46      	cmp	r3, #70	; 0x46
    23f8:	d10d      	bne.n	2416 <_Z10read_dht11Pf+0x56>
	{
		// Convert from Celsius to Fahrenheit
		re *= 1.8;
    23fa:	1c20      	adds	r0, r4, #0
    23fc:	f008 ff7e 	bl	b2fc <__aeabi_f2d>
    2400:	4a0b      	ldr	r2, [pc, #44]	; (2430 <_Z10read_dht11Pf+0x70>)
    2402:	4b0c      	ldr	r3, [pc, #48]	; (2434 <_Z10read_dht11Pf+0x74>)
    2404:	f008 f916 	bl	a634 <__aeabi_dmul>
    2408:	f008 ffca 	bl	b3a0 <__aeabi_d2f>
		re += 32;
    240c:	2184      	movs	r1, #132	; 0x84
    240e:	05c9      	lsls	r1, r1, #23
    2410:	f006 fac0 	bl	8994 <__aeabi_fadd>
    2414:	1c04      	adds	r4, r0, #0
	}
	
	// Assign output
	*reading = re;
	return rc;
}
    2416:	2000      	movs	r0, #0
	*reading = re;
    2418:	602c      	str	r4, [r5, #0]
}
    241a:	b00f      	add	sp, #60	; 0x3c
    241c:	bd30      	pop	{r4, r5, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	20000318 	.word	0x20000318
    2424:	0000fa64 	.word	0x0000fa64
    2428:	42c80000 	.word	0x42c80000
    242c:	20000310 	.word	0x20000310
    2430:	cccccccd 	.word	0xcccccccd
    2434:	3ffccccc 	.word	0x3ffccccc

00002438 <_Z16temp_read_sensorPcPh>:
	float reading = 0.0;
    2438:	2300      	movs	r3, #0
{
    243a:	b570      	push	{r4, r5, r6, lr}
    243c:	b092      	sub	sp, #72	; 0x48
    243e:	0006      	movs	r6, r0
    rc = read_dht11(&reading);
    2440:	a801      	add	r0, sp, #4
{
    2442:	000d      	movs	r5, r1
	float reading = 0.0;
    2444:	9301      	str	r3, [sp, #4]
    rc = read_dht11(&reading);
    2446:	f7ff ffbb 	bl	23c0 <_Z10read_dht11Pf>
    244a:	1e04      	subs	r4, r0, #0
	if (rc != SAPI_ERR_OK)
    244c:	d10c      	bne.n	2468 <_Z16temp_read_sensorPcPh+0x30>
	rc = temp_build_payload(buffer, &reading);
    244e:	a901      	add	r1, sp, #4
    2450:	a802      	add	r0, sp, #8
    2452:	f7ff ff21 	bl	2298 <_Z18temp_build_payloadPcPf>
	strcpy(payload, buffer);
    2456:	a902      	add	r1, sp, #8
	rc = temp_build_payload(buffer, &reading);
    2458:	0004      	movs	r4, r0
	strcpy(payload, buffer);
    245a:	0030      	movs	r0, r6
    245c:	f00a fae5 	bl	ca2a <strcpy>
	*len = strlen(buffer);
    2460:	a802      	add	r0, sp, #8
    2462:	f00a faea 	bl	ca3a <strlen>
    2466:	7028      	strb	r0, [r5, #0]
}
    2468:	0020      	movs	r0, r4
    246a:	b012      	add	sp, #72	; 0x48
    246c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002470 <_Z18temp_sensor_enablev>:
//
//////////////////////////////////////////////////////////////////////////

sapi_error_t temp_sensor_enable(void)
{
	context.enable = 1;
    2470:	2201      	movs	r2, #1
    2472:	4b03      	ldr	r3, [pc, #12]	; (2480 <_Z18temp_sensor_enablev+0x10>)
	context.alertstate = tsat_cleared;
	return SAPI_ERR_OK;
}
    2474:	2000      	movs	r0, #0
	context.enable = 1;
    2476:	711a      	strb	r2, [r3, #4]
	context.alertstate = tsat_cleared;
    2478:	1892      	adds	r2, r2, r2
    247a:	705a      	strb	r2, [r3, #1]
}
    247c:	4770      	bx	lr
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	20000310 	.word	0x20000310

00002484 <_Z16temp_init_sensorv>:
{
    2484:	b5f0      	push	{r4, r5, r6, r7, lr}
	context.scalecfg = FAHRENHEIT_SCALE;
    2486:	2246      	movs	r2, #70	; 0x46
	context.alertstate = tsat_disabled;
    2488:	2600      	movs	r6, #0
	context.scalecfg = FAHRENHEIT_SCALE;
    248a:	4b33      	ldr	r3, [pc, #204]	; (2558 <_Z16temp_init_sensorv+0xd4>)
{
    248c:	b091      	sub	sp, #68	; 0x44
	context.scalecfg = FAHRENHEIT_SCALE;
    248e:	701a      	strb	r2, [r3, #0]
	context.alertstate = tsat_disabled;
    2490:	705e      	strb	r6, [r3, #1]
	temp_sensor_enable();
    2492:	f7ff ffed 	bl	2470 <_Z18temp_sensor_enablev>
	dht.begin();
    2496:	4c31      	ldr	r4, [pc, #196]	; (255c <_Z16temp_init_sensorv+0xd8>)
    2498:	0020      	movs	r0, r4
    249a:	f001 fced 	bl	3e78 <_ZN11DHT_Unified5beginEv>
	println("DHT11 Sensor Initialized!");
    249e:	4830      	ldr	r0, [pc, #192]	; (2560 <_Z16temp_init_sensorv+0xdc>)
    24a0:	f001 ff78 	bl	4394 <_Z7printlnPKc>
    24a4:	7f23      	ldrb	r3, [r4, #28]
    24a6:	aa02      	add	r2, sp, #8
    24a8:	7113      	strb	r3, [r2, #4]
    24aa:	4b2e      	ldr	r3, [pc, #184]	; (2564 <_Z16temp_init_sensorv+0xe0>)
	dht.temperature().getSensor(&sensor);
    24ac:	0010      	movs	r0, r2
    24ae:	9302      	str	r3, [sp, #8]
    24b0:	6a23      	ldr	r3, [r4, #32]
    24b2:	a906      	add	r1, sp, #24
    24b4:	9304      	str	r3, [sp, #16]
    24b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    24b8:	9301      	str	r3, [sp, #4]
    24ba:	9305      	str	r3, [sp, #20]
    24bc:	f001 fd10 	bl	3ee0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
	println("");
    24c0:	4c29      	ldr	r4, [pc, #164]	; (2568 <_Z16temp_init_sensorv+0xe4>)
    24c2:	0020      	movs	r0, r4
    24c4:	f001 ff66 	bl	4394 <_Z7printlnPKc>
	println("------------------------------------");
    24c8:	4f28      	ldr	r7, [pc, #160]	; (256c <_Z16temp_init_sensorv+0xe8>)
    24ca:	0038      	movs	r0, r7
    24cc:	f001 ff62 	bl	4394 <_Z7printlnPKc>
	print  ("Sensor:       "); println(sensor.name);
    24d0:	4827      	ldr	r0, [pc, #156]	; (2570 <_Z16temp_init_sensorv+0xec>)
    24d2:	f001 ff49 	bl	4368 <_Z5printPKc>
    24d6:	a806      	add	r0, sp, #24
    24d8:	f001 ff5c 	bl	4394 <_Z7printlnPKc>
	print  ("Driver Ver:   "); printnum(sensor.version);    println("");
    24dc:	4825      	ldr	r0, [pc, #148]	; (2574 <_Z16temp_init_sensorv+0xf0>)
    24de:	f001 ff43 	bl	4368 <_Z5printPKc>
    24e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    24e4:	f001 ff6c 	bl	43c0 <_Z8printnumi>
    24e8:	0020      	movs	r0, r4
    24ea:	f001 ff53 	bl	4394 <_Z7printlnPKc>
	print  ("Unique ID:    "); printnum(sensor.sensor_id);  println("");
    24ee:	4822      	ldr	r0, [pc, #136]	; (2578 <_Z16temp_init_sensorv+0xf4>)
    24f0:	f001 ff3a 	bl	4368 <_Z5printPKc>
    24f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    24f6:	f001 ff63 	bl	43c0 <_Z8printnumi>
    24fa:	0020      	movs	r0, r4
    24fc:	f001 ff4a 	bl	4394 <_Z7printlnPKc>
	print  ("Max Value:    "); printnum(sensor.max_value);  println(" C");
    2500:	481e      	ldr	r0, [pc, #120]	; (257c <_Z16temp_init_sensorv+0xf8>)
    2502:	f001 ff31 	bl	4368 <_Z5printPKc>
    2506:	980c      	ldr	r0, [sp, #48]	; 0x30
    2508:	f007 f89a 	bl	9640 <__aeabi_f2iz>
    250c:	f001 ff58 	bl	43c0 <_Z8printnumi>
    2510:	4d1b      	ldr	r5, [pc, #108]	; (2580 <_Z16temp_init_sensorv+0xfc>)
    2512:	0028      	movs	r0, r5
    2514:	f001 ff3e 	bl	4394 <_Z7printlnPKc>
	print  ("Min Value:    "); printnum(sensor.min_value);  println(" C");
    2518:	481a      	ldr	r0, [pc, #104]	; (2584 <_Z16temp_init_sensorv+0x100>)
    251a:	f001 ff25 	bl	4368 <_Z5printPKc>
    251e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2520:	f007 f88e 	bl	9640 <__aeabi_f2iz>
    2524:	f001 ff4c 	bl	43c0 <_Z8printnumi>
    2528:	0028      	movs	r0, r5
    252a:	f001 ff33 	bl	4394 <_Z7printlnPKc>
	print  ("Resolution:   "); printnum(sensor.resolution); println(" C");
    252e:	4816      	ldr	r0, [pc, #88]	; (2588 <_Z16temp_init_sensorv+0x104>)
    2530:	f001 ff1a 	bl	4368 <_Z5printPKc>
    2534:	980e      	ldr	r0, [sp, #56]	; 0x38
    2536:	f007 f883 	bl	9640 <__aeabi_f2iz>
    253a:	f001 ff41 	bl	43c0 <_Z8printnumi>
    253e:	0028      	movs	r0, r5
    2540:	f001 ff28 	bl	4394 <_Z7printlnPKc>
	println("------------------------------------");        println("");
    2544:	0038      	movs	r0, r7
    2546:	f001 ff25 	bl	4394 <_Z7printlnPKc>
    254a:	0020      	movs	r0, r4
    254c:	f001 ff22 	bl	4394 <_Z7printlnPKc>
}
    2550:	0030      	movs	r0, r6
    2552:	b011      	add	sp, #68	; 0x44
    2554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	20000310 	.word	0x20000310
    255c:	20000318 	.word	0x20000318
    2560:	0000f935 	.word	0x0000f935
    2564:	0000fa64 	.word	0x0000fa64
    2568:	0000fe0e 	.word	0x0000fe0e
    256c:	0000f94f 	.word	0x0000f94f
    2570:	0000f974 	.word	0x0000f974
    2574:	0000f983 	.word	0x0000f983
    2578:	0000f992 	.word	0x0000f992
    257c:	0000f9a1 	.word	0x0000f9a1
    2580:	0000f9b0 	.word	0x0000f9b0
    2584:	0000f9b3 	.word	0x0000f9b3
    2588:	0000f9c2 	.word	0x0000f9c2

0000258c <_GLOBAL__sub_I_dht>:
DHT_Unified dht(A1, DHT_TYPE);
    258c:	2301      	movs	r3, #1
sapi_error_t temp_sensor_disable(void)
{
	context.enable = 0;
	context.alertstate = tsat_disabled;
	return SAPI_ERR_OK;
    258e:	b513      	push	{r0, r1, r4, lr}
DHT_Unified dht(A1, DHT_TYPE);
    2590:	4c0b      	ldr	r4, [pc, #44]	; (25c0 <_GLOBAL__sub_I_dht+0x34>)
    2592:	425b      	negs	r3, r3
    2594:	9301      	str	r3, [sp, #4]
    2596:	9300      	str	r3, [sp, #0]
    2598:	220b      	movs	r2, #11
    259a:	3307      	adds	r3, #7
    259c:	2100      	movs	r1, #0
    259e:	0020      	movs	r0, r4
    25a0:	f001 fc52 	bl	3e48 <_ZN11DHT_UnifiedC1Ehhhll>
    25a4:	4a07      	ldr	r2, [pc, #28]	; (25c4 <_GLOBAL__sub_I_dht+0x38>)
    25a6:	4908      	ldr	r1, [pc, #32]	; (25c8 <_GLOBAL__sub_I_dht+0x3c>)
    25a8:	0020      	movs	r0, r4
    25aa:	f005 fd0f 	bl	7fcc <__aeabi_atexit>
float windowLength = 40.0/testFrequency;     // how long to average the signal, for statistist
    25ae:	4b07      	ldr	r3, [pc, #28]	; (25cc <_GLOBAL__sub_I_dht+0x40>)
    25b0:	4807      	ldr	r0, [pc, #28]	; (25d0 <_GLOBAL__sub_I_dht+0x44>)
    25b2:	6819      	ldr	r1, [r3, #0]
    25b4:	f006 fb80 	bl	8cb8 <__aeabi_fdiv>
    25b8:	4b06      	ldr	r3, [pc, #24]	; (25d4 <_GLOBAL__sub_I_dht+0x48>)
    25ba:	6018      	str	r0, [r3, #0]
    25bc:	bd13      	pop	{r0, r1, r4, pc}
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	20000318 	.word	0x20000318
    25c4:	20000000 	.word	0x20000000
    25c8:	00002159 	.word	0x00002159
    25cc:	20000008 	.word	0x20000008
    25d0:	42200000 	.word	0x42200000
    25d4:	2000035c 	.word	0x2000035c

000025d8 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    25d8:	be03      	bkpt	0x0003
    25da:	e7fe      	b.n	25da <Dummy_Handler+0x2>

000025dc <USB_Handler>:
#else
static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    25dc:	4b03      	ldr	r3, [pc, #12]	; (25ec <USB_Handler+0x10>)
{
    25de:	b510      	push	{r4, lr}
  if (usb_isr)
    25e0:	681b      	ldr	r3, [r3, #0]
    25e2:	2b00      	cmp	r3, #0
    25e4:	d000      	beq.n	25e8 <USB_Handler+0xc>
    usb_isr();
    25e6:	4798      	blx	r3
}
    25e8:	bd10      	pop	{r4, pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	20000360 	.word	0x20000360

000025f0 <HardFault_Handler>:
#endif
#endif

void HardFault_Handler(void)
{
  __BKPT(13);
    25f0:	be0d      	bkpt	0x000d
    25f2:	e7fe      	b.n	25f2 <HardFault_Handler+0x2>

000025f4 <Reset_Handler>:
{
    25f4:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    25f6:	490f      	ldr	r1, [pc, #60]	; (2634 <Reset_Handler+0x40>)
    25f8:	4c0f      	ldr	r4, [pc, #60]	; (2638 <Reset_Handler+0x44>)
    25fa:	42a1      	cmp	r1, r4
    25fc:	d104      	bne.n	2608 <Reset_Handler+0x14>
  SystemInit();
    25fe:	f000 f8f5 	bl	27ec <SystemInit>
  main();
    2602:	f000 f8a3 	bl	274c <main>
    2606:	e7fe      	b.n	2606 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2608:	4d0c      	ldr	r5, [pc, #48]	; (263c <Reset_Handler+0x48>)
    260a:	2300      	movs	r3, #0
    260c:	428d      	cmp	r5, r1
    260e:	d0f6      	beq.n	25fe <Reset_Handler+0xa>
    2610:	18ca      	adds	r2, r1, r3
    2612:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2614:	42a2      	cmp	r2, r4
    2616:	d305      	bcc.n	2624 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2618:	4290      	cmp	r0, r2
    261a:	d0f0      	beq.n	25fe <Reset_Handler+0xa>
    261c:	4b08      	ldr	r3, [pc, #32]	; (2640 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    261e:	4909      	ldr	r1, [pc, #36]	; (2644 <Reset_Handler+0x50>)
      *pDest = 0;
    2620:	2200      	movs	r2, #0
    2622:	e004      	b.n	262e <Reset_Handler+0x3a>
      *pDest = *pSrc;
    2624:	6800      	ldr	r0, [r0, #0]
    2626:	3304      	adds	r3, #4
    2628:	6010      	str	r0, [r2, #0]
    262a:	e7f1      	b.n	2610 <Reset_Handler+0x1c>
      *pDest = 0;
    262c:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    262e:	428b      	cmp	r3, r1
    2630:	d3fc      	bcc.n	262c <Reset_Handler+0x38>
    2632:	e7e4      	b.n	25fe <Reset_Handler+0xa>
    2634:	20000000 	.word	0x20000000
    2638:	200002f0 	.word	0x200002f0
    263c:	000113f4 	.word	0x000113f4
    2640:	200002f0 	.word	0x200002f0
    2644:	20001e64 	.word	0x20001e64

00002648 <SysTick_Handler>:
{
    2648:	b510      	push	{r4, lr}
  if (sysTickHook())
    264a:	f000 f87c 	bl	2746 <sysTickHook>
    264e:	2800      	cmp	r0, #0
    2650:	d101      	bne.n	2656 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    2652:	f000 f863 	bl	271c <SysTick_DefaultHandler>
}
    2656:	bd10      	pop	{r4, pc}

00002658 <USB_SetHandler>:
  usb_isr = new_usb_isr;
    2658:	4b01      	ldr	r3, [pc, #4]	; (2660 <USB_SetHandler+0x8>)
    265a:	6018      	str	r0, [r3, #0]
}
    265c:	4770      	bx	lr
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	20000360 	.word	0x20000360

00002664 <millis>:
#endif

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    2664:	4b01      	ldr	r3, [pc, #4]	; (266c <millis+0x8>)
    2666:	6818      	ldr	r0, [r3, #0]
}
    2668:	4770      	bx	lr
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	20000364 	.word	0x20000364

00002670 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
    2670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    2672:	4813      	ldr	r0, [pc, #76]	; (26c0 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2674:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
    2676:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
    2678:	4912      	ldr	r1, [pc, #72]	; (26c4 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    267a:	4c13      	ldr	r4, [pc, #76]	; (26c8 <micros+0x58>)
  ticks2  = SysTick->VAL;
    267c:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    267e:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
    2680:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2682:	0e9b      	lsrs	r3, r3, #26
    2684:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2686:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
    2688:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    268a:	6862      	ldr	r2, [r4, #4]
    268c:	9f01      	ldr	r7, [sp, #4]
    268e:	0e92      	lsrs	r2, r2, #26
    2690:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
    2692:	4667      	mov	r7, ip
    2694:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    2696:	4293      	cmp	r3, r2
    2698:	d10e      	bne.n	26b8 <micros+0x48>
    269a:	42bd      	cmp	r5, r7
    269c:	d10c      	bne.n	26b8 <micros+0x48>
    269e:	4286      	cmp	r6, r0
    26a0:	d30a      	bcc.n	26b8 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    26a2:	195b      	adds	r3, r3, r5
    26a4:	25fa      	movs	r5, #250	; 0xfa
    26a6:	6848      	ldr	r0, [r1, #4]
    26a8:	00ad      	lsls	r5, r5, #2
    26aa:	1b86      	subs	r6, r0, r6
    26ac:	4807      	ldr	r0, [pc, #28]	; (26cc <micros+0x5c>)
    26ae:	436b      	muls	r3, r5
    26b0:	4370      	muls	r0, r6
    26b2:	0d00      	lsrs	r0, r0, #20
    26b4:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    26b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    26b8:	003d      	movs	r5, r7
    26ba:	0013      	movs	r3, r2
    26bc:	0006      	movs	r6, r0
    26be:	e7e3      	b.n	2688 <micros+0x18>
    26c0:	20000364 	.word	0x20000364
    26c4:	e000e010 	.word	0xe000e010
    26c8:	e000ed00 	.word	0xe000ed00
    26cc:	00005555 	.word	0x00005555

000026d0 <delay>:

void delay( unsigned long ms )
{
    26d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26d2:	1e04      	subs	r4, r0, #0
  if (ms)
    26d4:	d01c      	beq.n	2710 <delay+0x40>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    26d6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    26da:	b672      	cpsid	i
#if !defined(NO_DELAY_HIGH_WORD)
    uint8_t enableInterrupts = ((__get_PRIMASK() & 0x1) == 0);
    __disable_irq();
#endif

    uint32_t start = _ulTickCount ;
    26dc:	4e0d      	ldr	r6, [pc, #52]	; (2714 <delay+0x44>)
#if !defined(NO_DELAY_HIGH_WORD)
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    26de:	4f0e      	ldr	r7, [pc, #56]	; (2718 <delay+0x48>)
    uint32_t start = _ulTickCount ;
    26e0:	6835      	ldr	r5, [r6, #0]
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    26e2:	683a      	ldr	r2, [r7, #0]
    26e4:	9201      	str	r2, [sp, #4]

    if (enableInterrupts) {
    26e6:	07db      	lsls	r3, r3, #31
    26e8:	d400      	bmi.n	26ec <delay+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
    26ea:	b662      	cpsie	i
      __enable_irq();
    }

    // Check for _ulTickCount overflow
    uint32_t remaining = (0xFFFFFFFF - start);
    26ec:	43eb      	mvns	r3, r5
    if (ms > remaining) {
    26ee:	429c      	cmp	r4, r3
    26f0:	d904      	bls.n	26fc <delay+0x2c>
      ms -= (remaining + 1);
    26f2:	1964      	adds	r4, r4, r5
      start = 0;
    26f4:	2500      	movs	r5, #0
      targetTickCountHighWord++;
    26f6:	9b01      	ldr	r3, [sp, #4]
    26f8:	3301      	adds	r3, #1
    26fa:	9301      	str	r3, [sp, #4]
    }
#endif

    do
    {
      yield() ;
    26fc:	f000 f822 	bl	2744 <yield>
#if !defined(NO_DELAY_HIGH_WORD)
    } while (_ulTickCountHighWord < targetTickCountHighWord || (_ulTickCount - start) < ms ) ;
    2700:	683b      	ldr	r3, [r7, #0]
    2702:	9a01      	ldr	r2, [sp, #4]
    2704:	4293      	cmp	r3, r2
    2706:	d3f9      	bcc.n	26fc <delay+0x2c>
    2708:	6833      	ldr	r3, [r6, #0]
    270a:	1b5b      	subs	r3, r3, r5
    270c:	429c      	cmp	r4, r3
    270e:	d8f5      	bhi.n	26fc <delay+0x2c>
#else
    } while (_ulTickCount - start < ms ) ;
#endif
  }
}
    2710:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	20000364 	.word	0x20000364
    2718:	20000368 	.word	0x20000368

0000271c <SysTick_DefaultHandler>:
#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
  // Increment tick count each ms
  _ulTickCount++;
    271c:	4b07      	ldr	r3, [pc, #28]	; (273c <SysTick_DefaultHandler+0x20>)
{
    271e:	b510      	push	{r4, lr}
  _ulTickCount++;
    2720:	681a      	ldr	r2, [r3, #0]
    2722:	3201      	adds	r2, #1
    2724:	601a      	str	r2, [r3, #0]

#if !defined(NO_DELAY_HIGH_WORD)
  if ( _ulTickCount == 0 )
    2726:	681b      	ldr	r3, [r3, #0]
    2728:	2b00      	cmp	r3, #0
    272a:	d103      	bne.n	2734 <SysTick_DefaultHandler+0x18>
  {
    _ulTickCountHighWord++;
    272c:	4a04      	ldr	r2, [pc, #16]	; (2740 <SysTick_DefaultHandler+0x24>)
    272e:	6813      	ldr	r3, [r2, #0]
    2730:	3301      	adds	r3, #1
    2732:	6013      	str	r3, [r2, #0]
  }
#endif
#if defined(CDC_ONLY) || defined(CDC_HID) || defined(WITH_CDC)
  tickReset();
    2734:	f000 f838 	bl	27a8 <tickReset>
#endif
}
    2738:	bd10      	pop	{r4, pc}
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	20000364 	.word	0x20000364
    2740:	20000368 	.word	0x20000368

00002744 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    2744:	4770      	bx	lr

00002746 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    2746:	2000      	movs	r0, #0
    2748:	4770      	bx	lr

0000274a <_Z11initVariantv>:
#include "sam.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    274a:	4770      	bx	lr

0000274c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    274c:	b510      	push	{r4, lr}
  init();
    274e:	f001 f859 	bl	3804 <init>

  __libc_init_array();
    2752:	f008 ffdf 	bl	b714 <__libc_init_array>

  initVariant();
    2756:	f7ff fff8 	bl	274a <_Z11initVariantv>

  delay(1);
    275a:	2001      	movs	r0, #1
    275c:	f7ff ffb8 	bl	26d0 <delay>
#if defined(USBCON) && !defined(USB_DISABLED)
  USBDevice.init();
    2760:	4c08      	ldr	r4, [pc, #32]	; (2784 <main+0x38>)
    2762:	0020      	movs	r0, r4
    2764:	f000 faf6 	bl	2d54 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    2768:	0020      	movs	r0, r4
    276a:	f000 fb53 	bl	2e14 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    276e:	f7ff fcd1 	bl	2114 <setup>

  for (;;)
  {
    loop();
    2772:	f7ff fced 	bl	2150 <loop>
    if (serialEventRun) serialEventRun();
    2776:	4b04      	ldr	r3, [pc, #16]	; (2788 <main+0x3c>)
    2778:	2b00      	cmp	r3, #0
    277a:	d0fa      	beq.n	2772 <main+0x26>
    277c:	e000      	b.n	2780 <main+0x34>
    277e:	bf00      	nop
    2780:	e7f7      	b.n	2772 <main+0x26>
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	2000036c 	.word	0x2000036c
    2788:	00000000 	.word	0x00000000

0000278c <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    278c:	4b01      	ldr	r3, [pc, #4]	; (2794 <initiateReset+0x8>)
    278e:	6018      	str	r0, [r3, #0]
}
    2790:	4770      	bx	lr
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	2000000c 	.word	0x2000000c

00002798 <cancelReset>:

void cancelReset() {
	ticks = -1;
    2798:	2201      	movs	r2, #1
    279a:	4b02      	ldr	r3, [pc, #8]	; (27a4 <cancelReset+0xc>)
    279c:	4252      	negs	r2, r2
    279e:	601a      	str	r2, [r3, #0]
}
    27a0:	4770      	bx	lr
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	2000000c 	.word	0x2000000c

000027a8 <tickReset>:

void tickReset() {
	if (ticks == -1)
    27a8:	4a05      	ldr	r2, [pc, #20]	; (27c0 <tickReset+0x18>)
void tickReset() {
    27aa:	b510      	push	{r4, lr}
	if (ticks == -1)
    27ac:	6813      	ldr	r3, [r2, #0]
    27ae:	1c59      	adds	r1, r3, #1
    27b0:	d005      	beq.n	27be <tickReset+0x16>
		return;
	ticks--;
    27b2:	3b01      	subs	r3, #1
    27b4:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    27b6:	2b00      	cmp	r3, #0
    27b8:	d101      	bne.n	27be <tickReset+0x16>
		banzai();
    27ba:	4b02      	ldr	r3, [pc, #8]	; (27c4 <tickReset+0x1c>)
    27bc:	4798      	blx	r3
}
    27be:	bd10      	pop	{r4, pc}
    27c0:	2000000c 	.word	0x2000000c
    27c4:	00011391 	.word	0x00011391

000027c8 <waitForSync>:
void waitForSync( void )
{
#if (SAMD21 || SAMD11)
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21 || SAMD51)
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    27c8:	4902      	ldr	r1, [pc, #8]	; (27d4 <waitForSync+0xc>)
    27ca:	4b03      	ldr	r3, [pc, #12]	; (27d8 <waitForSync+0x10>)
    27cc:	684a      	ldr	r2, [r1, #4]
    27ce:	421a      	tst	r2, r3
    27d0:	d1fc      	bne.n	27cc <waitForSync+0x4>
#endif
}
    27d2:	4770      	bx	lr
    27d4:	40001800 	.word	0x40001800
    27d8:	000007fd 	.word	0x000007fd

000027dc <waitForPLL>:
{
#if (SAMD51)
  while ( OSCCTRL->Dpll[0].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
  while ( OSCCTRL->Dpll[1].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
#else
  while ( OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
    27dc:	230e      	movs	r3, #14
    27de:	4902      	ldr	r1, [pc, #8]	; (27e8 <waitForPLL+0xc>)
    27e0:	780a      	ldrb	r2, [r1, #0]
    27e2:	421a      	tst	r2, r3
    27e4:	d1fc      	bne.n	27e0 <waitForPLL+0x4>
#endif
}
    27e6:	4770      	bx	lr
    27e8:	40000c38 	.word	0x40000c38

000027ec <SystemInit>:
   * Disable automatic NVM write operations (errata reference 13134, applies to D21/D11/L21, but not C21 or D51)
   */
#if (SAMD21 || SAMD11)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_HALF | NVMCTRL_CTRLB_MANW) ; // one wait state
#elif (SAML21 || SAMC21)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27ec:	2284      	movs	r2, #132	; 0x84
{
    27ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27f0:	4b29      	ldr	r3, [pc, #164]	; (2898 <SystemInit+0xac>)
  /* Turn on the digital interface clock */
#if !defined(TRUST_RESET_DEFAULTS)
#if (SAMD21 || SAMD11)
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
#elif (SAML21 || SAMC21 || SAMD51)
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27f2:	4d2a      	ldr	r5, [pc, #168]	; (289c <SystemInit+0xb0>)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27f4:	605a      	str	r2, [r3, #4]
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27f6:	2340      	movs	r3, #64	; 0x40
    27f8:	696a      	ldr	r2, [r5, #20]
#endif
#endif

#if (SAML21)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    27fa:	2102      	movs	r1, #2
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27fc:	4313      	orrs	r3, r2
    27fe:	616b      	str	r3, [r5, #20]
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2800:	2380      	movs	r3, #128	; 0x80
    2802:	2201      	movs	r2, #1
    2804:	05db      	lsls	r3, r3, #23
    2806:	719a      	strb	r2, [r3, #6]
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    2808:	7898      	ldrb	r0, [r3, #2]
    280a:	4301      	orrs	r1, r0
    280c:	7099      	strb	r1, [r3, #2]
  while ( (PM->INTFLAG.reg & PM_INTFLAG_PLRDY) != PM_INTFLAG_PLRDY );
    280e:	7999      	ldrb	r1, [r3, #6]
    2810:	4211      	tst	r1, r2
    2812:	d0fc      	beq.n	280e <SystemInit+0x22>

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) );	/* Wait for reset to complete */
#elif (SAML21 || SAMC21 || SAMD51)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;

  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    2814:	2101      	movs	r1, #1
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    2816:	4c22      	ldr	r4, [pc, #136]	; (28a0 <SystemInit+0xb4>)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2818:	719a      	strb	r2, [r3, #6]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    281a:	4b22      	ldr	r3, [pc, #136]	; (28a4 <SystemInit+0xb8>)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    281c:	7022      	strb	r2, [r4, #0]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    281e:	7822      	ldrb	r2, [r4, #0]
    2820:	420a      	tst	r2, r1
    2822:	d002      	beq.n	282a <SystemInit+0x3e>
    2824:	6862      	ldr	r2, [r4, #4]
    2826:	421a      	tst	r2, r3
    2828:	d1f9      	bne.n	281e <SystemInit+0x32>
  SYSCTRL->DPLLCTRLA.reg = SYSCTRL_DPLLCTRLA_ENABLE;

  while ( (SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) != SYSCTRL_DPLLSTATUS_CLKRDY );

#elif (SAML21 || SAMC21)
  OSC32KCTRL->XOSC32K.reg = (OSC32KCTRL_XOSC32K_STARTUP( 0x4u ) | OSC32KCTRL_XOSC32K_XTALEN | OSC32KCTRL_XOSC32K_EN32K | OSC32KCTRL_XOSC32K_EN1K);
    282a:	4b1f      	ldr	r3, [pc, #124]	; (28a8 <SystemInit+0xbc>)
    282c:	4a1f      	ldr	r2, [pc, #124]	; (28ac <SystemInit+0xc0>)
    282e:	615a      	str	r2, [r3, #20]
  OSC32KCTRL->XOSC32K.bit.ENABLE = 1;
    2830:	2202      	movs	r2, #2
    2832:	6959      	ldr	r1, [r3, #20]
    2834:	430a      	orrs	r2, r1
    2836:	615a      	str	r2, [r3, #20]

  while ( (OSC32KCTRL->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) == 0 );       /* Wait for oscillator stabilization */
    2838:	2201      	movs	r2, #1
    283a:	68d9      	ldr	r1, [r3, #12]
    283c:	4211      	tst	r1, r2
    283e:	d0fc      	beq.n	283a <SystemInit+0x4e>

  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2840:	4b1b      	ldr	r3, [pc, #108]	; (28b0 <SystemInit+0xc4>)
    2842:	4e1c      	ldr	r6, [pc, #112]	; (28b4 <SystemInit+0xc8>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */

  OSCCTRL->DPLLPRESC.reg = 0;
  waitForPLL();

  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2844:	2702      	movs	r7, #2
  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2846:	62f3      	str	r3, [r6, #44]	; 0x2c
  waitForPLL();
    2848:	f7ff ffc8 	bl	27dc <waitForPLL>
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    284c:	2300      	movs	r3, #0
  OSCCTRL->DPLLPRESC.reg = 0;
    284e:	4a1a      	ldr	r2, [pc, #104]	; (28b8 <SystemInit+0xcc>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    2850:	6333      	str	r3, [r6, #48]	; 0x30
  OSCCTRL->DPLLPRESC.reg = 0;
    2852:	7013      	strb	r3, [r2, #0]
  waitForPLL();
    2854:	f7ff ffc2 	bl	27dc <waitForPLL>
  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2858:	4b18      	ldr	r3, [pc, #96]	; (28bc <SystemInit+0xd0>)
    285a:	701f      	strb	r7, [r3, #0]
  waitForPLL();
    285c:	f7ff ffbe 	bl	27dc <waitForPLL>

  while ( (OSCCTRL->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) != OSCCTRL_DPLLSTATUS_CLKRDY );
    2860:	4a17      	ldr	r2, [pc, #92]	; (28c0 <SystemInit+0xd4>)
    2862:	7813      	ldrb	r3, [r2, #0]
    2864:	423b      	tst	r3, r7
    2866:	d0fc      	beq.n	2862 <SystemInit+0x76>
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
#elif (SAML21 || SAMC21)
  MCLK->CPUDIV.reg  = MCLK_CPUDIV_CPUDIV_DIV1 ;
    2868:	2301      	movs	r3, #1
    286a:	712b      	strb	r3, [r5, #4]

#elif (SAML21 || SAMC21)
  /* Setup GCLK0 (GENERIC_CLOCK_GENERATOR_MAIN) which is used for the CPU. */
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch Generic Clock Generator 0 to 96MHz PLL output. The output is divided by two to obtain a 48MHz CPU clock. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_MAIN].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    286c:	4d15      	ldr	r5, [pc, #84]	; (28c4 <SystemInit+0xd8>)
    286e:	6225      	str	r5, [r4, #32]
    waitForSync();
    2870:	f7ff ffaa 	bl	27c8 <waitForSync>
  #endif

#elif (SAML21 || SAMC21)
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch GENERIC_CLOCK_GENERATOR_48MHz to 96MHz PLL output. The output is divided by two to obtain 48MHz. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_48MHz].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    2874:	6325      	str	r5, [r4, #48]	; 0x30
    waitForSync();
    2876:	f7ff ffa7 	bl	27c8 <waitForSync>
  waitForSync();

#elif (SAML21)
  /* Note that after reset, the L21 starts with the OSC16M set to 4MHz, NOT the DFLL@48MHz as stated in some documentation. */
  /* Modify FSEL value of OSC16M to have 8MHz */
  OSCCTRL->OSC16MCTRL.bit.FSEL = OSCCTRL_OSC16MCTRL_FSEL_8_Val;
    287a:	220c      	movs	r2, #12
    287c:	7d33      	ldrb	r3, [r6, #20]
    287e:	4393      	bics	r3, r2
    2880:	001a      	movs	r2, r3
    2882:	2304      	movs	r3, #4
    2884:	4313      	orrs	r3, r2
    2886:	7533      	strb	r3, [r6, #20]

  /* Put OSC16M as source for Generic Clock Generator 3 */
  GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_OSC_HS].reg = ( GCLK_GENCTRL_DIV(1) | GCLK_GENCTRL_SRC_OSC16M | GCLK_GENCTRL_GENEN );
    2888:	4b0f      	ldr	r3, [pc, #60]	; (28c8 <SystemInit+0xdc>)
    288a:	62e3      	str	r3, [r4, #44]	; 0x2c
  waitForSync();
    288c:	f7ff ff9c 	bl	27c8 <waitForSync>
#endif
#endif

  SystemCoreClock=VARIANT_MCK;
    2890:	4a0e      	ldr	r2, [pc, #56]	; (28cc <SystemInit+0xe0>)
    2892:	4b0f      	ldr	r3, [pc, #60]	; (28d0 <SystemInit+0xe4>)
    2894:	601a      	str	r2, [r3, #0]
}
    2896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2898:	41004000 	.word	0x41004000
    289c:	40000400 	.word	0x40000400
    28a0:	40001800 	.word	0x40001800
    28a4:	000007fd 	.word	0x000007fd
    28a8:	40001000 	.word	0x40001000
    28ac:	0000041c 	.word	0x0000041c
    28b0:	00000b71 	.word	0x00000b71
    28b4:	40000c00 	.word	0x40000c00
    28b8:	40000c34 	.word	0x40000c34
    28bc:	40000c28 	.word	0x40000c28
    28c0:	40000c3c 	.word	0x40000c3c
    28c4:	00020308 	.word	0x00020308
    28c8:	00010106 	.word	0x00010106
    28cc:	02dc6c00 	.word	0x02dc6c00
    28d0:	20000038 	.word	0x20000038

000028d4 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    28d4:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    28d6:	250f      	movs	r5, #15
    28d8:	1dcb      	adds	r3, r1, #7
    28da:	3901      	subs	r1, #1
    28dc:	0002      	movs	r2, r0
    28de:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    28e0:	0014      	movs	r4, r2
		val = (val >> 4);
    28e2:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    28e4:	3430      	adds	r4, #48	; 0x30
    28e6:	2a09      	cmp	r2, #9
    28e8:	dd01      	ble.n	28ee <_ZL5utox8mPc+0x1a>
    28ea:	3237      	adds	r2, #55	; 0x37
    28ec:	0014      	movs	r4, r2
    28ee:	701c      	strb	r4, [r3, #0]
    28f0:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    28f2:	428b      	cmp	r3, r1
    28f4:	d1f2      	bne.n	28dc <_ZL5utox8mPc+0x8>
	}
}
    28f6:	bd30      	pop	{r4, r5, pc}

000028f8 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    28f8:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    28fa:	2982      	cmp	r1, #130	; 0x82
    28fc:	d11f      	bne.n	293e <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    28fe:	b2c3      	uxtb	r3, r0
    2900:	4d2c      	ldr	r5, [pc, #176]	; (29b4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    2902:	015a      	lsls	r2, r3, #5
    2904:	18aa      	adds	r2, r5, r2
    2906:	6991      	ldr	r1, [r2, #24]
    2908:	4c2b      	ldr	r4, [pc, #172]	; (29b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    290a:	0180      	lsls	r0, r0, #6
    290c:	400c      	ands	r4, r1
    290e:	21c0      	movs	r1, #192	; 0xc0
    2910:	0589      	lsls	r1, r1, #22
    2912:	4321      	orrs	r1, r4
    2914:	6191      	str	r1, [r2, #24]
    2916:	4929      	ldr	r1, [pc, #164]	; (29bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2918:	3308      	adds	r3, #8
    291a:	1808      	adds	r0, r1, r0
    291c:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    291e:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2920:	682a      	ldr	r2, [r5, #0]
    2922:	015b      	lsls	r3, r3, #5
    2924:	18d0      	adds	r0, r2, r3
    2926:	7904      	ldrb	r4, [r0, #4]
    2928:	4249      	negs	r1, r1
    292a:	4321      	orrs	r1, r4
    292c:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    292e:	2070      	movs	r0, #112	; 0x70
    2930:	5c99      	ldrb	r1, [r3, r2]
    2932:	4381      	bics	r1, r0
    2934:	0008      	movs	r0, r1
    2936:	2130      	movs	r1, #48	; 0x30
    2938:	4301      	orrs	r1, r0
    293a:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    293c:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    293e:	2900      	cmp	r1, #0
    2940:	d1fc      	bne.n	293c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2942:	24c0      	movs	r4, #192	; 0xc0
    2944:	b2c1      	uxtb	r1, r0
    2946:	4e1b      	ldr	r6, [pc, #108]	; (29b4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    2948:	014b      	lsls	r3, r1, #5
    294a:	18f3      	adds	r3, r6, r3
    294c:	689a      	ldr	r2, [r3, #8]
    294e:	4d1a      	ldr	r5, [pc, #104]	; (29b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    2950:	05a4      	lsls	r4, r4, #22
    2952:	402a      	ands	r2, r5
    2954:	4322      	orrs	r2, r4
    2956:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    2958:	4a19      	ldr	r2, [pc, #100]	; (29c0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    295a:	0180      	lsls	r0, r0, #6
    295c:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    295e:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2960:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2962:	6830      	ldr	r0, [r6, #0]
    2964:	2607      	movs	r6, #7
    2966:	3208      	adds	r2, #8
    2968:	0152      	lsls	r2, r2, #5
    296a:	5c11      	ldrb	r1, [r2, r0]
    296c:	43b1      	bics	r1, r6
    296e:	000e      	movs	r6, r1
    2970:	2101      	movs	r1, #1
    2972:	4331      	orrs	r1, r6
    2974:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2976:	6999      	ldr	r1, [r3, #24]
    2978:	400d      	ands	r5, r1
    297a:	432c      	orrs	r4, r5
    297c:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    297e:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2980:	490e      	ldr	r1, [pc, #56]	; (29bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    2982:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2984:	5c11      	ldrb	r1, [r2, r0]
    2986:	43a1      	bics	r1, r4
    2988:	000c      	movs	r4, r1
    298a:	2110      	movs	r1, #16
    298c:	4321      	orrs	r1, r4
    298e:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2990:	6899      	ldr	r1, [r3, #8]
    2992:	4c0c      	ldr	r4, [pc, #48]	; (29c4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    2994:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2996:	400c      	ands	r4, r1
    2998:	2180      	movs	r1, #128	; 0x80
    299a:	0349      	lsls	r1, r1, #13
    299c:	4321      	orrs	r1, r4
    299e:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    29a0:	6899      	ldr	r1, [r3, #8]
    29a2:	0b89      	lsrs	r1, r1, #14
    29a4:	0389      	lsls	r1, r1, #14
    29a6:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    29a8:	2340      	movs	r3, #64	; 0x40
    29aa:	7951      	ldrb	r1, [r2, #5]
    29ac:	430b      	orrs	r3, r1
    29ae:	7153      	strb	r3, [r2, #5]
    29b0:	e7c4      	b.n	293c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	20000824 	.word	0x20000824
    29b8:	8fffffff 	.word	0x8fffffff
    29bc:	20000398 	.word	0x20000398
    29c0:	20000558 	.word	0x20000558
    29c4:	f0003fff 	.word	0xf0003fff

000029c8 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    29c8:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    29ca:	0004      	movs	r4, r0
    29cc:	2301      	movs	r3, #1
    29ce:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    29d0:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    29d2:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    29d4:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    29d6:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    29d8:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    29da:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    29dc:	0052      	lsls	r2, r2, #1
    29de:	f008 ff1f 	bl	b820 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    29e2:	78ab      	ldrb	r3, [r5, #2]
    29e4:	07db      	lsls	r3, r3, #31
    29e6:	d4fc      	bmi.n	29e2 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    29e8:	626c      	str	r4, [r5, #36]	; 0x24
}
    29ea:	bd70      	pop	{r4, r5, r6, pc}

000029ec <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29ec:	221f      	movs	r2, #31
    29ee:	4b14      	ldr	r3, [pc, #80]	; (2a40 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    29f0:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29f2:	681b      	ldr	r3, [r3, #0]
    29f4:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    29f6:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    29f8:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29fa:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    29fc:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    29fe:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
    2a00:	291f      	cmp	r1, #31
    2a02:	d100      	bne.n	2a06 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    2a04:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    2a06:	2a1f      	cmp	r2, #31
    2a08:	d100      	bne.n	2a0c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    2a0a:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    2a0c:	2b07      	cmp	r3, #7
    2a0e:	d100      	bne.n	2a12 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    2a10:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
    2a12:	251f      	movs	r5, #31
    2a14:	6800      	ldr	r0, [r0, #0]
    2a16:	018e      	lsls	r6, r1, #6
    2a18:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    2a1a:	490a      	ldr	r1, [pc, #40]	; (2a44 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    2a1c:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    2a1e:	4021      	ands	r1, r4
    2a20:	4331      	orrs	r1, r6
    2a22:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    2a24:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    2a26:	0014      	movs	r4, r2
    2a28:	000a      	movs	r2, r1
    2a2a:	43aa      	bics	r2, r5
    2a2c:	4322      	orrs	r2, r4
    2a2e:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    2a30:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    2a32:	0319      	lsls	r1, r3, #12
    2a34:	4b04      	ldr	r3, [pc, #16]	; (2a48 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    2a36:	4013      	ands	r3, r2
    2a38:	430b      	orrs	r3, r1
    2a3a:	8503      	strh	r3, [r0, #40]	; 0x28
}
    2a3c:	bd70      	pop	{r4, r5, r6, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	00806020 	.word	0x00806020
    2a44:	fffff83f 	.word	0xfffff83f
    2a48:	ffff8fff 	.word	0xffff8fff

00002a4c <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a4c:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    2a50:	6003      	str	r3, [r0, #0]
    2a52:	2301      	movs	r3, #1
    2a54:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2a56:	b672      	cpsid	i
		__disable_irq();
	}
    2a58:	4770      	bx	lr

00002a5a <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
    2a5a:	6803      	ldr	r3, [r0, #0]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d102      	bne.n	2a66 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    2a60:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    2a62:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    2a66:	4770      	bx	lr

00002a68 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    2a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    2a6a:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    2a6c:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    2a6e:	4668      	mov	r0, sp
		if (current == 0) {
    2a70:	2d00      	cmp	r5, #0
    2a72:	d114      	bne.n	2a9e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    2a74:	f7ff ffea 	bl	2a4c <_ZN7__GuardC1Ev>
    2a78:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    2a7a:	1d62      	adds	r2, r4, #5
			synchronized {
    2a7c:	3b01      	subs	r3, #1
    2a7e:	d302      	bcc.n	2a86 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    2a80:	7fd5      	ldrb	r5, [r2, #31]
    2a82:	b2ed      	uxtb	r5, r5
    2a84:	e7fa      	b.n	2a7c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    2a86:	4668      	mov	r0, sp
    2a88:	9301      	str	r3, [sp, #4]
    2a8a:	f7ff ffe6 	bl	2a5a <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    2a8e:	2d00      	cmp	r5, #0
    2a90:	d101      	bne.n	2a96 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    2a92:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    2a94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    2a96:	6a20      	ldr	r0, [r4, #32]
    2a98:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    2a9a:	1ac0      	subs	r0, r0, r3
    2a9c:	e7fa      	b.n	2a94 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    2a9e:	f7ff ffd5 	bl	2a4c <_ZN7__GuardC1Ev>
				ready = ready1;
    2aa2:	0022      	movs	r2, r4
			bool ready = false;
    2aa4:	2500      	movs	r5, #0
    2aa6:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    2aa8:	3234      	adds	r2, #52	; 0x34
			synchronized {
    2aaa:	3b01      	subs	r3, #1
    2aac:	d302      	bcc.n	2ab4 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    2aae:	7815      	ldrb	r5, [r2, #0]
    2ab0:	b2ed      	uxtb	r5, r5
			synchronized {
    2ab2:	e7fa      	b.n	2aaa <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    2ab4:	4668      	mov	r0, sp
    2ab6:	9301      	str	r3, [sp, #4]
    2ab8:	f7ff ffcf 	bl	2a5a <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    2abc:	2d00      	cmp	r5, #0
    2abe:	d0e8      	beq.n	2a92 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    2ac0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2ac2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2ac4:	e7e9      	b.n	2a9a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00002ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    2ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2aca:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    2acc:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2ace:	7a03      	ldrb	r3, [r0, #8]
    2ad0:	6831      	ldr	r1, [r6, #0]
    2ad2:	015a      	lsls	r2, r3, #5
    2ad4:	188c      	adds	r4, r1, r2
    2ad6:	34ff      	adds	r4, #255	; 0xff
    2ad8:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2ada:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2adc:	433d      	orrs	r5, r7
    2ade:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    2ae0:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2ae2:	4d09      	ldr	r5, [pc, #36]	; (2b08 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    2ae4:	6890      	ldr	r0, [r2, #8]
    2ae6:	04a4      	lsls	r4, r4, #18
    2ae8:	4028      	ands	r0, r5
    2aea:	0924      	lsrs	r4, r4, #4
    2aec:	4320      	orrs	r0, r4
    2aee:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2af0:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2af2:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2af4:	0b80      	lsrs	r0, r0, #14
    2af6:	0380      	lsls	r0, r0, #14
    2af8:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2afa:	2240      	movs	r2, #64	; 0x40
    2afc:	015b      	lsls	r3, r3, #5
    2afe:	18cb      	adds	r3, r1, r3
    2b00:	7919      	ldrb	r1, [r3, #4]
    2b02:	430a      	orrs	r2, r1
    2b04:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    2b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b08:	f0003fff 	.word	0xf0003fff

00002b0c <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    2b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    2b0e:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    2b10:	0004      	movs	r4, r0
    2b12:	000e      	movs	r6, r1
    2b14:	0017      	movs	r7, r2
			synchronized {
    2b16:	4668      	mov	r0, sp
		if (current == 0) {
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d13d      	bne.n	2b98 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    2b1c:	f7ff ff96 	bl	2a4c <_ZN7__GuardC1Ev>
    2b20:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    2b22:	1d61      	adds	r1, r4, #5
    2b24:	3b01      	subs	r3, #1
			synchronized {
    2b26:	1c5a      	adds	r2, r3, #1
    2b28:	d00c      	beq.n	2b44 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    2b2a:	7fcd      	ldrb	r5, [r1, #31]
    2b2c:	1e5a      	subs	r2, r3, #1
    2b2e:	b2ed      	uxtb	r5, r5
    2b30:	2d00      	cmp	r5, #0
    2b32:	d105      	bne.n	2b40 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    2b34:	4668      	mov	r0, sp
    2b36:	9301      	str	r3, [sp, #4]
    2b38:	f7ff ff8f 	bl	2a5a <_ZN7__GuardD1Ev>
	}
    2b3c:	0028      	movs	r0, r5
    2b3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2b40:	0013      	movs	r3, r2
    2b42:	e7f0      	b.n	2b26 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    2b44:	4668      	mov	r0, sp
    2b46:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    2b48:	2500      	movs	r5, #0
			synchronized {
    2b4a:	f7ff ff86 	bl	2a5a <_ZN7__GuardD1Ev>
    2b4e:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    2b50:	42af      	cmp	r7, r5
    2b52:	d002      	beq.n	2b5a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    2b54:	6a22      	ldr	r2, [r4, #32]
    2b56:	4293      	cmp	r3, r2
    2b58:	d357      	bcc.n	2c0a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    2b5a:	6a22      	ldr	r2, [r4, #32]
    2b5c:	4293      	cmp	r3, r2
    2b5e:	d1ed      	bne.n	2b3c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    2b60:	2300      	movs	r3, #0
    2b62:	61e3      	str	r3, [r4, #28]
				current = 1;
    2b64:	3301      	adds	r3, #1
    2b66:	6123      	str	r3, [r4, #16]
				synchronized {
    2b68:	4668      	mov	r0, sp
    2b6a:	f7ff ff6f 	bl	2a4c <_ZN7__GuardC1Ev>
					if (notify) {
    2b6e:	0022      	movs	r2, r4
					ready0 = false;
    2b70:	2100      	movs	r1, #0
    2b72:	9b01      	ldr	r3, [sp, #4]
    2b74:	1d67      	adds	r7, r4, #5
    2b76:	3b01      	subs	r3, #1
					if (notify) {
    2b78:	3235      	adds	r2, #53	; 0x35
				synchronized {
    2b7a:	1c58      	adds	r0, r3, #1
    2b7c:	d0da      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    2b7e:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    2b80:	7810      	ldrb	r0, [r2, #0]
    2b82:	1e5e      	subs	r6, r3, #1
    2b84:	2800      	cmp	r0, #0
    2b86:	d005      	beq.n	2b94 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    2b88:	7011      	strb	r1, [r2, #0]
						release();
    2b8a:	0020      	movs	r0, r4
    2b8c:	9301      	str	r3, [sp, #4]
    2b8e:	f7ff ff9b 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2b92:	e7ec      	b.n	2b6e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    2b94:	0033      	movs	r3, r6
    2b96:	e7f0      	b.n	2b7a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    2b98:	f7ff ff58 	bl	2a4c <_ZN7__GuardC1Ev>
				if (!ready1) {
    2b9c:	0021      	movs	r1, r4
    2b9e:	9b01      	ldr	r3, [sp, #4]
    2ba0:	3134      	adds	r1, #52	; 0x34
    2ba2:	3b01      	subs	r3, #1
			synchronized {
    2ba4:	1c5a      	adds	r2, r3, #1
    2ba6:	d006      	beq.n	2bb6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    2ba8:	780d      	ldrb	r5, [r1, #0]
    2baa:	1e5a      	subs	r2, r3, #1
    2bac:	b2ed      	uxtb	r5, r5
    2bae:	2d00      	cmp	r5, #0
    2bb0:	d0c0      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    2bb2:	0013      	movs	r3, r2
    2bb4:	e7f6      	b.n	2ba4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    2bb6:	4668      	mov	r0, sp
    2bb8:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    2bba:	2500      	movs	r5, #0
			synchronized {
    2bbc:	f7ff ff4d 	bl	2a5a <_ZN7__GuardD1Ev>
    2bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    2bc2:	42bd      	cmp	r5, r7
    2bc4:	d002      	beq.n	2bcc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    2bc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2bc8:	4293      	cmp	r3, r2
    2bca:	d326      	bcc.n	2c1a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    2bcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2bce:	4293      	cmp	r3, r2
    2bd0:	d1b4      	bne.n	2b3c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    2bd2:	2300      	movs	r3, #0
				synchronized {
    2bd4:	4668      	mov	r0, sp
				first1 = 0;
    2bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    2bd8:	6123      	str	r3, [r4, #16]
				synchronized {
    2bda:	f7ff ff37 	bl	2a4c <_ZN7__GuardC1Ev>
					ready1 = false;
    2bde:	0027      	movs	r7, r4
					if (notify) {
    2be0:	0022      	movs	r2, r4
					ready1 = false;
    2be2:	2100      	movs	r1, #0
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	3734      	adds	r7, #52	; 0x34
    2be8:	3b01      	subs	r3, #1
					if (notify) {
    2bea:	3235      	adds	r2, #53	; 0x35
				synchronized {
    2bec:	1c58      	adds	r0, r3, #1
    2bee:	d0a1      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    2bf0:	7039      	strb	r1, [r7, #0]
					if (notify) {
    2bf2:	7810      	ldrb	r0, [r2, #0]
    2bf4:	1e5e      	subs	r6, r3, #1
    2bf6:	2800      	cmp	r0, #0
    2bf8:	d005      	beq.n	2c06 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    2bfa:	7011      	strb	r1, [r2, #0]
						release();
    2bfc:	0020      	movs	r0, r4
    2bfe:	9301      	str	r3, [sp, #4]
    2c00:	f7ff ff62 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2c04:	e7eb      	b.n	2bde <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    2c06:	0033      	movs	r3, r6
    2c08:	e7f0      	b.n	2bec <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    2c0a:	1c5a      	adds	r2, r3, #1
    2c0c:	61e2      	str	r2, [r4, #28]
    2c0e:	69a2      	ldr	r2, [r4, #24]
    2c10:	18d3      	adds	r3, r2, r3
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    2c16:	3501      	adds	r5, #1
    2c18:	e799      	b.n	2b4e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    2c1a:	1c5a      	adds	r2, r3, #1
    2c1c:	62e2      	str	r2, [r4, #44]	; 0x2c
    2c1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2c20:	18d3      	adds	r3, r2, r3
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    2c26:	3501      	adds	r5, #1
    2c28:	e7ca      	b.n	2bc0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00002c2a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    2c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c2c:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    2c2e:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c30:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    2c32:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c34:	3108      	adds	r1, #8
    2c36:	6818      	ldr	r0, [r3, #0]
    2c38:	0149      	lsls	r1, r1, #5
    2c3a:	1841      	adds	r1, r0, r1
    2c3c:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    2c3e:	07c0      	lsls	r0, r0, #31
    2c40:	d527      	bpl.n	2c92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    2c42:	2501      	movs	r5, #1
    2c44:	0152      	lsls	r2, r2, #5
    2c46:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2c48:	189b      	adds	r3, r3, r2
    2c4a:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    2c4c:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2c4e:	0492      	lsls	r2, r2, #18
    2c50:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    2c52:	2900      	cmp	r1, #0
    2c54:	d121      	bne.n	2c9a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    2c56:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    2c58:	6a22      	ldr	r2, [r4, #32]
    2c5a:	2a00      	cmp	r2, #0
    2c5c:	d03e      	beq.n	2cdc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2c5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    2c60:	6165      	str	r5, [r4, #20]
					synchronized {
    2c62:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2c64:	605a      	str	r2, [r3, #4]
					synchronized {
    2c66:	f7ff fef1 	bl	2a4c <_ZN7__GuardC1Ev>
						if (ready1) {
    2c6a:	0027      	movs	r7, r4
    2c6c:	0021      	movs	r1, r4
    2c6e:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    2c70:	1d66      	adds	r6, r4, #5
    2c72:	3b01      	subs	r3, #1
						if (ready1) {
    2c74:	3734      	adds	r7, #52	; 0x34
    2c76:	3135      	adds	r1, #53	; 0x35
					synchronized {
    2c78:	1c5a      	adds	r2, r3, #1
    2c7a:	d02b      	beq.n	2cd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    2c7c:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    2c7e:	783a      	ldrb	r2, [r7, #0]
    2c80:	1e58      	subs	r0, r3, #1
    2c82:	b2d2      	uxtb	r2, r2
    2c84:	2a00      	cmp	r2, #0
    2c86:	d005      	beq.n	2c94 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    2c88:	9301      	str	r3, [sp, #4]
							return;
    2c8a:	4668      	mov	r0, sp
							notify = true;
    2c8c:	700d      	strb	r5, [r1, #0]
							return;
    2c8e:	f7ff fee4 	bl	2a5a <_ZN7__GuardD1Ev>
	}
    2c92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    2c94:	700a      	strb	r2, [r1, #0]
					synchronized {
    2c96:	0003      	movs	r3, r0
    2c98:	e7ee      	b.n	2c78 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    2c9a:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    2c9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2c9e:	2a00      	cmp	r2, #0
    2ca0:	d01c      	beq.n	2cdc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    2ca2:	2200      	movs	r2, #0
    2ca4:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2ca6:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    2ca8:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2caa:	605a      	str	r2, [r3, #4]
					synchronized {
    2cac:	f7ff fece 	bl	2a4c <_ZN7__GuardC1Ev>
						ready1 = true;
    2cb0:	0026      	movs	r6, r4
    2cb2:	0021      	movs	r1, r4
    2cb4:	9b01      	ldr	r3, [sp, #4]
    2cb6:	3634      	adds	r6, #52	; 0x34
    2cb8:	3b01      	subs	r3, #1
						if (ready0) {
    2cba:	1d67      	adds	r7, r4, #5
    2cbc:	3135      	adds	r1, #53	; 0x35
					synchronized {
    2cbe:	1c5a      	adds	r2, r3, #1
    2cc0:	d008      	beq.n	2cd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    2cc2:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    2cc4:	7ffa      	ldrb	r2, [r7, #31]
    2cc6:	1e58      	subs	r0, r3, #1
    2cc8:	b2d2      	uxtb	r2, r2
    2cca:	2a00      	cmp	r2, #0
    2ccc:	d1dc      	bne.n	2c88 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    2cce:	700a      	strb	r2, [r1, #0]
					synchronized {
    2cd0:	0003      	movs	r3, r0
    2cd2:	e7f4      	b.n	2cbe <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    2cd4:	4668      	mov	r0, sp
    2cd6:	9301      	str	r3, [sp, #4]
    2cd8:	f7ff febf 	bl	2a5a <_ZN7__GuardD1Ev>
			release();
    2cdc:	0020      	movs	r0, r4
    2cde:	f7ff fef3 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2ce2:	e7d6      	b.n	2c92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00002ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    2ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    2ce6:	466b      	mov	r3, sp
    2ce8:	1ddc      	adds	r4, r3, #7
    2cea:	2300      	movs	r3, #0
{
    2cec:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    2cee:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    2cf0:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    2cf2:	f002 fa75 	bl	51e0 <_Z16CDC_GetInterfacePh>
    2cf6:	682b      	ldr	r3, [r5, #0]
    2cf8:	1818      	adds	r0, r3, r0
    2cfa:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    2cfc:	f002 fb2a 	bl	5354 <_Z12PluggableUSBv>
    2d00:	0021      	movs	r1, r4
    2d02:	f002 fae3 	bl	52cc <_ZN13PluggableUSB_12getInterfaceEPh>
    2d06:	682b      	ldr	r3, [r5, #0]
    2d08:	1818      	adds	r0, r3, r0
    2d0a:	6028      	str	r0, [r5, #0]
	return interfaces;
    2d0c:	7820      	ldrb	r0, [r4, #0]
}
    2d0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002d10 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    2d10:	2903      	cmp	r1, #3
    2d12:	d10e      	bne.n	2d32 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2d14:	2280      	movs	r2, #128	; 0x80
    2d16:	4b0e      	ldr	r3, [pc, #56]	; (2d50 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    2d18:	3162      	adds	r1, #98	; 0x62
    2d1a:	681b      	ldr	r3, [r3, #0]
    2d1c:	31ff      	adds	r1, #255	; 0xff
    2d1e:	5c58      	ldrb	r0, [r3, r1]
    2d20:	4252      	negs	r2, r2
    2d22:	4302      	orrs	r2, r0
    2d24:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2d26:	2268      	movs	r2, #104	; 0x68
    2d28:	3963      	subs	r1, #99	; 0x63
    2d2a:	39ff      	subs	r1, #255	; 0xff
    2d2c:	32ff      	adds	r2, #255	; 0xff
    2d2e:	5499      	strb	r1, [r3, r2]
}
    2d30:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    2d32:	2901      	cmp	r1, #1
    2d34:	d1fc      	bne.n	2d30 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2d36:	2280      	movs	r2, #128	; 0x80
    2d38:	4b05      	ldr	r3, [pc, #20]	; (2d50 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    2d3a:	3124      	adds	r1, #36	; 0x24
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	31ff      	adds	r1, #255	; 0xff
    2d40:	5c58      	ldrb	r0, [r3, r1]
    2d42:	4252      	negs	r2, r2
    2d44:	4302      	orrs	r2, r0
    2d46:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2d48:	3923      	subs	r1, #35	; 0x23
    2d4a:	39ff      	subs	r1, #255	; 0xff
    2d4c:	2228      	movs	r2, #40	; 0x28
    2d4e:	e7ed      	b.n	2d2c <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    2d50:	20000824 	.word	0x20000824

00002d54 <_ZN14USBDeviceClass4initEv>:
{
    2d54:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
    2d56:	2400      	movs	r4, #0
    2d58:	4b26      	ldr	r3, [pc, #152]	; (2df4 <_ZN14USBDeviceClass4initEv+0xa0>)
	pinMode(PIN_LED_TXL, OUTPUT);
    2d5a:	2101      	movs	r1, #1
{
    2d5c:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    2d5e:	2015      	movs	r0, #21
	txLEDPulse = 0;
    2d60:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    2d62:	f000 feb1 	bl	3ac8 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    2d66:	2101      	movs	r1, #1
    2d68:	2015      	movs	r0, #21
    2d6a:	f000 feb1 	bl	3ad0 <digitalWrite>
	rxLEDPulse = 0;
    2d6e:	4b22      	ldr	r3, [pc, #136]	; (2df8 <_ZN14USBDeviceClass4initEv+0xa4>)
	pinMode(PIN_LED_RXL, OUTPUT);
    2d70:	2101      	movs	r1, #1
    2d72:	2014      	movs	r0, #20
	rxLEDPulse = 0;
    2d74:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    2d76:	f000 fea7 	bl	3ac8 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    2d7a:	2101      	movs	r1, #1
    2d7c:	2014      	movs	r0, #20
    2d7e:	f000 fea7 	bl	3ad0 <digitalWrite>
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d82:	2301      	movs	r3, #1
    2d84:	4a1d      	ldr	r2, [pc, #116]	; (2dfc <_ZN14USBDeviceClass4initEv+0xa8>)
        pinPeripheral( PIN_USB_DM, PIO_COM );
    2d86:	2018      	movs	r0, #24
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d88:	6991      	ldr	r1, [r2, #24]
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    2d8a:	3440      	adds	r4, #64	; 0x40
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d8c:	430b      	orrs	r3, r1
    2d8e:	6193      	str	r3, [r2, #24]
        pinPeripheral( PIN_USB_DM, PIO_COM );
    2d90:	210f      	movs	r1, #15
    2d92:	f000 ff07 	bl	3ba4 <pinPeripheral>
        pinPeripheral( PIN_USB_DP, PIO_COM );
    2d96:	210f      	movs	r1, #15
    2d98:	2019      	movs	r0, #25
    2d9a:	f000 ff03 	bl	3ba4 <pinPeripheral>
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    2d9e:	4b18      	ldr	r3, [pc, #96]	; (2e00 <_ZN14USBDeviceClass4initEv+0xac>)
    2da0:	601c      	str	r4, [r3, #0]
        while ( (GCLK->PCHCTRL[GCM_USB].reg & GCLK_PCHCTRL_CHEN) == 0 );        // wait for sync
    2da2:	681a      	ldr	r2, [r3, #0]
    2da4:	4222      	tst	r2, r4
    2da6:	d0fc      	beq.n	2da2 <_ZN14USBDeviceClass4initEv+0x4e>
        USB_SetHandler(&UDD_Handler);
    2da8:	4816      	ldr	r0, [pc, #88]	; (2e04 <_ZN14USBDeviceClass4initEv+0xb0>)
    2daa:	f7ff fc55 	bl	2658 <USB_SetHandler>
	usbd.reset();
    2dae:	4e16      	ldr	r6, [pc, #88]	; (2e08 <_ZN14USBDeviceClass4initEv+0xb4>)
    2db0:	0030      	movs	r0, r6
    2db2:	f7ff fe09 	bl	29c8 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    2db6:	0030      	movs	r0, r6
    2db8:	f7ff fe18 	bl	29ec <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    2dbc:	217f      	movs	r1, #127	; 0x7f
    2dbe:	6833      	ldr	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2dc0:	20c1      	movs	r0, #193	; 0xc1
    2dc2:	781a      	ldrb	r2, [r3, #0]
    2dc4:	0080      	lsls	r0, r0, #2
    2dc6:	400a      	ands	r2, r1
    2dc8:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2dca:	2204      	movs	r2, #4
    2dcc:	7819      	ldrb	r1, [r3, #0]
    2dce:	4e0f      	ldr	r6, [pc, #60]	; (2e0c <_ZN14USBDeviceClass4initEv+0xb8>)
    2dd0:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2dd2:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2dd4:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2dd6:	891a      	ldrh	r2, [r3, #8]
    2dd8:	438a      	bics	r2, r1
    2dda:	811a      	strh	r2, [r3, #8]
    2ddc:	4a0c      	ldr	r2, [pc, #48]	; (2e10 <_ZN14USBDeviceClass4initEv+0xbc>)
    2dde:	5811      	ldr	r1, [r2, r0]
    2de0:	4031      	ands	r1, r6
    2de2:	5011      	str	r1, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2de4:	6014      	str	r4, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    2de6:	2202      	movs	r2, #2
    2de8:	7819      	ldrb	r1, [r3, #0]
    2dea:	430a      	orrs	r2, r1
    2dec:	701a      	strb	r2, [r3, #0]
	initialized = true;
    2dee:	2301      	movs	r3, #1
    2df0:	702b      	strb	r3, [r5, #0]
}
    2df2:	bd70      	pop	{r4, r5, r6, pc}
    2df4:	2000038d 	.word	0x2000038d
    2df8:	2000038c 	.word	0x2000038c
    2dfc:	40000400 	.word	0x40000400
    2e00:	40001890 	.word	0x40001890
    2e04:	000037e5 	.word	0x000037e5
    2e08:	20000824 	.word	0x20000824
    2e0c:	ff00ffff 	.word	0xff00ffff
    2e10:	e000e100 	.word	0xe000e100

00002e14 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    2e14:	7800      	ldrb	r0, [r0, #0]
    2e16:	2800      	cmp	r0, #0
    2e18:	d010      	beq.n	2e3c <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    2e1a:	2101      	movs	r1, #1
    2e1c:	4b08      	ldr	r3, [pc, #32]	; (2e40 <_ZN14USBDeviceClass6attachEv+0x2c>)
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	891a      	ldrh	r2, [r3, #8]
    2e22:	438a      	bics	r2, r1
    2e24:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    2e26:	2208      	movs	r2, #8
    2e28:	8b19      	ldrh	r1, [r3, #24]
    2e2a:	430a      	orrs	r2, r1
    2e2c:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    2e2e:	2204      	movs	r2, #4
    2e30:	8b19      	ldrh	r1, [r3, #24]
    2e32:	430a      	orrs	r2, r1
    2e34:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    2e36:	2200      	movs	r2, #0
    2e38:	4b02      	ldr	r3, [pc, #8]	; (2e44 <_ZN14USBDeviceClass6attachEv+0x30>)
    2e3a:	601a      	str	r2, [r3, #0]
}
    2e3c:	4770      	bx	lr
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	20000824 	.word	0x20000824
    2e44:	2000081c 	.word	0x2000081c

00002e48 <_ZN14USBDeviceClass10setAddressEm>:
{
    2e48:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2e4a:	4a10      	ldr	r2, [pc, #64]	; (2e8c <_ZN14USBDeviceClass10setAddressEm+0x44>)
    2e4c:	6993      	ldr	r3, [r2, #24]
    2e4e:	0b9b      	lsrs	r3, r3, #14
    2e50:	039b      	lsls	r3, r3, #14
    2e52:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2e54:	6813      	ldr	r3, [r2, #0]
    2e56:	2202      	movs	r2, #2
    2e58:	33ff      	adds	r3, #255	; 0xff
    2e5a:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2e5c:	7998      	ldrb	r0, [r3, #6]
    2e5e:	3a82      	subs	r2, #130	; 0x82
    2e60:	4302      	orrs	r2, r0
    2e62:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    2e64:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    2e66:	0792      	lsls	r2, r2, #30
    2e68:	d5fc      	bpl.n	2e64 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2e6a:	2282      	movs	r2, #130	; 0x82
    2e6c:	247f      	movs	r4, #127	; 0x7f
    2e6e:	05d2      	lsls	r2, r2, #23
    2e70:	7a93      	ldrb	r3, [r2, #10]
    2e72:	4021      	ands	r1, r4
    2e74:	43a3      	bics	r3, r4
    2e76:	0008      	movs	r0, r1
    2e78:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2e7a:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2e7c:	4301      	orrs	r1, r0
    2e7e:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2e80:	7a91      	ldrb	r1, [r2, #10]
    2e82:	425b      	negs	r3, r3
    2e84:	430b      	orrs	r3, r1
    2e86:	7293      	strb	r3, [r2, #10]
}
    2e88:	bd10      	pop	{r4, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	20000824 	.word	0x20000824

00002e90 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    2e90:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    2e92:	790b      	ldrb	r3, [r1, #4]
{
    2e94:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    2e96:	2b00      	cmp	r3, #0
    2e98:	d10c      	bne.n	2eb4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    2e9a:	0008      	movs	r0, r1
    2e9c:	f002 f9ae 	bl	51fc <_Z9CDC_SetupR8USBSetup>
    2ea0:	2800      	cmp	r0, #0
    2ea2:	d001      	beq.n	2ea8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    2ea4:	2001      	movs	r0, #1
}
    2ea6:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2ea8:	4a09      	ldr	r2, [pc, #36]	; (2ed0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    2eaa:	6993      	ldr	r3, [r2, #24]
    2eac:	0b9b      	lsrs	r3, r3, #14
    2eae:	039b      	lsls	r3, r3, #14
    2eb0:	6193      	str	r3, [r2, #24]
    2eb2:	e7f7      	b.n	2ea4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    2eb4:	f002 fa4e 	bl	5354 <_Z12PluggableUSBv>
    2eb8:	0021      	movs	r1, r4
    2eba:	f002 fa3a 	bl	5332 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    2ebe:	2800      	cmp	r0, #0
    2ec0:	d1f0      	bne.n	2ea4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    2ec2:	4a03      	ldr	r2, [pc, #12]	; (2ed0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    2ec4:	6993      	ldr	r3, [r2, #24]
    2ec6:	0b9b      	lsrs	r3, r3, #14
    2ec8:	039b      	lsls	r3, r3, #14
    2eca:	6193      	str	r3, [r2, #24]
    2ecc:	e7eb      	b.n	2ea6 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	20000824 	.word	0x20000824

00002ed4 <_ZN14USBDeviceClass6initEPEmm>:
{
    2ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ed6:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    2ed8:	2a83      	cmp	r2, #131	; 0x83
    2eda:	d119      	bne.n	2f10 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2edc:	b2cb      	uxtb	r3, r1
    2ede:	4c32      	ldr	r4, [pc, #200]	; (2fa8 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    2ee0:	015a      	lsls	r2, r3, #5
    2ee2:	18a2      	adds	r2, r4, r2
    2ee4:	6991      	ldr	r1, [r2, #24]
    2ee6:	4831      	ldr	r0, [pc, #196]	; (2fac <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    2ee8:	01ad      	lsls	r5, r5, #6
    2eea:	4008      	ands	r0, r1
    2eec:	21c0      	movs	r1, #192	; 0xc0
    2eee:	0589      	lsls	r1, r1, #22
    2ef0:	4301      	orrs	r1, r0
    2ef2:	6191      	str	r1, [r2, #24]
    2ef4:	492e      	ldr	r1, [pc, #184]	; (2fb0 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2ef6:	6820      	ldr	r0, [r4, #0]
    2ef8:	194d      	adds	r5, r1, r5
    2efa:	2170      	movs	r1, #112	; 0x70
    2efc:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2efe:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2f00:	015b      	lsls	r3, r3, #5
    2f02:	5c1a      	ldrb	r2, [r3, r0]
    2f04:	438a      	bics	r2, r1
    2f06:	0011      	movs	r1, r2
    2f08:	2240      	movs	r2, #64	; 0x40
    2f0a:	430a      	orrs	r2, r1
    2f0c:	541a      	strb	r2, [r3, r0]
}
    2f0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    2f10:	2a02      	cmp	r2, #2
    2f12:	d144      	bne.n	2f9e <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
    2f14:	008b      	lsls	r3, r1, #2
    2f16:	9301      	str	r3, [sp, #4]
    2f18:	4b26      	ldr	r3, [pc, #152]	; (2fb4 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    2f1a:	008a      	lsls	r2, r1, #2
    2f1c:	58d6      	ldr	r6, [r2, r3]
    2f1e:	2e00      	cmp	r6, #0
    2f20:	d1f5      	bne.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    2f22:	2038      	movs	r0, #56	; 0x38
    2f24:	f001 fdca 	bl	4abc <_Znwj>
		notify(false)
    2f28:	4b23      	ldr	r3, [pc, #140]	; (2fb8 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    2f2a:	4f1f      	ldr	r7, [pc, #124]	; (2fa8 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    2f2c:	6003      	str	r3, [r0, #0]
    2f2e:	2380      	movs	r3, #128	; 0x80
    2f30:	005b      	lsls	r3, r3, #1
    2f32:	60c3      	str	r3, [r0, #12]
    2f34:	1d43      	adds	r3, r0, #5
    2f36:	6206      	str	r6, [r0, #32]
    2f38:	6085      	str	r5, [r0, #8]
    2f3a:	6106      	str	r6, [r0, #16]
    2f3c:	6146      	str	r6, [r0, #20]
    2f3e:	61c6      	str	r6, [r0, #28]
    2f40:	0004      	movs	r4, r0
    2f42:	6047      	str	r7, [r0, #4]
    2f44:	77de      	strb	r6, [r3, #31]
    2f46:	62c6      	str	r6, [r0, #44]	; 0x2c
    2f48:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f4a:	2080      	movs	r0, #128	; 0x80
		notify(false)
    2f4c:	332f      	adds	r3, #47	; 0x2f
    2f4e:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f50:	0040      	lsls	r0, r0, #1
		notify(false)
    2f52:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f54:	f008 fc14 	bl	b780 <malloc>
    2f58:	0006      	movs	r6, r0
    2f5a:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    2f5c:	2080      	movs	r0, #128	; 0x80
    2f5e:	0040      	lsls	r0, r0, #1
    2f60:	f008 fc0e 	bl	b780 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f64:	b2ed      	uxtb	r5, r5
    2f66:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    2f68:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	689a      	ldr	r2, [r3, #8]
    2f6e:	490f      	ldr	r1, [pc, #60]	; (2fac <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2f70:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f72:	4011      	ands	r1, r2
    2f74:	22c0      	movs	r2, #192	; 0xc0
    2f76:	0592      	lsls	r2, r2, #22
    2f78:	430a      	orrs	r2, r1
    2f7a:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2f7c:	683a      	ldr	r2, [r7, #0]
    2f7e:	3508      	adds	r5, #8
    2f80:	016d      	lsls	r5, r5, #5
    2f82:	5ca9      	ldrb	r1, [r5, r2]
    2f84:	4381      	bics	r1, r0
    2f86:	0008      	movs	r0, r1
    2f88:	2103      	movs	r1, #3
    2f8a:	4301      	orrs	r1, r0
    2f8c:	54a9      	strb	r1, [r5, r2]
		release();
    2f8e:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2f90:	605e      	str	r6, [r3, #4]
		release();
    2f92:	f7ff fd99 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2f96:	4b07      	ldr	r3, [pc, #28]	; (2fb4 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    2f98:	9a01      	ldr	r2, [sp, #4]
    2f9a:	50d4      	str	r4, [r2, r3]
    2f9c:	e7b7      	b.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
    2f9e:	0011      	movs	r1, r2
    2fa0:	0028      	movs	r0, r5
    2fa2:	f7ff fca9 	bl	28f8 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    2fa6:	e7b2      	b.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
    2fa8:	20000824 	.word	0x20000824
    2fac:	8fffffff 	.word	0x8fffffff
    2fb0:	20000398 	.word	0x20000398
    2fb4:	20000370 	.word	0x20000370
    2fb8:	0000fa04 	.word	0x0000fa04

00002fbc <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    2fbc:	b570      	push	{r4, r5, r6, lr}
    2fbe:	0005      	movs	r5, r0
    2fc0:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    2fc2:	4b06      	ldr	r3, [pc, #24]	; (2fdc <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    2fc4:	00a2      	lsls	r2, r4, #2
    2fc6:	58d2      	ldr	r2, [r2, r3]
    2fc8:	2a00      	cmp	r2, #0
    2fca:	d005      	beq.n	2fd8 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    2fcc:	0021      	movs	r1, r4
    2fce:	0028      	movs	r0, r5
    2fd0:	f7ff ff80 	bl	2ed4 <_ZN14USBDeviceClass6initEPEmm>
    2fd4:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    2fd6:	e7f4      	b.n	2fc2 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    2fd8:	bd70      	pop	{r4, r5, r6, pc}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	20000010 	.word	0x20000010

00002fe0 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    2fe0:	4b08      	ldr	r3, [pc, #32]	; (3004 <_ZN14USBDeviceClass9availableEm+0x24>)
    2fe2:	008a      	lsls	r2, r1, #2
    2fe4:	58d0      	ldr	r0, [r2, r3]
{
    2fe6:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    2fe8:	2800      	cmp	r0, #0
    2fea:	d003      	beq.n	2ff4 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    2fec:	6803      	ldr	r3, [r0, #0]
    2fee:	689b      	ldr	r3, [r3, #8]
    2ff0:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    2ff2:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2ff4:	b2c9      	uxtb	r1, r1
    2ff6:	4b04      	ldr	r3, [pc, #16]	; (3008 <_ZN14USBDeviceClass9availableEm+0x28>)
    2ff8:	0149      	lsls	r1, r1, #5
    2ffa:	1859      	adds	r1, r3, r1
    2ffc:	6888      	ldr	r0, [r1, #8]
    2ffe:	0480      	lsls	r0, r0, #18
    3000:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    3002:	e7f6      	b.n	2ff2 <_ZN14USBDeviceClass9availableEm+0x12>
    3004:	20000370 	.word	0x20000370
    3008:	20000824 	.word	0x20000824

0000300c <_ZN14USBDeviceClass5flushEm>:
{
    300c:	b510      	push	{r4, lr}
    300e:	000c      	movs	r4, r1
	if (available(ep)) {
    3010:	f7ff ffe6 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3014:	2800      	cmp	r0, #0
    3016:	d00c      	beq.n	3032 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3018:	4b06      	ldr	r3, [pc, #24]	; (3034 <_ZN14USBDeviceClass5flushEm+0x28>)
    301a:	b2e4      	uxtb	r4, r4
    301c:	681b      	ldr	r3, [r3, #0]
    301e:	3408      	adds	r4, #8
    3020:	0164      	lsls	r4, r4, #5
    3022:	191c      	adds	r4, r3, r4
    3024:	2380      	movs	r3, #128	; 0x80
    3026:	7962      	ldrb	r2, [r4, #5]
    3028:	425b      	negs	r3, r3
    302a:	4313      	orrs	r3, r2
    302c:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    302e:	2302      	movs	r3, #2
    3030:	71e3      	strb	r3, [r4, #7]
}
    3032:	bd10      	pop	{r4, pc}
    3034:	20000824 	.word	0x20000824

00003038 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    3038:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    303a:	4b13      	ldr	r3, [pc, #76]	; (3088 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    303c:	b2cc      	uxtb	r4, r1
    303e:	4a13      	ldr	r2, [pc, #76]	; (308c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    3040:	0160      	lsls	r0, r4, #5
    3042:	0189      	lsls	r1, r1, #6
    3044:	1859      	adds	r1, r3, r1
    3046:	1813      	adds	r3, r2, r0
    3048:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    304a:	6899      	ldr	r1, [r3, #8]
    304c:	4d10      	ldr	r5, [pc, #64]	; (3090 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    304e:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3050:	400d      	ands	r5, r1
    3052:	2180      	movs	r1, #128	; 0x80
    3054:	0289      	lsls	r1, r1, #10
    3056:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3058:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    305a:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    305c:	6899      	ldr	r1, [r3, #8]
    305e:	0b89      	lsrs	r1, r1, #14
    3060:	0389      	lsls	r1, r1, #14
    3062:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3064:	6811      	ldr	r1, [r2, #0]
    3066:	0163      	lsls	r3, r4, #5
    3068:	18cb      	adds	r3, r1, r3
    306a:	791e      	ldrb	r6, [r3, #4]
    306c:	4335      	orrs	r5, r6
    306e:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    3070:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    3072:	066d      	lsls	r5, r5, #25
    3074:	d5fc      	bpl.n	3070 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    3076:	0164      	lsls	r4, r4, #5
    3078:	1909      	adds	r1, r1, r4
    307a:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    307c:	07db      	lsls	r3, r3, #31
    307e:	d5fc      	bpl.n	307a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3080:	1812      	adds	r2, r2, r0
    3082:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    3084:	b2c0      	uxtb	r0, r0
}
    3086:	bd70      	pop	{r4, r5, r6, pc}
    3088:	20000558 	.word	0x20000558
    308c:	20000824 	.word	0x20000824
    3090:	f0003fff 	.word	0xf0003fff

00003094 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    3094:	b570      	push	{r4, r5, r6, lr}
    3096:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3098:	2240      	movs	r2, #64	; 0x40
    309a:	4b0b      	ldr	r3, [pc, #44]	; (30c8 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    309c:	000d      	movs	r5, r1
    309e:	681b      	ldr	r3, [r3, #0]
    30a0:	33ff      	adds	r3, #255	; 0xff
    30a2:	7959      	ldrb	r1, [r3, #5]
    30a4:	430a      	orrs	r2, r1
    30a6:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    30a8:	2100      	movs	r1, #0
    30aa:	f7ff ffc5 	bl	3038 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    30ae:	42a0      	cmp	r0, r4
    30b0:	d900      	bls.n	30b4 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    30b2:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    30b4:	2300      	movs	r3, #0
		data[i] = buffer[i];
    30b6:	4905      	ldr	r1, [pc, #20]	; (30cc <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    30b8:	42a3      	cmp	r3, r4
    30ba:	d003      	beq.n	30c4 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    30bc:	5c5a      	ldrb	r2, [r3, r1]
    30be:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    30c0:	3301      	adds	r3, #1
    30c2:	e7f9      	b.n	30b8 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    30c4:	bd70      	pop	{r4, r5, r6, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	20000824 	.word	0x20000824
    30cc:	20000558 	.word	0x20000558

000030d0 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    30d0:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    30d2:	b2c9      	uxtb	r1, r1
    30d4:	480b      	ldr	r0, [pc, #44]	; (3104 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    30d6:	0149      	lsls	r1, r1, #5
    30d8:	1842      	adds	r2, r0, r1
    30da:	6893      	ldr	r3, [r2, #8]
    30dc:	049b      	lsls	r3, r3, #18
    30de:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    30e0:	2b3f      	cmp	r3, #63	; 0x3f
    30e2:	dd0b      	ble.n	30fc <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    30e4:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    30e6:	3b40      	subs	r3, #64	; 0x40
    30e8:	049b      	lsls	r3, r3, #18
    30ea:	0ba4      	lsrs	r4, r4, #14
    30ec:	0c9b      	lsrs	r3, r3, #18
    30ee:	03a4      	lsls	r4, r4, #14
    30f0:	4323      	orrs	r3, r4
    30f2:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    30f4:	1841      	adds	r1, r0, r1
    30f6:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    30f8:	b2c0      	uxtb	r0, r0
}
    30fa:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    30fc:	6893      	ldr	r3, [r2, #8]
    30fe:	0b9b      	lsrs	r3, r3, #14
    3100:	039b      	lsls	r3, r3, #14
    3102:	e7f6      	b.n	30f2 <_ZN14USBDeviceClass7armRecvEm+0x22>
    3104:	20000824 	.word	0x20000824

00003108 <_ZN14USBDeviceClass4recvEmPvm>:
{
    3108:	b5f0      	push	{r4, r5, r6, r7, lr}
    310a:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    310c:	4b30      	ldr	r3, [pc, #192]	; (31d0 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    310e:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    3110:	681b      	ldr	r3, [r3, #0]
{
    3112:	0006      	movs	r6, r0
    3114:	000d      	movs	r5, r1
    3116:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    3118:	2b00      	cmp	r3, #0
    311a:	d055      	beq.n	31c8 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
    311c:	4f2d      	ldr	r7, [pc, #180]	; (31d4 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    311e:	7839      	ldrb	r1, [r7, #0]
    3120:	b2c9      	uxtb	r1, r1
    3122:	2900      	cmp	r1, #0
    3124:	d102      	bne.n	312c <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    3126:	2014      	movs	r0, #20
    3128:	f000 fcd2 	bl	3ad0 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
    312c:	2364      	movs	r3, #100	; 0x64
    312e:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
    3130:	4b29      	ldr	r3, [pc, #164]	; (31d8 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    3132:	00aa      	lsls	r2, r5, #2
    3134:	58d0      	ldr	r0, [r2, r3]
    3136:	2800      	cmp	r0, #0
    3138:	d008      	beq.n	314c <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    313a:	6803      	ldr	r3, [r0, #0]
    313c:	0022      	movs	r2, r4
    313e:	685b      	ldr	r3, [r3, #4]
    3140:	9901      	ldr	r1, [sp, #4]
    3142:	4798      	blx	r3
    3144:	0004      	movs	r4, r0
}
    3146:	0020      	movs	r0, r4
    3148:	b005      	add	sp, #20
    314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    314c:	0029      	movs	r1, r5
    314e:	0030      	movs	r0, r6
    3150:	f7ff ff46 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3154:	4284      	cmp	r4, r0
    3156:	d904      	bls.n	3162 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    3158:	0029      	movs	r1, r5
    315a:	0030      	movs	r0, r6
    315c:	f7ff ff40 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3160:	0004      	movs	r4, r0
	armRecv(ep);
    3162:	0029      	movs	r1, r5
    3164:	0030      	movs	r0, r6
    3166:	f7ff ffb3 	bl	30d0 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    316a:	2101      	movs	r1, #1
    316c:	b2eb      	uxtb	r3, r5
    316e:	4f1b      	ldr	r7, [pc, #108]	; (31dc <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    3170:	9303      	str	r3, [sp, #12]
    3172:	015b      	lsls	r3, r3, #5
    3174:	9302      	str	r3, [sp, #8]
    3176:	9a02      	ldr	r2, [sp, #8]
    3178:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    317a:	9801      	ldr	r0, [sp, #4]
    317c:	189b      	adds	r3, r3, r2
    317e:	33ff      	adds	r3, #255	; 0xff
    3180:	7a5a      	ldrb	r2, [r3, #9]
    3182:	430a      	orrs	r2, r1
    3184:	4916      	ldr	r1, [pc, #88]	; (31e0 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    3186:	725a      	strb	r2, [r3, #9]
    3188:	01ab      	lsls	r3, r5, #6
    318a:	18c9      	adds	r1, r1, r3
    318c:	0022      	movs	r2, r4
    318e:	f008 fb2c 	bl	b7ea <memcpy>
	if (len && !available(ep)) {
    3192:	2c00      	cmp	r4, #0
    3194:	d0d7      	beq.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    3196:	0029      	movs	r1, r5
    3198:	0030      	movs	r0, r6
    319a:	f7ff ff21 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    319e:	2800      	cmp	r0, #0
    31a0:	d1d1      	bne.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    31a2:	2140      	movs	r1, #64	; 0x40
    31a4:	9b03      	ldr	r3, [sp, #12]
    31a6:	683a      	ldr	r2, [r7, #0]
    31a8:	3308      	adds	r3, #8
    31aa:	015b      	lsls	r3, r3, #5
    31ac:	18d3      	adds	r3, r2, r3
    31ae:	7918      	ldrb	r0, [r3, #4]
    31b0:	4301      	orrs	r1, r0
    31b2:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    31b4:	2101      	movs	r1, #1
    31b6:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    31b8:	2101      	movs	r1, #1
    31ba:	9b02      	ldr	r3, [sp, #8]
    31bc:	18d3      	adds	r3, r2, r3
    31be:	33ff      	adds	r3, #255	; 0xff
    31c0:	7a9a      	ldrb	r2, [r3, #10]
    31c2:	430a      	orrs	r2, r1
    31c4:	729a      	strb	r2, [r3, #10]
    31c6:	e7be      	b.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    31c8:	2401      	movs	r4, #1
    31ca:	4264      	negs	r4, r4
    31cc:	e7bb      	b.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	2000081c 	.word	0x2000081c
    31d4:	2000038c 	.word	0x2000038c
    31d8:	20000370 	.word	0x20000370
    31dc:	20000824 	.word	0x20000824
    31e0:	20000558 	.word	0x20000558

000031e4 <_ZN14USBDeviceClass4recvEm>:
{
    31e4:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    31e6:	466b      	mov	r3, sp
    31e8:	1ddc      	adds	r4, r3, #7
    31ea:	0022      	movs	r2, r4
    31ec:	2301      	movs	r3, #1
    31ee:	f7ff ff8b 	bl	3108 <_ZN14USBDeviceClass4recvEmPvm>
    31f2:	2801      	cmp	r0, #1
    31f4:	d101      	bne.n	31fa <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    31f6:	7820      	ldrb	r0, [r4, #0]
}
    31f8:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    31fa:	2001      	movs	r0, #1
    31fc:	4240      	negs	r0, r0
    31fe:	e7fb      	b.n	31f8 <_ZN14USBDeviceClass4recvEm+0x14>

00003200 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    3200:	b5f0      	push	{r4, r5, r6, r7, lr}
    3202:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    3204:	4b3a      	ldr	r3, [pc, #232]	; (32f0 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
    3206:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    3208:	681b      	ldr	r3, [r3, #0]
{
    320a:	000f      	movs	r7, r1
    320c:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    320e:	2b00      	cmp	r3, #0
    3210:	d03f      	beq.n	3292 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    3212:	2380      	movs	r3, #128	; 0x80
    3214:	01db      	lsls	r3, r3, #7
    3216:	429e      	cmp	r6, r3
    3218:	d83b      	bhi.n	3292 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    321a:	4c36      	ldr	r4, [pc, #216]	; (32f4 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    321c:	7821      	ldrb	r1, [r4, #0]
    321e:	b2c9      	uxtb	r1, r1
    3220:	2900      	cmp	r1, #0
    3222:	d102      	bne.n	322a <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    3224:	2015      	movs	r0, #21
    3226:	f000 fc53 	bl	3ad0 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    322a:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    322c:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    322e:	4a32      	ldr	r2, [pc, #200]	; (32f8 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    3230:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    3232:	01bb      	lsls	r3, r7, #6
    3234:	18d3      	adds	r3, r2, r3
    3236:	9302      	str	r3, [sp, #8]
	while (len != 0)
    3238:	2e00      	cmp	r6, #0
    323a:	d02c      	beq.n	3296 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    323c:	4b2f      	ldr	r3, [pc, #188]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    323e:	681b      	ldr	r3, [r3, #0]
    3240:	9303      	str	r3, [sp, #12]
    3242:	23ff      	movs	r3, #255	; 0xff
    3244:	403b      	ands	r3, r7
    3246:	001c      	movs	r4, r3
    3248:	9300      	str	r3, [sp, #0]
    324a:	3408      	adds	r4, #8
    324c:	9b03      	ldr	r3, [sp, #12]
    324e:	0164      	lsls	r4, r4, #5
    3250:	191c      	adds	r4, r3, r4
    3252:	79a3      	ldrb	r3, [r4, #6]
    3254:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    3256:	d021      	beq.n	329c <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    3258:	4b29      	ldr	r3, [pc, #164]	; (3300 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    325a:	492a      	ldr	r1, [pc, #168]	; (3304 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    325c:	6818      	ldr	r0, [r3, #0]
    325e:	f005 f975 	bl	854c <__udivsi3>
    3262:	4b29      	ldr	r3, [pc, #164]	; (3308 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    3264:	2117      	movs	r1, #23
    3266:	4358      	muls	r0, r3
    3268:	f005 f970 	bl	854c <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    326c:	4b27      	ldr	r3, [pc, #156]	; (330c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    326e:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    3270:	0792      	lsls	r2, r2, #30
    3272:	d413      	bmi.n	329c <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    3274:	5dda      	ldrb	r2, [r3, r7]
    3276:	2a00      	cmp	r2, #0
    3278:	d101      	bne.n	327e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    327a:	3801      	subs	r0, #1
    327c:	d2f7      	bcs.n	326e <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    327e:	2201      	movs	r2, #1
    3280:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3282:	9b00      	ldr	r3, [sp, #0]
    3284:	015a      	lsls	r2, r3, #5
    3286:	4b1d      	ldr	r3, [pc, #116]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    3288:	189b      	adds	r3, r3, r2
    328a:	699a      	ldr	r2, [r3, #24]
    328c:	0b92      	lsrs	r2, r2, #14
    328e:	0392      	lsls	r2, r2, #14
    3290:	619a      	str	r2, [r3, #24]
					return -1;
    3292:	2501      	movs	r5, #1
    3294:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    3296:	0028      	movs	r0, r5
    3298:	b005      	add	sp, #20
    329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    329c:	2200      	movs	r2, #0
    329e:	4b1b      	ldr	r3, [pc, #108]	; (330c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    32a0:	0034      	movs	r4, r6
    32a2:	55da      	strb	r2, [r3, r7]
    32a4:	2e3f      	cmp	r6, #63	; 0x3f
    32a6:	d900      	bls.n	32aa <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
    32a8:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    32aa:	0022      	movs	r2, r4
    32ac:	9901      	ldr	r1, [sp, #4]
    32ae:	9802      	ldr	r0, [sp, #8]
    32b0:	f008 fa9b 	bl	b7ea <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32b4:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32b6:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32b8:	015a      	lsls	r2, r3, #5
    32ba:	4b10      	ldr	r3, [pc, #64]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32bc:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32be:	189b      	adds	r3, r3, r2
    32c0:	9a02      	ldr	r2, [sp, #8]
		written += length;
    32c2:	192d      	adds	r5, r5, r4
    32c4:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32c6:	699a      	ldr	r2, [r3, #24]
		len -= length;
    32c8:	1b36      	subs	r6, r6, r4
    32ca:	0b92      	lsrs	r2, r2, #14
    32cc:	0392      	lsls	r2, r2, #14
    32ce:	430a      	orrs	r2, r1
    32d0:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    32d2:	9b00      	ldr	r3, [sp, #0]
    32d4:	9a03      	ldr	r2, [sp, #12]
    32d6:	3308      	adds	r3, #8
    32d8:	015b      	lsls	r3, r3, #5
    32da:	18d3      	adds	r3, r2, r3
    32dc:	2202      	movs	r2, #2
    32de:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    32e0:	7959      	ldrb	r1, [r3, #5]
    32e2:	3a82      	subs	r2, #130	; 0x82
    32e4:	430a      	orrs	r2, r1
    32e6:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    32e8:	9b01      	ldr	r3, [sp, #4]
    32ea:	191b      	adds	r3, r3, r4
    32ec:	9301      	str	r3, [sp, #4]
	while (len != 0)
    32ee:	e7a3      	b.n	3238 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    32f0:	2000081c 	.word	0x2000081c
    32f4:	2000038d 	.word	0x2000038d
    32f8:	20000398 	.word	0x20000398
    32fc:	20000824 	.word	0x20000824
    3300:	20000038 	.word	0x20000038
    3304:	000f4240 	.word	0x000f4240
    3308:	00011170 	.word	0x00011170
    330c:	2000038f 	.word	0x2000038f

00003310 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    3310:	b570      	push	{r4, r5, r6, lr}
    3312:	000d      	movs	r5, r1
    3314:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    3316:	4e0d      	ldr	r6, [pc, #52]	; (334c <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    3318:	01ab      	lsls	r3, r5, #6
    331a:	18f6      	adds	r6, r6, r3
{
    331c:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    331e:	0030      	movs	r0, r6
    3320:	0022      	movs	r2, r4
    3322:	f008 fa62 	bl	b7ea <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3326:	b2ed      	uxtb	r5, r5
    3328:	4909      	ldr	r1, [pc, #36]	; (3350 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    332a:	016d      	lsls	r5, r5, #5
    332c:	194d      	adds	r5, r1, r5
    332e:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3330:	69ab      	ldr	r3, [r5, #24]
    3332:	4a08      	ldr	r2, [pc, #32]	; (3354 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    3334:	0020      	movs	r0, r4
    3336:	4013      	ands	r3, r2
    3338:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    333a:	69ab      	ldr	r3, [r5, #24]
    333c:	04a2      	lsls	r2, r4, #18
    333e:	0b9b      	lsrs	r3, r3, #14
    3340:	0c92      	lsrs	r2, r2, #18
    3342:	039b      	lsls	r3, r3, #14
    3344:	4313      	orrs	r3, r2
    3346:	61ab      	str	r3, [r5, #24]
    3348:	bd70      	pop	{r4, r5, r6, pc}
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	20000398 	.word	0x20000398
    3350:	20000824 	.word	0x20000824
    3354:	f0003fff 	.word	0xf0003fff

00003358 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    3358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    335a:	4b10      	ldr	r3, [pc, #64]	; (339c <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    335c:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    335e:	781b      	ldrb	r3, [r3, #0]
{
    3360:	000f      	movs	r7, r1
    3362:	0015      	movs	r5, r2
	if (_dry_run == true)
    3364:	2b00      	cmp	r3, #0
    3366:	d10c      	bne.n	3382 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    3368:	4b0d      	ldr	r3, [pc, #52]	; (33a0 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    336a:	0016      	movs	r6, r2
    336c:	781c      	ldrb	r4, [r3, #0]
    336e:	2c00      	cmp	r4, #0
    3370:	d009      	beq.n	3386 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    3372:	4e0c      	ldr	r6, [pc, #48]	; (33a4 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    3374:	480c      	ldr	r0, [pc, #48]	; (33a8 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    3376:	8834      	ldrh	r4, [r6, #0]
    3378:	1900      	adds	r0, r0, r4
		_pack_size += len;
    337a:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    337c:	f008 fa35 	bl	b7ea <memcpy>
		_pack_size += len;
    3380:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    3382:	0028      	movs	r0, r5
    3384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    3386:	2e00      	cmp	r6, #0
    3388:	d0fb      	beq.n	3382 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    338a:	193a      	adds	r2, r7, r4
    338c:	0033      	movs	r3, r6
    338e:	2100      	movs	r1, #0
    3390:	9801      	ldr	r0, [sp, #4]
    3392:	f7ff ffbd 	bl	3310 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    3396:	1824      	adds	r4, r4, r0
		len -= sent;
    3398:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    339a:	e7f4      	b.n	3386 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    339c:	20000718 	.word	0x20000718
    33a0:	20000819 	.word	0x20000819
    33a4:	2000081a 	.word	0x2000081a
    33a8:	20000719 	.word	0x20000719

000033ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    33ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    33ae:	2000      	movs	r0, #0
{
    33b0:	af00      	add	r7, sp, #0
    33b2:	000e      	movs	r6, r1
    33b4:	0015      	movs	r5, r2
	if (maxlen < 2)
    33b6:	2a01      	cmp	r2, #1
    33b8:	dd26      	ble.n	3408 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    33ba:	1dd3      	adds	r3, r2, #7
    33bc:	466a      	mov	r2, sp
    33be:	08db      	lsrs	r3, r3, #3
    33c0:	00db      	lsls	r3, r3, #3
    33c2:	1ad3      	subs	r3, r2, r3
    33c4:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    33c6:	0008      	movs	r0, r1
    33c8:	f009 fb37 	bl	ca3a <strlen>
	uint8_t buffer[maxlen];
    33cc:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    33ce:	2303      	movs	r3, #3
		buffer[i] = 0;
    33d0:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    33d2:	3001      	adds	r0, #1
    33d4:	0040      	lsls	r0, r0, #1
    33d6:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    33d8:	7063      	strb	r3, [r4, #1]
    33da:	1e5a      	subs	r2, r3, #1
    33dc:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    33de:	4295      	cmp	r5, r2
    33e0:	dd0b      	ble.n	33fa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    33e2:	7830      	ldrb	r0, [r6, #0]
    33e4:	2800      	cmp	r0, #0
    33e6:	d008      	beq.n	33fa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    33e8:	3601      	adds	r6, #1
    33ea:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    33ec:	429d      	cmp	r5, r3
    33ee:	d003      	beq.n	33f8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    33f0:	54e1      	strb	r1, [r4, r3]
    33f2:	3302      	adds	r3, #2
    33f4:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    33f6:	e7f0      	b.n	33da <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    33f8:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    33fa:	0021      	movs	r1, r4
    33fc:	4803      	ldr	r0, [pc, #12]	; (340c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    33fe:	f7ff ffab 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
    3402:	1e43      	subs	r3, r0, #1
    3404:	4198      	sbcs	r0, r3
    3406:	b2c0      	uxtb	r0, r0
}
    3408:	46bd      	mov	sp, r7
    340a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    340c:	2000036c 	.word	0x2000036c

00003410 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    3410:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    3412:	2700      	movs	r7, #0
	_dry_run = true;
    3414:	2601      	movs	r6, #1
{
    3416:	b087      	sub	sp, #28
	_dry_run = true;
    3418:	4b1e      	ldr	r3, [pc, #120]	; (3494 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    341a:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    341c:	a902      	add	r1, sp, #8
	_dry_run = true;
    341e:	701e      	strb	r6, [r3, #0]
{
    3420:	0005      	movs	r5, r0
	uint32_t total = 0;
    3422:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    3424:	f7ff fc5e 	bl	2ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    3428:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    342a:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    342c:	2209      	movs	r2, #9
    342e:	0039      	movs	r1, r7
    3430:	0020      	movs	r0, r4
    3432:	f008 f9f5 	bl	b820 <memset>
    3436:	2309      	movs	r3, #9
    3438:	7023      	strb	r3, [r4, #0]
    343a:	2302      	movs	r3, #2
    343c:	7063      	strb	r3, [r4, #1]
    343e:	339e      	adds	r3, #158	; 0x9e
    3440:	71e3      	strb	r3, [r4, #7]
    3442:	335a      	adds	r3, #90	; 0x5a
    3444:	7223      	strb	r3, [r4, #8]
    3446:	9b02      	ldr	r3, [sp, #8]
    3448:	7166      	strb	r6, [r4, #5]
    344a:	3309      	adds	r3, #9
    344c:	8063      	strh	r3, [r4, #2]
    344e:	466b      	mov	r3, sp
    3450:	791b      	ldrb	r3, [r3, #4]
    3452:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    3454:	4b0f      	ldr	r3, [pc, #60]	; (3494 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    3456:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    3458:	9b00      	ldr	r3, [sp, #0]
    345a:	2b09      	cmp	r3, #9
    345c:	d107      	bne.n	346e <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    345e:	001a      	movs	r2, r3
    3460:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    3462:	0028      	movs	r0, r5
    3464:	f7ff ff78 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    3468:	2001      	movs	r0, #1
    346a:	b007      	add	sp, #28
    346c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    346e:	4b0a      	ldr	r3, [pc, #40]	; (3498 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    3470:	2209      	movs	r2, #9
		_pack_message = true;
    3472:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    3474:	4e09      	ldr	r6, [pc, #36]	; (349c <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    3476:	0021      	movs	r1, r4
    3478:	0028      	movs	r0, r5
	total = 0;
    347a:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    347c:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    347e:	f7ff ff6b 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    3482:	a902      	add	r1, sp, #8
    3484:	0028      	movs	r0, r5
    3486:	f7ff fc2d 	bl	2ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    348a:	4b03      	ldr	r3, [pc, #12]	; (3498 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    348c:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    348e:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    3490:	4903      	ldr	r1, [pc, #12]	; (34a0 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    3492:	e7e6      	b.n	3462 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    3494:	20000718 	.word	0x20000718
    3498:	20000819 	.word	0x20000819
    349c:	2000081a 	.word	0x2000081a
    34a0:	20000719 	.word	0x20000719

000034a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    34a4:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    34a6:	78ce      	ldrb	r6, [r1, #3]
{
    34a8:	b092      	sub	sp, #72	; 0x48
    34aa:	0005      	movs	r5, r0
    34ac:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    34ae:	2e02      	cmp	r6, #2
    34b0:	d108      	bne.n	34c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    34b2:	88c9      	ldrh	r1, [r1, #6]
    34b4:	482b      	ldr	r0, [pc, #172]	; (3564 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    34b6:	f7ff ffab 	bl	3410 <_ZN14USBDeviceClass17sendConfigurationEm>
    34ba:	1e43      	subs	r3, r0, #1
    34bc:	4198      	sbcs	r0, r3
    34be:	b2c0      	uxtb	r0, r0
}
    34c0:	b012      	add	sp, #72	; 0x48
    34c2:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    34c4:	f001 ff46 	bl	5354 <_Z12PluggableUSBv>
    34c8:	0021      	movs	r1, r4
    34ca:	f001 ff13 	bl	52f4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    34ce:	2800      	cmp	r0, #0
    34d0:	d003      	beq.n	34da <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    34d2:	17c3      	asrs	r3, r0, #31
    34d4:	1a18      	subs	r0, r3, r0
    34d6:	0fc0      	lsrs	r0, r0, #31
    34d8:	e7f2      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    34da:	2e01      	cmp	r6, #1
    34dc:	d10b      	bne.n	34f6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (*desc_addr > setup.wLength) {
    34de:	88e2      	ldrh	r2, [r4, #6]
    34e0:	4921      	ldr	r1, [pc, #132]	; (3568 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
    34e2:	2a11      	cmp	r2, #17
    34e4:	dc10      	bgt.n	3508 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    34e6:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    34e8:	2a00      	cmp	r2, #0
    34ea:	d00d      	beq.n	3508 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    34ec:	0028      	movs	r0, r5
    34ee:	f7ff ff33 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    34f2:	2001      	movs	r0, #1
    34f4:	e7e4      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    34f6:	2e03      	cmp	r6, #3
    34f8:	d1e2      	bne.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    34fa:	78a3      	ldrb	r3, [r4, #2]
    34fc:	2b00      	cmp	r3, #0
    34fe:	d105      	bne.n	350c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    3500:	88e2      	ldrh	r2, [r4, #6]
    3502:	491a      	ldr	r1, [pc, #104]	; (356c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    3504:	2a03      	cmp	r2, #3
    3506:	ddee      	ble.n	34e6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    3508:	780a      	ldrb	r2, [r1, #0]
    350a:	e7ef      	b.n	34ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    350c:	2b02      	cmp	r3, #2
    350e:	d105      	bne.n	351c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    3510:	79a2      	ldrb	r2, [r4, #6]
    3512:	4917      	ldr	r1, [pc, #92]	; (3570 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3514:	0028      	movs	r0, r5
    3516:	f7ff ff49 	bl	33ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    351a:	e7d1      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    351c:	2b01      	cmp	r3, #1
    351e:	d102      	bne.n	3526 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3520:	79a2      	ldrb	r2, [r4, #6]
    3522:	4914      	ldr	r1, [pc, #80]	; (3574 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    3524:	e7f6      	b.n	3514 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    3526:	2b03      	cmp	r3, #3
    3528:	d1ca      	bne.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    352a:	4b13      	ldr	r3, [pc, #76]	; (3578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    352c:	a901      	add	r1, sp, #4
    352e:	6818      	ldr	r0, [r3, #0]
    3530:	f7ff f9d0 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    3534:	4b11      	ldr	r3, [pc, #68]	; (357c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    3536:	a903      	add	r1, sp, #12
    3538:	6818      	ldr	r0, [r3, #0]
    353a:	f7ff f9cb 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    353e:	4b10      	ldr	r3, [pc, #64]	; (3580 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    3540:	a905      	add	r1, sp, #20
    3542:	6818      	ldr	r0, [r3, #0]
    3544:	f7ff f9c6 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    3548:	4b0e      	ldr	r3, [pc, #56]	; (3584 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    354a:	a907      	add	r1, sp, #28
    354c:	6818      	ldr	r0, [r3, #0]
    354e:	f7ff f9c1 	bl	28d4 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    3552:	f001 feff 	bl	5354 <_Z12PluggableUSBv>
    3556:	a909      	add	r1, sp, #36	; 0x24
    3558:	f001 fedc 	bl	5314 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    355c:	79a2      	ldrb	r2, [r4, #6]
    355e:	a901      	add	r1, sp, #4
    3560:	e7d8      	b.n	3514 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	2000036c 	.word	0x2000036c
    3568:	0000fa32 	.word	0x0000fa32
    356c:	0000fa1e 	.word	0x0000fa1e
    3570:	0000fa10 	.word	0x0000fa10
    3574:	0000fa22 	.word	0x0000fa22
    3578:	0080a00c 	.word	0x0080a00c
    357c:	0080a040 	.word	0x0080a040
    3580:	0080a044 	.word	0x0080a044
    3584:	0080a048 	.word	0x0080a048

00003588 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    3588:	b573      	push	{r0, r1, r4, r5, r6, lr}
    358a:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    358c:	7848      	ldrb	r0, [r1, #1]
{
    358e:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    3590:	280b      	cmp	r0, #11
    3592:	d811      	bhi.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    3594:	f004 ffd0 	bl	8538 <__gnu_thumb1_case_uqi>
    3598:	2e101d06 	.word	0x2e101d06
    359c:	70484310 	.word	0x70484310
    35a0:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    35a4:	7809      	ldrb	r1, [r1, #0]
    35a6:	aa01      	add	r2, sp, #4
    35a8:	2900      	cmp	r1, #0
    35aa:	d107      	bne.n	35bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    35ac:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    35ae:	7011      	strb	r1, [r2, #0]
    35b0:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    35b2:	0030      	movs	r0, r6
    35b4:	f7ff feac 	bl	3310 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    35b8:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    35ba:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    35bc:	2300      	movs	r3, #0
    35be:	7013      	strb	r3, [r2, #0]
    35c0:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    35c2:	4b2e      	ldr	r3, [pc, #184]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    35c4:	781b      	ldrb	r3, [r3, #0]
    35c6:	2b01      	cmp	r3, #1
    35c8:	d100      	bne.n	35cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    35ca:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    35cc:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    35ce:	2100      	movs	r1, #0
    35d0:	e7ef      	b.n	35b2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    35d2:	788a      	ldrb	r2, [r1, #2]
    35d4:	2300      	movs	r3, #0
    35d6:	2a01      	cmp	r2, #1
    35d8:	d104      	bne.n	35e4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    35da:	aa01      	add	r2, sp, #4
    35dc:	7013      	strb	r3, [r2, #0]
    35de:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    35e0:	4b27      	ldr	r3, [pc, #156]	; (3680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    35e2:	e7ef      	b.n	35c4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    35e4:	4a25      	ldr	r2, [pc, #148]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    35e6:	7013      	strb	r3, [r2, #0]
    35e8:	4a26      	ldr	r2, [pc, #152]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    35ea:	6993      	ldr	r3, [r2, #24]
    35ec:	0b9b      	lsrs	r3, r3, #14
    35ee:	039b      	lsls	r3, r3, #14
    35f0:	6193      	str	r3, [r2, #24]
    35f2:	e7e1      	b.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    35f4:	788c      	ldrb	r4, [r1, #2]
    35f6:	2c01      	cmp	r4, #1
    35f8:	d106      	bne.n	3608 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    35fa:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    35fc:	4b20      	ldr	r3, [pc, #128]	; (3680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    35fe:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    3600:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    3602:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    3604:	0023      	movs	r3, r4
    3606:	e7d4      	b.n	35b2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    3608:	2c00      	cmp	r4, #0
    360a:	d108      	bne.n	361e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    360c:	2001      	movs	r0, #1
    360e:	4b1b      	ldr	r3, [pc, #108]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    3610:	4a1c      	ldr	r2, [pc, #112]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3612:	7018      	strb	r0, [r3, #0]
    3614:	6993      	ldr	r3, [r2, #24]
    3616:	0b9b      	lsrs	r3, r3, #14
    3618:	039b      	lsls	r3, r3, #14
    361a:	6193      	str	r3, [r2, #24]
			return true;
    361c:	e7cd      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    361e:	78a9      	ldrb	r1, [r5, #2]
    3620:	0030      	movs	r0, r6
    3622:	f7ff fc11 	bl	2e48 <_ZN14USBDeviceClass10setAddressEm>
    3626:	e7c7      	b.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    3628:	0030      	movs	r0, r6
    362a:	f7ff ff3b 	bl	34a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    362e:	e7c4      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    3630:	2301      	movs	r3, #1
    3632:	4a15      	ldr	r2, [pc, #84]	; (3688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    3634:	e7cb      	b.n	35ce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    3636:	780b      	ldrb	r3, [r1, #0]
			return false;
    3638:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    363a:	06db      	lsls	r3, r3, #27
    363c:	d1bd      	bne.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    363e:	0030      	movs	r0, r6
    3640:	f7ff fcbc 	bl	2fbc <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    3644:	202a      	movs	r0, #42	; 0x2a
    3646:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    3648:	78aa      	ldrb	r2, [r5, #2]
    364a:	4b0f      	ldr	r3, [pc, #60]	; (3688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    364c:	30ff      	adds	r0, #255	; 0xff
    364e:	601a      	str	r2, [r3, #0]
    3650:	4a0c      	ldr	r2, [pc, #48]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3652:	6813      	ldr	r3, [r2, #0]
    3654:	5c1c      	ldrb	r4, [r3, r0]
    3656:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3658:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    365a:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    365c:	34ff      	adds	r4, #255	; 0xff
    365e:	5d19      	ldrb	r1, [r3, r4]
    3660:	3829      	subs	r0, #41	; 0x29
    3662:	38ff      	subs	r0, #255	; 0xff
    3664:	4301      	orrs	r1, r0
    3666:	5519      	strb	r1, [r3, r4]
    3668:	e7d4      	b.n	3614 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    366a:	2301      	movs	r3, #1
    366c:	4a07      	ldr	r2, [pc, #28]	; (368c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    366e:	e7ae      	b.n	35ce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    3670:	788a      	ldrb	r2, [r1, #2]
    3672:	4b06      	ldr	r3, [pc, #24]	; (368c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    3674:	601a      	str	r2, [r3, #0]
    3676:	e7b7      	b.n	35e8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    3678:	2000      	movs	r0, #0
    367a:	e79e      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    367c:	2000038e 	.word	0x2000038e
    3680:	20000396 	.word	0x20000396
    3684:	20000824 	.word	0x20000824
    3688:	2000081c 	.word	0x2000081c
    368c:	20000820 	.word	0x20000820

00003690 <_ZN14USBDeviceClass10ISRHandlerEv>:
}

#else
void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    3690:	4b4c      	ldr	r3, [pc, #304]	; (37c4 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
{
    3692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    3694:	781c      	ldrb	r4, [r3, #0]
{
    3696:	0007      	movs	r7, r0
	if (_pack_message == true) {
    3698:	2c00      	cmp	r4, #0
    369a:	d000      	beq.n	369e <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    369c:	e091      	b.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    369e:	4e4a      	ldr	r6, [pc, #296]	; (37c8 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    36a0:	6833      	ldr	r3, [r6, #0]
    36a2:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    36a4:	071b      	lsls	r3, r3, #28
    36a6:	d50e      	bpl.n	36c6 <_ZN14USBDeviceClass10ISRHandlerEv+0x36>
    36a8:	0021      	movs	r1, r4
    36aa:	0020      	movs	r0, r4
    36ac:	f7ff f924 	bl	28f8 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    36b0:	6832      	ldr	r2, [r6, #0]
    36b2:	2310      	movs	r3, #16
    36b4:	0011      	movs	r1, r2
    36b6:	31ff      	adds	r1, #255	; 0xff
    36b8:	7a88      	ldrb	r0, [r1, #10]
    36ba:	4303      	orrs	r3, r0
    36bc:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    36be:	4b43      	ldr	r3, [pc, #268]	; (37cc <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    36c0:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    36c2:	2308      	movs	r3, #8
    36c4:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    36c6:	6833      	ldr	r3, [r6, #0]
    36c8:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    36ca:	0752      	lsls	r2, r2, #29
    36cc:	d51f      	bpl.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    36ce:	2204      	movs	r2, #4
    36d0:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    36d2:	4a3f      	ldr	r2, [pc, #252]	; (37d0 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    36d4:	7813      	ldrb	r3, [r2, #0]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d00a      	beq.n	36f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
			txLEDPulse--;
    36da:	7813      	ldrb	r3, [r2, #0]
    36dc:	3b01      	subs	r3, #1
    36de:	b2db      	uxtb	r3, r3
    36e0:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    36e2:	7813      	ldrb	r3, [r2, #0]
    36e4:	2b00      	cmp	r3, #0
    36e6:	d103      	bne.n	36f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
				digitalWrite(PIN_LED_TXL, HIGH);
    36e8:	2101      	movs	r1, #1
    36ea:	2015      	movs	r0, #21
    36ec:	f000 f9f0 	bl	3ad0 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    36f0:	4a38      	ldr	r2, [pc, #224]	; (37d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    36f2:	7813      	ldrb	r3, [r2, #0]
    36f4:	2b00      	cmp	r3, #0
    36f6:	d00a      	beq.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
			rxLEDPulse--;
    36f8:	7813      	ldrb	r3, [r2, #0]
    36fa:	3b01      	subs	r3, #1
    36fc:	b2db      	uxtb	r3, r3
    36fe:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    3700:	7813      	ldrb	r3, [r2, #0]
    3702:	2b00      	cmp	r3, #0
    3704:	d103      	bne.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
				digitalWrite(PIN_LED_RXL, HIGH);
    3706:	2101      	movs	r1, #1
    3708:	2014      	movs	r0, #20
    370a:	f000 f9e1 	bl	3ad0 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    370e:	6833      	ldr	r3, [r6, #0]
    3710:	33ff      	adds	r3, #255	; 0xff
    3712:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    3714:	06d2      	lsls	r2, r2, #27
    3716:	d520      	bpl.n	375a <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    3718:	2210      	movs	r2, #16
    371a:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    371c:	7959      	ldrb	r1, [r3, #5]
    371e:	3230      	adds	r2, #48	; 0x30
    3720:	430a      	orrs	r2, r1
    3722:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    3724:	2360      	movs	r3, #96	; 0x60
    3726:	492c      	ldr	r1, [pc, #176]	; (37d8 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    3728:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    372a:	780a      	ldrb	r2, [r1, #0]
    372c:	421a      	tst	r2, r3
    372e:	d135      	bne.n	379c <_ZN14USBDeviceClass10ISRHandlerEv+0x10c>
			ok = handleStandardSetup(*setup);
    3730:	f7ff ff2a 	bl	3588 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    3734:	2800      	cmp	r0, #0
    3736:	d034      	beq.n	37a2 <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3738:	2280      	movs	r2, #128	; 0x80
    373a:	6833      	ldr	r3, [r6, #0]
    373c:	4252      	negs	r2, r2
    373e:	33ff      	adds	r3, #255	; 0xff
    3740:	7999      	ldrb	r1, [r3, #6]
    3742:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    3744:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    3746:	6833      	ldr	r3, [r6, #0]
    3748:	33ff      	adds	r3, #255	; 0xff
    374a:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    374c:	0652      	lsls	r2, r2, #25
    374e:	d504      	bpl.n	375a <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    3750:	2240      	movs	r2, #64	; 0x40
    3752:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    3754:	7a59      	ldrb	r1, [r3, #9]
    3756:	430a      	orrs	r2, r1
    3758:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    375a:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

        uint8_t i = (USB_EPT_NUM - 1);
        uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    375c:	2507      	movs	r5, #7
    375e:	8c1c      	ldrh	r4, [r3, #32]
    3760:	2301      	movs	r3, #1
    3762:	439c      	bics	r4, r3
    3764:	b2e4      	uxtb	r4, r4
        while (ept_int && i)
        {
                // Check if endpoint has a pending interrupt
                if ((ept_int & (1 << i)) != 0)
    3766:	9301      	str	r3, [sp, #4]
    3768:	b2e9      	uxtb	r1, r5
        while (ept_int && i)
    376a:	2c00      	cmp	r4, #0
    376c:	d029      	beq.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
    376e:	2d00      	cmp	r5, #0
    3770:	d027      	beq.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
                if ((ept_int & (1 << i)) != 0)
    3772:	0023      	movs	r3, r4
    3774:	412b      	asrs	r3, r5
    3776:	9a01      	ldr	r2, [sp, #4]
    3778:	4213      	tst	r3, r2
    377a:	d00d      	beq.n	3798 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    377c:	002b      	movs	r3, r5
    377e:	6832      	ldr	r2, [r6, #0]
    3780:	3308      	adds	r3, #8
    3782:	015b      	lsls	r3, r3, #5
    3784:	18d3      	adds	r3, r2, r3
    3786:	79da      	ldrb	r2, [r3, #7]
                {
                        // Endpoint Transfer Complete (0/1) Interrupt
                        if (usbd.epBank0IsTransferComplete(i) ||
    3788:	07d2      	lsls	r2, r2, #31
    378a:	d411      	bmi.n	37b0 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    378c:	79db      	ldrb	r3, [r3, #7]
    378e:	079b      	lsls	r3, r3, #30
    3790:	d40e      	bmi.n	37b0 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
                                        epHandlers[i]->handleEndpoint();
                                } else {
                                        handleEndpoint(i);
                                }
                        }
                        ept_int &= ~(1 << i);
    3792:	9b01      	ldr	r3, [sp, #4]
    3794:	40ab      	lsls	r3, r5
    3796:	439c      	bics	r4, r3
    3798:	3d01      	subs	r5, #1
    379a:	e7e5      	b.n	3768 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
			ok = handleClassInterfaceSetup(*setup);
    379c:	f7ff fb78 	bl	2e90 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    37a0:	e7c8      	b.n	3734 <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    37a2:	2220      	movs	r2, #32
    37a4:	4b0d      	ldr	r3, [pc, #52]	; (37dc <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    37a6:	e7cd      	b.n	3744 <_ZN14USBDeviceClass10ISRHandlerEv+0xb4>
                                        epHandlers[i]->handleEndpoint();
    37a8:	6803      	ldr	r3, [r0, #0]
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	4798      	blx	r3
    37ae:	e7f0      	b.n	3792 <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                                if (epHandlers[i]) {
    37b0:	4b0b      	ldr	r3, [pc, #44]	; (37e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x150>)
    37b2:	00aa      	lsls	r2, r5, #2
    37b4:	58d0      	ldr	r0, [r2, r3]
    37b6:	2800      	cmp	r0, #0
    37b8:	d1f6      	bne.n	37a8 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
                                        handleEndpoint(i);
    37ba:	0038      	movs	r0, r7
    37bc:	f7ff faa8 	bl	2d10 <_ZN14USBDeviceClass14handleEndpointEh>
    37c0:	e7e7      	b.n	3792 <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                }
                i--;
        }
}
    37c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    37c4:	20000819 	.word	0x20000819
    37c8:	20000824 	.word	0x20000824
    37cc:	2000081c 	.word	0x2000081c
    37d0:	2000038d 	.word	0x2000038d
    37d4:	2000038c 	.word	0x2000038c
    37d8:	20000558 	.word	0x20000558
    37dc:	410000ff 	.word	0x410000ff
    37e0:	20000370 	.word	0x20000370

000037e4 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    37e4:	b510      	push	{r4, lr}
  USBDevice.ISRHandler();
    37e6:	4802      	ldr	r0, [pc, #8]	; (37f0 <UDD_Handler+0xc>)
    37e8:	f7ff ff52 	bl	3690 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    37ec:	bd10      	pop	{r4, pc}
    37ee:	46c0      	nop			; (mov r8, r8)
    37f0:	2000036c 	.word	0x2000036c

000037f4 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    37f4:	2282      	movs	r2, #130	; 0x82
    37f6:	4b02      	ldr	r3, [pc, #8]	; (3800 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    37f8:	05d2      	lsls	r2, r2, #23
    37fa:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    37fc:	4770      	bx	lr
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	20000824 	.word	0x20000824

00003804 <init>:
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3804:	20c0      	movs	r0, #192	; 0xc0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3806:	491a      	ldr	r1, [pc, #104]	; (3870 <init+0x6c>)
    3808:	4b1a      	ldr	r3, [pc, #104]	; (3874 <init+0x70>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    380a:	4a1b      	ldr	r2, [pc, #108]	; (3878 <init+0x74>)
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz (optionally 120MHz for D51).
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    380c:	b510      	push	{r4, lr}
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    380e:	604b      	str	r3, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3810:	6a13      	ldr	r3, [r2, #32]
    3812:	0600      	lsls	r0, r0, #24
    3814:	021b      	lsls	r3, r3, #8
    3816:	0a1b      	lsrs	r3, r3, #8
    3818:	4303      	orrs	r3, r0
    381a:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    381c:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    381e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3820:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3822:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3824:	2180      	movs	r1, #128	; 0x80
    3826:	6a13      	ldr	r3, [r2, #32]
    3828:	0609      	lsls	r1, r1, #24
    382a:	021b      	lsls	r3, r3, #8
    382c:	0a1b      	lsrs	r3, r3, #8
    382e:	430b      	orrs	r3, r1
#elif (SAML21 || SAMC21)
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_SERCOM0 | MCLK_APBCMASK_SERCOM1 | MCLK_APBCMASK_SERCOM2 | MCLK_APBCMASK_SERCOM3 | MCLK_APBCMASK_SERCOM4 ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    3830:	2106      	movs	r1, #6
    3832:	6213      	str	r3, [r2, #32]
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;
    3834:	4b11      	ldr	r3, [pc, #68]	; (387c <init+0x78>)
    3836:	69da      	ldr	r2, [r3, #28]
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    3838:	6a18      	ldr	r0, [r3, #32]
    383a:	4301      	orrs	r1, r0
    383c:	6219      	str	r1, [r3, #32]
  regAPBCMASK |= MCLK_APBCMASK_TCC0 | MCLK_APBCMASK_TCC1 | MCLK_APBCMASK_TCC2 | MCLK_APBCMASK_TC0 | MCLK_APBCMASK_TC1 | MCLK_APBCMASK_TC2 | MCLK_APBCMASK_TC3 | MCLK_APBCMASK_TC4 ;
  #endif

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_DAC ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_ADC;	// On the SAML, ADC is on the low power bridge
    383e:	2108      	movs	r1, #8
    3840:	6a18      	ldr	r0, [r3, #32]
    3842:	4301      	orrs	r1, r0
    3844:	6219      	str	r1, [r3, #32]
  #elif (SAMC21)
  regAPBCMASK |= MCLK_APBCMASK_ADC0 | MCLK_APBCMASK_ADC1 | MCLK_APBCMASK_DAC ;
  #endif

  MCLK->APBCMASK.reg |= regAPBCMASK ;
    3846:	69d9      	ldr	r1, [r3, #28]
    3848:	4311      	orrs	r1, r2
    384a:	4a0d      	ldr	r2, [pc, #52]	; (3880 <init+0x7c>)
    384c:	430a      	orrs	r2, r1
    384e:	61da      	str	r2, [r3, #28]
#endif

  // Setup all pins (digital and analog) in STARTUP mode (enable INEN and set default pull direction to pullup (pullup will not be enabled))
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, PIO_STARTUP ) ;
    3850:	0020      	movs	r0, r4
    3852:	211a      	movs	r1, #26
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    3854:	3401      	adds	r4, #1
    pinMode( ul, PIO_STARTUP ) ;
    3856:	f000 f937 	bl	3ac8 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    385a:	2c24      	cmp	r4, #36	; 0x24
    385c:	d1f8      	bne.n	3850 <init+0x4c>
  PORT->Group[0].OUTSET.reg = (uint32_t)(1<<PIN_PA25G_USB_DP);
  PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].reg = (PORT_PINCFG_PULLEN | PORT_PINCFG_INEN);
#endif

#if !defined(ADC_NO_INIT_IF_UNUSED)
  initADC();         // Initialize Analog Controller
    385e:	f000 f89f 	bl	39a0 <initADC>
  analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    3862:	2005      	movs	r0, #5
    3864:	f000 f83c 	bl	38e0 <analogReference>
#endif

#if !defined(DAC_NO_INIT_IF_UNUSED)
  initDAC();         // Initialize DAC
    3868:	f000 f816 	bl	3898 <initDAC>
#endif
}
    386c:	bd10      	pop	{r4, pc}
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	e000e010 	.word	0xe000e010
    3874:	0000bb7f 	.word	0x0000bb7f
    3878:	e000ed00 	.word	0xe000ed00
    387c:	40000400 	.word	0x40000400
    3880:	000017ff 	.word	0x000017ff

00003884 <mapResolution>:
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    3884:	4291      	cmp	r1, r2
    3886:	d002      	beq.n	388e <mapResolution+0xa>
    return value;
  }
  if (from > to) {
    3888:	d902      	bls.n	3890 <mapResolution+0xc>
    return value >> (from-to);
    388a:	1a8a      	subs	r2, r1, r2
    388c:	40d0      	lsrs	r0, r2
  }
  return value << (to-from);
}
    388e:	4770      	bx	lr
  return value << (to-from);
    3890:	1a52      	subs	r2, r2, r1
    3892:	4090      	lsls	r0, r2
    3894:	e7fb      	b.n	388e <mapResolution+0xa>
	...

00003898 <initDAC>:
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    3898:	490c      	ldr	r1, [pc, #48]	; (38cc <initDAC+0x34>)
    389a:	4b0d      	ldr	r3, [pc, #52]	; (38d0 <initDAC+0x38>)
    389c:	684a      	ldr	r2, [r1, #4]
    389e:	421a      	tst	r2, r3
    38a0:	d1fc      	bne.n	389c <initDAC+0x4>
    GCLK->PCHCTRL[GCM_DAC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    38a2:	2340      	movs	r3, #64	; 0x40
    38a4:	4a0b      	ldr	r2, [pc, #44]	; (38d4 <initDAC+0x3c>)
    38a6:	6053      	str	r3, [r2, #4]
  while ( (GCLK->PCHCTRL[GCM_DAC].reg & GCLK_PCHCTRL_CHEN) == 0 );      // wait for sync
    38a8:	6851      	ldr	r1, [r2, #4]
    38aa:	4219      	tst	r1, r3
    38ac:	d0fc      	beq.n	38a8 <initDAC+0x10>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    38ae:	223f      	movs	r2, #63	; 0x3f
    38b0:	4b09      	ldr	r3, [pc, #36]	; (38d8 <initDAC+0x40>)
    38b2:	6899      	ldr	r1, [r3, #8]
    38b4:	4211      	tst	r1, r2
    38b6:	d1fc      	bne.n	38b2 <initDAC+0x1a>
      DAC->CTRLB.reg = DAC_CTRLB_REFSEL_VDDANA;
    38b8:	2202      	movs	r2, #2
    38ba:	705a      	strb	r2, [r3, #1]
    DAC->DACCTRL[0].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    38bc:	22c2      	movs	r2, #194	; 0xc2
    38be:	0092      	lsls	r2, r2, #2
    38c0:	819a      	strh	r2, [r3, #12]
    DAC->DACCTRL[1].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    38c2:	81da      	strh	r2, [r3, #14]
  DACinitialized = 1;
    38c4:	2201      	movs	r2, #1
    38c6:	4b05      	ldr	r3, [pc, #20]	; (38dc <initDAC+0x44>)
    38c8:	701a      	strb	r2, [r3, #0]
}
    38ca:	4770      	bx	lr
    38cc:	40001800 	.word	0x40001800
    38d0:	000007fd 	.word	0x000007fd
    38d4:	400018fc 	.word	0x400018fc
    38d8:	42003000 	.word	0x42003000
    38dc:	20000929 	.word	0x20000929

000038e0 <analogReference>:
 * External Reference should be between 1V and VDDANA-0.6V=2.7V (1V and VDDANA-0.4V=2.9V for D51)
 *
 * Warning : The maximum IO voltage is Vcc (up to 3.6 volts for the SAMD/SAML, 5V for the SAMC)
 */
void analogReference(eAnalogReference mode)
{
    38e0:	b510      	push	{r4, lr}
  if (!ADCinitialized) {
    38e2:	4b2a      	ldr	r3, [pc, #168]	; (398c <analogReference+0xac>)
{
    38e4:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    38e6:	781b      	ldrb	r3, [r3, #0]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d104      	bne.n	38f6 <analogReference+0x16>
    REFinitialized = 1; // to prevent re-entry
    38ec:	2201      	movs	r2, #1
    38ee:	4b28      	ldr	r3, [pc, #160]	; (3990 <analogReference+0xb0>)
    38f0:	701a      	strb	r2, [r3, #0]
    initADC();
    38f2:	f000 f855 	bl	39a0 <initADC>
  }

#if (!SAMD11C)
  #if defined(REFA_PIN)
    if (mode == AR_EXTERNAL_REFA) {
    38f6:	2c03      	cmp	r4, #3
    38f8:	d106      	bne.n	3908 <analogReference+0x28>
#endif

#if (SAMD21 || SAMD11 || SAML21 || SAMD51)
  #if defined(REFB_PIN)
    if (mode == AR_EXTERNAL_REFB) {
      if ( pinPeripheral(REFB_PIN, PIO_ANALOG_REF) != RET_STATUS_OK ) {
    38fa:	2107      	movs	r1, #7
    38fc:	0020      	movs	r0, r4
    38fe:	f000 f951 	bl	3ba4 <pinPeripheral>
    3902:	2800      	cmp	r0, #0
    3904:	d009      	beq.n	391a <analogReference+0x3a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
#endif
  syncADC();

  REFinitialized = 1;
}
    3906:	bd10      	pop	{r4, pc}
    if (mode == AR_EXTERNAL_REFB) {
    3908:	2c04      	cmp	r4, #4
    390a:	d0f6      	beq.n	38fa <analogReference+0x1a>
  if (mode == 0) {		// Set to 1.0V for the SAML, 1.024V for the SAMC
    390c:	2c00      	cmp	r4, #0
    390e:	d12b      	bne.n	3968 <analogReference+0x88>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3910:	4a20      	ldr	r2, [pc, #128]	; (3994 <analogReference+0xb4>)
    3912:	4921      	ldr	r1, [pc, #132]	; (3998 <analogReference+0xb8>)
    3914:	69d3      	ldr	r3, [r2, #28]
    3916:	400b      	ands	r3, r1
    3918:	61d3      	str	r3, [r2, #28]
    ADC->REFCTRL.bit.REFSEL = mode;
    391a:	210f      	movs	r1, #15
    391c:	4b1f      	ldr	r3, [pc, #124]	; (399c <analogReference+0xbc>)
    391e:	400c      	ands	r4, r1
    3920:	789a      	ldrb	r2, [r3, #2]
    3922:	438a      	bics	r2, r1
    3924:	4314      	orrs	r4, r2
    3926:	709c      	strb	r4, [r3, #2]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3928:	8c1a      	ldrh	r2, [r3, #32]
    392a:	0552      	lsls	r2, r2, #21
    392c:	d1fc      	bne.n	3928 <analogReference+0x48>
  ADC->CTRLA.bit.ENABLE = 0x01;              // Enable ADC
    392e:	7819      	ldrb	r1, [r3, #0]
    3930:	3202      	adds	r2, #2
    3932:	430a      	orrs	r2, r1
    3934:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3936:	8c1a      	ldrh	r2, [r3, #32]
    3938:	0552      	lsls	r2, r2, #21
    393a:	d1fc      	bne.n	3936 <analogReference+0x56>
  ADC->SWTRIG.bit.START = 1;
    393c:	7e19      	ldrb	r1, [r3, #24]
    393e:	3202      	adds	r2, #2
    3940:	430a      	orrs	r2, r1
    3942:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3944:	8c1a      	ldrh	r2, [r3, #32]
    3946:	0552      	lsls	r2, r2, #21
    3948:	d1fc      	bne.n	3944 <analogReference+0x64>
  while (ADC->INTFLAG.bit.RESRDY == 0);      // Waiting for conversion to complete
    394a:	799a      	ldrb	r2, [r3, #6]
    394c:	07d2      	lsls	r2, r2, #31
    394e:	d5fc      	bpl.n	394a <analogReference+0x6a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    3950:	2102      	movs	r1, #2
  valueRead = ADC->RESULT.reg;               // Dummy read (will also clear the Data Ready flag)
    3952:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    3954:	781a      	ldrb	r2, [r3, #0]
    3956:	438a      	bics	r2, r1
    3958:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    395a:	8c1a      	ldrh	r2, [r3, #32]
    395c:	0552      	lsls	r2, r2, #21
    395e:	d1fc      	bne.n	395a <analogReference+0x7a>
  REFinitialized = 1;
    3960:	4b0b      	ldr	r3, [pc, #44]	; (3990 <analogReference+0xb0>)
    3962:	3201      	adds	r2, #1
    3964:	701a      	strb	r2, [r3, #0]
    3966:	e7ce      	b.n	3906 <analogReference+0x26>
  } else if (mode >= AR_INTREF_1V0) {		// Values starting at AR_INTREF_1V0 are used for the Supply Controller reference (AR_INTREF)
    3968:	2c05      	cmp	r4, #5
    396a:	d9d6      	bls.n	391a <analogReference+0x3a>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    396c:	4b09      	ldr	r3, [pc, #36]	; (3994 <analogReference+0xb4>)
    396e:	490a      	ldr	r1, [pc, #40]	; (3998 <analogReference+0xb8>)
    3970:	69da      	ldr	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3972:	3c06      	subs	r4, #6
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3974:	400a      	ands	r2, r1
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3976:	21f0      	movs	r1, #240	; 0xf0
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3978:	61da      	str	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    397a:	69da      	ldr	r2, [r3, #28]
    397c:	0424      	lsls	r4, r4, #16
    397e:	0309      	lsls	r1, r1, #12
    3980:	400c      	ands	r4, r1
    3982:	4314      	orrs	r4, r2
    3984:	61dc      	str	r4, [r3, #28]
    mode = 0;
    3986:	2400      	movs	r4, #0
    3988:	e7c7      	b.n	391a <analogReference+0x3a>
    398a:	46c0      	nop			; (mov r8, r8)
    398c:	20000928 	.word	0x20000928
    3990:	2000092a 	.word	0x2000092a
    3994:	40001400 	.word	0x40001400
    3998:	fff0ffff 	.word	0xfff0ffff
    399c:	43000c00 	.word	0x43000c00

000039a0 <initADC>:
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39a0:	4b1e      	ldr	r3, [pc, #120]	; (3a1c <initADC+0x7c>)
    39a2:	2107      	movs	r1, #7
    39a4:	681b      	ldr	r3, [r3, #0]
{
    39a6:	b510      	push	{r4, lr}
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39a8:	001a      	movs	r2, r3
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    39aa:	08db      	lsrs	r3, r3, #3
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39ac:	400a      	ands	r2, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    39ae:	0212      	lsls	r2, r2, #8
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    39b0:	400b      	ands	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    39b2:	4313      	orrs	r3, r2
    39b4:	4a1a      	ldr	r2, [pc, #104]	; (3a20 <initADC+0x80>)
    39b6:	8593      	strh	r3, [r2, #44]	; 0x2c
    39b8:	0013      	movs	r3, r2
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39ba:	8c1a      	ldrh	r2, [r3, #32]
    39bc:	0552      	lsls	r2, r2, #21
    39be:	d1fc      	bne.n	39ba <initADC+0x1a>
  SUPC->VREF.reg |= SUPC_VREF_VREFOE;           // Enable Supply Controller Reference output for use with ADC and DAC (AR_INTREF)
    39c0:	4918      	ldr	r1, [pc, #96]	; (3a24 <initADC+0x84>)
    39c2:	3204      	adds	r2, #4
    39c4:	69c8      	ldr	r0, [r1, #28]
    39c6:	4302      	orrs	r2, r0
    39c8:	61ca      	str	r2, [r1, #28]
    GCLK->PCHCTRL[GCM_ADC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    39ca:	2240      	movs	r2, #64	; 0x40
    39cc:	4916      	ldr	r1, [pc, #88]	; (3a28 <initADC+0x88>)
    39ce:	600a      	str	r2, [r1, #0]
    while ( (GCLK->PCHCTRL[GCM_ADC].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    39d0:	6808      	ldr	r0, [r1, #0]
    39d2:	4210      	tst	r0, r2
    39d4:	d0fc      	beq.n	39d0 <initADC+0x30>
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256;                    // Divide Clock by 256.
    39d6:	2207      	movs	r2, #7
    39d8:	705a      	strb	r2, [r3, #1]
    ADC->CTRLC.reg = ADC_CTRLC_RESSEL_10BIT;                        // 10 bits resolution as default
    39da:	3219      	adds	r2, #25
    39dc:	815a      	strh	r2, [r3, #10]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39de:	8c1a      	ldrh	r2, [r3, #32]
    39e0:	0552      	lsls	r2, r2, #21
    39e2:	d1fc      	bne.n	39de <initADC+0x3e>
  ADC->SAMPCTRL.reg = 0x3f;     // Set max Sampling Time Length
    39e4:	323f      	adds	r2, #63	; 0x3f
    39e6:	735a      	strb	r2, [r3, #13]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39e8:	8c1a      	ldrh	r2, [r3, #32]
    39ea:	0552      	lsls	r2, r2, #21
    39ec:	d1fc      	bne.n	39e8 <initADC+0x48>
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    39ee:	22c0      	movs	r2, #192	; 0xc0
    39f0:	0152      	lsls	r2, r2, #5
    39f2:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39f4:	8c1a      	ldrh	r2, [r3, #32]
    39f6:	0552      	lsls	r2, r2, #21
    39f8:	0d52      	lsrs	r2, r2, #21
    39fa:	d1fb      	bne.n	39f4 <initADC+0x54>
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    39fc:	731a      	strb	r2, [r3, #12]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39fe:	8c1a      	ldrh	r2, [r3, #32]
    3a00:	0552      	lsls	r2, r2, #21
    3a02:	d1fc      	bne.n	39fe <initADC+0x5e>
  ADCinitialized = 1;
    3a04:	4b09      	ldr	r3, [pc, #36]	; (3a2c <initADC+0x8c>)
    3a06:	3201      	adds	r2, #1
    3a08:	701a      	strb	r2, [r3, #0]
  if (!REFinitialized) {
    3a0a:	4b09      	ldr	r3, [pc, #36]	; (3a30 <initADC+0x90>)
    3a0c:	781b      	ldrb	r3, [r3, #0]
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d102      	bne.n	3a18 <initADC+0x78>
    analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    3a12:	2005      	movs	r0, #5
    3a14:	f7ff ff64 	bl	38e0 <analogReference>
}
    3a18:	bd10      	pop	{r4, pc}
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	00806020 	.word	0x00806020
    3a20:	43000c00 	.word	0x43000c00
    3a24:	40001400 	.word	0x40001400
    3a28:	400018f8 	.word	0x400018f8
    3a2c:	20000928 	.word	0x20000928
    3a30:	2000092a 	.word	0x2000092a

00003a34 <analogRead>:

uint32_t analogRead( uint32_t pin )
{
    3a34:	b510      	push	{r4, lr}
  uint32_t valueRead = 0;

  if (!ADCinitialized) {
    3a36:	4b1f      	ldr	r3, [pc, #124]	; (3ab4 <analogRead+0x80>)
{
    3a38:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    3a3a:	781b      	ldrb	r3, [r3, #0]
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d101      	bne.n	3a44 <analogRead+0x10>
    initADC();
    3a40:	f7ff ffae 	bl	39a0 <initADC>
    ADC = ADC0;
  }
#endif

  // pinPeripheral now handles disabling the DAC (if active)
  if ( pinPeripheral(pin, PIO_ANALOG_ADC) == RET_STATUS_OK )
    3a44:	2105      	movs	r1, #5
    3a46:	0020      	movs	r0, r4
    3a48:	f000 f8ac 	bl	3ba4 <pinPeripheral>
    3a4c:	0003      	movs	r3, r0
  uint32_t valueRead = 0;
    3a4e:	2000      	movs	r0, #0
  if ( pinPeripheral(pin, PIO_ANALOG_ADC) == RET_STATUS_OK )
    3a50:	4283      	cmp	r3, r0
    3a52:	d128      	bne.n	3aa6 <analogRead+0x72>
  {
    ADC->INPUTCTRL.bit.MUXPOS = GetADC(pin); // Selection for the positive ADC input
    3a54:	300c      	adds	r0, #12
    3a56:	4344      	muls	r4, r0
    3a58:	4817      	ldr	r0, [pc, #92]	; (3ab8 <analogRead+0x84>)
    3a5a:	4b18      	ldr	r3, [pc, #96]	; (3abc <analogRead+0x88>)
    3a5c:	1900      	adds	r0, r0, r4
    3a5e:	7a41      	ldrb	r1, [r0, #9]
    3a60:	201f      	movs	r0, #31
    3a62:	891a      	ldrh	r2, [r3, #8]
    3a64:	4001      	ands	r1, r0
    3a66:	4382      	bics	r2, r0
    3a68:	430a      	orrs	r2, r1
    3a6a:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a6c:	8c1a      	ldrh	r2, [r3, #32]
    3a6e:	0552      	lsls	r2, r2, #21
    3a70:	d1fc      	bne.n	3a6c <analogRead+0x38>

    syncADC();

    ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    3a72:	7819      	ldrb	r1, [r3, #0]
    3a74:	3202      	adds	r2, #2
    3a76:	430a      	orrs	r2, r1
    3a78:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a7a:	8c1a      	ldrh	r2, [r3, #32]
    3a7c:	0552      	lsls	r2, r2, #21
    3a7e:	d1fc      	bne.n	3a7a <analogRead+0x46>
    syncADC();

    // Start conversion
    ADC->SWTRIG.bit.START = 1;
    3a80:	7e19      	ldrb	r1, [r3, #24]
    3a82:	3202      	adds	r2, #2
    3a84:	430a      	orrs	r2, r1
    3a86:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a88:	8c1a      	ldrh	r2, [r3, #32]
    3a8a:	0552      	lsls	r2, r2, #21
    3a8c:	d1fc      	bne.n	3a88 <analogRead+0x54>
    syncADC();

    // Store the value
    while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    3a8e:	799a      	ldrb	r2, [r3, #6]
    3a90:	07d2      	lsls	r2, r2, #31
    3a92:	d5fc      	bpl.n	3a8e <analogRead+0x5a>
    valueRead = ADC->RESULT.reg;

    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a94:	2102      	movs	r1, #2
    valueRead = ADC->RESULT.reg;
    3a96:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a98:	781a      	ldrb	r2, [r3, #0]
    valueRead = ADC->RESULT.reg;
    3a9a:	b280      	uxth	r0, r0
    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a9c:	438a      	bics	r2, r1
    3a9e:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3aa0:	8c1a      	ldrh	r2, [r3, #32]
    3aa2:	0552      	lsls	r2, r2, #21
    3aa4:	d1fc      	bne.n	3aa0 <analogRead+0x6c>
    syncADC();
  }

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    3aa6:	4b06      	ldr	r3, [pc, #24]	; (3ac0 <analogRead+0x8c>)
    3aa8:	681a      	ldr	r2, [r3, #0]
    3aaa:	4b06      	ldr	r3, [pc, #24]	; (3ac4 <analogRead+0x90>)
    3aac:	6819      	ldr	r1, [r3, #0]
    3aae:	f7ff fee9 	bl	3884 <mapResolution>
}
    3ab2:	bd10      	pop	{r4, pc}
    3ab4:	20000928 	.word	0x20000928
    3ab8:	0000fc5c 	.word	0x0000fc5c
    3abc:	43000c00 	.word	0x43000c00
    3ac0:	20000040 	.word	0x20000040
    3ac4:	2000003c 	.word	0x2000003c

00003ac8 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    3ac8:	b510      	push	{r4, lr}
  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  pinPeripheral(ulPin, ulMode);
    3aca:	f000 f86b 	bl	3ba4 <pinPeripheral>
}
    3ace:	bd10      	pop	{r4, pc}

00003ad0 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    3ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t pinPort = GetPort(ulPin);
    3ad2:	220c      	movs	r2, #12
    3ad4:	4342      	muls	r2, r0
    3ad6:	4d25      	ldr	r5, [pc, #148]	; (3b6c <digitalWrite+0x9c>)
{
    3ad8:	9001      	str	r0, [sp, #4]
  uint8_t pinPort = GetPort(ulPin);
    3ada:	5d53      	ldrb	r3, [r2, r5]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3adc:	2b04      	cmp	r3, #4
    3ade:	d02f      	beq.n	3b40 <digitalWrite+0x70>
    3ae0:	2700      	movs	r7, #0
  uint8_t pinNum = GetPin(ulPin);
    3ae2:	18aa      	adds	r2, r5, r2

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
#endif

  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    3ae4:	7852      	ldrb	r2, [r2, #1]
    3ae6:	01db      	lsls	r3, r3, #7
    3ae8:	4e21      	ldr	r6, [pc, #132]	; (3b70 <digitalWrite+0xa0>)
    3aea:	18d4      	adds	r4, r2, r3
    3aec:	19a4      	adds	r4, r4, r6
    3aee:	7826      	ldrb	r6, [r4, #0]
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    3af0:	4c20      	ldr	r4, [pc, #128]	; (3b74 <digitalWrite+0xa4>)
  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    3af2:	b2f6      	uxtb	r6, r6
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    3af4:	591c      	ldr	r4, [r3, r4]
    3af6:	42bc      	cmp	r4, r7
    3af8:	d004      	beq.n	3b04 <digitalWrite+0x34>
    3afa:	3701      	adds	r7, #1
    3afc:	4097      	lsls	r7, r2
    3afe:	1e7c      	subs	r4, r7, #1
    3b00:	41a7      	sbcs	r7, r4
    3b02:	b2ff      	uxtb	r7, r7
  uint8_t pinOut = (PORT->Group[pinPort].OUT.reg && (1ul << pinNum));
    3b04:	4c1b      	ldr	r4, [pc, #108]	; (3b74 <digitalWrite+0xa4>)
    3b06:	191c      	adds	r4, r3, r4
    3b08:	6924      	ldr	r4, [r4, #16]
    3b0a:	46a4      	mov	ip, r4
    3b0c:	2400      	movs	r4, #0
    3b0e:	4660      	mov	r0, ip
    3b10:	42a0      	cmp	r0, r4
    3b12:	d004      	beq.n	3b1e <digitalWrite+0x4e>
    3b14:	3401      	adds	r4, #1
    3b16:	4094      	lsls	r4, r2
    3b18:	1e60      	subs	r0, r4, #1
    3b1a:	4184      	sbcs	r4, r0
    3b1c:	b2e4      	uxtb	r4, r4

  // Enable pull resistor if pin attributes allow and only if pin is not configured as output
  // Note that most pins should use PIN_ATTR_DIGITAL, which includes both PIN_ATTR_INPUT_PULLUP and PIN_ATTR_INPUT_PULLDOWN.
  if ( pinDir == 0 ) { // pin DIR is input
    3b1e:	2f00      	cmp	r7, #0
    3b20:	d117      	bne.n	3b52 <digitalWrite+0x82>
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    3b22:	9801      	ldr	r0, [sp, #4]
    3b24:	370c      	adds	r7, #12
    3b26:	4378      	muls	r0, r7
    3b28:	182d      	adds	r5, r5, r0
    3b2a:	6868      	ldr	r0, [r5, #4]
     if ( ulVal == HIGH )
    3b2c:	2901      	cmp	r1, #1
    3b2e:	d10d      	bne.n	3b4c <digitalWrite+0x7c>
     {
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    3b30:	2c01      	cmp	r4, #1
    3b32:	d106      	bne.n	3b42 <digitalWrite+0x72>
    3b34:	0741      	lsls	r1, r0, #29
    3b36:	d406      	bmi.n	3b46 <digitalWrite+0x76>
     else
     {
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
     }

     PORT->Group[pinPort].PINCFG[pinNum].reg = pinConfig ;
    3b38:	18d3      	adds	r3, r2, r3
    3b3a:	4a0d      	ldr	r2, [pc, #52]	; (3b70 <digitalWrite+0xa0>)
    3b3c:	189b      	adds	r3, r3, r2
    3b3e:	701e      	strb	r6, [r3, #0]
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    }
  }

  return ;
}
    3b40:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    3b42:	0701      	lsls	r1, r0, #28
    3b44:	d5f8      	bpl.n	3b38 <digitalWrite+0x68>
         pinConfig |= (uint8_t)(PORT_PINCFG_PULLEN) ;
    3b46:	2104      	movs	r1, #4
    3b48:	430e      	orrs	r6, r1
    3b4a:	e7f5      	b.n	3b38 <digitalWrite+0x68>
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
    3b4c:	2104      	movs	r1, #4
    3b4e:	438e      	bics	r6, r1
    3b50:	e7f2      	b.n	3b38 <digitalWrite+0x68>
    if ( ulVal == HIGH ) {
    3b52:	2901      	cmp	r1, #1
    3b54:	d104      	bne.n	3b60 <digitalWrite+0x90>
      PORT->Group[pinPort].OUTSET.reg = (1ul << pinNum) ;
    3b56:	4091      	lsls	r1, r2
    3b58:	4a06      	ldr	r2, [pc, #24]	; (3b74 <digitalWrite+0xa4>)
    3b5a:	189b      	adds	r3, r3, r2
    3b5c:	6199      	str	r1, [r3, #24]
    3b5e:	e7ef      	b.n	3b40 <digitalWrite+0x70>
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    3b60:	2101      	movs	r1, #1
    3b62:	4091      	lsls	r1, r2
    3b64:	4a03      	ldr	r2, [pc, #12]	; (3b74 <digitalWrite+0xa4>)
    3b66:	189b      	adds	r3, r3, r2
    3b68:	6159      	str	r1, [r3, #20]
    3b6a:	e7e9      	b.n	3b40 <digitalWrite+0x70>
    3b6c:	0000fc5c 	.word	0x0000fc5c
    3b70:	40002840 	.word	0x40002840
    3b74:	40002800 	.word	0x40002800

00003b78 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  uint8_t pinPort = GetPort(ulPin);
    3b78:	230c      	movs	r3, #12
    3b7a:	4358      	muls	r0, r3
    3b7c:	4907      	ldr	r1, [pc, #28]	; (3b9c <digitalRead+0x24>)
    3b7e:	2300      	movs	r3, #0
    3b80:	5c42      	ldrb	r2, [r0, r1]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3b82:	2a04      	cmp	r2, #4
    3b84:	d006      	beq.n	3b94 <digitalRead+0x1c>
  {
    return LOW ;
  }

  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    3b86:	4b06      	ldr	r3, [pc, #24]	; (3ba0 <digitalRead+0x28>)
    3b88:	01d2      	lsls	r2, r2, #7
    3b8a:	18d2      	adds	r2, r2, r3
  uint8_t pinNum = GetPin(ulPin);
    3b8c:	1809      	adds	r1, r1, r0
  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    3b8e:	6a13      	ldr	r3, [r2, #32]
    3b90:	784a      	ldrb	r2, [r1, #1]
    3b92:	40d3      	lsrs	r3, r2
    3b94:	2001      	movs	r0, #1
  {
    return HIGH ;
  }

  return LOW ;
}
    3b96:	4018      	ands	r0, r3
    3b98:	4770      	bx	lr
    3b9a:	46c0      	nop			; (mov r8, r8)
    3b9c:	0000fc5c 	.word	0x0000fc5c
    3ba0:	40002800 	.word	0x40002800

00003ba4 <pinPeripheral>:
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
#endif
}

int pinPeripheral( uint32_t ulPin, uint32_t ulPeripheral )
{
    3ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ba6:	0005      	movs	r5, r0
#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
  // Prevent out of bounds access
  if (ulPin >= NUM_PIN_DESCRIPTION_ENTRIES)
    3ba8:	2823      	cmp	r0, #35	; 0x23
    3baa:	d900      	bls.n	3bae <pinPeripheral+0xa>
    3bac:	e06b      	b.n	3c86 <pinPeripheral+0xe2>
  {
    return -1 ;
  }
#endif

  uint8_t pinPort = GetPort(ulPin);
    3bae:	230c      	movs	r3, #12
    3bb0:	4343      	muls	r3, r0
    3bb2:	4f7f      	ldr	r7, [pc, #508]	; (3db0 <pinPeripheral+0x20c>)
    3bb4:	5dda      	ldrb	r2, [r3, r7]
  uint8_t pinNum = GetPin(ulPin);
    3bb6:	18fb      	adds	r3, r7, r3
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    3bb8:	78d8      	ldrb	r0, [r3, #3]
  uint8_t pinNum = GetPin(ulPin);
    3bba:	785c      	ldrb	r4, [r3, #1]
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    3bbc:	9001      	str	r0, [sp, #4]

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint8_t pinType = g_APinDescription[ulPin].ulPinType;
    3bbe:	7898      	ldrb	r0, [r3, #2]
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    3bc0:	685b      	ldr	r3, [r3, #4]
#endif

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3bc2:	2a04      	cmp	r2, #4
    3bc4:	d05f      	beq.n	3c86 <pinPeripheral+0xe2>
  }

#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  // If pinType is not PIO_MULTI or PIO_STARTUP in the pinDescription table, then it must match ulPeripheral
  if ( pinType != PIO_MULTI && pinType != PIO_STARTUP && pinType != ulPeripheral )
    3bc6:	2619      	movs	r6, #25
    3bc8:	4276      	negs	r6, r6
    3bca:	46b4      	mov	ip, r6
    3bcc:	4484      	add	ip, r0
    3bce:	4666      	mov	r6, ip
    3bd0:	2e01      	cmp	r6, #1
    3bd2:	d901      	bls.n	3bd8 <pinPeripheral+0x34>
    3bd4:	4288      	cmp	r0, r1
    3bd6:	d156      	bne.n	3c86 <pinPeripheral+0xe2>
  {
    return -1 ;
  }

  // Make sure ulPeripheral is listed in pinAttribute
  if ( !(pinAttribute & (1UL << ulPeripheral)) && pinType != PIO_STARTUP )
    3bd8:	40cb      	lsrs	r3, r1
    3bda:	07db      	lsls	r3, r3, #31
    3bdc:	d401      	bmi.n	3be2 <pinPeripheral+0x3e>
    3bde:	281a      	cmp	r0, #26
    3be0:	d151      	bne.n	3c86 <pinPeripheral+0xe2>
#endif
#endif

  // Determine hardware peripheral to use
  EPioPeripheral peripheral = PER_PORT;
  switch ( ulPeripheral )
    3be2:	1f08      	subs	r0, r1, #4
    3be4:	2817      	cmp	r0, #23
    3be6:	d863      	bhi.n	3cb0 <pinPeripheral+0x10c>
    3be8:	f004 fca6 	bl	8538 <__gnu_thumb1_case_uqi>
    3bec:	64644736 	.word	0x64644736
    3bf0:	62626262 	.word	0x62626262
    3bf4:	0c5d5050 	.word	0x0c5d5050
    3bf8:	6262620c 	.word	0x6262620c
    3bfc:	90626262 	.word	0x90626262
    3c00:	4d624d92 	.word	0x4d624d92
    case PIO_CAN:
#endif
#if (SAMD51)
    case PIO_QSPI:
#endif
      peripheral = PER_COM;
    3c04:	2306      	movs	r3, #6
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
      //DAC->CTRLB.bit.EOEN = 0x00; // The DAC output is turned off.
      syncDAC();
    }
#elif (SAML21 || SAMD51)
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3c06:	2a00      	cmp	r2, #0
    3c08:	d100      	bne.n	3c0c <pinPeripheral+0x68>
    3c0a:	e08f      	b.n	3d2c <pinPeripheral+0x188>
      }
    }
#endif
  }

  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3c0c:	4d69      	ldr	r5, [pc, #420]	; (3db4 <pinPeripheral+0x210>)
    3c0e:	01d0      	lsls	r0, r2, #7
    3c10:	1820      	adds	r0, r4, r0
    3c12:	1940      	adds	r0, r0, r5
    3c14:	7805      	ldrb	r5, [r0, #0]
    3c16:	2004      	movs	r0, #4
    3c18:	4028      	ands	r0, r5

  // INEN should be enabled for both input and output (but not analog)
  if ( ulPeripheral != PIO_ANALOG_ADC && ulPeripheral != PIO_ANALOG_DAC && ulPeripheral != PIO_ANALOG_REF )
    3c1a:	1f4d      	subs	r5, r1, #5
    3c1c:	2d02      	cmp	r5, #2
    3c1e:	d901      	bls.n	3c24 <pinPeripheral+0x80>
  {
    pinCfg |= PORT_PINCFG_INEN;
    3c20:	2502      	movs	r5, #2
    3c22:	4328      	orrs	r0, r5
  }

  // Set pin drive strength (DRVSTR), which is used with PIO_OUTPUT and PIO_SERCOM (UART, SPI, and I2C)
  if ( (peripheralAttribute & PER_ATTR_DRIVE_MASK) == PER_ATTR_DRIVE_STRONG )
    3c24:	9d01      	ldr	r5, [sp, #4]
    3c26:	072d      	lsls	r5, r5, #28
    3c28:	d501      	bpl.n	3c2e <pinPeripheral+0x8a>
  {
    pinCfg |= PORT_PINCFG_DRVSTR;
    3c2a:	2540      	movs	r5, #64	; 0x40
    3c2c:	4328      	orrs	r0, r5
  __ASM volatile ("cpsid i" : : : "memory");
    3c2e:	b672      	cpsid	i
    3c30:	01d2      	lsls	r2, r2, #7
  }

  noInterrupts(); // Avoid possible invalid interim pin state

  if ( ulPeripheral == PIO_INPUT || ulPeripheral == PIO_STARTUP )
    3c32:	2900      	cmp	r1, #0
    3c34:	d001      	beq.n	3c3a <pinPeripheral+0x96>
    3c36:	291a      	cmp	r1, #26
    3c38:	d13e      	bne.n	3cb8 <pinPeripheral+0x114>
  {
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    3c3a:	2301      	movs	r3, #1
    3c3c:	40a3      	lsls	r3, r4
    3c3e:	495e      	ldr	r1, [pc, #376]	; (3db8 <pinPeripheral+0x214>)
    3c40:	1851      	adds	r1, r2, r1
    3c42:	604b      	str	r3, [r1, #4]
    PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;	// set default pull direction to pullup (will not be enabled)
    3c44:	618b      	str	r3, [r1, #24]
    pinCfg |= PORT_PINCFG_PULLEN;
  }
  else if ( ulPeripheral == PIO_OUTPUT )
  {
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    pinCfg &= ~PORT_PINCFG_PULLEN;      // Disable pull resistor
    3c46:	2304      	movs	r3, #4
    3c48:	4398      	bics	r0, r3

    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
  }

  // Set pin drive strength, enable/disable pull resistor, enable/disable INEN, and enable/disable the peripheral mux
  PORT->Group[pinPort].PINCFG[pinNum].reg = (uint8_t)pinCfg ;
    3c4a:	4b5a      	ldr	r3, [pc, #360]	; (3db4 <pinPeripheral+0x210>)
    3c4c:	18a2      	adds	r2, r4, r2
    3c4e:	18d2      	adds	r2, r2, r3
    3c50:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    3c52:	b662      	cpsie	i

  interrupts();
  return 0l ;
    3c54:	2000      	movs	r0, #0
}
    3c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ( GetExtInt(ulPin) == NOT_AN_INTERRUPT )
    3c58:	230c      	movs	r3, #12
    3c5a:	435d      	muls	r5, r3
    3c5c:	197f      	adds	r7, r7, r5
    3c5e:	7abb      	ldrb	r3, [r7, #10]
    3c60:	2b12      	cmp	r3, #18
    3c62:	d010      	beq.n	3c86 <pinPeripheral+0xe2>
      peripheral = PER_EXTINT;
    3c64:	2300      	movs	r3, #0
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3c66:	2a00      	cmp	r2, #0
    3c68:	d060      	beq.n	3d2c <pinPeripheral+0x188>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3c6a:	4d52      	ldr	r5, [pc, #328]	; (3db4 <pinPeripheral+0x210>)
    3c6c:	01d0      	lsls	r0, r2, #7
    3c6e:	1820      	adds	r0, r4, r0
    3c70:	1940      	adds	r0, r0, r5
    3c72:	7805      	ldrb	r5, [r0, #0]
    3c74:	2004      	movs	r0, #4
    3c76:	4028      	ands	r0, r5
    3c78:	e7d2      	b.n	3c20 <pinPeripheral+0x7c>
      if ( GetADC(ulPin) == No_ADC_Channel )
    3c7a:	230c      	movs	r3, #12
    3c7c:	435d      	muls	r5, r3
    3c7e:	197f      	adds	r7, r7, r5
    3c80:	7a7b      	ldrb	r3, [r7, #9]
    3c82:	2b16      	cmp	r3, #22
    3c84:	d14f      	bne.n	3d26 <pinPeripheral+0x182>
    return -1 ;
    3c86:	2001      	movs	r0, #1
    3c88:	4240      	negs	r0, r0
    3c8a:	e7e4      	b.n	3c56 <pinPeripheral+0xb2>
      if ( g_APinDescription[ulPin].ulTCChannel == NOT_ON_TIMER )
    3c8c:	230c      	movs	r3, #12
    3c8e:	435d      	muls	r5, r3
    3c90:	197f      	adds	r7, r7, r5
    3c92:	7a3b      	ldrb	r3, [r7, #8]
    3c94:	2b80      	cmp	r3, #128	; 0x80
    3c96:	d0f6      	beq.n	3c86 <pinPeripheral+0xe2>
      if ( (peripheralAttribute & PER_ATTR_TIMER_MASK) == PER_ATTR_TIMER_STD )
    3c98:	2306      	movs	r3, #6
    3c9a:	9801      	ldr	r0, [sp, #4]
    3c9c:	4003      	ands	r3, r0
        peripheral = PER_TIMER_ALT;
    3c9e:	1e58      	subs	r0, r3, #1
    3ca0:	4183      	sbcs	r3, r0
    3ca2:	3304      	adds	r3, #4
    3ca4:	e7af      	b.n	3c06 <pinPeripheral+0x62>
        peripheral = PER_SERCOM_ALT;
    3ca6:	2301      	movs	r3, #1
    3ca8:	9801      	ldr	r0, [sp, #4]
    3caa:	4003      	ands	r3, r0
    3cac:	3302      	adds	r3, #2
    3cae:	e7da      	b.n	3c66 <pinPeripheral+0xc2>
  EPioPeripheral peripheral = PER_PORT;
    3cb0:	2309      	movs	r3, #9
    3cb2:	e7a8      	b.n	3c06 <pinPeripheral+0x62>
      peripheral = PER_ANALOG;
    3cb4:	2301      	movs	r3, #1
    3cb6:	e7a6      	b.n	3c06 <pinPeripheral+0x62>
  else if ( ulPeripheral == PIO_INPUT_PULLUP || ulPeripheral == PIO_INPUT_PULLDOWN )
    3cb8:	1e8d      	subs	r5, r1, #2
    3cba:	2d01      	cmp	r5, #1
    3cbc:	d80c      	bhi.n	3cd8 <pinPeripheral+0x134>
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    3cbe:	2301      	movs	r3, #1
    3cc0:	40a3      	lsls	r3, r4
    3cc2:	4d3d      	ldr	r5, [pc, #244]	; (3db8 <pinPeripheral+0x214>)
    3cc4:	1955      	adds	r5, r2, r5
    3cc6:	606b      	str	r3, [r5, #4]
    if ( ulPeripheral == PIO_INPUT_PULLDOWN ) {
    3cc8:	2903      	cmp	r1, #3
    3cca:	d103      	bne.n	3cd4 <pinPeripheral+0x130>
      PORT->Group[pinPort].OUTCLR.reg = (uint32_t)(1<<pinNum) ;
    3ccc:	616b      	str	r3, [r5, #20]
    pinCfg |= PORT_PINCFG_PULLEN;
    3cce:	2304      	movs	r3, #4
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    3cd0:	4318      	orrs	r0, r3
    3cd2:	e7ba      	b.n	3c4a <pinPeripheral+0xa6>
      PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;
    3cd4:	61ab      	str	r3, [r5, #24]
    3cd6:	e7fa      	b.n	3cce <pinPeripheral+0x12a>
  else if ( ulPeripheral == PIO_OUTPUT )
    3cd8:	2901      	cmp	r1, #1
    3cda:	d104      	bne.n	3ce6 <pinPeripheral+0x142>
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    3cdc:	40a1      	lsls	r1, r4
    3cde:	4b36      	ldr	r3, [pc, #216]	; (3db8 <pinPeripheral+0x214>)
    3ce0:	18d3      	adds	r3, r2, r3
    3ce2:	6099      	str	r1, [r3, #8]
    3ce4:	e7af      	b.n	3c46 <pinPeripheral+0xa2>
    3ce6:	0861      	lsrs	r1, r4, #1
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3ce8:	4d34      	ldr	r5, [pc, #208]	; (3dbc <pinPeripheral+0x218>)
    3cea:	1851      	adds	r1, r2, r1
    3cec:	1949      	adds	r1, r1, r5
    if ( pinNum & 1 ) // is pin odd?
    3cee:	07e5      	lsls	r5, r4, #31
    3cf0:	d508      	bpl.n	3d04 <pinPeripheral+0x160>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    3cf2:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3cf4:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    3cf6:	011b      	lsls	r3, r3, #4
    3cf8:	4035      	ands	r5, r6
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3cfa:	432b      	orrs	r3, r5
    3cfc:	b2db      	uxtb	r3, r3
    3cfe:	700b      	strb	r3, [r1, #0]
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    3d00:	2301      	movs	r3, #1
    3d02:	e7e5      	b.n	3cd0 <pinPeripheral+0x12c>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3d04:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    3d06:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3d08:	43b5      	bics	r5, r6
    3d0a:	e7f6      	b.n	3cfa <pinPeripheral+0x156>
      peripheral = PER_AC_CLK;
    3d0c:	2307      	movs	r3, #7
    3d0e:	e7aa      	b.n	3c66 <pinPeripheral+0xc2>
      peripheral = PER_CCL;
    3d10:	2308      	movs	r3, #8
    3d12:	e7a8      	b.n	3c66 <pinPeripheral+0xc2>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3d14:	4827      	ldr	r0, [pc, #156]	; (3db4 <pinPeripheral+0x210>)
    3d16:	01d3      	lsls	r3, r2, #7
    3d18:	18e3      	adds	r3, r4, r3
    3d1a:	181b      	adds	r3, r3, r0
    3d1c:	7818      	ldrb	r0, [r3, #0]
    3d1e:	2304      	movs	r3, #4
    3d20:	4018      	ands	r0, r3
      peripheral = PER_ANALOG;
    3d22:	3b03      	subs	r3, #3
    3d24:	e77e      	b.n	3c24 <pinPeripheral+0x80>
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3d26:	2a00      	cmp	r2, #0
    3d28:	d1f4      	bne.n	3d14 <pinPeripheral+0x170>
      peripheral = PER_ANALOG;
    3d2a:	2301      	movs	r3, #1
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3d2c:	2c02      	cmp	r4, #2
    3d2e:	d002      	beq.n	3d36 <pinPeripheral+0x192>
    3d30:	2c05      	cmp	r4, #5
    3d32:	d000      	beq.n	3d36 <pinPeripheral+0x192>
    3d34:	e76a      	b.n	3c0c <pinPeripheral+0x68>
    3d36:	2906      	cmp	r1, #6
    3d38:	d100      	bne.n	3d3c <pinPeripheral+0x198>
    3d3a:	e767      	b.n	3c0c <pinPeripheral+0x68>
    if ( (pinPort == 0) && (pinNum == 5) ) {
    3d3c:	1f65      	subs	r5, r4, #5
    3d3e:	4268      	negs	r0, r5
    3d40:	4145      	adcs	r5, r0
    if (dacEnabled[DACNumber]) {
    3d42:	481f      	ldr	r0, [pc, #124]	; (3dc0 <pinPeripheral+0x21c>)
    3d44:	5d47      	ldrb	r7, [r0, r5]
    3d46:	2f00      	cmp	r7, #0
    3d48:	d100      	bne.n	3d4c <pinPeripheral+0x1a8>
    3d4a:	e75f      	b.n	3c0c <pinPeripheral+0x68>
      dacEnabled[DACNumber] = false;
    3d4c:	2700      	movs	r7, #0
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    3d4e:	2602      	movs	r6, #2
      dacEnabled[DACNumber] = false;
    3d50:	5547      	strb	r7, [r0, r5]
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    3d52:	481c      	ldr	r0, [pc, #112]	; (3dc4 <pinPeripheral+0x220>)
    3d54:	7807      	ldrb	r7, [r0, #0]
    3d56:	43b7      	bics	r7, r6
    3d58:	7007      	strb	r7, [r0, #0]
  // VARIANT_MCK / 1000000 == cycles needed to delay 1uS
  //                     3 == cycles used in a loop
  // Divide by 3 before multiplication with usec, so that the maximum usable usec value
  // with the D51 @ 120MHz is at least what it was when multipling by usec first at 48MHz.
  uint32_t n = usec * ((VARIANT_MCK / 1000000) / 3);
  __asm__ __volatile__(
    3d5a:	27a0      	movs	r7, #160	; 0xa0
    3d5c:	00bf      	lsls	r7, r7, #2
    3d5e:	3f01      	subs	r7, #1
    3d60:	d1fd      	bne.n	3d5e <pinPeripheral+0x1ba>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3d62:	273f      	movs	r7, #63	; 0x3f
    3d64:	6886      	ldr	r6, [r0, #8]
    3d66:	423e      	tst	r6, r7
    3d68:	d1fc      	bne.n	3d64 <pinPeripheral+0x1c0>
      DAC->DACCTRL[DACNumber].bit.ENABLE = 0x00; // The DACx output is turned off.
    3d6a:	4e16      	ldr	r6, [pc, #88]	; (3dc4 <pinPeripheral+0x220>)
    3d6c:	1d2f      	adds	r7, r5, #4
    3d6e:	46b4      	mov	ip, r6
    3d70:	007f      	lsls	r7, r7, #1
    3d72:	44bc      	add	ip, r7
    3d74:	4666      	mov	r6, ip
    3d76:	88b7      	ldrh	r7, [r6, #4]
    3d78:	2602      	movs	r6, #2
    3d7a:	43b7      	bics	r7, r6
    3d7c:	4666      	mov	r6, ip
    3d7e:	80b7      	strh	r7, [r6, #4]
      if (dacEnabled[0] || dacEnabled[1]) {
    3d80:	4f0f      	ldr	r7, [pc, #60]	; (3dc0 <pinPeripheral+0x21c>)
    3d82:	783e      	ldrb	r6, [r7, #0]
    3d84:	2e00      	cmp	r6, #0
    3d86:	d103      	bne.n	3d90 <pinPeripheral+0x1ec>
    3d88:	787f      	ldrb	r7, [r7, #1]
    3d8a:	2f00      	cmp	r7, #0
    3d8c:	d100      	bne.n	3d90 <pinPeripheral+0x1ec>
    3d8e:	e73d      	b.n	3c0c <pinPeripheral+0x68>
        DAC->CTRLA.bit.ENABLE = 0x01;     // Enable DAC controller, so that the other DAC can function
    3d90:	2702      	movs	r7, #2
    3d92:	7806      	ldrb	r6, [r0, #0]
    3d94:	4337      	orrs	r7, r6
    3d96:	7007      	strb	r7, [r0, #0]
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3d98:	273f      	movs	r7, #63	; 0x3f
    3d9a:	6886      	ldr	r6, [r0, #8]
    3d9c:	423e      	tst	r6, r7
    3d9e:	d1fc      	bne.n	3d9a <pinPeripheral+0x1f6>
        while ( (DAC->STATUS.reg & (1 << (1 - DACNumber))) == 0 );   // Must wait for DACx to start
    3da0:	2701      	movs	r7, #1
    3da2:	1b7d      	subs	r5, r7, r5
    3da4:	40af      	lsls	r7, r5
    3da6:	79c5      	ldrb	r5, [r0, #7]
    3da8:	422f      	tst	r7, r5
    3daa:	d0fc      	beq.n	3da6 <pinPeripheral+0x202>
    3dac:	e72e      	b.n	3c0c <pinPeripheral+0x68>
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	0000fc5c 	.word	0x0000fc5c
    3db4:	40002840 	.word	0x40002840
    3db8:	40002800 	.word	0x40002800
    3dbc:	40002830 	.word	0x40002830
    3dc0:	2000092b 	.word	0x2000092b
    3dc4:	42003000 	.word	0x42003000

00003dc8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
    3dc8:	4770      	bx	lr

00003dca <_ZN11DHT_Unified8HumidityD1Ev>:
    DHT_Unified* _parent;
    int32_t _id;

  };

  class Humidity : public Adafruit_Sensor {
    3dca:	4770      	bx	lr

00003dcc <_ZN11DHT_Unified11TemperatureD1Ev>:
  class Temperature : public Adafruit_Sensor {
    3dcc:	4770      	bx	lr

00003dce <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
DHT_Unified::Temperature::Temperature(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    3dce:	b570      	push	{r4, r5, r6, lr}
    3dd0:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3dd2:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    3dd4:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    3dd6:	0032      	movs	r2, r6
    3dd8:	2100      	movs	r1, #0
    3dda:	0020      	movs	r0, r4
    3ddc:	f007 fd20 	bl	b820 <memset>
  // Populate sensor reading values.
  event->version     = sizeof(sensors_event_t);
  event->sensor_id   = _id;
    3de0:	68eb      	ldr	r3, [r5, #12]
  event->version     = sizeof(sensors_event_t);
    3de2:	6026      	str	r6, [r4, #0]
  event->sensor_id   = _id;
    3de4:	6063      	str	r3, [r4, #4]
  event->type        = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3de6:	230d      	movs	r3, #13
    3de8:	60a3      	str	r3, [r4, #8]
  event->timestamp   = millis();
    3dea:	f7fe fc3b 	bl	2664 <millis>
  event->temperature = _parent->_dht.readTemperature();
    3dee:	2200      	movs	r2, #0
  event->timestamp   = millis();
    3df0:	6120      	str	r0, [r4, #16]
  event->temperature = _parent->_dht.readTemperature();
    3df2:	0011      	movs	r1, r2
    3df4:	68a8      	ldr	r0, [r5, #8]
    3df6:	f001 fb77 	bl	54e8 <_ZN3DHT15readTemperatureEbb>
    3dfa:	6160      	str	r0, [r4, #20]
  
  return true;
}
    3dfc:	2001      	movs	r0, #1
    3dfe:	bd70      	pop	{r4, r5, r6, pc}

00003e00 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
DHT_Unified::Humidity::Humidity(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    3e00:	b570      	push	{r4, r5, r6, lr}
    3e02:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3e04:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    3e06:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    3e08:	0032      	movs	r2, r6
    3e0a:	2100      	movs	r1, #0
    3e0c:	0020      	movs	r0, r4
    3e0e:	f007 fd07 	bl	b820 <memset>
  // Populate sensor reading values.
  event->version           = sizeof(sensors_event_t);
  event->sensor_id         = _id;
    3e12:	68eb      	ldr	r3, [r5, #12]
  event->version           = sizeof(sensors_event_t);
    3e14:	6026      	str	r6, [r4, #0]
  event->sensor_id         = _id;
    3e16:	6063      	str	r3, [r4, #4]
  event->type              = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3e18:	230c      	movs	r3, #12
    3e1a:	60a3      	str	r3, [r4, #8]
  event->timestamp         = millis();
    3e1c:	f7fe fc22 	bl	2664 <millis>
  event->relative_humidity = _parent->_dht.readHumidity();
    3e20:	2100      	movs	r1, #0
  event->timestamp         = millis();
    3e22:	6120      	str	r0, [r4, #16]
  event->relative_humidity = _parent->_dht.readHumidity();
    3e24:	68a8      	ldr	r0, [r5, #8]
    3e26:	f001 fbaf 	bl	5588 <_ZN3DHT12readHumidityEb>
    3e2a:	6160      	str	r0, [r4, #20]
  
  return true;
}
    3e2c:	2001      	movs	r0, #1
    3e2e:	bd70      	pop	{r4, r5, r6, pc}

00003e30 <_ZN11DHT_Unified8HumidityD0Ev>:
  class Humidity : public Adafruit_Sensor {
    3e30:	b510      	push	{r4, lr}
    3e32:	0004      	movs	r4, r0
    3e34:	f000 fe46 	bl	4ac4 <_ZdlPv>
    3e38:	0020      	movs	r0, r4
    3e3a:	bd10      	pop	{r4, pc}

00003e3c <_ZN11DHT_Unified11TemperatureD0Ev>:
  class Temperature : public Adafruit_Sensor {
    3e3c:	b510      	push	{r4, lr}
    3e3e:	0004      	movs	r4, r0
    3e40:	f000 fe40 	bl	4ac4 <_ZdlPv>
    3e44:	0020      	movs	r0, r4
    3e46:	bd10      	pop	{r4, pc}

00003e48 <_ZN11DHT_UnifiedC1Ehhhll>:
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count, int32_t tempSensorId, int32_t humiditySensorId):
    3e48:	b570      	push	{r4, r5, r6, lr}
    3e4a:	0004      	movs	r4, r0
    3e4c:	0015      	movs	r5, r2
  _humidity(this, humiditySensorId)
    3e4e:	f001 fa93 	bl	5378 <_ZN3DHTC1Ehhh>
  _id(id)
    3e52:	4b07      	ldr	r3, [pc, #28]	; (3e70 <_ZN11DHT_UnifiedC1Ehhhll+0x28>)
  _humidity(this, humiditySensorId)
    3e54:	7525      	strb	r5, [r4, #20]
  _id(id)
    3e56:	3308      	adds	r3, #8
    3e58:	61a3      	str	r3, [r4, #24]
    3e5a:	9b04      	ldr	r3, [sp, #16]
{}
    3e5c:	0020      	movs	r0, r4
  _id(id)
    3e5e:	6263      	str	r3, [r4, #36]	; 0x24
  _id(id)
    3e60:	4b04      	ldr	r3, [pc, #16]	; (3e74 <_ZN11DHT_UnifiedC1Ehhhll+0x2c>)
  _id(id)
    3e62:	6224      	str	r4, [r4, #32]
  _id(id)
    3e64:	3308      	adds	r3, #8
    3e66:	62a3      	str	r3, [r4, #40]	; 0x28
    3e68:	9b05      	ldr	r3, [sp, #20]
    3e6a:	6324      	str	r4, [r4, #48]	; 0x30
    3e6c:	6363      	str	r3, [r4, #52]	; 0x34
{}
    3e6e:	bd70      	pop	{r4, r5, r6, pc}
    3e70:	0000fa5c 	.word	0x0000fa5c
    3e74:	0000fa78 	.word	0x0000fa78

00003e78 <_ZN11DHT_Unified5beginEv>:
void DHT_Unified::begin() {
    3e78:	b510      	push	{r4, lr}
  _dht.begin();
    3e7a:	f001 fa91 	bl	53a0 <_ZN3DHT5beginEv>
}
    3e7e:	bd10      	pop	{r4, pc}

00003e80 <_ZN11DHT_Unified7setNameEP8sensor_t>:
void DHT_Unified::setName(sensor_t* sensor) {
    3e80:	b510      	push	{r4, lr}
  switch(_type) {
    3e82:	7d02      	ldrb	r2, [r0, #20]
void DHT_Unified::setName(sensor_t* sensor) {
    3e84:	000c      	movs	r4, r1
  switch(_type) {
    3e86:	2a15      	cmp	r2, #21
    3e88:	d007      	beq.n	3e9a <_ZN11DHT_Unified7setNameEP8sensor_t+0x1a>
    3e8a:	2a16      	cmp	r2, #22
    3e8c:	d00d      	beq.n	3eaa <_ZN11DHT_Unified7setNameEP8sensor_t+0x2a>
      strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    3e8e:	4908      	ldr	r1, [pc, #32]	; (3eb0 <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>)
  switch(_type) {
    3e90:	2a0b      	cmp	r2, #11
    3e92:	d004      	beq.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    3e94:	220b      	movs	r2, #11
    3e96:	4907      	ldr	r1, [pc, #28]	; (3eb4 <_ZN11DHT_Unified7setNameEP8sensor_t+0x34>)
    3e98:	e001      	b.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    3e9a:	220b      	movs	r2, #11
    3e9c:	4906      	ldr	r1, [pc, #24]	; (3eb8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x38>)
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    3e9e:	0020      	movs	r0, r4
    3ea0:	f008 fdf8 	bl	ca94 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
    3ea4:	2300      	movs	r3, #0
    3ea6:	72e3      	strb	r3, [r4, #11]
}
    3ea8:	bd10      	pop	{r4, pc}
      strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    3eaa:	220b      	movs	r2, #11
    3eac:	4903      	ldr	r1, [pc, #12]	; (3ebc <_ZN11DHT_Unified7setNameEP8sensor_t+0x3c>)
    3eae:	e7f6      	b.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
    3eb0:	0000fa44 	.word	0x0000fa44
    3eb4:	0000fa56 	.word	0x0000fa56
    3eb8:	0000fa4a 	.word	0x0000fa4a
    3ebc:	0000fa50 	.word	0x0000fa50

00003ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
  switch(_type) {
    3ec0:	7d03      	ldrb	r3, [r0, #20]
    3ec2:	2b15      	cmp	r3, #21
    3ec4:	d006      	beq.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    3ec6:	2b16      	cmp	r3, #22
    3ec8:	d004      	beq.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    3eca:	2b0b      	cmp	r3, #11
    3ecc:	d102      	bne.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
      sensor->min_delay = 1000000L;  // 1 second (in microseconds)
    3ece:	4b02      	ldr	r3, [pc, #8]	; (3ed8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x18>)
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    3ed0:	624b      	str	r3, [r1, #36]	; 0x24
}
    3ed2:	4770      	bx	lr
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    3ed4:	4b01      	ldr	r3, [pc, #4]	; (3edc <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>)
    3ed6:	e7fb      	b.n	3ed0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x10>
    3ed8:	000f4240 	.word	0x000f4240
    3edc:	001e8480 	.word	0x001e8480

00003ee0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:
void DHT_Unified::Temperature::getSensor(sensor_t* sensor) {
    3ee0:	b570      	push	{r4, r5, r6, lr}
    3ee2:	000c      	movs	r4, r1
    3ee4:	0005      	movs	r5, r0
  memset(sensor, 0, sizeof(sensor_t));
    3ee6:	2228      	movs	r2, #40	; 0x28
    3ee8:	2100      	movs	r1, #0
    3eea:	0020      	movs	r0, r4
    3eec:	f007 fc98 	bl	b820 <memset>
  _parent->setName(sensor);
    3ef0:	0021      	movs	r1, r4
    3ef2:	68a8      	ldr	r0, [r5, #8]
    3ef4:	f7ff ffc4 	bl	3e80 <_ZN11DHT_Unified7setNameEP8sensor_t>
  sensor->version         = DHT_SENSOR_VERSION;
    3ef8:	2301      	movs	r3, #1
    3efa:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    3efc:	68eb      	ldr	r3, [r5, #12]
  _parent->setMinDelay(sensor);
    3efe:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    3f00:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3f02:	230d      	movs	r3, #13
  _parent->setMinDelay(sensor);
    3f04:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3f06:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    3f08:	f7ff ffda 	bl	3ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    3f0c:	68ab      	ldr	r3, [r5, #8]
    3f0e:	7d1a      	ldrb	r2, [r3, #20]
    3f10:	2a15      	cmp	r2, #21
    3f12:	d00b      	beq.n	3f2c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4c>
    3f14:	2a16      	cmp	r2, #22
    3f16:	d00f      	beq.n	3f38 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x58>
    3f18:	2300      	movs	r3, #0
    3f1a:	2a0b      	cmp	r2, #11
    3f1c:	d10e      	bne.n	3f3c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x5c>
      sensor->min_value   = 0.0F;
    3f1e:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 2.0F;
    3f20:	2380      	movs	r3, #128	; 0x80
      sensor->max_value   = 50.0F;
    3f22:	4a08      	ldr	r2, [pc, #32]	; (3f44 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x64>)
      sensor->resolution  = 2.0F;
    3f24:	05db      	lsls	r3, r3, #23
      sensor->max_value   = 50.0F;
    3f26:	61a2      	str	r2, [r4, #24]
      sensor->resolution  = 0.0F;
    3f28:	6223      	str	r3, [r4, #32]
}
    3f2a:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 80.0F;
    3f2c:	4b06      	ldr	r3, [pc, #24]	; (3f48 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x68>)
      sensor->max_value   = 125.0F;
    3f2e:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = -40.0F;
    3f30:	4b06      	ldr	r3, [pc, #24]	; (3f4c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6c>)
    3f32:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    3f34:	4b06      	ldr	r3, [pc, #24]	; (3f50 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>)
    3f36:	e7f7      	b.n	3f28 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
      sensor->max_value   = 125.0F;
    3f38:	4b06      	ldr	r3, [pc, #24]	; (3f54 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x74>)
    3f3a:	e7f8      	b.n	3f2e <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4e>
      sensor->max_value   = 0.0F;
    3f3c:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3f3e:	61e3      	str	r3, [r4, #28]
    3f40:	e7f2      	b.n	3f28 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	42480000 	.word	0x42480000
    3f48:	42a00000 	.word	0x42a00000
    3f4c:	c2200000 	.word	0xc2200000
    3f50:	3dcccccd 	.word	0x3dcccccd
    3f54:	42fa0000 	.word	0x42fa0000

00003f58 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

void DHT_Unified::Humidity::getSensor(sensor_t* sensor) {
    3f58:	b570      	push	{r4, r5, r6, lr}
    3f5a:	000c      	movs	r4, r1
    3f5c:	0005      	movs	r5, r0
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    3f5e:	2228      	movs	r2, #40	; 0x28
    3f60:	2100      	movs	r1, #0
    3f62:	0020      	movs	r0, r4
    3f64:	f007 fc5c 	bl	b820 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    3f68:	0021      	movs	r1, r4
    3f6a:	68a8      	ldr	r0, [r5, #8]
    3f6c:	f7ff ff88 	bl	3e80 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version         = DHT_SENSOR_VERSION;
    3f70:	2301      	movs	r3, #1
    3f72:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    3f74:	68eb      	ldr	r3, [r5, #12]
  // Set type and characteristics.
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
    3f76:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    3f78:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3f7a:	230c      	movs	r3, #12
  _parent->setMinDelay(sensor);
    3f7c:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3f7e:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    3f80:	f7ff ff9e 	bl	3ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    3f84:	68ab      	ldr	r3, [r5, #8]
    3f86:	7d1b      	ldrb	r3, [r3, #20]
    3f88:	2b15      	cmp	r3, #21
    3f8a:	d00a      	beq.n	3fa2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    3f8c:	2b16      	cmp	r3, #22
    3f8e:	d008      	beq.n	3fa2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    3f90:	2b0b      	cmp	r3, #11
    3f92:	d10c      	bne.n	3fae <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x56>
    case DHT11:
      sensor->max_value   = 80.0F;
    3f94:	4b08      	ldr	r3, [pc, #32]	; (3fb8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x60>)
    3f96:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 20.0F;
    3f98:	4b08      	ldr	r3, [pc, #32]	; (3fbc <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x64>)
    3f9a:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 5.0F;
    3f9c:	4b08      	ldr	r3, [pc, #32]	; (3fc0 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x68>)
      break;
    default:
      // Unknown type, default to 0.
      sensor->max_value   = 0.0F;
      sensor->min_value   = 0.0F;
      sensor->resolution  = 0.0F;
    3f9e:	6223      	str	r3, [r4, #32]
      break;
  }
}
    3fa0:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 100.0F;
    3fa2:	4b08      	ldr	r3, [pc, #32]	; (3fc4 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6c>)
    3fa4:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3fa6:	2300      	movs	r3, #0
    3fa8:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    3faa:	4b07      	ldr	r3, [pc, #28]	; (3fc8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x70>)
    3fac:	e7f7      	b.n	3f9e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
      sensor->max_value   = 0.0F;
    3fae:	2300      	movs	r3, #0
    3fb0:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3fb2:	61e3      	str	r3, [r4, #28]
    3fb4:	e7f3      	b.n	3f9e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	42a00000 	.word	0x42a00000
    3fbc:	41a00000 	.word	0x41a00000
    3fc0:	40a00000 	.word	0x40a00000
    3fc4:	42c80000 	.word	0x42c80000
    3fc8:	3dcccccd 	.word	0x3dcccccd

00003fcc <_ZN17RunningStatistics13setWindowSecsEf>:
RunningStatistics::RunningStatistics() {
  setWindowSecs( 1 );   // setup with one second average
  setInitialValue( 0 ); // start with zero
}

void RunningStatistics::setWindowSecs( float windowSecs ) {
    3fcc:	b510      	push	{r4, lr}
    3fce:	0004      	movs	r4, r0
  AverageSecs = windowSecs;
    3fd0:	c002      	stmia	r0!, {r1}
  
  averageValue.setRiseTime( AverageSecs );
    3fd2:	f001 fbed 	bl	57b0 <_ZN20FilterOnePoleCascade11setRiseTimeEf>
  averageSquareValue.setRiseTime( AverageSecs );
    3fd6:	0020      	movs	r0, r4
    3fd8:	6821      	ldr	r1, [r4, #0]
    3fda:	3044      	adds	r0, #68	; 0x44
    3fdc:	f001 fbe8 	bl	57b0 <_ZN20FilterOnePoleCascade11setRiseTimeEf>
}
    3fe0:	bd10      	pop	{r4, pc}

00003fe2 <_ZN17RunningStatistics15setInitialValueEff>:

void RunningStatistics::setInitialValue( float initialMean, float initialSigma ) {
    3fe2:	b570      	push	{r4, r5, r6, lr}
    3fe4:	1c0d      	adds	r5, r1, #0
    3fe6:	0004      	movs	r4, r0
  averageValue.setToNewValue( initialMean );
    3fe8:	3004      	adds	r0, #4
void RunningStatistics::setInitialValue( float initialMean, float initialSigma ) {
    3fea:	1c16      	adds	r6, r2, #0
  averageValue.setToNewValue( initialMean );
    3fec:	f001 fbfd 	bl	57ea <_ZN20FilterOnePoleCascade13setToNewValueEf>
  averageSquareValue.setToNewValue( sq(initialMean) + sq(initialSigma ) );
    3ff0:	1c29      	adds	r1, r5, #0
    3ff2:	1c28      	adds	r0, r5, #0
    3ff4:	f005 f850 	bl	9098 <__aeabi_fmul>
    3ff8:	1c31      	adds	r1, r6, #0
    3ffa:	1c05      	adds	r5, r0, #0
    3ffc:	1c30      	adds	r0, r6, #0
    3ffe:	f005 f84b 	bl	9098 <__aeabi_fmul>
    4002:	1c01      	adds	r1, r0, #0
    4004:	1c28      	adds	r0, r5, #0
    4006:	f004 fcc5 	bl	8994 <__aeabi_fadd>
    400a:	1c01      	adds	r1, r0, #0
    400c:	0020      	movs	r0, r4
    400e:	3044      	adds	r0, #68	; 0x44
    4010:	f001 fbeb 	bl	57ea <_ZN20FilterOnePoleCascade13setToNewValueEf>
}
    4014:	bd70      	pop	{r4, r5, r6, pc}

00004016 <_ZN17RunningStatisticsC1Ev>:
RunningStatistics::RunningStatistics() {
    4016:	b570      	push	{r4, r5, r6, lr}
    4018:	26fe      	movs	r6, #254	; 0xfe
    401a:	2500      	movs	r5, #0
    401c:	0004      	movs	r4, r0
    401e:	05b6      	lsls	r6, r6, #22
    4020:	1c2a      	adds	r2, r5, #0
    4022:	1c31      	adds	r1, r6, #0
    4024:	3004      	adds	r0, #4
    4026:	f001 fb9b 	bl	5760 <_ZN20FilterOnePoleCascadeC1Eff>
    402a:	0020      	movs	r0, r4
    402c:	1c2a      	adds	r2, r5, #0
    402e:	1c31      	adds	r1, r6, #0
    4030:	3044      	adds	r0, #68	; 0x44
    4032:	f001 fb95 	bl	5760 <_ZN20FilterOnePoleCascadeC1Eff>
  setWindowSecs( 1 );   // setup with one second average
    4036:	1c31      	adds	r1, r6, #0
    4038:	0020      	movs	r0, r4
    403a:	f7ff ffc7 	bl	3fcc <_ZN17RunningStatistics13setWindowSecsEf>
  setInitialValue( 0 ); // start with zero
    403e:	1c2a      	adds	r2, r5, #0
    4040:	1c29      	adds	r1, r5, #0
    4042:	0020      	movs	r0, r4
    4044:	f7ff ffcd 	bl	3fe2 <_ZN17RunningStatistics15setInitialValueEff>
}
    4048:	0020      	movs	r0, r4
    404a:	bd70      	pop	{r4, r5, r6, pc}

0000404c <_ZN17RunningStatistics5inputEf>:

void RunningStatistics::input( float inVal ) {
    404c:	b570      	push	{r4, r5, r6, lr}
    404e:	1c0d      	adds	r5, r1, #0
    4050:	0004      	movs	r4, r0
  averageValue.input(inVal);              // calculates running average
    4052:	3004      	adds	r0, #4
    4054:	f001 fbbc 	bl	57d0 <_ZN20FilterOnePoleCascade5inputEf>
  averageSquareValue.input(inVal*inVal);  // calculates running average of square
    4058:	1c29      	adds	r1, r5, #0
    405a:	1c28      	adds	r0, r5, #0
    405c:	f005 f81c 	bl	9098 <__aeabi_fmul>
    4060:	1c01      	adds	r1, r0, #0
    4062:	0020      	movs	r0, r4
    4064:	3044      	adds	r0, #68	; 0x44
    4066:	f001 fbb3 	bl	57d0 <_ZN20FilterOnePoleCascade5inputEf>
}
    406a:	bd70      	pop	{r4, r5, r6, pc}

0000406c <_ZN17RunningStatistics8varianceEv>:
  
float RunningStatistics::mean() {
  return averageValue.output();
}
  
float RunningStatistics::variance() {
    406c:	b570      	push	{r4, r5, r6, lr}
    406e:	0004      	movs	r4, r0
  float var = averageSquareValue.output() - averageValue.output()*averageValue.output();
    4070:	3044      	adds	r0, #68	; 0x44
    4072:	f001 fbc1 	bl	57f8 <_ZN20FilterOnePoleCascade6outputEv>
    4076:	3404      	adds	r4, #4
    4078:	1c05      	adds	r5, r0, #0
    407a:	0020      	movs	r0, r4
    407c:	f001 fbbc 	bl	57f8 <_ZN20FilterOnePoleCascade6outputEv>
    4080:	1c06      	adds	r6, r0, #0
    4082:	0020      	movs	r0, r4
    4084:	f001 fbb8 	bl	57f8 <_ZN20FilterOnePoleCascade6outputEv>
    4088:	1c01      	adds	r1, r0, #0
    408a:	1c30      	adds	r0, r6, #0
    408c:	f005 f804 	bl	9098 <__aeabi_fmul>
    4090:	1c01      	adds	r1, r0, #0
    4092:	1c28      	adds	r0, r5, #0
    4094:	f005 f920 	bl	92d8 <__aeabi_fsub>
    
  // because of the filtering, it's possible that this could be negative ... check!
  if( var < 0 ) var = 0;
    4098:	2100      	movs	r1, #0
  float var = averageSquareValue.output() - averageValue.output()*averageValue.output();
    409a:	1c04      	adds	r4, r0, #0
  if( var < 0 ) var = 0;
    409c:	f004 fc1c 	bl	88d8 <__aeabi_fcmplt>
    40a0:	2800      	cmp	r0, #0
    40a2:	d000      	beq.n	40a6 <_ZN17RunningStatistics8varianceEv+0x3a>
    40a4:	2400      	movs	r4, #0
    
  return var;
}
    40a6:	1c20      	adds	r0, r4, #0
    40a8:	bd70      	pop	{r4, r5, r6, pc}

000040aa <_ZN17RunningStatistics5sigmaEv>:
  
float RunningStatistics::sigma() {
    40aa:	b510      	push	{r4, lr}
  
#ifdef ARM_FLOAT
  return sqrtf(variance());
#else
  return sqrt(variance());
    40ac:	f7ff ffde 	bl	406c <_ZN17RunningStatistics8varianceEv>
  { return __builtin_sqrtf(__x); }
    40b0:	f004 f816 	bl	80e0 <sqrtf>
#endif

}
    40b4:	bd10      	pop	{r4, pc}
	...

000040b8 <_Z13rtc_time_initl>:
 *
 * @brief Init the RTC time
 *
 */
error_t rtc_time_init(int32_t zone)
{
    40b8:	b513      	push	{r0, r1, r4, lr}
	// Initialize RTC clock code
	rtc.begin();
    40ba:	4c0a      	ldr	r4, [pc, #40]	; (40e4 <_Z13rtc_time_initl+0x2c>)
    40bc:	0020      	movs	r0, r4
    40be:	f001 fcab 	bl	5a18 <_ZN7RTCZero5beginEv>
	
	// Set default time
	struct rtc_clockreg_value time;
	time.day = 1;
    40c2:	466a      	mov	r2, sp
    40c4:	2301      	movs	r3, #1
    40c6:	70d3      	strb	r3, [r2, #3]
	time.month = 1;
    40c8:	7113      	strb	r3, [r2, #4]
	time.year = 2000;
    40ca:	23fa      	movs	r3, #250	; 0xfa
    40cc:	00db      	lsls	r3, r3, #3
    40ce:	80d3      	strh	r3, [r2, #6]
	time.hour = 0;
    40d0:	2300      	movs	r3, #0
	time.minute = 0;
	time.second = 0;
	
	rtc.rtc_set_time(&time);
    40d2:	0020      	movs	r0, r4
    40d4:	4669      	mov	r1, sp
	time.hour = 0;
    40d6:	7093      	strb	r3, [r2, #2]
	time.minute = 0;
    40d8:	7053      	strb	r3, [r2, #1]
	time.second = 0;
    40da:	7013      	strb	r3, [r2, #0]
	rtc.rtc_set_time(&time);
    40dc:	f001 fc44 	bl	5968 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
	
	// Set the timezone
	set_time_zone(zone);
}
    40e0:	bd16      	pop	{r1, r2, r4, pc}
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	2000092d 	.word	0x2000092d

000040e8 <_Z13get_rtc_epochv>:
 * @brief Get the RTC time in local time
 *
 * 
 */
time_t get_rtc_epoch()
{
    40e8:	b510      	push	{r4, lr}
	// Convert to UTC
	time_t epoch;
	epoch = rtc.getEpoch();
    40ea:	4802      	ldr	r0, [pc, #8]	; (40f4 <_Z13get_rtc_epochv+0xc>)
    40ec:	f001 fbf2 	bl	58d4 <_ZN7RTCZero8getEpochEv>
	return epoch;

} // get_rtc_time()
    40f0:	bd10      	pop	{r4, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	2000092d 	.word	0x2000092d

000040f8 <_Z18print_current_timev>:
* Prints the current time
* The time is set to 0 during boot
*
*/
void print_current_time(void)
{
    40f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    40fa:	4c0c      	ldr	r4, [pc, #48]	; (412c <_Z18print_current_timev+0x34>)
{
    40fc:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    40fe:	0020      	movs	r0, r4
    4100:	f001 fb96 	bl	5830 <_ZN7RTCZero10getSecondsEv>
    4104:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    4106:	0020      	movs	r0, r4
    4108:	f001 fb98 	bl	583c <_ZN7RTCZero10getMinutesEv>
    410c:	0005      	movs	r5, r0
	c = rtc.getHours();
    410e:	0020      	movs	r0, r4
    4110:	f001 fb9a 	bl	5848 <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    4114:	002b      	movs	r3, r5
	c = rtc.getHours();
    4116:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    4118:	4905      	ldr	r1, [pc, #20]	; (4130 <_Z18print_current_timev+0x38>)
	a = rtc.getSeconds();
    411a:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    411c:	a802      	add	r0, sp, #8
    411e:	f008 fc4b 	bl	c9b8 <siprintf>
	println(buffer);
    4122:	a802      	add	r0, sp, #8
    4124:	f000 f936 	bl	4394 <_Z7printlnPKc>
	
} // print_current_time
    4128:	b042      	add	sp, #264	; 0x108
    412a:	bd70      	pop	{r4, r5, r6, pc}
    412c:	2000092d 	.word	0x2000092d
    4130:	0000facf 	.word	0x0000facf

00004134 <_Z14print_log_timev>:
* Prints the current time specifically for logging
* The time is set to 0 during boot
*
*/
void print_log_time(void)
{
    4134:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    4136:	4c0c      	ldr	r4, [pc, #48]	; (4168 <_Z14print_log_timev+0x34>)
{
    4138:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    413a:	0020      	movs	r0, r4
    413c:	f001 fb78 	bl	5830 <_ZN7RTCZero10getSecondsEv>
    4140:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    4142:	0020      	movs	r0, r4
    4144:	f001 fb7a 	bl	583c <_ZN7RTCZero10getMinutesEv>
    4148:	0005      	movs	r5, r0
	c = rtc.getHours();
    414a:	0020      	movs	r0, r4
    414c:	f001 fb7c 	bl	5848 <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4150:	002b      	movs	r3, r5
	c = rtc.getHours();
    4152:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4154:	4905      	ldr	r1, [pc, #20]	; (416c <_Z14print_log_timev+0x38>)
	a = rtc.getSeconds();
    4156:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4158:	a802      	add	r0, sp, #8
    415a:	f008 fc2d 	bl	c9b8 <siprintf>
	print(buffer);
    415e:	a802      	add	r0, sp, #8
    4160:	f000 f902 	bl	4368 <_Z5printPKc>
	
} // print_current_time
    4164:	b042      	add	sp, #264	; 0x108
    4166:	bd70      	pop	{r4, r5, r6, pc}
    4168:	2000092d 	.word	0x2000092d
    416c:	0000fa94 	.word	0x0000fa94

00004170 <_Z18print_current_datev>:
* Prints the current date
* The date is set to 0 during boot
*
*/
void print_current_date(void)
{
    4170:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getYear();
    4172:	4c0c      	ldr	r4, [pc, #48]	; (41a4 <_Z18print_current_datev+0x34>)
{
    4174:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getYear();
    4176:	0020      	movs	r0, r4
    4178:	f001 fb78 	bl	586c <_ZN7RTCZero7getYearEv>
    417c:	0006      	movs	r6, r0
	b = rtc.getDay();
    417e:	0020      	movs	r0, r4
    4180:	f001 fb68 	bl	5854 <_ZN7RTCZero6getDayEv>
    4184:	0005      	movs	r5, r0
	c = rtc.getMonth();
    4186:	0020      	movs	r0, r4
    4188:	f001 fb6a 	bl	5860 <_ZN7RTCZero8getMonthEv>
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    418c:	002b      	movs	r3, r5
	c = rtc.getMonth();
    418e:	0002      	movs	r2, r0
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4190:	4905      	ldr	r1, [pc, #20]	; (41a8 <_Z18print_current_datev+0x38>)
	a = rtc.getYear();
    4192:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4194:	a802      	add	r0, sp, #8
    4196:	f008 fc0f 	bl	c9b8 <siprintf>
	println(buffer);
    419a:	a802      	add	r0, sp, #8
    419c:	f000 f8fa 	bl	4394 <_Z7printlnPKc>
	
} // print_current_date
    41a0:	b042      	add	sp, #264	; 0x108
    41a2:	bd70      	pop	{r4, r5, r6, pc}
    41a4:	2000092d 	.word	0x2000092d
    41a8:	0000faab 	.word	0x0000faab

000041ac <_GLOBAL__sub_I_rtc>:
    41ac:	b510      	push	{r4, lr}
RTCZero rtc;
    41ae:	4802      	ldr	r0, [pc, #8]	; (41b8 <_GLOBAL__sub_I_rtc+0xc>)
    41b0:	f001 fb30 	bl	5814 <_ZN7RTCZeroC1Ev>
} // print_current_date
    41b4:	bd10      	pop	{r4, pc}
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	2000092d 	.word	0x2000092d

000041bc <_Z10dlog_leveli>:


void dlog_level(int level)
{
    /* force level bounds */
    level = level >= numlevels ? numlevels - 1 : level;
    41bc:	2807      	cmp	r0, #7
    41be:	dd00      	ble.n	41c2 <_Z10dlog_leveli+0x6>
    41c0:	2007      	movs	r0, #7
    level = level < 0 ? 0 : level;
    41c2:	43c3      	mvns	r3, r0
    41c4:	17db      	asrs	r3, r3, #31
    41c6:	4018      	ands	r0, r3

    log_level = level;
    41c8:	4b01      	ldr	r3, [pc, #4]	; (41d0 <_Z10dlog_leveli+0x14>)
    41ca:	6018      	str	r0, [r3, #0]
} // dlog_level
    41cc:	4770      	bx	lr
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	20000044 	.word	0x20000044

000041d4 <_Z8log_initP7Serial_mm>:
{
    41d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pSerMon = pSerial;
    41d6:	4e0e      	ldr	r6, [pc, #56]	; (4210 <_Z8log_initP7Serial_mm+0x3c>)
{
    41d8:	0017      	movs	r7, r2
	pSerMon = pSerial;
    41da:	6030      	str	r0, [r6, #0]
	SerMon.begin(baud);
    41dc:	f001 f84c 	bl	5278 <_ZN7Serial_5beginEm>
	log_enabled = false;
    41e0:	2300      	movs	r3, #0
    41e2:	2408      	movs	r4, #8
    41e4:	4d0b      	ldr	r5, [pc, #44]	; (4214 <_Z8log_initP7Serial_mm+0x40>)
    41e6:	702b      	strb	r3, [r5, #0]
		if (!SerMon){
    41e8:	6830      	ldr	r0, [r6, #0]
    41ea:	f001 f847 	bl	527c <_ZN7Serial_cvbEv>
    41ee:	2800      	cmp	r0, #0
    41f0:	d10a      	bne.n	4208 <_Z8log_initP7Serial_mm+0x34>
			delay(2000);
    41f2:	20fa      	movs	r0, #250	; 0xfa
    41f4:	3c01      	subs	r4, #1
    41f6:	00c0      	lsls	r0, r0, #3
    41f8:	f7fe fa6a 	bl	26d0 <delay>
	for (int indx=0 ; indx < 8 ; indx++) {
    41fc:	2c00      	cmp	r4, #0
    41fe:	d1f3      	bne.n	41e8 <_Z8log_initP7Serial_mm+0x14>
	dlog_level(log_level);
    4200:	0038      	movs	r0, r7
    4202:	f7ff ffdb 	bl	41bc <_Z10dlog_leveli>
} // log_init
    4206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_enabled = true;
    4208:	2301      	movs	r3, #1
    420a:	702b      	strb	r3, [r5, #0]
			break;
    420c:	e7f8      	b.n	4200 <_Z8log_initP7Serial_mm+0x2c>
    420e:	46c0      	nop			; (mov r8, r8)
    4210:	20000930 	.word	0x20000930
    4214:	2000092e 	.word	0x2000092e

00004218 <_Z4dlogiPKcz>:


void dlog(int level, const char *format, ...)
{
    4218:	b40e      	push	{r1, r2, r3}
    421a:	b500      	push	{lr}
    va_list args;
	char buffer[PRINTF_LEN];
	
	// Is logging enabled?
	if (!log_enabled)
    421c:	4b0c      	ldr	r3, [pc, #48]	; (4250 <_Z4dlogiPKcz+0x38>)
{
    421e:	b0c2      	sub	sp, #264	; 0x108
	if (!log_enabled)
    4220:	781b      	ldrb	r3, [r3, #0]
    4222:	2b00      	cmp	r3, #0
    4224:	d010      	beq.n	4248 <_Z4dlogiPKcz+0x30>
	{
		return;
	}
   
    // Check debug log
    if (level > log_level) 
    4226:	4b0b      	ldr	r3, [pc, #44]	; (4254 <_Z4dlogiPKcz+0x3c>)
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	4283      	cmp	r3, r0
    422c:	db0c      	blt.n	4248 <_Z4dlogiPKcz+0x30>
	{
        return;
    }

	// Print time
	print_log_time();
    422e:	f7ff ff81 	bl	4134 <_Z14print_log_timev>

	// Print to serial port using the format
	va_start( args, format );
    4232:	aa44      	add	r2, sp, #272	; 0x110
	vsprintf( buffer,format, args );
    4234:	9943      	ldr	r1, [sp, #268]	; 0x10c
    4236:	a802      	add	r0, sp, #8
	va_start( args, format );
    4238:	9201      	str	r2, [sp, #4]
	vsprintf( buffer,format, args );
    423a:	f008 ff2f 	bl	d09c <vsiprintf>
	SerMon.println(buffer);
    423e:	4b06      	ldr	r3, [pc, #24]	; (4258 <_Z4dlogiPKcz+0x40>)
    4240:	a902      	add	r1, sp, #8
    4242:	6818      	ldr	r0, [r3, #0]
    4244:	f000 fc76 	bl	4b34 <_ZN5Print7printlnEPKc>
	va_end(args);

} // dlog
    4248:	b042      	add	sp, #264	; 0x108
    424a:	bc08      	pop	{r3}
    424c:	b003      	add	sp, #12
    424e:	4718      	bx	r3
    4250:	2000092e 	.word	0x2000092e
    4254:	20000044 	.word	0x20000044
    4258:	20000930 	.word	0x20000930

0000425c <_Z5ddumpiPKcPKvi>:


void ddump(int level, const char *label, const void *data, int datalen)
{
    425c:	b5f0      	push	{r4, r5, r6, r7, lr}
    425e:	001f      	movs	r7, r3
    const uint8_t *b = (const uint8_t *) data;
	char buffer[PRINTF_LEN];
    int i;
    
    // Is logging enabled?
    if (!log_enabled)
    4260:	4b16      	ldr	r3, [pc, #88]	; (42bc <_Z5ddumpiPKcPKvi+0x60>)
{
    4262:	b0c1      	sub	sp, #260	; 0x104
    if (!log_enabled)
    4264:	781b      	ldrb	r3, [r3, #0]
{
    4266:	000c      	movs	r4, r1
    4268:	0016      	movs	r6, r2
    if (!log_enabled)
    426a:	2b00      	cmp	r3, #0
    426c:	d024      	beq.n	42b8 <_Z5ddumpiPKcPKvi+0x5c>
    {
	    return;
    }

    if (level > log_level) 
    426e:	4b14      	ldr	r3, [pc, #80]	; (42c0 <_Z5ddumpiPKcPKvi+0x64>)
    4270:	681b      	ldr	r3, [r3, #0]
    4272:	4283      	cmp	r3, r0
    4274:	db20      	blt.n	42b8 <_Z5ddumpiPKcPKvi+0x5c>
	{
        return;
    }

	// Print time
	print_log_time();
    4276:	f7ff ff5d 	bl	4134 <_Z14print_log_timev>
    427a:	4d12      	ldr	r5, [pc, #72]	; (42c4 <_Z5ddumpiPKcPKvi+0x68>)

    if (label) 
    427c:	2c00      	cmp	r4, #0
    427e:	d008      	beq.n	4292 <_Z5ddumpiPKcPKvi+0x36>
	{
		sprintf( buffer, "%s:", label );
    4280:	4911      	ldr	r1, [pc, #68]	; (42c8 <_Z5ddumpiPKcPKvi+0x6c>)
    4282:	0022      	movs	r2, r4
    4284:	4668      	mov	r0, sp
    4286:	f008 fb97 	bl	c9b8 <siprintf>
        SerMon.print(buffer);
    428a:	4669      	mov	r1, sp
    428c:	6828      	ldr	r0, [r5, #0]
    428e:	f000 fc3f 	bl	4b10 <_ZN5Print5printEPKc>
{
    4292:	0034      	movs	r4, r6
    }

    for(i = 0; i < datalen; i++) 
    4294:	1ba3      	subs	r3, r4, r6
    4296:	42bb      	cmp	r3, r7
    4298:	da0a      	bge.n	42b0 <_Z5ddumpiPKcPKvi+0x54>
	{
		sprintf( buffer, " %02x", b[i] );
    429a:	7822      	ldrb	r2, [r4, #0]
    429c:	490b      	ldr	r1, [pc, #44]	; (42cc <_Z5ddumpiPKcPKvi+0x70>)
    429e:	4668      	mov	r0, sp
    42a0:	f008 fb8a 	bl	c9b8 <siprintf>
        SerMon.print(buffer);
    42a4:	4669      	mov	r1, sp
    42a6:	6828      	ldr	r0, [r5, #0]
    42a8:	f000 fc32 	bl	4b10 <_ZN5Print5printEPKc>
    42ac:	3401      	adds	r4, #1
    42ae:	e7f1      	b.n	4294 <_Z5ddumpiPKcPKvi+0x38>
    }
    
    SerMon.println("");
    42b0:	4907      	ldr	r1, [pc, #28]	; (42d0 <_Z5ddumpiPKcPKvi+0x74>)
    42b2:	6828      	ldr	r0, [r5, #0]
    42b4:	f000 fc3e 	bl	4b34 <_ZN5Print7printlnEPKc>

} // ddump
    42b8:	b041      	add	sp, #260	; 0x104
    42ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42bc:	2000092e 	.word	0x2000092e
    42c0:	20000044 	.word	0x20000044
    42c4:	20000930 	.word	0x20000930
    42c8:	0000fb2e 	.word	0x0000fb2e
    42cc:	0000fb32 	.word	0x0000fb32
    42d0:	0000fe0e 	.word	0x0000fe0e

000042d4 <_Z7log_msgPKcPKvii>:


void log_msg(const char *label, const void *data, int datalen, int eol)
{
    42d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42d6:	9301      	str	r3, [sp, #4]
    static char llabel[64];
    static int llen;
    static uint8_t line[256];
    
    // Is logging enabled?
    if (!log_enabled)
    42d8:	4b1e      	ldr	r3, [pc, #120]	; (4354 <_Z7log_msgPKcPKvii+0x80>)
{
    42da:	0006      	movs	r6, r0
    if (!log_enabled)
    42dc:	781b      	ldrb	r3, [r3, #0]
{
    42de:	9100      	str	r1, [sp, #0]
    42e0:	0014      	movs	r4, r2
    if (!log_enabled)
    42e2:	2b00      	cmp	r3, #0
    42e4:	d034      	beq.n	4350 <_Z7log_msgPKcPKvii+0x7c>
    {
	    return;
    }

    if ( LOG_DEBUG > log_level ) 
    42e6:	4b1c      	ldr	r3, [pc, #112]	; (4358 <_Z7log_msgPKcPKvii+0x84>)
    42e8:	681b      	ldr	r3, [r3, #0]
    42ea:	2b06      	cmp	r3, #6
    42ec:	dd30      	ble.n	4350 <_Z7log_msgPKcPKvii+0x7c>
	{
        return;
    }

    if ((!eol || llen) && (llen + datalen < sizeof(line))) {
    42ee:	9b01      	ldr	r3, [sp, #4]
    42f0:	4d1a      	ldr	r5, [pc, #104]	; (435c <_Z7log_msgPKcPKvii+0x88>)
    42f2:	2b00      	cmp	r3, #0
    42f4:	d002      	beq.n	42fc <_Z7log_msgPKcPKvii+0x28>
    42f6:	682b      	ldr	r3, [r5, #0]
    42f8:	2b00      	cmp	r3, #0
    42fa:	d012      	beq.n	4322 <_Z7log_msgPKcPKvii+0x4e>
    42fc:	682b      	ldr	r3, [r5, #0]
    42fe:	18e7      	adds	r7, r4, r3
    4300:	2fff      	cmp	r7, #255	; 0xff
    4302:	d80e      	bhi.n	4322 <_Z7log_msgPKcPKvii+0x4e>
        /* buffer if we can */
        memcpy(line + llen, data, datalen);
    4304:	4816      	ldr	r0, [pc, #88]	; (4360 <_Z7log_msgPKcPKvii+0x8c>)
    4306:	0022      	movs	r2, r4
    4308:	18c0      	adds	r0, r0, r3
    430a:	9900      	ldr	r1, [sp, #0]
    430c:	f007 fa6d 	bl	b7ea <memcpy>
        llen += datalen;
        datalen = 0;    /* consumed */
    4310:	1e34      	subs	r4, r6, #0
        llen += datalen;
    4312:	602f      	str	r7, [r5, #0]
        if (label) {
    4314:	d005      	beq.n	4322 <_Z7log_msgPKcPKvii+0x4e>
            strncpy(llabel, label, sizeof(llabel)-1);
    4316:	223f      	movs	r2, #63	; 0x3f
    4318:	0031      	movs	r1, r6
    431a:	4812      	ldr	r0, [pc, #72]	; (4364 <_Z7log_msgPKcPKvii+0x90>)
    431c:	f008 fbba 	bl	ca94 <strncpy>
        datalen = 0;    /* consumed */
    4320:	2400      	movs	r4, #0
        }
    }

    if (eol || datalen) {
    4322:	9b01      	ldr	r3, [sp, #4]
    4324:	4323      	orrs	r3, r4
    4326:	d013      	beq.n	4350 <_Z7log_msgPKcPKvii+0x7c>
        /* flush */
        if (llen) {
    4328:	682b      	ldr	r3, [r5, #0]
    432a:	2b00      	cmp	r3, #0
    432c:	d008      	beq.n	4340 <_Z7log_msgPKcPKvii+0x6c>
            ddump(LOG_DEBUG, llabel, line, llen);
    432e:	4f0d      	ldr	r7, [pc, #52]	; (4364 <_Z7log_msgPKcPKvii+0x90>)
    4330:	4a0b      	ldr	r2, [pc, #44]	; (4360 <_Z7log_msgPKcPKvii+0x8c>)
    4332:	0039      	movs	r1, r7
    4334:	2007      	movs	r0, #7
    4336:	f7ff ff91 	bl	425c <_Z5ddumpiPKcPKvi>
            llabel[0] = 0;
    433a:	2300      	movs	r3, #0
    433c:	703b      	strb	r3, [r7, #0]
            llen = 0;
    433e:	602b      	str	r3, [r5, #0]
        }
        
        if (datalen) {
    4340:	2c00      	cmp	r4, #0
    4342:	d005      	beq.n	4350 <_Z7log_msgPKcPKvii+0x7c>
            ddump(LOG_DEBUG, label, data, datalen);
    4344:	0023      	movs	r3, r4
    4346:	9a00      	ldr	r2, [sp, #0]
    4348:	0031      	movs	r1, r6
    434a:	2007      	movs	r0, #7
    434c:	f7ff ff86 	bl	425c <_Z5ddumpiPKcPKvi>
        }

    } // if

} // log_msg
    4350:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4352:	46c0      	nop			; (mov r8, r8)
    4354:	2000092e 	.word	0x2000092e
    4358:	20000044 	.word	0x20000044
    435c:	20000a34 	.word	0x20000a34
    4360:	20000934 	.word	0x20000934
    4364:	20000a38 	.word	0x20000a38

00004368 <_Z5printPKc>:


void print( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    4368:	4b07      	ldr	r3, [pc, #28]	; (4388 <_Z5printPKc+0x20>)
{
    436a:	b510      	push	{r4, lr}
	if (!log_enabled)
    436c:	781b      	ldrb	r3, [r3, #0]
{
    436e:	0001      	movs	r1, r0
	if (!log_enabled)
    4370:	2b00      	cmp	r3, #0
    4372:	d007      	beq.n	4384 <_Z5printPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    4374:	4b05      	ldr	r3, [pc, #20]	; (438c <_Z5printPKc+0x24>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	2b06      	cmp	r3, #6
    437a:	dd03      	ble.n	4384 <_Z5printPKc+0x1c>
	{
        return;
    }

	SerMon.print(buf);
    437c:	4b04      	ldr	r3, [pc, #16]	; (4390 <_Z5printPKc+0x28>)
    437e:	6818      	ldr	r0, [r3, #0]
    4380:	f000 fbc6 	bl	4b10 <_ZN5Print5printEPKc>
	
} // print
    4384:	bd10      	pop	{r4, pc}
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	2000092e 	.word	0x2000092e
    438c:	20000044 	.word	0x20000044
    4390:	20000930 	.word	0x20000930

00004394 <_Z7printlnPKc>:


void println( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    4394:	4b07      	ldr	r3, [pc, #28]	; (43b4 <_Z7printlnPKc+0x20>)
{
    4396:	b510      	push	{r4, lr}
	if (!log_enabled)
    4398:	781b      	ldrb	r3, [r3, #0]
{
    439a:	0001      	movs	r1, r0
	if (!log_enabled)
    439c:	2b00      	cmp	r3, #0
    439e:	d007      	beq.n	43b0 <_Z7printlnPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    43a0:	4b05      	ldr	r3, [pc, #20]	; (43b8 <_Z7printlnPKc+0x24>)
    43a2:	681b      	ldr	r3, [r3, #0]
    43a4:	2b06      	cmp	r3, #6
    43a6:	dd03      	ble.n	43b0 <_Z7printlnPKc+0x1c>
	{
        return;
    }

	SerMon.println(buf);
    43a8:	4b04      	ldr	r3, [pc, #16]	; (43bc <_Z7printlnPKc+0x28>)
    43aa:	6818      	ldr	r0, [r3, #0]
    43ac:	f000 fbc2 	bl	4b34 <_ZN5Print7printlnEPKc>
	
} // println
    43b0:	bd10      	pop	{r4, pc}
    43b2:	46c0      	nop			; (mov r8, r8)
    43b4:	2000092e 	.word	0x2000092e
    43b8:	20000044 	.word	0x20000044
    43bc:	20000930 	.word	0x20000930

000043c0 <_Z8printnumi>:


void printnum( int n )
{
	// Is logging enabled?
	if (!log_enabled)
    43c0:	4b07      	ldr	r3, [pc, #28]	; (43e0 <_Z8printnumi+0x20>)
{
    43c2:	b510      	push	{r4, lr}
	if (!log_enabled)
    43c4:	781b      	ldrb	r3, [r3, #0]
{
    43c6:	0001      	movs	r1, r0
	if (!log_enabled)
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <_Z8printnumi+0x1e>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    43cc:	4b05      	ldr	r3, [pc, #20]	; (43e4 <_Z8printnumi+0x24>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	2b06      	cmp	r3, #6
    43d2:	dd04      	ble.n	43de <_Z8printnumi+0x1e>
	{
        return;
    }

	SerMon.print(n);
    43d4:	4b04      	ldr	r3, [pc, #16]	; (43e8 <_Z8printnumi+0x28>)
    43d6:	220a      	movs	r2, #10
    43d8:	6818      	ldr	r0, [r3, #0]
    43da:	f000 fc0a 	bl	4bf2 <_ZN5Print5printEii>
	
} // println
    43de:	bd10      	pop	{r4, pc}
    43e0:	2000092e 	.word	0x2000092e
    43e4:	20000044 	.word	0x20000044
    43e8:	20000930 	.word	0x20000930

000043ec <_Z12capture_dumpPhi>:
	char str[6];
    uint8_t ch;
	uint16_t ix;
	
	// Is logging enabled?
	if (!log_enabled)
    43ec:	4b1b      	ldr	r3, [pc, #108]	; (445c <_Z12capture_dumpPhi+0x70>)
{
    43ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!log_enabled)
    43f0:	781b      	ldrb	r3, [r3, #0]
{
    43f2:	0006      	movs	r6, r0
    43f4:	000f      	movs	r7, r1
	if (!log_enabled)
    43f6:	2b00      	cmp	r3, #0
    43f8:	d02e      	beq.n	4458 <_Z12capture_dumpPhi+0x6c>
	{
		return;
	}

    // Check debug log
    if ( LOG_DEBUG > log_level ) 
    43fa:	4b19      	ldr	r3, [pc, #100]	; (4460 <_Z12capture_dumpPhi+0x74>)
    43fc:	681b      	ldr	r3, [r3, #0]
    43fe:	2b06      	cmp	r3, #6
    4400:	dd2a      	ble.n	4458 <_Z12capture_dumpPhi+0x6c>
	{
        return;
    }
	
	if (!p)
    4402:	2800      	cmp	r0, #0
    4404:	d100      	bne.n	4408 <_Z12capture_dumpPhi+0x1c>
	{
		p = &capture_buf[0];
    4406:	4e17      	ldr	r6, [pc, #92]	; (4464 <_Z12capture_dumpPhi+0x78>)
	}

	if ( !count && ( cap_count >= 0 ))
    4408:	2f00      	cmp	r7, #0
    440a:	d101      	bne.n	4410 <_Z12capture_dumpPhi+0x24>
	{
		count = cap_count;
    440c:	4b16      	ldr	r3, [pc, #88]	; (4468 <_Z12capture_dumpPhi+0x7c>)
    440e:	881f      	ldrh	r7, [r3, #0]
		
	}
	
	SerMon.println("======================================================");
    4410:	4d16      	ldr	r5, [pc, #88]	; (446c <_Z12capture_dumpPhi+0x80>)
    4412:	4917      	ldr	r1, [pc, #92]	; (4470 <_Z12capture_dumpPhi+0x84>)
    4414:	6828      	ldr	r0, [r5, #0]
    4416:	f000 fb8d 	bl	4b34 <_ZN5Print7printlnEPKc>
	for( ix = 0; ix < count-1; ix++ )
    441a:	2400      	movs	r4, #0
    441c:	1e7b      	subs	r3, r7, #1
		ch = p[ix];
		sprintf( str, "%02x,", ch );
		SerMon.print(str);

	} // for
	sprintf( str, "%02x", p[ix] );
    441e:	5d32      	ldrb	r2, [r6, r4]
	for( ix = 0; ix < count-1; ix++ )
    4420:	429c      	cmp	r4, r3
    4422:	da0a      	bge.n	443a <_Z12capture_dumpPhi+0x4e>
		sprintf( str, "%02x,", ch );
    4424:	4913      	ldr	r1, [pc, #76]	; (4474 <_Z12capture_dumpPhi+0x88>)
    4426:	4668      	mov	r0, sp
    4428:	f008 fac6 	bl	c9b8 <siprintf>
	for( ix = 0; ix < count-1; ix++ )
    442c:	3401      	adds	r4, #1
		SerMon.print(str);
    442e:	4669      	mov	r1, sp
    4430:	6828      	ldr	r0, [r5, #0]
    4432:	f000 fb6d 	bl	4b10 <_ZN5Print5printEPKc>
	for( ix = 0; ix < count-1; ix++ )
    4436:	b2a4      	uxth	r4, r4
    4438:	e7f0      	b.n	441c <_Z12capture_dumpPhi+0x30>
	sprintf( str, "%02x", p[ix] );
    443a:	490f      	ldr	r1, [pc, #60]	; (4478 <_Z12capture_dumpPhi+0x8c>)
    443c:	4668      	mov	r0, sp
    443e:	f008 fabb 	bl	c9b8 <siprintf>
	SerMon.println(str);
    4442:	4669      	mov	r1, sp
    4444:	6828      	ldr	r0, [r5, #0]
    4446:	f000 fb75 	bl	4b34 <_ZN5Print7printlnEPKc>
	SerMon.println("======================================================");
    444a:	4909      	ldr	r1, [pc, #36]	; (4470 <_Z12capture_dumpPhi+0x84>)
    444c:	6828      	ldr	r0, [r5, #0]
    444e:	f000 fb71 	bl	4b34 <_ZN5Print7printlnEPKc>

	// Reset the count
	cap_count = 0;
    4452:	2200      	movs	r2, #0
    4454:	4b04      	ldr	r3, [pc, #16]	; (4468 <_Z12capture_dumpPhi+0x7c>)
    4456:	801a      	strh	r2, [r3, #0]

} // capture_dump
    4458:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	2000092e 	.word	0x2000092e
    4460:	20000044 	.word	0x20000044
    4464:	20000a7a 	.word	0x20000a7a
    4468:	20000a78 	.word	0x20000a78
    446c:	20000930 	.word	0x20000930
    4470:	0000faf1 	.word	0x0000faf1
    4474:	0000fb28 	.word	0x0000fb28
    4478:	0000fb33 	.word	0x0000fb33

0000447c <_Z8free_ramv>:


// Function to return the amount of Free Ram.
extern "C" char *sbrk(int i);
int free_ram()
{
    447c:	b513      	push	{r0, r1, r4, lr}
	char stack_dummy = 0;
    447e:	2000      	movs	r0, #0
    4480:	466b      	mov	r3, sp
    4482:	1ddc      	adds	r4, r3, #7
    4484:	71d8      	strb	r0, [r3, #7]
	return &stack_dummy - sbrk(0);
    4486:	f008 fbb1 	bl	cbec <sbrk>
    448a:	1a20      	subs	r0, r4, r0
}
    448c:	bd16      	pop	{r1, r2, r4, pc}
	...

00004490 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>:
// Register a sensor.
//
//////////////////////////////////////////////////////////////////////////
uint8_t sapi_register_sensor(char *sensor_type, SensorInitFuncPtr sensor_init, SensorReadFuncPtr sensor_read, SensorReadCfgFuncPtr sensor_readcfg,
							 SensorWriteCfgFuncPtr sensor_writecfg, uint8_t is_observer, uint32_t frequency)
{
    4490:	b5f0      	push	{r4, r5, r6, r7, lr}
    4492:	b087      	sub	sp, #28
    4494:	9304      	str	r3, [sp, #16]
    4496:	ab0c      	add	r3, sp, #48	; 0x30
    4498:	9203      	str	r2, [sp, #12]
	uint8_t sensor_id = sensor_info_index;
    449a:	4f1c      	ldr	r7, [pc, #112]	; (450c <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x7c>)
{
    449c:	cb04      	ldmia	r3!, {r2}
	uint8_t sensor_id = sensor_info_index;
    449e:	783d      	ldrb	r5, [r7, #0]
{
    44a0:	781b      	ldrb	r3, [r3, #0]
	
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    44a2:	4c1b      	ldr	r4, [pc, #108]	; (4510 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x80>)
{
    44a4:	9301      	str	r3, [sp, #4]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    44a6:	016b      	lsls	r3, r5, #5
    44a8:	18e4      	adds	r4, r4, r3
{
    44aa:	9102      	str	r1, [sp, #8]
    44ac:	0006      	movs	r6, r0
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    44ae:	0001      	movs	r1, r0
    44b0:	0020      	movs	r0, r4
{
    44b2:	9205      	str	r2, [sp, #20]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    44b4:	f008 fab9 	bl	ca2a <strcpy>
	sensor_info[sensor_id].init = sensor_init;
    44b8:	9b02      	ldr	r3, [sp, #8]
    44ba:	60a3      	str	r3, [r4, #8]
	sensor_info[sensor_id].read = sensor_read;
    44bc:	9b03      	ldr	r3, [sp, #12]
    44be:	60e3      	str	r3, [r4, #12]
	sensor_info[sensor_id].readcfg = sensor_readcfg;
    44c0:	9b04      	ldr	r3, [sp, #16]
    44c2:	6123      	str	r3, [r4, #16]
	sensor_info[sensor_id].writecfg = sensor_writecfg;
    44c4:	9b05      	ldr	r3, [sp, #20]
    44c6:	6163      	str	r3, [r4, #20]
	sensor_info[sensor_id].frequency = frequency;
    44c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    44ca:	61a3      	str	r3, [r4, #24]
	
	sensor_info[sensor_id].observer = 0;
	if (is_observer == 1)
    44cc:	9b01      	ldr	r3, [sp, #4]
    44ce:	2b01      	cmp	r3, #1
    44d0:	d00c      	beq.n	44ec <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x5c>
	sensor_info[sensor_id].observer = 0;
    44d2:	2300      	movs	r3, #0
    44d4:	7723      	strb	r3, [r4, #28]
		
		// Set the URI used for obtaining token etc in CoAP Observe response msg and set the observe handler, frequency, sensor id.
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
	}
	sensor_info_index++;
    44d6:	783b      	ldrb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    44d8:	0032      	movs	r2, r6
	sensor_info_index++;
    44da:	3301      	adds	r3, #1
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    44dc:	490d      	ldr	r1, [pc, #52]	; (4514 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x84>)
    44de:	2007      	movs	r0, #7
	sensor_info_index++;
    44e0:	703b      	strb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    44e2:	f7ff fe99 	bl	4218 <_Z4dlogiPKcz>
	return sensor_id;
}
    44e6:	0028      	movs	r0, r5
    44e8:	b007      	add	sp, #28
    44ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_info[sensor_id].observer = 1;
    44ec:	466b      	mov	r3, sp
    44ee:	791b      	ldrb	r3, [r3, #4]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    44f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		sensor_info[sensor_id].observer = 1;
    44f2:	7723      	strb	r3, [r4, #28]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    44f4:	4908      	ldr	r1, [pc, #32]	; (4518 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x88>)
    44f6:	002b      	movs	r3, r5
    44f8:	0030      	movs	r0, r6
    44fa:	f002 f935 	bl	6768 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    44fe:	4907      	ldr	r1, [pc, #28]	; (451c <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x8c>)
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    4500:	0002      	movs	r2, r0
    4502:	7760      	strb	r0, [r4, #29]
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    4504:	2007      	movs	r0, #7
    4506:	f7ff fe87 	bl	4218 <_Z4dlogiPKcz>
    450a:	e7e4      	b.n	44d6 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x46>
    450c:	20000e7a 	.word	0x20000e7a
    4510:	20000e7c 	.word	0x20000e7c
    4514:	0000fc05 	.word	0x0000fc05
    4518:	0000482d 	.word	0x0000482d
    451c:	0000fbf1 	.word	0x0000fbf1

00004520 <_Z16sapi_init_sensorh>:
//
// Initialize a sensor (hardware) and sensor related code.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t sapi_init_sensor(uint8_t sensor_id)
{
    4520:	b510      	push	{r4, lr}
	// Initialize Sensor
	SensorInitFuncPtr pInitFunc = sensor_info[sensor_id].init;
    4522:	0143      	lsls	r3, r0, #5
    4524:	4802      	ldr	r0, [pc, #8]	; (4530 <_Z16sapi_init_sensorh+0x10>)
    4526:	18c0      	adds	r0, r0, r3
	sapi_error_t rcode = (*pInitFunc)();
    4528:	6883      	ldr	r3, [r0, #8]
    452a:	4798      	blx	r3
	
	return rcode;
}
    452c:	bd10      	pop	{r4, pc}
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	20000e7c 	.word	0x20000e7c

00004534 <_Z17cbor_enc_nic_typeP8cbor_bufPc>:
//
// Add sensor type to a CBOR payload wrapper
//
//////////////////////////////////////////////////////////////////////////
uint8_t cbor_enc_nic_type(struct cbor_buf *cbuf, char *sensor_type)
{
    4534:	b570      	push	{r4, r5, r6, lr}
    4536:	000d      	movs	r5, r1
	uint8_t rcode;

	// Top level map, first element is for device type.
	// Device type used to provide a namespace for use at the MQTT broker.
	if ((rcode = cbor_enc_map(cbuf, 2)))
    4538:	2102      	movs	r1, #2
{
    453a:	0004      	movs	r4, r0
	if ((rcode = cbor_enc_map(cbuf, 2)))
    453c:	f001 fb0f 	bl	5b5e <_Z12cbor_enc_mapP8cbor_bufi>
    4540:	b2c0      	uxtb	r0, r0
    4542:	2800      	cmp	r0, #0
    4544:	d116      	bne.n	4574 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// NIC type, key and value
	if ((rcode = cbor_enc_int(cbuf, NAMESPACE_NIC_TYPE_KEY)))
    4546:	0001      	movs	r1, r0
    4548:	0020      	movs	r0, r4
    454a:	f001 fae0 	bl	5b0e <_Z12cbor_enc_intP8cbor_bufi>
    454e:	b2c0      	uxtb	r0, r0
    4550:	2800      	cmp	r0, #0
    4552:	d10f      	bne.n	4574 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}
	if ((rcode = cbor_enc_text(cbuf, sensor_type, strlen(sensor_type))))
    4554:	0028      	movs	r0, r5
    4556:	f008 fa70 	bl	ca3a <strlen>
    455a:	0029      	movs	r1, r5
    455c:	0002      	movs	r2, r0
    455e:	0020      	movs	r0, r4
    4560:	f001 fae1 	bl	5b26 <_Z13cbor_enc_textP8cbor_bufPKci>
    4564:	b2c0      	uxtb	r0, r0
    4566:	2800      	cmp	r0, #0
    4568:	d104      	bne.n	4574 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// Remaining device-specific key
	rcode = cbor_enc_int(cbuf, NAMESPACE_DEVICE_SPECIFIC_KEY);
    456a:	2101      	movs	r1, #1
    456c:	0020      	movs	r0, r4
    456e:	f001 face 	bl	5b0e <_Z12cbor_enc_intP8cbor_bufi>
    4572:	b2c0      	uxtb	r0, r0
	return rcode;
}
    4574:	bd70      	pop	{r4, r5, r6, pc}
	...

00004578 <_Z13build_rsp_msgP4mbufPhPcmh>:
//
// A typical CBOR payload: {0:"temp",1:<text payload>"}
//
//////////////////////////////////////////////////////////////////////////
error_t build_rsp_msg(struct mbuf *m, uint8_t *len, char *payload, uint32_t payloadlen, uint8_t sensor_id)
{
    4578:	b5f0      	push	{r4, r5, r6, r7, lr}
    457a:	b0a7      	sub	sp, #156	; 0x9c
    457c:	001f      	movs	r7, r3
    457e:	ab2c      	add	r3, sp, #176	; 0xb0
    4580:	9101      	str	r1, [sp, #4]
    4582:	781c      	ldrb	r4, [r3, #0]
	
	// If payload needs to be in CBOR format we add the CBOR wrapper.
	error_t	rcode = ERR_FAIL;
	struct cbor_buf cbuf;
		
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    4584:	a906      	add	r1, sp, #24
{
    4586:	0005      	movs	r5, r0
    4588:	0016      	movs	r6, r2
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    458a:	a802      	add	r0, sp, #8
    458c:	2280      	movs	r2, #128	; 0x80
    458e:	f001 faad 	bl	5aec <_Z13cbor_enc_initP8cbor_bufPvi>
	
	if (!cbor_enc_nic_type(&cbuf, sensor_info[sensor_id].devicetype))
    4592:	491c      	ldr	r1, [pc, #112]	; (4604 <_Z13build_rsp_msgP4mbufPhPcmh+0x8c>)
    4594:	0164      	lsls	r4, r4, #5
    4596:	1909      	adds	r1, r1, r4
    4598:	a802      	add	r0, sp, #8
    459a:	f7ff ffcb 	bl	4534 <_Z17cbor_enc_nic_typeP8cbor_bufPc>
    459e:	2800      	cmp	r0, #0
    45a0:	d003      	beq.n	45aa <_Z13build_rsp_msgP4mbufPhPcmh+0x32>
{
    45a2:	2363      	movs	r3, #99	; 0x63
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
	
	int freeram = free_ram();
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
	return ERR_OK;
}
    45a4:	0018      	movs	r0, r3
    45a6:	b027      	add	sp, #156	; 0x9c
    45a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!cbor_enc_text(&cbuf, payload, payloadlen))
    45aa:	0031      	movs	r1, r6
    45ac:	003a      	movs	r2, r7
    45ae:	a802      	add	r0, sp, #8
    45b0:	f001 fab9 	bl	5b26 <_Z13cbor_enc_textP8cbor_bufPKci>
    45b4:	1e06      	subs	r6, r0, #0
    45b6:	d1f4      	bne.n	45a2 <_Z13build_rsp_msgP4mbufPhPcmh+0x2a>
	l = cbor_buf_get_len(&cbuf);
    45b8:	a802      	add	r0, sp, #8
    45ba:	f001 faa4 	bl	5b06 <_Z16cbor_buf_get_lenP8cbor_buf>
    45be:	b2c7      	uxtb	r7, r0
    45c0:	0004      	movs	r4, r0
	p = (char *) m_append(m, l);
    45c2:	b239      	sxth	r1, r7
    45c4:	0028      	movs	r0, r5
    45c6:	f002 fec7 	bl	7358 <_Z8m_appendP4mbufs>
		return ERR_NO_MEM;
    45ca:	2303      	movs	r3, #3
	if (!p)
    45cc:	2800      	cmp	r0, #0
    45ce:	d0e9      	beq.n	45a4 <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    45d0:	b2e4      	uxtb	r4, r4
	memcpy(p, cbor_payload, l);
    45d2:	0022      	movs	r2, r4
    45d4:	a906      	add	r1, sp, #24
    45d6:	f007 f908 	bl	b7ea <memcpy>
	*len = l;
    45da:	9b01      	ldr	r3, [sp, #4]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    45dc:	490a      	ldr	r1, [pc, #40]	; (4608 <_Z13build_rsp_msgP4mbufPhPcmh+0x90>)
	*len = l;
    45de:	701f      	strb	r7, [r3, #0]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    45e0:	2007      	movs	r0, #7
    45e2:	f7ff fe19 	bl	4218 <_Z4dlogiPKcz>
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
    45e6:	0023      	movs	r3, r4
    45e8:	aa06      	add	r2, sp, #24
    45ea:	4908      	ldr	r1, [pc, #32]	; (460c <_Z13build_rsp_msgP4mbufPhPcmh+0x94>)
    45ec:	2007      	movs	r0, #7
    45ee:	f7ff fe35 	bl	425c <_Z5ddumpiPKcPKvi>
	int freeram = free_ram();
    45f2:	f7ff ff43 	bl	447c <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    45f6:	4906      	ldr	r1, [pc, #24]	; (4610 <_Z13build_rsp_msgP4mbufPhPcmh+0x98>)
	int freeram = free_ram();
    45f8:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    45fa:	2007      	movs	r0, #7
    45fc:	f7ff fe0c 	bl	4218 <_Z4dlogiPKcz>
	return ERR_OK;
    4600:	0033      	movs	r3, r6
    4602:	e7cf      	b.n	45a4 <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    4604:	20000e7c 	.word	0x20000e7c
    4608:	0000fb38 	.word	0x0000fb38
    460c:	00010506 	.word	0x00010506
    4610:	00010307 	.word	0x00010307

00004614 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>:
{
    4614:	b5f0      	push	{r4, r5, r6, r7, lr}
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    4616:	0006      	movs	r6, r0
{
    4618:	b0a9      	sub	sp, #164	; 0xa4
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    461a:	364c      	adds	r6, #76	; 0x4c
{
    461c:	9205      	str	r2, [sp, #20]
    461e:	0005      	movs	r5, r0
    4620:	000f      	movs	r7, r1
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    4622:	aa05      	add	r2, sp, #20
    4624:	210b      	movs	r1, #11
    4626:	0030      	movs	r0, r6
{
    4628:	001c      	movs	r4, r3
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    462a:	f002 f83b 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    462e:	9003      	str	r0, [sp, #12]
    if (o)
    4630:	2800      	cmp	r0, #0
    4632:	d004      	beq.n	463e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x2a>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    4634:	2384      	movs	r3, #132	; 0x84
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    4636:	70bb      	strb	r3, [r7, #2]
    rsp->plen = 0;
    4638:	2300      	movs	r3, #0
    463a:	643b      	str	r3, [r7, #64]	; 0x40
    return ERR_OK;
    463c:	e03e      	b.n	46bc <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
    if (!(o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL))) 
    463e:	9a03      	ldr	r2, [sp, #12]
    4640:	210f      	movs	r1, #15
    4642:	0030      	movs	r0, r6
    4644:	f002 f82e 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    4648:	9002      	str	r0, [sp, #8]
    464a:	2800      	cmp	r0, #0
    464c:	d101      	bne.n	4652 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3e>
        rsp->code = COAP_RSP_405_METHOD_NOT_ALLOWED;
    464e:	2385      	movs	r3, #133	; 0x85
    4650:	e7f1      	b.n	4636 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    if (req->code == COAP_REQUEST_GET)
    4652:	78ad      	ldrb	r5, [r5, #2]
    4654:	2d01      	cmp	r5, #1
    4656:	d000      	beq.n	465a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x46>
    4658:	e081      	b.n	475e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x14a>
        uint8_t len = 0;
    465a:	466a      	mov	r2, sp
    465c:	7b12      	ldrb	r2, [r2, #12]
    465e:	ab02      	add	r3, sp, #8
        if (!coap_opt_strcmp(o, "cfg"))
    4660:	4954      	ldr	r1, [pc, #336]	; (47b4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a0>)
    4662:	9802      	ldr	r0, [sp, #8]
        uint8_t len = 0;
    4664:	759a      	strb	r2, [r3, #22]
        if (!coap_opt_strcmp(o, "cfg"))
    4666:	f001 faf3 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
    466a:	9003      	str	r0, [sp, #12]
    466c:	2800      	cmp	r0, #0
    466e:	d128      	bne.n	46c2 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xae>
            uint8_t payloadlen = 0;
    4670:	ab02      	add	r3, sp, #8
    4672:	3516      	adds	r5, #22
    4674:	18ed      	adds	r5, r5, r3
    4676:	466b      	mov	r3, sp
    4678:	7b1b      	ldrb	r3, [r3, #12]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    467a:	0162      	lsls	r2, r4, #5
            uint8_t payloadlen = 0;
    467c:	702b      	strb	r3, [r5, #0]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    467e:	4b4e      	ldr	r3, [pc, #312]	; (47b8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    4680:	0029      	movs	r1, r5
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    4682:	189b      	adds	r3, r3, r2
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    4684:	691b      	ldr	r3, [r3, #16]
    4686:	a808      	add	r0, sp, #32
    4688:	4798      	blx	r3
            rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    468a:	2116      	movs	r1, #22
    468c:	782b      	ldrb	r3, [r5, #0]
    468e:	a802      	add	r0, sp, #8
    4690:	9400      	str	r4, [sp, #0]
    4692:	1809      	adds	r1, r1, r0
    4694:	aa08      	add	r2, sp, #32
    4696:	6d38      	ldr	r0, [r7, #80]	; 0x50
    4698:	f7ff ff6e 	bl	4578 <_Z13build_rsp_msgP4mbufPhPcmh>
    469c:	0004      	movs	r4, r0
	uint8_t obs = false;
    469e:	9d03      	ldr	r5, [sp, #12]
        dlog(LOG_DEBUG, "crresourcehandler: GET status: %d len: %d bytes", rc, len);
    46a0:	ab02      	add	r3, sp, #8
    46a2:	7d9b      	ldrb	r3, [r3, #22]
    46a4:	0022      	movs	r2, r4
    46a6:	4945      	ldr	r1, [pc, #276]	; (47bc <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a8>)
    46a8:	2007      	movs	r0, #7
    46aa:	f7ff fdb5 	bl	4218 <_Z4dlogiPKcz>
        if (!rc)
    46ae:	2c00      	cmp	r4, #0
    46b0:	d14f      	bne.n	4752 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x13e>
			if (obs)
    46b2:	2d00      	cmp	r5, #0
    46b4:	d043      	beq.n	473e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x12a>
				rsp->code = COAP_RSP_203_VALID;
    46b6:	2343      	movs	r3, #67	; 0x43
				rsp->plen = 0;
    46b8:	643c      	str	r4, [r7, #64]	; 0x40
				rsp->code = COAP_RSP_203_VALID;
    46ba:	70bb      	strb	r3, [r7, #2]
}
    46bc:	2000      	movs	r0, #0
    46be:	b029      	add	sp, #164	; 0xa4
    46c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (!coap_opt_strcmp(o, "sens"))
    46c2:	493f      	ldr	r1, [pc, #252]	; (47c0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1ac>)
    46c4:	9802      	ldr	r0, [sp, #8]
    46c6:	f001 fac3 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
    46ca:	9002      	str	r0, [sp, #8]
    46cc:	2800      	cmp	r0, #0
    46ce:	d16a      	bne.n	47a6 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x192>
			if ((o = copt_get_next_opt_type((sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))) 
    46d0:	0002      	movs	r2, r0
    46d2:	2106      	movs	r1, #6
    46d4:	0030      	movs	r0, r6
    46d6:	f001 ffe5 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    46da:	1e06      	subs	r6, r0, #0
    46dc:	d018      	beq.n	4710 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xfc>
				uint32_t obsval = co_uint32_n2h(o);
    46de:	f001 fbed 	bl	5ebc <_Z13co_uint32_n2hPK5optlv>
				switch(obsval)
    46e2:	2800      	cmp	r0, #0
    46e4:	d003      	beq.n	46ee <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xda>
    46e6:	2801      	cmp	r0, #1
    46e8:	d009      	beq.n	46fe <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xea>
						rc = ERR_INVAL;
    46ea:	2404      	movs	r4, #4
    46ec:	e00e      	b.n	470c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xf8>
						rc = coap_obs_reg_sapi(sensor_info[sensor_id].observer_id);
    46ee:	4b32      	ldr	r3, [pc, #200]	; (47b8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    46f0:	0164      	lsls	r4, r4, #5
    46f2:	191c      	adds	r4, r3, r4
    46f4:	7f60      	ldrb	r0, [r4, #29]
    46f6:	f002 f887 	bl	6808 <_Z17coap_obs_reg_sapih>
    46fa:	0004      	movs	r4, r0
						break;
    46fc:	e7d0      	b.n	46a0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
						rc = coap_obs_dereg_sapi(sensor_info[sensor_id].observer_id);
    46fe:	4b2e      	ldr	r3, [pc, #184]	; (47b8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    4700:	0164      	lsls	r4, r4, #5
    4702:	191c      	adds	r4, r3, r4
    4704:	7f60      	ldrb	r0, [r4, #29]
    4706:	f002 f893 	bl	6830 <_Z19coap_obs_dereg_sapih>
    470a:	0004      	movs	r4, r0
	uint8_t obs = false;
    470c:	9d02      	ldr	r5, [sp, #8]
    470e:	e7c7      	b.n	46a0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				uint8_t payloadlen = 0;
    4710:	2517      	movs	r5, #23
    4712:	ab02      	add	r3, sp, #8
    4714:	18ed      	adds	r5, r5, r3
				SensorReadFuncPtr pReadSensor = sensor_info[sensor_id].read;
    4716:	4b28      	ldr	r3, [pc, #160]	; (47b8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    4718:	0162      	lsls	r2, r4, #5
    471a:	189b      	adds	r3, r3, r2
				uint8_t payloadlen = 0;
    471c:	7028      	strb	r0, [r5, #0]
				sapi_error_t rcode = (*pReadSensor)(payload, &payloadlen);
    471e:	0029      	movs	r1, r5
    4720:	68db      	ldr	r3, [r3, #12]
    4722:	a808      	add	r0, sp, #32
    4724:	4798      	blx	r3
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    4726:	2116      	movs	r1, #22
    4728:	782b      	ldrb	r3, [r5, #0]
    472a:	a802      	add	r0, sp, #8
    472c:	9400      	str	r4, [sp, #0]
    472e:	1809      	adds	r1, r1, r0
    4730:	aa08      	add	r2, sp, #32
    4732:	6d38      	ldr	r0, [r7, #80]	; 0x50
    4734:	f7ff ff20 	bl	4578 <_Z13build_rsp_msgP4mbufPhPcmh>
	uint8_t obs = false;
    4738:	0035      	movs	r5, r6
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    473a:	0004      	movs	r4, r0
    473c:	e7b0      	b.n	46a0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				rsp->plen = len;
    473e:	ab02      	add	r3, sp, #8
    4740:	7d9b      	ldrb	r3, [r3, #22]
				rsp->cf = COAP_CF_CSV;
    4742:	2202      	movs	r2, #2
				rsp->plen = len;
    4744:	643b      	str	r3, [r7, #64]	; 0x40
				rsp->cf = COAP_CF_CSV;
    4746:	003b      	movs	r3, r7
    4748:	333c      	adds	r3, #60	; 0x3c
    474a:	701a      	strb	r2, [r3, #0]
				rsp->code = COAP_RSP_205_CONTENT;
    474c:	2345      	movs	r3, #69	; 0x45
    474e:	70bb      	strb	r3, [r7, #2]
    4750:	e7b4      	b.n	46bc <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
            switch (rc)
    4752:	2c04      	cmp	r4, #4
    4754:	d001      	beq.n	475a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
    4756:	2c14      	cmp	r4, #20
    4758:	d129      	bne.n	47ae <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x19a>
			rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    475a:	2386      	movs	r3, #134	; 0x86
    475c:	e76b      	b.n	4636 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    else if (req->code == COAP_REQUEST_PUT) 
    475e:	2d03      	cmp	r5, #3
    4760:	d000      	beq.n	4764 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x150>
    4762:	e774      	b.n	464e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3a>
		len = o->ol;
    4764:	2617      	movs	r6, #23
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    4766:	4b14      	ldr	r3, [pc, #80]	; (47b8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    4768:	0164      	lsls	r4, r4, #5
    476a:	191c      	adds	r4, r3, r4
    476c:	6963      	ldr	r3, [r4, #20]
		strncpy(payload, (char*)o->ov, len);
    476e:	ac08      	add	r4, sp, #32
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    4770:	9304      	str	r3, [sp, #16]
		len = o->ol;
    4772:	9b02      	ldr	r3, [sp, #8]
		strncpy(payload, (char*)o->ov, len);
    4774:	0020      	movs	r0, r4
		len = o->ol;
    4776:	789d      	ldrb	r5, [r3, #2]
    4778:	ab02      	add	r3, sp, #8
    477a:	18f6      	adds	r6, r6, r3
		strncpy(payload, (char*)o->ov, len);
    477c:	9b02      	ldr	r3, [sp, #8]
		len = o->ol;
    477e:	7035      	strb	r5, [r6, #0]
		strncpy(payload, (char*)o->ov, len);
    4780:	6859      	ldr	r1, [r3, #4]
    4782:	002a      	movs	r2, r5
    4784:	f008 f986 	bl	ca94 <strncpy>
		payload[len] = '\0';
    4788:	466b      	mov	r3, sp
    478a:	7b1b      	ldrb	r3, [r3, #12]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    478c:	0031      	movs	r1, r6
		payload[len] = '\0';
    478e:	5563      	strb	r3, [r4, r5]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    4790:	0020      	movs	r0, r4
    4792:	9b04      	ldr	r3, [sp, #16]
    4794:	4798      	blx	r3
		if (rcode == SAPI_ERR_OK)
    4796:	2800      	cmp	r0, #0
    4798:	d103      	bne.n	47a2 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x18e>
			rsp->code = COAP_RSP_204_CHANGED;
    479a:	2344      	movs	r3, #68	; 0x44
			rsp->plen = 0;
    479c:	6438      	str	r0, [r7, #64]	; 0x40
			rsp->code = COAP_RSP_204_CHANGED;
    479e:	70bb      	strb	r3, [r7, #2]
    47a0:	e78c      	b.n	46bc <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
		else if (rcode == SAPI_ERR_NOT_IMPLEMENTED)
    47a2:	2801      	cmp	r0, #1
    47a4:	d101      	bne.n	47aa <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x196>
			rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    47a6:	23a1      	movs	r3, #161	; 0xa1
    47a8:	e745      	b.n	4636 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
		else if (rcode == SAPI_ERR_BAD_DATA)
    47aa:	2804      	cmp	r0, #4
    47ac:	d0d5      	beq.n	475a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    47ae:	23a0      	movs	r3, #160	; 0xa0
    47b0:	e741      	b.n	4636 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    47b2:	46c0      	nop			; (mov r8, r8)
    47b4:	0000fbb8 	.word	0x0000fbb8
    47b8:	20000e7c 	.word	0x20000e7c
    47bc:	0000fbc1 	.word	0x0000fbc1
    47c0:	0000fbbc 	.word	0x0000fbbc

000047c4 <_Z6crsapiP12coap_msg_ctxS0_>:
{
    47c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    47c6:	0006      	movs	r6, r0
	void *it = NULL;
    47c8:	2400      	movs	r4, #0
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    47ca:	364c      	adds	r6, #76	; 0x4c
    47cc:	aa01      	add	r2, sp, #4
{
    47ce:	0007      	movs	r7, r0
    47d0:	000d      	movs	r5, r1
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    47d2:	0030      	movs	r0, r6
    47d4:	210b      	movs	r1, #11
	void *it = NULL;
    47d6:	9401      	str	r4, [sp, #4]
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    47d8:	f001 ff64 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	if ((o = copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it)))
    47dc:	0030      	movs	r0, r6
    47de:	aa01      	add	r2, sp, #4
    47e0:	210b      	movs	r1, #11
    47e2:	f001 ff5f 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    47e6:	0006      	movs	r6, r0
    47e8:	42a0      	cmp	r0, r4
    47ea:	d017      	beq.n	481c <_Z6crsapiP12coap_msg_ctxS0_+0x58>
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    47ec:	4b0d      	ldr	r3, [pc, #52]	; (4824 <_Z6crsapiP12coap_msg_ctxS0_+0x60>)
    47ee:	781b      	ldrb	r3, [r3, #0]
    47f0:	429c      	cmp	r4, r3
    47f2:	da11      	bge.n	4818 <_Z6crsapiP12coap_msg_ctxS0_+0x54>
			if (!coap_opt_strcmp(o, sensor_info[indx].devicetype))
    47f4:	490c      	ldr	r1, [pc, #48]	; (4828 <_Z6crsapiP12coap_msg_ctxS0_+0x64>)
    47f6:	0163      	lsls	r3, r4, #5
    47f8:	18c9      	adds	r1, r1, r3
    47fa:	0030      	movs	r0, r6
    47fc:	f001 fa28 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
    4800:	2800      	cmp	r0, #0
    4802:	d106      	bne.n	4812 <_Z6crsapiP12coap_msg_ctxS0_+0x4e>
				rc = crresourcehandler(req, rsp, it, indx);
    4804:	0023      	movs	r3, r4
    4806:	9a01      	ldr	r2, [sp, #4]
    4808:	0029      	movs	r1, r5
    480a:	0038      	movs	r0, r7
    480c:	f7ff ff02 	bl	4614 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>
}
    4810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    4812:	3401      	adds	r4, #1
    4814:	b2e4      	uxtb	r4, r4
    4816:	e7e9      	b.n	47ec <_Z6crsapiP12coap_msg_ctxS0_+0x28>
		rsp->code = COAP_RSP_404_NOT_FOUND;
    4818:	2384      	movs	r3, #132	; 0x84
    481a:	70ab      	strb	r3, [r5, #2]
	rsp->plen = 0;
    481c:	2000      	movs	r0, #0
    481e:	6428      	str	r0, [r5, #64]	; 0x40
	return ERR_OK;
    4820:	e7f6      	b.n	4810 <_Z6crsapiP12coap_msg_ctxS0_+0x4c>
    4822:	46c0      	nop			; (mov r8, r8)
    4824:	20000e7a 	.word	0x20000e7a
    4828:	20000e7c 	.word	0x20000e7c

0000482c <_Z24sapi_observation_handlerP4mbufPhh>:
{
    482c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t payloadlen = 0;
    482e:	250f      	movs	r5, #15
{
    4830:	b0a7      	sub	sp, #156	; 0x9c
	uint8_t payloadlen = 0;
    4832:	ab02      	add	r3, sp, #8
    4834:	18ed      	adds	r5, r5, r3
    4836:	2300      	movs	r3, #0
{
    4838:	000f      	movs	r7, r1
    483a:	0016      	movs	r6, r2
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    483c:	4c0b      	ldr	r4, [pc, #44]	; (486c <_Z24sapi_observation_handlerP4mbufPhh+0x40>)
	uint8_t payloadlen = 0;
    483e:	702b      	strb	r3, [r5, #0]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4840:	0153      	lsls	r3, r2, #5
    4842:	18e4      	adds	r4, r4, r3
    4844:	0022      	movs	r2, r4
{
    4846:	9003      	str	r0, [sp, #12]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4848:	4909      	ldr	r1, [pc, #36]	; (4870 <_Z24sapi_observation_handlerP4mbufPhh+0x44>)
    484a:	2007      	movs	r0, #7
    484c:	f7ff fce4 	bl	4218 <_Z4dlogiPKcz>
	sapi_error_t rcode = (*pReadFunc)(payload, &payloadlen);
    4850:	68e3      	ldr	r3, [r4, #12]
    4852:	0029      	movs	r1, r5
    4854:	a806      	add	r0, sp, #24
    4856:	4798      	blx	r3
	error_t rc = build_rsp_msg(m, len, payload, payloadlen, sensor_id);
    4858:	782b      	ldrb	r3, [r5, #0]
    485a:	aa06      	add	r2, sp, #24
    485c:	9600      	str	r6, [sp, #0]
    485e:	0039      	movs	r1, r7
    4860:	9803      	ldr	r0, [sp, #12]
    4862:	f7ff fe89 	bl	4578 <_Z13build_rsp_msgP4mbufPhPcmh>
}
    4866:	b027      	add	sp, #156	; 0x9c
    4868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    486a:	46c0      	nop			; (mov r8, r8)
    486c:	20000e7c 	.word	0x20000e7c
    4870:	0000fc1b 	.word	0x0000fc1b

00004874 <_Z9crarduinoP12coap_msg_ctxS0_>:
//
//////////////////////////////////////////////////////////////////////////
error_t crarduino( struct coap_msg_ctx *req, struct coap_msg_ctx *rsp )
{
	// Dummy. Should not be called!
	rsp->code = COAP_RSP_404_NOT_FOUND;
    4874:	2384      	movs	r3, #132	; 0x84
    4876:	708b      	strb	r3, [r1, #2]
	rsp->plen = 0;
    4878:	2300      	movs	r3, #0
	return ERR_FAIL;
}
    487a:	2063      	movs	r0, #99	; 0x63
	rsp->plen = 0;
    487c:	640b      	str	r3, [r1, #64]	; 0x40
}
    487e:	4770      	bx	lr

00004880 <_Z15sapi_log_bannerv>:
//
// Helper function to print a banner in the log.
//
//////////////////////////////////////////////////////////////////////////
void sapi_log_banner()
{
    4880:	b500      	push	{lr}
    4882:	b091      	sub	sp, #68	; 0x44
	// Log Banner: version number, time and date
	char ver[64];
	strcpy(ver, COAP_SERVER_VERSION_STRING);
    4884:	4915      	ldr	r1, [pc, #84]	; (48dc <_Z15sapi_log_bannerv+0x5c>)
    4886:	4668      	mov	r0, sp
    4888:	f008 f8cf 	bl	ca2a <strcpy>
	strcat(ver, COAP_SERVER_VERSION_NUMBER);
    488c:	4914      	ldr	r1, [pc, #80]	; (48e0 <_Z15sapi_log_bannerv+0x60>)
    488e:	4668      	mov	r0, sp
    4890:	f008 f8b4 	bl	c9fc <strcat>
	println(ver);
    4894:	4668      	mov	r0, sp
    4896:	f7ff fd7d 	bl	4394 <_Z7printlnPKc>
	
	strcpy(ver, SAPI_VERSION_STRING);
    489a:	4912      	ldr	r1, [pc, #72]	; (48e4 <_Z15sapi_log_bannerv+0x64>)
    489c:	4668      	mov	r0, sp
    489e:	f008 f8c4 	bl	ca2a <strcpy>
	strcat(ver, SAPI_VERSION_NUMBER);
    48a2:	4911      	ldr	r1, [pc, #68]	; (48e8 <_Z15sapi_log_bannerv+0x68>)
    48a4:	4668      	mov	r0, sp
    48a6:	f008 f8a9 	bl	c9fc <strcat>
	println(ver);
    48aa:	4668      	mov	r0, sp
    48ac:	f7ff fd72 	bl	4394 <_Z7printlnPKc>
	
	sprintf(ver, "Build Time: %s  Date: %s", __TIME__, __DATE__);
    48b0:	4b0e      	ldr	r3, [pc, #56]	; (48ec <_Z15sapi_log_bannerv+0x6c>)
    48b2:	4a0f      	ldr	r2, [pc, #60]	; (48f0 <_Z15sapi_log_bannerv+0x70>)
    48b4:	490f      	ldr	r1, [pc, #60]	; (48f4 <_Z15sapi_log_bannerv+0x74>)
    48b6:	4668      	mov	r0, sp
    48b8:	f008 f87e 	bl	c9b8 <siprintf>
	println(ver);
    48bc:	4668      	mov	r0, sp
    48be:	f7ff fd69 	bl	4394 <_Z7printlnPKc>
	println("");
    48c2:	480d      	ldr	r0, [pc, #52]	; (48f8 <_Z15sapi_log_bannerv+0x78>)
    48c4:	f7ff fd66 	bl	4394 <_Z7printlnPKc>
	
	// Log free memory
	int freeram = free_ram();
    48c8:	f7ff fdd8 	bl	447c <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    48cc:	490b      	ldr	r1, [pc, #44]	; (48fc <_Z15sapi_log_bannerv+0x7c>)
	int freeram = free_ram();
    48ce:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    48d0:	2007      	movs	r0, #7
    48d2:	f7ff fca1 	bl	4218 <_Z4dlogiPKcz>
}
    48d6:	b011      	add	sp, #68	; 0x44
    48d8:	bd00      	pop	{pc}
    48da:	46c0      	nop			; (mov r8, r8)
    48dc:	0000fb53 	.word	0x0000fb53
    48e0:	0000fb71 	.word	0x0000fb71
    48e4:	0000fb77 	.word	0x0000fb77
    48e8:	0000fb84 	.word	0x0000fb84
    48ec:	0000fb8a 	.word	0x0000fb8a
    48f0:	0000fb96 	.word	0x0000fb96
    48f4:	0000fb9f 	.word	0x0000fb9f
    48f8:	0000fe0e 	.word	0x0000fe0e
    48fc:	00010307 	.word	0x00010307

00004900 <_Z15sapi_initializePc>:
{
    4900:	b507      	push	{r0, r1, r2, lr}
	is_sapi = 1;
    4902:	2201      	movs	r2, #1
    4904:	4b19      	ldr	r3, [pc, #100]	; (496c <_Z15sapi_initializePc+0x6c>)
{
    4906:	0001      	movs	r1, r0
	is_sapi = 1;
    4908:	701a      	strb	r2, [r3, #0]
	sensor_info_index = 0;
    490a:	2200      	movs	r2, #0
    490c:	4b18      	ldr	r3, [pc, #96]	; (4970 <_Z15sapi_initializePc+0x70>)
    490e:	4819      	ldr	r0, [pc, #100]	; (4974 <_Z15sapi_initializePc+0x74>)
    4910:	701a      	strb	r2, [r3, #0]
	if (url_classifier == NULL)
    4912:	4291      	cmp	r1, r2
    4914:	d128      	bne.n	4968 <_Z15sapi_initializePc+0x68>
		strncpy(classifier, DEFAULT_CLASSIFIER, CLASSIFIER_MAX_LEN);
    4916:	4918      	ldr	r1, [pc, #96]	; (4978 <_Z15sapi_initializePc+0x78>)
    4918:	3210      	adds	r2, #16
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    491a:	f008 f8bb 	bl	ca94 <strncpy>
	rtc_time_init(LOCAL_TIME_ZONE);
    491e:	2008      	movs	r0, #8
    4920:	4240      	negs	r0, r0
    4922:	f7ff fbc9 	bl	40b8 <_Z13rtc_time_initl>
	log_init(SER_MON_PTR, SER_MON_BAUD_RATE, LOG_LEVEL);
    4926:	21e1      	movs	r1, #225	; 0xe1
    4928:	2207      	movs	r2, #7
    492a:	0249      	lsls	r1, r1, #9
    492c:	4813      	ldr	r0, [pc, #76]	; (497c <_Z15sapi_initializePc+0x7c>)
    492e:	f7ff fc51 	bl	41d4 <_Z8log_initP7Serial_mm>
	pinMode(MNIC_WAKEUP_PIN, OUTPUT);
    4932:	2101      	movs	r1, #1
    4934:	2009      	movs	r0, #9
    4936:	f7ff f8c7 	bl	3ac8 <pinMode>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    493a:	2101      	movs	r1, #1
    493c:	2009      	movs	r0, #9
    493e:	f7ff f8c7 	bl	3ad0 <digitalWrite>
	coap_s_init(UART_PTR, COAP_MSG_MAX_AGE_IN_SECS, HDLC_UART_TIMEOUT_IN_MS, HDLC_MAX_PAYLOAD_LEN, "", NULL);
    4942:	2300      	movs	r3, #0
    4944:	22fa      	movs	r2, #250	; 0xfa
    4946:	9301      	str	r3, [sp, #4]
    4948:	4b0d      	ldr	r3, [pc, #52]	; (4980 <_Z15sapi_initializePc+0x80>)
    494a:	00d2      	lsls	r2, r2, #3
    494c:	215a      	movs	r1, #90	; 0x5a
    494e:	9300      	str	r3, [sp, #0]
    4950:	480c      	ldr	r0, [pc, #48]	; (4984 <_Z15sapi_initializePc+0x84>)
    4952:	23ff      	movs	r3, #255	; 0xff
    4954:	f002 fb68 	bl	7028 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>
	coap_put_ic_reboot_event();
    4958:	f002 fb34 	bl	6fc4 <_Z24coap_put_ic_reboot_eventv>
	delay(50);
    495c:	2032      	movs	r0, #50	; 0x32
    495e:	f7fd feb7 	bl	26d0 <delay>
	sapi_log_banner();
    4962:	f7ff ff8d 	bl	4880 <_Z15sapi_log_bannerv>
}
    4966:	bd07      	pop	{r0, r1, r2, pc}
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    4968:	2210      	movs	r2, #16
    496a:	e7d6      	b.n	491a <_Z15sapi_initializePc+0x1a>
    496c:	20000049 	.word	0x20000049
    4970:	20000e7a 	.word	0x20000e7a
    4974:	200000a0 	.word	0x200000a0
    4978:	0000fb4b 	.word	0x0000fb4b
    497c:	20001148 	.word	0x20001148
    4980:	0000fe0e 	.word	0x0000fe0e
    4984:	20000fb8 	.word	0x20000fb8

00004988 <_Z8sapi_runv>:
{
    4988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(initBoot){ 
    498a:	4e12      	ldr	r6, [pc, #72]	; (49d4 <_Z8sapi_runv+0x4c>)
    498c:	7833      	ldrb	r3, [r6, #0]
    498e:	2b00      	cmp	r3, #0
    4990:	d01d      	beq.n	49ce <_Z8sapi_runv+0x46>
		Serial.println("Enter any key to go to BootProgram"); 
    4992:	4d11      	ldr	r5, [pc, #68]	; (49d8 <_Z8sapi_runv+0x50>)
    4994:	4911      	ldr	r1, [pc, #68]	; (49dc <_Z8sapi_runv+0x54>)
    4996:	0028      	movs	r0, r5
		delay(1000); 
    4998:	27fa      	movs	r7, #250	; 0xfa
		Serial.println("Enter any key to go to BootProgram"); 
    499a:	f000 f8cb 	bl	4b34 <_ZN5Print7printlnEPKc>
    499e:	2405      	movs	r4, #5
		delay(1000); 
    49a0:	00bf      	lsls	r7, r7, #2
			if(Serial.available()){
    49a2:	0028      	movs	r0, r5
    49a4:	f000 fbe2 	bl	516c <_ZN7Serial_9availableEv>
    49a8:	2800      	cmp	r0, #0
    49aa:	d008      	beq.n	49be <_Z8sapi_runv+0x36>
				input = Serial.read();
    49ac:	0028      	movs	r0, r5
    49ae:	f000 fc05 	bl	51bc <_ZN7Serial_4readEv>
    49b2:	4b0b      	ldr	r3, [pc, #44]	; (49e0 <_Z8sapi_runv+0x58>)
    49b4:	b2c1      	uxtb	r1, r0
				Serial.println(input);
    49b6:	0028      	movs	r0, r5
				input = Serial.read();
    49b8:	7019      	strb	r1, [r3, #0]
				Serial.println(input);
    49ba:	f000 f8c5 	bl	4b48 <_ZN5Print7printlnEc>
		delay(1000); 
    49be:	0038      	movs	r0, r7
    49c0:	3c01      	subs	r4, #1
    49c2:	f7fd fe85 	bl	26d0 <delay>
		for (int i = 0; i < 5;i++){
    49c6:	2c00      	cmp	r4, #0
    49c8:	d1eb      	bne.n	49a2 <_Z8sapi_runv+0x1a>
		initBoot = false;
    49ca:	7034      	strb	r4, [r6, #0]
}
    49cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	coap_s_run();
    49ce:	f002 fc2f 	bl	7230 <_Z10coap_s_runv>
}
    49d2:	e7fb      	b.n	49cc <_Z8sapi_runv+0x44>
    49d4:	20000048 	.word	0x20000048
    49d8:	20001148 	.word	0x20001148
    49dc:	0000fc37 	.word	0x0000fc37
    49e0:	20000e7b 	.word	0x20000e7b

000049e4 <SERCOM4_Handler>:

    void SERCOM4_3_Handler(void) {
      Serial1.errorHandler();
    }
  #else
    void SERCOM4_Handler()  {
    49e4:	b510      	push	{r4, lr}
      Serial1.IrqHandler();
    49e6:	4802      	ldr	r0, [pc, #8]	; (49f0 <SERCOM4_Handler+0xc>)
    49e8:	f000 fa92 	bl	4f10 <_ZN4Uart10IrqHandlerEv>
    }
    49ec:	bd10      	pop	{r4, pc}
    49ee:	46c0      	nop			; (mov r8, r8)
    49f0:	20000efc 	.word	0x20000efc

000049f4 <SERCOM0_Handler>:

    void SERCOM2_3_Handler(void) {
      Serial2.errorHandler();
    }
  #else
    void SERCOM0_Handler()  {
    49f4:	b510      	push	{r4, lr}
      Serial2.IrqHandler();
    49f6:	4802      	ldr	r0, [pc, #8]	; (4a00 <SERCOM0_Handler+0xc>)
    49f8:	f000 fa8a 	bl	4f10 <_ZN4Uart10IrqHandlerEv>
    }
    49fc:	bd10      	pop	{r4, pc}
    49fe:	46c0      	nop			; (mov r8, r8)
    4a00:	20000fb8 	.word	0x20000fb8

00004a04 <SERCOM3_Handler>:

    void SERCOM3_3_Handler(void) {
      Serial3.errorHandler();
    }
  #else
    void SERCOM3_Handler()  {
    4a04:	b510      	push	{r4, lr}
      Serial3.IrqHandler();
    4a06:	4802      	ldr	r0, [pc, #8]	; (4a10 <SERCOM3_Handler+0xc>)
    4a08:	f000 fa82 	bl	4f10 <_ZN4Uart10IrqHandlerEv>
    }
    4a0c:	bd10      	pop	{r4, pc}
    4a0e:	46c0      	nop			; (mov r8, r8)
    4a10:	20001074 	.word	0x20001074

00004a14 <_GLOBAL__sub_I_g_APinDescription>:
    4a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
SERCOM sercom0( SERCOM0 ) ;
    4a16:	2184      	movs	r1, #132	; 0x84
    4a18:	4f1a      	ldr	r7, [pc, #104]	; (4a84 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    4a1a:	05c9      	lsls	r1, r1, #23
    4a1c:	0038      	movs	r0, r7
    4a1e:	f000 f8ec 	bl	4bfa <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    4a22:	4919      	ldr	r1, [pc, #100]	; (4a88 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    4a24:	4819      	ldr	r0, [pc, #100]	; (4a8c <_GLOBAL__sub_I_g_APinDescription+0x78>)
    4a26:	f000 f8e8 	bl	4bfa <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    4a2a:	4919      	ldr	r1, [pc, #100]	; (4a90 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    4a2c:	4819      	ldr	r0, [pc, #100]	; (4a94 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    4a2e:	f000 f8e4 	bl	4bfa <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    4a32:	4d19      	ldr	r5, [pc, #100]	; (4a98 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    4a34:	4919      	ldr	r1, [pc, #100]	; (4a9c <_GLOBAL__sub_I_g_APinDescription+0x88>)
    4a36:	0028      	movs	r0, r5
    4a38:	f000 f8df 	bl	4bfa <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    4a3c:	4e18      	ldr	r6, [pc, #96]	; (4aa0 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    4a3e:	4919      	ldr	r1, [pc, #100]	; (4aa4 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    4a40:	0030      	movs	r0, r6
    4a42:	f000 f8da 	bl	4bfa <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    4a46:	4918      	ldr	r1, [pc, #96]	; (4aa8 <_GLOBAL__sub_I_g_APinDescription+0x94>)
    4a48:	4818      	ldr	r0, [pc, #96]	; (4aac <_GLOBAL__sub_I_g_APinDescription+0x98>)
    4a4a:	f000 f8d6 	bl	4bfa <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    4a4e:	2401      	movs	r4, #1
    4a50:	2300      	movs	r3, #0
    4a52:	0031      	movs	r1, r6
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    4a54:	2603      	movs	r6, #3
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    4a56:	9301      	str	r3, [sp, #4]
    4a58:	0022      	movs	r2, r4
    4a5a:	9400      	str	r4, [sp, #0]
    4a5c:	4814      	ldr	r0, [pc, #80]	; (4ab0 <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    4a5e:	f000 fa29 	bl	4eb4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    4a62:	0039      	movs	r1, r7
    4a64:	9600      	str	r6, [sp, #0]
    4a66:	9401      	str	r4, [sp, #4]
    4a68:	230a      	movs	r3, #10
    4a6a:	220b      	movs	r2, #11
    4a6c:	4811      	ldr	r0, [pc, #68]	; (4ab4 <_GLOBAL__sub_I_g_APinDescription+0xa0>)
    4a6e:	f000 fa21 	bl	4eb4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial3( SERCOM_INSTANCE_SERIAL3, PIN_SERIAL3_RX, PIN_SERIAL3_TX, PAD_SERIAL3_RX, PAD_SERIAL3_TX ) ;
    4a72:	9600      	str	r6, [sp, #0]
    4a74:	0029      	movs	r1, r5
    4a76:	9401      	str	r4, [sp, #4]
    4a78:	2312      	movs	r3, #18
    4a7a:	2213      	movs	r2, #19
    4a7c:	480e      	ldr	r0, [pc, #56]	; (4ab8 <_GLOBAL__sub_I_g_APinDescription+0xa4>)
    4a7e:	f000 fa19 	bl	4eb4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    }
    4a82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4a84:	20001130 	.word	0x20001130
    4a88:	42000400 	.word	0x42000400
    4a8c:	20001134 	.word	0x20001134
    4a90:	42000800 	.word	0x42000800
    4a94:	20001138 	.word	0x20001138
    4a98:	2000113c 	.word	0x2000113c
    4a9c:	42000c00 	.word	0x42000c00
    4aa0:	20001140 	.word	0x20001140
    4aa4:	42001000 	.word	0x42001000
    4aa8:	43000400 	.word	0x43000400
    4aac:	20001144 	.word	0x20001144
    4ab0:	20000efc 	.word	0x20000efc
    4ab4:	20000fb8 	.word	0x20000fb8
    4ab8:	20001074 	.word	0x20001074

00004abc <_Znwj>:
    4abc:	b510      	push	{r4, lr}
    4abe:	f006 fe5f 	bl	b780 <malloc>
    4ac2:	bd10      	pop	{r4, pc}

00004ac4 <_ZdlPv>:
    4ac4:	b510      	push	{r4, lr}
    4ac6:	f006 fe65 	bl	b794 <free>
    4aca:	bd10      	pop	{r4, pc}

00004acc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ace:	0006      	movs	r6, r0
    4ad0:	000d      	movs	r5, r1
    4ad2:	000c      	movs	r4, r1
    4ad4:	188b      	adds	r3, r1, r2
    4ad6:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    4ad8:	9b01      	ldr	r3, [sp, #4]
    4ada:	1b67      	subs	r7, r4, r5
    4adc:	429c      	cmp	r4, r3
    4ade:	d007      	beq.n	4af0 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    4ae0:	6833      	ldr	r3, [r6, #0]
    4ae2:	7821      	ldrb	r1, [r4, #0]
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	0030      	movs	r0, r6
    4ae8:	4798      	blx	r3
    4aea:	3401      	adds	r4, #1
    4aec:	2800      	cmp	r0, #0
    4aee:	d1f3      	bne.n	4ad8 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    4af0:	0038      	movs	r0, r7
    4af2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004af4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    4af4:	b570      	push	{r4, r5, r6, lr}
    4af6:	0005      	movs	r5, r0
    4af8:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    4afa:	1e08      	subs	r0, r1, #0
    4afc:	d007      	beq.n	4b0e <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    4afe:	f007 ff9c 	bl	ca3a <strlen>
    4b02:	682b      	ldr	r3, [r5, #0]
    4b04:	0002      	movs	r2, r0
    4b06:	685b      	ldr	r3, [r3, #4]
    4b08:	0021      	movs	r1, r4
    4b0a:	0028      	movs	r0, r5
    4b0c:	4798      	blx	r3
    }
    4b0e:	bd70      	pop	{r4, r5, r6, pc}

00004b10 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    4b10:	b510      	push	{r4, lr}
  return write(str);
    4b12:	f7ff ffef 	bl	4af4 <_ZN5Print5writeEPKc>
}
    4b16:	bd10      	pop	{r4, pc}

00004b18 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    4b18:	b510      	push	{r4, lr}
  return write(c);
    4b1a:	6803      	ldr	r3, [r0, #0]
    4b1c:	681b      	ldr	r3, [r3, #0]
    4b1e:	4798      	blx	r3
}
    4b20:	bd10      	pop	{r4, pc}
	...

00004b24 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    4b24:	b510      	push	{r4, lr}
  return write("\r\n");
    4b26:	4902      	ldr	r1, [pc, #8]	; (4b30 <_ZN5Print7printlnEv+0xc>)
    4b28:	f7ff ffe4 	bl	4af4 <_ZN5Print5writeEPKc>
}
    4b2c:	bd10      	pop	{r4, pc}
    4b2e:	46c0      	nop			; (mov r8, r8)
    4b30:	0000fe0c 	.word	0x0000fe0c

00004b34 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    4b34:	b570      	push	{r4, r5, r6, lr}
    4b36:	0004      	movs	r4, r0
  return write(str);
    4b38:	f7ff ffdc 	bl	4af4 <_ZN5Print5writeEPKc>
    4b3c:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    4b3e:	0020      	movs	r0, r4
    4b40:	f7ff fff0 	bl	4b24 <_ZN5Print7printlnEv>
    4b44:	1940      	adds	r0, r0, r5
  return n;
}
    4b46:	bd70      	pop	{r4, r5, r6, pc}

00004b48 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    4b48:	b570      	push	{r4, r5, r6, lr}
    4b4a:	0005      	movs	r5, r0
  size_t n = print(c);
    4b4c:	f7ff ffe4 	bl	4b18 <_ZN5Print5printEc>
    4b50:	0004      	movs	r4, r0
  n += println();
    4b52:	0028      	movs	r0, r5
    4b54:	f7ff ffe6 	bl	4b24 <_ZN5Print7printlnEv>
    4b58:	1820      	adds	r0, r4, r0
  return n;
}
    4b5a:	bd70      	pop	{r4, r5, r6, pc}

00004b5c <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    4b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b5e:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4b60:	2200      	movs	r2, #0
{
    4b62:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
    4b64:	ab02      	add	r3, sp, #8
    4b66:	3305      	adds	r3, #5
{
    4b68:	9001      	str	r0, [sp, #4]
    4b6a:	000d      	movs	r5, r1
  *str = '\0';
    4b6c:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4b6e:	2e01      	cmp	r6, #1
    4b70:	dc00      	bgt.n	4b74 <_ZN5Print11printNumberEmh+0x18>
    4b72:	260a      	movs	r6, #10
    4b74:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    4b76:	0028      	movs	r0, r5
    4b78:	0031      	movs	r1, r6
    4b7a:	f003 fd6d 	bl	8658 <__aeabi_uidivmod>
    4b7e:	000f      	movs	r7, r1
    4b80:	b2cb      	uxtb	r3, r1
    n /= base;
    4b82:	0028      	movs	r0, r5
    4b84:	0031      	movs	r1, r6
    char c = n % base;
    4b86:	9300      	str	r3, [sp, #0]
    n /= base;
    4b88:	f003 fce0 	bl	854c <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4b8c:	b2fb      	uxtb	r3, r7
    4b8e:	3337      	adds	r3, #55	; 0x37
    n /= base;
    4b90:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4b92:	3c01      	subs	r4, #1
    4b94:	b2db      	uxtb	r3, r3
    4b96:	2f09      	cmp	r7, #9
    4b98:	d802      	bhi.n	4ba0 <_ZN5Print11printNumberEmh+0x44>
    4b9a:	9b00      	ldr	r3, [sp, #0]
    4b9c:	3330      	adds	r3, #48	; 0x30
    4b9e:	b2db      	uxtb	r3, r3
    4ba0:	7023      	strb	r3, [r4, #0]
  } while(n);
    4ba2:	2d00      	cmp	r5, #0
    4ba4:	d1e7      	bne.n	4b76 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
    4ba6:	0021      	movs	r1, r4
    4ba8:	9801      	ldr	r0, [sp, #4]
    4baa:	f7ff ffa3 	bl	4af4 <_ZN5Print5writeEPKc>
}
    4bae:	b00d      	add	sp, #52	; 0x34
    4bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004bb2 <_ZN5Print5printEli>:
{
    4bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bb4:	0006      	movs	r6, r0
    4bb6:	000c      	movs	r4, r1
    4bb8:	1e15      	subs	r5, r2, #0
  if (base == 0) {
    4bba:	d104      	bne.n	4bc6 <_ZN5Print5printEli+0x14>
    return write(n);
    4bbc:	6803      	ldr	r3, [r0, #0]
    4bbe:	b2c9      	uxtb	r1, r1
    4bc0:	681b      	ldr	r3, [r3, #0]
    4bc2:	4798      	blx	r3
}
    4bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return printNumber((unsigned long)n, base);
    4bc6:	b2d2      	uxtb	r2, r2
  } else if (base == 10) {
    4bc8:	2d0a      	cmp	r5, #10
    4bca:	d10d      	bne.n	4be8 <_ZN5Print5printEli+0x36>
    return printNumber((unsigned long)n, 10);
    4bcc:	002a      	movs	r2, r5
    if (n < 0) {
    4bce:	2900      	cmp	r1, #0
    4bd0:	da0a      	bge.n	4be8 <_ZN5Print5printEli+0x36>
      int t = print('-');
    4bd2:	212d      	movs	r1, #45	; 0x2d
    4bd4:	f7ff ffa0 	bl	4b18 <_ZN5Print5printEc>
      n = -n;
    4bd8:	4261      	negs	r1, r4
      int t = print('-');
    4bda:	0007      	movs	r7, r0
      return printNumber((unsigned long)n, 10) + t;
    4bdc:	002a      	movs	r2, r5
    4bde:	0030      	movs	r0, r6
    4be0:	f7ff ffbc 	bl	4b5c <_ZN5Print11printNumberEmh>
    4be4:	1838      	adds	r0, r7, r0
    4be6:	e7ed      	b.n	4bc4 <_ZN5Print5printEli+0x12>
    return printNumber((unsigned long)n, base);
    4be8:	0021      	movs	r1, r4
    4bea:	0030      	movs	r0, r6
    4bec:	f7ff ffb6 	bl	4b5c <_ZN5Print11printNumberEmh>
    4bf0:	e7e8      	b.n	4bc4 <_ZN5Print5printEli+0x12>

00004bf2 <_ZN5Print5printEii>:
{
    4bf2:	b510      	push	{r4, lr}
  return print((long) n, base);
    4bf4:	f7ff ffdd 	bl	4bb2 <_ZN5Print5printEli>
}
    4bf8:	bd10      	pop	{r4, pc}

00004bfa <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    4bfa:	6001      	str	r1, [r0, #0]
}
    4bfc:	4770      	bx	lr

00004bfe <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}

void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    4bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c00:	ac05      	add	r4, sp, #20
    4c02:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4c04:	6804      	ldr	r4, [r0, #0]
    4c06:	1e98      	subs	r0, r3, #2
    4c08:	1e47      	subs	r7, r0, #1
    4c0a:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4c0c:	6826      	ldr	r6, [r4, #0]
    4c0e:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4c10:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4c12:	4332      	orrs	r2, r6
    4c14:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4c16:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4c18:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4c1a:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    4c1c:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    4c1e:	6862      	ldr	r2, [r4, #4]
    4c20:	4329      	orrs	r1, r5
    4c22:	2000      	movs	r0, #0
    4c24:	2b02      	cmp	r3, #2
    4c26:	d000      	beq.n	4c2a <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    4c28:	0358      	lsls	r0, r3, #13
    4c2a:	4311      	orrs	r1, r2
    4c2c:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4c2e:	6061      	str	r1, [r4, #4]
}
    4c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004c32 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    4c32:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4c34:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4c36:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4c38:	03a4      	lsls	r4, r4, #14
    4c3a:	6818      	ldr	r0, [r3, #0]
    4c3c:	0512      	lsls	r2, r2, #20
    4c3e:	4022      	ands	r2, r4
    4c40:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4c42:	20c0      	movs	r0, #192	; 0xc0
    4c44:	0409      	lsls	r1, r1, #16
    4c46:	0280      	lsls	r0, r0, #10
    4c48:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4c4a:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4c4c:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    4c4e:	685a      	ldr	r2, [r3, #4]
    4c50:	4310      	orrs	r0, r2
    4c52:	6058      	str	r0, [r3, #4]
}
    4c54:	bd10      	pop	{r4, pc}

00004c56 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    4c56:	2201      	movs	r2, #1
    4c58:	6803      	ldr	r3, [r0, #0]
    4c5a:	6819      	ldr	r1, [r3, #0]
    4c5c:	430a      	orrs	r2, r1
    4c5e:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    4c60:	681a      	ldr	r2, [r3, #0]
    4c62:	07d2      	lsls	r2, r2, #31
    4c64:	d4fc      	bmi.n	4c60 <_ZN6SERCOM9resetUARTEv+0xa>
    4c66:	69da      	ldr	r2, [r3, #28]
    4c68:	07d2      	lsls	r2, r2, #31
    4c6a:	d4f9      	bmi.n	4c60 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    4c6c:	4770      	bx	lr

00004c6e <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    4c6e:	2202      	movs	r2, #2
    4c70:	6803      	ldr	r3, [r0, #0]
    4c72:	6819      	ldr	r1, [r3, #0]
    4c74:	430a      	orrs	r2, r1
    4c76:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    4c78:	69da      	ldr	r2, [r3, #28]
    4c7a:	0792      	lsls	r2, r2, #30
    4c7c:	d4fc      	bmi.n	4c78 <_ZN6SERCOM10enableUARTEv+0xa>
}
    4c7e:	4770      	bx	lr

00004c80 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    4c80:	6803      	ldr	r3, [r0, #0]
    4c82:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    4c84:	07d2      	lsls	r2, r2, #31
    4c86:	d402      	bmi.n	4c8e <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    4c88:	7e1a      	ldrb	r2, [r3, #24]
    4c8a:	0792      	lsls	r2, r2, #30
    4c8c:	d5fc      	bpl.n	4c88 <_ZN6SERCOM9flushUARTEv+0x8>
}
    4c8e:	4770      	bx	lr

00004c90 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    4c90:	2200      	movs	r2, #0
    4c92:	6803      	ldr	r3, [r0, #0]
    4c94:	835a      	strh	r2, [r3, #26]
}
    4c96:	4770      	bx	lr

00004c98 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    4c98:	6803      	ldr	r3, [r0, #0]
    4c9a:	7e18      	ldrb	r0, [r3, #24]
    4c9c:	0740      	lsls	r0, r0, #29
    4c9e:	0fc0      	lsrs	r0, r0, #31
}
    4ca0:	4770      	bx	lr

00004ca2 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    4ca2:	6803      	ldr	r3, [r0, #0]
    4ca4:	7e18      	ldrb	r0, [r3, #24]
    4ca6:	09c0      	lsrs	r0, r0, #7
}
    4ca8:	4770      	bx	lr

00004caa <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    4caa:	2380      	movs	r3, #128	; 0x80
    4cac:	6802      	ldr	r2, [r0, #0]
    4cae:	425b      	negs	r3, r3
    4cb0:	7e11      	ldrb	r1, [r2, #24]
    4cb2:	430b      	orrs	r3, r1
    4cb4:	7613      	strb	r3, [r2, #24]
}
    4cb6:	4770      	bx	lr

00004cb8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    4cb8:	6803      	ldr	r3, [r0, #0]
    4cba:	7e18      	ldrb	r0, [r3, #24]
    4cbc:	07c0      	lsls	r0, r0, #31
    4cbe:	0fc0      	lsrs	r0, r0, #31
}
    4cc0:	4770      	bx	lr

00004cc2 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    4cc2:	6803      	ldr	r3, [r0, #0]
    4cc4:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    4cc6:	b2c0      	uxtb	r0, r0
}
    4cc8:	4770      	bx	lr

00004cca <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    4cca:	6803      	ldr	r3, [r0, #0]
    4ccc:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    4cce:	07d2      	lsls	r2, r2, #31
    4cd0:	d5fc      	bpl.n	4ccc <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    4cd2:	b289      	uxth	r1, r1
  return 1;
}
    4cd4:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    4cd6:	8519      	strh	r1, [r3, #40]	; 0x28
}
    4cd8:	4770      	bx	lr

00004cda <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    4cda:	2201      	movs	r2, #1
    4cdc:	6803      	ldr	r3, [r0, #0]
    4cde:	759a      	strb	r2, [r3, #22]
}
    4ce0:	4770      	bx	lr

00004ce2 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    4ce2:	2201      	movs	r2, #1
    4ce4:	6803      	ldr	r3, [r0, #0]
    4ce6:	751a      	strb	r2, [r3, #20]
}
    4ce8:	4770      	bx	lr
	...

00004cec <_ZN6SERCOM13initClockNVICEv>:
    IRQn_Type IdNvic3=PendSV_IRQn ;
  #else
    IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
  #endif

  if(sercom == SERCOM0)
    4cec:	2284      	movs	r2, #132	; 0x84
    4cee:	6803      	ldr	r3, [r0, #0]
{
    4cf0:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    4cf2:	05d2      	lsls	r2, r2, #23
    4cf4:	4293      	cmp	r3, r2
    4cf6:	d011      	beq.n	4d1c <_ZN6SERCOM13initClockNVICEv+0x30>
      IdNvic3 = SERCOM0_3_IRQn;
    #else
      IdNvic = SERCOM0_IRQn;
    #endif
  }
  else if(sercom == SERCOM1)
    4cf8:	4a21      	ldr	r2, [pc, #132]	; (4d80 <_ZN6SERCOM13initClockNVICEv+0x94>)
    4cfa:	4293      	cmp	r3, r2
    4cfc:	d034      	beq.n	4d68 <_ZN6SERCOM13initClockNVICEv+0x7c>
    #else
      IdNvic = SERCOM1_IRQn;
    #endif
  }
#if !(SAMD11C14)
  else if(sercom == SERCOM2)
    4cfe:	4a21      	ldr	r2, [pc, #132]	; (4d84 <_ZN6SERCOM13initClockNVICEv+0x98>)
    4d00:	4293      	cmp	r3, r2
    4d02:	d034      	beq.n	4d6e <_ZN6SERCOM13initClockNVICEv+0x82>
      IdNvic = SERCOM2_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES)
  else if(sercom == SERCOM3)
    4d04:	4a20      	ldr	r2, [pc, #128]	; (4d88 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    4d06:	4293      	cmp	r3, r2
    4d08:	d034      	beq.n	4d74 <_ZN6SERCOM13initClockNVICEv+0x88>
      IdNvic = SERCOM3_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES) && !(SAMD21E) && !(SAMC21E)
  else if(sercom == SERCOM4)
    4d0a:	4a20      	ldr	r2, [pc, #128]	; (4d8c <_ZN6SERCOM13initClockNVICEv+0xa0>)
    4d0c:	4293      	cmp	r3, r2
    4d0e:	d034      	beq.n	4d7a <_ZN6SERCOM13initClockNVICEv+0x8e>
      IdNvic3 = SERCOM4_3_IRQn;
    #else
      IdNvic = SERCOM4_IRQn;
    #endif
  }
  else if(sercom == SERCOM5)
    4d10:	4a1f      	ldr	r2, [pc, #124]	; (4d90 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    4d12:	4293      	cmp	r3, r2
    4d14:	d127      	bne.n	4d66 <_ZN6SERCOM13initClockNVICEv+0x7a>
      IdNvic0 = SERCOM5_0_IRQn;
      IdNvic1 = SERCOM5_1_IRQn;
      IdNvic2 = SERCOM5_2_IRQn;
      IdNvic3 = SERCOM5_3_IRQn;
    #else
      IdNvic = SERCOM5_IRQn;
    4d16:	230d      	movs	r3, #13
    clockId = GCM_SERCOM5_CORE;
    4d18:	2218      	movs	r2, #24
    4d1a:	e001      	b.n	4d20 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM0_IRQn;
    4d1c:	2308      	movs	r3, #8
    clockId = GCM_SERCOM0_CORE;
    4d1e:	2212      	movs	r2, #18
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4d20:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4d22:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4d24:	4099      	lsls	r1, r3
    4d26:	481b      	ldr	r0, [pc, #108]	; (4d94 <_ZN6SERCOM13initClockNVICEv+0xa8>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4d28:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4d2a:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4d2c:	0899      	lsrs	r1, r3, #2
    4d2e:	402b      	ands	r3, r5
    4d30:	40ab      	lsls	r3, r5
    4d32:	35fc      	adds	r5, #252	; 0xfc
    4d34:	409d      	lsls	r5, r3
    4d36:	0089      	lsls	r1, r1, #2
    4d38:	1809      	adds	r1, r1, r0
    4d3a:	00a4      	lsls	r4, r4, #2
    4d3c:	5908      	ldr	r0, [r1, r4]
    4d3e:	0092      	lsls	r2, r2, #2
    4d40:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    4d42:	25c0      	movs	r5, #192	; 0xc0
    4d44:	409d      	lsls	r5, r3
    4d46:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4d48:	4303      	orrs	r3, r0
    4d4a:	510b      	str	r3, [r1, r4]
#if (SAMD21 || SAMD11)
  GCLK->CLKCTRL.reg = ( GCLK_CLKCTRL_ID( clockId ) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_CLKEN );
  SercomClock = SystemCoreClock;
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21)
  GCLK->PCHCTRL[clockId].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    4d4c:	4b12      	ldr	r3, [pc, #72]	; (4d98 <_ZN6SERCOM13initClockNVICEv+0xac>)
    4d4e:	18d1      	adds	r1, r2, r3
    4d50:	2340      	movs	r3, #64	; 0x40
    4d52:	67cb      	str	r3, [r1, #124]	; 0x7c
  SercomClock = SystemCoreClock;
    4d54:	4911      	ldr	r1, [pc, #68]	; (4d9c <_ZN6SERCOM13initClockNVICEv+0xb0>)
    4d56:	6808      	ldr	r0, [r1, #0]
    4d58:	4911      	ldr	r1, [pc, #68]	; (4da0 <_ZN6SERCOM13initClockNVICEv+0xb4>)
    4d5a:	6008      	str	r0, [r1, #0]
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    4d5c:	490e      	ldr	r1, [pc, #56]	; (4d98 <_ZN6SERCOM13initClockNVICEv+0xac>)
    4d5e:	1852      	adds	r2, r2, r1
    4d60:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    4d62:	4219      	tst	r1, r3
    4d64:	d0fc      	beq.n	4d60 <_ZN6SERCOM13initClockNVICEv+0x74>
  SercomClock = 96000000ul;
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
#else
  #error "SERCOM.cpp: Unsupported chip"
#endif
}
    4d66:	bd30      	pop	{r4, r5, pc}
      IdNvic = SERCOM1_IRQn;
    4d68:	2309      	movs	r3, #9
    clockId = GCM_SERCOM1_CORE;
    4d6a:	2213      	movs	r2, #19
    4d6c:	e7d8      	b.n	4d20 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM2_IRQn;
    4d6e:	230a      	movs	r3, #10
    clockId = GCM_SERCOM2_CORE;
    4d70:	2214      	movs	r2, #20
    4d72:	e7d5      	b.n	4d20 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM3_IRQn;
    4d74:	230b      	movs	r3, #11
    clockId = GCM_SERCOM3_CORE;
    4d76:	2215      	movs	r2, #21
    4d78:	e7d2      	b.n	4d20 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM4_IRQn;
    4d7a:	230c      	movs	r3, #12
    clockId = GCM_SERCOM4_CORE;
    4d7c:	2216      	movs	r2, #22
    4d7e:	e7cf      	b.n	4d20 <_ZN6SERCOM13initClockNVICEv+0x34>
    4d80:	42000400 	.word	0x42000400
    4d84:	42000800 	.word	0x42000800
    4d88:	42000c00 	.word	0x42000c00
    4d8c:	42001000 	.word	0x42001000
    4d90:	43000400 	.word	0x43000400
    4d94:	e000e100 	.word	0xe000e100
    4d98:	40001804 	.word	0x40001804
    4d9c:	20000038 	.word	0x20000038
    4da0:	2000004c 	.word	0x2000004c

00004da4 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    4da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4da6:	0016      	movs	r6, r2
    4da8:	001d      	movs	r5, r3
  if (sercom == SERCOM5) {
    4daa:	6802      	ldr	r2, [r0, #0]
    4dac:	4b18      	ldr	r3, [pc, #96]	; (4e10 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6c>)
{
    4dae:	0004      	movs	r4, r0
    4db0:	000f      	movs	r7, r1
  if (sercom == SERCOM5) {
    4db2:	429a      	cmp	r2, r3
    4db4:	d100      	bne.n	4db8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x14>
    sampleRate = SAMPLE_RATE_x16;
    4db6:	2601      	movs	r6, #1
  initClockNVIC();
    4db8:	0020      	movs	r0, r4
    4dba:	f7ff ff97 	bl	4cec <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    4dbe:	0020      	movs	r0, r4
    4dc0:	f7ff ff49 	bl	4c56 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4dc4:	221c      	movs	r2, #28
    4dc6:	00bb      	lsls	r3, r7, #2
    4dc8:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    4dca:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4dcc:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    4dce:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4dd0:	4313      	orrs	r3, r2
    4dd2:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    4dd4:	2384      	movs	r3, #132	; 0x84
    4dd6:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    4dd8:	2f01      	cmp	r7, #1
    4dda:	d118      	bne.n	4e0e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6a>
      sampleRateValue = 16;
    4ddc:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    4dde:	2e01      	cmp	r6, #1
    4de0:	d000      	beq.n	4de4 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x40>
      sampleRateValue = 8;
    4de2:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SercomClock * 8) / (sampleRateValue * baudrate);
    4de4:	4b0b      	ldr	r3, [pc, #44]	; (4e14 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x70>)
    4de6:	4369      	muls	r1, r5
    4de8:	6818      	ldr	r0, [r3, #0]
    4dea:	00c0      	lsls	r0, r0, #3
    4dec:	f003 fbae 	bl	854c <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    4df0:	2207      	movs	r2, #7
    4df2:	89a3      	ldrh	r3, [r4, #12]
    4df4:	4002      	ands	r2, r0
    4df6:	04db      	lsls	r3, r3, #19
    4df8:	0352      	lsls	r2, r2, #13
    4dfa:	0cdb      	lsrs	r3, r3, #19
    4dfc:	4313      	orrs	r3, r2
    4dfe:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    4e00:	0403      	lsls	r3, r0, #16
    4e02:	89a0      	ldrh	r0, [r4, #12]
    4e04:	0cdb      	lsrs	r3, r3, #19
    4e06:	0b40      	lsrs	r0, r0, #13
    4e08:	0340      	lsls	r0, r0, #13
    4e0a:	4318      	orrs	r0, r3
    4e0c:	81a0      	strh	r0, [r4, #12]
}
    4e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e10:	43000400 	.word	0x43000400
    4e14:	2000004c 	.word	0x2000004c

00004e18 <_ZN4UartcvbEv>:
    void errorHandler();
#else
    void IrqHandler();
#endif

    operator bool() { return true; }
    4e18:	2001      	movs	r0, #1
    4e1a:	4770      	bx	lr

00004e1c <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    4e1c:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    4e1e:	6803      	ldr	r3, [r0, #0]
    4e20:	4a01      	ldr	r2, [pc, #4]	; (4e28 <_ZN4Uart5beginEm+0xc>)
    4e22:	6a1b      	ldr	r3, [r3, #32]
    4e24:	4798      	blx	r3
}
    4e26:	bd10      	pop	{r4, pc}
    4e28:	00000413 	.word	0x00000413

00004e2c <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    4e2c:	b510      	push	{r4, lr}
    4e2e:	0004      	movs	r4, r0
  sercom->resetUART();
    4e30:	6900      	ldr	r0, [r0, #16]
    4e32:	f7ff ff10 	bl	4c56 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    4e36:	0020      	movs	r0, r4
    4e38:	3014      	adds	r0, #20
    4e3a:	f002 fcd9 	bl	77f0 <_ZN10RingBuffer5clearEv>
  txBuffer.clear();
    4e3e:	0020      	movs	r0, r4
    4e40:	305c      	adds	r0, #92	; 0x5c
    4e42:	f002 fcd5 	bl	77f0 <_ZN10RingBuffer5clearEv>
}
    4e46:	bd10      	pop	{r4, pc}

00004e48 <_ZN4Uart9availableEv>:
  }
}
#endif

int Uart::available()
{
    4e48:	b510      	push	{r4, lr}
  return rxBuffer.available();
    4e4a:	3014      	adds	r0, #20
    4e4c:	f002 fce4 	bl	7818 <_ZN10RingBuffer9availableEv>
}
    4e50:	bd10      	pop	{r4, pc}

00004e52 <_ZN4Uart5flushEv>:
{
    4e52:	b510      	push	{r4, lr}
    4e54:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    4e56:	0020      	movs	r0, r4
    4e58:	305c      	adds	r0, #92	; 0x5c
    4e5a:	f002 fcdd 	bl	7818 <_ZN10RingBuffer9availableEv>
    4e5e:	2800      	cmp	r0, #0
    4e60:	d1f9      	bne.n	4e56 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    4e62:	6920      	ldr	r0, [r4, #16]
    4e64:	f7ff ff0c 	bl	4c80 <_ZN6SERCOM9flushUARTEv>
}
    4e68:	bd10      	pop	{r4, pc}

00004e6a <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    4e6a:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    4e6c:	305c      	adds	r0, #92	; 0x5c
    4e6e:	f002 fcd9 	bl	7824 <_ZN10RingBuffer17availableForStoreEv>
}
    4e72:	bd10      	pop	{r4, pc}

00004e74 <_ZN4Uart4readEv>:
{
  return rxBuffer.peek();
}

int Uart::read()
{
    4e74:	b570      	push	{r4, r5, r6, lr}
  int c = rxBuffer.read_char();
    4e76:	0005      	movs	r5, r0
{
    4e78:	0004      	movs	r4, r0
  int c = rxBuffer.read_char();
    4e7a:	3514      	adds	r5, #20
    4e7c:	0028      	movs	r0, r5
    4e7e:	f002 fcbb 	bl	77f8 <_ZN10RingBuffer9read_charEv>

  if (uc_pinRTS != NO_RTS_PIN) {
    4e82:	0023      	movs	r3, r4
    4e84:	33a8      	adds	r3, #168	; 0xa8
    4e86:	781b      	ldrb	r3, [r3, #0]
  int c = rxBuffer.read_char();
    4e88:	0006      	movs	r6, r0
  if (uc_pinRTS != NO_RTS_PIN) {
    4e8a:	2bff      	cmp	r3, #255	; 0xff
    4e8c:	d00a      	beq.n	4ea4 <_ZN4Uart4readEv+0x30>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    4e8e:	0028      	movs	r0, r5
    4e90:	f002 fcc8 	bl	7824 <_ZN10RingBuffer17availableForStoreEv>
    4e94:	280a      	cmp	r0, #10
    4e96:	dd05      	ble.n	4ea4 <_ZN4Uart4readEv+0x30>
      *pul_outclrRTS = ul_pinMaskRTS;
    4e98:	0023      	movs	r3, r4
    4e9a:	34b4      	adds	r4, #180	; 0xb4
    4e9c:	33b0      	adds	r3, #176	; 0xb0
    4e9e:	681b      	ldr	r3, [r3, #0]
    4ea0:	6822      	ldr	r2, [r4, #0]
    4ea2:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
}
    4ea4:	0030      	movs	r0, r6
    4ea6:	bd70      	pop	{r4, r5, r6, pc}

00004ea8 <_ZN4Uart4peekEv>:
{
    4ea8:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    4eaa:	3014      	adds	r0, #20
    4eac:	f002 fcc8 	bl	7840 <_ZN10RingBuffer4peekEv>
}
    4eb0:	bd10      	pop	{r4, pc}
	...

00004eb4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    4eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4eb6:	001d      	movs	r5, r3
    4eb8:	ab08      	add	r3, sp, #32
    4eba:	781b      	ldrb	r3, [r3, #0]
    4ebc:	0004      	movs	r4, r0
    4ebe:	9300      	str	r3, [sp, #0]
    4ec0:	ab09      	add	r3, sp, #36	; 0x24
    4ec2:	781b      	ldrb	r3, [r3, #0]
    4ec4:	0016      	movs	r6, r2
    4ec6:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
    4ec8:	2300      	movs	r3, #0
    4eca:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4ecc:	23fa      	movs	r3, #250	; 0xfa
    4ece:	009b      	lsls	r3, r3, #2
    4ed0:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    4ed2:	4b0e      	ldr	r3, [pc, #56]	; (4f0c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    4ed4:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    4ed6:	3308      	adds	r3, #8
    4ed8:	6003      	str	r3, [r0, #0]
    4eda:	3014      	adds	r0, #20
    4edc:	f002 fc72 	bl	77c4 <_ZN10RingBufferC1Ev>
    4ee0:	0020      	movs	r0, r4
    4ee2:	305c      	adds	r0, #92	; 0x5c
    4ee4:	f002 fc6e 	bl	77c4 <_ZN10RingBufferC1Ev>
  uc_padRX = _padRX ;
    4ee8:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    4eea:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
    4eec:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    4eee:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
    4ef0:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
    4ef2:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
    4ef4:	466a      	mov	r2, sp
    4ef6:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    4ef8:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
    4efa:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
    4efc:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
    4efe:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
    4f00:	23ff      	movs	r3, #255	; 0xff
    4f02:	32a8      	adds	r2, #168	; 0xa8
}
    4f04:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
    4f06:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
    4f08:	7413      	strb	r3, [r2, #16]
}
    4f0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4f0c:	0000fe10 	.word	0x0000fe10

00004f10 <_ZN4Uart10IrqHandlerEv>:
{
    4f10:	b570      	push	{r4, r5, r6, lr}
    4f12:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    4f14:	6900      	ldr	r0, [r0, #16]
    4f16:	f7ff febf 	bl	4c98 <_ZN6SERCOM17availableDataUARTEv>
    4f1a:	2800      	cmp	r0, #0
    4f1c:	d019      	beq.n	4f52 <_ZN4Uart10IrqHandlerEv+0x42>
    rxBuffer.store_char(sercom->readDataUART());
    4f1e:	0025      	movs	r5, r4
    4f20:	6920      	ldr	r0, [r4, #16]
    4f22:	f7ff fece 	bl	4cc2 <_ZN6SERCOM12readDataUARTEv>
    4f26:	3514      	adds	r5, #20
    4f28:	0001      	movs	r1, r0
    4f2a:	0028      	movs	r0, r5
    4f2c:	f002 fc55 	bl	77da <_ZN10RingBuffer10store_charEh>
    if (uc_pinRTS != NO_RTS_PIN) {
    4f30:	0023      	movs	r3, r4
    4f32:	33a8      	adds	r3, #168	; 0xa8
    4f34:	781b      	ldrb	r3, [r3, #0]
    4f36:	2bff      	cmp	r3, #255	; 0xff
    4f38:	d00b      	beq.n	4f52 <_ZN4Uart10IrqHandlerEv+0x42>
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    4f3a:	0028      	movs	r0, r5
    4f3c:	f002 fc72 	bl	7824 <_ZN10RingBuffer17availableForStoreEv>
    4f40:	2809      	cmp	r0, #9
    4f42:	dc06      	bgt.n	4f52 <_ZN4Uart10IrqHandlerEv+0x42>
        *pul_outsetRTS = ul_pinMaskRTS;
    4f44:	0023      	movs	r3, r4
    4f46:	0022      	movs	r2, r4
    4f48:	33ac      	adds	r3, #172	; 0xac
    4f4a:	32b4      	adds	r2, #180	; 0xb4
    4f4c:	681b      	ldr	r3, [r3, #0]
    4f4e:	6812      	ldr	r2, [r2, #0]
    4f50:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    4f52:	6920      	ldr	r0, [r4, #16]
    4f54:	f7ff feb0 	bl	4cb8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    4f58:	2800      	cmp	r0, #0
    4f5a:	d00d      	beq.n	4f78 <_ZN4Uart10IrqHandlerEv+0x68>
    if (txBuffer.available()) {
    4f5c:	0025      	movs	r5, r4
    4f5e:	355c      	adds	r5, #92	; 0x5c
    4f60:	0028      	movs	r0, r5
    4f62:	f002 fc59 	bl	7818 <_ZN10RingBuffer9availableEv>
    4f66:	2800      	cmp	r0, #0
    4f68:	d012      	beq.n	4f90 <_ZN4Uart10IrqHandlerEv+0x80>
      uint8_t data = txBuffer.read_char();
    4f6a:	0028      	movs	r0, r5
    4f6c:	f002 fc44 	bl	77f8 <_ZN10RingBuffer9read_charEv>
      sercom->writeDataUART(data);
    4f70:	b2c1      	uxtb	r1, r0
    4f72:	6920      	ldr	r0, [r4, #16]
    4f74:	f7ff fea9 	bl	4cca <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    4f78:	6920      	ldr	r0, [r4, #16]
    4f7a:	f7ff fe92 	bl	4ca2 <_ZN6SERCOM11isUARTErrorEv>
    4f7e:	2800      	cmp	r0, #0
    4f80:	d005      	beq.n	4f8e <_ZN4Uart10IrqHandlerEv+0x7e>
    sercom->acknowledgeUARTError();
    4f82:	6920      	ldr	r0, [r4, #16]
    4f84:	f7ff fe91 	bl	4caa <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    4f88:	6920      	ldr	r0, [r4, #16]
    4f8a:	f7ff fe81 	bl	4c90 <_ZN6SERCOM15clearStatusUARTEv>
}
    4f8e:	bd70      	pop	{r4, r5, r6, pc}
      sercom->disableDataRegisterEmptyInterruptUART();
    4f90:	6920      	ldr	r0, [r4, #16]
    4f92:	f7ff fea6 	bl	4ce2 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    4f96:	e7ef      	b.n	4f78 <_ZN4Uart10IrqHandlerEv+0x68>

00004f98 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    4f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f9a:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    4f9c:	6900      	ldr	r0, [r0, #16]
{
    4f9e:	000e      	movs	r6, r1
    4fa0:	0025      	movs	r5, r4
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    4fa2:	f7ff fe89 	bl	4cb8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    4fa6:	355c      	adds	r5, #92	; 0x5c
    4fa8:	2800      	cmp	r0, #0
    4faa:	d120      	bne.n	4fee <_ZN4Uart5writeEh+0x56>
    while(txBuffer.isFull()) {
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);

      if (interruptsEnabled) {
        //uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    4fac:	273f      	movs	r7, #63	; 0x3f
    while(txBuffer.isFull()) {
    4fae:	0028      	movs	r0, r5
    4fb0:	f002 fc50 	bl	7854 <_ZN10RingBuffer6isFullEv>
    4fb4:	2800      	cmp	r0, #0
    4fb6:	d02d      	beq.n	5014 <_ZN4Uart5writeEh+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4fb8:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    4fbc:	2201      	movs	r2, #1
    4fbe:	4213      	tst	r3, r2
    4fc0:	d10c      	bne.n	4fdc <_ZN4Uart5writeEh+0x44>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4fc2:	f3ef 8305 	mrs	r3, IPSR
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    4fc6:	403b      	ands	r3, r7

        if (exceptionNumber == 0 ||
    4fc8:	d0f1      	beq.n	4fae <_ZN4Uart5writeEh+0x16>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    4fca:	3b10      	subs	r3, #16
    4fcc:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    4fce:	2b00      	cmp	r3, #0
    4fd0:	db17      	blt.n	5002 <_ZN4Uart5writeEh+0x6a>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    4fd2:	089b      	lsrs	r3, r3, #2
    4fd4:	33c0      	adds	r3, #192	; 0xc0
    4fd6:	4a14      	ldr	r2, [pc, #80]	; (5028 <_ZN4Uart5writeEh+0x90>)
    4fd8:	009b      	lsls	r3, r3, #2
    4fda:	589b      	ldr	r3, [r3, r2]
        }
      }

      // interrupts are disabled or called from ISR with higher or equal priority than the SERCOM IRQ
      // manually call the UART IRQ handler when the data register is empty
      if (sercom->isDataRegisterEmptyUART()) {
    4fdc:	6920      	ldr	r0, [r4, #16]
    4fde:	f7ff fe6b 	bl	4cb8 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    4fe2:	2800      	cmp	r0, #0
    4fe4:	d0e3      	beq.n	4fae <_ZN4Uart5writeEh+0x16>
#if (SAMD51)
        dataRegisterEmptyHandler();
#else
        IrqHandler();
    4fe6:	0020      	movs	r0, r4
    4fe8:	f7ff ff92 	bl	4f10 <_ZN4Uart10IrqHandlerEv>
    4fec:	e7df      	b.n	4fae <_ZN4Uart5writeEh+0x16>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    4fee:	0028      	movs	r0, r5
    4ff0:	f002 fc12 	bl	7818 <_ZN10RingBuffer9availableEv>
    4ff4:	2800      	cmp	r0, #0
    4ff6:	d1d9      	bne.n	4fac <_ZN4Uart5writeEh+0x14>
    sercom->writeDataUART(data);
    4ff8:	0031      	movs	r1, r6
    4ffa:	6920      	ldr	r0, [r4, #16]
    4ffc:	f7ff fe65 	bl	4cca <_ZN6SERCOM13writeDataUARTEh>
    txBuffer.store_char(data);

    sercom->enableDataRegisterEmptyInterruptUART();
  }

  return 1;
    5000:	e00f      	b.n	5022 <_ZN4Uart5writeEh+0x8a>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    5002:	220f      	movs	r2, #15
    5004:	4013      	ands	r3, r2
    5006:	3b08      	subs	r3, #8
    5008:	089b      	lsrs	r3, r3, #2
    500a:	4a08      	ldr	r2, [pc, #32]	; (502c <_ZN4Uart5writeEh+0x94>)
    500c:	009b      	lsls	r3, r3, #2
    500e:	189b      	adds	r3, r3, r2
    5010:	681b      	ldr	r3, [r3, #0]
    5012:	e7e3      	b.n	4fdc <_ZN4Uart5writeEh+0x44>
    txBuffer.store_char(data);
    5014:	0028      	movs	r0, r5
    5016:	0031      	movs	r1, r6
    5018:	f002 fbdf 	bl	77da <_ZN10RingBuffer10store_charEh>
    sercom->enableDataRegisterEmptyInterruptUART();
    501c:	6920      	ldr	r0, [r4, #16]
    501e:	f7ff fe5c 	bl	4cda <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    5022:	2001      	movs	r0, #1
    5024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5026:	46c0      	nop			; (mov r8, r8)
    5028:	e000e100 	.word	0xe000e100
    502c:	e000ed1c 	.word	0xe000ed1c

00005030 <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    5030:	20f0      	movs	r0, #240	; 0xf0
    5032:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    5034:	3930      	subs	r1, #48	; 0x30
    5036:	4248      	negs	r0, r1
    5038:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    503a:	4770      	bx	lr

0000503c <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    503c:	23f0      	movs	r3, #240	; 0xf0
    503e:	011b      	lsls	r3, r3, #4
    5040:	4019      	ands	r1, r3
    5042:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    5044:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    5046:	009b      	lsls	r3, r3, #2
    5048:	4299      	cmp	r1, r3
    504a:	d00a      	beq.n	5062 <_ZN4Uart15extractCharSizeEt+0x26>
    504c:	3301      	adds	r3, #1
    504e:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    5050:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    5052:	4299      	cmp	r1, r3
    5054:	d005      	beq.n	5062 <_ZN4Uart15extractCharSizeEt+0x26>
    5056:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    5058:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    505a:	005b      	lsls	r3, r3, #1
    505c:	4299      	cmp	r1, r3
    505e:	d000      	beq.n	5062 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    5060:	2000      	movs	r0, #0

  }
}
    5062:	4770      	bx	lr

00005064 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    5064:	200f      	movs	r0, #15
    5066:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    5068:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    506a:	2901      	cmp	r1, #1
    506c:	d003      	beq.n	5076 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    506e:	3902      	subs	r1, #2
    5070:	1e48      	subs	r0, r1, #1
    5072:	4181      	sbcs	r1, r0
    5074:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    5076:	4770      	bx	lr

00005078 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5078:	0003      	movs	r3, r0
{
    507a:	b5f0      	push	{r4, r5, r6, r7, lr}
    507c:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    507e:	33a4      	adds	r3, #164	; 0xa4
{
    5080:	b085      	sub	sp, #20
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5082:	7818      	ldrb	r0, [r3, #0]
{
    5084:	000f      	movs	r7, r1
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5086:	210e      	movs	r1, #14
{
    5088:	0015      	movs	r5, r2
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    508a:	f7fe fd8b 	bl	3ba4 <pinPeripheral>
  pinPeripheral(uc_pinTX, PIO_SERCOM);
    508e:	0023      	movs	r3, r4
    5090:	33a5      	adds	r3, #165	; 0xa5
    5092:	7818      	ldrb	r0, [r3, #0]
    5094:	210e      	movs	r1, #14
    5096:	f7fe fd85 	bl	3ba4 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    509a:	0023      	movs	r3, r4
    509c:	33a7      	adds	r3, #167	; 0xa7
    509e:	9303      	str	r3, [sp, #12]
    50a0:	781b      	ldrb	r3, [r3, #0]
    50a2:	2b02      	cmp	r3, #2
    50a4:	d107      	bne.n	50b6 <_ZN4Uart5beginEmt+0x3e>
    if (uc_pinCTS != NO_CTS_PIN) {
    50a6:	0023      	movs	r3, r4
    50a8:	33b8      	adds	r3, #184	; 0xb8
    50aa:	7818      	ldrb	r0, [r3, #0]
    50ac:	28ff      	cmp	r0, #255	; 0xff
    50ae:	d002      	beq.n	50b6 <_ZN4Uart5beginEmt+0x3e>
      pinPeripheral(uc_pinCTS, PIO_SERCOM);
    50b0:	210e      	movs	r1, #14
    50b2:	f7fe fd77 	bl	3ba4 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    50b6:	0026      	movs	r6, r4
    50b8:	36a8      	adds	r6, #168	; 0xa8
    50ba:	7830      	ldrb	r0, [r6, #0]
    50bc:	28ff      	cmp	r0, #255	; 0xff
    50be:	d01a      	beq.n	50f6 <_ZN4Uart5beginEmt+0x7e>
    pinMode(uc_pinRTS, OUTPUT);
    50c0:	2101      	movs	r1, #1
    50c2:	f7fe fd01 	bl	3ac8 <pinMode>
    uint8_t rtsPort = GetPort(uc_pinRTS);
    50c6:	210c      	movs	r1, #12
    50c8:	7833      	ldrb	r3, [r6, #0]
    50ca:	4a1f      	ldr	r2, [pc, #124]	; (5148 <_ZN4Uart5beginEmt+0xd0>)
    50cc:	4359      	muls	r1, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    50ce:	0020      	movs	r0, r4
    50d0:	5c8b      	ldrb	r3, [r1, r2]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    50d2:	1852      	adds	r2, r2, r1
    50d4:	7851      	ldrb	r1, [r2, #1]
    50d6:	2201      	movs	r2, #1
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    50d8:	4e1c      	ldr	r6, [pc, #112]	; (514c <_ZN4Uart5beginEmt+0xd4>)
    50da:	01db      	lsls	r3, r3, #7
    50dc:	30ac      	adds	r0, #172	; 0xac
    50de:	199e      	adds	r6, r3, r6
    50e0:	6006      	str	r6, [r0, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    50e2:	481b      	ldr	r0, [pc, #108]	; (5150 <_ZN4Uart5beginEmt+0xd8>)
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    50e4:	408a      	lsls	r2, r1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    50e6:	181b      	adds	r3, r3, r0
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    50e8:	0021      	movs	r1, r4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    50ea:	0020      	movs	r0, r4
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    50ec:	31b4      	adds	r1, #180	; 0xb4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    50ee:	30b0      	adds	r0, #176	; 0xb0
    50f0:	6003      	str	r3, [r0, #0]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    50f2:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
    50f4:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    50f6:	2201      	movs	r2, #1
    50f8:	003b      	movs	r3, r7
    50fa:	0011      	movs	r1, r2
    50fc:	6920      	ldr	r0, [r4, #16]
    50fe:	f7ff fe51 	bl	4da4 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    5102:	0029      	movs	r1, r5
    5104:	0020      	movs	r0, r4
    5106:	f7ff ff99 	bl	503c <_ZN4Uart15extractCharSizeEt>
    510a:	0029      	movs	r1, r5
    510c:	0006      	movs	r6, r0
    510e:	0020      	movs	r0, r4
    5110:	f7ff ffa8 	bl	5064 <_ZN4Uart13extractParityEt>
    5114:	0029      	movs	r1, r5
    5116:	0007      	movs	r7, r0
    5118:	0020      	movs	r0, r4
    511a:	f7ff ff89 	bl	5030 <_ZN4Uart16extractNbStopBitEt>
    511e:	003b      	movs	r3, r7
    5120:	9000      	str	r0, [sp, #0]
    5122:	0031      	movs	r1, r6
    5124:	6920      	ldr	r0, [r4, #16]
    5126:	2201      	movs	r2, #1
    5128:	f7ff fd69 	bl	4bfe <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    512c:	0023      	movs	r3, r4
    512e:	33a6      	adds	r3, #166	; 0xa6
    5130:	781a      	ldrb	r2, [r3, #0]
    5132:	9b03      	ldr	r3, [sp, #12]
    5134:	6920      	ldr	r0, [r4, #16]
    5136:	7819      	ldrb	r1, [r3, #0]
    5138:	f7ff fd7b 	bl	4c32 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    513c:	6920      	ldr	r0, [r4, #16]
    513e:	f7ff fd96 	bl	4c6e <_ZN6SERCOM10enableUARTEv>
}
    5142:	b005      	add	sp, #20
    5144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5146:	46c0      	nop			; (mov r8, r8)
    5148:	0000fc5c 	.word	0x0000fc5c
    514c:	40002818 	.word	0x40002818
    5150:	40002814 	.word	0x40002814

00005154 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    5154:	203f      	movs	r0, #63	; 0x3f
    5156:	4770      	bx	lr

00005158 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    5158:	b513      	push	{r0, r1, r4, lr}
    515a:	466b      	mov	r3, sp
	return write(&c, 1);
    515c:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    515e:	71d9      	strb	r1, [r3, #7]
    5160:	3307      	adds	r3, #7
	return write(&c, 1);
    5162:	6854      	ldr	r4, [r2, #4]
    5164:	0019      	movs	r1, r3
    5166:	2201      	movs	r2, #1
    5168:	47a0      	blx	r4
}
    516a:	bd16      	pop	{r1, r2, r4, pc}

0000516c <_ZN7Serial_9availableEv>:
{
    516c:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    516e:	2102      	movs	r1, #2
    5170:	6900      	ldr	r0, [r0, #16]
    5172:	f7fd ff35 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
}
    5176:	bd10      	pop	{r4, pc}

00005178 <_ZN7Serial_5flushEv>:
{
    5178:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    517a:	2103      	movs	r1, #3
    517c:	6900      	ldr	r0, [r0, #16]
    517e:	f7fd ff45 	bl	300c <_ZN14USBDeviceClass5flushEm>
}
    5182:	bd10      	pop	{r4, pc}

00005184 <_ZN7Serial_5writeEPKhj>:
{
    5184:	b510      	push	{r4, lr}
    5186:	0013      	movs	r3, r2
    5188:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    518a:	000a      	movs	r2, r1
    518c:	6900      	ldr	r0, [r0, #16]
    518e:	2103      	movs	r1, #3
    5190:	f7fe f836 	bl	3200 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    5194:	2800      	cmp	r0, #0
    5196:	d101      	bne.n	519c <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    5198:	2301      	movs	r3, #1
    519a:	6063      	str	r3, [r4, #4]
}
    519c:	bd10      	pop	{r4, pc}
	...

000051a0 <_ZN7Serial_4peekEv>:
{
    51a0:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    51a2:	4c05      	ldr	r4, [pc, #20]	; (51b8 <_ZN7Serial_4peekEv+0x18>)
    51a4:	6823      	ldr	r3, [r4, #0]
    51a6:	1c5a      	adds	r2, r3, #1
    51a8:	d104      	bne.n	51b4 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    51aa:	6803      	ldr	r3, [r0, #0]
    51ac:	695b      	ldr	r3, [r3, #20]
    51ae:	4798      	blx	r3
    51b0:	0003      	movs	r3, r0
    51b2:	6020      	str	r0, [r4, #0]
}
    51b4:	0018      	movs	r0, r3
    51b6:	bd10      	pop	{r4, pc}
    51b8:	20000098 	.word	0x20000098

000051bc <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    51bc:	4b07      	ldr	r3, [pc, #28]	; (51dc <_ZN7Serial_4readEv+0x20>)
{
    51be:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    51c0:	6818      	ldr	r0, [r3, #0]
{
    51c2:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    51c4:	1c41      	adds	r1, r0, #1
    51c6:	d003      	beq.n	51d0 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    51c8:	2201      	movs	r2, #1
    51ca:	4252      	negs	r2, r2
    51cc:	601a      	str	r2, [r3, #0]
}
    51ce:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    51d0:	2102      	movs	r1, #2
    51d2:	6910      	ldr	r0, [r2, #16]
    51d4:	f7fe f806 	bl	31e4 <_ZN14USBDeviceClass4recvEm>
    51d8:	e7f9      	b.n	51ce <_ZN7Serial_4readEv+0x12>
    51da:	46c0      	nop			; (mov r8, r8)
    51dc:	20000098 	.word	0x20000098

000051e0 <_Z16CDC_GetInterfacePh>:
{
    51e0:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    51e2:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    51e4:	223a      	movs	r2, #58	; 0x3a
	interfaceNum[0] += 2;	// uses 2
    51e6:	3302      	adds	r3, #2
    51e8:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    51ea:	4902      	ldr	r1, [pc, #8]	; (51f4 <_Z16CDC_GetInterfacePh+0x14>)
    51ec:	4802      	ldr	r0, [pc, #8]	; (51f8 <_Z16CDC_GetInterfacePh+0x18>)
    51ee:	f7fe f8b3 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    51f2:	bd10      	pop	{r4, pc}
    51f4:	2000005c 	.word	0x2000005c
    51f8:	2000036c 	.word	0x2000036c

000051fc <_Z9CDC_SetupR8USBSetup>:
{
    51fc:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    51fe:	7801      	ldrb	r1, [r0, #0]
{
    5200:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    5202:	7842      	ldrb	r2, [r0, #1]
	return false;
    5204:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    5206:	29a1      	cmp	r1, #161	; 0xa1
    5208:	d108      	bne.n	521c <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    520a:	2a21      	cmp	r2, #33	; 0x21
    520c:	d105      	bne.n	521a <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    520e:	3a1a      	subs	r2, #26
    5210:	4916      	ldr	r1, [pc, #88]	; (526c <_Z9CDC_SetupR8USBSetup+0x70>)
    5212:	4817      	ldr	r0, [pc, #92]	; (5270 <_Z9CDC_SetupR8USBSetup+0x74>)
    5214:	f7fe f8a0 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    5218:	2001      	movs	r0, #1
}
    521a:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    521c:	2921      	cmp	r1, #33	; 0x21
    521e:	d1fc      	bne.n	521a <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    5220:	2a20      	cmp	r2, #32
    5222:	d111      	bne.n	5248 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    5224:	3a19      	subs	r2, #25
    5226:	4911      	ldr	r1, [pc, #68]	; (526c <_Z9CDC_SetupR8USBSetup+0x70>)
    5228:	4811      	ldr	r0, [pc, #68]	; (5270 <_Z9CDC_SetupR8USBSetup+0x74>)
    522a:	f7fd ff33 	bl	3094 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    522e:	2296      	movs	r2, #150	; 0x96
    5230:	4b0e      	ldr	r3, [pc, #56]	; (526c <_Z9CDC_SetupR8USBSetup+0x70>)
    5232:	00d2      	lsls	r2, r2, #3
    5234:	6819      	ldr	r1, [r3, #0]
    5236:	4291      	cmp	r1, r2
    5238:	d103      	bne.n	5242 <_Z9CDC_SetupR8USBSetup+0x46>
    523a:	2401      	movs	r4, #1
    523c:	79d8      	ldrb	r0, [r3, #7]
    523e:	4004      	ands	r4, r0
    5240:	d00e      	beq.n	5260 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    5242:	f7fd faa9 	bl	2798 <cancelReset>
    5246:	e00e      	b.n	5266 <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    5248:	2a22      	cmp	r2, #34	; 0x22
    524a:	d103      	bne.n	5254 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    524c:	789a      	ldrb	r2, [r3, #2]
    524e:	4b07      	ldr	r3, [pc, #28]	; (526c <_Z9CDC_SetupR8USBSetup+0x70>)
    5250:	71da      	strb	r2, [r3, #7]
    5252:	e7ec      	b.n	522e <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    5254:	2a23      	cmp	r2, #35	; 0x23
    5256:	d1e0      	bne.n	521a <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    5258:	885a      	ldrh	r2, [r3, #2]
    525a:	4b06      	ldr	r3, [pc, #24]	; (5274 <_Z9CDC_SetupR8USBSetup+0x78>)
    525c:	601a      	str	r2, [r3, #0]
			return false;
    525e:	e7dc      	b.n	521a <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    5260:	20fa      	movs	r0, #250	; 0xfa
    5262:	f7fd fa93 	bl	278c <initiateReset>
			return false;
    5266:	2000      	movs	r0, #0
    5268:	e7d7      	b.n	521a <_Z9CDC_SetupR8USBSetup+0x1e>
    526a:	46c0      	nop			; (mov r8, r8)
    526c:	20000054 	.word	0x20000054
    5270:	2000036c 	.word	0x2000036c
    5274:	20000050 	.word	0x20000050

00005278 <_ZN7Serial_5beginEm>:
}
    5278:	4770      	bx	lr
	...

0000527c <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
    527c:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    527e:	f7fd f9f1 	bl	2664 <millis>
    5282:	23f4      	movs	r3, #244	; 0xf4
    5284:	33ff      	adds	r3, #255	; 0xff
		return false;
    5286:	2400      	movs	r4, #0
	if (millis() < 500)
    5288:	4298      	cmp	r0, r3
    528a:	d907      	bls.n	529c <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    528c:	4b04      	ldr	r3, [pc, #16]	; (52a0 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
    528e:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
    5290:	79dc      	ldrb	r4, [r3, #7]
    5292:	1e63      	subs	r3, r4, #1
    5294:	419c      	sbcs	r4, r3
    5296:	b2e4      	uxtb	r4, r4
	delay(10);
    5298:	f7fd fa1a 	bl	26d0 <delay>
	return result;
}
    529c:	0020      	movs	r0, r4
    529e:	bd10      	pop	{r4, pc}
    52a0:	20000054 	.word	0x20000054

000052a4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    52a4:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    52a6:	2100      	movs	r1, #0
    52a8:	4b05      	ldr	r3, [pc, #20]	; (52c0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    52aa:	0092      	lsls	r2, r2, #2
    52ac:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    52ae:	4a05      	ldr	r2, [pc, #20]	; (52c4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    52b0:	6059      	str	r1, [r3, #4]
    52b2:	3208      	adds	r2, #8
    52b4:	601a      	str	r2, [r3, #0]
    52b6:	4a04      	ldr	r2, [pc, #16]	; (52c8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    52b8:	7619      	strb	r1, [r3, #24]
    52ba:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    52bc:	4770      	bx	lr
    52be:	46c0      	nop			; (mov r8, r8)
    52c0:	20001148 	.word	0x20001148
    52c4:	0000fe44 	.word	0x0000fe44
    52c8:	2000036c 	.word	0x2000036c

000052cc <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    52cc:	b570      	push	{r4, r5, r6, lr}
    52ce:	000e      	movs	r6, r1
	int sent = 0;
    52d0:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    52d2:	6844      	ldr	r4, [r0, #4]
    52d4:	2c00      	cmp	r4, #0
    52d6:	d00b      	beq.n	52f0 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    52d8:	6823      	ldr	r3, [r4, #0]
    52da:	0031      	movs	r1, r6
    52dc:	685b      	ldr	r3, [r3, #4]
    52de:	0020      	movs	r0, r4
    52e0:	4798      	blx	r3
		if (res < 0)
    52e2:	2800      	cmp	r0, #0
    52e4:	db02      	blt.n	52ec <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    52e6:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    52e8:	68e4      	ldr	r4, [r4, #12]
    52ea:	e7f3      	b.n	52d4 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    52ec:	2501      	movs	r5, #1
    52ee:	426d      	negs	r5, r5
	}
	return sent;
}
    52f0:	0028      	movs	r0, r5
    52f2:	bd70      	pop	{r4, r5, r6, pc}

000052f4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    52f4:	b570      	push	{r4, r5, r6, lr}
    52f6:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    52f8:	6844      	ldr	r4, [r0, #4]
    52fa:	2c00      	cmp	r4, #0
    52fc:	d008      	beq.n	5310 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    52fe:	6823      	ldr	r3, [r4, #0]
    5300:	0029      	movs	r1, r5
    5302:	689b      	ldr	r3, [r3, #8]
    5304:	0020      	movs	r0, r4
    5306:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    5308:	2800      	cmp	r0, #0
    530a:	d102      	bne.n	5312 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    530c:	68e4      	ldr	r4, [r4, #12]
    530e:	e7f4      	b.n	52fa <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    5310:	0020      	movs	r0, r4
}
    5312:	bd70      	pop	{r4, r5, r6, pc}

00005314 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    5314:	b570      	push	{r4, r5, r6, lr}
    5316:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    5318:	6844      	ldr	r4, [r0, #4]
    531a:	2c00      	cmp	r4, #0
    531c:	d007      	beq.n	532e <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    531e:	6823      	ldr	r3, [r4, #0]
    5320:	0029      	movs	r1, r5
    5322:	0020      	movs	r0, r4
    5324:	68db      	ldr	r3, [r3, #12]
    5326:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    5328:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    532a:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    532c:	e7f5      	b.n	531a <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    532e:	702c      	strb	r4, [r5, #0]
}
    5330:	bd70      	pop	{r4, r5, r6, pc}

00005332 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    5332:	b570      	push	{r4, r5, r6, lr}
    5334:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5336:	6844      	ldr	r4, [r0, #4]
    5338:	2c00      	cmp	r4, #0
    533a:	d008      	beq.n	534e <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    533c:	6823      	ldr	r3, [r4, #0]
    533e:	0029      	movs	r1, r5
    5340:	681b      	ldr	r3, [r3, #0]
    5342:	0020      	movs	r0, r4
    5344:	4798      	blx	r3
    5346:	2800      	cmp	r0, #0
    5348:	d102      	bne.n	5350 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    534a:	68e4      	ldr	r4, [r4, #12]
    534c:	e7f4      	b.n	5338 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    534e:	0020      	movs	r0, r4
}
    5350:	bd70      	pop	{r4, r5, r6, pc}
	...

00005354 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    5354:	2101      	movs	r1, #1
    5356:	4a06      	ldr	r2, [pc, #24]	; (5370 <_Z12PluggableUSBv+0x1c>)
{
    5358:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    535a:	6813      	ldr	r3, [r2, #0]
    535c:	4805      	ldr	r0, [pc, #20]	; (5374 <_Z12PluggableUSBv+0x20>)
    535e:	400b      	ands	r3, r1
    5360:	d105      	bne.n	536e <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    5362:	2402      	movs	r4, #2
    5364:	7004      	strb	r4, [r0, #0]
    5366:	1924      	adds	r4, r4, r4
    5368:	7044      	strb	r4, [r0, #1]
    536a:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    536c:	6011      	str	r1, [r2, #0]
}
    536e:	bd10      	pop	{r4, pc}
    5370:	20001164 	.word	0x20001164
    5374:	20001168 	.word	0x20001168

00005378 <_ZN3DHTC1Ehhh>:
  _type = type;
  #ifdef __AVR
    _bit = digitalPinToBitMask(pin);
    _port = digitalPinToPort(pin);
  #endif
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    5378:	4b07      	ldr	r3, [pc, #28]	; (5398 <_ZN3DHTC1Ehhh+0x20>)
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
    537a:	b510      	push	{r4, lr}
    537c:	0004      	movs	r4, r0
  _pin = pin;
    537e:	7141      	strb	r1, [r0, #5]
  _type = type;
    5380:	7182      	strb	r2, [r0, #6]
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    5382:	4906      	ldr	r1, [pc, #24]	; (539c <_ZN3DHTC1Ehhh+0x24>)
    5384:	6818      	ldr	r0, [r3, #0]
    5386:	f003 f8e1 	bl	854c <__udivsi3>
    538a:	23fa      	movs	r3, #250	; 0xfa
    538c:	009b      	lsls	r3, r3, #2
    538e:	4358      	muls	r0, r3
    5390:	60e0      	str	r0, [r4, #12]
                                                 // reading pulses from DHT sensor.
  // Note that count is now ignored as the DHT reading algorithm adjusts itself
  // basd on the speed of the processor.
}
    5392:	0020      	movs	r0, r4
    5394:	bd10      	pop	{r4, pc}
    5396:	46c0      	nop			; (mov r8, r8)
    5398:	20000038 	.word	0x20000038
    539c:	000f4240 	.word	0x000f4240

000053a0 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
    53a0:	b510      	push	{r4, lr}
    53a2:	0004      	movs	r4, r0
  // set up the pins!
  pinMode(_pin, INPUT_PULLUP);
    53a4:	2102      	movs	r1, #2
    53a6:	7940      	ldrb	r0, [r0, #5]
    53a8:	f7fe fb8e 	bl	3ac8 <pinMode>
  // Using this value makes sure that millis() - lastreadtime will be
  // >= MIN_INTERVAL right away. Note that this assignment wraps around,
  // but so will the subtraction.
  _lastreadtime = -MIN_INTERVAL;
    53ac:	4b01      	ldr	r3, [pc, #4]	; (53b4 <_ZN3DHT5beginEv+0x14>)
    53ae:	60a3      	str	r3, [r4, #8]
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}
    53b0:	bd10      	pop	{r4, pc}
    53b2:	46c0      	nop			; (mov r8, r8)
    53b4:	fffff830 	.word	0xfffff830

000053b8 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    53b8:	b570      	push	{r4, r5, r6, lr}
    53ba:	0005      	movs	r5, r0
    53bc:	000e      	movs	r6, r1
  uint32_t count = 0;
    53be:	2400      	movs	r4, #0
      }
    }
  // Otherwise fall back to using digitalRead (this seems to be necessary on ESP8266
  // right now, perhaps bugs in direct port access functions?).
  #else
    while (digitalRead(_pin) == level) {
    53c0:	7968      	ldrb	r0, [r5, #5]
    53c2:	f7fe fbd9 	bl	3b78 <digitalRead>
    53c6:	42b0      	cmp	r0, r6
    53c8:	d104      	bne.n	53d4 <_ZN3DHT11expectPulseEb+0x1c>
      if (count++ >= _maxcycles) {
    53ca:	68ea      	ldr	r2, [r5, #12]
    53cc:	1c63      	adds	r3, r4, #1
    53ce:	4294      	cmp	r4, r2
    53d0:	d302      	bcc.n	53d8 <_ZN3DHT11expectPulseEb+0x20>
        return 0; // Exceeded timeout, fail.
    53d2:	2400      	movs	r4, #0
      }
    }
  #endif

  return count;
}
    53d4:	0020      	movs	r0, r4
    53d6:	bd70      	pop	{r4, r5, r6, pc}
      if (count++ >= _maxcycles) {
    53d8:	001c      	movs	r4, r3
    53da:	e7f1      	b.n	53c0 <_ZN3DHT11expectPulseEb+0x8>

000053dc <_ZN3DHT4readEb>:
boolean DHT::read(bool force) {
    53dc:	b570      	push	{r4, r5, r6, lr}
    53de:	b0d0      	sub	sp, #320	; 0x140
    53e0:	000d      	movs	r5, r1
    53e2:	0004      	movs	r4, r0
  uint32_t currenttime = millis();
    53e4:	f7fd f93e 	bl	2664 <millis>
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
    53e8:	2d00      	cmp	r5, #0
    53ea:	d107      	bne.n	53fc <_ZN3DHT4readEb+0x20>
    53ec:	68a3      	ldr	r3, [r4, #8]
    53ee:	4a3d      	ldr	r2, [pc, #244]	; (54e4 <_ZN3DHT4readEb+0x108>)
    53f0:	1ac3      	subs	r3, r0, r3
    53f2:	4293      	cmp	r3, r2
    53f4:	d802      	bhi.n	53fc <_ZN3DHT4readEb+0x20>
    return _lastresult; // return last correct measurement
    53f6:	7c20      	ldrb	r0, [r4, #16]
}
    53f8:	b050      	add	sp, #320	; 0x140
    53fa:	bd70      	pop	{r4, r5, r6, pc}
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    53fc:	2500      	movs	r5, #0
  _lastreadtime = currenttime;
    53fe:	60a0      	str	r0, [r4, #8]
  digitalWrite(_pin, HIGH);
    5400:	2101      	movs	r1, #1
    5402:	7960      	ldrb	r0, [r4, #5]
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    5404:	7125      	strb	r5, [r4, #4]
    5406:	70e5      	strb	r5, [r4, #3]
    5408:	70a5      	strb	r5, [r4, #2]
    540a:	7065      	strb	r5, [r4, #1]
    540c:	7025      	strb	r5, [r4, #0]
  digitalWrite(_pin, HIGH);
    540e:	f7fe fb5f 	bl	3ad0 <digitalWrite>
  delay(250);
    5412:	20fa      	movs	r0, #250	; 0xfa
    5414:	f7fd f95c 	bl	26d0 <delay>
  pinMode(_pin, OUTPUT);
    5418:	7960      	ldrb	r0, [r4, #5]
    541a:	2101      	movs	r1, #1
    541c:	f7fe fb54 	bl	3ac8 <pinMode>
  digitalWrite(_pin, LOW);
    5420:	7960      	ldrb	r0, [r4, #5]
    5422:	0029      	movs	r1, r5
    5424:	f7fe fb54 	bl	3ad0 <digitalWrite>
  delay(20);
    5428:	2014      	movs	r0, #20
    542a:	f7fd f951 	bl	26d0 <delay>
  __ASM volatile ("cpsid i" : : : "memory");
    542e:	b672      	cpsid	i
    digitalWrite(_pin, HIGH);
    5430:	2101      	movs	r1, #1
    5432:	7960      	ldrb	r0, [r4, #5]
    5434:	f7fe fb4c 	bl	3ad0 <digitalWrite>
    "   sub %0, #1   \n" // substract 1 from %0 (n)
    "   bne 1b       \n" // if result is not 0 jump to 1
    : "+r" (n)           // '%0' is n variable with RW constraints
    :                    // no input
    :                    // no clobber
  );
    5438:	23a0      	movs	r3, #160	; 0xa0
    543a:	009b      	lsls	r3, r3, #2
    543c:	3b01      	subs	r3, #1
    543e:	d1fd      	bne.n	543c <_ZN3DHT4readEb+0x60>
    pinMode(_pin, INPUT_PULLUP);
    5440:	2102      	movs	r1, #2
    5442:	7960      	ldrb	r0, [r4, #5]
    5444:	f7fe fb40 	bl	3ac8 <pinMode>
    5448:	23a0      	movs	r3, #160	; 0xa0
    544a:	3b01      	subs	r3, #1
    544c:	d1fd      	bne.n	544a <_ZN3DHT4readEb+0x6e>
    if (expectPulse(LOW) == 0) {
    544e:	0029      	movs	r1, r5
    5450:	0020      	movs	r0, r4
    5452:	f7ff ffb1 	bl	53b8 <_ZN3DHT11expectPulseEb>
    5456:	42a8      	cmp	r0, r5
    5458:	d103      	bne.n	5462 <_ZN3DHT4readEb+0x86>
      _lastresult = false;
    545a:	2000      	movs	r0, #0
    545c:	7420      	strb	r0, [r4, #16]
  __ASM volatile ("cpsie i" : : : "memory");
    545e:	b662      	cpsie	i
    5460:	e7ca      	b.n	53f8 <_ZN3DHT4readEb+0x1c>
    if (expectPulse(HIGH) == 0) {
    5462:	2101      	movs	r1, #1
    5464:	0020      	movs	r0, r4
    5466:	f7ff ffa7 	bl	53b8 <_ZN3DHT11expectPulseEb>
    546a:	2800      	cmp	r0, #0
    546c:	d0f5      	beq.n	545a <_ZN3DHT4readEb+0x7e>
    for (int i=0; i<80; i+=2) {
    546e:	26a0      	movs	r6, #160	; 0xa0
    5470:	0076      	lsls	r6, r6, #1
      cycles[i]   = expectPulse(LOW);
    5472:	2100      	movs	r1, #0
    5474:	0020      	movs	r0, r4
    5476:	f7ff ff9f 	bl	53b8 <_ZN3DHT11expectPulseEb>
    547a:	466b      	mov	r3, sp
      cycles[i+1] = expectPulse(HIGH);
    547c:	2101      	movs	r1, #1
      cycles[i]   = expectPulse(LOW);
    547e:	50e8      	str	r0, [r5, r3]
      cycles[i+1] = expectPulse(HIGH);
    5480:	0020      	movs	r0, r4
    5482:	f7ff ff99 	bl	53b8 <_ZN3DHT11expectPulseEb>
    5486:	002b      	movs	r3, r5
    5488:	3508      	adds	r5, #8
    548a:	446b      	add	r3, sp
    548c:	6058      	str	r0, [r3, #4]
    for (int i=0; i<80; i+=2) {
    548e:	42b5      	cmp	r5, r6
    5490:	d1ef      	bne.n	5472 <_ZN3DHT4readEb+0x96>
    5492:	b662      	cpsie	i
  for (int i=0; i<40; ++i) {
    5494:	2200      	movs	r2, #0
      data[i/8] |= 1;
    5496:	2101      	movs	r1, #1
    uint32_t lowCycles  = cycles[2*i];
    5498:	4668      	mov	r0, sp
    549a:	00d3      	lsls	r3, r2, #3
    549c:	58c0      	ldr	r0, [r0, r3]
    uint32_t highCycles = cycles[2*i+1];
    549e:	446b      	add	r3, sp
    54a0:	685e      	ldr	r6, [r3, #4]
    if ((lowCycles == 0) || (highCycles == 0)) {
    54a2:	2800      	cmp	r0, #0
    54a4:	d001      	beq.n	54aa <_ZN3DHT4readEb+0xce>
    54a6:	2e00      	cmp	r6, #0
    54a8:	d102      	bne.n	54b0 <_ZN3DHT4readEb+0xd4>
      _lastresult = false;
    54aa:	2000      	movs	r0, #0
    _lastresult = true;
    54ac:	7420      	strb	r0, [r4, #16]
    return _lastresult;
    54ae:	e7a3      	b.n	53f8 <_ZN3DHT4readEb+0x1c>
    data[i/8] <<= 1;
    54b0:	10d5      	asrs	r5, r2, #3
    54b2:	5d63      	ldrb	r3, [r4, r5]
    54b4:	005b      	lsls	r3, r3, #1
    54b6:	b2db      	uxtb	r3, r3
    if (highCycles > lowCycles) {
    54b8:	42b0      	cmp	r0, r6
    54ba:	d310      	bcc.n	54de <_ZN3DHT4readEb+0x102>
  for (int i=0; i<40; ++i) {
    54bc:	3201      	adds	r2, #1
      data[i/8] |= 1;
    54be:	5563      	strb	r3, [r4, r5]
  for (int i=0; i<40; ++i) {
    54c0:	2a28      	cmp	r2, #40	; 0x28
    54c2:	d1e9      	bne.n	5498 <_ZN3DHT4readEb+0xbc>
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    54c4:	7861      	ldrb	r1, [r4, #1]
    54c6:	7823      	ldrb	r3, [r4, #0]
    54c8:	7922      	ldrb	r2, [r4, #4]
    54ca:	185b      	adds	r3, r3, r1
    54cc:	78a1      	ldrb	r1, [r4, #2]
    54ce:	185b      	adds	r3, r3, r1
    54d0:	78e1      	ldrb	r1, [r4, #3]
    54d2:	185b      	adds	r3, r3, r1
    54d4:	b2db      	uxtb	r3, r3
    54d6:	429a      	cmp	r2, r3
    54d8:	d1e7      	bne.n	54aa <_ZN3DHT4readEb+0xce>
    _lastresult = true;
    54da:	2001      	movs	r0, #1
    54dc:	e7e6      	b.n	54ac <_ZN3DHT4readEb+0xd0>
      data[i/8] |= 1;
    54de:	430b      	orrs	r3, r1
    54e0:	e7ec      	b.n	54bc <_ZN3DHT4readEb+0xe0>
    54e2:	46c0      	nop			; (mov r8, r8)
    54e4:	000007cf 	.word	0x000007cf

000054e8 <_ZN3DHT15readTemperatureEbb>:
float DHT::readTemperature(bool S, bool force) {
    54e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54ea:	000d      	movs	r5, r1
  if (read(force)) {
    54ec:	0011      	movs	r1, r2
float DHT::readTemperature(bool S, bool force) {
    54ee:	0004      	movs	r4, r0
  if (read(force)) {
    54f0:	f7ff ff74 	bl	53dc <_ZN3DHT4readEb>
    54f4:	2800      	cmp	r0, #0
    54f6:	d007      	beq.n	5508 <_ZN3DHT15readTemperatureEbb+0x20>
    switch (_type) {
    54f8:	79a3      	ldrb	r3, [r4, #6]
    54fa:	b2da      	uxtb	r2, r3
    54fc:	2a0b      	cmp	r2, #11
    54fe:	d005      	beq.n	550c <_ZN3DHT15readTemperatureEbb+0x24>
    5500:	d302      	bcc.n	5508 <_ZN3DHT15readTemperatureEbb+0x20>
    5502:	3b15      	subs	r3, #21
    5504:	2b01      	cmp	r3, #1
    5506:	d913      	bls.n	5530 <_ZN3DHT15readTemperatureEbb+0x48>
  float f = NAN;
    5508:	4819      	ldr	r0, [pc, #100]	; (5570 <_ZN3DHT15readTemperatureEbb+0x88>)
  return f;
    550a:	e010      	b.n	552e <_ZN3DHT15readTemperatureEbb+0x46>
      f = data[2];
    550c:	78a0      	ldrb	r0, [r4, #2]
    550e:	f004 f907 	bl	9720 <__aeabi_ui2f>
      if(S) {
    5512:	2d00      	cmp	r5, #0
    5514:	d00b      	beq.n	552e <_ZN3DHT15readTemperatureEbb+0x46>
  return c * 1.8 + 32;
    5516:	f005 fef1 	bl	b2fc <__aeabi_f2d>
    551a:	4a16      	ldr	r2, [pc, #88]	; (5574 <_ZN3DHT15readTemperatureEbb+0x8c>)
    551c:	4b16      	ldr	r3, [pc, #88]	; (5578 <_ZN3DHT15readTemperatureEbb+0x90>)
    551e:	f005 f889 	bl	a634 <__aeabi_dmul>
    5522:	2200      	movs	r2, #0
    5524:	4b15      	ldr	r3, [pc, #84]	; (557c <_ZN3DHT15readTemperatureEbb+0x94>)
    5526:	f004 f941 	bl	97ac <__aeabi_dadd>
    552a:	f005 ff39 	bl	b3a0 <__aeabi_d2f>
}
    552e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      f = data[2] & 0x7F;
    5530:	207f      	movs	r0, #127	; 0x7f
    5532:	78a6      	ldrb	r6, [r4, #2]
    5534:	4030      	ands	r0, r6
    5536:	f004 f8a3 	bl	9680 <__aeabi_i2f>
      f *= 256;
    553a:	2187      	movs	r1, #135	; 0x87
    553c:	05c9      	lsls	r1, r1, #23
    553e:	f003 fdab 	bl	9098 <__aeabi_fmul>
    5542:	1c07      	adds	r7, r0, #0
      f += data[3];
    5544:	78e0      	ldrb	r0, [r4, #3]
    5546:	f004 f89b 	bl	9680 <__aeabi_i2f>
    554a:	1c39      	adds	r1, r7, #0
    554c:	f003 fa22 	bl	8994 <__aeabi_fadd>
      f *= 0.1;
    5550:	f005 fed4 	bl	b2fc <__aeabi_f2d>
    5554:	4a0a      	ldr	r2, [pc, #40]	; (5580 <_ZN3DHT15readTemperatureEbb+0x98>)
    5556:	4b0b      	ldr	r3, [pc, #44]	; (5584 <_ZN3DHT15readTemperatureEbb+0x9c>)
    5558:	f005 f86c 	bl	a634 <__aeabi_dmul>
      if (data[2] & 0x80) {
    555c:	b276      	sxtb	r6, r6
      f *= 0.1;
    555e:	f005 ff1f 	bl	b3a0 <__aeabi_d2f>
      if (data[2] & 0x80) {
    5562:	2e00      	cmp	r6, #0
    5564:	dad5      	bge.n	5512 <_ZN3DHT15readTemperatureEbb+0x2a>
        f *= -1;
    5566:	2380      	movs	r3, #128	; 0x80
    5568:	061b      	lsls	r3, r3, #24
    556a:	18c0      	adds	r0, r0, r3
    556c:	e7d1      	b.n	5512 <_ZN3DHT15readTemperatureEbb+0x2a>
    556e:	46c0      	nop			; (mov r8, r8)
    5570:	7fc00000 	.word	0x7fc00000
    5574:	cccccccd 	.word	0xcccccccd
    5578:	3ffccccc 	.word	0x3ffccccc
    557c:	40400000 	.word	0x40400000
    5580:	9999999a 	.word	0x9999999a
    5584:	3fb99999 	.word	0x3fb99999

00005588 <_ZN3DHT12readHumidityEb>:
float DHT::readHumidity(bool force) {
    5588:	b570      	push	{r4, r5, r6, lr}
  if (read()) {
    558a:	2100      	movs	r1, #0
float DHT::readHumidity(bool force) {
    558c:	0004      	movs	r4, r0
  if (read()) {
    558e:	f7ff ff25 	bl	53dc <_ZN3DHT4readEb>
    5592:	2800      	cmp	r0, #0
    5594:	d007      	beq.n	55a6 <_ZN3DHT12readHumidityEb+0x1e>
    switch (_type) {
    5596:	79a3      	ldrb	r3, [r4, #6]
    5598:	b2da      	uxtb	r2, r3
    559a:	2a0b      	cmp	r2, #11
    559c:	d005      	beq.n	55aa <_ZN3DHT12readHumidityEb+0x22>
    559e:	d302      	bcc.n	55a6 <_ZN3DHT12readHumidityEb+0x1e>
    55a0:	3b15      	subs	r3, #21
    55a2:	2b01      	cmp	r3, #1
    55a4:	d905      	bls.n	55b2 <_ZN3DHT12readHumidityEb+0x2a>
  float f = NAN;
    55a6:	480e      	ldr	r0, [pc, #56]	; (55e0 <_ZN3DHT12readHumidityEb+0x58>)
  return f;
    55a8:	e002      	b.n	55b0 <_ZN3DHT12readHumidityEb+0x28>
      f = data[0];
    55aa:	7820      	ldrb	r0, [r4, #0]
    55ac:	f004 f8b8 	bl	9720 <__aeabi_ui2f>
}
    55b0:	bd70      	pop	{r4, r5, r6, pc}
      f = data[0];
    55b2:	7820      	ldrb	r0, [r4, #0]
    55b4:	f004 f8b4 	bl	9720 <__aeabi_ui2f>
      f *= 256;
    55b8:	2187      	movs	r1, #135	; 0x87
    55ba:	05c9      	lsls	r1, r1, #23
    55bc:	f003 fd6c 	bl	9098 <__aeabi_fmul>
    55c0:	1c05      	adds	r5, r0, #0
      f += data[1];
    55c2:	7860      	ldrb	r0, [r4, #1]
    55c4:	f004 f85c 	bl	9680 <__aeabi_i2f>
    55c8:	1c29      	adds	r1, r5, #0
    55ca:	f003 f9e3 	bl	8994 <__aeabi_fadd>
      f *= 0.1;
    55ce:	f005 fe95 	bl	b2fc <__aeabi_f2d>
    55d2:	4a04      	ldr	r2, [pc, #16]	; (55e4 <_ZN3DHT12readHumidityEb+0x5c>)
    55d4:	4b04      	ldr	r3, [pc, #16]	; (55e8 <_ZN3DHT12readHumidityEb+0x60>)
    55d6:	f005 f82d 	bl	a634 <__aeabi_dmul>
    55da:	f005 fee1 	bl	b3a0 <__aeabi_d2f>
      break;
    55de:	e7e7      	b.n	55b0 <_ZN3DHT12readHumidityEb+0x28>
    55e0:	7fc00000 	.word	0x7fc00000
    55e4:	9999999a 	.word	0x9999999a
    55e8:	3fb99999 	.word	0x3fb99999

000055ec <_ZN13FilterOnePole12setFrequencyEf>:
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
    55ec:	b510      	push	{r4, lr}
    55ee:	0004      	movs	r4, r0
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    55f0:	1c08      	adds	r0, r1, #0
    55f2:	f005 fe83 	bl	b2fc <__aeabi_f2d>
    55f6:	4a08      	ldr	r2, [pc, #32]	; (5618 <_ZN13FilterOnePole12setFrequencyEf+0x2c>)
    55f8:	4b08      	ldr	r3, [pc, #32]	; (561c <_ZN13FilterOnePole12setFrequencyEf+0x30>)
    55fa:	f005 f81b 	bl	a634 <__aeabi_dmul>
    55fe:	0002      	movs	r2, r0
    5600:	000b      	movs	r3, r1
    5602:	2000      	movs	r0, #0
    5604:	4906      	ldr	r1, [pc, #24]	; (5620 <_ZN13FilterOnePole12setFrequencyEf+0x34>)
    5606:	f004 fbe1 	bl	9dcc <__aeabi_ddiv>
    560a:	f005 fec9 	bl	b3a0 <__aeabi_d2f>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    560e:	4905      	ldr	r1, [pc, #20]	; (5624 <_ZN13FilterOnePole12setFrequencyEf+0x38>)
    5610:	f003 fd42 	bl	9098 <__aeabi_fmul>
    5614:	6060      	str	r0, [r4, #4]
}
    5616:	bd10      	pop	{r4, pc}
    5618:	54442d18 	.word	0x54442d18
    561c:	401921fb 	.word	0x401921fb
    5620:	3ff00000 	.word	0x3ff00000
    5624:	49742400 	.word	0x49742400

00005628 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>:
void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
    5628:	b570      	push	{r4, r5, r6, lr}
    562a:	0004      	movs	r4, r0
    562c:	1c1d      	adds	r5, r3, #0
  FT = ft;
    562e:	7001      	strb	r1, [r0, #0]
  setFrequency( fc );
    5630:	1c11      	adds	r1, r2, #0
    5632:	f7ff ffdb 	bl	55ec <_ZN13FilterOnePole12setFrequencyEf>
  Y = initialValue;
    5636:	60e5      	str	r5, [r4, #12]
  Ylast = initialValue;
    5638:	6125      	str	r5, [r4, #16]
  X = initialValue;
    563a:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    563c:	f7fd f818 	bl	2670 <micros>
    5640:	61e0      	str	r0, [r4, #28]
}
    5642:	bd70      	pop	{r4, r5, r6, pc}

00005644 <_ZN13FilterOnePole6outputEv>:
}

float FilterOnePole::output() {
    5644:	b5d0      	push	{r4, r6, r7, lr}
    5646:	0004      	movs	r4, r0
    // figure out which button to read
  switch (FT) {
    5648:	7800      	ldrb	r0, [r0, #0]
    564a:	2803      	cmp	r0, #3
    564c:	d835      	bhi.n	56ba <_ZN13FilterOnePole6outputEv+0x76>
    564e:	f002 ff73 	bl	8538 <__gnu_thumb1_case_uqi>
    5652:	0219      	.short	0x0219
    5654:	1e04      	.short	0x1e04
    case LOWPASS:         
      // return the last value
      return Y; 
    5656:	68e0      	ldr	r0, [r4, #12]
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    5658:	bdd0      	pop	{r4, r6, r7, pc}
      return Y * (TauUS/1.0e6);
    565a:	6860      	ldr	r0, [r4, #4]
    565c:	f005 fe4e 	bl	b2fc <__aeabi_f2d>
    5660:	2200      	movs	r2, #0
    5662:	4b17      	ldr	r3, [pc, #92]	; (56c0 <_ZN13FilterOnePole6outputEv+0x7c>)
    5664:	f004 fbb2 	bl	9dcc <__aeabi_ddiv>
    5668:	0006      	movs	r6, r0
    566a:	68e0      	ldr	r0, [r4, #12]
    566c:	000f      	movs	r7, r1
    566e:	f005 fe45 	bl	b2fc <__aeabi_f2d>
    5672:	0002      	movs	r2, r0
    5674:	000b      	movs	r3, r1
    5676:	0030      	movs	r0, r6
    5678:	0039      	movs	r1, r7
    567a:	f004 ffdb 	bl	a634 <__aeabi_dmul>
      return (X-Y)/(TauUS/1.0e6);
    567e:	f005 fe8f 	bl	b3a0 <__aeabi_d2f>
    5682:	e7e9      	b.n	5658 <_ZN13FilterOnePole6outputEv+0x14>
      return X-Y;
    5684:	68e1      	ldr	r1, [r4, #12]
    5686:	6960      	ldr	r0, [r4, #20]
    5688:	f003 fe26 	bl	92d8 <__aeabi_fsub>
    568c:	e7e4      	b.n	5658 <_ZN13FilterOnePole6outputEv+0x14>
      return (X-Y)/(TauUS/1.0e6);
    568e:	68e1      	ldr	r1, [r4, #12]
    5690:	6960      	ldr	r0, [r4, #20]
    5692:	f003 fe21 	bl	92d8 <__aeabi_fsub>
    5696:	f005 fe31 	bl	b2fc <__aeabi_f2d>
    569a:	0006      	movs	r6, r0
    569c:	6860      	ldr	r0, [r4, #4]
    569e:	000f      	movs	r7, r1
    56a0:	f005 fe2c 	bl	b2fc <__aeabi_f2d>
    56a4:	2200      	movs	r2, #0
    56a6:	4b06      	ldr	r3, [pc, #24]	; (56c0 <_ZN13FilterOnePole6outputEv+0x7c>)
    56a8:	f004 fb90 	bl	9dcc <__aeabi_ddiv>
    56ac:	0002      	movs	r2, r0
    56ae:	000b      	movs	r3, r1
    56b0:	0030      	movs	r0, r6
    56b2:	0039      	movs	r1, r7
    56b4:	f004 fb8a 	bl	9dcc <__aeabi_ddiv>
    56b8:	e7e1      	b.n	567e <_ZN13FilterOnePole6outputEv+0x3a>
      return 0;
    56ba:	2000      	movs	r0, #0
    56bc:	e7cc      	b.n	5658 <_ZN13FilterOnePole6outputEv+0x14>
    56be:	46c0      	nop			; (mov r8, r8)
    56c0:	412e8480 	.word	0x412e8480

000056c4 <_ZN13FilterOnePole5inputEf>:
float FilterOnePole::input( float inVal ) {
    56c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56c6:	0004      	movs	r4, r0
    56c8:	1c0e      	adds	r6, r1, #0
  long time = micros();
    56ca:	f7fc ffd1 	bl	2670 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    56ce:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    56d0:	0005      	movs	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    56d2:	1ac0      	subs	r0, r0, r3
    56d4:	f003 ffd4 	bl	9680 <__aeabi_i2f>
  Ylast = Y;
    56d8:	68e3      	ldr	r3, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    56da:	1c01      	adds	r1, r0, #0
  Ylast = Y;
    56dc:	6123      	str	r3, [r4, #16]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    56de:	61a0      	str	r0, [r4, #24]
  LastUS = time;                      // update this now
    56e0:	61e5      	str	r5, [r4, #28]
  X = inVal;                          // this is now the most recent input value
    56e2:	6166      	str	r6, [r4, #20]
  TauSamps = TauUS / ElapsedUS;
    56e4:	6860      	ldr	r0, [r4, #4]
    56e6:	f003 fae7 	bl	8cb8 <__aeabi_fdiv>
    56ea:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    56ec:	f005 fe06 	bl	b2fc <__aeabi_f2d>
    56f0:	0002      	movs	r2, r0
    56f2:	000b      	movs	r3, r1
    56f4:	2000      	movs	r0, #0
    56f6:	4918      	ldr	r1, [pc, #96]	; (5758 <_ZN13FilterOnePole5inputEf+0x94>)
    56f8:	f004 fb68 	bl	9dcc <__aeabi_ddiv>
    56fc:	f002 fc6e 	bl	7fdc <exp>
    5700:	f005 fe4e 	bl	b3a0 <__aeabi_d2f>
    5704:	1c05      	adds	r5, r0, #0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    5706:	f005 fdf9 	bl	b2fc <__aeabi_f2d>
    570a:	0002      	movs	r2, r0
    570c:	000b      	movs	r3, r1
    570e:	2000      	movs	r0, #0
    5710:	4912      	ldr	r1, [pc, #72]	; (575c <_ZN13FilterOnePole5inputEf+0x98>)
    5712:	f005 fa0f 	bl	ab34 <__aeabi_dsub>
    5716:	0006      	movs	r6, r0
    5718:	6960      	ldr	r0, [r4, #20]
    571a:	000f      	movs	r7, r1
    571c:	f005 fdee 	bl	b2fc <__aeabi_f2d>
    5720:	0002      	movs	r2, r0
    5722:	000b      	movs	r3, r1
    5724:	0030      	movs	r0, r6
    5726:	0039      	movs	r1, r7
    5728:	f004 ff84 	bl	a634 <__aeabi_dmul>
    572c:	0006      	movs	r6, r0
    572e:	000f      	movs	r7, r1
    5730:	1c28      	adds	r0, r5, #0
    5732:	6921      	ldr	r1, [r4, #16]
    5734:	f003 fcb0 	bl	9098 <__aeabi_fmul>
    5738:	f005 fde0 	bl	b2fc <__aeabi_f2d>
    573c:	0002      	movs	r2, r0
    573e:	000b      	movs	r3, r1
    5740:	0030      	movs	r0, r6
    5742:	0039      	movs	r1, r7
    5744:	f004 f832 	bl	97ac <__aeabi_dadd>
    5748:	f005 fe2a 	bl	b3a0 <__aeabi_d2f>
    574c:	60e0      	str	r0, [r4, #12]
  return output();
    574e:	0020      	movs	r0, r4
    5750:	f7ff ff78 	bl	5644 <_ZN13FilterOnePole6outputEv>
}
    5754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5756:	46c0      	nop			; (mov r8, r8)
    5758:	bff00000 	.word	0xbff00000
    575c:	3ff00000 	.word	0x3ff00000

00005760 <_ZN20FilterOnePoleCascadeC1Eff>:
}


// stuff for filter2 (lowpass only)
// should be able to set a separate fall time as well
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  setFilter( ft, fc, initialValue );
    5762:	26fe      	movs	r6, #254	; 0xfe
    5764:	2700      	movs	r7, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5766:	0004      	movs	r4, r0
  setFilter( ft, fc, initialValue );
    5768:	05b6      	lsls	r6, r6, #22
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    576a:	1c15      	adds	r5, r2, #0
  setFilter( ft, fc, initialValue );
    576c:	1c3b      	adds	r3, r7, #0
    576e:	1c32      	adds	r2, r6, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5770:	9101      	str	r1, [sp, #4]
  setFilter( ft, fc, initialValue );
    5772:	2101      	movs	r1, #1
    5774:	f7ff ff58 	bl	5628 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5778:	0020      	movs	r0, r4
  setFilter( ft, fc, initialValue );
    577a:	1c3b      	adds	r3, r7, #0
    577c:	1c32      	adds	r2, r6, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    577e:	3020      	adds	r0, #32
  setFilter( ft, fc, initialValue );
    5780:	2101      	movs	r1, #1
    5782:	f7ff ff51 	bl	5628 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>
}

void FilterOnePoleCascade::setRiseTime( float riseTime ) {
  float tauScale = 3.36;      // found emperically, by running test();

  Pole1.setTau( riseTime / tauScale );
    5786:	4908      	ldr	r1, [pc, #32]	; (57a8 <_ZN20FilterOnePoleCascadeC1Eff+0x48>)
    5788:	9801      	ldr	r0, [sp, #4]
    578a:	f003 fa95 	bl	8cb8 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
    578e:	4907      	ldr	r1, [pc, #28]	; (57ac <_ZN20FilterOnePoleCascadeC1Eff+0x4c>)
    5790:	f003 fc82 	bl	9098 <__aeabi_fmul>
    5794:	6060      	str	r0, [r4, #4]
    5796:	6260      	str	r0, [r4, #36]	; 0x24
  Y = Ylast = X = newVal;
    5798:	6165      	str	r5, [r4, #20]
    579a:	6125      	str	r5, [r4, #16]
    579c:	60e5      	str	r5, [r4, #12]
    579e:	6365      	str	r5, [r4, #52]	; 0x34
    57a0:	6325      	str	r5, [r4, #48]	; 0x30
    57a2:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    57a4:	0020      	movs	r0, r4
    57a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    57a8:	40570a3d 	.word	0x40570a3d
    57ac:	49742400 	.word	0x49742400

000057b0 <_ZN20FilterOnePoleCascade11setRiseTimeEf>:
void FilterOnePoleCascade::setRiseTime( float riseTime ) {
    57b0:	b510      	push	{r4, lr}
    57b2:	0004      	movs	r4, r0
    57b4:	1c08      	adds	r0, r1, #0
  Pole1.setTau( riseTime / tauScale );
    57b6:	4904      	ldr	r1, [pc, #16]	; (57c8 <_ZN20FilterOnePoleCascade11setRiseTimeEf+0x18>)
    57b8:	f003 fa7e 	bl	8cb8 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
    57bc:	4903      	ldr	r1, [pc, #12]	; (57cc <_ZN20FilterOnePoleCascade11setRiseTimeEf+0x1c>)
    57be:	f003 fc6b 	bl	9098 <__aeabi_fmul>
    57c2:	6060      	str	r0, [r4, #4]
    57c4:	6260      	str	r0, [r4, #36]	; 0x24
  Pole2.setTau( riseTime / tauScale );
}
    57c6:	bd10      	pop	{r4, pc}
    57c8:	40570a3d 	.word	0x40570a3d
    57cc:	49742400 	.word	0x49742400

000057d0 <_ZN20FilterOnePoleCascade5inputEf>:

float FilterOnePoleCascade::input( float inVal  ) {
    57d0:	b510      	push	{r4, lr}
  Pole2.input( Pole1.input( inVal ));
    57d2:	0004      	movs	r4, r0
    57d4:	f7ff ff76 	bl	56c4 <_ZN13FilterOnePole5inputEf>
    57d8:	3420      	adds	r4, #32
    57da:	1c01      	adds	r1, r0, #0
    57dc:	0020      	movs	r0, r4
    57de:	f7ff ff71 	bl	56c4 <_ZN13FilterOnePole5inputEf>
  Pole1.setToNewValue( newVal );
  Pole2.setToNewValue( newVal );
}

float FilterOnePoleCascade::output() {
  return Pole2.output();
    57e2:	0020      	movs	r0, r4
    57e4:	f7ff ff2e 	bl	5644 <_ZN13FilterOnePole6outputEv>
}
    57e8:	bd10      	pop	{r4, pc}

000057ea <_ZN20FilterOnePoleCascade13setToNewValueEf>:
  Y = Ylast = X = newVal;
    57ea:	6141      	str	r1, [r0, #20]
    57ec:	6101      	str	r1, [r0, #16]
    57ee:	60c1      	str	r1, [r0, #12]
    57f0:	6341      	str	r1, [r0, #52]	; 0x34
    57f2:	6301      	str	r1, [r0, #48]	; 0x30
    57f4:	62c1      	str	r1, [r0, #44]	; 0x2c
}
    57f6:	4770      	bx	lr

000057f8 <_ZN20FilterOnePoleCascade6outputEv>:
float FilterOnePoleCascade::output() {
    57f8:	b510      	push	{r4, lr}
  return Pole2.output();
    57fa:	3020      	adds	r0, #32
    57fc:	f7ff ff22 	bl	5644 <_ZN13FilterOnePole6outputEv>
}
    5800:	bd10      	pop	{r4, pc}
	...

00005804 <_ZL15is_rtc_syncbusyv>:
}


static inline bool is_rtc_syncbusy()
{
	if (RTC->MODE2.SYNCBUSY.reg)
    5804:	4b02      	ldr	r3, [pc, #8]	; (5810 <_ZL15is_rtc_syncbusyv+0xc>)
    5806:	6918      	ldr	r0, [r3, #16]
    5808:	1e43      	subs	r3, r0, #1
    580a:	4198      	sbcs	r0, r3
    580c:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	
	return false;
}
    580e:	4770      	bx	lr
    5810:	40002000 	.word	0x40002000

00005814 <_ZN7RTCZeroC1Ev>:
	_configured = false;
    5814:	2300      	movs	r3, #0
    5816:	7003      	strb	r3, [r0, #0]
}
    5818:	4770      	bx	lr
	...

0000581c <_ZN7RTCZero12rtc_get_timeEv>:
{
    581c:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    581e:	f7ff fff1 	bl	5804 <_ZL15is_rtc_syncbusyv>
    5822:	2800      	cmp	r0, #0
    5824:	d1fb      	bne.n	581e <_ZN7RTCZero12rtc_get_timeEv+0x2>
	uint32_t register_value = RTC->MODE2.CLOCK.reg;
    5826:	4b01      	ldr	r3, [pc, #4]	; (582c <_ZN7RTCZero12rtc_get_timeEv+0x10>)
    5828:	6998      	ldr	r0, [r3, #24]
}
    582a:	bd10      	pop	{r4, pc}
    582c:	40002000 	.word	0x40002000

00005830 <_ZN7RTCZero10getSecondsEv>:
{
    5830:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5832:	f7ff fff3 	bl	581c <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    5836:	233f      	movs	r3, #63	; 0x3f
    5838:	4018      	ands	r0, r3
}
    583a:	bd10      	pop	{r4, pc}

0000583c <_ZN7RTCZero10getMinutesEv>:
{
    583c:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    583e:	f7ff ffed 	bl	581c <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5842:	0500      	lsls	r0, r0, #20
	return value;
    5844:	0e80      	lsrs	r0, r0, #26
}
    5846:	bd10      	pop	{r4, pc}

00005848 <_ZN7RTCZero8getHoursEv>:
{
    5848:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    584a:	f7ff ffe7 	bl	581c <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    584e:	03c0      	lsls	r0, r0, #15
	return value;
    5850:	0ec0      	lsrs	r0, r0, #27
}
    5852:	bd10      	pop	{r4, pc}

00005854 <_ZN7RTCZero6getDayEv>:
{
    5854:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5856:	f7ff ffe1 	bl	581c <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    585a:	0280      	lsls	r0, r0, #10
	return value;
    585c:	0ec0      	lsrs	r0, r0, #27
}
    585e:	bd10      	pop	{r4, pc}

00005860 <_ZN7RTCZero8getMonthEv>:
{
    5860:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5862:	f7ff ffdb 	bl	581c <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    5866:	0180      	lsls	r0, r0, #6
	return value;
    5868:	0f00      	lsrs	r0, r0, #28
}
    586a:	bd10      	pop	{r4, pc}

0000586c <_ZN7RTCZero7getYearEv>:
{
    586c:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    586e:	f7ff ffd5 	bl	581c <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    5872:	0e80      	lsrs	r0, r0, #26
}
    5874:	bd10      	pop	{r4, pc}
	...

00005878 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>:
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    5878:	88c8      	ldrh	r0, [r1, #6]
    587a:	4b09      	ldr	r3, [pc, #36]	; (58a0 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value+0x28>)
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    587c:	78ca      	ldrb	r2, [r1, #3]
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    587e:	18c0      	adds	r0, r0, r3
    5880:	0683      	lsls	r3, r0, #26
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    5882:	7908      	ldrb	r0, [r1, #4]
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    5884:	0452      	lsls	r2, r2, #17
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    5886:	0580      	lsls	r0, r0, #22
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5888:	4310      	orrs	r0, r2
    588a:	780a      	ldrb	r2, [r1, #0]
    588c:	4310      	orrs	r0, r2
	clock_reg_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    588e:	788a      	ldrb	r2, [r1, #2]
    5890:	0312      	lsls	r2, r2, #12
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5892:	4310      	orrs	r0, r2
	clock_reg_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    5894:	784a      	ldrb	r2, [r1, #1]
    5896:	0192      	lsls	r2, r2, #6
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5898:	4310      	orrs	r0, r2
    589a:	4318      	orrs	r0, r3
}
    589c:	4770      	bx	lr
    589e:	46c0      	nop			; (mov r8, r8)
    58a0:	fffff830 	.word	0xfffff830

000058a4 <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>:
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    58a4:	20fa      	movs	r0, #250	; 0xfa
{
    58a6:	b510      	push	{r4, lr}
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    58a8:	241f      	movs	r4, #31
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    58aa:	0e8b      	lsrs	r3, r1, #26
    58ac:	00c0      	lsls	r0, r0, #3
    58ae:	181b      	adds	r3, r3, r0
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    58b0:	0c48      	lsrs	r0, r1, #17
    58b2:	4020      	ands	r0, r4
    58b4:	70d0      	strb	r0, [r2, #3]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    58b6:	203f      	movs	r0, #63	; 0x3f
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    58b8:	80d3      	strh	r3, [r2, #6]
	time->month = ((clock_reg_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    58ba:	018b      	lsls	r3, r1, #6
    58bc:	0f1b      	lsrs	r3, r3, #28
    58be:	7113      	strb	r3, [r2, #4]
	time->hour = ((clock_reg_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    58c0:	0b0b      	lsrs	r3, r1, #12
    58c2:	4023      	ands	r3, r4
    58c4:	7093      	strb	r3, [r2, #2]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    58c6:	098b      	lsrs	r3, r1, #6
    58c8:	4003      	ands	r3, r0
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    58ca:	4001      	ands	r1, r0
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    58cc:	7053      	strb	r3, [r2, #1]
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    58ce:	7011      	strb	r1, [r2, #0]
}
    58d0:	bd10      	pop	{r4, pc}
	...

000058d4 <_ZN7RTCZero8getEpochEv>:
{
    58d4:	b530      	push	{r4, r5, lr}
    58d6:	b08d      	sub	sp, #52	; 0x34
    58d8:	0005      	movs	r5, r0
	uint32_t register_value = rtc_get_time();
    58da:	f7ff ff9f 	bl	581c <_ZN7RTCZero12rtc_get_timeEv>
	rtc_register_value_to_time(register_value, &time);
    58de:	ac01      	add	r4, sp, #4
	uint32_t register_value = rtc_get_time();
    58e0:	0001      	movs	r1, r0
	rtc_register_value_to_time(register_value, &time);
    58e2:	0022      	movs	r2, r4
    58e4:	0028      	movs	r0, r5
    58e6:	f7ff ffdd 	bl	58a4 <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>
	tm.tm_year = time.year - 1900;		// Years since 1900
    58ea:	88e3      	ldrh	r3, [r4, #6]
    58ec:	4a09      	ldr	r2, [pc, #36]	; (5914 <_ZN7RTCZero8getEpochEv+0x40>)
	uint32_t epoch = mktime(&tm);
    58ee:	a803      	add	r0, sp, #12
	tm.tm_year = time.year - 1900;		// Years since 1900
    58f0:	189b      	adds	r3, r3, r2
    58f2:	9308      	str	r3, [sp, #32]
	tm.tm_mon  = time.month - 1;
    58f4:	7923      	ldrb	r3, [r4, #4]
    58f6:	3b01      	subs	r3, #1
    58f8:	9307      	str	r3, [sp, #28]
	tm.tm_mday = time.day;
    58fa:	78e3      	ldrb	r3, [r4, #3]
    58fc:	9306      	str	r3, [sp, #24]
	tm.tm_hour = time.hour;
    58fe:	78a3      	ldrb	r3, [r4, #2]
    5900:	9305      	str	r3, [sp, #20]
	tm.tm_min  = time.minute;
    5902:	7863      	ldrb	r3, [r4, #1]
    5904:	9304      	str	r3, [sp, #16]
	tm.tm_sec  = time.second;
    5906:	7823      	ldrb	r3, [r4, #0]
    5908:	9303      	str	r3, [sp, #12]
	uint32_t epoch = mktime(&tm);
    590a:	f006 f85d 	bl	b9c8 <mktime>
}
    590e:	b00d      	add	sp, #52	; 0x34
    5910:	bd30      	pop	{r4, r5, pc}
    5912:	46c0      	nop			; (mov r8, r8)
    5914:	fffff894 	.word	0xfffff894

00005918 <_ZN7RTCZero10RTCdisableEv>:


void RTCZero::RTCdisable()
{
    5918:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    591a:	f7ff ff73 	bl	5804 <_ZL15is_rtc_syncbusyv>
    591e:	2800      	cmp	r0, #0
    5920:	d1fb      	bne.n	591a <_ZN7RTCZero10RTCdisableEv+0x2>
		// Wait for synchronization
	}
	
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    5922:	2102      	movs	r1, #2
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
    5924:	4b05      	ldr	r3, [pc, #20]	; (593c <_ZN7RTCZero10RTCdisableEv+0x24>)
    5926:	4a06      	ldr	r2, [pc, #24]	; (5940 <_ZN7RTCZero10RTCdisableEv+0x28>)
    5928:	811a      	strh	r2, [r3, #8]
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
    592a:	819a      	strh	r2, [r3, #12]
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    592c:	881a      	ldrh	r2, [r3, #0]
    592e:	438a      	bics	r2, r1
    5930:	801a      	strh	r2, [r3, #0]
	
	while (is_rtc_syncbusy())
    5932:	f7ff ff67 	bl	5804 <_ZL15is_rtc_syncbusyv>
    5936:	2800      	cmp	r0, #0
    5938:	d1fb      	bne.n	5932 <_ZN7RTCZero10RTCdisableEv+0x1a>
	{
		// Wait for synchronization
	}
}
    593a:	bd10      	pop	{r4, pc}
    593c:	40002000 	.word	0x40002000
    5940:	ffff81ff 	.word	0xffff81ff

00005944 <_ZN7RTCZero9RTCenableEv>:

void RTCZero::RTCenable()
{
    5944:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    5946:	f7ff ff5d 	bl	5804 <_ZL15is_rtc_syncbusyv>
    594a:	2800      	cmp	r0, #0
    594c:	d1fb      	bne.n	5946 <_ZN7RTCZero9RTCenableEv+0x2>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;			// enable RTC
    594e:	2302      	movs	r3, #2
    5950:	4a04      	ldr	r2, [pc, #16]	; (5964 <_ZN7RTCZero9RTCenableEv+0x20>)
    5952:	8811      	ldrh	r1, [r2, #0]
    5954:	430b      	orrs	r3, r1
    5956:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    5958:	f7ff ff54 	bl	5804 <_ZL15is_rtc_syncbusyv>
    595c:	2800      	cmp	r0, #0
    595e:	d1fb      	bne.n	5958 <_ZN7RTCZero9RTCenableEv+0x14>
	{
		// Wait for synchronization
	}
}
    5960:	bd10      	pop	{r4, pc}
    5962:	46c0      	nop			; (mov r8, r8)
    5964:	40002000 	.word	0x40002000

00005968 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>:
{
    5968:	b570      	push	{r4, r5, r6, lr}
    596a:	0005      	movs	r5, r0
	uint32_t register_value = rtc_time_to_register_value(time);
    596c:	f7ff ff84 	bl	5878 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>
    5970:	0006      	movs	r6, r0
	while (is_rtc_syncbusy())
    5972:	f7ff ff47 	bl	5804 <_ZL15is_rtc_syncbusyv>
    5976:	2800      	cmp	r0, #0
    5978:	d1fb      	bne.n	5972 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0xa>
	RTC->MODE2.CLOCK.reg = register_value;
    597a:	4c0b      	ldr	r4, [pc, #44]	; (59a8 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x40>)
	RTCdisable();
    597c:	0028      	movs	r0, r5
    597e:	f7ff ffcb 	bl	5918 <_ZN7RTCZero10RTCdisableEv>
	RTC->MODE2.CLOCK.reg = register_value;
    5982:	61a6      	str	r6, [r4, #24]
	while (is_rtc_syncbusy())
    5984:	f7ff ff3e 	bl	5804 <_ZL15is_rtc_syncbusyv>
    5988:	2800      	cmp	r0, #0
    598a:	d1fb      	bne.n	5984 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x1c>
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_SYNCBUSY_CLOCKSYNC;
    598c:	2280      	movs	r2, #128	; 0x80
    598e:	8823      	ldrh	r3, [r4, #0]
    5990:	0212      	lsls	r2, r2, #8
    5992:	4313      	orrs	r3, r2
    5994:	8023      	strh	r3, [r4, #0]
	while (is_rtc_syncbusy())
    5996:	f7ff ff35 	bl	5804 <_ZL15is_rtc_syncbusyv>
    599a:	2800      	cmp	r0, #0
    599c:	d1fb      	bne.n	5996 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x2e>
	RTCenable();
    599e:	0028      	movs	r0, r5
    59a0:	f7ff ffd0 	bl	5944 <_ZN7RTCZero9RTCenableEv>
}
    59a4:	bd70      	pop	{r4, r5, r6, pc}
    59a6:	46c0      	nop			; (mov r8, r8)
    59a8:	40002000 	.word	0x40002000

000059ac <_ZN7RTCZero8setEpochEm>:
{
    59ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	time_t etime = epoch;
    59ae:	4b0e      	ldr	r3, [pc, #56]	; (59e8 <_ZN7RTCZero8setEpochEm+0x3c>)
{
    59b0:	0004      	movs	r4, r0
	time_t etime = epoch;
    59b2:	4299      	cmp	r1, r3
    59b4:	d200      	bcs.n	59b8 <_ZN7RTCZero8setEpochEm+0xc>
    59b6:	0019      	movs	r1, r3
	struct tm* tmp = gmtime(&etime);
    59b8:	a801      	add	r0, sp, #4
	time_t etime = epoch;
    59ba:	9101      	str	r1, [sp, #4]
	struct tm* tmp = gmtime(&etime);
    59bc:	f005 fdda 	bl	b574 <gmtime>
	time.day    = tmp->tm_mday;
    59c0:	7b03      	ldrb	r3, [r0, #12]
    59c2:	a902      	add	r1, sp, #8
    59c4:	70cb      	strb	r3, [r1, #3]
	time.month  = tmp->tm_mon + 1;
    59c6:	6903      	ldr	r3, [r0, #16]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    59c8:	4a08      	ldr	r2, [pc, #32]	; (59ec <_ZN7RTCZero8setEpochEm+0x40>)
	time.month  = tmp->tm_mon + 1;
    59ca:	3301      	adds	r3, #1
    59cc:	710b      	strb	r3, [r1, #4]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    59ce:	6943      	ldr	r3, [r0, #20]
    59d0:	189b      	adds	r3, r3, r2
    59d2:	80cb      	strh	r3, [r1, #6]
	time.hour   = tmp->tm_hour;
    59d4:	7a03      	ldrb	r3, [r0, #8]
    59d6:	708b      	strb	r3, [r1, #2]
	time.minute = tmp->tm_min;
    59d8:	7903      	ldrb	r3, [r0, #4]
    59da:	704b      	strb	r3, [r1, #1]
	time.second = tmp->tm_sec;
    59dc:	6803      	ldr	r3, [r0, #0]
	rtc_set_time(&time);
    59de:	0020      	movs	r0, r4
	time.second = tmp->tm_sec;
    59e0:	700b      	strb	r3, [r1, #0]
	rtc_set_time(&time);
    59e2:	f7ff ffc1 	bl	5968 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
}
    59e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    59e8:	386d4380 	.word	0x386d4380
    59ec:	0000076c 	.word	0x0000076c

000059f0 <_ZN7RTCZero8RTCresetEv>:

void RTCZero::RTCreset()
{
    59f0:	b510      	push	{r4, lr}
	RTCdisable();
    59f2:	f7ff ff91 	bl	5918 <_ZN7RTCZero10RTCdisableEv>
	
	while (is_rtc_syncbusy())
    59f6:	f7ff ff05 	bl	5804 <_ZL15is_rtc_syncbusyv>
    59fa:	2800      	cmp	r0, #0
    59fc:	d1fb      	bne.n	59f6 <_ZN7RTCZero8RTCresetEv+0x6>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;			// software reset
    59fe:	2301      	movs	r3, #1
    5a00:	4a04      	ldr	r2, [pc, #16]	; (5a14 <_ZN7RTCZero8RTCresetEv+0x24>)
    5a02:	8811      	ldrh	r1, [r2, #0]
    5a04:	430b      	orrs	r3, r1
    5a06:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    5a08:	f7ff fefc 	bl	5804 <_ZL15is_rtc_syncbusyv>
    5a0c:	2800      	cmp	r0, #0
    5a0e:	d1fb      	bne.n	5a08 <_ZN7RTCZero8RTCresetEv+0x18>
	{
		// Wait for synchronization
	}
}
    5a10:	bd10      	pop	{r4, pc}
    5a12:	46c0      	nop			; (mov r8, r8)
    5a14:	40002000 	.word	0x40002000

00005a18 <_ZN7RTCZero5beginEv>:
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5a18:	2380      	movs	r3, #128	; 0x80
{
    5a1a:	b510      	push	{r4, lr}
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5a1c:	4a09      	ldr	r2, [pc, #36]	; (5a44 <_ZN7RTCZero5beginEv+0x2c>)
    5a1e:	005b      	lsls	r3, r3, #1
    5a20:	6951      	ldr	r1, [r2, #20]
{
    5a22:	0004      	movs	r4, r0
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5a24:	430b      	orrs	r3, r1
    5a26:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = OSC32KCTRL_RTCCTRL_RTCSEL_XOSC1K;
    5a28:	2204      	movs	r2, #4
    5a2a:	4b07      	ldr	r3, [pc, #28]	; (5a48 <_ZN7RTCZero5beginEv+0x30>)
    5a2c:	611a      	str	r2, [r3, #16]
	RTCreset();
    5a2e:	f7ff ffdf 	bl	59f0 <_ZN7RTCZero8RTCresetEv>
	RTC->MODE2.CTRLA.reg = tmp_reg;
    5a32:	4a06      	ldr	r2, [pc, #24]	; (5a4c <_ZN7RTCZero5beginEv+0x34>)
    5a34:	4b06      	ldr	r3, [pc, #24]	; (5a50 <_ZN7RTCZero5beginEv+0x38>)
	RTCenable();
    5a36:	0020      	movs	r0, r4
	RTC->MODE2.CTRLA.reg = tmp_reg;
    5a38:	801a      	strh	r2, [r3, #0]
	RTCenable();
    5a3a:	f7ff ff83 	bl	5944 <_ZN7RTCZero9RTCenableEv>
	_configured = true;
    5a3e:	2301      	movs	r3, #1
    5a40:	7023      	strb	r3, [r4, #0]
}
    5a42:	bd10      	pop	{r4, pc}
    5a44:	40000400 	.word	0x40000400
    5a48:	40001000 	.word	0x40001000
    5a4c:	ffff8b08 	.word	0xffff8b08
    5a50:	40002000 	.word	0x40002000

00005a54 <_ZL15cbor_enc_lengthhP8cbor_bufm>:
}

/* Variable length encoder for integer types - UINT/NINT and ARRAY/MAP dimensions */
static int
cbor_enc_length(uint8_t major_type, struct cbor_buf * cbuf, uint32_t val)
{
    5a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5a56:	4684      	mov	ip, r0
    5a58:	000d      	movs	r5, r1
    5a5a:	9201      	str	r2, [sp, #4]
    5a5c:	ba16      	rev	r6, r2
        *addnl_info = val;
    5a5e:	b2d3      	uxtb	r3, r2
        retbytes = 0;
    5a60:	2400      	movs	r4, #0
    if (val <= CBOR_MJR0_THRESHOLD) {
    5a62:	2a17      	cmp	r2, #23
    5a64:	d90a      	bls.n	5a7c <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    } else if (val > CBOR_MJR0_THRESHOLD && val <= UINT8_MAX) {
    5a66:	0013      	movs	r3, r2
    5a68:	3b18      	subs	r3, #24
    5a6a:	2be7      	cmp	r3, #231	; 0xe7
    5a6c:	d911      	bls.n	5a92 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3e>
    } else if (val > UINT8_MAX && val <= UINT16_MAX) {
    5a6e:	1e53      	subs	r3, r2, #1
    5a70:	491c      	ldr	r1, [pc, #112]	; (5ae4 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x90>)
    5a72:	3bff      	subs	r3, #255	; 0xff
    5a74:	428b      	cmp	r3, r1
    5a76:	d80f      	bhi.n	5a98 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x44>
        *addnl_info = CBOR_ADDL_BYTE_UINT16;
    5a78:	2319      	movs	r3, #25
        retbytes = SIZE_UINT16;
    5a7a:	2402      	movs	r4, #2
    int addnlBytes;
    uint8_t additionalInfo;

    addnlBytes = cbor_get_addnl_info(val, &additionalInfo);

    if ((cbuf->next + addnlBytes) > cbuf->tail) {
    5a7c:	68a9      	ldr	r1, [r5, #8]
    5a7e:	6868      	ldr	r0, [r5, #4]
    5a80:	190f      	adds	r7, r1, r4
    5a82:	42b8      	cmp	r0, r7
    5a84:	d20b      	bcs.n	5a9e <_ZL15cbor_enc_lengthhP8cbor_bufm+0x4a>
        cbuf->err = CBOR_NO_MEM;
    5a86:	2301      	movs	r3, #1
            break;
#endif
        default:
            /* TODO - error handling */
           cbuf->err = CBOR_INV_ADDNL_INFO;
           return CBOR_ERR;
    5a88:	2401      	movs	r4, #1
           cbuf->err = CBOR_INV_ADDNL_INFO;
    5a8a:	60eb      	str	r3, [r5, #12]
           return CBOR_ERR;
    5a8c:	4264      	negs	r4, r4
        }
        memcpy(cbuf->next, &val, addnlBytes);
        cbuf->next += addnlBytes;
    }
    return CBOR_OK;
}
    5a8e:	0020      	movs	r0, r4
    5a90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *addnl_info = CBOR_ADDL_BYTE_UINT8;
    5a92:	2318      	movs	r3, #24
        retbytes = SIZE_UINT8;
    5a94:	2401      	movs	r4, #1
    5a96:	e7f1      	b.n	5a7c <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
        *addnl_info = CBOR_ADDL_BYTE_UINT32;
    5a98:	231a      	movs	r3, #26
        retbytes = SIZE_UINT;
    5a9a:	2404      	movs	r4, #4
    5a9c:	e7ee      	b.n	5a7c <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    *cbuf->next++ = major_type | additionalInfo;
    5a9e:	4660      	mov	r0, ip
    5aa0:	1c4f      	adds	r7, r1, #1
    5aa2:	4318      	orrs	r0, r3
    5aa4:	60af      	str	r7, [r5, #8]
    5aa6:	7008      	strb	r0, [r1, #0]
    if (addnlBytes) {
    5aa8:	2c00      	cmp	r4, #0
    5aaa:	d0f0      	beq.n	5a8e <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
        switch(addnlBytes) {
    5aac:	2c02      	cmp	r4, #2
    5aae:	d00e      	beq.n	5ace <_ZL15cbor_enc_lengthhP8cbor_bufm+0x7a>
    5ab0:	2c04      	cmp	r4, #4
    5ab2:	d015      	beq.n	5ae0 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x8c>
           cbuf->err = CBOR_INV_ADDNL_INFO;
    5ab4:	2308      	movs	r3, #8
        switch(addnlBytes) {
    5ab6:	2c01      	cmp	r4, #1
    5ab8:	d1e6      	bne.n	5a88 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x34>
        memcpy(cbuf->next, &val, addnlBytes);
    5aba:	0022      	movs	r2, r4
    5abc:	a901      	add	r1, sp, #4
    5abe:	68a8      	ldr	r0, [r5, #8]
    5ac0:	f005 fe93 	bl	b7ea <memcpy>
        cbuf->next += addnlBytes;
    5ac4:	68ab      	ldr	r3, [r5, #8]
    5ac6:	191c      	adds	r4, r3, r4
    5ac8:	60ac      	str	r4, [r5, #8]
    return CBOR_OK;
    5aca:	2400      	movs	r4, #0
    5acc:	e7df      	b.n	5a8e <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
            val = htons(val);
    5ace:	4906      	ldr	r1, [pc, #24]	; (5ae8 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x94>)
    5ad0:	0213      	lsls	r3, r2, #8
    5ad2:	b292      	uxth	r2, r2
    5ad4:	400b      	ands	r3, r1
    5ad6:	0a12      	lsrs	r2, r2, #8
    5ad8:	431a      	orrs	r2, r3
    5ada:	b292      	uxth	r2, r2
    5adc:	9201      	str	r2, [sp, #4]
            break;
    5ade:	e7ec      	b.n	5aba <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
            val = htonl(val);
    5ae0:	9601      	str	r6, [sp, #4]
            break;
    5ae2:	e7ea      	b.n	5aba <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
    5ae4:	0000feff 	.word	0x0000feff
    5ae8:	00ffff00 	.word	0x00ffff00

00005aec <_Z13cbor_enc_initP8cbor_bufPvi>:
{
    5aec:	b570      	push	{r4, r5, r6, lr}
    5aee:	0005      	movs	r5, r0
    5af0:	000c      	movs	r4, r1
    5af2:	0016      	movs	r6, r2
    memset(cbuf, 0, sizeof(struct cbor_buf));
    5af4:	2100      	movs	r1, #0
    5af6:	2210      	movs	r2, #16
    5af8:	f005 fe92 	bl	b820 <memset>
    cbuf->head = (uint8_t*)buf;
    5afc:	602c      	str	r4, [r5, #0]
    cbuf->next = (uint8_t*)buf;
    5afe:	60ac      	str	r4, [r5, #8]
    cbuf->tail = cbuf->head + len;
    5b00:	19a4      	adds	r4, r4, r6
    5b02:	606c      	str	r4, [r5, #4]
}
    5b04:	bd70      	pop	{r4, r5, r6, pc}

00005b06 <_Z16cbor_buf_get_lenP8cbor_buf>:
    return cbuf->next - cbuf->head;
    5b06:	6883      	ldr	r3, [r0, #8]
    5b08:	6800      	ldr	r0, [r0, #0]
    5b0a:	1a18      	subs	r0, r3, r0
}
    5b0c:	4770      	bx	lr

00005b0e <_Z12cbor_enc_intP8cbor_bufi>:
 *         Error (negative values)
 */
int
cbor_enc_int(struct cbor_buf *cbuf, int val)
{
    uint8_t major_type = CBOR_TYPE_UINT;
    5b0e:	2300      	movs	r3, #0
{
    5b10:	b510      	push	{r4, lr}
    5b12:	000a      	movs	r2, r1

    if (val < 0) {
    5b14:	4299      	cmp	r1, r3
    5b16:	da01      	bge.n	5b1c <_Z12cbor_enc_intP8cbor_bufi+0xe>
        val = -1 - val;
    5b18:	43ca      	mvns	r2, r1
        major_type = CBOR_TYPE_NINT;
    5b1a:	3320      	adds	r3, #32
    }

    return (cbor_enc_length(major_type, cbuf, val));
    5b1c:	0001      	movs	r1, r0
    5b1e:	0018      	movs	r0, r3
    5b20:	f7ff ff98 	bl	5a54 <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    5b24:	bd10      	pop	{r4, pc}

00005b26 <_Z13cbor_enc_textP8cbor_bufPKci>:
 * output: status of encode operation.
 */
int
cbor_enc_text(struct cbor_buf *cbuf,
                const char *inp_string, int len)
{
    5b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b28:	0004      	movs	r4, r0
    5b2a:	000f      	movs	r7, r1
    int rc = CBOR_OK;
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    5b2c:	0001      	movs	r1, r0
    5b2e:	2060      	movs	r0, #96	; 0x60
{
    5b30:	0015      	movs	r5, r2
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    5b32:	f7ff ff8f 	bl	5a54 <_ZL15cbor_enc_lengthhP8cbor_bufm>
    5b36:	1e06      	subs	r6, r0, #0

    if (!rc) {
    5b38:	d107      	bne.n	5b4a <_Z13cbor_enc_textP8cbor_bufPKci+0x24>
        if (len > (cbuf->tail - cbuf->next)) {
    5b3a:	68a0      	ldr	r0, [r4, #8]
    5b3c:	6863      	ldr	r3, [r4, #4]
    5b3e:	1a1b      	subs	r3, r3, r0
    5b40:	429d      	cmp	r5, r3
    5b42:	dd04      	ble.n	5b4e <_Z13cbor_enc_textP8cbor_bufPKci+0x28>
            cbuf->err = CBOR_NO_MEM;
    5b44:	2301      	movs	r3, #1
            rc = CBOR_ERR;
    5b46:	3e01      	subs	r6, #1
            cbuf->err = CBOR_NO_MEM;
    5b48:	60e3      	str	r3, [r4, #12]
            memcpy(cbuf->next, inp_string, len);
            cbuf->next += len;
        }
    }
    return rc;
}
    5b4a:	0030      	movs	r0, r6
    5b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            memcpy(cbuf->next, inp_string, len);
    5b4e:	002a      	movs	r2, r5
    5b50:	0039      	movs	r1, r7
    5b52:	f005 fe4a 	bl	b7ea <memcpy>
            cbuf->next += len;
    5b56:	68a3      	ldr	r3, [r4, #8]
    5b58:	195d      	adds	r5, r3, r5
    5b5a:	60a5      	str	r5, [r4, #8]
    return rc;
    5b5c:	e7f5      	b.n	5b4a <_Z13cbor_enc_textP8cbor_bufPKci+0x24>

00005b5e <_Z12cbor_enc_mapP8cbor_bufi>:
 *        num_elements -> number of elements in the map
 * output: status of encode operation.
 */
int
cbor_enc_map(struct cbor_buf *cbuf, int num_elements)
{
    5b5e:	b510      	push	{r4, lr}
    5b60:	000a      	movs	r2, r1
    return(cbor_enc_length(CBOR_TYPE_MAP, cbuf, num_elements));
    5b62:	0001      	movs	r1, r0
    5b64:	20a0      	movs	r0, #160	; 0xa0
    5b66:	f7ff ff75 	bl	5a54 <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    5b6a:	bd10      	pop	{r4, pc}

00005b6c <_ZL8co_uint8PK5optlv>:
    const uint8_t *d = (const uint8_t *) o->ov;
    /* extending to allow parsing 16 bit content format seen on some clients */
    /* rfc7252:  A recipient MUST be prepared to process values with 
    *            leading zero bytes.
    */
    switch (o->ol) {
    5b6c:	8842      	ldrh	r2, [r0, #2]
    const uint8_t *d = (const uint8_t *) o->ov;
    5b6e:	6843      	ldr	r3, [r0, #4]
    switch (o->ol) {
    5b70:	2a01      	cmp	r2, #1
    5b72:	d003      	beq.n	5b7c <_ZL8co_uint8PK5optlv+0x10>
    5b74:	2a02      	cmp	r2, #2
    5b76:	d003      	beq.n	5b80 <_ZL8co_uint8PK5optlv+0x14>
        case 0:     return 0;
    5b78:	2000      	movs	r0, #0
    5b7a:	e000      	b.n	5b7e <_ZL8co_uint8PK5optlv+0x12>
        case 1:     return d[0];
    5b7c:	7818      	ldrb	r0, [r3, #0]
        case 2:     return d[1];
        default:    return 0;
    }
}
    5b7e:	4770      	bx	lr
        case 2:     return d[1];
    5b80:	7858      	ldrb	r0, [r3, #1]
    5b82:	e7fc      	b.n	5b7e <_ZL8co_uint8PK5optlv+0x12>

00005b84 <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf>:
    error_t rc;

    ctx->msg = m;   /* save mbuf in context - free later */

    /* parse header */
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    5b84:	223f      	movs	r2, #63	; 0x3f
{
    5b86:	b510      	push	{r4, lr}
    ctx->msg = m;   /* save mbuf in context - free later */
    5b88:	6501      	str	r1, [r0, #80]	; 0x50
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    5b8a:	790b      	ldrb	r3, [r1, #4]
        rc = ERR_VER_NOT_SUPP;
    5b8c:	241d      	movs	r4, #29
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    5b8e:	4393      	bics	r3, r2
    5b90:	2b40      	cmp	r3, #64	; 0x40
    5b92:	d116      	bne.n	5bc2 <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf+0x3e>
    uint8_t *b = m->m_data;
    5b94:	1d0b      	adds	r3, r1, #4
        goto err;
    }
   
    ctx->hdr = b;
    5b96:	6103      	str	r3, [r0, #16]
    ctx->type = (b[0] >> 4) & 0x3;
    5b98:	790b      	ldrb	r3, [r1, #4]
    ctx->tkl  = b[0] & 0xf;
    5b9a:	3a30      	subs	r2, #48	; 0x30
    ctx->type = (b[0] >> 4) & 0x3;
    5b9c:	069b      	lsls	r3, r3, #26
    5b9e:	0f9b      	lsrs	r3, r3, #30
    5ba0:	7003      	strb	r3, [r0, #0]
    ctx->tkl  = b[0] & 0xf;
    5ba2:	790b      	ldrb	r3, [r1, #4]
    5ba4:	401a      	ands	r2, r3
    5ba6:	7042      	strb	r2, [r0, #1]
    ctx->code = b[1];
    5ba8:	794b      	ldrb	r3, [r1, #5]
    5baa:	7083      	strb	r3, [r0, #2]
    ctx->mid  = (b[2] << 8) + b[3];
    5bac:	798c      	ldrb	r4, [r1, #6]
    5bae:	79cb      	ldrb	r3, [r1, #7]
    5bb0:	0224      	lsls	r4, r4, #8
    5bb2:	191b      	adds	r3, r3, r4
    ctx->plen = 0;  /* Initialise */
    5bb4:	2400      	movs	r4, #0
    ctx->mid  = (b[2] << 8) + b[3];
    5bb6:	8083      	strh	r3, [r0, #4]
    ctx->plen = 0;  /* Initialise */
    5bb8:	6404      	str	r4, [r0, #64]	; 0x40
    /* sanity checks 
        token length <= 8
        message length > header + token
    */

    memcpy(ctx->token, b + 4, ctx->tkl);
    5bba:	3108      	adds	r1, #8
    5bbc:	3006      	adds	r0, #6
    5bbe:	f005 fe14 	bl	b7ea <memcpy>

err:
    return rc;
}
    5bc2:	0020      	movs	r0, r4
    5bc4:	bd10      	pop	{r4, pc}

00005bc6 <_Z13co_uint32_h2nPK5optlv.part.1>:
co_uint32_h2n(const struct optlv *o)
    5bc6:	6843      	ldr	r3, [r0, #4]
}
    5bc8:	6818      	ldr	r0, [r3, #0]
    5bca:	ba00      	rev	r0, r0
    5bcc:	4770      	bx	lr
	...

00005bd0 <_Z12coap_con_addtP18coap_ack_cb_info_t>:
{
    5bd0:	b570      	push	{r4, r5, r6, lr}
    dlog(LOG_DEBUG, "Adding callback for MID: 0x%x\n", mid);
    5bd2:	0002      	movs	r2, r0
{
    5bd4:	0005      	movs	r5, r0
    5bd6:	000c      	movs	r4, r1
    dlog(LOG_DEBUG, "Adding callback for MID: 0x%x\n", mid);
    5bd8:	2007      	movs	r0, #7
    5bda:	4909      	ldr	r1, [pc, #36]	; (5c00 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x30>)
    5bdc:	f7fe fb1c 	bl	4218 <_Z4dlogiPKcz>
    intrct_cb_q[intrct_cb_q_ind].mid = mid;
    5be0:	200c      	movs	r0, #12
    5be2:	4908      	ldr	r1, [pc, #32]	; (5c04 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x34>)
    5be4:	4b08      	ldr	r3, [pc, #32]	; (5c08 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x38>)
    5be6:	780a      	ldrb	r2, [r1, #0]
    5be8:	4350      	muls	r0, r2
    5bea:	52c5      	strh	r5, [r0, r3]
    intrct_cb_q[intrct_cb_q_ind].cbinfo = *cbi;
    5bec:	181b      	adds	r3, r3, r0
    5bee:	3304      	adds	r3, #4
    5bf0:	cc21      	ldmia	r4!, {r0, r5}
    5bf2:	c321      	stmia	r3!, {r0, r5}
    intrct_cb_q_ind = (intrct_cb_q_ind + 1) % MID_CB_Q_SZ;
    5bf4:	2303      	movs	r3, #3
    5bf6:	3201      	adds	r2, #1
    5bf8:	401a      	ands	r2, r3
}
    5bfa:	2000      	movs	r0, #0
    intrct_cb_q_ind = (intrct_cb_q_ind + 1) % MID_CB_Q_SZ;
    5bfc:	700a      	strb	r2, [r1, #0]
}
    5bfe:	bd70      	pop	{r4, r5, r6, pc}
    5c00:	0000fe8b 	.word	0x0000fe8b
    5c04:	200012a8 	.word	0x200012a8
    5c08:	20001278 	.word	0x20001278

00005c0c <_Z11coap_ack_rxtP4mbuf>:
{
    5c0c:	b570      	push	{r4, r5, r6, lr}
    dlog(LOG_DEBUG, "Looking up callback for MID: 0x%x\n", mid);
    5c0e:	0002      	movs	r2, r0
{
    5c10:	0005      	movs	r5, r0
    5c12:	000c      	movs	r4, r1
    dlog(LOG_DEBUG, "Looking up callback for MID: 0x%x\n", mid);
    5c14:	2007      	movs	r0, #7
    5c16:	490c      	ldr	r1, [pc, #48]	; (5c48 <_Z11coap_ack_rxtP4mbuf+0x3c>)
    5c18:	f7fe fafe 	bl	4218 <_Z4dlogiPKcz>
    5c1c:	2200      	movs	r2, #0
    5c1e:	210c      	movs	r1, #12
        if (intrct_cb_q[i].mid == mid) {
    5c20:	4b0a      	ldr	r3, [pc, #40]	; (5c4c <_Z11coap_ack_rxtP4mbuf+0x40>)
    for (i = 0; i < MID_CB_Q_SZ; i++) {
    5c22:	0016      	movs	r6, r2
    5c24:	2a04      	cmp	r2, #4
    5c26:	d00d      	beq.n	5c44 <_Z11coap_ack_rxtP4mbuf+0x38>
        if (intrct_cb_q[i].mid == mid) {
    5c28:	0008      	movs	r0, r1
    5c2a:	3201      	adds	r2, #1
    5c2c:	4350      	muls	r0, r2
    5c2e:	380c      	subs	r0, #12
    5c30:	5a18      	ldrh	r0, [r3, r0]
    5c32:	42a8      	cmp	r0, r5
    5c34:	d1f5      	bne.n	5c22 <_Z11coap_ack_rxtP4mbuf+0x16>
            return (intrct_cb_q[i].cbinfo.cb(intrct_cb_q[i].cbinfo.cbctx, m));
    5c36:	4371      	muls	r1, r6
    5c38:	185b      	adds	r3, r3, r1
    5c3a:	685a      	ldr	r2, [r3, #4]
    5c3c:	0021      	movs	r1, r4
    5c3e:	6898      	ldr	r0, [r3, #8]
    5c40:	4790      	blx	r2
}
    5c42:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_NO_ENTRY;
    5c44:	200c      	movs	r0, #12
    5c46:	e7fc      	b.n	5c42 <_Z11coap_ack_rxtP4mbuf+0x36>
    5c48:	0000fe68 	.word	0x0000fe68
    5c4c:	20001278 	.word	0x20001278

00005c50 <_Z15coap_opt_strcmpPK5optlvPKc>:
{
    5c50:	b570      	push	{r4, r5, r6, lr}
    5c52:	0003      	movs	r3, r0
    5c54:	000c      	movs	r4, r1
        return 1;
    5c56:	2001      	movs	r0, #1
    if (!str) {
    5c58:	2900      	cmp	r1, #0
    5c5a:	d00a      	beq.n	5c72 <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
    diff = strncmp((char*)opt->ov, str, opt->ol);  /* option is not NUL terminated */
    5c5c:	885d      	ldrh	r5, [r3, #2]
    5c5e:	6858      	ldr	r0, [r3, #4]
    5c60:	002a      	movs	r2, r5
    5c62:	f006 ff06 	bl	ca72 <strncmp>
    if (diff) {
    5c66:	2800      	cmp	r0, #0
    5c68:	d103      	bne.n	5c72 <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
        return (opt->ol - strlen(str));
    5c6a:	0020      	movs	r0, r4
    5c6c:	f006 fee5 	bl	ca3a <strlen>
    5c70:	1a28      	subs	r0, r5, r0
}
    5c72:	bd70      	pop	{r4, r5, r6, pc}

00005c74 <_Z12coap_pathstrPK12coap_msg_ctx>:
{
    5c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    void *it = NULL;
    5c76:	2400      	movs	r4, #0
    uristr[0] = 0;
    5c78:	4d12      	ldr	r5, [pc, #72]	; (5cc4 <_Z12coap_pathstrPK12coap_msg_ctx+0x50>)
{
    5c7a:	b085      	sub	sp, #20
    5c7c:	9001      	str	r0, [sp, #4]
    void *it = NULL;
    5c7e:	9403      	str	r4, [sp, #12]
    uristr[0] = 0;
    5c80:	702c      	strb	r4, [r5, #0]
    while ((opt = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_PATH, &it)) != NULL)
    5c82:	9801      	ldr	r0, [sp, #4]
    5c84:	aa03      	add	r2, sp, #12
    5c86:	210b      	movs	r1, #11
    5c88:	304c      	adds	r0, #76	; 0x4c
    5c8a:	f000 fd0b 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    5c8e:	1e06      	subs	r6, r0, #0
    5c90:	d012      	beq.n	5cb8 <_Z12coap_pathstrPK12coap_msg_ctx+0x44>
        if (ul + opt->ol + 1 > (int)sizeof(uristr))
    5c92:	8843      	ldrh	r3, [r0, #2]
    5c94:	191b      	adds	r3, r3, r4
    5c96:	2bff      	cmp	r3, #255	; 0xff
    5c98:	dc11      	bgt.n	5cbe <_Z12coap_pathstrPK12coap_msg_ctx+0x4a>
        uristr[ul++] = '/';
    5c9a:	232f      	movs	r3, #47	; 0x2f
    5c9c:	1c67      	adds	r7, r4, #1
    5c9e:	552b      	strb	r3, [r5, r4]
        memcpy(uristr + ul, opt->ov, opt->ol);
    5ca0:	19ec      	adds	r4, r5, r7
    5ca2:	8842      	ldrh	r2, [r0, #2]
    5ca4:	6841      	ldr	r1, [r0, #4]
    5ca6:	0020      	movs	r0, r4
    5ca8:	f005 fd9f 	bl	b7ea <memcpy>
        uristr[ul + opt->ol] = 0;
    5cac:	2200      	movs	r2, #0
    5cae:	8873      	ldrh	r3, [r6, #2]
    5cb0:	54e2      	strb	r2, [r4, r3]
        ul += opt->ol;
    5cb2:	8874      	ldrh	r4, [r6, #2]
    5cb4:	19e4      	adds	r4, r4, r7
    while ((opt = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_PATH, &it)) != NULL)
    5cb6:	e7e4      	b.n	5c82 <_Z12coap_pathstrPK12coap_msg_ctx+0xe>
    return uristr;
    5cb8:	0028      	movs	r0, r5
}
    5cba:	b005      	add	sp, #20
    5cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return NULL;
    5cbe:	2000      	movs	r0, #0
    5cc0:	e7fb      	b.n	5cba <_Z12coap_pathstrPK12coap_msg_ctx+0x46>
    5cc2:	46c0      	nop			; (mov r8, r8)
    5cc4:	20001172 	.word	0x20001172

00005cc8 <_ZL12coap_msg_logPK12coap_msg_ctx>:
{
    5cc8:	b510      	push	{r4, lr}
    5cca:	b0c0      	sub	sp, #256	; 0x100
    uriqp[0] = '\0';
    5ccc:	2300      	movs	r3, #0
    5cce:	466a      	mov	r2, sp
    5cd0:	7013      	strb	r3, [r2, #0]
            ctx->type == COAP_T_CONF_VAL ? "CON" : 
    5cd2:	7803      	ldrb	r3, [r0, #0]
{
    5cd4:	0004      	movs	r4, r0
    dlog(LOG_DEBUG, "REQ/RSP Type: %s", 
    5cd6:	4a29      	ldr	r2, [pc, #164]	; (5d7c <_ZL12coap_msg_logPK12coap_msg_ctx+0xb4>)
    5cd8:	2b00      	cmp	r3, #0
    5cda:	d006      	beq.n	5cea <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    5cdc:	4a28      	ldr	r2, [pc, #160]	; (5d80 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb8>)
    5cde:	2b01      	cmp	r3, #1
    5ce0:	d003      	beq.n	5cea <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    5ce2:	4a28      	ldr	r2, [pc, #160]	; (5d84 <_ZL12coap_msg_logPK12coap_msg_ctx+0xbc>)
    5ce4:	2b02      	cmp	r3, #2
    5ce6:	d000      	beq.n	5cea <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    5ce8:	4a27      	ldr	r2, [pc, #156]	; (5d88 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc0>)
            ctx->type == COAP_T_ACK_VAL ? "ACK" : "RST");
    5cea:	4928      	ldr	r1, [pc, #160]	; (5d8c <_ZL12coap_msg_logPK12coap_msg_ctx+0xc4>)
    5cec:	2007      	movs	r0, #7
    5cee:	f7fe fa93 	bl	4218 <_Z4dlogiPKcz>
    if ((ctx->code & COAP_CODE_C_MASK) == COAP_CODE_REQUEST) {
    5cf2:	78a3      	ldrb	r3, [r4, #2]
    5cf4:	221f      	movs	r2, #31
    5cf6:	0019      	movs	r1, r3
    5cf8:	4391      	bics	r1, r2
    5cfa:	d136      	bne.n	5d6a <_ZL12coap_msg_logPK12coap_msg_ctx+0xa2>
        dlog(LOG_DEBUG, "REQ/ACK Code: %s",
    5cfc:	4a24      	ldr	r2, [pc, #144]	; (5d90 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc8>)
    5cfe:	2b01      	cmp	r3, #1
    5d00:	d009      	beq.n	5d16 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_POST ? "POST" :
    5d02:	4a24      	ldr	r2, [pc, #144]	; (5d94 <_ZL12coap_msg_logPK12coap_msg_ctx+0xcc>)
    5d04:	2b02      	cmp	r3, #2
    5d06:	d006      	beq.n	5d16 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_PUT ? "PUT" : 
    5d08:	4a23      	ldr	r2, [pc, #140]	; (5d98 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd0>)
    5d0a:	2b03      	cmp	r3, #3
    5d0c:	d003      	beq.n	5d16 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_DELETE ? 
    5d0e:	4a23      	ldr	r2, [pc, #140]	; (5d9c <_ZL12coap_msg_logPK12coap_msg_ctx+0xd4>)
    5d10:	2b04      	cmp	r3, #4
    5d12:	d000      	beq.n	5d16 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
    5d14:	4a22      	ldr	r2, [pc, #136]	; (5da0 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd8>)
                "DELETE" : "EMPTY");
    5d16:	4923      	ldr	r1, [pc, #140]	; (5da4 <_ZL12coap_msg_logPK12coap_msg_ctx+0xdc>)
                    "Client Error" : "Server Error");
    5d18:	2007      	movs	r0, #7
    5d1a:	f7fe fa7d 	bl	4218 <_Z4dlogiPKcz>
    substr = coap_pathstr(ctx);
    5d1e:	0020      	movs	r0, r4
    5d20:	f7ff ffa8 	bl	5c74 <_Z12coap_pathstrPK12coap_msg_ctx>
    if (substr[0] != '\0') {
    5d24:	7803      	ldrb	r3, [r0, #0]
    substr = coap_pathstr(ctx);
    5d26:	0001      	movs	r1, r0
    if (substr[0] != '\0') {
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d002      	beq.n	5d32 <_ZL12coap_msg_logPK12coap_msg_ctx+0x6a>
        strcat(uriqp, substr);
    5d2c:	4668      	mov	r0, sp
    5d2e:	f006 fe65 	bl	c9fc <strcat>
    if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_QUERY, NULL))) {
    5d32:	0020      	movs	r0, r4
    5d34:	2200      	movs	r2, #0
    5d36:	304c      	adds	r0, #76	; 0x4c
    5d38:	210f      	movs	r1, #15
    5d3a:	f000 fcb3 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    5d3e:	1e04      	subs	r4, r0, #0
    5d40:	d008      	beq.n	5d54 <_ZL12coap_msg_logPK12coap_msg_ctx+0x8c>
        strcat(uriqp, "?");
    5d42:	4919      	ldr	r1, [pc, #100]	; (5da8 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe0>)
    5d44:	4668      	mov	r0, sp
    5d46:	f006 fe59 	bl	c9fc <strcat>
        strncat(uriqp, (char *)op->ov, op->ol);
    5d4a:	8862      	ldrh	r2, [r4, #2]
    5d4c:	6861      	ldr	r1, [r4, #4]
    5d4e:	4668      	mov	r0, sp
    5d50:	f006 fe7a 	bl	ca48 <strncat>
    if (uriqp[0] != '\0') {
    5d54:	466b      	mov	r3, sp
    5d56:	781b      	ldrb	r3, [r3, #0]
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d004      	beq.n	5d66 <_ZL12coap_msg_logPK12coap_msg_ctx+0x9e>
        dlog(LOG_INFO, "Uri-Path-Query: %s", uriqp);
    5d5c:	466a      	mov	r2, sp
    5d5e:	4913      	ldr	r1, [pc, #76]	; (5dac <_ZL12coap_msg_logPK12coap_msg_ctx+0xe4>)
    5d60:	2006      	movs	r0, #6
    5d62:	f7fe fa59 	bl	4218 <_Z4dlogiPKcz>
}
    5d66:	b040      	add	sp, #256	; 0x100
    5d68:	bd10      	pop	{r4, pc}
        dlog(LOG_DEBUG, "RSP Code: %s",
    5d6a:	4a11      	ldr	r2, [pc, #68]	; (5db0 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe8>)
    5d6c:	2940      	cmp	r1, #64	; 0x40
    5d6e:	d003      	beq.n	5d78 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb0>
    5d70:	4a10      	ldr	r2, [pc, #64]	; (5db4 <_ZL12coap_msg_logPK12coap_msg_ctx+0xec>)
    5d72:	2980      	cmp	r1, #128	; 0x80
    5d74:	d000      	beq.n	5d78 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb0>
    5d76:	4a10      	ldr	r2, [pc, #64]	; (5db8 <_ZL12coap_msg_logPK12coap_msg_ctx+0xf0>)
                    "Client Error" : "Server Error");
    5d78:	4910      	ldr	r1, [pc, #64]	; (5dbc <_ZL12coap_msg_logPK12coap_msg_ctx+0xf4>)
    5d7a:	e7cd      	b.n	5d18 <_ZL12coap_msg_logPK12coap_msg_ctx+0x50>
    5d7c:	00010047 	.word	0x00010047
    5d80:	00010043 	.word	0x00010043
    5d84:	0001004f 	.word	0x0001004f
    5d88:	0001004b 	.word	0x0001004b
    5d8c:	0001008f 	.word	0x0001008f
    5d90:	00010058 	.word	0x00010058
    5d94:	00010053 	.word	0x00010053
    5d98:	0001005c 	.word	0x0001005c
    5d9c:	00010066 	.word	0x00010066
    5da0:	00010060 	.word	0x00010060
    5da4:	000100a0 	.word	0x000100a0
    5da8:	0000fa59 	.word	0x0000fa59
    5dac:	000100be 	.word	0x000100be
    5db0:	0001007a 	.word	0x0001007a
    5db4:	00010082 	.word	0x00010082
    5db8:	0001006d 	.word	0x0001006d
    5dbc:	000100b1 	.word	0x000100b1

00005dc0 <_Z14coap_opt_parseP5optlvPKhi>:
{
    5dc0:	b570      	push	{r4, r5, r6, lr}
    5dc2:	260f      	movs	r6, #15
    od = b[0] >> 4;
    5dc4:	780b      	ldrb	r3, [r1, #0]
    5dc6:	111d      	asrs	r5, r3, #4
    5dc8:	b2ac      	uxth	r4, r5
    5dca:	4033      	ands	r3, r6
    if (od < 13) {
    5dcc:	2d0c      	cmp	r5, #12
    5dce:	dd13      	ble.n	5df8 <_Z14coap_opt_parseP5optlvPKhi+0x38>
    else if (od == 13) {
    5dd0:	2d0d      	cmp	r5, #13
    5dd2:	d106      	bne.n	5de2 <_Z14coap_opt_parseP5optlvPKhi+0x22>
        od += b[1];
    5dd4:	784c      	ldrb	r4, [r1, #1]
        i = 2;
    5dd6:	3d0b      	subs	r5, #11
        od += b[1];
    5dd8:	340d      	adds	r4, #13
    if (ol < 13) {
    5dda:	2b0c      	cmp	r3, #12
    5ddc:	d80e      	bhi.n	5dfc <_Z14coap_opt_parseP5optlvPKhi+0x3c>
        ol = (b[i] << 8) + b[i+1] + 269;
    5dde:	b29b      	uxth	r3, r3
    5de0:	e011      	b.n	5e06 <_Z14coap_opt_parseP5optlvPKhi+0x46>
    else if (od == 14) {
    5de2:	2d0e      	cmp	r5, #14
    5de4:	d124      	bne.n	5e30 <_Z14coap_opt_parseP5optlvPKhi+0x70>
        od = (b[1] << 8) + b[2] + 269;
    5de6:	788c      	ldrb	r4, [r1, #2]
    5de8:	784d      	ldrb	r5, [r1, #1]
    5dea:	340e      	adds	r4, #14
    5dec:	022d      	lsls	r5, r5, #8
    5dee:	34ff      	adds	r4, #255	; 0xff
    5df0:	1964      	adds	r4, r4, r5
    5df2:	b2a4      	uxth	r4, r4
        i = 3;
    5df4:	2503      	movs	r5, #3
    5df6:	e7f0      	b.n	5dda <_Z14coap_opt_parseP5optlvPKhi+0x1a>
        i = 1;
    5df8:	2501      	movs	r5, #1
    5dfa:	e7ee      	b.n	5dda <_Z14coap_opt_parseP5optlvPKhi+0x1a>
    else if (ol == 13) {
    5dfc:	2b0d      	cmp	r3, #13
    5dfe:	d10d      	bne.n	5e1c <_Z14coap_opt_parseP5optlvPKhi+0x5c>
        ol += b[i];
    5e00:	5d4b      	ldrb	r3, [r1, r5]
        i++;
    5e02:	3501      	adds	r5, #1
        ol += b[i];
    5e04:	330d      	adds	r3, #13
    if (len < i || len < i + ol) {
    5e06:	4295      	cmp	r5, r2
    5e08:	dc12      	bgt.n	5e30 <_Z14coap_opt_parseP5optlvPKhi+0x70>
    5e0a:	195e      	adds	r6, r3, r5
    5e0c:	42b2      	cmp	r2, r6
    5e0e:	db0f      	blt.n	5e30 <_Z14coap_opt_parseP5optlvPKhi+0x70>
    o->ov = b + i;
    5e10:	1949      	adds	r1, r1, r5
    o->ot = od;
    5e12:	8004      	strh	r4, [r0, #0]
    o->ol = ol;
    5e14:	8043      	strh	r3, [r0, #2]
    o->ov = b + i;
    5e16:	6041      	str	r1, [r0, #4]
}
    5e18:	0030      	movs	r0, r6
    5e1a:	bd70      	pop	{r4, r5, r6, pc}
    else if (od == 14) {
    5e1c:	2c0e      	cmp	r4, #14
    5e1e:	d107      	bne.n	5e30 <_Z14coap_opt_parseP5optlvPKhi+0x70>
        ol = (b[i] << 8) + b[i+1] + 269;
    5e20:	5d4e      	ldrb	r6, [r1, r5]
    5e22:	194b      	adds	r3, r1, r5
    5e24:	785b      	ldrb	r3, [r3, #1]
    5e26:	0236      	lsls	r6, r6, #8
    5e28:	199b      	adds	r3, r3, r6
    5e2a:	330e      	adds	r3, #14
    5e2c:	33ff      	adds	r3, #255	; 0xff
    5e2e:	e7d6      	b.n	5dde <_Z14coap_opt_parseP5optlvPKhi+0x1e>
    return -1;
    5e30:	2601      	movs	r6, #1
    5e32:	4276      	negs	r6, r6
    5e34:	e7f0      	b.n	5e18 <_Z14coap_opt_parseP5optlvPKhi+0x58>
	...

00005e38 <_Z12coap_opt_addPK5optlvPhi>:
{
    5e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e3a:	000e      	movs	r6, r1
    if ((o->ot > 255 + 13) || (o->ol > 255 + 13)) {
    5e3c:	2186      	movs	r1, #134	; 0x86
    5e3e:	8803      	ldrh	r3, [r0, #0]
{
    5e40:	0005      	movs	r5, r0
    if ((o->ot > 255 + 13) || (o->ol > 255 + 13)) {
    5e42:	0049      	lsls	r1, r1, #1
    5e44:	428b      	cmp	r3, r1
    5e46:	dc34      	bgt.n	5eb2 <_Z12coap_opt_addPK5optlvPhi+0x7a>
    5e48:	8847      	ldrh	r7, [r0, #2]
    5e4a:	428f      	cmp	r7, r1
    5e4c:	dc31      	bgt.n	5eb2 <_Z12coap_opt_addPK5optlvPhi+0x7a>
    5e4e:	a901      	add	r1, sp, #4
    if (o->ot < 13) {
    5e50:	2b0c      	cmp	r3, #12
    5e52:	dc12      	bgt.n	5e7a <_Z12coap_opt_addPK5optlvPhi+0x42>
        *op++ = o->ot << 4;
    5e54:	011b      	lsls	r3, r3, #4
    5e56:	700b      	strb	r3, [r1, #0]
    5e58:	466b      	mov	r3, sp
    5e5a:	1d5c      	adds	r4, r3, #5
    if (o->ol < 13) {
    5e5c:	2f0c      	cmp	r7, #12
    5e5e:	dc13      	bgt.n	5e88 <_Z12coap_opt_addPK5optlvPhi+0x50>
        oh[0] |= o->ol;
    5e60:	780b      	ldrb	r3, [r1, #0]
    5e62:	433b      	orrs	r3, r7
    5e64:	700b      	strb	r3, [r1, #0]
    ohl = op - oh;
    5e66:	1a64      	subs	r4, r4, r1
    if (ohl + o->ol > len) {
    5e68:	193f      	adds	r7, r7, r4
    5e6a:	4297      	cmp	r7, r2
    5e6c:	dd15      	ble.n	5e9a <_Z12coap_opt_addPK5optlvPhi+0x62>
        dlog(LOG_ERR, "Insufficient buffer space to add option\n");
    5e6e:	2003      	movs	r0, #3
    5e70:	4911      	ldr	r1, [pc, #68]	; (5eb8 <_Z12coap_opt_addPK5optlvPhi+0x80>)
    5e72:	f7fe f9d1 	bl	4218 <_Z4dlogiPKcz>
        return 0;
    5e76:	2000      	movs	r0, #0
}
    5e78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *op++ = o->ot - 13;
    5e7a:	3b0d      	subs	r3, #13
        *op++ = 13 << 4;
    5e7c:	20d0      	movs	r0, #208	; 0xd0
        *op++ = o->ot - 13;
    5e7e:	704b      	strb	r3, [r1, #1]
    5e80:	466b      	mov	r3, sp
        *op++ = 13 << 4;
    5e82:	7008      	strb	r0, [r1, #0]
        *op++ = o->ot - 13;
    5e84:	1d9c      	adds	r4, r3, #6
    5e86:	e7e9      	b.n	5e5c <_Z12coap_opt_addPK5optlvPhi+0x24>
        oh[0] |= 13;
    5e88:	230d      	movs	r3, #13
    5e8a:	7808      	ldrb	r0, [r1, #0]
    5e8c:	4303      	orrs	r3, r0
    5e8e:	700b      	strb	r3, [r1, #0]
        *op++ = o->ol - 13;
    5e90:	003b      	movs	r3, r7
    5e92:	3b0d      	subs	r3, #13
    5e94:	7023      	strb	r3, [r4, #0]
    5e96:	3401      	adds	r4, #1
    5e98:	e7e5      	b.n	5e66 <_Z12coap_opt_addPK5optlvPhi+0x2e>
    memcpy(b, oh, ohl);
    5e9a:	0022      	movs	r2, r4
    5e9c:	0030      	movs	r0, r6
    5e9e:	f005 fca4 	bl	b7ea <memcpy>
    memmove(b + ohl, o->ov, o->ol);
    5ea2:	886a      	ldrh	r2, [r5, #2]
    5ea4:	1930      	adds	r0, r6, r4
    5ea6:	6869      	ldr	r1, [r5, #4]
    5ea8:	f005 fca8 	bl	b7fc <memmove>
    return (o->ol + ohl);
    5eac:	8868      	ldrh	r0, [r5, #2]
    5eae:	1900      	adds	r0, r0, r4
    5eb0:	e7e2      	b.n	5e78 <_Z12coap_opt_addPK5optlvPhi+0x40>
        return -1;
    5eb2:	2001      	movs	r0, #1
    5eb4:	4240      	negs	r0, r0
    5eb6:	e7df      	b.n	5e78 <_Z12coap_opt_addPK5optlvPhi+0x40>
    5eb8:	0000feaa 	.word	0x0000feaa

00005ebc <_Z13co_uint32_n2hPK5optlv>:
{
    5ebc:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    5ebe:	8842      	ldrh	r2, [r0, #2]
{
    5ec0:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    5ec2:	2a04      	cmp	r2, #4
    5ec4:	d906      	bls.n	5ed4 <_Z13co_uint32_n2hPK5optlv+0x18>
    5ec6:	2120      	movs	r1, #32
    5ec8:	4b14      	ldr	r3, [pc, #80]	; (5f1c <_Z13co_uint32_n2hPK5optlv+0x60>)
    5eca:	4a15      	ldr	r2, [pc, #84]	; (5f20 <_Z13co_uint32_n2hPK5optlv+0x64>)
    5ecc:	31ff      	adds	r1, #255	; 0xff
    5ece:	4815      	ldr	r0, [pc, #84]	; (5f24 <_Z13co_uint32_n2hPK5optlv+0x68>)
    5ed0:	f005 fb0e 	bl	b4f0 <__assert_func>
    switch (o->ol) {
    5ed4:	3a01      	subs	r2, #1
    uint32_t b = 0;
    5ed6:	2000      	movs	r0, #0
    switch (o->ol) {
    5ed8:	2a03      	cmp	r2, #3
    5eda:	d806      	bhi.n	5eea <_Z13co_uint32_n2hPK5optlv+0x2e>
    5edc:	0010      	movs	r0, r2
    5ede:	f002 fb2b 	bl	8538 <__gnu_thumb1_case_uqi>
    5ee2:	0502      	.short	0x0502
    5ee4:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    5ee6:	685b      	ldr	r3, [r3, #4]
    5ee8:	7818      	ldrb	r0, [r3, #0]
}
    5eea:	bd10      	pop	{r4, pc}
    case 2: b = ntohs(*(uint16_t *)(o->ov));
    5eec:	685b      	ldr	r3, [r3, #4]
    5eee:	881b      	ldrh	r3, [r3, #0]
    5ef0:	0a18      	lsrs	r0, r3, #8
    5ef2:	021b      	lsls	r3, r3, #8
    5ef4:	4318      	orrs	r0, r3
    5ef6:	b280      	uxth	r0, r0
            break;
    5ef8:	e7f7      	b.n	5eea <_Z13co_uint32_n2hPK5optlv+0x2e>
    case 3: b = ntohl(*(uint32_t *)(o->ov) << 8);
    5efa:	685b      	ldr	r3, [r3, #4]
    5efc:	490a      	ldr	r1, [pc, #40]	; (5f28 <_Z13co_uint32_n2hPK5optlv+0x6c>)
    5efe:	681b      	ldr	r3, [r3, #0]
    5f00:	0218      	lsls	r0, r3, #8
    5f02:	041a      	lsls	r2, r3, #16
    5f04:	400a      	ands	r2, r1
    5f06:	0e00      	lsrs	r0, r0, #24
    5f08:	4310      	orrs	r0, r2
    5f0a:	22ff      	movs	r2, #255	; 0xff
    5f0c:	0212      	lsls	r2, r2, #8
    5f0e:	4013      	ands	r3, r2
    5f10:	4318      	orrs	r0, r3
            break;
    5f12:	e7ea      	b.n	5eea <_Z13co_uint32_n2hPK5optlv+0x2e>
    5f14:	0018      	movs	r0, r3
    5f16:	f7ff fe56 	bl	5bc6 <_Z13co_uint32_h2nPK5optlv.part.1>
    5f1a:	e7e6      	b.n	5eea <_Z13co_uint32_n2hPK5optlv+0x2e>
    5f1c:	0000fed3 	.word	0x0000fed3
    5f20:	000100f6 	.word	0x000100f6
    5f24:	0000feed 	.word	0x0000feed
    5f28:	00ffff00 	.word	0x00ffff00

00005f2c <_Z13co_uint32_h2nPK5optlv>:
{
    5f2c:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    5f2e:	8842      	ldrh	r2, [r0, #2]
{
    5f30:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    5f32:	2a04      	cmp	r2, #4
    5f34:	d906      	bls.n	5f44 <_Z13co_uint32_h2nPK5optlv+0x18>
    5f36:	2136      	movs	r1, #54	; 0x36
    5f38:	4b14      	ldr	r3, [pc, #80]	; (5f8c <_Z13co_uint32_h2nPK5optlv+0x60>)
    5f3a:	4a15      	ldr	r2, [pc, #84]	; (5f90 <_Z13co_uint32_h2nPK5optlv+0x64>)
    5f3c:	31ff      	adds	r1, #255	; 0xff
    5f3e:	4815      	ldr	r0, [pc, #84]	; (5f94 <_Z13co_uint32_h2nPK5optlv+0x68>)
    5f40:	f005 fad6 	bl	b4f0 <__assert_func>
    switch (o->ol) {
    5f44:	3a01      	subs	r2, #1
    uint32_t b = 0;
    5f46:	2000      	movs	r0, #0
    switch (o->ol) {
    5f48:	2a03      	cmp	r2, #3
    5f4a:	d806      	bhi.n	5f5a <_Z13co_uint32_h2nPK5optlv+0x2e>
    5f4c:	0010      	movs	r0, r2
    5f4e:	f002 faf3 	bl	8538 <__gnu_thumb1_case_uqi>
    5f52:	0502      	.short	0x0502
    5f54:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    5f56:	685b      	ldr	r3, [r3, #4]
    5f58:	7818      	ldrb	r0, [r3, #0]
}
    5f5a:	bd10      	pop	{r4, pc}
    case 2: b = htons(*(uint16_t *)(o->ov));
    5f5c:	685b      	ldr	r3, [r3, #4]
    5f5e:	881b      	ldrh	r3, [r3, #0]
    5f60:	0a18      	lsrs	r0, r3, #8
    5f62:	021b      	lsls	r3, r3, #8
    5f64:	4318      	orrs	r0, r3
    5f66:	b280      	uxth	r0, r0
            break;
    5f68:	e7f7      	b.n	5f5a <_Z13co_uint32_h2nPK5optlv+0x2e>
    case 3: b = htonl(*(uint32_t *)(o->ov) << 8);
    5f6a:	685b      	ldr	r3, [r3, #4]
    5f6c:	490a      	ldr	r1, [pc, #40]	; (5f98 <_Z13co_uint32_h2nPK5optlv+0x6c>)
    5f6e:	681b      	ldr	r3, [r3, #0]
    5f70:	0218      	lsls	r0, r3, #8
    5f72:	041a      	lsls	r2, r3, #16
    5f74:	400a      	ands	r2, r1
    5f76:	0e00      	lsrs	r0, r0, #24
    5f78:	4310      	orrs	r0, r2
    5f7a:	22ff      	movs	r2, #255	; 0xff
    5f7c:	0212      	lsls	r2, r2, #8
    5f7e:	4013      	ands	r3, r2
    5f80:	4318      	orrs	r0, r3
            break;
    5f82:	e7ea      	b.n	5f5a <_Z13co_uint32_h2nPK5optlv+0x2e>
    5f84:	0018      	movs	r0, r3
    5f86:	f7ff fe1e 	bl	5bc6 <_Z13co_uint32_h2nPK5optlv.part.1>
    5f8a:	e7e6      	b.n	5f5a <_Z13co_uint32_h2nPK5optlv+0x2e>
    5f8c:	0000fed3 	.word	0x0000fed3
    5f90:	000100d1 	.word	0x000100d1
    5f94:	0000feed 	.word	0x0000feed
    5f98:	00ffff00 	.word	0x00ffff00

00005f9c <_Z11get_mid_valv>:
{
    5f9c:	b510      	push	{r4, lr}
    if (!mid_val) 
    5f9e:	4c05      	ldr	r4, [pc, #20]	; (5fb4 <_Z11get_mid_valv+0x18>)
    5fa0:	8823      	ldrh	r3, [r4, #0]
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d102      	bne.n	5fac <_Z11get_mid_valv+0x10>
        uint32_t epoch = get_rtc_epoch();
    5fa6:	f7fe f89f 	bl	40e8 <_Z13get_rtc_epochv>
        mid_val = (uint16_t) ( epoch & 0x0000FFFF );
    5faa:	8020      	strh	r0, [r4, #0]
    return mid_val++;
    5fac:	8820      	ldrh	r0, [r4, #0]
    5fae:	1c43      	adds	r3, r0, #1
    5fb0:	8023      	strh	r3, [r4, #0]
}
    5fb2:	bd10      	pop	{r4, pc}
    5fb4:	20001170 	.word	0x20001170

00005fb8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh>:
 * @return: 0 on success, nonzero error/special handling code. 
 */
error_t coap_msg_parse(struct coap_msg_ctx *ctx, struct mbuf *m, uint8_t *code)
{
    int i, osize, mdatalen;
    uint8_t *b = m->m_data; /* assuming single buffer */
    5fb8:	000b      	movs	r3, r1
{
    5fba:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t *b = m->m_data; /* assuming single buffer */
    5fbc:	3304      	adds	r3, #4
{
    5fbe:	b08b      	sub	sp, #44	; 0x2c
    uint8_t *b = m->m_data; /* assuming single buffer */
    5fc0:	9305      	str	r3, [sp, #20]
    int len = m->m_pktlen;
    5fc2:	880b      	ldrh	r3, [r1, #0]
{
    5fc4:	0006      	movs	r6, r0
    int len = m->m_pktlen;
    5fc6:	9302      	str	r3, [sp, #8]
    uint16_t ot;
    error_t rc;
    uint32_t obsval;

    /* Default code, indicating everything okay, so far. */
    *code = COAP_RSP_205_CONTENT;
    5fc8:	2345      	movs	r3, #69	; 0x45
{
    5fca:	9104      	str	r1, [sp, #16]
    *code = COAP_RSP_205_CONTENT;
    5fcc:	7013      	strb	r3, [r2, #0]
{
    5fce:	9203      	str	r2, [sp, #12]

    ddump(LOG_DEBUG, "CoAP REQ decode", b, len);
    5fd0:	9b02      	ldr	r3, [sp, #8]
    5fd2:	9a05      	ldr	r2, [sp, #20]
    5fd4:	4953      	ldr	r1, [pc, #332]	; (6124 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x16c>)
    5fd6:	2007      	movs	r0, #7
    5fd8:	f7fe f940 	bl	425c <_Z5ddumpiPKcPKvi>
    
    if ((rc = coap_hdr_parse(ctx, m)) != ERR_OK) {
    5fdc:	9904      	ldr	r1, [sp, #16]
    5fde:	0030      	movs	r0, r6
    5fe0:	f7ff fdd0 	bl	5b84 <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf>
    5fe4:	9001      	str	r0, [sp, #4]
    5fe6:	2800      	cmp	r0, #0
    5fe8:	d13d      	bne.n	6066 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        goto err;
    }

    i = 4 + ctx->tkl;

    ctx->final = 1; /* default value, not ongoing observe */
    5fea:	2701      	movs	r7, #1
    i = 4 + ctx->tkl;
    5fec:	7875      	ldrb	r5, [r6, #1]
    ctx->oidx = i;  /* where options will start, or maybe payload marker */

    if (ctx->code == COAP_EMPTY_MESSAGE) {
    5fee:	78b3      	ldrb	r3, [r6, #2]
    i = 4 + ctx->tkl;
    5ff0:	3504      	adds	r5, #4
    ctx->final = 1; /* default value, not ongoing observe */
    5ff2:	64b7      	str	r7, [r6, #72]	; 0x48
    ctx->oidx = i;  /* where options will start, or maybe payload marker */
    5ff4:	61b5      	str	r5, [r6, #24]
    if (ctx->code == COAP_EMPTY_MESSAGE) {
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	d035      	beq.n	6066 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        /* ignore everything else */
        return ERR_OK;
    }

    // Make sure the packet length is not greater than what is allocated by m_get()
	mdatalen = get_mbuf_data_size()-16;
    5ffa:	f001 f94b 	bl	7294 <_Z18get_mbuf_data_sizev>
    if ( len > mdatalen )
    5ffe:	9b02      	ldr	r3, [sp, #8]
	mdatalen = get_mbuf_data_size()-16;
    6000:	3810      	subs	r0, #16
    if ( len > mdatalen )
    6002:	4283      	cmp	r3, r0
    6004:	dc32      	bgt.n	606c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xb4>
    6006:	9c01      	ldr	r4, [sp, #4]
                ctx->final = 0;
            }
            break;
        default:
            /* unhandled critical option */
            if (COAP_OPTION_CRITICAL(ot)) {
    6008:	9707      	str	r7, [sp, #28]
    while ((osize = coap_opt_parse(&opt, b + i, len - i)) > 0) {
    600a:	9b05      	ldr	r3, [sp, #20]
    600c:	a808      	add	r0, sp, #32
    600e:	195f      	adds	r7, r3, r5
    6010:	9b02      	ldr	r3, [sp, #8]
    6012:	0039      	movs	r1, r7
    6014:	1b5a      	subs	r2, r3, r5
    6016:	f7ff fed3 	bl	5dc0 <_Z14coap_opt_parseP5optlvPKhi>
    601a:	9006      	str	r0, [sp, #24]
    601c:	2800      	cmp	r0, #0
    601e:	dd63      	ble.n	60e8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x130>
        ot += opt.ot;
    6020:	ab08      	add	r3, sp, #32
    6022:	881b      	ldrh	r3, [r3, #0]
        dlog(LOG_DEBUG, "option type: %u len: %u", ot, opt.ol);
    6024:	4940      	ldr	r1, [pc, #256]	; (6128 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x170>)
        ot += opt.ot;
    6026:	18e4      	adds	r4, r4, r3
    6028:	b2a4      	uxth	r4, r4
        dlog(LOG_DEBUG, "option type: %u len: %u", ot, opt.ol);
    602a:	ab08      	add	r3, sp, #32
    602c:	885b      	ldrh	r3, [r3, #2]
    602e:	0022      	movs	r2, r4
    6030:	2007      	movs	r0, #7
    6032:	f7fe f8f1 	bl	4218 <_Z4dlogiPKcz>
        ddump(LOG_DEBUG, "option", opt.ov, opt.ol);
    6036:	ab08      	add	r3, sp, #32
    6038:	885b      	ldrh	r3, [r3, #2]
    603a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    603c:	493b      	ldr	r1, [pc, #236]	; (612c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x174>)
    603e:	2007      	movs	r0, #7
    6040:	f7fe f90c 	bl	425c <_Z5ddumpiPKcPKvi>
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    6044:	0030      	movs	r0, r6
        opt.ot = ot;
    6046:	ab08      	add	r3, sp, #32
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    6048:	0019      	movs	r1, r3
    604a:	304c      	adds	r0, #76	; 0x4c
        opt.ot = ot;
    604c:	801c      	strh	r4, [r3, #0]
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    604e:	f000 fae7 	bl	6620 <_Z12copt_add_optP5sl_coP5optlv>
    6052:	1e07      	subs	r7, r0, #0
    6054:	d010      	beq.n	6078 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xc0>
            dlog(LOG_ALERT, "Couldn't save option data");
    6056:	4936      	ldr	r1, [pc, #216]	; (6130 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x178>)
    6058:	2001      	movs	r0, #1
    605a:	f7fe f8dd 	bl	4218 <_Z4dlogiPKcz>
            *code = COAP_RSP_500_INTERNAL_ERROR;
    605e:	23a0      	movs	r3, #160	; 0xa0
    6060:	9a03      	ldr	r2, [sp, #12]
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    6062:	9701      	str	r7, [sp, #4]
            *code = COAP_RSP_500_INTERNAL_ERROR;
    6064:	7013      	strb	r3, [r2, #0]
    m->m_pktlen = len;

    coap_msg_log(ctx);
err:
    return rc;
}
    6066:	9801      	ldr	r0, [sp, #4]
    6068:	b00b      	add	sp, #44	; 0x2c
    606a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*code = COAP_RSP_413_REQ_TOO_LARGE;
    606c:	238d      	movs	r3, #141	; 0x8d
    606e:	9a03      	ldr	r2, [sp, #12]
    6070:	7013      	strb	r3, [r2, #0]
		return ERR_MSGSIZE;
    6072:	3b83      	subs	r3, #131	; 0x83
                rc = ERR_OP_NOT_SUPP;
    6074:	9301      	str	r3, [sp, #4]
                goto err;
    6076:	e7f6      	b.n	6066 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        i += osize;
    6078:	9b06      	ldr	r3, [sp, #24]
    607a:	18ed      	adds	r5, r5, r3
        switch (ot) {
    607c:	2c0f      	cmp	r4, #15
    607e:	d820      	bhi.n	60c2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x10a>
    6080:	2c0e      	cmp	r4, #14
    6082:	d2c2      	bcs.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    6084:	2c07      	cmp	r4, #7
    6086:	d0c0      	beq.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    6088:	d810      	bhi.n	60ac <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xf4>
    608a:	2c03      	cmp	r4, #3
    608c:	d0bd      	beq.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    608e:	2c06      	cmp	r4, #6
    6090:	d022      	beq.n	60d8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x120>
            if (COAP_OPTION_CRITICAL(ot)) {
    6092:	9b07      	ldr	r3, [sp, #28]
    6094:	421c      	tst	r4, r3
    6096:	d0b8      	beq.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
                dlog(LOG_ERR, "unhandled critical option %d\n", ot);
    6098:	0022      	movs	r2, r4
    609a:	4926      	ldr	r1, [pc, #152]	; (6134 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x17c>)
    609c:	2003      	movs	r0, #3
    609e:	f7fe f8bb 	bl	4218 <_Z4dlogiPKcz>
                *code = COAP_RSP_402_BAD_OPTION;
    60a2:	2382      	movs	r3, #130	; 0x82
    60a4:	9a03      	ldr	r2, [sp, #12]
    60a6:	7013      	strb	r3, [r2, #0]
                rc = ERR_OP_NOT_SUPP;
    60a8:	3b81      	subs	r3, #129	; 0x81
    60aa:	e7e3      	b.n	6074 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xbc>
        switch (ot) {
    60ac:	2c0b      	cmp	r4, #11
    60ae:	d0ac      	beq.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    60b0:	2c0c      	cmp	r4, #12
    60b2:	d1ee      	bne.n	6092 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
            ctx->cf = co_uint8(&opt)    ;/*FIXME*/
    60b4:	a808      	add	r0, sp, #32
    60b6:	f7ff fd59 	bl	5b6c <_ZL8co_uint8PK5optlv>
    60ba:	0033      	movs	r3, r6
    60bc:	333c      	adds	r3, #60	; 0x3c
    60be:	7018      	strb	r0, [r3, #0]
            break;
    60c0:	e7a3      	b.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
        switch (ot) {
    60c2:	2c17      	cmp	r4, #23
    60c4:	d0a1      	beq.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    60c6:	d802      	bhi.n	60ce <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x116>
    60c8:	2c11      	cmp	r4, #17
    60ca:	d0f3      	beq.n	60b4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xfc>
    60cc:	e7e1      	b.n	6092 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
    60ce:	2c23      	cmp	r4, #35	; 0x23
    60d0:	d09b      	beq.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    60d2:	2c27      	cmp	r4, #39	; 0x27
    60d4:	d1dd      	bne.n	6092 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
    60d6:	e798      	b.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
            obsval = co_uint32_n2h(&opt);
    60d8:	a808      	add	r0, sp, #32
    60da:	f7ff feef 	bl	5ebc <_Z13co_uint32_n2hPK5optlv>
            if (obsval == COAP_OBS_REG) {
    60de:	2800      	cmp	r0, #0
    60e0:	d000      	beq.n	60e4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x12c>
    60e2:	e792      	b.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
                ctx->final = 0;
    60e4:	64b0      	str	r0, [r6, #72]	; 0x48
    60e6:	e790      	b.n	600a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    if (ot && i != len) {
    60e8:	2c00      	cmp	r4, #0
    60ea:	d00f      	beq.n	610c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x154>
    60ec:	9b02      	ldr	r3, [sp, #8]
    60ee:	429d      	cmp	r5, r3
    60f0:	d00c      	beq.n	610c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x154>
        if (b[i] != 0xFF) {
    60f2:	783b      	ldrb	r3, [r7, #0]
    60f4:	2bff      	cmp	r3, #255	; 0xff
    60f6:	d008      	beq.n	610a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x152>
            dlog(LOG_ERR, "missing option separator FF");
    60f8:	490f      	ldr	r1, [pc, #60]	; (6138 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x180>)
    60fa:	2003      	movs	r0, #3
    60fc:	f7fe f88c 	bl	4218 <_Z4dlogiPKcz>
            *code = COAP_RSP_415_UNSUPPORTED_CFORMAT;
    6100:	238f      	movs	r3, #143	; 0x8f
    6102:	9a03      	ldr	r2, [sp, #12]
    6104:	7013      	strb	r3, [r2, #0]
            rc = ERR_BAD_DATA;
    6106:	3b7b      	subs	r3, #123	; 0x7b
    6108:	e7b4      	b.n	6074 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xbc>
        i++;
    610a:	3501      	adds	r5, #1
    m->m_pktlen = len;
    610c:	466a      	mov	r2, sp
    ctx->plen = len - i;
    610e:	9b02      	ldr	r3, [sp, #8]
    ctx->hdrlen = i;
    6110:	6175      	str	r5, [r6, #20]
    m->m_pktlen = len;
    6112:	8912      	ldrh	r2, [r2, #8]
    ctx->plen = len - i;
    6114:	1b5d      	subs	r5, r3, r5
    m->m_pktlen = len;
    6116:	9b04      	ldr	r3, [sp, #16]
    ctx->plen = len - i;
    6118:	6435      	str	r5, [r6, #64]	; 0x40
    coap_msg_log(ctx);
    611a:	0030      	movs	r0, r6
    m->m_pktlen = len;
    611c:	801a      	strh	r2, [r3, #0]
    coap_msg_log(ctx);
    611e:	f7ff fdd3 	bl	5cc8 <_ZL12coap_msg_logPK12coap_msg_ctx>
    6122:	e7a0      	b.n	6066 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
    6124:	0000ff37 	.word	0x0000ff37
    6128:	0000ff47 	.word	0x0000ff47
    612c:	000103aa 	.word	0x000103aa
    6130:	0000ff5f 	.word	0x0000ff5f
    6134:	0000ff79 	.word	0x0000ff79
    6138:	0000ff97 	.word	0x0000ff97

0000613c <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>:

/* initialize response message context based on request + mbuf */
void       
coap_init_rsp(const struct coap_msg_ctx *req, struct coap_msg_ctx *rsp, 
              struct mbuf *m)
{
    613c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    613e:	000c      	movs	r4, r1
    struct optlv *op;
    memset(rsp, 0, sizeof(*rsp));
    copt_init((sl_co*)&(rsp->oh));
    6140:	0026      	movs	r6, r4
{
    6142:	0005      	movs	r5, r0
    memset(rsp, 0, sizeof(*rsp));
    6144:	2100      	movs	r1, #0
{
    6146:	0017      	movs	r7, r2
    memset(rsp, 0, sizeof(*rsp));
    6148:	0020      	movs	r0, r4
    614a:	2254      	movs	r2, #84	; 0x54
    copt_init((sl_co*)&(rsp->oh));
    614c:	364c      	adds	r6, #76	; 0x4c
    memset(rsp, 0, sizeof(*rsp));
    614e:	f005 fb67 	bl	b820 <memset>
    copt_init((sl_co*)&(rsp->oh));
    6152:	0030      	movs	r0, r6
    6154:	f000 fa30 	bl	65b8 <_Z9copt_initP5sl_co>
    /*
     * type will be a bit tricker than this. CON->ACK, except if it's empty,
     * then RST. NON->NON. We need to know more about the message before
     * setting the RSP type.
     */
    rsp->type = req->type;
    6158:	782b      	ldrb	r3, [r5, #0]
    rsp->tkl = req->tkl;
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    615a:	1da9      	adds	r1, r5, #6
    rsp->type = req->type;
    615c:	7023      	strb	r3, [r4, #0]
    rsp->tkl = req->tkl;
    615e:	786b      	ldrb	r3, [r5, #1]
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    6160:	2208      	movs	r2, #8
    rsp->tkl = req->tkl;
    6162:	7063      	strb	r3, [r4, #1]
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    6164:	1da0      	adds	r0, r4, #6
    6166:	f005 fb40 	bl	b7ea <memcpy>

    /*
     * TODO OBS: Could replicate behaviour by adding the option. Need to know
     * when to add a value. Maybe this isn't required. Check context of calls.
     */
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    616a:	0028      	movs	r0, r5
    rsp->mid = req->mid;
    616c:	88ab      	ldrh	r3, [r5, #4]
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    616e:	304c      	adds	r0, #76	; 0x4c
    rsp->mid = req->mid;
    6170:	80a3      	strh	r3, [r4, #4]
    rsp->client = req->client;
    6172:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    6174:	2200      	movs	r2, #0
    rsp->client = req->client;
    6176:	6463      	str	r3, [r4, #68]	; 0x44
    rsp->final = req->final;
    6178:	6cab      	ldr	r3, [r5, #72]	; 0x48
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    617a:	2106      	movs	r1, #6
    rsp->final = req->final;
    617c:	64a3      	str	r3, [r4, #72]	; 0x48
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    617e:	f000 fa91 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6182:	2800      	cmp	r0, #0
    6184:	d015      	beq.n	61b2 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
               != NULL) {
        uint32_t obsval = co_uint32_n2h(op);
    6186:	f7ff fe99 	bl	5ebc <_Z13co_uint32_n2hPK5optlv>
        if (!rsp->final && obsval == COAP_OBS_REG) {
    618a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    618c:	2b00      	cmp	r3, #0
    618e:	d110      	bne.n	61b2 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
    6190:	2800      	cmp	r0, #0
    6192:	d10e      	bne.n	61b2 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
            /*
             * If this is proxied, then this info isn't used to build the
             * response anyway. The sensor sends the packet. The same applies
             * for local async observe.
             */
            nop.ot = COAP_OPTION_OBSERVE;
    6194:	466a      	mov	r2, sp
            nop.ol = 3;
    6196:	2503      	movs	r5, #3
            nop.ot = COAP_OPTION_OBSERVE;
    6198:	3306      	adds	r3, #6
            if (copt_add_opt((sl_co*)&(rsp->oh), &nop) != ERR_OK) {
    619a:	4669      	mov	r1, sp
    619c:	0030      	movs	r0, r6
            nop.ot = COAP_OPTION_OBSERVE;
    619e:	8013      	strh	r3, [r2, #0]
            nop.ol = 3;
    61a0:	8055      	strh	r5, [r2, #2]
            if (copt_add_opt((sl_co*)&(rsp->oh), &nop) != ERR_OK) {
    61a2:	f000 fa3d 	bl	6620 <_Z12copt_add_optP5sl_coP5optlv>
    61a6:	2800      	cmp	r0, #0
    61a8:	d003      	beq.n	61b2 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
                dlog(LOG_ERR, "Couldn't add observe option");
    61aa:	4903      	ldr	r1, [pc, #12]	; (61b8 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x7c>)
    61ac:	0028      	movs	r0, r5
    61ae:	f7fe f833 	bl	4218 <_Z4dlogiPKcz>
            }
        }
    }

    rsp->msg = m;
    61b2:	6527      	str	r7, [r4, #80]	; 0x50
}
    61b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    61b6:	46c0      	nop			; (mov r8, r8)
    61b8:	0000ff1b 	.word	0x0000ff1b

000061bc <_Z17coap_msg_responseP12coap_msg_ctx>:
 *
 * @return: Status; 0 - OK.
 */
error_t
coap_msg_response(struct coap_msg_ctx *ctx)
{
    61bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    61be:	0006      	movs	r6, r0
    61c0:	b08d      	sub	sp, #52	; 0x34

    int idx = 4;
    struct mbuf *n;


    coap_msg_log(ctx);
    61c2:	f7ff fd81 	bl	5cc8 <_ZL12coap_msg_logPK12coap_msg_ctx>

    b[0] = COAP_VER | COAP_T_VAL2PDU(ctx->type);
    61c6:	2340      	movs	r3, #64	; 0x40
    61c8:	7832      	ldrb	r2, [r6, #0]
    61ca:	ad05      	add	r5, sp, #20
    61cc:	0112      	lsls	r2, r2, #4
    61ce:	4313      	orrs	r3, r2
    61d0:	702b      	strb	r3, [r5, #0]
    if (ctx->code == COAP_EMPTY_MESSAGE) {
    61d2:	78b3      	ldrb	r3, [r6, #2]
    61d4:	2b00      	cmp	r3, #0
    61d6:	d11c      	bne.n	6212 <_Z17coap_msg_responseP12coap_msg_ctx+0x56>
    int idx = 4;
    61d8:	2404      	movs	r4, #4
        b[1] = COAP_EMPTY_MESSAGE;
    61da:	706b      	strb	r3, [r5, #1]
        b[2] = ctx->mid >> 8;
    61dc:	88b3      	ldrh	r3, [r6, #4]
    61de:	121a      	asrs	r2, r3, #8
    61e0:	70aa      	strb	r2, [r5, #2]
        b[3] = ctx->mid & 0xFF;
    61e2:	70eb      	strb	r3, [r5, #3]
        }
    }
    assert(idx <= COAP_OBS_HDR_SZ);

    /* prepend header to response */
    n = m_prepend(ctx->msg, idx);
    61e4:	0021      	movs	r1, r4
    61e6:	6d30      	ldr	r0, [r6, #80]	; 0x50
    61e8:	f001 f8a0 	bl	732c <_Z9m_prependP4mbufi>
    61ec:	0007      	movs	r7, r0
    if (!n) {
        rc = ERR_NO_MEM;
    61ee:	2003      	movs	r0, #3
    if (!n) {
    61f0:	2f00      	cmp	r7, #0
    61f2:	d04b      	beq.n	628c <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
        goto done;
    }
    ctx->msg = n;   /* A new mbuf may be required */
    61f4:	6537      	str	r7, [r6, #80]	; 0x50
    memcpy(n->m_data, b, idx);
    61f6:	1d3e      	adds	r6, r7, #4
    61f8:	0022      	movs	r2, r4
    61fa:	0029      	movs	r1, r5
    61fc:	0030      	movs	r0, r6
    61fe:	f005 faf4 	bl	b7ea <memcpy>

    ddump(LOG_DEBUG, "Response", n->m_data, n->m_pktlen);
    6202:	2007      	movs	r0, #7
    6204:	883b      	ldrh	r3, [r7, #0]
    6206:	0032      	movs	r2, r6
    6208:	4951      	ldr	r1, [pc, #324]	; (6350 <_Z17coap_msg_responseP12coap_msg_ctx+0x194>)
    620a:	f7fe f827 	bl	425c <_Z5ddumpiPKcPKvi>
    error_t rc = ERR_OK;
    620e:	2000      	movs	r0, #0
    6210:	e03c      	b.n	628c <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
    } else if (COAP_CLASS(ctx->code) >= 2) {
    6212:	2b3f      	cmp	r3, #63	; 0x3f
    6214:	d800      	bhi.n	6218 <_Z17coap_msg_responseP12coap_msg_ctx+0x5c>
    6216:	e099      	b.n	634c <_Z17coap_msg_responseP12coap_msg_ctx+0x190>
        b[1] = ctx->code;
    6218:	706b      	strb	r3, [r5, #1]
        b[2] = ctx->mid >> 8;
    621a:	88b3      	ldrh	r3, [r6, #4]
    621c:	121a      	asrs	r2, r3, #8
    621e:	70aa      	strb	r2, [r5, #2]
        b[3] = ctx->mid & 0xFF;
    6220:	70eb      	strb	r3, [r5, #3]
        if (ctx->tkl) {
    6222:	7874      	ldrb	r4, [r6, #1]
    6224:	2c00      	cmp	r4, #0
    6226:	d033      	beq.n	6290 <_Z17coap_msg_responseP12coap_msg_ctx+0xd4>
                rc = ERR_INVAL;
    6228:	2004      	movs	r0, #4
            if (ctx->tkl > 8) {
    622a:	2c08      	cmp	r4, #8
    622c:	dc2e      	bgt.n	628c <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
            memcpy(b + idx, ctx->token, ctx->tkl);
    622e:	0022      	movs	r2, r4
    6230:	1db1      	adds	r1, r6, #6
    6232:	a806      	add	r0, sp, #24
    6234:	f005 fad9 	bl	b7ea <memcpy>
            b[0] |= ctx->tkl;
    6238:	782b      	ldrb	r3, [r5, #0]
    623a:	4323      	orrs	r3, r4
    623c:	702b      	strb	r3, [r5, #0]
            idx += ctx->tkl;
    623e:	3404      	adds	r4, #4
        if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_OBSERVE, NULL))
    6240:	0033      	movs	r3, r6
    6242:	334c      	adds	r3, #76	; 0x4c
    6244:	2200      	movs	r2, #0
    6246:	2106      	movs	r1, #6
    6248:	0018      	movs	r0, r3
    624a:	9301      	str	r3, [sp, #4]
    624c:	f000 fa2a 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6250:	2800      	cmp	r0, #0
    6252:	d021      	beq.n	6298 <_Z17coap_msg_responseP12coap_msg_ctx+0xdc>
            dopt = *op;  /* copy original but make type the delta */
    6254:	af03      	add	r7, sp, #12
            op->ov = &opt_val;
    6256:	ab02      	add	r3, sp, #8
    6258:	6043      	str	r3, [r0, #4]
            dopt = *op;  /* copy original but make type the delta */
    625a:	003b      	movs	r3, r7
    625c:	c806      	ldmia	r0!, {r1, r2}
    625e:	c306      	stmia	r3!, {r1, r2}
            opt_val = get_obs_val();
    6260:	f000 f8c6 	bl	63f0 <_Z11get_obs_valv>
    6264:	9002      	str	r0, [sp, #8]
            opt_val = co_uint32_h2n(&dopt);
    6266:	0038      	movs	r0, r7
    6268:	f7ff fe60 	bl	5f2c <_Z13co_uint32_h2nPK5optlv>
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    626c:	221c      	movs	r2, #28
            dopt.ot = COAP_OPTION_OBSERVE - onum;
    626e:	2306      	movs	r3, #6
            opt_val = co_uint32_h2n(&dopt);
    6270:	9002      	str	r0, [sp, #8]
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    6272:	1b12      	subs	r2, r2, r4
    6274:	1929      	adds	r1, r5, r4
    6276:	0038      	movs	r0, r7
            dopt.ot = COAP_OPTION_OBSERVE - onum;
    6278:	803b      	strh	r3, [r7, #0]
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    627a:	f7ff fddd 	bl	5e38 <_Z12coap_opt_addPK5optlvPhi>
    627e:	2800      	cmp	r0, #0
    6280:	d108      	bne.n	6294 <_Z17coap_msg_responseP12coap_msg_ctx+0xd8>
                dlog(LOG_ERR, "Couldn't add Observe option to msg");
    6282:	4934      	ldr	r1, [pc, #208]	; (6354 <_Z17coap_msg_responseP12coap_msg_ctx+0x198>)
    6284:	3003      	adds	r0, #3
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    6286:	f7fd ffc7 	bl	4218 <_Z4dlogiPKcz>
                    rc = ERR_NO_MEM;
    628a:	2003      	movs	r0, #3

done:
    return rc;
}
    628c:	b00d      	add	sp, #52	; 0x34
    628e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int idx = 4;
    6290:	2404      	movs	r4, #4
    6292:	e7d5      	b.n	6240 <_Z17coap_msg_responseP12coap_msg_ctx+0x84>
            idx += sz;
    6294:	1824      	adds	r4, r4, r0
            onum = COAP_OPTION_OBSERVE;
    6296:	2006      	movs	r0, #6
        if (ctx->plen) 
    6298:	6c33      	ldr	r3, [r6, #64]	; 0x40
    629a:	2b00      	cmp	r3, #0
    629c:	d044      	beq.n	6328 <_Z17coap_msg_responseP12coap_msg_ctx+0x16c>
            dopt.ot = COAP_OPTION_CONTENT_FORMAT - onum;
    629e:	230c      	movs	r3, #12
            if (ctx->cf == 0) {     /* text/plain; */
    62a0:	0032      	movs	r2, r6
            dopt.ot = COAP_OPTION_CONTENT_FORMAT - onum;
    62a2:	1a18      	subs	r0, r3, r0
    62a4:	af03      	add	r7, sp, #12
    62a6:	8038      	strh	r0, [r7, #0]
            if (ctx->cf == 0) {     /* text/plain; */
    62a8:	323c      	adds	r2, #60	; 0x3c
    62aa:	7813      	ldrb	r3, [r2, #0]
    62ac:	2b00      	cmp	r3, #0
    62ae:	d10f      	bne.n	62d0 <_Z17coap_msg_responseP12coap_msg_ctx+0x114>
                dopt.ov = &opt_val;
    62b0:	aa02      	add	r2, sp, #8
    62b2:	607a      	str	r2, [r7, #4]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    62b4:	221c      	movs	r2, #28
    62b6:	1929      	adds	r1, r5, r4
    62b8:	1b12      	subs	r2, r2, r4
    62ba:	0038      	movs	r0, r7
                dopt.ol = 0;
    62bc:	807b      	strh	r3, [r7, #2]
                opt_val = 0;  /* 0 length anyway */
    62be:	9302      	str	r3, [sp, #8]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    62c0:	f7ff fdba 	bl	5e38 <_Z12coap_opt_addPK5optlvPhi>
                idx += sz;
    62c4:	1824      	adds	r4, r4, r0
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    62c6:	2800      	cmp	r0, #0
    62c8:	d10e      	bne.n	62e8 <_Z17coap_msg_responseP12coap_msg_ctx+0x12c>
                    dlog(LOG_ERR, "Couldn't add content format option to msg");
    62ca:	4923      	ldr	r1, [pc, #140]	; (6358 <_Z17coap_msg_responseP12coap_msg_ctx+0x19c>)
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    62cc:	2003      	movs	r0, #3
    62ce:	e7da      	b.n	6286 <_Z17coap_msg_responseP12coap_msg_ctx+0xca>
                dopt.ov = &(ctx->cf);
    62d0:	607a      	str	r2, [r7, #4]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    62d2:	221c      	movs	r2, #28
                dopt.ol = 1;
    62d4:	2301      	movs	r3, #1
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    62d6:	1b12      	subs	r2, r2, r4
    62d8:	1929      	adds	r1, r5, r4
    62da:	0038      	movs	r0, r7
                dopt.ol = 1;
    62dc:	807b      	strh	r3, [r7, #2]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    62de:	f7ff fdab 	bl	5e38 <_Z12coap_opt_addPK5optlvPhi>
    62e2:	2800      	cmp	r0, #0
    62e4:	d0f1      	beq.n	62ca <_Z17coap_msg_responseP12coap_msg_ctx+0x10e>
                idx += sz;
    62e6:	1824      	adds	r4, r4, r0
            if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_MAXAGE, 
    62e8:	2200      	movs	r2, #0
    62ea:	210e      	movs	r1, #14
    62ec:	9801      	ldr	r0, [sp, #4]
    62ee:	f000 f9d9 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    62f2:	2800      	cmp	r0, #0
    62f4:	d01a      	beq.n	632c <_Z17coap_msg_responseP12coap_msg_ctx+0x170>
				op->ov = &opt_val;
    62f6:	ab02      	add	r3, sp, #8
    62f8:	6043      	str	r3, [r0, #4]
                dopt = *op;  /* copy original but make type the delta */
    62fa:	003b      	movs	r3, r7
    62fc:	c806      	ldmia	r0!, {r1, r2}
    62fe:	c306      	stmia	r3!, {r1, r2}
				opt_val = coap_max_age_in_seconds;
    6300:	4b16      	ldr	r3, [pc, #88]	; (635c <_Z17coap_msg_responseP12coap_msg_ctx+0x1a0>)
				opt_val = co_uint32_h2n(&dopt);
    6302:	0038      	movs	r0, r7
				opt_val = coap_max_age_in_seconds;
    6304:	681b      	ldr	r3, [r3, #0]
    6306:	9302      	str	r3, [sp, #8]
				opt_val = co_uint32_h2n(&dopt);
    6308:	f7ff fe10 	bl	5f2c <_Z13co_uint32_h2nPK5optlv>
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    630c:	221c      	movs	r2, #28
                dopt.ot = COAP_OPTION_MAXAGE - onum;
    630e:	2302      	movs	r3, #2
				opt_val = co_uint32_h2n(&dopt);
    6310:	9002      	str	r0, [sp, #8]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    6312:	1b12      	subs	r2, r2, r4
    6314:	1929      	adds	r1, r5, r4
    6316:	0038      	movs	r0, r7
                dopt.ot = COAP_OPTION_MAXAGE - onum;
    6318:	803b      	strh	r3, [r7, #0]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    631a:	f7ff fd8d 	bl	5e38 <_Z12coap_opt_addPK5optlvPhi>
                idx += sz;
    631e:	1824      	adds	r4, r4, r0
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    6320:	2800      	cmp	r0, #0
    6322:	dc03      	bgt.n	632c <_Z17coap_msg_responseP12coap_msg_ctx+0x170>
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    6324:	490e      	ldr	r1, [pc, #56]	; (6360 <_Z17coap_msg_responseP12coap_msg_ctx+0x1a4>)
    6326:	e7d1      	b.n	62cc <_Z17coap_msg_responseP12coap_msg_ctx+0x110>
        if (onum && ctx->plen) {
    6328:	2800      	cmp	r0, #0
    632a:	d005      	beq.n	6338 <_Z17coap_msg_responseP12coap_msg_ctx+0x17c>
    632c:	6c33      	ldr	r3, [r6, #64]	; 0x40
    632e:	2b00      	cmp	r3, #0
    6330:	d002      	beq.n	6338 <_Z17coap_msg_responseP12coap_msg_ctx+0x17c>
            b[idx++] = 0xFF;    /* end of options */
    6332:	23ff      	movs	r3, #255	; 0xff
    6334:	552b      	strb	r3, [r5, r4]
    6336:	3401      	adds	r4, #1
    assert(idx <= COAP_OBS_HDR_SZ);
    6338:	2c1c      	cmp	r4, #28
    633a:	dc00      	bgt.n	633e <_Z17coap_msg_responseP12coap_msg_ctx+0x182>
    633c:	e752      	b.n	61e4 <_Z17coap_msg_responseP12coap_msg_ctx+0x28>
    633e:	21f0      	movs	r1, #240	; 0xf0
    6340:	4b08      	ldr	r3, [pc, #32]	; (6364 <_Z17coap_msg_responseP12coap_msg_ctx+0x1a8>)
    6342:	4a09      	ldr	r2, [pc, #36]	; (6368 <_Z17coap_msg_responseP12coap_msg_ctx+0x1ac>)
    6344:	0089      	lsls	r1, r1, #2
    6346:	4809      	ldr	r0, [pc, #36]	; (636c <_Z17coap_msg_responseP12coap_msg_ctx+0x1b0>)
    6348:	f005 f8d2 	bl	b4f0 <__assert_func>
        rc = ERR_INVAL;
    634c:	2004      	movs	r0, #4
    634e:	e79d      	b.n	628c <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
    6350:	0001003a 	.word	0x0001003a
    6354:	0000ffb3 	.word	0x0000ffb3
    6358:	0000ffd6 	.word	0x0000ffd6
    635c:	20001274 	.word	0x20001274
    6360:	00010000 	.word	0x00010000
    6364:	00010023 	.word	0x00010023
    6368:	0001011b 	.word	0x0001011b
    636c:	0000feed 	.word	0x0000feed

00006370 <_Z16coap_set_max_agem>:
 * 
 *
 */ 
void coap_set_max_age( uint32_t max_age )
{
	coap_max_age_in_seconds = max_age;
    6370:	4b01      	ldr	r3, [pc, #4]	; (6378 <_Z16coap_set_max_agem+0x8>)
    6372:	6018      	str	r0, [r3, #0]
	
} // coap_set_max_age
    6374:	4770      	bx	lr
    6376:	46c0      	nop			; (mov r8, r8)
    6378:	20001274 	.word	0x20001274

0000637c <_Z14get_obs_by_uriPKcPhS1_PPvS1_>:
 *
 * Returns 0 on success, -1 if not found.
 */
error_t
get_obs_by_uri(const char *uri, uint8_t *tkl, uint8_t *token, void **client, uint8_t *nxt)
{
    637c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    637e:	0005      	movs	r5, r0
    6380:	000f      	movs	r7, r1
    6382:	9201      	str	r2, [sp, #4]
    6384:	001e      	movs	r6, r3
    uint8_t i;

    if ((uri == NULL) || (uri[0] == '\0') || (*nxt >= MAX_OBSERVERS)) {
        return ERR_INVAL;
    6386:	2004      	movs	r0, #4
    if ((uri == NULL) || (uri[0] == '\0') || (*nxt >= MAX_OBSERVERS)) {
    6388:	2d00      	cmp	r5, #0
    638a:	d02e      	beq.n	63ea <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    638c:	782b      	ldrb	r3, [r5, #0]
    638e:	2b00      	cmp	r3, #0
    6390:	d02b      	beq.n	63ea <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    6392:	9b08      	ldr	r3, [sp, #32]
    6394:	781c      	ldrb	r4, [r3, #0]
    6396:	2c03      	cmp	r4, #3
    6398:	dc27      	bgt.n	63ea <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    }

    for (i = *nxt; i < MAX_OBSERVERS; i++) {
    639a:	2c03      	cmp	r4, #3
    639c:	dc0c      	bgt.n	63b8 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x3c>
        if (!strcmp(uri, obs[i].uri)) {
    639e:	2198      	movs	r1, #152	; 0x98
    63a0:	0049      	lsls	r1, r1, #1
    63a2:	4361      	muls	r1, r4
    63a4:	4b11      	ldr	r3, [pc, #68]	; (63ec <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x70>)
    63a6:	0028      	movs	r0, r5
    63a8:	1859      	adds	r1, r3, r1
    63aa:	f006 fb34 	bl	ca16 <strcmp>
    63ae:	2800      	cmp	r0, #0
    63b0:	d002      	beq.n	63b8 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x3c>
    for (i = *nxt; i < MAX_OBSERVERS; i++) {
    63b2:	3401      	adds	r4, #1
    63b4:	b2e4      	uxtb	r4, r4
    63b6:	e7f0      	b.n	639a <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x1e>
            break;
        }
    }
    if (i == MAX_OBSERVERS) {
        return ERR_NO_ENTRY;
    63b8:	200c      	movs	r0, #12
    if (i == MAX_OBSERVERS) {
    63ba:	2c04      	cmp	r4, #4
    63bc:	d015      	beq.n	63ea <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    }

    *tkl = obs[i].tkl;
    63be:	2398      	movs	r3, #152	; 0x98
    63c0:	005b      	lsls	r3, r3, #1
    63c2:	4363      	muls	r3, r4
    63c4:	4909      	ldr	r1, [pc, #36]	; (63ec <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x70>)
    memcpy(token, obs[i].token, *tkl);
    63c6:	9801      	ldr	r0, [sp, #4]
    *tkl = obs[i].tkl;
    63c8:	18cd      	adds	r5, r1, r3
    63ca:	002a      	movs	r2, r5
    63cc:	32ff      	adds	r2, #255	; 0xff
    63ce:	7852      	ldrb	r2, [r2, #1]
    memcpy(token, obs[i].token, *tkl);
    63d0:	3302      	adds	r3, #2
    63d2:	33ff      	adds	r3, #255	; 0xff
    63d4:	18c9      	adds	r1, r1, r3
    *tkl = obs[i].tkl;
    63d6:	703a      	strb	r2, [r7, #0]
    memcpy(token, obs[i].token, *tkl);
    63d8:	f005 fa07 	bl	b7ea <memcpy>
    *client = obs[i].client;
    *nxt = i + 1;

    return ERR_OK;
    63dc:	2000      	movs	r0, #0
    *client = obs[i].client;
    63de:	35fc      	adds	r5, #252	; 0xfc
    63e0:	692b      	ldr	r3, [r5, #16]
    *nxt = i + 1;
    63e2:	3401      	adds	r4, #1
    *client = obs[i].client;
    63e4:	6033      	str	r3, [r6, #0]
    *nxt = i + 1;
    63e6:	9b08      	ldr	r3, [sp, #32]
    63e8:	701c      	strb	r4, [r3, #0]
}
    63ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    63ec:	200012ac 	.word	0x200012ac

000063f0 <_Z11get_obs_valv>:
    /*
     * Monotonically increasing observe value.
     */
    static uint32_t obs_val = 2;

    if (obs_val == (1 << 24) - 1) {
    63f0:	4b05      	ldr	r3, [pc, #20]	; (6408 <_Z11get_obs_valv+0x18>)
    63f2:	4906      	ldr	r1, [pc, #24]	; (640c <_Z11get_obs_valv+0x1c>)
    63f4:	681a      	ldr	r2, [r3, #0]
    63f6:	428a      	cmp	r2, r1
    63f8:	d103      	bne.n	6402 <_Z11get_obs_valv+0x12>
        obs_val = 2;
    63fa:	2202      	movs	r2, #2
    } else {
        obs_val++;
    63fc:	601a      	str	r2, [r3, #0]
    }

    return obs_val;
    63fe:	6818      	ldr	r0, [r3, #0]
}
    6400:	4770      	bx	lr
        obs_val++;
    6402:	3201      	adds	r2, #1
    6404:	e7fa      	b.n	63fc <_Z11get_obs_valv+0xc>
    6406:	46c0      	nop			; (mov r8, r8)
    6408:	2000009c 	.word	0x2000009c
    640c:	00ffffff 	.word	0x00ffffff

00006410 <_Z10enable_obsPKcP12coap_msg_ctxPv>:
 * Currently only called from main (net_mgr) task on NIC, so no need for
 * locking.
 */
error_t 
enable_obs(const char *urip, struct coap_msg_ctx *req, void *client)
{
    6410:	b5f0      	push	{r4, r5, r6, r7, lr}
    6412:	b085      	sub	sp, #20
    6414:	9000      	str	r0, [sp, #0]
    6416:	000e      	movs	r6, r1
    6418:	9202      	str	r2, [sp, #8]
        add_obs(empty_slot, urip, req, client);
        return ERR_OK;
    }

error:
    return ERR_BAD_DATA;
    641a:	2314      	movs	r3, #20
    if (urip == NULL)
    641c:	2800      	cmp	r0, #0
    641e:	d02f      	beq.n	6480 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    if (strlen(urip) >= MAX_OBS_URI_LEN)
    6420:	f006 fb0b 	bl	ca3a <strlen>
    return ERR_BAD_DATA;
    6424:	2314      	movs	r3, #20
    if (strlen(urip) >= MAX_OBS_URI_LEN)
    6426:	28ff      	cmp	r0, #255	; 0xff
    6428:	d82a      	bhi.n	6480 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    if (req->sid[0] != '\0')
    642a:	7f37      	ldrb	r7, [r6, #28]
    642c:	2f00      	cmp	r7, #0
    642e:	d03f      	beq.n	64b0 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xa0>
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    6430:	0037      	movs	r7, r6
    6432:	371c      	adds	r7, #28
    6434:	0038      	movs	r0, r7
    6436:	f006 fb00 	bl	ca3a <strlen>
    643a:	0005      	movs	r5, r0
    643c:	4b33      	ldr	r3, [pc, #204]	; (650c <_Z10enable_obsPKcP12coap_msg_ctxPv+0xfc>)
    643e:	4a34      	ldr	r2, [pc, #208]	; (6510 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x100>)
    6440:	1c9c      	adds	r4, r3, #2
    6442:	189b      	adds	r3, r3, r2
    6444:	9301      	str	r3, [sp, #4]
                !memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)))
    6446:	1db3      	adds	r3, r6, #6
    6448:	34ff      	adds	r4, #255	; 0xff
    644a:	9303      	str	r3, [sp, #12]
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    644c:	1ea1      	subs	r1, r4, #2
    644e:	39ff      	subs	r1, #255	; 0xff
    6450:	002a      	movs	r2, r5
    6452:	0038      	movs	r0, r7
    6454:	f006 fb0d 	bl	ca72 <strncmp>
    6458:	2800      	cmp	r0, #0
    645a:	d114      	bne.n	6486 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x76>
                !memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)))
    645c:	1e63      	subs	r3, r4, #1
    645e:	7871      	ldrb	r1, [r6, #1]
    6460:	781a      	ldrb	r2, [r3, #0]
    6462:	428a      	cmp	r2, r1
    6464:	da00      	bge.n	6468 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x58>
    6466:	000a      	movs	r2, r1
    6468:	0021      	movs	r1, r4
    646a:	9803      	ldr	r0, [sp, #12]
    646c:	f005 f9ae 	bl	b7cc <memcmp>
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    6470:	2800      	cmp	r0, #0
    6472:	d108      	bne.n	6486 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x76>
                dlog(LOG_INFO, "Not adding obs entry for %s, sid:token not unique", urip);
    6474:	9a00      	ldr	r2, [sp, #0]
    6476:	4927      	ldr	r1, [pc, #156]	; (6514 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x104>)
            dlog(LOG_INFO, "Not adding obs entry for %s, duplicate.", urip);
    6478:	3006      	adds	r0, #6
    647a:	f7fd fecd 	bl	4218 <_Z4dlogiPKcz>
            return ERR_EXISTS;
    647e:	2309      	movs	r3, #9
}
    6480:	0018      	movs	r0, r3
    6482:	b005      	add	sp, #20
    6484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6486:	3431      	adds	r4, #49	; 0x31
        for (i = 0; i < MAX_OBSERVERS; i++) {
    6488:	9b01      	ldr	r3, [sp, #4]
    648a:	34ff      	adds	r4, #255	; 0xff
    648c:	42a3      	cmp	r3, r4
    648e:	d1dd      	bne.n	644c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x3c>
    6490:	2404      	movs	r4, #4
    6492:	2700      	movs	r7, #0
        if (!strcmp(urip, obs[i].uri))
    6494:	4d1d      	ldr	r5, [pc, #116]	; (650c <_Z10enable_obsPKcP12coap_msg_ctxPv+0xfc>)
    6496:	2398      	movs	r3, #152	; 0x98
    6498:	005b      	lsls	r3, r3, #1
    649a:	437b      	muls	r3, r7
    649c:	9800      	ldr	r0, [sp, #0]
    649e:	18e9      	adds	r1, r5, r3
    64a0:	9301      	str	r3, [sp, #4]
    64a2:	f006 fab8 	bl	ca16 <strcmp>
    64a6:	2800      	cmp	r0, #0
    64a8:	d104      	bne.n	64b4 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xa4>
            dlog(LOG_INFO, "Not adding obs entry for %s, duplicate.", urip);
    64aa:	9a00      	ldr	r2, [sp, #0]
    64ac:	491a      	ldr	r1, [pc, #104]	; (6518 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x108>)
    64ae:	e7e3      	b.n	6478 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x68>
    64b0:	2404      	movs	r4, #4
    64b2:	e7ef      	b.n	6494 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x84>
		else if ((obs[i].uri[0] == '\0') && (empty_slot == MAX_OBSERVERS))
    64b4:	9b01      	ldr	r3, [sp, #4]
    64b6:	5d5b      	ldrb	r3, [r3, r5]
    64b8:	2b00      	cmp	r3, #0
    64ba:	d102      	bne.n	64c2 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xb2>
    64bc:	2c04      	cmp	r4, #4
    64be:	d100      	bne.n	64c2 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xb2>
    64c0:	003c      	movs	r4, r7
    for (i = 0; i < MAX_OBSERVERS; i++) {
    64c2:	3701      	adds	r7, #1
    64c4:	2f04      	cmp	r7, #4
    64c6:	d1e6      	bne.n	6496 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x86>
    return ERR_BAD_DATA;
    64c8:	2314      	movs	r3, #20
    if (empty_slot < MAX_OBSERVERS)
    64ca:	2c04      	cmp	r4, #4
    64cc:	d0d8      	beq.n	6480 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    obs[slot].tkl = req->tkl;
    64ce:	331d      	adds	r3, #29
    64d0:	33ff      	adds	r3, #255	; 0xff
    64d2:	435c      	muls	r4, r3
    64d4:	192f      	adds	r7, r5, r4
    64d6:	003b      	movs	r3, r7
    64d8:	7872      	ldrb	r2, [r6, #1]
    memcpy(obs[slot].token, req->token, req->tkl);
    64da:	1ca0      	adds	r0, r4, #2
    obs[slot].tkl = req->tkl;
    64dc:	33ff      	adds	r3, #255	; 0xff
    memcpy(obs[slot].token, req->token, req->tkl);
    64de:	30ff      	adds	r0, #255	; 0xff
    obs[slot].tkl = req->tkl;
    64e0:	705a      	strb	r2, [r3, #1]
    memcpy(obs[slot].token, req->token, req->tkl);
    64e2:	1db1      	adds	r1, r6, #6
    64e4:	1828      	adds	r0, r5, r0
    64e6:	f005 f980 	bl	b7ea <memcpy>
    strcpy(obs[slot].uri, urip);
    64ea:	9900      	ldr	r1, [sp, #0]
    64ec:	0038      	movs	r0, r7
    64ee:	f006 fa9c 	bl	ca2a <strcpy>
    strcpy(obs[slot].sid, req->sid);
    64f2:	0020      	movs	r0, r4
    64f4:	0031      	movs	r1, r6
    obs[slot].client = client;
    64f6:	9b02      	ldr	r3, [sp, #8]
    strcpy(obs[slot].sid, req->sid);
    64f8:	3011      	adds	r0, #17
    obs[slot].client = client;
    64fa:	37fc      	adds	r7, #252	; 0xfc
    strcpy(obs[slot].sid, req->sid);
    64fc:	30ff      	adds	r0, #255	; 0xff
    obs[slot].client = client;
    64fe:	613b      	str	r3, [r7, #16]
    strcpy(obs[slot].sid, req->sid);
    6500:	311c      	adds	r1, #28
    6502:	1828      	adds	r0, r5, r0
    6504:	f006 fa91 	bl	ca2a <strcpy>
        return ERR_OK;
    6508:	2300      	movs	r3, #0
    650a:	e7b9      	b.n	6480 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    650c:	200012ac 	.word	0x200012ac
    6510:	000005c1 	.word	0x000005c1
    6514:	00010144 	.word	0x00010144
    6518:	00010176 	.word	0x00010176

0000651c <_Z11disable_obsPKcP12coap_msg_ctxPPvh>:
 * Currently only called from main (net_mgr) task on NIC, so no need for
 * locking. However, as per enable_obs and client pointer.
 */
error_t 
disable_obs(const char *urip, struct coap_msg_ctx *req, void **client, uint8_t force)
{
    651c:	b5f0      	push	{r4, r5, r6, r7, lr}
    651e:	b085      	sub	sp, #20
    6520:	0007      	movs	r7, r0
    6522:	9100      	str	r1, [sp, #0]
    6524:	9201      	str	r2, [sp, #4]
    6526:	9302      	str	r3, [sp, #8]
    int i;

    if (urip == NULL)
	{
        return ERR_INVAL;
    6528:	2004      	movs	r0, #4
    if (urip == NULL)
    652a:	2f00      	cmp	r7, #0
    652c:	d036      	beq.n	659c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x80>
    /*
     * Find the uri in the array, and if present, zero the entry.
     */
    for (i = 0; i < MAX_OBSERVERS; i++)
	{
        if (!strcmp(urip, obs[i].uri) && (!memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)) || force))
    652e:	000b      	movs	r3, r1
    if (urip == NULL)
    6530:	2400      	movs	r4, #0
    6532:	4d1f      	ldr	r5, [pc, #124]	; (65b0 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x94>)
        if (!strcmp(urip, obs[i].uri) && (!memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)) || force))
    6534:	3306      	adds	r3, #6
    6536:	1cae      	adds	r6, r5, #2
    6538:	36ff      	adds	r6, #255	; 0xff
    653a:	9303      	str	r3, [sp, #12]
    653c:	1eb1      	subs	r1, r6, #2
    653e:	39ff      	subs	r1, #255	; 0xff
    6540:	0038      	movs	r0, r7
    6542:	f006 fa68 	bl	ca16 <strcmp>
    6546:	2800      	cmp	r0, #0
    6548:	d12a      	bne.n	65a0 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x84>
    654a:	9a00      	ldr	r2, [sp, #0]
    654c:	1e73      	subs	r3, r6, #1
    654e:	7851      	ldrb	r1, [r2, #1]
    6550:	781a      	ldrb	r2, [r3, #0]
    6552:	428a      	cmp	r2, r1
    6554:	da00      	bge.n	6558 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x3c>
    6556:	000a      	movs	r2, r1
    6558:	0031      	movs	r1, r6
    655a:	9803      	ldr	r0, [sp, #12]
    655c:	f005 f936 	bl	b7cc <memcmp>
    6560:	2800      	cmp	r0, #0
    6562:	d002      	beq.n	656a <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x4e>
    6564:	9b02      	ldr	r3, [sp, #8]
    6566:	2b00      	cmp	r3, #0
    6568:	d01a      	beq.n	65a0 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x84>
		{
            obs[i].uri[0] = '\0';
    656a:	2398      	movs	r3, #152	; 0x98
    656c:	005b      	lsls	r3, r3, #1
    656e:	4363      	muls	r3, r4
    6570:	2400      	movs	r4, #0
    6572:	54ec      	strb	r4, [r5, r3]
            *client = obs[i].client;
    6574:	18ed      	adds	r5, r5, r3
    6576:	002b      	movs	r3, r5
    6578:	33fc      	adds	r3, #252	; 0xfc
    657a:	6919      	ldr	r1, [r3, #16]
    657c:	9a01      	ldr	r2, [sp, #4]
            obs[i].client = NULL;
            memset(obs[i].token, 0, sizeof(obs[i].token));
    657e:	0030      	movs	r0, r6
            *client = obs[i].client;
    6580:	6011      	str	r1, [r2, #0]
            obs[i].sid[0] = '\0';
    6582:	35ff      	adds	r5, #255	; 0xff
            obs[i].client = NULL;
    6584:	611c      	str	r4, [r3, #16]
            memset(obs[i].token, 0, sizeof(obs[i].token));
    6586:	2208      	movs	r2, #8
    6588:	0021      	movs	r1, r4
    658a:	f005 f949 	bl	b820 <memset>
            dlog(LOG_INFO, "disable_obs: De-registered URI: %s", urip);
    658e:	2006      	movs	r0, #6
            obs[i].sid[0] = '\0';
    6590:	746c      	strb	r4, [r5, #17]
            dlog(LOG_INFO, "disable_obs: De-registered URI: %s", urip);
    6592:	003a      	movs	r2, r7
    6594:	4907      	ldr	r1, [pc, #28]	; (65b4 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x98>)
    6596:	f7fd fe3f 	bl	4218 <_Z4dlogiPKcz>
            return ERR_OK;
    659a:	0020      	movs	r0, r4
        }
    }
    return ERR_NO_ENTRY;
}
    659c:	b005      	add	sp, #20
    659e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65a0:	3631      	adds	r6, #49	; 0x31
    for (i = 0; i < MAX_OBSERVERS; i++)
    65a2:	3401      	adds	r4, #1
    65a4:	36ff      	adds	r6, #255	; 0xff
    65a6:	2c04      	cmp	r4, #4
    65a8:	d1c8      	bne.n	653c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x20>
    return ERR_NO_ENTRY;
    65aa:	200c      	movs	r0, #12
    65ac:	e7f6      	b.n	659c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x80>
    65ae:	46c0      	nop			; (mov r8, r8)
    65b0:	200012ac 	.word	0x200012ac
    65b4:	0001019e 	.word	0x0001019e

000065b8 <_Z9copt_initP5sl_co>:
/*
 * Initialse the head.
 */
void
copt_init(struct sl_co *hd)
{
    65b8:	b510      	push	{r4, lr}
    assert(hd);
    65ba:	2800      	cmp	r0, #0
    65bc:	d105      	bne.n	65ca <_Z9copt_initP5sl_co+0x12>
    65be:	4b04      	ldr	r3, [pc, #16]	; (65d0 <_Z9copt_initP5sl_co+0x18>)
    65c0:	4a04      	ldr	r2, [pc, #16]	; (65d4 <_Z9copt_initP5sl_co+0x1c>)
    65c2:	2180      	movs	r1, #128	; 0x80
    65c4:	4804      	ldr	r0, [pc, #16]	; (65d8 <_Z9copt_initP5sl_co+0x20>)
    65c6:	f004 ff93 	bl	b4f0 <__assert_func>

    SLIST_INIT(hd);
    65ca:	2300      	movs	r3, #0
    65cc:	6003      	str	r3, [r0, #0]
}
    65ce:	bd10      	pop	{r4, pc}
    65d0:	000101ee 	.word	0x000101ee
    65d4:	000102c8 	.word	0x000102c8
    65d8:	000101f1 	.word	0x000101f1

000065dc <_Z12copt_del_allP5sl_co>:
 *
 * @return: None.
 */
void
copt_del_all(struct sl_co *hd)
{
    65dc:	b570      	push	{r4, r5, r6, lr}
    65de:	1e04      	subs	r4, r0, #0
    coap_opt *curr, *tmp;

    assert(hd);
    65e0:	d105      	bne.n	65ee <_Z12copt_del_allP5sl_co+0x12>
    65e2:	4b0c      	ldr	r3, [pc, #48]	; (6614 <_Z12copt_del_allP5sl_co+0x38>)
    65e4:	4a0c      	ldr	r2, [pc, #48]	; (6618 <_Z12copt_del_allP5sl_co+0x3c>)
    65e6:	2192      	movs	r1, #146	; 0x92
    65e8:	480c      	ldr	r0, [pc, #48]	; (661c <_Z12copt_del_allP5sl_co+0x40>)
    65ea:	f004 ff81 	bl	b4f0 <__assert_func>
    SLIST_FOREACH_SAFE(curr, hd, nxt, tmp) {
    65ee:	6800      	ldr	r0, [r0, #0]
    65f0:	2800      	cmp	r0, #0
    65f2:	d00e      	beq.n	6612 <_Z12copt_del_allP5sl_co+0x36>
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    65f4:	6823      	ldr	r3, [r4, #0]
    SLIST_FOREACH_SAFE(curr, hd, nxt, tmp) {
    65f6:	6885      	ldr	r5, [r0, #8]
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    65f8:	4298      	cmp	r0, r3
    65fa:	d105      	bne.n	6608 <_Z12copt_del_allP5sl_co+0x2c>
    65fc:	6025      	str	r5, [r4, #0]
        free(co);
    65fe:	f005 f8c9 	bl	b794 <free>
    6602:	0028      	movs	r0, r5
    6604:	e7f4      	b.n	65f0 <_Z12copt_del_allP5sl_co+0x14>
    6606:	0013      	movs	r3, r2
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    6608:	689a      	ldr	r2, [r3, #8]
    660a:	4290      	cmp	r0, r2
    660c:	d1fb      	bne.n	6606 <_Z12copt_del_allP5sl_co+0x2a>
    660e:	609d      	str	r5, [r3, #8]
    6610:	e7f5      	b.n	65fe <_Z12copt_del_allP5sl_co+0x22>
        copt_dealloc(curr);
    }

    return;
}
    6612:	bd70      	pop	{r4, r5, r6, pc}
    6614:	000101ee 	.word	0x000101ee
    6618:	00010244 	.word	0x00010244
    661c:	000101f1 	.word	0x000101f1

00006620 <_Z12copt_add_optP5sl_coP5optlv>:
 *
 * @return: 0 on sucess.
 */
error_t
copt_add_opt(struct sl_co *hd, struct optlv *opt)
{
    6620:	b570      	push	{r4, r5, r6, lr}
    6622:	0006      	movs	r6, r0
    6624:	000d      	movs	r5, r1
    assert(hd);
    6626:	2800      	cmp	r0, #0
    6628:	d105      	bne.n	6636 <_Z12copt_add_optP5sl_coP5optlv+0x16>
    662a:	21a9      	movs	r1, #169	; 0xa9
    662c:	4b19      	ldr	r3, [pc, #100]	; (6694 <_Z12copt_add_optP5sl_coP5optlv+0x74>)
    662e:	4a1a      	ldr	r2, [pc, #104]	; (6698 <_Z12copt_add_optP5sl_coP5optlv+0x78>)
    coap_opt *nco;       /* New coap option */
    coap_opt *o, *po;    /* option iterator, previous option. */
    error_t rc = ERR_OK;

    assert(hd);
    assert(opt);
    6630:	481a      	ldr	r0, [pc, #104]	; (669c <_Z12copt_add_optP5sl_coP5optlv+0x7c>)
    6632:	f004 ff5d 	bl	b4f0 <__assert_func>
    6636:	2900      	cmp	r1, #0
    6638:	d103      	bne.n	6642 <_Z12copt_add_optP5sl_coP5optlv+0x22>
    663a:	4b19      	ldr	r3, [pc, #100]	; (66a0 <_Z12copt_add_optP5sl_coP5optlv+0x80>)
    663c:	4a16      	ldr	r2, [pc, #88]	; (6698 <_Z12copt_add_optP5sl_coP5optlv+0x78>)
    663e:	21af      	movs	r1, #175	; 0xaf
    6640:	e7f6      	b.n	6630 <_Z12copt_add_optP5sl_coP5optlv+0x10>
    if ((co = (coap_opt *)malloc(sizeof(coap_opt))) != NULL) {
    6642:	200c      	movs	r0, #12
    6644:	f005 f89c 	bl	b780 <malloc>
    6648:	0004      	movs	r4, r0
    /*
     * Find the node with the correct option value.
     * If present, allocate and append a new object, set object values.
     */
    if ((nco = copt_alloc()) == NULL) {
        rc = ERR_NO_MEM;
    664a:	2003      	movs	r0, #3
    if ((co = (coap_opt *)malloc(sizeof(coap_opt))) != NULL) {
    664c:	2c00      	cmp	r4, #0
    664e:	d012      	beq.n	6676 <_Z12copt_add_optP5sl_coP5optlv+0x56>
        memset(co, 0, sizeof(coap_opt));
    6650:	220c      	movs	r2, #12
    6652:	2100      	movs	r1, #0
    6654:	0020      	movs	r0, r4
    6656:	f005 f8e3 	bl	b820 <memset>
        goto done;
    }
    nco->o = *opt;
    665a:	0023      	movs	r3, r4
    665c:	002a      	movs	r2, r5
    665e:	ca03      	ldmia	r2!, {r0, r1}
    6660:	c303      	stmia	r3!, {r0, r1}

    if (SLIST_EMPTY(hd) || (SLIST_FIRST(hd)->o.ot > opt->ot)) {
    6662:	6833      	ldr	r3, [r6, #0]
    6664:	2b00      	cmp	r3, #0
    6666:	d003      	beq.n	6670 <_Z12copt_add_optP5sl_coP5optlv+0x50>
    6668:	882a      	ldrh	r2, [r5, #0]
    666a:	8819      	ldrh	r1, [r3, #0]
    666c:	4291      	cmp	r1, r2
    666e:	dd04      	ble.n	667a <_Z12copt_add_optP5sl_coP5optlv+0x5a>
        SLIST_INSERT_HEAD(hd, nco, nxt);
    6670:	60a3      	str	r3, [r4, #8]
    6672:	6034      	str	r4, [r6, #0]
    error_t rc = ERR_OK;
    6674:	2000      	movs	r0, #0
     */
    SLIST_INSERT_AFTER(po, nco, nxt);
    
done:
    return rc;
}
    6676:	bd70      	pop	{r4, r5, r6, pc}
    6678:	0003      	movs	r3, r0
        if (SLIST_NEXT(o, nxt) && (SLIST_NEXT(o, nxt)->o.ot > opt->ot)) {
    667a:	6898      	ldr	r0, [r3, #8]
    667c:	2800      	cmp	r0, #0
    667e:	d005      	beq.n	668c <_Z12copt_add_optP5sl_coP5optlv+0x6c>
    6680:	8801      	ldrh	r1, [r0, #0]
    6682:	428a      	cmp	r2, r1
    6684:	daf8      	bge.n	6678 <_Z12copt_add_optP5sl_coP5optlv+0x58>
            SLIST_INSERT_AFTER(o, nco, nxt);
    6686:	60a0      	str	r0, [r4, #8]
    6688:	609c      	str	r4, [r3, #8]
    668a:	e7f3      	b.n	6674 <_Z12copt_add_optP5sl_coP5optlv+0x54>
    SLIST_INSERT_AFTER(po, nco, nxt);
    668c:	60a0      	str	r0, [r4, #8]
    668e:	609c      	str	r4, [r3, #8]
    return rc;
    6690:	e7f1      	b.n	6676 <_Z12copt_add_optP5sl_coP5optlv+0x56>
    6692:	46c0      	nop			; (mov r8, r8)
    6694:	000101ee 	.word	0x000101ee
    6698:	0001021f 	.word	0x0001021f
    669c:	000101f1 	.word	0x000101f1
    66a0:	000101c1 	.word	0x000101c1

000066a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>:
 *
 * @return: The next option (as optlv) in the list, or NULL if no more.
 */
struct optlv *
copt_get_next_opt_type(const struct sl_co *hd, uint16_t ot, void **it)
{
    66a4:	b507      	push	{r0, r1, r2, lr}
    struct optlv *opt;
    coap_opt **ppco = (coap_opt **)it;
    coap_opt *pco;

    assert(hd);
    66a6:	2800      	cmp	r0, #0
    66a8:	d106      	bne.n	66b8 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x14>
    66aa:	2183      	movs	r1, #131	; 0x83
    66ac:	4b0e      	ldr	r3, [pc, #56]	; (66e8 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x44>)
    66ae:	4a0f      	ldr	r2, [pc, #60]	; (66ec <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x48>)
    66b0:	0049      	lsls	r1, r1, #1
    66b2:	480f      	ldr	r0, [pc, #60]	; (66f0 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x4c>)
    66b4:	f004 ff1c 	bl	b4f0 <__assert_func>
    pco = SLIST_FIRST(hd);
    66b8:	6800      	ldr	r0, [r0, #0]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
        ppco = &pco;
    66ba:	ab01      	add	r3, sp, #4
    pco = SLIST_FIRST(hd);
    66bc:	9001      	str	r0, [sp, #4]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
    66be:	2a00      	cmp	r2, #0
    66c0:	d004      	beq.n	66cc <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
    } else if (!*ppco) {
    66c2:	6813      	ldr	r3, [r2, #0]
    66c4:	2b00      	cmp	r3, #0
    66c6:	d10a      	bne.n	66de <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x3a>
        *ppco = SLIST_FIRST(hd);
    66c8:	6010      	str	r0, [r2, #0]
    } else {
        *ppco = SLIST_NEXT(*ppco, nxt);
    66ca:	0013      	movs	r3, r2
    }
    while (*ppco) {
    66cc:	6818      	ldr	r0, [r3, #0]
    66ce:	2800      	cmp	r0, #0
    66d0:	d008      	beq.n	66e4 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
        if ((*ppco)->o.ot == ot) {
    66d2:	8802      	ldrh	r2, [r0, #0]
    66d4:	428a      	cmp	r2, r1
    66d6:	d005      	beq.n	66e4 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
            break;
        }
        *ppco = SLIST_NEXT(*ppco, nxt);
    66d8:	6882      	ldr	r2, [r0, #8]
    66da:	601a      	str	r2, [r3, #0]
    while (*ppco) {
    66dc:	e7f6      	b.n	66cc <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
        *ppco = SLIST_NEXT(*ppco, nxt);
    66de:	689b      	ldr	r3, [r3, #8]
    66e0:	6013      	str	r3, [r2, #0]
    66e2:	e7f2      	b.n	66ca <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x26>
        opt = &((*ppco)->o);
    } else {
        opt = NULL;
    }
    return opt;
}
    66e4:	bd0e      	pop	{r1, r2, r3, pc}
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	000101ee 	.word	0x000101ee
    66ec:	0001028a 	.word	0x0001028a
    66f0:	000101f1 	.word	0x000101f1

000066f4 <_Z17copt_del_opt_typeP5sl_cot>:
 *
 * @return: 0 if anything deleted.
 */
error_t
copt_del_opt_type(struct sl_co *hd, uint16_t ot)
{
    66f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66f6:	0004      	movs	r4, r0
    66f8:	000f      	movs	r7, r1
    error_t rc = ERR_NO_ENTRY;
    assert(hd);
    66fa:	2800      	cmp	r0, #0
    66fc:	d106      	bne.n	670c <_Z17copt_del_opt_typeP5sl_cot+0x18>
    66fe:	214c      	movs	r1, #76	; 0x4c
    6700:	4b12      	ldr	r3, [pc, #72]	; (674c <_Z17copt_del_opt_typeP5sl_cot+0x58>)
    6702:	4a13      	ldr	r2, [pc, #76]	; (6750 <_Z17copt_del_opt_typeP5sl_cot+0x5c>)
    6704:	31ff      	adds	r1, #255	; 0xff
    6706:	4813      	ldr	r0, [pc, #76]	; (6754 <_Z17copt_del_opt_typeP5sl_cot+0x60>)
    6708:	f004 fef2 	bl	b4f0 <__assert_func>
    error_t rc = ERR_NO_ENTRY;
    670c:	250c      	movs	r5, #12
    coap_opt *o, *tmp;

    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    670e:	6800      	ldr	r0, [r0, #0]
    6710:	2800      	cmp	r0, #0
    6712:	d012      	beq.n	673a <_Z17copt_del_opt_typeP5sl_cot+0x46>
        if (o->o.ot == ot) {
    6714:	8803      	ldrh	r3, [r0, #0]
    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    6716:	6886      	ldr	r6, [r0, #8]
        if (o->o.ot == ot) {
    6718:	42bb      	cmp	r3, r7
    671a:	d106      	bne.n	672a <_Z17copt_del_opt_typeP5sl_cot+0x36>
            rc = ERR_OK;
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    671c:	6823      	ldr	r3, [r4, #0]
    671e:	4298      	cmp	r0, r3
    6720:	d106      	bne.n	6730 <_Z17copt_del_opt_typeP5sl_cot+0x3c>
    6722:	6026      	str	r6, [r4, #0]
        free(co);
    6724:	f005 f836 	bl	b794 <free>
            rc = ERR_OK;
    6728:	2500      	movs	r5, #0
    672a:	0030      	movs	r0, r6
    672c:	e7f0      	b.n	6710 <_Z17copt_del_opt_typeP5sl_cot+0x1c>
    672e:	0013      	movs	r3, r2
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    6730:	689a      	ldr	r2, [r3, #8]
    6732:	4290      	cmp	r0, r2
    6734:	d1fb      	bne.n	672e <_Z17copt_del_opt_typeP5sl_cot+0x3a>
    6736:	609e      	str	r6, [r3, #8]
    6738:	e7f4      	b.n	6724 <_Z17copt_del_opt_typeP5sl_cot+0x30>
            copt_dealloc(o);
        }
    }

    if (rc) {
    673a:	2d00      	cmp	r5, #0
    673c:	d004      	beq.n	6748 <_Z17copt_del_opt_typeP5sl_cot+0x54>
        dlog(LOG_DEBUG, "Didn't find option %d to delete.", ot);
    673e:	003a      	movs	r2, r7
    6740:	4905      	ldr	r1, [pc, #20]	; (6758 <_Z17copt_del_opt_typeP5sl_cot+0x64>)
    6742:	2007      	movs	r0, #7
    6744:	f7fd fd68 	bl	4218 <_Z4dlogiPKcz>
    }

    return rc;
}
    6748:	0028      	movs	r0, r5
    674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    674c:	000101ee 	.word	0x000101ee
    6750:	0001025e 	.word	0x0001025e
    6754:	000101f1 	.word	0x000101f1
    6758:	000101cd 	.word	0x000101cd

0000675c <_Z14observe_rx_ackPvP4mbuf>:
 */
error_t observe_rx_ack(void *cbctx, struct mbuf *m)
{
	// Bump the sequence number.
	uint32_t seq_number = *((uint32_t *)cbctx);
	seq_number++;
    675c:	6803      	ldr	r3, [r0, #0]
    675e:	3301      	adds	r3, #1
	*((uint32_t *)cbctx) = seq_number;
    6760:	6003      	str	r3, [r0, #0]
	
	return ERR_OK;
}
    6762:	2000      	movs	r0, #0
    6764:	4770      	bx	lr
	...

00006768 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>:
{
    6768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    676a:	2434      	movs	r4, #52	; 0x34
{
    676c:	4684      	mov	ip, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    676e:	4d11      	ldr	r5, [pc, #68]	; (67b4 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x4c>)
    6770:	4e11      	ldr	r6, [pc, #68]	; (67b8 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x50>)
    6772:	7828      	ldrb	r0, [r5, #0]
{
    6774:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    6776:	4360      	muls	r0, r4
{
    6778:	9200      	str	r2, [sp, #0]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    677a:	4910      	ldr	r1, [pc, #64]	; (67bc <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x54>)
    677c:	4662      	mov	r2, ip
    677e:	1830      	adds	r0, r6, r0
{
    6780:	9301      	str	r3, [sp, #4]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    6782:	f006 f919 	bl	c9b8 <siprintf>
	observe_info[observe_info_index].pObsFunc = p;
    6786:	782b      	ldrb	r3, [r5, #0]
	observe_info[observe_info_index].sensor_id = sensor_id;
    6788:	466a      	mov	r2, sp
	observe_info[observe_info_index].pObsFunc = p;
    678a:	435c      	muls	r4, r3
	observe_info[observe_info_index].frequency = frequency;
    678c:	9b00      	ldr	r3, [sp, #0]
	observe_info[observe_info_index].pObsFunc = p;
    678e:	1936      	adds	r6, r6, r4
	observe_info[observe_info_index].frequency = frequency;
    6790:	62b3      	str	r3, [r6, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = sensor_id;
    6792:	0033      	movs	r3, r6
    6794:	7912      	ldrb	r2, [r2, #4]
    6796:	3331      	adds	r3, #49	; 0x31
    6798:	701a      	strb	r2, [r3, #0]
	observe_info[observe_info_index].obs_flag = 0;
    679a:	0032      	movs	r2, r6
    679c:	2300      	movs	r3, #0
    679e:	3230      	adds	r2, #48	; 0x30
	observe_info[observe_info_index].pObsFunc = p;
    67a0:	6237      	str	r7, [r6, #32]
	observe_info[observe_info_index].ack_seqno = 0;
    67a2:	62f3      	str	r3, [r6, #44]	; 0x2c
	observe_info[observe_info_index].obs_flag = 0;
    67a4:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    67a6:	f7fd fc9f 	bl	40e8 <_Z13get_rtc_epochv>
    67aa:	6270      	str	r0, [r6, #36]	; 0x24
	return observe_info_index++;
    67ac:	7828      	ldrb	r0, [r5, #0]
    67ae:	1c43      	adds	r3, r0, #1
    67b0:	702b      	strb	r3, [r5, #0]
}
    67b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    67b4:	2000176c 	.word	0x2000176c
    67b8:	20001770 	.word	0x20001770
    67bc:	00010423 	.word	0x00010423

000067c0 <_Z12set_observerPKcPF7error_eP4mbufPhhE>:
{
    67c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    67c2:	2534      	movs	r5, #52	; 0x34
    67c4:	4c0d      	ldr	r4, [pc, #52]	; (67fc <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x3c>)
    67c6:	4e0e      	ldr	r6, [pc, #56]	; (6800 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x40>)
    67c8:	7823      	ldrb	r3, [r4, #0]
{
    67ca:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    67cc:	436b      	muls	r3, r5
{
    67ce:	0002      	movs	r2, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    67d0:	490c      	ldr	r1, [pc, #48]	; (6804 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x44>)
    67d2:	18f0      	adds	r0, r6, r3
    67d4:	f006 f8f0 	bl	c9b8 <siprintf>
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    67d8:	233c      	movs	r3, #60	; 0x3c
	observe_info[observe_info_index].pObsFunc = p;
    67da:	7824      	ldrb	r4, [r4, #0]
    67dc:	436c      	muls	r4, r5
    67de:	1934      	adds	r4, r6, r4
	observe_info[observe_info_index].sensor_id = 0;
    67e0:	0022      	movs	r2, r4
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    67e2:	62a3      	str	r3, [r4, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = 0;
    67e4:	2300      	movs	r3, #0
    67e6:	3231      	adds	r2, #49	; 0x31
    67e8:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].obs_flag = 0;
    67ea:	3a01      	subs	r2, #1
	observe_info[observe_info_index].pObsFunc = p;
    67ec:	6227      	str	r7, [r4, #32]
	observe_info[observe_info_index].obs_flag = 0;
    67ee:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].ack_seqno = 0;
    67f0:	62e3      	str	r3, [r4, #44]	; 0x2c
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    67f2:	f7fd fc79 	bl	40e8 <_Z13get_rtc_epochv>
    67f6:	6260      	str	r0, [r4, #36]	; 0x24
}
    67f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    67fa:	46c0      	nop			; (mov r8, r8)
    67fc:	2000176c 	.word	0x2000176c
    6800:	20001770 	.word	0x20001770
    6804:	00010423 	.word	0x00010423

00006808 <_Z17coap_obs_reg_sapih>:
{
    6808:	b510      	push	{r4, lr}
    680a:	0004      	movs	r4, r0
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    680c:	f7fd fc6c 	bl	40e8 <_Z13get_rtc_epochv>
    6810:	2334      	movs	r3, #52	; 0x34
    6812:	435c      	muls	r4, r3
    6814:	4b05      	ldr	r3, [pc, #20]	; (682c <_Z17coap_obs_reg_sapih+0x24>)
	observe_info[observer_id].obs_flag = 1;
    6816:	2101      	movs	r1, #1
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    6818:	191b      	adds	r3, r3, r4
	observe_info[observer_id].obs_flag = 1;
    681a:	001a      	movs	r2, r3
    681c:	3230      	adds	r2, #48	; 0x30
    681e:	7011      	strb	r1, [r2, #0]
	observe_info[observer_id].ack_seqno = 10;
    6820:	220a      	movs	r2, #10
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    6822:	6258      	str	r0, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 10;
    6824:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6826:	2000      	movs	r0, #0
    6828:	bd10      	pop	{r4, pc}
    682a:	46c0      	nop			; (mov r8, r8)
    682c:	20001770 	.word	0x20001770

00006830 <_Z19coap_obs_dereg_sapih>:
	observe_info[observer_id].obs_flag = 0;
    6830:	2134      	movs	r1, #52	; 0x34
    6832:	4341      	muls	r1, r0
    6834:	4b07      	ldr	r3, [pc, #28]	; (6854 <_Z19coap_obs_dereg_sapih+0x24>)
{
    6836:	b510      	push	{r4, lr}
	observe_info[observer_id].obs_flag = 0;
    6838:	185b      	adds	r3, r3, r1
    683a:	0019      	movs	r1, r3
    683c:	2400      	movs	r4, #0
    683e:	3130      	adds	r1, #48	; 0x30
{
    6840:	0002      	movs	r2, r0
	observe_info[observer_id].obs_flag = 0;
    6842:	700c      	strb	r4, [r1, #0]
	observe_info[observer_id].base_epoch = 0;
    6844:	625c      	str	r4, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 0;
    6846:	62dc      	str	r4, [r3, #44]	; 0x2c
	dlog(LOG_DEBUG, "De-register Observe: %d", observer_id);
    6848:	4903      	ldr	r1, [pc, #12]	; (6858 <_Z19coap_obs_dereg_sapih+0x28>)
    684a:	2007      	movs	r0, #7
    684c:	f7fd fce4 	bl	4218 <_Z4dlogiPKcz>
}
    6850:	0020      	movs	r0, r4
    6852:	bd10      	pop	{r4, pc}
    6854:	20001770 	.word	0x20001770
    6858:	0001042f 	.word	0x0001042f

0000685c <_Z16coap_observe_rsph>:
 * coap_msg_response() to build a response.
 * Register for callback when ACK received.
 * Set pending_rsp, freeing any existing one first.
 */
error_t coap_observe_rsp(uint8_t observer_id)
{
    685c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct coap_msg_ctx rsp;
    coap_ack_cb_info_t 	cbi;			// Callback info
    uint8_t 			len = 0;		// Message length
    685e:	270a      	movs	r7, #10
{
    6860:	b09f      	sub	sp, #124	; 0x7c
    uint8_t 			len = 0;		// Message length
    6862:	ab02      	add	r3, sp, #8
    uint8_t 			nxt = 0;		// The next observer
    6864:	260b      	movs	r6, #11
    uint8_t 			len = 0;		// Message length
    6866:	18ff      	adds	r7, r7, r3
    6868:	2300      	movs	r3, #0
    uint8_t 			nxt = 0;		// The next observer
    686a:	aa02      	add	r2, sp, #8
    686c:	18b6      	adds	r6, r6, r2
    uint8_t 			len = 0;		// Message length
    686e:	703b      	strb	r3, [r7, #0]
    uint8_t 			nxt = 0;		// The next observer
    6870:	7033      	strb	r3, [r6, #0]
    struct mbuf *		m = NULL;		// Observe response message
    struct optlv 		opt;
    error_t 			rc = ERR_OK;

	// Safety check. If a message is already in progress do nothing.
    if (pending_rsp) 
    6872:	4b59      	ldr	r3, [pc, #356]	; (69d8 <_Z16coap_observe_rsph+0x17c>)
{
    6874:	0004      	movs	r4, r0
    if (pending_rsp) 
    6876:	6819      	ldr	r1, [r3, #0]
    6878:	2900      	cmp	r1, #0
    687a:	d007      	beq.n	688c <_Z16coap_observe_rsph+0x30>
	{
		dlog(LOG_DEBUG, "coap_observe_rsp: Pending response in progress - skipping new notification");
    687c:	4957      	ldr	r1, [pc, #348]	; (69dc <_Z16coap_observe_rsph+0x180>)
    687e:	2007      	movs	r0, #7
    6880:	f7fd fcca 	bl	4218 <_Z4dlogiPKcz>
		return ERR_INPROGRESS;
    6884:	2410      	movs	r4, #16
error:
    copt_del_all((sl_co*)&(rsp.oh));
    dlog(LOG_DEBUG, "coap_observe_rsp: free response mbuf on error");
    m_free(m);
    return rc;
}
    6886:	0020      	movs	r0, r4
    6888:	b01f      	add	sp, #124	; 0x7c
    688a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rsp, 0, sizeof(rsp));
    688c:	ad09      	add	r5, sp, #36	; 0x24
    688e:	2254      	movs	r2, #84	; 0x54
    6890:	0028      	movs	r0, r5
    6892:	f004 ffc5 	bl	b820 <memset>
	rc = get_obs_by_uri(observe_info[observer_id].obs_uri, &(rsp.tkl), rsp.token, &(rsp.client), &nxt);
    6896:	2222      	movs	r2, #34	; 0x22
    6898:	2334      	movs	r3, #52	; 0x34
    689a:	a902      	add	r1, sp, #8
    689c:	1852      	adds	r2, r2, r1
    689e:	211d      	movs	r1, #29
    68a0:	4363      	muls	r3, r4
    68a2:	4c4f      	ldr	r4, [pc, #316]	; (69e0 <_Z16coap_observe_rsph+0x184>)
    68a4:	a802      	add	r0, sp, #8
    68a6:	18e4      	adds	r4, r4, r3
    68a8:	9302      	str	r3, [sp, #8]
    68aa:	1809      	adds	r1, r1, r0
    68ac:	9600      	str	r6, [sp, #0]
    68ae:	ab1a      	add	r3, sp, #104	; 0x68
    68b0:	0020      	movs	r0, r4
    68b2:	f7ff fd63 	bl	637c <_Z14get_obs_by_uriPKcPhS1_PPvS1_>
    68b6:	9003      	str	r0, [sp, #12]
    if (rc)
    68b8:	2800      	cmp	r0, #0
    68ba:	d006      	beq.n	68ca <_Z16coap_observe_rsph+0x6e>
        dlog(LOG_ERR, "get_obs_by_uri failed: %s", observe_info[observer_id].obs_uri);
    68bc:	0022      	movs	r2, r4
    68be:	4949      	ldr	r1, [pc, #292]	; (69e4 <_Z16coap_observe_rsph+0x188>)
    68c0:	2003      	movs	r0, #3
    68c2:	f7fd fca9 	bl	4218 <_Z4dlogiPKcz>
        return ERR_NO_ENTRY;
    68c6:	240c      	movs	r4, #12
    68c8:	e7dd      	b.n	6886 <_Z16coap_observe_rsph+0x2a>
    copt_init((sl_co*)&(rsp.oh));
    68ca:	a81c      	add	r0, sp, #112	; 0x70
    68cc:	f7ff fe74 	bl	65b8 <_Z9copt_initP5sl_co>
	m = m_gethdr();
    68d0:	f000 fce6 	bl	72a0 <_Z5m_getv>
    68d4:	1e06      	subs	r6, r0, #0
    if (!m) 
    68d6:	d030      	beq.n	693a <_Z16coap_observe_rsph+0xde>
    m_prepend(m, COAP_OBS_HDR_SZ);
    68d8:	211c      	movs	r1, #28
    68da:	f000 fd27 	bl	732c <_Z9m_prependP4mbufi>
	if (is_sapi == 1)
    68de:	4b42      	ldr	r3, [pc, #264]	; (69e8 <_Z16coap_observe_rsph+0x18c>)
    68e0:	781a      	ldrb	r2, [r3, #0]
    68e2:	6a23      	ldr	r3, [r4, #32]
    68e4:	2a01      	cmp	r2, #1
    68e6:	d12a      	bne.n	693e <_Z16coap_observe_rsph+0xe2>
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, observe_info[observer_id].sensor_id);
    68e8:	3431      	adds	r4, #49	; 0x31
    68ea:	7822      	ldrb	r2, [r4, #0]
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, 0);
    68ec:	0039      	movs	r1, r7
    68ee:	0030      	movs	r0, r6
    68f0:	4798      	blx	r3
    68f2:	1e04      	subs	r4, r0, #0
    if (rc != ERR_OK) 
    68f4:	d137      	bne.n	6966 <_Z16coap_observe_rsph+0x10a>
    m_adj( m, COAP_OBS_HDR_SZ );
    68f6:	211c      	movs	r1, #28
    68f8:	0030      	movs	r0, r6
    68fa:	f000 fd3d 	bl	7378 <_Z5m_adjP4mbufi>
    rsp.msg = m;
    68fe:	652e      	str	r6, [r5, #80]	; 0x50
    rsp.mid = get_mid_val();
    6900:	f7ff fb4c 	bl	5f9c <_Z11get_mid_valv>
	opt.ol = 3;
    6904:	2703      	movs	r7, #3
	opt.ot = COAP_OPTION_OBSERVE;
    6906:	2306      	movs	r3, #6
    6908:	ac07      	add	r4, sp, #28
    rsp.mid = get_mid_val();
    690a:	80a8      	strh	r0, [r5, #4]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    690c:	0021      	movs	r1, r4
    690e:	a81c      	add	r0, sp, #112	; 0x70
	opt.ot = COAP_OPTION_OBSERVE;
    6910:	8023      	strh	r3, [r4, #0]
	opt.ol = 3;
    6912:	8067      	strh	r7, [r4, #2]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    6914:	f7ff fe84 	bl	6620 <_Z12copt_add_optP5sl_coP5optlv>
		dlog(LOG_ERR, "Couldn't add Observe option");
    6918:	4934      	ldr	r1, [pc, #208]	; (69ec <_Z16coap_observe_rsph+0x190>)
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    691a:	2800      	cmp	r0, #0
    691c:	d10a      	bne.n	6934 <_Z16coap_observe_rsph+0xd8>
	opt.ot = COAP_OPTION_MAXAGE;
    691e:	230e      	movs	r3, #14
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    6920:	0021      	movs	r1, r4
	opt.ot = COAP_OPTION_MAXAGE;
    6922:	8023      	strh	r3, [r4, #0]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    6924:	a81c      	add	r0, sp, #112	; 0x70
	opt.ol = 4;
    6926:	3b0a      	subs	r3, #10
    6928:	8063      	strh	r3, [r4, #2]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    692a:	f7ff fe79 	bl	6620 <_Z12copt_add_optP5sl_coP5optlv>
    692e:	1e04      	subs	r4, r0, #0
    6930:	d007      	beq.n	6942 <_Z16coap_observe_rsph+0xe6>
		dlog(LOG_ERR, "Couldn't add Max-Age option");
    6932:	492f      	ldr	r1, [pc, #188]	; (69f0 <_Z16coap_observe_rsph+0x194>)
    6934:	0038      	movs	r0, r7
    6936:	f7fd fc6f 	bl	4218 <_Z4dlogiPKcz>
		rc = ERR_NO_MEM;
    693a:	2403      	movs	r4, #3
    693c:	e013      	b.n	6966 <_Z16coap_observe_rsph+0x10a>
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, 0);
    693e:	9a03      	ldr	r2, [sp, #12]
    6940:	e7d4      	b.n	68ec <_Z16coap_observe_rsph+0x90>
	rsp.plen = m->m_pktlen; /* payload includes type and length */
    6942:	8833      	ldrh	r3, [r6, #0]
	rsp.cf = COAP_CF_CSV;
    6944:	2202      	movs	r2, #2
	rsp.plen = m->m_pktlen; /* payload includes type and length */
    6946:	642b      	str	r3, [r5, #64]	; 0x40
    rsp.code = COAP_RSP_205_CONTENT;
    6948:	2345      	movs	r3, #69	; 0x45
    694a:	70ab      	strb	r3, [r5, #2]
	rsp.cf = COAP_CF_CSV;
    694c:	ab18      	add	r3, sp, #96	; 0x60
    694e:	701a      	strb	r2, [r3, #0]
    rsp.type = COAP_T_NCONF_VAL; // TODO: CON or NON?
    6950:	2301      	movs	r3, #1
    if (coap_msg_response(&rsp) != ERR_OK) 
    6952:	0028      	movs	r0, r5
    rsp.type = COAP_T_NCONF_VAL; // TODO: CON or NON?
    6954:	702b      	strb	r3, [r5, #0]
    if (coap_msg_response(&rsp) != ERR_OK) 
    6956:	f7ff fc31 	bl	61bc <_Z17coap_msg_responseP12coap_msg_ctx>
    695a:	2800      	cmp	r0, #0
    695c:	d00e      	beq.n	697c <_Z16coap_observe_rsph+0x120>
        dlog(LOG_ERR, "coap_observe_rsp: Error creating response");
    695e:	4925      	ldr	r1, [pc, #148]	; (69f4 <_Z16coap_observe_rsph+0x198>)
    6960:	0038      	movs	r0, r7
    6962:	f7fd fc59 	bl	4218 <_Z4dlogiPKcz>
    copt_del_all((sl_co*)&(rsp.oh));
    6966:	a81c      	add	r0, sp, #112	; 0x70
    6968:	f7ff fe38 	bl	65dc <_Z12copt_del_allP5sl_co>
    dlog(LOG_DEBUG, "coap_observe_rsp: free response mbuf on error");
    696c:	4922      	ldr	r1, [pc, #136]	; (69f8 <_Z16coap_observe_rsph+0x19c>)
    696e:	2007      	movs	r0, #7
    6970:	f7fd fc52 	bl	4218 <_Z4dlogiPKcz>
    m_free(m);
    6974:	0030      	movs	r0, r6
    6976:	f000 fcbd 	bl	72f4 <_Z6m_freeP4mbuf>
    return rc;
    697a:	e784      	b.n	6886 <_Z16coap_observe_rsph+0x2a>
    cbi.cbctx = (void *) &observe_info[observer_id].ack_seqno;
    697c:	9c02      	ldr	r4, [sp, #8]
    697e:	4b18      	ldr	r3, [pc, #96]	; (69e0 <_Z16coap_observe_rsph+0x184>)
    6980:	342c      	adds	r4, #44	; 0x2c
    6982:	191c      	adds	r4, r3, r4
    cbi.cb = observe_rx_ack;
    6984:	4b1d      	ldr	r3, [pc, #116]	; (69fc <_Z16coap_observe_rsph+0x1a0>)
    cbi.cbctx = (void *) &observe_info[observer_id].ack_seqno;
    6986:	9406      	str	r4, [sp, #24]
    cbi.cb = observe_rx_ack;
    6988:	9305      	str	r3, [sp, #20]
    coap_con_add(rsp.mid, &cbi);
    698a:	88a8      	ldrh	r0, [r5, #4]
    698c:	a905      	add	r1, sp, #20
    698e:	f7ff f91f 	bl	5bd0 <_Z12coap_con_addtP18coap_ack_cb_info_t>
    if (pending_rsp) 
    6992:	4b11      	ldr	r3, [pc, #68]	; (69d8 <_Z16coap_observe_rsph+0x17c>)
    6994:	6818      	ldr	r0, [r3, #0]
    6996:	2800      	cmp	r0, #0
    6998:	d008      	beq.n	69ac <_Z16coap_observe_rsph+0x150>
        m_free(pending_rsp);
    699a:	f000 fcab 	bl	72f4 <_Z6m_freeP4mbuf>
		dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    699e:	2396      	movs	r3, #150	; 0x96
    69a0:	4a17      	ldr	r2, [pc, #92]	; (6a00 <_Z16coap_observe_rsph+0x1a4>)
    69a2:	33ff      	adds	r3, #255	; 0xff
    69a4:	4917      	ldr	r1, [pc, #92]	; (6a04 <_Z16coap_observe_rsph+0x1a8>)
    69a6:	2007      	movs	r0, #7
    69a8:	f7fd fc36 	bl	4218 <_Z4dlogiPKcz>
    pending_rsp = rsp.msg;
    69ac:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    copt_del_all((sl_co*)&(rsp.oh));
    69ae:	a81c      	add	r0, sp, #112	; 0x70
    pending_rsp = rsp.msg;
    69b0:	9302      	str	r3, [sp, #8]
    69b2:	9a02      	ldr	r2, [sp, #8]
    69b4:	4b08      	ldr	r3, [pc, #32]	; (69d8 <_Z16coap_observe_rsph+0x17c>)
    return ERR_OK;
    69b6:	2400      	movs	r4, #0
    pending_rsp = rsp.msg;
    69b8:	601a      	str	r2, [r3, #0]
    copt_del_all((sl_co*)&(rsp.oh));
    69ba:	f7ff fe0f 	bl	65dc <_Z12copt_del_allP5sl_co>
	digitalWrite(MNIC_WAKEUP_PIN,LOW);
    69be:	2100      	movs	r1, #0
    69c0:	2009      	movs	r0, #9
    69c2:	f7fd f885 	bl	3ad0 <digitalWrite>
	delay(1);
    69c6:	2001      	movs	r0, #1
    69c8:	f7fb fe82 	bl	26d0 <delay>
	digitalWrite(MNIC_WAKEUP_PIN,HIGH);
    69cc:	2101      	movs	r1, #1
    69ce:	2009      	movs	r0, #9
    69d0:	f7fd f87e 	bl	3ad0 <digitalWrite>
    return ERR_OK;
    69d4:	e757      	b.n	6886 <_Z16coap_observe_rsph+0x2a>
    69d6:	46c0      	nop			; (mov r8, r8)
    69d8:	20001840 	.word	0x20001840
    69dc:	00010314 	.word	0x00010314
    69e0:	20001770 	.word	0x20001770
    69e4:	0001035f 	.word	0x0001035f
    69e8:	20000049 	.word	0x20000049
    69ec:	00010379 	.word	0x00010379
    69f0:	00010395 	.word	0x00010395
    69f4:	000103b1 	.word	0x000103b1
    69f8:	000103f5 	.word	0x000103f5
    69fc:	0000675d 	.word	0x0000675d
    6a00:	00010447 	.word	0x00010447
    6a04:	000103db 	.word	0x000103db

00006a08 <_Z10do_observev>:
{
    6a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	time_t  epoch      = get_rtc_epoch();
    6a0a:	f7fd fb6d 	bl	40e8 <_Z13get_rtc_epochv>
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    6a0e:	2400      	movs	r4, #0
	time_t  epoch      = get_rtc_epoch();
    6a10:	0005      	movs	r5, r0
		if (observe_info[indx].obs_flag)
    6a12:	2034      	movs	r0, #52	; 0x34
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    6a14:	4b18      	ldr	r3, [pc, #96]	; (6a78 <_Z10do_observev+0x70>)
    6a16:	781f      	ldrb	r7, [r3, #0]
    6a18:	42bc      	cmp	r4, r7
    6a1a:	da27      	bge.n	6a6c <_Z10do_observev+0x64>
		if (observe_info[indx].obs_flag)
    6a1c:	0003      	movs	r3, r0
    6a1e:	4363      	muls	r3, r4
    6a20:	4a16      	ldr	r2, [pc, #88]	; (6a7c <_Z10do_observev+0x74>)
    6a22:	18d3      	adds	r3, r2, r3
    6a24:	001a      	movs	r2, r3
    6a26:	3230      	adds	r2, #48	; 0x30
    6a28:	7812      	ldrb	r2, [r2, #0]
    6a2a:	2a00      	cmp	r2, #0
    6a2c:	d020      	beq.n	6a70 <_Z10do_observev+0x68>
			if (observe_info[indx].base_epoch == 0)
    6a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6a30:	2a00      	cmp	r2, #0
    6a32:	d100      	bne.n	6a36 <_Z10do_observev+0x2e>
				observe_info[indx].base_epoch = epoch;
    6a34:	625d      	str	r5, [r3, #36]	; 0x24
			if (epoch >= (observe_info[indx].base_epoch+observe_info[indx].frequency))
    6a36:	0003      	movs	r3, r0
    6a38:	4363      	muls	r3, r4
    6a3a:	4a10      	ldr	r2, [pc, #64]	; (6a7c <_Z10do_observev+0x74>)
    6a3c:	18d3      	adds	r3, r2, r3
    6a3e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    6a40:	001e      	movs	r6, r3
    6a42:	468c      	mov	ip, r1
    6a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6a46:	3624      	adds	r6, #36	; 0x24
    6a48:	4494      	add	ip, r2
    6a4a:	45ac      	cmp	ip, r5
    6a4c:	d810      	bhi.n	6a70 <_Z10do_observev+0x68>
				dlog(LOG_DEBUG, "do_observe: epoch %x uri %s", observe_info[indx].base_epoch, observe_info[indx].obs_uri);
    6a4e:	490c      	ldr	r1, [pc, #48]	; (6a80 <_Z10do_observev+0x78>)
    6a50:	2007      	movs	r0, #7
    6a52:	f7fd fbe1 	bl	4218 <_Z4dlogiPKcz>
				observe_info[indx].base_epoch = epoch;
    6a56:	6035      	str	r5, [r6, #0]
				coap_observe_rsp(indx);
    6a58:	0020      	movs	r0, r4
    6a5a:	f7ff feff 	bl	685c <_Z16coap_observe_rsph>
				int freeram = free_ram();
    6a5e:	f7fd fd0d 	bl	447c <_Z8free_ramv>
				dlog(LOG_DEBUG, "do_observe: Free Ram: %d", freeram);
    6a62:	4908      	ldr	r1, [pc, #32]	; (6a84 <_Z10do_observev+0x7c>)
				int freeram = free_ram();
    6a64:	0002      	movs	r2, r0
				dlog(LOG_DEBUG, "do_observe: Free Ram: %d", freeram);
    6a66:	2007      	movs	r0, #7
    6a68:	f7fd fbd6 	bl	4218 <_Z4dlogiPKcz>
} // do_observe
    6a6c:	2001      	movs	r0, #1
    6a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    6a70:	3401      	adds	r4, #1
    6a72:	b2e4      	uxtb	r4, r4
    6a74:	e7d0      	b.n	6a18 <_Z10do_observev+0x10>
    6a76:	46c0      	nop			; (mov r8, r8)
    6a78:	2000176c 	.word	0x2000176c
    6a7c:	20001770 	.word	0x20001770
    6a80:	000102df 	.word	0x000102df
    6a84:	000102fb 	.word	0x000102fb

00006a88 <_ZL8crsystemP12coap_msg_ctxS0_>:
}


// The "sys" dispatcher.
static error_t crsystem(struct coap_msg_ctx *req, struct coap_msg_ctx *rsp)
{
    6a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    struct optlv *o;
    void *it = NULL;
	
    /* No observes on system */
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6a8a:	0006      	movs	r6, r0
    void *it = NULL;
    6a8c:	2200      	movs	r2, #0
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6a8e:	364c      	adds	r6, #76	; 0x4c
{
    6a90:	b087      	sub	sp, #28
    6a92:	0005      	movs	r5, r0
    6a94:	000c      	movs	r4, r1
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6a96:	0030      	movs	r0, r6
    6a98:	2106      	movs	r1, #6
    void *it = NULL;
    6a9a:	9203      	str	r2, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6a9c:	f7ff fe02 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6aa0:	2800      	cmp	r0, #0
    6aa2:	d004      	beq.n	6aae <_ZL8crsystemP12coap_msg_ctxS0_+0x26>
	{
        copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    6aa4:	0020      	movs	r0, r4
    6aa6:	2106      	movs	r1, #6
    6aa8:	304c      	adds	r0, #76	; 0x4c
    6aaa:	f7ff fe23 	bl	66f4 <_Z17copt_del_opt_typeP5sl_cot>
    }
    /* 
     * No URI path beyond /system, except /time and /stats is supported, so
     * reject if present. 
     */
    copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    6aae:	aa03      	add	r2, sp, #12
    6ab0:	210b      	movs	r1, #11
    6ab2:	0030      	movs	r0, r6
    6ab4:	f7ff fdf6 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	
    if ((o = copt_get_next_opt_type((const sl_co*) &(req->oh), COAP_OPTION_URI_PATH, &it)))
    6ab8:	aa03      	add	r2, sp, #12
    6aba:	210b      	movs	r1, #11
    6abc:	0030      	movs	r0, r6
    6abe:	f7ff fdf1 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6ac2:	1e07      	subs	r7, r0, #0
    6ac4:	d100      	bne.n	6ac8 <_ZL8crsystemP12coap_msg_ctxS0_+0x40>
    6ac6:	e094      	b.n	6bf2 <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
	{
        if (!coap_opt_strcmp(o, S_TIME_URI))
    6ac8:	4981      	ldr	r1, [pc, #516]	; (6cd0 <_ZL8crsystemP12coap_msg_ctxS0_+0x248>)
    6aca:	f7ff f8c1 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
    6ace:	9001      	str	r0, [sp, #4]
    6ad0:	2800      	cmp	r0, #0
    6ad2:	d000      	beq.n	6ad6 <_ZL8crsystemP12coap_msg_ctxS0_+0x4e>
    6ad4:	e07e      	b.n	6bd4 <_ZL8crsystemP12coap_msg_ctxS0_+0x14c>
    6ad6:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)))
    6ad8:	0030      	movs	r0, r6
    6ada:	aa04      	add	r2, sp, #16
    6adc:	210b      	movs	r1, #11
    6ade:	9304      	str	r3, [sp, #16]
    6ae0:	f7ff fde0 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6ae4:	1e06      	subs	r6, r0, #0
    6ae6:	d005      	beq.n	6af4 <_ZL8crsystemP12coap_msg_ctxS0_+0x6c>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    6ae8:	2384      	movs	r3, #132	; 0x84
    6aea:	70a3      	strb	r3, [r4, #2]
        rsp->plen = 0;
    6aec:	9b01      	ldr	r3, [sp, #4]
    6aee:	6423      	str	r3, [r4, #64]	; 0x40
    return ERR_OK;
    6af0:	2500      	movs	r5, #0
    6af2:	e017      	b.n	6b24 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    if (req->code == COAP_REQUEST_GET)
    6af4:	78ab      	ldrb	r3, [r5, #2]
    6af6:	2b01      	cmp	r3, #1
    6af8:	d124      	bne.n	6b44 <_ZL8crsystemP12coap_msg_ctxS0_+0xbc>
		now = get_rtc_epoch();
    6afa:	f7fd faf5 	bl	40e8 <_Z13get_rtc_epochv>
    6afe:	0005      	movs	r5, r0
		dlog(LOG_DEBUG, "Epoch for GET of sys time: %08x", now);
    6b00:	0002      	movs	r2, r0
    6b02:	4974      	ldr	r1, [pc, #464]	; (6cd4 <_ZL8crsystemP12coap_msg_ctxS0_+0x24c>)
    6b04:	2007      	movs	r0, #7
    6b06:	f7fd fb87 	bl	4218 <_Z4dlogiPKcz>
    6b0a:	ba2d      	rev	r5, r5
        d = m_append(rsp->msg, len);
    6b0c:	2104      	movs	r1, #4
    6b0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
        now = htonl(now);
    6b10:	9505      	str	r5, [sp, #20]
        d = m_append(rsp->msg, len);
    6b12:	f000 fc21 	bl	7358 <_Z8m_appendP4mbufs>
        if (!d)
    6b16:	2800      	cmp	r0, #0
    6b18:	d107      	bne.n	6b2a <_ZL8crsystemP12coap_msg_ctxS0_+0xa2>
            return ERR_NO_MEM;
    6b1a:	2503      	movs	r5, #3
            coap_stats.no_mbufs++;
    6b1c:	4a6e      	ldr	r2, [pc, #440]	; (6cd8 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    6b1e:	6813      	ldr	r3, [r2, #0]
    6b20:	3301      	adds	r3, #1
    6b22:	6013      	str	r3, [r2, #0]
    }

    rsp->plen = 0;

    return ERR_OK;
}
    6b24:	0028      	movs	r0, r5
    6b26:	b007      	add	sp, #28
    6b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(d, &now, len);
    6b2a:	2504      	movs	r5, #4
    6b2c:	a905      	add	r1, sp, #20
    6b2e:	002a      	movs	r2, r5
    6b30:	f004 fe5b 	bl	b7ea <memcpy>
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    6b34:	0023      	movs	r3, r4
    6b36:	222a      	movs	r2, #42	; 0x2a
    6b38:	333c      	adds	r3, #60	; 0x3c
        rsp->plen = len;
    6b3a:	6425      	str	r5, [r4, #64]	; 0x40
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    6b3c:	701a      	strb	r2, [r3, #0]
        rsp->code = COAP_RSP_205_CONTENT;
    6b3e:	2345      	movs	r3, #69	; 0x45
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    6b40:	70a3      	strb	r3, [r4, #2]
    6b42:	e7d5      	b.n	6af0 <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
	else if (req->code == COAP_REQUEST_PUT)
    6b44:	2b03      	cmp	r3, #3
    6b46:	d141      	bne.n	6bcc <_ZL8crsystemP12coap_msg_ctxS0_+0x144>
        m_adj(req->msg, req->hdrlen);
    6b48:	6969      	ldr	r1, [r5, #20]
    6b4a:	6d28      	ldr	r0, [r5, #80]	; 0x50
    6b4c:	f000 fc14 	bl	7378 <_Z5m_adjP4mbufi>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    6b50:	6d2f      	ldr	r7, [r5, #80]	; 0x50
        if ((req->msg->m_pktlen == 0) || ((td->tl.u.rdt != crdt_time_abs) && (td->tl.u.rdt != crdt_time_delta)) || 
    6b52:	883b      	ldrh	r3, [r7, #0]
    6b54:	2b00      	cmp	r3, #0
    6b56:	d006      	beq.n	6b66 <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    6b58:	793b      	ldrb	r3, [r7, #4]
    6b5a:	1f9a      	subs	r2, r3, #6
    6b5c:	2a01      	cmp	r2, #1
    6b5e:	d802      	bhi.n	6b66 <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    6b60:	797a      	ldrb	r2, [r7, #5]
    6b62:	2a08      	cmp	r2, #8
    6b64:	d001      	beq.n	6b6a <_ZL8crsystemP12coap_msg_ctxS0_+0xe2>
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    6b66:	2386      	movs	r3, #134	; 0x86
    6b68:	e7ea      	b.n	6b40 <_ZL8crsystemP12coap_msg_ctxS0_+0xb8>
    return ERR_OK;
    6b6a:	0035      	movs	r5, r6
		else if (td->tl.u.rdt == crdt_time_abs)
    6b6c:	2b06      	cmp	r3, #6
    6b6e:	d1d9      	bne.n	6b24 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    6b70:	1d3a      	adds	r2, r7, #4
			ddump(LOG_DEBUG, "PUT /sys/time Payload", (void *)td, sizeof(coap_sys_time_data_t));
    6b72:	3304      	adds	r3, #4
    6b74:	4959      	ldr	r1, [pc, #356]	; (6cdc <_ZL8crsystemP12coap_msg_ctxS0_+0x254>)
    6b76:	2007      	movs	r0, #7
    6b78:	f7fd fb70 	bl	425c <_Z5ddumpiPKcPKvi>
			epoch = (uint32_t) ntohl(td->sec);
    6b7c:	21ff      	movs	r1, #255	; 0xff
    6b7e:	79fa      	ldrb	r2, [r7, #7]
    6b80:	79bb      	ldrb	r3, [r7, #6]
    6b82:	0212      	lsls	r2, r2, #8
    6b84:	431a      	orrs	r2, r3
    6b86:	7a3b      	ldrb	r3, [r7, #8]
    6b88:	0209      	lsls	r1, r1, #8
    6b8a:	041b      	lsls	r3, r3, #16
    6b8c:	431a      	orrs	r2, r3
    6b8e:	7a7b      	ldrb	r3, [r7, #9]
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    6b90:	2007      	movs	r0, #7
			epoch = (uint32_t) ntohl(td->sec);
    6b92:	061b      	lsls	r3, r3, #24
    6b94:	4313      	orrs	r3, r2
    6b96:	061a      	lsls	r2, r3, #24
    6b98:	0e1e      	lsrs	r6, r3, #24
    6b9a:	4316      	orrs	r6, r2
    6b9c:	0a1a      	lsrs	r2, r3, #8
    6b9e:	400a      	ands	r2, r1
    6ba0:	4316      	orrs	r6, r2
    6ba2:	22ff      	movs	r2, #255	; 0xff
    6ba4:	021b      	lsls	r3, r3, #8
    6ba6:	0412      	lsls	r2, r2, #16
    6ba8:	4013      	ands	r3, r2
    6baa:	431e      	orrs	r6, r3
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    6bac:	0032      	movs	r2, r6
    6bae:	494c      	ldr	r1, [pc, #304]	; (6ce0 <_ZL8crsystemP12coap_msg_ctxS0_+0x258>)
    6bb0:	f7fd fb32 	bl	4218 <_Z4dlogiPKcz>
			rtc.setEpoch(epoch);
    6bb4:	0031      	movs	r1, r6
    6bb6:	484b      	ldr	r0, [pc, #300]	; (6ce4 <_ZL8crsystemP12coap_msg_ctxS0_+0x25c>)
    6bb8:	f7fe fef8 	bl	59ac <_ZN7RTCZero8setEpochEm>
			print_current_date();
    6bbc:	f7fd fad8 	bl	4170 <_Z18print_current_datev>
			print_current_time();
    6bc0:	f7fd fa9a 	bl	40f8 <_Z18print_current_timev>
			rsp->code = COAP_RSP_204_CHANGED;
    6bc4:	2344      	movs	r3, #68	; 0x44
    6bc6:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    6bc8:	6425      	str	r5, [r4, #64]	; 0x40
    return ERR_OK;
    6bca:	e7ab      	b.n	6b24 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6bcc:	23a1      	movs	r3, #161	; 0xa1
        rsp->plen = 0;
    6bce:	6420      	str	r0, [r4, #64]	; 0x40
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6bd0:	70a3      	strb	r3, [r4, #2]
    6bd2:	e78d      	b.n	6af0 <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
		else if (!coap_opt_strcmp(o, S_STAT_URI))
    6bd4:	4944      	ldr	r1, [pc, #272]	; (6ce8 <_ZL8crsystemP12coap_msg_ctxS0_+0x260>)
    6bd6:	0038      	movs	r0, r7
    6bd8:	f7ff f83a 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
    6bdc:	2800      	cmp	r0, #0
    6bde:	d108      	bne.n	6bf2 <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
    6be0:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it))) {
    6be2:	aa05      	add	r2, sp, #20
    6be4:	210b      	movs	r1, #11
    6be6:	0030      	movs	r0, r6
    6be8:	9305      	str	r3, [sp, #20]
    6bea:	f7ff fd5b 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6bee:	1e02      	subs	r2, r0, #0
    6bf0:	d001      	beq.n	6bf6 <_ZL8crsystemP12coap_msg_ctxS0_+0x16e>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    6bf2:	2384      	movs	r3, #132	; 0x84
    6bf4:	e04f      	b.n	6c96 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    6bf6:	0030      	movs	r0, r6
    6bf8:	210f      	movs	r1, #15
    6bfa:	f7ff fd53 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if (req->code == COAP_REQUEST_GET) {
    6bfe:	78ab      	ldrb	r3, [r5, #2]
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    6c00:	0006      	movs	r6, r0
    if (req->code == COAP_REQUEST_GET) {
    6c02:	2b01      	cmp	r3, #1
    6c04:	d151      	bne.n	6caa <_ZL8crsystemP12coap_msg_ctxS0_+0x222>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    6c06:	4939      	ldr	r1, [pc, #228]	; (6cec <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    6c08:	f7ff f822 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
    6c0c:	1e05      	subs	r5, r0, #0
    6c0e:	d13b      	bne.n	6c88 <_ZL8crsystemP12coap_msg_ctxS0_+0x200>
    coap_sys_coap_stats_t *d = (coap_sys_coap_stats_t *) m_append(m, sizeof(coap_sys_coap_stats_t));
    6c10:	2128      	movs	r1, #40	; 0x28
    6c12:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6c14:	f000 fba0 	bl	7358 <_Z8m_appendP4mbufs>
    6c18:	4b2f      	ldr	r3, [pc, #188]	; (6cd8 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    if (!d) {
    6c1a:	2800      	cmp	r0, #0
    6c1c:	d114      	bne.n	6c48 <_ZL8crsystemP12coap_msg_ctxS0_+0x1c0>
        coap_stats.no_mbufs++;
    6c1e:	681a      	ldr	r2, [r3, #0]
        return ERR_NO_MEM;
    6c20:	3503      	adds	r5, #3
        coap_stats.no_mbufs++;
    6c22:	3201      	adds	r2, #1
    6c24:	601a      	str	r2, [r3, #0]
        dlog(LOG_DEBUG, "GET (status %d) read %d bytes.", rc, len);
    6c26:	2328      	movs	r3, #40	; 0x28
    6c28:	002a      	movs	r2, r5
    6c2a:	4931      	ldr	r1, [pc, #196]	; (6cf0 <_ZL8crsystemP12coap_msg_ctxS0_+0x268>)
    6c2c:	2007      	movs	r0, #7
    6c2e:	f7fd faf3 	bl	4218 <_Z4dlogiPKcz>
        if (!rc) {
    6c32:	2d00      	cmp	r5, #0
    6c34:	d134      	bne.n	6ca0 <_ZL8crsystemP12coap_msg_ctxS0_+0x218>
            rsp->plen = len;
    6c36:	2328      	movs	r3, #40	; 0x28
    6c38:	6423      	str	r3, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    6c3a:	0023      	movs	r3, r4
    6c3c:	222a      	movs	r2, #42	; 0x2a
    6c3e:	333c      	adds	r3, #60	; 0x3c
    6c40:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    6c42:	2345      	movs	r3, #69	; 0x45
    6c44:	70a3      	strb	r3, [r4, #2]
    6c46:	e76d      	b.n	6b24 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    d->tl.u.rdt = crdt_stat_coap;
    6c48:	2208      	movs	r2, #8
    6c4a:	7002      	strb	r2, [r0, #0]
    d->tl.l = sizeof(coap_stats);
    6c4c:	321c      	adds	r2, #28
    6c4e:	7042      	strb	r2, [r0, #1]
    6c50:	681a      	ldr	r2, [r3, #0]
    6c52:	ba12      	rev	r2, r2
    d->cs.no_mbufs = htonl(coap_stats.no_mbufs);
    6c54:	6042      	str	r2, [r0, #4]
    6c56:	685a      	ldr	r2, [r3, #4]
    6c58:	ba12      	rev	r2, r2
    d->cs.no_mem = htonl(coap_stats.no_mem);
    6c5a:	6082      	str	r2, [r0, #8]
    6c5c:	689a      	ldr	r2, [r3, #8]
    6c5e:	ba12      	rev	r2, r2
    d->cs.sensors_enabled = htonl(coap_stats.sensors_enabled);
    6c60:	60c2      	str	r2, [r0, #12]
    6c62:	68da      	ldr	r2, [r3, #12]
    6c64:	ba12      	rev	r2, r2
    d->cs.sensors_disabled = htonl(coap_stats.sensors_disabled);
    6c66:	6102      	str	r2, [r0, #16]
    6c68:	691a      	ldr	r2, [r3, #16]
    6c6a:	ba12      	rev	r2, r2
    d->cs.err_hdlc_send = htonl(coap_stats.err_hdlc_send);
    6c6c:	6142      	str	r2, [r0, #20]
    6c6e:	695a      	ldr	r2, [r3, #20]
    6c70:	ba12      	rev	r2, r2
    d->cs.active_obs = htonl(coap_stats.active_obs);
    6c72:	6182      	str	r2, [r0, #24]
    6c74:	699a      	ldr	r2, [r3, #24]
    6c76:	ba12      	rev	r2, r2
    d->cs.rx_success = htonl(coap_stats.rx_success);
    6c78:	61c2      	str	r2, [r0, #28]
    6c7a:	69da      	ldr	r2, [r3, #28]
    6c7c:	6a1b      	ldr	r3, [r3, #32]
    6c7e:	ba12      	rev	r2, r2
    6c80:	ba1b      	rev	r3, r3
    d->cs.tx_success = htonl(coap_stats.tx_success);
    6c82:	6202      	str	r2, [r0, #32]
    d->cs.nretries_exceeded = htonl(coap_stats.nretries_exceeded);
    6c84:	6243      	str	r3, [r0, #36]	; 0x24
    6c86:	e7ce      	b.n	6c26 <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    6c88:	491a      	ldr	r1, [pc, #104]	; (6cf4 <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    6c8a:	0030      	movs	r0, r6
    6c8c:	f7fe ffe0 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
    6c90:	2800      	cmp	r0, #0
    6c92:	d003      	beq.n	6c9c <_ZL8crsystemP12coap_msg_ctxS0_+0x214>
            rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6c94:	23a1      	movs	r3, #161	; 0xa1
            rsp->code = COAP_RSP_404_NOT_FOUND;
    6c96:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    6c98:	2500      	movs	r5, #0
    6c9a:	e795      	b.n	6bc8 <_ZL8crsystemP12coap_msg_ctxS0_+0x140>
            rc = ERR_INVAL;
    6c9c:	2504      	movs	r5, #4
    6c9e:	e7c2      	b.n	6c26 <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    6ca0:	23a0      	movs	r3, #160	; 0xa0
            switch (rc) {
    6ca2:	2d04      	cmp	r5, #4
    6ca4:	d1f7      	bne.n	6c96 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
                rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    6ca6:	2386      	movs	r3, #134	; 0x86
    6ca8:	e7f5      	b.n	6c96 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    } else if (req->code == COAP_REQUEST_PUT) {
    6caa:	2b03      	cmp	r3, #3
    6cac:	d1f2      	bne.n	6c94 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    6cae:	490f      	ldr	r1, [pc, #60]	; (6cec <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    6cb0:	f7fe ffce 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
    6cb4:	2800      	cmp	r0, #0
    6cb6:	d0ed      	beq.n	6c94 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    6cb8:	490e      	ldr	r1, [pc, #56]	; (6cf4 <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    6cba:	0030      	movs	r0, r6
    6cbc:	f7fe ffc8 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
    6cc0:	2800      	cmp	r0, #0
    6cc2:	d1e7      	bne.n	6c94 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        dlog(LOG_DEBUG, "SET (status %d).", rc);
    6cc4:	2204      	movs	r2, #4
    6cc6:	490c      	ldr	r1, [pc, #48]	; (6cf8 <_ZL8crsystemP12coap_msg_ctxS0_+0x270>)
    6cc8:	3007      	adds	r0, #7
    6cca:	f7fd faa5 	bl	4218 <_Z4dlogiPKcz>
    6cce:	e7ea      	b.n	6ca6 <_ZL8crsystemP12coap_msg_ctxS0_+0x21e>
    6cd0:	000104d3 	.word	0x000104d3
    6cd4:	000104d8 	.word	0x000104d8
    6cd8:	20001878 	.word	0x20001878
    6cdc:	000104f8 	.word	0x000104f8
    6ce0:	0001050e 	.word	0x0001050e
    6ce4:	2000092d 	.word	0x2000092d
    6ce8:	00010529 	.word	0x00010529
    6cec:	0001052f 	.word	0x0001052f
    6cf0:	00010540 	.word	0x00010540
    6cf4:	00010538 	.word	0x00010538
    6cf8:	0001055f 	.word	0x0001055f

00006cfc <_ZL11crwellknownP12coap_msg_ctxS0_>:
{
    6cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    6cfe:	4b45      	ldr	r3, [pc, #276]	; (6e14 <_ZL11crwellknownP12coap_msg_ctxS0_+0x118>)
{
    6d00:	b087      	sub	sp, #28
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    6d02:	681b      	ldr	r3, [r3, #0]
{
    6d04:	000d      	movs	r5, r1
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    6d06:	9303      	str	r3, [sp, #12]
    void *it = NULL;
    6d08:	2300      	movs	r3, #0
    6d0a:	9305      	str	r3, [sp, #20]
    rsp->code = 0;  /* unknown yet - fill in below */
    6d0c:	708b      	strb	r3, [r1, #2]
    if (req->code == COAP_REQUEST_GET) {
    6d0e:	7882      	ldrb	r2, [r0, #2]
    6d10:	2a01      	cmp	r2, #1
    6d12:	d000      	beq.n	6d16 <_ZL11crwellknownP12coap_msg_ctxS0_+0x1a>
    6d14:	e079      	b.n	6e0a <_ZL11crwellknownP12coap_msg_ctxS0_+0x10e>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    6d16:	304c      	adds	r0, #76	; 0x4c
    6d18:	aa05      	add	r2, sp, #20
    6d1a:	210b      	movs	r1, #11
    6d1c:	0004      	movs	r4, r0
    6d1e:	f7ff fcc1 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    6d22:	2800      	cmp	r0, #0
    6d24:	d100      	bne.n	6d28 <_ZL11crwellknownP12coap_msg_ctxS0_+0x2c>
    6d26:	e073      	b.n	6e10 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    6d28:	aa05      	add	r2, sp, #20
    6d2a:	210b      	movs	r1, #11
    6d2c:	0020      	movs	r0, r4
    6d2e:	f7ff fcb9 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6d32:	2800      	cmp	r0, #0
    6d34:	d100      	bne.n	6d38 <_ZL11crwellknownP12coap_msg_ctxS0_+0x3c>
    6d36:	e06b      	b.n	6e10 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            coap_opt_strcmp(op, "core")                                      ||
    6d38:	4937      	ldr	r1, [pc, #220]	; (6e18 <_ZL11crwellknownP12coap_msg_ctxS0_+0x11c>)
    6d3a:	f7fe ff89 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
                copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) ||
    6d3e:	2800      	cmp	r0, #0
    6d40:	d166      	bne.n	6e10 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) {
    6d42:	aa05      	add	r2, sp, #20
    6d44:	210b      	movs	r1, #11
    6d46:	0020      	movs	r0, r4
    6d48:	f7ff fcac 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    6d4c:	2800      	cmp	r0, #0
    6d4e:	d15f      	bne.n	6e10 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
    6d50:	2302      	movs	r3, #2
    6d52:	4e32      	ldr	r6, [pc, #200]	; (6e1c <_ZL11crwellknownP12coap_msg_ctxS0_+0x120>)
    6d54:	9300      	str	r3, [sp, #0]
    6d56:	3618      	adds	r6, #24
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    6d58:	9b00      	ldr	r3, [sp, #0]
    6d5a:	9a03      	ldr	r2, [sp, #12]
    6d5c:	4293      	cmp	r3, r2
    6d5e:	da4a      	bge.n	6df6 <_ZL11crwellknownP12coap_msg_ctxS0_+0xfa>
            len = strlen(cr->path) + 4;         /* adding </ > , */
    6d60:	6830      	ldr	r0, [r6, #0]
    6d62:	f005 fe6a 	bl	ca3a <strlen>
    6d66:	0004      	movs	r4, r0
            if (cr->link) {
    6d68:	68b0      	ldr	r0, [r6, #8]
            len = strlen(cr->path) + 4;         /* adding </ > , */
    6d6a:	1d23      	adds	r3, r4, #4
            if (cr->link) {
    6d6c:	2800      	cmp	r0, #0
    6d6e:	d003      	beq.n	6d78 <_ZL11crwellknownP12coap_msg_ctxS0_+0x7c>
                len += strlen(cr->link) + 1;    /* ; */
    6d70:	f005 fe63 	bl	ca3a <strlen>
    6d74:	3405      	adds	r4, #5
    6d76:	1823      	adds	r3, r4, r0
    6d78:	9301      	str	r3, [sp, #4]
            ls = (char*) m_append(rsp->msg, len);
    6d7a:	466b      	mov	r3, sp
    6d7c:	6d28      	ldr	r0, [r5, #80]	; 0x50
    6d7e:	2104      	movs	r1, #4
    6d80:	5e59      	ldrsh	r1, [r3, r1]
    6d82:	f000 fae9 	bl	7358 <_Z8m_appendP4mbufs>
    6d86:	1e04      	subs	r4, r0, #0
            if (!ls) {
    6d88:	d107      	bne.n	6d9a <_ZL11crwellknownP12coap_msg_ctxS0_+0x9e>
                coap_stats.no_mbufs++;
    6d8a:	4a25      	ldr	r2, [pc, #148]	; (6e20 <_ZL11crwellknownP12coap_msg_ctxS0_+0x124>)
    6d8c:	6813      	ldr	r3, [r2, #0]
    6d8e:	3301      	adds	r3, #1
    6d90:	6013      	str	r3, [r2, #0]
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    6d92:	23a0      	movs	r3, #160	; 0xa0
            rsp->code = COAP_RSP_404_NOT_FOUND;
    6d94:	70ab      	strb	r3, [r5, #2]
            return ERR_FAIL;
    6d96:	2063      	movs	r0, #99	; 0x63
    6d98:	e035      	b.n	6e06 <_ZL11crwellknownP12coap_msg_ctxS0_+0x10a>
            memcpy(ls, "</", n);
    6d9a:	2202      	movs	r2, #2
    6d9c:	4921      	ldr	r1, [pc, #132]	; (6e24 <_ZL11crwellknownP12coap_msg_ctxS0_+0x128>)
    6d9e:	f004 fd24 	bl	b7ea <memcpy>
            m = strlen(cr->path);
    6da2:	6837      	ldr	r7, [r6, #0]
    6da4:	0038      	movs	r0, r7
    6da6:	f005 fe48 	bl	ca3a <strlen>
    6daa:	9002      	str	r0, [sp, #8]
            memcpy(&(ls[n]), cr->path, m);
    6dac:	9a02      	ldr	r2, [sp, #8]
    6dae:	1ca0      	adds	r0, r4, #2
    6db0:	0039      	movs	r1, r7
    6db2:	f004 fd1a 	bl	b7ea <memcpy>
            ls[n++] = '>';
    6db6:	223e      	movs	r2, #62	; 0x3e
    6db8:	9b02      	ldr	r3, [sp, #8]
    6dba:	18e3      	adds	r3, r4, r3
    6dbc:	709a      	strb	r2, [r3, #2]
            if (cr->link) {
    6dbe:	68b2      	ldr	r2, [r6, #8]
    6dc0:	2a00      	cmp	r2, #0
    6dc2:	d00c      	beq.n	6dde <_ZL11crwellknownP12coap_msg_ctxS0_+0xe2>
                ls[n++] = ';';
    6dc4:	223b      	movs	r2, #59	; 0x3b
    6dc6:	70da      	strb	r2, [r3, #3]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    6dc8:	68b7      	ldr	r7, [r6, #8]
    6dca:	0038      	movs	r0, r7
    6dcc:	f005 fe35 	bl	ca3a <strlen>
    6dd0:	0002      	movs	r2, r0
                ls[n++] = ';';
    6dd2:	9802      	ldr	r0, [sp, #8]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    6dd4:	0039      	movs	r1, r7
                ls[n++] = ';';
    6dd6:	3004      	adds	r0, #4
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    6dd8:	1820      	adds	r0, r4, r0
    6dda:	f004 fd06 	bl	b7ea <memcpy>
            ls[len-1] = ',';
    6dde:	9b01      	ldr	r3, [sp, #4]
    6de0:	360c      	adds	r6, #12
    6de2:	18e4      	adds	r4, r4, r3
    6de4:	232c      	movs	r3, #44	; 0x2c
    6de6:	3c01      	subs	r4, #1
    6de8:	7023      	strb	r3, [r4, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    6dea:	3319      	adds	r3, #25
    6dec:	70ab      	strb	r3, [r5, #2]
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    6dee:	9b00      	ldr	r3, [sp, #0]
    6df0:	3301      	adds	r3, #1
    6df2:	9300      	str	r3, [sp, #0]
    6df4:	e7b0      	b.n	6d58 <_ZL11crwellknownP12coap_msg_ctxS0_+0x5c>
        rsp->cf = COAP_CF_APPLICATION_LINK_FORMAT; /* application/link-format */
    6df6:	002b      	movs	r3, r5
    6df8:	2228      	movs	r2, #40	; 0x28
    6dfa:	333c      	adds	r3, #60	; 0x3c
    6dfc:	701a      	strb	r2, [r3, #0]
        rsp->plen = rsp->msg->m_pktlen;
    6dfe:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    6e00:	881b      	ldrh	r3, [r3, #0]
    6e02:	642b      	str	r3, [r5, #64]	; 0x40
    return ERR_OK;
    6e04:	2000      	movs	r0, #0
}
    6e06:	b007      	add	sp, #28
    6e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6e0a:	22a1      	movs	r2, #161	; 0xa1
    6e0c:	708a      	strb	r2, [r1, #2]
    6e0e:	e7f9      	b.n	6e04 <_ZL11crwellknownP12coap_msg_ctxS0_+0x108>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    6e10:	2384      	movs	r3, #132	; 0x84
    6e12:	e7bf      	b.n	6d94 <_ZL11crwellknownP12coap_msg_ctxS0_+0x98>
    6e14:	20001844 	.word	0x20001844
    6e18:	000104cb 	.word	0x000104cb
    6e1c:	20001848 	.word	0x20001848
    6e20:	20001878 	.word	0x20001878
    6e24:	000104d0 	.word	0x000104d0

00006e28 <_ZL7crtitleP12coap_msg_ctxS0_>:
{
    6e28:	b530      	push	{r4, r5, lr}
    if (req->code == COAP_REQUEST_GET)
    6e2a:	7883      	ldrb	r3, [r0, #2]
{
    6e2c:	b091      	sub	sp, #68	; 0x44
    6e2e:	000c      	movs	r4, r1
    if (req->code == COAP_REQUEST_GET)
    6e30:	2b01      	cmp	r3, #1
    6e32:	d12b      	bne.n	6e8c <_ZL7crtitleP12coap_msg_ctxS0_+0x64>
		strcpy(id, COAP_SERVER_VERSION_STRING);
    6e34:	4916      	ldr	r1, [pc, #88]	; (6e90 <_ZL7crtitleP12coap_msg_ctxS0_+0x68>)
    6e36:	4668      	mov	r0, sp
    6e38:	f005 fdf7 	bl	ca2a <strcpy>
		strcat(id, COAP_SERVER_VERSION_NUMBER);
    6e3c:	4915      	ldr	r1, [pc, #84]	; (6e94 <_ZL7crtitleP12coap_msg_ctxS0_+0x6c>)
    6e3e:	4668      	mov	r0, sp
    6e40:	f005 fddc 	bl	c9fc <strcat>
        d = (char*) m_append(rsp->msg, strlen(id));
    6e44:	4668      	mov	r0, sp
    6e46:	f005 fdf8 	bl	ca3a <strlen>
    6e4a:	b201      	sxth	r1, r0
    6e4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6e4e:	f000 fa83 	bl	7358 <_Z8m_appendP4mbufs>
    6e52:	1e05      	subs	r5, r0, #0
        if (!d)
    6e54:	d108      	bne.n	6e68 <_ZL7crtitleP12coap_msg_ctxS0_+0x40>
            coap_stats.no_mbufs++;
    6e56:	4a10      	ldr	r2, [pc, #64]	; (6e98 <_ZL7crtitleP12coap_msg_ctxS0_+0x70>)
    6e58:	6813      	ldr	r3, [r2, #0]
    6e5a:	3301      	adds	r3, #1
    6e5c:	6013      	str	r3, [r2, #0]
            rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    6e5e:	23a0      	movs	r3, #160	; 0xa0
}
    6e60:	2000      	movs	r0, #0
        rsp->code = COAP_RSP_403_FORBIDDEN;
    6e62:	70a3      	strb	r3, [r4, #2]
}
    6e64:	b011      	add	sp, #68	; 0x44
    6e66:	bd30      	pop	{r4, r5, pc}
            memcpy(d, id, strlen(id));
    6e68:	4668      	mov	r0, sp
    6e6a:	f005 fde6 	bl	ca3a <strlen>
    6e6e:	4669      	mov	r1, sp
    6e70:	0002      	movs	r2, r0
    6e72:	0028      	movs	r0, r5
    6e74:	f004 fcb9 	bl	b7ea <memcpy>
            rsp->plen = strlen(id);
    6e78:	4668      	mov	r0, sp
    6e7a:	f005 fdde 	bl	ca3a <strlen>
            rsp->cf = COAP_CF_TEXT_PLAIN;
    6e7e:	0023      	movs	r3, r4
    6e80:	2200      	movs	r2, #0
    6e82:	333c      	adds	r3, #60	; 0x3c
            rsp->plen = strlen(id);
    6e84:	6420      	str	r0, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_TEXT_PLAIN;
    6e86:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    6e88:	2345      	movs	r3, #69	; 0x45
    6e8a:	e7e9      	b.n	6e60 <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
        rsp->code = COAP_RSP_403_FORBIDDEN;
    6e8c:	2383      	movs	r3, #131	; 0x83
    6e8e:	e7e7      	b.n	6e60 <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
    6e90:	0000fb53 	.word	0x0000fb53
    6e94:	0000fb71 	.word	0x0000fb71
    6e98:	20001878 	.word	0x20001878

00006e9c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>:
        return ERR_NO_MEM;
    6e9c:	2303      	movs	r3, #3
{
    6e9e:	b530      	push	{r4, r5, lr}
    if (coap_reg_size < COAP_MAX_CBR)
    6ea0:	4c07      	ldr	r4, [pc, #28]	; (6ec0 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x24>)
    6ea2:	6825      	ldr	r5, [r4, #0]
    6ea4:	429d      	cmp	r5, r3
    6ea6:	dc09      	bgt.n	6ebc <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x20>
        idx = coap_reg_size++;    
    6ea8:	1c6b      	adds	r3, r5, #1
    6eaa:	6023      	str	r3, [r4, #0]
    coap_registry[idx].path = path;
    6eac:	240c      	movs	r4, #12
    6eae:	436c      	muls	r4, r5
    6eb0:	4b04      	ldr	r3, [pc, #16]	; (6ec4 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x28>)
    6eb2:	50e0      	str	r0, [r4, r3]
    coap_registry[idx].cb = cbfunc;
    6eb4:	191b      	adds	r3, r3, r4
    6eb6:	6059      	str	r1, [r3, #4]
    coap_registry[idx].link = corelink;
    6eb8:	609a      	str	r2, [r3, #8]
    return ERR_OK;
    6eba:	2300      	movs	r3, #0
}
    6ebc:	0018      	movs	r0, r3
    6ebe:	bd30      	pop	{r4, r5, pc}
    6ec0:	20001844 	.word	0x20001844
    6ec4:	20001848 	.word	0x20001848

00006ec8 <_Z18coap_registry_initv>:
{
    6ec8:	b510      	push	{r4, lr}
	coap_reg_size = 0;
    6eca:	2400      	movs	r4, #0
    6ecc:	4b0d      	ldr	r3, [pc, #52]	; (6f04 <_Z18coap_registry_initv+0x3c>)
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    6ece:	4a0e      	ldr	r2, [pc, #56]	; (6f08 <_Z18coap_registry_initv+0x40>)
    6ed0:	490e      	ldr	r1, [pc, #56]	; (6f0c <_Z18coap_registry_initv+0x44>)
    6ed2:	480f      	ldr	r0, [pc, #60]	; (6f10 <_Z18coap_registry_initv+0x48>)
	coap_reg_size = 0;
    6ed4:	601c      	str	r4, [r3, #0]
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    6ed6:	f7ff ffe1 	bl	6e9c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(".well-known", crwellknown, NULL);
    6eda:	0022      	movs	r2, r4
    6edc:	490d      	ldr	r1, [pc, #52]	; (6f14 <_Z18coap_registry_initv+0x4c>)
    6ede:	480e      	ldr	r0, [pc, #56]	; (6f18 <_Z18coap_registry_initv+0x50>)
    6ee0:	f7ff ffdc 	bl	6e9c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(S_URI_SYSTEM, crsystem, CLA_SYSTEM);
    6ee4:	4a0d      	ldr	r2, [pc, #52]	; (6f1c <_Z18coap_registry_initv+0x54>)
    6ee6:	490e      	ldr	r1, [pc, #56]	; (6f20 <_Z18coap_registry_initv+0x58>)
    6ee8:	480e      	ldr	r0, [pc, #56]	; (6f24 <_Z18coap_registry_initv+0x5c>)
    6eea:	f7ff ffd7 	bl	6e9c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
	if (is_sapi == 1)
    6eee:	4b0e      	ldr	r3, [pc, #56]	; (6f28 <_Z18coap_registry_initv+0x60>)
    6ef0:	4a0e      	ldr	r2, [pc, #56]	; (6f2c <_Z18coap_registry_initv+0x64>)
    6ef2:	781b      	ldrb	r3, [r3, #0]
    6ef4:	480e      	ldr	r0, [pc, #56]	; (6f30 <_Z18coap_registry_initv+0x68>)
		(void)coap_uri_register(classifier, crsapi, CLA_ARDUINO);
    6ef6:	490f      	ldr	r1, [pc, #60]	; (6f34 <_Z18coap_registry_initv+0x6c>)
	if (is_sapi == 1)
    6ef8:	2b01      	cmp	r3, #1
    6efa:	d000      	beq.n	6efe <_Z18coap_registry_initv+0x36>
		(void)coap_uri_register(classifier, crarduino, CLA_ARDUINO);
    6efc:	490e      	ldr	r1, [pc, #56]	; (6f38 <_Z18coap_registry_initv+0x70>)
    6efe:	f7ff ffcd 	bl	6e9c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
}
    6f02:	bd10      	pop	{r4, pc}
    6f04:	20001844 	.word	0x20001844
    6f08:	00010458 	.word	0x00010458
    6f0c:	00006e29 	.word	0x00006e29
    6f10:	0000fe0e 	.word	0x0000fe0e
    6f14:	00006cfd 	.word	0x00006cfd
    6f18:	0001046a 	.word	0x0001046a
    6f1c:	00010476 	.word	0x00010476
    6f20:	00006a89 	.word	0x00006a89
    6f24:	0001049b 	.word	0x0001049b
    6f28:	20000049 	.word	0x20000049
    6f2c:	0001049f 	.word	0x0001049f
    6f30:	200000a0 	.word	0x200000a0
    6f34:	000047c5 	.word	0x000047c5
    6f38:	00004875 	.word	0x00004875

00006f3c <_Z15coap_s_uri_procP12coap_msg_ctxS0_>:
{
    6f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, NULL)) == NULL) 
    6f3e:	2200      	movs	r2, #0
{
    6f40:	0006      	movs	r6, r0
    6f42:	000c      	movs	r4, r1
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, NULL)) == NULL) 
    6f44:	304c      	adds	r0, #76	; 0x4c
    6f46:	210b      	movs	r1, #11
    6f48:	f7ff fbac 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6f4c:	1e07      	subs	r7, r0, #0
    6f4e:	d010      	beq.n	6f72 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x36>
    6f50:	2500      	movs	r5, #0
            if (!coap_opt_strcmp(op, coap_registry[i].path)) 
    6f52:	230c      	movs	r3, #12
    6f54:	436b      	muls	r3, r5
    6f56:	4a1a      	ldr	r2, [pc, #104]	; (6fc0 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x84>)
    6f58:	0038      	movs	r0, r7
    6f5a:	58d1      	ldr	r1, [r2, r3]
    6f5c:	f7fe fe78 	bl	5c50 <_Z15coap_opt_strcmpPK5optlvPKc>
    6f60:	2800      	cmp	r0, #0
    6f62:	d007      	beq.n	6f74 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x38>
        for (i = 0; i < rs; i++) 
    6f64:	3501      	adds	r5, #1
    6f66:	2d04      	cmp	r5, #4
    6f68:	d1f3      	bne.n	6f52 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x16>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    6f6a:	2384      	movs	r3, #132	; 0x84
    6f6c:	e00d      	b.n	6f8a <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x4e>
        rsp->type = COAP_T_NCONF_VAL;
    6f6e:	2301      	movs	r3, #1
    6f70:	e023      	b.n	6fba <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x7e>
        i = 0;
    6f72:	0005      	movs	r5, r0
    rc = coap_registry[i].cb(req, rsp);
    6f74:	230c      	movs	r3, #12
    6f76:	435d      	muls	r5, r3
    6f78:	4b11      	ldr	r3, [pc, #68]	; (6fc0 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x84>)
    6f7a:	0021      	movs	r1, r4
    6f7c:	195d      	adds	r5, r3, r5
    6f7e:	686b      	ldr	r3, [r5, #4]
    6f80:	0030      	movs	r0, r6
    6f82:	4798      	blx	r3
    if (rc != ERR_OK) 
    6f84:	2800      	cmp	r0, #0
    6f86:	d001      	beq.n	6f8c <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x50>
        rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    6f88:	23a0      	movs	r3, #160	; 0xa0
    6f8a:	70a3      	strb	r3, [r4, #2]
    op = copt_get_next_opt_type((const sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE, NULL);
    6f8c:	0025      	movs	r5, r4
    6f8e:	354c      	adds	r5, #76	; 0x4c
    6f90:	2200      	movs	r2, #0
    6f92:	2106      	movs	r1, #6
    6f94:	0028      	movs	r0, r5
    6f96:	f7ff fb85 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if ((COAP_CLASS(rsp->code) != 2) || (op == NULL)) 
    6f9a:	78a3      	ldrb	r3, [r4, #2]
    6f9c:	095b      	lsrs	r3, r3, #5
    6f9e:	2b02      	cmp	r3, #2
    6fa0:	d101      	bne.n	6fa6 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x6a>
    6fa2:	2800      	cmp	r0, #0
    6fa4:	d105      	bne.n	6fb2 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x76>
        (void)copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    6fa6:	2106      	movs	r1, #6
    6fa8:	0028      	movs	r0, r5
    6faa:	f7ff fba3 	bl	66f4 <_Z17copt_del_opt_typeP5sl_cot>
        rsp->final = 1;
    6fae:	2301      	movs	r3, #1
    6fb0:	64a3      	str	r3, [r4, #72]	; 0x48
    if (req->type == COAP_T_CONF_VAL) 
    6fb2:	7833      	ldrb	r3, [r6, #0]
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d1da      	bne.n	6f6e <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x32>
        rsp->type = COAP_T_ACK_VAL;
    6fb8:	3302      	adds	r3, #2
}
    6fba:	2000      	movs	r0, #0
        rsp->type = COAP_T_NCONF_VAL;
    6fbc:	7023      	strb	r3, [r4, #0]
}
    6fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6fc0:	20001848 	.word	0x20001848

00006fc4 <_Z24coap_put_ic_reboot_eventv>:
 *
 * Given that there are HDLC retries, we're not going to attempt CoAP retries.
 * Could be added later if required.
 */
error_t coap_put_ic_reboot_event(void)
{
    6fc4:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *req;
	uint8_t     *ptr;

	/* Allocate request buffer */
	MGETHDR(req);
    6fc6:	f000 f96b 	bl	72a0 <_Z5m_getv>
    6fca:	1e04      	subs	r4, r0, #0
	if (!req) 
    6fcc:	d105      	bne.n	6fda <_Z24coap_put_ic_reboot_eventv+0x16>
	{
		coap_stats.no_mbufs++;
		return ERR_NO_MEM;
    6fce:	2003      	movs	r0, #3
		coap_stats.no_mbufs++;
    6fd0:	4a11      	ldr	r2, [pc, #68]	; (7018 <_Z24coap_put_ic_reboot_eventv+0x54>)
    6fd2:	6813      	ldr	r3, [r2, #0]
    6fd4:	3301      	adds	r3, #1
    6fd6:	6013      	str	r3, [r2, #0]
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
	delay(1);
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);

	return ERR_OK;
    6fd8:	bd70      	pop	{r4, r5, r6, pc}
	ptr = (uint8_t *)m_append(req, sizeof(rbtput));
    6fda:	2114      	movs	r1, #20
    6fdc:	f000 f9bc 	bl	7358 <_Z8m_appendP4mbufs>
	memcpy(ptr, rbtput, sizeof(rbtput));
    6fe0:	2214      	movs	r2, #20
    6fe2:	490e      	ldr	r1, [pc, #56]	; (701c <_Z24coap_put_ic_reboot_eventv+0x58>)
    6fe4:	f004 fc01 	bl	b7ea <memcpy>
	if (pending_rsp)
    6fe8:	4d0d      	ldr	r5, [pc, #52]	; (7020 <_Z24coap_put_ic_reboot_eventv+0x5c>)
    6fea:	6828      	ldr	r0, [r5, #0]
    6fec:	2800      	cmp	r0, #0
    6fee:	d001      	beq.n	6ff4 <_Z24coap_put_ic_reboot_eventv+0x30>
		m_free(pending_rsp);
    6ff0:	f000 f980 	bl	72f4 <_Z6m_freeP4mbuf>
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    6ff4:	490b      	ldr	r1, [pc, #44]	; (7024 <_Z24coap_put_ic_reboot_eventv+0x60>)
    6ff6:	2007      	movs	r0, #7
	pending_rsp = req;
    6ff8:	602c      	str	r4, [r5, #0]
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    6ffa:	f7fd f90d 	bl	4218 <_Z4dlogiPKcz>
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
    6ffe:	2100      	movs	r1, #0
    7000:	2009      	movs	r0, #9
    7002:	f7fc fd65 	bl	3ad0 <digitalWrite>
	delay(1);
    7006:	2001      	movs	r0, #1
    7008:	f7fb fb62 	bl	26d0 <delay>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    700c:	2009      	movs	r0, #9
    700e:	2101      	movs	r1, #1
    7010:	f7fc fd5e 	bl	3ad0 <digitalWrite>
	return ERR_OK;
    7014:	2000      	movs	r0, #0
    7016:	e7df      	b.n	6fd8 <_Z24coap_put_ic_reboot_eventv+0x14>
    7018:	20001878 	.word	0x20001878
    701c:	0001058c 	.word	0x0001058c
    7020:	20001840 	.word	0x20001840
    7024:	00010570 	.word	0x00010570

00007028 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>:
 */


// CoAP Server initialization
void coap_s_init(HardwareSerial *pSerial, uint32_t max_age, uint32_t uart_timeout_ms, uint32_t max_hdlc_payload_size, const char *uri_rsrc_name, ObsFuncPtr pObsFuncPtr)
{
    7028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    702a:	000f      	movs	r7, r1
    702c:	0015      	movs	r5, r2
    702e:	001e      	movs	r6, r3
    7030:	0004      	movs	r4, r0
	int res;
	
	// Initialize CoAP Server registry
	coap_registry_init();
    7032:	f7ff ff49 	bl	6ec8 <_Z18coap_registry_initv>

	// Set Max-Age: CoAP Server Response Option 14
	coap_set_max_age(max_age);
    7036:	0038      	movs	r0, r7
    7038:	f7ff f99a 	bl	6370 <_Z16coap_set_max_agem>
	
	// Set the URI used for obtaining token etc in CoAP Observe response msg
	set_observer(uri_rsrc_name, pObsFuncPtr);
    703c:	9907      	ldr	r1, [sp, #28]
    703e:	9806      	ldr	r0, [sp, #24]
    7040:	f7ff fbbe 	bl	67c0 <_Z12set_observerPKcPF7error_eP4mbufPhhE>

	// Open the HDLC connection
	res = hdlcs_open(pSerial, uart_timeout_ms, max_hdlc_payload_size);
    7044:	0032      	movs	r2, r6
    7046:	0029      	movs	r1, r5
    7048:	0020      	movs	r0, r4
    704a:	f000 f9eb 	bl	7424 <_Z10hdlcs_openP14HardwareSerialmm>
	if (res) 
    704e:	2800      	cmp	r0, #0
    7050:	d003      	beq.n	705a <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x32>
	{
		dlog(LOG_ERR, "HDLC initialization failed!");
    7052:	4902      	ldr	r1, [pc, #8]	; (705c <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x34>)
    7054:	2003      	movs	r0, #3
    7056:	f7fd f8df 	bl	4218 <_Z4dlogiPKcz>
	}
	
	// That's all folks!
} // coap_s_init()
    705a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    705c:	000105f5 	.word	0x000105f5

00007060 <_Z11coap_s_procP4mbuf>:
 * Build a response PDU based on the RSP context, and return the mbuf.
 */
mbuf_ptr_t coap_s_proc( mbuf_ptr_t m )
{
    struct coap_msg_ctx cc, rcc;
    void *clt = NULL;   /* Not used on sensor, 1 HDLC connection. */
    7060:	2300      	movs	r3, #0
{
    7062:	b5f0      	push	{r4, r5, r6, r7, lr}
    7064:	b0b1      	sub	sp, #196	; 0xc4
    7066:	9003      	str	r0, [sp, #12]
    void *clt = NULL;   /* Not used on sensor, 1 HDLC connection. */
    7068:	9305      	str	r3, [sp, #20]
    uint8_t code;
    char *pstr;
    
    /* Allocate response buffer */
    struct mbuf *r = NULL;
    r = m_get();
    706a:	f000 f919 	bl	72a0 <_Z5m_getv>
    706e:	1e06      	subs	r6, r0, #0
    if (r == NULL)
    7070:	d029      	beq.n	70c6 <_Z11coap_s_procP4mbuf+0x66>
    {
	    goto done;
    }

    /* Parse incoming message */
    memset(&cc, 0, sizeof(cc));
    7072:	ac06      	add	r4, sp, #24
    7074:	2254      	movs	r2, #84	; 0x54
    7076:	2100      	movs	r1, #0
    7078:	0020      	movs	r0, r4
    707a:	f004 fbd1 	bl	b820 <memset>
    copt_init((sl_co*)&(cc.oh));
    memset(&rcc, 0, sizeof(rcc));
    707e:	ad1b      	add	r5, sp, #108	; 0x6c
    copt_init((sl_co*)&(cc.oh));
    7080:	a819      	add	r0, sp, #100	; 0x64
    7082:	f7ff fa99 	bl	65b8 <_Z9copt_initP5sl_co>
    memset(&rcc, 0, sizeof(rcc));
    7086:	2254      	movs	r2, #84	; 0x54
    7088:	2100      	movs	r1, #0
    708a:	0028      	movs	r0, r5
    708c:	f004 fbc8 	bl	b820 <memset>
    copt_init((sl_co*)&(rcc.oh));
    7090:	a82e      	add	r0, sp, #184	; 0xb8
    7092:	f7ff fa91 	bl	65b8 <_Z9copt_initP5sl_co>
    rc = coap_msg_parse(&cc, m, &code);
    7096:	230b      	movs	r3, #11
    7098:	aa02      	add	r2, sp, #8
    709a:	189b      	adds	r3, r3, r2
    709c:	001a      	movs	r2, r3
    709e:	9903      	ldr	r1, [sp, #12]
    70a0:	0020      	movs	r0, r4
    70a2:	f7fe ff89 	bl	5fb8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh>
    70a6:	1e07      	subs	r7, r0, #0

    if (rc == ERR_OK)
    70a8:	d000      	beq.n	70ac <_Z11coap_s_procP4mbuf+0x4c>
    70aa:	e07b      	b.n	71a4 <_Z11coap_s_procP4mbuf+0x144>
	{
        if (cc.type == COAP_T_ACK_VAL)
    70ac:	7823      	ldrb	r3, [r4, #0]
    70ae:	2b02      	cmp	r3, #2
    70b0:	d11f      	bne.n	70f2 <_Z11coap_s_procP4mbuf+0x92>
		{
            /*
             * TODO: Assuming it's not a piggy-backed ACK for now.
             */
            rc = coap_ack_rx(cc.mid, NULL);
    70b2:	0039      	movs	r1, r7
    70b4:	88a0      	ldrh	r0, [r4, #4]
    70b6:	f7fe fda9 	bl	5c0c <_Z11coap_ack_rxtP4mbuf>
            dlog(LOG_INFO, "ACK for mid: 0x%x received, lookup returned %d", cc.mid, rc);
    70ba:	88a2      	ldrh	r2, [r4, #4]
            rc = coap_ack_rx(cc.mid, NULL);
    70bc:	0003      	movs	r3, r0
            dlog(LOG_INFO, "ACK for mid: 0x%x received, lookup returned %d", cc.mid, rc);
    70be:	4953      	ldr	r1, [pc, #332]	; (720c <_Z11coap_s_procP4mbuf+0x1ac>)
    70c0:	2006      	movs	r0, #6
    70c2:	f7fd f8a9 	bl	4218 <_Z4dlogiPKcz>
			goto done;
        }
    }

done:
    if (cc.msg)
    70c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    70c8:	9303      	str	r3, [sp, #12]
    70ca:	2b00      	cmp	r3, #0
    70cc:	d008      	beq.n	70e0 <_Z11coap_s_procP4mbuf+0x80>
	{
		dlog(LOG_DEBUG, "coap_s_proc: Free cc mbuf");
    70ce:	4950      	ldr	r1, [pc, #320]	; (7210 <_Z11coap_s_procP4mbuf+0x1b0>)
    70d0:	2007      	movs	r0, #7
    70d2:	f7fd f8a1 	bl	4218 <_Z4dlogiPKcz>
        m_free(cc.msg);
    70d6:	981a      	ldr	r0, [sp, #104]	; 0x68
    70d8:	f000 f90c 	bl	72f4 <_Z6m_freeP4mbuf>
        cc.msg = NULL;
    70dc:	2300      	movs	r3, #0
    70de:	931a      	str	r3, [sp, #104]	; 0x68
    }
    copt_del_all((sl_co*)&(cc.oh));
    70e0:	a819      	add	r0, sp, #100	; 0x64
    70e2:	f7ff fa7b 	bl	65dc <_Z12copt_del_allP5sl_co>
    copt_del_all((sl_co*)&(rcc.oh));
    70e6:	a82e      	add	r0, sp, #184	; 0xb8
    70e8:	f7ff fa78 	bl	65dc <_Z12copt_del_allP5sl_co>
    return r;
	
}
    70ec:	0030      	movs	r0, r6
    70ee:	b031      	add	sp, #196	; 0xc4
    70f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        coap_init_rsp(&cc, &rcc, r);
    70f2:	0032      	movs	r2, r6
    70f4:	0029      	movs	r1, r5
    70f6:	0020      	movs	r0, r4
    70f8:	f7ff f820 	bl	613c <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>
        if (cc.code == COAP_EMPTY_MESSAGE)
    70fc:	78a3      	ldrb	r3, [r4, #2]
    70fe:	2b00      	cmp	r3, #0
    7100:	d128      	bne.n	7154 <_Z11coap_s_procP4mbuf+0xf4>
            rcc.plen = 0;
    7102:	642b      	str	r3, [r5, #64]	; 0x40
            if (cc.type == COAP_T_CONF_VAL)
    7104:	7823      	ldrb	r3, [r4, #0]
    7106:	2b00      	cmp	r3, #0
    7108:	d101      	bne.n	710e <_Z11coap_s_procP4mbuf+0xae>
                rcc.type = COAP_T_RESET_VAL;
    710a:	3303      	adds	r3, #3
    710c:	702b      	strb	r3, [r5, #0]
        pstr = coap_pathstr(&cc);
    710e:	0020      	movs	r0, r4
    7110:	f7fe fdb0 	bl	5c74 <_Z12coap_pathstrPK12coap_msg_ctx>
        if (!rcc.final && copt_get_next_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE, NULL))
    7114:	6caa      	ldr	r2, [r5, #72]	; 0x48
        pstr = coap_pathstr(&cc);
    7116:	0007      	movs	r7, r0
        if (!rcc.final && copt_get_next_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE, NULL))
    7118:	2a00      	cmp	r2, #0
    711a:	d105      	bne.n	7128 <_Z11coap_s_procP4mbuf+0xc8>
    711c:	2106      	movs	r1, #6
    711e:	a82e      	add	r0, sp, #184	; 0xb8
    7120:	f7ff fac0 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7124:	2800      	cmp	r0, #0
    7126:	d15f      	bne.n	71e8 <_Z11coap_s_procP4mbuf+0x188>
        } else if ((op = copt_get_next_opt_type((sl_co*)&(cc.oh), COAP_OPTION_OBSERVE, NULL)) && 
    7128:	2200      	movs	r2, #0
    712a:	2106      	movs	r1, #6
    712c:	a819      	add	r0, sp, #100	; 0x64
    712e:	f7ff fab9 	bl	66a4 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7132:	2800      	cmp	r0, #0
    7134:	d023      	beq.n	717e <_Z11coap_s_procP4mbuf+0x11e>
				   (co_uint32_n2h(op) == COAP_OBS_DEREG))
    7136:	f7fe fec1 	bl	5ebc <_Z13co_uint32_n2hPK5optlv>
        } else if ((op = copt_get_next_opt_type((sl_co*)&(cc.oh), COAP_OPTION_OBSERVE, NULL)) && 
    713a:	2801      	cmp	r0, #1
    713c:	d11f      	bne.n	717e <_Z11coap_s_procP4mbuf+0x11e>
            if (disable_obs(pstr, &cc, &clt, 0) == ERR_OK)
    713e:	2300      	movs	r3, #0
    7140:	aa05      	add	r2, sp, #20
    7142:	0021      	movs	r1, r4
    7144:	0038      	movs	r0, r7
    7146:	f7ff f9e9 	bl	651c <_Z11disable_obsPKcP12coap_msg_ctxPPvh>
    714a:	2800      	cmp	r0, #0
    714c:	d117      	bne.n	717e <_Z11coap_s_procP4mbuf+0x11e>
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    714e:	003a      	movs	r2, r7
    7150:	4930      	ldr	r1, [pc, #192]	; (7214 <_Z11coap_s_procP4mbuf+0x1b4>)
    7152:	e058      	b.n	7206 <_Z11coap_s_procP4mbuf+0x1a6>
            if (coap_s_uri_proc(&cc, &rcc) != ERR_OK)
    7154:	0029      	movs	r1, r5
    7156:	0020      	movs	r0, r4
    7158:	f7ff fef0 	bl	6f3c <_Z15coap_s_uri_procP12coap_msg_ctxS0_>
    715c:	2800      	cmp	r0, #0
    715e:	d0d6      	beq.n	710e <_Z11coap_s_procP4mbuf+0xae>
                rcc.code = COAP_RSP_500_INTERNAL_ERROR;
    7160:	23a0      	movs	r3, #160	; 0xa0
                rcc.plen = 0;
    7162:	642f      	str	r7, [r5, #64]	; 0x40
                rcc.code = COAP_RSP_500_INTERNAL_ERROR;
    7164:	70ab      	strb	r3, [r5, #2]
    7166:	e7d2      	b.n	710e <_Z11coap_s_procP4mbuf+0xae>
                (void)copt_del_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE);
    7168:	2106      	movs	r1, #6
    716a:	a82e      	add	r0, sp, #184	; 0xb8
    716c:	f7ff fac2 	bl	66f4 <_Z17copt_del_opt_typeP5sl_cot>
                rcc.final = 1;
    7170:	2301      	movs	r3, #1
                dlog(LOG_ERR, "Failed to enabled observe for URI: %s", pstr);
    7172:	003a      	movs	r2, r7
    7174:	2003      	movs	r0, #3
    7176:	4928      	ldr	r1, [pc, #160]	; (7218 <_Z11coap_s_procP4mbuf+0x1b8>)
                rcc.final = 1;
    7178:	64ab      	str	r3, [r5, #72]	; 0x48
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    717a:	f7fd f84d 	bl	4218 <_Z4dlogiPKcz>
        if (coap_msg_response(&rcc) != ERR_OK)
    717e:	a81b      	add	r0, sp, #108	; 0x6c
    7180:	f7ff f81c 	bl	61bc <_Z17coap_msg_responseP12coap_msg_ctx>
    7184:	2800      	cmp	r0, #0
    7186:	d001      	beq.n	718c <_Z11coap_s_procP4mbuf+0x12c>
				dlog(LOG_DEBUG, "Error msg rsp: freeing mbuf");
    7188:	4924      	ldr	r1, [pc, #144]	; (721c <_Z11coap_s_procP4mbuf+0x1bc>)
    718a:	e003      	b.n	7194 <_Z11coap_s_procP4mbuf+0x134>
        if(r->m_pktlen == 0)
    718c:	8834      	ldrh	r4, [r6, #0]
	        dlog(LOG_DEBUG, "No rsp: freeing mbuf");
    718e:	4924      	ldr	r1, [pc, #144]	; (7220 <_Z11coap_s_procP4mbuf+0x1c0>)
        if(r->m_pktlen == 0)
    7190:	2c00      	cmp	r4, #0
    7192:	d198      	bne.n	70c6 <_Z11coap_s_procP4mbuf+0x66>
				dlog(LOG_DEBUG, "Error msg rsp: freeing mbuf");
    7194:	2007      	movs	r0, #7
    7196:	f7fd f83f 	bl	4218 <_Z4dlogiPKcz>
				m_free(r);
    719a:	0030      	movs	r0, r6
    719c:	f000 f8aa 	bl	72f4 <_Z6m_freeP4mbuf>
				r = NULL;
    71a0:	2600      	movs	r6, #0
    71a2:	e790      	b.n	70c6 <_Z11coap_s_procP4mbuf+0x66>
			dlog(LOG_DEBUG, "Parse error: freeing mbuf");
    71a4:	491f      	ldr	r1, [pc, #124]	; (7224 <_Z11coap_s_procP4mbuf+0x1c4>)
	else if (rc == ERR_VER_NOT_SUPP)
    71a6:	281d      	cmp	r0, #29
    71a8:	d0f4      	beq.n	7194 <_Z11coap_s_procP4mbuf+0x134>
        dlog(LOG_ERR, "Error: rc/h->len: %d/%d, cc.code: %d", rc, m->m_pktlen, cc.code);
    71aa:	78a2      	ldrb	r2, [r4, #2]
    71ac:	9b03      	ldr	r3, [sp, #12]
    71ae:	491e      	ldr	r1, [pc, #120]	; (7228 <_Z11coap_s_procP4mbuf+0x1c8>)
    71b0:	881b      	ldrh	r3, [r3, #0]
    71b2:	9200      	str	r2, [sp, #0]
    71b4:	0002      	movs	r2, r0
    71b6:	2003      	movs	r0, #3
    71b8:	f7fd f82e 	bl	4218 <_Z4dlogiPKcz>
        coap_init_rsp(&cc, &rcc, r);
    71bc:	0032      	movs	r2, r6
    71be:	0029      	movs	r1, r5
    71c0:	0020      	movs	r0, r4
    71c2:	f7fe ffbb 	bl	613c <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>
        if (cc.type == COAP_T_CONF_VAL)
    71c6:	7823      	ldrb	r3, [r4, #0]
    71c8:	2b00      	cmp	r3, #0
    71ca:	d10b      	bne.n	71e4 <_Z11coap_s_procP4mbuf+0x184>
            rcc.type = COAP_T_ACK_VAL;
    71cc:	3302      	adds	r3, #2
            rcc.type = COAP_T_NCONF_VAL;
    71ce:	702b      	strb	r3, [r5, #0]
        rcc.code = code;
    71d0:	ab02      	add	r3, sp, #8
    71d2:	7adb      	ldrb	r3, [r3, #11]
        if (coap_msg_response(&rcc) != ERR_OK)
    71d4:	0028      	movs	r0, r5
        rcc.code = code;
    71d6:	70ab      	strb	r3, [r5, #2]
        if (coap_msg_response(&rcc) != ERR_OK)
    71d8:	f7fe fff0 	bl	61bc <_Z17coap_msg_responseP12coap_msg_ctx>
    71dc:	2800      	cmp	r0, #0
    71de:	d100      	bne.n	71e2 <_Z11coap_s_procP4mbuf+0x182>
    71e0:	e771      	b.n	70c6 <_Z11coap_s_procP4mbuf+0x66>
    71e2:	e7d1      	b.n	7188 <_Z11coap_s_procP4mbuf+0x128>
            rcc.type = COAP_T_NCONF_VAL;
    71e4:	2301      	movs	r3, #1
    71e6:	e7f2      	b.n	71ce <_Z11coap_s_procP4mbuf+0x16e>
            (void)disable_obs(pstr, &cc, &clt, 1);
    71e8:	aa05      	add	r2, sp, #20
    71ea:	0021      	movs	r1, r4
    71ec:	2301      	movs	r3, #1
    71ee:	0038      	movs	r0, r7
    71f0:	f7ff f994 	bl	651c <_Z11disable_obsPKcP12coap_msg_ctxPPvh>
            if (enable_obs(pstr, &cc, &clt) != ERR_OK)
    71f4:	aa05      	add	r2, sp, #20
    71f6:	0021      	movs	r1, r4
    71f8:	0038      	movs	r0, r7
    71fa:	f7ff f909 	bl	6410 <_Z10enable_obsPKcP12coap_msg_ctxPv>
    71fe:	2800      	cmp	r0, #0
    7200:	d1b2      	bne.n	7168 <_Z11coap_s_procP4mbuf+0x108>
                dlog(LOG_DEBUG, "Enabled observe for URI: %s", pstr);
    7202:	003a      	movs	r2, r7
    7204:	4909      	ldr	r1, [pc, #36]	; (722c <_Z11coap_s_procP4mbuf+0x1cc>)
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    7206:	2007      	movs	r0, #7
    7208:	e7b7      	b.n	717a <_Z11coap_s_procP4mbuf+0x11a>
    720a:	46c0      	nop			; (mov r8, r8)
    720c:	00010611 	.word	0x00010611
    7210:	0001070e 	.word	0x0001070e
    7214:	00010682 	.word	0x00010682
    7218:	00010640 	.word	0x00010640
    721c:	0001069e 	.word	0x0001069e
    7220:	000106ba 	.word	0x000106ba
    7224:	000106cf 	.word	0x000106cf
    7228:	000106e9 	.word	0x000106e9
    722c:	00010666 	.word	0x00010666

00007230 <_Z10coap_s_runv>:


// Run HDLCS and the CoAP Server 
void coap_s_run()
{
    7230:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *appd;
	struct mbuf *arsp;
	
	/* Run the secondary-station HDLC state machine */
	hdlcs_run();
    7232:	f000 f9b9 	bl	75a8 <_Z9hdlcs_runv>
	
	/* Serve incoming request, if any */
	appd = hdlcs_read();
    7236:	f000 f93b 	bl	74b0 <_Z10hdlcs_readv>
    723a:	1e05      	subs	r5, r0, #0
	if (appd) 
    723c:	d01c      	beq.n	7278 <_Z10coap_s_runv+0x48>
	{
		/* Run the CoAP server */
		arsp = coap_s_proc(appd);
    723e:	f7ff ff0f 	bl	7060 <_Z11coap_s_procP4mbuf>
    7242:	1e04      	subs	r4, r0, #0
		if (arsp) 
    7244:	d00a      	beq.n	725c <_Z10coap_s_runv+0x2c>
		{
			// Direct send of CoAP response
			hdlcs_write(arsp->data, arsp->len);
    7246:	8801      	ldrh	r1, [r0, #0]
    7248:	3004      	adds	r0, #4
    724a:	f000 f95b 	bl	7504 <_Z11hdlcs_writePKvt>
			
			// Free response mbuf
			dlog(LOG_DEBUG, "coap_s_run: freeing arsp mbuf");
    724e:	2007      	movs	r0, #7
    7250:	490a      	ldr	r1, [pc, #40]	; (727c <_Z10coap_s_runv+0x4c>)
    7252:	f7fc ffe1 	bl	4218 <_Z4dlogiPKcz>
			m_free(arsp);
    7256:	0020      	movs	r0, r4
    7258:	f000 f84c 	bl	72f4 <_Z6m_freeP4mbuf>
		}
		// Free request mbuf
		dlog(LOG_DEBUG, "coap_s_run: freeing appd mbuf");
    725c:	4908      	ldr	r1, [pc, #32]	; (7280 <_Z10coap_s_runv+0x50>)
    725e:	2007      	movs	r0, #7
    7260:	f7fc ffda 	bl	4218 <_Z4dlogiPKcz>
		m_free(appd);
    7264:	0028      	movs	r0, r5
    7266:	f000 f845 	bl	72f4 <_Z6m_freeP4mbuf>
		
		int freeram = free_ram();
    726a:	f7fd f907 	bl	447c <_Z8free_ramv>
		dlog(LOG_DEBUG, "coap_s_run: free Ram: %d", freeram);
    726e:	4905      	ldr	r1, [pc, #20]	; (7284 <_Z10coap_s_runv+0x54>)
		int freeram = free_ram();
    7270:	0002      	movs	r2, r0
		dlog(LOG_DEBUG, "coap_s_run: free Ram: %d", freeram);
    7272:	2007      	movs	r0, #7
    7274:	f7fc ffd0 	bl	4218 <_Z4dlogiPKcz>
	}
} 
    7278:	bd70      	pop	{r4, r5, r6, pc}
    727a:	46c0      	nop			; (mov r8, r8)
    727c:	000105a0 	.word	0x000105a0
    7280:	000105be 	.word	0x000105be
    7284:	000105dc 	.word	0x000105dc

00007288 <_Z18set_mbuf_data_sizei>:
// Set the size of the mbuf data buffer
static int mbuf_data_buf_size = 0;
void set_mbuf_data_size( int buf_size )
{
	// Get the size of the mbuf data buffer
	mbuf_data_buf_size = buf_size;
    7288:	4b01      	ldr	r3, [pc, #4]	; (7290 <_Z18set_mbuf_data_sizei+0x8>)
    728a:	6018      	str	r0, [r3, #0]
	
} // set_mbuf_size
    728c:	4770      	bx	lr
    728e:	46c0      	nop			; (mov r8, r8)
    7290:	2000189c 	.word	0x2000189c

00007294 <_Z18get_mbuf_data_sizev>:

// Get the size of the mbuf data buffer
int get_mbuf_data_size()
{
	// Return the size of the mbuf data buffer
	return mbuf_data_buf_size;
    7294:	4b01      	ldr	r3, [pc, #4]	; (729c <_Z18get_mbuf_data_sizev+0x8>)
    7296:	6818      	ldr	r0, [r3, #0]
	
} // get_mbuf_size
    7298:	4770      	bx	lr
    729a:	46c0      	nop			; (mov r8, r8)
    729c:	2000189c 	.word	0x2000189c

000072a0 <_Z5m_getv>:


struct mbuf * m_get()
{
    72a0:	b570      	push	{r4, r5, r6, lr}
    struct mbuf *m;
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    72a2:	4d0e      	ldr	r5, [pc, #56]	; (72dc <_Z5m_getv+0x3c>)
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    72a4:	2007      	movs	r0, #7
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    72a6:	682b      	ldr	r3, [r5, #0]
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    72a8:	490d      	ldr	r1, [pc, #52]	; (72e0 <_Z5m_getv+0x40>)
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    72aa:	1d1c      	adds	r4, r3, #4
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    72ac:	0022      	movs	r2, r4
    72ae:	f7fc ffb3 	bl	4218 <_Z4dlogiPKcz>
    m = (struct mbuf *) malloc(mbuf_size);
    72b2:	0020      	movs	r0, r4
    72b4:	f004 fa64 	bl	b780 <malloc>
    assert(m);
    72b8:	2800      	cmp	r0, #0
    72ba:	d105      	bne.n	72c8 <_Z5m_getv+0x28>
    72bc:	4b09      	ldr	r3, [pc, #36]	; (72e4 <_Z5m_getv+0x44>)
    72be:	4a0a      	ldr	r2, [pc, #40]	; (72e8 <_Z5m_getv+0x48>)
    72c0:	214a      	movs	r1, #74	; 0x4a
    72c2:	480a      	ldr	r0, [pc, #40]	; (72ec <_Z5m_getv+0x4c>)
    72c4:	f004 f914 	bl	b4f0 <__assert_func>
    m->len = 0;
    72c8:	2300      	movs	r3, #0
    m->size = mbuf_data_buf_size;
    malloc_cnt++;
    72ca:	4a09      	ldr	r2, [pc, #36]	; (72f0 <_Z5m_getv+0x50>)
    m->len = 0;
    72cc:	8003      	strh	r3, [r0, #0]
    m->size = mbuf_data_buf_size;
    72ce:	682b      	ldr	r3, [r5, #0]
    72d0:	8043      	strh	r3, [r0, #2]
    malloc_cnt++;
    72d2:	6813      	ldr	r3, [r2, #0]
    72d4:	3301      	adds	r3, #1
    72d6:	6013      	str	r3, [r2, #0]
    return m;
}
    72d8:	bd70      	pop	{r4, r5, r6, pc}
    72da:	46c0      	nop			; (mov r8, r8)
    72dc:	2000189c 	.word	0x2000189c
    72e0:	00010728 	.word	0x00010728
    72e4:	0000fc58 	.word	0x0000fc58
    72e8:	0001076f 	.word	0x0001076f
    72ec:	00010744 	.word	0x00010744
    72f0:	200018a4 	.word	0x200018a4

000072f4 <_Z6m_freeP4mbuf>:

void
m_free(struct mbuf *m)
{
    72f4:	b510      	push	{r4, lr}
    free(m);
    72f6:	f004 fa4d 	bl	b794 <free>
    free_cnt++;
    72fa:	4a02      	ldr	r2, [pc, #8]	; (7304 <_Z6m_freeP4mbuf+0x10>)
    72fc:	6813      	ldr	r3, [r2, #0]
    72fe:	3301      	adds	r3, #1
    7300:	6013      	str	r3, [r2, #0]
}
    7302:	bd10      	pop	{r4, pc}
    7304:	200018a0 	.word	0x200018a0

00007308 <_Z5m_dupP4mbuf>:


struct mbuf *
m_dup(struct mbuf *m)
{
    7308:	b570      	push	{r4, r5, r6, lr}
    730a:	0005      	movs	r5, r0

    struct mbuf *n = m_get();
    730c:	f7ff ffc8 	bl	72a0 <_Z5m_getv>
    7310:	1e04      	subs	r4, r0, #0

    if (n) {
    7312:	d007      	beq.n	7324 <_Z5m_dupP4mbuf+0x1c>
        memcpy(n, m, sizeof(*m) + mbuf_data_buf_size);
    7314:	4b04      	ldr	r3, [pc, #16]	; (7328 <_Z5m_dupP4mbuf+0x20>)
    7316:	0029      	movs	r1, r5
    7318:	681a      	ldr	r2, [r3, #0]
    731a:	3204      	adds	r2, #4
    731c:	f004 fa65 	bl	b7ea <memcpy>
        n->len = m->len;
    7320:	882b      	ldrh	r3, [r5, #0]
    7322:	8023      	strh	r3, [r4, #0]
    }

    return n;

}
    7324:	0020      	movs	r0, r4
    7326:	bd70      	pop	{r4, r5, r6, pc}
    7328:	2000189c 	.word	0x2000189c

0000732c <_Z9m_prependP4mbufi>:

struct mbuf *
m_prepend(struct mbuf *m, int len)
{

    if (m->len + len > mbuf_data_buf_size) {
    732c:	4b09      	ldr	r3, [pc, #36]	; (7354 <_Z9m_prependP4mbufi+0x28>)
    732e:	8802      	ldrh	r2, [r0, #0]
    7330:	681b      	ldr	r3, [r3, #0]
{
    7332:	b570      	push	{r4, r5, r6, lr}
    7334:	000d      	movs	r5, r1
    if (m->len + len > mbuf_data_buf_size) {
    7336:	1851      	adds	r1, r2, r1
{
    7338:	0004      	movs	r4, r0
    if (m->len + len > mbuf_data_buf_size) {
    733a:	4299      	cmp	r1, r3
    733c:	dc08      	bgt.n	7350 <_Z9m_prependP4mbufi+0x24>
        return NULL;
    }

    /* make space at the top of the buffer */
    memmove(m->data + len, m->data, m->len);
    733e:	1d01      	adds	r1, r0, #4
    7340:	1948      	adds	r0, r1, r5
    7342:	f004 fa5b 	bl	b7fc <memmove>
    m->len += len;
    7346:	8821      	ldrh	r1, [r4, #0]
    7348:	1949      	adds	r1, r1, r5
    734a:	8021      	strh	r1, [r4, #0]

    return m;
}
    734c:	0020      	movs	r0, r4
    734e:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    7350:	2400      	movs	r4, #0
    7352:	e7fb      	b.n	734c <_Z9m_prependP4mbufi+0x20>
    7354:	2000189c 	.word	0x2000189c

00007358 <_Z8m_appendP4mbufs>:

void *
m_append(struct mbuf *m, int16_t len)
{
    void *d;
    if (m->len + len > mbuf_data_buf_size) {
    7358:	4b06      	ldr	r3, [pc, #24]	; (7374 <_Z8m_appendP4mbufs+0x1c>)
{
    735a:	b510      	push	{r4, lr}
    if (m->len + len > mbuf_data_buf_size) {
    735c:	8804      	ldrh	r4, [r0, #0]
    735e:	681b      	ldr	r3, [r3, #0]
    7360:	1861      	adds	r1, r4, r1
{
    7362:	0002      	movs	r2, r0
        return NULL;
    7364:	2000      	movs	r0, #0
    if (m->len + len > mbuf_data_buf_size) {
    7366:	4299      	cmp	r1, r3
    7368:	dc02      	bgt.n	7370 <_Z8m_appendP4mbufs+0x18>
    }

    d = m->data + m->len;
    736a:	1d10      	adds	r0, r2, #4
    736c:	1900      	adds	r0, r0, r4
    m->len += len;
    736e:	8011      	strh	r1, [r2, #0]
    
    return d;

}
    7370:	bd10      	pop	{r4, pc}
    7372:	46c0      	nop			; (mov r8, r8)
    7374:	2000189c 	.word	0x2000189c

00007378 <_Z5m_adjP4mbufi>:



void
m_adj(struct mbuf *mp, int req_len)
{
    7378:	b510      	push	{r4, lr}
    if (mp == NULL) {
    737a:	2800      	cmp	r0, #0
    737c:	d011      	beq.n	73a2 <_Z5m_adjP4mbufi+0x2a>
        return;
    }
    if ((req_len > mp->len) || (-1*(req_len) > mp->len)) {
    737e:	8802      	ldrh	r2, [r0, #0]
    7380:	0013      	movs	r3, r2
    7382:	428a      	cmp	r2, r1
    7384:	db05      	blt.n	7392 <_Z5m_adjP4mbufi+0x1a>
    7386:	424c      	negs	r4, r1
    7388:	42a2      	cmp	r2, r4
    738a:	db02      	blt.n	7392 <_Z5m_adjP4mbufi+0x1a>
        req_len = mp->len;
    }

    if (req_len >= 0) {
    738c:	2900      	cmp	r1, #0
    738e:	db09      	blt.n	73a4 <_Z5m_adjP4mbufi+0x2c>
    7390:	000b      	movs	r3, r1
        /* Trim from head. */
        mp->len -= req_len;
    7392:	1ad2      	subs	r2, r2, r3
    7394:	b292      	uxth	r2, r2
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    7396:	1d19      	adds	r1, r3, #4
        mp->len -= req_len;
    7398:	8002      	strh	r2, [r0, #0]
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    739a:	1841      	adds	r1, r0, r1
    739c:	3004      	adds	r0, #4
    739e:	f004 fa2d 	bl	b7fc <memmove>
    } else {
        /* Trim from tail. */
        mp->len += req_len;
    }
}
    73a2:	bd10      	pop	{r4, pc}
        mp->len += req_len;
    73a4:	1852      	adds	r2, r2, r1
    73a6:	8002      	strh	r2, [r0, #0]
    73a8:	e7fb      	b.n	73a2 <_Z5m_adjP4mbufi+0x2a>
	...

000073ac <_ZL10hdlcs_snrmv>:
    struct hdlc_snrm_params hsp;

    int hdrlen;


    hss.state = HSS_NORM;
    73ac:	2302      	movs	r3, #2
{
    73ae:	b530      	push	{r4, r5, lr}
    hss.state = HSS_NORM;
    73b0:	4c19      	ldr	r4, [pc, #100]	; (7418 <_ZL10hdlcs_snrmv+0x6c>)
{
    73b2:	b093      	sub	sp, #76	; 0x4c
            
     /* reinit state */
    dlog(LOG_DEBUG, "enter normal mode");
    73b4:	4919      	ldr	r1, [pc, #100]	; (741c <_ZL10hdlcs_snrmv+0x70>)
    73b6:	2007      	movs	r0, #7
    hss.state = HSS_NORM;
    73b8:	7323      	strb	r3, [r4, #12]
    dlog(LOG_DEBUG, "enter normal mode");
    73ba:	f7fc ff2d 	bl	4218 <_Z4dlogiPKcz>
            
    /* respond with UA */
    hdlc_hdr(0, hdlc_control(HDLC_UA, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    73be:	2101      	movs	r1, #1
    73c0:	2006      	movs	r0, #6
    73c2:	f000 fa77 	bl	78b4 <_Z12hdlc_controlhh>
    73c6:	ad05      	add	r5, sp, #20
    73c8:	0001      	movs	r1, r0
    73ca:	a804      	add	r0, sp, #16
    73cc:	7ba3      	ldrb	r3, [r4, #14]
    73ce:	7b62      	ldrb	r2, [r4, #13]
    73d0:	9001      	str	r0, [sp, #4]
    73d2:	9500      	str	r5, [sp, #0]
    73d4:	2000      	movs	r0, #0
    73d6:	f000 faf5 	bl	79c4 <_Z8hdlc_hdrismmPhPi>

    /* should use negotiated values - min() of primary/secondary */    
    hsp.max_info_tx = hss.cfg.max_info_tx;  
    73da:	6863      	ldr	r3, [r4, #4]
    hsp.max_info_rx = hss.cfg.max_info_rx;
    hsp.window_tx = 1;
    hsp.window_rx = 1;

    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    73dc:	aa03      	add	r2, sp, #12
    hsp.max_info_tx = hss.cfg.max_info_tx;  
    73de:	9307      	str	r3, [sp, #28]
    hsp.max_info_rx = hss.cfg.max_info_rx;
    73e0:	68a3      	ldr	r3, [r4, #8]
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    73e2:	211a      	movs	r1, #26
    hsp.max_info_rx = hss.cfg.max_info_rx;
    73e4:	9308      	str	r3, [sp, #32]
    hsp.window_tx = 1;
    73e6:	2301      	movs	r3, #1
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    73e8:	a80b      	add	r0, sp, #44	; 0x2c
    hsp.window_tx = 1;
    73ea:	9309      	str	r3, [sp, #36]	; 0x24
    hsp.window_rx = 1;
    73ec:	930a      	str	r3, [sp, #40]	; 0x28
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    73ee:	ab07      	add	r3, sp, #28
    73f0:	f000 fba4 	bl	7b3c <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params>
    rc = hdlc_send_frame(hdr, param_info, rsplen);
    73f4:	9a03      	ldr	r2, [sp, #12]
    73f6:	a90b      	add	r1, sp, #44	; 0x2c
    73f8:	0028      	movs	r0, r5
    73fa:	f000 fbd1 	bl	7ba0 <_Z15hdlc_send_framePKhS0_i>

    dlog(LOG_DEBUG, "SNRM-UA response rc %d", rc);
    73fe:	4908      	ldr	r1, [pc, #32]	; (7420 <_ZL10hdlcs_snrmv+0x74>)
    rc = hdlc_send_frame(hdr, param_info, rsplen);
    7400:	0002      	movs	r2, r0
    dlog(LOG_DEBUG, "SNRM-UA response rc %d", rc);
    7402:	2007      	movs	r0, #7
    7404:	f7fc ff08 	bl	4218 <_Z4dlogiPKcz>

    /* Send / Receive sequence numbers are reset to 0 */
    hss.vr = 0;
    7408:	2000      	movs	r0, #0
    740a:	7420      	strb	r0, [r4, #16]
    hss.vs = 0;
    740c:	73e0      	strb	r0, [r4, #15]
    hss.vr_ack = 0;
    740e:	74a0      	strb	r0, [r4, #18]
    hss.vs_ack = 0;
    7410:	7460      	strb	r0, [r4, #17]

    return 0;
 
}
    7412:	b013      	add	sp, #76	; 0x4c
    7414:	bd30      	pop	{r4, r5, pc}
    7416:	46c0      	nop			; (mov r8, r8)
    7418:	200018ac 	.word	0x200018ac
    741c:	00010979 	.word	0x00010979
    7420:	0001098b 	.word	0x0001098b

00007424 <_Z10hdlcs_openP14HardwareSerialmm>:
{
    7424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (hss.open) 
    7426:	4c1c      	ldr	r4, [pc, #112]	; (7498 <_Z10hdlcs_openP14HardwareSerialmm+0x74>)
{
    7428:	9101      	str	r1, [sp, #4]
    if (hss.open) 
    742a:	6826      	ldr	r6, [r4, #0]
{
    742c:	0015      	movs	r5, r2
        return ERR_FAIL;
    742e:	2763      	movs	r7, #99	; 0x63
    if (hss.open) 
    7430:	2e00      	cmp	r6, #0
    7432:	d106      	bne.n	7442 <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
	if ( max_info_len > MNIC_MAX_PAYLOAD_SIZE )
    7434:	2aff      	cmp	r2, #255	; 0xff
    7436:	d906      	bls.n	7446 <_Z10hdlcs_openP14HardwareSerialmm+0x22>
		dlog( LOG_DEBUG, "The max payload size specified is too large: %d bytes. The maximum allowed is %d bytes ", max_info_len, MNIC_MAX_PAYLOAD_SIZE );
    7438:	23ff      	movs	r3, #255	; 0xff
    743a:	4918      	ldr	r1, [pc, #96]	; (749c <_Z10hdlcs_openP14HardwareSerialmm+0x78>)
    743c:	2007      	movs	r0, #7
    743e:	f7fc feeb 	bl	4218 <_Z4dlogiPKcz>
}
    7442:	0038      	movs	r0, r7
    7444:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hss.open = 1;
    7446:	2701      	movs	r7, #1
	hdlc_init( pUART, max_info_len );
    7448:	0011      	movs	r1, r2
    744a:	f000 fa0f 	bl	786c <_Z9hdlc_initP14HardwareSerialm>
	uart_timeout_ms = timeout_ms;
    744e:	4b14      	ldr	r3, [pc, #80]	; (74a0 <_Z10hdlcs_openP14HardwareSerialmm+0x7c>)
    7450:	9a01      	ldr	r2, [sp, #4]
    memset(&hss, 0, sizeof(hss));
    7452:	0031      	movs	r1, r6
	uart_timeout_ms = timeout_ms;
    7454:	601a      	str	r2, [r3, #0]
    memset(&hss, 0, sizeof(hss));
    7456:	0020      	movs	r0, r4
    7458:	2220      	movs	r2, #32
    745a:	f004 f9e1 	bl	b820 <memset>
	set_mbuf_data_size(size);
    745e:	0028      	movs	r0, r5
    hss.open = 1;
    7460:	6027      	str	r7, [r4, #0]
    hss.cfg.max_info_tx = max_info_len;
    7462:	6065      	str	r5, [r4, #4]
    hss.cfg.max_info_rx = max_info_len;
    7464:	60a5      	str	r5, [r4, #8]
    hss.state = HSS_DISC;
    7466:	7327      	strb	r7, [r4, #12]
	set_mbuf_data_size(size);
    7468:	f7ff ff0e 	bl	7288 <_Z18set_mbuf_data_sizei>
    hss.recv = m_get();
    746c:	f7ff ff18 	bl	72a0 <_Z5m_getv>
    7470:	61a0      	str	r0, [r4, #24]
    assert(hss.recv);
    7472:	2800      	cmp	r0, #0
    7474:	d105      	bne.n	7482 <_Z10hdlcs_openP14HardwareSerialmm+0x5e>
    7476:	4b0b      	ldr	r3, [pc, #44]	; (74a4 <_Z10hdlcs_openP14HardwareSerialmm+0x80>)
    7478:	4a0b      	ldr	r2, [pc, #44]	; (74a8 <_Z10hdlcs_openP14HardwareSerialmm+0x84>)
    747a:	2164      	movs	r1, #100	; 0x64
    747c:	480b      	ldr	r0, [pc, #44]	; (74ac <_Z10hdlcs_openP14HardwareSerialmm+0x88>)
    747e:	f004 f837 	bl	b4f0 <__assert_func>
    hss.esrc = hdlc_addr_encode(1);
    7482:	0038      	movs	r0, r7
    7484:	f000 fa88 	bl	7998 <_Z16hdlc_addr_encodem>
    7488:	7360      	strb	r0, [r4, #13]
    hss.edst = hdlc_addr_encode(1);
    748a:	0038      	movs	r0, r7
    748c:	f000 fa84 	bl	7998 <_Z16hdlc_addr_encodem>
    return ERR_OK;
    7490:	0037      	movs	r7, r6
    hss.edst = hdlc_addr_encode(1);
    7492:	73a0      	strb	r0, [r4, #14]
    return ERR_OK;
    7494:	e7d5      	b.n	7442 <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
    7496:	46c0      	nop			; (mov r8, r8)
    7498:	200018ac 	.word	0x200018ac
    749c:	0001077d 	.word	0x0001077d
    74a0:	200018a8 	.word	0x200018a8
    74a4:	000107d5 	.word	0x000107d5
    74a8:	000109bf 	.word	0x000109bf
    74ac:	000107de 	.word	0x000107de

000074b0 <_Z10hdlcs_readv>:
{
    74b0:	b570      	push	{r4, r5, r6, lr}
    if (hss.r_complete) {
    74b2:	4d0f      	ldr	r5, [pc, #60]	; (74f0 <_Z10hdlcs_readv+0x40>)
    74b4:	69ec      	ldr	r4, [r5, #28]
    74b6:	2c00      	cmp	r4, #0
    74b8:	d018      	beq.n	74ec <_Z10hdlcs_readv+0x3c>
        r = m_dup(hss.recv);
    74ba:	69a8      	ldr	r0, [r5, #24]
    74bc:	f7ff ff24 	bl	7308 <_Z5m_dupP4mbuf>
    74c0:	1e04      	subs	r4, r0, #0
        assert(r);
    74c2:	d106      	bne.n	74d2 <_Z10hdlcs_readv+0x22>
    74c4:	2197      	movs	r1, #151	; 0x97
    74c6:	4b0b      	ldr	r3, [pc, #44]	; (74f4 <_Z10hdlcs_readv+0x44>)
    74c8:	4a0b      	ldr	r2, [pc, #44]	; (74f8 <_Z10hdlcs_readv+0x48>)
    74ca:	0049      	lsls	r1, r1, #1
    74cc:	480b      	ldr	r0, [pc, #44]	; (74fc <_Z10hdlcs_readv+0x4c>)
    74ce:	f004 f80f 	bl	b4f0 <__assert_func>
        hss.recv->len = 0;
    74d2:	2100      	movs	r1, #0
    74d4:	69a8      	ldr	r0, [r5, #24]
    74d6:	8001      	strh	r1, [r0, #0]
        hss.r_complete = 0;
    74d8:	61e9      	str	r1, [r5, #28]
        memset(hss.recv->data, 0, hss.recv->size);
    74da:	8842      	ldrh	r2, [r0, #2]
    74dc:	3004      	adds	r0, #4
    74de:	f004 f99f 	bl	b820 <memset>
		dlog( LOG_DEBUG, "hdlcs_read() - %x", r );
    74e2:	0022      	movs	r2, r4
    74e4:	4906      	ldr	r1, [pc, #24]	; (7500 <_Z10hdlcs_readv+0x50>)
    74e6:	2007      	movs	r0, #7
    74e8:	f7fc fe96 	bl	4218 <_Z4dlogiPKcz>
} // hdlcs_read()
    74ec:	0020      	movs	r0, r4
    74ee:	bd70      	pop	{r4, r5, r6, pc}
    74f0:	200018ac 	.word	0x200018ac
    74f4:	00010078 	.word	0x00010078
    74f8:	000109a2 	.word	0x000109a2
    74fc:	000107de 	.word	0x000107de
    7500:	0001080a 	.word	0x0001080a

00007504 <_Z11hdlcs_writePKvt>:
{
    7504:	b570      	push	{r4, r5, r6, lr}
    (void)hdlc_hdr(0, hdlc_control_i(hss.vr, hss.vs, 1),
    7506:	4c0d      	ldr	r4, [pc, #52]	; (753c <_Z11hdlcs_writePKvt+0x38>)
{
    7508:	b086      	sub	sp, #24
    750a:	0005      	movs	r5, r0
    750c:	000e      	movs	r6, r1
    (void)hdlc_hdr(0, hdlc_control_i(hss.vr, hss.vs, 1),
    750e:	7c20      	ldrb	r0, [r4, #16]
    7510:	7be1      	ldrb	r1, [r4, #15]
    7512:	2201      	movs	r2, #1
    7514:	f000 f9ba 	bl	788c <_Z14hdlc_control_ihhh>
    7518:	7ba3      	ldrb	r3, [r4, #14]
    751a:	7b62      	ldrb	r2, [r4, #13]
                          hss.esrc, hss.edst, hdr, &hdrlen);
    751c:	b201      	sxth	r1, r0
    751e:	ac04      	add	r4, sp, #16
    7520:	a803      	add	r0, sp, #12
    7522:	9001      	str	r0, [sp, #4]
    7524:	9400      	str	r4, [sp, #0]
    7526:	2000      	movs	r0, #0
    7528:	f000 fa4c 	bl	79c4 <_Z8hdlc_hdrismmPhPi>
    rc = hdlc_send_frame(hdr, (const uint8_t *)data, len);
    752c:	0032      	movs	r2, r6
    752e:	0029      	movs	r1, r5
    7530:	0020      	movs	r0, r4
    7532:	f000 fb35 	bl	7ba0 <_Z15hdlc_send_framePKhS0_i>
}
    7536:	b006      	add	sp, #24
    7538:	bd70      	pop	{r4, r5, r6, pc}
    753a:	46c0      	nop			; (mov r8, r8)
    753c:	200018ac 	.word	0x200018ac

00007540 <_Z8hdlcs_rrv>:



int 
hdlcs_rr(void)
{
    7540:	b530      	push	{r4, r5, lr}
    uint8_t hdr[HDLC_HDR_SIZE];
    int hdrlen;

    if (!pending_rsp) {
    7542:	4d15      	ldr	r5, [pc, #84]	; (7598 <_Z8hdlcs_rrv+0x58>)
{
    7544:	b087      	sub	sp, #28
    if (!pending_rsp) {
    7546:	682c      	ldr	r4, [r5, #0]
    7548:	2c00      	cmp	r4, #0
    754a:	d11a      	bne.n	7582 <_Z8hdlcs_rrv+0x42>
        dlog(LOG_DEBUG, "respond to RR with RR");
    754c:	4913      	ldr	r1, [pc, #76]	; (759c <_Z8hdlcs_rrv+0x5c>)
    754e:	2007      	movs	r0, #7
    7550:	f7fc fe62 	bl	4218 <_Z4dlogiPKcz>
        hdlc_hdr(0, hdlc_control_rr(hss.vr, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    7554:	4d12      	ldr	r5, [pc, #72]	; (75a0 <_Z8hdlcs_rrv+0x60>)
    7556:	2101      	movs	r1, #1
    7558:	7c28      	ldrb	r0, [r5, #16]
    755a:	f000 f9a2 	bl	78a2 <_Z15hdlc_control_rrhh>
    755e:	7b6a      	ldrb	r2, [r5, #13]
    7560:	7bab      	ldrb	r3, [r5, #14]
    7562:	b201      	sxth	r1, r0
    7564:	ad04      	add	r5, sp, #16
    7566:	a803      	add	r0, sp, #12
    7568:	9001      	str	r0, [sp, #4]
    756a:	9500      	str	r5, [sp, #0]
    756c:	0020      	movs	r0, r4
    756e:	f000 fa29 	bl	79c4 <_Z8hdlc_hdrismmPhPi>
        hdlc_send_frame(hdr, NULL, 0);
    7572:	0022      	movs	r2, r4
    7574:	0021      	movs	r1, r4
    7576:	0028      	movs	r0, r5
    7578:	f000 fb12 	bl	7ba0 <_Z15hdlc_send_framePKhS0_i>
        /* CoAP will also send app confirm */
        /* if not (and there is no data), proxy should send RR to confirm */
    }

    return 0;
}
    757c:	2000      	movs	r0, #0
    757e:	b007      	add	sp, #28
    7580:	bd30      	pop	{r4, r5, pc}
        dlog(LOG_DEBUG, "Resending frame");
    7582:	4908      	ldr	r1, [pc, #32]	; (75a4 <_Z8hdlcs_rrv+0x64>)
    7584:	2007      	movs	r0, #7
    7586:	f7fc fe47 	bl	4218 <_Z4dlogiPKcz>
        hdlcs_write(pending_rsp->m_data, pending_rsp->m_pktlen);
    758a:	6828      	ldr	r0, [r5, #0]
    758c:	8801      	ldrh	r1, [r0, #0]
    758e:	3004      	adds	r0, #4
    7590:	f7ff ffb8 	bl	7504 <_Z11hdlcs_writePKvt>
    7594:	e7f2      	b.n	757c <_Z8hdlcs_rrv+0x3c>
    7596:	46c0      	nop			; (mov r8, r8)
    7598:	20001840 	.word	0x20001840
    759c:	0001081c 	.word	0x0001081c
    75a0:	200018ac 	.word	0x200018ac
    75a4:	00010832 	.word	0x00010832

000075a8 <_Z9hdlcs_runv>:
{
    75a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    rc = hdlc_rx( hdr, hss.recv->data, hss.recv->size, uart_timeout_ms );  
    75aa:	4c72      	ldr	r4, [pc, #456]	; (7774 <_Z9hdlcs_runv+0x1cc>)
    75ac:	4b72      	ldr	r3, [pc, #456]	; (7778 <_Z9hdlcs_runv+0x1d0>)
    75ae:	69a1      	ldr	r1, [r4, #24]
{
    75b0:	b093      	sub	sp, #76	; 0x4c
    rc = hdlc_rx( hdr, hss.recv->data, hss.recv->size, uart_timeout_ms );  
    75b2:	884a      	ldrh	r2, [r1, #2]
    75b4:	681b      	ldr	r3, [r3, #0]
    75b6:	3104      	adds	r1, #4
    75b8:	a807      	add	r0, sp, #28
    75ba:	f000 fb5b 	bl	7c74 <_Z7hdlc_rxPhS_ii>
	if ( rc <= 0 )
    75be:	2800      	cmp	r0, #0
    75c0:	dc04      	bgt.n	75cc <_Z9hdlcs_runv+0x24>
        return 0;
    75c2:	2300      	movs	r3, #0
        return 1;
    75c4:	9303      	str	r3, [sp, #12]
} // hdlcs_run()
    75c6:	9803      	ldr	r0, [sp, #12]
    75c8:	b013      	add	sp, #76	; 0x4c
    75ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rc = hdlc_parse_hdr( &hh, hdr, HDLC_HDR_SIZE );
    75cc:	ae0b      	add	r6, sp, #44	; 0x2c
    75ce:	2207      	movs	r2, #7
    75d0:	a907      	add	r1, sp, #28
    75d2:	0030      	movs	r0, r6
    75d4:	f000 fa68 	bl	7aa8 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi>
	if (rc) 
    75d8:	2800      	cmp	r0, #0
    75da:	d1f2      	bne.n	75c2 <_Z9hdlcs_runv+0x1a>
	rc = hdlc_parse_control( hh.control, &hc );
    75dc:	ad05      	add	r5, sp, #20
    75de:	7c30      	ldrb	r0, [r6, #16]
    75e0:	0029      	movs	r1, r5
    75e2:	f000 f985 	bl	78f0 <_Z18hdlc_parse_controlhP9hdlc_ctrl>
    75e6:	9003      	str	r0, [sp, #12]
    if (rc) 
    75e8:	2800      	cmp	r0, #0
    75ea:	d1ea      	bne.n	75c2 <_Z9hdlcs_runv+0x1a>
    hss.recv->len = hh.infolen;
    75ec:	8932      	ldrh	r2, [r6, #8]
    75ee:	69a3      	ldr	r3, [r4, #24]
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    75f0:	4962      	ldr	r1, [pc, #392]	; (777c <_Z9hdlcs_runv+0x1d4>)
    hss.recv->len = hh.infolen;
    75f2:	801a      	strh	r2, [r3, #0]
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    75f4:	7c32      	ldrb	r2, [r6, #16]
    if (hc.nr == INCM8(hss.vs)) 
    75f6:	2607      	movs	r6, #7
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    75f8:	7b23      	ldrb	r3, [r4, #12]
    75fa:	2007      	movs	r0, #7
    75fc:	f7fc fe0c 	bl	4218 <_Z4dlogiPKcz>
    if (hc.nr == INCM8(hss.vs)) 
    7600:	7be3      	ldrb	r3, [r4, #15]
    7602:	78aa      	ldrb	r2, [r5, #2]
    7604:	3301      	adds	r3, #1
    7606:	4033      	ands	r3, r6
    7608:	429a      	cmp	r2, r3
    760a:	d107      	bne.n	761c <_Z9hdlcs_runv+0x74>
        dlog(LOG_DEBUG, "response rxed at primary");
    760c:	0030      	movs	r0, r6
    760e:	495c      	ldr	r1, [pc, #368]	; (7780 <_Z9hdlcs_runv+0x1d8>)
    7610:	f7fc fe02 	bl	4218 <_Z4dlogiPKcz>
        hss.vs = INCM8(hss.vs);
    7614:	7be0      	ldrb	r0, [r4, #15]
    7616:	3001      	adds	r0, #1
    7618:	4030      	ands	r0, r6
    761a:	73e0      	strb	r0, [r4, #15]
    switch (hss.state) 
    761c:	7b26      	ldrb	r6, [r4, #12]
    761e:	2e01      	cmp	r6, #1
    7620:	d008      	beq.n	7634 <_Z9hdlcs_runv+0x8c>
    7622:	2e02      	cmp	r6, #2
    7624:	d029      	beq.n	767a <_Z9hdlcs_runv+0xd2>
		dlog( LOG_DEBUG, "Error - unknown state: %d", hss.state );
    7626:	0032      	movs	r2, r6
    7628:	4956      	ldr	r1, [pc, #344]	; (7784 <_Z9hdlcs_runv+0x1dc>)
    762a:	2007      	movs	r0, #7
    762c:	f7fc fdf4 	bl	4218 <_Z4dlogiPKcz>
        return 1;
    7630:	2301      	movs	r3, #1
    7632:	e7c7      	b.n	75c4 <_Z9hdlcs_runv+0x1c>
        if (hc.type == HDLC_SNRM) {
    7634:	782b      	ldrb	r3, [r5, #0]
    7636:	2b04      	cmp	r3, #4
    7638:	d107      	bne.n	764a <_Z9hdlcs_runv+0xa2>
            rc = hdlcs_snrm();
    763a:	f7ff feb7 	bl	73ac <_ZL10hdlcs_snrmv>
    dlog( LOG_DEBUG, "hdlcs_run() - %d", rc );
    763e:	0002      	movs	r2, r0
    7640:	4951      	ldr	r1, [pc, #324]	; (7788 <_Z9hdlcs_runv+0x1e0>)
    7642:	2007      	movs	r0, #7
    7644:	f7fc fde8 	bl	4218 <_Z4dlogiPKcz>
    return 0;
    7648:	e7bd      	b.n	75c6 <_Z9hdlcs_runv+0x1e>
{    
    uint8_t hdr[HDLC_HDR_SIZE];
    int hdrlen;

    /* Disconnected Mode response */
    dlog(LOG_WARNING, "request recv'd in disconnected mode");
    764a:	4950      	ldr	r1, [pc, #320]	; (778c <_Z9hdlcs_runv+0x1e4>)
    764c:	2004      	movs	r0, #4
    764e:	f7fc fde3 	bl	4218 <_Z4dlogiPKcz>
    
    hdlc_hdr(0, hdlc_control(HDLC_DM, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    7652:	0031      	movs	r1, r6
    7654:	2007      	movs	r0, #7
    7656:	f000 f92d 	bl	78b4 <_Z12hdlc_controlhh>
    765a:	7b62      	ldrb	r2, [r4, #13]
    765c:	7ba3      	ldrb	r3, [r4, #14]
    765e:	0001      	movs	r1, r0
    7660:	ac09      	add	r4, sp, #36	; 0x24
    7662:	a806      	add	r0, sp, #24
    7664:	9001      	str	r0, [sp, #4]
    7666:	9400      	str	r4, [sp, #0]
    7668:	2000      	movs	r0, #0
    766a:	f000 f9ab 	bl	79c4 <_Z8hdlc_hdrismmPhPi>
    hdlc_send_frame(hdr, NULL, 0);
    766e:	2200      	movs	r2, #0
    7670:	0020      	movs	r0, r4
    7672:	0011      	movs	r1, r2
    
    /* Frame Reject response */
    dlog(LOG_WARNING, "error - frame rejected");

    hdlc_hdr(0, hdlc_control(HDLC_FRMR, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    hdlc_send_frame(hdr, NULL, 0);
    7674:	f000 fa94 	bl	7ba0 <_Z15hdlc_send_framePKhS0_i>
    7678:	e023      	b.n	76c2 <_Z9hdlcs_runv+0x11a>
        if (hc.type == HDLC_SNRM) {
    767a:	782b      	ldrb	r3, [r5, #0]
    767c:	2b04      	cmp	r3, #4
    767e:	d104      	bne.n	768a <_Z9hdlcs_runv+0xe2>
            dlog( LOG_DEBUG, "HDLC_SNRM" );
    7680:	4943      	ldr	r1, [pc, #268]	; (7790 <_Z9hdlcs_runv+0x1e8>)
    7682:	2007      	movs	r0, #7
    7684:	f7fc fdc8 	bl	4218 <_Z4dlogiPKcz>
    7688:	e7d7      	b.n	763a <_Z9hdlcs_runv+0x92>
        else if (hc.type == HDLC_I) {
    768a:	2b01      	cmp	r3, #1
    768c:	d124      	bne.n	76d8 <_Z9hdlcs_runv+0x130>
            dlog( LOG_DEBUG, "HDLC_I" );
    768e:	4941      	ldr	r1, [pc, #260]	; (7794 <_Z9hdlcs_runv+0x1ec>)
    7690:	2007      	movs	r0, #7
    7692:	f7fc fdc1 	bl	4218 <_Z4dlogiPKcz>
            if (hc.ns != hss.vr) {
    7696:	78ea      	ldrb	r2, [r5, #3]
    7698:	7c23      	ldrb	r3, [r4, #16]
    769a:	429a      	cmp	r2, r3
    769c:	d013      	beq.n	76c6 <_Z9hdlcs_runv+0x11e>
                            hc.ns, hss.vr);
    769e:	493e      	ldr	r1, [pc, #248]	; (7798 <_Z9hdlcs_runv+0x1f0>)
    76a0:	2003      	movs	r0, #3
    76a2:	f7fc fdb9 	bl	4218 <_Z4dlogiPKcz>
            rc = hdlcs_i(hss.recv);
    76a6:	69a5      	ldr	r5, [r4, #24]
    ddump(LOG_DEBUG, "Recv I frame", d->data, d->len);
    76a8:	2007      	movs	r0, #7
    76aa:	882b      	ldrh	r3, [r5, #0]
    76ac:	1d2a      	adds	r2, r5, #4
    76ae:	493b      	ldr	r1, [pc, #236]	; (779c <_Z9hdlcs_runv+0x1f4>)
    76b0:	f7fc fdd4 	bl	425c <_Z5ddumpiPKcPKvi>
    if (hss.icb) {
    76b4:	6960      	ldr	r0, [r4, #20]
    76b6:	2800      	cmp	r0, #0
    76b8:	d00a      	beq.n	76d0 <_Z9hdlcs_runv+0x128>
        dlog(LOG_ERR, "data CB not supported");
    76ba:	4939      	ldr	r1, [pc, #228]	; (77a0 <_Z9hdlcs_runv+0x1f8>)
    76bc:	2003      	movs	r0, #3
    76be:	f7fc fdab 	bl	4218 <_Z4dlogiPKcz>
            rc = hdlcs_frmr();
    76c2:	2000      	movs	r0, #0
    76c4:	e7bb      	b.n	763e <_Z9hdlcs_runv+0x96>
                hss.vr = INCM8(hss.vr);
    76c6:	2307      	movs	r3, #7
    76c8:	3201      	adds	r2, #1
    76ca:	401a      	ands	r2, r3
    76cc:	7422      	strb	r2, [r4, #16]
    76ce:	e7ea      	b.n	76a6 <_Z9hdlcs_runv+0xfe>
        hss.r_complete = 1;
    76d0:	2301      	movs	r3, #1
        hss.recv = d;
    76d2:	61a5      	str	r5, [r4, #24]
        hss.r_complete = 1;
    76d4:	61e3      	str	r3, [r4, #28]
    76d6:	e7b2      	b.n	763e <_Z9hdlcs_runv+0x96>
        else if (hc.type == HDLC_RR) {
    76d8:	2b02      	cmp	r3, #2
    76da:	d10c      	bne.n	76f6 <_Z9hdlcs_runv+0x14e>
            dlog( LOG_DEBUG, "HDLC_RR" );
    76dc:	4931      	ldr	r1, [pc, #196]	; (77a4 <_Z9hdlcs_runv+0x1fc>)
    76de:	2007      	movs	r0, #7
    76e0:	f7fc fd9a 	bl	4218 <_Z4dlogiPKcz>
            dlog(LOG_DEBUG, "hc.nr: %d, hss.vs: %d", hc.nr, hss.vs);
    76e4:	7be3      	ldrb	r3, [r4, #15]
    76e6:	78aa      	ldrb	r2, [r5, #2]
    76e8:	492f      	ldr	r1, [pc, #188]	; (77a8 <_Z9hdlcs_runv+0x200>)
    76ea:	2007      	movs	r0, #7
    76ec:	f7fc fd94 	bl	4218 <_Z4dlogiPKcz>
            rc = hdlcs_rr();
    76f0:	f7ff ff26 	bl	7540 <_Z8hdlcs_rrv>
    76f4:	e7a3      	b.n	763e <_Z9hdlcs_runv+0x96>
    76f6:	ad09      	add	r5, sp, #36	; 0x24
        else if (hc.type == HDLC_DISC) {
    76f8:	2b05      	cmp	r3, #5
    76fa:	d127      	bne.n	774c <_Z9hdlcs_runv+0x1a4>
            pending_rsp = NULL;
    76fc:	2600      	movs	r6, #0
            dlog( LOG_DEBUG, "HDLC_DISC" );
    76fe:	492b      	ldr	r1, [pc, #172]	; (77ac <_Z9hdlcs_runv+0x204>)
    7700:	2007      	movs	r0, #7
    7702:	f7fc fd89 	bl	4218 <_Z4dlogiPKcz>
            m_free(pending_rsp);
    7706:	4f2a      	ldr	r7, [pc, #168]	; (77b0 <_Z9hdlcs_runv+0x208>)
    7708:	6838      	ldr	r0, [r7, #0]
    770a:	f7ff fdf3 	bl	72f4 <_Z6m_freeP4mbuf>
            dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    770e:	2302      	movs	r3, #2
            pending_rsp = NULL;
    7710:	603e      	str	r6, [r7, #0]
    hss.state = HSS_DISC;
    7712:	2701      	movs	r7, #1
            dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    7714:	33ff      	adds	r3, #255	; 0xff
    7716:	4a27      	ldr	r2, [pc, #156]	; (77b4 <_Z9hdlcs_runv+0x20c>)
    7718:	4927      	ldr	r1, [pc, #156]	; (77b8 <_Z9hdlcs_runv+0x210>)
    771a:	2007      	movs	r0, #7
    771c:	f7fc fd7c 	bl	4218 <_Z4dlogiPKcz>
    dlog(LOG_DEBUG, "disconnecting");
    7720:	4926      	ldr	r1, [pc, #152]	; (77bc <_Z9hdlcs_runv+0x214>)
    7722:	2007      	movs	r0, #7
    hss.state = HSS_DISC;
    7724:	7327      	strb	r7, [r4, #12]
    dlog(LOG_DEBUG, "disconnecting");
    7726:	f7fc fd77 	bl	4218 <_Z4dlogiPKcz>
    hdlc_hdr(0, hdlc_control(HDLC_UA, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    772a:	0039      	movs	r1, r7
    772c:	2006      	movs	r0, #6
    772e:	f000 f8c1 	bl	78b4 <_Z12hdlc_controlhh>
    7732:	0001      	movs	r1, r0
    7734:	a806      	add	r0, sp, #24
    7736:	7b62      	ldrb	r2, [r4, #13]
    7738:	7ba3      	ldrb	r3, [r4, #14]
    773a:	9001      	str	r0, [sp, #4]
    773c:	9500      	str	r5, [sp, #0]
    773e:	0030      	movs	r0, r6
    7740:	f000 f940 	bl	79c4 <_Z8hdlc_hdrismmPhPi>
    rc = hdlc_send_frame(hdr, NULL, 0);
    7744:	0032      	movs	r2, r6
    7746:	0031      	movs	r1, r6
    hdlc_send_frame(hdr, NULL, 0);
    7748:	0028      	movs	r0, r5
    774a:	e793      	b.n	7674 <_Z9hdlcs_runv+0xcc>
    dlog(LOG_WARNING, "error - frame rejected");
    774c:	491c      	ldr	r1, [pc, #112]	; (77c0 <_Z9hdlcs_runv+0x218>)
    774e:	2004      	movs	r0, #4
    7750:	f7fc fd62 	bl	4218 <_Z4dlogiPKcz>
    hdlc_hdr(0, hdlc_control(HDLC_FRMR, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    7754:	2101      	movs	r1, #1
    7756:	2008      	movs	r0, #8
    7758:	f000 f8ac 	bl	78b4 <_Z12hdlc_controlhh>
    775c:	0001      	movs	r1, r0
    775e:	a806      	add	r0, sp, #24
    7760:	7b62      	ldrb	r2, [r4, #13]
    7762:	7ba3      	ldrb	r3, [r4, #14]
    7764:	9001      	str	r0, [sp, #4]
    7766:	9500      	str	r5, [sp, #0]
    7768:	2000      	movs	r0, #0
    776a:	f000 f92b 	bl	79c4 <_Z8hdlc_hdrismmPhPi>
    hdlc_send_frame(hdr, NULL, 0);
    776e:	2200      	movs	r2, #0
    7770:	0011      	movs	r1, r2
    7772:	e7e9      	b.n	7748 <_Z9hdlcs_runv+0x1a0>
    7774:	200018ac 	.word	0x200018ac
    7778:	200018a8 	.word	0x200018a8
    777c:	00010842 	.word	0x00010842
    7780:	00010869 	.word	0x00010869
    7784:	0001094e 	.word	0x0001094e
    7788:	00010968 	.word	0x00010968
    778c:	00010882 	.word	0x00010882
    7790:	000108a6 	.word	0x000108a6
    7794:	000108b0 	.word	0x000108b0
    7798:	000108b7 	.word	0x000108b7
    779c:	000108de 	.word	0x000108de
    77a0:	000108eb 	.word	0x000108eb
    77a4:	00010901 	.word	0x00010901
    77a8:	00010909 	.word	0x00010909
    77ac:	0001091f 	.word	0x0001091f
    77b0:	20001840 	.word	0x20001840
    77b4:	000109b5 	.word	0x000109b5
    77b8:	000103db 	.word	0x000103db
    77bc:	00010929 	.word	0x00010929
    77c0:	00010937 	.word	0x00010937

000077c4 <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    77c4:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    77c6:	2240      	movs	r2, #64	; 0x40
    77c8:	2100      	movs	r1, #0
RingBuffer::RingBuffer( void )
    77ca:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    77cc:	f004 f828 	bl	b820 <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    77d0:	2300      	movs	r3, #0
}
    77d2:	0020      	movs	r0, r4
	_iHead = 0;
    77d4:	6423      	str	r3, [r4, #64]	; 0x40
	_iTail = 0;
    77d6:	6463      	str	r3, [r4, #68]	; 0x44
}
    77d8:	bd10      	pop	{r4, pc}

000077da <_ZN10RingBuffer10store_charEh>:
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    77da:	223f      	movs	r2, #63	; 0x3f
  int i = nextIndex(_iHead);
    77dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    77de:	3301      	adds	r3, #1
    77e0:	4013      	ands	r3, r2
  if ( i != _iTail )
    77e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    77e4:	429a      	cmp	r2, r3
    77e6:	d002      	beq.n	77ee <_ZN10RingBuffer10store_charEh+0x14>
    _aucBuffer[_iHead] = c ;
    77e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    77ea:	5481      	strb	r1, [r0, r2]
    _iHead = i ;
    77ec:	6403      	str	r3, [r0, #64]	; 0x40
}
    77ee:	4770      	bx	lr

000077f0 <_ZN10RingBuffer5clearEv>:
	_iHead = 0;
    77f0:	2300      	movs	r3, #0
    77f2:	6403      	str	r3, [r0, #64]	; 0x40
	_iTail = 0;
    77f4:	6443      	str	r3, [r0, #68]	; 0x44
}
    77f6:	4770      	bx	lr

000077f8 <_ZN10RingBuffer9read_charEv>:
	if(_iTail == _iHead)
    77f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    77fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
    77fc:	429a      	cmp	r2, r3
    77fe:	d008      	beq.n	7812 <_ZN10RingBuffer9read_charEv+0x1a>
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    7800:	213f      	movs	r1, #63	; 0x3f
	uint8_t value = _aucBuffer[_iTail];
    7802:	6c43      	ldr	r3, [r0, #68]	; 0x44
    7804:	5cc2      	ldrb	r2, [r0, r3]
	_iTail = nextIndex(_iTail);
    7806:	6c43      	ldr	r3, [r0, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    7808:	3301      	adds	r3, #1
    780a:	400b      	ands	r3, r1
	_iTail = nextIndex(_iTail);
    780c:	6443      	str	r3, [r0, #68]	; 0x44
	return value;
    780e:	0010      	movs	r0, r2
}
    7810:	4770      	bx	lr
		return -1;
    7812:	2001      	movs	r0, #1
    7814:	4240      	negs	r0, r0
    7816:	e7fb      	b.n	7810 <_ZN10RingBuffer9read_charEv+0x18>

00007818 <_ZN10RingBuffer9availableEv>:
	int delta = _iHead - _iTail;
    7818:	6c03      	ldr	r3, [r0, #64]	; 0x40
    781a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    781c:	1a18      	subs	r0, r3, r0
	if(delta < 0)
    781e:	d500      	bpl.n	7822 <_ZN10RingBuffer9availableEv+0xa>
		return SERIAL_BUFFER_SIZE + delta;
    7820:	3040      	adds	r0, #64	; 0x40
}
    7822:	4770      	bx	lr

00007824 <_ZN10RingBuffer17availableForStoreEv>:
	if (_iHead >= _iTail)
    7824:	6c02      	ldr	r2, [r0, #64]	; 0x40
    7826:	6c43      	ldr	r3, [r0, #68]	; 0x44
    7828:	429a      	cmp	r2, r3
    782a:	db04      	blt.n	7836 <_ZN10RingBuffer17availableForStoreEv+0x12>
		return SERIAL_BUFFER_SIZE - 1 - _iHead + _iTail;
    782c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    782e:	6c40      	ldr	r0, [r0, #68]	; 0x44
    7830:	1ac0      	subs	r0, r0, r3
    7832:	303f      	adds	r0, #63	; 0x3f
}
    7834:	4770      	bx	lr
		return _iTail - _iHead - 1;
    7836:	6c43      	ldr	r3, [r0, #68]	; 0x44
    7838:	6c00      	ldr	r0, [r0, #64]	; 0x40
    783a:	1a18      	subs	r0, r3, r0
    783c:	3801      	subs	r0, #1
    783e:	e7f9      	b.n	7834 <_ZN10RingBuffer17availableForStoreEv+0x10>

00007840 <_ZN10RingBuffer4peekEv>:
	if(_iTail == _iHead)
    7840:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7842:	6c03      	ldr	r3, [r0, #64]	; 0x40
    7844:	429a      	cmp	r2, r3
    7846:	d002      	beq.n	784e <_ZN10RingBuffer4peekEv+0xe>
	return _aucBuffer[_iTail];
    7848:	6c43      	ldr	r3, [r0, #68]	; 0x44
    784a:	5cc0      	ldrb	r0, [r0, r3]
}
    784c:	4770      	bx	lr
		return -1;
    784e:	2001      	movs	r0, #1
    7850:	4240      	negs	r0, r0
    7852:	e7fb      	b.n	784c <_ZN10RingBuffer4peekEv+0xc>

00007854 <_ZN10RingBuffer6isFullEv>:
}

bool RingBuffer::isFull()
{
    7854:	0003      	movs	r3, r0
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    7856:	223f      	movs	r2, #63	; 0x3f
	return (nextIndex(_iHead) == _iTail);
    7858:	6c00      	ldr	r0, [r0, #64]	; 0x40
    785a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    785c:	3001      	adds	r0, #1
    785e:	4010      	ands	r0, r2
	return (nextIndex(_iHead) == _iTail);
    7860:	1ac0      	subs	r0, r0, r3
    7862:	4243      	negs	r3, r0
    7864:	4158      	adcs	r0, r3
    7866:	b2c0      	uxtb	r0, r0
}
    7868:	4770      	bx	lr
	...

0000786c <_Z9hdlc_initP14HardwareSerialm>:

// Pointer to Serial console and UART
static HardwareSerial * pU;
#define uart (*pU)
void hdlc_init( HardwareSerial * pUART, uint32_t max_info_len )
{
    786c:	b510      	push	{r4, lr}
    786e:	000c      	movs	r4, r1
	// Set pointer to UART object
	pU = pUART;

	// Set baud rate for the mShield UART
	// NOTE: This baud rate is fixed and cannot be changed
	uart.begin(UART_BAUD_RATE);
    7870:	2196      	movs	r1, #150	; 0x96
	pU = pUART;
    7872:	4b04      	ldr	r3, [pc, #16]	; (7884 <_Z9hdlc_initP14HardwareSerialm+0x18>)
	uart.begin(UART_BAUD_RATE);
    7874:	0209      	lsls	r1, r1, #8
	pU = pUART;
    7876:	6018      	str	r0, [r3, #0]
	uart.begin(UART_BAUD_RATE);
    7878:	6803      	ldr	r3, [r0, #0]
    787a:	69db      	ldr	r3, [r3, #28]
    787c:	4798      	blx	r3
	
	// Set the max payload size
	max_payload_size = max_info_len;
    787e:	4b02      	ldr	r3, [pc, #8]	; (7888 <_Z9hdlc_initP14HardwareSerialm+0x1c>)
    7880:	601c      	str	r4, [r3, #0]

} // hdlc_set_serial
    7882:	bd10      	pop	{r4, pc}
    7884:	20001cd4 	.word	0x20001cd4
    7888:	20001cd0 	.word	0x20001cd0

0000788c <_Z14hdlc_control_ihhh>:


uint8_t
hdlc_control_i(uint8_t nr, uint8_t ns, uint8_t pf)
{
    return ((nr & 0x07) << 5) | ((pf  & 0x01) << 4) | ((ns & 0x07) << 1);
    788c:	2310      	movs	r3, #16
    788e:	0112      	lsls	r2, r2, #4
    7890:	401a      	ands	r2, r3
    7892:	0140      	lsls	r0, r0, #5
    7894:	4310      	orrs	r0, r2
    7896:	220e      	movs	r2, #14
    7898:	0049      	lsls	r1, r1, #1
    789a:	4011      	ands	r1, r2
    789c:	4308      	orrs	r0, r1
    789e:	b2c0      	uxtb	r0, r0
}    
    78a0:	4770      	bx	lr

000078a2 <_Z15hdlc_control_rrhh>:

uint8_t
hdlc_control_rr(uint8_t nr, uint8_t pf)
{
   return ((nr & 0x07) << 5) | ((pf & 0x01) << 4) | 0x01;
    78a2:	2310      	movs	r3, #16
    78a4:	0109      	lsls	r1, r1, #4
    78a6:	4019      	ands	r1, r3
    78a8:	0140      	lsls	r0, r0, #5
    78aa:	4308      	orrs	r0, r1
    78ac:	2101      	movs	r1, #1
    78ae:	4308      	orrs	r0, r1
    78b0:	b2c0      	uxtb	r0, r0
}
    78b2:	4770      	bx	lr

000078b4 <_Z12hdlc_controlhh>:
int16_t
hdlc_control(uint8_t type, uint8_t pf)
{
    uint8_t control;
    
    switch (type) {        
    78b4:	3804      	subs	r0, #4
{
    78b6:	b500      	push	{lr}
    switch (type) {        
    78b8:	2805      	cmp	r0, #5
    78ba:	d815      	bhi.n	78e8 <_Z12hdlc_controlhh+0x34>
    78bc:	f000 fe3c 	bl	8538 <__gnu_thumb1_case_uqi>
    78c0:	0c0a0312 	.word	0x0c0a0312
    78c4:	100e      	.short	0x100e
        case HDLC_SNRM: control = 0x83; break;
        case HDLC_DISC: control = 0x43; break;
    78c6:	2043      	movs	r0, #67	; 0x43
        case HDLC_UI:   control = 0x03; break;
        default:
            return HDLC_FC_INVALID;
    }

    if (pf) {
    78c8:	2900      	cmp	r1, #0
    78ca:	d001      	beq.n	78d0 <_Z12hdlc_controlhh+0x1c>
        control |= 0x10;
    78cc:	2310      	movs	r3, #16
    78ce:	4318      	orrs	r0, r3
    }
    return control;
    78d0:	b200      	sxth	r0, r0
}
    78d2:	bd00      	pop	{pc}
        case HDLC_UA:   control = 0x63; break;
    78d4:	2063      	movs	r0, #99	; 0x63
    78d6:	e7f7      	b.n	78c8 <_Z12hdlc_controlhh+0x14>
        case HDLC_DM:   control = 0x0F; break;
    78d8:	200f      	movs	r0, #15
    78da:	e7f5      	b.n	78c8 <_Z12hdlc_controlhh+0x14>
        case HDLC_FRMR: control = 0x87; break;
    78dc:	2087      	movs	r0, #135	; 0x87
    78de:	e7f3      	b.n	78c8 <_Z12hdlc_controlhh+0x14>
        case HDLC_UI:   control = 0x03; break;
    78e0:	2003      	movs	r0, #3
    78e2:	e7f1      	b.n	78c8 <_Z12hdlc_controlhh+0x14>
        case HDLC_SNRM: control = 0x83; break;
    78e4:	2083      	movs	r0, #131	; 0x83
    78e6:	e7ef      	b.n	78c8 <_Z12hdlc_controlhh+0x14>
            return HDLC_FC_INVALID;
    78e8:	2001      	movs	r0, #1
    78ea:	4240      	negs	r0, r0
    78ec:	e7f1      	b.n	78d2 <_Z12hdlc_controlhh+0x1e>
	...

000078f0 <_Z18hdlc_parse_controlhP9hdlc_ctrl>:


int
hdlc_parse_control(uint8_t ctrl, struct hdlc_ctrl *hc) 
                 //  uint8_t *type, uint8_t *pf, uint8_t *nr, uint8_t *ns)
{
    78f0:	b570      	push	{r4, r5, r6, lr}
    78f2:	000d      	movs	r5, r1
    uint8_t c2;
    int rc = 0;

    memset(hc, 0, sizeof (*hc));
    78f4:	2604      	movs	r6, #4
{
    78f6:	0004      	movs	r4, r0
    memset(hc, 0, sizeof (*hc));
    78f8:	0032      	movs	r2, r6
    78fa:	2100      	movs	r1, #0
    78fc:	0028      	movs	r0, r5
    78fe:	f003 ff8f 	bl	b820 <memset>

    if ((ctrl & 1) == 0) {              /* I frame */
    7902:	2201      	movs	r2, #1
    7904:	0023      	movs	r3, r4
    7906:	1121      	asrs	r1, r4, #4
    7908:	4013      	ands	r3, r2
    790a:	d10f      	bne.n	792c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x3c>
        hc->type = HDLC_I;
        hc->nr = (ctrl & 0xE0) >> 5;
    790c:	0960      	lsrs	r0, r4, #5
        hc->pf = (ctrl & 0x10) >> 4;
        hc->ns = (ctrl & 0x0E) >> 1;
    790e:	0724      	lsls	r4, r4, #28
        hc->type = HDLC_I;
    7910:	702a      	strb	r2, [r5, #0]
        hc->ns = (ctrl & 0x0E) >> 1;
    7912:	0f64      	lsrs	r4, r4, #29
        hc->pf = (ctrl & 0x10) >> 4;
    7914:	400a      	ands	r2, r1
        hc->nr = (ctrl & 0xE0) >> 5;
    7916:	70a8      	strb	r0, [r5, #2]
        hc->pf = (ctrl & 0x10) >> 4;
    7918:	706a      	strb	r2, [r5, #1]
        hc->ns = (ctrl & 0x0E) >> 1;
    791a:	70ec      	strb	r4, [r5, #3]
    int rc = 0;
    791c:	2400      	movs	r4, #0
            case 0x03:  hc->type = HDLC_UI;    break;
            default:
                rc = 1;     /* Unknown frame - error */
        }
    }
    dlog(LOG_DEBUG, "frame type: 0x%x", hc->type);
    791e:	782a      	ldrb	r2, [r5, #0]
    7920:	491c      	ldr	r1, [pc, #112]	; (7994 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0xa4>)
    7922:	2007      	movs	r0, #7
    7924:	f7fc fc78 	bl	4218 <_Z4dlogiPKcz>

    return rc;
}
    7928:	0020      	movs	r0, r4
    792a:	bd70      	pop	{r4, r5, r6, pc}
    792c:	230f      	movs	r3, #15
    792e:	4023      	ands	r3, r4
    else if ((ctrl & 0x0F) == 1) {      /* RR frame */
    7930:	2b01      	cmp	r3, #1
    7932:	d106      	bne.n	7942 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x52>
        hc->type = HDLC_RR;
    7934:	2202      	movs	r2, #2
        hc->nr = (ctrl & 0xE0) >> 5;
    7936:	0964      	lsrs	r4, r4, #5
        hc->pf = (ctrl & 0x10) >> 4;
    7938:	400b      	ands	r3, r1
        hc->type = HDLC_RR;
    793a:	702a      	strb	r2, [r5, #0]
        hc->nr = (ctrl & 0xE0) >> 5;
    793c:	70ac      	strb	r4, [r5, #2]
        hc->pf = (ctrl & 0x10) >> 4;
    793e:	706b      	strb	r3, [r5, #1]
    7940:	e7ec      	b.n	791c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
    else if ((ctrl & 0x0F) == 5) {      /* RNR frame */
    7942:	2b05      	cmp	r3, #5
    7944:	d106      	bne.n	7954 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x64>
        hc->type = HDLC_RNR;
    7946:	3b02      	subs	r3, #2
        hc->nr = (ctrl & 0xE0) >> 5;
    7948:	0964      	lsrs	r4, r4, #5
        hc->pf  = (ctrl & 0x10) >> 4;
    794a:	400a      	ands	r2, r1
        hc->type = HDLC_RNR;
    794c:	702b      	strb	r3, [r5, #0]
        hc->nr = (ctrl & 0xE0) >> 5;
    794e:	70ac      	strb	r4, [r5, #2]
        hc->pf  = (ctrl & 0x10) >> 4;
    7950:	706a      	strb	r2, [r5, #1]
    7952:	e7e3      	b.n	791c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
        switch (c2) {
    7954:	2310      	movs	r3, #16
        hc->pf = (ctrl & 0x10) >> 4;
    7956:	400a      	ands	r2, r1
    7958:	706a      	strb	r2, [r5, #1]
        switch (c2) {
    795a:	439c      	bics	r4, r3
    795c:	2c43      	cmp	r4, #67	; 0x43
    795e:	d011      	beq.n	7984 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x94>
    7960:	d806      	bhi.n	7970 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x80>
    7962:	2c03      	cmp	r4, #3
    7964:	d013      	beq.n	798e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x9e>
            case 0x0F:  hc->type = HDLC_DM;    break;
    7966:	2307      	movs	r3, #7
        switch (c2) {
    7968:	2c0f      	cmp	r4, #15
    796a:	d00c      	beq.n	7986 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
                rc = 1;     /* Unknown frame - error */
    796c:	2401      	movs	r4, #1
    796e:	e7d6      	b.n	791e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2e>
        switch (c2) {
    7970:	2c83      	cmp	r4, #131	; 0x83
    7972:	d005      	beq.n	7980 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x90>
    7974:	2c87      	cmp	r4, #135	; 0x87
    7976:	d008      	beq.n	798a <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x9a>
    7978:	2c63      	cmp	r4, #99	; 0x63
    797a:	d1f7      	bne.n	796c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x7c>
            case 0x63:  hc->type = HDLC_UA;    break;
    797c:	2306      	movs	r3, #6
    797e:	e002      	b.n	7986 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
            case 0x83:  hc->type = HDLC_SNRM;  break;
    7980:	702e      	strb	r6, [r5, #0]
    7982:	e7cb      	b.n	791c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
            case 0x43:  hc->type = HDLC_DISC;  break;
    7984:	2305      	movs	r3, #5
            case 0x03:  hc->type = HDLC_UI;    break;
    7986:	702b      	strb	r3, [r5, #0]
    7988:	e7c8      	b.n	791c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
            case 0x87:  hc->type = HDLC_FRMR;  break;
    798a:	2308      	movs	r3, #8
    798c:	e7fb      	b.n	7986 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
            case 0x03:  hc->type = HDLC_UI;    break;
    798e:	2309      	movs	r3, #9
    7990:	e7f9      	b.n	7986 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
    7992:	46c0      	nop			; (mov r8, r8)
    7994:	00010a3a 	.word	0x00010a3a

00007998 <_Z16hdlc_addr_encodem>:
 * Limited to single byte encoding only
*/
uint8_t
hdlc_addr_encode(uint32_t address)
{    
    return ((address & 0x7F) << 1) | 1;
    7998:	0043      	lsls	r3, r0, #1
    799a:	2001      	movs	r0, #1
    799c:	4318      	orrs	r0, r3
    799e:	b2c0      	uxtb	r0, r0
}
    79a0:	4770      	bx	lr

000079a2 <_Z15hdlc_parse_addrPKhiPmPi>:
 *              0 means input was found incomplete
 */

int
hdlc_parse_addr(const uint8_t *buf, int len, uint32_t *eaddr, int *al)
{
    79a2:	b570      	push	{r4, r5, r6, lr}
    *eaddr = 0;
    79a4:	2400      	movs	r4, #0
    79a6:	2501      	movs	r5, #1
{
    79a8:	0006      	movs	r6, r0
    *eaddr = 0;
    79aa:	6014      	str	r4, [r2, #0]
        goto err;
    }
    
    return 0;
err:
    return 1;
    79ac:	0028      	movs	r0, r5
    *al = 0;
    79ae:	601c      	str	r4, [r3, #0]
    if ((len >= 1) &&(buf[0] & 1)) {
    79b0:	42a1      	cmp	r1, r4
    79b2:	dd05      	ble.n	79c0 <_Z15hdlc_parse_addrPKhiPmPi+0x1e>
    79b4:	7831      	ldrb	r1, [r6, #0]
    79b6:	4229      	tst	r1, r5
    79b8:	d002      	beq.n	79c0 <_Z15hdlc_parse_addrPKhiPmPi+0x1e>
    return 0;
    79ba:	0020      	movs	r0, r4
        memcpy(eaddr, buf, 1);
    79bc:	7011      	strb	r1, [r2, #0]
        *al = 1;               
    79be:	601d      	str	r5, [r3, #0]
}
    79c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000079c4 <_Z8hdlc_hdrismmPhPi>:
 *
 */
int
hdlc_hdr(int segment, int16_t fcontrol, uint32_t dst, uint32_t src,
    uint8_t *buf, int *hdrlen)
{
    79c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79c6:	9c06      	ldr	r4, [sp, #24]
    79c8:	001e      	movs	r6, r3
    79ca:	000d      	movs	r5, r1
    79cc:	0017      	movs	r7, r2
    hcs = crc16(crc16_init(), buf, *hdrlen - 2);
    buf_wle16(b, 0, ~hcs);
   
    return 0;
err:
    return 1;
    79ce:	2301      	movs	r3, #1
    if (fcontrol == HDLC_FC_INVALID || dst > 0x7f || src > 0x7f) {
    79d0:	1c4a      	adds	r2, r1, #1
    79d2:	d021      	beq.n	7a18 <_Z8hdlc_hdrismmPhPi+0x54>
    79d4:	2f7f      	cmp	r7, #127	; 0x7f
    79d6:	d81f      	bhi.n	7a18 <_Z8hdlc_hdrismmPhPi+0x54>
    79d8:	2e7f      	cmp	r6, #127	; 0x7f
    79da:	d81d      	bhi.n	7a18 <_Z8hdlc_hdrismmPhPi+0x54>
    *hdrlen = HDLC_HDR_SIZE;   /* incl. two bytes of HCS */ 
    79dc:	2207      	movs	r2, #7
    79de:	9b07      	ldr	r3, [sp, #28]
    79e0:	601a      	str	r2, [r3, #0]
    buf_wbe16(buf, 0, 0xA000 | (segment ? 0x0800 : 0) | *hdrlen);
    79e2:	2800      	cmp	r0, #0
    79e4:	d11a      	bne.n	7a1c <_Z8hdlc_hdrismmPhPi+0x58>
    79e6:	4b0e      	ldr	r3, [pc, #56]	; (7a20 <_Z8hdlc_hdrismmPhPi+0x5c>)
    79e8:	431a      	orrs	r2, r3
    79ea:	b292      	uxth	r2, r2
    79ec:	2100      	movs	r1, #0
    79ee:	0020      	movs	r0, r4
    79f0:	f000 fab3 	bl	7f5a <_Z9buf_wbe16Pvit>
    *b++ = dst;     //hdlc_addr_encode(dst);
    79f4:	70a7      	strb	r7, [r4, #2]
    *b++ = src;     //hdlc_addr_encode(src);
    79f6:	70e6      	strb	r6, [r4, #3]
    *b++ = fcontrol;
    79f8:	7125      	strb	r5, [r4, #4]
    hcs = crc16(crc16_init(), buf, *hdrlen - 2);
    79fa:	f000 fac1 	bl	7f80 <_Z10crc16_initv>
    79fe:	9b07      	ldr	r3, [sp, #28]
    7a00:	0021      	movs	r1, r4
    7a02:	681a      	ldr	r2, [r3, #0]
    7a04:	3a02      	subs	r2, #2
    7a06:	f000 fabf 	bl	7f88 <_Z5crc16tPKvj>
    buf_wle16(b, 0, ~hcs);
    7a0a:	43c2      	mvns	r2, r0
    7a0c:	2100      	movs	r1, #0
    7a0e:	b292      	uxth	r2, r2
    *b++ = fcontrol;
    7a10:	1d60      	adds	r0, r4, #5
    buf_wle16(b, 0, ~hcs);
    7a12:	f000 faa7 	bl	7f64 <_Z9buf_wle16Pvit>
    return 0;
    7a16:	2300      	movs	r3, #0
}
    7a18:	0018      	movs	r0, r3
    7a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf_wbe16(buf, 0, 0xA000 | (segment ? 0x0800 : 0) | *hdrlen);
    7a1c:	4b01      	ldr	r3, [pc, #4]	; (7a24 <_Z8hdlc_hdrismmPhPi+0x60>)
    7a1e:	e7e3      	b.n	79e8 <_Z8hdlc_hdrismmPhPi+0x24>
    7a20:	ffffa000 	.word	0xffffa000
    7a24:	ffffa800 	.word	0xffffa800

00007a28 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_>:
 * at the tail of info
 */
int
hdlc_frm_add_info(const uint8_t *hdr, uint8_t *fhdr, 
    const uint8_t *info, int infolen, uint8_t *fmfcs)
{
    7a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7a2a:	000d      	movs	r5, r1
    int fmt, hdrlen;
    uint16_t hcs, fcs;
    
    fmt = buf_be16(hdr, 0);
    7a2c:	2100      	movs	r1, #0
{
    7a2e:	0007      	movs	r7, r0
    7a30:	9201      	str	r2, [sp, #4]
    7a32:	001e      	movs	r6, r3
    fmt = buf_be16(hdr, 0);
    7a34:	f000 fa8b 	bl	7f4e <_Z8buf_be16PKvi>
    7a38:	0544      	lsls	r4, r0, #21
    7a3a:	9000      	str	r0, [sp, #0]
    7a3c:	0d64      	lsrs	r4, r4, #21
    hdrlen = fmt & 0x07FF;
    fmt = fmt & 0xF800;

    if (hdrlen > HDLC_HDR_MAX) {
        return 1;
    7a3e:	2001      	movs	r0, #1
    if (hdrlen > HDLC_HDR_MAX) {
    7a40:	2c07      	cmp	r4, #7
    7a42:	d830      	bhi.n	7aa6 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_+0x7e>
    }

    memcpy(fhdr, hdr, hdrlen);
    7a44:	0022      	movs	r2, r4
    7a46:	0039      	movs	r1, r7
    7a48:	0028      	movs	r0, r5
    7a4a:	f003 fece 	bl	b7ea <memcpy>
        fcs = crc16(crc16_init(), fhdr, hdrlen);
        fcs = crc16(fcs, info, infolen);
        /* final byte order - ready to be appended to frame */
        buf_wle16(fmfcs, 0, ~fcs);
    }
    return 0;
    7a4e:	2000      	movs	r0, #0
    if (infolen > 0) {           
    7a50:	4286      	cmp	r6, r0
    7a52:	dd28      	ble.n	7aa6 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_+0x7e>
        buf_wbe16(fhdr, 0, fmt | (hdrlen + infolen + 2));
    7a54:	9b00      	ldr	r3, [sp, #0]
    7a56:	1cb2      	adds	r2, r6, #2
    7a58:	0adb      	lsrs	r3, r3, #11
    7a5a:	02db      	lsls	r3, r3, #11
    7a5c:	18a2      	adds	r2, r4, r2
    7a5e:	431a      	orrs	r2, r3
    7a60:	0001      	movs	r1, r0
    7a62:	b292      	uxth	r2, r2
    7a64:	0028      	movs	r0, r5
        hcs = crc16(crc16_init(), fhdr, hdrlen - 2);
    7a66:	1ea7      	subs	r7, r4, #2
        buf_wbe16(fhdr, 0, fmt | (hdrlen + infolen + 2));
    7a68:	f000 fa77 	bl	7f5a <_Z9buf_wbe16Pvit>
        hcs = crc16(crc16_init(), fhdr, hdrlen - 2);
    7a6c:	f000 fa88 	bl	7f80 <_Z10crc16_initv>
    7a70:	003a      	movs	r2, r7
    7a72:	0029      	movs	r1, r5
    7a74:	f000 fa88 	bl	7f88 <_Z5crc16tPKvj>
        buf_wle16(fhdr, hdrlen - 2, ~hcs);
    7a78:	43c2      	mvns	r2, r0
    7a7a:	0039      	movs	r1, r7
    7a7c:	b292      	uxth	r2, r2
    7a7e:	0028      	movs	r0, r5
    7a80:	f000 fa70 	bl	7f64 <_Z9buf_wle16Pvit>
        fcs = crc16(crc16_init(), fhdr, hdrlen);
    7a84:	f000 fa7c 	bl	7f80 <_Z10crc16_initv>
    7a88:	0022      	movs	r2, r4
    7a8a:	0029      	movs	r1, r5
    7a8c:	f000 fa7c 	bl	7f88 <_Z5crc16tPKvj>
        fcs = crc16(fcs, info, infolen);
    7a90:	0032      	movs	r2, r6
    7a92:	9901      	ldr	r1, [sp, #4]
    7a94:	f000 fa78 	bl	7f88 <_Z5crc16tPKvj>
        buf_wle16(fmfcs, 0, ~fcs);
    7a98:	43c2      	mvns	r2, r0
    7a9a:	2100      	movs	r1, #0
    7a9c:	9808      	ldr	r0, [sp, #32]
    7a9e:	b292      	uxth	r2, r2
    7aa0:	f000 fa60 	bl	7f64 <_Z9buf_wle16Pvit>
    return 0;
    7aa4:	2000      	movs	r0, #0

}
    7aa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00007aa8 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi>:
#define HDLC_PARSE_SHORT    (1)
#define HDLC_PARSE_HDR_ERR  (2)

int
hdlc_parse_hdr(struct hdlc_hdr_fields *hh, const uint8_t *buf, int buflen)
{
    7aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7aaa:	0004      	movs	r4, r0
    7aac:	000d      	movs	r5, r1
    7aae:	0016      	movs	r6, r2
    int dlen, slen;
    int rc;

    if (buflen < HDLC_HDR_SIZE) { /* don't bother parsing, need more */
        return HDLC_PARSE_SHORT;
    7ab0:	2001      	movs	r0, #1
    if (buflen < HDLC_HDR_SIZE) { /* don't bother parsing, need more */
    7ab2:	2a06      	cmp	r2, #6
    7ab4:	dd06      	ble.n	7ac4 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>
    }

    /* Confirm type 3 */
    if ((buf[0] & 0xF0) != 0xA0) {
    7ab6:	780b      	ldrb	r3, [r1, #0]
    7ab8:	220f      	movs	r2, #15
    7aba:	0019      	movs	r1, r3
    7abc:	4391      	bics	r1, r2
    7abe:	29a0      	cmp	r1, #160	; 0xa0
    7ac0:	d001      	beq.n	7ac6 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1e>
        return HDLC_PARSE_HDR_ERR;
    7ac2:	2002      	movs	r0, #2
    return 0;

err:
    return HDLC_PARSE_HDR_ERR;

}
    7ac4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    hh->segment = buf[0] & 0x08;
    7ac6:	2208      	movs	r2, #8
    7ac8:	4013      	ands	r3, r2
    7aca:	60e3      	str	r3, [r4, #12]
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    7acc:	2100      	movs	r1, #0
    7ace:	0028      	movs	r0, r5
    7ad0:	f000 fa3d 	bl	7f4e <_Z8buf_be16PKvi>
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    7ad4:	0022      	movs	r2, r4
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    7ad6:	0540      	lsls	r0, r0, #21
    7ad8:	0d40      	lsrs	r0, r0, #21
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    7ada:	3e02      	subs	r6, #2
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    7adc:	6020      	str	r0, [r4, #0]
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    7ade:	466b      	mov	r3, sp
    7ae0:	1ca8      	adds	r0, r5, #2
    7ae2:	3214      	adds	r2, #20
    7ae4:	0031      	movs	r1, r6
    7ae6:	f7ff ff5c 	bl	79a2 <_Z15hdlc_parse_addrPKhiPmPi>
    if (rc || dlen < 1) {
    7aea:	2800      	cmp	r0, #0
    7aec:	d1e9      	bne.n	7ac2 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    7aee:	9800      	ldr	r0, [sp, #0]
    7af0:	2800      	cmp	r0, #0
    7af2:	dde6      	ble.n	7ac2 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    rc = hdlc_parse_addr(buf + 2 + dlen, buflen - 2 - dlen, &hh->src, &slen);
    7af4:	0022      	movs	r2, r4
    7af6:	1a31      	subs	r1, r6, r0
    7af8:	3002      	adds	r0, #2
    7afa:	1828      	adds	r0, r5, r0
    7afc:	ab01      	add	r3, sp, #4
    7afe:	3218      	adds	r2, #24
    7b00:	f7ff ff4f 	bl	79a2 <_Z15hdlc_parse_addrPKhiPmPi>
    if (rc || slen < 1) {
    7b04:	2800      	cmp	r0, #0
    7b06:	d1dc      	bne.n	7ac2 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    7b08:	9a01      	ldr	r2, [sp, #4]
    7b0a:	2a00      	cmp	r2, #0
    7b0c:	ddd9      	ble.n	7ac2 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    hh->hdrlen = 2 + dlen + slen + 1 + 2;
    7b0e:	9b00      	ldr	r3, [sp, #0]
    if (crc16_validate(buf, hh->hdrlen)) {
    7b10:	0028      	movs	r0, r5
    hh->hdrlen = 2 + dlen + slen + 1 + 2;
    7b12:	3302      	adds	r3, #2
    7b14:	189b      	adds	r3, r3, r2
    7b16:	1cd9      	adds	r1, r3, #3
    7b18:	6061      	str	r1, [r4, #4]
    hh->control = buf[2 + dlen + slen];
    7b1a:	5ceb      	ldrb	r3, [r5, r3]
    7b1c:	7423      	strb	r3, [r4, #16]
    if (crc16_validate(buf, hh->hdrlen)) {
    7b1e:	f000 fa45 	bl	7fac <_Z14crc16_validatePKvj>
    7b22:	2800      	cmp	r0, #0
    7b24:	d1cd      	bne.n	7ac2 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    if (hh->framelen > hh->hdrlen + 2) {
    7b26:	6862      	ldr	r2, [r4, #4]
    7b28:	6823      	ldr	r3, [r4, #0]
    7b2a:	1c91      	adds	r1, r2, #2
    7b2c:	428b      	cmp	r3, r1
    7b2e:	dd03      	ble.n	7b38 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x90>
        hh->infolen = hh->framelen - hh->hdrlen - 2;
    7b30:	1a9b      	subs	r3, r3, r2
    7b32:	3b02      	subs	r3, #2
    7b34:	60a3      	str	r3, [r4, #8]
    7b36:	e7c5      	b.n	7ac4 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>
        hh->infolen = 0;
    7b38:	60a0      	str	r0, [r4, #8]
    7b3a:	e7c3      	b.n	7ac4 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>

00007b3c <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params>:


/* Fill param negotiation information IEC 62056-46 6.4.4.4.3.2 */
int
hdlc_fill_snrm_param(uint8_t *buf, uint32_t buflen, uint32_t *rsplen,
                     struct hdlc_snrm_params *hsp){
    7b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Based on example in IEC doc*/
    uint8_t param_template[] = {0x81, 0x80, 0x14,
                                0x05, 0x02, 0x01, 0x00,
                                0x06, 0x02, 0x01, 0x00,
                                0x07, 0x04, 0x00, 0x00, 0x00, 0x01,
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    7b3e:	2617      	movs	r6, #23
                     struct hdlc_snrm_params *hsp){
    7b40:	b089      	sub	sp, #36	; 0x24
    7b42:	9101      	str	r1, [sp, #4]
    7b44:	0004      	movs	r4, r0
    7b46:	0017      	movs	r7, r2
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    7b48:	4914      	ldr	r1, [pc, #80]	; (7b9c <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x60>)
    7b4a:	0032      	movs	r2, r6
    7b4c:	a802      	add	r0, sp, #8
                     struct hdlc_snrm_params *hsp){
    7b4e:	001d      	movs	r5, r3
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    7b50:	f003 fe4b 	bl	b7ea <memcpy>

    if (!buf || buflen < sizeof(param_template)) {
        return 1;
    7b54:	2001      	movs	r0, #1
    if (!buf || buflen < sizeof(param_template)) {
    7b56:	2c00      	cmp	r4, #0
    7b58:	d01d      	beq.n	7b96 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x5a>
    7b5a:	9b01      	ldr	r3, [sp, #4]
    7b5c:	2b16      	cmp	r3, #22
    7b5e:	d91a      	bls.n	7b96 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x5a>
    }

    memcpy(buf, param_template, sizeof(param_template));
    7b60:	0032      	movs	r2, r6
    7b62:	a902      	add	r1, sp, #8
    7b64:	0020      	movs	r0, r4
    7b66:	f003 fe40 	bl	b7ea <memcpy>

    buf_wbe16(buf, 5, hsp->max_info_tx);
    7b6a:	882a      	ldrh	r2, [r5, #0]
    7b6c:	2105      	movs	r1, #5
    7b6e:	0020      	movs	r0, r4
    7b70:	f000 f9f3 	bl	7f5a <_Z9buf_wbe16Pvit>
    buf_wbe16(buf, 9, hsp->max_info_rx);
    7b74:	88aa      	ldrh	r2, [r5, #4]
    7b76:	2109      	movs	r1, #9
    7b78:	0020      	movs	r0, r4
    7b7a:	f000 f9ee 	bl	7f5a <_Z9buf_wbe16Pvit>

    buf_wbe32(buf, 13, hsp->window_tx);
    7b7e:	68aa      	ldr	r2, [r5, #8]
    7b80:	210d      	movs	r1, #13
    7b82:	0020      	movs	r0, r4
    7b84:	f000 f9f3 	bl	7f6e <_Z9buf_wbe32Pvim>
    buf_wbe32(buf, 19, hsp->window_rx);
    7b88:	0020      	movs	r0, r4
    7b8a:	68ea      	ldr	r2, [r5, #12]
    7b8c:	2113      	movs	r1, #19
    7b8e:	f000 f9ee 	bl	7f6e <_Z9buf_wbe32Pvim>

    *rsplen = sizeof(param_template);

    return 0;
    7b92:	2000      	movs	r0, #0
    *rsplen = sizeof(param_template);
    7b94:	603e      	str	r6, [r7, #0]
}
    7b96:	b009      	add	sp, #36	; 0x24
    7b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b9a:	46c0      	nop			; (mov r8, r8)
    7b9c:	000109d7 	.word	0x000109d7

00007ba0 <_Z15hdlc_send_framePKhS0_i>:
 *****************************************************************************
 *****************************************************************************
 */

int hdlc_send_frame( const uint8_t *hdr, const uint8_t *info, int infolen )
{
    7ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ba2:	0007      	movs	r7, r0
    7ba4:	b089      	sub	sp, #36	; 0x24
    7ba6:	000e      	movs	r6, r1
    7ba8:	0014      	movs	r4, r2
    uint8_t fcs[2];    
    int rc;
    int i;

    /* attach info if present */
    if (info && infolen > 0) {
    7baa:	2900      	cmp	r1, #0
    7bac:	d00b      	beq.n	7bc6 <_Z15hdlc_send_framePKhS0_i+0x26>
    7bae:	2a00      	cmp	r2, #0
    7bb0:	dd09      	ble.n	7bc6 <_Z15hdlc_send_framePKhS0_i+0x26>
        if ((rc = hdlc_frm_add_info(hdr, fhdr, info, infolen, fcs))) {
    7bb2:	ab05      	add	r3, sp, #20
    7bb4:	9300      	str	r3, [sp, #0]
    7bb6:	0013      	movs	r3, r2
    7bb8:	000a      	movs	r2, r1
    7bba:	a906      	add	r1, sp, #24
    7bbc:	f7ff ff34 	bl	7a28 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_>
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d11a      	bne.n	7bfa <_Z15hdlc_send_framePKhS0_i+0x5a>
            return -1;
        }
        hdr = fhdr;
    7bc4:	af06      	add	r7, sp, #24
    }

	// Log
    log_msg("HDLC send frame", hdr, HDLC_HDR_SIZE, 0);
    7bc6:	2207      	movs	r2, #7
    7bc8:	0039      	movs	r1, r7
    7bca:	2300      	movs	r3, #0
    7bcc:	4826      	ldr	r0, [pc, #152]	; (7c68 <_Z15hdlc_send_framePKhS0_i+0xc8>)
    7bce:	f7fc fb81 	bl	42d4 <_Z7log_msgPKcPKvii>

	// Send frame delimiter
    uart.write(fs);
    7bd2:	4d26      	ldr	r5, [pc, #152]	; (7c6c <_Z15hdlc_send_framePKhS0_i+0xcc>)
    7bd4:	217e      	movs	r1, #126	; 0x7e
    7bd6:	6828      	ldr	r0, [r5, #0]
    7bd8:	6803      	ldr	r3, [r0, #0]
    7bda:	681b      	ldr	r3, [r3, #0]
    7bdc:	4798      	blx	r3

	// Send header
    /* TODO: Is this a problem on Arduino? */
	/* Need to know why the first char is dropped on uart */
	rc = uart.write( hdr, HDLC_HDR_SIZE );
    7bde:	6828      	ldr	r0, [r5, #0]
    7be0:	0039      	movs	r1, r7
    7be2:	6803      	ldr	r3, [r0, #0]
    7be4:	2207      	movs	r2, #7
    7be6:	685b      	ldr	r3, [r3, #4]
    7be8:	4798      	blx	r3
    7bea:	0007      	movs	r7, r0
    if (rc != HDLC_HDR_SIZE) 
    7bec:	2807      	cmp	r0, #7
    7bee:	d007      	beq.n	7c00 <_Z15hdlc_send_framePKhS0_i+0x60>
	{
		dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_HDR_SIZE );
    7bf0:	2207      	movs	r2, #7
    7bf2:	0010      	movs	r0, r2
    7bf4:	491e      	ldr	r1, [pc, #120]	; (7c70 <_Z15hdlc_send_framePKhS0_i+0xd0>)

		// Write CRC-16
        rc = uart.write(fcs, HDLC_CRC_SIZE);
		if (rc != HDLC_CRC_SIZE) 
		{
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_CRC_SIZE );
    7bf6:	f7fc fb0f 	bl	4218 <_Z4dlogiPKcz>
            return -1;
    7bfa:	2001      	movs	r0, #1
    7bfc:	4240      	negs	r0, r0
    7bfe:	e031      	b.n	7c64 <_Z15hdlc_send_framePKhS0_i+0xc4>
    if (info && infolen > 0) 
    7c00:	2e00      	cmp	r6, #0
    7c02:	d023      	beq.n	7c4c <_Z15hdlc_send_framePKhS0_i+0xac>
    7c04:	2c00      	cmp	r4, #0
    7c06:	dd21      	ble.n	7c4c <_Z15hdlc_send_framePKhS0_i+0xac>
        rc = uart.write(info, infolen);
    7c08:	6828      	ldr	r0, [r5, #0]
    7c0a:	0022      	movs	r2, r4
    7c0c:	6803      	ldr	r3, [r0, #0]
    7c0e:	0031      	movs	r1, r6
    7c10:	685b      	ldr	r3, [r3, #4]
    7c12:	4798      	blx	r3
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", infolen );
    7c14:	0022      	movs	r2, r4
		if (rc != infolen) 
    7c16:	4284      	cmp	r4, r0
    7c18:	d109      	bne.n	7c2e <_Z15hdlc_send_framePKhS0_i+0x8e>
        rc = uart.write(fcs, HDLC_CRC_SIZE);
    7c1a:	6828      	ldr	r0, [r5, #0]
    7c1c:	2202      	movs	r2, #2
    7c1e:	6803      	ldr	r3, [r0, #0]
    7c20:	a905      	add	r1, sp, #20
    7c22:	685b      	ldr	r3, [r3, #4]
    7c24:	4798      	blx	r3
    7c26:	9003      	str	r0, [sp, #12]
		if (rc != HDLC_CRC_SIZE) 
    7c28:	2802      	cmp	r0, #2
    7c2a:	d003      	beq.n	7c34 <_Z15hdlc_send_framePKhS0_i+0x94>
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_CRC_SIZE );
    7c2c:	2202      	movs	r2, #2
    7c2e:	4910      	ldr	r1, [pc, #64]	; (7c70 <_Z15hdlc_send_framePKhS0_i+0xd0>)
    7c30:	0038      	movs	r0, r7
    7c32:	e7e0      	b.n	7bf6 <_Z15hdlc_send_framePKhS0_i+0x56>
			return -1;
		}

        log_msg(NULL, info, infolen, 0);    
    7c34:	2300      	movs	r3, #0
    7c36:	0022      	movs	r2, r4
    7c38:	0018      	movs	r0, r3
    7c3a:	0031      	movs	r1, r6
    7c3c:	f7fc fb4a 	bl	42d4 <_Z7log_msgPKcPKvii>
        log_msg(NULL, fcs, HDLC_CRC_SIZE, 0);            
    7c40:	2300      	movs	r3, #0
    7c42:	9a03      	ldr	r2, [sp, #12]
    7c44:	a905      	add	r1, sp, #20
    7c46:	0018      	movs	r0, r3
    7c48:	f7fc fb44 	bl	42d4 <_Z7log_msgPKcPKvii>

    }

    /* closing with FS.  Not shown in log */
    uart.write(fs);
    7c4c:	6828      	ldr	r0, [r5, #0]
    7c4e:	217e      	movs	r1, #126	; 0x7e
    7c50:	6803      	ldr	r3, [r0, #0]
    7c52:	681b      	ldr	r3, [r3, #0]
    7c54:	4798      	blx	r3
    log_msg(NULL, NULL, 0, 1);  /* EOL */
    7c56:	2200      	movs	r2, #0
    7c58:	2301      	movs	r3, #1
    7c5a:	0010      	movs	r0, r2
    7c5c:	0011      	movs	r1, r2
    7c5e:	f7fc fb39 	bl	42d4 <_Z7log_msgPKcPKvii>

    return 0;
    7c62:	2000      	movs	r0, #0
}
    7c64:	b009      	add	sp, #36	; 0x24
    7c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c68:	000109ee 	.word	0x000109ee
    7c6c:	20001cd4 	.word	0x20001cd4
    7c70:	000109fe 	.word	0x000109fe

00007c74 <_Z7hdlc_rxPhS_ii>:
	uint8_t * pPayload;
	uint16_t rx_len = 0;
	uint16_t frame_len = 0;
	struct hdlcux * pHUX = &hctx.hux;

    memset( pHUX, 0x0, sizeof(hctx.hux) );
    7c74:	2286      	movs	r2, #134	; 0x86
{
    7c76:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c78:	b0c5      	sub	sp, #276	; 0x114
    7c7a:	9002      	str	r0, [sp, #8]
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    7c7c:	4885      	ldr	r0, [pc, #532]	; (7e94 <_Z7hdlc_rxPhS_ii+0x220>)
    7c7e:	0052      	lsls	r2, r2, #1
{
    7c80:	9103      	str	r1, [sp, #12]
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    7c82:	3010      	adds	r0, #16
    7c84:	2100      	movs	r1, #0
{
    7c86:	001d      	movs	r5, r3
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    7c88:	f003 fdca 	bl	b820 <memset>

	// Read UART for maximum 200 ms
	uart.setTimeout(READ_BUF_TIMEOUT);	 
    7c8c:	21c8      	movs	r1, #200	; 0xc8
    7c8e:	4c82      	ldr	r4, [pc, #520]	; (7e98 <_Z7hdlc_rxPhS_ii+0x224>)
    7c90:	0049      	lsls	r1, r1, #1
    7c92:	6820      	ldr	r0, [r4, #0]
    7c94:	f000 f947 	bl	7f26 <_ZN6Stream10setTimeoutEm>

	// Wait for incoming HDLC frame
	elapsed = 0.0;
	timeout = (float) hdlc_frame_timeout;
    7c98:	0028      	movs	r0, r5
    7c9a:	f001 fcf1 	bl	9680 <__aeabi_i2f>
	elapsed = 0.0;
    7c9e:	2500      	movs	r5, #0
	timeout = (float) hdlc_frame_timeout;
    7ca0:	1c06      	adds	r6, r0, #0
	while( elapsed < timeout ) 
    7ca2:	1c31      	adds	r1, r6, #0
    7ca4:	1c28      	adds	r0, r5, #0
    7ca6:	f000 fe17 	bl	88d8 <__aeabi_fcmplt>
    7caa:	2800      	cmp	r0, #0
    7cac:	d04e      	beq.n	7d4c <_Z7hdlc_rxPhS_ii+0xd8>
	{
		// Check if there is nothing at the UART
		if (!uart.available())
    7cae:	6820      	ldr	r0, [r4, #0]
    7cb0:	6803      	ldr	r3, [r0, #0]
    7cb2:	691b      	ldr	r3, [r3, #16]
    7cb4:	4798      	blx	r3
    7cb6:	2800      	cmp	r0, #0
    7cb8:	d10f      	bne.n	7cda <_Z7hdlc_rxPhS_ii+0x66>
		{
			// Check if it is time to send Observe response message
			// The function call returns a flag that determines if Observe is turned on
			obs_flag = do_observe();
    7cba:	f7fe fea5 	bl	6a08 <_Z10do_observev>
			
#if defined(ARDUINO_ARCH_SAMD)
			if (obs_flag)
    7cbe:	2800      	cmp	r0, #0
    7cc0:	d005      	beq.n	7cce <_Z7hdlc_rxPhS_ii+0x5a>
			{
				// The reading of the time on SAMD takes about 5.5 ms
				// Adjust the variable accordingly
				elapsed += 5.5;
    7cc2:	4976      	ldr	r1, [pc, #472]	; (7e9c <_Z7hdlc_rxPhS_ii+0x228>)
				continue;
			}
#endif
			// Sleep for 1 ms
			delay(MS_SLEEP);
			elapsed++;
    7cc4:	1c28      	adds	r0, r5, #0
    7cc6:	f000 fe65 	bl	8994 <__aeabi_fadd>
    7cca:	1c05      	adds	r5, r0, #0
			continue;
    7ccc:	e7e9      	b.n	7ca2 <_Z7hdlc_rxPhS_ii+0x2e>
			delay(MS_SLEEP);
    7cce:	2001      	movs	r0, #1
    7cd0:	f7fa fcfe 	bl	26d0 <delay>
			elapsed++;
    7cd4:	21fe      	movs	r1, #254	; 0xfe
    7cd6:	0589      	lsls	r1, r1, #22
    7cd8:	e7f4      	b.n	7cc4 <_Z7hdlc_rxPhS_ii+0x50>

  double parseDouble(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR);
  // double version of parseInt

  size_t readBytes( char *buffer, size_t length); // read chars from stream into buffer
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
    7cda:	2580      	movs	r5, #128	; 0x80
    7cdc:	4f70      	ldr	r7, [pc, #448]	; (7ea0 <_Z7hdlc_rxPhS_ii+0x22c>)
    7cde:	00ed      	lsls	r5, r5, #3
    7ce0:	002a      	movs	r2, r5
    7ce2:	0039      	movs	r1, r7
    7ce4:	6820      	ldr	r0, [r4, #0]
    7ce6:	f000 f920 	bl	7f2a <_ZN6Stream9readBytesEPcj>
    7cea:	0004      	movs	r4, r0
			
		} // if
		
		// Read the HDLC frame until time-out
		cnt = uart.readBytes( UART_Buf, UART_MAX_BUF_LEN );
		sprintf( buffer, "readBytes() count: %d", cnt );
    7cec:	0002      	movs	r2, r0
    7cee:	496d      	ldr	r1, [pc, #436]	; (7ea4 <_Z7hdlc_rxPhS_ii+0x230>)
    7cf0:	a804      	add	r0, sp, #16
    7cf2:	f004 fe61 	bl	c9b8 <siprintf>
		dlog( LOG_INFO, buffer );
    7cf6:	a904      	add	r1, sp, #16
    7cf8:	2006      	movs	r0, #6
    7cfa:	f7fc fa8d 	bl	4218 <_Z4dlogiPKcz>
		capture_dump( UART_Buf, cnt );
    7cfe:	0021      	movs	r1, r4
    7d00:	0038      	movs	r0, r7
    7d02:	f7fc fb73 	bl	43ec <_Z12capture_dumpPhi>
		
		// Check if we received more bytes than there is space for in the receive buffer
		if ( cnt > UART_MAX_BUF_LEN )
    7d06:	42ac      	cmp	r4, r5
    7d08:	d90d      	bls.n	7d26 <_Z7hdlc_rxPhS_ii+0xb2>
		{
			// This should never happen as the readBytes method above already sets the limit
			dlog( LOG_DEBUG, "The UART receive buffer has overflown!" );
    7d0a:	4967      	ldr	r1, [pc, #412]	; (7ea8 <_Z7hdlc_rxPhS_ii+0x234>)
    7d0c:	2007      	movs	r0, #7
    7d0e:	f7fc fa83 	bl	4218 <_Z4dlogiPKcz>
			sprintf( buffer, "We read %d bytes and the max is %d bytes.", cnt, UART_MAX_BUF_LEN );
    7d12:	4966      	ldr	r1, [pc, #408]	; (7eac <_Z7hdlc_rxPhS_ii+0x238>)
    7d14:	002b      	movs	r3, r5
    7d16:	0022      	movs	r2, r4
    7d18:	a804      	add	r0, sp, #16
    7d1a:	f004 fe4d 	bl	c9b8 <siprintf>
			dlog( LOG_DEBUG, buffer );
    7d1e:	a904      	add	r1, sp, #16
    7d20:	2007      	movs	r0, #7
    7d22:	f7fc fa79 	bl	4218 <_Z4dlogiPKcz>
			
		} // if

		// Check for HDLC frame delimiters
		hctx.hu_state = HDLC_FRAME_BASE;
    7d26:	2300      	movs	r3, #0
    7d28:	4e5a      	ldr	r6, [pc, #360]	; (7e94 <_Z7hdlc_rxPhS_ii+0x220>)
    7d2a:	7033      	strb	r3, [r6, #0]
		if (( UART_Buf[0] != HDLC_FLAG ) || ( UART_Buf[cnt-1] != HDLC_FLAG ))
    7d2c:	783b      	ldrb	r3, [r7, #0]
    7d2e:	2b7e      	cmp	r3, #126	; 0x7e
    7d30:	d104      	bne.n	7d3c <_Z7hdlc_rxPhS_ii+0xc8>
    7d32:	193b      	adds	r3, r7, r4
    7d34:	3b01      	subs	r3, #1
    7d36:	781b      	ldrb	r3, [r3, #0]
    7d38:	2b7e      	cmp	r3, #126	; 0x7e
    7d3a:	d009      	beq.n	7d50 <_Z7hdlc_rxPhS_ii+0xdc>
		{
            ++hustats.hs_discard;  
    7d3c:	4a5c      	ldr	r2, [pc, #368]	; (7eb0 <_Z7hdlc_rxPhS_ii+0x23c>)
			dlog( LOG_DEBUG, "Missing HDLC flag(s)" );
    7d3e:	495d      	ldr	r1, [pc, #372]	; (7eb4 <_Z7hdlc_rxPhS_ii+0x240>)
            ++hustats.hs_discard;  
    7d40:	6b53      	ldr	r3, [r2, #52]	; 0x34
    7d42:	3301      	adds	r3, #1
    7d44:	6353      	str	r3, [r2, #52]	; 0x34
		rc = hu_hdlc_parse_hdr( pHdr, HDLC_HDR_SIZE, &hctx.hu_pend );
		if (rc) 
		{
			/* header parsing error - need to flush */
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
			dlog( LOG_DEBUG, "Bad hdr - flush" );
    7d46:	2007      	movs	r0, #7
    7d48:	f7fc fa66 	bl	4218 <_Z4dlogiPKcz>
			return 0;
    7d4c:	2500      	movs	r5, #0
    7d4e:	e04b      	b.n	7de8 <_Z7hdlc_rxPhS_ii+0x174>
    if ((hdr[0] & 0xF0) != 0xA0) {  /* only Type 3 is supported */
    7d50:	220f      	movs	r2, #15
    7d52:	787b      	ldrb	r3, [r7, #1]
    7d54:	4393      	bics	r3, r2
    7d56:	2ba0      	cmp	r3, #160	; 0xa0
    7d58:	d106      	bne.n	7d68 <_Z7hdlc_rxPhS_ii+0xf4>
        if (crc16_validate(hdr, hdrlen)) {
    7d5a:	2107      	movs	r1, #7
    7d5c:	4856      	ldr	r0, [pc, #344]	; (7eb8 <_Z7hdlc_rxPhS_ii+0x244>)
    7d5e:	f000 f925 	bl	7fac <_Z14crc16_validatePKvj>
    7d62:	1e05      	subs	r5, r0, #0
    7d64:	d100      	bne.n	7d68 <_Z7hdlc_rxPhS_ii+0xf4>
    7d66:	e083      	b.n	7e70 <_Z7hdlc_rxPhS_ii+0x1fc>
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    7d68:	2304      	movs	r3, #4
			dlog( LOG_DEBUG, "Bad hdr - flush" );
    7d6a:	4954      	ldr	r1, [pc, #336]	; (7ebc <_Z7hdlc_rxPhS_ii+0x248>)
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    7d6c:	7033      	strb	r3, [r6, #0]
    7d6e:	e7ea      	b.n	7d46 <_Z7hdlc_rxPhS_ii+0xd2>
			
		} // if

		/* Header complete - always, working with fixed hdr size */
		/* Payload, if any, starts after the header */
		hctx.hu_state = HDLC_FRAME_HDR;
    7d70:	2301      	movs	r3, #1
    7d72:	7033      	strb	r3, [r6, #0]
		pHUX->h_infoidx = HDLC_HDR_SIZE;
    7d74:	0033      	movs	r3, r6
    7d76:	2207      	movs	r2, #7
    7d78:	33ff      	adds	r3, #255	; 0xff
    7d7a:	769a      	strb	r2, [r3, #26]
    frmlen = buf_be16(hdr, 0) & 0x07FF;
    7d7c:	0029      	movs	r1, r5
    7d7e:	484e      	ldr	r0, [pc, #312]	; (7eb8 <_Z7hdlc_rxPhS_ii+0x244>)
    7d80:	f000 f8e5 	bl	7f4e <_Z8buf_be16PKvi>
    7d84:	0540      	lsls	r0, r0, #21
    7d86:	0d40      	lsrs	r0, r0, #21
    7d88:	9600      	str	r6, [sp, #0]
	if ( frmlen < hdrlen )
    7d8a:	2806      	cmp	r0, #6
    7d8c:	d800      	bhi.n	7d90 <_Z7hdlc_rxPhS_ii+0x11c>
    7d8e:	e078      	b.n	7e82 <_Z7hdlc_rxPhS_ii+0x20e>
	paylen = frmlen - hdrlen;
    7d90:	1fc3      	subs	r3, r0, #7
    if ( paylen && ( paylen < 3 ) )
    7d92:	3808      	subs	r0, #8
	paylen = frmlen - hdrlen;
    7d94:	b29b      	uxth	r3, r3
    if ( paylen && ( paylen < 3 ) )
    7d96:	2801      	cmp	r0, #1
    7d98:	d800      	bhi.n	7d9c <_Z7hdlc_rxPhS_ii+0x128>
    7d9a:	e072      	b.n	7e82 <_Z7hdlc_rxPhS_ii+0x20e>
    *infolen = paylen;
    7d9c:	0032      	movs	r2, r6
    7d9e:	32fe      	adds	r2, #254	; 0xfe
    7da0:	8393      	strh	r3, [r2, #28]
			dlog( LOG_DEBUG, "bad infolen - flush" );
		
		} // if
		
		// Check if the frame length equals the number of received bytes
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    7da2:	9b00      	ldr	r3, [sp, #0]
    7da4:	4a46      	ldr	r2, [pc, #280]	; (7ec0 <_Z7hdlc_rxPhS_ii+0x24c>)
    7da6:	33ff      	adds	r3, #255	; 0xff
    7da8:	7e9b      	ldrb	r3, [r3, #26]
    7daa:	8b92      	ldrh	r2, [r2, #28]
		rx_len = cnt - 2;
    7dac:	3c02      	subs	r4, #2
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    7dae:	189b      	adds	r3, r3, r2
    7db0:	b29b      	uxth	r3, r3
		rx_len = cnt - 2;
    7db2:	b2a4      	uxth	r4, r4
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    7db4:	9301      	str	r3, [sp, #4]
		if ( frame_len != rx_len )
    7db6:	429c      	cmp	r4, r3
    7db8:	d019      	beq.n	7dee <_Z7hdlc_rxPhS_ii+0x17a>
		{
			dlog( LOG_DEBUG, "The frame length doesn't match the number of received bytes" );
    7dba:	4942      	ldr	r1, [pc, #264]	; (7ec4 <_Z7hdlc_rxPhS_ii+0x250>)
    7dbc:	2007      	movs	r0, #7
    7dbe:	f7fc fa2b 	bl	4218 <_Z4dlogiPKcz>
			print("frame_len: ");	printnum(frame_len);	println("");
    7dc2:	4841      	ldr	r0, [pc, #260]	; (7ec8 <_Z7hdlc_rxPhS_ii+0x254>)
    7dc4:	f7fc fad0 	bl	4368 <_Z5printPKc>
    7dc8:	9801      	ldr	r0, [sp, #4]
    7dca:	f7fc faf9 	bl	43c0 <_Z8printnumi>
    7dce:	4e3f      	ldr	r6, [pc, #252]	; (7ecc <_Z7hdlc_rxPhS_ii+0x258>)
    7dd0:	0030      	movs	r0, r6
    7dd2:	f7fc fadf 	bl	4394 <_Z7printlnPKc>
			print("rx_len:    ");	printnum(rx_len);		println("");
    7dd6:	483e      	ldr	r0, [pc, #248]	; (7ed0 <_Z7hdlc_rxPhS_ii+0x25c>)
    7dd8:	f7fc fac6 	bl	4368 <_Z5printPKc>
    7ddc:	0020      	movs	r0, r4
    7dde:	f7fc faef 	bl	43c0 <_Z8printnumi>
    7de2:	0030      	movs	r0, r6
    7de4:	f7fc fad6 	bl	4394 <_Z7printlnPKc>
    } // while

	// Time-out
	return 0;
	
} // hdlc_rx()
    7de8:	0028      	movs	r0, r5
    7dea:	b045      	add	sp, #276	; 0x114
    7dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( crc16_validate( pHdr, frame_len )) 
    7dee:	0021      	movs	r1, r4
    7df0:	4831      	ldr	r0, [pc, #196]	; (7eb8 <_Z7hdlc_rxPhS_ii+0x244>)
    7df2:	f000 f8db 	bl	7fac <_Z14crc16_validatePKvj>
    7df6:	2800      	cmp	r0, #0
    7df8:	d001      	beq.n	7dfe <_Z7hdlc_rxPhS_ii+0x18a>
			dlog( LOG_DEBUG, "Discard frame - CRC error" );
    7dfa:	4936      	ldr	r1, [pc, #216]	; (7ed4 <_Z7hdlc_rxPhS_ii+0x260>)
    7dfc:	e03d      	b.n	7e7a <_Z7hdlc_rxPhS_ii+0x206>
		memcpy( hdr, pHdr, HDLC_HDR_SIZE );
    7dfe:	2207      	movs	r2, #7
    7e00:	492d      	ldr	r1, [pc, #180]	; (7eb8 <_Z7hdlc_rxPhS_ii+0x244>)
    7e02:	9802      	ldr	r0, [sp, #8]
    7e04:	f003 fcf1 	bl	b7ea <memcpy>
		if (pHUX->h_infolen) 
    7e08:	4b2d      	ldr	r3, [pc, #180]	; (7ec0 <_Z7hdlc_rxPhS_ii+0x24c>)
    7e0a:	8b9c      	ldrh	r4, [r3, #28]
    7e0c:	2c00      	cmp	r4, #0
    7e0e:	d02a      	beq.n	7e66 <_Z7hdlc_rxPhS_ii+0x1f2>
				dlog( LOG_DEBUG, "Discard frame - bad info len" );
    7e10:	4931      	ldr	r1, [pc, #196]	; (7ed8 <_Z7hdlc_rxPhS_ii+0x264>)
			if ( pHUX->h_infolen <= HDLC_CRC_SIZE ) 
    7e12:	2c02      	cmp	r4, #2
    7e14:	dc00      	bgt.n	7e18 <_Z7hdlc_rxPhS_ii+0x1a4>
    7e16:	e796      	b.n	7d46 <_Z7hdlc_rxPhS_ii+0xd2>
			if ( rx_len > max_payload_size )
    7e18:	4d30      	ldr	r5, [pc, #192]	; (7edc <_Z7hdlc_rxPhS_ii+0x268>)
			rx_len = pHUX->h_infolen - HDLC_CRC_SIZE;
    7e1a:	3c02      	subs	r4, #2
			if ( rx_len > max_payload_size )
    7e1c:	682b      	ldr	r3, [r5, #0]
			rx_len = pHUX->h_infolen - HDLC_CRC_SIZE;
    7e1e:	b2a4      	uxth	r4, r4
			if ( rx_len > max_payload_size )
    7e20:	429c      	cmp	r4, r3
    7e22:	d90b      	bls.n	7e3c <_Z7hdlc_rxPhS_ii+0x1c8>
				dlog( LOG_DEBUG, "The HDLC payload is too large!" );
    7e24:	492e      	ldr	r1, [pc, #184]	; (7ee0 <_Z7hdlc_rxPhS_ii+0x26c>)
    7e26:	2007      	movs	r0, #7
    7e28:	f7fc f9f6 	bl	4218 <_Z4dlogiPKcz>
				sprintf( buffer, "We got %d bytes and the max is %d bytes.", rx_len, max_payload_size );
    7e2c:	492d      	ldr	r1, [pc, #180]	; (7ee4 <_Z7hdlc_rxPhS_ii+0x270>)
    7e2e:	682b      	ldr	r3, [r5, #0]
    7e30:	0022      	movs	r2, r4
    7e32:	a804      	add	r0, sp, #16
    7e34:	f004 fdc0 	bl	c9b8 <siprintf>
				dlog( LOG_DEBUG, buffer );
    7e38:	a904      	add	r1, sp, #16
    7e3a:	e784      	b.n	7d46 <_Z7hdlc_rxPhS_ii+0xd2>
			memcpy( info, pPayload, rx_len );
    7e3c:	0039      	movs	r1, r7
    7e3e:	0022      	movs	r2, r4
    7e40:	3108      	adds	r1, #8
    7e42:	9803      	ldr	r0, [sp, #12]
    7e44:	f003 fcd1 	bl	b7ea <memcpy>
			hctx.hu_state = HDLC_FRAME_INFO;
    7e48:	2302      	movs	r3, #2
    7e4a:	9a00      	ldr	r2, [sp, #0]
    7e4c:	7013      	strb	r3, [r2, #0]
		hframerecv++;
    7e4e:	4a26      	ldr	r2, [pc, #152]	; (7ee8 <_Z7hdlc_rxPhS_ii+0x274>)
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    7e50:	1c79      	adds	r1, r7, #1
		hframerecv++;
    7e52:	6813      	ldr	r3, [r2, #0]
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    7e54:	4825      	ldr	r0, [pc, #148]	; (7eec <_Z7hdlc_rxPhS_ii+0x278>)
		hframerecv++;
    7e56:	3301      	adds	r3, #1
    7e58:	6013      	str	r3, [r2, #0]
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    7e5a:	2301      	movs	r3, #1
    7e5c:	9a01      	ldr	r2, [sp, #4]
    7e5e:	f7fc fa39 	bl	42d4 <_Z7log_msgPKcPKvii>
		return 1;
    7e62:	2501      	movs	r5, #1
    7e64:	e7c0      	b.n	7de8 <_Z7hdlc_rxPhS_ii+0x174>
			dlog( LOG_DEBUG, "Zero infolen" );
    7e66:	4922      	ldr	r1, [pc, #136]	; (7ef0 <_Z7hdlc_rxPhS_ii+0x27c>)
    7e68:	2007      	movs	r0, #7
    7e6a:	f7fc f9d5 	bl	4218 <_Z4dlogiPKcz>
    7e6e:	e7ee      	b.n	7e4e <_Z7hdlc_rxPhS_ii+0x1da>
		if ( hctx.hu_pend == 2 ) 
    7e70:	6873      	ldr	r3, [r6, #4]
    7e72:	2b02      	cmp	r3, #2
    7e74:	d000      	beq.n	7e78 <_Z7hdlc_rxPhS_ii+0x204>
    7e76:	e77b      	b.n	7d70 <_Z7hdlc_rxPhS_ii+0xfc>
			dlog( LOG_DEBUG, "hctx.hu_pend == 2" );
    7e78:	491e      	ldr	r1, [pc, #120]	; (7ef4 <_Z7hdlc_rxPhS_ii+0x280>)
			dlog( LOG_DEBUG, "Discard frame - CRC error" );
    7e7a:	2007      	movs	r0, #7
    7e7c:	f7fc f9cc 	bl	4218 <_Z4dlogiPKcz>
			return 0;
    7e80:	e7b2      	b.n	7de8 <_Z7hdlc_rxPhS_ii+0x174>
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    7e82:	2304      	movs	r3, #4
    7e84:	9a00      	ldr	r2, [sp, #0]
			dlog( LOG_DEBUG, "bad infolen - flush" );
    7e86:	491c      	ldr	r1, [pc, #112]	; (7ef8 <_Z7hdlc_rxPhS_ii+0x284>)
    7e88:	2007      	movs	r0, #7
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    7e8a:	7013      	strb	r3, [r2, #0]
			dlog( LOG_DEBUG, "bad infolen - flush" );
    7e8c:	f7fc f9c4 	bl	4218 <_Z4dlogiPKcz>
    7e90:	e787      	b.n	7da2 <_Z7hdlc_rxPhS_ii+0x12e>
    7e92:	46c0      	nop			; (mov r8, r8)
    7e94:	20001cd8 	.word	0x20001cd8
    7e98:	20001cd4 	.word	0x20001cd4
    7e9c:	40b00000 	.word	0x40b00000
    7ea0:	200018cc 	.word	0x200018cc
    7ea4:	00010a4b 	.word	0x00010a4b
    7ea8:	00010a61 	.word	0x00010a61
    7eac:	00010a88 	.word	0x00010a88
    7eb0:	20001df4 	.word	0x20001df4
    7eb4:	00010ab2 	.word	0x00010ab2
    7eb8:	200018cd 	.word	0x200018cd
    7ebc:	00010bc9 	.word	0x00010bc9
    7ec0:	20001dd6 	.word	0x20001dd6
    7ec4:	00010ad9 	.word	0x00010ad9
    7ec8:	00010b15 	.word	0x00010b15
    7ecc:	0000fe0e 	.word	0x0000fe0e
    7ed0:	00010b21 	.word	0x00010b21
    7ed4:	00010b2d 	.word	0x00010b2d
    7ed8:	00010b47 	.word	0x00010b47
    7edc:	20001cd0 	.word	0x20001cd0
    7ee0:	00010b64 	.word	0x00010b64
    7ee4:	00010b83 	.word	0x00010b83
    7ee8:	20001ccc 	.word	0x20001ccc
    7eec:	00010bb9 	.word	0x00010bb9
    7ef0:	00010bac 	.word	0x00010bac
    7ef4:	00010ac7 	.word	0x00010ac7
    7ef8:	00010bd9 	.word	0x00010bd9

00007efc <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// protected method to read stream with timeout
int Stream::timedRead()
{
    7efc:	b510      	push	{r4, lr}
    7efe:	0004      	movs	r4, r0
  int c;
  _startMillis = millis();
    7f00:	f7fa fbb0 	bl	2664 <millis>
    7f04:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
    7f06:	6823      	ldr	r3, [r4, #0]
    7f08:	0020      	movs	r0, r4
    7f0a:	695b      	ldr	r3, [r3, #20]
    7f0c:	4798      	blx	r3
    if (c >= 0) return c;
    7f0e:	2800      	cmp	r0, #0
    7f10:	da08      	bge.n	7f24 <_ZN6Stream9timedReadEv+0x28>
  } while(millis() - _startMillis < _timeout);
    7f12:	f7fa fba7 	bl	2664 <millis>
    7f16:	68e3      	ldr	r3, [r4, #12]
    7f18:	1ac0      	subs	r0, r0, r3
  do {
    7f1a:	68a3      	ldr	r3, [r4, #8]
    7f1c:	4298      	cmp	r0, r3
    7f1e:	d3f2      	bcc.n	7f06 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
    7f20:	2001      	movs	r0, #1
    7f22:	4240      	negs	r0, r0
}
    7f24:	bd10      	pop	{r4, pc}

00007f26 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    7f26:	6081      	str	r1, [r0, #8]
}
    7f28:	4770      	bx	lr

00007f2a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    7f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7f2c:	000e      	movs	r6, r1
    7f2e:	000c      	movs	r4, r1
    7f30:	9001      	str	r0, [sp, #4]
    7f32:	188d      	adds	r5, r1, r2
    7f34:	1ba7      	subs	r7, r4, r6
  size_t count = 0;
  while (count < length) {
    7f36:	42ac      	cmp	r4, r5
    7f38:	d007      	beq.n	7f4a <_ZN6Stream9readBytesEPcj+0x20>
    int c = timedRead();
    7f3a:	9801      	ldr	r0, [sp, #4]
    7f3c:	f7ff ffde 	bl	7efc <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    7f40:	2800      	cmp	r0, #0
    7f42:	db02      	blt.n	7f4a <_ZN6Stream9readBytesEPcj+0x20>
    *buffer++ = (char)c;
    7f44:	7020      	strb	r0, [r4, #0]
    7f46:	3401      	adds	r4, #1
  while (count < length) {
    7f48:	e7f4      	b.n	7f34 <_ZN6Stream9readBytesEPcj+0xa>
    count++;
  }
  return count;
}
    7f4a:	0038      	movs	r0, r7
    7f4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00007f4e <_Z8buf_be16PKvi>:

uint16_t
buf_be16(const void *buf, int idx)
{
    const uint8_t *p = (const uint8_t *) buf;    
    return (p[idx + 1] | p[idx] << 8);
    7f4e:	1843      	adds	r3, r0, r1
    7f50:	5c40      	ldrb	r0, [r0, r1]
    7f52:	785b      	ldrb	r3, [r3, #1]
    7f54:	0200      	lsls	r0, r0, #8
    7f56:	4318      	orrs	r0, r3
}
    7f58:	4770      	bx	lr

00007f5a <_Z9buf_wbe16Pvit>:
void
buf_wbe16(void *buf, int idx, uint16_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    7f5a:	1841      	adds	r1, r0, r1
    *p++ = val >> 8;
    7f5c:	1213      	asrs	r3, r2, #8
    7f5e:	700b      	strb	r3, [r1, #0]
    *p = val & 0xFF;
    7f60:	704a      	strb	r2, [r1, #1]
	
} // buf_wbe16
    7f62:	4770      	bx	lr

00007f64 <_Z9buf_wle16Pvit>:
void
buf_wle16(void *buf, int idx, uint16_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    7f64:	1841      	adds	r1, r0, r1
    *p++ = val & 0xFF;
    7f66:	700a      	strb	r2, [r1, #0]
    *p = val >> 8;
    7f68:	1212      	asrs	r2, r2, #8
    7f6a:	704a      	strb	r2, [r1, #1]
}
    7f6c:	4770      	bx	lr

00007f6e <_Z9buf_wbe32Pvim>:
void
buf_wbe32(void *buf, int idx, uint32_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    7f6e:	1841      	adds	r1, r0, r1
    *p++ = val >> 24;
    7f70:	0e13      	lsrs	r3, r2, #24
    7f72:	700b      	strb	r3, [r1, #0]
    *p++ = (val >> 16) & 0xFF;
    7f74:	0c13      	lsrs	r3, r2, #16
    7f76:	704b      	strb	r3, [r1, #1]
    *p++ = (val >> 8) & 0xFF;
    7f78:	0a13      	lsrs	r3, r2, #8
    7f7a:	708b      	strb	r3, [r1, #2]
    *p = val & 0xFF;
    7f7c:	70ca      	strb	r2, [r1, #3]
}
    7f7e:	4770      	bx	lr

00007f80 <_Z10crc16_initv>:

uint16_t
crc16_init(void)
{
    return CRC16_INITIAL;
}
    7f80:	4800      	ldr	r0, [pc, #0]	; (7f84 <_Z10crc16_initv+0x4>)
    7f82:	4770      	bx	lr
    7f84:	0000ffff 	.word	0x0000ffff

00007f88 <_Z5crc16tPKvj>:

uint16_t
crc16(uint16_t crc, const  void *addr_v, unsigned int len)
{
    7f88:	b530      	push	{r4, r5, lr}
    const uint8_t *addr = (const uint8_t *)addr_v;
    uint8_t ch;

    while (len--) {
        ch = *addr++;
        crc = (crc >> 8) ^ xmodem_crctable[(crc ^ ch) & 0xFF]; 
    7f8a:	25ff      	movs	r5, #255	; 0xff
    7f8c:	4c06      	ldr	r4, [pc, #24]	; (7fa8 <_Z5crc16tPKvj+0x20>)
    7f8e:	188a      	adds	r2, r1, r2
    while (len--) {
    7f90:	4291      	cmp	r1, r2
    7f92:	d008      	beq.n	7fa6 <_Z5crc16tPKvj+0x1e>
        crc = (crc >> 8) ^ xmodem_crctable[(crc ^ ch) & 0xFF]; 
    7f94:	780b      	ldrb	r3, [r1, #0]
    7f96:	3101      	adds	r1, #1
    7f98:	4043      	eors	r3, r0
    7f9a:	402b      	ands	r3, r5
    7f9c:	005b      	lsls	r3, r3, #1
    7f9e:	5b1b      	ldrh	r3, [r3, r4]
    7fa0:	1200      	asrs	r0, r0, #8
    7fa2:	4058      	eors	r0, r3
    while (len--) {
    7fa4:	e7f4      	b.n	7f90 <_Z5crc16tPKvj+0x8>

    }
    return crc;
}    
    7fa6:	bd30      	pop	{r4, r5, pc}
    7fa8:	00010bee 	.word	0x00010bee

00007fac <_Z14crc16_validatePKvj>:
/* len includes the 2 bytes of CRC at the end of the buffer 
 * return 0 for OK, nonzero for error
 */
int
crc16_validate(const void *addr_v, unsigned int len)
{
    7fac:	b510      	push	{r4, lr}
    7fae:	000a      	movs	r2, r1
    return (crc16(CRC16_INITIAL, addr_v, len) != CRC16_FINAL);         
    7fb0:	0001      	movs	r1, r0
    7fb2:	4804      	ldr	r0, [pc, #16]	; (7fc4 <_Z14crc16_validatePKvj+0x18>)
    7fb4:	f7ff ffe8 	bl	7f88 <_Z5crc16tPKvj>
    7fb8:	4b03      	ldr	r3, [pc, #12]	; (7fc8 <_Z14crc16_validatePKvj+0x1c>)
    7fba:	18c0      	adds	r0, r0, r3
    7fbc:	1e43      	subs	r3, r0, #1
    7fbe:	4198      	sbcs	r0, r3
}
    7fc0:	bd10      	pop	{r4, pc}
    7fc2:	46c0      	nop			; (mov r8, r8)
    7fc4:	0000ffff 	.word	0x0000ffff
    7fc8:	ffff0f48 	.word	0xffff0f48

00007fcc <__aeabi_atexit>:
    7fcc:	000b      	movs	r3, r1
    7fce:	b510      	push	{r4, lr}
    7fd0:	0001      	movs	r1, r0
    7fd2:	0018      	movs	r0, r3
    7fd4:	f003 faaa 	bl	b52c <__cxa_atexit>
    7fd8:	bd10      	pop	{r4, pc}
	...

00007fdc <exp>:
    7fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fde:	4647      	mov	r7, r8
    7fe0:	46ce      	mov	lr, r9
    7fe2:	b580      	push	{r7, lr}
    7fe4:	b08b      	sub	sp, #44	; 0x2c
    7fe6:	0004      	movs	r4, r0
    7fe8:	000d      	movs	r5, r1
    7fea:	f000 f8cb 	bl	8184 <__ieee754_exp>
    7fee:	4b34      	ldr	r3, [pc, #208]	; (80c0 <exp+0xe4>)
    7ff0:	0006      	movs	r6, r0
    7ff2:	4698      	mov	r8, r3
    7ff4:	781b      	ldrb	r3, [r3, #0]
    7ff6:	000f      	movs	r7, r1
    7ff8:	b25b      	sxtb	r3, r3
    7ffa:	3301      	adds	r3, #1
    7ffc:	d038      	beq.n	8070 <exp+0x94>
    7ffe:	0020      	movs	r0, r4
    8000:	0029      	movs	r1, r5
    8002:	f000 fa8d 	bl	8520 <finite>
    8006:	2800      	cmp	r0, #0
    8008:	d032      	beq.n	8070 <exp+0x94>
    800a:	4a2e      	ldr	r2, [pc, #184]	; (80c4 <exp+0xe8>)
    800c:	4b2e      	ldr	r3, [pc, #184]	; (80c8 <exp+0xec>)
    800e:	0020      	movs	r0, r4
    8010:	0029      	movs	r1, r5
    8012:	f000 fc3b 	bl	888c <__aeabi_dcmpgt>
    8016:	4681      	mov	r9, r0
    8018:	2800      	cmp	r0, #0
    801a:	d130      	bne.n	807e <exp+0xa2>
    801c:	4a2b      	ldr	r2, [pc, #172]	; (80cc <exp+0xf0>)
    801e:	4b2c      	ldr	r3, [pc, #176]	; (80d0 <exp+0xf4>)
    8020:	0020      	movs	r0, r4
    8022:	0029      	movs	r1, r5
    8024:	f000 fc1e 	bl	8864 <__aeabi_dcmplt>
    8028:	2800      	cmp	r0, #0
    802a:	d021      	beq.n	8070 <exp+0x94>
    802c:	2304      	movs	r3, #4
    802e:	9300      	str	r3, [sp, #0]
    8030:	4b28      	ldr	r3, [pc, #160]	; (80d4 <exp+0xf8>)
    8032:	2200      	movs	r2, #0
    8034:	9301      	str	r3, [sp, #4]
    8036:	464b      	mov	r3, r9
    8038:	9308      	str	r3, [sp, #32]
    803a:	2300      	movs	r3, #0
    803c:	9206      	str	r2, [sp, #24]
    803e:	9307      	str	r3, [sp, #28]
    8040:	4643      	mov	r3, r8
    8042:	781b      	ldrb	r3, [r3, #0]
    8044:	466e      	mov	r6, sp
    8046:	b25b      	sxtb	r3, r3
    8048:	9404      	str	r4, [sp, #16]
    804a:	9505      	str	r5, [sp, #20]
    804c:	9402      	str	r4, [sp, #8]
    804e:	9503      	str	r5, [sp, #12]
    8050:	2b02      	cmp	r3, #2
    8052:	d030      	beq.n	80b6 <exp+0xda>
    8054:	0030      	movs	r0, r6
    8056:	f000 fa6d 	bl	8534 <matherr>
    805a:	2800      	cmp	r0, #0
    805c:	d02b      	beq.n	80b6 <exp+0xda>
    805e:	6a33      	ldr	r3, [r6, #32]
    8060:	2b00      	cmp	r3, #0
    8062:	d003      	beq.n	806c <exp+0x90>
    8064:	f003 fa70 	bl	b548 <__errno>
    8068:	6a33      	ldr	r3, [r6, #32]
    806a:	6003      	str	r3, [r0, #0]
    806c:	69f7      	ldr	r7, [r6, #28]
    806e:	69b6      	ldr	r6, [r6, #24]
    8070:	0030      	movs	r0, r6
    8072:	0039      	movs	r1, r7
    8074:	b00b      	add	sp, #44	; 0x2c
    8076:	bc0c      	pop	{r2, r3}
    8078:	4690      	mov	r8, r2
    807a:	4699      	mov	r9, r3
    807c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    807e:	2303      	movs	r3, #3
    8080:	9300      	str	r3, [sp, #0]
    8082:	4b14      	ldr	r3, [pc, #80]	; (80d4 <exp+0xf8>)
    8084:	466e      	mov	r6, sp
    8086:	9301      	str	r3, [sp, #4]
    8088:	2300      	movs	r3, #0
    808a:	9308      	str	r3, [sp, #32]
    808c:	4643      	mov	r3, r8
    808e:	781b      	ldrb	r3, [r3, #0]
    8090:	9404      	str	r4, [sp, #16]
    8092:	9505      	str	r5, [sp, #20]
    8094:	b25b      	sxtb	r3, r3
    8096:	9402      	str	r4, [sp, #8]
    8098:	9503      	str	r5, [sp, #12]
    809a:	2b00      	cmp	r3, #0
    809c:	d105      	bne.n	80aa <exp+0xce>
    809e:	22e0      	movs	r2, #224	; 0xe0
    80a0:	4b0d      	ldr	r3, [pc, #52]	; (80d8 <exp+0xfc>)
    80a2:	0612      	lsls	r2, r2, #24
    80a4:	9206      	str	r2, [sp, #24]
    80a6:	9307      	str	r3, [sp, #28]
    80a8:	e7d4      	b.n	8054 <exp+0x78>
    80aa:	2000      	movs	r0, #0
    80ac:	490b      	ldr	r1, [pc, #44]	; (80dc <exp+0x100>)
    80ae:	9006      	str	r0, [sp, #24]
    80b0:	9107      	str	r1, [sp, #28]
    80b2:	2b02      	cmp	r3, #2
    80b4:	d1ce      	bne.n	8054 <exp+0x78>
    80b6:	f003 fa47 	bl	b548 <__errno>
    80ba:	2322      	movs	r3, #34	; 0x22
    80bc:	6003      	str	r3, [r0, #0]
    80be:	e7ce      	b.n	805e <exp+0x82>
    80c0:	200000b0 	.word	0x200000b0
    80c4:	fefa39ef 	.word	0xfefa39ef
    80c8:	40862e42 	.word	0x40862e42
    80cc:	d52d3051 	.word	0xd52d3051
    80d0:	c0874910 	.word	0xc0874910
    80d4:	00010df0 	.word	0x00010df0
    80d8:	47efffff 	.word	0x47efffff
    80dc:	7ff00000 	.word	0x7ff00000

000080e0 <sqrtf>:
    80e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80e2:	2500      	movs	r5, #0
    80e4:	b08d      	sub	sp, #52	; 0x34
    80e6:	1c04      	adds	r4, r0, #0
    80e8:	f000 f9be 	bl	8468 <__ieee754_sqrtf>
    80ec:	4b23      	ldr	r3, [pc, #140]	; (817c <sqrtf+0x9c>)
    80ee:	1c06      	adds	r6, r0, #0
    80f0:	575d      	ldrsb	r5, [r3, r5]
    80f2:	1c6b      	adds	r3, r5, #1
    80f4:	d00b      	beq.n	810e <sqrtf+0x2e>
    80f6:	1c21      	adds	r1, r4, #0
    80f8:	1c20      	adds	r0, r4, #0
    80fa:	f001 fa89 	bl	9610 <__aeabi_fcmpun>
    80fe:	1e07      	subs	r7, r0, #0
    8100:	d105      	bne.n	810e <sqrtf+0x2e>
    8102:	2100      	movs	r1, #0
    8104:	1c20      	adds	r0, r4, #0
    8106:	f000 fbe7 	bl	88d8 <__aeabi_fcmplt>
    810a:	2800      	cmp	r0, #0
    810c:	d102      	bne.n	8114 <sqrtf+0x34>
    810e:	1c30      	adds	r0, r6, #0
    8110:	b00d      	add	sp, #52	; 0x34
    8112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8114:	2301      	movs	r3, #1
    8116:	9302      	str	r3, [sp, #8]
    8118:	4b19      	ldr	r3, [pc, #100]	; (8180 <sqrtf+0xa0>)
    811a:	1c20      	adds	r0, r4, #0
    811c:	9303      	str	r3, [sp, #12]
    811e:	970a      	str	r7, [sp, #40]	; 0x28
    8120:	f003 f8ec 	bl	b2fc <__aeabi_f2d>
    8124:	2200      	movs	r2, #0
    8126:	9006      	str	r0, [sp, #24]
    8128:	9107      	str	r1, [sp, #28]
    812a:	9004      	str	r0, [sp, #16]
    812c:	9105      	str	r1, [sp, #20]
    812e:	2300      	movs	r3, #0
    8130:	2d00      	cmp	r5, #0
    8132:	d015      	beq.n	8160 <sqrtf+0x80>
    8134:	0010      	movs	r0, r2
    8136:	0019      	movs	r1, r3
    8138:	f001 fe48 	bl	9dcc <__aeabi_ddiv>
    813c:	9008      	str	r0, [sp, #32]
    813e:	9109      	str	r1, [sp, #36]	; 0x24
    8140:	2d02      	cmp	r5, #2
    8142:	d10f      	bne.n	8164 <sqrtf+0x84>
    8144:	f003 fa00 	bl	b548 <__errno>
    8148:	2321      	movs	r3, #33	; 0x21
    814a:	6003      	str	r3, [r0, #0]
    814c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    814e:	9301      	str	r3, [sp, #4]
    8150:	2b00      	cmp	r3, #0
    8152:	d10d      	bne.n	8170 <sqrtf+0x90>
    8154:	9808      	ldr	r0, [sp, #32]
    8156:	9909      	ldr	r1, [sp, #36]	; 0x24
    8158:	f003 f922 	bl	b3a0 <__aeabi_d2f>
    815c:	1c06      	adds	r6, r0, #0
    815e:	e7d6      	b.n	810e <sqrtf+0x2e>
    8160:	9208      	str	r2, [sp, #32]
    8162:	9309      	str	r3, [sp, #36]	; 0x24
    8164:	a802      	add	r0, sp, #8
    8166:	f000 f9e5 	bl	8534 <matherr>
    816a:	2800      	cmp	r0, #0
    816c:	d1ee      	bne.n	814c <sqrtf+0x6c>
    816e:	e7e9      	b.n	8144 <sqrtf+0x64>
    8170:	f003 f9ea 	bl	b548 <__errno>
    8174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8176:	9301      	str	r3, [sp, #4]
    8178:	6003      	str	r3, [r0, #0]
    817a:	e7eb      	b.n	8154 <sqrtf+0x74>
    817c:	200000b0 	.word	0x200000b0
    8180:	00010df4 	.word	0x00010df4

00008184 <__ieee754_exp>:
    8184:	b5f0      	push	{r4, r5, r6, r7, lr}
    8186:	46d6      	mov	lr, sl
    8188:	b500      	push	{lr}
    818a:	004b      	lsls	r3, r1, #1
    818c:	000e      	movs	r6, r1
    818e:	0fcc      	lsrs	r4, r1, #31
    8190:	4995      	ldr	r1, [pc, #596]	; (83e8 <__ieee754_exp+0x264>)
    8192:	b084      	sub	sp, #16
    8194:	0007      	movs	r7, r0
    8196:	085b      	lsrs	r3, r3, #1
    8198:	428b      	cmp	r3, r1
    819a:	d90e      	bls.n	81ba <__ieee754_exp+0x36>
    819c:	4993      	ldr	r1, [pc, #588]	; (83ec <__ieee754_exp+0x268>)
    819e:	428b      	cmp	r3, r1
    81a0:	d800      	bhi.n	81a4 <__ieee754_exp+0x20>
    81a2:	e084      	b.n	82ae <__ieee754_exp+0x12a>
    81a4:	0332      	lsls	r2, r6, #12
    81a6:	0b12      	lsrs	r2, r2, #12
    81a8:	4302      	orrs	r2, r0
    81aa:	d000      	beq.n	81ae <__ieee754_exp+0x2a>
    81ac:	e0f7      	b.n	839e <__ieee754_exp+0x21a>
    81ae:	0031      	movs	r1, r6
    81b0:	2c00      	cmp	r4, #0
    81b2:	d078      	beq.n	82a6 <__ieee754_exp+0x122>
    81b4:	2000      	movs	r0, #0
    81b6:	2100      	movs	r1, #0
    81b8:	e075      	b.n	82a6 <__ieee754_exp+0x122>
    81ba:	4a8d      	ldr	r2, [pc, #564]	; (83f0 <__ieee754_exp+0x26c>)
    81bc:	4293      	cmp	r3, r2
    81be:	d900      	bls.n	81c2 <__ieee754_exp+0x3e>
    81c0:	e0b6      	b.n	8330 <__ieee754_exp+0x1ac>
    81c2:	4a8c      	ldr	r2, [pc, #560]	; (83f4 <__ieee754_exp+0x270>)
    81c4:	4293      	cmp	r3, r2
    81c6:	d800      	bhi.n	81ca <__ieee754_exp+0x46>
    81c8:	e0ca      	b.n	8360 <__ieee754_exp+0x1dc>
    81ca:	2300      	movs	r3, #0
    81cc:	469a      	mov	sl, r3
    81ce:	003a      	movs	r2, r7
    81d0:	0033      	movs	r3, r6
    81d2:	0038      	movs	r0, r7
    81d4:	0031      	movs	r1, r6
    81d6:	f002 fa2d 	bl	a634 <__aeabi_dmul>
    81da:	0004      	movs	r4, r0
    81dc:	000d      	movs	r5, r1
    81de:	4a86      	ldr	r2, [pc, #536]	; (83f8 <__ieee754_exp+0x274>)
    81e0:	4b86      	ldr	r3, [pc, #536]	; (83fc <__ieee754_exp+0x278>)
    81e2:	f002 fa27 	bl	a634 <__aeabi_dmul>
    81e6:	4a86      	ldr	r2, [pc, #536]	; (8400 <__ieee754_exp+0x27c>)
    81e8:	4b86      	ldr	r3, [pc, #536]	; (8404 <__ieee754_exp+0x280>)
    81ea:	f002 fca3 	bl	ab34 <__aeabi_dsub>
    81ee:	0022      	movs	r2, r4
    81f0:	002b      	movs	r3, r5
    81f2:	f002 fa1f 	bl	a634 <__aeabi_dmul>
    81f6:	4a84      	ldr	r2, [pc, #528]	; (8408 <__ieee754_exp+0x284>)
    81f8:	4b84      	ldr	r3, [pc, #528]	; (840c <__ieee754_exp+0x288>)
    81fa:	f001 fad7 	bl	97ac <__aeabi_dadd>
    81fe:	0022      	movs	r2, r4
    8200:	002b      	movs	r3, r5
    8202:	f002 fa17 	bl	a634 <__aeabi_dmul>
    8206:	4a82      	ldr	r2, [pc, #520]	; (8410 <__ieee754_exp+0x28c>)
    8208:	4b82      	ldr	r3, [pc, #520]	; (8414 <__ieee754_exp+0x290>)
    820a:	f002 fc93 	bl	ab34 <__aeabi_dsub>
    820e:	0022      	movs	r2, r4
    8210:	002b      	movs	r3, r5
    8212:	f002 fa0f 	bl	a634 <__aeabi_dmul>
    8216:	4a80      	ldr	r2, [pc, #512]	; (8418 <__ieee754_exp+0x294>)
    8218:	4b80      	ldr	r3, [pc, #512]	; (841c <__ieee754_exp+0x298>)
    821a:	f001 fac7 	bl	97ac <__aeabi_dadd>
    821e:	0022      	movs	r2, r4
    8220:	002b      	movs	r3, r5
    8222:	f002 fa07 	bl	a634 <__aeabi_dmul>
    8226:	0002      	movs	r2, r0
    8228:	000b      	movs	r3, r1
    822a:	0038      	movs	r0, r7
    822c:	0031      	movs	r1, r6
    822e:	f002 fc81 	bl	ab34 <__aeabi_dsub>
    8232:	4653      	mov	r3, sl
    8234:	0004      	movs	r4, r0
    8236:	000d      	movs	r5, r1
    8238:	0002      	movs	r2, r0
    823a:	2b00      	cmp	r3, #0
    823c:	d100      	bne.n	8240 <__ieee754_exp+0xbc>
    823e:	e0b4      	b.n	83aa <__ieee754_exp+0x226>
    8240:	000b      	movs	r3, r1
    8242:	0038      	movs	r0, r7
    8244:	0031      	movs	r1, r6
    8246:	f002 f9f5 	bl	a634 <__aeabi_dmul>
    824a:	000f      	movs	r7, r1
    824c:	2180      	movs	r1, #128	; 0x80
    824e:	0006      	movs	r6, r0
    8250:	0022      	movs	r2, r4
    8252:	002b      	movs	r3, r5
    8254:	2000      	movs	r0, #0
    8256:	05c9      	lsls	r1, r1, #23
    8258:	f002 fc6c 	bl	ab34 <__aeabi_dsub>
    825c:	0002      	movs	r2, r0
    825e:	000b      	movs	r3, r1
    8260:	0030      	movs	r0, r6
    8262:	0039      	movs	r1, r7
    8264:	f001 fdb2 	bl	9dcc <__aeabi_ddiv>
    8268:	0002      	movs	r2, r0
    826a:	000b      	movs	r3, r1
    826c:	9802      	ldr	r0, [sp, #8]
    826e:	9903      	ldr	r1, [sp, #12]
    8270:	f002 fc60 	bl	ab34 <__aeabi_dsub>
    8274:	9a00      	ldr	r2, [sp, #0]
    8276:	9b01      	ldr	r3, [sp, #4]
    8278:	f002 fc5c 	bl	ab34 <__aeabi_dsub>
    827c:	000b      	movs	r3, r1
    827e:	0002      	movs	r2, r0
    8280:	4967      	ldr	r1, [pc, #412]	; (8420 <__ieee754_exp+0x29c>)
    8282:	2000      	movs	r0, #0
    8284:	f002 fc56 	bl	ab34 <__aeabi_dsub>
    8288:	4b66      	ldr	r3, [pc, #408]	; (8424 <__ieee754_exp+0x2a0>)
    828a:	459a      	cmp	sl, r3
    828c:	db00      	blt.n	8290 <__ieee754_exp+0x10c>
    828e:	e07a      	b.n	8386 <__ieee754_exp+0x202>
    8290:	24fa      	movs	r4, #250	; 0xfa
    8292:	00a4      	lsls	r4, r4, #2
    8294:	4454      	add	r4, sl
    8296:	0524      	lsls	r4, r4, #20
    8298:	1863      	adds	r3, r4, r1
    829a:	0019      	movs	r1, r3
    829c:	23b8      	movs	r3, #184	; 0xb8
    829e:	2200      	movs	r2, #0
    82a0:	045b      	lsls	r3, r3, #17
    82a2:	f002 f9c7 	bl	a634 <__aeabi_dmul>
    82a6:	b004      	add	sp, #16
    82a8:	bc04      	pop	{r2}
    82aa:	4692      	mov	sl, r2
    82ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82ae:	4a5e      	ldr	r2, [pc, #376]	; (8428 <__ieee754_exp+0x2a4>)
    82b0:	4b5e      	ldr	r3, [pc, #376]	; (842c <__ieee754_exp+0x2a8>)
    82b2:	0031      	movs	r1, r6
    82b4:	f000 faea 	bl	888c <__aeabi_dcmpgt>
    82b8:	2800      	cmp	r0, #0
    82ba:	d169      	bne.n	8390 <__ieee754_exp+0x20c>
    82bc:	4a5c      	ldr	r2, [pc, #368]	; (8430 <__ieee754_exp+0x2ac>)
    82be:	4b5d      	ldr	r3, [pc, #372]	; (8434 <__ieee754_exp+0x2b0>)
    82c0:	0038      	movs	r0, r7
    82c2:	0031      	movs	r1, r6
    82c4:	f000 face 	bl	8864 <__aeabi_dcmplt>
    82c8:	2800      	cmp	r0, #0
    82ca:	d000      	beq.n	82ce <__ieee754_exp+0x14a>
    82cc:	e772      	b.n	81b4 <__ieee754_exp+0x30>
    82ce:	4b5a      	ldr	r3, [pc, #360]	; (8438 <__ieee754_exp+0x2b4>)
    82d0:	00e4      	lsls	r4, r4, #3
    82d2:	191c      	adds	r4, r3, r4
    82d4:	4a59      	ldr	r2, [pc, #356]	; (843c <__ieee754_exp+0x2b8>)
    82d6:	4b5a      	ldr	r3, [pc, #360]	; (8440 <__ieee754_exp+0x2bc>)
    82d8:	0038      	movs	r0, r7
    82da:	0031      	movs	r1, r6
    82dc:	f002 f9aa 	bl	a634 <__aeabi_dmul>
    82e0:	6822      	ldr	r2, [r4, #0]
    82e2:	6863      	ldr	r3, [r4, #4]
    82e4:	f001 fa62 	bl	97ac <__aeabi_dadd>
    82e8:	f002 ff5a 	bl	b1a0 <__aeabi_d2iz>
    82ec:	4682      	mov	sl, r0
    82ee:	f002 ff8b 	bl	b208 <__aeabi_i2d>
    82f2:	4a54      	ldr	r2, [pc, #336]	; (8444 <__ieee754_exp+0x2c0>)
    82f4:	4b54      	ldr	r3, [pc, #336]	; (8448 <__ieee754_exp+0x2c4>)
    82f6:	0004      	movs	r4, r0
    82f8:	000d      	movs	r5, r1
    82fa:	f002 f99b 	bl	a634 <__aeabi_dmul>
    82fe:	0002      	movs	r2, r0
    8300:	000b      	movs	r3, r1
    8302:	0038      	movs	r0, r7
    8304:	0031      	movs	r1, r6
    8306:	f002 fc15 	bl	ab34 <__aeabi_dsub>
    830a:	4a50      	ldr	r2, [pc, #320]	; (844c <__ieee754_exp+0x2c8>)
    830c:	9000      	str	r0, [sp, #0]
    830e:	9101      	str	r1, [sp, #4]
    8310:	4b4f      	ldr	r3, [pc, #316]	; (8450 <__ieee754_exp+0x2cc>)
    8312:	0020      	movs	r0, r4
    8314:	0029      	movs	r1, r5
    8316:	f002 f98d 	bl	a634 <__aeabi_dmul>
    831a:	9002      	str	r0, [sp, #8]
    831c:	9103      	str	r1, [sp, #12]
    831e:	9a02      	ldr	r2, [sp, #8]
    8320:	9b03      	ldr	r3, [sp, #12]
    8322:	9800      	ldr	r0, [sp, #0]
    8324:	9901      	ldr	r1, [sp, #4]
    8326:	f002 fc05 	bl	ab34 <__aeabi_dsub>
    832a:	0007      	movs	r7, r0
    832c:	000e      	movs	r6, r1
    832e:	e74e      	b.n	81ce <__ieee754_exp+0x4a>
    8330:	4a48      	ldr	r2, [pc, #288]	; (8454 <__ieee754_exp+0x2d0>)
    8332:	4293      	cmp	r3, r2
    8334:	d8cb      	bhi.n	82ce <__ieee754_exp+0x14a>
    8336:	4b48      	ldr	r3, [pc, #288]	; (8458 <__ieee754_exp+0x2d4>)
    8338:	00e5      	lsls	r5, r4, #3
    833a:	195b      	adds	r3, r3, r5
    833c:	681a      	ldr	r2, [r3, #0]
    833e:	685b      	ldr	r3, [r3, #4]
    8340:	0031      	movs	r1, r6
    8342:	f002 fbf7 	bl	ab34 <__aeabi_dsub>
    8346:	4b45      	ldr	r3, [pc, #276]	; (845c <__ieee754_exp+0x2d8>)
    8348:	9000      	str	r0, [sp, #0]
    834a:	9101      	str	r1, [sp, #4]
    834c:	195b      	adds	r3, r3, r5
    834e:	681a      	ldr	r2, [r3, #0]
    8350:	685b      	ldr	r3, [r3, #4]
    8352:	9202      	str	r2, [sp, #8]
    8354:	9303      	str	r3, [sp, #12]
    8356:	2301      	movs	r3, #1
    8358:	1b1b      	subs	r3, r3, r4
    835a:	1b1b      	subs	r3, r3, r4
    835c:	469a      	mov	sl, r3
    835e:	e7de      	b.n	831e <__ieee754_exp+0x19a>
    8360:	4a3f      	ldr	r2, [pc, #252]	; (8460 <__ieee754_exp+0x2dc>)
    8362:	4b40      	ldr	r3, [pc, #256]	; (8464 <__ieee754_exp+0x2e0>)
    8364:	0031      	movs	r1, r6
    8366:	f001 fa21 	bl	97ac <__aeabi_dadd>
    836a:	2200      	movs	r2, #0
    836c:	4b2c      	ldr	r3, [pc, #176]	; (8420 <__ieee754_exp+0x29c>)
    836e:	f000 fa8d 	bl	888c <__aeabi_dcmpgt>
    8372:	2800      	cmp	r0, #0
    8374:	d100      	bne.n	8378 <__ieee754_exp+0x1f4>
    8376:	e728      	b.n	81ca <__ieee754_exp+0x46>
    8378:	2200      	movs	r2, #0
    837a:	4b29      	ldr	r3, [pc, #164]	; (8420 <__ieee754_exp+0x29c>)
    837c:	0038      	movs	r0, r7
    837e:	0031      	movs	r1, r6
    8380:	f001 fa14 	bl	97ac <__aeabi_dadd>
    8384:	e78f      	b.n	82a6 <__ieee754_exp+0x122>
    8386:	4654      	mov	r4, sl
    8388:	0524      	lsls	r4, r4, #20
    838a:	1863      	adds	r3, r4, r1
    838c:	0019      	movs	r1, r3
    838e:	e78a      	b.n	82a6 <__ieee754_exp+0x122>
    8390:	4a33      	ldr	r2, [pc, #204]	; (8460 <__ieee754_exp+0x2dc>)
    8392:	4b34      	ldr	r3, [pc, #208]	; (8464 <__ieee754_exp+0x2e0>)
    8394:	0010      	movs	r0, r2
    8396:	0019      	movs	r1, r3
    8398:	f002 f94c 	bl	a634 <__aeabi_dmul>
    839c:	e783      	b.n	82a6 <__ieee754_exp+0x122>
    839e:	0002      	movs	r2, r0
    83a0:	0033      	movs	r3, r6
    83a2:	0031      	movs	r1, r6
    83a4:	f001 fa02 	bl	97ac <__aeabi_dadd>
    83a8:	e77d      	b.n	82a6 <__ieee754_exp+0x122>
    83aa:	000b      	movs	r3, r1
    83ac:	0038      	movs	r0, r7
    83ae:	0031      	movs	r1, r6
    83b0:	f002 f940 	bl	a634 <__aeabi_dmul>
    83b4:	2380      	movs	r3, #128	; 0x80
    83b6:	9000      	str	r0, [sp, #0]
    83b8:	9101      	str	r1, [sp, #4]
    83ba:	2200      	movs	r2, #0
    83bc:	05db      	lsls	r3, r3, #23
    83be:	0020      	movs	r0, r4
    83c0:	0029      	movs	r1, r5
    83c2:	f002 fbb7 	bl	ab34 <__aeabi_dsub>
    83c6:	0002      	movs	r2, r0
    83c8:	000b      	movs	r3, r1
    83ca:	9800      	ldr	r0, [sp, #0]
    83cc:	9901      	ldr	r1, [sp, #4]
    83ce:	f001 fcfd 	bl	9dcc <__aeabi_ddiv>
    83d2:	003a      	movs	r2, r7
    83d4:	0033      	movs	r3, r6
    83d6:	f002 fbad 	bl	ab34 <__aeabi_dsub>
    83da:	0002      	movs	r2, r0
    83dc:	000b      	movs	r3, r1
    83de:	2000      	movs	r0, #0
    83e0:	490f      	ldr	r1, [pc, #60]	; (8420 <__ieee754_exp+0x29c>)
    83e2:	f002 fba7 	bl	ab34 <__aeabi_dsub>
    83e6:	e75e      	b.n	82a6 <__ieee754_exp+0x122>
    83e8:	40862e41 	.word	0x40862e41
    83ec:	7fefffff 	.word	0x7fefffff
    83f0:	3fd62e42 	.word	0x3fd62e42
    83f4:	3e2fffff 	.word	0x3e2fffff
    83f8:	72bea4d0 	.word	0x72bea4d0
    83fc:	3e663769 	.word	0x3e663769
    8400:	c5d26bf1 	.word	0xc5d26bf1
    8404:	3ebbbd41 	.word	0x3ebbbd41
    8408:	af25de2c 	.word	0xaf25de2c
    840c:	3f11566a 	.word	0x3f11566a
    8410:	16bebd93 	.word	0x16bebd93
    8414:	3f66c16c 	.word	0x3f66c16c
    8418:	5555553e 	.word	0x5555553e
    841c:	3fc55555 	.word	0x3fc55555
    8420:	3ff00000 	.word	0x3ff00000
    8424:	fffffc03 	.word	0xfffffc03
    8428:	fefa39ef 	.word	0xfefa39ef
    842c:	40862e42 	.word	0x40862e42
    8430:	d52d3051 	.word	0xd52d3051
    8434:	c0874910 	.word	0xc0874910
    8438:	00010e00 	.word	0x00010e00
    843c:	652b82fe 	.word	0x652b82fe
    8440:	3ff71547 	.word	0x3ff71547
    8444:	fee00000 	.word	0xfee00000
    8448:	3fe62e42 	.word	0x3fe62e42
    844c:	35793c76 	.word	0x35793c76
    8450:	3dea39ef 	.word	0x3dea39ef
    8454:	3ff0a2b1 	.word	0x3ff0a2b1
    8458:	00010e10 	.word	0x00010e10
    845c:	00010e20 	.word	0x00010e20
    8460:	8800759c 	.word	0x8800759c
    8464:	7e37e43c 	.word	0x7e37e43c

00008468 <__ieee754_sqrtf>:
    8468:	492b      	ldr	r1, [pc, #172]	; (8518 <__ieee754_sqrtf+0xb0>)
    846a:	0042      	lsls	r2, r0, #1
    846c:	b570      	push	{r4, r5, r6, lr}
    846e:	0003      	movs	r3, r0
    8470:	1c04      	adds	r4, r0, #0
    8472:	0852      	lsrs	r2, r2, #1
    8474:	428a      	cmp	r2, r1
    8476:	d83a      	bhi.n	84ee <__ieee754_sqrtf+0x86>
    8478:	2a00      	cmp	r2, #0
    847a:	d037      	beq.n	84ec <__ieee754_sqrtf+0x84>
    847c:	2800      	cmp	r0, #0
    847e:	db3f      	blt.n	8500 <__ieee754_sqrtf+0x98>
    8480:	4926      	ldr	r1, [pc, #152]	; (851c <__ieee754_sqrtf+0xb4>)
    8482:	15c6      	asrs	r6, r0, #23
    8484:	428a      	cmp	r2, r1
    8486:	d80b      	bhi.n	84a0 <__ieee754_sqrtf+0x38>
    8488:	2080      	movs	r0, #128	; 0x80
    848a:	0400      	lsls	r0, r0, #16
    848c:	4220      	tst	r0, r4
    848e:	d13e      	bne.n	850e <__ieee754_sqrtf+0xa6>
    8490:	2200      	movs	r2, #0
    8492:	e000      	b.n	8496 <__ieee754_sqrtf+0x2e>
    8494:	000a      	movs	r2, r1
    8496:	005b      	lsls	r3, r3, #1
    8498:	1c51      	adds	r1, r2, #1
    849a:	4203      	tst	r3, r0
    849c:	d0fa      	beq.n	8494 <__ieee754_sqrtf+0x2c>
    849e:	1ab6      	subs	r6, r6, r2
    84a0:	025b      	lsls	r3, r3, #9
    84a2:	0a5a      	lsrs	r2, r3, #9
    84a4:	2380      	movs	r3, #128	; 0x80
    84a6:	3e7f      	subs	r6, #127	; 0x7f
    84a8:	041b      	lsls	r3, r3, #16
    84aa:	4313      	orrs	r3, r2
    84ac:	07f2      	lsls	r2, r6, #31
    84ae:	d425      	bmi.n	84fc <__ieee754_sqrtf+0x94>
    84b0:	2280      	movs	r2, #128	; 0x80
    84b2:	1070      	asrs	r0, r6, #1
    84b4:	2119      	movs	r1, #25
    84b6:	2600      	movs	r6, #0
    84b8:	2500      	movs	r5, #0
    84ba:	005b      	lsls	r3, r3, #1
    84bc:	0452      	lsls	r2, r2, #17
    84be:	18ac      	adds	r4, r5, r2
    84c0:	429c      	cmp	r4, r3
    84c2:	dc02      	bgt.n	84ca <__ieee754_sqrtf+0x62>
    84c4:	18a5      	adds	r5, r4, r2
    84c6:	1b1b      	subs	r3, r3, r4
    84c8:	18b6      	adds	r6, r6, r2
    84ca:	3901      	subs	r1, #1
    84cc:	005b      	lsls	r3, r3, #1
    84ce:	0852      	lsrs	r2, r2, #1
    84d0:	2900      	cmp	r1, #0
    84d2:	d1f4      	bne.n	84be <__ieee754_sqrtf+0x56>
    84d4:	2b00      	cmp	r3, #0
    84d6:	d002      	beq.n	84de <__ieee754_sqrtf+0x76>
    84d8:	2301      	movs	r3, #1
    84da:	3601      	adds	r6, #1
    84dc:	439e      	bics	r6, r3
    84de:	23fc      	movs	r3, #252	; 0xfc
    84e0:	059b      	lsls	r3, r3, #22
    84e2:	469c      	mov	ip, r3
    84e4:	1076      	asrs	r6, r6, #1
    84e6:	4466      	add	r6, ip
    84e8:	05c0      	lsls	r0, r0, #23
    84ea:	1980      	adds	r0, r0, r6
    84ec:	bd70      	pop	{r4, r5, r6, pc}
    84ee:	1c01      	adds	r1, r0, #0
    84f0:	f000 fdd2 	bl	9098 <__aeabi_fmul>
    84f4:	1c21      	adds	r1, r4, #0
    84f6:	f000 fa4d 	bl	8994 <__aeabi_fadd>
    84fa:	e7f7      	b.n	84ec <__ieee754_sqrtf+0x84>
    84fc:	005b      	lsls	r3, r3, #1
    84fe:	e7d7      	b.n	84b0 <__ieee754_sqrtf+0x48>
    8500:	1c01      	adds	r1, r0, #0
    8502:	f000 fee9 	bl	92d8 <__aeabi_fsub>
    8506:	1c01      	adds	r1, r0, #0
    8508:	f000 fbd6 	bl	8cb8 <__aeabi_fdiv>
    850c:	e7ee      	b.n	84ec <__ieee754_sqrtf+0x84>
    850e:	2201      	movs	r2, #1
    8510:	4252      	negs	r2, r2
    8512:	1ab6      	subs	r6, r6, r2
    8514:	e7c4      	b.n	84a0 <__ieee754_sqrtf+0x38>
    8516:	46c0      	nop			; (mov r8, r8)
    8518:	7f7fffff 	.word	0x7f7fffff
    851c:	007fffff 	.word	0x007fffff

00008520 <finite>:
    8520:	4b03      	ldr	r3, [pc, #12]	; (8530 <finite+0x10>)
    8522:	0048      	lsls	r0, r1, #1
    8524:	469c      	mov	ip, r3
    8526:	0840      	lsrs	r0, r0, #1
    8528:	4460      	add	r0, ip
    852a:	0fc0      	lsrs	r0, r0, #31
    852c:	4770      	bx	lr
    852e:	46c0      	nop			; (mov r8, r8)
    8530:	80100000 	.word	0x80100000

00008534 <matherr>:
    8534:	2000      	movs	r0, #0
    8536:	4770      	bx	lr

00008538 <__gnu_thumb1_case_uqi>:
    8538:	b402      	push	{r1}
    853a:	4671      	mov	r1, lr
    853c:	0849      	lsrs	r1, r1, #1
    853e:	0049      	lsls	r1, r1, #1
    8540:	5c09      	ldrb	r1, [r1, r0]
    8542:	0049      	lsls	r1, r1, #1
    8544:	448e      	add	lr, r1
    8546:	bc02      	pop	{r1}
    8548:	4770      	bx	lr
    854a:	46c0      	nop			; (mov r8, r8)

0000854c <__udivsi3>:
    854c:	2200      	movs	r2, #0
    854e:	0843      	lsrs	r3, r0, #1
    8550:	428b      	cmp	r3, r1
    8552:	d374      	bcc.n	863e <__udivsi3+0xf2>
    8554:	0903      	lsrs	r3, r0, #4
    8556:	428b      	cmp	r3, r1
    8558:	d35f      	bcc.n	861a <__udivsi3+0xce>
    855a:	0a03      	lsrs	r3, r0, #8
    855c:	428b      	cmp	r3, r1
    855e:	d344      	bcc.n	85ea <__udivsi3+0x9e>
    8560:	0b03      	lsrs	r3, r0, #12
    8562:	428b      	cmp	r3, r1
    8564:	d328      	bcc.n	85b8 <__udivsi3+0x6c>
    8566:	0c03      	lsrs	r3, r0, #16
    8568:	428b      	cmp	r3, r1
    856a:	d30d      	bcc.n	8588 <__udivsi3+0x3c>
    856c:	22ff      	movs	r2, #255	; 0xff
    856e:	0209      	lsls	r1, r1, #8
    8570:	ba12      	rev	r2, r2
    8572:	0c03      	lsrs	r3, r0, #16
    8574:	428b      	cmp	r3, r1
    8576:	d302      	bcc.n	857e <__udivsi3+0x32>
    8578:	1212      	asrs	r2, r2, #8
    857a:	0209      	lsls	r1, r1, #8
    857c:	d065      	beq.n	864a <__udivsi3+0xfe>
    857e:	0b03      	lsrs	r3, r0, #12
    8580:	428b      	cmp	r3, r1
    8582:	d319      	bcc.n	85b8 <__udivsi3+0x6c>
    8584:	e000      	b.n	8588 <__udivsi3+0x3c>
    8586:	0a09      	lsrs	r1, r1, #8
    8588:	0bc3      	lsrs	r3, r0, #15
    858a:	428b      	cmp	r3, r1
    858c:	d301      	bcc.n	8592 <__udivsi3+0x46>
    858e:	03cb      	lsls	r3, r1, #15
    8590:	1ac0      	subs	r0, r0, r3
    8592:	4152      	adcs	r2, r2
    8594:	0b83      	lsrs	r3, r0, #14
    8596:	428b      	cmp	r3, r1
    8598:	d301      	bcc.n	859e <__udivsi3+0x52>
    859a:	038b      	lsls	r3, r1, #14
    859c:	1ac0      	subs	r0, r0, r3
    859e:	4152      	adcs	r2, r2
    85a0:	0b43      	lsrs	r3, r0, #13
    85a2:	428b      	cmp	r3, r1
    85a4:	d301      	bcc.n	85aa <__udivsi3+0x5e>
    85a6:	034b      	lsls	r3, r1, #13
    85a8:	1ac0      	subs	r0, r0, r3
    85aa:	4152      	adcs	r2, r2
    85ac:	0b03      	lsrs	r3, r0, #12
    85ae:	428b      	cmp	r3, r1
    85b0:	d301      	bcc.n	85b6 <__udivsi3+0x6a>
    85b2:	030b      	lsls	r3, r1, #12
    85b4:	1ac0      	subs	r0, r0, r3
    85b6:	4152      	adcs	r2, r2
    85b8:	0ac3      	lsrs	r3, r0, #11
    85ba:	428b      	cmp	r3, r1
    85bc:	d301      	bcc.n	85c2 <__udivsi3+0x76>
    85be:	02cb      	lsls	r3, r1, #11
    85c0:	1ac0      	subs	r0, r0, r3
    85c2:	4152      	adcs	r2, r2
    85c4:	0a83      	lsrs	r3, r0, #10
    85c6:	428b      	cmp	r3, r1
    85c8:	d301      	bcc.n	85ce <__udivsi3+0x82>
    85ca:	028b      	lsls	r3, r1, #10
    85cc:	1ac0      	subs	r0, r0, r3
    85ce:	4152      	adcs	r2, r2
    85d0:	0a43      	lsrs	r3, r0, #9
    85d2:	428b      	cmp	r3, r1
    85d4:	d301      	bcc.n	85da <__udivsi3+0x8e>
    85d6:	024b      	lsls	r3, r1, #9
    85d8:	1ac0      	subs	r0, r0, r3
    85da:	4152      	adcs	r2, r2
    85dc:	0a03      	lsrs	r3, r0, #8
    85de:	428b      	cmp	r3, r1
    85e0:	d301      	bcc.n	85e6 <__udivsi3+0x9a>
    85e2:	020b      	lsls	r3, r1, #8
    85e4:	1ac0      	subs	r0, r0, r3
    85e6:	4152      	adcs	r2, r2
    85e8:	d2cd      	bcs.n	8586 <__udivsi3+0x3a>
    85ea:	09c3      	lsrs	r3, r0, #7
    85ec:	428b      	cmp	r3, r1
    85ee:	d301      	bcc.n	85f4 <__udivsi3+0xa8>
    85f0:	01cb      	lsls	r3, r1, #7
    85f2:	1ac0      	subs	r0, r0, r3
    85f4:	4152      	adcs	r2, r2
    85f6:	0983      	lsrs	r3, r0, #6
    85f8:	428b      	cmp	r3, r1
    85fa:	d301      	bcc.n	8600 <__udivsi3+0xb4>
    85fc:	018b      	lsls	r3, r1, #6
    85fe:	1ac0      	subs	r0, r0, r3
    8600:	4152      	adcs	r2, r2
    8602:	0943      	lsrs	r3, r0, #5
    8604:	428b      	cmp	r3, r1
    8606:	d301      	bcc.n	860c <__udivsi3+0xc0>
    8608:	014b      	lsls	r3, r1, #5
    860a:	1ac0      	subs	r0, r0, r3
    860c:	4152      	adcs	r2, r2
    860e:	0903      	lsrs	r3, r0, #4
    8610:	428b      	cmp	r3, r1
    8612:	d301      	bcc.n	8618 <__udivsi3+0xcc>
    8614:	010b      	lsls	r3, r1, #4
    8616:	1ac0      	subs	r0, r0, r3
    8618:	4152      	adcs	r2, r2
    861a:	08c3      	lsrs	r3, r0, #3
    861c:	428b      	cmp	r3, r1
    861e:	d301      	bcc.n	8624 <__udivsi3+0xd8>
    8620:	00cb      	lsls	r3, r1, #3
    8622:	1ac0      	subs	r0, r0, r3
    8624:	4152      	adcs	r2, r2
    8626:	0883      	lsrs	r3, r0, #2
    8628:	428b      	cmp	r3, r1
    862a:	d301      	bcc.n	8630 <__udivsi3+0xe4>
    862c:	008b      	lsls	r3, r1, #2
    862e:	1ac0      	subs	r0, r0, r3
    8630:	4152      	adcs	r2, r2
    8632:	0843      	lsrs	r3, r0, #1
    8634:	428b      	cmp	r3, r1
    8636:	d301      	bcc.n	863c <__udivsi3+0xf0>
    8638:	004b      	lsls	r3, r1, #1
    863a:	1ac0      	subs	r0, r0, r3
    863c:	4152      	adcs	r2, r2
    863e:	1a41      	subs	r1, r0, r1
    8640:	d200      	bcs.n	8644 <__udivsi3+0xf8>
    8642:	4601      	mov	r1, r0
    8644:	4152      	adcs	r2, r2
    8646:	4610      	mov	r0, r2
    8648:	4770      	bx	lr
    864a:	e7ff      	b.n	864c <__udivsi3+0x100>
    864c:	b501      	push	{r0, lr}
    864e:	2000      	movs	r0, #0
    8650:	f000 f8f0 	bl	8834 <__aeabi_idiv0>
    8654:	bd02      	pop	{r1, pc}
    8656:	46c0      	nop			; (mov r8, r8)

00008658 <__aeabi_uidivmod>:
    8658:	2900      	cmp	r1, #0
    865a:	d0f7      	beq.n	864c <__udivsi3+0x100>
    865c:	e776      	b.n	854c <__udivsi3>
    865e:	4770      	bx	lr

00008660 <__divsi3>:
    8660:	4603      	mov	r3, r0
    8662:	430b      	orrs	r3, r1
    8664:	d47f      	bmi.n	8766 <__divsi3+0x106>
    8666:	2200      	movs	r2, #0
    8668:	0843      	lsrs	r3, r0, #1
    866a:	428b      	cmp	r3, r1
    866c:	d374      	bcc.n	8758 <__divsi3+0xf8>
    866e:	0903      	lsrs	r3, r0, #4
    8670:	428b      	cmp	r3, r1
    8672:	d35f      	bcc.n	8734 <__divsi3+0xd4>
    8674:	0a03      	lsrs	r3, r0, #8
    8676:	428b      	cmp	r3, r1
    8678:	d344      	bcc.n	8704 <__divsi3+0xa4>
    867a:	0b03      	lsrs	r3, r0, #12
    867c:	428b      	cmp	r3, r1
    867e:	d328      	bcc.n	86d2 <__divsi3+0x72>
    8680:	0c03      	lsrs	r3, r0, #16
    8682:	428b      	cmp	r3, r1
    8684:	d30d      	bcc.n	86a2 <__divsi3+0x42>
    8686:	22ff      	movs	r2, #255	; 0xff
    8688:	0209      	lsls	r1, r1, #8
    868a:	ba12      	rev	r2, r2
    868c:	0c03      	lsrs	r3, r0, #16
    868e:	428b      	cmp	r3, r1
    8690:	d302      	bcc.n	8698 <__divsi3+0x38>
    8692:	1212      	asrs	r2, r2, #8
    8694:	0209      	lsls	r1, r1, #8
    8696:	d065      	beq.n	8764 <__divsi3+0x104>
    8698:	0b03      	lsrs	r3, r0, #12
    869a:	428b      	cmp	r3, r1
    869c:	d319      	bcc.n	86d2 <__divsi3+0x72>
    869e:	e000      	b.n	86a2 <__divsi3+0x42>
    86a0:	0a09      	lsrs	r1, r1, #8
    86a2:	0bc3      	lsrs	r3, r0, #15
    86a4:	428b      	cmp	r3, r1
    86a6:	d301      	bcc.n	86ac <__divsi3+0x4c>
    86a8:	03cb      	lsls	r3, r1, #15
    86aa:	1ac0      	subs	r0, r0, r3
    86ac:	4152      	adcs	r2, r2
    86ae:	0b83      	lsrs	r3, r0, #14
    86b0:	428b      	cmp	r3, r1
    86b2:	d301      	bcc.n	86b8 <__divsi3+0x58>
    86b4:	038b      	lsls	r3, r1, #14
    86b6:	1ac0      	subs	r0, r0, r3
    86b8:	4152      	adcs	r2, r2
    86ba:	0b43      	lsrs	r3, r0, #13
    86bc:	428b      	cmp	r3, r1
    86be:	d301      	bcc.n	86c4 <__divsi3+0x64>
    86c0:	034b      	lsls	r3, r1, #13
    86c2:	1ac0      	subs	r0, r0, r3
    86c4:	4152      	adcs	r2, r2
    86c6:	0b03      	lsrs	r3, r0, #12
    86c8:	428b      	cmp	r3, r1
    86ca:	d301      	bcc.n	86d0 <__divsi3+0x70>
    86cc:	030b      	lsls	r3, r1, #12
    86ce:	1ac0      	subs	r0, r0, r3
    86d0:	4152      	adcs	r2, r2
    86d2:	0ac3      	lsrs	r3, r0, #11
    86d4:	428b      	cmp	r3, r1
    86d6:	d301      	bcc.n	86dc <__divsi3+0x7c>
    86d8:	02cb      	lsls	r3, r1, #11
    86da:	1ac0      	subs	r0, r0, r3
    86dc:	4152      	adcs	r2, r2
    86de:	0a83      	lsrs	r3, r0, #10
    86e0:	428b      	cmp	r3, r1
    86e2:	d301      	bcc.n	86e8 <__divsi3+0x88>
    86e4:	028b      	lsls	r3, r1, #10
    86e6:	1ac0      	subs	r0, r0, r3
    86e8:	4152      	adcs	r2, r2
    86ea:	0a43      	lsrs	r3, r0, #9
    86ec:	428b      	cmp	r3, r1
    86ee:	d301      	bcc.n	86f4 <__divsi3+0x94>
    86f0:	024b      	lsls	r3, r1, #9
    86f2:	1ac0      	subs	r0, r0, r3
    86f4:	4152      	adcs	r2, r2
    86f6:	0a03      	lsrs	r3, r0, #8
    86f8:	428b      	cmp	r3, r1
    86fa:	d301      	bcc.n	8700 <__divsi3+0xa0>
    86fc:	020b      	lsls	r3, r1, #8
    86fe:	1ac0      	subs	r0, r0, r3
    8700:	4152      	adcs	r2, r2
    8702:	d2cd      	bcs.n	86a0 <__divsi3+0x40>
    8704:	09c3      	lsrs	r3, r0, #7
    8706:	428b      	cmp	r3, r1
    8708:	d301      	bcc.n	870e <__divsi3+0xae>
    870a:	01cb      	lsls	r3, r1, #7
    870c:	1ac0      	subs	r0, r0, r3
    870e:	4152      	adcs	r2, r2
    8710:	0983      	lsrs	r3, r0, #6
    8712:	428b      	cmp	r3, r1
    8714:	d301      	bcc.n	871a <__divsi3+0xba>
    8716:	018b      	lsls	r3, r1, #6
    8718:	1ac0      	subs	r0, r0, r3
    871a:	4152      	adcs	r2, r2
    871c:	0943      	lsrs	r3, r0, #5
    871e:	428b      	cmp	r3, r1
    8720:	d301      	bcc.n	8726 <__divsi3+0xc6>
    8722:	014b      	lsls	r3, r1, #5
    8724:	1ac0      	subs	r0, r0, r3
    8726:	4152      	adcs	r2, r2
    8728:	0903      	lsrs	r3, r0, #4
    872a:	428b      	cmp	r3, r1
    872c:	d301      	bcc.n	8732 <__divsi3+0xd2>
    872e:	010b      	lsls	r3, r1, #4
    8730:	1ac0      	subs	r0, r0, r3
    8732:	4152      	adcs	r2, r2
    8734:	08c3      	lsrs	r3, r0, #3
    8736:	428b      	cmp	r3, r1
    8738:	d301      	bcc.n	873e <__divsi3+0xde>
    873a:	00cb      	lsls	r3, r1, #3
    873c:	1ac0      	subs	r0, r0, r3
    873e:	4152      	adcs	r2, r2
    8740:	0883      	lsrs	r3, r0, #2
    8742:	428b      	cmp	r3, r1
    8744:	d301      	bcc.n	874a <__divsi3+0xea>
    8746:	008b      	lsls	r3, r1, #2
    8748:	1ac0      	subs	r0, r0, r3
    874a:	4152      	adcs	r2, r2
    874c:	0843      	lsrs	r3, r0, #1
    874e:	428b      	cmp	r3, r1
    8750:	d301      	bcc.n	8756 <__divsi3+0xf6>
    8752:	004b      	lsls	r3, r1, #1
    8754:	1ac0      	subs	r0, r0, r3
    8756:	4152      	adcs	r2, r2
    8758:	1a41      	subs	r1, r0, r1
    875a:	d200      	bcs.n	875e <__divsi3+0xfe>
    875c:	4601      	mov	r1, r0
    875e:	4152      	adcs	r2, r2
    8760:	4610      	mov	r0, r2
    8762:	4770      	bx	lr
    8764:	e05d      	b.n	8822 <__divsi3+0x1c2>
    8766:	0fca      	lsrs	r2, r1, #31
    8768:	d000      	beq.n	876c <__divsi3+0x10c>
    876a:	4249      	negs	r1, r1
    876c:	1003      	asrs	r3, r0, #32
    876e:	d300      	bcc.n	8772 <__divsi3+0x112>
    8770:	4240      	negs	r0, r0
    8772:	4053      	eors	r3, r2
    8774:	2200      	movs	r2, #0
    8776:	469c      	mov	ip, r3
    8778:	0903      	lsrs	r3, r0, #4
    877a:	428b      	cmp	r3, r1
    877c:	d32d      	bcc.n	87da <__divsi3+0x17a>
    877e:	0a03      	lsrs	r3, r0, #8
    8780:	428b      	cmp	r3, r1
    8782:	d312      	bcc.n	87aa <__divsi3+0x14a>
    8784:	22fc      	movs	r2, #252	; 0xfc
    8786:	0189      	lsls	r1, r1, #6
    8788:	ba12      	rev	r2, r2
    878a:	0a03      	lsrs	r3, r0, #8
    878c:	428b      	cmp	r3, r1
    878e:	d30c      	bcc.n	87aa <__divsi3+0x14a>
    8790:	0189      	lsls	r1, r1, #6
    8792:	1192      	asrs	r2, r2, #6
    8794:	428b      	cmp	r3, r1
    8796:	d308      	bcc.n	87aa <__divsi3+0x14a>
    8798:	0189      	lsls	r1, r1, #6
    879a:	1192      	asrs	r2, r2, #6
    879c:	428b      	cmp	r3, r1
    879e:	d304      	bcc.n	87aa <__divsi3+0x14a>
    87a0:	0189      	lsls	r1, r1, #6
    87a2:	d03a      	beq.n	881a <__divsi3+0x1ba>
    87a4:	1192      	asrs	r2, r2, #6
    87a6:	e000      	b.n	87aa <__divsi3+0x14a>
    87a8:	0989      	lsrs	r1, r1, #6
    87aa:	09c3      	lsrs	r3, r0, #7
    87ac:	428b      	cmp	r3, r1
    87ae:	d301      	bcc.n	87b4 <__divsi3+0x154>
    87b0:	01cb      	lsls	r3, r1, #7
    87b2:	1ac0      	subs	r0, r0, r3
    87b4:	4152      	adcs	r2, r2
    87b6:	0983      	lsrs	r3, r0, #6
    87b8:	428b      	cmp	r3, r1
    87ba:	d301      	bcc.n	87c0 <__divsi3+0x160>
    87bc:	018b      	lsls	r3, r1, #6
    87be:	1ac0      	subs	r0, r0, r3
    87c0:	4152      	adcs	r2, r2
    87c2:	0943      	lsrs	r3, r0, #5
    87c4:	428b      	cmp	r3, r1
    87c6:	d301      	bcc.n	87cc <__divsi3+0x16c>
    87c8:	014b      	lsls	r3, r1, #5
    87ca:	1ac0      	subs	r0, r0, r3
    87cc:	4152      	adcs	r2, r2
    87ce:	0903      	lsrs	r3, r0, #4
    87d0:	428b      	cmp	r3, r1
    87d2:	d301      	bcc.n	87d8 <__divsi3+0x178>
    87d4:	010b      	lsls	r3, r1, #4
    87d6:	1ac0      	subs	r0, r0, r3
    87d8:	4152      	adcs	r2, r2
    87da:	08c3      	lsrs	r3, r0, #3
    87dc:	428b      	cmp	r3, r1
    87de:	d301      	bcc.n	87e4 <__divsi3+0x184>
    87e0:	00cb      	lsls	r3, r1, #3
    87e2:	1ac0      	subs	r0, r0, r3
    87e4:	4152      	adcs	r2, r2
    87e6:	0883      	lsrs	r3, r0, #2
    87e8:	428b      	cmp	r3, r1
    87ea:	d301      	bcc.n	87f0 <__divsi3+0x190>
    87ec:	008b      	lsls	r3, r1, #2
    87ee:	1ac0      	subs	r0, r0, r3
    87f0:	4152      	adcs	r2, r2
    87f2:	d2d9      	bcs.n	87a8 <__divsi3+0x148>
    87f4:	0843      	lsrs	r3, r0, #1
    87f6:	428b      	cmp	r3, r1
    87f8:	d301      	bcc.n	87fe <__divsi3+0x19e>
    87fa:	004b      	lsls	r3, r1, #1
    87fc:	1ac0      	subs	r0, r0, r3
    87fe:	4152      	adcs	r2, r2
    8800:	1a41      	subs	r1, r0, r1
    8802:	d200      	bcs.n	8806 <__divsi3+0x1a6>
    8804:	4601      	mov	r1, r0
    8806:	4663      	mov	r3, ip
    8808:	4152      	adcs	r2, r2
    880a:	105b      	asrs	r3, r3, #1
    880c:	4610      	mov	r0, r2
    880e:	d301      	bcc.n	8814 <__divsi3+0x1b4>
    8810:	4240      	negs	r0, r0
    8812:	2b00      	cmp	r3, #0
    8814:	d500      	bpl.n	8818 <__divsi3+0x1b8>
    8816:	4249      	negs	r1, r1
    8818:	4770      	bx	lr
    881a:	4663      	mov	r3, ip
    881c:	105b      	asrs	r3, r3, #1
    881e:	d300      	bcc.n	8822 <__divsi3+0x1c2>
    8820:	4240      	negs	r0, r0
    8822:	b501      	push	{r0, lr}
    8824:	2000      	movs	r0, #0
    8826:	f000 f805 	bl	8834 <__aeabi_idiv0>
    882a:	bd02      	pop	{r1, pc}

0000882c <__aeabi_idivmod>:
    882c:	2900      	cmp	r1, #0
    882e:	d0f8      	beq.n	8822 <__divsi3+0x1c2>
    8830:	e716      	b.n	8660 <__divsi3>
    8832:	4770      	bx	lr

00008834 <__aeabi_idiv0>:
    8834:	4770      	bx	lr
    8836:	46c0      	nop			; (mov r8, r8)

00008838 <__aeabi_cdrcmple>:
    8838:	4684      	mov	ip, r0
    883a:	1c10      	adds	r0, r2, #0
    883c:	4662      	mov	r2, ip
    883e:	468c      	mov	ip, r1
    8840:	1c19      	adds	r1, r3, #0
    8842:	4663      	mov	r3, ip
    8844:	e000      	b.n	8848 <__aeabi_cdcmpeq>
    8846:	46c0      	nop			; (mov r8, r8)

00008848 <__aeabi_cdcmpeq>:
    8848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    884a:	f001 fe91 	bl	a570 <__ledf2>
    884e:	2800      	cmp	r0, #0
    8850:	d401      	bmi.n	8856 <__aeabi_cdcmpeq+0xe>
    8852:	2100      	movs	r1, #0
    8854:	42c8      	cmn	r0, r1
    8856:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008858 <__aeabi_dcmpeq>:
    8858:	b510      	push	{r4, lr}
    885a:	f001 fdeb 	bl	a434 <__eqdf2>
    885e:	4240      	negs	r0, r0
    8860:	3001      	adds	r0, #1
    8862:	bd10      	pop	{r4, pc}

00008864 <__aeabi_dcmplt>:
    8864:	b510      	push	{r4, lr}
    8866:	f001 fe83 	bl	a570 <__ledf2>
    886a:	2800      	cmp	r0, #0
    886c:	db01      	blt.n	8872 <__aeabi_dcmplt+0xe>
    886e:	2000      	movs	r0, #0
    8870:	bd10      	pop	{r4, pc}
    8872:	2001      	movs	r0, #1
    8874:	bd10      	pop	{r4, pc}
    8876:	46c0      	nop			; (mov r8, r8)

00008878 <__aeabi_dcmple>:
    8878:	b510      	push	{r4, lr}
    887a:	f001 fe79 	bl	a570 <__ledf2>
    887e:	2800      	cmp	r0, #0
    8880:	dd01      	ble.n	8886 <__aeabi_dcmple+0xe>
    8882:	2000      	movs	r0, #0
    8884:	bd10      	pop	{r4, pc}
    8886:	2001      	movs	r0, #1
    8888:	bd10      	pop	{r4, pc}
    888a:	46c0      	nop			; (mov r8, r8)

0000888c <__aeabi_dcmpgt>:
    888c:	b510      	push	{r4, lr}
    888e:	f001 fe0b 	bl	a4a8 <__gedf2>
    8892:	2800      	cmp	r0, #0
    8894:	dc01      	bgt.n	889a <__aeabi_dcmpgt+0xe>
    8896:	2000      	movs	r0, #0
    8898:	bd10      	pop	{r4, pc}
    889a:	2001      	movs	r0, #1
    889c:	bd10      	pop	{r4, pc}
    889e:	46c0      	nop			; (mov r8, r8)

000088a0 <__aeabi_dcmpge>:
    88a0:	b510      	push	{r4, lr}
    88a2:	f001 fe01 	bl	a4a8 <__gedf2>
    88a6:	2800      	cmp	r0, #0
    88a8:	da01      	bge.n	88ae <__aeabi_dcmpge+0xe>
    88aa:	2000      	movs	r0, #0
    88ac:	bd10      	pop	{r4, pc}
    88ae:	2001      	movs	r0, #1
    88b0:	bd10      	pop	{r4, pc}
    88b2:	46c0      	nop			; (mov r8, r8)

000088b4 <__aeabi_cfrcmple>:
    88b4:	4684      	mov	ip, r0
    88b6:	1c08      	adds	r0, r1, #0
    88b8:	4661      	mov	r1, ip
    88ba:	e7ff      	b.n	88bc <__aeabi_cfcmpeq>

000088bc <__aeabi_cfcmpeq>:
    88bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    88be:	f000 fba9 	bl	9014 <__lesf2>
    88c2:	2800      	cmp	r0, #0
    88c4:	d401      	bmi.n	88ca <__aeabi_cfcmpeq+0xe>
    88c6:	2100      	movs	r1, #0
    88c8:	42c8      	cmn	r0, r1
    88ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000088cc <__aeabi_fcmpeq>:
    88cc:	b510      	push	{r4, lr}
    88ce:	f000 fb3b 	bl	8f48 <__eqsf2>
    88d2:	4240      	negs	r0, r0
    88d4:	3001      	adds	r0, #1
    88d6:	bd10      	pop	{r4, pc}

000088d8 <__aeabi_fcmplt>:
    88d8:	b510      	push	{r4, lr}
    88da:	f000 fb9b 	bl	9014 <__lesf2>
    88de:	2800      	cmp	r0, #0
    88e0:	db01      	blt.n	88e6 <__aeabi_fcmplt+0xe>
    88e2:	2000      	movs	r0, #0
    88e4:	bd10      	pop	{r4, pc}
    88e6:	2001      	movs	r0, #1
    88e8:	bd10      	pop	{r4, pc}
    88ea:	46c0      	nop			; (mov r8, r8)

000088ec <__aeabi_fcmple>:
    88ec:	b510      	push	{r4, lr}
    88ee:	f000 fb91 	bl	9014 <__lesf2>
    88f2:	2800      	cmp	r0, #0
    88f4:	dd01      	ble.n	88fa <__aeabi_fcmple+0xe>
    88f6:	2000      	movs	r0, #0
    88f8:	bd10      	pop	{r4, pc}
    88fa:	2001      	movs	r0, #1
    88fc:	bd10      	pop	{r4, pc}
    88fe:	46c0      	nop			; (mov r8, r8)

00008900 <__aeabi_fcmpgt>:
    8900:	b510      	push	{r4, lr}
    8902:	f000 fb47 	bl	8f94 <__gesf2>
    8906:	2800      	cmp	r0, #0
    8908:	dc01      	bgt.n	890e <__aeabi_fcmpgt+0xe>
    890a:	2000      	movs	r0, #0
    890c:	bd10      	pop	{r4, pc}
    890e:	2001      	movs	r0, #1
    8910:	bd10      	pop	{r4, pc}
    8912:	46c0      	nop			; (mov r8, r8)

00008914 <__aeabi_fcmpge>:
    8914:	b510      	push	{r4, lr}
    8916:	f000 fb3d 	bl	8f94 <__gesf2>
    891a:	2800      	cmp	r0, #0
    891c:	da01      	bge.n	8922 <__aeabi_fcmpge+0xe>
    891e:	2000      	movs	r0, #0
    8920:	bd10      	pop	{r4, pc}
    8922:	2001      	movs	r0, #1
    8924:	bd10      	pop	{r4, pc}
    8926:	46c0      	nop			; (mov r8, r8)

00008928 <__aeabi_f2uiz>:
    8928:	219e      	movs	r1, #158	; 0x9e
    892a:	b510      	push	{r4, lr}
    892c:	05c9      	lsls	r1, r1, #23
    892e:	1c04      	adds	r4, r0, #0
    8930:	f7ff fff0 	bl	8914 <__aeabi_fcmpge>
    8934:	2800      	cmp	r0, #0
    8936:	d103      	bne.n	8940 <__aeabi_f2uiz+0x18>
    8938:	1c20      	adds	r0, r4, #0
    893a:	f000 fe81 	bl	9640 <__aeabi_f2iz>
    893e:	bd10      	pop	{r4, pc}
    8940:	219e      	movs	r1, #158	; 0x9e
    8942:	1c20      	adds	r0, r4, #0
    8944:	05c9      	lsls	r1, r1, #23
    8946:	f000 fcc7 	bl	92d8 <__aeabi_fsub>
    894a:	f000 fe79 	bl	9640 <__aeabi_f2iz>
    894e:	2380      	movs	r3, #128	; 0x80
    8950:	061b      	lsls	r3, r3, #24
    8952:	469c      	mov	ip, r3
    8954:	4460      	add	r0, ip
    8956:	e7f2      	b.n	893e <__aeabi_f2uiz+0x16>

00008958 <__aeabi_d2uiz>:
    8958:	b570      	push	{r4, r5, r6, lr}
    895a:	2200      	movs	r2, #0
    895c:	4b0c      	ldr	r3, [pc, #48]	; (8990 <__aeabi_d2uiz+0x38>)
    895e:	0004      	movs	r4, r0
    8960:	000d      	movs	r5, r1
    8962:	f7ff ff9d 	bl	88a0 <__aeabi_dcmpge>
    8966:	2800      	cmp	r0, #0
    8968:	d104      	bne.n	8974 <__aeabi_d2uiz+0x1c>
    896a:	0020      	movs	r0, r4
    896c:	0029      	movs	r1, r5
    896e:	f002 fc17 	bl	b1a0 <__aeabi_d2iz>
    8972:	bd70      	pop	{r4, r5, r6, pc}
    8974:	4b06      	ldr	r3, [pc, #24]	; (8990 <__aeabi_d2uiz+0x38>)
    8976:	2200      	movs	r2, #0
    8978:	0020      	movs	r0, r4
    897a:	0029      	movs	r1, r5
    897c:	f002 f8da 	bl	ab34 <__aeabi_dsub>
    8980:	f002 fc0e 	bl	b1a0 <__aeabi_d2iz>
    8984:	2380      	movs	r3, #128	; 0x80
    8986:	061b      	lsls	r3, r3, #24
    8988:	469c      	mov	ip, r3
    898a:	4460      	add	r0, ip
    898c:	e7f1      	b.n	8972 <__aeabi_d2uiz+0x1a>
    898e:	46c0      	nop			; (mov r8, r8)
    8990:	41e00000 	.word	0x41e00000

00008994 <__aeabi_fadd>:
    8994:	b5f0      	push	{r4, r5, r6, r7, lr}
    8996:	46c6      	mov	lr, r8
    8998:	024e      	lsls	r6, r1, #9
    899a:	0247      	lsls	r7, r0, #9
    899c:	0a76      	lsrs	r6, r6, #9
    899e:	0a7b      	lsrs	r3, r7, #9
    89a0:	0044      	lsls	r4, r0, #1
    89a2:	0fc5      	lsrs	r5, r0, #31
    89a4:	00f7      	lsls	r7, r6, #3
    89a6:	0048      	lsls	r0, r1, #1
    89a8:	4698      	mov	r8, r3
    89aa:	b500      	push	{lr}
    89ac:	0e24      	lsrs	r4, r4, #24
    89ae:	002a      	movs	r2, r5
    89b0:	00db      	lsls	r3, r3, #3
    89b2:	0e00      	lsrs	r0, r0, #24
    89b4:	0fc9      	lsrs	r1, r1, #31
    89b6:	46bc      	mov	ip, r7
    89b8:	428d      	cmp	r5, r1
    89ba:	d067      	beq.n	8a8c <__aeabi_fadd+0xf8>
    89bc:	1a22      	subs	r2, r4, r0
    89be:	2a00      	cmp	r2, #0
    89c0:	dc00      	bgt.n	89c4 <__aeabi_fadd+0x30>
    89c2:	e0a5      	b.n	8b10 <__aeabi_fadd+0x17c>
    89c4:	2800      	cmp	r0, #0
    89c6:	d13a      	bne.n	8a3e <__aeabi_fadd+0xaa>
    89c8:	2f00      	cmp	r7, #0
    89ca:	d100      	bne.n	89ce <__aeabi_fadd+0x3a>
    89cc:	e093      	b.n	8af6 <__aeabi_fadd+0x162>
    89ce:	1e51      	subs	r1, r2, #1
    89d0:	2900      	cmp	r1, #0
    89d2:	d000      	beq.n	89d6 <__aeabi_fadd+0x42>
    89d4:	e0bc      	b.n	8b50 <__aeabi_fadd+0x1bc>
    89d6:	2401      	movs	r4, #1
    89d8:	1bdb      	subs	r3, r3, r7
    89da:	015a      	lsls	r2, r3, #5
    89dc:	d546      	bpl.n	8a6c <__aeabi_fadd+0xd8>
    89de:	019b      	lsls	r3, r3, #6
    89e0:	099e      	lsrs	r6, r3, #6
    89e2:	0030      	movs	r0, r6
    89e4:	f002 fd66 	bl	b4b4 <__clzsi2>
    89e8:	3805      	subs	r0, #5
    89ea:	4086      	lsls	r6, r0
    89ec:	4284      	cmp	r4, r0
    89ee:	dd00      	ble.n	89f2 <__aeabi_fadd+0x5e>
    89f0:	e09d      	b.n	8b2e <__aeabi_fadd+0x19a>
    89f2:	1b04      	subs	r4, r0, r4
    89f4:	0032      	movs	r2, r6
    89f6:	2020      	movs	r0, #32
    89f8:	3401      	adds	r4, #1
    89fa:	40e2      	lsrs	r2, r4
    89fc:	1b04      	subs	r4, r0, r4
    89fe:	40a6      	lsls	r6, r4
    8a00:	0033      	movs	r3, r6
    8a02:	1e5e      	subs	r6, r3, #1
    8a04:	41b3      	sbcs	r3, r6
    8a06:	2400      	movs	r4, #0
    8a08:	4313      	orrs	r3, r2
    8a0a:	075a      	lsls	r2, r3, #29
    8a0c:	d004      	beq.n	8a18 <__aeabi_fadd+0x84>
    8a0e:	220f      	movs	r2, #15
    8a10:	401a      	ands	r2, r3
    8a12:	2a04      	cmp	r2, #4
    8a14:	d000      	beq.n	8a18 <__aeabi_fadd+0x84>
    8a16:	3304      	adds	r3, #4
    8a18:	015a      	lsls	r2, r3, #5
    8a1a:	d529      	bpl.n	8a70 <__aeabi_fadd+0xdc>
    8a1c:	3401      	adds	r4, #1
    8a1e:	2cff      	cmp	r4, #255	; 0xff
    8a20:	d100      	bne.n	8a24 <__aeabi_fadd+0x90>
    8a22:	e081      	b.n	8b28 <__aeabi_fadd+0x194>
    8a24:	002a      	movs	r2, r5
    8a26:	019b      	lsls	r3, r3, #6
    8a28:	0a5b      	lsrs	r3, r3, #9
    8a2a:	b2e4      	uxtb	r4, r4
    8a2c:	025b      	lsls	r3, r3, #9
    8a2e:	05e4      	lsls	r4, r4, #23
    8a30:	0a58      	lsrs	r0, r3, #9
    8a32:	07d2      	lsls	r2, r2, #31
    8a34:	4320      	orrs	r0, r4
    8a36:	4310      	orrs	r0, r2
    8a38:	bc04      	pop	{r2}
    8a3a:	4690      	mov	r8, r2
    8a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a3e:	2cff      	cmp	r4, #255	; 0xff
    8a40:	d0e3      	beq.n	8a0a <__aeabi_fadd+0x76>
    8a42:	2180      	movs	r1, #128	; 0x80
    8a44:	0038      	movs	r0, r7
    8a46:	04c9      	lsls	r1, r1, #19
    8a48:	4308      	orrs	r0, r1
    8a4a:	4684      	mov	ip, r0
    8a4c:	2a1b      	cmp	r2, #27
    8a4e:	dd00      	ble.n	8a52 <__aeabi_fadd+0xbe>
    8a50:	e082      	b.n	8b58 <__aeabi_fadd+0x1c4>
    8a52:	2020      	movs	r0, #32
    8a54:	4661      	mov	r1, ip
    8a56:	40d1      	lsrs	r1, r2
    8a58:	1a82      	subs	r2, r0, r2
    8a5a:	4660      	mov	r0, ip
    8a5c:	4090      	lsls	r0, r2
    8a5e:	0002      	movs	r2, r0
    8a60:	1e50      	subs	r0, r2, #1
    8a62:	4182      	sbcs	r2, r0
    8a64:	430a      	orrs	r2, r1
    8a66:	1a9b      	subs	r3, r3, r2
    8a68:	015a      	lsls	r2, r3, #5
    8a6a:	d4b8      	bmi.n	89de <__aeabi_fadd+0x4a>
    8a6c:	075a      	lsls	r2, r3, #29
    8a6e:	d1ce      	bne.n	8a0e <__aeabi_fadd+0x7a>
    8a70:	08de      	lsrs	r6, r3, #3
    8a72:	002a      	movs	r2, r5
    8a74:	2cff      	cmp	r4, #255	; 0xff
    8a76:	d13a      	bne.n	8aee <__aeabi_fadd+0x15a>
    8a78:	2e00      	cmp	r6, #0
    8a7a:	d100      	bne.n	8a7e <__aeabi_fadd+0xea>
    8a7c:	e0ae      	b.n	8bdc <__aeabi_fadd+0x248>
    8a7e:	2380      	movs	r3, #128	; 0x80
    8a80:	03db      	lsls	r3, r3, #15
    8a82:	4333      	orrs	r3, r6
    8a84:	025b      	lsls	r3, r3, #9
    8a86:	0a5b      	lsrs	r3, r3, #9
    8a88:	24ff      	movs	r4, #255	; 0xff
    8a8a:	e7cf      	b.n	8a2c <__aeabi_fadd+0x98>
    8a8c:	1a21      	subs	r1, r4, r0
    8a8e:	2900      	cmp	r1, #0
    8a90:	dd52      	ble.n	8b38 <__aeabi_fadd+0x1a4>
    8a92:	2800      	cmp	r0, #0
    8a94:	d031      	beq.n	8afa <__aeabi_fadd+0x166>
    8a96:	2cff      	cmp	r4, #255	; 0xff
    8a98:	d0b7      	beq.n	8a0a <__aeabi_fadd+0x76>
    8a9a:	2080      	movs	r0, #128	; 0x80
    8a9c:	003e      	movs	r6, r7
    8a9e:	04c0      	lsls	r0, r0, #19
    8aa0:	4306      	orrs	r6, r0
    8aa2:	46b4      	mov	ip, r6
    8aa4:	291b      	cmp	r1, #27
    8aa6:	dd00      	ble.n	8aaa <__aeabi_fadd+0x116>
    8aa8:	e0aa      	b.n	8c00 <__aeabi_fadd+0x26c>
    8aaa:	2620      	movs	r6, #32
    8aac:	4660      	mov	r0, ip
    8aae:	40c8      	lsrs	r0, r1
    8ab0:	1a71      	subs	r1, r6, r1
    8ab2:	4666      	mov	r6, ip
    8ab4:	408e      	lsls	r6, r1
    8ab6:	0031      	movs	r1, r6
    8ab8:	1e4e      	subs	r6, r1, #1
    8aba:	41b1      	sbcs	r1, r6
    8abc:	4301      	orrs	r1, r0
    8abe:	185b      	adds	r3, r3, r1
    8ac0:	0159      	lsls	r1, r3, #5
    8ac2:	d5d3      	bpl.n	8a6c <__aeabi_fadd+0xd8>
    8ac4:	3401      	adds	r4, #1
    8ac6:	2cff      	cmp	r4, #255	; 0xff
    8ac8:	d100      	bne.n	8acc <__aeabi_fadd+0x138>
    8aca:	e087      	b.n	8bdc <__aeabi_fadd+0x248>
    8acc:	2201      	movs	r2, #1
    8ace:	4978      	ldr	r1, [pc, #480]	; (8cb0 <__aeabi_fadd+0x31c>)
    8ad0:	401a      	ands	r2, r3
    8ad2:	085b      	lsrs	r3, r3, #1
    8ad4:	400b      	ands	r3, r1
    8ad6:	4313      	orrs	r3, r2
    8ad8:	e797      	b.n	8a0a <__aeabi_fadd+0x76>
    8ada:	2c00      	cmp	r4, #0
    8adc:	d000      	beq.n	8ae0 <__aeabi_fadd+0x14c>
    8ade:	e0a7      	b.n	8c30 <__aeabi_fadd+0x29c>
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	d000      	beq.n	8ae6 <__aeabi_fadd+0x152>
    8ae4:	e0b6      	b.n	8c54 <__aeabi_fadd+0x2c0>
    8ae6:	1e3b      	subs	r3, r7, #0
    8ae8:	d162      	bne.n	8bb0 <__aeabi_fadd+0x21c>
    8aea:	2600      	movs	r6, #0
    8aec:	2200      	movs	r2, #0
    8aee:	0273      	lsls	r3, r6, #9
    8af0:	0a5b      	lsrs	r3, r3, #9
    8af2:	b2e4      	uxtb	r4, r4
    8af4:	e79a      	b.n	8a2c <__aeabi_fadd+0x98>
    8af6:	0014      	movs	r4, r2
    8af8:	e787      	b.n	8a0a <__aeabi_fadd+0x76>
    8afa:	2f00      	cmp	r7, #0
    8afc:	d04d      	beq.n	8b9a <__aeabi_fadd+0x206>
    8afe:	1e48      	subs	r0, r1, #1
    8b00:	2800      	cmp	r0, #0
    8b02:	d157      	bne.n	8bb4 <__aeabi_fadd+0x220>
    8b04:	4463      	add	r3, ip
    8b06:	2401      	movs	r4, #1
    8b08:	015a      	lsls	r2, r3, #5
    8b0a:	d5af      	bpl.n	8a6c <__aeabi_fadd+0xd8>
    8b0c:	2402      	movs	r4, #2
    8b0e:	e7dd      	b.n	8acc <__aeabi_fadd+0x138>
    8b10:	2a00      	cmp	r2, #0
    8b12:	d124      	bne.n	8b5e <__aeabi_fadd+0x1ca>
    8b14:	1c62      	adds	r2, r4, #1
    8b16:	b2d2      	uxtb	r2, r2
    8b18:	2a01      	cmp	r2, #1
    8b1a:	ddde      	ble.n	8ada <__aeabi_fadd+0x146>
    8b1c:	1bde      	subs	r6, r3, r7
    8b1e:	0172      	lsls	r2, r6, #5
    8b20:	d535      	bpl.n	8b8e <__aeabi_fadd+0x1fa>
    8b22:	1afe      	subs	r6, r7, r3
    8b24:	000d      	movs	r5, r1
    8b26:	e75c      	b.n	89e2 <__aeabi_fadd+0x4e>
    8b28:	002a      	movs	r2, r5
    8b2a:	2300      	movs	r3, #0
    8b2c:	e77e      	b.n	8a2c <__aeabi_fadd+0x98>
    8b2e:	0033      	movs	r3, r6
    8b30:	4a60      	ldr	r2, [pc, #384]	; (8cb4 <__aeabi_fadd+0x320>)
    8b32:	1a24      	subs	r4, r4, r0
    8b34:	4013      	ands	r3, r2
    8b36:	e768      	b.n	8a0a <__aeabi_fadd+0x76>
    8b38:	2900      	cmp	r1, #0
    8b3a:	d163      	bne.n	8c04 <__aeabi_fadd+0x270>
    8b3c:	1c61      	adds	r1, r4, #1
    8b3e:	b2c8      	uxtb	r0, r1
    8b40:	2801      	cmp	r0, #1
    8b42:	dd4e      	ble.n	8be2 <__aeabi_fadd+0x24e>
    8b44:	29ff      	cmp	r1, #255	; 0xff
    8b46:	d049      	beq.n	8bdc <__aeabi_fadd+0x248>
    8b48:	4463      	add	r3, ip
    8b4a:	085b      	lsrs	r3, r3, #1
    8b4c:	000c      	movs	r4, r1
    8b4e:	e75c      	b.n	8a0a <__aeabi_fadd+0x76>
    8b50:	2aff      	cmp	r2, #255	; 0xff
    8b52:	d041      	beq.n	8bd8 <__aeabi_fadd+0x244>
    8b54:	000a      	movs	r2, r1
    8b56:	e779      	b.n	8a4c <__aeabi_fadd+0xb8>
    8b58:	2201      	movs	r2, #1
    8b5a:	1a9b      	subs	r3, r3, r2
    8b5c:	e784      	b.n	8a68 <__aeabi_fadd+0xd4>
    8b5e:	2c00      	cmp	r4, #0
    8b60:	d01d      	beq.n	8b9e <__aeabi_fadd+0x20a>
    8b62:	28ff      	cmp	r0, #255	; 0xff
    8b64:	d022      	beq.n	8bac <__aeabi_fadd+0x218>
    8b66:	2480      	movs	r4, #128	; 0x80
    8b68:	04e4      	lsls	r4, r4, #19
    8b6a:	4252      	negs	r2, r2
    8b6c:	4323      	orrs	r3, r4
    8b6e:	2a1b      	cmp	r2, #27
    8b70:	dd00      	ble.n	8b74 <__aeabi_fadd+0x1e0>
    8b72:	e08a      	b.n	8c8a <__aeabi_fadd+0x2f6>
    8b74:	001c      	movs	r4, r3
    8b76:	2520      	movs	r5, #32
    8b78:	40d4      	lsrs	r4, r2
    8b7a:	1aaa      	subs	r2, r5, r2
    8b7c:	4093      	lsls	r3, r2
    8b7e:	1e5a      	subs	r2, r3, #1
    8b80:	4193      	sbcs	r3, r2
    8b82:	4323      	orrs	r3, r4
    8b84:	4662      	mov	r2, ip
    8b86:	0004      	movs	r4, r0
    8b88:	1ad3      	subs	r3, r2, r3
    8b8a:	000d      	movs	r5, r1
    8b8c:	e725      	b.n	89da <__aeabi_fadd+0x46>
    8b8e:	2e00      	cmp	r6, #0
    8b90:	d000      	beq.n	8b94 <__aeabi_fadd+0x200>
    8b92:	e726      	b.n	89e2 <__aeabi_fadd+0x4e>
    8b94:	2200      	movs	r2, #0
    8b96:	2400      	movs	r4, #0
    8b98:	e7a9      	b.n	8aee <__aeabi_fadd+0x15a>
    8b9a:	000c      	movs	r4, r1
    8b9c:	e735      	b.n	8a0a <__aeabi_fadd+0x76>
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	d04d      	beq.n	8c3e <__aeabi_fadd+0x2aa>
    8ba2:	43d2      	mvns	r2, r2
    8ba4:	2a00      	cmp	r2, #0
    8ba6:	d0ed      	beq.n	8b84 <__aeabi_fadd+0x1f0>
    8ba8:	28ff      	cmp	r0, #255	; 0xff
    8baa:	d1e0      	bne.n	8b6e <__aeabi_fadd+0x1da>
    8bac:	4663      	mov	r3, ip
    8bae:	24ff      	movs	r4, #255	; 0xff
    8bb0:	000d      	movs	r5, r1
    8bb2:	e72a      	b.n	8a0a <__aeabi_fadd+0x76>
    8bb4:	29ff      	cmp	r1, #255	; 0xff
    8bb6:	d00f      	beq.n	8bd8 <__aeabi_fadd+0x244>
    8bb8:	0001      	movs	r1, r0
    8bba:	e773      	b.n	8aa4 <__aeabi_fadd+0x110>
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d061      	beq.n	8c84 <__aeabi_fadd+0x2f0>
    8bc0:	24ff      	movs	r4, #255	; 0xff
    8bc2:	2f00      	cmp	r7, #0
    8bc4:	d100      	bne.n	8bc8 <__aeabi_fadd+0x234>
    8bc6:	e720      	b.n	8a0a <__aeabi_fadd+0x76>
    8bc8:	2280      	movs	r2, #128	; 0x80
    8bca:	4641      	mov	r1, r8
    8bcc:	03d2      	lsls	r2, r2, #15
    8bce:	4211      	tst	r1, r2
    8bd0:	d002      	beq.n	8bd8 <__aeabi_fadd+0x244>
    8bd2:	4216      	tst	r6, r2
    8bd4:	d100      	bne.n	8bd8 <__aeabi_fadd+0x244>
    8bd6:	003b      	movs	r3, r7
    8bd8:	24ff      	movs	r4, #255	; 0xff
    8bda:	e716      	b.n	8a0a <__aeabi_fadd+0x76>
    8bdc:	24ff      	movs	r4, #255	; 0xff
    8bde:	2300      	movs	r3, #0
    8be0:	e724      	b.n	8a2c <__aeabi_fadd+0x98>
    8be2:	2c00      	cmp	r4, #0
    8be4:	d1ea      	bne.n	8bbc <__aeabi_fadd+0x228>
    8be6:	2b00      	cmp	r3, #0
    8be8:	d058      	beq.n	8c9c <__aeabi_fadd+0x308>
    8bea:	2f00      	cmp	r7, #0
    8bec:	d100      	bne.n	8bf0 <__aeabi_fadd+0x25c>
    8bee:	e70c      	b.n	8a0a <__aeabi_fadd+0x76>
    8bf0:	4463      	add	r3, ip
    8bf2:	015a      	lsls	r2, r3, #5
    8bf4:	d400      	bmi.n	8bf8 <__aeabi_fadd+0x264>
    8bf6:	e739      	b.n	8a6c <__aeabi_fadd+0xd8>
    8bf8:	4a2e      	ldr	r2, [pc, #184]	; (8cb4 <__aeabi_fadd+0x320>)
    8bfa:	000c      	movs	r4, r1
    8bfc:	4013      	ands	r3, r2
    8bfe:	e704      	b.n	8a0a <__aeabi_fadd+0x76>
    8c00:	2101      	movs	r1, #1
    8c02:	e75c      	b.n	8abe <__aeabi_fadd+0x12a>
    8c04:	2c00      	cmp	r4, #0
    8c06:	d11e      	bne.n	8c46 <__aeabi_fadd+0x2b2>
    8c08:	2b00      	cmp	r3, #0
    8c0a:	d040      	beq.n	8c8e <__aeabi_fadd+0x2fa>
    8c0c:	43c9      	mvns	r1, r1
    8c0e:	2900      	cmp	r1, #0
    8c10:	d00b      	beq.n	8c2a <__aeabi_fadd+0x296>
    8c12:	28ff      	cmp	r0, #255	; 0xff
    8c14:	d036      	beq.n	8c84 <__aeabi_fadd+0x2f0>
    8c16:	291b      	cmp	r1, #27
    8c18:	dc47      	bgt.n	8caa <__aeabi_fadd+0x316>
    8c1a:	001c      	movs	r4, r3
    8c1c:	2620      	movs	r6, #32
    8c1e:	40cc      	lsrs	r4, r1
    8c20:	1a71      	subs	r1, r6, r1
    8c22:	408b      	lsls	r3, r1
    8c24:	1e59      	subs	r1, r3, #1
    8c26:	418b      	sbcs	r3, r1
    8c28:	4323      	orrs	r3, r4
    8c2a:	4463      	add	r3, ip
    8c2c:	0004      	movs	r4, r0
    8c2e:	e747      	b.n	8ac0 <__aeabi_fadd+0x12c>
    8c30:	2b00      	cmp	r3, #0
    8c32:	d118      	bne.n	8c66 <__aeabi_fadd+0x2d2>
    8c34:	1e3b      	subs	r3, r7, #0
    8c36:	d02d      	beq.n	8c94 <__aeabi_fadd+0x300>
    8c38:	000d      	movs	r5, r1
    8c3a:	24ff      	movs	r4, #255	; 0xff
    8c3c:	e6e5      	b.n	8a0a <__aeabi_fadd+0x76>
    8c3e:	003b      	movs	r3, r7
    8c40:	0004      	movs	r4, r0
    8c42:	000d      	movs	r5, r1
    8c44:	e6e1      	b.n	8a0a <__aeabi_fadd+0x76>
    8c46:	28ff      	cmp	r0, #255	; 0xff
    8c48:	d01c      	beq.n	8c84 <__aeabi_fadd+0x2f0>
    8c4a:	2480      	movs	r4, #128	; 0x80
    8c4c:	04e4      	lsls	r4, r4, #19
    8c4e:	4249      	negs	r1, r1
    8c50:	4323      	orrs	r3, r4
    8c52:	e7e0      	b.n	8c16 <__aeabi_fadd+0x282>
    8c54:	2f00      	cmp	r7, #0
    8c56:	d100      	bne.n	8c5a <__aeabi_fadd+0x2c6>
    8c58:	e6d7      	b.n	8a0a <__aeabi_fadd+0x76>
    8c5a:	1bde      	subs	r6, r3, r7
    8c5c:	0172      	lsls	r2, r6, #5
    8c5e:	d51f      	bpl.n	8ca0 <__aeabi_fadd+0x30c>
    8c60:	1afb      	subs	r3, r7, r3
    8c62:	000d      	movs	r5, r1
    8c64:	e6d1      	b.n	8a0a <__aeabi_fadd+0x76>
    8c66:	24ff      	movs	r4, #255	; 0xff
    8c68:	2f00      	cmp	r7, #0
    8c6a:	d100      	bne.n	8c6e <__aeabi_fadd+0x2da>
    8c6c:	e6cd      	b.n	8a0a <__aeabi_fadd+0x76>
    8c6e:	2280      	movs	r2, #128	; 0x80
    8c70:	4640      	mov	r0, r8
    8c72:	03d2      	lsls	r2, r2, #15
    8c74:	4210      	tst	r0, r2
    8c76:	d0af      	beq.n	8bd8 <__aeabi_fadd+0x244>
    8c78:	4216      	tst	r6, r2
    8c7a:	d1ad      	bne.n	8bd8 <__aeabi_fadd+0x244>
    8c7c:	003b      	movs	r3, r7
    8c7e:	000d      	movs	r5, r1
    8c80:	24ff      	movs	r4, #255	; 0xff
    8c82:	e6c2      	b.n	8a0a <__aeabi_fadd+0x76>
    8c84:	4663      	mov	r3, ip
    8c86:	24ff      	movs	r4, #255	; 0xff
    8c88:	e6bf      	b.n	8a0a <__aeabi_fadd+0x76>
    8c8a:	2301      	movs	r3, #1
    8c8c:	e77a      	b.n	8b84 <__aeabi_fadd+0x1f0>
    8c8e:	003b      	movs	r3, r7
    8c90:	0004      	movs	r4, r0
    8c92:	e6ba      	b.n	8a0a <__aeabi_fadd+0x76>
    8c94:	2680      	movs	r6, #128	; 0x80
    8c96:	2200      	movs	r2, #0
    8c98:	03f6      	lsls	r6, r6, #15
    8c9a:	e6f0      	b.n	8a7e <__aeabi_fadd+0xea>
    8c9c:	003b      	movs	r3, r7
    8c9e:	e6b4      	b.n	8a0a <__aeabi_fadd+0x76>
    8ca0:	1e33      	subs	r3, r6, #0
    8ca2:	d000      	beq.n	8ca6 <__aeabi_fadd+0x312>
    8ca4:	e6e2      	b.n	8a6c <__aeabi_fadd+0xd8>
    8ca6:	2200      	movs	r2, #0
    8ca8:	e721      	b.n	8aee <__aeabi_fadd+0x15a>
    8caa:	2301      	movs	r3, #1
    8cac:	e7bd      	b.n	8c2a <__aeabi_fadd+0x296>
    8cae:	46c0      	nop			; (mov r8, r8)
    8cb0:	7dffffff 	.word	0x7dffffff
    8cb4:	fbffffff 	.word	0xfbffffff

00008cb8 <__aeabi_fdiv>:
    8cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cba:	4657      	mov	r7, sl
    8cbc:	464e      	mov	r6, r9
    8cbe:	46de      	mov	lr, fp
    8cc0:	4645      	mov	r5, r8
    8cc2:	b5e0      	push	{r5, r6, r7, lr}
    8cc4:	0244      	lsls	r4, r0, #9
    8cc6:	0043      	lsls	r3, r0, #1
    8cc8:	0fc6      	lsrs	r6, r0, #31
    8cca:	b083      	sub	sp, #12
    8ccc:	1c0f      	adds	r7, r1, #0
    8cce:	0a64      	lsrs	r4, r4, #9
    8cd0:	0e1b      	lsrs	r3, r3, #24
    8cd2:	46b2      	mov	sl, r6
    8cd4:	d053      	beq.n	8d7e <__aeabi_fdiv+0xc6>
    8cd6:	2bff      	cmp	r3, #255	; 0xff
    8cd8:	d027      	beq.n	8d2a <__aeabi_fdiv+0x72>
    8cda:	2280      	movs	r2, #128	; 0x80
    8cdc:	00e4      	lsls	r4, r4, #3
    8cde:	04d2      	lsls	r2, r2, #19
    8ce0:	4314      	orrs	r4, r2
    8ce2:	227f      	movs	r2, #127	; 0x7f
    8ce4:	4252      	negs	r2, r2
    8ce6:	4690      	mov	r8, r2
    8ce8:	4498      	add	r8, r3
    8cea:	2300      	movs	r3, #0
    8cec:	4699      	mov	r9, r3
    8cee:	469b      	mov	fp, r3
    8cf0:	027d      	lsls	r5, r7, #9
    8cf2:	0078      	lsls	r0, r7, #1
    8cf4:	0ffb      	lsrs	r3, r7, #31
    8cf6:	0a6d      	lsrs	r5, r5, #9
    8cf8:	0e00      	lsrs	r0, r0, #24
    8cfa:	9300      	str	r3, [sp, #0]
    8cfc:	d024      	beq.n	8d48 <__aeabi_fdiv+0x90>
    8cfe:	28ff      	cmp	r0, #255	; 0xff
    8d00:	d046      	beq.n	8d90 <__aeabi_fdiv+0xd8>
    8d02:	2380      	movs	r3, #128	; 0x80
    8d04:	2100      	movs	r1, #0
    8d06:	00ed      	lsls	r5, r5, #3
    8d08:	04db      	lsls	r3, r3, #19
    8d0a:	431d      	orrs	r5, r3
    8d0c:	387f      	subs	r0, #127	; 0x7f
    8d0e:	4647      	mov	r7, r8
    8d10:	1a38      	subs	r0, r7, r0
    8d12:	464f      	mov	r7, r9
    8d14:	430f      	orrs	r7, r1
    8d16:	00bf      	lsls	r7, r7, #2
    8d18:	46b9      	mov	r9, r7
    8d1a:	0033      	movs	r3, r6
    8d1c:	9a00      	ldr	r2, [sp, #0]
    8d1e:	4f87      	ldr	r7, [pc, #540]	; (8f3c <__aeabi_fdiv+0x284>)
    8d20:	4053      	eors	r3, r2
    8d22:	464a      	mov	r2, r9
    8d24:	58ba      	ldr	r2, [r7, r2]
    8d26:	9301      	str	r3, [sp, #4]
    8d28:	4697      	mov	pc, r2
    8d2a:	2c00      	cmp	r4, #0
    8d2c:	d14e      	bne.n	8dcc <__aeabi_fdiv+0x114>
    8d2e:	2308      	movs	r3, #8
    8d30:	4699      	mov	r9, r3
    8d32:	33f7      	adds	r3, #247	; 0xf7
    8d34:	4698      	mov	r8, r3
    8d36:	3bfd      	subs	r3, #253	; 0xfd
    8d38:	469b      	mov	fp, r3
    8d3a:	027d      	lsls	r5, r7, #9
    8d3c:	0078      	lsls	r0, r7, #1
    8d3e:	0ffb      	lsrs	r3, r7, #31
    8d40:	0a6d      	lsrs	r5, r5, #9
    8d42:	0e00      	lsrs	r0, r0, #24
    8d44:	9300      	str	r3, [sp, #0]
    8d46:	d1da      	bne.n	8cfe <__aeabi_fdiv+0x46>
    8d48:	2d00      	cmp	r5, #0
    8d4a:	d126      	bne.n	8d9a <__aeabi_fdiv+0xe2>
    8d4c:	2000      	movs	r0, #0
    8d4e:	2101      	movs	r1, #1
    8d50:	0033      	movs	r3, r6
    8d52:	9a00      	ldr	r2, [sp, #0]
    8d54:	4f7a      	ldr	r7, [pc, #488]	; (8f40 <__aeabi_fdiv+0x288>)
    8d56:	4053      	eors	r3, r2
    8d58:	4642      	mov	r2, r8
    8d5a:	1a10      	subs	r0, r2, r0
    8d5c:	464a      	mov	r2, r9
    8d5e:	430a      	orrs	r2, r1
    8d60:	0092      	lsls	r2, r2, #2
    8d62:	58ba      	ldr	r2, [r7, r2]
    8d64:	001d      	movs	r5, r3
    8d66:	4697      	mov	pc, r2
    8d68:	9b00      	ldr	r3, [sp, #0]
    8d6a:	002c      	movs	r4, r5
    8d6c:	469a      	mov	sl, r3
    8d6e:	468b      	mov	fp, r1
    8d70:	465b      	mov	r3, fp
    8d72:	2b02      	cmp	r3, #2
    8d74:	d131      	bne.n	8dda <__aeabi_fdiv+0x122>
    8d76:	4653      	mov	r3, sl
    8d78:	21ff      	movs	r1, #255	; 0xff
    8d7a:	2400      	movs	r4, #0
    8d7c:	e038      	b.n	8df0 <__aeabi_fdiv+0x138>
    8d7e:	2c00      	cmp	r4, #0
    8d80:	d117      	bne.n	8db2 <__aeabi_fdiv+0xfa>
    8d82:	2304      	movs	r3, #4
    8d84:	4699      	mov	r9, r3
    8d86:	2300      	movs	r3, #0
    8d88:	4698      	mov	r8, r3
    8d8a:	3301      	adds	r3, #1
    8d8c:	469b      	mov	fp, r3
    8d8e:	e7af      	b.n	8cf0 <__aeabi_fdiv+0x38>
    8d90:	20ff      	movs	r0, #255	; 0xff
    8d92:	2d00      	cmp	r5, #0
    8d94:	d10b      	bne.n	8dae <__aeabi_fdiv+0xf6>
    8d96:	2102      	movs	r1, #2
    8d98:	e7da      	b.n	8d50 <__aeabi_fdiv+0x98>
    8d9a:	0028      	movs	r0, r5
    8d9c:	f002 fb8a 	bl	b4b4 <__clzsi2>
    8da0:	1f43      	subs	r3, r0, #5
    8da2:	409d      	lsls	r5, r3
    8da4:	2376      	movs	r3, #118	; 0x76
    8da6:	425b      	negs	r3, r3
    8da8:	1a18      	subs	r0, r3, r0
    8daa:	2100      	movs	r1, #0
    8dac:	e7af      	b.n	8d0e <__aeabi_fdiv+0x56>
    8dae:	2103      	movs	r1, #3
    8db0:	e7ad      	b.n	8d0e <__aeabi_fdiv+0x56>
    8db2:	0020      	movs	r0, r4
    8db4:	f002 fb7e 	bl	b4b4 <__clzsi2>
    8db8:	1f43      	subs	r3, r0, #5
    8dba:	409c      	lsls	r4, r3
    8dbc:	2376      	movs	r3, #118	; 0x76
    8dbe:	425b      	negs	r3, r3
    8dc0:	1a1b      	subs	r3, r3, r0
    8dc2:	4698      	mov	r8, r3
    8dc4:	2300      	movs	r3, #0
    8dc6:	4699      	mov	r9, r3
    8dc8:	469b      	mov	fp, r3
    8dca:	e791      	b.n	8cf0 <__aeabi_fdiv+0x38>
    8dcc:	230c      	movs	r3, #12
    8dce:	4699      	mov	r9, r3
    8dd0:	33f3      	adds	r3, #243	; 0xf3
    8dd2:	4698      	mov	r8, r3
    8dd4:	3bfc      	subs	r3, #252	; 0xfc
    8dd6:	469b      	mov	fp, r3
    8dd8:	e78a      	b.n	8cf0 <__aeabi_fdiv+0x38>
    8dda:	2b03      	cmp	r3, #3
    8ddc:	d100      	bne.n	8de0 <__aeabi_fdiv+0x128>
    8dde:	e0a5      	b.n	8f2c <__aeabi_fdiv+0x274>
    8de0:	4655      	mov	r5, sl
    8de2:	2b01      	cmp	r3, #1
    8de4:	d000      	beq.n	8de8 <__aeabi_fdiv+0x130>
    8de6:	e081      	b.n	8eec <__aeabi_fdiv+0x234>
    8de8:	2301      	movs	r3, #1
    8dea:	2100      	movs	r1, #0
    8dec:	2400      	movs	r4, #0
    8dee:	402b      	ands	r3, r5
    8df0:	0264      	lsls	r4, r4, #9
    8df2:	05c9      	lsls	r1, r1, #23
    8df4:	0a60      	lsrs	r0, r4, #9
    8df6:	07db      	lsls	r3, r3, #31
    8df8:	4308      	orrs	r0, r1
    8dfa:	4318      	orrs	r0, r3
    8dfc:	b003      	add	sp, #12
    8dfe:	bc3c      	pop	{r2, r3, r4, r5}
    8e00:	4690      	mov	r8, r2
    8e02:	4699      	mov	r9, r3
    8e04:	46a2      	mov	sl, r4
    8e06:	46ab      	mov	fp, r5
    8e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e0a:	2480      	movs	r4, #128	; 0x80
    8e0c:	2300      	movs	r3, #0
    8e0e:	03e4      	lsls	r4, r4, #15
    8e10:	21ff      	movs	r1, #255	; 0xff
    8e12:	e7ed      	b.n	8df0 <__aeabi_fdiv+0x138>
    8e14:	21ff      	movs	r1, #255	; 0xff
    8e16:	2400      	movs	r4, #0
    8e18:	e7ea      	b.n	8df0 <__aeabi_fdiv+0x138>
    8e1a:	2301      	movs	r3, #1
    8e1c:	1a59      	subs	r1, r3, r1
    8e1e:	291b      	cmp	r1, #27
    8e20:	dd66      	ble.n	8ef0 <__aeabi_fdiv+0x238>
    8e22:	9a01      	ldr	r2, [sp, #4]
    8e24:	4013      	ands	r3, r2
    8e26:	2100      	movs	r1, #0
    8e28:	2400      	movs	r4, #0
    8e2a:	e7e1      	b.n	8df0 <__aeabi_fdiv+0x138>
    8e2c:	2380      	movs	r3, #128	; 0x80
    8e2e:	03db      	lsls	r3, r3, #15
    8e30:	421c      	tst	r4, r3
    8e32:	d038      	beq.n	8ea6 <__aeabi_fdiv+0x1ee>
    8e34:	421d      	tst	r5, r3
    8e36:	d051      	beq.n	8edc <__aeabi_fdiv+0x224>
    8e38:	431c      	orrs	r4, r3
    8e3a:	0264      	lsls	r4, r4, #9
    8e3c:	0a64      	lsrs	r4, r4, #9
    8e3e:	0033      	movs	r3, r6
    8e40:	21ff      	movs	r1, #255	; 0xff
    8e42:	e7d5      	b.n	8df0 <__aeabi_fdiv+0x138>
    8e44:	0163      	lsls	r3, r4, #5
    8e46:	016c      	lsls	r4, r5, #5
    8e48:	42a3      	cmp	r3, r4
    8e4a:	d23b      	bcs.n	8ec4 <__aeabi_fdiv+0x20c>
    8e4c:	261b      	movs	r6, #27
    8e4e:	2100      	movs	r1, #0
    8e50:	3801      	subs	r0, #1
    8e52:	2501      	movs	r5, #1
    8e54:	001f      	movs	r7, r3
    8e56:	0049      	lsls	r1, r1, #1
    8e58:	005b      	lsls	r3, r3, #1
    8e5a:	2f00      	cmp	r7, #0
    8e5c:	db01      	blt.n	8e62 <__aeabi_fdiv+0x1aa>
    8e5e:	429c      	cmp	r4, r3
    8e60:	d801      	bhi.n	8e66 <__aeabi_fdiv+0x1ae>
    8e62:	1b1b      	subs	r3, r3, r4
    8e64:	4329      	orrs	r1, r5
    8e66:	3e01      	subs	r6, #1
    8e68:	2e00      	cmp	r6, #0
    8e6a:	d1f3      	bne.n	8e54 <__aeabi_fdiv+0x19c>
    8e6c:	001c      	movs	r4, r3
    8e6e:	1e63      	subs	r3, r4, #1
    8e70:	419c      	sbcs	r4, r3
    8e72:	430c      	orrs	r4, r1
    8e74:	0001      	movs	r1, r0
    8e76:	317f      	adds	r1, #127	; 0x7f
    8e78:	2900      	cmp	r1, #0
    8e7a:	ddce      	ble.n	8e1a <__aeabi_fdiv+0x162>
    8e7c:	0763      	lsls	r3, r4, #29
    8e7e:	d004      	beq.n	8e8a <__aeabi_fdiv+0x1d2>
    8e80:	230f      	movs	r3, #15
    8e82:	4023      	ands	r3, r4
    8e84:	2b04      	cmp	r3, #4
    8e86:	d000      	beq.n	8e8a <__aeabi_fdiv+0x1d2>
    8e88:	3404      	adds	r4, #4
    8e8a:	0123      	lsls	r3, r4, #4
    8e8c:	d503      	bpl.n	8e96 <__aeabi_fdiv+0x1de>
    8e8e:	0001      	movs	r1, r0
    8e90:	4b2c      	ldr	r3, [pc, #176]	; (8f44 <__aeabi_fdiv+0x28c>)
    8e92:	3180      	adds	r1, #128	; 0x80
    8e94:	401c      	ands	r4, r3
    8e96:	29fe      	cmp	r1, #254	; 0xfe
    8e98:	dd0d      	ble.n	8eb6 <__aeabi_fdiv+0x1fe>
    8e9a:	2301      	movs	r3, #1
    8e9c:	9a01      	ldr	r2, [sp, #4]
    8e9e:	21ff      	movs	r1, #255	; 0xff
    8ea0:	4013      	ands	r3, r2
    8ea2:	2400      	movs	r4, #0
    8ea4:	e7a4      	b.n	8df0 <__aeabi_fdiv+0x138>
    8ea6:	2380      	movs	r3, #128	; 0x80
    8ea8:	03db      	lsls	r3, r3, #15
    8eaa:	431c      	orrs	r4, r3
    8eac:	0264      	lsls	r4, r4, #9
    8eae:	0a64      	lsrs	r4, r4, #9
    8eb0:	0033      	movs	r3, r6
    8eb2:	21ff      	movs	r1, #255	; 0xff
    8eb4:	e79c      	b.n	8df0 <__aeabi_fdiv+0x138>
    8eb6:	2301      	movs	r3, #1
    8eb8:	9a01      	ldr	r2, [sp, #4]
    8eba:	01a4      	lsls	r4, r4, #6
    8ebc:	0a64      	lsrs	r4, r4, #9
    8ebe:	b2c9      	uxtb	r1, r1
    8ec0:	4013      	ands	r3, r2
    8ec2:	e795      	b.n	8df0 <__aeabi_fdiv+0x138>
    8ec4:	1b1b      	subs	r3, r3, r4
    8ec6:	261a      	movs	r6, #26
    8ec8:	2101      	movs	r1, #1
    8eca:	e7c2      	b.n	8e52 <__aeabi_fdiv+0x19a>
    8ecc:	9b00      	ldr	r3, [sp, #0]
    8ece:	468b      	mov	fp, r1
    8ed0:	469a      	mov	sl, r3
    8ed2:	2400      	movs	r4, #0
    8ed4:	e74c      	b.n	8d70 <__aeabi_fdiv+0xb8>
    8ed6:	0263      	lsls	r3, r4, #9
    8ed8:	d5e5      	bpl.n	8ea6 <__aeabi_fdiv+0x1ee>
    8eda:	2500      	movs	r5, #0
    8edc:	2480      	movs	r4, #128	; 0x80
    8ede:	03e4      	lsls	r4, r4, #15
    8ee0:	432c      	orrs	r4, r5
    8ee2:	0264      	lsls	r4, r4, #9
    8ee4:	0a64      	lsrs	r4, r4, #9
    8ee6:	9b00      	ldr	r3, [sp, #0]
    8ee8:	21ff      	movs	r1, #255	; 0xff
    8eea:	e781      	b.n	8df0 <__aeabi_fdiv+0x138>
    8eec:	9501      	str	r5, [sp, #4]
    8eee:	e7c1      	b.n	8e74 <__aeabi_fdiv+0x1bc>
    8ef0:	0023      	movs	r3, r4
    8ef2:	2020      	movs	r0, #32
    8ef4:	40cb      	lsrs	r3, r1
    8ef6:	1a41      	subs	r1, r0, r1
    8ef8:	408c      	lsls	r4, r1
    8efa:	1e61      	subs	r1, r4, #1
    8efc:	418c      	sbcs	r4, r1
    8efe:	431c      	orrs	r4, r3
    8f00:	0763      	lsls	r3, r4, #29
    8f02:	d004      	beq.n	8f0e <__aeabi_fdiv+0x256>
    8f04:	230f      	movs	r3, #15
    8f06:	4023      	ands	r3, r4
    8f08:	2b04      	cmp	r3, #4
    8f0a:	d000      	beq.n	8f0e <__aeabi_fdiv+0x256>
    8f0c:	3404      	adds	r4, #4
    8f0e:	0163      	lsls	r3, r4, #5
    8f10:	d505      	bpl.n	8f1e <__aeabi_fdiv+0x266>
    8f12:	2301      	movs	r3, #1
    8f14:	9a01      	ldr	r2, [sp, #4]
    8f16:	2101      	movs	r1, #1
    8f18:	4013      	ands	r3, r2
    8f1a:	2400      	movs	r4, #0
    8f1c:	e768      	b.n	8df0 <__aeabi_fdiv+0x138>
    8f1e:	2301      	movs	r3, #1
    8f20:	9a01      	ldr	r2, [sp, #4]
    8f22:	01a4      	lsls	r4, r4, #6
    8f24:	0a64      	lsrs	r4, r4, #9
    8f26:	4013      	ands	r3, r2
    8f28:	2100      	movs	r1, #0
    8f2a:	e761      	b.n	8df0 <__aeabi_fdiv+0x138>
    8f2c:	2380      	movs	r3, #128	; 0x80
    8f2e:	03db      	lsls	r3, r3, #15
    8f30:	431c      	orrs	r4, r3
    8f32:	0264      	lsls	r4, r4, #9
    8f34:	0a64      	lsrs	r4, r4, #9
    8f36:	4653      	mov	r3, sl
    8f38:	21ff      	movs	r1, #255	; 0xff
    8f3a:	e759      	b.n	8df0 <__aeabi_fdiv+0x138>
    8f3c:	00010e30 	.word	0x00010e30
    8f40:	00010e70 	.word	0x00010e70
    8f44:	f7ffffff 	.word	0xf7ffffff

00008f48 <__eqsf2>:
    8f48:	b570      	push	{r4, r5, r6, lr}
    8f4a:	0042      	lsls	r2, r0, #1
    8f4c:	0245      	lsls	r5, r0, #9
    8f4e:	024e      	lsls	r6, r1, #9
    8f50:	004c      	lsls	r4, r1, #1
    8f52:	0fc3      	lsrs	r3, r0, #31
    8f54:	0a6d      	lsrs	r5, r5, #9
    8f56:	0e12      	lsrs	r2, r2, #24
    8f58:	0a76      	lsrs	r6, r6, #9
    8f5a:	0e24      	lsrs	r4, r4, #24
    8f5c:	0fc9      	lsrs	r1, r1, #31
    8f5e:	2001      	movs	r0, #1
    8f60:	2aff      	cmp	r2, #255	; 0xff
    8f62:	d006      	beq.n	8f72 <__eqsf2+0x2a>
    8f64:	2cff      	cmp	r4, #255	; 0xff
    8f66:	d003      	beq.n	8f70 <__eqsf2+0x28>
    8f68:	42a2      	cmp	r2, r4
    8f6a:	d101      	bne.n	8f70 <__eqsf2+0x28>
    8f6c:	42b5      	cmp	r5, r6
    8f6e:	d006      	beq.n	8f7e <__eqsf2+0x36>
    8f70:	bd70      	pop	{r4, r5, r6, pc}
    8f72:	2d00      	cmp	r5, #0
    8f74:	d1fc      	bne.n	8f70 <__eqsf2+0x28>
    8f76:	2cff      	cmp	r4, #255	; 0xff
    8f78:	d1fa      	bne.n	8f70 <__eqsf2+0x28>
    8f7a:	2e00      	cmp	r6, #0
    8f7c:	d1f8      	bne.n	8f70 <__eqsf2+0x28>
    8f7e:	428b      	cmp	r3, r1
    8f80:	d006      	beq.n	8f90 <__eqsf2+0x48>
    8f82:	2001      	movs	r0, #1
    8f84:	2a00      	cmp	r2, #0
    8f86:	d1f3      	bne.n	8f70 <__eqsf2+0x28>
    8f88:	0028      	movs	r0, r5
    8f8a:	1e45      	subs	r5, r0, #1
    8f8c:	41a8      	sbcs	r0, r5
    8f8e:	e7ef      	b.n	8f70 <__eqsf2+0x28>
    8f90:	2000      	movs	r0, #0
    8f92:	e7ed      	b.n	8f70 <__eqsf2+0x28>

00008f94 <__gesf2>:
    8f94:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f96:	0042      	lsls	r2, r0, #1
    8f98:	0245      	lsls	r5, r0, #9
    8f9a:	024c      	lsls	r4, r1, #9
    8f9c:	0fc3      	lsrs	r3, r0, #31
    8f9e:	0048      	lsls	r0, r1, #1
    8fa0:	0a6d      	lsrs	r5, r5, #9
    8fa2:	0e12      	lsrs	r2, r2, #24
    8fa4:	0a64      	lsrs	r4, r4, #9
    8fa6:	0e00      	lsrs	r0, r0, #24
    8fa8:	0fc9      	lsrs	r1, r1, #31
    8faa:	2aff      	cmp	r2, #255	; 0xff
    8fac:	d01e      	beq.n	8fec <__gesf2+0x58>
    8fae:	28ff      	cmp	r0, #255	; 0xff
    8fb0:	d021      	beq.n	8ff6 <__gesf2+0x62>
    8fb2:	2a00      	cmp	r2, #0
    8fb4:	d10a      	bne.n	8fcc <__gesf2+0x38>
    8fb6:	426e      	negs	r6, r5
    8fb8:	416e      	adcs	r6, r5
    8fba:	b2f6      	uxtb	r6, r6
    8fbc:	2800      	cmp	r0, #0
    8fbe:	d10f      	bne.n	8fe0 <__gesf2+0x4c>
    8fc0:	2c00      	cmp	r4, #0
    8fc2:	d10d      	bne.n	8fe0 <__gesf2+0x4c>
    8fc4:	2000      	movs	r0, #0
    8fc6:	2d00      	cmp	r5, #0
    8fc8:	d009      	beq.n	8fde <__gesf2+0x4a>
    8fca:	e005      	b.n	8fd8 <__gesf2+0x44>
    8fcc:	2800      	cmp	r0, #0
    8fce:	d101      	bne.n	8fd4 <__gesf2+0x40>
    8fd0:	2c00      	cmp	r4, #0
    8fd2:	d001      	beq.n	8fd8 <__gesf2+0x44>
    8fd4:	428b      	cmp	r3, r1
    8fd6:	d011      	beq.n	8ffc <__gesf2+0x68>
    8fd8:	2101      	movs	r1, #1
    8fda:	4258      	negs	r0, r3
    8fdc:	4308      	orrs	r0, r1
    8fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fe0:	2e00      	cmp	r6, #0
    8fe2:	d0f7      	beq.n	8fd4 <__gesf2+0x40>
    8fe4:	2001      	movs	r0, #1
    8fe6:	3901      	subs	r1, #1
    8fe8:	4308      	orrs	r0, r1
    8fea:	e7f8      	b.n	8fde <__gesf2+0x4a>
    8fec:	2d00      	cmp	r5, #0
    8fee:	d0de      	beq.n	8fae <__gesf2+0x1a>
    8ff0:	2002      	movs	r0, #2
    8ff2:	4240      	negs	r0, r0
    8ff4:	e7f3      	b.n	8fde <__gesf2+0x4a>
    8ff6:	2c00      	cmp	r4, #0
    8ff8:	d0db      	beq.n	8fb2 <__gesf2+0x1e>
    8ffa:	e7f9      	b.n	8ff0 <__gesf2+0x5c>
    8ffc:	4282      	cmp	r2, r0
    8ffe:	dceb      	bgt.n	8fd8 <__gesf2+0x44>
    9000:	db04      	blt.n	900c <__gesf2+0x78>
    9002:	42a5      	cmp	r5, r4
    9004:	d8e8      	bhi.n	8fd8 <__gesf2+0x44>
    9006:	2000      	movs	r0, #0
    9008:	42a5      	cmp	r5, r4
    900a:	d2e8      	bcs.n	8fde <__gesf2+0x4a>
    900c:	2101      	movs	r1, #1
    900e:	1e58      	subs	r0, r3, #1
    9010:	4308      	orrs	r0, r1
    9012:	e7e4      	b.n	8fde <__gesf2+0x4a>

00009014 <__lesf2>:
    9014:	b5f0      	push	{r4, r5, r6, r7, lr}
    9016:	0042      	lsls	r2, r0, #1
    9018:	024d      	lsls	r5, r1, #9
    901a:	004c      	lsls	r4, r1, #1
    901c:	0246      	lsls	r6, r0, #9
    901e:	0a76      	lsrs	r6, r6, #9
    9020:	0e12      	lsrs	r2, r2, #24
    9022:	0fc3      	lsrs	r3, r0, #31
    9024:	0a6d      	lsrs	r5, r5, #9
    9026:	0e24      	lsrs	r4, r4, #24
    9028:	0fc9      	lsrs	r1, r1, #31
    902a:	2aff      	cmp	r2, #255	; 0xff
    902c:	d016      	beq.n	905c <__lesf2+0x48>
    902e:	2cff      	cmp	r4, #255	; 0xff
    9030:	d018      	beq.n	9064 <__lesf2+0x50>
    9032:	2a00      	cmp	r2, #0
    9034:	d10a      	bne.n	904c <__lesf2+0x38>
    9036:	4270      	negs	r0, r6
    9038:	4170      	adcs	r0, r6
    903a:	b2c0      	uxtb	r0, r0
    903c:	2c00      	cmp	r4, #0
    903e:	d015      	beq.n	906c <__lesf2+0x58>
    9040:	2800      	cmp	r0, #0
    9042:	d005      	beq.n	9050 <__lesf2+0x3c>
    9044:	2001      	movs	r0, #1
    9046:	3901      	subs	r1, #1
    9048:	4308      	orrs	r0, r1
    904a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    904c:	2c00      	cmp	r4, #0
    904e:	d013      	beq.n	9078 <__lesf2+0x64>
    9050:	4299      	cmp	r1, r3
    9052:	d014      	beq.n	907e <__lesf2+0x6a>
    9054:	2001      	movs	r0, #1
    9056:	425b      	negs	r3, r3
    9058:	4318      	orrs	r0, r3
    905a:	e7f6      	b.n	904a <__lesf2+0x36>
    905c:	2002      	movs	r0, #2
    905e:	2e00      	cmp	r6, #0
    9060:	d1f3      	bne.n	904a <__lesf2+0x36>
    9062:	e7e4      	b.n	902e <__lesf2+0x1a>
    9064:	2002      	movs	r0, #2
    9066:	2d00      	cmp	r5, #0
    9068:	d1ef      	bne.n	904a <__lesf2+0x36>
    906a:	e7e2      	b.n	9032 <__lesf2+0x1e>
    906c:	2d00      	cmp	r5, #0
    906e:	d1e7      	bne.n	9040 <__lesf2+0x2c>
    9070:	2000      	movs	r0, #0
    9072:	2e00      	cmp	r6, #0
    9074:	d0e9      	beq.n	904a <__lesf2+0x36>
    9076:	e7ed      	b.n	9054 <__lesf2+0x40>
    9078:	2d00      	cmp	r5, #0
    907a:	d1e9      	bne.n	9050 <__lesf2+0x3c>
    907c:	e7ea      	b.n	9054 <__lesf2+0x40>
    907e:	42a2      	cmp	r2, r4
    9080:	dc06      	bgt.n	9090 <__lesf2+0x7c>
    9082:	dbdf      	blt.n	9044 <__lesf2+0x30>
    9084:	42ae      	cmp	r6, r5
    9086:	d803      	bhi.n	9090 <__lesf2+0x7c>
    9088:	2000      	movs	r0, #0
    908a:	42ae      	cmp	r6, r5
    908c:	d3da      	bcc.n	9044 <__lesf2+0x30>
    908e:	e7dc      	b.n	904a <__lesf2+0x36>
    9090:	2001      	movs	r0, #1
    9092:	4249      	negs	r1, r1
    9094:	4308      	orrs	r0, r1
    9096:	e7d8      	b.n	904a <__lesf2+0x36>

00009098 <__aeabi_fmul>:
    9098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    909a:	4657      	mov	r7, sl
    909c:	464e      	mov	r6, r9
    909e:	4645      	mov	r5, r8
    90a0:	46de      	mov	lr, fp
    90a2:	b5e0      	push	{r5, r6, r7, lr}
    90a4:	0247      	lsls	r7, r0, #9
    90a6:	0046      	lsls	r6, r0, #1
    90a8:	4688      	mov	r8, r1
    90aa:	0a7f      	lsrs	r7, r7, #9
    90ac:	0e36      	lsrs	r6, r6, #24
    90ae:	0fc4      	lsrs	r4, r0, #31
    90b0:	2e00      	cmp	r6, #0
    90b2:	d047      	beq.n	9144 <__aeabi_fmul+0xac>
    90b4:	2eff      	cmp	r6, #255	; 0xff
    90b6:	d024      	beq.n	9102 <__aeabi_fmul+0x6a>
    90b8:	00fb      	lsls	r3, r7, #3
    90ba:	2780      	movs	r7, #128	; 0x80
    90bc:	04ff      	lsls	r7, r7, #19
    90be:	431f      	orrs	r7, r3
    90c0:	2300      	movs	r3, #0
    90c2:	4699      	mov	r9, r3
    90c4:	469a      	mov	sl, r3
    90c6:	3e7f      	subs	r6, #127	; 0x7f
    90c8:	4643      	mov	r3, r8
    90ca:	025d      	lsls	r5, r3, #9
    90cc:	0058      	lsls	r0, r3, #1
    90ce:	0fdb      	lsrs	r3, r3, #31
    90d0:	0a6d      	lsrs	r5, r5, #9
    90d2:	0e00      	lsrs	r0, r0, #24
    90d4:	4698      	mov	r8, r3
    90d6:	d043      	beq.n	9160 <__aeabi_fmul+0xc8>
    90d8:	28ff      	cmp	r0, #255	; 0xff
    90da:	d03b      	beq.n	9154 <__aeabi_fmul+0xbc>
    90dc:	00eb      	lsls	r3, r5, #3
    90de:	2580      	movs	r5, #128	; 0x80
    90e0:	2200      	movs	r2, #0
    90e2:	04ed      	lsls	r5, r5, #19
    90e4:	431d      	orrs	r5, r3
    90e6:	387f      	subs	r0, #127	; 0x7f
    90e8:	1836      	adds	r6, r6, r0
    90ea:	1c73      	adds	r3, r6, #1
    90ec:	4641      	mov	r1, r8
    90ee:	469b      	mov	fp, r3
    90f0:	464b      	mov	r3, r9
    90f2:	4061      	eors	r1, r4
    90f4:	4313      	orrs	r3, r2
    90f6:	2b0f      	cmp	r3, #15
    90f8:	d864      	bhi.n	91c4 <__aeabi_fmul+0x12c>
    90fa:	4875      	ldr	r0, [pc, #468]	; (92d0 <__aeabi_fmul+0x238>)
    90fc:	009b      	lsls	r3, r3, #2
    90fe:	58c3      	ldr	r3, [r0, r3]
    9100:	469f      	mov	pc, r3
    9102:	2f00      	cmp	r7, #0
    9104:	d142      	bne.n	918c <__aeabi_fmul+0xf4>
    9106:	2308      	movs	r3, #8
    9108:	4699      	mov	r9, r3
    910a:	3b06      	subs	r3, #6
    910c:	26ff      	movs	r6, #255	; 0xff
    910e:	469a      	mov	sl, r3
    9110:	e7da      	b.n	90c8 <__aeabi_fmul+0x30>
    9112:	4641      	mov	r1, r8
    9114:	2a02      	cmp	r2, #2
    9116:	d028      	beq.n	916a <__aeabi_fmul+0xd2>
    9118:	2a03      	cmp	r2, #3
    911a:	d100      	bne.n	911e <__aeabi_fmul+0x86>
    911c:	e0ce      	b.n	92bc <__aeabi_fmul+0x224>
    911e:	2a01      	cmp	r2, #1
    9120:	d000      	beq.n	9124 <__aeabi_fmul+0x8c>
    9122:	e0ac      	b.n	927e <__aeabi_fmul+0x1e6>
    9124:	4011      	ands	r1, r2
    9126:	2000      	movs	r0, #0
    9128:	2200      	movs	r2, #0
    912a:	b2cc      	uxtb	r4, r1
    912c:	0240      	lsls	r0, r0, #9
    912e:	05d2      	lsls	r2, r2, #23
    9130:	0a40      	lsrs	r0, r0, #9
    9132:	07e4      	lsls	r4, r4, #31
    9134:	4310      	orrs	r0, r2
    9136:	4320      	orrs	r0, r4
    9138:	bc3c      	pop	{r2, r3, r4, r5}
    913a:	4690      	mov	r8, r2
    913c:	4699      	mov	r9, r3
    913e:	46a2      	mov	sl, r4
    9140:	46ab      	mov	fp, r5
    9142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9144:	2f00      	cmp	r7, #0
    9146:	d115      	bne.n	9174 <__aeabi_fmul+0xdc>
    9148:	2304      	movs	r3, #4
    914a:	4699      	mov	r9, r3
    914c:	3b03      	subs	r3, #3
    914e:	2600      	movs	r6, #0
    9150:	469a      	mov	sl, r3
    9152:	e7b9      	b.n	90c8 <__aeabi_fmul+0x30>
    9154:	20ff      	movs	r0, #255	; 0xff
    9156:	2202      	movs	r2, #2
    9158:	2d00      	cmp	r5, #0
    915a:	d0c5      	beq.n	90e8 <__aeabi_fmul+0x50>
    915c:	2203      	movs	r2, #3
    915e:	e7c3      	b.n	90e8 <__aeabi_fmul+0x50>
    9160:	2d00      	cmp	r5, #0
    9162:	d119      	bne.n	9198 <__aeabi_fmul+0x100>
    9164:	2000      	movs	r0, #0
    9166:	2201      	movs	r2, #1
    9168:	e7be      	b.n	90e8 <__aeabi_fmul+0x50>
    916a:	2401      	movs	r4, #1
    916c:	22ff      	movs	r2, #255	; 0xff
    916e:	400c      	ands	r4, r1
    9170:	2000      	movs	r0, #0
    9172:	e7db      	b.n	912c <__aeabi_fmul+0x94>
    9174:	0038      	movs	r0, r7
    9176:	f002 f99d 	bl	b4b4 <__clzsi2>
    917a:	2676      	movs	r6, #118	; 0x76
    917c:	1f43      	subs	r3, r0, #5
    917e:	409f      	lsls	r7, r3
    9180:	2300      	movs	r3, #0
    9182:	4276      	negs	r6, r6
    9184:	1a36      	subs	r6, r6, r0
    9186:	4699      	mov	r9, r3
    9188:	469a      	mov	sl, r3
    918a:	e79d      	b.n	90c8 <__aeabi_fmul+0x30>
    918c:	230c      	movs	r3, #12
    918e:	4699      	mov	r9, r3
    9190:	3b09      	subs	r3, #9
    9192:	26ff      	movs	r6, #255	; 0xff
    9194:	469a      	mov	sl, r3
    9196:	e797      	b.n	90c8 <__aeabi_fmul+0x30>
    9198:	0028      	movs	r0, r5
    919a:	f002 f98b 	bl	b4b4 <__clzsi2>
    919e:	1f43      	subs	r3, r0, #5
    91a0:	409d      	lsls	r5, r3
    91a2:	2376      	movs	r3, #118	; 0x76
    91a4:	425b      	negs	r3, r3
    91a6:	1a18      	subs	r0, r3, r0
    91a8:	2200      	movs	r2, #0
    91aa:	e79d      	b.n	90e8 <__aeabi_fmul+0x50>
    91ac:	2080      	movs	r0, #128	; 0x80
    91ae:	2400      	movs	r4, #0
    91b0:	03c0      	lsls	r0, r0, #15
    91b2:	22ff      	movs	r2, #255	; 0xff
    91b4:	e7ba      	b.n	912c <__aeabi_fmul+0x94>
    91b6:	003d      	movs	r5, r7
    91b8:	4652      	mov	r2, sl
    91ba:	e7ab      	b.n	9114 <__aeabi_fmul+0x7c>
    91bc:	003d      	movs	r5, r7
    91be:	0021      	movs	r1, r4
    91c0:	4652      	mov	r2, sl
    91c2:	e7a7      	b.n	9114 <__aeabi_fmul+0x7c>
    91c4:	0c3b      	lsrs	r3, r7, #16
    91c6:	469c      	mov	ip, r3
    91c8:	042a      	lsls	r2, r5, #16
    91ca:	0c12      	lsrs	r2, r2, #16
    91cc:	0c2b      	lsrs	r3, r5, #16
    91ce:	0014      	movs	r4, r2
    91d0:	4660      	mov	r0, ip
    91d2:	4665      	mov	r5, ip
    91d4:	043f      	lsls	r7, r7, #16
    91d6:	0c3f      	lsrs	r7, r7, #16
    91d8:	437c      	muls	r4, r7
    91da:	4342      	muls	r2, r0
    91dc:	435d      	muls	r5, r3
    91de:	437b      	muls	r3, r7
    91e0:	0c27      	lsrs	r7, r4, #16
    91e2:	189b      	adds	r3, r3, r2
    91e4:	18ff      	adds	r7, r7, r3
    91e6:	42ba      	cmp	r2, r7
    91e8:	d903      	bls.n	91f2 <__aeabi_fmul+0x15a>
    91ea:	2380      	movs	r3, #128	; 0x80
    91ec:	025b      	lsls	r3, r3, #9
    91ee:	469c      	mov	ip, r3
    91f0:	4465      	add	r5, ip
    91f2:	0424      	lsls	r4, r4, #16
    91f4:	043a      	lsls	r2, r7, #16
    91f6:	0c24      	lsrs	r4, r4, #16
    91f8:	1912      	adds	r2, r2, r4
    91fa:	0193      	lsls	r3, r2, #6
    91fc:	1e5c      	subs	r4, r3, #1
    91fe:	41a3      	sbcs	r3, r4
    9200:	0c3f      	lsrs	r7, r7, #16
    9202:	0e92      	lsrs	r2, r2, #26
    9204:	197d      	adds	r5, r7, r5
    9206:	431a      	orrs	r2, r3
    9208:	01ad      	lsls	r5, r5, #6
    920a:	4315      	orrs	r5, r2
    920c:	012b      	lsls	r3, r5, #4
    920e:	d504      	bpl.n	921a <__aeabi_fmul+0x182>
    9210:	2301      	movs	r3, #1
    9212:	465e      	mov	r6, fp
    9214:	086a      	lsrs	r2, r5, #1
    9216:	401d      	ands	r5, r3
    9218:	4315      	orrs	r5, r2
    921a:	0032      	movs	r2, r6
    921c:	327f      	adds	r2, #127	; 0x7f
    921e:	2a00      	cmp	r2, #0
    9220:	dd25      	ble.n	926e <__aeabi_fmul+0x1d6>
    9222:	076b      	lsls	r3, r5, #29
    9224:	d004      	beq.n	9230 <__aeabi_fmul+0x198>
    9226:	230f      	movs	r3, #15
    9228:	402b      	ands	r3, r5
    922a:	2b04      	cmp	r3, #4
    922c:	d000      	beq.n	9230 <__aeabi_fmul+0x198>
    922e:	3504      	adds	r5, #4
    9230:	012b      	lsls	r3, r5, #4
    9232:	d503      	bpl.n	923c <__aeabi_fmul+0x1a4>
    9234:	0032      	movs	r2, r6
    9236:	4b27      	ldr	r3, [pc, #156]	; (92d4 <__aeabi_fmul+0x23c>)
    9238:	3280      	adds	r2, #128	; 0x80
    923a:	401d      	ands	r5, r3
    923c:	2afe      	cmp	r2, #254	; 0xfe
    923e:	dc94      	bgt.n	916a <__aeabi_fmul+0xd2>
    9240:	2401      	movs	r4, #1
    9242:	01a8      	lsls	r0, r5, #6
    9244:	0a40      	lsrs	r0, r0, #9
    9246:	b2d2      	uxtb	r2, r2
    9248:	400c      	ands	r4, r1
    924a:	e76f      	b.n	912c <__aeabi_fmul+0x94>
    924c:	2080      	movs	r0, #128	; 0x80
    924e:	03c0      	lsls	r0, r0, #15
    9250:	4207      	tst	r7, r0
    9252:	d007      	beq.n	9264 <__aeabi_fmul+0x1cc>
    9254:	4205      	tst	r5, r0
    9256:	d105      	bne.n	9264 <__aeabi_fmul+0x1cc>
    9258:	4328      	orrs	r0, r5
    925a:	0240      	lsls	r0, r0, #9
    925c:	0a40      	lsrs	r0, r0, #9
    925e:	4644      	mov	r4, r8
    9260:	22ff      	movs	r2, #255	; 0xff
    9262:	e763      	b.n	912c <__aeabi_fmul+0x94>
    9264:	4338      	orrs	r0, r7
    9266:	0240      	lsls	r0, r0, #9
    9268:	0a40      	lsrs	r0, r0, #9
    926a:	22ff      	movs	r2, #255	; 0xff
    926c:	e75e      	b.n	912c <__aeabi_fmul+0x94>
    926e:	2401      	movs	r4, #1
    9270:	1aa3      	subs	r3, r4, r2
    9272:	2b1b      	cmp	r3, #27
    9274:	dd05      	ble.n	9282 <__aeabi_fmul+0x1ea>
    9276:	400c      	ands	r4, r1
    9278:	2200      	movs	r2, #0
    927a:	2000      	movs	r0, #0
    927c:	e756      	b.n	912c <__aeabi_fmul+0x94>
    927e:	465e      	mov	r6, fp
    9280:	e7cb      	b.n	921a <__aeabi_fmul+0x182>
    9282:	002a      	movs	r2, r5
    9284:	2020      	movs	r0, #32
    9286:	40da      	lsrs	r2, r3
    9288:	1ac3      	subs	r3, r0, r3
    928a:	409d      	lsls	r5, r3
    928c:	002b      	movs	r3, r5
    928e:	1e5d      	subs	r5, r3, #1
    9290:	41ab      	sbcs	r3, r5
    9292:	4313      	orrs	r3, r2
    9294:	075a      	lsls	r2, r3, #29
    9296:	d004      	beq.n	92a2 <__aeabi_fmul+0x20a>
    9298:	220f      	movs	r2, #15
    929a:	401a      	ands	r2, r3
    929c:	2a04      	cmp	r2, #4
    929e:	d000      	beq.n	92a2 <__aeabi_fmul+0x20a>
    92a0:	3304      	adds	r3, #4
    92a2:	015a      	lsls	r2, r3, #5
    92a4:	d504      	bpl.n	92b0 <__aeabi_fmul+0x218>
    92a6:	2401      	movs	r4, #1
    92a8:	2201      	movs	r2, #1
    92aa:	400c      	ands	r4, r1
    92ac:	2000      	movs	r0, #0
    92ae:	e73d      	b.n	912c <__aeabi_fmul+0x94>
    92b0:	2401      	movs	r4, #1
    92b2:	019b      	lsls	r3, r3, #6
    92b4:	0a58      	lsrs	r0, r3, #9
    92b6:	400c      	ands	r4, r1
    92b8:	2200      	movs	r2, #0
    92ba:	e737      	b.n	912c <__aeabi_fmul+0x94>
    92bc:	2080      	movs	r0, #128	; 0x80
    92be:	2401      	movs	r4, #1
    92c0:	03c0      	lsls	r0, r0, #15
    92c2:	4328      	orrs	r0, r5
    92c4:	0240      	lsls	r0, r0, #9
    92c6:	0a40      	lsrs	r0, r0, #9
    92c8:	400c      	ands	r4, r1
    92ca:	22ff      	movs	r2, #255	; 0xff
    92cc:	e72e      	b.n	912c <__aeabi_fmul+0x94>
    92ce:	46c0      	nop			; (mov r8, r8)
    92d0:	00010eb0 	.word	0x00010eb0
    92d4:	f7ffffff 	.word	0xf7ffffff

000092d8 <__aeabi_fsub>:
    92d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    92da:	464f      	mov	r7, r9
    92dc:	46d6      	mov	lr, sl
    92de:	4646      	mov	r6, r8
    92e0:	0044      	lsls	r4, r0, #1
    92e2:	b5c0      	push	{r6, r7, lr}
    92e4:	0fc2      	lsrs	r2, r0, #31
    92e6:	0247      	lsls	r7, r0, #9
    92e8:	0248      	lsls	r0, r1, #9
    92ea:	0a40      	lsrs	r0, r0, #9
    92ec:	4684      	mov	ip, r0
    92ee:	4666      	mov	r6, ip
    92f0:	0a7b      	lsrs	r3, r7, #9
    92f2:	0048      	lsls	r0, r1, #1
    92f4:	0fc9      	lsrs	r1, r1, #31
    92f6:	469a      	mov	sl, r3
    92f8:	0e24      	lsrs	r4, r4, #24
    92fa:	0015      	movs	r5, r2
    92fc:	00db      	lsls	r3, r3, #3
    92fe:	0e00      	lsrs	r0, r0, #24
    9300:	4689      	mov	r9, r1
    9302:	00f6      	lsls	r6, r6, #3
    9304:	28ff      	cmp	r0, #255	; 0xff
    9306:	d100      	bne.n	930a <__aeabi_fsub+0x32>
    9308:	e08f      	b.n	942a <__aeabi_fsub+0x152>
    930a:	2101      	movs	r1, #1
    930c:	464f      	mov	r7, r9
    930e:	404f      	eors	r7, r1
    9310:	0039      	movs	r1, r7
    9312:	4291      	cmp	r1, r2
    9314:	d066      	beq.n	93e4 <__aeabi_fsub+0x10c>
    9316:	1a22      	subs	r2, r4, r0
    9318:	2a00      	cmp	r2, #0
    931a:	dc00      	bgt.n	931e <__aeabi_fsub+0x46>
    931c:	e09d      	b.n	945a <__aeabi_fsub+0x182>
    931e:	2800      	cmp	r0, #0
    9320:	d13d      	bne.n	939e <__aeabi_fsub+0xc6>
    9322:	2e00      	cmp	r6, #0
    9324:	d100      	bne.n	9328 <__aeabi_fsub+0x50>
    9326:	e08b      	b.n	9440 <__aeabi_fsub+0x168>
    9328:	1e51      	subs	r1, r2, #1
    932a:	2900      	cmp	r1, #0
    932c:	d000      	beq.n	9330 <__aeabi_fsub+0x58>
    932e:	e0b5      	b.n	949c <__aeabi_fsub+0x1c4>
    9330:	2401      	movs	r4, #1
    9332:	1b9b      	subs	r3, r3, r6
    9334:	015a      	lsls	r2, r3, #5
    9336:	d544      	bpl.n	93c2 <__aeabi_fsub+0xea>
    9338:	019b      	lsls	r3, r3, #6
    933a:	099f      	lsrs	r7, r3, #6
    933c:	0038      	movs	r0, r7
    933e:	f002 f8b9 	bl	b4b4 <__clzsi2>
    9342:	3805      	subs	r0, #5
    9344:	4087      	lsls	r7, r0
    9346:	4284      	cmp	r4, r0
    9348:	dd00      	ble.n	934c <__aeabi_fsub+0x74>
    934a:	e096      	b.n	947a <__aeabi_fsub+0x1a2>
    934c:	1b04      	subs	r4, r0, r4
    934e:	003a      	movs	r2, r7
    9350:	2020      	movs	r0, #32
    9352:	3401      	adds	r4, #1
    9354:	40e2      	lsrs	r2, r4
    9356:	1b04      	subs	r4, r0, r4
    9358:	40a7      	lsls	r7, r4
    935a:	003b      	movs	r3, r7
    935c:	1e5f      	subs	r7, r3, #1
    935e:	41bb      	sbcs	r3, r7
    9360:	2400      	movs	r4, #0
    9362:	4313      	orrs	r3, r2
    9364:	075a      	lsls	r2, r3, #29
    9366:	d004      	beq.n	9372 <__aeabi_fsub+0x9a>
    9368:	220f      	movs	r2, #15
    936a:	401a      	ands	r2, r3
    936c:	2a04      	cmp	r2, #4
    936e:	d000      	beq.n	9372 <__aeabi_fsub+0x9a>
    9370:	3304      	adds	r3, #4
    9372:	015a      	lsls	r2, r3, #5
    9374:	d527      	bpl.n	93c6 <__aeabi_fsub+0xee>
    9376:	3401      	adds	r4, #1
    9378:	2cff      	cmp	r4, #255	; 0xff
    937a:	d100      	bne.n	937e <__aeabi_fsub+0xa6>
    937c:	e079      	b.n	9472 <__aeabi_fsub+0x19a>
    937e:	2201      	movs	r2, #1
    9380:	019b      	lsls	r3, r3, #6
    9382:	0a5b      	lsrs	r3, r3, #9
    9384:	b2e4      	uxtb	r4, r4
    9386:	402a      	ands	r2, r5
    9388:	025b      	lsls	r3, r3, #9
    938a:	05e4      	lsls	r4, r4, #23
    938c:	0a58      	lsrs	r0, r3, #9
    938e:	07d2      	lsls	r2, r2, #31
    9390:	4320      	orrs	r0, r4
    9392:	4310      	orrs	r0, r2
    9394:	bc1c      	pop	{r2, r3, r4}
    9396:	4690      	mov	r8, r2
    9398:	4699      	mov	r9, r3
    939a:	46a2      	mov	sl, r4
    939c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    939e:	2cff      	cmp	r4, #255	; 0xff
    93a0:	d0e0      	beq.n	9364 <__aeabi_fsub+0x8c>
    93a2:	2180      	movs	r1, #128	; 0x80
    93a4:	04c9      	lsls	r1, r1, #19
    93a6:	430e      	orrs	r6, r1
    93a8:	2a1b      	cmp	r2, #27
    93aa:	dc7b      	bgt.n	94a4 <__aeabi_fsub+0x1cc>
    93ac:	0031      	movs	r1, r6
    93ae:	2020      	movs	r0, #32
    93b0:	40d1      	lsrs	r1, r2
    93b2:	1a82      	subs	r2, r0, r2
    93b4:	4096      	lsls	r6, r2
    93b6:	1e72      	subs	r2, r6, #1
    93b8:	4196      	sbcs	r6, r2
    93ba:	430e      	orrs	r6, r1
    93bc:	1b9b      	subs	r3, r3, r6
    93be:	015a      	lsls	r2, r3, #5
    93c0:	d4ba      	bmi.n	9338 <__aeabi_fsub+0x60>
    93c2:	075a      	lsls	r2, r3, #29
    93c4:	d1d0      	bne.n	9368 <__aeabi_fsub+0x90>
    93c6:	2201      	movs	r2, #1
    93c8:	08df      	lsrs	r7, r3, #3
    93ca:	402a      	ands	r2, r5
    93cc:	2cff      	cmp	r4, #255	; 0xff
    93ce:	d133      	bne.n	9438 <__aeabi_fsub+0x160>
    93d0:	2f00      	cmp	r7, #0
    93d2:	d100      	bne.n	93d6 <__aeabi_fsub+0xfe>
    93d4:	e0a8      	b.n	9528 <__aeabi_fsub+0x250>
    93d6:	2380      	movs	r3, #128	; 0x80
    93d8:	03db      	lsls	r3, r3, #15
    93da:	433b      	orrs	r3, r7
    93dc:	025b      	lsls	r3, r3, #9
    93de:	0a5b      	lsrs	r3, r3, #9
    93e0:	24ff      	movs	r4, #255	; 0xff
    93e2:	e7d1      	b.n	9388 <__aeabi_fsub+0xb0>
    93e4:	1a21      	subs	r1, r4, r0
    93e6:	2900      	cmp	r1, #0
    93e8:	dd4c      	ble.n	9484 <__aeabi_fsub+0x1ac>
    93ea:	2800      	cmp	r0, #0
    93ec:	d02a      	beq.n	9444 <__aeabi_fsub+0x16c>
    93ee:	2cff      	cmp	r4, #255	; 0xff
    93f0:	d0b8      	beq.n	9364 <__aeabi_fsub+0x8c>
    93f2:	2080      	movs	r0, #128	; 0x80
    93f4:	04c0      	lsls	r0, r0, #19
    93f6:	4306      	orrs	r6, r0
    93f8:	291b      	cmp	r1, #27
    93fa:	dd00      	ble.n	93fe <__aeabi_fsub+0x126>
    93fc:	e0af      	b.n	955e <__aeabi_fsub+0x286>
    93fe:	0030      	movs	r0, r6
    9400:	2720      	movs	r7, #32
    9402:	40c8      	lsrs	r0, r1
    9404:	1a79      	subs	r1, r7, r1
    9406:	408e      	lsls	r6, r1
    9408:	1e71      	subs	r1, r6, #1
    940a:	418e      	sbcs	r6, r1
    940c:	4306      	orrs	r6, r0
    940e:	199b      	adds	r3, r3, r6
    9410:	0159      	lsls	r1, r3, #5
    9412:	d5d6      	bpl.n	93c2 <__aeabi_fsub+0xea>
    9414:	3401      	adds	r4, #1
    9416:	2cff      	cmp	r4, #255	; 0xff
    9418:	d100      	bne.n	941c <__aeabi_fsub+0x144>
    941a:	e085      	b.n	9528 <__aeabi_fsub+0x250>
    941c:	2201      	movs	r2, #1
    941e:	497a      	ldr	r1, [pc, #488]	; (9608 <__aeabi_fsub+0x330>)
    9420:	401a      	ands	r2, r3
    9422:	085b      	lsrs	r3, r3, #1
    9424:	400b      	ands	r3, r1
    9426:	4313      	orrs	r3, r2
    9428:	e79c      	b.n	9364 <__aeabi_fsub+0x8c>
    942a:	2e00      	cmp	r6, #0
    942c:	d000      	beq.n	9430 <__aeabi_fsub+0x158>
    942e:	e770      	b.n	9312 <__aeabi_fsub+0x3a>
    9430:	e76b      	b.n	930a <__aeabi_fsub+0x32>
    9432:	1e3b      	subs	r3, r7, #0
    9434:	d1c5      	bne.n	93c2 <__aeabi_fsub+0xea>
    9436:	2200      	movs	r2, #0
    9438:	027b      	lsls	r3, r7, #9
    943a:	0a5b      	lsrs	r3, r3, #9
    943c:	b2e4      	uxtb	r4, r4
    943e:	e7a3      	b.n	9388 <__aeabi_fsub+0xb0>
    9440:	0014      	movs	r4, r2
    9442:	e78f      	b.n	9364 <__aeabi_fsub+0x8c>
    9444:	2e00      	cmp	r6, #0
    9446:	d04d      	beq.n	94e4 <__aeabi_fsub+0x20c>
    9448:	1e48      	subs	r0, r1, #1
    944a:	2800      	cmp	r0, #0
    944c:	d157      	bne.n	94fe <__aeabi_fsub+0x226>
    944e:	199b      	adds	r3, r3, r6
    9450:	2401      	movs	r4, #1
    9452:	015a      	lsls	r2, r3, #5
    9454:	d5b5      	bpl.n	93c2 <__aeabi_fsub+0xea>
    9456:	2402      	movs	r4, #2
    9458:	e7e0      	b.n	941c <__aeabi_fsub+0x144>
    945a:	2a00      	cmp	r2, #0
    945c:	d125      	bne.n	94aa <__aeabi_fsub+0x1d2>
    945e:	1c62      	adds	r2, r4, #1
    9460:	b2d2      	uxtb	r2, r2
    9462:	2a01      	cmp	r2, #1
    9464:	dd72      	ble.n	954c <__aeabi_fsub+0x274>
    9466:	1b9f      	subs	r7, r3, r6
    9468:	017a      	lsls	r2, r7, #5
    946a:	d535      	bpl.n	94d8 <__aeabi_fsub+0x200>
    946c:	1af7      	subs	r7, r6, r3
    946e:	000d      	movs	r5, r1
    9470:	e764      	b.n	933c <__aeabi_fsub+0x64>
    9472:	2201      	movs	r2, #1
    9474:	2300      	movs	r3, #0
    9476:	402a      	ands	r2, r5
    9478:	e786      	b.n	9388 <__aeabi_fsub+0xb0>
    947a:	003b      	movs	r3, r7
    947c:	4a63      	ldr	r2, [pc, #396]	; (960c <__aeabi_fsub+0x334>)
    947e:	1a24      	subs	r4, r4, r0
    9480:	4013      	ands	r3, r2
    9482:	e76f      	b.n	9364 <__aeabi_fsub+0x8c>
    9484:	2900      	cmp	r1, #0
    9486:	d16c      	bne.n	9562 <__aeabi_fsub+0x28a>
    9488:	1c61      	adds	r1, r4, #1
    948a:	b2c8      	uxtb	r0, r1
    948c:	2801      	cmp	r0, #1
    948e:	dd4e      	ble.n	952e <__aeabi_fsub+0x256>
    9490:	29ff      	cmp	r1, #255	; 0xff
    9492:	d049      	beq.n	9528 <__aeabi_fsub+0x250>
    9494:	199b      	adds	r3, r3, r6
    9496:	085b      	lsrs	r3, r3, #1
    9498:	000c      	movs	r4, r1
    949a:	e763      	b.n	9364 <__aeabi_fsub+0x8c>
    949c:	2aff      	cmp	r2, #255	; 0xff
    949e:	d041      	beq.n	9524 <__aeabi_fsub+0x24c>
    94a0:	000a      	movs	r2, r1
    94a2:	e781      	b.n	93a8 <__aeabi_fsub+0xd0>
    94a4:	2601      	movs	r6, #1
    94a6:	1b9b      	subs	r3, r3, r6
    94a8:	e789      	b.n	93be <__aeabi_fsub+0xe6>
    94aa:	2c00      	cmp	r4, #0
    94ac:	d01c      	beq.n	94e8 <__aeabi_fsub+0x210>
    94ae:	28ff      	cmp	r0, #255	; 0xff
    94b0:	d021      	beq.n	94f6 <__aeabi_fsub+0x21e>
    94b2:	2480      	movs	r4, #128	; 0x80
    94b4:	04e4      	lsls	r4, r4, #19
    94b6:	4252      	negs	r2, r2
    94b8:	4323      	orrs	r3, r4
    94ba:	2a1b      	cmp	r2, #27
    94bc:	dd00      	ble.n	94c0 <__aeabi_fsub+0x1e8>
    94be:	e096      	b.n	95ee <__aeabi_fsub+0x316>
    94c0:	001c      	movs	r4, r3
    94c2:	2520      	movs	r5, #32
    94c4:	40d4      	lsrs	r4, r2
    94c6:	1aaa      	subs	r2, r5, r2
    94c8:	4093      	lsls	r3, r2
    94ca:	1e5a      	subs	r2, r3, #1
    94cc:	4193      	sbcs	r3, r2
    94ce:	4323      	orrs	r3, r4
    94d0:	1af3      	subs	r3, r6, r3
    94d2:	0004      	movs	r4, r0
    94d4:	000d      	movs	r5, r1
    94d6:	e72d      	b.n	9334 <__aeabi_fsub+0x5c>
    94d8:	2f00      	cmp	r7, #0
    94da:	d000      	beq.n	94de <__aeabi_fsub+0x206>
    94dc:	e72e      	b.n	933c <__aeabi_fsub+0x64>
    94de:	2200      	movs	r2, #0
    94e0:	2400      	movs	r4, #0
    94e2:	e7a9      	b.n	9438 <__aeabi_fsub+0x160>
    94e4:	000c      	movs	r4, r1
    94e6:	e73d      	b.n	9364 <__aeabi_fsub+0x8c>
    94e8:	2b00      	cmp	r3, #0
    94ea:	d058      	beq.n	959e <__aeabi_fsub+0x2c6>
    94ec:	43d2      	mvns	r2, r2
    94ee:	2a00      	cmp	r2, #0
    94f0:	d0ee      	beq.n	94d0 <__aeabi_fsub+0x1f8>
    94f2:	28ff      	cmp	r0, #255	; 0xff
    94f4:	d1e1      	bne.n	94ba <__aeabi_fsub+0x1e2>
    94f6:	0033      	movs	r3, r6
    94f8:	24ff      	movs	r4, #255	; 0xff
    94fa:	000d      	movs	r5, r1
    94fc:	e732      	b.n	9364 <__aeabi_fsub+0x8c>
    94fe:	29ff      	cmp	r1, #255	; 0xff
    9500:	d010      	beq.n	9524 <__aeabi_fsub+0x24c>
    9502:	0001      	movs	r1, r0
    9504:	e778      	b.n	93f8 <__aeabi_fsub+0x120>
    9506:	2b00      	cmp	r3, #0
    9508:	d06e      	beq.n	95e8 <__aeabi_fsub+0x310>
    950a:	24ff      	movs	r4, #255	; 0xff
    950c:	2e00      	cmp	r6, #0
    950e:	d100      	bne.n	9512 <__aeabi_fsub+0x23a>
    9510:	e728      	b.n	9364 <__aeabi_fsub+0x8c>
    9512:	2280      	movs	r2, #128	; 0x80
    9514:	4651      	mov	r1, sl
    9516:	03d2      	lsls	r2, r2, #15
    9518:	4211      	tst	r1, r2
    951a:	d003      	beq.n	9524 <__aeabi_fsub+0x24c>
    951c:	4661      	mov	r1, ip
    951e:	4211      	tst	r1, r2
    9520:	d100      	bne.n	9524 <__aeabi_fsub+0x24c>
    9522:	0033      	movs	r3, r6
    9524:	24ff      	movs	r4, #255	; 0xff
    9526:	e71d      	b.n	9364 <__aeabi_fsub+0x8c>
    9528:	24ff      	movs	r4, #255	; 0xff
    952a:	2300      	movs	r3, #0
    952c:	e72c      	b.n	9388 <__aeabi_fsub+0xb0>
    952e:	2c00      	cmp	r4, #0
    9530:	d1e9      	bne.n	9506 <__aeabi_fsub+0x22e>
    9532:	2b00      	cmp	r3, #0
    9534:	d063      	beq.n	95fe <__aeabi_fsub+0x326>
    9536:	2e00      	cmp	r6, #0
    9538:	d100      	bne.n	953c <__aeabi_fsub+0x264>
    953a:	e713      	b.n	9364 <__aeabi_fsub+0x8c>
    953c:	199b      	adds	r3, r3, r6
    953e:	015a      	lsls	r2, r3, #5
    9540:	d400      	bmi.n	9544 <__aeabi_fsub+0x26c>
    9542:	e73e      	b.n	93c2 <__aeabi_fsub+0xea>
    9544:	4a31      	ldr	r2, [pc, #196]	; (960c <__aeabi_fsub+0x334>)
    9546:	000c      	movs	r4, r1
    9548:	4013      	ands	r3, r2
    954a:	e70b      	b.n	9364 <__aeabi_fsub+0x8c>
    954c:	2c00      	cmp	r4, #0
    954e:	d11e      	bne.n	958e <__aeabi_fsub+0x2b6>
    9550:	2b00      	cmp	r3, #0
    9552:	d12f      	bne.n	95b4 <__aeabi_fsub+0x2dc>
    9554:	2e00      	cmp	r6, #0
    9556:	d04f      	beq.n	95f8 <__aeabi_fsub+0x320>
    9558:	0033      	movs	r3, r6
    955a:	000d      	movs	r5, r1
    955c:	e702      	b.n	9364 <__aeabi_fsub+0x8c>
    955e:	2601      	movs	r6, #1
    9560:	e755      	b.n	940e <__aeabi_fsub+0x136>
    9562:	2c00      	cmp	r4, #0
    9564:	d11f      	bne.n	95a6 <__aeabi_fsub+0x2ce>
    9566:	2b00      	cmp	r3, #0
    9568:	d043      	beq.n	95f2 <__aeabi_fsub+0x31a>
    956a:	43c9      	mvns	r1, r1
    956c:	2900      	cmp	r1, #0
    956e:	d00b      	beq.n	9588 <__aeabi_fsub+0x2b0>
    9570:	28ff      	cmp	r0, #255	; 0xff
    9572:	d039      	beq.n	95e8 <__aeabi_fsub+0x310>
    9574:	291b      	cmp	r1, #27
    9576:	dc44      	bgt.n	9602 <__aeabi_fsub+0x32a>
    9578:	001c      	movs	r4, r3
    957a:	2720      	movs	r7, #32
    957c:	40cc      	lsrs	r4, r1
    957e:	1a79      	subs	r1, r7, r1
    9580:	408b      	lsls	r3, r1
    9582:	1e59      	subs	r1, r3, #1
    9584:	418b      	sbcs	r3, r1
    9586:	4323      	orrs	r3, r4
    9588:	199b      	adds	r3, r3, r6
    958a:	0004      	movs	r4, r0
    958c:	e740      	b.n	9410 <__aeabi_fsub+0x138>
    958e:	2b00      	cmp	r3, #0
    9590:	d11a      	bne.n	95c8 <__aeabi_fsub+0x2f0>
    9592:	2e00      	cmp	r6, #0
    9594:	d124      	bne.n	95e0 <__aeabi_fsub+0x308>
    9596:	2780      	movs	r7, #128	; 0x80
    9598:	2200      	movs	r2, #0
    959a:	03ff      	lsls	r7, r7, #15
    959c:	e71b      	b.n	93d6 <__aeabi_fsub+0xfe>
    959e:	0033      	movs	r3, r6
    95a0:	0004      	movs	r4, r0
    95a2:	000d      	movs	r5, r1
    95a4:	e6de      	b.n	9364 <__aeabi_fsub+0x8c>
    95a6:	28ff      	cmp	r0, #255	; 0xff
    95a8:	d01e      	beq.n	95e8 <__aeabi_fsub+0x310>
    95aa:	2480      	movs	r4, #128	; 0x80
    95ac:	04e4      	lsls	r4, r4, #19
    95ae:	4249      	negs	r1, r1
    95b0:	4323      	orrs	r3, r4
    95b2:	e7df      	b.n	9574 <__aeabi_fsub+0x29c>
    95b4:	2e00      	cmp	r6, #0
    95b6:	d100      	bne.n	95ba <__aeabi_fsub+0x2e2>
    95b8:	e6d4      	b.n	9364 <__aeabi_fsub+0x8c>
    95ba:	1b9f      	subs	r7, r3, r6
    95bc:	017a      	lsls	r2, r7, #5
    95be:	d400      	bmi.n	95c2 <__aeabi_fsub+0x2ea>
    95c0:	e737      	b.n	9432 <__aeabi_fsub+0x15a>
    95c2:	1af3      	subs	r3, r6, r3
    95c4:	000d      	movs	r5, r1
    95c6:	e6cd      	b.n	9364 <__aeabi_fsub+0x8c>
    95c8:	24ff      	movs	r4, #255	; 0xff
    95ca:	2e00      	cmp	r6, #0
    95cc:	d100      	bne.n	95d0 <__aeabi_fsub+0x2f8>
    95ce:	e6c9      	b.n	9364 <__aeabi_fsub+0x8c>
    95d0:	2280      	movs	r2, #128	; 0x80
    95d2:	4650      	mov	r0, sl
    95d4:	03d2      	lsls	r2, r2, #15
    95d6:	4210      	tst	r0, r2
    95d8:	d0a4      	beq.n	9524 <__aeabi_fsub+0x24c>
    95da:	4660      	mov	r0, ip
    95dc:	4210      	tst	r0, r2
    95de:	d1a1      	bne.n	9524 <__aeabi_fsub+0x24c>
    95e0:	0033      	movs	r3, r6
    95e2:	000d      	movs	r5, r1
    95e4:	24ff      	movs	r4, #255	; 0xff
    95e6:	e6bd      	b.n	9364 <__aeabi_fsub+0x8c>
    95e8:	0033      	movs	r3, r6
    95ea:	24ff      	movs	r4, #255	; 0xff
    95ec:	e6ba      	b.n	9364 <__aeabi_fsub+0x8c>
    95ee:	2301      	movs	r3, #1
    95f0:	e76e      	b.n	94d0 <__aeabi_fsub+0x1f8>
    95f2:	0033      	movs	r3, r6
    95f4:	0004      	movs	r4, r0
    95f6:	e6b5      	b.n	9364 <__aeabi_fsub+0x8c>
    95f8:	2700      	movs	r7, #0
    95fa:	2200      	movs	r2, #0
    95fc:	e71c      	b.n	9438 <__aeabi_fsub+0x160>
    95fe:	0033      	movs	r3, r6
    9600:	e6b0      	b.n	9364 <__aeabi_fsub+0x8c>
    9602:	2301      	movs	r3, #1
    9604:	e7c0      	b.n	9588 <__aeabi_fsub+0x2b0>
    9606:	46c0      	nop			; (mov r8, r8)
    9608:	7dffffff 	.word	0x7dffffff
    960c:	fbffffff 	.word	0xfbffffff

00009610 <__aeabi_fcmpun>:
    9610:	0242      	lsls	r2, r0, #9
    9612:	024b      	lsls	r3, r1, #9
    9614:	0040      	lsls	r0, r0, #1
    9616:	0049      	lsls	r1, r1, #1
    9618:	0a52      	lsrs	r2, r2, #9
    961a:	0e00      	lsrs	r0, r0, #24
    961c:	0a5b      	lsrs	r3, r3, #9
    961e:	0e09      	lsrs	r1, r1, #24
    9620:	28ff      	cmp	r0, #255	; 0xff
    9622:	d003      	beq.n	962c <__aeabi_fcmpun+0x1c>
    9624:	2000      	movs	r0, #0
    9626:	29ff      	cmp	r1, #255	; 0xff
    9628:	d006      	beq.n	9638 <__aeabi_fcmpun+0x28>
    962a:	4770      	bx	lr
    962c:	38fe      	subs	r0, #254	; 0xfe
    962e:	2a00      	cmp	r2, #0
    9630:	d1fb      	bne.n	962a <__aeabi_fcmpun+0x1a>
    9632:	2000      	movs	r0, #0
    9634:	29ff      	cmp	r1, #255	; 0xff
    9636:	d1f8      	bne.n	962a <__aeabi_fcmpun+0x1a>
    9638:	0018      	movs	r0, r3
    963a:	1e43      	subs	r3, r0, #1
    963c:	4198      	sbcs	r0, r3
    963e:	e7f4      	b.n	962a <__aeabi_fcmpun+0x1a>

00009640 <__aeabi_f2iz>:
    9640:	0241      	lsls	r1, r0, #9
    9642:	0043      	lsls	r3, r0, #1
    9644:	0fc2      	lsrs	r2, r0, #31
    9646:	0a49      	lsrs	r1, r1, #9
    9648:	0e1b      	lsrs	r3, r3, #24
    964a:	2000      	movs	r0, #0
    964c:	2b7e      	cmp	r3, #126	; 0x7e
    964e:	dd0d      	ble.n	966c <__aeabi_f2iz+0x2c>
    9650:	2b9d      	cmp	r3, #157	; 0x9d
    9652:	dc0c      	bgt.n	966e <__aeabi_f2iz+0x2e>
    9654:	2080      	movs	r0, #128	; 0x80
    9656:	0400      	lsls	r0, r0, #16
    9658:	4301      	orrs	r1, r0
    965a:	2b95      	cmp	r3, #149	; 0x95
    965c:	dc0a      	bgt.n	9674 <__aeabi_f2iz+0x34>
    965e:	2096      	movs	r0, #150	; 0x96
    9660:	1ac3      	subs	r3, r0, r3
    9662:	40d9      	lsrs	r1, r3
    9664:	4248      	negs	r0, r1
    9666:	2a00      	cmp	r2, #0
    9668:	d100      	bne.n	966c <__aeabi_f2iz+0x2c>
    966a:	0008      	movs	r0, r1
    966c:	4770      	bx	lr
    966e:	4b03      	ldr	r3, [pc, #12]	; (967c <__aeabi_f2iz+0x3c>)
    9670:	18d0      	adds	r0, r2, r3
    9672:	e7fb      	b.n	966c <__aeabi_f2iz+0x2c>
    9674:	3b96      	subs	r3, #150	; 0x96
    9676:	4099      	lsls	r1, r3
    9678:	e7f4      	b.n	9664 <__aeabi_f2iz+0x24>
    967a:	46c0      	nop			; (mov r8, r8)
    967c:	7fffffff 	.word	0x7fffffff

00009680 <__aeabi_i2f>:
    9680:	b570      	push	{r4, r5, r6, lr}
    9682:	2800      	cmp	r0, #0
    9684:	d030      	beq.n	96e8 <__aeabi_i2f+0x68>
    9686:	17c3      	asrs	r3, r0, #31
    9688:	18c4      	adds	r4, r0, r3
    968a:	405c      	eors	r4, r3
    968c:	0fc5      	lsrs	r5, r0, #31
    968e:	0020      	movs	r0, r4
    9690:	f001 ff10 	bl	b4b4 <__clzsi2>
    9694:	239e      	movs	r3, #158	; 0x9e
    9696:	1a1b      	subs	r3, r3, r0
    9698:	2b96      	cmp	r3, #150	; 0x96
    969a:	dc0d      	bgt.n	96b8 <__aeabi_i2f+0x38>
    969c:	2296      	movs	r2, #150	; 0x96
    969e:	1ad2      	subs	r2, r2, r3
    96a0:	4094      	lsls	r4, r2
    96a2:	002a      	movs	r2, r5
    96a4:	0264      	lsls	r4, r4, #9
    96a6:	0a64      	lsrs	r4, r4, #9
    96a8:	b2db      	uxtb	r3, r3
    96aa:	0264      	lsls	r4, r4, #9
    96ac:	05db      	lsls	r3, r3, #23
    96ae:	0a60      	lsrs	r0, r4, #9
    96b0:	07d2      	lsls	r2, r2, #31
    96b2:	4318      	orrs	r0, r3
    96b4:	4310      	orrs	r0, r2
    96b6:	bd70      	pop	{r4, r5, r6, pc}
    96b8:	2b99      	cmp	r3, #153	; 0x99
    96ba:	dc19      	bgt.n	96f0 <__aeabi_i2f+0x70>
    96bc:	2299      	movs	r2, #153	; 0x99
    96be:	1ad2      	subs	r2, r2, r3
    96c0:	2a00      	cmp	r2, #0
    96c2:	dd29      	ble.n	9718 <__aeabi_i2f+0x98>
    96c4:	4094      	lsls	r4, r2
    96c6:	0022      	movs	r2, r4
    96c8:	4c14      	ldr	r4, [pc, #80]	; (971c <__aeabi_i2f+0x9c>)
    96ca:	4014      	ands	r4, r2
    96cc:	0751      	lsls	r1, r2, #29
    96ce:	d004      	beq.n	96da <__aeabi_i2f+0x5a>
    96d0:	210f      	movs	r1, #15
    96d2:	400a      	ands	r2, r1
    96d4:	2a04      	cmp	r2, #4
    96d6:	d000      	beq.n	96da <__aeabi_i2f+0x5a>
    96d8:	3404      	adds	r4, #4
    96da:	0162      	lsls	r2, r4, #5
    96dc:	d413      	bmi.n	9706 <__aeabi_i2f+0x86>
    96de:	01a4      	lsls	r4, r4, #6
    96e0:	0a64      	lsrs	r4, r4, #9
    96e2:	b2db      	uxtb	r3, r3
    96e4:	002a      	movs	r2, r5
    96e6:	e7e0      	b.n	96aa <__aeabi_i2f+0x2a>
    96e8:	2200      	movs	r2, #0
    96ea:	2300      	movs	r3, #0
    96ec:	2400      	movs	r4, #0
    96ee:	e7dc      	b.n	96aa <__aeabi_i2f+0x2a>
    96f0:	2205      	movs	r2, #5
    96f2:	0021      	movs	r1, r4
    96f4:	1a12      	subs	r2, r2, r0
    96f6:	40d1      	lsrs	r1, r2
    96f8:	22b9      	movs	r2, #185	; 0xb9
    96fa:	1ad2      	subs	r2, r2, r3
    96fc:	4094      	lsls	r4, r2
    96fe:	1e62      	subs	r2, r4, #1
    9700:	4194      	sbcs	r4, r2
    9702:	430c      	orrs	r4, r1
    9704:	e7da      	b.n	96bc <__aeabi_i2f+0x3c>
    9706:	4b05      	ldr	r3, [pc, #20]	; (971c <__aeabi_i2f+0x9c>)
    9708:	002a      	movs	r2, r5
    970a:	401c      	ands	r4, r3
    970c:	239f      	movs	r3, #159	; 0x9f
    970e:	01a4      	lsls	r4, r4, #6
    9710:	1a1b      	subs	r3, r3, r0
    9712:	0a64      	lsrs	r4, r4, #9
    9714:	b2db      	uxtb	r3, r3
    9716:	e7c8      	b.n	96aa <__aeabi_i2f+0x2a>
    9718:	0022      	movs	r2, r4
    971a:	e7d5      	b.n	96c8 <__aeabi_i2f+0x48>
    971c:	fbffffff 	.word	0xfbffffff

00009720 <__aeabi_ui2f>:
    9720:	b510      	push	{r4, lr}
    9722:	1e04      	subs	r4, r0, #0
    9724:	d027      	beq.n	9776 <__aeabi_ui2f+0x56>
    9726:	f001 fec5 	bl	b4b4 <__clzsi2>
    972a:	239e      	movs	r3, #158	; 0x9e
    972c:	1a1b      	subs	r3, r3, r0
    972e:	2b96      	cmp	r3, #150	; 0x96
    9730:	dc0a      	bgt.n	9748 <__aeabi_ui2f+0x28>
    9732:	2296      	movs	r2, #150	; 0x96
    9734:	1ad2      	subs	r2, r2, r3
    9736:	4094      	lsls	r4, r2
    9738:	0264      	lsls	r4, r4, #9
    973a:	0a64      	lsrs	r4, r4, #9
    973c:	b2db      	uxtb	r3, r3
    973e:	0264      	lsls	r4, r4, #9
    9740:	05db      	lsls	r3, r3, #23
    9742:	0a60      	lsrs	r0, r4, #9
    9744:	4318      	orrs	r0, r3
    9746:	bd10      	pop	{r4, pc}
    9748:	2b99      	cmp	r3, #153	; 0x99
    974a:	dc17      	bgt.n	977c <__aeabi_ui2f+0x5c>
    974c:	2299      	movs	r2, #153	; 0x99
    974e:	1ad2      	subs	r2, r2, r3
    9750:	2a00      	cmp	r2, #0
    9752:	dd27      	ble.n	97a4 <__aeabi_ui2f+0x84>
    9754:	4094      	lsls	r4, r2
    9756:	0022      	movs	r2, r4
    9758:	4c13      	ldr	r4, [pc, #76]	; (97a8 <__aeabi_ui2f+0x88>)
    975a:	4014      	ands	r4, r2
    975c:	0751      	lsls	r1, r2, #29
    975e:	d004      	beq.n	976a <__aeabi_ui2f+0x4a>
    9760:	210f      	movs	r1, #15
    9762:	400a      	ands	r2, r1
    9764:	2a04      	cmp	r2, #4
    9766:	d000      	beq.n	976a <__aeabi_ui2f+0x4a>
    9768:	3404      	adds	r4, #4
    976a:	0162      	lsls	r2, r4, #5
    976c:	d412      	bmi.n	9794 <__aeabi_ui2f+0x74>
    976e:	01a4      	lsls	r4, r4, #6
    9770:	0a64      	lsrs	r4, r4, #9
    9772:	b2db      	uxtb	r3, r3
    9774:	e7e3      	b.n	973e <__aeabi_ui2f+0x1e>
    9776:	2300      	movs	r3, #0
    9778:	2400      	movs	r4, #0
    977a:	e7e0      	b.n	973e <__aeabi_ui2f+0x1e>
    977c:	22b9      	movs	r2, #185	; 0xb9
    977e:	0021      	movs	r1, r4
    9780:	1ad2      	subs	r2, r2, r3
    9782:	4091      	lsls	r1, r2
    9784:	000a      	movs	r2, r1
    9786:	1e51      	subs	r1, r2, #1
    9788:	418a      	sbcs	r2, r1
    978a:	2105      	movs	r1, #5
    978c:	1a09      	subs	r1, r1, r0
    978e:	40cc      	lsrs	r4, r1
    9790:	4314      	orrs	r4, r2
    9792:	e7db      	b.n	974c <__aeabi_ui2f+0x2c>
    9794:	4b04      	ldr	r3, [pc, #16]	; (97a8 <__aeabi_ui2f+0x88>)
    9796:	401c      	ands	r4, r3
    9798:	239f      	movs	r3, #159	; 0x9f
    979a:	01a4      	lsls	r4, r4, #6
    979c:	1a1b      	subs	r3, r3, r0
    979e:	0a64      	lsrs	r4, r4, #9
    97a0:	b2db      	uxtb	r3, r3
    97a2:	e7cc      	b.n	973e <__aeabi_ui2f+0x1e>
    97a4:	0022      	movs	r2, r4
    97a6:	e7d7      	b.n	9758 <__aeabi_ui2f+0x38>
    97a8:	fbffffff 	.word	0xfbffffff

000097ac <__aeabi_dadd>:
    97ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97ae:	4645      	mov	r5, r8
    97b0:	46de      	mov	lr, fp
    97b2:	4657      	mov	r7, sl
    97b4:	464e      	mov	r6, r9
    97b6:	030c      	lsls	r4, r1, #12
    97b8:	b5e0      	push	{r5, r6, r7, lr}
    97ba:	004e      	lsls	r6, r1, #1
    97bc:	0fc9      	lsrs	r1, r1, #31
    97be:	4688      	mov	r8, r1
    97c0:	000d      	movs	r5, r1
    97c2:	0a61      	lsrs	r1, r4, #9
    97c4:	0f44      	lsrs	r4, r0, #29
    97c6:	430c      	orrs	r4, r1
    97c8:	00c7      	lsls	r7, r0, #3
    97ca:	0319      	lsls	r1, r3, #12
    97cc:	0058      	lsls	r0, r3, #1
    97ce:	0fdb      	lsrs	r3, r3, #31
    97d0:	469b      	mov	fp, r3
    97d2:	0a4b      	lsrs	r3, r1, #9
    97d4:	0f51      	lsrs	r1, r2, #29
    97d6:	430b      	orrs	r3, r1
    97d8:	0d76      	lsrs	r6, r6, #21
    97da:	0d40      	lsrs	r0, r0, #21
    97dc:	0019      	movs	r1, r3
    97de:	00d2      	lsls	r2, r2, #3
    97e0:	45d8      	cmp	r8, fp
    97e2:	d100      	bne.n	97e6 <__aeabi_dadd+0x3a>
    97e4:	e0ae      	b.n	9944 <__aeabi_dadd+0x198>
    97e6:	1a35      	subs	r5, r6, r0
    97e8:	2d00      	cmp	r5, #0
    97ea:	dc00      	bgt.n	97ee <__aeabi_dadd+0x42>
    97ec:	e0f6      	b.n	99dc <__aeabi_dadd+0x230>
    97ee:	2800      	cmp	r0, #0
    97f0:	d10f      	bne.n	9812 <__aeabi_dadd+0x66>
    97f2:	4313      	orrs	r3, r2
    97f4:	d100      	bne.n	97f8 <__aeabi_dadd+0x4c>
    97f6:	e0db      	b.n	99b0 <__aeabi_dadd+0x204>
    97f8:	1e6b      	subs	r3, r5, #1
    97fa:	2b00      	cmp	r3, #0
    97fc:	d000      	beq.n	9800 <__aeabi_dadd+0x54>
    97fe:	e137      	b.n	9a70 <__aeabi_dadd+0x2c4>
    9800:	1aba      	subs	r2, r7, r2
    9802:	4297      	cmp	r7, r2
    9804:	41bf      	sbcs	r7, r7
    9806:	1a64      	subs	r4, r4, r1
    9808:	427f      	negs	r7, r7
    980a:	1be4      	subs	r4, r4, r7
    980c:	2601      	movs	r6, #1
    980e:	0017      	movs	r7, r2
    9810:	e024      	b.n	985c <__aeabi_dadd+0xb0>
    9812:	4bc6      	ldr	r3, [pc, #792]	; (9b2c <__aeabi_dadd+0x380>)
    9814:	429e      	cmp	r6, r3
    9816:	d04d      	beq.n	98b4 <__aeabi_dadd+0x108>
    9818:	2380      	movs	r3, #128	; 0x80
    981a:	041b      	lsls	r3, r3, #16
    981c:	4319      	orrs	r1, r3
    981e:	2d38      	cmp	r5, #56	; 0x38
    9820:	dd00      	ble.n	9824 <__aeabi_dadd+0x78>
    9822:	e107      	b.n	9a34 <__aeabi_dadd+0x288>
    9824:	2d1f      	cmp	r5, #31
    9826:	dd00      	ble.n	982a <__aeabi_dadd+0x7e>
    9828:	e138      	b.n	9a9c <__aeabi_dadd+0x2f0>
    982a:	2020      	movs	r0, #32
    982c:	1b43      	subs	r3, r0, r5
    982e:	469a      	mov	sl, r3
    9830:	000b      	movs	r3, r1
    9832:	4650      	mov	r0, sl
    9834:	4083      	lsls	r3, r0
    9836:	4699      	mov	r9, r3
    9838:	0013      	movs	r3, r2
    983a:	4648      	mov	r0, r9
    983c:	40eb      	lsrs	r3, r5
    983e:	4318      	orrs	r0, r3
    9840:	0003      	movs	r3, r0
    9842:	4650      	mov	r0, sl
    9844:	4082      	lsls	r2, r0
    9846:	1e50      	subs	r0, r2, #1
    9848:	4182      	sbcs	r2, r0
    984a:	40e9      	lsrs	r1, r5
    984c:	431a      	orrs	r2, r3
    984e:	1aba      	subs	r2, r7, r2
    9850:	1a61      	subs	r1, r4, r1
    9852:	4297      	cmp	r7, r2
    9854:	41a4      	sbcs	r4, r4
    9856:	0017      	movs	r7, r2
    9858:	4264      	negs	r4, r4
    985a:	1b0c      	subs	r4, r1, r4
    985c:	0223      	lsls	r3, r4, #8
    985e:	d562      	bpl.n	9926 <__aeabi_dadd+0x17a>
    9860:	0264      	lsls	r4, r4, #9
    9862:	0a65      	lsrs	r5, r4, #9
    9864:	2d00      	cmp	r5, #0
    9866:	d100      	bne.n	986a <__aeabi_dadd+0xbe>
    9868:	e0df      	b.n	9a2a <__aeabi_dadd+0x27e>
    986a:	0028      	movs	r0, r5
    986c:	f001 fe22 	bl	b4b4 <__clzsi2>
    9870:	0003      	movs	r3, r0
    9872:	3b08      	subs	r3, #8
    9874:	2b1f      	cmp	r3, #31
    9876:	dd00      	ble.n	987a <__aeabi_dadd+0xce>
    9878:	e0d2      	b.n	9a20 <__aeabi_dadd+0x274>
    987a:	2220      	movs	r2, #32
    987c:	003c      	movs	r4, r7
    987e:	1ad2      	subs	r2, r2, r3
    9880:	409d      	lsls	r5, r3
    9882:	40d4      	lsrs	r4, r2
    9884:	409f      	lsls	r7, r3
    9886:	4325      	orrs	r5, r4
    9888:	429e      	cmp	r6, r3
    988a:	dd00      	ble.n	988e <__aeabi_dadd+0xe2>
    988c:	e0c4      	b.n	9a18 <__aeabi_dadd+0x26c>
    988e:	1b9e      	subs	r6, r3, r6
    9890:	1c73      	adds	r3, r6, #1
    9892:	2b1f      	cmp	r3, #31
    9894:	dd00      	ble.n	9898 <__aeabi_dadd+0xec>
    9896:	e0f1      	b.n	9a7c <__aeabi_dadd+0x2d0>
    9898:	2220      	movs	r2, #32
    989a:	0038      	movs	r0, r7
    989c:	0029      	movs	r1, r5
    989e:	1ad2      	subs	r2, r2, r3
    98a0:	40d8      	lsrs	r0, r3
    98a2:	4091      	lsls	r1, r2
    98a4:	4097      	lsls	r7, r2
    98a6:	002c      	movs	r4, r5
    98a8:	4301      	orrs	r1, r0
    98aa:	1e78      	subs	r0, r7, #1
    98ac:	4187      	sbcs	r7, r0
    98ae:	40dc      	lsrs	r4, r3
    98b0:	2600      	movs	r6, #0
    98b2:	430f      	orrs	r7, r1
    98b4:	077b      	lsls	r3, r7, #29
    98b6:	d009      	beq.n	98cc <__aeabi_dadd+0x120>
    98b8:	230f      	movs	r3, #15
    98ba:	403b      	ands	r3, r7
    98bc:	2b04      	cmp	r3, #4
    98be:	d005      	beq.n	98cc <__aeabi_dadd+0x120>
    98c0:	1d3b      	adds	r3, r7, #4
    98c2:	42bb      	cmp	r3, r7
    98c4:	41bf      	sbcs	r7, r7
    98c6:	427f      	negs	r7, r7
    98c8:	19e4      	adds	r4, r4, r7
    98ca:	001f      	movs	r7, r3
    98cc:	0223      	lsls	r3, r4, #8
    98ce:	d52c      	bpl.n	992a <__aeabi_dadd+0x17e>
    98d0:	4b96      	ldr	r3, [pc, #600]	; (9b2c <__aeabi_dadd+0x380>)
    98d2:	3601      	adds	r6, #1
    98d4:	429e      	cmp	r6, r3
    98d6:	d100      	bne.n	98da <__aeabi_dadd+0x12e>
    98d8:	e09a      	b.n	9a10 <__aeabi_dadd+0x264>
    98da:	4645      	mov	r5, r8
    98dc:	4b94      	ldr	r3, [pc, #592]	; (9b30 <__aeabi_dadd+0x384>)
    98de:	08ff      	lsrs	r7, r7, #3
    98e0:	401c      	ands	r4, r3
    98e2:	0760      	lsls	r0, r4, #29
    98e4:	0576      	lsls	r6, r6, #21
    98e6:	0264      	lsls	r4, r4, #9
    98e8:	4307      	orrs	r7, r0
    98ea:	0b24      	lsrs	r4, r4, #12
    98ec:	0d76      	lsrs	r6, r6, #21
    98ee:	2100      	movs	r1, #0
    98f0:	0324      	lsls	r4, r4, #12
    98f2:	0b23      	lsrs	r3, r4, #12
    98f4:	0d0c      	lsrs	r4, r1, #20
    98f6:	4a8f      	ldr	r2, [pc, #572]	; (9b34 <__aeabi_dadd+0x388>)
    98f8:	0524      	lsls	r4, r4, #20
    98fa:	431c      	orrs	r4, r3
    98fc:	4014      	ands	r4, r2
    98fe:	0533      	lsls	r3, r6, #20
    9900:	4323      	orrs	r3, r4
    9902:	005b      	lsls	r3, r3, #1
    9904:	07ed      	lsls	r5, r5, #31
    9906:	085b      	lsrs	r3, r3, #1
    9908:	432b      	orrs	r3, r5
    990a:	0038      	movs	r0, r7
    990c:	0019      	movs	r1, r3
    990e:	bc3c      	pop	{r2, r3, r4, r5}
    9910:	4690      	mov	r8, r2
    9912:	4699      	mov	r9, r3
    9914:	46a2      	mov	sl, r4
    9916:	46ab      	mov	fp, r5
    9918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    991a:	4664      	mov	r4, ip
    991c:	4304      	orrs	r4, r0
    991e:	d100      	bne.n	9922 <__aeabi_dadd+0x176>
    9920:	e211      	b.n	9d46 <__aeabi_dadd+0x59a>
    9922:	0004      	movs	r4, r0
    9924:	4667      	mov	r7, ip
    9926:	077b      	lsls	r3, r7, #29
    9928:	d1c6      	bne.n	98b8 <__aeabi_dadd+0x10c>
    992a:	4645      	mov	r5, r8
    992c:	0760      	lsls	r0, r4, #29
    992e:	08ff      	lsrs	r7, r7, #3
    9930:	4307      	orrs	r7, r0
    9932:	08e4      	lsrs	r4, r4, #3
    9934:	4b7d      	ldr	r3, [pc, #500]	; (9b2c <__aeabi_dadd+0x380>)
    9936:	429e      	cmp	r6, r3
    9938:	d030      	beq.n	999c <__aeabi_dadd+0x1f0>
    993a:	0324      	lsls	r4, r4, #12
    993c:	0576      	lsls	r6, r6, #21
    993e:	0b24      	lsrs	r4, r4, #12
    9940:	0d76      	lsrs	r6, r6, #21
    9942:	e7d4      	b.n	98ee <__aeabi_dadd+0x142>
    9944:	1a33      	subs	r3, r6, r0
    9946:	469a      	mov	sl, r3
    9948:	2b00      	cmp	r3, #0
    994a:	dd78      	ble.n	9a3e <__aeabi_dadd+0x292>
    994c:	2800      	cmp	r0, #0
    994e:	d031      	beq.n	99b4 <__aeabi_dadd+0x208>
    9950:	4876      	ldr	r0, [pc, #472]	; (9b2c <__aeabi_dadd+0x380>)
    9952:	4286      	cmp	r6, r0
    9954:	d0ae      	beq.n	98b4 <__aeabi_dadd+0x108>
    9956:	2080      	movs	r0, #128	; 0x80
    9958:	0400      	lsls	r0, r0, #16
    995a:	4301      	orrs	r1, r0
    995c:	4653      	mov	r3, sl
    995e:	2b38      	cmp	r3, #56	; 0x38
    9960:	dc00      	bgt.n	9964 <__aeabi_dadd+0x1b8>
    9962:	e0e9      	b.n	9b38 <__aeabi_dadd+0x38c>
    9964:	430a      	orrs	r2, r1
    9966:	1e51      	subs	r1, r2, #1
    9968:	418a      	sbcs	r2, r1
    996a:	2100      	movs	r1, #0
    996c:	19d2      	adds	r2, r2, r7
    996e:	42ba      	cmp	r2, r7
    9970:	41bf      	sbcs	r7, r7
    9972:	1909      	adds	r1, r1, r4
    9974:	427c      	negs	r4, r7
    9976:	0017      	movs	r7, r2
    9978:	190c      	adds	r4, r1, r4
    997a:	0223      	lsls	r3, r4, #8
    997c:	d5d3      	bpl.n	9926 <__aeabi_dadd+0x17a>
    997e:	4b6b      	ldr	r3, [pc, #428]	; (9b2c <__aeabi_dadd+0x380>)
    9980:	3601      	adds	r6, #1
    9982:	429e      	cmp	r6, r3
    9984:	d100      	bne.n	9988 <__aeabi_dadd+0x1dc>
    9986:	e13a      	b.n	9bfe <__aeabi_dadd+0x452>
    9988:	2001      	movs	r0, #1
    998a:	4b69      	ldr	r3, [pc, #420]	; (9b30 <__aeabi_dadd+0x384>)
    998c:	401c      	ands	r4, r3
    998e:	087b      	lsrs	r3, r7, #1
    9990:	4007      	ands	r7, r0
    9992:	431f      	orrs	r7, r3
    9994:	07e0      	lsls	r0, r4, #31
    9996:	4307      	orrs	r7, r0
    9998:	0864      	lsrs	r4, r4, #1
    999a:	e78b      	b.n	98b4 <__aeabi_dadd+0x108>
    999c:	0023      	movs	r3, r4
    999e:	433b      	orrs	r3, r7
    99a0:	d100      	bne.n	99a4 <__aeabi_dadd+0x1f8>
    99a2:	e1cb      	b.n	9d3c <__aeabi_dadd+0x590>
    99a4:	2280      	movs	r2, #128	; 0x80
    99a6:	0312      	lsls	r2, r2, #12
    99a8:	4314      	orrs	r4, r2
    99aa:	0324      	lsls	r4, r4, #12
    99ac:	0b24      	lsrs	r4, r4, #12
    99ae:	e79e      	b.n	98ee <__aeabi_dadd+0x142>
    99b0:	002e      	movs	r6, r5
    99b2:	e77f      	b.n	98b4 <__aeabi_dadd+0x108>
    99b4:	0008      	movs	r0, r1
    99b6:	4310      	orrs	r0, r2
    99b8:	d100      	bne.n	99bc <__aeabi_dadd+0x210>
    99ba:	e0b4      	b.n	9b26 <__aeabi_dadd+0x37a>
    99bc:	1e58      	subs	r0, r3, #1
    99be:	2800      	cmp	r0, #0
    99c0:	d000      	beq.n	99c4 <__aeabi_dadd+0x218>
    99c2:	e0de      	b.n	9b82 <__aeabi_dadd+0x3d6>
    99c4:	18ba      	adds	r2, r7, r2
    99c6:	42ba      	cmp	r2, r7
    99c8:	419b      	sbcs	r3, r3
    99ca:	1864      	adds	r4, r4, r1
    99cc:	425b      	negs	r3, r3
    99ce:	18e4      	adds	r4, r4, r3
    99d0:	0017      	movs	r7, r2
    99d2:	2601      	movs	r6, #1
    99d4:	0223      	lsls	r3, r4, #8
    99d6:	d5a6      	bpl.n	9926 <__aeabi_dadd+0x17a>
    99d8:	2602      	movs	r6, #2
    99da:	e7d5      	b.n	9988 <__aeabi_dadd+0x1dc>
    99dc:	2d00      	cmp	r5, #0
    99de:	d16e      	bne.n	9abe <__aeabi_dadd+0x312>
    99e0:	1c70      	adds	r0, r6, #1
    99e2:	0540      	lsls	r0, r0, #21
    99e4:	0d40      	lsrs	r0, r0, #21
    99e6:	2801      	cmp	r0, #1
    99e8:	dc00      	bgt.n	99ec <__aeabi_dadd+0x240>
    99ea:	e0f9      	b.n	9be0 <__aeabi_dadd+0x434>
    99ec:	1ab8      	subs	r0, r7, r2
    99ee:	4684      	mov	ip, r0
    99f0:	4287      	cmp	r7, r0
    99f2:	4180      	sbcs	r0, r0
    99f4:	1ae5      	subs	r5, r4, r3
    99f6:	4240      	negs	r0, r0
    99f8:	1a2d      	subs	r5, r5, r0
    99fa:	0228      	lsls	r0, r5, #8
    99fc:	d400      	bmi.n	9a00 <__aeabi_dadd+0x254>
    99fe:	e089      	b.n	9b14 <__aeabi_dadd+0x368>
    9a00:	1bd7      	subs	r7, r2, r7
    9a02:	42ba      	cmp	r2, r7
    9a04:	4192      	sbcs	r2, r2
    9a06:	1b1c      	subs	r4, r3, r4
    9a08:	4252      	negs	r2, r2
    9a0a:	1aa5      	subs	r5, r4, r2
    9a0c:	46d8      	mov	r8, fp
    9a0e:	e729      	b.n	9864 <__aeabi_dadd+0xb8>
    9a10:	4645      	mov	r5, r8
    9a12:	2400      	movs	r4, #0
    9a14:	2700      	movs	r7, #0
    9a16:	e76a      	b.n	98ee <__aeabi_dadd+0x142>
    9a18:	4c45      	ldr	r4, [pc, #276]	; (9b30 <__aeabi_dadd+0x384>)
    9a1a:	1af6      	subs	r6, r6, r3
    9a1c:	402c      	ands	r4, r5
    9a1e:	e749      	b.n	98b4 <__aeabi_dadd+0x108>
    9a20:	003d      	movs	r5, r7
    9a22:	3828      	subs	r0, #40	; 0x28
    9a24:	4085      	lsls	r5, r0
    9a26:	2700      	movs	r7, #0
    9a28:	e72e      	b.n	9888 <__aeabi_dadd+0xdc>
    9a2a:	0038      	movs	r0, r7
    9a2c:	f001 fd42 	bl	b4b4 <__clzsi2>
    9a30:	3020      	adds	r0, #32
    9a32:	e71d      	b.n	9870 <__aeabi_dadd+0xc4>
    9a34:	430a      	orrs	r2, r1
    9a36:	1e51      	subs	r1, r2, #1
    9a38:	418a      	sbcs	r2, r1
    9a3a:	2100      	movs	r1, #0
    9a3c:	e707      	b.n	984e <__aeabi_dadd+0xa2>
    9a3e:	2b00      	cmp	r3, #0
    9a40:	d000      	beq.n	9a44 <__aeabi_dadd+0x298>
    9a42:	e0f3      	b.n	9c2c <__aeabi_dadd+0x480>
    9a44:	1c70      	adds	r0, r6, #1
    9a46:	0543      	lsls	r3, r0, #21
    9a48:	0d5b      	lsrs	r3, r3, #21
    9a4a:	2b01      	cmp	r3, #1
    9a4c:	dc00      	bgt.n	9a50 <__aeabi_dadd+0x2a4>
    9a4e:	e0ad      	b.n	9bac <__aeabi_dadd+0x400>
    9a50:	4b36      	ldr	r3, [pc, #216]	; (9b2c <__aeabi_dadd+0x380>)
    9a52:	4298      	cmp	r0, r3
    9a54:	d100      	bne.n	9a58 <__aeabi_dadd+0x2ac>
    9a56:	e0d1      	b.n	9bfc <__aeabi_dadd+0x450>
    9a58:	18ba      	adds	r2, r7, r2
    9a5a:	42ba      	cmp	r2, r7
    9a5c:	41bf      	sbcs	r7, r7
    9a5e:	1864      	adds	r4, r4, r1
    9a60:	427f      	negs	r7, r7
    9a62:	19e4      	adds	r4, r4, r7
    9a64:	07e7      	lsls	r7, r4, #31
    9a66:	0852      	lsrs	r2, r2, #1
    9a68:	4317      	orrs	r7, r2
    9a6a:	0864      	lsrs	r4, r4, #1
    9a6c:	0006      	movs	r6, r0
    9a6e:	e721      	b.n	98b4 <__aeabi_dadd+0x108>
    9a70:	482e      	ldr	r0, [pc, #184]	; (9b2c <__aeabi_dadd+0x380>)
    9a72:	4285      	cmp	r5, r0
    9a74:	d100      	bne.n	9a78 <__aeabi_dadd+0x2cc>
    9a76:	e093      	b.n	9ba0 <__aeabi_dadd+0x3f4>
    9a78:	001d      	movs	r5, r3
    9a7a:	e6d0      	b.n	981e <__aeabi_dadd+0x72>
    9a7c:	0029      	movs	r1, r5
    9a7e:	3e1f      	subs	r6, #31
    9a80:	40f1      	lsrs	r1, r6
    9a82:	2b20      	cmp	r3, #32
    9a84:	d100      	bne.n	9a88 <__aeabi_dadd+0x2dc>
    9a86:	e08d      	b.n	9ba4 <__aeabi_dadd+0x3f8>
    9a88:	2240      	movs	r2, #64	; 0x40
    9a8a:	1ad3      	subs	r3, r2, r3
    9a8c:	409d      	lsls	r5, r3
    9a8e:	432f      	orrs	r7, r5
    9a90:	1e7d      	subs	r5, r7, #1
    9a92:	41af      	sbcs	r7, r5
    9a94:	2400      	movs	r4, #0
    9a96:	430f      	orrs	r7, r1
    9a98:	2600      	movs	r6, #0
    9a9a:	e744      	b.n	9926 <__aeabi_dadd+0x17a>
    9a9c:	002b      	movs	r3, r5
    9a9e:	0008      	movs	r0, r1
    9aa0:	3b20      	subs	r3, #32
    9aa2:	40d8      	lsrs	r0, r3
    9aa4:	0003      	movs	r3, r0
    9aa6:	2d20      	cmp	r5, #32
    9aa8:	d100      	bne.n	9aac <__aeabi_dadd+0x300>
    9aaa:	e07d      	b.n	9ba8 <__aeabi_dadd+0x3fc>
    9aac:	2040      	movs	r0, #64	; 0x40
    9aae:	1b45      	subs	r5, r0, r5
    9ab0:	40a9      	lsls	r1, r5
    9ab2:	430a      	orrs	r2, r1
    9ab4:	1e51      	subs	r1, r2, #1
    9ab6:	418a      	sbcs	r2, r1
    9ab8:	2100      	movs	r1, #0
    9aba:	431a      	orrs	r2, r3
    9abc:	e6c7      	b.n	984e <__aeabi_dadd+0xa2>
    9abe:	2e00      	cmp	r6, #0
    9ac0:	d050      	beq.n	9b64 <__aeabi_dadd+0x3b8>
    9ac2:	4e1a      	ldr	r6, [pc, #104]	; (9b2c <__aeabi_dadd+0x380>)
    9ac4:	42b0      	cmp	r0, r6
    9ac6:	d057      	beq.n	9b78 <__aeabi_dadd+0x3cc>
    9ac8:	2680      	movs	r6, #128	; 0x80
    9aca:	426b      	negs	r3, r5
    9acc:	4699      	mov	r9, r3
    9ace:	0436      	lsls	r6, r6, #16
    9ad0:	4334      	orrs	r4, r6
    9ad2:	464b      	mov	r3, r9
    9ad4:	2b38      	cmp	r3, #56	; 0x38
    9ad6:	dd00      	ble.n	9ada <__aeabi_dadd+0x32e>
    9ad8:	e0d6      	b.n	9c88 <__aeabi_dadd+0x4dc>
    9ada:	2b1f      	cmp	r3, #31
    9adc:	dd00      	ble.n	9ae0 <__aeabi_dadd+0x334>
    9ade:	e135      	b.n	9d4c <__aeabi_dadd+0x5a0>
    9ae0:	2620      	movs	r6, #32
    9ae2:	1af5      	subs	r5, r6, r3
    9ae4:	0026      	movs	r6, r4
    9ae6:	40ae      	lsls	r6, r5
    9ae8:	46b2      	mov	sl, r6
    9aea:	003e      	movs	r6, r7
    9aec:	40de      	lsrs	r6, r3
    9aee:	46ac      	mov	ip, r5
    9af0:	0035      	movs	r5, r6
    9af2:	4656      	mov	r6, sl
    9af4:	432e      	orrs	r6, r5
    9af6:	4665      	mov	r5, ip
    9af8:	40af      	lsls	r7, r5
    9afa:	1e7d      	subs	r5, r7, #1
    9afc:	41af      	sbcs	r7, r5
    9afe:	40dc      	lsrs	r4, r3
    9b00:	4337      	orrs	r7, r6
    9b02:	1bd7      	subs	r7, r2, r7
    9b04:	42ba      	cmp	r2, r7
    9b06:	4192      	sbcs	r2, r2
    9b08:	1b0c      	subs	r4, r1, r4
    9b0a:	4252      	negs	r2, r2
    9b0c:	1aa4      	subs	r4, r4, r2
    9b0e:	0006      	movs	r6, r0
    9b10:	46d8      	mov	r8, fp
    9b12:	e6a3      	b.n	985c <__aeabi_dadd+0xb0>
    9b14:	4664      	mov	r4, ip
    9b16:	4667      	mov	r7, ip
    9b18:	432c      	orrs	r4, r5
    9b1a:	d000      	beq.n	9b1e <__aeabi_dadd+0x372>
    9b1c:	e6a2      	b.n	9864 <__aeabi_dadd+0xb8>
    9b1e:	2500      	movs	r5, #0
    9b20:	2600      	movs	r6, #0
    9b22:	2700      	movs	r7, #0
    9b24:	e706      	b.n	9934 <__aeabi_dadd+0x188>
    9b26:	001e      	movs	r6, r3
    9b28:	e6c4      	b.n	98b4 <__aeabi_dadd+0x108>
    9b2a:	46c0      	nop			; (mov r8, r8)
    9b2c:	000007ff 	.word	0x000007ff
    9b30:	ff7fffff 	.word	0xff7fffff
    9b34:	800fffff 	.word	0x800fffff
    9b38:	2b1f      	cmp	r3, #31
    9b3a:	dc63      	bgt.n	9c04 <__aeabi_dadd+0x458>
    9b3c:	2020      	movs	r0, #32
    9b3e:	1ac3      	subs	r3, r0, r3
    9b40:	0008      	movs	r0, r1
    9b42:	4098      	lsls	r0, r3
    9b44:	469c      	mov	ip, r3
    9b46:	4683      	mov	fp, r0
    9b48:	4653      	mov	r3, sl
    9b4a:	0010      	movs	r0, r2
    9b4c:	40d8      	lsrs	r0, r3
    9b4e:	0003      	movs	r3, r0
    9b50:	4658      	mov	r0, fp
    9b52:	4318      	orrs	r0, r3
    9b54:	4663      	mov	r3, ip
    9b56:	409a      	lsls	r2, r3
    9b58:	1e53      	subs	r3, r2, #1
    9b5a:	419a      	sbcs	r2, r3
    9b5c:	4653      	mov	r3, sl
    9b5e:	4302      	orrs	r2, r0
    9b60:	40d9      	lsrs	r1, r3
    9b62:	e703      	b.n	996c <__aeabi_dadd+0x1c0>
    9b64:	0026      	movs	r6, r4
    9b66:	433e      	orrs	r6, r7
    9b68:	d006      	beq.n	9b78 <__aeabi_dadd+0x3cc>
    9b6a:	43eb      	mvns	r3, r5
    9b6c:	4699      	mov	r9, r3
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d0c7      	beq.n	9b02 <__aeabi_dadd+0x356>
    9b72:	4e94      	ldr	r6, [pc, #592]	; (9dc4 <__aeabi_dadd+0x618>)
    9b74:	42b0      	cmp	r0, r6
    9b76:	d1ac      	bne.n	9ad2 <__aeabi_dadd+0x326>
    9b78:	000c      	movs	r4, r1
    9b7a:	0017      	movs	r7, r2
    9b7c:	0006      	movs	r6, r0
    9b7e:	46d8      	mov	r8, fp
    9b80:	e698      	b.n	98b4 <__aeabi_dadd+0x108>
    9b82:	4b90      	ldr	r3, [pc, #576]	; (9dc4 <__aeabi_dadd+0x618>)
    9b84:	459a      	cmp	sl, r3
    9b86:	d00b      	beq.n	9ba0 <__aeabi_dadd+0x3f4>
    9b88:	4682      	mov	sl, r0
    9b8a:	e6e7      	b.n	995c <__aeabi_dadd+0x1b0>
    9b8c:	2800      	cmp	r0, #0
    9b8e:	d000      	beq.n	9b92 <__aeabi_dadd+0x3e6>
    9b90:	e09e      	b.n	9cd0 <__aeabi_dadd+0x524>
    9b92:	0018      	movs	r0, r3
    9b94:	4310      	orrs	r0, r2
    9b96:	d100      	bne.n	9b9a <__aeabi_dadd+0x3ee>
    9b98:	e0e9      	b.n	9d6e <__aeabi_dadd+0x5c2>
    9b9a:	001c      	movs	r4, r3
    9b9c:	0017      	movs	r7, r2
    9b9e:	46d8      	mov	r8, fp
    9ba0:	4e88      	ldr	r6, [pc, #544]	; (9dc4 <__aeabi_dadd+0x618>)
    9ba2:	e687      	b.n	98b4 <__aeabi_dadd+0x108>
    9ba4:	2500      	movs	r5, #0
    9ba6:	e772      	b.n	9a8e <__aeabi_dadd+0x2e2>
    9ba8:	2100      	movs	r1, #0
    9baa:	e782      	b.n	9ab2 <__aeabi_dadd+0x306>
    9bac:	0023      	movs	r3, r4
    9bae:	433b      	orrs	r3, r7
    9bb0:	2e00      	cmp	r6, #0
    9bb2:	d000      	beq.n	9bb6 <__aeabi_dadd+0x40a>
    9bb4:	e0ab      	b.n	9d0e <__aeabi_dadd+0x562>
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	d100      	bne.n	9bbc <__aeabi_dadd+0x410>
    9bba:	e0e7      	b.n	9d8c <__aeabi_dadd+0x5e0>
    9bbc:	000b      	movs	r3, r1
    9bbe:	4313      	orrs	r3, r2
    9bc0:	d100      	bne.n	9bc4 <__aeabi_dadd+0x418>
    9bc2:	e677      	b.n	98b4 <__aeabi_dadd+0x108>
    9bc4:	18ba      	adds	r2, r7, r2
    9bc6:	42ba      	cmp	r2, r7
    9bc8:	41bf      	sbcs	r7, r7
    9bca:	1864      	adds	r4, r4, r1
    9bcc:	427f      	negs	r7, r7
    9bce:	19e4      	adds	r4, r4, r7
    9bd0:	0223      	lsls	r3, r4, #8
    9bd2:	d400      	bmi.n	9bd6 <__aeabi_dadd+0x42a>
    9bd4:	e0f2      	b.n	9dbc <__aeabi_dadd+0x610>
    9bd6:	4b7c      	ldr	r3, [pc, #496]	; (9dc8 <__aeabi_dadd+0x61c>)
    9bd8:	0017      	movs	r7, r2
    9bda:	401c      	ands	r4, r3
    9bdc:	0006      	movs	r6, r0
    9bde:	e669      	b.n	98b4 <__aeabi_dadd+0x108>
    9be0:	0020      	movs	r0, r4
    9be2:	4338      	orrs	r0, r7
    9be4:	2e00      	cmp	r6, #0
    9be6:	d1d1      	bne.n	9b8c <__aeabi_dadd+0x3e0>
    9be8:	2800      	cmp	r0, #0
    9bea:	d15b      	bne.n	9ca4 <__aeabi_dadd+0x4f8>
    9bec:	001c      	movs	r4, r3
    9bee:	4314      	orrs	r4, r2
    9bf0:	d100      	bne.n	9bf4 <__aeabi_dadd+0x448>
    9bf2:	e0a8      	b.n	9d46 <__aeabi_dadd+0x59a>
    9bf4:	001c      	movs	r4, r3
    9bf6:	0017      	movs	r7, r2
    9bf8:	46d8      	mov	r8, fp
    9bfa:	e65b      	b.n	98b4 <__aeabi_dadd+0x108>
    9bfc:	0006      	movs	r6, r0
    9bfe:	2400      	movs	r4, #0
    9c00:	2700      	movs	r7, #0
    9c02:	e697      	b.n	9934 <__aeabi_dadd+0x188>
    9c04:	4650      	mov	r0, sl
    9c06:	000b      	movs	r3, r1
    9c08:	3820      	subs	r0, #32
    9c0a:	40c3      	lsrs	r3, r0
    9c0c:	4699      	mov	r9, r3
    9c0e:	4653      	mov	r3, sl
    9c10:	2b20      	cmp	r3, #32
    9c12:	d100      	bne.n	9c16 <__aeabi_dadd+0x46a>
    9c14:	e095      	b.n	9d42 <__aeabi_dadd+0x596>
    9c16:	2340      	movs	r3, #64	; 0x40
    9c18:	4650      	mov	r0, sl
    9c1a:	1a1b      	subs	r3, r3, r0
    9c1c:	4099      	lsls	r1, r3
    9c1e:	430a      	orrs	r2, r1
    9c20:	1e51      	subs	r1, r2, #1
    9c22:	418a      	sbcs	r2, r1
    9c24:	464b      	mov	r3, r9
    9c26:	2100      	movs	r1, #0
    9c28:	431a      	orrs	r2, r3
    9c2a:	e69f      	b.n	996c <__aeabi_dadd+0x1c0>
    9c2c:	2e00      	cmp	r6, #0
    9c2e:	d130      	bne.n	9c92 <__aeabi_dadd+0x4e6>
    9c30:	0026      	movs	r6, r4
    9c32:	433e      	orrs	r6, r7
    9c34:	d067      	beq.n	9d06 <__aeabi_dadd+0x55a>
    9c36:	43db      	mvns	r3, r3
    9c38:	469a      	mov	sl, r3
    9c3a:	2b00      	cmp	r3, #0
    9c3c:	d01c      	beq.n	9c78 <__aeabi_dadd+0x4cc>
    9c3e:	4e61      	ldr	r6, [pc, #388]	; (9dc4 <__aeabi_dadd+0x618>)
    9c40:	42b0      	cmp	r0, r6
    9c42:	d060      	beq.n	9d06 <__aeabi_dadd+0x55a>
    9c44:	4653      	mov	r3, sl
    9c46:	2b38      	cmp	r3, #56	; 0x38
    9c48:	dd00      	ble.n	9c4c <__aeabi_dadd+0x4a0>
    9c4a:	e096      	b.n	9d7a <__aeabi_dadd+0x5ce>
    9c4c:	2b1f      	cmp	r3, #31
    9c4e:	dd00      	ble.n	9c52 <__aeabi_dadd+0x4a6>
    9c50:	e09f      	b.n	9d92 <__aeabi_dadd+0x5e6>
    9c52:	2620      	movs	r6, #32
    9c54:	1af3      	subs	r3, r6, r3
    9c56:	0026      	movs	r6, r4
    9c58:	409e      	lsls	r6, r3
    9c5a:	469c      	mov	ip, r3
    9c5c:	46b3      	mov	fp, r6
    9c5e:	4653      	mov	r3, sl
    9c60:	003e      	movs	r6, r7
    9c62:	40de      	lsrs	r6, r3
    9c64:	0033      	movs	r3, r6
    9c66:	465e      	mov	r6, fp
    9c68:	431e      	orrs	r6, r3
    9c6a:	4663      	mov	r3, ip
    9c6c:	409f      	lsls	r7, r3
    9c6e:	1e7b      	subs	r3, r7, #1
    9c70:	419f      	sbcs	r7, r3
    9c72:	4653      	mov	r3, sl
    9c74:	40dc      	lsrs	r4, r3
    9c76:	4337      	orrs	r7, r6
    9c78:	18bf      	adds	r7, r7, r2
    9c7a:	4297      	cmp	r7, r2
    9c7c:	4192      	sbcs	r2, r2
    9c7e:	1864      	adds	r4, r4, r1
    9c80:	4252      	negs	r2, r2
    9c82:	18a4      	adds	r4, r4, r2
    9c84:	0006      	movs	r6, r0
    9c86:	e678      	b.n	997a <__aeabi_dadd+0x1ce>
    9c88:	4327      	orrs	r7, r4
    9c8a:	1e7c      	subs	r4, r7, #1
    9c8c:	41a7      	sbcs	r7, r4
    9c8e:	2400      	movs	r4, #0
    9c90:	e737      	b.n	9b02 <__aeabi_dadd+0x356>
    9c92:	4e4c      	ldr	r6, [pc, #304]	; (9dc4 <__aeabi_dadd+0x618>)
    9c94:	42b0      	cmp	r0, r6
    9c96:	d036      	beq.n	9d06 <__aeabi_dadd+0x55a>
    9c98:	2680      	movs	r6, #128	; 0x80
    9c9a:	425b      	negs	r3, r3
    9c9c:	0436      	lsls	r6, r6, #16
    9c9e:	469a      	mov	sl, r3
    9ca0:	4334      	orrs	r4, r6
    9ca2:	e7cf      	b.n	9c44 <__aeabi_dadd+0x498>
    9ca4:	0018      	movs	r0, r3
    9ca6:	4310      	orrs	r0, r2
    9ca8:	d100      	bne.n	9cac <__aeabi_dadd+0x500>
    9caa:	e603      	b.n	98b4 <__aeabi_dadd+0x108>
    9cac:	1ab8      	subs	r0, r7, r2
    9cae:	4684      	mov	ip, r0
    9cb0:	4567      	cmp	r7, ip
    9cb2:	41ad      	sbcs	r5, r5
    9cb4:	1ae0      	subs	r0, r4, r3
    9cb6:	426d      	negs	r5, r5
    9cb8:	1b40      	subs	r0, r0, r5
    9cba:	0205      	lsls	r5, r0, #8
    9cbc:	d400      	bmi.n	9cc0 <__aeabi_dadd+0x514>
    9cbe:	e62c      	b.n	991a <__aeabi_dadd+0x16e>
    9cc0:	1bd7      	subs	r7, r2, r7
    9cc2:	42ba      	cmp	r2, r7
    9cc4:	4192      	sbcs	r2, r2
    9cc6:	1b1c      	subs	r4, r3, r4
    9cc8:	4252      	negs	r2, r2
    9cca:	1aa4      	subs	r4, r4, r2
    9ccc:	46d8      	mov	r8, fp
    9cce:	e5f1      	b.n	98b4 <__aeabi_dadd+0x108>
    9cd0:	0018      	movs	r0, r3
    9cd2:	4310      	orrs	r0, r2
    9cd4:	d100      	bne.n	9cd8 <__aeabi_dadd+0x52c>
    9cd6:	e763      	b.n	9ba0 <__aeabi_dadd+0x3f4>
    9cd8:	08f8      	lsrs	r0, r7, #3
    9cda:	0767      	lsls	r7, r4, #29
    9cdc:	4307      	orrs	r7, r0
    9cde:	2080      	movs	r0, #128	; 0x80
    9ce0:	08e4      	lsrs	r4, r4, #3
    9ce2:	0300      	lsls	r0, r0, #12
    9ce4:	4204      	tst	r4, r0
    9ce6:	d008      	beq.n	9cfa <__aeabi_dadd+0x54e>
    9ce8:	08dd      	lsrs	r5, r3, #3
    9cea:	4205      	tst	r5, r0
    9cec:	d105      	bne.n	9cfa <__aeabi_dadd+0x54e>
    9cee:	08d2      	lsrs	r2, r2, #3
    9cf0:	0759      	lsls	r1, r3, #29
    9cf2:	4311      	orrs	r1, r2
    9cf4:	000f      	movs	r7, r1
    9cf6:	002c      	movs	r4, r5
    9cf8:	46d8      	mov	r8, fp
    9cfa:	0f7b      	lsrs	r3, r7, #29
    9cfc:	00e4      	lsls	r4, r4, #3
    9cfe:	431c      	orrs	r4, r3
    9d00:	00ff      	lsls	r7, r7, #3
    9d02:	4e30      	ldr	r6, [pc, #192]	; (9dc4 <__aeabi_dadd+0x618>)
    9d04:	e5d6      	b.n	98b4 <__aeabi_dadd+0x108>
    9d06:	000c      	movs	r4, r1
    9d08:	0017      	movs	r7, r2
    9d0a:	0006      	movs	r6, r0
    9d0c:	e5d2      	b.n	98b4 <__aeabi_dadd+0x108>
    9d0e:	2b00      	cmp	r3, #0
    9d10:	d038      	beq.n	9d84 <__aeabi_dadd+0x5d8>
    9d12:	000b      	movs	r3, r1
    9d14:	4313      	orrs	r3, r2
    9d16:	d100      	bne.n	9d1a <__aeabi_dadd+0x56e>
    9d18:	e742      	b.n	9ba0 <__aeabi_dadd+0x3f4>
    9d1a:	08f8      	lsrs	r0, r7, #3
    9d1c:	0767      	lsls	r7, r4, #29
    9d1e:	4307      	orrs	r7, r0
    9d20:	2080      	movs	r0, #128	; 0x80
    9d22:	08e4      	lsrs	r4, r4, #3
    9d24:	0300      	lsls	r0, r0, #12
    9d26:	4204      	tst	r4, r0
    9d28:	d0e7      	beq.n	9cfa <__aeabi_dadd+0x54e>
    9d2a:	08cb      	lsrs	r3, r1, #3
    9d2c:	4203      	tst	r3, r0
    9d2e:	d1e4      	bne.n	9cfa <__aeabi_dadd+0x54e>
    9d30:	08d2      	lsrs	r2, r2, #3
    9d32:	0749      	lsls	r1, r1, #29
    9d34:	4311      	orrs	r1, r2
    9d36:	000f      	movs	r7, r1
    9d38:	001c      	movs	r4, r3
    9d3a:	e7de      	b.n	9cfa <__aeabi_dadd+0x54e>
    9d3c:	2700      	movs	r7, #0
    9d3e:	2400      	movs	r4, #0
    9d40:	e5d5      	b.n	98ee <__aeabi_dadd+0x142>
    9d42:	2100      	movs	r1, #0
    9d44:	e76b      	b.n	9c1e <__aeabi_dadd+0x472>
    9d46:	2500      	movs	r5, #0
    9d48:	2700      	movs	r7, #0
    9d4a:	e5f3      	b.n	9934 <__aeabi_dadd+0x188>
    9d4c:	464e      	mov	r6, r9
    9d4e:	0025      	movs	r5, r4
    9d50:	3e20      	subs	r6, #32
    9d52:	40f5      	lsrs	r5, r6
    9d54:	464b      	mov	r3, r9
    9d56:	002e      	movs	r6, r5
    9d58:	2b20      	cmp	r3, #32
    9d5a:	d02d      	beq.n	9db8 <__aeabi_dadd+0x60c>
    9d5c:	2540      	movs	r5, #64	; 0x40
    9d5e:	1aed      	subs	r5, r5, r3
    9d60:	40ac      	lsls	r4, r5
    9d62:	4327      	orrs	r7, r4
    9d64:	1e7c      	subs	r4, r7, #1
    9d66:	41a7      	sbcs	r7, r4
    9d68:	2400      	movs	r4, #0
    9d6a:	4337      	orrs	r7, r6
    9d6c:	e6c9      	b.n	9b02 <__aeabi_dadd+0x356>
    9d6e:	2480      	movs	r4, #128	; 0x80
    9d70:	2500      	movs	r5, #0
    9d72:	0324      	lsls	r4, r4, #12
    9d74:	4e13      	ldr	r6, [pc, #76]	; (9dc4 <__aeabi_dadd+0x618>)
    9d76:	2700      	movs	r7, #0
    9d78:	e5dc      	b.n	9934 <__aeabi_dadd+0x188>
    9d7a:	4327      	orrs	r7, r4
    9d7c:	1e7c      	subs	r4, r7, #1
    9d7e:	41a7      	sbcs	r7, r4
    9d80:	2400      	movs	r4, #0
    9d82:	e779      	b.n	9c78 <__aeabi_dadd+0x4cc>
    9d84:	000c      	movs	r4, r1
    9d86:	0017      	movs	r7, r2
    9d88:	4e0e      	ldr	r6, [pc, #56]	; (9dc4 <__aeabi_dadd+0x618>)
    9d8a:	e593      	b.n	98b4 <__aeabi_dadd+0x108>
    9d8c:	000c      	movs	r4, r1
    9d8e:	0017      	movs	r7, r2
    9d90:	e590      	b.n	98b4 <__aeabi_dadd+0x108>
    9d92:	4656      	mov	r6, sl
    9d94:	0023      	movs	r3, r4
    9d96:	3e20      	subs	r6, #32
    9d98:	40f3      	lsrs	r3, r6
    9d9a:	4699      	mov	r9, r3
    9d9c:	4653      	mov	r3, sl
    9d9e:	2b20      	cmp	r3, #32
    9da0:	d00e      	beq.n	9dc0 <__aeabi_dadd+0x614>
    9da2:	2340      	movs	r3, #64	; 0x40
    9da4:	4656      	mov	r6, sl
    9da6:	1b9b      	subs	r3, r3, r6
    9da8:	409c      	lsls	r4, r3
    9daa:	4327      	orrs	r7, r4
    9dac:	1e7c      	subs	r4, r7, #1
    9dae:	41a7      	sbcs	r7, r4
    9db0:	464b      	mov	r3, r9
    9db2:	2400      	movs	r4, #0
    9db4:	431f      	orrs	r7, r3
    9db6:	e75f      	b.n	9c78 <__aeabi_dadd+0x4cc>
    9db8:	2400      	movs	r4, #0
    9dba:	e7d2      	b.n	9d62 <__aeabi_dadd+0x5b6>
    9dbc:	0017      	movs	r7, r2
    9dbe:	e5b2      	b.n	9926 <__aeabi_dadd+0x17a>
    9dc0:	2400      	movs	r4, #0
    9dc2:	e7f2      	b.n	9daa <__aeabi_dadd+0x5fe>
    9dc4:	000007ff 	.word	0x000007ff
    9dc8:	ff7fffff 	.word	0xff7fffff

00009dcc <__aeabi_ddiv>:
    9dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dce:	4657      	mov	r7, sl
    9dd0:	4645      	mov	r5, r8
    9dd2:	46de      	mov	lr, fp
    9dd4:	464e      	mov	r6, r9
    9dd6:	b5e0      	push	{r5, r6, r7, lr}
    9dd8:	004c      	lsls	r4, r1, #1
    9dda:	030e      	lsls	r6, r1, #12
    9ddc:	b087      	sub	sp, #28
    9dde:	4683      	mov	fp, r0
    9de0:	4692      	mov	sl, r2
    9de2:	001d      	movs	r5, r3
    9de4:	4680      	mov	r8, r0
    9de6:	0b36      	lsrs	r6, r6, #12
    9de8:	0d64      	lsrs	r4, r4, #21
    9dea:	0fcf      	lsrs	r7, r1, #31
    9dec:	2c00      	cmp	r4, #0
    9dee:	d04f      	beq.n	9e90 <__aeabi_ddiv+0xc4>
    9df0:	4b6f      	ldr	r3, [pc, #444]	; (9fb0 <__aeabi_ddiv+0x1e4>)
    9df2:	429c      	cmp	r4, r3
    9df4:	d035      	beq.n	9e62 <__aeabi_ddiv+0x96>
    9df6:	2380      	movs	r3, #128	; 0x80
    9df8:	0f42      	lsrs	r2, r0, #29
    9dfa:	041b      	lsls	r3, r3, #16
    9dfc:	00f6      	lsls	r6, r6, #3
    9dfe:	4313      	orrs	r3, r2
    9e00:	4333      	orrs	r3, r6
    9e02:	4699      	mov	r9, r3
    9e04:	00c3      	lsls	r3, r0, #3
    9e06:	4698      	mov	r8, r3
    9e08:	4b6a      	ldr	r3, [pc, #424]	; (9fb4 <__aeabi_ddiv+0x1e8>)
    9e0a:	2600      	movs	r6, #0
    9e0c:	469c      	mov	ip, r3
    9e0e:	2300      	movs	r3, #0
    9e10:	4464      	add	r4, ip
    9e12:	9303      	str	r3, [sp, #12]
    9e14:	032b      	lsls	r3, r5, #12
    9e16:	0b1b      	lsrs	r3, r3, #12
    9e18:	469b      	mov	fp, r3
    9e1a:	006b      	lsls	r3, r5, #1
    9e1c:	0fed      	lsrs	r5, r5, #31
    9e1e:	4650      	mov	r0, sl
    9e20:	0d5b      	lsrs	r3, r3, #21
    9e22:	9501      	str	r5, [sp, #4]
    9e24:	d05e      	beq.n	9ee4 <__aeabi_ddiv+0x118>
    9e26:	4a62      	ldr	r2, [pc, #392]	; (9fb0 <__aeabi_ddiv+0x1e4>)
    9e28:	4293      	cmp	r3, r2
    9e2a:	d053      	beq.n	9ed4 <__aeabi_ddiv+0x108>
    9e2c:	465a      	mov	r2, fp
    9e2e:	00d1      	lsls	r1, r2, #3
    9e30:	2280      	movs	r2, #128	; 0x80
    9e32:	0f40      	lsrs	r0, r0, #29
    9e34:	0412      	lsls	r2, r2, #16
    9e36:	4302      	orrs	r2, r0
    9e38:	430a      	orrs	r2, r1
    9e3a:	4693      	mov	fp, r2
    9e3c:	4652      	mov	r2, sl
    9e3e:	00d1      	lsls	r1, r2, #3
    9e40:	4a5c      	ldr	r2, [pc, #368]	; (9fb4 <__aeabi_ddiv+0x1e8>)
    9e42:	4694      	mov	ip, r2
    9e44:	2200      	movs	r2, #0
    9e46:	4463      	add	r3, ip
    9e48:	0038      	movs	r0, r7
    9e4a:	4068      	eors	r0, r5
    9e4c:	4684      	mov	ip, r0
    9e4e:	9002      	str	r0, [sp, #8]
    9e50:	1ae4      	subs	r4, r4, r3
    9e52:	4316      	orrs	r6, r2
    9e54:	2e0f      	cmp	r6, #15
    9e56:	d900      	bls.n	9e5a <__aeabi_ddiv+0x8e>
    9e58:	e0b4      	b.n	9fc4 <__aeabi_ddiv+0x1f8>
    9e5a:	4b57      	ldr	r3, [pc, #348]	; (9fb8 <__aeabi_ddiv+0x1ec>)
    9e5c:	00b6      	lsls	r6, r6, #2
    9e5e:	599b      	ldr	r3, [r3, r6]
    9e60:	469f      	mov	pc, r3
    9e62:	0003      	movs	r3, r0
    9e64:	4333      	orrs	r3, r6
    9e66:	4699      	mov	r9, r3
    9e68:	d16c      	bne.n	9f44 <__aeabi_ddiv+0x178>
    9e6a:	2300      	movs	r3, #0
    9e6c:	4698      	mov	r8, r3
    9e6e:	3302      	adds	r3, #2
    9e70:	2608      	movs	r6, #8
    9e72:	9303      	str	r3, [sp, #12]
    9e74:	e7ce      	b.n	9e14 <__aeabi_ddiv+0x48>
    9e76:	46cb      	mov	fp, r9
    9e78:	4641      	mov	r1, r8
    9e7a:	9a03      	ldr	r2, [sp, #12]
    9e7c:	9701      	str	r7, [sp, #4]
    9e7e:	2a02      	cmp	r2, #2
    9e80:	d165      	bne.n	9f4e <__aeabi_ddiv+0x182>
    9e82:	9b01      	ldr	r3, [sp, #4]
    9e84:	4c4a      	ldr	r4, [pc, #296]	; (9fb0 <__aeabi_ddiv+0x1e4>)
    9e86:	469c      	mov	ip, r3
    9e88:	2300      	movs	r3, #0
    9e8a:	2200      	movs	r2, #0
    9e8c:	4698      	mov	r8, r3
    9e8e:	e06b      	b.n	9f68 <__aeabi_ddiv+0x19c>
    9e90:	0003      	movs	r3, r0
    9e92:	4333      	orrs	r3, r6
    9e94:	4699      	mov	r9, r3
    9e96:	d04e      	beq.n	9f36 <__aeabi_ddiv+0x16a>
    9e98:	2e00      	cmp	r6, #0
    9e9a:	d100      	bne.n	9e9e <__aeabi_ddiv+0xd2>
    9e9c:	e1bc      	b.n	a218 <__aeabi_ddiv+0x44c>
    9e9e:	0030      	movs	r0, r6
    9ea0:	f001 fb08 	bl	b4b4 <__clzsi2>
    9ea4:	0003      	movs	r3, r0
    9ea6:	3b0b      	subs	r3, #11
    9ea8:	2b1c      	cmp	r3, #28
    9eaa:	dd00      	ble.n	9eae <__aeabi_ddiv+0xe2>
    9eac:	e1ac      	b.n	a208 <__aeabi_ddiv+0x43c>
    9eae:	221d      	movs	r2, #29
    9eb0:	1ad3      	subs	r3, r2, r3
    9eb2:	465a      	mov	r2, fp
    9eb4:	0001      	movs	r1, r0
    9eb6:	40da      	lsrs	r2, r3
    9eb8:	3908      	subs	r1, #8
    9eba:	408e      	lsls	r6, r1
    9ebc:	0013      	movs	r3, r2
    9ebe:	4333      	orrs	r3, r6
    9ec0:	4699      	mov	r9, r3
    9ec2:	465b      	mov	r3, fp
    9ec4:	408b      	lsls	r3, r1
    9ec6:	4698      	mov	r8, r3
    9ec8:	2300      	movs	r3, #0
    9eca:	4c3c      	ldr	r4, [pc, #240]	; (9fbc <__aeabi_ddiv+0x1f0>)
    9ecc:	2600      	movs	r6, #0
    9ece:	1a24      	subs	r4, r4, r0
    9ed0:	9303      	str	r3, [sp, #12]
    9ed2:	e79f      	b.n	9e14 <__aeabi_ddiv+0x48>
    9ed4:	4651      	mov	r1, sl
    9ed6:	465a      	mov	r2, fp
    9ed8:	4311      	orrs	r1, r2
    9eda:	d129      	bne.n	9f30 <__aeabi_ddiv+0x164>
    9edc:	2200      	movs	r2, #0
    9ede:	4693      	mov	fp, r2
    9ee0:	3202      	adds	r2, #2
    9ee2:	e7b1      	b.n	9e48 <__aeabi_ddiv+0x7c>
    9ee4:	4659      	mov	r1, fp
    9ee6:	4301      	orrs	r1, r0
    9ee8:	d01e      	beq.n	9f28 <__aeabi_ddiv+0x15c>
    9eea:	465b      	mov	r3, fp
    9eec:	2b00      	cmp	r3, #0
    9eee:	d100      	bne.n	9ef2 <__aeabi_ddiv+0x126>
    9ef0:	e19e      	b.n	a230 <__aeabi_ddiv+0x464>
    9ef2:	4658      	mov	r0, fp
    9ef4:	f001 fade 	bl	b4b4 <__clzsi2>
    9ef8:	0003      	movs	r3, r0
    9efa:	3b0b      	subs	r3, #11
    9efc:	2b1c      	cmp	r3, #28
    9efe:	dd00      	ble.n	9f02 <__aeabi_ddiv+0x136>
    9f00:	e18f      	b.n	a222 <__aeabi_ddiv+0x456>
    9f02:	0002      	movs	r2, r0
    9f04:	4659      	mov	r1, fp
    9f06:	3a08      	subs	r2, #8
    9f08:	4091      	lsls	r1, r2
    9f0a:	468b      	mov	fp, r1
    9f0c:	211d      	movs	r1, #29
    9f0e:	1acb      	subs	r3, r1, r3
    9f10:	4651      	mov	r1, sl
    9f12:	40d9      	lsrs	r1, r3
    9f14:	000b      	movs	r3, r1
    9f16:	4659      	mov	r1, fp
    9f18:	430b      	orrs	r3, r1
    9f1a:	4651      	mov	r1, sl
    9f1c:	469b      	mov	fp, r3
    9f1e:	4091      	lsls	r1, r2
    9f20:	4b26      	ldr	r3, [pc, #152]	; (9fbc <__aeabi_ddiv+0x1f0>)
    9f22:	2200      	movs	r2, #0
    9f24:	1a1b      	subs	r3, r3, r0
    9f26:	e78f      	b.n	9e48 <__aeabi_ddiv+0x7c>
    9f28:	2300      	movs	r3, #0
    9f2a:	2201      	movs	r2, #1
    9f2c:	469b      	mov	fp, r3
    9f2e:	e78b      	b.n	9e48 <__aeabi_ddiv+0x7c>
    9f30:	4651      	mov	r1, sl
    9f32:	2203      	movs	r2, #3
    9f34:	e788      	b.n	9e48 <__aeabi_ddiv+0x7c>
    9f36:	2300      	movs	r3, #0
    9f38:	4698      	mov	r8, r3
    9f3a:	3301      	adds	r3, #1
    9f3c:	2604      	movs	r6, #4
    9f3e:	2400      	movs	r4, #0
    9f40:	9303      	str	r3, [sp, #12]
    9f42:	e767      	b.n	9e14 <__aeabi_ddiv+0x48>
    9f44:	2303      	movs	r3, #3
    9f46:	46b1      	mov	r9, r6
    9f48:	9303      	str	r3, [sp, #12]
    9f4a:	260c      	movs	r6, #12
    9f4c:	e762      	b.n	9e14 <__aeabi_ddiv+0x48>
    9f4e:	2a03      	cmp	r2, #3
    9f50:	d100      	bne.n	9f54 <__aeabi_ddiv+0x188>
    9f52:	e25c      	b.n	a40e <__aeabi_ddiv+0x642>
    9f54:	9b01      	ldr	r3, [sp, #4]
    9f56:	2a01      	cmp	r2, #1
    9f58:	d000      	beq.n	9f5c <__aeabi_ddiv+0x190>
    9f5a:	e1e4      	b.n	a326 <__aeabi_ddiv+0x55a>
    9f5c:	4013      	ands	r3, r2
    9f5e:	469c      	mov	ip, r3
    9f60:	2300      	movs	r3, #0
    9f62:	2400      	movs	r4, #0
    9f64:	2200      	movs	r2, #0
    9f66:	4698      	mov	r8, r3
    9f68:	2100      	movs	r1, #0
    9f6a:	0312      	lsls	r2, r2, #12
    9f6c:	0b13      	lsrs	r3, r2, #12
    9f6e:	0d0a      	lsrs	r2, r1, #20
    9f70:	0512      	lsls	r2, r2, #20
    9f72:	431a      	orrs	r2, r3
    9f74:	0523      	lsls	r3, r4, #20
    9f76:	4c12      	ldr	r4, [pc, #72]	; (9fc0 <__aeabi_ddiv+0x1f4>)
    9f78:	4640      	mov	r0, r8
    9f7a:	4022      	ands	r2, r4
    9f7c:	4313      	orrs	r3, r2
    9f7e:	4662      	mov	r2, ip
    9f80:	005b      	lsls	r3, r3, #1
    9f82:	07d2      	lsls	r2, r2, #31
    9f84:	085b      	lsrs	r3, r3, #1
    9f86:	4313      	orrs	r3, r2
    9f88:	0019      	movs	r1, r3
    9f8a:	b007      	add	sp, #28
    9f8c:	bc3c      	pop	{r2, r3, r4, r5}
    9f8e:	4690      	mov	r8, r2
    9f90:	4699      	mov	r9, r3
    9f92:	46a2      	mov	sl, r4
    9f94:	46ab      	mov	fp, r5
    9f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f98:	2300      	movs	r3, #0
    9f9a:	2280      	movs	r2, #128	; 0x80
    9f9c:	469c      	mov	ip, r3
    9f9e:	0312      	lsls	r2, r2, #12
    9fa0:	4698      	mov	r8, r3
    9fa2:	4c03      	ldr	r4, [pc, #12]	; (9fb0 <__aeabi_ddiv+0x1e4>)
    9fa4:	e7e0      	b.n	9f68 <__aeabi_ddiv+0x19c>
    9fa6:	2300      	movs	r3, #0
    9fa8:	4c01      	ldr	r4, [pc, #4]	; (9fb0 <__aeabi_ddiv+0x1e4>)
    9faa:	2200      	movs	r2, #0
    9fac:	4698      	mov	r8, r3
    9fae:	e7db      	b.n	9f68 <__aeabi_ddiv+0x19c>
    9fb0:	000007ff 	.word	0x000007ff
    9fb4:	fffffc01 	.word	0xfffffc01
    9fb8:	00010ef0 	.word	0x00010ef0
    9fbc:	fffffc0d 	.word	0xfffffc0d
    9fc0:	800fffff 	.word	0x800fffff
    9fc4:	45d9      	cmp	r9, fp
    9fc6:	d900      	bls.n	9fca <__aeabi_ddiv+0x1fe>
    9fc8:	e139      	b.n	a23e <__aeabi_ddiv+0x472>
    9fca:	d100      	bne.n	9fce <__aeabi_ddiv+0x202>
    9fcc:	e134      	b.n	a238 <__aeabi_ddiv+0x46c>
    9fce:	2300      	movs	r3, #0
    9fd0:	4646      	mov	r6, r8
    9fd2:	464d      	mov	r5, r9
    9fd4:	469a      	mov	sl, r3
    9fd6:	3c01      	subs	r4, #1
    9fd8:	465b      	mov	r3, fp
    9fda:	0e0a      	lsrs	r2, r1, #24
    9fdc:	021b      	lsls	r3, r3, #8
    9fde:	431a      	orrs	r2, r3
    9fe0:	020b      	lsls	r3, r1, #8
    9fe2:	0c17      	lsrs	r7, r2, #16
    9fe4:	9303      	str	r3, [sp, #12]
    9fe6:	0413      	lsls	r3, r2, #16
    9fe8:	0c1b      	lsrs	r3, r3, #16
    9fea:	0039      	movs	r1, r7
    9fec:	0028      	movs	r0, r5
    9fee:	4690      	mov	r8, r2
    9ff0:	9301      	str	r3, [sp, #4]
    9ff2:	f7fe faab 	bl	854c <__udivsi3>
    9ff6:	0002      	movs	r2, r0
    9ff8:	9b01      	ldr	r3, [sp, #4]
    9ffa:	4683      	mov	fp, r0
    9ffc:	435a      	muls	r2, r3
    9ffe:	0028      	movs	r0, r5
    a000:	0039      	movs	r1, r7
    a002:	4691      	mov	r9, r2
    a004:	f7fe fb28 	bl	8658 <__aeabi_uidivmod>
    a008:	0c35      	lsrs	r5, r6, #16
    a00a:	0409      	lsls	r1, r1, #16
    a00c:	430d      	orrs	r5, r1
    a00e:	45a9      	cmp	r9, r5
    a010:	d90d      	bls.n	a02e <__aeabi_ddiv+0x262>
    a012:	465b      	mov	r3, fp
    a014:	4445      	add	r5, r8
    a016:	3b01      	subs	r3, #1
    a018:	45a8      	cmp	r8, r5
    a01a:	d900      	bls.n	a01e <__aeabi_ddiv+0x252>
    a01c:	e13a      	b.n	a294 <__aeabi_ddiv+0x4c8>
    a01e:	45a9      	cmp	r9, r5
    a020:	d800      	bhi.n	a024 <__aeabi_ddiv+0x258>
    a022:	e137      	b.n	a294 <__aeabi_ddiv+0x4c8>
    a024:	2302      	movs	r3, #2
    a026:	425b      	negs	r3, r3
    a028:	469c      	mov	ip, r3
    a02a:	4445      	add	r5, r8
    a02c:	44e3      	add	fp, ip
    a02e:	464b      	mov	r3, r9
    a030:	1aeb      	subs	r3, r5, r3
    a032:	0039      	movs	r1, r7
    a034:	0018      	movs	r0, r3
    a036:	9304      	str	r3, [sp, #16]
    a038:	f7fe fa88 	bl	854c <__udivsi3>
    a03c:	9b01      	ldr	r3, [sp, #4]
    a03e:	0005      	movs	r5, r0
    a040:	4343      	muls	r3, r0
    a042:	0039      	movs	r1, r7
    a044:	9804      	ldr	r0, [sp, #16]
    a046:	4699      	mov	r9, r3
    a048:	f7fe fb06 	bl	8658 <__aeabi_uidivmod>
    a04c:	0433      	lsls	r3, r6, #16
    a04e:	0409      	lsls	r1, r1, #16
    a050:	0c1b      	lsrs	r3, r3, #16
    a052:	430b      	orrs	r3, r1
    a054:	4599      	cmp	r9, r3
    a056:	d909      	bls.n	a06c <__aeabi_ddiv+0x2a0>
    a058:	4443      	add	r3, r8
    a05a:	1e6a      	subs	r2, r5, #1
    a05c:	4598      	cmp	r8, r3
    a05e:	d900      	bls.n	a062 <__aeabi_ddiv+0x296>
    a060:	e11a      	b.n	a298 <__aeabi_ddiv+0x4cc>
    a062:	4599      	cmp	r9, r3
    a064:	d800      	bhi.n	a068 <__aeabi_ddiv+0x29c>
    a066:	e117      	b.n	a298 <__aeabi_ddiv+0x4cc>
    a068:	3d02      	subs	r5, #2
    a06a:	4443      	add	r3, r8
    a06c:	464a      	mov	r2, r9
    a06e:	1a9b      	subs	r3, r3, r2
    a070:	465a      	mov	r2, fp
    a072:	0412      	lsls	r2, r2, #16
    a074:	432a      	orrs	r2, r5
    a076:	9903      	ldr	r1, [sp, #12]
    a078:	4693      	mov	fp, r2
    a07a:	0c10      	lsrs	r0, r2, #16
    a07c:	0c0a      	lsrs	r2, r1, #16
    a07e:	4691      	mov	r9, r2
    a080:	0409      	lsls	r1, r1, #16
    a082:	465a      	mov	r2, fp
    a084:	0c09      	lsrs	r1, r1, #16
    a086:	464e      	mov	r6, r9
    a088:	000d      	movs	r5, r1
    a08a:	0412      	lsls	r2, r2, #16
    a08c:	0c12      	lsrs	r2, r2, #16
    a08e:	4345      	muls	r5, r0
    a090:	9105      	str	r1, [sp, #20]
    a092:	4351      	muls	r1, r2
    a094:	4372      	muls	r2, r6
    a096:	4370      	muls	r0, r6
    a098:	1952      	adds	r2, r2, r5
    a09a:	0c0e      	lsrs	r6, r1, #16
    a09c:	18b2      	adds	r2, r6, r2
    a09e:	4295      	cmp	r5, r2
    a0a0:	d903      	bls.n	a0aa <__aeabi_ddiv+0x2de>
    a0a2:	2580      	movs	r5, #128	; 0x80
    a0a4:	026d      	lsls	r5, r5, #9
    a0a6:	46ac      	mov	ip, r5
    a0a8:	4460      	add	r0, ip
    a0aa:	0c15      	lsrs	r5, r2, #16
    a0ac:	0409      	lsls	r1, r1, #16
    a0ae:	0412      	lsls	r2, r2, #16
    a0b0:	0c09      	lsrs	r1, r1, #16
    a0b2:	1828      	adds	r0, r5, r0
    a0b4:	1852      	adds	r2, r2, r1
    a0b6:	4283      	cmp	r3, r0
    a0b8:	d200      	bcs.n	a0bc <__aeabi_ddiv+0x2f0>
    a0ba:	e0ce      	b.n	a25a <__aeabi_ddiv+0x48e>
    a0bc:	d100      	bne.n	a0c0 <__aeabi_ddiv+0x2f4>
    a0be:	e0c8      	b.n	a252 <__aeabi_ddiv+0x486>
    a0c0:	1a1d      	subs	r5, r3, r0
    a0c2:	4653      	mov	r3, sl
    a0c4:	1a9e      	subs	r6, r3, r2
    a0c6:	45b2      	cmp	sl, r6
    a0c8:	4192      	sbcs	r2, r2
    a0ca:	4252      	negs	r2, r2
    a0cc:	1aab      	subs	r3, r5, r2
    a0ce:	469a      	mov	sl, r3
    a0d0:	4598      	cmp	r8, r3
    a0d2:	d100      	bne.n	a0d6 <__aeabi_ddiv+0x30a>
    a0d4:	e117      	b.n	a306 <__aeabi_ddiv+0x53a>
    a0d6:	0039      	movs	r1, r7
    a0d8:	0018      	movs	r0, r3
    a0da:	f7fe fa37 	bl	854c <__udivsi3>
    a0de:	9b01      	ldr	r3, [sp, #4]
    a0e0:	0005      	movs	r5, r0
    a0e2:	4343      	muls	r3, r0
    a0e4:	0039      	movs	r1, r7
    a0e6:	4650      	mov	r0, sl
    a0e8:	9304      	str	r3, [sp, #16]
    a0ea:	f7fe fab5 	bl	8658 <__aeabi_uidivmod>
    a0ee:	9804      	ldr	r0, [sp, #16]
    a0f0:	040b      	lsls	r3, r1, #16
    a0f2:	0c31      	lsrs	r1, r6, #16
    a0f4:	4319      	orrs	r1, r3
    a0f6:	4288      	cmp	r0, r1
    a0f8:	d909      	bls.n	a10e <__aeabi_ddiv+0x342>
    a0fa:	4441      	add	r1, r8
    a0fc:	1e6b      	subs	r3, r5, #1
    a0fe:	4588      	cmp	r8, r1
    a100:	d900      	bls.n	a104 <__aeabi_ddiv+0x338>
    a102:	e107      	b.n	a314 <__aeabi_ddiv+0x548>
    a104:	4288      	cmp	r0, r1
    a106:	d800      	bhi.n	a10a <__aeabi_ddiv+0x33e>
    a108:	e104      	b.n	a314 <__aeabi_ddiv+0x548>
    a10a:	3d02      	subs	r5, #2
    a10c:	4441      	add	r1, r8
    a10e:	9b04      	ldr	r3, [sp, #16]
    a110:	1acb      	subs	r3, r1, r3
    a112:	0018      	movs	r0, r3
    a114:	0039      	movs	r1, r7
    a116:	9304      	str	r3, [sp, #16]
    a118:	f7fe fa18 	bl	854c <__udivsi3>
    a11c:	9b01      	ldr	r3, [sp, #4]
    a11e:	4682      	mov	sl, r0
    a120:	4343      	muls	r3, r0
    a122:	0039      	movs	r1, r7
    a124:	9804      	ldr	r0, [sp, #16]
    a126:	9301      	str	r3, [sp, #4]
    a128:	f7fe fa96 	bl	8658 <__aeabi_uidivmod>
    a12c:	9801      	ldr	r0, [sp, #4]
    a12e:	040b      	lsls	r3, r1, #16
    a130:	0431      	lsls	r1, r6, #16
    a132:	0c09      	lsrs	r1, r1, #16
    a134:	4319      	orrs	r1, r3
    a136:	4288      	cmp	r0, r1
    a138:	d90d      	bls.n	a156 <__aeabi_ddiv+0x38a>
    a13a:	4653      	mov	r3, sl
    a13c:	4441      	add	r1, r8
    a13e:	3b01      	subs	r3, #1
    a140:	4588      	cmp	r8, r1
    a142:	d900      	bls.n	a146 <__aeabi_ddiv+0x37a>
    a144:	e0e8      	b.n	a318 <__aeabi_ddiv+0x54c>
    a146:	4288      	cmp	r0, r1
    a148:	d800      	bhi.n	a14c <__aeabi_ddiv+0x380>
    a14a:	e0e5      	b.n	a318 <__aeabi_ddiv+0x54c>
    a14c:	2302      	movs	r3, #2
    a14e:	425b      	negs	r3, r3
    a150:	469c      	mov	ip, r3
    a152:	4441      	add	r1, r8
    a154:	44e2      	add	sl, ip
    a156:	9b01      	ldr	r3, [sp, #4]
    a158:	042d      	lsls	r5, r5, #16
    a15a:	1ace      	subs	r6, r1, r3
    a15c:	4651      	mov	r1, sl
    a15e:	4329      	orrs	r1, r5
    a160:	9d05      	ldr	r5, [sp, #20]
    a162:	464f      	mov	r7, r9
    a164:	002a      	movs	r2, r5
    a166:	040b      	lsls	r3, r1, #16
    a168:	0c08      	lsrs	r0, r1, #16
    a16a:	0c1b      	lsrs	r3, r3, #16
    a16c:	435a      	muls	r2, r3
    a16e:	4345      	muls	r5, r0
    a170:	437b      	muls	r3, r7
    a172:	4378      	muls	r0, r7
    a174:	195b      	adds	r3, r3, r5
    a176:	0c17      	lsrs	r7, r2, #16
    a178:	18fb      	adds	r3, r7, r3
    a17a:	429d      	cmp	r5, r3
    a17c:	d903      	bls.n	a186 <__aeabi_ddiv+0x3ba>
    a17e:	2580      	movs	r5, #128	; 0x80
    a180:	026d      	lsls	r5, r5, #9
    a182:	46ac      	mov	ip, r5
    a184:	4460      	add	r0, ip
    a186:	0c1d      	lsrs	r5, r3, #16
    a188:	0412      	lsls	r2, r2, #16
    a18a:	041b      	lsls	r3, r3, #16
    a18c:	0c12      	lsrs	r2, r2, #16
    a18e:	1828      	adds	r0, r5, r0
    a190:	189b      	adds	r3, r3, r2
    a192:	4286      	cmp	r6, r0
    a194:	d200      	bcs.n	a198 <__aeabi_ddiv+0x3cc>
    a196:	e093      	b.n	a2c0 <__aeabi_ddiv+0x4f4>
    a198:	d100      	bne.n	a19c <__aeabi_ddiv+0x3d0>
    a19a:	e08e      	b.n	a2ba <__aeabi_ddiv+0x4ee>
    a19c:	2301      	movs	r3, #1
    a19e:	4319      	orrs	r1, r3
    a1a0:	4ba0      	ldr	r3, [pc, #640]	; (a424 <__aeabi_ddiv+0x658>)
    a1a2:	18e3      	adds	r3, r4, r3
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	dc00      	bgt.n	a1aa <__aeabi_ddiv+0x3de>
    a1a8:	e099      	b.n	a2de <__aeabi_ddiv+0x512>
    a1aa:	074a      	lsls	r2, r1, #29
    a1ac:	d000      	beq.n	a1b0 <__aeabi_ddiv+0x3e4>
    a1ae:	e09e      	b.n	a2ee <__aeabi_ddiv+0x522>
    a1b0:	465a      	mov	r2, fp
    a1b2:	01d2      	lsls	r2, r2, #7
    a1b4:	d506      	bpl.n	a1c4 <__aeabi_ddiv+0x3f8>
    a1b6:	465a      	mov	r2, fp
    a1b8:	4b9b      	ldr	r3, [pc, #620]	; (a428 <__aeabi_ddiv+0x65c>)
    a1ba:	401a      	ands	r2, r3
    a1bc:	2380      	movs	r3, #128	; 0x80
    a1be:	4693      	mov	fp, r2
    a1c0:	00db      	lsls	r3, r3, #3
    a1c2:	18e3      	adds	r3, r4, r3
    a1c4:	4a99      	ldr	r2, [pc, #612]	; (a42c <__aeabi_ddiv+0x660>)
    a1c6:	4293      	cmp	r3, r2
    a1c8:	dd68      	ble.n	a29c <__aeabi_ddiv+0x4d0>
    a1ca:	2301      	movs	r3, #1
    a1cc:	9a02      	ldr	r2, [sp, #8]
    a1ce:	4c98      	ldr	r4, [pc, #608]	; (a430 <__aeabi_ddiv+0x664>)
    a1d0:	401a      	ands	r2, r3
    a1d2:	2300      	movs	r3, #0
    a1d4:	4694      	mov	ip, r2
    a1d6:	4698      	mov	r8, r3
    a1d8:	2200      	movs	r2, #0
    a1da:	e6c5      	b.n	9f68 <__aeabi_ddiv+0x19c>
    a1dc:	2280      	movs	r2, #128	; 0x80
    a1de:	464b      	mov	r3, r9
    a1e0:	0312      	lsls	r2, r2, #12
    a1e2:	4213      	tst	r3, r2
    a1e4:	d00a      	beq.n	a1fc <__aeabi_ddiv+0x430>
    a1e6:	465b      	mov	r3, fp
    a1e8:	4213      	tst	r3, r2
    a1ea:	d106      	bne.n	a1fa <__aeabi_ddiv+0x42e>
    a1ec:	431a      	orrs	r2, r3
    a1ee:	0312      	lsls	r2, r2, #12
    a1f0:	0b12      	lsrs	r2, r2, #12
    a1f2:	46ac      	mov	ip, r5
    a1f4:	4688      	mov	r8, r1
    a1f6:	4c8e      	ldr	r4, [pc, #568]	; (a430 <__aeabi_ddiv+0x664>)
    a1f8:	e6b6      	b.n	9f68 <__aeabi_ddiv+0x19c>
    a1fa:	464b      	mov	r3, r9
    a1fc:	431a      	orrs	r2, r3
    a1fe:	0312      	lsls	r2, r2, #12
    a200:	0b12      	lsrs	r2, r2, #12
    a202:	46bc      	mov	ip, r7
    a204:	4c8a      	ldr	r4, [pc, #552]	; (a430 <__aeabi_ddiv+0x664>)
    a206:	e6af      	b.n	9f68 <__aeabi_ddiv+0x19c>
    a208:	0003      	movs	r3, r0
    a20a:	465a      	mov	r2, fp
    a20c:	3b28      	subs	r3, #40	; 0x28
    a20e:	409a      	lsls	r2, r3
    a210:	2300      	movs	r3, #0
    a212:	4691      	mov	r9, r2
    a214:	4698      	mov	r8, r3
    a216:	e657      	b.n	9ec8 <__aeabi_ddiv+0xfc>
    a218:	4658      	mov	r0, fp
    a21a:	f001 f94b 	bl	b4b4 <__clzsi2>
    a21e:	3020      	adds	r0, #32
    a220:	e640      	b.n	9ea4 <__aeabi_ddiv+0xd8>
    a222:	0003      	movs	r3, r0
    a224:	4652      	mov	r2, sl
    a226:	3b28      	subs	r3, #40	; 0x28
    a228:	409a      	lsls	r2, r3
    a22a:	2100      	movs	r1, #0
    a22c:	4693      	mov	fp, r2
    a22e:	e677      	b.n	9f20 <__aeabi_ddiv+0x154>
    a230:	f001 f940 	bl	b4b4 <__clzsi2>
    a234:	3020      	adds	r0, #32
    a236:	e65f      	b.n	9ef8 <__aeabi_ddiv+0x12c>
    a238:	4588      	cmp	r8, r1
    a23a:	d200      	bcs.n	a23e <__aeabi_ddiv+0x472>
    a23c:	e6c7      	b.n	9fce <__aeabi_ddiv+0x202>
    a23e:	464b      	mov	r3, r9
    a240:	07de      	lsls	r6, r3, #31
    a242:	085d      	lsrs	r5, r3, #1
    a244:	4643      	mov	r3, r8
    a246:	085b      	lsrs	r3, r3, #1
    a248:	431e      	orrs	r6, r3
    a24a:	4643      	mov	r3, r8
    a24c:	07db      	lsls	r3, r3, #31
    a24e:	469a      	mov	sl, r3
    a250:	e6c2      	b.n	9fd8 <__aeabi_ddiv+0x20c>
    a252:	2500      	movs	r5, #0
    a254:	4592      	cmp	sl, r2
    a256:	d300      	bcc.n	a25a <__aeabi_ddiv+0x48e>
    a258:	e733      	b.n	a0c2 <__aeabi_ddiv+0x2f6>
    a25a:	9e03      	ldr	r6, [sp, #12]
    a25c:	4659      	mov	r1, fp
    a25e:	46b4      	mov	ip, r6
    a260:	44e2      	add	sl, ip
    a262:	45b2      	cmp	sl, r6
    a264:	41ad      	sbcs	r5, r5
    a266:	426d      	negs	r5, r5
    a268:	4445      	add	r5, r8
    a26a:	18eb      	adds	r3, r5, r3
    a26c:	3901      	subs	r1, #1
    a26e:	4598      	cmp	r8, r3
    a270:	d207      	bcs.n	a282 <__aeabi_ddiv+0x4b6>
    a272:	4298      	cmp	r0, r3
    a274:	d900      	bls.n	a278 <__aeabi_ddiv+0x4ac>
    a276:	e07f      	b.n	a378 <__aeabi_ddiv+0x5ac>
    a278:	d100      	bne.n	a27c <__aeabi_ddiv+0x4b0>
    a27a:	e0bc      	b.n	a3f6 <__aeabi_ddiv+0x62a>
    a27c:	1a1d      	subs	r5, r3, r0
    a27e:	468b      	mov	fp, r1
    a280:	e71f      	b.n	a0c2 <__aeabi_ddiv+0x2f6>
    a282:	4598      	cmp	r8, r3
    a284:	d1fa      	bne.n	a27c <__aeabi_ddiv+0x4b0>
    a286:	9d03      	ldr	r5, [sp, #12]
    a288:	4555      	cmp	r5, sl
    a28a:	d9f2      	bls.n	a272 <__aeabi_ddiv+0x4a6>
    a28c:	4643      	mov	r3, r8
    a28e:	468b      	mov	fp, r1
    a290:	1a1d      	subs	r5, r3, r0
    a292:	e716      	b.n	a0c2 <__aeabi_ddiv+0x2f6>
    a294:	469b      	mov	fp, r3
    a296:	e6ca      	b.n	a02e <__aeabi_ddiv+0x262>
    a298:	0015      	movs	r5, r2
    a29a:	e6e7      	b.n	a06c <__aeabi_ddiv+0x2a0>
    a29c:	465a      	mov	r2, fp
    a29e:	08c9      	lsrs	r1, r1, #3
    a2a0:	0752      	lsls	r2, r2, #29
    a2a2:	430a      	orrs	r2, r1
    a2a4:	055b      	lsls	r3, r3, #21
    a2a6:	4690      	mov	r8, r2
    a2a8:	0d5c      	lsrs	r4, r3, #21
    a2aa:	465a      	mov	r2, fp
    a2ac:	2301      	movs	r3, #1
    a2ae:	9902      	ldr	r1, [sp, #8]
    a2b0:	0252      	lsls	r2, r2, #9
    a2b2:	4019      	ands	r1, r3
    a2b4:	0b12      	lsrs	r2, r2, #12
    a2b6:	468c      	mov	ip, r1
    a2b8:	e656      	b.n	9f68 <__aeabi_ddiv+0x19c>
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	d100      	bne.n	a2c0 <__aeabi_ddiv+0x4f4>
    a2be:	e76f      	b.n	a1a0 <__aeabi_ddiv+0x3d4>
    a2c0:	4446      	add	r6, r8
    a2c2:	1e4a      	subs	r2, r1, #1
    a2c4:	45b0      	cmp	r8, r6
    a2c6:	d929      	bls.n	a31c <__aeabi_ddiv+0x550>
    a2c8:	0011      	movs	r1, r2
    a2ca:	4286      	cmp	r6, r0
    a2cc:	d000      	beq.n	a2d0 <__aeabi_ddiv+0x504>
    a2ce:	e765      	b.n	a19c <__aeabi_ddiv+0x3d0>
    a2d0:	9a03      	ldr	r2, [sp, #12]
    a2d2:	4293      	cmp	r3, r2
    a2d4:	d000      	beq.n	a2d8 <__aeabi_ddiv+0x50c>
    a2d6:	e761      	b.n	a19c <__aeabi_ddiv+0x3d0>
    a2d8:	e762      	b.n	a1a0 <__aeabi_ddiv+0x3d4>
    a2da:	2101      	movs	r1, #1
    a2dc:	4249      	negs	r1, r1
    a2de:	2001      	movs	r0, #1
    a2e0:	1ac2      	subs	r2, r0, r3
    a2e2:	2a38      	cmp	r2, #56	; 0x38
    a2e4:	dd21      	ble.n	a32a <__aeabi_ddiv+0x55e>
    a2e6:	9b02      	ldr	r3, [sp, #8]
    a2e8:	4003      	ands	r3, r0
    a2ea:	469c      	mov	ip, r3
    a2ec:	e638      	b.n	9f60 <__aeabi_ddiv+0x194>
    a2ee:	220f      	movs	r2, #15
    a2f0:	400a      	ands	r2, r1
    a2f2:	2a04      	cmp	r2, #4
    a2f4:	d100      	bne.n	a2f8 <__aeabi_ddiv+0x52c>
    a2f6:	e75b      	b.n	a1b0 <__aeabi_ddiv+0x3e4>
    a2f8:	000a      	movs	r2, r1
    a2fa:	1d11      	adds	r1, r2, #4
    a2fc:	4291      	cmp	r1, r2
    a2fe:	4192      	sbcs	r2, r2
    a300:	4252      	negs	r2, r2
    a302:	4493      	add	fp, r2
    a304:	e754      	b.n	a1b0 <__aeabi_ddiv+0x3e4>
    a306:	4b47      	ldr	r3, [pc, #284]	; (a424 <__aeabi_ddiv+0x658>)
    a308:	18e3      	adds	r3, r4, r3
    a30a:	2b00      	cmp	r3, #0
    a30c:	dde5      	ble.n	a2da <__aeabi_ddiv+0x50e>
    a30e:	2201      	movs	r2, #1
    a310:	4252      	negs	r2, r2
    a312:	e7f2      	b.n	a2fa <__aeabi_ddiv+0x52e>
    a314:	001d      	movs	r5, r3
    a316:	e6fa      	b.n	a10e <__aeabi_ddiv+0x342>
    a318:	469a      	mov	sl, r3
    a31a:	e71c      	b.n	a156 <__aeabi_ddiv+0x38a>
    a31c:	42b0      	cmp	r0, r6
    a31e:	d839      	bhi.n	a394 <__aeabi_ddiv+0x5c8>
    a320:	d06e      	beq.n	a400 <__aeabi_ddiv+0x634>
    a322:	0011      	movs	r1, r2
    a324:	e73a      	b.n	a19c <__aeabi_ddiv+0x3d0>
    a326:	9302      	str	r3, [sp, #8]
    a328:	e73a      	b.n	a1a0 <__aeabi_ddiv+0x3d4>
    a32a:	2a1f      	cmp	r2, #31
    a32c:	dc3c      	bgt.n	a3a8 <__aeabi_ddiv+0x5dc>
    a32e:	2320      	movs	r3, #32
    a330:	1a9b      	subs	r3, r3, r2
    a332:	000c      	movs	r4, r1
    a334:	4658      	mov	r0, fp
    a336:	4099      	lsls	r1, r3
    a338:	4098      	lsls	r0, r3
    a33a:	1e4b      	subs	r3, r1, #1
    a33c:	4199      	sbcs	r1, r3
    a33e:	465b      	mov	r3, fp
    a340:	40d4      	lsrs	r4, r2
    a342:	40d3      	lsrs	r3, r2
    a344:	4320      	orrs	r0, r4
    a346:	4308      	orrs	r0, r1
    a348:	001a      	movs	r2, r3
    a34a:	0743      	lsls	r3, r0, #29
    a34c:	d009      	beq.n	a362 <__aeabi_ddiv+0x596>
    a34e:	230f      	movs	r3, #15
    a350:	4003      	ands	r3, r0
    a352:	2b04      	cmp	r3, #4
    a354:	d005      	beq.n	a362 <__aeabi_ddiv+0x596>
    a356:	0001      	movs	r1, r0
    a358:	1d08      	adds	r0, r1, #4
    a35a:	4288      	cmp	r0, r1
    a35c:	419b      	sbcs	r3, r3
    a35e:	425b      	negs	r3, r3
    a360:	18d2      	adds	r2, r2, r3
    a362:	0213      	lsls	r3, r2, #8
    a364:	d53a      	bpl.n	a3dc <__aeabi_ddiv+0x610>
    a366:	2301      	movs	r3, #1
    a368:	9a02      	ldr	r2, [sp, #8]
    a36a:	2401      	movs	r4, #1
    a36c:	401a      	ands	r2, r3
    a36e:	2300      	movs	r3, #0
    a370:	4694      	mov	ip, r2
    a372:	4698      	mov	r8, r3
    a374:	2200      	movs	r2, #0
    a376:	e5f7      	b.n	9f68 <__aeabi_ddiv+0x19c>
    a378:	2102      	movs	r1, #2
    a37a:	4249      	negs	r1, r1
    a37c:	468c      	mov	ip, r1
    a37e:	9d03      	ldr	r5, [sp, #12]
    a380:	44e3      	add	fp, ip
    a382:	46ac      	mov	ip, r5
    a384:	44e2      	add	sl, ip
    a386:	45aa      	cmp	sl, r5
    a388:	41ad      	sbcs	r5, r5
    a38a:	426d      	negs	r5, r5
    a38c:	4445      	add	r5, r8
    a38e:	18ed      	adds	r5, r5, r3
    a390:	1a2d      	subs	r5, r5, r0
    a392:	e696      	b.n	a0c2 <__aeabi_ddiv+0x2f6>
    a394:	1e8a      	subs	r2, r1, #2
    a396:	9903      	ldr	r1, [sp, #12]
    a398:	004d      	lsls	r5, r1, #1
    a39a:	428d      	cmp	r5, r1
    a39c:	4189      	sbcs	r1, r1
    a39e:	4249      	negs	r1, r1
    a3a0:	4441      	add	r1, r8
    a3a2:	1876      	adds	r6, r6, r1
    a3a4:	9503      	str	r5, [sp, #12]
    a3a6:	e78f      	b.n	a2c8 <__aeabi_ddiv+0x4fc>
    a3a8:	201f      	movs	r0, #31
    a3aa:	4240      	negs	r0, r0
    a3ac:	1ac3      	subs	r3, r0, r3
    a3ae:	4658      	mov	r0, fp
    a3b0:	40d8      	lsrs	r0, r3
    a3b2:	0003      	movs	r3, r0
    a3b4:	2a20      	cmp	r2, #32
    a3b6:	d028      	beq.n	a40a <__aeabi_ddiv+0x63e>
    a3b8:	2040      	movs	r0, #64	; 0x40
    a3ba:	465d      	mov	r5, fp
    a3bc:	1a82      	subs	r2, r0, r2
    a3be:	4095      	lsls	r5, r2
    a3c0:	4329      	orrs	r1, r5
    a3c2:	1e4a      	subs	r2, r1, #1
    a3c4:	4191      	sbcs	r1, r2
    a3c6:	4319      	orrs	r1, r3
    a3c8:	2307      	movs	r3, #7
    a3ca:	2200      	movs	r2, #0
    a3cc:	400b      	ands	r3, r1
    a3ce:	d009      	beq.n	a3e4 <__aeabi_ddiv+0x618>
    a3d0:	230f      	movs	r3, #15
    a3d2:	2200      	movs	r2, #0
    a3d4:	400b      	ands	r3, r1
    a3d6:	0008      	movs	r0, r1
    a3d8:	2b04      	cmp	r3, #4
    a3da:	d1bd      	bne.n	a358 <__aeabi_ddiv+0x58c>
    a3dc:	0001      	movs	r1, r0
    a3de:	0753      	lsls	r3, r2, #29
    a3e0:	0252      	lsls	r2, r2, #9
    a3e2:	0b12      	lsrs	r2, r2, #12
    a3e4:	08c9      	lsrs	r1, r1, #3
    a3e6:	4319      	orrs	r1, r3
    a3e8:	2301      	movs	r3, #1
    a3ea:	4688      	mov	r8, r1
    a3ec:	9902      	ldr	r1, [sp, #8]
    a3ee:	2400      	movs	r4, #0
    a3f0:	4019      	ands	r1, r3
    a3f2:	468c      	mov	ip, r1
    a3f4:	e5b8      	b.n	9f68 <__aeabi_ddiv+0x19c>
    a3f6:	4552      	cmp	r2, sl
    a3f8:	d8be      	bhi.n	a378 <__aeabi_ddiv+0x5ac>
    a3fa:	468b      	mov	fp, r1
    a3fc:	2500      	movs	r5, #0
    a3fe:	e660      	b.n	a0c2 <__aeabi_ddiv+0x2f6>
    a400:	9d03      	ldr	r5, [sp, #12]
    a402:	429d      	cmp	r5, r3
    a404:	d3c6      	bcc.n	a394 <__aeabi_ddiv+0x5c8>
    a406:	0011      	movs	r1, r2
    a408:	e762      	b.n	a2d0 <__aeabi_ddiv+0x504>
    a40a:	2500      	movs	r5, #0
    a40c:	e7d8      	b.n	a3c0 <__aeabi_ddiv+0x5f4>
    a40e:	2280      	movs	r2, #128	; 0x80
    a410:	465b      	mov	r3, fp
    a412:	0312      	lsls	r2, r2, #12
    a414:	431a      	orrs	r2, r3
    a416:	9b01      	ldr	r3, [sp, #4]
    a418:	0312      	lsls	r2, r2, #12
    a41a:	0b12      	lsrs	r2, r2, #12
    a41c:	469c      	mov	ip, r3
    a41e:	4688      	mov	r8, r1
    a420:	4c03      	ldr	r4, [pc, #12]	; (a430 <__aeabi_ddiv+0x664>)
    a422:	e5a1      	b.n	9f68 <__aeabi_ddiv+0x19c>
    a424:	000003ff 	.word	0x000003ff
    a428:	feffffff 	.word	0xfeffffff
    a42c:	000007fe 	.word	0x000007fe
    a430:	000007ff 	.word	0x000007ff

0000a434 <__eqdf2>:
    a434:	b5f0      	push	{r4, r5, r6, r7, lr}
    a436:	464f      	mov	r7, r9
    a438:	4646      	mov	r6, r8
    a43a:	46d6      	mov	lr, sl
    a43c:	005c      	lsls	r4, r3, #1
    a43e:	b5c0      	push	{r6, r7, lr}
    a440:	031f      	lsls	r7, r3, #12
    a442:	0fdb      	lsrs	r3, r3, #31
    a444:	469a      	mov	sl, r3
    a446:	4b17      	ldr	r3, [pc, #92]	; (a4a4 <__eqdf2+0x70>)
    a448:	030e      	lsls	r6, r1, #12
    a44a:	004d      	lsls	r5, r1, #1
    a44c:	4684      	mov	ip, r0
    a44e:	4680      	mov	r8, r0
    a450:	0b36      	lsrs	r6, r6, #12
    a452:	0d6d      	lsrs	r5, r5, #21
    a454:	0fc9      	lsrs	r1, r1, #31
    a456:	4691      	mov	r9, r2
    a458:	0b3f      	lsrs	r7, r7, #12
    a45a:	0d64      	lsrs	r4, r4, #21
    a45c:	2001      	movs	r0, #1
    a45e:	429d      	cmp	r5, r3
    a460:	d008      	beq.n	a474 <__eqdf2+0x40>
    a462:	429c      	cmp	r4, r3
    a464:	d001      	beq.n	a46a <__eqdf2+0x36>
    a466:	42a5      	cmp	r5, r4
    a468:	d00b      	beq.n	a482 <__eqdf2+0x4e>
    a46a:	bc1c      	pop	{r2, r3, r4}
    a46c:	4690      	mov	r8, r2
    a46e:	4699      	mov	r9, r3
    a470:	46a2      	mov	sl, r4
    a472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a474:	4663      	mov	r3, ip
    a476:	4333      	orrs	r3, r6
    a478:	d1f7      	bne.n	a46a <__eqdf2+0x36>
    a47a:	42ac      	cmp	r4, r5
    a47c:	d1f5      	bne.n	a46a <__eqdf2+0x36>
    a47e:	433a      	orrs	r2, r7
    a480:	d1f3      	bne.n	a46a <__eqdf2+0x36>
    a482:	2001      	movs	r0, #1
    a484:	42be      	cmp	r6, r7
    a486:	d1f0      	bne.n	a46a <__eqdf2+0x36>
    a488:	45c8      	cmp	r8, r9
    a48a:	d1ee      	bne.n	a46a <__eqdf2+0x36>
    a48c:	4551      	cmp	r1, sl
    a48e:	d007      	beq.n	a4a0 <__eqdf2+0x6c>
    a490:	2d00      	cmp	r5, #0
    a492:	d1ea      	bne.n	a46a <__eqdf2+0x36>
    a494:	4663      	mov	r3, ip
    a496:	431e      	orrs	r6, r3
    a498:	0030      	movs	r0, r6
    a49a:	1e46      	subs	r6, r0, #1
    a49c:	41b0      	sbcs	r0, r6
    a49e:	e7e4      	b.n	a46a <__eqdf2+0x36>
    a4a0:	2000      	movs	r0, #0
    a4a2:	e7e2      	b.n	a46a <__eqdf2+0x36>
    a4a4:	000007ff 	.word	0x000007ff

0000a4a8 <__gedf2>:
    a4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4aa:	4645      	mov	r5, r8
    a4ac:	46de      	mov	lr, fp
    a4ae:	4657      	mov	r7, sl
    a4b0:	464e      	mov	r6, r9
    a4b2:	b5e0      	push	{r5, r6, r7, lr}
    a4b4:	031f      	lsls	r7, r3, #12
    a4b6:	0b3d      	lsrs	r5, r7, #12
    a4b8:	4f2c      	ldr	r7, [pc, #176]	; (a56c <__gedf2+0xc4>)
    a4ba:	030e      	lsls	r6, r1, #12
    a4bc:	004c      	lsls	r4, r1, #1
    a4be:	46ab      	mov	fp, r5
    a4c0:	005d      	lsls	r5, r3, #1
    a4c2:	4684      	mov	ip, r0
    a4c4:	0b36      	lsrs	r6, r6, #12
    a4c6:	0d64      	lsrs	r4, r4, #21
    a4c8:	0fc9      	lsrs	r1, r1, #31
    a4ca:	4690      	mov	r8, r2
    a4cc:	0d6d      	lsrs	r5, r5, #21
    a4ce:	0fdb      	lsrs	r3, r3, #31
    a4d0:	42bc      	cmp	r4, r7
    a4d2:	d02a      	beq.n	a52a <__gedf2+0x82>
    a4d4:	4f25      	ldr	r7, [pc, #148]	; (a56c <__gedf2+0xc4>)
    a4d6:	42bd      	cmp	r5, r7
    a4d8:	d02d      	beq.n	a536 <__gedf2+0x8e>
    a4da:	2c00      	cmp	r4, #0
    a4dc:	d10f      	bne.n	a4fe <__gedf2+0x56>
    a4de:	4330      	orrs	r0, r6
    a4e0:	0007      	movs	r7, r0
    a4e2:	4681      	mov	r9, r0
    a4e4:	4278      	negs	r0, r7
    a4e6:	4178      	adcs	r0, r7
    a4e8:	b2c0      	uxtb	r0, r0
    a4ea:	2d00      	cmp	r5, #0
    a4ec:	d117      	bne.n	a51e <__gedf2+0x76>
    a4ee:	465f      	mov	r7, fp
    a4f0:	433a      	orrs	r2, r7
    a4f2:	d114      	bne.n	a51e <__gedf2+0x76>
    a4f4:	464b      	mov	r3, r9
    a4f6:	2000      	movs	r0, #0
    a4f8:	2b00      	cmp	r3, #0
    a4fa:	d00a      	beq.n	a512 <__gedf2+0x6a>
    a4fc:	e006      	b.n	a50c <__gedf2+0x64>
    a4fe:	2d00      	cmp	r5, #0
    a500:	d102      	bne.n	a508 <__gedf2+0x60>
    a502:	4658      	mov	r0, fp
    a504:	4302      	orrs	r2, r0
    a506:	d001      	beq.n	a50c <__gedf2+0x64>
    a508:	4299      	cmp	r1, r3
    a50a:	d018      	beq.n	a53e <__gedf2+0x96>
    a50c:	4248      	negs	r0, r1
    a50e:	2101      	movs	r1, #1
    a510:	4308      	orrs	r0, r1
    a512:	bc3c      	pop	{r2, r3, r4, r5}
    a514:	4690      	mov	r8, r2
    a516:	4699      	mov	r9, r3
    a518:	46a2      	mov	sl, r4
    a51a:	46ab      	mov	fp, r5
    a51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a51e:	2800      	cmp	r0, #0
    a520:	d0f2      	beq.n	a508 <__gedf2+0x60>
    a522:	2001      	movs	r0, #1
    a524:	3b01      	subs	r3, #1
    a526:	4318      	orrs	r0, r3
    a528:	e7f3      	b.n	a512 <__gedf2+0x6a>
    a52a:	0037      	movs	r7, r6
    a52c:	4307      	orrs	r7, r0
    a52e:	d0d1      	beq.n	a4d4 <__gedf2+0x2c>
    a530:	2002      	movs	r0, #2
    a532:	4240      	negs	r0, r0
    a534:	e7ed      	b.n	a512 <__gedf2+0x6a>
    a536:	465f      	mov	r7, fp
    a538:	4317      	orrs	r7, r2
    a53a:	d0ce      	beq.n	a4da <__gedf2+0x32>
    a53c:	e7f8      	b.n	a530 <__gedf2+0x88>
    a53e:	42ac      	cmp	r4, r5
    a540:	dce4      	bgt.n	a50c <__gedf2+0x64>
    a542:	da03      	bge.n	a54c <__gedf2+0xa4>
    a544:	1e48      	subs	r0, r1, #1
    a546:	2101      	movs	r1, #1
    a548:	4308      	orrs	r0, r1
    a54a:	e7e2      	b.n	a512 <__gedf2+0x6a>
    a54c:	455e      	cmp	r6, fp
    a54e:	d8dd      	bhi.n	a50c <__gedf2+0x64>
    a550:	d006      	beq.n	a560 <__gedf2+0xb8>
    a552:	2000      	movs	r0, #0
    a554:	455e      	cmp	r6, fp
    a556:	d2dc      	bcs.n	a512 <__gedf2+0x6a>
    a558:	2301      	movs	r3, #1
    a55a:	1e48      	subs	r0, r1, #1
    a55c:	4318      	orrs	r0, r3
    a55e:	e7d8      	b.n	a512 <__gedf2+0x6a>
    a560:	45c4      	cmp	ip, r8
    a562:	d8d3      	bhi.n	a50c <__gedf2+0x64>
    a564:	2000      	movs	r0, #0
    a566:	45c4      	cmp	ip, r8
    a568:	d3f6      	bcc.n	a558 <__gedf2+0xb0>
    a56a:	e7d2      	b.n	a512 <__gedf2+0x6a>
    a56c:	000007ff 	.word	0x000007ff

0000a570 <__ledf2>:
    a570:	b5f0      	push	{r4, r5, r6, r7, lr}
    a572:	464e      	mov	r6, r9
    a574:	4645      	mov	r5, r8
    a576:	46de      	mov	lr, fp
    a578:	4657      	mov	r7, sl
    a57a:	005c      	lsls	r4, r3, #1
    a57c:	b5e0      	push	{r5, r6, r7, lr}
    a57e:	031f      	lsls	r7, r3, #12
    a580:	0fdb      	lsrs	r3, r3, #31
    a582:	4699      	mov	r9, r3
    a584:	4b2a      	ldr	r3, [pc, #168]	; (a630 <__ledf2+0xc0>)
    a586:	030e      	lsls	r6, r1, #12
    a588:	004d      	lsls	r5, r1, #1
    a58a:	0fc9      	lsrs	r1, r1, #31
    a58c:	4684      	mov	ip, r0
    a58e:	0b36      	lsrs	r6, r6, #12
    a590:	0d6d      	lsrs	r5, r5, #21
    a592:	468b      	mov	fp, r1
    a594:	4690      	mov	r8, r2
    a596:	0b3f      	lsrs	r7, r7, #12
    a598:	0d64      	lsrs	r4, r4, #21
    a59a:	429d      	cmp	r5, r3
    a59c:	d020      	beq.n	a5e0 <__ledf2+0x70>
    a59e:	4b24      	ldr	r3, [pc, #144]	; (a630 <__ledf2+0xc0>)
    a5a0:	429c      	cmp	r4, r3
    a5a2:	d022      	beq.n	a5ea <__ledf2+0x7a>
    a5a4:	2d00      	cmp	r5, #0
    a5a6:	d112      	bne.n	a5ce <__ledf2+0x5e>
    a5a8:	4330      	orrs	r0, r6
    a5aa:	4243      	negs	r3, r0
    a5ac:	4143      	adcs	r3, r0
    a5ae:	b2db      	uxtb	r3, r3
    a5b0:	2c00      	cmp	r4, #0
    a5b2:	d01f      	beq.n	a5f4 <__ledf2+0x84>
    a5b4:	2b00      	cmp	r3, #0
    a5b6:	d00c      	beq.n	a5d2 <__ledf2+0x62>
    a5b8:	464b      	mov	r3, r9
    a5ba:	2001      	movs	r0, #1
    a5bc:	3b01      	subs	r3, #1
    a5be:	4303      	orrs	r3, r0
    a5c0:	0018      	movs	r0, r3
    a5c2:	bc3c      	pop	{r2, r3, r4, r5}
    a5c4:	4690      	mov	r8, r2
    a5c6:	4699      	mov	r9, r3
    a5c8:	46a2      	mov	sl, r4
    a5ca:	46ab      	mov	fp, r5
    a5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5ce:	2c00      	cmp	r4, #0
    a5d0:	d016      	beq.n	a600 <__ledf2+0x90>
    a5d2:	45cb      	cmp	fp, r9
    a5d4:	d017      	beq.n	a606 <__ledf2+0x96>
    a5d6:	465b      	mov	r3, fp
    a5d8:	4259      	negs	r1, r3
    a5da:	2301      	movs	r3, #1
    a5dc:	430b      	orrs	r3, r1
    a5de:	e7ef      	b.n	a5c0 <__ledf2+0x50>
    a5e0:	0031      	movs	r1, r6
    a5e2:	2302      	movs	r3, #2
    a5e4:	4301      	orrs	r1, r0
    a5e6:	d1eb      	bne.n	a5c0 <__ledf2+0x50>
    a5e8:	e7d9      	b.n	a59e <__ledf2+0x2e>
    a5ea:	0039      	movs	r1, r7
    a5ec:	2302      	movs	r3, #2
    a5ee:	4311      	orrs	r1, r2
    a5f0:	d1e6      	bne.n	a5c0 <__ledf2+0x50>
    a5f2:	e7d7      	b.n	a5a4 <__ledf2+0x34>
    a5f4:	433a      	orrs	r2, r7
    a5f6:	d1dd      	bne.n	a5b4 <__ledf2+0x44>
    a5f8:	2300      	movs	r3, #0
    a5fa:	2800      	cmp	r0, #0
    a5fc:	d0e0      	beq.n	a5c0 <__ledf2+0x50>
    a5fe:	e7ea      	b.n	a5d6 <__ledf2+0x66>
    a600:	433a      	orrs	r2, r7
    a602:	d1e6      	bne.n	a5d2 <__ledf2+0x62>
    a604:	e7e7      	b.n	a5d6 <__ledf2+0x66>
    a606:	42a5      	cmp	r5, r4
    a608:	dce5      	bgt.n	a5d6 <__ledf2+0x66>
    a60a:	db05      	blt.n	a618 <__ledf2+0xa8>
    a60c:	42be      	cmp	r6, r7
    a60e:	d8e2      	bhi.n	a5d6 <__ledf2+0x66>
    a610:	d007      	beq.n	a622 <__ledf2+0xb2>
    a612:	2300      	movs	r3, #0
    a614:	42be      	cmp	r6, r7
    a616:	d2d3      	bcs.n	a5c0 <__ledf2+0x50>
    a618:	4659      	mov	r1, fp
    a61a:	2301      	movs	r3, #1
    a61c:	3901      	subs	r1, #1
    a61e:	430b      	orrs	r3, r1
    a620:	e7ce      	b.n	a5c0 <__ledf2+0x50>
    a622:	45c4      	cmp	ip, r8
    a624:	d8d7      	bhi.n	a5d6 <__ledf2+0x66>
    a626:	2300      	movs	r3, #0
    a628:	45c4      	cmp	ip, r8
    a62a:	d3f5      	bcc.n	a618 <__ledf2+0xa8>
    a62c:	e7c8      	b.n	a5c0 <__ledf2+0x50>
    a62e:	46c0      	nop			; (mov r8, r8)
    a630:	000007ff 	.word	0x000007ff

0000a634 <__aeabi_dmul>:
    a634:	b5f0      	push	{r4, r5, r6, r7, lr}
    a636:	4657      	mov	r7, sl
    a638:	4645      	mov	r5, r8
    a63a:	46de      	mov	lr, fp
    a63c:	464e      	mov	r6, r9
    a63e:	b5e0      	push	{r5, r6, r7, lr}
    a640:	030c      	lsls	r4, r1, #12
    a642:	4698      	mov	r8, r3
    a644:	004e      	lsls	r6, r1, #1
    a646:	0b23      	lsrs	r3, r4, #12
    a648:	b087      	sub	sp, #28
    a64a:	0007      	movs	r7, r0
    a64c:	4692      	mov	sl, r2
    a64e:	469b      	mov	fp, r3
    a650:	0d76      	lsrs	r6, r6, #21
    a652:	0fcd      	lsrs	r5, r1, #31
    a654:	2e00      	cmp	r6, #0
    a656:	d06b      	beq.n	a730 <__aeabi_dmul+0xfc>
    a658:	4b6d      	ldr	r3, [pc, #436]	; (a810 <__aeabi_dmul+0x1dc>)
    a65a:	429e      	cmp	r6, r3
    a65c:	d035      	beq.n	a6ca <__aeabi_dmul+0x96>
    a65e:	2480      	movs	r4, #128	; 0x80
    a660:	465b      	mov	r3, fp
    a662:	0f42      	lsrs	r2, r0, #29
    a664:	0424      	lsls	r4, r4, #16
    a666:	00db      	lsls	r3, r3, #3
    a668:	4314      	orrs	r4, r2
    a66a:	431c      	orrs	r4, r3
    a66c:	00c3      	lsls	r3, r0, #3
    a66e:	4699      	mov	r9, r3
    a670:	4b68      	ldr	r3, [pc, #416]	; (a814 <__aeabi_dmul+0x1e0>)
    a672:	46a3      	mov	fp, r4
    a674:	469c      	mov	ip, r3
    a676:	2300      	movs	r3, #0
    a678:	2700      	movs	r7, #0
    a67a:	4466      	add	r6, ip
    a67c:	9302      	str	r3, [sp, #8]
    a67e:	4643      	mov	r3, r8
    a680:	031c      	lsls	r4, r3, #12
    a682:	005a      	lsls	r2, r3, #1
    a684:	0fdb      	lsrs	r3, r3, #31
    a686:	4650      	mov	r0, sl
    a688:	0b24      	lsrs	r4, r4, #12
    a68a:	0d52      	lsrs	r2, r2, #21
    a68c:	4698      	mov	r8, r3
    a68e:	d100      	bne.n	a692 <__aeabi_dmul+0x5e>
    a690:	e076      	b.n	a780 <__aeabi_dmul+0x14c>
    a692:	4b5f      	ldr	r3, [pc, #380]	; (a810 <__aeabi_dmul+0x1dc>)
    a694:	429a      	cmp	r2, r3
    a696:	d06d      	beq.n	a774 <__aeabi_dmul+0x140>
    a698:	2380      	movs	r3, #128	; 0x80
    a69a:	0f41      	lsrs	r1, r0, #29
    a69c:	041b      	lsls	r3, r3, #16
    a69e:	430b      	orrs	r3, r1
    a6a0:	495c      	ldr	r1, [pc, #368]	; (a814 <__aeabi_dmul+0x1e0>)
    a6a2:	00e4      	lsls	r4, r4, #3
    a6a4:	468c      	mov	ip, r1
    a6a6:	431c      	orrs	r4, r3
    a6a8:	00c3      	lsls	r3, r0, #3
    a6aa:	2000      	movs	r0, #0
    a6ac:	4462      	add	r2, ip
    a6ae:	4641      	mov	r1, r8
    a6b0:	18b6      	adds	r6, r6, r2
    a6b2:	4069      	eors	r1, r5
    a6b4:	1c72      	adds	r2, r6, #1
    a6b6:	9101      	str	r1, [sp, #4]
    a6b8:	4694      	mov	ip, r2
    a6ba:	4307      	orrs	r7, r0
    a6bc:	2f0f      	cmp	r7, #15
    a6be:	d900      	bls.n	a6c2 <__aeabi_dmul+0x8e>
    a6c0:	e0b0      	b.n	a824 <__aeabi_dmul+0x1f0>
    a6c2:	4a55      	ldr	r2, [pc, #340]	; (a818 <__aeabi_dmul+0x1e4>)
    a6c4:	00bf      	lsls	r7, r7, #2
    a6c6:	59d2      	ldr	r2, [r2, r7]
    a6c8:	4697      	mov	pc, r2
    a6ca:	465b      	mov	r3, fp
    a6cc:	4303      	orrs	r3, r0
    a6ce:	4699      	mov	r9, r3
    a6d0:	d000      	beq.n	a6d4 <__aeabi_dmul+0xa0>
    a6d2:	e087      	b.n	a7e4 <__aeabi_dmul+0x1b0>
    a6d4:	2300      	movs	r3, #0
    a6d6:	469b      	mov	fp, r3
    a6d8:	3302      	adds	r3, #2
    a6da:	2708      	movs	r7, #8
    a6dc:	9302      	str	r3, [sp, #8]
    a6de:	e7ce      	b.n	a67e <__aeabi_dmul+0x4a>
    a6e0:	4642      	mov	r2, r8
    a6e2:	9201      	str	r2, [sp, #4]
    a6e4:	2802      	cmp	r0, #2
    a6e6:	d067      	beq.n	a7b8 <__aeabi_dmul+0x184>
    a6e8:	2803      	cmp	r0, #3
    a6ea:	d100      	bne.n	a6ee <__aeabi_dmul+0xba>
    a6ec:	e20e      	b.n	ab0c <__aeabi_dmul+0x4d8>
    a6ee:	2801      	cmp	r0, #1
    a6f0:	d000      	beq.n	a6f4 <__aeabi_dmul+0xc0>
    a6f2:	e162      	b.n	a9ba <__aeabi_dmul+0x386>
    a6f4:	2300      	movs	r3, #0
    a6f6:	2400      	movs	r4, #0
    a6f8:	2200      	movs	r2, #0
    a6fa:	4699      	mov	r9, r3
    a6fc:	9901      	ldr	r1, [sp, #4]
    a6fe:	4001      	ands	r1, r0
    a700:	b2cd      	uxtb	r5, r1
    a702:	2100      	movs	r1, #0
    a704:	0312      	lsls	r2, r2, #12
    a706:	0d0b      	lsrs	r3, r1, #20
    a708:	0b12      	lsrs	r2, r2, #12
    a70a:	051b      	lsls	r3, r3, #20
    a70c:	4313      	orrs	r3, r2
    a70e:	4a43      	ldr	r2, [pc, #268]	; (a81c <__aeabi_dmul+0x1e8>)
    a710:	0524      	lsls	r4, r4, #20
    a712:	4013      	ands	r3, r2
    a714:	431c      	orrs	r4, r3
    a716:	0064      	lsls	r4, r4, #1
    a718:	07ed      	lsls	r5, r5, #31
    a71a:	0864      	lsrs	r4, r4, #1
    a71c:	432c      	orrs	r4, r5
    a71e:	4648      	mov	r0, r9
    a720:	0021      	movs	r1, r4
    a722:	b007      	add	sp, #28
    a724:	bc3c      	pop	{r2, r3, r4, r5}
    a726:	4690      	mov	r8, r2
    a728:	4699      	mov	r9, r3
    a72a:	46a2      	mov	sl, r4
    a72c:	46ab      	mov	fp, r5
    a72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a730:	4303      	orrs	r3, r0
    a732:	4699      	mov	r9, r3
    a734:	d04f      	beq.n	a7d6 <__aeabi_dmul+0x1a2>
    a736:	465b      	mov	r3, fp
    a738:	2b00      	cmp	r3, #0
    a73a:	d100      	bne.n	a73e <__aeabi_dmul+0x10a>
    a73c:	e189      	b.n	aa52 <__aeabi_dmul+0x41e>
    a73e:	4658      	mov	r0, fp
    a740:	f000 feb8 	bl	b4b4 <__clzsi2>
    a744:	0003      	movs	r3, r0
    a746:	3b0b      	subs	r3, #11
    a748:	2b1c      	cmp	r3, #28
    a74a:	dd00      	ble.n	a74e <__aeabi_dmul+0x11a>
    a74c:	e17a      	b.n	aa44 <__aeabi_dmul+0x410>
    a74e:	221d      	movs	r2, #29
    a750:	1ad3      	subs	r3, r2, r3
    a752:	003a      	movs	r2, r7
    a754:	0001      	movs	r1, r0
    a756:	465c      	mov	r4, fp
    a758:	40da      	lsrs	r2, r3
    a75a:	3908      	subs	r1, #8
    a75c:	408c      	lsls	r4, r1
    a75e:	0013      	movs	r3, r2
    a760:	408f      	lsls	r7, r1
    a762:	4323      	orrs	r3, r4
    a764:	469b      	mov	fp, r3
    a766:	46b9      	mov	r9, r7
    a768:	2300      	movs	r3, #0
    a76a:	4e2d      	ldr	r6, [pc, #180]	; (a820 <__aeabi_dmul+0x1ec>)
    a76c:	2700      	movs	r7, #0
    a76e:	1a36      	subs	r6, r6, r0
    a770:	9302      	str	r3, [sp, #8]
    a772:	e784      	b.n	a67e <__aeabi_dmul+0x4a>
    a774:	4653      	mov	r3, sl
    a776:	4323      	orrs	r3, r4
    a778:	d12a      	bne.n	a7d0 <__aeabi_dmul+0x19c>
    a77a:	2400      	movs	r4, #0
    a77c:	2002      	movs	r0, #2
    a77e:	e796      	b.n	a6ae <__aeabi_dmul+0x7a>
    a780:	4653      	mov	r3, sl
    a782:	4323      	orrs	r3, r4
    a784:	d020      	beq.n	a7c8 <__aeabi_dmul+0x194>
    a786:	2c00      	cmp	r4, #0
    a788:	d100      	bne.n	a78c <__aeabi_dmul+0x158>
    a78a:	e157      	b.n	aa3c <__aeabi_dmul+0x408>
    a78c:	0020      	movs	r0, r4
    a78e:	f000 fe91 	bl	b4b4 <__clzsi2>
    a792:	0003      	movs	r3, r0
    a794:	3b0b      	subs	r3, #11
    a796:	2b1c      	cmp	r3, #28
    a798:	dd00      	ble.n	a79c <__aeabi_dmul+0x168>
    a79a:	e149      	b.n	aa30 <__aeabi_dmul+0x3fc>
    a79c:	211d      	movs	r1, #29
    a79e:	1acb      	subs	r3, r1, r3
    a7a0:	4651      	mov	r1, sl
    a7a2:	0002      	movs	r2, r0
    a7a4:	40d9      	lsrs	r1, r3
    a7a6:	4653      	mov	r3, sl
    a7a8:	3a08      	subs	r2, #8
    a7aa:	4094      	lsls	r4, r2
    a7ac:	4093      	lsls	r3, r2
    a7ae:	430c      	orrs	r4, r1
    a7b0:	4a1b      	ldr	r2, [pc, #108]	; (a820 <__aeabi_dmul+0x1ec>)
    a7b2:	1a12      	subs	r2, r2, r0
    a7b4:	2000      	movs	r0, #0
    a7b6:	e77a      	b.n	a6ae <__aeabi_dmul+0x7a>
    a7b8:	2501      	movs	r5, #1
    a7ba:	9b01      	ldr	r3, [sp, #4]
    a7bc:	4c14      	ldr	r4, [pc, #80]	; (a810 <__aeabi_dmul+0x1dc>)
    a7be:	401d      	ands	r5, r3
    a7c0:	2300      	movs	r3, #0
    a7c2:	2200      	movs	r2, #0
    a7c4:	4699      	mov	r9, r3
    a7c6:	e79c      	b.n	a702 <__aeabi_dmul+0xce>
    a7c8:	2400      	movs	r4, #0
    a7ca:	2200      	movs	r2, #0
    a7cc:	2001      	movs	r0, #1
    a7ce:	e76e      	b.n	a6ae <__aeabi_dmul+0x7a>
    a7d0:	4653      	mov	r3, sl
    a7d2:	2003      	movs	r0, #3
    a7d4:	e76b      	b.n	a6ae <__aeabi_dmul+0x7a>
    a7d6:	2300      	movs	r3, #0
    a7d8:	469b      	mov	fp, r3
    a7da:	3301      	adds	r3, #1
    a7dc:	2704      	movs	r7, #4
    a7de:	2600      	movs	r6, #0
    a7e0:	9302      	str	r3, [sp, #8]
    a7e2:	e74c      	b.n	a67e <__aeabi_dmul+0x4a>
    a7e4:	2303      	movs	r3, #3
    a7e6:	4681      	mov	r9, r0
    a7e8:	270c      	movs	r7, #12
    a7ea:	9302      	str	r3, [sp, #8]
    a7ec:	e747      	b.n	a67e <__aeabi_dmul+0x4a>
    a7ee:	2280      	movs	r2, #128	; 0x80
    a7f0:	2300      	movs	r3, #0
    a7f2:	2500      	movs	r5, #0
    a7f4:	0312      	lsls	r2, r2, #12
    a7f6:	4699      	mov	r9, r3
    a7f8:	4c05      	ldr	r4, [pc, #20]	; (a810 <__aeabi_dmul+0x1dc>)
    a7fa:	e782      	b.n	a702 <__aeabi_dmul+0xce>
    a7fc:	465c      	mov	r4, fp
    a7fe:	464b      	mov	r3, r9
    a800:	9802      	ldr	r0, [sp, #8]
    a802:	e76f      	b.n	a6e4 <__aeabi_dmul+0xb0>
    a804:	465c      	mov	r4, fp
    a806:	464b      	mov	r3, r9
    a808:	9501      	str	r5, [sp, #4]
    a80a:	9802      	ldr	r0, [sp, #8]
    a80c:	e76a      	b.n	a6e4 <__aeabi_dmul+0xb0>
    a80e:	46c0      	nop			; (mov r8, r8)
    a810:	000007ff 	.word	0x000007ff
    a814:	fffffc01 	.word	0xfffffc01
    a818:	00010f30 	.word	0x00010f30
    a81c:	800fffff 	.word	0x800fffff
    a820:	fffffc0d 	.word	0xfffffc0d
    a824:	464a      	mov	r2, r9
    a826:	4649      	mov	r1, r9
    a828:	0c17      	lsrs	r7, r2, #16
    a82a:	0c1a      	lsrs	r2, r3, #16
    a82c:	041b      	lsls	r3, r3, #16
    a82e:	0c1b      	lsrs	r3, r3, #16
    a830:	0408      	lsls	r0, r1, #16
    a832:	0019      	movs	r1, r3
    a834:	0c00      	lsrs	r0, r0, #16
    a836:	4341      	muls	r1, r0
    a838:	0015      	movs	r5, r2
    a83a:	4688      	mov	r8, r1
    a83c:	0019      	movs	r1, r3
    a83e:	437d      	muls	r5, r7
    a840:	4379      	muls	r1, r7
    a842:	9503      	str	r5, [sp, #12]
    a844:	4689      	mov	r9, r1
    a846:	0029      	movs	r1, r5
    a848:	0015      	movs	r5, r2
    a84a:	4345      	muls	r5, r0
    a84c:	444d      	add	r5, r9
    a84e:	9502      	str	r5, [sp, #8]
    a850:	4645      	mov	r5, r8
    a852:	0c2d      	lsrs	r5, r5, #16
    a854:	46aa      	mov	sl, r5
    a856:	9d02      	ldr	r5, [sp, #8]
    a858:	4455      	add	r5, sl
    a85a:	45a9      	cmp	r9, r5
    a85c:	d906      	bls.n	a86c <__aeabi_dmul+0x238>
    a85e:	468a      	mov	sl, r1
    a860:	2180      	movs	r1, #128	; 0x80
    a862:	0249      	lsls	r1, r1, #9
    a864:	4689      	mov	r9, r1
    a866:	44ca      	add	sl, r9
    a868:	4651      	mov	r1, sl
    a86a:	9103      	str	r1, [sp, #12]
    a86c:	0c29      	lsrs	r1, r5, #16
    a86e:	9104      	str	r1, [sp, #16]
    a870:	4641      	mov	r1, r8
    a872:	0409      	lsls	r1, r1, #16
    a874:	042d      	lsls	r5, r5, #16
    a876:	0c09      	lsrs	r1, r1, #16
    a878:	4688      	mov	r8, r1
    a87a:	0029      	movs	r1, r5
    a87c:	0c25      	lsrs	r5, r4, #16
    a87e:	0424      	lsls	r4, r4, #16
    a880:	4441      	add	r1, r8
    a882:	0c24      	lsrs	r4, r4, #16
    a884:	9105      	str	r1, [sp, #20]
    a886:	0021      	movs	r1, r4
    a888:	4341      	muls	r1, r0
    a88a:	4688      	mov	r8, r1
    a88c:	0021      	movs	r1, r4
    a88e:	4379      	muls	r1, r7
    a890:	468a      	mov	sl, r1
    a892:	4368      	muls	r0, r5
    a894:	4641      	mov	r1, r8
    a896:	4450      	add	r0, sl
    a898:	4681      	mov	r9, r0
    a89a:	0c08      	lsrs	r0, r1, #16
    a89c:	4448      	add	r0, r9
    a89e:	436f      	muls	r7, r5
    a8a0:	4582      	cmp	sl, r0
    a8a2:	d903      	bls.n	a8ac <__aeabi_dmul+0x278>
    a8a4:	2180      	movs	r1, #128	; 0x80
    a8a6:	0249      	lsls	r1, r1, #9
    a8a8:	4689      	mov	r9, r1
    a8aa:	444f      	add	r7, r9
    a8ac:	0c01      	lsrs	r1, r0, #16
    a8ae:	4689      	mov	r9, r1
    a8b0:	0039      	movs	r1, r7
    a8b2:	4449      	add	r1, r9
    a8b4:	9102      	str	r1, [sp, #8]
    a8b6:	4641      	mov	r1, r8
    a8b8:	040f      	lsls	r7, r1, #16
    a8ba:	9904      	ldr	r1, [sp, #16]
    a8bc:	0c3f      	lsrs	r7, r7, #16
    a8be:	4688      	mov	r8, r1
    a8c0:	0400      	lsls	r0, r0, #16
    a8c2:	19c0      	adds	r0, r0, r7
    a8c4:	4480      	add	r8, r0
    a8c6:	4641      	mov	r1, r8
    a8c8:	9104      	str	r1, [sp, #16]
    a8ca:	4659      	mov	r1, fp
    a8cc:	0c0f      	lsrs	r7, r1, #16
    a8ce:	0409      	lsls	r1, r1, #16
    a8d0:	0c09      	lsrs	r1, r1, #16
    a8d2:	4688      	mov	r8, r1
    a8d4:	4359      	muls	r1, r3
    a8d6:	468a      	mov	sl, r1
    a8d8:	0039      	movs	r1, r7
    a8da:	4351      	muls	r1, r2
    a8dc:	4689      	mov	r9, r1
    a8de:	4641      	mov	r1, r8
    a8e0:	434a      	muls	r2, r1
    a8e2:	4651      	mov	r1, sl
    a8e4:	0c09      	lsrs	r1, r1, #16
    a8e6:	468b      	mov	fp, r1
    a8e8:	437b      	muls	r3, r7
    a8ea:	18d2      	adds	r2, r2, r3
    a8ec:	445a      	add	r2, fp
    a8ee:	4293      	cmp	r3, r2
    a8f0:	d903      	bls.n	a8fa <__aeabi_dmul+0x2c6>
    a8f2:	2380      	movs	r3, #128	; 0x80
    a8f4:	025b      	lsls	r3, r3, #9
    a8f6:	469b      	mov	fp, r3
    a8f8:	44d9      	add	r9, fp
    a8fa:	4651      	mov	r1, sl
    a8fc:	0409      	lsls	r1, r1, #16
    a8fe:	0c09      	lsrs	r1, r1, #16
    a900:	468a      	mov	sl, r1
    a902:	4641      	mov	r1, r8
    a904:	4361      	muls	r1, r4
    a906:	437c      	muls	r4, r7
    a908:	0c13      	lsrs	r3, r2, #16
    a90a:	0412      	lsls	r2, r2, #16
    a90c:	444b      	add	r3, r9
    a90e:	4452      	add	r2, sl
    a910:	46a1      	mov	r9, r4
    a912:	468a      	mov	sl, r1
    a914:	003c      	movs	r4, r7
    a916:	4641      	mov	r1, r8
    a918:	436c      	muls	r4, r5
    a91a:	434d      	muls	r5, r1
    a91c:	4651      	mov	r1, sl
    a91e:	444d      	add	r5, r9
    a920:	0c0f      	lsrs	r7, r1, #16
    a922:	197d      	adds	r5, r7, r5
    a924:	45a9      	cmp	r9, r5
    a926:	d903      	bls.n	a930 <__aeabi_dmul+0x2fc>
    a928:	2180      	movs	r1, #128	; 0x80
    a92a:	0249      	lsls	r1, r1, #9
    a92c:	4688      	mov	r8, r1
    a92e:	4444      	add	r4, r8
    a930:	9f04      	ldr	r7, [sp, #16]
    a932:	9903      	ldr	r1, [sp, #12]
    a934:	46b8      	mov	r8, r7
    a936:	4441      	add	r1, r8
    a938:	468b      	mov	fp, r1
    a93a:	4583      	cmp	fp, r0
    a93c:	4180      	sbcs	r0, r0
    a93e:	4241      	negs	r1, r0
    a940:	4688      	mov	r8, r1
    a942:	4651      	mov	r1, sl
    a944:	0408      	lsls	r0, r1, #16
    a946:	042f      	lsls	r7, r5, #16
    a948:	0c00      	lsrs	r0, r0, #16
    a94a:	183f      	adds	r7, r7, r0
    a94c:	4658      	mov	r0, fp
    a94e:	9902      	ldr	r1, [sp, #8]
    a950:	1810      	adds	r0, r2, r0
    a952:	4689      	mov	r9, r1
    a954:	4290      	cmp	r0, r2
    a956:	4192      	sbcs	r2, r2
    a958:	444f      	add	r7, r9
    a95a:	46ba      	mov	sl, r7
    a95c:	4252      	negs	r2, r2
    a95e:	4699      	mov	r9, r3
    a960:	4693      	mov	fp, r2
    a962:	44c2      	add	sl, r8
    a964:	44d1      	add	r9, sl
    a966:	44cb      	add	fp, r9
    a968:	428f      	cmp	r7, r1
    a96a:	41bf      	sbcs	r7, r7
    a96c:	45c2      	cmp	sl, r8
    a96e:	4189      	sbcs	r1, r1
    a970:	4599      	cmp	r9, r3
    a972:	419b      	sbcs	r3, r3
    a974:	4593      	cmp	fp, r2
    a976:	4192      	sbcs	r2, r2
    a978:	427f      	negs	r7, r7
    a97a:	4249      	negs	r1, r1
    a97c:	0c2d      	lsrs	r5, r5, #16
    a97e:	4252      	negs	r2, r2
    a980:	430f      	orrs	r7, r1
    a982:	425b      	negs	r3, r3
    a984:	4313      	orrs	r3, r2
    a986:	197f      	adds	r7, r7, r5
    a988:	18ff      	adds	r7, r7, r3
    a98a:	465b      	mov	r3, fp
    a98c:	193c      	adds	r4, r7, r4
    a98e:	0ddb      	lsrs	r3, r3, #23
    a990:	9a05      	ldr	r2, [sp, #20]
    a992:	0264      	lsls	r4, r4, #9
    a994:	431c      	orrs	r4, r3
    a996:	0243      	lsls	r3, r0, #9
    a998:	4313      	orrs	r3, r2
    a99a:	1e5d      	subs	r5, r3, #1
    a99c:	41ab      	sbcs	r3, r5
    a99e:	465a      	mov	r2, fp
    a9a0:	0dc0      	lsrs	r0, r0, #23
    a9a2:	4303      	orrs	r3, r0
    a9a4:	0252      	lsls	r2, r2, #9
    a9a6:	4313      	orrs	r3, r2
    a9a8:	01e2      	lsls	r2, r4, #7
    a9aa:	d556      	bpl.n	aa5a <__aeabi_dmul+0x426>
    a9ac:	2001      	movs	r0, #1
    a9ae:	085a      	lsrs	r2, r3, #1
    a9b0:	4003      	ands	r3, r0
    a9b2:	4313      	orrs	r3, r2
    a9b4:	07e2      	lsls	r2, r4, #31
    a9b6:	4313      	orrs	r3, r2
    a9b8:	0864      	lsrs	r4, r4, #1
    a9ba:	485a      	ldr	r0, [pc, #360]	; (ab24 <__aeabi_dmul+0x4f0>)
    a9bc:	4460      	add	r0, ip
    a9be:	2800      	cmp	r0, #0
    a9c0:	dd4d      	ble.n	aa5e <__aeabi_dmul+0x42a>
    a9c2:	075a      	lsls	r2, r3, #29
    a9c4:	d009      	beq.n	a9da <__aeabi_dmul+0x3a6>
    a9c6:	220f      	movs	r2, #15
    a9c8:	401a      	ands	r2, r3
    a9ca:	2a04      	cmp	r2, #4
    a9cc:	d005      	beq.n	a9da <__aeabi_dmul+0x3a6>
    a9ce:	1d1a      	adds	r2, r3, #4
    a9d0:	429a      	cmp	r2, r3
    a9d2:	419b      	sbcs	r3, r3
    a9d4:	425b      	negs	r3, r3
    a9d6:	18e4      	adds	r4, r4, r3
    a9d8:	0013      	movs	r3, r2
    a9da:	01e2      	lsls	r2, r4, #7
    a9dc:	d504      	bpl.n	a9e8 <__aeabi_dmul+0x3b4>
    a9de:	2080      	movs	r0, #128	; 0x80
    a9e0:	4a51      	ldr	r2, [pc, #324]	; (ab28 <__aeabi_dmul+0x4f4>)
    a9e2:	00c0      	lsls	r0, r0, #3
    a9e4:	4014      	ands	r4, r2
    a9e6:	4460      	add	r0, ip
    a9e8:	4a50      	ldr	r2, [pc, #320]	; (ab2c <__aeabi_dmul+0x4f8>)
    a9ea:	4290      	cmp	r0, r2
    a9ec:	dd00      	ble.n	a9f0 <__aeabi_dmul+0x3bc>
    a9ee:	e6e3      	b.n	a7b8 <__aeabi_dmul+0x184>
    a9f0:	2501      	movs	r5, #1
    a9f2:	08db      	lsrs	r3, r3, #3
    a9f4:	0762      	lsls	r2, r4, #29
    a9f6:	431a      	orrs	r2, r3
    a9f8:	0264      	lsls	r4, r4, #9
    a9fa:	9b01      	ldr	r3, [sp, #4]
    a9fc:	4691      	mov	r9, r2
    a9fe:	0b22      	lsrs	r2, r4, #12
    aa00:	0544      	lsls	r4, r0, #21
    aa02:	0d64      	lsrs	r4, r4, #21
    aa04:	401d      	ands	r5, r3
    aa06:	e67c      	b.n	a702 <__aeabi_dmul+0xce>
    aa08:	2280      	movs	r2, #128	; 0x80
    aa0a:	4659      	mov	r1, fp
    aa0c:	0312      	lsls	r2, r2, #12
    aa0e:	4211      	tst	r1, r2
    aa10:	d008      	beq.n	aa24 <__aeabi_dmul+0x3f0>
    aa12:	4214      	tst	r4, r2
    aa14:	d106      	bne.n	aa24 <__aeabi_dmul+0x3f0>
    aa16:	4322      	orrs	r2, r4
    aa18:	0312      	lsls	r2, r2, #12
    aa1a:	0b12      	lsrs	r2, r2, #12
    aa1c:	4645      	mov	r5, r8
    aa1e:	4699      	mov	r9, r3
    aa20:	4c43      	ldr	r4, [pc, #268]	; (ab30 <__aeabi_dmul+0x4fc>)
    aa22:	e66e      	b.n	a702 <__aeabi_dmul+0xce>
    aa24:	465b      	mov	r3, fp
    aa26:	431a      	orrs	r2, r3
    aa28:	0312      	lsls	r2, r2, #12
    aa2a:	0b12      	lsrs	r2, r2, #12
    aa2c:	4c40      	ldr	r4, [pc, #256]	; (ab30 <__aeabi_dmul+0x4fc>)
    aa2e:	e668      	b.n	a702 <__aeabi_dmul+0xce>
    aa30:	0003      	movs	r3, r0
    aa32:	4654      	mov	r4, sl
    aa34:	3b28      	subs	r3, #40	; 0x28
    aa36:	409c      	lsls	r4, r3
    aa38:	2300      	movs	r3, #0
    aa3a:	e6b9      	b.n	a7b0 <__aeabi_dmul+0x17c>
    aa3c:	f000 fd3a 	bl	b4b4 <__clzsi2>
    aa40:	3020      	adds	r0, #32
    aa42:	e6a6      	b.n	a792 <__aeabi_dmul+0x15e>
    aa44:	0003      	movs	r3, r0
    aa46:	3b28      	subs	r3, #40	; 0x28
    aa48:	409f      	lsls	r7, r3
    aa4a:	2300      	movs	r3, #0
    aa4c:	46bb      	mov	fp, r7
    aa4e:	4699      	mov	r9, r3
    aa50:	e68a      	b.n	a768 <__aeabi_dmul+0x134>
    aa52:	f000 fd2f 	bl	b4b4 <__clzsi2>
    aa56:	3020      	adds	r0, #32
    aa58:	e674      	b.n	a744 <__aeabi_dmul+0x110>
    aa5a:	46b4      	mov	ip, r6
    aa5c:	e7ad      	b.n	a9ba <__aeabi_dmul+0x386>
    aa5e:	2501      	movs	r5, #1
    aa60:	1a2a      	subs	r2, r5, r0
    aa62:	2a38      	cmp	r2, #56	; 0x38
    aa64:	dd06      	ble.n	aa74 <__aeabi_dmul+0x440>
    aa66:	9b01      	ldr	r3, [sp, #4]
    aa68:	2400      	movs	r4, #0
    aa6a:	401d      	ands	r5, r3
    aa6c:	2300      	movs	r3, #0
    aa6e:	2200      	movs	r2, #0
    aa70:	4699      	mov	r9, r3
    aa72:	e646      	b.n	a702 <__aeabi_dmul+0xce>
    aa74:	2a1f      	cmp	r2, #31
    aa76:	dc21      	bgt.n	aabc <__aeabi_dmul+0x488>
    aa78:	2520      	movs	r5, #32
    aa7a:	0020      	movs	r0, r4
    aa7c:	1aad      	subs	r5, r5, r2
    aa7e:	001e      	movs	r6, r3
    aa80:	40ab      	lsls	r3, r5
    aa82:	40a8      	lsls	r0, r5
    aa84:	40d6      	lsrs	r6, r2
    aa86:	1e5d      	subs	r5, r3, #1
    aa88:	41ab      	sbcs	r3, r5
    aa8a:	4330      	orrs	r0, r6
    aa8c:	4318      	orrs	r0, r3
    aa8e:	40d4      	lsrs	r4, r2
    aa90:	0743      	lsls	r3, r0, #29
    aa92:	d009      	beq.n	aaa8 <__aeabi_dmul+0x474>
    aa94:	230f      	movs	r3, #15
    aa96:	4003      	ands	r3, r0
    aa98:	2b04      	cmp	r3, #4
    aa9a:	d005      	beq.n	aaa8 <__aeabi_dmul+0x474>
    aa9c:	0003      	movs	r3, r0
    aa9e:	1d18      	adds	r0, r3, #4
    aaa0:	4298      	cmp	r0, r3
    aaa2:	419b      	sbcs	r3, r3
    aaa4:	425b      	negs	r3, r3
    aaa6:	18e4      	adds	r4, r4, r3
    aaa8:	0223      	lsls	r3, r4, #8
    aaaa:	d521      	bpl.n	aaf0 <__aeabi_dmul+0x4bc>
    aaac:	2501      	movs	r5, #1
    aaae:	9b01      	ldr	r3, [sp, #4]
    aab0:	2401      	movs	r4, #1
    aab2:	401d      	ands	r5, r3
    aab4:	2300      	movs	r3, #0
    aab6:	2200      	movs	r2, #0
    aab8:	4699      	mov	r9, r3
    aaba:	e622      	b.n	a702 <__aeabi_dmul+0xce>
    aabc:	251f      	movs	r5, #31
    aabe:	0021      	movs	r1, r4
    aac0:	426d      	negs	r5, r5
    aac2:	1a28      	subs	r0, r5, r0
    aac4:	40c1      	lsrs	r1, r0
    aac6:	0008      	movs	r0, r1
    aac8:	2a20      	cmp	r2, #32
    aaca:	d01d      	beq.n	ab08 <__aeabi_dmul+0x4d4>
    aacc:	355f      	adds	r5, #95	; 0x5f
    aace:	1aaa      	subs	r2, r5, r2
    aad0:	4094      	lsls	r4, r2
    aad2:	4323      	orrs	r3, r4
    aad4:	1e5c      	subs	r4, r3, #1
    aad6:	41a3      	sbcs	r3, r4
    aad8:	2507      	movs	r5, #7
    aada:	4303      	orrs	r3, r0
    aadc:	401d      	ands	r5, r3
    aade:	2200      	movs	r2, #0
    aae0:	2d00      	cmp	r5, #0
    aae2:	d009      	beq.n	aaf8 <__aeabi_dmul+0x4c4>
    aae4:	220f      	movs	r2, #15
    aae6:	2400      	movs	r4, #0
    aae8:	401a      	ands	r2, r3
    aaea:	0018      	movs	r0, r3
    aaec:	2a04      	cmp	r2, #4
    aaee:	d1d6      	bne.n	aa9e <__aeabi_dmul+0x46a>
    aaf0:	0003      	movs	r3, r0
    aaf2:	0765      	lsls	r5, r4, #29
    aaf4:	0264      	lsls	r4, r4, #9
    aaf6:	0b22      	lsrs	r2, r4, #12
    aaf8:	08db      	lsrs	r3, r3, #3
    aafa:	432b      	orrs	r3, r5
    aafc:	2501      	movs	r5, #1
    aafe:	4699      	mov	r9, r3
    ab00:	9b01      	ldr	r3, [sp, #4]
    ab02:	2400      	movs	r4, #0
    ab04:	401d      	ands	r5, r3
    ab06:	e5fc      	b.n	a702 <__aeabi_dmul+0xce>
    ab08:	2400      	movs	r4, #0
    ab0a:	e7e2      	b.n	aad2 <__aeabi_dmul+0x49e>
    ab0c:	2280      	movs	r2, #128	; 0x80
    ab0e:	2501      	movs	r5, #1
    ab10:	0312      	lsls	r2, r2, #12
    ab12:	4322      	orrs	r2, r4
    ab14:	9901      	ldr	r1, [sp, #4]
    ab16:	0312      	lsls	r2, r2, #12
    ab18:	0b12      	lsrs	r2, r2, #12
    ab1a:	400d      	ands	r5, r1
    ab1c:	4699      	mov	r9, r3
    ab1e:	4c04      	ldr	r4, [pc, #16]	; (ab30 <__aeabi_dmul+0x4fc>)
    ab20:	e5ef      	b.n	a702 <__aeabi_dmul+0xce>
    ab22:	46c0      	nop			; (mov r8, r8)
    ab24:	000003ff 	.word	0x000003ff
    ab28:	feffffff 	.word	0xfeffffff
    ab2c:	000007fe 	.word	0x000007fe
    ab30:	000007ff 	.word	0x000007ff

0000ab34 <__aeabi_dsub>:
    ab34:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab36:	4646      	mov	r6, r8
    ab38:	46d6      	mov	lr, sl
    ab3a:	464f      	mov	r7, r9
    ab3c:	030c      	lsls	r4, r1, #12
    ab3e:	b5c0      	push	{r6, r7, lr}
    ab40:	0fcd      	lsrs	r5, r1, #31
    ab42:	004e      	lsls	r6, r1, #1
    ab44:	0a61      	lsrs	r1, r4, #9
    ab46:	0f44      	lsrs	r4, r0, #29
    ab48:	430c      	orrs	r4, r1
    ab4a:	00c1      	lsls	r1, r0, #3
    ab4c:	0058      	lsls	r0, r3, #1
    ab4e:	0d40      	lsrs	r0, r0, #21
    ab50:	4684      	mov	ip, r0
    ab52:	468a      	mov	sl, r1
    ab54:	000f      	movs	r7, r1
    ab56:	0319      	lsls	r1, r3, #12
    ab58:	0f50      	lsrs	r0, r2, #29
    ab5a:	0a49      	lsrs	r1, r1, #9
    ab5c:	4301      	orrs	r1, r0
    ab5e:	48c6      	ldr	r0, [pc, #792]	; (ae78 <__aeabi_dsub+0x344>)
    ab60:	0d76      	lsrs	r6, r6, #21
    ab62:	46a8      	mov	r8, r5
    ab64:	0fdb      	lsrs	r3, r3, #31
    ab66:	00d2      	lsls	r2, r2, #3
    ab68:	4584      	cmp	ip, r0
    ab6a:	d100      	bne.n	ab6e <__aeabi_dsub+0x3a>
    ab6c:	e0d8      	b.n	ad20 <__aeabi_dsub+0x1ec>
    ab6e:	2001      	movs	r0, #1
    ab70:	4043      	eors	r3, r0
    ab72:	42ab      	cmp	r3, r5
    ab74:	d100      	bne.n	ab78 <__aeabi_dsub+0x44>
    ab76:	e0a6      	b.n	acc6 <__aeabi_dsub+0x192>
    ab78:	4660      	mov	r0, ip
    ab7a:	1a35      	subs	r5, r6, r0
    ab7c:	2d00      	cmp	r5, #0
    ab7e:	dc00      	bgt.n	ab82 <__aeabi_dsub+0x4e>
    ab80:	e105      	b.n	ad8e <__aeabi_dsub+0x25a>
    ab82:	2800      	cmp	r0, #0
    ab84:	d110      	bne.n	aba8 <__aeabi_dsub+0x74>
    ab86:	000b      	movs	r3, r1
    ab88:	4313      	orrs	r3, r2
    ab8a:	d100      	bne.n	ab8e <__aeabi_dsub+0x5a>
    ab8c:	e0d7      	b.n	ad3e <__aeabi_dsub+0x20a>
    ab8e:	1e6b      	subs	r3, r5, #1
    ab90:	2b00      	cmp	r3, #0
    ab92:	d000      	beq.n	ab96 <__aeabi_dsub+0x62>
    ab94:	e14b      	b.n	ae2e <__aeabi_dsub+0x2fa>
    ab96:	4653      	mov	r3, sl
    ab98:	1a9f      	subs	r7, r3, r2
    ab9a:	45ba      	cmp	sl, r7
    ab9c:	4180      	sbcs	r0, r0
    ab9e:	1a64      	subs	r4, r4, r1
    aba0:	4240      	negs	r0, r0
    aba2:	1a24      	subs	r4, r4, r0
    aba4:	2601      	movs	r6, #1
    aba6:	e01e      	b.n	abe6 <__aeabi_dsub+0xb2>
    aba8:	4bb3      	ldr	r3, [pc, #716]	; (ae78 <__aeabi_dsub+0x344>)
    abaa:	429e      	cmp	r6, r3
    abac:	d048      	beq.n	ac40 <__aeabi_dsub+0x10c>
    abae:	2380      	movs	r3, #128	; 0x80
    abb0:	041b      	lsls	r3, r3, #16
    abb2:	4319      	orrs	r1, r3
    abb4:	2d38      	cmp	r5, #56	; 0x38
    abb6:	dd00      	ble.n	abba <__aeabi_dsub+0x86>
    abb8:	e119      	b.n	adee <__aeabi_dsub+0x2ba>
    abba:	2d1f      	cmp	r5, #31
    abbc:	dd00      	ble.n	abc0 <__aeabi_dsub+0x8c>
    abbe:	e14c      	b.n	ae5a <__aeabi_dsub+0x326>
    abc0:	2320      	movs	r3, #32
    abc2:	000f      	movs	r7, r1
    abc4:	1b5b      	subs	r3, r3, r5
    abc6:	0010      	movs	r0, r2
    abc8:	409a      	lsls	r2, r3
    abca:	409f      	lsls	r7, r3
    abcc:	40e8      	lsrs	r0, r5
    abce:	1e53      	subs	r3, r2, #1
    abd0:	419a      	sbcs	r2, r3
    abd2:	40e9      	lsrs	r1, r5
    abd4:	4307      	orrs	r7, r0
    abd6:	4317      	orrs	r7, r2
    abd8:	4653      	mov	r3, sl
    abda:	1bdf      	subs	r7, r3, r7
    abdc:	1a61      	subs	r1, r4, r1
    abde:	45ba      	cmp	sl, r7
    abe0:	41a4      	sbcs	r4, r4
    abe2:	4264      	negs	r4, r4
    abe4:	1b0c      	subs	r4, r1, r4
    abe6:	0223      	lsls	r3, r4, #8
    abe8:	d400      	bmi.n	abec <__aeabi_dsub+0xb8>
    abea:	e0c5      	b.n	ad78 <__aeabi_dsub+0x244>
    abec:	0264      	lsls	r4, r4, #9
    abee:	0a65      	lsrs	r5, r4, #9
    abf0:	2d00      	cmp	r5, #0
    abf2:	d100      	bne.n	abf6 <__aeabi_dsub+0xc2>
    abf4:	e0f6      	b.n	ade4 <__aeabi_dsub+0x2b0>
    abf6:	0028      	movs	r0, r5
    abf8:	f000 fc5c 	bl	b4b4 <__clzsi2>
    abfc:	0003      	movs	r3, r0
    abfe:	3b08      	subs	r3, #8
    ac00:	2b1f      	cmp	r3, #31
    ac02:	dd00      	ble.n	ac06 <__aeabi_dsub+0xd2>
    ac04:	e0e9      	b.n	adda <__aeabi_dsub+0x2a6>
    ac06:	2220      	movs	r2, #32
    ac08:	003c      	movs	r4, r7
    ac0a:	1ad2      	subs	r2, r2, r3
    ac0c:	409d      	lsls	r5, r3
    ac0e:	40d4      	lsrs	r4, r2
    ac10:	409f      	lsls	r7, r3
    ac12:	4325      	orrs	r5, r4
    ac14:	429e      	cmp	r6, r3
    ac16:	dd00      	ble.n	ac1a <__aeabi_dsub+0xe6>
    ac18:	e0db      	b.n	add2 <__aeabi_dsub+0x29e>
    ac1a:	1b9e      	subs	r6, r3, r6
    ac1c:	1c73      	adds	r3, r6, #1
    ac1e:	2b1f      	cmp	r3, #31
    ac20:	dd00      	ble.n	ac24 <__aeabi_dsub+0xf0>
    ac22:	e10a      	b.n	ae3a <__aeabi_dsub+0x306>
    ac24:	2220      	movs	r2, #32
    ac26:	0038      	movs	r0, r7
    ac28:	1ad2      	subs	r2, r2, r3
    ac2a:	0029      	movs	r1, r5
    ac2c:	4097      	lsls	r7, r2
    ac2e:	002c      	movs	r4, r5
    ac30:	4091      	lsls	r1, r2
    ac32:	40d8      	lsrs	r0, r3
    ac34:	1e7a      	subs	r2, r7, #1
    ac36:	4197      	sbcs	r7, r2
    ac38:	40dc      	lsrs	r4, r3
    ac3a:	2600      	movs	r6, #0
    ac3c:	4301      	orrs	r1, r0
    ac3e:	430f      	orrs	r7, r1
    ac40:	077b      	lsls	r3, r7, #29
    ac42:	d009      	beq.n	ac58 <__aeabi_dsub+0x124>
    ac44:	230f      	movs	r3, #15
    ac46:	403b      	ands	r3, r7
    ac48:	2b04      	cmp	r3, #4
    ac4a:	d005      	beq.n	ac58 <__aeabi_dsub+0x124>
    ac4c:	1d3b      	adds	r3, r7, #4
    ac4e:	42bb      	cmp	r3, r7
    ac50:	41bf      	sbcs	r7, r7
    ac52:	427f      	negs	r7, r7
    ac54:	19e4      	adds	r4, r4, r7
    ac56:	001f      	movs	r7, r3
    ac58:	0223      	lsls	r3, r4, #8
    ac5a:	d525      	bpl.n	aca8 <__aeabi_dsub+0x174>
    ac5c:	4b86      	ldr	r3, [pc, #536]	; (ae78 <__aeabi_dsub+0x344>)
    ac5e:	3601      	adds	r6, #1
    ac60:	429e      	cmp	r6, r3
    ac62:	d100      	bne.n	ac66 <__aeabi_dsub+0x132>
    ac64:	e0af      	b.n	adc6 <__aeabi_dsub+0x292>
    ac66:	4b85      	ldr	r3, [pc, #532]	; (ae7c <__aeabi_dsub+0x348>)
    ac68:	2501      	movs	r5, #1
    ac6a:	401c      	ands	r4, r3
    ac6c:	4643      	mov	r3, r8
    ac6e:	0762      	lsls	r2, r4, #29
    ac70:	08ff      	lsrs	r7, r7, #3
    ac72:	0264      	lsls	r4, r4, #9
    ac74:	0576      	lsls	r6, r6, #21
    ac76:	4317      	orrs	r7, r2
    ac78:	0b24      	lsrs	r4, r4, #12
    ac7a:	0d76      	lsrs	r6, r6, #21
    ac7c:	401d      	ands	r5, r3
    ac7e:	2100      	movs	r1, #0
    ac80:	0324      	lsls	r4, r4, #12
    ac82:	0b23      	lsrs	r3, r4, #12
    ac84:	0d0c      	lsrs	r4, r1, #20
    ac86:	4a7e      	ldr	r2, [pc, #504]	; (ae80 <__aeabi_dsub+0x34c>)
    ac88:	0524      	lsls	r4, r4, #20
    ac8a:	431c      	orrs	r4, r3
    ac8c:	4014      	ands	r4, r2
    ac8e:	0533      	lsls	r3, r6, #20
    ac90:	4323      	orrs	r3, r4
    ac92:	005b      	lsls	r3, r3, #1
    ac94:	07ed      	lsls	r5, r5, #31
    ac96:	085b      	lsrs	r3, r3, #1
    ac98:	432b      	orrs	r3, r5
    ac9a:	0038      	movs	r0, r7
    ac9c:	0019      	movs	r1, r3
    ac9e:	bc1c      	pop	{r2, r3, r4}
    aca0:	4690      	mov	r8, r2
    aca2:	4699      	mov	r9, r3
    aca4:	46a2      	mov	sl, r4
    aca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aca8:	2501      	movs	r5, #1
    acaa:	4643      	mov	r3, r8
    acac:	0762      	lsls	r2, r4, #29
    acae:	08ff      	lsrs	r7, r7, #3
    acb0:	4317      	orrs	r7, r2
    acb2:	08e4      	lsrs	r4, r4, #3
    acb4:	401d      	ands	r5, r3
    acb6:	4b70      	ldr	r3, [pc, #448]	; (ae78 <__aeabi_dsub+0x344>)
    acb8:	429e      	cmp	r6, r3
    acba:	d036      	beq.n	ad2a <__aeabi_dsub+0x1f6>
    acbc:	0324      	lsls	r4, r4, #12
    acbe:	0576      	lsls	r6, r6, #21
    acc0:	0b24      	lsrs	r4, r4, #12
    acc2:	0d76      	lsrs	r6, r6, #21
    acc4:	e7db      	b.n	ac7e <__aeabi_dsub+0x14a>
    acc6:	4663      	mov	r3, ip
    acc8:	1af3      	subs	r3, r6, r3
    acca:	2b00      	cmp	r3, #0
    accc:	dc00      	bgt.n	acd0 <__aeabi_dsub+0x19c>
    acce:	e094      	b.n	adfa <__aeabi_dsub+0x2c6>
    acd0:	4660      	mov	r0, ip
    acd2:	2800      	cmp	r0, #0
    acd4:	d035      	beq.n	ad42 <__aeabi_dsub+0x20e>
    acd6:	4868      	ldr	r0, [pc, #416]	; (ae78 <__aeabi_dsub+0x344>)
    acd8:	4286      	cmp	r6, r0
    acda:	d0b1      	beq.n	ac40 <__aeabi_dsub+0x10c>
    acdc:	2780      	movs	r7, #128	; 0x80
    acde:	043f      	lsls	r7, r7, #16
    ace0:	4339      	orrs	r1, r7
    ace2:	2b38      	cmp	r3, #56	; 0x38
    ace4:	dc00      	bgt.n	ace8 <__aeabi_dsub+0x1b4>
    ace6:	e0fd      	b.n	aee4 <__aeabi_dsub+0x3b0>
    ace8:	430a      	orrs	r2, r1
    acea:	0017      	movs	r7, r2
    acec:	2100      	movs	r1, #0
    acee:	1e7a      	subs	r2, r7, #1
    acf0:	4197      	sbcs	r7, r2
    acf2:	4457      	add	r7, sl
    acf4:	4557      	cmp	r7, sl
    acf6:	4180      	sbcs	r0, r0
    acf8:	1909      	adds	r1, r1, r4
    acfa:	4244      	negs	r4, r0
    acfc:	190c      	adds	r4, r1, r4
    acfe:	0223      	lsls	r3, r4, #8
    ad00:	d53a      	bpl.n	ad78 <__aeabi_dsub+0x244>
    ad02:	4b5d      	ldr	r3, [pc, #372]	; (ae78 <__aeabi_dsub+0x344>)
    ad04:	3601      	adds	r6, #1
    ad06:	429e      	cmp	r6, r3
    ad08:	d100      	bne.n	ad0c <__aeabi_dsub+0x1d8>
    ad0a:	e14b      	b.n	afa4 <__aeabi_dsub+0x470>
    ad0c:	2201      	movs	r2, #1
    ad0e:	4b5b      	ldr	r3, [pc, #364]	; (ae7c <__aeabi_dsub+0x348>)
    ad10:	401c      	ands	r4, r3
    ad12:	087b      	lsrs	r3, r7, #1
    ad14:	4017      	ands	r7, r2
    ad16:	431f      	orrs	r7, r3
    ad18:	07e2      	lsls	r2, r4, #31
    ad1a:	4317      	orrs	r7, r2
    ad1c:	0864      	lsrs	r4, r4, #1
    ad1e:	e78f      	b.n	ac40 <__aeabi_dsub+0x10c>
    ad20:	0008      	movs	r0, r1
    ad22:	4310      	orrs	r0, r2
    ad24:	d000      	beq.n	ad28 <__aeabi_dsub+0x1f4>
    ad26:	e724      	b.n	ab72 <__aeabi_dsub+0x3e>
    ad28:	e721      	b.n	ab6e <__aeabi_dsub+0x3a>
    ad2a:	0023      	movs	r3, r4
    ad2c:	433b      	orrs	r3, r7
    ad2e:	d100      	bne.n	ad32 <__aeabi_dsub+0x1fe>
    ad30:	e1b9      	b.n	b0a6 <__aeabi_dsub+0x572>
    ad32:	2280      	movs	r2, #128	; 0x80
    ad34:	0312      	lsls	r2, r2, #12
    ad36:	4314      	orrs	r4, r2
    ad38:	0324      	lsls	r4, r4, #12
    ad3a:	0b24      	lsrs	r4, r4, #12
    ad3c:	e79f      	b.n	ac7e <__aeabi_dsub+0x14a>
    ad3e:	002e      	movs	r6, r5
    ad40:	e77e      	b.n	ac40 <__aeabi_dsub+0x10c>
    ad42:	0008      	movs	r0, r1
    ad44:	4310      	orrs	r0, r2
    ad46:	d100      	bne.n	ad4a <__aeabi_dsub+0x216>
    ad48:	e0ca      	b.n	aee0 <__aeabi_dsub+0x3ac>
    ad4a:	1e58      	subs	r0, r3, #1
    ad4c:	4684      	mov	ip, r0
    ad4e:	2800      	cmp	r0, #0
    ad50:	d000      	beq.n	ad54 <__aeabi_dsub+0x220>
    ad52:	e0e7      	b.n	af24 <__aeabi_dsub+0x3f0>
    ad54:	4452      	add	r2, sl
    ad56:	4552      	cmp	r2, sl
    ad58:	4180      	sbcs	r0, r0
    ad5a:	1864      	adds	r4, r4, r1
    ad5c:	4240      	negs	r0, r0
    ad5e:	1824      	adds	r4, r4, r0
    ad60:	0017      	movs	r7, r2
    ad62:	2601      	movs	r6, #1
    ad64:	0223      	lsls	r3, r4, #8
    ad66:	d507      	bpl.n	ad78 <__aeabi_dsub+0x244>
    ad68:	2602      	movs	r6, #2
    ad6a:	e7cf      	b.n	ad0c <__aeabi_dsub+0x1d8>
    ad6c:	4664      	mov	r4, ip
    ad6e:	432c      	orrs	r4, r5
    ad70:	d100      	bne.n	ad74 <__aeabi_dsub+0x240>
    ad72:	e1b3      	b.n	b0dc <__aeabi_dsub+0x5a8>
    ad74:	002c      	movs	r4, r5
    ad76:	4667      	mov	r7, ip
    ad78:	077b      	lsls	r3, r7, #29
    ad7a:	d000      	beq.n	ad7e <__aeabi_dsub+0x24a>
    ad7c:	e762      	b.n	ac44 <__aeabi_dsub+0x110>
    ad7e:	0763      	lsls	r3, r4, #29
    ad80:	08ff      	lsrs	r7, r7, #3
    ad82:	431f      	orrs	r7, r3
    ad84:	2501      	movs	r5, #1
    ad86:	4643      	mov	r3, r8
    ad88:	08e4      	lsrs	r4, r4, #3
    ad8a:	401d      	ands	r5, r3
    ad8c:	e793      	b.n	acb6 <__aeabi_dsub+0x182>
    ad8e:	2d00      	cmp	r5, #0
    ad90:	d178      	bne.n	ae84 <__aeabi_dsub+0x350>
    ad92:	1c75      	adds	r5, r6, #1
    ad94:	056d      	lsls	r5, r5, #21
    ad96:	0d6d      	lsrs	r5, r5, #21
    ad98:	2d01      	cmp	r5, #1
    ad9a:	dc00      	bgt.n	ad9e <__aeabi_dsub+0x26a>
    ad9c:	e0f2      	b.n	af84 <__aeabi_dsub+0x450>
    ad9e:	4650      	mov	r0, sl
    ada0:	1a80      	subs	r0, r0, r2
    ada2:	4582      	cmp	sl, r0
    ada4:	41bf      	sbcs	r7, r7
    ada6:	1a65      	subs	r5, r4, r1
    ada8:	427f      	negs	r7, r7
    adaa:	1bed      	subs	r5, r5, r7
    adac:	4684      	mov	ip, r0
    adae:	0228      	lsls	r0, r5, #8
    adb0:	d400      	bmi.n	adb4 <__aeabi_dsub+0x280>
    adb2:	e08c      	b.n	aece <__aeabi_dsub+0x39a>
    adb4:	4650      	mov	r0, sl
    adb6:	1a17      	subs	r7, r2, r0
    adb8:	42ba      	cmp	r2, r7
    adba:	4192      	sbcs	r2, r2
    adbc:	1b0c      	subs	r4, r1, r4
    adbe:	4255      	negs	r5, r2
    adc0:	1b65      	subs	r5, r4, r5
    adc2:	4698      	mov	r8, r3
    adc4:	e714      	b.n	abf0 <__aeabi_dsub+0xbc>
    adc6:	2501      	movs	r5, #1
    adc8:	4643      	mov	r3, r8
    adca:	2400      	movs	r4, #0
    adcc:	401d      	ands	r5, r3
    adce:	2700      	movs	r7, #0
    add0:	e755      	b.n	ac7e <__aeabi_dsub+0x14a>
    add2:	4c2a      	ldr	r4, [pc, #168]	; (ae7c <__aeabi_dsub+0x348>)
    add4:	1af6      	subs	r6, r6, r3
    add6:	402c      	ands	r4, r5
    add8:	e732      	b.n	ac40 <__aeabi_dsub+0x10c>
    adda:	003d      	movs	r5, r7
    addc:	3828      	subs	r0, #40	; 0x28
    adde:	4085      	lsls	r5, r0
    ade0:	2700      	movs	r7, #0
    ade2:	e717      	b.n	ac14 <__aeabi_dsub+0xe0>
    ade4:	0038      	movs	r0, r7
    ade6:	f000 fb65 	bl	b4b4 <__clzsi2>
    adea:	3020      	adds	r0, #32
    adec:	e706      	b.n	abfc <__aeabi_dsub+0xc8>
    adee:	430a      	orrs	r2, r1
    adf0:	0017      	movs	r7, r2
    adf2:	2100      	movs	r1, #0
    adf4:	1e7a      	subs	r2, r7, #1
    adf6:	4197      	sbcs	r7, r2
    adf8:	e6ee      	b.n	abd8 <__aeabi_dsub+0xa4>
    adfa:	2b00      	cmp	r3, #0
    adfc:	d000      	beq.n	ae00 <__aeabi_dsub+0x2cc>
    adfe:	e0e5      	b.n	afcc <__aeabi_dsub+0x498>
    ae00:	1c73      	adds	r3, r6, #1
    ae02:	469c      	mov	ip, r3
    ae04:	055b      	lsls	r3, r3, #21
    ae06:	0d5b      	lsrs	r3, r3, #21
    ae08:	2b01      	cmp	r3, #1
    ae0a:	dc00      	bgt.n	ae0e <__aeabi_dsub+0x2da>
    ae0c:	e09f      	b.n	af4e <__aeabi_dsub+0x41a>
    ae0e:	4b1a      	ldr	r3, [pc, #104]	; (ae78 <__aeabi_dsub+0x344>)
    ae10:	459c      	cmp	ip, r3
    ae12:	d100      	bne.n	ae16 <__aeabi_dsub+0x2e2>
    ae14:	e0c5      	b.n	afa2 <__aeabi_dsub+0x46e>
    ae16:	4452      	add	r2, sl
    ae18:	4552      	cmp	r2, sl
    ae1a:	4180      	sbcs	r0, r0
    ae1c:	1864      	adds	r4, r4, r1
    ae1e:	4240      	negs	r0, r0
    ae20:	1824      	adds	r4, r4, r0
    ae22:	07e7      	lsls	r7, r4, #31
    ae24:	0852      	lsrs	r2, r2, #1
    ae26:	4317      	orrs	r7, r2
    ae28:	0864      	lsrs	r4, r4, #1
    ae2a:	4666      	mov	r6, ip
    ae2c:	e708      	b.n	ac40 <__aeabi_dsub+0x10c>
    ae2e:	4812      	ldr	r0, [pc, #72]	; (ae78 <__aeabi_dsub+0x344>)
    ae30:	4285      	cmp	r5, r0
    ae32:	d100      	bne.n	ae36 <__aeabi_dsub+0x302>
    ae34:	e085      	b.n	af42 <__aeabi_dsub+0x40e>
    ae36:	001d      	movs	r5, r3
    ae38:	e6bc      	b.n	abb4 <__aeabi_dsub+0x80>
    ae3a:	0029      	movs	r1, r5
    ae3c:	3e1f      	subs	r6, #31
    ae3e:	40f1      	lsrs	r1, r6
    ae40:	2b20      	cmp	r3, #32
    ae42:	d100      	bne.n	ae46 <__aeabi_dsub+0x312>
    ae44:	e07f      	b.n	af46 <__aeabi_dsub+0x412>
    ae46:	2240      	movs	r2, #64	; 0x40
    ae48:	1ad3      	subs	r3, r2, r3
    ae4a:	409d      	lsls	r5, r3
    ae4c:	432f      	orrs	r7, r5
    ae4e:	1e7d      	subs	r5, r7, #1
    ae50:	41af      	sbcs	r7, r5
    ae52:	2400      	movs	r4, #0
    ae54:	430f      	orrs	r7, r1
    ae56:	2600      	movs	r6, #0
    ae58:	e78e      	b.n	ad78 <__aeabi_dsub+0x244>
    ae5a:	002b      	movs	r3, r5
    ae5c:	000f      	movs	r7, r1
    ae5e:	3b20      	subs	r3, #32
    ae60:	40df      	lsrs	r7, r3
    ae62:	2d20      	cmp	r5, #32
    ae64:	d071      	beq.n	af4a <__aeabi_dsub+0x416>
    ae66:	2340      	movs	r3, #64	; 0x40
    ae68:	1b5d      	subs	r5, r3, r5
    ae6a:	40a9      	lsls	r1, r5
    ae6c:	430a      	orrs	r2, r1
    ae6e:	1e51      	subs	r1, r2, #1
    ae70:	418a      	sbcs	r2, r1
    ae72:	2100      	movs	r1, #0
    ae74:	4317      	orrs	r7, r2
    ae76:	e6af      	b.n	abd8 <__aeabi_dsub+0xa4>
    ae78:	000007ff 	.word	0x000007ff
    ae7c:	ff7fffff 	.word	0xff7fffff
    ae80:	800fffff 	.word	0x800fffff
    ae84:	2e00      	cmp	r6, #0
    ae86:	d03e      	beq.n	af06 <__aeabi_dsub+0x3d2>
    ae88:	4eb3      	ldr	r6, [pc, #716]	; (b158 <__aeabi_dsub+0x624>)
    ae8a:	45b4      	cmp	ip, r6
    ae8c:	d045      	beq.n	af1a <__aeabi_dsub+0x3e6>
    ae8e:	2680      	movs	r6, #128	; 0x80
    ae90:	0436      	lsls	r6, r6, #16
    ae92:	426d      	negs	r5, r5
    ae94:	4334      	orrs	r4, r6
    ae96:	2d38      	cmp	r5, #56	; 0x38
    ae98:	dd00      	ble.n	ae9c <__aeabi_dsub+0x368>
    ae9a:	e0a8      	b.n	afee <__aeabi_dsub+0x4ba>
    ae9c:	2d1f      	cmp	r5, #31
    ae9e:	dd00      	ble.n	aea2 <__aeabi_dsub+0x36e>
    aea0:	e11f      	b.n	b0e2 <__aeabi_dsub+0x5ae>
    aea2:	2620      	movs	r6, #32
    aea4:	0027      	movs	r7, r4
    aea6:	4650      	mov	r0, sl
    aea8:	1b76      	subs	r6, r6, r5
    aeaa:	40b7      	lsls	r7, r6
    aeac:	40e8      	lsrs	r0, r5
    aeae:	4307      	orrs	r7, r0
    aeb0:	4650      	mov	r0, sl
    aeb2:	40b0      	lsls	r0, r6
    aeb4:	1e46      	subs	r6, r0, #1
    aeb6:	41b0      	sbcs	r0, r6
    aeb8:	40ec      	lsrs	r4, r5
    aeba:	4338      	orrs	r0, r7
    aebc:	1a17      	subs	r7, r2, r0
    aebe:	42ba      	cmp	r2, r7
    aec0:	4192      	sbcs	r2, r2
    aec2:	1b0c      	subs	r4, r1, r4
    aec4:	4252      	negs	r2, r2
    aec6:	1aa4      	subs	r4, r4, r2
    aec8:	4666      	mov	r6, ip
    aeca:	4698      	mov	r8, r3
    aecc:	e68b      	b.n	abe6 <__aeabi_dsub+0xb2>
    aece:	4664      	mov	r4, ip
    aed0:	4667      	mov	r7, ip
    aed2:	432c      	orrs	r4, r5
    aed4:	d000      	beq.n	aed8 <__aeabi_dsub+0x3a4>
    aed6:	e68b      	b.n	abf0 <__aeabi_dsub+0xbc>
    aed8:	2500      	movs	r5, #0
    aeda:	2600      	movs	r6, #0
    aedc:	2700      	movs	r7, #0
    aede:	e6ea      	b.n	acb6 <__aeabi_dsub+0x182>
    aee0:	001e      	movs	r6, r3
    aee2:	e6ad      	b.n	ac40 <__aeabi_dsub+0x10c>
    aee4:	2b1f      	cmp	r3, #31
    aee6:	dc60      	bgt.n	afaa <__aeabi_dsub+0x476>
    aee8:	2720      	movs	r7, #32
    aeea:	1af8      	subs	r0, r7, r3
    aeec:	000f      	movs	r7, r1
    aeee:	4684      	mov	ip, r0
    aef0:	4087      	lsls	r7, r0
    aef2:	0010      	movs	r0, r2
    aef4:	40d8      	lsrs	r0, r3
    aef6:	4307      	orrs	r7, r0
    aef8:	4660      	mov	r0, ip
    aefa:	4082      	lsls	r2, r0
    aefc:	1e50      	subs	r0, r2, #1
    aefe:	4182      	sbcs	r2, r0
    af00:	40d9      	lsrs	r1, r3
    af02:	4317      	orrs	r7, r2
    af04:	e6f5      	b.n	acf2 <__aeabi_dsub+0x1be>
    af06:	0026      	movs	r6, r4
    af08:	4650      	mov	r0, sl
    af0a:	4306      	orrs	r6, r0
    af0c:	d005      	beq.n	af1a <__aeabi_dsub+0x3e6>
    af0e:	43ed      	mvns	r5, r5
    af10:	2d00      	cmp	r5, #0
    af12:	d0d3      	beq.n	aebc <__aeabi_dsub+0x388>
    af14:	4e90      	ldr	r6, [pc, #576]	; (b158 <__aeabi_dsub+0x624>)
    af16:	45b4      	cmp	ip, r6
    af18:	d1bd      	bne.n	ae96 <__aeabi_dsub+0x362>
    af1a:	000c      	movs	r4, r1
    af1c:	0017      	movs	r7, r2
    af1e:	4666      	mov	r6, ip
    af20:	4698      	mov	r8, r3
    af22:	e68d      	b.n	ac40 <__aeabi_dsub+0x10c>
    af24:	488c      	ldr	r0, [pc, #560]	; (b158 <__aeabi_dsub+0x624>)
    af26:	4283      	cmp	r3, r0
    af28:	d00b      	beq.n	af42 <__aeabi_dsub+0x40e>
    af2a:	4663      	mov	r3, ip
    af2c:	e6d9      	b.n	ace2 <__aeabi_dsub+0x1ae>
    af2e:	2d00      	cmp	r5, #0
    af30:	d000      	beq.n	af34 <__aeabi_dsub+0x400>
    af32:	e096      	b.n	b062 <__aeabi_dsub+0x52e>
    af34:	0008      	movs	r0, r1
    af36:	4310      	orrs	r0, r2
    af38:	d100      	bne.n	af3c <__aeabi_dsub+0x408>
    af3a:	e0e2      	b.n	b102 <__aeabi_dsub+0x5ce>
    af3c:	000c      	movs	r4, r1
    af3e:	0017      	movs	r7, r2
    af40:	4698      	mov	r8, r3
    af42:	4e85      	ldr	r6, [pc, #532]	; (b158 <__aeabi_dsub+0x624>)
    af44:	e67c      	b.n	ac40 <__aeabi_dsub+0x10c>
    af46:	2500      	movs	r5, #0
    af48:	e780      	b.n	ae4c <__aeabi_dsub+0x318>
    af4a:	2100      	movs	r1, #0
    af4c:	e78e      	b.n	ae6c <__aeabi_dsub+0x338>
    af4e:	0023      	movs	r3, r4
    af50:	4650      	mov	r0, sl
    af52:	4303      	orrs	r3, r0
    af54:	2e00      	cmp	r6, #0
    af56:	d000      	beq.n	af5a <__aeabi_dsub+0x426>
    af58:	e0a8      	b.n	b0ac <__aeabi_dsub+0x578>
    af5a:	2b00      	cmp	r3, #0
    af5c:	d100      	bne.n	af60 <__aeabi_dsub+0x42c>
    af5e:	e0de      	b.n	b11e <__aeabi_dsub+0x5ea>
    af60:	000b      	movs	r3, r1
    af62:	4313      	orrs	r3, r2
    af64:	d100      	bne.n	af68 <__aeabi_dsub+0x434>
    af66:	e66b      	b.n	ac40 <__aeabi_dsub+0x10c>
    af68:	4452      	add	r2, sl
    af6a:	4552      	cmp	r2, sl
    af6c:	4180      	sbcs	r0, r0
    af6e:	1864      	adds	r4, r4, r1
    af70:	4240      	negs	r0, r0
    af72:	1824      	adds	r4, r4, r0
    af74:	0017      	movs	r7, r2
    af76:	0223      	lsls	r3, r4, #8
    af78:	d400      	bmi.n	af7c <__aeabi_dsub+0x448>
    af7a:	e6fd      	b.n	ad78 <__aeabi_dsub+0x244>
    af7c:	4b77      	ldr	r3, [pc, #476]	; (b15c <__aeabi_dsub+0x628>)
    af7e:	4666      	mov	r6, ip
    af80:	401c      	ands	r4, r3
    af82:	e65d      	b.n	ac40 <__aeabi_dsub+0x10c>
    af84:	0025      	movs	r5, r4
    af86:	4650      	mov	r0, sl
    af88:	4305      	orrs	r5, r0
    af8a:	2e00      	cmp	r6, #0
    af8c:	d1cf      	bne.n	af2e <__aeabi_dsub+0x3fa>
    af8e:	2d00      	cmp	r5, #0
    af90:	d14f      	bne.n	b032 <__aeabi_dsub+0x4fe>
    af92:	000c      	movs	r4, r1
    af94:	4314      	orrs	r4, r2
    af96:	d100      	bne.n	af9a <__aeabi_dsub+0x466>
    af98:	e0a0      	b.n	b0dc <__aeabi_dsub+0x5a8>
    af9a:	000c      	movs	r4, r1
    af9c:	0017      	movs	r7, r2
    af9e:	4698      	mov	r8, r3
    afa0:	e64e      	b.n	ac40 <__aeabi_dsub+0x10c>
    afa2:	4666      	mov	r6, ip
    afa4:	2400      	movs	r4, #0
    afa6:	2700      	movs	r7, #0
    afa8:	e685      	b.n	acb6 <__aeabi_dsub+0x182>
    afaa:	001f      	movs	r7, r3
    afac:	0008      	movs	r0, r1
    afae:	3f20      	subs	r7, #32
    afb0:	40f8      	lsrs	r0, r7
    afb2:	0007      	movs	r7, r0
    afb4:	2b20      	cmp	r3, #32
    afb6:	d100      	bne.n	afba <__aeabi_dsub+0x486>
    afb8:	e08e      	b.n	b0d8 <__aeabi_dsub+0x5a4>
    afba:	2040      	movs	r0, #64	; 0x40
    afbc:	1ac3      	subs	r3, r0, r3
    afbe:	4099      	lsls	r1, r3
    afc0:	430a      	orrs	r2, r1
    afc2:	1e51      	subs	r1, r2, #1
    afc4:	418a      	sbcs	r2, r1
    afc6:	2100      	movs	r1, #0
    afc8:	4317      	orrs	r7, r2
    afca:	e692      	b.n	acf2 <__aeabi_dsub+0x1be>
    afcc:	2e00      	cmp	r6, #0
    afce:	d114      	bne.n	affa <__aeabi_dsub+0x4c6>
    afd0:	0026      	movs	r6, r4
    afd2:	4650      	mov	r0, sl
    afd4:	4306      	orrs	r6, r0
    afd6:	d062      	beq.n	b09e <__aeabi_dsub+0x56a>
    afd8:	43db      	mvns	r3, r3
    afda:	2b00      	cmp	r3, #0
    afdc:	d15c      	bne.n	b098 <__aeabi_dsub+0x564>
    afde:	1887      	adds	r7, r0, r2
    afe0:	4297      	cmp	r7, r2
    afe2:	4192      	sbcs	r2, r2
    afe4:	1864      	adds	r4, r4, r1
    afe6:	4252      	negs	r2, r2
    afe8:	18a4      	adds	r4, r4, r2
    afea:	4666      	mov	r6, ip
    afec:	e687      	b.n	acfe <__aeabi_dsub+0x1ca>
    afee:	4650      	mov	r0, sl
    aff0:	4320      	orrs	r0, r4
    aff2:	1e44      	subs	r4, r0, #1
    aff4:	41a0      	sbcs	r0, r4
    aff6:	2400      	movs	r4, #0
    aff8:	e760      	b.n	aebc <__aeabi_dsub+0x388>
    affa:	4e57      	ldr	r6, [pc, #348]	; (b158 <__aeabi_dsub+0x624>)
    affc:	45b4      	cmp	ip, r6
    affe:	d04e      	beq.n	b09e <__aeabi_dsub+0x56a>
    b000:	2680      	movs	r6, #128	; 0x80
    b002:	0436      	lsls	r6, r6, #16
    b004:	425b      	negs	r3, r3
    b006:	4334      	orrs	r4, r6
    b008:	2b38      	cmp	r3, #56	; 0x38
    b00a:	dd00      	ble.n	b00e <__aeabi_dsub+0x4da>
    b00c:	e07f      	b.n	b10e <__aeabi_dsub+0x5da>
    b00e:	2b1f      	cmp	r3, #31
    b010:	dd00      	ble.n	b014 <__aeabi_dsub+0x4e0>
    b012:	e08b      	b.n	b12c <__aeabi_dsub+0x5f8>
    b014:	2620      	movs	r6, #32
    b016:	0027      	movs	r7, r4
    b018:	4650      	mov	r0, sl
    b01a:	1af6      	subs	r6, r6, r3
    b01c:	40b7      	lsls	r7, r6
    b01e:	40d8      	lsrs	r0, r3
    b020:	4307      	orrs	r7, r0
    b022:	4650      	mov	r0, sl
    b024:	40b0      	lsls	r0, r6
    b026:	1e46      	subs	r6, r0, #1
    b028:	41b0      	sbcs	r0, r6
    b02a:	4307      	orrs	r7, r0
    b02c:	40dc      	lsrs	r4, r3
    b02e:	18bf      	adds	r7, r7, r2
    b030:	e7d6      	b.n	afe0 <__aeabi_dsub+0x4ac>
    b032:	000d      	movs	r5, r1
    b034:	4315      	orrs	r5, r2
    b036:	d100      	bne.n	b03a <__aeabi_dsub+0x506>
    b038:	e602      	b.n	ac40 <__aeabi_dsub+0x10c>
    b03a:	4650      	mov	r0, sl
    b03c:	1a80      	subs	r0, r0, r2
    b03e:	4582      	cmp	sl, r0
    b040:	41bf      	sbcs	r7, r7
    b042:	1a65      	subs	r5, r4, r1
    b044:	427f      	negs	r7, r7
    b046:	1bed      	subs	r5, r5, r7
    b048:	4684      	mov	ip, r0
    b04a:	0228      	lsls	r0, r5, #8
    b04c:	d400      	bmi.n	b050 <__aeabi_dsub+0x51c>
    b04e:	e68d      	b.n	ad6c <__aeabi_dsub+0x238>
    b050:	4650      	mov	r0, sl
    b052:	1a17      	subs	r7, r2, r0
    b054:	42ba      	cmp	r2, r7
    b056:	4192      	sbcs	r2, r2
    b058:	1b0c      	subs	r4, r1, r4
    b05a:	4252      	negs	r2, r2
    b05c:	1aa4      	subs	r4, r4, r2
    b05e:	4698      	mov	r8, r3
    b060:	e5ee      	b.n	ac40 <__aeabi_dsub+0x10c>
    b062:	000d      	movs	r5, r1
    b064:	4315      	orrs	r5, r2
    b066:	d100      	bne.n	b06a <__aeabi_dsub+0x536>
    b068:	e76b      	b.n	af42 <__aeabi_dsub+0x40e>
    b06a:	4650      	mov	r0, sl
    b06c:	0767      	lsls	r7, r4, #29
    b06e:	08c0      	lsrs	r0, r0, #3
    b070:	4307      	orrs	r7, r0
    b072:	2080      	movs	r0, #128	; 0x80
    b074:	08e4      	lsrs	r4, r4, #3
    b076:	0300      	lsls	r0, r0, #12
    b078:	4204      	tst	r4, r0
    b07a:	d007      	beq.n	b08c <__aeabi_dsub+0x558>
    b07c:	08cd      	lsrs	r5, r1, #3
    b07e:	4205      	tst	r5, r0
    b080:	d104      	bne.n	b08c <__aeabi_dsub+0x558>
    b082:	002c      	movs	r4, r5
    b084:	4698      	mov	r8, r3
    b086:	08d7      	lsrs	r7, r2, #3
    b088:	0749      	lsls	r1, r1, #29
    b08a:	430f      	orrs	r7, r1
    b08c:	0f7b      	lsrs	r3, r7, #29
    b08e:	00e4      	lsls	r4, r4, #3
    b090:	431c      	orrs	r4, r3
    b092:	00ff      	lsls	r7, r7, #3
    b094:	4e30      	ldr	r6, [pc, #192]	; (b158 <__aeabi_dsub+0x624>)
    b096:	e5d3      	b.n	ac40 <__aeabi_dsub+0x10c>
    b098:	4e2f      	ldr	r6, [pc, #188]	; (b158 <__aeabi_dsub+0x624>)
    b09a:	45b4      	cmp	ip, r6
    b09c:	d1b4      	bne.n	b008 <__aeabi_dsub+0x4d4>
    b09e:	000c      	movs	r4, r1
    b0a0:	0017      	movs	r7, r2
    b0a2:	4666      	mov	r6, ip
    b0a4:	e5cc      	b.n	ac40 <__aeabi_dsub+0x10c>
    b0a6:	2700      	movs	r7, #0
    b0a8:	2400      	movs	r4, #0
    b0aa:	e5e8      	b.n	ac7e <__aeabi_dsub+0x14a>
    b0ac:	2b00      	cmp	r3, #0
    b0ae:	d039      	beq.n	b124 <__aeabi_dsub+0x5f0>
    b0b0:	000b      	movs	r3, r1
    b0b2:	4313      	orrs	r3, r2
    b0b4:	d100      	bne.n	b0b8 <__aeabi_dsub+0x584>
    b0b6:	e744      	b.n	af42 <__aeabi_dsub+0x40e>
    b0b8:	08c0      	lsrs	r0, r0, #3
    b0ba:	0767      	lsls	r7, r4, #29
    b0bc:	4307      	orrs	r7, r0
    b0be:	2080      	movs	r0, #128	; 0x80
    b0c0:	08e4      	lsrs	r4, r4, #3
    b0c2:	0300      	lsls	r0, r0, #12
    b0c4:	4204      	tst	r4, r0
    b0c6:	d0e1      	beq.n	b08c <__aeabi_dsub+0x558>
    b0c8:	08cb      	lsrs	r3, r1, #3
    b0ca:	4203      	tst	r3, r0
    b0cc:	d1de      	bne.n	b08c <__aeabi_dsub+0x558>
    b0ce:	08d7      	lsrs	r7, r2, #3
    b0d0:	0749      	lsls	r1, r1, #29
    b0d2:	430f      	orrs	r7, r1
    b0d4:	001c      	movs	r4, r3
    b0d6:	e7d9      	b.n	b08c <__aeabi_dsub+0x558>
    b0d8:	2100      	movs	r1, #0
    b0da:	e771      	b.n	afc0 <__aeabi_dsub+0x48c>
    b0dc:	2500      	movs	r5, #0
    b0de:	2700      	movs	r7, #0
    b0e0:	e5e9      	b.n	acb6 <__aeabi_dsub+0x182>
    b0e2:	002e      	movs	r6, r5
    b0e4:	0027      	movs	r7, r4
    b0e6:	3e20      	subs	r6, #32
    b0e8:	40f7      	lsrs	r7, r6
    b0ea:	2d20      	cmp	r5, #32
    b0ec:	d02f      	beq.n	b14e <__aeabi_dsub+0x61a>
    b0ee:	2640      	movs	r6, #64	; 0x40
    b0f0:	1b75      	subs	r5, r6, r5
    b0f2:	40ac      	lsls	r4, r5
    b0f4:	4650      	mov	r0, sl
    b0f6:	4320      	orrs	r0, r4
    b0f8:	1e44      	subs	r4, r0, #1
    b0fa:	41a0      	sbcs	r0, r4
    b0fc:	2400      	movs	r4, #0
    b0fe:	4338      	orrs	r0, r7
    b100:	e6dc      	b.n	aebc <__aeabi_dsub+0x388>
    b102:	2480      	movs	r4, #128	; 0x80
    b104:	2500      	movs	r5, #0
    b106:	0324      	lsls	r4, r4, #12
    b108:	4e13      	ldr	r6, [pc, #76]	; (b158 <__aeabi_dsub+0x624>)
    b10a:	2700      	movs	r7, #0
    b10c:	e5d3      	b.n	acb6 <__aeabi_dsub+0x182>
    b10e:	4650      	mov	r0, sl
    b110:	4320      	orrs	r0, r4
    b112:	0007      	movs	r7, r0
    b114:	1e78      	subs	r0, r7, #1
    b116:	4187      	sbcs	r7, r0
    b118:	2400      	movs	r4, #0
    b11a:	18bf      	adds	r7, r7, r2
    b11c:	e760      	b.n	afe0 <__aeabi_dsub+0x4ac>
    b11e:	000c      	movs	r4, r1
    b120:	0017      	movs	r7, r2
    b122:	e58d      	b.n	ac40 <__aeabi_dsub+0x10c>
    b124:	000c      	movs	r4, r1
    b126:	0017      	movs	r7, r2
    b128:	4e0b      	ldr	r6, [pc, #44]	; (b158 <__aeabi_dsub+0x624>)
    b12a:	e589      	b.n	ac40 <__aeabi_dsub+0x10c>
    b12c:	001e      	movs	r6, r3
    b12e:	0027      	movs	r7, r4
    b130:	3e20      	subs	r6, #32
    b132:	40f7      	lsrs	r7, r6
    b134:	2b20      	cmp	r3, #32
    b136:	d00c      	beq.n	b152 <__aeabi_dsub+0x61e>
    b138:	2640      	movs	r6, #64	; 0x40
    b13a:	1af3      	subs	r3, r6, r3
    b13c:	409c      	lsls	r4, r3
    b13e:	4650      	mov	r0, sl
    b140:	4320      	orrs	r0, r4
    b142:	1e44      	subs	r4, r0, #1
    b144:	41a0      	sbcs	r0, r4
    b146:	4307      	orrs	r7, r0
    b148:	2400      	movs	r4, #0
    b14a:	18bf      	adds	r7, r7, r2
    b14c:	e748      	b.n	afe0 <__aeabi_dsub+0x4ac>
    b14e:	2400      	movs	r4, #0
    b150:	e7d0      	b.n	b0f4 <__aeabi_dsub+0x5c0>
    b152:	2400      	movs	r4, #0
    b154:	e7f3      	b.n	b13e <__aeabi_dsub+0x60a>
    b156:	46c0      	nop			; (mov r8, r8)
    b158:	000007ff 	.word	0x000007ff
    b15c:	ff7fffff 	.word	0xff7fffff

0000b160 <__aeabi_dcmpun>:
    b160:	b570      	push	{r4, r5, r6, lr}
    b162:	4e0e      	ldr	r6, [pc, #56]	; (b19c <__aeabi_dcmpun+0x3c>)
    b164:	030d      	lsls	r5, r1, #12
    b166:	031c      	lsls	r4, r3, #12
    b168:	0049      	lsls	r1, r1, #1
    b16a:	005b      	lsls	r3, r3, #1
    b16c:	0b2d      	lsrs	r5, r5, #12
    b16e:	0d49      	lsrs	r1, r1, #21
    b170:	0b24      	lsrs	r4, r4, #12
    b172:	0d5b      	lsrs	r3, r3, #21
    b174:	42b1      	cmp	r1, r6
    b176:	d004      	beq.n	b182 <__aeabi_dcmpun+0x22>
    b178:	4908      	ldr	r1, [pc, #32]	; (b19c <__aeabi_dcmpun+0x3c>)
    b17a:	2000      	movs	r0, #0
    b17c:	428b      	cmp	r3, r1
    b17e:	d008      	beq.n	b192 <__aeabi_dcmpun+0x32>
    b180:	bd70      	pop	{r4, r5, r6, pc}
    b182:	4305      	orrs	r5, r0
    b184:	2001      	movs	r0, #1
    b186:	2d00      	cmp	r5, #0
    b188:	d1fa      	bne.n	b180 <__aeabi_dcmpun+0x20>
    b18a:	4904      	ldr	r1, [pc, #16]	; (b19c <__aeabi_dcmpun+0x3c>)
    b18c:	2000      	movs	r0, #0
    b18e:	428b      	cmp	r3, r1
    b190:	d1f6      	bne.n	b180 <__aeabi_dcmpun+0x20>
    b192:	4314      	orrs	r4, r2
    b194:	0020      	movs	r0, r4
    b196:	1e44      	subs	r4, r0, #1
    b198:	41a0      	sbcs	r0, r4
    b19a:	e7f1      	b.n	b180 <__aeabi_dcmpun+0x20>
    b19c:	000007ff 	.word	0x000007ff

0000b1a0 <__aeabi_d2iz>:
    b1a0:	b530      	push	{r4, r5, lr}
    b1a2:	4d13      	ldr	r5, [pc, #76]	; (b1f0 <__aeabi_d2iz+0x50>)
    b1a4:	030a      	lsls	r2, r1, #12
    b1a6:	004b      	lsls	r3, r1, #1
    b1a8:	0b12      	lsrs	r2, r2, #12
    b1aa:	0d5b      	lsrs	r3, r3, #21
    b1ac:	0fc9      	lsrs	r1, r1, #31
    b1ae:	2400      	movs	r4, #0
    b1b0:	42ab      	cmp	r3, r5
    b1b2:	dd10      	ble.n	b1d6 <__aeabi_d2iz+0x36>
    b1b4:	4c0f      	ldr	r4, [pc, #60]	; (b1f4 <__aeabi_d2iz+0x54>)
    b1b6:	42a3      	cmp	r3, r4
    b1b8:	dc0f      	bgt.n	b1da <__aeabi_d2iz+0x3a>
    b1ba:	2480      	movs	r4, #128	; 0x80
    b1bc:	4d0e      	ldr	r5, [pc, #56]	; (b1f8 <__aeabi_d2iz+0x58>)
    b1be:	0364      	lsls	r4, r4, #13
    b1c0:	4322      	orrs	r2, r4
    b1c2:	1aed      	subs	r5, r5, r3
    b1c4:	2d1f      	cmp	r5, #31
    b1c6:	dd0b      	ble.n	b1e0 <__aeabi_d2iz+0x40>
    b1c8:	480c      	ldr	r0, [pc, #48]	; (b1fc <__aeabi_d2iz+0x5c>)
    b1ca:	1ac3      	subs	r3, r0, r3
    b1cc:	40da      	lsrs	r2, r3
    b1ce:	4254      	negs	r4, r2
    b1d0:	2900      	cmp	r1, #0
    b1d2:	d100      	bne.n	b1d6 <__aeabi_d2iz+0x36>
    b1d4:	0014      	movs	r4, r2
    b1d6:	0020      	movs	r0, r4
    b1d8:	bd30      	pop	{r4, r5, pc}
    b1da:	4b09      	ldr	r3, [pc, #36]	; (b200 <__aeabi_d2iz+0x60>)
    b1dc:	18cc      	adds	r4, r1, r3
    b1de:	e7fa      	b.n	b1d6 <__aeabi_d2iz+0x36>
    b1e0:	4c08      	ldr	r4, [pc, #32]	; (b204 <__aeabi_d2iz+0x64>)
    b1e2:	40e8      	lsrs	r0, r5
    b1e4:	46a4      	mov	ip, r4
    b1e6:	4463      	add	r3, ip
    b1e8:	409a      	lsls	r2, r3
    b1ea:	4302      	orrs	r2, r0
    b1ec:	e7ef      	b.n	b1ce <__aeabi_d2iz+0x2e>
    b1ee:	46c0      	nop			; (mov r8, r8)
    b1f0:	000003fe 	.word	0x000003fe
    b1f4:	0000041d 	.word	0x0000041d
    b1f8:	00000433 	.word	0x00000433
    b1fc:	00000413 	.word	0x00000413
    b200:	7fffffff 	.word	0x7fffffff
    b204:	fffffbed 	.word	0xfffffbed

0000b208 <__aeabi_i2d>:
    b208:	b570      	push	{r4, r5, r6, lr}
    b20a:	2800      	cmp	r0, #0
    b20c:	d030      	beq.n	b270 <__aeabi_i2d+0x68>
    b20e:	17c3      	asrs	r3, r0, #31
    b210:	18c4      	adds	r4, r0, r3
    b212:	405c      	eors	r4, r3
    b214:	0fc5      	lsrs	r5, r0, #31
    b216:	0020      	movs	r0, r4
    b218:	f000 f94c 	bl	b4b4 <__clzsi2>
    b21c:	4b17      	ldr	r3, [pc, #92]	; (b27c <__aeabi_i2d+0x74>)
    b21e:	4a18      	ldr	r2, [pc, #96]	; (b280 <__aeabi_i2d+0x78>)
    b220:	1a1b      	subs	r3, r3, r0
    b222:	1ad2      	subs	r2, r2, r3
    b224:	2a1f      	cmp	r2, #31
    b226:	dd18      	ble.n	b25a <__aeabi_i2d+0x52>
    b228:	4a16      	ldr	r2, [pc, #88]	; (b284 <__aeabi_i2d+0x7c>)
    b22a:	1ad2      	subs	r2, r2, r3
    b22c:	4094      	lsls	r4, r2
    b22e:	2200      	movs	r2, #0
    b230:	0324      	lsls	r4, r4, #12
    b232:	055b      	lsls	r3, r3, #21
    b234:	0b24      	lsrs	r4, r4, #12
    b236:	0d5b      	lsrs	r3, r3, #21
    b238:	2100      	movs	r1, #0
    b23a:	0010      	movs	r0, r2
    b23c:	0324      	lsls	r4, r4, #12
    b23e:	0d0a      	lsrs	r2, r1, #20
    b240:	0b24      	lsrs	r4, r4, #12
    b242:	0512      	lsls	r2, r2, #20
    b244:	4322      	orrs	r2, r4
    b246:	4c10      	ldr	r4, [pc, #64]	; (b288 <__aeabi_i2d+0x80>)
    b248:	051b      	lsls	r3, r3, #20
    b24a:	4022      	ands	r2, r4
    b24c:	4313      	orrs	r3, r2
    b24e:	005b      	lsls	r3, r3, #1
    b250:	07ed      	lsls	r5, r5, #31
    b252:	085b      	lsrs	r3, r3, #1
    b254:	432b      	orrs	r3, r5
    b256:	0019      	movs	r1, r3
    b258:	bd70      	pop	{r4, r5, r6, pc}
    b25a:	0021      	movs	r1, r4
    b25c:	4091      	lsls	r1, r2
    b25e:	000a      	movs	r2, r1
    b260:	210b      	movs	r1, #11
    b262:	1a08      	subs	r0, r1, r0
    b264:	40c4      	lsrs	r4, r0
    b266:	055b      	lsls	r3, r3, #21
    b268:	0324      	lsls	r4, r4, #12
    b26a:	0b24      	lsrs	r4, r4, #12
    b26c:	0d5b      	lsrs	r3, r3, #21
    b26e:	e7e3      	b.n	b238 <__aeabi_i2d+0x30>
    b270:	2500      	movs	r5, #0
    b272:	2300      	movs	r3, #0
    b274:	2400      	movs	r4, #0
    b276:	2200      	movs	r2, #0
    b278:	e7de      	b.n	b238 <__aeabi_i2d+0x30>
    b27a:	46c0      	nop			; (mov r8, r8)
    b27c:	0000041e 	.word	0x0000041e
    b280:	00000433 	.word	0x00000433
    b284:	00000413 	.word	0x00000413
    b288:	800fffff 	.word	0x800fffff

0000b28c <__aeabi_ui2d>:
    b28c:	b510      	push	{r4, lr}
    b28e:	1e04      	subs	r4, r0, #0
    b290:	d028      	beq.n	b2e4 <__aeabi_ui2d+0x58>
    b292:	f000 f90f 	bl	b4b4 <__clzsi2>
    b296:	4b15      	ldr	r3, [pc, #84]	; (b2ec <__aeabi_ui2d+0x60>)
    b298:	4a15      	ldr	r2, [pc, #84]	; (b2f0 <__aeabi_ui2d+0x64>)
    b29a:	1a1b      	subs	r3, r3, r0
    b29c:	1ad2      	subs	r2, r2, r3
    b29e:	2a1f      	cmp	r2, #31
    b2a0:	dd15      	ble.n	b2ce <__aeabi_ui2d+0x42>
    b2a2:	4a14      	ldr	r2, [pc, #80]	; (b2f4 <__aeabi_ui2d+0x68>)
    b2a4:	1ad2      	subs	r2, r2, r3
    b2a6:	4094      	lsls	r4, r2
    b2a8:	2200      	movs	r2, #0
    b2aa:	0324      	lsls	r4, r4, #12
    b2ac:	055b      	lsls	r3, r3, #21
    b2ae:	0b24      	lsrs	r4, r4, #12
    b2b0:	0d5b      	lsrs	r3, r3, #21
    b2b2:	2100      	movs	r1, #0
    b2b4:	0010      	movs	r0, r2
    b2b6:	0324      	lsls	r4, r4, #12
    b2b8:	0d0a      	lsrs	r2, r1, #20
    b2ba:	0b24      	lsrs	r4, r4, #12
    b2bc:	0512      	lsls	r2, r2, #20
    b2be:	4322      	orrs	r2, r4
    b2c0:	4c0d      	ldr	r4, [pc, #52]	; (b2f8 <__aeabi_ui2d+0x6c>)
    b2c2:	051b      	lsls	r3, r3, #20
    b2c4:	4022      	ands	r2, r4
    b2c6:	4313      	orrs	r3, r2
    b2c8:	005b      	lsls	r3, r3, #1
    b2ca:	0859      	lsrs	r1, r3, #1
    b2cc:	bd10      	pop	{r4, pc}
    b2ce:	0021      	movs	r1, r4
    b2d0:	4091      	lsls	r1, r2
    b2d2:	000a      	movs	r2, r1
    b2d4:	210b      	movs	r1, #11
    b2d6:	1a08      	subs	r0, r1, r0
    b2d8:	40c4      	lsrs	r4, r0
    b2da:	055b      	lsls	r3, r3, #21
    b2dc:	0324      	lsls	r4, r4, #12
    b2de:	0b24      	lsrs	r4, r4, #12
    b2e0:	0d5b      	lsrs	r3, r3, #21
    b2e2:	e7e6      	b.n	b2b2 <__aeabi_ui2d+0x26>
    b2e4:	2300      	movs	r3, #0
    b2e6:	2400      	movs	r4, #0
    b2e8:	2200      	movs	r2, #0
    b2ea:	e7e2      	b.n	b2b2 <__aeabi_ui2d+0x26>
    b2ec:	0000041e 	.word	0x0000041e
    b2f0:	00000433 	.word	0x00000433
    b2f4:	00000413 	.word	0x00000413
    b2f8:	800fffff 	.word	0x800fffff

0000b2fc <__aeabi_f2d>:
    b2fc:	0041      	lsls	r1, r0, #1
    b2fe:	0e09      	lsrs	r1, r1, #24
    b300:	1c4b      	adds	r3, r1, #1
    b302:	b570      	push	{r4, r5, r6, lr}
    b304:	b2db      	uxtb	r3, r3
    b306:	0246      	lsls	r6, r0, #9
    b308:	0a75      	lsrs	r5, r6, #9
    b30a:	0fc4      	lsrs	r4, r0, #31
    b30c:	2b01      	cmp	r3, #1
    b30e:	dd14      	ble.n	b33a <__aeabi_f2d+0x3e>
    b310:	23e0      	movs	r3, #224	; 0xe0
    b312:	009b      	lsls	r3, r3, #2
    b314:	076d      	lsls	r5, r5, #29
    b316:	0b36      	lsrs	r6, r6, #12
    b318:	18cb      	adds	r3, r1, r3
    b31a:	2100      	movs	r1, #0
    b31c:	0d0a      	lsrs	r2, r1, #20
    b31e:	0028      	movs	r0, r5
    b320:	0512      	lsls	r2, r2, #20
    b322:	4d1c      	ldr	r5, [pc, #112]	; (b394 <__aeabi_f2d+0x98>)
    b324:	4332      	orrs	r2, r6
    b326:	055b      	lsls	r3, r3, #21
    b328:	402a      	ands	r2, r5
    b32a:	085b      	lsrs	r3, r3, #1
    b32c:	4313      	orrs	r3, r2
    b32e:	005b      	lsls	r3, r3, #1
    b330:	07e4      	lsls	r4, r4, #31
    b332:	085b      	lsrs	r3, r3, #1
    b334:	4323      	orrs	r3, r4
    b336:	0019      	movs	r1, r3
    b338:	bd70      	pop	{r4, r5, r6, pc}
    b33a:	2900      	cmp	r1, #0
    b33c:	d114      	bne.n	b368 <__aeabi_f2d+0x6c>
    b33e:	2d00      	cmp	r5, #0
    b340:	d01e      	beq.n	b380 <__aeabi_f2d+0x84>
    b342:	0028      	movs	r0, r5
    b344:	f000 f8b6 	bl	b4b4 <__clzsi2>
    b348:	280a      	cmp	r0, #10
    b34a:	dc1c      	bgt.n	b386 <__aeabi_f2d+0x8a>
    b34c:	230b      	movs	r3, #11
    b34e:	002a      	movs	r2, r5
    b350:	1a1b      	subs	r3, r3, r0
    b352:	40da      	lsrs	r2, r3
    b354:	0003      	movs	r3, r0
    b356:	3315      	adds	r3, #21
    b358:	409d      	lsls	r5, r3
    b35a:	4b0f      	ldr	r3, [pc, #60]	; (b398 <__aeabi_f2d+0x9c>)
    b35c:	0312      	lsls	r2, r2, #12
    b35e:	1a1b      	subs	r3, r3, r0
    b360:	055b      	lsls	r3, r3, #21
    b362:	0b16      	lsrs	r6, r2, #12
    b364:	0d5b      	lsrs	r3, r3, #21
    b366:	e7d8      	b.n	b31a <__aeabi_f2d+0x1e>
    b368:	2d00      	cmp	r5, #0
    b36a:	d006      	beq.n	b37a <__aeabi_f2d+0x7e>
    b36c:	0b32      	lsrs	r2, r6, #12
    b36e:	2680      	movs	r6, #128	; 0x80
    b370:	0336      	lsls	r6, r6, #12
    b372:	076d      	lsls	r5, r5, #29
    b374:	4316      	orrs	r6, r2
    b376:	4b09      	ldr	r3, [pc, #36]	; (b39c <__aeabi_f2d+0xa0>)
    b378:	e7cf      	b.n	b31a <__aeabi_f2d+0x1e>
    b37a:	4b08      	ldr	r3, [pc, #32]	; (b39c <__aeabi_f2d+0xa0>)
    b37c:	2600      	movs	r6, #0
    b37e:	e7cc      	b.n	b31a <__aeabi_f2d+0x1e>
    b380:	2300      	movs	r3, #0
    b382:	2600      	movs	r6, #0
    b384:	e7c9      	b.n	b31a <__aeabi_f2d+0x1e>
    b386:	0003      	movs	r3, r0
    b388:	002a      	movs	r2, r5
    b38a:	3b0b      	subs	r3, #11
    b38c:	409a      	lsls	r2, r3
    b38e:	2500      	movs	r5, #0
    b390:	e7e3      	b.n	b35a <__aeabi_f2d+0x5e>
    b392:	46c0      	nop			; (mov r8, r8)
    b394:	800fffff 	.word	0x800fffff
    b398:	00000389 	.word	0x00000389
    b39c:	000007ff 	.word	0x000007ff

0000b3a0 <__aeabi_d2f>:
    b3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3a2:	004c      	lsls	r4, r1, #1
    b3a4:	0d64      	lsrs	r4, r4, #21
    b3a6:	030b      	lsls	r3, r1, #12
    b3a8:	1c62      	adds	r2, r4, #1
    b3aa:	0f45      	lsrs	r5, r0, #29
    b3ac:	0a5b      	lsrs	r3, r3, #9
    b3ae:	0552      	lsls	r2, r2, #21
    b3b0:	432b      	orrs	r3, r5
    b3b2:	0fc9      	lsrs	r1, r1, #31
    b3b4:	00c5      	lsls	r5, r0, #3
    b3b6:	0d52      	lsrs	r2, r2, #21
    b3b8:	2a01      	cmp	r2, #1
    b3ba:	dd28      	ble.n	b40e <__aeabi_d2f+0x6e>
    b3bc:	4a3a      	ldr	r2, [pc, #232]	; (b4a8 <__aeabi_d2f+0x108>)
    b3be:	18a6      	adds	r6, r4, r2
    b3c0:	2efe      	cmp	r6, #254	; 0xfe
    b3c2:	dc1b      	bgt.n	b3fc <__aeabi_d2f+0x5c>
    b3c4:	2e00      	cmp	r6, #0
    b3c6:	dd3e      	ble.n	b446 <__aeabi_d2f+0xa6>
    b3c8:	0180      	lsls	r0, r0, #6
    b3ca:	0002      	movs	r2, r0
    b3cc:	1e50      	subs	r0, r2, #1
    b3ce:	4182      	sbcs	r2, r0
    b3d0:	0f6d      	lsrs	r5, r5, #29
    b3d2:	432a      	orrs	r2, r5
    b3d4:	00db      	lsls	r3, r3, #3
    b3d6:	4313      	orrs	r3, r2
    b3d8:	075a      	lsls	r2, r3, #29
    b3da:	d004      	beq.n	b3e6 <__aeabi_d2f+0x46>
    b3dc:	220f      	movs	r2, #15
    b3de:	401a      	ands	r2, r3
    b3e0:	2a04      	cmp	r2, #4
    b3e2:	d000      	beq.n	b3e6 <__aeabi_d2f+0x46>
    b3e4:	3304      	adds	r3, #4
    b3e6:	2280      	movs	r2, #128	; 0x80
    b3e8:	04d2      	lsls	r2, r2, #19
    b3ea:	401a      	ands	r2, r3
    b3ec:	d05a      	beq.n	b4a4 <__aeabi_d2f+0x104>
    b3ee:	3601      	adds	r6, #1
    b3f0:	2eff      	cmp	r6, #255	; 0xff
    b3f2:	d003      	beq.n	b3fc <__aeabi_d2f+0x5c>
    b3f4:	019b      	lsls	r3, r3, #6
    b3f6:	0a5b      	lsrs	r3, r3, #9
    b3f8:	b2f4      	uxtb	r4, r6
    b3fa:	e001      	b.n	b400 <__aeabi_d2f+0x60>
    b3fc:	24ff      	movs	r4, #255	; 0xff
    b3fe:	2300      	movs	r3, #0
    b400:	0258      	lsls	r0, r3, #9
    b402:	05e4      	lsls	r4, r4, #23
    b404:	0a40      	lsrs	r0, r0, #9
    b406:	07c9      	lsls	r1, r1, #31
    b408:	4320      	orrs	r0, r4
    b40a:	4308      	orrs	r0, r1
    b40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b40e:	2c00      	cmp	r4, #0
    b410:	d007      	beq.n	b422 <__aeabi_d2f+0x82>
    b412:	431d      	orrs	r5, r3
    b414:	d0f2      	beq.n	b3fc <__aeabi_d2f+0x5c>
    b416:	2080      	movs	r0, #128	; 0x80
    b418:	00db      	lsls	r3, r3, #3
    b41a:	0480      	lsls	r0, r0, #18
    b41c:	4303      	orrs	r3, r0
    b41e:	26ff      	movs	r6, #255	; 0xff
    b420:	e7da      	b.n	b3d8 <__aeabi_d2f+0x38>
    b422:	432b      	orrs	r3, r5
    b424:	d003      	beq.n	b42e <__aeabi_d2f+0x8e>
    b426:	2305      	movs	r3, #5
    b428:	08db      	lsrs	r3, r3, #3
    b42a:	2cff      	cmp	r4, #255	; 0xff
    b42c:	d003      	beq.n	b436 <__aeabi_d2f+0x96>
    b42e:	025b      	lsls	r3, r3, #9
    b430:	0a5b      	lsrs	r3, r3, #9
    b432:	b2e4      	uxtb	r4, r4
    b434:	e7e4      	b.n	b400 <__aeabi_d2f+0x60>
    b436:	2b00      	cmp	r3, #0
    b438:	d032      	beq.n	b4a0 <__aeabi_d2f+0x100>
    b43a:	2080      	movs	r0, #128	; 0x80
    b43c:	03c0      	lsls	r0, r0, #15
    b43e:	4303      	orrs	r3, r0
    b440:	025b      	lsls	r3, r3, #9
    b442:	0a5b      	lsrs	r3, r3, #9
    b444:	e7dc      	b.n	b400 <__aeabi_d2f+0x60>
    b446:	0032      	movs	r2, r6
    b448:	3217      	adds	r2, #23
    b44a:	db14      	blt.n	b476 <__aeabi_d2f+0xd6>
    b44c:	2280      	movs	r2, #128	; 0x80
    b44e:	271e      	movs	r7, #30
    b450:	0412      	lsls	r2, r2, #16
    b452:	4313      	orrs	r3, r2
    b454:	1bbf      	subs	r7, r7, r6
    b456:	2f1f      	cmp	r7, #31
    b458:	dc0f      	bgt.n	b47a <__aeabi_d2f+0xda>
    b45a:	4a14      	ldr	r2, [pc, #80]	; (b4ac <__aeabi_d2f+0x10c>)
    b45c:	4694      	mov	ip, r2
    b45e:	4464      	add	r4, ip
    b460:	002a      	movs	r2, r5
    b462:	40a5      	lsls	r5, r4
    b464:	002e      	movs	r6, r5
    b466:	40a3      	lsls	r3, r4
    b468:	1e75      	subs	r5, r6, #1
    b46a:	41ae      	sbcs	r6, r5
    b46c:	40fa      	lsrs	r2, r7
    b46e:	4333      	orrs	r3, r6
    b470:	4313      	orrs	r3, r2
    b472:	2600      	movs	r6, #0
    b474:	e7b0      	b.n	b3d8 <__aeabi_d2f+0x38>
    b476:	2400      	movs	r4, #0
    b478:	e7d5      	b.n	b426 <__aeabi_d2f+0x86>
    b47a:	2202      	movs	r2, #2
    b47c:	4252      	negs	r2, r2
    b47e:	1b96      	subs	r6, r2, r6
    b480:	001a      	movs	r2, r3
    b482:	40f2      	lsrs	r2, r6
    b484:	2f20      	cmp	r7, #32
    b486:	d009      	beq.n	b49c <__aeabi_d2f+0xfc>
    b488:	4809      	ldr	r0, [pc, #36]	; (b4b0 <__aeabi_d2f+0x110>)
    b48a:	4684      	mov	ip, r0
    b48c:	4464      	add	r4, ip
    b48e:	40a3      	lsls	r3, r4
    b490:	432b      	orrs	r3, r5
    b492:	1e5d      	subs	r5, r3, #1
    b494:	41ab      	sbcs	r3, r5
    b496:	2600      	movs	r6, #0
    b498:	4313      	orrs	r3, r2
    b49a:	e79d      	b.n	b3d8 <__aeabi_d2f+0x38>
    b49c:	2300      	movs	r3, #0
    b49e:	e7f7      	b.n	b490 <__aeabi_d2f+0xf0>
    b4a0:	2300      	movs	r3, #0
    b4a2:	e7ad      	b.n	b400 <__aeabi_d2f+0x60>
    b4a4:	0034      	movs	r4, r6
    b4a6:	e7bf      	b.n	b428 <__aeabi_d2f+0x88>
    b4a8:	fffffc80 	.word	0xfffffc80
    b4ac:	fffffc82 	.word	0xfffffc82
    b4b0:	fffffca2 	.word	0xfffffca2

0000b4b4 <__clzsi2>:
    b4b4:	211c      	movs	r1, #28
    b4b6:	2301      	movs	r3, #1
    b4b8:	041b      	lsls	r3, r3, #16
    b4ba:	4298      	cmp	r0, r3
    b4bc:	d301      	bcc.n	b4c2 <__clzsi2+0xe>
    b4be:	0c00      	lsrs	r0, r0, #16
    b4c0:	3910      	subs	r1, #16
    b4c2:	0a1b      	lsrs	r3, r3, #8
    b4c4:	4298      	cmp	r0, r3
    b4c6:	d301      	bcc.n	b4cc <__clzsi2+0x18>
    b4c8:	0a00      	lsrs	r0, r0, #8
    b4ca:	3908      	subs	r1, #8
    b4cc:	091b      	lsrs	r3, r3, #4
    b4ce:	4298      	cmp	r0, r3
    b4d0:	d301      	bcc.n	b4d6 <__clzsi2+0x22>
    b4d2:	0900      	lsrs	r0, r0, #4
    b4d4:	3904      	subs	r1, #4
    b4d6:	a202      	add	r2, pc, #8	; (adr r2, b4e0 <__clzsi2+0x2c>)
    b4d8:	5c10      	ldrb	r0, [r2, r0]
    b4da:	1840      	adds	r0, r0, r1
    b4dc:	4770      	bx	lr
    b4de:	46c0      	nop			; (mov r8, r8)
    b4e0:	02020304 	.word	0x02020304
    b4e4:	01010101 	.word	0x01010101
	...

0000b4f0 <__assert_func>:
    b4f0:	b530      	push	{r4, r5, lr}
    b4f2:	001c      	movs	r4, r3
    b4f4:	4b09      	ldr	r3, [pc, #36]	; (b51c <__assert_func+0x2c>)
    b4f6:	0005      	movs	r5, r0
    b4f8:	681b      	ldr	r3, [r3, #0]
    b4fa:	b085      	sub	sp, #20
    b4fc:	68d8      	ldr	r0, [r3, #12]
    b4fe:	4b08      	ldr	r3, [pc, #32]	; (b520 <__assert_func+0x30>)
    b500:	2a00      	cmp	r2, #0
    b502:	d101      	bne.n	b508 <__assert_func+0x18>
    b504:	4b07      	ldr	r3, [pc, #28]	; (b524 <__assert_func+0x34>)
    b506:	001a      	movs	r2, r3
    b508:	9202      	str	r2, [sp, #8]
    b50a:	9301      	str	r3, [sp, #4]
    b50c:	9100      	str	r1, [sp, #0]
    b50e:	002b      	movs	r3, r5
    b510:	0022      	movs	r2, r4
    b512:	4905      	ldr	r1, [pc, #20]	; (b528 <__assert_func+0x38>)
    b514:	f000 f81e 	bl	b554 <fiprintf>
    b518:	f001 fea4 	bl	d264 <abort>
    b51c:	200000b4 	.word	0x200000b4
    b520:	00010f70 	.word	0x00010f70
    b524:	0000fe0e 	.word	0x0000fe0e
    b528:	00010f7d 	.word	0x00010f7d

0000b52c <__cxa_atexit>:
    b52c:	b570      	push	{r4, r5, r6, lr}
    b52e:	4c05      	ldr	r4, [pc, #20]	; (b544 <__cxa_atexit+0x18>)
    b530:	0005      	movs	r5, r0
    b532:	0013      	movs	r3, r2
    b534:	1e20      	subs	r0, r4, #0
    b536:	d004      	beq.n	b542 <__cxa_atexit+0x16>
    b538:	000a      	movs	r2, r1
    b53a:	2002      	movs	r0, #2
    b53c:	0029      	movs	r1, r5
    b53e:	e000      	b.n	b542 <__cxa_atexit+0x16>
    b540:	bf00      	nop
    b542:	bd70      	pop	{r4, r5, r6, pc}
    b544:	00000000 	.word	0x00000000

0000b548 <__errno>:
    b548:	4b01      	ldr	r3, [pc, #4]	; (b550 <__errno+0x8>)
    b54a:	6818      	ldr	r0, [r3, #0]
    b54c:	4770      	bx	lr
    b54e:	46c0      	nop			; (mov r8, r8)
    b550:	200000b4 	.word	0x200000b4

0000b554 <fiprintf>:
    b554:	b40e      	push	{r1, r2, r3}
    b556:	b503      	push	{r0, r1, lr}
    b558:	0001      	movs	r1, r0
    b55a:	ab03      	add	r3, sp, #12
    b55c:	4804      	ldr	r0, [pc, #16]	; (b570 <fiprintf+0x1c>)
    b55e:	cb04      	ldmia	r3!, {r2}
    b560:	6800      	ldr	r0, [r0, #0]
    b562:	9301      	str	r3, [sp, #4]
    b564:	f000 fc8a 	bl	be7c <_vfiprintf_r>
    b568:	b002      	add	sp, #8
    b56a:	bc08      	pop	{r3}
    b56c:	b003      	add	sp, #12
    b56e:	4718      	bx	r3
    b570:	200000b4 	.word	0x200000b4

0000b574 <gmtime>:
    b574:	4b07      	ldr	r3, [pc, #28]	; (b594 <gmtime+0x20>)
    b576:	b570      	push	{r4, r5, r6, lr}
    b578:	681c      	ldr	r4, [r3, #0]
    b57a:	0005      	movs	r5, r0
    b57c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b57e:	2b00      	cmp	r3, #0
    b580:	d103      	bne.n	b58a <gmtime+0x16>
    b582:	2024      	movs	r0, #36	; 0x24
    b584:	f000 f8fc 	bl	b780 <malloc>
    b588:	63e0      	str	r0, [r4, #60]	; 0x3c
    b58a:	0028      	movs	r0, r5
    b58c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    b58e:	f000 f803 	bl	b598 <gmtime_r>
    b592:	bd70      	pop	{r4, r5, r6, pc}
    b594:	200000b4 	.word	0x200000b4

0000b598 <gmtime_r>:
    b598:	b5f0      	push	{r4, r5, r6, r7, lr}
    b59a:	6805      	ldr	r5, [r0, #0]
    b59c:	b085      	sub	sp, #20
    b59e:	000c      	movs	r4, r1
    b5a0:	0028      	movs	r0, r5
    b5a2:	4952      	ldr	r1, [pc, #328]	; (b6ec <gmtime_r+0x154>)
    b5a4:	f7fd f85c 	bl	8660 <__divsi3>
    b5a8:	4950      	ldr	r1, [pc, #320]	; (b6ec <gmtime_r+0x154>)
    b5aa:	0006      	movs	r6, r0
    b5ac:	0028      	movs	r0, r5
    b5ae:	f7fd f93d 	bl	882c <__aeabi_idivmod>
    b5b2:	1e0f      	subs	r7, r1, #0
    b5b4:	da00      	bge.n	b5b8 <gmtime_r+0x20>
    b5b6:	e080      	b.n	b6ba <gmtime_r+0x122>
    b5b8:	4b4d      	ldr	r3, [pc, #308]	; (b6f0 <gmtime_r+0x158>)
    b5ba:	21e1      	movs	r1, #225	; 0xe1
    b5bc:	0038      	movs	r0, r7
    b5be:	0109      	lsls	r1, r1, #4
    b5c0:	18f5      	adds	r5, r6, r3
    b5c2:	f7fd f84d 	bl	8660 <__divsi3>
    b5c6:	21e1      	movs	r1, #225	; 0xe1
    b5c8:	60a0      	str	r0, [r4, #8]
    b5ca:	0109      	lsls	r1, r1, #4
    b5cc:	0038      	movs	r0, r7
    b5ce:	f7fd f92d 	bl	882c <__aeabi_idivmod>
    b5d2:	000e      	movs	r6, r1
    b5d4:	213c      	movs	r1, #60	; 0x3c
    b5d6:	0030      	movs	r0, r6
    b5d8:	f7fd f842 	bl	8660 <__divsi3>
    b5dc:	213c      	movs	r1, #60	; 0x3c
    b5de:	6060      	str	r0, [r4, #4]
    b5e0:	0030      	movs	r0, r6
    b5e2:	f7fd f923 	bl	882c <__aeabi_idivmod>
    b5e6:	1ce8      	adds	r0, r5, #3
    b5e8:	6021      	str	r1, [r4, #0]
    b5ea:	2107      	movs	r1, #7
    b5ec:	f7fd f91e 	bl	882c <__aeabi_idivmod>
    b5f0:	0028      	movs	r0, r5
    b5f2:	61a1      	str	r1, [r4, #24]
    b5f4:	493f      	ldr	r1, [pc, #252]	; (b6f4 <gmtime_r+0x15c>)
    b5f6:	f7fd f833 	bl	8660 <__divsi3>
    b5fa:	4e3f      	ldr	r6, [pc, #252]	; (b6f8 <gmtime_r+0x160>)
    b5fc:	493f      	ldr	r1, [pc, #252]	; (b6fc <gmtime_r+0x164>)
    b5fe:	4346      	muls	r6, r0
    b600:	1976      	adds	r6, r6, r5
    b602:	0007      	movs	r7, r0
    b604:	0030      	movs	r0, r6
    b606:	f7fc ffa1 	bl	854c <__udivsi3>
    b60a:	493d      	ldr	r1, [pc, #244]	; (b700 <gmtime_r+0x168>)
    b60c:	1985      	adds	r5, r0, r6
    b60e:	0030      	movs	r0, r6
    b610:	f7fc ff9c 	bl	854c <__udivsi3>
    b614:	493b      	ldr	r1, [pc, #236]	; (b704 <gmtime_r+0x16c>)
    b616:	1a2d      	subs	r5, r5, r0
    b618:	0030      	movs	r0, r6
    b61a:	f7fc ff97 	bl	854c <__udivsi3>
    b61e:	216e      	movs	r1, #110	; 0x6e
    b620:	1a2d      	subs	r5, r5, r0
    b622:	31ff      	adds	r1, #255	; 0xff
    b624:	0028      	movs	r0, r5
    b626:	f7fc ff91 	bl	854c <__udivsi3>
    b62a:	4937      	ldr	r1, [pc, #220]	; (b708 <gmtime_r+0x170>)
    b62c:	9001      	str	r0, [sp, #4]
    b62e:	0028      	movs	r0, r5
    b630:	f7fc ff8c 	bl	854c <__udivsi3>
    b634:	4932      	ldr	r1, [pc, #200]	; (b700 <gmtime_r+0x168>)
    b636:	1986      	adds	r6, r0, r6
    b638:	0028      	movs	r0, r5
    b63a:	f7fc ff87 	bl	854c <__udivsi3>
    b63e:	216e      	movs	r1, #110	; 0x6e
    b640:	9b01      	ldr	r3, [sp, #4]
    b642:	31ff      	adds	r1, #255	; 0xff
    b644:	4359      	muls	r1, r3
    b646:	1a36      	subs	r6, r6, r0
    b648:	1a73      	subs	r3, r6, r1
    b64a:	0018      	movs	r0, r3
    b64c:	2605      	movs	r6, #5
    b64e:	4370      	muls	r0, r6
    b650:	2199      	movs	r1, #153	; 0x99
    b652:	3002      	adds	r0, #2
    b654:	9302      	str	r3, [sp, #8]
    b656:	f7fc ff79 	bl	854c <__udivsi3>
    b65a:	0005      	movs	r5, r0
    b65c:	2099      	movs	r0, #153	; 0x99
    b65e:	4368      	muls	r0, r5
    b660:	9b02      	ldr	r3, [sp, #8]
    b662:	3002      	adds	r0, #2
    b664:	3301      	adds	r3, #1
    b666:	0031      	movs	r1, r6
    b668:	9303      	str	r3, [sp, #12]
    b66a:	f7fc ff6f 	bl	854c <__udivsi3>
    b66e:	9b03      	ldr	r3, [sp, #12]
    b670:	1a1b      	subs	r3, r3, r0
    b672:	9303      	str	r3, [sp, #12]
    b674:	2302      	movs	r3, #2
    b676:	2d09      	cmp	r5, #9
    b678:	d900      	bls.n	b67c <gmtime_r+0xe4>
    b67a:	3b0c      	subs	r3, #12
    b67c:	195d      	adds	r5, r3, r5
    b67e:	23c8      	movs	r3, #200	; 0xc8
    b680:	005b      	lsls	r3, r3, #1
    b682:	435f      	muls	r7, r3
    b684:	9b01      	ldr	r3, [sp, #4]
    b686:	2601      	movs	r6, #1
    b688:	18ff      	adds	r7, r7, r3
    b68a:	2300      	movs	r3, #0
    b68c:	42ae      	cmp	r6, r5
    b68e:	415b      	adcs	r3, r3
    b690:	18ff      	adds	r7, r7, r3
    b692:	2332      	movs	r3, #50	; 0x32
    b694:	9a02      	ldr	r2, [sp, #8]
    b696:	33ff      	adds	r3, #255	; 0xff
    b698:	429a      	cmp	r2, r3
    b69a:	d912      	bls.n	b6c2 <gmtime_r+0x12a>
    b69c:	0016      	movs	r6, r2
    b69e:	3e33      	subs	r6, #51	; 0x33
    b6a0:	3eff      	subs	r6, #255	; 0xff
    b6a2:	4b1a      	ldr	r3, [pc, #104]	; (b70c <gmtime_r+0x174>)
    b6a4:	0020      	movs	r0, r4
    b6a6:	18ff      	adds	r7, r7, r3
    b6a8:	9b03      	ldr	r3, [sp, #12]
    b6aa:	61e6      	str	r6, [r4, #28]
    b6ac:	60e3      	str	r3, [r4, #12]
    b6ae:	2300      	movs	r3, #0
    b6b0:	6167      	str	r7, [r4, #20]
    b6b2:	6125      	str	r5, [r4, #16]
    b6b4:	6223      	str	r3, [r4, #32]
    b6b6:	b005      	add	sp, #20
    b6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6ba:	4b0c      	ldr	r3, [pc, #48]	; (b6ec <gmtime_r+0x154>)
    b6bc:	18cf      	adds	r7, r1, r3
    b6be:	4b14      	ldr	r3, [pc, #80]	; (b710 <gmtime_r+0x178>)
    b6c0:	e77b      	b.n	b5ba <gmtime_r+0x22>
    b6c2:	9b01      	ldr	r3, [sp, #4]
    b6c4:	079b      	lsls	r3, r3, #30
    b6c6:	d105      	bne.n	b6d4 <gmtime_r+0x13c>
    b6c8:	2164      	movs	r1, #100	; 0x64
    b6ca:	9801      	ldr	r0, [sp, #4]
    b6cc:	f7fc ffc4 	bl	8658 <__aeabi_uidivmod>
    b6d0:	2900      	cmp	r1, #0
    b6d2:	d106      	bne.n	b6e2 <gmtime_r+0x14a>
    b6d4:	21c8      	movs	r1, #200	; 0xc8
    b6d6:	9801      	ldr	r0, [sp, #4]
    b6d8:	0049      	lsls	r1, r1, #1
    b6da:	f7fc ffbd 	bl	8658 <__aeabi_uidivmod>
    b6de:	424e      	negs	r6, r1
    b6e0:	414e      	adcs	r6, r1
    b6e2:	9802      	ldr	r0, [sp, #8]
    b6e4:	303b      	adds	r0, #59	; 0x3b
    b6e6:	1986      	adds	r6, r0, r6
    b6e8:	e7db      	b.n	b6a2 <gmtime_r+0x10a>
    b6ea:	46c0      	nop			; (mov r8, r8)
    b6ec:	00015180 	.word	0x00015180
    b6f0:	000afa6c 	.word	0x000afa6c
    b6f4:	00023ab1 	.word	0x00023ab1
    b6f8:	fffdc54f 	.word	0xfffdc54f
    b6fc:	00008eac 	.word	0x00008eac
    b700:	000005b4 	.word	0x000005b4
    b704:	00023ab0 	.word	0x00023ab0
    b708:	00008e94 	.word	0x00008e94
    b70c:	fffff894 	.word	0xfffff894
    b710:	000afa6b 	.word	0x000afa6b

0000b714 <__libc_init_array>:
    b714:	b570      	push	{r4, r5, r6, lr}
    b716:	2600      	movs	r6, #0
    b718:	4d0c      	ldr	r5, [pc, #48]	; (b74c <__libc_init_array+0x38>)
    b71a:	4c0d      	ldr	r4, [pc, #52]	; (b750 <__libc_init_array+0x3c>)
    b71c:	1b64      	subs	r4, r4, r5
    b71e:	10a4      	asrs	r4, r4, #2
    b720:	42a6      	cmp	r6, r4
    b722:	d109      	bne.n	b738 <__libc_init_array+0x24>
    b724:	2600      	movs	r6, #0
    b726:	f004 f8f1 	bl	f90c <_init>
    b72a:	4d0a      	ldr	r5, [pc, #40]	; (b754 <__libc_init_array+0x40>)
    b72c:	4c0a      	ldr	r4, [pc, #40]	; (b758 <__libc_init_array+0x44>)
    b72e:	1b64      	subs	r4, r4, r5
    b730:	10a4      	asrs	r4, r4, #2
    b732:	42a6      	cmp	r6, r4
    b734:	d105      	bne.n	b742 <__libc_init_array+0x2e>
    b736:	bd70      	pop	{r4, r5, r6, pc}
    b738:	00b3      	lsls	r3, r6, #2
    b73a:	58eb      	ldr	r3, [r5, r3]
    b73c:	4798      	blx	r3
    b73e:	3601      	adds	r6, #1
    b740:	e7ee      	b.n	b720 <__libc_init_array+0xc>
    b742:	00b3      	lsls	r3, r6, #2
    b744:	58eb      	ldr	r3, [r5, r3]
    b746:	4798      	blx	r3
    b748:	3601      	adds	r6, #1
    b74a:	e7f2      	b.n	b732 <__libc_init_array+0x1e>
    b74c:	200002d0 	.word	0x200002d0
    b750:	200002d0 	.word	0x200002d0
    b754:	200002d0 	.word	0x200002d0
    b758:	200002e8 	.word	0x200002e8

0000b75c <__locale_ctype_ptr_l>:
    b75c:	30ec      	adds	r0, #236	; 0xec
    b75e:	6800      	ldr	r0, [r0, #0]
    b760:	4770      	bx	lr
	...

0000b764 <__locale_ctype_ptr>:
    b764:	4b04      	ldr	r3, [pc, #16]	; (b778 <__locale_ctype_ptr+0x14>)
    b766:	681b      	ldr	r3, [r3, #0]
    b768:	6a1b      	ldr	r3, [r3, #32]
    b76a:	2b00      	cmp	r3, #0
    b76c:	d100      	bne.n	b770 <__locale_ctype_ptr+0xc>
    b76e:	4b03      	ldr	r3, [pc, #12]	; (b77c <__locale_ctype_ptr+0x18>)
    b770:	33ec      	adds	r3, #236	; 0xec
    b772:	6818      	ldr	r0, [r3, #0]
    b774:	4770      	bx	lr
    b776:	46c0      	nop			; (mov r8, r8)
    b778:	200000b4 	.word	0x200000b4
    b77c:	20000118 	.word	0x20000118

0000b780 <malloc>:
    b780:	b510      	push	{r4, lr}
    b782:	4b03      	ldr	r3, [pc, #12]	; (b790 <malloc+0x10>)
    b784:	0001      	movs	r1, r0
    b786:	6818      	ldr	r0, [r3, #0]
    b788:	f000 faf2 	bl	bd70 <_malloc_r>
    b78c:	bd10      	pop	{r4, pc}
    b78e:	46c0      	nop			; (mov r8, r8)
    b790:	200000b4 	.word	0x200000b4

0000b794 <free>:
    b794:	b510      	push	{r4, lr}
    b796:	4b03      	ldr	r3, [pc, #12]	; (b7a4 <free+0x10>)
    b798:	0001      	movs	r1, r0
    b79a:	6818      	ldr	r0, [r3, #0]
    b79c:	f000 fa9e 	bl	bcdc <_free_r>
    b7a0:	bd10      	pop	{r4, pc}
    b7a2:	46c0      	nop			; (mov r8, r8)
    b7a4:	200000b4 	.word	0x200000b4

0000b7a8 <__ascii_mbtowc>:
    b7a8:	b082      	sub	sp, #8
    b7aa:	2900      	cmp	r1, #0
    b7ac:	d100      	bne.n	b7b0 <__ascii_mbtowc+0x8>
    b7ae:	a901      	add	r1, sp, #4
    b7b0:	1e10      	subs	r0, r2, #0
    b7b2:	d006      	beq.n	b7c2 <__ascii_mbtowc+0x1a>
    b7b4:	2b00      	cmp	r3, #0
    b7b6:	d006      	beq.n	b7c6 <__ascii_mbtowc+0x1e>
    b7b8:	7813      	ldrb	r3, [r2, #0]
    b7ba:	600b      	str	r3, [r1, #0]
    b7bc:	7810      	ldrb	r0, [r2, #0]
    b7be:	1e43      	subs	r3, r0, #1
    b7c0:	4198      	sbcs	r0, r3
    b7c2:	b002      	add	sp, #8
    b7c4:	4770      	bx	lr
    b7c6:	2002      	movs	r0, #2
    b7c8:	4240      	negs	r0, r0
    b7ca:	e7fa      	b.n	b7c2 <__ascii_mbtowc+0x1a>

0000b7cc <memcmp>:
    b7cc:	b530      	push	{r4, r5, lr}
    b7ce:	2400      	movs	r4, #0
    b7d0:	42a2      	cmp	r2, r4
    b7d2:	d101      	bne.n	b7d8 <memcmp+0xc>
    b7d4:	2000      	movs	r0, #0
    b7d6:	e005      	b.n	b7e4 <memcmp+0x18>
    b7d8:	5d03      	ldrb	r3, [r0, r4]
    b7da:	1c65      	adds	r5, r4, #1
    b7dc:	5d0c      	ldrb	r4, [r1, r4]
    b7de:	42a3      	cmp	r3, r4
    b7e0:	d001      	beq.n	b7e6 <memcmp+0x1a>
    b7e2:	1b18      	subs	r0, r3, r4
    b7e4:	bd30      	pop	{r4, r5, pc}
    b7e6:	002c      	movs	r4, r5
    b7e8:	e7f2      	b.n	b7d0 <memcmp+0x4>

0000b7ea <memcpy>:
    b7ea:	2300      	movs	r3, #0
    b7ec:	b510      	push	{r4, lr}
    b7ee:	429a      	cmp	r2, r3
    b7f0:	d100      	bne.n	b7f4 <memcpy+0xa>
    b7f2:	bd10      	pop	{r4, pc}
    b7f4:	5ccc      	ldrb	r4, [r1, r3]
    b7f6:	54c4      	strb	r4, [r0, r3]
    b7f8:	3301      	adds	r3, #1
    b7fa:	e7f8      	b.n	b7ee <memcpy+0x4>

0000b7fc <memmove>:
    b7fc:	b510      	push	{r4, lr}
    b7fe:	4288      	cmp	r0, r1
    b800:	d902      	bls.n	b808 <memmove+0xc>
    b802:	188b      	adds	r3, r1, r2
    b804:	4298      	cmp	r0, r3
    b806:	d308      	bcc.n	b81a <memmove+0x1e>
    b808:	2300      	movs	r3, #0
    b80a:	429a      	cmp	r2, r3
    b80c:	d007      	beq.n	b81e <memmove+0x22>
    b80e:	5ccc      	ldrb	r4, [r1, r3]
    b810:	54c4      	strb	r4, [r0, r3]
    b812:	3301      	adds	r3, #1
    b814:	e7f9      	b.n	b80a <memmove+0xe>
    b816:	5c8b      	ldrb	r3, [r1, r2]
    b818:	5483      	strb	r3, [r0, r2]
    b81a:	3a01      	subs	r2, #1
    b81c:	d2fb      	bcs.n	b816 <memmove+0x1a>
    b81e:	bd10      	pop	{r4, pc}

0000b820 <memset>:
    b820:	0003      	movs	r3, r0
    b822:	1882      	adds	r2, r0, r2
    b824:	4293      	cmp	r3, r2
    b826:	d100      	bne.n	b82a <memset+0xa>
    b828:	4770      	bx	lr
    b82a:	7019      	strb	r1, [r3, #0]
    b82c:	3301      	adds	r3, #1
    b82e:	e7f9      	b.n	b824 <memset+0x4>

0000b830 <validate_structure>:
    b830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b832:	6801      	ldr	r1, [r0, #0]
    b834:	0004      	movs	r4, r0
    b836:	293b      	cmp	r1, #59	; 0x3b
    b838:	d90b      	bls.n	b852 <validate_structure+0x22>
    b83a:	223c      	movs	r2, #60	; 0x3c
    b83c:	4668      	mov	r0, sp
    b83e:	f001 fd18 	bl	d272 <div>
    b842:	6863      	ldr	r3, [r4, #4]
    b844:	9900      	ldr	r1, [sp, #0]
    b846:	9a01      	ldr	r2, [sp, #4]
    b848:	185b      	adds	r3, r3, r1
    b84a:	6063      	str	r3, [r4, #4]
    b84c:	2a00      	cmp	r2, #0
    b84e:	db6c      	blt.n	b92a <validate_structure+0xfa>
    b850:	6022      	str	r2, [r4, #0]
    b852:	6861      	ldr	r1, [r4, #4]
    b854:	293b      	cmp	r1, #59	; 0x3b
    b856:	d90b      	bls.n	b870 <validate_structure+0x40>
    b858:	223c      	movs	r2, #60	; 0x3c
    b85a:	4668      	mov	r0, sp
    b85c:	f001 fd09 	bl	d272 <div>
    b860:	68a3      	ldr	r3, [r4, #8]
    b862:	9900      	ldr	r1, [sp, #0]
    b864:	9a01      	ldr	r2, [sp, #4]
    b866:	185b      	adds	r3, r3, r1
    b868:	60a3      	str	r3, [r4, #8]
    b86a:	2a00      	cmp	r2, #0
    b86c:	db62      	blt.n	b934 <validate_structure+0x104>
    b86e:	6062      	str	r2, [r4, #4]
    b870:	68a1      	ldr	r1, [r4, #8]
    b872:	2917      	cmp	r1, #23
    b874:	d90b      	bls.n	b88e <validate_structure+0x5e>
    b876:	2218      	movs	r2, #24
    b878:	4668      	mov	r0, sp
    b87a:	f001 fcfa 	bl	d272 <div>
    b87e:	68e3      	ldr	r3, [r4, #12]
    b880:	9900      	ldr	r1, [sp, #0]
    b882:	9a01      	ldr	r2, [sp, #4]
    b884:	185b      	adds	r3, r3, r1
    b886:	60e3      	str	r3, [r4, #12]
    b888:	2a00      	cmp	r2, #0
    b88a:	db58      	blt.n	b93e <validate_structure+0x10e>
    b88c:	60a2      	str	r2, [r4, #8]
    b88e:	6921      	ldr	r1, [r4, #16]
    b890:	290b      	cmp	r1, #11
    b892:	d90b      	bls.n	b8ac <validate_structure+0x7c>
    b894:	220c      	movs	r2, #12
    b896:	4668      	mov	r0, sp
    b898:	f001 fceb 	bl	d272 <div>
    b89c:	6963      	ldr	r3, [r4, #20]
    b89e:	9900      	ldr	r1, [sp, #0]
    b8a0:	9a01      	ldr	r2, [sp, #4]
    b8a2:	185b      	adds	r3, r3, r1
    b8a4:	6163      	str	r3, [r4, #20]
    b8a6:	2a00      	cmp	r2, #0
    b8a8:	db4e      	blt.n	b948 <validate_structure+0x118>
    b8aa:	6122      	str	r2, [r4, #16]
    b8ac:	6965      	ldr	r5, [r4, #20]
    b8ae:	231c      	movs	r3, #28
    b8b0:	07aa      	lsls	r2, r5, #30
    b8b2:	d10f      	bne.n	b8d4 <validate_structure+0xa4>
    b8b4:	2164      	movs	r1, #100	; 0x64
    b8b6:	0028      	movs	r0, r5
    b8b8:	f7fc ffb8 	bl	882c <__aeabi_idivmod>
    b8bc:	231d      	movs	r3, #29
    b8be:	2900      	cmp	r1, #0
    b8c0:	d108      	bne.n	b8d4 <validate_structure+0xa4>
    b8c2:	4b3d      	ldr	r3, [pc, #244]	; (b9b8 <validate_structure+0x188>)
    b8c4:	3191      	adds	r1, #145	; 0x91
    b8c6:	18e8      	adds	r0, r5, r3
    b8c8:	31ff      	adds	r1, #255	; 0xff
    b8ca:	f7fc ffaf 	bl	882c <__aeabi_idivmod>
    b8ce:	424b      	negs	r3, r1
    b8d0:	414b      	adcs	r3, r1
    b8d2:	331c      	adds	r3, #28
    b8d4:	68e2      	ldr	r2, [r4, #12]
    b8d6:	2a00      	cmp	r2, #0
    b8d8:	dd3b      	ble.n	b952 <validate_structure+0x122>
    b8da:	2602      	movs	r6, #2
    b8dc:	4f37      	ldr	r7, [pc, #220]	; (b9bc <validate_structure+0x18c>)
    b8de:	6921      	ldr	r1, [r4, #16]
    b8e0:	68e2      	ldr	r2, [r4, #12]
    b8e2:	2901      	cmp	r1, #1
    b8e4:	d061      	beq.n	b9aa <validate_structure+0x17a>
    b8e6:	0088      	lsls	r0, r1, #2
    b8e8:	59c0      	ldr	r0, [r0, r7]
    b8ea:	4282      	cmp	r2, r0
    b8ec:	dd35      	ble.n	b95a <validate_structure+0x12a>
    b8ee:	1a12      	subs	r2, r2, r0
    b8f0:	3101      	adds	r1, #1
    b8f2:	60e2      	str	r2, [r4, #12]
    b8f4:	6121      	str	r1, [r4, #16]
    b8f6:	290c      	cmp	r1, #12
    b8f8:	d1f1      	bne.n	b8de <validate_structure+0xae>
    b8fa:	2300      	movs	r3, #0
    b8fc:	6965      	ldr	r5, [r4, #20]
    b8fe:	6123      	str	r3, [r4, #16]
    b900:	1c68      	adds	r0, r5, #1
    b902:	6160      	str	r0, [r4, #20]
    b904:	331c      	adds	r3, #28
    b906:	0782      	lsls	r2, r0, #30
    b908:	d1e9      	bne.n	b8de <validate_structure+0xae>
    b90a:	3158      	adds	r1, #88	; 0x58
    b90c:	f7fc ff8e 	bl	882c <__aeabi_idivmod>
    b910:	231d      	movs	r3, #29
    b912:	2900      	cmp	r1, #0
    b914:	d1e3      	bne.n	b8de <validate_structure+0xae>
    b916:	4b2a      	ldr	r3, [pc, #168]	; (b9c0 <validate_structure+0x190>)
    b918:	3191      	adds	r1, #145	; 0x91
    b91a:	18e8      	adds	r0, r5, r3
    b91c:	31ff      	adds	r1, #255	; 0xff
    b91e:	f7fc ff85 	bl	882c <__aeabi_idivmod>
    b922:	424b      	negs	r3, r1
    b924:	414b      	adcs	r3, r1
    b926:	331c      	adds	r3, #28
    b928:	e7d9      	b.n	b8de <validate_structure+0xae>
    b92a:	323c      	adds	r2, #60	; 0x3c
    b92c:	3b01      	subs	r3, #1
    b92e:	6022      	str	r2, [r4, #0]
    b930:	6063      	str	r3, [r4, #4]
    b932:	e78e      	b.n	b852 <validate_structure+0x22>
    b934:	323c      	adds	r2, #60	; 0x3c
    b936:	3b01      	subs	r3, #1
    b938:	6062      	str	r2, [r4, #4]
    b93a:	60a3      	str	r3, [r4, #8]
    b93c:	e798      	b.n	b870 <validate_structure+0x40>
    b93e:	3218      	adds	r2, #24
    b940:	3b01      	subs	r3, #1
    b942:	60a2      	str	r2, [r4, #8]
    b944:	60e3      	str	r3, [r4, #12]
    b946:	e7a2      	b.n	b88e <validate_structure+0x5e>
    b948:	320c      	adds	r2, #12
    b94a:	3b01      	subs	r3, #1
    b94c:	6122      	str	r2, [r4, #16]
    b94e:	6163      	str	r3, [r4, #20]
    b950:	e7ac      	b.n	b8ac <validate_structure+0x7c>
    b952:	271d      	movs	r7, #29
    b954:	68e6      	ldr	r6, [r4, #12]
    b956:	2e00      	cmp	r6, #0
    b958:	dd00      	ble.n	b95c <validate_structure+0x12c>
    b95a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b95c:	6922      	ldr	r2, [r4, #16]
    b95e:	3a01      	subs	r2, #1
    b960:	6122      	str	r2, [r4, #16]
    b962:	3201      	adds	r2, #1
    b964:	d117      	bne.n	b996 <validate_structure+0x166>
    b966:	230b      	movs	r3, #11
    b968:	2203      	movs	r2, #3
    b96a:	6965      	ldr	r5, [r4, #20]
    b96c:	6123      	str	r3, [r4, #16]
    b96e:	1e68      	subs	r0, r5, #1
    b970:	6160      	str	r0, [r4, #20]
    b972:	3311      	adds	r3, #17
    b974:	4210      	tst	r0, r2
    b976:	d10e      	bne.n	b996 <validate_structure+0x166>
    b978:	2164      	movs	r1, #100	; 0x64
    b97a:	f7fc ff57 	bl	882c <__aeabi_idivmod>
    b97e:	003b      	movs	r3, r7
    b980:	2900      	cmp	r1, #0
    b982:	d108      	bne.n	b996 <validate_structure+0x166>
    b984:	4b0f      	ldr	r3, [pc, #60]	; (b9c4 <validate_structure+0x194>)
    b986:	3191      	adds	r1, #145	; 0x91
    b988:	18e8      	adds	r0, r5, r3
    b98a:	31ff      	adds	r1, #255	; 0xff
    b98c:	f7fc ff4e 	bl	882c <__aeabi_idivmod>
    b990:	424b      	negs	r3, r1
    b992:	414b      	adcs	r3, r1
    b994:	331c      	adds	r3, #28
    b996:	6921      	ldr	r1, [r4, #16]
    b998:	001a      	movs	r2, r3
    b99a:	2901      	cmp	r1, #1
    b99c:	d002      	beq.n	b9a4 <validate_structure+0x174>
    b99e:	4a07      	ldr	r2, [pc, #28]	; (b9bc <validate_structure+0x18c>)
    b9a0:	0089      	lsls	r1, r1, #2
    b9a2:	588a      	ldr	r2, [r1, r2]
    b9a4:	1996      	adds	r6, r2, r6
    b9a6:	60e6      	str	r6, [r4, #12]
    b9a8:	e7d4      	b.n	b954 <validate_structure+0x124>
    b9aa:	4293      	cmp	r3, r2
    b9ac:	dad5      	bge.n	b95a <validate_structure+0x12a>
    b9ae:	1ad2      	subs	r2, r2, r3
    b9b0:	60e2      	str	r2, [r4, #12]
    b9b2:	6126      	str	r6, [r4, #16]
    b9b4:	e793      	b.n	b8de <validate_structure+0xae>
    b9b6:	46c0      	nop			; (mov r8, r8)
    b9b8:	0000076c 	.word	0x0000076c
    b9bc:	00010fb8 	.word	0x00010fb8
    b9c0:	0000076d 	.word	0x0000076d
    b9c4:	0000076b 	.word	0x0000076b

0000b9c8 <mktime>:
    b9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9ca:	b087      	sub	sp, #28
    b9cc:	0004      	movs	r4, r0
    b9ce:	f002 fca9 	bl	e324 <__gettzinfo>
    b9d2:	9004      	str	r0, [sp, #16]
    b9d4:	0020      	movs	r0, r4
    b9d6:	f7ff ff2b 	bl	b830 <validate_structure>
    b9da:	233c      	movs	r3, #60	; 0x3c
    b9dc:	6862      	ldr	r2, [r4, #4]
    b9de:	68a1      	ldr	r1, [r4, #8]
    b9e0:	4353      	muls	r3, r2
    b9e2:	6822      	ldr	r2, [r4, #0]
    b9e4:	6965      	ldr	r5, [r4, #20]
    b9e6:	189b      	adds	r3, r3, r2
    b9e8:	22e1      	movs	r2, #225	; 0xe1
    b9ea:	0112      	lsls	r2, r2, #4
    b9ec:	434a      	muls	r2, r1
    b9ee:	189b      	adds	r3, r3, r2
    b9f0:	68e2      	ldr	r2, [r4, #12]
    b9f2:	9303      	str	r3, [sp, #12]
    b9f4:	6923      	ldr	r3, [r4, #16]
    b9f6:	1e50      	subs	r0, r2, #1
    b9f8:	4ab1      	ldr	r2, [pc, #708]	; (bcc0 <mktime+0x2f8>)
    b9fa:	0099      	lsls	r1, r3, #2
    b9fc:	588a      	ldr	r2, [r1, r2]
    b9fe:	1882      	adds	r2, r0, r2
    ba00:	9201      	str	r2, [sp, #4]
    ba02:	2b01      	cmp	r3, #1
    ba04:	dd12      	ble.n	ba2c <mktime+0x64>
    ba06:	07ab      	lsls	r3, r5, #30
    ba08:	d110      	bne.n	ba2c <mktime+0x64>
    ba0a:	2164      	movs	r1, #100	; 0x64
    ba0c:	0028      	movs	r0, r5
    ba0e:	f7fc ff0d 	bl	882c <__aeabi_idivmod>
    ba12:	2900      	cmp	r1, #0
    ba14:	d107      	bne.n	ba26 <mktime+0x5e>
    ba16:	4bab      	ldr	r3, [pc, #684]	; (bcc4 <mktime+0x2fc>)
    ba18:	3191      	adds	r1, #145	; 0x91
    ba1a:	31ff      	adds	r1, #255	; 0xff
    ba1c:	18e8      	adds	r0, r5, r3
    ba1e:	f7fc ff05 	bl	882c <__aeabi_idivmod>
    ba22:	2900      	cmp	r1, #0
    ba24:	d102      	bne.n	ba2c <mktime+0x64>
    ba26:	9b01      	ldr	r3, [sp, #4]
    ba28:	3301      	adds	r3, #1
    ba2a:	9301      	str	r3, [sp, #4]
    ba2c:	9b01      	ldr	r3, [sp, #4]
    ba2e:	4aa6      	ldr	r2, [pc, #664]	; (bcc8 <mktime+0x300>)
    ba30:	61e3      	str	r3, [r4, #28]
    ba32:	4ba6      	ldr	r3, [pc, #664]	; (bccc <mktime+0x304>)
    ba34:	18eb      	adds	r3, r5, r3
    ba36:	4293      	cmp	r3, r2
    ba38:	d900      	bls.n	ba3c <mktime+0x74>
    ba3a:	e0f8      	b.n	bc2e <mktime+0x266>
    ba3c:	2346      	movs	r3, #70	; 0x46
    ba3e:	9302      	str	r3, [sp, #8]
    ba40:	2d46      	cmp	r5, #70	; 0x46
    ba42:	dc00      	bgt.n	ba46 <mktime+0x7e>
    ba44:	e072      	b.n	bb2c <mktime+0x164>
    ba46:	27b7      	movs	r7, #183	; 0xb7
    ba48:	26c8      	movs	r6, #200	; 0xc8
    ba4a:	007f      	lsls	r7, r7, #1
    ba4c:	0076      	lsls	r6, r6, #1
    ba4e:	2203      	movs	r2, #3
    ba50:	9b02      	ldr	r3, [sp, #8]
    ba52:	4213      	tst	r3, r2
    ba54:	d168      	bne.n	bb28 <mktime+0x160>
    ba56:	0018      	movs	r0, r3
    ba58:	2164      	movs	r1, #100	; 0x64
    ba5a:	f7fc fee7 	bl	882c <__aeabi_idivmod>
    ba5e:	003b      	movs	r3, r7
    ba60:	2900      	cmp	r1, #0
    ba62:	d109      	bne.n	ba78 <mktime+0xb0>
    ba64:	9b02      	ldr	r3, [sp, #8]
    ba66:	4a97      	ldr	r2, [pc, #604]	; (bcc4 <mktime+0x2fc>)
    ba68:	0031      	movs	r1, r6
    ba6a:	1898      	adds	r0, r3, r2
    ba6c:	f7fc fede 	bl	882c <__aeabi_idivmod>
    ba70:	424b      	negs	r3, r1
    ba72:	414b      	adcs	r3, r1
    ba74:	336e      	adds	r3, #110	; 0x6e
    ba76:	33ff      	adds	r3, #255	; 0xff
    ba78:	9a01      	ldr	r2, [sp, #4]
    ba7a:	18d3      	adds	r3, r2, r3
    ba7c:	9301      	str	r3, [sp, #4]
    ba7e:	9b02      	ldr	r3, [sp, #8]
    ba80:	3301      	adds	r3, #1
    ba82:	9302      	str	r3, [sp, #8]
    ba84:	429d      	cmp	r5, r3
    ba86:	d1e2      	bne.n	ba4e <mktime+0x86>
    ba88:	9a01      	ldr	r2, [sp, #4]
    ba8a:	4b91      	ldr	r3, [pc, #580]	; (bcd0 <mktime+0x308>)
    ba8c:	4353      	muls	r3, r2
    ba8e:	9a03      	ldr	r2, [sp, #12]
    ba90:	189b      	adds	r3, r3, r2
    ba92:	9303      	str	r3, [sp, #12]
    ba94:	f001 f962 	bl	cd5c <__tz_lock>
    ba98:	f001 f962 	bl	cd60 <_tzset_unlocked>
    ba9c:	4b8d      	ldr	r3, [pc, #564]	; (bcd4 <mktime+0x30c>)
    ba9e:	681d      	ldr	r5, [r3, #0]
    baa0:	2d00      	cmp	r5, #0
    baa2:	d100      	bne.n	baa6 <mktime+0xde>
    baa4:	e107      	b.n	bcb6 <mktime+0x2ee>
    baa6:	6963      	ldr	r3, [r4, #20]
    baa8:	4a86      	ldr	r2, [pc, #536]	; (bcc4 <mktime+0x2fc>)
    baaa:	6a26      	ldr	r6, [r4, #32]
    baac:	1898      	adds	r0, r3, r2
    baae:	2e00      	cmp	r6, #0
    bab0:	dd00      	ble.n	bab4 <mktime+0xec>
    bab2:	2601      	movs	r6, #1
    bab4:	9b04      	ldr	r3, [sp, #16]
    bab6:	685b      	ldr	r3, [r3, #4]
    bab8:	9305      	str	r3, [sp, #20]
    baba:	4298      	cmp	r0, r3
    babc:	d000      	beq.n	bac0 <mktime+0xf8>
    babe:	e073      	b.n	bba8 <mktime+0x1e0>
    bac0:	9b04      	ldr	r3, [sp, #16]
    bac2:	9d03      	ldr	r5, [sp, #12]
    bac4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    bac6:	69db      	ldr	r3, [r3, #28]
    bac8:	9305      	str	r3, [sp, #20]
    baca:	1a1a      	subs	r2, r3, r0
    bacc:	9b04      	ldr	r3, [sp, #16]
    bace:	6b99      	ldr	r1, [r3, #56]	; 0x38
    bad0:	6a1b      	ldr	r3, [r3, #32]
    bad2:	1acf      	subs	r7, r1, r3
    bad4:	42bd      	cmp	r5, r7
    bad6:	db00      	blt.n	bada <mktime+0x112>
    bad8:	e06d      	b.n	bbb6 <mktime+0x1ee>
    bada:	9904      	ldr	r1, [sp, #16]
    badc:	6809      	ldr	r1, [r1, #0]
    bade:	2900      	cmp	r1, #0
    bae0:	d100      	bne.n	bae4 <mktime+0x11c>
    bae2:	e06d      	b.n	bbc0 <mktime+0x1f8>
    bae4:	9903      	ldr	r1, [sp, #12]
    bae6:	4291      	cmp	r1, r2
    bae8:	da00      	bge.n	baec <mktime+0x124>
    baea:	e0e1      	b.n	bcb0 <mktime+0x2e8>
    baec:	2501      	movs	r5, #1
    baee:	42b9      	cmp	r1, r7
    baf0:	db00      	blt.n	baf4 <mktime+0x12c>
    baf2:	2500      	movs	r5, #0
    baf4:	2e00      	cmp	r6, #0
    baf6:	db00      	blt.n	bafa <mktime+0x132>
    baf8:	e0a0      	b.n	bc3c <mktime+0x274>
    bafa:	2d01      	cmp	r5, #1
    bafc:	d000      	beq.n	bb00 <mktime+0x138>
    bafe:	e0da      	b.n	bcb6 <mktime+0x2ee>
    bb00:	2501      	movs	r5, #1
    bb02:	9b04      	ldr	r3, [sp, #16]
    bb04:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    bb06:	9b03      	ldr	r3, [sp, #12]
    bb08:	199e      	adds	r6, r3, r6
    bb0a:	f001 f928 	bl	cd5e <__tz_unlock>
    bb0e:	9801      	ldr	r0, [sp, #4]
    bb10:	6225      	str	r5, [r4, #32]
    bb12:	3004      	adds	r0, #4
    bb14:	2107      	movs	r1, #7
    bb16:	f7fc fe89 	bl	882c <__aeabi_idivmod>
    bb1a:	2900      	cmp	r1, #0
    bb1c:	da00      	bge.n	bb20 <mktime+0x158>
    bb1e:	e084      	b.n	bc2a <mktime+0x262>
    bb20:	61a1      	str	r1, [r4, #24]
    bb22:	0030      	movs	r0, r6
    bb24:	b007      	add	sp, #28
    bb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb28:	236e      	movs	r3, #110	; 0x6e
    bb2a:	e7a4      	b.n	ba76 <mktime+0xae>
    bb2c:	429d      	cmp	r5, r3
    bb2e:	d0ab      	beq.n	ba88 <mktime+0xc0>
    bb30:	2645      	movs	r6, #69	; 0x45
    bb32:	2703      	movs	r7, #3
    bb34:	42ae      	cmp	r6, r5
    bb36:	dc17      	bgt.n	bb68 <mktime+0x1a0>
    bb38:	423d      	tst	r5, r7
    bb3a:	d130      	bne.n	bb9e <mktime+0x1d6>
    bb3c:	2164      	movs	r1, #100	; 0x64
    bb3e:	0028      	movs	r0, r5
    bb40:	f7fc fe74 	bl	882c <__aeabi_idivmod>
    bb44:	2900      	cmp	r1, #0
    bb46:	d12c      	bne.n	bba2 <mktime+0x1da>
    bb48:	4b5e      	ldr	r3, [pc, #376]	; (bcc4 <mktime+0x2fc>)
    bb4a:	3191      	adds	r1, #145	; 0x91
    bb4c:	18e8      	adds	r0, r5, r3
    bb4e:	31ff      	adds	r1, #255	; 0xff
    bb50:	f7fc fe6c 	bl	882c <__aeabi_idivmod>
    bb54:	000b      	movs	r3, r1
    bb56:	4259      	negs	r1, r3
    bb58:	4159      	adcs	r1, r3
    bb5a:	316e      	adds	r1, #110	; 0x6e
    bb5c:	31ff      	adds	r1, #255	; 0xff
    bb5e:	9b01      	ldr	r3, [sp, #4]
    bb60:	9502      	str	r5, [sp, #8]
    bb62:	1a5b      	subs	r3, r3, r1
    bb64:	9301      	str	r3, [sp, #4]
    bb66:	e78f      	b.n	ba88 <mktime+0xc0>
    bb68:	423e      	tst	r6, r7
    bb6a:	d116      	bne.n	bb9a <mktime+0x1d2>
    bb6c:	2164      	movs	r1, #100	; 0x64
    bb6e:	0030      	movs	r0, r6
    bb70:	f7fc fe5c 	bl	882c <__aeabi_idivmod>
    bb74:	23b7      	movs	r3, #183	; 0xb7
    bb76:	005b      	lsls	r3, r3, #1
    bb78:	2900      	cmp	r1, #0
    bb7a:	d109      	bne.n	bb90 <mktime+0x1c8>
    bb7c:	4b51      	ldr	r3, [pc, #324]	; (bcc4 <mktime+0x2fc>)
    bb7e:	3191      	adds	r1, #145	; 0x91
    bb80:	18f0      	adds	r0, r6, r3
    bb82:	31ff      	adds	r1, #255	; 0xff
    bb84:	f7fc fe52 	bl	882c <__aeabi_idivmod>
    bb88:	424b      	negs	r3, r1
    bb8a:	414b      	adcs	r3, r1
    bb8c:	336e      	adds	r3, #110	; 0x6e
    bb8e:	33ff      	adds	r3, #255	; 0xff
    bb90:	9a01      	ldr	r2, [sp, #4]
    bb92:	3e01      	subs	r6, #1
    bb94:	1ad3      	subs	r3, r2, r3
    bb96:	9301      	str	r3, [sp, #4]
    bb98:	e7cc      	b.n	bb34 <mktime+0x16c>
    bb9a:	236e      	movs	r3, #110	; 0x6e
    bb9c:	e7f7      	b.n	bb8e <mktime+0x1c6>
    bb9e:	216e      	movs	r1, #110	; 0x6e
    bba0:	e7dc      	b.n	bb5c <mktime+0x194>
    bba2:	21b7      	movs	r1, #183	; 0xb7
    bba4:	0049      	lsls	r1, r1, #1
    bba6:	e7da      	b.n	bb5e <mktime+0x196>
    bba8:	f001 f82a 	bl	cc00 <__tzcalc_limits>
    bbac:	2800      	cmp	r0, #0
    bbae:	d000      	beq.n	bbb2 <mktime+0x1ea>
    bbb0:	e786      	b.n	bac0 <mktime+0xf8>
    bbb2:	0035      	movs	r5, r6
    bbb4:	e7a1      	b.n	bafa <mktime+0x132>
    bbb6:	9d03      	ldr	r5, [sp, #12]
    bbb8:	1a09      	subs	r1, r1, r0
    bbba:	428d      	cmp	r5, r1
    bbbc:	dbf9      	blt.n	bbb2 <mktime+0x1ea>
    bbbe:	e78c      	b.n	bada <mktime+0x112>
    bbc0:	9d03      	ldr	r5, [sp, #12]
    bbc2:	4295      	cmp	r5, r2
    bbc4:	da36      	bge.n	bc34 <mktime+0x26c>
    bbc6:	9a03      	ldr	r2, [sp, #12]
    bbc8:	2501      	movs	r5, #1
    bbca:	42ba      	cmp	r2, r7
    bbcc:	da00      	bge.n	bbd0 <mktime+0x208>
    bbce:	e791      	b.n	baf4 <mktime+0x12c>
    bbd0:	000d      	movs	r5, r1
    bbd2:	e78f      	b.n	baf4 <mktime+0x12c>
    bbd4:	2701      	movs	r7, #1
    bbd6:	427f      	negs	r7, r7
    bbd8:	e04b      	b.n	bc72 <mktime+0x2aa>
    bbda:	21b6      	movs	r1, #182	; 0xb6
    bbdc:	0049      	lsls	r1, r1, #1
    bbde:	61e1      	str	r1, [r4, #28]
    bbe0:	e78b      	b.n	bafa <mktime+0x132>
    bbe2:	216e      	movs	r1, #110	; 0x6e
    bbe4:	e062      	b.n	bcac <mktime+0x2e4>
    bbe6:	9a02      	ldr	r2, [sp, #8]
    bbe8:	421a      	tst	r2, r3
    bbea:	d117      	bne.n	bc1c <mktime+0x254>
    bbec:	2164      	movs	r1, #100	; 0x64
    bbee:	0010      	movs	r0, r2
    bbf0:	f7fc fe1c 	bl	882c <__aeabi_idivmod>
    bbf4:	2900      	cmp	r1, #0
    bbf6:	d113      	bne.n	bc20 <mktime+0x258>
    bbf8:	4a32      	ldr	r2, [pc, #200]	; (bcc4 <mktime+0x2fc>)
    bbfa:	9b02      	ldr	r3, [sp, #8]
    bbfc:	4694      	mov	ip, r2
    bbfe:	3191      	adds	r1, #145	; 0x91
    bc00:	4463      	add	r3, ip
    bc02:	0018      	movs	r0, r3
    bc04:	31ff      	adds	r1, #255	; 0xff
    bc06:	f7fc fe11 	bl	882c <__aeabi_idivmod>
    bc0a:	000b      	movs	r3, r1
    bc0c:	4259      	negs	r1, r3
    bc0e:	4159      	adcs	r1, r3
    bc10:	316e      	adds	r1, #110	; 0x6e
    bc12:	31ff      	adds	r1, #255	; 0xff
    bc14:	42b9      	cmp	r1, r7
    bc16:	dd06      	ble.n	bc26 <mktime+0x25e>
    bc18:	61e7      	str	r7, [r4, #28]
    bc1a:	e76e      	b.n	bafa <mktime+0x132>
    bc1c:	216e      	movs	r1, #110	; 0x6e
    bc1e:	e7f8      	b.n	bc12 <mktime+0x24a>
    bc20:	21b7      	movs	r1, #183	; 0xb7
    bc22:	0049      	lsls	r1, r1, #1
    bc24:	e7f6      	b.n	bc14 <mktime+0x24c>
    bc26:	1a7f      	subs	r7, r7, r1
    bc28:	e7f6      	b.n	bc18 <mktime+0x250>
    bc2a:	3107      	adds	r1, #7
    bc2c:	e778      	b.n	bb20 <mktime+0x158>
    bc2e:	2601      	movs	r6, #1
    bc30:	4276      	negs	r6, r6
    bc32:	e776      	b.n	bb22 <mktime+0x15a>
    bc34:	2501      	movs	r5, #1
    bc36:	2e00      	cmp	r6, #0
    bc38:	da00      	bge.n	bc3c <mktime+0x274>
    bc3a:	e761      	b.n	bb00 <mktime+0x138>
    bc3c:	406e      	eors	r6, r5
    bc3e:	2e01      	cmp	r6, #1
    bc40:	d000      	beq.n	bc44 <mktime+0x27c>
    bc42:	e75a      	b.n	bafa <mktime+0x132>
    bc44:	1a1b      	subs	r3, r3, r0
    bc46:	2d00      	cmp	r5, #0
    bc48:	d100      	bne.n	bc4c <mktime+0x284>
    bc4a:	425b      	negs	r3, r3
    bc4c:	6822      	ldr	r2, [r4, #0]
    bc4e:	0020      	movs	r0, r4
    bc50:	18d2      	adds	r2, r2, r3
    bc52:	6022      	str	r2, [r4, #0]
    bc54:	9a03      	ldr	r2, [sp, #12]
    bc56:	68e7      	ldr	r7, [r4, #12]
    bc58:	18d3      	adds	r3, r2, r3
    bc5a:	9303      	str	r3, [sp, #12]
    bc5c:	f7ff fde8 	bl	b830 <validate_structure>
    bc60:	68e3      	ldr	r3, [r4, #12]
    bc62:	1bdf      	subs	r7, r3, r7
    bc64:	d100      	bne.n	bc68 <mktime+0x2a0>
    bc66:	e748      	b.n	bafa <mktime+0x132>
    bc68:	2f01      	cmp	r7, #1
    bc6a:	dcb3      	bgt.n	bbd4 <mktime+0x20c>
    bc6c:	1c7b      	adds	r3, r7, #1
    bc6e:	da00      	bge.n	bc72 <mktime+0x2aa>
    bc70:	0037      	movs	r7, r6
    bc72:	9b01      	ldr	r3, [sp, #4]
    bc74:	69e2      	ldr	r2, [r4, #28]
    bc76:	19db      	adds	r3, r3, r7
    bc78:	9301      	str	r3, [sp, #4]
    bc7a:	2303      	movs	r3, #3
    bc7c:	18bf      	adds	r7, r7, r2
    bc7e:	d5b2      	bpl.n	bbe6 <mktime+0x21e>
    bc80:	9a02      	ldr	r2, [sp, #8]
    bc82:	1e50      	subs	r0, r2, #1
    bc84:	4218      	tst	r0, r3
    bc86:	d1a8      	bne.n	bbda <mktime+0x212>
    bc88:	2164      	movs	r1, #100	; 0x64
    bc8a:	f7fc fdcf 	bl	882c <__aeabi_idivmod>
    bc8e:	2900      	cmp	r1, #0
    bc90:	d1a7      	bne.n	bbe2 <mktime+0x21a>
    bc92:	4a11      	ldr	r2, [pc, #68]	; (bcd8 <mktime+0x310>)
    bc94:	9b02      	ldr	r3, [sp, #8]
    bc96:	4694      	mov	ip, r2
    bc98:	3191      	adds	r1, #145	; 0x91
    bc9a:	4463      	add	r3, ip
    bc9c:	0018      	movs	r0, r3
    bc9e:	31ff      	adds	r1, #255	; 0xff
    bca0:	f7fc fdc4 	bl	882c <__aeabi_idivmod>
    bca4:	000b      	movs	r3, r1
    bca6:	4259      	negs	r1, r3
    bca8:	4159      	adcs	r1, r3
    bcaa:	316d      	adds	r1, #109	; 0x6d
    bcac:	31ff      	adds	r1, #255	; 0xff
    bcae:	e796      	b.n	bbde <mktime+0x216>
    bcb0:	2500      	movs	r5, #0
    bcb2:	2e00      	cmp	r6, #0
    bcb4:	dac2      	bge.n	bc3c <mktime+0x274>
    bcb6:	9b04      	ldr	r3, [sp, #16]
    bcb8:	6a1e      	ldr	r6, [r3, #32]
    bcba:	9b03      	ldr	r3, [sp, #12]
    bcbc:	199e      	adds	r6, r3, r6
    bcbe:	e724      	b.n	bb0a <mktime+0x142>
    bcc0:	00010fe8 	.word	0x00010fe8
    bcc4:	0000076c 	.word	0x0000076c
    bcc8:	00004e20 	.word	0x00004e20
    bccc:	00002710 	.word	0x00002710
    bcd0:	00015180 	.word	0x00015180
    bcd4:	20001e50 	.word	0x20001e50
    bcd8:	0000076b 	.word	0x0000076b

0000bcdc <_free_r>:
    bcdc:	b570      	push	{r4, r5, r6, lr}
    bcde:	0005      	movs	r5, r0
    bce0:	2900      	cmp	r1, #0
    bce2:	d010      	beq.n	bd06 <_free_r+0x2a>
    bce4:	1f0c      	subs	r4, r1, #4
    bce6:	6823      	ldr	r3, [r4, #0]
    bce8:	2b00      	cmp	r3, #0
    bcea:	da00      	bge.n	bcee <_free_r+0x12>
    bcec:	18e4      	adds	r4, r4, r3
    bcee:	0028      	movs	r0, r5
    bcf0:	f002 fb9f 	bl	e432 <__malloc_lock>
    bcf4:	4a1d      	ldr	r2, [pc, #116]	; (bd6c <_free_r+0x90>)
    bcf6:	6813      	ldr	r3, [r2, #0]
    bcf8:	2b00      	cmp	r3, #0
    bcfa:	d105      	bne.n	bd08 <_free_r+0x2c>
    bcfc:	6063      	str	r3, [r4, #4]
    bcfe:	6014      	str	r4, [r2, #0]
    bd00:	0028      	movs	r0, r5
    bd02:	f002 fb97 	bl	e434 <__malloc_unlock>
    bd06:	bd70      	pop	{r4, r5, r6, pc}
    bd08:	42a3      	cmp	r3, r4
    bd0a:	d909      	bls.n	bd20 <_free_r+0x44>
    bd0c:	6821      	ldr	r1, [r4, #0]
    bd0e:	1860      	adds	r0, r4, r1
    bd10:	4283      	cmp	r3, r0
    bd12:	d1f3      	bne.n	bcfc <_free_r+0x20>
    bd14:	6818      	ldr	r0, [r3, #0]
    bd16:	685b      	ldr	r3, [r3, #4]
    bd18:	1841      	adds	r1, r0, r1
    bd1a:	6021      	str	r1, [r4, #0]
    bd1c:	e7ee      	b.n	bcfc <_free_r+0x20>
    bd1e:	0013      	movs	r3, r2
    bd20:	685a      	ldr	r2, [r3, #4]
    bd22:	2a00      	cmp	r2, #0
    bd24:	d001      	beq.n	bd2a <_free_r+0x4e>
    bd26:	42a2      	cmp	r2, r4
    bd28:	d9f9      	bls.n	bd1e <_free_r+0x42>
    bd2a:	6819      	ldr	r1, [r3, #0]
    bd2c:	1858      	adds	r0, r3, r1
    bd2e:	42a0      	cmp	r0, r4
    bd30:	d10b      	bne.n	bd4a <_free_r+0x6e>
    bd32:	6820      	ldr	r0, [r4, #0]
    bd34:	1809      	adds	r1, r1, r0
    bd36:	1858      	adds	r0, r3, r1
    bd38:	6019      	str	r1, [r3, #0]
    bd3a:	4282      	cmp	r2, r0
    bd3c:	d1e0      	bne.n	bd00 <_free_r+0x24>
    bd3e:	6810      	ldr	r0, [r2, #0]
    bd40:	6852      	ldr	r2, [r2, #4]
    bd42:	1841      	adds	r1, r0, r1
    bd44:	6019      	str	r1, [r3, #0]
    bd46:	605a      	str	r2, [r3, #4]
    bd48:	e7da      	b.n	bd00 <_free_r+0x24>
    bd4a:	42a0      	cmp	r0, r4
    bd4c:	d902      	bls.n	bd54 <_free_r+0x78>
    bd4e:	230c      	movs	r3, #12
    bd50:	602b      	str	r3, [r5, #0]
    bd52:	e7d5      	b.n	bd00 <_free_r+0x24>
    bd54:	6821      	ldr	r1, [r4, #0]
    bd56:	1860      	adds	r0, r4, r1
    bd58:	4282      	cmp	r2, r0
    bd5a:	d103      	bne.n	bd64 <_free_r+0x88>
    bd5c:	6810      	ldr	r0, [r2, #0]
    bd5e:	6852      	ldr	r2, [r2, #4]
    bd60:	1841      	adds	r1, r0, r1
    bd62:	6021      	str	r1, [r4, #0]
    bd64:	6062      	str	r2, [r4, #4]
    bd66:	605c      	str	r4, [r3, #4]
    bd68:	e7ca      	b.n	bd00 <_free_r+0x24>
    bd6a:	46c0      	nop			; (mov r8, r8)
    bd6c:	20001e2c 	.word	0x20001e2c

0000bd70 <_malloc_r>:
    bd70:	2303      	movs	r3, #3
    bd72:	b570      	push	{r4, r5, r6, lr}
    bd74:	1ccd      	adds	r5, r1, #3
    bd76:	439d      	bics	r5, r3
    bd78:	3508      	adds	r5, #8
    bd7a:	0006      	movs	r6, r0
    bd7c:	2d0c      	cmp	r5, #12
    bd7e:	d21e      	bcs.n	bdbe <_malloc_r+0x4e>
    bd80:	250c      	movs	r5, #12
    bd82:	42a9      	cmp	r1, r5
    bd84:	d81d      	bhi.n	bdc2 <_malloc_r+0x52>
    bd86:	0030      	movs	r0, r6
    bd88:	f002 fb53 	bl	e432 <__malloc_lock>
    bd8c:	4a25      	ldr	r2, [pc, #148]	; (be24 <_malloc_r+0xb4>)
    bd8e:	6814      	ldr	r4, [r2, #0]
    bd90:	0021      	movs	r1, r4
    bd92:	2900      	cmp	r1, #0
    bd94:	d119      	bne.n	bdca <_malloc_r+0x5a>
    bd96:	4c24      	ldr	r4, [pc, #144]	; (be28 <_malloc_r+0xb8>)
    bd98:	6823      	ldr	r3, [r4, #0]
    bd9a:	2b00      	cmp	r3, #0
    bd9c:	d103      	bne.n	bda6 <_malloc_r+0x36>
    bd9e:	0030      	movs	r0, r6
    bda0:	f000 fdf8 	bl	c994 <_sbrk_r>
    bda4:	6020      	str	r0, [r4, #0]
    bda6:	0029      	movs	r1, r5
    bda8:	0030      	movs	r0, r6
    bdaa:	f000 fdf3 	bl	c994 <_sbrk_r>
    bdae:	1c43      	adds	r3, r0, #1
    bdb0:	d12c      	bne.n	be0c <_malloc_r+0x9c>
    bdb2:	230c      	movs	r3, #12
    bdb4:	0030      	movs	r0, r6
    bdb6:	6033      	str	r3, [r6, #0]
    bdb8:	f002 fb3c 	bl	e434 <__malloc_unlock>
    bdbc:	e003      	b.n	bdc6 <_malloc_r+0x56>
    bdbe:	2d00      	cmp	r5, #0
    bdc0:	dadf      	bge.n	bd82 <_malloc_r+0x12>
    bdc2:	230c      	movs	r3, #12
    bdc4:	6033      	str	r3, [r6, #0]
    bdc6:	2000      	movs	r0, #0
    bdc8:	bd70      	pop	{r4, r5, r6, pc}
    bdca:	680b      	ldr	r3, [r1, #0]
    bdcc:	1b5b      	subs	r3, r3, r5
    bdce:	d41a      	bmi.n	be06 <_malloc_r+0x96>
    bdd0:	2b0b      	cmp	r3, #11
    bdd2:	d903      	bls.n	bddc <_malloc_r+0x6c>
    bdd4:	600b      	str	r3, [r1, #0]
    bdd6:	18cc      	adds	r4, r1, r3
    bdd8:	6025      	str	r5, [r4, #0]
    bdda:	e003      	b.n	bde4 <_malloc_r+0x74>
    bddc:	428c      	cmp	r4, r1
    bdde:	d10e      	bne.n	bdfe <_malloc_r+0x8e>
    bde0:	6863      	ldr	r3, [r4, #4]
    bde2:	6013      	str	r3, [r2, #0]
    bde4:	0030      	movs	r0, r6
    bde6:	f002 fb25 	bl	e434 <__malloc_unlock>
    bdea:	0020      	movs	r0, r4
    bdec:	2207      	movs	r2, #7
    bdee:	300b      	adds	r0, #11
    bdf0:	1d23      	adds	r3, r4, #4
    bdf2:	4390      	bics	r0, r2
    bdf4:	1ac3      	subs	r3, r0, r3
    bdf6:	d0e7      	beq.n	bdc8 <_malloc_r+0x58>
    bdf8:	425a      	negs	r2, r3
    bdfa:	50e2      	str	r2, [r4, r3]
    bdfc:	e7e4      	b.n	bdc8 <_malloc_r+0x58>
    bdfe:	684b      	ldr	r3, [r1, #4]
    be00:	6063      	str	r3, [r4, #4]
    be02:	000c      	movs	r4, r1
    be04:	e7ee      	b.n	bde4 <_malloc_r+0x74>
    be06:	000c      	movs	r4, r1
    be08:	6849      	ldr	r1, [r1, #4]
    be0a:	e7c2      	b.n	bd92 <_malloc_r+0x22>
    be0c:	2303      	movs	r3, #3
    be0e:	1cc4      	adds	r4, r0, #3
    be10:	439c      	bics	r4, r3
    be12:	42a0      	cmp	r0, r4
    be14:	d0e0      	beq.n	bdd8 <_malloc_r+0x68>
    be16:	1a21      	subs	r1, r4, r0
    be18:	0030      	movs	r0, r6
    be1a:	f000 fdbb 	bl	c994 <_sbrk_r>
    be1e:	1c43      	adds	r3, r0, #1
    be20:	d1da      	bne.n	bdd8 <_malloc_r+0x68>
    be22:	e7c6      	b.n	bdb2 <_malloc_r+0x42>
    be24:	20001e2c 	.word	0x20001e2c
    be28:	20001e30 	.word	0x20001e30

0000be2c <__sfputc_r>:
    be2c:	6893      	ldr	r3, [r2, #8]
    be2e:	b510      	push	{r4, lr}
    be30:	3b01      	subs	r3, #1
    be32:	6093      	str	r3, [r2, #8]
    be34:	2b00      	cmp	r3, #0
    be36:	da05      	bge.n	be44 <__sfputc_r+0x18>
    be38:	6994      	ldr	r4, [r2, #24]
    be3a:	42a3      	cmp	r3, r4
    be3c:	db08      	blt.n	be50 <__sfputc_r+0x24>
    be3e:	b2cb      	uxtb	r3, r1
    be40:	2b0a      	cmp	r3, #10
    be42:	d005      	beq.n	be50 <__sfputc_r+0x24>
    be44:	6813      	ldr	r3, [r2, #0]
    be46:	1c58      	adds	r0, r3, #1
    be48:	6010      	str	r0, [r2, #0]
    be4a:	7019      	strb	r1, [r3, #0]
    be4c:	b2c8      	uxtb	r0, r1
    be4e:	bd10      	pop	{r4, pc}
    be50:	f001 f930 	bl	d0b4 <__swbuf_r>
    be54:	e7fb      	b.n	be4e <__sfputc_r+0x22>

0000be56 <__sfputs_r>:
    be56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be58:	0006      	movs	r6, r0
    be5a:	000f      	movs	r7, r1
    be5c:	0014      	movs	r4, r2
    be5e:	18d5      	adds	r5, r2, r3
    be60:	42ac      	cmp	r4, r5
    be62:	d101      	bne.n	be68 <__sfputs_r+0x12>
    be64:	2000      	movs	r0, #0
    be66:	e007      	b.n	be78 <__sfputs_r+0x22>
    be68:	7821      	ldrb	r1, [r4, #0]
    be6a:	003a      	movs	r2, r7
    be6c:	0030      	movs	r0, r6
    be6e:	f7ff ffdd 	bl	be2c <__sfputc_r>
    be72:	3401      	adds	r4, #1
    be74:	1c43      	adds	r3, r0, #1
    be76:	d1f3      	bne.n	be60 <__sfputs_r+0xa>
    be78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000be7c <_vfiprintf_r>:
    be7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    be7e:	b09f      	sub	sp, #124	; 0x7c
    be80:	0006      	movs	r6, r0
    be82:	000f      	movs	r7, r1
    be84:	0014      	movs	r4, r2
    be86:	9305      	str	r3, [sp, #20]
    be88:	2800      	cmp	r0, #0
    be8a:	d004      	beq.n	be96 <_vfiprintf_r+0x1a>
    be8c:	6983      	ldr	r3, [r0, #24]
    be8e:	2b00      	cmp	r3, #0
    be90:	d101      	bne.n	be96 <_vfiprintf_r+0x1a>
    be92:	f002 f96f 	bl	e174 <__sinit>
    be96:	4b7f      	ldr	r3, [pc, #508]	; (c094 <_vfiprintf_r+0x218>)
    be98:	429f      	cmp	r7, r3
    be9a:	d15c      	bne.n	bf56 <_vfiprintf_r+0xda>
    be9c:	6877      	ldr	r7, [r6, #4]
    be9e:	89bb      	ldrh	r3, [r7, #12]
    bea0:	071b      	lsls	r3, r3, #28
    bea2:	d562      	bpl.n	bf6a <_vfiprintf_r+0xee>
    bea4:	693b      	ldr	r3, [r7, #16]
    bea6:	2b00      	cmp	r3, #0
    bea8:	d05f      	beq.n	bf6a <_vfiprintf_r+0xee>
    beaa:	2300      	movs	r3, #0
    beac:	ad06      	add	r5, sp, #24
    beae:	616b      	str	r3, [r5, #20]
    beb0:	3320      	adds	r3, #32
    beb2:	766b      	strb	r3, [r5, #25]
    beb4:	3310      	adds	r3, #16
    beb6:	76ab      	strb	r3, [r5, #26]
    beb8:	9402      	str	r4, [sp, #8]
    beba:	9c02      	ldr	r4, [sp, #8]
    bebc:	7823      	ldrb	r3, [r4, #0]
    bebe:	2b00      	cmp	r3, #0
    bec0:	d15d      	bne.n	bf7e <_vfiprintf_r+0x102>
    bec2:	9b02      	ldr	r3, [sp, #8]
    bec4:	1ae3      	subs	r3, r4, r3
    bec6:	9304      	str	r3, [sp, #16]
    bec8:	d00d      	beq.n	bee6 <_vfiprintf_r+0x6a>
    beca:	9b04      	ldr	r3, [sp, #16]
    becc:	9a02      	ldr	r2, [sp, #8]
    bece:	0039      	movs	r1, r7
    bed0:	0030      	movs	r0, r6
    bed2:	f7ff ffc0 	bl	be56 <__sfputs_r>
    bed6:	1c43      	adds	r3, r0, #1
    bed8:	d100      	bne.n	bedc <_vfiprintf_r+0x60>
    beda:	e0cc      	b.n	c076 <_vfiprintf_r+0x1fa>
    bedc:	696a      	ldr	r2, [r5, #20]
    bede:	9b04      	ldr	r3, [sp, #16]
    bee0:	4694      	mov	ip, r2
    bee2:	4463      	add	r3, ip
    bee4:	616b      	str	r3, [r5, #20]
    bee6:	7823      	ldrb	r3, [r4, #0]
    bee8:	2b00      	cmp	r3, #0
    beea:	d100      	bne.n	beee <_vfiprintf_r+0x72>
    beec:	e0c3      	b.n	c076 <_vfiprintf_r+0x1fa>
    beee:	2201      	movs	r2, #1
    bef0:	2300      	movs	r3, #0
    bef2:	4252      	negs	r2, r2
    bef4:	606a      	str	r2, [r5, #4]
    bef6:	a902      	add	r1, sp, #8
    bef8:	3254      	adds	r2, #84	; 0x54
    befa:	1852      	adds	r2, r2, r1
    befc:	3401      	adds	r4, #1
    befe:	602b      	str	r3, [r5, #0]
    bf00:	60eb      	str	r3, [r5, #12]
    bf02:	60ab      	str	r3, [r5, #8]
    bf04:	7013      	strb	r3, [r2, #0]
    bf06:	65ab      	str	r3, [r5, #88]	; 0x58
    bf08:	7821      	ldrb	r1, [r4, #0]
    bf0a:	2205      	movs	r2, #5
    bf0c:	4862      	ldr	r0, [pc, #392]	; (c098 <_vfiprintf_r+0x21c>)
    bf0e:	f002 fa85 	bl	e41c <memchr>
    bf12:	1c63      	adds	r3, r4, #1
    bf14:	469c      	mov	ip, r3
    bf16:	2800      	cmp	r0, #0
    bf18:	d135      	bne.n	bf86 <_vfiprintf_r+0x10a>
    bf1a:	6829      	ldr	r1, [r5, #0]
    bf1c:	06cb      	lsls	r3, r1, #27
    bf1e:	d504      	bpl.n	bf2a <_vfiprintf_r+0xae>
    bf20:	2353      	movs	r3, #83	; 0x53
    bf22:	aa02      	add	r2, sp, #8
    bf24:	3020      	adds	r0, #32
    bf26:	189b      	adds	r3, r3, r2
    bf28:	7018      	strb	r0, [r3, #0]
    bf2a:	070b      	lsls	r3, r1, #28
    bf2c:	d504      	bpl.n	bf38 <_vfiprintf_r+0xbc>
    bf2e:	2353      	movs	r3, #83	; 0x53
    bf30:	202b      	movs	r0, #43	; 0x2b
    bf32:	aa02      	add	r2, sp, #8
    bf34:	189b      	adds	r3, r3, r2
    bf36:	7018      	strb	r0, [r3, #0]
    bf38:	7823      	ldrb	r3, [r4, #0]
    bf3a:	2b2a      	cmp	r3, #42	; 0x2a
    bf3c:	d02c      	beq.n	bf98 <_vfiprintf_r+0x11c>
    bf3e:	2000      	movs	r0, #0
    bf40:	210a      	movs	r1, #10
    bf42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf44:	7822      	ldrb	r2, [r4, #0]
    bf46:	3a30      	subs	r2, #48	; 0x30
    bf48:	2a09      	cmp	r2, #9
    bf4a:	d800      	bhi.n	bf4e <_vfiprintf_r+0xd2>
    bf4c:	e06b      	b.n	c026 <_vfiprintf_r+0x1aa>
    bf4e:	2800      	cmp	r0, #0
    bf50:	d02a      	beq.n	bfa8 <_vfiprintf_r+0x12c>
    bf52:	9309      	str	r3, [sp, #36]	; 0x24
    bf54:	e028      	b.n	bfa8 <_vfiprintf_r+0x12c>
    bf56:	4b51      	ldr	r3, [pc, #324]	; (c09c <_vfiprintf_r+0x220>)
    bf58:	429f      	cmp	r7, r3
    bf5a:	d101      	bne.n	bf60 <_vfiprintf_r+0xe4>
    bf5c:	68b7      	ldr	r7, [r6, #8]
    bf5e:	e79e      	b.n	be9e <_vfiprintf_r+0x22>
    bf60:	4b4f      	ldr	r3, [pc, #316]	; (c0a0 <_vfiprintf_r+0x224>)
    bf62:	429f      	cmp	r7, r3
    bf64:	d19b      	bne.n	be9e <_vfiprintf_r+0x22>
    bf66:	68f7      	ldr	r7, [r6, #12]
    bf68:	e799      	b.n	be9e <_vfiprintf_r+0x22>
    bf6a:	0039      	movs	r1, r7
    bf6c:	0030      	movs	r0, r6
    bf6e:	f001 f903 	bl	d178 <__swsetup_r>
    bf72:	2800      	cmp	r0, #0
    bf74:	d099      	beq.n	beaa <_vfiprintf_r+0x2e>
    bf76:	2001      	movs	r0, #1
    bf78:	4240      	negs	r0, r0
    bf7a:	b01f      	add	sp, #124	; 0x7c
    bf7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf7e:	2b25      	cmp	r3, #37	; 0x25
    bf80:	d09f      	beq.n	bec2 <_vfiprintf_r+0x46>
    bf82:	3401      	adds	r4, #1
    bf84:	e79a      	b.n	bebc <_vfiprintf_r+0x40>
    bf86:	4b44      	ldr	r3, [pc, #272]	; (c098 <_vfiprintf_r+0x21c>)
    bf88:	6829      	ldr	r1, [r5, #0]
    bf8a:	1ac0      	subs	r0, r0, r3
    bf8c:	2301      	movs	r3, #1
    bf8e:	4083      	lsls	r3, r0
    bf90:	430b      	orrs	r3, r1
    bf92:	602b      	str	r3, [r5, #0]
    bf94:	4664      	mov	r4, ip
    bf96:	e7b7      	b.n	bf08 <_vfiprintf_r+0x8c>
    bf98:	9b05      	ldr	r3, [sp, #20]
    bf9a:	1d18      	adds	r0, r3, #4
    bf9c:	681b      	ldr	r3, [r3, #0]
    bf9e:	9005      	str	r0, [sp, #20]
    bfa0:	2b00      	cmp	r3, #0
    bfa2:	db3a      	blt.n	c01a <_vfiprintf_r+0x19e>
    bfa4:	9309      	str	r3, [sp, #36]	; 0x24
    bfa6:	4664      	mov	r4, ip
    bfa8:	7823      	ldrb	r3, [r4, #0]
    bfaa:	2b2e      	cmp	r3, #46	; 0x2e
    bfac:	d10b      	bne.n	bfc6 <_vfiprintf_r+0x14a>
    bfae:	7863      	ldrb	r3, [r4, #1]
    bfb0:	1c62      	adds	r2, r4, #1
    bfb2:	2b2a      	cmp	r3, #42	; 0x2a
    bfb4:	d13f      	bne.n	c036 <_vfiprintf_r+0x1ba>
    bfb6:	9b05      	ldr	r3, [sp, #20]
    bfb8:	3402      	adds	r4, #2
    bfba:	1d1a      	adds	r2, r3, #4
    bfbc:	681b      	ldr	r3, [r3, #0]
    bfbe:	9205      	str	r2, [sp, #20]
    bfc0:	2b00      	cmp	r3, #0
    bfc2:	db35      	blt.n	c030 <_vfiprintf_r+0x1b4>
    bfc4:	9307      	str	r3, [sp, #28]
    bfc6:	7821      	ldrb	r1, [r4, #0]
    bfc8:	2203      	movs	r2, #3
    bfca:	4836      	ldr	r0, [pc, #216]	; (c0a4 <_vfiprintf_r+0x228>)
    bfcc:	f002 fa26 	bl	e41c <memchr>
    bfd0:	2800      	cmp	r0, #0
    bfd2:	d007      	beq.n	bfe4 <_vfiprintf_r+0x168>
    bfd4:	4b33      	ldr	r3, [pc, #204]	; (c0a4 <_vfiprintf_r+0x228>)
    bfd6:	682a      	ldr	r2, [r5, #0]
    bfd8:	1ac0      	subs	r0, r0, r3
    bfda:	2340      	movs	r3, #64	; 0x40
    bfdc:	4083      	lsls	r3, r0
    bfde:	4313      	orrs	r3, r2
    bfe0:	602b      	str	r3, [r5, #0]
    bfe2:	3401      	adds	r4, #1
    bfe4:	7821      	ldrb	r1, [r4, #0]
    bfe6:	1c63      	adds	r3, r4, #1
    bfe8:	2206      	movs	r2, #6
    bfea:	482f      	ldr	r0, [pc, #188]	; (c0a8 <_vfiprintf_r+0x22c>)
    bfec:	9302      	str	r3, [sp, #8]
    bfee:	7629      	strb	r1, [r5, #24]
    bff0:	f002 fa14 	bl	e41c <memchr>
    bff4:	2800      	cmp	r0, #0
    bff6:	d044      	beq.n	c082 <_vfiprintf_r+0x206>
    bff8:	4b2c      	ldr	r3, [pc, #176]	; (c0ac <_vfiprintf_r+0x230>)
    bffa:	2b00      	cmp	r3, #0
    bffc:	d12f      	bne.n	c05e <_vfiprintf_r+0x1e2>
    bffe:	6829      	ldr	r1, [r5, #0]
    c000:	9b05      	ldr	r3, [sp, #20]
    c002:	2207      	movs	r2, #7
    c004:	05c9      	lsls	r1, r1, #23
    c006:	d528      	bpl.n	c05a <_vfiprintf_r+0x1de>
    c008:	189b      	adds	r3, r3, r2
    c00a:	4393      	bics	r3, r2
    c00c:	3308      	adds	r3, #8
    c00e:	9305      	str	r3, [sp, #20]
    c010:	696b      	ldr	r3, [r5, #20]
    c012:	9a03      	ldr	r2, [sp, #12]
    c014:	189b      	adds	r3, r3, r2
    c016:	616b      	str	r3, [r5, #20]
    c018:	e74f      	b.n	beba <_vfiprintf_r+0x3e>
    c01a:	425b      	negs	r3, r3
    c01c:	60eb      	str	r3, [r5, #12]
    c01e:	2302      	movs	r3, #2
    c020:	430b      	orrs	r3, r1
    c022:	602b      	str	r3, [r5, #0]
    c024:	e7bf      	b.n	bfa6 <_vfiprintf_r+0x12a>
    c026:	434b      	muls	r3, r1
    c028:	3401      	adds	r4, #1
    c02a:	189b      	adds	r3, r3, r2
    c02c:	2001      	movs	r0, #1
    c02e:	e789      	b.n	bf44 <_vfiprintf_r+0xc8>
    c030:	2301      	movs	r3, #1
    c032:	425b      	negs	r3, r3
    c034:	e7c6      	b.n	bfc4 <_vfiprintf_r+0x148>
    c036:	2300      	movs	r3, #0
    c038:	0014      	movs	r4, r2
    c03a:	200a      	movs	r0, #10
    c03c:	001a      	movs	r2, r3
    c03e:	606b      	str	r3, [r5, #4]
    c040:	7821      	ldrb	r1, [r4, #0]
    c042:	3930      	subs	r1, #48	; 0x30
    c044:	2909      	cmp	r1, #9
    c046:	d903      	bls.n	c050 <_vfiprintf_r+0x1d4>
    c048:	2b00      	cmp	r3, #0
    c04a:	d0bc      	beq.n	bfc6 <_vfiprintf_r+0x14a>
    c04c:	9207      	str	r2, [sp, #28]
    c04e:	e7ba      	b.n	bfc6 <_vfiprintf_r+0x14a>
    c050:	4342      	muls	r2, r0
    c052:	3401      	adds	r4, #1
    c054:	1852      	adds	r2, r2, r1
    c056:	2301      	movs	r3, #1
    c058:	e7f2      	b.n	c040 <_vfiprintf_r+0x1c4>
    c05a:	3307      	adds	r3, #7
    c05c:	e7d5      	b.n	c00a <_vfiprintf_r+0x18e>
    c05e:	ab05      	add	r3, sp, #20
    c060:	9300      	str	r3, [sp, #0]
    c062:	003a      	movs	r2, r7
    c064:	4b12      	ldr	r3, [pc, #72]	; (c0b0 <_vfiprintf_r+0x234>)
    c066:	0029      	movs	r1, r5
    c068:	0030      	movs	r0, r6
    c06a:	f000 f8bf 	bl	c1ec <_printf_float>
    c06e:	9003      	str	r0, [sp, #12]
    c070:	9b03      	ldr	r3, [sp, #12]
    c072:	3301      	adds	r3, #1
    c074:	d1cc      	bne.n	c010 <_vfiprintf_r+0x194>
    c076:	89bb      	ldrh	r3, [r7, #12]
    c078:	065b      	lsls	r3, r3, #25
    c07a:	d500      	bpl.n	c07e <_vfiprintf_r+0x202>
    c07c:	e77b      	b.n	bf76 <_vfiprintf_r+0xfa>
    c07e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c080:	e77b      	b.n	bf7a <_vfiprintf_r+0xfe>
    c082:	ab05      	add	r3, sp, #20
    c084:	9300      	str	r3, [sp, #0]
    c086:	003a      	movs	r2, r7
    c088:	4b09      	ldr	r3, [pc, #36]	; (c0b0 <_vfiprintf_r+0x234>)
    c08a:	0029      	movs	r1, r5
    c08c:	0030      	movs	r0, r6
    c08e:	f000 fb67 	bl	c760 <_printf_i>
    c092:	e7ec      	b.n	c06e <_vfiprintf_r+0x1f2>
    c094:	000111c8 	.word	0x000111c8
    c098:	00011018 	.word	0x00011018
    c09c:	000111e8 	.word	0x000111e8
    c0a0:	000111a8 	.word	0x000111a8
    c0a4:	0001101e 	.word	0x0001101e
    c0a8:	00011022 	.word	0x00011022
    c0ac:	0000c1ed 	.word	0x0000c1ed
    c0b0:	0000be57 	.word	0x0000be57

0000c0b4 <__cvt>:
    c0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0b6:	b08b      	sub	sp, #44	; 0x2c
    c0b8:	0014      	movs	r4, r2
    c0ba:	1e1d      	subs	r5, r3, #0
    c0bc:	9912      	ldr	r1, [sp, #72]	; 0x48
    c0be:	da53      	bge.n	c168 <__cvt+0xb4>
    c0c0:	2480      	movs	r4, #128	; 0x80
    c0c2:	0624      	lsls	r4, r4, #24
    c0c4:	191b      	adds	r3, r3, r4
    c0c6:	001d      	movs	r5, r3
    c0c8:	0014      	movs	r4, r2
    c0ca:	232d      	movs	r3, #45	; 0x2d
    c0cc:	700b      	strb	r3, [r1, #0]
    c0ce:	2320      	movs	r3, #32
    c0d0:	9e14      	ldr	r6, [sp, #80]	; 0x50
    c0d2:	2203      	movs	r2, #3
    c0d4:	439e      	bics	r6, r3
    c0d6:	2e46      	cmp	r6, #70	; 0x46
    c0d8:	d007      	beq.n	c0ea <__cvt+0x36>
    c0da:	0033      	movs	r3, r6
    c0dc:	3b45      	subs	r3, #69	; 0x45
    c0de:	4259      	negs	r1, r3
    c0e0:	414b      	adcs	r3, r1
    c0e2:	9910      	ldr	r1, [sp, #64]	; 0x40
    c0e4:	3a01      	subs	r2, #1
    c0e6:	18cb      	adds	r3, r1, r3
    c0e8:	9310      	str	r3, [sp, #64]	; 0x40
    c0ea:	ab09      	add	r3, sp, #36	; 0x24
    c0ec:	9304      	str	r3, [sp, #16]
    c0ee:	ab08      	add	r3, sp, #32
    c0f0:	9303      	str	r3, [sp, #12]
    c0f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c0f4:	9200      	str	r2, [sp, #0]
    c0f6:	9302      	str	r3, [sp, #8]
    c0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c0fa:	0022      	movs	r2, r4
    c0fc:	9301      	str	r3, [sp, #4]
    c0fe:	002b      	movs	r3, r5
    c100:	f001 f958 	bl	d3b4 <_dtoa_r>
    c104:	0007      	movs	r7, r0
    c106:	2e47      	cmp	r6, #71	; 0x47
    c108:	d102      	bne.n	c110 <__cvt+0x5c>
    c10a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c10c:	07db      	lsls	r3, r3, #31
    c10e:	d524      	bpl.n	c15a <__cvt+0xa6>
    c110:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c112:	18fb      	adds	r3, r7, r3
    c114:	9307      	str	r3, [sp, #28]
    c116:	2e46      	cmp	r6, #70	; 0x46
    c118:	d114      	bne.n	c144 <__cvt+0x90>
    c11a:	783b      	ldrb	r3, [r7, #0]
    c11c:	2b30      	cmp	r3, #48	; 0x30
    c11e:	d10c      	bne.n	c13a <__cvt+0x86>
    c120:	2200      	movs	r2, #0
    c122:	2300      	movs	r3, #0
    c124:	0020      	movs	r0, r4
    c126:	0029      	movs	r1, r5
    c128:	f7fc fb96 	bl	8858 <__aeabi_dcmpeq>
    c12c:	2800      	cmp	r0, #0
    c12e:	d104      	bne.n	c13a <__cvt+0x86>
    c130:	2301      	movs	r3, #1
    c132:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c134:	1a9b      	subs	r3, r3, r2
    c136:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c138:	6013      	str	r3, [r2, #0]
    c13a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c13c:	9a07      	ldr	r2, [sp, #28]
    c13e:	681b      	ldr	r3, [r3, #0]
    c140:	18d3      	adds	r3, r2, r3
    c142:	9307      	str	r3, [sp, #28]
    c144:	2200      	movs	r2, #0
    c146:	2300      	movs	r3, #0
    c148:	0020      	movs	r0, r4
    c14a:	0029      	movs	r1, r5
    c14c:	f7fc fb84 	bl	8858 <__aeabi_dcmpeq>
    c150:	2230      	movs	r2, #48	; 0x30
    c152:	2800      	cmp	r0, #0
    c154:	d00d      	beq.n	c172 <__cvt+0xbe>
    c156:	9b07      	ldr	r3, [sp, #28]
    c158:	9309      	str	r3, [sp, #36]	; 0x24
    c15a:	0038      	movs	r0, r7
    c15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c15e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    c160:	1bdb      	subs	r3, r3, r7
    c162:	6013      	str	r3, [r2, #0]
    c164:	b00b      	add	sp, #44	; 0x2c
    c166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c168:	2300      	movs	r3, #0
    c16a:	e7af      	b.n	c0cc <__cvt+0x18>
    c16c:	1c59      	adds	r1, r3, #1
    c16e:	9109      	str	r1, [sp, #36]	; 0x24
    c170:	701a      	strb	r2, [r3, #0]
    c172:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c174:	9907      	ldr	r1, [sp, #28]
    c176:	4299      	cmp	r1, r3
    c178:	d8f8      	bhi.n	c16c <__cvt+0xb8>
    c17a:	e7ee      	b.n	c15a <__cvt+0xa6>

0000c17c <__exponent>:
    c17c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c17e:	232b      	movs	r3, #43	; 0x2b
    c180:	b085      	sub	sp, #20
    c182:	0007      	movs	r7, r0
    c184:	000c      	movs	r4, r1
    c186:	7002      	strb	r2, [r0, #0]
    c188:	1c86      	adds	r6, r0, #2
    c18a:	2900      	cmp	r1, #0
    c18c:	da01      	bge.n	c192 <__exponent+0x16>
    c18e:	232d      	movs	r3, #45	; 0x2d
    c190:	424c      	negs	r4, r1
    c192:	707b      	strb	r3, [r7, #1]
    c194:	2c09      	cmp	r4, #9
    c196:	dd23      	ble.n	c1e0 <__exponent+0x64>
    c198:	ab02      	add	r3, sp, #8
    c19a:	1ddd      	adds	r5, r3, #7
    c19c:	1e6b      	subs	r3, r5, #1
    c19e:	0020      	movs	r0, r4
    c1a0:	210a      	movs	r1, #10
    c1a2:	9301      	str	r3, [sp, #4]
    c1a4:	f7fc fb42 	bl	882c <__aeabi_idivmod>
    c1a8:	1e6b      	subs	r3, r5, #1
    c1aa:	3130      	adds	r1, #48	; 0x30
    c1ac:	7019      	strb	r1, [r3, #0]
    c1ae:	0020      	movs	r0, r4
    c1b0:	210a      	movs	r1, #10
    c1b2:	f7fc fa55 	bl	8660 <__divsi3>
    c1b6:	0004      	movs	r4, r0
    c1b8:	2809      	cmp	r0, #9
    c1ba:	dc0a      	bgt.n	c1d2 <__exponent+0x56>
    c1bc:	3d02      	subs	r5, #2
    c1be:	3430      	adds	r4, #48	; 0x30
    c1c0:	702c      	strb	r4, [r5, #0]
    c1c2:	ab02      	add	r3, sp, #8
    c1c4:	3307      	adds	r3, #7
    c1c6:	0030      	movs	r0, r6
    c1c8:	42ab      	cmp	r3, r5
    c1ca:	d804      	bhi.n	c1d6 <__exponent+0x5a>
    c1cc:	1bc0      	subs	r0, r0, r7
    c1ce:	b005      	add	sp, #20
    c1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1d2:	9d01      	ldr	r5, [sp, #4]
    c1d4:	e7e2      	b.n	c19c <__exponent+0x20>
    c1d6:	782b      	ldrb	r3, [r5, #0]
    c1d8:	3501      	adds	r5, #1
    c1da:	7033      	strb	r3, [r6, #0]
    c1dc:	3601      	adds	r6, #1
    c1de:	e7f0      	b.n	c1c2 <__exponent+0x46>
    c1e0:	2330      	movs	r3, #48	; 0x30
    c1e2:	18e4      	adds	r4, r4, r3
    c1e4:	7033      	strb	r3, [r6, #0]
    c1e6:	1cb0      	adds	r0, r6, #2
    c1e8:	7074      	strb	r4, [r6, #1]
    c1ea:	e7ef      	b.n	c1cc <__exponent+0x50>

0000c1ec <_printf_float>:
    c1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1ee:	b095      	sub	sp, #84	; 0x54
    c1f0:	000c      	movs	r4, r1
    c1f2:	920a      	str	r2, [sp, #40]	; 0x28
    c1f4:	930b      	str	r3, [sp, #44]	; 0x2c
    c1f6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    c1f8:	9009      	str	r0, [sp, #36]	; 0x24
    c1fa:	f002 f897 	bl	e32c <_localeconv_r>
    c1fe:	6803      	ldr	r3, [r0, #0]
    c200:	0018      	movs	r0, r3
    c202:	930d      	str	r3, [sp, #52]	; 0x34
    c204:	f000 fc19 	bl	ca3a <strlen>
    c208:	2300      	movs	r3, #0
    c20a:	9312      	str	r3, [sp, #72]	; 0x48
    c20c:	6823      	ldr	r3, [r4, #0]
    c20e:	900e      	str	r0, [sp, #56]	; 0x38
    c210:	930c      	str	r3, [sp, #48]	; 0x30
    c212:	990c      	ldr	r1, [sp, #48]	; 0x30
    c214:	7e27      	ldrb	r7, [r4, #24]
    c216:	682b      	ldr	r3, [r5, #0]
    c218:	2207      	movs	r2, #7
    c21a:	05c9      	lsls	r1, r1, #23
    c21c:	d547      	bpl.n	c2ae <_printf_float+0xc2>
    c21e:	189b      	adds	r3, r3, r2
    c220:	4393      	bics	r3, r2
    c222:	001a      	movs	r2, r3
    c224:	3208      	adds	r2, #8
    c226:	602a      	str	r2, [r5, #0]
    c228:	681a      	ldr	r2, [r3, #0]
    c22a:	685b      	ldr	r3, [r3, #4]
    c22c:	64a2      	str	r2, [r4, #72]	; 0x48
    c22e:	64e3      	str	r3, [r4, #76]	; 0x4c
    c230:	2201      	movs	r2, #1
    c232:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    c234:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    c236:	006b      	lsls	r3, r5, #1
    c238:	085b      	lsrs	r3, r3, #1
    c23a:	930f      	str	r3, [sp, #60]	; 0x3c
    c23c:	4252      	negs	r2, r2
    c23e:	4ba7      	ldr	r3, [pc, #668]	; (c4dc <_printf_float+0x2f0>)
    c240:	0030      	movs	r0, r6
    c242:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c244:	f7fe ff8c 	bl	b160 <__aeabi_dcmpun>
    c248:	2800      	cmp	r0, #0
    c24a:	d000      	beq.n	c24e <_printf_float+0x62>
    c24c:	e206      	b.n	c65c <_printf_float+0x470>
    c24e:	2201      	movs	r2, #1
    c250:	4ba2      	ldr	r3, [pc, #648]	; (c4dc <_printf_float+0x2f0>)
    c252:	4252      	negs	r2, r2
    c254:	0030      	movs	r0, r6
    c256:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c258:	f7fc fb0e 	bl	8878 <__aeabi_dcmple>
    c25c:	2800      	cmp	r0, #0
    c25e:	d000      	beq.n	c262 <_printf_float+0x76>
    c260:	e1fc      	b.n	c65c <_printf_float+0x470>
    c262:	2200      	movs	r2, #0
    c264:	2300      	movs	r3, #0
    c266:	0030      	movs	r0, r6
    c268:	0029      	movs	r1, r5
    c26a:	f7fc fafb 	bl	8864 <__aeabi_dcmplt>
    c26e:	2800      	cmp	r0, #0
    c270:	d003      	beq.n	c27a <_printf_float+0x8e>
    c272:	0023      	movs	r3, r4
    c274:	222d      	movs	r2, #45	; 0x2d
    c276:	3343      	adds	r3, #67	; 0x43
    c278:	701a      	strb	r2, [r3, #0]
    c27a:	4d99      	ldr	r5, [pc, #612]	; (c4e0 <_printf_float+0x2f4>)
    c27c:	2f47      	cmp	r7, #71	; 0x47
    c27e:	d800      	bhi.n	c282 <_printf_float+0x96>
    c280:	4d98      	ldr	r5, [pc, #608]	; (c4e4 <_printf_float+0x2f8>)
    c282:	2303      	movs	r3, #3
    c284:	2600      	movs	r6, #0
    c286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c288:	6123      	str	r3, [r4, #16]
    c28a:	3301      	adds	r3, #1
    c28c:	439a      	bics	r2, r3
    c28e:	6022      	str	r2, [r4, #0]
    c290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c292:	aa13      	add	r2, sp, #76	; 0x4c
    c294:	9300      	str	r3, [sp, #0]
    c296:	0021      	movs	r1, r4
    c298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c29a:	9809      	ldr	r0, [sp, #36]	; 0x24
    c29c:	f000 f9f2 	bl	c684 <_printf_common>
    c2a0:	1c43      	adds	r3, r0, #1
    c2a2:	d000      	beq.n	c2a6 <_printf_float+0xba>
    c2a4:	e09c      	b.n	c3e0 <_printf_float+0x1f4>
    c2a6:	2001      	movs	r0, #1
    c2a8:	4240      	negs	r0, r0
    c2aa:	b015      	add	sp, #84	; 0x54
    c2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2ae:	3307      	adds	r3, #7
    c2b0:	e7b6      	b.n	c220 <_printf_float+0x34>
    c2b2:	2380      	movs	r3, #128	; 0x80
    c2b4:	6862      	ldr	r2, [r4, #4]
    c2b6:	00db      	lsls	r3, r3, #3
    c2b8:	1c51      	adds	r1, r2, #1
    c2ba:	d145      	bne.n	c348 <_printf_float+0x15c>
    c2bc:	3207      	adds	r2, #7
    c2be:	6062      	str	r2, [r4, #4]
    c2c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c2c2:	2100      	movs	r1, #0
    c2c4:	4313      	orrs	r3, r2
    c2c6:	aa12      	add	r2, sp, #72	; 0x48
    c2c8:	9205      	str	r2, [sp, #20]
    c2ca:	aa11      	add	r2, sp, #68	; 0x44
    c2cc:	9203      	str	r2, [sp, #12]
    c2ce:	2223      	movs	r2, #35	; 0x23
    c2d0:	6023      	str	r3, [r4, #0]
    c2d2:	9106      	str	r1, [sp, #24]
    c2d4:	9301      	str	r3, [sp, #4]
    c2d6:	a908      	add	r1, sp, #32
    c2d8:	6863      	ldr	r3, [r4, #4]
    c2da:	1852      	adds	r2, r2, r1
    c2dc:	9202      	str	r2, [sp, #8]
    c2de:	9300      	str	r3, [sp, #0]
    c2e0:	0032      	movs	r2, r6
    c2e2:	002b      	movs	r3, r5
    c2e4:	9704      	str	r7, [sp, #16]
    c2e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    c2e8:	f7ff fee4 	bl	c0b4 <__cvt>
    c2ec:	2320      	movs	r3, #32
    c2ee:	003a      	movs	r2, r7
    c2f0:	0005      	movs	r5, r0
    c2f2:	439a      	bics	r2, r3
    c2f4:	2a47      	cmp	r2, #71	; 0x47
    c2f6:	d107      	bne.n	c308 <_printf_float+0x11c>
    c2f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c2fa:	1cda      	adds	r2, r3, #3
    c2fc:	db02      	blt.n	c304 <_printf_float+0x118>
    c2fe:	6862      	ldr	r2, [r4, #4]
    c300:	4293      	cmp	r3, r2
    c302:	dd5b      	ble.n	c3bc <_printf_float+0x1d0>
    c304:	3f02      	subs	r7, #2
    c306:	b2ff      	uxtb	r7, r7
    c308:	9911      	ldr	r1, [sp, #68]	; 0x44
    c30a:	2f65      	cmp	r7, #101	; 0x65
    c30c:	d83b      	bhi.n	c386 <_printf_float+0x19a>
    c30e:	0020      	movs	r0, r4
    c310:	3901      	subs	r1, #1
    c312:	003a      	movs	r2, r7
    c314:	3050      	adds	r0, #80	; 0x50
    c316:	9111      	str	r1, [sp, #68]	; 0x44
    c318:	f7ff ff30 	bl	c17c <__exponent>
    c31c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c31e:	0006      	movs	r6, r0
    c320:	1883      	adds	r3, r0, r2
    c322:	6123      	str	r3, [r4, #16]
    c324:	2a01      	cmp	r2, #1
    c326:	dc02      	bgt.n	c32e <_printf_float+0x142>
    c328:	6822      	ldr	r2, [r4, #0]
    c32a:	07d2      	lsls	r2, r2, #31
    c32c:	d501      	bpl.n	c332 <_printf_float+0x146>
    c32e:	3301      	adds	r3, #1
    c330:	6123      	str	r3, [r4, #16]
    c332:	2323      	movs	r3, #35	; 0x23
    c334:	aa08      	add	r2, sp, #32
    c336:	189b      	adds	r3, r3, r2
    c338:	781b      	ldrb	r3, [r3, #0]
    c33a:	2b00      	cmp	r3, #0
    c33c:	d0a8      	beq.n	c290 <_printf_float+0xa4>
    c33e:	0023      	movs	r3, r4
    c340:	222d      	movs	r2, #45	; 0x2d
    c342:	3343      	adds	r3, #67	; 0x43
    c344:	701a      	strb	r2, [r3, #0]
    c346:	e7a3      	b.n	c290 <_printf_float+0xa4>
    c348:	2f67      	cmp	r7, #103	; 0x67
    c34a:	d001      	beq.n	c350 <_printf_float+0x164>
    c34c:	2f47      	cmp	r7, #71	; 0x47
    c34e:	d1b7      	bne.n	c2c0 <_printf_float+0xd4>
    c350:	2a00      	cmp	r2, #0
    c352:	d016      	beq.n	c382 <_printf_float+0x196>
    c354:	990c      	ldr	r1, [sp, #48]	; 0x30
    c356:	a808      	add	r0, sp, #32
    c358:	430b      	orrs	r3, r1
    c35a:	2100      	movs	r1, #0
    c35c:	9106      	str	r1, [sp, #24]
    c35e:	a912      	add	r1, sp, #72	; 0x48
    c360:	9105      	str	r1, [sp, #20]
    c362:	a911      	add	r1, sp, #68	; 0x44
    c364:	9103      	str	r1, [sp, #12]
    c366:	2123      	movs	r1, #35	; 0x23
    c368:	1809      	adds	r1, r1, r0
    c36a:	6023      	str	r3, [r4, #0]
    c36c:	9301      	str	r3, [sp, #4]
    c36e:	9200      	str	r2, [sp, #0]
    c370:	002b      	movs	r3, r5
    c372:	9704      	str	r7, [sp, #16]
    c374:	9102      	str	r1, [sp, #8]
    c376:	0032      	movs	r2, r6
    c378:	9809      	ldr	r0, [sp, #36]	; 0x24
    c37a:	f7ff fe9b 	bl	c0b4 <__cvt>
    c37e:	0005      	movs	r5, r0
    c380:	e7ba      	b.n	c2f8 <_printf_float+0x10c>
    c382:	2201      	movs	r2, #1
    c384:	e79b      	b.n	c2be <_printf_float+0xd2>
    c386:	2f66      	cmp	r7, #102	; 0x66
    c388:	d119      	bne.n	c3be <_printf_float+0x1d2>
    c38a:	6863      	ldr	r3, [r4, #4]
    c38c:	2900      	cmp	r1, #0
    c38e:	dd0c      	ble.n	c3aa <_printf_float+0x1be>
    c390:	6121      	str	r1, [r4, #16]
    c392:	2b00      	cmp	r3, #0
    c394:	d102      	bne.n	c39c <_printf_float+0x1b0>
    c396:	6822      	ldr	r2, [r4, #0]
    c398:	07d2      	lsls	r2, r2, #31
    c39a:	d502      	bpl.n	c3a2 <_printf_float+0x1b6>
    c39c:	3301      	adds	r3, #1
    c39e:	185b      	adds	r3, r3, r1
    c3a0:	6123      	str	r3, [r4, #16]
    c3a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c3a4:	2600      	movs	r6, #0
    c3a6:	65a3      	str	r3, [r4, #88]	; 0x58
    c3a8:	e7c3      	b.n	c332 <_printf_float+0x146>
    c3aa:	2b00      	cmp	r3, #0
    c3ac:	d103      	bne.n	c3b6 <_printf_float+0x1ca>
    c3ae:	2201      	movs	r2, #1
    c3b0:	6821      	ldr	r1, [r4, #0]
    c3b2:	4211      	tst	r1, r2
    c3b4:	d000      	beq.n	c3b8 <_printf_float+0x1cc>
    c3b6:	1c9a      	adds	r2, r3, #2
    c3b8:	6122      	str	r2, [r4, #16]
    c3ba:	e7f2      	b.n	c3a2 <_printf_float+0x1b6>
    c3bc:	2767      	movs	r7, #103	; 0x67
    c3be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c3c0:	9812      	ldr	r0, [sp, #72]	; 0x48
    c3c2:	4283      	cmp	r3, r0
    c3c4:	db05      	blt.n	c3d2 <_printf_float+0x1e6>
    c3c6:	6822      	ldr	r2, [r4, #0]
    c3c8:	6123      	str	r3, [r4, #16]
    c3ca:	07d2      	lsls	r2, r2, #31
    c3cc:	d5e9      	bpl.n	c3a2 <_printf_float+0x1b6>
    c3ce:	3301      	adds	r3, #1
    c3d0:	e7e6      	b.n	c3a0 <_printf_float+0x1b4>
    c3d2:	2201      	movs	r2, #1
    c3d4:	2b00      	cmp	r3, #0
    c3d6:	dc01      	bgt.n	c3dc <_printf_float+0x1f0>
    c3d8:	1892      	adds	r2, r2, r2
    c3da:	1ad2      	subs	r2, r2, r3
    c3dc:	1812      	adds	r2, r2, r0
    c3de:	e7eb      	b.n	c3b8 <_printf_float+0x1cc>
    c3e0:	6822      	ldr	r2, [r4, #0]
    c3e2:	0553      	lsls	r3, r2, #21
    c3e4:	d408      	bmi.n	c3f8 <_printf_float+0x20c>
    c3e6:	6923      	ldr	r3, [r4, #16]
    c3e8:	002a      	movs	r2, r5
    c3ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    c3ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    c3ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c3f0:	47a8      	blx	r5
    c3f2:	1c43      	adds	r3, r0, #1
    c3f4:	d129      	bne.n	c44a <_printf_float+0x25e>
    c3f6:	e756      	b.n	c2a6 <_printf_float+0xba>
    c3f8:	2f65      	cmp	r7, #101	; 0x65
    c3fa:	d800      	bhi.n	c3fe <_printf_float+0x212>
    c3fc:	e0dc      	b.n	c5b8 <_printf_float+0x3cc>
    c3fe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    c400:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    c402:	2200      	movs	r2, #0
    c404:	2300      	movs	r3, #0
    c406:	f7fc fa27 	bl	8858 <__aeabi_dcmpeq>
    c40a:	2800      	cmp	r0, #0
    c40c:	d035      	beq.n	c47a <_printf_float+0x28e>
    c40e:	2301      	movs	r3, #1
    c410:	4a35      	ldr	r2, [pc, #212]	; (c4e8 <_printf_float+0x2fc>)
    c412:	990a      	ldr	r1, [sp, #40]	; 0x28
    c414:	9809      	ldr	r0, [sp, #36]	; 0x24
    c416:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c418:	47a8      	blx	r5
    c41a:	1c43      	adds	r3, r0, #1
    c41c:	d100      	bne.n	c420 <_printf_float+0x234>
    c41e:	e742      	b.n	c2a6 <_printf_float+0xba>
    c420:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c422:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c424:	4293      	cmp	r3, r2
    c426:	db02      	blt.n	c42e <_printf_float+0x242>
    c428:	6823      	ldr	r3, [r4, #0]
    c42a:	07db      	lsls	r3, r3, #31
    c42c:	d50d      	bpl.n	c44a <_printf_float+0x25e>
    c42e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c432:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c434:	990a      	ldr	r1, [sp, #40]	; 0x28
    c436:	9809      	ldr	r0, [sp, #36]	; 0x24
    c438:	47a8      	blx	r5
    c43a:	2500      	movs	r5, #0
    c43c:	1c43      	adds	r3, r0, #1
    c43e:	d100      	bne.n	c442 <_printf_float+0x256>
    c440:	e731      	b.n	c2a6 <_printf_float+0xba>
    c442:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c444:	3b01      	subs	r3, #1
    c446:	429d      	cmp	r5, r3
    c448:	db0b      	blt.n	c462 <_printf_float+0x276>
    c44a:	6823      	ldr	r3, [r4, #0]
    c44c:	2500      	movs	r5, #0
    c44e:	079b      	lsls	r3, r3, #30
    c450:	d500      	bpl.n	c454 <_printf_float+0x268>
    c452:	e0fd      	b.n	c650 <_printf_float+0x464>
    c454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c456:	68e0      	ldr	r0, [r4, #12]
    c458:	4298      	cmp	r0, r3
    c45a:	db00      	blt.n	c45e <_printf_float+0x272>
    c45c:	e725      	b.n	c2aa <_printf_float+0xbe>
    c45e:	0018      	movs	r0, r3
    c460:	e723      	b.n	c2aa <_printf_float+0xbe>
    c462:	0022      	movs	r2, r4
    c464:	2301      	movs	r3, #1
    c466:	321a      	adds	r2, #26
    c468:	990a      	ldr	r1, [sp, #40]	; 0x28
    c46a:	9809      	ldr	r0, [sp, #36]	; 0x24
    c46c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c46e:	47b0      	blx	r6
    c470:	1c43      	adds	r3, r0, #1
    c472:	d100      	bne.n	c476 <_printf_float+0x28a>
    c474:	e717      	b.n	c2a6 <_printf_float+0xba>
    c476:	3501      	adds	r5, #1
    c478:	e7e3      	b.n	c442 <_printf_float+0x256>
    c47a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c47c:	2b00      	cmp	r3, #0
    c47e:	dc35      	bgt.n	c4ec <_printf_float+0x300>
    c480:	2301      	movs	r3, #1
    c482:	4a19      	ldr	r2, [pc, #100]	; (c4e8 <_printf_float+0x2fc>)
    c484:	990a      	ldr	r1, [sp, #40]	; 0x28
    c486:	9809      	ldr	r0, [sp, #36]	; 0x24
    c488:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c48a:	47b0      	blx	r6
    c48c:	1c43      	adds	r3, r0, #1
    c48e:	d100      	bne.n	c492 <_printf_float+0x2a6>
    c490:	e709      	b.n	c2a6 <_printf_float+0xba>
    c492:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c494:	2b00      	cmp	r3, #0
    c496:	d105      	bne.n	c4a4 <_printf_float+0x2b8>
    c498:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c49a:	2b00      	cmp	r3, #0
    c49c:	d102      	bne.n	c4a4 <_printf_float+0x2b8>
    c49e:	6823      	ldr	r3, [r4, #0]
    c4a0:	07db      	lsls	r3, r3, #31
    c4a2:	d5d2      	bpl.n	c44a <_printf_float+0x25e>
    c4a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c4a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c4aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    c4ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    c4ae:	47b0      	blx	r6
    c4b0:	2600      	movs	r6, #0
    c4b2:	1c43      	adds	r3, r0, #1
    c4b4:	d100      	bne.n	c4b8 <_printf_float+0x2cc>
    c4b6:	e6f6      	b.n	c2a6 <_printf_float+0xba>
    c4b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c4ba:	425b      	negs	r3, r3
    c4bc:	429e      	cmp	r6, r3
    c4be:	db01      	blt.n	c4c4 <_printf_float+0x2d8>
    c4c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c4c2:	e791      	b.n	c3e8 <_printf_float+0x1fc>
    c4c4:	0022      	movs	r2, r4
    c4c6:	2301      	movs	r3, #1
    c4c8:	321a      	adds	r2, #26
    c4ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    c4cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    c4ce:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c4d0:	47b8      	blx	r7
    c4d2:	1c43      	adds	r3, r0, #1
    c4d4:	d100      	bne.n	c4d8 <_printf_float+0x2ec>
    c4d6:	e6e6      	b.n	c2a6 <_printf_float+0xba>
    c4d8:	3601      	adds	r6, #1
    c4da:	e7ed      	b.n	c4b8 <_printf_float+0x2cc>
    c4dc:	7fefffff 	.word	0x7fefffff
    c4e0:	0001102d 	.word	0x0001102d
    c4e4:	00011029 	.word	0x00011029
    c4e8:	0000fb88 	.word	0x0000fb88
    c4ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
    c4ee:	9e12      	ldr	r6, [sp, #72]	; 0x48
    c4f0:	429e      	cmp	r6, r3
    c4f2:	dd00      	ble.n	c4f6 <_printf_float+0x30a>
    c4f4:	001e      	movs	r6, r3
    c4f6:	2e00      	cmp	r6, #0
    c4f8:	dc35      	bgt.n	c566 <_printf_float+0x37a>
    c4fa:	2300      	movs	r3, #0
    c4fc:	930c      	str	r3, [sp, #48]	; 0x30
    c4fe:	43f3      	mvns	r3, r6
    c500:	17db      	asrs	r3, r3, #31
    c502:	930f      	str	r3, [sp, #60]	; 0x3c
    c504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c506:	6da7      	ldr	r7, [r4, #88]	; 0x58
    c508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c50a:	4033      	ands	r3, r6
    c50c:	1afb      	subs	r3, r7, r3
    c50e:	429a      	cmp	r2, r3
    c510:	db32      	blt.n	c578 <_printf_float+0x38c>
    c512:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c514:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c516:	4293      	cmp	r3, r2
    c518:	db3c      	blt.n	c594 <_printf_float+0x3a8>
    c51a:	6823      	ldr	r3, [r4, #0]
    c51c:	07db      	lsls	r3, r3, #31
    c51e:	d439      	bmi.n	c594 <_printf_float+0x3a8>
    c520:	9e12      	ldr	r6, [sp, #72]	; 0x48
    c522:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c524:	1bf3      	subs	r3, r6, r7
    c526:	1ab6      	subs	r6, r6, r2
    c528:	429e      	cmp	r6, r3
    c52a:	dd00      	ble.n	c52e <_printf_float+0x342>
    c52c:	001e      	movs	r6, r3
    c52e:	2e00      	cmp	r6, #0
    c530:	dc39      	bgt.n	c5a6 <_printf_float+0x3ba>
    c532:	43f7      	mvns	r7, r6
    c534:	2500      	movs	r5, #0
    c536:	17fb      	asrs	r3, r7, #31
    c538:	930c      	str	r3, [sp, #48]	; 0x30
    c53a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c53c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c53e:	990c      	ldr	r1, [sp, #48]	; 0x30
    c540:	1a9b      	subs	r3, r3, r2
    c542:	0032      	movs	r2, r6
    c544:	400a      	ands	r2, r1
    c546:	1a9b      	subs	r3, r3, r2
    c548:	429d      	cmp	r5, r3
    c54a:	db00      	blt.n	c54e <_printf_float+0x362>
    c54c:	e77d      	b.n	c44a <_printf_float+0x25e>
    c54e:	0022      	movs	r2, r4
    c550:	2301      	movs	r3, #1
    c552:	321a      	adds	r2, #26
    c554:	990a      	ldr	r1, [sp, #40]	; 0x28
    c556:	9809      	ldr	r0, [sp, #36]	; 0x24
    c558:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c55a:	47b8      	blx	r7
    c55c:	1c43      	adds	r3, r0, #1
    c55e:	d100      	bne.n	c562 <_printf_float+0x376>
    c560:	e6a1      	b.n	c2a6 <_printf_float+0xba>
    c562:	3501      	adds	r5, #1
    c564:	e7e9      	b.n	c53a <_printf_float+0x34e>
    c566:	0033      	movs	r3, r6
    c568:	002a      	movs	r2, r5
    c56a:	990a      	ldr	r1, [sp, #40]	; 0x28
    c56c:	9809      	ldr	r0, [sp, #36]	; 0x24
    c56e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c570:	47b8      	blx	r7
    c572:	1c43      	adds	r3, r0, #1
    c574:	d1c1      	bne.n	c4fa <_printf_float+0x30e>
    c576:	e696      	b.n	c2a6 <_printf_float+0xba>
    c578:	0022      	movs	r2, r4
    c57a:	2301      	movs	r3, #1
    c57c:	321a      	adds	r2, #26
    c57e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c580:	9809      	ldr	r0, [sp, #36]	; 0x24
    c582:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c584:	47b8      	blx	r7
    c586:	1c43      	adds	r3, r0, #1
    c588:	d100      	bne.n	c58c <_printf_float+0x3a0>
    c58a:	e68c      	b.n	c2a6 <_printf_float+0xba>
    c58c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c58e:	3301      	adds	r3, #1
    c590:	930c      	str	r3, [sp, #48]	; 0x30
    c592:	e7b7      	b.n	c504 <_printf_float+0x318>
    c594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c598:	990a      	ldr	r1, [sp, #40]	; 0x28
    c59a:	9809      	ldr	r0, [sp, #36]	; 0x24
    c59c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c59e:	47b0      	blx	r6
    c5a0:	1c43      	adds	r3, r0, #1
    c5a2:	d1bd      	bne.n	c520 <_printf_float+0x334>
    c5a4:	e67f      	b.n	c2a6 <_printf_float+0xba>
    c5a6:	19ea      	adds	r2, r5, r7
    c5a8:	0033      	movs	r3, r6
    c5aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    c5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    c5ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c5b0:	47a8      	blx	r5
    c5b2:	1c43      	adds	r3, r0, #1
    c5b4:	d1bd      	bne.n	c532 <_printf_float+0x346>
    c5b6:	e676      	b.n	c2a6 <_printf_float+0xba>
    c5b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c5ba:	2b01      	cmp	r3, #1
    c5bc:	dc02      	bgt.n	c5c4 <_printf_float+0x3d8>
    c5be:	2301      	movs	r3, #1
    c5c0:	421a      	tst	r2, r3
    c5c2:	d038      	beq.n	c636 <_printf_float+0x44a>
    c5c4:	2301      	movs	r3, #1
    c5c6:	002a      	movs	r2, r5
    c5c8:	990a      	ldr	r1, [sp, #40]	; 0x28
    c5ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    c5cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c5ce:	47b8      	blx	r7
    c5d0:	1c43      	adds	r3, r0, #1
    c5d2:	d100      	bne.n	c5d6 <_printf_float+0x3ea>
    c5d4:	e667      	b.n	c2a6 <_printf_float+0xba>
    c5d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c5d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c5da:	990a      	ldr	r1, [sp, #40]	; 0x28
    c5dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    c5de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c5e0:	47b8      	blx	r7
    c5e2:	1c43      	adds	r3, r0, #1
    c5e4:	d100      	bne.n	c5e8 <_printf_float+0x3fc>
    c5e6:	e65e      	b.n	c2a6 <_printf_float+0xba>
    c5e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    c5ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    c5ec:	2200      	movs	r2, #0
    c5ee:	2300      	movs	r3, #0
    c5f0:	f7fc f932 	bl	8858 <__aeabi_dcmpeq>
    c5f4:	2800      	cmp	r0, #0
    c5f6:	d008      	beq.n	c60a <_printf_float+0x41e>
    c5f8:	2500      	movs	r5, #0
    c5fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c5fc:	3b01      	subs	r3, #1
    c5fe:	429d      	cmp	r5, r3
    c600:	db0d      	blt.n	c61e <_printf_float+0x432>
    c602:	0022      	movs	r2, r4
    c604:	0033      	movs	r3, r6
    c606:	3250      	adds	r2, #80	; 0x50
    c608:	e6ef      	b.n	c3ea <_printf_float+0x1fe>
    c60a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c60c:	1c6a      	adds	r2, r5, #1
    c60e:	3b01      	subs	r3, #1
    c610:	990a      	ldr	r1, [sp, #40]	; 0x28
    c612:	9809      	ldr	r0, [sp, #36]	; 0x24
    c614:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c616:	47a8      	blx	r5
    c618:	1c43      	adds	r3, r0, #1
    c61a:	d1f2      	bne.n	c602 <_printf_float+0x416>
    c61c:	e643      	b.n	c2a6 <_printf_float+0xba>
    c61e:	0022      	movs	r2, r4
    c620:	2301      	movs	r3, #1
    c622:	321a      	adds	r2, #26
    c624:	990a      	ldr	r1, [sp, #40]	; 0x28
    c626:	9809      	ldr	r0, [sp, #36]	; 0x24
    c628:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c62a:	47b8      	blx	r7
    c62c:	1c43      	adds	r3, r0, #1
    c62e:	d100      	bne.n	c632 <_printf_float+0x446>
    c630:	e639      	b.n	c2a6 <_printf_float+0xba>
    c632:	3501      	adds	r5, #1
    c634:	e7e1      	b.n	c5fa <_printf_float+0x40e>
    c636:	002a      	movs	r2, r5
    c638:	e7ea      	b.n	c610 <_printf_float+0x424>
    c63a:	0022      	movs	r2, r4
    c63c:	2301      	movs	r3, #1
    c63e:	3219      	adds	r2, #25
    c640:	990a      	ldr	r1, [sp, #40]	; 0x28
    c642:	9809      	ldr	r0, [sp, #36]	; 0x24
    c644:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c646:	47b0      	blx	r6
    c648:	1c43      	adds	r3, r0, #1
    c64a:	d100      	bne.n	c64e <_printf_float+0x462>
    c64c:	e62b      	b.n	c2a6 <_printf_float+0xba>
    c64e:	3501      	adds	r5, #1
    c650:	68e3      	ldr	r3, [r4, #12]
    c652:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c654:	1a9b      	subs	r3, r3, r2
    c656:	429d      	cmp	r5, r3
    c658:	dbef      	blt.n	c63a <_printf_float+0x44e>
    c65a:	e6fb      	b.n	c454 <_printf_float+0x268>
    c65c:	0032      	movs	r2, r6
    c65e:	002b      	movs	r3, r5
    c660:	0030      	movs	r0, r6
    c662:	0029      	movs	r1, r5
    c664:	f7fe fd7c 	bl	b160 <__aeabi_dcmpun>
    c668:	2800      	cmp	r0, #0
    c66a:	d100      	bne.n	c66e <_printf_float+0x482>
    c66c:	e621      	b.n	c2b2 <_printf_float+0xc6>
    c66e:	4d03      	ldr	r5, [pc, #12]	; (c67c <_printf_float+0x490>)
    c670:	2f47      	cmp	r7, #71	; 0x47
    c672:	d900      	bls.n	c676 <_printf_float+0x48a>
    c674:	e605      	b.n	c282 <_printf_float+0x96>
    c676:	4d02      	ldr	r5, [pc, #8]	; (c680 <_printf_float+0x494>)
    c678:	e603      	b.n	c282 <_printf_float+0x96>
    c67a:	46c0      	nop			; (mov r8, r8)
    c67c:	00011035 	.word	0x00011035
    c680:	00011031 	.word	0x00011031

0000c684 <_printf_common>:
    c684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c686:	0015      	movs	r5, r2
    c688:	9301      	str	r3, [sp, #4]
    c68a:	688a      	ldr	r2, [r1, #8]
    c68c:	690b      	ldr	r3, [r1, #16]
    c68e:	9000      	str	r0, [sp, #0]
    c690:	000c      	movs	r4, r1
    c692:	4293      	cmp	r3, r2
    c694:	da00      	bge.n	c698 <_printf_common+0x14>
    c696:	0013      	movs	r3, r2
    c698:	0022      	movs	r2, r4
    c69a:	602b      	str	r3, [r5, #0]
    c69c:	3243      	adds	r2, #67	; 0x43
    c69e:	7812      	ldrb	r2, [r2, #0]
    c6a0:	2a00      	cmp	r2, #0
    c6a2:	d001      	beq.n	c6a8 <_printf_common+0x24>
    c6a4:	3301      	adds	r3, #1
    c6a6:	602b      	str	r3, [r5, #0]
    c6a8:	6823      	ldr	r3, [r4, #0]
    c6aa:	069b      	lsls	r3, r3, #26
    c6ac:	d502      	bpl.n	c6b4 <_printf_common+0x30>
    c6ae:	682b      	ldr	r3, [r5, #0]
    c6b0:	3302      	adds	r3, #2
    c6b2:	602b      	str	r3, [r5, #0]
    c6b4:	2706      	movs	r7, #6
    c6b6:	6823      	ldr	r3, [r4, #0]
    c6b8:	401f      	ands	r7, r3
    c6ba:	d027      	beq.n	c70c <_printf_common+0x88>
    c6bc:	0023      	movs	r3, r4
    c6be:	3343      	adds	r3, #67	; 0x43
    c6c0:	781b      	ldrb	r3, [r3, #0]
    c6c2:	1e5a      	subs	r2, r3, #1
    c6c4:	4193      	sbcs	r3, r2
    c6c6:	6822      	ldr	r2, [r4, #0]
    c6c8:	0692      	lsls	r2, r2, #26
    c6ca:	d430      	bmi.n	c72e <_printf_common+0xaa>
    c6cc:	0022      	movs	r2, r4
    c6ce:	9901      	ldr	r1, [sp, #4]
    c6d0:	3243      	adds	r2, #67	; 0x43
    c6d2:	9800      	ldr	r0, [sp, #0]
    c6d4:	9e08      	ldr	r6, [sp, #32]
    c6d6:	47b0      	blx	r6
    c6d8:	1c43      	adds	r3, r0, #1
    c6da:	d025      	beq.n	c728 <_printf_common+0xa4>
    c6dc:	2306      	movs	r3, #6
    c6de:	6820      	ldr	r0, [r4, #0]
    c6e0:	682a      	ldr	r2, [r5, #0]
    c6e2:	68e1      	ldr	r1, [r4, #12]
    c6e4:	4003      	ands	r3, r0
    c6e6:	2500      	movs	r5, #0
    c6e8:	2b04      	cmp	r3, #4
    c6ea:	d103      	bne.n	c6f4 <_printf_common+0x70>
    c6ec:	1a8d      	subs	r5, r1, r2
    c6ee:	43eb      	mvns	r3, r5
    c6f0:	17db      	asrs	r3, r3, #31
    c6f2:	401d      	ands	r5, r3
    c6f4:	68a3      	ldr	r3, [r4, #8]
    c6f6:	6922      	ldr	r2, [r4, #16]
    c6f8:	4293      	cmp	r3, r2
    c6fa:	dd01      	ble.n	c700 <_printf_common+0x7c>
    c6fc:	1a9b      	subs	r3, r3, r2
    c6fe:	18ed      	adds	r5, r5, r3
    c700:	2700      	movs	r7, #0
    c702:	42bd      	cmp	r5, r7
    c704:	d120      	bne.n	c748 <_printf_common+0xc4>
    c706:	2000      	movs	r0, #0
    c708:	e010      	b.n	c72c <_printf_common+0xa8>
    c70a:	3701      	adds	r7, #1
    c70c:	68e3      	ldr	r3, [r4, #12]
    c70e:	682a      	ldr	r2, [r5, #0]
    c710:	1a9b      	subs	r3, r3, r2
    c712:	429f      	cmp	r7, r3
    c714:	dad2      	bge.n	c6bc <_printf_common+0x38>
    c716:	0022      	movs	r2, r4
    c718:	2301      	movs	r3, #1
    c71a:	3219      	adds	r2, #25
    c71c:	9901      	ldr	r1, [sp, #4]
    c71e:	9800      	ldr	r0, [sp, #0]
    c720:	9e08      	ldr	r6, [sp, #32]
    c722:	47b0      	blx	r6
    c724:	1c43      	adds	r3, r0, #1
    c726:	d1f0      	bne.n	c70a <_printf_common+0x86>
    c728:	2001      	movs	r0, #1
    c72a:	4240      	negs	r0, r0
    c72c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c72e:	2030      	movs	r0, #48	; 0x30
    c730:	18e1      	adds	r1, r4, r3
    c732:	3143      	adds	r1, #67	; 0x43
    c734:	7008      	strb	r0, [r1, #0]
    c736:	0021      	movs	r1, r4
    c738:	1c5a      	adds	r2, r3, #1
    c73a:	3145      	adds	r1, #69	; 0x45
    c73c:	7809      	ldrb	r1, [r1, #0]
    c73e:	18a2      	adds	r2, r4, r2
    c740:	3243      	adds	r2, #67	; 0x43
    c742:	3302      	adds	r3, #2
    c744:	7011      	strb	r1, [r2, #0]
    c746:	e7c1      	b.n	c6cc <_printf_common+0x48>
    c748:	0022      	movs	r2, r4
    c74a:	2301      	movs	r3, #1
    c74c:	321a      	adds	r2, #26
    c74e:	9901      	ldr	r1, [sp, #4]
    c750:	9800      	ldr	r0, [sp, #0]
    c752:	9e08      	ldr	r6, [sp, #32]
    c754:	47b0      	blx	r6
    c756:	1c43      	adds	r3, r0, #1
    c758:	d0e6      	beq.n	c728 <_printf_common+0xa4>
    c75a:	3701      	adds	r7, #1
    c75c:	e7d1      	b.n	c702 <_printf_common+0x7e>
	...

0000c760 <_printf_i>:
    c760:	b5f0      	push	{r4, r5, r6, r7, lr}
    c762:	b08b      	sub	sp, #44	; 0x2c
    c764:	9206      	str	r2, [sp, #24]
    c766:	000a      	movs	r2, r1
    c768:	3243      	adds	r2, #67	; 0x43
    c76a:	9307      	str	r3, [sp, #28]
    c76c:	9005      	str	r0, [sp, #20]
    c76e:	9204      	str	r2, [sp, #16]
    c770:	7e0a      	ldrb	r2, [r1, #24]
    c772:	000c      	movs	r4, r1
    c774:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c776:	2a6e      	cmp	r2, #110	; 0x6e
    c778:	d100      	bne.n	c77c <_printf_i+0x1c>
    c77a:	e08f      	b.n	c89c <_printf_i+0x13c>
    c77c:	d817      	bhi.n	c7ae <_printf_i+0x4e>
    c77e:	2a63      	cmp	r2, #99	; 0x63
    c780:	d02c      	beq.n	c7dc <_printf_i+0x7c>
    c782:	d808      	bhi.n	c796 <_printf_i+0x36>
    c784:	2a00      	cmp	r2, #0
    c786:	d100      	bne.n	c78a <_printf_i+0x2a>
    c788:	e099      	b.n	c8be <_printf_i+0x15e>
    c78a:	2a58      	cmp	r2, #88	; 0x58
    c78c:	d054      	beq.n	c838 <_printf_i+0xd8>
    c78e:	0026      	movs	r6, r4
    c790:	3642      	adds	r6, #66	; 0x42
    c792:	7032      	strb	r2, [r6, #0]
    c794:	e029      	b.n	c7ea <_printf_i+0x8a>
    c796:	2a64      	cmp	r2, #100	; 0x64
    c798:	d001      	beq.n	c79e <_printf_i+0x3e>
    c79a:	2a69      	cmp	r2, #105	; 0x69
    c79c:	d1f7      	bne.n	c78e <_printf_i+0x2e>
    c79e:	6821      	ldr	r1, [r4, #0]
    c7a0:	681a      	ldr	r2, [r3, #0]
    c7a2:	0608      	lsls	r0, r1, #24
    c7a4:	d523      	bpl.n	c7ee <_printf_i+0x8e>
    c7a6:	1d11      	adds	r1, r2, #4
    c7a8:	6019      	str	r1, [r3, #0]
    c7aa:	6815      	ldr	r5, [r2, #0]
    c7ac:	e025      	b.n	c7fa <_printf_i+0x9a>
    c7ae:	2a73      	cmp	r2, #115	; 0x73
    c7b0:	d100      	bne.n	c7b4 <_printf_i+0x54>
    c7b2:	e088      	b.n	c8c6 <_printf_i+0x166>
    c7b4:	d808      	bhi.n	c7c8 <_printf_i+0x68>
    c7b6:	2a6f      	cmp	r2, #111	; 0x6f
    c7b8:	d029      	beq.n	c80e <_printf_i+0xae>
    c7ba:	2a70      	cmp	r2, #112	; 0x70
    c7bc:	d1e7      	bne.n	c78e <_printf_i+0x2e>
    c7be:	2220      	movs	r2, #32
    c7c0:	6809      	ldr	r1, [r1, #0]
    c7c2:	430a      	orrs	r2, r1
    c7c4:	6022      	str	r2, [r4, #0]
    c7c6:	e003      	b.n	c7d0 <_printf_i+0x70>
    c7c8:	2a75      	cmp	r2, #117	; 0x75
    c7ca:	d020      	beq.n	c80e <_printf_i+0xae>
    c7cc:	2a78      	cmp	r2, #120	; 0x78
    c7ce:	d1de      	bne.n	c78e <_printf_i+0x2e>
    c7d0:	0022      	movs	r2, r4
    c7d2:	2178      	movs	r1, #120	; 0x78
    c7d4:	3245      	adds	r2, #69	; 0x45
    c7d6:	7011      	strb	r1, [r2, #0]
    c7d8:	4a6c      	ldr	r2, [pc, #432]	; (c98c <_printf_i+0x22c>)
    c7da:	e030      	b.n	c83e <_printf_i+0xde>
    c7dc:	000e      	movs	r6, r1
    c7de:	681a      	ldr	r2, [r3, #0]
    c7e0:	3642      	adds	r6, #66	; 0x42
    c7e2:	1d11      	adds	r1, r2, #4
    c7e4:	6019      	str	r1, [r3, #0]
    c7e6:	6813      	ldr	r3, [r2, #0]
    c7e8:	7033      	strb	r3, [r6, #0]
    c7ea:	2301      	movs	r3, #1
    c7ec:	e079      	b.n	c8e2 <_printf_i+0x182>
    c7ee:	0649      	lsls	r1, r1, #25
    c7f0:	d5d9      	bpl.n	c7a6 <_printf_i+0x46>
    c7f2:	1d11      	adds	r1, r2, #4
    c7f4:	6019      	str	r1, [r3, #0]
    c7f6:	2300      	movs	r3, #0
    c7f8:	5ed5      	ldrsh	r5, [r2, r3]
    c7fa:	2d00      	cmp	r5, #0
    c7fc:	da03      	bge.n	c806 <_printf_i+0xa6>
    c7fe:	232d      	movs	r3, #45	; 0x2d
    c800:	9a04      	ldr	r2, [sp, #16]
    c802:	426d      	negs	r5, r5
    c804:	7013      	strb	r3, [r2, #0]
    c806:	4b62      	ldr	r3, [pc, #392]	; (c990 <_printf_i+0x230>)
    c808:	270a      	movs	r7, #10
    c80a:	9303      	str	r3, [sp, #12]
    c80c:	e02f      	b.n	c86e <_printf_i+0x10e>
    c80e:	6820      	ldr	r0, [r4, #0]
    c810:	6819      	ldr	r1, [r3, #0]
    c812:	0605      	lsls	r5, r0, #24
    c814:	d503      	bpl.n	c81e <_printf_i+0xbe>
    c816:	1d08      	adds	r0, r1, #4
    c818:	6018      	str	r0, [r3, #0]
    c81a:	680d      	ldr	r5, [r1, #0]
    c81c:	e005      	b.n	c82a <_printf_i+0xca>
    c81e:	0640      	lsls	r0, r0, #25
    c820:	d5f9      	bpl.n	c816 <_printf_i+0xb6>
    c822:	680d      	ldr	r5, [r1, #0]
    c824:	1d08      	adds	r0, r1, #4
    c826:	6018      	str	r0, [r3, #0]
    c828:	b2ad      	uxth	r5, r5
    c82a:	4b59      	ldr	r3, [pc, #356]	; (c990 <_printf_i+0x230>)
    c82c:	2708      	movs	r7, #8
    c82e:	9303      	str	r3, [sp, #12]
    c830:	2a6f      	cmp	r2, #111	; 0x6f
    c832:	d018      	beq.n	c866 <_printf_i+0x106>
    c834:	270a      	movs	r7, #10
    c836:	e016      	b.n	c866 <_printf_i+0x106>
    c838:	3145      	adds	r1, #69	; 0x45
    c83a:	700a      	strb	r2, [r1, #0]
    c83c:	4a54      	ldr	r2, [pc, #336]	; (c990 <_printf_i+0x230>)
    c83e:	9203      	str	r2, [sp, #12]
    c840:	681a      	ldr	r2, [r3, #0]
    c842:	6821      	ldr	r1, [r4, #0]
    c844:	1d10      	adds	r0, r2, #4
    c846:	6018      	str	r0, [r3, #0]
    c848:	6815      	ldr	r5, [r2, #0]
    c84a:	0608      	lsls	r0, r1, #24
    c84c:	d522      	bpl.n	c894 <_printf_i+0x134>
    c84e:	07cb      	lsls	r3, r1, #31
    c850:	d502      	bpl.n	c858 <_printf_i+0xf8>
    c852:	2320      	movs	r3, #32
    c854:	4319      	orrs	r1, r3
    c856:	6021      	str	r1, [r4, #0]
    c858:	2710      	movs	r7, #16
    c85a:	2d00      	cmp	r5, #0
    c85c:	d103      	bne.n	c866 <_printf_i+0x106>
    c85e:	2320      	movs	r3, #32
    c860:	6822      	ldr	r2, [r4, #0]
    c862:	439a      	bics	r2, r3
    c864:	6022      	str	r2, [r4, #0]
    c866:	0023      	movs	r3, r4
    c868:	2200      	movs	r2, #0
    c86a:	3343      	adds	r3, #67	; 0x43
    c86c:	701a      	strb	r2, [r3, #0]
    c86e:	6863      	ldr	r3, [r4, #4]
    c870:	60a3      	str	r3, [r4, #8]
    c872:	2b00      	cmp	r3, #0
    c874:	db5c      	blt.n	c930 <_printf_i+0x1d0>
    c876:	2204      	movs	r2, #4
    c878:	6821      	ldr	r1, [r4, #0]
    c87a:	4391      	bics	r1, r2
    c87c:	6021      	str	r1, [r4, #0]
    c87e:	2d00      	cmp	r5, #0
    c880:	d158      	bne.n	c934 <_printf_i+0x1d4>
    c882:	9e04      	ldr	r6, [sp, #16]
    c884:	2b00      	cmp	r3, #0
    c886:	d064      	beq.n	c952 <_printf_i+0x1f2>
    c888:	0026      	movs	r6, r4
    c88a:	9b03      	ldr	r3, [sp, #12]
    c88c:	3642      	adds	r6, #66	; 0x42
    c88e:	781b      	ldrb	r3, [r3, #0]
    c890:	7033      	strb	r3, [r6, #0]
    c892:	e05e      	b.n	c952 <_printf_i+0x1f2>
    c894:	0648      	lsls	r0, r1, #25
    c896:	d5da      	bpl.n	c84e <_printf_i+0xee>
    c898:	b2ad      	uxth	r5, r5
    c89a:	e7d8      	b.n	c84e <_printf_i+0xee>
    c89c:	6809      	ldr	r1, [r1, #0]
    c89e:	681a      	ldr	r2, [r3, #0]
    c8a0:	0608      	lsls	r0, r1, #24
    c8a2:	d505      	bpl.n	c8b0 <_printf_i+0x150>
    c8a4:	1d11      	adds	r1, r2, #4
    c8a6:	6019      	str	r1, [r3, #0]
    c8a8:	6813      	ldr	r3, [r2, #0]
    c8aa:	6962      	ldr	r2, [r4, #20]
    c8ac:	601a      	str	r2, [r3, #0]
    c8ae:	e006      	b.n	c8be <_printf_i+0x15e>
    c8b0:	0649      	lsls	r1, r1, #25
    c8b2:	d5f7      	bpl.n	c8a4 <_printf_i+0x144>
    c8b4:	1d11      	adds	r1, r2, #4
    c8b6:	6019      	str	r1, [r3, #0]
    c8b8:	6813      	ldr	r3, [r2, #0]
    c8ba:	8aa2      	ldrh	r2, [r4, #20]
    c8bc:	801a      	strh	r2, [r3, #0]
    c8be:	2300      	movs	r3, #0
    c8c0:	9e04      	ldr	r6, [sp, #16]
    c8c2:	6123      	str	r3, [r4, #16]
    c8c4:	e054      	b.n	c970 <_printf_i+0x210>
    c8c6:	681a      	ldr	r2, [r3, #0]
    c8c8:	1d11      	adds	r1, r2, #4
    c8ca:	6019      	str	r1, [r3, #0]
    c8cc:	6816      	ldr	r6, [r2, #0]
    c8ce:	2100      	movs	r1, #0
    c8d0:	6862      	ldr	r2, [r4, #4]
    c8d2:	0030      	movs	r0, r6
    c8d4:	f001 fda2 	bl	e41c <memchr>
    c8d8:	2800      	cmp	r0, #0
    c8da:	d001      	beq.n	c8e0 <_printf_i+0x180>
    c8dc:	1b80      	subs	r0, r0, r6
    c8de:	6060      	str	r0, [r4, #4]
    c8e0:	6863      	ldr	r3, [r4, #4]
    c8e2:	6123      	str	r3, [r4, #16]
    c8e4:	2300      	movs	r3, #0
    c8e6:	9a04      	ldr	r2, [sp, #16]
    c8e8:	7013      	strb	r3, [r2, #0]
    c8ea:	e041      	b.n	c970 <_printf_i+0x210>
    c8ec:	6923      	ldr	r3, [r4, #16]
    c8ee:	0032      	movs	r2, r6
    c8f0:	9906      	ldr	r1, [sp, #24]
    c8f2:	9805      	ldr	r0, [sp, #20]
    c8f4:	9d07      	ldr	r5, [sp, #28]
    c8f6:	47a8      	blx	r5
    c8f8:	1c43      	adds	r3, r0, #1
    c8fa:	d043      	beq.n	c984 <_printf_i+0x224>
    c8fc:	6823      	ldr	r3, [r4, #0]
    c8fe:	2500      	movs	r5, #0
    c900:	079b      	lsls	r3, r3, #30
    c902:	d40f      	bmi.n	c924 <_printf_i+0x1c4>
    c904:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c906:	68e0      	ldr	r0, [r4, #12]
    c908:	4298      	cmp	r0, r3
    c90a:	da3d      	bge.n	c988 <_printf_i+0x228>
    c90c:	0018      	movs	r0, r3
    c90e:	e03b      	b.n	c988 <_printf_i+0x228>
    c910:	0022      	movs	r2, r4
    c912:	2301      	movs	r3, #1
    c914:	3219      	adds	r2, #25
    c916:	9906      	ldr	r1, [sp, #24]
    c918:	9805      	ldr	r0, [sp, #20]
    c91a:	9e07      	ldr	r6, [sp, #28]
    c91c:	47b0      	blx	r6
    c91e:	1c43      	adds	r3, r0, #1
    c920:	d030      	beq.n	c984 <_printf_i+0x224>
    c922:	3501      	adds	r5, #1
    c924:	68e3      	ldr	r3, [r4, #12]
    c926:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c928:	1a9b      	subs	r3, r3, r2
    c92a:	429d      	cmp	r5, r3
    c92c:	dbf0      	blt.n	c910 <_printf_i+0x1b0>
    c92e:	e7e9      	b.n	c904 <_printf_i+0x1a4>
    c930:	2d00      	cmp	r5, #0
    c932:	d0a9      	beq.n	c888 <_printf_i+0x128>
    c934:	9e04      	ldr	r6, [sp, #16]
    c936:	0028      	movs	r0, r5
    c938:	0039      	movs	r1, r7
    c93a:	f7fb fe8d 	bl	8658 <__aeabi_uidivmod>
    c93e:	9b03      	ldr	r3, [sp, #12]
    c940:	3e01      	subs	r6, #1
    c942:	5c5b      	ldrb	r3, [r3, r1]
    c944:	0028      	movs	r0, r5
    c946:	7033      	strb	r3, [r6, #0]
    c948:	0039      	movs	r1, r7
    c94a:	f7fb fdff 	bl	854c <__udivsi3>
    c94e:	1e05      	subs	r5, r0, #0
    c950:	d1f1      	bne.n	c936 <_printf_i+0x1d6>
    c952:	2f08      	cmp	r7, #8
    c954:	d109      	bne.n	c96a <_printf_i+0x20a>
    c956:	6823      	ldr	r3, [r4, #0]
    c958:	07db      	lsls	r3, r3, #31
    c95a:	d506      	bpl.n	c96a <_printf_i+0x20a>
    c95c:	6863      	ldr	r3, [r4, #4]
    c95e:	6922      	ldr	r2, [r4, #16]
    c960:	4293      	cmp	r3, r2
    c962:	dc02      	bgt.n	c96a <_printf_i+0x20a>
    c964:	2330      	movs	r3, #48	; 0x30
    c966:	3e01      	subs	r6, #1
    c968:	7033      	strb	r3, [r6, #0]
    c96a:	9b04      	ldr	r3, [sp, #16]
    c96c:	1b9b      	subs	r3, r3, r6
    c96e:	6123      	str	r3, [r4, #16]
    c970:	9b07      	ldr	r3, [sp, #28]
    c972:	aa09      	add	r2, sp, #36	; 0x24
    c974:	9300      	str	r3, [sp, #0]
    c976:	0021      	movs	r1, r4
    c978:	9b06      	ldr	r3, [sp, #24]
    c97a:	9805      	ldr	r0, [sp, #20]
    c97c:	f7ff fe82 	bl	c684 <_printf_common>
    c980:	1c43      	adds	r3, r0, #1
    c982:	d1b3      	bne.n	c8ec <_printf_i+0x18c>
    c984:	2001      	movs	r0, #1
    c986:	4240      	negs	r0, r0
    c988:	b00b      	add	sp, #44	; 0x2c
    c98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c98c:	0001104a 	.word	0x0001104a
    c990:	00011039 	.word	0x00011039

0000c994 <_sbrk_r>:
    c994:	2300      	movs	r3, #0
    c996:	b570      	push	{r4, r5, r6, lr}
    c998:	4c06      	ldr	r4, [pc, #24]	; (c9b4 <_sbrk_r+0x20>)
    c99a:	0005      	movs	r5, r0
    c99c:	0008      	movs	r0, r1
    c99e:	6023      	str	r3, [r4, #0]
    c9a0:	f002 ff9c 	bl	f8dc <_sbrk>
    c9a4:	1c43      	adds	r3, r0, #1
    c9a6:	d103      	bne.n	c9b0 <_sbrk_r+0x1c>
    c9a8:	6823      	ldr	r3, [r4, #0]
    c9aa:	2b00      	cmp	r3, #0
    c9ac:	d000      	beq.n	c9b0 <_sbrk_r+0x1c>
    c9ae:	602b      	str	r3, [r5, #0]
    c9b0:	bd70      	pop	{r4, r5, r6, pc}
    c9b2:	46c0      	nop			; (mov r8, r8)
    c9b4:	20001e60 	.word	0x20001e60

0000c9b8 <siprintf>:
    c9b8:	b40e      	push	{r1, r2, r3}
    c9ba:	b510      	push	{r4, lr}
    c9bc:	b09d      	sub	sp, #116	; 0x74
    c9be:	a902      	add	r1, sp, #8
    c9c0:	9002      	str	r0, [sp, #8]
    c9c2:	6108      	str	r0, [r1, #16]
    c9c4:	480b      	ldr	r0, [pc, #44]	; (c9f4 <siprintf+0x3c>)
    c9c6:	2482      	movs	r4, #130	; 0x82
    c9c8:	6088      	str	r0, [r1, #8]
    c9ca:	6148      	str	r0, [r1, #20]
    c9cc:	2001      	movs	r0, #1
    c9ce:	4240      	negs	r0, r0
    c9d0:	ab1f      	add	r3, sp, #124	; 0x7c
    c9d2:	81c8      	strh	r0, [r1, #14]
    c9d4:	4808      	ldr	r0, [pc, #32]	; (c9f8 <siprintf+0x40>)
    c9d6:	cb04      	ldmia	r3!, {r2}
    c9d8:	00a4      	lsls	r4, r4, #2
    c9da:	6800      	ldr	r0, [r0, #0]
    c9dc:	9301      	str	r3, [sp, #4]
    c9de:	818c      	strh	r4, [r1, #12]
    c9e0:	f002 f8a2 	bl	eb28 <_svfiprintf_r>
    c9e4:	2300      	movs	r3, #0
    c9e6:	9a02      	ldr	r2, [sp, #8]
    c9e8:	7013      	strb	r3, [r2, #0]
    c9ea:	b01d      	add	sp, #116	; 0x74
    c9ec:	bc10      	pop	{r4}
    c9ee:	bc08      	pop	{r3}
    c9f0:	b003      	add	sp, #12
    c9f2:	4718      	bx	r3
    c9f4:	7fffffff 	.word	0x7fffffff
    c9f8:	200000b4 	.word	0x200000b4

0000c9fc <strcat>:
    c9fc:	0002      	movs	r2, r0
    c9fe:	b510      	push	{r4, lr}
    ca00:	7813      	ldrb	r3, [r2, #0]
    ca02:	2b00      	cmp	r3, #0
    ca04:	d105      	bne.n	ca12 <strcat+0x16>
    ca06:	5ccc      	ldrb	r4, [r1, r3]
    ca08:	54d4      	strb	r4, [r2, r3]
    ca0a:	3301      	adds	r3, #1
    ca0c:	2c00      	cmp	r4, #0
    ca0e:	d1fa      	bne.n	ca06 <strcat+0xa>
    ca10:	bd10      	pop	{r4, pc}
    ca12:	3201      	adds	r2, #1
    ca14:	e7f4      	b.n	ca00 <strcat+0x4>

0000ca16 <strcmp>:
    ca16:	7802      	ldrb	r2, [r0, #0]
    ca18:	780b      	ldrb	r3, [r1, #0]
    ca1a:	2a00      	cmp	r2, #0
    ca1c:	d003      	beq.n	ca26 <strcmp+0x10>
    ca1e:	3001      	adds	r0, #1
    ca20:	3101      	adds	r1, #1
    ca22:	429a      	cmp	r2, r3
    ca24:	d0f7      	beq.n	ca16 <strcmp>
    ca26:	1ad0      	subs	r0, r2, r3
    ca28:	4770      	bx	lr

0000ca2a <strcpy>:
    ca2a:	1c03      	adds	r3, r0, #0
    ca2c:	780a      	ldrb	r2, [r1, #0]
    ca2e:	3101      	adds	r1, #1
    ca30:	701a      	strb	r2, [r3, #0]
    ca32:	3301      	adds	r3, #1
    ca34:	2a00      	cmp	r2, #0
    ca36:	d1f9      	bne.n	ca2c <strcpy+0x2>
    ca38:	4770      	bx	lr

0000ca3a <strlen>:
    ca3a:	2300      	movs	r3, #0
    ca3c:	5cc2      	ldrb	r2, [r0, r3]
    ca3e:	3301      	adds	r3, #1
    ca40:	2a00      	cmp	r2, #0
    ca42:	d1fb      	bne.n	ca3c <strlen+0x2>
    ca44:	1e58      	subs	r0, r3, #1
    ca46:	4770      	bx	lr

0000ca48 <strncat>:
    ca48:	0003      	movs	r3, r0
    ca4a:	b510      	push	{r4, lr}
    ca4c:	781c      	ldrb	r4, [r3, #0]
    ca4e:	2c00      	cmp	r4, #0
    ca50:	d107      	bne.n	ca62 <strncat+0x1a>
    ca52:	3a01      	subs	r2, #1
    ca54:	1c54      	adds	r4, r2, #1
    ca56:	d003      	beq.n	ca60 <strncat+0x18>
    ca58:	780c      	ldrb	r4, [r1, #0]
    ca5a:	701c      	strb	r4, [r3, #0]
    ca5c:	2c00      	cmp	r4, #0
    ca5e:	d102      	bne.n	ca66 <strncat+0x1e>
    ca60:	bd10      	pop	{r4, pc}
    ca62:	3301      	adds	r3, #1
    ca64:	e7f2      	b.n	ca4c <strncat+0x4>
    ca66:	2a00      	cmp	r2, #0
    ca68:	d100      	bne.n	ca6c <strncat+0x24>
    ca6a:	705a      	strb	r2, [r3, #1]
    ca6c:	3301      	adds	r3, #1
    ca6e:	3101      	adds	r1, #1
    ca70:	e7ef      	b.n	ca52 <strncat+0xa>

0000ca72 <strncmp>:
    ca72:	2300      	movs	r3, #0
    ca74:	b530      	push	{r4, r5, lr}
    ca76:	429a      	cmp	r2, r3
    ca78:	d00a      	beq.n	ca90 <strncmp+0x1e>
    ca7a:	3a01      	subs	r2, #1
    ca7c:	5cc4      	ldrb	r4, [r0, r3]
    ca7e:	5ccd      	ldrb	r5, [r1, r3]
    ca80:	42ac      	cmp	r4, r5
    ca82:	d104      	bne.n	ca8e <strncmp+0x1c>
    ca84:	429a      	cmp	r2, r3
    ca86:	d002      	beq.n	ca8e <strncmp+0x1c>
    ca88:	3301      	adds	r3, #1
    ca8a:	2c00      	cmp	r4, #0
    ca8c:	d1f6      	bne.n	ca7c <strncmp+0xa>
    ca8e:	1b63      	subs	r3, r4, r5
    ca90:	0018      	movs	r0, r3
    ca92:	bd30      	pop	{r4, r5, pc}

0000ca94 <strncpy>:
    ca94:	b570      	push	{r4, r5, r6, lr}
    ca96:	0004      	movs	r4, r0
    ca98:	2a00      	cmp	r2, #0
    ca9a:	d100      	bne.n	ca9e <strncpy+0xa>
    ca9c:	bd70      	pop	{r4, r5, r6, pc}
    ca9e:	780d      	ldrb	r5, [r1, #0]
    caa0:	1e56      	subs	r6, r2, #1
    caa2:	1c63      	adds	r3, r4, #1
    caa4:	7025      	strb	r5, [r4, #0]
    caa6:	3101      	adds	r1, #1
    caa8:	2d00      	cmp	r5, #0
    caaa:	d105      	bne.n	cab8 <strncpy+0x24>
    caac:	18a4      	adds	r4, r4, r2
    caae:	429c      	cmp	r4, r3
    cab0:	d0f4      	beq.n	ca9c <strncpy+0x8>
    cab2:	701d      	strb	r5, [r3, #0]
    cab4:	3301      	adds	r3, #1
    cab6:	e7fa      	b.n	caae <strncpy+0x1a>
    cab8:	001c      	movs	r4, r3
    caba:	0032      	movs	r2, r6
    cabc:	e7ec      	b.n	ca98 <strncpy+0x4>
	...

0000cac0 <_strtol_l.isra.0>:
    cac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cac2:	001f      	movs	r7, r3
    cac4:	000e      	movs	r6, r1
    cac6:	b087      	sub	sp, #28
    cac8:	9005      	str	r0, [sp, #20]
    caca:	9103      	str	r1, [sp, #12]
    cacc:	9202      	str	r2, [sp, #8]
    cace:	980c      	ldr	r0, [sp, #48]	; 0x30
    cad0:	7834      	ldrb	r4, [r6, #0]
    cad2:	f7fe fe43 	bl	b75c <__locale_ctype_ptr_l>
    cad6:	2208      	movs	r2, #8
    cad8:	1900      	adds	r0, r0, r4
    cada:	7843      	ldrb	r3, [r0, #1]
    cadc:	1c75      	adds	r5, r6, #1
    cade:	4013      	ands	r3, r2
    cae0:	d10c      	bne.n	cafc <_strtol_l.isra.0+0x3c>
    cae2:	2c2d      	cmp	r4, #45	; 0x2d
    cae4:	d10c      	bne.n	cb00 <_strtol_l.isra.0+0x40>
    cae6:	3301      	adds	r3, #1
    cae8:	782c      	ldrb	r4, [r5, #0]
    caea:	9301      	str	r3, [sp, #4]
    caec:	1cb5      	adds	r5, r6, #2
    caee:	2f00      	cmp	r7, #0
    caf0:	d00c      	beq.n	cb0c <_strtol_l.isra.0+0x4c>
    caf2:	2f10      	cmp	r7, #16
    caf4:	d114      	bne.n	cb20 <_strtol_l.isra.0+0x60>
    caf6:	2c30      	cmp	r4, #48	; 0x30
    caf8:	d00a      	beq.n	cb10 <_strtol_l.isra.0+0x50>
    cafa:	e011      	b.n	cb20 <_strtol_l.isra.0+0x60>
    cafc:	002e      	movs	r6, r5
    cafe:	e7e6      	b.n	cace <_strtol_l.isra.0+0xe>
    cb00:	9301      	str	r3, [sp, #4]
    cb02:	2c2b      	cmp	r4, #43	; 0x2b
    cb04:	d1f3      	bne.n	caee <_strtol_l.isra.0+0x2e>
    cb06:	782c      	ldrb	r4, [r5, #0]
    cb08:	1cb5      	adds	r5, r6, #2
    cb0a:	e7f0      	b.n	caee <_strtol_l.isra.0+0x2e>
    cb0c:	2c30      	cmp	r4, #48	; 0x30
    cb0e:	d12f      	bne.n	cb70 <_strtol_l.isra.0+0xb0>
    cb10:	2220      	movs	r2, #32
    cb12:	782b      	ldrb	r3, [r5, #0]
    cb14:	4393      	bics	r3, r2
    cb16:	2b58      	cmp	r3, #88	; 0x58
    cb18:	d151      	bne.n	cbbe <_strtol_l.isra.0+0xfe>
    cb1a:	2710      	movs	r7, #16
    cb1c:	786c      	ldrb	r4, [r5, #1]
    cb1e:	3502      	adds	r5, #2
    cb20:	9b01      	ldr	r3, [sp, #4]
    cb22:	4a29      	ldr	r2, [pc, #164]	; (cbc8 <_strtol_l.isra.0+0x108>)
    cb24:	0039      	movs	r1, r7
    cb26:	189e      	adds	r6, r3, r2
    cb28:	0030      	movs	r0, r6
    cb2a:	f7fb fd95 	bl	8658 <__aeabi_uidivmod>
    cb2e:	0030      	movs	r0, r6
    cb30:	9104      	str	r1, [sp, #16]
    cb32:	0039      	movs	r1, r7
    cb34:	f7fb fd0a 	bl	854c <__udivsi3>
    cb38:	2101      	movs	r1, #1
    cb3a:	2300      	movs	r3, #0
    cb3c:	4249      	negs	r1, r1
    cb3e:	0002      	movs	r2, r0
    cb40:	468c      	mov	ip, r1
    cb42:	0018      	movs	r0, r3
    cb44:	0021      	movs	r1, r4
    cb46:	3930      	subs	r1, #48	; 0x30
    cb48:	2909      	cmp	r1, #9
    cb4a:	d813      	bhi.n	cb74 <_strtol_l.isra.0+0xb4>
    cb4c:	000c      	movs	r4, r1
    cb4e:	42a7      	cmp	r7, r4
    cb50:	dd1c      	ble.n	cb8c <_strtol_l.isra.0+0xcc>
    cb52:	1c59      	adds	r1, r3, #1
    cb54:	d009      	beq.n	cb6a <_strtol_l.isra.0+0xaa>
    cb56:	4663      	mov	r3, ip
    cb58:	4282      	cmp	r2, r0
    cb5a:	d306      	bcc.n	cb6a <_strtol_l.isra.0+0xaa>
    cb5c:	d102      	bne.n	cb64 <_strtol_l.isra.0+0xa4>
    cb5e:	9904      	ldr	r1, [sp, #16]
    cb60:	42a1      	cmp	r1, r4
    cb62:	db02      	blt.n	cb6a <_strtol_l.isra.0+0xaa>
    cb64:	2301      	movs	r3, #1
    cb66:	4378      	muls	r0, r7
    cb68:	1820      	adds	r0, r4, r0
    cb6a:	782c      	ldrb	r4, [r5, #0]
    cb6c:	3501      	adds	r5, #1
    cb6e:	e7e9      	b.n	cb44 <_strtol_l.isra.0+0x84>
    cb70:	270a      	movs	r7, #10
    cb72:	e7d5      	b.n	cb20 <_strtol_l.isra.0+0x60>
    cb74:	0021      	movs	r1, r4
    cb76:	3941      	subs	r1, #65	; 0x41
    cb78:	2919      	cmp	r1, #25
    cb7a:	d801      	bhi.n	cb80 <_strtol_l.isra.0+0xc0>
    cb7c:	3c37      	subs	r4, #55	; 0x37
    cb7e:	e7e6      	b.n	cb4e <_strtol_l.isra.0+0x8e>
    cb80:	0021      	movs	r1, r4
    cb82:	3961      	subs	r1, #97	; 0x61
    cb84:	2919      	cmp	r1, #25
    cb86:	d801      	bhi.n	cb8c <_strtol_l.isra.0+0xcc>
    cb88:	3c57      	subs	r4, #87	; 0x57
    cb8a:	e7e0      	b.n	cb4e <_strtol_l.isra.0+0x8e>
    cb8c:	1c5a      	adds	r2, r3, #1
    cb8e:	d108      	bne.n	cba2 <_strtol_l.isra.0+0xe2>
    cb90:	9a05      	ldr	r2, [sp, #20]
    cb92:	3323      	adds	r3, #35	; 0x23
    cb94:	6013      	str	r3, [r2, #0]
    cb96:	9b02      	ldr	r3, [sp, #8]
    cb98:	0030      	movs	r0, r6
    cb9a:	2b00      	cmp	r3, #0
    cb9c:	d10b      	bne.n	cbb6 <_strtol_l.isra.0+0xf6>
    cb9e:	b007      	add	sp, #28
    cba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cba2:	9a01      	ldr	r2, [sp, #4]
    cba4:	2a00      	cmp	r2, #0
    cba6:	d000      	beq.n	cbaa <_strtol_l.isra.0+0xea>
    cba8:	4240      	negs	r0, r0
    cbaa:	9a02      	ldr	r2, [sp, #8]
    cbac:	2a00      	cmp	r2, #0
    cbae:	d0f6      	beq.n	cb9e <_strtol_l.isra.0+0xde>
    cbb0:	9a03      	ldr	r2, [sp, #12]
    cbb2:	2b00      	cmp	r3, #0
    cbb4:	d000      	beq.n	cbb8 <_strtol_l.isra.0+0xf8>
    cbb6:	1e6a      	subs	r2, r5, #1
    cbb8:	9b02      	ldr	r3, [sp, #8]
    cbba:	601a      	str	r2, [r3, #0]
    cbbc:	e7ef      	b.n	cb9e <_strtol_l.isra.0+0xde>
    cbbe:	2430      	movs	r4, #48	; 0x30
    cbc0:	2f00      	cmp	r7, #0
    cbc2:	d1ad      	bne.n	cb20 <_strtol_l.isra.0+0x60>
    cbc4:	3708      	adds	r7, #8
    cbc6:	e7ab      	b.n	cb20 <_strtol_l.isra.0+0x60>
    cbc8:	7fffffff 	.word	0x7fffffff

0000cbcc <_strtol_r>:
    cbcc:	b513      	push	{r0, r1, r4, lr}
    cbce:	4c05      	ldr	r4, [pc, #20]	; (cbe4 <_strtol_r+0x18>)
    cbd0:	6824      	ldr	r4, [r4, #0]
    cbd2:	6a24      	ldr	r4, [r4, #32]
    cbd4:	2c00      	cmp	r4, #0
    cbd6:	d100      	bne.n	cbda <_strtol_r+0xe>
    cbd8:	4c03      	ldr	r4, [pc, #12]	; (cbe8 <_strtol_r+0x1c>)
    cbda:	9400      	str	r4, [sp, #0]
    cbdc:	f7ff ff70 	bl	cac0 <_strtol_l.isra.0>
    cbe0:	bd16      	pop	{r1, r2, r4, pc}
    cbe2:	46c0      	nop			; (mov r8, r8)
    cbe4:	200000b4 	.word	0x200000b4
    cbe8:	20000118 	.word	0x20000118

0000cbec <sbrk>:
    cbec:	b510      	push	{r4, lr}
    cbee:	4b03      	ldr	r3, [pc, #12]	; (cbfc <sbrk+0x10>)
    cbf0:	0001      	movs	r1, r0
    cbf2:	6818      	ldr	r0, [r3, #0]
    cbf4:	f7ff fece 	bl	c994 <_sbrk_r>
    cbf8:	bd10      	pop	{r4, pc}
    cbfa:	46c0      	nop			; (mov r8, r8)
    cbfc:	200000b4 	.word	0x200000b4

0000cc00 <__tzcalc_limits>:
    cc00:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc02:	b089      	sub	sp, #36	; 0x24
    cc04:	0004      	movs	r4, r0
    cc06:	f001 fb8d 	bl	e324 <__gettzinfo>
    cc0a:	4b4c      	ldr	r3, [pc, #304]	; (cd3c <__tzcalc_limits+0x13c>)
    cc0c:	0007      	movs	r7, r0
    cc0e:	2000      	movs	r0, #0
    cc10:	429c      	cmp	r4, r3
    cc12:	dd58      	ble.n	ccc6 <__tzcalc_limits+0xc6>
    cc14:	256e      	movs	r5, #110	; 0x6e
    cc16:	2164      	movs	r1, #100	; 0x64
    cc18:	4b49      	ldr	r3, [pc, #292]	; (cd40 <__tzcalc_limits+0x140>)
    cc1a:	35ff      	adds	r5, #255	; 0xff
    cc1c:	18e0      	adds	r0, r4, r3
    cc1e:	4345      	muls	r5, r0
    cc20:	4b48      	ldr	r3, [pc, #288]	; (cd44 <__tzcalc_limits+0x144>)
    cc22:	607c      	str	r4, [r7, #4]
    cc24:	18e0      	adds	r0, r4, r3
    cc26:	4b48      	ldr	r3, [pc, #288]	; (cd48 <__tzcalc_limits+0x148>)
    cc28:	1080      	asrs	r0, r0, #2
    cc2a:	182d      	adds	r5, r5, r0
    cc2c:	4249      	negs	r1, r1
    cc2e:	18e0      	adds	r0, r4, r3
    cc30:	f7fb fd16 	bl	8660 <__divsi3>
    cc34:	21c8      	movs	r1, #200	; 0xc8
    cc36:	4b45      	ldr	r3, [pc, #276]	; (cd4c <__tzcalc_limits+0x14c>)
    cc38:	182d      	adds	r5, r5, r0
    cc3a:	0049      	lsls	r1, r1, #1
    cc3c:	18e0      	adds	r0, r4, r3
    cc3e:	f7fb fd0f 	bl	8660 <__divsi3>
    cc42:	2164      	movs	r1, #100	; 0x64
    cc44:	182b      	adds	r3, r5, r0
    cc46:	0020      	movs	r0, r4
    cc48:	9301      	str	r3, [sp, #4]
    cc4a:	f7fb fdef 	bl	882c <__aeabi_idivmod>
    cc4e:	9102      	str	r1, [sp, #8]
    cc50:	21c8      	movs	r1, #200	; 0xc8
    cc52:	0020      	movs	r0, r4
    cc54:	0049      	lsls	r1, r1, #1
    cc56:	f7fb fde9 	bl	882c <__aeabi_idivmod>
    cc5a:	000a      	movs	r2, r1
    cc5c:	4253      	negs	r3, r2
    cc5e:	415a      	adcs	r2, r3
    cc60:	003b      	movs	r3, r7
    cc62:	3340      	adds	r3, #64	; 0x40
    cc64:	9307      	str	r3, [sp, #28]
    cc66:	2303      	movs	r3, #3
    cc68:	003d      	movs	r5, r7
    cc6a:	401c      	ands	r4, r3
    cc6c:	9103      	str	r1, [sp, #12]
    cc6e:	9205      	str	r2, [sp, #20]
    cc70:	3508      	adds	r5, #8
    cc72:	9406      	str	r4, [sp, #24]
    cc74:	782b      	ldrb	r3, [r5, #0]
    cc76:	2b4a      	cmp	r3, #74	; 0x4a
    cc78:	d127      	bne.n	ccca <__tzcalc_limits+0xca>
    cc7a:	9a01      	ldr	r2, [sp, #4]
    cc7c:	68eb      	ldr	r3, [r5, #12]
    cc7e:	18d1      	adds	r1, r2, r3
    cc80:	9a06      	ldr	r2, [sp, #24]
    cc82:	2a00      	cmp	r2, #0
    cc84:	d102      	bne.n	cc8c <__tzcalc_limits+0x8c>
    cc86:	9a02      	ldr	r2, [sp, #8]
    cc88:	2a00      	cmp	r2, #0
    cc8a:	d103      	bne.n	cc94 <__tzcalc_limits+0x94>
    cc8c:	2400      	movs	r4, #0
    cc8e:	9a03      	ldr	r2, [sp, #12]
    cc90:	42a2      	cmp	r2, r4
    cc92:	d103      	bne.n	cc9c <__tzcalc_limits+0x9c>
    cc94:	2401      	movs	r4, #1
    cc96:	2b3b      	cmp	r3, #59	; 0x3b
    cc98:	dc00      	bgt.n	cc9c <__tzcalc_limits+0x9c>
    cc9a:	2400      	movs	r4, #0
    cc9c:	1864      	adds	r4, r4, r1
    cc9e:	3c01      	subs	r4, #1
    cca0:	492b      	ldr	r1, [pc, #172]	; (cd50 <__tzcalc_limits+0x150>)
    cca2:	692b      	ldr	r3, [r5, #16]
    cca4:	434c      	muls	r4, r1
    cca6:	18e4      	adds	r4, r4, r3
    cca8:	69ab      	ldr	r3, [r5, #24]
    ccaa:	18e4      	adds	r4, r4, r3
    ccac:	9b07      	ldr	r3, [sp, #28]
    ccae:	616c      	str	r4, [r5, #20]
    ccb0:	351c      	adds	r5, #28
    ccb2:	42ab      	cmp	r3, r5
    ccb4:	d1de      	bne.n	cc74 <__tzcalc_limits+0x74>
    ccb6:	69fa      	ldr	r2, [r7, #28]
    ccb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    ccba:	2301      	movs	r3, #1
    ccbc:	428a      	cmp	r2, r1
    ccbe:	db00      	blt.n	ccc2 <__tzcalc_limits+0xc2>
    ccc0:	2300      	movs	r3, #0
    ccc2:	2001      	movs	r0, #1
    ccc4:	603b      	str	r3, [r7, #0]
    ccc6:	b009      	add	sp, #36	; 0x24
    ccc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccca:	2b44      	cmp	r3, #68	; 0x44
    cccc:	d103      	bne.n	ccd6 <__tzcalc_limits+0xd6>
    ccce:	9b01      	ldr	r3, [sp, #4]
    ccd0:	68ea      	ldr	r2, [r5, #12]
    ccd2:	189c      	adds	r4, r3, r2
    ccd4:	e7e4      	b.n	cca0 <__tzcalc_limits+0xa0>
    ccd6:	9a06      	ldr	r2, [sp, #24]
    ccd8:	9b05      	ldr	r3, [sp, #20]
    ccda:	2a00      	cmp	r2, #0
    ccdc:	d103      	bne.n	cce6 <__tzcalc_limits+0xe6>
    ccde:	9a02      	ldr	r2, [sp, #8]
    cce0:	2a00      	cmp	r2, #0
    cce2:	d000      	beq.n	cce6 <__tzcalc_limits+0xe6>
    cce4:	2301      	movs	r3, #1
    cce6:	2230      	movs	r2, #48	; 0x30
    cce8:	4353      	muls	r3, r2
    ccea:	4a1a      	ldr	r2, [pc, #104]	; (cd54 <__tzcalc_limits+0x154>)
    ccec:	686e      	ldr	r6, [r5, #4]
    ccee:	189b      	adds	r3, r3, r2
    ccf0:	9304      	str	r3, [sp, #16]
    ccf2:	001a      	movs	r2, r3
    ccf4:	2301      	movs	r3, #1
    ccf6:	9c01      	ldr	r4, [sp, #4]
    ccf8:	42b3      	cmp	r3, r6
    ccfa:	db18      	blt.n	cd2e <__tzcalc_limits+0x12e>
    ccfc:	2e00      	cmp	r6, #0
    ccfe:	dc00      	bgt.n	cd02 <__tzcalc_limits+0x102>
    cd00:	2601      	movs	r6, #1
    cd02:	1d20      	adds	r0, r4, #4
    cd04:	2107      	movs	r1, #7
    cd06:	f7fb fd91 	bl	882c <__aeabi_idivmod>
    cd0a:	68eb      	ldr	r3, [r5, #12]
    cd0c:	1a5b      	subs	r3, r3, r1
    cd0e:	d500      	bpl.n	cd12 <__tzcalc_limits+0x112>
    cd10:	3307      	adds	r3, #7
    cd12:	2107      	movs	r1, #7
    cd14:	68aa      	ldr	r2, [r5, #8]
    cd16:	3a01      	subs	r2, #1
    cd18:	4351      	muls	r1, r2
    cd1a:	18c9      	adds	r1, r1, r3
    cd1c:	4b0e      	ldr	r3, [pc, #56]	; (cd58 <__tzcalc_limits+0x158>)
    cd1e:	18f6      	adds	r6, r6, r3
    cd20:	9b04      	ldr	r3, [sp, #16]
    cd22:	00b6      	lsls	r6, r6, #2
    cd24:	58f3      	ldr	r3, [r6, r3]
    cd26:	4299      	cmp	r1, r3
    cd28:	da05      	bge.n	cd36 <__tzcalc_limits+0x136>
    cd2a:	1864      	adds	r4, r4, r1
    cd2c:	e7b8      	b.n	cca0 <__tzcalc_limits+0xa0>
    cd2e:	ca02      	ldmia	r2!, {r1}
    cd30:	3301      	adds	r3, #1
    cd32:	1864      	adds	r4, r4, r1
    cd34:	e7e0      	b.n	ccf8 <__tzcalc_limits+0xf8>
    cd36:	3907      	subs	r1, #7
    cd38:	e7f5      	b.n	cd26 <__tzcalc_limits+0x126>
    cd3a:	46c0      	nop			; (mov r8, r8)
    cd3c:	000007b1 	.word	0x000007b1
    cd40:	fffff84e 	.word	0xfffff84e
    cd44:	fffff84f 	.word	0xfffff84f
    cd48:	fffff893 	.word	0xfffff893
    cd4c:	fffff9bf 	.word	0xfffff9bf
    cd50:	00015180 	.word	0x00015180
    cd54:	00011208 	.word	0x00011208
    cd58:	3fffffff 	.word	0x3fffffff

0000cd5c <__tz_lock>:
    cd5c:	4770      	bx	lr

0000cd5e <__tz_unlock>:
    cd5e:	4770      	bx	lr

0000cd60 <_tzset_unlocked>:
    cd60:	b510      	push	{r4, lr}
    cd62:	4b02      	ldr	r3, [pc, #8]	; (cd6c <_tzset_unlocked+0xc>)
    cd64:	6818      	ldr	r0, [r3, #0]
    cd66:	f000 f803 	bl	cd70 <_tzset_unlocked_r>
    cd6a:	bd10      	pop	{r4, pc}
    cd6c:	200000b4 	.word	0x200000b4

0000cd70 <_tzset_unlocked_r>:
    cd70:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd72:	b08d      	sub	sp, #52	; 0x34
    cd74:	0007      	movs	r7, r0
    cd76:	f001 fad5 	bl	e324 <__gettzinfo>
    cd7a:	49af      	ldr	r1, [pc, #700]	; (d038 <_tzset_unlocked_r+0x2c8>)
    cd7c:	0006      	movs	r6, r0
    cd7e:	0038      	movs	r0, r7
    cd80:	f001 faca 	bl	e318 <_getenv_r>
    cd84:	4dad      	ldr	r5, [pc, #692]	; (d03c <_tzset_unlocked_r+0x2cc>)
    cd86:	1e04      	subs	r4, r0, #0
    cd88:	d10d      	bne.n	cda6 <_tzset_unlocked_r+0x36>
    cd8a:	4bad      	ldr	r3, [pc, #692]	; (d040 <_tzset_unlocked_r+0x2d0>)
    cd8c:	4aad      	ldr	r2, [pc, #692]	; (d044 <_tzset_unlocked_r+0x2d4>)
    cd8e:	6018      	str	r0, [r3, #0]
    cd90:	4bad      	ldr	r3, [pc, #692]	; (d048 <_tzset_unlocked_r+0x2d8>)
    cd92:	6018      	str	r0, [r3, #0]
    cd94:	4bad      	ldr	r3, [pc, #692]	; (d04c <_tzset_unlocked_r+0x2dc>)
    cd96:	6828      	ldr	r0, [r5, #0]
    cd98:	601a      	str	r2, [r3, #0]
    cd9a:	605a      	str	r2, [r3, #4]
    cd9c:	f7fe fcfa 	bl	b794 <free>
    cda0:	602c      	str	r4, [r5, #0]
    cda2:	b00d      	add	sp, #52	; 0x34
    cda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cda6:	6829      	ldr	r1, [r5, #0]
    cda8:	2900      	cmp	r1, #0
    cdaa:	d15a      	bne.n	ce62 <_tzset_unlocked_r+0xf2>
    cdac:	6828      	ldr	r0, [r5, #0]
    cdae:	f7fe fcf1 	bl	b794 <free>
    cdb2:	0020      	movs	r0, r4
    cdb4:	f7ff fe41 	bl	ca3a <strlen>
    cdb8:	1c41      	adds	r1, r0, #1
    cdba:	0038      	movs	r0, r7
    cdbc:	f7fe ffd8 	bl	bd70 <_malloc_r>
    cdc0:	6028      	str	r0, [r5, #0]
    cdc2:	2800      	cmp	r0, #0
    cdc4:	d152      	bne.n	ce6c <_tzset_unlocked_r+0xfc>
    cdc6:	7823      	ldrb	r3, [r4, #0]
    cdc8:	3b3a      	subs	r3, #58	; 0x3a
    cdca:	4259      	negs	r1, r3
    cdcc:	4159      	adcs	r1, r3
    cdce:	1864      	adds	r4, r4, r1
    cdd0:	ab0a      	add	r3, sp, #40	; 0x28
    cdd2:	4a9f      	ldr	r2, [pc, #636]	; (d050 <_tzset_unlocked_r+0x2e0>)
    cdd4:	499f      	ldr	r1, [pc, #636]	; (d054 <_tzset_unlocked_r+0x2e4>)
    cdd6:	0020      	movs	r0, r4
    cdd8:	f001 fff4 	bl	edc4 <siscanf>
    cddc:	2800      	cmp	r0, #0
    cdde:	dde0      	ble.n	cda2 <_tzset_unlocked_r+0x32>
    cde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cde2:	18e4      	adds	r4, r4, r3
    cde4:	7823      	ldrb	r3, [r4, #0]
    cde6:	2b2d      	cmp	r3, #45	; 0x2d
    cde8:	d144      	bne.n	ce74 <_tzset_unlocked_r+0x104>
    cdea:	3b2e      	subs	r3, #46	; 0x2e
    cdec:	3401      	adds	r4, #1
    cdee:	9304      	str	r3, [sp, #16]
    cdf0:	2716      	movs	r7, #22
    cdf2:	ab02      	add	r3, sp, #8
    cdf4:	18ff      	adds	r7, r7, r3
    cdf6:	2300      	movs	r3, #0
    cdf8:	803b      	strh	r3, [r7, #0]
    cdfa:	2300      	movs	r3, #0
    cdfc:	ad08      	add	r5, sp, #32
    cdfe:	802b      	strh	r3, [r5, #0]
    ce00:	ab0a      	add	r3, sp, #40	; 0x28
    ce02:	9303      	str	r3, [sp, #12]
    ce04:	9502      	str	r5, [sp, #8]
    ce06:	9301      	str	r3, [sp, #4]
    ce08:	9700      	str	r7, [sp, #0]
    ce0a:	aa07      	add	r2, sp, #28
    ce0c:	4992      	ldr	r1, [pc, #584]	; (d058 <_tzset_unlocked_r+0x2e8>)
    ce0e:	0020      	movs	r0, r4
    ce10:	f001 ffd8 	bl	edc4 <siscanf>
    ce14:	2800      	cmp	r0, #0
    ce16:	ddc4      	ble.n	cda2 <_tzset_unlocked_r+0x32>
    ce18:	233c      	movs	r3, #60	; 0x3c
    ce1a:	883a      	ldrh	r2, [r7, #0]
    ce1c:	4f8f      	ldr	r7, [pc, #572]	; (d05c <_tzset_unlocked_r+0x2ec>)
    ce1e:	4353      	muls	r3, r2
    ce20:	882a      	ldrh	r2, [r5, #0]
    ce22:	4d8a      	ldr	r5, [pc, #552]	; (d04c <_tzset_unlocked_r+0x2dc>)
    ce24:	189b      	adds	r3, r3, r2
    ce26:	aa02      	add	r2, sp, #8
    ce28:	8a91      	ldrh	r1, [r2, #20]
    ce2a:	22e1      	movs	r2, #225	; 0xe1
    ce2c:	0112      	lsls	r2, r2, #4
    ce2e:	434a      	muls	r2, r1
    ce30:	189b      	adds	r3, r3, r2
    ce32:	9a04      	ldr	r2, [sp, #16]
    ce34:	4987      	ldr	r1, [pc, #540]	; (d054 <_tzset_unlocked_r+0x2e4>)
    ce36:	435a      	muls	r2, r3
    ce38:	4b85      	ldr	r3, [pc, #532]	; (d050 <_tzset_unlocked_r+0x2e0>)
    ce3a:	6232      	str	r2, [r6, #32]
    ce3c:	602b      	str	r3, [r5, #0]
    ce3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce40:	003a      	movs	r2, r7
    ce42:	18e4      	adds	r4, r4, r3
    ce44:	0020      	movs	r0, r4
    ce46:	ab0a      	add	r3, sp, #40	; 0x28
    ce48:	f001 ffbc 	bl	edc4 <siscanf>
    ce4c:	2800      	cmp	r0, #0
    ce4e:	dc18      	bgt.n	ce82 <_tzset_unlocked_r+0x112>
    ce50:	682b      	ldr	r3, [r5, #0]
    ce52:	6a32      	ldr	r2, [r6, #32]
    ce54:	606b      	str	r3, [r5, #4]
    ce56:	4b7a      	ldr	r3, [pc, #488]	; (d040 <_tzset_unlocked_r+0x2d0>)
    ce58:	601a      	str	r2, [r3, #0]
    ce5a:	2200      	movs	r2, #0
    ce5c:	4b7a      	ldr	r3, [pc, #488]	; (d048 <_tzset_unlocked_r+0x2d8>)
    ce5e:	601a      	str	r2, [r3, #0]
    ce60:	e79f      	b.n	cda2 <_tzset_unlocked_r+0x32>
    ce62:	f7ff fdd8 	bl	ca16 <strcmp>
    ce66:	2800      	cmp	r0, #0
    ce68:	d09b      	beq.n	cda2 <_tzset_unlocked_r+0x32>
    ce6a:	e79f      	b.n	cdac <_tzset_unlocked_r+0x3c>
    ce6c:	0021      	movs	r1, r4
    ce6e:	f7ff fddc 	bl	ca2a <strcpy>
    ce72:	e7a8      	b.n	cdc6 <_tzset_unlocked_r+0x56>
    ce74:	2201      	movs	r2, #1
    ce76:	3b2b      	subs	r3, #43	; 0x2b
    ce78:	9204      	str	r2, [sp, #16]
    ce7a:	4259      	negs	r1, r3
    ce7c:	4159      	adcs	r1, r3
    ce7e:	1864      	adds	r4, r4, r1
    ce80:	e7b6      	b.n	cdf0 <_tzset_unlocked_r+0x80>
    ce82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce84:	606f      	str	r7, [r5, #4]
    ce86:	18e4      	adds	r4, r4, r3
    ce88:	7823      	ldrb	r3, [r4, #0]
    ce8a:	2b2d      	cmp	r3, #45	; 0x2d
    ce8c:	d000      	beq.n	ce90 <_tzset_unlocked_r+0x120>
    ce8e:	e08f      	b.n	cfb0 <_tzset_unlocked_r+0x240>
    ce90:	3b2e      	subs	r3, #46	; 0x2e
    ce92:	3401      	adds	r4, #1
    ce94:	9304      	str	r3, [sp, #16]
    ce96:	2716      	movs	r7, #22
    ce98:	2300      	movs	r3, #0
    ce9a:	aa02      	add	r2, sp, #8
    ce9c:	18bf      	adds	r7, r7, r2
    ce9e:	ad07      	add	r5, sp, #28
    cea0:	8313      	strh	r3, [r2, #24]
    cea2:	802b      	strh	r3, [r5, #0]
    cea4:	803b      	strh	r3, [r7, #0]
    cea6:	aa08      	add	r2, sp, #32
    cea8:	930a      	str	r3, [sp, #40]	; 0x28
    ceaa:	ab0a      	add	r3, sp, #40	; 0x28
    ceac:	9202      	str	r2, [sp, #8]
    ceae:	9303      	str	r3, [sp, #12]
    ceb0:	9301      	str	r3, [sp, #4]
    ceb2:	9700      	str	r7, [sp, #0]
    ceb4:	002a      	movs	r2, r5
    ceb6:	4968      	ldr	r1, [pc, #416]	; (d058 <_tzset_unlocked_r+0x2e8>)
    ceb8:	0020      	movs	r0, r4
    ceba:	f001 ff83 	bl	edc4 <siscanf>
    cebe:	2800      	cmp	r0, #0
    cec0:	dd00      	ble.n	cec4 <_tzset_unlocked_r+0x154>
    cec2:	e07c      	b.n	cfbe <_tzset_unlocked_r+0x24e>
    cec4:	6a33      	ldr	r3, [r6, #32]
    cec6:	4a66      	ldr	r2, [pc, #408]	; (d060 <_tzset_unlocked_r+0x2f0>)
    cec8:	189b      	adds	r3, r3, r2
    ceca:	63f3      	str	r3, [r6, #60]	; 0x3c
    cecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cece:	0037      	movs	r7, r6
    ced0:	18e4      	adds	r4, r4, r3
    ced2:	2300      	movs	r3, #0
    ced4:	3708      	adds	r7, #8
    ced6:	9304      	str	r3, [sp, #16]
    ced8:	7823      	ldrb	r3, [r4, #0]
    ceda:	3b2c      	subs	r3, #44	; 0x2c
    cedc:	4259      	negs	r1, r3
    cede:	4159      	adcs	r1, r3
    cee0:	1864      	adds	r4, r4, r1
    cee2:	7825      	ldrb	r5, [r4, #0]
    cee4:	2d4d      	cmp	r5, #77	; 0x4d
    cee6:	d000      	beq.n	ceea <_tzset_unlocked_r+0x17a>
    cee8:	e078      	b.n	cfdc <_tzset_unlocked_r+0x26c>
    ceea:	221e      	movs	r2, #30
    ceec:	a902      	add	r1, sp, #8
    ceee:	1852      	adds	r2, r2, r1
    cef0:	9202      	str	r2, [sp, #8]
    cef2:	aa09      	add	r2, sp, #36	; 0x24
    cef4:	9200      	str	r2, [sp, #0]
    cef6:	221a      	movs	r2, #26
    cef8:	ab0a      	add	r3, sp, #40	; 0x28
    cefa:	1852      	adds	r2, r2, r1
    cefc:	9303      	str	r3, [sp, #12]
    cefe:	9301      	str	r3, [sp, #4]
    cf00:	4958      	ldr	r1, [pc, #352]	; (d064 <_tzset_unlocked_r+0x2f4>)
    cf02:	0020      	movs	r0, r4
    cf04:	f001 ff5e 	bl	edc4 <siscanf>
    cf08:	2803      	cmp	r0, #3
    cf0a:	d000      	beq.n	cf0e <_tzset_unlocked_r+0x19e>
    cf0c:	e749      	b.n	cda2 <_tzset_unlocked_r+0x32>
    cf0e:	ab02      	add	r3, sp, #8
    cf10:	8b59      	ldrh	r1, [r3, #26]
    cf12:	1e4b      	subs	r3, r1, #1
    cf14:	2b0b      	cmp	r3, #11
    cf16:	d900      	bls.n	cf1a <_tzset_unlocked_r+0x1aa>
    cf18:	e743      	b.n	cda2 <_tzset_unlocked_r+0x32>
    cf1a:	ab02      	add	r3, sp, #8
    cf1c:	8b9a      	ldrh	r2, [r3, #28]
    cf1e:	1e53      	subs	r3, r2, #1
    cf20:	2b04      	cmp	r3, #4
    cf22:	d900      	bls.n	cf26 <_tzset_unlocked_r+0x1b6>
    cf24:	e73d      	b.n	cda2 <_tzset_unlocked_r+0x32>
    cf26:	ab02      	add	r3, sp, #8
    cf28:	8bdb      	ldrh	r3, [r3, #30]
    cf2a:	2b06      	cmp	r3, #6
    cf2c:	d900      	bls.n	cf30 <_tzset_unlocked_r+0x1c0>
    cf2e:	e738      	b.n	cda2 <_tzset_unlocked_r+0x32>
    cf30:	703d      	strb	r5, [r7, #0]
    cf32:	6079      	str	r1, [r7, #4]
    cf34:	60ba      	str	r2, [r7, #8]
    cf36:	60fb      	str	r3, [r7, #12]
    cf38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf3a:	18e5      	adds	r5, r4, r3
    cf3c:	2302      	movs	r3, #2
    cf3e:	aa07      	add	r2, sp, #28
    cf40:	8013      	strh	r3, [r2, #0]
    cf42:	2300      	movs	r3, #0
    cf44:	a902      	add	r1, sp, #8
    cf46:	ac08      	add	r4, sp, #32
    cf48:	82cb      	strh	r3, [r1, #22]
    cf4a:	8023      	strh	r3, [r4, #0]
    cf4c:	930a      	str	r3, [sp, #40]	; 0x28
    cf4e:	782b      	ldrb	r3, [r5, #0]
    cf50:	2b2f      	cmp	r3, #47	; 0x2f
    cf52:	d10b      	bne.n	cf6c <_tzset_unlocked_r+0x1fc>
    cf54:	2116      	movs	r1, #22
    cf56:	a802      	add	r0, sp, #8
    cf58:	1809      	adds	r1, r1, r0
    cf5a:	ab0a      	add	r3, sp, #40	; 0x28
    cf5c:	9100      	str	r1, [sp, #0]
    cf5e:	9303      	str	r3, [sp, #12]
    cf60:	9402      	str	r4, [sp, #8]
    cf62:	9301      	str	r3, [sp, #4]
    cf64:	4940      	ldr	r1, [pc, #256]	; (d068 <_tzset_unlocked_r+0x2f8>)
    cf66:	0028      	movs	r0, r5
    cf68:	f001 ff2c 	bl	edc4 <siscanf>
    cf6c:	ab02      	add	r3, sp, #8
    cf6e:	8ada      	ldrh	r2, [r3, #22]
    cf70:	233c      	movs	r3, #60	; 0x3c
    cf72:	4353      	muls	r3, r2
    cf74:	8822      	ldrh	r2, [r4, #0]
    cf76:	189b      	adds	r3, r3, r2
    cf78:	aa07      	add	r2, sp, #28
    cf7a:	8811      	ldrh	r1, [r2, #0]
    cf7c:	22e1      	movs	r2, #225	; 0xe1
    cf7e:	0112      	lsls	r2, r2, #4
    cf80:	434a      	muls	r2, r1
    cf82:	189b      	adds	r3, r3, r2
    cf84:	613b      	str	r3, [r7, #16]
    cf86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf88:	371c      	adds	r7, #28
    cf8a:	18ec      	adds	r4, r5, r3
    cf8c:	9b04      	ldr	r3, [sp, #16]
    cf8e:	3301      	adds	r3, #1
    cf90:	9304      	str	r3, [sp, #16]
    cf92:	2b02      	cmp	r3, #2
    cf94:	d1a0      	bne.n	ced8 <_tzset_unlocked_r+0x168>
    cf96:	6870      	ldr	r0, [r6, #4]
    cf98:	f7ff fe32 	bl	cc00 <__tzcalc_limits>
    cf9c:	6a32      	ldr	r2, [r6, #32]
    cf9e:	4b28      	ldr	r3, [pc, #160]	; (d040 <_tzset_unlocked_r+0x2d0>)
    cfa0:	601a      	str	r2, [r3, #0]
    cfa2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    cfa4:	1a9b      	subs	r3, r3, r2
    cfa6:	1e5a      	subs	r2, r3, #1
    cfa8:	4193      	sbcs	r3, r2
    cfaa:	4a27      	ldr	r2, [pc, #156]	; (d048 <_tzset_unlocked_r+0x2d8>)
    cfac:	6013      	str	r3, [r2, #0]
    cfae:	e6f8      	b.n	cda2 <_tzset_unlocked_r+0x32>
    cfb0:	2201      	movs	r2, #1
    cfb2:	3b2b      	subs	r3, #43	; 0x2b
    cfb4:	9204      	str	r2, [sp, #16]
    cfb6:	4259      	negs	r1, r3
    cfb8:	4159      	adcs	r1, r3
    cfba:	1864      	adds	r4, r4, r1
    cfbc:	e76b      	b.n	ce96 <_tzset_unlocked_r+0x126>
    cfbe:	233c      	movs	r3, #60	; 0x3c
    cfc0:	883a      	ldrh	r2, [r7, #0]
    cfc2:	8829      	ldrh	r1, [r5, #0]
    cfc4:	4353      	muls	r3, r2
    cfc6:	aa02      	add	r2, sp, #8
    cfc8:	8b12      	ldrh	r2, [r2, #24]
    cfca:	189b      	adds	r3, r3, r2
    cfcc:	22e1      	movs	r2, #225	; 0xe1
    cfce:	0112      	lsls	r2, r2, #4
    cfd0:	434a      	muls	r2, r1
    cfd2:	189b      	adds	r3, r3, r2
    cfd4:	9a04      	ldr	r2, [sp, #16]
    cfd6:	435a      	muls	r2, r3
    cfd8:	0013      	movs	r3, r2
    cfda:	e776      	b.n	ceca <_tzset_unlocked_r+0x15a>
    cfdc:	2344      	movs	r3, #68	; 0x44
    cfde:	9305      	str	r3, [sp, #20]
    cfe0:	2d4a      	cmp	r5, #74	; 0x4a
    cfe2:	d101      	bne.n	cfe8 <_tzset_unlocked_r+0x278>
    cfe4:	3401      	adds	r4, #1
    cfe6:	9505      	str	r5, [sp, #20]
    cfe8:	220a      	movs	r2, #10
    cfea:	a90b      	add	r1, sp, #44	; 0x2c
    cfec:	0020      	movs	r0, r4
    cfee:	f001 fff7 	bl	efe0 <strtoul>
    cff2:	231e      	movs	r3, #30
    cff4:	aa02      	add	r2, sp, #8
    cff6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cff8:	189b      	adds	r3, r3, r2
    cffa:	8018      	strh	r0, [r3, #0]
    cffc:	42ac      	cmp	r4, r5
    cffe:	d115      	bne.n	d02c <_tzset_unlocked_r+0x2bc>
    d000:	9b04      	ldr	r3, [sp, #16]
    d002:	2b00      	cmp	r3, #0
    d004:	d108      	bne.n	d018 <_tzset_unlocked_r+0x2a8>
    d006:	334d      	adds	r3, #77	; 0x4d
    d008:	7233      	strb	r3, [r6, #8]
    d00a:	2303      	movs	r3, #3
    d00c:	60f3      	str	r3, [r6, #12]
    d00e:	3b01      	subs	r3, #1
    d010:	6133      	str	r3, [r6, #16]
    d012:	9b04      	ldr	r3, [sp, #16]
    d014:	6173      	str	r3, [r6, #20]
    d016:	e791      	b.n	cf3c <_tzset_unlocked_r+0x1cc>
    d018:	224d      	movs	r2, #77	; 0x4d
    d01a:	1d73      	adds	r3, r6, #5
    d01c:	77da      	strb	r2, [r3, #31]
    d01e:	230b      	movs	r3, #11
    d020:	62b3      	str	r3, [r6, #40]	; 0x28
    d022:	3b0a      	subs	r3, #10
    d024:	62f3      	str	r3, [r6, #44]	; 0x2c
    d026:	2300      	movs	r3, #0
    d028:	6333      	str	r3, [r6, #48]	; 0x30
    d02a:	e787      	b.n	cf3c <_tzset_unlocked_r+0x1cc>
    d02c:	466b      	mov	r3, sp
    d02e:	7d1b      	ldrb	r3, [r3, #20]
    d030:	b280      	uxth	r0, r0
    d032:	703b      	strb	r3, [r7, #0]
    d034:	60f8      	str	r0, [r7, #12]
    d036:	e781      	b.n	cf3c <_tzset_unlocked_r+0x1cc>
    d038:	0001105b 	.word	0x0001105b
    d03c:	20001e4c 	.word	0x20001e4c
    d040:	20001e54 	.word	0x20001e54
    d044:	0001105e 	.word	0x0001105e
    d048:	20001e50 	.word	0x20001e50
    d04c:	20000284 	.word	0x20000284
    d050:	20001e3f 	.word	0x20001e3f
    d054:	00011062 	.word	0x00011062
    d058:	00011085 	.word	0x00011085
    d05c:	20001e34 	.word	0x20001e34
    d060:	fffff1f0 	.word	0xfffff1f0
    d064:	00011071 	.word	0x00011071
    d068:	00011084 	.word	0x00011084

0000d06c <_vsiprintf_r>:
    d06c:	b530      	push	{r4, r5, lr}
    d06e:	b09b      	sub	sp, #108	; 0x6c
    d070:	9100      	str	r1, [sp, #0]
    d072:	9104      	str	r1, [sp, #16]
    d074:	4908      	ldr	r1, [pc, #32]	; (d098 <_vsiprintf_r+0x2c>)
    d076:	466d      	mov	r5, sp
    d078:	9102      	str	r1, [sp, #8]
    d07a:	9105      	str	r1, [sp, #20]
    d07c:	2101      	movs	r1, #1
    d07e:	2482      	movs	r4, #130	; 0x82
    d080:	4249      	negs	r1, r1
    d082:	81e9      	strh	r1, [r5, #14]
    d084:	00a4      	lsls	r4, r4, #2
    d086:	4669      	mov	r1, sp
    d088:	81ac      	strh	r4, [r5, #12]
    d08a:	f001 fd4d 	bl	eb28 <_svfiprintf_r>
    d08e:	2300      	movs	r3, #0
    d090:	9a00      	ldr	r2, [sp, #0]
    d092:	7013      	strb	r3, [r2, #0]
    d094:	b01b      	add	sp, #108	; 0x6c
    d096:	bd30      	pop	{r4, r5, pc}
    d098:	7fffffff 	.word	0x7fffffff

0000d09c <vsiprintf>:
    d09c:	b510      	push	{r4, lr}
    d09e:	0013      	movs	r3, r2
    d0a0:	000a      	movs	r2, r1
    d0a2:	0001      	movs	r1, r0
    d0a4:	4802      	ldr	r0, [pc, #8]	; (d0b0 <vsiprintf+0x14>)
    d0a6:	6800      	ldr	r0, [r0, #0]
    d0a8:	f7ff ffe0 	bl	d06c <_vsiprintf_r>
    d0ac:	bd10      	pop	{r4, pc}
    d0ae:	46c0      	nop			; (mov r8, r8)
    d0b0:	200000b4 	.word	0x200000b4

0000d0b4 <__swbuf_r>:
    d0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0b6:	0005      	movs	r5, r0
    d0b8:	000e      	movs	r6, r1
    d0ba:	0014      	movs	r4, r2
    d0bc:	2800      	cmp	r0, #0
    d0be:	d004      	beq.n	d0ca <__swbuf_r+0x16>
    d0c0:	6983      	ldr	r3, [r0, #24]
    d0c2:	2b00      	cmp	r3, #0
    d0c4:	d101      	bne.n	d0ca <__swbuf_r+0x16>
    d0c6:	f001 f855 	bl	e174 <__sinit>
    d0ca:	4b22      	ldr	r3, [pc, #136]	; (d154 <__swbuf_r+0xa0>)
    d0cc:	429c      	cmp	r4, r3
    d0ce:	d12d      	bne.n	d12c <__swbuf_r+0x78>
    d0d0:	686c      	ldr	r4, [r5, #4]
    d0d2:	69a3      	ldr	r3, [r4, #24]
    d0d4:	60a3      	str	r3, [r4, #8]
    d0d6:	89a3      	ldrh	r3, [r4, #12]
    d0d8:	071b      	lsls	r3, r3, #28
    d0da:	d531      	bpl.n	d140 <__swbuf_r+0x8c>
    d0dc:	6923      	ldr	r3, [r4, #16]
    d0de:	2b00      	cmp	r3, #0
    d0e0:	d02e      	beq.n	d140 <__swbuf_r+0x8c>
    d0e2:	6823      	ldr	r3, [r4, #0]
    d0e4:	6922      	ldr	r2, [r4, #16]
    d0e6:	b2f7      	uxtb	r7, r6
    d0e8:	1a98      	subs	r0, r3, r2
    d0ea:	6963      	ldr	r3, [r4, #20]
    d0ec:	b2f6      	uxtb	r6, r6
    d0ee:	4298      	cmp	r0, r3
    d0f0:	db05      	blt.n	d0fe <__swbuf_r+0x4a>
    d0f2:	0021      	movs	r1, r4
    d0f4:	0028      	movs	r0, r5
    d0f6:	f000 ffcf 	bl	e098 <_fflush_r>
    d0fa:	2800      	cmp	r0, #0
    d0fc:	d126      	bne.n	d14c <__swbuf_r+0x98>
    d0fe:	68a3      	ldr	r3, [r4, #8]
    d100:	3001      	adds	r0, #1
    d102:	3b01      	subs	r3, #1
    d104:	60a3      	str	r3, [r4, #8]
    d106:	6823      	ldr	r3, [r4, #0]
    d108:	1c5a      	adds	r2, r3, #1
    d10a:	6022      	str	r2, [r4, #0]
    d10c:	701f      	strb	r7, [r3, #0]
    d10e:	6963      	ldr	r3, [r4, #20]
    d110:	4298      	cmp	r0, r3
    d112:	d004      	beq.n	d11e <__swbuf_r+0x6a>
    d114:	89a3      	ldrh	r3, [r4, #12]
    d116:	07db      	lsls	r3, r3, #31
    d118:	d51a      	bpl.n	d150 <__swbuf_r+0x9c>
    d11a:	2e0a      	cmp	r6, #10
    d11c:	d118      	bne.n	d150 <__swbuf_r+0x9c>
    d11e:	0021      	movs	r1, r4
    d120:	0028      	movs	r0, r5
    d122:	f000 ffb9 	bl	e098 <_fflush_r>
    d126:	2800      	cmp	r0, #0
    d128:	d012      	beq.n	d150 <__swbuf_r+0x9c>
    d12a:	e00f      	b.n	d14c <__swbuf_r+0x98>
    d12c:	4b0a      	ldr	r3, [pc, #40]	; (d158 <__swbuf_r+0xa4>)
    d12e:	429c      	cmp	r4, r3
    d130:	d101      	bne.n	d136 <__swbuf_r+0x82>
    d132:	68ac      	ldr	r4, [r5, #8]
    d134:	e7cd      	b.n	d0d2 <__swbuf_r+0x1e>
    d136:	4b09      	ldr	r3, [pc, #36]	; (d15c <__swbuf_r+0xa8>)
    d138:	429c      	cmp	r4, r3
    d13a:	d1ca      	bne.n	d0d2 <__swbuf_r+0x1e>
    d13c:	68ec      	ldr	r4, [r5, #12]
    d13e:	e7c8      	b.n	d0d2 <__swbuf_r+0x1e>
    d140:	0021      	movs	r1, r4
    d142:	0028      	movs	r0, r5
    d144:	f000 f818 	bl	d178 <__swsetup_r>
    d148:	2800      	cmp	r0, #0
    d14a:	d0ca      	beq.n	d0e2 <__swbuf_r+0x2e>
    d14c:	2601      	movs	r6, #1
    d14e:	4276      	negs	r6, r6
    d150:	0030      	movs	r0, r6
    d152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d154:	000111c8 	.word	0x000111c8
    d158:	000111e8 	.word	0x000111e8
    d15c:	000111a8 	.word	0x000111a8

0000d160 <__ascii_wctomb>:
    d160:	1e0b      	subs	r3, r1, #0
    d162:	d004      	beq.n	d16e <__ascii_wctomb+0xe>
    d164:	2aff      	cmp	r2, #255	; 0xff
    d166:	d904      	bls.n	d172 <__ascii_wctomb+0x12>
    d168:	238a      	movs	r3, #138	; 0x8a
    d16a:	6003      	str	r3, [r0, #0]
    d16c:	3b8b      	subs	r3, #139	; 0x8b
    d16e:	0018      	movs	r0, r3
    d170:	4770      	bx	lr
    d172:	700a      	strb	r2, [r1, #0]
    d174:	2301      	movs	r3, #1
    d176:	e7fa      	b.n	d16e <__ascii_wctomb+0xe>

0000d178 <__swsetup_r>:
    d178:	4b36      	ldr	r3, [pc, #216]	; (d254 <__swsetup_r+0xdc>)
    d17a:	b570      	push	{r4, r5, r6, lr}
    d17c:	681d      	ldr	r5, [r3, #0]
    d17e:	0006      	movs	r6, r0
    d180:	000c      	movs	r4, r1
    d182:	2d00      	cmp	r5, #0
    d184:	d005      	beq.n	d192 <__swsetup_r+0x1a>
    d186:	69ab      	ldr	r3, [r5, #24]
    d188:	2b00      	cmp	r3, #0
    d18a:	d102      	bne.n	d192 <__swsetup_r+0x1a>
    d18c:	0028      	movs	r0, r5
    d18e:	f000 fff1 	bl	e174 <__sinit>
    d192:	4b31      	ldr	r3, [pc, #196]	; (d258 <__swsetup_r+0xe0>)
    d194:	429c      	cmp	r4, r3
    d196:	d10f      	bne.n	d1b8 <__swsetup_r+0x40>
    d198:	686c      	ldr	r4, [r5, #4]
    d19a:	230c      	movs	r3, #12
    d19c:	5ee2      	ldrsh	r2, [r4, r3]
    d19e:	b293      	uxth	r3, r2
    d1a0:	0719      	lsls	r1, r3, #28
    d1a2:	d42d      	bmi.n	d200 <__swsetup_r+0x88>
    d1a4:	06d9      	lsls	r1, r3, #27
    d1a6:	d411      	bmi.n	d1cc <__swsetup_r+0x54>
    d1a8:	2309      	movs	r3, #9
    d1aa:	2001      	movs	r0, #1
    d1ac:	6033      	str	r3, [r6, #0]
    d1ae:	3337      	adds	r3, #55	; 0x37
    d1b0:	4313      	orrs	r3, r2
    d1b2:	81a3      	strh	r3, [r4, #12]
    d1b4:	4240      	negs	r0, r0
    d1b6:	bd70      	pop	{r4, r5, r6, pc}
    d1b8:	4b28      	ldr	r3, [pc, #160]	; (d25c <__swsetup_r+0xe4>)
    d1ba:	429c      	cmp	r4, r3
    d1bc:	d101      	bne.n	d1c2 <__swsetup_r+0x4a>
    d1be:	68ac      	ldr	r4, [r5, #8]
    d1c0:	e7eb      	b.n	d19a <__swsetup_r+0x22>
    d1c2:	4b27      	ldr	r3, [pc, #156]	; (d260 <__swsetup_r+0xe8>)
    d1c4:	429c      	cmp	r4, r3
    d1c6:	d1e8      	bne.n	d19a <__swsetup_r+0x22>
    d1c8:	68ec      	ldr	r4, [r5, #12]
    d1ca:	e7e6      	b.n	d19a <__swsetup_r+0x22>
    d1cc:	075b      	lsls	r3, r3, #29
    d1ce:	d513      	bpl.n	d1f8 <__swsetup_r+0x80>
    d1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d1d2:	2900      	cmp	r1, #0
    d1d4:	d008      	beq.n	d1e8 <__swsetup_r+0x70>
    d1d6:	0023      	movs	r3, r4
    d1d8:	3344      	adds	r3, #68	; 0x44
    d1da:	4299      	cmp	r1, r3
    d1dc:	d002      	beq.n	d1e4 <__swsetup_r+0x6c>
    d1de:	0030      	movs	r0, r6
    d1e0:	f7fe fd7c 	bl	bcdc <_free_r>
    d1e4:	2300      	movs	r3, #0
    d1e6:	6363      	str	r3, [r4, #52]	; 0x34
    d1e8:	2224      	movs	r2, #36	; 0x24
    d1ea:	89a3      	ldrh	r3, [r4, #12]
    d1ec:	4393      	bics	r3, r2
    d1ee:	81a3      	strh	r3, [r4, #12]
    d1f0:	2300      	movs	r3, #0
    d1f2:	6063      	str	r3, [r4, #4]
    d1f4:	6923      	ldr	r3, [r4, #16]
    d1f6:	6023      	str	r3, [r4, #0]
    d1f8:	2308      	movs	r3, #8
    d1fa:	89a2      	ldrh	r2, [r4, #12]
    d1fc:	4313      	orrs	r3, r2
    d1fe:	81a3      	strh	r3, [r4, #12]
    d200:	6923      	ldr	r3, [r4, #16]
    d202:	2b00      	cmp	r3, #0
    d204:	d10b      	bne.n	d21e <__swsetup_r+0xa6>
    d206:	21a0      	movs	r1, #160	; 0xa0
    d208:	2280      	movs	r2, #128	; 0x80
    d20a:	89a3      	ldrh	r3, [r4, #12]
    d20c:	0089      	lsls	r1, r1, #2
    d20e:	0092      	lsls	r2, r2, #2
    d210:	400b      	ands	r3, r1
    d212:	4293      	cmp	r3, r2
    d214:	d003      	beq.n	d21e <__swsetup_r+0xa6>
    d216:	0021      	movs	r1, r4
    d218:	0030      	movs	r0, r6
    d21a:	f001 f8bb 	bl	e394 <__smakebuf_r>
    d21e:	2301      	movs	r3, #1
    d220:	89a2      	ldrh	r2, [r4, #12]
    d222:	4013      	ands	r3, r2
    d224:	d011      	beq.n	d24a <__swsetup_r+0xd2>
    d226:	2300      	movs	r3, #0
    d228:	60a3      	str	r3, [r4, #8]
    d22a:	6963      	ldr	r3, [r4, #20]
    d22c:	425b      	negs	r3, r3
    d22e:	61a3      	str	r3, [r4, #24]
    d230:	2000      	movs	r0, #0
    d232:	6923      	ldr	r3, [r4, #16]
    d234:	4283      	cmp	r3, r0
    d236:	d1be      	bne.n	d1b6 <__swsetup_r+0x3e>
    d238:	230c      	movs	r3, #12
    d23a:	5ee2      	ldrsh	r2, [r4, r3]
    d23c:	0613      	lsls	r3, r2, #24
    d23e:	d5ba      	bpl.n	d1b6 <__swsetup_r+0x3e>
    d240:	2340      	movs	r3, #64	; 0x40
    d242:	4313      	orrs	r3, r2
    d244:	81a3      	strh	r3, [r4, #12]
    d246:	3801      	subs	r0, #1
    d248:	e7b5      	b.n	d1b6 <__swsetup_r+0x3e>
    d24a:	0792      	lsls	r2, r2, #30
    d24c:	d400      	bmi.n	d250 <__swsetup_r+0xd8>
    d24e:	6963      	ldr	r3, [r4, #20]
    d250:	60a3      	str	r3, [r4, #8]
    d252:	e7ed      	b.n	d230 <__swsetup_r+0xb8>
    d254:	200000b4 	.word	0x200000b4
    d258:	000111c8 	.word	0x000111c8
    d25c:	000111e8 	.word	0x000111e8
    d260:	000111a8 	.word	0x000111a8

0000d264 <abort>:
    d264:	b510      	push	{r4, lr}
    d266:	2006      	movs	r0, #6
    d268:	f001 fd8c 	bl	ed84 <raise>
    d26c:	2001      	movs	r0, #1
    d26e:	f002 fb4b 	bl	f908 <_exit>

0000d272 <div>:
    d272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d274:	000f      	movs	r7, r1
    d276:	0006      	movs	r6, r0
    d278:	0011      	movs	r1, r2
    d27a:	0038      	movs	r0, r7
    d27c:	0015      	movs	r5, r2
    d27e:	f7fb f9ef 	bl	8660 <__divsi3>
    d282:	0029      	movs	r1, r5
    d284:	0004      	movs	r4, r0
    d286:	0038      	movs	r0, r7
    d288:	f7fb fad0 	bl	882c <__aeabi_idivmod>
    d28c:	2f00      	cmp	r7, #0
    d28e:	db07      	blt.n	d2a0 <div+0x2e>
    d290:	2900      	cmp	r1, #0
    d292:	da01      	bge.n	d298 <div+0x26>
    d294:	3401      	adds	r4, #1
    d296:	1b49      	subs	r1, r1, r5
    d298:	0030      	movs	r0, r6
    d29a:	6034      	str	r4, [r6, #0]
    d29c:	6071      	str	r1, [r6, #4]
    d29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2a0:	2900      	cmp	r1, #0
    d2a2:	ddf9      	ble.n	d298 <div+0x26>
    d2a4:	3c01      	subs	r4, #1
    d2a6:	1949      	adds	r1, r1, r5
    d2a8:	e7f6      	b.n	d298 <div+0x26>

0000d2aa <quorem>:
    d2aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2ac:	6903      	ldr	r3, [r0, #16]
    d2ae:	690c      	ldr	r4, [r1, #16]
    d2b0:	b089      	sub	sp, #36	; 0x24
    d2b2:	0007      	movs	r7, r0
    d2b4:	9105      	str	r1, [sp, #20]
    d2b6:	2600      	movs	r6, #0
    d2b8:	429c      	cmp	r4, r3
    d2ba:	dc6d      	bgt.n	d398 <quorem+0xee>
    d2bc:	000b      	movs	r3, r1
    d2be:	3c01      	subs	r4, #1
    d2c0:	3314      	adds	r3, #20
    d2c2:	00a5      	lsls	r5, r4, #2
    d2c4:	9303      	str	r3, [sp, #12]
    d2c6:	195b      	adds	r3, r3, r5
    d2c8:	9304      	str	r3, [sp, #16]
    d2ca:	0003      	movs	r3, r0
    d2cc:	3314      	adds	r3, #20
    d2ce:	9302      	str	r3, [sp, #8]
    d2d0:	195d      	adds	r5, r3, r5
    d2d2:	9b04      	ldr	r3, [sp, #16]
    d2d4:	6828      	ldr	r0, [r5, #0]
    d2d6:	681b      	ldr	r3, [r3, #0]
    d2d8:	1c59      	adds	r1, r3, #1
    d2da:	9301      	str	r3, [sp, #4]
    d2dc:	f7fb f936 	bl	854c <__udivsi3>
    d2e0:	9001      	str	r0, [sp, #4]
    d2e2:	42b0      	cmp	r0, r6
    d2e4:	d02d      	beq.n	d342 <quorem+0x98>
    d2e6:	9b03      	ldr	r3, [sp, #12]
    d2e8:	9802      	ldr	r0, [sp, #8]
    d2ea:	469c      	mov	ip, r3
    d2ec:	9606      	str	r6, [sp, #24]
    d2ee:	4662      	mov	r2, ip
    d2f0:	ca08      	ldmia	r2!, {r3}
    d2f2:	4694      	mov	ip, r2
    d2f4:	9a01      	ldr	r2, [sp, #4]
    d2f6:	b299      	uxth	r1, r3
    d2f8:	4351      	muls	r1, r2
    d2fa:	0c1b      	lsrs	r3, r3, #16
    d2fc:	4353      	muls	r3, r2
    d2fe:	1989      	adds	r1, r1, r6
    d300:	0c0a      	lsrs	r2, r1, #16
    d302:	189b      	adds	r3, r3, r2
    d304:	9307      	str	r3, [sp, #28]
    d306:	8802      	ldrh	r2, [r0, #0]
    d308:	0c1e      	lsrs	r6, r3, #16
    d30a:	9b06      	ldr	r3, [sp, #24]
    d30c:	b289      	uxth	r1, r1
    d30e:	18d2      	adds	r2, r2, r3
    d310:	6803      	ldr	r3, [r0, #0]
    d312:	1a52      	subs	r2, r2, r1
    d314:	0c19      	lsrs	r1, r3, #16
    d316:	466b      	mov	r3, sp
    d318:	8b9b      	ldrh	r3, [r3, #28]
    d31a:	1acb      	subs	r3, r1, r3
    d31c:	1411      	asrs	r1, r2, #16
    d31e:	185b      	adds	r3, r3, r1
    d320:	1419      	asrs	r1, r3, #16
    d322:	b292      	uxth	r2, r2
    d324:	041b      	lsls	r3, r3, #16
    d326:	431a      	orrs	r2, r3
    d328:	9b04      	ldr	r3, [sp, #16]
    d32a:	9106      	str	r1, [sp, #24]
    d32c:	c004      	stmia	r0!, {r2}
    d32e:	4563      	cmp	r3, ip
    d330:	d2dd      	bcs.n	d2ee <quorem+0x44>
    d332:	682b      	ldr	r3, [r5, #0]
    d334:	2b00      	cmp	r3, #0
    d336:	d104      	bne.n	d342 <quorem+0x98>
    d338:	9b02      	ldr	r3, [sp, #8]
    d33a:	3d04      	subs	r5, #4
    d33c:	42ab      	cmp	r3, r5
    d33e:	d32e      	bcc.n	d39e <quorem+0xf4>
    d340:	613c      	str	r4, [r7, #16]
    d342:	9905      	ldr	r1, [sp, #20]
    d344:	0038      	movs	r0, r7
    d346:	f001 fa88 	bl	e85a <__mcmp>
    d34a:	2800      	cmp	r0, #0
    d34c:	db23      	blt.n	d396 <quorem+0xec>
    d34e:	2500      	movs	r5, #0
    d350:	9b01      	ldr	r3, [sp, #4]
    d352:	9802      	ldr	r0, [sp, #8]
    d354:	3301      	adds	r3, #1
    d356:	9903      	ldr	r1, [sp, #12]
    d358:	9301      	str	r3, [sp, #4]
    d35a:	c908      	ldmia	r1!, {r3}
    d35c:	8802      	ldrh	r2, [r0, #0]
    d35e:	1955      	adds	r5, r2, r5
    d360:	b29a      	uxth	r2, r3
    d362:	1aaa      	subs	r2, r5, r2
    d364:	6805      	ldr	r5, [r0, #0]
    d366:	0c1b      	lsrs	r3, r3, #16
    d368:	0c2d      	lsrs	r5, r5, #16
    d36a:	1aeb      	subs	r3, r5, r3
    d36c:	1415      	asrs	r5, r2, #16
    d36e:	195b      	adds	r3, r3, r5
    d370:	141d      	asrs	r5, r3, #16
    d372:	b292      	uxth	r2, r2
    d374:	041b      	lsls	r3, r3, #16
    d376:	4313      	orrs	r3, r2
    d378:	c008      	stmia	r0!, {r3}
    d37a:	9b04      	ldr	r3, [sp, #16]
    d37c:	428b      	cmp	r3, r1
    d37e:	d2ec      	bcs.n	d35a <quorem+0xb0>
    d380:	9a02      	ldr	r2, [sp, #8]
    d382:	00a3      	lsls	r3, r4, #2
    d384:	18d3      	adds	r3, r2, r3
    d386:	681a      	ldr	r2, [r3, #0]
    d388:	2a00      	cmp	r2, #0
    d38a:	d104      	bne.n	d396 <quorem+0xec>
    d38c:	9a02      	ldr	r2, [sp, #8]
    d38e:	3b04      	subs	r3, #4
    d390:	429a      	cmp	r2, r3
    d392:	d309      	bcc.n	d3a8 <quorem+0xfe>
    d394:	613c      	str	r4, [r7, #16]
    d396:	9e01      	ldr	r6, [sp, #4]
    d398:	0030      	movs	r0, r6
    d39a:	b009      	add	sp, #36	; 0x24
    d39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d39e:	682b      	ldr	r3, [r5, #0]
    d3a0:	2b00      	cmp	r3, #0
    d3a2:	d1cd      	bne.n	d340 <quorem+0x96>
    d3a4:	3c01      	subs	r4, #1
    d3a6:	e7c7      	b.n	d338 <quorem+0x8e>
    d3a8:	681a      	ldr	r2, [r3, #0]
    d3aa:	2a00      	cmp	r2, #0
    d3ac:	d1f2      	bne.n	d394 <quorem+0xea>
    d3ae:	3c01      	subs	r4, #1
    d3b0:	e7ec      	b.n	d38c <quorem+0xe2>
	...

0000d3b4 <_dtoa_r>:
    d3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3b6:	0016      	movs	r6, r2
    d3b8:	001f      	movs	r7, r3
    d3ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
    d3bc:	b09d      	sub	sp, #116	; 0x74
    d3be:	9004      	str	r0, [sp, #16]
    d3c0:	9d25      	ldr	r5, [sp, #148]	; 0x94
    d3c2:	9606      	str	r6, [sp, #24]
    d3c4:	9707      	str	r7, [sp, #28]
    d3c6:	2c00      	cmp	r4, #0
    d3c8:	d108      	bne.n	d3dc <_dtoa_r+0x28>
    d3ca:	2010      	movs	r0, #16
    d3cc:	f7fe f9d8 	bl	b780 <malloc>
    d3d0:	9b04      	ldr	r3, [sp, #16]
    d3d2:	6258      	str	r0, [r3, #36]	; 0x24
    d3d4:	6044      	str	r4, [r0, #4]
    d3d6:	6084      	str	r4, [r0, #8]
    d3d8:	6004      	str	r4, [r0, #0]
    d3da:	60c4      	str	r4, [r0, #12]
    d3dc:	9b04      	ldr	r3, [sp, #16]
    d3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d3e0:	6819      	ldr	r1, [r3, #0]
    d3e2:	2900      	cmp	r1, #0
    d3e4:	d00b      	beq.n	d3fe <_dtoa_r+0x4a>
    d3e6:	685a      	ldr	r2, [r3, #4]
    d3e8:	2301      	movs	r3, #1
    d3ea:	4093      	lsls	r3, r2
    d3ec:	604a      	str	r2, [r1, #4]
    d3ee:	608b      	str	r3, [r1, #8]
    d3f0:	9804      	ldr	r0, [sp, #16]
    d3f2:	f001 f858 	bl	e4a6 <_Bfree>
    d3f6:	2200      	movs	r2, #0
    d3f8:	9b04      	ldr	r3, [sp, #16]
    d3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d3fc:	601a      	str	r2, [r3, #0]
    d3fe:	9b07      	ldr	r3, [sp, #28]
    d400:	2b00      	cmp	r3, #0
    d402:	da1f      	bge.n	d444 <_dtoa_r+0x90>
    d404:	2301      	movs	r3, #1
    d406:	602b      	str	r3, [r5, #0]
    d408:	007b      	lsls	r3, r7, #1
    d40a:	085b      	lsrs	r3, r3, #1
    d40c:	9307      	str	r3, [sp, #28]
    d40e:	9c07      	ldr	r4, [sp, #28]
    d410:	4bb7      	ldr	r3, [pc, #732]	; (d6f0 <_dtoa_r+0x33c>)
    d412:	0022      	movs	r2, r4
    d414:	9319      	str	r3, [sp, #100]	; 0x64
    d416:	401a      	ands	r2, r3
    d418:	429a      	cmp	r2, r3
    d41a:	d116      	bne.n	d44a <_dtoa_r+0x96>
    d41c:	4bb5      	ldr	r3, [pc, #724]	; (d6f4 <_dtoa_r+0x340>)
    d41e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d420:	6013      	str	r3, [r2, #0]
    d422:	9b06      	ldr	r3, [sp, #24]
    d424:	2b00      	cmp	r3, #0
    d426:	d103      	bne.n	d430 <_dtoa_r+0x7c>
    d428:	0324      	lsls	r4, r4, #12
    d42a:	d101      	bne.n	d430 <_dtoa_r+0x7c>
    d42c:	f000 fd91 	bl	df52 <_dtoa_r+0xb9e>
    d430:	4bb1      	ldr	r3, [pc, #708]	; (d6f8 <_dtoa_r+0x344>)
    d432:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d434:	930a      	str	r3, [sp, #40]	; 0x28
    d436:	4bb1      	ldr	r3, [pc, #708]	; (d6fc <_dtoa_r+0x348>)
    d438:	2a00      	cmp	r2, #0
    d43a:	d001      	beq.n	d440 <_dtoa_r+0x8c>
    d43c:	f000 fd8f 	bl	df5e <_dtoa_r+0xbaa>
    d440:	f000 fd8f 	bl	df62 <_dtoa_r+0xbae>
    d444:	2300      	movs	r3, #0
    d446:	602b      	str	r3, [r5, #0]
    d448:	e7e1      	b.n	d40e <_dtoa_r+0x5a>
    d44a:	9e06      	ldr	r6, [sp, #24]
    d44c:	9f07      	ldr	r7, [sp, #28]
    d44e:	2200      	movs	r2, #0
    d450:	2300      	movs	r3, #0
    d452:	0030      	movs	r0, r6
    d454:	0039      	movs	r1, r7
    d456:	f7fb f9ff 	bl	8858 <__aeabi_dcmpeq>
    d45a:	1e05      	subs	r5, r0, #0
    d45c:	d00e      	beq.n	d47c <_dtoa_r+0xc8>
    d45e:	2301      	movs	r3, #1
    d460:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d462:	6013      	str	r3, [r2, #0]
    d464:	4ba6      	ldr	r3, [pc, #664]	; (d700 <_dtoa_r+0x34c>)
    d466:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d468:	930a      	str	r3, [sp, #40]	; 0x28
    d46a:	2a00      	cmp	r2, #0
    d46c:	d101      	bne.n	d472 <_dtoa_r+0xbe>
    d46e:	f000 fd78 	bl	df62 <_dtoa_r+0xbae>
    d472:	4aa4      	ldr	r2, [pc, #656]	; (d704 <_dtoa_r+0x350>)
    d474:	9926      	ldr	r1, [sp, #152]	; 0x98
    d476:	600a      	str	r2, [r1, #0]
    d478:	f000 fd73 	bl	df62 <_dtoa_r+0xbae>
    d47c:	ab1a      	add	r3, sp, #104	; 0x68
    d47e:	9301      	str	r3, [sp, #4]
    d480:	ab1b      	add	r3, sp, #108	; 0x6c
    d482:	9300      	str	r3, [sp, #0]
    d484:	0032      	movs	r2, r6
    d486:	003b      	movs	r3, r7
    d488:	9804      	ldr	r0, [sp, #16]
    d48a:	f001 fa63 	bl	e954 <__d2b>
    d48e:	0063      	lsls	r3, r4, #1
    d490:	9005      	str	r0, [sp, #20]
    d492:	0d5b      	lsrs	r3, r3, #21
    d494:	d100      	bne.n	d498 <_dtoa_r+0xe4>
    d496:	e07f      	b.n	d598 <_dtoa_r+0x1e4>
    d498:	033a      	lsls	r2, r7, #12
    d49a:	4c9b      	ldr	r4, [pc, #620]	; (d708 <_dtoa_r+0x354>)
    d49c:	0b12      	lsrs	r2, r2, #12
    d49e:	4314      	orrs	r4, r2
    d4a0:	0021      	movs	r1, r4
    d4a2:	4a9a      	ldr	r2, [pc, #616]	; (d70c <_dtoa_r+0x358>)
    d4a4:	0030      	movs	r0, r6
    d4a6:	9518      	str	r5, [sp, #96]	; 0x60
    d4a8:	189e      	adds	r6, r3, r2
    d4aa:	2200      	movs	r2, #0
    d4ac:	4b98      	ldr	r3, [pc, #608]	; (d710 <_dtoa_r+0x35c>)
    d4ae:	f7fd fb41 	bl	ab34 <__aeabi_dsub>
    d4b2:	4a98      	ldr	r2, [pc, #608]	; (d714 <_dtoa_r+0x360>)
    d4b4:	4b98      	ldr	r3, [pc, #608]	; (d718 <_dtoa_r+0x364>)
    d4b6:	f7fd f8bd 	bl	a634 <__aeabi_dmul>
    d4ba:	4a98      	ldr	r2, [pc, #608]	; (d71c <_dtoa_r+0x368>)
    d4bc:	4b98      	ldr	r3, [pc, #608]	; (d720 <_dtoa_r+0x36c>)
    d4be:	f7fc f975 	bl	97ac <__aeabi_dadd>
    d4c2:	0004      	movs	r4, r0
    d4c4:	0030      	movs	r0, r6
    d4c6:	000d      	movs	r5, r1
    d4c8:	f7fd fe9e 	bl	b208 <__aeabi_i2d>
    d4cc:	4a95      	ldr	r2, [pc, #596]	; (d724 <_dtoa_r+0x370>)
    d4ce:	4b96      	ldr	r3, [pc, #600]	; (d728 <_dtoa_r+0x374>)
    d4d0:	f7fd f8b0 	bl	a634 <__aeabi_dmul>
    d4d4:	0002      	movs	r2, r0
    d4d6:	000b      	movs	r3, r1
    d4d8:	0020      	movs	r0, r4
    d4da:	0029      	movs	r1, r5
    d4dc:	f7fc f966 	bl	97ac <__aeabi_dadd>
    d4e0:	0004      	movs	r4, r0
    d4e2:	000d      	movs	r5, r1
    d4e4:	f7fd fe5c 	bl	b1a0 <__aeabi_d2iz>
    d4e8:	2200      	movs	r2, #0
    d4ea:	9003      	str	r0, [sp, #12]
    d4ec:	2300      	movs	r3, #0
    d4ee:	0020      	movs	r0, r4
    d4f0:	0029      	movs	r1, r5
    d4f2:	f7fb f9b7 	bl	8864 <__aeabi_dcmplt>
    d4f6:	2800      	cmp	r0, #0
    d4f8:	d00e      	beq.n	d518 <_dtoa_r+0x164>
    d4fa:	9803      	ldr	r0, [sp, #12]
    d4fc:	f7fd fe84 	bl	b208 <__aeabi_i2d>
    d500:	000b      	movs	r3, r1
    d502:	0002      	movs	r2, r0
    d504:	0029      	movs	r1, r5
    d506:	0020      	movs	r0, r4
    d508:	f7fb f9a6 	bl	8858 <__aeabi_dcmpeq>
    d50c:	0003      	movs	r3, r0
    d50e:	4258      	negs	r0, r3
    d510:	4158      	adcs	r0, r3
    d512:	9b03      	ldr	r3, [sp, #12]
    d514:	1a1b      	subs	r3, r3, r0
    d516:	9303      	str	r3, [sp, #12]
    d518:	2301      	movs	r3, #1
    d51a:	9316      	str	r3, [sp, #88]	; 0x58
    d51c:	9b03      	ldr	r3, [sp, #12]
    d51e:	2b16      	cmp	r3, #22
    d520:	d80f      	bhi.n	d542 <_dtoa_r+0x18e>
    d522:	4982      	ldr	r1, [pc, #520]	; (d72c <_dtoa_r+0x378>)
    d524:	00db      	lsls	r3, r3, #3
    d526:	18c9      	adds	r1, r1, r3
    d528:	6808      	ldr	r0, [r1, #0]
    d52a:	6849      	ldr	r1, [r1, #4]
    d52c:	9a06      	ldr	r2, [sp, #24]
    d52e:	9b07      	ldr	r3, [sp, #28]
    d530:	f7fb f9ac 	bl	888c <__aeabi_dcmpgt>
    d534:	2800      	cmp	r0, #0
    d536:	d04b      	beq.n	d5d0 <_dtoa_r+0x21c>
    d538:	9b03      	ldr	r3, [sp, #12]
    d53a:	3b01      	subs	r3, #1
    d53c:	9303      	str	r3, [sp, #12]
    d53e:	2300      	movs	r3, #0
    d540:	9316      	str	r3, [sp, #88]	; 0x58
    d542:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d544:	1b9e      	subs	r6, r3, r6
    d546:	2300      	movs	r3, #0
    d548:	930b      	str	r3, [sp, #44]	; 0x2c
    d54a:	0033      	movs	r3, r6
    d54c:	3b01      	subs	r3, #1
    d54e:	930c      	str	r3, [sp, #48]	; 0x30
    d550:	d504      	bpl.n	d55c <_dtoa_r+0x1a8>
    d552:	2301      	movs	r3, #1
    d554:	1b9b      	subs	r3, r3, r6
    d556:	930b      	str	r3, [sp, #44]	; 0x2c
    d558:	2300      	movs	r3, #0
    d55a:	930c      	str	r3, [sp, #48]	; 0x30
    d55c:	9b03      	ldr	r3, [sp, #12]
    d55e:	2b00      	cmp	r3, #0
    d560:	db38      	blt.n	d5d4 <_dtoa_r+0x220>
    d562:	9a03      	ldr	r2, [sp, #12]
    d564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d566:	4694      	mov	ip, r2
    d568:	4463      	add	r3, ip
    d56a:	930c      	str	r3, [sp, #48]	; 0x30
    d56c:	2300      	movs	r3, #0
    d56e:	920f      	str	r2, [sp, #60]	; 0x3c
    d570:	9308      	str	r3, [sp, #32]
    d572:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d574:	2501      	movs	r5, #1
    d576:	2b09      	cmp	r3, #9
    d578:	d900      	bls.n	d57c <_dtoa_r+0x1c8>
    d57a:	e091      	b.n	d6a0 <_dtoa_r+0x2ec>
    d57c:	2b05      	cmp	r3, #5
    d57e:	dd02      	ble.n	d586 <_dtoa_r+0x1d2>
    d580:	2500      	movs	r5, #0
    d582:	3b04      	subs	r3, #4
    d584:	9322      	str	r3, [sp, #136]	; 0x88
    d586:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d588:	1e98      	subs	r0, r3, #2
    d58a:	2803      	cmp	r0, #3
    d58c:	d900      	bls.n	d590 <_dtoa_r+0x1dc>
    d58e:	e091      	b.n	d6b4 <_dtoa_r+0x300>
    d590:	f7fa ffd2 	bl	8538 <__gnu_thumb1_case_uqi>
    d594:	76298482 	.word	0x76298482
    d598:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d59a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    d59c:	189e      	adds	r6, r3, r2
    d59e:	4b64      	ldr	r3, [pc, #400]	; (d730 <_dtoa_r+0x37c>)
    d5a0:	18f2      	adds	r2, r6, r3
    d5a2:	2a20      	cmp	r2, #32
    d5a4:	dd0f      	ble.n	d5c6 <_dtoa_r+0x212>
    d5a6:	4b63      	ldr	r3, [pc, #396]	; (d734 <_dtoa_r+0x380>)
    d5a8:	9806      	ldr	r0, [sp, #24]
    d5aa:	18f3      	adds	r3, r6, r3
    d5ac:	40d8      	lsrs	r0, r3
    d5ae:	2340      	movs	r3, #64	; 0x40
    d5b0:	1a9b      	subs	r3, r3, r2
    d5b2:	409c      	lsls	r4, r3
    d5b4:	4320      	orrs	r0, r4
    d5b6:	f7fd fe69 	bl	b28c <__aeabi_ui2d>
    d5ba:	2301      	movs	r3, #1
    d5bc:	4c5e      	ldr	r4, [pc, #376]	; (d738 <_dtoa_r+0x384>)
    d5be:	3e01      	subs	r6, #1
    d5c0:	1909      	adds	r1, r1, r4
    d5c2:	9318      	str	r3, [sp, #96]	; 0x60
    d5c4:	e771      	b.n	d4aa <_dtoa_r+0xf6>
    d5c6:	2320      	movs	r3, #32
    d5c8:	9806      	ldr	r0, [sp, #24]
    d5ca:	1a9b      	subs	r3, r3, r2
    d5cc:	4098      	lsls	r0, r3
    d5ce:	e7f2      	b.n	d5b6 <_dtoa_r+0x202>
    d5d0:	9016      	str	r0, [sp, #88]	; 0x58
    d5d2:	e7b6      	b.n	d542 <_dtoa_r+0x18e>
    d5d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d5d6:	9a03      	ldr	r2, [sp, #12]
    d5d8:	1a9b      	subs	r3, r3, r2
    d5da:	930b      	str	r3, [sp, #44]	; 0x2c
    d5dc:	4253      	negs	r3, r2
    d5de:	9308      	str	r3, [sp, #32]
    d5e0:	2300      	movs	r3, #0
    d5e2:	930f      	str	r3, [sp, #60]	; 0x3c
    d5e4:	e7c5      	b.n	d572 <_dtoa_r+0x1be>
    d5e6:	2301      	movs	r3, #1
    d5e8:	930e      	str	r3, [sp, #56]	; 0x38
    d5ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d5ec:	2b00      	cmp	r3, #0
    d5ee:	dd65      	ble.n	d6bc <_dtoa_r+0x308>
    d5f0:	001f      	movs	r7, r3
    d5f2:	930d      	str	r3, [sp, #52]	; 0x34
    d5f4:	9a04      	ldr	r2, [sp, #16]
    d5f6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    d5f8:	2200      	movs	r2, #0
    d5fa:	6062      	str	r2, [r4, #4]
    d5fc:	3204      	adds	r2, #4
    d5fe:	0011      	movs	r1, r2
    d600:	3114      	adds	r1, #20
    d602:	4299      	cmp	r1, r3
    d604:	d95f      	bls.n	d6c6 <_dtoa_r+0x312>
    d606:	6861      	ldr	r1, [r4, #4]
    d608:	9804      	ldr	r0, [sp, #16]
    d60a:	f000 ff14 	bl	e436 <_Balloc>
    d60e:	9b04      	ldr	r3, [sp, #16]
    d610:	6020      	str	r0, [r4, #0]
    d612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d614:	681b      	ldr	r3, [r3, #0]
    d616:	930a      	str	r3, [sp, #40]	; 0x28
    d618:	2f0e      	cmp	r7, #14
    d61a:	d900      	bls.n	d61e <_dtoa_r+0x26a>
    d61c:	e105      	b.n	d82a <_dtoa_r+0x476>
    d61e:	2d00      	cmp	r5, #0
    d620:	d100      	bne.n	d624 <_dtoa_r+0x270>
    d622:	e102      	b.n	d82a <_dtoa_r+0x476>
    d624:	9b06      	ldr	r3, [sp, #24]
    d626:	9c07      	ldr	r4, [sp, #28]
    d628:	9314      	str	r3, [sp, #80]	; 0x50
    d62a:	9415      	str	r4, [sp, #84]	; 0x54
    d62c:	9b03      	ldr	r3, [sp, #12]
    d62e:	2b00      	cmp	r3, #0
    d630:	dc00      	bgt.n	d634 <_dtoa_r+0x280>
    d632:	e085      	b.n	d740 <_dtoa_r+0x38c>
    d634:	001a      	movs	r2, r3
    d636:	210f      	movs	r1, #15
    d638:	4b3c      	ldr	r3, [pc, #240]	; (d72c <_dtoa_r+0x378>)
    d63a:	400a      	ands	r2, r1
    d63c:	00d2      	lsls	r2, r2, #3
    d63e:	189b      	adds	r3, r3, r2
    d640:	685c      	ldr	r4, [r3, #4]
    d642:	681b      	ldr	r3, [r3, #0]
    d644:	9310      	str	r3, [sp, #64]	; 0x40
    d646:	9411      	str	r4, [sp, #68]	; 0x44
    d648:	9b03      	ldr	r3, [sp, #12]
    d64a:	2402      	movs	r4, #2
    d64c:	111d      	asrs	r5, r3, #4
    d64e:	06eb      	lsls	r3, r5, #27
    d650:	d50a      	bpl.n	d668 <_dtoa_r+0x2b4>
    d652:	4b3a      	ldr	r3, [pc, #232]	; (d73c <_dtoa_r+0x388>)
    d654:	400d      	ands	r5, r1
    d656:	6a1a      	ldr	r2, [r3, #32]
    d658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d65a:	9814      	ldr	r0, [sp, #80]	; 0x50
    d65c:	9915      	ldr	r1, [sp, #84]	; 0x54
    d65e:	f7fc fbb5 	bl	9dcc <__aeabi_ddiv>
    d662:	9006      	str	r0, [sp, #24]
    d664:	9107      	str	r1, [sp, #28]
    d666:	3401      	adds	r4, #1
    d668:	4e34      	ldr	r6, [pc, #208]	; (d73c <_dtoa_r+0x388>)
    d66a:	2d00      	cmp	r5, #0
    d66c:	d130      	bne.n	d6d0 <_dtoa_r+0x31c>
    d66e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d670:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d672:	9806      	ldr	r0, [sp, #24]
    d674:	9907      	ldr	r1, [sp, #28]
    d676:	f7fc fba9 	bl	9dcc <__aeabi_ddiv>
    d67a:	9006      	str	r0, [sp, #24]
    d67c:	9107      	str	r1, [sp, #28]
    d67e:	e07a      	b.n	d776 <_dtoa_r+0x3c2>
    d680:	2301      	movs	r3, #1
    d682:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    d684:	930e      	str	r3, [sp, #56]	; 0x38
    d686:	4694      	mov	ip, r2
    d688:	9b03      	ldr	r3, [sp, #12]
    d68a:	4463      	add	r3, ip
    d68c:	1c5f      	adds	r7, r3, #1
    d68e:	930d      	str	r3, [sp, #52]	; 0x34
    d690:	1e3b      	subs	r3, r7, #0
    d692:	dcaf      	bgt.n	d5f4 <_dtoa_r+0x240>
    d694:	2301      	movs	r3, #1
    d696:	e7ad      	b.n	d5f4 <_dtoa_r+0x240>
    d698:	2300      	movs	r3, #0
    d69a:	e7a5      	b.n	d5e8 <_dtoa_r+0x234>
    d69c:	2300      	movs	r3, #0
    d69e:	e7f0      	b.n	d682 <_dtoa_r+0x2ce>
    d6a0:	2300      	movs	r3, #0
    d6a2:	950e      	str	r5, [sp, #56]	; 0x38
    d6a4:	9322      	str	r3, [sp, #136]	; 0x88
    d6a6:	3b01      	subs	r3, #1
    d6a8:	2200      	movs	r2, #0
    d6aa:	930d      	str	r3, [sp, #52]	; 0x34
    d6ac:	001f      	movs	r7, r3
    d6ae:	3313      	adds	r3, #19
    d6b0:	9223      	str	r2, [sp, #140]	; 0x8c
    d6b2:	e79f      	b.n	d5f4 <_dtoa_r+0x240>
    d6b4:	2301      	movs	r3, #1
    d6b6:	930e      	str	r3, [sp, #56]	; 0x38
    d6b8:	3b02      	subs	r3, #2
    d6ba:	e7f5      	b.n	d6a8 <_dtoa_r+0x2f4>
    d6bc:	2301      	movs	r3, #1
    d6be:	930d      	str	r3, [sp, #52]	; 0x34
    d6c0:	001f      	movs	r7, r3
    d6c2:	001a      	movs	r2, r3
    d6c4:	e7f4      	b.n	d6b0 <_dtoa_r+0x2fc>
    d6c6:	6861      	ldr	r1, [r4, #4]
    d6c8:	0052      	lsls	r2, r2, #1
    d6ca:	3101      	adds	r1, #1
    d6cc:	6061      	str	r1, [r4, #4]
    d6ce:	e796      	b.n	d5fe <_dtoa_r+0x24a>
    d6d0:	2301      	movs	r3, #1
    d6d2:	421d      	tst	r5, r3
    d6d4:	d008      	beq.n	d6e8 <_dtoa_r+0x334>
    d6d6:	9810      	ldr	r0, [sp, #64]	; 0x40
    d6d8:	9911      	ldr	r1, [sp, #68]	; 0x44
    d6da:	18e4      	adds	r4, r4, r3
    d6dc:	6832      	ldr	r2, [r6, #0]
    d6de:	6873      	ldr	r3, [r6, #4]
    d6e0:	f7fc ffa8 	bl	a634 <__aeabi_dmul>
    d6e4:	9010      	str	r0, [sp, #64]	; 0x40
    d6e6:	9111      	str	r1, [sp, #68]	; 0x44
    d6e8:	106d      	asrs	r5, r5, #1
    d6ea:	3608      	adds	r6, #8
    d6ec:	e7bd      	b.n	d66a <_dtoa_r+0x2b6>
    d6ee:	46c0      	nop			; (mov r8, r8)
    d6f0:	7ff00000 	.word	0x7ff00000
    d6f4:	0000270f 	.word	0x0000270f
    d6f8:	000111a1 	.word	0x000111a1
    d6fc:	000111a4 	.word	0x000111a4
    d700:	0000fb88 	.word	0x0000fb88
    d704:	0000fb89 	.word	0x0000fb89
    d708:	3ff00000 	.word	0x3ff00000
    d70c:	fffffc01 	.word	0xfffffc01
    d710:	3ff80000 	.word	0x3ff80000
    d714:	636f4361 	.word	0x636f4361
    d718:	3fd287a7 	.word	0x3fd287a7
    d71c:	8b60c8b3 	.word	0x8b60c8b3
    d720:	3fc68a28 	.word	0x3fc68a28
    d724:	509f79fb 	.word	0x509f79fb
    d728:	3fd34413 	.word	0x3fd34413
    d72c:	00011290 	.word	0x00011290
    d730:	00000432 	.word	0x00000432
    d734:	00000412 	.word	0x00000412
    d738:	fe100000 	.word	0xfe100000
    d73c:	00011268 	.word	0x00011268
    d740:	9b03      	ldr	r3, [sp, #12]
    d742:	2402      	movs	r4, #2
    d744:	2b00      	cmp	r3, #0
    d746:	d016      	beq.n	d776 <_dtoa_r+0x3c2>
    d748:	9814      	ldr	r0, [sp, #80]	; 0x50
    d74a:	9915      	ldr	r1, [sp, #84]	; 0x54
    d74c:	425d      	negs	r5, r3
    d74e:	230f      	movs	r3, #15
    d750:	4aca      	ldr	r2, [pc, #808]	; (da7c <_dtoa_r+0x6c8>)
    d752:	402b      	ands	r3, r5
    d754:	00db      	lsls	r3, r3, #3
    d756:	18d3      	adds	r3, r2, r3
    d758:	681a      	ldr	r2, [r3, #0]
    d75a:	685b      	ldr	r3, [r3, #4]
    d75c:	f7fc ff6a 	bl	a634 <__aeabi_dmul>
    d760:	2300      	movs	r3, #0
    d762:	9006      	str	r0, [sp, #24]
    d764:	9107      	str	r1, [sp, #28]
    d766:	4ec6      	ldr	r6, [pc, #792]	; (da80 <_dtoa_r+0x6cc>)
    d768:	112d      	asrs	r5, r5, #4
    d76a:	2d00      	cmp	r5, #0
    d76c:	d000      	beq.n	d770 <_dtoa_r+0x3bc>
    d76e:	e08c      	b.n	d88a <_dtoa_r+0x4d6>
    d770:	2b00      	cmp	r3, #0
    d772:	d000      	beq.n	d776 <_dtoa_r+0x3c2>
    d774:	e781      	b.n	d67a <_dtoa_r+0x2c6>
    d776:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d778:	2b00      	cmp	r3, #0
    d77a:	d100      	bne.n	d77e <_dtoa_r+0x3ca>
    d77c:	e091      	b.n	d8a2 <_dtoa_r+0x4ee>
    d77e:	9a06      	ldr	r2, [sp, #24]
    d780:	9b07      	ldr	r3, [sp, #28]
    d782:	9210      	str	r2, [sp, #64]	; 0x40
    d784:	9311      	str	r3, [sp, #68]	; 0x44
    d786:	9810      	ldr	r0, [sp, #64]	; 0x40
    d788:	9911      	ldr	r1, [sp, #68]	; 0x44
    d78a:	2200      	movs	r2, #0
    d78c:	4bbd      	ldr	r3, [pc, #756]	; (da84 <_dtoa_r+0x6d0>)
    d78e:	f7fb f869 	bl	8864 <__aeabi_dcmplt>
    d792:	2800      	cmp	r0, #0
    d794:	d100      	bne.n	d798 <_dtoa_r+0x3e4>
    d796:	e084      	b.n	d8a2 <_dtoa_r+0x4ee>
    d798:	2f00      	cmp	r7, #0
    d79a:	d100      	bne.n	d79e <_dtoa_r+0x3ea>
    d79c:	e081      	b.n	d8a2 <_dtoa_r+0x4ee>
    d79e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	dd3e      	ble.n	d822 <_dtoa_r+0x46e>
    d7a4:	9810      	ldr	r0, [sp, #64]	; 0x40
    d7a6:	9911      	ldr	r1, [sp, #68]	; 0x44
    d7a8:	9b03      	ldr	r3, [sp, #12]
    d7aa:	2200      	movs	r2, #0
    d7ac:	1e5e      	subs	r6, r3, #1
    d7ae:	4bb6      	ldr	r3, [pc, #728]	; (da88 <_dtoa_r+0x6d4>)
    d7b0:	f7fc ff40 	bl	a634 <__aeabi_dmul>
    d7b4:	9006      	str	r0, [sp, #24]
    d7b6:	9107      	str	r1, [sp, #28]
    d7b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    d7ba:	3401      	adds	r4, #1
    d7bc:	0020      	movs	r0, r4
    d7be:	f7fd fd23 	bl	b208 <__aeabi_i2d>
    d7c2:	9a06      	ldr	r2, [sp, #24]
    d7c4:	9b07      	ldr	r3, [sp, #28]
    d7c6:	f7fc ff35 	bl	a634 <__aeabi_dmul>
    d7ca:	2200      	movs	r2, #0
    d7cc:	4baf      	ldr	r3, [pc, #700]	; (da8c <_dtoa_r+0x6d8>)
    d7ce:	f7fb ffed 	bl	97ac <__aeabi_dadd>
    d7d2:	9012      	str	r0, [sp, #72]	; 0x48
    d7d4:	9113      	str	r1, [sp, #76]	; 0x4c
    d7d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d7d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    d7da:	4aad      	ldr	r2, [pc, #692]	; (da90 <_dtoa_r+0x6dc>)
    d7dc:	9310      	str	r3, [sp, #64]	; 0x40
    d7de:	9411      	str	r4, [sp, #68]	; 0x44
    d7e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d7e2:	189c      	adds	r4, r3, r2
    d7e4:	9411      	str	r4, [sp, #68]	; 0x44
    d7e6:	2d00      	cmp	r5, #0
    d7e8:	d15e      	bne.n	d8a8 <_dtoa_r+0x4f4>
    d7ea:	9806      	ldr	r0, [sp, #24]
    d7ec:	9907      	ldr	r1, [sp, #28]
    d7ee:	2200      	movs	r2, #0
    d7f0:	4ba8      	ldr	r3, [pc, #672]	; (da94 <_dtoa_r+0x6e0>)
    d7f2:	f7fd f99f 	bl	ab34 <__aeabi_dsub>
    d7f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d7f8:	0023      	movs	r3, r4
    d7fa:	9006      	str	r0, [sp, #24]
    d7fc:	9107      	str	r1, [sp, #28]
    d7fe:	f7fb f845 	bl	888c <__aeabi_dcmpgt>
    d802:	2800      	cmp	r0, #0
    d804:	d000      	beq.n	d808 <_dtoa_r+0x454>
    d806:	e301      	b.n	de0c <_dtoa_r+0xa58>
    d808:	48a3      	ldr	r0, [pc, #652]	; (da98 <_dtoa_r+0x6e4>)
    d80a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    d80c:	4684      	mov	ip, r0
    d80e:	4461      	add	r1, ip
    d810:	000b      	movs	r3, r1
    d812:	9806      	ldr	r0, [sp, #24]
    d814:	9907      	ldr	r1, [sp, #28]
    d816:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d818:	f7fb f824 	bl	8864 <__aeabi_dcmplt>
    d81c:	2800      	cmp	r0, #0
    d81e:	d000      	beq.n	d822 <_dtoa_r+0x46e>
    d820:	e2e8      	b.n	ddf4 <_dtoa_r+0xa40>
    d822:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d824:	9c15      	ldr	r4, [sp, #84]	; 0x54
    d826:	9306      	str	r3, [sp, #24]
    d828:	9407      	str	r4, [sp, #28]
    d82a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d82c:	2b00      	cmp	r3, #0
    d82e:	da00      	bge.n	d832 <_dtoa_r+0x47e>
    d830:	e157      	b.n	dae2 <_dtoa_r+0x72e>
    d832:	9a03      	ldr	r2, [sp, #12]
    d834:	2a0e      	cmp	r2, #14
    d836:	dd00      	ble.n	d83a <_dtoa_r+0x486>
    d838:	e153      	b.n	dae2 <_dtoa_r+0x72e>
    d83a:	4b90      	ldr	r3, [pc, #576]	; (da7c <_dtoa_r+0x6c8>)
    d83c:	00d2      	lsls	r2, r2, #3
    d83e:	189b      	adds	r3, r3, r2
    d840:	685c      	ldr	r4, [r3, #4]
    d842:	681b      	ldr	r3, [r3, #0]
    d844:	9308      	str	r3, [sp, #32]
    d846:	9409      	str	r4, [sp, #36]	; 0x24
    d848:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d84a:	2b00      	cmp	r3, #0
    d84c:	db00      	blt.n	d850 <_dtoa_r+0x49c>
    d84e:	e0ce      	b.n	d9ee <_dtoa_r+0x63a>
    d850:	2f00      	cmp	r7, #0
    d852:	dd00      	ble.n	d856 <_dtoa_r+0x4a2>
    d854:	e0cb      	b.n	d9ee <_dtoa_r+0x63a>
    d856:	d000      	beq.n	d85a <_dtoa_r+0x4a6>
    d858:	e2cf      	b.n	ddfa <_dtoa_r+0xa46>
    d85a:	9808      	ldr	r0, [sp, #32]
    d85c:	9909      	ldr	r1, [sp, #36]	; 0x24
    d85e:	2200      	movs	r2, #0
    d860:	4b8c      	ldr	r3, [pc, #560]	; (da94 <_dtoa_r+0x6e0>)
    d862:	f7fc fee7 	bl	a634 <__aeabi_dmul>
    d866:	9a06      	ldr	r2, [sp, #24]
    d868:	9b07      	ldr	r3, [sp, #28]
    d86a:	f7fb f819 	bl	88a0 <__aeabi_dcmpge>
    d86e:	003e      	movs	r6, r7
    d870:	9708      	str	r7, [sp, #32]
    d872:	2800      	cmp	r0, #0
    d874:	d000      	beq.n	d878 <_dtoa_r+0x4c4>
    d876:	e2a4      	b.n	ddc2 <_dtoa_r+0xa0e>
    d878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d87a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d87c:	1c5d      	adds	r5, r3, #1
    d87e:	2331      	movs	r3, #49	; 0x31
    d880:	7013      	strb	r3, [r2, #0]
    d882:	9b03      	ldr	r3, [sp, #12]
    d884:	3301      	adds	r3, #1
    d886:	9303      	str	r3, [sp, #12]
    d888:	e29f      	b.n	ddca <_dtoa_r+0xa16>
    d88a:	2201      	movs	r2, #1
    d88c:	4215      	tst	r5, r2
    d88e:	d005      	beq.n	d89c <_dtoa_r+0x4e8>
    d890:	18a4      	adds	r4, r4, r2
    d892:	6832      	ldr	r2, [r6, #0]
    d894:	6873      	ldr	r3, [r6, #4]
    d896:	f7fc fecd 	bl	a634 <__aeabi_dmul>
    d89a:	2301      	movs	r3, #1
    d89c:	106d      	asrs	r5, r5, #1
    d89e:	3608      	adds	r6, #8
    d8a0:	e763      	b.n	d76a <_dtoa_r+0x3b6>
    d8a2:	9e03      	ldr	r6, [sp, #12]
    d8a4:	003d      	movs	r5, r7
    d8a6:	e789      	b.n	d7bc <_dtoa_r+0x408>
    d8a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d8aa:	1e69      	subs	r1, r5, #1
    d8ac:	1952      	adds	r2, r2, r5
    d8ae:	9217      	str	r2, [sp, #92]	; 0x5c
    d8b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d8b2:	4b72      	ldr	r3, [pc, #456]	; (da7c <_dtoa_r+0x6c8>)
    d8b4:	00c9      	lsls	r1, r1, #3
    d8b6:	2a00      	cmp	r2, #0
    d8b8:	d04a      	beq.n	d950 <_dtoa_r+0x59c>
    d8ba:	185b      	adds	r3, r3, r1
    d8bc:	681a      	ldr	r2, [r3, #0]
    d8be:	685b      	ldr	r3, [r3, #4]
    d8c0:	2000      	movs	r0, #0
    d8c2:	4976      	ldr	r1, [pc, #472]	; (da9c <_dtoa_r+0x6e8>)
    d8c4:	f7fc fa82 	bl	9dcc <__aeabi_ddiv>
    d8c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d8ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d8cc:	f7fd f932 	bl	ab34 <__aeabi_dsub>
    d8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d8d2:	9010      	str	r0, [sp, #64]	; 0x40
    d8d4:	9111      	str	r1, [sp, #68]	; 0x44
    d8d6:	9312      	str	r3, [sp, #72]	; 0x48
    d8d8:	9806      	ldr	r0, [sp, #24]
    d8da:	9907      	ldr	r1, [sp, #28]
    d8dc:	f7fd fc60 	bl	b1a0 <__aeabi_d2iz>
    d8e0:	0004      	movs	r4, r0
    d8e2:	f7fd fc91 	bl	b208 <__aeabi_i2d>
    d8e6:	0002      	movs	r2, r0
    d8e8:	000b      	movs	r3, r1
    d8ea:	9806      	ldr	r0, [sp, #24]
    d8ec:	9907      	ldr	r1, [sp, #28]
    d8ee:	f7fd f921 	bl	ab34 <__aeabi_dsub>
    d8f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d8f4:	3430      	adds	r4, #48	; 0x30
    d8f6:	1c5d      	adds	r5, r3, #1
    d8f8:	701c      	strb	r4, [r3, #0]
    d8fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d8fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d8fe:	9006      	str	r0, [sp, #24]
    d900:	9107      	str	r1, [sp, #28]
    d902:	f7fa ffaf 	bl	8864 <__aeabi_dcmplt>
    d906:	2800      	cmp	r0, #0
    d908:	d165      	bne.n	d9d6 <_dtoa_r+0x622>
    d90a:	9a06      	ldr	r2, [sp, #24]
    d90c:	9b07      	ldr	r3, [sp, #28]
    d90e:	2000      	movs	r0, #0
    d910:	495c      	ldr	r1, [pc, #368]	; (da84 <_dtoa_r+0x6d0>)
    d912:	f7fd f90f 	bl	ab34 <__aeabi_dsub>
    d916:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d918:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d91a:	f7fa ffa3 	bl	8864 <__aeabi_dcmplt>
    d91e:	2800      	cmp	r0, #0
    d920:	d000      	beq.n	d924 <_dtoa_r+0x570>
    d922:	e0be      	b.n	daa2 <_dtoa_r+0x6ee>
    d924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d926:	429d      	cmp	r5, r3
    d928:	d100      	bne.n	d92c <_dtoa_r+0x578>
    d92a:	e77a      	b.n	d822 <_dtoa_r+0x46e>
    d92c:	9810      	ldr	r0, [sp, #64]	; 0x40
    d92e:	9911      	ldr	r1, [sp, #68]	; 0x44
    d930:	2200      	movs	r2, #0
    d932:	4b55      	ldr	r3, [pc, #340]	; (da88 <_dtoa_r+0x6d4>)
    d934:	f7fc fe7e 	bl	a634 <__aeabi_dmul>
    d938:	2200      	movs	r2, #0
    d93a:	9010      	str	r0, [sp, #64]	; 0x40
    d93c:	9111      	str	r1, [sp, #68]	; 0x44
    d93e:	9806      	ldr	r0, [sp, #24]
    d940:	9907      	ldr	r1, [sp, #28]
    d942:	4b51      	ldr	r3, [pc, #324]	; (da88 <_dtoa_r+0x6d4>)
    d944:	f7fc fe76 	bl	a634 <__aeabi_dmul>
    d948:	9512      	str	r5, [sp, #72]	; 0x48
    d94a:	9006      	str	r0, [sp, #24]
    d94c:	9107      	str	r1, [sp, #28]
    d94e:	e7c3      	b.n	d8d8 <_dtoa_r+0x524>
    d950:	1859      	adds	r1, r3, r1
    d952:	6808      	ldr	r0, [r1, #0]
    d954:	6849      	ldr	r1, [r1, #4]
    d956:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d958:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d95a:	f7fc fe6b 	bl	a634 <__aeabi_dmul>
    d95e:	9010      	str	r0, [sp, #64]	; 0x40
    d960:	9111      	str	r1, [sp, #68]	; 0x44
    d962:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d964:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    d966:	9806      	ldr	r0, [sp, #24]
    d968:	9907      	ldr	r1, [sp, #28]
    d96a:	f7fd fc19 	bl	b1a0 <__aeabi_d2iz>
    d96e:	9012      	str	r0, [sp, #72]	; 0x48
    d970:	f7fd fc4a 	bl	b208 <__aeabi_i2d>
    d974:	0002      	movs	r2, r0
    d976:	000b      	movs	r3, r1
    d978:	9806      	ldr	r0, [sp, #24]
    d97a:	9907      	ldr	r1, [sp, #28]
    d97c:	f7fd f8da 	bl	ab34 <__aeabi_dsub>
    d980:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d982:	9006      	str	r0, [sp, #24]
    d984:	9107      	str	r1, [sp, #28]
    d986:	3330      	adds	r3, #48	; 0x30
    d988:	7023      	strb	r3, [r4, #0]
    d98a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d98c:	3401      	adds	r4, #1
    d98e:	2200      	movs	r2, #0
    d990:	42a3      	cmp	r3, r4
    d992:	d124      	bne.n	d9de <_dtoa_r+0x62a>
    d994:	4b41      	ldr	r3, [pc, #260]	; (da9c <_dtoa_r+0x6e8>)
    d996:	9810      	ldr	r0, [sp, #64]	; 0x40
    d998:	9911      	ldr	r1, [sp, #68]	; 0x44
    d99a:	f7fb ff07 	bl	97ac <__aeabi_dadd>
    d99e:	0002      	movs	r2, r0
    d9a0:	000b      	movs	r3, r1
    d9a2:	9806      	ldr	r0, [sp, #24]
    d9a4:	9907      	ldr	r1, [sp, #28]
    d9a6:	f7fa ff71 	bl	888c <__aeabi_dcmpgt>
    d9aa:	2800      	cmp	r0, #0
    d9ac:	d000      	beq.n	d9b0 <_dtoa_r+0x5fc>
    d9ae:	e078      	b.n	daa2 <_dtoa_r+0x6ee>
    d9b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d9b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d9b4:	2000      	movs	r0, #0
    d9b6:	4939      	ldr	r1, [pc, #228]	; (da9c <_dtoa_r+0x6e8>)
    d9b8:	f7fd f8bc 	bl	ab34 <__aeabi_dsub>
    d9bc:	0002      	movs	r2, r0
    d9be:	000b      	movs	r3, r1
    d9c0:	9806      	ldr	r0, [sp, #24]
    d9c2:	9907      	ldr	r1, [sp, #28]
    d9c4:	f7fa ff4e 	bl	8864 <__aeabi_dcmplt>
    d9c8:	2800      	cmp	r0, #0
    d9ca:	d100      	bne.n	d9ce <_dtoa_r+0x61a>
    d9cc:	e729      	b.n	d822 <_dtoa_r+0x46e>
    d9ce:	1e6b      	subs	r3, r5, #1
    d9d0:	781a      	ldrb	r2, [r3, #0]
    d9d2:	2a30      	cmp	r2, #48	; 0x30
    d9d4:	d001      	beq.n	d9da <_dtoa_r+0x626>
    d9d6:	9603      	str	r6, [sp, #12]
    d9d8:	e03f      	b.n	da5a <_dtoa_r+0x6a6>
    d9da:	001d      	movs	r5, r3
    d9dc:	e7f7      	b.n	d9ce <_dtoa_r+0x61a>
    d9de:	9806      	ldr	r0, [sp, #24]
    d9e0:	9907      	ldr	r1, [sp, #28]
    d9e2:	4b29      	ldr	r3, [pc, #164]	; (da88 <_dtoa_r+0x6d4>)
    d9e4:	f7fc fe26 	bl	a634 <__aeabi_dmul>
    d9e8:	9006      	str	r0, [sp, #24]
    d9ea:	9107      	str	r1, [sp, #28]
    d9ec:	e7bb      	b.n	d966 <_dtoa_r+0x5b2>
    d9ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    d9f0:	9a08      	ldr	r2, [sp, #32]
    d9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d9f4:	9806      	ldr	r0, [sp, #24]
    d9f6:	9907      	ldr	r1, [sp, #28]
    d9f8:	f7fc f9e8 	bl	9dcc <__aeabi_ddiv>
    d9fc:	f7fd fbd0 	bl	b1a0 <__aeabi_d2iz>
    da00:	0004      	movs	r4, r0
    da02:	f7fd fc01 	bl	b208 <__aeabi_i2d>
    da06:	9a08      	ldr	r2, [sp, #32]
    da08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da0a:	f7fc fe13 	bl	a634 <__aeabi_dmul>
    da0e:	000b      	movs	r3, r1
    da10:	0002      	movs	r2, r0
    da12:	9806      	ldr	r0, [sp, #24]
    da14:	9907      	ldr	r1, [sp, #28]
    da16:	f7fd f88d 	bl	ab34 <__aeabi_dsub>
    da1a:	0023      	movs	r3, r4
    da1c:	3330      	adds	r3, #48	; 0x30
    da1e:	7033      	strb	r3, [r6, #0]
    da20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    da22:	1c75      	adds	r5, r6, #1
    da24:	1aeb      	subs	r3, r5, r3
    da26:	429f      	cmp	r7, r3
    da28:	d14c      	bne.n	dac4 <_dtoa_r+0x710>
    da2a:	0002      	movs	r2, r0
    da2c:	000b      	movs	r3, r1
    da2e:	f7fb febd 	bl	97ac <__aeabi_dadd>
    da32:	0006      	movs	r6, r0
    da34:	000f      	movs	r7, r1
    da36:	0002      	movs	r2, r0
    da38:	000b      	movs	r3, r1
    da3a:	9808      	ldr	r0, [sp, #32]
    da3c:	9909      	ldr	r1, [sp, #36]	; 0x24
    da3e:	f7fa ff11 	bl	8864 <__aeabi_dcmplt>
    da42:	2800      	cmp	r0, #0
    da44:	d12c      	bne.n	daa0 <_dtoa_r+0x6ec>
    da46:	9808      	ldr	r0, [sp, #32]
    da48:	9909      	ldr	r1, [sp, #36]	; 0x24
    da4a:	0032      	movs	r2, r6
    da4c:	003b      	movs	r3, r7
    da4e:	f7fa ff03 	bl	8858 <__aeabi_dcmpeq>
    da52:	2800      	cmp	r0, #0
    da54:	d001      	beq.n	da5a <_dtoa_r+0x6a6>
    da56:	07e3      	lsls	r3, r4, #31
    da58:	d422      	bmi.n	daa0 <_dtoa_r+0x6ec>
    da5a:	9905      	ldr	r1, [sp, #20]
    da5c:	9804      	ldr	r0, [sp, #16]
    da5e:	f000 fd22 	bl	e4a6 <_Bfree>
    da62:	2300      	movs	r3, #0
    da64:	702b      	strb	r3, [r5, #0]
    da66:	9b03      	ldr	r3, [sp, #12]
    da68:	9a24      	ldr	r2, [sp, #144]	; 0x90
    da6a:	3301      	adds	r3, #1
    da6c:	6013      	str	r3, [r2, #0]
    da6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    da70:	2b00      	cmp	r3, #0
    da72:	d100      	bne.n	da76 <_dtoa_r+0x6c2>
    da74:	e275      	b.n	df62 <_dtoa_r+0xbae>
    da76:	601d      	str	r5, [r3, #0]
    da78:	e273      	b.n	df62 <_dtoa_r+0xbae>
    da7a:	46c0      	nop			; (mov r8, r8)
    da7c:	00011290 	.word	0x00011290
    da80:	00011268 	.word	0x00011268
    da84:	3ff00000 	.word	0x3ff00000
    da88:	40240000 	.word	0x40240000
    da8c:	401c0000 	.word	0x401c0000
    da90:	fcc00000 	.word	0xfcc00000
    da94:	40140000 	.word	0x40140000
    da98:	7cc00000 	.word	0x7cc00000
    da9c:	3fe00000 	.word	0x3fe00000
    daa0:	9e03      	ldr	r6, [sp, #12]
    daa2:	1e6b      	subs	r3, r5, #1
    daa4:	781a      	ldrb	r2, [r3, #0]
    daa6:	2a39      	cmp	r2, #57	; 0x39
    daa8:	d106      	bne.n	dab8 <_dtoa_r+0x704>
    daaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    daac:	429a      	cmp	r2, r3
    daae:	d107      	bne.n	dac0 <_dtoa_r+0x70c>
    dab0:	2330      	movs	r3, #48	; 0x30
    dab2:	7013      	strb	r3, [r2, #0]
    dab4:	0013      	movs	r3, r2
    dab6:	3601      	adds	r6, #1
    dab8:	781a      	ldrb	r2, [r3, #0]
    daba:	3201      	adds	r2, #1
    dabc:	701a      	strb	r2, [r3, #0]
    dabe:	e78a      	b.n	d9d6 <_dtoa_r+0x622>
    dac0:	001d      	movs	r5, r3
    dac2:	e7ee      	b.n	daa2 <_dtoa_r+0x6ee>
    dac4:	2200      	movs	r2, #0
    dac6:	4bcf      	ldr	r3, [pc, #828]	; (de04 <_dtoa_r+0xa50>)
    dac8:	f7fc fdb4 	bl	a634 <__aeabi_dmul>
    dacc:	2200      	movs	r2, #0
    dace:	2300      	movs	r3, #0
    dad0:	9006      	str	r0, [sp, #24]
    dad2:	9107      	str	r1, [sp, #28]
    dad4:	002e      	movs	r6, r5
    dad6:	f7fa febf 	bl	8858 <__aeabi_dcmpeq>
    dada:	2800      	cmp	r0, #0
    dadc:	d100      	bne.n	dae0 <_dtoa_r+0x72c>
    dade:	e787      	b.n	d9f0 <_dtoa_r+0x63c>
    dae0:	e7bb      	b.n	da5a <_dtoa_r+0x6a6>
    dae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dae4:	2a00      	cmp	r2, #0
    dae6:	d100      	bne.n	daea <_dtoa_r+0x736>
    dae8:	e087      	b.n	dbfa <_dtoa_r+0x846>
    daea:	9a22      	ldr	r2, [sp, #136]	; 0x88
    daec:	2a01      	cmp	r2, #1
    daee:	dc6e      	bgt.n	dbce <_dtoa_r+0x81a>
    daf0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    daf2:	2a00      	cmp	r2, #0
    daf4:	d067      	beq.n	dbc6 <_dtoa_r+0x812>
    daf6:	4ac4      	ldr	r2, [pc, #784]	; (de08 <_dtoa_r+0xa54>)
    daf8:	189b      	adds	r3, r3, r2
    dafa:	9d08      	ldr	r5, [sp, #32]
    dafc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    dafe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    db00:	2101      	movs	r1, #1
    db02:	18d2      	adds	r2, r2, r3
    db04:	920b      	str	r2, [sp, #44]	; 0x2c
    db06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db08:	9804      	ldr	r0, [sp, #16]
    db0a:	18d3      	adds	r3, r2, r3
    db0c:	930c      	str	r3, [sp, #48]	; 0x30
    db0e:	f000 fd68 	bl	e5e2 <__i2b>
    db12:	0006      	movs	r6, r0
    db14:	2c00      	cmp	r4, #0
    db16:	dd0e      	ble.n	db36 <_dtoa_r+0x782>
    db18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    db1a:	2b00      	cmp	r3, #0
    db1c:	dd0b      	ble.n	db36 <_dtoa_r+0x782>
    db1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db20:	0023      	movs	r3, r4
    db22:	4294      	cmp	r4, r2
    db24:	dd00      	ble.n	db28 <_dtoa_r+0x774>
    db26:	0013      	movs	r3, r2
    db28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    db2a:	1ae4      	subs	r4, r4, r3
    db2c:	1ad2      	subs	r2, r2, r3
    db2e:	920b      	str	r2, [sp, #44]	; 0x2c
    db30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db32:	1ad3      	subs	r3, r2, r3
    db34:	930c      	str	r3, [sp, #48]	; 0x30
    db36:	9b08      	ldr	r3, [sp, #32]
    db38:	2b00      	cmp	r3, #0
    db3a:	d01e      	beq.n	db7a <_dtoa_r+0x7c6>
    db3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db3e:	2b00      	cmp	r3, #0
    db40:	d05f      	beq.n	dc02 <_dtoa_r+0x84e>
    db42:	2d00      	cmp	r5, #0
    db44:	dd11      	ble.n	db6a <_dtoa_r+0x7b6>
    db46:	0031      	movs	r1, r6
    db48:	002a      	movs	r2, r5
    db4a:	9804      	ldr	r0, [sp, #16]
    db4c:	f000 fde2 	bl	e714 <__pow5mult>
    db50:	9a05      	ldr	r2, [sp, #20]
    db52:	0001      	movs	r1, r0
    db54:	0006      	movs	r6, r0
    db56:	9804      	ldr	r0, [sp, #16]
    db58:	f000 fd4c 	bl	e5f4 <__multiply>
    db5c:	9905      	ldr	r1, [sp, #20]
    db5e:	9010      	str	r0, [sp, #64]	; 0x40
    db60:	9804      	ldr	r0, [sp, #16]
    db62:	f000 fca0 	bl	e4a6 <_Bfree>
    db66:	9b10      	ldr	r3, [sp, #64]	; 0x40
    db68:	9305      	str	r3, [sp, #20]
    db6a:	9b08      	ldr	r3, [sp, #32]
    db6c:	1b5a      	subs	r2, r3, r5
    db6e:	d004      	beq.n	db7a <_dtoa_r+0x7c6>
    db70:	9905      	ldr	r1, [sp, #20]
    db72:	9804      	ldr	r0, [sp, #16]
    db74:	f000 fdce 	bl	e714 <__pow5mult>
    db78:	9005      	str	r0, [sp, #20]
    db7a:	2101      	movs	r1, #1
    db7c:	9804      	ldr	r0, [sp, #16]
    db7e:	f000 fd30 	bl	e5e2 <__i2b>
    db82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db84:	9008      	str	r0, [sp, #32]
    db86:	2b00      	cmp	r3, #0
    db88:	dd3d      	ble.n	dc06 <_dtoa_r+0x852>
    db8a:	001a      	movs	r2, r3
    db8c:	0001      	movs	r1, r0
    db8e:	9804      	ldr	r0, [sp, #16]
    db90:	f000 fdc0 	bl	e714 <__pow5mult>
    db94:	9b22      	ldr	r3, [sp, #136]	; 0x88
    db96:	9008      	str	r0, [sp, #32]
    db98:	2500      	movs	r5, #0
    db9a:	2b01      	cmp	r3, #1
    db9c:	dc3b      	bgt.n	dc16 <_dtoa_r+0x862>
    db9e:	2500      	movs	r5, #0
    dba0:	9b06      	ldr	r3, [sp, #24]
    dba2:	42ab      	cmp	r3, r5
    dba4:	d133      	bne.n	dc0e <_dtoa_r+0x85a>
    dba6:	9b07      	ldr	r3, [sp, #28]
    dba8:	031b      	lsls	r3, r3, #12
    dbaa:	42ab      	cmp	r3, r5
    dbac:	d12f      	bne.n	dc0e <_dtoa_r+0x85a>
    dbae:	9b19      	ldr	r3, [sp, #100]	; 0x64
    dbb0:	9a07      	ldr	r2, [sp, #28]
    dbb2:	4213      	tst	r3, r2
    dbb4:	d02b      	beq.n	dc0e <_dtoa_r+0x85a>
    dbb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dbb8:	3501      	adds	r5, #1
    dbba:	3301      	adds	r3, #1
    dbbc:	930b      	str	r3, [sp, #44]	; 0x2c
    dbbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dbc0:	3301      	adds	r3, #1
    dbc2:	930c      	str	r3, [sp, #48]	; 0x30
    dbc4:	e023      	b.n	dc0e <_dtoa_r+0x85a>
    dbc6:	2336      	movs	r3, #54	; 0x36
    dbc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    dbca:	1a9b      	subs	r3, r3, r2
    dbcc:	e795      	b.n	dafa <_dtoa_r+0x746>
    dbce:	9b08      	ldr	r3, [sp, #32]
    dbd0:	1e7d      	subs	r5, r7, #1
    dbd2:	42ab      	cmp	r3, r5
    dbd4:	db06      	blt.n	dbe4 <_dtoa_r+0x830>
    dbd6:	1b5d      	subs	r5, r3, r5
    dbd8:	2f00      	cmp	r7, #0
    dbda:	da0b      	bge.n	dbf4 <_dtoa_r+0x840>
    dbdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dbde:	1bdc      	subs	r4, r3, r7
    dbe0:	2300      	movs	r3, #0
    dbe2:	e78c      	b.n	dafe <_dtoa_r+0x74a>
    dbe4:	9b08      	ldr	r3, [sp, #32]
    dbe6:	9508      	str	r5, [sp, #32]
    dbe8:	1aea      	subs	r2, r5, r3
    dbea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dbec:	2500      	movs	r5, #0
    dbee:	189b      	adds	r3, r3, r2
    dbf0:	930f      	str	r3, [sp, #60]	; 0x3c
    dbf2:	e7f1      	b.n	dbd8 <_dtoa_r+0x824>
    dbf4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    dbf6:	003b      	movs	r3, r7
    dbf8:	e781      	b.n	dafe <_dtoa_r+0x74a>
    dbfa:	9d08      	ldr	r5, [sp, #32]
    dbfc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    dbfe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    dc00:	e788      	b.n	db14 <_dtoa_r+0x760>
    dc02:	9a08      	ldr	r2, [sp, #32]
    dc04:	e7b4      	b.n	db70 <_dtoa_r+0x7bc>
    dc06:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dc08:	2500      	movs	r5, #0
    dc0a:	2b01      	cmp	r3, #1
    dc0c:	ddc7      	ble.n	db9e <_dtoa_r+0x7ea>
    dc0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dc10:	2001      	movs	r0, #1
    dc12:	2b00      	cmp	r3, #0
    dc14:	d00b      	beq.n	dc2e <_dtoa_r+0x87a>
    dc16:	9b08      	ldr	r3, [sp, #32]
    dc18:	9a08      	ldr	r2, [sp, #32]
    dc1a:	691b      	ldr	r3, [r3, #16]
    dc1c:	930f      	str	r3, [sp, #60]	; 0x3c
    dc1e:	3303      	adds	r3, #3
    dc20:	009b      	lsls	r3, r3, #2
    dc22:	18d3      	adds	r3, r2, r3
    dc24:	6858      	ldr	r0, [r3, #4]
    dc26:	f000 fc93 	bl	e550 <__hi0bits>
    dc2a:	2320      	movs	r3, #32
    dc2c:	1a18      	subs	r0, r3, r0
    dc2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dc30:	18c0      	adds	r0, r0, r3
    dc32:	231f      	movs	r3, #31
    dc34:	4018      	ands	r0, r3
    dc36:	d100      	bne.n	dc3a <_dtoa_r+0x886>
    dc38:	e0ab      	b.n	dd92 <_dtoa_r+0x9de>
    dc3a:	3301      	adds	r3, #1
    dc3c:	1a1b      	subs	r3, r3, r0
    dc3e:	2b04      	cmp	r3, #4
    dc40:	dc00      	bgt.n	dc44 <_dtoa_r+0x890>
    dc42:	e09b      	b.n	dd7c <_dtoa_r+0x9c8>
    dc44:	231c      	movs	r3, #28
    dc46:	1a18      	subs	r0, r3, r0
    dc48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc4a:	1824      	adds	r4, r4, r0
    dc4c:	181b      	adds	r3, r3, r0
    dc4e:	930b      	str	r3, [sp, #44]	; 0x2c
    dc50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dc52:	181b      	adds	r3, r3, r0
    dc54:	930c      	str	r3, [sp, #48]	; 0x30
    dc56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc58:	2b00      	cmp	r3, #0
    dc5a:	dd05      	ble.n	dc68 <_dtoa_r+0x8b4>
    dc5c:	001a      	movs	r2, r3
    dc5e:	9905      	ldr	r1, [sp, #20]
    dc60:	9804      	ldr	r0, [sp, #16]
    dc62:	f000 fda9 	bl	e7b8 <__lshift>
    dc66:	9005      	str	r0, [sp, #20]
    dc68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dc6a:	2b00      	cmp	r3, #0
    dc6c:	dd05      	ble.n	dc7a <_dtoa_r+0x8c6>
    dc6e:	001a      	movs	r2, r3
    dc70:	9908      	ldr	r1, [sp, #32]
    dc72:	9804      	ldr	r0, [sp, #16]
    dc74:	f000 fda0 	bl	e7b8 <__lshift>
    dc78:	9008      	str	r0, [sp, #32]
    dc7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	d100      	bne.n	dc82 <_dtoa_r+0x8ce>
    dc80:	e089      	b.n	dd96 <_dtoa_r+0x9e2>
    dc82:	9908      	ldr	r1, [sp, #32]
    dc84:	9805      	ldr	r0, [sp, #20]
    dc86:	f000 fde8 	bl	e85a <__mcmp>
    dc8a:	2800      	cmp	r0, #0
    dc8c:	db00      	blt.n	dc90 <_dtoa_r+0x8dc>
    dc8e:	e082      	b.n	dd96 <_dtoa_r+0x9e2>
    dc90:	9b03      	ldr	r3, [sp, #12]
    dc92:	220a      	movs	r2, #10
    dc94:	3b01      	subs	r3, #1
    dc96:	9303      	str	r3, [sp, #12]
    dc98:	9905      	ldr	r1, [sp, #20]
    dc9a:	2300      	movs	r3, #0
    dc9c:	9804      	ldr	r0, [sp, #16]
    dc9e:	f000 fc1b 	bl	e4d8 <__multadd>
    dca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dca4:	9005      	str	r0, [sp, #20]
    dca6:	2b00      	cmp	r3, #0
    dca8:	d100      	bne.n	dcac <_dtoa_r+0x8f8>
    dcaa:	e15d      	b.n	df68 <_dtoa_r+0xbb4>
    dcac:	2300      	movs	r3, #0
    dcae:	0031      	movs	r1, r6
    dcb0:	220a      	movs	r2, #10
    dcb2:	9804      	ldr	r0, [sp, #16]
    dcb4:	f000 fc10 	bl	e4d8 <__multadd>
    dcb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dcba:	0006      	movs	r6, r0
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	dc02      	bgt.n	dcc6 <_dtoa_r+0x912>
    dcc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dcc2:	2b02      	cmp	r3, #2
    dcc4:	dc6d      	bgt.n	dda2 <_dtoa_r+0x9ee>
    dcc6:	2c00      	cmp	r4, #0
    dcc8:	dd05      	ble.n	dcd6 <_dtoa_r+0x922>
    dcca:	0031      	movs	r1, r6
    dccc:	0022      	movs	r2, r4
    dcce:	9804      	ldr	r0, [sp, #16]
    dcd0:	f000 fd72 	bl	e7b8 <__lshift>
    dcd4:	0006      	movs	r6, r0
    dcd6:	0030      	movs	r0, r6
    dcd8:	2d00      	cmp	r5, #0
    dcda:	d011      	beq.n	dd00 <_dtoa_r+0x94c>
    dcdc:	6871      	ldr	r1, [r6, #4]
    dcde:	9804      	ldr	r0, [sp, #16]
    dce0:	f000 fba9 	bl	e436 <_Balloc>
    dce4:	0031      	movs	r1, r6
    dce6:	0004      	movs	r4, r0
    dce8:	6933      	ldr	r3, [r6, #16]
    dcea:	310c      	adds	r1, #12
    dcec:	1c9a      	adds	r2, r3, #2
    dcee:	0092      	lsls	r2, r2, #2
    dcf0:	300c      	adds	r0, #12
    dcf2:	f7fd fd7a 	bl	b7ea <memcpy>
    dcf6:	2201      	movs	r2, #1
    dcf8:	0021      	movs	r1, r4
    dcfa:	9804      	ldr	r0, [sp, #16]
    dcfc:	f000 fd5c 	bl	e7b8 <__lshift>
    dd00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    dd02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dd04:	3f01      	subs	r7, #1
    dd06:	930b      	str	r3, [sp, #44]	; 0x2c
    dd08:	19db      	adds	r3, r3, r7
    dd0a:	0037      	movs	r7, r6
    dd0c:	0006      	movs	r6, r0
    dd0e:	930f      	str	r3, [sp, #60]	; 0x3c
    dd10:	9908      	ldr	r1, [sp, #32]
    dd12:	9805      	ldr	r0, [sp, #20]
    dd14:	f7ff fac9 	bl	d2aa <quorem>
    dd18:	0039      	movs	r1, r7
    dd1a:	900d      	str	r0, [sp, #52]	; 0x34
    dd1c:	0004      	movs	r4, r0
    dd1e:	9805      	ldr	r0, [sp, #20]
    dd20:	f000 fd9b 	bl	e85a <__mcmp>
    dd24:	0032      	movs	r2, r6
    dd26:	900e      	str	r0, [sp, #56]	; 0x38
    dd28:	9908      	ldr	r1, [sp, #32]
    dd2a:	9804      	ldr	r0, [sp, #16]
    dd2c:	f000 fdae 	bl	e88c <__mdiff>
    dd30:	2301      	movs	r3, #1
    dd32:	930c      	str	r3, [sp, #48]	; 0x30
    dd34:	68c3      	ldr	r3, [r0, #12]
    dd36:	3430      	adds	r4, #48	; 0x30
    dd38:	0005      	movs	r5, r0
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d104      	bne.n	dd48 <_dtoa_r+0x994>
    dd3e:	0001      	movs	r1, r0
    dd40:	9805      	ldr	r0, [sp, #20]
    dd42:	f000 fd8a 	bl	e85a <__mcmp>
    dd46:	900c      	str	r0, [sp, #48]	; 0x30
    dd48:	0029      	movs	r1, r5
    dd4a:	9804      	ldr	r0, [sp, #16]
    dd4c:	f000 fbab 	bl	e4a6 <_Bfree>
    dd50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dd52:	9a22      	ldr	r2, [sp, #136]	; 0x88
    dd54:	4313      	orrs	r3, r2
    dd56:	d000      	beq.n	dd5a <_dtoa_r+0x9a6>
    dd58:	e089      	b.n	de6e <_dtoa_r+0xaba>
    dd5a:	9a06      	ldr	r2, [sp, #24]
    dd5c:	3301      	adds	r3, #1
    dd5e:	4213      	tst	r3, r2
    dd60:	d000      	beq.n	dd64 <_dtoa_r+0x9b0>
    dd62:	e084      	b.n	de6e <_dtoa_r+0xaba>
    dd64:	2c39      	cmp	r4, #57	; 0x39
    dd66:	d100      	bne.n	dd6a <_dtoa_r+0x9b6>
    dd68:	e0a3      	b.n	deb2 <_dtoa_r+0xafe>
    dd6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	dd01      	ble.n	dd74 <_dtoa_r+0x9c0>
    dd70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    dd72:	3431      	adds	r4, #49	; 0x31
    dd74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd76:	1c5d      	adds	r5, r3, #1
    dd78:	701c      	strb	r4, [r3, #0]
    dd7a:	e027      	b.n	ddcc <_dtoa_r+0xa18>
    dd7c:	2b04      	cmp	r3, #4
    dd7e:	d100      	bne.n	dd82 <_dtoa_r+0x9ce>
    dd80:	e769      	b.n	dc56 <_dtoa_r+0x8a2>
    dd82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dd84:	331c      	adds	r3, #28
    dd86:	18d2      	adds	r2, r2, r3
    dd88:	920b      	str	r2, [sp, #44]	; 0x2c
    dd8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dd8c:	18e4      	adds	r4, r4, r3
    dd8e:	18d3      	adds	r3, r2, r3
    dd90:	e760      	b.n	dc54 <_dtoa_r+0x8a0>
    dd92:	0003      	movs	r3, r0
    dd94:	e7f5      	b.n	dd82 <_dtoa_r+0x9ce>
    dd96:	2f00      	cmp	r7, #0
    dd98:	dc3c      	bgt.n	de14 <_dtoa_r+0xa60>
    dd9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dd9c:	2b02      	cmp	r3, #2
    dd9e:	dd39      	ble.n	de14 <_dtoa_r+0xa60>
    dda0:	970d      	str	r7, [sp, #52]	; 0x34
    dda2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dda4:	2b00      	cmp	r3, #0
    dda6:	d10c      	bne.n	ddc2 <_dtoa_r+0xa0e>
    dda8:	9908      	ldr	r1, [sp, #32]
    ddaa:	2205      	movs	r2, #5
    ddac:	9804      	ldr	r0, [sp, #16]
    ddae:	f000 fb93 	bl	e4d8 <__multadd>
    ddb2:	9008      	str	r0, [sp, #32]
    ddb4:	0001      	movs	r1, r0
    ddb6:	9805      	ldr	r0, [sp, #20]
    ddb8:	f000 fd4f 	bl	e85a <__mcmp>
    ddbc:	2800      	cmp	r0, #0
    ddbe:	dd00      	ble.n	ddc2 <_dtoa_r+0xa0e>
    ddc0:	e55a      	b.n	d878 <_dtoa_r+0x4c4>
    ddc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ddc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ddc6:	43db      	mvns	r3, r3
    ddc8:	9303      	str	r3, [sp, #12]
    ddca:	2700      	movs	r7, #0
    ddcc:	9908      	ldr	r1, [sp, #32]
    ddce:	9804      	ldr	r0, [sp, #16]
    ddd0:	f000 fb69 	bl	e4a6 <_Bfree>
    ddd4:	2e00      	cmp	r6, #0
    ddd6:	d100      	bne.n	ddda <_dtoa_r+0xa26>
    ddd8:	e63f      	b.n	da5a <_dtoa_r+0x6a6>
    ddda:	2f00      	cmp	r7, #0
    dddc:	d005      	beq.n	ddea <_dtoa_r+0xa36>
    ddde:	42b7      	cmp	r7, r6
    dde0:	d003      	beq.n	ddea <_dtoa_r+0xa36>
    dde2:	0039      	movs	r1, r7
    dde4:	9804      	ldr	r0, [sp, #16]
    dde6:	f000 fb5e 	bl	e4a6 <_Bfree>
    ddea:	0031      	movs	r1, r6
    ddec:	9804      	ldr	r0, [sp, #16]
    ddee:	f000 fb5a 	bl	e4a6 <_Bfree>
    ddf2:	e632      	b.n	da5a <_dtoa_r+0x6a6>
    ddf4:	9508      	str	r5, [sp, #32]
    ddf6:	002e      	movs	r6, r5
    ddf8:	e7e3      	b.n	ddc2 <_dtoa_r+0xa0e>
    ddfa:	2300      	movs	r3, #0
    ddfc:	9308      	str	r3, [sp, #32]
    ddfe:	001e      	movs	r6, r3
    de00:	e7df      	b.n	ddc2 <_dtoa_r+0xa0e>
    de02:	46c0      	nop			; (mov r8, r8)
    de04:	40240000 	.word	0x40240000
    de08:	00000433 	.word	0x00000433
    de0c:	9603      	str	r6, [sp, #12]
    de0e:	9508      	str	r5, [sp, #32]
    de10:	002e      	movs	r6, r5
    de12:	e531      	b.n	d878 <_dtoa_r+0x4c4>
    de14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de16:	970d      	str	r7, [sp, #52]	; 0x34
    de18:	2b00      	cmp	r3, #0
    de1a:	d000      	beq.n	de1e <_dtoa_r+0xa6a>
    de1c:	e753      	b.n	dcc6 <_dtoa_r+0x912>
    de1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    de20:	9908      	ldr	r1, [sp, #32]
    de22:	9805      	ldr	r0, [sp, #20]
    de24:	f7ff fa41 	bl	d2aa <quorem>
    de28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    de2a:	3030      	adds	r0, #48	; 0x30
    de2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    de2e:	7028      	strb	r0, [r5, #0]
    de30:	3501      	adds	r5, #1
    de32:	0004      	movs	r4, r0
    de34:	1aeb      	subs	r3, r5, r3
    de36:	429a      	cmp	r2, r3
    de38:	dc78      	bgt.n	df2c <_dtoa_r+0xb78>
    de3a:	1e15      	subs	r5, r2, #0
    de3c:	dc00      	bgt.n	de40 <_dtoa_r+0xa8c>
    de3e:	2501      	movs	r5, #1
    de40:	2700      	movs	r7, #0
    de42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    de44:	195d      	adds	r5, r3, r5
    de46:	9905      	ldr	r1, [sp, #20]
    de48:	2201      	movs	r2, #1
    de4a:	9804      	ldr	r0, [sp, #16]
    de4c:	f000 fcb4 	bl	e7b8 <__lshift>
    de50:	9908      	ldr	r1, [sp, #32]
    de52:	9005      	str	r0, [sp, #20]
    de54:	f000 fd01 	bl	e85a <__mcmp>
    de58:	2800      	cmp	r0, #0
    de5a:	dc2f      	bgt.n	debc <_dtoa_r+0xb08>
    de5c:	d101      	bne.n	de62 <_dtoa_r+0xaae>
    de5e:	07e3      	lsls	r3, r4, #31
    de60:	d42c      	bmi.n	debc <_dtoa_r+0xb08>
    de62:	1e6b      	subs	r3, r5, #1
    de64:	781a      	ldrb	r2, [r3, #0]
    de66:	2a30      	cmp	r2, #48	; 0x30
    de68:	d1b0      	bne.n	ddcc <_dtoa_r+0xa18>
    de6a:	001d      	movs	r5, r3
    de6c:	e7f9      	b.n	de62 <_dtoa_r+0xaae>
    de6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de70:	2b00      	cmp	r3, #0
    de72:	db07      	blt.n	de84 <_dtoa_r+0xad0>
    de74:	001d      	movs	r5, r3
    de76:	9b22      	ldr	r3, [sp, #136]	; 0x88
    de78:	431d      	orrs	r5, r3
    de7a:	d126      	bne.n	deca <_dtoa_r+0xb16>
    de7c:	2301      	movs	r3, #1
    de7e:	9a06      	ldr	r2, [sp, #24]
    de80:	4213      	tst	r3, r2
    de82:	d122      	bne.n	deca <_dtoa_r+0xb16>
    de84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    de86:	2b00      	cmp	r3, #0
    de88:	dc00      	bgt.n	de8c <_dtoa_r+0xad8>
    de8a:	e773      	b.n	dd74 <_dtoa_r+0x9c0>
    de8c:	9905      	ldr	r1, [sp, #20]
    de8e:	2201      	movs	r2, #1
    de90:	9804      	ldr	r0, [sp, #16]
    de92:	f000 fc91 	bl	e7b8 <__lshift>
    de96:	9908      	ldr	r1, [sp, #32]
    de98:	9005      	str	r0, [sp, #20]
    de9a:	f000 fcde 	bl	e85a <__mcmp>
    de9e:	2800      	cmp	r0, #0
    dea0:	dc04      	bgt.n	deac <_dtoa_r+0xaf8>
    dea2:	d000      	beq.n	dea6 <_dtoa_r+0xaf2>
    dea4:	e766      	b.n	dd74 <_dtoa_r+0x9c0>
    dea6:	07e3      	lsls	r3, r4, #31
    dea8:	d400      	bmi.n	deac <_dtoa_r+0xaf8>
    deaa:	e763      	b.n	dd74 <_dtoa_r+0x9c0>
    deac:	2c39      	cmp	r4, #57	; 0x39
    deae:	d000      	beq.n	deb2 <_dtoa_r+0xafe>
    deb0:	e75e      	b.n	dd70 <_dtoa_r+0x9bc>
    deb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    deb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    deb6:	1c5d      	adds	r5, r3, #1
    deb8:	2339      	movs	r3, #57	; 0x39
    deba:	7013      	strb	r3, [r2, #0]
    debc:	1e6b      	subs	r3, r5, #1
    debe:	781a      	ldrb	r2, [r3, #0]
    dec0:	2a39      	cmp	r2, #57	; 0x39
    dec2:	d03b      	beq.n	df3c <_dtoa_r+0xb88>
    dec4:	3201      	adds	r2, #1
    dec6:	701a      	strb	r2, [r3, #0]
    dec8:	e780      	b.n	ddcc <_dtoa_r+0xa18>
    deca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    decc:	3301      	adds	r3, #1
    dece:	930d      	str	r3, [sp, #52]	; 0x34
    ded0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ded2:	2b00      	cmp	r3, #0
    ded4:	dd05      	ble.n	dee2 <_dtoa_r+0xb2e>
    ded6:	2c39      	cmp	r4, #57	; 0x39
    ded8:	d0eb      	beq.n	deb2 <_dtoa_r+0xafe>
    deda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    dedc:	3401      	adds	r4, #1
    dede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dee0:	e74a      	b.n	dd78 <_dtoa_r+0x9c4>
    dee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dee4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dee6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    dee8:	701c      	strb	r4, [r3, #0]
    deea:	4293      	cmp	r3, r2
    deec:	d0ab      	beq.n	de46 <_dtoa_r+0xa92>
    deee:	2300      	movs	r3, #0
    def0:	220a      	movs	r2, #10
    def2:	9905      	ldr	r1, [sp, #20]
    def4:	9804      	ldr	r0, [sp, #16]
    def6:	f000 faef 	bl	e4d8 <__multadd>
    defa:	2300      	movs	r3, #0
    defc:	9005      	str	r0, [sp, #20]
    defe:	220a      	movs	r2, #10
    df00:	0039      	movs	r1, r7
    df02:	9804      	ldr	r0, [sp, #16]
    df04:	42b7      	cmp	r7, r6
    df06:	d106      	bne.n	df16 <_dtoa_r+0xb62>
    df08:	f000 fae6 	bl	e4d8 <__multadd>
    df0c:	0007      	movs	r7, r0
    df0e:	0006      	movs	r6, r0
    df10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    df12:	930b      	str	r3, [sp, #44]	; 0x2c
    df14:	e6fc      	b.n	dd10 <_dtoa_r+0x95c>
    df16:	f000 fadf 	bl	e4d8 <__multadd>
    df1a:	0031      	movs	r1, r6
    df1c:	0007      	movs	r7, r0
    df1e:	2300      	movs	r3, #0
    df20:	220a      	movs	r2, #10
    df22:	9804      	ldr	r0, [sp, #16]
    df24:	f000 fad8 	bl	e4d8 <__multadd>
    df28:	0006      	movs	r6, r0
    df2a:	e7f1      	b.n	df10 <_dtoa_r+0xb5c>
    df2c:	2300      	movs	r3, #0
    df2e:	220a      	movs	r2, #10
    df30:	9905      	ldr	r1, [sp, #20]
    df32:	9804      	ldr	r0, [sp, #16]
    df34:	f000 fad0 	bl	e4d8 <__multadd>
    df38:	9005      	str	r0, [sp, #20]
    df3a:	e771      	b.n	de20 <_dtoa_r+0xa6c>
    df3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    df3e:	429a      	cmp	r2, r3
    df40:	d105      	bne.n	df4e <_dtoa_r+0xb9a>
    df42:	9b03      	ldr	r3, [sp, #12]
    df44:	3301      	adds	r3, #1
    df46:	9303      	str	r3, [sp, #12]
    df48:	2331      	movs	r3, #49	; 0x31
    df4a:	7013      	strb	r3, [r2, #0]
    df4c:	e73e      	b.n	ddcc <_dtoa_r+0xa18>
    df4e:	001d      	movs	r5, r3
    df50:	e7b4      	b.n	debc <_dtoa_r+0xb08>
    df52:	4b0a      	ldr	r3, [pc, #40]	; (df7c <_dtoa_r+0xbc8>)
    df54:	9a26      	ldr	r2, [sp, #152]	; 0x98
    df56:	930a      	str	r3, [sp, #40]	; 0x28
    df58:	4b09      	ldr	r3, [pc, #36]	; (df80 <_dtoa_r+0xbcc>)
    df5a:	2a00      	cmp	r2, #0
    df5c:	d001      	beq.n	df62 <_dtoa_r+0xbae>
    df5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    df60:	6013      	str	r3, [r2, #0]
    df62:	980a      	ldr	r0, [sp, #40]	; 0x28
    df64:	b01d      	add	sp, #116	; 0x74
    df66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    df6a:	2b00      	cmp	r3, #0
    df6c:	dd00      	ble.n	df70 <_dtoa_r+0xbbc>
    df6e:	e756      	b.n	de1e <_dtoa_r+0xa6a>
    df70:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df72:	2b02      	cmp	r3, #2
    df74:	dc00      	bgt.n	df78 <_dtoa_r+0xbc4>
    df76:	e752      	b.n	de1e <_dtoa_r+0xa6a>
    df78:	e713      	b.n	dda2 <_dtoa_r+0x9ee>
    df7a:	46c0      	nop			; (mov r8, r8)
    df7c:	00011198 	.word	0x00011198
    df80:	000111a0 	.word	0x000111a0

0000df84 <__sflush_r>:
    df84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df86:	898a      	ldrh	r2, [r1, #12]
    df88:	0005      	movs	r5, r0
    df8a:	000c      	movs	r4, r1
    df8c:	0713      	lsls	r3, r2, #28
    df8e:	d460      	bmi.n	e052 <__sflush_r+0xce>
    df90:	684b      	ldr	r3, [r1, #4]
    df92:	2b00      	cmp	r3, #0
    df94:	dc04      	bgt.n	dfa0 <__sflush_r+0x1c>
    df96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    df98:	2b00      	cmp	r3, #0
    df9a:	dc01      	bgt.n	dfa0 <__sflush_r+0x1c>
    df9c:	2000      	movs	r0, #0
    df9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    dfa0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    dfa2:	2f00      	cmp	r7, #0
    dfa4:	d0fa      	beq.n	df9c <__sflush_r+0x18>
    dfa6:	2300      	movs	r3, #0
    dfa8:	682e      	ldr	r6, [r5, #0]
    dfaa:	602b      	str	r3, [r5, #0]
    dfac:	2380      	movs	r3, #128	; 0x80
    dfae:	015b      	lsls	r3, r3, #5
    dfb0:	401a      	ands	r2, r3
    dfb2:	d034      	beq.n	e01e <__sflush_r+0x9a>
    dfb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    dfb6:	89a3      	ldrh	r3, [r4, #12]
    dfb8:	075b      	lsls	r3, r3, #29
    dfba:	d506      	bpl.n	dfca <__sflush_r+0x46>
    dfbc:	6863      	ldr	r3, [r4, #4]
    dfbe:	1ac0      	subs	r0, r0, r3
    dfc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dfc2:	2b00      	cmp	r3, #0
    dfc4:	d001      	beq.n	dfca <__sflush_r+0x46>
    dfc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    dfc8:	1ac0      	subs	r0, r0, r3
    dfca:	0002      	movs	r2, r0
    dfcc:	6a21      	ldr	r1, [r4, #32]
    dfce:	2300      	movs	r3, #0
    dfd0:	0028      	movs	r0, r5
    dfd2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    dfd4:	47b8      	blx	r7
    dfd6:	89a1      	ldrh	r1, [r4, #12]
    dfd8:	1c43      	adds	r3, r0, #1
    dfda:	d106      	bne.n	dfea <__sflush_r+0x66>
    dfdc:	682b      	ldr	r3, [r5, #0]
    dfde:	2b1d      	cmp	r3, #29
    dfe0:	d831      	bhi.n	e046 <__sflush_r+0xc2>
    dfe2:	4a2c      	ldr	r2, [pc, #176]	; (e094 <__sflush_r+0x110>)
    dfe4:	40da      	lsrs	r2, r3
    dfe6:	07d3      	lsls	r3, r2, #31
    dfe8:	d52d      	bpl.n	e046 <__sflush_r+0xc2>
    dfea:	2300      	movs	r3, #0
    dfec:	6063      	str	r3, [r4, #4]
    dfee:	6923      	ldr	r3, [r4, #16]
    dff0:	6023      	str	r3, [r4, #0]
    dff2:	04cb      	lsls	r3, r1, #19
    dff4:	d505      	bpl.n	e002 <__sflush_r+0x7e>
    dff6:	1c43      	adds	r3, r0, #1
    dff8:	d102      	bne.n	e000 <__sflush_r+0x7c>
    dffa:	682b      	ldr	r3, [r5, #0]
    dffc:	2b00      	cmp	r3, #0
    dffe:	d100      	bne.n	e002 <__sflush_r+0x7e>
    e000:	6560      	str	r0, [r4, #84]	; 0x54
    e002:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e004:	602e      	str	r6, [r5, #0]
    e006:	2900      	cmp	r1, #0
    e008:	d0c8      	beq.n	df9c <__sflush_r+0x18>
    e00a:	0023      	movs	r3, r4
    e00c:	3344      	adds	r3, #68	; 0x44
    e00e:	4299      	cmp	r1, r3
    e010:	d002      	beq.n	e018 <__sflush_r+0x94>
    e012:	0028      	movs	r0, r5
    e014:	f7fd fe62 	bl	bcdc <_free_r>
    e018:	2000      	movs	r0, #0
    e01a:	6360      	str	r0, [r4, #52]	; 0x34
    e01c:	e7bf      	b.n	df9e <__sflush_r+0x1a>
    e01e:	2301      	movs	r3, #1
    e020:	6a21      	ldr	r1, [r4, #32]
    e022:	0028      	movs	r0, r5
    e024:	47b8      	blx	r7
    e026:	1c43      	adds	r3, r0, #1
    e028:	d1c5      	bne.n	dfb6 <__sflush_r+0x32>
    e02a:	682b      	ldr	r3, [r5, #0]
    e02c:	2b00      	cmp	r3, #0
    e02e:	d0c2      	beq.n	dfb6 <__sflush_r+0x32>
    e030:	2b1d      	cmp	r3, #29
    e032:	d001      	beq.n	e038 <__sflush_r+0xb4>
    e034:	2b16      	cmp	r3, #22
    e036:	d101      	bne.n	e03c <__sflush_r+0xb8>
    e038:	602e      	str	r6, [r5, #0]
    e03a:	e7af      	b.n	df9c <__sflush_r+0x18>
    e03c:	2340      	movs	r3, #64	; 0x40
    e03e:	89a2      	ldrh	r2, [r4, #12]
    e040:	4313      	orrs	r3, r2
    e042:	81a3      	strh	r3, [r4, #12]
    e044:	e7ab      	b.n	df9e <__sflush_r+0x1a>
    e046:	2340      	movs	r3, #64	; 0x40
    e048:	430b      	orrs	r3, r1
    e04a:	2001      	movs	r0, #1
    e04c:	81a3      	strh	r3, [r4, #12]
    e04e:	4240      	negs	r0, r0
    e050:	e7a5      	b.n	df9e <__sflush_r+0x1a>
    e052:	690f      	ldr	r7, [r1, #16]
    e054:	2f00      	cmp	r7, #0
    e056:	d0a1      	beq.n	df9c <__sflush_r+0x18>
    e058:	680b      	ldr	r3, [r1, #0]
    e05a:	600f      	str	r7, [r1, #0]
    e05c:	1bdb      	subs	r3, r3, r7
    e05e:	9301      	str	r3, [sp, #4]
    e060:	2300      	movs	r3, #0
    e062:	0792      	lsls	r2, r2, #30
    e064:	d100      	bne.n	e068 <__sflush_r+0xe4>
    e066:	694b      	ldr	r3, [r1, #20]
    e068:	60a3      	str	r3, [r4, #8]
    e06a:	9b01      	ldr	r3, [sp, #4]
    e06c:	2b00      	cmp	r3, #0
    e06e:	dc00      	bgt.n	e072 <__sflush_r+0xee>
    e070:	e794      	b.n	df9c <__sflush_r+0x18>
    e072:	9b01      	ldr	r3, [sp, #4]
    e074:	003a      	movs	r2, r7
    e076:	6a21      	ldr	r1, [r4, #32]
    e078:	0028      	movs	r0, r5
    e07a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    e07c:	47b0      	blx	r6
    e07e:	2800      	cmp	r0, #0
    e080:	dc03      	bgt.n	e08a <__sflush_r+0x106>
    e082:	2340      	movs	r3, #64	; 0x40
    e084:	89a2      	ldrh	r2, [r4, #12]
    e086:	4313      	orrs	r3, r2
    e088:	e7df      	b.n	e04a <__sflush_r+0xc6>
    e08a:	9b01      	ldr	r3, [sp, #4]
    e08c:	183f      	adds	r7, r7, r0
    e08e:	1a1b      	subs	r3, r3, r0
    e090:	9301      	str	r3, [sp, #4]
    e092:	e7ea      	b.n	e06a <__sflush_r+0xe6>
    e094:	20400001 	.word	0x20400001

0000e098 <_fflush_r>:
    e098:	690b      	ldr	r3, [r1, #16]
    e09a:	b570      	push	{r4, r5, r6, lr}
    e09c:	0005      	movs	r5, r0
    e09e:	000c      	movs	r4, r1
    e0a0:	2b00      	cmp	r3, #0
    e0a2:	d101      	bne.n	e0a8 <_fflush_r+0x10>
    e0a4:	2000      	movs	r0, #0
    e0a6:	bd70      	pop	{r4, r5, r6, pc}
    e0a8:	2800      	cmp	r0, #0
    e0aa:	d004      	beq.n	e0b6 <_fflush_r+0x1e>
    e0ac:	6983      	ldr	r3, [r0, #24]
    e0ae:	2b00      	cmp	r3, #0
    e0b0:	d101      	bne.n	e0b6 <_fflush_r+0x1e>
    e0b2:	f000 f85f 	bl	e174 <__sinit>
    e0b6:	4b0b      	ldr	r3, [pc, #44]	; (e0e4 <_fflush_r+0x4c>)
    e0b8:	429c      	cmp	r4, r3
    e0ba:	d109      	bne.n	e0d0 <_fflush_r+0x38>
    e0bc:	686c      	ldr	r4, [r5, #4]
    e0be:	220c      	movs	r2, #12
    e0c0:	5ea3      	ldrsh	r3, [r4, r2]
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d0ee      	beq.n	e0a4 <_fflush_r+0xc>
    e0c6:	0021      	movs	r1, r4
    e0c8:	0028      	movs	r0, r5
    e0ca:	f7ff ff5b 	bl	df84 <__sflush_r>
    e0ce:	e7ea      	b.n	e0a6 <_fflush_r+0xe>
    e0d0:	4b05      	ldr	r3, [pc, #20]	; (e0e8 <_fflush_r+0x50>)
    e0d2:	429c      	cmp	r4, r3
    e0d4:	d101      	bne.n	e0da <_fflush_r+0x42>
    e0d6:	68ac      	ldr	r4, [r5, #8]
    e0d8:	e7f1      	b.n	e0be <_fflush_r+0x26>
    e0da:	4b04      	ldr	r3, [pc, #16]	; (e0ec <_fflush_r+0x54>)
    e0dc:	429c      	cmp	r4, r3
    e0de:	d1ee      	bne.n	e0be <_fflush_r+0x26>
    e0e0:	68ec      	ldr	r4, [r5, #12]
    e0e2:	e7ec      	b.n	e0be <_fflush_r+0x26>
    e0e4:	000111c8 	.word	0x000111c8
    e0e8:	000111e8 	.word	0x000111e8
    e0ec:	000111a8 	.word	0x000111a8

0000e0f0 <_cleanup_r>:
    e0f0:	b510      	push	{r4, lr}
    e0f2:	4902      	ldr	r1, [pc, #8]	; (e0fc <_cleanup_r+0xc>)
    e0f4:	f000 f8b2 	bl	e25c <_fwalk_reent>
    e0f8:	bd10      	pop	{r4, pc}
    e0fa:	46c0      	nop			; (mov r8, r8)
    e0fc:	0000e099 	.word	0x0000e099

0000e100 <std.isra.0>:
    e100:	2300      	movs	r3, #0
    e102:	b510      	push	{r4, lr}
    e104:	0004      	movs	r4, r0
    e106:	6003      	str	r3, [r0, #0]
    e108:	6043      	str	r3, [r0, #4]
    e10a:	6083      	str	r3, [r0, #8]
    e10c:	8181      	strh	r1, [r0, #12]
    e10e:	6643      	str	r3, [r0, #100]	; 0x64
    e110:	81c2      	strh	r2, [r0, #14]
    e112:	6103      	str	r3, [r0, #16]
    e114:	6143      	str	r3, [r0, #20]
    e116:	6183      	str	r3, [r0, #24]
    e118:	0019      	movs	r1, r3
    e11a:	2208      	movs	r2, #8
    e11c:	305c      	adds	r0, #92	; 0x5c
    e11e:	f7fd fb7f 	bl	b820 <memset>
    e122:	4b05      	ldr	r3, [pc, #20]	; (e138 <std.isra.0+0x38>)
    e124:	6224      	str	r4, [r4, #32]
    e126:	6263      	str	r3, [r4, #36]	; 0x24
    e128:	4b04      	ldr	r3, [pc, #16]	; (e13c <std.isra.0+0x3c>)
    e12a:	62a3      	str	r3, [r4, #40]	; 0x28
    e12c:	4b04      	ldr	r3, [pc, #16]	; (e140 <std.isra.0+0x40>)
    e12e:	62e3      	str	r3, [r4, #44]	; 0x2c
    e130:	4b04      	ldr	r3, [pc, #16]	; (e144 <std.isra.0+0x44>)
    e132:	6323      	str	r3, [r4, #48]	; 0x30
    e134:	bd10      	pop	{r4, pc}
    e136:	46c0      	nop			; (mov r8, r8)
    e138:	0000ee15 	.word	0x0000ee15
    e13c:	0000ee41 	.word	0x0000ee41
    e140:	0000ee79 	.word	0x0000ee79
    e144:	0000eea5 	.word	0x0000eea5

0000e148 <__sfmoreglue>:
    e148:	b570      	push	{r4, r5, r6, lr}
    e14a:	2568      	movs	r5, #104	; 0x68
    e14c:	1e4a      	subs	r2, r1, #1
    e14e:	4355      	muls	r5, r2
    e150:	000e      	movs	r6, r1
    e152:	0029      	movs	r1, r5
    e154:	3174      	adds	r1, #116	; 0x74
    e156:	f7fd fe0b 	bl	bd70 <_malloc_r>
    e15a:	1e04      	subs	r4, r0, #0
    e15c:	d008      	beq.n	e170 <__sfmoreglue+0x28>
    e15e:	2100      	movs	r1, #0
    e160:	002a      	movs	r2, r5
    e162:	6001      	str	r1, [r0, #0]
    e164:	6046      	str	r6, [r0, #4]
    e166:	300c      	adds	r0, #12
    e168:	60a0      	str	r0, [r4, #8]
    e16a:	3268      	adds	r2, #104	; 0x68
    e16c:	f7fd fb58 	bl	b820 <memset>
    e170:	0020      	movs	r0, r4
    e172:	bd70      	pop	{r4, r5, r6, pc}

0000e174 <__sinit>:
    e174:	6983      	ldr	r3, [r0, #24]
    e176:	b513      	push	{r0, r1, r4, lr}
    e178:	0004      	movs	r4, r0
    e17a:	2b00      	cmp	r3, #0
    e17c:	d128      	bne.n	e1d0 <__sinit+0x5c>
    e17e:	6483      	str	r3, [r0, #72]	; 0x48
    e180:	64c3      	str	r3, [r0, #76]	; 0x4c
    e182:	6503      	str	r3, [r0, #80]	; 0x50
    e184:	4b13      	ldr	r3, [pc, #76]	; (e1d4 <__sinit+0x60>)
    e186:	4a14      	ldr	r2, [pc, #80]	; (e1d8 <__sinit+0x64>)
    e188:	681b      	ldr	r3, [r3, #0]
    e18a:	6282      	str	r2, [r0, #40]	; 0x28
    e18c:	9301      	str	r3, [sp, #4]
    e18e:	4298      	cmp	r0, r3
    e190:	d101      	bne.n	e196 <__sinit+0x22>
    e192:	2301      	movs	r3, #1
    e194:	6183      	str	r3, [r0, #24]
    e196:	0020      	movs	r0, r4
    e198:	f000 f820 	bl	e1dc <__sfp>
    e19c:	6060      	str	r0, [r4, #4]
    e19e:	0020      	movs	r0, r4
    e1a0:	f000 f81c 	bl	e1dc <__sfp>
    e1a4:	60a0      	str	r0, [r4, #8]
    e1a6:	0020      	movs	r0, r4
    e1a8:	f000 f818 	bl	e1dc <__sfp>
    e1ac:	2200      	movs	r2, #0
    e1ae:	60e0      	str	r0, [r4, #12]
    e1b0:	2104      	movs	r1, #4
    e1b2:	6860      	ldr	r0, [r4, #4]
    e1b4:	f7ff ffa4 	bl	e100 <std.isra.0>
    e1b8:	2201      	movs	r2, #1
    e1ba:	2109      	movs	r1, #9
    e1bc:	68a0      	ldr	r0, [r4, #8]
    e1be:	f7ff ff9f 	bl	e100 <std.isra.0>
    e1c2:	2202      	movs	r2, #2
    e1c4:	2112      	movs	r1, #18
    e1c6:	68e0      	ldr	r0, [r4, #12]
    e1c8:	f7ff ff9a 	bl	e100 <std.isra.0>
    e1cc:	2301      	movs	r3, #1
    e1ce:	61a3      	str	r3, [r4, #24]
    e1d0:	bd13      	pop	{r0, r1, r4, pc}
    e1d2:	46c0      	nop			; (mov r8, r8)
    e1d4:	00010fac 	.word	0x00010fac
    e1d8:	0000e0f1 	.word	0x0000e0f1

0000e1dc <__sfp>:
    e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1de:	4b1e      	ldr	r3, [pc, #120]	; (e258 <__sfp+0x7c>)
    e1e0:	0007      	movs	r7, r0
    e1e2:	681e      	ldr	r6, [r3, #0]
    e1e4:	69b3      	ldr	r3, [r6, #24]
    e1e6:	2b00      	cmp	r3, #0
    e1e8:	d102      	bne.n	e1f0 <__sfp+0x14>
    e1ea:	0030      	movs	r0, r6
    e1ec:	f7ff ffc2 	bl	e174 <__sinit>
    e1f0:	3648      	adds	r6, #72	; 0x48
    e1f2:	68b4      	ldr	r4, [r6, #8]
    e1f4:	6873      	ldr	r3, [r6, #4]
    e1f6:	3b01      	subs	r3, #1
    e1f8:	d504      	bpl.n	e204 <__sfp+0x28>
    e1fa:	6833      	ldr	r3, [r6, #0]
    e1fc:	2b00      	cmp	r3, #0
    e1fe:	d007      	beq.n	e210 <__sfp+0x34>
    e200:	6836      	ldr	r6, [r6, #0]
    e202:	e7f6      	b.n	e1f2 <__sfp+0x16>
    e204:	220c      	movs	r2, #12
    e206:	5ea5      	ldrsh	r5, [r4, r2]
    e208:	2d00      	cmp	r5, #0
    e20a:	d00d      	beq.n	e228 <__sfp+0x4c>
    e20c:	3468      	adds	r4, #104	; 0x68
    e20e:	e7f2      	b.n	e1f6 <__sfp+0x1a>
    e210:	2104      	movs	r1, #4
    e212:	0038      	movs	r0, r7
    e214:	f7ff ff98 	bl	e148 <__sfmoreglue>
    e218:	6030      	str	r0, [r6, #0]
    e21a:	2800      	cmp	r0, #0
    e21c:	d1f0      	bne.n	e200 <__sfp+0x24>
    e21e:	230c      	movs	r3, #12
    e220:	0004      	movs	r4, r0
    e222:	603b      	str	r3, [r7, #0]
    e224:	0020      	movs	r0, r4
    e226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e228:	2301      	movs	r3, #1
    e22a:	0020      	movs	r0, r4
    e22c:	425b      	negs	r3, r3
    e22e:	81e3      	strh	r3, [r4, #14]
    e230:	3302      	adds	r3, #2
    e232:	81a3      	strh	r3, [r4, #12]
    e234:	6665      	str	r5, [r4, #100]	; 0x64
    e236:	6025      	str	r5, [r4, #0]
    e238:	60a5      	str	r5, [r4, #8]
    e23a:	6065      	str	r5, [r4, #4]
    e23c:	6125      	str	r5, [r4, #16]
    e23e:	6165      	str	r5, [r4, #20]
    e240:	61a5      	str	r5, [r4, #24]
    e242:	2208      	movs	r2, #8
    e244:	0029      	movs	r1, r5
    e246:	305c      	adds	r0, #92	; 0x5c
    e248:	f7fd faea 	bl	b820 <memset>
    e24c:	6365      	str	r5, [r4, #52]	; 0x34
    e24e:	63a5      	str	r5, [r4, #56]	; 0x38
    e250:	64a5      	str	r5, [r4, #72]	; 0x48
    e252:	64e5      	str	r5, [r4, #76]	; 0x4c
    e254:	e7e6      	b.n	e224 <__sfp+0x48>
    e256:	46c0      	nop			; (mov r8, r8)
    e258:	00010fac 	.word	0x00010fac

0000e25c <_fwalk_reent>:
    e25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e25e:	0004      	movs	r4, r0
    e260:	0007      	movs	r7, r0
    e262:	2600      	movs	r6, #0
    e264:	9101      	str	r1, [sp, #4]
    e266:	3448      	adds	r4, #72	; 0x48
    e268:	2c00      	cmp	r4, #0
    e26a:	d101      	bne.n	e270 <_fwalk_reent+0x14>
    e26c:	0030      	movs	r0, r6
    e26e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e270:	6863      	ldr	r3, [r4, #4]
    e272:	68a5      	ldr	r5, [r4, #8]
    e274:	9300      	str	r3, [sp, #0]
    e276:	9b00      	ldr	r3, [sp, #0]
    e278:	3b01      	subs	r3, #1
    e27a:	9300      	str	r3, [sp, #0]
    e27c:	d501      	bpl.n	e282 <_fwalk_reent+0x26>
    e27e:	6824      	ldr	r4, [r4, #0]
    e280:	e7f2      	b.n	e268 <_fwalk_reent+0xc>
    e282:	89ab      	ldrh	r3, [r5, #12]
    e284:	2b01      	cmp	r3, #1
    e286:	d908      	bls.n	e29a <_fwalk_reent+0x3e>
    e288:	220e      	movs	r2, #14
    e28a:	5eab      	ldrsh	r3, [r5, r2]
    e28c:	3301      	adds	r3, #1
    e28e:	d004      	beq.n	e29a <_fwalk_reent+0x3e>
    e290:	0029      	movs	r1, r5
    e292:	0038      	movs	r0, r7
    e294:	9b01      	ldr	r3, [sp, #4]
    e296:	4798      	blx	r3
    e298:	4306      	orrs	r6, r0
    e29a:	3568      	adds	r5, #104	; 0x68
    e29c:	e7eb      	b.n	e276 <_fwalk_reent+0x1a>
	...

0000e2a0 <_findenv_r>:
    e2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2a2:	000e      	movs	r6, r1
    e2a4:	b085      	sub	sp, #20
    e2a6:	0007      	movs	r7, r0
    e2a8:	9203      	str	r2, [sp, #12]
    e2aa:	f000 fed3 	bl	f054 <__env_lock>
    e2ae:	4c19      	ldr	r4, [pc, #100]	; (e314 <_findenv_r+0x74>)
    e2b0:	0033      	movs	r3, r6
    e2b2:	6825      	ldr	r5, [r4, #0]
    e2b4:	2d00      	cmp	r5, #0
    e2b6:	d106      	bne.n	e2c6 <_findenv_r+0x26>
    e2b8:	0038      	movs	r0, r7
    e2ba:	f000 fecc 	bl	f056 <__env_unlock>
    e2be:	2000      	movs	r0, #0
    e2c0:	b005      	add	sp, #20
    e2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2c4:	3301      	adds	r3, #1
    e2c6:	781a      	ldrb	r2, [r3, #0]
    e2c8:	2a00      	cmp	r2, #0
    e2ca:	d01f      	beq.n	e30c <_findenv_r+0x6c>
    e2cc:	2a3d      	cmp	r2, #61	; 0x3d
    e2ce:	d1f9      	bne.n	e2c4 <_findenv_r+0x24>
    e2d0:	e7f2      	b.n	e2b8 <_findenv_r+0x18>
    e2d2:	3504      	adds	r5, #4
    e2d4:	6828      	ldr	r0, [r5, #0]
    e2d6:	2800      	cmp	r0, #0
    e2d8:	d0ee      	beq.n	e2b8 <_findenv_r+0x18>
    e2da:	9a01      	ldr	r2, [sp, #4]
    e2dc:	0031      	movs	r1, r6
    e2de:	f7fe fbc8 	bl	ca72 <strncmp>
    e2e2:	2800      	cmp	r0, #0
    e2e4:	d1f5      	bne.n	e2d2 <_findenv_r+0x32>
    e2e6:	9a01      	ldr	r2, [sp, #4]
    e2e8:	682b      	ldr	r3, [r5, #0]
    e2ea:	4694      	mov	ip, r2
    e2ec:	4463      	add	r3, ip
    e2ee:	9302      	str	r3, [sp, #8]
    e2f0:	781b      	ldrb	r3, [r3, #0]
    e2f2:	2b3d      	cmp	r3, #61	; 0x3d
    e2f4:	d1ed      	bne.n	e2d2 <_findenv_r+0x32>
    e2f6:	6823      	ldr	r3, [r4, #0]
    e2f8:	0038      	movs	r0, r7
    e2fa:	1aed      	subs	r5, r5, r3
    e2fc:	9b03      	ldr	r3, [sp, #12]
    e2fe:	10ad      	asrs	r5, r5, #2
    e300:	601d      	str	r5, [r3, #0]
    e302:	f000 fea8 	bl	f056 <__env_unlock>
    e306:	9802      	ldr	r0, [sp, #8]
    e308:	3001      	adds	r0, #1
    e30a:	e7d9      	b.n	e2c0 <_findenv_r+0x20>
    e30c:	1b9b      	subs	r3, r3, r6
    e30e:	9301      	str	r3, [sp, #4]
    e310:	e7e0      	b.n	e2d4 <_findenv_r+0x34>
    e312:	46c0      	nop			; (mov r8, r8)
    e314:	200002cc 	.word	0x200002cc

0000e318 <_getenv_r>:
    e318:	b507      	push	{r0, r1, r2, lr}
    e31a:	aa01      	add	r2, sp, #4
    e31c:	f7ff ffc0 	bl	e2a0 <_findenv_r>
    e320:	bd0e      	pop	{r1, r2, r3, pc}
	...

0000e324 <__gettzinfo>:
    e324:	4800      	ldr	r0, [pc, #0]	; (e328 <__gettzinfo+0x4>)
    e326:	4770      	bx	lr
    e328:	2000028c 	.word	0x2000028c

0000e32c <_localeconv_r>:
    e32c:	4b03      	ldr	r3, [pc, #12]	; (e33c <_localeconv_r+0x10>)
    e32e:	681b      	ldr	r3, [r3, #0]
    e330:	6a18      	ldr	r0, [r3, #32]
    e332:	2800      	cmp	r0, #0
    e334:	d100      	bne.n	e338 <_localeconv_r+0xc>
    e336:	4802      	ldr	r0, [pc, #8]	; (e340 <_localeconv_r+0x14>)
    e338:	30f0      	adds	r0, #240	; 0xf0
    e33a:	4770      	bx	lr
    e33c:	200000b4 	.word	0x200000b4
    e340:	20000118 	.word	0x20000118

0000e344 <__swhatbuf_r>:
    e344:	b570      	push	{r4, r5, r6, lr}
    e346:	000e      	movs	r6, r1
    e348:	001d      	movs	r5, r3
    e34a:	230e      	movs	r3, #14
    e34c:	5ec9      	ldrsh	r1, [r1, r3]
    e34e:	b090      	sub	sp, #64	; 0x40
    e350:	0014      	movs	r4, r2
    e352:	2900      	cmp	r1, #0
    e354:	da07      	bge.n	e366 <__swhatbuf_r+0x22>
    e356:	2300      	movs	r3, #0
    e358:	602b      	str	r3, [r5, #0]
    e35a:	89b3      	ldrh	r3, [r6, #12]
    e35c:	061b      	lsls	r3, r3, #24
    e35e:	d411      	bmi.n	e384 <__swhatbuf_r+0x40>
    e360:	2380      	movs	r3, #128	; 0x80
    e362:	00db      	lsls	r3, r3, #3
    e364:	e00f      	b.n	e386 <__swhatbuf_r+0x42>
    e366:	aa01      	add	r2, sp, #4
    e368:	f000 fe76 	bl	f058 <_fstat_r>
    e36c:	2800      	cmp	r0, #0
    e36e:	dbf2      	blt.n	e356 <__swhatbuf_r+0x12>
    e370:	22f0      	movs	r2, #240	; 0xf0
    e372:	9b02      	ldr	r3, [sp, #8]
    e374:	0212      	lsls	r2, r2, #8
    e376:	4013      	ands	r3, r2
    e378:	4a05      	ldr	r2, [pc, #20]	; (e390 <__swhatbuf_r+0x4c>)
    e37a:	189b      	adds	r3, r3, r2
    e37c:	425a      	negs	r2, r3
    e37e:	4153      	adcs	r3, r2
    e380:	602b      	str	r3, [r5, #0]
    e382:	e7ed      	b.n	e360 <__swhatbuf_r+0x1c>
    e384:	2340      	movs	r3, #64	; 0x40
    e386:	2000      	movs	r0, #0
    e388:	6023      	str	r3, [r4, #0]
    e38a:	b010      	add	sp, #64	; 0x40
    e38c:	bd70      	pop	{r4, r5, r6, pc}
    e38e:	46c0      	nop			; (mov r8, r8)
    e390:	ffffe000 	.word	0xffffe000

0000e394 <__smakebuf_r>:
    e394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e396:	2602      	movs	r6, #2
    e398:	898b      	ldrh	r3, [r1, #12]
    e39a:	0005      	movs	r5, r0
    e39c:	000c      	movs	r4, r1
    e39e:	4233      	tst	r3, r6
    e3a0:	d006      	beq.n	e3b0 <__smakebuf_r+0x1c>
    e3a2:	0023      	movs	r3, r4
    e3a4:	3347      	adds	r3, #71	; 0x47
    e3a6:	6023      	str	r3, [r4, #0]
    e3a8:	6123      	str	r3, [r4, #16]
    e3aa:	2301      	movs	r3, #1
    e3ac:	6163      	str	r3, [r4, #20]
    e3ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e3b0:	ab01      	add	r3, sp, #4
    e3b2:	466a      	mov	r2, sp
    e3b4:	f7ff ffc6 	bl	e344 <__swhatbuf_r>
    e3b8:	9900      	ldr	r1, [sp, #0]
    e3ba:	0007      	movs	r7, r0
    e3bc:	0028      	movs	r0, r5
    e3be:	f7fd fcd7 	bl	bd70 <_malloc_r>
    e3c2:	2800      	cmp	r0, #0
    e3c4:	d108      	bne.n	e3d8 <__smakebuf_r+0x44>
    e3c6:	220c      	movs	r2, #12
    e3c8:	5ea3      	ldrsh	r3, [r4, r2]
    e3ca:	059a      	lsls	r2, r3, #22
    e3cc:	d4ef      	bmi.n	e3ae <__smakebuf_r+0x1a>
    e3ce:	2203      	movs	r2, #3
    e3d0:	4393      	bics	r3, r2
    e3d2:	431e      	orrs	r6, r3
    e3d4:	81a6      	strh	r6, [r4, #12]
    e3d6:	e7e4      	b.n	e3a2 <__smakebuf_r+0xe>
    e3d8:	4b0f      	ldr	r3, [pc, #60]	; (e418 <__smakebuf_r+0x84>)
    e3da:	62ab      	str	r3, [r5, #40]	; 0x28
    e3dc:	2380      	movs	r3, #128	; 0x80
    e3de:	89a2      	ldrh	r2, [r4, #12]
    e3e0:	6020      	str	r0, [r4, #0]
    e3e2:	4313      	orrs	r3, r2
    e3e4:	81a3      	strh	r3, [r4, #12]
    e3e6:	9b00      	ldr	r3, [sp, #0]
    e3e8:	6120      	str	r0, [r4, #16]
    e3ea:	6163      	str	r3, [r4, #20]
    e3ec:	9b01      	ldr	r3, [sp, #4]
    e3ee:	2b00      	cmp	r3, #0
    e3f0:	d00d      	beq.n	e40e <__smakebuf_r+0x7a>
    e3f2:	230e      	movs	r3, #14
    e3f4:	5ee1      	ldrsh	r1, [r4, r3]
    e3f6:	0028      	movs	r0, r5
    e3f8:	f000 fe40 	bl	f07c <_isatty_r>
    e3fc:	2800      	cmp	r0, #0
    e3fe:	d006      	beq.n	e40e <__smakebuf_r+0x7a>
    e400:	2203      	movs	r2, #3
    e402:	89a3      	ldrh	r3, [r4, #12]
    e404:	4393      	bics	r3, r2
    e406:	001a      	movs	r2, r3
    e408:	2301      	movs	r3, #1
    e40a:	4313      	orrs	r3, r2
    e40c:	81a3      	strh	r3, [r4, #12]
    e40e:	89a0      	ldrh	r0, [r4, #12]
    e410:	4338      	orrs	r0, r7
    e412:	81a0      	strh	r0, [r4, #12]
    e414:	e7cb      	b.n	e3ae <__smakebuf_r+0x1a>
    e416:	46c0      	nop			; (mov r8, r8)
    e418:	0000e0f1 	.word	0x0000e0f1

0000e41c <memchr>:
    e41c:	b2c9      	uxtb	r1, r1
    e41e:	1882      	adds	r2, r0, r2
    e420:	4290      	cmp	r0, r2
    e422:	d101      	bne.n	e428 <memchr+0xc>
    e424:	2000      	movs	r0, #0
    e426:	4770      	bx	lr
    e428:	7803      	ldrb	r3, [r0, #0]
    e42a:	428b      	cmp	r3, r1
    e42c:	d0fb      	beq.n	e426 <memchr+0xa>
    e42e:	3001      	adds	r0, #1
    e430:	e7f6      	b.n	e420 <memchr+0x4>

0000e432 <__malloc_lock>:
    e432:	4770      	bx	lr

0000e434 <__malloc_unlock>:
    e434:	4770      	bx	lr

0000e436 <_Balloc>:
    e436:	b570      	push	{r4, r5, r6, lr}
    e438:	6a46      	ldr	r6, [r0, #36]	; 0x24
    e43a:	0004      	movs	r4, r0
    e43c:	000d      	movs	r5, r1
    e43e:	2e00      	cmp	r6, #0
    e440:	d107      	bne.n	e452 <_Balloc+0x1c>
    e442:	2010      	movs	r0, #16
    e444:	f7fd f99c 	bl	b780 <malloc>
    e448:	6260      	str	r0, [r4, #36]	; 0x24
    e44a:	6046      	str	r6, [r0, #4]
    e44c:	6086      	str	r6, [r0, #8]
    e44e:	6006      	str	r6, [r0, #0]
    e450:	60c6      	str	r6, [r0, #12]
    e452:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e454:	68f3      	ldr	r3, [r6, #12]
    e456:	2b00      	cmp	r3, #0
    e458:	d013      	beq.n	e482 <_Balloc+0x4c>
    e45a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e45c:	00aa      	lsls	r2, r5, #2
    e45e:	68db      	ldr	r3, [r3, #12]
    e460:	189b      	adds	r3, r3, r2
    e462:	6818      	ldr	r0, [r3, #0]
    e464:	2800      	cmp	r0, #0
    e466:	d118      	bne.n	e49a <_Balloc+0x64>
    e468:	2101      	movs	r1, #1
    e46a:	000e      	movs	r6, r1
    e46c:	40ae      	lsls	r6, r5
    e46e:	1d72      	adds	r2, r6, #5
    e470:	0092      	lsls	r2, r2, #2
    e472:	0020      	movs	r0, r4
    e474:	f000 fac2 	bl	e9fc <_calloc_r>
    e478:	2800      	cmp	r0, #0
    e47a:	d00c      	beq.n	e496 <_Balloc+0x60>
    e47c:	6045      	str	r5, [r0, #4]
    e47e:	6086      	str	r6, [r0, #8]
    e480:	e00d      	b.n	e49e <_Balloc+0x68>
    e482:	2221      	movs	r2, #33	; 0x21
    e484:	2104      	movs	r1, #4
    e486:	0020      	movs	r0, r4
    e488:	f000 fab8 	bl	e9fc <_calloc_r>
    e48c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e48e:	60f0      	str	r0, [r6, #12]
    e490:	68db      	ldr	r3, [r3, #12]
    e492:	2b00      	cmp	r3, #0
    e494:	d1e1      	bne.n	e45a <_Balloc+0x24>
    e496:	2000      	movs	r0, #0
    e498:	bd70      	pop	{r4, r5, r6, pc}
    e49a:	6802      	ldr	r2, [r0, #0]
    e49c:	601a      	str	r2, [r3, #0]
    e49e:	2300      	movs	r3, #0
    e4a0:	6103      	str	r3, [r0, #16]
    e4a2:	60c3      	str	r3, [r0, #12]
    e4a4:	e7f8      	b.n	e498 <_Balloc+0x62>

0000e4a6 <_Bfree>:
    e4a6:	b570      	push	{r4, r5, r6, lr}
    e4a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e4aa:	0006      	movs	r6, r0
    e4ac:	000d      	movs	r5, r1
    e4ae:	2c00      	cmp	r4, #0
    e4b0:	d107      	bne.n	e4c2 <_Bfree+0x1c>
    e4b2:	2010      	movs	r0, #16
    e4b4:	f7fd f964 	bl	b780 <malloc>
    e4b8:	6270      	str	r0, [r6, #36]	; 0x24
    e4ba:	6044      	str	r4, [r0, #4]
    e4bc:	6084      	str	r4, [r0, #8]
    e4be:	6004      	str	r4, [r0, #0]
    e4c0:	60c4      	str	r4, [r0, #12]
    e4c2:	2d00      	cmp	r5, #0
    e4c4:	d007      	beq.n	e4d6 <_Bfree+0x30>
    e4c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
    e4c8:	686a      	ldr	r2, [r5, #4]
    e4ca:	68db      	ldr	r3, [r3, #12]
    e4cc:	0092      	lsls	r2, r2, #2
    e4ce:	189b      	adds	r3, r3, r2
    e4d0:	681a      	ldr	r2, [r3, #0]
    e4d2:	602a      	str	r2, [r5, #0]
    e4d4:	601d      	str	r5, [r3, #0]
    e4d6:	bd70      	pop	{r4, r5, r6, pc}

0000e4d8 <__multadd>:
    e4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e4da:	001e      	movs	r6, r3
    e4dc:	2314      	movs	r3, #20
    e4de:	469c      	mov	ip, r3
    e4e0:	0007      	movs	r7, r0
    e4e2:	000c      	movs	r4, r1
    e4e4:	2000      	movs	r0, #0
    e4e6:	690d      	ldr	r5, [r1, #16]
    e4e8:	448c      	add	ip, r1
    e4ea:	4663      	mov	r3, ip
    e4ec:	8819      	ldrh	r1, [r3, #0]
    e4ee:	681b      	ldr	r3, [r3, #0]
    e4f0:	4351      	muls	r1, r2
    e4f2:	0c1b      	lsrs	r3, r3, #16
    e4f4:	4353      	muls	r3, r2
    e4f6:	1989      	adds	r1, r1, r6
    e4f8:	0c0e      	lsrs	r6, r1, #16
    e4fa:	199b      	adds	r3, r3, r6
    e4fc:	b289      	uxth	r1, r1
    e4fe:	0c1e      	lsrs	r6, r3, #16
    e500:	041b      	lsls	r3, r3, #16
    e502:	185b      	adds	r3, r3, r1
    e504:	4661      	mov	r1, ip
    e506:	3001      	adds	r0, #1
    e508:	c108      	stmia	r1!, {r3}
    e50a:	468c      	mov	ip, r1
    e50c:	4285      	cmp	r5, r0
    e50e:	dcec      	bgt.n	e4ea <__multadd+0x12>
    e510:	2e00      	cmp	r6, #0
    e512:	d01b      	beq.n	e54c <__multadd+0x74>
    e514:	68a3      	ldr	r3, [r4, #8]
    e516:	429d      	cmp	r5, r3
    e518:	db12      	blt.n	e540 <__multadd+0x68>
    e51a:	6863      	ldr	r3, [r4, #4]
    e51c:	0038      	movs	r0, r7
    e51e:	1c59      	adds	r1, r3, #1
    e520:	f7ff ff89 	bl	e436 <_Balloc>
    e524:	0021      	movs	r1, r4
    e526:	6923      	ldr	r3, [r4, #16]
    e528:	9001      	str	r0, [sp, #4]
    e52a:	1c9a      	adds	r2, r3, #2
    e52c:	0092      	lsls	r2, r2, #2
    e52e:	310c      	adds	r1, #12
    e530:	300c      	adds	r0, #12
    e532:	f7fd f95a 	bl	b7ea <memcpy>
    e536:	0021      	movs	r1, r4
    e538:	0038      	movs	r0, r7
    e53a:	f7ff ffb4 	bl	e4a6 <_Bfree>
    e53e:	9c01      	ldr	r4, [sp, #4]
    e540:	1d2b      	adds	r3, r5, #4
    e542:	009b      	lsls	r3, r3, #2
    e544:	18e3      	adds	r3, r4, r3
    e546:	3501      	adds	r5, #1
    e548:	605e      	str	r6, [r3, #4]
    e54a:	6125      	str	r5, [r4, #16]
    e54c:	0020      	movs	r0, r4
    e54e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000e550 <__hi0bits>:
    e550:	0003      	movs	r3, r0
    e552:	0c02      	lsrs	r2, r0, #16
    e554:	2000      	movs	r0, #0
    e556:	4282      	cmp	r2, r0
    e558:	d101      	bne.n	e55e <__hi0bits+0xe>
    e55a:	041b      	lsls	r3, r3, #16
    e55c:	3010      	adds	r0, #16
    e55e:	0e1a      	lsrs	r2, r3, #24
    e560:	d101      	bne.n	e566 <__hi0bits+0x16>
    e562:	3008      	adds	r0, #8
    e564:	021b      	lsls	r3, r3, #8
    e566:	0f1a      	lsrs	r2, r3, #28
    e568:	d101      	bne.n	e56e <__hi0bits+0x1e>
    e56a:	3004      	adds	r0, #4
    e56c:	011b      	lsls	r3, r3, #4
    e56e:	0f9a      	lsrs	r2, r3, #30
    e570:	d101      	bne.n	e576 <__hi0bits+0x26>
    e572:	3002      	adds	r0, #2
    e574:	009b      	lsls	r3, r3, #2
    e576:	2b00      	cmp	r3, #0
    e578:	db03      	blt.n	e582 <__hi0bits+0x32>
    e57a:	3001      	adds	r0, #1
    e57c:	005b      	lsls	r3, r3, #1
    e57e:	d400      	bmi.n	e582 <__hi0bits+0x32>
    e580:	2020      	movs	r0, #32
    e582:	4770      	bx	lr

0000e584 <__lo0bits>:
    e584:	2207      	movs	r2, #7
    e586:	6803      	ldr	r3, [r0, #0]
    e588:	b510      	push	{r4, lr}
    e58a:	0001      	movs	r1, r0
    e58c:	401a      	ands	r2, r3
    e58e:	d00d      	beq.n	e5ac <__lo0bits+0x28>
    e590:	2401      	movs	r4, #1
    e592:	2000      	movs	r0, #0
    e594:	4223      	tst	r3, r4
    e596:	d105      	bne.n	e5a4 <__lo0bits+0x20>
    e598:	3002      	adds	r0, #2
    e59a:	4203      	tst	r3, r0
    e59c:	d003      	beq.n	e5a6 <__lo0bits+0x22>
    e59e:	40e3      	lsrs	r3, r4
    e5a0:	0020      	movs	r0, r4
    e5a2:	600b      	str	r3, [r1, #0]
    e5a4:	bd10      	pop	{r4, pc}
    e5a6:	089b      	lsrs	r3, r3, #2
    e5a8:	600b      	str	r3, [r1, #0]
    e5aa:	e7fb      	b.n	e5a4 <__lo0bits+0x20>
    e5ac:	b29c      	uxth	r4, r3
    e5ae:	0010      	movs	r0, r2
    e5b0:	2c00      	cmp	r4, #0
    e5b2:	d101      	bne.n	e5b8 <__lo0bits+0x34>
    e5b4:	2010      	movs	r0, #16
    e5b6:	0c1b      	lsrs	r3, r3, #16
    e5b8:	b2da      	uxtb	r2, r3
    e5ba:	2a00      	cmp	r2, #0
    e5bc:	d101      	bne.n	e5c2 <__lo0bits+0x3e>
    e5be:	3008      	adds	r0, #8
    e5c0:	0a1b      	lsrs	r3, r3, #8
    e5c2:	071a      	lsls	r2, r3, #28
    e5c4:	d101      	bne.n	e5ca <__lo0bits+0x46>
    e5c6:	3004      	adds	r0, #4
    e5c8:	091b      	lsrs	r3, r3, #4
    e5ca:	079a      	lsls	r2, r3, #30
    e5cc:	d101      	bne.n	e5d2 <__lo0bits+0x4e>
    e5ce:	3002      	adds	r0, #2
    e5d0:	089b      	lsrs	r3, r3, #2
    e5d2:	07da      	lsls	r2, r3, #31
    e5d4:	d4e8      	bmi.n	e5a8 <__lo0bits+0x24>
    e5d6:	085b      	lsrs	r3, r3, #1
    e5d8:	d001      	beq.n	e5de <__lo0bits+0x5a>
    e5da:	3001      	adds	r0, #1
    e5dc:	e7e4      	b.n	e5a8 <__lo0bits+0x24>
    e5de:	2020      	movs	r0, #32
    e5e0:	e7e0      	b.n	e5a4 <__lo0bits+0x20>

0000e5e2 <__i2b>:
    e5e2:	b510      	push	{r4, lr}
    e5e4:	000c      	movs	r4, r1
    e5e6:	2101      	movs	r1, #1
    e5e8:	f7ff ff25 	bl	e436 <_Balloc>
    e5ec:	2301      	movs	r3, #1
    e5ee:	6144      	str	r4, [r0, #20]
    e5f0:	6103      	str	r3, [r0, #16]
    e5f2:	bd10      	pop	{r4, pc}

0000e5f4 <__multiply>:
    e5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5f6:	690b      	ldr	r3, [r1, #16]
    e5f8:	0015      	movs	r5, r2
    e5fa:	6912      	ldr	r2, [r2, #16]
    e5fc:	b089      	sub	sp, #36	; 0x24
    e5fe:	000c      	movs	r4, r1
    e600:	4293      	cmp	r3, r2
    e602:	da01      	bge.n	e608 <__multiply+0x14>
    e604:	002c      	movs	r4, r5
    e606:	000d      	movs	r5, r1
    e608:	6927      	ldr	r7, [r4, #16]
    e60a:	692e      	ldr	r6, [r5, #16]
    e60c:	68a2      	ldr	r2, [r4, #8]
    e60e:	19bb      	adds	r3, r7, r6
    e610:	6861      	ldr	r1, [r4, #4]
    e612:	9301      	str	r3, [sp, #4]
    e614:	4293      	cmp	r3, r2
    e616:	dd00      	ble.n	e61a <__multiply+0x26>
    e618:	3101      	adds	r1, #1
    e61a:	f7ff ff0c 	bl	e436 <_Balloc>
    e61e:	0003      	movs	r3, r0
    e620:	3314      	adds	r3, #20
    e622:	9300      	str	r3, [sp, #0]
    e624:	9a00      	ldr	r2, [sp, #0]
    e626:	19bb      	adds	r3, r7, r6
    e628:	4694      	mov	ip, r2
    e62a:	009b      	lsls	r3, r3, #2
    e62c:	449c      	add	ip, r3
    e62e:	0013      	movs	r3, r2
    e630:	2200      	movs	r2, #0
    e632:	9004      	str	r0, [sp, #16]
    e634:	4563      	cmp	r3, ip
    e636:	d31c      	bcc.n	e672 <__multiply+0x7e>
    e638:	002a      	movs	r2, r5
    e63a:	3414      	adds	r4, #20
    e63c:	00bf      	lsls	r7, r7, #2
    e63e:	19e3      	adds	r3, r4, r7
    e640:	3214      	adds	r2, #20
    e642:	00b6      	lsls	r6, r6, #2
    e644:	9305      	str	r3, [sp, #20]
    e646:	1993      	adds	r3, r2, r6
    e648:	9402      	str	r4, [sp, #8]
    e64a:	9306      	str	r3, [sp, #24]
    e64c:	9b06      	ldr	r3, [sp, #24]
    e64e:	429a      	cmp	r2, r3
    e650:	d311      	bcc.n	e676 <__multiply+0x82>
    e652:	9b01      	ldr	r3, [sp, #4]
    e654:	2b00      	cmp	r3, #0
    e656:	dd06      	ble.n	e666 <__multiply+0x72>
    e658:	2304      	movs	r3, #4
    e65a:	425b      	negs	r3, r3
    e65c:	449c      	add	ip, r3
    e65e:	4663      	mov	r3, ip
    e660:	681b      	ldr	r3, [r3, #0]
    e662:	2b00      	cmp	r3, #0
    e664:	d051      	beq.n	e70a <__multiply+0x116>
    e666:	9b04      	ldr	r3, [sp, #16]
    e668:	9a01      	ldr	r2, [sp, #4]
    e66a:	0018      	movs	r0, r3
    e66c:	611a      	str	r2, [r3, #16]
    e66e:	b009      	add	sp, #36	; 0x24
    e670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e672:	c304      	stmia	r3!, {r2}
    e674:	e7de      	b.n	e634 <__multiply+0x40>
    e676:	8814      	ldrh	r4, [r2, #0]
    e678:	2c00      	cmp	r4, #0
    e67a:	d01e      	beq.n	e6ba <__multiply+0xc6>
    e67c:	2600      	movs	r6, #0
    e67e:	9d00      	ldr	r5, [sp, #0]
    e680:	9f02      	ldr	r7, [sp, #8]
    e682:	cf01      	ldmia	r7!, {r0}
    e684:	9507      	str	r5, [sp, #28]
    e686:	cd08      	ldmia	r5!, {r3}
    e688:	9303      	str	r3, [sp, #12]
    e68a:	b283      	uxth	r3, r0
    e68c:	4363      	muls	r3, r4
    e68e:	0019      	movs	r1, r3
    e690:	466b      	mov	r3, sp
    e692:	0c00      	lsrs	r0, r0, #16
    e694:	899b      	ldrh	r3, [r3, #12]
    e696:	4360      	muls	r0, r4
    e698:	18cb      	adds	r3, r1, r3
    e69a:	9903      	ldr	r1, [sp, #12]
    e69c:	199b      	adds	r3, r3, r6
    e69e:	0c09      	lsrs	r1, r1, #16
    e6a0:	1841      	adds	r1, r0, r1
    e6a2:	0c18      	lsrs	r0, r3, #16
    e6a4:	1809      	adds	r1, r1, r0
    e6a6:	0c0e      	lsrs	r6, r1, #16
    e6a8:	b29b      	uxth	r3, r3
    e6aa:	0409      	lsls	r1, r1, #16
    e6ac:	430b      	orrs	r3, r1
    e6ae:	9907      	ldr	r1, [sp, #28]
    e6b0:	600b      	str	r3, [r1, #0]
    e6b2:	9b05      	ldr	r3, [sp, #20]
    e6b4:	42bb      	cmp	r3, r7
    e6b6:	d8e4      	bhi.n	e682 <__multiply+0x8e>
    e6b8:	602e      	str	r6, [r5, #0]
    e6ba:	6813      	ldr	r3, [r2, #0]
    e6bc:	0c1b      	lsrs	r3, r3, #16
    e6be:	9303      	str	r3, [sp, #12]
    e6c0:	d01e      	beq.n	e700 <__multiply+0x10c>
    e6c2:	2600      	movs	r6, #0
    e6c4:	9b00      	ldr	r3, [sp, #0]
    e6c6:	9c02      	ldr	r4, [sp, #8]
    e6c8:	681b      	ldr	r3, [r3, #0]
    e6ca:	9800      	ldr	r0, [sp, #0]
    e6cc:	0007      	movs	r7, r0
    e6ce:	8821      	ldrh	r1, [r4, #0]
    e6d0:	9d03      	ldr	r5, [sp, #12]
    e6d2:	b29b      	uxth	r3, r3
    e6d4:	4369      	muls	r1, r5
    e6d6:	c820      	ldmia	r0!, {r5}
    e6d8:	0c2d      	lsrs	r5, r5, #16
    e6da:	1949      	adds	r1, r1, r5
    e6dc:	198e      	adds	r6, r1, r6
    e6de:	0431      	lsls	r1, r6, #16
    e6e0:	430b      	orrs	r3, r1
    e6e2:	603b      	str	r3, [r7, #0]
    e6e4:	cc08      	ldmia	r4!, {r3}
    e6e6:	9903      	ldr	r1, [sp, #12]
    e6e8:	0c1b      	lsrs	r3, r3, #16
    e6ea:	434b      	muls	r3, r1
    e6ec:	6879      	ldr	r1, [r7, #4]
    e6ee:	0c36      	lsrs	r6, r6, #16
    e6f0:	b289      	uxth	r1, r1
    e6f2:	185b      	adds	r3, r3, r1
    e6f4:	9905      	ldr	r1, [sp, #20]
    e6f6:	199b      	adds	r3, r3, r6
    e6f8:	0c1e      	lsrs	r6, r3, #16
    e6fa:	42a1      	cmp	r1, r4
    e6fc:	d8e6      	bhi.n	e6cc <__multiply+0xd8>
    e6fe:	6003      	str	r3, [r0, #0]
    e700:	9b00      	ldr	r3, [sp, #0]
    e702:	3204      	adds	r2, #4
    e704:	3304      	adds	r3, #4
    e706:	9300      	str	r3, [sp, #0]
    e708:	e7a0      	b.n	e64c <__multiply+0x58>
    e70a:	9b01      	ldr	r3, [sp, #4]
    e70c:	3b01      	subs	r3, #1
    e70e:	9301      	str	r3, [sp, #4]
    e710:	e79f      	b.n	e652 <__multiply+0x5e>
	...

0000e714 <__pow5mult>:
    e714:	2303      	movs	r3, #3
    e716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e718:	4013      	ands	r3, r2
    e71a:	0005      	movs	r5, r0
    e71c:	000e      	movs	r6, r1
    e71e:	0014      	movs	r4, r2
    e720:	2b00      	cmp	r3, #0
    e722:	d008      	beq.n	e736 <__pow5mult+0x22>
    e724:	4922      	ldr	r1, [pc, #136]	; (e7b0 <__pow5mult+0x9c>)
    e726:	3b01      	subs	r3, #1
    e728:	009a      	lsls	r2, r3, #2
    e72a:	5852      	ldr	r2, [r2, r1]
    e72c:	2300      	movs	r3, #0
    e72e:	0031      	movs	r1, r6
    e730:	f7ff fed2 	bl	e4d8 <__multadd>
    e734:	0006      	movs	r6, r0
    e736:	10a3      	asrs	r3, r4, #2
    e738:	9301      	str	r3, [sp, #4]
    e73a:	d036      	beq.n	e7aa <__pow5mult+0x96>
    e73c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    e73e:	2c00      	cmp	r4, #0
    e740:	d107      	bne.n	e752 <__pow5mult+0x3e>
    e742:	2010      	movs	r0, #16
    e744:	f7fd f81c 	bl	b780 <malloc>
    e748:	6268      	str	r0, [r5, #36]	; 0x24
    e74a:	6044      	str	r4, [r0, #4]
    e74c:	6084      	str	r4, [r0, #8]
    e74e:	6004      	str	r4, [r0, #0]
    e750:	60c4      	str	r4, [r0, #12]
    e752:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e754:	68bc      	ldr	r4, [r7, #8]
    e756:	2c00      	cmp	r4, #0
    e758:	d107      	bne.n	e76a <__pow5mult+0x56>
    e75a:	4916      	ldr	r1, [pc, #88]	; (e7b4 <__pow5mult+0xa0>)
    e75c:	0028      	movs	r0, r5
    e75e:	f7ff ff40 	bl	e5e2 <__i2b>
    e762:	2300      	movs	r3, #0
    e764:	0004      	movs	r4, r0
    e766:	60b8      	str	r0, [r7, #8]
    e768:	6003      	str	r3, [r0, #0]
    e76a:	2201      	movs	r2, #1
    e76c:	9b01      	ldr	r3, [sp, #4]
    e76e:	4213      	tst	r3, r2
    e770:	d00a      	beq.n	e788 <__pow5mult+0x74>
    e772:	0031      	movs	r1, r6
    e774:	0022      	movs	r2, r4
    e776:	0028      	movs	r0, r5
    e778:	f7ff ff3c 	bl	e5f4 <__multiply>
    e77c:	0007      	movs	r7, r0
    e77e:	0031      	movs	r1, r6
    e780:	0028      	movs	r0, r5
    e782:	f7ff fe90 	bl	e4a6 <_Bfree>
    e786:	003e      	movs	r6, r7
    e788:	9b01      	ldr	r3, [sp, #4]
    e78a:	105b      	asrs	r3, r3, #1
    e78c:	9301      	str	r3, [sp, #4]
    e78e:	d00c      	beq.n	e7aa <__pow5mult+0x96>
    e790:	6820      	ldr	r0, [r4, #0]
    e792:	2800      	cmp	r0, #0
    e794:	d107      	bne.n	e7a6 <__pow5mult+0x92>
    e796:	0022      	movs	r2, r4
    e798:	0021      	movs	r1, r4
    e79a:	0028      	movs	r0, r5
    e79c:	f7ff ff2a 	bl	e5f4 <__multiply>
    e7a0:	2300      	movs	r3, #0
    e7a2:	6020      	str	r0, [r4, #0]
    e7a4:	6003      	str	r3, [r0, #0]
    e7a6:	0004      	movs	r4, r0
    e7a8:	e7df      	b.n	e76a <__pow5mult+0x56>
    e7aa:	0030      	movs	r0, r6
    e7ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e7ae:	46c0      	nop			; (mov r8, r8)
    e7b0:	00011358 	.word	0x00011358
    e7b4:	00000271 	.word	0x00000271

0000e7b8 <__lshift>:
    e7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7ba:	000d      	movs	r5, r1
    e7bc:	0017      	movs	r7, r2
    e7be:	692b      	ldr	r3, [r5, #16]
    e7c0:	1154      	asrs	r4, r2, #5
    e7c2:	b085      	sub	sp, #20
    e7c4:	18e3      	adds	r3, r4, r3
    e7c6:	9302      	str	r3, [sp, #8]
    e7c8:	3301      	adds	r3, #1
    e7ca:	9301      	str	r3, [sp, #4]
    e7cc:	6849      	ldr	r1, [r1, #4]
    e7ce:	68ab      	ldr	r3, [r5, #8]
    e7d0:	9003      	str	r0, [sp, #12]
    e7d2:	9a01      	ldr	r2, [sp, #4]
    e7d4:	4293      	cmp	r3, r2
    e7d6:	db34      	blt.n	e842 <__lshift+0x8a>
    e7d8:	9803      	ldr	r0, [sp, #12]
    e7da:	f7ff fe2c 	bl	e436 <_Balloc>
    e7de:	2300      	movs	r3, #0
    e7e0:	0002      	movs	r2, r0
    e7e2:	0006      	movs	r6, r0
    e7e4:	0019      	movs	r1, r3
    e7e6:	3214      	adds	r2, #20
    e7e8:	42a3      	cmp	r3, r4
    e7ea:	db2d      	blt.n	e848 <__lshift+0x90>
    e7ec:	43e3      	mvns	r3, r4
    e7ee:	17db      	asrs	r3, r3, #31
    e7f0:	401c      	ands	r4, r3
    e7f2:	002b      	movs	r3, r5
    e7f4:	211f      	movs	r1, #31
    e7f6:	00a4      	lsls	r4, r4, #2
    e7f8:	1914      	adds	r4, r2, r4
    e7fa:	692a      	ldr	r2, [r5, #16]
    e7fc:	3314      	adds	r3, #20
    e7fe:	0092      	lsls	r2, r2, #2
    e800:	189a      	adds	r2, r3, r2
    e802:	400f      	ands	r7, r1
    e804:	d024      	beq.n	e850 <__lshift+0x98>
    e806:	3101      	adds	r1, #1
    e808:	1bc9      	subs	r1, r1, r7
    e80a:	468c      	mov	ip, r1
    e80c:	2100      	movs	r1, #0
    e80e:	6818      	ldr	r0, [r3, #0]
    e810:	40b8      	lsls	r0, r7
    e812:	4301      	orrs	r1, r0
    e814:	4660      	mov	r0, ip
    e816:	6021      	str	r1, [r4, #0]
    e818:	cb02      	ldmia	r3!, {r1}
    e81a:	3404      	adds	r4, #4
    e81c:	40c1      	lsrs	r1, r0
    e81e:	429a      	cmp	r2, r3
    e820:	d8f5      	bhi.n	e80e <__lshift+0x56>
    e822:	6021      	str	r1, [r4, #0]
    e824:	2900      	cmp	r1, #0
    e826:	d002      	beq.n	e82e <__lshift+0x76>
    e828:	9b02      	ldr	r3, [sp, #8]
    e82a:	3302      	adds	r3, #2
    e82c:	9301      	str	r3, [sp, #4]
    e82e:	9b01      	ldr	r3, [sp, #4]
    e830:	9803      	ldr	r0, [sp, #12]
    e832:	3b01      	subs	r3, #1
    e834:	6133      	str	r3, [r6, #16]
    e836:	0029      	movs	r1, r5
    e838:	f7ff fe35 	bl	e4a6 <_Bfree>
    e83c:	0030      	movs	r0, r6
    e83e:	b005      	add	sp, #20
    e840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e842:	3101      	adds	r1, #1
    e844:	005b      	lsls	r3, r3, #1
    e846:	e7c4      	b.n	e7d2 <__lshift+0x1a>
    e848:	0098      	lsls	r0, r3, #2
    e84a:	5011      	str	r1, [r2, r0]
    e84c:	3301      	adds	r3, #1
    e84e:	e7cb      	b.n	e7e8 <__lshift+0x30>
    e850:	cb02      	ldmia	r3!, {r1}
    e852:	c402      	stmia	r4!, {r1}
    e854:	429a      	cmp	r2, r3
    e856:	d8fb      	bhi.n	e850 <__lshift+0x98>
    e858:	e7e9      	b.n	e82e <__lshift+0x76>

0000e85a <__mcmp>:
    e85a:	690a      	ldr	r2, [r1, #16]
    e85c:	6903      	ldr	r3, [r0, #16]
    e85e:	b530      	push	{r4, r5, lr}
    e860:	1a9b      	subs	r3, r3, r2
    e862:	d10e      	bne.n	e882 <__mcmp+0x28>
    e864:	0092      	lsls	r2, r2, #2
    e866:	3014      	adds	r0, #20
    e868:	3114      	adds	r1, #20
    e86a:	1884      	adds	r4, r0, r2
    e86c:	1889      	adds	r1, r1, r2
    e86e:	3c04      	subs	r4, #4
    e870:	3904      	subs	r1, #4
    e872:	6822      	ldr	r2, [r4, #0]
    e874:	680d      	ldr	r5, [r1, #0]
    e876:	42aa      	cmp	r2, r5
    e878:	d005      	beq.n	e886 <__mcmp+0x2c>
    e87a:	42aa      	cmp	r2, r5
    e87c:	4192      	sbcs	r2, r2
    e87e:	2301      	movs	r3, #1
    e880:	4313      	orrs	r3, r2
    e882:	0018      	movs	r0, r3
    e884:	bd30      	pop	{r4, r5, pc}
    e886:	42a0      	cmp	r0, r4
    e888:	d3f1      	bcc.n	e86e <__mcmp+0x14>
    e88a:	e7fa      	b.n	e882 <__mcmp+0x28>

0000e88c <__mdiff>:
    e88c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e88e:	000d      	movs	r5, r1
    e890:	b085      	sub	sp, #20
    e892:	0007      	movs	r7, r0
    e894:	0011      	movs	r1, r2
    e896:	0028      	movs	r0, r5
    e898:	0014      	movs	r4, r2
    e89a:	f7ff ffde 	bl	e85a <__mcmp>
    e89e:	1e06      	subs	r6, r0, #0
    e8a0:	d108      	bne.n	e8b4 <__mdiff+0x28>
    e8a2:	0001      	movs	r1, r0
    e8a4:	0038      	movs	r0, r7
    e8a6:	f7ff fdc6 	bl	e436 <_Balloc>
    e8aa:	2301      	movs	r3, #1
    e8ac:	6146      	str	r6, [r0, #20]
    e8ae:	6103      	str	r3, [r0, #16]
    e8b0:	b005      	add	sp, #20
    e8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8b4:	2301      	movs	r3, #1
    e8b6:	9301      	str	r3, [sp, #4]
    e8b8:	2800      	cmp	r0, #0
    e8ba:	db04      	blt.n	e8c6 <__mdiff+0x3a>
    e8bc:	0023      	movs	r3, r4
    e8be:	002c      	movs	r4, r5
    e8c0:	001d      	movs	r5, r3
    e8c2:	2300      	movs	r3, #0
    e8c4:	9301      	str	r3, [sp, #4]
    e8c6:	6861      	ldr	r1, [r4, #4]
    e8c8:	0038      	movs	r0, r7
    e8ca:	f7ff fdb4 	bl	e436 <_Balloc>
    e8ce:	002f      	movs	r7, r5
    e8d0:	2200      	movs	r2, #0
    e8d2:	9b01      	ldr	r3, [sp, #4]
    e8d4:	6926      	ldr	r6, [r4, #16]
    e8d6:	60c3      	str	r3, [r0, #12]
    e8d8:	3414      	adds	r4, #20
    e8da:	00b3      	lsls	r3, r6, #2
    e8dc:	18e3      	adds	r3, r4, r3
    e8de:	9302      	str	r3, [sp, #8]
    e8e0:	692b      	ldr	r3, [r5, #16]
    e8e2:	3714      	adds	r7, #20
    e8e4:	009b      	lsls	r3, r3, #2
    e8e6:	18fb      	adds	r3, r7, r3
    e8e8:	9303      	str	r3, [sp, #12]
    e8ea:	0003      	movs	r3, r0
    e8ec:	4694      	mov	ip, r2
    e8ee:	3314      	adds	r3, #20
    e8f0:	cc20      	ldmia	r4!, {r5}
    e8f2:	cf04      	ldmia	r7!, {r2}
    e8f4:	9201      	str	r2, [sp, #4]
    e8f6:	b2aa      	uxth	r2, r5
    e8f8:	4494      	add	ip, r2
    e8fa:	466a      	mov	r2, sp
    e8fc:	4661      	mov	r1, ip
    e8fe:	8892      	ldrh	r2, [r2, #4]
    e900:	0c2d      	lsrs	r5, r5, #16
    e902:	1a8a      	subs	r2, r1, r2
    e904:	9901      	ldr	r1, [sp, #4]
    e906:	0c09      	lsrs	r1, r1, #16
    e908:	1a69      	subs	r1, r5, r1
    e90a:	1415      	asrs	r5, r2, #16
    e90c:	1949      	adds	r1, r1, r5
    e90e:	140d      	asrs	r5, r1, #16
    e910:	b292      	uxth	r2, r2
    e912:	0409      	lsls	r1, r1, #16
    e914:	430a      	orrs	r2, r1
    e916:	601a      	str	r2, [r3, #0]
    e918:	9a03      	ldr	r2, [sp, #12]
    e91a:	46ac      	mov	ip, r5
    e91c:	3304      	adds	r3, #4
    e91e:	42ba      	cmp	r2, r7
    e920:	d8e6      	bhi.n	e8f0 <__mdiff+0x64>
    e922:	9902      	ldr	r1, [sp, #8]
    e924:	001a      	movs	r2, r3
    e926:	428c      	cmp	r4, r1
    e928:	d305      	bcc.n	e936 <__mdiff+0xaa>
    e92a:	3a04      	subs	r2, #4
    e92c:	6813      	ldr	r3, [r2, #0]
    e92e:	2b00      	cmp	r3, #0
    e930:	d00e      	beq.n	e950 <__mdiff+0xc4>
    e932:	6106      	str	r6, [r0, #16]
    e934:	e7bc      	b.n	e8b0 <__mdiff+0x24>
    e936:	cc04      	ldmia	r4!, {r2}
    e938:	b291      	uxth	r1, r2
    e93a:	4461      	add	r1, ip
    e93c:	140d      	asrs	r5, r1, #16
    e93e:	0c12      	lsrs	r2, r2, #16
    e940:	1952      	adds	r2, r2, r5
    e942:	1415      	asrs	r5, r2, #16
    e944:	b289      	uxth	r1, r1
    e946:	0412      	lsls	r2, r2, #16
    e948:	430a      	orrs	r2, r1
    e94a:	46ac      	mov	ip, r5
    e94c:	c304      	stmia	r3!, {r2}
    e94e:	e7e8      	b.n	e922 <__mdiff+0x96>
    e950:	3e01      	subs	r6, #1
    e952:	e7ea      	b.n	e92a <__mdiff+0x9e>

0000e954 <__d2b>:
    e954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e956:	001d      	movs	r5, r3
    e958:	2101      	movs	r1, #1
    e95a:	9f08      	ldr	r7, [sp, #32]
    e95c:	0014      	movs	r4, r2
    e95e:	f7ff fd6a 	bl	e436 <_Balloc>
    e962:	032b      	lsls	r3, r5, #12
    e964:	006d      	lsls	r5, r5, #1
    e966:	0006      	movs	r6, r0
    e968:	0b1b      	lsrs	r3, r3, #12
    e96a:	0d6d      	lsrs	r5, r5, #21
    e96c:	d124      	bne.n	e9b8 <__d2b+0x64>
    e96e:	9301      	str	r3, [sp, #4]
    e970:	2c00      	cmp	r4, #0
    e972:	d027      	beq.n	e9c4 <__d2b+0x70>
    e974:	4668      	mov	r0, sp
    e976:	9400      	str	r4, [sp, #0]
    e978:	f7ff fe04 	bl	e584 <__lo0bits>
    e97c:	9c00      	ldr	r4, [sp, #0]
    e97e:	2800      	cmp	r0, #0
    e980:	d01e      	beq.n	e9c0 <__d2b+0x6c>
    e982:	9b01      	ldr	r3, [sp, #4]
    e984:	2120      	movs	r1, #32
    e986:	001a      	movs	r2, r3
    e988:	1a09      	subs	r1, r1, r0
    e98a:	408a      	lsls	r2, r1
    e98c:	40c3      	lsrs	r3, r0
    e98e:	4322      	orrs	r2, r4
    e990:	6172      	str	r2, [r6, #20]
    e992:	9301      	str	r3, [sp, #4]
    e994:	9c01      	ldr	r4, [sp, #4]
    e996:	61b4      	str	r4, [r6, #24]
    e998:	1e63      	subs	r3, r4, #1
    e99a:	419c      	sbcs	r4, r3
    e99c:	3401      	adds	r4, #1
    e99e:	6134      	str	r4, [r6, #16]
    e9a0:	2d00      	cmp	r5, #0
    e9a2:	d018      	beq.n	e9d6 <__d2b+0x82>
    e9a4:	4b12      	ldr	r3, [pc, #72]	; (e9f0 <__d2b+0x9c>)
    e9a6:	18ed      	adds	r5, r5, r3
    e9a8:	2335      	movs	r3, #53	; 0x35
    e9aa:	182d      	adds	r5, r5, r0
    e9ac:	603d      	str	r5, [r7, #0]
    e9ae:	1a18      	subs	r0, r3, r0
    e9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e9b2:	6018      	str	r0, [r3, #0]
    e9b4:	0030      	movs	r0, r6
    e9b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e9b8:	2280      	movs	r2, #128	; 0x80
    e9ba:	0352      	lsls	r2, r2, #13
    e9bc:	4313      	orrs	r3, r2
    e9be:	e7d6      	b.n	e96e <__d2b+0x1a>
    e9c0:	6174      	str	r4, [r6, #20]
    e9c2:	e7e7      	b.n	e994 <__d2b+0x40>
    e9c4:	a801      	add	r0, sp, #4
    e9c6:	f7ff fddd 	bl	e584 <__lo0bits>
    e9ca:	2401      	movs	r4, #1
    e9cc:	9b01      	ldr	r3, [sp, #4]
    e9ce:	6134      	str	r4, [r6, #16]
    e9d0:	6173      	str	r3, [r6, #20]
    e9d2:	3020      	adds	r0, #32
    e9d4:	e7e4      	b.n	e9a0 <__d2b+0x4c>
    e9d6:	4b07      	ldr	r3, [pc, #28]	; (e9f4 <__d2b+0xa0>)
    e9d8:	18c0      	adds	r0, r0, r3
    e9da:	4b07      	ldr	r3, [pc, #28]	; (e9f8 <__d2b+0xa4>)
    e9dc:	6038      	str	r0, [r7, #0]
    e9de:	18e3      	adds	r3, r4, r3
    e9e0:	009b      	lsls	r3, r3, #2
    e9e2:	18f3      	adds	r3, r6, r3
    e9e4:	6958      	ldr	r0, [r3, #20]
    e9e6:	f7ff fdb3 	bl	e550 <__hi0bits>
    e9ea:	0164      	lsls	r4, r4, #5
    e9ec:	1a20      	subs	r0, r4, r0
    e9ee:	e7df      	b.n	e9b0 <__d2b+0x5c>
    e9f0:	fffffbcd 	.word	0xfffffbcd
    e9f4:	fffffbce 	.word	0xfffffbce
    e9f8:	3fffffff 	.word	0x3fffffff

0000e9fc <_calloc_r>:
    e9fc:	434a      	muls	r2, r1
    e9fe:	b570      	push	{r4, r5, r6, lr}
    ea00:	0011      	movs	r1, r2
    ea02:	0014      	movs	r4, r2
    ea04:	f7fd f9b4 	bl	bd70 <_malloc_r>
    ea08:	1e05      	subs	r5, r0, #0
    ea0a:	d003      	beq.n	ea14 <_calloc_r+0x18>
    ea0c:	0022      	movs	r2, r4
    ea0e:	2100      	movs	r1, #0
    ea10:	f7fc ff06 	bl	b820 <memset>
    ea14:	0028      	movs	r0, r5
    ea16:	bd70      	pop	{r4, r5, r6, pc}

0000ea18 <_realloc_r>:
    ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea1a:	0007      	movs	r7, r0
    ea1c:	000d      	movs	r5, r1
    ea1e:	0016      	movs	r6, r2
    ea20:	2900      	cmp	r1, #0
    ea22:	d105      	bne.n	ea30 <_realloc_r+0x18>
    ea24:	0011      	movs	r1, r2
    ea26:	f7fd f9a3 	bl	bd70 <_malloc_r>
    ea2a:	0004      	movs	r4, r0
    ea2c:	0020      	movs	r0, r4
    ea2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea30:	2a00      	cmp	r2, #0
    ea32:	d103      	bne.n	ea3c <_realloc_r+0x24>
    ea34:	f7fd f952 	bl	bcdc <_free_r>
    ea38:	0034      	movs	r4, r6
    ea3a:	e7f7      	b.n	ea2c <_realloc_r+0x14>
    ea3c:	f000 fb44 	bl	f0c8 <_malloc_usable_size_r>
    ea40:	002c      	movs	r4, r5
    ea42:	4286      	cmp	r6, r0
    ea44:	d9f2      	bls.n	ea2c <_realloc_r+0x14>
    ea46:	0031      	movs	r1, r6
    ea48:	0038      	movs	r0, r7
    ea4a:	f7fd f991 	bl	bd70 <_malloc_r>
    ea4e:	1e04      	subs	r4, r0, #0
    ea50:	d0ec      	beq.n	ea2c <_realloc_r+0x14>
    ea52:	0029      	movs	r1, r5
    ea54:	0032      	movs	r2, r6
    ea56:	f7fc fec8 	bl	b7ea <memcpy>
    ea5a:	0029      	movs	r1, r5
    ea5c:	0038      	movs	r0, r7
    ea5e:	f7fd f93d 	bl	bcdc <_free_r>
    ea62:	e7e3      	b.n	ea2c <_realloc_r+0x14>

0000ea64 <__ssputs_r>:
    ea64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea66:	688e      	ldr	r6, [r1, #8]
    ea68:	b085      	sub	sp, #20
    ea6a:	0007      	movs	r7, r0
    ea6c:	000c      	movs	r4, r1
    ea6e:	9203      	str	r2, [sp, #12]
    ea70:	9301      	str	r3, [sp, #4]
    ea72:	429e      	cmp	r6, r3
    ea74:	d839      	bhi.n	eaea <__ssputs_r+0x86>
    ea76:	2390      	movs	r3, #144	; 0x90
    ea78:	898a      	ldrh	r2, [r1, #12]
    ea7a:	00db      	lsls	r3, r3, #3
    ea7c:	421a      	tst	r2, r3
    ea7e:	d034      	beq.n	eaea <__ssputs_r+0x86>
    ea80:	2503      	movs	r5, #3
    ea82:	6909      	ldr	r1, [r1, #16]
    ea84:	6823      	ldr	r3, [r4, #0]
    ea86:	1a5b      	subs	r3, r3, r1
    ea88:	9302      	str	r3, [sp, #8]
    ea8a:	6963      	ldr	r3, [r4, #20]
    ea8c:	9802      	ldr	r0, [sp, #8]
    ea8e:	435d      	muls	r5, r3
    ea90:	0feb      	lsrs	r3, r5, #31
    ea92:	195d      	adds	r5, r3, r5
    ea94:	9b01      	ldr	r3, [sp, #4]
    ea96:	106d      	asrs	r5, r5, #1
    ea98:	3301      	adds	r3, #1
    ea9a:	181b      	adds	r3, r3, r0
    ea9c:	42ab      	cmp	r3, r5
    ea9e:	d900      	bls.n	eaa2 <__ssputs_r+0x3e>
    eaa0:	001d      	movs	r5, r3
    eaa2:	0553      	lsls	r3, r2, #21
    eaa4:	d532      	bpl.n	eb0c <__ssputs_r+0xa8>
    eaa6:	0029      	movs	r1, r5
    eaa8:	0038      	movs	r0, r7
    eaaa:	f7fd f961 	bl	bd70 <_malloc_r>
    eaae:	1e06      	subs	r6, r0, #0
    eab0:	d109      	bne.n	eac6 <__ssputs_r+0x62>
    eab2:	230c      	movs	r3, #12
    eab4:	603b      	str	r3, [r7, #0]
    eab6:	2340      	movs	r3, #64	; 0x40
    eab8:	2001      	movs	r0, #1
    eaba:	89a2      	ldrh	r2, [r4, #12]
    eabc:	4240      	negs	r0, r0
    eabe:	4313      	orrs	r3, r2
    eac0:	81a3      	strh	r3, [r4, #12]
    eac2:	b005      	add	sp, #20
    eac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eac6:	9a02      	ldr	r2, [sp, #8]
    eac8:	6921      	ldr	r1, [r4, #16]
    eaca:	f7fc fe8e 	bl	b7ea <memcpy>
    eace:	89a3      	ldrh	r3, [r4, #12]
    ead0:	4a14      	ldr	r2, [pc, #80]	; (eb24 <__ssputs_r+0xc0>)
    ead2:	401a      	ands	r2, r3
    ead4:	2380      	movs	r3, #128	; 0x80
    ead6:	4313      	orrs	r3, r2
    ead8:	81a3      	strh	r3, [r4, #12]
    eada:	9b02      	ldr	r3, [sp, #8]
    eadc:	6126      	str	r6, [r4, #16]
    eade:	18f6      	adds	r6, r6, r3
    eae0:	6026      	str	r6, [r4, #0]
    eae2:	6165      	str	r5, [r4, #20]
    eae4:	9e01      	ldr	r6, [sp, #4]
    eae6:	1aed      	subs	r5, r5, r3
    eae8:	60a5      	str	r5, [r4, #8]
    eaea:	9b01      	ldr	r3, [sp, #4]
    eaec:	42b3      	cmp	r3, r6
    eaee:	d200      	bcs.n	eaf2 <__ssputs_r+0x8e>
    eaf0:	001e      	movs	r6, r3
    eaf2:	0032      	movs	r2, r6
    eaf4:	9903      	ldr	r1, [sp, #12]
    eaf6:	6820      	ldr	r0, [r4, #0]
    eaf8:	f7fc fe80 	bl	b7fc <memmove>
    eafc:	68a3      	ldr	r3, [r4, #8]
    eafe:	2000      	movs	r0, #0
    eb00:	1b9b      	subs	r3, r3, r6
    eb02:	60a3      	str	r3, [r4, #8]
    eb04:	6823      	ldr	r3, [r4, #0]
    eb06:	199e      	adds	r6, r3, r6
    eb08:	6026      	str	r6, [r4, #0]
    eb0a:	e7da      	b.n	eac2 <__ssputs_r+0x5e>
    eb0c:	002a      	movs	r2, r5
    eb0e:	0038      	movs	r0, r7
    eb10:	f7ff ff82 	bl	ea18 <_realloc_r>
    eb14:	1e06      	subs	r6, r0, #0
    eb16:	d1e0      	bne.n	eada <__ssputs_r+0x76>
    eb18:	6921      	ldr	r1, [r4, #16]
    eb1a:	0038      	movs	r0, r7
    eb1c:	f7fd f8de 	bl	bcdc <_free_r>
    eb20:	e7c7      	b.n	eab2 <__ssputs_r+0x4e>
    eb22:	46c0      	nop			; (mov r8, r8)
    eb24:	fffffb7f 	.word	0xfffffb7f

0000eb28 <_svfiprintf_r>:
    eb28:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb2a:	b09f      	sub	sp, #124	; 0x7c
    eb2c:	9002      	str	r0, [sp, #8]
    eb2e:	9305      	str	r3, [sp, #20]
    eb30:	898b      	ldrh	r3, [r1, #12]
    eb32:	000f      	movs	r7, r1
    eb34:	0016      	movs	r6, r2
    eb36:	061b      	lsls	r3, r3, #24
    eb38:	d511      	bpl.n	eb5e <_svfiprintf_r+0x36>
    eb3a:	690b      	ldr	r3, [r1, #16]
    eb3c:	2b00      	cmp	r3, #0
    eb3e:	d10e      	bne.n	eb5e <_svfiprintf_r+0x36>
    eb40:	2140      	movs	r1, #64	; 0x40
    eb42:	f7fd f915 	bl	bd70 <_malloc_r>
    eb46:	6038      	str	r0, [r7, #0]
    eb48:	6138      	str	r0, [r7, #16]
    eb4a:	2800      	cmp	r0, #0
    eb4c:	d105      	bne.n	eb5a <_svfiprintf_r+0x32>
    eb4e:	230c      	movs	r3, #12
    eb50:	9a02      	ldr	r2, [sp, #8]
    eb52:	3801      	subs	r0, #1
    eb54:	6013      	str	r3, [r2, #0]
    eb56:	b01f      	add	sp, #124	; 0x7c
    eb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb5a:	2340      	movs	r3, #64	; 0x40
    eb5c:	617b      	str	r3, [r7, #20]
    eb5e:	2300      	movs	r3, #0
    eb60:	ad06      	add	r5, sp, #24
    eb62:	616b      	str	r3, [r5, #20]
    eb64:	3320      	adds	r3, #32
    eb66:	766b      	strb	r3, [r5, #25]
    eb68:	3310      	adds	r3, #16
    eb6a:	76ab      	strb	r3, [r5, #26]
    eb6c:	0034      	movs	r4, r6
    eb6e:	7823      	ldrb	r3, [r4, #0]
    eb70:	2b00      	cmp	r3, #0
    eb72:	d147      	bne.n	ec04 <_svfiprintf_r+0xdc>
    eb74:	1ba3      	subs	r3, r4, r6
    eb76:	9304      	str	r3, [sp, #16]
    eb78:	d00d      	beq.n	eb96 <_svfiprintf_r+0x6e>
    eb7a:	1ba3      	subs	r3, r4, r6
    eb7c:	0032      	movs	r2, r6
    eb7e:	0039      	movs	r1, r7
    eb80:	9802      	ldr	r0, [sp, #8]
    eb82:	f7ff ff6f 	bl	ea64 <__ssputs_r>
    eb86:	1c43      	adds	r3, r0, #1
    eb88:	d100      	bne.n	eb8c <_svfiprintf_r+0x64>
    eb8a:	e0b5      	b.n	ecf8 <_svfiprintf_r+0x1d0>
    eb8c:	696a      	ldr	r2, [r5, #20]
    eb8e:	9b04      	ldr	r3, [sp, #16]
    eb90:	4694      	mov	ip, r2
    eb92:	4463      	add	r3, ip
    eb94:	616b      	str	r3, [r5, #20]
    eb96:	7823      	ldrb	r3, [r4, #0]
    eb98:	2b00      	cmp	r3, #0
    eb9a:	d100      	bne.n	eb9e <_svfiprintf_r+0x76>
    eb9c:	e0ac      	b.n	ecf8 <_svfiprintf_r+0x1d0>
    eb9e:	2201      	movs	r2, #1
    eba0:	2300      	movs	r3, #0
    eba2:	4252      	negs	r2, r2
    eba4:	606a      	str	r2, [r5, #4]
    eba6:	a902      	add	r1, sp, #8
    eba8:	3254      	adds	r2, #84	; 0x54
    ebaa:	1852      	adds	r2, r2, r1
    ebac:	3401      	adds	r4, #1
    ebae:	602b      	str	r3, [r5, #0]
    ebb0:	60eb      	str	r3, [r5, #12]
    ebb2:	60ab      	str	r3, [r5, #8]
    ebb4:	7013      	strb	r3, [r2, #0]
    ebb6:	65ab      	str	r3, [r5, #88]	; 0x58
    ebb8:	4e58      	ldr	r6, [pc, #352]	; (ed1c <_svfiprintf_r+0x1f4>)
    ebba:	2205      	movs	r2, #5
    ebbc:	7821      	ldrb	r1, [r4, #0]
    ebbe:	0030      	movs	r0, r6
    ebc0:	f7ff fc2c 	bl	e41c <memchr>
    ebc4:	1c62      	adds	r2, r4, #1
    ebc6:	2800      	cmp	r0, #0
    ebc8:	d120      	bne.n	ec0c <_svfiprintf_r+0xe4>
    ebca:	6829      	ldr	r1, [r5, #0]
    ebcc:	06cb      	lsls	r3, r1, #27
    ebce:	d504      	bpl.n	ebda <_svfiprintf_r+0xb2>
    ebd0:	2353      	movs	r3, #83	; 0x53
    ebd2:	ae02      	add	r6, sp, #8
    ebd4:	3020      	adds	r0, #32
    ebd6:	199b      	adds	r3, r3, r6
    ebd8:	7018      	strb	r0, [r3, #0]
    ebda:	070b      	lsls	r3, r1, #28
    ebdc:	d504      	bpl.n	ebe8 <_svfiprintf_r+0xc0>
    ebde:	2353      	movs	r3, #83	; 0x53
    ebe0:	202b      	movs	r0, #43	; 0x2b
    ebe2:	ae02      	add	r6, sp, #8
    ebe4:	199b      	adds	r3, r3, r6
    ebe6:	7018      	strb	r0, [r3, #0]
    ebe8:	7823      	ldrb	r3, [r4, #0]
    ebea:	2b2a      	cmp	r3, #42	; 0x2a
    ebec:	d016      	beq.n	ec1c <_svfiprintf_r+0xf4>
    ebee:	2000      	movs	r0, #0
    ebf0:	210a      	movs	r1, #10
    ebf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ebf4:	7822      	ldrb	r2, [r4, #0]
    ebf6:	3a30      	subs	r2, #48	; 0x30
    ebf8:	2a09      	cmp	r2, #9
    ebfa:	d955      	bls.n	eca8 <_svfiprintf_r+0x180>
    ebfc:	2800      	cmp	r0, #0
    ebfe:	d015      	beq.n	ec2c <_svfiprintf_r+0x104>
    ec00:	9309      	str	r3, [sp, #36]	; 0x24
    ec02:	e013      	b.n	ec2c <_svfiprintf_r+0x104>
    ec04:	2b25      	cmp	r3, #37	; 0x25
    ec06:	d0b5      	beq.n	eb74 <_svfiprintf_r+0x4c>
    ec08:	3401      	adds	r4, #1
    ec0a:	e7b0      	b.n	eb6e <_svfiprintf_r+0x46>
    ec0c:	2301      	movs	r3, #1
    ec0e:	1b80      	subs	r0, r0, r6
    ec10:	4083      	lsls	r3, r0
    ec12:	6829      	ldr	r1, [r5, #0]
    ec14:	0014      	movs	r4, r2
    ec16:	430b      	orrs	r3, r1
    ec18:	602b      	str	r3, [r5, #0]
    ec1a:	e7cd      	b.n	ebb8 <_svfiprintf_r+0x90>
    ec1c:	9b05      	ldr	r3, [sp, #20]
    ec1e:	1d18      	adds	r0, r3, #4
    ec20:	681b      	ldr	r3, [r3, #0]
    ec22:	9005      	str	r0, [sp, #20]
    ec24:	2b00      	cmp	r3, #0
    ec26:	db39      	blt.n	ec9c <_svfiprintf_r+0x174>
    ec28:	9309      	str	r3, [sp, #36]	; 0x24
    ec2a:	0014      	movs	r4, r2
    ec2c:	7823      	ldrb	r3, [r4, #0]
    ec2e:	2b2e      	cmp	r3, #46	; 0x2e
    ec30:	d10b      	bne.n	ec4a <_svfiprintf_r+0x122>
    ec32:	7863      	ldrb	r3, [r4, #1]
    ec34:	1c62      	adds	r2, r4, #1
    ec36:	2b2a      	cmp	r3, #42	; 0x2a
    ec38:	d13e      	bne.n	ecb8 <_svfiprintf_r+0x190>
    ec3a:	9b05      	ldr	r3, [sp, #20]
    ec3c:	3402      	adds	r4, #2
    ec3e:	1d1a      	adds	r2, r3, #4
    ec40:	681b      	ldr	r3, [r3, #0]
    ec42:	9205      	str	r2, [sp, #20]
    ec44:	2b00      	cmp	r3, #0
    ec46:	db34      	blt.n	ecb2 <_svfiprintf_r+0x18a>
    ec48:	9307      	str	r3, [sp, #28]
    ec4a:	4e35      	ldr	r6, [pc, #212]	; (ed20 <_svfiprintf_r+0x1f8>)
    ec4c:	7821      	ldrb	r1, [r4, #0]
    ec4e:	2203      	movs	r2, #3
    ec50:	0030      	movs	r0, r6
    ec52:	f7ff fbe3 	bl	e41c <memchr>
    ec56:	2800      	cmp	r0, #0
    ec58:	d006      	beq.n	ec68 <_svfiprintf_r+0x140>
    ec5a:	2340      	movs	r3, #64	; 0x40
    ec5c:	1b80      	subs	r0, r0, r6
    ec5e:	4083      	lsls	r3, r0
    ec60:	682a      	ldr	r2, [r5, #0]
    ec62:	3401      	adds	r4, #1
    ec64:	4313      	orrs	r3, r2
    ec66:	602b      	str	r3, [r5, #0]
    ec68:	7821      	ldrb	r1, [r4, #0]
    ec6a:	2206      	movs	r2, #6
    ec6c:	482d      	ldr	r0, [pc, #180]	; (ed24 <_svfiprintf_r+0x1fc>)
    ec6e:	1c66      	adds	r6, r4, #1
    ec70:	7629      	strb	r1, [r5, #24]
    ec72:	f7ff fbd3 	bl	e41c <memchr>
    ec76:	2800      	cmp	r0, #0
    ec78:	d046      	beq.n	ed08 <_svfiprintf_r+0x1e0>
    ec7a:	4b2b      	ldr	r3, [pc, #172]	; (ed28 <_svfiprintf_r+0x200>)
    ec7c:	2b00      	cmp	r3, #0
    ec7e:	d12f      	bne.n	ece0 <_svfiprintf_r+0x1b8>
    ec80:	6829      	ldr	r1, [r5, #0]
    ec82:	9b05      	ldr	r3, [sp, #20]
    ec84:	2207      	movs	r2, #7
    ec86:	05c9      	lsls	r1, r1, #23
    ec88:	d528      	bpl.n	ecdc <_svfiprintf_r+0x1b4>
    ec8a:	189b      	adds	r3, r3, r2
    ec8c:	4393      	bics	r3, r2
    ec8e:	3308      	adds	r3, #8
    ec90:	9305      	str	r3, [sp, #20]
    ec92:	696b      	ldr	r3, [r5, #20]
    ec94:	9a03      	ldr	r2, [sp, #12]
    ec96:	189b      	adds	r3, r3, r2
    ec98:	616b      	str	r3, [r5, #20]
    ec9a:	e767      	b.n	eb6c <_svfiprintf_r+0x44>
    ec9c:	425b      	negs	r3, r3
    ec9e:	60eb      	str	r3, [r5, #12]
    eca0:	2302      	movs	r3, #2
    eca2:	430b      	orrs	r3, r1
    eca4:	602b      	str	r3, [r5, #0]
    eca6:	e7c0      	b.n	ec2a <_svfiprintf_r+0x102>
    eca8:	434b      	muls	r3, r1
    ecaa:	3401      	adds	r4, #1
    ecac:	189b      	adds	r3, r3, r2
    ecae:	2001      	movs	r0, #1
    ecb0:	e7a0      	b.n	ebf4 <_svfiprintf_r+0xcc>
    ecb2:	2301      	movs	r3, #1
    ecb4:	425b      	negs	r3, r3
    ecb6:	e7c7      	b.n	ec48 <_svfiprintf_r+0x120>
    ecb8:	2300      	movs	r3, #0
    ecba:	0014      	movs	r4, r2
    ecbc:	200a      	movs	r0, #10
    ecbe:	001a      	movs	r2, r3
    ecc0:	606b      	str	r3, [r5, #4]
    ecc2:	7821      	ldrb	r1, [r4, #0]
    ecc4:	3930      	subs	r1, #48	; 0x30
    ecc6:	2909      	cmp	r1, #9
    ecc8:	d903      	bls.n	ecd2 <_svfiprintf_r+0x1aa>
    ecca:	2b00      	cmp	r3, #0
    eccc:	d0bd      	beq.n	ec4a <_svfiprintf_r+0x122>
    ecce:	9207      	str	r2, [sp, #28]
    ecd0:	e7bb      	b.n	ec4a <_svfiprintf_r+0x122>
    ecd2:	4342      	muls	r2, r0
    ecd4:	3401      	adds	r4, #1
    ecd6:	1852      	adds	r2, r2, r1
    ecd8:	2301      	movs	r3, #1
    ecda:	e7f2      	b.n	ecc2 <_svfiprintf_r+0x19a>
    ecdc:	3307      	adds	r3, #7
    ecde:	e7d5      	b.n	ec8c <_svfiprintf_r+0x164>
    ece0:	ab05      	add	r3, sp, #20
    ece2:	9300      	str	r3, [sp, #0]
    ece4:	003a      	movs	r2, r7
    ece6:	4b11      	ldr	r3, [pc, #68]	; (ed2c <_svfiprintf_r+0x204>)
    ece8:	0029      	movs	r1, r5
    ecea:	9802      	ldr	r0, [sp, #8]
    ecec:	f7fd fa7e 	bl	c1ec <_printf_float>
    ecf0:	9003      	str	r0, [sp, #12]
    ecf2:	9b03      	ldr	r3, [sp, #12]
    ecf4:	3301      	adds	r3, #1
    ecf6:	d1cc      	bne.n	ec92 <_svfiprintf_r+0x16a>
    ecf8:	89bb      	ldrh	r3, [r7, #12]
    ecfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ecfc:	065b      	lsls	r3, r3, #25
    ecfe:	d400      	bmi.n	ed02 <_svfiprintf_r+0x1da>
    ed00:	e729      	b.n	eb56 <_svfiprintf_r+0x2e>
    ed02:	2001      	movs	r0, #1
    ed04:	4240      	negs	r0, r0
    ed06:	e726      	b.n	eb56 <_svfiprintf_r+0x2e>
    ed08:	ab05      	add	r3, sp, #20
    ed0a:	9300      	str	r3, [sp, #0]
    ed0c:	003a      	movs	r2, r7
    ed0e:	4b07      	ldr	r3, [pc, #28]	; (ed2c <_svfiprintf_r+0x204>)
    ed10:	0029      	movs	r1, r5
    ed12:	9802      	ldr	r0, [sp, #8]
    ed14:	f7fd fd24 	bl	c760 <_printf_i>
    ed18:	e7ea      	b.n	ecf0 <_svfiprintf_r+0x1c8>
    ed1a:	46c0      	nop			; (mov r8, r8)
    ed1c:	00011018 	.word	0x00011018
    ed20:	0001101e 	.word	0x0001101e
    ed24:	00011022 	.word	0x00011022
    ed28:	0000c1ed 	.word	0x0000c1ed
    ed2c:	0000ea65 	.word	0x0000ea65

0000ed30 <_raise_r>:
    ed30:	b570      	push	{r4, r5, r6, lr}
    ed32:	0004      	movs	r4, r0
    ed34:	000d      	movs	r5, r1
    ed36:	291f      	cmp	r1, #31
    ed38:	d904      	bls.n	ed44 <_raise_r+0x14>
    ed3a:	2316      	movs	r3, #22
    ed3c:	6003      	str	r3, [r0, #0]
    ed3e:	2001      	movs	r0, #1
    ed40:	4240      	negs	r0, r0
    ed42:	bd70      	pop	{r4, r5, r6, pc}
    ed44:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ed46:	2b00      	cmp	r3, #0
    ed48:	d004      	beq.n	ed54 <_raise_r+0x24>
    ed4a:	008a      	lsls	r2, r1, #2
    ed4c:	189b      	adds	r3, r3, r2
    ed4e:	681a      	ldr	r2, [r3, #0]
    ed50:	2a00      	cmp	r2, #0
    ed52:	d108      	bne.n	ed66 <_raise_r+0x36>
    ed54:	0020      	movs	r0, r4
    ed56:	f000 f831 	bl	edbc <_getpid_r>
    ed5a:	002a      	movs	r2, r5
    ed5c:	0001      	movs	r1, r0
    ed5e:	0020      	movs	r0, r4
    ed60:	f000 f81a 	bl	ed98 <_kill_r>
    ed64:	e7ed      	b.n	ed42 <_raise_r+0x12>
    ed66:	2000      	movs	r0, #0
    ed68:	2a01      	cmp	r2, #1
    ed6a:	d0ea      	beq.n	ed42 <_raise_r+0x12>
    ed6c:	1c51      	adds	r1, r2, #1
    ed6e:	d103      	bne.n	ed78 <_raise_r+0x48>
    ed70:	2316      	movs	r3, #22
    ed72:	3001      	adds	r0, #1
    ed74:	6023      	str	r3, [r4, #0]
    ed76:	e7e4      	b.n	ed42 <_raise_r+0x12>
    ed78:	2400      	movs	r4, #0
    ed7a:	0028      	movs	r0, r5
    ed7c:	601c      	str	r4, [r3, #0]
    ed7e:	4790      	blx	r2
    ed80:	0020      	movs	r0, r4
    ed82:	e7de      	b.n	ed42 <_raise_r+0x12>

0000ed84 <raise>:
    ed84:	b510      	push	{r4, lr}
    ed86:	4b03      	ldr	r3, [pc, #12]	; (ed94 <raise+0x10>)
    ed88:	0001      	movs	r1, r0
    ed8a:	6818      	ldr	r0, [r3, #0]
    ed8c:	f7ff ffd0 	bl	ed30 <_raise_r>
    ed90:	bd10      	pop	{r4, pc}
    ed92:	46c0      	nop			; (mov r8, r8)
    ed94:	200000b4 	.word	0x200000b4

0000ed98 <_kill_r>:
    ed98:	2300      	movs	r3, #0
    ed9a:	b570      	push	{r4, r5, r6, lr}
    ed9c:	4c06      	ldr	r4, [pc, #24]	; (edb8 <_kill_r+0x20>)
    ed9e:	0005      	movs	r5, r0
    eda0:	0008      	movs	r0, r1
    eda2:	0011      	movs	r1, r2
    eda4:	6023      	str	r3, [r4, #0]
    eda6:	f000 fd81 	bl	f8ac <_kill>
    edaa:	1c43      	adds	r3, r0, #1
    edac:	d103      	bne.n	edb6 <_kill_r+0x1e>
    edae:	6823      	ldr	r3, [r4, #0]
    edb0:	2b00      	cmp	r3, #0
    edb2:	d000      	beq.n	edb6 <_kill_r+0x1e>
    edb4:	602b      	str	r3, [r5, #0]
    edb6:	bd70      	pop	{r4, r5, r6, pc}
    edb8:	20001e60 	.word	0x20001e60

0000edbc <_getpid_r>:
    edbc:	b510      	push	{r4, lr}
    edbe:	f000 fd65 	bl	f88c <_getpid>
    edc2:	bd10      	pop	{r4, pc}

0000edc4 <siscanf>:
    edc4:	b40e      	push	{r1, r2, r3}
    edc6:	2381      	movs	r3, #129	; 0x81
    edc8:	b570      	push	{r4, r5, r6, lr}
    edca:	b09d      	sub	sp, #116	; 0x74
    edcc:	ac02      	add	r4, sp, #8
    edce:	ad21      	add	r5, sp, #132	; 0x84
    edd0:	009b      	lsls	r3, r3, #2
    edd2:	cd40      	ldmia	r5!, {r6}
    edd4:	81a3      	strh	r3, [r4, #12]
    edd6:	9002      	str	r0, [sp, #8]
    edd8:	9006      	str	r0, [sp, #24]
    edda:	f7fd fe2e 	bl	ca3a <strlen>
    edde:	4b0b      	ldr	r3, [pc, #44]	; (ee0c <siscanf+0x48>)
    ede0:	6060      	str	r0, [r4, #4]
    ede2:	6263      	str	r3, [r4, #36]	; 0x24
    ede4:	2300      	movs	r3, #0
    ede6:	6160      	str	r0, [r4, #20]
    ede8:	4809      	ldr	r0, [pc, #36]	; (ee10 <siscanf+0x4c>)
    edea:	6363      	str	r3, [r4, #52]	; 0x34
    edec:	64a3      	str	r3, [r4, #72]	; 0x48
    edee:	3b01      	subs	r3, #1
    edf0:	81e3      	strh	r3, [r4, #14]
    edf2:	0032      	movs	r2, r6
    edf4:	002b      	movs	r3, r5
    edf6:	0021      	movs	r1, r4
    edf8:	6800      	ldr	r0, [r0, #0]
    edfa:	9501      	str	r5, [sp, #4]
    edfc:	f000 f9c8 	bl	f190 <__ssvfiscanf_r>
    ee00:	b01d      	add	sp, #116	; 0x74
    ee02:	bc70      	pop	{r4, r5, r6}
    ee04:	bc08      	pop	{r3}
    ee06:	b003      	add	sp, #12
    ee08:	4718      	bx	r3
    ee0a:	46c0      	nop			; (mov r8, r8)
    ee0c:	0000ee3d 	.word	0x0000ee3d
    ee10:	200000b4 	.word	0x200000b4

0000ee14 <__sread>:
    ee14:	b570      	push	{r4, r5, r6, lr}
    ee16:	000c      	movs	r4, r1
    ee18:	250e      	movs	r5, #14
    ee1a:	5f49      	ldrsh	r1, [r1, r5]
    ee1c:	f000 fca2 	bl	f764 <_read_r>
    ee20:	2800      	cmp	r0, #0
    ee22:	db03      	blt.n	ee2c <__sread+0x18>
    ee24:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ee26:	181b      	adds	r3, r3, r0
    ee28:	6563      	str	r3, [r4, #84]	; 0x54
    ee2a:	bd70      	pop	{r4, r5, r6, pc}
    ee2c:	89a3      	ldrh	r3, [r4, #12]
    ee2e:	4a02      	ldr	r2, [pc, #8]	; (ee38 <__sread+0x24>)
    ee30:	4013      	ands	r3, r2
    ee32:	81a3      	strh	r3, [r4, #12]
    ee34:	e7f9      	b.n	ee2a <__sread+0x16>
    ee36:	46c0      	nop			; (mov r8, r8)
    ee38:	ffffefff 	.word	0xffffefff

0000ee3c <__seofread>:
    ee3c:	2000      	movs	r0, #0
    ee3e:	4770      	bx	lr

0000ee40 <__swrite>:
    ee40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee42:	001f      	movs	r7, r3
    ee44:	898b      	ldrh	r3, [r1, #12]
    ee46:	0005      	movs	r5, r0
    ee48:	000c      	movs	r4, r1
    ee4a:	0016      	movs	r6, r2
    ee4c:	05db      	lsls	r3, r3, #23
    ee4e:	d505      	bpl.n	ee5c <__swrite+0x1c>
    ee50:	230e      	movs	r3, #14
    ee52:	5ec9      	ldrsh	r1, [r1, r3]
    ee54:	2200      	movs	r2, #0
    ee56:	2302      	movs	r3, #2
    ee58:	f000 f922 	bl	f0a0 <_lseek_r>
    ee5c:	89a3      	ldrh	r3, [r4, #12]
    ee5e:	4a05      	ldr	r2, [pc, #20]	; (ee74 <__swrite+0x34>)
    ee60:	0028      	movs	r0, r5
    ee62:	4013      	ands	r3, r2
    ee64:	81a3      	strh	r3, [r4, #12]
    ee66:	0032      	movs	r2, r6
    ee68:	230e      	movs	r3, #14
    ee6a:	5ee1      	ldrsh	r1, [r4, r3]
    ee6c:	003b      	movs	r3, r7
    ee6e:	f000 f8cb 	bl	f008 <_write_r>
    ee72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee74:	ffffefff 	.word	0xffffefff

0000ee78 <__sseek>:
    ee78:	b570      	push	{r4, r5, r6, lr}
    ee7a:	000c      	movs	r4, r1
    ee7c:	250e      	movs	r5, #14
    ee7e:	5f49      	ldrsh	r1, [r1, r5]
    ee80:	f000 f90e 	bl	f0a0 <_lseek_r>
    ee84:	89a3      	ldrh	r3, [r4, #12]
    ee86:	1c42      	adds	r2, r0, #1
    ee88:	d103      	bne.n	ee92 <__sseek+0x1a>
    ee8a:	4a05      	ldr	r2, [pc, #20]	; (eea0 <__sseek+0x28>)
    ee8c:	4013      	ands	r3, r2
    ee8e:	81a3      	strh	r3, [r4, #12]
    ee90:	bd70      	pop	{r4, r5, r6, pc}
    ee92:	2280      	movs	r2, #128	; 0x80
    ee94:	0152      	lsls	r2, r2, #5
    ee96:	4313      	orrs	r3, r2
    ee98:	81a3      	strh	r3, [r4, #12]
    ee9a:	6560      	str	r0, [r4, #84]	; 0x54
    ee9c:	e7f8      	b.n	ee90 <__sseek+0x18>
    ee9e:	46c0      	nop			; (mov r8, r8)
    eea0:	ffffefff 	.word	0xffffefff

0000eea4 <__sclose>:
    eea4:	b510      	push	{r4, lr}
    eea6:	230e      	movs	r3, #14
    eea8:	5ec9      	ldrsh	r1, [r1, r3]
    eeaa:	f000 f8c1 	bl	f030 <_close_r>
    eeae:	bd10      	pop	{r4, pc}

0000eeb0 <_strtoul_l.isra.0>:
    eeb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    eeb2:	001f      	movs	r7, r3
    eeb4:	000e      	movs	r6, r1
    eeb6:	b087      	sub	sp, #28
    eeb8:	9005      	str	r0, [sp, #20]
    eeba:	9103      	str	r1, [sp, #12]
    eebc:	9201      	str	r2, [sp, #4]
    eebe:	980c      	ldr	r0, [sp, #48]	; 0x30
    eec0:	7834      	ldrb	r4, [r6, #0]
    eec2:	f7fc fc4b 	bl	b75c <__locale_ctype_ptr_l>
    eec6:	2208      	movs	r2, #8
    eec8:	1900      	adds	r0, r0, r4
    eeca:	7843      	ldrb	r3, [r0, #1]
    eecc:	1c75      	adds	r5, r6, #1
    eece:	4013      	ands	r3, r2
    eed0:	d10c      	bne.n	eeec <_strtoul_l.isra.0+0x3c>
    eed2:	2c2d      	cmp	r4, #45	; 0x2d
    eed4:	d10c      	bne.n	eef0 <_strtoul_l.isra.0+0x40>
    eed6:	3301      	adds	r3, #1
    eed8:	782c      	ldrb	r4, [r5, #0]
    eeda:	9302      	str	r3, [sp, #8]
    eedc:	1cb5      	adds	r5, r6, #2
    eede:	2f00      	cmp	r7, #0
    eee0:	d00c      	beq.n	eefc <_strtoul_l.isra.0+0x4c>
    eee2:	2f10      	cmp	r7, #16
    eee4:	d114      	bne.n	ef10 <_strtoul_l.isra.0+0x60>
    eee6:	2c30      	cmp	r4, #48	; 0x30
    eee8:	d00a      	beq.n	ef00 <_strtoul_l.isra.0+0x50>
    eeea:	e011      	b.n	ef10 <_strtoul_l.isra.0+0x60>
    eeec:	002e      	movs	r6, r5
    eeee:	e7e6      	b.n	eebe <_strtoul_l.isra.0+0xe>
    eef0:	9302      	str	r3, [sp, #8]
    eef2:	2c2b      	cmp	r4, #43	; 0x2b
    eef4:	d1f3      	bne.n	eede <_strtoul_l.isra.0+0x2e>
    eef6:	782c      	ldrb	r4, [r5, #0]
    eef8:	1cb5      	adds	r5, r6, #2
    eefa:	e7f0      	b.n	eede <_strtoul_l.isra.0+0x2e>
    eefc:	2c30      	cmp	r4, #48	; 0x30
    eefe:	d12f      	bne.n	ef60 <_strtoul_l.isra.0+0xb0>
    ef00:	2220      	movs	r2, #32
    ef02:	782b      	ldrb	r3, [r5, #0]
    ef04:	4393      	bics	r3, r2
    ef06:	2b58      	cmp	r3, #88	; 0x58
    ef08:	d154      	bne.n	efb4 <_strtoul_l.isra.0+0x104>
    ef0a:	2710      	movs	r7, #16
    ef0c:	786c      	ldrb	r4, [r5, #1]
    ef0e:	3502      	adds	r5, #2
    ef10:	2001      	movs	r0, #1
    ef12:	0039      	movs	r1, r7
    ef14:	4240      	negs	r0, r0
    ef16:	f7f9 fb19 	bl	854c <__udivsi3>
    ef1a:	0006      	movs	r6, r0
    ef1c:	2001      	movs	r0, #1
    ef1e:	0039      	movs	r1, r7
    ef20:	4240      	negs	r0, r0
    ef22:	f7f9 fb99 	bl	8658 <__aeabi_uidivmod>
    ef26:	2300      	movs	r3, #0
    ef28:	9104      	str	r1, [sp, #16]
    ef2a:	2101      	movs	r1, #1
    ef2c:	2201      	movs	r2, #1
    ef2e:	0018      	movs	r0, r3
    ef30:	468c      	mov	ip, r1
    ef32:	4252      	negs	r2, r2
    ef34:	0021      	movs	r1, r4
    ef36:	3930      	subs	r1, #48	; 0x30
    ef38:	2909      	cmp	r1, #9
    ef3a:	d813      	bhi.n	ef64 <_strtoul_l.isra.0+0xb4>
    ef3c:	000c      	movs	r4, r1
    ef3e:	42a7      	cmp	r7, r4
    ef40:	dd1e      	ble.n	ef80 <_strtoul_l.isra.0+0xd0>
    ef42:	2b00      	cmp	r3, #0
    ef44:	db1a      	blt.n	ef7c <_strtoul_l.isra.0+0xcc>
    ef46:	0013      	movs	r3, r2
    ef48:	4286      	cmp	r6, r0
    ef4a:	d306      	bcc.n	ef5a <_strtoul_l.isra.0+0xaa>
    ef4c:	d102      	bne.n	ef54 <_strtoul_l.isra.0+0xa4>
    ef4e:	9904      	ldr	r1, [sp, #16]
    ef50:	42a1      	cmp	r1, r4
    ef52:	db02      	blt.n	ef5a <_strtoul_l.isra.0+0xaa>
    ef54:	4663      	mov	r3, ip
    ef56:	4378      	muls	r0, r7
    ef58:	1820      	adds	r0, r4, r0
    ef5a:	782c      	ldrb	r4, [r5, #0]
    ef5c:	3501      	adds	r5, #1
    ef5e:	e7e9      	b.n	ef34 <_strtoul_l.isra.0+0x84>
    ef60:	270a      	movs	r7, #10
    ef62:	e7d5      	b.n	ef10 <_strtoul_l.isra.0+0x60>
    ef64:	0021      	movs	r1, r4
    ef66:	3941      	subs	r1, #65	; 0x41
    ef68:	2919      	cmp	r1, #25
    ef6a:	d801      	bhi.n	ef70 <_strtoul_l.isra.0+0xc0>
    ef6c:	3c37      	subs	r4, #55	; 0x37
    ef6e:	e7e6      	b.n	ef3e <_strtoul_l.isra.0+0x8e>
    ef70:	0021      	movs	r1, r4
    ef72:	3961      	subs	r1, #97	; 0x61
    ef74:	2919      	cmp	r1, #25
    ef76:	d803      	bhi.n	ef80 <_strtoul_l.isra.0+0xd0>
    ef78:	3c57      	subs	r4, #87	; 0x57
    ef7a:	e7e0      	b.n	ef3e <_strtoul_l.isra.0+0x8e>
    ef7c:	0013      	movs	r3, r2
    ef7e:	e7ec      	b.n	ef5a <_strtoul_l.isra.0+0xaa>
    ef80:	2b00      	cmp	r3, #0
    ef82:	da09      	bge.n	ef98 <_strtoul_l.isra.0+0xe8>
    ef84:	2322      	movs	r3, #34	; 0x22
    ef86:	2001      	movs	r0, #1
    ef88:	9a05      	ldr	r2, [sp, #20]
    ef8a:	4240      	negs	r0, r0
    ef8c:	6013      	str	r3, [r2, #0]
    ef8e:	9b01      	ldr	r3, [sp, #4]
    ef90:	2b00      	cmp	r3, #0
    ef92:	d10b      	bne.n	efac <_strtoul_l.isra.0+0xfc>
    ef94:	b007      	add	sp, #28
    ef96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef98:	9a02      	ldr	r2, [sp, #8]
    ef9a:	2a00      	cmp	r2, #0
    ef9c:	d000      	beq.n	efa0 <_strtoul_l.isra.0+0xf0>
    ef9e:	4240      	negs	r0, r0
    efa0:	9a01      	ldr	r2, [sp, #4]
    efa2:	2a00      	cmp	r2, #0
    efa4:	d0f6      	beq.n	ef94 <_strtoul_l.isra.0+0xe4>
    efa6:	9a03      	ldr	r2, [sp, #12]
    efa8:	2b00      	cmp	r3, #0
    efaa:	d000      	beq.n	efae <_strtoul_l.isra.0+0xfe>
    efac:	1e6a      	subs	r2, r5, #1
    efae:	9b01      	ldr	r3, [sp, #4]
    efb0:	601a      	str	r2, [r3, #0]
    efb2:	e7ef      	b.n	ef94 <_strtoul_l.isra.0+0xe4>
    efb4:	2430      	movs	r4, #48	; 0x30
    efb6:	2f00      	cmp	r7, #0
    efb8:	d1aa      	bne.n	ef10 <_strtoul_l.isra.0+0x60>
    efba:	3708      	adds	r7, #8
    efbc:	e7a8      	b.n	ef10 <_strtoul_l.isra.0+0x60>
	...

0000efc0 <_strtoul_r>:
    efc0:	b513      	push	{r0, r1, r4, lr}
    efc2:	4c05      	ldr	r4, [pc, #20]	; (efd8 <_strtoul_r+0x18>)
    efc4:	6824      	ldr	r4, [r4, #0]
    efc6:	6a24      	ldr	r4, [r4, #32]
    efc8:	2c00      	cmp	r4, #0
    efca:	d100      	bne.n	efce <_strtoul_r+0xe>
    efcc:	4c03      	ldr	r4, [pc, #12]	; (efdc <_strtoul_r+0x1c>)
    efce:	9400      	str	r4, [sp, #0]
    efd0:	f7ff ff6e 	bl	eeb0 <_strtoul_l.isra.0>
    efd4:	bd16      	pop	{r1, r2, r4, pc}
    efd6:	46c0      	nop			; (mov r8, r8)
    efd8:	200000b4 	.word	0x200000b4
    efdc:	20000118 	.word	0x20000118

0000efe0 <strtoul>:
    efe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    efe2:	0013      	movs	r3, r2
    efe4:	4a06      	ldr	r2, [pc, #24]	; (f000 <strtoul+0x20>)
    efe6:	0005      	movs	r5, r0
    efe8:	6810      	ldr	r0, [r2, #0]
    efea:	6a04      	ldr	r4, [r0, #32]
    efec:	2c00      	cmp	r4, #0
    efee:	d100      	bne.n	eff2 <strtoul+0x12>
    eff0:	4c04      	ldr	r4, [pc, #16]	; (f004 <strtoul+0x24>)
    eff2:	000a      	movs	r2, r1
    eff4:	9400      	str	r4, [sp, #0]
    eff6:	0029      	movs	r1, r5
    eff8:	f7ff ff5a 	bl	eeb0 <_strtoul_l.isra.0>
    effc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    effe:	46c0      	nop			; (mov r8, r8)
    f000:	200000b4 	.word	0x200000b4
    f004:	20000118 	.word	0x20000118

0000f008 <_write_r>:
    f008:	b570      	push	{r4, r5, r6, lr}
    f00a:	0005      	movs	r5, r0
    f00c:	0008      	movs	r0, r1
    f00e:	0011      	movs	r1, r2
    f010:	2200      	movs	r2, #0
    f012:	4c06      	ldr	r4, [pc, #24]	; (f02c <_write_r+0x24>)
    f014:	6022      	str	r2, [r4, #0]
    f016:	001a      	movs	r2, r3
    f018:	f000 fc6e 	bl	f8f8 <_write>
    f01c:	1c43      	adds	r3, r0, #1
    f01e:	d103      	bne.n	f028 <_write_r+0x20>
    f020:	6823      	ldr	r3, [r4, #0]
    f022:	2b00      	cmp	r3, #0
    f024:	d000      	beq.n	f028 <_write_r+0x20>
    f026:	602b      	str	r3, [r5, #0]
    f028:	bd70      	pop	{r4, r5, r6, pc}
    f02a:	46c0      	nop			; (mov r8, r8)
    f02c:	20001e60 	.word	0x20001e60

0000f030 <_close_r>:
    f030:	2300      	movs	r3, #0
    f032:	b570      	push	{r4, r5, r6, lr}
    f034:	4c06      	ldr	r4, [pc, #24]	; (f050 <_close_r+0x20>)
    f036:	0005      	movs	r5, r0
    f038:	0008      	movs	r0, r1
    f03a:	6023      	str	r3, [r4, #0]
    f03c:	f000 fc16 	bl	f86c <_close>
    f040:	1c43      	adds	r3, r0, #1
    f042:	d103      	bne.n	f04c <_close_r+0x1c>
    f044:	6823      	ldr	r3, [r4, #0]
    f046:	2b00      	cmp	r3, #0
    f048:	d000      	beq.n	f04c <_close_r+0x1c>
    f04a:	602b      	str	r3, [r5, #0]
    f04c:	bd70      	pop	{r4, r5, r6, pc}
    f04e:	46c0      	nop			; (mov r8, r8)
    f050:	20001e60 	.word	0x20001e60

0000f054 <__env_lock>:
    f054:	4770      	bx	lr

0000f056 <__env_unlock>:
    f056:	4770      	bx	lr

0000f058 <_fstat_r>:
    f058:	2300      	movs	r3, #0
    f05a:	b570      	push	{r4, r5, r6, lr}
    f05c:	4c06      	ldr	r4, [pc, #24]	; (f078 <_fstat_r+0x20>)
    f05e:	0005      	movs	r5, r0
    f060:	0008      	movs	r0, r1
    f062:	0011      	movs	r1, r2
    f064:	6023      	str	r3, [r4, #0]
    f066:	f000 fc09 	bl	f87c <_fstat>
    f06a:	1c43      	adds	r3, r0, #1
    f06c:	d103      	bne.n	f076 <_fstat_r+0x1e>
    f06e:	6823      	ldr	r3, [r4, #0]
    f070:	2b00      	cmp	r3, #0
    f072:	d000      	beq.n	f076 <_fstat_r+0x1e>
    f074:	602b      	str	r3, [r5, #0]
    f076:	bd70      	pop	{r4, r5, r6, pc}
    f078:	20001e60 	.word	0x20001e60

0000f07c <_isatty_r>:
    f07c:	2300      	movs	r3, #0
    f07e:	b570      	push	{r4, r5, r6, lr}
    f080:	4c06      	ldr	r4, [pc, #24]	; (f09c <_isatty_r+0x20>)
    f082:	0005      	movs	r5, r0
    f084:	0008      	movs	r0, r1
    f086:	6023      	str	r3, [r4, #0]
    f088:	f000 fc08 	bl	f89c <_isatty>
    f08c:	1c43      	adds	r3, r0, #1
    f08e:	d103      	bne.n	f098 <_isatty_r+0x1c>
    f090:	6823      	ldr	r3, [r4, #0]
    f092:	2b00      	cmp	r3, #0
    f094:	d000      	beq.n	f098 <_isatty_r+0x1c>
    f096:	602b      	str	r3, [r5, #0]
    f098:	bd70      	pop	{r4, r5, r6, pc}
    f09a:	46c0      	nop			; (mov r8, r8)
    f09c:	20001e60 	.word	0x20001e60

0000f0a0 <_lseek_r>:
    f0a0:	b570      	push	{r4, r5, r6, lr}
    f0a2:	0005      	movs	r5, r0
    f0a4:	0008      	movs	r0, r1
    f0a6:	0011      	movs	r1, r2
    f0a8:	2200      	movs	r2, #0
    f0aa:	4c06      	ldr	r4, [pc, #24]	; (f0c4 <_lseek_r+0x24>)
    f0ac:	6022      	str	r2, [r4, #0]
    f0ae:	001a      	movs	r2, r3
    f0b0:	f000 fc04 	bl	f8bc <_lseek>
    f0b4:	1c43      	adds	r3, r0, #1
    f0b6:	d103      	bne.n	f0c0 <_lseek_r+0x20>
    f0b8:	6823      	ldr	r3, [r4, #0]
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d000      	beq.n	f0c0 <_lseek_r+0x20>
    f0be:	602b      	str	r3, [r5, #0]
    f0c0:	bd70      	pop	{r4, r5, r6, pc}
    f0c2:	46c0      	nop			; (mov r8, r8)
    f0c4:	20001e60 	.word	0x20001e60

0000f0c8 <_malloc_usable_size_r>:
    f0c8:	1f0b      	subs	r3, r1, #4
    f0ca:	681b      	ldr	r3, [r3, #0]
    f0cc:	1f18      	subs	r0, r3, #4
    f0ce:	2b00      	cmp	r3, #0
    f0d0:	da01      	bge.n	f0d6 <_malloc_usable_size_r+0xe>
    f0d2:	580b      	ldr	r3, [r1, r0]
    f0d4:	18c0      	adds	r0, r0, r3
    f0d6:	4770      	bx	lr

0000f0d8 <_sungetc_r>:
    f0d8:	b570      	push	{r4, r5, r6, lr}
    f0da:	0014      	movs	r4, r2
    f0dc:	1c4b      	adds	r3, r1, #1
    f0de:	d103      	bne.n	f0e8 <_sungetc_r+0x10>
    f0e0:	2501      	movs	r5, #1
    f0e2:	426d      	negs	r5, r5
    f0e4:	0028      	movs	r0, r5
    f0e6:	bd70      	pop	{r4, r5, r6, pc}
    f0e8:	8993      	ldrh	r3, [r2, #12]
    f0ea:	2220      	movs	r2, #32
    f0ec:	4393      	bics	r3, r2
    f0ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
    f0f0:	81a3      	strh	r3, [r4, #12]
    f0f2:	b2ce      	uxtb	r6, r1
    f0f4:	b2cd      	uxtb	r5, r1
    f0f6:	6863      	ldr	r3, [r4, #4]
    f0f8:	2a00      	cmp	r2, #0
    f0fa:	d010      	beq.n	f11e <_sungetc_r+0x46>
    f0fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    f0fe:	4293      	cmp	r3, r2
    f100:	da07      	bge.n	f112 <_sungetc_r+0x3a>
    f102:	6823      	ldr	r3, [r4, #0]
    f104:	3b01      	subs	r3, #1
    f106:	6023      	str	r3, [r4, #0]
    f108:	701e      	strb	r6, [r3, #0]
    f10a:	6863      	ldr	r3, [r4, #4]
    f10c:	3301      	adds	r3, #1
    f10e:	6063      	str	r3, [r4, #4]
    f110:	e7e8      	b.n	f0e4 <_sungetc_r+0xc>
    f112:	0021      	movs	r1, r4
    f114:	f000 fb6c 	bl	f7f0 <__submore>
    f118:	2800      	cmp	r0, #0
    f11a:	d0f2      	beq.n	f102 <_sungetc_r+0x2a>
    f11c:	e7e0      	b.n	f0e0 <_sungetc_r+0x8>
    f11e:	6921      	ldr	r1, [r4, #16]
    f120:	6822      	ldr	r2, [r4, #0]
    f122:	2900      	cmp	r1, #0
    f124:	d007      	beq.n	f136 <_sungetc_r+0x5e>
    f126:	4291      	cmp	r1, r2
    f128:	d205      	bcs.n	f136 <_sungetc_r+0x5e>
    f12a:	1e51      	subs	r1, r2, #1
    f12c:	7808      	ldrb	r0, [r1, #0]
    f12e:	4285      	cmp	r5, r0
    f130:	d101      	bne.n	f136 <_sungetc_r+0x5e>
    f132:	6021      	str	r1, [r4, #0]
    f134:	e7ea      	b.n	f10c <_sungetc_r+0x34>
    f136:	6423      	str	r3, [r4, #64]	; 0x40
    f138:	0023      	movs	r3, r4
    f13a:	3344      	adds	r3, #68	; 0x44
    f13c:	6363      	str	r3, [r4, #52]	; 0x34
    f13e:	2303      	movs	r3, #3
    f140:	63a3      	str	r3, [r4, #56]	; 0x38
    f142:	0023      	movs	r3, r4
    f144:	3346      	adds	r3, #70	; 0x46
    f146:	63e2      	str	r2, [r4, #60]	; 0x3c
    f148:	701e      	strb	r6, [r3, #0]
    f14a:	6023      	str	r3, [r4, #0]
    f14c:	2301      	movs	r3, #1
    f14e:	e7de      	b.n	f10e <_sungetc_r+0x36>

0000f150 <__ssrefill_r>:
    f150:	b510      	push	{r4, lr}
    f152:	000c      	movs	r4, r1
    f154:	6b49      	ldr	r1, [r1, #52]	; 0x34
    f156:	2900      	cmp	r1, #0
    f158:	d00e      	beq.n	f178 <__ssrefill_r+0x28>
    f15a:	0023      	movs	r3, r4
    f15c:	3344      	adds	r3, #68	; 0x44
    f15e:	4299      	cmp	r1, r3
    f160:	d001      	beq.n	f166 <__ssrefill_r+0x16>
    f162:	f7fc fdbb 	bl	bcdc <_free_r>
    f166:	2000      	movs	r0, #0
    f168:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f16a:	6360      	str	r0, [r4, #52]	; 0x34
    f16c:	6063      	str	r3, [r4, #4]
    f16e:	4283      	cmp	r3, r0
    f170:	d002      	beq.n	f178 <__ssrefill_r+0x28>
    f172:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f174:	6023      	str	r3, [r4, #0]
    f176:	bd10      	pop	{r4, pc}
    f178:	6923      	ldr	r3, [r4, #16]
    f17a:	2001      	movs	r0, #1
    f17c:	6023      	str	r3, [r4, #0]
    f17e:	2300      	movs	r3, #0
    f180:	89a2      	ldrh	r2, [r4, #12]
    f182:	6063      	str	r3, [r4, #4]
    f184:	3320      	adds	r3, #32
    f186:	4313      	orrs	r3, r2
    f188:	81a3      	strh	r3, [r4, #12]
    f18a:	4240      	negs	r0, r0
    f18c:	e7f3      	b.n	f176 <__ssrefill_r+0x26>
	...

0000f190 <__ssvfiscanf_r>:
    f190:	b5f0      	push	{r4, r5, r6, r7, lr}
    f192:	4cbd      	ldr	r4, [pc, #756]	; (f488 <__ssvfiscanf_r+0x2f8>)
    f194:	2586      	movs	r5, #134	; 0x86
    f196:	44a5      	add	sp, r4
    f198:	9303      	str	r3, [sp, #12]
    f19a:	2300      	movs	r3, #0
    f19c:	9348      	str	r3, [sp, #288]	; 0x120
    f19e:	9349      	str	r3, [sp, #292]	; 0x124
    f1a0:	ab05      	add	r3, sp, #20
    f1a2:	934a      	str	r3, [sp, #296]	; 0x128
    f1a4:	23be      	movs	r3, #190	; 0xbe
    f1a6:	006d      	lsls	r5, r5, #1
    f1a8:	9000      	str	r0, [sp, #0]
    f1aa:	000c      	movs	r4, r1
    f1ac:	a802      	add	r0, sp, #8
    f1ae:	49b7      	ldr	r1, [pc, #732]	; (f48c <__ssvfiscanf_r+0x2fc>)
    f1b0:	005b      	lsls	r3, r3, #1
    f1b2:	1940      	adds	r0, r0, r5
    f1b4:	27c0      	movs	r7, #192	; 0xc0
    f1b6:	50c1      	str	r1, [r0, r3]
    f1b8:	ab02      	add	r3, sp, #8
    f1ba:	195b      	adds	r3, r3, r5
    f1bc:	0015      	movs	r5, r2
    f1be:	49b4      	ldr	r1, [pc, #720]	; (f490 <__ssvfiscanf_r+0x300>)
    f1c0:	007f      	lsls	r7, r7, #1
    f1c2:	51d9      	str	r1, [r3, r7]
    f1c4:	782b      	ldrb	r3, [r5, #0]
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	d100      	bne.n	f1cc <__ssvfiscanf_r+0x3c>
    f1ca:	e15b      	b.n	f484 <__ssvfiscanf_r+0x2f4>
    f1cc:	f7fc faca 	bl	b764 <__locale_ctype_ptr>
    f1d0:	2208      	movs	r2, #8
    f1d2:	782b      	ldrb	r3, [r5, #0]
    f1d4:	18c0      	adds	r0, r0, r3
    f1d6:	9301      	str	r3, [sp, #4]
    f1d8:	7843      	ldrb	r3, [r0, #1]
    f1da:	4013      	ands	r3, r2
    f1dc:	d141      	bne.n	f262 <__ssvfiscanf_r+0xd2>
    f1de:	9a01      	ldr	r2, [sp, #4]
    f1e0:	1c6e      	adds	r6, r5, #1
    f1e2:	2a25      	cmp	r2, #37	; 0x25
    f1e4:	d000      	beq.n	f1e8 <__ssvfiscanf_r+0x58>
    f1e6:	e0a8      	b.n	f33a <__ssvfiscanf_r+0x1aa>
    f1e8:	9347      	str	r3, [sp, #284]	; 0x11c
    f1ea:	9345      	str	r3, [sp, #276]	; 0x114
    f1ec:	786b      	ldrb	r3, [r5, #1]
    f1ee:	2b2a      	cmp	r3, #42	; 0x2a
    f1f0:	d102      	bne.n	f1f8 <__ssvfiscanf_r+0x68>
    f1f2:	3b1a      	subs	r3, #26
    f1f4:	9345      	str	r3, [sp, #276]	; 0x114
    f1f6:	1cae      	adds	r6, r5, #2
    f1f8:	0035      	movs	r5, r6
    f1fa:	220a      	movs	r2, #10
    f1fc:	7829      	ldrb	r1, [r5, #0]
    f1fe:	000b      	movs	r3, r1
    f200:	3b30      	subs	r3, #48	; 0x30
    f202:	2b09      	cmp	r3, #9
    f204:	d948      	bls.n	f298 <__ssvfiscanf_r+0x108>
    f206:	4ea3      	ldr	r6, [pc, #652]	; (f494 <__ssvfiscanf_r+0x304>)
    f208:	2203      	movs	r2, #3
    f20a:	0030      	movs	r0, r6
    f20c:	f7ff f906 	bl	e41c <memchr>
    f210:	2800      	cmp	r0, #0
    f212:	d007      	beq.n	f224 <__ssvfiscanf_r+0x94>
    f214:	2301      	movs	r3, #1
    f216:	1b80      	subs	r0, r0, r6
    f218:	4083      	lsls	r3, r0
    f21a:	9a45      	ldr	r2, [sp, #276]	; 0x114
    f21c:	3501      	adds	r5, #1
    f21e:	4313      	orrs	r3, r2
    f220:	9202      	str	r2, [sp, #8]
    f222:	9345      	str	r3, [sp, #276]	; 0x114
    f224:	782b      	ldrb	r3, [r5, #0]
    f226:	1c6e      	adds	r6, r5, #1
    f228:	2b67      	cmp	r3, #103	; 0x67
    f22a:	d858      	bhi.n	f2de <__ssvfiscanf_r+0x14e>
    f22c:	2b65      	cmp	r3, #101	; 0x65
    f22e:	d300      	bcc.n	f232 <__ssvfiscanf_r+0xa2>
    f230:	e0dd      	b.n	f3ee <__ssvfiscanf_r+0x25e>
    f232:	2b47      	cmp	r3, #71	; 0x47
    f234:	d838      	bhi.n	f2a8 <__ssvfiscanf_r+0x118>
    f236:	2b45      	cmp	r3, #69	; 0x45
    f238:	d300      	bcc.n	f23c <__ssvfiscanf_r+0xac>
    f23a:	e0d8      	b.n	f3ee <__ssvfiscanf_r+0x25e>
    f23c:	2b00      	cmp	r3, #0
    f23e:	d100      	bne.n	f242 <__ssvfiscanf_r+0xb2>
    f240:	e11d      	b.n	f47e <__ssvfiscanf_r+0x2ee>
    f242:	2b25      	cmp	r3, #37	; 0x25
    f244:	d079      	beq.n	f33a <__ssvfiscanf_r+0x1aa>
    f246:	2303      	movs	r3, #3
    f248:	934b      	str	r3, [sp, #300]	; 0x12c
    f24a:	3307      	adds	r3, #7
    f24c:	9346      	str	r3, [sp, #280]	; 0x118
    f24e:	e053      	b.n	f2f8 <__ssvfiscanf_r+0x168>
    f250:	9a49      	ldr	r2, [sp, #292]	; 0x124
    f252:	3301      	adds	r3, #1
    f254:	9201      	str	r2, [sp, #4]
    f256:	3201      	adds	r2, #1
    f258:	9249      	str	r2, [sp, #292]	; 0x124
    f25a:	6862      	ldr	r2, [r4, #4]
    f25c:	6023      	str	r3, [r4, #0]
    f25e:	3a01      	subs	r2, #1
    f260:	6062      	str	r2, [r4, #4]
    f262:	6863      	ldr	r3, [r4, #4]
    f264:	2b00      	cmp	r3, #0
    f266:	dd0b      	ble.n	f280 <__ssvfiscanf_r+0xf0>
    f268:	f7fc fa7c 	bl	b764 <__locale_ctype_ptr>
    f26c:	2108      	movs	r1, #8
    f26e:	6823      	ldr	r3, [r4, #0]
    f270:	781a      	ldrb	r2, [r3, #0]
    f272:	1880      	adds	r0, r0, r2
    f274:	7842      	ldrb	r2, [r0, #1]
    f276:	420a      	tst	r2, r1
    f278:	d1ea      	bne.n	f250 <__ssvfiscanf_r+0xc0>
    f27a:	1c6e      	adds	r6, r5, #1
    f27c:	0035      	movs	r5, r6
    f27e:	e7a1      	b.n	f1c4 <__ssvfiscanf_r+0x34>
    f280:	2286      	movs	r2, #134	; 0x86
    f282:	ab02      	add	r3, sp, #8
    f284:	0052      	lsls	r2, r2, #1
    f286:	189b      	adds	r3, r3, r2
    f288:	59db      	ldr	r3, [r3, r7]
    f28a:	0021      	movs	r1, r4
    f28c:	9800      	ldr	r0, [sp, #0]
    f28e:	9301      	str	r3, [sp, #4]
    f290:	4798      	blx	r3
    f292:	2800      	cmp	r0, #0
    f294:	d0e8      	beq.n	f268 <__ssvfiscanf_r+0xd8>
    f296:	e7f0      	b.n	f27a <__ssvfiscanf_r+0xea>
    f298:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    f29a:	3501      	adds	r5, #1
    f29c:	9302      	str	r3, [sp, #8]
    f29e:	4353      	muls	r3, r2
    f2a0:	3b30      	subs	r3, #48	; 0x30
    f2a2:	1859      	adds	r1, r3, r1
    f2a4:	9147      	str	r1, [sp, #284]	; 0x11c
    f2a6:	e7a9      	b.n	f1fc <__ssvfiscanf_r+0x6c>
    f2a8:	2b5b      	cmp	r3, #91	; 0x5b
    f2aa:	d100      	bne.n	f2ae <__ssvfiscanf_r+0x11e>
    f2ac:	e077      	b.n	f39e <__ssvfiscanf_r+0x20e>
    f2ae:	d80f      	bhi.n	f2d0 <__ssvfiscanf_r+0x140>
    f2b0:	2b58      	cmp	r3, #88	; 0x58
    f2b2:	d1c8      	bne.n	f246 <__ssvfiscanf_r+0xb6>
    f2b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
    f2b6:	9201      	str	r2, [sp, #4]
    f2b8:	2280      	movs	r2, #128	; 0x80
    f2ba:	9901      	ldr	r1, [sp, #4]
    f2bc:	0092      	lsls	r2, r2, #2
    f2be:	430a      	orrs	r2, r1
    f2c0:	9245      	str	r2, [sp, #276]	; 0x114
    f2c2:	2210      	movs	r2, #16
    f2c4:	9246      	str	r2, [sp, #280]	; 0x118
    f2c6:	2203      	movs	r2, #3
    f2c8:	2b6e      	cmp	r3, #110	; 0x6e
    f2ca:	dd14      	ble.n	f2f6 <__ssvfiscanf_r+0x166>
    f2cc:	3201      	adds	r2, #1
    f2ce:	e012      	b.n	f2f6 <__ssvfiscanf_r+0x166>
    f2d0:	2b63      	cmp	r3, #99	; 0x63
    f2d2:	d100      	bne.n	f2d6 <__ssvfiscanf_r+0x146>
    f2d4:	e071      	b.n	f3ba <__ssvfiscanf_r+0x22a>
    f2d6:	2b64      	cmp	r3, #100	; 0x64
    f2d8:	d1b5      	bne.n	f246 <__ssvfiscanf_r+0xb6>
    f2da:	220a      	movs	r2, #10
    f2dc:	e7f2      	b.n	f2c4 <__ssvfiscanf_r+0x134>
    f2de:	2b70      	cmp	r3, #112	; 0x70
    f2e0:	d052      	beq.n	f388 <__ssvfiscanf_r+0x1f8>
    f2e2:	d822      	bhi.n	f32a <__ssvfiscanf_r+0x19a>
    f2e4:	2b6e      	cmp	r3, #110	; 0x6e
    f2e6:	d100      	bne.n	f2ea <__ssvfiscanf_r+0x15a>
    f2e8:	e06f      	b.n	f3ca <__ssvfiscanf_r+0x23a>
    f2ea:	d854      	bhi.n	f396 <__ssvfiscanf_r+0x206>
    f2ec:	2b69      	cmp	r3, #105	; 0x69
    f2ee:	d1aa      	bne.n	f246 <__ssvfiscanf_r+0xb6>
    f2f0:	2300      	movs	r3, #0
    f2f2:	2203      	movs	r2, #3
    f2f4:	9346      	str	r3, [sp, #280]	; 0x118
    f2f6:	924b      	str	r2, [sp, #300]	; 0x12c
    f2f8:	6863      	ldr	r3, [r4, #4]
    f2fa:	2b00      	cmp	r3, #0
    f2fc:	dc00      	bgt.n	f300 <__ssvfiscanf_r+0x170>
    f2fe:	e078      	b.n	f3f2 <__ssvfiscanf_r+0x262>
    f300:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f302:	9301      	str	r3, [sp, #4]
    f304:	065b      	lsls	r3, r3, #25
    f306:	d400      	bmi.n	f30a <__ssvfiscanf_r+0x17a>
    f308:	e08b      	b.n	f422 <__ssvfiscanf_r+0x292>
    f30a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    f30c:	2b02      	cmp	r3, #2
    f30e:	dd00      	ble.n	f312 <__ssvfiscanf_r+0x182>
    f310:	e09d      	b.n	f44e <__ssvfiscanf_r+0x2be>
    f312:	ab03      	add	r3, sp, #12
    f314:	0022      	movs	r2, r4
    f316:	a945      	add	r1, sp, #276	; 0x114
    f318:	9800      	ldr	r0, [sp, #0]
    f31a:	f000 f8bf 	bl	f49c <_scanf_chars>
    f31e:	2801      	cmp	r0, #1
    f320:	d100      	bne.n	f324 <__ssvfiscanf_r+0x194>
    f322:	e0af      	b.n	f484 <__ssvfiscanf_r+0x2f4>
    f324:	2802      	cmp	r0, #2
    f326:	d1a9      	bne.n	f27c <__ssvfiscanf_r+0xec>
    f328:	e025      	b.n	f376 <__ssvfiscanf_r+0x1e6>
    f32a:	2b75      	cmp	r3, #117	; 0x75
    f32c:	d0d5      	beq.n	f2da <__ssvfiscanf_r+0x14a>
    f32e:	2b78      	cmp	r3, #120	; 0x78
    f330:	d0c0      	beq.n	f2b4 <__ssvfiscanf_r+0x124>
    f332:	2b73      	cmp	r3, #115	; 0x73
    f334:	d187      	bne.n	f246 <__ssvfiscanf_r+0xb6>
    f336:	2302      	movs	r3, #2
    f338:	e03d      	b.n	f3b6 <__ssvfiscanf_r+0x226>
    f33a:	6863      	ldr	r3, [r4, #4]
    f33c:	2b00      	cmp	r3, #0
    f33e:	dd0f      	ble.n	f360 <__ssvfiscanf_r+0x1d0>
    f340:	6823      	ldr	r3, [r4, #0]
    f342:	9901      	ldr	r1, [sp, #4]
    f344:	781a      	ldrb	r2, [r3, #0]
    f346:	4291      	cmp	r1, r2
    f348:	d000      	beq.n	f34c <__ssvfiscanf_r+0x1bc>
    f34a:	e09b      	b.n	f484 <__ssvfiscanf_r+0x2f4>
    f34c:	3301      	adds	r3, #1
    f34e:	6862      	ldr	r2, [r4, #4]
    f350:	6023      	str	r3, [r4, #0]
    f352:	9b49      	ldr	r3, [sp, #292]	; 0x124
    f354:	3a01      	subs	r2, #1
    f356:	9301      	str	r3, [sp, #4]
    f358:	3301      	adds	r3, #1
    f35a:	6062      	str	r2, [r4, #4]
    f35c:	9349      	str	r3, [sp, #292]	; 0x124
    f35e:	e78d      	b.n	f27c <__ssvfiscanf_r+0xec>
    f360:	2286      	movs	r2, #134	; 0x86
    f362:	ab02      	add	r3, sp, #8
    f364:	0052      	lsls	r2, r2, #1
    f366:	189b      	adds	r3, r3, r2
    f368:	59db      	ldr	r3, [r3, r7]
    f36a:	0021      	movs	r1, r4
    f36c:	9800      	ldr	r0, [sp, #0]
    f36e:	9302      	str	r3, [sp, #8]
    f370:	4798      	blx	r3
    f372:	2800      	cmp	r0, #0
    f374:	d0e4      	beq.n	f340 <__ssvfiscanf_r+0x1b0>
    f376:	9848      	ldr	r0, [sp, #288]	; 0x120
    f378:	2800      	cmp	r0, #0
    f37a:	d000      	beq.n	f37e <__ssvfiscanf_r+0x1ee>
    f37c:	e07b      	b.n	f476 <__ssvfiscanf_r+0x2e6>
    f37e:	3801      	subs	r0, #1
    f380:	23a7      	movs	r3, #167	; 0xa7
    f382:	009b      	lsls	r3, r3, #2
    f384:	449d      	add	sp, r3
    f386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f388:	9a45      	ldr	r2, [sp, #276]	; 0x114
    f38a:	9201      	str	r2, [sp, #4]
    f38c:	2220      	movs	r2, #32
    f38e:	9901      	ldr	r1, [sp, #4]
    f390:	430a      	orrs	r2, r1
    f392:	9245      	str	r2, [sp, #276]	; 0x114
    f394:	e78e      	b.n	f2b4 <__ssvfiscanf_r+0x124>
    f396:	2308      	movs	r3, #8
    f398:	2204      	movs	r2, #4
    f39a:	9346      	str	r3, [sp, #280]	; 0x118
    f39c:	e7ab      	b.n	f2f6 <__ssvfiscanf_r+0x166>
    f39e:	0031      	movs	r1, r6
    f3a0:	a805      	add	r0, sp, #20
    f3a2:	f000 f9f3 	bl	f78c <__sccl>
    f3a6:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f3a8:	0006      	movs	r6, r0
    f3aa:	9301      	str	r3, [sp, #4]
    f3ac:	2340      	movs	r3, #64	; 0x40
    f3ae:	9a01      	ldr	r2, [sp, #4]
    f3b0:	4313      	orrs	r3, r2
    f3b2:	9345      	str	r3, [sp, #276]	; 0x114
    f3b4:	2301      	movs	r3, #1
    f3b6:	934b      	str	r3, [sp, #300]	; 0x12c
    f3b8:	e79e      	b.n	f2f8 <__ssvfiscanf_r+0x168>
    f3ba:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f3bc:	9301      	str	r3, [sp, #4]
    f3be:	2340      	movs	r3, #64	; 0x40
    f3c0:	9a01      	ldr	r2, [sp, #4]
    f3c2:	4313      	orrs	r3, r2
    f3c4:	9345      	str	r3, [sp, #276]	; 0x114
    f3c6:	2300      	movs	r3, #0
    f3c8:	e7f5      	b.n	f3b6 <__ssvfiscanf_r+0x226>
    f3ca:	9945      	ldr	r1, [sp, #276]	; 0x114
    f3cc:	06cb      	lsls	r3, r1, #27
    f3ce:	d500      	bpl.n	f3d2 <__ssvfiscanf_r+0x242>
    f3d0:	e754      	b.n	f27c <__ssvfiscanf_r+0xec>
    f3d2:	9b03      	ldr	r3, [sp, #12]
    f3d4:	9a49      	ldr	r2, [sp, #292]	; 0x124
    f3d6:	07c8      	lsls	r0, r1, #31
    f3d8:	d504      	bpl.n	f3e4 <__ssvfiscanf_r+0x254>
    f3da:	1d19      	adds	r1, r3, #4
    f3dc:	9103      	str	r1, [sp, #12]
    f3de:	681b      	ldr	r3, [r3, #0]
    f3e0:	801a      	strh	r2, [r3, #0]
    f3e2:	e74b      	b.n	f27c <__ssvfiscanf_r+0xec>
    f3e4:	1d19      	adds	r1, r3, #4
    f3e6:	9103      	str	r1, [sp, #12]
    f3e8:	681b      	ldr	r3, [r3, #0]
    f3ea:	601a      	str	r2, [r3, #0]
    f3ec:	e746      	b.n	f27c <__ssvfiscanf_r+0xec>
    f3ee:	2305      	movs	r3, #5
    f3f0:	e7e1      	b.n	f3b6 <__ssvfiscanf_r+0x226>
    f3f2:	2286      	movs	r2, #134	; 0x86
    f3f4:	ab02      	add	r3, sp, #8
    f3f6:	0052      	lsls	r2, r2, #1
    f3f8:	189b      	adds	r3, r3, r2
    f3fa:	59db      	ldr	r3, [r3, r7]
    f3fc:	0021      	movs	r1, r4
    f3fe:	9800      	ldr	r0, [sp, #0]
    f400:	9301      	str	r3, [sp, #4]
    f402:	4798      	blx	r3
    f404:	2800      	cmp	r0, #0
    f406:	d100      	bne.n	f40a <__ssvfiscanf_r+0x27a>
    f408:	e77a      	b.n	f300 <__ssvfiscanf_r+0x170>
    f40a:	e7b4      	b.n	f376 <__ssvfiscanf_r+0x1e6>
    f40c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    f40e:	9201      	str	r2, [sp, #4]
    f410:	3201      	adds	r2, #1
    f412:	9249      	str	r2, [sp, #292]	; 0x124
    f414:	6862      	ldr	r2, [r4, #4]
    f416:	3a01      	subs	r2, #1
    f418:	6062      	str	r2, [r4, #4]
    f41a:	2a00      	cmp	r2, #0
    f41c:	dd0b      	ble.n	f436 <__ssvfiscanf_r+0x2a6>
    f41e:	3301      	adds	r3, #1
    f420:	6023      	str	r3, [r4, #0]
    f422:	f7fc f99f 	bl	b764 <__locale_ctype_ptr>
    f426:	2108      	movs	r1, #8
    f428:	6823      	ldr	r3, [r4, #0]
    f42a:	781a      	ldrb	r2, [r3, #0]
    f42c:	1880      	adds	r0, r0, r2
    f42e:	7842      	ldrb	r2, [r0, #1]
    f430:	420a      	tst	r2, r1
    f432:	d1eb      	bne.n	f40c <__ssvfiscanf_r+0x27c>
    f434:	e769      	b.n	f30a <__ssvfiscanf_r+0x17a>
    f436:	2286      	movs	r2, #134	; 0x86
    f438:	ab02      	add	r3, sp, #8
    f43a:	0052      	lsls	r2, r2, #1
    f43c:	189b      	adds	r3, r3, r2
    f43e:	59db      	ldr	r3, [r3, r7]
    f440:	0021      	movs	r1, r4
    f442:	9800      	ldr	r0, [sp, #0]
    f444:	9301      	str	r3, [sp, #4]
    f446:	4798      	blx	r3
    f448:	2800      	cmp	r0, #0
    f44a:	d0ea      	beq.n	f422 <__ssvfiscanf_r+0x292>
    f44c:	e793      	b.n	f376 <__ssvfiscanf_r+0x1e6>
    f44e:	2b04      	cmp	r3, #4
    f450:	dc06      	bgt.n	f460 <__ssvfiscanf_r+0x2d0>
    f452:	ab03      	add	r3, sp, #12
    f454:	0022      	movs	r2, r4
    f456:	a945      	add	r1, sp, #276	; 0x114
    f458:	9800      	ldr	r0, [sp, #0]
    f45a:	f000 f883 	bl	f564 <_scanf_i>
    f45e:	e75e      	b.n	f31e <__ssvfiscanf_r+0x18e>
    f460:	4b0d      	ldr	r3, [pc, #52]	; (f498 <__ssvfiscanf_r+0x308>)
    f462:	2b00      	cmp	r3, #0
    f464:	d100      	bne.n	f468 <__ssvfiscanf_r+0x2d8>
    f466:	e709      	b.n	f27c <__ssvfiscanf_r+0xec>
    f468:	ab03      	add	r3, sp, #12
    f46a:	0022      	movs	r2, r4
    f46c:	a945      	add	r1, sp, #276	; 0x114
    f46e:	9800      	ldr	r0, [sp, #0]
    f470:	e000      	b.n	f474 <__ssvfiscanf_r+0x2e4>
    f472:	bf00      	nop
    f474:	e753      	b.n	f31e <__ssvfiscanf_r+0x18e>
    f476:	89a3      	ldrh	r3, [r4, #12]
    f478:	065b      	lsls	r3, r3, #25
    f47a:	d400      	bmi.n	f47e <__ssvfiscanf_r+0x2ee>
    f47c:	e780      	b.n	f380 <__ssvfiscanf_r+0x1f0>
    f47e:	2001      	movs	r0, #1
    f480:	4240      	negs	r0, r0
    f482:	e77d      	b.n	f380 <__ssvfiscanf_r+0x1f0>
    f484:	9848      	ldr	r0, [sp, #288]	; 0x120
    f486:	e77b      	b.n	f380 <__ssvfiscanf_r+0x1f0>
    f488:	fffffd64 	.word	0xfffffd64
    f48c:	0000f0d9 	.word	0x0000f0d9
    f490:	0000f151 	.word	0x0000f151
    f494:	0001101e 	.word	0x0001101e
    f498:	00000000 	.word	0x00000000

0000f49c <_scanf_chars>:
    f49c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f49e:	0015      	movs	r5, r2
    f4a0:	688a      	ldr	r2, [r1, #8]
    f4a2:	9001      	str	r0, [sp, #4]
    f4a4:	000c      	movs	r4, r1
    f4a6:	2a00      	cmp	r2, #0
    f4a8:	d106      	bne.n	f4b8 <_scanf_chars+0x1c>
    f4aa:	698a      	ldr	r2, [r1, #24]
    f4ac:	1e51      	subs	r1, r2, #1
    f4ae:	418a      	sbcs	r2, r1
    f4b0:	2101      	movs	r1, #1
    f4b2:	4252      	negs	r2, r2
    f4b4:	430a      	orrs	r2, r1
    f4b6:	60a2      	str	r2, [r4, #8]
    f4b8:	6822      	ldr	r2, [r4, #0]
    f4ba:	06d2      	lsls	r2, r2, #27
    f4bc:	d403      	bmi.n	f4c6 <_scanf_chars+0x2a>
    f4be:	681a      	ldr	r2, [r3, #0]
    f4c0:	1d11      	adds	r1, r2, #4
    f4c2:	6019      	str	r1, [r3, #0]
    f4c4:	6817      	ldr	r7, [r2, #0]
    f4c6:	2600      	movs	r6, #0
    f4c8:	69a3      	ldr	r3, [r4, #24]
    f4ca:	2b00      	cmp	r3, #0
    f4cc:	d01c      	beq.n	f508 <_scanf_chars+0x6c>
    f4ce:	2b01      	cmp	r3, #1
    f4d0:	d108      	bne.n	f4e4 <_scanf_chars+0x48>
    f4d2:	682b      	ldr	r3, [r5, #0]
    f4d4:	6962      	ldr	r2, [r4, #20]
    f4d6:	781b      	ldrb	r3, [r3, #0]
    f4d8:	5cd3      	ldrb	r3, [r2, r3]
    f4da:	2b00      	cmp	r3, #0
    f4dc:	d114      	bne.n	f508 <_scanf_chars+0x6c>
    f4de:	2e00      	cmp	r6, #0
    f4e0:	d130      	bne.n	f544 <_scanf_chars+0xa8>
    f4e2:	e006      	b.n	f4f2 <_scanf_chars+0x56>
    f4e4:	2b02      	cmp	r3, #2
    f4e6:	d006      	beq.n	f4f6 <_scanf_chars+0x5a>
    f4e8:	2e00      	cmp	r6, #0
    f4ea:	d12b      	bne.n	f544 <_scanf_chars+0xa8>
    f4ec:	69a3      	ldr	r3, [r4, #24]
    f4ee:	2b01      	cmp	r3, #1
    f4f0:	d128      	bne.n	f544 <_scanf_chars+0xa8>
    f4f2:	2001      	movs	r0, #1
    f4f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f4f6:	f7fc f935 	bl	b764 <__locale_ctype_ptr>
    f4fa:	2208      	movs	r2, #8
    f4fc:	682b      	ldr	r3, [r5, #0]
    f4fe:	781b      	ldrb	r3, [r3, #0]
    f500:	18c0      	adds	r0, r0, r3
    f502:	7843      	ldrb	r3, [r0, #1]
    f504:	4213      	tst	r3, r2
    f506:	d1ef      	bne.n	f4e8 <_scanf_chars+0x4c>
    f508:	2210      	movs	r2, #16
    f50a:	6823      	ldr	r3, [r4, #0]
    f50c:	3601      	adds	r6, #1
    f50e:	4213      	tst	r3, r2
    f510:	d103      	bne.n	f51a <_scanf_chars+0x7e>
    f512:	682b      	ldr	r3, [r5, #0]
    f514:	781b      	ldrb	r3, [r3, #0]
    f516:	703b      	strb	r3, [r7, #0]
    f518:	3701      	adds	r7, #1
    f51a:	682a      	ldr	r2, [r5, #0]
    f51c:	686b      	ldr	r3, [r5, #4]
    f51e:	3201      	adds	r2, #1
    f520:	602a      	str	r2, [r5, #0]
    f522:	68a2      	ldr	r2, [r4, #8]
    f524:	3b01      	subs	r3, #1
    f526:	3a01      	subs	r2, #1
    f528:	606b      	str	r3, [r5, #4]
    f52a:	60a2      	str	r2, [r4, #8]
    f52c:	2a00      	cmp	r2, #0
    f52e:	d009      	beq.n	f544 <_scanf_chars+0xa8>
    f530:	2b00      	cmp	r3, #0
    f532:	dcc9      	bgt.n	f4c8 <_scanf_chars+0x2c>
    f534:	23c0      	movs	r3, #192	; 0xc0
    f536:	005b      	lsls	r3, r3, #1
    f538:	58e3      	ldr	r3, [r4, r3]
    f53a:	0029      	movs	r1, r5
    f53c:	9801      	ldr	r0, [sp, #4]
    f53e:	4798      	blx	r3
    f540:	2800      	cmp	r0, #0
    f542:	d0c1      	beq.n	f4c8 <_scanf_chars+0x2c>
    f544:	2310      	movs	r3, #16
    f546:	6822      	ldr	r2, [r4, #0]
    f548:	4013      	ands	r3, r2
    f54a:	d106      	bne.n	f55a <_scanf_chars+0xbe>
    f54c:	68e2      	ldr	r2, [r4, #12]
    f54e:	3201      	adds	r2, #1
    f550:	60e2      	str	r2, [r4, #12]
    f552:	69a2      	ldr	r2, [r4, #24]
    f554:	2a00      	cmp	r2, #0
    f556:	d000      	beq.n	f55a <_scanf_chars+0xbe>
    f558:	703b      	strb	r3, [r7, #0]
    f55a:	6923      	ldr	r3, [r4, #16]
    f55c:	2000      	movs	r0, #0
    f55e:	199e      	adds	r6, r3, r6
    f560:	6126      	str	r6, [r4, #16]
    f562:	e7c7      	b.n	f4f4 <_scanf_chars+0x58>

0000f564 <_scanf_i>:
    f564:	b5f0      	push	{r4, r5, r6, r7, lr}
    f566:	000c      	movs	r4, r1
    f568:	b08d      	sub	sp, #52	; 0x34
    f56a:	9302      	str	r3, [sp, #8]
    f56c:	4b77      	ldr	r3, [pc, #476]	; (f74c <_scanf_i+0x1e8>)
    f56e:	9005      	str	r0, [sp, #20]
    f570:	0016      	movs	r6, r2
    f572:	aa09      	add	r2, sp, #36	; 0x24
    f574:	cb23      	ldmia	r3!, {r0, r1, r5}
    f576:	c223      	stmia	r2!, {r0, r1, r5}
    f578:	4b75      	ldr	r3, [pc, #468]	; (f750 <_scanf_i+0x1ec>)
    f57a:	9306      	str	r3, [sp, #24]
    f57c:	69a3      	ldr	r3, [r4, #24]
    f57e:	2b03      	cmp	r3, #3
    f580:	d001      	beq.n	f586 <_scanf_i+0x22>
    f582:	4b74      	ldr	r3, [pc, #464]	; (f754 <_scanf_i+0x1f0>)
    f584:	9306      	str	r3, [sp, #24]
    f586:	22ae      	movs	r2, #174	; 0xae
    f588:	2000      	movs	r0, #0
    f58a:	68a3      	ldr	r3, [r4, #8]
    f58c:	0052      	lsls	r2, r2, #1
    f58e:	1e59      	subs	r1, r3, #1
    f590:	9004      	str	r0, [sp, #16]
    f592:	4291      	cmp	r1, r2
    f594:	d905      	bls.n	f5a2 <_scanf_i+0x3e>
    f596:	3b5e      	subs	r3, #94	; 0x5e
    f598:	3bff      	subs	r3, #255	; 0xff
    f59a:	9304      	str	r3, [sp, #16]
    f59c:	235e      	movs	r3, #94	; 0x5e
    f59e:	33ff      	adds	r3, #255	; 0xff
    f5a0:	60a3      	str	r3, [r4, #8]
    f5a2:	0023      	movs	r3, r4
    f5a4:	331c      	adds	r3, #28
    f5a6:	9301      	str	r3, [sp, #4]
    f5a8:	23d0      	movs	r3, #208	; 0xd0
    f5aa:	2700      	movs	r7, #0
    f5ac:	6822      	ldr	r2, [r4, #0]
    f5ae:	011b      	lsls	r3, r3, #4
    f5b0:	4313      	orrs	r3, r2
    f5b2:	6023      	str	r3, [r4, #0]
    f5b4:	9b01      	ldr	r3, [sp, #4]
    f5b6:	9303      	str	r3, [sp, #12]
    f5b8:	6833      	ldr	r3, [r6, #0]
    f5ba:	a809      	add	r0, sp, #36	; 0x24
    f5bc:	7819      	ldrb	r1, [r3, #0]
    f5be:	00bb      	lsls	r3, r7, #2
    f5c0:	2202      	movs	r2, #2
    f5c2:	5818      	ldr	r0, [r3, r0]
    f5c4:	f7fe ff2a 	bl	e41c <memchr>
    f5c8:	2800      	cmp	r0, #0
    f5ca:	d02b      	beq.n	f624 <_scanf_i+0xc0>
    f5cc:	2f01      	cmp	r7, #1
    f5ce:	d15f      	bne.n	f690 <_scanf_i+0x12c>
    f5d0:	6863      	ldr	r3, [r4, #4]
    f5d2:	2b00      	cmp	r3, #0
    f5d4:	d106      	bne.n	f5e4 <_scanf_i+0x80>
    f5d6:	3308      	adds	r3, #8
    f5d8:	6822      	ldr	r2, [r4, #0]
    f5da:	6063      	str	r3, [r4, #4]
    f5dc:	33f9      	adds	r3, #249	; 0xf9
    f5de:	33ff      	adds	r3, #255	; 0xff
    f5e0:	4313      	orrs	r3, r2
    f5e2:	6023      	str	r3, [r4, #0]
    f5e4:	4b5c      	ldr	r3, [pc, #368]	; (f758 <_scanf_i+0x1f4>)
    f5e6:	6822      	ldr	r2, [r4, #0]
    f5e8:	4013      	ands	r3, r2
    f5ea:	6023      	str	r3, [r4, #0]
    f5ec:	68a3      	ldr	r3, [r4, #8]
    f5ee:	1e5a      	subs	r2, r3, #1
    f5f0:	60a2      	str	r2, [r4, #8]
    f5f2:	2b00      	cmp	r3, #0
    f5f4:	d016      	beq.n	f624 <_scanf_i+0xc0>
    f5f6:	9b03      	ldr	r3, [sp, #12]
    f5f8:	1c5d      	adds	r5, r3, #1
    f5fa:	6833      	ldr	r3, [r6, #0]
    f5fc:	1c5a      	adds	r2, r3, #1
    f5fe:	6032      	str	r2, [r6, #0]
    f600:	781b      	ldrb	r3, [r3, #0]
    f602:	9a03      	ldr	r2, [sp, #12]
    f604:	9503      	str	r5, [sp, #12]
    f606:	7013      	strb	r3, [r2, #0]
    f608:	6873      	ldr	r3, [r6, #4]
    f60a:	3b01      	subs	r3, #1
    f60c:	6073      	str	r3, [r6, #4]
    f60e:	2b00      	cmp	r3, #0
    f610:	dc08      	bgt.n	f624 <_scanf_i+0xc0>
    f612:	23c0      	movs	r3, #192	; 0xc0
    f614:	005b      	lsls	r3, r3, #1
    f616:	58e3      	ldr	r3, [r4, r3]
    f618:	0031      	movs	r1, r6
    f61a:	9805      	ldr	r0, [sp, #20]
    f61c:	9307      	str	r3, [sp, #28]
    f61e:	4798      	blx	r3
    f620:	2800      	cmp	r0, #0
    f622:	d17d      	bne.n	f720 <_scanf_i+0x1bc>
    f624:	3701      	adds	r7, #1
    f626:	2f03      	cmp	r7, #3
    f628:	d1c6      	bne.n	f5b8 <_scanf_i+0x54>
    f62a:	6863      	ldr	r3, [r4, #4]
    f62c:	2b00      	cmp	r3, #0
    f62e:	d101      	bne.n	f634 <_scanf_i+0xd0>
    f630:	330a      	adds	r3, #10
    f632:	6063      	str	r3, [r4, #4]
    f634:	2110      	movs	r1, #16
    f636:	2700      	movs	r7, #0
    f638:	6863      	ldr	r3, [r4, #4]
    f63a:	6960      	ldr	r0, [r4, #20]
    f63c:	1ac9      	subs	r1, r1, r3
    f63e:	4b47      	ldr	r3, [pc, #284]	; (f75c <_scanf_i+0x1f8>)
    f640:	18c9      	adds	r1, r1, r3
    f642:	f000 f8a3 	bl	f78c <__sccl>
    f646:	9d03      	ldr	r5, [sp, #12]
    f648:	68a3      	ldr	r3, [r4, #8]
    f64a:	2b00      	cmp	r3, #0
    f64c:	d041      	beq.n	f6d2 <_scanf_i+0x16e>
    f64e:	6832      	ldr	r2, [r6, #0]
    f650:	6960      	ldr	r0, [r4, #20]
    f652:	7811      	ldrb	r1, [r2, #0]
    f654:	5c40      	ldrb	r0, [r0, r1]
    f656:	2800      	cmp	r0, #0
    f658:	d03b      	beq.n	f6d2 <_scanf_i+0x16e>
    f65a:	2930      	cmp	r1, #48	; 0x30
    f65c:	d128      	bne.n	f6b0 <_scanf_i+0x14c>
    f65e:	2080      	movs	r0, #128	; 0x80
    f660:	6821      	ldr	r1, [r4, #0]
    f662:	0100      	lsls	r0, r0, #4
    f664:	4201      	tst	r1, r0
    f666:	d023      	beq.n	f6b0 <_scanf_i+0x14c>
    f668:	9a04      	ldr	r2, [sp, #16]
    f66a:	3701      	adds	r7, #1
    f66c:	2a00      	cmp	r2, #0
    f66e:	d003      	beq.n	f678 <_scanf_i+0x114>
    f670:	3a01      	subs	r2, #1
    f672:	3301      	adds	r3, #1
    f674:	9204      	str	r2, [sp, #16]
    f676:	60a3      	str	r3, [r4, #8]
    f678:	6873      	ldr	r3, [r6, #4]
    f67a:	3b01      	subs	r3, #1
    f67c:	6073      	str	r3, [r6, #4]
    f67e:	2b00      	cmp	r3, #0
    f680:	dd1e      	ble.n	f6c0 <_scanf_i+0x15c>
    f682:	6833      	ldr	r3, [r6, #0]
    f684:	3301      	adds	r3, #1
    f686:	6033      	str	r3, [r6, #0]
    f688:	68a3      	ldr	r3, [r4, #8]
    f68a:	3b01      	subs	r3, #1
    f68c:	60a3      	str	r3, [r4, #8]
    f68e:	e7db      	b.n	f648 <_scanf_i+0xe4>
    f690:	2f02      	cmp	r7, #2
    f692:	d1ab      	bne.n	f5ec <_scanf_i+0x88>
    f694:	21c0      	movs	r1, #192	; 0xc0
    f696:	2380      	movs	r3, #128	; 0x80
    f698:	6822      	ldr	r2, [r4, #0]
    f69a:	00c9      	lsls	r1, r1, #3
    f69c:	4011      	ands	r1, r2
    f69e:	009b      	lsls	r3, r3, #2
    f6a0:	4299      	cmp	r1, r3
    f6a2:	d1c2      	bne.n	f62a <_scanf_i+0xc6>
    f6a4:	3bf1      	subs	r3, #241	; 0xf1
    f6a6:	3bff      	subs	r3, #255	; 0xff
    f6a8:	6063      	str	r3, [r4, #4]
    f6aa:	33f0      	adds	r3, #240	; 0xf0
    f6ac:	4313      	orrs	r3, r2
    f6ae:	e79c      	b.n	f5ea <_scanf_i+0x86>
    f6b0:	6821      	ldr	r1, [r4, #0]
    f6b2:	4b2b      	ldr	r3, [pc, #172]	; (f760 <_scanf_i+0x1fc>)
    f6b4:	400b      	ands	r3, r1
    f6b6:	6023      	str	r3, [r4, #0]
    f6b8:	7813      	ldrb	r3, [r2, #0]
    f6ba:	702b      	strb	r3, [r5, #0]
    f6bc:	3501      	adds	r5, #1
    f6be:	e7db      	b.n	f678 <_scanf_i+0x114>
    f6c0:	23c0      	movs	r3, #192	; 0xc0
    f6c2:	005b      	lsls	r3, r3, #1
    f6c4:	58e3      	ldr	r3, [r4, r3]
    f6c6:	0031      	movs	r1, r6
    f6c8:	9805      	ldr	r0, [sp, #20]
    f6ca:	9303      	str	r3, [sp, #12]
    f6cc:	4798      	blx	r3
    f6ce:	2800      	cmp	r0, #0
    f6d0:	d0da      	beq.n	f688 <_scanf_i+0x124>
    f6d2:	6823      	ldr	r3, [r4, #0]
    f6d4:	05db      	lsls	r3, r3, #23
    f6d6:	d50e      	bpl.n	f6f6 <_scanf_i+0x192>
    f6d8:	9b01      	ldr	r3, [sp, #4]
    f6da:	429d      	cmp	r5, r3
    f6dc:	d907      	bls.n	f6ee <_scanf_i+0x18a>
    f6de:	23be      	movs	r3, #190	; 0xbe
    f6e0:	3d01      	subs	r5, #1
    f6e2:	005b      	lsls	r3, r3, #1
    f6e4:	7829      	ldrb	r1, [r5, #0]
    f6e6:	58e3      	ldr	r3, [r4, r3]
    f6e8:	0032      	movs	r2, r6
    f6ea:	9805      	ldr	r0, [sp, #20]
    f6ec:	4798      	blx	r3
    f6ee:	9b01      	ldr	r3, [sp, #4]
    f6f0:	2001      	movs	r0, #1
    f6f2:	429d      	cmp	r5, r3
    f6f4:	d027      	beq.n	f746 <_scanf_i+0x1e2>
    f6f6:	2210      	movs	r2, #16
    f6f8:	6823      	ldr	r3, [r4, #0]
    f6fa:	401a      	ands	r2, r3
    f6fc:	d11c      	bne.n	f738 <_scanf_i+0x1d4>
    f6fe:	702a      	strb	r2, [r5, #0]
    f700:	6863      	ldr	r3, [r4, #4]
    f702:	9901      	ldr	r1, [sp, #4]
    f704:	9805      	ldr	r0, [sp, #20]
    f706:	9e06      	ldr	r6, [sp, #24]
    f708:	47b0      	blx	r6
    f70a:	9b02      	ldr	r3, [sp, #8]
    f70c:	6822      	ldr	r2, [r4, #0]
    f70e:	681b      	ldr	r3, [r3, #0]
    f710:	0691      	lsls	r1, r2, #26
    f712:	d507      	bpl.n	f724 <_scanf_i+0x1c0>
    f714:	9902      	ldr	r1, [sp, #8]
    f716:	1d1a      	adds	r2, r3, #4
    f718:	600a      	str	r2, [r1, #0]
    f71a:	681b      	ldr	r3, [r3, #0]
    f71c:	6018      	str	r0, [r3, #0]
    f71e:	e008      	b.n	f732 <_scanf_i+0x1ce>
    f720:	2700      	movs	r7, #0
    f722:	e7d6      	b.n	f6d2 <_scanf_i+0x16e>
    f724:	07d1      	lsls	r1, r2, #31
    f726:	d5f5      	bpl.n	f714 <_scanf_i+0x1b0>
    f728:	9902      	ldr	r1, [sp, #8]
    f72a:	1d1a      	adds	r2, r3, #4
    f72c:	600a      	str	r2, [r1, #0]
    f72e:	681b      	ldr	r3, [r3, #0]
    f730:	8018      	strh	r0, [r3, #0]
    f732:	68e3      	ldr	r3, [r4, #12]
    f734:	3301      	adds	r3, #1
    f736:	60e3      	str	r3, [r4, #12]
    f738:	2000      	movs	r0, #0
    f73a:	9b01      	ldr	r3, [sp, #4]
    f73c:	1aed      	subs	r5, r5, r3
    f73e:	6923      	ldr	r3, [r4, #16]
    f740:	19ef      	adds	r7, r5, r7
    f742:	19df      	adds	r7, r3, r7
    f744:	6127      	str	r7, [r4, #16]
    f746:	b00d      	add	sp, #52	; 0x34
    f748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f74a:	46c0      	nop			; (mov r8, r8)
    f74c:	00011364 	.word	0x00011364
    f750:	0000cbcd 	.word	0x0000cbcd
    f754:	0000efc1 	.word	0x0000efc1
    f758:	fffffaff 	.word	0xfffffaff
    f75c:	00011370 	.word	0x00011370
    f760:	fffff6ff 	.word	0xfffff6ff

0000f764 <_read_r>:
    f764:	b570      	push	{r4, r5, r6, lr}
    f766:	0005      	movs	r5, r0
    f768:	0008      	movs	r0, r1
    f76a:	0011      	movs	r1, r2
    f76c:	2200      	movs	r2, #0
    f76e:	4c06      	ldr	r4, [pc, #24]	; (f788 <_read_r+0x24>)
    f770:	6022      	str	r2, [r4, #0]
    f772:	001a      	movs	r2, r3
    f774:	f000 f8aa 	bl	f8cc <_read>
    f778:	1c43      	adds	r3, r0, #1
    f77a:	d103      	bne.n	f784 <_read_r+0x20>
    f77c:	6823      	ldr	r3, [r4, #0]
    f77e:	2b00      	cmp	r3, #0
    f780:	d000      	beq.n	f784 <_read_r+0x20>
    f782:	602b      	str	r3, [r5, #0]
    f784:	bd70      	pop	{r4, r5, r6, pc}
    f786:	46c0      	nop			; (mov r8, r8)
    f788:	20001e60 	.word	0x20001e60

0000f78c <__sccl>:
    f78c:	b570      	push	{r4, r5, r6, lr}
    f78e:	780b      	ldrb	r3, [r1, #0]
    f790:	2b5e      	cmp	r3, #94	; 0x5e
    f792:	d00d      	beq.n	f7b0 <__sccl+0x24>
    f794:	1c4a      	adds	r2, r1, #1
    f796:	2100      	movs	r1, #0
    f798:	0004      	movs	r4, r0
    f79a:	1c45      	adds	r5, r0, #1
    f79c:	35ff      	adds	r5, #255	; 0xff
    f79e:	7021      	strb	r1, [r4, #0]
    f7a0:	3401      	adds	r4, #1
    f7a2:	42a5      	cmp	r5, r4
    f7a4:	d1fb      	bne.n	f79e <__sccl+0x12>
    f7a6:	2b00      	cmp	r3, #0
    f7a8:	d106      	bne.n	f7b8 <__sccl+0x2c>
    f7aa:	3a01      	subs	r2, #1
    f7ac:	0010      	movs	r0, r2
    f7ae:	bd70      	pop	{r4, r5, r6, pc}
    f7b0:	1c8a      	adds	r2, r1, #2
    f7b2:	784b      	ldrb	r3, [r1, #1]
    f7b4:	2101      	movs	r1, #1
    f7b6:	e7ef      	b.n	f798 <__sccl+0xc>
    f7b8:	2401      	movs	r4, #1
    f7ba:	404c      	eors	r4, r1
    f7bc:	0011      	movs	r1, r2
    f7be:	54c4      	strb	r4, [r0, r3]
    f7c0:	780d      	ldrb	r5, [r1, #0]
    f7c2:	1c4a      	adds	r2, r1, #1
    f7c4:	2d2d      	cmp	r5, #45	; 0x2d
    f7c6:	d007      	beq.n	f7d8 <__sccl+0x4c>
    f7c8:	2d5d      	cmp	r5, #93	; 0x5d
    f7ca:	d0ef      	beq.n	f7ac <__sccl+0x20>
    f7cc:	2d00      	cmp	r5, #0
    f7ce:	d101      	bne.n	f7d4 <__sccl+0x48>
    f7d0:	000a      	movs	r2, r1
    f7d2:	e7eb      	b.n	f7ac <__sccl+0x20>
    f7d4:	002b      	movs	r3, r5
    f7d6:	e7f1      	b.n	f7bc <__sccl+0x30>
    f7d8:	784e      	ldrb	r6, [r1, #1]
    f7da:	2e5d      	cmp	r6, #93	; 0x5d
    f7dc:	d0fa      	beq.n	f7d4 <__sccl+0x48>
    f7de:	42b3      	cmp	r3, r6
    f7e0:	dcf8      	bgt.n	f7d4 <__sccl+0x48>
    f7e2:	3102      	adds	r1, #2
    f7e4:	3301      	adds	r3, #1
    f7e6:	54c4      	strb	r4, [r0, r3]
    f7e8:	429e      	cmp	r6, r3
    f7ea:	dcfb      	bgt.n	f7e4 <__sccl+0x58>
    f7ec:	e7e8      	b.n	f7c0 <__sccl+0x34>
	...

0000f7f0 <__submore>:
    f7f0:	000b      	movs	r3, r1
    f7f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f7f4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    f7f6:	3344      	adds	r3, #68	; 0x44
    f7f8:	000c      	movs	r4, r1
    f7fa:	429d      	cmp	r5, r3
    f7fc:	d11c      	bne.n	f838 <__submore+0x48>
    f7fe:	2680      	movs	r6, #128	; 0x80
    f800:	00f6      	lsls	r6, r6, #3
    f802:	0031      	movs	r1, r6
    f804:	f7fc fab4 	bl	bd70 <_malloc_r>
    f808:	2800      	cmp	r0, #0
    f80a:	d102      	bne.n	f812 <__submore+0x22>
    f80c:	2001      	movs	r0, #1
    f80e:	4240      	negs	r0, r0
    f810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f812:	0023      	movs	r3, r4
    f814:	6360      	str	r0, [r4, #52]	; 0x34
    f816:	63a6      	str	r6, [r4, #56]	; 0x38
    f818:	3346      	adds	r3, #70	; 0x46
    f81a:	781a      	ldrb	r2, [r3, #0]
    f81c:	4b10      	ldr	r3, [pc, #64]	; (f860 <__submore+0x70>)
    f81e:	54c2      	strb	r2, [r0, r3]
    f820:	0023      	movs	r3, r4
    f822:	3345      	adds	r3, #69	; 0x45
    f824:	781a      	ldrb	r2, [r3, #0]
    f826:	4b0f      	ldr	r3, [pc, #60]	; (f864 <__submore+0x74>)
    f828:	54c2      	strb	r2, [r0, r3]
    f82a:	782a      	ldrb	r2, [r5, #0]
    f82c:	4b0e      	ldr	r3, [pc, #56]	; (f868 <__submore+0x78>)
    f82e:	54c2      	strb	r2, [r0, r3]
    f830:	18c0      	adds	r0, r0, r3
    f832:	6020      	str	r0, [r4, #0]
    f834:	2000      	movs	r0, #0
    f836:	e7eb      	b.n	f810 <__submore+0x20>
    f838:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    f83a:	0029      	movs	r1, r5
    f83c:	0073      	lsls	r3, r6, #1
    f83e:	001a      	movs	r2, r3
    f840:	9301      	str	r3, [sp, #4]
    f842:	f7ff f8e9 	bl	ea18 <_realloc_r>
    f846:	1e05      	subs	r5, r0, #0
    f848:	d0e0      	beq.n	f80c <__submore+0x1c>
    f84a:	1987      	adds	r7, r0, r6
    f84c:	0001      	movs	r1, r0
    f84e:	0032      	movs	r2, r6
    f850:	0038      	movs	r0, r7
    f852:	f7fb ffca 	bl	b7ea <memcpy>
    f856:	9b01      	ldr	r3, [sp, #4]
    f858:	6027      	str	r7, [r4, #0]
    f85a:	6365      	str	r5, [r4, #52]	; 0x34
    f85c:	63a3      	str	r3, [r4, #56]	; 0x38
    f85e:	e7e9      	b.n	f834 <__submore+0x44>
    f860:	000003ff 	.word	0x000003ff
    f864:	000003fe 	.word	0x000003fe
    f868:	000003fd 	.word	0x000003fd

0000f86c <_close>:
    f86c:	2258      	movs	r2, #88	; 0x58
    f86e:	2001      	movs	r0, #1
    f870:	4b01      	ldr	r3, [pc, #4]	; (f878 <_close+0xc>)
    f872:	4240      	negs	r0, r0
    f874:	601a      	str	r2, [r3, #0]
    f876:	4770      	bx	lr
    f878:	20001e60 	.word	0x20001e60

0000f87c <_fstat>:
    f87c:	2258      	movs	r2, #88	; 0x58
    f87e:	2001      	movs	r0, #1
    f880:	4b01      	ldr	r3, [pc, #4]	; (f888 <_fstat+0xc>)
    f882:	4240      	negs	r0, r0
    f884:	601a      	str	r2, [r3, #0]
    f886:	4770      	bx	lr
    f888:	20001e60 	.word	0x20001e60

0000f88c <_getpid>:
    f88c:	2258      	movs	r2, #88	; 0x58
    f88e:	2001      	movs	r0, #1
    f890:	4b01      	ldr	r3, [pc, #4]	; (f898 <_getpid+0xc>)
    f892:	4240      	negs	r0, r0
    f894:	601a      	str	r2, [r3, #0]
    f896:	4770      	bx	lr
    f898:	20001e60 	.word	0x20001e60

0000f89c <_isatty>:
    f89c:	2258      	movs	r2, #88	; 0x58
    f89e:	4b02      	ldr	r3, [pc, #8]	; (f8a8 <_isatty+0xc>)
    f8a0:	2000      	movs	r0, #0
    f8a2:	601a      	str	r2, [r3, #0]
    f8a4:	4770      	bx	lr
    f8a6:	46c0      	nop			; (mov r8, r8)
    f8a8:	20001e60 	.word	0x20001e60

0000f8ac <_kill>:
    f8ac:	2258      	movs	r2, #88	; 0x58
    f8ae:	2001      	movs	r0, #1
    f8b0:	4b01      	ldr	r3, [pc, #4]	; (f8b8 <_kill+0xc>)
    f8b2:	4240      	negs	r0, r0
    f8b4:	601a      	str	r2, [r3, #0]
    f8b6:	4770      	bx	lr
    f8b8:	20001e60 	.word	0x20001e60

0000f8bc <_lseek>:
    f8bc:	2258      	movs	r2, #88	; 0x58
    f8be:	2001      	movs	r0, #1
    f8c0:	4b01      	ldr	r3, [pc, #4]	; (f8c8 <_lseek+0xc>)
    f8c2:	4240      	negs	r0, r0
    f8c4:	601a      	str	r2, [r3, #0]
    f8c6:	4770      	bx	lr
    f8c8:	20001e60 	.word	0x20001e60

0000f8cc <_read>:
    f8cc:	2258      	movs	r2, #88	; 0x58
    f8ce:	2001      	movs	r0, #1
    f8d0:	4b01      	ldr	r3, [pc, #4]	; (f8d8 <_read+0xc>)
    f8d2:	4240      	negs	r0, r0
    f8d4:	601a      	str	r2, [r3, #0]
    f8d6:	4770      	bx	lr
    f8d8:	20001e60 	.word	0x20001e60

0000f8dc <_sbrk>:
    f8dc:	4a04      	ldr	r2, [pc, #16]	; (f8f0 <_sbrk+0x14>)
    f8de:	6813      	ldr	r3, [r2, #0]
    f8e0:	2b00      	cmp	r3, #0
    f8e2:	d003      	beq.n	f8ec <_sbrk+0x10>
    f8e4:	1818      	adds	r0, r3, r0
    f8e6:	6010      	str	r0, [r2, #0]
    f8e8:	0018      	movs	r0, r3
    f8ea:	4770      	bx	lr
    f8ec:	4b01      	ldr	r3, [pc, #4]	; (f8f4 <_sbrk+0x18>)
    f8ee:	e7f9      	b.n	f8e4 <_sbrk+0x8>
    f8f0:	20001e5c 	.word	0x20001e5c
    f8f4:	20001e64 	.word	0x20001e64

0000f8f8 <_write>:
    f8f8:	2258      	movs	r2, #88	; 0x58
    f8fa:	2001      	movs	r0, #1
    f8fc:	4b01      	ldr	r3, [pc, #4]	; (f904 <_write+0xc>)
    f8fe:	4240      	negs	r0, r0
    f900:	601a      	str	r2, [r3, #0]
    f902:	4770      	bx	lr
    f904:	20001e60 	.word	0x20001e60

0000f908 <_exit>:
    f908:	e7fe      	b.n	f908 <_exit>
    f90a:	46c0      	nop			; (mov r8, r8)

0000f90c <_init>:
    f90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f90e:	46c0      	nop			; (mov r8, r8)
    f910:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f912:	bc08      	pop	{r3}
    f914:	469e      	mov	lr, r3
    f916:	4770      	bx	lr

0000f918 <_fini>:
    f918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f91a:	46c0      	nop			; (mov r8, r8)
    f91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f91e:	bc08      	pop	{r3}
    f920:	469e      	mov	lr, r3
    f922:	4770      	bx	lr
    f924:	706d6574 	.word	0x706d6574
    f928:	00          	.byte	0x00
    f929:	63          	.byte	0x63
    f92a:	6766      	.short	0x6766
    f92c:	6300433d 	.word	0x6300433d
    f930:	463d6766 	.word	0x463d6766
    f934:	00          	.byte	0x00
    f935:	44          	.byte	0x44
    f936:	5448      	.short	0x5448
    f938:	53203131 	.word	0x53203131
    f93c:	6f736e65 	.word	0x6f736e65
    f940:	6e492072 	.word	0x6e492072
    f944:	61697469 	.word	0x61697469
    f948:	657a696c 	.word	0x657a696c
    f94c:	2d002164 	.word	0x2d002164
    f950:	2d2d2d2d 	.word	0x2d2d2d2d
    f954:	2d2d2d2d 	.word	0x2d2d2d2d
    f958:	2d2d2d2d 	.word	0x2d2d2d2d
    f95c:	2d2d2d2d 	.word	0x2d2d2d2d
    f960:	2d2d2d2d 	.word	0x2d2d2d2d
    f964:	2d2d2d2d 	.word	0x2d2d2d2d
    f968:	2d2d2d2d 	.word	0x2d2d2d2d
    f96c:	2d2d2d2d 	.word	0x2d2d2d2d
    f970:	002d2d2d 	.word	0x002d2d2d
    f974:	736e6553 	.word	0x736e6553
    f978:	203a726f 	.word	0x203a726f
    f97c:	20202020 	.word	0x20202020
    f980:	44002020 	.word	0x44002020
    f984:	65766972 	.word	0x65766972
    f988:	65562072 	.word	0x65562072
    f98c:	20203a72 	.word	0x20203a72
    f990:	6e550020 	.word	0x6e550020
    f994:	65757169 	.word	0x65757169
    f998:	3a444920 	.word	0x3a444920
    f99c:	20202020 	.word	0x20202020
    f9a0:	78614d00 	.word	0x78614d00
    f9a4:	6c615620 	.word	0x6c615620
    f9a8:	203a6575 	.word	0x203a6575
    f9ac:	00202020 	.word	0x00202020
    f9b0:	4d004320 	.word	0x4d004320
    f9b4:	56206e69 	.word	0x56206e69
    f9b8:	65756c61 	.word	0x65756c61
    f9bc:	2020203a 	.word	0x2020203a
    f9c0:	65520020 	.word	0x65520020
    f9c4:	756c6f73 	.word	0x756c6f73
    f9c8:	6e6f6974 	.word	0x6e6f6974
    f9cc:	2020203a 	.word	0x2020203a
    f9d0:	00          	.byte	0x00
    f9d1:	25          	.byte	0x25
    f9d2:	322e      	.short	0x322e
    f9d4:	25002c66 	.word	0x25002c66
    f9d8:	54002c64 	.word	0x54002c64
    f9dc:	20706d65 	.word	0x20706d65
    f9e0:	6c796150 	.word	0x6c796150
    f9e4:	3a64616f 	.word	0x3a64616f
    f9e8:	00732520 	.word	0x00732520
    f9ec:	2e303231 	.word	0x2e303231
    f9f0:	002c3030 	.word	0x002c3030
    f9f4:	33322e30 	.word	0x33322e30
    f9f8:	0000002c 	.word	0x0000002c

0000f9fc <_ZTV26DoubleBufferedEPOutHandler>:
	...
    fa04:	00002c2b 00002b0d 00002a69              +,...+..i*..

0000fa10 <_ZL14STRING_PRODUCT>:
    fa10:	20425355 42204f49 6472616f 03040000              USB IO Board..

0000fa1e <_ZL15STRING_LANGUAGE>:
    fa1e:	04090304                                ....

0000fa22 <_ZL19STRING_MANUFACTURER>:
    fa22:	7474614d 54726961 20686365 00434c4c     MattairTech LLC.

0000fa32 <_ZL21USB_DeviceDescriptorC>:
    fa32:	01100112 40000002 055716d0 02010100     .......@..W.....
    fa42:	48440103 00313154 32544844 48440031     ..DHT11.DHT21.DH
    fa52:	00323254 3f544844 00000000                       T22.DHT?..

0000fa5c <_ZTVN11DHT_Unified11TemperatureE>:
	...
    fa64:	00003dcd 00003e3d 00003dc9 00003dcf     .=..=>...=...=..
    fa74:	00003ee1                                .>..

0000fa78 <_ZTVN11DHT_Unified8HumidityE>:
	...
    fa80:	00003dcb 00003e31 00003dc9 00003e01     .=..1>...=...>..
    fa90:	00003f59 656d6954 3025203a 253a6432     Y?..Time: %02d:%
    faa0:	3a643230 64323025 4400203a 3a657461     02d:%02d: .Date:
    fab0:	32302520 30253a64 253a6432 20643230      %02d:%02d:%02d 
    fac0:	6e6f6d5b 7961643a 6165793a 54005d72     [mon:day:year].T
    fad0:	3a656d69 32302520 30253a64 253a6432     ime: %02d:%02d:%
    fae0:	20643230 3a72685b 3a6e696d 5d636573     02d [hr:min:sec]
    faf0:	3d3d3d00 3d3d3d3d 3d3d3d3d 3d3d3d3d     .===============
    fb00:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    fb10:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    fb20:	3d3d3d3d 003d3d3d 78323025 7325002c     =======.%02x,.%s
    fb30:	2520003a 00783230 524f4243 79615020     :. %02x.CBOR Pay
    fb40:	64616f6c 6d754420 61003a70 69756472     load Dump:.ardui
    fb50:	49006f6e 6e6f7274 66655220 6e657265     no.Itron Referen
    fb60:	43206563 2050416f 76726553 203a7265     ce CoAP Server: 
    fb70:	342e3100 4900362e 6e6f7274 50415320     .1.4.6.Itron SAP
    fb80:	00203a49 2e302e31 6f4e0030 39312076     I: .1.0.0.Nov 19
    fb90:	31303220 34310039 3a35303a 42003930      2019.14:05:09.B
    fba0:	646c6975 6d695420 25203a65 44202073     uild Time: %s  D
    fbb0:	3a657461 00732520 00676663 736e6573     ate: %s.cfg.sens
    fbc0:	72726300 756f7365 68656372 6c646e61     .crresourcehandl
    fbd0:	203a7265 20544547 74617473 203a7375     er: GET status: 
    fbe0:	6c206425 203a6e65 62206425 73657479     %d len: %d bytes
    fbf0:	74655300 73624f20 65767265 64492072     .Set Observer Id
    fc00:	6425203a 67655200 65747369 20646572     : %d.Registered 
    fc10:	736e6573 203a726f 53007325 20495041     sensor: %s.SAPI 
    fc20:	6573626f 20657672 20726f66 736e6573     observe for sens
    fc30:	203a726f 45007325 7265746e 796e6120     or: %s.Enter any
    fc40:	79656b20 206f7420 74206f67 6f42206f      key to go to Bo
    fc50:	7250746f 6172676f 0000006d              otProgram...

0000fc5c <g_APinDescription>:
    fc5c:	09190801 0000703f 80080208 09190901     ....?p..........
    fc6c:	0000703f 80090309 08190200 0000006f     ?p..........o...
    fc7c:	80120080 08190300 000000af 80120180     ................
    fc8c:	08190400 000000af 80120480 08190500     ................
    fc9c:	0000006f 80120580 08190600 0000002f     o.........../...
    fcac:	80120680 08190700 0000002f 80120780     ......../.......
    fcbc:	08190800 0000402f 80121080 08190900     ..../@..........
    fccc:	0000402f 80121180 08190a00 0000402f     /@........../@..
    fcdc:	80121280 08190b00 0000403f 800b1380     ........?@......
    fcec:	08190c00 0000701f 800c1620 08190d00     .....p.. .......
    fcfc:	0000701f 800d1621 08190a01 0000301f     .p..!........0..
    fd0c:	800a1618 08190b01 0000300f 80121619     .........0......
    fd1c:	08191000 0000401f 80001680 08191100     .....@..........
    fd2c:	0000401f 80011680 09191200 0000401f     .@...........@..
    fd3c:	80021680 09191300 0000401f 80031680     .........@......
    fd4c:	0a191400 0000701f 80041602 0a191500     .....p..........
    fd5c:	0000701f 80051603 0b191600 0000700f     .p...........p..
    fd6c:	80121600 0b191700 0000700f 80121601     .........p......
    fd7c:	08191800 0000800f 80121680 08191900     ................
    fd8c:	0000800f 80121680 001b0004 00000000     ................
    fd9c:	80121680 08191b00 0000000f 80121680     ................
    fdac:	001b0004 00000000 80121680 001b0004     ................
    fdbc:	00000000 80121680 08191e00 0000300f     .............0..
    fdcc:	80121610 08191f00 0000300f 80121611     .........0......
    fddc:	08191601 0000001f 80061680 08191701     ................
    fdec:	0000001f 80071680 08190201 0000002f     ............/...
    fdfc:	80120a80 08190301 0000002f 80120b80     ......../.......
    fe0c:	00000a0d                                ....

0000fe10 <_ZTV4Uart>:
	...
    fe18:	00004f99 00004acd 00004e6b 00004e53     .O...J..kN..SN..
    fe28:	00004e49 00004e75 00004ea9 00004e1d     IN..uN...N...N..
    fe38:	00005079 00004e2d 00004e19              yP..-N...N..

0000fe44 <_ZTV7Serial_>:
	...
    fe4c:	00005159 00005185 00005155 00005179     YQ...Q..UQ..yQ..
    fe5c:	0000516d 000051bd 000051a1 6b6f6f4c     mQ...Q...Q..Look
    fe6c:	20676e69 63207075 626c6c61 206b6361     ing up callback 
    fe7c:	20726f66 3a44494d 25783020 41000a78     for MID: 0x%x..A
    fe8c:	6e696464 61632067 61626c6c 66206b63     dding callback f
    fe9c:	4d20726f 203a4449 78257830 6e49000a     or MID: 0x%x..In
    feac:	66667573 65696369 6220746e 65666675     sufficient buffe
    febc:	70732072 20656361 61206f74 6f206464     r space to add o
    fecc:	6f697470 6f000a6e 6c6f3e2d 203d3c20     ption..o->ol <= 
    fedc:	657a6973 7528666f 33746e69 29745f32     sizeof(uint32_t)
    feec:	2f2e2e00 2f637273 7262696c 65697261     .../src/librarie
    fefc:	73732f73 635f696e 5f70616f 76726573     s/ssni_coap_serv
    ff0c:	632f7265 6d70616f 632e6773 43007070     er/coapmsg.cpp.C
    ff1c:	646c756f 2074276e 20646461 6573626f     ouldn't add obse
    ff2c:	20657672 6974706f 43006e6f 2050416f     rve option.CoAP 
    ff3c:	20514552 6f636564 6f006564 6f697470     REQ decode.optio
    ff4c:	7974206e 203a6570 6c207525 203a6e65     n type: %u len: 
    ff5c:	43007525 646c756f 2074276e 65766173     %u.Couldn't save
    ff6c:	74706f20 206e6f69 61746164 686e7500      option data.unh
    ff7c:	6c646e61 63206465 69746972 206c6163     andled critical 
    ff8c:	6974706f 25206e6f 6d000a64 69737369     option %d..missi
    ff9c:	6f20676e 6f697470 6573206e 61726170     ng option separa
    ffac:	20726f74 43004646 646c756f 2074276e     tor FF.Couldn't 
    ffbc:	20646461 6573624f 20657672 6974706f     add Observe opti
    ffcc:	74206e6f 736d206f 6f430067 6e646c75     on to msg.Couldn
    ffdc:	61207427 63206464 65746e6f 6620746e     't add content f
    ffec:	616d726f 706f2074 6e6f6974 206f7420     ormat option to 
    fffc:	0067736d 6c756f43 74276e64 64646120     msg.Couldn't add
   1000c:	78614d20 6567412d 74706f20 206e6f69      Max-Age option 
   1001c:	6d206f74 69006773 3c207864 4f43203d     to msg.idx <= CO
   1002c:	4f5f5041 485f5342 535f5244 6552005a     AP_OBS_HDR_SZ.Re
   1003c:	6e6f7073 4e006573 43004e4f 52004e4f     sponse.NON.CON.R
   1004c:	41005453 50004b43 0054534f 00544547     ST.ACK.POST.GET.
   1005c:	00545550 54504d45 45440059 4554454c     PUT.EMPTY.DELETE
   1006c:	72655300 20726576 6f727245 75530072     .Server Error.Su
   1007c:	73656363 6c430073 746e6569 72724520     ccess.Client Err
   1008c:	5200726f 522f5145 54205053 3a657079     or.REQ/RSP Type:
   1009c:	00732520 2f514552 204b4341 65646f43      %s.REQ/ACK Code
   100ac:	7325203a 50535200 646f4320 25203a65     : %s.RSP Code: %
   100bc:	72550073 61502d69 512d6874 79726575     s.Uri-Path-Query
   100cc:	7325203a 6e697500                                : %s.

000100d1 <_ZZ13co_uint32_h2nPK5optlvE19__PRETTY_FUNCTION__>:
   100d1:	746e6975 745f3233 5f6f6320 746e6975     uint32_t co_uint
   100e1:	685f3233 63286e32 74736e6f 74706f20     32_h2n(const opt
   100f1:	292a766c 6e697500                                lv*).

000100f6 <_ZZ13co_uint32_n2hPK5optlvE19__PRETTY_FUNCTION__>:
   100f6:	746e6975 745f3233 5f6f6320 746e6975     uint32_t co_uint
   10106:	6e5f3233 63286832 74736e6f 74706f20     32_n2h(const opt
   10116:	292a766c 72726500                                lv*).

0001011b <_ZZ17coap_msg_responseP12coap_msg_ctxE19__PRETTY_FUNCTION__>:
   1011b:	6f727265 20745f72 70616f63 67736d5f     error_t coap_msg
   1012b:	7365725f 736e6f70 6f632865 6d5f7061     _response(coap_m
   1013b:	635f6773 292a7874 746f4e00 64646120     sg_ctx*).Not add
   1014b:	20676e69 2073626f 72746e65 6f662079     ing obs entry fo
   1015b:	73252072 6973202c 6f743a64 206e656b     r %s, sid:token 
   1016b:	20746f6e 71696e75 4e006575 6120746f     not unique.Not a
   1017b:	6e696464 626f2067 6e652073 20797274     dding obs entry 
   1018b:	20726f66 202c7325 6c707564 74616369     for %s, duplicat
   1019b:	64002e65 62617369 6f5f656c 203a7362     e..disable_obs: 
   101ab:	722d6544 73696765 65726574 52552064     De-registered UR
   101bb:	25203a49 706f0073 706f0074 6f3e2d74     I: %s.opt.opt->o
   101cb:	69440076 74276e64 6e696620 706f2064     v.Didn't find op
   101db:	6e6f6974 20642520 64206f74 74656c65     tion %d to delet
   101eb:	68002e65 2e2e0064 6372732f 62696c2f     e..hd.../src/lib
   101fb:	69726172 732f7365 5f696e73 70616f63     raries/ssni_coap
   1020b:	7265735f 2f726576 70616f63 2e74706f     _server/coapopt.
   1021b:	00707063                                cpp.

0001021f <_ZZ12copt_add_optP5sl_coP5optlvE19__PRETTY_FUNCTION__>:
   1021f:	6f727265 20745f72 74706f63 6464615f     error_t copt_add
   1022f:	74706f5f 5f6c7328 2c2a6f63 74706f20     _opt(sl_co*, opt
   1023f:	292a766c 696f7600                                lv*).

00010244 <_ZZ12copt_del_allP5sl_coE19__PRETTY_FUNCTION__>:
   10244:	64696f76 706f6320 65645f74 6c615f6c     void copt_del_al
   10254:	6c73286c 2a6f635f 72650029                       l(sl_co*).

0001025e <_ZZ17copt_del_opt_typeP5sl_cotE19__PRETTY_FUNCTION__>:
   1025e:	6f727265 20745f72 74706f63 6c65645f     error_t copt_del
   1026e:	74706f5f 7079745f 6c732865 2a6f635f     _opt_type(sl_co*
   1027e:	6975202c 3631746e 0029745f              , uint16_t).

0001028a <_ZZ22copt_get_next_opt_typePK5sl_cotPPvE19__PRETTY_FUNCTION__>:
   1028a:	6c74706f 63202a76 5f74706f 5f746567     optlv* copt_get_
   1029a:	7478656e 74706f5f 7079745f 6f632865     next_opt_type(co
   102aa:	2074736e 635f6c73 202c2a6f 746e6975     nst sl_co*, uint
   102ba:	745f3631 6f76202c 2a2a6469 6f760029              16_t, void**).

000102c8 <_ZZ9copt_initP5sl_coE19__PRETTY_FUNCTION__>:
   102c8:	64696f76 706f6320 6e695f74 73287469     void copt_init(s
   102d8:	6f635f6c 6400292a 626f5f6f 76726573     l_co*).do_observ
   102e8:	65203a65 68636f70 20782520 20697275     e: epoch %x uri 
   102f8:	64007325 626f5f6f 76726573 46203a65     %s.do_observe: F
   10308:	20656572 3a6d6152 00642520 70616f63     ree Ram: %d.coap
   10318:	73626f5f 65767265 7073725f 6550203a     _observe_rsp: Pe
   10328:	6e69646e 65722067 6e6f7073 69206573     nding response i
   10338:	7270206e 6572676f 2d207373 696b7320     n progress - ski
   10348:	6e697070 656e2067 6f6e2077 69666974     pping new notifi
   10358:	69746163 67006e6f 6f5f7465 625f7362     cation.get_obs_b
   10368:	72755f79 61662069 64656c69 7325203a     y_uri failed: %s
   10378:	756f4300 276e646c 64612074 624f2064     .Couldn't add Ob
   10388:	76726573 706f2065 6e6f6974 756f4300     serve option.Cou
   10398:	276e646c 64612074 614d2064 67412d78     ldn't add Max-Ag
   103a8:	706f2065 6e6f6974 616f6300 626f5f70     e option.coap_ob
   103b8:	76726573 73725f65 45203a70 726f7272     serve_rsp: Error
   103c8:	65726320 6e697461 65722067 6e6f7073      creating respon
   103d8:	25006573 64253a73 656c4320 64657261     se.%s:%d Cleared
   103e8:	6e657020 676e6964 7073725f 616f6300      pending_rsp.coa
   103f8:	626f5f70 76726573 73725f65 66203a70     p_observe_rsp: f
   10408:	20656572 70736572 65736e6f 75626d20     ree response mbu
   10418:	6e6f2066 72726520 2f00726f 75647261     f on error./ardu
   10428:	2f6f6e69 44007325 65722d65 74736967     ino/%s.De-regist
   10438:	4f207265 72657362 203a6576 63006425              er Observe: %d.

00010447 <_ZZ16coap_observe_rsphE12__FUNCTION__>:
   10447:	70616f63 73626f5f 65767265 7073725f     coap_observe_rsp
   10457:	74697400 223d656c 6f666e49 74633b22     .title="Info";ct
   10467:	2e00303d 6c6c6577 6f6e6b2d 69006e77     =0..well-known.i
   10477:	73223d66 3b227379 6c746974 53223d65     f="sys";title="S
   10487:	65747379 633b226d 32343d74 7665723b     ystem";ct=42;rev
   10497:	003b313d 00737973 223d6669 75647261     =1;.sys.if="ardu
   104a7:	226f6e69 7469743b 223d656c 75647241     ino";title="Ardu
   104b7:	206f6e69 736e6553 2273726f 3d74633b     ino Sensors";ct=
   104c7:	003b3234 65726f63 002f3c00 656d6974     42;.core.</.time
   104d7:	6f704500 66206863 4720726f 6f205445     .Epoch for GET o
   104e7:	79732066 69742073 203a656d 78383025     f sys time: %08x
   104f7:	54555000 79732f20 69742f73 5020656d     .PUT /sys/time P
   10507:	6f6c7961 53006461 69747465 5220676e     ayload.Setting R
   10517:	74204354 7065206f 3a68636f 38302520     TC to epoch: %08
   10527:	74730078 00737461 3d646f6d 70616f63     x.stats.mod=coap
   10537:	646f6d00 7277703d 54454700 74732820     .mod=pwr.GET (st
   10547:	73757461 29642520 61657220 64252064     atus %d) read %d
   10557:	74796220 002e7365 20544553 61747328      bytes..SET (sta
   10567:	20737574 2e296425 6e655300 676e6964     tus %d)..Sending
   10577:	73657220 65207465 746e6576 206f7420      reset event to 
   10587:	63696e6d ff035000                                mnic.

0001058c <_ZL6rbtput>:
   1058c:	ffff0350 737973b3 736e7304 76654672     P....sys.snsrFev
   1059c:	7462723d 70616f63 725f735f 203a6e75     =rbtcoap_s_run: 
   105ac:	65657266 20676e69 70737261 75626d20     freeing arsp mbu
   105bc:	6f630066 735f7061 6e75725f 7266203a     f.coap_s_run: fr
   105cc:	6e696565 70612067 6d206470 00667562     eeing appd mbuf.
   105dc:	70616f63 725f735f 203a6e75 65657266     coap_s_run: free
   105ec:	6d615220 6425203a 4c444800 6e692043      Ram: %d.HDLC in
   105fc:	61697469 617a696c 6e6f6974 69616620     itialization fai
   1060c:	2164656c 4b434100 726f6620 64696d20     led!.ACK for mid
   1061c:	7830203a 72207825 69656365 2c646576     : 0x%x received,
   1062c:	6f6f6c20 2070756b 75746572 64656e72      lookup returned
   1063c:	00642520 6c696146 74206465 6e65206f      %d.Failed to en
   1064c:	656c6261 626f2064 76726573 6f662065     abled observe fo
   1065c:	52552072 25203a49 6e450073 656c6261     r URI: %s.Enable
   1066c:	626f2064 76726573 6f662065 52552072     d observe for UR
   1067c:	25203a49 69440073 6c626173 6f206465     I: %s.Disabled o
   1068c:	72657362 66206576 5520726f 25204952     bserve for URI %
   1069c:	72450073 20726f72 2067736d 3a707372     s.Error msg rsp:
   106ac:	65726620 676e6965 75626d20 6f4e0066      freeing mbuf.No
   106bc:	70737220 7266203a 6e696565 626d2067      rsp: freeing mb
   106cc:	50006675 65737261 72726520 203a726f     uf.Parse error: 
   106dc:	65657266 20676e69 6675626d 72724500     freeing mbuf.Err
   106ec:	203a726f 682f6372 656c3e2d 25203a6e     or: rc/h->len: %
   106fc:	64252f64 6363202c 646f632e 25203a65     d/%d, cc.code: %
   1070c:	6f630064 735f7061 6f72705f 46203a63     d.coap_s_proc: F
   1071c:	20656572 6d206363 00667562 6f6c6c41     ree cc mbuf.Allo
   1072c:	65746163 75626d20 69772066 73206874     cate mbuf with s
   1073c:	3a657a69 00642520 732f2e2e 6c2f6372     ize: %d.../src/l
   1074c:	61726269 73656972 6e73732f 6f635f69     ibraries/ssni_co
   1075c:	735f7061 65767265 62682f72 632e6675     ap_server/hbuf.c
   1076c:	6d007070                                         pp.

0001076f <_ZZ5m_getvE19__PRETTY_FUNCTION__>:
   1076f:	6675626d 5f6d202a 28746567 68540029     mbuf* m_get().Th
   1077f:	616d2065 61702078 616f6c79 69732064     e max payload si
   1078f:	7320657a 69636570 64656966 20736920     ze specified is 
   1079f:	206f6f74 6772616c 25203a65 79622064     too large: %d by
   107af:	2e736574 65685420 78616d20 6d756d69     tes. The maximum
   107bf:	6c6c6120 6465776f 20736920 62206425      allowed is %d b
   107cf:	73657479 73680020 65722e73 2e007663     ytes .hss.recv..
   107df:	72732f2e 696c2f63 72617262 2f736569     ./src/libraries/
   107ef:	696e7373 616f635f 65735f70 72657672     ssni_coap_server
   107ff:	6c64682f 632e7363 68007070 73636c64     /hdlcs.cpp.hdlcs
   1080f:	6165725f 20292864 7825202d 73657200     _read() - %x.res
   1081f:	646e6f70 206f7420 77205252 20687469     pond to RR with 
   1082f:	52005252 6e657365 676e6964 61726620     RR.Resending fra
   1083f:	5000656d 65636f72 69207373 6d6f636e     me.Process incom
   1084f:	20676e69 6c727463 32302520 6e692078     ing ctrl %02x in
   1085f:	61747320 25206574 65720064 6e6f7073      state %d.respon
   1086f:	72206573 20646578 70207461 616d6972     se rxed at prima
   1087f:	72007972 65757165 72207473 27766365     ry.request recv'
   1088f:	6e692064 73696420 6e6e6f63 65746365     d in disconnecte
   1089f:	6f6d2064 48006564 5f434c44 4d524e53     d mode.HDLC_SNRM
   108af:	4c444800 00495f43 78656e55 74636570     .HDLC_I.Unexpect
   108bf:	73206465 756e7165 284e206d 3d202953     ed seqnum N(S) =
   108cf:	20642520 52285620 203d2029 52006425      %d  V(R) = %d.R
   108df:	20766365 72662049 00656d61 61746164     ecv I frame.data
   108ef:	20424320 20746f6e 70707573 6574726f      CB not supporte
   108ff:	44480064 525f434c 63680052 3a726e2e     d.HDLC_RR.hc.nr:
   1090f:	2c642520 73736820 3a73762e 00642520      %d, hss.vs: %d.
   1091f:	434c4448 5349445f 69640043 6e6f6373     HDLC_DISC.discon
   1092f:	7463656e 00676e69 6f727265 202d2072     necting.error - 
   1093f:	6d617266 65722065 7463656a 45006465     frame rejected.E
   1094f:	726f7272 75202d20 6f6e6b6e 73206e77     rror - unknown s
   1095f:	65746174 6425203a 6c646800 725f7363     tate: %d.hdlcs_r
   1096f:	29286e75 25202d20 6e650064 20726574     un() - %d.enter 
   1097f:	6d726f6e 6d206c61 0065646f 4d524e53     normal mode.SNRM
   1098f:	2041552d 70736572 65736e6f 20637220     -UA response rc 
   1099f:	6d006425                                         %d.

000109a2 <_ZZ10hdlcs_readvE19__PRETTY_FUNCTION__>:
   109a2:	6675626d 6468202a 5f73636c 64616572     mbuf* hdlcs_read
   109b2:	68002928                                         ().

000109b5 <_ZZ9hdlcs_runvE12__FUNCTION__>:
   109b5:	636c6468 75725f73 6f76006e                       hdlcs_run.

000109bf <_ZZL13hdlcs_get_bufiE19__PRETTY_FUNCTION__>:
   109bf:	64696f76 6c646820 675f7363 625f7465     void hdlcs_get_b
   109cf:	69286675 0029746e 05148081 06000102     uf(int).........
   109df:	07000102 00000004 00040801 48010000     ...............H
   109ef:	20434c44 646e6573 61726620 4500656d     DLC send frame.E
   109ff:	726f7272 6468203a 735f636c 5f646e65     rror: hdlc_send_
   10a0f:	6d617266 20292865 20646964 20746f6e     frame() did not 
   10a1f:	646e6573 20642520 65747962 73612073     send %d bytes as
   10a2f:	71657220 65726975 66000a64 656d6172      required..frame
   10a3f:	70797420 30203a65 00782578 64616572      type: 0x%x.read
   10a4f:	65747942 20292873 6e756f63 25203a74     Bytes() count: %
   10a5f:	68540064 41552065 72205452 69656365     d.The UART recei
   10a6f:	62206576 65666675 61682072 766f2073     ve buffer has ov
   10a7f:	6c667265 216e776f 20655700 64616572     erflown!.We read
   10a8f:	20642520 65747962 6e612073 68742064      %d bytes and th
   10a9f:	616d2065 73692078 20642520 65747962     e max is %d byte
   10aaf:	4d002e73 69737369 4820676e 20434c44     s..Missing HDLC 
   10abf:	67616c66 00297328 78746368 5f75682e     flag(s).hctx.hu_
   10acf:	646e6570 203d3d20 68540032 72662065     pend == 2.The fr
   10adf:	20656d61 676e656c 64206874 6e73656f     ame length doesn
   10aef:	6d207427 68637461 65687420 6d756e20     't match the num
   10aff:	20726562 7220666f 69656365 20646576     ber of received 
   10b0f:	65747962 72660073 5f656d61 3a6e656c     bytes.frame_len:
   10b1f:	78720020 6e656c5f 2020203a 69440020      .rx_len:    .Di
   10b2f:	72616373 72662064 20656d61 5243202d     scard frame - CR
   10b3f:	72652043 00726f72 63736944 20647261     C error.Discard 
   10b4f:	6d617266 202d2065 20646162 6f666e69     frame - bad info
   10b5f:	6e656c20 65685400 4c444820 61702043      len.The HDLC pa
   10b6f:	616f6c79 73692064 6f6f7420 72616c20     yload is too lar
   10b7f:	00216567 67206557 2520746f 79622064     ge!.We got %d by
   10b8f:	20736574 20646e61 20656874 2078616d     tes and the max 
   10b9f:	25207369 79622064 2e736574 72655a00     is %d bytes..Zer
   10baf:	6e69206f 656c6f66 4448006e 7220434c     o infolen.HDLC r
   10bbf:	20766365 6d617266 61420065 64682064     ecv frame.Bad hd
   10bcf:	202d2072 73756c66 61620068 6e692064     r - flush.bad in
   10bdf:	656c6f66 202d206e 73756c66 00000068              folen - flush..

00010bee <_ZL15xmodem_crctable>:
   10bee:	11890000 329b2312 57ad4624 74bf6536     .....#.2$F.W6e.t
   10bfe:	9dc18c48 bed3af5a dbe5ca6c f8f7e97e     H...Z...l...~...
   10c0e:	01081081 221a3393 472c56a5 643e75b7     .....3.".V,G.u>d
   10c1e:	8d409cc9 ae52bfdb cb64daed e876f9ff     ..@...R...d...v.
   10c2e:	308b2102 13990210 76af6726 55bd4434     .!.0....&g.v4D.U
   10c3e:	bcc3ad4a 9fd18e58 fae7eb6e d9f5c87c     J...X...n...|...
   10c4e:	200a3183 03181291 662e77a7 453c54b5     .1. .....w.f.T<E
   10c5e:	ac42bdcb 8f509ed9 ea66fbef c974d8fd     ..B...P...f...t.
   10c6e:	538d4204 709f6116 15a90420 36bb2732     .B.S.a.p ...2'.6
   10c7e:	dfc5ce4c fcd7ed5e 99e18868 baf3ab7a     L...^...h...z...
   10c8e:	430c5285 601e7197 052814a1 263a37b3     .R.C.q.`..(..7:&
   10c9e:	cf44decd ec56fddf 896098e9 aa72bbfb     ..D...V...`...r.
   10cae:	728f6306 519d4014 34ab2522 17b90630     .c.r.@.Q"%.40...
   10cbe:	fec7ef4e ddd5cc5c b8e3a96a 9bf18a78     N...\...j...x...
   10cce:	620e7387 411c5095 242a35a3 073816b1     .s.b.P.A.5*$..8.
   10cde:	ee46ffcf cd54dcdd a862b9eb 8b709af9     ..F...T...b...p.
   10cee:	95818408 b693a71a d3a5c22c f0b7e13e     ........,...>...
   10cfe:	19c90840 3adb2b52 5fed4e64 7cff6d76     @...R+.:dN._vm.|
   10d0e:	85009489 a612b79b c324d2ad e036f1bf     ..........$...6.
   10d1e:	094818c1 2a5a3bd3 4f6c5ee5 6c7e7df7     ..H..;Z*.^lO.}~l
   10d2e:	b483a50a 97918618 f2a7e32e d1b5c03c     ............<...
   10d3e:	38cb2942 1bd90a50 7eef6f66 5dfd4c74     B).8P...fo.~tL.]
   10d4e:	a402b58b 87109699 e226f3af c134d0bd     ..........&...4.
   10d5e:	284a39c3 0b581ad1 6e6e7fe7 4d7c5cf5     .9J(..X...nn.\|M
   10d6e:	d785c60c f497e51e 91a18028 b2b3a33a     ........(...:...
   10d7e:	5bcd4a44 78df6956 1de90c60 3efb2f72     DJ.[Vi.x`...r/.>
   10d8e:	c704d68d e416f59f 812090a9 a232b3bb     .......... ...2.
   10d9e:	4b4c5ac5 685e79d7 0d681ce1 2e7a3ff3     .ZLK.y^h..h..?z.
   10dae:	f687e70e d595c41c b0a3a12a 93b18238     ........*...8...
   10dbe:	7acf6b46 59dd4854 3ceb2d62 1ff90e70     Fk.zTH.Yb-.<p...
   10dce:	e606f78f c514d49d a022b1ab 833092b9     .........."...0.
   10dde:	6a4e7bc7 495c58d5 2c6a3de3 0f781ef1     .{Nj.X\I.=j,..x.
   10dee:	78650000 71730070 00667472 00000000     ..exp.sqrtf.....
	...

00010e00 <halF>:
   10e00:	00000000 3fe00000 00000000 bfe00000     .......?........

00010e10 <ln2HI>:
   10e10:	fee00000 3fe62e42 fee00000 bfe62e42     ....B..?....B...

00010e20 <ln2LO>:
   10e20:	35793c76 3dea39ef 35793c76 bdea39ef     v<y5.9.=v<y5.9..
   10e30:	00008e44 00008e14 00008e26 00008d68     D.......&...h...
   10e40:	00008e26 00008e0a 00008e26 00008d68     &.......&...h...
   10e50:	00008e14 00008e14 00008e0a 00008d68     ............h...
   10e60:	00008d70 00008d70 00008d70 00008e2c     p...p...p...,...
   10e70:	00008e14 00008e14 00008de8 00008ecc     ................
   10e80:	00008de8 00008e0a 00008de8 00008ecc     ................
   10e90:	00008e14 00008e14 00008e0a 00008ecc     ................
   10ea0:	00008d70 00008d70 00008d70 00008ed6     p...p...p.......
   10eb0:	000091c4 00009114 00009114 00009112     ................
   10ec0:	000091b6 000091b6 000091ac 00009112     ................
   10ed0:	000091b6 000091ac 000091b6 00009112     ................
   10ee0:	000091bc 000091bc 000091bc 0000924c     ............L...
   10ef0:	00009fc4 00009fa6 00009f60 00009e7e     ........`...~...
   10f00:	00009f60 00009f98 00009f60 00009e7e     `.......`...~...
   10f10:	00009fa6 00009fa6 00009f98 00009e7e     ............~...
   10f20:	00009e76 00009e76 00009e76 0000a1dc     v...v...v.......
   10f30:	0000a824 0000a6e4 0000a6e4 0000a6e0     $...............
   10f40:	0000a7fc 0000a7fc 0000a7ee 0000a6e0     ................
   10f50:	0000a7fc 0000a7ee 0000a7fc 0000a6e0     ................
   10f60:	0000a804 0000a804 0000a804 0000aa08     ................
   10f70:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
   10f80:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
   10f90:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
   10fa0:	20656e69 73256425 000a7325              ine %d%s%s..

00010fac <_global_impure_ptr>:
   10fac:	200000b8 49534f50 00000058              ... POSIX...

00010fb8 <DAYS_IN_MONTH>:
   10fb8:	0000001f 0000001c 0000001f 0000001e     ................
   10fc8:	0000001f 0000001e 0000001f 0000001f     ................
   10fd8:	0000001e 0000001f 0000001e 0000001f     ................

00010fe8 <_DAYS_BEFORE_MONTH>:
   10fe8:	00000000 0000001f 0000003b 0000005a     ........;...Z...
   10ff8:	00000078 00000097 000000b5 000000d4     x...............
   11008:	000000f3 00000111 00000130 0000014e     ........0...N...
   11018:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   11028:	464e4900 666e6900 4e414e00 6e616e00     .INF.inf.NAN.nan
   11038:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   11048:	31300046 35343332 39383736 64636261     F.0123456789abcd
   11058:	54006665 4d47005a 31250054 305e5b30     ef.TZ.GMT.%10[^0
   11068:	2b2c392d 6e255d2d 68254d00 2e6e2575     -9,+-]%n.M%hu%n.
   11078:	25756825 68252e6e 006e2575 7568252f     %hu%n.%hu%n./%hu
   11088:	253a6e25 6e257568 7568253a 00006e25              %n:%hu%n:%hu%n.

00011097 <_ctype_>:
   11097:	20202000 20202020 28282020 20282828     .         ((((( 
   110a7:	20202020 20202020 20202020 20202020                     
   110b7:	10108820 10101010 10101010 10101010      ...............
   110c7:	04040410 04040404 10040404 10101010     ................
   110d7:	41411010 41414141 01010101 01010101     ..AAAAAA........
   110e7:	01010101 01010101 01010101 10101010     ................
   110f7:	42421010 42424242 02020202 02020202     ..BBBBBB........
   11107:	02020202 02020202 02020202 10101010     ................
   11117:	00000020 00000000 00000000 00000000      ...............
	...
   11197:	666e4900 74696e69 614e0079 0000004e     .Infinity.NaN...
	...

000111a8 <__sf_fake_stderr>:
	...

000111c8 <__sf_fake_stdin>:
	...

000111e8 <__sf_fake_stdout>:
	...

00011208 <__month_lengths>:
   11208:	0000001f 0000001c 0000001f 0000001e     ................
   11218:	0000001f 0000001e 0000001f 0000001f     ................
   11228:	0000001e 0000001f 0000001e 0000001f     ................
   11238:	0000001f 0000001d 0000001f 0000001e     ................
   11248:	0000001f 0000001e 0000001f 0000001f     ................
   11258:	0000001e 0000001f 0000001e 0000001f     ................

00011268 <__mprec_bigtens>:
   11268:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   11278:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   11288:	7f73bf3c 75154fdd                       <.s..O.u

00011290 <__mprec_tens>:
   11290:	00000000 3ff00000 00000000 40240000     .......?......$@
   112a0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   112b0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   112c0:	00000000 412e8480 00000000 416312d0     .......A......cA
   112d0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   112e0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   112f0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   11300:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   11310:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   11320:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   11330:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   11340:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   11350:	79d99db4 44ea7843                       ...yCx.D

00011358 <p05.6047>:
   11358:	00000005 00000019 0000007d 00011382     ........}.......
   11368:	00011385 00011388 61462d41 3938662d     ........A-Fa-f89
   11378:	33323130 37363534 2d2b005d 00303000     01234567].+-.00.
   11388:	00005878                                xX..

0001138c <__EH_FRAME_BEGIN__>:
   1138c:	00000000                                ....

Disassembly of section .ramfunc:

00011390 <banzai>:
void banzai() {
   11390:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11392:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
   11394:	4b11      	ldr	r3, [pc, #68]	; (113dc <banzai+0x4c>)
   11396:	4a12      	ldr	r2, [pc, #72]	; (113e0 <banzai+0x50>)
   11398:	3304      	adds	r3, #4
   1139a:	4293      	cmp	r3, r2
   1139c:	d808      	bhi.n	113b0 <banzai+0x20>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1139e:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
   113a2:	4a10      	ldr	r2, [pc, #64]	; (113e4 <banzai+0x54>)
   113a4:	4b10      	ldr	r3, [pc, #64]	; (113e8 <banzai+0x58>)
   113a6:	60da      	str	r2, [r3, #12]
   113a8:	f3bf 8f4f 	dsb	sy
    __NOP();
   113ac:	46c0      	nop			; (mov r8, r8)
   113ae:	e7fd      	b.n	113ac <banzai+0x1c>
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   113b0:	4a0e      	ldr	r2, [pc, #56]	; (113ec <banzai+0x5c>)
	while (!nvmReady())
   113b2:	2101      	movs	r1, #1
   113b4:	0010      	movs	r0, r2
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   113b6:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
   113b8:	420c      	tst	r4, r1
   113ba:	d0fc      	beq.n	113b6 <banzai+0x26>
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   113bc:	2120      	movs	r1, #32
   113be:	8b14      	ldrh	r4, [r2, #24]
   113c0:	31ff      	adds	r1, #255	; 0xff
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   113c2:	089b      	lsrs	r3, r3, #2
   113c4:	005b      	lsls	r3, r3, #1
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   113c6:	4321      	orrs	r1, r4
   113c8:	8311      	strh	r1, [r2, #24]
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   113ca:	61d3      	str	r3, [r2, #28]
          NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
   113cc:	4b08      	ldr	r3, [pc, #32]	; (113f0 <banzai+0x60>)
   113ce:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
   113d0:	2301      	movs	r3, #1
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   113d2:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
   113d4:	421a      	tst	r2, r3
   113d6:	d0fc      	beq.n	113d2 <banzai+0x42>
   113d8:	e7e1      	b.n	1139e <banzai+0xe>
   113da:	46c0      	nop			; (mov r8, r8)
   113dc:	00002000 	.word	0x00002000
   113e0:	00000203 	.word	0x00000203
   113e4:	05fa0004 	.word	0x05fa0004
   113e8:	e000ed00 	.word	0xe000ed00
   113ec:	41004000 	.word	0x41004000
   113f0:	ffffa502 	.word	0xffffa502
