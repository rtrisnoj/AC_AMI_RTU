
us3_mshield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010d00  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000064  00012d00  00012d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000300  20000000  00012d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001cac  20000300  00013064  00020300  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
  6 .debug_info   000f6403  00000000  00000000  00020381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000126b8  00000000  00000000  00116784  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001a5d4  00000000  00000000  00128e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001980  00000000  00000000  00143410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002aa0  00000000  00000000  00144d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000188db  00000000  00000000  00147830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00029850  00000000  00000000  0016010b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009f715  00000000  00000000  0018995b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000629c  00000000  00000000  00229070  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stab         000000cc  00000000  00000000  0022f30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      000001b9  00000000  00000000  0022f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 05 26 00 00 e9 25 00 00 01 26 00 00     ... .&...%...&..
	...
    202c:	e9 25 00 00 00 00 00 00 00 00 00 00 e9 25 00 00     .%...........%..
    203c:	59 26 00 00 e9 25 00 00 e9 25 00 00 e9 25 00 00     Y&...%...%...%..
    204c:	e9 25 00 00 e9 25 00 00 e9 25 00 00 ed 25 00 00     .%...%...%...%..
    205c:	e9 25 00 00 b5 4d 00 00 e9 25 00 00 e9 25 00 00     .%...M...%...%..
    206c:	c5 4d 00 00 a5 4d 00 00 e9 25 00 00 e9 25 00 00     .M...M...%...%..
    207c:	e9 25 00 00 e9 25 00 00 e9 25 00 00 e9 25 00 00     .%...%...%...%..
    208c:	e9 25 00 00 e9 25 00 00 e9 25 00 00 e9 25 00 00     .%...%...%...%..
    209c:	e9 25 00 00 e9 25 00 00 e9 25 00 00 e9 25 00 00     .%...%...%...%..
    20ac:	e9 25 00 00 00 00 00 00                             .%......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000300 	.word	0x20000300
    20d4:	00000000 	.word	0x00000000
    20d8:	00012cfc 	.word	0x00012cfc

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000304 	.word	0x20000304
    2108:	00012cfc 	.word	0x00012cfc
    210c:	200002fc 	.word	0x200002fc
    2110:	00000000 	.word	0x00000000

00002114 <setup>:

//
//  Arduino setup function.
//
void setup()
{
    2114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	Serial.begin(115200);
    2116:	21e1      	movs	r1, #225	; 0xe1
    2118:	480b      	ldr	r0, [pc, #44]	; (2148 <setup+0x34>)
    211a:	0249      	lsls	r1, r1, #9
    211c:	f000 fc74 	bl	2a08 <_ZN7Serial_5beginEm>
	
	sapi_error_t rcode;
	
	// Initialize Sensor API
	sapi_initialize(NULL);
    2120:	2000      	movs	r0, #0
    2122:	f002 fd1d 	bl	4b60 <_Z15sapi_initializePc>
	
	// Register temp sensor
	temp_sensor_id = sapi_register_sensor(TEMP_SENSOR_TYPE, temp_init_sensor, temp_read_sensor, temp_read_cfg, temp_write_cfg, 1, 60);
    2126:	233c      	movs	r3, #60	; 0x3c
    2128:	9302      	str	r3, [sp, #8]
    212a:	3b3b      	subs	r3, #59	; 0x3b
    212c:	9301      	str	r3, [sp, #4]
    212e:	4b07      	ldr	r3, [pc, #28]	; (214c <setup+0x38>)
    2130:	4a07      	ldr	r2, [pc, #28]	; (2150 <setup+0x3c>)
    2132:	9300      	str	r3, [sp, #0]
    2134:	4907      	ldr	r1, [pc, #28]	; (2154 <setup+0x40>)
    2136:	4b08      	ldr	r3, [pc, #32]	; (2158 <setup+0x44>)
    2138:	4808      	ldr	r0, [pc, #32]	; (215c <setup+0x48>)
    213a:	f002 fad9 	bl	46f0 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>
	
	// Initialize temp sensor
	rcode = sapi_init_sensor(temp_sensor_id);
    213e:	f002 fb1f 	bl	4780 <_Z16sapi_init_sensorh>
	
	// Initialize echo sensor
	//rcode = sapi_init_sensor(echo_sensor_id);
	
	
}
    2142:	b005      	add	sp, #20
    2144:	bd00      	pop	{pc}
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	2000037c 	.word	0x2000037c
    214c:	0000216d 	.word	0x0000216d
    2150:	00002449 	.word	0x00002449
    2154:	00002495 	.word	0x00002495
    2158:	000023b5 	.word	0x000023b5
    215c:	00010bfc 	.word	0x00010bfc

00002160 <loop>:

//
// Arduino main loop function.
//
void loop()
{
    2160:	b510      	push	{r4, lr}
	// Call SAPI run to do the heavy lifting
	sapi_run();
    2162:	f002 fdcb 	bl	4cfc <_Z8sapi_runv>

    2166:	bd10      	pop	{r4, pc}

00002168 <_ZN11DHT_UnifiedD1Ev>:
#include <Adafruit_Sensor.h>
#include <DHT.h>

#define DHT_SENSOR_VERSION 1

class DHT_Unified {
    2168:	4770      	bx	lr
	...

0000216c <_Z14temp_write_cfgPcPh>:
// Write sensor configuration. Processes payload sent from client. Callback called on
//  CoAP Put configuration value
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_write_cfg(char *payload, uint8_t *len)
{
    216c:	b510      	push	{r4, lr}
	if (!strcmp(payload, "cfg=C"))
    216e:	490b      	ldr	r1, [pc, #44]	; (219c <_Z14temp_write_cfgPcPh+0x30>)
{
    2170:	0004      	movs	r4, r0
	if (!strcmp(payload, "cfg=C"))
    2172:	f00b fdae 	bl	dcd2 <strcmp>
    2176:	2800      	cmp	r0, #0
    2178:	d103      	bne.n	2182 <_Z14temp_write_cfgPcPh+0x16>
	{
		context.scalecfg = CELSIUS_SCALE;
    217a:	2243      	movs	r2, #67	; 0x43
    217c:	4b08      	ldr	r3, [pc, #32]	; (21a0 <_Z14temp_write_cfgPcPh+0x34>)
    217e:	701a      	strb	r2, [r3, #0]
	{
		return SAPI_ERR_NOT_IMPLEMENTED;
	}

	return SAPI_ERR_OK;
}
    2180:	bd10      	pop	{r4, pc}
	else if (!strcmp(payload, "cfg=F"))
    2182:	4908      	ldr	r1, [pc, #32]	; (21a4 <_Z14temp_write_cfgPcPh+0x38>)
    2184:	0020      	movs	r0, r4
    2186:	f00b fda4 	bl	dcd2 <strcmp>
    218a:	0003      	movs	r3, r0
		return SAPI_ERR_NOT_IMPLEMENTED;
    218c:	2001      	movs	r0, #1
	else if (!strcmp(payload, "cfg=F"))
    218e:	2b00      	cmp	r3, #0
    2190:	d1f6      	bne.n	2180 <_Z14temp_write_cfgPcPh+0x14>
		context.scalecfg = FAHRENHEIT_SCALE;
    2192:	2146      	movs	r1, #70	; 0x46
    2194:	4a02      	ldr	r2, [pc, #8]	; (21a0 <_Z14temp_write_cfgPcPh+0x34>)
	return SAPI_ERR_OK;
    2196:	0018      	movs	r0, r3
		context.scalecfg = FAHRENHEIT_SCALE;
    2198:	7011      	strb	r1, [r2, #0]
    219a:	e7f1      	b.n	2180 <_Z14temp_write_cfgPcPh+0x14>
    219c:	00010c01 	.word	0x00010c01
    21a0:	20000320 	.word	0x20000320
    21a4:	00010c07 	.word	0x00010c07

000021a8 <_Z16calculateVoltagev>:
 * relay have to be powered with 3.3V
 * LOW to turn on
 * HIGH to turn off
 */
//digitalWrite(pinRelay, LOW); // turn on tehe light
float calculateVoltage(){
    21a8:	b530      	push	{r4, r5, lr}
    21aa:	b0a3      	sub	sp, #140	; 0x8c
  //digitalWrite(pinRelay, LOW); //turn on the light
  //analogWrite(pinRelay, 255);
  // Measuring Voltage
  RunningStatistics inputStats;
    21ac:	a801      	add	r0, sp, #4
    21ae:	f001 fff6 	bl	419e <_ZN17RunningStatisticsC1Ev>
  inputStats.setWindowSecs( windowLength );
    21b2:	4b17      	ldr	r3, [pc, #92]	; (2210 <_Z16calculateVoltagev+0x68>)
    21b4:	a801      	add	r0, sp, #4
    21b6:	6819      	ldr	r1, [r3, #0]
    21b8:	f001 ffcc 	bl	4154 <_ZN17RunningStatistics13setWindowSecsEf>

  //take 10000 samples to get more accurate reading
  while(temp != 10000){
    21bc:	4c15      	ldr	r4, [pc, #84]	; (2214 <_Z16calculateVoltagev+0x6c>)
    21be:	4b16      	ldr	r3, [pc, #88]	; (2218 <_Z16calculateVoltagev+0x70>)
    21c0:	6822      	ldr	r2, [r4, #0]
    21c2:	4d16      	ldr	r5, [pc, #88]	; (221c <_Z16calculateVoltagev+0x74>)
    21c4:	429a      	cmp	r2, r3
    21c6:	d01e      	beq.n	2206 <_Z16calculateVoltagev+0x5e>
    rawValue = analogRead(A4);
    21c8:	2005      	movs	r0, #5
    21ca:	f001 fcf7 	bl	3bbc <analogRead>
    21ce:	4b14      	ldr	r3, [pc, #80]	; (2220 <_Z16calculateVoltagev+0x78>)
    21d0:	6018      	str	r0, [r3, #0]
    inputStats.input(rawValue);
    21d2:	f008 fba9 	bl	a928 <__aeabi_i2f>
    21d6:	1c01      	adds	r1, r0, #0
    21d8:	a801      	add	r0, sp, #4
    21da:	f001 fffb 	bl	41d4 <_ZN17RunningStatistics5inputEf>

    //Serial.print("Raw Value : ");
    //Serial.println(inputStats.sigma());

    voltageReading = slope * inputStats.sigma();
    21de:	a801      	add	r0, sp, #4
    21e0:	f002 f827 	bl	4232 <_ZN17RunningStatistics5sigmaEv>
    21e4:	4b0f      	ldr	r3, [pc, #60]	; (2224 <_Z16calculateVoltagev+0x7c>)
    21e6:	6819      	ldr	r1, [r3, #0]
    21e8:	f008 f8aa 	bl	a340 <__aeabi_fmul>
    //voltageReading = voltageReading * 40.3231;
    voltageReading = voltageReading * 47.1931;
    21ec:	f00a f9da 	bl	c5a4 <__aeabi_f2d>
    21f0:	4b0d      	ldr	r3, [pc, #52]	; (2228 <_Z16calculateVoltagev+0x80>)
    21f2:	4a0e      	ldr	r2, [pc, #56]	; (222c <_Z16calculateVoltagev+0x84>)
    21f4:	f009 fb72 	bl	b8dc <__aeabi_dmul>
    21f8:	f00a fa26 	bl	c648 <__aeabi_d2f>

    temp = temp + 1;
    21fc:	6823      	ldr	r3, [r4, #0]
    voltageReading = voltageReading * 47.1931;
    21fe:	6028      	str	r0, [r5, #0]
    temp = temp + 1;
    2200:	3301      	adds	r3, #1
    2202:	6023      	str	r3, [r4, #0]
  while(temp != 10000){
    2204:	e7da      	b.n	21bc <_Z16calculateVoltagev+0x14>
  }
	temp = 0;
    2206:	2300      	movs	r3, #0
  //Serial.print("Voltage = ");
  //Serial.println(voltageReading);

  return voltageReading;
    2208:	6828      	ldr	r0, [r5, #0]
	temp = 0;
    220a:	6023      	str	r3, [r4, #0]
 }
    220c:	b023      	add	sp, #140	; 0x8c
    220e:	bd30      	pop	{r4, r5, pc}
    2210:	2000036c 	.word	0x2000036c
    2214:	20000364 	.word	0x20000364
    2218:	00002710 	.word	0x00002710
    221c:	20000368 	.word	0x20000368
    2220:	20000360 	.word	0x20000360
    2224:	20000004 	.word	0x20000004
    2228:	404798b7 	.word	0x404798b7
    222c:	80346dc6 	.word	0x80346dc6

00002230 <_Z18readACCurrentValuev>:

 float readACCurrentValue()
{
    2230:	b570      	push	{r4, r5, r6, lr}
  float ACCurrtntValue = 0;
  unsigned int peakVoltage = 0;
    2232:	2400      	movs	r4, #0
{
    2234:	4d17      	ldr	r5, [pc, #92]	; (2294 <_Z18readACCurrentValuev+0x64>)
  unsigned int voltageVirtualValue = 0;  //Vrms
  for (int i = 0; i < 3000; i++ )
  {
    peakVoltage  += analogRead(ACPin);   //read peak voltage
    2236:	2022      	movs	r0, #34	; 0x22
    2238:	f001 fcc0 	bl	3bbc <analogRead>
    223c:	3d01      	subs	r5, #1
    223e:	1824      	adds	r4, r4, r0
    delay(1);
    2240:	2001      	movs	r0, #1
    2242:	f000 fa4d 	bl	26e0 <delay>
  for (int i = 0; i < 3000; i++ )
    2246:	2d00      	cmp	r5, #0
    2248:	d1f5      	bne.n	2236 <_Z18readACCurrentValuev+0x6>
  }
  peakVoltage = peakVoltage / 5;
    224a:	2105      	movs	r1, #5
    224c:	0020      	movs	r0, r4
    224e:	f007 fad1 	bl	97f4 <__udivsi3>
  voltageVirtualValue = peakVoltage * 0.707;    //change the peak voltage to the Virtual Value of voltage
    2252:	f00a f96f 	bl	c534 <__aeabi_ui2d>
    2256:	4a10      	ldr	r2, [pc, #64]	; (2298 <_Z18readACCurrentValuev+0x68>)
    2258:	4b10      	ldr	r3, [pc, #64]	; (229c <_Z18readACCurrentValuev+0x6c>)
    225a:	f009 fb3f 	bl	b8dc <__aeabi_dmul>
    225e:	f007 fccf 	bl	9c00 <__aeabi_d2uiz>

  /*The circuit is amplified by 2 times, so it is divided by 2.*/
  voltageVirtualValue = (voltageVirtualValue * Vref / 1024) / 2;
    2262:	f008 fbb1 	bl	a9c8 <__aeabi_ui2f>
    2266:	4b0e      	ldr	r3, [pc, #56]	; (22a0 <_Z18readACCurrentValuev+0x70>)
    2268:	6819      	ldr	r1, [r3, #0]
    226a:	f008 f869 	bl	a340 <__aeabi_fmul>
    226e:	21ea      	movs	r1, #234	; 0xea
    2270:	0589      	lsls	r1, r1, #22
    2272:	f008 f865 	bl	a340 <__aeabi_fmul>
    2276:	21fc      	movs	r1, #252	; 0xfc
    2278:	0589      	lsls	r1, r1, #22
    227a:	f008 f861 	bl	a340 <__aeabi_fmul>
    227e:	f007 fca7 	bl	9bd0 <__aeabi_f2uiz>

  ACCurrtntValue = voltageVirtualValue * ACTectionRange;
    2282:	2314      	movs	r3, #20
    2284:	4358      	muls	r0, r3
    2286:	f008 fb9f 	bl	a9c8 <__aeabi_ui2f>

  return ACCurrtntValue/1000;
    228a:	4906      	ldr	r1, [pc, #24]	; (22a4 <_Z18readACCurrentValuev+0x74>)
    228c:	f007 fe68 	bl	9f60 <__aeabi_fdiv>
}
    2290:	bd70      	pop	{r4, r5, r6, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	00000bb8 	.word	0x00000bb8
    2298:	76c8b439 	.word	0x76c8b439
    229c:	3fe69fbe 	.word	0x3fe69fbe
    22a0:	2000031c 	.word	0x2000031c
    22a4:	447a0000 	.word	0x447a0000

000022a8 <_Z18temp_build_payloadPcPf>:
//
//  Note that the payload is text. Payloads can also be a byte array of binary data.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_build_payload(char *buf, float *reading)
{
    22a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	char 		payload[64];
	char		reading_buf[32];
	char        datatype30[] = "30,";
    22aa:	4b38      	ldr	r3, [pc, #224]	; (238c <_Z18temp_build_payloadPcPf+0xe4>)
{
    22ac:	b09f      	sub	sp, #124	; 0x7c
	char        datatype30[] = "30,";
    22ae:	9302      	str	r3, [sp, #8]
	char		datatype31[] = "31,"; //current datatype is 31
    22b0:	4b37      	ldr	r3, [pc, #220]	; (2390 <_Z18temp_build_payloadPcPf+0xe8>)
	char		unitVoltage[] = "V";
    22b2:	466a      	mov	r2, sp
	char		datatype31[] = "31,"; //current datatype is 31
    22b4:	9303      	str	r3, [sp, #12]
	char		unitVoltage[] = "V";
    22b6:	2356      	movs	r3, #86	; 0x56
{
    22b8:	0007      	movs	r7, r0
	char		unitVoltage[] = "V";
    22ba:	8013      	strh	r3, [r2, #0]
	char		unitCurrent[] = "A";
    22bc:	ac01      	add	r4, sp, #4
    22be:	3b15      	subs	r3, #21
	char		unit_buf[4];
	time_t     	epoch;
	uint32_t	indx;
	char    rvoltage[] = "120.00,";
    22c0:	2208      	movs	r2, #8
    22c2:	4934      	ldr	r1, [pc, #208]	; (2394 <_Z18temp_build_payloadPcPf+0xec>)
    22c4:	a807      	add	r0, sp, #28
	char		unitCurrent[] = "A";
    22c6:	8023      	strh	r3, [r4, #0]
	char    rvoltage[] = "120.00,";
    22c8:	f00a fbe3 	bl	ca92 <memcpy>
	char    rcurrent[] = "0.23,";
    22cc:	4932      	ldr	r1, [pc, #200]	; (2398 <_Z18temp_build_payloadPcPf+0xf0>)
    22ce:	2206      	movs	r2, #6
    22d0:	a805      	add	r0, sp, #20
    22d2:	f00a fbde 	bl	ca92 <memcpy>
	char    temp_epoch[20];
	
	
	
	Vref = readVref();
    22d6:	4a31      	ldr	r2, [pc, #196]	; (239c <_Z18temp_build_payloadPcPf+0xf4>)
    22d8:	4b31      	ldr	r3, [pc, #196]	; (23a0 <_Z18temp_build_payloadPcPf+0xf8>)
    22da:	601a      	str	r2, [r3, #0]
	sprintf(rvoltage, "%.2f,", calculateVoltage());
    22dc:	f7ff ff64 	bl	21a8 <_Z16calculateVoltagev>
    22e0:	f00a f960 	bl	c5a4 <__aeabi_f2d>
    22e4:	4d2f      	ldr	r5, [pc, #188]	; (23a4 <_Z18temp_build_payloadPcPf+0xfc>)
    22e6:	0002      	movs	r2, r0
    22e8:	000b      	movs	r3, r1
    22ea:	a807      	add	r0, sp, #28
    22ec:	0029      	movs	r1, r5
    22ee:	f00b fcc1 	bl	dc74 <siprintf>
	sprintf(rcurrent, "%.2f,", readACCurrentValue());
    22f2:	f7ff ff9d 	bl	2230 <_Z18readACCurrentValuev>
    22f6:	f00a f955 	bl	c5a4 <__aeabi_f2d>
    22fa:	000b      	movs	r3, r1
    22fc:	0002      	movs	r2, r0
    22fe:	0029      	movs	r1, r5
    2300:	a805      	add	r0, sp, #20
    2302:	f00b fcb7 	bl	dc74 <siprintf>
	
	// Create string containing the UNIX epoch
	epoch = get_rtc_epoch();
    2306:	f001 ffb3 	bl	4270 <_Z13get_rtc_epochv>
    230a:	0006      	movs	r6, r0
	sprintf(temp_epoch, "%d,", epoch);
    230c:	4d26      	ldr	r5, [pc, #152]	; (23a8 <_Z18temp_build_payloadPcPf+0x100>)
    230e:	0002      	movs	r2, r0
    2310:	0029      	movs	r1, r5
    2312:	a809      	add	r0, sp, #36	; 0x24
    2314:	f00b fcae 	bl	dc74 <siprintf>
	sprintf(payload, "%d,", epoch);
    2318:	0032      	movs	r2, r6
    231a:	0029      	movs	r1, r5
    231c:	a80e      	add	r0, sp, #56	; 0x38
    231e:	f00b fca9 	bl	dc74 <siprintf>
	strcat(payload, datatype30);
    2322:	a902      	add	r1, sp, #8
    2324:	a80e      	add	r0, sp, #56	; 0x38
    2326:	f00b fcc7 	bl	dcb8 <strcat>
	strcat(payload, rvoltage);
    232a:	a907      	add	r1, sp, #28
    232c:	a80e      	add	r0, sp, #56	; 0x38
    232e:	f00b fcc3 	bl	dcb8 <strcat>
	strcpy(unit_buf, unitVoltage);
    2332:	4669      	mov	r1, sp
    2334:	a804      	add	r0, sp, #16
    2336:	f00b fcd6 	bl	dce6 <strcpy>
	strcat(payload, unit_buf);
    233a:	a904      	add	r1, sp, #16
    233c:	a80e      	add	r0, sp, #56	; 0x38
    233e:	f00b fcbb 	bl	dcb8 <strcat>
	strcat(payload, ";");
    2342:	491a      	ldr	r1, [pc, #104]	; (23ac <_Z18temp_build_payloadPcPf+0x104>)
    2344:	a80e      	add	r0, sp, #56	; 0x38
    2346:	f00b fcb7 	bl	dcb8 <strcat>
	
	strcat(payload,temp_epoch);
    234a:	a909      	add	r1, sp, #36	; 0x24
    234c:	a80e      	add	r0, sp, #56	; 0x38
    234e:	f00b fcb3 	bl	dcb8 <strcat>
	strcat(payload, datatype31);
    2352:	a903      	add	r1, sp, #12
    2354:	a80e      	add	r0, sp, #56	; 0x38
    2356:	f00b fcaf 	bl	dcb8 <strcat>
	strcat(payload, rcurrent);
    235a:	a905      	add	r1, sp, #20
    235c:	a80e      	add	r0, sp, #56	; 0x38
    235e:	f00b fcab 	bl	dcb8 <strcat>
	strcpy(unit_buf, unitCurrent);
    2362:	0021      	movs	r1, r4
    2364:	a804      	add	r0, sp, #16
    2366:	f00b fcbe 	bl	dce6 <strcpy>
	strcat(payload, unit_buf);
    236a:	a904      	add	r1, sp, #16
    236c:	a80e      	add	r0, sp, #56	; 0x38
    236e:	f00b fca3 	bl	dcb8 <strcat>
	strcat(payload, data2);
	strcat(payload, ";A4,");
	sprintf(data4, "%d", valueA4);
	strcat(payload, data4);
*/
	strcpy(buf, payload);
    2372:	a90e      	add	r1, sp, #56	; 0x38
    2374:	0038      	movs	r0, r7
    2376:	f00b fcb6 	bl	dce6 <strcpy>
	
	dlog(LOG_DEBUG, "Temp Payload: %s", payload);
    237a:	aa0e      	add	r2, sp, #56	; 0x38
    237c:	490c      	ldr	r1, [pc, #48]	; (23b0 <_Z18temp_build_payloadPcPf+0x108>)
    237e:	2007      	movs	r0, #7
    2380:	f002 f80e 	bl	43a0 <_Z4dlogiPKcz>
	return SAPI_ERR_OK;
}
    2384:	2000      	movs	r0, #0
    2386:	b01f      	add	sp, #124	; 0x7c
    2388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	002c3033 	.word	0x002c3033
    2390:	002c3133 	.word	0x002c3133
    2394:	00010cc4 	.word	0x00010cc4
    2398:	00010ccc 	.word	0x00010ccc
    239c:	454e4000 	.word	0x454e4000
    23a0:	2000031c 	.word	0x2000031c
    23a4:	00010ca9 	.word	0x00010ca9
    23a8:	00010caf 	.word	0x00010caf
    23ac:	0001180d 	.word	0x0001180d
    23b0:	00010cb3 	.word	0x00010cb3

000023b4 <_Z13temp_read_cfgPcPh>:
{
    23b4:	b570      	push	{r4, r5, r6, lr}
    23b6:	000e      	movs	r6, r1
	sapi_error_t rc = temp_build_payload(payload, NULL);
    23b8:	2100      	movs	r1, #0
{
    23ba:	0004      	movs	r4, r0
	sapi_error_t rc = temp_build_payload(payload, NULL);
    23bc:	f7ff ff74 	bl	22a8 <_Z18temp_build_payloadPcPf>
    23c0:	0005      	movs	r5, r0
	*len = strlen(payload);
    23c2:	0020      	movs	r0, r4
    23c4:	f00b fc97 	bl	dcf6 <strlen>
    23c8:	7030      	strb	r0, [r6, #0]
}
    23ca:	0028      	movs	r0, r5
    23cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000023d0 <_Z10read_dht11Pf>:
//
// Read the temp value from the DHT11 sensor.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t read_dht11(float *reading)
{
    23d0:	b530      	push	{r4, r5, lr}
    float    min_value;                       /**< minimum value of this sensor's value in SI units */
    float    resolution;                      /**< smallest difference between two values reported by this sensor */
    int32_t  min_delay;                       /**< min delay in microseconds between events. zero = not a constant rate */
} sensor_t;

class Adafruit_Sensor {
    23d2:	4b17      	ldr	r3, [pc, #92]	; (2430 <_Z10read_dht11Pf+0x60>)
    23d4:	b08f      	sub	sp, #60	; 0x3c
    23d6:	7f1a      	ldrb	r2, [r3, #28]
    23d8:	0005      	movs	r5, r0
    23da:	a801      	add	r0, sp, #4
    23dc:	7102      	strb	r2, [r0, #4]
public:
  DHT_Unified(uint8_t pin, uint8_t type, uint8_t count=6, int32_t tempSensorId=-1, int32_t humiditySensorId=-1);
  void begin();

  class Temperature : public Adafruit_Sensor {
    23de:	4a15      	ldr	r2, [pc, #84]	; (2434 <_Z10read_dht11Pf+0x64>)
	sapi_error_t rc = SAPI_ERR_OK;
	float re = INVALID_TEMP;

	// Get temperature event
	sensors_event_t event;
	dht.temperature().getEvent(&event);
    23e0:	a905      	add	r1, sp, #20
    23e2:	9201      	str	r2, [sp, #4]
    23e4:	6a1a      	ldr	r2, [r3, #32]
    23e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    23e8:	6082      	str	r2, [r0, #8]
    23ea:	60c3      	str	r3, [r0, #12]
    23ec:	f001 fdb3 	bl	3f56 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>

	// Check for NaN
	if (isnan(event.temperature))
    23f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
    23f2:	1c21      	adds	r1, r4, #0
    23f4:	1c20      	adds	r0, r4, #0
    23f6:	f008 fa5f 	bl	a8b8 <__aeabi_fcmpun>
    23fa:	2800      	cmp	r0, #0
    23fc:	d000      	beq.n	2400 <_Z10read_dht11Pf+0x30>
	{
		re = NO_SENSOR_TEMP;
    23fe:	4c0e      	ldr	r4, [pc, #56]	; (2438 <_Z10read_dht11Pf+0x68>)
		re = event.temperature;
		rc = SAPI_ERR_OK;
	}
	
	// Reading is in C. Convert to F if needed.
	if (context.scalecfg == FAHRENHEIT_SCALE)
    2400:	4b0e      	ldr	r3, [pc, #56]	; (243c <_Z10read_dht11Pf+0x6c>)
    2402:	781b      	ldrb	r3, [r3, #0]
    2404:	b25b      	sxtb	r3, r3
    2406:	2b46      	cmp	r3, #70	; 0x46
    2408:	d10d      	bne.n	2426 <_Z10read_dht11Pf+0x56>
	{
		// Convert from Celsius to Fahrenheit
		re *= 1.8;
    240a:	1c20      	adds	r0, r4, #0
    240c:	f00a f8ca 	bl	c5a4 <__aeabi_f2d>
    2410:	4a0b      	ldr	r2, [pc, #44]	; (2440 <_Z10read_dht11Pf+0x70>)
    2412:	4b0c      	ldr	r3, [pc, #48]	; (2444 <_Z10read_dht11Pf+0x74>)
    2414:	f009 fa62 	bl	b8dc <__aeabi_dmul>
    2418:	f00a f916 	bl	c648 <__aeabi_d2f>
		re += 32;
    241c:	2184      	movs	r1, #132	; 0x84
    241e:	05c9      	lsls	r1, r1, #23
    2420:	f007 fc0c 	bl	9c3c <__aeabi_fadd>
    2424:	1c04      	adds	r4, r0, #0
	}
	
	// Assign output
	*reading = re;
	return rc;
}
    2426:	2000      	movs	r0, #0
	*reading = re;
    2428:	602c      	str	r4, [r5, #0]
}
    242a:	b00f      	add	sp, #60	; 0x3c
    242c:	bd30      	pop	{r4, r5, pc}
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	20000328 	.word	0x20000328
    2434:	00010d60 	.word	0x00010d60
    2438:	42c80000 	.word	0x42c80000
    243c:	20000320 	.word	0x20000320
    2440:	cccccccd 	.word	0xcccccccd
    2444:	3ffccccc 	.word	0x3ffccccc

00002448 <_Z16temp_read_sensorPcPh>:
	float reading = 0.0;
    2448:	2300      	movs	r3, #0
{
    244a:	b570      	push	{r4, r5, r6, lr}
    244c:	b092      	sub	sp, #72	; 0x48
    244e:	0006      	movs	r6, r0
    rc = read_dht11(&reading);
    2450:	a801      	add	r0, sp, #4
{
    2452:	000d      	movs	r5, r1
	float reading = 0.0;
    2454:	9301      	str	r3, [sp, #4]
    rc = read_dht11(&reading);
    2456:	f7ff ffbb 	bl	23d0 <_Z10read_dht11Pf>
    245a:	1e04      	subs	r4, r0, #0
	if (rc != SAPI_ERR_OK)
    245c:	d10c      	bne.n	2478 <_Z16temp_read_sensorPcPh+0x30>
	rc = temp_build_payload(buffer, &reading);
    245e:	a901      	add	r1, sp, #4
    2460:	a802      	add	r0, sp, #8
    2462:	f7ff ff21 	bl	22a8 <_Z18temp_build_payloadPcPf>
	strcpy(payload, buffer);
    2466:	a902      	add	r1, sp, #8
	rc = temp_build_payload(buffer, &reading);
    2468:	0004      	movs	r4, r0
	strcpy(payload, buffer);
    246a:	0030      	movs	r0, r6
    246c:	f00b fc3b 	bl	dce6 <strcpy>
	*len = strlen(buffer);
    2470:	a802      	add	r0, sp, #8
    2472:	f00b fc40 	bl	dcf6 <strlen>
    2476:	7028      	strb	r0, [r5, #0]
}
    2478:	0020      	movs	r0, r4
    247a:	b012      	add	sp, #72	; 0x48
    247c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002480 <_Z18temp_sensor_enablev>:
//
//////////////////////////////////////////////////////////////////////////

sapi_error_t temp_sensor_enable(void)
{
	context.enable = 1;
    2480:	2201      	movs	r2, #1
    2482:	4b03      	ldr	r3, [pc, #12]	; (2490 <_Z18temp_sensor_enablev+0x10>)
	context.alertstate = tsat_cleared;
	return SAPI_ERR_OK;
}
    2484:	2000      	movs	r0, #0
	context.enable = 1;
    2486:	711a      	strb	r2, [r3, #4]
	context.alertstate = tsat_cleared;
    2488:	1892      	adds	r2, r2, r2
    248a:	705a      	strb	r2, [r3, #1]
}
    248c:	4770      	bx	lr
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	20000320 	.word	0x20000320

00002494 <_Z16temp_init_sensorv>:
{
    2494:	b5f0      	push	{r4, r5, r6, r7, lr}
	context.scalecfg = FAHRENHEIT_SCALE;
    2496:	2246      	movs	r2, #70	; 0x46
	context.alertstate = tsat_disabled;
    2498:	2600      	movs	r6, #0
	context.scalecfg = FAHRENHEIT_SCALE;
    249a:	4b33      	ldr	r3, [pc, #204]	; (2568 <_Z16temp_init_sensorv+0xd4>)
{
    249c:	b091      	sub	sp, #68	; 0x44
	context.scalecfg = FAHRENHEIT_SCALE;
    249e:	701a      	strb	r2, [r3, #0]
	context.alertstate = tsat_disabled;
    24a0:	705e      	strb	r6, [r3, #1]
	temp_sensor_enable();
    24a2:	f7ff ffed 	bl	2480 <_Z18temp_sensor_enablev>
	dht.begin();
    24a6:	4c31      	ldr	r4, [pc, #196]	; (256c <_Z16temp_init_sensorv+0xd8>)
    24a8:	0020      	movs	r0, r4
    24aa:	f001 fda9 	bl	4000 <_ZN11DHT_Unified5beginEv>
	println("DHT11 Sensor Initialized!");
    24ae:	4830      	ldr	r0, [pc, #192]	; (2570 <_Z16temp_init_sensorv+0xdc>)
    24b0:	f002 f834 	bl	451c <_Z7printlnPKc>
    24b4:	7f23      	ldrb	r3, [r4, #28]
    24b6:	aa02      	add	r2, sp, #8
    24b8:	7113      	strb	r3, [r2, #4]
    24ba:	4b2e      	ldr	r3, [pc, #184]	; (2574 <_Z16temp_init_sensorv+0xe0>)
	dht.temperature().getSensor(&sensor);
    24bc:	0010      	movs	r0, r2
    24be:	9302      	str	r3, [sp, #8]
    24c0:	6a23      	ldr	r3, [r4, #32]
    24c2:	a906      	add	r1, sp, #24
    24c4:	9304      	str	r3, [sp, #16]
    24c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    24c8:	9301      	str	r3, [sp, #4]
    24ca:	9305      	str	r3, [sp, #20]
    24cc:	f001 fdcc 	bl	4068 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
	println("");
    24d0:	4c29      	ldr	r4, [pc, #164]	; (2578 <_Z16temp_init_sensorv+0xe4>)
    24d2:	0020      	movs	r0, r4
    24d4:	f002 f822 	bl	451c <_Z7printlnPKc>
	println("------------------------------------");
    24d8:	4f28      	ldr	r7, [pc, #160]	; (257c <_Z16temp_init_sensorv+0xe8>)
    24da:	0038      	movs	r0, r7
    24dc:	f002 f81e 	bl	451c <_Z7printlnPKc>
	print  ("Sensor:       "); println(sensor.name);
    24e0:	4827      	ldr	r0, [pc, #156]	; (2580 <_Z16temp_init_sensorv+0xec>)
    24e2:	f002 f805 	bl	44f0 <_Z5printPKc>
    24e6:	a806      	add	r0, sp, #24
    24e8:	f002 f818 	bl	451c <_Z7printlnPKc>
	print  ("Driver Ver:   "); printnum(sensor.version);    println("");
    24ec:	4825      	ldr	r0, [pc, #148]	; (2584 <_Z16temp_init_sensorv+0xf0>)
    24ee:	f001 ffff 	bl	44f0 <_Z5printPKc>
    24f2:	9809      	ldr	r0, [sp, #36]	; 0x24
    24f4:	f002 f828 	bl	4548 <_Z8printnumi>
    24f8:	0020      	movs	r0, r4
    24fa:	f002 f80f 	bl	451c <_Z7printlnPKc>
	print  ("Unique ID:    "); printnum(sensor.sensor_id);  println("");
    24fe:	4822      	ldr	r0, [pc, #136]	; (2588 <_Z16temp_init_sensorv+0xf4>)
    2500:	f001 fff6 	bl	44f0 <_Z5printPKc>
    2504:	980a      	ldr	r0, [sp, #40]	; 0x28
    2506:	f002 f81f 	bl	4548 <_Z8printnumi>
    250a:	0020      	movs	r0, r4
    250c:	f002 f806 	bl	451c <_Z7printlnPKc>
	print  ("Max Value:    "); printnum(sensor.max_value);  println(" C");
    2510:	481e      	ldr	r0, [pc, #120]	; (258c <_Z16temp_init_sensorv+0xf8>)
    2512:	f001 ffed 	bl	44f0 <_Z5printPKc>
    2516:	980c      	ldr	r0, [sp, #48]	; 0x30
    2518:	f008 f9e6 	bl	a8e8 <__aeabi_f2iz>
    251c:	f002 f814 	bl	4548 <_Z8printnumi>
    2520:	4d1b      	ldr	r5, [pc, #108]	; (2590 <_Z16temp_init_sensorv+0xfc>)
    2522:	0028      	movs	r0, r5
    2524:	f001 fffa 	bl	451c <_Z7printlnPKc>
	print  ("Min Value:    "); printnum(sensor.min_value);  println(" C");
    2528:	481a      	ldr	r0, [pc, #104]	; (2594 <_Z16temp_init_sensorv+0x100>)
    252a:	f001 ffe1 	bl	44f0 <_Z5printPKc>
    252e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2530:	f008 f9da 	bl	a8e8 <__aeabi_f2iz>
    2534:	f002 f808 	bl	4548 <_Z8printnumi>
    2538:	0028      	movs	r0, r5
    253a:	f001 ffef 	bl	451c <_Z7printlnPKc>
	print  ("Resolution:   "); printnum(sensor.resolution); println(" C");
    253e:	4816      	ldr	r0, [pc, #88]	; (2598 <_Z16temp_init_sensorv+0x104>)
    2540:	f001 ffd6 	bl	44f0 <_Z5printPKc>
    2544:	980e      	ldr	r0, [sp, #56]	; 0x38
    2546:	f008 f9cf 	bl	a8e8 <__aeabi_f2iz>
    254a:	f001 fffd 	bl	4548 <_Z8printnumi>
    254e:	0028      	movs	r0, r5
    2550:	f001 ffe4 	bl	451c <_Z7printlnPKc>
	println("------------------------------------");        println("");
    2554:	0038      	movs	r0, r7
    2556:	f001 ffe1 	bl	451c <_Z7printlnPKc>
    255a:	0020      	movs	r0, r4
    255c:	f001 ffde 	bl	451c <_Z7printlnPKc>
}
    2560:	0030      	movs	r0, r6
    2562:	b011      	add	sp, #68	; 0x44
    2564:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2566:	46c0      	nop			; (mov r8, r8)
    2568:	20000320 	.word	0x20000320
    256c:	20000328 	.word	0x20000328
    2570:	00010c0d 	.word	0x00010c0d
    2574:	00010d60 	.word	0x00010d60
    2578:	0001113e 	.word	0x0001113e
    257c:	00010c27 	.word	0x00010c27
    2580:	00010c4c 	.word	0x00010c4c
    2584:	00010c5b 	.word	0x00010c5b
    2588:	00010c6a 	.word	0x00010c6a
    258c:	00010c79 	.word	0x00010c79
    2590:	00010c88 	.word	0x00010c88
    2594:	00010c8b 	.word	0x00010c8b
    2598:	00010c9a 	.word	0x00010c9a

0000259c <_GLOBAL__sub_I_dht>:
DHT_Unified dht(A1, DHT_TYPE);
    259c:	2301      	movs	r3, #1
sapi_error_t temp_sensor_disable(void)
{
	context.enable = 0;
	context.alertstate = tsat_disabled;
	return SAPI_ERR_OK;
    259e:	b513      	push	{r0, r1, r4, lr}
DHT_Unified dht(A1, DHT_TYPE);
    25a0:	4c0b      	ldr	r4, [pc, #44]	; (25d0 <_GLOBAL__sub_I_dht+0x34>)
    25a2:	425b      	negs	r3, r3
    25a4:	9301      	str	r3, [sp, #4]
    25a6:	9300      	str	r3, [sp, #0]
    25a8:	220b      	movs	r2, #11
    25aa:	3307      	adds	r3, #7
    25ac:	2100      	movs	r1, #0
    25ae:	0020      	movs	r0, r4
    25b0:	f001 fd0e 	bl	3fd0 <_ZN11DHT_UnifiedC1Ehhhll>
    25b4:	4a07      	ldr	r2, [pc, #28]	; (25d4 <_GLOBAL__sub_I_dht+0x38>)
    25b6:	4908      	ldr	r1, [pc, #32]	; (25d8 <_GLOBAL__sub_I_dht+0x3c>)
    25b8:	0020      	movs	r0, r4
    25ba:	f006 fe5b 	bl	9274 <__aeabi_atexit>
float windowLength = 40.0/testFrequency;     // how long to average the signal, for statistist
    25be:	4b07      	ldr	r3, [pc, #28]	; (25dc <_GLOBAL__sub_I_dht+0x40>)
    25c0:	4807      	ldr	r0, [pc, #28]	; (25e0 <_GLOBAL__sub_I_dht+0x44>)
    25c2:	6819      	ldr	r1, [r3, #0]
    25c4:	f007 fccc 	bl	9f60 <__aeabi_fdiv>
    25c8:	4b06      	ldr	r3, [pc, #24]	; (25e4 <_GLOBAL__sub_I_dht+0x48>)
    25ca:	6018      	str	r0, [r3, #0]
    25cc:	bd13      	pop	{r0, r1, r4, pc}
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	20000328 	.word	0x20000328
    25d4:	20000000 	.word	0x20000000
    25d8:	00002169 	.word	0x00002169
    25dc:	20000008 	.word	0x20000008
    25e0:	42200000 	.word	0x42200000
    25e4:	2000036c 	.word	0x2000036c

000025e8 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    25e8:	be03      	bkpt	0x0003
    25ea:	e7fe      	b.n	25ea <Dummy_Handler+0x2>

000025ec <USB_Handler>:
#else
static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    25ec:	4b03      	ldr	r3, [pc, #12]	; (25fc <USB_Handler+0x10>)
{
    25ee:	b510      	push	{r4, lr}
  if (usb_isr)
    25f0:	681b      	ldr	r3, [r3, #0]
    25f2:	2b00      	cmp	r3, #0
    25f4:	d000      	beq.n	25f8 <USB_Handler+0xc>
    usb_isr();
    25f6:	4798      	blx	r3
}
    25f8:	bd10      	pop	{r4, pc}
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	20000370 	.word	0x20000370

00002600 <HardFault_Handler>:
#endif
#endif

void HardFault_Handler(void)
{
  __BKPT(13);
    2600:	be0d      	bkpt	0x000d
    2602:	e7fe      	b.n	2602 <HardFault_Handler+0x2>

00002604 <Reset_Handler>:
{
    2604:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2606:	490f      	ldr	r1, [pc, #60]	; (2644 <Reset_Handler+0x40>)
    2608:	4c0f      	ldr	r4, [pc, #60]	; (2648 <Reset_Handler+0x44>)
    260a:	42a1      	cmp	r1, r4
    260c:	d104      	bne.n	2618 <Reset_Handler+0x14>
  SystemInit();
    260e:	f000 f8f5 	bl	27fc <SystemInit>
  main();
    2612:	f000 f8a3 	bl	275c <main>
    2616:	e7fe      	b.n	2616 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2618:	4d0c      	ldr	r5, [pc, #48]	; (264c <Reset_Handler+0x48>)
    261a:	2300      	movs	r3, #0
    261c:	428d      	cmp	r5, r1
    261e:	d0f6      	beq.n	260e <Reset_Handler+0xa>
    2620:	18ca      	adds	r2, r1, r3
    2622:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2624:	42a2      	cmp	r2, r4
    2626:	d305      	bcc.n	2634 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2628:	4290      	cmp	r0, r2
    262a:	d0f0      	beq.n	260e <Reset_Handler+0xa>
    262c:	4b08      	ldr	r3, [pc, #32]	; (2650 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    262e:	4909      	ldr	r1, [pc, #36]	; (2654 <Reset_Handler+0x50>)
      *pDest = 0;
    2630:	2200      	movs	r2, #0
    2632:	e004      	b.n	263e <Reset_Handler+0x3a>
      *pDest = *pSrc;
    2634:	6800      	ldr	r0, [r0, #0]
    2636:	3304      	adds	r3, #4
    2638:	6010      	str	r0, [r2, #0]
    263a:	e7f1      	b.n	2620 <Reset_Handler+0x1c>
      *pDest = 0;
    263c:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    263e:	428b      	cmp	r3, r1
    2640:	d3fc      	bcc.n	263c <Reset_Handler+0x38>
    2642:	e7e4      	b.n	260e <Reset_Handler+0xa>
    2644:	20000000 	.word	0x20000000
    2648:	20000300 	.word	0x20000300
    264c:	00012d64 	.word	0x00012d64
    2650:	20000300 	.word	0x20000300
    2654:	20001fac 	.word	0x20001fac

00002658 <SysTick_Handler>:
{
    2658:	b510      	push	{r4, lr}
  if (sysTickHook())
    265a:	f000 f87c 	bl	2756 <sysTickHook>
    265e:	2800      	cmp	r0, #0
    2660:	d101      	bne.n	2666 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    2662:	f000 f863 	bl	272c <SysTick_DefaultHandler>
}
    2666:	bd10      	pop	{r4, pc}

00002668 <USB_SetHandler>:
  usb_isr = new_usb_isr;
    2668:	4b01      	ldr	r3, [pc, #4]	; (2670 <USB_SetHandler+0x8>)
    266a:	6018      	str	r0, [r3, #0]
}
    266c:	4770      	bx	lr
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	20000370 	.word	0x20000370

00002674 <millis>:
#endif

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    2674:	4b01      	ldr	r3, [pc, #4]	; (267c <millis+0x8>)
    2676:	6818      	ldr	r0, [r3, #0]
}
    2678:	4770      	bx	lr
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	20000374 	.word	0x20000374

00002680 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
    2680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    2682:	4813      	ldr	r0, [pc, #76]	; (26d0 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2684:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
    2686:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
    2688:	4912      	ldr	r1, [pc, #72]	; (26d4 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    268a:	4c13      	ldr	r4, [pc, #76]	; (26d8 <micros+0x58>)
  ticks2  = SysTick->VAL;
    268c:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    268e:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
    2690:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2692:	0e9b      	lsrs	r3, r3, #26
    2694:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2696:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
    2698:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    269a:	6862      	ldr	r2, [r4, #4]
    269c:	9f01      	ldr	r7, [sp, #4]
    269e:	0e92      	lsrs	r2, r2, #26
    26a0:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
    26a2:	4667      	mov	r7, ip
    26a4:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    26a6:	4293      	cmp	r3, r2
    26a8:	d10e      	bne.n	26c8 <micros+0x48>
    26aa:	42bd      	cmp	r5, r7
    26ac:	d10c      	bne.n	26c8 <micros+0x48>
    26ae:	4286      	cmp	r6, r0
    26b0:	d30a      	bcc.n	26c8 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    26b2:	195b      	adds	r3, r3, r5
    26b4:	25fa      	movs	r5, #250	; 0xfa
    26b6:	6848      	ldr	r0, [r1, #4]
    26b8:	00ad      	lsls	r5, r5, #2
    26ba:	1b86      	subs	r6, r0, r6
    26bc:	4807      	ldr	r0, [pc, #28]	; (26dc <micros+0x5c>)
    26be:	436b      	muls	r3, r5
    26c0:	4370      	muls	r0, r6
    26c2:	0d00      	lsrs	r0, r0, #20
    26c4:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    26c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    26c8:	003d      	movs	r5, r7
    26ca:	0013      	movs	r3, r2
    26cc:	0006      	movs	r6, r0
    26ce:	e7e3      	b.n	2698 <micros+0x18>
    26d0:	20000374 	.word	0x20000374
    26d4:	e000e010 	.word	0xe000e010
    26d8:	e000ed00 	.word	0xe000ed00
    26dc:	00005555 	.word	0x00005555

000026e0 <delay>:

void delay( unsigned long ms )
{
    26e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26e2:	1e04      	subs	r4, r0, #0
  if (ms)
    26e4:	d01c      	beq.n	2720 <delay+0x40>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    26e6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    26ea:	b672      	cpsid	i
#if !defined(NO_DELAY_HIGH_WORD)
    uint8_t enableInterrupts = ((__get_PRIMASK() & 0x1) == 0);
    __disable_irq();
#endif

    uint32_t start = _ulTickCount ;
    26ec:	4e0d      	ldr	r6, [pc, #52]	; (2724 <delay+0x44>)
#if !defined(NO_DELAY_HIGH_WORD)
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    26ee:	4f0e      	ldr	r7, [pc, #56]	; (2728 <delay+0x48>)
    uint32_t start = _ulTickCount ;
    26f0:	6835      	ldr	r5, [r6, #0]
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    26f2:	683a      	ldr	r2, [r7, #0]
    26f4:	9201      	str	r2, [sp, #4]

    if (enableInterrupts) {
    26f6:	07db      	lsls	r3, r3, #31
    26f8:	d400      	bmi.n	26fc <delay+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
    26fa:	b662      	cpsie	i
      __enable_irq();
    }

    // Check for _ulTickCount overflow
    uint32_t remaining = (0xFFFFFFFF - start);
    26fc:	43eb      	mvns	r3, r5
    if (ms > remaining) {
    26fe:	429c      	cmp	r4, r3
    2700:	d904      	bls.n	270c <delay+0x2c>
      ms -= (remaining + 1);
    2702:	1964      	adds	r4, r4, r5
      start = 0;
    2704:	2500      	movs	r5, #0
      targetTickCountHighWord++;
    2706:	9b01      	ldr	r3, [sp, #4]
    2708:	3301      	adds	r3, #1
    270a:	9301      	str	r3, [sp, #4]
    }
#endif

    do
    {
      yield() ;
    270c:	f000 f822 	bl	2754 <yield>
#if !defined(NO_DELAY_HIGH_WORD)
    } while (_ulTickCountHighWord < targetTickCountHighWord || (_ulTickCount - start) < ms ) ;
    2710:	683b      	ldr	r3, [r7, #0]
    2712:	9a01      	ldr	r2, [sp, #4]
    2714:	4293      	cmp	r3, r2
    2716:	d3f9      	bcc.n	270c <delay+0x2c>
    2718:	6833      	ldr	r3, [r6, #0]
    271a:	1b5b      	subs	r3, r3, r5
    271c:	429c      	cmp	r4, r3
    271e:	d8f5      	bhi.n	270c <delay+0x2c>
#else
    } while (_ulTickCount - start < ms ) ;
#endif
  }
}
    2720:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	20000374 	.word	0x20000374
    2728:	20000378 	.word	0x20000378

0000272c <SysTick_DefaultHandler>:
#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
  // Increment tick count each ms
  _ulTickCount++;
    272c:	4b07      	ldr	r3, [pc, #28]	; (274c <SysTick_DefaultHandler+0x20>)
{
    272e:	b510      	push	{r4, lr}
  _ulTickCount++;
    2730:	681a      	ldr	r2, [r3, #0]
    2732:	3201      	adds	r2, #1
    2734:	601a      	str	r2, [r3, #0]

#if !defined(NO_DELAY_HIGH_WORD)
  if ( _ulTickCount == 0 )
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	2b00      	cmp	r3, #0
    273a:	d103      	bne.n	2744 <SysTick_DefaultHandler+0x18>
  {
    _ulTickCountHighWord++;
    273c:	4a04      	ldr	r2, [pc, #16]	; (2750 <SysTick_DefaultHandler+0x24>)
    273e:	6813      	ldr	r3, [r2, #0]
    2740:	3301      	adds	r3, #1
    2742:	6013      	str	r3, [r2, #0]
  }
#endif
#if defined(CDC_ONLY) || defined(CDC_HID) || defined(WITH_CDC)
  tickReset();
    2744:	f000 f838 	bl	27b8 <tickReset>
#endif
}
    2748:	bd10      	pop	{r4, pc}
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	20000374 	.word	0x20000374
    2750:	20000378 	.word	0x20000378

00002754 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    2754:	4770      	bx	lr

00002756 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    2756:	2000      	movs	r0, #0
    2758:	4770      	bx	lr

0000275a <_Z11initVariantv>:
#include "sam.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    275a:	4770      	bx	lr

0000275c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    275c:	b510      	push	{r4, lr}
  init();
    275e:	f001 f915 	bl	398c <init>

  __libc_init_array();
    2762:	f00a f92b 	bl	c9bc <__libc_init_array>

  initVariant();
    2766:	f7ff fff8 	bl	275a <_Z11initVariantv>

  delay(1);
    276a:	2001      	movs	r0, #1
    276c:	f7ff ffb8 	bl	26e0 <delay>
#if defined(USBCON) && !defined(USB_DISABLED)
  USBDevice.init();
    2770:	4c08      	ldr	r4, [pc, #32]	; (2794 <main+0x38>)
    2772:	0020      	movs	r0, r4
    2774:	f000 fbb2 	bl	2edc <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    2778:	0020      	movs	r0, r4
    277a:	f000 fc0f 	bl	2f9c <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    277e:	f7ff fcc9 	bl	2114 <setup>

  for (;;)
  {
    loop();
    2782:	f7ff fced 	bl	2160 <loop>
    if (serialEventRun) serialEventRun();
    2786:	4b04      	ldr	r3, [pc, #16]	; (2798 <main+0x3c>)
    2788:	2b00      	cmp	r3, #0
    278a:	d0fa      	beq.n	2782 <main+0x26>
    278c:	e000      	b.n	2790 <main+0x34>
    278e:	bf00      	nop
    2790:	e7f7      	b.n	2782 <main+0x26>
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	20000398 	.word	0x20000398
    2798:	00000000 	.word	0x00000000

0000279c <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    279c:	4b01      	ldr	r3, [pc, #4]	; (27a4 <initiateReset+0x8>)
    279e:	6018      	str	r0, [r3, #0]
}
    27a0:	4770      	bx	lr
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	2000000c 	.word	0x2000000c

000027a8 <cancelReset>:

void cancelReset() {
	ticks = -1;
    27a8:	2201      	movs	r2, #1
    27aa:	4b02      	ldr	r3, [pc, #8]	; (27b4 <cancelReset+0xc>)
    27ac:	4252      	negs	r2, r2
    27ae:	601a      	str	r2, [r3, #0]
}
    27b0:	4770      	bx	lr
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	2000000c 	.word	0x2000000c

000027b8 <tickReset>:

void tickReset() {
	if (ticks == -1)
    27b8:	4a05      	ldr	r2, [pc, #20]	; (27d0 <tickReset+0x18>)
void tickReset() {
    27ba:	b510      	push	{r4, lr}
	if (ticks == -1)
    27bc:	6813      	ldr	r3, [r2, #0]
    27be:	1c59      	adds	r1, r3, #1
    27c0:	d005      	beq.n	27ce <tickReset+0x16>
		return;
	ticks--;
    27c2:	3b01      	subs	r3, #1
    27c4:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    27c6:	2b00      	cmp	r3, #0
    27c8:	d101      	bne.n	27ce <tickReset+0x16>
		banzai();
    27ca:	4b02      	ldr	r3, [pc, #8]	; (27d4 <tickReset+0x1c>)
    27cc:	4798      	blx	r3
}
    27ce:	bd10      	pop	{r4, pc}
    27d0:	2000000c 	.word	0x2000000c
    27d4:	00012d01 	.word	0x00012d01

000027d8 <waitForSync>:
void waitForSync( void )
{
#if (SAMD21 || SAMD11)
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21 || SAMD51)
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    27d8:	4902      	ldr	r1, [pc, #8]	; (27e4 <waitForSync+0xc>)
    27da:	4b03      	ldr	r3, [pc, #12]	; (27e8 <waitForSync+0x10>)
    27dc:	684a      	ldr	r2, [r1, #4]
    27de:	421a      	tst	r2, r3
    27e0:	d1fc      	bne.n	27dc <waitForSync+0x4>
#endif
}
    27e2:	4770      	bx	lr
    27e4:	40001800 	.word	0x40001800
    27e8:	000007fd 	.word	0x000007fd

000027ec <waitForPLL>:
{
#if (SAMD51)
  while ( OSCCTRL->Dpll[0].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
  while ( OSCCTRL->Dpll[1].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
#else
  while ( OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
    27ec:	230e      	movs	r3, #14
    27ee:	4902      	ldr	r1, [pc, #8]	; (27f8 <waitForPLL+0xc>)
    27f0:	780a      	ldrb	r2, [r1, #0]
    27f2:	421a      	tst	r2, r3
    27f4:	d1fc      	bne.n	27f0 <waitForPLL+0x4>
#endif
}
    27f6:	4770      	bx	lr
    27f8:	40000c38 	.word	0x40000c38

000027fc <SystemInit>:
   * Disable automatic NVM write operations (errata reference 13134, applies to D21/D11/L21, but not C21 or D51)
   */
#if (SAMD21 || SAMD11)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_HALF | NVMCTRL_CTRLB_MANW) ; // one wait state
#elif (SAML21 || SAMC21)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27fc:	2284      	movs	r2, #132	; 0x84
{
    27fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    2800:	4b29      	ldr	r3, [pc, #164]	; (28a8 <SystemInit+0xac>)
  /* Turn on the digital interface clock */
#if !defined(TRUST_RESET_DEFAULTS)
#if (SAMD21 || SAMD11)
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
#elif (SAML21 || SAMC21 || SAMD51)
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    2802:	4d2a      	ldr	r5, [pc, #168]	; (28ac <SystemInit+0xb0>)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    2804:	605a      	str	r2, [r3, #4]
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    2806:	2340      	movs	r3, #64	; 0x40
    2808:	696a      	ldr	r2, [r5, #20]
#endif
#endif

#if (SAML21)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    280a:	2102      	movs	r1, #2
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    280c:	4313      	orrs	r3, r2
    280e:	616b      	str	r3, [r5, #20]
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2810:	2380      	movs	r3, #128	; 0x80
    2812:	2201      	movs	r2, #1
    2814:	05db      	lsls	r3, r3, #23
    2816:	719a      	strb	r2, [r3, #6]
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    2818:	7898      	ldrb	r0, [r3, #2]
    281a:	4301      	orrs	r1, r0
    281c:	7099      	strb	r1, [r3, #2]
  while ( (PM->INTFLAG.reg & PM_INTFLAG_PLRDY) != PM_INTFLAG_PLRDY );
    281e:	7999      	ldrb	r1, [r3, #6]
    2820:	4211      	tst	r1, r2
    2822:	d0fc      	beq.n	281e <SystemInit+0x22>

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) );	/* Wait for reset to complete */
#elif (SAML21 || SAMC21 || SAMD51)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;

  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    2824:	2101      	movs	r1, #1
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    2826:	4c22      	ldr	r4, [pc, #136]	; (28b0 <SystemInit+0xb4>)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2828:	719a      	strb	r2, [r3, #6]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    282a:	4b22      	ldr	r3, [pc, #136]	; (28b4 <SystemInit+0xb8>)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    282c:	7022      	strb	r2, [r4, #0]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    282e:	7822      	ldrb	r2, [r4, #0]
    2830:	420a      	tst	r2, r1
    2832:	d002      	beq.n	283a <SystemInit+0x3e>
    2834:	6862      	ldr	r2, [r4, #4]
    2836:	421a      	tst	r2, r3
    2838:	d1f9      	bne.n	282e <SystemInit+0x32>
  SYSCTRL->DPLLCTRLA.reg = SYSCTRL_DPLLCTRLA_ENABLE;

  while ( (SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) != SYSCTRL_DPLLSTATUS_CLKRDY );

#elif (SAML21 || SAMC21)
  OSC32KCTRL->XOSC32K.reg = (OSC32KCTRL_XOSC32K_STARTUP( 0x4u ) | OSC32KCTRL_XOSC32K_XTALEN | OSC32KCTRL_XOSC32K_EN32K | OSC32KCTRL_XOSC32K_EN1K);
    283a:	4b1f      	ldr	r3, [pc, #124]	; (28b8 <SystemInit+0xbc>)
    283c:	4a1f      	ldr	r2, [pc, #124]	; (28bc <SystemInit+0xc0>)
    283e:	615a      	str	r2, [r3, #20]
  OSC32KCTRL->XOSC32K.bit.ENABLE = 1;
    2840:	2202      	movs	r2, #2
    2842:	6959      	ldr	r1, [r3, #20]
    2844:	430a      	orrs	r2, r1
    2846:	615a      	str	r2, [r3, #20]

  while ( (OSC32KCTRL->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) == 0 );       /* Wait for oscillator stabilization */
    2848:	2201      	movs	r2, #1
    284a:	68d9      	ldr	r1, [r3, #12]
    284c:	4211      	tst	r1, r2
    284e:	d0fc      	beq.n	284a <SystemInit+0x4e>

  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2850:	4b1b      	ldr	r3, [pc, #108]	; (28c0 <SystemInit+0xc4>)
    2852:	4e1c      	ldr	r6, [pc, #112]	; (28c4 <SystemInit+0xc8>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */

  OSCCTRL->DPLLPRESC.reg = 0;
  waitForPLL();

  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2854:	2702      	movs	r7, #2
  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2856:	62f3      	str	r3, [r6, #44]	; 0x2c
  waitForPLL();
    2858:	f7ff ffc8 	bl	27ec <waitForPLL>
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    285c:	2300      	movs	r3, #0
  OSCCTRL->DPLLPRESC.reg = 0;
    285e:	4a1a      	ldr	r2, [pc, #104]	; (28c8 <SystemInit+0xcc>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    2860:	6333      	str	r3, [r6, #48]	; 0x30
  OSCCTRL->DPLLPRESC.reg = 0;
    2862:	7013      	strb	r3, [r2, #0]
  waitForPLL();
    2864:	f7ff ffc2 	bl	27ec <waitForPLL>
  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2868:	4b18      	ldr	r3, [pc, #96]	; (28cc <SystemInit+0xd0>)
    286a:	701f      	strb	r7, [r3, #0]
  waitForPLL();
    286c:	f7ff ffbe 	bl	27ec <waitForPLL>

  while ( (OSCCTRL->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) != OSCCTRL_DPLLSTATUS_CLKRDY );
    2870:	4a17      	ldr	r2, [pc, #92]	; (28d0 <SystemInit+0xd4>)
    2872:	7813      	ldrb	r3, [r2, #0]
    2874:	423b      	tst	r3, r7
    2876:	d0fc      	beq.n	2872 <SystemInit+0x76>
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
#elif (SAML21 || SAMC21)
  MCLK->CPUDIV.reg  = MCLK_CPUDIV_CPUDIV_DIV1 ;
    2878:	2301      	movs	r3, #1
    287a:	712b      	strb	r3, [r5, #4]

#elif (SAML21 || SAMC21)
  /* Setup GCLK0 (GENERIC_CLOCK_GENERATOR_MAIN) which is used for the CPU. */
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch Generic Clock Generator 0 to 96MHz PLL output. The output is divided by two to obtain a 48MHz CPU clock. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_MAIN].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    287c:	4d15      	ldr	r5, [pc, #84]	; (28d4 <SystemInit+0xd8>)
    287e:	6225      	str	r5, [r4, #32]
    waitForSync();
    2880:	f7ff ffaa 	bl	27d8 <waitForSync>
  #endif

#elif (SAML21 || SAMC21)
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch GENERIC_CLOCK_GENERATOR_48MHz to 96MHz PLL output. The output is divided by two to obtain 48MHz. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_48MHz].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    2884:	6325      	str	r5, [r4, #48]	; 0x30
    waitForSync();
    2886:	f7ff ffa7 	bl	27d8 <waitForSync>
  waitForSync();

#elif (SAML21)
  /* Note that after reset, the L21 starts with the OSC16M set to 4MHz, NOT the DFLL@48MHz as stated in some documentation. */
  /* Modify FSEL value of OSC16M to have 8MHz */
  OSCCTRL->OSC16MCTRL.bit.FSEL = OSCCTRL_OSC16MCTRL_FSEL_8_Val;
    288a:	220c      	movs	r2, #12
    288c:	7d33      	ldrb	r3, [r6, #20]
    288e:	4393      	bics	r3, r2
    2890:	001a      	movs	r2, r3
    2892:	2304      	movs	r3, #4
    2894:	4313      	orrs	r3, r2
    2896:	7533      	strb	r3, [r6, #20]

  /* Put OSC16M as source for Generic Clock Generator 3 */
  GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_OSC_HS].reg = ( GCLK_GENCTRL_DIV(1) | GCLK_GENCTRL_SRC_OSC16M | GCLK_GENCTRL_GENEN );
    2898:	4b0f      	ldr	r3, [pc, #60]	; (28d8 <SystemInit+0xdc>)
    289a:	62e3      	str	r3, [r4, #44]	; 0x2c
  waitForSync();
    289c:	f7ff ff9c 	bl	27d8 <waitForSync>
#endif
#endif

  SystemCoreClock=VARIANT_MCK;
    28a0:	4a0e      	ldr	r2, [pc, #56]	; (28dc <SystemInit+0xe0>)
    28a2:	4b0f      	ldr	r3, [pc, #60]	; (28e0 <SystemInit+0xe4>)
    28a4:	601a      	str	r2, [r3, #0]
}
    28a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28a8:	41004000 	.word	0x41004000
    28ac:	40000400 	.word	0x40000400
    28b0:	40001800 	.word	0x40001800
    28b4:	000007fd 	.word	0x000007fd
    28b8:	40001000 	.word	0x40001000
    28bc:	0000041c 	.word	0x0000041c
    28c0:	00000b71 	.word	0x00000b71
    28c4:	40000c00 	.word	0x40000c00
    28c8:	40000c34 	.word	0x40000c34
    28cc:	40000c28 	.word	0x40000c28
    28d0:	40000c3c 	.word	0x40000c3c
    28d4:	00020308 	.word	0x00020308
    28d8:	00010106 	.word	0x00010106
    28dc:	02dc6c00 	.word	0x02dc6c00
    28e0:	20000084 	.word	0x20000084

000028e4 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    28e4:	203f      	movs	r0, #63	; 0x3f
    28e6:	4770      	bx	lr

000028e8 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    28e8:	b513      	push	{r0, r1, r4, lr}
    28ea:	466b      	mov	r3, sp
	return write(&c, 1);
    28ec:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    28ee:	71d9      	strb	r1, [r3, #7]
    28f0:	3307      	adds	r3, #7
	return write(&c, 1);
    28f2:	6854      	ldr	r4, [r2, #4]
    28f4:	0019      	movs	r1, r3
    28f6:	2201      	movs	r2, #1
    28f8:	47a0      	blx	r4
}
    28fa:	bd16      	pop	{r1, r2, r4, pc}

000028fc <_ZN7Serial_9availableEv>:
{
    28fc:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    28fe:	2102      	movs	r1, #2
    2900:	6900      	ldr	r0, [r0, #16]
    2902:	f000 fc31 	bl	3168 <_ZN14USBDeviceClass9availableEm>
}
    2906:	bd10      	pop	{r4, pc}

00002908 <_ZN7Serial_5flushEv>:
{
    2908:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    290a:	2103      	movs	r1, #3
    290c:	6900      	ldr	r0, [r0, #16]
    290e:	f000 fc41 	bl	3194 <_ZN14USBDeviceClass5flushEm>
}
    2912:	bd10      	pop	{r4, pc}

00002914 <_ZN7Serial_5writeEPKhj>:
{
    2914:	b510      	push	{r4, lr}
    2916:	0013      	movs	r3, r2
    2918:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    291a:	000a      	movs	r2, r1
    291c:	6900      	ldr	r0, [r0, #16]
    291e:	2103      	movs	r1, #3
    2920:	f000 fd32 	bl	3388 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    2924:	2800      	cmp	r0, #0
    2926:	d101      	bne.n	292c <_ZN7Serial_5writeEPKhj+0x18>
    size_t printFloat(float, uint8_t);
#else
    size_t printFloat(double, uint8_t);
#endif
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2928:	2301      	movs	r3, #1
    292a:	6063      	str	r3, [r4, #4]
}
    292c:	bd10      	pop	{r4, pc}
	...

00002930 <_ZN7Serial_4peekEv>:
{
    2930:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    2932:	4c05      	ldr	r4, [pc, #20]	; (2948 <_ZN7Serial_4peekEv+0x18>)
    2934:	6823      	ldr	r3, [r4, #0]
    2936:	1c5a      	adds	r2, r3, #1
    2938:	d104      	bne.n	2944 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    293a:	6803      	ldr	r3, [r0, #0]
    293c:	695b      	ldr	r3, [r3, #20]
    293e:	4798      	blx	r3
    2940:	0003      	movs	r3, r0
    2942:	6020      	str	r0, [r4, #0]
}
    2944:	0018      	movs	r0, r3
    2946:	bd10      	pop	{r4, pc}
    2948:	20000058 	.word	0x20000058

0000294c <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    294c:	4b07      	ldr	r3, [pc, #28]	; (296c <_ZN7Serial_4readEv+0x20>)
{
    294e:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    2950:	6818      	ldr	r0, [r3, #0]
{
    2952:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    2954:	1c41      	adds	r1, r0, #1
    2956:	d003      	beq.n	2960 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    2958:	2201      	movs	r2, #1
    295a:	4252      	negs	r2, r2
    295c:	601a      	str	r2, [r3, #0]
}
    295e:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    2960:	2102      	movs	r1, #2
    2962:	6910      	ldr	r0, [r2, #16]
    2964:	f000 fd02 	bl	336c <_ZN14USBDeviceClass4recvEm>
    2968:	e7f9      	b.n	295e <_ZN7Serial_4readEv+0x12>
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	20000058 	.word	0x20000058

00002970 <_Z16CDC_GetInterfacePh>:
{
    2970:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    2972:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    2974:	223a      	movs	r2, #58	; 0x3a
	interfaceNum[0] += 2;	// uses 2
    2976:	3302      	adds	r3, #2
    2978:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    297a:	4902      	ldr	r1, [pc, #8]	; (2984 <_Z16CDC_GetInterfacePh+0x14>)
    297c:	4802      	ldr	r0, [pc, #8]	; (2988 <_Z16CDC_GetInterfacePh+0x18>)
    297e:	f000 fdaf 	bl	34e0 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    2982:	bd10      	pop	{r4, pc}
    2984:	2000001c 	.word	0x2000001c
    2988:	20000398 	.word	0x20000398

0000298c <_Z9CDC_SetupR8USBSetup>:
{
    298c:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    298e:	7801      	ldrb	r1, [r0, #0]
{
    2990:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    2992:	7842      	ldrb	r2, [r0, #1]
	return false;
    2994:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    2996:	29a1      	cmp	r1, #161	; 0xa1
    2998:	d108      	bne.n	29ac <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    299a:	2a21      	cmp	r2, #33	; 0x21
    299c:	d105      	bne.n	29aa <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    299e:	3a1a      	subs	r2, #26
    29a0:	4916      	ldr	r1, [pc, #88]	; (29fc <_Z9CDC_SetupR8USBSetup+0x70>)
    29a2:	4817      	ldr	r0, [pc, #92]	; (2a00 <_Z9CDC_SetupR8USBSetup+0x74>)
    29a4:	f000 fd9c 	bl	34e0 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    29a8:	2001      	movs	r0, #1
}
    29aa:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    29ac:	2921      	cmp	r1, #33	; 0x21
    29ae:	d1fc      	bne.n	29aa <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    29b0:	2a20      	cmp	r2, #32
    29b2:	d111      	bne.n	29d8 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    29b4:	3a19      	subs	r2, #25
    29b6:	4911      	ldr	r1, [pc, #68]	; (29fc <_Z9CDC_SetupR8USBSetup+0x70>)
    29b8:	4811      	ldr	r0, [pc, #68]	; (2a00 <_Z9CDC_SetupR8USBSetup+0x74>)
    29ba:	f000 fc2f 	bl	321c <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    29be:	2296      	movs	r2, #150	; 0x96
    29c0:	4b0e      	ldr	r3, [pc, #56]	; (29fc <_Z9CDC_SetupR8USBSetup+0x70>)
    29c2:	00d2      	lsls	r2, r2, #3
    29c4:	6819      	ldr	r1, [r3, #0]
    29c6:	4291      	cmp	r1, r2
    29c8:	d103      	bne.n	29d2 <_Z9CDC_SetupR8USBSetup+0x46>
    29ca:	2401      	movs	r4, #1
    29cc:	79d8      	ldrb	r0, [r3, #7]
    29ce:	4004      	ands	r4, r0
    29d0:	d00e      	beq.n	29f0 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    29d2:	f7ff fee9 	bl	27a8 <cancelReset>
    29d6:	e00e      	b.n	29f6 <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    29d8:	2a22      	cmp	r2, #34	; 0x22
    29da:	d103      	bne.n	29e4 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    29dc:	789a      	ldrb	r2, [r3, #2]
    29de:	4b07      	ldr	r3, [pc, #28]	; (29fc <_Z9CDC_SetupR8USBSetup+0x70>)
    29e0:	71da      	strb	r2, [r3, #7]
    29e2:	e7ec      	b.n	29be <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    29e4:	2a23      	cmp	r2, #35	; 0x23
    29e6:	d1e0      	bne.n	29aa <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    29e8:	885a      	ldrh	r2, [r3, #2]
    29ea:	4b06      	ldr	r3, [pc, #24]	; (2a04 <_Z9CDC_SetupR8USBSetup+0x78>)
    29ec:	601a      	str	r2, [r3, #0]
			return false;
    29ee:	e7dc      	b.n	29aa <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    29f0:	20fa      	movs	r0, #250	; 0xfa
    29f2:	f7ff fed3 	bl	279c <initiateReset>
			return false;
    29f6:	2000      	movs	r0, #0
    29f8:	e7d7      	b.n	29aa <_Z9CDC_SetupR8USBSetup+0x1e>
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	20000014 	.word	0x20000014
    2a00:	20000398 	.word	0x20000398
    2a04:	20000010 	.word	0x20000010

00002a08 <_ZN7Serial_5beginEm>:
}
    2a08:	4770      	bx	lr
	...

00002a0c <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
    2a0c:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    2a0e:	f7ff fe31 	bl	2674 <millis>
    2a12:	23f4      	movs	r3, #244	; 0xf4
    2a14:	33ff      	adds	r3, #255	; 0xff
		return false;
    2a16:	2400      	movs	r4, #0
	if (millis() < 500)
    2a18:	4298      	cmp	r0, r3
    2a1a:	d907      	bls.n	2a2c <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    2a1c:	4b04      	ldr	r3, [pc, #16]	; (2a30 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
    2a1e:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
    2a20:	79dc      	ldrb	r4, [r3, #7]
    2a22:	1e63      	subs	r3, r4, #1
    2a24:	419c      	sbcs	r4, r3
    2a26:	b2e4      	uxtb	r4, r4
	delay(10);
    2a28:	f7ff fe5a 	bl	26e0 <delay>
	return result;
}
    2a2c:	0020      	movs	r0, r4
    2a2e:	bd10      	pop	{r4, pc}
    2a30:	20000014 	.word	0x20000014

00002a34 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2a34:	22fa      	movs	r2, #250	; 0xfa
  public:
    Print() : write_error(0) {}
    2a36:	2100      	movs	r1, #0
    2a38:	4b05      	ldr	r3, [pc, #20]	; (2a50 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    2a3a:	0092      	lsls	r2, r2, #2
    2a3c:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    2a3e:	4a05      	ldr	r2, [pc, #20]	; (2a54 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    2a40:	6059      	str	r1, [r3, #4]
    2a42:	3208      	adds	r2, #8
    2a44:	601a      	str	r2, [r3, #0]
    2a46:	4a04      	ldr	r2, [pc, #16]	; (2a58 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    2a48:	7619      	strb	r1, [r3, #24]
    2a4a:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    2a4c:	4770      	bx	lr
    2a4e:	46c0      	nop			; (mov r8, r8)
    2a50:	2000037c 	.word	0x2000037c
    2a54:	00010cd4 	.word	0x00010cd4
    2a58:	20000398 	.word	0x20000398

00002a5c <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    2a5c:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    2a5e:	250f      	movs	r5, #15
    2a60:	1dcb      	adds	r3, r1, #7
    2a62:	3901      	subs	r1, #1
    2a64:	0002      	movs	r2, r0
    2a66:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    2a68:	0014      	movs	r4, r2
		val = (val >> 4);
    2a6a:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    2a6c:	3430      	adds	r4, #48	; 0x30
    2a6e:	2a09      	cmp	r2, #9
    2a70:	dd01      	ble.n	2a76 <_ZL5utox8mPc+0x1a>
    2a72:	3237      	adds	r2, #55	; 0x37
    2a74:	0014      	movs	r4, r2
    2a76:	701c      	strb	r4, [r3, #0]
    2a78:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    2a7a:	428b      	cmp	r3, r1
    2a7c:	d1f2      	bne.n	2a64 <_ZL5utox8mPc+0x8>
	}
}
    2a7e:	bd30      	pop	{r4, r5, pc}

00002a80 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    2a80:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    2a82:	2982      	cmp	r1, #130	; 0x82
    2a84:	d11f      	bne.n	2ac6 <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2a86:	b2c3      	uxtb	r3, r0
    2a88:	4d2c      	ldr	r5, [pc, #176]	; (2b3c <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    2a8a:	015a      	lsls	r2, r3, #5
    2a8c:	18aa      	adds	r2, r5, r2
    2a8e:	6991      	ldr	r1, [r2, #24]
    2a90:	4c2b      	ldr	r4, [pc, #172]	; (2b40 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    2a92:	0180      	lsls	r0, r0, #6
    2a94:	400c      	ands	r4, r1
    2a96:	21c0      	movs	r1, #192	; 0xc0
    2a98:	0589      	lsls	r1, r1, #22
    2a9a:	4321      	orrs	r1, r4
    2a9c:	6191      	str	r1, [r2, #24]
    2a9e:	4929      	ldr	r1, [pc, #164]	; (2b44 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2aa0:	3308      	adds	r3, #8
    2aa2:	1808      	adds	r0, r1, r0
    2aa4:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2aa6:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2aa8:	682a      	ldr	r2, [r5, #0]
    2aaa:	015b      	lsls	r3, r3, #5
    2aac:	18d0      	adds	r0, r2, r3
    2aae:	7904      	ldrb	r4, [r0, #4]
    2ab0:	4249      	negs	r1, r1
    2ab2:	4321      	orrs	r1, r4
    2ab4:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2ab6:	2070      	movs	r0, #112	; 0x70
    2ab8:	5c99      	ldrb	r1, [r3, r2]
    2aba:	4381      	bics	r1, r0
    2abc:	0008      	movs	r0, r1
    2abe:	2130      	movs	r1, #48	; 0x30
    2ac0:	4301      	orrs	r1, r0
    2ac2:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    2ac4:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    2ac6:	2900      	cmp	r1, #0
    2ac8:	d1fc      	bne.n	2ac4 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2aca:	24c0      	movs	r4, #192	; 0xc0
    2acc:	b2c1      	uxtb	r1, r0
    2ace:	4e1b      	ldr	r6, [pc, #108]	; (2b3c <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    2ad0:	014b      	lsls	r3, r1, #5
    2ad2:	18f3      	adds	r3, r6, r3
    2ad4:	689a      	ldr	r2, [r3, #8]
    2ad6:	4d1a      	ldr	r5, [pc, #104]	; (2b40 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    2ad8:	05a4      	lsls	r4, r4, #22
    2ada:	402a      	ands	r2, r5
    2adc:	4322      	orrs	r2, r4
    2ade:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    2ae0:	4a19      	ldr	r2, [pc, #100]	; (2b48 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    2ae2:	0180      	lsls	r0, r0, #6
    2ae4:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2ae6:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2ae8:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2aea:	6830      	ldr	r0, [r6, #0]
    2aec:	2607      	movs	r6, #7
    2aee:	3208      	adds	r2, #8
    2af0:	0152      	lsls	r2, r2, #5
    2af2:	5c11      	ldrb	r1, [r2, r0]
    2af4:	43b1      	bics	r1, r6
    2af6:	000e      	movs	r6, r1
    2af8:	2101      	movs	r1, #1
    2afa:	4331      	orrs	r1, r6
    2afc:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2afe:	6999      	ldr	r1, [r3, #24]
    2b00:	400d      	ands	r5, r1
    2b02:	432c      	orrs	r4, r5
    2b04:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2b06:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2b08:	490e      	ldr	r1, [pc, #56]	; (2b44 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    2b0a:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2b0c:	5c11      	ldrb	r1, [r2, r0]
    2b0e:	43a1      	bics	r1, r4
    2b10:	000c      	movs	r4, r1
    2b12:	2110      	movs	r1, #16
    2b14:	4321      	orrs	r1, r4
    2b16:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2b18:	6899      	ldr	r1, [r3, #8]
    2b1a:	4c0c      	ldr	r4, [pc, #48]	; (2b4c <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    2b1c:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2b1e:	400c      	ands	r4, r1
    2b20:	2180      	movs	r1, #128	; 0x80
    2b22:	0349      	lsls	r1, r1, #13
    2b24:	4321      	orrs	r1, r4
    2b26:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2b28:	6899      	ldr	r1, [r3, #8]
    2b2a:	0b89      	lsrs	r1, r1, #14
    2b2c:	0389      	lsls	r1, r1, #14
    2b2e:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    2b30:	2340      	movs	r3, #64	; 0x40
    2b32:	7951      	ldrb	r1, [r2, #5]
    2b34:	430b      	orrs	r3, r1
    2b36:	7153      	strb	r3, [r2, #5]
    2b38:	e7c4      	b.n	2ac4 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    2b3a:	46c0      	nop			; (mov r8, r8)
    2b3c:	20000850 	.word	0x20000850
    2b40:	8fffffff 	.word	0x8fffffff
    2b44:	200003c4 	.word	0x200003c4
    2b48:	20000584 	.word	0x20000584
    2b4c:	f0003fff 	.word	0xf0003fff

00002b50 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    2b50:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    2b52:	0004      	movs	r4, r0
    2b54:	2301      	movs	r3, #1
    2b56:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    2b58:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    2b5a:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    2b5c:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    2b5e:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    2b60:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    2b62:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    2b64:	0052      	lsls	r2, r2, #1
    2b66:	f009 ffaf 	bl	cac8 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    2b6a:	78ab      	ldrb	r3, [r5, #2]
    2b6c:	07db      	lsls	r3, r3, #31
    2b6e:	d4fc      	bmi.n	2b6a <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    2b70:	626c      	str	r4, [r5, #36]	; 0x24
}
    2b72:	bd70      	pop	{r4, r5, r6, pc}

00002b74 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    2b74:	221f      	movs	r2, #31
    2b76:	4b14      	ldr	r3, [pc, #80]	; (2bc8 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    2b78:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    2b7a:	681b      	ldr	r3, [r3, #0]
    2b7c:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    2b7e:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    2b80:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    2b82:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    2b84:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    2b86:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
    2b88:	291f      	cmp	r1, #31
    2b8a:	d100      	bne.n	2b8e <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    2b8c:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    2b8e:	2a1f      	cmp	r2, #31
    2b90:	d100      	bne.n	2b94 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    2b92:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    2b94:	2b07      	cmp	r3, #7
    2b96:	d100      	bne.n	2b9a <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    2b98:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
    2b9a:	251f      	movs	r5, #31
    2b9c:	6800      	ldr	r0, [r0, #0]
    2b9e:	018e      	lsls	r6, r1, #6
    2ba0:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    2ba2:	490a      	ldr	r1, [pc, #40]	; (2bcc <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    2ba4:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    2ba6:	4021      	ands	r1, r4
    2ba8:	4331      	orrs	r1, r6
    2baa:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    2bac:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    2bae:	0014      	movs	r4, r2
    2bb0:	000a      	movs	r2, r1
    2bb2:	43aa      	bics	r2, r5
    2bb4:	4322      	orrs	r2, r4
    2bb6:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    2bb8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    2bba:	0319      	lsls	r1, r3, #12
    2bbc:	4b04      	ldr	r3, [pc, #16]	; (2bd0 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    2bbe:	4013      	ands	r3, r2
    2bc0:	430b      	orrs	r3, r1
    2bc2:	8503      	strh	r3, [r0, #40]	; 0x28
}
    2bc4:	bd70      	pop	{r4, r5, r6, pc}
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	00806020 	.word	0x00806020
    2bcc:	fffff83f 	.word	0xfffff83f
    2bd0:	ffff8fff 	.word	0xffff8fff

00002bd4 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2bd4:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    2bd8:	6003      	str	r3, [r0, #0]
    2bda:	2301      	movs	r3, #1
    2bdc:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2bde:	b672      	cpsid	i
		__disable_irq();
	}
    2be0:	4770      	bx	lr

00002be2 <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
    2be2:	6803      	ldr	r3, [r0, #0]
    2be4:	2b00      	cmp	r3, #0
    2be6:	d102      	bne.n	2bee <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    2be8:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    2bea:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    2bee:	4770      	bx	lr

00002bf0 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    2bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    2bf2:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    2bf4:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    2bf6:	4668      	mov	r0, sp
		if (current == 0) {
    2bf8:	2d00      	cmp	r5, #0
    2bfa:	d114      	bne.n	2c26 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    2bfc:	f7ff ffea 	bl	2bd4 <_ZN7__GuardC1Ev>
    2c00:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    2c02:	1d62      	adds	r2, r4, #5
			synchronized {
    2c04:	3b01      	subs	r3, #1
    2c06:	d302      	bcc.n	2c0e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    2c08:	7fd5      	ldrb	r5, [r2, #31]
    2c0a:	b2ed      	uxtb	r5, r5
    2c0c:	e7fa      	b.n	2c04 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    2c0e:	4668      	mov	r0, sp
    2c10:	9301      	str	r3, [sp, #4]
    2c12:	f7ff ffe6 	bl	2be2 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    2c16:	2d00      	cmp	r5, #0
    2c18:	d101      	bne.n	2c1e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    2c1a:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    2c1c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    2c1e:	6a20      	ldr	r0, [r4, #32]
    2c20:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    2c22:	1ac0      	subs	r0, r0, r3
    2c24:	e7fa      	b.n	2c1c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    2c26:	f7ff ffd5 	bl	2bd4 <_ZN7__GuardC1Ev>
				ready = ready1;
    2c2a:	0022      	movs	r2, r4
			bool ready = false;
    2c2c:	2500      	movs	r5, #0
    2c2e:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    2c30:	3234      	adds	r2, #52	; 0x34
			synchronized {
    2c32:	3b01      	subs	r3, #1
    2c34:	d302      	bcc.n	2c3c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    2c36:	7815      	ldrb	r5, [r2, #0]
    2c38:	b2ed      	uxtb	r5, r5
			synchronized {
    2c3a:	e7fa      	b.n	2c32 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    2c3c:	4668      	mov	r0, sp
    2c3e:	9301      	str	r3, [sp, #4]
    2c40:	f7ff ffcf 	bl	2be2 <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    2c44:	2d00      	cmp	r5, #0
    2c46:	d0e8      	beq.n	2c1a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    2c48:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2c4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2c4c:	e7e9      	b.n	2c22 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00002c50 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    2c50:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2c52:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    2c54:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2c56:	7a03      	ldrb	r3, [r0, #8]
    2c58:	6831      	ldr	r1, [r6, #0]
    2c5a:	015a      	lsls	r2, r3, #5
    2c5c:	188c      	adds	r4, r1, r2
    2c5e:	34ff      	adds	r4, #255	; 0xff
    2c60:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2c62:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2c64:	433d      	orrs	r5, r7
    2c66:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    2c68:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2c6a:	4d09      	ldr	r5, [pc, #36]	; (2c90 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    2c6c:	6890      	ldr	r0, [r2, #8]
    2c6e:	04a4      	lsls	r4, r4, #18
    2c70:	4028      	ands	r0, r5
    2c72:	0924      	lsrs	r4, r4, #4
    2c74:	4320      	orrs	r0, r4
    2c76:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2c78:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2c7a:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2c7c:	0b80      	lsrs	r0, r0, #14
    2c7e:	0380      	lsls	r0, r0, #14
    2c80:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2c82:	2240      	movs	r2, #64	; 0x40
    2c84:	015b      	lsls	r3, r3, #5
    2c86:	18cb      	adds	r3, r1, r3
    2c88:	7919      	ldrb	r1, [r3, #4]
    2c8a:	430a      	orrs	r2, r1
    2c8c:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    2c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c90:	f0003fff 	.word	0xf0003fff

00002c94 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    2c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    2c96:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    2c98:	0004      	movs	r4, r0
    2c9a:	000e      	movs	r6, r1
    2c9c:	0017      	movs	r7, r2
			synchronized {
    2c9e:	4668      	mov	r0, sp
		if (current == 0) {
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	d13d      	bne.n	2d20 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    2ca4:	f7ff ff96 	bl	2bd4 <_ZN7__GuardC1Ev>
    2ca8:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    2caa:	1d61      	adds	r1, r4, #5
    2cac:	3b01      	subs	r3, #1
			synchronized {
    2cae:	1c5a      	adds	r2, r3, #1
    2cb0:	d00c      	beq.n	2ccc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    2cb2:	7fcd      	ldrb	r5, [r1, #31]
    2cb4:	1e5a      	subs	r2, r3, #1
    2cb6:	b2ed      	uxtb	r5, r5
    2cb8:	2d00      	cmp	r5, #0
    2cba:	d105      	bne.n	2cc8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    2cbc:	4668      	mov	r0, sp
    2cbe:	9301      	str	r3, [sp, #4]
    2cc0:	f7ff ff8f 	bl	2be2 <_ZN7__GuardD1Ev>
	}
    2cc4:	0028      	movs	r0, r5
    2cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2cc8:	0013      	movs	r3, r2
    2cca:	e7f0      	b.n	2cae <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    2ccc:	4668      	mov	r0, sp
    2cce:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    2cd0:	2500      	movs	r5, #0
			synchronized {
    2cd2:	f7ff ff86 	bl	2be2 <_ZN7__GuardD1Ev>
    2cd6:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    2cd8:	42af      	cmp	r7, r5
    2cda:	d002      	beq.n	2ce2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    2cdc:	6a22      	ldr	r2, [r4, #32]
    2cde:	4293      	cmp	r3, r2
    2ce0:	d357      	bcc.n	2d92 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    2ce2:	6a22      	ldr	r2, [r4, #32]
    2ce4:	4293      	cmp	r3, r2
    2ce6:	d1ed      	bne.n	2cc4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    2ce8:	2300      	movs	r3, #0
    2cea:	61e3      	str	r3, [r4, #28]
				current = 1;
    2cec:	3301      	adds	r3, #1
    2cee:	6123      	str	r3, [r4, #16]
				synchronized {
    2cf0:	4668      	mov	r0, sp
    2cf2:	f7ff ff6f 	bl	2bd4 <_ZN7__GuardC1Ev>
					if (notify) {
    2cf6:	0022      	movs	r2, r4
					ready0 = false;
    2cf8:	2100      	movs	r1, #0
    2cfa:	9b01      	ldr	r3, [sp, #4]
    2cfc:	1d67      	adds	r7, r4, #5
    2cfe:	3b01      	subs	r3, #1
					if (notify) {
    2d00:	3235      	adds	r2, #53	; 0x35
				synchronized {
    2d02:	1c58      	adds	r0, r3, #1
    2d04:	d0da      	beq.n	2cbc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    2d06:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    2d08:	7810      	ldrb	r0, [r2, #0]
    2d0a:	1e5e      	subs	r6, r3, #1
    2d0c:	2800      	cmp	r0, #0
    2d0e:	d005      	beq.n	2d1c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    2d10:	7011      	strb	r1, [r2, #0]
						release();
    2d12:	0020      	movs	r0, r4
    2d14:	9301      	str	r3, [sp, #4]
    2d16:	f7ff ff9b 	bl	2c50 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2d1a:	e7ec      	b.n	2cf6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    2d1c:	0033      	movs	r3, r6
    2d1e:	e7f0      	b.n	2d02 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    2d20:	f7ff ff58 	bl	2bd4 <_ZN7__GuardC1Ev>
				if (!ready1) {
    2d24:	0021      	movs	r1, r4
    2d26:	9b01      	ldr	r3, [sp, #4]
    2d28:	3134      	adds	r1, #52	; 0x34
    2d2a:	3b01      	subs	r3, #1
			synchronized {
    2d2c:	1c5a      	adds	r2, r3, #1
    2d2e:	d006      	beq.n	2d3e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    2d30:	780d      	ldrb	r5, [r1, #0]
    2d32:	1e5a      	subs	r2, r3, #1
    2d34:	b2ed      	uxtb	r5, r5
    2d36:	2d00      	cmp	r5, #0
    2d38:	d0c0      	beq.n	2cbc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    2d3a:	0013      	movs	r3, r2
    2d3c:	e7f6      	b.n	2d2c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    2d3e:	4668      	mov	r0, sp
    2d40:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    2d42:	2500      	movs	r5, #0
			synchronized {
    2d44:	f7ff ff4d 	bl	2be2 <_ZN7__GuardD1Ev>
    2d48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    2d4a:	42bd      	cmp	r5, r7
    2d4c:	d002      	beq.n	2d54 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    2d4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2d50:	4293      	cmp	r3, r2
    2d52:	d326      	bcc.n	2da2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    2d54:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2d56:	4293      	cmp	r3, r2
    2d58:	d1b4      	bne.n	2cc4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    2d5a:	2300      	movs	r3, #0
				synchronized {
    2d5c:	4668      	mov	r0, sp
				first1 = 0;
    2d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    2d60:	6123      	str	r3, [r4, #16]
				synchronized {
    2d62:	f7ff ff37 	bl	2bd4 <_ZN7__GuardC1Ev>
					ready1 = false;
    2d66:	0027      	movs	r7, r4
					if (notify) {
    2d68:	0022      	movs	r2, r4
					ready1 = false;
    2d6a:	2100      	movs	r1, #0
    2d6c:	9b01      	ldr	r3, [sp, #4]
    2d6e:	3734      	adds	r7, #52	; 0x34
    2d70:	3b01      	subs	r3, #1
					if (notify) {
    2d72:	3235      	adds	r2, #53	; 0x35
				synchronized {
    2d74:	1c58      	adds	r0, r3, #1
    2d76:	d0a1      	beq.n	2cbc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    2d78:	7039      	strb	r1, [r7, #0]
					if (notify) {
    2d7a:	7810      	ldrb	r0, [r2, #0]
    2d7c:	1e5e      	subs	r6, r3, #1
    2d7e:	2800      	cmp	r0, #0
    2d80:	d005      	beq.n	2d8e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    2d82:	7011      	strb	r1, [r2, #0]
						release();
    2d84:	0020      	movs	r0, r4
    2d86:	9301      	str	r3, [sp, #4]
    2d88:	f7ff ff62 	bl	2c50 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2d8c:	e7eb      	b.n	2d66 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    2d8e:	0033      	movs	r3, r6
    2d90:	e7f0      	b.n	2d74 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    2d92:	1c5a      	adds	r2, r3, #1
    2d94:	61e2      	str	r2, [r4, #28]
    2d96:	69a2      	ldr	r2, [r4, #24]
    2d98:	18d3      	adds	r3, r2, r3
    2d9a:	781b      	ldrb	r3, [r3, #0]
    2d9c:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    2d9e:	3501      	adds	r5, #1
    2da0:	e799      	b.n	2cd6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    2da2:	1c5a      	adds	r2, r3, #1
    2da4:	62e2      	str	r2, [r4, #44]	; 0x2c
    2da6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2da8:	18d3      	adds	r3, r2, r3
    2daa:	781b      	ldrb	r3, [r3, #0]
    2dac:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    2dae:	3501      	adds	r5, #1
    2db0:	e7ca      	b.n	2d48 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00002db2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    2db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2db4:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    2db6:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2db8:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    2dba:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2dbc:	3108      	adds	r1, #8
    2dbe:	6818      	ldr	r0, [r3, #0]
    2dc0:	0149      	lsls	r1, r1, #5
    2dc2:	1841      	adds	r1, r0, r1
    2dc4:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    2dc6:	07c0      	lsls	r0, r0, #31
    2dc8:	d527      	bpl.n	2e1a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    2dca:	2501      	movs	r5, #1
    2dcc:	0152      	lsls	r2, r2, #5
    2dce:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2dd0:	189b      	adds	r3, r3, r2
    2dd2:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    2dd4:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2dd6:	0492      	lsls	r2, r2, #18
    2dd8:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    2dda:	2900      	cmp	r1, #0
    2ddc:	d121      	bne.n	2e22 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    2dde:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    2de0:	6a22      	ldr	r2, [r4, #32]
    2de2:	2a00      	cmp	r2, #0
    2de4:	d03e      	beq.n	2e64 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2de6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    2de8:	6165      	str	r5, [r4, #20]
					synchronized {
    2dea:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2dec:	605a      	str	r2, [r3, #4]
					synchronized {
    2dee:	f7ff fef1 	bl	2bd4 <_ZN7__GuardC1Ev>
						if (ready1) {
    2df2:	0027      	movs	r7, r4
    2df4:	0021      	movs	r1, r4
    2df6:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    2df8:	1d66      	adds	r6, r4, #5
    2dfa:	3b01      	subs	r3, #1
						if (ready1) {
    2dfc:	3734      	adds	r7, #52	; 0x34
    2dfe:	3135      	adds	r1, #53	; 0x35
					synchronized {
    2e00:	1c5a      	adds	r2, r3, #1
    2e02:	d02b      	beq.n	2e5c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    2e04:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    2e06:	783a      	ldrb	r2, [r7, #0]
    2e08:	1e58      	subs	r0, r3, #1
    2e0a:	b2d2      	uxtb	r2, r2
    2e0c:	2a00      	cmp	r2, #0
    2e0e:	d005      	beq.n	2e1c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    2e10:	9301      	str	r3, [sp, #4]
							return;
    2e12:	4668      	mov	r0, sp
							notify = true;
    2e14:	700d      	strb	r5, [r1, #0]
							return;
    2e16:	f7ff fee4 	bl	2be2 <_ZN7__GuardD1Ev>
	}
    2e1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    2e1c:	700a      	strb	r2, [r1, #0]
					synchronized {
    2e1e:	0003      	movs	r3, r0
    2e20:	e7ee      	b.n	2e00 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    2e22:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    2e24:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2e26:	2a00      	cmp	r2, #0
    2e28:	d01c      	beq.n	2e64 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    2e2a:	2200      	movs	r2, #0
    2e2c:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2e2e:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    2e30:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2e32:	605a      	str	r2, [r3, #4]
					synchronized {
    2e34:	f7ff fece 	bl	2bd4 <_ZN7__GuardC1Ev>
						ready1 = true;
    2e38:	0026      	movs	r6, r4
    2e3a:	0021      	movs	r1, r4
    2e3c:	9b01      	ldr	r3, [sp, #4]
    2e3e:	3634      	adds	r6, #52	; 0x34
    2e40:	3b01      	subs	r3, #1
						if (ready0) {
    2e42:	1d67      	adds	r7, r4, #5
    2e44:	3135      	adds	r1, #53	; 0x35
					synchronized {
    2e46:	1c5a      	adds	r2, r3, #1
    2e48:	d008      	beq.n	2e5c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    2e4a:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    2e4c:	7ffa      	ldrb	r2, [r7, #31]
    2e4e:	1e58      	subs	r0, r3, #1
    2e50:	b2d2      	uxtb	r2, r2
    2e52:	2a00      	cmp	r2, #0
    2e54:	d1dc      	bne.n	2e10 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    2e56:	700a      	strb	r2, [r1, #0]
					synchronized {
    2e58:	0003      	movs	r3, r0
    2e5a:	e7f4      	b.n	2e46 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    2e5c:	4668      	mov	r0, sp
    2e5e:	9301      	str	r3, [sp, #4]
    2e60:	f7ff febf 	bl	2be2 <_ZN7__GuardD1Ev>
			release();
    2e64:	0020      	movs	r0, r4
    2e66:	f7ff fef3 	bl	2c50 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2e6a:	e7d6      	b.n	2e1a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00002e6c <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    2e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    2e6e:	466b      	mov	r3, sp
    2e70:	1ddc      	adds	r4, r3, #7
    2e72:	2300      	movs	r3, #0
{
    2e74:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    2e76:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    2e78:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    2e7a:	f7ff fd79 	bl	2970 <_Z16CDC_GetInterfacePh>
    2e7e:	682b      	ldr	r3, [r5, #0]
    2e80:	1818      	adds	r0, r3, r0
    2e82:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    2e84:	f002 fc0e 	bl	56a4 <_Z12PluggableUSBv>
    2e88:	0021      	movs	r1, r4
    2e8a:	f002 fbc7 	bl	561c <_ZN13PluggableUSB_12getInterfaceEPh>
    2e8e:	682b      	ldr	r3, [r5, #0]
    2e90:	1818      	adds	r0, r3, r0
    2e92:	6028      	str	r0, [r5, #0]
	return interfaces;
    2e94:	7820      	ldrb	r0, [r4, #0]
}
    2e96:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002e98 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    2e98:	2903      	cmp	r1, #3
    2e9a:	d10e      	bne.n	2eba <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2e9c:	2280      	movs	r2, #128	; 0x80
    2e9e:	4b0e      	ldr	r3, [pc, #56]	; (2ed8 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    2ea0:	3162      	adds	r1, #98	; 0x62
    2ea2:	681b      	ldr	r3, [r3, #0]
    2ea4:	31ff      	adds	r1, #255	; 0xff
    2ea6:	5c58      	ldrb	r0, [r3, r1]
    2ea8:	4252      	negs	r2, r2
    2eaa:	4302      	orrs	r2, r0
    2eac:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2eae:	2268      	movs	r2, #104	; 0x68
    2eb0:	3963      	subs	r1, #99	; 0x63
    2eb2:	39ff      	subs	r1, #255	; 0xff
    2eb4:	32ff      	adds	r2, #255	; 0xff
    2eb6:	5499      	strb	r1, [r3, r2]
}
    2eb8:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    2eba:	2901      	cmp	r1, #1
    2ebc:	d1fc      	bne.n	2eb8 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2ebe:	2280      	movs	r2, #128	; 0x80
    2ec0:	4b05      	ldr	r3, [pc, #20]	; (2ed8 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    2ec2:	3124      	adds	r1, #36	; 0x24
    2ec4:	681b      	ldr	r3, [r3, #0]
    2ec6:	31ff      	adds	r1, #255	; 0xff
    2ec8:	5c58      	ldrb	r0, [r3, r1]
    2eca:	4252      	negs	r2, r2
    2ecc:	4302      	orrs	r2, r0
    2ece:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2ed0:	3923      	subs	r1, #35	; 0x23
    2ed2:	39ff      	subs	r1, #255	; 0xff
    2ed4:	2228      	movs	r2, #40	; 0x28
    2ed6:	e7ed      	b.n	2eb4 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    2ed8:	20000850 	.word	0x20000850

00002edc <_ZN14USBDeviceClass4initEv>:
{
    2edc:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
    2ede:	2400      	movs	r4, #0
    2ee0:	4b26      	ldr	r3, [pc, #152]	; (2f7c <_ZN14USBDeviceClass4initEv+0xa0>)
	pinMode(PIN_LED_TXL, OUTPUT);
    2ee2:	2101      	movs	r1, #1
{
    2ee4:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    2ee6:	2015      	movs	r0, #21
	txLEDPulse = 0;
    2ee8:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    2eea:	f000 feb1 	bl	3c50 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    2eee:	2101      	movs	r1, #1
    2ef0:	2015      	movs	r0, #21
    2ef2:	f000 feb1 	bl	3c58 <digitalWrite>
	rxLEDPulse = 0;
    2ef6:	4b22      	ldr	r3, [pc, #136]	; (2f80 <_ZN14USBDeviceClass4initEv+0xa4>)
	pinMode(PIN_LED_RXL, OUTPUT);
    2ef8:	2101      	movs	r1, #1
    2efa:	2014      	movs	r0, #20
	rxLEDPulse = 0;
    2efc:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    2efe:	f000 fea7 	bl	3c50 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    2f02:	2101      	movs	r1, #1
    2f04:	2014      	movs	r0, #20
    2f06:	f000 fea7 	bl	3c58 <digitalWrite>
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2f0a:	2301      	movs	r3, #1
    2f0c:	4a1d      	ldr	r2, [pc, #116]	; (2f84 <_ZN14USBDeviceClass4initEv+0xa8>)
        pinPeripheral( PIN_USB_DM, PIO_COM );
    2f0e:	2018      	movs	r0, #24
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2f10:	6991      	ldr	r1, [r2, #24]
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    2f12:	3440      	adds	r4, #64	; 0x40
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2f14:	430b      	orrs	r3, r1
    2f16:	6193      	str	r3, [r2, #24]
        pinPeripheral( PIN_USB_DM, PIO_COM );
    2f18:	210f      	movs	r1, #15
    2f1a:	f000 ff07 	bl	3d2c <pinPeripheral>
        pinPeripheral( PIN_USB_DP, PIO_COM );
    2f1e:	210f      	movs	r1, #15
    2f20:	2019      	movs	r0, #25
    2f22:	f000 ff03 	bl	3d2c <pinPeripheral>
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    2f26:	4b18      	ldr	r3, [pc, #96]	; (2f88 <_ZN14USBDeviceClass4initEv+0xac>)
    2f28:	601c      	str	r4, [r3, #0]
        while ( (GCLK->PCHCTRL[GCM_USB].reg & GCLK_PCHCTRL_CHEN) == 0 );        // wait for sync
    2f2a:	681a      	ldr	r2, [r3, #0]
    2f2c:	4222      	tst	r2, r4
    2f2e:	d0fc      	beq.n	2f2a <_ZN14USBDeviceClass4initEv+0x4e>
        USB_SetHandler(&UDD_Handler);
    2f30:	4816      	ldr	r0, [pc, #88]	; (2f8c <_ZN14USBDeviceClass4initEv+0xb0>)
    2f32:	f7ff fb99 	bl	2668 <USB_SetHandler>
	usbd.reset();
    2f36:	4e16      	ldr	r6, [pc, #88]	; (2f90 <_ZN14USBDeviceClass4initEv+0xb4>)
    2f38:	0030      	movs	r0, r6
    2f3a:	f7ff fe09 	bl	2b50 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    2f3e:	0030      	movs	r0, r6
    2f40:	f7ff fe18 	bl	2b74 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    2f44:	217f      	movs	r1, #127	; 0x7f
    2f46:	6833      	ldr	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2f48:	20c1      	movs	r0, #193	; 0xc1
    2f4a:	781a      	ldrb	r2, [r3, #0]
    2f4c:	0080      	lsls	r0, r0, #2
    2f4e:	400a      	ands	r2, r1
    2f50:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2f52:	2204      	movs	r2, #4
    2f54:	7819      	ldrb	r1, [r3, #0]
    2f56:	4e0f      	ldr	r6, [pc, #60]	; (2f94 <_ZN14USBDeviceClass4initEv+0xb8>)
    2f58:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2f5a:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2f5c:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2f5e:	891a      	ldrh	r2, [r3, #8]
    2f60:	438a      	bics	r2, r1
    2f62:	811a      	strh	r2, [r3, #8]
    2f64:	4a0c      	ldr	r2, [pc, #48]	; (2f98 <_ZN14USBDeviceClass4initEv+0xbc>)
    2f66:	5811      	ldr	r1, [r2, r0]
    2f68:	4031      	ands	r1, r6
    2f6a:	5011      	str	r1, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2f6c:	6014      	str	r4, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    2f6e:	2202      	movs	r2, #2
    2f70:	7819      	ldrb	r1, [r3, #0]
    2f72:	430a      	orrs	r2, r1
    2f74:	701a      	strb	r2, [r3, #0]
	initialized = true;
    2f76:	2301      	movs	r3, #1
    2f78:	702b      	strb	r3, [r5, #0]
}
    2f7a:	bd70      	pop	{r4, r5, r6, pc}
    2f7c:	200003b9 	.word	0x200003b9
    2f80:	200003b8 	.word	0x200003b8
    2f84:	40000400 	.word	0x40000400
    2f88:	40001890 	.word	0x40001890
    2f8c:	0000396d 	.word	0x0000396d
    2f90:	20000850 	.word	0x20000850
    2f94:	ff00ffff 	.word	0xff00ffff
    2f98:	e000e100 	.word	0xe000e100

00002f9c <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    2f9c:	7800      	ldrb	r0, [r0, #0]
    2f9e:	2800      	cmp	r0, #0
    2fa0:	d010      	beq.n	2fc4 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    2fa2:	2101      	movs	r1, #1
    2fa4:	4b08      	ldr	r3, [pc, #32]	; (2fc8 <_ZN14USBDeviceClass6attachEv+0x2c>)
    2fa6:	681b      	ldr	r3, [r3, #0]
    2fa8:	891a      	ldrh	r2, [r3, #8]
    2faa:	438a      	bics	r2, r1
    2fac:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    2fae:	2208      	movs	r2, #8
    2fb0:	8b19      	ldrh	r1, [r3, #24]
    2fb2:	430a      	orrs	r2, r1
    2fb4:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    2fb6:	2204      	movs	r2, #4
    2fb8:	8b19      	ldrh	r1, [r3, #24]
    2fba:	430a      	orrs	r2, r1
    2fbc:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    2fbe:	2200      	movs	r2, #0
    2fc0:	4b02      	ldr	r3, [pc, #8]	; (2fcc <_ZN14USBDeviceClass6attachEv+0x30>)
    2fc2:	601a      	str	r2, [r3, #0]
}
    2fc4:	4770      	bx	lr
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	20000850 	.word	0x20000850
    2fcc:	20000848 	.word	0x20000848

00002fd0 <_ZN14USBDeviceClass10setAddressEm>:
{
    2fd0:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2fd2:	4a10      	ldr	r2, [pc, #64]	; (3014 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    2fd4:	6993      	ldr	r3, [r2, #24]
    2fd6:	0b9b      	lsrs	r3, r3, #14
    2fd8:	039b      	lsls	r3, r3, #14
    2fda:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2fdc:	6813      	ldr	r3, [r2, #0]
    2fde:	2202      	movs	r2, #2
    2fe0:	33ff      	adds	r3, #255	; 0xff
    2fe2:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2fe4:	7998      	ldrb	r0, [r3, #6]
    2fe6:	3a82      	subs	r2, #130	; 0x82
    2fe8:	4302      	orrs	r2, r0
    2fea:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    2fec:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    2fee:	0792      	lsls	r2, r2, #30
    2ff0:	d5fc      	bpl.n	2fec <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2ff2:	2282      	movs	r2, #130	; 0x82
    2ff4:	247f      	movs	r4, #127	; 0x7f
    2ff6:	05d2      	lsls	r2, r2, #23
    2ff8:	7a93      	ldrb	r3, [r2, #10]
    2ffa:	4021      	ands	r1, r4
    2ffc:	43a3      	bics	r3, r4
    2ffe:	0008      	movs	r0, r1
    3000:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    3002:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    3004:	4301      	orrs	r1, r0
    3006:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    3008:	7a91      	ldrb	r1, [r2, #10]
    300a:	425b      	negs	r3, r3
    300c:	430b      	orrs	r3, r1
    300e:	7293      	strb	r3, [r2, #10]
}
    3010:	bd10      	pop	{r4, pc}
    3012:	46c0      	nop			; (mov r8, r8)
    3014:	20000850 	.word	0x20000850

00003018 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    3018:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    301a:	790b      	ldrb	r3, [r1, #4]
{
    301c:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    301e:	2b00      	cmp	r3, #0
    3020:	d10c      	bne.n	303c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    3022:	0008      	movs	r0, r1
    3024:	f7ff fcb2 	bl	298c <_Z9CDC_SetupR8USBSetup>
    3028:	2800      	cmp	r0, #0
    302a:	d001      	beq.n	3030 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    302c:	2001      	movs	r0, #1
}
    302e:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3030:	4a09      	ldr	r2, [pc, #36]	; (3058 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    3032:	6993      	ldr	r3, [r2, #24]
    3034:	0b9b      	lsrs	r3, r3, #14
    3036:	039b      	lsls	r3, r3, #14
    3038:	6193      	str	r3, [r2, #24]
    303a:	e7f7      	b.n	302c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    303c:	f002 fb32 	bl	56a4 <_Z12PluggableUSBv>
    3040:	0021      	movs	r1, r4
    3042:	f002 fb1e 	bl	5682 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    3046:	2800      	cmp	r0, #0
    3048:	d1f0      	bne.n	302c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    304a:	4a03      	ldr	r2, [pc, #12]	; (3058 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    304c:	6993      	ldr	r3, [r2, #24]
    304e:	0b9b      	lsrs	r3, r3, #14
    3050:	039b      	lsls	r3, r3, #14
    3052:	6193      	str	r3, [r2, #24]
    3054:	e7eb      	b.n	302e <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	20000850 	.word	0x20000850

0000305c <_ZN14USBDeviceClass6initEPEmm>:
{
    305c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    305e:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    3060:	2a83      	cmp	r2, #131	; 0x83
    3062:	d119      	bne.n	3098 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    3064:	b2cb      	uxtb	r3, r1
    3066:	4c32      	ldr	r4, [pc, #200]	; (3130 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    3068:	015a      	lsls	r2, r3, #5
    306a:	18a2      	adds	r2, r4, r2
    306c:	6991      	ldr	r1, [r2, #24]
    306e:	4831      	ldr	r0, [pc, #196]	; (3134 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    3070:	01ad      	lsls	r5, r5, #6
    3072:	4008      	ands	r0, r1
    3074:	21c0      	movs	r1, #192	; 0xc0
    3076:	0589      	lsls	r1, r1, #22
    3078:	4301      	orrs	r1, r0
    307a:	6191      	str	r1, [r2, #24]
    307c:	492e      	ldr	r1, [pc, #184]	; (3138 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    307e:	6820      	ldr	r0, [r4, #0]
    3080:	194d      	adds	r5, r1, r5
    3082:	2170      	movs	r1, #112	; 0x70
    3084:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3086:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    3088:	015b      	lsls	r3, r3, #5
    308a:	5c1a      	ldrb	r2, [r3, r0]
    308c:	438a      	bics	r2, r1
    308e:	0011      	movs	r1, r2
    3090:	2240      	movs	r2, #64	; 0x40
    3092:	430a      	orrs	r2, r1
    3094:	541a      	strb	r2, [r3, r0]
}
    3096:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    3098:	2a02      	cmp	r2, #2
    309a:	d144      	bne.n	3126 <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
    309c:	008b      	lsls	r3, r1, #2
    309e:	9301      	str	r3, [sp, #4]
    30a0:	4b26      	ldr	r3, [pc, #152]	; (313c <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    30a2:	008a      	lsls	r2, r1, #2
    30a4:	58d6      	ldr	r6, [r2, r3]
    30a6:	2e00      	cmp	r6, #0
    30a8:	d1f5      	bne.n	3096 <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    30aa:	2038      	movs	r0, #56	; 0x38
    30ac:	f001 fee6 	bl	4e7c <_Znwj>
		notify(false)
    30b0:	4b23      	ldr	r3, [pc, #140]	; (3140 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    30b2:	4f1f      	ldr	r7, [pc, #124]	; (3130 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    30b4:	6003      	str	r3, [r0, #0]
    30b6:	2380      	movs	r3, #128	; 0x80
    30b8:	005b      	lsls	r3, r3, #1
    30ba:	60c3      	str	r3, [r0, #12]
    30bc:	1d43      	adds	r3, r0, #5
    30be:	6206      	str	r6, [r0, #32]
    30c0:	6085      	str	r5, [r0, #8]
    30c2:	6106      	str	r6, [r0, #16]
    30c4:	6146      	str	r6, [r0, #20]
    30c6:	61c6      	str	r6, [r0, #28]
    30c8:	0004      	movs	r4, r0
    30ca:	6047      	str	r7, [r0, #4]
    30cc:	77de      	strb	r6, [r3, #31]
    30ce:	62c6      	str	r6, [r0, #44]	; 0x2c
    30d0:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    30d2:	2080      	movs	r0, #128	; 0x80
		notify(false)
    30d4:	332f      	adds	r3, #47	; 0x2f
    30d6:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    30d8:	0040      	lsls	r0, r0, #1
		notify(false)
    30da:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    30dc:	f009 fca4 	bl	ca28 <malloc>
    30e0:	0006      	movs	r6, r0
    30e2:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    30e4:	2080      	movs	r0, #128	; 0x80
    30e6:	0040      	lsls	r0, r0, #1
    30e8:	f009 fc9e 	bl	ca28 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    30ec:	b2ed      	uxtb	r5, r5
    30ee:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    30f0:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    30f2:	18fb      	adds	r3, r7, r3
    30f4:	689a      	ldr	r2, [r3, #8]
    30f6:	490f      	ldr	r1, [pc, #60]	; (3134 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    30f8:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    30fa:	4011      	ands	r1, r2
    30fc:	22c0      	movs	r2, #192	; 0xc0
    30fe:	0592      	lsls	r2, r2, #22
    3100:	430a      	orrs	r2, r1
    3102:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    3104:	683a      	ldr	r2, [r7, #0]
    3106:	3508      	adds	r5, #8
    3108:	016d      	lsls	r5, r5, #5
    310a:	5ca9      	ldrb	r1, [r5, r2]
    310c:	4381      	bics	r1, r0
    310e:	0008      	movs	r0, r1
    3110:	2103      	movs	r1, #3
    3112:	4301      	orrs	r1, r0
    3114:	54a9      	strb	r1, [r5, r2]
		release();
    3116:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    3118:	605e      	str	r6, [r3, #4]
		release();
    311a:	f7ff fd99 	bl	2c50 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    311e:	4b07      	ldr	r3, [pc, #28]	; (313c <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    3120:	9a01      	ldr	r2, [sp, #4]
    3122:	50d4      	str	r4, [r2, r3]
    3124:	e7b7      	b.n	3096 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    3126:	0011      	movs	r1, r2
    3128:	0028      	movs	r0, r5
    312a:	f7ff fca9 	bl	2a80 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    312e:	e7b2      	b.n	3096 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    3130:	20000850 	.word	0x20000850
    3134:	8fffffff 	.word	0x8fffffff
    3138:	200003c4 	.word	0x200003c4
    313c:	2000039c 	.word	0x2000039c
    3140:	00010d00 	.word	0x00010d00

00003144 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    3144:	b570      	push	{r4, r5, r6, lr}
    3146:	0005      	movs	r5, r0
    3148:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    314a:	4b06      	ldr	r3, [pc, #24]	; (3164 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    314c:	00a2      	lsls	r2, r4, #2
    314e:	58d2      	ldr	r2, [r2, r3]
    3150:	2a00      	cmp	r2, #0
    3152:	d005      	beq.n	3160 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    3154:	0021      	movs	r1, r4
    3156:	0028      	movs	r0, r5
    3158:	f7ff ff80 	bl	305c <_ZN14USBDeviceClass6initEPEmm>
    315c:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    315e:	e7f4      	b.n	314a <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    3160:	bd70      	pop	{r4, r5, r6, pc}
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	2000005c 	.word	0x2000005c

00003168 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    3168:	4b08      	ldr	r3, [pc, #32]	; (318c <_ZN14USBDeviceClass9availableEm+0x24>)
    316a:	008a      	lsls	r2, r1, #2
    316c:	58d0      	ldr	r0, [r2, r3]
{
    316e:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    3170:	2800      	cmp	r0, #0
    3172:	d003      	beq.n	317c <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    3174:	6803      	ldr	r3, [r0, #0]
    3176:	689b      	ldr	r3, [r3, #8]
    3178:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    317a:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    317c:	b2c9      	uxtb	r1, r1
    317e:	4b04      	ldr	r3, [pc, #16]	; (3190 <_ZN14USBDeviceClass9availableEm+0x28>)
    3180:	0149      	lsls	r1, r1, #5
    3182:	1859      	adds	r1, r3, r1
    3184:	6888      	ldr	r0, [r1, #8]
    3186:	0480      	lsls	r0, r0, #18
    3188:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    318a:	e7f6      	b.n	317a <_ZN14USBDeviceClass9availableEm+0x12>
    318c:	2000039c 	.word	0x2000039c
    3190:	20000850 	.word	0x20000850

00003194 <_ZN14USBDeviceClass5flushEm>:
{
    3194:	b510      	push	{r4, lr}
    3196:	000c      	movs	r4, r1
	if (available(ep)) {
    3198:	f7ff ffe6 	bl	3168 <_ZN14USBDeviceClass9availableEm>
    319c:	2800      	cmp	r0, #0
    319e:	d00c      	beq.n	31ba <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    31a0:	4b06      	ldr	r3, [pc, #24]	; (31bc <_ZN14USBDeviceClass5flushEm+0x28>)
    31a2:	b2e4      	uxtb	r4, r4
    31a4:	681b      	ldr	r3, [r3, #0]
    31a6:	3408      	adds	r4, #8
    31a8:	0164      	lsls	r4, r4, #5
    31aa:	191c      	adds	r4, r3, r4
    31ac:	2380      	movs	r3, #128	; 0x80
    31ae:	7962      	ldrb	r2, [r4, #5]
    31b0:	425b      	negs	r3, r3
    31b2:	4313      	orrs	r3, r2
    31b4:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    31b6:	2302      	movs	r3, #2
    31b8:	71e3      	strb	r3, [r4, #7]
}
    31ba:	bd10      	pop	{r4, pc}
    31bc:	20000850 	.word	0x20000850

000031c0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    31c0:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    31c2:	4b13      	ldr	r3, [pc, #76]	; (3210 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    31c4:	b2cc      	uxtb	r4, r1
    31c6:	4a13      	ldr	r2, [pc, #76]	; (3214 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    31c8:	0160      	lsls	r0, r4, #5
    31ca:	0189      	lsls	r1, r1, #6
    31cc:	1859      	adds	r1, r3, r1
    31ce:	1813      	adds	r3, r2, r0
    31d0:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    31d2:	6899      	ldr	r1, [r3, #8]
    31d4:	4d10      	ldr	r5, [pc, #64]	; (3218 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    31d6:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    31d8:	400d      	ands	r5, r1
    31da:	2180      	movs	r1, #128	; 0x80
    31dc:	0289      	lsls	r1, r1, #10
    31de:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    31e0:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    31e2:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    31e4:	6899      	ldr	r1, [r3, #8]
    31e6:	0b89      	lsrs	r1, r1, #14
    31e8:	0389      	lsls	r1, r1, #14
    31ea:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    31ec:	6811      	ldr	r1, [r2, #0]
    31ee:	0163      	lsls	r3, r4, #5
    31f0:	18cb      	adds	r3, r1, r3
    31f2:	791e      	ldrb	r6, [r3, #4]
    31f4:	4335      	orrs	r5, r6
    31f6:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    31f8:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    31fa:	066d      	lsls	r5, r5, #25
    31fc:	d5fc      	bpl.n	31f8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    31fe:	0164      	lsls	r4, r4, #5
    3200:	1909      	adds	r1, r1, r4
    3202:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    3204:	07db      	lsls	r3, r3, #31
    3206:	d5fc      	bpl.n	3202 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3208:	1812      	adds	r2, r2, r0
    320a:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    320c:	b2c0      	uxtb	r0, r0
}
    320e:	bd70      	pop	{r4, r5, r6, pc}
    3210:	20000584 	.word	0x20000584
    3214:	20000850 	.word	0x20000850
    3218:	f0003fff 	.word	0xf0003fff

0000321c <_ZN14USBDeviceClass11recvControlEPvm>:
{
    321c:	b570      	push	{r4, r5, r6, lr}
    321e:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3220:	2240      	movs	r2, #64	; 0x40
    3222:	4b0b      	ldr	r3, [pc, #44]	; (3250 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    3224:	000d      	movs	r5, r1
    3226:	681b      	ldr	r3, [r3, #0]
    3228:	33ff      	adds	r3, #255	; 0xff
    322a:	7959      	ldrb	r1, [r3, #5]
    322c:	430a      	orrs	r2, r1
    322e:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    3230:	2100      	movs	r1, #0
    3232:	f7ff ffc5 	bl	31c0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    3236:	42a0      	cmp	r0, r4
    3238:	d900      	bls.n	323c <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    323a:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    323c:	2300      	movs	r3, #0
		data[i] = buffer[i];
    323e:	4905      	ldr	r1, [pc, #20]	; (3254 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    3240:	42a3      	cmp	r3, r4
    3242:	d003      	beq.n	324c <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    3244:	5c5a      	ldrb	r2, [r3, r1]
    3246:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    3248:	3301      	adds	r3, #1
    324a:	e7f9      	b.n	3240 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    324c:	bd70      	pop	{r4, r5, r6, pc}
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	20000850 	.word	0x20000850
    3254:	20000584 	.word	0x20000584

00003258 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    3258:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    325a:	b2c9      	uxtb	r1, r1
    325c:	480b      	ldr	r0, [pc, #44]	; (328c <_ZN14USBDeviceClass7armRecvEm+0x34>)
    325e:	0149      	lsls	r1, r1, #5
    3260:	1842      	adds	r2, r0, r1
    3262:	6893      	ldr	r3, [r2, #8]
    3264:	049b      	lsls	r3, r3, #18
    3266:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    3268:	2b3f      	cmp	r3, #63	; 0x3f
    326a:	dd0b      	ble.n	3284 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    326c:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    326e:	3b40      	subs	r3, #64	; 0x40
    3270:	049b      	lsls	r3, r3, #18
    3272:	0ba4      	lsrs	r4, r4, #14
    3274:	0c9b      	lsrs	r3, r3, #18
    3276:	03a4      	lsls	r4, r4, #14
    3278:	4323      	orrs	r3, r4
    327a:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    327c:	1841      	adds	r1, r0, r1
    327e:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    3280:	b2c0      	uxtb	r0, r0
}
    3282:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    3284:	6893      	ldr	r3, [r2, #8]
    3286:	0b9b      	lsrs	r3, r3, #14
    3288:	039b      	lsls	r3, r3, #14
    328a:	e7f6      	b.n	327a <_ZN14USBDeviceClass7armRecvEm+0x22>
    328c:	20000850 	.word	0x20000850

00003290 <_ZN14USBDeviceClass4recvEmPvm>:
{
    3290:	b5f0      	push	{r4, r5, r6, r7, lr}
    3292:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    3294:	4b30      	ldr	r3, [pc, #192]	; (3358 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    3296:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    3298:	681b      	ldr	r3, [r3, #0]
{
    329a:	0006      	movs	r6, r0
    329c:	000d      	movs	r5, r1
    329e:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    32a0:	2b00      	cmp	r3, #0
    32a2:	d055      	beq.n	3350 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
    32a4:	4f2d      	ldr	r7, [pc, #180]	; (335c <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    32a6:	7839      	ldrb	r1, [r7, #0]
    32a8:	b2c9      	uxtb	r1, r1
    32aa:	2900      	cmp	r1, #0
    32ac:	d102      	bne.n	32b4 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    32ae:	2014      	movs	r0, #20
    32b0:	f000 fcd2 	bl	3c58 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
    32b4:	2364      	movs	r3, #100	; 0x64
    32b6:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
    32b8:	4b29      	ldr	r3, [pc, #164]	; (3360 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    32ba:	00aa      	lsls	r2, r5, #2
    32bc:	58d0      	ldr	r0, [r2, r3]
    32be:	2800      	cmp	r0, #0
    32c0:	d008      	beq.n	32d4 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    32c2:	6803      	ldr	r3, [r0, #0]
    32c4:	0022      	movs	r2, r4
    32c6:	685b      	ldr	r3, [r3, #4]
    32c8:	9901      	ldr	r1, [sp, #4]
    32ca:	4798      	blx	r3
    32cc:	0004      	movs	r4, r0
}
    32ce:	0020      	movs	r0, r4
    32d0:	b005      	add	sp, #20
    32d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    32d4:	0029      	movs	r1, r5
    32d6:	0030      	movs	r0, r6
    32d8:	f7ff ff46 	bl	3168 <_ZN14USBDeviceClass9availableEm>
    32dc:	4284      	cmp	r4, r0
    32de:	d904      	bls.n	32ea <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    32e0:	0029      	movs	r1, r5
    32e2:	0030      	movs	r0, r6
    32e4:	f7ff ff40 	bl	3168 <_ZN14USBDeviceClass9availableEm>
    32e8:	0004      	movs	r4, r0
	armRecv(ep);
    32ea:	0029      	movs	r1, r5
    32ec:	0030      	movs	r0, r6
    32ee:	f7ff ffb3 	bl	3258 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    32f2:	2101      	movs	r1, #1
    32f4:	b2eb      	uxtb	r3, r5
    32f6:	4f1b      	ldr	r7, [pc, #108]	; (3364 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    32f8:	9303      	str	r3, [sp, #12]
    32fa:	015b      	lsls	r3, r3, #5
    32fc:	9302      	str	r3, [sp, #8]
    32fe:	9a02      	ldr	r2, [sp, #8]
    3300:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    3302:	9801      	ldr	r0, [sp, #4]
    3304:	189b      	adds	r3, r3, r2
    3306:	33ff      	adds	r3, #255	; 0xff
    3308:	7a5a      	ldrb	r2, [r3, #9]
    330a:	430a      	orrs	r2, r1
    330c:	4916      	ldr	r1, [pc, #88]	; (3368 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    330e:	725a      	strb	r2, [r3, #9]
    3310:	01ab      	lsls	r3, r5, #6
    3312:	18c9      	adds	r1, r1, r3
    3314:	0022      	movs	r2, r4
    3316:	f009 fbbc 	bl	ca92 <memcpy>
	if (len && !available(ep)) {
    331a:	2c00      	cmp	r4, #0
    331c:	d0d7      	beq.n	32ce <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    331e:	0029      	movs	r1, r5
    3320:	0030      	movs	r0, r6
    3322:	f7ff ff21 	bl	3168 <_ZN14USBDeviceClass9availableEm>
    3326:	2800      	cmp	r0, #0
    3328:	d1d1      	bne.n	32ce <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    332a:	2140      	movs	r1, #64	; 0x40
    332c:	9b03      	ldr	r3, [sp, #12]
    332e:	683a      	ldr	r2, [r7, #0]
    3330:	3308      	adds	r3, #8
    3332:	015b      	lsls	r3, r3, #5
    3334:	18d3      	adds	r3, r2, r3
    3336:	7918      	ldrb	r0, [r3, #4]
    3338:	4301      	orrs	r1, r0
    333a:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    333c:	2101      	movs	r1, #1
    333e:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3340:	2101      	movs	r1, #1
    3342:	9b02      	ldr	r3, [sp, #8]
    3344:	18d3      	adds	r3, r2, r3
    3346:	33ff      	adds	r3, #255	; 0xff
    3348:	7a9a      	ldrb	r2, [r3, #10]
    334a:	430a      	orrs	r2, r1
    334c:	729a      	strb	r2, [r3, #10]
    334e:	e7be      	b.n	32ce <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    3350:	2401      	movs	r4, #1
    3352:	4264      	negs	r4, r4
    3354:	e7bb      	b.n	32ce <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    3356:	46c0      	nop			; (mov r8, r8)
    3358:	20000848 	.word	0x20000848
    335c:	200003b8 	.word	0x200003b8
    3360:	2000039c 	.word	0x2000039c
    3364:	20000850 	.word	0x20000850
    3368:	20000584 	.word	0x20000584

0000336c <_ZN14USBDeviceClass4recvEm>:
{
    336c:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    336e:	466b      	mov	r3, sp
    3370:	1ddc      	adds	r4, r3, #7
    3372:	0022      	movs	r2, r4
    3374:	2301      	movs	r3, #1
    3376:	f7ff ff8b 	bl	3290 <_ZN14USBDeviceClass4recvEmPvm>
    337a:	2801      	cmp	r0, #1
    337c:	d101      	bne.n	3382 <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    337e:	7820      	ldrb	r0, [r4, #0]
}
    3380:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    3382:	2001      	movs	r0, #1
    3384:	4240      	negs	r0, r0
    3386:	e7fb      	b.n	3380 <_ZN14USBDeviceClass4recvEm+0x14>

00003388 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    3388:	b5f0      	push	{r4, r5, r6, r7, lr}
    338a:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    338c:	4b3a      	ldr	r3, [pc, #232]	; (3478 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
    338e:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    3390:	681b      	ldr	r3, [r3, #0]
{
    3392:	000f      	movs	r7, r1
    3394:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    3396:	2b00      	cmp	r3, #0
    3398:	d03f      	beq.n	341a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    339a:	2380      	movs	r3, #128	; 0x80
    339c:	01db      	lsls	r3, r3, #7
    339e:	429e      	cmp	r6, r3
    33a0:	d83b      	bhi.n	341a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    33a2:	4c36      	ldr	r4, [pc, #216]	; (347c <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    33a4:	7821      	ldrb	r1, [r4, #0]
    33a6:	b2c9      	uxtb	r1, r1
    33a8:	2900      	cmp	r1, #0
    33aa:	d102      	bne.n	33b2 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    33ac:	2015      	movs	r0, #21
    33ae:	f000 fc53 	bl	3c58 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    33b2:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    33b4:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    33b6:	4a32      	ldr	r2, [pc, #200]	; (3480 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    33b8:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    33ba:	01bb      	lsls	r3, r7, #6
    33bc:	18d3      	adds	r3, r2, r3
    33be:	9302      	str	r3, [sp, #8]
	while (len != 0)
    33c0:	2e00      	cmp	r6, #0
    33c2:	d02c      	beq.n	341e <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    33c4:	4b2f      	ldr	r3, [pc, #188]	; (3484 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    33c6:	681b      	ldr	r3, [r3, #0]
    33c8:	9303      	str	r3, [sp, #12]
    33ca:	23ff      	movs	r3, #255	; 0xff
    33cc:	403b      	ands	r3, r7
    33ce:	001c      	movs	r4, r3
    33d0:	9300      	str	r3, [sp, #0]
    33d2:	3408      	adds	r4, #8
    33d4:	9b03      	ldr	r3, [sp, #12]
    33d6:	0164      	lsls	r4, r4, #5
    33d8:	191c      	adds	r4, r3, r4
    33da:	79a3      	ldrb	r3, [r4, #6]
    33dc:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    33de:	d021      	beq.n	3424 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    33e0:	4b29      	ldr	r3, [pc, #164]	; (3488 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    33e2:	492a      	ldr	r1, [pc, #168]	; (348c <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    33e4:	6818      	ldr	r0, [r3, #0]
    33e6:	f006 fa05 	bl	97f4 <__udivsi3>
    33ea:	4b29      	ldr	r3, [pc, #164]	; (3490 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    33ec:	2117      	movs	r1, #23
    33ee:	4358      	muls	r0, r3
    33f0:	f006 fa00 	bl	97f4 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    33f4:	4b27      	ldr	r3, [pc, #156]	; (3494 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    33f6:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    33f8:	0792      	lsls	r2, r2, #30
    33fa:	d413      	bmi.n	3424 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    33fc:	5dda      	ldrb	r2, [r3, r7]
    33fe:	2a00      	cmp	r2, #0
    3400:	d101      	bne.n	3406 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    3402:	3801      	subs	r0, #1
    3404:	d2f7      	bcs.n	33f6 <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    3406:	2201      	movs	r2, #1
    3408:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    340a:	9b00      	ldr	r3, [sp, #0]
    340c:	015a      	lsls	r2, r3, #5
    340e:	4b1d      	ldr	r3, [pc, #116]	; (3484 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    3410:	189b      	adds	r3, r3, r2
    3412:	699a      	ldr	r2, [r3, #24]
    3414:	0b92      	lsrs	r2, r2, #14
    3416:	0392      	lsls	r2, r2, #14
    3418:	619a      	str	r2, [r3, #24]
					return -1;
    341a:	2501      	movs	r5, #1
    341c:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    341e:	0028      	movs	r0, r5
    3420:	b005      	add	sp, #20
    3422:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    3424:	2200      	movs	r2, #0
    3426:	4b1b      	ldr	r3, [pc, #108]	; (3494 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    3428:	0034      	movs	r4, r6
    342a:	55da      	strb	r2, [r3, r7]
    342c:	2e3f      	cmp	r6, #63	; 0x3f
    342e:	d900      	bls.n	3432 <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
    3430:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    3432:	0022      	movs	r2, r4
    3434:	9901      	ldr	r1, [sp, #4]
    3436:	9802      	ldr	r0, [sp, #8]
    3438:	f009 fb2b 	bl	ca92 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    343c:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    343e:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3440:	015a      	lsls	r2, r3, #5
    3442:	4b10      	ldr	r3, [pc, #64]	; (3484 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3444:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3446:	189b      	adds	r3, r3, r2
    3448:	9a02      	ldr	r2, [sp, #8]
		written += length;
    344a:	192d      	adds	r5, r5, r4
    344c:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    344e:	699a      	ldr	r2, [r3, #24]
		len -= length;
    3450:	1b36      	subs	r6, r6, r4
    3452:	0b92      	lsrs	r2, r2, #14
    3454:	0392      	lsls	r2, r2, #14
    3456:	430a      	orrs	r2, r1
    3458:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    345a:	9b00      	ldr	r3, [sp, #0]
    345c:	9a03      	ldr	r2, [sp, #12]
    345e:	3308      	adds	r3, #8
    3460:	015b      	lsls	r3, r3, #5
    3462:	18d3      	adds	r3, r2, r3
    3464:	2202      	movs	r2, #2
    3466:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3468:	7959      	ldrb	r1, [r3, #5]
    346a:	3a82      	subs	r2, #130	; 0x82
    346c:	430a      	orrs	r2, r1
    346e:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    3470:	9b01      	ldr	r3, [sp, #4]
    3472:	191b      	adds	r3, r3, r4
    3474:	9301      	str	r3, [sp, #4]
	while (len != 0)
    3476:	e7a3      	b.n	33c0 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    3478:	20000848 	.word	0x20000848
    347c:	200003b9 	.word	0x200003b9
    3480:	200003c4 	.word	0x200003c4
    3484:	20000850 	.word	0x20000850
    3488:	20000084 	.word	0x20000084
    348c:	000f4240 	.word	0x000f4240
    3490:	00011170 	.word	0x00011170
    3494:	200003bb 	.word	0x200003bb

00003498 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    3498:	b570      	push	{r4, r5, r6, lr}
    349a:	000d      	movs	r5, r1
    349c:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    349e:	4e0d      	ldr	r6, [pc, #52]	; (34d4 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    34a0:	01ab      	lsls	r3, r5, #6
    34a2:	18f6      	adds	r6, r6, r3
{
    34a4:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    34a6:	0030      	movs	r0, r6
    34a8:	0022      	movs	r2, r4
    34aa:	f009 faf2 	bl	ca92 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    34ae:	b2ed      	uxtb	r5, r5
    34b0:	4909      	ldr	r1, [pc, #36]	; (34d8 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    34b2:	016d      	lsls	r5, r5, #5
    34b4:	194d      	adds	r5, r1, r5
    34b6:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    34b8:	69ab      	ldr	r3, [r5, #24]
    34ba:	4a08      	ldr	r2, [pc, #32]	; (34dc <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    34bc:	0020      	movs	r0, r4
    34be:	4013      	ands	r3, r2
    34c0:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    34c2:	69ab      	ldr	r3, [r5, #24]
    34c4:	04a2      	lsls	r2, r4, #18
    34c6:	0b9b      	lsrs	r3, r3, #14
    34c8:	0c92      	lsrs	r2, r2, #18
    34ca:	039b      	lsls	r3, r3, #14
    34cc:	4313      	orrs	r3, r2
    34ce:	61ab      	str	r3, [r5, #24]
    34d0:	bd70      	pop	{r4, r5, r6, pc}
    34d2:	46c0      	nop			; (mov r8, r8)
    34d4:	200003c4 	.word	0x200003c4
    34d8:	20000850 	.word	0x20000850
    34dc:	f0003fff 	.word	0xf0003fff

000034e0 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    34e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    34e2:	4b10      	ldr	r3, [pc, #64]	; (3524 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    34e4:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    34e6:	781b      	ldrb	r3, [r3, #0]
{
    34e8:	000f      	movs	r7, r1
    34ea:	0015      	movs	r5, r2
	if (_dry_run == true)
    34ec:	2b00      	cmp	r3, #0
    34ee:	d10c      	bne.n	350a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    34f0:	4b0d      	ldr	r3, [pc, #52]	; (3528 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    34f2:	0016      	movs	r6, r2
    34f4:	781c      	ldrb	r4, [r3, #0]
    34f6:	2c00      	cmp	r4, #0
    34f8:	d009      	beq.n	350e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    34fa:	4e0c      	ldr	r6, [pc, #48]	; (352c <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    34fc:	480c      	ldr	r0, [pc, #48]	; (3530 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    34fe:	8834      	ldrh	r4, [r6, #0]
    3500:	1900      	adds	r0, r0, r4
		_pack_size += len;
    3502:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    3504:	f009 fac5 	bl	ca92 <memcpy>
		_pack_size += len;
    3508:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    350a:	0028      	movs	r0, r5
    350c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    350e:	2e00      	cmp	r6, #0
    3510:	d0fb      	beq.n	350a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    3512:	193a      	adds	r2, r7, r4
    3514:	0033      	movs	r3, r6
    3516:	2100      	movs	r1, #0
    3518:	9801      	ldr	r0, [sp, #4]
    351a:	f7ff ffbd 	bl	3498 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    351e:	1824      	adds	r4, r4, r0
		len -= sent;
    3520:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    3522:	e7f4      	b.n	350e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    3524:	20000744 	.word	0x20000744
    3528:	20000845 	.word	0x20000845
    352c:	20000846 	.word	0x20000846
    3530:	20000745 	.word	0x20000745

00003534 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    3534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    3536:	2000      	movs	r0, #0
{
    3538:	af00      	add	r7, sp, #0
    353a:	000e      	movs	r6, r1
    353c:	0015      	movs	r5, r2
	if (maxlen < 2)
    353e:	2a01      	cmp	r2, #1
    3540:	dd26      	ble.n	3590 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    3542:	1dd3      	adds	r3, r2, #7
    3544:	466a      	mov	r2, sp
    3546:	08db      	lsrs	r3, r3, #3
    3548:	00db      	lsls	r3, r3, #3
    354a:	1ad3      	subs	r3, r2, r3
    354c:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    354e:	0008      	movs	r0, r1
    3550:	f00a fbd1 	bl	dcf6 <strlen>
	uint8_t buffer[maxlen];
    3554:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    3556:	2303      	movs	r3, #3
		buffer[i] = 0;
    3558:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    355a:	3001      	adds	r0, #1
    355c:	0040      	lsls	r0, r0, #1
    355e:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    3560:	7063      	strb	r3, [r4, #1]
    3562:	1e5a      	subs	r2, r3, #1
    3564:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    3566:	4295      	cmp	r5, r2
    3568:	dd0b      	ble.n	3582 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    356a:	7830      	ldrb	r0, [r6, #0]
    356c:	2800      	cmp	r0, #0
    356e:	d008      	beq.n	3582 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    3570:	3601      	adds	r6, #1
    3572:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    3574:	429d      	cmp	r5, r3
    3576:	d003      	beq.n	3580 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    3578:	54e1      	strb	r1, [r4, r3]
    357a:	3302      	adds	r3, #2
    357c:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    357e:	e7f0      	b.n	3562 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    3580:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    3582:	0021      	movs	r1, r4
    3584:	4803      	ldr	r0, [pc, #12]	; (3594 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    3586:	f7ff ffab 	bl	34e0 <_ZN14USBDeviceClass11sendControlEPKvm>
    358a:	1e43      	subs	r3, r0, #1
    358c:	4198      	sbcs	r0, r3
    358e:	b2c0      	uxtb	r0, r0
}
    3590:	46bd      	mov	sp, r7
    3592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3594:	20000398 	.word	0x20000398

00003598 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    3598:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    359a:	2700      	movs	r7, #0
	_dry_run = true;
    359c:	2601      	movs	r6, #1
{
    359e:	b087      	sub	sp, #28
	_dry_run = true;
    35a0:	4b1e      	ldr	r3, [pc, #120]	; (361c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    35a2:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    35a4:	a902      	add	r1, sp, #8
	_dry_run = true;
    35a6:	701e      	strb	r6, [r3, #0]
{
    35a8:	0005      	movs	r5, r0
	uint32_t total = 0;
    35aa:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    35ac:	f7ff fc5e 	bl	2e6c <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    35b0:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    35b2:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    35b4:	2209      	movs	r2, #9
    35b6:	0039      	movs	r1, r7
    35b8:	0020      	movs	r0, r4
    35ba:	f009 fa85 	bl	cac8 <memset>
    35be:	2309      	movs	r3, #9
    35c0:	7023      	strb	r3, [r4, #0]
    35c2:	2302      	movs	r3, #2
    35c4:	7063      	strb	r3, [r4, #1]
    35c6:	339e      	adds	r3, #158	; 0x9e
    35c8:	71e3      	strb	r3, [r4, #7]
    35ca:	335a      	adds	r3, #90	; 0x5a
    35cc:	7223      	strb	r3, [r4, #8]
    35ce:	9b02      	ldr	r3, [sp, #8]
    35d0:	7166      	strb	r6, [r4, #5]
    35d2:	3309      	adds	r3, #9
    35d4:	8063      	strh	r3, [r4, #2]
    35d6:	466b      	mov	r3, sp
    35d8:	791b      	ldrb	r3, [r3, #4]
    35da:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    35dc:	4b0f      	ldr	r3, [pc, #60]	; (361c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    35de:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    35e0:	9b00      	ldr	r3, [sp, #0]
    35e2:	2b09      	cmp	r3, #9
    35e4:	d107      	bne.n	35f6 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    35e6:	001a      	movs	r2, r3
    35e8:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    35ea:	0028      	movs	r0, r5
    35ec:	f7ff ff78 	bl	34e0 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    35f0:	2001      	movs	r0, #1
    35f2:	b007      	add	sp, #28
    35f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    35f6:	4b0a      	ldr	r3, [pc, #40]	; (3620 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    35f8:	2209      	movs	r2, #9
		_pack_message = true;
    35fa:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    35fc:	4e09      	ldr	r6, [pc, #36]	; (3624 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    35fe:	0021      	movs	r1, r4
    3600:	0028      	movs	r0, r5
	total = 0;
    3602:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    3604:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    3606:	f7ff ff6b 	bl	34e0 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    360a:	a902      	add	r1, sp, #8
    360c:	0028      	movs	r0, r5
    360e:	f7ff fc2d 	bl	2e6c <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    3612:	4b03      	ldr	r3, [pc, #12]	; (3620 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    3614:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    3616:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    3618:	4903      	ldr	r1, [pc, #12]	; (3628 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    361a:	e7e6      	b.n	35ea <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    361c:	20000744 	.word	0x20000744
    3620:	20000845 	.word	0x20000845
    3624:	20000846 	.word	0x20000846
    3628:	20000745 	.word	0x20000745

0000362c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    362c:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    362e:	78ce      	ldrb	r6, [r1, #3]
{
    3630:	b092      	sub	sp, #72	; 0x48
    3632:	0005      	movs	r5, r0
    3634:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    3636:	2e02      	cmp	r6, #2
    3638:	d108      	bne.n	364c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    363a:	88c9      	ldrh	r1, [r1, #6]
    363c:	482b      	ldr	r0, [pc, #172]	; (36ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    363e:	f7ff ffab 	bl	3598 <_ZN14USBDeviceClass17sendConfigurationEm>
    3642:	1e43      	subs	r3, r0, #1
    3644:	4198      	sbcs	r0, r3
    3646:	b2c0      	uxtb	r0, r0
}
    3648:	b012      	add	sp, #72	; 0x48
    364a:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    364c:	f002 f82a 	bl	56a4 <_Z12PluggableUSBv>
    3650:	0021      	movs	r1, r4
    3652:	f001 fff7 	bl	5644 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    3656:	2800      	cmp	r0, #0
    3658:	d003      	beq.n	3662 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    365a:	17c3      	asrs	r3, r0, #31
    365c:	1a18      	subs	r0, r3, r0
    365e:	0fc0      	lsrs	r0, r0, #31
    3660:	e7f2      	b.n	3648 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    3662:	2e01      	cmp	r6, #1
    3664:	d10b      	bne.n	367e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (*desc_addr > setup.wLength) {
    3666:	88e2      	ldrh	r2, [r4, #6]
    3668:	4921      	ldr	r1, [pc, #132]	; (36f0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
    366a:	2a11      	cmp	r2, #17
    366c:	dc10      	bgt.n	3690 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    366e:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    3670:	2a00      	cmp	r2, #0
    3672:	d00d      	beq.n	3690 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    3674:	0028      	movs	r0, r5
    3676:	f7ff ff33 	bl	34e0 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    367a:	2001      	movs	r0, #1
    367c:	e7e4      	b.n	3648 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    367e:	2e03      	cmp	r6, #3
    3680:	d1e2      	bne.n	3648 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    3682:	78a3      	ldrb	r3, [r4, #2]
    3684:	2b00      	cmp	r3, #0
    3686:	d105      	bne.n	3694 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    3688:	88e2      	ldrh	r2, [r4, #6]
    368a:	491a      	ldr	r1, [pc, #104]	; (36f4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    368c:	2a03      	cmp	r2, #3
    368e:	ddee      	ble.n	366e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    3690:	780a      	ldrb	r2, [r1, #0]
    3692:	e7ef      	b.n	3674 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    3694:	2b02      	cmp	r3, #2
    3696:	d105      	bne.n	36a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    3698:	79a2      	ldrb	r2, [r4, #6]
    369a:	4917      	ldr	r1, [pc, #92]	; (36f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    369c:	0028      	movs	r0, r5
    369e:	f7ff ff49 	bl	3534 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    36a2:	e7d1      	b.n	3648 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    36a4:	2b01      	cmp	r3, #1
    36a6:	d102      	bne.n	36ae <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    36a8:	79a2      	ldrb	r2, [r4, #6]
    36aa:	4914      	ldr	r1, [pc, #80]	; (36fc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    36ac:	e7f6      	b.n	369c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    36ae:	2b03      	cmp	r3, #3
    36b0:	d1ca      	bne.n	3648 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    36b2:	4b13      	ldr	r3, [pc, #76]	; (3700 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    36b4:	a901      	add	r1, sp, #4
    36b6:	6818      	ldr	r0, [r3, #0]
    36b8:	f7ff f9d0 	bl	2a5c <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    36bc:	4b11      	ldr	r3, [pc, #68]	; (3704 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    36be:	a903      	add	r1, sp, #12
    36c0:	6818      	ldr	r0, [r3, #0]
    36c2:	f7ff f9cb 	bl	2a5c <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    36c6:	4b10      	ldr	r3, [pc, #64]	; (3708 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    36c8:	a905      	add	r1, sp, #20
    36ca:	6818      	ldr	r0, [r3, #0]
    36cc:	f7ff f9c6 	bl	2a5c <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    36d0:	4b0e      	ldr	r3, [pc, #56]	; (370c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    36d2:	a907      	add	r1, sp, #28
    36d4:	6818      	ldr	r0, [r3, #0]
    36d6:	f7ff f9c1 	bl	2a5c <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    36da:	f001 ffe3 	bl	56a4 <_Z12PluggableUSBv>
    36de:	a909      	add	r1, sp, #36	; 0x24
    36e0:	f001 ffc0 	bl	5664 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    36e4:	79a2      	ldrb	r2, [r4, #6]
    36e6:	a901      	add	r1, sp, #4
    36e8:	e7d8      	b.n	369c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    36ea:	46c0      	nop			; (mov r8, r8)
    36ec:	20000398 	.word	0x20000398
    36f0:	00010d2e 	.word	0x00010d2e
    36f4:	00010d1a 	.word	0x00010d1a
    36f8:	00010d0c 	.word	0x00010d0c
    36fc:	00010d1e 	.word	0x00010d1e
    3700:	0080a00c 	.word	0x0080a00c
    3704:	0080a040 	.word	0x0080a040
    3708:	0080a044 	.word	0x0080a044
    370c:	0080a048 	.word	0x0080a048

00003710 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    3710:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3712:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    3714:	7848      	ldrb	r0, [r1, #1]
{
    3716:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    3718:	280b      	cmp	r0, #11
    371a:	d811      	bhi.n	3740 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    371c:	f006 f860 	bl	97e0 <__gnu_thumb1_case_uqi>
    3720:	2e101d06 	.word	0x2e101d06
    3724:	70484310 	.word	0x70484310
    3728:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    372c:	7809      	ldrb	r1, [r1, #0]
    372e:	aa01      	add	r2, sp, #4
    3730:	2900      	cmp	r1, #0
    3732:	d107      	bne.n	3744 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    3734:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    3736:	7011      	strb	r1, [r2, #0]
    3738:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    373a:	0030      	movs	r0, r6
    373c:	f7ff feac 	bl	3498 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    3740:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    3742:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    3744:	2300      	movs	r3, #0
    3746:	7013      	strb	r3, [r2, #0]
    3748:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    374a:	4b2e      	ldr	r3, [pc, #184]	; (3804 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    374c:	781b      	ldrb	r3, [r3, #0]
    374e:	2b01      	cmp	r3, #1
    3750:	d100      	bne.n	3754 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    3752:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    3754:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    3756:	2100      	movs	r1, #0
    3758:	e7ef      	b.n	373a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    375a:	788a      	ldrb	r2, [r1, #2]
    375c:	2300      	movs	r3, #0
    375e:	2a01      	cmp	r2, #1
    3760:	d104      	bne.n	376c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    3762:	aa01      	add	r2, sp, #4
    3764:	7013      	strb	r3, [r2, #0]
    3766:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    3768:	4b27      	ldr	r3, [pc, #156]	; (3808 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    376a:	e7ef      	b.n	374c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    376c:	4a25      	ldr	r2, [pc, #148]	; (3804 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    376e:	7013      	strb	r3, [r2, #0]
    3770:	4a26      	ldr	r2, [pc, #152]	; (380c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3772:	6993      	ldr	r3, [r2, #24]
    3774:	0b9b      	lsrs	r3, r3, #14
    3776:	039b      	lsls	r3, r3, #14
    3778:	6193      	str	r3, [r2, #24]
    377a:	e7e1      	b.n	3740 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    377c:	788c      	ldrb	r4, [r1, #2]
    377e:	2c01      	cmp	r4, #1
    3780:	d106      	bne.n	3790 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    3782:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    3784:	4b20      	ldr	r3, [pc, #128]	; (3808 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    3786:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    3788:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    378a:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    378c:	0023      	movs	r3, r4
    378e:	e7d4      	b.n	373a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    3790:	2c00      	cmp	r4, #0
    3792:	d108      	bne.n	37a6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    3794:	2001      	movs	r0, #1
    3796:	4b1b      	ldr	r3, [pc, #108]	; (3804 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    3798:	4a1c      	ldr	r2, [pc, #112]	; (380c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    379a:	7018      	strb	r0, [r3, #0]
    379c:	6993      	ldr	r3, [r2, #24]
    379e:	0b9b      	lsrs	r3, r3, #14
    37a0:	039b      	lsls	r3, r3, #14
    37a2:	6193      	str	r3, [r2, #24]
			return true;
    37a4:	e7cd      	b.n	3742 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    37a6:	78a9      	ldrb	r1, [r5, #2]
    37a8:	0030      	movs	r0, r6
    37aa:	f7ff fc11 	bl	2fd0 <_ZN14USBDeviceClass10setAddressEm>
    37ae:	e7c7      	b.n	3740 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    37b0:	0030      	movs	r0, r6
    37b2:	f7ff ff3b 	bl	362c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    37b6:	e7c4      	b.n	3742 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    37b8:	2301      	movs	r3, #1
    37ba:	4a15      	ldr	r2, [pc, #84]	; (3810 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    37bc:	e7cb      	b.n	3756 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    37be:	780b      	ldrb	r3, [r1, #0]
			return false;
    37c0:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    37c2:	06db      	lsls	r3, r3, #27
    37c4:	d1bd      	bne.n	3742 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    37c6:	0030      	movs	r0, r6
    37c8:	f7ff fcbc 	bl	3144 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    37cc:	202a      	movs	r0, #42	; 0x2a
    37ce:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    37d0:	78aa      	ldrb	r2, [r5, #2]
    37d2:	4b0f      	ldr	r3, [pc, #60]	; (3810 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    37d4:	30ff      	adds	r0, #255	; 0xff
    37d6:	601a      	str	r2, [r3, #0]
    37d8:	4a0c      	ldr	r2, [pc, #48]	; (380c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    37da:	6813      	ldr	r3, [r2, #0]
    37dc:	5c1c      	ldrb	r4, [r3, r0]
    37de:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    37e0:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    37e2:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    37e4:	34ff      	adds	r4, #255	; 0xff
    37e6:	5d19      	ldrb	r1, [r3, r4]
    37e8:	3829      	subs	r0, #41	; 0x29
    37ea:	38ff      	subs	r0, #255	; 0xff
    37ec:	4301      	orrs	r1, r0
    37ee:	5519      	strb	r1, [r3, r4]
    37f0:	e7d4      	b.n	379c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    37f2:	2301      	movs	r3, #1
    37f4:	4a07      	ldr	r2, [pc, #28]	; (3814 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    37f6:	e7ae      	b.n	3756 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    37f8:	788a      	ldrb	r2, [r1, #2]
    37fa:	4b06      	ldr	r3, [pc, #24]	; (3814 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    37fc:	601a      	str	r2, [r3, #0]
    37fe:	e7b7      	b.n	3770 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    3800:	2000      	movs	r0, #0
    3802:	e79e      	b.n	3742 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    3804:	200003ba 	.word	0x200003ba
    3808:	200003c2 	.word	0x200003c2
    380c:	20000850 	.word	0x20000850
    3810:	20000848 	.word	0x20000848
    3814:	2000084c 	.word	0x2000084c

00003818 <_ZN14USBDeviceClass10ISRHandlerEv>:
}

#else
void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    3818:	4b4c      	ldr	r3, [pc, #304]	; (394c <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
{
    381a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    381c:	781c      	ldrb	r4, [r3, #0]
{
    381e:	0007      	movs	r7, r0
	if (_pack_message == true) {
    3820:	2c00      	cmp	r4, #0
    3822:	d000      	beq.n	3826 <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    3824:	e091      	b.n	394a <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    3826:	4e4a      	ldr	r6, [pc, #296]	; (3950 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    3828:	6833      	ldr	r3, [r6, #0]
    382a:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    382c:	071b      	lsls	r3, r3, #28
    382e:	d50e      	bpl.n	384e <_ZN14USBDeviceClass10ISRHandlerEv+0x36>
    3830:	0021      	movs	r1, r4
    3832:	0020      	movs	r0, r4
    3834:	f7ff f924 	bl	2a80 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    3838:	6832      	ldr	r2, [r6, #0]
    383a:	2310      	movs	r3, #16
    383c:	0011      	movs	r1, r2
    383e:	31ff      	adds	r1, #255	; 0xff
    3840:	7a88      	ldrb	r0, [r1, #10]
    3842:	4303      	orrs	r3, r0
    3844:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    3846:	4b43      	ldr	r3, [pc, #268]	; (3954 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    3848:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    384a:	2308      	movs	r3, #8
    384c:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    384e:	6833      	ldr	r3, [r6, #0]
    3850:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    3852:	0752      	lsls	r2, r2, #29
    3854:	d51f      	bpl.n	3896 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    3856:	2204      	movs	r2, #4
    3858:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    385a:	4a3f      	ldr	r2, [pc, #252]	; (3958 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    385c:	7813      	ldrb	r3, [r2, #0]
    385e:	2b00      	cmp	r3, #0
    3860:	d00a      	beq.n	3878 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
			txLEDPulse--;
    3862:	7813      	ldrb	r3, [r2, #0]
    3864:	3b01      	subs	r3, #1
    3866:	b2db      	uxtb	r3, r3
    3868:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    386a:	7813      	ldrb	r3, [r2, #0]
    386c:	2b00      	cmp	r3, #0
    386e:	d103      	bne.n	3878 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
				digitalWrite(PIN_LED_TXL, HIGH);
    3870:	2101      	movs	r1, #1
    3872:	2015      	movs	r0, #21
    3874:	f000 f9f0 	bl	3c58 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    3878:	4a38      	ldr	r2, [pc, #224]	; (395c <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    387a:	7813      	ldrb	r3, [r2, #0]
    387c:	2b00      	cmp	r3, #0
    387e:	d00a      	beq.n	3896 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
			rxLEDPulse--;
    3880:	7813      	ldrb	r3, [r2, #0]
    3882:	3b01      	subs	r3, #1
    3884:	b2db      	uxtb	r3, r3
    3886:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    3888:	7813      	ldrb	r3, [r2, #0]
    388a:	2b00      	cmp	r3, #0
    388c:	d103      	bne.n	3896 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
				digitalWrite(PIN_LED_RXL, HIGH);
    388e:	2101      	movs	r1, #1
    3890:	2014      	movs	r0, #20
    3892:	f000 f9e1 	bl	3c58 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    3896:	6833      	ldr	r3, [r6, #0]
    3898:	33ff      	adds	r3, #255	; 0xff
    389a:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    389c:	06d2      	lsls	r2, r2, #27
    389e:	d520      	bpl.n	38e2 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    38a0:	2210      	movs	r2, #16
    38a2:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    38a4:	7959      	ldrb	r1, [r3, #5]
    38a6:	3230      	adds	r2, #48	; 0x30
    38a8:	430a      	orrs	r2, r1
    38aa:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    38ac:	2360      	movs	r3, #96	; 0x60
    38ae:	492c      	ldr	r1, [pc, #176]	; (3960 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    38b0:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    38b2:	780a      	ldrb	r2, [r1, #0]
    38b4:	421a      	tst	r2, r3
    38b6:	d135      	bne.n	3924 <_ZN14USBDeviceClass10ISRHandlerEv+0x10c>
			ok = handleStandardSetup(*setup);
    38b8:	f7ff ff2a 	bl	3710 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    38bc:	2800      	cmp	r0, #0
    38be:	d034      	beq.n	392a <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    38c0:	2280      	movs	r2, #128	; 0x80
    38c2:	6833      	ldr	r3, [r6, #0]
    38c4:	4252      	negs	r2, r2
    38c6:	33ff      	adds	r3, #255	; 0xff
    38c8:	7999      	ldrb	r1, [r3, #6]
    38ca:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    38cc:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    38ce:	6833      	ldr	r3, [r6, #0]
    38d0:	33ff      	adds	r3, #255	; 0xff
    38d2:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    38d4:	0652      	lsls	r2, r2, #25
    38d6:	d504      	bpl.n	38e2 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    38d8:	2240      	movs	r2, #64	; 0x40
    38da:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    38dc:	7a59      	ldrb	r1, [r3, #9]
    38de:	430a      	orrs	r2, r1
    38e0:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    38e2:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

        uint8_t i = (USB_EPT_NUM - 1);
        uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    38e4:	2507      	movs	r5, #7
    38e6:	8c1c      	ldrh	r4, [r3, #32]
    38e8:	2301      	movs	r3, #1
    38ea:	439c      	bics	r4, r3
    38ec:	b2e4      	uxtb	r4, r4
        while (ept_int && i)
        {
                // Check if endpoint has a pending interrupt
                if ((ept_int & (1 << i)) != 0)
    38ee:	9301      	str	r3, [sp, #4]
    38f0:	b2e9      	uxtb	r1, r5
        while (ept_int && i)
    38f2:	2c00      	cmp	r4, #0
    38f4:	d029      	beq.n	394a <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
    38f6:	2d00      	cmp	r5, #0
    38f8:	d027      	beq.n	394a <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
                if ((ept_int & (1 << i)) != 0)
    38fa:	0023      	movs	r3, r4
    38fc:	412b      	asrs	r3, r5
    38fe:	9a01      	ldr	r2, [sp, #4]
    3900:	4213      	tst	r3, r2
    3902:	d00d      	beq.n	3920 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    3904:	002b      	movs	r3, r5
    3906:	6832      	ldr	r2, [r6, #0]
    3908:	3308      	adds	r3, #8
    390a:	015b      	lsls	r3, r3, #5
    390c:	18d3      	adds	r3, r2, r3
    390e:	79da      	ldrb	r2, [r3, #7]
                {
                        // Endpoint Transfer Complete (0/1) Interrupt
                        if (usbd.epBank0IsTransferComplete(i) ||
    3910:	07d2      	lsls	r2, r2, #31
    3912:	d411      	bmi.n	3938 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    3914:	79db      	ldrb	r3, [r3, #7]
    3916:	079b      	lsls	r3, r3, #30
    3918:	d40e      	bmi.n	3938 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
                                        epHandlers[i]->handleEndpoint();
                                } else {
                                        handleEndpoint(i);
                                }
                        }
                        ept_int &= ~(1 << i);
    391a:	9b01      	ldr	r3, [sp, #4]
    391c:	40ab      	lsls	r3, r5
    391e:	439c      	bics	r4, r3
    3920:	3d01      	subs	r5, #1
    3922:	e7e5      	b.n	38f0 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
			ok = handleClassInterfaceSetup(*setup);
    3924:	f7ff fb78 	bl	3018 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    3928:	e7c8      	b.n	38bc <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    392a:	2220      	movs	r2, #32
    392c:	4b0d      	ldr	r3, [pc, #52]	; (3964 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    392e:	e7cd      	b.n	38cc <_ZN14USBDeviceClass10ISRHandlerEv+0xb4>
                                        epHandlers[i]->handleEndpoint();
    3930:	6803      	ldr	r3, [r0, #0]
    3932:	681b      	ldr	r3, [r3, #0]
    3934:	4798      	blx	r3
    3936:	e7f0      	b.n	391a <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                                if (epHandlers[i]) {
    3938:	4b0b      	ldr	r3, [pc, #44]	; (3968 <_ZN14USBDeviceClass10ISRHandlerEv+0x150>)
    393a:	00aa      	lsls	r2, r5, #2
    393c:	58d0      	ldr	r0, [r2, r3]
    393e:	2800      	cmp	r0, #0
    3940:	d1f6      	bne.n	3930 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
                                        handleEndpoint(i);
    3942:	0038      	movs	r0, r7
    3944:	f7ff faa8 	bl	2e98 <_ZN14USBDeviceClass14handleEndpointEh>
    3948:	e7e7      	b.n	391a <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                }
                i--;
        }
}
    394a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    394c:	20000845 	.word	0x20000845
    3950:	20000850 	.word	0x20000850
    3954:	20000848 	.word	0x20000848
    3958:	200003b9 	.word	0x200003b9
    395c:	200003b8 	.word	0x200003b8
    3960:	20000584 	.word	0x20000584
    3964:	410000ff 	.word	0x410000ff
    3968:	2000039c 	.word	0x2000039c

0000396c <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    396c:	b510      	push	{r4, lr}
  USBDevice.ISRHandler();
    396e:	4802      	ldr	r0, [pc, #8]	; (3978 <UDD_Handler+0xc>)
    3970:	f7ff ff52 	bl	3818 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    3974:	bd10      	pop	{r4, pc}
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	20000398 	.word	0x20000398

0000397c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    397c:	2282      	movs	r2, #130	; 0x82
    397e:	4b02      	ldr	r3, [pc, #8]	; (3988 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    3980:	05d2      	lsls	r2, r2, #23
    3982:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    3984:	4770      	bx	lr
    3986:	46c0      	nop			; (mov r8, r8)
    3988:	20000850 	.word	0x20000850

0000398c <init>:
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    398c:	20c0      	movs	r0, #192	; 0xc0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    398e:	491a      	ldr	r1, [pc, #104]	; (39f8 <init+0x6c>)
    3990:	4b1a      	ldr	r3, [pc, #104]	; (39fc <init+0x70>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3992:	4a1b      	ldr	r2, [pc, #108]	; (3a00 <init+0x74>)
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz (optionally 120MHz for D51).
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    3994:	b510      	push	{r4, lr}
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3996:	604b      	str	r3, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3998:	6a13      	ldr	r3, [r2, #32]
    399a:	0600      	lsls	r0, r0, #24
    399c:	021b      	lsls	r3, r3, #8
    399e:	0a1b      	lsrs	r3, r3, #8
    39a0:	4303      	orrs	r3, r0
    39a2:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    39a4:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    39a6:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    39a8:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    39aa:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    39ac:	2180      	movs	r1, #128	; 0x80
    39ae:	6a13      	ldr	r3, [r2, #32]
    39b0:	0609      	lsls	r1, r1, #24
    39b2:	021b      	lsls	r3, r3, #8
    39b4:	0a1b      	lsrs	r3, r3, #8
    39b6:	430b      	orrs	r3, r1
#elif (SAML21 || SAMC21)
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_SERCOM0 | MCLK_APBCMASK_SERCOM1 | MCLK_APBCMASK_SERCOM2 | MCLK_APBCMASK_SERCOM3 | MCLK_APBCMASK_SERCOM4 ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    39b8:	2106      	movs	r1, #6
    39ba:	6213      	str	r3, [r2, #32]
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;
    39bc:	4b11      	ldr	r3, [pc, #68]	; (3a04 <init+0x78>)
    39be:	69da      	ldr	r2, [r3, #28]
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    39c0:	6a18      	ldr	r0, [r3, #32]
    39c2:	4301      	orrs	r1, r0
    39c4:	6219      	str	r1, [r3, #32]
  regAPBCMASK |= MCLK_APBCMASK_TCC0 | MCLK_APBCMASK_TCC1 | MCLK_APBCMASK_TCC2 | MCLK_APBCMASK_TC0 | MCLK_APBCMASK_TC1 | MCLK_APBCMASK_TC2 | MCLK_APBCMASK_TC3 | MCLK_APBCMASK_TC4 ;
  #endif

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_DAC ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_ADC;	// On the SAML, ADC is on the low power bridge
    39c6:	2108      	movs	r1, #8
    39c8:	6a18      	ldr	r0, [r3, #32]
    39ca:	4301      	orrs	r1, r0
    39cc:	6219      	str	r1, [r3, #32]
  #elif (SAMC21)
  regAPBCMASK |= MCLK_APBCMASK_ADC0 | MCLK_APBCMASK_ADC1 | MCLK_APBCMASK_DAC ;
  #endif

  MCLK->APBCMASK.reg |= regAPBCMASK ;
    39ce:	69d9      	ldr	r1, [r3, #28]
    39d0:	4311      	orrs	r1, r2
    39d2:	4a0d      	ldr	r2, [pc, #52]	; (3a08 <init+0x7c>)
    39d4:	430a      	orrs	r2, r1
    39d6:	61da      	str	r2, [r3, #28]
#endif

  // Setup all pins (digital and analog) in STARTUP mode (enable INEN and set default pull direction to pullup (pullup will not be enabled))
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, PIO_STARTUP ) ;
    39d8:	0020      	movs	r0, r4
    39da:	211a      	movs	r1, #26
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    39dc:	3401      	adds	r4, #1
    pinMode( ul, PIO_STARTUP ) ;
    39de:	f000 f937 	bl	3c50 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    39e2:	2c24      	cmp	r4, #36	; 0x24
    39e4:	d1f8      	bne.n	39d8 <init+0x4c>
  PORT->Group[0].OUTSET.reg = (uint32_t)(1<<PIN_PA25G_USB_DP);
  PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].reg = (PORT_PINCFG_PULLEN | PORT_PINCFG_INEN);
#endif

#if !defined(ADC_NO_INIT_IF_UNUSED)
  initADC();         // Initialize Analog Controller
    39e6:	f000 f89f 	bl	3b28 <initADC>
  analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    39ea:	2005      	movs	r0, #5
    39ec:	f000 f83c 	bl	3a68 <analogReference>
#endif

#if !defined(DAC_NO_INIT_IF_UNUSED)
  initDAC();         // Initialize DAC
    39f0:	f000 f816 	bl	3a20 <initDAC>
#endif
}
    39f4:	bd10      	pop	{r4, pc}
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	e000e010 	.word	0xe000e010
    39fc:	0000bb7f 	.word	0x0000bb7f
    3a00:	e000ed00 	.word	0xe000ed00
    3a04:	40000400 	.word	0x40000400
    3a08:	000017ff 	.word	0x000017ff

00003a0c <mapResolution>:
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    3a0c:	4291      	cmp	r1, r2
    3a0e:	d002      	beq.n	3a16 <mapResolution+0xa>
    return value;
  }
  if (from > to) {
    3a10:	d902      	bls.n	3a18 <mapResolution+0xc>
    return value >> (from-to);
    3a12:	1a8a      	subs	r2, r1, r2
    3a14:	40d0      	lsrs	r0, r2
  }
  return value << (to-from);
}
    3a16:	4770      	bx	lr
  return value << (to-from);
    3a18:	1a52      	subs	r2, r2, r1
    3a1a:	4090      	lsls	r0, r2
    3a1c:	e7fb      	b.n	3a16 <mapResolution+0xa>
	...

00003a20 <initDAC>:
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    3a20:	490c      	ldr	r1, [pc, #48]	; (3a54 <initDAC+0x34>)
    3a22:	4b0d      	ldr	r3, [pc, #52]	; (3a58 <initDAC+0x38>)
    3a24:	684a      	ldr	r2, [r1, #4]
    3a26:	421a      	tst	r2, r3
    3a28:	d1fc      	bne.n	3a24 <initDAC+0x4>
    GCLK->PCHCTRL[GCM_DAC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    3a2a:	2340      	movs	r3, #64	; 0x40
    3a2c:	4a0b      	ldr	r2, [pc, #44]	; (3a5c <initDAC+0x3c>)
    3a2e:	6053      	str	r3, [r2, #4]
  while ( (GCLK->PCHCTRL[GCM_DAC].reg & GCLK_PCHCTRL_CHEN) == 0 );      // wait for sync
    3a30:	6851      	ldr	r1, [r2, #4]
    3a32:	4219      	tst	r1, r3
    3a34:	d0fc      	beq.n	3a30 <initDAC+0x10>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3a36:	223f      	movs	r2, #63	; 0x3f
    3a38:	4b09      	ldr	r3, [pc, #36]	; (3a60 <initDAC+0x40>)
    3a3a:	6899      	ldr	r1, [r3, #8]
    3a3c:	4211      	tst	r1, r2
    3a3e:	d1fc      	bne.n	3a3a <initDAC+0x1a>
      DAC->CTRLB.reg = DAC_CTRLB_REFSEL_VDDANA;
    3a40:	2202      	movs	r2, #2
    3a42:	705a      	strb	r2, [r3, #1]
    DAC->DACCTRL[0].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    3a44:	22c2      	movs	r2, #194	; 0xc2
    3a46:	0092      	lsls	r2, r2, #2
    3a48:	819a      	strh	r2, [r3, #12]
    DAC->DACCTRL[1].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    3a4a:	81da      	strh	r2, [r3, #14]
  DACinitialized = 1;
    3a4c:	2201      	movs	r2, #1
    3a4e:	4b05      	ldr	r3, [pc, #20]	; (3a64 <initDAC+0x44>)
    3a50:	701a      	strb	r2, [r3, #0]
}
    3a52:	4770      	bx	lr
    3a54:	40001800 	.word	0x40001800
    3a58:	000007fd 	.word	0x000007fd
    3a5c:	400018fc 	.word	0x400018fc
    3a60:	42003000 	.word	0x42003000
    3a64:	20000955 	.word	0x20000955

00003a68 <analogReference>:
 * External Reference should be between 1V and VDDANA-0.6V=2.7V (1V and VDDANA-0.4V=2.9V for D51)
 *
 * Warning : The maximum IO voltage is Vcc (up to 3.6 volts for the SAMD/SAML, 5V for the SAMC)
 */
void analogReference(eAnalogReference mode)
{
    3a68:	b510      	push	{r4, lr}
  if (!ADCinitialized) {
    3a6a:	4b2a      	ldr	r3, [pc, #168]	; (3b14 <analogReference+0xac>)
{
    3a6c:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    3a6e:	781b      	ldrb	r3, [r3, #0]
    3a70:	2b00      	cmp	r3, #0
    3a72:	d104      	bne.n	3a7e <analogReference+0x16>
    REFinitialized = 1; // to prevent re-entry
    3a74:	2201      	movs	r2, #1
    3a76:	4b28      	ldr	r3, [pc, #160]	; (3b18 <analogReference+0xb0>)
    3a78:	701a      	strb	r2, [r3, #0]
    initADC();
    3a7a:	f000 f855 	bl	3b28 <initADC>
  }

#if (!SAMD11C)
  #if defined(REFA_PIN)
    if (mode == AR_EXTERNAL_REFA) {
    3a7e:	2c03      	cmp	r4, #3
    3a80:	d106      	bne.n	3a90 <analogReference+0x28>
#endif

#if (SAMD21 || SAMD11 || SAML21 || SAMD51)
  #if defined(REFB_PIN)
    if (mode == AR_EXTERNAL_REFB) {
      if ( pinPeripheral(REFB_PIN, PIO_ANALOG_REF) != RET_STATUS_OK ) {
    3a82:	2107      	movs	r1, #7
    3a84:	0020      	movs	r0, r4
    3a86:	f000 f951 	bl	3d2c <pinPeripheral>
    3a8a:	2800      	cmp	r0, #0
    3a8c:	d009      	beq.n	3aa2 <analogReference+0x3a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
#endif
  syncADC();

  REFinitialized = 1;
}
    3a8e:	bd10      	pop	{r4, pc}
    if (mode == AR_EXTERNAL_REFB) {
    3a90:	2c04      	cmp	r4, #4
    3a92:	d0f6      	beq.n	3a82 <analogReference+0x1a>
  if (mode == 0) {		// Set to 1.0V for the SAML, 1.024V for the SAMC
    3a94:	2c00      	cmp	r4, #0
    3a96:	d12b      	bne.n	3af0 <analogReference+0x88>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3a98:	4a20      	ldr	r2, [pc, #128]	; (3b1c <analogReference+0xb4>)
    3a9a:	4921      	ldr	r1, [pc, #132]	; (3b20 <analogReference+0xb8>)
    3a9c:	69d3      	ldr	r3, [r2, #28]
    3a9e:	400b      	ands	r3, r1
    3aa0:	61d3      	str	r3, [r2, #28]
    ADC->REFCTRL.bit.REFSEL = mode;
    3aa2:	210f      	movs	r1, #15
    3aa4:	4b1f      	ldr	r3, [pc, #124]	; (3b24 <analogReference+0xbc>)
    3aa6:	400c      	ands	r4, r1
    3aa8:	789a      	ldrb	r2, [r3, #2]
    3aaa:	438a      	bics	r2, r1
    3aac:	4314      	orrs	r4, r2
    3aae:	709c      	strb	r4, [r3, #2]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3ab0:	8c1a      	ldrh	r2, [r3, #32]
    3ab2:	0552      	lsls	r2, r2, #21
    3ab4:	d1fc      	bne.n	3ab0 <analogReference+0x48>
  ADC->CTRLA.bit.ENABLE = 0x01;              // Enable ADC
    3ab6:	7819      	ldrb	r1, [r3, #0]
    3ab8:	3202      	adds	r2, #2
    3aba:	430a      	orrs	r2, r1
    3abc:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3abe:	8c1a      	ldrh	r2, [r3, #32]
    3ac0:	0552      	lsls	r2, r2, #21
    3ac2:	d1fc      	bne.n	3abe <analogReference+0x56>
  ADC->SWTRIG.bit.START = 1;
    3ac4:	7e19      	ldrb	r1, [r3, #24]
    3ac6:	3202      	adds	r2, #2
    3ac8:	430a      	orrs	r2, r1
    3aca:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3acc:	8c1a      	ldrh	r2, [r3, #32]
    3ace:	0552      	lsls	r2, r2, #21
    3ad0:	d1fc      	bne.n	3acc <analogReference+0x64>
  while (ADC->INTFLAG.bit.RESRDY == 0);      // Waiting for conversion to complete
    3ad2:	799a      	ldrb	r2, [r3, #6]
    3ad4:	07d2      	lsls	r2, r2, #31
    3ad6:	d5fc      	bpl.n	3ad2 <analogReference+0x6a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    3ad8:	2102      	movs	r1, #2
  valueRead = ADC->RESULT.reg;               // Dummy read (will also clear the Data Ready flag)
    3ada:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    3adc:	781a      	ldrb	r2, [r3, #0]
    3ade:	438a      	bics	r2, r1
    3ae0:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3ae2:	8c1a      	ldrh	r2, [r3, #32]
    3ae4:	0552      	lsls	r2, r2, #21
    3ae6:	d1fc      	bne.n	3ae2 <analogReference+0x7a>
  REFinitialized = 1;
    3ae8:	4b0b      	ldr	r3, [pc, #44]	; (3b18 <analogReference+0xb0>)
    3aea:	3201      	adds	r2, #1
    3aec:	701a      	strb	r2, [r3, #0]
    3aee:	e7ce      	b.n	3a8e <analogReference+0x26>
  } else if (mode >= AR_INTREF_1V0) {		// Values starting at AR_INTREF_1V0 are used for the Supply Controller reference (AR_INTREF)
    3af0:	2c05      	cmp	r4, #5
    3af2:	d9d6      	bls.n	3aa2 <analogReference+0x3a>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3af4:	4b09      	ldr	r3, [pc, #36]	; (3b1c <analogReference+0xb4>)
    3af6:	490a      	ldr	r1, [pc, #40]	; (3b20 <analogReference+0xb8>)
    3af8:	69da      	ldr	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3afa:	3c06      	subs	r4, #6
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3afc:	400a      	ands	r2, r1
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3afe:	21f0      	movs	r1, #240	; 0xf0
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3b00:	61da      	str	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3b02:	69da      	ldr	r2, [r3, #28]
    3b04:	0424      	lsls	r4, r4, #16
    3b06:	0309      	lsls	r1, r1, #12
    3b08:	400c      	ands	r4, r1
    3b0a:	4314      	orrs	r4, r2
    3b0c:	61dc      	str	r4, [r3, #28]
    mode = 0;
    3b0e:	2400      	movs	r4, #0
    3b10:	e7c7      	b.n	3aa2 <analogReference+0x3a>
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	20000954 	.word	0x20000954
    3b18:	20000956 	.word	0x20000956
    3b1c:	40001400 	.word	0x40001400
    3b20:	fff0ffff 	.word	0xfff0ffff
    3b24:	43000c00 	.word	0x43000c00

00003b28 <initADC>:
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    3b28:	4b1e      	ldr	r3, [pc, #120]	; (3ba4 <initADC+0x7c>)
    3b2a:	2107      	movs	r1, #7
    3b2c:	681b      	ldr	r3, [r3, #0]
{
    3b2e:	b510      	push	{r4, lr}
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    3b30:	001a      	movs	r2, r3
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    3b32:	08db      	lsrs	r3, r3, #3
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    3b34:	400a      	ands	r2, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    3b36:	0212      	lsls	r2, r2, #8
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    3b38:	400b      	ands	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    3b3a:	4313      	orrs	r3, r2
    3b3c:	4a1a      	ldr	r2, [pc, #104]	; (3ba8 <initADC+0x80>)
    3b3e:	8593      	strh	r3, [r2, #44]	; 0x2c
    3b40:	0013      	movs	r3, r2
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3b42:	8c1a      	ldrh	r2, [r3, #32]
    3b44:	0552      	lsls	r2, r2, #21
    3b46:	d1fc      	bne.n	3b42 <initADC+0x1a>
  SUPC->VREF.reg |= SUPC_VREF_VREFOE;           // Enable Supply Controller Reference output for use with ADC and DAC (AR_INTREF)
    3b48:	4918      	ldr	r1, [pc, #96]	; (3bac <initADC+0x84>)
    3b4a:	3204      	adds	r2, #4
    3b4c:	69c8      	ldr	r0, [r1, #28]
    3b4e:	4302      	orrs	r2, r0
    3b50:	61ca      	str	r2, [r1, #28]
    GCLK->PCHCTRL[GCM_ADC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    3b52:	2240      	movs	r2, #64	; 0x40
    3b54:	4916      	ldr	r1, [pc, #88]	; (3bb0 <initADC+0x88>)
    3b56:	600a      	str	r2, [r1, #0]
    while ( (GCLK->PCHCTRL[GCM_ADC].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    3b58:	6808      	ldr	r0, [r1, #0]
    3b5a:	4210      	tst	r0, r2
    3b5c:	d0fc      	beq.n	3b58 <initADC+0x30>
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256;                    // Divide Clock by 256.
    3b5e:	2207      	movs	r2, #7
    3b60:	705a      	strb	r2, [r3, #1]
    ADC->CTRLC.reg = ADC_CTRLC_RESSEL_10BIT;                        // 10 bits resolution as default
    3b62:	3219      	adds	r2, #25
    3b64:	815a      	strh	r2, [r3, #10]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3b66:	8c1a      	ldrh	r2, [r3, #32]
    3b68:	0552      	lsls	r2, r2, #21
    3b6a:	d1fc      	bne.n	3b66 <initADC+0x3e>
  ADC->SAMPCTRL.reg = 0x3f;     // Set max Sampling Time Length
    3b6c:	323f      	adds	r2, #63	; 0x3f
    3b6e:	735a      	strb	r2, [r3, #13]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3b70:	8c1a      	ldrh	r2, [r3, #32]
    3b72:	0552      	lsls	r2, r2, #21
    3b74:	d1fc      	bne.n	3b70 <initADC+0x48>
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    3b76:	22c0      	movs	r2, #192	; 0xc0
    3b78:	0152      	lsls	r2, r2, #5
    3b7a:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3b7c:	8c1a      	ldrh	r2, [r3, #32]
    3b7e:	0552      	lsls	r2, r2, #21
    3b80:	0d52      	lsrs	r2, r2, #21
    3b82:	d1fb      	bne.n	3b7c <initADC+0x54>
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    3b84:	731a      	strb	r2, [r3, #12]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3b86:	8c1a      	ldrh	r2, [r3, #32]
    3b88:	0552      	lsls	r2, r2, #21
    3b8a:	d1fc      	bne.n	3b86 <initADC+0x5e>
  ADCinitialized = 1;
    3b8c:	4b09      	ldr	r3, [pc, #36]	; (3bb4 <initADC+0x8c>)
    3b8e:	3201      	adds	r2, #1
    3b90:	701a      	strb	r2, [r3, #0]
  if (!REFinitialized) {
    3b92:	4b09      	ldr	r3, [pc, #36]	; (3bb8 <initADC+0x90>)
    3b94:	781b      	ldrb	r3, [r3, #0]
    3b96:	2b00      	cmp	r3, #0
    3b98:	d102      	bne.n	3ba0 <initADC+0x78>
    analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    3b9a:	2005      	movs	r0, #5
    3b9c:	f7ff ff64 	bl	3a68 <analogReference>
}
    3ba0:	bd10      	pop	{r4, pc}
    3ba2:	46c0      	nop			; (mov r8, r8)
    3ba4:	00806020 	.word	0x00806020
    3ba8:	43000c00 	.word	0x43000c00
    3bac:	40001400 	.word	0x40001400
    3bb0:	400018f8 	.word	0x400018f8
    3bb4:	20000954 	.word	0x20000954
    3bb8:	20000956 	.word	0x20000956

00003bbc <analogRead>:

uint32_t analogRead( uint32_t pin )
{
    3bbc:	b510      	push	{r4, lr}
  uint32_t valueRead = 0;

  if (!ADCinitialized) {
    3bbe:	4b1f      	ldr	r3, [pc, #124]	; (3c3c <analogRead+0x80>)
{
    3bc0:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    3bc2:	781b      	ldrb	r3, [r3, #0]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d101      	bne.n	3bcc <analogRead+0x10>
    initADC();
    3bc8:	f7ff ffae 	bl	3b28 <initADC>
    ADC = ADC0;
  }
#endif

  // pinPeripheral now handles disabling the DAC (if active)
  if ( pinPeripheral(pin, PIO_ANALOG_ADC) == RET_STATUS_OK )
    3bcc:	2105      	movs	r1, #5
    3bce:	0020      	movs	r0, r4
    3bd0:	f000 f8ac 	bl	3d2c <pinPeripheral>
    3bd4:	0003      	movs	r3, r0
  uint32_t valueRead = 0;
    3bd6:	2000      	movs	r0, #0
  if ( pinPeripheral(pin, PIO_ANALOG_ADC) == RET_STATUS_OK )
    3bd8:	4283      	cmp	r3, r0
    3bda:	d128      	bne.n	3c2e <analogRead+0x72>
  {
    ADC->INPUTCTRL.bit.MUXPOS = GetADC(pin); // Selection for the positive ADC input
    3bdc:	300c      	adds	r0, #12
    3bde:	4344      	muls	r4, r0
    3be0:	4817      	ldr	r0, [pc, #92]	; (3c40 <analogRead+0x84>)
    3be2:	4b18      	ldr	r3, [pc, #96]	; (3c44 <analogRead+0x88>)
    3be4:	1900      	adds	r0, r0, r4
    3be6:	7a41      	ldrb	r1, [r0, #9]
    3be8:	201f      	movs	r0, #31
    3bea:	891a      	ldrh	r2, [r3, #8]
    3bec:	4001      	ands	r1, r0
    3bee:	4382      	bics	r2, r0
    3bf0:	430a      	orrs	r2, r1
    3bf2:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3bf4:	8c1a      	ldrh	r2, [r3, #32]
    3bf6:	0552      	lsls	r2, r2, #21
    3bf8:	d1fc      	bne.n	3bf4 <analogRead+0x38>

    syncADC();

    ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    3bfa:	7819      	ldrb	r1, [r3, #0]
    3bfc:	3202      	adds	r2, #2
    3bfe:	430a      	orrs	r2, r1
    3c00:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3c02:	8c1a      	ldrh	r2, [r3, #32]
    3c04:	0552      	lsls	r2, r2, #21
    3c06:	d1fc      	bne.n	3c02 <analogRead+0x46>
    syncADC();

    // Start conversion
    ADC->SWTRIG.bit.START = 1;
    3c08:	7e19      	ldrb	r1, [r3, #24]
    3c0a:	3202      	adds	r2, #2
    3c0c:	430a      	orrs	r2, r1
    3c0e:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3c10:	8c1a      	ldrh	r2, [r3, #32]
    3c12:	0552      	lsls	r2, r2, #21
    3c14:	d1fc      	bne.n	3c10 <analogRead+0x54>
    syncADC();

    // Store the value
    while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    3c16:	799a      	ldrb	r2, [r3, #6]
    3c18:	07d2      	lsls	r2, r2, #31
    3c1a:	d5fc      	bpl.n	3c16 <analogRead+0x5a>
    valueRead = ADC->RESULT.reg;

    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3c1c:	2102      	movs	r1, #2
    valueRead = ADC->RESULT.reg;
    3c1e:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3c20:	781a      	ldrb	r2, [r3, #0]
    valueRead = ADC->RESULT.reg;
    3c22:	b280      	uxth	r0, r0
    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3c24:	438a      	bics	r2, r1
    3c26:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3c28:	8c1a      	ldrh	r2, [r3, #32]
    3c2a:	0552      	lsls	r2, r2, #21
    3c2c:	d1fc      	bne.n	3c28 <analogRead+0x6c>
    syncADC();
  }

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    3c2e:	4b06      	ldr	r3, [pc, #24]	; (3c48 <analogRead+0x8c>)
    3c30:	681a      	ldr	r2, [r3, #0]
    3c32:	4b06      	ldr	r3, [pc, #24]	; (3c4c <analogRead+0x90>)
    3c34:	6819      	ldr	r1, [r3, #0]
    3c36:	f7ff fee9 	bl	3a0c <mapResolution>
}
    3c3a:	bd10      	pop	{r4, pc}
    3c3c:	20000954 	.word	0x20000954
    3c40:	00010f8c 	.word	0x00010f8c
    3c44:	43000c00 	.word	0x43000c00
    3c48:	2000008c 	.word	0x2000008c
    3c4c:	20000088 	.word	0x20000088

00003c50 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    3c50:	b510      	push	{r4, lr}
  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  pinPeripheral(ulPin, ulMode);
    3c52:	f000 f86b 	bl	3d2c <pinPeripheral>
}
    3c56:	bd10      	pop	{r4, pc}

00003c58 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    3c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t pinPort = GetPort(ulPin);
    3c5a:	220c      	movs	r2, #12
    3c5c:	4342      	muls	r2, r0
    3c5e:	4d25      	ldr	r5, [pc, #148]	; (3cf4 <digitalWrite+0x9c>)
{
    3c60:	9001      	str	r0, [sp, #4]
  uint8_t pinPort = GetPort(ulPin);
    3c62:	5d53      	ldrb	r3, [r2, r5]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3c64:	2b04      	cmp	r3, #4
    3c66:	d02f      	beq.n	3cc8 <digitalWrite+0x70>
    3c68:	2700      	movs	r7, #0
  uint8_t pinNum = GetPin(ulPin);
    3c6a:	18aa      	adds	r2, r5, r2

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
#endif

  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    3c6c:	7852      	ldrb	r2, [r2, #1]
    3c6e:	01db      	lsls	r3, r3, #7
    3c70:	4e21      	ldr	r6, [pc, #132]	; (3cf8 <digitalWrite+0xa0>)
    3c72:	18d4      	adds	r4, r2, r3
    3c74:	19a4      	adds	r4, r4, r6
    3c76:	7826      	ldrb	r6, [r4, #0]
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    3c78:	4c20      	ldr	r4, [pc, #128]	; (3cfc <digitalWrite+0xa4>)
  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    3c7a:	b2f6      	uxtb	r6, r6
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    3c7c:	591c      	ldr	r4, [r3, r4]
    3c7e:	42bc      	cmp	r4, r7
    3c80:	d004      	beq.n	3c8c <digitalWrite+0x34>
    3c82:	3701      	adds	r7, #1
    3c84:	4097      	lsls	r7, r2
    3c86:	1e7c      	subs	r4, r7, #1
    3c88:	41a7      	sbcs	r7, r4
    3c8a:	b2ff      	uxtb	r7, r7
  uint8_t pinOut = (PORT->Group[pinPort].OUT.reg && (1ul << pinNum));
    3c8c:	4c1b      	ldr	r4, [pc, #108]	; (3cfc <digitalWrite+0xa4>)
    3c8e:	191c      	adds	r4, r3, r4
    3c90:	6924      	ldr	r4, [r4, #16]
    3c92:	46a4      	mov	ip, r4
    3c94:	2400      	movs	r4, #0
    3c96:	4660      	mov	r0, ip
    3c98:	42a0      	cmp	r0, r4
    3c9a:	d004      	beq.n	3ca6 <digitalWrite+0x4e>
    3c9c:	3401      	adds	r4, #1
    3c9e:	4094      	lsls	r4, r2
    3ca0:	1e60      	subs	r0, r4, #1
    3ca2:	4184      	sbcs	r4, r0
    3ca4:	b2e4      	uxtb	r4, r4

  // Enable pull resistor if pin attributes allow and only if pin is not configured as output
  // Note that most pins should use PIN_ATTR_DIGITAL, which includes both PIN_ATTR_INPUT_PULLUP and PIN_ATTR_INPUT_PULLDOWN.
  if ( pinDir == 0 ) { // pin DIR is input
    3ca6:	2f00      	cmp	r7, #0
    3ca8:	d117      	bne.n	3cda <digitalWrite+0x82>
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    3caa:	9801      	ldr	r0, [sp, #4]
    3cac:	370c      	adds	r7, #12
    3cae:	4378      	muls	r0, r7
    3cb0:	182d      	adds	r5, r5, r0
    3cb2:	6868      	ldr	r0, [r5, #4]
     if ( ulVal == HIGH )
    3cb4:	2901      	cmp	r1, #1
    3cb6:	d10d      	bne.n	3cd4 <digitalWrite+0x7c>
     {
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    3cb8:	2c01      	cmp	r4, #1
    3cba:	d106      	bne.n	3cca <digitalWrite+0x72>
    3cbc:	0741      	lsls	r1, r0, #29
    3cbe:	d406      	bmi.n	3cce <digitalWrite+0x76>
     else
     {
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
     }

     PORT->Group[pinPort].PINCFG[pinNum].reg = pinConfig ;
    3cc0:	18d3      	adds	r3, r2, r3
    3cc2:	4a0d      	ldr	r2, [pc, #52]	; (3cf8 <digitalWrite+0xa0>)
    3cc4:	189b      	adds	r3, r3, r2
    3cc6:	701e      	strb	r6, [r3, #0]
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    }
  }

  return ;
}
    3cc8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    3cca:	0701      	lsls	r1, r0, #28
    3ccc:	d5f8      	bpl.n	3cc0 <digitalWrite+0x68>
         pinConfig |= (uint8_t)(PORT_PINCFG_PULLEN) ;
    3cce:	2104      	movs	r1, #4
    3cd0:	430e      	orrs	r6, r1
    3cd2:	e7f5      	b.n	3cc0 <digitalWrite+0x68>
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
    3cd4:	2104      	movs	r1, #4
    3cd6:	438e      	bics	r6, r1
    3cd8:	e7f2      	b.n	3cc0 <digitalWrite+0x68>
    if ( ulVal == HIGH ) {
    3cda:	2901      	cmp	r1, #1
    3cdc:	d104      	bne.n	3ce8 <digitalWrite+0x90>
      PORT->Group[pinPort].OUTSET.reg = (1ul << pinNum) ;
    3cde:	4091      	lsls	r1, r2
    3ce0:	4a06      	ldr	r2, [pc, #24]	; (3cfc <digitalWrite+0xa4>)
    3ce2:	189b      	adds	r3, r3, r2
    3ce4:	6199      	str	r1, [r3, #24]
    3ce6:	e7ef      	b.n	3cc8 <digitalWrite+0x70>
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    3ce8:	2101      	movs	r1, #1
    3cea:	4091      	lsls	r1, r2
    3cec:	4a03      	ldr	r2, [pc, #12]	; (3cfc <digitalWrite+0xa4>)
    3cee:	189b      	adds	r3, r3, r2
    3cf0:	6159      	str	r1, [r3, #20]
    3cf2:	e7e9      	b.n	3cc8 <digitalWrite+0x70>
    3cf4:	00010f8c 	.word	0x00010f8c
    3cf8:	40002840 	.word	0x40002840
    3cfc:	40002800 	.word	0x40002800

00003d00 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  uint8_t pinPort = GetPort(ulPin);
    3d00:	230c      	movs	r3, #12
    3d02:	4358      	muls	r0, r3
    3d04:	4907      	ldr	r1, [pc, #28]	; (3d24 <digitalRead+0x24>)
    3d06:	2300      	movs	r3, #0
    3d08:	5c42      	ldrb	r2, [r0, r1]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3d0a:	2a04      	cmp	r2, #4
    3d0c:	d006      	beq.n	3d1c <digitalRead+0x1c>
  {
    return LOW ;
  }

  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    3d0e:	4b06      	ldr	r3, [pc, #24]	; (3d28 <digitalRead+0x28>)
    3d10:	01d2      	lsls	r2, r2, #7
    3d12:	18d2      	adds	r2, r2, r3
  uint8_t pinNum = GetPin(ulPin);
    3d14:	1809      	adds	r1, r1, r0
  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    3d16:	6a13      	ldr	r3, [r2, #32]
    3d18:	784a      	ldrb	r2, [r1, #1]
    3d1a:	40d3      	lsrs	r3, r2
    3d1c:	2001      	movs	r0, #1
  {
    return HIGH ;
  }

  return LOW ;
}
    3d1e:	4018      	ands	r0, r3
    3d20:	4770      	bx	lr
    3d22:	46c0      	nop			; (mov r8, r8)
    3d24:	00010f8c 	.word	0x00010f8c
    3d28:	40002800 	.word	0x40002800

00003d2c <pinPeripheral>:
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
#endif
}

int pinPeripheral( uint32_t ulPin, uint32_t ulPeripheral )
{
    3d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3d2e:	0005      	movs	r5, r0
#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
  // Prevent out of bounds access
  if (ulPin >= NUM_PIN_DESCRIPTION_ENTRIES)
    3d30:	2823      	cmp	r0, #35	; 0x23
    3d32:	d900      	bls.n	3d36 <pinPeripheral+0xa>
    3d34:	e06b      	b.n	3e0e <pinPeripheral+0xe2>
  {
    return -1 ;
  }
#endif

  uint8_t pinPort = GetPort(ulPin);
    3d36:	230c      	movs	r3, #12
    3d38:	4343      	muls	r3, r0
    3d3a:	4f7f      	ldr	r7, [pc, #508]	; (3f38 <pinPeripheral+0x20c>)
    3d3c:	5dda      	ldrb	r2, [r3, r7]
  uint8_t pinNum = GetPin(ulPin);
    3d3e:	18fb      	adds	r3, r7, r3
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    3d40:	78d8      	ldrb	r0, [r3, #3]
  uint8_t pinNum = GetPin(ulPin);
    3d42:	785c      	ldrb	r4, [r3, #1]
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    3d44:	9001      	str	r0, [sp, #4]

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint8_t pinType = g_APinDescription[ulPin].ulPinType;
    3d46:	7898      	ldrb	r0, [r3, #2]
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    3d48:	685b      	ldr	r3, [r3, #4]
#endif

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3d4a:	2a04      	cmp	r2, #4
    3d4c:	d05f      	beq.n	3e0e <pinPeripheral+0xe2>
  }

#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  // If pinType is not PIO_MULTI or PIO_STARTUP in the pinDescription table, then it must match ulPeripheral
  if ( pinType != PIO_MULTI && pinType != PIO_STARTUP && pinType != ulPeripheral )
    3d4e:	2619      	movs	r6, #25
    3d50:	4276      	negs	r6, r6
    3d52:	46b4      	mov	ip, r6
    3d54:	4484      	add	ip, r0
    3d56:	4666      	mov	r6, ip
    3d58:	2e01      	cmp	r6, #1
    3d5a:	d901      	bls.n	3d60 <pinPeripheral+0x34>
    3d5c:	4288      	cmp	r0, r1
    3d5e:	d156      	bne.n	3e0e <pinPeripheral+0xe2>
  {
    return -1 ;
  }

  // Make sure ulPeripheral is listed in pinAttribute
  if ( !(pinAttribute & (1UL << ulPeripheral)) && pinType != PIO_STARTUP )
    3d60:	40cb      	lsrs	r3, r1
    3d62:	07db      	lsls	r3, r3, #31
    3d64:	d401      	bmi.n	3d6a <pinPeripheral+0x3e>
    3d66:	281a      	cmp	r0, #26
    3d68:	d151      	bne.n	3e0e <pinPeripheral+0xe2>
#endif
#endif

  // Determine hardware peripheral to use
  EPioPeripheral peripheral = PER_PORT;
  switch ( ulPeripheral )
    3d6a:	1f08      	subs	r0, r1, #4
    3d6c:	2817      	cmp	r0, #23
    3d6e:	d863      	bhi.n	3e38 <pinPeripheral+0x10c>
    3d70:	f005 fd36 	bl	97e0 <__gnu_thumb1_case_uqi>
    3d74:	64644736 	.word	0x64644736
    3d78:	62626262 	.word	0x62626262
    3d7c:	0c5d5050 	.word	0x0c5d5050
    3d80:	6262620c 	.word	0x6262620c
    3d84:	90626262 	.word	0x90626262
    3d88:	4d624d92 	.word	0x4d624d92
    case PIO_CAN:
#endif
#if (SAMD51)
    case PIO_QSPI:
#endif
      peripheral = PER_COM;
    3d8c:	2306      	movs	r3, #6
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
      //DAC->CTRLB.bit.EOEN = 0x00; // The DAC output is turned off.
      syncDAC();
    }
#elif (SAML21 || SAMD51)
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3d8e:	2a00      	cmp	r2, #0
    3d90:	d100      	bne.n	3d94 <pinPeripheral+0x68>
    3d92:	e08f      	b.n	3eb4 <pinPeripheral+0x188>
      }
    }
#endif
  }

  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3d94:	4d69      	ldr	r5, [pc, #420]	; (3f3c <pinPeripheral+0x210>)
    3d96:	01d0      	lsls	r0, r2, #7
    3d98:	1820      	adds	r0, r4, r0
    3d9a:	1940      	adds	r0, r0, r5
    3d9c:	7805      	ldrb	r5, [r0, #0]
    3d9e:	2004      	movs	r0, #4
    3da0:	4028      	ands	r0, r5

  // INEN should be enabled for both input and output (but not analog)
  if ( ulPeripheral != PIO_ANALOG_ADC && ulPeripheral != PIO_ANALOG_DAC && ulPeripheral != PIO_ANALOG_REF )
    3da2:	1f4d      	subs	r5, r1, #5
    3da4:	2d02      	cmp	r5, #2
    3da6:	d901      	bls.n	3dac <pinPeripheral+0x80>
  {
    pinCfg |= PORT_PINCFG_INEN;
    3da8:	2502      	movs	r5, #2
    3daa:	4328      	orrs	r0, r5
  }

  // Set pin drive strength (DRVSTR), which is used with PIO_OUTPUT and PIO_SERCOM (UART, SPI, and I2C)
  if ( (peripheralAttribute & PER_ATTR_DRIVE_MASK) == PER_ATTR_DRIVE_STRONG )
    3dac:	9d01      	ldr	r5, [sp, #4]
    3dae:	072d      	lsls	r5, r5, #28
    3db0:	d501      	bpl.n	3db6 <pinPeripheral+0x8a>
  {
    pinCfg |= PORT_PINCFG_DRVSTR;
    3db2:	2540      	movs	r5, #64	; 0x40
    3db4:	4328      	orrs	r0, r5
  __ASM volatile ("cpsid i" : : : "memory");
    3db6:	b672      	cpsid	i
    3db8:	01d2      	lsls	r2, r2, #7
  }

  noInterrupts(); // Avoid possible invalid interim pin state

  if ( ulPeripheral == PIO_INPUT || ulPeripheral == PIO_STARTUP )
    3dba:	2900      	cmp	r1, #0
    3dbc:	d001      	beq.n	3dc2 <pinPeripheral+0x96>
    3dbe:	291a      	cmp	r1, #26
    3dc0:	d13e      	bne.n	3e40 <pinPeripheral+0x114>
  {
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    3dc2:	2301      	movs	r3, #1
    3dc4:	40a3      	lsls	r3, r4
    3dc6:	495e      	ldr	r1, [pc, #376]	; (3f40 <pinPeripheral+0x214>)
    3dc8:	1851      	adds	r1, r2, r1
    3dca:	604b      	str	r3, [r1, #4]
    PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;	// set default pull direction to pullup (will not be enabled)
    3dcc:	618b      	str	r3, [r1, #24]
    pinCfg |= PORT_PINCFG_PULLEN;
  }
  else if ( ulPeripheral == PIO_OUTPUT )
  {
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    pinCfg &= ~PORT_PINCFG_PULLEN;      // Disable pull resistor
    3dce:	2304      	movs	r3, #4
    3dd0:	4398      	bics	r0, r3

    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
  }

  // Set pin drive strength, enable/disable pull resistor, enable/disable INEN, and enable/disable the peripheral mux
  PORT->Group[pinPort].PINCFG[pinNum].reg = (uint8_t)pinCfg ;
    3dd2:	4b5a      	ldr	r3, [pc, #360]	; (3f3c <pinPeripheral+0x210>)
    3dd4:	18a2      	adds	r2, r4, r2
    3dd6:	18d2      	adds	r2, r2, r3
    3dd8:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    3dda:	b662      	cpsie	i

  interrupts();
  return 0l ;
    3ddc:	2000      	movs	r0, #0
}
    3dde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ( GetExtInt(ulPin) == NOT_AN_INTERRUPT )
    3de0:	230c      	movs	r3, #12
    3de2:	435d      	muls	r5, r3
    3de4:	197f      	adds	r7, r7, r5
    3de6:	7abb      	ldrb	r3, [r7, #10]
    3de8:	2b12      	cmp	r3, #18
    3dea:	d010      	beq.n	3e0e <pinPeripheral+0xe2>
      peripheral = PER_EXTINT;
    3dec:	2300      	movs	r3, #0
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3dee:	2a00      	cmp	r2, #0
    3df0:	d060      	beq.n	3eb4 <pinPeripheral+0x188>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3df2:	4d52      	ldr	r5, [pc, #328]	; (3f3c <pinPeripheral+0x210>)
    3df4:	01d0      	lsls	r0, r2, #7
    3df6:	1820      	adds	r0, r4, r0
    3df8:	1940      	adds	r0, r0, r5
    3dfa:	7805      	ldrb	r5, [r0, #0]
    3dfc:	2004      	movs	r0, #4
    3dfe:	4028      	ands	r0, r5
    3e00:	e7d2      	b.n	3da8 <pinPeripheral+0x7c>
      if ( GetADC(ulPin) == No_ADC_Channel )
    3e02:	230c      	movs	r3, #12
    3e04:	435d      	muls	r5, r3
    3e06:	197f      	adds	r7, r7, r5
    3e08:	7a7b      	ldrb	r3, [r7, #9]
    3e0a:	2b16      	cmp	r3, #22
    3e0c:	d14f      	bne.n	3eae <pinPeripheral+0x182>
    return -1 ;
    3e0e:	2001      	movs	r0, #1
    3e10:	4240      	negs	r0, r0
    3e12:	e7e4      	b.n	3dde <pinPeripheral+0xb2>
      if ( g_APinDescription[ulPin].ulTCChannel == NOT_ON_TIMER )
    3e14:	230c      	movs	r3, #12
    3e16:	435d      	muls	r5, r3
    3e18:	197f      	adds	r7, r7, r5
    3e1a:	7a3b      	ldrb	r3, [r7, #8]
    3e1c:	2b80      	cmp	r3, #128	; 0x80
    3e1e:	d0f6      	beq.n	3e0e <pinPeripheral+0xe2>
      if ( (peripheralAttribute & PER_ATTR_TIMER_MASK) == PER_ATTR_TIMER_STD )
    3e20:	2306      	movs	r3, #6
    3e22:	9801      	ldr	r0, [sp, #4]
    3e24:	4003      	ands	r3, r0
        peripheral = PER_TIMER_ALT;
    3e26:	1e58      	subs	r0, r3, #1
    3e28:	4183      	sbcs	r3, r0
    3e2a:	3304      	adds	r3, #4
    3e2c:	e7af      	b.n	3d8e <pinPeripheral+0x62>
        peripheral = PER_SERCOM_ALT;
    3e2e:	2301      	movs	r3, #1
    3e30:	9801      	ldr	r0, [sp, #4]
    3e32:	4003      	ands	r3, r0
    3e34:	3302      	adds	r3, #2
    3e36:	e7da      	b.n	3dee <pinPeripheral+0xc2>
  EPioPeripheral peripheral = PER_PORT;
    3e38:	2309      	movs	r3, #9
    3e3a:	e7a8      	b.n	3d8e <pinPeripheral+0x62>
      peripheral = PER_ANALOG;
    3e3c:	2301      	movs	r3, #1
    3e3e:	e7a6      	b.n	3d8e <pinPeripheral+0x62>
  else if ( ulPeripheral == PIO_INPUT_PULLUP || ulPeripheral == PIO_INPUT_PULLDOWN )
    3e40:	1e8d      	subs	r5, r1, #2
    3e42:	2d01      	cmp	r5, #1
    3e44:	d80c      	bhi.n	3e60 <pinPeripheral+0x134>
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    3e46:	2301      	movs	r3, #1
    3e48:	40a3      	lsls	r3, r4
    3e4a:	4d3d      	ldr	r5, [pc, #244]	; (3f40 <pinPeripheral+0x214>)
    3e4c:	1955      	adds	r5, r2, r5
    3e4e:	606b      	str	r3, [r5, #4]
    if ( ulPeripheral == PIO_INPUT_PULLDOWN ) {
    3e50:	2903      	cmp	r1, #3
    3e52:	d103      	bne.n	3e5c <pinPeripheral+0x130>
      PORT->Group[pinPort].OUTCLR.reg = (uint32_t)(1<<pinNum) ;
    3e54:	616b      	str	r3, [r5, #20]
    pinCfg |= PORT_PINCFG_PULLEN;
    3e56:	2304      	movs	r3, #4
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    3e58:	4318      	orrs	r0, r3
    3e5a:	e7ba      	b.n	3dd2 <pinPeripheral+0xa6>
      PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;
    3e5c:	61ab      	str	r3, [r5, #24]
    3e5e:	e7fa      	b.n	3e56 <pinPeripheral+0x12a>
  else if ( ulPeripheral == PIO_OUTPUT )
    3e60:	2901      	cmp	r1, #1
    3e62:	d104      	bne.n	3e6e <pinPeripheral+0x142>
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    3e64:	40a1      	lsls	r1, r4
    3e66:	4b36      	ldr	r3, [pc, #216]	; (3f40 <pinPeripheral+0x214>)
    3e68:	18d3      	adds	r3, r2, r3
    3e6a:	6099      	str	r1, [r3, #8]
    3e6c:	e7af      	b.n	3dce <pinPeripheral+0xa2>
    3e6e:	0861      	lsrs	r1, r4, #1
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3e70:	4d34      	ldr	r5, [pc, #208]	; (3f44 <pinPeripheral+0x218>)
    3e72:	1851      	adds	r1, r2, r1
    3e74:	1949      	adds	r1, r1, r5
    if ( pinNum & 1 ) // is pin odd?
    3e76:	07e5      	lsls	r5, r4, #31
    3e78:	d508      	bpl.n	3e8c <pinPeripheral+0x160>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    3e7a:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3e7c:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    3e7e:	011b      	lsls	r3, r3, #4
    3e80:	4035      	ands	r5, r6
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3e82:	432b      	orrs	r3, r5
    3e84:	b2db      	uxtb	r3, r3
    3e86:	700b      	strb	r3, [r1, #0]
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    3e88:	2301      	movs	r3, #1
    3e8a:	e7e5      	b.n	3e58 <pinPeripheral+0x12c>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3e8c:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    3e8e:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3e90:	43b5      	bics	r5, r6
    3e92:	e7f6      	b.n	3e82 <pinPeripheral+0x156>
      peripheral = PER_AC_CLK;
    3e94:	2307      	movs	r3, #7
    3e96:	e7aa      	b.n	3dee <pinPeripheral+0xc2>
      peripheral = PER_CCL;
    3e98:	2308      	movs	r3, #8
    3e9a:	e7a8      	b.n	3dee <pinPeripheral+0xc2>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3e9c:	4827      	ldr	r0, [pc, #156]	; (3f3c <pinPeripheral+0x210>)
    3e9e:	01d3      	lsls	r3, r2, #7
    3ea0:	18e3      	adds	r3, r4, r3
    3ea2:	181b      	adds	r3, r3, r0
    3ea4:	7818      	ldrb	r0, [r3, #0]
    3ea6:	2304      	movs	r3, #4
    3ea8:	4018      	ands	r0, r3
      peripheral = PER_ANALOG;
    3eaa:	3b03      	subs	r3, #3
    3eac:	e77e      	b.n	3dac <pinPeripheral+0x80>
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3eae:	2a00      	cmp	r2, #0
    3eb0:	d1f4      	bne.n	3e9c <pinPeripheral+0x170>
      peripheral = PER_ANALOG;
    3eb2:	2301      	movs	r3, #1
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3eb4:	2c02      	cmp	r4, #2
    3eb6:	d002      	beq.n	3ebe <pinPeripheral+0x192>
    3eb8:	2c05      	cmp	r4, #5
    3eba:	d000      	beq.n	3ebe <pinPeripheral+0x192>
    3ebc:	e76a      	b.n	3d94 <pinPeripheral+0x68>
    3ebe:	2906      	cmp	r1, #6
    3ec0:	d100      	bne.n	3ec4 <pinPeripheral+0x198>
    3ec2:	e767      	b.n	3d94 <pinPeripheral+0x68>
    if ( (pinPort == 0) && (pinNum == 5) ) {
    3ec4:	1f65      	subs	r5, r4, #5
    3ec6:	4268      	negs	r0, r5
    3ec8:	4145      	adcs	r5, r0
    if (dacEnabled[DACNumber]) {
    3eca:	481f      	ldr	r0, [pc, #124]	; (3f48 <pinPeripheral+0x21c>)
    3ecc:	5d47      	ldrb	r7, [r0, r5]
    3ece:	2f00      	cmp	r7, #0
    3ed0:	d100      	bne.n	3ed4 <pinPeripheral+0x1a8>
    3ed2:	e75f      	b.n	3d94 <pinPeripheral+0x68>
      dacEnabled[DACNumber] = false;
    3ed4:	2700      	movs	r7, #0
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    3ed6:	2602      	movs	r6, #2
      dacEnabled[DACNumber] = false;
    3ed8:	5547      	strb	r7, [r0, r5]
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    3eda:	481c      	ldr	r0, [pc, #112]	; (3f4c <pinPeripheral+0x220>)
    3edc:	7807      	ldrb	r7, [r0, #0]
    3ede:	43b7      	bics	r7, r6
    3ee0:	7007      	strb	r7, [r0, #0]
  // VARIANT_MCK / 1000000 == cycles needed to delay 1uS
  //                     3 == cycles used in a loop
  // Divide by 3 before multiplication with usec, so that the maximum usable usec value
  // with the D51 @ 120MHz is at least what it was when multipling by usec first at 48MHz.
  uint32_t n = usec * ((VARIANT_MCK / 1000000) / 3);
  __asm__ __volatile__(
    3ee2:	27a0      	movs	r7, #160	; 0xa0
    3ee4:	00bf      	lsls	r7, r7, #2
    3ee6:	3f01      	subs	r7, #1
    3ee8:	d1fd      	bne.n	3ee6 <pinPeripheral+0x1ba>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3eea:	273f      	movs	r7, #63	; 0x3f
    3eec:	6886      	ldr	r6, [r0, #8]
    3eee:	423e      	tst	r6, r7
    3ef0:	d1fc      	bne.n	3eec <pinPeripheral+0x1c0>
      DAC->DACCTRL[DACNumber].bit.ENABLE = 0x00; // The DACx output is turned off.
    3ef2:	4e16      	ldr	r6, [pc, #88]	; (3f4c <pinPeripheral+0x220>)
    3ef4:	1d2f      	adds	r7, r5, #4
    3ef6:	46b4      	mov	ip, r6
    3ef8:	007f      	lsls	r7, r7, #1
    3efa:	44bc      	add	ip, r7
    3efc:	4666      	mov	r6, ip
    3efe:	88b7      	ldrh	r7, [r6, #4]
    3f00:	2602      	movs	r6, #2
    3f02:	43b7      	bics	r7, r6
    3f04:	4666      	mov	r6, ip
    3f06:	80b7      	strh	r7, [r6, #4]
      if (dacEnabled[0] || dacEnabled[1]) {
    3f08:	4f0f      	ldr	r7, [pc, #60]	; (3f48 <pinPeripheral+0x21c>)
    3f0a:	783e      	ldrb	r6, [r7, #0]
    3f0c:	2e00      	cmp	r6, #0
    3f0e:	d103      	bne.n	3f18 <pinPeripheral+0x1ec>
    3f10:	787f      	ldrb	r7, [r7, #1]
    3f12:	2f00      	cmp	r7, #0
    3f14:	d100      	bne.n	3f18 <pinPeripheral+0x1ec>
    3f16:	e73d      	b.n	3d94 <pinPeripheral+0x68>
        DAC->CTRLA.bit.ENABLE = 0x01;     // Enable DAC controller, so that the other DAC can function
    3f18:	2702      	movs	r7, #2
    3f1a:	7806      	ldrb	r6, [r0, #0]
    3f1c:	4337      	orrs	r7, r6
    3f1e:	7007      	strb	r7, [r0, #0]
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3f20:	273f      	movs	r7, #63	; 0x3f
    3f22:	6886      	ldr	r6, [r0, #8]
    3f24:	423e      	tst	r6, r7
    3f26:	d1fc      	bne.n	3f22 <pinPeripheral+0x1f6>
        while ( (DAC->STATUS.reg & (1 << (1 - DACNumber))) == 0 );   // Must wait for DACx to start
    3f28:	2701      	movs	r7, #1
    3f2a:	1b7d      	subs	r5, r7, r5
    3f2c:	40af      	lsls	r7, r5
    3f2e:	79c5      	ldrb	r5, [r0, #7]
    3f30:	422f      	tst	r7, r5
    3f32:	d0fc      	beq.n	3f2e <pinPeripheral+0x202>
    3f34:	e72e      	b.n	3d94 <pinPeripheral+0x68>
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	00010f8c 	.word	0x00010f8c
    3f3c:	40002840 	.word	0x40002840
    3f40:	40002800 	.word	0x40002800
    3f44:	40002830 	.word	0x40002830
    3f48:	20000957 	.word	0x20000957
    3f4c:	42003000 	.word	0x42003000

00003f50 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
    3f50:	4770      	bx	lr

00003f52 <_ZN11DHT_Unified8HumidityD1Ev>:
    DHT_Unified* _parent;
    int32_t _id;

  };

  class Humidity : public Adafruit_Sensor {
    3f52:	4770      	bx	lr

00003f54 <_ZN11DHT_Unified11TemperatureD1Ev>:
  class Temperature : public Adafruit_Sensor {
    3f54:	4770      	bx	lr

00003f56 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
DHT_Unified::Temperature::Temperature(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    3f56:	b570      	push	{r4, r5, r6, lr}
    3f58:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3f5a:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    3f5c:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    3f5e:	0032      	movs	r2, r6
    3f60:	2100      	movs	r1, #0
    3f62:	0020      	movs	r0, r4
    3f64:	f008 fdb0 	bl	cac8 <memset>
  // Populate sensor reading values.
  event->version     = sizeof(sensors_event_t);
  event->sensor_id   = _id;
    3f68:	68eb      	ldr	r3, [r5, #12]
  event->version     = sizeof(sensors_event_t);
    3f6a:	6026      	str	r6, [r4, #0]
  event->sensor_id   = _id;
    3f6c:	6063      	str	r3, [r4, #4]
  event->type        = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3f6e:	230d      	movs	r3, #13
    3f70:	60a3      	str	r3, [r4, #8]
  event->timestamp   = millis();
    3f72:	f7fe fb7f 	bl	2674 <millis>
  event->temperature = _parent->_dht.readTemperature();
    3f76:	2200      	movs	r2, #0
  event->timestamp   = millis();
    3f78:	6120      	str	r0, [r4, #16]
  event->temperature = _parent->_dht.readTemperature();
    3f7a:	0011      	movs	r1, r2
    3f7c:	68a8      	ldr	r0, [r5, #8]
    3f7e:	f001 fd87 	bl	5a90 <_ZN3DHT15readTemperatureEbb>
    3f82:	6160      	str	r0, [r4, #20]
  
  return true;
}
    3f84:	2001      	movs	r0, #1
    3f86:	bd70      	pop	{r4, r5, r6, pc}

00003f88 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
DHT_Unified::Humidity::Humidity(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    3f88:	b570      	push	{r4, r5, r6, lr}
    3f8a:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3f8c:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    3f8e:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    3f90:	0032      	movs	r2, r6
    3f92:	2100      	movs	r1, #0
    3f94:	0020      	movs	r0, r4
    3f96:	f008 fd97 	bl	cac8 <memset>
  // Populate sensor reading values.
  event->version           = sizeof(sensors_event_t);
  event->sensor_id         = _id;
    3f9a:	68eb      	ldr	r3, [r5, #12]
  event->version           = sizeof(sensors_event_t);
    3f9c:	6026      	str	r6, [r4, #0]
  event->sensor_id         = _id;
    3f9e:	6063      	str	r3, [r4, #4]
  event->type              = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3fa0:	230c      	movs	r3, #12
    3fa2:	60a3      	str	r3, [r4, #8]
  event->timestamp         = millis();
    3fa4:	f7fe fb66 	bl	2674 <millis>
  event->relative_humidity = _parent->_dht.readHumidity();
    3fa8:	2100      	movs	r1, #0
  event->timestamp         = millis();
    3faa:	6120      	str	r0, [r4, #16]
  event->relative_humidity = _parent->_dht.readHumidity();
    3fac:	68a8      	ldr	r0, [r5, #8]
    3fae:	f001 fdbf 	bl	5b30 <_ZN3DHT12readHumidityEb>
    3fb2:	6160      	str	r0, [r4, #20]
  
  return true;
}
    3fb4:	2001      	movs	r0, #1
    3fb6:	bd70      	pop	{r4, r5, r6, pc}

00003fb8 <_ZN11DHT_Unified8HumidityD0Ev>:
  class Humidity : public Adafruit_Sensor {
    3fb8:	b510      	push	{r4, lr}
    3fba:	0004      	movs	r4, r0
    3fbc:	f000 ff62 	bl	4e84 <_ZdlPv>
    3fc0:	0020      	movs	r0, r4
    3fc2:	bd10      	pop	{r4, pc}

00003fc4 <_ZN11DHT_Unified11TemperatureD0Ev>:
  class Temperature : public Adafruit_Sensor {
    3fc4:	b510      	push	{r4, lr}
    3fc6:	0004      	movs	r4, r0
    3fc8:	f000 ff5c 	bl	4e84 <_ZdlPv>
    3fcc:	0020      	movs	r0, r4
    3fce:	bd10      	pop	{r4, pc}

00003fd0 <_ZN11DHT_UnifiedC1Ehhhll>:
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count, int32_t tempSensorId, int32_t humiditySensorId):
    3fd0:	b570      	push	{r4, r5, r6, lr}
    3fd2:	0004      	movs	r4, r0
    3fd4:	0015      	movs	r5, r2
  _humidity(this, humiditySensorId)
    3fd6:	f001 fca3 	bl	5920 <_ZN3DHTC1Ehhh>
  _id(id)
    3fda:	4b07      	ldr	r3, [pc, #28]	; (3ff8 <_ZN11DHT_UnifiedC1Ehhhll+0x28>)
  _humidity(this, humiditySensorId)
    3fdc:	7525      	strb	r5, [r4, #20]
  _id(id)
    3fde:	3308      	adds	r3, #8
    3fe0:	61a3      	str	r3, [r4, #24]
    3fe2:	9b04      	ldr	r3, [sp, #16]
{}
    3fe4:	0020      	movs	r0, r4
  _id(id)
    3fe6:	6263      	str	r3, [r4, #36]	; 0x24
  _id(id)
    3fe8:	4b04      	ldr	r3, [pc, #16]	; (3ffc <_ZN11DHT_UnifiedC1Ehhhll+0x2c>)
  _id(id)
    3fea:	6224      	str	r4, [r4, #32]
  _id(id)
    3fec:	3308      	adds	r3, #8
    3fee:	62a3      	str	r3, [r4, #40]	; 0x28
    3ff0:	9b05      	ldr	r3, [sp, #20]
    3ff2:	6324      	str	r4, [r4, #48]	; 0x30
    3ff4:	6363      	str	r3, [r4, #52]	; 0x34
{}
    3ff6:	bd70      	pop	{r4, r5, r6, pc}
    3ff8:	00010d58 	.word	0x00010d58
    3ffc:	00010d74 	.word	0x00010d74

00004000 <_ZN11DHT_Unified5beginEv>:
void DHT_Unified::begin() {
    4000:	b510      	push	{r4, lr}
  _dht.begin();
    4002:	f001 fca1 	bl	5948 <_ZN3DHT5beginEv>
}
    4006:	bd10      	pop	{r4, pc}

00004008 <_ZN11DHT_Unified7setNameEP8sensor_t>:
void DHT_Unified::setName(sensor_t* sensor) {
    4008:	b510      	push	{r4, lr}
  switch(_type) {
    400a:	7d02      	ldrb	r2, [r0, #20]
void DHT_Unified::setName(sensor_t* sensor) {
    400c:	000c      	movs	r4, r1
  switch(_type) {
    400e:	2a15      	cmp	r2, #21
    4010:	d007      	beq.n	4022 <_ZN11DHT_Unified7setNameEP8sensor_t+0x1a>
    4012:	2a16      	cmp	r2, #22
    4014:	d00d      	beq.n	4032 <_ZN11DHT_Unified7setNameEP8sensor_t+0x2a>
      strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    4016:	4908      	ldr	r1, [pc, #32]	; (4038 <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>)
  switch(_type) {
    4018:	2a0b      	cmp	r2, #11
    401a:	d004      	beq.n	4026 <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    401c:	220b      	movs	r2, #11
    401e:	4907      	ldr	r1, [pc, #28]	; (403c <_ZN11DHT_Unified7setNameEP8sensor_t+0x34>)
    4020:	e001      	b.n	4026 <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    4022:	220b      	movs	r2, #11
    4024:	4906      	ldr	r1, [pc, #24]	; (4040 <_ZN11DHT_Unified7setNameEP8sensor_t+0x38>)
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    4026:	0020      	movs	r0, r4
    4028:	f009 fe92 	bl	dd50 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
    402c:	2300      	movs	r3, #0
    402e:	72e3      	strb	r3, [r4, #11]
}
    4030:	bd10      	pop	{r4, pc}
      strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    4032:	220b      	movs	r2, #11
    4034:	4903      	ldr	r1, [pc, #12]	; (4044 <_ZN11DHT_Unified7setNameEP8sensor_t+0x3c>)
    4036:	e7f6      	b.n	4026 <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
    4038:	00010d40 	.word	0x00010d40
    403c:	00010d52 	.word	0x00010d52
    4040:	00010d46 	.word	0x00010d46
    4044:	00010d4c 	.word	0x00010d4c

00004048 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
  switch(_type) {
    4048:	7d03      	ldrb	r3, [r0, #20]
    404a:	2b15      	cmp	r3, #21
    404c:	d006      	beq.n	405c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    404e:	2b16      	cmp	r3, #22
    4050:	d004      	beq.n	405c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    4052:	2b0b      	cmp	r3, #11
    4054:	d102      	bne.n	405c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
      sensor->min_delay = 1000000L;  // 1 second (in microseconds)
    4056:	4b02      	ldr	r3, [pc, #8]	; (4060 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x18>)
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    4058:	624b      	str	r3, [r1, #36]	; 0x24
}
    405a:	4770      	bx	lr
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    405c:	4b01      	ldr	r3, [pc, #4]	; (4064 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>)
    405e:	e7fb      	b.n	4058 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x10>
    4060:	000f4240 	.word	0x000f4240
    4064:	001e8480 	.word	0x001e8480

00004068 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:
void DHT_Unified::Temperature::getSensor(sensor_t* sensor) {
    4068:	b570      	push	{r4, r5, r6, lr}
    406a:	000c      	movs	r4, r1
    406c:	0005      	movs	r5, r0
  memset(sensor, 0, sizeof(sensor_t));
    406e:	2228      	movs	r2, #40	; 0x28
    4070:	2100      	movs	r1, #0
    4072:	0020      	movs	r0, r4
    4074:	f008 fd28 	bl	cac8 <memset>
  _parent->setName(sensor);
    4078:	0021      	movs	r1, r4
    407a:	68a8      	ldr	r0, [r5, #8]
    407c:	f7ff ffc4 	bl	4008 <_ZN11DHT_Unified7setNameEP8sensor_t>
  sensor->version         = DHT_SENSOR_VERSION;
    4080:	2301      	movs	r3, #1
    4082:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    4084:	68eb      	ldr	r3, [r5, #12]
  _parent->setMinDelay(sensor);
    4086:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    4088:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    408a:	230d      	movs	r3, #13
  _parent->setMinDelay(sensor);
    408c:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    408e:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    4090:	f7ff ffda 	bl	4048 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    4094:	68ab      	ldr	r3, [r5, #8]
    4096:	7d1a      	ldrb	r2, [r3, #20]
    4098:	2a15      	cmp	r2, #21
    409a:	d00b      	beq.n	40b4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4c>
    409c:	2a16      	cmp	r2, #22
    409e:	d00f      	beq.n	40c0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x58>
    40a0:	2300      	movs	r3, #0
    40a2:	2a0b      	cmp	r2, #11
    40a4:	d10e      	bne.n	40c4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x5c>
      sensor->min_value   = 0.0F;
    40a6:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 2.0F;
    40a8:	2380      	movs	r3, #128	; 0x80
      sensor->max_value   = 50.0F;
    40aa:	4a08      	ldr	r2, [pc, #32]	; (40cc <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x64>)
      sensor->resolution  = 2.0F;
    40ac:	05db      	lsls	r3, r3, #23
      sensor->max_value   = 50.0F;
    40ae:	61a2      	str	r2, [r4, #24]
      sensor->resolution  = 0.0F;
    40b0:	6223      	str	r3, [r4, #32]
}
    40b2:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 80.0F;
    40b4:	4b06      	ldr	r3, [pc, #24]	; (40d0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x68>)
      sensor->max_value   = 125.0F;
    40b6:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = -40.0F;
    40b8:	4b06      	ldr	r3, [pc, #24]	; (40d4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6c>)
    40ba:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    40bc:	4b06      	ldr	r3, [pc, #24]	; (40d8 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>)
    40be:	e7f7      	b.n	40b0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
      sensor->max_value   = 125.0F;
    40c0:	4b06      	ldr	r3, [pc, #24]	; (40dc <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x74>)
    40c2:	e7f8      	b.n	40b6 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4e>
      sensor->max_value   = 0.0F;
    40c4:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    40c6:	61e3      	str	r3, [r4, #28]
    40c8:	e7f2      	b.n	40b0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	42480000 	.word	0x42480000
    40d0:	42a00000 	.word	0x42a00000
    40d4:	c2200000 	.word	0xc2200000
    40d8:	3dcccccd 	.word	0x3dcccccd
    40dc:	42fa0000 	.word	0x42fa0000

000040e0 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

void DHT_Unified::Humidity::getSensor(sensor_t* sensor) {
    40e0:	b570      	push	{r4, r5, r6, lr}
    40e2:	000c      	movs	r4, r1
    40e4:	0005      	movs	r5, r0
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    40e6:	2228      	movs	r2, #40	; 0x28
    40e8:	2100      	movs	r1, #0
    40ea:	0020      	movs	r0, r4
    40ec:	f008 fcec 	bl	cac8 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    40f0:	0021      	movs	r1, r4
    40f2:	68a8      	ldr	r0, [r5, #8]
    40f4:	f7ff ff88 	bl	4008 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version         = DHT_SENSOR_VERSION;
    40f8:	2301      	movs	r3, #1
    40fa:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    40fc:	68eb      	ldr	r3, [r5, #12]
  // Set type and characteristics.
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
    40fe:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    4100:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    4102:	230c      	movs	r3, #12
  _parent->setMinDelay(sensor);
    4104:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    4106:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    4108:	f7ff ff9e 	bl	4048 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    410c:	68ab      	ldr	r3, [r5, #8]
    410e:	7d1b      	ldrb	r3, [r3, #20]
    4110:	2b15      	cmp	r3, #21
    4112:	d00a      	beq.n	412a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    4114:	2b16      	cmp	r3, #22
    4116:	d008      	beq.n	412a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    4118:	2b0b      	cmp	r3, #11
    411a:	d10c      	bne.n	4136 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x56>
    case DHT11:
      sensor->max_value   = 80.0F;
    411c:	4b08      	ldr	r3, [pc, #32]	; (4140 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x60>)
    411e:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 20.0F;
    4120:	4b08      	ldr	r3, [pc, #32]	; (4144 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x64>)
    4122:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 5.0F;
    4124:	4b08      	ldr	r3, [pc, #32]	; (4148 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x68>)
      break;
    default:
      // Unknown type, default to 0.
      sensor->max_value   = 0.0F;
      sensor->min_value   = 0.0F;
      sensor->resolution  = 0.0F;
    4126:	6223      	str	r3, [r4, #32]
      break;
  }
}
    4128:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 100.0F;
    412a:	4b08      	ldr	r3, [pc, #32]	; (414c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6c>)
    412c:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    412e:	2300      	movs	r3, #0
    4130:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    4132:	4b07      	ldr	r3, [pc, #28]	; (4150 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x70>)
    4134:	e7f7      	b.n	4126 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
      sensor->max_value   = 0.0F;
    4136:	2300      	movs	r3, #0
    4138:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    413a:	61e3      	str	r3, [r4, #28]
    413c:	e7f3      	b.n	4126 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	42a00000 	.word	0x42a00000
    4144:	41a00000 	.word	0x41a00000
    4148:	40a00000 	.word	0x40a00000
    414c:	42c80000 	.word	0x42c80000
    4150:	3dcccccd 	.word	0x3dcccccd

00004154 <_ZN17RunningStatistics13setWindowSecsEf>:
RunningStatistics::RunningStatistics() {
  setWindowSecs( 1 );   // setup with one second average
  setInitialValue( 0 ); // start with zero
}

void RunningStatistics::setWindowSecs( float windowSecs ) {
    4154:	b510      	push	{r4, lr}
    4156:	0004      	movs	r4, r0
  AverageSecs = windowSecs;
    4158:	c002      	stmia	r0!, {r1}
  
  averageValue.setRiseTime( AverageSecs );
    415a:	f001 fdfd 	bl	5d58 <_ZN20FilterOnePoleCascade11setRiseTimeEf>
  averageSquareValue.setRiseTime( AverageSecs );
    415e:	0020      	movs	r0, r4
    4160:	6821      	ldr	r1, [r4, #0]
    4162:	3044      	adds	r0, #68	; 0x44
    4164:	f001 fdf8 	bl	5d58 <_ZN20FilterOnePoleCascade11setRiseTimeEf>
}
    4168:	bd10      	pop	{r4, pc}

0000416a <_ZN17RunningStatistics15setInitialValueEff>:

void RunningStatistics::setInitialValue( float initialMean, float initialSigma ) {
    416a:	b570      	push	{r4, r5, r6, lr}
    416c:	1c0d      	adds	r5, r1, #0
    416e:	0004      	movs	r4, r0
  averageValue.setToNewValue( initialMean );
    4170:	3004      	adds	r0, #4
void RunningStatistics::setInitialValue( float initialMean, float initialSigma ) {
    4172:	1c16      	adds	r6, r2, #0
  averageValue.setToNewValue( initialMean );
    4174:	f001 fe0d 	bl	5d92 <_ZN20FilterOnePoleCascade13setToNewValueEf>
  averageSquareValue.setToNewValue( sq(initialMean) + sq(initialSigma ) );
    4178:	1c29      	adds	r1, r5, #0
    417a:	1c28      	adds	r0, r5, #0
    417c:	f006 f8e0 	bl	a340 <__aeabi_fmul>
    4180:	1c31      	adds	r1, r6, #0
    4182:	1c05      	adds	r5, r0, #0
    4184:	1c30      	adds	r0, r6, #0
    4186:	f006 f8db 	bl	a340 <__aeabi_fmul>
    418a:	1c01      	adds	r1, r0, #0
    418c:	1c28      	adds	r0, r5, #0
    418e:	f005 fd55 	bl	9c3c <__aeabi_fadd>
    4192:	1c01      	adds	r1, r0, #0
    4194:	0020      	movs	r0, r4
    4196:	3044      	adds	r0, #68	; 0x44
    4198:	f001 fdfb 	bl	5d92 <_ZN20FilterOnePoleCascade13setToNewValueEf>
}
    419c:	bd70      	pop	{r4, r5, r6, pc}

0000419e <_ZN17RunningStatisticsC1Ev>:
RunningStatistics::RunningStatistics() {
    419e:	b570      	push	{r4, r5, r6, lr}
    41a0:	26fe      	movs	r6, #254	; 0xfe
    41a2:	2500      	movs	r5, #0
    41a4:	0004      	movs	r4, r0
    41a6:	05b6      	lsls	r6, r6, #22
    41a8:	1c2a      	adds	r2, r5, #0
    41aa:	1c31      	adds	r1, r6, #0
    41ac:	3004      	adds	r0, #4
    41ae:	f001 fdab 	bl	5d08 <_ZN20FilterOnePoleCascadeC1Eff>
    41b2:	0020      	movs	r0, r4
    41b4:	1c2a      	adds	r2, r5, #0
    41b6:	1c31      	adds	r1, r6, #0
    41b8:	3044      	adds	r0, #68	; 0x44
    41ba:	f001 fda5 	bl	5d08 <_ZN20FilterOnePoleCascadeC1Eff>
  setWindowSecs( 1 );   // setup with one second average
    41be:	1c31      	adds	r1, r6, #0
    41c0:	0020      	movs	r0, r4
    41c2:	f7ff ffc7 	bl	4154 <_ZN17RunningStatistics13setWindowSecsEf>
  setInitialValue( 0 ); // start with zero
    41c6:	1c2a      	adds	r2, r5, #0
    41c8:	1c29      	adds	r1, r5, #0
    41ca:	0020      	movs	r0, r4
    41cc:	f7ff ffcd 	bl	416a <_ZN17RunningStatistics15setInitialValueEff>
}
    41d0:	0020      	movs	r0, r4
    41d2:	bd70      	pop	{r4, r5, r6, pc}

000041d4 <_ZN17RunningStatistics5inputEf>:

void RunningStatistics::input( float inVal ) {
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	1c0d      	adds	r5, r1, #0
    41d8:	0004      	movs	r4, r0
  averageValue.input(inVal);              // calculates running average
    41da:	3004      	adds	r0, #4
    41dc:	f001 fdcc 	bl	5d78 <_ZN20FilterOnePoleCascade5inputEf>
  averageSquareValue.input(inVal*inVal);  // calculates running average of square
    41e0:	1c29      	adds	r1, r5, #0
    41e2:	1c28      	adds	r0, r5, #0
    41e4:	f006 f8ac 	bl	a340 <__aeabi_fmul>
    41e8:	1c01      	adds	r1, r0, #0
    41ea:	0020      	movs	r0, r4
    41ec:	3044      	adds	r0, #68	; 0x44
    41ee:	f001 fdc3 	bl	5d78 <_ZN20FilterOnePoleCascade5inputEf>
}
    41f2:	bd70      	pop	{r4, r5, r6, pc}

000041f4 <_ZN17RunningStatistics8varianceEv>:
  
float RunningStatistics::mean() {
  return averageValue.output();
}
  
float RunningStatistics::variance() {
    41f4:	b570      	push	{r4, r5, r6, lr}
    41f6:	0004      	movs	r4, r0
  float var = averageSquareValue.output() - averageValue.output()*averageValue.output();
    41f8:	3044      	adds	r0, #68	; 0x44
    41fa:	f001 fdd1 	bl	5da0 <_ZN20FilterOnePoleCascade6outputEv>
    41fe:	3404      	adds	r4, #4
    4200:	1c05      	adds	r5, r0, #0
    4202:	0020      	movs	r0, r4
    4204:	f001 fdcc 	bl	5da0 <_ZN20FilterOnePoleCascade6outputEv>
    4208:	1c06      	adds	r6, r0, #0
    420a:	0020      	movs	r0, r4
    420c:	f001 fdc8 	bl	5da0 <_ZN20FilterOnePoleCascade6outputEv>
    4210:	1c01      	adds	r1, r0, #0
    4212:	1c30      	adds	r0, r6, #0
    4214:	f006 f894 	bl	a340 <__aeabi_fmul>
    4218:	1c01      	adds	r1, r0, #0
    421a:	1c28      	adds	r0, r5, #0
    421c:	f006 f9b0 	bl	a580 <__aeabi_fsub>
    
  // because of the filtering, it's possible that this could be negative ... check!
  if( var < 0 ) var = 0;
    4220:	2100      	movs	r1, #0
  float var = averageSquareValue.output() - averageValue.output()*averageValue.output();
    4222:	1c04      	adds	r4, r0, #0
  if( var < 0 ) var = 0;
    4224:	f005 fcac 	bl	9b80 <__aeabi_fcmplt>
    4228:	2800      	cmp	r0, #0
    422a:	d000      	beq.n	422e <_ZN17RunningStatistics8varianceEv+0x3a>
    422c:	2400      	movs	r4, #0
    
  return var;
}
    422e:	1c20      	adds	r0, r4, #0
    4230:	bd70      	pop	{r4, r5, r6, pc}

00004232 <_ZN17RunningStatistics5sigmaEv>:
  
float RunningStatistics::sigma() {
    4232:	b510      	push	{r4, lr}
  
#ifdef ARM_FLOAT
  return sqrtf(variance());
#else
  return sqrt(variance());
    4234:	f7ff ffde 	bl	41f4 <_ZN17RunningStatistics8varianceEv>
  { return __builtin_sqrtf(__x); }
    4238:	f005 f8a6 	bl	9388 <sqrtf>
#endif

}
    423c:	bd10      	pop	{r4, pc}
	...

00004240 <_Z13rtc_time_initl>:
 *
 * @brief Init the RTC time
 *
 */
error_t rtc_time_init(int32_t zone)
{
    4240:	b513      	push	{r0, r1, r4, lr}
	// Initialize RTC clock code
	rtc.begin();
    4242:	4c0a      	ldr	r4, [pc, #40]	; (426c <_Z13rtc_time_initl+0x2c>)
    4244:	0020      	movs	r0, r4
    4246:	f001 febb 	bl	5fc0 <_ZN7RTCZero5beginEv>
	
	// Set default time
	struct rtc_clockreg_value time;
	time.day = 1;
    424a:	466a      	mov	r2, sp
    424c:	2301      	movs	r3, #1
    424e:	70d3      	strb	r3, [r2, #3]
	time.month = 1;
    4250:	7113      	strb	r3, [r2, #4]
	time.year = 2000;
    4252:	23fa      	movs	r3, #250	; 0xfa
    4254:	00db      	lsls	r3, r3, #3
    4256:	80d3      	strh	r3, [r2, #6]
	time.hour = 0;
    4258:	2300      	movs	r3, #0
	time.minute = 0;
	time.second = 0;
	
	rtc.rtc_set_time(&time);
    425a:	0020      	movs	r0, r4
    425c:	4669      	mov	r1, sp
	time.hour = 0;
    425e:	7093      	strb	r3, [r2, #2]
	time.minute = 0;
    4260:	7053      	strb	r3, [r2, #1]
	time.second = 0;
    4262:	7013      	strb	r3, [r2, #0]
	rtc.rtc_set_time(&time);
    4264:	f001 fe54 	bl	5f10 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
	
	// Set the timezone
	set_time_zone(zone);
}
    4268:	bd16      	pop	{r1, r2, r4, pc}
    426a:	46c0      	nop			; (mov r8, r8)
    426c:	20000959 	.word	0x20000959

00004270 <_Z13get_rtc_epochv>:
 * @brief Get the RTC time in local time
 *
 * 
 */
time_t get_rtc_epoch()
{
    4270:	b510      	push	{r4, lr}
	// Convert to UTC
	time_t epoch;
	epoch = rtc.getEpoch();
    4272:	4802      	ldr	r0, [pc, #8]	; (427c <_Z13get_rtc_epochv+0xc>)
    4274:	f001 fe02 	bl	5e7c <_ZN7RTCZero8getEpochEv>
	return epoch;

} // get_rtc_time()
    4278:	bd10      	pop	{r4, pc}
    427a:	46c0      	nop			; (mov r8, r8)
    427c:	20000959 	.word	0x20000959

00004280 <_Z18print_current_timev>:
* Prints the current time
* The time is set to 0 during boot
*
*/
void print_current_time(void)
{
    4280:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    4282:	4c0c      	ldr	r4, [pc, #48]	; (42b4 <_Z18print_current_timev+0x34>)
{
    4284:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    4286:	0020      	movs	r0, r4
    4288:	f001 fda6 	bl	5dd8 <_ZN7RTCZero10getSecondsEv>
    428c:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    428e:	0020      	movs	r0, r4
    4290:	f001 fda8 	bl	5de4 <_ZN7RTCZero10getMinutesEv>
    4294:	0005      	movs	r5, r0
	c = rtc.getHours();
    4296:	0020      	movs	r0, r4
    4298:	f001 fdaa 	bl	5df0 <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    429c:	002b      	movs	r3, r5
	c = rtc.getHours();
    429e:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    42a0:	4905      	ldr	r1, [pc, #20]	; (42b8 <_Z18print_current_timev+0x38>)
	a = rtc.getSeconds();
    42a2:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    42a4:	a802      	add	r0, sp, #8
    42a6:	f009 fce5 	bl	dc74 <siprintf>
	println(buffer);
    42aa:	a802      	add	r0, sp, #8
    42ac:	f000 f936 	bl	451c <_Z7printlnPKc>
	
} // print_current_time
    42b0:	b042      	add	sp, #264	; 0x108
    42b2:	bd70      	pop	{r4, r5, r6, pc}
    42b4:	20000959 	.word	0x20000959
    42b8:	00010dcb 	.word	0x00010dcb

000042bc <_Z14print_log_timev>:
* Prints the current time specifically for logging
* The time is set to 0 during boot
*
*/
void print_log_time(void)
{
    42bc:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    42be:	4c0c      	ldr	r4, [pc, #48]	; (42f0 <_Z14print_log_timev+0x34>)
{
    42c0:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    42c2:	0020      	movs	r0, r4
    42c4:	f001 fd88 	bl	5dd8 <_ZN7RTCZero10getSecondsEv>
    42c8:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    42ca:	0020      	movs	r0, r4
    42cc:	f001 fd8a 	bl	5de4 <_ZN7RTCZero10getMinutesEv>
    42d0:	0005      	movs	r5, r0
	c = rtc.getHours();
    42d2:	0020      	movs	r0, r4
    42d4:	f001 fd8c 	bl	5df0 <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    42d8:	002b      	movs	r3, r5
	c = rtc.getHours();
    42da:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    42dc:	4905      	ldr	r1, [pc, #20]	; (42f4 <_Z14print_log_timev+0x38>)
	a = rtc.getSeconds();
    42de:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    42e0:	a802      	add	r0, sp, #8
    42e2:	f009 fcc7 	bl	dc74 <siprintf>
	print(buffer);
    42e6:	a802      	add	r0, sp, #8
    42e8:	f000 f902 	bl	44f0 <_Z5printPKc>
	
} // print_current_time
    42ec:	b042      	add	sp, #264	; 0x108
    42ee:	bd70      	pop	{r4, r5, r6, pc}
    42f0:	20000959 	.word	0x20000959
    42f4:	00010d90 	.word	0x00010d90

000042f8 <_Z18print_current_datev>:
* Prints the current date
* The date is set to 0 during boot
*
*/
void print_current_date(void)
{
    42f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getYear();
    42fa:	4c0c      	ldr	r4, [pc, #48]	; (432c <_Z18print_current_datev+0x34>)
{
    42fc:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getYear();
    42fe:	0020      	movs	r0, r4
    4300:	f001 fd88 	bl	5e14 <_ZN7RTCZero7getYearEv>
    4304:	0006      	movs	r6, r0
	b = rtc.getDay();
    4306:	0020      	movs	r0, r4
    4308:	f001 fd78 	bl	5dfc <_ZN7RTCZero6getDayEv>
    430c:	0005      	movs	r5, r0
	c = rtc.getMonth();
    430e:	0020      	movs	r0, r4
    4310:	f001 fd7a 	bl	5e08 <_ZN7RTCZero8getMonthEv>
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4314:	002b      	movs	r3, r5
	c = rtc.getMonth();
    4316:	0002      	movs	r2, r0
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4318:	4905      	ldr	r1, [pc, #20]	; (4330 <_Z18print_current_datev+0x38>)
	a = rtc.getYear();
    431a:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    431c:	a802      	add	r0, sp, #8
    431e:	f009 fca9 	bl	dc74 <siprintf>
	println(buffer);
    4322:	a802      	add	r0, sp, #8
    4324:	f000 f8fa 	bl	451c <_Z7printlnPKc>
	
} // print_current_date
    4328:	b042      	add	sp, #264	; 0x108
    432a:	bd70      	pop	{r4, r5, r6, pc}
    432c:	20000959 	.word	0x20000959
    4330:	00010da7 	.word	0x00010da7

00004334 <_GLOBAL__sub_I_rtc>:
    4334:	b510      	push	{r4, lr}
RTCZero rtc;
    4336:	4802      	ldr	r0, [pc, #8]	; (4340 <_GLOBAL__sub_I_rtc+0xc>)
    4338:	f001 fd40 	bl	5dbc <_ZN7RTCZeroC1Ev>
} // print_current_date
    433c:	bd10      	pop	{r4, pc}
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	20000959 	.word	0x20000959

00004344 <_Z10dlog_leveli>:


void dlog_level(int level)
{
    /* force level bounds */
    level = level >= numlevels ? numlevels - 1 : level;
    4344:	2807      	cmp	r0, #7
    4346:	dd00      	ble.n	434a <_Z10dlog_leveli+0x6>
    4348:	2007      	movs	r0, #7
    level = level < 0 ? 0 : level;
    434a:	43c3      	mvns	r3, r0
    434c:	17db      	asrs	r3, r3, #31
    434e:	4018      	ands	r0, r3

    log_level = level;
    4350:	4b01      	ldr	r3, [pc, #4]	; (4358 <_Z10dlog_leveli+0x14>)
    4352:	6018      	str	r0, [r3, #0]
} // dlog_level
    4354:	4770      	bx	lr
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	20000090 	.word	0x20000090

0000435c <_Z8log_initP7Serial_mm>:
{
    435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pSerMon = pSerial;
    435e:	4e0e      	ldr	r6, [pc, #56]	; (4398 <_Z8log_initP7Serial_mm+0x3c>)
{
    4360:	0017      	movs	r7, r2
	pSerMon = pSerial;
    4362:	6030      	str	r0, [r6, #0]
	SerMon.begin(baud);
    4364:	f7fe fb50 	bl	2a08 <_ZN7Serial_5beginEm>
	log_enabled = false;
    4368:	2300      	movs	r3, #0
    436a:	2408      	movs	r4, #8
    436c:	4d0b      	ldr	r5, [pc, #44]	; (439c <_Z8log_initP7Serial_mm+0x40>)
    436e:	702b      	strb	r3, [r5, #0]
		if (!SerMon){
    4370:	6830      	ldr	r0, [r6, #0]
    4372:	f7fe fb4b 	bl	2a0c <_ZN7Serial_cvbEv>
    4376:	2800      	cmp	r0, #0
    4378:	d10a      	bne.n	4390 <_Z8log_initP7Serial_mm+0x34>
			delay(2000);
    437a:	20fa      	movs	r0, #250	; 0xfa
    437c:	3c01      	subs	r4, #1
    437e:	00c0      	lsls	r0, r0, #3
    4380:	f7fe f9ae 	bl	26e0 <delay>
	for (int indx=0 ; indx < 8 ; indx++) {
    4384:	2c00      	cmp	r4, #0
    4386:	d1f3      	bne.n	4370 <_Z8log_initP7Serial_mm+0x14>
	dlog_level(log_level);
    4388:	0038      	movs	r0, r7
    438a:	f7ff ffdb 	bl	4344 <_Z10dlog_leveli>
} // log_init
    438e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_enabled = true;
    4390:	2301      	movs	r3, #1
    4392:	702b      	strb	r3, [r5, #0]
			break;
    4394:	e7f8      	b.n	4388 <_Z8log_initP7Serial_mm+0x2c>
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	2000095c 	.word	0x2000095c
    439c:	2000095a 	.word	0x2000095a

000043a0 <_Z4dlogiPKcz>:


void dlog(int level, const char *format, ...)
{
    43a0:	b40e      	push	{r1, r2, r3}
    43a2:	b500      	push	{lr}
    va_list args;
	char buffer[PRINTF_LEN];
	
	// Is logging enabled?
	if (!log_enabled)
    43a4:	4b0c      	ldr	r3, [pc, #48]	; (43d8 <_Z4dlogiPKcz+0x38>)
{
    43a6:	b0c2      	sub	sp, #264	; 0x108
	if (!log_enabled)
    43a8:	781b      	ldrb	r3, [r3, #0]
    43aa:	2b00      	cmp	r3, #0
    43ac:	d010      	beq.n	43d0 <_Z4dlogiPKcz+0x30>
	{
		return;
	}
   
    // Check debug log
    if (level > log_level) 
    43ae:	4b0b      	ldr	r3, [pc, #44]	; (43dc <_Z4dlogiPKcz+0x3c>)
    43b0:	681b      	ldr	r3, [r3, #0]
    43b2:	4283      	cmp	r3, r0
    43b4:	db0c      	blt.n	43d0 <_Z4dlogiPKcz+0x30>
	{
        return;
    }

	// Print time
	print_log_time();
    43b6:	f7ff ff81 	bl	42bc <_Z14print_log_timev>

	// Print to serial port using the format
	va_start( args, format );
    43ba:	aa44      	add	r2, sp, #272	; 0x110
	vsprintf( buffer,format, args );
    43bc:	9943      	ldr	r1, [sp, #268]	; 0x10c
    43be:	a802      	add	r0, sp, #8
	va_start( args, format );
    43c0:	9201      	str	r2, [sp, #4]
	vsprintf( buffer,format, args );
    43c2:	f009 ffd7 	bl	e374 <vsiprintf>
	SerMon.println(buffer);
    43c6:	4b06      	ldr	r3, [pc, #24]	; (43e0 <_Z4dlogiPKcz+0x40>)
    43c8:	a902      	add	r1, sp, #8
    43ca:	6818      	ldr	r0, [r3, #0]
    43cc:	f000 fdb0 	bl	4f30 <_ZN5Print7printlnEPKc>
	va_end(args);

} // dlog
    43d0:	b042      	add	sp, #264	; 0x108
    43d2:	bc08      	pop	{r3}
    43d4:	b003      	add	sp, #12
    43d6:	4718      	bx	r3
    43d8:	2000095a 	.word	0x2000095a
    43dc:	20000090 	.word	0x20000090
    43e0:	2000095c 	.word	0x2000095c

000043e4 <_Z5ddumpiPKcPKvi>:


void ddump(int level, const char *label, const void *data, int datalen)
{
    43e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43e6:	001f      	movs	r7, r3
    const uint8_t *b = (const uint8_t *) data;
	char buffer[PRINTF_LEN];
    int i;
    
    // Is logging enabled?
    if (!log_enabled)
    43e8:	4b16      	ldr	r3, [pc, #88]	; (4444 <_Z5ddumpiPKcPKvi+0x60>)
{
    43ea:	b0c1      	sub	sp, #260	; 0x104
    if (!log_enabled)
    43ec:	781b      	ldrb	r3, [r3, #0]
{
    43ee:	000c      	movs	r4, r1
    43f0:	0016      	movs	r6, r2
    if (!log_enabled)
    43f2:	2b00      	cmp	r3, #0
    43f4:	d024      	beq.n	4440 <_Z5ddumpiPKcPKvi+0x5c>
    {
	    return;
    }

    if (level > log_level) 
    43f6:	4b14      	ldr	r3, [pc, #80]	; (4448 <_Z5ddumpiPKcPKvi+0x64>)
    43f8:	681b      	ldr	r3, [r3, #0]
    43fa:	4283      	cmp	r3, r0
    43fc:	db20      	blt.n	4440 <_Z5ddumpiPKcPKvi+0x5c>
	{
        return;
    }

	// Print time
	print_log_time();
    43fe:	f7ff ff5d 	bl	42bc <_Z14print_log_timev>
    4402:	4d12      	ldr	r5, [pc, #72]	; (444c <_Z5ddumpiPKcPKvi+0x68>)

    if (label) 
    4404:	2c00      	cmp	r4, #0
    4406:	d008      	beq.n	441a <_Z5ddumpiPKcPKvi+0x36>
	{
		sprintf( buffer, "%s:", label );
    4408:	4911      	ldr	r1, [pc, #68]	; (4450 <_Z5ddumpiPKcPKvi+0x6c>)
    440a:	0022      	movs	r2, r4
    440c:	4668      	mov	r0, sp
    440e:	f009 fc31 	bl	dc74 <siprintf>
        SerMon.print(buffer);
    4412:	4669      	mov	r1, sp
    4414:	6828      	ldr	r0, [r5, #0]
    4416:	f000 fd66 	bl	4ee6 <_ZN5Print5printEPKc>
{
    441a:	0034      	movs	r4, r6
    }

    for(i = 0; i < datalen; i++) 
    441c:	1ba3      	subs	r3, r4, r6
    441e:	42bb      	cmp	r3, r7
    4420:	da0a      	bge.n	4438 <_Z5ddumpiPKcPKvi+0x54>
	{
		sprintf( buffer, " %02x", b[i] );
    4422:	7822      	ldrb	r2, [r4, #0]
    4424:	490b      	ldr	r1, [pc, #44]	; (4454 <_Z5ddumpiPKcPKvi+0x70>)
    4426:	4668      	mov	r0, sp
    4428:	f009 fc24 	bl	dc74 <siprintf>
        SerMon.print(buffer);
    442c:	4669      	mov	r1, sp
    442e:	6828      	ldr	r0, [r5, #0]
    4430:	f000 fd59 	bl	4ee6 <_ZN5Print5printEPKc>
    4434:	3401      	adds	r4, #1
    4436:	e7f1      	b.n	441c <_Z5ddumpiPKcPKvi+0x38>
    }
    
    SerMon.println("");
    4438:	4907      	ldr	r1, [pc, #28]	; (4458 <_Z5ddumpiPKcPKvi+0x74>)
    443a:	6828      	ldr	r0, [r5, #0]
    443c:	f000 fd78 	bl	4f30 <_ZN5Print7printlnEPKc>

} // ddump
    4440:	b041      	add	sp, #260	; 0x104
    4442:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4444:	2000095a 	.word	0x2000095a
    4448:	20000090 	.word	0x20000090
    444c:	2000095c 	.word	0x2000095c
    4450:	00010e2a 	.word	0x00010e2a
    4454:	00010e2e 	.word	0x00010e2e
    4458:	0001113e 	.word	0x0001113e

0000445c <_Z7log_msgPKcPKvii>:


void log_msg(const char *label, const void *data, int datalen, int eol)
{
    445c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    445e:	9301      	str	r3, [sp, #4]
    static char llabel[64];
    static int llen;
    static uint8_t line[256];
    
    // Is logging enabled?
    if (!log_enabled)
    4460:	4b1e      	ldr	r3, [pc, #120]	; (44dc <_Z7log_msgPKcPKvii+0x80>)
{
    4462:	0006      	movs	r6, r0
    if (!log_enabled)
    4464:	781b      	ldrb	r3, [r3, #0]
{
    4466:	9100      	str	r1, [sp, #0]
    4468:	0014      	movs	r4, r2
    if (!log_enabled)
    446a:	2b00      	cmp	r3, #0
    446c:	d034      	beq.n	44d8 <_Z7log_msgPKcPKvii+0x7c>
    {
	    return;
    }

    if ( LOG_DEBUG > log_level ) 
    446e:	4b1c      	ldr	r3, [pc, #112]	; (44e0 <_Z7log_msgPKcPKvii+0x84>)
    4470:	681b      	ldr	r3, [r3, #0]
    4472:	2b06      	cmp	r3, #6
    4474:	dd30      	ble.n	44d8 <_Z7log_msgPKcPKvii+0x7c>
	{
        return;
    }

    if ((!eol || llen) && (llen + datalen < sizeof(line))) {
    4476:	9b01      	ldr	r3, [sp, #4]
    4478:	4d1a      	ldr	r5, [pc, #104]	; (44e4 <_Z7log_msgPKcPKvii+0x88>)
    447a:	2b00      	cmp	r3, #0
    447c:	d002      	beq.n	4484 <_Z7log_msgPKcPKvii+0x28>
    447e:	682b      	ldr	r3, [r5, #0]
    4480:	2b00      	cmp	r3, #0
    4482:	d012      	beq.n	44aa <_Z7log_msgPKcPKvii+0x4e>
    4484:	682b      	ldr	r3, [r5, #0]
    4486:	18e7      	adds	r7, r4, r3
    4488:	2fff      	cmp	r7, #255	; 0xff
    448a:	d80e      	bhi.n	44aa <_Z7log_msgPKcPKvii+0x4e>
        /* buffer if we can */
        memcpy(line + llen, data, datalen);
    448c:	4816      	ldr	r0, [pc, #88]	; (44e8 <_Z7log_msgPKcPKvii+0x8c>)
    448e:	0022      	movs	r2, r4
    4490:	18c0      	adds	r0, r0, r3
    4492:	9900      	ldr	r1, [sp, #0]
    4494:	f008 fafd 	bl	ca92 <memcpy>
        llen += datalen;
        datalen = 0;    /* consumed */
    4498:	1e34      	subs	r4, r6, #0
        llen += datalen;
    449a:	602f      	str	r7, [r5, #0]
        if (label) {
    449c:	d005      	beq.n	44aa <_Z7log_msgPKcPKvii+0x4e>
            strncpy(llabel, label, sizeof(llabel)-1);
    449e:	223f      	movs	r2, #63	; 0x3f
    44a0:	0031      	movs	r1, r6
    44a2:	4812      	ldr	r0, [pc, #72]	; (44ec <_Z7log_msgPKcPKvii+0x90>)
    44a4:	f009 fc54 	bl	dd50 <strncpy>
        datalen = 0;    /* consumed */
    44a8:	2400      	movs	r4, #0
        }
    }

    if (eol || datalen) {
    44aa:	9b01      	ldr	r3, [sp, #4]
    44ac:	4323      	orrs	r3, r4
    44ae:	d013      	beq.n	44d8 <_Z7log_msgPKcPKvii+0x7c>
        /* flush */
        if (llen) {
    44b0:	682b      	ldr	r3, [r5, #0]
    44b2:	2b00      	cmp	r3, #0
    44b4:	d008      	beq.n	44c8 <_Z7log_msgPKcPKvii+0x6c>
            ddump(LOG_DEBUG, llabel, line, llen);
    44b6:	4f0d      	ldr	r7, [pc, #52]	; (44ec <_Z7log_msgPKcPKvii+0x90>)
    44b8:	4a0b      	ldr	r2, [pc, #44]	; (44e8 <_Z7log_msgPKcPKvii+0x8c>)
    44ba:	0039      	movs	r1, r7
    44bc:	2007      	movs	r0, #7
    44be:	f7ff ff91 	bl	43e4 <_Z5ddumpiPKcPKvi>
            llabel[0] = 0;
    44c2:	2300      	movs	r3, #0
    44c4:	703b      	strb	r3, [r7, #0]
            llen = 0;
    44c6:	602b      	str	r3, [r5, #0]
        }
        
        if (datalen) {
    44c8:	2c00      	cmp	r4, #0
    44ca:	d005      	beq.n	44d8 <_Z7log_msgPKcPKvii+0x7c>
            ddump(LOG_DEBUG, label, data, datalen);
    44cc:	0023      	movs	r3, r4
    44ce:	9a00      	ldr	r2, [sp, #0]
    44d0:	0031      	movs	r1, r6
    44d2:	2007      	movs	r0, #7
    44d4:	f7ff ff86 	bl	43e4 <_Z5ddumpiPKcPKvi>
        }

    } // if

} // log_msg
    44d8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	2000095a 	.word	0x2000095a
    44e0:	20000090 	.word	0x20000090
    44e4:	20000a60 	.word	0x20000a60
    44e8:	20000960 	.word	0x20000960
    44ec:	20000a64 	.word	0x20000a64

000044f0 <_Z5printPKc>:


void print( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    44f0:	4b07      	ldr	r3, [pc, #28]	; (4510 <_Z5printPKc+0x20>)
{
    44f2:	b510      	push	{r4, lr}
	if (!log_enabled)
    44f4:	781b      	ldrb	r3, [r3, #0]
{
    44f6:	0001      	movs	r1, r0
	if (!log_enabled)
    44f8:	2b00      	cmp	r3, #0
    44fa:	d007      	beq.n	450c <_Z5printPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    44fc:	4b05      	ldr	r3, [pc, #20]	; (4514 <_Z5printPKc+0x24>)
    44fe:	681b      	ldr	r3, [r3, #0]
    4500:	2b06      	cmp	r3, #6
    4502:	dd03      	ble.n	450c <_Z5printPKc+0x1c>
	{
        return;
    }

	SerMon.print(buf);
    4504:	4b04      	ldr	r3, [pc, #16]	; (4518 <_Z5printPKc+0x28>)
    4506:	6818      	ldr	r0, [r3, #0]
    4508:	f000 fced 	bl	4ee6 <_ZN5Print5printEPKc>
	
} // print
    450c:	bd10      	pop	{r4, pc}
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	2000095a 	.word	0x2000095a
    4514:	20000090 	.word	0x20000090
    4518:	2000095c 	.word	0x2000095c

0000451c <_Z7printlnPKc>:


void println( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    451c:	4b07      	ldr	r3, [pc, #28]	; (453c <_Z7printlnPKc+0x20>)
{
    451e:	b510      	push	{r4, lr}
	if (!log_enabled)
    4520:	781b      	ldrb	r3, [r3, #0]
{
    4522:	0001      	movs	r1, r0
	if (!log_enabled)
    4524:	2b00      	cmp	r3, #0
    4526:	d007      	beq.n	4538 <_Z7printlnPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    4528:	4b05      	ldr	r3, [pc, #20]	; (4540 <_Z7printlnPKc+0x24>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	2b06      	cmp	r3, #6
    452e:	dd03      	ble.n	4538 <_Z7printlnPKc+0x1c>
	{
        return;
    }

	SerMon.println(buf);
    4530:	4b04      	ldr	r3, [pc, #16]	; (4544 <_Z7printlnPKc+0x28>)
    4532:	6818      	ldr	r0, [r3, #0]
    4534:	f000 fcfc 	bl	4f30 <_ZN5Print7printlnEPKc>
	
} // println
    4538:	bd10      	pop	{r4, pc}
    453a:	46c0      	nop			; (mov r8, r8)
    453c:	2000095a 	.word	0x2000095a
    4540:	20000090 	.word	0x20000090
    4544:	2000095c 	.word	0x2000095c

00004548 <_Z8printnumi>:


void printnum( int n )
{
	// Is logging enabled?
	if (!log_enabled)
    4548:	4b07      	ldr	r3, [pc, #28]	; (4568 <_Z8printnumi+0x20>)
{
    454a:	b510      	push	{r4, lr}
	if (!log_enabled)
    454c:	781b      	ldrb	r3, [r3, #0]
{
    454e:	0001      	movs	r1, r0
	if (!log_enabled)
    4550:	2b00      	cmp	r3, #0
    4552:	d008      	beq.n	4566 <_Z8printnumi+0x1e>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    4554:	4b05      	ldr	r3, [pc, #20]	; (456c <_Z8printnumi+0x24>)
    4556:	681b      	ldr	r3, [r3, #0]
    4558:	2b06      	cmp	r3, #6
    455a:	dd04      	ble.n	4566 <_Z8printnumi+0x1e>
	{
        return;
    }

	SerMon.print(n);
    455c:	4b04      	ldr	r3, [pc, #16]	; (4570 <_Z8printnumi+0x28>)
    455e:	220a      	movs	r2, #10
    4560:	6818      	ldr	r0, [r3, #0]
    4562:	f000 fd44 	bl	4fee <_ZN5Print5printEii>
	
} // println
    4566:	bd10      	pop	{r4, pc}
    4568:	2000095a 	.word	0x2000095a
    456c:	20000090 	.word	0x20000090
    4570:	2000095c 	.word	0x2000095c

00004574 <_Z12capture_dumpPhi>:
	char str[6];
    uint8_t ch;
	uint16_t ix;
	
	// Is logging enabled?
	if (!log_enabled)
    4574:	4b1b      	ldr	r3, [pc, #108]	; (45e4 <_Z12capture_dumpPhi+0x70>)
{
    4576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!log_enabled)
    4578:	781b      	ldrb	r3, [r3, #0]
{
    457a:	0006      	movs	r6, r0
    457c:	000f      	movs	r7, r1
	if (!log_enabled)
    457e:	2b00      	cmp	r3, #0
    4580:	d02e      	beq.n	45e0 <_Z12capture_dumpPhi+0x6c>
	{
		return;
	}

    // Check debug log
    if ( LOG_DEBUG > log_level ) 
    4582:	4b19      	ldr	r3, [pc, #100]	; (45e8 <_Z12capture_dumpPhi+0x74>)
    4584:	681b      	ldr	r3, [r3, #0]
    4586:	2b06      	cmp	r3, #6
    4588:	dd2a      	ble.n	45e0 <_Z12capture_dumpPhi+0x6c>
	{
        return;
    }
	
	if (!p)
    458a:	2800      	cmp	r0, #0
    458c:	d100      	bne.n	4590 <_Z12capture_dumpPhi+0x1c>
	{
		p = &capture_buf[0];
    458e:	4e17      	ldr	r6, [pc, #92]	; (45ec <_Z12capture_dumpPhi+0x78>)
	}

	if ( !count && ( cap_count >= 0 ))
    4590:	2f00      	cmp	r7, #0
    4592:	d101      	bne.n	4598 <_Z12capture_dumpPhi+0x24>
	{
		count = cap_count;
    4594:	4b16      	ldr	r3, [pc, #88]	; (45f0 <_Z12capture_dumpPhi+0x7c>)
    4596:	881f      	ldrh	r7, [r3, #0]
		
	}
	
	SerMon.println("======================================================");
    4598:	4d16      	ldr	r5, [pc, #88]	; (45f4 <_Z12capture_dumpPhi+0x80>)
    459a:	4917      	ldr	r1, [pc, #92]	; (45f8 <_Z12capture_dumpPhi+0x84>)
    459c:	6828      	ldr	r0, [r5, #0]
    459e:	f000 fcc7 	bl	4f30 <_ZN5Print7printlnEPKc>
	for( ix = 0; ix < count-1; ix++ )
    45a2:	2400      	movs	r4, #0
    45a4:	1e7b      	subs	r3, r7, #1
		ch = p[ix];
		sprintf( str, "%02x,", ch );
		SerMon.print(str);

	} // for
	sprintf( str, "%02x", p[ix] );
    45a6:	5d32      	ldrb	r2, [r6, r4]
	for( ix = 0; ix < count-1; ix++ )
    45a8:	429c      	cmp	r4, r3
    45aa:	da0a      	bge.n	45c2 <_Z12capture_dumpPhi+0x4e>
		sprintf( str, "%02x,", ch );
    45ac:	4913      	ldr	r1, [pc, #76]	; (45fc <_Z12capture_dumpPhi+0x88>)
    45ae:	4668      	mov	r0, sp
    45b0:	f009 fb60 	bl	dc74 <siprintf>
	for( ix = 0; ix < count-1; ix++ )
    45b4:	3401      	adds	r4, #1
		SerMon.print(str);
    45b6:	4669      	mov	r1, sp
    45b8:	6828      	ldr	r0, [r5, #0]
    45ba:	f000 fc94 	bl	4ee6 <_ZN5Print5printEPKc>
	for( ix = 0; ix < count-1; ix++ )
    45be:	b2a4      	uxth	r4, r4
    45c0:	e7f0      	b.n	45a4 <_Z12capture_dumpPhi+0x30>
	sprintf( str, "%02x", p[ix] );
    45c2:	490f      	ldr	r1, [pc, #60]	; (4600 <_Z12capture_dumpPhi+0x8c>)
    45c4:	4668      	mov	r0, sp
    45c6:	f009 fb55 	bl	dc74 <siprintf>
	SerMon.println(str);
    45ca:	4669      	mov	r1, sp
    45cc:	6828      	ldr	r0, [r5, #0]
    45ce:	f000 fcaf 	bl	4f30 <_ZN5Print7printlnEPKc>
	SerMon.println("======================================================");
    45d2:	4909      	ldr	r1, [pc, #36]	; (45f8 <_Z12capture_dumpPhi+0x84>)
    45d4:	6828      	ldr	r0, [r5, #0]
    45d6:	f000 fcab 	bl	4f30 <_ZN5Print7printlnEPKc>

	// Reset the count
	cap_count = 0;
    45da:	2200      	movs	r2, #0
    45dc:	4b04      	ldr	r3, [pc, #16]	; (45f0 <_Z12capture_dumpPhi+0x7c>)
    45de:	801a      	strh	r2, [r3, #0]

} // capture_dump
    45e0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    45e2:	46c0      	nop			; (mov r8, r8)
    45e4:	2000095a 	.word	0x2000095a
    45e8:	20000090 	.word	0x20000090
    45ec:	20000aa6 	.word	0x20000aa6
    45f0:	20000aa4 	.word	0x20000aa4
    45f4:	2000095c 	.word	0x2000095c
    45f8:	00010ded 	.word	0x00010ded
    45fc:	00010e24 	.word	0x00010e24
    4600:	00010e2f 	.word	0x00010e2f

00004604 <_Z8free_ramv>:


// Function to return the amount of Free Ram.
extern "C" char *sbrk(int i);
int free_ram()
{
    4604:	b513      	push	{r0, r1, r4, lr}
	char stack_dummy = 0;
    4606:	2000      	movs	r0, #0
    4608:	466b      	mov	r3, sp
    460a:	1ddc      	adds	r4, r3, #7
    460c:	71d8      	strb	r0, [r3, #7]
	return &stack_dummy - sbrk(0);
    460e:	f009 fc4b 	bl	dea8 <sbrk>
    4612:	1a20      	subs	r0, r4, r0
}
    4614:	bd16      	pop	{r1, r2, r4, pc}
	...

00004618 <_Z10eraseBlockv>:
#define BLOCKSIZE 256
#define debug;
SPIFlash flash;


bool eraseBlock(){
    4618:	b510      	push	{r4, lr}
	if (!flash.eraseBlock64K(1))
    461a:	2101      	movs	r1, #1
    461c:	4801      	ldr	r0, [pc, #4]	; (4624 <_Z10eraseBlockv+0xc>)
    461e:	f001 febb 	bl	6398 <_ZN8SPIFlash13eraseBlock64KEm>
	return false;
	else
	return true;
}
    4622:	bd10      	pop	{r4, pc}
    4624:	20000ea8 	.word	0x20000ea8

00004628 <_Z9getStringi>:
	str += inChar;
	// Serial.println("end run");
	str += '\0';
	return str;
}
String getString(int addr){
    4628:	b5f0      	push	{r4, r5, r6, r7, lr}
    462a:	b0c7      	sub	sp, #284	; 0x11c
    462c:	000c      	movs	r4, r1
    462e:	0005      	movs	r5, r0

	String output = "";
    4630:	4914      	ldr	r1, [pc, #80]	; (4684 <_Z9getStringi+0x5c>)
    4632:	a803      	add	r0, sp, #12
    4634:	f001 f89e 	bl	5774 <_ZN6StringC1EPKc>
	uint8_t data_buffer[BLOCKSIZE];
	flash.readByteArray(addr, &data_buffer[0], BLOCKSIZE);
    4638:	2300      	movs	r3, #0
    463a:	ae06      	add	r6, sp, #24
    463c:	9300      	str	r3, [sp, #0]
    463e:	3301      	adds	r3, #1
    4640:	0021      	movs	r1, r4
    4642:	33ff      	adds	r3, #255	; 0xff
    4644:	0032      	movs	r2, r6
    4646:	4810      	ldr	r0, [pc, #64]	; (4688 <_Z9getStringi+0x60>)
	for (int i = 2; i < BLOCKSIZE; i++)
    4648:	2780      	movs	r7, #128	; 0x80
	flash.readByteArray(addr, &data_buffer[0], BLOCKSIZE);
    464a:	f001 fd5b 	bl	6104 <_ZN8SPIFlash13readByteArrayEmPhjb>
	for (int i = 2; i < BLOCKSIZE; i++)
    464e:	2402      	movs	r4, #2
    4650:	007f      	lsls	r7, r7, #1
	{
		if (data_buffer[i] == 255 )
    4652:	5d31      	ldrb	r1, [r6, r4]
    4654:	29ff      	cmp	r1, #255	; 0xff
    4656:	d109      	bne.n	466c <_Z9getStringi+0x44>
		return output;
    4658:	a903      	add	r1, sp, #12
    465a:	0028      	movs	r0, r5
    465c:	f001 f834 	bl	56c8 <_ZN6StringC1EOS_>
	String output = "";
    4660:	a803      	add	r0, sp, #12
    4662:	f001 f83f 	bl	56e4 <_ZN6StringD1Ev>
		output += (char)data_buffer[i];
	}
	return "No Data";
	
}
    4666:	0028      	movs	r0, r5
    4668:	b047      	add	sp, #284	; 0x11c
    466a:	bdf0      	pop	{r4, r5, r6, r7, pc}

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    466c:	a803      	add	r0, sp, #12
	for (int i = 2; i < BLOCKSIZE; i++)
    466e:	3401      	adds	r4, #1
    4670:	f001 f8e1 	bl	5836 <_ZN6String6concatEc>
    4674:	42bc      	cmp	r4, r7
    4676:	d1ec      	bne.n	4652 <_Z9getStringi+0x2a>
	return "No Data";
    4678:	4904      	ldr	r1, [pc, #16]	; (468c <_Z9getStringi+0x64>)
    467a:	0028      	movs	r0, r5
    467c:	f001 f87a 	bl	5774 <_ZN6StringC1EPKc>
    4680:	e7ee      	b.n	4660 <_Z9getStringi+0x38>
    4682:	46c0      	nop			; (mov r8, r8)
    4684:	0001113e 	.word	0x0001113e
    4688:	20000ea8 	.word	0x20000ea8
    468c:	00010f81 	.word	0x00010f81

00004690 <_Z5getIDv>:
String getID(){
    4690:	b5f0      	push	{r4, r5, r6, r7, lr}

	String ID1 = "";
    4692:	4914      	ldr	r1, [pc, #80]	; (46e4 <_Z5getIDv+0x54>)
String getID(){
    4694:	b085      	sub	sp, #20
    4696:	0005      	movs	r5, r0
	//  Serial.println(F("Initialising"));
	//  UniqueIDdump(Serial);
	for (size_t i = 0; i < UniqueIDsize; i++)
    4698:	2400      	movs	r4, #0
	String ID1 = "";
    469a:	f001 f86b 	bl	5774 <_ZN6StringC1EPKc>
	{
		ID1 += String(UniqueID[i],HEX);
		if (i%4==3 && i < (UniqueIDsize - 1))
    469e:	2703      	movs	r7, #3
		ID1 += String(UniqueID[i],HEX);
    46a0:	4b11      	ldr	r3, [pc, #68]	; (46e8 <_Z5getIDv+0x58>)
    46a2:	2210      	movs	r2, #16
    46a4:	5d19      	ldrb	r1, [r3, r4]
    46a6:	a801      	add	r0, sp, #4
    46a8:	f001 f888 	bl	57bc <_ZN6StringC1Ehh>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    46ac:	a901      	add	r1, sp, #4
    46ae:	0028      	movs	r0, r5
    46b0:	f001 f8ae 	bl	5810 <_ZN6String6concatERKS_>
    46b4:	a801      	add	r0, sp, #4
    46b6:	f001 f815 	bl	56e4 <_ZN6StringD1Ev>
		if (i%4==3 && i < (UniqueIDsize - 1))
    46ba:	0023      	movs	r3, r4
    46bc:	1c66      	adds	r6, r4, #1
    46be:	403b      	ands	r3, r7
    46c0:	2b03      	cmp	r3, #3
    46c2:	d105      	bne.n	46d0 <_Z5getIDv+0x40>
    46c4:	2c0f      	cmp	r4, #15
    46c6:	d006      	beq.n	46d6 <_Z5getIDv+0x46>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    46c8:	4908      	ldr	r1, [pc, #32]	; (46ec <_Z5getIDv+0x5c>)
    46ca:	0028      	movs	r0, r5
    46cc:	f001 f8a6 	bl	581c <_ZN6String6concatEPKc>
	for (size_t i = 0; i < UniqueIDsize; i++)
    46d0:	0034      	movs	r4, r6
    46d2:	2e10      	cmp	r6, #16
    46d4:	d1e4      	bne.n	46a0 <_Z5getIDv+0x10>
		{
			ID1 += ("-");
		}
	}
	ID1.toUpperCase();
    46d6:	0028      	movs	r0, r5
    46d8:	f001 f8e7 	bl	58aa <_ZN6String11toUpperCaseEv>
	return ID1;
}
    46dc:	0028      	movs	r0, r5
    46de:	b005      	add	sp, #20
    46e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46e2:	46c0      	nop			; (mov r8, r8)
    46e4:	0001113e 	.word	0x0001113e
    46e8:	2000128c 	.word	0x2000128c
    46ec:	00012cf3 	.word	0x00012cf3

000046f0 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>:
// Register a sensor.
//
//////////////////////////////////////////////////////////////////////////
uint8_t sapi_register_sensor(char *sensor_type, SensorInitFuncPtr sensor_init, SensorReadFuncPtr sensor_read, SensorReadCfgFuncPtr sensor_readcfg,
							 SensorWriteCfgFuncPtr sensor_writecfg, uint8_t is_observer, uint32_t frequency)
{
    46f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46f2:	b087      	sub	sp, #28
    46f4:	9304      	str	r3, [sp, #16]
    46f6:	ab0c      	add	r3, sp, #48	; 0x30
    46f8:	9203      	str	r2, [sp, #12]
	uint8_t sensor_id = sensor_info_index;
    46fa:	4f1c      	ldr	r7, [pc, #112]	; (476c <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x7c>)
{
    46fc:	cb04      	ldmia	r3!, {r2}
	uint8_t sensor_id = sensor_info_index;
    46fe:	783d      	ldrb	r5, [r7, #0]
{
    4700:	781b      	ldrb	r3, [r3, #0]
	
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4702:	4c1b      	ldr	r4, [pc, #108]	; (4770 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x80>)
{
    4704:	9301      	str	r3, [sp, #4]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4706:	016b      	lsls	r3, r5, #5
    4708:	18e4      	adds	r4, r4, r3
{
    470a:	9102      	str	r1, [sp, #8]
    470c:	0006      	movs	r6, r0
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    470e:	0001      	movs	r1, r0
    4710:	0020      	movs	r0, r4
{
    4712:	9205      	str	r2, [sp, #20]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4714:	f009 fae7 	bl	dce6 <strcpy>
	sensor_info[sensor_id].init = sensor_init;
    4718:	9b02      	ldr	r3, [sp, #8]
    471a:	60a3      	str	r3, [r4, #8]
	sensor_info[sensor_id].read = sensor_read;
    471c:	9b03      	ldr	r3, [sp, #12]
    471e:	60e3      	str	r3, [r4, #12]
	sensor_info[sensor_id].readcfg = sensor_readcfg;
    4720:	9b04      	ldr	r3, [sp, #16]
    4722:	6123      	str	r3, [r4, #16]
	sensor_info[sensor_id].writecfg = sensor_writecfg;
    4724:	9b05      	ldr	r3, [sp, #20]
    4726:	6163      	str	r3, [r4, #20]
	sensor_info[sensor_id].frequency = frequency;
    4728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    472a:	61a3      	str	r3, [r4, #24]
	
	sensor_info[sensor_id].observer = 0;
	if (is_observer == 1)
    472c:	9b01      	ldr	r3, [sp, #4]
    472e:	2b01      	cmp	r3, #1
    4730:	d00c      	beq.n	474c <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x5c>
	sensor_info[sensor_id].observer = 0;
    4732:	2300      	movs	r3, #0
    4734:	7723      	strb	r3, [r4, #28]
		
		// Set the URI used for obtaining token etc in CoAP Observe response msg and set the observe handler, frequency, sensor id.
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
	}
	sensor_info_index++;
    4736:	783b      	ldrb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    4738:	0032      	movs	r2, r6
	sensor_info_index++;
    473a:	3301      	adds	r3, #1
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    473c:	490d      	ldr	r1, [pc, #52]	; (4774 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x84>)
    473e:	2007      	movs	r0, #7
	sensor_info_index++;
    4740:	703b      	strb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    4742:	f7ff fe2d 	bl	43a0 <_Z4dlogiPKcz>
	return sensor_id;
}
    4746:	0028      	movs	r0, r5
    4748:	b007      	add	sp, #28
    474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_info[sensor_id].observer = 1;
    474c:	466b      	mov	r3, sp
    474e:	791b      	ldrb	r3, [r3, #4]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    4750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		sensor_info[sensor_id].observer = 1;
    4752:	7723      	strb	r3, [r4, #28]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    4754:	4908      	ldr	r1, [pc, #32]	; (4778 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x88>)
    4756:	002b      	movs	r3, r5
    4758:	0030      	movs	r0, r6
    475a:	f003 f86b 	bl	7834 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    475e:	4907      	ldr	r1, [pc, #28]	; (477c <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x8c>)
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    4760:	0002      	movs	r2, r0
    4762:	7760      	strb	r0, [r4, #29]
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    4764:	2007      	movs	r0, #7
    4766:	f7ff fe1b 	bl	43a0 <_Z4dlogiPKcz>
    476a:	e7e4      	b.n	4736 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x46>
    476c:	20000ea6 	.word	0x20000ea6
    4770:	20000fb4 	.word	0x20000fb4
    4774:	00010f05 	.word	0x00010f05
    4778:	00004a8d 	.word	0x00004a8d
    477c:	00010ef1 	.word	0x00010ef1

00004780 <_Z16sapi_init_sensorh>:
//
// Initialize a sensor (hardware) and sensor related code.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t sapi_init_sensor(uint8_t sensor_id)
{
    4780:	b510      	push	{r4, lr}
	// Initialize Sensor
	SensorInitFuncPtr pInitFunc = sensor_info[sensor_id].init;
    4782:	0143      	lsls	r3, r0, #5
    4784:	4802      	ldr	r0, [pc, #8]	; (4790 <_Z16sapi_init_sensorh+0x10>)
    4786:	18c0      	adds	r0, r0, r3
	sapi_error_t rcode = (*pInitFunc)();
    4788:	6883      	ldr	r3, [r0, #8]
    478a:	4798      	blx	r3
	
	return rcode;
}
    478c:	bd10      	pop	{r4, pc}
    478e:	46c0      	nop			; (mov r8, r8)
    4790:	20000fb4 	.word	0x20000fb4

00004794 <_Z17cbor_enc_nic_typeP8cbor_bufPc>:
//
// Add sensor type to a CBOR payload wrapper
//
//////////////////////////////////////////////////////////////////////////
uint8_t cbor_enc_nic_type(struct cbor_buf *cbuf, char *sensor_type)
{
    4794:	b570      	push	{r4, r5, r6, lr}
    4796:	000d      	movs	r5, r1
	uint8_t rcode;

	// Top level map, first element is for device type.
	// Device type used to provide a namespace for use at the MQTT broker.
	if ((rcode = cbor_enc_map(cbuf, 2)))
    4798:	2102      	movs	r1, #2
{
    479a:	0004      	movs	r4, r0
	if ((rcode = cbor_enc_map(cbuf, 2)))
    479c:	f002 fa45 	bl	6c2a <_Z12cbor_enc_mapP8cbor_bufi>
    47a0:	b2c0      	uxtb	r0, r0
    47a2:	2800      	cmp	r0, #0
    47a4:	d116      	bne.n	47d4 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// NIC type, key and value
	if ((rcode = cbor_enc_int(cbuf, NAMESPACE_NIC_TYPE_KEY)))
    47a6:	0001      	movs	r1, r0
    47a8:	0020      	movs	r0, r4
    47aa:	f002 fa16 	bl	6bda <_Z12cbor_enc_intP8cbor_bufi>
    47ae:	b2c0      	uxtb	r0, r0
    47b0:	2800      	cmp	r0, #0
    47b2:	d10f      	bne.n	47d4 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}
	if ((rcode = cbor_enc_text(cbuf, sensor_type, strlen(sensor_type))))
    47b4:	0028      	movs	r0, r5
    47b6:	f009 fa9e 	bl	dcf6 <strlen>
    47ba:	0029      	movs	r1, r5
    47bc:	0002      	movs	r2, r0
    47be:	0020      	movs	r0, r4
    47c0:	f002 fa17 	bl	6bf2 <_Z13cbor_enc_textP8cbor_bufPKci>
    47c4:	b2c0      	uxtb	r0, r0
    47c6:	2800      	cmp	r0, #0
    47c8:	d104      	bne.n	47d4 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// Remaining device-specific key
	rcode = cbor_enc_int(cbuf, NAMESPACE_DEVICE_SPECIFIC_KEY);
    47ca:	2101      	movs	r1, #1
    47cc:	0020      	movs	r0, r4
    47ce:	f002 fa04 	bl	6bda <_Z12cbor_enc_intP8cbor_bufi>
    47d2:	b2c0      	uxtb	r0, r0
	return rcode;
}
    47d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000047d8 <_Z13build_rsp_msgP4mbufPhPcmh>:
//
// A typical CBOR payload: {0:"temp",1:<text payload>"}
//
//////////////////////////////////////////////////////////////////////////
error_t build_rsp_msg(struct mbuf *m, uint8_t *len, char *payload, uint32_t payloadlen, uint8_t sensor_id)
{
    47d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    47da:	b0a7      	sub	sp, #156	; 0x9c
    47dc:	001f      	movs	r7, r3
    47de:	ab2c      	add	r3, sp, #176	; 0xb0
    47e0:	9101      	str	r1, [sp, #4]
    47e2:	781c      	ldrb	r4, [r3, #0]
	
	// If payload needs to be in CBOR format we add the CBOR wrapper.
	error_t	rcode = ERR_FAIL;
	struct cbor_buf cbuf;
		
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    47e4:	a906      	add	r1, sp, #24
{
    47e6:	0005      	movs	r5, r0
    47e8:	0016      	movs	r6, r2
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    47ea:	a802      	add	r0, sp, #8
    47ec:	2280      	movs	r2, #128	; 0x80
    47ee:	f002 f9e3 	bl	6bb8 <_Z13cbor_enc_initP8cbor_bufPvi>
	
	if (!cbor_enc_nic_type(&cbuf, sensor_info[sensor_id].devicetype))
    47f2:	491c      	ldr	r1, [pc, #112]	; (4864 <_Z13build_rsp_msgP4mbufPhPcmh+0x8c>)
    47f4:	0164      	lsls	r4, r4, #5
    47f6:	1909      	adds	r1, r1, r4
    47f8:	a802      	add	r0, sp, #8
    47fa:	f7ff ffcb 	bl	4794 <_Z17cbor_enc_nic_typeP8cbor_bufPc>
    47fe:	2800      	cmp	r0, #0
    4800:	d003      	beq.n	480a <_Z13build_rsp_msgP4mbufPhPcmh+0x32>
{
    4802:	2363      	movs	r3, #99	; 0x63
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
	
	int freeram = free_ram();
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
	return ERR_OK;
}
    4804:	0018      	movs	r0, r3
    4806:	b027      	add	sp, #156	; 0x9c
    4808:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!cbor_enc_text(&cbuf, payload, payloadlen))
    480a:	0031      	movs	r1, r6
    480c:	003a      	movs	r2, r7
    480e:	a802      	add	r0, sp, #8
    4810:	f002 f9ef 	bl	6bf2 <_Z13cbor_enc_textP8cbor_bufPKci>
    4814:	1e06      	subs	r6, r0, #0
    4816:	d1f4      	bne.n	4802 <_Z13build_rsp_msgP4mbufPhPcmh+0x2a>
	l = cbor_buf_get_len(&cbuf);
    4818:	a802      	add	r0, sp, #8
    481a:	f002 f9da 	bl	6bd2 <_Z16cbor_buf_get_lenP8cbor_buf>
    481e:	b2c7      	uxtb	r7, r0
    4820:	0004      	movs	r4, r0
	p = (char *) m_append(m, l);
    4822:	b239      	sxth	r1, r7
    4824:	0028      	movs	r0, r5
    4826:	f003 fdfd 	bl	8424 <_Z8m_appendP4mbufs>
		return ERR_NO_MEM;
    482a:	2303      	movs	r3, #3
	if (!p)
    482c:	2800      	cmp	r0, #0
    482e:	d0e9      	beq.n	4804 <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    4830:	b2e4      	uxtb	r4, r4
	memcpy(p, cbor_payload, l);
    4832:	0022      	movs	r2, r4
    4834:	a906      	add	r1, sp, #24
    4836:	f008 f92c 	bl	ca92 <memcpy>
	*len = l;
    483a:	9b01      	ldr	r3, [sp, #4]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    483c:	490a      	ldr	r1, [pc, #40]	; (4868 <_Z13build_rsp_msgP4mbufPhPcmh+0x90>)
	*len = l;
    483e:	701f      	strb	r7, [r3, #0]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    4840:	2007      	movs	r0, #7
    4842:	f7ff fdad 	bl	43a0 <_Z4dlogiPKcz>
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
    4846:	0023      	movs	r3, r4
    4848:	aa06      	add	r2, sp, #24
    484a:	4908      	ldr	r1, [pc, #32]	; (486c <_Z13build_rsp_msgP4mbufPhPcmh+0x94>)
    484c:	2007      	movs	r0, #7
    484e:	f7ff fdc9 	bl	43e4 <_Z5ddumpiPKcPKvi>
	int freeram = free_ram();
    4852:	f7ff fed7 	bl	4604 <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    4856:	4906      	ldr	r1, [pc, #24]	; (4870 <_Z13build_rsp_msgP4mbufPhPcmh+0x98>)
	int freeram = free_ram();
    4858:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    485a:	2007      	movs	r0, #7
    485c:	f7ff fda0 	bl	43a0 <_Z4dlogiPKcz>
	return ERR_OK;
    4860:	0033      	movs	r3, r6
    4862:	e7cf      	b.n	4804 <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    4864:	20000fb4 	.word	0x20000fb4
    4868:	00010e34 	.word	0x00010e34
    486c:	0001187a 	.word	0x0001187a
    4870:	0001167b 	.word	0x0001167b

00004874 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>:
{
    4874:	b5f0      	push	{r4, r5, r6, r7, lr}
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    4876:	0006      	movs	r6, r0
{
    4878:	b0a9      	sub	sp, #164	; 0xa4
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    487a:	364c      	adds	r6, #76	; 0x4c
{
    487c:	9205      	str	r2, [sp, #20]
    487e:	0005      	movs	r5, r0
    4880:	000f      	movs	r7, r1
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    4882:	aa05      	add	r2, sp, #20
    4884:	210b      	movs	r1, #11
    4886:	0030      	movs	r0, r6
{
    4888:	001c      	movs	r4, r3
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    488a:	f002 ff71 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    488e:	9003      	str	r0, [sp, #12]
    if (o)
    4890:	2800      	cmp	r0, #0
    4892:	d004      	beq.n	489e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x2a>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    4894:	2384      	movs	r3, #132	; 0x84
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    4896:	70bb      	strb	r3, [r7, #2]
    rsp->plen = 0;
    4898:	2300      	movs	r3, #0
    489a:	643b      	str	r3, [r7, #64]	; 0x40
    return ERR_OK;
    489c:	e03e      	b.n	491c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
    if (!(o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL))) 
    489e:	9a03      	ldr	r2, [sp, #12]
    48a0:	210f      	movs	r1, #15
    48a2:	0030      	movs	r0, r6
    48a4:	f002 ff64 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    48a8:	9002      	str	r0, [sp, #8]
    48aa:	2800      	cmp	r0, #0
    48ac:	d101      	bne.n	48b2 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3e>
        rsp->code = COAP_RSP_405_METHOD_NOT_ALLOWED;
    48ae:	2385      	movs	r3, #133	; 0x85
    48b0:	e7f1      	b.n	4896 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    if (req->code == COAP_REQUEST_GET)
    48b2:	78ad      	ldrb	r5, [r5, #2]
    48b4:	2d01      	cmp	r5, #1
    48b6:	d000      	beq.n	48ba <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x46>
    48b8:	e081      	b.n	49be <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x14a>
        uint8_t len = 0;
    48ba:	466a      	mov	r2, sp
    48bc:	7b12      	ldrb	r2, [r2, #12]
    48be:	ab02      	add	r3, sp, #8
        if (!coap_opt_strcmp(o, "cfg"))
    48c0:	4954      	ldr	r1, [pc, #336]	; (4a14 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a0>)
    48c2:	9802      	ldr	r0, [sp, #8]
        uint8_t len = 0;
    48c4:	759a      	strb	r2, [r3, #22]
        if (!coap_opt_strcmp(o, "cfg"))
    48c6:	f002 fa29 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
    48ca:	9003      	str	r0, [sp, #12]
    48cc:	2800      	cmp	r0, #0
    48ce:	d128      	bne.n	4922 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xae>
            uint8_t payloadlen = 0;
    48d0:	ab02      	add	r3, sp, #8
    48d2:	3516      	adds	r5, #22
    48d4:	18ed      	adds	r5, r5, r3
    48d6:	466b      	mov	r3, sp
    48d8:	7b1b      	ldrb	r3, [r3, #12]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    48da:	0162      	lsls	r2, r4, #5
            uint8_t payloadlen = 0;
    48dc:	702b      	strb	r3, [r5, #0]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    48de:	4b4e      	ldr	r3, [pc, #312]	; (4a18 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    48e0:	0029      	movs	r1, r5
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    48e2:	189b      	adds	r3, r3, r2
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    48e4:	691b      	ldr	r3, [r3, #16]
    48e6:	a808      	add	r0, sp, #32
    48e8:	4798      	blx	r3
            rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    48ea:	2116      	movs	r1, #22
    48ec:	782b      	ldrb	r3, [r5, #0]
    48ee:	a802      	add	r0, sp, #8
    48f0:	9400      	str	r4, [sp, #0]
    48f2:	1809      	adds	r1, r1, r0
    48f4:	aa08      	add	r2, sp, #32
    48f6:	6d38      	ldr	r0, [r7, #80]	; 0x50
    48f8:	f7ff ff6e 	bl	47d8 <_Z13build_rsp_msgP4mbufPhPcmh>
    48fc:	0004      	movs	r4, r0
	uint8_t obs = false;
    48fe:	9d03      	ldr	r5, [sp, #12]
        dlog(LOG_DEBUG, "crresourcehandler: GET status: %d len: %d bytes", rc, len);
    4900:	ab02      	add	r3, sp, #8
    4902:	7d9b      	ldrb	r3, [r3, #22]
    4904:	0022      	movs	r2, r4
    4906:	4945      	ldr	r1, [pc, #276]	; (4a1c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a8>)
    4908:	2007      	movs	r0, #7
    490a:	f7ff fd49 	bl	43a0 <_Z4dlogiPKcz>
        if (!rc)
    490e:	2c00      	cmp	r4, #0
    4910:	d14f      	bne.n	49b2 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x13e>
			if (obs)
    4912:	2d00      	cmp	r5, #0
    4914:	d043      	beq.n	499e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x12a>
				rsp->code = COAP_RSP_203_VALID;
    4916:	2343      	movs	r3, #67	; 0x43
				rsp->plen = 0;
    4918:	643c      	str	r4, [r7, #64]	; 0x40
				rsp->code = COAP_RSP_203_VALID;
    491a:	70bb      	strb	r3, [r7, #2]
}
    491c:	2000      	movs	r0, #0
    491e:	b029      	add	sp, #164	; 0xa4
    4920:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (!coap_opt_strcmp(o, "sens"))
    4922:	493f      	ldr	r1, [pc, #252]	; (4a20 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1ac>)
    4924:	9802      	ldr	r0, [sp, #8]
    4926:	f002 f9f9 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
    492a:	9002      	str	r0, [sp, #8]
    492c:	2800      	cmp	r0, #0
    492e:	d16a      	bne.n	4a06 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x192>
			if ((o = copt_get_next_opt_type((sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))) 
    4930:	0002      	movs	r2, r0
    4932:	2106      	movs	r1, #6
    4934:	0030      	movs	r0, r6
    4936:	f002 ff1b 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    493a:	1e06      	subs	r6, r0, #0
    493c:	d018      	beq.n	4970 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xfc>
				uint32_t obsval = co_uint32_n2h(o);
    493e:	f002 fb23 	bl	6f88 <_Z13co_uint32_n2hPK5optlv>
				switch(obsval)
    4942:	2800      	cmp	r0, #0
    4944:	d003      	beq.n	494e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xda>
    4946:	2801      	cmp	r0, #1
    4948:	d009      	beq.n	495e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xea>
						rc = ERR_INVAL;
    494a:	2404      	movs	r4, #4
    494c:	e00e      	b.n	496c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xf8>
						rc = coap_obs_reg_sapi(sensor_info[sensor_id].observer_id);
    494e:	4b32      	ldr	r3, [pc, #200]	; (4a18 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    4950:	0164      	lsls	r4, r4, #5
    4952:	191c      	adds	r4, r3, r4
    4954:	7f60      	ldrb	r0, [r4, #29]
    4956:	f002 ffbd 	bl	78d4 <_Z17coap_obs_reg_sapih>
    495a:	0004      	movs	r4, r0
						break;
    495c:	e7d0      	b.n	4900 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
						rc = coap_obs_dereg_sapi(sensor_info[sensor_id].observer_id);
    495e:	4b2e      	ldr	r3, [pc, #184]	; (4a18 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    4960:	0164      	lsls	r4, r4, #5
    4962:	191c      	adds	r4, r3, r4
    4964:	7f60      	ldrb	r0, [r4, #29]
    4966:	f002 ffc9 	bl	78fc <_Z19coap_obs_dereg_sapih>
    496a:	0004      	movs	r4, r0
	uint8_t obs = false;
    496c:	9d02      	ldr	r5, [sp, #8]
    496e:	e7c7      	b.n	4900 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				uint8_t payloadlen = 0;
    4970:	2517      	movs	r5, #23
    4972:	ab02      	add	r3, sp, #8
    4974:	18ed      	adds	r5, r5, r3
				SensorReadFuncPtr pReadSensor = sensor_info[sensor_id].read;
    4976:	4b28      	ldr	r3, [pc, #160]	; (4a18 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    4978:	0162      	lsls	r2, r4, #5
    497a:	189b      	adds	r3, r3, r2
				uint8_t payloadlen = 0;
    497c:	7028      	strb	r0, [r5, #0]
				sapi_error_t rcode = (*pReadSensor)(payload, &payloadlen);
    497e:	0029      	movs	r1, r5
    4980:	68db      	ldr	r3, [r3, #12]
    4982:	a808      	add	r0, sp, #32
    4984:	4798      	blx	r3
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    4986:	2116      	movs	r1, #22
    4988:	782b      	ldrb	r3, [r5, #0]
    498a:	a802      	add	r0, sp, #8
    498c:	9400      	str	r4, [sp, #0]
    498e:	1809      	adds	r1, r1, r0
    4990:	aa08      	add	r2, sp, #32
    4992:	6d38      	ldr	r0, [r7, #80]	; 0x50
    4994:	f7ff ff20 	bl	47d8 <_Z13build_rsp_msgP4mbufPhPcmh>
	uint8_t obs = false;
    4998:	0035      	movs	r5, r6
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    499a:	0004      	movs	r4, r0
    499c:	e7b0      	b.n	4900 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				rsp->plen = len;
    499e:	ab02      	add	r3, sp, #8
    49a0:	7d9b      	ldrb	r3, [r3, #22]
				rsp->cf = COAP_CF_CSV;
    49a2:	2202      	movs	r2, #2
				rsp->plen = len;
    49a4:	643b      	str	r3, [r7, #64]	; 0x40
				rsp->cf = COAP_CF_CSV;
    49a6:	003b      	movs	r3, r7
    49a8:	333c      	adds	r3, #60	; 0x3c
    49aa:	701a      	strb	r2, [r3, #0]
				rsp->code = COAP_RSP_205_CONTENT;
    49ac:	2345      	movs	r3, #69	; 0x45
    49ae:	70bb      	strb	r3, [r7, #2]
    49b0:	e7b4      	b.n	491c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
            switch (rc)
    49b2:	2c04      	cmp	r4, #4
    49b4:	d001      	beq.n	49ba <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
    49b6:	2c14      	cmp	r4, #20
    49b8:	d129      	bne.n	4a0e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x19a>
			rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    49ba:	2386      	movs	r3, #134	; 0x86
    49bc:	e76b      	b.n	4896 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    else if (req->code == COAP_REQUEST_PUT) 
    49be:	2d03      	cmp	r5, #3
    49c0:	d000      	beq.n	49c4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x150>
    49c2:	e774      	b.n	48ae <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3a>
		len = o->ol;
    49c4:	2617      	movs	r6, #23
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    49c6:	4b14      	ldr	r3, [pc, #80]	; (4a18 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    49c8:	0164      	lsls	r4, r4, #5
    49ca:	191c      	adds	r4, r3, r4
    49cc:	6963      	ldr	r3, [r4, #20]
		strncpy(payload, (char*)o->ov, len);
    49ce:	ac08      	add	r4, sp, #32
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    49d0:	9304      	str	r3, [sp, #16]
		len = o->ol;
    49d2:	9b02      	ldr	r3, [sp, #8]
		strncpy(payload, (char*)o->ov, len);
    49d4:	0020      	movs	r0, r4
		len = o->ol;
    49d6:	789d      	ldrb	r5, [r3, #2]
    49d8:	ab02      	add	r3, sp, #8
    49da:	18f6      	adds	r6, r6, r3
		strncpy(payload, (char*)o->ov, len);
    49dc:	9b02      	ldr	r3, [sp, #8]
		len = o->ol;
    49de:	7035      	strb	r5, [r6, #0]
		strncpy(payload, (char*)o->ov, len);
    49e0:	6859      	ldr	r1, [r3, #4]
    49e2:	002a      	movs	r2, r5
    49e4:	f009 f9b4 	bl	dd50 <strncpy>
		payload[len] = '\0';
    49e8:	466b      	mov	r3, sp
    49ea:	7b1b      	ldrb	r3, [r3, #12]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    49ec:	0031      	movs	r1, r6
		payload[len] = '\0';
    49ee:	5563      	strb	r3, [r4, r5]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    49f0:	0020      	movs	r0, r4
    49f2:	9b04      	ldr	r3, [sp, #16]
    49f4:	4798      	blx	r3
		if (rcode == SAPI_ERR_OK)
    49f6:	2800      	cmp	r0, #0
    49f8:	d103      	bne.n	4a02 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x18e>
			rsp->code = COAP_RSP_204_CHANGED;
    49fa:	2344      	movs	r3, #68	; 0x44
			rsp->plen = 0;
    49fc:	6438      	str	r0, [r7, #64]	; 0x40
			rsp->code = COAP_RSP_204_CHANGED;
    49fe:	70bb      	strb	r3, [r7, #2]
    4a00:	e78c      	b.n	491c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
		else if (rcode == SAPI_ERR_NOT_IMPLEMENTED)
    4a02:	2801      	cmp	r0, #1
    4a04:	d101      	bne.n	4a0a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x196>
			rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    4a06:	23a1      	movs	r3, #161	; 0xa1
    4a08:	e745      	b.n	4896 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
		else if (rcode == SAPI_ERR_BAD_DATA)
    4a0a:	2804      	cmp	r0, #4
    4a0c:	d0d5      	beq.n	49ba <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    4a0e:	23a0      	movs	r3, #160	; 0xa0
    4a10:	e741      	b.n	4896 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	00010eb8 	.word	0x00010eb8
    4a18:	20000fb4 	.word	0x20000fb4
    4a1c:	00010ec1 	.word	0x00010ec1
    4a20:	00010ebc 	.word	0x00010ebc

00004a24 <_Z6crsapiP12coap_msg_ctxS0_>:
{
    4a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    4a26:	0006      	movs	r6, r0
	void *it = NULL;
    4a28:	2400      	movs	r4, #0
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    4a2a:	364c      	adds	r6, #76	; 0x4c
    4a2c:	aa01      	add	r2, sp, #4
{
    4a2e:	0007      	movs	r7, r0
    4a30:	000d      	movs	r5, r1
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    4a32:	0030      	movs	r0, r6
    4a34:	210b      	movs	r1, #11
	void *it = NULL;
    4a36:	9401      	str	r4, [sp, #4]
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    4a38:	f002 fe9a 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	if ((o = copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it)))
    4a3c:	0030      	movs	r0, r6
    4a3e:	aa01      	add	r2, sp, #4
    4a40:	210b      	movs	r1, #11
    4a42:	f002 fe95 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    4a46:	0006      	movs	r6, r0
    4a48:	42a0      	cmp	r0, r4
    4a4a:	d017      	beq.n	4a7c <_Z6crsapiP12coap_msg_ctxS0_+0x58>
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    4a4c:	4b0d      	ldr	r3, [pc, #52]	; (4a84 <_Z6crsapiP12coap_msg_ctxS0_+0x60>)
    4a4e:	781b      	ldrb	r3, [r3, #0]
    4a50:	429c      	cmp	r4, r3
    4a52:	da11      	bge.n	4a78 <_Z6crsapiP12coap_msg_ctxS0_+0x54>
			if (!coap_opt_strcmp(o, sensor_info[indx].devicetype))
    4a54:	490c      	ldr	r1, [pc, #48]	; (4a88 <_Z6crsapiP12coap_msg_ctxS0_+0x64>)
    4a56:	0163      	lsls	r3, r4, #5
    4a58:	18c9      	adds	r1, r1, r3
    4a5a:	0030      	movs	r0, r6
    4a5c:	f002 f95e 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
    4a60:	2800      	cmp	r0, #0
    4a62:	d106      	bne.n	4a72 <_Z6crsapiP12coap_msg_ctxS0_+0x4e>
				rc = crresourcehandler(req, rsp, it, indx);
    4a64:	0023      	movs	r3, r4
    4a66:	9a01      	ldr	r2, [sp, #4]
    4a68:	0029      	movs	r1, r5
    4a6a:	0038      	movs	r0, r7
    4a6c:	f7ff ff02 	bl	4874 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>
}
    4a70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    4a72:	3401      	adds	r4, #1
    4a74:	b2e4      	uxtb	r4, r4
    4a76:	e7e9      	b.n	4a4c <_Z6crsapiP12coap_msg_ctxS0_+0x28>
		rsp->code = COAP_RSP_404_NOT_FOUND;
    4a78:	2384      	movs	r3, #132	; 0x84
    4a7a:	70ab      	strb	r3, [r5, #2]
	rsp->plen = 0;
    4a7c:	2000      	movs	r0, #0
    4a7e:	6428      	str	r0, [r5, #64]	; 0x40
	return ERR_OK;
    4a80:	e7f6      	b.n	4a70 <_Z6crsapiP12coap_msg_ctxS0_+0x4c>
    4a82:	46c0      	nop			; (mov r8, r8)
    4a84:	20000ea6 	.word	0x20000ea6
    4a88:	20000fb4 	.word	0x20000fb4

00004a8c <_Z24sapi_observation_handlerP4mbufPhh>:
{
    4a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t payloadlen = 0;
    4a8e:	250f      	movs	r5, #15
{
    4a90:	b0a7      	sub	sp, #156	; 0x9c
	uint8_t payloadlen = 0;
    4a92:	ab02      	add	r3, sp, #8
    4a94:	18ed      	adds	r5, r5, r3
    4a96:	2300      	movs	r3, #0
{
    4a98:	000f      	movs	r7, r1
    4a9a:	0016      	movs	r6, r2
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4a9c:	4c0b      	ldr	r4, [pc, #44]	; (4acc <_Z24sapi_observation_handlerP4mbufPhh+0x40>)
	uint8_t payloadlen = 0;
    4a9e:	702b      	strb	r3, [r5, #0]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4aa0:	0153      	lsls	r3, r2, #5
    4aa2:	18e4      	adds	r4, r4, r3
    4aa4:	0022      	movs	r2, r4
{
    4aa6:	9003      	str	r0, [sp, #12]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4aa8:	4909      	ldr	r1, [pc, #36]	; (4ad0 <_Z24sapi_observation_handlerP4mbufPhh+0x44>)
    4aaa:	2007      	movs	r0, #7
    4aac:	f7ff fc78 	bl	43a0 <_Z4dlogiPKcz>
	sapi_error_t rcode = (*pReadFunc)(payload, &payloadlen);
    4ab0:	68e3      	ldr	r3, [r4, #12]
    4ab2:	0029      	movs	r1, r5
    4ab4:	a806      	add	r0, sp, #24
    4ab6:	4798      	blx	r3
	error_t rc = build_rsp_msg(m, len, payload, payloadlen, sensor_id);
    4ab8:	782b      	ldrb	r3, [r5, #0]
    4aba:	aa06      	add	r2, sp, #24
    4abc:	9600      	str	r6, [sp, #0]
    4abe:	0039      	movs	r1, r7
    4ac0:	9803      	ldr	r0, [sp, #12]
    4ac2:	f7ff fe89 	bl	47d8 <_Z13build_rsp_msgP4mbufPhPcmh>
}
    4ac6:	b027      	add	sp, #156	; 0x9c
    4ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4aca:	46c0      	nop			; (mov r8, r8)
    4acc:	20000fb4 	.word	0x20000fb4
    4ad0:	00010f1b 	.word	0x00010f1b

00004ad4 <_Z9crarduinoP12coap_msg_ctxS0_>:
//
//////////////////////////////////////////////////////////////////////////
error_t crarduino( struct coap_msg_ctx *req, struct coap_msg_ctx *rsp )
{
	// Dummy. Should not be called!
	rsp->code = COAP_RSP_404_NOT_FOUND;
    4ad4:	2384      	movs	r3, #132	; 0x84
    4ad6:	708b      	strb	r3, [r1, #2]
	rsp->plen = 0;
    4ad8:	2300      	movs	r3, #0
	return ERR_FAIL;
}
    4ada:	2063      	movs	r0, #99	; 0x63
	rsp->plen = 0;
    4adc:	640b      	str	r3, [r1, #64]	; 0x40
}
    4ade:	4770      	bx	lr

00004ae0 <_Z15sapi_log_bannerv>:
//
// Helper function to print a banner in the log.
//
//////////////////////////////////////////////////////////////////////////
void sapi_log_banner()
{
    4ae0:	b500      	push	{lr}
    4ae2:	b091      	sub	sp, #68	; 0x44
	// Log Banner: version number, time and date
	char ver[64];
	strcpy(ver, COAP_SERVER_VERSION_STRING);
    4ae4:	4915      	ldr	r1, [pc, #84]	; (4b3c <_Z15sapi_log_bannerv+0x5c>)
    4ae6:	4668      	mov	r0, sp
    4ae8:	f009 f8fd 	bl	dce6 <strcpy>
	strcat(ver, COAP_SERVER_VERSION_NUMBER);
    4aec:	4914      	ldr	r1, [pc, #80]	; (4b40 <_Z15sapi_log_bannerv+0x60>)
    4aee:	4668      	mov	r0, sp
    4af0:	f009 f8e2 	bl	dcb8 <strcat>
	println(ver);
    4af4:	4668      	mov	r0, sp
    4af6:	f7ff fd11 	bl	451c <_Z7printlnPKc>
	
	strcpy(ver, SAPI_VERSION_STRING);
    4afa:	4912      	ldr	r1, [pc, #72]	; (4b44 <_Z15sapi_log_bannerv+0x64>)
    4afc:	4668      	mov	r0, sp
    4afe:	f009 f8f2 	bl	dce6 <strcpy>
	strcat(ver, SAPI_VERSION_NUMBER);
    4b02:	4911      	ldr	r1, [pc, #68]	; (4b48 <_Z15sapi_log_bannerv+0x68>)
    4b04:	4668      	mov	r0, sp
    4b06:	f009 f8d7 	bl	dcb8 <strcat>
	println(ver);
    4b0a:	4668      	mov	r0, sp
    4b0c:	f7ff fd06 	bl	451c <_Z7printlnPKc>
	
	sprintf(ver, "Build Time: %s  Date: %s", __TIME__, __DATE__);
    4b10:	4b0e      	ldr	r3, [pc, #56]	; (4b4c <_Z15sapi_log_bannerv+0x6c>)
    4b12:	4a0f      	ldr	r2, [pc, #60]	; (4b50 <_Z15sapi_log_bannerv+0x70>)
    4b14:	490f      	ldr	r1, [pc, #60]	; (4b54 <_Z15sapi_log_bannerv+0x74>)
    4b16:	4668      	mov	r0, sp
    4b18:	f009 f8ac 	bl	dc74 <siprintf>
	println(ver);
    4b1c:	4668      	mov	r0, sp
    4b1e:	f7ff fcfd 	bl	451c <_Z7printlnPKc>
	println("");
    4b22:	480d      	ldr	r0, [pc, #52]	; (4b58 <_Z15sapi_log_bannerv+0x78>)
    4b24:	f7ff fcfa 	bl	451c <_Z7printlnPKc>
	
	// Log free memory
	int freeram = free_ram();
    4b28:	f7ff fd6c 	bl	4604 <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    4b2c:	490b      	ldr	r1, [pc, #44]	; (4b5c <_Z15sapi_log_bannerv+0x7c>)
	int freeram = free_ram();
    4b2e:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    4b30:	2007      	movs	r0, #7
    4b32:	f7ff fc35 	bl	43a0 <_Z4dlogiPKcz>
}
    4b36:	b011      	add	sp, #68	; 0x44
    4b38:	bd00      	pop	{pc}
    4b3a:	46c0      	nop			; (mov r8, r8)
    4b3c:	00010e53 	.word	0x00010e53
    4b40:	00010e71 	.word	0x00010e71
    4b44:	00010e77 	.word	0x00010e77
    4b48:	00010e84 	.word	0x00010e84
    4b4c:	00010e8a 	.word	0x00010e8a
    4b50:	00010e96 	.word	0x00010e96
    4b54:	00010e9f 	.word	0x00010e9f
    4b58:	0001113e 	.word	0x0001113e
    4b5c:	0001167b 	.word	0x0001167b

00004b60 <_Z15sapi_initializePc>:
{
    4b60:	b507      	push	{r0, r1, r2, lr}
	is_sapi = 1;
    4b62:	2201      	movs	r2, #1
    4b64:	4b19      	ldr	r3, [pc, #100]	; (4bcc <_Z15sapi_initializePc+0x6c>)
{
    4b66:	0001      	movs	r1, r0
	is_sapi = 1;
    4b68:	701a      	strb	r2, [r3, #0]
	sensor_info_index = 0;
    4b6a:	2200      	movs	r2, #0
    4b6c:	4b18      	ldr	r3, [pc, #96]	; (4bd0 <_Z15sapi_initializePc+0x70>)
    4b6e:	4819      	ldr	r0, [pc, #100]	; (4bd4 <_Z15sapi_initializePc+0x74>)
    4b70:	701a      	strb	r2, [r3, #0]
	if (url_classifier == NULL)
    4b72:	4291      	cmp	r1, r2
    4b74:	d128      	bne.n	4bc8 <_Z15sapi_initializePc+0x68>
		strncpy(classifier, DEFAULT_CLASSIFIER, CLASSIFIER_MAX_LEN);
    4b76:	4918      	ldr	r1, [pc, #96]	; (4bd8 <_Z15sapi_initializePc+0x78>)
    4b78:	3210      	adds	r2, #16
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    4b7a:	f009 f8e9 	bl	dd50 <strncpy>
	rtc_time_init(LOCAL_TIME_ZONE);
    4b7e:	2008      	movs	r0, #8
    4b80:	4240      	negs	r0, r0
    4b82:	f7ff fb5d 	bl	4240 <_Z13rtc_time_initl>
	log_init(SER_MON_PTR, SER_MON_BAUD_RATE, LOG_LEVEL);
    4b86:	21e1      	movs	r1, #225	; 0xe1
    4b88:	2207      	movs	r2, #7
    4b8a:	0249      	lsls	r1, r1, #9
    4b8c:	4813      	ldr	r0, [pc, #76]	; (4bdc <_Z15sapi_initializePc+0x7c>)
    4b8e:	f7ff fbe5 	bl	435c <_Z8log_initP7Serial_mm>
	pinMode(MNIC_WAKEUP_PIN, OUTPUT);
    4b92:	2101      	movs	r1, #1
    4b94:	2009      	movs	r0, #9
    4b96:	f7ff f85b 	bl	3c50 <pinMode>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    4b9a:	2101      	movs	r1, #1
    4b9c:	2009      	movs	r0, #9
    4b9e:	f7ff f85b 	bl	3c58 <digitalWrite>
	coap_s_init(UART_PTR, COAP_MSG_MAX_AGE_IN_SECS, HDLC_UART_TIMEOUT_IN_MS, HDLC_MAX_PAYLOAD_LEN, "", NULL);
    4ba2:	2300      	movs	r3, #0
    4ba4:	22fa      	movs	r2, #250	; 0xfa
    4ba6:	9301      	str	r3, [sp, #4]
    4ba8:	4b0d      	ldr	r3, [pc, #52]	; (4be0 <_Z15sapi_initializePc+0x80>)
    4baa:	00d2      	lsls	r2, r2, #3
    4bac:	215a      	movs	r1, #90	; 0x5a
    4bae:	9300      	str	r3, [sp, #0]
    4bb0:	480c      	ldr	r0, [pc, #48]	; (4be4 <_Z15sapi_initializePc+0x84>)
    4bb2:	23ff      	movs	r3, #255	; 0xff
    4bb4:	f003 fa9e 	bl	80f4 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>
	coap_put_ic_reboot_event();
    4bb8:	f003 fa6a 	bl	8090 <_Z24coap_put_ic_reboot_eventv>
	delay(50);
    4bbc:	2032      	movs	r0, #50	; 0x32
    4bbe:	f7fd fd8f 	bl	26e0 <delay>
	sapi_log_banner();
    4bc2:	f7ff ff8d 	bl	4ae0 <_Z15sapi_log_bannerv>
}
    4bc6:	bd07      	pop	{r0, r1, r2, pc}
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    4bc8:	2210      	movs	r2, #16
    4bca:	e7d6      	b.n	4b7a <_Z15sapi_initializePc+0x1a>
    4bcc:	20000096 	.word	0x20000096
    4bd0:	20000ea6 	.word	0x20000ea6
    4bd4:	200000a0 	.word	0x200000a0
    4bd8:	00010e4b 	.word	0x00010e4b
    4bdc:	2000037c 	.word	0x2000037c
    4be0:	0001113e 	.word	0x0001113e
    4be4:	200010f0 	.word	0x200010f0

00004be8 <_GLOBAL__sub_I_is_sapi>:
}
    4be8:	b510      	push	{r4, lr}
SPIFlash flash;
    4bea:	4a03      	ldr	r2, [pc, #12]	; (4bf8 <_GLOBAL__sub_I_is_sapi+0x10>)
    4bec:	210d      	movs	r1, #13
    4bee:	4803      	ldr	r0, [pc, #12]	; (4bfc <_GLOBAL__sub_I_is_sapi+0x14>)
    4bf0:	f001 fa04 	bl	5ffc <_ZN8SPIFlashC1EhP8SPIClass>
}
    4bf4:	bd10      	pop	{r4, pc}
    4bf6:	46c0      	nop			; (mov r8, r8)
    4bf8:	2000129c 	.word	0x2000129c
    4bfc:	20000ea8 	.word	0x20000ea8

00004c00 <_Z13readSerialStrv>:
String readSerialStr() {
    4c00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4c02:	0005      	movs	r5, r0
	String str = "";
    4c04:	4916      	ldr	r1, [pc, #88]	; (4c60 <_Z13readSerialStrv+0x60>)
    4c06:	a801      	add	r0, sp, #4
    4c08:	f000 fdb4 	bl	5774 <_ZN6StringC1EPKc>
	inChar = Serial.read();
    4c0c:	4e15      	ldr	r6, [pc, #84]	; (4c64 <_Z13readSerialStrv+0x64>)
    4c0e:	0030      	movs	r0, r6
    4c10:	f7fd fe9c 	bl	294c <_ZN7Serial_4readEv>
    4c14:	b2c4      	uxtb	r4, r0
	while (inChar != '.') {
    4c16:	2c2e      	cmp	r4, #46	; 0x2e
    4c18:	d015      	beq.n	4c46 <_Z13readSerialStrv+0x46>
		if (inChar != 255)
    4c1a:	2cff      	cmp	r4, #255	; 0xff
    4c1c:	d0f7      	beq.n	4c0e <_Z13readSerialStrv+0xe>
	String & operator += (char c)			{concat(c); return (*this);}
    4c1e:	0021      	movs	r1, r4
    4c20:	a801      	add	r0, sp, #4
    4c22:	f000 fe08 	bl	5836 <_ZN6String6concatEc>
		if (inChar == '$')
    4c26:	2c24      	cmp	r4, #36	; 0x24
    4c28:	d109      	bne.n	4c3e <_Z13readSerialStrv+0x3e>
		return "$";
    4c2a:	490f      	ldr	r1, [pc, #60]	; (4c68 <_Z13readSerialStrv+0x68>)
		return "#";
    4c2c:	0028      	movs	r0, r5
    4c2e:	f000 fda1 	bl	5774 <_ZN6StringC1EPKc>
	String str = "";
    4c32:	a801      	add	r0, sp, #4
    4c34:	f000 fd56 	bl	56e4 <_ZN6StringD1Ev>
}
    4c38:	0028      	movs	r0, r5
    4c3a:	b004      	add	sp, #16
    4c3c:	bd70      	pop	{r4, r5, r6, pc}
		if (inChar == '#')
    4c3e:	2c23      	cmp	r4, #35	; 0x23
    4c40:	d1e5      	bne.n	4c0e <_Z13readSerialStrv+0xe>
		return "#";
    4c42:	490a      	ldr	r1, [pc, #40]	; (4c6c <_Z13readSerialStrv+0x6c>)
    4c44:	e7f2      	b.n	4c2c <_Z13readSerialStrv+0x2c>
    4c46:	0021      	movs	r1, r4
    4c48:	a801      	add	r0, sp, #4
    4c4a:	f000 fdf4 	bl	5836 <_ZN6String6concatEc>
    4c4e:	2100      	movs	r1, #0
    4c50:	a801      	add	r0, sp, #4
    4c52:	f000 fdf0 	bl	5836 <_ZN6String6concatEc>
	return str;
    4c56:	a901      	add	r1, sp, #4
    4c58:	0028      	movs	r0, r5
    4c5a:	f000 fd35 	bl	56c8 <_ZN6StringC1EOS_>
    4c5e:	e7e8      	b.n	4c32 <_Z13readSerialStrv+0x32>
    4c60:	0001113e 	.word	0x0001113e
    4c64:	2000037c 	.word	0x2000037c
    4c68:	00010e47 	.word	0x00010e47
    4c6c:	00010e49 	.word	0x00010e49

00004c70 <_Z6GoHerev>:
void GoHere(){
    4c70:	b510      	push	{r4, lr}
    4c72:	b086      	sub	sp, #24
	String str = readSerialStr();
    4c74:	4668      	mov	r0, sp
    4c76:	f7ff ffc3 	bl	4c00 <_Z13readSerialStrv>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    4c7a:	491a      	ldr	r1, [pc, #104]	; (4ce4 <_Z6GoHerev+0x74>)
    4c7c:	4668      	mov	r0, sp
    4c7e:	f000 fde4 	bl	584a <_ZNK6String6equalsEPKc>
    4c82:	4c19      	ldr	r4, [pc, #100]	; (4ce8 <_Z6GoHerev+0x78>)
	if (str == "$")
    4c84:	2800      	cmp	r0, #0
    4c86:	d00f      	beq.n	4ca8 <_Z6GoHerev+0x38>
	Serial.println(getString(addr));
    4c88:	2101      	movs	r1, #1
    4c8a:	a803      	add	r0, sp, #12
    4c8c:	f7ff fccc 	bl	4628 <_Z9getStringi>
	Serial.println(getID());
    4c90:	a903      	add	r1, sp, #12
    4c92:	0020      	movs	r0, r4
    4c94:	f000 f942 	bl	4f1c <_ZN5Print7printlnERK6String>
    4c98:	a803      	add	r0, sp, #12
    4c9a:	f000 fd23 	bl	56e4 <_ZN6StringD1Ev>
	String str = readSerialStr();
    4c9e:	4668      	mov	r0, sp
    4ca0:	f000 fd20 	bl	56e4 <_ZN6StringD1Ev>
}
    4ca4:	b006      	add	sp, #24
    4ca6:	bd10      	pop	{r4, pc}
    4ca8:	4910      	ldr	r1, [pc, #64]	; (4cec <_Z6GoHerev+0x7c>)
    4caa:	4668      	mov	r0, sp
    4cac:	f000 fdcd 	bl	584a <_ZNK6String6equalsEPKc>
	else if (str == "#")
    4cb0:	2800      	cmp	r0, #0
    4cb2:	d003      	beq.n	4cbc <_Z6GoHerev+0x4c>
	Serial.println(getID());
    4cb4:	a803      	add	r0, sp, #12
    4cb6:	f7ff fceb 	bl	4690 <_Z5getIDv>
    4cba:	e7e9      	b.n	4c90 <_Z6GoHerev+0x20>
		eraseBlock();
    4cbc:	f7ff fcac 	bl	4618 <_Z10eraseBlockv>
		if (flash.writeStr(addr, str)) {
    4cc0:	2301      	movs	r3, #1
    4cc2:	466a      	mov	r2, sp
    4cc4:	0019      	movs	r1, r3
    4cc6:	480a      	ldr	r0, [pc, #40]	; (4cf0 <_Z6GoHerev+0x80>)
    4cc8:	f001 fa3e 	bl	6148 <_ZN8SPIFlash8writeStrEmR6Stringb>
    4ccc:	2800      	cmp	r0, #0
    4cce:	d004      	beq.n	4cda <_Z6GoHerev+0x6a>
			Serial.println("complete");
    4cd0:	4908      	ldr	r1, [pc, #32]	; (4cf4 <_Z6GoHerev+0x84>)
    4cd2:	0020      	movs	r0, r4
    4cd4:	f000 f92c 	bl	4f30 <_ZN5Print7printlnEPKc>
    4cd8:	e7e1      	b.n	4c9e <_Z6GoHerev+0x2e>
			Serial.print("failed");
    4cda:	4907      	ldr	r1, [pc, #28]	; (4cf8 <_Z6GoHerev+0x88>)
    4cdc:	0020      	movs	r0, r4
    4cde:	f000 f902 	bl	4ee6 <_ZN5Print5printEPKc>
    4ce2:	e7dc      	b.n	4c9e <_Z6GoHerev+0x2e>
    4ce4:	00010e47 	.word	0x00010e47
    4ce8:	2000037c 	.word	0x2000037c
    4cec:	00010e49 	.word	0x00010e49
    4cf0:	20000ea8 	.word	0x20000ea8
    4cf4:	00010f37 	.word	0x00010f37
    4cf8:	00010f40 	.word	0x00010f40

00004cfc <_Z8sapi_runv>:
{
    4cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(initBoot){ 
    4cfe:	4b21      	ldr	r3, [pc, #132]	; (4d84 <_Z8sapi_runv+0x88>)
    4d00:	781b      	ldrb	r3, [r3, #0]
    4d02:	2b00      	cmp	r3, #0
    4d04:	d03b      	beq.n	4d7e <_Z8sapi_runv+0x82>
		if(init1){
    4d06:	4c20      	ldr	r4, [pc, #128]	; (4d88 <_Z8sapi_runv+0x8c>)
    4d08:	7823      	ldrb	r3, [r4, #0]
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d009      	beq.n	4d22 <_Z8sapi_runv+0x26>
		Serial.println("Enter any key to go to BootProgram before it counts to 10"); 
    4d0e:	491f      	ldr	r1, [pc, #124]	; (4d8c <_Z8sapi_runv+0x90>)
    4d10:	481f      	ldr	r0, [pc, #124]	; (4d90 <_Z8sapi_runv+0x94>)
    4d12:	f000 f90d 	bl	4f30 <_ZN5Print7printlnEPKc>
		flash.begin(); 
    4d16:	2100      	movs	r1, #0
    4d18:	481e      	ldr	r0, [pc, #120]	; (4d94 <_Z8sapi_runv+0x98>)
    4d1a:	f001 f9c1 	bl	60a0 <_ZN8SPIFlash5beginEm>
		init1 = false;
    4d1e:	2300      	movs	r3, #0
    4d20:	7023      	strb	r3, [r4, #0]
		if (!init2){
    4d22:	4e1d      	ldr	r6, [pc, #116]	; (4d98 <_Z8sapi_runv+0x9c>)
    4d24:	7833      	ldrb	r3, [r6, #0]
    4d26:	2b00      	cmp	r3, #0
    4d28:	d126      	bne.n	4d78 <_Z8sapi_runv+0x7c>
			for (l = 1; l < 11; l++){
    4d2a:	4c1c      	ldr	r4, [pc, #112]	; (4d9c <_Z8sapi_runv+0xa0>)
    4d2c:	3301      	adds	r3, #1
    4d2e:	6023      	str	r3, [r4, #0]
    4d30:	6823      	ldr	r3, [r4, #0]
    4d32:	2b0a      	cmp	r3, #10
    4d34:	dc10      	bgt.n	4d58 <_Z8sapi_runv+0x5c>
				if(Serial.available()){
    4d36:	4d16      	ldr	r5, [pc, #88]	; (4d90 <_Z8sapi_runv+0x94>)
    4d38:	0028      	movs	r0, r5
    4d3a:	f7fd fddf 	bl	28fc <_ZN7Serial_9availableEv>
    4d3e:	1e07      	subs	r7, r0, #0
    4d40:	d00b      	beq.n	4d5a <_Z8sapi_runv+0x5e>
					input = Serial.read();
    4d42:	0028      	movs	r0, r5
    4d44:	f7fd fe02 	bl	294c <_ZN7Serial_4readEv>
    4d48:	4b15      	ldr	r3, [pc, #84]	; (4da0 <_Z8sapi_runv+0xa4>)
    4d4a:	b2c1      	uxtb	r1, r0
					Serial.println(input);
    4d4c:	0028      	movs	r0, r5
					input = Serial.read();
    4d4e:	7019      	strb	r1, [r3, #0]
					Serial.println(input);
    4d50:	f000 f8f8 	bl	4f44 <_ZN5Print7printlnEc>
					init2 = true;
    4d54:	2301      	movs	r3, #1
    4d56:	7033      	strb	r3, [r6, #0]
}
    4d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Serial.print(l);
    4d5a:	220a      	movs	r2, #10
    4d5c:	6821      	ldr	r1, [r4, #0]
    4d5e:	0028      	movs	r0, r5
    4d60:	f000 f945 	bl	4fee <_ZN5Print5printEii>
				delay(1000);
    4d64:	20fa      	movs	r0, #250	; 0xfa
    4d66:	0080      	lsls	r0, r0, #2
    4d68:	f7fd fcba 	bl	26e0 <delay>
				if(l == 10){
    4d6c:	6823      	ldr	r3, [r4, #0]
    4d6e:	2b0a      	cmp	r3, #10
    4d70:	d1dc      	bne.n	4d2c <_Z8sapi_runv+0x30>
					initBoot = false;
    4d72:	4b04      	ldr	r3, [pc, #16]	; (4d84 <_Z8sapi_runv+0x88>)
    4d74:	701f      	strb	r7, [r3, #0]
					break;
    4d76:	e7ef      	b.n	4d58 <_Z8sapi_runv+0x5c>
		GoHere();
    4d78:	f7ff ff7a 	bl	4c70 <_Z6GoHerev>
    4d7c:	e7ec      	b.n	4d58 <_Z8sapi_runv+0x5c>
	coap_s_run();
    4d7e:	f003 fabd 	bl	82fc <_Z10coap_s_runv>
}
    4d82:	e7e9      	b.n	4d58 <_Z8sapi_runv+0x5c>
    4d84:	20000095 	.word	0x20000095
    4d88:	20000094 	.word	0x20000094
    4d8c:	00010f47 	.word	0x00010f47
    4d90:	2000037c 	.word	0x2000037c
    4d94:	20000ea8 	.word	0x20000ea8
    4d98:	20000fac 	.word	0x20000fac
    4d9c:	20000fb0 	.word	0x20000fb0
    4da0:	20000fad 	.word	0x20000fad

00004da4 <SERCOM4_Handler>:

    void SERCOM4_3_Handler(void) {
      Serial1.errorHandler();
    }
  #else
    void SERCOM4_Handler()  {
    4da4:	b510      	push	{r4, lr}
      Serial1.IrqHandler();
    4da6:	4802      	ldr	r0, [pc, #8]	; (4db0 <SERCOM4_Handler+0xc>)
    4da8:	f000 fb16 	bl	53d8 <_ZN4Uart10IrqHandlerEv>
    }
    4dac:	bd10      	pop	{r4, pc}
    4dae:	46c0      	nop			; (mov r8, r8)
    4db0:	20001034 	.word	0x20001034

00004db4 <SERCOM0_Handler>:

    void SERCOM2_3_Handler(void) {
      Serial2.errorHandler();
    }
  #else
    void SERCOM0_Handler()  {
    4db4:	b510      	push	{r4, lr}
      Serial2.IrqHandler();
    4db6:	4802      	ldr	r0, [pc, #8]	; (4dc0 <SERCOM0_Handler+0xc>)
    4db8:	f000 fb0e 	bl	53d8 <_ZN4Uart10IrqHandlerEv>
    }
    4dbc:	bd10      	pop	{r4, pc}
    4dbe:	46c0      	nop			; (mov r8, r8)
    4dc0:	200010f0 	.word	0x200010f0

00004dc4 <SERCOM3_Handler>:

    void SERCOM3_3_Handler(void) {
      Serial3.errorHandler();
    }
  #else
    void SERCOM3_Handler()  {
    4dc4:	b510      	push	{r4, lr}
      Serial3.IrqHandler();
    4dc6:	4802      	ldr	r0, [pc, #8]	; (4dd0 <SERCOM3_Handler+0xc>)
    4dc8:	f000 fb06 	bl	53d8 <_ZN4Uart10IrqHandlerEv>
    }
    4dcc:	bd10      	pop	{r4, pc}
    4dce:	46c0      	nop			; (mov r8, r8)
    4dd0:	200011ac 	.word	0x200011ac

00004dd4 <_GLOBAL__sub_I_g_APinDescription>:
    4dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
SERCOM sercom0( SERCOM0 ) ;
    4dd6:	2184      	movs	r1, #132	; 0x84
    4dd8:	4f1a      	ldr	r7, [pc, #104]	; (4e44 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    4dda:	05c9      	lsls	r1, r1, #23
    4ddc:	0038      	movs	r0, r7
    4dde:	f000 f90a 	bl	4ff6 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    4de2:	4919      	ldr	r1, [pc, #100]	; (4e48 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    4de4:	4819      	ldr	r0, [pc, #100]	; (4e4c <_GLOBAL__sub_I_g_APinDescription+0x78>)
    4de6:	f000 f906 	bl	4ff6 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    4dea:	4919      	ldr	r1, [pc, #100]	; (4e50 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    4dec:	4819      	ldr	r0, [pc, #100]	; (4e54 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    4dee:	f000 f902 	bl	4ff6 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    4df2:	4d19      	ldr	r5, [pc, #100]	; (4e58 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    4df4:	4919      	ldr	r1, [pc, #100]	; (4e5c <_GLOBAL__sub_I_g_APinDescription+0x88>)
    4df6:	0028      	movs	r0, r5
    4df8:	f000 f8fd 	bl	4ff6 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    4dfc:	4e18      	ldr	r6, [pc, #96]	; (4e60 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    4dfe:	4919      	ldr	r1, [pc, #100]	; (4e64 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    4e00:	0030      	movs	r0, r6
    4e02:	f000 f8f8 	bl	4ff6 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    4e06:	4918      	ldr	r1, [pc, #96]	; (4e68 <_GLOBAL__sub_I_g_APinDescription+0x94>)
    4e08:	4818      	ldr	r0, [pc, #96]	; (4e6c <_GLOBAL__sub_I_g_APinDescription+0x98>)
    4e0a:	f000 f8f4 	bl	4ff6 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    4e0e:	2401      	movs	r4, #1
    4e10:	2300      	movs	r3, #0
    4e12:	0031      	movs	r1, r6
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    4e14:	2603      	movs	r6, #3
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    4e16:	9301      	str	r3, [sp, #4]
    4e18:	0022      	movs	r2, r4
    4e1a:	9400      	str	r4, [sp, #0]
    4e1c:	4814      	ldr	r0, [pc, #80]	; (4e70 <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    4e1e:	f000 faad 	bl	537c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    4e22:	0039      	movs	r1, r7
    4e24:	9600      	str	r6, [sp, #0]
    4e26:	9401      	str	r4, [sp, #4]
    4e28:	230a      	movs	r3, #10
    4e2a:	220b      	movs	r2, #11
    4e2c:	4811      	ldr	r0, [pc, #68]	; (4e74 <_GLOBAL__sub_I_g_APinDescription+0xa0>)
    4e2e:	f000 faa5 	bl	537c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial3( SERCOM_INSTANCE_SERIAL3, PIN_SERIAL3_RX, PIN_SERIAL3_TX, PAD_SERIAL3_RX, PAD_SERIAL3_TX ) ;
    4e32:	9600      	str	r6, [sp, #0]
    4e34:	0029      	movs	r1, r5
    4e36:	9401      	str	r4, [sp, #4]
    4e38:	2312      	movs	r3, #18
    4e3a:	2213      	movs	r2, #19
    4e3c:	480e      	ldr	r0, [pc, #56]	; (4e78 <_GLOBAL__sub_I_g_APinDescription+0xa4>)
    4e3e:	f000 fa9d 	bl	537c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    }
    4e42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4e44:	20001268 	.word	0x20001268
    4e48:	42000400 	.word	0x42000400
    4e4c:	2000126c 	.word	0x2000126c
    4e50:	42000800 	.word	0x42000800
    4e54:	20001270 	.word	0x20001270
    4e58:	20001274 	.word	0x20001274
    4e5c:	42000c00 	.word	0x42000c00
    4e60:	20001278 	.word	0x20001278
    4e64:	42001000 	.word	0x42001000
    4e68:	43000400 	.word	0x43000400
    4e6c:	2000127c 	.word	0x2000127c
    4e70:	20001034 	.word	0x20001034
    4e74:	200010f0 	.word	0x200010f0
    4e78:	200011ac 	.word	0x200011ac

00004e7c <_Znwj>:
    4e7c:	b510      	push	{r4, lr}
    4e7e:	f007 fdd3 	bl	ca28 <malloc>
    4e82:	bd10      	pop	{r4, pc}

00004e84 <_ZdlPv>:
    4e84:	b510      	push	{r4, lr}
    4e86:	f007 fdd9 	bl	ca3c <free>
    4e8a:	bd10      	pop	{r4, pc}

00004e8c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e8e:	0006      	movs	r6, r0
    4e90:	000d      	movs	r5, r1
    4e92:	000c      	movs	r4, r1
    4e94:	188b      	adds	r3, r1, r2
    4e96:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    4e98:	9b01      	ldr	r3, [sp, #4]
    4e9a:	1b67      	subs	r7, r4, r5
    4e9c:	429c      	cmp	r4, r3
    4e9e:	d007      	beq.n	4eb0 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    4ea0:	6833      	ldr	r3, [r6, #0]
    4ea2:	7821      	ldrb	r1, [r4, #0]
    4ea4:	681b      	ldr	r3, [r3, #0]
    4ea6:	0030      	movs	r0, r6
    4ea8:	4798      	blx	r3
    4eaa:	3401      	adds	r4, #1
    4eac:	2800      	cmp	r0, #0
    4eae:	d1f3      	bne.n	4e98 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    4eb0:	0038      	movs	r0, r7
    4eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004eb4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    4eb4:	b570      	push	{r4, r5, r6, lr}
    4eb6:	0005      	movs	r5, r0
    4eb8:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    4eba:	1e08      	subs	r0, r1, #0
    4ebc:	d007      	beq.n	4ece <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    4ebe:	f008 ff1a 	bl	dcf6 <strlen>
    4ec2:	682b      	ldr	r3, [r5, #0]
    4ec4:	0002      	movs	r2, r0
    4ec6:	685b      	ldr	r3, [r3, #4]
    4ec8:	0021      	movs	r1, r4
    4eca:	0028      	movs	r0, r5
    4ecc:	4798      	blx	r3
    }
    4ece:	bd70      	pop	{r4, r5, r6, pc}

00004ed0 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    4ed0:	b510      	push	{r4, lr}
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4ed2:	f7ff ffef 	bl	4eb4 <_ZN5Print5writeEPKc>
}
    4ed6:	bd10      	pop	{r4, pc}

00004ed8 <_ZN5Print5printERK6String>:
{
    4ed8:	b510      	push	{r4, lr}
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    4eda:	6803      	ldr	r3, [r0, #0]
    4edc:	688a      	ldr	r2, [r1, #8]
    4ede:	685b      	ldr	r3, [r3, #4]
    4ee0:	6809      	ldr	r1, [r1, #0]
    4ee2:	4798      	blx	r3
}
    4ee4:	bd10      	pop	{r4, pc}

00004ee6 <_ZN5Print5printEPKc>:
{
    4ee6:	b510      	push	{r4, lr}
  return write(str);
    4ee8:	f7ff ffe4 	bl	4eb4 <_ZN5Print5writeEPKc>
}
    4eec:	bd10      	pop	{r4, pc}

00004eee <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    4eee:	b510      	push	{r4, lr}
  return write(c);
    4ef0:	6803      	ldr	r3, [r0, #0]
    4ef2:	681b      	ldr	r3, [r3, #0]
    4ef4:	4798      	blx	r3
}
    4ef6:	bd10      	pop	{r4, pc}

00004ef8 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    4ef8:	b510      	push	{r4, lr}
  return write("\r\n");
    4efa:	4902      	ldr	r1, [pc, #8]	; (4f04 <_ZN5Print7printlnEv+0xc>)
    4efc:	f7ff ffda 	bl	4eb4 <_ZN5Print5writeEPKc>
}
    4f00:	bd10      	pop	{r4, pc}
    4f02:	46c0      	nop			; (mov r8, r8)
    4f04:	0001113c 	.word	0x0001113c

00004f08 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
    4f08:	b570      	push	{r4, r5, r6, lr}
    4f0a:	0004      	movs	r4, r0
  return write(str);
    4f0c:	f7ff ffd2 	bl	4eb4 <_ZN5Print5writeEPKc>
    4f10:	0005      	movs	r5, r0
  n += println();
    4f12:	0020      	movs	r0, r4
    4f14:	f7ff fff0 	bl	4ef8 <_ZN5Print7printlnEv>
    4f18:	1940      	adds	r0, r0, r5
}
    4f1a:	bd70      	pop	{r4, r5, r6, pc}

00004f1c <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
    4f1c:	b570      	push	{r4, r5, r6, lr}
    4f1e:	0005      	movs	r5, r0
  size_t n = print(s);
    4f20:	f7ff ffda 	bl	4ed8 <_ZN5Print5printERK6String>
    4f24:	0004      	movs	r4, r0
  n += println();
    4f26:	0028      	movs	r0, r5
    4f28:	f7ff ffe6 	bl	4ef8 <_ZN5Print7printlnEv>
    4f2c:	1820      	adds	r0, r4, r0
  return n;
}
    4f2e:	bd70      	pop	{r4, r5, r6, pc}

00004f30 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    4f30:	b570      	push	{r4, r5, r6, lr}
    4f32:	0004      	movs	r4, r0
  return write(str);
    4f34:	f7ff ffbe 	bl	4eb4 <_ZN5Print5writeEPKc>
    4f38:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    4f3a:	0020      	movs	r0, r4
    4f3c:	f7ff ffdc 	bl	4ef8 <_ZN5Print7printlnEv>
    4f40:	1940      	adds	r0, r0, r5
  return n;
}
    4f42:	bd70      	pop	{r4, r5, r6, pc}

00004f44 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    4f44:	b570      	push	{r4, r5, r6, lr}
    4f46:	0005      	movs	r5, r0
  size_t n = print(c);
    4f48:	f7ff ffd1 	bl	4eee <_ZN5Print5printEc>
    4f4c:	0004      	movs	r4, r0
  n += println();
    4f4e:	0028      	movs	r0, r5
    4f50:	f7ff ffd2 	bl	4ef8 <_ZN5Print7printlnEv>
    4f54:	1820      	adds	r0, r4, r0
  return n;
}
    4f56:	bd70      	pop	{r4, r5, r6, pc}

00004f58 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    4f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f5a:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4f5c:	2200      	movs	r2, #0
{
    4f5e:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
    4f60:	ab02      	add	r3, sp, #8
    4f62:	3305      	adds	r3, #5
{
    4f64:	9001      	str	r0, [sp, #4]
    4f66:	000d      	movs	r5, r1
  *str = '\0';
    4f68:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4f6a:	2e01      	cmp	r6, #1
    4f6c:	dc00      	bgt.n	4f70 <_ZN5Print11printNumberEmh+0x18>
    4f6e:	260a      	movs	r6, #10
    4f70:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    4f72:	0028      	movs	r0, r5
    4f74:	0031      	movs	r1, r6
    4f76:	f004 fcc3 	bl	9900 <__aeabi_uidivmod>
    4f7a:	000f      	movs	r7, r1
    4f7c:	b2cb      	uxtb	r3, r1
    n /= base;
    4f7e:	0028      	movs	r0, r5
    4f80:	0031      	movs	r1, r6
    char c = n % base;
    4f82:	9300      	str	r3, [sp, #0]
    n /= base;
    4f84:	f004 fc36 	bl	97f4 <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4f88:	b2fb      	uxtb	r3, r7
    4f8a:	3337      	adds	r3, #55	; 0x37
    n /= base;
    4f8c:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4f8e:	3c01      	subs	r4, #1
    4f90:	b2db      	uxtb	r3, r3
    4f92:	2f09      	cmp	r7, #9
    4f94:	d802      	bhi.n	4f9c <_ZN5Print11printNumberEmh+0x44>
    4f96:	9b00      	ldr	r3, [sp, #0]
    4f98:	3330      	adds	r3, #48	; 0x30
    4f9a:	b2db      	uxtb	r3, r3
    4f9c:	7023      	strb	r3, [r4, #0]
  } while(n);
    4f9e:	2d00      	cmp	r5, #0
    4fa0:	d1e7      	bne.n	4f72 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
    4fa2:	0021      	movs	r1, r4
    4fa4:	9801      	ldr	r0, [sp, #4]
    4fa6:	f7ff ff85 	bl	4eb4 <_ZN5Print5writeEPKc>
}
    4faa:	b00d      	add	sp, #52	; 0x34
    4fac:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004fae <_ZN5Print5printEli>:
{
    4fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fb0:	0006      	movs	r6, r0
    4fb2:	000c      	movs	r4, r1
    4fb4:	1e15      	subs	r5, r2, #0
  if (base == 0) {
    4fb6:	d104      	bne.n	4fc2 <_ZN5Print5printEli+0x14>
    return write(n);
    4fb8:	6803      	ldr	r3, [r0, #0]
    4fba:	b2c9      	uxtb	r1, r1
    4fbc:	681b      	ldr	r3, [r3, #0]
    4fbe:	4798      	blx	r3
}
    4fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return printNumber((unsigned long)n, base);
    4fc2:	b2d2      	uxtb	r2, r2
  } else if (base == 10) {
    4fc4:	2d0a      	cmp	r5, #10
    4fc6:	d10d      	bne.n	4fe4 <_ZN5Print5printEli+0x36>
    return printNumber((unsigned long)n, 10);
    4fc8:	002a      	movs	r2, r5
    if (n < 0) {
    4fca:	2900      	cmp	r1, #0
    4fcc:	da0a      	bge.n	4fe4 <_ZN5Print5printEli+0x36>
      int t = print('-');
    4fce:	212d      	movs	r1, #45	; 0x2d
    4fd0:	f7ff ff8d 	bl	4eee <_ZN5Print5printEc>
      n = -n;
    4fd4:	4261      	negs	r1, r4
      int t = print('-');
    4fd6:	0007      	movs	r7, r0
      return printNumber((unsigned long)n, 10) + t;
    4fd8:	002a      	movs	r2, r5
    4fda:	0030      	movs	r0, r6
    4fdc:	f7ff ffbc 	bl	4f58 <_ZN5Print11printNumberEmh>
    4fe0:	1838      	adds	r0, r7, r0
    4fe2:	e7ed      	b.n	4fc0 <_ZN5Print5printEli+0x12>
    return printNumber((unsigned long)n, base);
    4fe4:	0021      	movs	r1, r4
    4fe6:	0030      	movs	r0, r6
    4fe8:	f7ff ffb6 	bl	4f58 <_ZN5Print11printNumberEmh>
    4fec:	e7e8      	b.n	4fc0 <_ZN5Print5printEli+0x12>

00004fee <_ZN5Print5printEii>:
{
    4fee:	b510      	push	{r4, lr}
  return print((long) n, base);
    4ff0:	f7ff ffdd 	bl	4fae <_ZN5Print5printEli>
}
    4ff4:	bd10      	pop	{r4, pc}

00004ff6 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    4ff6:	6001      	str	r1, [r0, #0]
}
    4ff8:	4770      	bx	lr

00004ffa <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}

void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    4ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ffc:	ac05      	add	r4, sp, #20
    4ffe:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    5000:	6804      	ldr	r4, [r0, #0]
    5002:	1e98      	subs	r0, r3, #2
    5004:	1e47      	subs	r7, r0, #1
    5006:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    5008:	6826      	ldr	r6, [r4, #0]
    500a:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    500c:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    500e:	4332      	orrs	r2, r6
    5010:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    5012:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    5014:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    5016:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    5018:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    501a:	6862      	ldr	r2, [r4, #4]
    501c:	4329      	orrs	r1, r5
    501e:	2000      	movs	r0, #0
    5020:	2b02      	cmp	r3, #2
    5022:	d000      	beq.n	5026 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    5024:	0358      	lsls	r0, r3, #13
    5026:	4311      	orrs	r1, r2
    5028:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    502a:	6061      	str	r1, [r4, #4]
}
    502c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000502e <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    502e:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    5030:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    5032:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    5034:	03a4      	lsls	r4, r4, #14
    5036:	6818      	ldr	r0, [r3, #0]
    5038:	0512      	lsls	r2, r2, #20
    503a:	4022      	ands	r2, r4
    503c:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    503e:	20c0      	movs	r0, #192	; 0xc0
    5040:	0409      	lsls	r1, r1, #16
    5042:	0280      	lsls	r0, r0, #10
    5044:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    5046:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    5048:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    504a:	685a      	ldr	r2, [r3, #4]
    504c:	4310      	orrs	r0, r2
    504e:	6058      	str	r0, [r3, #4]
}
    5050:	bd10      	pop	{r4, pc}

00005052 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    5052:	2201      	movs	r2, #1
    5054:	6803      	ldr	r3, [r0, #0]
    5056:	6819      	ldr	r1, [r3, #0]
    5058:	430a      	orrs	r2, r1
    505a:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    505c:	681a      	ldr	r2, [r3, #0]
    505e:	07d2      	lsls	r2, r2, #31
    5060:	d4fc      	bmi.n	505c <_ZN6SERCOM9resetUARTEv+0xa>
    5062:	69da      	ldr	r2, [r3, #28]
    5064:	07d2      	lsls	r2, r2, #31
    5066:	d4f9      	bmi.n	505c <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    5068:	4770      	bx	lr

0000506a <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    506a:	2202      	movs	r2, #2
    506c:	6803      	ldr	r3, [r0, #0]
    506e:	6819      	ldr	r1, [r3, #0]
    5070:	430a      	orrs	r2, r1
    5072:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    5074:	69da      	ldr	r2, [r3, #28]
    5076:	0792      	lsls	r2, r2, #30
    5078:	d4fc      	bmi.n	5074 <_ZN6SERCOM10enableUARTEv+0xa>
}
    507a:	4770      	bx	lr

0000507c <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    507c:	6803      	ldr	r3, [r0, #0]
    507e:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    5080:	07d2      	lsls	r2, r2, #31
    5082:	d402      	bmi.n	508a <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    5084:	7e1a      	ldrb	r2, [r3, #24]
    5086:	0792      	lsls	r2, r2, #30
    5088:	d5fc      	bpl.n	5084 <_ZN6SERCOM9flushUARTEv+0x8>
}
    508a:	4770      	bx	lr

0000508c <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    508c:	2200      	movs	r2, #0
    508e:	6803      	ldr	r3, [r0, #0]
    5090:	835a      	strh	r2, [r3, #26]
}
    5092:	4770      	bx	lr

00005094 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    5094:	6803      	ldr	r3, [r0, #0]
    5096:	7e18      	ldrb	r0, [r3, #24]
    5098:	0740      	lsls	r0, r0, #29
    509a:	0fc0      	lsrs	r0, r0, #31
}
    509c:	4770      	bx	lr

0000509e <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    509e:	6803      	ldr	r3, [r0, #0]
    50a0:	7e18      	ldrb	r0, [r3, #24]
    50a2:	09c0      	lsrs	r0, r0, #7
}
    50a4:	4770      	bx	lr

000050a6 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    50a6:	2380      	movs	r3, #128	; 0x80
    50a8:	6802      	ldr	r2, [r0, #0]
    50aa:	425b      	negs	r3, r3
    50ac:	7e11      	ldrb	r1, [r2, #24]
    50ae:	430b      	orrs	r3, r1
    50b0:	7613      	strb	r3, [r2, #24]
}
    50b2:	4770      	bx	lr

000050b4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    50b4:	6803      	ldr	r3, [r0, #0]
    50b6:	7e18      	ldrb	r0, [r3, #24]
    50b8:	07c0      	lsls	r0, r0, #31
    50ba:	0fc0      	lsrs	r0, r0, #31
}
    50bc:	4770      	bx	lr

000050be <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    50be:	6803      	ldr	r3, [r0, #0]
    50c0:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    50c2:	b2c0      	uxtb	r0, r0
}
    50c4:	4770      	bx	lr

000050c6 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    50c6:	6803      	ldr	r3, [r0, #0]
    50c8:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    50ca:	07d2      	lsls	r2, r2, #31
    50cc:	d5fc      	bpl.n	50c8 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    50ce:	b289      	uxth	r1, r1
  return 1;
}
    50d0:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    50d2:	8519      	strh	r1, [r3, #40]	; 0x28
}
    50d4:	4770      	bx	lr

000050d6 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    50d6:	2201      	movs	r2, #1
    50d8:	6803      	ldr	r3, [r0, #0]
    50da:	759a      	strb	r2, [r3, #22]
}
    50dc:	4770      	bx	lr

000050de <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    50de:	2201      	movs	r2, #1
    50e0:	6803      	ldr	r3, [r0, #0]
    50e2:	751a      	strb	r2, [r3, #20]
}
    50e4:	4770      	bx	lr
	...

000050e8 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:


}

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    50e8:	b570      	push	{r4, r5, r6, lr}
  if((clockMode & (0x1ul)) == 0 )
    cpha = 0;
  else
    cpha = 1;

  if((clockMode & (0x2ul)) == 0)
    50ea:	2501      	movs	r5, #1
    cpol = 0;
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    50ec:	6804      	ldr	r4, [r0, #0]
  if((clockMode & (0x2ul)) == 0)
    50ee:	084b      	lsrs	r3, r1, #1
    50f0:	402b      	ands	r3, r5
    cpha = 0;
    50f2:	4029      	ands	r1, r5
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    50f4:	6820      	ldr	r0, [r4, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    50f6:	0709      	lsls	r1, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    50f8:	075b      	lsls	r3, r3, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    50fa:	430b      	orrs	r3, r1
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    50fc:	4303      	orrs	r3, r0
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    50fe:	6023      	str	r3, [r4, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint32_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return ((SercomClock / (2 * baudrate)) - 1);
    5100:	4b04      	ldr	r3, [pc, #16]	; (5114 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x2c>)
    5102:	0051      	lsls	r1, r2, #1
    5104:	6818      	ldr	r0, [r3, #0]
    5106:	f004 fb75 	bl	97f4 <__udivsi3>
    510a:	3801      	subs	r0, #1
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    510c:	b2c0      	uxtb	r0, r0
    510e:	7320      	strb	r0, [r4, #12]
}
    5110:	bd70      	pop	{r4, r5, r6, pc}
    5112:	46c0      	nop			; (mov r8, r8)
    5114:	20000098 	.word	0x20000098

00005118 <_ZN6SERCOM8resetSPIEv>:
  sercom->SPI.CTRLA.bit.SWRST = 1;
    5118:	2201      	movs	r2, #1
    511a:	6803      	ldr	r3, [r0, #0]
    511c:	6819      	ldr	r1, [r3, #0]
    511e:	430a      	orrs	r2, r1
    5120:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    5122:	681a      	ldr	r2, [r3, #0]
    5124:	07d2      	lsls	r2, r2, #31
    5126:	d4fc      	bmi.n	5122 <_ZN6SERCOM8resetSPIEv+0xa>
    5128:	69da      	ldr	r2, [r3, #28]
    512a:	07d2      	lsls	r2, r2, #31
    512c:	d4f9      	bmi.n	5122 <_ZN6SERCOM8resetSPIEv+0xa>
}
    512e:	4770      	bx	lr

00005130 <_ZN6SERCOM9enableSPIEv>:
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    5130:	2202      	movs	r2, #2
    5132:	6803      	ldr	r3, [r0, #0]
    5134:	6819      	ldr	r1, [r3, #0]
    5136:	430a      	orrs	r2, r1
    5138:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    513a:	69da      	ldr	r2, [r3, #28]
    513c:	0792      	lsls	r2, r2, #30
    513e:	d4fc      	bmi.n	513a <_ZN6SERCOM9enableSPIEv+0xa>
}
    5140:	4770      	bx	lr

00005142 <_ZN6SERCOM10disableSPIEv>:
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    5142:	6803      	ldr	r3, [r0, #0]
    5144:	69da      	ldr	r2, [r3, #28]
    5146:	0792      	lsls	r2, r2, #30
    5148:	d4fc      	bmi.n	5144 <_ZN6SERCOM10disableSPIEv+0x2>
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    514a:	2102      	movs	r1, #2
    514c:	681a      	ldr	r2, [r3, #0]
    514e:	438a      	bics	r2, r1
    5150:	601a      	str	r2, [r3, #0]
}
    5152:	4770      	bx	lr

00005154 <_ZN6SERCOM15transferDataSPIEh>:
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    5154:	6802      	ldr	r2, [r0, #0]
    5156:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5158:	0a5b      	lsrs	r3, r3, #9
    515a:	025b      	lsls	r3, r3, #9
    515c:	4319      	orrs	r1, r3
    515e:	6291      	str	r1, [r2, #40]	; 0x28
  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    5160:	7e13      	ldrb	r3, [r2, #24]
    5162:	075b      	lsls	r3, r3, #29
    5164:	d5fc      	bpl.n	5160 <_ZN6SERCOM15transferDataSPIEh+0xc>
  return sercom->SPI.DATA.bit.DATA;  // Reading data
    5166:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5168:	b2c0      	uxtb	r0, r0
}
    516a:	4770      	bx	lr

0000516c <_ZN6SERCOM13initClockNVICEv>:
    IRQn_Type IdNvic3=PendSV_IRQn ;
  #else
    IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
  #endif

  if(sercom == SERCOM0)
    516c:	2284      	movs	r2, #132	; 0x84
    516e:	6803      	ldr	r3, [r0, #0]
{
    5170:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    5172:	05d2      	lsls	r2, r2, #23
    5174:	4293      	cmp	r3, r2
    5176:	d011      	beq.n	519c <_ZN6SERCOM13initClockNVICEv+0x30>
      IdNvic3 = SERCOM0_3_IRQn;
    #else
      IdNvic = SERCOM0_IRQn;
    #endif
  }
  else if(sercom == SERCOM1)
    5178:	4a21      	ldr	r2, [pc, #132]	; (5200 <_ZN6SERCOM13initClockNVICEv+0x94>)
    517a:	4293      	cmp	r3, r2
    517c:	d034      	beq.n	51e8 <_ZN6SERCOM13initClockNVICEv+0x7c>
    #else
      IdNvic = SERCOM1_IRQn;
    #endif
  }
#if !(SAMD11C14)
  else if(sercom == SERCOM2)
    517e:	4a21      	ldr	r2, [pc, #132]	; (5204 <_ZN6SERCOM13initClockNVICEv+0x98>)
    5180:	4293      	cmp	r3, r2
    5182:	d034      	beq.n	51ee <_ZN6SERCOM13initClockNVICEv+0x82>
      IdNvic = SERCOM2_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES)
  else if(sercom == SERCOM3)
    5184:	4a20      	ldr	r2, [pc, #128]	; (5208 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    5186:	4293      	cmp	r3, r2
    5188:	d034      	beq.n	51f4 <_ZN6SERCOM13initClockNVICEv+0x88>
      IdNvic = SERCOM3_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES) && !(SAMD21E) && !(SAMC21E)
  else if(sercom == SERCOM4)
    518a:	4a20      	ldr	r2, [pc, #128]	; (520c <_ZN6SERCOM13initClockNVICEv+0xa0>)
    518c:	4293      	cmp	r3, r2
    518e:	d034      	beq.n	51fa <_ZN6SERCOM13initClockNVICEv+0x8e>
      IdNvic3 = SERCOM4_3_IRQn;
    #else
      IdNvic = SERCOM4_IRQn;
    #endif
  }
  else if(sercom == SERCOM5)
    5190:	4a1f      	ldr	r2, [pc, #124]	; (5210 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    5192:	4293      	cmp	r3, r2
    5194:	d127      	bne.n	51e6 <_ZN6SERCOM13initClockNVICEv+0x7a>
      IdNvic0 = SERCOM5_0_IRQn;
      IdNvic1 = SERCOM5_1_IRQn;
      IdNvic2 = SERCOM5_2_IRQn;
      IdNvic3 = SERCOM5_3_IRQn;
    #else
      IdNvic = SERCOM5_IRQn;
    5196:	230d      	movs	r3, #13
    clockId = GCM_SERCOM5_CORE;
    5198:	2218      	movs	r2, #24
    519a:	e001      	b.n	51a0 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM0_IRQn;
    519c:	2308      	movs	r3, #8
    clockId = GCM_SERCOM0_CORE;
    519e:	2212      	movs	r2, #18
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    51a0:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    51a2:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    51a4:	4099      	lsls	r1, r3
    51a6:	481b      	ldr	r0, [pc, #108]	; (5214 <_ZN6SERCOM13initClockNVICEv+0xa8>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    51a8:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    51aa:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    51ac:	0899      	lsrs	r1, r3, #2
    51ae:	402b      	ands	r3, r5
    51b0:	40ab      	lsls	r3, r5
    51b2:	35fc      	adds	r5, #252	; 0xfc
    51b4:	409d      	lsls	r5, r3
    51b6:	0089      	lsls	r1, r1, #2
    51b8:	1809      	adds	r1, r1, r0
    51ba:	00a4      	lsls	r4, r4, #2
    51bc:	5908      	ldr	r0, [r1, r4]
    51be:	0092      	lsls	r2, r2, #2
    51c0:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    51c2:	25c0      	movs	r5, #192	; 0xc0
    51c4:	409d      	lsls	r5, r3
    51c6:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    51c8:	4303      	orrs	r3, r0
    51ca:	510b      	str	r3, [r1, r4]
#if (SAMD21 || SAMD11)
  GCLK->CLKCTRL.reg = ( GCLK_CLKCTRL_ID( clockId ) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_CLKEN );
  SercomClock = SystemCoreClock;
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21)
  GCLK->PCHCTRL[clockId].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    51cc:	4b12      	ldr	r3, [pc, #72]	; (5218 <_ZN6SERCOM13initClockNVICEv+0xac>)
    51ce:	18d1      	adds	r1, r2, r3
    51d0:	2340      	movs	r3, #64	; 0x40
    51d2:	67cb      	str	r3, [r1, #124]	; 0x7c
  SercomClock = SystemCoreClock;
    51d4:	4911      	ldr	r1, [pc, #68]	; (521c <_ZN6SERCOM13initClockNVICEv+0xb0>)
    51d6:	6808      	ldr	r0, [r1, #0]
    51d8:	4911      	ldr	r1, [pc, #68]	; (5220 <_ZN6SERCOM13initClockNVICEv+0xb4>)
    51da:	6008      	str	r0, [r1, #0]
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    51dc:	490e      	ldr	r1, [pc, #56]	; (5218 <_ZN6SERCOM13initClockNVICEv+0xac>)
    51de:	1852      	adds	r2, r2, r1
    51e0:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    51e2:	4219      	tst	r1, r3
    51e4:	d0fc      	beq.n	51e0 <_ZN6SERCOM13initClockNVICEv+0x74>
  SercomClock = 96000000ul;
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
#else
  #error "SERCOM.cpp: Unsupported chip"
#endif
}
    51e6:	bd30      	pop	{r4, r5, pc}
      IdNvic = SERCOM1_IRQn;
    51e8:	2309      	movs	r3, #9
    clockId = GCM_SERCOM1_CORE;
    51ea:	2213      	movs	r2, #19
    51ec:	e7d8      	b.n	51a0 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM2_IRQn;
    51ee:	230a      	movs	r3, #10
    clockId = GCM_SERCOM2_CORE;
    51f0:	2214      	movs	r2, #20
    51f2:	e7d5      	b.n	51a0 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM3_IRQn;
    51f4:	230b      	movs	r3, #11
    clockId = GCM_SERCOM3_CORE;
    51f6:	2215      	movs	r2, #21
    51f8:	e7d2      	b.n	51a0 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM4_IRQn;
    51fa:	230c      	movs	r3, #12
    clockId = GCM_SERCOM4_CORE;
    51fc:	2216      	movs	r2, #22
    51fe:	e7cf      	b.n	51a0 <_ZN6SERCOM13initClockNVICEv+0x34>
    5200:	42000400 	.word	0x42000400
    5204:	42000800 	.word	0x42000800
    5208:	42000c00 	.word	0x42000c00
    520c:	42001000 	.word	0x42001000
    5210:	43000400 	.word	0x43000400
    5214:	e000e100 	.word	0xe000e100
    5218:	40001804 	.word	0x40001804
    521c:	20000084 	.word	0x20000084
    5220:	20000098 	.word	0x20000098

00005224 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    5224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5226:	0016      	movs	r6, r2
    5228:	001d      	movs	r5, r3
  if (sercom == SERCOM5) {
    522a:	6802      	ldr	r2, [r0, #0]
    522c:	4b18      	ldr	r3, [pc, #96]	; (5290 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6c>)
{
    522e:	0004      	movs	r4, r0
    5230:	000f      	movs	r7, r1
  if (sercom == SERCOM5) {
    5232:	429a      	cmp	r2, r3
    5234:	d100      	bne.n	5238 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x14>
    sampleRate = SAMPLE_RATE_x16;
    5236:	2601      	movs	r6, #1
  initClockNVIC();
    5238:	0020      	movs	r0, r4
    523a:	f7ff ff97 	bl	516c <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    523e:	0020      	movs	r0, r4
    5240:	f7ff ff07 	bl	5052 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    5244:	221c      	movs	r2, #28
    5246:	00bb      	lsls	r3, r7, #2
    5248:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    524a:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    524c:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    524e:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    5250:	4313      	orrs	r3, r2
    5252:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    5254:	2384      	movs	r3, #132	; 0x84
    5256:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    5258:	2f01      	cmp	r7, #1
    525a:	d118      	bne.n	528e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6a>
      sampleRateValue = 16;
    525c:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    525e:	2e01      	cmp	r6, #1
    5260:	d000      	beq.n	5264 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x40>
      sampleRateValue = 8;
    5262:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SercomClock * 8) / (sampleRateValue * baudrate);
    5264:	4b0b      	ldr	r3, [pc, #44]	; (5294 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x70>)
    5266:	4369      	muls	r1, r5
    5268:	6818      	ldr	r0, [r3, #0]
    526a:	00c0      	lsls	r0, r0, #3
    526c:	f004 fac2 	bl	97f4 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    5270:	2207      	movs	r2, #7
    5272:	89a3      	ldrh	r3, [r4, #12]
    5274:	4002      	ands	r2, r0
    5276:	04db      	lsls	r3, r3, #19
    5278:	0352      	lsls	r2, r2, #13
    527a:	0cdb      	lsrs	r3, r3, #19
    527c:	4313      	orrs	r3, r2
    527e:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    5280:	0403      	lsls	r3, r0, #16
    5282:	89a0      	ldrh	r0, [r4, #12]
    5284:	0cdb      	lsrs	r3, r3, #19
    5286:	0b40      	lsrs	r0, r0, #13
    5288:	0340      	lsls	r0, r0, #13
    528a:	4318      	orrs	r0, r3
    528c:	81a0      	strh	r0, [r4, #12]
}
    528e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5290:	43000400 	.word	0x43000400
    5294:	20000098 	.word	0x20000098

00005298 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
{
    5298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    529a:	0007      	movs	r7, r0
    529c:	9301      	str	r3, [sp, #4]
    529e:	ab08      	add	r3, sp, #32
    52a0:	781e      	ldrb	r6, [r3, #0]
    52a2:	000d      	movs	r5, r1
    52a4:	0014      	movs	r4, r2
  resetSPI();
    52a6:	f7ff ff37 	bl	5118 <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    52aa:	0038      	movs	r0, r7
    52ac:	f7ff ff5e 	bl	516c <_ZN6SERCOM13initClockNVICEv>
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    52b0:	22c0      	movs	r2, #192	; 0xc0
    52b2:	0524      	lsls	r4, r4, #20
    52b4:	0392      	lsls	r2, r2, #14
    52b6:	4014      	ands	r4, r2
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    52b8:	07b2      	lsls	r2, r6, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    52ba:	260c      	movs	r6, #12
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    52bc:	2107      	movs	r1, #7
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    52be:	4316      	orrs	r6, r2
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    52c0:	9a01      	ldr	r2, [sp, #4]
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    52c2:	4334      	orrs	r4, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    52c4:	400a      	ands	r2, r1
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    52c6:	26c0      	movs	r6, #192	; 0xc0
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    52c8:	0011      	movs	r1, r2
    52ca:	2280      	movs	r2, #128	; 0x80
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    52cc:	02b6      	lsls	r6, r6, #10
    52ce:	042d      	lsls	r5, r5, #16
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE( SPI_MASTER_OPERATION ) |
    52d0:	683b      	ldr	r3, [r7, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    52d2:	4035      	ands	r5, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    52d4:	0292      	lsls	r2, r2, #10
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    52d6:	4325      	orrs	r5, r4
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    52d8:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE( SPI_MASTER_OPERATION ) |
    52da:	601d      	str	r5, [r3, #0]
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    52dc:	605a      	str	r2, [r3, #4]
}
    52de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000052e0 <_ZN4UartcvbEv>:
    void errorHandler();
#else
    void IrqHandler();
#endif

    operator bool() { return true; }
    52e0:	2001      	movs	r0, #1
    52e2:	4770      	bx	lr

000052e4 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    52e4:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    52e6:	6803      	ldr	r3, [r0, #0]
    52e8:	4a01      	ldr	r2, [pc, #4]	; (52f0 <_ZN4Uart5beginEm+0xc>)
    52ea:	6a1b      	ldr	r3, [r3, #32]
    52ec:	4798      	blx	r3
}
    52ee:	bd10      	pop	{r4, pc}
    52f0:	00000413 	.word	0x00000413

000052f4 <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    52f4:	b510      	push	{r4, lr}
    52f6:	0004      	movs	r4, r0
  sercom->resetUART();
    52f8:	6900      	ldr	r0, [r0, #16]
    52fa:	f7ff feaa 	bl	5052 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    52fe:	0020      	movs	r0, r4
    5300:	3014      	adds	r0, #20
    5302:	f003 fb11 	bl	8928 <_ZN10RingBuffer5clearEv>
  txBuffer.clear();
    5306:	0020      	movs	r0, r4
    5308:	305c      	adds	r0, #92	; 0x5c
    530a:	f003 fb0d 	bl	8928 <_ZN10RingBuffer5clearEv>
}
    530e:	bd10      	pop	{r4, pc}

00005310 <_ZN4Uart9availableEv>:
  }
}
#endif

int Uart::available()
{
    5310:	b510      	push	{r4, lr}
  return rxBuffer.available();
    5312:	3014      	adds	r0, #20
    5314:	f003 fb1c 	bl	8950 <_ZN10RingBuffer9availableEv>
}
    5318:	bd10      	pop	{r4, pc}

0000531a <_ZN4Uart5flushEv>:
{
    531a:	b510      	push	{r4, lr}
    531c:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    531e:	0020      	movs	r0, r4
    5320:	305c      	adds	r0, #92	; 0x5c
    5322:	f003 fb15 	bl	8950 <_ZN10RingBuffer9availableEv>
    5326:	2800      	cmp	r0, #0
    5328:	d1f9      	bne.n	531e <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    532a:	6920      	ldr	r0, [r4, #16]
    532c:	f7ff fea6 	bl	507c <_ZN6SERCOM9flushUARTEv>
}
    5330:	bd10      	pop	{r4, pc}

00005332 <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    5332:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    5334:	305c      	adds	r0, #92	; 0x5c
    5336:	f003 fb11 	bl	895c <_ZN10RingBuffer17availableForStoreEv>
}
    533a:	bd10      	pop	{r4, pc}

0000533c <_ZN4Uart4readEv>:
{
  return rxBuffer.peek();
}

int Uart::read()
{
    533c:	b570      	push	{r4, r5, r6, lr}
  int c = rxBuffer.read_char();
    533e:	0005      	movs	r5, r0
{
    5340:	0004      	movs	r4, r0
  int c = rxBuffer.read_char();
    5342:	3514      	adds	r5, #20
    5344:	0028      	movs	r0, r5
    5346:	f003 faf3 	bl	8930 <_ZN10RingBuffer9read_charEv>

  if (uc_pinRTS != NO_RTS_PIN) {
    534a:	0023      	movs	r3, r4
    534c:	33a8      	adds	r3, #168	; 0xa8
    534e:	781b      	ldrb	r3, [r3, #0]
  int c = rxBuffer.read_char();
    5350:	0006      	movs	r6, r0
  if (uc_pinRTS != NO_RTS_PIN) {
    5352:	2bff      	cmp	r3, #255	; 0xff
    5354:	d00a      	beq.n	536c <_ZN4Uart4readEv+0x30>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    5356:	0028      	movs	r0, r5
    5358:	f003 fb00 	bl	895c <_ZN10RingBuffer17availableForStoreEv>
    535c:	280a      	cmp	r0, #10
    535e:	dd05      	ble.n	536c <_ZN4Uart4readEv+0x30>
      *pul_outclrRTS = ul_pinMaskRTS;
    5360:	0023      	movs	r3, r4
    5362:	34b4      	adds	r4, #180	; 0xb4
    5364:	33b0      	adds	r3, #176	; 0xb0
    5366:	681b      	ldr	r3, [r3, #0]
    5368:	6822      	ldr	r2, [r4, #0]
    536a:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
}
    536c:	0030      	movs	r0, r6
    536e:	bd70      	pop	{r4, r5, r6, pc}

00005370 <_ZN4Uart4peekEv>:
{
    5370:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    5372:	3014      	adds	r0, #20
    5374:	f003 fb00 	bl	8978 <_ZN10RingBuffer4peekEv>
}
    5378:	bd10      	pop	{r4, pc}
	...

0000537c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    537c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    537e:	001d      	movs	r5, r3
    5380:	ab08      	add	r3, sp, #32
    5382:	781b      	ldrb	r3, [r3, #0]
    5384:	0004      	movs	r4, r0
    5386:	9300      	str	r3, [sp, #0]
    5388:	ab09      	add	r3, sp, #36	; 0x24
    538a:	781b      	ldrb	r3, [r3, #0]
    538c:	0016      	movs	r6, r2
    538e:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
    5390:	2300      	movs	r3, #0
    5392:	6043      	str	r3, [r0, #4]
    5394:	23fa      	movs	r3, #250	; 0xfa
    5396:	009b      	lsls	r3, r3, #2
    5398:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    539a:	4b0e      	ldr	r3, [pc, #56]	; (53d4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    539c:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    539e:	3308      	adds	r3, #8
    53a0:	6003      	str	r3, [r0, #0]
    53a2:	3014      	adds	r0, #20
    53a4:	f003 faaa 	bl	88fc <_ZN10RingBufferC1Ev>
    53a8:	0020      	movs	r0, r4
    53aa:	305c      	adds	r0, #92	; 0x5c
    53ac:	f003 faa6 	bl	88fc <_ZN10RingBufferC1Ev>
  uc_padRX = _padRX ;
    53b0:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    53b2:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
    53b4:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    53b6:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
    53b8:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
    53ba:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
    53bc:	466a      	mov	r2, sp
    53be:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    53c0:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
    53c2:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
    53c4:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
    53c6:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
    53c8:	23ff      	movs	r3, #255	; 0xff
    53ca:	32a8      	adds	r2, #168	; 0xa8
}
    53cc:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
    53ce:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
    53d0:	7413      	strb	r3, [r2, #16]
}
    53d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    53d4:	00011140 	.word	0x00011140

000053d8 <_ZN4Uart10IrqHandlerEv>:
{
    53d8:	b570      	push	{r4, r5, r6, lr}
    53da:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    53dc:	6900      	ldr	r0, [r0, #16]
    53de:	f7ff fe59 	bl	5094 <_ZN6SERCOM17availableDataUARTEv>
    53e2:	2800      	cmp	r0, #0
    53e4:	d019      	beq.n	541a <_ZN4Uart10IrqHandlerEv+0x42>
    rxBuffer.store_char(sercom->readDataUART());
    53e6:	0025      	movs	r5, r4
    53e8:	6920      	ldr	r0, [r4, #16]
    53ea:	f7ff fe68 	bl	50be <_ZN6SERCOM12readDataUARTEv>
    53ee:	3514      	adds	r5, #20
    53f0:	0001      	movs	r1, r0
    53f2:	0028      	movs	r0, r5
    53f4:	f003 fa8d 	bl	8912 <_ZN10RingBuffer10store_charEh>
    if (uc_pinRTS != NO_RTS_PIN) {
    53f8:	0023      	movs	r3, r4
    53fa:	33a8      	adds	r3, #168	; 0xa8
    53fc:	781b      	ldrb	r3, [r3, #0]
    53fe:	2bff      	cmp	r3, #255	; 0xff
    5400:	d00b      	beq.n	541a <_ZN4Uart10IrqHandlerEv+0x42>
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    5402:	0028      	movs	r0, r5
    5404:	f003 faaa 	bl	895c <_ZN10RingBuffer17availableForStoreEv>
    5408:	2809      	cmp	r0, #9
    540a:	dc06      	bgt.n	541a <_ZN4Uart10IrqHandlerEv+0x42>
        *pul_outsetRTS = ul_pinMaskRTS;
    540c:	0023      	movs	r3, r4
    540e:	0022      	movs	r2, r4
    5410:	33ac      	adds	r3, #172	; 0xac
    5412:	32b4      	adds	r2, #180	; 0xb4
    5414:	681b      	ldr	r3, [r3, #0]
    5416:	6812      	ldr	r2, [r2, #0]
    5418:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    541a:	6920      	ldr	r0, [r4, #16]
    541c:	f7ff fe4a 	bl	50b4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    5420:	2800      	cmp	r0, #0
    5422:	d00d      	beq.n	5440 <_ZN4Uart10IrqHandlerEv+0x68>
    if (txBuffer.available()) {
    5424:	0025      	movs	r5, r4
    5426:	355c      	adds	r5, #92	; 0x5c
    5428:	0028      	movs	r0, r5
    542a:	f003 fa91 	bl	8950 <_ZN10RingBuffer9availableEv>
    542e:	2800      	cmp	r0, #0
    5430:	d012      	beq.n	5458 <_ZN4Uart10IrqHandlerEv+0x80>
      uint8_t data = txBuffer.read_char();
    5432:	0028      	movs	r0, r5
    5434:	f003 fa7c 	bl	8930 <_ZN10RingBuffer9read_charEv>
      sercom->writeDataUART(data);
    5438:	b2c1      	uxtb	r1, r0
    543a:	6920      	ldr	r0, [r4, #16]
    543c:	f7ff fe43 	bl	50c6 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    5440:	6920      	ldr	r0, [r4, #16]
    5442:	f7ff fe2c 	bl	509e <_ZN6SERCOM11isUARTErrorEv>
    5446:	2800      	cmp	r0, #0
    5448:	d005      	beq.n	5456 <_ZN4Uart10IrqHandlerEv+0x7e>
    sercom->acknowledgeUARTError();
    544a:	6920      	ldr	r0, [r4, #16]
    544c:	f7ff fe2b 	bl	50a6 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    5450:	6920      	ldr	r0, [r4, #16]
    5452:	f7ff fe1b 	bl	508c <_ZN6SERCOM15clearStatusUARTEv>
}
    5456:	bd70      	pop	{r4, r5, r6, pc}
      sercom->disableDataRegisterEmptyInterruptUART();
    5458:	6920      	ldr	r0, [r4, #16]
    545a:	f7ff fe40 	bl	50de <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    545e:	e7ef      	b.n	5440 <_ZN4Uart10IrqHandlerEv+0x68>

00005460 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    5460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5462:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    5464:	6900      	ldr	r0, [r0, #16]
{
    5466:	000e      	movs	r6, r1
    5468:	0025      	movs	r5, r4
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    546a:	f7ff fe23 	bl	50b4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    546e:	355c      	adds	r5, #92	; 0x5c
    5470:	2800      	cmp	r0, #0
    5472:	d120      	bne.n	54b6 <_ZN4Uart5writeEh+0x56>
    while(txBuffer.isFull()) {
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);

      if (interruptsEnabled) {
        //uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    5474:	273f      	movs	r7, #63	; 0x3f
    while(txBuffer.isFull()) {
    5476:	0028      	movs	r0, r5
    5478:	f003 fa88 	bl	898c <_ZN10RingBuffer6isFullEv>
    547c:	2800      	cmp	r0, #0
    547e:	d02d      	beq.n	54dc <_ZN4Uart5writeEh+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5480:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    5484:	2201      	movs	r2, #1
    5486:	4213      	tst	r3, r2
    5488:	d10c      	bne.n	54a4 <_ZN4Uart5writeEh+0x44>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    548a:	f3ef 8305 	mrs	r3, IPSR
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    548e:	403b      	ands	r3, r7

        if (exceptionNumber == 0 ||
    5490:	d0f1      	beq.n	5476 <_ZN4Uart5writeEh+0x16>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    5492:	3b10      	subs	r3, #16
    5494:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    5496:	2b00      	cmp	r3, #0
    5498:	db17      	blt.n	54ca <_ZN4Uart5writeEh+0x6a>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    549a:	089b      	lsrs	r3, r3, #2
    549c:	33c0      	adds	r3, #192	; 0xc0
    549e:	4a14      	ldr	r2, [pc, #80]	; (54f0 <_ZN4Uart5writeEh+0x90>)
    54a0:	009b      	lsls	r3, r3, #2
    54a2:	589b      	ldr	r3, [r3, r2]
        }
      }

      // interrupts are disabled or called from ISR with higher or equal priority than the SERCOM IRQ
      // manually call the UART IRQ handler when the data register is empty
      if (sercom->isDataRegisterEmptyUART()) {
    54a4:	6920      	ldr	r0, [r4, #16]
    54a6:	f7ff fe05 	bl	50b4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    54aa:	2800      	cmp	r0, #0
    54ac:	d0e3      	beq.n	5476 <_ZN4Uart5writeEh+0x16>
#if (SAMD51)
        dataRegisterEmptyHandler();
#else
        IrqHandler();
    54ae:	0020      	movs	r0, r4
    54b0:	f7ff ff92 	bl	53d8 <_ZN4Uart10IrqHandlerEv>
    54b4:	e7df      	b.n	5476 <_ZN4Uart5writeEh+0x16>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    54b6:	0028      	movs	r0, r5
    54b8:	f003 fa4a 	bl	8950 <_ZN10RingBuffer9availableEv>
    54bc:	2800      	cmp	r0, #0
    54be:	d1d9      	bne.n	5474 <_ZN4Uart5writeEh+0x14>
    sercom->writeDataUART(data);
    54c0:	0031      	movs	r1, r6
    54c2:	6920      	ldr	r0, [r4, #16]
    54c4:	f7ff fdff 	bl	50c6 <_ZN6SERCOM13writeDataUARTEh>
    txBuffer.store_char(data);

    sercom->enableDataRegisterEmptyInterruptUART();
  }

  return 1;
    54c8:	e00f      	b.n	54ea <_ZN4Uart5writeEh+0x8a>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    54ca:	220f      	movs	r2, #15
    54cc:	4013      	ands	r3, r2
    54ce:	3b08      	subs	r3, #8
    54d0:	089b      	lsrs	r3, r3, #2
    54d2:	4a08      	ldr	r2, [pc, #32]	; (54f4 <_ZN4Uart5writeEh+0x94>)
    54d4:	009b      	lsls	r3, r3, #2
    54d6:	189b      	adds	r3, r3, r2
    54d8:	681b      	ldr	r3, [r3, #0]
    54da:	e7e3      	b.n	54a4 <_ZN4Uart5writeEh+0x44>
    txBuffer.store_char(data);
    54dc:	0028      	movs	r0, r5
    54de:	0031      	movs	r1, r6
    54e0:	f003 fa17 	bl	8912 <_ZN10RingBuffer10store_charEh>
    sercom->enableDataRegisterEmptyInterruptUART();
    54e4:	6920      	ldr	r0, [r4, #16]
    54e6:	f7ff fdf6 	bl	50d6 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    54ea:	2001      	movs	r0, #1
    54ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54ee:	46c0      	nop			; (mov r8, r8)
    54f0:	e000e100 	.word	0xe000e100
    54f4:	e000ed1c 	.word	0xe000ed1c

000054f8 <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    54f8:	20f0      	movs	r0, #240	; 0xf0
    54fa:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    54fc:	3930      	subs	r1, #48	; 0x30
    54fe:	4248      	negs	r0, r1
    5500:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    5502:	4770      	bx	lr

00005504 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    5504:	23f0      	movs	r3, #240	; 0xf0
    5506:	011b      	lsls	r3, r3, #4
    5508:	4019      	ands	r1, r3
    550a:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    550c:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    550e:	009b      	lsls	r3, r3, #2
    5510:	4299      	cmp	r1, r3
    5512:	d00a      	beq.n	552a <_ZN4Uart15extractCharSizeEt+0x26>
    5514:	3301      	adds	r3, #1
    5516:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    5518:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    551a:	4299      	cmp	r1, r3
    551c:	d005      	beq.n	552a <_ZN4Uart15extractCharSizeEt+0x26>
    551e:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    5520:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    5522:	005b      	lsls	r3, r3, #1
    5524:	4299      	cmp	r1, r3
    5526:	d000      	beq.n	552a <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    5528:	2000      	movs	r0, #0

  }
}
    552a:	4770      	bx	lr

0000552c <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    552c:	200f      	movs	r0, #15
    552e:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    5530:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    5532:	2901      	cmp	r1, #1
    5534:	d003      	beq.n	553e <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    5536:	3902      	subs	r1, #2
    5538:	1e48      	subs	r0, r1, #1
    553a:	4181      	sbcs	r1, r0
    553c:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    553e:	4770      	bx	lr

00005540 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5540:	0003      	movs	r3, r0
{
    5542:	b5f0      	push	{r4, r5, r6, r7, lr}
    5544:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5546:	33a4      	adds	r3, #164	; 0xa4
{
    5548:	b085      	sub	sp, #20
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    554a:	7818      	ldrb	r0, [r3, #0]
{
    554c:	000f      	movs	r7, r1
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    554e:	210e      	movs	r1, #14
{
    5550:	0015      	movs	r5, r2
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5552:	f7fe fbeb 	bl	3d2c <pinPeripheral>
  pinPeripheral(uc_pinTX, PIO_SERCOM);
    5556:	0023      	movs	r3, r4
    5558:	33a5      	adds	r3, #165	; 0xa5
    555a:	7818      	ldrb	r0, [r3, #0]
    555c:	210e      	movs	r1, #14
    555e:	f7fe fbe5 	bl	3d2c <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    5562:	0023      	movs	r3, r4
    5564:	33a7      	adds	r3, #167	; 0xa7
    5566:	9303      	str	r3, [sp, #12]
    5568:	781b      	ldrb	r3, [r3, #0]
    556a:	2b02      	cmp	r3, #2
    556c:	d107      	bne.n	557e <_ZN4Uart5beginEmt+0x3e>
    if (uc_pinCTS != NO_CTS_PIN) {
    556e:	0023      	movs	r3, r4
    5570:	33b8      	adds	r3, #184	; 0xb8
    5572:	7818      	ldrb	r0, [r3, #0]
    5574:	28ff      	cmp	r0, #255	; 0xff
    5576:	d002      	beq.n	557e <_ZN4Uart5beginEmt+0x3e>
      pinPeripheral(uc_pinCTS, PIO_SERCOM);
    5578:	210e      	movs	r1, #14
    557a:	f7fe fbd7 	bl	3d2c <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    557e:	0026      	movs	r6, r4
    5580:	36a8      	adds	r6, #168	; 0xa8
    5582:	7830      	ldrb	r0, [r6, #0]
    5584:	28ff      	cmp	r0, #255	; 0xff
    5586:	d01a      	beq.n	55be <_ZN4Uart5beginEmt+0x7e>
    pinMode(uc_pinRTS, OUTPUT);
    5588:	2101      	movs	r1, #1
    558a:	f7fe fb61 	bl	3c50 <pinMode>
    uint8_t rtsPort = GetPort(uc_pinRTS);
    558e:	210c      	movs	r1, #12
    5590:	7833      	ldrb	r3, [r6, #0]
    5592:	4a1f      	ldr	r2, [pc, #124]	; (5610 <_ZN4Uart5beginEmt+0xd0>)
    5594:	4359      	muls	r1, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    5596:	0020      	movs	r0, r4
    5598:	5c8b      	ldrb	r3, [r1, r2]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    559a:	1852      	adds	r2, r2, r1
    559c:	7851      	ldrb	r1, [r2, #1]
    559e:	2201      	movs	r2, #1
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    55a0:	4e1c      	ldr	r6, [pc, #112]	; (5614 <_ZN4Uart5beginEmt+0xd4>)
    55a2:	01db      	lsls	r3, r3, #7
    55a4:	30ac      	adds	r0, #172	; 0xac
    55a6:	199e      	adds	r6, r3, r6
    55a8:	6006      	str	r6, [r0, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    55aa:	481b      	ldr	r0, [pc, #108]	; (5618 <_ZN4Uart5beginEmt+0xd8>)
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    55ac:	408a      	lsls	r2, r1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    55ae:	181b      	adds	r3, r3, r0
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    55b0:	0021      	movs	r1, r4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    55b2:	0020      	movs	r0, r4
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    55b4:	31b4      	adds	r1, #180	; 0xb4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    55b6:	30b0      	adds	r0, #176	; 0xb0
    55b8:	6003      	str	r3, [r0, #0]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    55ba:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
    55bc:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    55be:	2201      	movs	r2, #1
    55c0:	003b      	movs	r3, r7
    55c2:	0011      	movs	r1, r2
    55c4:	6920      	ldr	r0, [r4, #16]
    55c6:	f7ff fe2d 	bl	5224 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    55ca:	0029      	movs	r1, r5
    55cc:	0020      	movs	r0, r4
    55ce:	f7ff ff99 	bl	5504 <_ZN4Uart15extractCharSizeEt>
    55d2:	0029      	movs	r1, r5
    55d4:	0006      	movs	r6, r0
    55d6:	0020      	movs	r0, r4
    55d8:	f7ff ffa8 	bl	552c <_ZN4Uart13extractParityEt>
    55dc:	0029      	movs	r1, r5
    55de:	0007      	movs	r7, r0
    55e0:	0020      	movs	r0, r4
    55e2:	f7ff ff89 	bl	54f8 <_ZN4Uart16extractNbStopBitEt>
    55e6:	003b      	movs	r3, r7
    55e8:	9000      	str	r0, [sp, #0]
    55ea:	0031      	movs	r1, r6
    55ec:	6920      	ldr	r0, [r4, #16]
    55ee:	2201      	movs	r2, #1
    55f0:	f7ff fd03 	bl	4ffa <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    55f4:	0023      	movs	r3, r4
    55f6:	33a6      	adds	r3, #166	; 0xa6
    55f8:	781a      	ldrb	r2, [r3, #0]
    55fa:	9b03      	ldr	r3, [sp, #12]
    55fc:	6920      	ldr	r0, [r4, #16]
    55fe:	7819      	ldrb	r1, [r3, #0]
    5600:	f7ff fd15 	bl	502e <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    5604:	6920      	ldr	r0, [r4, #16]
    5606:	f7ff fd30 	bl	506a <_ZN6SERCOM10enableUARTEv>
}
    560a:	b005      	add	sp, #20
    560c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    560e:	46c0      	nop			; (mov r8, r8)
    5610:	00010f8c 	.word	0x00010f8c
    5614:	40002818 	.word	0x40002818
    5618:	40002814 	.word	0x40002814

0000561c <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    561c:	b570      	push	{r4, r5, r6, lr}
    561e:	000e      	movs	r6, r1
	int sent = 0;
    5620:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5622:	6844      	ldr	r4, [r0, #4]
    5624:	2c00      	cmp	r4, #0
    5626:	d00b      	beq.n	5640 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    5628:	6823      	ldr	r3, [r4, #0]
    562a:	0031      	movs	r1, r6
    562c:	685b      	ldr	r3, [r3, #4]
    562e:	0020      	movs	r0, r4
    5630:	4798      	blx	r3
		if (res < 0)
    5632:	2800      	cmp	r0, #0
    5634:	db02      	blt.n	563c <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    5636:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    5638:	68e4      	ldr	r4, [r4, #12]
    563a:	e7f3      	b.n	5624 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    563c:	2501      	movs	r5, #1
    563e:	426d      	negs	r5, r5
	}
	return sent;
}
    5640:	0028      	movs	r0, r5
    5642:	bd70      	pop	{r4, r5, r6, pc}

00005644 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    5644:	b570      	push	{r4, r5, r6, lr}
    5646:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5648:	6844      	ldr	r4, [r0, #4]
    564a:	2c00      	cmp	r4, #0
    564c:	d008      	beq.n	5660 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    564e:	6823      	ldr	r3, [r4, #0]
    5650:	0029      	movs	r1, r5
    5652:	689b      	ldr	r3, [r3, #8]
    5654:	0020      	movs	r0, r4
    5656:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    5658:	2800      	cmp	r0, #0
    565a:	d102      	bne.n	5662 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    565c:	68e4      	ldr	r4, [r4, #12]
    565e:	e7f4      	b.n	564a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    5660:	0020      	movs	r0, r4
}
    5662:	bd70      	pop	{r4, r5, r6, pc}

00005664 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    5664:	b570      	push	{r4, r5, r6, lr}
    5666:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    5668:	6844      	ldr	r4, [r0, #4]
    566a:	2c00      	cmp	r4, #0
    566c:	d007      	beq.n	567e <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    566e:	6823      	ldr	r3, [r4, #0]
    5670:	0029      	movs	r1, r5
    5672:	0020      	movs	r0, r4
    5674:	68db      	ldr	r3, [r3, #12]
    5676:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    5678:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    567a:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    567c:	e7f5      	b.n	566a <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    567e:	702c      	strb	r4, [r5, #0]
}
    5680:	bd70      	pop	{r4, r5, r6, pc}

00005682 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    5682:	b570      	push	{r4, r5, r6, lr}
    5684:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5686:	6844      	ldr	r4, [r0, #4]
    5688:	2c00      	cmp	r4, #0
    568a:	d008      	beq.n	569e <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    568c:	6823      	ldr	r3, [r4, #0]
    568e:	0029      	movs	r1, r5
    5690:	681b      	ldr	r3, [r3, #0]
    5692:	0020      	movs	r0, r4
    5694:	4798      	blx	r3
    5696:	2800      	cmp	r0, #0
    5698:	d102      	bne.n	56a0 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    569a:	68e4      	ldr	r4, [r4, #12]
    569c:	e7f4      	b.n	5688 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    569e:	0020      	movs	r0, r4
}
    56a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000056a4 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    56a4:	2101      	movs	r1, #1
    56a6:	4a06      	ldr	r2, [pc, #24]	; (56c0 <_Z12PluggableUSBv+0x1c>)
{
    56a8:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    56aa:	6813      	ldr	r3, [r2, #0]
    56ac:	4805      	ldr	r0, [pc, #20]	; (56c4 <_Z12PluggableUSBv+0x20>)
    56ae:	400b      	ands	r3, r1
    56b0:	d105      	bne.n	56be <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    56b2:	2402      	movs	r4, #2
    56b4:	7004      	strb	r4, [r0, #0]
    56b6:	1924      	adds	r4, r4, r4
    56b8:	7044      	strb	r4, [r0, #1]
    56ba:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    56bc:	6011      	str	r1, [r2, #0]
}
    56be:	bd10      	pop	{r4, pc}
    56c0:	20001280 	.word	0x20001280
    56c4:	20001284 	.word	0x20001284

000056c8 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    56c8:	2300      	movs	r3, #0
    56ca:	6003      	str	r3, [r0, #0]
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    56cc:	680a      	ldr	r2, [r1, #0]
	capacity = 0;
    56ce:	6043      	str	r3, [r0, #4]
	buffer = rhs.buffer;
    56d0:	6002      	str	r2, [r0, #0]
	capacity = rhs.capacity;
    56d2:	684a      	ldr	r2, [r1, #4]
	len = 0;
    56d4:	6083      	str	r3, [r0, #8]
	capacity = rhs.capacity;
    56d6:	6042      	str	r2, [r0, #4]
	len = rhs.len;
    56d8:	688a      	ldr	r2, [r1, #8]
    56da:	6082      	str	r2, [r0, #8]
	rhs.buffer = NULL;
    56dc:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
    56de:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
    56e0:	608b      	str	r3, [r1, #8]
}
    56e2:	4770      	bx	lr

000056e4 <_ZN6StringD1Ev>:
String::~String()
    56e4:	b510      	push	{r4, lr}
    56e6:	0004      	movs	r4, r0
	free(buffer);
    56e8:	6800      	ldr	r0, [r0, #0]
    56ea:	f007 f9a7 	bl	ca3c <free>
}
    56ee:	0020      	movs	r0, r4
    56f0:	bd10      	pop	{r4, pc}

000056f2 <_ZN6String10invalidateEv>:
{
    56f2:	b510      	push	{r4, lr}
    56f4:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    56f6:	6800      	ldr	r0, [r0, #0]
    56f8:	2800      	cmp	r0, #0
    56fa:	d001      	beq.n	5700 <_ZN6String10invalidateEv+0xe>
    56fc:	f007 f99e 	bl	ca3c <free>
	buffer = NULL;
    5700:	2300      	movs	r3, #0
    5702:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    5704:	60a3      	str	r3, [r4, #8]
    5706:	6063      	str	r3, [r4, #4]
}
    5708:	bd10      	pop	{r4, pc}

0000570a <_ZN6String12changeBufferEj>:
{
    570a:	b570      	push	{r4, r5, r6, lr}
    570c:	0004      	movs	r4, r0
    570e:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5710:	6800      	ldr	r0, [r0, #0]
    5712:	3101      	adds	r1, #1
    5714:	f008 fa92 	bl	dc3c <realloc>
    5718:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    571a:	d001      	beq.n	5720 <_ZN6String12changeBufferEj+0x16>
		return 1;
    571c:	2001      	movs	r0, #1
		capacity = maxStrLen;
    571e:	c428      	stmia	r4!, {r3, r5}
}
    5720:	bd70      	pop	{r4, r5, r6, pc}

00005722 <_ZN6String7reserveEj>:
	if (buffer && capacity >= size) return 1;
    5722:	6803      	ldr	r3, [r0, #0]
{
    5724:	b510      	push	{r4, lr}
    5726:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    5728:	2b00      	cmp	r3, #0
    572a:	d004      	beq.n	5736 <_ZN6String7reserveEj+0x14>
    572c:	6843      	ldr	r3, [r0, #4]
    572e:	428b      	cmp	r3, r1
    5730:	d301      	bcc.n	5736 <_ZN6String7reserveEj+0x14>
		if (len == 0) buffer[0] = 0;
    5732:	2001      	movs	r0, #1
}
    5734:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
    5736:	0020      	movs	r0, r4
    5738:	f7ff ffe7 	bl	570a <_ZN6String12changeBufferEj>
    573c:	2800      	cmp	r0, #0
    573e:	d0f9      	beq.n	5734 <_ZN6String7reserveEj+0x12>
		if (len == 0) buffer[0] = 0;
    5740:	68a3      	ldr	r3, [r4, #8]
    5742:	2b00      	cmp	r3, #0
    5744:	d1f5      	bne.n	5732 <_ZN6String7reserveEj+0x10>
    5746:	6822      	ldr	r2, [r4, #0]
    5748:	7013      	strb	r3, [r2, #0]
    574a:	e7f2      	b.n	5732 <_ZN6String7reserveEj+0x10>

0000574c <_ZN6String4copyEPKcj>:
{
    574c:	b570      	push	{r4, r5, r6, lr}
    574e:	000e      	movs	r6, r1
	if (!reserve(length)) {
    5750:	0011      	movs	r1, r2
{
    5752:	0004      	movs	r4, r0
    5754:	0015      	movs	r5, r2
	if (!reserve(length)) {
    5756:	f7ff ffe4 	bl	5722 <_ZN6String7reserveEj>
    575a:	2800      	cmp	r0, #0
    575c:	d104      	bne.n	5768 <_ZN6String4copyEPKcj+0x1c>
		invalidate();
    575e:	0020      	movs	r0, r4
    5760:	f7ff ffc7 	bl	56f2 <_ZN6String10invalidateEv>
}
    5764:	0020      	movs	r0, r4
    5766:	bd70      	pop	{r4, r5, r6, pc}
	len = length;
    5768:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    576a:	0031      	movs	r1, r6
    576c:	6820      	ldr	r0, [r4, #0]
    576e:	f008 faba 	bl	dce6 <strcpy>
	return *this;
    5772:	e7f7      	b.n	5764 <_ZN6String4copyEPKcj+0x18>

00005774 <_ZN6StringC1EPKc>:
	buffer = NULL;
    5774:	2300      	movs	r3, #0
String::String(const char *cstr)
    5776:	b570      	push	{r4, r5, r6, lr}
    5778:	0004      	movs	r4, r0
    577a:	000d      	movs	r5, r1
	buffer = NULL;
    577c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    577e:	6043      	str	r3, [r0, #4]
	len = 0;
    5780:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    5782:	4299      	cmp	r1, r3
    5784:	d007      	beq.n	5796 <_ZN6StringC1EPKc+0x22>
    5786:	0008      	movs	r0, r1
    5788:	f008 fab5 	bl	dcf6 <strlen>
    578c:	0029      	movs	r1, r5
    578e:	0002      	movs	r2, r0
    5790:	0020      	movs	r0, r4
    5792:	f7ff ffdb 	bl	574c <_ZN6String4copyEPKcj>
}
    5796:	0020      	movs	r0, r4
    5798:	bd70      	pop	{r4, r5, r6, pc}

0000579a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    579a:	b570      	push	{r4, r5, r6, lr}
    579c:	0004      	movs	r4, r0
    579e:	1e0d      	subs	r5, r1, #0
	if (cstr) copy(cstr, strlen(cstr));
    57a0:	d009      	beq.n	57b6 <_ZN6StringaSEPKc+0x1c>
    57a2:	0008      	movs	r0, r1
    57a4:	f008 faa7 	bl	dcf6 <strlen>
    57a8:	0029      	movs	r1, r5
    57aa:	0002      	movs	r2, r0
    57ac:	0020      	movs	r0, r4
    57ae:	f7ff ffcd 	bl	574c <_ZN6String4copyEPKcj>
	else invalidate();
	
	return *this;
}
    57b2:	0020      	movs	r0, r4
    57b4:	bd70      	pop	{r4, r5, r6, pc}
	else invalidate();
    57b6:	f7ff ff9c 	bl	56f2 <_ZN6String10invalidateEv>
    57ba:	e7fa      	b.n	57b2 <_ZN6StringaSEPKc+0x18>

000057bc <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
    57bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    57be:	0004      	movs	r4, r0
	buffer = NULL;
    57c0:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
    57c2:	0008      	movs	r0, r1
	buffer = NULL;
    57c4:	6023      	str	r3, [r4, #0]
	capacity = 0;
    57c6:	6063      	str	r3, [r4, #4]
	len = 0;
    57c8:	60a3      	str	r3, [r4, #8]
	utoa(value, buf, base);
    57ca:	a901      	add	r1, sp, #4
    57cc:	f003 f892 	bl	88f4 <utoa>
	*this = buf;
    57d0:	a901      	add	r1, sp, #4
    57d2:	0020      	movs	r0, r4
    57d4:	f7ff ffe1 	bl	579a <_ZN6StringaSEPKc>
}
    57d8:	0020      	movs	r0, r4
    57da:	b004      	add	sp, #16
    57dc:	bd10      	pop	{r4, pc}

000057de <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    57de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57e0:	0004      	movs	r4, r0
    57e2:	1e0f      	subs	r7, r1, #0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    57e4:	d102      	bne.n	57ec <_ZN6String6concatEPKcj+0xe>
    57e6:	2600      	movs	r6, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    57e8:	0030      	movs	r0, r6
    57ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (length == 0) return 1;
    57ec:	2601      	movs	r6, #1
    57ee:	2a00      	cmp	r2, #0
    57f0:	d0fa      	beq.n	57e8 <_ZN6String6concatEPKcj+0xa>
	unsigned int newlen = len + length;
    57f2:	6883      	ldr	r3, [r0, #8]
    57f4:	18d5      	adds	r5, r2, r3
	if (!reserve(newlen)) return 0;
    57f6:	0029      	movs	r1, r5
    57f8:	f7ff ff93 	bl	5722 <_ZN6String7reserveEj>
    57fc:	2800      	cmp	r0, #0
    57fe:	d0f2      	beq.n	57e6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
    5800:	6823      	ldr	r3, [r4, #0]
    5802:	68a2      	ldr	r2, [r4, #8]
    5804:	0039      	movs	r1, r7
    5806:	1898      	adds	r0, r3, r2
    5808:	f008 fa6d 	bl	dce6 <strcpy>
	len = newlen;
    580c:	60a5      	str	r5, [r4, #8]
	return 1;
    580e:	e7eb      	b.n	57e8 <_ZN6String6concatEPKcj+0xa>

00005810 <_ZN6String6concatERKS_>:
{
    5810:	b510      	push	{r4, lr}
	return concat(s.buffer, s.len);
    5812:	688a      	ldr	r2, [r1, #8]
    5814:	6809      	ldr	r1, [r1, #0]
    5816:	f7ff ffe2 	bl	57de <_ZN6String6concatEPKcj>
}
    581a:	bd10      	pop	{r4, pc}

0000581c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
    581c:	b570      	push	{r4, r5, r6, lr}
    581e:	0005      	movs	r5, r0
    5820:	000c      	movs	r4, r1
	if (!cstr) return 0;
    5822:	1e08      	subs	r0, r1, #0
    5824:	d006      	beq.n	5834 <_ZN6String6concatEPKc+0x18>
	return concat(cstr, strlen(cstr));
    5826:	f008 fa66 	bl	dcf6 <strlen>
    582a:	0021      	movs	r1, r4
    582c:	0002      	movs	r2, r0
    582e:	0028      	movs	r0, r5
    5830:	f7ff ffd5 	bl	57de <_ZN6String6concatEPKcj>
}
    5834:	bd70      	pop	{r4, r5, r6, pc}

00005836 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    5836:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    5838:	2200      	movs	r2, #0
	buf[0] = c;
    583a:	ab01      	add	r3, sp, #4
    583c:	7019      	strb	r1, [r3, #0]
	buf[1] = 0;
    583e:	705a      	strb	r2, [r3, #1]
	return concat(buf, 1);
    5840:	0019      	movs	r1, r3
    5842:	3201      	adds	r2, #1
    5844:	f7ff ffcb 	bl	57de <_ZN6String6concatEPKcj>
}
    5848:	bd0e      	pop	{r1, r2, r3, pc}

0000584a <_ZNK6String6equalsEPKc>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    584a:	6883      	ldr	r3, [r0, #8]
{
    584c:	b510      	push	{r4, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    584e:	2b00      	cmp	r3, #0
    5850:	d107      	bne.n	5862 <_ZNK6String6equalsEPKc+0x18>
    5852:	2001      	movs	r0, #1
    5854:	2900      	cmp	r1, #0
    5856:	d003      	beq.n	5860 <_ZNK6String6equalsEPKc+0x16>
    5858:	780b      	ldrb	r3, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
    585a:	4258      	negs	r0, r3
    585c:	4158      	adcs	r0, r3
    585e:	b2c0      	uxtb	r0, r0
}
    5860:	bd10      	pop	{r4, pc}
	if (cstr == NULL) return buffer[0] == 0;
    5862:	2900      	cmp	r1, #0
    5864:	d102      	bne.n	586c <_ZNK6String6equalsEPKc+0x22>
    5866:	6803      	ldr	r3, [r0, #0]
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	e7f6      	b.n	585a <_ZNK6String6equalsEPKc+0x10>
	return strcmp(buffer, cstr) == 0;
    586c:	6800      	ldr	r0, [r0, #0]
    586e:	f008 fa30 	bl	dcd2 <strcmp>
    5872:	0003      	movs	r3, r0
    5874:	e7f1      	b.n	585a <_ZNK6String6equalsEPKc+0x10>

00005876 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    5876:	b570      	push	{r4, r5, r6, lr}
    5878:	000d      	movs	r5, r1
	if (!bufsize || !buf) return;
    587a:	2a00      	cmp	r2, #0
    587c:	d006      	beq.n	588c <_ZNK6String8getBytesEPhjj+0x16>
    587e:	2900      	cmp	r1, #0
    5880:	d004      	beq.n	588c <_ZNK6String8getBytesEPhjj+0x16>
	if (index >= len) {
    5882:	6884      	ldr	r4, [r0, #8]
    5884:	429c      	cmp	r4, r3
    5886:	d802      	bhi.n	588e <_ZNK6String8getBytesEPhjj+0x18>
		buf[0] = 0;
    5888:	2300      	movs	r3, #0
    588a:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    588c:	bd70      	pop	{r4, r5, r6, pc}
	unsigned int n = bufsize - 1;
    588e:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
    5890:	1ae4      	subs	r4, r4, r3
    5892:	4294      	cmp	r4, r2
    5894:	d900      	bls.n	5898 <_ZNK6String8getBytesEPhjj+0x22>
    5896:	0014      	movs	r4, r2
	strncpy((char *)buf, buffer + index, n);
    5898:	6801      	ldr	r1, [r0, #0]
    589a:	0022      	movs	r2, r4
    589c:	18c9      	adds	r1, r1, r3
    589e:	0028      	movs	r0, r5
    58a0:	f008 fa56 	bl	dd50 <strncpy>
	buf[n] = 0;
    58a4:	2300      	movs	r3, #0
    58a6:	552b      	strb	r3, [r5, r4]
    58a8:	e7f0      	b.n	588c <_ZNK6String8getBytesEPhjj+0x16>

000058aa <_ZN6String11toUpperCaseEv>:
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
{
    58aa:	b510      	push	{r4, lr}
	if (!buffer) return;
    58ac:	6804      	ldr	r4, [r0, #0]
    58ae:	2c00      	cmp	r4, #0
    58b0:	d007      	beq.n	58c2 <_ZN6String11toUpperCaseEv+0x18>
	for (char *p = buffer; *p; p++) {
    58b2:	7820      	ldrb	r0, [r4, #0]
    58b4:	2800      	cmp	r0, #0
    58b6:	d004      	beq.n	58c2 <_ZN6String11toUpperCaseEv+0x18>
		*p = toupper(*p);
    58b8:	f008 fb00 	bl	debc <toupper>
    58bc:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    58be:	3401      	adds	r4, #1
    58c0:	e7f7      	b.n	58b2 <_ZN6String11toUpperCaseEv+0x8>
	}
}
    58c2:	bd10      	pop	{r4, pc}

000058c4 <_ZN15ArduinoUniqueIDC1Ev>:
// Copyright © Luiz Henrique Cassettari. All rights reserved.
// Licensed under the MIT license.

#include "ArduinoUniqueID.h"

ArduinoUniqueID::ArduinoUniqueID()
    58c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	uint32_t pdwUniqueID[4];
	pdwUniqueID[0] = SERIAL_NUMBER_WORD_0;
    58c6:	4b0e      	ldr	r3, [pc, #56]	; (5900 <_ZN15ArduinoUniqueIDC1Ev+0x3c>)
	pdwUniqueID[1] = SERIAL_NUMBER_WORD_1;
	pdwUniqueID[2] = SERIAL_NUMBER_WORD_2;
	pdwUniqueID[3] = SERIAL_NUMBER_WORD_3;
    58c8:	2200      	movs	r2, #0
	pdwUniqueID[0] = SERIAL_NUMBER_WORD_0;
    58ca:	681b      	ldr	r3, [r3, #0]
    58cc:	9300      	str	r3, [sp, #0]
	pdwUniqueID[1] = SERIAL_NUMBER_WORD_1;
    58ce:	4b0d      	ldr	r3, [pc, #52]	; (5904 <_ZN15ArduinoUniqueIDC1Ev+0x40>)
    58d0:	681b      	ldr	r3, [r3, #0]
    58d2:	9301      	str	r3, [sp, #4]
	pdwUniqueID[2] = SERIAL_NUMBER_WORD_2;
    58d4:	4b0c      	ldr	r3, [pc, #48]	; (5908 <_ZN15ArduinoUniqueIDC1Ev+0x44>)
    58d6:	681b      	ldr	r3, [r3, #0]
    58d8:	9302      	str	r3, [sp, #8]
	pdwUniqueID[3] = SERIAL_NUMBER_WORD_3;
    58da:	4b0c      	ldr	r3, [pc, #48]	; (590c <_ZN15ArduinoUniqueIDC1Ev+0x48>)
    58dc:	681b      	ldr	r3, [r3, #0]
    58de:	9303      	str	r3, [sp, #12]
    58e0:	0003      	movs	r3, r0

	for (int i = 0; i < 4; i++)
	{
		id[i*4+0] = (uint8_t)(pdwUniqueID[i] >> 24);
    58e2:	4669      	mov	r1, sp
    58e4:	5889      	ldr	r1, [r1, r2]
    58e6:	3204      	adds	r2, #4
    58e8:	0e0c      	lsrs	r4, r1, #24
    58ea:	701c      	strb	r4, [r3, #0]
		id[i*4+1] = (uint8_t)(pdwUniqueID[i] >> 16);
    58ec:	0c0c      	lsrs	r4, r1, #16
    58ee:	705c      	strb	r4, [r3, #1]
		id[i*4+2] = (uint8_t)(pdwUniqueID[i] >> 8);
    58f0:	0a0c      	lsrs	r4, r1, #8
    58f2:	709c      	strb	r4, [r3, #2]
		id[i*4+3] = (uint8_t)(pdwUniqueID[i] >> 0);
    58f4:	70d9      	strb	r1, [r3, #3]
    58f6:	3304      	adds	r3, #4
	for (int i = 0; i < 4; i++)
    58f8:	2a10      	cmp	r2, #16
    58fa:	d1f2      	bne.n	58e2 <_ZN15ArduinoUniqueIDC1Ev+0x1e>
		id[i*4+1] = (uint8_t)(pdwUniqueID[i] >> 16);
		id[i*4+2] = (uint8_t)(pdwUniqueID[i] >> 8);
		id[i*4+3] = (uint8_t)(pdwUniqueID[i] >> 0);
	}
#endif
}
    58fc:	b004      	add	sp, #16
    58fe:	bd10      	pop	{r4, pc}
    5900:	0080a00c 	.word	0x0080a00c
    5904:	0080a040 	.word	0x0080a040
    5908:	0080a044 	.word	0x0080a044
    590c:	0080a048 	.word	0x0080a048

00005910 <_GLOBAL__sub_I__ZN15ArduinoUniqueIDC2Ev>:

ArduinoUniqueID _UniqueID;
    5910:	b510      	push	{r4, lr}
    5912:	4802      	ldr	r0, [pc, #8]	; (591c <_GLOBAL__sub_I__ZN15ArduinoUniqueIDC2Ev+0xc>)
    5914:	f7ff ffd6 	bl	58c4 <_ZN15ArduinoUniqueIDC1Ev>
    5918:	bd10      	pop	{r4, pc}
    591a:	46c0      	nop			; (mov r8, r8)
    591c:	2000128c 	.word	0x2000128c

00005920 <_ZN3DHTC1Ehhh>:
  _type = type;
  #ifdef __AVR
    _bit = digitalPinToBitMask(pin);
    _port = digitalPinToPort(pin);
  #endif
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    5920:	4b07      	ldr	r3, [pc, #28]	; (5940 <_ZN3DHTC1Ehhh+0x20>)
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
    5922:	b510      	push	{r4, lr}
    5924:	0004      	movs	r4, r0
  _pin = pin;
    5926:	7141      	strb	r1, [r0, #5]
  _type = type;
    5928:	7182      	strb	r2, [r0, #6]
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    592a:	4906      	ldr	r1, [pc, #24]	; (5944 <_ZN3DHTC1Ehhh+0x24>)
    592c:	6818      	ldr	r0, [r3, #0]
    592e:	f003 ff61 	bl	97f4 <__udivsi3>
    5932:	23fa      	movs	r3, #250	; 0xfa
    5934:	009b      	lsls	r3, r3, #2
    5936:	4358      	muls	r0, r3
    5938:	60e0      	str	r0, [r4, #12]
                                                 // reading pulses from DHT sensor.
  // Note that count is now ignored as the DHT reading algorithm adjusts itself
  // basd on the speed of the processor.
}
    593a:	0020      	movs	r0, r4
    593c:	bd10      	pop	{r4, pc}
    593e:	46c0      	nop			; (mov r8, r8)
    5940:	20000084 	.word	0x20000084
    5944:	000f4240 	.word	0x000f4240

00005948 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
    5948:	b510      	push	{r4, lr}
    594a:	0004      	movs	r4, r0
  // set up the pins!
  pinMode(_pin, INPUT_PULLUP);
    594c:	2102      	movs	r1, #2
    594e:	7940      	ldrb	r0, [r0, #5]
    5950:	f7fe f97e 	bl	3c50 <pinMode>
  // Using this value makes sure that millis() - lastreadtime will be
  // >= MIN_INTERVAL right away. Note that this assignment wraps around,
  // but so will the subtraction.
  _lastreadtime = -MIN_INTERVAL;
    5954:	4b01      	ldr	r3, [pc, #4]	; (595c <_ZN3DHT5beginEv+0x14>)
    5956:	60a3      	str	r3, [r4, #8]
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}
    5958:	bd10      	pop	{r4, pc}
    595a:	46c0      	nop			; (mov r8, r8)
    595c:	fffff830 	.word	0xfffff830

00005960 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    5960:	b570      	push	{r4, r5, r6, lr}
    5962:	0005      	movs	r5, r0
    5964:	000e      	movs	r6, r1
  uint32_t count = 0;
    5966:	2400      	movs	r4, #0
      }
    }
  // Otherwise fall back to using digitalRead (this seems to be necessary on ESP8266
  // right now, perhaps bugs in direct port access functions?).
  #else
    while (digitalRead(_pin) == level) {
    5968:	7968      	ldrb	r0, [r5, #5]
    596a:	f7fe f9c9 	bl	3d00 <digitalRead>
    596e:	42b0      	cmp	r0, r6
    5970:	d104      	bne.n	597c <_ZN3DHT11expectPulseEb+0x1c>
      if (count++ >= _maxcycles) {
    5972:	68ea      	ldr	r2, [r5, #12]
    5974:	1c63      	adds	r3, r4, #1
    5976:	4294      	cmp	r4, r2
    5978:	d302      	bcc.n	5980 <_ZN3DHT11expectPulseEb+0x20>
        return 0; // Exceeded timeout, fail.
    597a:	2400      	movs	r4, #0
      }
    }
  #endif

  return count;
}
    597c:	0020      	movs	r0, r4
    597e:	bd70      	pop	{r4, r5, r6, pc}
      if (count++ >= _maxcycles) {
    5980:	001c      	movs	r4, r3
    5982:	e7f1      	b.n	5968 <_ZN3DHT11expectPulseEb+0x8>

00005984 <_ZN3DHT4readEb>:
boolean DHT::read(bool force) {
    5984:	b570      	push	{r4, r5, r6, lr}
    5986:	b0d0      	sub	sp, #320	; 0x140
    5988:	000d      	movs	r5, r1
    598a:	0004      	movs	r4, r0
  uint32_t currenttime = millis();
    598c:	f7fc fe72 	bl	2674 <millis>
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
    5990:	2d00      	cmp	r5, #0
    5992:	d107      	bne.n	59a4 <_ZN3DHT4readEb+0x20>
    5994:	68a3      	ldr	r3, [r4, #8]
    5996:	4a3d      	ldr	r2, [pc, #244]	; (5a8c <_ZN3DHT4readEb+0x108>)
    5998:	1ac3      	subs	r3, r0, r3
    599a:	4293      	cmp	r3, r2
    599c:	d802      	bhi.n	59a4 <_ZN3DHT4readEb+0x20>
    return _lastresult; // return last correct measurement
    599e:	7c20      	ldrb	r0, [r4, #16]
}
    59a0:	b050      	add	sp, #320	; 0x140
    59a2:	bd70      	pop	{r4, r5, r6, pc}
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    59a4:	2500      	movs	r5, #0
  _lastreadtime = currenttime;
    59a6:	60a0      	str	r0, [r4, #8]
  digitalWrite(_pin, HIGH);
    59a8:	2101      	movs	r1, #1
    59aa:	7960      	ldrb	r0, [r4, #5]
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    59ac:	7125      	strb	r5, [r4, #4]
    59ae:	70e5      	strb	r5, [r4, #3]
    59b0:	70a5      	strb	r5, [r4, #2]
    59b2:	7065      	strb	r5, [r4, #1]
    59b4:	7025      	strb	r5, [r4, #0]
  digitalWrite(_pin, HIGH);
    59b6:	f7fe f94f 	bl	3c58 <digitalWrite>
  delay(250);
    59ba:	20fa      	movs	r0, #250	; 0xfa
    59bc:	f7fc fe90 	bl	26e0 <delay>
  pinMode(_pin, OUTPUT);
    59c0:	7960      	ldrb	r0, [r4, #5]
    59c2:	2101      	movs	r1, #1
    59c4:	f7fe f944 	bl	3c50 <pinMode>
  digitalWrite(_pin, LOW);
    59c8:	7960      	ldrb	r0, [r4, #5]
    59ca:	0029      	movs	r1, r5
    59cc:	f7fe f944 	bl	3c58 <digitalWrite>
  delay(20);
    59d0:	2014      	movs	r0, #20
    59d2:	f7fc fe85 	bl	26e0 <delay>
  __ASM volatile ("cpsid i" : : : "memory");
    59d6:	b672      	cpsid	i
    digitalWrite(_pin, HIGH);
    59d8:	2101      	movs	r1, #1
    59da:	7960      	ldrb	r0, [r4, #5]
    59dc:	f7fe f93c 	bl	3c58 <digitalWrite>
    "   sub %0, #1   \n" // substract 1 from %0 (n)
    "   bne 1b       \n" // if result is not 0 jump to 1
    : "+r" (n)           // '%0' is n variable with RW constraints
    :                    // no input
    :                    // no clobber
  );
    59e0:	23a0      	movs	r3, #160	; 0xa0
    59e2:	009b      	lsls	r3, r3, #2
    59e4:	3b01      	subs	r3, #1
    59e6:	d1fd      	bne.n	59e4 <_ZN3DHT4readEb+0x60>
    pinMode(_pin, INPUT_PULLUP);
    59e8:	2102      	movs	r1, #2
    59ea:	7960      	ldrb	r0, [r4, #5]
    59ec:	f7fe f930 	bl	3c50 <pinMode>
    59f0:	23a0      	movs	r3, #160	; 0xa0
    59f2:	3b01      	subs	r3, #1
    59f4:	d1fd      	bne.n	59f2 <_ZN3DHT4readEb+0x6e>
    if (expectPulse(LOW) == 0) {
    59f6:	0029      	movs	r1, r5
    59f8:	0020      	movs	r0, r4
    59fa:	f7ff ffb1 	bl	5960 <_ZN3DHT11expectPulseEb>
    59fe:	42a8      	cmp	r0, r5
    5a00:	d103      	bne.n	5a0a <_ZN3DHT4readEb+0x86>
      _lastresult = false;
    5a02:	2000      	movs	r0, #0
    5a04:	7420      	strb	r0, [r4, #16]
  __ASM volatile ("cpsie i" : : : "memory");
    5a06:	b662      	cpsie	i
    5a08:	e7ca      	b.n	59a0 <_ZN3DHT4readEb+0x1c>
    if (expectPulse(HIGH) == 0) {
    5a0a:	2101      	movs	r1, #1
    5a0c:	0020      	movs	r0, r4
    5a0e:	f7ff ffa7 	bl	5960 <_ZN3DHT11expectPulseEb>
    5a12:	2800      	cmp	r0, #0
    5a14:	d0f5      	beq.n	5a02 <_ZN3DHT4readEb+0x7e>
    for (int i=0; i<80; i+=2) {
    5a16:	26a0      	movs	r6, #160	; 0xa0
    5a18:	0076      	lsls	r6, r6, #1
      cycles[i]   = expectPulse(LOW);
    5a1a:	2100      	movs	r1, #0
    5a1c:	0020      	movs	r0, r4
    5a1e:	f7ff ff9f 	bl	5960 <_ZN3DHT11expectPulseEb>
    5a22:	466b      	mov	r3, sp
      cycles[i+1] = expectPulse(HIGH);
    5a24:	2101      	movs	r1, #1
      cycles[i]   = expectPulse(LOW);
    5a26:	50e8      	str	r0, [r5, r3]
      cycles[i+1] = expectPulse(HIGH);
    5a28:	0020      	movs	r0, r4
    5a2a:	f7ff ff99 	bl	5960 <_ZN3DHT11expectPulseEb>
    5a2e:	002b      	movs	r3, r5
    5a30:	3508      	adds	r5, #8
    5a32:	446b      	add	r3, sp
    5a34:	6058      	str	r0, [r3, #4]
    for (int i=0; i<80; i+=2) {
    5a36:	42b5      	cmp	r5, r6
    5a38:	d1ef      	bne.n	5a1a <_ZN3DHT4readEb+0x96>
    5a3a:	b662      	cpsie	i
  for (int i=0; i<40; ++i) {
    5a3c:	2200      	movs	r2, #0
      data[i/8] |= 1;
    5a3e:	2101      	movs	r1, #1
    uint32_t lowCycles  = cycles[2*i];
    5a40:	4668      	mov	r0, sp
    5a42:	00d3      	lsls	r3, r2, #3
    5a44:	58c0      	ldr	r0, [r0, r3]
    uint32_t highCycles = cycles[2*i+1];
    5a46:	446b      	add	r3, sp
    5a48:	685e      	ldr	r6, [r3, #4]
    if ((lowCycles == 0) || (highCycles == 0)) {
    5a4a:	2800      	cmp	r0, #0
    5a4c:	d001      	beq.n	5a52 <_ZN3DHT4readEb+0xce>
    5a4e:	2e00      	cmp	r6, #0
    5a50:	d102      	bne.n	5a58 <_ZN3DHT4readEb+0xd4>
      _lastresult = false;
    5a52:	2000      	movs	r0, #0
    _lastresult = true;
    5a54:	7420      	strb	r0, [r4, #16]
    return _lastresult;
    5a56:	e7a3      	b.n	59a0 <_ZN3DHT4readEb+0x1c>
    data[i/8] <<= 1;
    5a58:	10d5      	asrs	r5, r2, #3
    5a5a:	5d63      	ldrb	r3, [r4, r5]
    5a5c:	005b      	lsls	r3, r3, #1
    5a5e:	b2db      	uxtb	r3, r3
    if (highCycles > lowCycles) {
    5a60:	42b0      	cmp	r0, r6
    5a62:	d310      	bcc.n	5a86 <_ZN3DHT4readEb+0x102>
  for (int i=0; i<40; ++i) {
    5a64:	3201      	adds	r2, #1
      data[i/8] |= 1;
    5a66:	5563      	strb	r3, [r4, r5]
  for (int i=0; i<40; ++i) {
    5a68:	2a28      	cmp	r2, #40	; 0x28
    5a6a:	d1e9      	bne.n	5a40 <_ZN3DHT4readEb+0xbc>
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    5a6c:	7861      	ldrb	r1, [r4, #1]
    5a6e:	7823      	ldrb	r3, [r4, #0]
    5a70:	7922      	ldrb	r2, [r4, #4]
    5a72:	185b      	adds	r3, r3, r1
    5a74:	78a1      	ldrb	r1, [r4, #2]
    5a76:	185b      	adds	r3, r3, r1
    5a78:	78e1      	ldrb	r1, [r4, #3]
    5a7a:	185b      	adds	r3, r3, r1
    5a7c:	b2db      	uxtb	r3, r3
    5a7e:	429a      	cmp	r2, r3
    5a80:	d1e7      	bne.n	5a52 <_ZN3DHT4readEb+0xce>
    _lastresult = true;
    5a82:	2001      	movs	r0, #1
    5a84:	e7e6      	b.n	5a54 <_ZN3DHT4readEb+0xd0>
      data[i/8] |= 1;
    5a86:	430b      	orrs	r3, r1
    5a88:	e7ec      	b.n	5a64 <_ZN3DHT4readEb+0xe0>
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	000007cf 	.word	0x000007cf

00005a90 <_ZN3DHT15readTemperatureEbb>:
float DHT::readTemperature(bool S, bool force) {
    5a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a92:	000d      	movs	r5, r1
  if (read(force)) {
    5a94:	0011      	movs	r1, r2
float DHT::readTemperature(bool S, bool force) {
    5a96:	0004      	movs	r4, r0
  if (read(force)) {
    5a98:	f7ff ff74 	bl	5984 <_ZN3DHT4readEb>
    5a9c:	2800      	cmp	r0, #0
    5a9e:	d007      	beq.n	5ab0 <_ZN3DHT15readTemperatureEbb+0x20>
    switch (_type) {
    5aa0:	79a3      	ldrb	r3, [r4, #6]
    5aa2:	b2da      	uxtb	r2, r3
    5aa4:	2a0b      	cmp	r2, #11
    5aa6:	d005      	beq.n	5ab4 <_ZN3DHT15readTemperatureEbb+0x24>
    5aa8:	d302      	bcc.n	5ab0 <_ZN3DHT15readTemperatureEbb+0x20>
    5aaa:	3b15      	subs	r3, #21
    5aac:	2b01      	cmp	r3, #1
    5aae:	d913      	bls.n	5ad8 <_ZN3DHT15readTemperatureEbb+0x48>
  float f = NAN;
    5ab0:	4819      	ldr	r0, [pc, #100]	; (5b18 <_ZN3DHT15readTemperatureEbb+0x88>)
  return f;
    5ab2:	e010      	b.n	5ad6 <_ZN3DHT15readTemperatureEbb+0x46>
      f = data[2];
    5ab4:	78a0      	ldrb	r0, [r4, #2]
    5ab6:	f004 ff87 	bl	a9c8 <__aeabi_ui2f>
      if(S) {
    5aba:	2d00      	cmp	r5, #0
    5abc:	d00b      	beq.n	5ad6 <_ZN3DHT15readTemperatureEbb+0x46>
  return c * 1.8 + 32;
    5abe:	f006 fd71 	bl	c5a4 <__aeabi_f2d>
    5ac2:	4a16      	ldr	r2, [pc, #88]	; (5b1c <_ZN3DHT15readTemperatureEbb+0x8c>)
    5ac4:	4b16      	ldr	r3, [pc, #88]	; (5b20 <_ZN3DHT15readTemperatureEbb+0x90>)
    5ac6:	f005 ff09 	bl	b8dc <__aeabi_dmul>
    5aca:	2200      	movs	r2, #0
    5acc:	4b15      	ldr	r3, [pc, #84]	; (5b24 <_ZN3DHT15readTemperatureEbb+0x94>)
    5ace:	f004 ffc1 	bl	aa54 <__aeabi_dadd>
    5ad2:	f006 fdb9 	bl	c648 <__aeabi_d2f>
}
    5ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      f = data[2] & 0x7F;
    5ad8:	207f      	movs	r0, #127	; 0x7f
    5ada:	78a6      	ldrb	r6, [r4, #2]
    5adc:	4030      	ands	r0, r6
    5ade:	f004 ff23 	bl	a928 <__aeabi_i2f>
      f *= 256;
    5ae2:	2187      	movs	r1, #135	; 0x87
    5ae4:	05c9      	lsls	r1, r1, #23
    5ae6:	f004 fc2b 	bl	a340 <__aeabi_fmul>
    5aea:	1c07      	adds	r7, r0, #0
      f += data[3];
    5aec:	78e0      	ldrb	r0, [r4, #3]
    5aee:	f004 ff1b 	bl	a928 <__aeabi_i2f>
    5af2:	1c39      	adds	r1, r7, #0
    5af4:	f004 f8a2 	bl	9c3c <__aeabi_fadd>
      f *= 0.1;
    5af8:	f006 fd54 	bl	c5a4 <__aeabi_f2d>
    5afc:	4a0a      	ldr	r2, [pc, #40]	; (5b28 <_ZN3DHT15readTemperatureEbb+0x98>)
    5afe:	4b0b      	ldr	r3, [pc, #44]	; (5b2c <_ZN3DHT15readTemperatureEbb+0x9c>)
    5b00:	f005 feec 	bl	b8dc <__aeabi_dmul>
      if (data[2] & 0x80) {
    5b04:	b276      	sxtb	r6, r6
      f *= 0.1;
    5b06:	f006 fd9f 	bl	c648 <__aeabi_d2f>
      if (data[2] & 0x80) {
    5b0a:	2e00      	cmp	r6, #0
    5b0c:	dad5      	bge.n	5aba <_ZN3DHT15readTemperatureEbb+0x2a>
        f *= -1;
    5b0e:	2380      	movs	r3, #128	; 0x80
    5b10:	061b      	lsls	r3, r3, #24
    5b12:	18c0      	adds	r0, r0, r3
    5b14:	e7d1      	b.n	5aba <_ZN3DHT15readTemperatureEbb+0x2a>
    5b16:	46c0      	nop			; (mov r8, r8)
    5b18:	7fc00000 	.word	0x7fc00000
    5b1c:	cccccccd 	.word	0xcccccccd
    5b20:	3ffccccc 	.word	0x3ffccccc
    5b24:	40400000 	.word	0x40400000
    5b28:	9999999a 	.word	0x9999999a
    5b2c:	3fb99999 	.word	0x3fb99999

00005b30 <_ZN3DHT12readHumidityEb>:
float DHT::readHumidity(bool force) {
    5b30:	b570      	push	{r4, r5, r6, lr}
  if (read()) {
    5b32:	2100      	movs	r1, #0
float DHT::readHumidity(bool force) {
    5b34:	0004      	movs	r4, r0
  if (read()) {
    5b36:	f7ff ff25 	bl	5984 <_ZN3DHT4readEb>
    5b3a:	2800      	cmp	r0, #0
    5b3c:	d007      	beq.n	5b4e <_ZN3DHT12readHumidityEb+0x1e>
    switch (_type) {
    5b3e:	79a3      	ldrb	r3, [r4, #6]
    5b40:	b2da      	uxtb	r2, r3
    5b42:	2a0b      	cmp	r2, #11
    5b44:	d005      	beq.n	5b52 <_ZN3DHT12readHumidityEb+0x22>
    5b46:	d302      	bcc.n	5b4e <_ZN3DHT12readHumidityEb+0x1e>
    5b48:	3b15      	subs	r3, #21
    5b4a:	2b01      	cmp	r3, #1
    5b4c:	d905      	bls.n	5b5a <_ZN3DHT12readHumidityEb+0x2a>
  float f = NAN;
    5b4e:	480e      	ldr	r0, [pc, #56]	; (5b88 <_ZN3DHT12readHumidityEb+0x58>)
  return f;
    5b50:	e002      	b.n	5b58 <_ZN3DHT12readHumidityEb+0x28>
      f = data[0];
    5b52:	7820      	ldrb	r0, [r4, #0]
    5b54:	f004 ff38 	bl	a9c8 <__aeabi_ui2f>
}
    5b58:	bd70      	pop	{r4, r5, r6, pc}
      f = data[0];
    5b5a:	7820      	ldrb	r0, [r4, #0]
    5b5c:	f004 ff34 	bl	a9c8 <__aeabi_ui2f>
      f *= 256;
    5b60:	2187      	movs	r1, #135	; 0x87
    5b62:	05c9      	lsls	r1, r1, #23
    5b64:	f004 fbec 	bl	a340 <__aeabi_fmul>
    5b68:	1c05      	adds	r5, r0, #0
      f += data[1];
    5b6a:	7860      	ldrb	r0, [r4, #1]
    5b6c:	f004 fedc 	bl	a928 <__aeabi_i2f>
    5b70:	1c29      	adds	r1, r5, #0
    5b72:	f004 f863 	bl	9c3c <__aeabi_fadd>
      f *= 0.1;
    5b76:	f006 fd15 	bl	c5a4 <__aeabi_f2d>
    5b7a:	4a04      	ldr	r2, [pc, #16]	; (5b8c <_ZN3DHT12readHumidityEb+0x5c>)
    5b7c:	4b04      	ldr	r3, [pc, #16]	; (5b90 <_ZN3DHT12readHumidityEb+0x60>)
    5b7e:	f005 fead 	bl	b8dc <__aeabi_dmul>
    5b82:	f006 fd61 	bl	c648 <__aeabi_d2f>
      break;
    5b86:	e7e7      	b.n	5b58 <_ZN3DHT12readHumidityEb+0x28>
    5b88:	7fc00000 	.word	0x7fc00000
    5b8c:	9999999a 	.word	0x9999999a
    5b90:	3fb99999 	.word	0x3fb99999

00005b94 <_ZN13FilterOnePole12setFrequencyEf>:
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
    5b94:	b510      	push	{r4, lr}
    5b96:	0004      	movs	r4, r0
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    5b98:	1c08      	adds	r0, r1, #0
    5b9a:	f006 fd03 	bl	c5a4 <__aeabi_f2d>
    5b9e:	4a08      	ldr	r2, [pc, #32]	; (5bc0 <_ZN13FilterOnePole12setFrequencyEf+0x2c>)
    5ba0:	4b08      	ldr	r3, [pc, #32]	; (5bc4 <_ZN13FilterOnePole12setFrequencyEf+0x30>)
    5ba2:	f005 fe9b 	bl	b8dc <__aeabi_dmul>
    5ba6:	0002      	movs	r2, r0
    5ba8:	000b      	movs	r3, r1
    5baa:	2000      	movs	r0, #0
    5bac:	4906      	ldr	r1, [pc, #24]	; (5bc8 <_ZN13FilterOnePole12setFrequencyEf+0x34>)
    5bae:	f005 fa61 	bl	b074 <__aeabi_ddiv>
    5bb2:	f006 fd49 	bl	c648 <__aeabi_d2f>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    5bb6:	4905      	ldr	r1, [pc, #20]	; (5bcc <_ZN13FilterOnePole12setFrequencyEf+0x38>)
    5bb8:	f004 fbc2 	bl	a340 <__aeabi_fmul>
    5bbc:	6060      	str	r0, [r4, #4]
}
    5bbe:	bd10      	pop	{r4, pc}
    5bc0:	54442d18 	.word	0x54442d18
    5bc4:	401921fb 	.word	0x401921fb
    5bc8:	3ff00000 	.word	0x3ff00000
    5bcc:	49742400 	.word	0x49742400

00005bd0 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>:
void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
    5bd0:	b570      	push	{r4, r5, r6, lr}
    5bd2:	0004      	movs	r4, r0
    5bd4:	1c1d      	adds	r5, r3, #0
  FT = ft;
    5bd6:	7001      	strb	r1, [r0, #0]
  setFrequency( fc );
    5bd8:	1c11      	adds	r1, r2, #0
    5bda:	f7ff ffdb 	bl	5b94 <_ZN13FilterOnePole12setFrequencyEf>
  Y = initialValue;
    5bde:	60e5      	str	r5, [r4, #12]
  Ylast = initialValue;
    5be0:	6125      	str	r5, [r4, #16]
  X = initialValue;
    5be2:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    5be4:	f7fc fd4c 	bl	2680 <micros>
    5be8:	61e0      	str	r0, [r4, #28]
}
    5bea:	bd70      	pop	{r4, r5, r6, pc}

00005bec <_ZN13FilterOnePole6outputEv>:
}

float FilterOnePole::output() {
    5bec:	b5d0      	push	{r4, r6, r7, lr}
    5bee:	0004      	movs	r4, r0
    // figure out which button to read
  switch (FT) {
    5bf0:	7800      	ldrb	r0, [r0, #0]
    5bf2:	2803      	cmp	r0, #3
    5bf4:	d835      	bhi.n	5c62 <_ZN13FilterOnePole6outputEv+0x76>
    5bf6:	f003 fdf3 	bl	97e0 <__gnu_thumb1_case_uqi>
    5bfa:	0219      	.short	0x0219
    5bfc:	1e04      	.short	0x1e04
    case LOWPASS:         
      // return the last value
      return Y; 
    5bfe:	68e0      	ldr	r0, [r4, #12]
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    5c00:	bdd0      	pop	{r4, r6, r7, pc}
      return Y * (TauUS/1.0e6);
    5c02:	6860      	ldr	r0, [r4, #4]
    5c04:	f006 fcce 	bl	c5a4 <__aeabi_f2d>
    5c08:	2200      	movs	r2, #0
    5c0a:	4b17      	ldr	r3, [pc, #92]	; (5c68 <_ZN13FilterOnePole6outputEv+0x7c>)
    5c0c:	f005 fa32 	bl	b074 <__aeabi_ddiv>
    5c10:	0006      	movs	r6, r0
    5c12:	68e0      	ldr	r0, [r4, #12]
    5c14:	000f      	movs	r7, r1
    5c16:	f006 fcc5 	bl	c5a4 <__aeabi_f2d>
    5c1a:	0002      	movs	r2, r0
    5c1c:	000b      	movs	r3, r1
    5c1e:	0030      	movs	r0, r6
    5c20:	0039      	movs	r1, r7
    5c22:	f005 fe5b 	bl	b8dc <__aeabi_dmul>
      return (X-Y)/(TauUS/1.0e6);
    5c26:	f006 fd0f 	bl	c648 <__aeabi_d2f>
    5c2a:	e7e9      	b.n	5c00 <_ZN13FilterOnePole6outputEv+0x14>
      return X-Y;
    5c2c:	68e1      	ldr	r1, [r4, #12]
    5c2e:	6960      	ldr	r0, [r4, #20]
    5c30:	f004 fca6 	bl	a580 <__aeabi_fsub>
    5c34:	e7e4      	b.n	5c00 <_ZN13FilterOnePole6outputEv+0x14>
      return (X-Y)/(TauUS/1.0e6);
    5c36:	68e1      	ldr	r1, [r4, #12]
    5c38:	6960      	ldr	r0, [r4, #20]
    5c3a:	f004 fca1 	bl	a580 <__aeabi_fsub>
    5c3e:	f006 fcb1 	bl	c5a4 <__aeabi_f2d>
    5c42:	0006      	movs	r6, r0
    5c44:	6860      	ldr	r0, [r4, #4]
    5c46:	000f      	movs	r7, r1
    5c48:	f006 fcac 	bl	c5a4 <__aeabi_f2d>
    5c4c:	2200      	movs	r2, #0
    5c4e:	4b06      	ldr	r3, [pc, #24]	; (5c68 <_ZN13FilterOnePole6outputEv+0x7c>)
    5c50:	f005 fa10 	bl	b074 <__aeabi_ddiv>
    5c54:	0002      	movs	r2, r0
    5c56:	000b      	movs	r3, r1
    5c58:	0030      	movs	r0, r6
    5c5a:	0039      	movs	r1, r7
    5c5c:	f005 fa0a 	bl	b074 <__aeabi_ddiv>
    5c60:	e7e1      	b.n	5c26 <_ZN13FilterOnePole6outputEv+0x3a>
      return 0;
    5c62:	2000      	movs	r0, #0
    5c64:	e7cc      	b.n	5c00 <_ZN13FilterOnePole6outputEv+0x14>
    5c66:	46c0      	nop			; (mov r8, r8)
    5c68:	412e8480 	.word	0x412e8480

00005c6c <_ZN13FilterOnePole5inputEf>:
float FilterOnePole::input( float inVal ) {
    5c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c6e:	0004      	movs	r4, r0
    5c70:	1c0e      	adds	r6, r1, #0
  long time = micros();
    5c72:	f7fc fd05 	bl	2680 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5c76:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    5c78:	0005      	movs	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5c7a:	1ac0      	subs	r0, r0, r3
    5c7c:	f004 fe54 	bl	a928 <__aeabi_i2f>
  Ylast = Y;
    5c80:	68e3      	ldr	r3, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5c82:	1c01      	adds	r1, r0, #0
  Ylast = Y;
    5c84:	6123      	str	r3, [r4, #16]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5c86:	61a0      	str	r0, [r4, #24]
  LastUS = time;                      // update this now
    5c88:	61e5      	str	r5, [r4, #28]
  X = inVal;                          // this is now the most recent input value
    5c8a:	6166      	str	r6, [r4, #20]
  TauSamps = TauUS / ElapsedUS;
    5c8c:	6860      	ldr	r0, [r4, #4]
    5c8e:	f004 f967 	bl	9f60 <__aeabi_fdiv>
    5c92:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    5c94:	f006 fc86 	bl	c5a4 <__aeabi_f2d>
    5c98:	0002      	movs	r2, r0
    5c9a:	000b      	movs	r3, r1
    5c9c:	2000      	movs	r0, #0
    5c9e:	4918      	ldr	r1, [pc, #96]	; (5d00 <_ZN13FilterOnePole5inputEf+0x94>)
    5ca0:	f005 f9e8 	bl	b074 <__aeabi_ddiv>
    5ca4:	f003 faee 	bl	9284 <exp>
    5ca8:	f006 fcce 	bl	c648 <__aeabi_d2f>
    5cac:	1c05      	adds	r5, r0, #0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    5cae:	f006 fc79 	bl	c5a4 <__aeabi_f2d>
    5cb2:	0002      	movs	r2, r0
    5cb4:	000b      	movs	r3, r1
    5cb6:	2000      	movs	r0, #0
    5cb8:	4912      	ldr	r1, [pc, #72]	; (5d04 <_ZN13FilterOnePole5inputEf+0x98>)
    5cba:	f006 f88f 	bl	bddc <__aeabi_dsub>
    5cbe:	0006      	movs	r6, r0
    5cc0:	6960      	ldr	r0, [r4, #20]
    5cc2:	000f      	movs	r7, r1
    5cc4:	f006 fc6e 	bl	c5a4 <__aeabi_f2d>
    5cc8:	0002      	movs	r2, r0
    5cca:	000b      	movs	r3, r1
    5ccc:	0030      	movs	r0, r6
    5cce:	0039      	movs	r1, r7
    5cd0:	f005 fe04 	bl	b8dc <__aeabi_dmul>
    5cd4:	0006      	movs	r6, r0
    5cd6:	000f      	movs	r7, r1
    5cd8:	1c28      	adds	r0, r5, #0
    5cda:	6921      	ldr	r1, [r4, #16]
    5cdc:	f004 fb30 	bl	a340 <__aeabi_fmul>
    5ce0:	f006 fc60 	bl	c5a4 <__aeabi_f2d>
    5ce4:	0002      	movs	r2, r0
    5ce6:	000b      	movs	r3, r1
    5ce8:	0030      	movs	r0, r6
    5cea:	0039      	movs	r1, r7
    5cec:	f004 feb2 	bl	aa54 <__aeabi_dadd>
    5cf0:	f006 fcaa 	bl	c648 <__aeabi_d2f>
    5cf4:	60e0      	str	r0, [r4, #12]
  return output();
    5cf6:	0020      	movs	r0, r4
    5cf8:	f7ff ff78 	bl	5bec <_ZN13FilterOnePole6outputEv>
}
    5cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5cfe:	46c0      	nop			; (mov r8, r8)
    5d00:	bff00000 	.word	0xbff00000
    5d04:	3ff00000 	.word	0x3ff00000

00005d08 <_ZN20FilterOnePoleCascadeC1Eff>:
}


// stuff for filter2 (lowpass only)
// should be able to set a separate fall time as well
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  setFilter( ft, fc, initialValue );
    5d0a:	26fe      	movs	r6, #254	; 0xfe
    5d0c:	2700      	movs	r7, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5d0e:	0004      	movs	r4, r0
  setFilter( ft, fc, initialValue );
    5d10:	05b6      	lsls	r6, r6, #22
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5d12:	1c15      	adds	r5, r2, #0
  setFilter( ft, fc, initialValue );
    5d14:	1c3b      	adds	r3, r7, #0
    5d16:	1c32      	adds	r2, r6, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5d18:	9101      	str	r1, [sp, #4]
  setFilter( ft, fc, initialValue );
    5d1a:	2101      	movs	r1, #1
    5d1c:	f7ff ff58 	bl	5bd0 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5d20:	0020      	movs	r0, r4
  setFilter( ft, fc, initialValue );
    5d22:	1c3b      	adds	r3, r7, #0
    5d24:	1c32      	adds	r2, r6, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5d26:	3020      	adds	r0, #32
  setFilter( ft, fc, initialValue );
    5d28:	2101      	movs	r1, #1
    5d2a:	f7ff ff51 	bl	5bd0 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>
}

void FilterOnePoleCascade::setRiseTime( float riseTime ) {
  float tauScale = 3.36;      // found emperically, by running test();

  Pole1.setTau( riseTime / tauScale );
    5d2e:	4908      	ldr	r1, [pc, #32]	; (5d50 <_ZN20FilterOnePoleCascadeC1Eff+0x48>)
    5d30:	9801      	ldr	r0, [sp, #4]
    5d32:	f004 f915 	bl	9f60 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
    5d36:	4907      	ldr	r1, [pc, #28]	; (5d54 <_ZN20FilterOnePoleCascadeC1Eff+0x4c>)
    5d38:	f004 fb02 	bl	a340 <__aeabi_fmul>
    5d3c:	6060      	str	r0, [r4, #4]
    5d3e:	6260      	str	r0, [r4, #36]	; 0x24
  Y = Ylast = X = newVal;
    5d40:	6165      	str	r5, [r4, #20]
    5d42:	6125      	str	r5, [r4, #16]
    5d44:	60e5      	str	r5, [r4, #12]
    5d46:	6365      	str	r5, [r4, #52]	; 0x34
    5d48:	6325      	str	r5, [r4, #48]	; 0x30
    5d4a:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    5d4c:	0020      	movs	r0, r4
    5d4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5d50:	40570a3d 	.word	0x40570a3d
    5d54:	49742400 	.word	0x49742400

00005d58 <_ZN20FilterOnePoleCascade11setRiseTimeEf>:
void FilterOnePoleCascade::setRiseTime( float riseTime ) {
    5d58:	b510      	push	{r4, lr}
    5d5a:	0004      	movs	r4, r0
    5d5c:	1c08      	adds	r0, r1, #0
  Pole1.setTau( riseTime / tauScale );
    5d5e:	4904      	ldr	r1, [pc, #16]	; (5d70 <_ZN20FilterOnePoleCascade11setRiseTimeEf+0x18>)
    5d60:	f004 f8fe 	bl	9f60 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
    5d64:	4903      	ldr	r1, [pc, #12]	; (5d74 <_ZN20FilterOnePoleCascade11setRiseTimeEf+0x1c>)
    5d66:	f004 faeb 	bl	a340 <__aeabi_fmul>
    5d6a:	6060      	str	r0, [r4, #4]
    5d6c:	6260      	str	r0, [r4, #36]	; 0x24
  Pole2.setTau( riseTime / tauScale );
}
    5d6e:	bd10      	pop	{r4, pc}
    5d70:	40570a3d 	.word	0x40570a3d
    5d74:	49742400 	.word	0x49742400

00005d78 <_ZN20FilterOnePoleCascade5inputEf>:

float FilterOnePoleCascade::input( float inVal  ) {
    5d78:	b510      	push	{r4, lr}
  Pole2.input( Pole1.input( inVal ));
    5d7a:	0004      	movs	r4, r0
    5d7c:	f7ff ff76 	bl	5c6c <_ZN13FilterOnePole5inputEf>
    5d80:	3420      	adds	r4, #32
    5d82:	1c01      	adds	r1, r0, #0
    5d84:	0020      	movs	r0, r4
    5d86:	f7ff ff71 	bl	5c6c <_ZN13FilterOnePole5inputEf>
  Pole1.setToNewValue( newVal );
  Pole2.setToNewValue( newVal );
}

float FilterOnePoleCascade::output() {
  return Pole2.output();
    5d8a:	0020      	movs	r0, r4
    5d8c:	f7ff ff2e 	bl	5bec <_ZN13FilterOnePole6outputEv>
}
    5d90:	bd10      	pop	{r4, pc}

00005d92 <_ZN20FilterOnePoleCascade13setToNewValueEf>:
  Y = Ylast = X = newVal;
    5d92:	6141      	str	r1, [r0, #20]
    5d94:	6101      	str	r1, [r0, #16]
    5d96:	60c1      	str	r1, [r0, #12]
    5d98:	6341      	str	r1, [r0, #52]	; 0x34
    5d9a:	6301      	str	r1, [r0, #48]	; 0x30
    5d9c:	62c1      	str	r1, [r0, #44]	; 0x2c
}
    5d9e:	4770      	bx	lr

00005da0 <_ZN20FilterOnePoleCascade6outputEv>:
float FilterOnePoleCascade::output() {
    5da0:	b510      	push	{r4, lr}
  return Pole2.output();
    5da2:	3020      	adds	r0, #32
    5da4:	f7ff ff22 	bl	5bec <_ZN13FilterOnePole6outputEv>
}
    5da8:	bd10      	pop	{r4, pc}
	...

00005dac <_ZL15is_rtc_syncbusyv>:
}


static inline bool is_rtc_syncbusy()
{
	if (RTC->MODE2.SYNCBUSY.reg)
    5dac:	4b02      	ldr	r3, [pc, #8]	; (5db8 <_ZL15is_rtc_syncbusyv+0xc>)
    5dae:	6918      	ldr	r0, [r3, #16]
    5db0:	1e43      	subs	r3, r0, #1
    5db2:	4198      	sbcs	r0, r3
    5db4:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	
	return false;
}
    5db6:	4770      	bx	lr
    5db8:	40002000 	.word	0x40002000

00005dbc <_ZN7RTCZeroC1Ev>:
	_configured = false;
    5dbc:	2300      	movs	r3, #0
    5dbe:	7003      	strb	r3, [r0, #0]
}
    5dc0:	4770      	bx	lr
	...

00005dc4 <_ZN7RTCZero12rtc_get_timeEv>:
{
    5dc4:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    5dc6:	f7ff fff1 	bl	5dac <_ZL15is_rtc_syncbusyv>
    5dca:	2800      	cmp	r0, #0
    5dcc:	d1fb      	bne.n	5dc6 <_ZN7RTCZero12rtc_get_timeEv+0x2>
	uint32_t register_value = RTC->MODE2.CLOCK.reg;
    5dce:	4b01      	ldr	r3, [pc, #4]	; (5dd4 <_ZN7RTCZero12rtc_get_timeEv+0x10>)
    5dd0:	6998      	ldr	r0, [r3, #24]
}
    5dd2:	bd10      	pop	{r4, pc}
    5dd4:	40002000 	.word	0x40002000

00005dd8 <_ZN7RTCZero10getSecondsEv>:
{
    5dd8:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5dda:	f7ff fff3 	bl	5dc4 <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    5dde:	233f      	movs	r3, #63	; 0x3f
    5de0:	4018      	ands	r0, r3
}
    5de2:	bd10      	pop	{r4, pc}

00005de4 <_ZN7RTCZero10getMinutesEv>:
{
    5de4:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5de6:	f7ff ffed 	bl	5dc4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5dea:	0500      	lsls	r0, r0, #20
	return value;
    5dec:	0e80      	lsrs	r0, r0, #26
}
    5dee:	bd10      	pop	{r4, pc}

00005df0 <_ZN7RTCZero8getHoursEv>:
{
    5df0:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5df2:	f7ff ffe7 	bl	5dc4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    5df6:	03c0      	lsls	r0, r0, #15
	return value;
    5df8:	0ec0      	lsrs	r0, r0, #27
}
    5dfa:	bd10      	pop	{r4, pc}

00005dfc <_ZN7RTCZero6getDayEv>:
{
    5dfc:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5dfe:	f7ff ffe1 	bl	5dc4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5e02:	0280      	lsls	r0, r0, #10
	return value;
    5e04:	0ec0      	lsrs	r0, r0, #27
}
    5e06:	bd10      	pop	{r4, pc}

00005e08 <_ZN7RTCZero8getMonthEv>:
{
    5e08:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5e0a:	f7ff ffdb 	bl	5dc4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    5e0e:	0180      	lsls	r0, r0, #6
	return value;
    5e10:	0f00      	lsrs	r0, r0, #28
}
    5e12:	bd10      	pop	{r4, pc}

00005e14 <_ZN7RTCZero7getYearEv>:
{
    5e14:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5e16:	f7ff ffd5 	bl	5dc4 <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    5e1a:	0e80      	lsrs	r0, r0, #26
}
    5e1c:	bd10      	pop	{r4, pc}
	...

00005e20 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>:
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    5e20:	88c8      	ldrh	r0, [r1, #6]
    5e22:	4b09      	ldr	r3, [pc, #36]	; (5e48 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value+0x28>)
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    5e24:	78ca      	ldrb	r2, [r1, #3]
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    5e26:	18c0      	adds	r0, r0, r3
    5e28:	0683      	lsls	r3, r0, #26
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    5e2a:	7908      	ldrb	r0, [r1, #4]
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    5e2c:	0452      	lsls	r2, r2, #17
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    5e2e:	0580      	lsls	r0, r0, #22
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5e30:	4310      	orrs	r0, r2
    5e32:	780a      	ldrb	r2, [r1, #0]
    5e34:	4310      	orrs	r0, r2
	clock_reg_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    5e36:	788a      	ldrb	r2, [r1, #2]
    5e38:	0312      	lsls	r2, r2, #12
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5e3a:	4310      	orrs	r0, r2
	clock_reg_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    5e3c:	784a      	ldrb	r2, [r1, #1]
    5e3e:	0192      	lsls	r2, r2, #6
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5e40:	4310      	orrs	r0, r2
    5e42:	4318      	orrs	r0, r3
}
    5e44:	4770      	bx	lr
    5e46:	46c0      	nop			; (mov r8, r8)
    5e48:	fffff830 	.word	0xfffff830

00005e4c <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>:
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5e4c:	20fa      	movs	r0, #250	; 0xfa
{
    5e4e:	b510      	push	{r4, lr}
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5e50:	241f      	movs	r4, #31
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5e52:	0e8b      	lsrs	r3, r1, #26
    5e54:	00c0      	lsls	r0, r0, #3
    5e56:	181b      	adds	r3, r3, r0
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5e58:	0c48      	lsrs	r0, r1, #17
    5e5a:	4020      	ands	r0, r4
    5e5c:	70d0      	strb	r0, [r2, #3]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5e5e:	203f      	movs	r0, #63	; 0x3f
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5e60:	80d3      	strh	r3, [r2, #6]
	time->month = ((clock_reg_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    5e62:	018b      	lsls	r3, r1, #6
    5e64:	0f1b      	lsrs	r3, r3, #28
    5e66:	7113      	strb	r3, [r2, #4]
	time->hour = ((clock_reg_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    5e68:	0b0b      	lsrs	r3, r1, #12
    5e6a:	4023      	ands	r3, r4
    5e6c:	7093      	strb	r3, [r2, #2]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5e6e:	098b      	lsrs	r3, r1, #6
    5e70:	4003      	ands	r3, r0
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    5e72:	4001      	ands	r1, r0
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5e74:	7053      	strb	r3, [r2, #1]
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    5e76:	7011      	strb	r1, [r2, #0]
}
    5e78:	bd10      	pop	{r4, pc}
	...

00005e7c <_ZN7RTCZero8getEpochEv>:
{
    5e7c:	b530      	push	{r4, r5, lr}
    5e7e:	b08d      	sub	sp, #52	; 0x34
    5e80:	0005      	movs	r5, r0
	uint32_t register_value = rtc_get_time();
    5e82:	f7ff ff9f 	bl	5dc4 <_ZN7RTCZero12rtc_get_timeEv>
	rtc_register_value_to_time(register_value, &time);
    5e86:	ac01      	add	r4, sp, #4
	uint32_t register_value = rtc_get_time();
    5e88:	0001      	movs	r1, r0
	rtc_register_value_to_time(register_value, &time);
    5e8a:	0022      	movs	r2, r4
    5e8c:	0028      	movs	r0, r5
    5e8e:	f7ff ffdd 	bl	5e4c <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>
	tm.tm_year = time.year - 1900;		// Years since 1900
    5e92:	88e3      	ldrh	r3, [r4, #6]
    5e94:	4a09      	ldr	r2, [pc, #36]	; (5ebc <_ZN7RTCZero8getEpochEv+0x40>)
	uint32_t epoch = mktime(&tm);
    5e96:	a803      	add	r0, sp, #12
	tm.tm_year = time.year - 1900;		// Years since 1900
    5e98:	189b      	adds	r3, r3, r2
    5e9a:	9308      	str	r3, [sp, #32]
	tm.tm_mon  = time.month - 1;
    5e9c:	7923      	ldrb	r3, [r4, #4]
    5e9e:	3b01      	subs	r3, #1
    5ea0:	9307      	str	r3, [sp, #28]
	tm.tm_mday = time.day;
    5ea2:	78e3      	ldrb	r3, [r4, #3]
    5ea4:	9306      	str	r3, [sp, #24]
	tm.tm_hour = time.hour;
    5ea6:	78a3      	ldrb	r3, [r4, #2]
    5ea8:	9305      	str	r3, [sp, #20]
	tm.tm_min  = time.minute;
    5eaa:	7863      	ldrb	r3, [r4, #1]
    5eac:	9304      	str	r3, [sp, #16]
	tm.tm_sec  = time.second;
    5eae:	7823      	ldrb	r3, [r4, #0]
    5eb0:	9303      	str	r3, [sp, #12]
	uint32_t epoch = mktime(&tm);
    5eb2:	f006 fedd 	bl	cc70 <mktime>
}
    5eb6:	b00d      	add	sp, #52	; 0x34
    5eb8:	bd30      	pop	{r4, r5, pc}
    5eba:	46c0      	nop			; (mov r8, r8)
    5ebc:	fffff894 	.word	0xfffff894

00005ec0 <_ZN7RTCZero10RTCdisableEv>:


void RTCZero::RTCdisable()
{
    5ec0:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    5ec2:	f7ff ff73 	bl	5dac <_ZL15is_rtc_syncbusyv>
    5ec6:	2800      	cmp	r0, #0
    5ec8:	d1fb      	bne.n	5ec2 <_ZN7RTCZero10RTCdisableEv+0x2>
		// Wait for synchronization
	}
	
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    5eca:	2102      	movs	r1, #2
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
    5ecc:	4b05      	ldr	r3, [pc, #20]	; (5ee4 <_ZN7RTCZero10RTCdisableEv+0x24>)
    5ece:	4a06      	ldr	r2, [pc, #24]	; (5ee8 <_ZN7RTCZero10RTCdisableEv+0x28>)
    5ed0:	811a      	strh	r2, [r3, #8]
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
    5ed2:	819a      	strh	r2, [r3, #12]
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    5ed4:	881a      	ldrh	r2, [r3, #0]
    5ed6:	438a      	bics	r2, r1
    5ed8:	801a      	strh	r2, [r3, #0]
	
	while (is_rtc_syncbusy())
    5eda:	f7ff ff67 	bl	5dac <_ZL15is_rtc_syncbusyv>
    5ede:	2800      	cmp	r0, #0
    5ee0:	d1fb      	bne.n	5eda <_ZN7RTCZero10RTCdisableEv+0x1a>
	{
		// Wait for synchronization
	}
}
    5ee2:	bd10      	pop	{r4, pc}
    5ee4:	40002000 	.word	0x40002000
    5ee8:	ffff81ff 	.word	0xffff81ff

00005eec <_ZN7RTCZero9RTCenableEv>:

void RTCZero::RTCenable()
{
    5eec:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    5eee:	f7ff ff5d 	bl	5dac <_ZL15is_rtc_syncbusyv>
    5ef2:	2800      	cmp	r0, #0
    5ef4:	d1fb      	bne.n	5eee <_ZN7RTCZero9RTCenableEv+0x2>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;			// enable RTC
    5ef6:	2302      	movs	r3, #2
    5ef8:	4a04      	ldr	r2, [pc, #16]	; (5f0c <_ZN7RTCZero9RTCenableEv+0x20>)
    5efa:	8811      	ldrh	r1, [r2, #0]
    5efc:	430b      	orrs	r3, r1
    5efe:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    5f00:	f7ff ff54 	bl	5dac <_ZL15is_rtc_syncbusyv>
    5f04:	2800      	cmp	r0, #0
    5f06:	d1fb      	bne.n	5f00 <_ZN7RTCZero9RTCenableEv+0x14>
	{
		// Wait for synchronization
	}
}
    5f08:	bd10      	pop	{r4, pc}
    5f0a:	46c0      	nop			; (mov r8, r8)
    5f0c:	40002000 	.word	0x40002000

00005f10 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>:
{
    5f10:	b570      	push	{r4, r5, r6, lr}
    5f12:	0005      	movs	r5, r0
	uint32_t register_value = rtc_time_to_register_value(time);
    5f14:	f7ff ff84 	bl	5e20 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>
    5f18:	0006      	movs	r6, r0
	while (is_rtc_syncbusy())
    5f1a:	f7ff ff47 	bl	5dac <_ZL15is_rtc_syncbusyv>
    5f1e:	2800      	cmp	r0, #0
    5f20:	d1fb      	bne.n	5f1a <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0xa>
	RTC->MODE2.CLOCK.reg = register_value;
    5f22:	4c0b      	ldr	r4, [pc, #44]	; (5f50 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x40>)
	RTCdisable();
    5f24:	0028      	movs	r0, r5
    5f26:	f7ff ffcb 	bl	5ec0 <_ZN7RTCZero10RTCdisableEv>
	RTC->MODE2.CLOCK.reg = register_value;
    5f2a:	61a6      	str	r6, [r4, #24]
	while (is_rtc_syncbusy())
    5f2c:	f7ff ff3e 	bl	5dac <_ZL15is_rtc_syncbusyv>
    5f30:	2800      	cmp	r0, #0
    5f32:	d1fb      	bne.n	5f2c <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x1c>
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_SYNCBUSY_CLOCKSYNC;
    5f34:	2280      	movs	r2, #128	; 0x80
    5f36:	8823      	ldrh	r3, [r4, #0]
    5f38:	0212      	lsls	r2, r2, #8
    5f3a:	4313      	orrs	r3, r2
    5f3c:	8023      	strh	r3, [r4, #0]
	while (is_rtc_syncbusy())
    5f3e:	f7ff ff35 	bl	5dac <_ZL15is_rtc_syncbusyv>
    5f42:	2800      	cmp	r0, #0
    5f44:	d1fb      	bne.n	5f3e <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x2e>
	RTCenable();
    5f46:	0028      	movs	r0, r5
    5f48:	f7ff ffd0 	bl	5eec <_ZN7RTCZero9RTCenableEv>
}
    5f4c:	bd70      	pop	{r4, r5, r6, pc}
    5f4e:	46c0      	nop			; (mov r8, r8)
    5f50:	40002000 	.word	0x40002000

00005f54 <_ZN7RTCZero8setEpochEm>:
{
    5f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	time_t etime = epoch;
    5f56:	4b0e      	ldr	r3, [pc, #56]	; (5f90 <_ZN7RTCZero8setEpochEm+0x3c>)
{
    5f58:	0004      	movs	r4, r0
	time_t etime = epoch;
    5f5a:	4299      	cmp	r1, r3
    5f5c:	d200      	bcs.n	5f60 <_ZN7RTCZero8setEpochEm+0xc>
    5f5e:	0019      	movs	r1, r3
	struct tm* tmp = gmtime(&etime);
    5f60:	a801      	add	r0, sp, #4
	time_t etime = epoch;
    5f62:	9101      	str	r1, [sp, #4]
	struct tm* tmp = gmtime(&etime);
    5f64:	f006 fc5a 	bl	c81c <gmtime>
	time.day    = tmp->tm_mday;
    5f68:	7b03      	ldrb	r3, [r0, #12]
    5f6a:	a902      	add	r1, sp, #8
    5f6c:	70cb      	strb	r3, [r1, #3]
	time.month  = tmp->tm_mon + 1;
    5f6e:	6903      	ldr	r3, [r0, #16]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    5f70:	4a08      	ldr	r2, [pc, #32]	; (5f94 <_ZN7RTCZero8setEpochEm+0x40>)
	time.month  = tmp->tm_mon + 1;
    5f72:	3301      	adds	r3, #1
    5f74:	710b      	strb	r3, [r1, #4]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    5f76:	6943      	ldr	r3, [r0, #20]
    5f78:	189b      	adds	r3, r3, r2
    5f7a:	80cb      	strh	r3, [r1, #6]
	time.hour   = tmp->tm_hour;
    5f7c:	7a03      	ldrb	r3, [r0, #8]
    5f7e:	708b      	strb	r3, [r1, #2]
	time.minute = tmp->tm_min;
    5f80:	7903      	ldrb	r3, [r0, #4]
    5f82:	704b      	strb	r3, [r1, #1]
	time.second = tmp->tm_sec;
    5f84:	6803      	ldr	r3, [r0, #0]
	rtc_set_time(&time);
    5f86:	0020      	movs	r0, r4
	time.second = tmp->tm_sec;
    5f88:	700b      	strb	r3, [r1, #0]
	rtc_set_time(&time);
    5f8a:	f7ff ffc1 	bl	5f10 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
}
    5f8e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    5f90:	386d4380 	.word	0x386d4380
    5f94:	0000076c 	.word	0x0000076c

00005f98 <_ZN7RTCZero8RTCresetEv>:

void RTCZero::RTCreset()
{
    5f98:	b510      	push	{r4, lr}
	RTCdisable();
    5f9a:	f7ff ff91 	bl	5ec0 <_ZN7RTCZero10RTCdisableEv>
	
	while (is_rtc_syncbusy())
    5f9e:	f7ff ff05 	bl	5dac <_ZL15is_rtc_syncbusyv>
    5fa2:	2800      	cmp	r0, #0
    5fa4:	d1fb      	bne.n	5f9e <_ZN7RTCZero8RTCresetEv+0x6>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;			// software reset
    5fa6:	2301      	movs	r3, #1
    5fa8:	4a04      	ldr	r2, [pc, #16]	; (5fbc <_ZN7RTCZero8RTCresetEv+0x24>)
    5faa:	8811      	ldrh	r1, [r2, #0]
    5fac:	430b      	orrs	r3, r1
    5fae:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    5fb0:	f7ff fefc 	bl	5dac <_ZL15is_rtc_syncbusyv>
    5fb4:	2800      	cmp	r0, #0
    5fb6:	d1fb      	bne.n	5fb0 <_ZN7RTCZero8RTCresetEv+0x18>
	{
		// Wait for synchronization
	}
}
    5fb8:	bd10      	pop	{r4, pc}
    5fba:	46c0      	nop			; (mov r8, r8)
    5fbc:	40002000 	.word	0x40002000

00005fc0 <_ZN7RTCZero5beginEv>:
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5fc0:	2380      	movs	r3, #128	; 0x80
{
    5fc2:	b510      	push	{r4, lr}
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5fc4:	4a09      	ldr	r2, [pc, #36]	; (5fec <_ZN7RTCZero5beginEv+0x2c>)
    5fc6:	005b      	lsls	r3, r3, #1
    5fc8:	6951      	ldr	r1, [r2, #20]
{
    5fca:	0004      	movs	r4, r0
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    5fcc:	430b      	orrs	r3, r1
    5fce:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = OSC32KCTRL_RTCCTRL_RTCSEL_XOSC1K;
    5fd0:	2204      	movs	r2, #4
    5fd2:	4b07      	ldr	r3, [pc, #28]	; (5ff0 <_ZN7RTCZero5beginEv+0x30>)
    5fd4:	611a      	str	r2, [r3, #16]
	RTCreset();
    5fd6:	f7ff ffdf 	bl	5f98 <_ZN7RTCZero8RTCresetEv>
	RTC->MODE2.CTRLA.reg = tmp_reg;
    5fda:	4a06      	ldr	r2, [pc, #24]	; (5ff4 <_ZN7RTCZero5beginEv+0x34>)
    5fdc:	4b06      	ldr	r3, [pc, #24]	; (5ff8 <_ZN7RTCZero5beginEv+0x38>)
	RTCenable();
    5fde:	0020      	movs	r0, r4
	RTC->MODE2.CTRLA.reg = tmp_reg;
    5fe0:	801a      	strh	r2, [r3, #0]
	RTCenable();
    5fe2:	f7ff ff83 	bl	5eec <_ZN7RTCZero9RTCenableEv>
	_configured = true;
    5fe6:	2301      	movs	r3, #1
    5fe8:	7023      	strb	r3, [r4, #0]
}
    5fea:	bd10      	pop	{r4, pc}
    5fec:	40000400 	.word	0x40000400
    5ff0:	40001000 	.word	0x40001000
    5ff4:	ffff8b08 	.word	0xffff8b08
    5ff8:	40002000 	.word	0x40002000

00005ffc <_ZN8SPIFlashC1EhP8SPIClass>:
  cs_mask = digitalPinToBitMask(csPin);
  pinMode(csPin, OUTPUT);
  CHIP_DESELECT
}
#elif defined (ARDUINO_ARCH_SAMD) || defined (ARCH_STM32) || defined(ARDUINO_ARCH_ESP32)
SPIFlash::SPIFlash(uint8_t cs, SPIClass *spiinterface) {
    5ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    // The SAMD51 SERCOM runs at 96MHz when the cpu runs at 120MHz
    #if F_CPU == 120000000
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? 96000000ul / SPI_MIN_CLOCK_DIVIDER : clock);
    #else
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    5ffe:	4b25      	ldr	r3, [pc, #148]	; (6094 <_ZN8SPIFlashC1EhP8SPIClass+0x98>)
    6000:	0016      	movs	r6, r2
  // Object declaration for the GPIO HAL type for csPin - @boseji <salearj@hotmail.com> 02.03.17
  gpio_t      csPin;
  #endif

  // Variables specific to using non-standard SPI (currently only tested with ESP32)
  struct _SPIPins {
    6002:	22ff      	movs	r2, #255	; 0xff
    6004:	6003      	str	r3, [r0, #0]
    #endif

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    6006:	2300      	movs	r3, #0
    6008:	000d      	movs	r5, r1
    600a:	2152      	movs	r1, #82	; 0x52
    600c:	7442      	strb	r2, [r0, #17]
    600e:	7482      	strb	r2, [r0, #18]
    6010:	74c2      	strb	r2, [r0, #19]
    6012:	7502      	strb	r2, [r0, #20]
    6014:	1c42      	adds	r2, r0, #1
    6016:	7143      	strb	r3, [r0, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    6018:	7103      	strb	r3, [r0, #4]
    601a:	7203      	strb	r3, [r0, #8]
    601c:	7743      	strb	r3, [r0, #29]
    601e:	7783      	strb	r3, [r0, #30]
    6020:	77c3      	strb	r3, [r0, #31]
    6022:	77d3      	strb	r3, [r2, #31]
    6024:	322a      	adds	r2, #42	; 0x2a
    6026:	7011      	strb	r1, [r2, #0]
    6028:	3105      	adds	r1, #5
    602a:	7051      	strb	r1, [r2, #1]
    602c:	2200      	movs	r2, #0
    602e:	0004      	movs	r4, r0
    6030:	4f19      	ldr	r7, [pc, #100]	; (6098 <_ZN8SPIFlashC1EhP8SPIClass+0x9c>)
    6032:	6783      	str	r3, [r0, #120]	; 0x78
    6034:	67c3      	str	r3, [r0, #124]	; 0x7c
    6036:	6302      	str	r2, [r0, #48]	; 0x30
    6038:	0039      	movs	r1, r7
    603a:	2212      	movs	r2, #18
    603c:	309c      	adds	r0, #156	; 0x9c
    603e:	f006 fd28 	bl	ca92 <memcpy>
    6042:	0020      	movs	r0, r4
    6044:	0039      	movs	r1, r7
    6046:	2248      	movs	r2, #72	; 0x48
    6048:	3114      	adds	r1, #20
    604a:	30b0      	adds	r0, #176	; 0xb0
    604c:	f006 fd21 	bl	ca92 <memcpy>
    6050:	0020      	movs	r0, r4
    6052:	0039      	movs	r1, r7
    6054:	2209      	movs	r2, #9
    6056:	315c      	adds	r1, #92	; 0x5c
    6058:	30f8      	adds	r0, #248	; 0xf8
    605a:	f006 fd1a 	bl	ca92 <memcpy>
    605e:	0039      	movs	r1, r7
    6060:	1ca0      	adds	r0, r4, #2
    6062:	3165      	adds	r1, #101	; 0x65
    6064:	30ff      	adds	r0, #255	; 0xff
    6066:	2203      	movs	r2, #3
    6068:	f006 fd13 	bl	ca92 <memcpy>
  _spi = spiinterface;  //Sets SPI interface - if no user selection is made, this defaults to SPI
  if (_spi == &SPI) {
    606c:	4b0b      	ldr	r3, [pc, #44]	; (609c <_ZN8SPIFlashC1EhP8SPIClass+0xa0>)
  _spi = spiinterface;  //Sets SPI interface - if no user selection is made, this defaults to SPI
    606e:	60e6      	str	r6, [r4, #12]
  if (_spi == &SPI) {
    6070:	429e      	cmp	r6, r3
    6072:	d10c      	bne.n	608e <_ZN8SPIFlashC1EhP8SPIClass+0x92>
    _SPIInUse = STDSPI;
    6074:	230a      	movs	r3, #10
  }
  else {
    _SPIInUse = ALTSPI;
  }
  csPin = cs;
  pinMode(csPin, OUTPUT);
    6076:	0028      	movs	r0, r5
    _SPIInUse = ALTSPI;
    6078:	7563      	strb	r3, [r4, #21]
  csPin = cs;
    607a:	7425      	strb	r5, [r4, #16]
  pinMode(csPin, OUTPUT);
    607c:	2101      	movs	r1, #1
    607e:	f7fd fde7 	bl	3c50 <pinMode>
  CHIP_DESELECT
    6082:	7c20      	ldrb	r0, [r4, #16]
    6084:	2101      	movs	r1, #1
    6086:	f7fd fde7 	bl	3c58 <digitalWrite>
}
    608a:	0020      	movs	r0, r4
    608c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _SPIInUse = ALTSPI;
    608e:	230b      	movs	r3, #11
    6090:	e7f1      	b.n	6076 <_ZN8SPIFlashC1EhP8SPIClass+0x7a>
    6092:	46c0      	nop			; (mov r8, r8)
    6094:	003d0900 	.word	0x003d0900
    6098:	00011174 	.word	0x00011174
    609c:	2000129c 	.word	0x2000129c

000060a0 <_ZN8SPIFlash5beginEm>:
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//     Public functions used for read, write and erase operations     //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//Identifies chip and establishes parameters
bool SPIFlash::begin(uint32_t flashChipSize) {
    60a0:	b570      	push	{r4, r5, r6, lr}
#endif
#ifdef HIGHSPEED
  Serial.println(F("Highspeed mode initiated."));
  Serial.println();
#endif
  if (_SPIInUse == ALTSPI) {
    60a2:	7d43      	ldrb	r3, [r0, #21]
bool SPIFlash::begin(uint32_t flashChipSize) {
    60a4:	0004      	movs	r4, r0
    60a6:	000d      	movs	r5, r1
  if (_SPIInUse == ALTSPI) {
    60a8:	2b0b      	cmp	r3, #11
    60aa:	d002      	beq.n	60b2 <_ZN8SPIFlash5beginEm+0x12>
    #if defined (ARDUINO_ARCH_ESP32)
    SPI.begin(_nonStdSPI.sck, _nonStdSPI.miso, _nonStdSPI.mosi, _nonStdSPI.ss);
    #endif
  }
  else {
    BEGIN_SPI
    60ac:	68c0      	ldr	r0, [r0, #12]
    60ae:	f000 fcbf 	bl	6a30 <_ZN8SPIClass5beginEv>
  }

#ifdef SPI_HAS_TRANSACTION
  //Define the settings to be used by the SPI bus
  if (!_SPISettingsSet) {
    60b2:	7a23      	ldrb	r3, [r4, #8]
    60b4:	2b00      	cmp	r3, #0
    60b6:	d107      	bne.n	60c8 <_ZN8SPIFlash5beginEm+0x28>
    _settings = SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
    60b8:	221b      	movs	r2, #27
    60ba:	7062      	strb	r2, [r4, #1]
    60bc:	3a64      	subs	r2, #100	; 0x64
    60be:	7023      	strb	r3, [r4, #0]
    60c0:	70a2      	strb	r2, [r4, #2]
    60c2:	70e3      	strb	r3, [r4, #3]
    60c4:	7123      	strb	r3, [r4, #4]
    60c6:	7163      	strb	r3, [r4, #5]
#else
  if (!_clockdiv) {
    _clockdiv = SPI_CLOCK_DIV2;
  }
#endif
  bool retVal = _chipID(flashChipSize);
    60c8:	0029      	movs	r1, r5
    60ca:	0020      	movs	r0, r4
    60cc:	f000 fbe4 	bl	6898 <_ZN8SPIFlash7_chipIDEm>
    60d0:	0005      	movs	r5, r0
  _endSPI();
    60d2:	0020      	movs	r0, r4
    60d4:	f000 faa0 	bl	6618 <_ZN8SPIFlash7_endSPIEv>
  chipPoweredDown = false;
    60d8:	2300      	movs	r3, #0
  _disableGlobalBlockProtect();
    60da:	0020      	movs	r0, r4
  chipPoweredDown = false;
    60dc:	77a3      	strb	r3, [r4, #30]
  _disableGlobalBlockProtect();
    60de:	f000 fb95 	bl	680c <_ZN8SPIFlash26_disableGlobalBlockProtectEv>
  return retVal;
}
    60e2:	0028      	movs	r0, r5
    60e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000060e8 <_ZN8SPIFlash5errorEb>:
void SPIFlash::setClock(uint8_t clockdiv) {
  _clockdiv = clockdiv;
}
#endif

uint8_t SPIFlash::error(bool _verbosity) {
    60e8:	b510      	push	{r4, lr}
    60ea:	4c05      	ldr	r4, [pc, #20]	; (6100 <_ZN8SPIFlash5errorEb+0x18>)
  if (!_verbosity) {
    60ec:	2900      	cmp	r1, #0
    60ee:	d101      	bne.n	60f4 <_ZN8SPIFlash5errorEb+0xc>
    return diagnostics.errorcode;
  }
  else {
    _troubleshoot(diagnostics.errorcode, PRINTOVERRIDE);
    return diagnostics.errorcode;
    60f0:	7820      	ldrb	r0, [r4, #0]
  }
}
    60f2:	bd10      	pop	{r4, pc}
    _troubleshoot(diagnostics.errorcode, PRINTOVERRIDE);
    60f4:	7821      	ldrb	r1, [r4, #0]
    60f6:	2201      	movs	r2, #1
    60f8:	f000 fc6e 	bl	69d8 <_ZN8SPIFlash13_troubleshootEhb>
    60fc:	e7f8      	b.n	60f0 <_ZN8SPIFlash5errorEb+0x8>
    60fe:	46c0      	nop			; (mov r8, r8)
    6100:	20001a10 	.word	0x20001a10

00006104 <_ZN8SPIFlash13readByteArrayEmPhjb>:
//    1. _addr --> Any address from 0 to capacity
//    2. data_buffer --> The array of bytes to be read from the flash memory - starting at the address indicated
//    3. bufferSize --> The size of the buffer - in number of bytes.
//    4. fastRead --> defaults to false - executes _beginFastRead() if set to true

bool  SPIFlash::readByteArray(uint32_t _addr, uint8_t *data_buffer, size_t bufferSize, bool fastRead) {
    6104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6106:	001e      	movs	r6, r3
    6108:	ab08      	add	r3, sp, #32
    610a:	781b      	ldrb	r3, [r3, #0]
    610c:	0017      	movs	r7, r2
    610e:	9301      	str	r3, [sp, #4]
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros();
  #endif
  if (!_prep(READDATA, _addr, bufferSize)) {
    6110:	000a      	movs	r2, r1
    6112:	0033      	movs	r3, r6
    6114:	2103      	movs	r1, #3
bool  SPIFlash::readByteArray(uint32_t _addr, uint8_t *data_buffer, size_t bufferSize, bool fastRead) {
    6116:	0004      	movs	r4, r0
  if (!_prep(READDATA, _addr, bufferSize)) {
    6118:	f000 fae2 	bl	66e0 <_ZN8SPIFlash5_prepEhmm>
    611c:	1e05      	subs	r5, r0, #0
    611e:	d010      	beq.n	6142 <_ZN8SPIFlash13readByteArrayEmPhjb+0x3e>
    return false;
  }
  if(fastRead) {
    6120:	9b01      	ldr	r3, [sp, #4]
    _beginSPI(FASTREAD);
    6122:	210b      	movs	r1, #11
  if(fastRead) {
    6124:	2b00      	cmp	r3, #0
    6126:	d100      	bne.n	612a <_ZN8SPIFlash13readByteArrayEmPhjb+0x26>
  }
  else {
    _beginSPI(READDATA);
    6128:	2103      	movs	r1, #3
    612a:	0020      	movs	r0, r4
    612c:	f000 f9aa 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
  }
  _nextBuf(READDATA, &(*data_buffer), bufferSize);
    6130:	0020      	movs	r0, r4
    6132:	0033      	movs	r3, r6
    6134:	003a      	movs	r2, r7
    6136:	2103      	movs	r1, #3
    6138:	f000 f9fe 	bl	6538 <_ZN8SPIFlash8_nextBufEhPhm>
  _endSPI();
    613c:	0020      	movs	r0, r4
    613e:	f000 fa6b 	bl	6618 <_ZN8SPIFlash7_endSPIEv>
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
	return true;
}
    6142:	0028      	movs	r0, r5
    6144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006148 <_ZN8SPIFlash8writeStrEmR6Stringb>:
//    1. _addr --> Any address - from 0 to capacity
//    2. data --> One String to be written to a particular location on a page
//    3. errorCheck --> Turned on by default. Checks for writing errors
// WARNING: You can only write to previously erased memory locations (see datasheet).
// Use the eraseSector()/eraseBlock32K/eraseBlock64K commands to first clear memory (write 0xFFs)
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    6148:	b5f0      	push	{r4, r5, r6, r7, lr}
    614a:	b089      	sub	sp, #36	; 0x24
    614c:	6896      	ldr	r6, [r2, #8]
    614e:	0004      	movs	r4, r0
    6150:	0010      	movs	r0, r2
  _spifuncruntime = micros();
  #endif

  uint32_t _sz = (sizeof(char)*(data.length()+1));

  char _outCharArray[_sz];
    6152:	466a      	mov	r2, sp
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    6154:	af00      	add	r7, sp, #0
    6156:	607b      	str	r3, [r7, #4]
  uint32_t _sz = (sizeof(char)*(data.length()+1));
    6158:	1c73      	adds	r3, r6, #1
    615a:	61fb      	str	r3, [r7, #28]
  char _outCharArray[_sz];
    615c:	3307      	adds	r3, #7
    615e:	08db      	lsrs	r3, r3, #3
    6160:	00db      	lsls	r3, r3, #3
    6162:	1ad3      	subs	r3, r2, r3
    6164:	469d      	mov	sp, r3
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    6166:	6179      	str	r1, [r7, #20]
  char _outCharArray[_sz];
    6168:	60fb      	str	r3, [r7, #12]
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    616a:	1c72      	adds	r2, r6, #1
    616c:	2300      	movs	r3, #0
    616e:	4669      	mov	r1, sp
    6170:	f7ff fb81 	bl	5876 <_ZNK6String8getBytesEPhjj>
  data.toCharArray(_outCharArray, _sz);

  if(_isChipPoweredDown() || !_addressCheck(_addr, sizeof(_sz)) || !_notPrevWritten(_addr, sizeof(_sz)+_sz) || !_notBusy() || !_writeEnable()) {
    6174:	0020      	movs	r0, r4
    6176:	f000 fa61 	bl	663c <_ZN8SPIFlash18_isChipPoweredDownEv>
    617a:	1e05      	subs	r5, r0, #0
    617c:	d002      	beq.n	6184 <_ZN8SPIFlash8writeStrEmR6Stringb+0x3c>
    return false;
    617e:	2300      	movs	r3, #0
    6180:	61bb      	str	r3, [r7, #24]
    6182:	e074      	b.n	626e <_ZN8SPIFlash8writeStrEmR6Stringb+0x126>
  if(_isChipPoweredDown() || !_addressCheck(_addr, sizeof(_sz)) || !_notPrevWritten(_addr, sizeof(_sz)+_sz) || !_notBusy() || !_writeEnable()) {
    6184:	2204      	movs	r2, #4
    6186:	6979      	ldr	r1, [r7, #20]
    6188:	0020      	movs	r0, r4
    618a:	f000 f92f 	bl	63ec <_ZN8SPIFlash13_addressCheckEmm>
    618e:	2800      	cmp	r0, #0
    6190:	d0f5      	beq.n	617e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    6192:	1d72      	adds	r2, r6, #5
    6194:	6979      	ldr	r1, [r7, #20]
    6196:	0020      	movs	r0, r4
    6198:	f000 f9a4 	bl	64e4 <_ZN8SPIFlash15_notPrevWrittenEmm>
    619c:	2800      	cmp	r0, #0
    619e:	d0ee      	beq.n	617e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    61a0:	497c      	ldr	r1, [pc, #496]	; (6394 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    61a2:	0020      	movs	r0, r4
    61a4:	f000 fa58 	bl	6658 <_ZN8SPIFlash8_notBusyEm>
    61a8:	2800      	cmp	r0, #0
    61aa:	d0e8      	beq.n	617e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    61ac:	2101      	movs	r1, #1
    61ae:	0020      	movs	r0, r4
    61b0:	f000 fa78 	bl	66a4 <_ZN8SPIFlash12_writeEnableEb>
    61b4:	2800      	cmp	r0, #0
    61b6:	d0e2      	beq.n	617e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
  }

  _beginSPI(PAGEPROG);
    61b8:	2102      	movs	r1, #2
    61ba:	0020      	movs	r0, r4
    61bc:	f000 f962 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
  for (uint8_t i = 0; i < sizeof(_sz); i++) {
    _nextByte(WRITE, _sz >> (8*i));
    61c0:	69fa      	ldr	r2, [r7, #28]
    61c2:	0026      	movs	r6, r4
    61c4:	40ea      	lsrs	r2, r5
    61c6:	362c      	adds	r6, #44	; 0x2c
    61c8:	b2d2      	uxtb	r2, r2
    61ca:	7831      	ldrb	r1, [r6, #0]
    61cc:	0020      	movs	r0, r4
    61ce:	3508      	adds	r5, #8
    61d0:	f000 f9ac 	bl	652c <_ZN8SPIFlash9_nextByteEch>
  for (uint8_t i = 0; i < sizeof(_sz); i++) {
    61d4:	2d20      	cmp	r5, #32
    61d6:	d1f3      	bne.n	61c0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x78>
  }
  CHIP_DESELECT
    61d8:	2101      	movs	r1, #1
    61da:	7c20      	ldrb	r0, [r4, #16]
    61dc:	f7fd fd3c 	bl	3c58 <digitalWrite>
  _endSPI();
    61e0:	0020      	movs	r0, r4
    61e2:	f000 fa19 	bl	6618 <_ZN8SPIFlash7_endSPIEv>

  if(!_addressCheck(_addr+sizeof(_sz), _sz) || !_notBusy() || !_writeEnable()) {
    61e6:	697b      	ldr	r3, [r7, #20]
    61e8:	69fa      	ldr	r2, [r7, #28]
    61ea:	3304      	adds	r3, #4
    61ec:	0019      	movs	r1, r3
    61ee:	0020      	movs	r0, r4
    61f0:	60bb      	str	r3, [r7, #8]
    61f2:	f000 f8fb 	bl	63ec <_ZN8SPIFlash13_addressCheckEmm>
    61f6:	2800      	cmp	r0, #0
    61f8:	d0c1      	beq.n	617e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    61fa:	4966      	ldr	r1, [pc, #408]	; (6394 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    61fc:	0020      	movs	r0, r4
    61fe:	f000 fa2b 	bl	6658 <_ZN8SPIFlash8_notBusyEm>
    6202:	2800      	cmp	r0, #0
    6204:	d0bb      	beq.n	617e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    6206:	2101      	movs	r1, #1
    6208:	0020      	movs	r0, r4
    620a:	f000 fa4b 	bl	66a4 <_ZN8SPIFlash12_writeEnableEb>
    620e:	61b8      	str	r0, [r7, #24]
    6210:	2800      	cmp	r0, #0
    6212:	d0b4      	beq.n	617e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    return false;
  }
  uint16_t maxBytes = SPI_PAGESIZE-(_addr % SPI_PAGESIZE);  // Force the first set of bytes to stay within the first page
    6214:	2580      	movs	r5, #128	; 0x80
    6216:	7d3b      	ldrb	r3, [r7, #20]
    6218:	006d      	lsls	r5, r5, #1
    621a:	1aed      	subs	r5, r5, r3

  if (_sz <= maxBytes) {
    621c:	69fb      	ldr	r3, [r7, #28]
  uint16_t maxBytes = SPI_PAGESIZE-(_addr % SPI_PAGESIZE);  // Force the first set of bytes to stay within the first page
    621e:	b2ad      	uxth	r5, r5
  if (_sz <= maxBytes) {
    6220:	42ab      	cmp	r3, r5
    6222:	d828      	bhi.n	6276 <_ZN8SPIFlash8writeStrEmR6Stringb+0x12e>
    CHIP_SELECT
    6224:	7c20      	ldrb	r0, [r4, #16]
    6226:	2100      	movs	r1, #0
    6228:	f7fd fd16 	bl	3c58 <digitalWrite>
    _nextByte(WRITE, PAGEPROG);
    622c:	7831      	ldrb	r1, [r6, #0]
    622e:	2202      	movs	r2, #2
    6230:	0020      	movs	r0, r4
    6232:	f000 f97b 	bl	652c <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    6236:	0020      	movs	r0, r4
    6238:	f000 f8fc 	bl	6434 <_ZN8SPIFlash16_transferAddressEv>
    //_nextBuf(PAGEPROG, &_outCharArray[0], _sz);
    for (uint16_t i = 0; i < _sz; ++i) {
    623c:	2500      	movs	r5, #0
    623e:	69fb      	ldr	r3, [r7, #28]
    6240:	42ab      	cmp	r3, r5
    6242:	d90a      	bls.n	625a <_ZN8SPIFlash8writeStrEmR6Stringb+0x112>
      _nextByte(WRITE, _outCharArray[i]);
    6244:	68fb      	ldr	r3, [r7, #12]
    6246:	0020      	movs	r0, r4
    6248:	5d5a      	ldrb	r2, [r3, r5]
    624a:	0023      	movs	r3, r4
    624c:	332c      	adds	r3, #44	; 0x2c
    624e:	7819      	ldrb	r1, [r3, #0]
    for (uint16_t i = 0; i < _sz; ++i) {
    6250:	3501      	adds	r5, #1
      _nextByte(WRITE, _outCharArray[i]);
    6252:	f000 f96b 	bl	652c <_ZN8SPIFlash9_nextByteEch>
    for (uint16_t i = 0; i < _sz; ++i) {
    6256:	b2ad      	uxth	r5, r5
    6258:	e7f1      	b.n	623e <_ZN8SPIFlash8writeStrEmR6Stringb+0xf6>
    }
    CHIP_DESELECT
    625a:	7c20      	ldrb	r0, [r4, #16]
    625c:	2101      	movs	r1, #1
    625e:	f7fd fcfb 	bl	3c58 <digitalWrite>
      }

    } while (length > 0);
  }

  if (!errorCheck) {
    6262:	687b      	ldr	r3, [r7, #4]
    6264:	2b00      	cmp	r3, #0
    6266:	d14f      	bne.n	6308 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1c0>
    _endSPI();
    6268:	0020      	movs	r0, r4
    626a:	f000 f9d5 	bl	6618 <_ZN8SPIFlash7_endSPIEv>
    #ifdef RUNDIAGNOSTIC
      _spifuncruntime = micros() - _spifuncruntime;
    #endif
  }
  return true;
}
    626e:	46bd      	mov	sp, r7
    6270:	69b8      	ldr	r0, [r7, #24]
    6272:	b009      	add	sp, #36	; 0x24
    6274:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t length = _sz;
    6276:	8bbb      	ldrh	r3, [r7, #28]
    6278:	617b      	str	r3, [r7, #20]
    uint16_t data_offset = 0;
    627a:	2300      	movs	r3, #0
    627c:	613b      	str	r3, [r7, #16]
      writeBufSz = (length<=maxBytes) ? length : maxBytes;
    627e:	697b      	ldr	r3, [r7, #20]
    6280:	42ab      	cmp	r3, r5
    6282:	dc00      	bgt.n	6286 <_ZN8SPIFlash8writeStrEmR6Stringb+0x13e>
    6284:	001d      	movs	r5, r3
      CHIP_SELECT
    6286:	7c20      	ldrb	r0, [r4, #16]
    6288:	2100      	movs	r1, #0
    628a:	f7fd fce5 	bl	3c58 <digitalWrite>
      _nextByte(WRITE, PAGEPROG);
    628e:	0023      	movs	r3, r4
    6290:	332c      	adds	r3, #44	; 0x2c
    6292:	7819      	ldrb	r1, [r3, #0]
    6294:	2202      	movs	r2, #2
    6296:	0020      	movs	r0, r4
    6298:	f000 f948 	bl	652c <_ZN8SPIFlash9_nextByteEch>
      _transferAddress();
    629c:	0020      	movs	r0, r4
    629e:	f000 f8c9 	bl	6434 <_ZN8SPIFlash16_transferAddressEv>
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    62a2:	2600      	movs	r6, #0
    62a4:	42ae      	cmp	r6, r5
    62a6:	da0c      	bge.n	62c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x17a>
        _nextByte(WRITE, _outCharArray[data_offset + i]);
    62a8:	693a      	ldr	r2, [r7, #16]
    62aa:	68fb      	ldr	r3, [r7, #12]
    62ac:	0020      	movs	r0, r4
    62ae:	189b      	adds	r3, r3, r2
    62b0:	5d9a      	ldrb	r2, [r3, r6]
    62b2:	0023      	movs	r3, r4
    62b4:	332c      	adds	r3, #44	; 0x2c
    62b6:	7819      	ldrb	r1, [r3, #0]
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    62b8:	3601      	adds	r6, #1
        _nextByte(WRITE, _outCharArray[data_offset + i]);
    62ba:	f000 f937 	bl	652c <_ZN8SPIFlash9_nextByteEch>
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    62be:	b2b6      	uxth	r6, r6
    62c0:	e7f0      	b.n	62a4 <_ZN8SPIFlash8writeStrEmR6Stringb+0x15c>
      CHIP_DESELECT
    62c2:	7c20      	ldrb	r0, [r4, #16]
    62c4:	2101      	movs	r1, #1
    62c6:	f7fd fcc7 	bl	3c58 <digitalWrite>
      _currentAddress += writeBufSz;
    62ca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      if(!_notBusy() || !_writeEnable()){
    62cc:	4931      	ldr	r1, [pc, #196]	; (6394 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
      _currentAddress += writeBufSz;
    62ce:	195b      	adds	r3, r3, r5
    62d0:	67a3      	str	r3, [r4, #120]	; 0x78
      data_offset += writeBufSz;
    62d2:	693b      	ldr	r3, [r7, #16]
      if(!_notBusy() || !_writeEnable()){
    62d4:	0020      	movs	r0, r4
      data_offset += writeBufSz;
    62d6:	195b      	adds	r3, r3, r5
    62d8:	b29b      	uxth	r3, r3
    62da:	613b      	str	r3, [r7, #16]
      length -= writeBufSz;
    62dc:	697b      	ldr	r3, [r7, #20]
    62de:	1b5d      	subs	r5, r3, r5
    62e0:	b2ab      	uxth	r3, r5
    62e2:	617b      	str	r3, [r7, #20]
      if(!_notBusy() || !_writeEnable()){
    62e4:	f000 f9b8 	bl	6658 <_ZN8SPIFlash8_notBusyEm>
    62e8:	2800      	cmp	r0, #0
    62ea:	d100      	bne.n	62ee <_ZN8SPIFlash8writeStrEmR6Stringb+0x1a6>
    62ec:	e747      	b.n	617e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    62ee:	2101      	movs	r1, #1
    62f0:	0020      	movs	r0, r4
    62f2:	f000 f9d7 	bl	66a4 <_ZN8SPIFlash12_writeEnableEb>
    62f6:	2800      	cmp	r0, #0
    62f8:	d100      	bne.n	62fc <_ZN8SPIFlash8writeStrEmR6Stringb+0x1b4>
    62fa:	e740      	b.n	617e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
      maxBytes = 256;   // Now we can do up to 256 bytes per loop
    62fc:	2580      	movs	r5, #128	; 0x80
    } while (length > 0);
    62fe:	697b      	ldr	r3, [r7, #20]
      maxBytes = 256;   // Now we can do up to 256 bytes per loop
    6300:	006d      	lsls	r5, r5, #1
    } while (length > 0);
    6302:	2b00      	cmp	r3, #0
    6304:	d1bb      	bne.n	627e <_ZN8SPIFlash8writeStrEmR6Stringb+0x136>
    6306:	e7ac      	b.n	6262 <_ZN8SPIFlash8writeStrEmR6Stringb+0x11a>
    }
    6308:	466b      	mov	r3, sp
    if (!_notBusy()) {
    630a:	4922      	ldr	r1, [pc, #136]	; (6394 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    630c:	0020      	movs	r0, r4
    }
    630e:	617b      	str	r3, [r7, #20]
    if (!_notBusy()) {
    6310:	f000 f9a2 	bl	6658 <_ZN8SPIFlash8_notBusyEm>
    6314:	61b8      	str	r0, [r7, #24]
    6316:	2800      	cmp	r0, #0
    6318:	d038      	beq.n	638c <_ZN8SPIFlash8writeStrEmR6Stringb+0x244>
    char _inCharArray[_sz];
    631a:	466a      	mov	r2, sp
    _currentAddress = (_addr + sizeof(_sz));
    631c:	68bb      	ldr	r3, [r7, #8]
    CHIP_SELECT
    631e:	7c20      	ldrb	r0, [r4, #16]
    _currentAddress = (_addr + sizeof(_sz));
    6320:	67a3      	str	r3, [r4, #120]	; 0x78
    char _inCharArray[_sz];
    6322:	69fb      	ldr	r3, [r7, #28]
    CHIP_SELECT
    6324:	2100      	movs	r1, #0
    char _inCharArray[_sz];
    6326:	3307      	adds	r3, #7
    6328:	08db      	lsrs	r3, r3, #3
    632a:	00db      	lsls	r3, r3, #3
    632c:	1ad3      	subs	r3, r2, r3
    632e:	469d      	mov	sp, r3
    CHIP_SELECT
    6330:	f7fd fc92 	bl	3c58 <digitalWrite>
    _nextByte(WRITE, READDATA);
    6334:	0023      	movs	r3, r4
    6336:	332c      	adds	r3, #44	; 0x2c
    6338:	7819      	ldrb	r1, [r3, #0]
    633a:	2203      	movs	r2, #3
    633c:	0020      	movs	r0, r4
    633e:	f000 f8f5 	bl	652c <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    6342:	0020      	movs	r0, r4
    char _inCharArray[_sz];
    6344:	466e      	mov	r6, sp
    _transferAddress();
    6346:	f000 f875 	bl	6434 <_ZN8SPIFlash16_transferAddressEv>
    for (uint8_t i = 0; i < _sz; i++) {
    634a:	2500      	movs	r5, #0
    634c:	69fb      	ldr	r3, [r7, #28]
    634e:	42ab      	cmp	r3, r5
    6350:	d90a      	bls.n	6368 <_ZN8SPIFlash8writeStrEmR6Stringb+0x220>
      _inCharArray[i] = _nextByte(READ);
    6352:	0023      	movs	r3, r4
    6354:	332b      	adds	r3, #43	; 0x2b
    6356:	7819      	ldrb	r1, [r3, #0]
    6358:	2200      	movs	r2, #0
    635a:	0020      	movs	r0, r4
    635c:	f000 f8e6 	bl	652c <_ZN8SPIFlash9_nextByteEch>
    6360:	5570      	strb	r0, [r6, r5]
    for (uint8_t i = 0; i < _sz; i++) {
    6362:	3501      	adds	r5, #1
    6364:	b2ed      	uxtb	r5, r5
    6366:	e7f1      	b.n	634c <_ZN8SPIFlash8writeStrEmR6Stringb+0x204>
    _endSPI();
    6368:	0020      	movs	r0, r4
    636a:	f000 f955 	bl	6618 <_ZN8SPIFlash7_endSPIEv>
    for (uint8_t i = 0; i < _sz; i++) {
    636e:	2300      	movs	r3, #0
    6370:	69fa      	ldr	r2, [r7, #28]
    6372:	429a      	cmp	r2, r3
    6374:	d907      	bls.n	6386 <_ZN8SPIFlash8writeStrEmR6Stringb+0x23e>
      if (_inCharArray[i] != _outCharArray[i]) {
    6376:	68fa      	ldr	r2, [r7, #12]
    6378:	5cf1      	ldrb	r1, [r6, r3]
    637a:	5cd2      	ldrb	r2, [r2, r3]
    637c:	4291      	cmp	r1, r2
    637e:	d105      	bne.n	638c <_ZN8SPIFlash8writeStrEmR6Stringb+0x244>
    for (uint8_t i = 0; i < _sz; i++) {
    6380:	3301      	adds	r3, #1
    6382:	b2db      	uxtb	r3, r3
    6384:	e7f4      	b.n	6370 <_ZN8SPIFlash8writeStrEmR6Stringb+0x228>
    6386:	697b      	ldr	r3, [r7, #20]
    6388:	469d      	mov	sp, r3
  return true;
    638a:	e770      	b.n	626e <_ZN8SPIFlash8writeStrEmR6Stringb+0x126>
    638c:	697b      	ldr	r3, [r7, #20]
    638e:	469d      	mov	sp, r3
    6390:	e6f5      	b.n	617e <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    6392:	46c0      	nop			; (mov r8, r8)
    6394:	3b9aca00 	.word	0x3b9aca00

00006398 <_ZN8SPIFlash13eraseBlock64KEm>:
}

// Erases one 64k block.
//  Takes an address as the argument and erases the block containing the address.
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
  if (!kb64Erase.supported) {
    6398:	0003      	movs	r3, r0
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
    639a:	b570      	push	{r4, r5, r6, lr}
  if (!kb64Erase.supported) {
    639c:	3354      	adds	r3, #84	; 0x54
    639e:	781d      	ldrb	r5, [r3, #0]
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
    63a0:	0004      	movs	r4, r0
    63a2:	000a      	movs	r2, r1
  if (!kb64Erase.supported) {
    63a4:	2d00      	cmp	r5, #0
    63a6:	d105      	bne.n	63b4 <_ZN8SPIFlash13eraseBlock64KEm+0x1c>
    _troubleshoot(UNSUPPORTEDFUNC);
    63a8:	002a      	movs	r2, r5
    63aa:	210c      	movs	r1, #12
    63ac:	f000 fb14 	bl	69d8 <_ZN8SPIFlash13_troubleshootEhb>
  }
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
	return true;
}
    63b0:	0028      	movs	r0, r5
    63b2:	bd70      	pop	{r4, r5, r6, pc}
  if (!_prep(ERASEFUNC, _addr, KB(64))) {
    63b4:	2380      	movs	r3, #128	; 0x80
    63b6:	21ef      	movs	r1, #239	; 0xef
    63b8:	025b      	lsls	r3, r3, #9
    63ba:	f000 f991 	bl	66e0 <_ZN8SPIFlash5_prepEhmm>
    63be:	1e05      	subs	r5, r0, #0
    63c0:	d0f6      	beq.n	63b0 <_ZN8SPIFlash13eraseBlock64KEm+0x18>
  _beginSPI(kb64Erase.opcode);
    63c2:	0023      	movs	r3, r4
    63c4:	3355      	adds	r3, #85	; 0x55
    63c6:	7819      	ldrb	r1, [r3, #0]
    63c8:	0020      	movs	r0, r4
    63ca:	f000 f85b 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
  _endSPI();
    63ce:	0020      	movs	r0, r4
    63d0:	f000 f922 	bl	6618 <_ZN8SPIFlash7_endSPIEv>
  if(!_notBusy(kb64Erase.time)) {
    63d4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    63d6:	0020      	movs	r0, r4
    63d8:	f000 f93e 	bl	6658 <_ZN8SPIFlash8_notBusyEm>
    63dc:	0005      	movs	r5, r0
    63de:	e7e7      	b.n	63b0 <_ZN8SPIFlash13eraseBlock64KEm+0x18>

000063e0 <_ZN8SPIFlash9_nextByteEch.constprop.8>:
   return true;
 }
 //SPI data lines are left open until _endSPI() is called

 //Reads/Writes next byte. Call 'n' times to read/write 'n' number of bytes. Should be called after _beginSPI()
 uint8_t SPIFlash::_nextByte(char IOType, uint8_t data) {
    63e0:	b510      	push	{r4, lr}
     } rxData, txData;
     txData.val = data;
     spi_transfer(txData.dataBuf, rxData.dataBuf, 1);
     return rxData.val;
   #else
     return xfer(data);
    63e2:	68c0      	ldr	r0, [r0, #12]
    63e4:	f000 fb6c 	bl	6ac0 <_ZN8SPIClass8transferEh>
   #endif
 #else
   return xfer(data);
 #endif
 }
    63e8:	bd10      	pop	{r4, pc}
	...

000063ec <_ZN8SPIFlash13_addressCheckEmm>:
 bool SPIFlash::_addressCheck(uint32_t _addr, uint32_t size) {
    63ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63ee:	000f      	movs	r7, r1
   uint8_t _errorcode = error();
    63f0:	2100      	movs	r1, #0
 bool SPIFlash::_addressCheck(uint32_t _addr, uint32_t size) {
    63f2:	0005      	movs	r5, r0
    63f4:	0016      	movs	r6, r2
   uint8_t _errorcode = error();
    63f6:	f7ff fe77 	bl	60e8 <_ZN8SPIFlash5errorEb>
   if (_errorcode == UNKNOWNCAP || _errorcode == NORESPONSE) {
    63fa:	23f7      	movs	r3, #247	; 0xf7
    63fc:	4003      	ands	r3, r0
     return false;
    63fe:	2000      	movs	r0, #0
   if (_errorcode == UNKNOWNCAP || _errorcode == NORESPONSE) {
    6400:	2b03      	cmp	r3, #3
    6402:	d008      	beq.n	6416 <_ZN8SPIFlash13_addressCheckEmm+0x2a>
 	if (!_chip.capacity) {
    6404:	6bec      	ldr	r4, [r5, #60]	; 0x3c
    6406:	4284      	cmp	r4, r0
    6408:	d106      	bne.n	6418 <_ZN8SPIFlash13_addressCheckEmm+0x2c>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    640a:	4809      	ldr	r0, [pc, #36]	; (6430 <_ZN8SPIFlash13_addressCheckEmm+0x44>)
    640c:	0022      	movs	r2, r4
    640e:	2101      	movs	r1, #1
    6410:	f002 fada 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
    6414:	0020      	movs	r0, r4
 }
    6416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   if (_submittedAddress + size >= _chip.capacity) {
    6418:	19be      	adds	r6, r7, r6
    641a:	42b4      	cmp	r4, r6
    641c:	d804      	bhi.n	6428 <_ZN8SPIFlash13_addressCheckEmm+0x3c>
     _addressOverflow = ((_submittedAddress + size) - _chip.capacity);
    641e:	1b36      	subs	r6, r6, r4
    6420:	67ee      	str	r6, [r5, #124]	; 0x7c
     _currentAddress = _addr;
    6422:	67af      	str	r7, [r5, #120]	; 0x78
     return true;				// Not at end of memory if (address < _chip.capacity)
    6424:	2001      	movs	r0, #1
    6426:	e7f6      	b.n	6416 <_ZN8SPIFlash13_addressCheckEmm+0x2a>
     _addressOverflow = false;
    6428:	2300      	movs	r3, #0
    642a:	67eb      	str	r3, [r5, #124]	; 0x7c
    642c:	e7f9      	b.n	6422 <_ZN8SPIFlash13_addressCheckEmm+0x36>
    642e:	46c0      	nop			; (mov r8, r8)
    6430:	20001a10 	.word	0x20001a10

00006434 <_ZN8SPIFlash16_transferAddressEv>:
 bool SPIFlash::_transferAddress(void) {
    6434:	b510      	push	{r4, lr}
   if (address4ByteEnabled) {
    6436:	7fc3      	ldrb	r3, [r0, #31]
 bool SPIFlash::_transferAddress(void) {
    6438:	0004      	movs	r4, r0
   if (address4ByteEnabled) {
    643a:	2b00      	cmp	r3, #0
    643c:	d004      	beq.n	6448 <_ZN8SPIFlash16_transferAddressEv+0x14>
     _nextByte(WRITE, Highest(_currentAddress));
    643e:	0003      	movs	r3, r0
    6440:	337b      	adds	r3, #123	; 0x7b
    6442:	7819      	ldrb	r1, [r3, #0]
    6444:	f7ff ffcc 	bl	63e0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Higher(_currentAddress));
    6448:	0023      	movs	r3, r4
    644a:	337a      	adds	r3, #122	; 0x7a
    644c:	7819      	ldrb	r1, [r3, #0]
    644e:	0020      	movs	r0, r4
    6450:	f7ff ffc6 	bl	63e0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Hi(_currentAddress));
    6454:	0023      	movs	r3, r4
    6456:	3379      	adds	r3, #121	; 0x79
    6458:	7819      	ldrb	r1, [r3, #0]
    645a:	0020      	movs	r0, r4
    645c:	f7ff ffc0 	bl	63e0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Lo(_currentAddress));
    6460:	0023      	movs	r3, r4
    6462:	3378      	adds	r3, #120	; 0x78
    6464:	7819      	ldrb	r1, [r3, #0]
    6466:	0020      	movs	r0, r4
    6468:	f7ff ffba 	bl	63e0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
 }
    646c:	2001      	movs	r0, #1
    646e:	bd10      	pop	{r4, pc}

00006470 <_ZN8SPIFlash12_startSPIBusEv>:
 bool SPIFlash::_startSPIBus(void) {
    6470:	b510      	push	{r4, lr}
       _spi->beginTransaction(_settings);
    6472:	6801      	ldr	r1, [r0, #0]
 bool SPIFlash::_startSPIBus(void) {
    6474:	0004      	movs	r4, r0
       _spi->beginTransaction(_settings);
    6476:	6842      	ldr	r2, [r0, #4]
    6478:	68c0      	ldr	r0, [r0, #12]
    647a:	f000 faf1 	bl	6a60 <_ZN8SPIClass16beginTransactionE11SPISettings>
   SPIBusState = true;
    647e:	2001      	movs	r0, #1
    6480:	7760      	strb	r0, [r4, #29]
 }
    6482:	bd10      	pop	{r4, pc}

00006484 <_ZN8SPIFlash9_beginSPIEh>:
 bool SPIFlash::_beginSPI(uint8_t opcode) {
    6484:	b570      	push	{r4, r5, r6, lr}
   if (!SPIBusState) {
    6486:	7f43      	ldrb	r3, [r0, #29]
 bool SPIFlash::_beginSPI(uint8_t opcode) {
    6488:	0004      	movs	r4, r0
    648a:	000d      	movs	r5, r1
   if (!SPIBusState) {
    648c:	2b00      	cmp	r3, #0
    648e:	d101      	bne.n	6494 <_ZN8SPIFlash9_beginSPIEh+0x10>
     _startSPIBus();
    6490:	f7ff ffee 	bl	6470 <_ZN8SPIFlash12_startSPIBusEv>
   CHIP_SELECT
    6494:	7c20      	ldrb	r0, [r4, #16]
    6496:	2100      	movs	r1, #0
    6498:	f7fd fbde 	bl	3c58 <digitalWrite>
   switch (opcode) {
    649c:	2d0b      	cmp	r5, #11
    649e:	d015      	beq.n	64cc <_ZN8SPIFlash9_beginSPIEh+0x48>
    64a0:	d805      	bhi.n	64ae <_ZN8SPIFlash9_beginSPIEh+0x2a>
    64a2:	2d02      	cmp	r5, #2
    64a4:	d009      	beq.n	64ba <_ZN8SPIFlash9_beginSPIEh+0x36>
    64a6:	2d03      	cmp	r5, #3
    64a8:	d007      	beq.n	64ba <_ZN8SPIFlash9_beginSPIEh+0x36>
     _nextByte(WRITE, opcode);
    64aa:	0029      	movs	r1, r5
    64ac:	e016      	b.n	64dc <_ZN8SPIFlash9_beginSPIEh+0x58>
   switch (opcode) {
    64ae:	2d52      	cmp	r5, #82	; 0x52
    64b0:	d003      	beq.n	64ba <_ZN8SPIFlash9_beginSPIEh+0x36>
    64b2:	2dd8      	cmp	r5, #216	; 0xd8
    64b4:	d001      	beq.n	64ba <_ZN8SPIFlash9_beginSPIEh+0x36>
    64b6:	2d20      	cmp	r5, #32
    64b8:	d1f7      	bne.n	64aa <_ZN8SPIFlash9_beginSPIEh+0x26>
     _nextByte(WRITE, opcode);
    64ba:	0029      	movs	r1, r5
    64bc:	0020      	movs	r0, r4
    64be:	f7ff ff8f 	bl	63e0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     _transferAddress();
    64c2:	0020      	movs	r0, r4
    64c4:	f7ff ffb6 	bl	6434 <_ZN8SPIFlash16_transferAddressEv>
 }
    64c8:	2001      	movs	r0, #1
    64ca:	bd70      	pop	{r4, r5, r6, pc}
     _nextByte(WRITE, opcode);
    64cc:	0029      	movs	r1, r5
    64ce:	0020      	movs	r0, r4
    64d0:	f7ff ff86 	bl	63e0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     _transferAddress();
    64d4:	0020      	movs	r0, r4
    64d6:	f7ff ffad 	bl	6434 <_ZN8SPIFlash16_transferAddressEv>
     _nextByte(WRITE, DUMMYBYTE);
    64da:	21ee      	movs	r1, #238	; 0xee
     _nextByte(WRITE, opcode);
    64dc:	0020      	movs	r0, r4
    64de:	f7ff ff7f 	bl	63e0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     break;
    64e2:	e7f1      	b.n	64c8 <_ZN8SPIFlash9_beginSPIEh+0x44>

000064e4 <_ZN8SPIFlash15_notPrevWrittenEmm>:
 bool SPIFlash::_notPrevWritten(uint32_t _addr, uint32_t size) {
    64e4:	b570      	push	{r4, r5, r6, lr}
   _beginSPI(READDATA);
    64e6:	2103      	movs	r1, #3
 bool SPIFlash::_notPrevWritten(uint32_t _addr, uint32_t size) {
    64e8:	0004      	movs	r4, r0
    64ea:	0016      	movs	r6, r2
   for (uint32_t i = 0; i < size; i++) {
    64ec:	2500      	movs	r5, #0
   _beginSPI(READDATA);
    64ee:	f7ff ffc9 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
   for (uint32_t i = 0; i < size; i++) {
    64f2:	42b5      	cmp	r5, r6
    64f4:	d012      	beq.n	651c <_ZN8SPIFlash15_notPrevWrittenEmm+0x38>
     return xfer(data);
    64f6:	2100      	movs	r1, #0
    64f8:	68e0      	ldr	r0, [r4, #12]
    64fa:	f000 fae1 	bl	6ac0 <_ZN8SPIClass8transferEh>
     if (_nextByte(READ) != 0xFF) {
    64fe:	28ff      	cmp	r0, #255	; 0xff
    6500:	d00a      	beq.n	6518 <_ZN8SPIFlash15_notPrevWrittenEmm+0x34>
       CHIP_DESELECT;
    6502:	7c20      	ldrb	r0, [r4, #16]
    6504:	2101      	movs	r1, #1
    6506:	f7fd fba7 	bl	3c58 <digitalWrite>
   diagnostics.troubleshoot(_code, printoverride);
    650a:	4807      	ldr	r0, [pc, #28]	; (6528 <_ZN8SPIFlash15_notPrevWrittenEmm+0x44>)
    650c:	2200      	movs	r2, #0
    650e:	2107      	movs	r1, #7
    6510:	f002 fa5a 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
    6514:	2000      	movs	r0, #0
 }
    6516:	bd70      	pop	{r4, r5, r6, pc}
   for (uint32_t i = 0; i < size; i++) {
    6518:	3501      	adds	r5, #1
    651a:	e7ea      	b.n	64f2 <_ZN8SPIFlash15_notPrevWrittenEmm+0xe>
   CHIP_DESELECT
    651c:	7c20      	ldrb	r0, [r4, #16]
    651e:	2101      	movs	r1, #1
    6520:	f7fd fb9a 	bl	3c58 <digitalWrite>
   return true;
    6524:	2001      	movs	r0, #1
    6526:	e7f6      	b.n	6516 <_ZN8SPIFlash15_notPrevWrittenEmm+0x32>
    6528:	20001a10 	.word	0x20001a10

0000652c <_ZN8SPIFlash9_nextByteEch>:
 uint8_t SPIFlash::_nextByte(char IOType, uint8_t data) {
    652c:	b510      	push	{r4, lr}
     return xfer(data);
    652e:	0011      	movs	r1, r2
    6530:	68c0      	ldr	r0, [r0, #12]
    6532:	f000 fac5 	bl	6ac0 <_ZN8SPIClass8transferEh>
 }
    6536:	bd10      	pop	{r4, pc}

00006538 <_ZN8SPIFlash8_nextBufEhPhm>:
 void SPIFlash::_nextBuf(uint8_t opcode, uint8_t *data_buffer, uint32_t size) {
    6538:	b510      	push	{r4, lr}
    653a:	000c      	movs	r4, r1
    653c:	0011      	movs	r1, r2
    653e:	001a      	movs	r2, r3
   switch (opcode) {
    6540:	2c02      	cmp	r4, #2
    6542:	d001      	beq.n	6548 <_ZN8SPIFlash8_nextBufEhPhm+0x10>
    6544:	2c03      	cmp	r4, #3
    6546:	d102      	bne.n	654e <_ZN8SPIFlash8_nextBufEhPhm+0x16>
         _spi->transfer(&data_buffer[0], size);
    6548:	68c0      	ldr	r0, [r0, #12]
    654a:	f000 fabe 	bl	6aca <_ZN8SPIClass8transferEPvj>
 }
    654e:	bd10      	pop	{r4, pc}

00006550 <_ZN8SPIFlash10_readStat1Ev>:
 uint8_t SPIFlash::_readStat1(void) {
    6550:	b570      	push	{r4, r5, r6, lr}
    6552:	0004      	movs	r4, r0
   _beginSPI(READSTAT1);
    6554:	2105      	movs	r1, #5
    6556:	f7ff ff95 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
     return xfer(data);
    655a:	2100      	movs	r1, #0
    655c:	68e0      	ldr	r0, [r4, #12]
    655e:	f000 faaf 	bl	6ac0 <_ZN8SPIClass8transferEh>
   stat1 = _nextByte(READ);
    6562:	1d25      	adds	r5, r4, #4
    6564:	77e8      	strb	r0, [r5, #31]
   CHIP_DESELECT
    6566:	7c20      	ldrb	r0, [r4, #16]
    6568:	2101      	movs	r1, #1
    656a:	f7fd fb75 	bl	3c58 <digitalWrite>
   return stat1;
    656e:	7fe8      	ldrb	r0, [r5, #31]
 }
    6570:	bd70      	pop	{r4, r5, r6, pc}

00006572 <_ZN8SPIFlash10_readStat3Ev>:
 uint8_t SPIFlash::_readStat3(void) {
    6572:	b570      	push	{r4, r5, r6, lr}
    6574:	0004      	movs	r4, r0
   _beginSPI(READSTAT3);
    6576:	2115      	movs	r1, #21
    6578:	f7ff ff84 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
     return xfer(data);
    657c:	2100      	movs	r1, #0
    657e:	68e0      	ldr	r0, [r4, #12]
    6580:	f000 fa9e 	bl	6ac0 <_ZN8SPIClass8transferEh>
   stat3 = _nextByte(READ);
    6584:	1da5      	adds	r5, r4, #6
    6586:	77e8      	strb	r0, [r5, #31]
   CHIP_DESELECT
    6588:	7c20      	ldrb	r0, [r4, #16]
    658a:	2101      	movs	r1, #1
    658c:	f7fd fb64 	bl	3c58 <digitalWrite>
   return stat3;
    6590:	7fe8      	ldrb	r0, [r5, #31]
 }
    6592:	bd70      	pop	{r4, r5, r6, pc}

00006594 <_ZN8SPIFlash22_enable4ByteAddressingEv>:
 bool SPIFlash::_enable4ByteAddressing(void) {
    6594:	b570      	push	{r4, r5, r6, lr}
    6596:	0006      	movs	r6, r0
     return true;
    6598:	2401      	movs	r4, #1
   if (_readStat3() & ADS) {
    659a:	f7ff ffea 	bl	6572 <_ZN8SPIFlash10_readStat3Ev>
    659e:	4220      	tst	r0, r4
    65a0:	d10e      	bne.n	65c0 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x2c>
   _beginSPI(ADDR4BYTE_EN);
    65a2:	21b7      	movs	r1, #183	; 0xb7
    65a4:	0030      	movs	r0, r6
    65a6:	f7ff ff6d 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    65aa:	7c30      	ldrb	r0, [r6, #16]
    65ac:	0021      	movs	r1, r4
    65ae:	f7fd fb53 	bl	3c58 <digitalWrite>
   if (_readStat3() & ADS) {
    65b2:	0030      	movs	r0, r6
    65b4:	f7ff ffdd 	bl	6572 <_ZN8SPIFlash10_readStat3Ev>
    65b8:	4020      	ands	r0, r4
    65ba:	1e05      	subs	r5, r0, #0
    65bc:	d002      	beq.n	65c4 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x30>
     address4ByteEnabled = true;
    65be:	77f4      	strb	r4, [r6, #31]
 }
    65c0:	0020      	movs	r0, r4
    65c2:	bd70      	pop	{r4, r5, r6, pc}
   diagnostics.troubleshoot(_code, printoverride);
    65c4:	0002      	movs	r2, r0
    65c6:	210d      	movs	r1, #13
    65c8:	4802      	ldr	r0, [pc, #8]	; (65d4 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x40>)
    65ca:	f002 f9fd 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
    65ce:	002c      	movs	r4, r5
    65d0:	e7f6      	b.n	65c0 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x2c>
    65d2:	46c0      	nop			; (mov r8, r8)
    65d4:	20001a10 	.word	0x20001a10

000065d8 <_ZN8SPIFlash23_disable4ByteAddressingEv>:
 bool SPIFlash::_disable4ByteAddressing(void) {
    65d8:	b570      	push	{r4, r5, r6, lr}
    65da:	0005      	movs	r5, r0
     return true;
    65dc:	2401      	movs	r4, #1
   if (!(_readStat3() & ADS)) {      // If 4 byte addressing is disabled (default state)
    65de:	f7ff ffc8 	bl	6572 <_ZN8SPIFlash10_readStat3Ev>
    65e2:	4220      	tst	r0, r4
    65e4:	d012      	beq.n	660c <_ZN8SPIFlash23_disable4ByteAddressingEv+0x34>
   _beginSPI(ADDR4BYTE_DIS);
    65e6:	21e9      	movs	r1, #233	; 0xe9
    65e8:	0028      	movs	r0, r5
    65ea:	f7ff ff4b 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    65ee:	7c28      	ldrb	r0, [r5, #16]
    65f0:	0021      	movs	r1, r4
    65f2:	f7fd fb31 	bl	3c58 <digitalWrite>
   if (_readStat3() & ADS) {
    65f6:	0028      	movs	r0, r5
    65f8:	f7ff ffbb 	bl	6572 <_ZN8SPIFlash10_readStat3Ev>
    65fc:	4020      	ands	r0, r4
    65fe:	d007      	beq.n	6610 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x38>
   diagnostics.troubleshoot(_code, printoverride);
    6600:	2200      	movs	r2, #0
    6602:	210e      	movs	r1, #14
    6604:	4803      	ldr	r0, [pc, #12]	; (6614 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x3c>)
    6606:	f002 f9df 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
    660a:	2400      	movs	r4, #0
 }
    660c:	0020      	movs	r0, r4
    660e:	bd70      	pop	{r4, r5, r6, pc}
   address4ByteEnabled = false;
    6610:	77e8      	strb	r0, [r5, #31]
   return true;
    6612:	e7fb      	b.n	660c <_ZN8SPIFlash23_disable4ByteAddressingEv+0x34>
    6614:	20001a10 	.word	0x20001a10

00006618 <_ZN8SPIFlash7_endSPIEv>:
 void SPIFlash::_endSPI(void) {
    6618:	b510      	push	{r4, lr}
    661a:	0004      	movs	r4, r0
   CHIP_DESELECT
    661c:	2101      	movs	r1, #1
    661e:	7c00      	ldrb	r0, [r0, #16]
    6620:	f7fd fb1a 	bl	3c58 <digitalWrite>
   if (address4ByteEnabled) {          // If the previous operation enabled 4-byte addressing, disable it
    6624:	7fe3      	ldrb	r3, [r4, #31]
    6626:	2b00      	cmp	r3, #0
    6628:	d002      	beq.n	6630 <_ZN8SPIFlash7_endSPIEv+0x18>
     _disable4ByteAddressing();
    662a:	0020      	movs	r0, r4
    662c:	f7ff ffd4 	bl	65d8 <_ZN8SPIFlash23_disable4ByteAddressingEv>
     _spi->endTransaction();
    6630:	68e0      	ldr	r0, [r4, #12]
    6632:	f000 fa31 	bl	6a98 <_ZN8SPIClass14endTransactionEv>
   SPIBusState = false;
    6636:	2300      	movs	r3, #0
    6638:	7763      	strb	r3, [r4, #29]
 }
    663a:	bd10      	pop	{r4, pc}

0000663c <_ZN8SPIFlash18_isChipPoweredDownEv>:
 bool SPIFlash::_isChipPoweredDown(void) {
    663c:	b510      	push	{r4, lr}
   if (chipPoweredDown) {
    663e:	7f84      	ldrb	r4, [r0, #30]
    6640:	2c00      	cmp	r4, #0
    6642:	d004      	beq.n	664e <_ZN8SPIFlash18_isChipPoweredDownEv+0x12>
   diagnostics.troubleshoot(_code, printoverride);
    6644:	2200      	movs	r2, #0
    6646:	210f      	movs	r1, #15
    6648:	4802      	ldr	r0, [pc, #8]	; (6654 <_ZN8SPIFlash18_isChipPoweredDownEv+0x18>)
    664a:	f002 f9bd 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
 }
    664e:	0020      	movs	r0, r4
    6650:	bd10      	pop	{r4, pc}
    6652:	46c0      	nop			; (mov r8, r8)
    6654:	20001a10 	.word	0x20001a10

00006658 <_ZN8SPIFlash8_notBusyEm>:
 bool SPIFlash::_notBusy(uint32_t timeout) {
    6658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    665a:	0006      	movs	r6, r0
    665c:	000c      	movs	r4, r1
    665e:	2320      	movs	r3, #32
    6660:	3b01      	subs	r3, #1
    6662:	d1fd      	bne.n	6660 <_ZN8SPIFlash8_notBusyEm+0x8>
   uint32_t _time = micros();
    6664:	f7fc f80c 	bl	2680 <micros>
     if (!(stat1 & BUSY))
    6668:	2701      	movs	r7, #1
   uint32_t _time = micros();
    666a:	0005      	movs	r5, r0
     _readStat1();
    666c:	0030      	movs	r0, r6
    666e:	f7ff ff6f 	bl	6550 <_ZN8SPIFlash10_readStat1Ev>
     if (!(stat1 & BUSY))
    6672:	1d33      	adds	r3, r6, #4
    6674:	7fdb      	ldrb	r3, [r3, #31]
    6676:	423b      	tst	r3, r7
    6678:	d101      	bne.n	667e <_ZN8SPIFlash8_notBusyEm+0x26>
       return true;
    667a:	2001      	movs	r0, #1
 }
    667c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   } while ((micros() - _time) < timeout);
    667e:	f7fb ffff 	bl	2680 <micros>
    6682:	1b40      	subs	r0, r0, r5
   do {
    6684:	42a0      	cmp	r0, r4
    6686:	d3f1      	bcc.n	666c <_ZN8SPIFlash8_notBusyEm+0x14>
   if (timeout <= (micros() - _time)) {
    6688:	f7fb fffa 	bl	2680 <micros>
    668c:	1b40      	subs	r0, r0, r5
    668e:	4284      	cmp	r4, r0
    6690:	d8f3      	bhi.n	667a <_ZN8SPIFlash8_notBusyEm+0x22>
   diagnostics.troubleshoot(_code, printoverride);
    6692:	4803      	ldr	r0, [pc, #12]	; (66a0 <_ZN8SPIFlash8_notBusyEm+0x48>)
    6694:	2200      	movs	r2, #0
    6696:	2104      	movs	r1, #4
    6698:	f002 f996 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
    669c:	2000      	movs	r0, #0
    669e:	e7ed      	b.n	667c <_ZN8SPIFlash8_notBusyEm+0x24>
    66a0:	20001a10 	.word	0x20001a10

000066a4 <_ZN8SPIFlash12_writeEnableEb>:
 bool SPIFlash::_writeEnable(bool _troubleshootEnable) {
    66a4:	b570      	push	{r4, r5, r6, lr}
    66a6:	0004      	movs	r4, r0
    66a8:	000d      	movs	r5, r1
   _beginSPI(WRITEENABLE);
    66aa:	2106      	movs	r1, #6
    66ac:	f7ff feea 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    66b0:	7c20      	ldrb	r0, [r4, #16]
    66b2:	2101      	movs	r1, #1
    66b4:	f7fd fad0 	bl	3c58 <digitalWrite>
   if (!(_readStat1() & WRTEN)) {
    66b8:	0020      	movs	r0, r4
    66ba:	f7ff ff49 	bl	6550 <_ZN8SPIFlash10_readStat1Ev>
    66be:	2402      	movs	r4, #2
    66c0:	4004      	ands	r4, r0
    66c2:	d109      	bne.n	66d8 <_ZN8SPIFlash12_writeEnableEb+0x34>
     if (_troubleshootEnable) {
    66c4:	2d00      	cmp	r5, #0
    66c6:	d005      	beq.n	66d4 <_ZN8SPIFlash12_writeEnableEb+0x30>
   diagnostics.troubleshoot(_code, printoverride);
    66c8:	0022      	movs	r2, r4
    66ca:	2106      	movs	r1, #6
    66cc:	4803      	ldr	r0, [pc, #12]	; (66dc <_ZN8SPIFlash12_writeEnableEb+0x38>)
    66ce:	f002 f97b 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
    66d2:	0025      	movs	r5, r4
 }
    66d4:	0028      	movs	r0, r5
    66d6:	bd70      	pop	{r4, r5, r6, pc}
   return true;
    66d8:	2501      	movs	r5, #1
    66da:	e7fb      	b.n	66d4 <_ZN8SPIFlash12_writeEnableEb+0x30>
    66dc:	20001a10 	.word	0x20001a10

000066e0 <_ZN8SPIFlash5_prepEhmm>:
 bool SPIFlash::_prep(uint8_t opcode, uint32_t _addr, uint32_t size) {
    66e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66e2:	001e      	movs	r6, r3
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    66e4:	0003      	movs	r3, r0
    66e6:	3337      	adds	r3, #55	; 0x37
    66e8:	781b      	ldrb	r3, [r3, #0]
 bool SPIFlash::_prep(uint8_t opcode, uint32_t _addr, uint32_t size) {
    66ea:	0004      	movs	r4, r0
    66ec:	000f      	movs	r7, r1
    66ee:	0015      	movs	r5, r2
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    66f0:	2bef      	cmp	r3, #239	; 0xef
    66f2:	d014      	beq.n	671e <_ZN8SPIFlash5_prepEhmm+0x3e>
   switch (opcode) {
    66f4:	2f02      	cmp	r7, #2
    66f6:	d01b      	beq.n	6730 <_ZN8SPIFlash5_prepEhmm+0x50>
    66f8:	2fef      	cmp	r7, #239	; 0xef
    66fa:	d037      	beq.n	676c <_ZN8SPIFlash5_prepEhmm+0x8c>
       if (_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notBusy()) {
    66fc:	0020      	movs	r0, r4
    66fe:	f7ff ff9d 	bl	663c <_ZN8SPIFlash18_isChipPoweredDownEv>
    6702:	2800      	cmp	r0, #0
    6704:	d112      	bne.n	672c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6706:	0032      	movs	r2, r6
    6708:	0029      	movs	r1, r5
    670a:	0020      	movs	r0, r4
    670c:	f7ff fe6e 	bl	63ec <_ZN8SPIFlash13_addressCheckEmm>
    6710:	2800      	cmp	r0, #0
    6712:	d00b      	beq.n	672c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6714:	491b      	ldr	r1, [pc, #108]	; (6784 <_ZN8SPIFlash5_prepEhmm+0xa4>)
    6716:	0020      	movs	r0, r4
    6718:	f7ff ff9e 	bl	6658 <_ZN8SPIFlash8_notBusyEm>
    671c:	e007      	b.n	672e <_ZN8SPIFlash5_prepEhmm+0x4e>
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    671e:	4b1a      	ldr	r3, [pc, #104]	; (6788 <_ZN8SPIFlash5_prepEhmm+0xa8>)
    6720:	429a      	cmp	r2, r3
    6722:	d9e7      	bls.n	66f4 <_ZN8SPIFlash5_prepEhmm+0x14>
     if (!_enable4ByteAddressing()) {    // If unable to enable 4-byte addressing
    6724:	f7ff ff36 	bl	6594 <_ZN8SPIFlash22_enable4ByteAddressingEv>
    6728:	2800      	cmp	r0, #0
    672a:	d1e3      	bne.n	66f4 <_ZN8SPIFlash5_prepEhmm+0x14>
       return false;
    672c:	2000      	movs	r0, #0
 }
    672e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       if(_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notPrevWritten(_addr, size) || !_notBusy() || !_writeEnable()) {
    6730:	0020      	movs	r0, r4
    6732:	f7ff ff83 	bl	663c <_ZN8SPIFlash18_isChipPoweredDownEv>
    6736:	2800      	cmp	r0, #0
    6738:	d1f8      	bne.n	672c <_ZN8SPIFlash5_prepEhmm+0x4c>
    673a:	0032      	movs	r2, r6
    673c:	0029      	movs	r1, r5
    673e:	0020      	movs	r0, r4
    6740:	f7ff fe54 	bl	63ec <_ZN8SPIFlash13_addressCheckEmm>
    6744:	2800      	cmp	r0, #0
    6746:	d0f1      	beq.n	672c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6748:	0032      	movs	r2, r6
    674a:	0029      	movs	r1, r5
    674c:	0020      	movs	r0, r4
    674e:	f7ff fec9 	bl	64e4 <_ZN8SPIFlash15_notPrevWrittenEmm>
     if(_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notBusy() || !_writeEnable()) {
    6752:	2800      	cmp	r0, #0
    6754:	d0ea      	beq.n	672c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6756:	490b      	ldr	r1, [pc, #44]	; (6784 <_ZN8SPIFlash5_prepEhmm+0xa4>)
    6758:	0020      	movs	r0, r4
    675a:	f7ff ff7d 	bl	6658 <_ZN8SPIFlash8_notBusyEm>
    675e:	2800      	cmp	r0, #0
    6760:	d0e4      	beq.n	672c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6762:	2101      	movs	r1, #1
    6764:	0020      	movs	r0, r4
    6766:	f7ff ff9d 	bl	66a4 <_ZN8SPIFlash12_writeEnableEb>
    676a:	e7e0      	b.n	672e <_ZN8SPIFlash5_prepEhmm+0x4e>
    676c:	0020      	movs	r0, r4
    676e:	f7ff ff65 	bl	663c <_ZN8SPIFlash18_isChipPoweredDownEv>
    6772:	2800      	cmp	r0, #0
    6774:	d1da      	bne.n	672c <_ZN8SPIFlash5_prepEhmm+0x4c>
    6776:	0032      	movs	r2, r6
    6778:	0029      	movs	r1, r5
    677a:	0020      	movs	r0, r4
    677c:	f7ff fe36 	bl	63ec <_ZN8SPIFlash13_addressCheckEmm>
    6780:	e7e7      	b.n	6752 <_ZN8SPIFlash5_prepEhmm+0x72>
    6782:	46c0      	nop			; (mov r8, r8)
    6784:	3b9aca00 	.word	0x3b9aca00
    6788:	00ffffff 	.word	0x00ffffff

0000678c <_ZN8SPIFlash13_writeDisableEv>:
 bool SPIFlash::_writeDisable(void) {
    678c:	b510      	push	{r4, lr}
    678e:	0004      	movs	r4, r0
 	_beginSPI(WRITEDISABLE);
    6790:	2104      	movs	r1, #4
    6792:	f7ff fe77 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    6796:	7c20      	ldrb	r0, [r4, #16]
    6798:	2101      	movs	r1, #1
    679a:	f7fd fa5d 	bl	3c58 <digitalWrite>
 }
    679e:	2001      	movs	r0, #1
    67a0:	bd10      	pop	{r4, pc}
	...

000067a4 <_ZN8SPIFlash11_getJedecIdEv>:
 bool SPIFlash::_getJedecId(void) {
    67a4:	b570      	push	{r4, r5, r6, lr}
   if(!_notBusy()) {
    67a6:	4917      	ldr	r1, [pc, #92]	; (6804 <_ZN8SPIFlash11_getJedecIdEv+0x60>)
 bool SPIFlash::_getJedecId(void) {
    67a8:	0004      	movs	r4, r0
   if(!_notBusy()) {
    67aa:	f7ff ff55 	bl	6658 <_ZN8SPIFlash8_notBusyEm>
    67ae:	1e05      	subs	r5, r0, #0
    67b0:	d025      	beq.n	67fe <_ZN8SPIFlash11_getJedecIdEv+0x5a>
   _beginSPI(JEDECID);
    67b2:	219f      	movs	r1, #159	; 0x9f
    67b4:	0020      	movs	r0, r4
    67b6:	f7ff fe65 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    67ba:	0026      	movs	r6, r4
     return xfer(data);
    67bc:	2100      	movs	r1, #0
    67be:	68e0      	ldr	r0, [r4, #12]
    67c0:	f000 f97e 	bl	6ac0 <_ZN8SPIClass8transferEh>
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    67c4:	3637      	adds	r6, #55	; 0x37
    67c6:	7030      	strb	r0, [r6, #0]
     return xfer(data);
    67c8:	2100      	movs	r1, #0
    67ca:	68e0      	ldr	r0, [r4, #12]
    67cc:	f000 f978 	bl	6ac0 <_ZN8SPIClass8transferEh>
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
    67d0:	0023      	movs	r3, r4
    67d2:	3338      	adds	r3, #56	; 0x38
    67d4:	7018      	strb	r0, [r3, #0]
     return xfer(data);
    67d6:	2100      	movs	r1, #0
    67d8:	68e0      	ldr	r0, [r4, #12]
    67da:	f000 f971 	bl	6ac0 <_ZN8SPIClass8transferEh>
 	_chip.capacityID = _nextByte(READ);		// capacity
    67de:	0023      	movs	r3, r4
    67e0:	3339      	adds	r3, #57	; 0x39
    67e2:	7018      	strb	r0, [r3, #0]
   CHIP_DESELECT
    67e4:	7c20      	ldrb	r0, [r4, #16]
    67e6:	2101      	movs	r1, #1
    67e8:	f7fd fa36 	bl	3c58 <digitalWrite>
   if (!_chip.manufacturerID) {
    67ec:	7834      	ldrb	r4, [r6, #0]
    67ee:	2c00      	cmp	r4, #0
    67f0:	d105      	bne.n	67fe <_ZN8SPIFlash11_getJedecIdEv+0x5a>
   diagnostics.troubleshoot(_code, printoverride);
    67f2:	0022      	movs	r2, r4
    67f4:	210b      	movs	r1, #11
    67f6:	4804      	ldr	r0, [pc, #16]	; (6808 <_ZN8SPIFlash11_getJedecIdEv+0x64>)
    67f8:	f002 f8e6 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
    67fc:	0025      	movs	r5, r4
 }
    67fe:	0028      	movs	r0, r5
    6800:	bd70      	pop	{r4, r5, r6, pc}
    6802:	46c0      	nop			; (mov r8, r8)
    6804:	3b9aca00 	.word	0x3b9aca00
    6808:	20001a10 	.word	0x20001a10

0000680c <_ZN8SPIFlash26_disableGlobalBlockProtectEv>:
   if (_chip.memoryTypeID == SST25) {
    680c:	0003      	movs	r3, r0
 bool SPIFlash::_disableGlobalBlockProtect(void) {
    680e:	b570      	push	{r4, r5, r6, lr}
   if (_chip.memoryTypeID == SST25) {
    6810:	3338      	adds	r3, #56	; 0x38
    6812:	781b      	ldrb	r3, [r3, #0]
 bool SPIFlash::_disableGlobalBlockProtect(void) {
    6814:	0004      	movs	r4, r0
   if (_chip.memoryTypeID == SST25) {
    6816:	2b25      	cmp	r3, #37	; 0x25
    6818:	d11c      	bne.n	6854 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x48>
     _readStat1();
    681a:	f7ff fe99 	bl	6550 <_ZN8SPIFlash10_readStat1Ev>
     uint8_t _tempStat1 = stat1 & 0xC3;
    681e:	1d23      	adds	r3, r4, #4
    6820:	7fdd      	ldrb	r5, [r3, #31]
    6822:	233c      	movs	r3, #60	; 0x3c
     _beginSPI(WRITESTATEN);
    6824:	2150      	movs	r1, #80	; 0x50
    6826:	0020      	movs	r0, r4
     uint8_t _tempStat1 = stat1 & 0xC3;
    6828:	439d      	bics	r5, r3
     _beginSPI(WRITESTATEN);
    682a:	f7ff fe2b 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    682e:	7c20      	ldrb	r0, [r4, #16]
    6830:	2101      	movs	r1, #1
    6832:	f7fd fa11 	bl	3c58 <digitalWrite>
     _beginSPI(WRITESTAT1);
    6836:	2101      	movs	r1, #1
    6838:	0020      	movs	r0, r4
    683a:	f7ff fe23 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
     _nextByte(WRITE, _tempStat1);
    683e:	0029      	movs	r1, r5
    6840:	0020      	movs	r0, r4
    6842:	f7ff fdcd 	bl	63e0 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     CHIP_DESELECT
    6846:	7c20      	ldrb	r0, [r4, #16]
    6848:	2101      	movs	r1, #1
    684a:	f7fd fa05 	bl	3c58 <digitalWrite>
   return true;
    684e:	2501      	movs	r5, #1
 }
    6850:	0028      	movs	r0, r5
    6852:	bd70      	pop	{r4, r5, r6, pc}
   return true;
    6854:	2501      	movs	r5, #1
   else if (_chip.memoryTypeID == SST26) {
    6856:	2b26      	cmp	r3, #38	; 0x26
    6858:	d1fa      	bne.n	6850 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
     if(!_notBusy()) {
    685a:	490e      	ldr	r1, [pc, #56]	; (6894 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x88>)
    685c:	f7ff fefc 	bl	6658 <_ZN8SPIFlash8_notBusyEm>
    6860:	1e05      	subs	r5, r0, #0
    6862:	d0f5      	beq.n	6850 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
     _writeEnable();
    6864:	2101      	movs	r1, #1
    6866:	0020      	movs	r0, r4
    6868:	f7ff ff1c 	bl	66a4 <_ZN8SPIFlash12_writeEnableEb>
    686c:	23a0      	movs	r3, #160	; 0xa0
    686e:	3b01      	subs	r3, #1
    6870:	d1fd      	bne.n	686e <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x62>
     _beginSPI(ULBPR);
    6872:	2198      	movs	r1, #152	; 0x98
    6874:	0020      	movs	r0, r4
    6876:	f7ff fe05 	bl	6484 <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    687a:	7c20      	ldrb	r0, [r4, #16]
    687c:	2101      	movs	r1, #1
    687e:	f7fd f9eb 	bl	3c58 <digitalWrite>
    6882:	23c8      	movs	r3, #200	; 0xc8
    6884:	009b      	lsls	r3, r3, #2
    6886:	3b01      	subs	r3, #1
    6888:	d1fd      	bne.n	6886 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x7a>
     _writeDisable();
    688a:	0020      	movs	r0, r4
    688c:	f7ff ff7e 	bl	678c <_ZN8SPIFlash13_writeDisableEv>
    6890:	e7de      	b.n	6850 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
    6892:	46c0      	nop			; (mov r8, r8)
    6894:	3b9aca00 	.word	0x3b9aca00

00006898 <_ZN8SPIFlash7_chipIDEm>:
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    6898:	0002      	movs	r2, r0
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    689a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    689c:	2301      	movs	r3, #1
    689e:	3264      	adds	r2, #100	; 0x64
    68a0:	7013      	strb	r3, [r2, #0]
    68a2:	3a10      	subs	r2, #16
    68a4:	7013      	strb	r3, [r2, #0]
    68a6:	3a08      	subs	r2, #8
    68a8:	7013      	strb	r3, [r2, #0]
    68aa:	3a08      	subs	r2, #8
    68ac:	7013      	strb	r3, [r2, #0]
   kb4Erase.opcode = SECTORERASE;
    68ae:	0003      	movs	r3, r0
    68b0:	2220      	movs	r2, #32
    68b2:	3345      	adds	r3, #69	; 0x45
    68b4:	701a      	strb	r2, [r3, #0]
   kb32Erase.opcode = BLOCK32ERASE;
    68b6:	3232      	adds	r2, #50	; 0x32
    68b8:	721a      	strb	r2, [r3, #8]
   kb64Erase.opcode = BLOCK64ERASE;
    68ba:	3286      	adds	r2, #134	; 0x86
    68bc:	741a      	strb	r2, [r3, #16]
   kb4Erase.time = BUSY_TIMEOUT;
    68be:	4b41      	ldr	r3, [pc, #260]	; (69c4 <_ZN8SPIFlash7_chipIDEm+0x12c>)
   kb256Erase.supported = false;
    68c0:	2200      	movs	r2, #0
   kb4Erase.time = BUSY_TIMEOUT;
    68c2:	6483      	str	r3, [r0, #72]	; 0x48
   kb32Erase.time = kb4Erase.time * 8;
    68c4:	4b40      	ldr	r3, [pc, #256]	; (69c8 <_ZN8SPIFlash7_chipIDEm+0x130>)
   chipErase.opcode = CHIPERASE;
    68c6:	0005      	movs	r5, r0
   kb32Erase.time = kb4Erase.time * 8;
    68c8:	6503      	str	r3, [r0, #80]	; 0x50
   kb64Erase.time = kb32Erase.time * 4;
    68ca:	4b40      	ldr	r3, [pc, #256]	; (69cc <_ZN8SPIFlash7_chipIDEm+0x134>)
   chipErase.opcode = CHIPERASE;
    68cc:	3565      	adds	r5, #101	; 0x65
   kb64Erase.time = kb32Erase.time * 4;
    68ce:	6583      	str	r3, [r0, #88]	; 0x58
   kb256Erase.supported = false;
    68d0:	0003      	movs	r3, r0
    68d2:	335c      	adds	r3, #92	; 0x5c
    68d4:	701a      	strb	r2, [r3, #0]
   chipErase.opcode = CHIPERASE;
    68d6:	2360      	movs	r3, #96	; 0x60
    68d8:	702b      	strb	r3, [r5, #0]
   chipErase.time = kb64Erase.time * 100L;
    68da:	4b3d      	ldr	r3, [pc, #244]	; (69d0 <_ZN8SPIFlash7_chipIDEm+0x138>)
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    68dc:	0004      	movs	r4, r0
   chipErase.time = kb64Erase.time * 100L;
    68de:	6683      	str	r3, [r0, #104]	; 0x68
   _pageSize = SPI_PAGESIZE;
    68e0:	0003      	movs	r3, r0
    68e2:	3201      	adds	r2, #1
    68e4:	3372      	adds	r3, #114	; 0x72
    68e6:	32ff      	adds	r2, #255	; 0xff
    68e8:	801a      	strh	r2, [r3, #0]
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    68ea:	000e      	movs	r6, r1
   _getJedecId();
    68ec:	f7ff ff5a 	bl	67a4 <_ZN8SPIFlash11_getJedecIdEv>
     if (_chip.manufacturerID == _supportedManID[i]) {
    68f0:	0023      	movs	r3, r4
    68f2:	1ca2      	adds	r2, r4, #2
    68f4:	3337      	adds	r3, #55	; 0x37
    68f6:	7819      	ldrb	r1, [r3, #0]
    68f8:	32ff      	adds	r2, #255	; 0xff
    68fa:	33c1      	adds	r3, #193	; 0xc1
    68fc:	7818      	ldrb	r0, [r3, #0]
    68fe:	4288      	cmp	r0, r1
    6900:	d127      	bne.n	6952 <_ZN8SPIFlash7_chipIDEm+0xba>
       _chip.supportedMan = true;
    6902:	0023      	movs	r3, r4
    6904:	2201      	movs	r2, #1
    6906:	3335      	adds	r3, #53	; 0x35
    6908:	701a      	strb	r2, [r3, #0]
     if (_chip.memoryTypeID == _altChipEraseReq[i]) {
    690a:	0023      	movs	r3, r4
    690c:	0022      	movs	r2, r4
    690e:	3338      	adds	r3, #56	; 0x38
    6910:	32ff      	adds	r2, #255	; 0xff
    6912:	781b      	ldrb	r3, [r3, #0]
    6914:	7890      	ldrb	r0, [r2, #2]
    6916:	4298      	cmp	r0, r3
    6918:	d005      	beq.n	6926 <_ZN8SPIFlash7_chipIDEm+0x8e>
    691a:	78d0      	ldrb	r0, [r2, #3]
    691c:	4298      	cmp	r0, r3
    691e:	d002      	beq.n	6926 <_ZN8SPIFlash7_chipIDEm+0x8e>
    6920:	7912      	ldrb	r2, [r2, #4]
    6922:	429a      	cmp	r2, r3
    6924:	d101      	bne.n	692a <_ZN8SPIFlash7_chipIDEm+0x92>
       chipErase.opcode = ALT_CHIPERASE;
    6926:	23c7      	movs	r3, #199	; 0xc7
    6928:	702b      	strb	r3, [r5, #0]
   if (_chip.supportedMan) {
    692a:	0023      	movs	r3, r4
    692c:	3335      	adds	r3, #53	; 0x35
    692e:	781d      	ldrb	r5, [r3, #0]
    6930:	2d00      	cmp	r5, #0
    6932:	d032      	beq.n	699a <_ZN8SPIFlash7_chipIDEm+0x102>
    6934:	0027      	movs	r7, r4
    6936:	3739      	adds	r7, #57	; 0x39
     if(_chip.manufacturerID == MACRONIX_MANID)
    6938:	29c2      	cmp	r1, #194	; 0xc2
    693a:	d111      	bne.n	6960 <_ZN8SPIFlash7_chipIDEm+0xc8>
       switch(_chip.capacityID)
    693c:	783b      	ldrb	r3, [r7, #0]
    693e:	2b13      	cmp	r3, #19
    6940:	d00b      	beq.n	695a <_ZN8SPIFlash7_chipIDEm+0xc2>
    6942:	2b14      	cmp	r3, #20
    6944:	d01b      	beq.n	697e <_ZN8SPIFlash7_chipIDEm+0xe6>
   diagnostics.troubleshoot(_code, printoverride);
    6946:	2200      	movs	r2, #0
    6948:	2102      	movs	r1, #2
    694a:	4822      	ldr	r0, [pc, #136]	; (69d4 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    694c:	f002 f83c 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
    6950:	e006      	b.n	6960 <_ZN8SPIFlash7_chipIDEm+0xc8>
    6952:	3301      	adds	r3, #1
   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
    6954:	4293      	cmp	r3, r2
    6956:	d1d1      	bne.n	68fc <_ZN8SPIFlash7_chipIDEm+0x64>
    6958:	e7d7      	b.n	690a <_ZN8SPIFlash7_chipIDEm+0x72>
         _chip.capacity = MB(4);
    695a:	2380      	movs	r3, #128	; 0x80
    695c:	03db      	lsls	r3, r3, #15
         _chip.capacity = MB(8);
    695e:	63e3      	str	r3, [r4, #60]	; 0x3c
       if (_chip.capacityID == _capID[j]) {
    6960:	2300      	movs	r3, #0
    6962:	783a      	ldrb	r2, [r7, #0]
    6964:	0019      	movs	r1, r3
    6966:	319c      	adds	r1, #156	; 0x9c
    6968:	5c61      	ldrb	r1, [r4, r1]
    696a:	4291      	cmp	r1, r2
    696c:	d10a      	bne.n	6984 <_ZN8SPIFlash7_chipIDEm+0xec>
         _chip.capacity = (_memSize[j]);
    696e:	332c      	adds	r3, #44	; 0x2c
    6970:	009b      	lsls	r3, r3, #2
    6972:	591b      	ldr	r3, [r3, r4]
         _chip.supported = true;
    6974:	3434      	adds	r4, #52	; 0x34
         _chip.capacity = (_memSize[j]);
    6976:	60a3      	str	r3, [r4, #8]
         _chip.supported = true;
    6978:	2301      	movs	r3, #1
       _chip.supported = false;
    697a:	7023      	strb	r3, [r4, #0]
       return true;
    697c:	e012      	b.n	69a4 <_ZN8SPIFlash7_chipIDEm+0x10c>
         _chip.capacity = MB(8);
    697e:	2380      	movs	r3, #128	; 0x80
    6980:	041b      	lsls	r3, r3, #16
    6982:	e7ec      	b.n	695e <_ZN8SPIFlash7_chipIDEm+0xc6>
    6984:	3301      	adds	r3, #1
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
    6986:	2b12      	cmp	r3, #18
    6988:	d1ec      	bne.n	6964 <_ZN8SPIFlash7_chipIDEm+0xcc>
   if (!_chip.capacity) {
    698a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    698c:	2b00      	cmp	r3, #0
    698e:	d108      	bne.n	69a2 <_ZN8SPIFlash7_chipIDEm+0x10a>
     if (flashChipSize) {
    6990:	2e00      	cmp	r6, #0
    6992:	d00f      	beq.n	69b4 <_ZN8SPIFlash7_chipIDEm+0x11c>
       _chip.capacity = flashChipSize;
    6994:	63e6      	str	r6, [r4, #60]	; 0x3c
       _chip.supported = false;
    6996:	3434      	adds	r4, #52	; 0x34
    6998:	e7ef      	b.n	697a <_ZN8SPIFlash7_chipIDEm+0xe2>
     if (_chip.sfdpAvailable) {
    699a:	3436      	adds	r4, #54	; 0x36
    699c:	7825      	ldrb	r5, [r4, #0]
    699e:	2d00      	cmp	r5, #0
    69a0:	d002      	beq.n	69a8 <_ZN8SPIFlash7_chipIDEm+0x110>
       return true;
    69a2:	2501      	movs	r5, #1
 }
    69a4:	0028      	movs	r0, r5
    69a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   diagnostics.troubleshoot(_code, printoverride);
    69a8:	002a      	movs	r2, r5
    69aa:	2102      	movs	r1, #2
    69ac:	4809      	ldr	r0, [pc, #36]	; (69d4 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    69ae:	f002 f80b 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
       return false;
    69b2:	e7f7      	b.n	69a4 <_ZN8SPIFlash7_chipIDEm+0x10c>
   diagnostics.troubleshoot(_code, printoverride);
    69b4:	0032      	movs	r2, r6
    69b6:	2103      	movs	r1, #3
    69b8:	4806      	ldr	r0, [pc, #24]	; (69d4 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    69ba:	f002 f805 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
       return false;
    69be:	0035      	movs	r5, r6
    69c0:	e7f0      	b.n	69a4 <_ZN8SPIFlash7_chipIDEm+0x10c>
    69c2:	46c0      	nop			; (mov r8, r8)
    69c4:	3b9aca00 	.word	0x3b9aca00
    69c8:	dcd65000 	.word	0xdcd65000
    69cc:	73594000 	.word	0x73594000
    69d0:	0edd0000 	.word	0x0edd0000
    69d4:	20001a10 	.word	0x20001a10

000069d8 <_ZN8SPIFlash13_troubleshootEhb>:
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
    69d8:	b510      	push	{r4, lr}
   diagnostics.troubleshoot(_code, printoverride);
    69da:	4802      	ldr	r0, [pc, #8]	; (69e4 <_ZN8SPIFlash13_troubleshootEhb+0xc>)
    69dc:	f001 fff4 	bl	89c8 <_ZN11Diagnostics12troubleshootEhb>
 }
    69e0:	bd10      	pop	{r4, pc}
    69e2:	46c0      	nop			; (mov r8, r8)
    69e4:	20001a10 	.word	0x20001a10

000069e8 <_ZN8SPIClass4initEv>:
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    69e8:	7a43      	ldrb	r3, [r0, #9]
    69ea:	2b00      	cmp	r3, #0
    69ec:	d104      	bne.n	69f8 <_ZN8SPIClass4initEv+0x10>
    return;
  interruptMode = SPI_IMODE_NONE;
    69ee:	7283      	strb	r3, [r0, #10]
  interruptSave = 0;
    69f0:	72c3      	strb	r3, [r0, #11]
  interruptMask = 0;
    69f2:	60c3      	str	r3, [r0, #12]
  initialized = true;
    69f4:	3301      	adds	r3, #1
    69f6:	7243      	strb	r3, [r0, #9]
}
    69f8:	4770      	bx	lr

000069fa <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    69fa:	b530      	push	{r4, r5, lr}
    69fc:	0004      	movs	r4, r0
    69fe:	b085      	sub	sp, #20
    6a00:	ad02      	add	r5, sp, #8
  _p_sercom->disableSPI();
    6a02:	6800      	ldr	r0, [r0, #0]
{
    6a04:	9102      	str	r1, [sp, #8]
    6a06:	9203      	str	r2, [sp, #12]
  _p_sercom->disableSPI();
    6a08:	f7fe fb9b 	bl	5142 <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    6a0c:	796b      	ldrb	r3, [r5, #5]
    6a0e:	7a22      	ldrb	r2, [r4, #8]
    6a10:	79e1      	ldrb	r1, [r4, #7]
    6a12:	9300      	str	r3, [sp, #0]
    6a14:	6820      	ldr	r0, [r4, #0]
    6a16:	2300      	movs	r3, #0
    6a18:	f7fe fc3e 	bl	5298 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    6a1c:	7929      	ldrb	r1, [r5, #4]
    6a1e:	9a02      	ldr	r2, [sp, #8]
    6a20:	6820      	ldr	r0, [r4, #0]
    6a22:	f7fe fb61 	bl	50e8 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    6a26:	6820      	ldr	r0, [r4, #0]
    6a28:	f7fe fb82 	bl	5130 <_ZN6SERCOM9enableSPIEv>
}
    6a2c:	b005      	add	sp, #20
    6a2e:	bd30      	pop	{r4, r5, pc}

00006a30 <_ZN8SPIClass5beginEv>:
{
    6a30:	b510      	push	{r4, lr}
    6a32:	0004      	movs	r4, r0
  init();
    6a34:	f7ff ffd8 	bl	69e8 <_ZN8SPIClass4initEv>
  pinPeripheral(_uc_pinMiso, PIO_SERCOM);
    6a38:	7920      	ldrb	r0, [r4, #4]
    6a3a:	210e      	movs	r1, #14
    6a3c:	f7fd f976 	bl	3d2c <pinPeripheral>
  pinPeripheral(_uc_pinSCK, PIO_SERCOM);
    6a40:	79a0      	ldrb	r0, [r4, #6]
    6a42:	210e      	movs	r1, #14
    6a44:	f7fd f972 	bl	3d2c <pinPeripheral>
  pinPeripheral(_uc_pinMosi, PIO_SERCOM);
    6a48:	7960      	ldrb	r0, [r4, #5]
    6a4a:	210e      	movs	r1, #14
    6a4c:	f7fd f96e 	bl	3d2c <pinPeripheral>
  config(DEFAULT_SPI_SETTINGS);
    6a50:	4b02      	ldr	r3, [pc, #8]	; (6a5c <_ZN8SPIClass5beginEv+0x2c>)
    6a52:	0020      	movs	r0, r4
    6a54:	cb06      	ldmia	r3!, {r1, r2}
    6a56:	f7ff ffd0 	bl	69fa <_ZN8SPIClass6configE11SPISettings>
}
    6a5a:	bd10      	pop	{r4, pc}
    6a5c:	200012ac 	.word	0x200012ac

00006a60 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    6a60:	b507      	push	{r0, r1, r2, lr}
  if (interruptMode != SPI_IMODE_NONE)
    6a62:	7a83      	ldrb	r3, [r0, #10]
{
    6a64:	9100      	str	r1, [sp, #0]
    6a66:	9201      	str	r2, [sp, #4]
  if (interruptMode != SPI_IMODE_NONE)
    6a68:	2b00      	cmp	r3, #0
    6a6a:	d007      	beq.n	6a7c <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    6a6c:	079a      	lsls	r2, r3, #30
    6a6e:	d50a      	bpl.n	6a86 <_ZN8SPIClass16beginTransactionE11SPISettings+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6a70:	f3ef 8210 	mrs	r2, PRIMASK
  return (__get_PRIMASK() ? 0 : 1);
    6a74:	4253      	negs	r3, r2
    6a76:	4153      	adcs	r3, r2
    {
      interruptSave = interruptsStatus();
    6a78:	72c3      	strb	r3, [r0, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    6a7a:	b672      	cpsid	i
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
  }

  config(settings);
    6a7c:	9900      	ldr	r1, [sp, #0]
    6a7e:	9a01      	ldr	r2, [sp, #4]
    6a80:	f7ff ffbb 	bl	69fa <_ZN8SPIClass6configE11SPISettings>
}
    6a84:	bd07      	pop	{r0, r1, r2, pc}
    else if (interruptMode & SPI_IMODE_EXTINT)
    6a86:	07db      	lsls	r3, r3, #31
    6a88:	d5f8      	bpl.n	6a7c <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    6a8a:	8983      	ldrh	r3, [r0, #12]
    6a8c:	4a01      	ldr	r2, [pc, #4]	; (6a94 <_ZN8SPIClass16beginTransactionE11SPISettings+0x34>)
    6a8e:	60d3      	str	r3, [r2, #12]
    6a90:	e7f4      	b.n	6a7c <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
    6a92:	46c0      	nop			; (mov r8, r8)
    6a94:	40002400 	.word	0x40002400

00006a98 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
  if (interruptMode != SPI_IMODE_NONE)
    6a98:	7a83      	ldrb	r3, [r0, #10]
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d005      	beq.n	6aaa <_ZN8SPIClass14endTransactionEv+0x12>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    6a9e:	079a      	lsls	r2, r3, #30
    6aa0:	d504      	bpl.n	6aac <_ZN8SPIClass14endTransactionEv+0x14>
    {
      if (interruptSave)
    6aa2:	7ac3      	ldrb	r3, [r0, #11]
    6aa4:	2b00      	cmp	r3, #0
    6aa6:	d000      	beq.n	6aaa <_ZN8SPIClass14endTransactionEv+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
    6aa8:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    6aaa:	4770      	bx	lr
    else if (interruptMode & SPI_IMODE_EXTINT)
    6aac:	07db      	lsls	r3, r3, #31
    6aae:	d5fc      	bpl.n	6aaa <_ZN8SPIClass14endTransactionEv+0x12>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    6ab0:	68c3      	ldr	r3, [r0, #12]
    6ab2:	4a02      	ldr	r2, [pc, #8]	; (6abc <_ZN8SPIClass14endTransactionEv+0x24>)
    6ab4:	b29b      	uxth	r3, r3
    6ab6:	6113      	str	r3, [r2, #16]
}
    6ab8:	e7f7      	b.n	6aaa <_ZN8SPIClass14endTransactionEv+0x12>
    6aba:	46c0      	nop			; (mov r8, r8)
    6abc:	40002400 	.word	0x40002400

00006ac0 <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    6ac0:	b510      	push	{r4, lr}
  return _p_sercom->transferDataSPI(data);
    6ac2:	6800      	ldr	r0, [r0, #0]
    6ac4:	f7fe fb46 	bl	5154 <_ZN6SERCOM15transferDataSPIEh>
}
    6ac8:	bd10      	pop	{r4, pc}

00006aca <_ZN8SPIClass8transferEPvj>:

  return t.val;
}

void SPIClass::transfer(void *buf, size_t count)
{
    6aca:	b570      	push	{r4, r5, r6, lr}
    6acc:	0006      	movs	r6, r0
  uint8_t *buffer = reinterpret_cast<uint8_t *>(buf);
    6ace:	000c      	movs	r4, r1
    6ad0:	188d      	adds	r5, r1, r2
  for (size_t i=0; i<count; i++) {
    6ad2:	42ac      	cmp	r4, r5
    6ad4:	d006      	beq.n	6ae4 <_ZN8SPIClass8transferEPvj+0x1a>
    *buffer = transfer(*buffer);
    6ad6:	7821      	ldrb	r1, [r4, #0]
    6ad8:	0030      	movs	r0, r6
    6ada:	f7ff fff1 	bl	6ac0 <_ZN8SPIClass8transferEh>
    6ade:	7020      	strb	r0, [r4, #0]
    buffer++;
    6ae0:	3401      	adds	r4, #1
  for (size_t i=0; i<count; i++) {
    6ae2:	e7f6      	b.n	6ad2 <_ZN8SPIClass8transferEPvj+0x8>
  }
}
    6ae4:	bd70      	pop	{r4, r5, r6, pc}
	...

00006ae8 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    6ae8:	4b09      	ldr	r3, [pc, #36]	; (6b10 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x28>)
    6aea:	4a0a      	ldr	r2, [pc, #40]	; (6b14 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2c>)
    6aec:	601a      	str	r2, [r3, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    6aee:	2200      	movs	r2, #0
    6af0:	715a      	strb	r2, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    6af2:	711a      	strb	r2, [r3, #4]
  initialized = false;
    6af4:	4b08      	ldr	r3, [pc, #32]	; (6b18 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x30>)
    6af6:	725a      	strb	r2, [r3, #9]
  _p_sercom = p_sercom;
    6af8:	4a08      	ldr	r2, [pc, #32]	; (6b1c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x34>)
    6afa:	601a      	str	r2, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
    6afc:	2223      	movs	r2, #35	; 0x23
    6afe:	711a      	strb	r2, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    6b00:	3a02      	subs	r2, #2
    6b02:	719a      	strb	r2, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    6b04:	3a01      	subs	r2, #1
    6b06:	715a      	strb	r2, [r3, #5]
  _padTx=PadTx;
    6b08:	3a1f      	subs	r2, #31
    6b0a:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    6b0c:	721a      	strb	r2, [r3, #8]
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom5                 //sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3        //SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_1        //SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    6b0e:	4770      	bx	lr
    6b10:	200012ac 	.word	0x200012ac
    6b14:	003d0900 	.word	0x003d0900
    6b18:	2000129c 	.word	0x2000129c
    6b1c:	2000127c 	.word	0x2000127c

00006b20 <_ZL15cbor_enc_lengthhP8cbor_bufm>:
}

/* Variable length encoder for integer types - UINT/NINT and ARRAY/MAP dimensions */
static int
cbor_enc_length(uint8_t major_type, struct cbor_buf * cbuf, uint32_t val)
{
    6b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b22:	4684      	mov	ip, r0
    6b24:	000d      	movs	r5, r1
    6b26:	9201      	str	r2, [sp, #4]
    6b28:	ba16      	rev	r6, r2
        *addnl_info = val;
    6b2a:	b2d3      	uxtb	r3, r2
        retbytes = 0;
    6b2c:	2400      	movs	r4, #0
    if (val <= CBOR_MJR0_THRESHOLD) {
    6b2e:	2a17      	cmp	r2, #23
    6b30:	d90a      	bls.n	6b48 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    } else if (val > CBOR_MJR0_THRESHOLD && val <= UINT8_MAX) {
    6b32:	0013      	movs	r3, r2
    6b34:	3b18      	subs	r3, #24
    6b36:	2be7      	cmp	r3, #231	; 0xe7
    6b38:	d911      	bls.n	6b5e <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3e>
    } else if (val > UINT8_MAX && val <= UINT16_MAX) {
    6b3a:	1e53      	subs	r3, r2, #1
    6b3c:	491c      	ldr	r1, [pc, #112]	; (6bb0 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x90>)
    6b3e:	3bff      	subs	r3, #255	; 0xff
    6b40:	428b      	cmp	r3, r1
    6b42:	d80f      	bhi.n	6b64 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x44>
        *addnl_info = CBOR_ADDL_BYTE_UINT16;
    6b44:	2319      	movs	r3, #25
        retbytes = SIZE_UINT16;
    6b46:	2402      	movs	r4, #2
    int addnlBytes;
    uint8_t additionalInfo;

    addnlBytes = cbor_get_addnl_info(val, &additionalInfo);

    if ((cbuf->next + addnlBytes) > cbuf->tail) {
    6b48:	68a9      	ldr	r1, [r5, #8]
    6b4a:	6868      	ldr	r0, [r5, #4]
    6b4c:	190f      	adds	r7, r1, r4
    6b4e:	42b8      	cmp	r0, r7
    6b50:	d20b      	bcs.n	6b6a <_ZL15cbor_enc_lengthhP8cbor_bufm+0x4a>
        cbuf->err = CBOR_NO_MEM;
    6b52:	2301      	movs	r3, #1
            break;
#endif
        default:
            /* TODO - error handling */
           cbuf->err = CBOR_INV_ADDNL_INFO;
           return CBOR_ERR;
    6b54:	2401      	movs	r4, #1
           cbuf->err = CBOR_INV_ADDNL_INFO;
    6b56:	60eb      	str	r3, [r5, #12]
           return CBOR_ERR;
    6b58:	4264      	negs	r4, r4
        }
        memcpy(cbuf->next, &val, addnlBytes);
        cbuf->next += addnlBytes;
    }
    return CBOR_OK;
}
    6b5a:	0020      	movs	r0, r4
    6b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *addnl_info = CBOR_ADDL_BYTE_UINT8;
    6b5e:	2318      	movs	r3, #24
        retbytes = SIZE_UINT8;
    6b60:	2401      	movs	r4, #1
    6b62:	e7f1      	b.n	6b48 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
        *addnl_info = CBOR_ADDL_BYTE_UINT32;
    6b64:	231a      	movs	r3, #26
        retbytes = SIZE_UINT;
    6b66:	2404      	movs	r4, #4
    6b68:	e7ee      	b.n	6b48 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    *cbuf->next++ = major_type | additionalInfo;
    6b6a:	4660      	mov	r0, ip
    6b6c:	1c4f      	adds	r7, r1, #1
    6b6e:	4318      	orrs	r0, r3
    6b70:	60af      	str	r7, [r5, #8]
    6b72:	7008      	strb	r0, [r1, #0]
    if (addnlBytes) {
    6b74:	2c00      	cmp	r4, #0
    6b76:	d0f0      	beq.n	6b5a <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
        switch(addnlBytes) {
    6b78:	2c02      	cmp	r4, #2
    6b7a:	d00e      	beq.n	6b9a <_ZL15cbor_enc_lengthhP8cbor_bufm+0x7a>
    6b7c:	2c04      	cmp	r4, #4
    6b7e:	d015      	beq.n	6bac <_ZL15cbor_enc_lengthhP8cbor_bufm+0x8c>
           cbuf->err = CBOR_INV_ADDNL_INFO;
    6b80:	2308      	movs	r3, #8
        switch(addnlBytes) {
    6b82:	2c01      	cmp	r4, #1
    6b84:	d1e6      	bne.n	6b54 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x34>
        memcpy(cbuf->next, &val, addnlBytes);
    6b86:	0022      	movs	r2, r4
    6b88:	a901      	add	r1, sp, #4
    6b8a:	68a8      	ldr	r0, [r5, #8]
    6b8c:	f005 ff81 	bl	ca92 <memcpy>
        cbuf->next += addnlBytes;
    6b90:	68ab      	ldr	r3, [r5, #8]
    6b92:	191c      	adds	r4, r3, r4
    6b94:	60ac      	str	r4, [r5, #8]
    return CBOR_OK;
    6b96:	2400      	movs	r4, #0
    6b98:	e7df      	b.n	6b5a <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
            val = htons(val);
    6b9a:	4906      	ldr	r1, [pc, #24]	; (6bb4 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x94>)
    6b9c:	0213      	lsls	r3, r2, #8
    6b9e:	b292      	uxth	r2, r2
    6ba0:	400b      	ands	r3, r1
    6ba2:	0a12      	lsrs	r2, r2, #8
    6ba4:	431a      	orrs	r2, r3
    6ba6:	b292      	uxth	r2, r2
    6ba8:	9201      	str	r2, [sp, #4]
            break;
    6baa:	e7ec      	b.n	6b86 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
            val = htonl(val);
    6bac:	9601      	str	r6, [sp, #4]
            break;
    6bae:	e7ea      	b.n	6b86 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
    6bb0:	0000feff 	.word	0x0000feff
    6bb4:	00ffff00 	.word	0x00ffff00

00006bb8 <_Z13cbor_enc_initP8cbor_bufPvi>:
{
    6bb8:	b570      	push	{r4, r5, r6, lr}
    6bba:	0005      	movs	r5, r0
    6bbc:	000c      	movs	r4, r1
    6bbe:	0016      	movs	r6, r2
    memset(cbuf, 0, sizeof(struct cbor_buf));
    6bc0:	2100      	movs	r1, #0
    6bc2:	2210      	movs	r2, #16
    6bc4:	f005 ff80 	bl	cac8 <memset>
    cbuf->head = (uint8_t*)buf;
    6bc8:	602c      	str	r4, [r5, #0]
    cbuf->next = (uint8_t*)buf;
    6bca:	60ac      	str	r4, [r5, #8]
    cbuf->tail = cbuf->head + len;
    6bcc:	19a4      	adds	r4, r4, r6
    6bce:	606c      	str	r4, [r5, #4]
}
    6bd0:	bd70      	pop	{r4, r5, r6, pc}

00006bd2 <_Z16cbor_buf_get_lenP8cbor_buf>:
    return cbuf->next - cbuf->head;
    6bd2:	6883      	ldr	r3, [r0, #8]
    6bd4:	6800      	ldr	r0, [r0, #0]
    6bd6:	1a18      	subs	r0, r3, r0
}
    6bd8:	4770      	bx	lr

00006bda <_Z12cbor_enc_intP8cbor_bufi>:
 *         Error (negative values)
 */
int
cbor_enc_int(struct cbor_buf *cbuf, int val)
{
    uint8_t major_type = CBOR_TYPE_UINT;
    6bda:	2300      	movs	r3, #0
{
    6bdc:	b510      	push	{r4, lr}
    6bde:	000a      	movs	r2, r1

    if (val < 0) {
    6be0:	4299      	cmp	r1, r3
    6be2:	da01      	bge.n	6be8 <_Z12cbor_enc_intP8cbor_bufi+0xe>
        val = -1 - val;
    6be4:	43ca      	mvns	r2, r1
        major_type = CBOR_TYPE_NINT;
    6be6:	3320      	adds	r3, #32
    }

    return (cbor_enc_length(major_type, cbuf, val));
    6be8:	0001      	movs	r1, r0
    6bea:	0018      	movs	r0, r3
    6bec:	f7ff ff98 	bl	6b20 <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    6bf0:	bd10      	pop	{r4, pc}

00006bf2 <_Z13cbor_enc_textP8cbor_bufPKci>:
 * output: status of encode operation.
 */
int
cbor_enc_text(struct cbor_buf *cbuf,
                const char *inp_string, int len)
{
    6bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bf4:	0004      	movs	r4, r0
    6bf6:	000f      	movs	r7, r1
    int rc = CBOR_OK;
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    6bf8:	0001      	movs	r1, r0
    6bfa:	2060      	movs	r0, #96	; 0x60
{
    6bfc:	0015      	movs	r5, r2
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    6bfe:	f7ff ff8f 	bl	6b20 <_ZL15cbor_enc_lengthhP8cbor_bufm>
    6c02:	1e06      	subs	r6, r0, #0

    if (!rc) {
    6c04:	d107      	bne.n	6c16 <_Z13cbor_enc_textP8cbor_bufPKci+0x24>
        if (len > (cbuf->tail - cbuf->next)) {
    6c06:	68a0      	ldr	r0, [r4, #8]
    6c08:	6863      	ldr	r3, [r4, #4]
    6c0a:	1a1b      	subs	r3, r3, r0
    6c0c:	429d      	cmp	r5, r3
    6c0e:	dd04      	ble.n	6c1a <_Z13cbor_enc_textP8cbor_bufPKci+0x28>
            cbuf->err = CBOR_NO_MEM;
    6c10:	2301      	movs	r3, #1
            rc = CBOR_ERR;
    6c12:	3e01      	subs	r6, #1
            cbuf->err = CBOR_NO_MEM;
    6c14:	60e3      	str	r3, [r4, #12]
            memcpy(cbuf->next, inp_string, len);
            cbuf->next += len;
        }
    }
    return rc;
}
    6c16:	0030      	movs	r0, r6
    6c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            memcpy(cbuf->next, inp_string, len);
    6c1a:	002a      	movs	r2, r5
    6c1c:	0039      	movs	r1, r7
    6c1e:	f005 ff38 	bl	ca92 <memcpy>
            cbuf->next += len;
    6c22:	68a3      	ldr	r3, [r4, #8]
    6c24:	195d      	adds	r5, r3, r5
    6c26:	60a5      	str	r5, [r4, #8]
    return rc;
    6c28:	e7f5      	b.n	6c16 <_Z13cbor_enc_textP8cbor_bufPKci+0x24>

00006c2a <_Z12cbor_enc_mapP8cbor_bufi>:
 *        num_elements -> number of elements in the map
 * output: status of encode operation.
 */
int
cbor_enc_map(struct cbor_buf *cbuf, int num_elements)
{
    6c2a:	b510      	push	{r4, lr}
    6c2c:	000a      	movs	r2, r1
    return(cbor_enc_length(CBOR_TYPE_MAP, cbuf, num_elements));
    6c2e:	0001      	movs	r1, r0
    6c30:	20a0      	movs	r0, #160	; 0xa0
    6c32:	f7ff ff75 	bl	6b20 <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    6c36:	bd10      	pop	{r4, pc}

00006c38 <_ZL8co_uint8PK5optlv>:
    const uint8_t *d = (const uint8_t *) o->ov;
    /* extending to allow parsing 16 bit content format seen on some clients */
    /* rfc7252:  A recipient MUST be prepared to process values with 
    *            leading zero bytes.
    */
    switch (o->ol) {
    6c38:	8842      	ldrh	r2, [r0, #2]
    const uint8_t *d = (const uint8_t *) o->ov;
    6c3a:	6843      	ldr	r3, [r0, #4]
    switch (o->ol) {
    6c3c:	2a01      	cmp	r2, #1
    6c3e:	d003      	beq.n	6c48 <_ZL8co_uint8PK5optlv+0x10>
    6c40:	2a02      	cmp	r2, #2
    6c42:	d003      	beq.n	6c4c <_ZL8co_uint8PK5optlv+0x14>
        case 0:     return 0;
    6c44:	2000      	movs	r0, #0
    6c46:	e000      	b.n	6c4a <_ZL8co_uint8PK5optlv+0x12>
        case 1:     return d[0];
    6c48:	7818      	ldrb	r0, [r3, #0]
        case 2:     return d[1];
        default:    return 0;
    }
}
    6c4a:	4770      	bx	lr
        case 2:     return d[1];
    6c4c:	7858      	ldrb	r0, [r3, #1]
    6c4e:	e7fc      	b.n	6c4a <_ZL8co_uint8PK5optlv+0x12>

00006c50 <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf>:
    error_t rc;

    ctx->msg = m;   /* save mbuf in context - free later */

    /* parse header */
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    6c50:	223f      	movs	r2, #63	; 0x3f
{
    6c52:	b510      	push	{r4, lr}
    ctx->msg = m;   /* save mbuf in context - free later */
    6c54:	6501      	str	r1, [r0, #80]	; 0x50
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    6c56:	790b      	ldrb	r3, [r1, #4]
        rc = ERR_VER_NOT_SUPP;
    6c58:	241d      	movs	r4, #29
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    6c5a:	4393      	bics	r3, r2
    6c5c:	2b40      	cmp	r3, #64	; 0x40
    6c5e:	d116      	bne.n	6c8e <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf+0x3e>
    uint8_t *b = m->m_data;
    6c60:	1d0b      	adds	r3, r1, #4
        goto err;
    }
   
    ctx->hdr = b;
    6c62:	6103      	str	r3, [r0, #16]
    ctx->type = (b[0] >> 4) & 0x3;
    6c64:	790b      	ldrb	r3, [r1, #4]
    ctx->tkl  = b[0] & 0xf;
    6c66:	3a30      	subs	r2, #48	; 0x30
    ctx->type = (b[0] >> 4) & 0x3;
    6c68:	069b      	lsls	r3, r3, #26
    6c6a:	0f9b      	lsrs	r3, r3, #30
    6c6c:	7003      	strb	r3, [r0, #0]
    ctx->tkl  = b[0] & 0xf;
    6c6e:	790b      	ldrb	r3, [r1, #4]
    6c70:	401a      	ands	r2, r3
    6c72:	7042      	strb	r2, [r0, #1]
    ctx->code = b[1];
    6c74:	794b      	ldrb	r3, [r1, #5]
    6c76:	7083      	strb	r3, [r0, #2]
    ctx->mid  = (b[2] << 8) + b[3];
    6c78:	798c      	ldrb	r4, [r1, #6]
    6c7a:	79cb      	ldrb	r3, [r1, #7]
    6c7c:	0224      	lsls	r4, r4, #8
    6c7e:	191b      	adds	r3, r3, r4
    ctx->plen = 0;  /* Initialise */
    6c80:	2400      	movs	r4, #0
    ctx->mid  = (b[2] << 8) + b[3];
    6c82:	8083      	strh	r3, [r0, #4]
    ctx->plen = 0;  /* Initialise */
    6c84:	6404      	str	r4, [r0, #64]	; 0x40
    /* sanity checks 
        token length <= 8
        message length > header + token
    */

    memcpy(ctx->token, b + 4, ctx->tkl);
    6c86:	3108      	adds	r1, #8
    6c88:	3006      	adds	r0, #6
    6c8a:	f005 ff02 	bl	ca92 <memcpy>

err:
    return rc;
}
    6c8e:	0020      	movs	r0, r4
    6c90:	bd10      	pop	{r4, pc}

00006c92 <_Z13co_uint32_h2nPK5optlv.part.1>:
co_uint32_h2n(const struct optlv *o)
    6c92:	6843      	ldr	r3, [r0, #4]
}
    6c94:	6818      	ldr	r0, [r3, #0]
    6c96:	ba00      	rev	r0, r0
    6c98:	4770      	bx	lr
	...

00006c9c <_Z12coap_con_addtP18coap_ack_cb_info_t>:
{
    6c9c:	b570      	push	{r4, r5, r6, lr}
    dlog(LOG_DEBUG, "Adding callback for MID: 0x%x\n", mid);
    6c9e:	0002      	movs	r2, r0
{
    6ca0:	0005      	movs	r5, r0
    6ca2:	000c      	movs	r4, r1
    dlog(LOG_DEBUG, "Adding callback for MID: 0x%x\n", mid);
    6ca4:	2007      	movs	r0, #7
    6ca6:	4909      	ldr	r1, [pc, #36]	; (6ccc <_Z12coap_con_addtP18coap_ack_cb_info_t+0x30>)
    6ca8:	f7fd fb7a 	bl	43a0 <_Z4dlogiPKcz>
    intrct_cb_q[intrct_cb_q_ind].mid = mid;
    6cac:	200c      	movs	r0, #12
    6cae:	4908      	ldr	r1, [pc, #32]	; (6cd0 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x34>)
    6cb0:	4b08      	ldr	r3, [pc, #32]	; (6cd4 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x38>)
    6cb2:	780a      	ldrb	r2, [r1, #0]
    6cb4:	4350      	muls	r0, r2
    6cb6:	52c5      	strh	r5, [r0, r3]
    intrct_cb_q[intrct_cb_q_ind].cbinfo = *cbi;
    6cb8:	181b      	adds	r3, r3, r0
    6cba:	3304      	adds	r3, #4
    6cbc:	cc21      	ldmia	r4!, {r0, r5}
    6cbe:	c321      	stmia	r3!, {r0, r5}
    intrct_cb_q_ind = (intrct_cb_q_ind + 1) % MID_CB_Q_SZ;
    6cc0:	2303      	movs	r3, #3
    6cc2:	3201      	adds	r2, #1
    6cc4:	401a      	ands	r2, r3
}
    6cc6:	2000      	movs	r0, #0
    intrct_cb_q_ind = (intrct_cb_q_ind + 1) % MID_CB_Q_SZ;
    6cc8:	700a      	strb	r2, [r1, #0]
}
    6cca:	bd70      	pop	{r4, r5, r6, pc}
    6ccc:	000111ff 	.word	0x000111ff
    6cd0:	200013ec 	.word	0x200013ec
    6cd4:	200013bc 	.word	0x200013bc

00006cd8 <_Z11coap_ack_rxtP4mbuf>:
{
    6cd8:	b570      	push	{r4, r5, r6, lr}
    dlog(LOG_DEBUG, "Looking up callback for MID: 0x%x\n", mid);
    6cda:	0002      	movs	r2, r0
{
    6cdc:	0005      	movs	r5, r0
    6cde:	000c      	movs	r4, r1
    dlog(LOG_DEBUG, "Looking up callback for MID: 0x%x\n", mid);
    6ce0:	2007      	movs	r0, #7
    6ce2:	490c      	ldr	r1, [pc, #48]	; (6d14 <_Z11coap_ack_rxtP4mbuf+0x3c>)
    6ce4:	f7fd fb5c 	bl	43a0 <_Z4dlogiPKcz>
    6ce8:	2200      	movs	r2, #0
    6cea:	210c      	movs	r1, #12
        if (intrct_cb_q[i].mid == mid) {
    6cec:	4b0a      	ldr	r3, [pc, #40]	; (6d18 <_Z11coap_ack_rxtP4mbuf+0x40>)
    for (i = 0; i < MID_CB_Q_SZ; i++) {
    6cee:	0016      	movs	r6, r2
    6cf0:	2a04      	cmp	r2, #4
    6cf2:	d00d      	beq.n	6d10 <_Z11coap_ack_rxtP4mbuf+0x38>
        if (intrct_cb_q[i].mid == mid) {
    6cf4:	0008      	movs	r0, r1
    6cf6:	3201      	adds	r2, #1
    6cf8:	4350      	muls	r0, r2
    6cfa:	380c      	subs	r0, #12
    6cfc:	5a18      	ldrh	r0, [r3, r0]
    6cfe:	42a8      	cmp	r0, r5
    6d00:	d1f5      	bne.n	6cee <_Z11coap_ack_rxtP4mbuf+0x16>
            return (intrct_cb_q[i].cbinfo.cb(intrct_cb_q[i].cbinfo.cbctx, m));
    6d02:	4371      	muls	r1, r6
    6d04:	185b      	adds	r3, r3, r1
    6d06:	685a      	ldr	r2, [r3, #4]
    6d08:	0021      	movs	r1, r4
    6d0a:	6898      	ldr	r0, [r3, #8]
    6d0c:	4790      	blx	r2
}
    6d0e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_NO_ENTRY;
    6d10:	200c      	movs	r0, #12
    6d12:	e7fc      	b.n	6d0e <_Z11coap_ack_rxtP4mbuf+0x36>
    6d14:	000111dc 	.word	0x000111dc
    6d18:	200013bc 	.word	0x200013bc

00006d1c <_Z15coap_opt_strcmpPK5optlvPKc>:
{
    6d1c:	b570      	push	{r4, r5, r6, lr}
    6d1e:	0003      	movs	r3, r0
    6d20:	000c      	movs	r4, r1
        return 1;
    6d22:	2001      	movs	r0, #1
    if (!str) {
    6d24:	2900      	cmp	r1, #0
    6d26:	d00a      	beq.n	6d3e <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
    diff = strncmp((char*)opt->ov, str, opt->ol);  /* option is not NUL terminated */
    6d28:	885d      	ldrh	r5, [r3, #2]
    6d2a:	6858      	ldr	r0, [r3, #4]
    6d2c:	002a      	movs	r2, r5
    6d2e:	f006 fffe 	bl	dd2e <strncmp>
    if (diff) {
    6d32:	2800      	cmp	r0, #0
    6d34:	d103      	bne.n	6d3e <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
        return (opt->ol - strlen(str));
    6d36:	0020      	movs	r0, r4
    6d38:	f006 ffdd 	bl	dcf6 <strlen>
    6d3c:	1a28      	subs	r0, r5, r0
}
    6d3e:	bd70      	pop	{r4, r5, r6, pc}

00006d40 <_Z12coap_pathstrPK12coap_msg_ctx>:
{
    6d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    void *it = NULL;
    6d42:	2400      	movs	r4, #0
    uristr[0] = 0;
    6d44:	4d12      	ldr	r5, [pc, #72]	; (6d90 <_Z12coap_pathstrPK12coap_msg_ctx+0x50>)
{
    6d46:	b085      	sub	sp, #20
    6d48:	9001      	str	r0, [sp, #4]
    void *it = NULL;
    6d4a:	9403      	str	r4, [sp, #12]
    uristr[0] = 0;
    6d4c:	702c      	strb	r4, [r5, #0]
    while ((opt = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_PATH, &it)) != NULL)
    6d4e:	9801      	ldr	r0, [sp, #4]
    6d50:	aa03      	add	r2, sp, #12
    6d52:	210b      	movs	r1, #11
    6d54:	304c      	adds	r0, #76	; 0x4c
    6d56:	f000 fd0b 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6d5a:	1e06      	subs	r6, r0, #0
    6d5c:	d012      	beq.n	6d84 <_Z12coap_pathstrPK12coap_msg_ctx+0x44>
        if (ul + opt->ol + 1 > (int)sizeof(uristr))
    6d5e:	8843      	ldrh	r3, [r0, #2]
    6d60:	191b      	adds	r3, r3, r4
    6d62:	2bff      	cmp	r3, #255	; 0xff
    6d64:	dc11      	bgt.n	6d8a <_Z12coap_pathstrPK12coap_msg_ctx+0x4a>
        uristr[ul++] = '/';
    6d66:	232f      	movs	r3, #47	; 0x2f
    6d68:	1c67      	adds	r7, r4, #1
    6d6a:	552b      	strb	r3, [r5, r4]
        memcpy(uristr + ul, opt->ov, opt->ol);
    6d6c:	19ec      	adds	r4, r5, r7
    6d6e:	8842      	ldrh	r2, [r0, #2]
    6d70:	6841      	ldr	r1, [r0, #4]
    6d72:	0020      	movs	r0, r4
    6d74:	f005 fe8d 	bl	ca92 <memcpy>
        uristr[ul + opt->ol] = 0;
    6d78:	2200      	movs	r2, #0
    6d7a:	8873      	ldrh	r3, [r6, #2]
    6d7c:	54e2      	strb	r2, [r4, r3]
        ul += opt->ol;
    6d7e:	8874      	ldrh	r4, [r6, #2]
    6d80:	19e4      	adds	r4, r4, r7
    while ((opt = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_PATH, &it)) != NULL)
    6d82:	e7e4      	b.n	6d4e <_Z12coap_pathstrPK12coap_msg_ctx+0xe>
    return uristr;
    6d84:	0028      	movs	r0, r5
}
    6d86:	b005      	add	sp, #20
    6d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return NULL;
    6d8a:	2000      	movs	r0, #0
    6d8c:	e7fb      	b.n	6d86 <_Z12coap_pathstrPK12coap_msg_ctx+0x46>
    6d8e:	46c0      	nop			; (mov r8, r8)
    6d90:	200012b6 	.word	0x200012b6

00006d94 <_ZL12coap_msg_logPK12coap_msg_ctx>:
{
    6d94:	b510      	push	{r4, lr}
    6d96:	b0c0      	sub	sp, #256	; 0x100
    uriqp[0] = '\0';
    6d98:	2300      	movs	r3, #0
    6d9a:	466a      	mov	r2, sp
    6d9c:	7013      	strb	r3, [r2, #0]
            ctx->type == COAP_T_CONF_VAL ? "CON" : 
    6d9e:	7803      	ldrb	r3, [r0, #0]
{
    6da0:	0004      	movs	r4, r0
    dlog(LOG_DEBUG, "REQ/RSP Type: %s", 
    6da2:	4a29      	ldr	r2, [pc, #164]	; (6e48 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb4>)
    6da4:	2b00      	cmp	r3, #0
    6da6:	d006      	beq.n	6db6 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    6da8:	4a28      	ldr	r2, [pc, #160]	; (6e4c <_ZL12coap_msg_logPK12coap_msg_ctx+0xb8>)
    6daa:	2b01      	cmp	r3, #1
    6dac:	d003      	beq.n	6db6 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    6dae:	4a28      	ldr	r2, [pc, #160]	; (6e50 <_ZL12coap_msg_logPK12coap_msg_ctx+0xbc>)
    6db0:	2b02      	cmp	r3, #2
    6db2:	d000      	beq.n	6db6 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    6db4:	4a27      	ldr	r2, [pc, #156]	; (6e54 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc0>)
            ctx->type == COAP_T_ACK_VAL ? "ACK" : "RST");
    6db6:	4928      	ldr	r1, [pc, #160]	; (6e58 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc4>)
    6db8:	2007      	movs	r0, #7
    6dba:	f7fd faf1 	bl	43a0 <_Z4dlogiPKcz>
    if ((ctx->code & COAP_CODE_C_MASK) == COAP_CODE_REQUEST) {
    6dbe:	78a3      	ldrb	r3, [r4, #2]
    6dc0:	221f      	movs	r2, #31
    6dc2:	0019      	movs	r1, r3
    6dc4:	4391      	bics	r1, r2
    6dc6:	d136      	bne.n	6e36 <_ZL12coap_msg_logPK12coap_msg_ctx+0xa2>
        dlog(LOG_DEBUG, "REQ/ACK Code: %s",
    6dc8:	4a24      	ldr	r2, [pc, #144]	; (6e5c <_ZL12coap_msg_logPK12coap_msg_ctx+0xc8>)
    6dca:	2b01      	cmp	r3, #1
    6dcc:	d009      	beq.n	6de2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_POST ? "POST" :
    6dce:	4a24      	ldr	r2, [pc, #144]	; (6e60 <_ZL12coap_msg_logPK12coap_msg_ctx+0xcc>)
    6dd0:	2b02      	cmp	r3, #2
    6dd2:	d006      	beq.n	6de2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_PUT ? "PUT" : 
    6dd4:	4a23      	ldr	r2, [pc, #140]	; (6e64 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd0>)
    6dd6:	2b03      	cmp	r3, #3
    6dd8:	d003      	beq.n	6de2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_DELETE ? 
    6dda:	4a23      	ldr	r2, [pc, #140]	; (6e68 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd4>)
    6ddc:	2b04      	cmp	r3, #4
    6dde:	d000      	beq.n	6de2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
    6de0:	4a22      	ldr	r2, [pc, #136]	; (6e6c <_ZL12coap_msg_logPK12coap_msg_ctx+0xd8>)
                "DELETE" : "EMPTY");
    6de2:	4923      	ldr	r1, [pc, #140]	; (6e70 <_ZL12coap_msg_logPK12coap_msg_ctx+0xdc>)
                    "Client Error" : "Server Error");
    6de4:	2007      	movs	r0, #7
    6de6:	f7fd fadb 	bl	43a0 <_Z4dlogiPKcz>
    substr = coap_pathstr(ctx);
    6dea:	0020      	movs	r0, r4
    6dec:	f7ff ffa8 	bl	6d40 <_Z12coap_pathstrPK12coap_msg_ctx>
    if (substr[0] != '\0') {
    6df0:	7803      	ldrb	r3, [r0, #0]
    substr = coap_pathstr(ctx);
    6df2:	0001      	movs	r1, r0
    if (substr[0] != '\0') {
    6df4:	2b00      	cmp	r3, #0
    6df6:	d002      	beq.n	6dfe <_ZL12coap_msg_logPK12coap_msg_ctx+0x6a>
        strcat(uriqp, substr);
    6df8:	4668      	mov	r0, sp
    6dfa:	f006 ff5d 	bl	dcb8 <strcat>
    if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_QUERY, NULL))) {
    6dfe:	0020      	movs	r0, r4
    6e00:	2200      	movs	r2, #0
    6e02:	304c      	adds	r0, #76	; 0x4c
    6e04:	210f      	movs	r1, #15
    6e06:	f000 fcb3 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6e0a:	1e04      	subs	r4, r0, #0
    6e0c:	d008      	beq.n	6e20 <_ZL12coap_msg_logPK12coap_msg_ctx+0x8c>
        strcat(uriqp, "?");
    6e0e:	4919      	ldr	r1, [pc, #100]	; (6e74 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe0>)
    6e10:	4668      	mov	r0, sp
    6e12:	f006 ff51 	bl	dcb8 <strcat>
        strncat(uriqp, (char *)op->ov, op->ol);
    6e16:	8862      	ldrh	r2, [r4, #2]
    6e18:	6861      	ldr	r1, [r4, #4]
    6e1a:	4668      	mov	r0, sp
    6e1c:	f006 ff72 	bl	dd04 <strncat>
    if (uriqp[0] != '\0') {
    6e20:	466b      	mov	r3, sp
    6e22:	781b      	ldrb	r3, [r3, #0]
    6e24:	2b00      	cmp	r3, #0
    6e26:	d004      	beq.n	6e32 <_ZL12coap_msg_logPK12coap_msg_ctx+0x9e>
        dlog(LOG_INFO, "Uri-Path-Query: %s", uriqp);
    6e28:	466a      	mov	r2, sp
    6e2a:	4913      	ldr	r1, [pc, #76]	; (6e78 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe4>)
    6e2c:	2006      	movs	r0, #6
    6e2e:	f7fd fab7 	bl	43a0 <_Z4dlogiPKcz>
}
    6e32:	b040      	add	sp, #256	; 0x100
    6e34:	bd10      	pop	{r4, pc}
        dlog(LOG_DEBUG, "RSP Code: %s",
    6e36:	4a11      	ldr	r2, [pc, #68]	; (6e7c <_ZL12coap_msg_logPK12coap_msg_ctx+0xe8>)
    6e38:	2940      	cmp	r1, #64	; 0x40
    6e3a:	d003      	beq.n	6e44 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb0>
    6e3c:	4a10      	ldr	r2, [pc, #64]	; (6e80 <_ZL12coap_msg_logPK12coap_msg_ctx+0xec>)
    6e3e:	2980      	cmp	r1, #128	; 0x80
    6e40:	d000      	beq.n	6e44 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb0>
    6e42:	4a10      	ldr	r2, [pc, #64]	; (6e84 <_ZL12coap_msg_logPK12coap_msg_ctx+0xf0>)
                    "Client Error" : "Server Error");
    6e44:	4910      	ldr	r1, [pc, #64]	; (6e88 <_ZL12coap_msg_logPK12coap_msg_ctx+0xf4>)
    6e46:	e7cd      	b.n	6de4 <_ZL12coap_msg_logPK12coap_msg_ctx+0x50>
    6e48:	000113bb 	.word	0x000113bb
    6e4c:	000113b7 	.word	0x000113b7
    6e50:	000113c3 	.word	0x000113c3
    6e54:	000113bf 	.word	0x000113bf
    6e58:	00011403 	.word	0x00011403
    6e5c:	000113cc 	.word	0x000113cc
    6e60:	000113c7 	.word	0x000113c7
    6e64:	000113d0 	.word	0x000113d0
    6e68:	000113da 	.word	0x000113da
    6e6c:	000113d4 	.word	0x000113d4
    6e70:	00011414 	.word	0x00011414
    6e74:	00010d55 	.word	0x00010d55
    6e78:	00011432 	.word	0x00011432
    6e7c:	000113ee 	.word	0x000113ee
    6e80:	000113f6 	.word	0x000113f6
    6e84:	000113e1 	.word	0x000113e1
    6e88:	00011425 	.word	0x00011425

00006e8c <_Z14coap_opt_parseP5optlvPKhi>:
{
    6e8c:	b570      	push	{r4, r5, r6, lr}
    6e8e:	260f      	movs	r6, #15
    od = b[0] >> 4;
    6e90:	780b      	ldrb	r3, [r1, #0]
    6e92:	111d      	asrs	r5, r3, #4
    6e94:	b2ac      	uxth	r4, r5
    6e96:	4033      	ands	r3, r6
    if (od < 13) {
    6e98:	2d0c      	cmp	r5, #12
    6e9a:	dd13      	ble.n	6ec4 <_Z14coap_opt_parseP5optlvPKhi+0x38>
    else if (od == 13) {
    6e9c:	2d0d      	cmp	r5, #13
    6e9e:	d106      	bne.n	6eae <_Z14coap_opt_parseP5optlvPKhi+0x22>
        od += b[1];
    6ea0:	784c      	ldrb	r4, [r1, #1]
        i = 2;
    6ea2:	3d0b      	subs	r5, #11
        od += b[1];
    6ea4:	340d      	adds	r4, #13
    if (ol < 13) {
    6ea6:	2b0c      	cmp	r3, #12
    6ea8:	d80e      	bhi.n	6ec8 <_Z14coap_opt_parseP5optlvPKhi+0x3c>
        ol = (b[i] << 8) + b[i+1] + 269;
    6eaa:	b29b      	uxth	r3, r3
    6eac:	e011      	b.n	6ed2 <_Z14coap_opt_parseP5optlvPKhi+0x46>
    else if (od == 14) {
    6eae:	2d0e      	cmp	r5, #14
    6eb0:	d124      	bne.n	6efc <_Z14coap_opt_parseP5optlvPKhi+0x70>
        od = (b[1] << 8) + b[2] + 269;
    6eb2:	788c      	ldrb	r4, [r1, #2]
    6eb4:	784d      	ldrb	r5, [r1, #1]
    6eb6:	340e      	adds	r4, #14
    6eb8:	022d      	lsls	r5, r5, #8
    6eba:	34ff      	adds	r4, #255	; 0xff
    6ebc:	1964      	adds	r4, r4, r5
    6ebe:	b2a4      	uxth	r4, r4
        i = 3;
    6ec0:	2503      	movs	r5, #3
    6ec2:	e7f0      	b.n	6ea6 <_Z14coap_opt_parseP5optlvPKhi+0x1a>
        i = 1;
    6ec4:	2501      	movs	r5, #1
    6ec6:	e7ee      	b.n	6ea6 <_Z14coap_opt_parseP5optlvPKhi+0x1a>
    else if (ol == 13) {
    6ec8:	2b0d      	cmp	r3, #13
    6eca:	d10d      	bne.n	6ee8 <_Z14coap_opt_parseP5optlvPKhi+0x5c>
        ol += b[i];
    6ecc:	5d4b      	ldrb	r3, [r1, r5]
        i++;
    6ece:	3501      	adds	r5, #1
        ol += b[i];
    6ed0:	330d      	adds	r3, #13
    if (len < i || len < i + ol) {
    6ed2:	4295      	cmp	r5, r2
    6ed4:	dc12      	bgt.n	6efc <_Z14coap_opt_parseP5optlvPKhi+0x70>
    6ed6:	195e      	adds	r6, r3, r5
    6ed8:	42b2      	cmp	r2, r6
    6eda:	db0f      	blt.n	6efc <_Z14coap_opt_parseP5optlvPKhi+0x70>
    o->ov = b + i;
    6edc:	1949      	adds	r1, r1, r5
    o->ot = od;
    6ede:	8004      	strh	r4, [r0, #0]
    o->ol = ol;
    6ee0:	8043      	strh	r3, [r0, #2]
    o->ov = b + i;
    6ee2:	6041      	str	r1, [r0, #4]
}
    6ee4:	0030      	movs	r0, r6
    6ee6:	bd70      	pop	{r4, r5, r6, pc}
    else if (od == 14) {
    6ee8:	2c0e      	cmp	r4, #14
    6eea:	d107      	bne.n	6efc <_Z14coap_opt_parseP5optlvPKhi+0x70>
        ol = (b[i] << 8) + b[i+1] + 269;
    6eec:	5d4e      	ldrb	r6, [r1, r5]
    6eee:	194b      	adds	r3, r1, r5
    6ef0:	785b      	ldrb	r3, [r3, #1]
    6ef2:	0236      	lsls	r6, r6, #8
    6ef4:	199b      	adds	r3, r3, r6
    6ef6:	330e      	adds	r3, #14
    6ef8:	33ff      	adds	r3, #255	; 0xff
    6efa:	e7d6      	b.n	6eaa <_Z14coap_opt_parseP5optlvPKhi+0x1e>
    return -1;
    6efc:	2601      	movs	r6, #1
    6efe:	4276      	negs	r6, r6
    6f00:	e7f0      	b.n	6ee4 <_Z14coap_opt_parseP5optlvPKhi+0x58>
	...

00006f04 <_Z12coap_opt_addPK5optlvPhi>:
{
    6f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f06:	000e      	movs	r6, r1
    if ((o->ot > 255 + 13) || (o->ol > 255 + 13)) {
    6f08:	2186      	movs	r1, #134	; 0x86
    6f0a:	8803      	ldrh	r3, [r0, #0]
{
    6f0c:	0005      	movs	r5, r0
    if ((o->ot > 255 + 13) || (o->ol > 255 + 13)) {
    6f0e:	0049      	lsls	r1, r1, #1
    6f10:	428b      	cmp	r3, r1
    6f12:	dc34      	bgt.n	6f7e <_Z12coap_opt_addPK5optlvPhi+0x7a>
    6f14:	8847      	ldrh	r7, [r0, #2]
    6f16:	428f      	cmp	r7, r1
    6f18:	dc31      	bgt.n	6f7e <_Z12coap_opt_addPK5optlvPhi+0x7a>
    6f1a:	a901      	add	r1, sp, #4
    if (o->ot < 13) {
    6f1c:	2b0c      	cmp	r3, #12
    6f1e:	dc12      	bgt.n	6f46 <_Z12coap_opt_addPK5optlvPhi+0x42>
        *op++ = o->ot << 4;
    6f20:	011b      	lsls	r3, r3, #4
    6f22:	700b      	strb	r3, [r1, #0]
    6f24:	466b      	mov	r3, sp
    6f26:	1d5c      	adds	r4, r3, #5
    if (o->ol < 13) {
    6f28:	2f0c      	cmp	r7, #12
    6f2a:	dc13      	bgt.n	6f54 <_Z12coap_opt_addPK5optlvPhi+0x50>
        oh[0] |= o->ol;
    6f2c:	780b      	ldrb	r3, [r1, #0]
    6f2e:	433b      	orrs	r3, r7
    6f30:	700b      	strb	r3, [r1, #0]
    ohl = op - oh;
    6f32:	1a64      	subs	r4, r4, r1
    if (ohl + o->ol > len) {
    6f34:	193f      	adds	r7, r7, r4
    6f36:	4297      	cmp	r7, r2
    6f38:	dd15      	ble.n	6f66 <_Z12coap_opt_addPK5optlvPhi+0x62>
        dlog(LOG_ERR, "Insufficient buffer space to add option\n");
    6f3a:	2003      	movs	r0, #3
    6f3c:	4911      	ldr	r1, [pc, #68]	; (6f84 <_Z12coap_opt_addPK5optlvPhi+0x80>)
    6f3e:	f7fd fa2f 	bl	43a0 <_Z4dlogiPKcz>
        return 0;
    6f42:	2000      	movs	r0, #0
}
    6f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *op++ = o->ot - 13;
    6f46:	3b0d      	subs	r3, #13
        *op++ = 13 << 4;
    6f48:	20d0      	movs	r0, #208	; 0xd0
        *op++ = o->ot - 13;
    6f4a:	704b      	strb	r3, [r1, #1]
    6f4c:	466b      	mov	r3, sp
        *op++ = 13 << 4;
    6f4e:	7008      	strb	r0, [r1, #0]
        *op++ = o->ot - 13;
    6f50:	1d9c      	adds	r4, r3, #6
    6f52:	e7e9      	b.n	6f28 <_Z12coap_opt_addPK5optlvPhi+0x24>
        oh[0] |= 13;
    6f54:	230d      	movs	r3, #13
    6f56:	7808      	ldrb	r0, [r1, #0]
    6f58:	4303      	orrs	r3, r0
    6f5a:	700b      	strb	r3, [r1, #0]
        *op++ = o->ol - 13;
    6f5c:	003b      	movs	r3, r7
    6f5e:	3b0d      	subs	r3, #13
    6f60:	7023      	strb	r3, [r4, #0]
    6f62:	3401      	adds	r4, #1
    6f64:	e7e5      	b.n	6f32 <_Z12coap_opt_addPK5optlvPhi+0x2e>
    memcpy(b, oh, ohl);
    6f66:	0022      	movs	r2, r4
    6f68:	0030      	movs	r0, r6
    6f6a:	f005 fd92 	bl	ca92 <memcpy>
    memmove(b + ohl, o->ov, o->ol);
    6f6e:	886a      	ldrh	r2, [r5, #2]
    6f70:	1930      	adds	r0, r6, r4
    6f72:	6869      	ldr	r1, [r5, #4]
    6f74:	f005 fd96 	bl	caa4 <memmove>
    return (o->ol + ohl);
    6f78:	8868      	ldrh	r0, [r5, #2]
    6f7a:	1900      	adds	r0, r0, r4
    6f7c:	e7e2      	b.n	6f44 <_Z12coap_opt_addPK5optlvPhi+0x40>
        return -1;
    6f7e:	2001      	movs	r0, #1
    6f80:	4240      	negs	r0, r0
    6f82:	e7df      	b.n	6f44 <_Z12coap_opt_addPK5optlvPhi+0x40>
    6f84:	0001121e 	.word	0x0001121e

00006f88 <_Z13co_uint32_n2hPK5optlv>:
{
    6f88:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    6f8a:	8842      	ldrh	r2, [r0, #2]
{
    6f8c:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    6f8e:	2a04      	cmp	r2, #4
    6f90:	d906      	bls.n	6fa0 <_Z13co_uint32_n2hPK5optlv+0x18>
    6f92:	2120      	movs	r1, #32
    6f94:	4b14      	ldr	r3, [pc, #80]	; (6fe8 <_Z13co_uint32_n2hPK5optlv+0x60>)
    6f96:	4a15      	ldr	r2, [pc, #84]	; (6fec <_Z13co_uint32_n2hPK5optlv+0x64>)
    6f98:	31ff      	adds	r1, #255	; 0xff
    6f9a:	4815      	ldr	r0, [pc, #84]	; (6ff0 <_Z13co_uint32_n2hPK5optlv+0x68>)
    6f9c:	f005 fbfc 	bl	c798 <__assert_func>
    switch (o->ol) {
    6fa0:	3a01      	subs	r2, #1
    uint32_t b = 0;
    6fa2:	2000      	movs	r0, #0
    switch (o->ol) {
    6fa4:	2a03      	cmp	r2, #3
    6fa6:	d806      	bhi.n	6fb6 <_Z13co_uint32_n2hPK5optlv+0x2e>
    6fa8:	0010      	movs	r0, r2
    6faa:	f002 fc19 	bl	97e0 <__gnu_thumb1_case_uqi>
    6fae:	0502      	.short	0x0502
    6fb0:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    6fb2:	685b      	ldr	r3, [r3, #4]
    6fb4:	7818      	ldrb	r0, [r3, #0]
}
    6fb6:	bd10      	pop	{r4, pc}
    case 2: b = ntohs(*(uint16_t *)(o->ov));
    6fb8:	685b      	ldr	r3, [r3, #4]
    6fba:	881b      	ldrh	r3, [r3, #0]
    6fbc:	0a18      	lsrs	r0, r3, #8
    6fbe:	021b      	lsls	r3, r3, #8
    6fc0:	4318      	orrs	r0, r3
    6fc2:	b280      	uxth	r0, r0
            break;
    6fc4:	e7f7      	b.n	6fb6 <_Z13co_uint32_n2hPK5optlv+0x2e>
    case 3: b = ntohl(*(uint32_t *)(o->ov) << 8);
    6fc6:	685b      	ldr	r3, [r3, #4]
    6fc8:	490a      	ldr	r1, [pc, #40]	; (6ff4 <_Z13co_uint32_n2hPK5optlv+0x6c>)
    6fca:	681b      	ldr	r3, [r3, #0]
    6fcc:	0218      	lsls	r0, r3, #8
    6fce:	041a      	lsls	r2, r3, #16
    6fd0:	400a      	ands	r2, r1
    6fd2:	0e00      	lsrs	r0, r0, #24
    6fd4:	4310      	orrs	r0, r2
    6fd6:	22ff      	movs	r2, #255	; 0xff
    6fd8:	0212      	lsls	r2, r2, #8
    6fda:	4013      	ands	r3, r2
    6fdc:	4318      	orrs	r0, r3
            break;
    6fde:	e7ea      	b.n	6fb6 <_Z13co_uint32_n2hPK5optlv+0x2e>
    6fe0:	0018      	movs	r0, r3
    6fe2:	f7ff fe56 	bl	6c92 <_Z13co_uint32_h2nPK5optlv.part.1>
    6fe6:	e7e6      	b.n	6fb6 <_Z13co_uint32_n2hPK5optlv+0x2e>
    6fe8:	00011247 	.word	0x00011247
    6fec:	0001146a 	.word	0x0001146a
    6ff0:	00011261 	.word	0x00011261
    6ff4:	00ffff00 	.word	0x00ffff00

00006ff8 <_Z13co_uint32_h2nPK5optlv>:
{
    6ff8:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    6ffa:	8842      	ldrh	r2, [r0, #2]
{
    6ffc:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    6ffe:	2a04      	cmp	r2, #4
    7000:	d906      	bls.n	7010 <_Z13co_uint32_h2nPK5optlv+0x18>
    7002:	2136      	movs	r1, #54	; 0x36
    7004:	4b14      	ldr	r3, [pc, #80]	; (7058 <_Z13co_uint32_h2nPK5optlv+0x60>)
    7006:	4a15      	ldr	r2, [pc, #84]	; (705c <_Z13co_uint32_h2nPK5optlv+0x64>)
    7008:	31ff      	adds	r1, #255	; 0xff
    700a:	4815      	ldr	r0, [pc, #84]	; (7060 <_Z13co_uint32_h2nPK5optlv+0x68>)
    700c:	f005 fbc4 	bl	c798 <__assert_func>
    switch (o->ol) {
    7010:	3a01      	subs	r2, #1
    uint32_t b = 0;
    7012:	2000      	movs	r0, #0
    switch (o->ol) {
    7014:	2a03      	cmp	r2, #3
    7016:	d806      	bhi.n	7026 <_Z13co_uint32_h2nPK5optlv+0x2e>
    7018:	0010      	movs	r0, r2
    701a:	f002 fbe1 	bl	97e0 <__gnu_thumb1_case_uqi>
    701e:	0502      	.short	0x0502
    7020:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    7022:	685b      	ldr	r3, [r3, #4]
    7024:	7818      	ldrb	r0, [r3, #0]
}
    7026:	bd10      	pop	{r4, pc}
    case 2: b = htons(*(uint16_t *)(o->ov));
    7028:	685b      	ldr	r3, [r3, #4]
    702a:	881b      	ldrh	r3, [r3, #0]
    702c:	0a18      	lsrs	r0, r3, #8
    702e:	021b      	lsls	r3, r3, #8
    7030:	4318      	orrs	r0, r3
    7032:	b280      	uxth	r0, r0
            break;
    7034:	e7f7      	b.n	7026 <_Z13co_uint32_h2nPK5optlv+0x2e>
    case 3: b = htonl(*(uint32_t *)(o->ov) << 8);
    7036:	685b      	ldr	r3, [r3, #4]
    7038:	490a      	ldr	r1, [pc, #40]	; (7064 <_Z13co_uint32_h2nPK5optlv+0x6c>)
    703a:	681b      	ldr	r3, [r3, #0]
    703c:	0218      	lsls	r0, r3, #8
    703e:	041a      	lsls	r2, r3, #16
    7040:	400a      	ands	r2, r1
    7042:	0e00      	lsrs	r0, r0, #24
    7044:	4310      	orrs	r0, r2
    7046:	22ff      	movs	r2, #255	; 0xff
    7048:	0212      	lsls	r2, r2, #8
    704a:	4013      	ands	r3, r2
    704c:	4318      	orrs	r0, r3
            break;
    704e:	e7ea      	b.n	7026 <_Z13co_uint32_h2nPK5optlv+0x2e>
    7050:	0018      	movs	r0, r3
    7052:	f7ff fe1e 	bl	6c92 <_Z13co_uint32_h2nPK5optlv.part.1>
    7056:	e7e6      	b.n	7026 <_Z13co_uint32_h2nPK5optlv+0x2e>
    7058:	00011247 	.word	0x00011247
    705c:	00011445 	.word	0x00011445
    7060:	00011261 	.word	0x00011261
    7064:	00ffff00 	.word	0x00ffff00

00007068 <_Z11get_mid_valv>:
{
    7068:	b510      	push	{r4, lr}
    if (!mid_val) 
    706a:	4c05      	ldr	r4, [pc, #20]	; (7080 <_Z11get_mid_valv+0x18>)
    706c:	8823      	ldrh	r3, [r4, #0]
    706e:	2b00      	cmp	r3, #0
    7070:	d102      	bne.n	7078 <_Z11get_mid_valv+0x10>
        uint32_t epoch = get_rtc_epoch();
    7072:	f7fd f8fd 	bl	4270 <_Z13get_rtc_epochv>
        mid_val = (uint16_t) ( epoch & 0x0000FFFF );
    7076:	8020      	strh	r0, [r4, #0]
    return mid_val++;
    7078:	8820      	ldrh	r0, [r4, #0]
    707a:	1c43      	adds	r3, r0, #1
    707c:	8023      	strh	r3, [r4, #0]
}
    707e:	bd10      	pop	{r4, pc}
    7080:	200012b4 	.word	0x200012b4

00007084 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh>:
 * @return: 0 on success, nonzero error/special handling code. 
 */
error_t coap_msg_parse(struct coap_msg_ctx *ctx, struct mbuf *m, uint8_t *code)
{
    int i, osize, mdatalen;
    uint8_t *b = m->m_data; /* assuming single buffer */
    7084:	000b      	movs	r3, r1
{
    7086:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t *b = m->m_data; /* assuming single buffer */
    7088:	3304      	adds	r3, #4
{
    708a:	b08b      	sub	sp, #44	; 0x2c
    uint8_t *b = m->m_data; /* assuming single buffer */
    708c:	9305      	str	r3, [sp, #20]
    int len = m->m_pktlen;
    708e:	880b      	ldrh	r3, [r1, #0]
{
    7090:	0006      	movs	r6, r0
    int len = m->m_pktlen;
    7092:	9302      	str	r3, [sp, #8]
    uint16_t ot;
    error_t rc;
    uint32_t obsval;

    /* Default code, indicating everything okay, so far. */
    *code = COAP_RSP_205_CONTENT;
    7094:	2345      	movs	r3, #69	; 0x45
{
    7096:	9104      	str	r1, [sp, #16]
    *code = COAP_RSP_205_CONTENT;
    7098:	7013      	strb	r3, [r2, #0]
{
    709a:	9203      	str	r2, [sp, #12]

    ddump(LOG_DEBUG, "CoAP REQ decode", b, len);
    709c:	9b02      	ldr	r3, [sp, #8]
    709e:	9a05      	ldr	r2, [sp, #20]
    70a0:	4953      	ldr	r1, [pc, #332]	; (71f0 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x16c>)
    70a2:	2007      	movs	r0, #7
    70a4:	f7fd f99e 	bl	43e4 <_Z5ddumpiPKcPKvi>
    
    if ((rc = coap_hdr_parse(ctx, m)) != ERR_OK) {
    70a8:	9904      	ldr	r1, [sp, #16]
    70aa:	0030      	movs	r0, r6
    70ac:	f7ff fdd0 	bl	6c50 <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf>
    70b0:	9001      	str	r0, [sp, #4]
    70b2:	2800      	cmp	r0, #0
    70b4:	d13d      	bne.n	7132 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        goto err;
    }

    i = 4 + ctx->tkl;

    ctx->final = 1; /* default value, not ongoing observe */
    70b6:	2701      	movs	r7, #1
    i = 4 + ctx->tkl;
    70b8:	7875      	ldrb	r5, [r6, #1]
    ctx->oidx = i;  /* where options will start, or maybe payload marker */

    if (ctx->code == COAP_EMPTY_MESSAGE) {
    70ba:	78b3      	ldrb	r3, [r6, #2]
    i = 4 + ctx->tkl;
    70bc:	3504      	adds	r5, #4
    ctx->final = 1; /* default value, not ongoing observe */
    70be:	64b7      	str	r7, [r6, #72]	; 0x48
    ctx->oidx = i;  /* where options will start, or maybe payload marker */
    70c0:	61b5      	str	r5, [r6, #24]
    if (ctx->code == COAP_EMPTY_MESSAGE) {
    70c2:	2b00      	cmp	r3, #0
    70c4:	d035      	beq.n	7132 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        /* ignore everything else */
        return ERR_OK;
    }

    // Make sure the packet length is not greater than what is allocated by m_get()
	mdatalen = get_mbuf_data_size()-16;
    70c6:	f001 f94b 	bl	8360 <_Z18get_mbuf_data_sizev>
    if ( len > mdatalen )
    70ca:	9b02      	ldr	r3, [sp, #8]
	mdatalen = get_mbuf_data_size()-16;
    70cc:	3810      	subs	r0, #16
    if ( len > mdatalen )
    70ce:	4283      	cmp	r3, r0
    70d0:	dc32      	bgt.n	7138 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xb4>
    70d2:	9c01      	ldr	r4, [sp, #4]
                ctx->final = 0;
            }
            break;
        default:
            /* unhandled critical option */
            if (COAP_OPTION_CRITICAL(ot)) {
    70d4:	9707      	str	r7, [sp, #28]
    while ((osize = coap_opt_parse(&opt, b + i, len - i)) > 0) {
    70d6:	9b05      	ldr	r3, [sp, #20]
    70d8:	a808      	add	r0, sp, #32
    70da:	195f      	adds	r7, r3, r5
    70dc:	9b02      	ldr	r3, [sp, #8]
    70de:	0039      	movs	r1, r7
    70e0:	1b5a      	subs	r2, r3, r5
    70e2:	f7ff fed3 	bl	6e8c <_Z14coap_opt_parseP5optlvPKhi>
    70e6:	9006      	str	r0, [sp, #24]
    70e8:	2800      	cmp	r0, #0
    70ea:	dd63      	ble.n	71b4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x130>
        ot += opt.ot;
    70ec:	ab08      	add	r3, sp, #32
    70ee:	881b      	ldrh	r3, [r3, #0]
        dlog(LOG_DEBUG, "option type: %u len: %u", ot, opt.ol);
    70f0:	4940      	ldr	r1, [pc, #256]	; (71f4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x170>)
        ot += opt.ot;
    70f2:	18e4      	adds	r4, r4, r3
    70f4:	b2a4      	uxth	r4, r4
        dlog(LOG_DEBUG, "option type: %u len: %u", ot, opt.ol);
    70f6:	ab08      	add	r3, sp, #32
    70f8:	885b      	ldrh	r3, [r3, #2]
    70fa:	0022      	movs	r2, r4
    70fc:	2007      	movs	r0, #7
    70fe:	f7fd f94f 	bl	43a0 <_Z4dlogiPKcz>
        ddump(LOG_DEBUG, "option", opt.ov, opt.ol);
    7102:	ab08      	add	r3, sp, #32
    7104:	885b      	ldrh	r3, [r3, #2]
    7106:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7108:	493b      	ldr	r1, [pc, #236]	; (71f8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x174>)
    710a:	2007      	movs	r0, #7
    710c:	f7fd f96a 	bl	43e4 <_Z5ddumpiPKcPKvi>
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    7110:	0030      	movs	r0, r6
        opt.ot = ot;
    7112:	ab08      	add	r3, sp, #32
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    7114:	0019      	movs	r1, r3
    7116:	304c      	adds	r0, #76	; 0x4c
        opt.ot = ot;
    7118:	801c      	strh	r4, [r3, #0]
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    711a:	f000 fae7 	bl	76ec <_Z12copt_add_optP5sl_coP5optlv>
    711e:	1e07      	subs	r7, r0, #0
    7120:	d010      	beq.n	7144 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xc0>
            dlog(LOG_ALERT, "Couldn't save option data");
    7122:	4936      	ldr	r1, [pc, #216]	; (71fc <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x178>)
    7124:	2001      	movs	r0, #1
    7126:	f7fd f93b 	bl	43a0 <_Z4dlogiPKcz>
            *code = COAP_RSP_500_INTERNAL_ERROR;
    712a:	23a0      	movs	r3, #160	; 0xa0
    712c:	9a03      	ldr	r2, [sp, #12]
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    712e:	9701      	str	r7, [sp, #4]
            *code = COAP_RSP_500_INTERNAL_ERROR;
    7130:	7013      	strb	r3, [r2, #0]
    m->m_pktlen = len;

    coap_msg_log(ctx);
err:
    return rc;
}
    7132:	9801      	ldr	r0, [sp, #4]
    7134:	b00b      	add	sp, #44	; 0x2c
    7136:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*code = COAP_RSP_413_REQ_TOO_LARGE;
    7138:	238d      	movs	r3, #141	; 0x8d
    713a:	9a03      	ldr	r2, [sp, #12]
    713c:	7013      	strb	r3, [r2, #0]
		return ERR_MSGSIZE;
    713e:	3b83      	subs	r3, #131	; 0x83
                rc = ERR_OP_NOT_SUPP;
    7140:	9301      	str	r3, [sp, #4]
                goto err;
    7142:	e7f6      	b.n	7132 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        i += osize;
    7144:	9b06      	ldr	r3, [sp, #24]
    7146:	18ed      	adds	r5, r5, r3
        switch (ot) {
    7148:	2c0f      	cmp	r4, #15
    714a:	d820      	bhi.n	718e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x10a>
    714c:	2c0e      	cmp	r4, #14
    714e:	d2c2      	bcs.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    7150:	2c07      	cmp	r4, #7
    7152:	d0c0      	beq.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    7154:	d810      	bhi.n	7178 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xf4>
    7156:	2c03      	cmp	r4, #3
    7158:	d0bd      	beq.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    715a:	2c06      	cmp	r4, #6
    715c:	d022      	beq.n	71a4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x120>
            if (COAP_OPTION_CRITICAL(ot)) {
    715e:	9b07      	ldr	r3, [sp, #28]
    7160:	421c      	tst	r4, r3
    7162:	d0b8      	beq.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
                dlog(LOG_ERR, "unhandled critical option %d\n", ot);
    7164:	0022      	movs	r2, r4
    7166:	4926      	ldr	r1, [pc, #152]	; (7200 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x17c>)
    7168:	2003      	movs	r0, #3
    716a:	f7fd f919 	bl	43a0 <_Z4dlogiPKcz>
                *code = COAP_RSP_402_BAD_OPTION;
    716e:	2382      	movs	r3, #130	; 0x82
    7170:	9a03      	ldr	r2, [sp, #12]
    7172:	7013      	strb	r3, [r2, #0]
                rc = ERR_OP_NOT_SUPP;
    7174:	3b81      	subs	r3, #129	; 0x81
    7176:	e7e3      	b.n	7140 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xbc>
        switch (ot) {
    7178:	2c0b      	cmp	r4, #11
    717a:	d0ac      	beq.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    717c:	2c0c      	cmp	r4, #12
    717e:	d1ee      	bne.n	715e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
            ctx->cf = co_uint8(&opt)    ;/*FIXME*/
    7180:	a808      	add	r0, sp, #32
    7182:	f7ff fd59 	bl	6c38 <_ZL8co_uint8PK5optlv>
    7186:	0033      	movs	r3, r6
    7188:	333c      	adds	r3, #60	; 0x3c
    718a:	7018      	strb	r0, [r3, #0]
            break;
    718c:	e7a3      	b.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
        switch (ot) {
    718e:	2c17      	cmp	r4, #23
    7190:	d0a1      	beq.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    7192:	d802      	bhi.n	719a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x116>
    7194:	2c11      	cmp	r4, #17
    7196:	d0f3      	beq.n	7180 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xfc>
    7198:	e7e1      	b.n	715e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
    719a:	2c23      	cmp	r4, #35	; 0x23
    719c:	d09b      	beq.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    719e:	2c27      	cmp	r4, #39	; 0x27
    71a0:	d1dd      	bne.n	715e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
    71a2:	e798      	b.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
            obsval = co_uint32_n2h(&opt);
    71a4:	a808      	add	r0, sp, #32
    71a6:	f7ff feef 	bl	6f88 <_Z13co_uint32_n2hPK5optlv>
            if (obsval == COAP_OBS_REG) {
    71aa:	2800      	cmp	r0, #0
    71ac:	d000      	beq.n	71b0 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x12c>
    71ae:	e792      	b.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
                ctx->final = 0;
    71b0:	64b0      	str	r0, [r6, #72]	; 0x48
    71b2:	e790      	b.n	70d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    if (ot && i != len) {
    71b4:	2c00      	cmp	r4, #0
    71b6:	d00f      	beq.n	71d8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x154>
    71b8:	9b02      	ldr	r3, [sp, #8]
    71ba:	429d      	cmp	r5, r3
    71bc:	d00c      	beq.n	71d8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x154>
        if (b[i] != 0xFF) {
    71be:	783b      	ldrb	r3, [r7, #0]
    71c0:	2bff      	cmp	r3, #255	; 0xff
    71c2:	d008      	beq.n	71d6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x152>
            dlog(LOG_ERR, "missing option separator FF");
    71c4:	490f      	ldr	r1, [pc, #60]	; (7204 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x180>)
    71c6:	2003      	movs	r0, #3
    71c8:	f7fd f8ea 	bl	43a0 <_Z4dlogiPKcz>
            *code = COAP_RSP_415_UNSUPPORTED_CFORMAT;
    71cc:	238f      	movs	r3, #143	; 0x8f
    71ce:	9a03      	ldr	r2, [sp, #12]
    71d0:	7013      	strb	r3, [r2, #0]
            rc = ERR_BAD_DATA;
    71d2:	3b7b      	subs	r3, #123	; 0x7b
    71d4:	e7b4      	b.n	7140 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xbc>
        i++;
    71d6:	3501      	adds	r5, #1
    m->m_pktlen = len;
    71d8:	466a      	mov	r2, sp
    ctx->plen = len - i;
    71da:	9b02      	ldr	r3, [sp, #8]
    ctx->hdrlen = i;
    71dc:	6175      	str	r5, [r6, #20]
    m->m_pktlen = len;
    71de:	8912      	ldrh	r2, [r2, #8]
    ctx->plen = len - i;
    71e0:	1b5d      	subs	r5, r3, r5
    m->m_pktlen = len;
    71e2:	9b04      	ldr	r3, [sp, #16]
    ctx->plen = len - i;
    71e4:	6435      	str	r5, [r6, #64]	; 0x40
    coap_msg_log(ctx);
    71e6:	0030      	movs	r0, r6
    m->m_pktlen = len;
    71e8:	801a      	strh	r2, [r3, #0]
    coap_msg_log(ctx);
    71ea:	f7ff fdd3 	bl	6d94 <_ZL12coap_msg_logPK12coap_msg_ctx>
    71ee:	e7a0      	b.n	7132 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
    71f0:	000112ab 	.word	0x000112ab
    71f4:	000112bb 	.word	0x000112bb
    71f8:	0001171e 	.word	0x0001171e
    71fc:	000112d3 	.word	0x000112d3
    7200:	000112ed 	.word	0x000112ed
    7204:	0001130b 	.word	0x0001130b

00007208 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>:

/* initialize response message context based on request + mbuf */
void       
coap_init_rsp(const struct coap_msg_ctx *req, struct coap_msg_ctx *rsp, 
              struct mbuf *m)
{
    7208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    720a:	000c      	movs	r4, r1
    struct optlv *op;
    memset(rsp, 0, sizeof(*rsp));
    copt_init((sl_co*)&(rsp->oh));
    720c:	0026      	movs	r6, r4
{
    720e:	0005      	movs	r5, r0
    memset(rsp, 0, sizeof(*rsp));
    7210:	2100      	movs	r1, #0
{
    7212:	0017      	movs	r7, r2
    memset(rsp, 0, sizeof(*rsp));
    7214:	0020      	movs	r0, r4
    7216:	2254      	movs	r2, #84	; 0x54
    copt_init((sl_co*)&(rsp->oh));
    7218:	364c      	adds	r6, #76	; 0x4c
    memset(rsp, 0, sizeof(*rsp));
    721a:	f005 fc55 	bl	cac8 <memset>
    copt_init((sl_co*)&(rsp->oh));
    721e:	0030      	movs	r0, r6
    7220:	f000 fa30 	bl	7684 <_Z9copt_initP5sl_co>
    /*
     * type will be a bit tricker than this. CON->ACK, except if it's empty,
     * then RST. NON->NON. We need to know more about the message before
     * setting the RSP type.
     */
    rsp->type = req->type;
    7224:	782b      	ldrb	r3, [r5, #0]
    rsp->tkl = req->tkl;
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    7226:	1da9      	adds	r1, r5, #6
    rsp->type = req->type;
    7228:	7023      	strb	r3, [r4, #0]
    rsp->tkl = req->tkl;
    722a:	786b      	ldrb	r3, [r5, #1]
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    722c:	2208      	movs	r2, #8
    rsp->tkl = req->tkl;
    722e:	7063      	strb	r3, [r4, #1]
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    7230:	1da0      	adds	r0, r4, #6
    7232:	f005 fc2e 	bl	ca92 <memcpy>

    /*
     * TODO OBS: Could replicate behaviour by adding the option. Need to know
     * when to add a value. Maybe this isn't required. Check context of calls.
     */
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    7236:	0028      	movs	r0, r5
    rsp->mid = req->mid;
    7238:	88ab      	ldrh	r3, [r5, #4]
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    723a:	304c      	adds	r0, #76	; 0x4c
    rsp->mid = req->mid;
    723c:	80a3      	strh	r3, [r4, #4]
    rsp->client = req->client;
    723e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    7240:	2200      	movs	r2, #0
    rsp->client = req->client;
    7242:	6463      	str	r3, [r4, #68]	; 0x44
    rsp->final = req->final;
    7244:	6cab      	ldr	r3, [r5, #72]	; 0x48
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    7246:	2106      	movs	r1, #6
    rsp->final = req->final;
    7248:	64a3      	str	r3, [r4, #72]	; 0x48
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    724a:	f000 fa91 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    724e:	2800      	cmp	r0, #0
    7250:	d015      	beq.n	727e <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
               != NULL) {
        uint32_t obsval = co_uint32_n2h(op);
    7252:	f7ff fe99 	bl	6f88 <_Z13co_uint32_n2hPK5optlv>
        if (!rsp->final && obsval == COAP_OBS_REG) {
    7256:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7258:	2b00      	cmp	r3, #0
    725a:	d110      	bne.n	727e <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
    725c:	2800      	cmp	r0, #0
    725e:	d10e      	bne.n	727e <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
            /*
             * If this is proxied, then this info isn't used to build the
             * response anyway. The sensor sends the packet. The same applies
             * for local async observe.
             */
            nop.ot = COAP_OPTION_OBSERVE;
    7260:	466a      	mov	r2, sp
            nop.ol = 3;
    7262:	2503      	movs	r5, #3
            nop.ot = COAP_OPTION_OBSERVE;
    7264:	3306      	adds	r3, #6
            if (copt_add_opt((sl_co*)&(rsp->oh), &nop) != ERR_OK) {
    7266:	4669      	mov	r1, sp
    7268:	0030      	movs	r0, r6
            nop.ot = COAP_OPTION_OBSERVE;
    726a:	8013      	strh	r3, [r2, #0]
            nop.ol = 3;
    726c:	8055      	strh	r5, [r2, #2]
            if (copt_add_opt((sl_co*)&(rsp->oh), &nop) != ERR_OK) {
    726e:	f000 fa3d 	bl	76ec <_Z12copt_add_optP5sl_coP5optlv>
    7272:	2800      	cmp	r0, #0
    7274:	d003      	beq.n	727e <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
                dlog(LOG_ERR, "Couldn't add observe option");
    7276:	4903      	ldr	r1, [pc, #12]	; (7284 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x7c>)
    7278:	0028      	movs	r0, r5
    727a:	f7fd f891 	bl	43a0 <_Z4dlogiPKcz>
            }
        }
    }

    rsp->msg = m;
    727e:	6527      	str	r7, [r4, #80]	; 0x50
}
    7280:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7282:	46c0      	nop			; (mov r8, r8)
    7284:	0001128f 	.word	0x0001128f

00007288 <_Z17coap_msg_responseP12coap_msg_ctx>:
 *
 * @return: Status; 0 - OK.
 */
error_t
coap_msg_response(struct coap_msg_ctx *ctx)
{
    7288:	b5f0      	push	{r4, r5, r6, r7, lr}
    728a:	0006      	movs	r6, r0
    728c:	b08d      	sub	sp, #52	; 0x34

    int idx = 4;
    struct mbuf *n;


    coap_msg_log(ctx);
    728e:	f7ff fd81 	bl	6d94 <_ZL12coap_msg_logPK12coap_msg_ctx>

    b[0] = COAP_VER | COAP_T_VAL2PDU(ctx->type);
    7292:	2340      	movs	r3, #64	; 0x40
    7294:	7832      	ldrb	r2, [r6, #0]
    7296:	ad05      	add	r5, sp, #20
    7298:	0112      	lsls	r2, r2, #4
    729a:	4313      	orrs	r3, r2
    729c:	702b      	strb	r3, [r5, #0]
    if (ctx->code == COAP_EMPTY_MESSAGE) {
    729e:	78b3      	ldrb	r3, [r6, #2]
    72a0:	2b00      	cmp	r3, #0
    72a2:	d11c      	bne.n	72de <_Z17coap_msg_responseP12coap_msg_ctx+0x56>
    int idx = 4;
    72a4:	2404      	movs	r4, #4
        b[1] = COAP_EMPTY_MESSAGE;
    72a6:	706b      	strb	r3, [r5, #1]
        b[2] = ctx->mid >> 8;
    72a8:	88b3      	ldrh	r3, [r6, #4]
    72aa:	121a      	asrs	r2, r3, #8
    72ac:	70aa      	strb	r2, [r5, #2]
        b[3] = ctx->mid & 0xFF;
    72ae:	70eb      	strb	r3, [r5, #3]
        }
    }
    assert(idx <= COAP_OBS_HDR_SZ);

    /* prepend header to response */
    n = m_prepend(ctx->msg, idx);
    72b0:	0021      	movs	r1, r4
    72b2:	6d30      	ldr	r0, [r6, #80]	; 0x50
    72b4:	f001 f8a0 	bl	83f8 <_Z9m_prependP4mbufi>
    72b8:	0007      	movs	r7, r0
    if (!n) {
        rc = ERR_NO_MEM;
    72ba:	2003      	movs	r0, #3
    if (!n) {
    72bc:	2f00      	cmp	r7, #0
    72be:	d04b      	beq.n	7358 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
        goto done;
    }
    ctx->msg = n;   /* A new mbuf may be required */
    72c0:	6537      	str	r7, [r6, #80]	; 0x50
    memcpy(n->m_data, b, idx);
    72c2:	1d3e      	adds	r6, r7, #4
    72c4:	0022      	movs	r2, r4
    72c6:	0029      	movs	r1, r5
    72c8:	0030      	movs	r0, r6
    72ca:	f005 fbe2 	bl	ca92 <memcpy>

    ddump(LOG_DEBUG, "Response", n->m_data, n->m_pktlen);
    72ce:	2007      	movs	r0, #7
    72d0:	883b      	ldrh	r3, [r7, #0]
    72d2:	0032      	movs	r2, r6
    72d4:	4951      	ldr	r1, [pc, #324]	; (741c <_Z17coap_msg_responseP12coap_msg_ctx+0x194>)
    72d6:	f7fd f885 	bl	43e4 <_Z5ddumpiPKcPKvi>
    error_t rc = ERR_OK;
    72da:	2000      	movs	r0, #0
    72dc:	e03c      	b.n	7358 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
    } else if (COAP_CLASS(ctx->code) >= 2) {
    72de:	2b3f      	cmp	r3, #63	; 0x3f
    72e0:	d800      	bhi.n	72e4 <_Z17coap_msg_responseP12coap_msg_ctx+0x5c>
    72e2:	e099      	b.n	7418 <_Z17coap_msg_responseP12coap_msg_ctx+0x190>
        b[1] = ctx->code;
    72e4:	706b      	strb	r3, [r5, #1]
        b[2] = ctx->mid >> 8;
    72e6:	88b3      	ldrh	r3, [r6, #4]
    72e8:	121a      	asrs	r2, r3, #8
    72ea:	70aa      	strb	r2, [r5, #2]
        b[3] = ctx->mid & 0xFF;
    72ec:	70eb      	strb	r3, [r5, #3]
        if (ctx->tkl) {
    72ee:	7874      	ldrb	r4, [r6, #1]
    72f0:	2c00      	cmp	r4, #0
    72f2:	d033      	beq.n	735c <_Z17coap_msg_responseP12coap_msg_ctx+0xd4>
                rc = ERR_INVAL;
    72f4:	2004      	movs	r0, #4
            if (ctx->tkl > 8) {
    72f6:	2c08      	cmp	r4, #8
    72f8:	dc2e      	bgt.n	7358 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
            memcpy(b + idx, ctx->token, ctx->tkl);
    72fa:	0022      	movs	r2, r4
    72fc:	1db1      	adds	r1, r6, #6
    72fe:	a806      	add	r0, sp, #24
    7300:	f005 fbc7 	bl	ca92 <memcpy>
            b[0] |= ctx->tkl;
    7304:	782b      	ldrb	r3, [r5, #0]
    7306:	4323      	orrs	r3, r4
    7308:	702b      	strb	r3, [r5, #0]
            idx += ctx->tkl;
    730a:	3404      	adds	r4, #4
        if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_OBSERVE, NULL))
    730c:	0033      	movs	r3, r6
    730e:	334c      	adds	r3, #76	; 0x4c
    7310:	2200      	movs	r2, #0
    7312:	2106      	movs	r1, #6
    7314:	0018      	movs	r0, r3
    7316:	9301      	str	r3, [sp, #4]
    7318:	f000 fa2a 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    731c:	2800      	cmp	r0, #0
    731e:	d021      	beq.n	7364 <_Z17coap_msg_responseP12coap_msg_ctx+0xdc>
            dopt = *op;  /* copy original but make type the delta */
    7320:	af03      	add	r7, sp, #12
            op->ov = &opt_val;
    7322:	ab02      	add	r3, sp, #8
    7324:	6043      	str	r3, [r0, #4]
            dopt = *op;  /* copy original but make type the delta */
    7326:	003b      	movs	r3, r7
    7328:	c806      	ldmia	r0!, {r1, r2}
    732a:	c306      	stmia	r3!, {r1, r2}
            opt_val = get_obs_val();
    732c:	f000 f8c6 	bl	74bc <_Z11get_obs_valv>
    7330:	9002      	str	r0, [sp, #8]
            opt_val = co_uint32_h2n(&dopt);
    7332:	0038      	movs	r0, r7
    7334:	f7ff fe60 	bl	6ff8 <_Z13co_uint32_h2nPK5optlv>
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7338:	221c      	movs	r2, #28
            dopt.ot = COAP_OPTION_OBSERVE - onum;
    733a:	2306      	movs	r3, #6
            opt_val = co_uint32_h2n(&dopt);
    733c:	9002      	str	r0, [sp, #8]
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    733e:	1b12      	subs	r2, r2, r4
    7340:	1929      	adds	r1, r5, r4
    7342:	0038      	movs	r0, r7
            dopt.ot = COAP_OPTION_OBSERVE - onum;
    7344:	803b      	strh	r3, [r7, #0]
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7346:	f7ff fddd 	bl	6f04 <_Z12coap_opt_addPK5optlvPhi>
    734a:	2800      	cmp	r0, #0
    734c:	d108      	bne.n	7360 <_Z17coap_msg_responseP12coap_msg_ctx+0xd8>
                dlog(LOG_ERR, "Couldn't add Observe option to msg");
    734e:	4934      	ldr	r1, [pc, #208]	; (7420 <_Z17coap_msg_responseP12coap_msg_ctx+0x198>)
    7350:	3003      	adds	r0, #3
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    7352:	f7fd f825 	bl	43a0 <_Z4dlogiPKcz>
                    rc = ERR_NO_MEM;
    7356:	2003      	movs	r0, #3

done:
    return rc;
}
    7358:	b00d      	add	sp, #52	; 0x34
    735a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int idx = 4;
    735c:	2404      	movs	r4, #4
    735e:	e7d5      	b.n	730c <_Z17coap_msg_responseP12coap_msg_ctx+0x84>
            idx += sz;
    7360:	1824      	adds	r4, r4, r0
            onum = COAP_OPTION_OBSERVE;
    7362:	2006      	movs	r0, #6
        if (ctx->plen) 
    7364:	6c33      	ldr	r3, [r6, #64]	; 0x40
    7366:	2b00      	cmp	r3, #0
    7368:	d044      	beq.n	73f4 <_Z17coap_msg_responseP12coap_msg_ctx+0x16c>
            dopt.ot = COAP_OPTION_CONTENT_FORMAT - onum;
    736a:	230c      	movs	r3, #12
            if (ctx->cf == 0) {     /* text/plain; */
    736c:	0032      	movs	r2, r6
            dopt.ot = COAP_OPTION_CONTENT_FORMAT - onum;
    736e:	1a18      	subs	r0, r3, r0
    7370:	af03      	add	r7, sp, #12
    7372:	8038      	strh	r0, [r7, #0]
            if (ctx->cf == 0) {     /* text/plain; */
    7374:	323c      	adds	r2, #60	; 0x3c
    7376:	7813      	ldrb	r3, [r2, #0]
    7378:	2b00      	cmp	r3, #0
    737a:	d10f      	bne.n	739c <_Z17coap_msg_responseP12coap_msg_ctx+0x114>
                dopt.ov = &opt_val;
    737c:	aa02      	add	r2, sp, #8
    737e:	607a      	str	r2, [r7, #4]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7380:	221c      	movs	r2, #28
    7382:	1929      	adds	r1, r5, r4
    7384:	1b12      	subs	r2, r2, r4
    7386:	0038      	movs	r0, r7
                dopt.ol = 0;
    7388:	807b      	strh	r3, [r7, #2]
                opt_val = 0;  /* 0 length anyway */
    738a:	9302      	str	r3, [sp, #8]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    738c:	f7ff fdba 	bl	6f04 <_Z12coap_opt_addPK5optlvPhi>
                idx += sz;
    7390:	1824      	adds	r4, r4, r0
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7392:	2800      	cmp	r0, #0
    7394:	d10e      	bne.n	73b4 <_Z17coap_msg_responseP12coap_msg_ctx+0x12c>
                    dlog(LOG_ERR, "Couldn't add content format option to msg");
    7396:	4923      	ldr	r1, [pc, #140]	; (7424 <_Z17coap_msg_responseP12coap_msg_ctx+0x19c>)
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    7398:	2003      	movs	r0, #3
    739a:	e7da      	b.n	7352 <_Z17coap_msg_responseP12coap_msg_ctx+0xca>
                dopt.ov = &(ctx->cf);
    739c:	607a      	str	r2, [r7, #4]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    739e:	221c      	movs	r2, #28
                dopt.ol = 1;
    73a0:	2301      	movs	r3, #1
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    73a2:	1b12      	subs	r2, r2, r4
    73a4:	1929      	adds	r1, r5, r4
    73a6:	0038      	movs	r0, r7
                dopt.ol = 1;
    73a8:	807b      	strh	r3, [r7, #2]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    73aa:	f7ff fdab 	bl	6f04 <_Z12coap_opt_addPK5optlvPhi>
    73ae:	2800      	cmp	r0, #0
    73b0:	d0f1      	beq.n	7396 <_Z17coap_msg_responseP12coap_msg_ctx+0x10e>
                idx += sz;
    73b2:	1824      	adds	r4, r4, r0
            if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_MAXAGE, 
    73b4:	2200      	movs	r2, #0
    73b6:	210e      	movs	r1, #14
    73b8:	9801      	ldr	r0, [sp, #4]
    73ba:	f000 f9d9 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    73be:	2800      	cmp	r0, #0
    73c0:	d01a      	beq.n	73f8 <_Z17coap_msg_responseP12coap_msg_ctx+0x170>
				op->ov = &opt_val;
    73c2:	ab02      	add	r3, sp, #8
    73c4:	6043      	str	r3, [r0, #4]
                dopt = *op;  /* copy original but make type the delta */
    73c6:	003b      	movs	r3, r7
    73c8:	c806      	ldmia	r0!, {r1, r2}
    73ca:	c306      	stmia	r3!, {r1, r2}
				opt_val = coap_max_age_in_seconds;
    73cc:	4b16      	ldr	r3, [pc, #88]	; (7428 <_Z17coap_msg_responseP12coap_msg_ctx+0x1a0>)
				opt_val = co_uint32_h2n(&dopt);
    73ce:	0038      	movs	r0, r7
				opt_val = coap_max_age_in_seconds;
    73d0:	681b      	ldr	r3, [r3, #0]
    73d2:	9302      	str	r3, [sp, #8]
				opt_val = co_uint32_h2n(&dopt);
    73d4:	f7ff fe10 	bl	6ff8 <_Z13co_uint32_h2nPK5optlv>
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    73d8:	221c      	movs	r2, #28
                dopt.ot = COAP_OPTION_MAXAGE - onum;
    73da:	2302      	movs	r3, #2
				opt_val = co_uint32_h2n(&dopt);
    73dc:	9002      	str	r0, [sp, #8]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    73de:	1b12      	subs	r2, r2, r4
    73e0:	1929      	adds	r1, r5, r4
    73e2:	0038      	movs	r0, r7
                dopt.ot = COAP_OPTION_MAXAGE - onum;
    73e4:	803b      	strh	r3, [r7, #0]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    73e6:	f7ff fd8d 	bl	6f04 <_Z12coap_opt_addPK5optlvPhi>
                idx += sz;
    73ea:	1824      	adds	r4, r4, r0
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    73ec:	2800      	cmp	r0, #0
    73ee:	dc03      	bgt.n	73f8 <_Z17coap_msg_responseP12coap_msg_ctx+0x170>
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    73f0:	490e      	ldr	r1, [pc, #56]	; (742c <_Z17coap_msg_responseP12coap_msg_ctx+0x1a4>)
    73f2:	e7d1      	b.n	7398 <_Z17coap_msg_responseP12coap_msg_ctx+0x110>
        if (onum && ctx->plen) {
    73f4:	2800      	cmp	r0, #0
    73f6:	d005      	beq.n	7404 <_Z17coap_msg_responseP12coap_msg_ctx+0x17c>
    73f8:	6c33      	ldr	r3, [r6, #64]	; 0x40
    73fa:	2b00      	cmp	r3, #0
    73fc:	d002      	beq.n	7404 <_Z17coap_msg_responseP12coap_msg_ctx+0x17c>
            b[idx++] = 0xFF;    /* end of options */
    73fe:	23ff      	movs	r3, #255	; 0xff
    7400:	552b      	strb	r3, [r5, r4]
    7402:	3401      	adds	r4, #1
    assert(idx <= COAP_OBS_HDR_SZ);
    7404:	2c1c      	cmp	r4, #28
    7406:	dc00      	bgt.n	740a <_Z17coap_msg_responseP12coap_msg_ctx+0x182>
    7408:	e752      	b.n	72b0 <_Z17coap_msg_responseP12coap_msg_ctx+0x28>
    740a:	21f0      	movs	r1, #240	; 0xf0
    740c:	4b08      	ldr	r3, [pc, #32]	; (7430 <_Z17coap_msg_responseP12coap_msg_ctx+0x1a8>)
    740e:	4a09      	ldr	r2, [pc, #36]	; (7434 <_Z17coap_msg_responseP12coap_msg_ctx+0x1ac>)
    7410:	0089      	lsls	r1, r1, #2
    7412:	4809      	ldr	r0, [pc, #36]	; (7438 <_Z17coap_msg_responseP12coap_msg_ctx+0x1b0>)
    7414:	f005 f9c0 	bl	c798 <__assert_func>
        rc = ERR_INVAL;
    7418:	2004      	movs	r0, #4
    741a:	e79d      	b.n	7358 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
    741c:	000113ae 	.word	0x000113ae
    7420:	00011327 	.word	0x00011327
    7424:	0001134a 	.word	0x0001134a
    7428:	200013b8 	.word	0x200013b8
    742c:	00011374 	.word	0x00011374
    7430:	00011397 	.word	0x00011397
    7434:	0001148f 	.word	0x0001148f
    7438:	00011261 	.word	0x00011261

0000743c <_Z16coap_set_max_agem>:
 * 
 *
 */ 
void coap_set_max_age( uint32_t max_age )
{
	coap_max_age_in_seconds = max_age;
    743c:	4b01      	ldr	r3, [pc, #4]	; (7444 <_Z16coap_set_max_agem+0x8>)
    743e:	6018      	str	r0, [r3, #0]
	
} // coap_set_max_age
    7440:	4770      	bx	lr
    7442:	46c0      	nop			; (mov r8, r8)
    7444:	200013b8 	.word	0x200013b8

00007448 <_Z14get_obs_by_uriPKcPhS1_PPvS1_>:
 *
 * Returns 0 on success, -1 if not found.
 */
error_t
get_obs_by_uri(const char *uri, uint8_t *tkl, uint8_t *token, void **client, uint8_t *nxt)
{
    7448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    744a:	0005      	movs	r5, r0
    744c:	000f      	movs	r7, r1
    744e:	9201      	str	r2, [sp, #4]
    7450:	001e      	movs	r6, r3
    uint8_t i;

    if ((uri == NULL) || (uri[0] == '\0') || (*nxt >= MAX_OBSERVERS)) {
        return ERR_INVAL;
    7452:	2004      	movs	r0, #4
    if ((uri == NULL) || (uri[0] == '\0') || (*nxt >= MAX_OBSERVERS)) {
    7454:	2d00      	cmp	r5, #0
    7456:	d02e      	beq.n	74b6 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    7458:	782b      	ldrb	r3, [r5, #0]
    745a:	2b00      	cmp	r3, #0
    745c:	d02b      	beq.n	74b6 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    745e:	9b08      	ldr	r3, [sp, #32]
    7460:	781c      	ldrb	r4, [r3, #0]
    7462:	2c03      	cmp	r4, #3
    7464:	dc27      	bgt.n	74b6 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    }

    for (i = *nxt; i < MAX_OBSERVERS; i++) {
    7466:	2c03      	cmp	r4, #3
    7468:	dc0c      	bgt.n	7484 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x3c>
        if (!strcmp(uri, obs[i].uri)) {
    746a:	2198      	movs	r1, #152	; 0x98
    746c:	0049      	lsls	r1, r1, #1
    746e:	4361      	muls	r1, r4
    7470:	4b11      	ldr	r3, [pc, #68]	; (74b8 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x70>)
    7472:	0028      	movs	r0, r5
    7474:	1859      	adds	r1, r3, r1
    7476:	f006 fc2c 	bl	dcd2 <strcmp>
    747a:	2800      	cmp	r0, #0
    747c:	d002      	beq.n	7484 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x3c>
    for (i = *nxt; i < MAX_OBSERVERS; i++) {
    747e:	3401      	adds	r4, #1
    7480:	b2e4      	uxtb	r4, r4
    7482:	e7f0      	b.n	7466 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x1e>
            break;
        }
    }
    if (i == MAX_OBSERVERS) {
        return ERR_NO_ENTRY;
    7484:	200c      	movs	r0, #12
    if (i == MAX_OBSERVERS) {
    7486:	2c04      	cmp	r4, #4
    7488:	d015      	beq.n	74b6 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    }

    *tkl = obs[i].tkl;
    748a:	2398      	movs	r3, #152	; 0x98
    748c:	005b      	lsls	r3, r3, #1
    748e:	4363      	muls	r3, r4
    7490:	4909      	ldr	r1, [pc, #36]	; (74b8 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x70>)
    memcpy(token, obs[i].token, *tkl);
    7492:	9801      	ldr	r0, [sp, #4]
    *tkl = obs[i].tkl;
    7494:	18cd      	adds	r5, r1, r3
    7496:	002a      	movs	r2, r5
    7498:	32ff      	adds	r2, #255	; 0xff
    749a:	7852      	ldrb	r2, [r2, #1]
    memcpy(token, obs[i].token, *tkl);
    749c:	3302      	adds	r3, #2
    749e:	33ff      	adds	r3, #255	; 0xff
    74a0:	18c9      	adds	r1, r1, r3
    *tkl = obs[i].tkl;
    74a2:	703a      	strb	r2, [r7, #0]
    memcpy(token, obs[i].token, *tkl);
    74a4:	f005 faf5 	bl	ca92 <memcpy>
    *client = obs[i].client;
    *nxt = i + 1;

    return ERR_OK;
    74a8:	2000      	movs	r0, #0
    *client = obs[i].client;
    74aa:	35fc      	adds	r5, #252	; 0xfc
    74ac:	692b      	ldr	r3, [r5, #16]
    *nxt = i + 1;
    74ae:	3401      	adds	r4, #1
    *client = obs[i].client;
    74b0:	6033      	str	r3, [r6, #0]
    *nxt = i + 1;
    74b2:	9b08      	ldr	r3, [sp, #32]
    74b4:	701c      	strb	r4, [r3, #0]
}
    74b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    74b8:	200013f0 	.word	0x200013f0

000074bc <_Z11get_obs_valv>:
    /*
     * Monotonically increasing observe value.
     */
    static uint32_t obs_val = 2;

    if (obs_val == (1 << 24) - 1) {
    74bc:	4b05      	ldr	r3, [pc, #20]	; (74d4 <_Z11get_obs_valv+0x18>)
    74be:	4906      	ldr	r1, [pc, #24]	; (74d8 <_Z11get_obs_valv+0x1c>)
    74c0:	681a      	ldr	r2, [r3, #0]
    74c2:	428a      	cmp	r2, r1
    74c4:	d103      	bne.n	74ce <_Z11get_obs_valv+0x12>
        obs_val = 2;
    74c6:	2202      	movs	r2, #2
    } else {
        obs_val++;
    74c8:	601a      	str	r2, [r3, #0]
    }

    return obs_val;
    74ca:	6818      	ldr	r0, [r3, #0]
}
    74cc:	4770      	bx	lr
        obs_val++;
    74ce:	3201      	adds	r2, #1
    74d0:	e7fa      	b.n	74c8 <_Z11get_obs_valv+0xc>
    74d2:	46c0      	nop			; (mov r8, r8)
    74d4:	2000009c 	.word	0x2000009c
    74d8:	00ffffff 	.word	0x00ffffff

000074dc <_Z10enable_obsPKcP12coap_msg_ctxPv>:
 * Currently only called from main (net_mgr) task on NIC, so no need for
 * locking.
 */
error_t 
enable_obs(const char *urip, struct coap_msg_ctx *req, void *client)
{
    74dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    74de:	b085      	sub	sp, #20
    74e0:	9000      	str	r0, [sp, #0]
    74e2:	000e      	movs	r6, r1
    74e4:	9202      	str	r2, [sp, #8]
        add_obs(empty_slot, urip, req, client);
        return ERR_OK;
    }

error:
    return ERR_BAD_DATA;
    74e6:	2314      	movs	r3, #20
    if (urip == NULL)
    74e8:	2800      	cmp	r0, #0
    74ea:	d02f      	beq.n	754c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    if (strlen(urip) >= MAX_OBS_URI_LEN)
    74ec:	f006 fc03 	bl	dcf6 <strlen>
    return ERR_BAD_DATA;
    74f0:	2314      	movs	r3, #20
    if (strlen(urip) >= MAX_OBS_URI_LEN)
    74f2:	28ff      	cmp	r0, #255	; 0xff
    74f4:	d82a      	bhi.n	754c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    if (req->sid[0] != '\0')
    74f6:	7f37      	ldrb	r7, [r6, #28]
    74f8:	2f00      	cmp	r7, #0
    74fa:	d03f      	beq.n	757c <_Z10enable_obsPKcP12coap_msg_ctxPv+0xa0>
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    74fc:	0037      	movs	r7, r6
    74fe:	371c      	adds	r7, #28
    7500:	0038      	movs	r0, r7
    7502:	f006 fbf8 	bl	dcf6 <strlen>
    7506:	0005      	movs	r5, r0
    7508:	4b33      	ldr	r3, [pc, #204]	; (75d8 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xfc>)
    750a:	4a34      	ldr	r2, [pc, #208]	; (75dc <_Z10enable_obsPKcP12coap_msg_ctxPv+0x100>)
    750c:	1c9c      	adds	r4, r3, #2
    750e:	189b      	adds	r3, r3, r2
    7510:	9301      	str	r3, [sp, #4]
                !memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)))
    7512:	1db3      	adds	r3, r6, #6
    7514:	34ff      	adds	r4, #255	; 0xff
    7516:	9303      	str	r3, [sp, #12]
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    7518:	1ea1      	subs	r1, r4, #2
    751a:	39ff      	subs	r1, #255	; 0xff
    751c:	002a      	movs	r2, r5
    751e:	0038      	movs	r0, r7
    7520:	f006 fc05 	bl	dd2e <strncmp>
    7524:	2800      	cmp	r0, #0
    7526:	d114      	bne.n	7552 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x76>
                !memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)))
    7528:	1e63      	subs	r3, r4, #1
    752a:	7871      	ldrb	r1, [r6, #1]
    752c:	781a      	ldrb	r2, [r3, #0]
    752e:	428a      	cmp	r2, r1
    7530:	da00      	bge.n	7534 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x58>
    7532:	000a      	movs	r2, r1
    7534:	0021      	movs	r1, r4
    7536:	9803      	ldr	r0, [sp, #12]
    7538:	f005 fa9c 	bl	ca74 <memcmp>
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    753c:	2800      	cmp	r0, #0
    753e:	d108      	bne.n	7552 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x76>
                dlog(LOG_INFO, "Not adding obs entry for %s, sid:token not unique", urip);
    7540:	9a00      	ldr	r2, [sp, #0]
    7542:	4927      	ldr	r1, [pc, #156]	; (75e0 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x104>)
            dlog(LOG_INFO, "Not adding obs entry for %s, duplicate.", urip);
    7544:	3006      	adds	r0, #6
    7546:	f7fc ff2b 	bl	43a0 <_Z4dlogiPKcz>
            return ERR_EXISTS;
    754a:	2309      	movs	r3, #9
}
    754c:	0018      	movs	r0, r3
    754e:	b005      	add	sp, #20
    7550:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7552:	3431      	adds	r4, #49	; 0x31
        for (i = 0; i < MAX_OBSERVERS; i++) {
    7554:	9b01      	ldr	r3, [sp, #4]
    7556:	34ff      	adds	r4, #255	; 0xff
    7558:	42a3      	cmp	r3, r4
    755a:	d1dd      	bne.n	7518 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x3c>
    755c:	2404      	movs	r4, #4
    755e:	2700      	movs	r7, #0
        if (!strcmp(urip, obs[i].uri))
    7560:	4d1d      	ldr	r5, [pc, #116]	; (75d8 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xfc>)
    7562:	2398      	movs	r3, #152	; 0x98
    7564:	005b      	lsls	r3, r3, #1
    7566:	437b      	muls	r3, r7
    7568:	9800      	ldr	r0, [sp, #0]
    756a:	18e9      	adds	r1, r5, r3
    756c:	9301      	str	r3, [sp, #4]
    756e:	f006 fbb0 	bl	dcd2 <strcmp>
    7572:	2800      	cmp	r0, #0
    7574:	d104      	bne.n	7580 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xa4>
            dlog(LOG_INFO, "Not adding obs entry for %s, duplicate.", urip);
    7576:	9a00      	ldr	r2, [sp, #0]
    7578:	491a      	ldr	r1, [pc, #104]	; (75e4 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x108>)
    757a:	e7e3      	b.n	7544 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x68>
    757c:	2404      	movs	r4, #4
    757e:	e7ef      	b.n	7560 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x84>
		else if ((obs[i].uri[0] == '\0') && (empty_slot == MAX_OBSERVERS))
    7580:	9b01      	ldr	r3, [sp, #4]
    7582:	5d5b      	ldrb	r3, [r3, r5]
    7584:	2b00      	cmp	r3, #0
    7586:	d102      	bne.n	758e <_Z10enable_obsPKcP12coap_msg_ctxPv+0xb2>
    7588:	2c04      	cmp	r4, #4
    758a:	d100      	bne.n	758e <_Z10enable_obsPKcP12coap_msg_ctxPv+0xb2>
    758c:	003c      	movs	r4, r7
    for (i = 0; i < MAX_OBSERVERS; i++) {
    758e:	3701      	adds	r7, #1
    7590:	2f04      	cmp	r7, #4
    7592:	d1e6      	bne.n	7562 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x86>
    return ERR_BAD_DATA;
    7594:	2314      	movs	r3, #20
    if (empty_slot < MAX_OBSERVERS)
    7596:	2c04      	cmp	r4, #4
    7598:	d0d8      	beq.n	754c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    obs[slot].tkl = req->tkl;
    759a:	331d      	adds	r3, #29
    759c:	33ff      	adds	r3, #255	; 0xff
    759e:	435c      	muls	r4, r3
    75a0:	192f      	adds	r7, r5, r4
    75a2:	003b      	movs	r3, r7
    75a4:	7872      	ldrb	r2, [r6, #1]
    memcpy(obs[slot].token, req->token, req->tkl);
    75a6:	1ca0      	adds	r0, r4, #2
    obs[slot].tkl = req->tkl;
    75a8:	33ff      	adds	r3, #255	; 0xff
    memcpy(obs[slot].token, req->token, req->tkl);
    75aa:	30ff      	adds	r0, #255	; 0xff
    obs[slot].tkl = req->tkl;
    75ac:	705a      	strb	r2, [r3, #1]
    memcpy(obs[slot].token, req->token, req->tkl);
    75ae:	1db1      	adds	r1, r6, #6
    75b0:	1828      	adds	r0, r5, r0
    75b2:	f005 fa6e 	bl	ca92 <memcpy>
    strcpy(obs[slot].uri, urip);
    75b6:	9900      	ldr	r1, [sp, #0]
    75b8:	0038      	movs	r0, r7
    75ba:	f006 fb94 	bl	dce6 <strcpy>
    strcpy(obs[slot].sid, req->sid);
    75be:	0020      	movs	r0, r4
    75c0:	0031      	movs	r1, r6
    obs[slot].client = client;
    75c2:	9b02      	ldr	r3, [sp, #8]
    strcpy(obs[slot].sid, req->sid);
    75c4:	3011      	adds	r0, #17
    obs[slot].client = client;
    75c6:	37fc      	adds	r7, #252	; 0xfc
    strcpy(obs[slot].sid, req->sid);
    75c8:	30ff      	adds	r0, #255	; 0xff
    obs[slot].client = client;
    75ca:	613b      	str	r3, [r7, #16]
    strcpy(obs[slot].sid, req->sid);
    75cc:	311c      	adds	r1, #28
    75ce:	1828      	adds	r0, r5, r0
    75d0:	f006 fb89 	bl	dce6 <strcpy>
        return ERR_OK;
    75d4:	2300      	movs	r3, #0
    75d6:	e7b9      	b.n	754c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    75d8:	200013f0 	.word	0x200013f0
    75dc:	000005c1 	.word	0x000005c1
    75e0:	000114b8 	.word	0x000114b8
    75e4:	000114ea 	.word	0x000114ea

000075e8 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>:
 * Currently only called from main (net_mgr) task on NIC, so no need for
 * locking. However, as per enable_obs and client pointer.
 */
error_t 
disable_obs(const char *urip, struct coap_msg_ctx *req, void **client, uint8_t force)
{
    75e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    75ea:	b085      	sub	sp, #20
    75ec:	0007      	movs	r7, r0
    75ee:	9100      	str	r1, [sp, #0]
    75f0:	9201      	str	r2, [sp, #4]
    75f2:	9302      	str	r3, [sp, #8]
    int i;

    if (urip == NULL)
	{
        return ERR_INVAL;
    75f4:	2004      	movs	r0, #4
    if (urip == NULL)
    75f6:	2f00      	cmp	r7, #0
    75f8:	d036      	beq.n	7668 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x80>
    /*
     * Find the uri in the array, and if present, zero the entry.
     */
    for (i = 0; i < MAX_OBSERVERS; i++)
	{
        if (!strcmp(urip, obs[i].uri) && (!memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)) || force))
    75fa:	000b      	movs	r3, r1
    if (urip == NULL)
    75fc:	2400      	movs	r4, #0
    75fe:	4d1f      	ldr	r5, [pc, #124]	; (767c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x94>)
        if (!strcmp(urip, obs[i].uri) && (!memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)) || force))
    7600:	3306      	adds	r3, #6
    7602:	1cae      	adds	r6, r5, #2
    7604:	36ff      	adds	r6, #255	; 0xff
    7606:	9303      	str	r3, [sp, #12]
    7608:	1eb1      	subs	r1, r6, #2
    760a:	39ff      	subs	r1, #255	; 0xff
    760c:	0038      	movs	r0, r7
    760e:	f006 fb60 	bl	dcd2 <strcmp>
    7612:	2800      	cmp	r0, #0
    7614:	d12a      	bne.n	766c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x84>
    7616:	9a00      	ldr	r2, [sp, #0]
    7618:	1e73      	subs	r3, r6, #1
    761a:	7851      	ldrb	r1, [r2, #1]
    761c:	781a      	ldrb	r2, [r3, #0]
    761e:	428a      	cmp	r2, r1
    7620:	da00      	bge.n	7624 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x3c>
    7622:	000a      	movs	r2, r1
    7624:	0031      	movs	r1, r6
    7626:	9803      	ldr	r0, [sp, #12]
    7628:	f005 fa24 	bl	ca74 <memcmp>
    762c:	2800      	cmp	r0, #0
    762e:	d002      	beq.n	7636 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x4e>
    7630:	9b02      	ldr	r3, [sp, #8]
    7632:	2b00      	cmp	r3, #0
    7634:	d01a      	beq.n	766c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x84>
		{
            obs[i].uri[0] = '\0';
    7636:	2398      	movs	r3, #152	; 0x98
    7638:	005b      	lsls	r3, r3, #1
    763a:	4363      	muls	r3, r4
    763c:	2400      	movs	r4, #0
    763e:	54ec      	strb	r4, [r5, r3]
            *client = obs[i].client;
    7640:	18ed      	adds	r5, r5, r3
    7642:	002b      	movs	r3, r5
    7644:	33fc      	adds	r3, #252	; 0xfc
    7646:	6919      	ldr	r1, [r3, #16]
    7648:	9a01      	ldr	r2, [sp, #4]
            obs[i].client = NULL;
            memset(obs[i].token, 0, sizeof(obs[i].token));
    764a:	0030      	movs	r0, r6
            *client = obs[i].client;
    764c:	6011      	str	r1, [r2, #0]
            obs[i].sid[0] = '\0';
    764e:	35ff      	adds	r5, #255	; 0xff
            obs[i].client = NULL;
    7650:	611c      	str	r4, [r3, #16]
            memset(obs[i].token, 0, sizeof(obs[i].token));
    7652:	2208      	movs	r2, #8
    7654:	0021      	movs	r1, r4
    7656:	f005 fa37 	bl	cac8 <memset>
            dlog(LOG_INFO, "disable_obs: De-registered URI: %s", urip);
    765a:	2006      	movs	r0, #6
            obs[i].sid[0] = '\0';
    765c:	746c      	strb	r4, [r5, #17]
            dlog(LOG_INFO, "disable_obs: De-registered URI: %s", urip);
    765e:	003a      	movs	r2, r7
    7660:	4907      	ldr	r1, [pc, #28]	; (7680 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x98>)
    7662:	f7fc fe9d 	bl	43a0 <_Z4dlogiPKcz>
            return ERR_OK;
    7666:	0020      	movs	r0, r4
        }
    }
    return ERR_NO_ENTRY;
}
    7668:	b005      	add	sp, #20
    766a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    766c:	3631      	adds	r6, #49	; 0x31
    for (i = 0; i < MAX_OBSERVERS; i++)
    766e:	3401      	adds	r4, #1
    7670:	36ff      	adds	r6, #255	; 0xff
    7672:	2c04      	cmp	r4, #4
    7674:	d1c8      	bne.n	7608 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x20>
    return ERR_NO_ENTRY;
    7676:	200c      	movs	r0, #12
    7678:	e7f6      	b.n	7668 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x80>
    767a:	46c0      	nop			; (mov r8, r8)
    767c:	200013f0 	.word	0x200013f0
    7680:	00011512 	.word	0x00011512

00007684 <_Z9copt_initP5sl_co>:
/*
 * Initialse the head.
 */
void
copt_init(struct sl_co *hd)
{
    7684:	b510      	push	{r4, lr}
    assert(hd);
    7686:	2800      	cmp	r0, #0
    7688:	d105      	bne.n	7696 <_Z9copt_initP5sl_co+0x12>
    768a:	4b04      	ldr	r3, [pc, #16]	; (769c <_Z9copt_initP5sl_co+0x18>)
    768c:	4a04      	ldr	r2, [pc, #16]	; (76a0 <_Z9copt_initP5sl_co+0x1c>)
    768e:	2180      	movs	r1, #128	; 0x80
    7690:	4804      	ldr	r0, [pc, #16]	; (76a4 <_Z9copt_initP5sl_co+0x20>)
    7692:	f005 f881 	bl	c798 <__assert_func>

    SLIST_INIT(hd);
    7696:	2300      	movs	r3, #0
    7698:	6003      	str	r3, [r0, #0]
}
    769a:	bd10      	pop	{r4, pc}
    769c:	00011562 	.word	0x00011562
    76a0:	0001163c 	.word	0x0001163c
    76a4:	00011565 	.word	0x00011565

000076a8 <_Z12copt_del_allP5sl_co>:
 *
 * @return: None.
 */
void
copt_del_all(struct sl_co *hd)
{
    76a8:	b570      	push	{r4, r5, r6, lr}
    76aa:	1e04      	subs	r4, r0, #0
    coap_opt *curr, *tmp;

    assert(hd);
    76ac:	d105      	bne.n	76ba <_Z12copt_del_allP5sl_co+0x12>
    76ae:	4b0c      	ldr	r3, [pc, #48]	; (76e0 <_Z12copt_del_allP5sl_co+0x38>)
    76b0:	4a0c      	ldr	r2, [pc, #48]	; (76e4 <_Z12copt_del_allP5sl_co+0x3c>)
    76b2:	2192      	movs	r1, #146	; 0x92
    76b4:	480c      	ldr	r0, [pc, #48]	; (76e8 <_Z12copt_del_allP5sl_co+0x40>)
    76b6:	f005 f86f 	bl	c798 <__assert_func>
    SLIST_FOREACH_SAFE(curr, hd, nxt, tmp) {
    76ba:	6800      	ldr	r0, [r0, #0]
    76bc:	2800      	cmp	r0, #0
    76be:	d00e      	beq.n	76de <_Z12copt_del_allP5sl_co+0x36>
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    76c0:	6823      	ldr	r3, [r4, #0]
    SLIST_FOREACH_SAFE(curr, hd, nxt, tmp) {
    76c2:	6885      	ldr	r5, [r0, #8]
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    76c4:	4298      	cmp	r0, r3
    76c6:	d105      	bne.n	76d4 <_Z12copt_del_allP5sl_co+0x2c>
    76c8:	6025      	str	r5, [r4, #0]
        free(co);
    76ca:	f005 f9b7 	bl	ca3c <free>
    76ce:	0028      	movs	r0, r5
    76d0:	e7f4      	b.n	76bc <_Z12copt_del_allP5sl_co+0x14>
    76d2:	0013      	movs	r3, r2
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    76d4:	689a      	ldr	r2, [r3, #8]
    76d6:	4290      	cmp	r0, r2
    76d8:	d1fb      	bne.n	76d2 <_Z12copt_del_allP5sl_co+0x2a>
    76da:	609d      	str	r5, [r3, #8]
    76dc:	e7f5      	b.n	76ca <_Z12copt_del_allP5sl_co+0x22>
        copt_dealloc(curr);
    }

    return;
}
    76de:	bd70      	pop	{r4, r5, r6, pc}
    76e0:	00011562 	.word	0x00011562
    76e4:	000115b8 	.word	0x000115b8
    76e8:	00011565 	.word	0x00011565

000076ec <_Z12copt_add_optP5sl_coP5optlv>:
 *
 * @return: 0 on sucess.
 */
error_t
copt_add_opt(struct sl_co *hd, struct optlv *opt)
{
    76ec:	b570      	push	{r4, r5, r6, lr}
    76ee:	0006      	movs	r6, r0
    76f0:	000d      	movs	r5, r1
    assert(hd);
    76f2:	2800      	cmp	r0, #0
    76f4:	d105      	bne.n	7702 <_Z12copt_add_optP5sl_coP5optlv+0x16>
    76f6:	21a9      	movs	r1, #169	; 0xa9
    76f8:	4b19      	ldr	r3, [pc, #100]	; (7760 <_Z12copt_add_optP5sl_coP5optlv+0x74>)
    76fa:	4a1a      	ldr	r2, [pc, #104]	; (7764 <_Z12copt_add_optP5sl_coP5optlv+0x78>)
    coap_opt *nco;       /* New coap option */
    coap_opt *o, *po;    /* option iterator, previous option. */
    error_t rc = ERR_OK;

    assert(hd);
    assert(opt);
    76fc:	481a      	ldr	r0, [pc, #104]	; (7768 <_Z12copt_add_optP5sl_coP5optlv+0x7c>)
    76fe:	f005 f84b 	bl	c798 <__assert_func>
    7702:	2900      	cmp	r1, #0
    7704:	d103      	bne.n	770e <_Z12copt_add_optP5sl_coP5optlv+0x22>
    7706:	4b19      	ldr	r3, [pc, #100]	; (776c <_Z12copt_add_optP5sl_coP5optlv+0x80>)
    7708:	4a16      	ldr	r2, [pc, #88]	; (7764 <_Z12copt_add_optP5sl_coP5optlv+0x78>)
    770a:	21af      	movs	r1, #175	; 0xaf
    770c:	e7f6      	b.n	76fc <_Z12copt_add_optP5sl_coP5optlv+0x10>
    if ((co = (coap_opt *)malloc(sizeof(coap_opt))) != NULL) {
    770e:	200c      	movs	r0, #12
    7710:	f005 f98a 	bl	ca28 <malloc>
    7714:	0004      	movs	r4, r0
    /*
     * Find the node with the correct option value.
     * If present, allocate and append a new object, set object values.
     */
    if ((nco = copt_alloc()) == NULL) {
        rc = ERR_NO_MEM;
    7716:	2003      	movs	r0, #3
    if ((co = (coap_opt *)malloc(sizeof(coap_opt))) != NULL) {
    7718:	2c00      	cmp	r4, #0
    771a:	d012      	beq.n	7742 <_Z12copt_add_optP5sl_coP5optlv+0x56>
        memset(co, 0, sizeof(coap_opt));
    771c:	220c      	movs	r2, #12
    771e:	2100      	movs	r1, #0
    7720:	0020      	movs	r0, r4
    7722:	f005 f9d1 	bl	cac8 <memset>
        goto done;
    }
    nco->o = *opt;
    7726:	0023      	movs	r3, r4
    7728:	002a      	movs	r2, r5
    772a:	ca03      	ldmia	r2!, {r0, r1}
    772c:	c303      	stmia	r3!, {r0, r1}

    if (SLIST_EMPTY(hd) || (SLIST_FIRST(hd)->o.ot > opt->ot)) {
    772e:	6833      	ldr	r3, [r6, #0]
    7730:	2b00      	cmp	r3, #0
    7732:	d003      	beq.n	773c <_Z12copt_add_optP5sl_coP5optlv+0x50>
    7734:	882a      	ldrh	r2, [r5, #0]
    7736:	8819      	ldrh	r1, [r3, #0]
    7738:	4291      	cmp	r1, r2
    773a:	dd04      	ble.n	7746 <_Z12copt_add_optP5sl_coP5optlv+0x5a>
        SLIST_INSERT_HEAD(hd, nco, nxt);
    773c:	60a3      	str	r3, [r4, #8]
    773e:	6034      	str	r4, [r6, #0]
    error_t rc = ERR_OK;
    7740:	2000      	movs	r0, #0
     */
    SLIST_INSERT_AFTER(po, nco, nxt);
    
done:
    return rc;
}
    7742:	bd70      	pop	{r4, r5, r6, pc}
    7744:	0003      	movs	r3, r0
        if (SLIST_NEXT(o, nxt) && (SLIST_NEXT(o, nxt)->o.ot > opt->ot)) {
    7746:	6898      	ldr	r0, [r3, #8]
    7748:	2800      	cmp	r0, #0
    774a:	d005      	beq.n	7758 <_Z12copt_add_optP5sl_coP5optlv+0x6c>
    774c:	8801      	ldrh	r1, [r0, #0]
    774e:	428a      	cmp	r2, r1
    7750:	daf8      	bge.n	7744 <_Z12copt_add_optP5sl_coP5optlv+0x58>
            SLIST_INSERT_AFTER(o, nco, nxt);
    7752:	60a0      	str	r0, [r4, #8]
    7754:	609c      	str	r4, [r3, #8]
    7756:	e7f3      	b.n	7740 <_Z12copt_add_optP5sl_coP5optlv+0x54>
    SLIST_INSERT_AFTER(po, nco, nxt);
    7758:	60a0      	str	r0, [r4, #8]
    775a:	609c      	str	r4, [r3, #8]
    return rc;
    775c:	e7f1      	b.n	7742 <_Z12copt_add_optP5sl_coP5optlv+0x56>
    775e:	46c0      	nop			; (mov r8, r8)
    7760:	00011562 	.word	0x00011562
    7764:	00011593 	.word	0x00011593
    7768:	00011565 	.word	0x00011565
    776c:	00011535 	.word	0x00011535

00007770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>:
 *
 * @return: The next option (as optlv) in the list, or NULL if no more.
 */
struct optlv *
copt_get_next_opt_type(const struct sl_co *hd, uint16_t ot, void **it)
{
    7770:	b507      	push	{r0, r1, r2, lr}
    struct optlv *opt;
    coap_opt **ppco = (coap_opt **)it;
    coap_opt *pco;

    assert(hd);
    7772:	2800      	cmp	r0, #0
    7774:	d106      	bne.n	7784 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x14>
    7776:	2183      	movs	r1, #131	; 0x83
    7778:	4b0e      	ldr	r3, [pc, #56]	; (77b4 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x44>)
    777a:	4a0f      	ldr	r2, [pc, #60]	; (77b8 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x48>)
    777c:	0049      	lsls	r1, r1, #1
    777e:	480f      	ldr	r0, [pc, #60]	; (77bc <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x4c>)
    7780:	f005 f80a 	bl	c798 <__assert_func>
    pco = SLIST_FIRST(hd);
    7784:	6800      	ldr	r0, [r0, #0]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
        ppco = &pco;
    7786:	ab01      	add	r3, sp, #4
    pco = SLIST_FIRST(hd);
    7788:	9001      	str	r0, [sp, #4]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
    778a:	2a00      	cmp	r2, #0
    778c:	d004      	beq.n	7798 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
    } else if (!*ppco) {
    778e:	6813      	ldr	r3, [r2, #0]
    7790:	2b00      	cmp	r3, #0
    7792:	d10a      	bne.n	77aa <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x3a>
        *ppco = SLIST_FIRST(hd);
    7794:	6010      	str	r0, [r2, #0]
    } else {
        *ppco = SLIST_NEXT(*ppco, nxt);
    7796:	0013      	movs	r3, r2
    }
    while (*ppco) {
    7798:	6818      	ldr	r0, [r3, #0]
    779a:	2800      	cmp	r0, #0
    779c:	d008      	beq.n	77b0 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
        if ((*ppco)->o.ot == ot) {
    779e:	8802      	ldrh	r2, [r0, #0]
    77a0:	428a      	cmp	r2, r1
    77a2:	d005      	beq.n	77b0 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
            break;
        }
        *ppco = SLIST_NEXT(*ppco, nxt);
    77a4:	6882      	ldr	r2, [r0, #8]
    77a6:	601a      	str	r2, [r3, #0]
    while (*ppco) {
    77a8:	e7f6      	b.n	7798 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
        *ppco = SLIST_NEXT(*ppco, nxt);
    77aa:	689b      	ldr	r3, [r3, #8]
    77ac:	6013      	str	r3, [r2, #0]
    77ae:	e7f2      	b.n	7796 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x26>
        opt = &((*ppco)->o);
    } else {
        opt = NULL;
    }
    return opt;
}
    77b0:	bd0e      	pop	{r1, r2, r3, pc}
    77b2:	46c0      	nop			; (mov r8, r8)
    77b4:	00011562 	.word	0x00011562
    77b8:	000115fe 	.word	0x000115fe
    77bc:	00011565 	.word	0x00011565

000077c0 <_Z17copt_del_opt_typeP5sl_cot>:
 *
 * @return: 0 if anything deleted.
 */
error_t
copt_del_opt_type(struct sl_co *hd, uint16_t ot)
{
    77c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77c2:	0004      	movs	r4, r0
    77c4:	000f      	movs	r7, r1
    error_t rc = ERR_NO_ENTRY;
    assert(hd);
    77c6:	2800      	cmp	r0, #0
    77c8:	d106      	bne.n	77d8 <_Z17copt_del_opt_typeP5sl_cot+0x18>
    77ca:	214c      	movs	r1, #76	; 0x4c
    77cc:	4b12      	ldr	r3, [pc, #72]	; (7818 <_Z17copt_del_opt_typeP5sl_cot+0x58>)
    77ce:	4a13      	ldr	r2, [pc, #76]	; (781c <_Z17copt_del_opt_typeP5sl_cot+0x5c>)
    77d0:	31ff      	adds	r1, #255	; 0xff
    77d2:	4813      	ldr	r0, [pc, #76]	; (7820 <_Z17copt_del_opt_typeP5sl_cot+0x60>)
    77d4:	f004 ffe0 	bl	c798 <__assert_func>
    error_t rc = ERR_NO_ENTRY;
    77d8:	250c      	movs	r5, #12
    coap_opt *o, *tmp;

    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    77da:	6800      	ldr	r0, [r0, #0]
    77dc:	2800      	cmp	r0, #0
    77de:	d012      	beq.n	7806 <_Z17copt_del_opt_typeP5sl_cot+0x46>
        if (o->o.ot == ot) {
    77e0:	8803      	ldrh	r3, [r0, #0]
    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    77e2:	6886      	ldr	r6, [r0, #8]
        if (o->o.ot == ot) {
    77e4:	42bb      	cmp	r3, r7
    77e6:	d106      	bne.n	77f6 <_Z17copt_del_opt_typeP5sl_cot+0x36>
            rc = ERR_OK;
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    77e8:	6823      	ldr	r3, [r4, #0]
    77ea:	4298      	cmp	r0, r3
    77ec:	d106      	bne.n	77fc <_Z17copt_del_opt_typeP5sl_cot+0x3c>
    77ee:	6026      	str	r6, [r4, #0]
        free(co);
    77f0:	f005 f924 	bl	ca3c <free>
            rc = ERR_OK;
    77f4:	2500      	movs	r5, #0
    77f6:	0030      	movs	r0, r6
    77f8:	e7f0      	b.n	77dc <_Z17copt_del_opt_typeP5sl_cot+0x1c>
    77fa:	0013      	movs	r3, r2
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    77fc:	689a      	ldr	r2, [r3, #8]
    77fe:	4290      	cmp	r0, r2
    7800:	d1fb      	bne.n	77fa <_Z17copt_del_opt_typeP5sl_cot+0x3a>
    7802:	609e      	str	r6, [r3, #8]
    7804:	e7f4      	b.n	77f0 <_Z17copt_del_opt_typeP5sl_cot+0x30>
            copt_dealloc(o);
        }
    }

    if (rc) {
    7806:	2d00      	cmp	r5, #0
    7808:	d004      	beq.n	7814 <_Z17copt_del_opt_typeP5sl_cot+0x54>
        dlog(LOG_DEBUG, "Didn't find option %d to delete.", ot);
    780a:	003a      	movs	r2, r7
    780c:	4905      	ldr	r1, [pc, #20]	; (7824 <_Z17copt_del_opt_typeP5sl_cot+0x64>)
    780e:	2007      	movs	r0, #7
    7810:	f7fc fdc6 	bl	43a0 <_Z4dlogiPKcz>
    }

    return rc;
}
    7814:	0028      	movs	r0, r5
    7816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7818:	00011562 	.word	0x00011562
    781c:	000115d2 	.word	0x000115d2
    7820:	00011565 	.word	0x00011565
    7824:	00011541 	.word	0x00011541

00007828 <_Z14observe_rx_ackPvP4mbuf>:
 */
error_t observe_rx_ack(void *cbctx, struct mbuf *m)
{
	// Bump the sequence number.
	uint32_t seq_number = *((uint32_t *)cbctx);
	seq_number++;
    7828:	6803      	ldr	r3, [r0, #0]
    782a:	3301      	adds	r3, #1
	*((uint32_t *)cbctx) = seq_number;
    782c:	6003      	str	r3, [r0, #0]
	
	return ERR_OK;
}
    782e:	2000      	movs	r0, #0
    7830:	4770      	bx	lr
	...

00007834 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>:
{
    7834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7836:	2434      	movs	r4, #52	; 0x34
{
    7838:	4684      	mov	ip, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    783a:	4d11      	ldr	r5, [pc, #68]	; (7880 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x4c>)
    783c:	4e11      	ldr	r6, [pc, #68]	; (7884 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x50>)
    783e:	7828      	ldrb	r0, [r5, #0]
{
    7840:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7842:	4360      	muls	r0, r4
{
    7844:	9200      	str	r2, [sp, #0]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7846:	4910      	ldr	r1, [pc, #64]	; (7888 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x54>)
    7848:	4662      	mov	r2, ip
    784a:	1830      	adds	r0, r6, r0
{
    784c:	9301      	str	r3, [sp, #4]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    784e:	f006 fa11 	bl	dc74 <siprintf>
	observe_info[observe_info_index].pObsFunc = p;
    7852:	782b      	ldrb	r3, [r5, #0]
	observe_info[observe_info_index].sensor_id = sensor_id;
    7854:	466a      	mov	r2, sp
	observe_info[observe_info_index].pObsFunc = p;
    7856:	435c      	muls	r4, r3
	observe_info[observe_info_index].frequency = frequency;
    7858:	9b00      	ldr	r3, [sp, #0]
	observe_info[observe_info_index].pObsFunc = p;
    785a:	1936      	adds	r6, r6, r4
	observe_info[observe_info_index].frequency = frequency;
    785c:	62b3      	str	r3, [r6, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = sensor_id;
    785e:	0033      	movs	r3, r6
    7860:	7912      	ldrb	r2, [r2, #4]
    7862:	3331      	adds	r3, #49	; 0x31
    7864:	701a      	strb	r2, [r3, #0]
	observe_info[observe_info_index].obs_flag = 0;
    7866:	0032      	movs	r2, r6
    7868:	2300      	movs	r3, #0
    786a:	3230      	adds	r2, #48	; 0x30
	observe_info[observe_info_index].pObsFunc = p;
    786c:	6237      	str	r7, [r6, #32]
	observe_info[observe_info_index].ack_seqno = 0;
    786e:	62f3      	str	r3, [r6, #44]	; 0x2c
	observe_info[observe_info_index].obs_flag = 0;
    7870:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    7872:	f7fc fcfd 	bl	4270 <_Z13get_rtc_epochv>
    7876:	6270      	str	r0, [r6, #36]	; 0x24
	return observe_info_index++;
    7878:	7828      	ldrb	r0, [r5, #0]
    787a:	1c43      	adds	r3, r0, #1
    787c:	702b      	strb	r3, [r5, #0]
}
    787e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7880:	200018b0 	.word	0x200018b0
    7884:	200018b4 	.word	0x200018b4
    7888:	00011797 	.word	0x00011797

0000788c <_Z12set_observerPKcPF7error_eP4mbufPhhE>:
{
    788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    788e:	2534      	movs	r5, #52	; 0x34
    7890:	4c0d      	ldr	r4, [pc, #52]	; (78c8 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x3c>)
    7892:	4e0e      	ldr	r6, [pc, #56]	; (78cc <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x40>)
    7894:	7823      	ldrb	r3, [r4, #0]
{
    7896:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    7898:	436b      	muls	r3, r5
{
    789a:	0002      	movs	r2, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    789c:	490c      	ldr	r1, [pc, #48]	; (78d0 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x44>)
    789e:	18f0      	adds	r0, r6, r3
    78a0:	f006 f9e8 	bl	dc74 <siprintf>
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    78a4:	233c      	movs	r3, #60	; 0x3c
	observe_info[observe_info_index].pObsFunc = p;
    78a6:	7824      	ldrb	r4, [r4, #0]
    78a8:	436c      	muls	r4, r5
    78aa:	1934      	adds	r4, r6, r4
	observe_info[observe_info_index].sensor_id = 0;
    78ac:	0022      	movs	r2, r4
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    78ae:	62a3      	str	r3, [r4, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = 0;
    78b0:	2300      	movs	r3, #0
    78b2:	3231      	adds	r2, #49	; 0x31
    78b4:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].obs_flag = 0;
    78b6:	3a01      	subs	r2, #1
	observe_info[observe_info_index].pObsFunc = p;
    78b8:	6227      	str	r7, [r4, #32]
	observe_info[observe_info_index].obs_flag = 0;
    78ba:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].ack_seqno = 0;
    78bc:	62e3      	str	r3, [r4, #44]	; 0x2c
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    78be:	f7fc fcd7 	bl	4270 <_Z13get_rtc_epochv>
    78c2:	6260      	str	r0, [r4, #36]	; 0x24
}
    78c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78c6:	46c0      	nop			; (mov r8, r8)
    78c8:	200018b0 	.word	0x200018b0
    78cc:	200018b4 	.word	0x200018b4
    78d0:	00011797 	.word	0x00011797

000078d4 <_Z17coap_obs_reg_sapih>:
{
    78d4:	b510      	push	{r4, lr}
    78d6:	0004      	movs	r4, r0
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    78d8:	f7fc fcca 	bl	4270 <_Z13get_rtc_epochv>
    78dc:	2334      	movs	r3, #52	; 0x34
    78de:	435c      	muls	r4, r3
    78e0:	4b05      	ldr	r3, [pc, #20]	; (78f8 <_Z17coap_obs_reg_sapih+0x24>)
	observe_info[observer_id].obs_flag = 1;
    78e2:	2101      	movs	r1, #1
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    78e4:	191b      	adds	r3, r3, r4
	observe_info[observer_id].obs_flag = 1;
    78e6:	001a      	movs	r2, r3
    78e8:	3230      	adds	r2, #48	; 0x30
    78ea:	7011      	strb	r1, [r2, #0]
	observe_info[observer_id].ack_seqno = 10;
    78ec:	220a      	movs	r2, #10
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    78ee:	6258      	str	r0, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 10;
    78f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
    78f2:	2000      	movs	r0, #0
    78f4:	bd10      	pop	{r4, pc}
    78f6:	46c0      	nop			; (mov r8, r8)
    78f8:	200018b4 	.word	0x200018b4

000078fc <_Z19coap_obs_dereg_sapih>:
	observe_info[observer_id].obs_flag = 0;
    78fc:	2134      	movs	r1, #52	; 0x34
    78fe:	4341      	muls	r1, r0
    7900:	4b07      	ldr	r3, [pc, #28]	; (7920 <_Z19coap_obs_dereg_sapih+0x24>)
{
    7902:	b510      	push	{r4, lr}
	observe_info[observer_id].obs_flag = 0;
    7904:	185b      	adds	r3, r3, r1
    7906:	0019      	movs	r1, r3
    7908:	2400      	movs	r4, #0
    790a:	3130      	adds	r1, #48	; 0x30
{
    790c:	0002      	movs	r2, r0
	observe_info[observer_id].obs_flag = 0;
    790e:	700c      	strb	r4, [r1, #0]
	observe_info[observer_id].base_epoch = 0;
    7910:	625c      	str	r4, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 0;
    7912:	62dc      	str	r4, [r3, #44]	; 0x2c
	dlog(LOG_DEBUG, "De-register Observe: %d", observer_id);
    7914:	4903      	ldr	r1, [pc, #12]	; (7924 <_Z19coap_obs_dereg_sapih+0x28>)
    7916:	2007      	movs	r0, #7
    7918:	f7fc fd42 	bl	43a0 <_Z4dlogiPKcz>
}
    791c:	0020      	movs	r0, r4
    791e:	bd10      	pop	{r4, pc}
    7920:	200018b4 	.word	0x200018b4
    7924:	000117a3 	.word	0x000117a3

00007928 <_Z16coap_observe_rsph>:
 * coap_msg_response() to build a response.
 * Register for callback when ACK received.
 * Set pending_rsp, freeing any existing one first.
 */
error_t coap_observe_rsp(uint8_t observer_id)
{
    7928:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct coap_msg_ctx rsp;
    coap_ack_cb_info_t 	cbi;			// Callback info
    uint8_t 			len = 0;		// Message length
    792a:	270a      	movs	r7, #10
{
    792c:	b09f      	sub	sp, #124	; 0x7c
    uint8_t 			len = 0;		// Message length
    792e:	ab02      	add	r3, sp, #8
    uint8_t 			nxt = 0;		// The next observer
    7930:	260b      	movs	r6, #11
    uint8_t 			len = 0;		// Message length
    7932:	18ff      	adds	r7, r7, r3
    7934:	2300      	movs	r3, #0
    uint8_t 			nxt = 0;		// The next observer
    7936:	aa02      	add	r2, sp, #8
    7938:	18b6      	adds	r6, r6, r2
    uint8_t 			len = 0;		// Message length
    793a:	703b      	strb	r3, [r7, #0]
    uint8_t 			nxt = 0;		// The next observer
    793c:	7033      	strb	r3, [r6, #0]
    struct mbuf *		m = NULL;		// Observe response message
    struct optlv 		opt;
    error_t 			rc = ERR_OK;

	// Safety check. If a message is already in progress do nothing.
    if (pending_rsp) 
    793e:	4b59      	ldr	r3, [pc, #356]	; (7aa4 <_Z16coap_observe_rsph+0x17c>)
{
    7940:	0004      	movs	r4, r0
    if (pending_rsp) 
    7942:	6819      	ldr	r1, [r3, #0]
    7944:	2900      	cmp	r1, #0
    7946:	d007      	beq.n	7958 <_Z16coap_observe_rsph+0x30>
	{
		dlog(LOG_DEBUG, "coap_observe_rsp: Pending response in progress - skipping new notification");
    7948:	4957      	ldr	r1, [pc, #348]	; (7aa8 <_Z16coap_observe_rsph+0x180>)
    794a:	2007      	movs	r0, #7
    794c:	f7fc fd28 	bl	43a0 <_Z4dlogiPKcz>
		return ERR_INPROGRESS;
    7950:	2410      	movs	r4, #16
error:
    copt_del_all((sl_co*)&(rsp.oh));
    dlog(LOG_DEBUG, "coap_observe_rsp: free response mbuf on error");
    m_free(m);
    return rc;
}
    7952:	0020      	movs	r0, r4
    7954:	b01f      	add	sp, #124	; 0x7c
    7956:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rsp, 0, sizeof(rsp));
    7958:	ad09      	add	r5, sp, #36	; 0x24
    795a:	2254      	movs	r2, #84	; 0x54
    795c:	0028      	movs	r0, r5
    795e:	f005 f8b3 	bl	cac8 <memset>
	rc = get_obs_by_uri(observe_info[observer_id].obs_uri, &(rsp.tkl), rsp.token, &(rsp.client), &nxt);
    7962:	2222      	movs	r2, #34	; 0x22
    7964:	2334      	movs	r3, #52	; 0x34
    7966:	a902      	add	r1, sp, #8
    7968:	1852      	adds	r2, r2, r1
    796a:	211d      	movs	r1, #29
    796c:	4363      	muls	r3, r4
    796e:	4c4f      	ldr	r4, [pc, #316]	; (7aac <_Z16coap_observe_rsph+0x184>)
    7970:	a802      	add	r0, sp, #8
    7972:	18e4      	adds	r4, r4, r3
    7974:	9302      	str	r3, [sp, #8]
    7976:	1809      	adds	r1, r1, r0
    7978:	9600      	str	r6, [sp, #0]
    797a:	ab1a      	add	r3, sp, #104	; 0x68
    797c:	0020      	movs	r0, r4
    797e:	f7ff fd63 	bl	7448 <_Z14get_obs_by_uriPKcPhS1_PPvS1_>
    7982:	9003      	str	r0, [sp, #12]
    if (rc)
    7984:	2800      	cmp	r0, #0
    7986:	d006      	beq.n	7996 <_Z16coap_observe_rsph+0x6e>
        dlog(LOG_ERR, "get_obs_by_uri failed: %s", observe_info[observer_id].obs_uri);
    7988:	0022      	movs	r2, r4
    798a:	4949      	ldr	r1, [pc, #292]	; (7ab0 <_Z16coap_observe_rsph+0x188>)
    798c:	2003      	movs	r0, #3
    798e:	f7fc fd07 	bl	43a0 <_Z4dlogiPKcz>
        return ERR_NO_ENTRY;
    7992:	240c      	movs	r4, #12
    7994:	e7dd      	b.n	7952 <_Z16coap_observe_rsph+0x2a>
    copt_init((sl_co*)&(rsp.oh));
    7996:	a81c      	add	r0, sp, #112	; 0x70
    7998:	f7ff fe74 	bl	7684 <_Z9copt_initP5sl_co>
	m = m_gethdr();
    799c:	f000 fce6 	bl	836c <_Z5m_getv>
    79a0:	1e06      	subs	r6, r0, #0
    if (!m) 
    79a2:	d030      	beq.n	7a06 <_Z16coap_observe_rsph+0xde>
    m_prepend(m, COAP_OBS_HDR_SZ);
    79a4:	211c      	movs	r1, #28
    79a6:	f000 fd27 	bl	83f8 <_Z9m_prependP4mbufi>
	if (is_sapi == 1)
    79aa:	4b42      	ldr	r3, [pc, #264]	; (7ab4 <_Z16coap_observe_rsph+0x18c>)
    79ac:	781a      	ldrb	r2, [r3, #0]
    79ae:	6a23      	ldr	r3, [r4, #32]
    79b0:	2a01      	cmp	r2, #1
    79b2:	d12a      	bne.n	7a0a <_Z16coap_observe_rsph+0xe2>
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, observe_info[observer_id].sensor_id);
    79b4:	3431      	adds	r4, #49	; 0x31
    79b6:	7822      	ldrb	r2, [r4, #0]
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, 0);
    79b8:	0039      	movs	r1, r7
    79ba:	0030      	movs	r0, r6
    79bc:	4798      	blx	r3
    79be:	1e04      	subs	r4, r0, #0
    if (rc != ERR_OK) 
    79c0:	d137      	bne.n	7a32 <_Z16coap_observe_rsph+0x10a>
    m_adj( m, COAP_OBS_HDR_SZ );
    79c2:	211c      	movs	r1, #28
    79c4:	0030      	movs	r0, r6
    79c6:	f000 fd3d 	bl	8444 <_Z5m_adjP4mbufi>
    rsp.msg = m;
    79ca:	652e      	str	r6, [r5, #80]	; 0x50
    rsp.mid = get_mid_val();
    79cc:	f7ff fb4c 	bl	7068 <_Z11get_mid_valv>
	opt.ol = 3;
    79d0:	2703      	movs	r7, #3
	opt.ot = COAP_OPTION_OBSERVE;
    79d2:	2306      	movs	r3, #6
    79d4:	ac07      	add	r4, sp, #28
    rsp.mid = get_mid_val();
    79d6:	80a8      	strh	r0, [r5, #4]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79d8:	0021      	movs	r1, r4
    79da:	a81c      	add	r0, sp, #112	; 0x70
	opt.ot = COAP_OPTION_OBSERVE;
    79dc:	8023      	strh	r3, [r4, #0]
	opt.ol = 3;
    79de:	8067      	strh	r7, [r4, #2]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79e0:	f7ff fe84 	bl	76ec <_Z12copt_add_optP5sl_coP5optlv>
		dlog(LOG_ERR, "Couldn't add Observe option");
    79e4:	4934      	ldr	r1, [pc, #208]	; (7ab8 <_Z16coap_observe_rsph+0x190>)
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79e6:	2800      	cmp	r0, #0
    79e8:	d10a      	bne.n	7a00 <_Z16coap_observe_rsph+0xd8>
	opt.ot = COAP_OPTION_MAXAGE;
    79ea:	230e      	movs	r3, #14
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79ec:	0021      	movs	r1, r4
	opt.ot = COAP_OPTION_MAXAGE;
    79ee:	8023      	strh	r3, [r4, #0]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79f0:	a81c      	add	r0, sp, #112	; 0x70
	opt.ol = 4;
    79f2:	3b0a      	subs	r3, #10
    79f4:	8063      	strh	r3, [r4, #2]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    79f6:	f7ff fe79 	bl	76ec <_Z12copt_add_optP5sl_coP5optlv>
    79fa:	1e04      	subs	r4, r0, #0
    79fc:	d007      	beq.n	7a0e <_Z16coap_observe_rsph+0xe6>
		dlog(LOG_ERR, "Couldn't add Max-Age option");
    79fe:	492f      	ldr	r1, [pc, #188]	; (7abc <_Z16coap_observe_rsph+0x194>)
    7a00:	0038      	movs	r0, r7
    7a02:	f7fc fccd 	bl	43a0 <_Z4dlogiPKcz>
		rc = ERR_NO_MEM;
    7a06:	2403      	movs	r4, #3
    7a08:	e013      	b.n	7a32 <_Z16coap_observe_rsph+0x10a>
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, 0);
    7a0a:	9a03      	ldr	r2, [sp, #12]
    7a0c:	e7d4      	b.n	79b8 <_Z16coap_observe_rsph+0x90>
	rsp.plen = m->m_pktlen; /* payload includes type and length */
    7a0e:	8833      	ldrh	r3, [r6, #0]
	rsp.cf = COAP_CF_CSV;
    7a10:	2202      	movs	r2, #2
	rsp.plen = m->m_pktlen; /* payload includes type and length */
    7a12:	642b      	str	r3, [r5, #64]	; 0x40
    rsp.code = COAP_RSP_205_CONTENT;
    7a14:	2345      	movs	r3, #69	; 0x45
    7a16:	70ab      	strb	r3, [r5, #2]
	rsp.cf = COAP_CF_CSV;
    7a18:	ab18      	add	r3, sp, #96	; 0x60
    7a1a:	701a      	strb	r2, [r3, #0]
    rsp.type = COAP_T_NCONF_VAL; // TODO: CON or NON?
    7a1c:	2301      	movs	r3, #1
    if (coap_msg_response(&rsp) != ERR_OK) 
    7a1e:	0028      	movs	r0, r5
    rsp.type = COAP_T_NCONF_VAL; // TODO: CON or NON?
    7a20:	702b      	strb	r3, [r5, #0]
    if (coap_msg_response(&rsp) != ERR_OK) 
    7a22:	f7ff fc31 	bl	7288 <_Z17coap_msg_responseP12coap_msg_ctx>
    7a26:	2800      	cmp	r0, #0
    7a28:	d00e      	beq.n	7a48 <_Z16coap_observe_rsph+0x120>
        dlog(LOG_ERR, "coap_observe_rsp: Error creating response");
    7a2a:	4925      	ldr	r1, [pc, #148]	; (7ac0 <_Z16coap_observe_rsph+0x198>)
    7a2c:	0038      	movs	r0, r7
    7a2e:	f7fc fcb7 	bl	43a0 <_Z4dlogiPKcz>
    copt_del_all((sl_co*)&(rsp.oh));
    7a32:	a81c      	add	r0, sp, #112	; 0x70
    7a34:	f7ff fe38 	bl	76a8 <_Z12copt_del_allP5sl_co>
    dlog(LOG_DEBUG, "coap_observe_rsp: free response mbuf on error");
    7a38:	4922      	ldr	r1, [pc, #136]	; (7ac4 <_Z16coap_observe_rsph+0x19c>)
    7a3a:	2007      	movs	r0, #7
    7a3c:	f7fc fcb0 	bl	43a0 <_Z4dlogiPKcz>
    m_free(m);
    7a40:	0030      	movs	r0, r6
    7a42:	f000 fcbd 	bl	83c0 <_Z6m_freeP4mbuf>
    return rc;
    7a46:	e784      	b.n	7952 <_Z16coap_observe_rsph+0x2a>
    cbi.cbctx = (void *) &observe_info[observer_id].ack_seqno;
    7a48:	9c02      	ldr	r4, [sp, #8]
    7a4a:	4b18      	ldr	r3, [pc, #96]	; (7aac <_Z16coap_observe_rsph+0x184>)
    7a4c:	342c      	adds	r4, #44	; 0x2c
    7a4e:	191c      	adds	r4, r3, r4
    cbi.cb = observe_rx_ack;
    7a50:	4b1d      	ldr	r3, [pc, #116]	; (7ac8 <_Z16coap_observe_rsph+0x1a0>)
    cbi.cbctx = (void *) &observe_info[observer_id].ack_seqno;
    7a52:	9406      	str	r4, [sp, #24]
    cbi.cb = observe_rx_ack;
    7a54:	9305      	str	r3, [sp, #20]
    coap_con_add(rsp.mid, &cbi);
    7a56:	88a8      	ldrh	r0, [r5, #4]
    7a58:	a905      	add	r1, sp, #20
    7a5a:	f7ff f91f 	bl	6c9c <_Z12coap_con_addtP18coap_ack_cb_info_t>
    if (pending_rsp) 
    7a5e:	4b11      	ldr	r3, [pc, #68]	; (7aa4 <_Z16coap_observe_rsph+0x17c>)
    7a60:	6818      	ldr	r0, [r3, #0]
    7a62:	2800      	cmp	r0, #0
    7a64:	d008      	beq.n	7a78 <_Z16coap_observe_rsph+0x150>
        m_free(pending_rsp);
    7a66:	f000 fcab 	bl	83c0 <_Z6m_freeP4mbuf>
		dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    7a6a:	2396      	movs	r3, #150	; 0x96
    7a6c:	4a17      	ldr	r2, [pc, #92]	; (7acc <_Z16coap_observe_rsph+0x1a4>)
    7a6e:	33ff      	adds	r3, #255	; 0xff
    7a70:	4917      	ldr	r1, [pc, #92]	; (7ad0 <_Z16coap_observe_rsph+0x1a8>)
    7a72:	2007      	movs	r0, #7
    7a74:	f7fc fc94 	bl	43a0 <_Z4dlogiPKcz>
    pending_rsp = rsp.msg;
    7a78:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    copt_del_all((sl_co*)&(rsp.oh));
    7a7a:	a81c      	add	r0, sp, #112	; 0x70
    pending_rsp = rsp.msg;
    7a7c:	9302      	str	r3, [sp, #8]
    7a7e:	9a02      	ldr	r2, [sp, #8]
    7a80:	4b08      	ldr	r3, [pc, #32]	; (7aa4 <_Z16coap_observe_rsph+0x17c>)
    return ERR_OK;
    7a82:	2400      	movs	r4, #0
    pending_rsp = rsp.msg;
    7a84:	601a      	str	r2, [r3, #0]
    copt_del_all((sl_co*)&(rsp.oh));
    7a86:	f7ff fe0f 	bl	76a8 <_Z12copt_del_allP5sl_co>
	digitalWrite(MNIC_WAKEUP_PIN,LOW);
    7a8a:	2100      	movs	r1, #0
    7a8c:	2009      	movs	r0, #9
    7a8e:	f7fc f8e3 	bl	3c58 <digitalWrite>
	delay(1);
    7a92:	2001      	movs	r0, #1
    7a94:	f7fa fe24 	bl	26e0 <delay>
	digitalWrite(MNIC_WAKEUP_PIN,HIGH);
    7a98:	2101      	movs	r1, #1
    7a9a:	2009      	movs	r0, #9
    7a9c:	f7fc f8dc 	bl	3c58 <digitalWrite>
    return ERR_OK;
    7aa0:	e757      	b.n	7952 <_Z16coap_observe_rsph+0x2a>
    7aa2:	46c0      	nop			; (mov r8, r8)
    7aa4:	20001984 	.word	0x20001984
    7aa8:	00011688 	.word	0x00011688
    7aac:	200018b4 	.word	0x200018b4
    7ab0:	000116d3 	.word	0x000116d3
    7ab4:	20000096 	.word	0x20000096
    7ab8:	000116ed 	.word	0x000116ed
    7abc:	00011709 	.word	0x00011709
    7ac0:	00011725 	.word	0x00011725
    7ac4:	00011769 	.word	0x00011769
    7ac8:	00007829 	.word	0x00007829
    7acc:	000117bb 	.word	0x000117bb
    7ad0:	0001174f 	.word	0x0001174f

00007ad4 <_Z10do_observev>:
{
    7ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	time_t  epoch      = get_rtc_epoch();
    7ad6:	f7fc fbcb 	bl	4270 <_Z13get_rtc_epochv>
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    7ada:	2400      	movs	r4, #0
	time_t  epoch      = get_rtc_epoch();
    7adc:	0005      	movs	r5, r0
		if (observe_info[indx].obs_flag)
    7ade:	2034      	movs	r0, #52	; 0x34
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    7ae0:	4b18      	ldr	r3, [pc, #96]	; (7b44 <_Z10do_observev+0x70>)
    7ae2:	781f      	ldrb	r7, [r3, #0]
    7ae4:	42bc      	cmp	r4, r7
    7ae6:	da27      	bge.n	7b38 <_Z10do_observev+0x64>
		if (observe_info[indx].obs_flag)
    7ae8:	0003      	movs	r3, r0
    7aea:	4363      	muls	r3, r4
    7aec:	4a16      	ldr	r2, [pc, #88]	; (7b48 <_Z10do_observev+0x74>)
    7aee:	18d3      	adds	r3, r2, r3
    7af0:	001a      	movs	r2, r3
    7af2:	3230      	adds	r2, #48	; 0x30
    7af4:	7812      	ldrb	r2, [r2, #0]
    7af6:	2a00      	cmp	r2, #0
    7af8:	d020      	beq.n	7b3c <_Z10do_observev+0x68>
			if (observe_info[indx].base_epoch == 0)
    7afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7afc:	2a00      	cmp	r2, #0
    7afe:	d100      	bne.n	7b02 <_Z10do_observev+0x2e>
				observe_info[indx].base_epoch = epoch;
    7b00:	625d      	str	r5, [r3, #36]	; 0x24
			if (epoch >= (observe_info[indx].base_epoch+observe_info[indx].frequency))
    7b02:	0003      	movs	r3, r0
    7b04:	4363      	muls	r3, r4
    7b06:	4a10      	ldr	r2, [pc, #64]	; (7b48 <_Z10do_observev+0x74>)
    7b08:	18d3      	adds	r3, r2, r3
    7b0a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    7b0c:	001e      	movs	r6, r3
    7b0e:	468c      	mov	ip, r1
    7b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7b12:	3624      	adds	r6, #36	; 0x24
    7b14:	4494      	add	ip, r2
    7b16:	45ac      	cmp	ip, r5
    7b18:	d810      	bhi.n	7b3c <_Z10do_observev+0x68>
				dlog(LOG_DEBUG, "do_observe: epoch %x uri %s", observe_info[indx].base_epoch, observe_info[indx].obs_uri);
    7b1a:	490c      	ldr	r1, [pc, #48]	; (7b4c <_Z10do_observev+0x78>)
    7b1c:	2007      	movs	r0, #7
    7b1e:	f7fc fc3f 	bl	43a0 <_Z4dlogiPKcz>
				observe_info[indx].base_epoch = epoch;
    7b22:	6035      	str	r5, [r6, #0]
				coap_observe_rsp(indx);
    7b24:	0020      	movs	r0, r4
    7b26:	f7ff feff 	bl	7928 <_Z16coap_observe_rsph>
				int freeram = free_ram();
    7b2a:	f7fc fd6b 	bl	4604 <_Z8free_ramv>
				dlog(LOG_DEBUG, "do_observe: Free Ram: %d", freeram);
    7b2e:	4908      	ldr	r1, [pc, #32]	; (7b50 <_Z10do_observev+0x7c>)
				int freeram = free_ram();
    7b30:	0002      	movs	r2, r0
				dlog(LOG_DEBUG, "do_observe: Free Ram: %d", freeram);
    7b32:	2007      	movs	r0, #7
    7b34:	f7fc fc34 	bl	43a0 <_Z4dlogiPKcz>
} // do_observe
    7b38:	2001      	movs	r0, #1
    7b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    7b3c:	3401      	adds	r4, #1
    7b3e:	b2e4      	uxtb	r4, r4
    7b40:	e7d0      	b.n	7ae4 <_Z10do_observev+0x10>
    7b42:	46c0      	nop			; (mov r8, r8)
    7b44:	200018b0 	.word	0x200018b0
    7b48:	200018b4 	.word	0x200018b4
    7b4c:	00011653 	.word	0x00011653
    7b50:	0001166f 	.word	0x0001166f

00007b54 <_ZL8crsystemP12coap_msg_ctxS0_>:
}


// The "sys" dispatcher.
static error_t crsystem(struct coap_msg_ctx *req, struct coap_msg_ctx *rsp)
{
    7b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    struct optlv *o;
    void *it = NULL;
	
    /* No observes on system */
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7b56:	0006      	movs	r6, r0
    void *it = NULL;
    7b58:	2200      	movs	r2, #0
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7b5a:	364c      	adds	r6, #76	; 0x4c
{
    7b5c:	b087      	sub	sp, #28
    7b5e:	0005      	movs	r5, r0
    7b60:	000c      	movs	r4, r1
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7b62:	0030      	movs	r0, r6
    7b64:	2106      	movs	r1, #6
    void *it = NULL;
    7b66:	9203      	str	r2, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7b68:	f7ff fe02 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7b6c:	2800      	cmp	r0, #0
    7b6e:	d004      	beq.n	7b7a <_ZL8crsystemP12coap_msg_ctxS0_+0x26>
	{
        copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    7b70:	0020      	movs	r0, r4
    7b72:	2106      	movs	r1, #6
    7b74:	304c      	adds	r0, #76	; 0x4c
    7b76:	f7ff fe23 	bl	77c0 <_Z17copt_del_opt_typeP5sl_cot>
    }
    /* 
     * No URI path beyond /system, except /time and /stats is supported, so
     * reject if present. 
     */
    copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    7b7a:	aa03      	add	r2, sp, #12
    7b7c:	210b      	movs	r1, #11
    7b7e:	0030      	movs	r0, r6
    7b80:	f7ff fdf6 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	
    if ((o = copt_get_next_opt_type((const sl_co*) &(req->oh), COAP_OPTION_URI_PATH, &it)))
    7b84:	aa03      	add	r2, sp, #12
    7b86:	210b      	movs	r1, #11
    7b88:	0030      	movs	r0, r6
    7b8a:	f7ff fdf1 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7b8e:	1e07      	subs	r7, r0, #0
    7b90:	d100      	bne.n	7b94 <_ZL8crsystemP12coap_msg_ctxS0_+0x40>
    7b92:	e094      	b.n	7cbe <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
	{
        if (!coap_opt_strcmp(o, S_TIME_URI))
    7b94:	4981      	ldr	r1, [pc, #516]	; (7d9c <_ZL8crsystemP12coap_msg_ctxS0_+0x248>)
    7b96:	f7ff f8c1 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
    7b9a:	9001      	str	r0, [sp, #4]
    7b9c:	2800      	cmp	r0, #0
    7b9e:	d000      	beq.n	7ba2 <_ZL8crsystemP12coap_msg_ctxS0_+0x4e>
    7ba0:	e07e      	b.n	7ca0 <_ZL8crsystemP12coap_msg_ctxS0_+0x14c>
    7ba2:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)))
    7ba4:	0030      	movs	r0, r6
    7ba6:	aa04      	add	r2, sp, #16
    7ba8:	210b      	movs	r1, #11
    7baa:	9304      	str	r3, [sp, #16]
    7bac:	f7ff fde0 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7bb0:	1e06      	subs	r6, r0, #0
    7bb2:	d005      	beq.n	7bc0 <_ZL8crsystemP12coap_msg_ctxS0_+0x6c>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    7bb4:	2384      	movs	r3, #132	; 0x84
    7bb6:	70a3      	strb	r3, [r4, #2]
        rsp->plen = 0;
    7bb8:	9b01      	ldr	r3, [sp, #4]
    7bba:	6423      	str	r3, [r4, #64]	; 0x40
    return ERR_OK;
    7bbc:	2500      	movs	r5, #0
    7bbe:	e017      	b.n	7bf0 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    if (req->code == COAP_REQUEST_GET)
    7bc0:	78ab      	ldrb	r3, [r5, #2]
    7bc2:	2b01      	cmp	r3, #1
    7bc4:	d124      	bne.n	7c10 <_ZL8crsystemP12coap_msg_ctxS0_+0xbc>
		now = get_rtc_epoch();
    7bc6:	f7fc fb53 	bl	4270 <_Z13get_rtc_epochv>
    7bca:	0005      	movs	r5, r0
		dlog(LOG_DEBUG, "Epoch for GET of sys time: %08x", now);
    7bcc:	0002      	movs	r2, r0
    7bce:	4974      	ldr	r1, [pc, #464]	; (7da0 <_ZL8crsystemP12coap_msg_ctxS0_+0x24c>)
    7bd0:	2007      	movs	r0, #7
    7bd2:	f7fc fbe5 	bl	43a0 <_Z4dlogiPKcz>
    7bd6:	ba2d      	rev	r5, r5
        d = m_append(rsp->msg, len);
    7bd8:	2104      	movs	r1, #4
    7bda:	6d20      	ldr	r0, [r4, #80]	; 0x50
        now = htonl(now);
    7bdc:	9505      	str	r5, [sp, #20]
        d = m_append(rsp->msg, len);
    7bde:	f000 fc21 	bl	8424 <_Z8m_appendP4mbufs>
        if (!d)
    7be2:	2800      	cmp	r0, #0
    7be4:	d107      	bne.n	7bf6 <_ZL8crsystemP12coap_msg_ctxS0_+0xa2>
            return ERR_NO_MEM;
    7be6:	2503      	movs	r5, #3
            coap_stats.no_mbufs++;
    7be8:	4a6e      	ldr	r2, [pc, #440]	; (7da4 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    7bea:	6813      	ldr	r3, [r2, #0]
    7bec:	3301      	adds	r3, #1
    7bee:	6013      	str	r3, [r2, #0]
    }

    rsp->plen = 0;

    return ERR_OK;
}
    7bf0:	0028      	movs	r0, r5
    7bf2:	b007      	add	sp, #28
    7bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(d, &now, len);
    7bf6:	2504      	movs	r5, #4
    7bf8:	a905      	add	r1, sp, #20
    7bfa:	002a      	movs	r2, r5
    7bfc:	f004 ff49 	bl	ca92 <memcpy>
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    7c00:	0023      	movs	r3, r4
    7c02:	222a      	movs	r2, #42	; 0x2a
    7c04:	333c      	adds	r3, #60	; 0x3c
        rsp->plen = len;
    7c06:	6425      	str	r5, [r4, #64]	; 0x40
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    7c08:	701a      	strb	r2, [r3, #0]
        rsp->code = COAP_RSP_205_CONTENT;
    7c0a:	2345      	movs	r3, #69	; 0x45
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    7c0c:	70a3      	strb	r3, [r4, #2]
    7c0e:	e7d5      	b.n	7bbc <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
	else if (req->code == COAP_REQUEST_PUT)
    7c10:	2b03      	cmp	r3, #3
    7c12:	d141      	bne.n	7c98 <_ZL8crsystemP12coap_msg_ctxS0_+0x144>
        m_adj(req->msg, req->hdrlen);
    7c14:	6969      	ldr	r1, [r5, #20]
    7c16:	6d28      	ldr	r0, [r5, #80]	; 0x50
    7c18:	f000 fc14 	bl	8444 <_Z5m_adjP4mbufi>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    7c1c:	6d2f      	ldr	r7, [r5, #80]	; 0x50
        if ((req->msg->m_pktlen == 0) || ((td->tl.u.rdt != crdt_time_abs) && (td->tl.u.rdt != crdt_time_delta)) || 
    7c1e:	883b      	ldrh	r3, [r7, #0]
    7c20:	2b00      	cmp	r3, #0
    7c22:	d006      	beq.n	7c32 <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    7c24:	793b      	ldrb	r3, [r7, #4]
    7c26:	1f9a      	subs	r2, r3, #6
    7c28:	2a01      	cmp	r2, #1
    7c2a:	d802      	bhi.n	7c32 <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    7c2c:	797a      	ldrb	r2, [r7, #5]
    7c2e:	2a08      	cmp	r2, #8
    7c30:	d001      	beq.n	7c36 <_ZL8crsystemP12coap_msg_ctxS0_+0xe2>
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    7c32:	2386      	movs	r3, #134	; 0x86
    7c34:	e7ea      	b.n	7c0c <_ZL8crsystemP12coap_msg_ctxS0_+0xb8>
    return ERR_OK;
    7c36:	0035      	movs	r5, r6
		else if (td->tl.u.rdt == crdt_time_abs)
    7c38:	2b06      	cmp	r3, #6
    7c3a:	d1d9      	bne.n	7bf0 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    7c3c:	1d3a      	adds	r2, r7, #4
			ddump(LOG_DEBUG, "PUT /sys/time Payload", (void *)td, sizeof(coap_sys_time_data_t));
    7c3e:	3304      	adds	r3, #4
    7c40:	4959      	ldr	r1, [pc, #356]	; (7da8 <_ZL8crsystemP12coap_msg_ctxS0_+0x254>)
    7c42:	2007      	movs	r0, #7
    7c44:	f7fc fbce 	bl	43e4 <_Z5ddumpiPKcPKvi>
			epoch = (uint32_t) ntohl(td->sec);
    7c48:	21ff      	movs	r1, #255	; 0xff
    7c4a:	79fa      	ldrb	r2, [r7, #7]
    7c4c:	79bb      	ldrb	r3, [r7, #6]
    7c4e:	0212      	lsls	r2, r2, #8
    7c50:	431a      	orrs	r2, r3
    7c52:	7a3b      	ldrb	r3, [r7, #8]
    7c54:	0209      	lsls	r1, r1, #8
    7c56:	041b      	lsls	r3, r3, #16
    7c58:	431a      	orrs	r2, r3
    7c5a:	7a7b      	ldrb	r3, [r7, #9]
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    7c5c:	2007      	movs	r0, #7
			epoch = (uint32_t) ntohl(td->sec);
    7c5e:	061b      	lsls	r3, r3, #24
    7c60:	4313      	orrs	r3, r2
    7c62:	061a      	lsls	r2, r3, #24
    7c64:	0e1e      	lsrs	r6, r3, #24
    7c66:	4316      	orrs	r6, r2
    7c68:	0a1a      	lsrs	r2, r3, #8
    7c6a:	400a      	ands	r2, r1
    7c6c:	4316      	orrs	r6, r2
    7c6e:	22ff      	movs	r2, #255	; 0xff
    7c70:	021b      	lsls	r3, r3, #8
    7c72:	0412      	lsls	r2, r2, #16
    7c74:	4013      	ands	r3, r2
    7c76:	431e      	orrs	r6, r3
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    7c78:	0032      	movs	r2, r6
    7c7a:	494c      	ldr	r1, [pc, #304]	; (7dac <_ZL8crsystemP12coap_msg_ctxS0_+0x258>)
    7c7c:	f7fc fb90 	bl	43a0 <_Z4dlogiPKcz>
			rtc.setEpoch(epoch);
    7c80:	0031      	movs	r1, r6
    7c82:	484b      	ldr	r0, [pc, #300]	; (7db0 <_ZL8crsystemP12coap_msg_ctxS0_+0x25c>)
    7c84:	f7fe f966 	bl	5f54 <_ZN7RTCZero8setEpochEm>
			print_current_date();
    7c88:	f7fc fb36 	bl	42f8 <_Z18print_current_datev>
			print_current_time();
    7c8c:	f7fc faf8 	bl	4280 <_Z18print_current_timev>
			rsp->code = COAP_RSP_204_CHANGED;
    7c90:	2344      	movs	r3, #68	; 0x44
    7c92:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    7c94:	6425      	str	r5, [r4, #64]	; 0x40
    return ERR_OK;
    7c96:	e7ab      	b.n	7bf0 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    7c98:	23a1      	movs	r3, #161	; 0xa1
        rsp->plen = 0;
    7c9a:	6420      	str	r0, [r4, #64]	; 0x40
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    7c9c:	70a3      	strb	r3, [r4, #2]
    7c9e:	e78d      	b.n	7bbc <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
		else if (!coap_opt_strcmp(o, S_STAT_URI))
    7ca0:	4944      	ldr	r1, [pc, #272]	; (7db4 <_ZL8crsystemP12coap_msg_ctxS0_+0x260>)
    7ca2:	0038      	movs	r0, r7
    7ca4:	f7ff f83a 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
    7ca8:	2800      	cmp	r0, #0
    7caa:	d108      	bne.n	7cbe <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
    7cac:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it))) {
    7cae:	aa05      	add	r2, sp, #20
    7cb0:	210b      	movs	r1, #11
    7cb2:	0030      	movs	r0, r6
    7cb4:	9305      	str	r3, [sp, #20]
    7cb6:	f7ff fd5b 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7cba:	1e02      	subs	r2, r0, #0
    7cbc:	d001      	beq.n	7cc2 <_ZL8crsystemP12coap_msg_ctxS0_+0x16e>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    7cbe:	2384      	movs	r3, #132	; 0x84
    7cc0:	e04f      	b.n	7d62 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    7cc2:	0030      	movs	r0, r6
    7cc4:	210f      	movs	r1, #15
    7cc6:	f7ff fd53 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if (req->code == COAP_REQUEST_GET) {
    7cca:	78ab      	ldrb	r3, [r5, #2]
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    7ccc:	0006      	movs	r6, r0
    if (req->code == COAP_REQUEST_GET) {
    7cce:	2b01      	cmp	r3, #1
    7cd0:	d151      	bne.n	7d76 <_ZL8crsystemP12coap_msg_ctxS0_+0x222>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    7cd2:	4939      	ldr	r1, [pc, #228]	; (7db8 <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    7cd4:	f7ff f822 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
    7cd8:	1e05      	subs	r5, r0, #0
    7cda:	d13b      	bne.n	7d54 <_ZL8crsystemP12coap_msg_ctxS0_+0x200>
    coap_sys_coap_stats_t *d = (coap_sys_coap_stats_t *) m_append(m, sizeof(coap_sys_coap_stats_t));
    7cdc:	2128      	movs	r1, #40	; 0x28
    7cde:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7ce0:	f000 fba0 	bl	8424 <_Z8m_appendP4mbufs>
    7ce4:	4b2f      	ldr	r3, [pc, #188]	; (7da4 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    if (!d) {
    7ce6:	2800      	cmp	r0, #0
    7ce8:	d114      	bne.n	7d14 <_ZL8crsystemP12coap_msg_ctxS0_+0x1c0>
        coap_stats.no_mbufs++;
    7cea:	681a      	ldr	r2, [r3, #0]
        return ERR_NO_MEM;
    7cec:	3503      	adds	r5, #3
        coap_stats.no_mbufs++;
    7cee:	3201      	adds	r2, #1
    7cf0:	601a      	str	r2, [r3, #0]
        dlog(LOG_DEBUG, "GET (status %d) read %d bytes.", rc, len);
    7cf2:	2328      	movs	r3, #40	; 0x28
    7cf4:	002a      	movs	r2, r5
    7cf6:	4931      	ldr	r1, [pc, #196]	; (7dbc <_ZL8crsystemP12coap_msg_ctxS0_+0x268>)
    7cf8:	2007      	movs	r0, #7
    7cfa:	f7fc fb51 	bl	43a0 <_Z4dlogiPKcz>
        if (!rc) {
    7cfe:	2d00      	cmp	r5, #0
    7d00:	d134      	bne.n	7d6c <_ZL8crsystemP12coap_msg_ctxS0_+0x218>
            rsp->plen = len;
    7d02:	2328      	movs	r3, #40	; 0x28
    7d04:	6423      	str	r3, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    7d06:	0023      	movs	r3, r4
    7d08:	222a      	movs	r2, #42	; 0x2a
    7d0a:	333c      	adds	r3, #60	; 0x3c
    7d0c:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    7d0e:	2345      	movs	r3, #69	; 0x45
    7d10:	70a3      	strb	r3, [r4, #2]
    7d12:	e76d      	b.n	7bf0 <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    d->tl.u.rdt = crdt_stat_coap;
    7d14:	2208      	movs	r2, #8
    7d16:	7002      	strb	r2, [r0, #0]
    d->tl.l = sizeof(coap_stats);
    7d18:	321c      	adds	r2, #28
    7d1a:	7042      	strb	r2, [r0, #1]
    7d1c:	681a      	ldr	r2, [r3, #0]
    7d1e:	ba12      	rev	r2, r2
    d->cs.no_mbufs = htonl(coap_stats.no_mbufs);
    7d20:	6042      	str	r2, [r0, #4]
    7d22:	685a      	ldr	r2, [r3, #4]
    7d24:	ba12      	rev	r2, r2
    d->cs.no_mem = htonl(coap_stats.no_mem);
    7d26:	6082      	str	r2, [r0, #8]
    7d28:	689a      	ldr	r2, [r3, #8]
    7d2a:	ba12      	rev	r2, r2
    d->cs.sensors_enabled = htonl(coap_stats.sensors_enabled);
    7d2c:	60c2      	str	r2, [r0, #12]
    7d2e:	68da      	ldr	r2, [r3, #12]
    7d30:	ba12      	rev	r2, r2
    d->cs.sensors_disabled = htonl(coap_stats.sensors_disabled);
    7d32:	6102      	str	r2, [r0, #16]
    7d34:	691a      	ldr	r2, [r3, #16]
    7d36:	ba12      	rev	r2, r2
    d->cs.err_hdlc_send = htonl(coap_stats.err_hdlc_send);
    7d38:	6142      	str	r2, [r0, #20]
    7d3a:	695a      	ldr	r2, [r3, #20]
    7d3c:	ba12      	rev	r2, r2
    d->cs.active_obs = htonl(coap_stats.active_obs);
    7d3e:	6182      	str	r2, [r0, #24]
    7d40:	699a      	ldr	r2, [r3, #24]
    7d42:	ba12      	rev	r2, r2
    d->cs.rx_success = htonl(coap_stats.rx_success);
    7d44:	61c2      	str	r2, [r0, #28]
    7d46:	69da      	ldr	r2, [r3, #28]
    7d48:	6a1b      	ldr	r3, [r3, #32]
    7d4a:	ba12      	rev	r2, r2
    7d4c:	ba1b      	rev	r3, r3
    d->cs.tx_success = htonl(coap_stats.tx_success);
    7d4e:	6202      	str	r2, [r0, #32]
    d->cs.nretries_exceeded = htonl(coap_stats.nretries_exceeded);
    7d50:	6243      	str	r3, [r0, #36]	; 0x24
    7d52:	e7ce      	b.n	7cf2 <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    7d54:	491a      	ldr	r1, [pc, #104]	; (7dc0 <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    7d56:	0030      	movs	r0, r6
    7d58:	f7fe ffe0 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
    7d5c:	2800      	cmp	r0, #0
    7d5e:	d003      	beq.n	7d68 <_ZL8crsystemP12coap_msg_ctxS0_+0x214>
            rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    7d60:	23a1      	movs	r3, #161	; 0xa1
            rsp->code = COAP_RSP_404_NOT_FOUND;
    7d62:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    7d64:	2500      	movs	r5, #0
    7d66:	e795      	b.n	7c94 <_ZL8crsystemP12coap_msg_ctxS0_+0x140>
            rc = ERR_INVAL;
    7d68:	2504      	movs	r5, #4
    7d6a:	e7c2      	b.n	7cf2 <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    7d6c:	23a0      	movs	r3, #160	; 0xa0
            switch (rc) {
    7d6e:	2d04      	cmp	r5, #4
    7d70:	d1f7      	bne.n	7d62 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
                rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    7d72:	2386      	movs	r3, #134	; 0x86
    7d74:	e7f5      	b.n	7d62 <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    } else if (req->code == COAP_REQUEST_PUT) {
    7d76:	2b03      	cmp	r3, #3
    7d78:	d1f2      	bne.n	7d60 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    7d7a:	490f      	ldr	r1, [pc, #60]	; (7db8 <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    7d7c:	f7fe ffce 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
    7d80:	2800      	cmp	r0, #0
    7d82:	d0ed      	beq.n	7d60 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    7d84:	490e      	ldr	r1, [pc, #56]	; (7dc0 <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    7d86:	0030      	movs	r0, r6
    7d88:	f7fe ffc8 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
    7d8c:	2800      	cmp	r0, #0
    7d8e:	d1e7      	bne.n	7d60 <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        dlog(LOG_DEBUG, "SET (status %d).", rc);
    7d90:	2204      	movs	r2, #4
    7d92:	490c      	ldr	r1, [pc, #48]	; (7dc4 <_ZL8crsystemP12coap_msg_ctxS0_+0x270>)
    7d94:	3007      	adds	r0, #7
    7d96:	f7fc fb03 	bl	43a0 <_Z4dlogiPKcz>
    7d9a:	e7ea      	b.n	7d72 <_ZL8crsystemP12coap_msg_ctxS0_+0x21e>
    7d9c:	00011847 	.word	0x00011847
    7da0:	0001184c 	.word	0x0001184c
    7da4:	200019bc 	.word	0x200019bc
    7da8:	0001186c 	.word	0x0001186c
    7dac:	00011882 	.word	0x00011882
    7db0:	20000959 	.word	0x20000959
    7db4:	0001189d 	.word	0x0001189d
    7db8:	000118a3 	.word	0x000118a3
    7dbc:	000118b4 	.word	0x000118b4
    7dc0:	000118ac 	.word	0x000118ac
    7dc4:	000118d3 	.word	0x000118d3

00007dc8 <_ZL11crwellknownP12coap_msg_ctxS0_>:
{
    7dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    7dca:	4b45      	ldr	r3, [pc, #276]	; (7ee0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x118>)
{
    7dcc:	b087      	sub	sp, #28
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    7dce:	681b      	ldr	r3, [r3, #0]
{
    7dd0:	000d      	movs	r5, r1
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    7dd2:	9303      	str	r3, [sp, #12]
    void *it = NULL;
    7dd4:	2300      	movs	r3, #0
    7dd6:	9305      	str	r3, [sp, #20]
    rsp->code = 0;  /* unknown yet - fill in below */
    7dd8:	708b      	strb	r3, [r1, #2]
    if (req->code == COAP_REQUEST_GET) {
    7dda:	7882      	ldrb	r2, [r0, #2]
    7ddc:	2a01      	cmp	r2, #1
    7dde:	d000      	beq.n	7de2 <_ZL11crwellknownP12coap_msg_ctxS0_+0x1a>
    7de0:	e079      	b.n	7ed6 <_ZL11crwellknownP12coap_msg_ctxS0_+0x10e>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    7de2:	304c      	adds	r0, #76	; 0x4c
    7de4:	aa05      	add	r2, sp, #20
    7de6:	210b      	movs	r1, #11
    7de8:	0004      	movs	r4, r0
    7dea:	f7ff fcc1 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    7dee:	2800      	cmp	r0, #0
    7df0:	d100      	bne.n	7df4 <_ZL11crwellknownP12coap_msg_ctxS0_+0x2c>
    7df2:	e073      	b.n	7edc <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    7df4:	aa05      	add	r2, sp, #20
    7df6:	210b      	movs	r1, #11
    7df8:	0020      	movs	r0, r4
    7dfa:	f7ff fcb9 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7dfe:	2800      	cmp	r0, #0
    7e00:	d100      	bne.n	7e04 <_ZL11crwellknownP12coap_msg_ctxS0_+0x3c>
    7e02:	e06b      	b.n	7edc <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            coap_opt_strcmp(op, "core")                                      ||
    7e04:	4937      	ldr	r1, [pc, #220]	; (7ee4 <_ZL11crwellknownP12coap_msg_ctxS0_+0x11c>)
    7e06:	f7fe ff89 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
                copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) ||
    7e0a:	2800      	cmp	r0, #0
    7e0c:	d166      	bne.n	7edc <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) {
    7e0e:	aa05      	add	r2, sp, #20
    7e10:	210b      	movs	r1, #11
    7e12:	0020      	movs	r0, r4
    7e14:	f7ff fcac 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    7e18:	2800      	cmp	r0, #0
    7e1a:	d15f      	bne.n	7edc <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
    7e1c:	2302      	movs	r3, #2
    7e1e:	4e32      	ldr	r6, [pc, #200]	; (7ee8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x120>)
    7e20:	9300      	str	r3, [sp, #0]
    7e22:	3618      	adds	r6, #24
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    7e24:	9b00      	ldr	r3, [sp, #0]
    7e26:	9a03      	ldr	r2, [sp, #12]
    7e28:	4293      	cmp	r3, r2
    7e2a:	da4a      	bge.n	7ec2 <_ZL11crwellknownP12coap_msg_ctxS0_+0xfa>
            len = strlen(cr->path) + 4;         /* adding </ > , */
    7e2c:	6830      	ldr	r0, [r6, #0]
    7e2e:	f005 ff62 	bl	dcf6 <strlen>
    7e32:	0004      	movs	r4, r0
            if (cr->link) {
    7e34:	68b0      	ldr	r0, [r6, #8]
            len = strlen(cr->path) + 4;         /* adding </ > , */
    7e36:	1d23      	adds	r3, r4, #4
            if (cr->link) {
    7e38:	2800      	cmp	r0, #0
    7e3a:	d003      	beq.n	7e44 <_ZL11crwellknownP12coap_msg_ctxS0_+0x7c>
                len += strlen(cr->link) + 1;    /* ; */
    7e3c:	f005 ff5b 	bl	dcf6 <strlen>
    7e40:	3405      	adds	r4, #5
    7e42:	1823      	adds	r3, r4, r0
    7e44:	9301      	str	r3, [sp, #4]
            ls = (char*) m_append(rsp->msg, len);
    7e46:	466b      	mov	r3, sp
    7e48:	6d28      	ldr	r0, [r5, #80]	; 0x50
    7e4a:	2104      	movs	r1, #4
    7e4c:	5e59      	ldrsh	r1, [r3, r1]
    7e4e:	f000 fae9 	bl	8424 <_Z8m_appendP4mbufs>
    7e52:	1e04      	subs	r4, r0, #0
            if (!ls) {
    7e54:	d107      	bne.n	7e66 <_ZL11crwellknownP12coap_msg_ctxS0_+0x9e>
                coap_stats.no_mbufs++;
    7e56:	4a25      	ldr	r2, [pc, #148]	; (7eec <_ZL11crwellknownP12coap_msg_ctxS0_+0x124>)
    7e58:	6813      	ldr	r3, [r2, #0]
    7e5a:	3301      	adds	r3, #1
    7e5c:	6013      	str	r3, [r2, #0]
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    7e5e:	23a0      	movs	r3, #160	; 0xa0
            rsp->code = COAP_RSP_404_NOT_FOUND;
    7e60:	70ab      	strb	r3, [r5, #2]
            return ERR_FAIL;
    7e62:	2063      	movs	r0, #99	; 0x63
    7e64:	e035      	b.n	7ed2 <_ZL11crwellknownP12coap_msg_ctxS0_+0x10a>
            memcpy(ls, "</", n);
    7e66:	2202      	movs	r2, #2
    7e68:	4921      	ldr	r1, [pc, #132]	; (7ef0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x128>)
    7e6a:	f004 fe12 	bl	ca92 <memcpy>
            m = strlen(cr->path);
    7e6e:	6837      	ldr	r7, [r6, #0]
    7e70:	0038      	movs	r0, r7
    7e72:	f005 ff40 	bl	dcf6 <strlen>
    7e76:	9002      	str	r0, [sp, #8]
            memcpy(&(ls[n]), cr->path, m);
    7e78:	9a02      	ldr	r2, [sp, #8]
    7e7a:	1ca0      	adds	r0, r4, #2
    7e7c:	0039      	movs	r1, r7
    7e7e:	f004 fe08 	bl	ca92 <memcpy>
            ls[n++] = '>';
    7e82:	223e      	movs	r2, #62	; 0x3e
    7e84:	9b02      	ldr	r3, [sp, #8]
    7e86:	18e3      	adds	r3, r4, r3
    7e88:	709a      	strb	r2, [r3, #2]
            if (cr->link) {
    7e8a:	68b2      	ldr	r2, [r6, #8]
    7e8c:	2a00      	cmp	r2, #0
    7e8e:	d00c      	beq.n	7eaa <_ZL11crwellknownP12coap_msg_ctxS0_+0xe2>
                ls[n++] = ';';
    7e90:	223b      	movs	r2, #59	; 0x3b
    7e92:	70da      	strb	r2, [r3, #3]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    7e94:	68b7      	ldr	r7, [r6, #8]
    7e96:	0038      	movs	r0, r7
    7e98:	f005 ff2d 	bl	dcf6 <strlen>
    7e9c:	0002      	movs	r2, r0
                ls[n++] = ';';
    7e9e:	9802      	ldr	r0, [sp, #8]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    7ea0:	0039      	movs	r1, r7
                ls[n++] = ';';
    7ea2:	3004      	adds	r0, #4
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    7ea4:	1820      	adds	r0, r4, r0
    7ea6:	f004 fdf4 	bl	ca92 <memcpy>
            ls[len-1] = ',';
    7eaa:	9b01      	ldr	r3, [sp, #4]
    7eac:	360c      	adds	r6, #12
    7eae:	18e4      	adds	r4, r4, r3
    7eb0:	232c      	movs	r3, #44	; 0x2c
    7eb2:	3c01      	subs	r4, #1
    7eb4:	7023      	strb	r3, [r4, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    7eb6:	3319      	adds	r3, #25
    7eb8:	70ab      	strb	r3, [r5, #2]
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    7eba:	9b00      	ldr	r3, [sp, #0]
    7ebc:	3301      	adds	r3, #1
    7ebe:	9300      	str	r3, [sp, #0]
    7ec0:	e7b0      	b.n	7e24 <_ZL11crwellknownP12coap_msg_ctxS0_+0x5c>
        rsp->cf = COAP_CF_APPLICATION_LINK_FORMAT; /* application/link-format */
    7ec2:	002b      	movs	r3, r5
    7ec4:	2228      	movs	r2, #40	; 0x28
    7ec6:	333c      	adds	r3, #60	; 0x3c
    7ec8:	701a      	strb	r2, [r3, #0]
        rsp->plen = rsp->msg->m_pktlen;
    7eca:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    7ecc:	881b      	ldrh	r3, [r3, #0]
    7ece:	642b      	str	r3, [r5, #64]	; 0x40
    return ERR_OK;
    7ed0:	2000      	movs	r0, #0
}
    7ed2:	b007      	add	sp, #28
    7ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    7ed6:	22a1      	movs	r2, #161	; 0xa1
    7ed8:	708a      	strb	r2, [r1, #2]
    7eda:	e7f9      	b.n	7ed0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x108>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    7edc:	2384      	movs	r3, #132	; 0x84
    7ede:	e7bf      	b.n	7e60 <_ZL11crwellknownP12coap_msg_ctxS0_+0x98>
    7ee0:	20001988 	.word	0x20001988
    7ee4:	0001183f 	.word	0x0001183f
    7ee8:	2000198c 	.word	0x2000198c
    7eec:	200019bc 	.word	0x200019bc
    7ef0:	00011844 	.word	0x00011844

00007ef4 <_ZL7crtitleP12coap_msg_ctxS0_>:
{
    7ef4:	b530      	push	{r4, r5, lr}
    if (req->code == COAP_REQUEST_GET)
    7ef6:	7883      	ldrb	r3, [r0, #2]
{
    7ef8:	b091      	sub	sp, #68	; 0x44
    7efa:	000c      	movs	r4, r1
    if (req->code == COAP_REQUEST_GET)
    7efc:	2b01      	cmp	r3, #1
    7efe:	d12b      	bne.n	7f58 <_ZL7crtitleP12coap_msg_ctxS0_+0x64>
		strcpy(id, COAP_SERVER_VERSION_STRING);
    7f00:	4916      	ldr	r1, [pc, #88]	; (7f5c <_ZL7crtitleP12coap_msg_ctxS0_+0x68>)
    7f02:	4668      	mov	r0, sp
    7f04:	f005 feef 	bl	dce6 <strcpy>
		strcat(id, COAP_SERVER_VERSION_NUMBER);
    7f08:	4915      	ldr	r1, [pc, #84]	; (7f60 <_ZL7crtitleP12coap_msg_ctxS0_+0x6c>)
    7f0a:	4668      	mov	r0, sp
    7f0c:	f005 fed4 	bl	dcb8 <strcat>
        d = (char*) m_append(rsp->msg, strlen(id));
    7f10:	4668      	mov	r0, sp
    7f12:	f005 fef0 	bl	dcf6 <strlen>
    7f16:	b201      	sxth	r1, r0
    7f18:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7f1a:	f000 fa83 	bl	8424 <_Z8m_appendP4mbufs>
    7f1e:	1e05      	subs	r5, r0, #0
        if (!d)
    7f20:	d108      	bne.n	7f34 <_ZL7crtitleP12coap_msg_ctxS0_+0x40>
            coap_stats.no_mbufs++;
    7f22:	4a10      	ldr	r2, [pc, #64]	; (7f64 <_ZL7crtitleP12coap_msg_ctxS0_+0x70>)
    7f24:	6813      	ldr	r3, [r2, #0]
    7f26:	3301      	adds	r3, #1
    7f28:	6013      	str	r3, [r2, #0]
            rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    7f2a:	23a0      	movs	r3, #160	; 0xa0
}
    7f2c:	2000      	movs	r0, #0
        rsp->code = COAP_RSP_403_FORBIDDEN;
    7f2e:	70a3      	strb	r3, [r4, #2]
}
    7f30:	b011      	add	sp, #68	; 0x44
    7f32:	bd30      	pop	{r4, r5, pc}
            memcpy(d, id, strlen(id));
    7f34:	4668      	mov	r0, sp
    7f36:	f005 fede 	bl	dcf6 <strlen>
    7f3a:	4669      	mov	r1, sp
    7f3c:	0002      	movs	r2, r0
    7f3e:	0028      	movs	r0, r5
    7f40:	f004 fda7 	bl	ca92 <memcpy>
            rsp->plen = strlen(id);
    7f44:	4668      	mov	r0, sp
    7f46:	f005 fed6 	bl	dcf6 <strlen>
            rsp->cf = COAP_CF_TEXT_PLAIN;
    7f4a:	0023      	movs	r3, r4
    7f4c:	2200      	movs	r2, #0
    7f4e:	333c      	adds	r3, #60	; 0x3c
            rsp->plen = strlen(id);
    7f50:	6420      	str	r0, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_TEXT_PLAIN;
    7f52:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    7f54:	2345      	movs	r3, #69	; 0x45
    7f56:	e7e9      	b.n	7f2c <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
        rsp->code = COAP_RSP_403_FORBIDDEN;
    7f58:	2383      	movs	r3, #131	; 0x83
    7f5a:	e7e7      	b.n	7f2c <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
    7f5c:	00010e53 	.word	0x00010e53
    7f60:	00010e71 	.word	0x00010e71
    7f64:	200019bc 	.word	0x200019bc

00007f68 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>:
        return ERR_NO_MEM;
    7f68:	2303      	movs	r3, #3
{
    7f6a:	b530      	push	{r4, r5, lr}
    if (coap_reg_size < COAP_MAX_CBR)
    7f6c:	4c07      	ldr	r4, [pc, #28]	; (7f8c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x24>)
    7f6e:	6825      	ldr	r5, [r4, #0]
    7f70:	429d      	cmp	r5, r3
    7f72:	dc09      	bgt.n	7f88 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x20>
        idx = coap_reg_size++;    
    7f74:	1c6b      	adds	r3, r5, #1
    7f76:	6023      	str	r3, [r4, #0]
    coap_registry[idx].path = path;
    7f78:	240c      	movs	r4, #12
    7f7a:	436c      	muls	r4, r5
    7f7c:	4b04      	ldr	r3, [pc, #16]	; (7f90 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x28>)
    7f7e:	50e0      	str	r0, [r4, r3]
    coap_registry[idx].cb = cbfunc;
    7f80:	191b      	adds	r3, r3, r4
    7f82:	6059      	str	r1, [r3, #4]
    coap_registry[idx].link = corelink;
    7f84:	609a      	str	r2, [r3, #8]
    return ERR_OK;
    7f86:	2300      	movs	r3, #0
}
    7f88:	0018      	movs	r0, r3
    7f8a:	bd30      	pop	{r4, r5, pc}
    7f8c:	20001988 	.word	0x20001988
    7f90:	2000198c 	.word	0x2000198c

00007f94 <_Z18coap_registry_initv>:
{
    7f94:	b510      	push	{r4, lr}
	coap_reg_size = 0;
    7f96:	2400      	movs	r4, #0
    7f98:	4b0d      	ldr	r3, [pc, #52]	; (7fd0 <_Z18coap_registry_initv+0x3c>)
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    7f9a:	4a0e      	ldr	r2, [pc, #56]	; (7fd4 <_Z18coap_registry_initv+0x40>)
    7f9c:	490e      	ldr	r1, [pc, #56]	; (7fd8 <_Z18coap_registry_initv+0x44>)
    7f9e:	480f      	ldr	r0, [pc, #60]	; (7fdc <_Z18coap_registry_initv+0x48>)
	coap_reg_size = 0;
    7fa0:	601c      	str	r4, [r3, #0]
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    7fa2:	f7ff ffe1 	bl	7f68 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(".well-known", crwellknown, NULL);
    7fa6:	0022      	movs	r2, r4
    7fa8:	490d      	ldr	r1, [pc, #52]	; (7fe0 <_Z18coap_registry_initv+0x4c>)
    7faa:	480e      	ldr	r0, [pc, #56]	; (7fe4 <_Z18coap_registry_initv+0x50>)
    7fac:	f7ff ffdc 	bl	7f68 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(S_URI_SYSTEM, crsystem, CLA_SYSTEM);
    7fb0:	4a0d      	ldr	r2, [pc, #52]	; (7fe8 <_Z18coap_registry_initv+0x54>)
    7fb2:	490e      	ldr	r1, [pc, #56]	; (7fec <_Z18coap_registry_initv+0x58>)
    7fb4:	480e      	ldr	r0, [pc, #56]	; (7ff0 <_Z18coap_registry_initv+0x5c>)
    7fb6:	f7ff ffd7 	bl	7f68 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
	if (is_sapi == 1)
    7fba:	4b0e      	ldr	r3, [pc, #56]	; (7ff4 <_Z18coap_registry_initv+0x60>)
    7fbc:	4a0e      	ldr	r2, [pc, #56]	; (7ff8 <_Z18coap_registry_initv+0x64>)
    7fbe:	781b      	ldrb	r3, [r3, #0]
    7fc0:	480e      	ldr	r0, [pc, #56]	; (7ffc <_Z18coap_registry_initv+0x68>)
		(void)coap_uri_register(classifier, crsapi, CLA_ARDUINO);
    7fc2:	490f      	ldr	r1, [pc, #60]	; (8000 <_Z18coap_registry_initv+0x6c>)
	if (is_sapi == 1)
    7fc4:	2b01      	cmp	r3, #1
    7fc6:	d000      	beq.n	7fca <_Z18coap_registry_initv+0x36>
		(void)coap_uri_register(classifier, crarduino, CLA_ARDUINO);
    7fc8:	490e      	ldr	r1, [pc, #56]	; (8004 <_Z18coap_registry_initv+0x70>)
    7fca:	f7ff ffcd 	bl	7f68 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
}
    7fce:	bd10      	pop	{r4, pc}
    7fd0:	20001988 	.word	0x20001988
    7fd4:	000117cc 	.word	0x000117cc
    7fd8:	00007ef5 	.word	0x00007ef5
    7fdc:	0001113e 	.word	0x0001113e
    7fe0:	00007dc9 	.word	0x00007dc9
    7fe4:	000117de 	.word	0x000117de
    7fe8:	000117ea 	.word	0x000117ea
    7fec:	00007b55 	.word	0x00007b55
    7ff0:	0001180f 	.word	0x0001180f
    7ff4:	20000096 	.word	0x20000096
    7ff8:	00011813 	.word	0x00011813
    7ffc:	200000a0 	.word	0x200000a0
    8000:	00004a25 	.word	0x00004a25
    8004:	00004ad5 	.word	0x00004ad5

00008008 <_Z15coap_s_uri_procP12coap_msg_ctxS0_>:
{
    8008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, NULL)) == NULL) 
    800a:	2200      	movs	r2, #0
{
    800c:	0006      	movs	r6, r0
    800e:	000c      	movs	r4, r1
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, NULL)) == NULL) 
    8010:	304c      	adds	r0, #76	; 0x4c
    8012:	210b      	movs	r1, #11
    8014:	f7ff fbac 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    8018:	1e07      	subs	r7, r0, #0
    801a:	d010      	beq.n	803e <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x36>
    801c:	2500      	movs	r5, #0
            if (!coap_opt_strcmp(op, coap_registry[i].path)) 
    801e:	230c      	movs	r3, #12
    8020:	436b      	muls	r3, r5
    8022:	4a1a      	ldr	r2, [pc, #104]	; (808c <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x84>)
    8024:	0038      	movs	r0, r7
    8026:	58d1      	ldr	r1, [r2, r3]
    8028:	f7fe fe78 	bl	6d1c <_Z15coap_opt_strcmpPK5optlvPKc>
    802c:	2800      	cmp	r0, #0
    802e:	d007      	beq.n	8040 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x38>
        for (i = 0; i < rs; i++) 
    8030:	3501      	adds	r5, #1
    8032:	2d04      	cmp	r5, #4
    8034:	d1f3      	bne.n	801e <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x16>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    8036:	2384      	movs	r3, #132	; 0x84
    8038:	e00d      	b.n	8056 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x4e>
        rsp->type = COAP_T_NCONF_VAL;
    803a:	2301      	movs	r3, #1
    803c:	e023      	b.n	8086 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x7e>
        i = 0;
    803e:	0005      	movs	r5, r0
    rc = coap_registry[i].cb(req, rsp);
    8040:	230c      	movs	r3, #12
    8042:	435d      	muls	r5, r3
    8044:	4b11      	ldr	r3, [pc, #68]	; (808c <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x84>)
    8046:	0021      	movs	r1, r4
    8048:	195d      	adds	r5, r3, r5
    804a:	686b      	ldr	r3, [r5, #4]
    804c:	0030      	movs	r0, r6
    804e:	4798      	blx	r3
    if (rc != ERR_OK) 
    8050:	2800      	cmp	r0, #0
    8052:	d001      	beq.n	8058 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x50>
        rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    8054:	23a0      	movs	r3, #160	; 0xa0
    8056:	70a3      	strb	r3, [r4, #2]
    op = copt_get_next_opt_type((const sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE, NULL);
    8058:	0025      	movs	r5, r4
    805a:	354c      	adds	r5, #76	; 0x4c
    805c:	2200      	movs	r2, #0
    805e:	2106      	movs	r1, #6
    8060:	0028      	movs	r0, r5
    8062:	f7ff fb85 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if ((COAP_CLASS(rsp->code) != 2) || (op == NULL)) 
    8066:	78a3      	ldrb	r3, [r4, #2]
    8068:	095b      	lsrs	r3, r3, #5
    806a:	2b02      	cmp	r3, #2
    806c:	d101      	bne.n	8072 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x6a>
    806e:	2800      	cmp	r0, #0
    8070:	d105      	bne.n	807e <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x76>
        (void)copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    8072:	2106      	movs	r1, #6
    8074:	0028      	movs	r0, r5
    8076:	f7ff fba3 	bl	77c0 <_Z17copt_del_opt_typeP5sl_cot>
        rsp->final = 1;
    807a:	2301      	movs	r3, #1
    807c:	64a3      	str	r3, [r4, #72]	; 0x48
    if (req->type == COAP_T_CONF_VAL) 
    807e:	7833      	ldrb	r3, [r6, #0]
    8080:	2b00      	cmp	r3, #0
    8082:	d1da      	bne.n	803a <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x32>
        rsp->type = COAP_T_ACK_VAL;
    8084:	3302      	adds	r3, #2
}
    8086:	2000      	movs	r0, #0
        rsp->type = COAP_T_NCONF_VAL;
    8088:	7023      	strb	r3, [r4, #0]
}
    808a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    808c:	2000198c 	.word	0x2000198c

00008090 <_Z24coap_put_ic_reboot_eventv>:
 *
 * Given that there are HDLC retries, we're not going to attempt CoAP retries.
 * Could be added later if required.
 */
error_t coap_put_ic_reboot_event(void)
{
    8090:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *req;
	uint8_t     *ptr;

	/* Allocate request buffer */
	MGETHDR(req);
    8092:	f000 f96b 	bl	836c <_Z5m_getv>
    8096:	1e04      	subs	r4, r0, #0
	if (!req) 
    8098:	d105      	bne.n	80a6 <_Z24coap_put_ic_reboot_eventv+0x16>
	{
		coap_stats.no_mbufs++;
		return ERR_NO_MEM;
    809a:	2003      	movs	r0, #3
		coap_stats.no_mbufs++;
    809c:	4a11      	ldr	r2, [pc, #68]	; (80e4 <_Z24coap_put_ic_reboot_eventv+0x54>)
    809e:	6813      	ldr	r3, [r2, #0]
    80a0:	3301      	adds	r3, #1
    80a2:	6013      	str	r3, [r2, #0]
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
	delay(1);
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);

	return ERR_OK;
    80a4:	bd70      	pop	{r4, r5, r6, pc}
	ptr = (uint8_t *)m_append(req, sizeof(rbtput));
    80a6:	2114      	movs	r1, #20
    80a8:	f000 f9bc 	bl	8424 <_Z8m_appendP4mbufs>
	memcpy(ptr, rbtput, sizeof(rbtput));
    80ac:	2214      	movs	r2, #20
    80ae:	490e      	ldr	r1, [pc, #56]	; (80e8 <_Z24coap_put_ic_reboot_eventv+0x58>)
    80b0:	f004 fcef 	bl	ca92 <memcpy>
	if (pending_rsp)
    80b4:	4d0d      	ldr	r5, [pc, #52]	; (80ec <_Z24coap_put_ic_reboot_eventv+0x5c>)
    80b6:	6828      	ldr	r0, [r5, #0]
    80b8:	2800      	cmp	r0, #0
    80ba:	d001      	beq.n	80c0 <_Z24coap_put_ic_reboot_eventv+0x30>
		m_free(pending_rsp);
    80bc:	f000 f980 	bl	83c0 <_Z6m_freeP4mbuf>
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    80c0:	490b      	ldr	r1, [pc, #44]	; (80f0 <_Z24coap_put_ic_reboot_eventv+0x60>)
    80c2:	2007      	movs	r0, #7
	pending_rsp = req;
    80c4:	602c      	str	r4, [r5, #0]
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    80c6:	f7fc f96b 	bl	43a0 <_Z4dlogiPKcz>
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
    80ca:	2100      	movs	r1, #0
    80cc:	2009      	movs	r0, #9
    80ce:	f7fb fdc3 	bl	3c58 <digitalWrite>
	delay(1);
    80d2:	2001      	movs	r0, #1
    80d4:	f7fa fb04 	bl	26e0 <delay>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    80d8:	2009      	movs	r0, #9
    80da:	2101      	movs	r1, #1
    80dc:	f7fb fdbc 	bl	3c58 <digitalWrite>
	return ERR_OK;
    80e0:	2000      	movs	r0, #0
    80e2:	e7df      	b.n	80a4 <_Z24coap_put_ic_reboot_eventv+0x14>
    80e4:	200019bc 	.word	0x200019bc
    80e8:	00011900 	.word	0x00011900
    80ec:	20001984 	.word	0x20001984
    80f0:	000118e4 	.word	0x000118e4

000080f4 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>:
 */


// CoAP Server initialization
void coap_s_init(HardwareSerial *pSerial, uint32_t max_age, uint32_t uart_timeout_ms, uint32_t max_hdlc_payload_size, const char *uri_rsrc_name, ObsFuncPtr pObsFuncPtr)
{
    80f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80f6:	000f      	movs	r7, r1
    80f8:	0015      	movs	r5, r2
    80fa:	001e      	movs	r6, r3
    80fc:	0004      	movs	r4, r0
	int res;
	
	// Initialize CoAP Server registry
	coap_registry_init();
    80fe:	f7ff ff49 	bl	7f94 <_Z18coap_registry_initv>

	// Set Max-Age: CoAP Server Response Option 14
	coap_set_max_age(max_age);
    8102:	0038      	movs	r0, r7
    8104:	f7ff f99a 	bl	743c <_Z16coap_set_max_agem>
	
	// Set the URI used for obtaining token etc in CoAP Observe response msg
	set_observer(uri_rsrc_name, pObsFuncPtr);
    8108:	9907      	ldr	r1, [sp, #28]
    810a:	9806      	ldr	r0, [sp, #24]
    810c:	f7ff fbbe 	bl	788c <_Z12set_observerPKcPF7error_eP4mbufPhhE>

	// Open the HDLC connection
	res = hdlcs_open(pSerial, uart_timeout_ms, max_hdlc_payload_size);
    8110:	0032      	movs	r2, r6
    8112:	0029      	movs	r1, r5
    8114:	0020      	movs	r0, r4
    8116:	f000 f9eb 	bl	84f0 <_Z10hdlcs_openP14HardwareSerialmm>
	if (res) 
    811a:	2800      	cmp	r0, #0
    811c:	d003      	beq.n	8126 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x32>
	{
		dlog(LOG_ERR, "HDLC initialization failed!");
    811e:	4902      	ldr	r1, [pc, #8]	; (8128 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x34>)
    8120:	2003      	movs	r0, #3
    8122:	f7fc f93d 	bl	43a0 <_Z4dlogiPKcz>
	}
	
	// That's all folks!
} // coap_s_init()
    8126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8128:	00011969 	.word	0x00011969

0000812c <_Z11coap_s_procP4mbuf>:
 * Build a response PDU based on the RSP context, and return the mbuf.
 */
mbuf_ptr_t coap_s_proc( mbuf_ptr_t m )
{
    struct coap_msg_ctx cc, rcc;
    void *clt = NULL;   /* Not used on sensor, 1 HDLC connection. */
    812c:	2300      	movs	r3, #0
{
    812e:	b5f0      	push	{r4, r5, r6, r7, lr}
    8130:	b0b1      	sub	sp, #196	; 0xc4
    8132:	9003      	str	r0, [sp, #12]
    void *clt = NULL;   /* Not used on sensor, 1 HDLC connection. */
    8134:	9305      	str	r3, [sp, #20]
    uint8_t code;
    char *pstr;
    
    /* Allocate response buffer */
    struct mbuf *r = NULL;
    r = m_get();
    8136:	f000 f919 	bl	836c <_Z5m_getv>
    813a:	1e06      	subs	r6, r0, #0
    if (r == NULL)
    813c:	d029      	beq.n	8192 <_Z11coap_s_procP4mbuf+0x66>
    {
	    goto done;
    }

    /* Parse incoming message */
    memset(&cc, 0, sizeof(cc));
    813e:	ac06      	add	r4, sp, #24
    8140:	2254      	movs	r2, #84	; 0x54
    8142:	2100      	movs	r1, #0
    8144:	0020      	movs	r0, r4
    8146:	f004 fcbf 	bl	cac8 <memset>
    copt_init((sl_co*)&(cc.oh));
    memset(&rcc, 0, sizeof(rcc));
    814a:	ad1b      	add	r5, sp, #108	; 0x6c
    copt_init((sl_co*)&(cc.oh));
    814c:	a819      	add	r0, sp, #100	; 0x64
    814e:	f7ff fa99 	bl	7684 <_Z9copt_initP5sl_co>
    memset(&rcc, 0, sizeof(rcc));
    8152:	2254      	movs	r2, #84	; 0x54
    8154:	2100      	movs	r1, #0
    8156:	0028      	movs	r0, r5
    8158:	f004 fcb6 	bl	cac8 <memset>
    copt_init((sl_co*)&(rcc.oh));
    815c:	a82e      	add	r0, sp, #184	; 0xb8
    815e:	f7ff fa91 	bl	7684 <_Z9copt_initP5sl_co>
    rc = coap_msg_parse(&cc, m, &code);
    8162:	230b      	movs	r3, #11
    8164:	aa02      	add	r2, sp, #8
    8166:	189b      	adds	r3, r3, r2
    8168:	001a      	movs	r2, r3
    816a:	9903      	ldr	r1, [sp, #12]
    816c:	0020      	movs	r0, r4
    816e:	f7fe ff89 	bl	7084 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh>
    8172:	1e07      	subs	r7, r0, #0

    if (rc == ERR_OK)
    8174:	d000      	beq.n	8178 <_Z11coap_s_procP4mbuf+0x4c>
    8176:	e07b      	b.n	8270 <_Z11coap_s_procP4mbuf+0x144>
	{
        if (cc.type == COAP_T_ACK_VAL)
    8178:	7823      	ldrb	r3, [r4, #0]
    817a:	2b02      	cmp	r3, #2
    817c:	d11f      	bne.n	81be <_Z11coap_s_procP4mbuf+0x92>
		{
            /*
             * TODO: Assuming it's not a piggy-backed ACK for now.
             */
            rc = coap_ack_rx(cc.mid, NULL);
    817e:	0039      	movs	r1, r7
    8180:	88a0      	ldrh	r0, [r4, #4]
    8182:	f7fe fda9 	bl	6cd8 <_Z11coap_ack_rxtP4mbuf>
            dlog(LOG_INFO, "ACK for mid: 0x%x received, lookup returned %d", cc.mid, rc);
    8186:	88a2      	ldrh	r2, [r4, #4]
            rc = coap_ack_rx(cc.mid, NULL);
    8188:	0003      	movs	r3, r0
            dlog(LOG_INFO, "ACK for mid: 0x%x received, lookup returned %d", cc.mid, rc);
    818a:	4953      	ldr	r1, [pc, #332]	; (82d8 <_Z11coap_s_procP4mbuf+0x1ac>)
    818c:	2006      	movs	r0, #6
    818e:	f7fc f907 	bl	43a0 <_Z4dlogiPKcz>
			goto done;
        }
    }

done:
    if (cc.msg)
    8192:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8194:	9303      	str	r3, [sp, #12]
    8196:	2b00      	cmp	r3, #0
    8198:	d008      	beq.n	81ac <_Z11coap_s_procP4mbuf+0x80>
	{
		dlog(LOG_DEBUG, "coap_s_proc: Free cc mbuf");
    819a:	4950      	ldr	r1, [pc, #320]	; (82dc <_Z11coap_s_procP4mbuf+0x1b0>)
    819c:	2007      	movs	r0, #7
    819e:	f7fc f8ff 	bl	43a0 <_Z4dlogiPKcz>
        m_free(cc.msg);
    81a2:	981a      	ldr	r0, [sp, #104]	; 0x68
    81a4:	f000 f90c 	bl	83c0 <_Z6m_freeP4mbuf>
        cc.msg = NULL;
    81a8:	2300      	movs	r3, #0
    81aa:	931a      	str	r3, [sp, #104]	; 0x68
    }
    copt_del_all((sl_co*)&(cc.oh));
    81ac:	a819      	add	r0, sp, #100	; 0x64
    81ae:	f7ff fa7b 	bl	76a8 <_Z12copt_del_allP5sl_co>
    copt_del_all((sl_co*)&(rcc.oh));
    81b2:	a82e      	add	r0, sp, #184	; 0xb8
    81b4:	f7ff fa78 	bl	76a8 <_Z12copt_del_allP5sl_co>
    return r;
	
}
    81b8:	0030      	movs	r0, r6
    81ba:	b031      	add	sp, #196	; 0xc4
    81bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        coap_init_rsp(&cc, &rcc, r);
    81be:	0032      	movs	r2, r6
    81c0:	0029      	movs	r1, r5
    81c2:	0020      	movs	r0, r4
    81c4:	f7ff f820 	bl	7208 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>
        if (cc.code == COAP_EMPTY_MESSAGE)
    81c8:	78a3      	ldrb	r3, [r4, #2]
    81ca:	2b00      	cmp	r3, #0
    81cc:	d128      	bne.n	8220 <_Z11coap_s_procP4mbuf+0xf4>
            rcc.plen = 0;
    81ce:	642b      	str	r3, [r5, #64]	; 0x40
            if (cc.type == COAP_T_CONF_VAL)
    81d0:	7823      	ldrb	r3, [r4, #0]
    81d2:	2b00      	cmp	r3, #0
    81d4:	d101      	bne.n	81da <_Z11coap_s_procP4mbuf+0xae>
                rcc.type = COAP_T_RESET_VAL;
    81d6:	3303      	adds	r3, #3
    81d8:	702b      	strb	r3, [r5, #0]
        pstr = coap_pathstr(&cc);
    81da:	0020      	movs	r0, r4
    81dc:	f7fe fdb0 	bl	6d40 <_Z12coap_pathstrPK12coap_msg_ctx>
        if (!rcc.final && copt_get_next_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE, NULL))
    81e0:	6caa      	ldr	r2, [r5, #72]	; 0x48
        pstr = coap_pathstr(&cc);
    81e2:	0007      	movs	r7, r0
        if (!rcc.final && copt_get_next_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE, NULL))
    81e4:	2a00      	cmp	r2, #0
    81e6:	d105      	bne.n	81f4 <_Z11coap_s_procP4mbuf+0xc8>
    81e8:	2106      	movs	r1, #6
    81ea:	a82e      	add	r0, sp, #184	; 0xb8
    81ec:	f7ff fac0 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    81f0:	2800      	cmp	r0, #0
    81f2:	d15f      	bne.n	82b4 <_Z11coap_s_procP4mbuf+0x188>
        } else if ((op = copt_get_next_opt_type((sl_co*)&(cc.oh), COAP_OPTION_OBSERVE, NULL)) && 
    81f4:	2200      	movs	r2, #0
    81f6:	2106      	movs	r1, #6
    81f8:	a819      	add	r0, sp, #100	; 0x64
    81fa:	f7ff fab9 	bl	7770 <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    81fe:	2800      	cmp	r0, #0
    8200:	d023      	beq.n	824a <_Z11coap_s_procP4mbuf+0x11e>
				   (co_uint32_n2h(op) == COAP_OBS_DEREG))
    8202:	f7fe fec1 	bl	6f88 <_Z13co_uint32_n2hPK5optlv>
        } else if ((op = copt_get_next_opt_type((sl_co*)&(cc.oh), COAP_OPTION_OBSERVE, NULL)) && 
    8206:	2801      	cmp	r0, #1
    8208:	d11f      	bne.n	824a <_Z11coap_s_procP4mbuf+0x11e>
            if (disable_obs(pstr, &cc, &clt, 0) == ERR_OK)
    820a:	2300      	movs	r3, #0
    820c:	aa05      	add	r2, sp, #20
    820e:	0021      	movs	r1, r4
    8210:	0038      	movs	r0, r7
    8212:	f7ff f9e9 	bl	75e8 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>
    8216:	2800      	cmp	r0, #0
    8218:	d117      	bne.n	824a <_Z11coap_s_procP4mbuf+0x11e>
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    821a:	003a      	movs	r2, r7
    821c:	4930      	ldr	r1, [pc, #192]	; (82e0 <_Z11coap_s_procP4mbuf+0x1b4>)
    821e:	e058      	b.n	82d2 <_Z11coap_s_procP4mbuf+0x1a6>
            if (coap_s_uri_proc(&cc, &rcc) != ERR_OK)
    8220:	0029      	movs	r1, r5
    8222:	0020      	movs	r0, r4
    8224:	f7ff fef0 	bl	8008 <_Z15coap_s_uri_procP12coap_msg_ctxS0_>
    8228:	2800      	cmp	r0, #0
    822a:	d0d6      	beq.n	81da <_Z11coap_s_procP4mbuf+0xae>
                rcc.code = COAP_RSP_500_INTERNAL_ERROR;
    822c:	23a0      	movs	r3, #160	; 0xa0
                rcc.plen = 0;
    822e:	642f      	str	r7, [r5, #64]	; 0x40
                rcc.code = COAP_RSP_500_INTERNAL_ERROR;
    8230:	70ab      	strb	r3, [r5, #2]
    8232:	e7d2      	b.n	81da <_Z11coap_s_procP4mbuf+0xae>
                (void)copt_del_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE);
    8234:	2106      	movs	r1, #6
    8236:	a82e      	add	r0, sp, #184	; 0xb8
    8238:	f7ff fac2 	bl	77c0 <_Z17copt_del_opt_typeP5sl_cot>
                rcc.final = 1;
    823c:	2301      	movs	r3, #1
                dlog(LOG_ERR, "Failed to enabled observe for URI: %s", pstr);
    823e:	003a      	movs	r2, r7
    8240:	2003      	movs	r0, #3
    8242:	4928      	ldr	r1, [pc, #160]	; (82e4 <_Z11coap_s_procP4mbuf+0x1b8>)
                rcc.final = 1;
    8244:	64ab      	str	r3, [r5, #72]	; 0x48
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    8246:	f7fc f8ab 	bl	43a0 <_Z4dlogiPKcz>
        if (coap_msg_response(&rcc) != ERR_OK)
    824a:	a81b      	add	r0, sp, #108	; 0x6c
    824c:	f7ff f81c 	bl	7288 <_Z17coap_msg_responseP12coap_msg_ctx>
    8250:	2800      	cmp	r0, #0
    8252:	d001      	beq.n	8258 <_Z11coap_s_procP4mbuf+0x12c>
				dlog(LOG_DEBUG, "Error msg rsp: freeing mbuf");
    8254:	4924      	ldr	r1, [pc, #144]	; (82e8 <_Z11coap_s_procP4mbuf+0x1bc>)
    8256:	e003      	b.n	8260 <_Z11coap_s_procP4mbuf+0x134>
        if(r->m_pktlen == 0)
    8258:	8834      	ldrh	r4, [r6, #0]
	        dlog(LOG_DEBUG, "No rsp: freeing mbuf");
    825a:	4924      	ldr	r1, [pc, #144]	; (82ec <_Z11coap_s_procP4mbuf+0x1c0>)
        if(r->m_pktlen == 0)
    825c:	2c00      	cmp	r4, #0
    825e:	d198      	bne.n	8192 <_Z11coap_s_procP4mbuf+0x66>
				dlog(LOG_DEBUG, "Error msg rsp: freeing mbuf");
    8260:	2007      	movs	r0, #7
    8262:	f7fc f89d 	bl	43a0 <_Z4dlogiPKcz>
				m_free(r);
    8266:	0030      	movs	r0, r6
    8268:	f000 f8aa 	bl	83c0 <_Z6m_freeP4mbuf>
				r = NULL;
    826c:	2600      	movs	r6, #0
    826e:	e790      	b.n	8192 <_Z11coap_s_procP4mbuf+0x66>
			dlog(LOG_DEBUG, "Parse error: freeing mbuf");
    8270:	491f      	ldr	r1, [pc, #124]	; (82f0 <_Z11coap_s_procP4mbuf+0x1c4>)
	else if (rc == ERR_VER_NOT_SUPP)
    8272:	281d      	cmp	r0, #29
    8274:	d0f4      	beq.n	8260 <_Z11coap_s_procP4mbuf+0x134>
        dlog(LOG_ERR, "Error: rc/h->len: %d/%d, cc.code: %d", rc, m->m_pktlen, cc.code);
    8276:	78a2      	ldrb	r2, [r4, #2]
    8278:	9b03      	ldr	r3, [sp, #12]
    827a:	491e      	ldr	r1, [pc, #120]	; (82f4 <_Z11coap_s_procP4mbuf+0x1c8>)
    827c:	881b      	ldrh	r3, [r3, #0]
    827e:	9200      	str	r2, [sp, #0]
    8280:	0002      	movs	r2, r0
    8282:	2003      	movs	r0, #3
    8284:	f7fc f88c 	bl	43a0 <_Z4dlogiPKcz>
        coap_init_rsp(&cc, &rcc, r);
    8288:	0032      	movs	r2, r6
    828a:	0029      	movs	r1, r5
    828c:	0020      	movs	r0, r4
    828e:	f7fe ffbb 	bl	7208 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>
        if (cc.type == COAP_T_CONF_VAL)
    8292:	7823      	ldrb	r3, [r4, #0]
    8294:	2b00      	cmp	r3, #0
    8296:	d10b      	bne.n	82b0 <_Z11coap_s_procP4mbuf+0x184>
            rcc.type = COAP_T_ACK_VAL;
    8298:	3302      	adds	r3, #2
            rcc.type = COAP_T_NCONF_VAL;
    829a:	702b      	strb	r3, [r5, #0]
        rcc.code = code;
    829c:	ab02      	add	r3, sp, #8
    829e:	7adb      	ldrb	r3, [r3, #11]
        if (coap_msg_response(&rcc) != ERR_OK)
    82a0:	0028      	movs	r0, r5
        rcc.code = code;
    82a2:	70ab      	strb	r3, [r5, #2]
        if (coap_msg_response(&rcc) != ERR_OK)
    82a4:	f7fe fff0 	bl	7288 <_Z17coap_msg_responseP12coap_msg_ctx>
    82a8:	2800      	cmp	r0, #0
    82aa:	d100      	bne.n	82ae <_Z11coap_s_procP4mbuf+0x182>
    82ac:	e771      	b.n	8192 <_Z11coap_s_procP4mbuf+0x66>
    82ae:	e7d1      	b.n	8254 <_Z11coap_s_procP4mbuf+0x128>
            rcc.type = COAP_T_NCONF_VAL;
    82b0:	2301      	movs	r3, #1
    82b2:	e7f2      	b.n	829a <_Z11coap_s_procP4mbuf+0x16e>
            (void)disable_obs(pstr, &cc, &clt, 1);
    82b4:	aa05      	add	r2, sp, #20
    82b6:	0021      	movs	r1, r4
    82b8:	2301      	movs	r3, #1
    82ba:	0038      	movs	r0, r7
    82bc:	f7ff f994 	bl	75e8 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>
            if (enable_obs(pstr, &cc, &clt) != ERR_OK)
    82c0:	aa05      	add	r2, sp, #20
    82c2:	0021      	movs	r1, r4
    82c4:	0038      	movs	r0, r7
    82c6:	f7ff f909 	bl	74dc <_Z10enable_obsPKcP12coap_msg_ctxPv>
    82ca:	2800      	cmp	r0, #0
    82cc:	d1b2      	bne.n	8234 <_Z11coap_s_procP4mbuf+0x108>
                dlog(LOG_DEBUG, "Enabled observe for URI: %s", pstr);
    82ce:	003a      	movs	r2, r7
    82d0:	4909      	ldr	r1, [pc, #36]	; (82f8 <_Z11coap_s_procP4mbuf+0x1cc>)
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    82d2:	2007      	movs	r0, #7
    82d4:	e7b7      	b.n	8246 <_Z11coap_s_procP4mbuf+0x11a>
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	00011985 	.word	0x00011985
    82dc:	00011a82 	.word	0x00011a82
    82e0:	000119f6 	.word	0x000119f6
    82e4:	000119b4 	.word	0x000119b4
    82e8:	00011a12 	.word	0x00011a12
    82ec:	00011a2e 	.word	0x00011a2e
    82f0:	00011a43 	.word	0x00011a43
    82f4:	00011a5d 	.word	0x00011a5d
    82f8:	000119da 	.word	0x000119da

000082fc <_Z10coap_s_runv>:


// Run HDLCS and the CoAP Server 
void coap_s_run()
{
    82fc:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *appd;
	struct mbuf *arsp;
	
	/* Run the secondary-station HDLC state machine */
	hdlcs_run();
    82fe:	f000 f9b9 	bl	8674 <_Z9hdlcs_runv>
	
	/* Serve incoming request, if any */
	appd = hdlcs_read();
    8302:	f000 f93b 	bl	857c <_Z10hdlcs_readv>
    8306:	1e05      	subs	r5, r0, #0
	if (appd) 
    8308:	d01c      	beq.n	8344 <_Z10coap_s_runv+0x48>
	{
		/* Run the CoAP server */
		arsp = coap_s_proc(appd);
    830a:	f7ff ff0f 	bl	812c <_Z11coap_s_procP4mbuf>
    830e:	1e04      	subs	r4, r0, #0
		if (arsp) 
    8310:	d00a      	beq.n	8328 <_Z10coap_s_runv+0x2c>
		{
			// Direct send of CoAP response
			hdlcs_write(arsp->data, arsp->len);
    8312:	8801      	ldrh	r1, [r0, #0]
    8314:	3004      	adds	r0, #4
    8316:	f000 f95b 	bl	85d0 <_Z11hdlcs_writePKvt>
			
			// Free response mbuf
			dlog(LOG_DEBUG, "coap_s_run: freeing arsp mbuf");
    831a:	2007      	movs	r0, #7
    831c:	490a      	ldr	r1, [pc, #40]	; (8348 <_Z10coap_s_runv+0x4c>)
    831e:	f7fc f83f 	bl	43a0 <_Z4dlogiPKcz>
			m_free(arsp);
    8322:	0020      	movs	r0, r4
    8324:	f000 f84c 	bl	83c0 <_Z6m_freeP4mbuf>
		}
		// Free request mbuf
		dlog(LOG_DEBUG, "coap_s_run: freeing appd mbuf");
    8328:	4908      	ldr	r1, [pc, #32]	; (834c <_Z10coap_s_runv+0x50>)
    832a:	2007      	movs	r0, #7
    832c:	f7fc f838 	bl	43a0 <_Z4dlogiPKcz>
		m_free(appd);
    8330:	0028      	movs	r0, r5
    8332:	f000 f845 	bl	83c0 <_Z6m_freeP4mbuf>
		
		int freeram = free_ram();
    8336:	f7fc f965 	bl	4604 <_Z8free_ramv>
		dlog(LOG_DEBUG, "coap_s_run: free Ram: %d", freeram);
    833a:	4905      	ldr	r1, [pc, #20]	; (8350 <_Z10coap_s_runv+0x54>)
		int freeram = free_ram();
    833c:	0002      	movs	r2, r0
		dlog(LOG_DEBUG, "coap_s_run: free Ram: %d", freeram);
    833e:	2007      	movs	r0, #7
    8340:	f7fc f82e 	bl	43a0 <_Z4dlogiPKcz>
	}
} 
    8344:	bd70      	pop	{r4, r5, r6, pc}
    8346:	46c0      	nop			; (mov r8, r8)
    8348:	00011914 	.word	0x00011914
    834c:	00011932 	.word	0x00011932
    8350:	00011950 	.word	0x00011950

00008354 <_Z18set_mbuf_data_sizei>:
// Set the size of the mbuf data buffer
static int mbuf_data_buf_size = 0;
void set_mbuf_data_size( int buf_size )
{
	// Get the size of the mbuf data buffer
	mbuf_data_buf_size = buf_size;
    8354:	4b01      	ldr	r3, [pc, #4]	; (835c <_Z18set_mbuf_data_sizei+0x8>)
    8356:	6018      	str	r0, [r3, #0]
	
} // set_mbuf_size
    8358:	4770      	bx	lr
    835a:	46c0      	nop			; (mov r8, r8)
    835c:	200019e0 	.word	0x200019e0

00008360 <_Z18get_mbuf_data_sizev>:

// Get the size of the mbuf data buffer
int get_mbuf_data_size()
{
	// Return the size of the mbuf data buffer
	return mbuf_data_buf_size;
    8360:	4b01      	ldr	r3, [pc, #4]	; (8368 <_Z18get_mbuf_data_sizev+0x8>)
    8362:	6818      	ldr	r0, [r3, #0]
	
} // get_mbuf_size
    8364:	4770      	bx	lr
    8366:	46c0      	nop			; (mov r8, r8)
    8368:	200019e0 	.word	0x200019e0

0000836c <_Z5m_getv>:


struct mbuf * m_get()
{
    836c:	b570      	push	{r4, r5, r6, lr}
    struct mbuf *m;
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    836e:	4d0e      	ldr	r5, [pc, #56]	; (83a8 <_Z5m_getv+0x3c>)
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    8370:	2007      	movs	r0, #7
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    8372:	682b      	ldr	r3, [r5, #0]
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    8374:	490d      	ldr	r1, [pc, #52]	; (83ac <_Z5m_getv+0x40>)
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    8376:	1d1c      	adds	r4, r3, #4
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    8378:	0022      	movs	r2, r4
    837a:	f7fc f811 	bl	43a0 <_Z4dlogiPKcz>
    m = (struct mbuf *) malloc(mbuf_size);
    837e:	0020      	movs	r0, r4
    8380:	f004 fb52 	bl	ca28 <malloc>
    assert(m);
    8384:	2800      	cmp	r0, #0
    8386:	d105      	bne.n	8394 <_Z5m_getv+0x28>
    8388:	4b09      	ldr	r3, [pc, #36]	; (83b0 <_Z5m_getv+0x44>)
    838a:	4a0a      	ldr	r2, [pc, #40]	; (83b4 <_Z5m_getv+0x48>)
    838c:	214a      	movs	r1, #74	; 0x4a
    838e:	480a      	ldr	r0, [pc, #40]	; (83b8 <_Z5m_getv+0x4c>)
    8390:	f004 fa02 	bl	c798 <__assert_func>
    m->len = 0;
    8394:	2300      	movs	r3, #0
    m->size = mbuf_data_buf_size;
    malloc_cnt++;
    8396:	4a09      	ldr	r2, [pc, #36]	; (83bc <_Z5m_getv+0x50>)
    m->len = 0;
    8398:	8003      	strh	r3, [r0, #0]
    m->size = mbuf_data_buf_size;
    839a:	682b      	ldr	r3, [r5, #0]
    839c:	8043      	strh	r3, [r0, #2]
    malloc_cnt++;
    839e:	6813      	ldr	r3, [r2, #0]
    83a0:	3301      	adds	r3, #1
    83a2:	6013      	str	r3, [r2, #0]
    return m;
}
    83a4:	bd70      	pop	{r4, r5, r6, pc}
    83a6:	46c0      	nop			; (mov r8, r8)
    83a8:	200019e0 	.word	0x200019e0
    83ac:	00011a9c 	.word	0x00011a9c
    83b0:	00011ab8 	.word	0x00011ab8
    83b4:	00011ae5 	.word	0x00011ae5
    83b8:	00011aba 	.word	0x00011aba
    83bc:	200019e8 	.word	0x200019e8

000083c0 <_Z6m_freeP4mbuf>:

void
m_free(struct mbuf *m)
{
    83c0:	b510      	push	{r4, lr}
    free(m);
    83c2:	f004 fb3b 	bl	ca3c <free>
    free_cnt++;
    83c6:	4a02      	ldr	r2, [pc, #8]	; (83d0 <_Z6m_freeP4mbuf+0x10>)
    83c8:	6813      	ldr	r3, [r2, #0]
    83ca:	3301      	adds	r3, #1
    83cc:	6013      	str	r3, [r2, #0]
}
    83ce:	bd10      	pop	{r4, pc}
    83d0:	200019e4 	.word	0x200019e4

000083d4 <_Z5m_dupP4mbuf>:


struct mbuf *
m_dup(struct mbuf *m)
{
    83d4:	b570      	push	{r4, r5, r6, lr}
    83d6:	0005      	movs	r5, r0

    struct mbuf *n = m_get();
    83d8:	f7ff ffc8 	bl	836c <_Z5m_getv>
    83dc:	1e04      	subs	r4, r0, #0

    if (n) {
    83de:	d007      	beq.n	83f0 <_Z5m_dupP4mbuf+0x1c>
        memcpy(n, m, sizeof(*m) + mbuf_data_buf_size);
    83e0:	4b04      	ldr	r3, [pc, #16]	; (83f4 <_Z5m_dupP4mbuf+0x20>)
    83e2:	0029      	movs	r1, r5
    83e4:	681a      	ldr	r2, [r3, #0]
    83e6:	3204      	adds	r2, #4
    83e8:	f004 fb53 	bl	ca92 <memcpy>
        n->len = m->len;
    83ec:	882b      	ldrh	r3, [r5, #0]
    83ee:	8023      	strh	r3, [r4, #0]
    }

    return n;

}
    83f0:	0020      	movs	r0, r4
    83f2:	bd70      	pop	{r4, r5, r6, pc}
    83f4:	200019e0 	.word	0x200019e0

000083f8 <_Z9m_prependP4mbufi>:

struct mbuf *
m_prepend(struct mbuf *m, int len)
{

    if (m->len + len > mbuf_data_buf_size) {
    83f8:	4b09      	ldr	r3, [pc, #36]	; (8420 <_Z9m_prependP4mbufi+0x28>)
    83fa:	8802      	ldrh	r2, [r0, #0]
    83fc:	681b      	ldr	r3, [r3, #0]
{
    83fe:	b570      	push	{r4, r5, r6, lr}
    8400:	000d      	movs	r5, r1
    if (m->len + len > mbuf_data_buf_size) {
    8402:	1851      	adds	r1, r2, r1
{
    8404:	0004      	movs	r4, r0
    if (m->len + len > mbuf_data_buf_size) {
    8406:	4299      	cmp	r1, r3
    8408:	dc08      	bgt.n	841c <_Z9m_prependP4mbufi+0x24>
        return NULL;
    }

    /* make space at the top of the buffer */
    memmove(m->data + len, m->data, m->len);
    840a:	1d01      	adds	r1, r0, #4
    840c:	1948      	adds	r0, r1, r5
    840e:	f004 fb49 	bl	caa4 <memmove>
    m->len += len;
    8412:	8821      	ldrh	r1, [r4, #0]
    8414:	1949      	adds	r1, r1, r5
    8416:	8021      	strh	r1, [r4, #0]

    return m;
}
    8418:	0020      	movs	r0, r4
    841a:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    841c:	2400      	movs	r4, #0
    841e:	e7fb      	b.n	8418 <_Z9m_prependP4mbufi+0x20>
    8420:	200019e0 	.word	0x200019e0

00008424 <_Z8m_appendP4mbufs>:

void *
m_append(struct mbuf *m, int16_t len)
{
    void *d;
    if (m->len + len > mbuf_data_buf_size) {
    8424:	4b06      	ldr	r3, [pc, #24]	; (8440 <_Z8m_appendP4mbufs+0x1c>)
{
    8426:	b510      	push	{r4, lr}
    if (m->len + len > mbuf_data_buf_size) {
    8428:	8804      	ldrh	r4, [r0, #0]
    842a:	681b      	ldr	r3, [r3, #0]
    842c:	1861      	adds	r1, r4, r1
{
    842e:	0002      	movs	r2, r0
        return NULL;
    8430:	2000      	movs	r0, #0
    if (m->len + len > mbuf_data_buf_size) {
    8432:	4299      	cmp	r1, r3
    8434:	dc02      	bgt.n	843c <_Z8m_appendP4mbufs+0x18>
    }

    d = m->data + m->len;
    8436:	1d10      	adds	r0, r2, #4
    8438:	1900      	adds	r0, r0, r4
    m->len += len;
    843a:	8011      	strh	r1, [r2, #0]
    
    return d;

}
    843c:	bd10      	pop	{r4, pc}
    843e:	46c0      	nop			; (mov r8, r8)
    8440:	200019e0 	.word	0x200019e0

00008444 <_Z5m_adjP4mbufi>:



void
m_adj(struct mbuf *mp, int req_len)
{
    8444:	b510      	push	{r4, lr}
    if (mp == NULL) {
    8446:	2800      	cmp	r0, #0
    8448:	d011      	beq.n	846e <_Z5m_adjP4mbufi+0x2a>
        return;
    }
    if ((req_len > mp->len) || (-1*(req_len) > mp->len)) {
    844a:	8802      	ldrh	r2, [r0, #0]
    844c:	0013      	movs	r3, r2
    844e:	428a      	cmp	r2, r1
    8450:	db05      	blt.n	845e <_Z5m_adjP4mbufi+0x1a>
    8452:	424c      	negs	r4, r1
    8454:	42a2      	cmp	r2, r4
    8456:	db02      	blt.n	845e <_Z5m_adjP4mbufi+0x1a>
        req_len = mp->len;
    }

    if (req_len >= 0) {
    8458:	2900      	cmp	r1, #0
    845a:	db09      	blt.n	8470 <_Z5m_adjP4mbufi+0x2c>
    845c:	000b      	movs	r3, r1
        /* Trim from head. */
        mp->len -= req_len;
    845e:	1ad2      	subs	r2, r2, r3
    8460:	b292      	uxth	r2, r2
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    8462:	1d19      	adds	r1, r3, #4
        mp->len -= req_len;
    8464:	8002      	strh	r2, [r0, #0]
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    8466:	1841      	adds	r1, r0, r1
    8468:	3004      	adds	r0, #4
    846a:	f004 fb1b 	bl	caa4 <memmove>
    } else {
        /* Trim from tail. */
        mp->len += req_len;
    }
}
    846e:	bd10      	pop	{r4, pc}
        mp->len += req_len;
    8470:	1852      	adds	r2, r2, r1
    8472:	8002      	strh	r2, [r0, #0]
    8474:	e7fb      	b.n	846e <_Z5m_adjP4mbufi+0x2a>
	...

00008478 <_ZL10hdlcs_snrmv>:
    struct hdlc_snrm_params hsp;

    int hdrlen;


    hss.state = HSS_NORM;
    8478:	2302      	movs	r3, #2
{
    847a:	b530      	push	{r4, r5, lr}
    hss.state = HSS_NORM;
    847c:	4c19      	ldr	r4, [pc, #100]	; (84e4 <_ZL10hdlcs_snrmv+0x6c>)
{
    847e:	b093      	sub	sp, #76	; 0x4c
            
     /* reinit state */
    dlog(LOG_DEBUG, "enter normal mode");
    8480:	4919      	ldr	r1, [pc, #100]	; (84e8 <_ZL10hdlcs_snrmv+0x70>)
    8482:	2007      	movs	r0, #7
    hss.state = HSS_NORM;
    8484:	7323      	strb	r3, [r4, #12]
    dlog(LOG_DEBUG, "enter normal mode");
    8486:	f7fb ff8b 	bl	43a0 <_Z4dlogiPKcz>
            
    /* respond with UA */
    hdlc_hdr(0, hdlc_control(HDLC_UA, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    848a:	2101      	movs	r1, #1
    848c:	2006      	movs	r0, #6
    848e:	f000 fb65 	bl	8b5c <_Z12hdlc_controlhh>
    8492:	ad05      	add	r5, sp, #20
    8494:	0001      	movs	r1, r0
    8496:	a804      	add	r0, sp, #16
    8498:	7ba3      	ldrb	r3, [r4, #14]
    849a:	7b62      	ldrb	r2, [r4, #13]
    849c:	9001      	str	r0, [sp, #4]
    849e:	9500      	str	r5, [sp, #0]
    84a0:	2000      	movs	r0, #0
    84a2:	f000 fbe3 	bl	8c6c <_Z8hdlc_hdrismmPhPi>

    /* should use negotiated values - min() of primary/secondary */    
    hsp.max_info_tx = hss.cfg.max_info_tx;  
    84a6:	6863      	ldr	r3, [r4, #4]
    hsp.max_info_rx = hss.cfg.max_info_rx;
    hsp.window_tx = 1;
    hsp.window_rx = 1;

    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    84a8:	aa03      	add	r2, sp, #12
    hsp.max_info_tx = hss.cfg.max_info_tx;  
    84aa:	9307      	str	r3, [sp, #28]
    hsp.max_info_rx = hss.cfg.max_info_rx;
    84ac:	68a3      	ldr	r3, [r4, #8]
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    84ae:	211a      	movs	r1, #26
    hsp.max_info_rx = hss.cfg.max_info_rx;
    84b0:	9308      	str	r3, [sp, #32]
    hsp.window_tx = 1;
    84b2:	2301      	movs	r3, #1
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    84b4:	a80b      	add	r0, sp, #44	; 0x2c
    hsp.window_tx = 1;
    84b6:	9309      	str	r3, [sp, #36]	; 0x24
    hsp.window_rx = 1;
    84b8:	930a      	str	r3, [sp, #40]	; 0x28
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    84ba:	ab07      	add	r3, sp, #28
    84bc:	f000 fc92 	bl	8de4 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params>
    rc = hdlc_send_frame(hdr, param_info, rsplen);
    84c0:	9a03      	ldr	r2, [sp, #12]
    84c2:	a90b      	add	r1, sp, #44	; 0x2c
    84c4:	0028      	movs	r0, r5
    84c6:	f000 fcbf 	bl	8e48 <_Z15hdlc_send_framePKhS0_i>

    dlog(LOG_DEBUG, "SNRM-UA response rc %d", rc);
    84ca:	4908      	ldr	r1, [pc, #32]	; (84ec <_ZL10hdlcs_snrmv+0x74>)
    rc = hdlc_send_frame(hdr, param_info, rsplen);
    84cc:	0002      	movs	r2, r0
    dlog(LOG_DEBUG, "SNRM-UA response rc %d", rc);
    84ce:	2007      	movs	r0, #7
    84d0:	f7fb ff66 	bl	43a0 <_Z4dlogiPKcz>

    /* Send / Receive sequence numbers are reset to 0 */
    hss.vr = 0;
    84d4:	2000      	movs	r0, #0
    84d6:	7420      	strb	r0, [r4, #16]
    hss.vs = 0;
    84d8:	73e0      	strb	r0, [r4, #15]
    hss.vr_ack = 0;
    84da:	74a0      	strb	r0, [r4, #18]
    hss.vs_ack = 0;
    84dc:	7460      	strb	r0, [r4, #17]

    return 0;
 
}
    84de:	b013      	add	sp, #76	; 0x4c
    84e0:	bd30      	pop	{r4, r5, pc}
    84e2:	46c0      	nop			; (mov r8, r8)
    84e4:	200019f0 	.word	0x200019f0
    84e8:	00011cef 	.word	0x00011cef
    84ec:	00011d01 	.word	0x00011d01

000084f0 <_Z10hdlcs_openP14HardwareSerialmm>:
{
    84f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (hss.open) 
    84f2:	4c1c      	ldr	r4, [pc, #112]	; (8564 <_Z10hdlcs_openP14HardwareSerialmm+0x74>)
{
    84f4:	9101      	str	r1, [sp, #4]
    if (hss.open) 
    84f6:	6826      	ldr	r6, [r4, #0]
{
    84f8:	0015      	movs	r5, r2
        return ERR_FAIL;
    84fa:	2763      	movs	r7, #99	; 0x63
    if (hss.open) 
    84fc:	2e00      	cmp	r6, #0
    84fe:	d106      	bne.n	850e <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
	if ( max_info_len > MNIC_MAX_PAYLOAD_SIZE )
    8500:	2aff      	cmp	r2, #255	; 0xff
    8502:	d906      	bls.n	8512 <_Z10hdlcs_openP14HardwareSerialmm+0x22>
		dlog( LOG_DEBUG, "The max payload size specified is too large: %d bytes. The maximum allowed is %d bytes ", max_info_len, MNIC_MAX_PAYLOAD_SIZE );
    8504:	23ff      	movs	r3, #255	; 0xff
    8506:	4918      	ldr	r1, [pc, #96]	; (8568 <_Z10hdlcs_openP14HardwareSerialmm+0x78>)
    8508:	2007      	movs	r0, #7
    850a:	f7fb ff49 	bl	43a0 <_Z4dlogiPKcz>
}
    850e:	0038      	movs	r0, r7
    8510:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hss.open = 1;
    8512:	2701      	movs	r7, #1
	hdlc_init( pUART, max_info_len );
    8514:	0011      	movs	r1, r2
    8516:	f000 fafd 	bl	8b14 <_Z9hdlc_initP14HardwareSerialm>
	uart_timeout_ms = timeout_ms;
    851a:	4b14      	ldr	r3, [pc, #80]	; (856c <_Z10hdlcs_openP14HardwareSerialmm+0x7c>)
    851c:	9a01      	ldr	r2, [sp, #4]
    memset(&hss, 0, sizeof(hss));
    851e:	0031      	movs	r1, r6
	uart_timeout_ms = timeout_ms;
    8520:	601a      	str	r2, [r3, #0]
    memset(&hss, 0, sizeof(hss));
    8522:	0020      	movs	r0, r4
    8524:	2220      	movs	r2, #32
    8526:	f004 facf 	bl	cac8 <memset>
	set_mbuf_data_size(size);
    852a:	0028      	movs	r0, r5
    hss.open = 1;
    852c:	6027      	str	r7, [r4, #0]
    hss.cfg.max_info_tx = max_info_len;
    852e:	6065      	str	r5, [r4, #4]
    hss.cfg.max_info_rx = max_info_len;
    8530:	60a5      	str	r5, [r4, #8]
    hss.state = HSS_DISC;
    8532:	7327      	strb	r7, [r4, #12]
	set_mbuf_data_size(size);
    8534:	f7ff ff0e 	bl	8354 <_Z18set_mbuf_data_sizei>
    hss.recv = m_get();
    8538:	f7ff ff18 	bl	836c <_Z5m_getv>
    853c:	61a0      	str	r0, [r4, #24]
    assert(hss.recv);
    853e:	2800      	cmp	r0, #0
    8540:	d105      	bne.n	854e <_Z10hdlcs_openP14HardwareSerialmm+0x5e>
    8542:	4b0b      	ldr	r3, [pc, #44]	; (8570 <_Z10hdlcs_openP14HardwareSerialmm+0x80>)
    8544:	4a0b      	ldr	r2, [pc, #44]	; (8574 <_Z10hdlcs_openP14HardwareSerialmm+0x84>)
    8546:	2164      	movs	r1, #100	; 0x64
    8548:	480b      	ldr	r0, [pc, #44]	; (8578 <_Z10hdlcs_openP14HardwareSerialmm+0x88>)
    854a:	f004 f925 	bl	c798 <__assert_func>
    hss.esrc = hdlc_addr_encode(1);
    854e:	0038      	movs	r0, r7
    8550:	f000 fb76 	bl	8c40 <_Z16hdlc_addr_encodem>
    8554:	7360      	strb	r0, [r4, #13]
    hss.edst = hdlc_addr_encode(1);
    8556:	0038      	movs	r0, r7
    8558:	f000 fb72 	bl	8c40 <_Z16hdlc_addr_encodem>
    return ERR_OK;
    855c:	0037      	movs	r7, r6
    hss.edst = hdlc_addr_encode(1);
    855e:	73a0      	strb	r0, [r4, #14]
    return ERR_OK;
    8560:	e7d5      	b.n	850e <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
    8562:	46c0      	nop			; (mov r8, r8)
    8564:	200019f0 	.word	0x200019f0
    8568:	00011af3 	.word	0x00011af3
    856c:	200019ec 	.word	0x200019ec
    8570:	00011b4b 	.word	0x00011b4b
    8574:	00011d35 	.word	0x00011d35
    8578:	00011b54 	.word	0x00011b54

0000857c <_Z10hdlcs_readv>:
{
    857c:	b570      	push	{r4, r5, r6, lr}
    if (hss.r_complete) {
    857e:	4d0f      	ldr	r5, [pc, #60]	; (85bc <_Z10hdlcs_readv+0x40>)
    8580:	69ec      	ldr	r4, [r5, #28]
    8582:	2c00      	cmp	r4, #0
    8584:	d018      	beq.n	85b8 <_Z10hdlcs_readv+0x3c>
        r = m_dup(hss.recv);
    8586:	69a8      	ldr	r0, [r5, #24]
    8588:	f7ff ff24 	bl	83d4 <_Z5m_dupP4mbuf>
    858c:	1e04      	subs	r4, r0, #0
        assert(r);
    858e:	d106      	bne.n	859e <_Z10hdlcs_readv+0x22>
    8590:	2197      	movs	r1, #151	; 0x97
    8592:	4b0b      	ldr	r3, [pc, #44]	; (85c0 <_Z10hdlcs_readv+0x44>)
    8594:	4a0b      	ldr	r2, [pc, #44]	; (85c4 <_Z10hdlcs_readv+0x48>)
    8596:	0049      	lsls	r1, r1, #1
    8598:	480b      	ldr	r0, [pc, #44]	; (85c8 <_Z10hdlcs_readv+0x4c>)
    859a:	f004 f8fd 	bl	c798 <__assert_func>
        hss.recv->len = 0;
    859e:	2100      	movs	r1, #0
    85a0:	69a8      	ldr	r0, [r5, #24]
    85a2:	8001      	strh	r1, [r0, #0]
        hss.r_complete = 0;
    85a4:	61e9      	str	r1, [r5, #28]
        memset(hss.recv->data, 0, hss.recv->size);
    85a6:	8842      	ldrh	r2, [r0, #2]
    85a8:	3004      	adds	r0, #4
    85aa:	f004 fa8d 	bl	cac8 <memset>
		dlog( LOG_DEBUG, "hdlcs_read() - %x", r );
    85ae:	0022      	movs	r2, r4
    85b0:	4906      	ldr	r1, [pc, #24]	; (85cc <_Z10hdlcs_readv+0x50>)
    85b2:	2007      	movs	r0, #7
    85b4:	f7fb fef4 	bl	43a0 <_Z4dlogiPKcz>
} // hdlcs_read()
    85b8:	0020      	movs	r0, r4
    85ba:	bd70      	pop	{r4, r5, r6, pc}
    85bc:	200019f0 	.word	0x200019f0
    85c0:	000113ec 	.word	0x000113ec
    85c4:	00011d18 	.word	0x00011d18
    85c8:	00011b54 	.word	0x00011b54
    85cc:	00011b80 	.word	0x00011b80

000085d0 <_Z11hdlcs_writePKvt>:
{
    85d0:	b570      	push	{r4, r5, r6, lr}
    (void)hdlc_hdr(0, hdlc_control_i(hss.vr, hss.vs, 1),
    85d2:	4c0d      	ldr	r4, [pc, #52]	; (8608 <_Z11hdlcs_writePKvt+0x38>)
{
    85d4:	b086      	sub	sp, #24
    85d6:	0005      	movs	r5, r0
    85d8:	000e      	movs	r6, r1
    (void)hdlc_hdr(0, hdlc_control_i(hss.vr, hss.vs, 1),
    85da:	7c20      	ldrb	r0, [r4, #16]
    85dc:	7be1      	ldrb	r1, [r4, #15]
    85de:	2201      	movs	r2, #1
    85e0:	f000 faa8 	bl	8b34 <_Z14hdlc_control_ihhh>
    85e4:	7ba3      	ldrb	r3, [r4, #14]
    85e6:	7b62      	ldrb	r2, [r4, #13]
                          hss.esrc, hss.edst, hdr, &hdrlen);
    85e8:	b201      	sxth	r1, r0
    85ea:	ac04      	add	r4, sp, #16
    85ec:	a803      	add	r0, sp, #12
    85ee:	9001      	str	r0, [sp, #4]
    85f0:	9400      	str	r4, [sp, #0]
    85f2:	2000      	movs	r0, #0
    85f4:	f000 fb3a 	bl	8c6c <_Z8hdlc_hdrismmPhPi>
    rc = hdlc_send_frame(hdr, (const uint8_t *)data, len);
    85f8:	0032      	movs	r2, r6
    85fa:	0029      	movs	r1, r5
    85fc:	0020      	movs	r0, r4
    85fe:	f000 fc23 	bl	8e48 <_Z15hdlc_send_framePKhS0_i>
}
    8602:	b006      	add	sp, #24
    8604:	bd70      	pop	{r4, r5, r6, pc}
    8606:	46c0      	nop			; (mov r8, r8)
    8608:	200019f0 	.word	0x200019f0

0000860c <_Z8hdlcs_rrv>:



int 
hdlcs_rr(void)
{
    860c:	b530      	push	{r4, r5, lr}
    uint8_t hdr[HDLC_HDR_SIZE];
    int hdrlen;

    if (!pending_rsp) {
    860e:	4d15      	ldr	r5, [pc, #84]	; (8664 <_Z8hdlcs_rrv+0x58>)
{
    8610:	b087      	sub	sp, #28
    if (!pending_rsp) {
    8612:	682c      	ldr	r4, [r5, #0]
    8614:	2c00      	cmp	r4, #0
    8616:	d11a      	bne.n	864e <_Z8hdlcs_rrv+0x42>
        dlog(LOG_DEBUG, "respond to RR with RR");
    8618:	4913      	ldr	r1, [pc, #76]	; (8668 <_Z8hdlcs_rrv+0x5c>)
    861a:	2007      	movs	r0, #7
    861c:	f7fb fec0 	bl	43a0 <_Z4dlogiPKcz>
        hdlc_hdr(0, hdlc_control_rr(hss.vr, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    8620:	4d12      	ldr	r5, [pc, #72]	; (866c <_Z8hdlcs_rrv+0x60>)
    8622:	2101      	movs	r1, #1
    8624:	7c28      	ldrb	r0, [r5, #16]
    8626:	f000 fa90 	bl	8b4a <_Z15hdlc_control_rrhh>
    862a:	7b6a      	ldrb	r2, [r5, #13]
    862c:	7bab      	ldrb	r3, [r5, #14]
    862e:	b201      	sxth	r1, r0
    8630:	ad04      	add	r5, sp, #16
    8632:	a803      	add	r0, sp, #12
    8634:	9001      	str	r0, [sp, #4]
    8636:	9500      	str	r5, [sp, #0]
    8638:	0020      	movs	r0, r4
    863a:	f000 fb17 	bl	8c6c <_Z8hdlc_hdrismmPhPi>
        hdlc_send_frame(hdr, NULL, 0);
    863e:	0022      	movs	r2, r4
    8640:	0021      	movs	r1, r4
    8642:	0028      	movs	r0, r5
    8644:	f000 fc00 	bl	8e48 <_Z15hdlc_send_framePKhS0_i>
        /* CoAP will also send app confirm */
        /* if not (and there is no data), proxy should send RR to confirm */
    }

    return 0;
}
    8648:	2000      	movs	r0, #0
    864a:	b007      	add	sp, #28
    864c:	bd30      	pop	{r4, r5, pc}
        dlog(LOG_DEBUG, "Resending frame");
    864e:	4908      	ldr	r1, [pc, #32]	; (8670 <_Z8hdlcs_rrv+0x64>)
    8650:	2007      	movs	r0, #7
    8652:	f7fb fea5 	bl	43a0 <_Z4dlogiPKcz>
        hdlcs_write(pending_rsp->m_data, pending_rsp->m_pktlen);
    8656:	6828      	ldr	r0, [r5, #0]
    8658:	8801      	ldrh	r1, [r0, #0]
    865a:	3004      	adds	r0, #4
    865c:	f7ff ffb8 	bl	85d0 <_Z11hdlcs_writePKvt>
    8660:	e7f2      	b.n	8648 <_Z8hdlcs_rrv+0x3c>
    8662:	46c0      	nop			; (mov r8, r8)
    8664:	20001984 	.word	0x20001984
    8668:	00011b92 	.word	0x00011b92
    866c:	200019f0 	.word	0x200019f0
    8670:	00011ba8 	.word	0x00011ba8

00008674 <_Z9hdlcs_runv>:
{
    8674:	b5f0      	push	{r4, r5, r6, r7, lr}
    rc = hdlc_rx( hdr, hss.recv->data, hss.recv->size, uart_timeout_ms );  
    8676:	4c72      	ldr	r4, [pc, #456]	; (8840 <_Z9hdlcs_runv+0x1cc>)
    8678:	4b72      	ldr	r3, [pc, #456]	; (8844 <_Z9hdlcs_runv+0x1d0>)
    867a:	69a1      	ldr	r1, [r4, #24]
{
    867c:	b093      	sub	sp, #76	; 0x4c
    rc = hdlc_rx( hdr, hss.recv->data, hss.recv->size, uart_timeout_ms );  
    867e:	884a      	ldrh	r2, [r1, #2]
    8680:	681b      	ldr	r3, [r3, #0]
    8682:	3104      	adds	r1, #4
    8684:	a807      	add	r0, sp, #28
    8686:	f000 fc49 	bl	8f1c <_Z7hdlc_rxPhS_ii>
	if ( rc <= 0 )
    868a:	2800      	cmp	r0, #0
    868c:	dc04      	bgt.n	8698 <_Z9hdlcs_runv+0x24>
        return 0;
    868e:	2300      	movs	r3, #0
        return 1;
    8690:	9303      	str	r3, [sp, #12]
} // hdlcs_run()
    8692:	9803      	ldr	r0, [sp, #12]
    8694:	b013      	add	sp, #76	; 0x4c
    8696:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rc = hdlc_parse_hdr( &hh, hdr, HDLC_HDR_SIZE );
    8698:	ae0b      	add	r6, sp, #44	; 0x2c
    869a:	2207      	movs	r2, #7
    869c:	a907      	add	r1, sp, #28
    869e:	0030      	movs	r0, r6
    86a0:	f000 fb56 	bl	8d50 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi>
	if (rc) 
    86a4:	2800      	cmp	r0, #0
    86a6:	d1f2      	bne.n	868e <_Z9hdlcs_runv+0x1a>
	rc = hdlc_parse_control( hh.control, &hc );
    86a8:	ad05      	add	r5, sp, #20
    86aa:	7c30      	ldrb	r0, [r6, #16]
    86ac:	0029      	movs	r1, r5
    86ae:	f000 fa73 	bl	8b98 <_Z18hdlc_parse_controlhP9hdlc_ctrl>
    86b2:	9003      	str	r0, [sp, #12]
    if (rc) 
    86b4:	2800      	cmp	r0, #0
    86b6:	d1ea      	bne.n	868e <_Z9hdlcs_runv+0x1a>
    hss.recv->len = hh.infolen;
    86b8:	8932      	ldrh	r2, [r6, #8]
    86ba:	69a3      	ldr	r3, [r4, #24]
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    86bc:	4962      	ldr	r1, [pc, #392]	; (8848 <_Z9hdlcs_runv+0x1d4>)
    hss.recv->len = hh.infolen;
    86be:	801a      	strh	r2, [r3, #0]
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    86c0:	7c32      	ldrb	r2, [r6, #16]
    if (hc.nr == INCM8(hss.vs)) 
    86c2:	2607      	movs	r6, #7
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    86c4:	7b23      	ldrb	r3, [r4, #12]
    86c6:	2007      	movs	r0, #7
    86c8:	f7fb fe6a 	bl	43a0 <_Z4dlogiPKcz>
    if (hc.nr == INCM8(hss.vs)) 
    86cc:	7be3      	ldrb	r3, [r4, #15]
    86ce:	78aa      	ldrb	r2, [r5, #2]
    86d0:	3301      	adds	r3, #1
    86d2:	4033      	ands	r3, r6
    86d4:	429a      	cmp	r2, r3
    86d6:	d107      	bne.n	86e8 <_Z9hdlcs_runv+0x74>
        dlog(LOG_DEBUG, "response rxed at primary");
    86d8:	0030      	movs	r0, r6
    86da:	495c      	ldr	r1, [pc, #368]	; (884c <_Z9hdlcs_runv+0x1d8>)
    86dc:	f7fb fe60 	bl	43a0 <_Z4dlogiPKcz>
        hss.vs = INCM8(hss.vs);
    86e0:	7be0      	ldrb	r0, [r4, #15]
    86e2:	3001      	adds	r0, #1
    86e4:	4030      	ands	r0, r6
    86e6:	73e0      	strb	r0, [r4, #15]
    switch (hss.state) 
    86e8:	7b26      	ldrb	r6, [r4, #12]
    86ea:	2e01      	cmp	r6, #1
    86ec:	d008      	beq.n	8700 <_Z9hdlcs_runv+0x8c>
    86ee:	2e02      	cmp	r6, #2
    86f0:	d029      	beq.n	8746 <_Z9hdlcs_runv+0xd2>
		dlog( LOG_DEBUG, "Error - unknown state: %d", hss.state );
    86f2:	0032      	movs	r2, r6
    86f4:	4956      	ldr	r1, [pc, #344]	; (8850 <_Z9hdlcs_runv+0x1dc>)
    86f6:	2007      	movs	r0, #7
    86f8:	f7fb fe52 	bl	43a0 <_Z4dlogiPKcz>
        return 1;
    86fc:	2301      	movs	r3, #1
    86fe:	e7c7      	b.n	8690 <_Z9hdlcs_runv+0x1c>
        if (hc.type == HDLC_SNRM) {
    8700:	782b      	ldrb	r3, [r5, #0]
    8702:	2b04      	cmp	r3, #4
    8704:	d107      	bne.n	8716 <_Z9hdlcs_runv+0xa2>
            rc = hdlcs_snrm();
    8706:	f7ff feb7 	bl	8478 <_ZL10hdlcs_snrmv>
    dlog( LOG_DEBUG, "hdlcs_run() - %d", rc );
    870a:	0002      	movs	r2, r0
    870c:	4951      	ldr	r1, [pc, #324]	; (8854 <_Z9hdlcs_runv+0x1e0>)
    870e:	2007      	movs	r0, #7
    8710:	f7fb fe46 	bl	43a0 <_Z4dlogiPKcz>
    return 0;
    8714:	e7bd      	b.n	8692 <_Z9hdlcs_runv+0x1e>
{    
    uint8_t hdr[HDLC_HDR_SIZE];
    int hdrlen;

    /* Disconnected Mode response */
    dlog(LOG_WARNING, "request recv'd in disconnected mode");
    8716:	4950      	ldr	r1, [pc, #320]	; (8858 <_Z9hdlcs_runv+0x1e4>)
    8718:	2004      	movs	r0, #4
    871a:	f7fb fe41 	bl	43a0 <_Z4dlogiPKcz>
    
    hdlc_hdr(0, hdlc_control(HDLC_DM, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    871e:	0031      	movs	r1, r6
    8720:	2007      	movs	r0, #7
    8722:	f000 fa1b 	bl	8b5c <_Z12hdlc_controlhh>
    8726:	7b62      	ldrb	r2, [r4, #13]
    8728:	7ba3      	ldrb	r3, [r4, #14]
    872a:	0001      	movs	r1, r0
    872c:	ac09      	add	r4, sp, #36	; 0x24
    872e:	a806      	add	r0, sp, #24
    8730:	9001      	str	r0, [sp, #4]
    8732:	9400      	str	r4, [sp, #0]
    8734:	2000      	movs	r0, #0
    8736:	f000 fa99 	bl	8c6c <_Z8hdlc_hdrismmPhPi>
    hdlc_send_frame(hdr, NULL, 0);
    873a:	2200      	movs	r2, #0
    873c:	0020      	movs	r0, r4
    873e:	0011      	movs	r1, r2
    
    /* Frame Reject response */
    dlog(LOG_WARNING, "error - frame rejected");

    hdlc_hdr(0, hdlc_control(HDLC_FRMR, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    hdlc_send_frame(hdr, NULL, 0);
    8740:	f000 fb82 	bl	8e48 <_Z15hdlc_send_framePKhS0_i>
    8744:	e023      	b.n	878e <_Z9hdlcs_runv+0x11a>
        if (hc.type == HDLC_SNRM) {
    8746:	782b      	ldrb	r3, [r5, #0]
    8748:	2b04      	cmp	r3, #4
    874a:	d104      	bne.n	8756 <_Z9hdlcs_runv+0xe2>
            dlog( LOG_DEBUG, "HDLC_SNRM" );
    874c:	4943      	ldr	r1, [pc, #268]	; (885c <_Z9hdlcs_runv+0x1e8>)
    874e:	2007      	movs	r0, #7
    8750:	f7fb fe26 	bl	43a0 <_Z4dlogiPKcz>
    8754:	e7d7      	b.n	8706 <_Z9hdlcs_runv+0x92>
        else if (hc.type == HDLC_I) {
    8756:	2b01      	cmp	r3, #1
    8758:	d124      	bne.n	87a4 <_Z9hdlcs_runv+0x130>
            dlog( LOG_DEBUG, "HDLC_I" );
    875a:	4941      	ldr	r1, [pc, #260]	; (8860 <_Z9hdlcs_runv+0x1ec>)
    875c:	2007      	movs	r0, #7
    875e:	f7fb fe1f 	bl	43a0 <_Z4dlogiPKcz>
            if (hc.ns != hss.vr) {
    8762:	78ea      	ldrb	r2, [r5, #3]
    8764:	7c23      	ldrb	r3, [r4, #16]
    8766:	429a      	cmp	r2, r3
    8768:	d013      	beq.n	8792 <_Z9hdlcs_runv+0x11e>
                            hc.ns, hss.vr);
    876a:	493e      	ldr	r1, [pc, #248]	; (8864 <_Z9hdlcs_runv+0x1f0>)
    876c:	2003      	movs	r0, #3
    876e:	f7fb fe17 	bl	43a0 <_Z4dlogiPKcz>
            rc = hdlcs_i(hss.recv);
    8772:	69a5      	ldr	r5, [r4, #24]
    ddump(LOG_DEBUG, "Recv I frame", d->data, d->len);
    8774:	2007      	movs	r0, #7
    8776:	882b      	ldrh	r3, [r5, #0]
    8778:	1d2a      	adds	r2, r5, #4
    877a:	493b      	ldr	r1, [pc, #236]	; (8868 <_Z9hdlcs_runv+0x1f4>)
    877c:	f7fb fe32 	bl	43e4 <_Z5ddumpiPKcPKvi>
    if (hss.icb) {
    8780:	6960      	ldr	r0, [r4, #20]
    8782:	2800      	cmp	r0, #0
    8784:	d00a      	beq.n	879c <_Z9hdlcs_runv+0x128>
        dlog(LOG_ERR, "data CB not supported");
    8786:	4939      	ldr	r1, [pc, #228]	; (886c <_Z9hdlcs_runv+0x1f8>)
    8788:	2003      	movs	r0, #3
    878a:	f7fb fe09 	bl	43a0 <_Z4dlogiPKcz>
            rc = hdlcs_frmr();
    878e:	2000      	movs	r0, #0
    8790:	e7bb      	b.n	870a <_Z9hdlcs_runv+0x96>
                hss.vr = INCM8(hss.vr);
    8792:	2307      	movs	r3, #7
    8794:	3201      	adds	r2, #1
    8796:	401a      	ands	r2, r3
    8798:	7422      	strb	r2, [r4, #16]
    879a:	e7ea      	b.n	8772 <_Z9hdlcs_runv+0xfe>
        hss.r_complete = 1;
    879c:	2301      	movs	r3, #1
        hss.recv = d;
    879e:	61a5      	str	r5, [r4, #24]
        hss.r_complete = 1;
    87a0:	61e3      	str	r3, [r4, #28]
    87a2:	e7b2      	b.n	870a <_Z9hdlcs_runv+0x96>
        else if (hc.type == HDLC_RR) {
    87a4:	2b02      	cmp	r3, #2
    87a6:	d10c      	bne.n	87c2 <_Z9hdlcs_runv+0x14e>
            dlog( LOG_DEBUG, "HDLC_RR" );
    87a8:	4931      	ldr	r1, [pc, #196]	; (8870 <_Z9hdlcs_runv+0x1fc>)
    87aa:	2007      	movs	r0, #7
    87ac:	f7fb fdf8 	bl	43a0 <_Z4dlogiPKcz>
            dlog(LOG_DEBUG, "hc.nr: %d, hss.vs: %d", hc.nr, hss.vs);
    87b0:	7be3      	ldrb	r3, [r4, #15]
    87b2:	78aa      	ldrb	r2, [r5, #2]
    87b4:	492f      	ldr	r1, [pc, #188]	; (8874 <_Z9hdlcs_runv+0x200>)
    87b6:	2007      	movs	r0, #7
    87b8:	f7fb fdf2 	bl	43a0 <_Z4dlogiPKcz>
            rc = hdlcs_rr();
    87bc:	f7ff ff26 	bl	860c <_Z8hdlcs_rrv>
    87c0:	e7a3      	b.n	870a <_Z9hdlcs_runv+0x96>
    87c2:	ad09      	add	r5, sp, #36	; 0x24
        else if (hc.type == HDLC_DISC) {
    87c4:	2b05      	cmp	r3, #5
    87c6:	d127      	bne.n	8818 <_Z9hdlcs_runv+0x1a4>
            pending_rsp = NULL;
    87c8:	2600      	movs	r6, #0
            dlog( LOG_DEBUG, "HDLC_DISC" );
    87ca:	492b      	ldr	r1, [pc, #172]	; (8878 <_Z9hdlcs_runv+0x204>)
    87cc:	2007      	movs	r0, #7
    87ce:	f7fb fde7 	bl	43a0 <_Z4dlogiPKcz>
            m_free(pending_rsp);
    87d2:	4f2a      	ldr	r7, [pc, #168]	; (887c <_Z9hdlcs_runv+0x208>)
    87d4:	6838      	ldr	r0, [r7, #0]
    87d6:	f7ff fdf3 	bl	83c0 <_Z6m_freeP4mbuf>
            dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    87da:	2302      	movs	r3, #2
            pending_rsp = NULL;
    87dc:	603e      	str	r6, [r7, #0]
    hss.state = HSS_DISC;
    87de:	2701      	movs	r7, #1
            dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    87e0:	33ff      	adds	r3, #255	; 0xff
    87e2:	4a27      	ldr	r2, [pc, #156]	; (8880 <_Z9hdlcs_runv+0x20c>)
    87e4:	4927      	ldr	r1, [pc, #156]	; (8884 <_Z9hdlcs_runv+0x210>)
    87e6:	2007      	movs	r0, #7
    87e8:	f7fb fdda 	bl	43a0 <_Z4dlogiPKcz>
    dlog(LOG_DEBUG, "disconnecting");
    87ec:	4926      	ldr	r1, [pc, #152]	; (8888 <_Z9hdlcs_runv+0x214>)
    87ee:	2007      	movs	r0, #7
    hss.state = HSS_DISC;
    87f0:	7327      	strb	r7, [r4, #12]
    dlog(LOG_DEBUG, "disconnecting");
    87f2:	f7fb fdd5 	bl	43a0 <_Z4dlogiPKcz>
    hdlc_hdr(0, hdlc_control(HDLC_UA, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    87f6:	0039      	movs	r1, r7
    87f8:	2006      	movs	r0, #6
    87fa:	f000 f9af 	bl	8b5c <_Z12hdlc_controlhh>
    87fe:	0001      	movs	r1, r0
    8800:	a806      	add	r0, sp, #24
    8802:	7b62      	ldrb	r2, [r4, #13]
    8804:	7ba3      	ldrb	r3, [r4, #14]
    8806:	9001      	str	r0, [sp, #4]
    8808:	9500      	str	r5, [sp, #0]
    880a:	0030      	movs	r0, r6
    880c:	f000 fa2e 	bl	8c6c <_Z8hdlc_hdrismmPhPi>
    rc = hdlc_send_frame(hdr, NULL, 0);
    8810:	0032      	movs	r2, r6
    8812:	0031      	movs	r1, r6
    hdlc_send_frame(hdr, NULL, 0);
    8814:	0028      	movs	r0, r5
    8816:	e793      	b.n	8740 <_Z9hdlcs_runv+0xcc>
    dlog(LOG_WARNING, "error - frame rejected");
    8818:	491c      	ldr	r1, [pc, #112]	; (888c <_Z9hdlcs_runv+0x218>)
    881a:	2004      	movs	r0, #4
    881c:	f7fb fdc0 	bl	43a0 <_Z4dlogiPKcz>
    hdlc_hdr(0, hdlc_control(HDLC_FRMR, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    8820:	2101      	movs	r1, #1
    8822:	2008      	movs	r0, #8
    8824:	f000 f99a 	bl	8b5c <_Z12hdlc_controlhh>
    8828:	0001      	movs	r1, r0
    882a:	a806      	add	r0, sp, #24
    882c:	7b62      	ldrb	r2, [r4, #13]
    882e:	7ba3      	ldrb	r3, [r4, #14]
    8830:	9001      	str	r0, [sp, #4]
    8832:	9500      	str	r5, [sp, #0]
    8834:	2000      	movs	r0, #0
    8836:	f000 fa19 	bl	8c6c <_Z8hdlc_hdrismmPhPi>
    hdlc_send_frame(hdr, NULL, 0);
    883a:	2200      	movs	r2, #0
    883c:	0011      	movs	r1, r2
    883e:	e7e9      	b.n	8814 <_Z9hdlcs_runv+0x1a0>
    8840:	200019f0 	.word	0x200019f0
    8844:	200019ec 	.word	0x200019ec
    8848:	00011bb8 	.word	0x00011bb8
    884c:	00011bdf 	.word	0x00011bdf
    8850:	00011cc4 	.word	0x00011cc4
    8854:	00011cde 	.word	0x00011cde
    8858:	00011bf8 	.word	0x00011bf8
    885c:	00011c1c 	.word	0x00011c1c
    8860:	00011c26 	.word	0x00011c26
    8864:	00011c2d 	.word	0x00011c2d
    8868:	00011c54 	.word	0x00011c54
    886c:	00011c61 	.word	0x00011c61
    8870:	00011c77 	.word	0x00011c77
    8874:	00011c7f 	.word	0x00011c7f
    8878:	00011c95 	.word	0x00011c95
    887c:	20001984 	.word	0x20001984
    8880:	00011d2b 	.word	0x00011d2b
    8884:	0001174f 	.word	0x0001174f
    8888:	00011c9f 	.word	0x00011c9f
    888c:	00011cad 	.word	0x00011cad

00008890 <ultoa>:
        {
            return ultoa(value, string, radix);
        }

        extern char* ultoa(unsigned long value, char*string, int radix)
        {
    8890:	b5f0      	push	{r4, r5, r6, r7, lr}
    8892:	b08d      	sub	sp, #52	; 0x34
    8894:	0007      	movs	r7, r0
    8896:	1e0e      	subs	r6, r1, #0
    8898:	9201      	str	r2, [sp, #4]
            char* tp = tmp;
            long i;
            unsigned long v = value;
            char* sp;

            if (string == NULL)
    889a:	d021      	beq.n	88e0 <ultoa+0x50>
            {
                return 0;
            }

            if (radix > 36 || radix <= 1)
    889c:	0013      	movs	r3, r2
    889e:	3b02      	subs	r3, #2
    88a0:	ad03      	add	r5, sp, #12
    88a2:	2b22      	cmp	r3, #34	; 0x22
    88a4:	d910      	bls.n	88c8 <ultoa+0x38>
                return 0;
    88a6:	2600      	movs	r6, #0
    88a8:	e01a      	b.n	88e0 <ultoa+0x50>
                return 0;
            }

            while (v || tp == tmp)
            {
                i = v % radix;
    88aa:	0038      	movs	r0, r7
    88ac:	9901      	ldr	r1, [sp, #4]
    88ae:	f001 f827 	bl	9900 <__aeabi_uidivmod>
                v = v / radix;
    88b2:	0038      	movs	r0, r7
                i = v % radix;
    88b4:	000c      	movs	r4, r1
                v = v / radix;
    88b6:	9901      	ldr	r1, [sp, #4]
    88b8:	f000 ff9c 	bl	97f4 <__udivsi3>
    88bc:	0007      	movs	r7, r0
                if (i < 10)
    88be:	2c09      	cmp	r4, #9
    88c0:	d811      	bhi.n	88e6 <ultoa+0x56>
                    *tp++ = i + '0';
    88c2:	3430      	adds	r4, #48	; 0x30
                else
                    *tp++ = i + 'a' - 10;
    88c4:	702c      	strb	r4, [r5, #0]
    88c6:	3501      	adds	r5, #1
    88c8:	002b      	movs	r3, r5
            while (v || tp == tmp)
    88ca:	2f00      	cmp	r7, #0
    88cc:	d1ed      	bne.n	88aa <ultoa+0x1a>
    88ce:	aa03      	add	r2, sp, #12
    88d0:	42aa      	cmp	r2, r5
    88d2:	d0ea      	beq.n	88aa <ultoa+0x1a>
    88d4:	0032      	movs	r2, r6
            }

            sp = string;


            while (tp > tmp)
    88d6:	a903      	add	r1, sp, #12
    88d8:	428b      	cmp	r3, r1
    88da:	d806      	bhi.n	88ea <ultoa+0x5a>
                *sp++ = *--tp;
            *sp = 0;
    88dc:	2300      	movs	r3, #0
    88de:	7013      	strb	r3, [r2, #0]

            return string;
        }
    88e0:	0030      	movs	r0, r6
    88e2:	b00d      	add	sp, #52	; 0x34
    88e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    *tp++ = i + 'a' - 10;
    88e6:	3457      	adds	r4, #87	; 0x57
    88e8:	e7ec      	b.n	88c4 <ultoa+0x34>
                *sp++ = *--tp;
    88ea:	3b01      	subs	r3, #1
    88ec:	7819      	ldrb	r1, [r3, #0]
    88ee:	7011      	strb	r1, [r2, #0]
    88f0:	3201      	adds	r2, #1
    88f2:	e7f0      	b.n	88d6 <ultoa+0x46>

000088f4 <utoa>:
        {
    88f4:	b510      	push	{r4, lr}
            return ultoa(value, string, radix);
    88f6:	f7ff ffcb 	bl	8890 <ultoa>
        }
    88fa:	bd10      	pop	{r4, pc}

000088fc <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    88fc:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    88fe:	2240      	movs	r2, #64	; 0x40
    8900:	2100      	movs	r1, #0
RingBuffer::RingBuffer( void )
    8902:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    8904:	f004 f8e0 	bl	cac8 <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    8908:	2300      	movs	r3, #0
}
    890a:	0020      	movs	r0, r4
	_iHead = 0;
    890c:	6423      	str	r3, [r4, #64]	; 0x40
	_iTail = 0;
    890e:	6463      	str	r3, [r4, #68]	; 0x44
}
    8910:	bd10      	pop	{r4, pc}

00008912 <_ZN10RingBuffer10store_charEh>:
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    8912:	223f      	movs	r2, #63	; 0x3f
  int i = nextIndex(_iHead);
    8914:	6c03      	ldr	r3, [r0, #64]	; 0x40
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    8916:	3301      	adds	r3, #1
    8918:	4013      	ands	r3, r2
  if ( i != _iTail )
    891a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    891c:	429a      	cmp	r2, r3
    891e:	d002      	beq.n	8926 <_ZN10RingBuffer10store_charEh+0x14>
    _aucBuffer[_iHead] = c ;
    8920:	6c02      	ldr	r2, [r0, #64]	; 0x40
    8922:	5481      	strb	r1, [r0, r2]
    _iHead = i ;
    8924:	6403      	str	r3, [r0, #64]	; 0x40
}
    8926:	4770      	bx	lr

00008928 <_ZN10RingBuffer5clearEv>:
	_iHead = 0;
    8928:	2300      	movs	r3, #0
    892a:	6403      	str	r3, [r0, #64]	; 0x40
	_iTail = 0;
    892c:	6443      	str	r3, [r0, #68]	; 0x44
}
    892e:	4770      	bx	lr

00008930 <_ZN10RingBuffer9read_charEv>:
	if(_iTail == _iHead)
    8930:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8932:	6c03      	ldr	r3, [r0, #64]	; 0x40
    8934:	429a      	cmp	r2, r3
    8936:	d008      	beq.n	894a <_ZN10RingBuffer9read_charEv+0x1a>
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    8938:	213f      	movs	r1, #63	; 0x3f
	uint8_t value = _aucBuffer[_iTail];
    893a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    893c:	5cc2      	ldrb	r2, [r0, r3]
	_iTail = nextIndex(_iTail);
    893e:	6c43      	ldr	r3, [r0, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    8940:	3301      	adds	r3, #1
    8942:	400b      	ands	r3, r1
	_iTail = nextIndex(_iTail);
    8944:	6443      	str	r3, [r0, #68]	; 0x44
	return value;
    8946:	0010      	movs	r0, r2
}
    8948:	4770      	bx	lr
		return -1;
    894a:	2001      	movs	r0, #1
    894c:	4240      	negs	r0, r0
    894e:	e7fb      	b.n	8948 <_ZN10RingBuffer9read_charEv+0x18>

00008950 <_ZN10RingBuffer9availableEv>:
	int delta = _iHead - _iTail;
    8950:	6c03      	ldr	r3, [r0, #64]	; 0x40
    8952:	6c40      	ldr	r0, [r0, #68]	; 0x44
    8954:	1a18      	subs	r0, r3, r0
	if(delta < 0)
    8956:	d500      	bpl.n	895a <_ZN10RingBuffer9availableEv+0xa>
		return SERIAL_BUFFER_SIZE + delta;
    8958:	3040      	adds	r0, #64	; 0x40
}
    895a:	4770      	bx	lr

0000895c <_ZN10RingBuffer17availableForStoreEv>:
	if (_iHead >= _iTail)
    895c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    895e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8960:	429a      	cmp	r2, r3
    8962:	db04      	blt.n	896e <_ZN10RingBuffer17availableForStoreEv+0x12>
		return SERIAL_BUFFER_SIZE - 1 - _iHead + _iTail;
    8964:	6c03      	ldr	r3, [r0, #64]	; 0x40
    8966:	6c40      	ldr	r0, [r0, #68]	; 0x44
    8968:	1ac0      	subs	r0, r0, r3
    896a:	303f      	adds	r0, #63	; 0x3f
}
    896c:	4770      	bx	lr
		return _iTail - _iHead - 1;
    896e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8970:	6c00      	ldr	r0, [r0, #64]	; 0x40
    8972:	1a18      	subs	r0, r3, r0
    8974:	3801      	subs	r0, #1
    8976:	e7f9      	b.n	896c <_ZN10RingBuffer17availableForStoreEv+0x10>

00008978 <_ZN10RingBuffer4peekEv>:
	if(_iTail == _iHead)
    8978:	6c42      	ldr	r2, [r0, #68]	; 0x44
    897a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    897c:	429a      	cmp	r2, r3
    897e:	d002      	beq.n	8986 <_ZN10RingBuffer4peekEv+0xe>
	return _aucBuffer[_iTail];
    8980:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8982:	5cc0      	ldrb	r0, [r0, r3]
}
    8984:	4770      	bx	lr
		return -1;
    8986:	2001      	movs	r0, #1
    8988:	4240      	negs	r0, r0
    898a:	e7fb      	b.n	8984 <_ZN10RingBuffer4peekEv+0xc>

0000898c <_ZN10RingBuffer6isFullEv>:
}

bool RingBuffer::isFull()
{
    898c:	0003      	movs	r3, r0
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    898e:	223f      	movs	r2, #63	; 0x3f
	return (nextIndex(_iHead) == _iTail);
    8990:	6c00      	ldr	r0, [r0, #64]	; 0x40
    8992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    8994:	3001      	adds	r0, #1
    8996:	4010      	ands	r0, r2
	return (nextIndex(_iHead) == _iTail);
    8998:	1ac0      	subs	r0, r0, r3
    899a:	4243      	negs	r3, r0
    899c:	4158      	adcs	r0, r3
    899e:	b2c0      	uxtb	r0, r0
}
    89a0:	4770      	bx	lr

000089a2 <_ZN11DiagnosticsD1Ev>:
 class Diagnostics {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
  ~Diagnostics(void){};
    89a2:	4770      	bx	lr

000089a4 <_ZN11Diagnostics17_printSupportLinkEv>:
    Serial.print(F("0"));
  }
  Serial.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
    89a4:	b510      	push	{r4, lr}
  Serial.print(F("If this does not help resolve/clarify this issue, "));
    89a6:	4c05      	ldr	r4, [pc, #20]	; (89bc <_ZN11Diagnostics17_printSupportLinkEv+0x18>)
    89a8:	4905      	ldr	r1, [pc, #20]	; (89c0 <_ZN11Diagnostics17_printSupportLinkEv+0x1c>)
    89aa:	0020      	movs	r0, r4
    89ac:	f7fc fa90 	bl	4ed0 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(F("please raise an issue at http://www.github.com/Marzogh/SPIMemory/issues with the details of what your were doing when this error occurred"));
    89b0:	4904      	ldr	r1, [pc, #16]	; (89c4 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
    89b2:	0020      	movs	r0, r4
    89b4:	f7fc faa8 	bl	4f08 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    89b8:	bd10      	pop	{r4, pc}
    89ba:	46c0      	nop			; (mov r8, r8)
    89bc:	2000037c 	.word	0x2000037c
    89c0:	0001228a 	.word	0x0001228a
    89c4:	000122bd 	.word	0x000122bd

000089c8 <_ZN11Diagnostics12troubleshootEhb>:
//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
    89c8:	b570      	push	{r4, r5, r6, lr}
    89ca:	0006      	movs	r6, r0
    89cc:	000d      	movs	r5, r1
  bool _printoverride;
  errorcode = _code;
    89ce:	7031      	strb	r1, [r6, #0]
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
#endif
  if (_printoverride) {
    89d0:	2a00      	cmp	r2, #0
    89d2:	d014      	beq.n	89fe <_ZN11Diagnostics12troubleshootEhb+0x36>
    89d4:	4c2e      	ldr	r4, [pc, #184]	; (8a90 <_ZN11Diagnostics12troubleshootEhb+0xc8>)
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
    89d6:	2914      	cmp	r1, #20
    89d8:	d84c      	bhi.n	8a74 <_ZN11Diagnostics12troubleshootEhb+0xac>
    89da:	0008      	movs	r0, r1
    89dc:	f000 ff00 	bl	97e0 <__gnu_thumb1_case_uqi>
    89e0:	1c1a180b 	.word	0x1c1a180b
    89e4:	2c26241e 	.word	0x2c26241e
    89e8:	10383632 	.word	0x10383632
    89ec:	3e3c3a34 	.word	0x3e3c3a34
    89f0:	46444240 	.word	0x46444240
    89f4:	48          	.byte	0x48
    89f5:	00          	.byte	0x00
      case SUCCESS:
      Serial.println(F("Function executed successfully"));
    89f6:	4927      	ldr	r1, [pc, #156]	; (8a94 <_ZN11Diagnostics12troubleshootEhb+0xcc>)
      case NORESPONSE:
      Serial.println(F("Check your wiring. Flash chip is non-responsive."));
      break;

      case CALLBEGIN:
      Serial.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    89f8:	0020      	movs	r0, r4
    89fa:	f7fc fa85 	bl	4f08 <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
      _printSupportLink();
    }
  #endif
  }
}
    89fe:	bd70      	pop	{r4, r5, r6, pc}
      Serial.println(F("Check your wiring. Flash chip is non-responsive."));
    8a00:	4925      	ldr	r1, [pc, #148]	; (8a98 <_ZN11Diagnostics12troubleshootEhb+0xd0>)
      Serial.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    8a02:	0020      	movs	r0, r4
    8a04:	f7fc fa80 	bl	4f08 <_ZN5Print7printlnEPK19__FlashStringHelper>
      _printSupportLink();
    8a08:	0030      	movs	r0, r6
    8a0a:	f7ff ffcb 	bl	89a4 <_ZN11Diagnostics17_printSupportLinkEv>
}
    8a0e:	e7f6      	b.n	89fe <_ZN11Diagnostics12troubleshootEhb+0x36>
      Serial.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    8a10:	4922      	ldr	r1, [pc, #136]	; (8a9c <_ZN11Diagnostics12troubleshootEhb+0xd4>)
    8a12:	e7f1      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    8a14:	4922      	ldr	r1, [pc, #136]	; (8aa0 <_ZN11Diagnostics12troubleshootEhb+0xd8>)
    8a16:	e7f4      	b.n	8a02 <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
    8a18:	4922      	ldr	r1, [pc, #136]	; (8aa4 <_ZN11Diagnostics12troubleshootEhb+0xdc>)
    8a1a:	e7ed      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Chip is busy."));
    8a1c:	4922      	ldr	r1, [pc, #136]	; (8aa8 <_ZN11Diagnostics12troubleshootEhb+0xe0>)
    8a1e:	0020      	movs	r0, r4
    8a20:	f7fc fa72 	bl	4f08 <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Make sure all pins have been connected properly"));
    8a24:	4921      	ldr	r1, [pc, #132]	; (8aac <_ZN11Diagnostics12troubleshootEhb+0xe4>)
    8a26:	e7e7      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Page overflow has been disabled and the address called exceeds the memory"));
    8a28:	4921      	ldr	r1, [pc, #132]	; (8ab0 <_ZN11Diagnostics12troubleshootEhb+0xe8>)
    8a2a:	e7e5      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to Enable Writing to chip."));
    8a2c:	4921      	ldr	r1, [pc, #132]	; (8ab4 <_ZN11Diagnostics12troubleshootEhb+0xec>)
    8a2e:	0020      	movs	r0, r4
    8a30:	f7fc fa6a 	bl	4f08 <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
    8a34:	4920      	ldr	r1, [pc, #128]	; (8ab8 <_ZN11Diagnostics12troubleshootEhb+0xf0>)
    8a36:	e7e4      	b.n	8a02 <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("This sector already contains data."));
    8a38:	4920      	ldr	r1, [pc, #128]	; (8abc <_ZN11Diagnostics12troubleshootEhb+0xf4>)
    8a3a:	0020      	movs	r0, r4
    8a3c:	f7fc fa64 	bl	4f08 <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Please make sure the sectors being written to are erased."));
    8a40:	491f      	ldr	r1, [pc, #124]	; (8ac0 <_ZN11Diagnostics12troubleshootEhb+0xf8>)
    8a42:	e7d9      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
    8a44:	491f      	ldr	r1, [pc, #124]	; (8ac4 <_ZN11Diagnostics12troubleshootEhb+0xfc>)
    8a46:	e7d7      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("This function is not supported by the flash memory hardware."));
    8a48:	491f      	ldr	r1, [pc, #124]	; (8ac8 <_ZN11Diagnostics12troubleshootEhb+0x100>)
    8a4a:	e7d5      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to suspend/resume operation."));
    8a4c:	491f      	ldr	r1, [pc, #124]	; (8acc <_ZN11Diagnostics12troubleshootEhb+0x104>)
    8a4e:	e7d3      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Write Function has failed errorcheck."));
    8a50:	491f      	ldr	r1, [pc, #124]	; (8ad0 <_ZN11Diagnostics12troubleshootEhb+0x108>)
    8a52:	e7d6      	b.n	8a02 <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("Unable to enable 4-byte addressing."));
    8a54:	491f      	ldr	r1, [pc, #124]	; (8ad4 <_ZN11Diagnostics12troubleshootEhb+0x10c>)
    8a56:	e7cf      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to disable 4-byte addressing."));
    8a58:	491f      	ldr	r1, [pc, #124]	; (8ad8 <_ZN11Diagnostics12troubleshootEhb+0x110>)
    8a5a:	e7cd      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("The chip is currently powered down."));
    8a5c:	491f      	ldr	r1, [pc, #124]	; (8adc <_ZN11Diagnostics12troubleshootEhb+0x114>)
    8a5e:	e7cb      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("The Flash chip does not support SFDP."));
    8a60:	491f      	ldr	r1, [pc, #124]	; (8ae0 <_ZN11Diagnostics12troubleshootEhb+0x118>)
    8a62:	e7c9      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
    8a64:	491f      	ldr	r1, [pc, #124]	; (8ae4 <_ZN11Diagnostics12troubleshootEhb+0x11c>)
    8a66:	e7c7      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
    8a68:	491f      	ldr	r1, [pc, #124]	; (8ae8 <_ZN11Diagnostics12troubleshootEhb+0x120>)
    8a6a:	e7c5      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
    8a6c:	491f      	ldr	r1, [pc, #124]	; (8aec <_ZN11Diagnostics12troubleshootEhb+0x124>)
    8a6e:	e7c3      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("No Chip Select pin defined in the custom SPI Array."));
    8a70:	491f      	ldr	r1, [pc, #124]	; (8af0 <_ZN11Diagnostics12troubleshootEhb+0x128>)
    8a72:	e7c1      	b.n	89f8 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unknown error"));
    8a74:	491f      	ldr	r1, [pc, #124]	; (8af4 <_ZN11Diagnostics12troubleshootEhb+0x12c>)
    8a76:	0020      	movs	r0, r4
    8a78:	f7fc fa46 	bl	4f08 <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
    8a7c:	002b      	movs	r3, r5
    8a7e:	3b0a      	subs	r3, #10
    8a80:	2b01      	cmp	r3, #1
    8a82:	d9c1      	bls.n	8a08 <_ZN11Diagnostics12troubleshootEhb+0x40>
    8a84:	2304      	movs	r3, #4
    8a86:	439d      	bics	r5, r3
    8a88:	2d02      	cmp	r5, #2
    8a8a:	d0bd      	beq.n	8a08 <_ZN11Diagnostics12troubleshootEhb+0x40>
    8a8c:	e7b7      	b.n	89fe <_ZN11Diagnostics12troubleshootEhb+0x36>
    8a8e:	46c0      	nop			; (mov r8, r8)
    8a90:	2000037c 	.word	0x2000037c
    8a94:	00011d4d 	.word	0x00011d4d
    8a98:	00011d6c 	.word	0x00011d6c
    8a9c:	00011d9d 	.word	0x00011d9d
    8aa0:	00011ddc 	.word	0x00011ddc
    8aa4:	00011e1a 	.word	0x00011e1a
    8aa8:	00011eaf 	.word	0x00011eaf
    8aac:	00011ebd 	.word	0x00011ebd
    8ab0:	00011eed 	.word	0x00011eed
    8ab4:	00011f37 	.word	0x00011f37
    8ab8:	00011f59 	.word	0x00011f59
    8abc:	00011f9c 	.word	0x00011f9c
    8ac0:	00011fbf 	.word	0x00011fbf
    8ac4:	00011ff9 	.word	0x00011ff9
    8ac8:	00012048 	.word	0x00012048
    8acc:	00012085 	.word	0x00012085
    8ad0:	000120a9 	.word	0x000120a9
    8ad4:	000120cf 	.word	0x000120cf
    8ad8:	000120f3 	.word	0x000120f3
    8adc:	00012118 	.word	0x00012118
    8ae0:	0001213c 	.word	0x0001213c
    8ae4:	00012162 	.word	0x00012162
    8ae8:	000121ac 	.word	0x000121ac
    8aec:	000121f9 	.word	0x000121f9
    8af0:	00012248 	.word	0x00012248
    8af4:	0001227c 	.word	0x0001227c

00008af8 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
    8af8:	b510      	push	{r4, lr}
    8afa:	4a03      	ldr	r2, [pc, #12]	; (8b08 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x10>)
    8afc:	4903      	ldr	r1, [pc, #12]	; (8b0c <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x14>)
    8afe:	4804      	ldr	r0, [pc, #16]	; (8b10 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x18>)
    8b00:	f000 fbb8 	bl	9274 <__aeabi_atexit>
    8b04:	bd10      	pop	{r4, pc}
    8b06:	46c0      	nop			; (mov r8, r8)
    8b08:	20000000 	.word	0x20000000
    8b0c:	000089a3 	.word	0x000089a3
    8b10:	20001a10 	.word	0x20001a10

00008b14 <_Z9hdlc_initP14HardwareSerialm>:

// Pointer to Serial console and UART
static HardwareSerial * pU;
#define uart (*pU)
void hdlc_init( HardwareSerial * pUART, uint32_t max_info_len )
{
    8b14:	b510      	push	{r4, lr}
    8b16:	000c      	movs	r4, r1
	// Set pointer to UART object
	pU = pUART;

	// Set baud rate for the mShield UART
	// NOTE: This baud rate is fixed and cannot be changed
	uart.begin(UART_BAUD_RATE);
    8b18:	2196      	movs	r1, #150	; 0x96
	pU = pUART;
    8b1a:	4b04      	ldr	r3, [pc, #16]	; (8b2c <_Z9hdlc_initP14HardwareSerialm+0x18>)
	uart.begin(UART_BAUD_RATE);
    8b1c:	0209      	lsls	r1, r1, #8
	pU = pUART;
    8b1e:	6018      	str	r0, [r3, #0]
	uart.begin(UART_BAUD_RATE);
    8b20:	6803      	ldr	r3, [r0, #0]
    8b22:	69db      	ldr	r3, [r3, #28]
    8b24:	4798      	blx	r3
	
	// Set the max payload size
	max_payload_size = max_info_len;
    8b26:	4b02      	ldr	r3, [pc, #8]	; (8b30 <_Z9hdlc_initP14HardwareSerialm+0x1c>)
    8b28:	601c      	str	r4, [r3, #0]

} // hdlc_set_serial
    8b2a:	bd10      	pop	{r4, pc}
    8b2c:	20001e1c 	.word	0x20001e1c
    8b30:	20001e18 	.word	0x20001e18

00008b34 <_Z14hdlc_control_ihhh>:


uint8_t
hdlc_control_i(uint8_t nr, uint8_t ns, uint8_t pf)
{
    return ((nr & 0x07) << 5) | ((pf  & 0x01) << 4) | ((ns & 0x07) << 1);
    8b34:	2310      	movs	r3, #16
    8b36:	0112      	lsls	r2, r2, #4
    8b38:	401a      	ands	r2, r3
    8b3a:	0140      	lsls	r0, r0, #5
    8b3c:	4310      	orrs	r0, r2
    8b3e:	220e      	movs	r2, #14
    8b40:	0049      	lsls	r1, r1, #1
    8b42:	4011      	ands	r1, r2
    8b44:	4308      	orrs	r0, r1
    8b46:	b2c0      	uxtb	r0, r0
}    
    8b48:	4770      	bx	lr

00008b4a <_Z15hdlc_control_rrhh>:

uint8_t
hdlc_control_rr(uint8_t nr, uint8_t pf)
{
   return ((nr & 0x07) << 5) | ((pf & 0x01) << 4) | 0x01;
    8b4a:	2310      	movs	r3, #16
    8b4c:	0109      	lsls	r1, r1, #4
    8b4e:	4019      	ands	r1, r3
    8b50:	0140      	lsls	r0, r0, #5
    8b52:	4308      	orrs	r0, r1
    8b54:	2101      	movs	r1, #1
    8b56:	4308      	orrs	r0, r1
    8b58:	b2c0      	uxtb	r0, r0
}
    8b5a:	4770      	bx	lr

00008b5c <_Z12hdlc_controlhh>:
int16_t
hdlc_control(uint8_t type, uint8_t pf)
{
    uint8_t control;
    
    switch (type) {        
    8b5c:	3804      	subs	r0, #4
{
    8b5e:	b500      	push	{lr}
    switch (type) {        
    8b60:	2805      	cmp	r0, #5
    8b62:	d815      	bhi.n	8b90 <_Z12hdlc_controlhh+0x34>
    8b64:	f000 fe3c 	bl	97e0 <__gnu_thumb1_case_uqi>
    8b68:	0c0a0312 	.word	0x0c0a0312
    8b6c:	100e      	.short	0x100e
        case HDLC_SNRM: control = 0x83; break;
        case HDLC_DISC: control = 0x43; break;
    8b6e:	2043      	movs	r0, #67	; 0x43
        case HDLC_UI:   control = 0x03; break;
        default:
            return HDLC_FC_INVALID;
    }

    if (pf) {
    8b70:	2900      	cmp	r1, #0
    8b72:	d001      	beq.n	8b78 <_Z12hdlc_controlhh+0x1c>
        control |= 0x10;
    8b74:	2310      	movs	r3, #16
    8b76:	4318      	orrs	r0, r3
    }
    return control;
    8b78:	b200      	sxth	r0, r0
}
    8b7a:	bd00      	pop	{pc}
        case HDLC_UA:   control = 0x63; break;
    8b7c:	2063      	movs	r0, #99	; 0x63
    8b7e:	e7f7      	b.n	8b70 <_Z12hdlc_controlhh+0x14>
        case HDLC_DM:   control = 0x0F; break;
    8b80:	200f      	movs	r0, #15
    8b82:	e7f5      	b.n	8b70 <_Z12hdlc_controlhh+0x14>
        case HDLC_FRMR: control = 0x87; break;
    8b84:	2087      	movs	r0, #135	; 0x87
    8b86:	e7f3      	b.n	8b70 <_Z12hdlc_controlhh+0x14>
        case HDLC_UI:   control = 0x03; break;
    8b88:	2003      	movs	r0, #3
    8b8a:	e7f1      	b.n	8b70 <_Z12hdlc_controlhh+0x14>
        case HDLC_SNRM: control = 0x83; break;
    8b8c:	2083      	movs	r0, #131	; 0x83
    8b8e:	e7ef      	b.n	8b70 <_Z12hdlc_controlhh+0x14>
            return HDLC_FC_INVALID;
    8b90:	2001      	movs	r0, #1
    8b92:	4240      	negs	r0, r0
    8b94:	e7f1      	b.n	8b7a <_Z12hdlc_controlhh+0x1e>
	...

00008b98 <_Z18hdlc_parse_controlhP9hdlc_ctrl>:


int
hdlc_parse_control(uint8_t ctrl, struct hdlc_ctrl *hc) 
                 //  uint8_t *type, uint8_t *pf, uint8_t *nr, uint8_t *ns)
{
    8b98:	b570      	push	{r4, r5, r6, lr}
    8b9a:	000d      	movs	r5, r1
    uint8_t c2;
    int rc = 0;

    memset(hc, 0, sizeof (*hc));
    8b9c:	2604      	movs	r6, #4
{
    8b9e:	0004      	movs	r4, r0
    memset(hc, 0, sizeof (*hc));
    8ba0:	0032      	movs	r2, r6
    8ba2:	2100      	movs	r1, #0
    8ba4:	0028      	movs	r0, r5
    8ba6:	f003 ff8f 	bl	cac8 <memset>

    if ((ctrl & 1) == 0) {              /* I frame */
    8baa:	2201      	movs	r2, #1
    8bac:	0023      	movs	r3, r4
    8bae:	1121      	asrs	r1, r4, #4
    8bb0:	4013      	ands	r3, r2
    8bb2:	d10f      	bne.n	8bd4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x3c>
        hc->type = HDLC_I;
        hc->nr = (ctrl & 0xE0) >> 5;
    8bb4:	0960      	lsrs	r0, r4, #5
        hc->pf = (ctrl & 0x10) >> 4;
        hc->ns = (ctrl & 0x0E) >> 1;
    8bb6:	0724      	lsls	r4, r4, #28
        hc->type = HDLC_I;
    8bb8:	702a      	strb	r2, [r5, #0]
        hc->ns = (ctrl & 0x0E) >> 1;
    8bba:	0f64      	lsrs	r4, r4, #29
        hc->pf = (ctrl & 0x10) >> 4;
    8bbc:	400a      	ands	r2, r1
        hc->nr = (ctrl & 0xE0) >> 5;
    8bbe:	70a8      	strb	r0, [r5, #2]
        hc->pf = (ctrl & 0x10) >> 4;
    8bc0:	706a      	strb	r2, [r5, #1]
        hc->ns = (ctrl & 0x0E) >> 1;
    8bc2:	70ec      	strb	r4, [r5, #3]
    int rc = 0;
    8bc4:	2400      	movs	r4, #0
            case 0x03:  hc->type = HDLC_UI;    break;
            default:
                rc = 1;     /* Unknown frame - error */
        }
    }
    dlog(LOG_DEBUG, "frame type: 0x%x", hc->type);
    8bc6:	782a      	ldrb	r2, [r5, #0]
    8bc8:	491c      	ldr	r1, [pc, #112]	; (8c3c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0xa4>)
    8bca:	2007      	movs	r0, #7
    8bcc:	f7fb fbe8 	bl	43a0 <_Z4dlogiPKcz>

    return rc;
}
    8bd0:	0020      	movs	r0, r4
    8bd2:	bd70      	pop	{r4, r5, r6, pc}
    8bd4:	230f      	movs	r3, #15
    8bd6:	4023      	ands	r3, r4
    else if ((ctrl & 0x0F) == 1) {      /* RR frame */
    8bd8:	2b01      	cmp	r3, #1
    8bda:	d106      	bne.n	8bea <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x52>
        hc->type = HDLC_RR;
    8bdc:	2202      	movs	r2, #2
        hc->nr = (ctrl & 0xE0) >> 5;
    8bde:	0964      	lsrs	r4, r4, #5
        hc->pf = (ctrl & 0x10) >> 4;
    8be0:	400b      	ands	r3, r1
        hc->type = HDLC_RR;
    8be2:	702a      	strb	r2, [r5, #0]
        hc->nr = (ctrl & 0xE0) >> 5;
    8be4:	70ac      	strb	r4, [r5, #2]
        hc->pf = (ctrl & 0x10) >> 4;
    8be6:	706b      	strb	r3, [r5, #1]
    8be8:	e7ec      	b.n	8bc4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
    else if ((ctrl & 0x0F) == 5) {      /* RNR frame */
    8bea:	2b05      	cmp	r3, #5
    8bec:	d106      	bne.n	8bfc <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x64>
        hc->type = HDLC_RNR;
    8bee:	3b02      	subs	r3, #2
        hc->nr = (ctrl & 0xE0) >> 5;
    8bf0:	0964      	lsrs	r4, r4, #5
        hc->pf  = (ctrl & 0x10) >> 4;
    8bf2:	400a      	ands	r2, r1
        hc->type = HDLC_RNR;
    8bf4:	702b      	strb	r3, [r5, #0]
        hc->nr = (ctrl & 0xE0) >> 5;
    8bf6:	70ac      	strb	r4, [r5, #2]
        hc->pf  = (ctrl & 0x10) >> 4;
    8bf8:	706a      	strb	r2, [r5, #1]
    8bfa:	e7e3      	b.n	8bc4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
        switch (c2) {
    8bfc:	2310      	movs	r3, #16
        hc->pf = (ctrl & 0x10) >> 4;
    8bfe:	400a      	ands	r2, r1
    8c00:	706a      	strb	r2, [r5, #1]
        switch (c2) {
    8c02:	439c      	bics	r4, r3
    8c04:	2c43      	cmp	r4, #67	; 0x43
    8c06:	d011      	beq.n	8c2c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x94>
    8c08:	d806      	bhi.n	8c18 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x80>
    8c0a:	2c03      	cmp	r4, #3
    8c0c:	d013      	beq.n	8c36 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x9e>
            case 0x0F:  hc->type = HDLC_DM;    break;
    8c0e:	2307      	movs	r3, #7
        switch (c2) {
    8c10:	2c0f      	cmp	r4, #15
    8c12:	d00c      	beq.n	8c2e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
                rc = 1;     /* Unknown frame - error */
    8c14:	2401      	movs	r4, #1
    8c16:	e7d6      	b.n	8bc6 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2e>
        switch (c2) {
    8c18:	2c83      	cmp	r4, #131	; 0x83
    8c1a:	d005      	beq.n	8c28 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x90>
    8c1c:	2c87      	cmp	r4, #135	; 0x87
    8c1e:	d008      	beq.n	8c32 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x9a>
    8c20:	2c63      	cmp	r4, #99	; 0x63
    8c22:	d1f7      	bne.n	8c14 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x7c>
            case 0x63:  hc->type = HDLC_UA;    break;
    8c24:	2306      	movs	r3, #6
    8c26:	e002      	b.n	8c2e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
            case 0x83:  hc->type = HDLC_SNRM;  break;
    8c28:	702e      	strb	r6, [r5, #0]
    8c2a:	e7cb      	b.n	8bc4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
            case 0x43:  hc->type = HDLC_DISC;  break;
    8c2c:	2305      	movs	r3, #5
            case 0x03:  hc->type = HDLC_UI;    break;
    8c2e:	702b      	strb	r3, [r5, #0]
    8c30:	e7c8      	b.n	8bc4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
            case 0x87:  hc->type = HDLC_FRMR;  break;
    8c32:	2308      	movs	r3, #8
    8c34:	e7fb      	b.n	8c2e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
            case 0x03:  hc->type = HDLC_UI;    break;
    8c36:	2309      	movs	r3, #9
    8c38:	e7f9      	b.n	8c2e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
    8c3a:	46c0      	nop			; (mov r8, r8)
    8c3c:	000123aa 	.word	0x000123aa

00008c40 <_Z16hdlc_addr_encodem>:
 * Limited to single byte encoding only
*/
uint8_t
hdlc_addr_encode(uint32_t address)
{    
    return ((address & 0x7F) << 1) | 1;
    8c40:	0043      	lsls	r3, r0, #1
    8c42:	2001      	movs	r0, #1
    8c44:	4318      	orrs	r0, r3
    8c46:	b2c0      	uxtb	r0, r0
}
    8c48:	4770      	bx	lr

00008c4a <_Z15hdlc_parse_addrPKhiPmPi>:
 *              0 means input was found incomplete
 */

int
hdlc_parse_addr(const uint8_t *buf, int len, uint32_t *eaddr, int *al)
{
    8c4a:	b570      	push	{r4, r5, r6, lr}
    *eaddr = 0;
    8c4c:	2400      	movs	r4, #0
    8c4e:	2501      	movs	r5, #1
{
    8c50:	0006      	movs	r6, r0
    *eaddr = 0;
    8c52:	6014      	str	r4, [r2, #0]
        goto err;
    }
    
    return 0;
err:
    return 1;
    8c54:	0028      	movs	r0, r5
    *al = 0;
    8c56:	601c      	str	r4, [r3, #0]
    if ((len >= 1) &&(buf[0] & 1)) {
    8c58:	42a1      	cmp	r1, r4
    8c5a:	dd05      	ble.n	8c68 <_Z15hdlc_parse_addrPKhiPmPi+0x1e>
    8c5c:	7831      	ldrb	r1, [r6, #0]
    8c5e:	4229      	tst	r1, r5
    8c60:	d002      	beq.n	8c68 <_Z15hdlc_parse_addrPKhiPmPi+0x1e>
    return 0;
    8c62:	0020      	movs	r0, r4
        memcpy(eaddr, buf, 1);
    8c64:	7011      	strb	r1, [r2, #0]
        *al = 1;               
    8c66:	601d      	str	r5, [r3, #0]
}
    8c68:	bd70      	pop	{r4, r5, r6, pc}
	...

00008c6c <_Z8hdlc_hdrismmPhPi>:
 *
 */
int
hdlc_hdr(int segment, int16_t fcontrol, uint32_t dst, uint32_t src,
    uint8_t *buf, int *hdrlen)
{
    8c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c6e:	9c06      	ldr	r4, [sp, #24]
    8c70:	001e      	movs	r6, r3
    8c72:	000d      	movs	r5, r1
    8c74:	0017      	movs	r7, r2
    hcs = crc16(crc16_init(), buf, *hdrlen - 2);
    buf_wle16(b, 0, ~hcs);
   
    return 0;
err:
    return 1;
    8c76:	2301      	movs	r3, #1
    if (fcontrol == HDLC_FC_INVALID || dst > 0x7f || src > 0x7f) {
    8c78:	1c4a      	adds	r2, r1, #1
    8c7a:	d021      	beq.n	8cc0 <_Z8hdlc_hdrismmPhPi+0x54>
    8c7c:	2f7f      	cmp	r7, #127	; 0x7f
    8c7e:	d81f      	bhi.n	8cc0 <_Z8hdlc_hdrismmPhPi+0x54>
    8c80:	2e7f      	cmp	r6, #127	; 0x7f
    8c82:	d81d      	bhi.n	8cc0 <_Z8hdlc_hdrismmPhPi+0x54>
    *hdrlen = HDLC_HDR_SIZE;   /* incl. two bytes of HCS */ 
    8c84:	2207      	movs	r2, #7
    8c86:	9b07      	ldr	r3, [sp, #28]
    8c88:	601a      	str	r2, [r3, #0]
    buf_wbe16(buf, 0, 0xA000 | (segment ? 0x0800 : 0) | *hdrlen);
    8c8a:	2800      	cmp	r0, #0
    8c8c:	d11a      	bne.n	8cc4 <_Z8hdlc_hdrismmPhPi+0x58>
    8c8e:	4b0e      	ldr	r3, [pc, #56]	; (8cc8 <_Z8hdlc_hdrismmPhPi+0x5c>)
    8c90:	431a      	orrs	r2, r3
    8c92:	b292      	uxth	r2, r2
    8c94:	2100      	movs	r1, #0
    8c96:	0020      	movs	r0, r4
    8c98:	f000 fab3 	bl	9202 <_Z9buf_wbe16Pvit>
    *b++ = dst;     //hdlc_addr_encode(dst);
    8c9c:	70a7      	strb	r7, [r4, #2]
    *b++ = src;     //hdlc_addr_encode(src);
    8c9e:	70e6      	strb	r6, [r4, #3]
    *b++ = fcontrol;
    8ca0:	7125      	strb	r5, [r4, #4]
    hcs = crc16(crc16_init(), buf, *hdrlen - 2);
    8ca2:	f000 fac1 	bl	9228 <_Z10crc16_initv>
    8ca6:	9b07      	ldr	r3, [sp, #28]
    8ca8:	0021      	movs	r1, r4
    8caa:	681a      	ldr	r2, [r3, #0]
    8cac:	3a02      	subs	r2, #2
    8cae:	f000 fabf 	bl	9230 <_Z5crc16tPKvj>
    buf_wle16(b, 0, ~hcs);
    8cb2:	43c2      	mvns	r2, r0
    8cb4:	2100      	movs	r1, #0
    8cb6:	b292      	uxth	r2, r2
    *b++ = fcontrol;
    8cb8:	1d60      	adds	r0, r4, #5
    buf_wle16(b, 0, ~hcs);
    8cba:	f000 faa7 	bl	920c <_Z9buf_wle16Pvit>
    return 0;
    8cbe:	2300      	movs	r3, #0
}
    8cc0:	0018      	movs	r0, r3
    8cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf_wbe16(buf, 0, 0xA000 | (segment ? 0x0800 : 0) | *hdrlen);
    8cc4:	4b01      	ldr	r3, [pc, #4]	; (8ccc <_Z8hdlc_hdrismmPhPi+0x60>)
    8cc6:	e7e3      	b.n	8c90 <_Z8hdlc_hdrismmPhPi+0x24>
    8cc8:	ffffa000 	.word	0xffffa000
    8ccc:	ffffa800 	.word	0xffffa800

00008cd0 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_>:
 * at the tail of info
 */
int
hdlc_frm_add_info(const uint8_t *hdr, uint8_t *fhdr, 
    const uint8_t *info, int infolen, uint8_t *fmfcs)
{
    8cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8cd2:	000d      	movs	r5, r1
    int fmt, hdrlen;
    uint16_t hcs, fcs;
    
    fmt = buf_be16(hdr, 0);
    8cd4:	2100      	movs	r1, #0
{
    8cd6:	0007      	movs	r7, r0
    8cd8:	9201      	str	r2, [sp, #4]
    8cda:	001e      	movs	r6, r3
    fmt = buf_be16(hdr, 0);
    8cdc:	f000 fa8b 	bl	91f6 <_Z8buf_be16PKvi>
    8ce0:	0544      	lsls	r4, r0, #21
    8ce2:	9000      	str	r0, [sp, #0]
    8ce4:	0d64      	lsrs	r4, r4, #21
    hdrlen = fmt & 0x07FF;
    fmt = fmt & 0xF800;

    if (hdrlen > HDLC_HDR_MAX) {
        return 1;
    8ce6:	2001      	movs	r0, #1
    if (hdrlen > HDLC_HDR_MAX) {
    8ce8:	2c07      	cmp	r4, #7
    8cea:	d830      	bhi.n	8d4e <_Z17hdlc_frm_add_infoPKhPhS0_iS1_+0x7e>
    }

    memcpy(fhdr, hdr, hdrlen);
    8cec:	0022      	movs	r2, r4
    8cee:	0039      	movs	r1, r7
    8cf0:	0028      	movs	r0, r5
    8cf2:	f003 fece 	bl	ca92 <memcpy>
        fcs = crc16(crc16_init(), fhdr, hdrlen);
        fcs = crc16(fcs, info, infolen);
        /* final byte order - ready to be appended to frame */
        buf_wle16(fmfcs, 0, ~fcs);
    }
    return 0;
    8cf6:	2000      	movs	r0, #0
    if (infolen > 0) {           
    8cf8:	4286      	cmp	r6, r0
    8cfa:	dd28      	ble.n	8d4e <_Z17hdlc_frm_add_infoPKhPhS0_iS1_+0x7e>
        buf_wbe16(fhdr, 0, fmt | (hdrlen + infolen + 2));
    8cfc:	9b00      	ldr	r3, [sp, #0]
    8cfe:	1cb2      	adds	r2, r6, #2
    8d00:	0adb      	lsrs	r3, r3, #11
    8d02:	02db      	lsls	r3, r3, #11
    8d04:	18a2      	adds	r2, r4, r2
    8d06:	431a      	orrs	r2, r3
    8d08:	0001      	movs	r1, r0
    8d0a:	b292      	uxth	r2, r2
    8d0c:	0028      	movs	r0, r5
        hcs = crc16(crc16_init(), fhdr, hdrlen - 2);
    8d0e:	1ea7      	subs	r7, r4, #2
        buf_wbe16(fhdr, 0, fmt | (hdrlen + infolen + 2));
    8d10:	f000 fa77 	bl	9202 <_Z9buf_wbe16Pvit>
        hcs = crc16(crc16_init(), fhdr, hdrlen - 2);
    8d14:	f000 fa88 	bl	9228 <_Z10crc16_initv>
    8d18:	003a      	movs	r2, r7
    8d1a:	0029      	movs	r1, r5
    8d1c:	f000 fa88 	bl	9230 <_Z5crc16tPKvj>
        buf_wle16(fhdr, hdrlen - 2, ~hcs);
    8d20:	43c2      	mvns	r2, r0
    8d22:	0039      	movs	r1, r7
    8d24:	b292      	uxth	r2, r2
    8d26:	0028      	movs	r0, r5
    8d28:	f000 fa70 	bl	920c <_Z9buf_wle16Pvit>
        fcs = crc16(crc16_init(), fhdr, hdrlen);
    8d2c:	f000 fa7c 	bl	9228 <_Z10crc16_initv>
    8d30:	0022      	movs	r2, r4
    8d32:	0029      	movs	r1, r5
    8d34:	f000 fa7c 	bl	9230 <_Z5crc16tPKvj>
        fcs = crc16(fcs, info, infolen);
    8d38:	0032      	movs	r2, r6
    8d3a:	9901      	ldr	r1, [sp, #4]
    8d3c:	f000 fa78 	bl	9230 <_Z5crc16tPKvj>
        buf_wle16(fmfcs, 0, ~fcs);
    8d40:	43c2      	mvns	r2, r0
    8d42:	2100      	movs	r1, #0
    8d44:	9808      	ldr	r0, [sp, #32]
    8d46:	b292      	uxth	r2, r2
    8d48:	f000 fa60 	bl	920c <_Z9buf_wle16Pvit>
    return 0;
    8d4c:	2000      	movs	r0, #0

}
    8d4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00008d50 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi>:
#define HDLC_PARSE_SHORT    (1)
#define HDLC_PARSE_HDR_ERR  (2)

int
hdlc_parse_hdr(struct hdlc_hdr_fields *hh, const uint8_t *buf, int buflen)
{
    8d50:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8d52:	0004      	movs	r4, r0
    8d54:	000d      	movs	r5, r1
    8d56:	0016      	movs	r6, r2
    int dlen, slen;
    int rc;

    if (buflen < HDLC_HDR_SIZE) { /* don't bother parsing, need more */
        return HDLC_PARSE_SHORT;
    8d58:	2001      	movs	r0, #1
    if (buflen < HDLC_HDR_SIZE) { /* don't bother parsing, need more */
    8d5a:	2a06      	cmp	r2, #6
    8d5c:	dd06      	ble.n	8d6c <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>
    }

    /* Confirm type 3 */
    if ((buf[0] & 0xF0) != 0xA0) {
    8d5e:	780b      	ldrb	r3, [r1, #0]
    8d60:	220f      	movs	r2, #15
    8d62:	0019      	movs	r1, r3
    8d64:	4391      	bics	r1, r2
    8d66:	29a0      	cmp	r1, #160	; 0xa0
    8d68:	d001      	beq.n	8d6e <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1e>
        return HDLC_PARSE_HDR_ERR;
    8d6a:	2002      	movs	r0, #2
    return 0;

err:
    return HDLC_PARSE_HDR_ERR;

}
    8d6c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    hh->segment = buf[0] & 0x08;
    8d6e:	2208      	movs	r2, #8
    8d70:	4013      	ands	r3, r2
    8d72:	60e3      	str	r3, [r4, #12]
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    8d74:	2100      	movs	r1, #0
    8d76:	0028      	movs	r0, r5
    8d78:	f000 fa3d 	bl	91f6 <_Z8buf_be16PKvi>
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    8d7c:	0022      	movs	r2, r4
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    8d7e:	0540      	lsls	r0, r0, #21
    8d80:	0d40      	lsrs	r0, r0, #21
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    8d82:	3e02      	subs	r6, #2
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    8d84:	6020      	str	r0, [r4, #0]
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    8d86:	466b      	mov	r3, sp
    8d88:	1ca8      	adds	r0, r5, #2
    8d8a:	3214      	adds	r2, #20
    8d8c:	0031      	movs	r1, r6
    8d8e:	f7ff ff5c 	bl	8c4a <_Z15hdlc_parse_addrPKhiPmPi>
    if (rc || dlen < 1) {
    8d92:	2800      	cmp	r0, #0
    8d94:	d1e9      	bne.n	8d6a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    8d96:	9800      	ldr	r0, [sp, #0]
    8d98:	2800      	cmp	r0, #0
    8d9a:	dde6      	ble.n	8d6a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    rc = hdlc_parse_addr(buf + 2 + dlen, buflen - 2 - dlen, &hh->src, &slen);
    8d9c:	0022      	movs	r2, r4
    8d9e:	1a31      	subs	r1, r6, r0
    8da0:	3002      	adds	r0, #2
    8da2:	1828      	adds	r0, r5, r0
    8da4:	ab01      	add	r3, sp, #4
    8da6:	3218      	adds	r2, #24
    8da8:	f7ff ff4f 	bl	8c4a <_Z15hdlc_parse_addrPKhiPmPi>
    if (rc || slen < 1) {
    8dac:	2800      	cmp	r0, #0
    8dae:	d1dc      	bne.n	8d6a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    8db0:	9a01      	ldr	r2, [sp, #4]
    8db2:	2a00      	cmp	r2, #0
    8db4:	ddd9      	ble.n	8d6a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    hh->hdrlen = 2 + dlen + slen + 1 + 2;
    8db6:	9b00      	ldr	r3, [sp, #0]
    if (crc16_validate(buf, hh->hdrlen)) {
    8db8:	0028      	movs	r0, r5
    hh->hdrlen = 2 + dlen + slen + 1 + 2;
    8dba:	3302      	adds	r3, #2
    8dbc:	189b      	adds	r3, r3, r2
    8dbe:	1cd9      	adds	r1, r3, #3
    8dc0:	6061      	str	r1, [r4, #4]
    hh->control = buf[2 + dlen + slen];
    8dc2:	5ceb      	ldrb	r3, [r5, r3]
    8dc4:	7423      	strb	r3, [r4, #16]
    if (crc16_validate(buf, hh->hdrlen)) {
    8dc6:	f000 fa45 	bl	9254 <_Z14crc16_validatePKvj>
    8dca:	2800      	cmp	r0, #0
    8dcc:	d1cd      	bne.n	8d6a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    if (hh->framelen > hh->hdrlen + 2) {
    8dce:	6862      	ldr	r2, [r4, #4]
    8dd0:	6823      	ldr	r3, [r4, #0]
    8dd2:	1c91      	adds	r1, r2, #2
    8dd4:	428b      	cmp	r3, r1
    8dd6:	dd03      	ble.n	8de0 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x90>
        hh->infolen = hh->framelen - hh->hdrlen - 2;
    8dd8:	1a9b      	subs	r3, r3, r2
    8dda:	3b02      	subs	r3, #2
    8ddc:	60a3      	str	r3, [r4, #8]
    8dde:	e7c5      	b.n	8d6c <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>
        hh->infolen = 0;
    8de0:	60a0      	str	r0, [r4, #8]
    8de2:	e7c3      	b.n	8d6c <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>

00008de4 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params>:


/* Fill param negotiation information IEC 62056-46 6.4.4.4.3.2 */
int
hdlc_fill_snrm_param(uint8_t *buf, uint32_t buflen, uint32_t *rsplen,
                     struct hdlc_snrm_params *hsp){
    8de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Based on example in IEC doc*/
    uint8_t param_template[] = {0x81, 0x80, 0x14,
                                0x05, 0x02, 0x01, 0x00,
                                0x06, 0x02, 0x01, 0x00,
                                0x07, 0x04, 0x00, 0x00, 0x00, 0x01,
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    8de6:	2617      	movs	r6, #23
                     struct hdlc_snrm_params *hsp){
    8de8:	b089      	sub	sp, #36	; 0x24
    8dea:	9101      	str	r1, [sp, #4]
    8dec:	0004      	movs	r4, r0
    8dee:	0017      	movs	r7, r2
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    8df0:	4914      	ldr	r1, [pc, #80]	; (8e44 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x60>)
    8df2:	0032      	movs	r2, r6
    8df4:	a802      	add	r0, sp, #8
                     struct hdlc_snrm_params *hsp){
    8df6:	001d      	movs	r5, r3
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    8df8:	f003 fe4b 	bl	ca92 <memcpy>

    if (!buf || buflen < sizeof(param_template)) {
        return 1;
    8dfc:	2001      	movs	r0, #1
    if (!buf || buflen < sizeof(param_template)) {
    8dfe:	2c00      	cmp	r4, #0
    8e00:	d01d      	beq.n	8e3e <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x5a>
    8e02:	9b01      	ldr	r3, [sp, #4]
    8e04:	2b16      	cmp	r3, #22
    8e06:	d91a      	bls.n	8e3e <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x5a>
    }

    memcpy(buf, param_template, sizeof(param_template));
    8e08:	0032      	movs	r2, r6
    8e0a:	a902      	add	r1, sp, #8
    8e0c:	0020      	movs	r0, r4
    8e0e:	f003 fe40 	bl	ca92 <memcpy>

    buf_wbe16(buf, 5, hsp->max_info_tx);
    8e12:	882a      	ldrh	r2, [r5, #0]
    8e14:	2105      	movs	r1, #5
    8e16:	0020      	movs	r0, r4
    8e18:	f000 f9f3 	bl	9202 <_Z9buf_wbe16Pvit>
    buf_wbe16(buf, 9, hsp->max_info_rx);
    8e1c:	88aa      	ldrh	r2, [r5, #4]
    8e1e:	2109      	movs	r1, #9
    8e20:	0020      	movs	r0, r4
    8e22:	f000 f9ee 	bl	9202 <_Z9buf_wbe16Pvit>

    buf_wbe32(buf, 13, hsp->window_tx);
    8e26:	68aa      	ldr	r2, [r5, #8]
    8e28:	210d      	movs	r1, #13
    8e2a:	0020      	movs	r0, r4
    8e2c:	f000 f9f3 	bl	9216 <_Z9buf_wbe32Pvim>
    buf_wbe32(buf, 19, hsp->window_rx);
    8e30:	0020      	movs	r0, r4
    8e32:	68ea      	ldr	r2, [r5, #12]
    8e34:	2113      	movs	r1, #19
    8e36:	f000 f9ee 	bl	9216 <_Z9buf_wbe32Pvim>

    *rsplen = sizeof(param_template);

    return 0;
    8e3a:	2000      	movs	r0, #0
    *rsplen = sizeof(param_template);
    8e3c:	603e      	str	r6, [r7, #0]
}
    8e3e:	b009      	add	sp, #36	; 0x24
    8e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e42:	46c0      	nop			; (mov r8, r8)
    8e44:	00012347 	.word	0x00012347

00008e48 <_Z15hdlc_send_framePKhS0_i>:
 *****************************************************************************
 *****************************************************************************
 */

int hdlc_send_frame( const uint8_t *hdr, const uint8_t *info, int infolen )
{
    8e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e4a:	0007      	movs	r7, r0
    8e4c:	b089      	sub	sp, #36	; 0x24
    8e4e:	000e      	movs	r6, r1
    8e50:	0014      	movs	r4, r2
    uint8_t fcs[2];    
    int rc;
    int i;

    /* attach info if present */
    if (info && infolen > 0) {
    8e52:	2900      	cmp	r1, #0
    8e54:	d00b      	beq.n	8e6e <_Z15hdlc_send_framePKhS0_i+0x26>
    8e56:	2a00      	cmp	r2, #0
    8e58:	dd09      	ble.n	8e6e <_Z15hdlc_send_framePKhS0_i+0x26>
        if ((rc = hdlc_frm_add_info(hdr, fhdr, info, infolen, fcs))) {
    8e5a:	ab05      	add	r3, sp, #20
    8e5c:	9300      	str	r3, [sp, #0]
    8e5e:	0013      	movs	r3, r2
    8e60:	000a      	movs	r2, r1
    8e62:	a906      	add	r1, sp, #24
    8e64:	f7ff ff34 	bl	8cd0 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_>
    8e68:	2800      	cmp	r0, #0
    8e6a:	d11a      	bne.n	8ea2 <_Z15hdlc_send_framePKhS0_i+0x5a>
            return -1;
        }
        hdr = fhdr;
    8e6c:	af06      	add	r7, sp, #24
    }

	// Log
    log_msg("HDLC send frame", hdr, HDLC_HDR_SIZE, 0);
    8e6e:	2207      	movs	r2, #7
    8e70:	0039      	movs	r1, r7
    8e72:	2300      	movs	r3, #0
    8e74:	4826      	ldr	r0, [pc, #152]	; (8f10 <_Z15hdlc_send_framePKhS0_i+0xc8>)
    8e76:	f7fb faf1 	bl	445c <_Z7log_msgPKcPKvii>

	// Send frame delimiter
    uart.write(fs);
    8e7a:	4d26      	ldr	r5, [pc, #152]	; (8f14 <_Z15hdlc_send_framePKhS0_i+0xcc>)
    8e7c:	217e      	movs	r1, #126	; 0x7e
    8e7e:	6828      	ldr	r0, [r5, #0]
    8e80:	6803      	ldr	r3, [r0, #0]
    8e82:	681b      	ldr	r3, [r3, #0]
    8e84:	4798      	blx	r3

	// Send header
    /* TODO: Is this a problem on Arduino? */
	/* Need to know why the first char is dropped on uart */
	rc = uart.write( hdr, HDLC_HDR_SIZE );
    8e86:	6828      	ldr	r0, [r5, #0]
    8e88:	0039      	movs	r1, r7
    8e8a:	6803      	ldr	r3, [r0, #0]
    8e8c:	2207      	movs	r2, #7
    8e8e:	685b      	ldr	r3, [r3, #4]
    8e90:	4798      	blx	r3
    8e92:	0007      	movs	r7, r0
    if (rc != HDLC_HDR_SIZE) 
    8e94:	2807      	cmp	r0, #7
    8e96:	d007      	beq.n	8ea8 <_Z15hdlc_send_framePKhS0_i+0x60>
	{
		dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_HDR_SIZE );
    8e98:	2207      	movs	r2, #7
    8e9a:	0010      	movs	r0, r2
    8e9c:	491e      	ldr	r1, [pc, #120]	; (8f18 <_Z15hdlc_send_framePKhS0_i+0xd0>)

		// Write CRC-16
        rc = uart.write(fcs, HDLC_CRC_SIZE);
		if (rc != HDLC_CRC_SIZE) 
		{
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_CRC_SIZE );
    8e9e:	f7fb fa7f 	bl	43a0 <_Z4dlogiPKcz>
            return -1;
    8ea2:	2001      	movs	r0, #1
    8ea4:	4240      	negs	r0, r0
    8ea6:	e031      	b.n	8f0c <_Z15hdlc_send_framePKhS0_i+0xc4>
    if (info && infolen > 0) 
    8ea8:	2e00      	cmp	r6, #0
    8eaa:	d023      	beq.n	8ef4 <_Z15hdlc_send_framePKhS0_i+0xac>
    8eac:	2c00      	cmp	r4, #0
    8eae:	dd21      	ble.n	8ef4 <_Z15hdlc_send_framePKhS0_i+0xac>
        rc = uart.write(info, infolen);
    8eb0:	6828      	ldr	r0, [r5, #0]
    8eb2:	0022      	movs	r2, r4
    8eb4:	6803      	ldr	r3, [r0, #0]
    8eb6:	0031      	movs	r1, r6
    8eb8:	685b      	ldr	r3, [r3, #4]
    8eba:	4798      	blx	r3
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", infolen );
    8ebc:	0022      	movs	r2, r4
		if (rc != infolen) 
    8ebe:	4284      	cmp	r4, r0
    8ec0:	d109      	bne.n	8ed6 <_Z15hdlc_send_framePKhS0_i+0x8e>
        rc = uart.write(fcs, HDLC_CRC_SIZE);
    8ec2:	6828      	ldr	r0, [r5, #0]
    8ec4:	2202      	movs	r2, #2
    8ec6:	6803      	ldr	r3, [r0, #0]
    8ec8:	a905      	add	r1, sp, #20
    8eca:	685b      	ldr	r3, [r3, #4]
    8ecc:	4798      	blx	r3
    8ece:	9003      	str	r0, [sp, #12]
		if (rc != HDLC_CRC_SIZE) 
    8ed0:	2802      	cmp	r0, #2
    8ed2:	d003      	beq.n	8edc <_Z15hdlc_send_framePKhS0_i+0x94>
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_CRC_SIZE );
    8ed4:	2202      	movs	r2, #2
    8ed6:	4910      	ldr	r1, [pc, #64]	; (8f18 <_Z15hdlc_send_framePKhS0_i+0xd0>)
    8ed8:	0038      	movs	r0, r7
    8eda:	e7e0      	b.n	8e9e <_Z15hdlc_send_framePKhS0_i+0x56>
			return -1;
		}

        log_msg(NULL, info, infolen, 0);    
    8edc:	2300      	movs	r3, #0
    8ede:	0022      	movs	r2, r4
    8ee0:	0018      	movs	r0, r3
    8ee2:	0031      	movs	r1, r6
    8ee4:	f7fb faba 	bl	445c <_Z7log_msgPKcPKvii>
        log_msg(NULL, fcs, HDLC_CRC_SIZE, 0);            
    8ee8:	2300      	movs	r3, #0
    8eea:	9a03      	ldr	r2, [sp, #12]
    8eec:	a905      	add	r1, sp, #20
    8eee:	0018      	movs	r0, r3
    8ef0:	f7fb fab4 	bl	445c <_Z7log_msgPKcPKvii>

    }

    /* closing with FS.  Not shown in log */
    uart.write(fs);
    8ef4:	6828      	ldr	r0, [r5, #0]
    8ef6:	217e      	movs	r1, #126	; 0x7e
    8ef8:	6803      	ldr	r3, [r0, #0]
    8efa:	681b      	ldr	r3, [r3, #0]
    8efc:	4798      	blx	r3
    log_msg(NULL, NULL, 0, 1);  /* EOL */
    8efe:	2200      	movs	r2, #0
    8f00:	2301      	movs	r3, #1
    8f02:	0010      	movs	r0, r2
    8f04:	0011      	movs	r1, r2
    8f06:	f7fb faa9 	bl	445c <_Z7log_msgPKcPKvii>

    return 0;
    8f0a:	2000      	movs	r0, #0
}
    8f0c:	b009      	add	sp, #36	; 0x24
    8f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f10:	0001235e 	.word	0x0001235e
    8f14:	20001e1c 	.word	0x20001e1c
    8f18:	0001236e 	.word	0x0001236e

00008f1c <_Z7hdlc_rxPhS_ii>:
	uint8_t * pPayload;
	uint16_t rx_len = 0;
	uint16_t frame_len = 0;
	struct hdlcux * pHUX = &hctx.hux;

    memset( pHUX, 0x0, sizeof(hctx.hux) );
    8f1c:	2286      	movs	r2, #134	; 0x86
{
    8f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f20:	b0c5      	sub	sp, #276	; 0x114
    8f22:	9002      	str	r0, [sp, #8]
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    8f24:	4885      	ldr	r0, [pc, #532]	; (913c <_Z7hdlc_rxPhS_ii+0x220>)
    8f26:	0052      	lsls	r2, r2, #1
{
    8f28:	9103      	str	r1, [sp, #12]
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    8f2a:	3010      	adds	r0, #16
    8f2c:	2100      	movs	r1, #0
{
    8f2e:	001d      	movs	r5, r3
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    8f30:	f003 fdca 	bl	cac8 <memset>

	// Read UART for maximum 200 ms
	uart.setTimeout(READ_BUF_TIMEOUT);	 
    8f34:	21c8      	movs	r1, #200	; 0xc8
    8f36:	4c82      	ldr	r4, [pc, #520]	; (9140 <_Z7hdlc_rxPhS_ii+0x224>)
    8f38:	0049      	lsls	r1, r1, #1
    8f3a:	6820      	ldr	r0, [r4, #0]
    8f3c:	f000 f947 	bl	91ce <_ZN6Stream10setTimeoutEm>

	// Wait for incoming HDLC frame
	elapsed = 0.0;
	timeout = (float) hdlc_frame_timeout;
    8f40:	0028      	movs	r0, r5
    8f42:	f001 fcf1 	bl	a928 <__aeabi_i2f>
	elapsed = 0.0;
    8f46:	2500      	movs	r5, #0
	timeout = (float) hdlc_frame_timeout;
    8f48:	1c06      	adds	r6, r0, #0
	while( elapsed < timeout ) 
    8f4a:	1c31      	adds	r1, r6, #0
    8f4c:	1c28      	adds	r0, r5, #0
    8f4e:	f000 fe17 	bl	9b80 <__aeabi_fcmplt>
    8f52:	2800      	cmp	r0, #0
    8f54:	d04e      	beq.n	8ff4 <_Z7hdlc_rxPhS_ii+0xd8>
	{
		// Check if there is nothing at the UART
		if (!uart.available())
    8f56:	6820      	ldr	r0, [r4, #0]
    8f58:	6803      	ldr	r3, [r0, #0]
    8f5a:	691b      	ldr	r3, [r3, #16]
    8f5c:	4798      	blx	r3
    8f5e:	2800      	cmp	r0, #0
    8f60:	d10f      	bne.n	8f82 <_Z7hdlc_rxPhS_ii+0x66>
		{
			// Check if it is time to send Observe response message
			// The function call returns a flag that determines if Observe is turned on
			obs_flag = do_observe();
    8f62:	f7fe fdb7 	bl	7ad4 <_Z10do_observev>
			
#if defined(ARDUINO_ARCH_SAMD)
			if (obs_flag)
    8f66:	2800      	cmp	r0, #0
    8f68:	d005      	beq.n	8f76 <_Z7hdlc_rxPhS_ii+0x5a>
			{
				// The reading of the time on SAMD takes about 5.5 ms
				// Adjust the variable accordingly
				elapsed += 5.5;
    8f6a:	4976      	ldr	r1, [pc, #472]	; (9144 <_Z7hdlc_rxPhS_ii+0x228>)
				continue;
			}
#endif
			// Sleep for 1 ms
			delay(MS_SLEEP);
			elapsed++;
    8f6c:	1c28      	adds	r0, r5, #0
    8f6e:	f000 fe65 	bl	9c3c <__aeabi_fadd>
    8f72:	1c05      	adds	r5, r0, #0
			continue;
    8f74:	e7e9      	b.n	8f4a <_Z7hdlc_rxPhS_ii+0x2e>
			delay(MS_SLEEP);
    8f76:	2001      	movs	r0, #1
    8f78:	f7f9 fbb2 	bl	26e0 <delay>
			elapsed++;
    8f7c:	21fe      	movs	r1, #254	; 0xfe
    8f7e:	0589      	lsls	r1, r1, #22
    8f80:	e7f4      	b.n	8f6c <_Z7hdlc_rxPhS_ii+0x50>

  double parseDouble(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR);
  // double version of parseInt

  size_t readBytes( char *buffer, size_t length); // read chars from stream into buffer
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
    8f82:	2580      	movs	r5, #128	; 0x80
    8f84:	4f70      	ldr	r7, [pc, #448]	; (9148 <_Z7hdlc_rxPhS_ii+0x22c>)
    8f86:	00ed      	lsls	r5, r5, #3
    8f88:	002a      	movs	r2, r5
    8f8a:	0039      	movs	r1, r7
    8f8c:	6820      	ldr	r0, [r4, #0]
    8f8e:	f000 f920 	bl	91d2 <_ZN6Stream9readBytesEPcj>
    8f92:	0004      	movs	r4, r0
			
		} // if
		
		// Read the HDLC frame until time-out
		cnt = uart.readBytes( UART_Buf, UART_MAX_BUF_LEN );
		sprintf( buffer, "readBytes() count: %d", cnt );
    8f94:	0002      	movs	r2, r0
    8f96:	496d      	ldr	r1, [pc, #436]	; (914c <_Z7hdlc_rxPhS_ii+0x230>)
    8f98:	a804      	add	r0, sp, #16
    8f9a:	f004 fe6b 	bl	dc74 <siprintf>
		dlog( LOG_INFO, buffer );
    8f9e:	a904      	add	r1, sp, #16
    8fa0:	2006      	movs	r0, #6
    8fa2:	f7fb f9fd 	bl	43a0 <_Z4dlogiPKcz>
		capture_dump( UART_Buf, cnt );
    8fa6:	0021      	movs	r1, r4
    8fa8:	0038      	movs	r0, r7
    8faa:	f7fb fae3 	bl	4574 <_Z12capture_dumpPhi>
		
		// Check if we received more bytes than there is space for in the receive buffer
		if ( cnt > UART_MAX_BUF_LEN )
    8fae:	42ac      	cmp	r4, r5
    8fb0:	d90d      	bls.n	8fce <_Z7hdlc_rxPhS_ii+0xb2>
		{
			// This should never happen as the readBytes method above already sets the limit
			dlog( LOG_DEBUG, "The UART receive buffer has overflown!" );
    8fb2:	4967      	ldr	r1, [pc, #412]	; (9150 <_Z7hdlc_rxPhS_ii+0x234>)
    8fb4:	2007      	movs	r0, #7
    8fb6:	f7fb f9f3 	bl	43a0 <_Z4dlogiPKcz>
			sprintf( buffer, "We read %d bytes and the max is %d bytes.", cnt, UART_MAX_BUF_LEN );
    8fba:	4966      	ldr	r1, [pc, #408]	; (9154 <_Z7hdlc_rxPhS_ii+0x238>)
    8fbc:	002b      	movs	r3, r5
    8fbe:	0022      	movs	r2, r4
    8fc0:	a804      	add	r0, sp, #16
    8fc2:	f004 fe57 	bl	dc74 <siprintf>
			dlog( LOG_DEBUG, buffer );
    8fc6:	a904      	add	r1, sp, #16
    8fc8:	2007      	movs	r0, #7
    8fca:	f7fb f9e9 	bl	43a0 <_Z4dlogiPKcz>
			
		} // if

		// Check for HDLC frame delimiters
		hctx.hu_state = HDLC_FRAME_BASE;
    8fce:	2300      	movs	r3, #0
    8fd0:	4e5a      	ldr	r6, [pc, #360]	; (913c <_Z7hdlc_rxPhS_ii+0x220>)
    8fd2:	7033      	strb	r3, [r6, #0]
		if (( UART_Buf[0] != HDLC_FLAG ) || ( UART_Buf[cnt-1] != HDLC_FLAG ))
    8fd4:	783b      	ldrb	r3, [r7, #0]
    8fd6:	2b7e      	cmp	r3, #126	; 0x7e
    8fd8:	d104      	bne.n	8fe4 <_Z7hdlc_rxPhS_ii+0xc8>
    8fda:	193b      	adds	r3, r7, r4
    8fdc:	3b01      	subs	r3, #1
    8fde:	781b      	ldrb	r3, [r3, #0]
    8fe0:	2b7e      	cmp	r3, #126	; 0x7e
    8fe2:	d009      	beq.n	8ff8 <_Z7hdlc_rxPhS_ii+0xdc>
		{
            ++hustats.hs_discard;  
    8fe4:	4a5c      	ldr	r2, [pc, #368]	; (9158 <_Z7hdlc_rxPhS_ii+0x23c>)
			dlog( LOG_DEBUG, "Missing HDLC flag(s)" );
    8fe6:	495d      	ldr	r1, [pc, #372]	; (915c <_Z7hdlc_rxPhS_ii+0x240>)
            ++hustats.hs_discard;  
    8fe8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    8fea:	3301      	adds	r3, #1
    8fec:	6353      	str	r3, [r2, #52]	; 0x34
		rc = hu_hdlc_parse_hdr( pHdr, HDLC_HDR_SIZE, &hctx.hu_pend );
		if (rc) 
		{
			/* header parsing error - need to flush */
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
			dlog( LOG_DEBUG, "Bad hdr - flush" );
    8fee:	2007      	movs	r0, #7
    8ff0:	f7fb f9d6 	bl	43a0 <_Z4dlogiPKcz>
			return 0;
    8ff4:	2500      	movs	r5, #0
    8ff6:	e04b      	b.n	9090 <_Z7hdlc_rxPhS_ii+0x174>
    if ((hdr[0] & 0xF0) != 0xA0) {  /* only Type 3 is supported */
    8ff8:	220f      	movs	r2, #15
    8ffa:	787b      	ldrb	r3, [r7, #1]
    8ffc:	4393      	bics	r3, r2
    8ffe:	2ba0      	cmp	r3, #160	; 0xa0
    9000:	d106      	bne.n	9010 <_Z7hdlc_rxPhS_ii+0xf4>
        if (crc16_validate(hdr, hdrlen)) {
    9002:	2107      	movs	r1, #7
    9004:	4856      	ldr	r0, [pc, #344]	; (9160 <_Z7hdlc_rxPhS_ii+0x244>)
    9006:	f000 f925 	bl	9254 <_Z14crc16_validatePKvj>
    900a:	1e05      	subs	r5, r0, #0
    900c:	d100      	bne.n	9010 <_Z7hdlc_rxPhS_ii+0xf4>
    900e:	e083      	b.n	9118 <_Z7hdlc_rxPhS_ii+0x1fc>
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    9010:	2304      	movs	r3, #4
			dlog( LOG_DEBUG, "Bad hdr - flush" );
    9012:	4954      	ldr	r1, [pc, #336]	; (9164 <_Z7hdlc_rxPhS_ii+0x248>)
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    9014:	7033      	strb	r3, [r6, #0]
    9016:	e7ea      	b.n	8fee <_Z7hdlc_rxPhS_ii+0xd2>
			
		} // if

		/* Header complete - always, working with fixed hdr size */
		/* Payload, if any, starts after the header */
		hctx.hu_state = HDLC_FRAME_HDR;
    9018:	2301      	movs	r3, #1
    901a:	7033      	strb	r3, [r6, #0]
		pHUX->h_infoidx = HDLC_HDR_SIZE;
    901c:	0033      	movs	r3, r6
    901e:	2207      	movs	r2, #7
    9020:	33ff      	adds	r3, #255	; 0xff
    9022:	769a      	strb	r2, [r3, #26]
    frmlen = buf_be16(hdr, 0) & 0x07FF;
    9024:	0029      	movs	r1, r5
    9026:	484e      	ldr	r0, [pc, #312]	; (9160 <_Z7hdlc_rxPhS_ii+0x244>)
    9028:	f000 f8e5 	bl	91f6 <_Z8buf_be16PKvi>
    902c:	0540      	lsls	r0, r0, #21
    902e:	0d40      	lsrs	r0, r0, #21
    9030:	9600      	str	r6, [sp, #0]
	if ( frmlen < hdrlen )
    9032:	2806      	cmp	r0, #6
    9034:	d800      	bhi.n	9038 <_Z7hdlc_rxPhS_ii+0x11c>
    9036:	e078      	b.n	912a <_Z7hdlc_rxPhS_ii+0x20e>
	paylen = frmlen - hdrlen;
    9038:	1fc3      	subs	r3, r0, #7
    if ( paylen && ( paylen < 3 ) )
    903a:	3808      	subs	r0, #8
	paylen = frmlen - hdrlen;
    903c:	b29b      	uxth	r3, r3
    if ( paylen && ( paylen < 3 ) )
    903e:	2801      	cmp	r0, #1
    9040:	d800      	bhi.n	9044 <_Z7hdlc_rxPhS_ii+0x128>
    9042:	e072      	b.n	912a <_Z7hdlc_rxPhS_ii+0x20e>
    *infolen = paylen;
    9044:	0032      	movs	r2, r6
    9046:	32fe      	adds	r2, #254	; 0xfe
    9048:	8393      	strh	r3, [r2, #28]
			dlog( LOG_DEBUG, "bad infolen - flush" );
		
		} // if
		
		// Check if the frame length equals the number of received bytes
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    904a:	9b00      	ldr	r3, [sp, #0]
    904c:	4a46      	ldr	r2, [pc, #280]	; (9168 <_Z7hdlc_rxPhS_ii+0x24c>)
    904e:	33ff      	adds	r3, #255	; 0xff
    9050:	7e9b      	ldrb	r3, [r3, #26]
    9052:	8b92      	ldrh	r2, [r2, #28]
		rx_len = cnt - 2;
    9054:	3c02      	subs	r4, #2
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    9056:	189b      	adds	r3, r3, r2
    9058:	b29b      	uxth	r3, r3
		rx_len = cnt - 2;
    905a:	b2a4      	uxth	r4, r4
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    905c:	9301      	str	r3, [sp, #4]
		if ( frame_len != rx_len )
    905e:	429c      	cmp	r4, r3
    9060:	d019      	beq.n	9096 <_Z7hdlc_rxPhS_ii+0x17a>
		{
			dlog( LOG_DEBUG, "The frame length doesn't match the number of received bytes" );
    9062:	4942      	ldr	r1, [pc, #264]	; (916c <_Z7hdlc_rxPhS_ii+0x250>)
    9064:	2007      	movs	r0, #7
    9066:	f7fb f99b 	bl	43a0 <_Z4dlogiPKcz>
			print("frame_len: ");	printnum(frame_len);	println("");
    906a:	4841      	ldr	r0, [pc, #260]	; (9170 <_Z7hdlc_rxPhS_ii+0x254>)
    906c:	f7fb fa40 	bl	44f0 <_Z5printPKc>
    9070:	9801      	ldr	r0, [sp, #4]
    9072:	f7fb fa69 	bl	4548 <_Z8printnumi>
    9076:	4e3f      	ldr	r6, [pc, #252]	; (9174 <_Z7hdlc_rxPhS_ii+0x258>)
    9078:	0030      	movs	r0, r6
    907a:	f7fb fa4f 	bl	451c <_Z7printlnPKc>
			print("rx_len:    ");	printnum(rx_len);		println("");
    907e:	483e      	ldr	r0, [pc, #248]	; (9178 <_Z7hdlc_rxPhS_ii+0x25c>)
    9080:	f7fb fa36 	bl	44f0 <_Z5printPKc>
    9084:	0020      	movs	r0, r4
    9086:	f7fb fa5f 	bl	4548 <_Z8printnumi>
    908a:	0030      	movs	r0, r6
    908c:	f7fb fa46 	bl	451c <_Z7printlnPKc>
    } // while

	// Time-out
	return 0;
	
} // hdlc_rx()
    9090:	0028      	movs	r0, r5
    9092:	b045      	add	sp, #276	; 0x114
    9094:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( crc16_validate( pHdr, frame_len )) 
    9096:	0021      	movs	r1, r4
    9098:	4831      	ldr	r0, [pc, #196]	; (9160 <_Z7hdlc_rxPhS_ii+0x244>)
    909a:	f000 f8db 	bl	9254 <_Z14crc16_validatePKvj>
    909e:	2800      	cmp	r0, #0
    90a0:	d001      	beq.n	90a6 <_Z7hdlc_rxPhS_ii+0x18a>
			dlog( LOG_DEBUG, "Discard frame - CRC error" );
    90a2:	4936      	ldr	r1, [pc, #216]	; (917c <_Z7hdlc_rxPhS_ii+0x260>)
    90a4:	e03d      	b.n	9122 <_Z7hdlc_rxPhS_ii+0x206>
		memcpy( hdr, pHdr, HDLC_HDR_SIZE );
    90a6:	2207      	movs	r2, #7
    90a8:	492d      	ldr	r1, [pc, #180]	; (9160 <_Z7hdlc_rxPhS_ii+0x244>)
    90aa:	9802      	ldr	r0, [sp, #8]
    90ac:	f003 fcf1 	bl	ca92 <memcpy>
		if (pHUX->h_infolen) 
    90b0:	4b2d      	ldr	r3, [pc, #180]	; (9168 <_Z7hdlc_rxPhS_ii+0x24c>)
    90b2:	8b9c      	ldrh	r4, [r3, #28]
    90b4:	2c00      	cmp	r4, #0
    90b6:	d02a      	beq.n	910e <_Z7hdlc_rxPhS_ii+0x1f2>
				dlog( LOG_DEBUG, "Discard frame - bad info len" );
    90b8:	4931      	ldr	r1, [pc, #196]	; (9180 <_Z7hdlc_rxPhS_ii+0x264>)
			if ( pHUX->h_infolen <= HDLC_CRC_SIZE ) 
    90ba:	2c02      	cmp	r4, #2
    90bc:	dc00      	bgt.n	90c0 <_Z7hdlc_rxPhS_ii+0x1a4>
    90be:	e796      	b.n	8fee <_Z7hdlc_rxPhS_ii+0xd2>
			if ( rx_len > max_payload_size )
    90c0:	4d30      	ldr	r5, [pc, #192]	; (9184 <_Z7hdlc_rxPhS_ii+0x268>)
			rx_len = pHUX->h_infolen - HDLC_CRC_SIZE;
    90c2:	3c02      	subs	r4, #2
			if ( rx_len > max_payload_size )
    90c4:	682b      	ldr	r3, [r5, #0]
			rx_len = pHUX->h_infolen - HDLC_CRC_SIZE;
    90c6:	b2a4      	uxth	r4, r4
			if ( rx_len > max_payload_size )
    90c8:	429c      	cmp	r4, r3
    90ca:	d90b      	bls.n	90e4 <_Z7hdlc_rxPhS_ii+0x1c8>
				dlog( LOG_DEBUG, "The HDLC payload is too large!" );
    90cc:	492e      	ldr	r1, [pc, #184]	; (9188 <_Z7hdlc_rxPhS_ii+0x26c>)
    90ce:	2007      	movs	r0, #7
    90d0:	f7fb f966 	bl	43a0 <_Z4dlogiPKcz>
				sprintf( buffer, "We got %d bytes and the max is %d bytes.", rx_len, max_payload_size );
    90d4:	492d      	ldr	r1, [pc, #180]	; (918c <_Z7hdlc_rxPhS_ii+0x270>)
    90d6:	682b      	ldr	r3, [r5, #0]
    90d8:	0022      	movs	r2, r4
    90da:	a804      	add	r0, sp, #16
    90dc:	f004 fdca 	bl	dc74 <siprintf>
				dlog( LOG_DEBUG, buffer );
    90e0:	a904      	add	r1, sp, #16
    90e2:	e784      	b.n	8fee <_Z7hdlc_rxPhS_ii+0xd2>
			memcpy( info, pPayload, rx_len );
    90e4:	0039      	movs	r1, r7
    90e6:	0022      	movs	r2, r4
    90e8:	3108      	adds	r1, #8
    90ea:	9803      	ldr	r0, [sp, #12]
    90ec:	f003 fcd1 	bl	ca92 <memcpy>
			hctx.hu_state = HDLC_FRAME_INFO;
    90f0:	2302      	movs	r3, #2
    90f2:	9a00      	ldr	r2, [sp, #0]
    90f4:	7013      	strb	r3, [r2, #0]
		hframerecv++;
    90f6:	4a26      	ldr	r2, [pc, #152]	; (9190 <_Z7hdlc_rxPhS_ii+0x274>)
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    90f8:	1c79      	adds	r1, r7, #1
		hframerecv++;
    90fa:	6813      	ldr	r3, [r2, #0]
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    90fc:	4825      	ldr	r0, [pc, #148]	; (9194 <_Z7hdlc_rxPhS_ii+0x278>)
		hframerecv++;
    90fe:	3301      	adds	r3, #1
    9100:	6013      	str	r3, [r2, #0]
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    9102:	2301      	movs	r3, #1
    9104:	9a01      	ldr	r2, [sp, #4]
    9106:	f7fb f9a9 	bl	445c <_Z7log_msgPKcPKvii>
		return 1;
    910a:	2501      	movs	r5, #1
    910c:	e7c0      	b.n	9090 <_Z7hdlc_rxPhS_ii+0x174>
			dlog( LOG_DEBUG, "Zero infolen" );
    910e:	4922      	ldr	r1, [pc, #136]	; (9198 <_Z7hdlc_rxPhS_ii+0x27c>)
    9110:	2007      	movs	r0, #7
    9112:	f7fb f945 	bl	43a0 <_Z4dlogiPKcz>
    9116:	e7ee      	b.n	90f6 <_Z7hdlc_rxPhS_ii+0x1da>
		if ( hctx.hu_pend == 2 ) 
    9118:	6873      	ldr	r3, [r6, #4]
    911a:	2b02      	cmp	r3, #2
    911c:	d000      	beq.n	9120 <_Z7hdlc_rxPhS_ii+0x204>
    911e:	e77b      	b.n	9018 <_Z7hdlc_rxPhS_ii+0xfc>
			dlog( LOG_DEBUG, "hctx.hu_pend == 2" );
    9120:	491e      	ldr	r1, [pc, #120]	; (919c <_Z7hdlc_rxPhS_ii+0x280>)
			dlog( LOG_DEBUG, "Discard frame - CRC error" );
    9122:	2007      	movs	r0, #7
    9124:	f7fb f93c 	bl	43a0 <_Z4dlogiPKcz>
			return 0;
    9128:	e7b2      	b.n	9090 <_Z7hdlc_rxPhS_ii+0x174>
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    912a:	2304      	movs	r3, #4
    912c:	9a00      	ldr	r2, [sp, #0]
			dlog( LOG_DEBUG, "bad infolen - flush" );
    912e:	491c      	ldr	r1, [pc, #112]	; (91a0 <_Z7hdlc_rxPhS_ii+0x284>)
    9130:	2007      	movs	r0, #7
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    9132:	7013      	strb	r3, [r2, #0]
			dlog( LOG_DEBUG, "bad infolen - flush" );
    9134:	f7fb f934 	bl	43a0 <_Z4dlogiPKcz>
    9138:	e787      	b.n	904a <_Z7hdlc_rxPhS_ii+0x12e>
    913a:	46c0      	nop			; (mov r8, r8)
    913c:	20001e20 	.word	0x20001e20
    9140:	20001e1c 	.word	0x20001e1c
    9144:	40b00000 	.word	0x40b00000
    9148:	20001a11 	.word	0x20001a11
    914c:	000123bb 	.word	0x000123bb
    9150:	000123d1 	.word	0x000123d1
    9154:	000123f8 	.word	0x000123f8
    9158:	20001f3c 	.word	0x20001f3c
    915c:	00012422 	.word	0x00012422
    9160:	20001a12 	.word	0x20001a12
    9164:	00012539 	.word	0x00012539
    9168:	20001f1e 	.word	0x20001f1e
    916c:	00012449 	.word	0x00012449
    9170:	00012485 	.word	0x00012485
    9174:	0001113e 	.word	0x0001113e
    9178:	00012491 	.word	0x00012491
    917c:	0001249d 	.word	0x0001249d
    9180:	000124b7 	.word	0x000124b7
    9184:	20001e18 	.word	0x20001e18
    9188:	000124d4 	.word	0x000124d4
    918c:	000124f3 	.word	0x000124f3
    9190:	20001e14 	.word	0x20001e14
    9194:	00012529 	.word	0x00012529
    9198:	0001251c 	.word	0x0001251c
    919c:	00012437 	.word	0x00012437
    91a0:	00012549 	.word	0x00012549

000091a4 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// protected method to read stream with timeout
int Stream::timedRead()
{
    91a4:	b510      	push	{r4, lr}
    91a6:	0004      	movs	r4, r0
  int c;
  _startMillis = millis();
    91a8:	f7f9 fa64 	bl	2674 <millis>
    91ac:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
    91ae:	6823      	ldr	r3, [r4, #0]
    91b0:	0020      	movs	r0, r4
    91b2:	695b      	ldr	r3, [r3, #20]
    91b4:	4798      	blx	r3
    if (c >= 0) return c;
    91b6:	2800      	cmp	r0, #0
    91b8:	da08      	bge.n	91cc <_ZN6Stream9timedReadEv+0x28>
  } while(millis() - _startMillis < _timeout);
    91ba:	f7f9 fa5b 	bl	2674 <millis>
    91be:	68e3      	ldr	r3, [r4, #12]
    91c0:	1ac0      	subs	r0, r0, r3
  do {
    91c2:	68a3      	ldr	r3, [r4, #8]
    91c4:	4298      	cmp	r0, r3
    91c6:	d3f2      	bcc.n	91ae <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
    91c8:	2001      	movs	r0, #1
    91ca:	4240      	negs	r0, r0
}
    91cc:	bd10      	pop	{r4, pc}

000091ce <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    91ce:	6081      	str	r1, [r0, #8]
}
    91d0:	4770      	bx	lr

000091d2 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    91d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    91d4:	000e      	movs	r6, r1
    91d6:	000c      	movs	r4, r1
    91d8:	9001      	str	r0, [sp, #4]
    91da:	188d      	adds	r5, r1, r2
    91dc:	1ba7      	subs	r7, r4, r6
  size_t count = 0;
  while (count < length) {
    91de:	42ac      	cmp	r4, r5
    91e0:	d007      	beq.n	91f2 <_ZN6Stream9readBytesEPcj+0x20>
    int c = timedRead();
    91e2:	9801      	ldr	r0, [sp, #4]
    91e4:	f7ff ffde 	bl	91a4 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    91e8:	2800      	cmp	r0, #0
    91ea:	db02      	blt.n	91f2 <_ZN6Stream9readBytesEPcj+0x20>
    *buffer++ = (char)c;
    91ec:	7020      	strb	r0, [r4, #0]
    91ee:	3401      	adds	r4, #1
  while (count < length) {
    91f0:	e7f4      	b.n	91dc <_ZN6Stream9readBytesEPcj+0xa>
    count++;
  }
  return count;
}
    91f2:	0038      	movs	r0, r7
    91f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000091f6 <_Z8buf_be16PKvi>:

uint16_t
buf_be16(const void *buf, int idx)
{
    const uint8_t *p = (const uint8_t *) buf;    
    return (p[idx + 1] | p[idx] << 8);
    91f6:	1843      	adds	r3, r0, r1
    91f8:	5c40      	ldrb	r0, [r0, r1]
    91fa:	785b      	ldrb	r3, [r3, #1]
    91fc:	0200      	lsls	r0, r0, #8
    91fe:	4318      	orrs	r0, r3
}
    9200:	4770      	bx	lr

00009202 <_Z9buf_wbe16Pvit>:
void
buf_wbe16(void *buf, int idx, uint16_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    9202:	1841      	adds	r1, r0, r1
    *p++ = val >> 8;
    9204:	1213      	asrs	r3, r2, #8
    9206:	700b      	strb	r3, [r1, #0]
    *p = val & 0xFF;
    9208:	704a      	strb	r2, [r1, #1]
	
} // buf_wbe16
    920a:	4770      	bx	lr

0000920c <_Z9buf_wle16Pvit>:
void
buf_wle16(void *buf, int idx, uint16_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    920c:	1841      	adds	r1, r0, r1
    *p++ = val & 0xFF;
    920e:	700a      	strb	r2, [r1, #0]
    *p = val >> 8;
    9210:	1212      	asrs	r2, r2, #8
    9212:	704a      	strb	r2, [r1, #1]
}
    9214:	4770      	bx	lr

00009216 <_Z9buf_wbe32Pvim>:
void
buf_wbe32(void *buf, int idx, uint32_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    9216:	1841      	adds	r1, r0, r1
    *p++ = val >> 24;
    9218:	0e13      	lsrs	r3, r2, #24
    921a:	700b      	strb	r3, [r1, #0]
    *p++ = (val >> 16) & 0xFF;
    921c:	0c13      	lsrs	r3, r2, #16
    921e:	704b      	strb	r3, [r1, #1]
    *p++ = (val >> 8) & 0xFF;
    9220:	0a13      	lsrs	r3, r2, #8
    9222:	708b      	strb	r3, [r1, #2]
    *p = val & 0xFF;
    9224:	70ca      	strb	r2, [r1, #3]
}
    9226:	4770      	bx	lr

00009228 <_Z10crc16_initv>:

uint16_t
crc16_init(void)
{
    return CRC16_INITIAL;
}
    9228:	4800      	ldr	r0, [pc, #0]	; (922c <_Z10crc16_initv+0x4>)
    922a:	4770      	bx	lr
    922c:	0000ffff 	.word	0x0000ffff

00009230 <_Z5crc16tPKvj>:

uint16_t
crc16(uint16_t crc, const  void *addr_v, unsigned int len)
{
    9230:	b530      	push	{r4, r5, lr}
    const uint8_t *addr = (const uint8_t *)addr_v;
    uint8_t ch;

    while (len--) {
        ch = *addr++;
        crc = (crc >> 8) ^ xmodem_crctable[(crc ^ ch) & 0xFF]; 
    9232:	25ff      	movs	r5, #255	; 0xff
    9234:	4c06      	ldr	r4, [pc, #24]	; (9250 <_Z5crc16tPKvj+0x20>)
    9236:	188a      	adds	r2, r1, r2
    while (len--) {
    9238:	4291      	cmp	r1, r2
    923a:	d008      	beq.n	924e <_Z5crc16tPKvj+0x1e>
        crc = (crc >> 8) ^ xmodem_crctable[(crc ^ ch) & 0xFF]; 
    923c:	780b      	ldrb	r3, [r1, #0]
    923e:	3101      	adds	r1, #1
    9240:	4043      	eors	r3, r0
    9242:	402b      	ands	r3, r5
    9244:	005b      	lsls	r3, r3, #1
    9246:	5b1b      	ldrh	r3, [r3, r4]
    9248:	1200      	asrs	r0, r0, #8
    924a:	4058      	eors	r0, r3
    while (len--) {
    924c:	e7f4      	b.n	9238 <_Z5crc16tPKvj+0x8>

    }
    return crc;
}    
    924e:	bd30      	pop	{r4, r5, pc}
    9250:	0001255e 	.word	0x0001255e

00009254 <_Z14crc16_validatePKvj>:
/* len includes the 2 bytes of CRC at the end of the buffer 
 * return 0 for OK, nonzero for error
 */
int
crc16_validate(const void *addr_v, unsigned int len)
{
    9254:	b510      	push	{r4, lr}
    9256:	000a      	movs	r2, r1
    return (crc16(CRC16_INITIAL, addr_v, len) != CRC16_FINAL);         
    9258:	0001      	movs	r1, r0
    925a:	4804      	ldr	r0, [pc, #16]	; (926c <_Z14crc16_validatePKvj+0x18>)
    925c:	f7ff ffe8 	bl	9230 <_Z5crc16tPKvj>
    9260:	4b03      	ldr	r3, [pc, #12]	; (9270 <_Z14crc16_validatePKvj+0x1c>)
    9262:	18c0      	adds	r0, r0, r3
    9264:	1e43      	subs	r3, r0, #1
    9266:	4198      	sbcs	r0, r3
}
    9268:	bd10      	pop	{r4, pc}
    926a:	46c0      	nop			; (mov r8, r8)
    926c:	0000ffff 	.word	0x0000ffff
    9270:	ffff0f48 	.word	0xffff0f48

00009274 <__aeabi_atexit>:
    9274:	000b      	movs	r3, r1
    9276:	b510      	push	{r4, lr}
    9278:	0001      	movs	r1, r0
    927a:	0018      	movs	r0, r3
    927c:	f003 faaa 	bl	c7d4 <__cxa_atexit>
    9280:	bd10      	pop	{r4, pc}
	...

00009284 <exp>:
    9284:	b5f0      	push	{r4, r5, r6, r7, lr}
    9286:	4647      	mov	r7, r8
    9288:	46ce      	mov	lr, r9
    928a:	b580      	push	{r7, lr}
    928c:	b08b      	sub	sp, #44	; 0x2c
    928e:	0004      	movs	r4, r0
    9290:	000d      	movs	r5, r1
    9292:	f000 f8cb 	bl	942c <__ieee754_exp>
    9296:	4b34      	ldr	r3, [pc, #208]	; (9368 <exp+0xe4>)
    9298:	0006      	movs	r6, r0
    929a:	4698      	mov	r8, r3
    929c:	781b      	ldrb	r3, [r3, #0]
    929e:	000f      	movs	r7, r1
    92a0:	b25b      	sxtb	r3, r3
    92a2:	3301      	adds	r3, #1
    92a4:	d038      	beq.n	9318 <exp+0x94>
    92a6:	0020      	movs	r0, r4
    92a8:	0029      	movs	r1, r5
    92aa:	f000 fa8d 	bl	97c8 <finite>
    92ae:	2800      	cmp	r0, #0
    92b0:	d032      	beq.n	9318 <exp+0x94>
    92b2:	4a2e      	ldr	r2, [pc, #184]	; (936c <exp+0xe8>)
    92b4:	4b2e      	ldr	r3, [pc, #184]	; (9370 <exp+0xec>)
    92b6:	0020      	movs	r0, r4
    92b8:	0029      	movs	r1, r5
    92ba:	f000 fc3b 	bl	9b34 <__aeabi_dcmpgt>
    92be:	4681      	mov	r9, r0
    92c0:	2800      	cmp	r0, #0
    92c2:	d130      	bne.n	9326 <exp+0xa2>
    92c4:	4a2b      	ldr	r2, [pc, #172]	; (9374 <exp+0xf0>)
    92c6:	4b2c      	ldr	r3, [pc, #176]	; (9378 <exp+0xf4>)
    92c8:	0020      	movs	r0, r4
    92ca:	0029      	movs	r1, r5
    92cc:	f000 fc1e 	bl	9b0c <__aeabi_dcmplt>
    92d0:	2800      	cmp	r0, #0
    92d2:	d021      	beq.n	9318 <exp+0x94>
    92d4:	2304      	movs	r3, #4
    92d6:	9300      	str	r3, [sp, #0]
    92d8:	4b28      	ldr	r3, [pc, #160]	; (937c <exp+0xf8>)
    92da:	2200      	movs	r2, #0
    92dc:	9301      	str	r3, [sp, #4]
    92de:	464b      	mov	r3, r9
    92e0:	9308      	str	r3, [sp, #32]
    92e2:	2300      	movs	r3, #0
    92e4:	9206      	str	r2, [sp, #24]
    92e6:	9307      	str	r3, [sp, #28]
    92e8:	4643      	mov	r3, r8
    92ea:	781b      	ldrb	r3, [r3, #0]
    92ec:	466e      	mov	r6, sp
    92ee:	b25b      	sxtb	r3, r3
    92f0:	9404      	str	r4, [sp, #16]
    92f2:	9505      	str	r5, [sp, #20]
    92f4:	9402      	str	r4, [sp, #8]
    92f6:	9503      	str	r5, [sp, #12]
    92f8:	2b02      	cmp	r3, #2
    92fa:	d030      	beq.n	935e <exp+0xda>
    92fc:	0030      	movs	r0, r6
    92fe:	f000 fa6d 	bl	97dc <matherr>
    9302:	2800      	cmp	r0, #0
    9304:	d02b      	beq.n	935e <exp+0xda>
    9306:	6a33      	ldr	r3, [r6, #32]
    9308:	2b00      	cmp	r3, #0
    930a:	d003      	beq.n	9314 <exp+0x90>
    930c:	f003 fa70 	bl	c7f0 <__errno>
    9310:	6a33      	ldr	r3, [r6, #32]
    9312:	6003      	str	r3, [r0, #0]
    9314:	69f7      	ldr	r7, [r6, #28]
    9316:	69b6      	ldr	r6, [r6, #24]
    9318:	0030      	movs	r0, r6
    931a:	0039      	movs	r1, r7
    931c:	b00b      	add	sp, #44	; 0x2c
    931e:	bc0c      	pop	{r2, r3}
    9320:	4690      	mov	r8, r2
    9322:	4699      	mov	r9, r3
    9324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9326:	2303      	movs	r3, #3
    9328:	9300      	str	r3, [sp, #0]
    932a:	4b14      	ldr	r3, [pc, #80]	; (937c <exp+0xf8>)
    932c:	466e      	mov	r6, sp
    932e:	9301      	str	r3, [sp, #4]
    9330:	2300      	movs	r3, #0
    9332:	9308      	str	r3, [sp, #32]
    9334:	4643      	mov	r3, r8
    9336:	781b      	ldrb	r3, [r3, #0]
    9338:	9404      	str	r4, [sp, #16]
    933a:	9505      	str	r5, [sp, #20]
    933c:	b25b      	sxtb	r3, r3
    933e:	9402      	str	r4, [sp, #8]
    9340:	9503      	str	r5, [sp, #12]
    9342:	2b00      	cmp	r3, #0
    9344:	d105      	bne.n	9352 <exp+0xce>
    9346:	22e0      	movs	r2, #224	; 0xe0
    9348:	4b0d      	ldr	r3, [pc, #52]	; (9380 <exp+0xfc>)
    934a:	0612      	lsls	r2, r2, #24
    934c:	9206      	str	r2, [sp, #24]
    934e:	9307      	str	r3, [sp, #28]
    9350:	e7d4      	b.n	92fc <exp+0x78>
    9352:	2000      	movs	r0, #0
    9354:	490b      	ldr	r1, [pc, #44]	; (9384 <exp+0x100>)
    9356:	9006      	str	r0, [sp, #24]
    9358:	9107      	str	r1, [sp, #28]
    935a:	2b02      	cmp	r3, #2
    935c:	d1ce      	bne.n	92fc <exp+0x78>
    935e:	f003 fa47 	bl	c7f0 <__errno>
    9362:	2322      	movs	r3, #34	; 0x22
    9364:	6003      	str	r3, [r0, #0]
    9366:	e7ce      	b.n	9306 <exp+0x82>
    9368:	200000b0 	.word	0x200000b0
    936c:	fefa39ef 	.word	0xfefa39ef
    9370:	40862e42 	.word	0x40862e42
    9374:	d52d3051 	.word	0xd52d3051
    9378:	c0874910 	.word	0xc0874910
    937c:	00012760 	.word	0x00012760
    9380:	47efffff 	.word	0x47efffff
    9384:	7ff00000 	.word	0x7ff00000

00009388 <sqrtf>:
    9388:	b5f0      	push	{r4, r5, r6, r7, lr}
    938a:	2500      	movs	r5, #0
    938c:	b08d      	sub	sp, #52	; 0x34
    938e:	1c04      	adds	r4, r0, #0
    9390:	f000 f9be 	bl	9710 <__ieee754_sqrtf>
    9394:	4b23      	ldr	r3, [pc, #140]	; (9424 <sqrtf+0x9c>)
    9396:	1c06      	adds	r6, r0, #0
    9398:	575d      	ldrsb	r5, [r3, r5]
    939a:	1c6b      	adds	r3, r5, #1
    939c:	d00b      	beq.n	93b6 <sqrtf+0x2e>
    939e:	1c21      	adds	r1, r4, #0
    93a0:	1c20      	adds	r0, r4, #0
    93a2:	f001 fa89 	bl	a8b8 <__aeabi_fcmpun>
    93a6:	1e07      	subs	r7, r0, #0
    93a8:	d105      	bne.n	93b6 <sqrtf+0x2e>
    93aa:	2100      	movs	r1, #0
    93ac:	1c20      	adds	r0, r4, #0
    93ae:	f000 fbe7 	bl	9b80 <__aeabi_fcmplt>
    93b2:	2800      	cmp	r0, #0
    93b4:	d102      	bne.n	93bc <sqrtf+0x34>
    93b6:	1c30      	adds	r0, r6, #0
    93b8:	b00d      	add	sp, #52	; 0x34
    93ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93bc:	2301      	movs	r3, #1
    93be:	9302      	str	r3, [sp, #8]
    93c0:	4b19      	ldr	r3, [pc, #100]	; (9428 <sqrtf+0xa0>)
    93c2:	1c20      	adds	r0, r4, #0
    93c4:	9303      	str	r3, [sp, #12]
    93c6:	970a      	str	r7, [sp, #40]	; 0x28
    93c8:	f003 f8ec 	bl	c5a4 <__aeabi_f2d>
    93cc:	2200      	movs	r2, #0
    93ce:	9006      	str	r0, [sp, #24]
    93d0:	9107      	str	r1, [sp, #28]
    93d2:	9004      	str	r0, [sp, #16]
    93d4:	9105      	str	r1, [sp, #20]
    93d6:	2300      	movs	r3, #0
    93d8:	2d00      	cmp	r5, #0
    93da:	d015      	beq.n	9408 <sqrtf+0x80>
    93dc:	0010      	movs	r0, r2
    93de:	0019      	movs	r1, r3
    93e0:	f001 fe48 	bl	b074 <__aeabi_ddiv>
    93e4:	9008      	str	r0, [sp, #32]
    93e6:	9109      	str	r1, [sp, #36]	; 0x24
    93e8:	2d02      	cmp	r5, #2
    93ea:	d10f      	bne.n	940c <sqrtf+0x84>
    93ec:	f003 fa00 	bl	c7f0 <__errno>
    93f0:	2321      	movs	r3, #33	; 0x21
    93f2:	6003      	str	r3, [r0, #0]
    93f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    93f6:	9301      	str	r3, [sp, #4]
    93f8:	2b00      	cmp	r3, #0
    93fa:	d10d      	bne.n	9418 <sqrtf+0x90>
    93fc:	9808      	ldr	r0, [sp, #32]
    93fe:	9909      	ldr	r1, [sp, #36]	; 0x24
    9400:	f003 f922 	bl	c648 <__aeabi_d2f>
    9404:	1c06      	adds	r6, r0, #0
    9406:	e7d6      	b.n	93b6 <sqrtf+0x2e>
    9408:	9208      	str	r2, [sp, #32]
    940a:	9309      	str	r3, [sp, #36]	; 0x24
    940c:	a802      	add	r0, sp, #8
    940e:	f000 f9e5 	bl	97dc <matherr>
    9412:	2800      	cmp	r0, #0
    9414:	d1ee      	bne.n	93f4 <sqrtf+0x6c>
    9416:	e7e9      	b.n	93ec <sqrtf+0x64>
    9418:	f003 f9ea 	bl	c7f0 <__errno>
    941c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    941e:	9301      	str	r3, [sp, #4]
    9420:	6003      	str	r3, [r0, #0]
    9422:	e7eb      	b.n	93fc <sqrtf+0x74>
    9424:	200000b0 	.word	0x200000b0
    9428:	00012764 	.word	0x00012764

0000942c <__ieee754_exp>:
    942c:	b5f0      	push	{r4, r5, r6, r7, lr}
    942e:	46d6      	mov	lr, sl
    9430:	b500      	push	{lr}
    9432:	004b      	lsls	r3, r1, #1
    9434:	000e      	movs	r6, r1
    9436:	0fcc      	lsrs	r4, r1, #31
    9438:	4995      	ldr	r1, [pc, #596]	; (9690 <__ieee754_exp+0x264>)
    943a:	b084      	sub	sp, #16
    943c:	0007      	movs	r7, r0
    943e:	085b      	lsrs	r3, r3, #1
    9440:	428b      	cmp	r3, r1
    9442:	d90e      	bls.n	9462 <__ieee754_exp+0x36>
    9444:	4993      	ldr	r1, [pc, #588]	; (9694 <__ieee754_exp+0x268>)
    9446:	428b      	cmp	r3, r1
    9448:	d800      	bhi.n	944c <__ieee754_exp+0x20>
    944a:	e084      	b.n	9556 <__ieee754_exp+0x12a>
    944c:	0332      	lsls	r2, r6, #12
    944e:	0b12      	lsrs	r2, r2, #12
    9450:	4302      	orrs	r2, r0
    9452:	d000      	beq.n	9456 <__ieee754_exp+0x2a>
    9454:	e0f7      	b.n	9646 <__ieee754_exp+0x21a>
    9456:	0031      	movs	r1, r6
    9458:	2c00      	cmp	r4, #0
    945a:	d078      	beq.n	954e <__ieee754_exp+0x122>
    945c:	2000      	movs	r0, #0
    945e:	2100      	movs	r1, #0
    9460:	e075      	b.n	954e <__ieee754_exp+0x122>
    9462:	4a8d      	ldr	r2, [pc, #564]	; (9698 <__ieee754_exp+0x26c>)
    9464:	4293      	cmp	r3, r2
    9466:	d900      	bls.n	946a <__ieee754_exp+0x3e>
    9468:	e0b6      	b.n	95d8 <__ieee754_exp+0x1ac>
    946a:	4a8c      	ldr	r2, [pc, #560]	; (969c <__ieee754_exp+0x270>)
    946c:	4293      	cmp	r3, r2
    946e:	d800      	bhi.n	9472 <__ieee754_exp+0x46>
    9470:	e0ca      	b.n	9608 <__ieee754_exp+0x1dc>
    9472:	2300      	movs	r3, #0
    9474:	469a      	mov	sl, r3
    9476:	003a      	movs	r2, r7
    9478:	0033      	movs	r3, r6
    947a:	0038      	movs	r0, r7
    947c:	0031      	movs	r1, r6
    947e:	f002 fa2d 	bl	b8dc <__aeabi_dmul>
    9482:	0004      	movs	r4, r0
    9484:	000d      	movs	r5, r1
    9486:	4a86      	ldr	r2, [pc, #536]	; (96a0 <__ieee754_exp+0x274>)
    9488:	4b86      	ldr	r3, [pc, #536]	; (96a4 <__ieee754_exp+0x278>)
    948a:	f002 fa27 	bl	b8dc <__aeabi_dmul>
    948e:	4a86      	ldr	r2, [pc, #536]	; (96a8 <__ieee754_exp+0x27c>)
    9490:	4b86      	ldr	r3, [pc, #536]	; (96ac <__ieee754_exp+0x280>)
    9492:	f002 fca3 	bl	bddc <__aeabi_dsub>
    9496:	0022      	movs	r2, r4
    9498:	002b      	movs	r3, r5
    949a:	f002 fa1f 	bl	b8dc <__aeabi_dmul>
    949e:	4a84      	ldr	r2, [pc, #528]	; (96b0 <__ieee754_exp+0x284>)
    94a0:	4b84      	ldr	r3, [pc, #528]	; (96b4 <__ieee754_exp+0x288>)
    94a2:	f001 fad7 	bl	aa54 <__aeabi_dadd>
    94a6:	0022      	movs	r2, r4
    94a8:	002b      	movs	r3, r5
    94aa:	f002 fa17 	bl	b8dc <__aeabi_dmul>
    94ae:	4a82      	ldr	r2, [pc, #520]	; (96b8 <__ieee754_exp+0x28c>)
    94b0:	4b82      	ldr	r3, [pc, #520]	; (96bc <__ieee754_exp+0x290>)
    94b2:	f002 fc93 	bl	bddc <__aeabi_dsub>
    94b6:	0022      	movs	r2, r4
    94b8:	002b      	movs	r3, r5
    94ba:	f002 fa0f 	bl	b8dc <__aeabi_dmul>
    94be:	4a80      	ldr	r2, [pc, #512]	; (96c0 <__ieee754_exp+0x294>)
    94c0:	4b80      	ldr	r3, [pc, #512]	; (96c4 <__ieee754_exp+0x298>)
    94c2:	f001 fac7 	bl	aa54 <__aeabi_dadd>
    94c6:	0022      	movs	r2, r4
    94c8:	002b      	movs	r3, r5
    94ca:	f002 fa07 	bl	b8dc <__aeabi_dmul>
    94ce:	0002      	movs	r2, r0
    94d0:	000b      	movs	r3, r1
    94d2:	0038      	movs	r0, r7
    94d4:	0031      	movs	r1, r6
    94d6:	f002 fc81 	bl	bddc <__aeabi_dsub>
    94da:	4653      	mov	r3, sl
    94dc:	0004      	movs	r4, r0
    94de:	000d      	movs	r5, r1
    94e0:	0002      	movs	r2, r0
    94e2:	2b00      	cmp	r3, #0
    94e4:	d100      	bne.n	94e8 <__ieee754_exp+0xbc>
    94e6:	e0b4      	b.n	9652 <__ieee754_exp+0x226>
    94e8:	000b      	movs	r3, r1
    94ea:	0038      	movs	r0, r7
    94ec:	0031      	movs	r1, r6
    94ee:	f002 f9f5 	bl	b8dc <__aeabi_dmul>
    94f2:	000f      	movs	r7, r1
    94f4:	2180      	movs	r1, #128	; 0x80
    94f6:	0006      	movs	r6, r0
    94f8:	0022      	movs	r2, r4
    94fa:	002b      	movs	r3, r5
    94fc:	2000      	movs	r0, #0
    94fe:	05c9      	lsls	r1, r1, #23
    9500:	f002 fc6c 	bl	bddc <__aeabi_dsub>
    9504:	0002      	movs	r2, r0
    9506:	000b      	movs	r3, r1
    9508:	0030      	movs	r0, r6
    950a:	0039      	movs	r1, r7
    950c:	f001 fdb2 	bl	b074 <__aeabi_ddiv>
    9510:	0002      	movs	r2, r0
    9512:	000b      	movs	r3, r1
    9514:	9802      	ldr	r0, [sp, #8]
    9516:	9903      	ldr	r1, [sp, #12]
    9518:	f002 fc60 	bl	bddc <__aeabi_dsub>
    951c:	9a00      	ldr	r2, [sp, #0]
    951e:	9b01      	ldr	r3, [sp, #4]
    9520:	f002 fc5c 	bl	bddc <__aeabi_dsub>
    9524:	000b      	movs	r3, r1
    9526:	0002      	movs	r2, r0
    9528:	4967      	ldr	r1, [pc, #412]	; (96c8 <__ieee754_exp+0x29c>)
    952a:	2000      	movs	r0, #0
    952c:	f002 fc56 	bl	bddc <__aeabi_dsub>
    9530:	4b66      	ldr	r3, [pc, #408]	; (96cc <__ieee754_exp+0x2a0>)
    9532:	459a      	cmp	sl, r3
    9534:	db00      	blt.n	9538 <__ieee754_exp+0x10c>
    9536:	e07a      	b.n	962e <__ieee754_exp+0x202>
    9538:	24fa      	movs	r4, #250	; 0xfa
    953a:	00a4      	lsls	r4, r4, #2
    953c:	4454      	add	r4, sl
    953e:	0524      	lsls	r4, r4, #20
    9540:	1863      	adds	r3, r4, r1
    9542:	0019      	movs	r1, r3
    9544:	23b8      	movs	r3, #184	; 0xb8
    9546:	2200      	movs	r2, #0
    9548:	045b      	lsls	r3, r3, #17
    954a:	f002 f9c7 	bl	b8dc <__aeabi_dmul>
    954e:	b004      	add	sp, #16
    9550:	bc04      	pop	{r2}
    9552:	4692      	mov	sl, r2
    9554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9556:	4a5e      	ldr	r2, [pc, #376]	; (96d0 <__ieee754_exp+0x2a4>)
    9558:	4b5e      	ldr	r3, [pc, #376]	; (96d4 <__ieee754_exp+0x2a8>)
    955a:	0031      	movs	r1, r6
    955c:	f000 faea 	bl	9b34 <__aeabi_dcmpgt>
    9560:	2800      	cmp	r0, #0
    9562:	d169      	bne.n	9638 <__ieee754_exp+0x20c>
    9564:	4a5c      	ldr	r2, [pc, #368]	; (96d8 <__ieee754_exp+0x2ac>)
    9566:	4b5d      	ldr	r3, [pc, #372]	; (96dc <__ieee754_exp+0x2b0>)
    9568:	0038      	movs	r0, r7
    956a:	0031      	movs	r1, r6
    956c:	f000 face 	bl	9b0c <__aeabi_dcmplt>
    9570:	2800      	cmp	r0, #0
    9572:	d000      	beq.n	9576 <__ieee754_exp+0x14a>
    9574:	e772      	b.n	945c <__ieee754_exp+0x30>
    9576:	4b5a      	ldr	r3, [pc, #360]	; (96e0 <__ieee754_exp+0x2b4>)
    9578:	00e4      	lsls	r4, r4, #3
    957a:	191c      	adds	r4, r3, r4
    957c:	4a59      	ldr	r2, [pc, #356]	; (96e4 <__ieee754_exp+0x2b8>)
    957e:	4b5a      	ldr	r3, [pc, #360]	; (96e8 <__ieee754_exp+0x2bc>)
    9580:	0038      	movs	r0, r7
    9582:	0031      	movs	r1, r6
    9584:	f002 f9aa 	bl	b8dc <__aeabi_dmul>
    9588:	6822      	ldr	r2, [r4, #0]
    958a:	6863      	ldr	r3, [r4, #4]
    958c:	f001 fa62 	bl	aa54 <__aeabi_dadd>
    9590:	f002 ff5a 	bl	c448 <__aeabi_d2iz>
    9594:	4682      	mov	sl, r0
    9596:	f002 ff8b 	bl	c4b0 <__aeabi_i2d>
    959a:	4a54      	ldr	r2, [pc, #336]	; (96ec <__ieee754_exp+0x2c0>)
    959c:	4b54      	ldr	r3, [pc, #336]	; (96f0 <__ieee754_exp+0x2c4>)
    959e:	0004      	movs	r4, r0
    95a0:	000d      	movs	r5, r1
    95a2:	f002 f99b 	bl	b8dc <__aeabi_dmul>
    95a6:	0002      	movs	r2, r0
    95a8:	000b      	movs	r3, r1
    95aa:	0038      	movs	r0, r7
    95ac:	0031      	movs	r1, r6
    95ae:	f002 fc15 	bl	bddc <__aeabi_dsub>
    95b2:	4a50      	ldr	r2, [pc, #320]	; (96f4 <__ieee754_exp+0x2c8>)
    95b4:	9000      	str	r0, [sp, #0]
    95b6:	9101      	str	r1, [sp, #4]
    95b8:	4b4f      	ldr	r3, [pc, #316]	; (96f8 <__ieee754_exp+0x2cc>)
    95ba:	0020      	movs	r0, r4
    95bc:	0029      	movs	r1, r5
    95be:	f002 f98d 	bl	b8dc <__aeabi_dmul>
    95c2:	9002      	str	r0, [sp, #8]
    95c4:	9103      	str	r1, [sp, #12]
    95c6:	9a02      	ldr	r2, [sp, #8]
    95c8:	9b03      	ldr	r3, [sp, #12]
    95ca:	9800      	ldr	r0, [sp, #0]
    95cc:	9901      	ldr	r1, [sp, #4]
    95ce:	f002 fc05 	bl	bddc <__aeabi_dsub>
    95d2:	0007      	movs	r7, r0
    95d4:	000e      	movs	r6, r1
    95d6:	e74e      	b.n	9476 <__ieee754_exp+0x4a>
    95d8:	4a48      	ldr	r2, [pc, #288]	; (96fc <__ieee754_exp+0x2d0>)
    95da:	4293      	cmp	r3, r2
    95dc:	d8cb      	bhi.n	9576 <__ieee754_exp+0x14a>
    95de:	4b48      	ldr	r3, [pc, #288]	; (9700 <__ieee754_exp+0x2d4>)
    95e0:	00e5      	lsls	r5, r4, #3
    95e2:	195b      	adds	r3, r3, r5
    95e4:	681a      	ldr	r2, [r3, #0]
    95e6:	685b      	ldr	r3, [r3, #4]
    95e8:	0031      	movs	r1, r6
    95ea:	f002 fbf7 	bl	bddc <__aeabi_dsub>
    95ee:	4b45      	ldr	r3, [pc, #276]	; (9704 <__ieee754_exp+0x2d8>)
    95f0:	9000      	str	r0, [sp, #0]
    95f2:	9101      	str	r1, [sp, #4]
    95f4:	195b      	adds	r3, r3, r5
    95f6:	681a      	ldr	r2, [r3, #0]
    95f8:	685b      	ldr	r3, [r3, #4]
    95fa:	9202      	str	r2, [sp, #8]
    95fc:	9303      	str	r3, [sp, #12]
    95fe:	2301      	movs	r3, #1
    9600:	1b1b      	subs	r3, r3, r4
    9602:	1b1b      	subs	r3, r3, r4
    9604:	469a      	mov	sl, r3
    9606:	e7de      	b.n	95c6 <__ieee754_exp+0x19a>
    9608:	4a3f      	ldr	r2, [pc, #252]	; (9708 <__ieee754_exp+0x2dc>)
    960a:	4b40      	ldr	r3, [pc, #256]	; (970c <__ieee754_exp+0x2e0>)
    960c:	0031      	movs	r1, r6
    960e:	f001 fa21 	bl	aa54 <__aeabi_dadd>
    9612:	2200      	movs	r2, #0
    9614:	4b2c      	ldr	r3, [pc, #176]	; (96c8 <__ieee754_exp+0x29c>)
    9616:	f000 fa8d 	bl	9b34 <__aeabi_dcmpgt>
    961a:	2800      	cmp	r0, #0
    961c:	d100      	bne.n	9620 <__ieee754_exp+0x1f4>
    961e:	e728      	b.n	9472 <__ieee754_exp+0x46>
    9620:	2200      	movs	r2, #0
    9622:	4b29      	ldr	r3, [pc, #164]	; (96c8 <__ieee754_exp+0x29c>)
    9624:	0038      	movs	r0, r7
    9626:	0031      	movs	r1, r6
    9628:	f001 fa14 	bl	aa54 <__aeabi_dadd>
    962c:	e78f      	b.n	954e <__ieee754_exp+0x122>
    962e:	4654      	mov	r4, sl
    9630:	0524      	lsls	r4, r4, #20
    9632:	1863      	adds	r3, r4, r1
    9634:	0019      	movs	r1, r3
    9636:	e78a      	b.n	954e <__ieee754_exp+0x122>
    9638:	4a33      	ldr	r2, [pc, #204]	; (9708 <__ieee754_exp+0x2dc>)
    963a:	4b34      	ldr	r3, [pc, #208]	; (970c <__ieee754_exp+0x2e0>)
    963c:	0010      	movs	r0, r2
    963e:	0019      	movs	r1, r3
    9640:	f002 f94c 	bl	b8dc <__aeabi_dmul>
    9644:	e783      	b.n	954e <__ieee754_exp+0x122>
    9646:	0002      	movs	r2, r0
    9648:	0033      	movs	r3, r6
    964a:	0031      	movs	r1, r6
    964c:	f001 fa02 	bl	aa54 <__aeabi_dadd>
    9650:	e77d      	b.n	954e <__ieee754_exp+0x122>
    9652:	000b      	movs	r3, r1
    9654:	0038      	movs	r0, r7
    9656:	0031      	movs	r1, r6
    9658:	f002 f940 	bl	b8dc <__aeabi_dmul>
    965c:	2380      	movs	r3, #128	; 0x80
    965e:	9000      	str	r0, [sp, #0]
    9660:	9101      	str	r1, [sp, #4]
    9662:	2200      	movs	r2, #0
    9664:	05db      	lsls	r3, r3, #23
    9666:	0020      	movs	r0, r4
    9668:	0029      	movs	r1, r5
    966a:	f002 fbb7 	bl	bddc <__aeabi_dsub>
    966e:	0002      	movs	r2, r0
    9670:	000b      	movs	r3, r1
    9672:	9800      	ldr	r0, [sp, #0]
    9674:	9901      	ldr	r1, [sp, #4]
    9676:	f001 fcfd 	bl	b074 <__aeabi_ddiv>
    967a:	003a      	movs	r2, r7
    967c:	0033      	movs	r3, r6
    967e:	f002 fbad 	bl	bddc <__aeabi_dsub>
    9682:	0002      	movs	r2, r0
    9684:	000b      	movs	r3, r1
    9686:	2000      	movs	r0, #0
    9688:	490f      	ldr	r1, [pc, #60]	; (96c8 <__ieee754_exp+0x29c>)
    968a:	f002 fba7 	bl	bddc <__aeabi_dsub>
    968e:	e75e      	b.n	954e <__ieee754_exp+0x122>
    9690:	40862e41 	.word	0x40862e41
    9694:	7fefffff 	.word	0x7fefffff
    9698:	3fd62e42 	.word	0x3fd62e42
    969c:	3e2fffff 	.word	0x3e2fffff
    96a0:	72bea4d0 	.word	0x72bea4d0
    96a4:	3e663769 	.word	0x3e663769
    96a8:	c5d26bf1 	.word	0xc5d26bf1
    96ac:	3ebbbd41 	.word	0x3ebbbd41
    96b0:	af25de2c 	.word	0xaf25de2c
    96b4:	3f11566a 	.word	0x3f11566a
    96b8:	16bebd93 	.word	0x16bebd93
    96bc:	3f66c16c 	.word	0x3f66c16c
    96c0:	5555553e 	.word	0x5555553e
    96c4:	3fc55555 	.word	0x3fc55555
    96c8:	3ff00000 	.word	0x3ff00000
    96cc:	fffffc03 	.word	0xfffffc03
    96d0:	fefa39ef 	.word	0xfefa39ef
    96d4:	40862e42 	.word	0x40862e42
    96d8:	d52d3051 	.word	0xd52d3051
    96dc:	c0874910 	.word	0xc0874910
    96e0:	00012770 	.word	0x00012770
    96e4:	652b82fe 	.word	0x652b82fe
    96e8:	3ff71547 	.word	0x3ff71547
    96ec:	fee00000 	.word	0xfee00000
    96f0:	3fe62e42 	.word	0x3fe62e42
    96f4:	35793c76 	.word	0x35793c76
    96f8:	3dea39ef 	.word	0x3dea39ef
    96fc:	3ff0a2b1 	.word	0x3ff0a2b1
    9700:	00012780 	.word	0x00012780
    9704:	00012790 	.word	0x00012790
    9708:	8800759c 	.word	0x8800759c
    970c:	7e37e43c 	.word	0x7e37e43c

00009710 <__ieee754_sqrtf>:
    9710:	492b      	ldr	r1, [pc, #172]	; (97c0 <__ieee754_sqrtf+0xb0>)
    9712:	0042      	lsls	r2, r0, #1
    9714:	b570      	push	{r4, r5, r6, lr}
    9716:	0003      	movs	r3, r0
    9718:	1c04      	adds	r4, r0, #0
    971a:	0852      	lsrs	r2, r2, #1
    971c:	428a      	cmp	r2, r1
    971e:	d83a      	bhi.n	9796 <__ieee754_sqrtf+0x86>
    9720:	2a00      	cmp	r2, #0
    9722:	d037      	beq.n	9794 <__ieee754_sqrtf+0x84>
    9724:	2800      	cmp	r0, #0
    9726:	db3f      	blt.n	97a8 <__ieee754_sqrtf+0x98>
    9728:	4926      	ldr	r1, [pc, #152]	; (97c4 <__ieee754_sqrtf+0xb4>)
    972a:	15c6      	asrs	r6, r0, #23
    972c:	428a      	cmp	r2, r1
    972e:	d80b      	bhi.n	9748 <__ieee754_sqrtf+0x38>
    9730:	2080      	movs	r0, #128	; 0x80
    9732:	0400      	lsls	r0, r0, #16
    9734:	4220      	tst	r0, r4
    9736:	d13e      	bne.n	97b6 <__ieee754_sqrtf+0xa6>
    9738:	2200      	movs	r2, #0
    973a:	e000      	b.n	973e <__ieee754_sqrtf+0x2e>
    973c:	000a      	movs	r2, r1
    973e:	005b      	lsls	r3, r3, #1
    9740:	1c51      	adds	r1, r2, #1
    9742:	4203      	tst	r3, r0
    9744:	d0fa      	beq.n	973c <__ieee754_sqrtf+0x2c>
    9746:	1ab6      	subs	r6, r6, r2
    9748:	025b      	lsls	r3, r3, #9
    974a:	0a5a      	lsrs	r2, r3, #9
    974c:	2380      	movs	r3, #128	; 0x80
    974e:	3e7f      	subs	r6, #127	; 0x7f
    9750:	041b      	lsls	r3, r3, #16
    9752:	4313      	orrs	r3, r2
    9754:	07f2      	lsls	r2, r6, #31
    9756:	d425      	bmi.n	97a4 <__ieee754_sqrtf+0x94>
    9758:	2280      	movs	r2, #128	; 0x80
    975a:	1070      	asrs	r0, r6, #1
    975c:	2119      	movs	r1, #25
    975e:	2600      	movs	r6, #0
    9760:	2500      	movs	r5, #0
    9762:	005b      	lsls	r3, r3, #1
    9764:	0452      	lsls	r2, r2, #17
    9766:	18ac      	adds	r4, r5, r2
    9768:	429c      	cmp	r4, r3
    976a:	dc02      	bgt.n	9772 <__ieee754_sqrtf+0x62>
    976c:	18a5      	adds	r5, r4, r2
    976e:	1b1b      	subs	r3, r3, r4
    9770:	18b6      	adds	r6, r6, r2
    9772:	3901      	subs	r1, #1
    9774:	005b      	lsls	r3, r3, #1
    9776:	0852      	lsrs	r2, r2, #1
    9778:	2900      	cmp	r1, #0
    977a:	d1f4      	bne.n	9766 <__ieee754_sqrtf+0x56>
    977c:	2b00      	cmp	r3, #0
    977e:	d002      	beq.n	9786 <__ieee754_sqrtf+0x76>
    9780:	2301      	movs	r3, #1
    9782:	3601      	adds	r6, #1
    9784:	439e      	bics	r6, r3
    9786:	23fc      	movs	r3, #252	; 0xfc
    9788:	059b      	lsls	r3, r3, #22
    978a:	469c      	mov	ip, r3
    978c:	1076      	asrs	r6, r6, #1
    978e:	4466      	add	r6, ip
    9790:	05c0      	lsls	r0, r0, #23
    9792:	1980      	adds	r0, r0, r6
    9794:	bd70      	pop	{r4, r5, r6, pc}
    9796:	1c01      	adds	r1, r0, #0
    9798:	f000 fdd2 	bl	a340 <__aeabi_fmul>
    979c:	1c21      	adds	r1, r4, #0
    979e:	f000 fa4d 	bl	9c3c <__aeabi_fadd>
    97a2:	e7f7      	b.n	9794 <__ieee754_sqrtf+0x84>
    97a4:	005b      	lsls	r3, r3, #1
    97a6:	e7d7      	b.n	9758 <__ieee754_sqrtf+0x48>
    97a8:	1c01      	adds	r1, r0, #0
    97aa:	f000 fee9 	bl	a580 <__aeabi_fsub>
    97ae:	1c01      	adds	r1, r0, #0
    97b0:	f000 fbd6 	bl	9f60 <__aeabi_fdiv>
    97b4:	e7ee      	b.n	9794 <__ieee754_sqrtf+0x84>
    97b6:	2201      	movs	r2, #1
    97b8:	4252      	negs	r2, r2
    97ba:	1ab6      	subs	r6, r6, r2
    97bc:	e7c4      	b.n	9748 <__ieee754_sqrtf+0x38>
    97be:	46c0      	nop			; (mov r8, r8)
    97c0:	7f7fffff 	.word	0x7f7fffff
    97c4:	007fffff 	.word	0x007fffff

000097c8 <finite>:
    97c8:	4b03      	ldr	r3, [pc, #12]	; (97d8 <finite+0x10>)
    97ca:	0048      	lsls	r0, r1, #1
    97cc:	469c      	mov	ip, r3
    97ce:	0840      	lsrs	r0, r0, #1
    97d0:	4460      	add	r0, ip
    97d2:	0fc0      	lsrs	r0, r0, #31
    97d4:	4770      	bx	lr
    97d6:	46c0      	nop			; (mov r8, r8)
    97d8:	80100000 	.word	0x80100000

000097dc <matherr>:
    97dc:	2000      	movs	r0, #0
    97de:	4770      	bx	lr

000097e0 <__gnu_thumb1_case_uqi>:
    97e0:	b402      	push	{r1}
    97e2:	4671      	mov	r1, lr
    97e4:	0849      	lsrs	r1, r1, #1
    97e6:	0049      	lsls	r1, r1, #1
    97e8:	5c09      	ldrb	r1, [r1, r0]
    97ea:	0049      	lsls	r1, r1, #1
    97ec:	448e      	add	lr, r1
    97ee:	bc02      	pop	{r1}
    97f0:	4770      	bx	lr
    97f2:	46c0      	nop			; (mov r8, r8)

000097f4 <__udivsi3>:
    97f4:	2200      	movs	r2, #0
    97f6:	0843      	lsrs	r3, r0, #1
    97f8:	428b      	cmp	r3, r1
    97fa:	d374      	bcc.n	98e6 <__udivsi3+0xf2>
    97fc:	0903      	lsrs	r3, r0, #4
    97fe:	428b      	cmp	r3, r1
    9800:	d35f      	bcc.n	98c2 <__udivsi3+0xce>
    9802:	0a03      	lsrs	r3, r0, #8
    9804:	428b      	cmp	r3, r1
    9806:	d344      	bcc.n	9892 <__udivsi3+0x9e>
    9808:	0b03      	lsrs	r3, r0, #12
    980a:	428b      	cmp	r3, r1
    980c:	d328      	bcc.n	9860 <__udivsi3+0x6c>
    980e:	0c03      	lsrs	r3, r0, #16
    9810:	428b      	cmp	r3, r1
    9812:	d30d      	bcc.n	9830 <__udivsi3+0x3c>
    9814:	22ff      	movs	r2, #255	; 0xff
    9816:	0209      	lsls	r1, r1, #8
    9818:	ba12      	rev	r2, r2
    981a:	0c03      	lsrs	r3, r0, #16
    981c:	428b      	cmp	r3, r1
    981e:	d302      	bcc.n	9826 <__udivsi3+0x32>
    9820:	1212      	asrs	r2, r2, #8
    9822:	0209      	lsls	r1, r1, #8
    9824:	d065      	beq.n	98f2 <__udivsi3+0xfe>
    9826:	0b03      	lsrs	r3, r0, #12
    9828:	428b      	cmp	r3, r1
    982a:	d319      	bcc.n	9860 <__udivsi3+0x6c>
    982c:	e000      	b.n	9830 <__udivsi3+0x3c>
    982e:	0a09      	lsrs	r1, r1, #8
    9830:	0bc3      	lsrs	r3, r0, #15
    9832:	428b      	cmp	r3, r1
    9834:	d301      	bcc.n	983a <__udivsi3+0x46>
    9836:	03cb      	lsls	r3, r1, #15
    9838:	1ac0      	subs	r0, r0, r3
    983a:	4152      	adcs	r2, r2
    983c:	0b83      	lsrs	r3, r0, #14
    983e:	428b      	cmp	r3, r1
    9840:	d301      	bcc.n	9846 <__udivsi3+0x52>
    9842:	038b      	lsls	r3, r1, #14
    9844:	1ac0      	subs	r0, r0, r3
    9846:	4152      	adcs	r2, r2
    9848:	0b43      	lsrs	r3, r0, #13
    984a:	428b      	cmp	r3, r1
    984c:	d301      	bcc.n	9852 <__udivsi3+0x5e>
    984e:	034b      	lsls	r3, r1, #13
    9850:	1ac0      	subs	r0, r0, r3
    9852:	4152      	adcs	r2, r2
    9854:	0b03      	lsrs	r3, r0, #12
    9856:	428b      	cmp	r3, r1
    9858:	d301      	bcc.n	985e <__udivsi3+0x6a>
    985a:	030b      	lsls	r3, r1, #12
    985c:	1ac0      	subs	r0, r0, r3
    985e:	4152      	adcs	r2, r2
    9860:	0ac3      	lsrs	r3, r0, #11
    9862:	428b      	cmp	r3, r1
    9864:	d301      	bcc.n	986a <__udivsi3+0x76>
    9866:	02cb      	lsls	r3, r1, #11
    9868:	1ac0      	subs	r0, r0, r3
    986a:	4152      	adcs	r2, r2
    986c:	0a83      	lsrs	r3, r0, #10
    986e:	428b      	cmp	r3, r1
    9870:	d301      	bcc.n	9876 <__udivsi3+0x82>
    9872:	028b      	lsls	r3, r1, #10
    9874:	1ac0      	subs	r0, r0, r3
    9876:	4152      	adcs	r2, r2
    9878:	0a43      	lsrs	r3, r0, #9
    987a:	428b      	cmp	r3, r1
    987c:	d301      	bcc.n	9882 <__udivsi3+0x8e>
    987e:	024b      	lsls	r3, r1, #9
    9880:	1ac0      	subs	r0, r0, r3
    9882:	4152      	adcs	r2, r2
    9884:	0a03      	lsrs	r3, r0, #8
    9886:	428b      	cmp	r3, r1
    9888:	d301      	bcc.n	988e <__udivsi3+0x9a>
    988a:	020b      	lsls	r3, r1, #8
    988c:	1ac0      	subs	r0, r0, r3
    988e:	4152      	adcs	r2, r2
    9890:	d2cd      	bcs.n	982e <__udivsi3+0x3a>
    9892:	09c3      	lsrs	r3, r0, #7
    9894:	428b      	cmp	r3, r1
    9896:	d301      	bcc.n	989c <__udivsi3+0xa8>
    9898:	01cb      	lsls	r3, r1, #7
    989a:	1ac0      	subs	r0, r0, r3
    989c:	4152      	adcs	r2, r2
    989e:	0983      	lsrs	r3, r0, #6
    98a0:	428b      	cmp	r3, r1
    98a2:	d301      	bcc.n	98a8 <__udivsi3+0xb4>
    98a4:	018b      	lsls	r3, r1, #6
    98a6:	1ac0      	subs	r0, r0, r3
    98a8:	4152      	adcs	r2, r2
    98aa:	0943      	lsrs	r3, r0, #5
    98ac:	428b      	cmp	r3, r1
    98ae:	d301      	bcc.n	98b4 <__udivsi3+0xc0>
    98b0:	014b      	lsls	r3, r1, #5
    98b2:	1ac0      	subs	r0, r0, r3
    98b4:	4152      	adcs	r2, r2
    98b6:	0903      	lsrs	r3, r0, #4
    98b8:	428b      	cmp	r3, r1
    98ba:	d301      	bcc.n	98c0 <__udivsi3+0xcc>
    98bc:	010b      	lsls	r3, r1, #4
    98be:	1ac0      	subs	r0, r0, r3
    98c0:	4152      	adcs	r2, r2
    98c2:	08c3      	lsrs	r3, r0, #3
    98c4:	428b      	cmp	r3, r1
    98c6:	d301      	bcc.n	98cc <__udivsi3+0xd8>
    98c8:	00cb      	lsls	r3, r1, #3
    98ca:	1ac0      	subs	r0, r0, r3
    98cc:	4152      	adcs	r2, r2
    98ce:	0883      	lsrs	r3, r0, #2
    98d0:	428b      	cmp	r3, r1
    98d2:	d301      	bcc.n	98d8 <__udivsi3+0xe4>
    98d4:	008b      	lsls	r3, r1, #2
    98d6:	1ac0      	subs	r0, r0, r3
    98d8:	4152      	adcs	r2, r2
    98da:	0843      	lsrs	r3, r0, #1
    98dc:	428b      	cmp	r3, r1
    98de:	d301      	bcc.n	98e4 <__udivsi3+0xf0>
    98e0:	004b      	lsls	r3, r1, #1
    98e2:	1ac0      	subs	r0, r0, r3
    98e4:	4152      	adcs	r2, r2
    98e6:	1a41      	subs	r1, r0, r1
    98e8:	d200      	bcs.n	98ec <__udivsi3+0xf8>
    98ea:	4601      	mov	r1, r0
    98ec:	4152      	adcs	r2, r2
    98ee:	4610      	mov	r0, r2
    98f0:	4770      	bx	lr
    98f2:	e7ff      	b.n	98f4 <__udivsi3+0x100>
    98f4:	b501      	push	{r0, lr}
    98f6:	2000      	movs	r0, #0
    98f8:	f000 f8f0 	bl	9adc <__aeabi_idiv0>
    98fc:	bd02      	pop	{r1, pc}
    98fe:	46c0      	nop			; (mov r8, r8)

00009900 <__aeabi_uidivmod>:
    9900:	2900      	cmp	r1, #0
    9902:	d0f7      	beq.n	98f4 <__udivsi3+0x100>
    9904:	e776      	b.n	97f4 <__udivsi3>
    9906:	4770      	bx	lr

00009908 <__divsi3>:
    9908:	4603      	mov	r3, r0
    990a:	430b      	orrs	r3, r1
    990c:	d47f      	bmi.n	9a0e <__divsi3+0x106>
    990e:	2200      	movs	r2, #0
    9910:	0843      	lsrs	r3, r0, #1
    9912:	428b      	cmp	r3, r1
    9914:	d374      	bcc.n	9a00 <__divsi3+0xf8>
    9916:	0903      	lsrs	r3, r0, #4
    9918:	428b      	cmp	r3, r1
    991a:	d35f      	bcc.n	99dc <__divsi3+0xd4>
    991c:	0a03      	lsrs	r3, r0, #8
    991e:	428b      	cmp	r3, r1
    9920:	d344      	bcc.n	99ac <__divsi3+0xa4>
    9922:	0b03      	lsrs	r3, r0, #12
    9924:	428b      	cmp	r3, r1
    9926:	d328      	bcc.n	997a <__divsi3+0x72>
    9928:	0c03      	lsrs	r3, r0, #16
    992a:	428b      	cmp	r3, r1
    992c:	d30d      	bcc.n	994a <__divsi3+0x42>
    992e:	22ff      	movs	r2, #255	; 0xff
    9930:	0209      	lsls	r1, r1, #8
    9932:	ba12      	rev	r2, r2
    9934:	0c03      	lsrs	r3, r0, #16
    9936:	428b      	cmp	r3, r1
    9938:	d302      	bcc.n	9940 <__divsi3+0x38>
    993a:	1212      	asrs	r2, r2, #8
    993c:	0209      	lsls	r1, r1, #8
    993e:	d065      	beq.n	9a0c <__divsi3+0x104>
    9940:	0b03      	lsrs	r3, r0, #12
    9942:	428b      	cmp	r3, r1
    9944:	d319      	bcc.n	997a <__divsi3+0x72>
    9946:	e000      	b.n	994a <__divsi3+0x42>
    9948:	0a09      	lsrs	r1, r1, #8
    994a:	0bc3      	lsrs	r3, r0, #15
    994c:	428b      	cmp	r3, r1
    994e:	d301      	bcc.n	9954 <__divsi3+0x4c>
    9950:	03cb      	lsls	r3, r1, #15
    9952:	1ac0      	subs	r0, r0, r3
    9954:	4152      	adcs	r2, r2
    9956:	0b83      	lsrs	r3, r0, #14
    9958:	428b      	cmp	r3, r1
    995a:	d301      	bcc.n	9960 <__divsi3+0x58>
    995c:	038b      	lsls	r3, r1, #14
    995e:	1ac0      	subs	r0, r0, r3
    9960:	4152      	adcs	r2, r2
    9962:	0b43      	lsrs	r3, r0, #13
    9964:	428b      	cmp	r3, r1
    9966:	d301      	bcc.n	996c <__divsi3+0x64>
    9968:	034b      	lsls	r3, r1, #13
    996a:	1ac0      	subs	r0, r0, r3
    996c:	4152      	adcs	r2, r2
    996e:	0b03      	lsrs	r3, r0, #12
    9970:	428b      	cmp	r3, r1
    9972:	d301      	bcc.n	9978 <__divsi3+0x70>
    9974:	030b      	lsls	r3, r1, #12
    9976:	1ac0      	subs	r0, r0, r3
    9978:	4152      	adcs	r2, r2
    997a:	0ac3      	lsrs	r3, r0, #11
    997c:	428b      	cmp	r3, r1
    997e:	d301      	bcc.n	9984 <__divsi3+0x7c>
    9980:	02cb      	lsls	r3, r1, #11
    9982:	1ac0      	subs	r0, r0, r3
    9984:	4152      	adcs	r2, r2
    9986:	0a83      	lsrs	r3, r0, #10
    9988:	428b      	cmp	r3, r1
    998a:	d301      	bcc.n	9990 <__divsi3+0x88>
    998c:	028b      	lsls	r3, r1, #10
    998e:	1ac0      	subs	r0, r0, r3
    9990:	4152      	adcs	r2, r2
    9992:	0a43      	lsrs	r3, r0, #9
    9994:	428b      	cmp	r3, r1
    9996:	d301      	bcc.n	999c <__divsi3+0x94>
    9998:	024b      	lsls	r3, r1, #9
    999a:	1ac0      	subs	r0, r0, r3
    999c:	4152      	adcs	r2, r2
    999e:	0a03      	lsrs	r3, r0, #8
    99a0:	428b      	cmp	r3, r1
    99a2:	d301      	bcc.n	99a8 <__divsi3+0xa0>
    99a4:	020b      	lsls	r3, r1, #8
    99a6:	1ac0      	subs	r0, r0, r3
    99a8:	4152      	adcs	r2, r2
    99aa:	d2cd      	bcs.n	9948 <__divsi3+0x40>
    99ac:	09c3      	lsrs	r3, r0, #7
    99ae:	428b      	cmp	r3, r1
    99b0:	d301      	bcc.n	99b6 <__divsi3+0xae>
    99b2:	01cb      	lsls	r3, r1, #7
    99b4:	1ac0      	subs	r0, r0, r3
    99b6:	4152      	adcs	r2, r2
    99b8:	0983      	lsrs	r3, r0, #6
    99ba:	428b      	cmp	r3, r1
    99bc:	d301      	bcc.n	99c2 <__divsi3+0xba>
    99be:	018b      	lsls	r3, r1, #6
    99c0:	1ac0      	subs	r0, r0, r3
    99c2:	4152      	adcs	r2, r2
    99c4:	0943      	lsrs	r3, r0, #5
    99c6:	428b      	cmp	r3, r1
    99c8:	d301      	bcc.n	99ce <__divsi3+0xc6>
    99ca:	014b      	lsls	r3, r1, #5
    99cc:	1ac0      	subs	r0, r0, r3
    99ce:	4152      	adcs	r2, r2
    99d0:	0903      	lsrs	r3, r0, #4
    99d2:	428b      	cmp	r3, r1
    99d4:	d301      	bcc.n	99da <__divsi3+0xd2>
    99d6:	010b      	lsls	r3, r1, #4
    99d8:	1ac0      	subs	r0, r0, r3
    99da:	4152      	adcs	r2, r2
    99dc:	08c3      	lsrs	r3, r0, #3
    99de:	428b      	cmp	r3, r1
    99e0:	d301      	bcc.n	99e6 <__divsi3+0xde>
    99e2:	00cb      	lsls	r3, r1, #3
    99e4:	1ac0      	subs	r0, r0, r3
    99e6:	4152      	adcs	r2, r2
    99e8:	0883      	lsrs	r3, r0, #2
    99ea:	428b      	cmp	r3, r1
    99ec:	d301      	bcc.n	99f2 <__divsi3+0xea>
    99ee:	008b      	lsls	r3, r1, #2
    99f0:	1ac0      	subs	r0, r0, r3
    99f2:	4152      	adcs	r2, r2
    99f4:	0843      	lsrs	r3, r0, #1
    99f6:	428b      	cmp	r3, r1
    99f8:	d301      	bcc.n	99fe <__divsi3+0xf6>
    99fa:	004b      	lsls	r3, r1, #1
    99fc:	1ac0      	subs	r0, r0, r3
    99fe:	4152      	adcs	r2, r2
    9a00:	1a41      	subs	r1, r0, r1
    9a02:	d200      	bcs.n	9a06 <__divsi3+0xfe>
    9a04:	4601      	mov	r1, r0
    9a06:	4152      	adcs	r2, r2
    9a08:	4610      	mov	r0, r2
    9a0a:	4770      	bx	lr
    9a0c:	e05d      	b.n	9aca <__divsi3+0x1c2>
    9a0e:	0fca      	lsrs	r2, r1, #31
    9a10:	d000      	beq.n	9a14 <__divsi3+0x10c>
    9a12:	4249      	negs	r1, r1
    9a14:	1003      	asrs	r3, r0, #32
    9a16:	d300      	bcc.n	9a1a <__divsi3+0x112>
    9a18:	4240      	negs	r0, r0
    9a1a:	4053      	eors	r3, r2
    9a1c:	2200      	movs	r2, #0
    9a1e:	469c      	mov	ip, r3
    9a20:	0903      	lsrs	r3, r0, #4
    9a22:	428b      	cmp	r3, r1
    9a24:	d32d      	bcc.n	9a82 <__divsi3+0x17a>
    9a26:	0a03      	lsrs	r3, r0, #8
    9a28:	428b      	cmp	r3, r1
    9a2a:	d312      	bcc.n	9a52 <__divsi3+0x14a>
    9a2c:	22fc      	movs	r2, #252	; 0xfc
    9a2e:	0189      	lsls	r1, r1, #6
    9a30:	ba12      	rev	r2, r2
    9a32:	0a03      	lsrs	r3, r0, #8
    9a34:	428b      	cmp	r3, r1
    9a36:	d30c      	bcc.n	9a52 <__divsi3+0x14a>
    9a38:	0189      	lsls	r1, r1, #6
    9a3a:	1192      	asrs	r2, r2, #6
    9a3c:	428b      	cmp	r3, r1
    9a3e:	d308      	bcc.n	9a52 <__divsi3+0x14a>
    9a40:	0189      	lsls	r1, r1, #6
    9a42:	1192      	asrs	r2, r2, #6
    9a44:	428b      	cmp	r3, r1
    9a46:	d304      	bcc.n	9a52 <__divsi3+0x14a>
    9a48:	0189      	lsls	r1, r1, #6
    9a4a:	d03a      	beq.n	9ac2 <__divsi3+0x1ba>
    9a4c:	1192      	asrs	r2, r2, #6
    9a4e:	e000      	b.n	9a52 <__divsi3+0x14a>
    9a50:	0989      	lsrs	r1, r1, #6
    9a52:	09c3      	lsrs	r3, r0, #7
    9a54:	428b      	cmp	r3, r1
    9a56:	d301      	bcc.n	9a5c <__divsi3+0x154>
    9a58:	01cb      	lsls	r3, r1, #7
    9a5a:	1ac0      	subs	r0, r0, r3
    9a5c:	4152      	adcs	r2, r2
    9a5e:	0983      	lsrs	r3, r0, #6
    9a60:	428b      	cmp	r3, r1
    9a62:	d301      	bcc.n	9a68 <__divsi3+0x160>
    9a64:	018b      	lsls	r3, r1, #6
    9a66:	1ac0      	subs	r0, r0, r3
    9a68:	4152      	adcs	r2, r2
    9a6a:	0943      	lsrs	r3, r0, #5
    9a6c:	428b      	cmp	r3, r1
    9a6e:	d301      	bcc.n	9a74 <__divsi3+0x16c>
    9a70:	014b      	lsls	r3, r1, #5
    9a72:	1ac0      	subs	r0, r0, r3
    9a74:	4152      	adcs	r2, r2
    9a76:	0903      	lsrs	r3, r0, #4
    9a78:	428b      	cmp	r3, r1
    9a7a:	d301      	bcc.n	9a80 <__divsi3+0x178>
    9a7c:	010b      	lsls	r3, r1, #4
    9a7e:	1ac0      	subs	r0, r0, r3
    9a80:	4152      	adcs	r2, r2
    9a82:	08c3      	lsrs	r3, r0, #3
    9a84:	428b      	cmp	r3, r1
    9a86:	d301      	bcc.n	9a8c <__divsi3+0x184>
    9a88:	00cb      	lsls	r3, r1, #3
    9a8a:	1ac0      	subs	r0, r0, r3
    9a8c:	4152      	adcs	r2, r2
    9a8e:	0883      	lsrs	r3, r0, #2
    9a90:	428b      	cmp	r3, r1
    9a92:	d301      	bcc.n	9a98 <__divsi3+0x190>
    9a94:	008b      	lsls	r3, r1, #2
    9a96:	1ac0      	subs	r0, r0, r3
    9a98:	4152      	adcs	r2, r2
    9a9a:	d2d9      	bcs.n	9a50 <__divsi3+0x148>
    9a9c:	0843      	lsrs	r3, r0, #1
    9a9e:	428b      	cmp	r3, r1
    9aa0:	d301      	bcc.n	9aa6 <__divsi3+0x19e>
    9aa2:	004b      	lsls	r3, r1, #1
    9aa4:	1ac0      	subs	r0, r0, r3
    9aa6:	4152      	adcs	r2, r2
    9aa8:	1a41      	subs	r1, r0, r1
    9aaa:	d200      	bcs.n	9aae <__divsi3+0x1a6>
    9aac:	4601      	mov	r1, r0
    9aae:	4663      	mov	r3, ip
    9ab0:	4152      	adcs	r2, r2
    9ab2:	105b      	asrs	r3, r3, #1
    9ab4:	4610      	mov	r0, r2
    9ab6:	d301      	bcc.n	9abc <__divsi3+0x1b4>
    9ab8:	4240      	negs	r0, r0
    9aba:	2b00      	cmp	r3, #0
    9abc:	d500      	bpl.n	9ac0 <__divsi3+0x1b8>
    9abe:	4249      	negs	r1, r1
    9ac0:	4770      	bx	lr
    9ac2:	4663      	mov	r3, ip
    9ac4:	105b      	asrs	r3, r3, #1
    9ac6:	d300      	bcc.n	9aca <__divsi3+0x1c2>
    9ac8:	4240      	negs	r0, r0
    9aca:	b501      	push	{r0, lr}
    9acc:	2000      	movs	r0, #0
    9ace:	f000 f805 	bl	9adc <__aeabi_idiv0>
    9ad2:	bd02      	pop	{r1, pc}

00009ad4 <__aeabi_idivmod>:
    9ad4:	2900      	cmp	r1, #0
    9ad6:	d0f8      	beq.n	9aca <__divsi3+0x1c2>
    9ad8:	e716      	b.n	9908 <__divsi3>
    9ada:	4770      	bx	lr

00009adc <__aeabi_idiv0>:
    9adc:	4770      	bx	lr
    9ade:	46c0      	nop			; (mov r8, r8)

00009ae0 <__aeabi_cdrcmple>:
    9ae0:	4684      	mov	ip, r0
    9ae2:	1c10      	adds	r0, r2, #0
    9ae4:	4662      	mov	r2, ip
    9ae6:	468c      	mov	ip, r1
    9ae8:	1c19      	adds	r1, r3, #0
    9aea:	4663      	mov	r3, ip
    9aec:	e000      	b.n	9af0 <__aeabi_cdcmpeq>
    9aee:	46c0      	nop			; (mov r8, r8)

00009af0 <__aeabi_cdcmpeq>:
    9af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9af2:	f001 fe91 	bl	b818 <__ledf2>
    9af6:	2800      	cmp	r0, #0
    9af8:	d401      	bmi.n	9afe <__aeabi_cdcmpeq+0xe>
    9afa:	2100      	movs	r1, #0
    9afc:	42c8      	cmn	r0, r1
    9afe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00009b00 <__aeabi_dcmpeq>:
    9b00:	b510      	push	{r4, lr}
    9b02:	f001 fdeb 	bl	b6dc <__eqdf2>
    9b06:	4240      	negs	r0, r0
    9b08:	3001      	adds	r0, #1
    9b0a:	bd10      	pop	{r4, pc}

00009b0c <__aeabi_dcmplt>:
    9b0c:	b510      	push	{r4, lr}
    9b0e:	f001 fe83 	bl	b818 <__ledf2>
    9b12:	2800      	cmp	r0, #0
    9b14:	db01      	blt.n	9b1a <__aeabi_dcmplt+0xe>
    9b16:	2000      	movs	r0, #0
    9b18:	bd10      	pop	{r4, pc}
    9b1a:	2001      	movs	r0, #1
    9b1c:	bd10      	pop	{r4, pc}
    9b1e:	46c0      	nop			; (mov r8, r8)

00009b20 <__aeabi_dcmple>:
    9b20:	b510      	push	{r4, lr}
    9b22:	f001 fe79 	bl	b818 <__ledf2>
    9b26:	2800      	cmp	r0, #0
    9b28:	dd01      	ble.n	9b2e <__aeabi_dcmple+0xe>
    9b2a:	2000      	movs	r0, #0
    9b2c:	bd10      	pop	{r4, pc}
    9b2e:	2001      	movs	r0, #1
    9b30:	bd10      	pop	{r4, pc}
    9b32:	46c0      	nop			; (mov r8, r8)

00009b34 <__aeabi_dcmpgt>:
    9b34:	b510      	push	{r4, lr}
    9b36:	f001 fe0b 	bl	b750 <__gedf2>
    9b3a:	2800      	cmp	r0, #0
    9b3c:	dc01      	bgt.n	9b42 <__aeabi_dcmpgt+0xe>
    9b3e:	2000      	movs	r0, #0
    9b40:	bd10      	pop	{r4, pc}
    9b42:	2001      	movs	r0, #1
    9b44:	bd10      	pop	{r4, pc}
    9b46:	46c0      	nop			; (mov r8, r8)

00009b48 <__aeabi_dcmpge>:
    9b48:	b510      	push	{r4, lr}
    9b4a:	f001 fe01 	bl	b750 <__gedf2>
    9b4e:	2800      	cmp	r0, #0
    9b50:	da01      	bge.n	9b56 <__aeabi_dcmpge+0xe>
    9b52:	2000      	movs	r0, #0
    9b54:	bd10      	pop	{r4, pc}
    9b56:	2001      	movs	r0, #1
    9b58:	bd10      	pop	{r4, pc}
    9b5a:	46c0      	nop			; (mov r8, r8)

00009b5c <__aeabi_cfrcmple>:
    9b5c:	4684      	mov	ip, r0
    9b5e:	1c08      	adds	r0, r1, #0
    9b60:	4661      	mov	r1, ip
    9b62:	e7ff      	b.n	9b64 <__aeabi_cfcmpeq>

00009b64 <__aeabi_cfcmpeq>:
    9b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9b66:	f000 fba9 	bl	a2bc <__lesf2>
    9b6a:	2800      	cmp	r0, #0
    9b6c:	d401      	bmi.n	9b72 <__aeabi_cfcmpeq+0xe>
    9b6e:	2100      	movs	r1, #0
    9b70:	42c8      	cmn	r0, r1
    9b72:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00009b74 <__aeabi_fcmpeq>:
    9b74:	b510      	push	{r4, lr}
    9b76:	f000 fb3b 	bl	a1f0 <__eqsf2>
    9b7a:	4240      	negs	r0, r0
    9b7c:	3001      	adds	r0, #1
    9b7e:	bd10      	pop	{r4, pc}

00009b80 <__aeabi_fcmplt>:
    9b80:	b510      	push	{r4, lr}
    9b82:	f000 fb9b 	bl	a2bc <__lesf2>
    9b86:	2800      	cmp	r0, #0
    9b88:	db01      	blt.n	9b8e <__aeabi_fcmplt+0xe>
    9b8a:	2000      	movs	r0, #0
    9b8c:	bd10      	pop	{r4, pc}
    9b8e:	2001      	movs	r0, #1
    9b90:	bd10      	pop	{r4, pc}
    9b92:	46c0      	nop			; (mov r8, r8)

00009b94 <__aeabi_fcmple>:
    9b94:	b510      	push	{r4, lr}
    9b96:	f000 fb91 	bl	a2bc <__lesf2>
    9b9a:	2800      	cmp	r0, #0
    9b9c:	dd01      	ble.n	9ba2 <__aeabi_fcmple+0xe>
    9b9e:	2000      	movs	r0, #0
    9ba0:	bd10      	pop	{r4, pc}
    9ba2:	2001      	movs	r0, #1
    9ba4:	bd10      	pop	{r4, pc}
    9ba6:	46c0      	nop			; (mov r8, r8)

00009ba8 <__aeabi_fcmpgt>:
    9ba8:	b510      	push	{r4, lr}
    9baa:	f000 fb47 	bl	a23c <__gesf2>
    9bae:	2800      	cmp	r0, #0
    9bb0:	dc01      	bgt.n	9bb6 <__aeabi_fcmpgt+0xe>
    9bb2:	2000      	movs	r0, #0
    9bb4:	bd10      	pop	{r4, pc}
    9bb6:	2001      	movs	r0, #1
    9bb8:	bd10      	pop	{r4, pc}
    9bba:	46c0      	nop			; (mov r8, r8)

00009bbc <__aeabi_fcmpge>:
    9bbc:	b510      	push	{r4, lr}
    9bbe:	f000 fb3d 	bl	a23c <__gesf2>
    9bc2:	2800      	cmp	r0, #0
    9bc4:	da01      	bge.n	9bca <__aeabi_fcmpge+0xe>
    9bc6:	2000      	movs	r0, #0
    9bc8:	bd10      	pop	{r4, pc}
    9bca:	2001      	movs	r0, #1
    9bcc:	bd10      	pop	{r4, pc}
    9bce:	46c0      	nop			; (mov r8, r8)

00009bd0 <__aeabi_f2uiz>:
    9bd0:	219e      	movs	r1, #158	; 0x9e
    9bd2:	b510      	push	{r4, lr}
    9bd4:	05c9      	lsls	r1, r1, #23
    9bd6:	1c04      	adds	r4, r0, #0
    9bd8:	f7ff fff0 	bl	9bbc <__aeabi_fcmpge>
    9bdc:	2800      	cmp	r0, #0
    9bde:	d103      	bne.n	9be8 <__aeabi_f2uiz+0x18>
    9be0:	1c20      	adds	r0, r4, #0
    9be2:	f000 fe81 	bl	a8e8 <__aeabi_f2iz>
    9be6:	bd10      	pop	{r4, pc}
    9be8:	219e      	movs	r1, #158	; 0x9e
    9bea:	1c20      	adds	r0, r4, #0
    9bec:	05c9      	lsls	r1, r1, #23
    9bee:	f000 fcc7 	bl	a580 <__aeabi_fsub>
    9bf2:	f000 fe79 	bl	a8e8 <__aeabi_f2iz>
    9bf6:	2380      	movs	r3, #128	; 0x80
    9bf8:	061b      	lsls	r3, r3, #24
    9bfa:	469c      	mov	ip, r3
    9bfc:	4460      	add	r0, ip
    9bfe:	e7f2      	b.n	9be6 <__aeabi_f2uiz+0x16>

00009c00 <__aeabi_d2uiz>:
    9c00:	b570      	push	{r4, r5, r6, lr}
    9c02:	2200      	movs	r2, #0
    9c04:	4b0c      	ldr	r3, [pc, #48]	; (9c38 <__aeabi_d2uiz+0x38>)
    9c06:	0004      	movs	r4, r0
    9c08:	000d      	movs	r5, r1
    9c0a:	f7ff ff9d 	bl	9b48 <__aeabi_dcmpge>
    9c0e:	2800      	cmp	r0, #0
    9c10:	d104      	bne.n	9c1c <__aeabi_d2uiz+0x1c>
    9c12:	0020      	movs	r0, r4
    9c14:	0029      	movs	r1, r5
    9c16:	f002 fc17 	bl	c448 <__aeabi_d2iz>
    9c1a:	bd70      	pop	{r4, r5, r6, pc}
    9c1c:	4b06      	ldr	r3, [pc, #24]	; (9c38 <__aeabi_d2uiz+0x38>)
    9c1e:	2200      	movs	r2, #0
    9c20:	0020      	movs	r0, r4
    9c22:	0029      	movs	r1, r5
    9c24:	f002 f8da 	bl	bddc <__aeabi_dsub>
    9c28:	f002 fc0e 	bl	c448 <__aeabi_d2iz>
    9c2c:	2380      	movs	r3, #128	; 0x80
    9c2e:	061b      	lsls	r3, r3, #24
    9c30:	469c      	mov	ip, r3
    9c32:	4460      	add	r0, ip
    9c34:	e7f1      	b.n	9c1a <__aeabi_d2uiz+0x1a>
    9c36:	46c0      	nop			; (mov r8, r8)
    9c38:	41e00000 	.word	0x41e00000

00009c3c <__aeabi_fadd>:
    9c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c3e:	46c6      	mov	lr, r8
    9c40:	024e      	lsls	r6, r1, #9
    9c42:	0247      	lsls	r7, r0, #9
    9c44:	0a76      	lsrs	r6, r6, #9
    9c46:	0a7b      	lsrs	r3, r7, #9
    9c48:	0044      	lsls	r4, r0, #1
    9c4a:	0fc5      	lsrs	r5, r0, #31
    9c4c:	00f7      	lsls	r7, r6, #3
    9c4e:	0048      	lsls	r0, r1, #1
    9c50:	4698      	mov	r8, r3
    9c52:	b500      	push	{lr}
    9c54:	0e24      	lsrs	r4, r4, #24
    9c56:	002a      	movs	r2, r5
    9c58:	00db      	lsls	r3, r3, #3
    9c5a:	0e00      	lsrs	r0, r0, #24
    9c5c:	0fc9      	lsrs	r1, r1, #31
    9c5e:	46bc      	mov	ip, r7
    9c60:	428d      	cmp	r5, r1
    9c62:	d067      	beq.n	9d34 <__aeabi_fadd+0xf8>
    9c64:	1a22      	subs	r2, r4, r0
    9c66:	2a00      	cmp	r2, #0
    9c68:	dc00      	bgt.n	9c6c <__aeabi_fadd+0x30>
    9c6a:	e0a5      	b.n	9db8 <__aeabi_fadd+0x17c>
    9c6c:	2800      	cmp	r0, #0
    9c6e:	d13a      	bne.n	9ce6 <__aeabi_fadd+0xaa>
    9c70:	2f00      	cmp	r7, #0
    9c72:	d100      	bne.n	9c76 <__aeabi_fadd+0x3a>
    9c74:	e093      	b.n	9d9e <__aeabi_fadd+0x162>
    9c76:	1e51      	subs	r1, r2, #1
    9c78:	2900      	cmp	r1, #0
    9c7a:	d000      	beq.n	9c7e <__aeabi_fadd+0x42>
    9c7c:	e0bc      	b.n	9df8 <__aeabi_fadd+0x1bc>
    9c7e:	2401      	movs	r4, #1
    9c80:	1bdb      	subs	r3, r3, r7
    9c82:	015a      	lsls	r2, r3, #5
    9c84:	d546      	bpl.n	9d14 <__aeabi_fadd+0xd8>
    9c86:	019b      	lsls	r3, r3, #6
    9c88:	099e      	lsrs	r6, r3, #6
    9c8a:	0030      	movs	r0, r6
    9c8c:	f002 fd66 	bl	c75c <__clzsi2>
    9c90:	3805      	subs	r0, #5
    9c92:	4086      	lsls	r6, r0
    9c94:	4284      	cmp	r4, r0
    9c96:	dd00      	ble.n	9c9a <__aeabi_fadd+0x5e>
    9c98:	e09d      	b.n	9dd6 <__aeabi_fadd+0x19a>
    9c9a:	1b04      	subs	r4, r0, r4
    9c9c:	0032      	movs	r2, r6
    9c9e:	2020      	movs	r0, #32
    9ca0:	3401      	adds	r4, #1
    9ca2:	40e2      	lsrs	r2, r4
    9ca4:	1b04      	subs	r4, r0, r4
    9ca6:	40a6      	lsls	r6, r4
    9ca8:	0033      	movs	r3, r6
    9caa:	1e5e      	subs	r6, r3, #1
    9cac:	41b3      	sbcs	r3, r6
    9cae:	2400      	movs	r4, #0
    9cb0:	4313      	orrs	r3, r2
    9cb2:	075a      	lsls	r2, r3, #29
    9cb4:	d004      	beq.n	9cc0 <__aeabi_fadd+0x84>
    9cb6:	220f      	movs	r2, #15
    9cb8:	401a      	ands	r2, r3
    9cba:	2a04      	cmp	r2, #4
    9cbc:	d000      	beq.n	9cc0 <__aeabi_fadd+0x84>
    9cbe:	3304      	adds	r3, #4
    9cc0:	015a      	lsls	r2, r3, #5
    9cc2:	d529      	bpl.n	9d18 <__aeabi_fadd+0xdc>
    9cc4:	3401      	adds	r4, #1
    9cc6:	2cff      	cmp	r4, #255	; 0xff
    9cc8:	d100      	bne.n	9ccc <__aeabi_fadd+0x90>
    9cca:	e081      	b.n	9dd0 <__aeabi_fadd+0x194>
    9ccc:	002a      	movs	r2, r5
    9cce:	019b      	lsls	r3, r3, #6
    9cd0:	0a5b      	lsrs	r3, r3, #9
    9cd2:	b2e4      	uxtb	r4, r4
    9cd4:	025b      	lsls	r3, r3, #9
    9cd6:	05e4      	lsls	r4, r4, #23
    9cd8:	0a58      	lsrs	r0, r3, #9
    9cda:	07d2      	lsls	r2, r2, #31
    9cdc:	4320      	orrs	r0, r4
    9cde:	4310      	orrs	r0, r2
    9ce0:	bc04      	pop	{r2}
    9ce2:	4690      	mov	r8, r2
    9ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ce6:	2cff      	cmp	r4, #255	; 0xff
    9ce8:	d0e3      	beq.n	9cb2 <__aeabi_fadd+0x76>
    9cea:	2180      	movs	r1, #128	; 0x80
    9cec:	0038      	movs	r0, r7
    9cee:	04c9      	lsls	r1, r1, #19
    9cf0:	4308      	orrs	r0, r1
    9cf2:	4684      	mov	ip, r0
    9cf4:	2a1b      	cmp	r2, #27
    9cf6:	dd00      	ble.n	9cfa <__aeabi_fadd+0xbe>
    9cf8:	e082      	b.n	9e00 <__aeabi_fadd+0x1c4>
    9cfa:	2020      	movs	r0, #32
    9cfc:	4661      	mov	r1, ip
    9cfe:	40d1      	lsrs	r1, r2
    9d00:	1a82      	subs	r2, r0, r2
    9d02:	4660      	mov	r0, ip
    9d04:	4090      	lsls	r0, r2
    9d06:	0002      	movs	r2, r0
    9d08:	1e50      	subs	r0, r2, #1
    9d0a:	4182      	sbcs	r2, r0
    9d0c:	430a      	orrs	r2, r1
    9d0e:	1a9b      	subs	r3, r3, r2
    9d10:	015a      	lsls	r2, r3, #5
    9d12:	d4b8      	bmi.n	9c86 <__aeabi_fadd+0x4a>
    9d14:	075a      	lsls	r2, r3, #29
    9d16:	d1ce      	bne.n	9cb6 <__aeabi_fadd+0x7a>
    9d18:	08de      	lsrs	r6, r3, #3
    9d1a:	002a      	movs	r2, r5
    9d1c:	2cff      	cmp	r4, #255	; 0xff
    9d1e:	d13a      	bne.n	9d96 <__aeabi_fadd+0x15a>
    9d20:	2e00      	cmp	r6, #0
    9d22:	d100      	bne.n	9d26 <__aeabi_fadd+0xea>
    9d24:	e0ae      	b.n	9e84 <__aeabi_fadd+0x248>
    9d26:	2380      	movs	r3, #128	; 0x80
    9d28:	03db      	lsls	r3, r3, #15
    9d2a:	4333      	orrs	r3, r6
    9d2c:	025b      	lsls	r3, r3, #9
    9d2e:	0a5b      	lsrs	r3, r3, #9
    9d30:	24ff      	movs	r4, #255	; 0xff
    9d32:	e7cf      	b.n	9cd4 <__aeabi_fadd+0x98>
    9d34:	1a21      	subs	r1, r4, r0
    9d36:	2900      	cmp	r1, #0
    9d38:	dd52      	ble.n	9de0 <__aeabi_fadd+0x1a4>
    9d3a:	2800      	cmp	r0, #0
    9d3c:	d031      	beq.n	9da2 <__aeabi_fadd+0x166>
    9d3e:	2cff      	cmp	r4, #255	; 0xff
    9d40:	d0b7      	beq.n	9cb2 <__aeabi_fadd+0x76>
    9d42:	2080      	movs	r0, #128	; 0x80
    9d44:	003e      	movs	r6, r7
    9d46:	04c0      	lsls	r0, r0, #19
    9d48:	4306      	orrs	r6, r0
    9d4a:	46b4      	mov	ip, r6
    9d4c:	291b      	cmp	r1, #27
    9d4e:	dd00      	ble.n	9d52 <__aeabi_fadd+0x116>
    9d50:	e0aa      	b.n	9ea8 <__aeabi_fadd+0x26c>
    9d52:	2620      	movs	r6, #32
    9d54:	4660      	mov	r0, ip
    9d56:	40c8      	lsrs	r0, r1
    9d58:	1a71      	subs	r1, r6, r1
    9d5a:	4666      	mov	r6, ip
    9d5c:	408e      	lsls	r6, r1
    9d5e:	0031      	movs	r1, r6
    9d60:	1e4e      	subs	r6, r1, #1
    9d62:	41b1      	sbcs	r1, r6
    9d64:	4301      	orrs	r1, r0
    9d66:	185b      	adds	r3, r3, r1
    9d68:	0159      	lsls	r1, r3, #5
    9d6a:	d5d3      	bpl.n	9d14 <__aeabi_fadd+0xd8>
    9d6c:	3401      	adds	r4, #1
    9d6e:	2cff      	cmp	r4, #255	; 0xff
    9d70:	d100      	bne.n	9d74 <__aeabi_fadd+0x138>
    9d72:	e087      	b.n	9e84 <__aeabi_fadd+0x248>
    9d74:	2201      	movs	r2, #1
    9d76:	4978      	ldr	r1, [pc, #480]	; (9f58 <__aeabi_fadd+0x31c>)
    9d78:	401a      	ands	r2, r3
    9d7a:	085b      	lsrs	r3, r3, #1
    9d7c:	400b      	ands	r3, r1
    9d7e:	4313      	orrs	r3, r2
    9d80:	e797      	b.n	9cb2 <__aeabi_fadd+0x76>
    9d82:	2c00      	cmp	r4, #0
    9d84:	d000      	beq.n	9d88 <__aeabi_fadd+0x14c>
    9d86:	e0a7      	b.n	9ed8 <__aeabi_fadd+0x29c>
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d000      	beq.n	9d8e <__aeabi_fadd+0x152>
    9d8c:	e0b6      	b.n	9efc <__aeabi_fadd+0x2c0>
    9d8e:	1e3b      	subs	r3, r7, #0
    9d90:	d162      	bne.n	9e58 <__aeabi_fadd+0x21c>
    9d92:	2600      	movs	r6, #0
    9d94:	2200      	movs	r2, #0
    9d96:	0273      	lsls	r3, r6, #9
    9d98:	0a5b      	lsrs	r3, r3, #9
    9d9a:	b2e4      	uxtb	r4, r4
    9d9c:	e79a      	b.n	9cd4 <__aeabi_fadd+0x98>
    9d9e:	0014      	movs	r4, r2
    9da0:	e787      	b.n	9cb2 <__aeabi_fadd+0x76>
    9da2:	2f00      	cmp	r7, #0
    9da4:	d04d      	beq.n	9e42 <__aeabi_fadd+0x206>
    9da6:	1e48      	subs	r0, r1, #1
    9da8:	2800      	cmp	r0, #0
    9daa:	d157      	bne.n	9e5c <__aeabi_fadd+0x220>
    9dac:	4463      	add	r3, ip
    9dae:	2401      	movs	r4, #1
    9db0:	015a      	lsls	r2, r3, #5
    9db2:	d5af      	bpl.n	9d14 <__aeabi_fadd+0xd8>
    9db4:	2402      	movs	r4, #2
    9db6:	e7dd      	b.n	9d74 <__aeabi_fadd+0x138>
    9db8:	2a00      	cmp	r2, #0
    9dba:	d124      	bne.n	9e06 <__aeabi_fadd+0x1ca>
    9dbc:	1c62      	adds	r2, r4, #1
    9dbe:	b2d2      	uxtb	r2, r2
    9dc0:	2a01      	cmp	r2, #1
    9dc2:	ddde      	ble.n	9d82 <__aeabi_fadd+0x146>
    9dc4:	1bde      	subs	r6, r3, r7
    9dc6:	0172      	lsls	r2, r6, #5
    9dc8:	d535      	bpl.n	9e36 <__aeabi_fadd+0x1fa>
    9dca:	1afe      	subs	r6, r7, r3
    9dcc:	000d      	movs	r5, r1
    9dce:	e75c      	b.n	9c8a <__aeabi_fadd+0x4e>
    9dd0:	002a      	movs	r2, r5
    9dd2:	2300      	movs	r3, #0
    9dd4:	e77e      	b.n	9cd4 <__aeabi_fadd+0x98>
    9dd6:	0033      	movs	r3, r6
    9dd8:	4a60      	ldr	r2, [pc, #384]	; (9f5c <__aeabi_fadd+0x320>)
    9dda:	1a24      	subs	r4, r4, r0
    9ddc:	4013      	ands	r3, r2
    9dde:	e768      	b.n	9cb2 <__aeabi_fadd+0x76>
    9de0:	2900      	cmp	r1, #0
    9de2:	d163      	bne.n	9eac <__aeabi_fadd+0x270>
    9de4:	1c61      	adds	r1, r4, #1
    9de6:	b2c8      	uxtb	r0, r1
    9de8:	2801      	cmp	r0, #1
    9dea:	dd4e      	ble.n	9e8a <__aeabi_fadd+0x24e>
    9dec:	29ff      	cmp	r1, #255	; 0xff
    9dee:	d049      	beq.n	9e84 <__aeabi_fadd+0x248>
    9df0:	4463      	add	r3, ip
    9df2:	085b      	lsrs	r3, r3, #1
    9df4:	000c      	movs	r4, r1
    9df6:	e75c      	b.n	9cb2 <__aeabi_fadd+0x76>
    9df8:	2aff      	cmp	r2, #255	; 0xff
    9dfa:	d041      	beq.n	9e80 <__aeabi_fadd+0x244>
    9dfc:	000a      	movs	r2, r1
    9dfe:	e779      	b.n	9cf4 <__aeabi_fadd+0xb8>
    9e00:	2201      	movs	r2, #1
    9e02:	1a9b      	subs	r3, r3, r2
    9e04:	e784      	b.n	9d10 <__aeabi_fadd+0xd4>
    9e06:	2c00      	cmp	r4, #0
    9e08:	d01d      	beq.n	9e46 <__aeabi_fadd+0x20a>
    9e0a:	28ff      	cmp	r0, #255	; 0xff
    9e0c:	d022      	beq.n	9e54 <__aeabi_fadd+0x218>
    9e0e:	2480      	movs	r4, #128	; 0x80
    9e10:	04e4      	lsls	r4, r4, #19
    9e12:	4252      	negs	r2, r2
    9e14:	4323      	orrs	r3, r4
    9e16:	2a1b      	cmp	r2, #27
    9e18:	dd00      	ble.n	9e1c <__aeabi_fadd+0x1e0>
    9e1a:	e08a      	b.n	9f32 <__aeabi_fadd+0x2f6>
    9e1c:	001c      	movs	r4, r3
    9e1e:	2520      	movs	r5, #32
    9e20:	40d4      	lsrs	r4, r2
    9e22:	1aaa      	subs	r2, r5, r2
    9e24:	4093      	lsls	r3, r2
    9e26:	1e5a      	subs	r2, r3, #1
    9e28:	4193      	sbcs	r3, r2
    9e2a:	4323      	orrs	r3, r4
    9e2c:	4662      	mov	r2, ip
    9e2e:	0004      	movs	r4, r0
    9e30:	1ad3      	subs	r3, r2, r3
    9e32:	000d      	movs	r5, r1
    9e34:	e725      	b.n	9c82 <__aeabi_fadd+0x46>
    9e36:	2e00      	cmp	r6, #0
    9e38:	d000      	beq.n	9e3c <__aeabi_fadd+0x200>
    9e3a:	e726      	b.n	9c8a <__aeabi_fadd+0x4e>
    9e3c:	2200      	movs	r2, #0
    9e3e:	2400      	movs	r4, #0
    9e40:	e7a9      	b.n	9d96 <__aeabi_fadd+0x15a>
    9e42:	000c      	movs	r4, r1
    9e44:	e735      	b.n	9cb2 <__aeabi_fadd+0x76>
    9e46:	2b00      	cmp	r3, #0
    9e48:	d04d      	beq.n	9ee6 <__aeabi_fadd+0x2aa>
    9e4a:	43d2      	mvns	r2, r2
    9e4c:	2a00      	cmp	r2, #0
    9e4e:	d0ed      	beq.n	9e2c <__aeabi_fadd+0x1f0>
    9e50:	28ff      	cmp	r0, #255	; 0xff
    9e52:	d1e0      	bne.n	9e16 <__aeabi_fadd+0x1da>
    9e54:	4663      	mov	r3, ip
    9e56:	24ff      	movs	r4, #255	; 0xff
    9e58:	000d      	movs	r5, r1
    9e5a:	e72a      	b.n	9cb2 <__aeabi_fadd+0x76>
    9e5c:	29ff      	cmp	r1, #255	; 0xff
    9e5e:	d00f      	beq.n	9e80 <__aeabi_fadd+0x244>
    9e60:	0001      	movs	r1, r0
    9e62:	e773      	b.n	9d4c <__aeabi_fadd+0x110>
    9e64:	2b00      	cmp	r3, #0
    9e66:	d061      	beq.n	9f2c <__aeabi_fadd+0x2f0>
    9e68:	24ff      	movs	r4, #255	; 0xff
    9e6a:	2f00      	cmp	r7, #0
    9e6c:	d100      	bne.n	9e70 <__aeabi_fadd+0x234>
    9e6e:	e720      	b.n	9cb2 <__aeabi_fadd+0x76>
    9e70:	2280      	movs	r2, #128	; 0x80
    9e72:	4641      	mov	r1, r8
    9e74:	03d2      	lsls	r2, r2, #15
    9e76:	4211      	tst	r1, r2
    9e78:	d002      	beq.n	9e80 <__aeabi_fadd+0x244>
    9e7a:	4216      	tst	r6, r2
    9e7c:	d100      	bne.n	9e80 <__aeabi_fadd+0x244>
    9e7e:	003b      	movs	r3, r7
    9e80:	24ff      	movs	r4, #255	; 0xff
    9e82:	e716      	b.n	9cb2 <__aeabi_fadd+0x76>
    9e84:	24ff      	movs	r4, #255	; 0xff
    9e86:	2300      	movs	r3, #0
    9e88:	e724      	b.n	9cd4 <__aeabi_fadd+0x98>
    9e8a:	2c00      	cmp	r4, #0
    9e8c:	d1ea      	bne.n	9e64 <__aeabi_fadd+0x228>
    9e8e:	2b00      	cmp	r3, #0
    9e90:	d058      	beq.n	9f44 <__aeabi_fadd+0x308>
    9e92:	2f00      	cmp	r7, #0
    9e94:	d100      	bne.n	9e98 <__aeabi_fadd+0x25c>
    9e96:	e70c      	b.n	9cb2 <__aeabi_fadd+0x76>
    9e98:	4463      	add	r3, ip
    9e9a:	015a      	lsls	r2, r3, #5
    9e9c:	d400      	bmi.n	9ea0 <__aeabi_fadd+0x264>
    9e9e:	e739      	b.n	9d14 <__aeabi_fadd+0xd8>
    9ea0:	4a2e      	ldr	r2, [pc, #184]	; (9f5c <__aeabi_fadd+0x320>)
    9ea2:	000c      	movs	r4, r1
    9ea4:	4013      	ands	r3, r2
    9ea6:	e704      	b.n	9cb2 <__aeabi_fadd+0x76>
    9ea8:	2101      	movs	r1, #1
    9eaa:	e75c      	b.n	9d66 <__aeabi_fadd+0x12a>
    9eac:	2c00      	cmp	r4, #0
    9eae:	d11e      	bne.n	9eee <__aeabi_fadd+0x2b2>
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d040      	beq.n	9f36 <__aeabi_fadd+0x2fa>
    9eb4:	43c9      	mvns	r1, r1
    9eb6:	2900      	cmp	r1, #0
    9eb8:	d00b      	beq.n	9ed2 <__aeabi_fadd+0x296>
    9eba:	28ff      	cmp	r0, #255	; 0xff
    9ebc:	d036      	beq.n	9f2c <__aeabi_fadd+0x2f0>
    9ebe:	291b      	cmp	r1, #27
    9ec0:	dc47      	bgt.n	9f52 <__aeabi_fadd+0x316>
    9ec2:	001c      	movs	r4, r3
    9ec4:	2620      	movs	r6, #32
    9ec6:	40cc      	lsrs	r4, r1
    9ec8:	1a71      	subs	r1, r6, r1
    9eca:	408b      	lsls	r3, r1
    9ecc:	1e59      	subs	r1, r3, #1
    9ece:	418b      	sbcs	r3, r1
    9ed0:	4323      	orrs	r3, r4
    9ed2:	4463      	add	r3, ip
    9ed4:	0004      	movs	r4, r0
    9ed6:	e747      	b.n	9d68 <__aeabi_fadd+0x12c>
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d118      	bne.n	9f0e <__aeabi_fadd+0x2d2>
    9edc:	1e3b      	subs	r3, r7, #0
    9ede:	d02d      	beq.n	9f3c <__aeabi_fadd+0x300>
    9ee0:	000d      	movs	r5, r1
    9ee2:	24ff      	movs	r4, #255	; 0xff
    9ee4:	e6e5      	b.n	9cb2 <__aeabi_fadd+0x76>
    9ee6:	003b      	movs	r3, r7
    9ee8:	0004      	movs	r4, r0
    9eea:	000d      	movs	r5, r1
    9eec:	e6e1      	b.n	9cb2 <__aeabi_fadd+0x76>
    9eee:	28ff      	cmp	r0, #255	; 0xff
    9ef0:	d01c      	beq.n	9f2c <__aeabi_fadd+0x2f0>
    9ef2:	2480      	movs	r4, #128	; 0x80
    9ef4:	04e4      	lsls	r4, r4, #19
    9ef6:	4249      	negs	r1, r1
    9ef8:	4323      	orrs	r3, r4
    9efa:	e7e0      	b.n	9ebe <__aeabi_fadd+0x282>
    9efc:	2f00      	cmp	r7, #0
    9efe:	d100      	bne.n	9f02 <__aeabi_fadd+0x2c6>
    9f00:	e6d7      	b.n	9cb2 <__aeabi_fadd+0x76>
    9f02:	1bde      	subs	r6, r3, r7
    9f04:	0172      	lsls	r2, r6, #5
    9f06:	d51f      	bpl.n	9f48 <__aeabi_fadd+0x30c>
    9f08:	1afb      	subs	r3, r7, r3
    9f0a:	000d      	movs	r5, r1
    9f0c:	e6d1      	b.n	9cb2 <__aeabi_fadd+0x76>
    9f0e:	24ff      	movs	r4, #255	; 0xff
    9f10:	2f00      	cmp	r7, #0
    9f12:	d100      	bne.n	9f16 <__aeabi_fadd+0x2da>
    9f14:	e6cd      	b.n	9cb2 <__aeabi_fadd+0x76>
    9f16:	2280      	movs	r2, #128	; 0x80
    9f18:	4640      	mov	r0, r8
    9f1a:	03d2      	lsls	r2, r2, #15
    9f1c:	4210      	tst	r0, r2
    9f1e:	d0af      	beq.n	9e80 <__aeabi_fadd+0x244>
    9f20:	4216      	tst	r6, r2
    9f22:	d1ad      	bne.n	9e80 <__aeabi_fadd+0x244>
    9f24:	003b      	movs	r3, r7
    9f26:	000d      	movs	r5, r1
    9f28:	24ff      	movs	r4, #255	; 0xff
    9f2a:	e6c2      	b.n	9cb2 <__aeabi_fadd+0x76>
    9f2c:	4663      	mov	r3, ip
    9f2e:	24ff      	movs	r4, #255	; 0xff
    9f30:	e6bf      	b.n	9cb2 <__aeabi_fadd+0x76>
    9f32:	2301      	movs	r3, #1
    9f34:	e77a      	b.n	9e2c <__aeabi_fadd+0x1f0>
    9f36:	003b      	movs	r3, r7
    9f38:	0004      	movs	r4, r0
    9f3a:	e6ba      	b.n	9cb2 <__aeabi_fadd+0x76>
    9f3c:	2680      	movs	r6, #128	; 0x80
    9f3e:	2200      	movs	r2, #0
    9f40:	03f6      	lsls	r6, r6, #15
    9f42:	e6f0      	b.n	9d26 <__aeabi_fadd+0xea>
    9f44:	003b      	movs	r3, r7
    9f46:	e6b4      	b.n	9cb2 <__aeabi_fadd+0x76>
    9f48:	1e33      	subs	r3, r6, #0
    9f4a:	d000      	beq.n	9f4e <__aeabi_fadd+0x312>
    9f4c:	e6e2      	b.n	9d14 <__aeabi_fadd+0xd8>
    9f4e:	2200      	movs	r2, #0
    9f50:	e721      	b.n	9d96 <__aeabi_fadd+0x15a>
    9f52:	2301      	movs	r3, #1
    9f54:	e7bd      	b.n	9ed2 <__aeabi_fadd+0x296>
    9f56:	46c0      	nop			; (mov r8, r8)
    9f58:	7dffffff 	.word	0x7dffffff
    9f5c:	fbffffff 	.word	0xfbffffff

00009f60 <__aeabi_fdiv>:
    9f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f62:	4657      	mov	r7, sl
    9f64:	464e      	mov	r6, r9
    9f66:	46de      	mov	lr, fp
    9f68:	4645      	mov	r5, r8
    9f6a:	b5e0      	push	{r5, r6, r7, lr}
    9f6c:	0244      	lsls	r4, r0, #9
    9f6e:	0043      	lsls	r3, r0, #1
    9f70:	0fc6      	lsrs	r6, r0, #31
    9f72:	b083      	sub	sp, #12
    9f74:	1c0f      	adds	r7, r1, #0
    9f76:	0a64      	lsrs	r4, r4, #9
    9f78:	0e1b      	lsrs	r3, r3, #24
    9f7a:	46b2      	mov	sl, r6
    9f7c:	d053      	beq.n	a026 <__aeabi_fdiv+0xc6>
    9f7e:	2bff      	cmp	r3, #255	; 0xff
    9f80:	d027      	beq.n	9fd2 <__aeabi_fdiv+0x72>
    9f82:	2280      	movs	r2, #128	; 0x80
    9f84:	00e4      	lsls	r4, r4, #3
    9f86:	04d2      	lsls	r2, r2, #19
    9f88:	4314      	orrs	r4, r2
    9f8a:	227f      	movs	r2, #127	; 0x7f
    9f8c:	4252      	negs	r2, r2
    9f8e:	4690      	mov	r8, r2
    9f90:	4498      	add	r8, r3
    9f92:	2300      	movs	r3, #0
    9f94:	4699      	mov	r9, r3
    9f96:	469b      	mov	fp, r3
    9f98:	027d      	lsls	r5, r7, #9
    9f9a:	0078      	lsls	r0, r7, #1
    9f9c:	0ffb      	lsrs	r3, r7, #31
    9f9e:	0a6d      	lsrs	r5, r5, #9
    9fa0:	0e00      	lsrs	r0, r0, #24
    9fa2:	9300      	str	r3, [sp, #0]
    9fa4:	d024      	beq.n	9ff0 <__aeabi_fdiv+0x90>
    9fa6:	28ff      	cmp	r0, #255	; 0xff
    9fa8:	d046      	beq.n	a038 <__aeabi_fdiv+0xd8>
    9faa:	2380      	movs	r3, #128	; 0x80
    9fac:	2100      	movs	r1, #0
    9fae:	00ed      	lsls	r5, r5, #3
    9fb0:	04db      	lsls	r3, r3, #19
    9fb2:	431d      	orrs	r5, r3
    9fb4:	387f      	subs	r0, #127	; 0x7f
    9fb6:	4647      	mov	r7, r8
    9fb8:	1a38      	subs	r0, r7, r0
    9fba:	464f      	mov	r7, r9
    9fbc:	430f      	orrs	r7, r1
    9fbe:	00bf      	lsls	r7, r7, #2
    9fc0:	46b9      	mov	r9, r7
    9fc2:	0033      	movs	r3, r6
    9fc4:	9a00      	ldr	r2, [sp, #0]
    9fc6:	4f87      	ldr	r7, [pc, #540]	; (a1e4 <__aeabi_fdiv+0x284>)
    9fc8:	4053      	eors	r3, r2
    9fca:	464a      	mov	r2, r9
    9fcc:	58ba      	ldr	r2, [r7, r2]
    9fce:	9301      	str	r3, [sp, #4]
    9fd0:	4697      	mov	pc, r2
    9fd2:	2c00      	cmp	r4, #0
    9fd4:	d14e      	bne.n	a074 <__aeabi_fdiv+0x114>
    9fd6:	2308      	movs	r3, #8
    9fd8:	4699      	mov	r9, r3
    9fda:	33f7      	adds	r3, #247	; 0xf7
    9fdc:	4698      	mov	r8, r3
    9fde:	3bfd      	subs	r3, #253	; 0xfd
    9fe0:	469b      	mov	fp, r3
    9fe2:	027d      	lsls	r5, r7, #9
    9fe4:	0078      	lsls	r0, r7, #1
    9fe6:	0ffb      	lsrs	r3, r7, #31
    9fe8:	0a6d      	lsrs	r5, r5, #9
    9fea:	0e00      	lsrs	r0, r0, #24
    9fec:	9300      	str	r3, [sp, #0]
    9fee:	d1da      	bne.n	9fa6 <__aeabi_fdiv+0x46>
    9ff0:	2d00      	cmp	r5, #0
    9ff2:	d126      	bne.n	a042 <__aeabi_fdiv+0xe2>
    9ff4:	2000      	movs	r0, #0
    9ff6:	2101      	movs	r1, #1
    9ff8:	0033      	movs	r3, r6
    9ffa:	9a00      	ldr	r2, [sp, #0]
    9ffc:	4f7a      	ldr	r7, [pc, #488]	; (a1e8 <__aeabi_fdiv+0x288>)
    9ffe:	4053      	eors	r3, r2
    a000:	4642      	mov	r2, r8
    a002:	1a10      	subs	r0, r2, r0
    a004:	464a      	mov	r2, r9
    a006:	430a      	orrs	r2, r1
    a008:	0092      	lsls	r2, r2, #2
    a00a:	58ba      	ldr	r2, [r7, r2]
    a00c:	001d      	movs	r5, r3
    a00e:	4697      	mov	pc, r2
    a010:	9b00      	ldr	r3, [sp, #0]
    a012:	002c      	movs	r4, r5
    a014:	469a      	mov	sl, r3
    a016:	468b      	mov	fp, r1
    a018:	465b      	mov	r3, fp
    a01a:	2b02      	cmp	r3, #2
    a01c:	d131      	bne.n	a082 <__aeabi_fdiv+0x122>
    a01e:	4653      	mov	r3, sl
    a020:	21ff      	movs	r1, #255	; 0xff
    a022:	2400      	movs	r4, #0
    a024:	e038      	b.n	a098 <__aeabi_fdiv+0x138>
    a026:	2c00      	cmp	r4, #0
    a028:	d117      	bne.n	a05a <__aeabi_fdiv+0xfa>
    a02a:	2304      	movs	r3, #4
    a02c:	4699      	mov	r9, r3
    a02e:	2300      	movs	r3, #0
    a030:	4698      	mov	r8, r3
    a032:	3301      	adds	r3, #1
    a034:	469b      	mov	fp, r3
    a036:	e7af      	b.n	9f98 <__aeabi_fdiv+0x38>
    a038:	20ff      	movs	r0, #255	; 0xff
    a03a:	2d00      	cmp	r5, #0
    a03c:	d10b      	bne.n	a056 <__aeabi_fdiv+0xf6>
    a03e:	2102      	movs	r1, #2
    a040:	e7da      	b.n	9ff8 <__aeabi_fdiv+0x98>
    a042:	0028      	movs	r0, r5
    a044:	f002 fb8a 	bl	c75c <__clzsi2>
    a048:	1f43      	subs	r3, r0, #5
    a04a:	409d      	lsls	r5, r3
    a04c:	2376      	movs	r3, #118	; 0x76
    a04e:	425b      	negs	r3, r3
    a050:	1a18      	subs	r0, r3, r0
    a052:	2100      	movs	r1, #0
    a054:	e7af      	b.n	9fb6 <__aeabi_fdiv+0x56>
    a056:	2103      	movs	r1, #3
    a058:	e7ad      	b.n	9fb6 <__aeabi_fdiv+0x56>
    a05a:	0020      	movs	r0, r4
    a05c:	f002 fb7e 	bl	c75c <__clzsi2>
    a060:	1f43      	subs	r3, r0, #5
    a062:	409c      	lsls	r4, r3
    a064:	2376      	movs	r3, #118	; 0x76
    a066:	425b      	negs	r3, r3
    a068:	1a1b      	subs	r3, r3, r0
    a06a:	4698      	mov	r8, r3
    a06c:	2300      	movs	r3, #0
    a06e:	4699      	mov	r9, r3
    a070:	469b      	mov	fp, r3
    a072:	e791      	b.n	9f98 <__aeabi_fdiv+0x38>
    a074:	230c      	movs	r3, #12
    a076:	4699      	mov	r9, r3
    a078:	33f3      	adds	r3, #243	; 0xf3
    a07a:	4698      	mov	r8, r3
    a07c:	3bfc      	subs	r3, #252	; 0xfc
    a07e:	469b      	mov	fp, r3
    a080:	e78a      	b.n	9f98 <__aeabi_fdiv+0x38>
    a082:	2b03      	cmp	r3, #3
    a084:	d100      	bne.n	a088 <__aeabi_fdiv+0x128>
    a086:	e0a5      	b.n	a1d4 <__aeabi_fdiv+0x274>
    a088:	4655      	mov	r5, sl
    a08a:	2b01      	cmp	r3, #1
    a08c:	d000      	beq.n	a090 <__aeabi_fdiv+0x130>
    a08e:	e081      	b.n	a194 <__aeabi_fdiv+0x234>
    a090:	2301      	movs	r3, #1
    a092:	2100      	movs	r1, #0
    a094:	2400      	movs	r4, #0
    a096:	402b      	ands	r3, r5
    a098:	0264      	lsls	r4, r4, #9
    a09a:	05c9      	lsls	r1, r1, #23
    a09c:	0a60      	lsrs	r0, r4, #9
    a09e:	07db      	lsls	r3, r3, #31
    a0a0:	4308      	orrs	r0, r1
    a0a2:	4318      	orrs	r0, r3
    a0a4:	b003      	add	sp, #12
    a0a6:	bc3c      	pop	{r2, r3, r4, r5}
    a0a8:	4690      	mov	r8, r2
    a0aa:	4699      	mov	r9, r3
    a0ac:	46a2      	mov	sl, r4
    a0ae:	46ab      	mov	fp, r5
    a0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0b2:	2480      	movs	r4, #128	; 0x80
    a0b4:	2300      	movs	r3, #0
    a0b6:	03e4      	lsls	r4, r4, #15
    a0b8:	21ff      	movs	r1, #255	; 0xff
    a0ba:	e7ed      	b.n	a098 <__aeabi_fdiv+0x138>
    a0bc:	21ff      	movs	r1, #255	; 0xff
    a0be:	2400      	movs	r4, #0
    a0c0:	e7ea      	b.n	a098 <__aeabi_fdiv+0x138>
    a0c2:	2301      	movs	r3, #1
    a0c4:	1a59      	subs	r1, r3, r1
    a0c6:	291b      	cmp	r1, #27
    a0c8:	dd66      	ble.n	a198 <__aeabi_fdiv+0x238>
    a0ca:	9a01      	ldr	r2, [sp, #4]
    a0cc:	4013      	ands	r3, r2
    a0ce:	2100      	movs	r1, #0
    a0d0:	2400      	movs	r4, #0
    a0d2:	e7e1      	b.n	a098 <__aeabi_fdiv+0x138>
    a0d4:	2380      	movs	r3, #128	; 0x80
    a0d6:	03db      	lsls	r3, r3, #15
    a0d8:	421c      	tst	r4, r3
    a0da:	d038      	beq.n	a14e <__aeabi_fdiv+0x1ee>
    a0dc:	421d      	tst	r5, r3
    a0de:	d051      	beq.n	a184 <__aeabi_fdiv+0x224>
    a0e0:	431c      	orrs	r4, r3
    a0e2:	0264      	lsls	r4, r4, #9
    a0e4:	0a64      	lsrs	r4, r4, #9
    a0e6:	0033      	movs	r3, r6
    a0e8:	21ff      	movs	r1, #255	; 0xff
    a0ea:	e7d5      	b.n	a098 <__aeabi_fdiv+0x138>
    a0ec:	0163      	lsls	r3, r4, #5
    a0ee:	016c      	lsls	r4, r5, #5
    a0f0:	42a3      	cmp	r3, r4
    a0f2:	d23b      	bcs.n	a16c <__aeabi_fdiv+0x20c>
    a0f4:	261b      	movs	r6, #27
    a0f6:	2100      	movs	r1, #0
    a0f8:	3801      	subs	r0, #1
    a0fa:	2501      	movs	r5, #1
    a0fc:	001f      	movs	r7, r3
    a0fe:	0049      	lsls	r1, r1, #1
    a100:	005b      	lsls	r3, r3, #1
    a102:	2f00      	cmp	r7, #0
    a104:	db01      	blt.n	a10a <__aeabi_fdiv+0x1aa>
    a106:	429c      	cmp	r4, r3
    a108:	d801      	bhi.n	a10e <__aeabi_fdiv+0x1ae>
    a10a:	1b1b      	subs	r3, r3, r4
    a10c:	4329      	orrs	r1, r5
    a10e:	3e01      	subs	r6, #1
    a110:	2e00      	cmp	r6, #0
    a112:	d1f3      	bne.n	a0fc <__aeabi_fdiv+0x19c>
    a114:	001c      	movs	r4, r3
    a116:	1e63      	subs	r3, r4, #1
    a118:	419c      	sbcs	r4, r3
    a11a:	430c      	orrs	r4, r1
    a11c:	0001      	movs	r1, r0
    a11e:	317f      	adds	r1, #127	; 0x7f
    a120:	2900      	cmp	r1, #0
    a122:	ddce      	ble.n	a0c2 <__aeabi_fdiv+0x162>
    a124:	0763      	lsls	r3, r4, #29
    a126:	d004      	beq.n	a132 <__aeabi_fdiv+0x1d2>
    a128:	230f      	movs	r3, #15
    a12a:	4023      	ands	r3, r4
    a12c:	2b04      	cmp	r3, #4
    a12e:	d000      	beq.n	a132 <__aeabi_fdiv+0x1d2>
    a130:	3404      	adds	r4, #4
    a132:	0123      	lsls	r3, r4, #4
    a134:	d503      	bpl.n	a13e <__aeabi_fdiv+0x1de>
    a136:	0001      	movs	r1, r0
    a138:	4b2c      	ldr	r3, [pc, #176]	; (a1ec <__aeabi_fdiv+0x28c>)
    a13a:	3180      	adds	r1, #128	; 0x80
    a13c:	401c      	ands	r4, r3
    a13e:	29fe      	cmp	r1, #254	; 0xfe
    a140:	dd0d      	ble.n	a15e <__aeabi_fdiv+0x1fe>
    a142:	2301      	movs	r3, #1
    a144:	9a01      	ldr	r2, [sp, #4]
    a146:	21ff      	movs	r1, #255	; 0xff
    a148:	4013      	ands	r3, r2
    a14a:	2400      	movs	r4, #0
    a14c:	e7a4      	b.n	a098 <__aeabi_fdiv+0x138>
    a14e:	2380      	movs	r3, #128	; 0x80
    a150:	03db      	lsls	r3, r3, #15
    a152:	431c      	orrs	r4, r3
    a154:	0264      	lsls	r4, r4, #9
    a156:	0a64      	lsrs	r4, r4, #9
    a158:	0033      	movs	r3, r6
    a15a:	21ff      	movs	r1, #255	; 0xff
    a15c:	e79c      	b.n	a098 <__aeabi_fdiv+0x138>
    a15e:	2301      	movs	r3, #1
    a160:	9a01      	ldr	r2, [sp, #4]
    a162:	01a4      	lsls	r4, r4, #6
    a164:	0a64      	lsrs	r4, r4, #9
    a166:	b2c9      	uxtb	r1, r1
    a168:	4013      	ands	r3, r2
    a16a:	e795      	b.n	a098 <__aeabi_fdiv+0x138>
    a16c:	1b1b      	subs	r3, r3, r4
    a16e:	261a      	movs	r6, #26
    a170:	2101      	movs	r1, #1
    a172:	e7c2      	b.n	a0fa <__aeabi_fdiv+0x19a>
    a174:	9b00      	ldr	r3, [sp, #0]
    a176:	468b      	mov	fp, r1
    a178:	469a      	mov	sl, r3
    a17a:	2400      	movs	r4, #0
    a17c:	e74c      	b.n	a018 <__aeabi_fdiv+0xb8>
    a17e:	0263      	lsls	r3, r4, #9
    a180:	d5e5      	bpl.n	a14e <__aeabi_fdiv+0x1ee>
    a182:	2500      	movs	r5, #0
    a184:	2480      	movs	r4, #128	; 0x80
    a186:	03e4      	lsls	r4, r4, #15
    a188:	432c      	orrs	r4, r5
    a18a:	0264      	lsls	r4, r4, #9
    a18c:	0a64      	lsrs	r4, r4, #9
    a18e:	9b00      	ldr	r3, [sp, #0]
    a190:	21ff      	movs	r1, #255	; 0xff
    a192:	e781      	b.n	a098 <__aeabi_fdiv+0x138>
    a194:	9501      	str	r5, [sp, #4]
    a196:	e7c1      	b.n	a11c <__aeabi_fdiv+0x1bc>
    a198:	0023      	movs	r3, r4
    a19a:	2020      	movs	r0, #32
    a19c:	40cb      	lsrs	r3, r1
    a19e:	1a41      	subs	r1, r0, r1
    a1a0:	408c      	lsls	r4, r1
    a1a2:	1e61      	subs	r1, r4, #1
    a1a4:	418c      	sbcs	r4, r1
    a1a6:	431c      	orrs	r4, r3
    a1a8:	0763      	lsls	r3, r4, #29
    a1aa:	d004      	beq.n	a1b6 <__aeabi_fdiv+0x256>
    a1ac:	230f      	movs	r3, #15
    a1ae:	4023      	ands	r3, r4
    a1b0:	2b04      	cmp	r3, #4
    a1b2:	d000      	beq.n	a1b6 <__aeabi_fdiv+0x256>
    a1b4:	3404      	adds	r4, #4
    a1b6:	0163      	lsls	r3, r4, #5
    a1b8:	d505      	bpl.n	a1c6 <__aeabi_fdiv+0x266>
    a1ba:	2301      	movs	r3, #1
    a1bc:	9a01      	ldr	r2, [sp, #4]
    a1be:	2101      	movs	r1, #1
    a1c0:	4013      	ands	r3, r2
    a1c2:	2400      	movs	r4, #0
    a1c4:	e768      	b.n	a098 <__aeabi_fdiv+0x138>
    a1c6:	2301      	movs	r3, #1
    a1c8:	9a01      	ldr	r2, [sp, #4]
    a1ca:	01a4      	lsls	r4, r4, #6
    a1cc:	0a64      	lsrs	r4, r4, #9
    a1ce:	4013      	ands	r3, r2
    a1d0:	2100      	movs	r1, #0
    a1d2:	e761      	b.n	a098 <__aeabi_fdiv+0x138>
    a1d4:	2380      	movs	r3, #128	; 0x80
    a1d6:	03db      	lsls	r3, r3, #15
    a1d8:	431c      	orrs	r4, r3
    a1da:	0264      	lsls	r4, r4, #9
    a1dc:	0a64      	lsrs	r4, r4, #9
    a1de:	4653      	mov	r3, sl
    a1e0:	21ff      	movs	r1, #255	; 0xff
    a1e2:	e759      	b.n	a098 <__aeabi_fdiv+0x138>
    a1e4:	000127a0 	.word	0x000127a0
    a1e8:	000127e0 	.word	0x000127e0
    a1ec:	f7ffffff 	.word	0xf7ffffff

0000a1f0 <__eqsf2>:
    a1f0:	b570      	push	{r4, r5, r6, lr}
    a1f2:	0042      	lsls	r2, r0, #1
    a1f4:	0245      	lsls	r5, r0, #9
    a1f6:	024e      	lsls	r6, r1, #9
    a1f8:	004c      	lsls	r4, r1, #1
    a1fa:	0fc3      	lsrs	r3, r0, #31
    a1fc:	0a6d      	lsrs	r5, r5, #9
    a1fe:	0e12      	lsrs	r2, r2, #24
    a200:	0a76      	lsrs	r6, r6, #9
    a202:	0e24      	lsrs	r4, r4, #24
    a204:	0fc9      	lsrs	r1, r1, #31
    a206:	2001      	movs	r0, #1
    a208:	2aff      	cmp	r2, #255	; 0xff
    a20a:	d006      	beq.n	a21a <__eqsf2+0x2a>
    a20c:	2cff      	cmp	r4, #255	; 0xff
    a20e:	d003      	beq.n	a218 <__eqsf2+0x28>
    a210:	42a2      	cmp	r2, r4
    a212:	d101      	bne.n	a218 <__eqsf2+0x28>
    a214:	42b5      	cmp	r5, r6
    a216:	d006      	beq.n	a226 <__eqsf2+0x36>
    a218:	bd70      	pop	{r4, r5, r6, pc}
    a21a:	2d00      	cmp	r5, #0
    a21c:	d1fc      	bne.n	a218 <__eqsf2+0x28>
    a21e:	2cff      	cmp	r4, #255	; 0xff
    a220:	d1fa      	bne.n	a218 <__eqsf2+0x28>
    a222:	2e00      	cmp	r6, #0
    a224:	d1f8      	bne.n	a218 <__eqsf2+0x28>
    a226:	428b      	cmp	r3, r1
    a228:	d006      	beq.n	a238 <__eqsf2+0x48>
    a22a:	2001      	movs	r0, #1
    a22c:	2a00      	cmp	r2, #0
    a22e:	d1f3      	bne.n	a218 <__eqsf2+0x28>
    a230:	0028      	movs	r0, r5
    a232:	1e45      	subs	r5, r0, #1
    a234:	41a8      	sbcs	r0, r5
    a236:	e7ef      	b.n	a218 <__eqsf2+0x28>
    a238:	2000      	movs	r0, #0
    a23a:	e7ed      	b.n	a218 <__eqsf2+0x28>

0000a23c <__gesf2>:
    a23c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a23e:	0042      	lsls	r2, r0, #1
    a240:	0245      	lsls	r5, r0, #9
    a242:	024c      	lsls	r4, r1, #9
    a244:	0fc3      	lsrs	r3, r0, #31
    a246:	0048      	lsls	r0, r1, #1
    a248:	0a6d      	lsrs	r5, r5, #9
    a24a:	0e12      	lsrs	r2, r2, #24
    a24c:	0a64      	lsrs	r4, r4, #9
    a24e:	0e00      	lsrs	r0, r0, #24
    a250:	0fc9      	lsrs	r1, r1, #31
    a252:	2aff      	cmp	r2, #255	; 0xff
    a254:	d01e      	beq.n	a294 <__gesf2+0x58>
    a256:	28ff      	cmp	r0, #255	; 0xff
    a258:	d021      	beq.n	a29e <__gesf2+0x62>
    a25a:	2a00      	cmp	r2, #0
    a25c:	d10a      	bne.n	a274 <__gesf2+0x38>
    a25e:	426e      	negs	r6, r5
    a260:	416e      	adcs	r6, r5
    a262:	b2f6      	uxtb	r6, r6
    a264:	2800      	cmp	r0, #0
    a266:	d10f      	bne.n	a288 <__gesf2+0x4c>
    a268:	2c00      	cmp	r4, #0
    a26a:	d10d      	bne.n	a288 <__gesf2+0x4c>
    a26c:	2000      	movs	r0, #0
    a26e:	2d00      	cmp	r5, #0
    a270:	d009      	beq.n	a286 <__gesf2+0x4a>
    a272:	e005      	b.n	a280 <__gesf2+0x44>
    a274:	2800      	cmp	r0, #0
    a276:	d101      	bne.n	a27c <__gesf2+0x40>
    a278:	2c00      	cmp	r4, #0
    a27a:	d001      	beq.n	a280 <__gesf2+0x44>
    a27c:	428b      	cmp	r3, r1
    a27e:	d011      	beq.n	a2a4 <__gesf2+0x68>
    a280:	2101      	movs	r1, #1
    a282:	4258      	negs	r0, r3
    a284:	4308      	orrs	r0, r1
    a286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a288:	2e00      	cmp	r6, #0
    a28a:	d0f7      	beq.n	a27c <__gesf2+0x40>
    a28c:	2001      	movs	r0, #1
    a28e:	3901      	subs	r1, #1
    a290:	4308      	orrs	r0, r1
    a292:	e7f8      	b.n	a286 <__gesf2+0x4a>
    a294:	2d00      	cmp	r5, #0
    a296:	d0de      	beq.n	a256 <__gesf2+0x1a>
    a298:	2002      	movs	r0, #2
    a29a:	4240      	negs	r0, r0
    a29c:	e7f3      	b.n	a286 <__gesf2+0x4a>
    a29e:	2c00      	cmp	r4, #0
    a2a0:	d0db      	beq.n	a25a <__gesf2+0x1e>
    a2a2:	e7f9      	b.n	a298 <__gesf2+0x5c>
    a2a4:	4282      	cmp	r2, r0
    a2a6:	dceb      	bgt.n	a280 <__gesf2+0x44>
    a2a8:	db04      	blt.n	a2b4 <__gesf2+0x78>
    a2aa:	42a5      	cmp	r5, r4
    a2ac:	d8e8      	bhi.n	a280 <__gesf2+0x44>
    a2ae:	2000      	movs	r0, #0
    a2b0:	42a5      	cmp	r5, r4
    a2b2:	d2e8      	bcs.n	a286 <__gesf2+0x4a>
    a2b4:	2101      	movs	r1, #1
    a2b6:	1e58      	subs	r0, r3, #1
    a2b8:	4308      	orrs	r0, r1
    a2ba:	e7e4      	b.n	a286 <__gesf2+0x4a>

0000a2bc <__lesf2>:
    a2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2be:	0042      	lsls	r2, r0, #1
    a2c0:	024d      	lsls	r5, r1, #9
    a2c2:	004c      	lsls	r4, r1, #1
    a2c4:	0246      	lsls	r6, r0, #9
    a2c6:	0a76      	lsrs	r6, r6, #9
    a2c8:	0e12      	lsrs	r2, r2, #24
    a2ca:	0fc3      	lsrs	r3, r0, #31
    a2cc:	0a6d      	lsrs	r5, r5, #9
    a2ce:	0e24      	lsrs	r4, r4, #24
    a2d0:	0fc9      	lsrs	r1, r1, #31
    a2d2:	2aff      	cmp	r2, #255	; 0xff
    a2d4:	d016      	beq.n	a304 <__lesf2+0x48>
    a2d6:	2cff      	cmp	r4, #255	; 0xff
    a2d8:	d018      	beq.n	a30c <__lesf2+0x50>
    a2da:	2a00      	cmp	r2, #0
    a2dc:	d10a      	bne.n	a2f4 <__lesf2+0x38>
    a2de:	4270      	negs	r0, r6
    a2e0:	4170      	adcs	r0, r6
    a2e2:	b2c0      	uxtb	r0, r0
    a2e4:	2c00      	cmp	r4, #0
    a2e6:	d015      	beq.n	a314 <__lesf2+0x58>
    a2e8:	2800      	cmp	r0, #0
    a2ea:	d005      	beq.n	a2f8 <__lesf2+0x3c>
    a2ec:	2001      	movs	r0, #1
    a2ee:	3901      	subs	r1, #1
    a2f0:	4308      	orrs	r0, r1
    a2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2f4:	2c00      	cmp	r4, #0
    a2f6:	d013      	beq.n	a320 <__lesf2+0x64>
    a2f8:	4299      	cmp	r1, r3
    a2fa:	d014      	beq.n	a326 <__lesf2+0x6a>
    a2fc:	2001      	movs	r0, #1
    a2fe:	425b      	negs	r3, r3
    a300:	4318      	orrs	r0, r3
    a302:	e7f6      	b.n	a2f2 <__lesf2+0x36>
    a304:	2002      	movs	r0, #2
    a306:	2e00      	cmp	r6, #0
    a308:	d1f3      	bne.n	a2f2 <__lesf2+0x36>
    a30a:	e7e4      	b.n	a2d6 <__lesf2+0x1a>
    a30c:	2002      	movs	r0, #2
    a30e:	2d00      	cmp	r5, #0
    a310:	d1ef      	bne.n	a2f2 <__lesf2+0x36>
    a312:	e7e2      	b.n	a2da <__lesf2+0x1e>
    a314:	2d00      	cmp	r5, #0
    a316:	d1e7      	bne.n	a2e8 <__lesf2+0x2c>
    a318:	2000      	movs	r0, #0
    a31a:	2e00      	cmp	r6, #0
    a31c:	d0e9      	beq.n	a2f2 <__lesf2+0x36>
    a31e:	e7ed      	b.n	a2fc <__lesf2+0x40>
    a320:	2d00      	cmp	r5, #0
    a322:	d1e9      	bne.n	a2f8 <__lesf2+0x3c>
    a324:	e7ea      	b.n	a2fc <__lesf2+0x40>
    a326:	42a2      	cmp	r2, r4
    a328:	dc06      	bgt.n	a338 <__lesf2+0x7c>
    a32a:	dbdf      	blt.n	a2ec <__lesf2+0x30>
    a32c:	42ae      	cmp	r6, r5
    a32e:	d803      	bhi.n	a338 <__lesf2+0x7c>
    a330:	2000      	movs	r0, #0
    a332:	42ae      	cmp	r6, r5
    a334:	d3da      	bcc.n	a2ec <__lesf2+0x30>
    a336:	e7dc      	b.n	a2f2 <__lesf2+0x36>
    a338:	2001      	movs	r0, #1
    a33a:	4249      	negs	r1, r1
    a33c:	4308      	orrs	r0, r1
    a33e:	e7d8      	b.n	a2f2 <__lesf2+0x36>

0000a340 <__aeabi_fmul>:
    a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a342:	4657      	mov	r7, sl
    a344:	464e      	mov	r6, r9
    a346:	4645      	mov	r5, r8
    a348:	46de      	mov	lr, fp
    a34a:	b5e0      	push	{r5, r6, r7, lr}
    a34c:	0247      	lsls	r7, r0, #9
    a34e:	0046      	lsls	r6, r0, #1
    a350:	4688      	mov	r8, r1
    a352:	0a7f      	lsrs	r7, r7, #9
    a354:	0e36      	lsrs	r6, r6, #24
    a356:	0fc4      	lsrs	r4, r0, #31
    a358:	2e00      	cmp	r6, #0
    a35a:	d047      	beq.n	a3ec <__aeabi_fmul+0xac>
    a35c:	2eff      	cmp	r6, #255	; 0xff
    a35e:	d024      	beq.n	a3aa <__aeabi_fmul+0x6a>
    a360:	00fb      	lsls	r3, r7, #3
    a362:	2780      	movs	r7, #128	; 0x80
    a364:	04ff      	lsls	r7, r7, #19
    a366:	431f      	orrs	r7, r3
    a368:	2300      	movs	r3, #0
    a36a:	4699      	mov	r9, r3
    a36c:	469a      	mov	sl, r3
    a36e:	3e7f      	subs	r6, #127	; 0x7f
    a370:	4643      	mov	r3, r8
    a372:	025d      	lsls	r5, r3, #9
    a374:	0058      	lsls	r0, r3, #1
    a376:	0fdb      	lsrs	r3, r3, #31
    a378:	0a6d      	lsrs	r5, r5, #9
    a37a:	0e00      	lsrs	r0, r0, #24
    a37c:	4698      	mov	r8, r3
    a37e:	d043      	beq.n	a408 <__aeabi_fmul+0xc8>
    a380:	28ff      	cmp	r0, #255	; 0xff
    a382:	d03b      	beq.n	a3fc <__aeabi_fmul+0xbc>
    a384:	00eb      	lsls	r3, r5, #3
    a386:	2580      	movs	r5, #128	; 0x80
    a388:	2200      	movs	r2, #0
    a38a:	04ed      	lsls	r5, r5, #19
    a38c:	431d      	orrs	r5, r3
    a38e:	387f      	subs	r0, #127	; 0x7f
    a390:	1836      	adds	r6, r6, r0
    a392:	1c73      	adds	r3, r6, #1
    a394:	4641      	mov	r1, r8
    a396:	469b      	mov	fp, r3
    a398:	464b      	mov	r3, r9
    a39a:	4061      	eors	r1, r4
    a39c:	4313      	orrs	r3, r2
    a39e:	2b0f      	cmp	r3, #15
    a3a0:	d864      	bhi.n	a46c <__aeabi_fmul+0x12c>
    a3a2:	4875      	ldr	r0, [pc, #468]	; (a578 <__aeabi_fmul+0x238>)
    a3a4:	009b      	lsls	r3, r3, #2
    a3a6:	58c3      	ldr	r3, [r0, r3]
    a3a8:	469f      	mov	pc, r3
    a3aa:	2f00      	cmp	r7, #0
    a3ac:	d142      	bne.n	a434 <__aeabi_fmul+0xf4>
    a3ae:	2308      	movs	r3, #8
    a3b0:	4699      	mov	r9, r3
    a3b2:	3b06      	subs	r3, #6
    a3b4:	26ff      	movs	r6, #255	; 0xff
    a3b6:	469a      	mov	sl, r3
    a3b8:	e7da      	b.n	a370 <__aeabi_fmul+0x30>
    a3ba:	4641      	mov	r1, r8
    a3bc:	2a02      	cmp	r2, #2
    a3be:	d028      	beq.n	a412 <__aeabi_fmul+0xd2>
    a3c0:	2a03      	cmp	r2, #3
    a3c2:	d100      	bne.n	a3c6 <__aeabi_fmul+0x86>
    a3c4:	e0ce      	b.n	a564 <__aeabi_fmul+0x224>
    a3c6:	2a01      	cmp	r2, #1
    a3c8:	d000      	beq.n	a3cc <__aeabi_fmul+0x8c>
    a3ca:	e0ac      	b.n	a526 <__aeabi_fmul+0x1e6>
    a3cc:	4011      	ands	r1, r2
    a3ce:	2000      	movs	r0, #0
    a3d0:	2200      	movs	r2, #0
    a3d2:	b2cc      	uxtb	r4, r1
    a3d4:	0240      	lsls	r0, r0, #9
    a3d6:	05d2      	lsls	r2, r2, #23
    a3d8:	0a40      	lsrs	r0, r0, #9
    a3da:	07e4      	lsls	r4, r4, #31
    a3dc:	4310      	orrs	r0, r2
    a3de:	4320      	orrs	r0, r4
    a3e0:	bc3c      	pop	{r2, r3, r4, r5}
    a3e2:	4690      	mov	r8, r2
    a3e4:	4699      	mov	r9, r3
    a3e6:	46a2      	mov	sl, r4
    a3e8:	46ab      	mov	fp, r5
    a3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3ec:	2f00      	cmp	r7, #0
    a3ee:	d115      	bne.n	a41c <__aeabi_fmul+0xdc>
    a3f0:	2304      	movs	r3, #4
    a3f2:	4699      	mov	r9, r3
    a3f4:	3b03      	subs	r3, #3
    a3f6:	2600      	movs	r6, #0
    a3f8:	469a      	mov	sl, r3
    a3fa:	e7b9      	b.n	a370 <__aeabi_fmul+0x30>
    a3fc:	20ff      	movs	r0, #255	; 0xff
    a3fe:	2202      	movs	r2, #2
    a400:	2d00      	cmp	r5, #0
    a402:	d0c5      	beq.n	a390 <__aeabi_fmul+0x50>
    a404:	2203      	movs	r2, #3
    a406:	e7c3      	b.n	a390 <__aeabi_fmul+0x50>
    a408:	2d00      	cmp	r5, #0
    a40a:	d119      	bne.n	a440 <__aeabi_fmul+0x100>
    a40c:	2000      	movs	r0, #0
    a40e:	2201      	movs	r2, #1
    a410:	e7be      	b.n	a390 <__aeabi_fmul+0x50>
    a412:	2401      	movs	r4, #1
    a414:	22ff      	movs	r2, #255	; 0xff
    a416:	400c      	ands	r4, r1
    a418:	2000      	movs	r0, #0
    a41a:	e7db      	b.n	a3d4 <__aeabi_fmul+0x94>
    a41c:	0038      	movs	r0, r7
    a41e:	f002 f99d 	bl	c75c <__clzsi2>
    a422:	2676      	movs	r6, #118	; 0x76
    a424:	1f43      	subs	r3, r0, #5
    a426:	409f      	lsls	r7, r3
    a428:	2300      	movs	r3, #0
    a42a:	4276      	negs	r6, r6
    a42c:	1a36      	subs	r6, r6, r0
    a42e:	4699      	mov	r9, r3
    a430:	469a      	mov	sl, r3
    a432:	e79d      	b.n	a370 <__aeabi_fmul+0x30>
    a434:	230c      	movs	r3, #12
    a436:	4699      	mov	r9, r3
    a438:	3b09      	subs	r3, #9
    a43a:	26ff      	movs	r6, #255	; 0xff
    a43c:	469a      	mov	sl, r3
    a43e:	e797      	b.n	a370 <__aeabi_fmul+0x30>
    a440:	0028      	movs	r0, r5
    a442:	f002 f98b 	bl	c75c <__clzsi2>
    a446:	1f43      	subs	r3, r0, #5
    a448:	409d      	lsls	r5, r3
    a44a:	2376      	movs	r3, #118	; 0x76
    a44c:	425b      	negs	r3, r3
    a44e:	1a18      	subs	r0, r3, r0
    a450:	2200      	movs	r2, #0
    a452:	e79d      	b.n	a390 <__aeabi_fmul+0x50>
    a454:	2080      	movs	r0, #128	; 0x80
    a456:	2400      	movs	r4, #0
    a458:	03c0      	lsls	r0, r0, #15
    a45a:	22ff      	movs	r2, #255	; 0xff
    a45c:	e7ba      	b.n	a3d4 <__aeabi_fmul+0x94>
    a45e:	003d      	movs	r5, r7
    a460:	4652      	mov	r2, sl
    a462:	e7ab      	b.n	a3bc <__aeabi_fmul+0x7c>
    a464:	003d      	movs	r5, r7
    a466:	0021      	movs	r1, r4
    a468:	4652      	mov	r2, sl
    a46a:	e7a7      	b.n	a3bc <__aeabi_fmul+0x7c>
    a46c:	0c3b      	lsrs	r3, r7, #16
    a46e:	469c      	mov	ip, r3
    a470:	042a      	lsls	r2, r5, #16
    a472:	0c12      	lsrs	r2, r2, #16
    a474:	0c2b      	lsrs	r3, r5, #16
    a476:	0014      	movs	r4, r2
    a478:	4660      	mov	r0, ip
    a47a:	4665      	mov	r5, ip
    a47c:	043f      	lsls	r7, r7, #16
    a47e:	0c3f      	lsrs	r7, r7, #16
    a480:	437c      	muls	r4, r7
    a482:	4342      	muls	r2, r0
    a484:	435d      	muls	r5, r3
    a486:	437b      	muls	r3, r7
    a488:	0c27      	lsrs	r7, r4, #16
    a48a:	189b      	adds	r3, r3, r2
    a48c:	18ff      	adds	r7, r7, r3
    a48e:	42ba      	cmp	r2, r7
    a490:	d903      	bls.n	a49a <__aeabi_fmul+0x15a>
    a492:	2380      	movs	r3, #128	; 0x80
    a494:	025b      	lsls	r3, r3, #9
    a496:	469c      	mov	ip, r3
    a498:	4465      	add	r5, ip
    a49a:	0424      	lsls	r4, r4, #16
    a49c:	043a      	lsls	r2, r7, #16
    a49e:	0c24      	lsrs	r4, r4, #16
    a4a0:	1912      	adds	r2, r2, r4
    a4a2:	0193      	lsls	r3, r2, #6
    a4a4:	1e5c      	subs	r4, r3, #1
    a4a6:	41a3      	sbcs	r3, r4
    a4a8:	0c3f      	lsrs	r7, r7, #16
    a4aa:	0e92      	lsrs	r2, r2, #26
    a4ac:	197d      	adds	r5, r7, r5
    a4ae:	431a      	orrs	r2, r3
    a4b0:	01ad      	lsls	r5, r5, #6
    a4b2:	4315      	orrs	r5, r2
    a4b4:	012b      	lsls	r3, r5, #4
    a4b6:	d504      	bpl.n	a4c2 <__aeabi_fmul+0x182>
    a4b8:	2301      	movs	r3, #1
    a4ba:	465e      	mov	r6, fp
    a4bc:	086a      	lsrs	r2, r5, #1
    a4be:	401d      	ands	r5, r3
    a4c0:	4315      	orrs	r5, r2
    a4c2:	0032      	movs	r2, r6
    a4c4:	327f      	adds	r2, #127	; 0x7f
    a4c6:	2a00      	cmp	r2, #0
    a4c8:	dd25      	ble.n	a516 <__aeabi_fmul+0x1d6>
    a4ca:	076b      	lsls	r3, r5, #29
    a4cc:	d004      	beq.n	a4d8 <__aeabi_fmul+0x198>
    a4ce:	230f      	movs	r3, #15
    a4d0:	402b      	ands	r3, r5
    a4d2:	2b04      	cmp	r3, #4
    a4d4:	d000      	beq.n	a4d8 <__aeabi_fmul+0x198>
    a4d6:	3504      	adds	r5, #4
    a4d8:	012b      	lsls	r3, r5, #4
    a4da:	d503      	bpl.n	a4e4 <__aeabi_fmul+0x1a4>
    a4dc:	0032      	movs	r2, r6
    a4de:	4b27      	ldr	r3, [pc, #156]	; (a57c <__aeabi_fmul+0x23c>)
    a4e0:	3280      	adds	r2, #128	; 0x80
    a4e2:	401d      	ands	r5, r3
    a4e4:	2afe      	cmp	r2, #254	; 0xfe
    a4e6:	dc94      	bgt.n	a412 <__aeabi_fmul+0xd2>
    a4e8:	2401      	movs	r4, #1
    a4ea:	01a8      	lsls	r0, r5, #6
    a4ec:	0a40      	lsrs	r0, r0, #9
    a4ee:	b2d2      	uxtb	r2, r2
    a4f0:	400c      	ands	r4, r1
    a4f2:	e76f      	b.n	a3d4 <__aeabi_fmul+0x94>
    a4f4:	2080      	movs	r0, #128	; 0x80
    a4f6:	03c0      	lsls	r0, r0, #15
    a4f8:	4207      	tst	r7, r0
    a4fa:	d007      	beq.n	a50c <__aeabi_fmul+0x1cc>
    a4fc:	4205      	tst	r5, r0
    a4fe:	d105      	bne.n	a50c <__aeabi_fmul+0x1cc>
    a500:	4328      	orrs	r0, r5
    a502:	0240      	lsls	r0, r0, #9
    a504:	0a40      	lsrs	r0, r0, #9
    a506:	4644      	mov	r4, r8
    a508:	22ff      	movs	r2, #255	; 0xff
    a50a:	e763      	b.n	a3d4 <__aeabi_fmul+0x94>
    a50c:	4338      	orrs	r0, r7
    a50e:	0240      	lsls	r0, r0, #9
    a510:	0a40      	lsrs	r0, r0, #9
    a512:	22ff      	movs	r2, #255	; 0xff
    a514:	e75e      	b.n	a3d4 <__aeabi_fmul+0x94>
    a516:	2401      	movs	r4, #1
    a518:	1aa3      	subs	r3, r4, r2
    a51a:	2b1b      	cmp	r3, #27
    a51c:	dd05      	ble.n	a52a <__aeabi_fmul+0x1ea>
    a51e:	400c      	ands	r4, r1
    a520:	2200      	movs	r2, #0
    a522:	2000      	movs	r0, #0
    a524:	e756      	b.n	a3d4 <__aeabi_fmul+0x94>
    a526:	465e      	mov	r6, fp
    a528:	e7cb      	b.n	a4c2 <__aeabi_fmul+0x182>
    a52a:	002a      	movs	r2, r5
    a52c:	2020      	movs	r0, #32
    a52e:	40da      	lsrs	r2, r3
    a530:	1ac3      	subs	r3, r0, r3
    a532:	409d      	lsls	r5, r3
    a534:	002b      	movs	r3, r5
    a536:	1e5d      	subs	r5, r3, #1
    a538:	41ab      	sbcs	r3, r5
    a53a:	4313      	orrs	r3, r2
    a53c:	075a      	lsls	r2, r3, #29
    a53e:	d004      	beq.n	a54a <__aeabi_fmul+0x20a>
    a540:	220f      	movs	r2, #15
    a542:	401a      	ands	r2, r3
    a544:	2a04      	cmp	r2, #4
    a546:	d000      	beq.n	a54a <__aeabi_fmul+0x20a>
    a548:	3304      	adds	r3, #4
    a54a:	015a      	lsls	r2, r3, #5
    a54c:	d504      	bpl.n	a558 <__aeabi_fmul+0x218>
    a54e:	2401      	movs	r4, #1
    a550:	2201      	movs	r2, #1
    a552:	400c      	ands	r4, r1
    a554:	2000      	movs	r0, #0
    a556:	e73d      	b.n	a3d4 <__aeabi_fmul+0x94>
    a558:	2401      	movs	r4, #1
    a55a:	019b      	lsls	r3, r3, #6
    a55c:	0a58      	lsrs	r0, r3, #9
    a55e:	400c      	ands	r4, r1
    a560:	2200      	movs	r2, #0
    a562:	e737      	b.n	a3d4 <__aeabi_fmul+0x94>
    a564:	2080      	movs	r0, #128	; 0x80
    a566:	2401      	movs	r4, #1
    a568:	03c0      	lsls	r0, r0, #15
    a56a:	4328      	orrs	r0, r5
    a56c:	0240      	lsls	r0, r0, #9
    a56e:	0a40      	lsrs	r0, r0, #9
    a570:	400c      	ands	r4, r1
    a572:	22ff      	movs	r2, #255	; 0xff
    a574:	e72e      	b.n	a3d4 <__aeabi_fmul+0x94>
    a576:	46c0      	nop			; (mov r8, r8)
    a578:	00012820 	.word	0x00012820
    a57c:	f7ffffff 	.word	0xf7ffffff

0000a580 <__aeabi_fsub>:
    a580:	b5f0      	push	{r4, r5, r6, r7, lr}
    a582:	464f      	mov	r7, r9
    a584:	46d6      	mov	lr, sl
    a586:	4646      	mov	r6, r8
    a588:	0044      	lsls	r4, r0, #1
    a58a:	b5c0      	push	{r6, r7, lr}
    a58c:	0fc2      	lsrs	r2, r0, #31
    a58e:	0247      	lsls	r7, r0, #9
    a590:	0248      	lsls	r0, r1, #9
    a592:	0a40      	lsrs	r0, r0, #9
    a594:	4684      	mov	ip, r0
    a596:	4666      	mov	r6, ip
    a598:	0a7b      	lsrs	r3, r7, #9
    a59a:	0048      	lsls	r0, r1, #1
    a59c:	0fc9      	lsrs	r1, r1, #31
    a59e:	469a      	mov	sl, r3
    a5a0:	0e24      	lsrs	r4, r4, #24
    a5a2:	0015      	movs	r5, r2
    a5a4:	00db      	lsls	r3, r3, #3
    a5a6:	0e00      	lsrs	r0, r0, #24
    a5a8:	4689      	mov	r9, r1
    a5aa:	00f6      	lsls	r6, r6, #3
    a5ac:	28ff      	cmp	r0, #255	; 0xff
    a5ae:	d100      	bne.n	a5b2 <__aeabi_fsub+0x32>
    a5b0:	e08f      	b.n	a6d2 <__aeabi_fsub+0x152>
    a5b2:	2101      	movs	r1, #1
    a5b4:	464f      	mov	r7, r9
    a5b6:	404f      	eors	r7, r1
    a5b8:	0039      	movs	r1, r7
    a5ba:	4291      	cmp	r1, r2
    a5bc:	d066      	beq.n	a68c <__aeabi_fsub+0x10c>
    a5be:	1a22      	subs	r2, r4, r0
    a5c0:	2a00      	cmp	r2, #0
    a5c2:	dc00      	bgt.n	a5c6 <__aeabi_fsub+0x46>
    a5c4:	e09d      	b.n	a702 <__aeabi_fsub+0x182>
    a5c6:	2800      	cmp	r0, #0
    a5c8:	d13d      	bne.n	a646 <__aeabi_fsub+0xc6>
    a5ca:	2e00      	cmp	r6, #0
    a5cc:	d100      	bne.n	a5d0 <__aeabi_fsub+0x50>
    a5ce:	e08b      	b.n	a6e8 <__aeabi_fsub+0x168>
    a5d0:	1e51      	subs	r1, r2, #1
    a5d2:	2900      	cmp	r1, #0
    a5d4:	d000      	beq.n	a5d8 <__aeabi_fsub+0x58>
    a5d6:	e0b5      	b.n	a744 <__aeabi_fsub+0x1c4>
    a5d8:	2401      	movs	r4, #1
    a5da:	1b9b      	subs	r3, r3, r6
    a5dc:	015a      	lsls	r2, r3, #5
    a5de:	d544      	bpl.n	a66a <__aeabi_fsub+0xea>
    a5e0:	019b      	lsls	r3, r3, #6
    a5e2:	099f      	lsrs	r7, r3, #6
    a5e4:	0038      	movs	r0, r7
    a5e6:	f002 f8b9 	bl	c75c <__clzsi2>
    a5ea:	3805      	subs	r0, #5
    a5ec:	4087      	lsls	r7, r0
    a5ee:	4284      	cmp	r4, r0
    a5f0:	dd00      	ble.n	a5f4 <__aeabi_fsub+0x74>
    a5f2:	e096      	b.n	a722 <__aeabi_fsub+0x1a2>
    a5f4:	1b04      	subs	r4, r0, r4
    a5f6:	003a      	movs	r2, r7
    a5f8:	2020      	movs	r0, #32
    a5fa:	3401      	adds	r4, #1
    a5fc:	40e2      	lsrs	r2, r4
    a5fe:	1b04      	subs	r4, r0, r4
    a600:	40a7      	lsls	r7, r4
    a602:	003b      	movs	r3, r7
    a604:	1e5f      	subs	r7, r3, #1
    a606:	41bb      	sbcs	r3, r7
    a608:	2400      	movs	r4, #0
    a60a:	4313      	orrs	r3, r2
    a60c:	075a      	lsls	r2, r3, #29
    a60e:	d004      	beq.n	a61a <__aeabi_fsub+0x9a>
    a610:	220f      	movs	r2, #15
    a612:	401a      	ands	r2, r3
    a614:	2a04      	cmp	r2, #4
    a616:	d000      	beq.n	a61a <__aeabi_fsub+0x9a>
    a618:	3304      	adds	r3, #4
    a61a:	015a      	lsls	r2, r3, #5
    a61c:	d527      	bpl.n	a66e <__aeabi_fsub+0xee>
    a61e:	3401      	adds	r4, #1
    a620:	2cff      	cmp	r4, #255	; 0xff
    a622:	d100      	bne.n	a626 <__aeabi_fsub+0xa6>
    a624:	e079      	b.n	a71a <__aeabi_fsub+0x19a>
    a626:	2201      	movs	r2, #1
    a628:	019b      	lsls	r3, r3, #6
    a62a:	0a5b      	lsrs	r3, r3, #9
    a62c:	b2e4      	uxtb	r4, r4
    a62e:	402a      	ands	r2, r5
    a630:	025b      	lsls	r3, r3, #9
    a632:	05e4      	lsls	r4, r4, #23
    a634:	0a58      	lsrs	r0, r3, #9
    a636:	07d2      	lsls	r2, r2, #31
    a638:	4320      	orrs	r0, r4
    a63a:	4310      	orrs	r0, r2
    a63c:	bc1c      	pop	{r2, r3, r4}
    a63e:	4690      	mov	r8, r2
    a640:	4699      	mov	r9, r3
    a642:	46a2      	mov	sl, r4
    a644:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a646:	2cff      	cmp	r4, #255	; 0xff
    a648:	d0e0      	beq.n	a60c <__aeabi_fsub+0x8c>
    a64a:	2180      	movs	r1, #128	; 0x80
    a64c:	04c9      	lsls	r1, r1, #19
    a64e:	430e      	orrs	r6, r1
    a650:	2a1b      	cmp	r2, #27
    a652:	dc7b      	bgt.n	a74c <__aeabi_fsub+0x1cc>
    a654:	0031      	movs	r1, r6
    a656:	2020      	movs	r0, #32
    a658:	40d1      	lsrs	r1, r2
    a65a:	1a82      	subs	r2, r0, r2
    a65c:	4096      	lsls	r6, r2
    a65e:	1e72      	subs	r2, r6, #1
    a660:	4196      	sbcs	r6, r2
    a662:	430e      	orrs	r6, r1
    a664:	1b9b      	subs	r3, r3, r6
    a666:	015a      	lsls	r2, r3, #5
    a668:	d4ba      	bmi.n	a5e0 <__aeabi_fsub+0x60>
    a66a:	075a      	lsls	r2, r3, #29
    a66c:	d1d0      	bne.n	a610 <__aeabi_fsub+0x90>
    a66e:	2201      	movs	r2, #1
    a670:	08df      	lsrs	r7, r3, #3
    a672:	402a      	ands	r2, r5
    a674:	2cff      	cmp	r4, #255	; 0xff
    a676:	d133      	bne.n	a6e0 <__aeabi_fsub+0x160>
    a678:	2f00      	cmp	r7, #0
    a67a:	d100      	bne.n	a67e <__aeabi_fsub+0xfe>
    a67c:	e0a8      	b.n	a7d0 <__aeabi_fsub+0x250>
    a67e:	2380      	movs	r3, #128	; 0x80
    a680:	03db      	lsls	r3, r3, #15
    a682:	433b      	orrs	r3, r7
    a684:	025b      	lsls	r3, r3, #9
    a686:	0a5b      	lsrs	r3, r3, #9
    a688:	24ff      	movs	r4, #255	; 0xff
    a68a:	e7d1      	b.n	a630 <__aeabi_fsub+0xb0>
    a68c:	1a21      	subs	r1, r4, r0
    a68e:	2900      	cmp	r1, #0
    a690:	dd4c      	ble.n	a72c <__aeabi_fsub+0x1ac>
    a692:	2800      	cmp	r0, #0
    a694:	d02a      	beq.n	a6ec <__aeabi_fsub+0x16c>
    a696:	2cff      	cmp	r4, #255	; 0xff
    a698:	d0b8      	beq.n	a60c <__aeabi_fsub+0x8c>
    a69a:	2080      	movs	r0, #128	; 0x80
    a69c:	04c0      	lsls	r0, r0, #19
    a69e:	4306      	orrs	r6, r0
    a6a0:	291b      	cmp	r1, #27
    a6a2:	dd00      	ble.n	a6a6 <__aeabi_fsub+0x126>
    a6a4:	e0af      	b.n	a806 <__aeabi_fsub+0x286>
    a6a6:	0030      	movs	r0, r6
    a6a8:	2720      	movs	r7, #32
    a6aa:	40c8      	lsrs	r0, r1
    a6ac:	1a79      	subs	r1, r7, r1
    a6ae:	408e      	lsls	r6, r1
    a6b0:	1e71      	subs	r1, r6, #1
    a6b2:	418e      	sbcs	r6, r1
    a6b4:	4306      	orrs	r6, r0
    a6b6:	199b      	adds	r3, r3, r6
    a6b8:	0159      	lsls	r1, r3, #5
    a6ba:	d5d6      	bpl.n	a66a <__aeabi_fsub+0xea>
    a6bc:	3401      	adds	r4, #1
    a6be:	2cff      	cmp	r4, #255	; 0xff
    a6c0:	d100      	bne.n	a6c4 <__aeabi_fsub+0x144>
    a6c2:	e085      	b.n	a7d0 <__aeabi_fsub+0x250>
    a6c4:	2201      	movs	r2, #1
    a6c6:	497a      	ldr	r1, [pc, #488]	; (a8b0 <__aeabi_fsub+0x330>)
    a6c8:	401a      	ands	r2, r3
    a6ca:	085b      	lsrs	r3, r3, #1
    a6cc:	400b      	ands	r3, r1
    a6ce:	4313      	orrs	r3, r2
    a6d0:	e79c      	b.n	a60c <__aeabi_fsub+0x8c>
    a6d2:	2e00      	cmp	r6, #0
    a6d4:	d000      	beq.n	a6d8 <__aeabi_fsub+0x158>
    a6d6:	e770      	b.n	a5ba <__aeabi_fsub+0x3a>
    a6d8:	e76b      	b.n	a5b2 <__aeabi_fsub+0x32>
    a6da:	1e3b      	subs	r3, r7, #0
    a6dc:	d1c5      	bne.n	a66a <__aeabi_fsub+0xea>
    a6de:	2200      	movs	r2, #0
    a6e0:	027b      	lsls	r3, r7, #9
    a6e2:	0a5b      	lsrs	r3, r3, #9
    a6e4:	b2e4      	uxtb	r4, r4
    a6e6:	e7a3      	b.n	a630 <__aeabi_fsub+0xb0>
    a6e8:	0014      	movs	r4, r2
    a6ea:	e78f      	b.n	a60c <__aeabi_fsub+0x8c>
    a6ec:	2e00      	cmp	r6, #0
    a6ee:	d04d      	beq.n	a78c <__aeabi_fsub+0x20c>
    a6f0:	1e48      	subs	r0, r1, #1
    a6f2:	2800      	cmp	r0, #0
    a6f4:	d157      	bne.n	a7a6 <__aeabi_fsub+0x226>
    a6f6:	199b      	adds	r3, r3, r6
    a6f8:	2401      	movs	r4, #1
    a6fa:	015a      	lsls	r2, r3, #5
    a6fc:	d5b5      	bpl.n	a66a <__aeabi_fsub+0xea>
    a6fe:	2402      	movs	r4, #2
    a700:	e7e0      	b.n	a6c4 <__aeabi_fsub+0x144>
    a702:	2a00      	cmp	r2, #0
    a704:	d125      	bne.n	a752 <__aeabi_fsub+0x1d2>
    a706:	1c62      	adds	r2, r4, #1
    a708:	b2d2      	uxtb	r2, r2
    a70a:	2a01      	cmp	r2, #1
    a70c:	dd72      	ble.n	a7f4 <__aeabi_fsub+0x274>
    a70e:	1b9f      	subs	r7, r3, r6
    a710:	017a      	lsls	r2, r7, #5
    a712:	d535      	bpl.n	a780 <__aeabi_fsub+0x200>
    a714:	1af7      	subs	r7, r6, r3
    a716:	000d      	movs	r5, r1
    a718:	e764      	b.n	a5e4 <__aeabi_fsub+0x64>
    a71a:	2201      	movs	r2, #1
    a71c:	2300      	movs	r3, #0
    a71e:	402a      	ands	r2, r5
    a720:	e786      	b.n	a630 <__aeabi_fsub+0xb0>
    a722:	003b      	movs	r3, r7
    a724:	4a63      	ldr	r2, [pc, #396]	; (a8b4 <__aeabi_fsub+0x334>)
    a726:	1a24      	subs	r4, r4, r0
    a728:	4013      	ands	r3, r2
    a72a:	e76f      	b.n	a60c <__aeabi_fsub+0x8c>
    a72c:	2900      	cmp	r1, #0
    a72e:	d16c      	bne.n	a80a <__aeabi_fsub+0x28a>
    a730:	1c61      	adds	r1, r4, #1
    a732:	b2c8      	uxtb	r0, r1
    a734:	2801      	cmp	r0, #1
    a736:	dd4e      	ble.n	a7d6 <__aeabi_fsub+0x256>
    a738:	29ff      	cmp	r1, #255	; 0xff
    a73a:	d049      	beq.n	a7d0 <__aeabi_fsub+0x250>
    a73c:	199b      	adds	r3, r3, r6
    a73e:	085b      	lsrs	r3, r3, #1
    a740:	000c      	movs	r4, r1
    a742:	e763      	b.n	a60c <__aeabi_fsub+0x8c>
    a744:	2aff      	cmp	r2, #255	; 0xff
    a746:	d041      	beq.n	a7cc <__aeabi_fsub+0x24c>
    a748:	000a      	movs	r2, r1
    a74a:	e781      	b.n	a650 <__aeabi_fsub+0xd0>
    a74c:	2601      	movs	r6, #1
    a74e:	1b9b      	subs	r3, r3, r6
    a750:	e789      	b.n	a666 <__aeabi_fsub+0xe6>
    a752:	2c00      	cmp	r4, #0
    a754:	d01c      	beq.n	a790 <__aeabi_fsub+0x210>
    a756:	28ff      	cmp	r0, #255	; 0xff
    a758:	d021      	beq.n	a79e <__aeabi_fsub+0x21e>
    a75a:	2480      	movs	r4, #128	; 0x80
    a75c:	04e4      	lsls	r4, r4, #19
    a75e:	4252      	negs	r2, r2
    a760:	4323      	orrs	r3, r4
    a762:	2a1b      	cmp	r2, #27
    a764:	dd00      	ble.n	a768 <__aeabi_fsub+0x1e8>
    a766:	e096      	b.n	a896 <__aeabi_fsub+0x316>
    a768:	001c      	movs	r4, r3
    a76a:	2520      	movs	r5, #32
    a76c:	40d4      	lsrs	r4, r2
    a76e:	1aaa      	subs	r2, r5, r2
    a770:	4093      	lsls	r3, r2
    a772:	1e5a      	subs	r2, r3, #1
    a774:	4193      	sbcs	r3, r2
    a776:	4323      	orrs	r3, r4
    a778:	1af3      	subs	r3, r6, r3
    a77a:	0004      	movs	r4, r0
    a77c:	000d      	movs	r5, r1
    a77e:	e72d      	b.n	a5dc <__aeabi_fsub+0x5c>
    a780:	2f00      	cmp	r7, #0
    a782:	d000      	beq.n	a786 <__aeabi_fsub+0x206>
    a784:	e72e      	b.n	a5e4 <__aeabi_fsub+0x64>
    a786:	2200      	movs	r2, #0
    a788:	2400      	movs	r4, #0
    a78a:	e7a9      	b.n	a6e0 <__aeabi_fsub+0x160>
    a78c:	000c      	movs	r4, r1
    a78e:	e73d      	b.n	a60c <__aeabi_fsub+0x8c>
    a790:	2b00      	cmp	r3, #0
    a792:	d058      	beq.n	a846 <__aeabi_fsub+0x2c6>
    a794:	43d2      	mvns	r2, r2
    a796:	2a00      	cmp	r2, #0
    a798:	d0ee      	beq.n	a778 <__aeabi_fsub+0x1f8>
    a79a:	28ff      	cmp	r0, #255	; 0xff
    a79c:	d1e1      	bne.n	a762 <__aeabi_fsub+0x1e2>
    a79e:	0033      	movs	r3, r6
    a7a0:	24ff      	movs	r4, #255	; 0xff
    a7a2:	000d      	movs	r5, r1
    a7a4:	e732      	b.n	a60c <__aeabi_fsub+0x8c>
    a7a6:	29ff      	cmp	r1, #255	; 0xff
    a7a8:	d010      	beq.n	a7cc <__aeabi_fsub+0x24c>
    a7aa:	0001      	movs	r1, r0
    a7ac:	e778      	b.n	a6a0 <__aeabi_fsub+0x120>
    a7ae:	2b00      	cmp	r3, #0
    a7b0:	d06e      	beq.n	a890 <__aeabi_fsub+0x310>
    a7b2:	24ff      	movs	r4, #255	; 0xff
    a7b4:	2e00      	cmp	r6, #0
    a7b6:	d100      	bne.n	a7ba <__aeabi_fsub+0x23a>
    a7b8:	e728      	b.n	a60c <__aeabi_fsub+0x8c>
    a7ba:	2280      	movs	r2, #128	; 0x80
    a7bc:	4651      	mov	r1, sl
    a7be:	03d2      	lsls	r2, r2, #15
    a7c0:	4211      	tst	r1, r2
    a7c2:	d003      	beq.n	a7cc <__aeabi_fsub+0x24c>
    a7c4:	4661      	mov	r1, ip
    a7c6:	4211      	tst	r1, r2
    a7c8:	d100      	bne.n	a7cc <__aeabi_fsub+0x24c>
    a7ca:	0033      	movs	r3, r6
    a7cc:	24ff      	movs	r4, #255	; 0xff
    a7ce:	e71d      	b.n	a60c <__aeabi_fsub+0x8c>
    a7d0:	24ff      	movs	r4, #255	; 0xff
    a7d2:	2300      	movs	r3, #0
    a7d4:	e72c      	b.n	a630 <__aeabi_fsub+0xb0>
    a7d6:	2c00      	cmp	r4, #0
    a7d8:	d1e9      	bne.n	a7ae <__aeabi_fsub+0x22e>
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d063      	beq.n	a8a6 <__aeabi_fsub+0x326>
    a7de:	2e00      	cmp	r6, #0
    a7e0:	d100      	bne.n	a7e4 <__aeabi_fsub+0x264>
    a7e2:	e713      	b.n	a60c <__aeabi_fsub+0x8c>
    a7e4:	199b      	adds	r3, r3, r6
    a7e6:	015a      	lsls	r2, r3, #5
    a7e8:	d400      	bmi.n	a7ec <__aeabi_fsub+0x26c>
    a7ea:	e73e      	b.n	a66a <__aeabi_fsub+0xea>
    a7ec:	4a31      	ldr	r2, [pc, #196]	; (a8b4 <__aeabi_fsub+0x334>)
    a7ee:	000c      	movs	r4, r1
    a7f0:	4013      	ands	r3, r2
    a7f2:	e70b      	b.n	a60c <__aeabi_fsub+0x8c>
    a7f4:	2c00      	cmp	r4, #0
    a7f6:	d11e      	bne.n	a836 <__aeabi_fsub+0x2b6>
    a7f8:	2b00      	cmp	r3, #0
    a7fa:	d12f      	bne.n	a85c <__aeabi_fsub+0x2dc>
    a7fc:	2e00      	cmp	r6, #0
    a7fe:	d04f      	beq.n	a8a0 <__aeabi_fsub+0x320>
    a800:	0033      	movs	r3, r6
    a802:	000d      	movs	r5, r1
    a804:	e702      	b.n	a60c <__aeabi_fsub+0x8c>
    a806:	2601      	movs	r6, #1
    a808:	e755      	b.n	a6b6 <__aeabi_fsub+0x136>
    a80a:	2c00      	cmp	r4, #0
    a80c:	d11f      	bne.n	a84e <__aeabi_fsub+0x2ce>
    a80e:	2b00      	cmp	r3, #0
    a810:	d043      	beq.n	a89a <__aeabi_fsub+0x31a>
    a812:	43c9      	mvns	r1, r1
    a814:	2900      	cmp	r1, #0
    a816:	d00b      	beq.n	a830 <__aeabi_fsub+0x2b0>
    a818:	28ff      	cmp	r0, #255	; 0xff
    a81a:	d039      	beq.n	a890 <__aeabi_fsub+0x310>
    a81c:	291b      	cmp	r1, #27
    a81e:	dc44      	bgt.n	a8aa <__aeabi_fsub+0x32a>
    a820:	001c      	movs	r4, r3
    a822:	2720      	movs	r7, #32
    a824:	40cc      	lsrs	r4, r1
    a826:	1a79      	subs	r1, r7, r1
    a828:	408b      	lsls	r3, r1
    a82a:	1e59      	subs	r1, r3, #1
    a82c:	418b      	sbcs	r3, r1
    a82e:	4323      	orrs	r3, r4
    a830:	199b      	adds	r3, r3, r6
    a832:	0004      	movs	r4, r0
    a834:	e740      	b.n	a6b8 <__aeabi_fsub+0x138>
    a836:	2b00      	cmp	r3, #0
    a838:	d11a      	bne.n	a870 <__aeabi_fsub+0x2f0>
    a83a:	2e00      	cmp	r6, #0
    a83c:	d124      	bne.n	a888 <__aeabi_fsub+0x308>
    a83e:	2780      	movs	r7, #128	; 0x80
    a840:	2200      	movs	r2, #0
    a842:	03ff      	lsls	r7, r7, #15
    a844:	e71b      	b.n	a67e <__aeabi_fsub+0xfe>
    a846:	0033      	movs	r3, r6
    a848:	0004      	movs	r4, r0
    a84a:	000d      	movs	r5, r1
    a84c:	e6de      	b.n	a60c <__aeabi_fsub+0x8c>
    a84e:	28ff      	cmp	r0, #255	; 0xff
    a850:	d01e      	beq.n	a890 <__aeabi_fsub+0x310>
    a852:	2480      	movs	r4, #128	; 0x80
    a854:	04e4      	lsls	r4, r4, #19
    a856:	4249      	negs	r1, r1
    a858:	4323      	orrs	r3, r4
    a85a:	e7df      	b.n	a81c <__aeabi_fsub+0x29c>
    a85c:	2e00      	cmp	r6, #0
    a85e:	d100      	bne.n	a862 <__aeabi_fsub+0x2e2>
    a860:	e6d4      	b.n	a60c <__aeabi_fsub+0x8c>
    a862:	1b9f      	subs	r7, r3, r6
    a864:	017a      	lsls	r2, r7, #5
    a866:	d400      	bmi.n	a86a <__aeabi_fsub+0x2ea>
    a868:	e737      	b.n	a6da <__aeabi_fsub+0x15a>
    a86a:	1af3      	subs	r3, r6, r3
    a86c:	000d      	movs	r5, r1
    a86e:	e6cd      	b.n	a60c <__aeabi_fsub+0x8c>
    a870:	24ff      	movs	r4, #255	; 0xff
    a872:	2e00      	cmp	r6, #0
    a874:	d100      	bne.n	a878 <__aeabi_fsub+0x2f8>
    a876:	e6c9      	b.n	a60c <__aeabi_fsub+0x8c>
    a878:	2280      	movs	r2, #128	; 0x80
    a87a:	4650      	mov	r0, sl
    a87c:	03d2      	lsls	r2, r2, #15
    a87e:	4210      	tst	r0, r2
    a880:	d0a4      	beq.n	a7cc <__aeabi_fsub+0x24c>
    a882:	4660      	mov	r0, ip
    a884:	4210      	tst	r0, r2
    a886:	d1a1      	bne.n	a7cc <__aeabi_fsub+0x24c>
    a888:	0033      	movs	r3, r6
    a88a:	000d      	movs	r5, r1
    a88c:	24ff      	movs	r4, #255	; 0xff
    a88e:	e6bd      	b.n	a60c <__aeabi_fsub+0x8c>
    a890:	0033      	movs	r3, r6
    a892:	24ff      	movs	r4, #255	; 0xff
    a894:	e6ba      	b.n	a60c <__aeabi_fsub+0x8c>
    a896:	2301      	movs	r3, #1
    a898:	e76e      	b.n	a778 <__aeabi_fsub+0x1f8>
    a89a:	0033      	movs	r3, r6
    a89c:	0004      	movs	r4, r0
    a89e:	e6b5      	b.n	a60c <__aeabi_fsub+0x8c>
    a8a0:	2700      	movs	r7, #0
    a8a2:	2200      	movs	r2, #0
    a8a4:	e71c      	b.n	a6e0 <__aeabi_fsub+0x160>
    a8a6:	0033      	movs	r3, r6
    a8a8:	e6b0      	b.n	a60c <__aeabi_fsub+0x8c>
    a8aa:	2301      	movs	r3, #1
    a8ac:	e7c0      	b.n	a830 <__aeabi_fsub+0x2b0>
    a8ae:	46c0      	nop			; (mov r8, r8)
    a8b0:	7dffffff 	.word	0x7dffffff
    a8b4:	fbffffff 	.word	0xfbffffff

0000a8b8 <__aeabi_fcmpun>:
    a8b8:	0242      	lsls	r2, r0, #9
    a8ba:	024b      	lsls	r3, r1, #9
    a8bc:	0040      	lsls	r0, r0, #1
    a8be:	0049      	lsls	r1, r1, #1
    a8c0:	0a52      	lsrs	r2, r2, #9
    a8c2:	0e00      	lsrs	r0, r0, #24
    a8c4:	0a5b      	lsrs	r3, r3, #9
    a8c6:	0e09      	lsrs	r1, r1, #24
    a8c8:	28ff      	cmp	r0, #255	; 0xff
    a8ca:	d003      	beq.n	a8d4 <__aeabi_fcmpun+0x1c>
    a8cc:	2000      	movs	r0, #0
    a8ce:	29ff      	cmp	r1, #255	; 0xff
    a8d0:	d006      	beq.n	a8e0 <__aeabi_fcmpun+0x28>
    a8d2:	4770      	bx	lr
    a8d4:	38fe      	subs	r0, #254	; 0xfe
    a8d6:	2a00      	cmp	r2, #0
    a8d8:	d1fb      	bne.n	a8d2 <__aeabi_fcmpun+0x1a>
    a8da:	2000      	movs	r0, #0
    a8dc:	29ff      	cmp	r1, #255	; 0xff
    a8de:	d1f8      	bne.n	a8d2 <__aeabi_fcmpun+0x1a>
    a8e0:	0018      	movs	r0, r3
    a8e2:	1e43      	subs	r3, r0, #1
    a8e4:	4198      	sbcs	r0, r3
    a8e6:	e7f4      	b.n	a8d2 <__aeabi_fcmpun+0x1a>

0000a8e8 <__aeabi_f2iz>:
    a8e8:	0241      	lsls	r1, r0, #9
    a8ea:	0043      	lsls	r3, r0, #1
    a8ec:	0fc2      	lsrs	r2, r0, #31
    a8ee:	0a49      	lsrs	r1, r1, #9
    a8f0:	0e1b      	lsrs	r3, r3, #24
    a8f2:	2000      	movs	r0, #0
    a8f4:	2b7e      	cmp	r3, #126	; 0x7e
    a8f6:	dd0d      	ble.n	a914 <__aeabi_f2iz+0x2c>
    a8f8:	2b9d      	cmp	r3, #157	; 0x9d
    a8fa:	dc0c      	bgt.n	a916 <__aeabi_f2iz+0x2e>
    a8fc:	2080      	movs	r0, #128	; 0x80
    a8fe:	0400      	lsls	r0, r0, #16
    a900:	4301      	orrs	r1, r0
    a902:	2b95      	cmp	r3, #149	; 0x95
    a904:	dc0a      	bgt.n	a91c <__aeabi_f2iz+0x34>
    a906:	2096      	movs	r0, #150	; 0x96
    a908:	1ac3      	subs	r3, r0, r3
    a90a:	40d9      	lsrs	r1, r3
    a90c:	4248      	negs	r0, r1
    a90e:	2a00      	cmp	r2, #0
    a910:	d100      	bne.n	a914 <__aeabi_f2iz+0x2c>
    a912:	0008      	movs	r0, r1
    a914:	4770      	bx	lr
    a916:	4b03      	ldr	r3, [pc, #12]	; (a924 <__aeabi_f2iz+0x3c>)
    a918:	18d0      	adds	r0, r2, r3
    a91a:	e7fb      	b.n	a914 <__aeabi_f2iz+0x2c>
    a91c:	3b96      	subs	r3, #150	; 0x96
    a91e:	4099      	lsls	r1, r3
    a920:	e7f4      	b.n	a90c <__aeabi_f2iz+0x24>
    a922:	46c0      	nop			; (mov r8, r8)
    a924:	7fffffff 	.word	0x7fffffff

0000a928 <__aeabi_i2f>:
    a928:	b570      	push	{r4, r5, r6, lr}
    a92a:	2800      	cmp	r0, #0
    a92c:	d030      	beq.n	a990 <__aeabi_i2f+0x68>
    a92e:	17c3      	asrs	r3, r0, #31
    a930:	18c4      	adds	r4, r0, r3
    a932:	405c      	eors	r4, r3
    a934:	0fc5      	lsrs	r5, r0, #31
    a936:	0020      	movs	r0, r4
    a938:	f001 ff10 	bl	c75c <__clzsi2>
    a93c:	239e      	movs	r3, #158	; 0x9e
    a93e:	1a1b      	subs	r3, r3, r0
    a940:	2b96      	cmp	r3, #150	; 0x96
    a942:	dc0d      	bgt.n	a960 <__aeabi_i2f+0x38>
    a944:	2296      	movs	r2, #150	; 0x96
    a946:	1ad2      	subs	r2, r2, r3
    a948:	4094      	lsls	r4, r2
    a94a:	002a      	movs	r2, r5
    a94c:	0264      	lsls	r4, r4, #9
    a94e:	0a64      	lsrs	r4, r4, #9
    a950:	b2db      	uxtb	r3, r3
    a952:	0264      	lsls	r4, r4, #9
    a954:	05db      	lsls	r3, r3, #23
    a956:	0a60      	lsrs	r0, r4, #9
    a958:	07d2      	lsls	r2, r2, #31
    a95a:	4318      	orrs	r0, r3
    a95c:	4310      	orrs	r0, r2
    a95e:	bd70      	pop	{r4, r5, r6, pc}
    a960:	2b99      	cmp	r3, #153	; 0x99
    a962:	dc19      	bgt.n	a998 <__aeabi_i2f+0x70>
    a964:	2299      	movs	r2, #153	; 0x99
    a966:	1ad2      	subs	r2, r2, r3
    a968:	2a00      	cmp	r2, #0
    a96a:	dd29      	ble.n	a9c0 <__aeabi_i2f+0x98>
    a96c:	4094      	lsls	r4, r2
    a96e:	0022      	movs	r2, r4
    a970:	4c14      	ldr	r4, [pc, #80]	; (a9c4 <__aeabi_i2f+0x9c>)
    a972:	4014      	ands	r4, r2
    a974:	0751      	lsls	r1, r2, #29
    a976:	d004      	beq.n	a982 <__aeabi_i2f+0x5a>
    a978:	210f      	movs	r1, #15
    a97a:	400a      	ands	r2, r1
    a97c:	2a04      	cmp	r2, #4
    a97e:	d000      	beq.n	a982 <__aeabi_i2f+0x5a>
    a980:	3404      	adds	r4, #4
    a982:	0162      	lsls	r2, r4, #5
    a984:	d413      	bmi.n	a9ae <__aeabi_i2f+0x86>
    a986:	01a4      	lsls	r4, r4, #6
    a988:	0a64      	lsrs	r4, r4, #9
    a98a:	b2db      	uxtb	r3, r3
    a98c:	002a      	movs	r2, r5
    a98e:	e7e0      	b.n	a952 <__aeabi_i2f+0x2a>
    a990:	2200      	movs	r2, #0
    a992:	2300      	movs	r3, #0
    a994:	2400      	movs	r4, #0
    a996:	e7dc      	b.n	a952 <__aeabi_i2f+0x2a>
    a998:	2205      	movs	r2, #5
    a99a:	0021      	movs	r1, r4
    a99c:	1a12      	subs	r2, r2, r0
    a99e:	40d1      	lsrs	r1, r2
    a9a0:	22b9      	movs	r2, #185	; 0xb9
    a9a2:	1ad2      	subs	r2, r2, r3
    a9a4:	4094      	lsls	r4, r2
    a9a6:	1e62      	subs	r2, r4, #1
    a9a8:	4194      	sbcs	r4, r2
    a9aa:	430c      	orrs	r4, r1
    a9ac:	e7da      	b.n	a964 <__aeabi_i2f+0x3c>
    a9ae:	4b05      	ldr	r3, [pc, #20]	; (a9c4 <__aeabi_i2f+0x9c>)
    a9b0:	002a      	movs	r2, r5
    a9b2:	401c      	ands	r4, r3
    a9b4:	239f      	movs	r3, #159	; 0x9f
    a9b6:	01a4      	lsls	r4, r4, #6
    a9b8:	1a1b      	subs	r3, r3, r0
    a9ba:	0a64      	lsrs	r4, r4, #9
    a9bc:	b2db      	uxtb	r3, r3
    a9be:	e7c8      	b.n	a952 <__aeabi_i2f+0x2a>
    a9c0:	0022      	movs	r2, r4
    a9c2:	e7d5      	b.n	a970 <__aeabi_i2f+0x48>
    a9c4:	fbffffff 	.word	0xfbffffff

0000a9c8 <__aeabi_ui2f>:
    a9c8:	b510      	push	{r4, lr}
    a9ca:	1e04      	subs	r4, r0, #0
    a9cc:	d027      	beq.n	aa1e <__aeabi_ui2f+0x56>
    a9ce:	f001 fec5 	bl	c75c <__clzsi2>
    a9d2:	239e      	movs	r3, #158	; 0x9e
    a9d4:	1a1b      	subs	r3, r3, r0
    a9d6:	2b96      	cmp	r3, #150	; 0x96
    a9d8:	dc0a      	bgt.n	a9f0 <__aeabi_ui2f+0x28>
    a9da:	2296      	movs	r2, #150	; 0x96
    a9dc:	1ad2      	subs	r2, r2, r3
    a9de:	4094      	lsls	r4, r2
    a9e0:	0264      	lsls	r4, r4, #9
    a9e2:	0a64      	lsrs	r4, r4, #9
    a9e4:	b2db      	uxtb	r3, r3
    a9e6:	0264      	lsls	r4, r4, #9
    a9e8:	05db      	lsls	r3, r3, #23
    a9ea:	0a60      	lsrs	r0, r4, #9
    a9ec:	4318      	orrs	r0, r3
    a9ee:	bd10      	pop	{r4, pc}
    a9f0:	2b99      	cmp	r3, #153	; 0x99
    a9f2:	dc17      	bgt.n	aa24 <__aeabi_ui2f+0x5c>
    a9f4:	2299      	movs	r2, #153	; 0x99
    a9f6:	1ad2      	subs	r2, r2, r3
    a9f8:	2a00      	cmp	r2, #0
    a9fa:	dd27      	ble.n	aa4c <__aeabi_ui2f+0x84>
    a9fc:	4094      	lsls	r4, r2
    a9fe:	0022      	movs	r2, r4
    aa00:	4c13      	ldr	r4, [pc, #76]	; (aa50 <__aeabi_ui2f+0x88>)
    aa02:	4014      	ands	r4, r2
    aa04:	0751      	lsls	r1, r2, #29
    aa06:	d004      	beq.n	aa12 <__aeabi_ui2f+0x4a>
    aa08:	210f      	movs	r1, #15
    aa0a:	400a      	ands	r2, r1
    aa0c:	2a04      	cmp	r2, #4
    aa0e:	d000      	beq.n	aa12 <__aeabi_ui2f+0x4a>
    aa10:	3404      	adds	r4, #4
    aa12:	0162      	lsls	r2, r4, #5
    aa14:	d412      	bmi.n	aa3c <__aeabi_ui2f+0x74>
    aa16:	01a4      	lsls	r4, r4, #6
    aa18:	0a64      	lsrs	r4, r4, #9
    aa1a:	b2db      	uxtb	r3, r3
    aa1c:	e7e3      	b.n	a9e6 <__aeabi_ui2f+0x1e>
    aa1e:	2300      	movs	r3, #0
    aa20:	2400      	movs	r4, #0
    aa22:	e7e0      	b.n	a9e6 <__aeabi_ui2f+0x1e>
    aa24:	22b9      	movs	r2, #185	; 0xb9
    aa26:	0021      	movs	r1, r4
    aa28:	1ad2      	subs	r2, r2, r3
    aa2a:	4091      	lsls	r1, r2
    aa2c:	000a      	movs	r2, r1
    aa2e:	1e51      	subs	r1, r2, #1
    aa30:	418a      	sbcs	r2, r1
    aa32:	2105      	movs	r1, #5
    aa34:	1a09      	subs	r1, r1, r0
    aa36:	40cc      	lsrs	r4, r1
    aa38:	4314      	orrs	r4, r2
    aa3a:	e7db      	b.n	a9f4 <__aeabi_ui2f+0x2c>
    aa3c:	4b04      	ldr	r3, [pc, #16]	; (aa50 <__aeabi_ui2f+0x88>)
    aa3e:	401c      	ands	r4, r3
    aa40:	239f      	movs	r3, #159	; 0x9f
    aa42:	01a4      	lsls	r4, r4, #6
    aa44:	1a1b      	subs	r3, r3, r0
    aa46:	0a64      	lsrs	r4, r4, #9
    aa48:	b2db      	uxtb	r3, r3
    aa4a:	e7cc      	b.n	a9e6 <__aeabi_ui2f+0x1e>
    aa4c:	0022      	movs	r2, r4
    aa4e:	e7d7      	b.n	aa00 <__aeabi_ui2f+0x38>
    aa50:	fbffffff 	.word	0xfbffffff

0000aa54 <__aeabi_dadd>:
    aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa56:	4645      	mov	r5, r8
    aa58:	46de      	mov	lr, fp
    aa5a:	4657      	mov	r7, sl
    aa5c:	464e      	mov	r6, r9
    aa5e:	030c      	lsls	r4, r1, #12
    aa60:	b5e0      	push	{r5, r6, r7, lr}
    aa62:	004e      	lsls	r6, r1, #1
    aa64:	0fc9      	lsrs	r1, r1, #31
    aa66:	4688      	mov	r8, r1
    aa68:	000d      	movs	r5, r1
    aa6a:	0a61      	lsrs	r1, r4, #9
    aa6c:	0f44      	lsrs	r4, r0, #29
    aa6e:	430c      	orrs	r4, r1
    aa70:	00c7      	lsls	r7, r0, #3
    aa72:	0319      	lsls	r1, r3, #12
    aa74:	0058      	lsls	r0, r3, #1
    aa76:	0fdb      	lsrs	r3, r3, #31
    aa78:	469b      	mov	fp, r3
    aa7a:	0a4b      	lsrs	r3, r1, #9
    aa7c:	0f51      	lsrs	r1, r2, #29
    aa7e:	430b      	orrs	r3, r1
    aa80:	0d76      	lsrs	r6, r6, #21
    aa82:	0d40      	lsrs	r0, r0, #21
    aa84:	0019      	movs	r1, r3
    aa86:	00d2      	lsls	r2, r2, #3
    aa88:	45d8      	cmp	r8, fp
    aa8a:	d100      	bne.n	aa8e <__aeabi_dadd+0x3a>
    aa8c:	e0ae      	b.n	abec <__aeabi_dadd+0x198>
    aa8e:	1a35      	subs	r5, r6, r0
    aa90:	2d00      	cmp	r5, #0
    aa92:	dc00      	bgt.n	aa96 <__aeabi_dadd+0x42>
    aa94:	e0f6      	b.n	ac84 <__aeabi_dadd+0x230>
    aa96:	2800      	cmp	r0, #0
    aa98:	d10f      	bne.n	aaba <__aeabi_dadd+0x66>
    aa9a:	4313      	orrs	r3, r2
    aa9c:	d100      	bne.n	aaa0 <__aeabi_dadd+0x4c>
    aa9e:	e0db      	b.n	ac58 <__aeabi_dadd+0x204>
    aaa0:	1e6b      	subs	r3, r5, #1
    aaa2:	2b00      	cmp	r3, #0
    aaa4:	d000      	beq.n	aaa8 <__aeabi_dadd+0x54>
    aaa6:	e137      	b.n	ad18 <__aeabi_dadd+0x2c4>
    aaa8:	1aba      	subs	r2, r7, r2
    aaaa:	4297      	cmp	r7, r2
    aaac:	41bf      	sbcs	r7, r7
    aaae:	1a64      	subs	r4, r4, r1
    aab0:	427f      	negs	r7, r7
    aab2:	1be4      	subs	r4, r4, r7
    aab4:	2601      	movs	r6, #1
    aab6:	0017      	movs	r7, r2
    aab8:	e024      	b.n	ab04 <__aeabi_dadd+0xb0>
    aaba:	4bc6      	ldr	r3, [pc, #792]	; (add4 <__aeabi_dadd+0x380>)
    aabc:	429e      	cmp	r6, r3
    aabe:	d04d      	beq.n	ab5c <__aeabi_dadd+0x108>
    aac0:	2380      	movs	r3, #128	; 0x80
    aac2:	041b      	lsls	r3, r3, #16
    aac4:	4319      	orrs	r1, r3
    aac6:	2d38      	cmp	r5, #56	; 0x38
    aac8:	dd00      	ble.n	aacc <__aeabi_dadd+0x78>
    aaca:	e107      	b.n	acdc <__aeabi_dadd+0x288>
    aacc:	2d1f      	cmp	r5, #31
    aace:	dd00      	ble.n	aad2 <__aeabi_dadd+0x7e>
    aad0:	e138      	b.n	ad44 <__aeabi_dadd+0x2f0>
    aad2:	2020      	movs	r0, #32
    aad4:	1b43      	subs	r3, r0, r5
    aad6:	469a      	mov	sl, r3
    aad8:	000b      	movs	r3, r1
    aada:	4650      	mov	r0, sl
    aadc:	4083      	lsls	r3, r0
    aade:	4699      	mov	r9, r3
    aae0:	0013      	movs	r3, r2
    aae2:	4648      	mov	r0, r9
    aae4:	40eb      	lsrs	r3, r5
    aae6:	4318      	orrs	r0, r3
    aae8:	0003      	movs	r3, r0
    aaea:	4650      	mov	r0, sl
    aaec:	4082      	lsls	r2, r0
    aaee:	1e50      	subs	r0, r2, #1
    aaf0:	4182      	sbcs	r2, r0
    aaf2:	40e9      	lsrs	r1, r5
    aaf4:	431a      	orrs	r2, r3
    aaf6:	1aba      	subs	r2, r7, r2
    aaf8:	1a61      	subs	r1, r4, r1
    aafa:	4297      	cmp	r7, r2
    aafc:	41a4      	sbcs	r4, r4
    aafe:	0017      	movs	r7, r2
    ab00:	4264      	negs	r4, r4
    ab02:	1b0c      	subs	r4, r1, r4
    ab04:	0223      	lsls	r3, r4, #8
    ab06:	d562      	bpl.n	abce <__aeabi_dadd+0x17a>
    ab08:	0264      	lsls	r4, r4, #9
    ab0a:	0a65      	lsrs	r5, r4, #9
    ab0c:	2d00      	cmp	r5, #0
    ab0e:	d100      	bne.n	ab12 <__aeabi_dadd+0xbe>
    ab10:	e0df      	b.n	acd2 <__aeabi_dadd+0x27e>
    ab12:	0028      	movs	r0, r5
    ab14:	f001 fe22 	bl	c75c <__clzsi2>
    ab18:	0003      	movs	r3, r0
    ab1a:	3b08      	subs	r3, #8
    ab1c:	2b1f      	cmp	r3, #31
    ab1e:	dd00      	ble.n	ab22 <__aeabi_dadd+0xce>
    ab20:	e0d2      	b.n	acc8 <__aeabi_dadd+0x274>
    ab22:	2220      	movs	r2, #32
    ab24:	003c      	movs	r4, r7
    ab26:	1ad2      	subs	r2, r2, r3
    ab28:	409d      	lsls	r5, r3
    ab2a:	40d4      	lsrs	r4, r2
    ab2c:	409f      	lsls	r7, r3
    ab2e:	4325      	orrs	r5, r4
    ab30:	429e      	cmp	r6, r3
    ab32:	dd00      	ble.n	ab36 <__aeabi_dadd+0xe2>
    ab34:	e0c4      	b.n	acc0 <__aeabi_dadd+0x26c>
    ab36:	1b9e      	subs	r6, r3, r6
    ab38:	1c73      	adds	r3, r6, #1
    ab3a:	2b1f      	cmp	r3, #31
    ab3c:	dd00      	ble.n	ab40 <__aeabi_dadd+0xec>
    ab3e:	e0f1      	b.n	ad24 <__aeabi_dadd+0x2d0>
    ab40:	2220      	movs	r2, #32
    ab42:	0038      	movs	r0, r7
    ab44:	0029      	movs	r1, r5
    ab46:	1ad2      	subs	r2, r2, r3
    ab48:	40d8      	lsrs	r0, r3
    ab4a:	4091      	lsls	r1, r2
    ab4c:	4097      	lsls	r7, r2
    ab4e:	002c      	movs	r4, r5
    ab50:	4301      	orrs	r1, r0
    ab52:	1e78      	subs	r0, r7, #1
    ab54:	4187      	sbcs	r7, r0
    ab56:	40dc      	lsrs	r4, r3
    ab58:	2600      	movs	r6, #0
    ab5a:	430f      	orrs	r7, r1
    ab5c:	077b      	lsls	r3, r7, #29
    ab5e:	d009      	beq.n	ab74 <__aeabi_dadd+0x120>
    ab60:	230f      	movs	r3, #15
    ab62:	403b      	ands	r3, r7
    ab64:	2b04      	cmp	r3, #4
    ab66:	d005      	beq.n	ab74 <__aeabi_dadd+0x120>
    ab68:	1d3b      	adds	r3, r7, #4
    ab6a:	42bb      	cmp	r3, r7
    ab6c:	41bf      	sbcs	r7, r7
    ab6e:	427f      	negs	r7, r7
    ab70:	19e4      	adds	r4, r4, r7
    ab72:	001f      	movs	r7, r3
    ab74:	0223      	lsls	r3, r4, #8
    ab76:	d52c      	bpl.n	abd2 <__aeabi_dadd+0x17e>
    ab78:	4b96      	ldr	r3, [pc, #600]	; (add4 <__aeabi_dadd+0x380>)
    ab7a:	3601      	adds	r6, #1
    ab7c:	429e      	cmp	r6, r3
    ab7e:	d100      	bne.n	ab82 <__aeabi_dadd+0x12e>
    ab80:	e09a      	b.n	acb8 <__aeabi_dadd+0x264>
    ab82:	4645      	mov	r5, r8
    ab84:	4b94      	ldr	r3, [pc, #592]	; (add8 <__aeabi_dadd+0x384>)
    ab86:	08ff      	lsrs	r7, r7, #3
    ab88:	401c      	ands	r4, r3
    ab8a:	0760      	lsls	r0, r4, #29
    ab8c:	0576      	lsls	r6, r6, #21
    ab8e:	0264      	lsls	r4, r4, #9
    ab90:	4307      	orrs	r7, r0
    ab92:	0b24      	lsrs	r4, r4, #12
    ab94:	0d76      	lsrs	r6, r6, #21
    ab96:	2100      	movs	r1, #0
    ab98:	0324      	lsls	r4, r4, #12
    ab9a:	0b23      	lsrs	r3, r4, #12
    ab9c:	0d0c      	lsrs	r4, r1, #20
    ab9e:	4a8f      	ldr	r2, [pc, #572]	; (addc <__aeabi_dadd+0x388>)
    aba0:	0524      	lsls	r4, r4, #20
    aba2:	431c      	orrs	r4, r3
    aba4:	4014      	ands	r4, r2
    aba6:	0533      	lsls	r3, r6, #20
    aba8:	4323      	orrs	r3, r4
    abaa:	005b      	lsls	r3, r3, #1
    abac:	07ed      	lsls	r5, r5, #31
    abae:	085b      	lsrs	r3, r3, #1
    abb0:	432b      	orrs	r3, r5
    abb2:	0038      	movs	r0, r7
    abb4:	0019      	movs	r1, r3
    abb6:	bc3c      	pop	{r2, r3, r4, r5}
    abb8:	4690      	mov	r8, r2
    abba:	4699      	mov	r9, r3
    abbc:	46a2      	mov	sl, r4
    abbe:	46ab      	mov	fp, r5
    abc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abc2:	4664      	mov	r4, ip
    abc4:	4304      	orrs	r4, r0
    abc6:	d100      	bne.n	abca <__aeabi_dadd+0x176>
    abc8:	e211      	b.n	afee <__aeabi_dadd+0x59a>
    abca:	0004      	movs	r4, r0
    abcc:	4667      	mov	r7, ip
    abce:	077b      	lsls	r3, r7, #29
    abd0:	d1c6      	bne.n	ab60 <__aeabi_dadd+0x10c>
    abd2:	4645      	mov	r5, r8
    abd4:	0760      	lsls	r0, r4, #29
    abd6:	08ff      	lsrs	r7, r7, #3
    abd8:	4307      	orrs	r7, r0
    abda:	08e4      	lsrs	r4, r4, #3
    abdc:	4b7d      	ldr	r3, [pc, #500]	; (add4 <__aeabi_dadd+0x380>)
    abde:	429e      	cmp	r6, r3
    abe0:	d030      	beq.n	ac44 <__aeabi_dadd+0x1f0>
    abe2:	0324      	lsls	r4, r4, #12
    abe4:	0576      	lsls	r6, r6, #21
    abe6:	0b24      	lsrs	r4, r4, #12
    abe8:	0d76      	lsrs	r6, r6, #21
    abea:	e7d4      	b.n	ab96 <__aeabi_dadd+0x142>
    abec:	1a33      	subs	r3, r6, r0
    abee:	469a      	mov	sl, r3
    abf0:	2b00      	cmp	r3, #0
    abf2:	dd78      	ble.n	ace6 <__aeabi_dadd+0x292>
    abf4:	2800      	cmp	r0, #0
    abf6:	d031      	beq.n	ac5c <__aeabi_dadd+0x208>
    abf8:	4876      	ldr	r0, [pc, #472]	; (add4 <__aeabi_dadd+0x380>)
    abfa:	4286      	cmp	r6, r0
    abfc:	d0ae      	beq.n	ab5c <__aeabi_dadd+0x108>
    abfe:	2080      	movs	r0, #128	; 0x80
    ac00:	0400      	lsls	r0, r0, #16
    ac02:	4301      	orrs	r1, r0
    ac04:	4653      	mov	r3, sl
    ac06:	2b38      	cmp	r3, #56	; 0x38
    ac08:	dc00      	bgt.n	ac0c <__aeabi_dadd+0x1b8>
    ac0a:	e0e9      	b.n	ade0 <__aeabi_dadd+0x38c>
    ac0c:	430a      	orrs	r2, r1
    ac0e:	1e51      	subs	r1, r2, #1
    ac10:	418a      	sbcs	r2, r1
    ac12:	2100      	movs	r1, #0
    ac14:	19d2      	adds	r2, r2, r7
    ac16:	42ba      	cmp	r2, r7
    ac18:	41bf      	sbcs	r7, r7
    ac1a:	1909      	adds	r1, r1, r4
    ac1c:	427c      	negs	r4, r7
    ac1e:	0017      	movs	r7, r2
    ac20:	190c      	adds	r4, r1, r4
    ac22:	0223      	lsls	r3, r4, #8
    ac24:	d5d3      	bpl.n	abce <__aeabi_dadd+0x17a>
    ac26:	4b6b      	ldr	r3, [pc, #428]	; (add4 <__aeabi_dadd+0x380>)
    ac28:	3601      	adds	r6, #1
    ac2a:	429e      	cmp	r6, r3
    ac2c:	d100      	bne.n	ac30 <__aeabi_dadd+0x1dc>
    ac2e:	e13a      	b.n	aea6 <__aeabi_dadd+0x452>
    ac30:	2001      	movs	r0, #1
    ac32:	4b69      	ldr	r3, [pc, #420]	; (add8 <__aeabi_dadd+0x384>)
    ac34:	401c      	ands	r4, r3
    ac36:	087b      	lsrs	r3, r7, #1
    ac38:	4007      	ands	r7, r0
    ac3a:	431f      	orrs	r7, r3
    ac3c:	07e0      	lsls	r0, r4, #31
    ac3e:	4307      	orrs	r7, r0
    ac40:	0864      	lsrs	r4, r4, #1
    ac42:	e78b      	b.n	ab5c <__aeabi_dadd+0x108>
    ac44:	0023      	movs	r3, r4
    ac46:	433b      	orrs	r3, r7
    ac48:	d100      	bne.n	ac4c <__aeabi_dadd+0x1f8>
    ac4a:	e1cb      	b.n	afe4 <__aeabi_dadd+0x590>
    ac4c:	2280      	movs	r2, #128	; 0x80
    ac4e:	0312      	lsls	r2, r2, #12
    ac50:	4314      	orrs	r4, r2
    ac52:	0324      	lsls	r4, r4, #12
    ac54:	0b24      	lsrs	r4, r4, #12
    ac56:	e79e      	b.n	ab96 <__aeabi_dadd+0x142>
    ac58:	002e      	movs	r6, r5
    ac5a:	e77f      	b.n	ab5c <__aeabi_dadd+0x108>
    ac5c:	0008      	movs	r0, r1
    ac5e:	4310      	orrs	r0, r2
    ac60:	d100      	bne.n	ac64 <__aeabi_dadd+0x210>
    ac62:	e0b4      	b.n	adce <__aeabi_dadd+0x37a>
    ac64:	1e58      	subs	r0, r3, #1
    ac66:	2800      	cmp	r0, #0
    ac68:	d000      	beq.n	ac6c <__aeabi_dadd+0x218>
    ac6a:	e0de      	b.n	ae2a <__aeabi_dadd+0x3d6>
    ac6c:	18ba      	adds	r2, r7, r2
    ac6e:	42ba      	cmp	r2, r7
    ac70:	419b      	sbcs	r3, r3
    ac72:	1864      	adds	r4, r4, r1
    ac74:	425b      	negs	r3, r3
    ac76:	18e4      	adds	r4, r4, r3
    ac78:	0017      	movs	r7, r2
    ac7a:	2601      	movs	r6, #1
    ac7c:	0223      	lsls	r3, r4, #8
    ac7e:	d5a6      	bpl.n	abce <__aeabi_dadd+0x17a>
    ac80:	2602      	movs	r6, #2
    ac82:	e7d5      	b.n	ac30 <__aeabi_dadd+0x1dc>
    ac84:	2d00      	cmp	r5, #0
    ac86:	d16e      	bne.n	ad66 <__aeabi_dadd+0x312>
    ac88:	1c70      	adds	r0, r6, #1
    ac8a:	0540      	lsls	r0, r0, #21
    ac8c:	0d40      	lsrs	r0, r0, #21
    ac8e:	2801      	cmp	r0, #1
    ac90:	dc00      	bgt.n	ac94 <__aeabi_dadd+0x240>
    ac92:	e0f9      	b.n	ae88 <__aeabi_dadd+0x434>
    ac94:	1ab8      	subs	r0, r7, r2
    ac96:	4684      	mov	ip, r0
    ac98:	4287      	cmp	r7, r0
    ac9a:	4180      	sbcs	r0, r0
    ac9c:	1ae5      	subs	r5, r4, r3
    ac9e:	4240      	negs	r0, r0
    aca0:	1a2d      	subs	r5, r5, r0
    aca2:	0228      	lsls	r0, r5, #8
    aca4:	d400      	bmi.n	aca8 <__aeabi_dadd+0x254>
    aca6:	e089      	b.n	adbc <__aeabi_dadd+0x368>
    aca8:	1bd7      	subs	r7, r2, r7
    acaa:	42ba      	cmp	r2, r7
    acac:	4192      	sbcs	r2, r2
    acae:	1b1c      	subs	r4, r3, r4
    acb0:	4252      	negs	r2, r2
    acb2:	1aa5      	subs	r5, r4, r2
    acb4:	46d8      	mov	r8, fp
    acb6:	e729      	b.n	ab0c <__aeabi_dadd+0xb8>
    acb8:	4645      	mov	r5, r8
    acba:	2400      	movs	r4, #0
    acbc:	2700      	movs	r7, #0
    acbe:	e76a      	b.n	ab96 <__aeabi_dadd+0x142>
    acc0:	4c45      	ldr	r4, [pc, #276]	; (add8 <__aeabi_dadd+0x384>)
    acc2:	1af6      	subs	r6, r6, r3
    acc4:	402c      	ands	r4, r5
    acc6:	e749      	b.n	ab5c <__aeabi_dadd+0x108>
    acc8:	003d      	movs	r5, r7
    acca:	3828      	subs	r0, #40	; 0x28
    accc:	4085      	lsls	r5, r0
    acce:	2700      	movs	r7, #0
    acd0:	e72e      	b.n	ab30 <__aeabi_dadd+0xdc>
    acd2:	0038      	movs	r0, r7
    acd4:	f001 fd42 	bl	c75c <__clzsi2>
    acd8:	3020      	adds	r0, #32
    acda:	e71d      	b.n	ab18 <__aeabi_dadd+0xc4>
    acdc:	430a      	orrs	r2, r1
    acde:	1e51      	subs	r1, r2, #1
    ace0:	418a      	sbcs	r2, r1
    ace2:	2100      	movs	r1, #0
    ace4:	e707      	b.n	aaf6 <__aeabi_dadd+0xa2>
    ace6:	2b00      	cmp	r3, #0
    ace8:	d000      	beq.n	acec <__aeabi_dadd+0x298>
    acea:	e0f3      	b.n	aed4 <__aeabi_dadd+0x480>
    acec:	1c70      	adds	r0, r6, #1
    acee:	0543      	lsls	r3, r0, #21
    acf0:	0d5b      	lsrs	r3, r3, #21
    acf2:	2b01      	cmp	r3, #1
    acf4:	dc00      	bgt.n	acf8 <__aeabi_dadd+0x2a4>
    acf6:	e0ad      	b.n	ae54 <__aeabi_dadd+0x400>
    acf8:	4b36      	ldr	r3, [pc, #216]	; (add4 <__aeabi_dadd+0x380>)
    acfa:	4298      	cmp	r0, r3
    acfc:	d100      	bne.n	ad00 <__aeabi_dadd+0x2ac>
    acfe:	e0d1      	b.n	aea4 <__aeabi_dadd+0x450>
    ad00:	18ba      	adds	r2, r7, r2
    ad02:	42ba      	cmp	r2, r7
    ad04:	41bf      	sbcs	r7, r7
    ad06:	1864      	adds	r4, r4, r1
    ad08:	427f      	negs	r7, r7
    ad0a:	19e4      	adds	r4, r4, r7
    ad0c:	07e7      	lsls	r7, r4, #31
    ad0e:	0852      	lsrs	r2, r2, #1
    ad10:	4317      	orrs	r7, r2
    ad12:	0864      	lsrs	r4, r4, #1
    ad14:	0006      	movs	r6, r0
    ad16:	e721      	b.n	ab5c <__aeabi_dadd+0x108>
    ad18:	482e      	ldr	r0, [pc, #184]	; (add4 <__aeabi_dadd+0x380>)
    ad1a:	4285      	cmp	r5, r0
    ad1c:	d100      	bne.n	ad20 <__aeabi_dadd+0x2cc>
    ad1e:	e093      	b.n	ae48 <__aeabi_dadd+0x3f4>
    ad20:	001d      	movs	r5, r3
    ad22:	e6d0      	b.n	aac6 <__aeabi_dadd+0x72>
    ad24:	0029      	movs	r1, r5
    ad26:	3e1f      	subs	r6, #31
    ad28:	40f1      	lsrs	r1, r6
    ad2a:	2b20      	cmp	r3, #32
    ad2c:	d100      	bne.n	ad30 <__aeabi_dadd+0x2dc>
    ad2e:	e08d      	b.n	ae4c <__aeabi_dadd+0x3f8>
    ad30:	2240      	movs	r2, #64	; 0x40
    ad32:	1ad3      	subs	r3, r2, r3
    ad34:	409d      	lsls	r5, r3
    ad36:	432f      	orrs	r7, r5
    ad38:	1e7d      	subs	r5, r7, #1
    ad3a:	41af      	sbcs	r7, r5
    ad3c:	2400      	movs	r4, #0
    ad3e:	430f      	orrs	r7, r1
    ad40:	2600      	movs	r6, #0
    ad42:	e744      	b.n	abce <__aeabi_dadd+0x17a>
    ad44:	002b      	movs	r3, r5
    ad46:	0008      	movs	r0, r1
    ad48:	3b20      	subs	r3, #32
    ad4a:	40d8      	lsrs	r0, r3
    ad4c:	0003      	movs	r3, r0
    ad4e:	2d20      	cmp	r5, #32
    ad50:	d100      	bne.n	ad54 <__aeabi_dadd+0x300>
    ad52:	e07d      	b.n	ae50 <__aeabi_dadd+0x3fc>
    ad54:	2040      	movs	r0, #64	; 0x40
    ad56:	1b45      	subs	r5, r0, r5
    ad58:	40a9      	lsls	r1, r5
    ad5a:	430a      	orrs	r2, r1
    ad5c:	1e51      	subs	r1, r2, #1
    ad5e:	418a      	sbcs	r2, r1
    ad60:	2100      	movs	r1, #0
    ad62:	431a      	orrs	r2, r3
    ad64:	e6c7      	b.n	aaf6 <__aeabi_dadd+0xa2>
    ad66:	2e00      	cmp	r6, #0
    ad68:	d050      	beq.n	ae0c <__aeabi_dadd+0x3b8>
    ad6a:	4e1a      	ldr	r6, [pc, #104]	; (add4 <__aeabi_dadd+0x380>)
    ad6c:	42b0      	cmp	r0, r6
    ad6e:	d057      	beq.n	ae20 <__aeabi_dadd+0x3cc>
    ad70:	2680      	movs	r6, #128	; 0x80
    ad72:	426b      	negs	r3, r5
    ad74:	4699      	mov	r9, r3
    ad76:	0436      	lsls	r6, r6, #16
    ad78:	4334      	orrs	r4, r6
    ad7a:	464b      	mov	r3, r9
    ad7c:	2b38      	cmp	r3, #56	; 0x38
    ad7e:	dd00      	ble.n	ad82 <__aeabi_dadd+0x32e>
    ad80:	e0d6      	b.n	af30 <__aeabi_dadd+0x4dc>
    ad82:	2b1f      	cmp	r3, #31
    ad84:	dd00      	ble.n	ad88 <__aeabi_dadd+0x334>
    ad86:	e135      	b.n	aff4 <__aeabi_dadd+0x5a0>
    ad88:	2620      	movs	r6, #32
    ad8a:	1af5      	subs	r5, r6, r3
    ad8c:	0026      	movs	r6, r4
    ad8e:	40ae      	lsls	r6, r5
    ad90:	46b2      	mov	sl, r6
    ad92:	003e      	movs	r6, r7
    ad94:	40de      	lsrs	r6, r3
    ad96:	46ac      	mov	ip, r5
    ad98:	0035      	movs	r5, r6
    ad9a:	4656      	mov	r6, sl
    ad9c:	432e      	orrs	r6, r5
    ad9e:	4665      	mov	r5, ip
    ada0:	40af      	lsls	r7, r5
    ada2:	1e7d      	subs	r5, r7, #1
    ada4:	41af      	sbcs	r7, r5
    ada6:	40dc      	lsrs	r4, r3
    ada8:	4337      	orrs	r7, r6
    adaa:	1bd7      	subs	r7, r2, r7
    adac:	42ba      	cmp	r2, r7
    adae:	4192      	sbcs	r2, r2
    adb0:	1b0c      	subs	r4, r1, r4
    adb2:	4252      	negs	r2, r2
    adb4:	1aa4      	subs	r4, r4, r2
    adb6:	0006      	movs	r6, r0
    adb8:	46d8      	mov	r8, fp
    adba:	e6a3      	b.n	ab04 <__aeabi_dadd+0xb0>
    adbc:	4664      	mov	r4, ip
    adbe:	4667      	mov	r7, ip
    adc0:	432c      	orrs	r4, r5
    adc2:	d000      	beq.n	adc6 <__aeabi_dadd+0x372>
    adc4:	e6a2      	b.n	ab0c <__aeabi_dadd+0xb8>
    adc6:	2500      	movs	r5, #0
    adc8:	2600      	movs	r6, #0
    adca:	2700      	movs	r7, #0
    adcc:	e706      	b.n	abdc <__aeabi_dadd+0x188>
    adce:	001e      	movs	r6, r3
    add0:	e6c4      	b.n	ab5c <__aeabi_dadd+0x108>
    add2:	46c0      	nop			; (mov r8, r8)
    add4:	000007ff 	.word	0x000007ff
    add8:	ff7fffff 	.word	0xff7fffff
    addc:	800fffff 	.word	0x800fffff
    ade0:	2b1f      	cmp	r3, #31
    ade2:	dc63      	bgt.n	aeac <__aeabi_dadd+0x458>
    ade4:	2020      	movs	r0, #32
    ade6:	1ac3      	subs	r3, r0, r3
    ade8:	0008      	movs	r0, r1
    adea:	4098      	lsls	r0, r3
    adec:	469c      	mov	ip, r3
    adee:	4683      	mov	fp, r0
    adf0:	4653      	mov	r3, sl
    adf2:	0010      	movs	r0, r2
    adf4:	40d8      	lsrs	r0, r3
    adf6:	0003      	movs	r3, r0
    adf8:	4658      	mov	r0, fp
    adfa:	4318      	orrs	r0, r3
    adfc:	4663      	mov	r3, ip
    adfe:	409a      	lsls	r2, r3
    ae00:	1e53      	subs	r3, r2, #1
    ae02:	419a      	sbcs	r2, r3
    ae04:	4653      	mov	r3, sl
    ae06:	4302      	orrs	r2, r0
    ae08:	40d9      	lsrs	r1, r3
    ae0a:	e703      	b.n	ac14 <__aeabi_dadd+0x1c0>
    ae0c:	0026      	movs	r6, r4
    ae0e:	433e      	orrs	r6, r7
    ae10:	d006      	beq.n	ae20 <__aeabi_dadd+0x3cc>
    ae12:	43eb      	mvns	r3, r5
    ae14:	4699      	mov	r9, r3
    ae16:	2b00      	cmp	r3, #0
    ae18:	d0c7      	beq.n	adaa <__aeabi_dadd+0x356>
    ae1a:	4e94      	ldr	r6, [pc, #592]	; (b06c <__aeabi_dadd+0x618>)
    ae1c:	42b0      	cmp	r0, r6
    ae1e:	d1ac      	bne.n	ad7a <__aeabi_dadd+0x326>
    ae20:	000c      	movs	r4, r1
    ae22:	0017      	movs	r7, r2
    ae24:	0006      	movs	r6, r0
    ae26:	46d8      	mov	r8, fp
    ae28:	e698      	b.n	ab5c <__aeabi_dadd+0x108>
    ae2a:	4b90      	ldr	r3, [pc, #576]	; (b06c <__aeabi_dadd+0x618>)
    ae2c:	459a      	cmp	sl, r3
    ae2e:	d00b      	beq.n	ae48 <__aeabi_dadd+0x3f4>
    ae30:	4682      	mov	sl, r0
    ae32:	e6e7      	b.n	ac04 <__aeabi_dadd+0x1b0>
    ae34:	2800      	cmp	r0, #0
    ae36:	d000      	beq.n	ae3a <__aeabi_dadd+0x3e6>
    ae38:	e09e      	b.n	af78 <__aeabi_dadd+0x524>
    ae3a:	0018      	movs	r0, r3
    ae3c:	4310      	orrs	r0, r2
    ae3e:	d100      	bne.n	ae42 <__aeabi_dadd+0x3ee>
    ae40:	e0e9      	b.n	b016 <__aeabi_dadd+0x5c2>
    ae42:	001c      	movs	r4, r3
    ae44:	0017      	movs	r7, r2
    ae46:	46d8      	mov	r8, fp
    ae48:	4e88      	ldr	r6, [pc, #544]	; (b06c <__aeabi_dadd+0x618>)
    ae4a:	e687      	b.n	ab5c <__aeabi_dadd+0x108>
    ae4c:	2500      	movs	r5, #0
    ae4e:	e772      	b.n	ad36 <__aeabi_dadd+0x2e2>
    ae50:	2100      	movs	r1, #0
    ae52:	e782      	b.n	ad5a <__aeabi_dadd+0x306>
    ae54:	0023      	movs	r3, r4
    ae56:	433b      	orrs	r3, r7
    ae58:	2e00      	cmp	r6, #0
    ae5a:	d000      	beq.n	ae5e <__aeabi_dadd+0x40a>
    ae5c:	e0ab      	b.n	afb6 <__aeabi_dadd+0x562>
    ae5e:	2b00      	cmp	r3, #0
    ae60:	d100      	bne.n	ae64 <__aeabi_dadd+0x410>
    ae62:	e0e7      	b.n	b034 <__aeabi_dadd+0x5e0>
    ae64:	000b      	movs	r3, r1
    ae66:	4313      	orrs	r3, r2
    ae68:	d100      	bne.n	ae6c <__aeabi_dadd+0x418>
    ae6a:	e677      	b.n	ab5c <__aeabi_dadd+0x108>
    ae6c:	18ba      	adds	r2, r7, r2
    ae6e:	42ba      	cmp	r2, r7
    ae70:	41bf      	sbcs	r7, r7
    ae72:	1864      	adds	r4, r4, r1
    ae74:	427f      	negs	r7, r7
    ae76:	19e4      	adds	r4, r4, r7
    ae78:	0223      	lsls	r3, r4, #8
    ae7a:	d400      	bmi.n	ae7e <__aeabi_dadd+0x42a>
    ae7c:	e0f2      	b.n	b064 <__aeabi_dadd+0x610>
    ae7e:	4b7c      	ldr	r3, [pc, #496]	; (b070 <__aeabi_dadd+0x61c>)
    ae80:	0017      	movs	r7, r2
    ae82:	401c      	ands	r4, r3
    ae84:	0006      	movs	r6, r0
    ae86:	e669      	b.n	ab5c <__aeabi_dadd+0x108>
    ae88:	0020      	movs	r0, r4
    ae8a:	4338      	orrs	r0, r7
    ae8c:	2e00      	cmp	r6, #0
    ae8e:	d1d1      	bne.n	ae34 <__aeabi_dadd+0x3e0>
    ae90:	2800      	cmp	r0, #0
    ae92:	d15b      	bne.n	af4c <__aeabi_dadd+0x4f8>
    ae94:	001c      	movs	r4, r3
    ae96:	4314      	orrs	r4, r2
    ae98:	d100      	bne.n	ae9c <__aeabi_dadd+0x448>
    ae9a:	e0a8      	b.n	afee <__aeabi_dadd+0x59a>
    ae9c:	001c      	movs	r4, r3
    ae9e:	0017      	movs	r7, r2
    aea0:	46d8      	mov	r8, fp
    aea2:	e65b      	b.n	ab5c <__aeabi_dadd+0x108>
    aea4:	0006      	movs	r6, r0
    aea6:	2400      	movs	r4, #0
    aea8:	2700      	movs	r7, #0
    aeaa:	e697      	b.n	abdc <__aeabi_dadd+0x188>
    aeac:	4650      	mov	r0, sl
    aeae:	000b      	movs	r3, r1
    aeb0:	3820      	subs	r0, #32
    aeb2:	40c3      	lsrs	r3, r0
    aeb4:	4699      	mov	r9, r3
    aeb6:	4653      	mov	r3, sl
    aeb8:	2b20      	cmp	r3, #32
    aeba:	d100      	bne.n	aebe <__aeabi_dadd+0x46a>
    aebc:	e095      	b.n	afea <__aeabi_dadd+0x596>
    aebe:	2340      	movs	r3, #64	; 0x40
    aec0:	4650      	mov	r0, sl
    aec2:	1a1b      	subs	r3, r3, r0
    aec4:	4099      	lsls	r1, r3
    aec6:	430a      	orrs	r2, r1
    aec8:	1e51      	subs	r1, r2, #1
    aeca:	418a      	sbcs	r2, r1
    aecc:	464b      	mov	r3, r9
    aece:	2100      	movs	r1, #0
    aed0:	431a      	orrs	r2, r3
    aed2:	e69f      	b.n	ac14 <__aeabi_dadd+0x1c0>
    aed4:	2e00      	cmp	r6, #0
    aed6:	d130      	bne.n	af3a <__aeabi_dadd+0x4e6>
    aed8:	0026      	movs	r6, r4
    aeda:	433e      	orrs	r6, r7
    aedc:	d067      	beq.n	afae <__aeabi_dadd+0x55a>
    aede:	43db      	mvns	r3, r3
    aee0:	469a      	mov	sl, r3
    aee2:	2b00      	cmp	r3, #0
    aee4:	d01c      	beq.n	af20 <__aeabi_dadd+0x4cc>
    aee6:	4e61      	ldr	r6, [pc, #388]	; (b06c <__aeabi_dadd+0x618>)
    aee8:	42b0      	cmp	r0, r6
    aeea:	d060      	beq.n	afae <__aeabi_dadd+0x55a>
    aeec:	4653      	mov	r3, sl
    aeee:	2b38      	cmp	r3, #56	; 0x38
    aef0:	dd00      	ble.n	aef4 <__aeabi_dadd+0x4a0>
    aef2:	e096      	b.n	b022 <__aeabi_dadd+0x5ce>
    aef4:	2b1f      	cmp	r3, #31
    aef6:	dd00      	ble.n	aefa <__aeabi_dadd+0x4a6>
    aef8:	e09f      	b.n	b03a <__aeabi_dadd+0x5e6>
    aefa:	2620      	movs	r6, #32
    aefc:	1af3      	subs	r3, r6, r3
    aefe:	0026      	movs	r6, r4
    af00:	409e      	lsls	r6, r3
    af02:	469c      	mov	ip, r3
    af04:	46b3      	mov	fp, r6
    af06:	4653      	mov	r3, sl
    af08:	003e      	movs	r6, r7
    af0a:	40de      	lsrs	r6, r3
    af0c:	0033      	movs	r3, r6
    af0e:	465e      	mov	r6, fp
    af10:	431e      	orrs	r6, r3
    af12:	4663      	mov	r3, ip
    af14:	409f      	lsls	r7, r3
    af16:	1e7b      	subs	r3, r7, #1
    af18:	419f      	sbcs	r7, r3
    af1a:	4653      	mov	r3, sl
    af1c:	40dc      	lsrs	r4, r3
    af1e:	4337      	orrs	r7, r6
    af20:	18bf      	adds	r7, r7, r2
    af22:	4297      	cmp	r7, r2
    af24:	4192      	sbcs	r2, r2
    af26:	1864      	adds	r4, r4, r1
    af28:	4252      	negs	r2, r2
    af2a:	18a4      	adds	r4, r4, r2
    af2c:	0006      	movs	r6, r0
    af2e:	e678      	b.n	ac22 <__aeabi_dadd+0x1ce>
    af30:	4327      	orrs	r7, r4
    af32:	1e7c      	subs	r4, r7, #1
    af34:	41a7      	sbcs	r7, r4
    af36:	2400      	movs	r4, #0
    af38:	e737      	b.n	adaa <__aeabi_dadd+0x356>
    af3a:	4e4c      	ldr	r6, [pc, #304]	; (b06c <__aeabi_dadd+0x618>)
    af3c:	42b0      	cmp	r0, r6
    af3e:	d036      	beq.n	afae <__aeabi_dadd+0x55a>
    af40:	2680      	movs	r6, #128	; 0x80
    af42:	425b      	negs	r3, r3
    af44:	0436      	lsls	r6, r6, #16
    af46:	469a      	mov	sl, r3
    af48:	4334      	orrs	r4, r6
    af4a:	e7cf      	b.n	aeec <__aeabi_dadd+0x498>
    af4c:	0018      	movs	r0, r3
    af4e:	4310      	orrs	r0, r2
    af50:	d100      	bne.n	af54 <__aeabi_dadd+0x500>
    af52:	e603      	b.n	ab5c <__aeabi_dadd+0x108>
    af54:	1ab8      	subs	r0, r7, r2
    af56:	4684      	mov	ip, r0
    af58:	4567      	cmp	r7, ip
    af5a:	41ad      	sbcs	r5, r5
    af5c:	1ae0      	subs	r0, r4, r3
    af5e:	426d      	negs	r5, r5
    af60:	1b40      	subs	r0, r0, r5
    af62:	0205      	lsls	r5, r0, #8
    af64:	d400      	bmi.n	af68 <__aeabi_dadd+0x514>
    af66:	e62c      	b.n	abc2 <__aeabi_dadd+0x16e>
    af68:	1bd7      	subs	r7, r2, r7
    af6a:	42ba      	cmp	r2, r7
    af6c:	4192      	sbcs	r2, r2
    af6e:	1b1c      	subs	r4, r3, r4
    af70:	4252      	negs	r2, r2
    af72:	1aa4      	subs	r4, r4, r2
    af74:	46d8      	mov	r8, fp
    af76:	e5f1      	b.n	ab5c <__aeabi_dadd+0x108>
    af78:	0018      	movs	r0, r3
    af7a:	4310      	orrs	r0, r2
    af7c:	d100      	bne.n	af80 <__aeabi_dadd+0x52c>
    af7e:	e763      	b.n	ae48 <__aeabi_dadd+0x3f4>
    af80:	08f8      	lsrs	r0, r7, #3
    af82:	0767      	lsls	r7, r4, #29
    af84:	4307      	orrs	r7, r0
    af86:	2080      	movs	r0, #128	; 0x80
    af88:	08e4      	lsrs	r4, r4, #3
    af8a:	0300      	lsls	r0, r0, #12
    af8c:	4204      	tst	r4, r0
    af8e:	d008      	beq.n	afa2 <__aeabi_dadd+0x54e>
    af90:	08dd      	lsrs	r5, r3, #3
    af92:	4205      	tst	r5, r0
    af94:	d105      	bne.n	afa2 <__aeabi_dadd+0x54e>
    af96:	08d2      	lsrs	r2, r2, #3
    af98:	0759      	lsls	r1, r3, #29
    af9a:	4311      	orrs	r1, r2
    af9c:	000f      	movs	r7, r1
    af9e:	002c      	movs	r4, r5
    afa0:	46d8      	mov	r8, fp
    afa2:	0f7b      	lsrs	r3, r7, #29
    afa4:	00e4      	lsls	r4, r4, #3
    afa6:	431c      	orrs	r4, r3
    afa8:	00ff      	lsls	r7, r7, #3
    afaa:	4e30      	ldr	r6, [pc, #192]	; (b06c <__aeabi_dadd+0x618>)
    afac:	e5d6      	b.n	ab5c <__aeabi_dadd+0x108>
    afae:	000c      	movs	r4, r1
    afb0:	0017      	movs	r7, r2
    afb2:	0006      	movs	r6, r0
    afb4:	e5d2      	b.n	ab5c <__aeabi_dadd+0x108>
    afb6:	2b00      	cmp	r3, #0
    afb8:	d038      	beq.n	b02c <__aeabi_dadd+0x5d8>
    afba:	000b      	movs	r3, r1
    afbc:	4313      	orrs	r3, r2
    afbe:	d100      	bne.n	afc2 <__aeabi_dadd+0x56e>
    afc0:	e742      	b.n	ae48 <__aeabi_dadd+0x3f4>
    afc2:	08f8      	lsrs	r0, r7, #3
    afc4:	0767      	lsls	r7, r4, #29
    afc6:	4307      	orrs	r7, r0
    afc8:	2080      	movs	r0, #128	; 0x80
    afca:	08e4      	lsrs	r4, r4, #3
    afcc:	0300      	lsls	r0, r0, #12
    afce:	4204      	tst	r4, r0
    afd0:	d0e7      	beq.n	afa2 <__aeabi_dadd+0x54e>
    afd2:	08cb      	lsrs	r3, r1, #3
    afd4:	4203      	tst	r3, r0
    afd6:	d1e4      	bne.n	afa2 <__aeabi_dadd+0x54e>
    afd8:	08d2      	lsrs	r2, r2, #3
    afda:	0749      	lsls	r1, r1, #29
    afdc:	4311      	orrs	r1, r2
    afde:	000f      	movs	r7, r1
    afe0:	001c      	movs	r4, r3
    afe2:	e7de      	b.n	afa2 <__aeabi_dadd+0x54e>
    afe4:	2700      	movs	r7, #0
    afe6:	2400      	movs	r4, #0
    afe8:	e5d5      	b.n	ab96 <__aeabi_dadd+0x142>
    afea:	2100      	movs	r1, #0
    afec:	e76b      	b.n	aec6 <__aeabi_dadd+0x472>
    afee:	2500      	movs	r5, #0
    aff0:	2700      	movs	r7, #0
    aff2:	e5f3      	b.n	abdc <__aeabi_dadd+0x188>
    aff4:	464e      	mov	r6, r9
    aff6:	0025      	movs	r5, r4
    aff8:	3e20      	subs	r6, #32
    affa:	40f5      	lsrs	r5, r6
    affc:	464b      	mov	r3, r9
    affe:	002e      	movs	r6, r5
    b000:	2b20      	cmp	r3, #32
    b002:	d02d      	beq.n	b060 <__aeabi_dadd+0x60c>
    b004:	2540      	movs	r5, #64	; 0x40
    b006:	1aed      	subs	r5, r5, r3
    b008:	40ac      	lsls	r4, r5
    b00a:	4327      	orrs	r7, r4
    b00c:	1e7c      	subs	r4, r7, #1
    b00e:	41a7      	sbcs	r7, r4
    b010:	2400      	movs	r4, #0
    b012:	4337      	orrs	r7, r6
    b014:	e6c9      	b.n	adaa <__aeabi_dadd+0x356>
    b016:	2480      	movs	r4, #128	; 0x80
    b018:	2500      	movs	r5, #0
    b01a:	0324      	lsls	r4, r4, #12
    b01c:	4e13      	ldr	r6, [pc, #76]	; (b06c <__aeabi_dadd+0x618>)
    b01e:	2700      	movs	r7, #0
    b020:	e5dc      	b.n	abdc <__aeabi_dadd+0x188>
    b022:	4327      	orrs	r7, r4
    b024:	1e7c      	subs	r4, r7, #1
    b026:	41a7      	sbcs	r7, r4
    b028:	2400      	movs	r4, #0
    b02a:	e779      	b.n	af20 <__aeabi_dadd+0x4cc>
    b02c:	000c      	movs	r4, r1
    b02e:	0017      	movs	r7, r2
    b030:	4e0e      	ldr	r6, [pc, #56]	; (b06c <__aeabi_dadd+0x618>)
    b032:	e593      	b.n	ab5c <__aeabi_dadd+0x108>
    b034:	000c      	movs	r4, r1
    b036:	0017      	movs	r7, r2
    b038:	e590      	b.n	ab5c <__aeabi_dadd+0x108>
    b03a:	4656      	mov	r6, sl
    b03c:	0023      	movs	r3, r4
    b03e:	3e20      	subs	r6, #32
    b040:	40f3      	lsrs	r3, r6
    b042:	4699      	mov	r9, r3
    b044:	4653      	mov	r3, sl
    b046:	2b20      	cmp	r3, #32
    b048:	d00e      	beq.n	b068 <__aeabi_dadd+0x614>
    b04a:	2340      	movs	r3, #64	; 0x40
    b04c:	4656      	mov	r6, sl
    b04e:	1b9b      	subs	r3, r3, r6
    b050:	409c      	lsls	r4, r3
    b052:	4327      	orrs	r7, r4
    b054:	1e7c      	subs	r4, r7, #1
    b056:	41a7      	sbcs	r7, r4
    b058:	464b      	mov	r3, r9
    b05a:	2400      	movs	r4, #0
    b05c:	431f      	orrs	r7, r3
    b05e:	e75f      	b.n	af20 <__aeabi_dadd+0x4cc>
    b060:	2400      	movs	r4, #0
    b062:	e7d2      	b.n	b00a <__aeabi_dadd+0x5b6>
    b064:	0017      	movs	r7, r2
    b066:	e5b2      	b.n	abce <__aeabi_dadd+0x17a>
    b068:	2400      	movs	r4, #0
    b06a:	e7f2      	b.n	b052 <__aeabi_dadd+0x5fe>
    b06c:	000007ff 	.word	0x000007ff
    b070:	ff7fffff 	.word	0xff7fffff

0000b074 <__aeabi_ddiv>:
    b074:	b5f0      	push	{r4, r5, r6, r7, lr}
    b076:	4657      	mov	r7, sl
    b078:	4645      	mov	r5, r8
    b07a:	46de      	mov	lr, fp
    b07c:	464e      	mov	r6, r9
    b07e:	b5e0      	push	{r5, r6, r7, lr}
    b080:	004c      	lsls	r4, r1, #1
    b082:	030e      	lsls	r6, r1, #12
    b084:	b087      	sub	sp, #28
    b086:	4683      	mov	fp, r0
    b088:	4692      	mov	sl, r2
    b08a:	001d      	movs	r5, r3
    b08c:	4680      	mov	r8, r0
    b08e:	0b36      	lsrs	r6, r6, #12
    b090:	0d64      	lsrs	r4, r4, #21
    b092:	0fcf      	lsrs	r7, r1, #31
    b094:	2c00      	cmp	r4, #0
    b096:	d04f      	beq.n	b138 <__aeabi_ddiv+0xc4>
    b098:	4b6f      	ldr	r3, [pc, #444]	; (b258 <__aeabi_ddiv+0x1e4>)
    b09a:	429c      	cmp	r4, r3
    b09c:	d035      	beq.n	b10a <__aeabi_ddiv+0x96>
    b09e:	2380      	movs	r3, #128	; 0x80
    b0a0:	0f42      	lsrs	r2, r0, #29
    b0a2:	041b      	lsls	r3, r3, #16
    b0a4:	00f6      	lsls	r6, r6, #3
    b0a6:	4313      	orrs	r3, r2
    b0a8:	4333      	orrs	r3, r6
    b0aa:	4699      	mov	r9, r3
    b0ac:	00c3      	lsls	r3, r0, #3
    b0ae:	4698      	mov	r8, r3
    b0b0:	4b6a      	ldr	r3, [pc, #424]	; (b25c <__aeabi_ddiv+0x1e8>)
    b0b2:	2600      	movs	r6, #0
    b0b4:	469c      	mov	ip, r3
    b0b6:	2300      	movs	r3, #0
    b0b8:	4464      	add	r4, ip
    b0ba:	9303      	str	r3, [sp, #12]
    b0bc:	032b      	lsls	r3, r5, #12
    b0be:	0b1b      	lsrs	r3, r3, #12
    b0c0:	469b      	mov	fp, r3
    b0c2:	006b      	lsls	r3, r5, #1
    b0c4:	0fed      	lsrs	r5, r5, #31
    b0c6:	4650      	mov	r0, sl
    b0c8:	0d5b      	lsrs	r3, r3, #21
    b0ca:	9501      	str	r5, [sp, #4]
    b0cc:	d05e      	beq.n	b18c <__aeabi_ddiv+0x118>
    b0ce:	4a62      	ldr	r2, [pc, #392]	; (b258 <__aeabi_ddiv+0x1e4>)
    b0d0:	4293      	cmp	r3, r2
    b0d2:	d053      	beq.n	b17c <__aeabi_ddiv+0x108>
    b0d4:	465a      	mov	r2, fp
    b0d6:	00d1      	lsls	r1, r2, #3
    b0d8:	2280      	movs	r2, #128	; 0x80
    b0da:	0f40      	lsrs	r0, r0, #29
    b0dc:	0412      	lsls	r2, r2, #16
    b0de:	4302      	orrs	r2, r0
    b0e0:	430a      	orrs	r2, r1
    b0e2:	4693      	mov	fp, r2
    b0e4:	4652      	mov	r2, sl
    b0e6:	00d1      	lsls	r1, r2, #3
    b0e8:	4a5c      	ldr	r2, [pc, #368]	; (b25c <__aeabi_ddiv+0x1e8>)
    b0ea:	4694      	mov	ip, r2
    b0ec:	2200      	movs	r2, #0
    b0ee:	4463      	add	r3, ip
    b0f0:	0038      	movs	r0, r7
    b0f2:	4068      	eors	r0, r5
    b0f4:	4684      	mov	ip, r0
    b0f6:	9002      	str	r0, [sp, #8]
    b0f8:	1ae4      	subs	r4, r4, r3
    b0fa:	4316      	orrs	r6, r2
    b0fc:	2e0f      	cmp	r6, #15
    b0fe:	d900      	bls.n	b102 <__aeabi_ddiv+0x8e>
    b100:	e0b4      	b.n	b26c <__aeabi_ddiv+0x1f8>
    b102:	4b57      	ldr	r3, [pc, #348]	; (b260 <__aeabi_ddiv+0x1ec>)
    b104:	00b6      	lsls	r6, r6, #2
    b106:	599b      	ldr	r3, [r3, r6]
    b108:	469f      	mov	pc, r3
    b10a:	0003      	movs	r3, r0
    b10c:	4333      	orrs	r3, r6
    b10e:	4699      	mov	r9, r3
    b110:	d16c      	bne.n	b1ec <__aeabi_ddiv+0x178>
    b112:	2300      	movs	r3, #0
    b114:	4698      	mov	r8, r3
    b116:	3302      	adds	r3, #2
    b118:	2608      	movs	r6, #8
    b11a:	9303      	str	r3, [sp, #12]
    b11c:	e7ce      	b.n	b0bc <__aeabi_ddiv+0x48>
    b11e:	46cb      	mov	fp, r9
    b120:	4641      	mov	r1, r8
    b122:	9a03      	ldr	r2, [sp, #12]
    b124:	9701      	str	r7, [sp, #4]
    b126:	2a02      	cmp	r2, #2
    b128:	d165      	bne.n	b1f6 <__aeabi_ddiv+0x182>
    b12a:	9b01      	ldr	r3, [sp, #4]
    b12c:	4c4a      	ldr	r4, [pc, #296]	; (b258 <__aeabi_ddiv+0x1e4>)
    b12e:	469c      	mov	ip, r3
    b130:	2300      	movs	r3, #0
    b132:	2200      	movs	r2, #0
    b134:	4698      	mov	r8, r3
    b136:	e06b      	b.n	b210 <__aeabi_ddiv+0x19c>
    b138:	0003      	movs	r3, r0
    b13a:	4333      	orrs	r3, r6
    b13c:	4699      	mov	r9, r3
    b13e:	d04e      	beq.n	b1de <__aeabi_ddiv+0x16a>
    b140:	2e00      	cmp	r6, #0
    b142:	d100      	bne.n	b146 <__aeabi_ddiv+0xd2>
    b144:	e1bc      	b.n	b4c0 <__aeabi_ddiv+0x44c>
    b146:	0030      	movs	r0, r6
    b148:	f001 fb08 	bl	c75c <__clzsi2>
    b14c:	0003      	movs	r3, r0
    b14e:	3b0b      	subs	r3, #11
    b150:	2b1c      	cmp	r3, #28
    b152:	dd00      	ble.n	b156 <__aeabi_ddiv+0xe2>
    b154:	e1ac      	b.n	b4b0 <__aeabi_ddiv+0x43c>
    b156:	221d      	movs	r2, #29
    b158:	1ad3      	subs	r3, r2, r3
    b15a:	465a      	mov	r2, fp
    b15c:	0001      	movs	r1, r0
    b15e:	40da      	lsrs	r2, r3
    b160:	3908      	subs	r1, #8
    b162:	408e      	lsls	r6, r1
    b164:	0013      	movs	r3, r2
    b166:	4333      	orrs	r3, r6
    b168:	4699      	mov	r9, r3
    b16a:	465b      	mov	r3, fp
    b16c:	408b      	lsls	r3, r1
    b16e:	4698      	mov	r8, r3
    b170:	2300      	movs	r3, #0
    b172:	4c3c      	ldr	r4, [pc, #240]	; (b264 <__aeabi_ddiv+0x1f0>)
    b174:	2600      	movs	r6, #0
    b176:	1a24      	subs	r4, r4, r0
    b178:	9303      	str	r3, [sp, #12]
    b17a:	e79f      	b.n	b0bc <__aeabi_ddiv+0x48>
    b17c:	4651      	mov	r1, sl
    b17e:	465a      	mov	r2, fp
    b180:	4311      	orrs	r1, r2
    b182:	d129      	bne.n	b1d8 <__aeabi_ddiv+0x164>
    b184:	2200      	movs	r2, #0
    b186:	4693      	mov	fp, r2
    b188:	3202      	adds	r2, #2
    b18a:	e7b1      	b.n	b0f0 <__aeabi_ddiv+0x7c>
    b18c:	4659      	mov	r1, fp
    b18e:	4301      	orrs	r1, r0
    b190:	d01e      	beq.n	b1d0 <__aeabi_ddiv+0x15c>
    b192:	465b      	mov	r3, fp
    b194:	2b00      	cmp	r3, #0
    b196:	d100      	bne.n	b19a <__aeabi_ddiv+0x126>
    b198:	e19e      	b.n	b4d8 <__aeabi_ddiv+0x464>
    b19a:	4658      	mov	r0, fp
    b19c:	f001 fade 	bl	c75c <__clzsi2>
    b1a0:	0003      	movs	r3, r0
    b1a2:	3b0b      	subs	r3, #11
    b1a4:	2b1c      	cmp	r3, #28
    b1a6:	dd00      	ble.n	b1aa <__aeabi_ddiv+0x136>
    b1a8:	e18f      	b.n	b4ca <__aeabi_ddiv+0x456>
    b1aa:	0002      	movs	r2, r0
    b1ac:	4659      	mov	r1, fp
    b1ae:	3a08      	subs	r2, #8
    b1b0:	4091      	lsls	r1, r2
    b1b2:	468b      	mov	fp, r1
    b1b4:	211d      	movs	r1, #29
    b1b6:	1acb      	subs	r3, r1, r3
    b1b8:	4651      	mov	r1, sl
    b1ba:	40d9      	lsrs	r1, r3
    b1bc:	000b      	movs	r3, r1
    b1be:	4659      	mov	r1, fp
    b1c0:	430b      	orrs	r3, r1
    b1c2:	4651      	mov	r1, sl
    b1c4:	469b      	mov	fp, r3
    b1c6:	4091      	lsls	r1, r2
    b1c8:	4b26      	ldr	r3, [pc, #152]	; (b264 <__aeabi_ddiv+0x1f0>)
    b1ca:	2200      	movs	r2, #0
    b1cc:	1a1b      	subs	r3, r3, r0
    b1ce:	e78f      	b.n	b0f0 <__aeabi_ddiv+0x7c>
    b1d0:	2300      	movs	r3, #0
    b1d2:	2201      	movs	r2, #1
    b1d4:	469b      	mov	fp, r3
    b1d6:	e78b      	b.n	b0f0 <__aeabi_ddiv+0x7c>
    b1d8:	4651      	mov	r1, sl
    b1da:	2203      	movs	r2, #3
    b1dc:	e788      	b.n	b0f0 <__aeabi_ddiv+0x7c>
    b1de:	2300      	movs	r3, #0
    b1e0:	4698      	mov	r8, r3
    b1e2:	3301      	adds	r3, #1
    b1e4:	2604      	movs	r6, #4
    b1e6:	2400      	movs	r4, #0
    b1e8:	9303      	str	r3, [sp, #12]
    b1ea:	e767      	b.n	b0bc <__aeabi_ddiv+0x48>
    b1ec:	2303      	movs	r3, #3
    b1ee:	46b1      	mov	r9, r6
    b1f0:	9303      	str	r3, [sp, #12]
    b1f2:	260c      	movs	r6, #12
    b1f4:	e762      	b.n	b0bc <__aeabi_ddiv+0x48>
    b1f6:	2a03      	cmp	r2, #3
    b1f8:	d100      	bne.n	b1fc <__aeabi_ddiv+0x188>
    b1fa:	e25c      	b.n	b6b6 <__aeabi_ddiv+0x642>
    b1fc:	9b01      	ldr	r3, [sp, #4]
    b1fe:	2a01      	cmp	r2, #1
    b200:	d000      	beq.n	b204 <__aeabi_ddiv+0x190>
    b202:	e1e4      	b.n	b5ce <__aeabi_ddiv+0x55a>
    b204:	4013      	ands	r3, r2
    b206:	469c      	mov	ip, r3
    b208:	2300      	movs	r3, #0
    b20a:	2400      	movs	r4, #0
    b20c:	2200      	movs	r2, #0
    b20e:	4698      	mov	r8, r3
    b210:	2100      	movs	r1, #0
    b212:	0312      	lsls	r2, r2, #12
    b214:	0b13      	lsrs	r3, r2, #12
    b216:	0d0a      	lsrs	r2, r1, #20
    b218:	0512      	lsls	r2, r2, #20
    b21a:	431a      	orrs	r2, r3
    b21c:	0523      	lsls	r3, r4, #20
    b21e:	4c12      	ldr	r4, [pc, #72]	; (b268 <__aeabi_ddiv+0x1f4>)
    b220:	4640      	mov	r0, r8
    b222:	4022      	ands	r2, r4
    b224:	4313      	orrs	r3, r2
    b226:	4662      	mov	r2, ip
    b228:	005b      	lsls	r3, r3, #1
    b22a:	07d2      	lsls	r2, r2, #31
    b22c:	085b      	lsrs	r3, r3, #1
    b22e:	4313      	orrs	r3, r2
    b230:	0019      	movs	r1, r3
    b232:	b007      	add	sp, #28
    b234:	bc3c      	pop	{r2, r3, r4, r5}
    b236:	4690      	mov	r8, r2
    b238:	4699      	mov	r9, r3
    b23a:	46a2      	mov	sl, r4
    b23c:	46ab      	mov	fp, r5
    b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b240:	2300      	movs	r3, #0
    b242:	2280      	movs	r2, #128	; 0x80
    b244:	469c      	mov	ip, r3
    b246:	0312      	lsls	r2, r2, #12
    b248:	4698      	mov	r8, r3
    b24a:	4c03      	ldr	r4, [pc, #12]	; (b258 <__aeabi_ddiv+0x1e4>)
    b24c:	e7e0      	b.n	b210 <__aeabi_ddiv+0x19c>
    b24e:	2300      	movs	r3, #0
    b250:	4c01      	ldr	r4, [pc, #4]	; (b258 <__aeabi_ddiv+0x1e4>)
    b252:	2200      	movs	r2, #0
    b254:	4698      	mov	r8, r3
    b256:	e7db      	b.n	b210 <__aeabi_ddiv+0x19c>
    b258:	000007ff 	.word	0x000007ff
    b25c:	fffffc01 	.word	0xfffffc01
    b260:	00012860 	.word	0x00012860
    b264:	fffffc0d 	.word	0xfffffc0d
    b268:	800fffff 	.word	0x800fffff
    b26c:	45d9      	cmp	r9, fp
    b26e:	d900      	bls.n	b272 <__aeabi_ddiv+0x1fe>
    b270:	e139      	b.n	b4e6 <__aeabi_ddiv+0x472>
    b272:	d100      	bne.n	b276 <__aeabi_ddiv+0x202>
    b274:	e134      	b.n	b4e0 <__aeabi_ddiv+0x46c>
    b276:	2300      	movs	r3, #0
    b278:	4646      	mov	r6, r8
    b27a:	464d      	mov	r5, r9
    b27c:	469a      	mov	sl, r3
    b27e:	3c01      	subs	r4, #1
    b280:	465b      	mov	r3, fp
    b282:	0e0a      	lsrs	r2, r1, #24
    b284:	021b      	lsls	r3, r3, #8
    b286:	431a      	orrs	r2, r3
    b288:	020b      	lsls	r3, r1, #8
    b28a:	0c17      	lsrs	r7, r2, #16
    b28c:	9303      	str	r3, [sp, #12]
    b28e:	0413      	lsls	r3, r2, #16
    b290:	0c1b      	lsrs	r3, r3, #16
    b292:	0039      	movs	r1, r7
    b294:	0028      	movs	r0, r5
    b296:	4690      	mov	r8, r2
    b298:	9301      	str	r3, [sp, #4]
    b29a:	f7fe faab 	bl	97f4 <__udivsi3>
    b29e:	0002      	movs	r2, r0
    b2a0:	9b01      	ldr	r3, [sp, #4]
    b2a2:	4683      	mov	fp, r0
    b2a4:	435a      	muls	r2, r3
    b2a6:	0028      	movs	r0, r5
    b2a8:	0039      	movs	r1, r7
    b2aa:	4691      	mov	r9, r2
    b2ac:	f7fe fb28 	bl	9900 <__aeabi_uidivmod>
    b2b0:	0c35      	lsrs	r5, r6, #16
    b2b2:	0409      	lsls	r1, r1, #16
    b2b4:	430d      	orrs	r5, r1
    b2b6:	45a9      	cmp	r9, r5
    b2b8:	d90d      	bls.n	b2d6 <__aeabi_ddiv+0x262>
    b2ba:	465b      	mov	r3, fp
    b2bc:	4445      	add	r5, r8
    b2be:	3b01      	subs	r3, #1
    b2c0:	45a8      	cmp	r8, r5
    b2c2:	d900      	bls.n	b2c6 <__aeabi_ddiv+0x252>
    b2c4:	e13a      	b.n	b53c <__aeabi_ddiv+0x4c8>
    b2c6:	45a9      	cmp	r9, r5
    b2c8:	d800      	bhi.n	b2cc <__aeabi_ddiv+0x258>
    b2ca:	e137      	b.n	b53c <__aeabi_ddiv+0x4c8>
    b2cc:	2302      	movs	r3, #2
    b2ce:	425b      	negs	r3, r3
    b2d0:	469c      	mov	ip, r3
    b2d2:	4445      	add	r5, r8
    b2d4:	44e3      	add	fp, ip
    b2d6:	464b      	mov	r3, r9
    b2d8:	1aeb      	subs	r3, r5, r3
    b2da:	0039      	movs	r1, r7
    b2dc:	0018      	movs	r0, r3
    b2de:	9304      	str	r3, [sp, #16]
    b2e0:	f7fe fa88 	bl	97f4 <__udivsi3>
    b2e4:	9b01      	ldr	r3, [sp, #4]
    b2e6:	0005      	movs	r5, r0
    b2e8:	4343      	muls	r3, r0
    b2ea:	0039      	movs	r1, r7
    b2ec:	9804      	ldr	r0, [sp, #16]
    b2ee:	4699      	mov	r9, r3
    b2f0:	f7fe fb06 	bl	9900 <__aeabi_uidivmod>
    b2f4:	0433      	lsls	r3, r6, #16
    b2f6:	0409      	lsls	r1, r1, #16
    b2f8:	0c1b      	lsrs	r3, r3, #16
    b2fa:	430b      	orrs	r3, r1
    b2fc:	4599      	cmp	r9, r3
    b2fe:	d909      	bls.n	b314 <__aeabi_ddiv+0x2a0>
    b300:	4443      	add	r3, r8
    b302:	1e6a      	subs	r2, r5, #1
    b304:	4598      	cmp	r8, r3
    b306:	d900      	bls.n	b30a <__aeabi_ddiv+0x296>
    b308:	e11a      	b.n	b540 <__aeabi_ddiv+0x4cc>
    b30a:	4599      	cmp	r9, r3
    b30c:	d800      	bhi.n	b310 <__aeabi_ddiv+0x29c>
    b30e:	e117      	b.n	b540 <__aeabi_ddiv+0x4cc>
    b310:	3d02      	subs	r5, #2
    b312:	4443      	add	r3, r8
    b314:	464a      	mov	r2, r9
    b316:	1a9b      	subs	r3, r3, r2
    b318:	465a      	mov	r2, fp
    b31a:	0412      	lsls	r2, r2, #16
    b31c:	432a      	orrs	r2, r5
    b31e:	9903      	ldr	r1, [sp, #12]
    b320:	4693      	mov	fp, r2
    b322:	0c10      	lsrs	r0, r2, #16
    b324:	0c0a      	lsrs	r2, r1, #16
    b326:	4691      	mov	r9, r2
    b328:	0409      	lsls	r1, r1, #16
    b32a:	465a      	mov	r2, fp
    b32c:	0c09      	lsrs	r1, r1, #16
    b32e:	464e      	mov	r6, r9
    b330:	000d      	movs	r5, r1
    b332:	0412      	lsls	r2, r2, #16
    b334:	0c12      	lsrs	r2, r2, #16
    b336:	4345      	muls	r5, r0
    b338:	9105      	str	r1, [sp, #20]
    b33a:	4351      	muls	r1, r2
    b33c:	4372      	muls	r2, r6
    b33e:	4370      	muls	r0, r6
    b340:	1952      	adds	r2, r2, r5
    b342:	0c0e      	lsrs	r6, r1, #16
    b344:	18b2      	adds	r2, r6, r2
    b346:	4295      	cmp	r5, r2
    b348:	d903      	bls.n	b352 <__aeabi_ddiv+0x2de>
    b34a:	2580      	movs	r5, #128	; 0x80
    b34c:	026d      	lsls	r5, r5, #9
    b34e:	46ac      	mov	ip, r5
    b350:	4460      	add	r0, ip
    b352:	0c15      	lsrs	r5, r2, #16
    b354:	0409      	lsls	r1, r1, #16
    b356:	0412      	lsls	r2, r2, #16
    b358:	0c09      	lsrs	r1, r1, #16
    b35a:	1828      	adds	r0, r5, r0
    b35c:	1852      	adds	r2, r2, r1
    b35e:	4283      	cmp	r3, r0
    b360:	d200      	bcs.n	b364 <__aeabi_ddiv+0x2f0>
    b362:	e0ce      	b.n	b502 <__aeabi_ddiv+0x48e>
    b364:	d100      	bne.n	b368 <__aeabi_ddiv+0x2f4>
    b366:	e0c8      	b.n	b4fa <__aeabi_ddiv+0x486>
    b368:	1a1d      	subs	r5, r3, r0
    b36a:	4653      	mov	r3, sl
    b36c:	1a9e      	subs	r6, r3, r2
    b36e:	45b2      	cmp	sl, r6
    b370:	4192      	sbcs	r2, r2
    b372:	4252      	negs	r2, r2
    b374:	1aab      	subs	r3, r5, r2
    b376:	469a      	mov	sl, r3
    b378:	4598      	cmp	r8, r3
    b37a:	d100      	bne.n	b37e <__aeabi_ddiv+0x30a>
    b37c:	e117      	b.n	b5ae <__aeabi_ddiv+0x53a>
    b37e:	0039      	movs	r1, r7
    b380:	0018      	movs	r0, r3
    b382:	f7fe fa37 	bl	97f4 <__udivsi3>
    b386:	9b01      	ldr	r3, [sp, #4]
    b388:	0005      	movs	r5, r0
    b38a:	4343      	muls	r3, r0
    b38c:	0039      	movs	r1, r7
    b38e:	4650      	mov	r0, sl
    b390:	9304      	str	r3, [sp, #16]
    b392:	f7fe fab5 	bl	9900 <__aeabi_uidivmod>
    b396:	9804      	ldr	r0, [sp, #16]
    b398:	040b      	lsls	r3, r1, #16
    b39a:	0c31      	lsrs	r1, r6, #16
    b39c:	4319      	orrs	r1, r3
    b39e:	4288      	cmp	r0, r1
    b3a0:	d909      	bls.n	b3b6 <__aeabi_ddiv+0x342>
    b3a2:	4441      	add	r1, r8
    b3a4:	1e6b      	subs	r3, r5, #1
    b3a6:	4588      	cmp	r8, r1
    b3a8:	d900      	bls.n	b3ac <__aeabi_ddiv+0x338>
    b3aa:	e107      	b.n	b5bc <__aeabi_ddiv+0x548>
    b3ac:	4288      	cmp	r0, r1
    b3ae:	d800      	bhi.n	b3b2 <__aeabi_ddiv+0x33e>
    b3b0:	e104      	b.n	b5bc <__aeabi_ddiv+0x548>
    b3b2:	3d02      	subs	r5, #2
    b3b4:	4441      	add	r1, r8
    b3b6:	9b04      	ldr	r3, [sp, #16]
    b3b8:	1acb      	subs	r3, r1, r3
    b3ba:	0018      	movs	r0, r3
    b3bc:	0039      	movs	r1, r7
    b3be:	9304      	str	r3, [sp, #16]
    b3c0:	f7fe fa18 	bl	97f4 <__udivsi3>
    b3c4:	9b01      	ldr	r3, [sp, #4]
    b3c6:	4682      	mov	sl, r0
    b3c8:	4343      	muls	r3, r0
    b3ca:	0039      	movs	r1, r7
    b3cc:	9804      	ldr	r0, [sp, #16]
    b3ce:	9301      	str	r3, [sp, #4]
    b3d0:	f7fe fa96 	bl	9900 <__aeabi_uidivmod>
    b3d4:	9801      	ldr	r0, [sp, #4]
    b3d6:	040b      	lsls	r3, r1, #16
    b3d8:	0431      	lsls	r1, r6, #16
    b3da:	0c09      	lsrs	r1, r1, #16
    b3dc:	4319      	orrs	r1, r3
    b3de:	4288      	cmp	r0, r1
    b3e0:	d90d      	bls.n	b3fe <__aeabi_ddiv+0x38a>
    b3e2:	4653      	mov	r3, sl
    b3e4:	4441      	add	r1, r8
    b3e6:	3b01      	subs	r3, #1
    b3e8:	4588      	cmp	r8, r1
    b3ea:	d900      	bls.n	b3ee <__aeabi_ddiv+0x37a>
    b3ec:	e0e8      	b.n	b5c0 <__aeabi_ddiv+0x54c>
    b3ee:	4288      	cmp	r0, r1
    b3f0:	d800      	bhi.n	b3f4 <__aeabi_ddiv+0x380>
    b3f2:	e0e5      	b.n	b5c0 <__aeabi_ddiv+0x54c>
    b3f4:	2302      	movs	r3, #2
    b3f6:	425b      	negs	r3, r3
    b3f8:	469c      	mov	ip, r3
    b3fa:	4441      	add	r1, r8
    b3fc:	44e2      	add	sl, ip
    b3fe:	9b01      	ldr	r3, [sp, #4]
    b400:	042d      	lsls	r5, r5, #16
    b402:	1ace      	subs	r6, r1, r3
    b404:	4651      	mov	r1, sl
    b406:	4329      	orrs	r1, r5
    b408:	9d05      	ldr	r5, [sp, #20]
    b40a:	464f      	mov	r7, r9
    b40c:	002a      	movs	r2, r5
    b40e:	040b      	lsls	r3, r1, #16
    b410:	0c08      	lsrs	r0, r1, #16
    b412:	0c1b      	lsrs	r3, r3, #16
    b414:	435a      	muls	r2, r3
    b416:	4345      	muls	r5, r0
    b418:	437b      	muls	r3, r7
    b41a:	4378      	muls	r0, r7
    b41c:	195b      	adds	r3, r3, r5
    b41e:	0c17      	lsrs	r7, r2, #16
    b420:	18fb      	adds	r3, r7, r3
    b422:	429d      	cmp	r5, r3
    b424:	d903      	bls.n	b42e <__aeabi_ddiv+0x3ba>
    b426:	2580      	movs	r5, #128	; 0x80
    b428:	026d      	lsls	r5, r5, #9
    b42a:	46ac      	mov	ip, r5
    b42c:	4460      	add	r0, ip
    b42e:	0c1d      	lsrs	r5, r3, #16
    b430:	0412      	lsls	r2, r2, #16
    b432:	041b      	lsls	r3, r3, #16
    b434:	0c12      	lsrs	r2, r2, #16
    b436:	1828      	adds	r0, r5, r0
    b438:	189b      	adds	r3, r3, r2
    b43a:	4286      	cmp	r6, r0
    b43c:	d200      	bcs.n	b440 <__aeabi_ddiv+0x3cc>
    b43e:	e093      	b.n	b568 <__aeabi_ddiv+0x4f4>
    b440:	d100      	bne.n	b444 <__aeabi_ddiv+0x3d0>
    b442:	e08e      	b.n	b562 <__aeabi_ddiv+0x4ee>
    b444:	2301      	movs	r3, #1
    b446:	4319      	orrs	r1, r3
    b448:	4ba0      	ldr	r3, [pc, #640]	; (b6cc <__aeabi_ddiv+0x658>)
    b44a:	18e3      	adds	r3, r4, r3
    b44c:	2b00      	cmp	r3, #0
    b44e:	dc00      	bgt.n	b452 <__aeabi_ddiv+0x3de>
    b450:	e099      	b.n	b586 <__aeabi_ddiv+0x512>
    b452:	074a      	lsls	r2, r1, #29
    b454:	d000      	beq.n	b458 <__aeabi_ddiv+0x3e4>
    b456:	e09e      	b.n	b596 <__aeabi_ddiv+0x522>
    b458:	465a      	mov	r2, fp
    b45a:	01d2      	lsls	r2, r2, #7
    b45c:	d506      	bpl.n	b46c <__aeabi_ddiv+0x3f8>
    b45e:	465a      	mov	r2, fp
    b460:	4b9b      	ldr	r3, [pc, #620]	; (b6d0 <__aeabi_ddiv+0x65c>)
    b462:	401a      	ands	r2, r3
    b464:	2380      	movs	r3, #128	; 0x80
    b466:	4693      	mov	fp, r2
    b468:	00db      	lsls	r3, r3, #3
    b46a:	18e3      	adds	r3, r4, r3
    b46c:	4a99      	ldr	r2, [pc, #612]	; (b6d4 <__aeabi_ddiv+0x660>)
    b46e:	4293      	cmp	r3, r2
    b470:	dd68      	ble.n	b544 <__aeabi_ddiv+0x4d0>
    b472:	2301      	movs	r3, #1
    b474:	9a02      	ldr	r2, [sp, #8]
    b476:	4c98      	ldr	r4, [pc, #608]	; (b6d8 <__aeabi_ddiv+0x664>)
    b478:	401a      	ands	r2, r3
    b47a:	2300      	movs	r3, #0
    b47c:	4694      	mov	ip, r2
    b47e:	4698      	mov	r8, r3
    b480:	2200      	movs	r2, #0
    b482:	e6c5      	b.n	b210 <__aeabi_ddiv+0x19c>
    b484:	2280      	movs	r2, #128	; 0x80
    b486:	464b      	mov	r3, r9
    b488:	0312      	lsls	r2, r2, #12
    b48a:	4213      	tst	r3, r2
    b48c:	d00a      	beq.n	b4a4 <__aeabi_ddiv+0x430>
    b48e:	465b      	mov	r3, fp
    b490:	4213      	tst	r3, r2
    b492:	d106      	bne.n	b4a2 <__aeabi_ddiv+0x42e>
    b494:	431a      	orrs	r2, r3
    b496:	0312      	lsls	r2, r2, #12
    b498:	0b12      	lsrs	r2, r2, #12
    b49a:	46ac      	mov	ip, r5
    b49c:	4688      	mov	r8, r1
    b49e:	4c8e      	ldr	r4, [pc, #568]	; (b6d8 <__aeabi_ddiv+0x664>)
    b4a0:	e6b6      	b.n	b210 <__aeabi_ddiv+0x19c>
    b4a2:	464b      	mov	r3, r9
    b4a4:	431a      	orrs	r2, r3
    b4a6:	0312      	lsls	r2, r2, #12
    b4a8:	0b12      	lsrs	r2, r2, #12
    b4aa:	46bc      	mov	ip, r7
    b4ac:	4c8a      	ldr	r4, [pc, #552]	; (b6d8 <__aeabi_ddiv+0x664>)
    b4ae:	e6af      	b.n	b210 <__aeabi_ddiv+0x19c>
    b4b0:	0003      	movs	r3, r0
    b4b2:	465a      	mov	r2, fp
    b4b4:	3b28      	subs	r3, #40	; 0x28
    b4b6:	409a      	lsls	r2, r3
    b4b8:	2300      	movs	r3, #0
    b4ba:	4691      	mov	r9, r2
    b4bc:	4698      	mov	r8, r3
    b4be:	e657      	b.n	b170 <__aeabi_ddiv+0xfc>
    b4c0:	4658      	mov	r0, fp
    b4c2:	f001 f94b 	bl	c75c <__clzsi2>
    b4c6:	3020      	adds	r0, #32
    b4c8:	e640      	b.n	b14c <__aeabi_ddiv+0xd8>
    b4ca:	0003      	movs	r3, r0
    b4cc:	4652      	mov	r2, sl
    b4ce:	3b28      	subs	r3, #40	; 0x28
    b4d0:	409a      	lsls	r2, r3
    b4d2:	2100      	movs	r1, #0
    b4d4:	4693      	mov	fp, r2
    b4d6:	e677      	b.n	b1c8 <__aeabi_ddiv+0x154>
    b4d8:	f001 f940 	bl	c75c <__clzsi2>
    b4dc:	3020      	adds	r0, #32
    b4de:	e65f      	b.n	b1a0 <__aeabi_ddiv+0x12c>
    b4e0:	4588      	cmp	r8, r1
    b4e2:	d200      	bcs.n	b4e6 <__aeabi_ddiv+0x472>
    b4e4:	e6c7      	b.n	b276 <__aeabi_ddiv+0x202>
    b4e6:	464b      	mov	r3, r9
    b4e8:	07de      	lsls	r6, r3, #31
    b4ea:	085d      	lsrs	r5, r3, #1
    b4ec:	4643      	mov	r3, r8
    b4ee:	085b      	lsrs	r3, r3, #1
    b4f0:	431e      	orrs	r6, r3
    b4f2:	4643      	mov	r3, r8
    b4f4:	07db      	lsls	r3, r3, #31
    b4f6:	469a      	mov	sl, r3
    b4f8:	e6c2      	b.n	b280 <__aeabi_ddiv+0x20c>
    b4fa:	2500      	movs	r5, #0
    b4fc:	4592      	cmp	sl, r2
    b4fe:	d300      	bcc.n	b502 <__aeabi_ddiv+0x48e>
    b500:	e733      	b.n	b36a <__aeabi_ddiv+0x2f6>
    b502:	9e03      	ldr	r6, [sp, #12]
    b504:	4659      	mov	r1, fp
    b506:	46b4      	mov	ip, r6
    b508:	44e2      	add	sl, ip
    b50a:	45b2      	cmp	sl, r6
    b50c:	41ad      	sbcs	r5, r5
    b50e:	426d      	negs	r5, r5
    b510:	4445      	add	r5, r8
    b512:	18eb      	adds	r3, r5, r3
    b514:	3901      	subs	r1, #1
    b516:	4598      	cmp	r8, r3
    b518:	d207      	bcs.n	b52a <__aeabi_ddiv+0x4b6>
    b51a:	4298      	cmp	r0, r3
    b51c:	d900      	bls.n	b520 <__aeabi_ddiv+0x4ac>
    b51e:	e07f      	b.n	b620 <__aeabi_ddiv+0x5ac>
    b520:	d100      	bne.n	b524 <__aeabi_ddiv+0x4b0>
    b522:	e0bc      	b.n	b69e <__aeabi_ddiv+0x62a>
    b524:	1a1d      	subs	r5, r3, r0
    b526:	468b      	mov	fp, r1
    b528:	e71f      	b.n	b36a <__aeabi_ddiv+0x2f6>
    b52a:	4598      	cmp	r8, r3
    b52c:	d1fa      	bne.n	b524 <__aeabi_ddiv+0x4b0>
    b52e:	9d03      	ldr	r5, [sp, #12]
    b530:	4555      	cmp	r5, sl
    b532:	d9f2      	bls.n	b51a <__aeabi_ddiv+0x4a6>
    b534:	4643      	mov	r3, r8
    b536:	468b      	mov	fp, r1
    b538:	1a1d      	subs	r5, r3, r0
    b53a:	e716      	b.n	b36a <__aeabi_ddiv+0x2f6>
    b53c:	469b      	mov	fp, r3
    b53e:	e6ca      	b.n	b2d6 <__aeabi_ddiv+0x262>
    b540:	0015      	movs	r5, r2
    b542:	e6e7      	b.n	b314 <__aeabi_ddiv+0x2a0>
    b544:	465a      	mov	r2, fp
    b546:	08c9      	lsrs	r1, r1, #3
    b548:	0752      	lsls	r2, r2, #29
    b54a:	430a      	orrs	r2, r1
    b54c:	055b      	lsls	r3, r3, #21
    b54e:	4690      	mov	r8, r2
    b550:	0d5c      	lsrs	r4, r3, #21
    b552:	465a      	mov	r2, fp
    b554:	2301      	movs	r3, #1
    b556:	9902      	ldr	r1, [sp, #8]
    b558:	0252      	lsls	r2, r2, #9
    b55a:	4019      	ands	r1, r3
    b55c:	0b12      	lsrs	r2, r2, #12
    b55e:	468c      	mov	ip, r1
    b560:	e656      	b.n	b210 <__aeabi_ddiv+0x19c>
    b562:	2b00      	cmp	r3, #0
    b564:	d100      	bne.n	b568 <__aeabi_ddiv+0x4f4>
    b566:	e76f      	b.n	b448 <__aeabi_ddiv+0x3d4>
    b568:	4446      	add	r6, r8
    b56a:	1e4a      	subs	r2, r1, #1
    b56c:	45b0      	cmp	r8, r6
    b56e:	d929      	bls.n	b5c4 <__aeabi_ddiv+0x550>
    b570:	0011      	movs	r1, r2
    b572:	4286      	cmp	r6, r0
    b574:	d000      	beq.n	b578 <__aeabi_ddiv+0x504>
    b576:	e765      	b.n	b444 <__aeabi_ddiv+0x3d0>
    b578:	9a03      	ldr	r2, [sp, #12]
    b57a:	4293      	cmp	r3, r2
    b57c:	d000      	beq.n	b580 <__aeabi_ddiv+0x50c>
    b57e:	e761      	b.n	b444 <__aeabi_ddiv+0x3d0>
    b580:	e762      	b.n	b448 <__aeabi_ddiv+0x3d4>
    b582:	2101      	movs	r1, #1
    b584:	4249      	negs	r1, r1
    b586:	2001      	movs	r0, #1
    b588:	1ac2      	subs	r2, r0, r3
    b58a:	2a38      	cmp	r2, #56	; 0x38
    b58c:	dd21      	ble.n	b5d2 <__aeabi_ddiv+0x55e>
    b58e:	9b02      	ldr	r3, [sp, #8]
    b590:	4003      	ands	r3, r0
    b592:	469c      	mov	ip, r3
    b594:	e638      	b.n	b208 <__aeabi_ddiv+0x194>
    b596:	220f      	movs	r2, #15
    b598:	400a      	ands	r2, r1
    b59a:	2a04      	cmp	r2, #4
    b59c:	d100      	bne.n	b5a0 <__aeabi_ddiv+0x52c>
    b59e:	e75b      	b.n	b458 <__aeabi_ddiv+0x3e4>
    b5a0:	000a      	movs	r2, r1
    b5a2:	1d11      	adds	r1, r2, #4
    b5a4:	4291      	cmp	r1, r2
    b5a6:	4192      	sbcs	r2, r2
    b5a8:	4252      	negs	r2, r2
    b5aa:	4493      	add	fp, r2
    b5ac:	e754      	b.n	b458 <__aeabi_ddiv+0x3e4>
    b5ae:	4b47      	ldr	r3, [pc, #284]	; (b6cc <__aeabi_ddiv+0x658>)
    b5b0:	18e3      	adds	r3, r4, r3
    b5b2:	2b00      	cmp	r3, #0
    b5b4:	dde5      	ble.n	b582 <__aeabi_ddiv+0x50e>
    b5b6:	2201      	movs	r2, #1
    b5b8:	4252      	negs	r2, r2
    b5ba:	e7f2      	b.n	b5a2 <__aeabi_ddiv+0x52e>
    b5bc:	001d      	movs	r5, r3
    b5be:	e6fa      	b.n	b3b6 <__aeabi_ddiv+0x342>
    b5c0:	469a      	mov	sl, r3
    b5c2:	e71c      	b.n	b3fe <__aeabi_ddiv+0x38a>
    b5c4:	42b0      	cmp	r0, r6
    b5c6:	d839      	bhi.n	b63c <__aeabi_ddiv+0x5c8>
    b5c8:	d06e      	beq.n	b6a8 <__aeabi_ddiv+0x634>
    b5ca:	0011      	movs	r1, r2
    b5cc:	e73a      	b.n	b444 <__aeabi_ddiv+0x3d0>
    b5ce:	9302      	str	r3, [sp, #8]
    b5d0:	e73a      	b.n	b448 <__aeabi_ddiv+0x3d4>
    b5d2:	2a1f      	cmp	r2, #31
    b5d4:	dc3c      	bgt.n	b650 <__aeabi_ddiv+0x5dc>
    b5d6:	2320      	movs	r3, #32
    b5d8:	1a9b      	subs	r3, r3, r2
    b5da:	000c      	movs	r4, r1
    b5dc:	4658      	mov	r0, fp
    b5de:	4099      	lsls	r1, r3
    b5e0:	4098      	lsls	r0, r3
    b5e2:	1e4b      	subs	r3, r1, #1
    b5e4:	4199      	sbcs	r1, r3
    b5e6:	465b      	mov	r3, fp
    b5e8:	40d4      	lsrs	r4, r2
    b5ea:	40d3      	lsrs	r3, r2
    b5ec:	4320      	orrs	r0, r4
    b5ee:	4308      	orrs	r0, r1
    b5f0:	001a      	movs	r2, r3
    b5f2:	0743      	lsls	r3, r0, #29
    b5f4:	d009      	beq.n	b60a <__aeabi_ddiv+0x596>
    b5f6:	230f      	movs	r3, #15
    b5f8:	4003      	ands	r3, r0
    b5fa:	2b04      	cmp	r3, #4
    b5fc:	d005      	beq.n	b60a <__aeabi_ddiv+0x596>
    b5fe:	0001      	movs	r1, r0
    b600:	1d08      	adds	r0, r1, #4
    b602:	4288      	cmp	r0, r1
    b604:	419b      	sbcs	r3, r3
    b606:	425b      	negs	r3, r3
    b608:	18d2      	adds	r2, r2, r3
    b60a:	0213      	lsls	r3, r2, #8
    b60c:	d53a      	bpl.n	b684 <__aeabi_ddiv+0x610>
    b60e:	2301      	movs	r3, #1
    b610:	9a02      	ldr	r2, [sp, #8]
    b612:	2401      	movs	r4, #1
    b614:	401a      	ands	r2, r3
    b616:	2300      	movs	r3, #0
    b618:	4694      	mov	ip, r2
    b61a:	4698      	mov	r8, r3
    b61c:	2200      	movs	r2, #0
    b61e:	e5f7      	b.n	b210 <__aeabi_ddiv+0x19c>
    b620:	2102      	movs	r1, #2
    b622:	4249      	negs	r1, r1
    b624:	468c      	mov	ip, r1
    b626:	9d03      	ldr	r5, [sp, #12]
    b628:	44e3      	add	fp, ip
    b62a:	46ac      	mov	ip, r5
    b62c:	44e2      	add	sl, ip
    b62e:	45aa      	cmp	sl, r5
    b630:	41ad      	sbcs	r5, r5
    b632:	426d      	negs	r5, r5
    b634:	4445      	add	r5, r8
    b636:	18ed      	adds	r5, r5, r3
    b638:	1a2d      	subs	r5, r5, r0
    b63a:	e696      	b.n	b36a <__aeabi_ddiv+0x2f6>
    b63c:	1e8a      	subs	r2, r1, #2
    b63e:	9903      	ldr	r1, [sp, #12]
    b640:	004d      	lsls	r5, r1, #1
    b642:	428d      	cmp	r5, r1
    b644:	4189      	sbcs	r1, r1
    b646:	4249      	negs	r1, r1
    b648:	4441      	add	r1, r8
    b64a:	1876      	adds	r6, r6, r1
    b64c:	9503      	str	r5, [sp, #12]
    b64e:	e78f      	b.n	b570 <__aeabi_ddiv+0x4fc>
    b650:	201f      	movs	r0, #31
    b652:	4240      	negs	r0, r0
    b654:	1ac3      	subs	r3, r0, r3
    b656:	4658      	mov	r0, fp
    b658:	40d8      	lsrs	r0, r3
    b65a:	0003      	movs	r3, r0
    b65c:	2a20      	cmp	r2, #32
    b65e:	d028      	beq.n	b6b2 <__aeabi_ddiv+0x63e>
    b660:	2040      	movs	r0, #64	; 0x40
    b662:	465d      	mov	r5, fp
    b664:	1a82      	subs	r2, r0, r2
    b666:	4095      	lsls	r5, r2
    b668:	4329      	orrs	r1, r5
    b66a:	1e4a      	subs	r2, r1, #1
    b66c:	4191      	sbcs	r1, r2
    b66e:	4319      	orrs	r1, r3
    b670:	2307      	movs	r3, #7
    b672:	2200      	movs	r2, #0
    b674:	400b      	ands	r3, r1
    b676:	d009      	beq.n	b68c <__aeabi_ddiv+0x618>
    b678:	230f      	movs	r3, #15
    b67a:	2200      	movs	r2, #0
    b67c:	400b      	ands	r3, r1
    b67e:	0008      	movs	r0, r1
    b680:	2b04      	cmp	r3, #4
    b682:	d1bd      	bne.n	b600 <__aeabi_ddiv+0x58c>
    b684:	0001      	movs	r1, r0
    b686:	0753      	lsls	r3, r2, #29
    b688:	0252      	lsls	r2, r2, #9
    b68a:	0b12      	lsrs	r2, r2, #12
    b68c:	08c9      	lsrs	r1, r1, #3
    b68e:	4319      	orrs	r1, r3
    b690:	2301      	movs	r3, #1
    b692:	4688      	mov	r8, r1
    b694:	9902      	ldr	r1, [sp, #8]
    b696:	2400      	movs	r4, #0
    b698:	4019      	ands	r1, r3
    b69a:	468c      	mov	ip, r1
    b69c:	e5b8      	b.n	b210 <__aeabi_ddiv+0x19c>
    b69e:	4552      	cmp	r2, sl
    b6a0:	d8be      	bhi.n	b620 <__aeabi_ddiv+0x5ac>
    b6a2:	468b      	mov	fp, r1
    b6a4:	2500      	movs	r5, #0
    b6a6:	e660      	b.n	b36a <__aeabi_ddiv+0x2f6>
    b6a8:	9d03      	ldr	r5, [sp, #12]
    b6aa:	429d      	cmp	r5, r3
    b6ac:	d3c6      	bcc.n	b63c <__aeabi_ddiv+0x5c8>
    b6ae:	0011      	movs	r1, r2
    b6b0:	e762      	b.n	b578 <__aeabi_ddiv+0x504>
    b6b2:	2500      	movs	r5, #0
    b6b4:	e7d8      	b.n	b668 <__aeabi_ddiv+0x5f4>
    b6b6:	2280      	movs	r2, #128	; 0x80
    b6b8:	465b      	mov	r3, fp
    b6ba:	0312      	lsls	r2, r2, #12
    b6bc:	431a      	orrs	r2, r3
    b6be:	9b01      	ldr	r3, [sp, #4]
    b6c0:	0312      	lsls	r2, r2, #12
    b6c2:	0b12      	lsrs	r2, r2, #12
    b6c4:	469c      	mov	ip, r3
    b6c6:	4688      	mov	r8, r1
    b6c8:	4c03      	ldr	r4, [pc, #12]	; (b6d8 <__aeabi_ddiv+0x664>)
    b6ca:	e5a1      	b.n	b210 <__aeabi_ddiv+0x19c>
    b6cc:	000003ff 	.word	0x000003ff
    b6d0:	feffffff 	.word	0xfeffffff
    b6d4:	000007fe 	.word	0x000007fe
    b6d8:	000007ff 	.word	0x000007ff

0000b6dc <__eqdf2>:
    b6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6de:	464f      	mov	r7, r9
    b6e0:	4646      	mov	r6, r8
    b6e2:	46d6      	mov	lr, sl
    b6e4:	005c      	lsls	r4, r3, #1
    b6e6:	b5c0      	push	{r6, r7, lr}
    b6e8:	031f      	lsls	r7, r3, #12
    b6ea:	0fdb      	lsrs	r3, r3, #31
    b6ec:	469a      	mov	sl, r3
    b6ee:	4b17      	ldr	r3, [pc, #92]	; (b74c <__eqdf2+0x70>)
    b6f0:	030e      	lsls	r6, r1, #12
    b6f2:	004d      	lsls	r5, r1, #1
    b6f4:	4684      	mov	ip, r0
    b6f6:	4680      	mov	r8, r0
    b6f8:	0b36      	lsrs	r6, r6, #12
    b6fa:	0d6d      	lsrs	r5, r5, #21
    b6fc:	0fc9      	lsrs	r1, r1, #31
    b6fe:	4691      	mov	r9, r2
    b700:	0b3f      	lsrs	r7, r7, #12
    b702:	0d64      	lsrs	r4, r4, #21
    b704:	2001      	movs	r0, #1
    b706:	429d      	cmp	r5, r3
    b708:	d008      	beq.n	b71c <__eqdf2+0x40>
    b70a:	429c      	cmp	r4, r3
    b70c:	d001      	beq.n	b712 <__eqdf2+0x36>
    b70e:	42a5      	cmp	r5, r4
    b710:	d00b      	beq.n	b72a <__eqdf2+0x4e>
    b712:	bc1c      	pop	{r2, r3, r4}
    b714:	4690      	mov	r8, r2
    b716:	4699      	mov	r9, r3
    b718:	46a2      	mov	sl, r4
    b71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b71c:	4663      	mov	r3, ip
    b71e:	4333      	orrs	r3, r6
    b720:	d1f7      	bne.n	b712 <__eqdf2+0x36>
    b722:	42ac      	cmp	r4, r5
    b724:	d1f5      	bne.n	b712 <__eqdf2+0x36>
    b726:	433a      	orrs	r2, r7
    b728:	d1f3      	bne.n	b712 <__eqdf2+0x36>
    b72a:	2001      	movs	r0, #1
    b72c:	42be      	cmp	r6, r7
    b72e:	d1f0      	bne.n	b712 <__eqdf2+0x36>
    b730:	45c8      	cmp	r8, r9
    b732:	d1ee      	bne.n	b712 <__eqdf2+0x36>
    b734:	4551      	cmp	r1, sl
    b736:	d007      	beq.n	b748 <__eqdf2+0x6c>
    b738:	2d00      	cmp	r5, #0
    b73a:	d1ea      	bne.n	b712 <__eqdf2+0x36>
    b73c:	4663      	mov	r3, ip
    b73e:	431e      	orrs	r6, r3
    b740:	0030      	movs	r0, r6
    b742:	1e46      	subs	r6, r0, #1
    b744:	41b0      	sbcs	r0, r6
    b746:	e7e4      	b.n	b712 <__eqdf2+0x36>
    b748:	2000      	movs	r0, #0
    b74a:	e7e2      	b.n	b712 <__eqdf2+0x36>
    b74c:	000007ff 	.word	0x000007ff

0000b750 <__gedf2>:
    b750:	b5f0      	push	{r4, r5, r6, r7, lr}
    b752:	4645      	mov	r5, r8
    b754:	46de      	mov	lr, fp
    b756:	4657      	mov	r7, sl
    b758:	464e      	mov	r6, r9
    b75a:	b5e0      	push	{r5, r6, r7, lr}
    b75c:	031f      	lsls	r7, r3, #12
    b75e:	0b3d      	lsrs	r5, r7, #12
    b760:	4f2c      	ldr	r7, [pc, #176]	; (b814 <__gedf2+0xc4>)
    b762:	030e      	lsls	r6, r1, #12
    b764:	004c      	lsls	r4, r1, #1
    b766:	46ab      	mov	fp, r5
    b768:	005d      	lsls	r5, r3, #1
    b76a:	4684      	mov	ip, r0
    b76c:	0b36      	lsrs	r6, r6, #12
    b76e:	0d64      	lsrs	r4, r4, #21
    b770:	0fc9      	lsrs	r1, r1, #31
    b772:	4690      	mov	r8, r2
    b774:	0d6d      	lsrs	r5, r5, #21
    b776:	0fdb      	lsrs	r3, r3, #31
    b778:	42bc      	cmp	r4, r7
    b77a:	d02a      	beq.n	b7d2 <__gedf2+0x82>
    b77c:	4f25      	ldr	r7, [pc, #148]	; (b814 <__gedf2+0xc4>)
    b77e:	42bd      	cmp	r5, r7
    b780:	d02d      	beq.n	b7de <__gedf2+0x8e>
    b782:	2c00      	cmp	r4, #0
    b784:	d10f      	bne.n	b7a6 <__gedf2+0x56>
    b786:	4330      	orrs	r0, r6
    b788:	0007      	movs	r7, r0
    b78a:	4681      	mov	r9, r0
    b78c:	4278      	negs	r0, r7
    b78e:	4178      	adcs	r0, r7
    b790:	b2c0      	uxtb	r0, r0
    b792:	2d00      	cmp	r5, #0
    b794:	d117      	bne.n	b7c6 <__gedf2+0x76>
    b796:	465f      	mov	r7, fp
    b798:	433a      	orrs	r2, r7
    b79a:	d114      	bne.n	b7c6 <__gedf2+0x76>
    b79c:	464b      	mov	r3, r9
    b79e:	2000      	movs	r0, #0
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d00a      	beq.n	b7ba <__gedf2+0x6a>
    b7a4:	e006      	b.n	b7b4 <__gedf2+0x64>
    b7a6:	2d00      	cmp	r5, #0
    b7a8:	d102      	bne.n	b7b0 <__gedf2+0x60>
    b7aa:	4658      	mov	r0, fp
    b7ac:	4302      	orrs	r2, r0
    b7ae:	d001      	beq.n	b7b4 <__gedf2+0x64>
    b7b0:	4299      	cmp	r1, r3
    b7b2:	d018      	beq.n	b7e6 <__gedf2+0x96>
    b7b4:	4248      	negs	r0, r1
    b7b6:	2101      	movs	r1, #1
    b7b8:	4308      	orrs	r0, r1
    b7ba:	bc3c      	pop	{r2, r3, r4, r5}
    b7bc:	4690      	mov	r8, r2
    b7be:	4699      	mov	r9, r3
    b7c0:	46a2      	mov	sl, r4
    b7c2:	46ab      	mov	fp, r5
    b7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7c6:	2800      	cmp	r0, #0
    b7c8:	d0f2      	beq.n	b7b0 <__gedf2+0x60>
    b7ca:	2001      	movs	r0, #1
    b7cc:	3b01      	subs	r3, #1
    b7ce:	4318      	orrs	r0, r3
    b7d0:	e7f3      	b.n	b7ba <__gedf2+0x6a>
    b7d2:	0037      	movs	r7, r6
    b7d4:	4307      	orrs	r7, r0
    b7d6:	d0d1      	beq.n	b77c <__gedf2+0x2c>
    b7d8:	2002      	movs	r0, #2
    b7da:	4240      	negs	r0, r0
    b7dc:	e7ed      	b.n	b7ba <__gedf2+0x6a>
    b7de:	465f      	mov	r7, fp
    b7e0:	4317      	orrs	r7, r2
    b7e2:	d0ce      	beq.n	b782 <__gedf2+0x32>
    b7e4:	e7f8      	b.n	b7d8 <__gedf2+0x88>
    b7e6:	42ac      	cmp	r4, r5
    b7e8:	dce4      	bgt.n	b7b4 <__gedf2+0x64>
    b7ea:	da03      	bge.n	b7f4 <__gedf2+0xa4>
    b7ec:	1e48      	subs	r0, r1, #1
    b7ee:	2101      	movs	r1, #1
    b7f0:	4308      	orrs	r0, r1
    b7f2:	e7e2      	b.n	b7ba <__gedf2+0x6a>
    b7f4:	455e      	cmp	r6, fp
    b7f6:	d8dd      	bhi.n	b7b4 <__gedf2+0x64>
    b7f8:	d006      	beq.n	b808 <__gedf2+0xb8>
    b7fa:	2000      	movs	r0, #0
    b7fc:	455e      	cmp	r6, fp
    b7fe:	d2dc      	bcs.n	b7ba <__gedf2+0x6a>
    b800:	2301      	movs	r3, #1
    b802:	1e48      	subs	r0, r1, #1
    b804:	4318      	orrs	r0, r3
    b806:	e7d8      	b.n	b7ba <__gedf2+0x6a>
    b808:	45c4      	cmp	ip, r8
    b80a:	d8d3      	bhi.n	b7b4 <__gedf2+0x64>
    b80c:	2000      	movs	r0, #0
    b80e:	45c4      	cmp	ip, r8
    b810:	d3f6      	bcc.n	b800 <__gedf2+0xb0>
    b812:	e7d2      	b.n	b7ba <__gedf2+0x6a>
    b814:	000007ff 	.word	0x000007ff

0000b818 <__ledf2>:
    b818:	b5f0      	push	{r4, r5, r6, r7, lr}
    b81a:	464e      	mov	r6, r9
    b81c:	4645      	mov	r5, r8
    b81e:	46de      	mov	lr, fp
    b820:	4657      	mov	r7, sl
    b822:	005c      	lsls	r4, r3, #1
    b824:	b5e0      	push	{r5, r6, r7, lr}
    b826:	031f      	lsls	r7, r3, #12
    b828:	0fdb      	lsrs	r3, r3, #31
    b82a:	4699      	mov	r9, r3
    b82c:	4b2a      	ldr	r3, [pc, #168]	; (b8d8 <__ledf2+0xc0>)
    b82e:	030e      	lsls	r6, r1, #12
    b830:	004d      	lsls	r5, r1, #1
    b832:	0fc9      	lsrs	r1, r1, #31
    b834:	4684      	mov	ip, r0
    b836:	0b36      	lsrs	r6, r6, #12
    b838:	0d6d      	lsrs	r5, r5, #21
    b83a:	468b      	mov	fp, r1
    b83c:	4690      	mov	r8, r2
    b83e:	0b3f      	lsrs	r7, r7, #12
    b840:	0d64      	lsrs	r4, r4, #21
    b842:	429d      	cmp	r5, r3
    b844:	d020      	beq.n	b888 <__ledf2+0x70>
    b846:	4b24      	ldr	r3, [pc, #144]	; (b8d8 <__ledf2+0xc0>)
    b848:	429c      	cmp	r4, r3
    b84a:	d022      	beq.n	b892 <__ledf2+0x7a>
    b84c:	2d00      	cmp	r5, #0
    b84e:	d112      	bne.n	b876 <__ledf2+0x5e>
    b850:	4330      	orrs	r0, r6
    b852:	4243      	negs	r3, r0
    b854:	4143      	adcs	r3, r0
    b856:	b2db      	uxtb	r3, r3
    b858:	2c00      	cmp	r4, #0
    b85a:	d01f      	beq.n	b89c <__ledf2+0x84>
    b85c:	2b00      	cmp	r3, #0
    b85e:	d00c      	beq.n	b87a <__ledf2+0x62>
    b860:	464b      	mov	r3, r9
    b862:	2001      	movs	r0, #1
    b864:	3b01      	subs	r3, #1
    b866:	4303      	orrs	r3, r0
    b868:	0018      	movs	r0, r3
    b86a:	bc3c      	pop	{r2, r3, r4, r5}
    b86c:	4690      	mov	r8, r2
    b86e:	4699      	mov	r9, r3
    b870:	46a2      	mov	sl, r4
    b872:	46ab      	mov	fp, r5
    b874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b876:	2c00      	cmp	r4, #0
    b878:	d016      	beq.n	b8a8 <__ledf2+0x90>
    b87a:	45cb      	cmp	fp, r9
    b87c:	d017      	beq.n	b8ae <__ledf2+0x96>
    b87e:	465b      	mov	r3, fp
    b880:	4259      	negs	r1, r3
    b882:	2301      	movs	r3, #1
    b884:	430b      	orrs	r3, r1
    b886:	e7ef      	b.n	b868 <__ledf2+0x50>
    b888:	0031      	movs	r1, r6
    b88a:	2302      	movs	r3, #2
    b88c:	4301      	orrs	r1, r0
    b88e:	d1eb      	bne.n	b868 <__ledf2+0x50>
    b890:	e7d9      	b.n	b846 <__ledf2+0x2e>
    b892:	0039      	movs	r1, r7
    b894:	2302      	movs	r3, #2
    b896:	4311      	orrs	r1, r2
    b898:	d1e6      	bne.n	b868 <__ledf2+0x50>
    b89a:	e7d7      	b.n	b84c <__ledf2+0x34>
    b89c:	433a      	orrs	r2, r7
    b89e:	d1dd      	bne.n	b85c <__ledf2+0x44>
    b8a0:	2300      	movs	r3, #0
    b8a2:	2800      	cmp	r0, #0
    b8a4:	d0e0      	beq.n	b868 <__ledf2+0x50>
    b8a6:	e7ea      	b.n	b87e <__ledf2+0x66>
    b8a8:	433a      	orrs	r2, r7
    b8aa:	d1e6      	bne.n	b87a <__ledf2+0x62>
    b8ac:	e7e7      	b.n	b87e <__ledf2+0x66>
    b8ae:	42a5      	cmp	r5, r4
    b8b0:	dce5      	bgt.n	b87e <__ledf2+0x66>
    b8b2:	db05      	blt.n	b8c0 <__ledf2+0xa8>
    b8b4:	42be      	cmp	r6, r7
    b8b6:	d8e2      	bhi.n	b87e <__ledf2+0x66>
    b8b8:	d007      	beq.n	b8ca <__ledf2+0xb2>
    b8ba:	2300      	movs	r3, #0
    b8bc:	42be      	cmp	r6, r7
    b8be:	d2d3      	bcs.n	b868 <__ledf2+0x50>
    b8c0:	4659      	mov	r1, fp
    b8c2:	2301      	movs	r3, #1
    b8c4:	3901      	subs	r1, #1
    b8c6:	430b      	orrs	r3, r1
    b8c8:	e7ce      	b.n	b868 <__ledf2+0x50>
    b8ca:	45c4      	cmp	ip, r8
    b8cc:	d8d7      	bhi.n	b87e <__ledf2+0x66>
    b8ce:	2300      	movs	r3, #0
    b8d0:	45c4      	cmp	ip, r8
    b8d2:	d3f5      	bcc.n	b8c0 <__ledf2+0xa8>
    b8d4:	e7c8      	b.n	b868 <__ledf2+0x50>
    b8d6:	46c0      	nop			; (mov r8, r8)
    b8d8:	000007ff 	.word	0x000007ff

0000b8dc <__aeabi_dmul>:
    b8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8de:	4657      	mov	r7, sl
    b8e0:	4645      	mov	r5, r8
    b8e2:	46de      	mov	lr, fp
    b8e4:	464e      	mov	r6, r9
    b8e6:	b5e0      	push	{r5, r6, r7, lr}
    b8e8:	030c      	lsls	r4, r1, #12
    b8ea:	4698      	mov	r8, r3
    b8ec:	004e      	lsls	r6, r1, #1
    b8ee:	0b23      	lsrs	r3, r4, #12
    b8f0:	b087      	sub	sp, #28
    b8f2:	0007      	movs	r7, r0
    b8f4:	4692      	mov	sl, r2
    b8f6:	469b      	mov	fp, r3
    b8f8:	0d76      	lsrs	r6, r6, #21
    b8fa:	0fcd      	lsrs	r5, r1, #31
    b8fc:	2e00      	cmp	r6, #0
    b8fe:	d06b      	beq.n	b9d8 <__aeabi_dmul+0xfc>
    b900:	4b6d      	ldr	r3, [pc, #436]	; (bab8 <__aeabi_dmul+0x1dc>)
    b902:	429e      	cmp	r6, r3
    b904:	d035      	beq.n	b972 <__aeabi_dmul+0x96>
    b906:	2480      	movs	r4, #128	; 0x80
    b908:	465b      	mov	r3, fp
    b90a:	0f42      	lsrs	r2, r0, #29
    b90c:	0424      	lsls	r4, r4, #16
    b90e:	00db      	lsls	r3, r3, #3
    b910:	4314      	orrs	r4, r2
    b912:	431c      	orrs	r4, r3
    b914:	00c3      	lsls	r3, r0, #3
    b916:	4699      	mov	r9, r3
    b918:	4b68      	ldr	r3, [pc, #416]	; (babc <__aeabi_dmul+0x1e0>)
    b91a:	46a3      	mov	fp, r4
    b91c:	469c      	mov	ip, r3
    b91e:	2300      	movs	r3, #0
    b920:	2700      	movs	r7, #0
    b922:	4466      	add	r6, ip
    b924:	9302      	str	r3, [sp, #8]
    b926:	4643      	mov	r3, r8
    b928:	031c      	lsls	r4, r3, #12
    b92a:	005a      	lsls	r2, r3, #1
    b92c:	0fdb      	lsrs	r3, r3, #31
    b92e:	4650      	mov	r0, sl
    b930:	0b24      	lsrs	r4, r4, #12
    b932:	0d52      	lsrs	r2, r2, #21
    b934:	4698      	mov	r8, r3
    b936:	d100      	bne.n	b93a <__aeabi_dmul+0x5e>
    b938:	e076      	b.n	ba28 <__aeabi_dmul+0x14c>
    b93a:	4b5f      	ldr	r3, [pc, #380]	; (bab8 <__aeabi_dmul+0x1dc>)
    b93c:	429a      	cmp	r2, r3
    b93e:	d06d      	beq.n	ba1c <__aeabi_dmul+0x140>
    b940:	2380      	movs	r3, #128	; 0x80
    b942:	0f41      	lsrs	r1, r0, #29
    b944:	041b      	lsls	r3, r3, #16
    b946:	430b      	orrs	r3, r1
    b948:	495c      	ldr	r1, [pc, #368]	; (babc <__aeabi_dmul+0x1e0>)
    b94a:	00e4      	lsls	r4, r4, #3
    b94c:	468c      	mov	ip, r1
    b94e:	431c      	orrs	r4, r3
    b950:	00c3      	lsls	r3, r0, #3
    b952:	2000      	movs	r0, #0
    b954:	4462      	add	r2, ip
    b956:	4641      	mov	r1, r8
    b958:	18b6      	adds	r6, r6, r2
    b95a:	4069      	eors	r1, r5
    b95c:	1c72      	adds	r2, r6, #1
    b95e:	9101      	str	r1, [sp, #4]
    b960:	4694      	mov	ip, r2
    b962:	4307      	orrs	r7, r0
    b964:	2f0f      	cmp	r7, #15
    b966:	d900      	bls.n	b96a <__aeabi_dmul+0x8e>
    b968:	e0b0      	b.n	bacc <__aeabi_dmul+0x1f0>
    b96a:	4a55      	ldr	r2, [pc, #340]	; (bac0 <__aeabi_dmul+0x1e4>)
    b96c:	00bf      	lsls	r7, r7, #2
    b96e:	59d2      	ldr	r2, [r2, r7]
    b970:	4697      	mov	pc, r2
    b972:	465b      	mov	r3, fp
    b974:	4303      	orrs	r3, r0
    b976:	4699      	mov	r9, r3
    b978:	d000      	beq.n	b97c <__aeabi_dmul+0xa0>
    b97a:	e087      	b.n	ba8c <__aeabi_dmul+0x1b0>
    b97c:	2300      	movs	r3, #0
    b97e:	469b      	mov	fp, r3
    b980:	3302      	adds	r3, #2
    b982:	2708      	movs	r7, #8
    b984:	9302      	str	r3, [sp, #8]
    b986:	e7ce      	b.n	b926 <__aeabi_dmul+0x4a>
    b988:	4642      	mov	r2, r8
    b98a:	9201      	str	r2, [sp, #4]
    b98c:	2802      	cmp	r0, #2
    b98e:	d067      	beq.n	ba60 <__aeabi_dmul+0x184>
    b990:	2803      	cmp	r0, #3
    b992:	d100      	bne.n	b996 <__aeabi_dmul+0xba>
    b994:	e20e      	b.n	bdb4 <__aeabi_dmul+0x4d8>
    b996:	2801      	cmp	r0, #1
    b998:	d000      	beq.n	b99c <__aeabi_dmul+0xc0>
    b99a:	e162      	b.n	bc62 <__aeabi_dmul+0x386>
    b99c:	2300      	movs	r3, #0
    b99e:	2400      	movs	r4, #0
    b9a0:	2200      	movs	r2, #0
    b9a2:	4699      	mov	r9, r3
    b9a4:	9901      	ldr	r1, [sp, #4]
    b9a6:	4001      	ands	r1, r0
    b9a8:	b2cd      	uxtb	r5, r1
    b9aa:	2100      	movs	r1, #0
    b9ac:	0312      	lsls	r2, r2, #12
    b9ae:	0d0b      	lsrs	r3, r1, #20
    b9b0:	0b12      	lsrs	r2, r2, #12
    b9b2:	051b      	lsls	r3, r3, #20
    b9b4:	4313      	orrs	r3, r2
    b9b6:	4a43      	ldr	r2, [pc, #268]	; (bac4 <__aeabi_dmul+0x1e8>)
    b9b8:	0524      	lsls	r4, r4, #20
    b9ba:	4013      	ands	r3, r2
    b9bc:	431c      	orrs	r4, r3
    b9be:	0064      	lsls	r4, r4, #1
    b9c0:	07ed      	lsls	r5, r5, #31
    b9c2:	0864      	lsrs	r4, r4, #1
    b9c4:	432c      	orrs	r4, r5
    b9c6:	4648      	mov	r0, r9
    b9c8:	0021      	movs	r1, r4
    b9ca:	b007      	add	sp, #28
    b9cc:	bc3c      	pop	{r2, r3, r4, r5}
    b9ce:	4690      	mov	r8, r2
    b9d0:	4699      	mov	r9, r3
    b9d2:	46a2      	mov	sl, r4
    b9d4:	46ab      	mov	fp, r5
    b9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9d8:	4303      	orrs	r3, r0
    b9da:	4699      	mov	r9, r3
    b9dc:	d04f      	beq.n	ba7e <__aeabi_dmul+0x1a2>
    b9de:	465b      	mov	r3, fp
    b9e0:	2b00      	cmp	r3, #0
    b9e2:	d100      	bne.n	b9e6 <__aeabi_dmul+0x10a>
    b9e4:	e189      	b.n	bcfa <__aeabi_dmul+0x41e>
    b9e6:	4658      	mov	r0, fp
    b9e8:	f000 feb8 	bl	c75c <__clzsi2>
    b9ec:	0003      	movs	r3, r0
    b9ee:	3b0b      	subs	r3, #11
    b9f0:	2b1c      	cmp	r3, #28
    b9f2:	dd00      	ble.n	b9f6 <__aeabi_dmul+0x11a>
    b9f4:	e17a      	b.n	bcec <__aeabi_dmul+0x410>
    b9f6:	221d      	movs	r2, #29
    b9f8:	1ad3      	subs	r3, r2, r3
    b9fa:	003a      	movs	r2, r7
    b9fc:	0001      	movs	r1, r0
    b9fe:	465c      	mov	r4, fp
    ba00:	40da      	lsrs	r2, r3
    ba02:	3908      	subs	r1, #8
    ba04:	408c      	lsls	r4, r1
    ba06:	0013      	movs	r3, r2
    ba08:	408f      	lsls	r7, r1
    ba0a:	4323      	orrs	r3, r4
    ba0c:	469b      	mov	fp, r3
    ba0e:	46b9      	mov	r9, r7
    ba10:	2300      	movs	r3, #0
    ba12:	4e2d      	ldr	r6, [pc, #180]	; (bac8 <__aeabi_dmul+0x1ec>)
    ba14:	2700      	movs	r7, #0
    ba16:	1a36      	subs	r6, r6, r0
    ba18:	9302      	str	r3, [sp, #8]
    ba1a:	e784      	b.n	b926 <__aeabi_dmul+0x4a>
    ba1c:	4653      	mov	r3, sl
    ba1e:	4323      	orrs	r3, r4
    ba20:	d12a      	bne.n	ba78 <__aeabi_dmul+0x19c>
    ba22:	2400      	movs	r4, #0
    ba24:	2002      	movs	r0, #2
    ba26:	e796      	b.n	b956 <__aeabi_dmul+0x7a>
    ba28:	4653      	mov	r3, sl
    ba2a:	4323      	orrs	r3, r4
    ba2c:	d020      	beq.n	ba70 <__aeabi_dmul+0x194>
    ba2e:	2c00      	cmp	r4, #0
    ba30:	d100      	bne.n	ba34 <__aeabi_dmul+0x158>
    ba32:	e157      	b.n	bce4 <__aeabi_dmul+0x408>
    ba34:	0020      	movs	r0, r4
    ba36:	f000 fe91 	bl	c75c <__clzsi2>
    ba3a:	0003      	movs	r3, r0
    ba3c:	3b0b      	subs	r3, #11
    ba3e:	2b1c      	cmp	r3, #28
    ba40:	dd00      	ble.n	ba44 <__aeabi_dmul+0x168>
    ba42:	e149      	b.n	bcd8 <__aeabi_dmul+0x3fc>
    ba44:	211d      	movs	r1, #29
    ba46:	1acb      	subs	r3, r1, r3
    ba48:	4651      	mov	r1, sl
    ba4a:	0002      	movs	r2, r0
    ba4c:	40d9      	lsrs	r1, r3
    ba4e:	4653      	mov	r3, sl
    ba50:	3a08      	subs	r2, #8
    ba52:	4094      	lsls	r4, r2
    ba54:	4093      	lsls	r3, r2
    ba56:	430c      	orrs	r4, r1
    ba58:	4a1b      	ldr	r2, [pc, #108]	; (bac8 <__aeabi_dmul+0x1ec>)
    ba5a:	1a12      	subs	r2, r2, r0
    ba5c:	2000      	movs	r0, #0
    ba5e:	e77a      	b.n	b956 <__aeabi_dmul+0x7a>
    ba60:	2501      	movs	r5, #1
    ba62:	9b01      	ldr	r3, [sp, #4]
    ba64:	4c14      	ldr	r4, [pc, #80]	; (bab8 <__aeabi_dmul+0x1dc>)
    ba66:	401d      	ands	r5, r3
    ba68:	2300      	movs	r3, #0
    ba6a:	2200      	movs	r2, #0
    ba6c:	4699      	mov	r9, r3
    ba6e:	e79c      	b.n	b9aa <__aeabi_dmul+0xce>
    ba70:	2400      	movs	r4, #0
    ba72:	2200      	movs	r2, #0
    ba74:	2001      	movs	r0, #1
    ba76:	e76e      	b.n	b956 <__aeabi_dmul+0x7a>
    ba78:	4653      	mov	r3, sl
    ba7a:	2003      	movs	r0, #3
    ba7c:	e76b      	b.n	b956 <__aeabi_dmul+0x7a>
    ba7e:	2300      	movs	r3, #0
    ba80:	469b      	mov	fp, r3
    ba82:	3301      	adds	r3, #1
    ba84:	2704      	movs	r7, #4
    ba86:	2600      	movs	r6, #0
    ba88:	9302      	str	r3, [sp, #8]
    ba8a:	e74c      	b.n	b926 <__aeabi_dmul+0x4a>
    ba8c:	2303      	movs	r3, #3
    ba8e:	4681      	mov	r9, r0
    ba90:	270c      	movs	r7, #12
    ba92:	9302      	str	r3, [sp, #8]
    ba94:	e747      	b.n	b926 <__aeabi_dmul+0x4a>
    ba96:	2280      	movs	r2, #128	; 0x80
    ba98:	2300      	movs	r3, #0
    ba9a:	2500      	movs	r5, #0
    ba9c:	0312      	lsls	r2, r2, #12
    ba9e:	4699      	mov	r9, r3
    baa0:	4c05      	ldr	r4, [pc, #20]	; (bab8 <__aeabi_dmul+0x1dc>)
    baa2:	e782      	b.n	b9aa <__aeabi_dmul+0xce>
    baa4:	465c      	mov	r4, fp
    baa6:	464b      	mov	r3, r9
    baa8:	9802      	ldr	r0, [sp, #8]
    baaa:	e76f      	b.n	b98c <__aeabi_dmul+0xb0>
    baac:	465c      	mov	r4, fp
    baae:	464b      	mov	r3, r9
    bab0:	9501      	str	r5, [sp, #4]
    bab2:	9802      	ldr	r0, [sp, #8]
    bab4:	e76a      	b.n	b98c <__aeabi_dmul+0xb0>
    bab6:	46c0      	nop			; (mov r8, r8)
    bab8:	000007ff 	.word	0x000007ff
    babc:	fffffc01 	.word	0xfffffc01
    bac0:	000128a0 	.word	0x000128a0
    bac4:	800fffff 	.word	0x800fffff
    bac8:	fffffc0d 	.word	0xfffffc0d
    bacc:	464a      	mov	r2, r9
    bace:	4649      	mov	r1, r9
    bad0:	0c17      	lsrs	r7, r2, #16
    bad2:	0c1a      	lsrs	r2, r3, #16
    bad4:	041b      	lsls	r3, r3, #16
    bad6:	0c1b      	lsrs	r3, r3, #16
    bad8:	0408      	lsls	r0, r1, #16
    bada:	0019      	movs	r1, r3
    badc:	0c00      	lsrs	r0, r0, #16
    bade:	4341      	muls	r1, r0
    bae0:	0015      	movs	r5, r2
    bae2:	4688      	mov	r8, r1
    bae4:	0019      	movs	r1, r3
    bae6:	437d      	muls	r5, r7
    bae8:	4379      	muls	r1, r7
    baea:	9503      	str	r5, [sp, #12]
    baec:	4689      	mov	r9, r1
    baee:	0029      	movs	r1, r5
    baf0:	0015      	movs	r5, r2
    baf2:	4345      	muls	r5, r0
    baf4:	444d      	add	r5, r9
    baf6:	9502      	str	r5, [sp, #8]
    baf8:	4645      	mov	r5, r8
    bafa:	0c2d      	lsrs	r5, r5, #16
    bafc:	46aa      	mov	sl, r5
    bafe:	9d02      	ldr	r5, [sp, #8]
    bb00:	4455      	add	r5, sl
    bb02:	45a9      	cmp	r9, r5
    bb04:	d906      	bls.n	bb14 <__aeabi_dmul+0x238>
    bb06:	468a      	mov	sl, r1
    bb08:	2180      	movs	r1, #128	; 0x80
    bb0a:	0249      	lsls	r1, r1, #9
    bb0c:	4689      	mov	r9, r1
    bb0e:	44ca      	add	sl, r9
    bb10:	4651      	mov	r1, sl
    bb12:	9103      	str	r1, [sp, #12]
    bb14:	0c29      	lsrs	r1, r5, #16
    bb16:	9104      	str	r1, [sp, #16]
    bb18:	4641      	mov	r1, r8
    bb1a:	0409      	lsls	r1, r1, #16
    bb1c:	042d      	lsls	r5, r5, #16
    bb1e:	0c09      	lsrs	r1, r1, #16
    bb20:	4688      	mov	r8, r1
    bb22:	0029      	movs	r1, r5
    bb24:	0c25      	lsrs	r5, r4, #16
    bb26:	0424      	lsls	r4, r4, #16
    bb28:	4441      	add	r1, r8
    bb2a:	0c24      	lsrs	r4, r4, #16
    bb2c:	9105      	str	r1, [sp, #20]
    bb2e:	0021      	movs	r1, r4
    bb30:	4341      	muls	r1, r0
    bb32:	4688      	mov	r8, r1
    bb34:	0021      	movs	r1, r4
    bb36:	4379      	muls	r1, r7
    bb38:	468a      	mov	sl, r1
    bb3a:	4368      	muls	r0, r5
    bb3c:	4641      	mov	r1, r8
    bb3e:	4450      	add	r0, sl
    bb40:	4681      	mov	r9, r0
    bb42:	0c08      	lsrs	r0, r1, #16
    bb44:	4448      	add	r0, r9
    bb46:	436f      	muls	r7, r5
    bb48:	4582      	cmp	sl, r0
    bb4a:	d903      	bls.n	bb54 <__aeabi_dmul+0x278>
    bb4c:	2180      	movs	r1, #128	; 0x80
    bb4e:	0249      	lsls	r1, r1, #9
    bb50:	4689      	mov	r9, r1
    bb52:	444f      	add	r7, r9
    bb54:	0c01      	lsrs	r1, r0, #16
    bb56:	4689      	mov	r9, r1
    bb58:	0039      	movs	r1, r7
    bb5a:	4449      	add	r1, r9
    bb5c:	9102      	str	r1, [sp, #8]
    bb5e:	4641      	mov	r1, r8
    bb60:	040f      	lsls	r7, r1, #16
    bb62:	9904      	ldr	r1, [sp, #16]
    bb64:	0c3f      	lsrs	r7, r7, #16
    bb66:	4688      	mov	r8, r1
    bb68:	0400      	lsls	r0, r0, #16
    bb6a:	19c0      	adds	r0, r0, r7
    bb6c:	4480      	add	r8, r0
    bb6e:	4641      	mov	r1, r8
    bb70:	9104      	str	r1, [sp, #16]
    bb72:	4659      	mov	r1, fp
    bb74:	0c0f      	lsrs	r7, r1, #16
    bb76:	0409      	lsls	r1, r1, #16
    bb78:	0c09      	lsrs	r1, r1, #16
    bb7a:	4688      	mov	r8, r1
    bb7c:	4359      	muls	r1, r3
    bb7e:	468a      	mov	sl, r1
    bb80:	0039      	movs	r1, r7
    bb82:	4351      	muls	r1, r2
    bb84:	4689      	mov	r9, r1
    bb86:	4641      	mov	r1, r8
    bb88:	434a      	muls	r2, r1
    bb8a:	4651      	mov	r1, sl
    bb8c:	0c09      	lsrs	r1, r1, #16
    bb8e:	468b      	mov	fp, r1
    bb90:	437b      	muls	r3, r7
    bb92:	18d2      	adds	r2, r2, r3
    bb94:	445a      	add	r2, fp
    bb96:	4293      	cmp	r3, r2
    bb98:	d903      	bls.n	bba2 <__aeabi_dmul+0x2c6>
    bb9a:	2380      	movs	r3, #128	; 0x80
    bb9c:	025b      	lsls	r3, r3, #9
    bb9e:	469b      	mov	fp, r3
    bba0:	44d9      	add	r9, fp
    bba2:	4651      	mov	r1, sl
    bba4:	0409      	lsls	r1, r1, #16
    bba6:	0c09      	lsrs	r1, r1, #16
    bba8:	468a      	mov	sl, r1
    bbaa:	4641      	mov	r1, r8
    bbac:	4361      	muls	r1, r4
    bbae:	437c      	muls	r4, r7
    bbb0:	0c13      	lsrs	r3, r2, #16
    bbb2:	0412      	lsls	r2, r2, #16
    bbb4:	444b      	add	r3, r9
    bbb6:	4452      	add	r2, sl
    bbb8:	46a1      	mov	r9, r4
    bbba:	468a      	mov	sl, r1
    bbbc:	003c      	movs	r4, r7
    bbbe:	4641      	mov	r1, r8
    bbc0:	436c      	muls	r4, r5
    bbc2:	434d      	muls	r5, r1
    bbc4:	4651      	mov	r1, sl
    bbc6:	444d      	add	r5, r9
    bbc8:	0c0f      	lsrs	r7, r1, #16
    bbca:	197d      	adds	r5, r7, r5
    bbcc:	45a9      	cmp	r9, r5
    bbce:	d903      	bls.n	bbd8 <__aeabi_dmul+0x2fc>
    bbd0:	2180      	movs	r1, #128	; 0x80
    bbd2:	0249      	lsls	r1, r1, #9
    bbd4:	4688      	mov	r8, r1
    bbd6:	4444      	add	r4, r8
    bbd8:	9f04      	ldr	r7, [sp, #16]
    bbda:	9903      	ldr	r1, [sp, #12]
    bbdc:	46b8      	mov	r8, r7
    bbde:	4441      	add	r1, r8
    bbe0:	468b      	mov	fp, r1
    bbe2:	4583      	cmp	fp, r0
    bbe4:	4180      	sbcs	r0, r0
    bbe6:	4241      	negs	r1, r0
    bbe8:	4688      	mov	r8, r1
    bbea:	4651      	mov	r1, sl
    bbec:	0408      	lsls	r0, r1, #16
    bbee:	042f      	lsls	r7, r5, #16
    bbf0:	0c00      	lsrs	r0, r0, #16
    bbf2:	183f      	adds	r7, r7, r0
    bbf4:	4658      	mov	r0, fp
    bbf6:	9902      	ldr	r1, [sp, #8]
    bbf8:	1810      	adds	r0, r2, r0
    bbfa:	4689      	mov	r9, r1
    bbfc:	4290      	cmp	r0, r2
    bbfe:	4192      	sbcs	r2, r2
    bc00:	444f      	add	r7, r9
    bc02:	46ba      	mov	sl, r7
    bc04:	4252      	negs	r2, r2
    bc06:	4699      	mov	r9, r3
    bc08:	4693      	mov	fp, r2
    bc0a:	44c2      	add	sl, r8
    bc0c:	44d1      	add	r9, sl
    bc0e:	44cb      	add	fp, r9
    bc10:	428f      	cmp	r7, r1
    bc12:	41bf      	sbcs	r7, r7
    bc14:	45c2      	cmp	sl, r8
    bc16:	4189      	sbcs	r1, r1
    bc18:	4599      	cmp	r9, r3
    bc1a:	419b      	sbcs	r3, r3
    bc1c:	4593      	cmp	fp, r2
    bc1e:	4192      	sbcs	r2, r2
    bc20:	427f      	negs	r7, r7
    bc22:	4249      	negs	r1, r1
    bc24:	0c2d      	lsrs	r5, r5, #16
    bc26:	4252      	negs	r2, r2
    bc28:	430f      	orrs	r7, r1
    bc2a:	425b      	negs	r3, r3
    bc2c:	4313      	orrs	r3, r2
    bc2e:	197f      	adds	r7, r7, r5
    bc30:	18ff      	adds	r7, r7, r3
    bc32:	465b      	mov	r3, fp
    bc34:	193c      	adds	r4, r7, r4
    bc36:	0ddb      	lsrs	r3, r3, #23
    bc38:	9a05      	ldr	r2, [sp, #20]
    bc3a:	0264      	lsls	r4, r4, #9
    bc3c:	431c      	orrs	r4, r3
    bc3e:	0243      	lsls	r3, r0, #9
    bc40:	4313      	orrs	r3, r2
    bc42:	1e5d      	subs	r5, r3, #1
    bc44:	41ab      	sbcs	r3, r5
    bc46:	465a      	mov	r2, fp
    bc48:	0dc0      	lsrs	r0, r0, #23
    bc4a:	4303      	orrs	r3, r0
    bc4c:	0252      	lsls	r2, r2, #9
    bc4e:	4313      	orrs	r3, r2
    bc50:	01e2      	lsls	r2, r4, #7
    bc52:	d556      	bpl.n	bd02 <__aeabi_dmul+0x426>
    bc54:	2001      	movs	r0, #1
    bc56:	085a      	lsrs	r2, r3, #1
    bc58:	4003      	ands	r3, r0
    bc5a:	4313      	orrs	r3, r2
    bc5c:	07e2      	lsls	r2, r4, #31
    bc5e:	4313      	orrs	r3, r2
    bc60:	0864      	lsrs	r4, r4, #1
    bc62:	485a      	ldr	r0, [pc, #360]	; (bdcc <__aeabi_dmul+0x4f0>)
    bc64:	4460      	add	r0, ip
    bc66:	2800      	cmp	r0, #0
    bc68:	dd4d      	ble.n	bd06 <__aeabi_dmul+0x42a>
    bc6a:	075a      	lsls	r2, r3, #29
    bc6c:	d009      	beq.n	bc82 <__aeabi_dmul+0x3a6>
    bc6e:	220f      	movs	r2, #15
    bc70:	401a      	ands	r2, r3
    bc72:	2a04      	cmp	r2, #4
    bc74:	d005      	beq.n	bc82 <__aeabi_dmul+0x3a6>
    bc76:	1d1a      	adds	r2, r3, #4
    bc78:	429a      	cmp	r2, r3
    bc7a:	419b      	sbcs	r3, r3
    bc7c:	425b      	negs	r3, r3
    bc7e:	18e4      	adds	r4, r4, r3
    bc80:	0013      	movs	r3, r2
    bc82:	01e2      	lsls	r2, r4, #7
    bc84:	d504      	bpl.n	bc90 <__aeabi_dmul+0x3b4>
    bc86:	2080      	movs	r0, #128	; 0x80
    bc88:	4a51      	ldr	r2, [pc, #324]	; (bdd0 <__aeabi_dmul+0x4f4>)
    bc8a:	00c0      	lsls	r0, r0, #3
    bc8c:	4014      	ands	r4, r2
    bc8e:	4460      	add	r0, ip
    bc90:	4a50      	ldr	r2, [pc, #320]	; (bdd4 <__aeabi_dmul+0x4f8>)
    bc92:	4290      	cmp	r0, r2
    bc94:	dd00      	ble.n	bc98 <__aeabi_dmul+0x3bc>
    bc96:	e6e3      	b.n	ba60 <__aeabi_dmul+0x184>
    bc98:	2501      	movs	r5, #1
    bc9a:	08db      	lsrs	r3, r3, #3
    bc9c:	0762      	lsls	r2, r4, #29
    bc9e:	431a      	orrs	r2, r3
    bca0:	0264      	lsls	r4, r4, #9
    bca2:	9b01      	ldr	r3, [sp, #4]
    bca4:	4691      	mov	r9, r2
    bca6:	0b22      	lsrs	r2, r4, #12
    bca8:	0544      	lsls	r4, r0, #21
    bcaa:	0d64      	lsrs	r4, r4, #21
    bcac:	401d      	ands	r5, r3
    bcae:	e67c      	b.n	b9aa <__aeabi_dmul+0xce>
    bcb0:	2280      	movs	r2, #128	; 0x80
    bcb2:	4659      	mov	r1, fp
    bcb4:	0312      	lsls	r2, r2, #12
    bcb6:	4211      	tst	r1, r2
    bcb8:	d008      	beq.n	bccc <__aeabi_dmul+0x3f0>
    bcba:	4214      	tst	r4, r2
    bcbc:	d106      	bne.n	bccc <__aeabi_dmul+0x3f0>
    bcbe:	4322      	orrs	r2, r4
    bcc0:	0312      	lsls	r2, r2, #12
    bcc2:	0b12      	lsrs	r2, r2, #12
    bcc4:	4645      	mov	r5, r8
    bcc6:	4699      	mov	r9, r3
    bcc8:	4c43      	ldr	r4, [pc, #268]	; (bdd8 <__aeabi_dmul+0x4fc>)
    bcca:	e66e      	b.n	b9aa <__aeabi_dmul+0xce>
    bccc:	465b      	mov	r3, fp
    bcce:	431a      	orrs	r2, r3
    bcd0:	0312      	lsls	r2, r2, #12
    bcd2:	0b12      	lsrs	r2, r2, #12
    bcd4:	4c40      	ldr	r4, [pc, #256]	; (bdd8 <__aeabi_dmul+0x4fc>)
    bcd6:	e668      	b.n	b9aa <__aeabi_dmul+0xce>
    bcd8:	0003      	movs	r3, r0
    bcda:	4654      	mov	r4, sl
    bcdc:	3b28      	subs	r3, #40	; 0x28
    bcde:	409c      	lsls	r4, r3
    bce0:	2300      	movs	r3, #0
    bce2:	e6b9      	b.n	ba58 <__aeabi_dmul+0x17c>
    bce4:	f000 fd3a 	bl	c75c <__clzsi2>
    bce8:	3020      	adds	r0, #32
    bcea:	e6a6      	b.n	ba3a <__aeabi_dmul+0x15e>
    bcec:	0003      	movs	r3, r0
    bcee:	3b28      	subs	r3, #40	; 0x28
    bcf0:	409f      	lsls	r7, r3
    bcf2:	2300      	movs	r3, #0
    bcf4:	46bb      	mov	fp, r7
    bcf6:	4699      	mov	r9, r3
    bcf8:	e68a      	b.n	ba10 <__aeabi_dmul+0x134>
    bcfa:	f000 fd2f 	bl	c75c <__clzsi2>
    bcfe:	3020      	adds	r0, #32
    bd00:	e674      	b.n	b9ec <__aeabi_dmul+0x110>
    bd02:	46b4      	mov	ip, r6
    bd04:	e7ad      	b.n	bc62 <__aeabi_dmul+0x386>
    bd06:	2501      	movs	r5, #1
    bd08:	1a2a      	subs	r2, r5, r0
    bd0a:	2a38      	cmp	r2, #56	; 0x38
    bd0c:	dd06      	ble.n	bd1c <__aeabi_dmul+0x440>
    bd0e:	9b01      	ldr	r3, [sp, #4]
    bd10:	2400      	movs	r4, #0
    bd12:	401d      	ands	r5, r3
    bd14:	2300      	movs	r3, #0
    bd16:	2200      	movs	r2, #0
    bd18:	4699      	mov	r9, r3
    bd1a:	e646      	b.n	b9aa <__aeabi_dmul+0xce>
    bd1c:	2a1f      	cmp	r2, #31
    bd1e:	dc21      	bgt.n	bd64 <__aeabi_dmul+0x488>
    bd20:	2520      	movs	r5, #32
    bd22:	0020      	movs	r0, r4
    bd24:	1aad      	subs	r5, r5, r2
    bd26:	001e      	movs	r6, r3
    bd28:	40ab      	lsls	r3, r5
    bd2a:	40a8      	lsls	r0, r5
    bd2c:	40d6      	lsrs	r6, r2
    bd2e:	1e5d      	subs	r5, r3, #1
    bd30:	41ab      	sbcs	r3, r5
    bd32:	4330      	orrs	r0, r6
    bd34:	4318      	orrs	r0, r3
    bd36:	40d4      	lsrs	r4, r2
    bd38:	0743      	lsls	r3, r0, #29
    bd3a:	d009      	beq.n	bd50 <__aeabi_dmul+0x474>
    bd3c:	230f      	movs	r3, #15
    bd3e:	4003      	ands	r3, r0
    bd40:	2b04      	cmp	r3, #4
    bd42:	d005      	beq.n	bd50 <__aeabi_dmul+0x474>
    bd44:	0003      	movs	r3, r0
    bd46:	1d18      	adds	r0, r3, #4
    bd48:	4298      	cmp	r0, r3
    bd4a:	419b      	sbcs	r3, r3
    bd4c:	425b      	negs	r3, r3
    bd4e:	18e4      	adds	r4, r4, r3
    bd50:	0223      	lsls	r3, r4, #8
    bd52:	d521      	bpl.n	bd98 <__aeabi_dmul+0x4bc>
    bd54:	2501      	movs	r5, #1
    bd56:	9b01      	ldr	r3, [sp, #4]
    bd58:	2401      	movs	r4, #1
    bd5a:	401d      	ands	r5, r3
    bd5c:	2300      	movs	r3, #0
    bd5e:	2200      	movs	r2, #0
    bd60:	4699      	mov	r9, r3
    bd62:	e622      	b.n	b9aa <__aeabi_dmul+0xce>
    bd64:	251f      	movs	r5, #31
    bd66:	0021      	movs	r1, r4
    bd68:	426d      	negs	r5, r5
    bd6a:	1a28      	subs	r0, r5, r0
    bd6c:	40c1      	lsrs	r1, r0
    bd6e:	0008      	movs	r0, r1
    bd70:	2a20      	cmp	r2, #32
    bd72:	d01d      	beq.n	bdb0 <__aeabi_dmul+0x4d4>
    bd74:	355f      	adds	r5, #95	; 0x5f
    bd76:	1aaa      	subs	r2, r5, r2
    bd78:	4094      	lsls	r4, r2
    bd7a:	4323      	orrs	r3, r4
    bd7c:	1e5c      	subs	r4, r3, #1
    bd7e:	41a3      	sbcs	r3, r4
    bd80:	2507      	movs	r5, #7
    bd82:	4303      	orrs	r3, r0
    bd84:	401d      	ands	r5, r3
    bd86:	2200      	movs	r2, #0
    bd88:	2d00      	cmp	r5, #0
    bd8a:	d009      	beq.n	bda0 <__aeabi_dmul+0x4c4>
    bd8c:	220f      	movs	r2, #15
    bd8e:	2400      	movs	r4, #0
    bd90:	401a      	ands	r2, r3
    bd92:	0018      	movs	r0, r3
    bd94:	2a04      	cmp	r2, #4
    bd96:	d1d6      	bne.n	bd46 <__aeabi_dmul+0x46a>
    bd98:	0003      	movs	r3, r0
    bd9a:	0765      	lsls	r5, r4, #29
    bd9c:	0264      	lsls	r4, r4, #9
    bd9e:	0b22      	lsrs	r2, r4, #12
    bda0:	08db      	lsrs	r3, r3, #3
    bda2:	432b      	orrs	r3, r5
    bda4:	2501      	movs	r5, #1
    bda6:	4699      	mov	r9, r3
    bda8:	9b01      	ldr	r3, [sp, #4]
    bdaa:	2400      	movs	r4, #0
    bdac:	401d      	ands	r5, r3
    bdae:	e5fc      	b.n	b9aa <__aeabi_dmul+0xce>
    bdb0:	2400      	movs	r4, #0
    bdb2:	e7e2      	b.n	bd7a <__aeabi_dmul+0x49e>
    bdb4:	2280      	movs	r2, #128	; 0x80
    bdb6:	2501      	movs	r5, #1
    bdb8:	0312      	lsls	r2, r2, #12
    bdba:	4322      	orrs	r2, r4
    bdbc:	9901      	ldr	r1, [sp, #4]
    bdbe:	0312      	lsls	r2, r2, #12
    bdc0:	0b12      	lsrs	r2, r2, #12
    bdc2:	400d      	ands	r5, r1
    bdc4:	4699      	mov	r9, r3
    bdc6:	4c04      	ldr	r4, [pc, #16]	; (bdd8 <__aeabi_dmul+0x4fc>)
    bdc8:	e5ef      	b.n	b9aa <__aeabi_dmul+0xce>
    bdca:	46c0      	nop			; (mov r8, r8)
    bdcc:	000003ff 	.word	0x000003ff
    bdd0:	feffffff 	.word	0xfeffffff
    bdd4:	000007fe 	.word	0x000007fe
    bdd8:	000007ff 	.word	0x000007ff

0000bddc <__aeabi_dsub>:
    bddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdde:	4646      	mov	r6, r8
    bde0:	46d6      	mov	lr, sl
    bde2:	464f      	mov	r7, r9
    bde4:	030c      	lsls	r4, r1, #12
    bde6:	b5c0      	push	{r6, r7, lr}
    bde8:	0fcd      	lsrs	r5, r1, #31
    bdea:	004e      	lsls	r6, r1, #1
    bdec:	0a61      	lsrs	r1, r4, #9
    bdee:	0f44      	lsrs	r4, r0, #29
    bdf0:	430c      	orrs	r4, r1
    bdf2:	00c1      	lsls	r1, r0, #3
    bdf4:	0058      	lsls	r0, r3, #1
    bdf6:	0d40      	lsrs	r0, r0, #21
    bdf8:	4684      	mov	ip, r0
    bdfa:	468a      	mov	sl, r1
    bdfc:	000f      	movs	r7, r1
    bdfe:	0319      	lsls	r1, r3, #12
    be00:	0f50      	lsrs	r0, r2, #29
    be02:	0a49      	lsrs	r1, r1, #9
    be04:	4301      	orrs	r1, r0
    be06:	48c6      	ldr	r0, [pc, #792]	; (c120 <__aeabi_dsub+0x344>)
    be08:	0d76      	lsrs	r6, r6, #21
    be0a:	46a8      	mov	r8, r5
    be0c:	0fdb      	lsrs	r3, r3, #31
    be0e:	00d2      	lsls	r2, r2, #3
    be10:	4584      	cmp	ip, r0
    be12:	d100      	bne.n	be16 <__aeabi_dsub+0x3a>
    be14:	e0d8      	b.n	bfc8 <__aeabi_dsub+0x1ec>
    be16:	2001      	movs	r0, #1
    be18:	4043      	eors	r3, r0
    be1a:	42ab      	cmp	r3, r5
    be1c:	d100      	bne.n	be20 <__aeabi_dsub+0x44>
    be1e:	e0a6      	b.n	bf6e <__aeabi_dsub+0x192>
    be20:	4660      	mov	r0, ip
    be22:	1a35      	subs	r5, r6, r0
    be24:	2d00      	cmp	r5, #0
    be26:	dc00      	bgt.n	be2a <__aeabi_dsub+0x4e>
    be28:	e105      	b.n	c036 <__aeabi_dsub+0x25a>
    be2a:	2800      	cmp	r0, #0
    be2c:	d110      	bne.n	be50 <__aeabi_dsub+0x74>
    be2e:	000b      	movs	r3, r1
    be30:	4313      	orrs	r3, r2
    be32:	d100      	bne.n	be36 <__aeabi_dsub+0x5a>
    be34:	e0d7      	b.n	bfe6 <__aeabi_dsub+0x20a>
    be36:	1e6b      	subs	r3, r5, #1
    be38:	2b00      	cmp	r3, #0
    be3a:	d000      	beq.n	be3e <__aeabi_dsub+0x62>
    be3c:	e14b      	b.n	c0d6 <__aeabi_dsub+0x2fa>
    be3e:	4653      	mov	r3, sl
    be40:	1a9f      	subs	r7, r3, r2
    be42:	45ba      	cmp	sl, r7
    be44:	4180      	sbcs	r0, r0
    be46:	1a64      	subs	r4, r4, r1
    be48:	4240      	negs	r0, r0
    be4a:	1a24      	subs	r4, r4, r0
    be4c:	2601      	movs	r6, #1
    be4e:	e01e      	b.n	be8e <__aeabi_dsub+0xb2>
    be50:	4bb3      	ldr	r3, [pc, #716]	; (c120 <__aeabi_dsub+0x344>)
    be52:	429e      	cmp	r6, r3
    be54:	d048      	beq.n	bee8 <__aeabi_dsub+0x10c>
    be56:	2380      	movs	r3, #128	; 0x80
    be58:	041b      	lsls	r3, r3, #16
    be5a:	4319      	orrs	r1, r3
    be5c:	2d38      	cmp	r5, #56	; 0x38
    be5e:	dd00      	ble.n	be62 <__aeabi_dsub+0x86>
    be60:	e119      	b.n	c096 <__aeabi_dsub+0x2ba>
    be62:	2d1f      	cmp	r5, #31
    be64:	dd00      	ble.n	be68 <__aeabi_dsub+0x8c>
    be66:	e14c      	b.n	c102 <__aeabi_dsub+0x326>
    be68:	2320      	movs	r3, #32
    be6a:	000f      	movs	r7, r1
    be6c:	1b5b      	subs	r3, r3, r5
    be6e:	0010      	movs	r0, r2
    be70:	409a      	lsls	r2, r3
    be72:	409f      	lsls	r7, r3
    be74:	40e8      	lsrs	r0, r5
    be76:	1e53      	subs	r3, r2, #1
    be78:	419a      	sbcs	r2, r3
    be7a:	40e9      	lsrs	r1, r5
    be7c:	4307      	orrs	r7, r0
    be7e:	4317      	orrs	r7, r2
    be80:	4653      	mov	r3, sl
    be82:	1bdf      	subs	r7, r3, r7
    be84:	1a61      	subs	r1, r4, r1
    be86:	45ba      	cmp	sl, r7
    be88:	41a4      	sbcs	r4, r4
    be8a:	4264      	negs	r4, r4
    be8c:	1b0c      	subs	r4, r1, r4
    be8e:	0223      	lsls	r3, r4, #8
    be90:	d400      	bmi.n	be94 <__aeabi_dsub+0xb8>
    be92:	e0c5      	b.n	c020 <__aeabi_dsub+0x244>
    be94:	0264      	lsls	r4, r4, #9
    be96:	0a65      	lsrs	r5, r4, #9
    be98:	2d00      	cmp	r5, #0
    be9a:	d100      	bne.n	be9e <__aeabi_dsub+0xc2>
    be9c:	e0f6      	b.n	c08c <__aeabi_dsub+0x2b0>
    be9e:	0028      	movs	r0, r5
    bea0:	f000 fc5c 	bl	c75c <__clzsi2>
    bea4:	0003      	movs	r3, r0
    bea6:	3b08      	subs	r3, #8
    bea8:	2b1f      	cmp	r3, #31
    beaa:	dd00      	ble.n	beae <__aeabi_dsub+0xd2>
    beac:	e0e9      	b.n	c082 <__aeabi_dsub+0x2a6>
    beae:	2220      	movs	r2, #32
    beb0:	003c      	movs	r4, r7
    beb2:	1ad2      	subs	r2, r2, r3
    beb4:	409d      	lsls	r5, r3
    beb6:	40d4      	lsrs	r4, r2
    beb8:	409f      	lsls	r7, r3
    beba:	4325      	orrs	r5, r4
    bebc:	429e      	cmp	r6, r3
    bebe:	dd00      	ble.n	bec2 <__aeabi_dsub+0xe6>
    bec0:	e0db      	b.n	c07a <__aeabi_dsub+0x29e>
    bec2:	1b9e      	subs	r6, r3, r6
    bec4:	1c73      	adds	r3, r6, #1
    bec6:	2b1f      	cmp	r3, #31
    bec8:	dd00      	ble.n	becc <__aeabi_dsub+0xf0>
    beca:	e10a      	b.n	c0e2 <__aeabi_dsub+0x306>
    becc:	2220      	movs	r2, #32
    bece:	0038      	movs	r0, r7
    bed0:	1ad2      	subs	r2, r2, r3
    bed2:	0029      	movs	r1, r5
    bed4:	4097      	lsls	r7, r2
    bed6:	002c      	movs	r4, r5
    bed8:	4091      	lsls	r1, r2
    beda:	40d8      	lsrs	r0, r3
    bedc:	1e7a      	subs	r2, r7, #1
    bede:	4197      	sbcs	r7, r2
    bee0:	40dc      	lsrs	r4, r3
    bee2:	2600      	movs	r6, #0
    bee4:	4301      	orrs	r1, r0
    bee6:	430f      	orrs	r7, r1
    bee8:	077b      	lsls	r3, r7, #29
    beea:	d009      	beq.n	bf00 <__aeabi_dsub+0x124>
    beec:	230f      	movs	r3, #15
    beee:	403b      	ands	r3, r7
    bef0:	2b04      	cmp	r3, #4
    bef2:	d005      	beq.n	bf00 <__aeabi_dsub+0x124>
    bef4:	1d3b      	adds	r3, r7, #4
    bef6:	42bb      	cmp	r3, r7
    bef8:	41bf      	sbcs	r7, r7
    befa:	427f      	negs	r7, r7
    befc:	19e4      	adds	r4, r4, r7
    befe:	001f      	movs	r7, r3
    bf00:	0223      	lsls	r3, r4, #8
    bf02:	d525      	bpl.n	bf50 <__aeabi_dsub+0x174>
    bf04:	4b86      	ldr	r3, [pc, #536]	; (c120 <__aeabi_dsub+0x344>)
    bf06:	3601      	adds	r6, #1
    bf08:	429e      	cmp	r6, r3
    bf0a:	d100      	bne.n	bf0e <__aeabi_dsub+0x132>
    bf0c:	e0af      	b.n	c06e <__aeabi_dsub+0x292>
    bf0e:	4b85      	ldr	r3, [pc, #532]	; (c124 <__aeabi_dsub+0x348>)
    bf10:	2501      	movs	r5, #1
    bf12:	401c      	ands	r4, r3
    bf14:	4643      	mov	r3, r8
    bf16:	0762      	lsls	r2, r4, #29
    bf18:	08ff      	lsrs	r7, r7, #3
    bf1a:	0264      	lsls	r4, r4, #9
    bf1c:	0576      	lsls	r6, r6, #21
    bf1e:	4317      	orrs	r7, r2
    bf20:	0b24      	lsrs	r4, r4, #12
    bf22:	0d76      	lsrs	r6, r6, #21
    bf24:	401d      	ands	r5, r3
    bf26:	2100      	movs	r1, #0
    bf28:	0324      	lsls	r4, r4, #12
    bf2a:	0b23      	lsrs	r3, r4, #12
    bf2c:	0d0c      	lsrs	r4, r1, #20
    bf2e:	4a7e      	ldr	r2, [pc, #504]	; (c128 <__aeabi_dsub+0x34c>)
    bf30:	0524      	lsls	r4, r4, #20
    bf32:	431c      	orrs	r4, r3
    bf34:	4014      	ands	r4, r2
    bf36:	0533      	lsls	r3, r6, #20
    bf38:	4323      	orrs	r3, r4
    bf3a:	005b      	lsls	r3, r3, #1
    bf3c:	07ed      	lsls	r5, r5, #31
    bf3e:	085b      	lsrs	r3, r3, #1
    bf40:	432b      	orrs	r3, r5
    bf42:	0038      	movs	r0, r7
    bf44:	0019      	movs	r1, r3
    bf46:	bc1c      	pop	{r2, r3, r4}
    bf48:	4690      	mov	r8, r2
    bf4a:	4699      	mov	r9, r3
    bf4c:	46a2      	mov	sl, r4
    bf4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf50:	2501      	movs	r5, #1
    bf52:	4643      	mov	r3, r8
    bf54:	0762      	lsls	r2, r4, #29
    bf56:	08ff      	lsrs	r7, r7, #3
    bf58:	4317      	orrs	r7, r2
    bf5a:	08e4      	lsrs	r4, r4, #3
    bf5c:	401d      	ands	r5, r3
    bf5e:	4b70      	ldr	r3, [pc, #448]	; (c120 <__aeabi_dsub+0x344>)
    bf60:	429e      	cmp	r6, r3
    bf62:	d036      	beq.n	bfd2 <__aeabi_dsub+0x1f6>
    bf64:	0324      	lsls	r4, r4, #12
    bf66:	0576      	lsls	r6, r6, #21
    bf68:	0b24      	lsrs	r4, r4, #12
    bf6a:	0d76      	lsrs	r6, r6, #21
    bf6c:	e7db      	b.n	bf26 <__aeabi_dsub+0x14a>
    bf6e:	4663      	mov	r3, ip
    bf70:	1af3      	subs	r3, r6, r3
    bf72:	2b00      	cmp	r3, #0
    bf74:	dc00      	bgt.n	bf78 <__aeabi_dsub+0x19c>
    bf76:	e094      	b.n	c0a2 <__aeabi_dsub+0x2c6>
    bf78:	4660      	mov	r0, ip
    bf7a:	2800      	cmp	r0, #0
    bf7c:	d035      	beq.n	bfea <__aeabi_dsub+0x20e>
    bf7e:	4868      	ldr	r0, [pc, #416]	; (c120 <__aeabi_dsub+0x344>)
    bf80:	4286      	cmp	r6, r0
    bf82:	d0b1      	beq.n	bee8 <__aeabi_dsub+0x10c>
    bf84:	2780      	movs	r7, #128	; 0x80
    bf86:	043f      	lsls	r7, r7, #16
    bf88:	4339      	orrs	r1, r7
    bf8a:	2b38      	cmp	r3, #56	; 0x38
    bf8c:	dc00      	bgt.n	bf90 <__aeabi_dsub+0x1b4>
    bf8e:	e0fd      	b.n	c18c <__aeabi_dsub+0x3b0>
    bf90:	430a      	orrs	r2, r1
    bf92:	0017      	movs	r7, r2
    bf94:	2100      	movs	r1, #0
    bf96:	1e7a      	subs	r2, r7, #1
    bf98:	4197      	sbcs	r7, r2
    bf9a:	4457      	add	r7, sl
    bf9c:	4557      	cmp	r7, sl
    bf9e:	4180      	sbcs	r0, r0
    bfa0:	1909      	adds	r1, r1, r4
    bfa2:	4244      	negs	r4, r0
    bfa4:	190c      	adds	r4, r1, r4
    bfa6:	0223      	lsls	r3, r4, #8
    bfa8:	d53a      	bpl.n	c020 <__aeabi_dsub+0x244>
    bfaa:	4b5d      	ldr	r3, [pc, #372]	; (c120 <__aeabi_dsub+0x344>)
    bfac:	3601      	adds	r6, #1
    bfae:	429e      	cmp	r6, r3
    bfb0:	d100      	bne.n	bfb4 <__aeabi_dsub+0x1d8>
    bfb2:	e14b      	b.n	c24c <__aeabi_dsub+0x470>
    bfb4:	2201      	movs	r2, #1
    bfb6:	4b5b      	ldr	r3, [pc, #364]	; (c124 <__aeabi_dsub+0x348>)
    bfb8:	401c      	ands	r4, r3
    bfba:	087b      	lsrs	r3, r7, #1
    bfbc:	4017      	ands	r7, r2
    bfbe:	431f      	orrs	r7, r3
    bfc0:	07e2      	lsls	r2, r4, #31
    bfc2:	4317      	orrs	r7, r2
    bfc4:	0864      	lsrs	r4, r4, #1
    bfc6:	e78f      	b.n	bee8 <__aeabi_dsub+0x10c>
    bfc8:	0008      	movs	r0, r1
    bfca:	4310      	orrs	r0, r2
    bfcc:	d000      	beq.n	bfd0 <__aeabi_dsub+0x1f4>
    bfce:	e724      	b.n	be1a <__aeabi_dsub+0x3e>
    bfd0:	e721      	b.n	be16 <__aeabi_dsub+0x3a>
    bfd2:	0023      	movs	r3, r4
    bfd4:	433b      	orrs	r3, r7
    bfd6:	d100      	bne.n	bfda <__aeabi_dsub+0x1fe>
    bfd8:	e1b9      	b.n	c34e <__aeabi_dsub+0x572>
    bfda:	2280      	movs	r2, #128	; 0x80
    bfdc:	0312      	lsls	r2, r2, #12
    bfde:	4314      	orrs	r4, r2
    bfe0:	0324      	lsls	r4, r4, #12
    bfe2:	0b24      	lsrs	r4, r4, #12
    bfe4:	e79f      	b.n	bf26 <__aeabi_dsub+0x14a>
    bfe6:	002e      	movs	r6, r5
    bfe8:	e77e      	b.n	bee8 <__aeabi_dsub+0x10c>
    bfea:	0008      	movs	r0, r1
    bfec:	4310      	orrs	r0, r2
    bfee:	d100      	bne.n	bff2 <__aeabi_dsub+0x216>
    bff0:	e0ca      	b.n	c188 <__aeabi_dsub+0x3ac>
    bff2:	1e58      	subs	r0, r3, #1
    bff4:	4684      	mov	ip, r0
    bff6:	2800      	cmp	r0, #0
    bff8:	d000      	beq.n	bffc <__aeabi_dsub+0x220>
    bffa:	e0e7      	b.n	c1cc <__aeabi_dsub+0x3f0>
    bffc:	4452      	add	r2, sl
    bffe:	4552      	cmp	r2, sl
    c000:	4180      	sbcs	r0, r0
    c002:	1864      	adds	r4, r4, r1
    c004:	4240      	negs	r0, r0
    c006:	1824      	adds	r4, r4, r0
    c008:	0017      	movs	r7, r2
    c00a:	2601      	movs	r6, #1
    c00c:	0223      	lsls	r3, r4, #8
    c00e:	d507      	bpl.n	c020 <__aeabi_dsub+0x244>
    c010:	2602      	movs	r6, #2
    c012:	e7cf      	b.n	bfb4 <__aeabi_dsub+0x1d8>
    c014:	4664      	mov	r4, ip
    c016:	432c      	orrs	r4, r5
    c018:	d100      	bne.n	c01c <__aeabi_dsub+0x240>
    c01a:	e1b3      	b.n	c384 <__aeabi_dsub+0x5a8>
    c01c:	002c      	movs	r4, r5
    c01e:	4667      	mov	r7, ip
    c020:	077b      	lsls	r3, r7, #29
    c022:	d000      	beq.n	c026 <__aeabi_dsub+0x24a>
    c024:	e762      	b.n	beec <__aeabi_dsub+0x110>
    c026:	0763      	lsls	r3, r4, #29
    c028:	08ff      	lsrs	r7, r7, #3
    c02a:	431f      	orrs	r7, r3
    c02c:	2501      	movs	r5, #1
    c02e:	4643      	mov	r3, r8
    c030:	08e4      	lsrs	r4, r4, #3
    c032:	401d      	ands	r5, r3
    c034:	e793      	b.n	bf5e <__aeabi_dsub+0x182>
    c036:	2d00      	cmp	r5, #0
    c038:	d178      	bne.n	c12c <__aeabi_dsub+0x350>
    c03a:	1c75      	adds	r5, r6, #1
    c03c:	056d      	lsls	r5, r5, #21
    c03e:	0d6d      	lsrs	r5, r5, #21
    c040:	2d01      	cmp	r5, #1
    c042:	dc00      	bgt.n	c046 <__aeabi_dsub+0x26a>
    c044:	e0f2      	b.n	c22c <__aeabi_dsub+0x450>
    c046:	4650      	mov	r0, sl
    c048:	1a80      	subs	r0, r0, r2
    c04a:	4582      	cmp	sl, r0
    c04c:	41bf      	sbcs	r7, r7
    c04e:	1a65      	subs	r5, r4, r1
    c050:	427f      	negs	r7, r7
    c052:	1bed      	subs	r5, r5, r7
    c054:	4684      	mov	ip, r0
    c056:	0228      	lsls	r0, r5, #8
    c058:	d400      	bmi.n	c05c <__aeabi_dsub+0x280>
    c05a:	e08c      	b.n	c176 <__aeabi_dsub+0x39a>
    c05c:	4650      	mov	r0, sl
    c05e:	1a17      	subs	r7, r2, r0
    c060:	42ba      	cmp	r2, r7
    c062:	4192      	sbcs	r2, r2
    c064:	1b0c      	subs	r4, r1, r4
    c066:	4255      	negs	r5, r2
    c068:	1b65      	subs	r5, r4, r5
    c06a:	4698      	mov	r8, r3
    c06c:	e714      	b.n	be98 <__aeabi_dsub+0xbc>
    c06e:	2501      	movs	r5, #1
    c070:	4643      	mov	r3, r8
    c072:	2400      	movs	r4, #0
    c074:	401d      	ands	r5, r3
    c076:	2700      	movs	r7, #0
    c078:	e755      	b.n	bf26 <__aeabi_dsub+0x14a>
    c07a:	4c2a      	ldr	r4, [pc, #168]	; (c124 <__aeabi_dsub+0x348>)
    c07c:	1af6      	subs	r6, r6, r3
    c07e:	402c      	ands	r4, r5
    c080:	e732      	b.n	bee8 <__aeabi_dsub+0x10c>
    c082:	003d      	movs	r5, r7
    c084:	3828      	subs	r0, #40	; 0x28
    c086:	4085      	lsls	r5, r0
    c088:	2700      	movs	r7, #0
    c08a:	e717      	b.n	bebc <__aeabi_dsub+0xe0>
    c08c:	0038      	movs	r0, r7
    c08e:	f000 fb65 	bl	c75c <__clzsi2>
    c092:	3020      	adds	r0, #32
    c094:	e706      	b.n	bea4 <__aeabi_dsub+0xc8>
    c096:	430a      	orrs	r2, r1
    c098:	0017      	movs	r7, r2
    c09a:	2100      	movs	r1, #0
    c09c:	1e7a      	subs	r2, r7, #1
    c09e:	4197      	sbcs	r7, r2
    c0a0:	e6ee      	b.n	be80 <__aeabi_dsub+0xa4>
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	d000      	beq.n	c0a8 <__aeabi_dsub+0x2cc>
    c0a6:	e0e5      	b.n	c274 <__aeabi_dsub+0x498>
    c0a8:	1c73      	adds	r3, r6, #1
    c0aa:	469c      	mov	ip, r3
    c0ac:	055b      	lsls	r3, r3, #21
    c0ae:	0d5b      	lsrs	r3, r3, #21
    c0b0:	2b01      	cmp	r3, #1
    c0b2:	dc00      	bgt.n	c0b6 <__aeabi_dsub+0x2da>
    c0b4:	e09f      	b.n	c1f6 <__aeabi_dsub+0x41a>
    c0b6:	4b1a      	ldr	r3, [pc, #104]	; (c120 <__aeabi_dsub+0x344>)
    c0b8:	459c      	cmp	ip, r3
    c0ba:	d100      	bne.n	c0be <__aeabi_dsub+0x2e2>
    c0bc:	e0c5      	b.n	c24a <__aeabi_dsub+0x46e>
    c0be:	4452      	add	r2, sl
    c0c0:	4552      	cmp	r2, sl
    c0c2:	4180      	sbcs	r0, r0
    c0c4:	1864      	adds	r4, r4, r1
    c0c6:	4240      	negs	r0, r0
    c0c8:	1824      	adds	r4, r4, r0
    c0ca:	07e7      	lsls	r7, r4, #31
    c0cc:	0852      	lsrs	r2, r2, #1
    c0ce:	4317      	orrs	r7, r2
    c0d0:	0864      	lsrs	r4, r4, #1
    c0d2:	4666      	mov	r6, ip
    c0d4:	e708      	b.n	bee8 <__aeabi_dsub+0x10c>
    c0d6:	4812      	ldr	r0, [pc, #72]	; (c120 <__aeabi_dsub+0x344>)
    c0d8:	4285      	cmp	r5, r0
    c0da:	d100      	bne.n	c0de <__aeabi_dsub+0x302>
    c0dc:	e085      	b.n	c1ea <__aeabi_dsub+0x40e>
    c0de:	001d      	movs	r5, r3
    c0e0:	e6bc      	b.n	be5c <__aeabi_dsub+0x80>
    c0e2:	0029      	movs	r1, r5
    c0e4:	3e1f      	subs	r6, #31
    c0e6:	40f1      	lsrs	r1, r6
    c0e8:	2b20      	cmp	r3, #32
    c0ea:	d100      	bne.n	c0ee <__aeabi_dsub+0x312>
    c0ec:	e07f      	b.n	c1ee <__aeabi_dsub+0x412>
    c0ee:	2240      	movs	r2, #64	; 0x40
    c0f0:	1ad3      	subs	r3, r2, r3
    c0f2:	409d      	lsls	r5, r3
    c0f4:	432f      	orrs	r7, r5
    c0f6:	1e7d      	subs	r5, r7, #1
    c0f8:	41af      	sbcs	r7, r5
    c0fa:	2400      	movs	r4, #0
    c0fc:	430f      	orrs	r7, r1
    c0fe:	2600      	movs	r6, #0
    c100:	e78e      	b.n	c020 <__aeabi_dsub+0x244>
    c102:	002b      	movs	r3, r5
    c104:	000f      	movs	r7, r1
    c106:	3b20      	subs	r3, #32
    c108:	40df      	lsrs	r7, r3
    c10a:	2d20      	cmp	r5, #32
    c10c:	d071      	beq.n	c1f2 <__aeabi_dsub+0x416>
    c10e:	2340      	movs	r3, #64	; 0x40
    c110:	1b5d      	subs	r5, r3, r5
    c112:	40a9      	lsls	r1, r5
    c114:	430a      	orrs	r2, r1
    c116:	1e51      	subs	r1, r2, #1
    c118:	418a      	sbcs	r2, r1
    c11a:	2100      	movs	r1, #0
    c11c:	4317      	orrs	r7, r2
    c11e:	e6af      	b.n	be80 <__aeabi_dsub+0xa4>
    c120:	000007ff 	.word	0x000007ff
    c124:	ff7fffff 	.word	0xff7fffff
    c128:	800fffff 	.word	0x800fffff
    c12c:	2e00      	cmp	r6, #0
    c12e:	d03e      	beq.n	c1ae <__aeabi_dsub+0x3d2>
    c130:	4eb3      	ldr	r6, [pc, #716]	; (c400 <__aeabi_dsub+0x624>)
    c132:	45b4      	cmp	ip, r6
    c134:	d045      	beq.n	c1c2 <__aeabi_dsub+0x3e6>
    c136:	2680      	movs	r6, #128	; 0x80
    c138:	0436      	lsls	r6, r6, #16
    c13a:	426d      	negs	r5, r5
    c13c:	4334      	orrs	r4, r6
    c13e:	2d38      	cmp	r5, #56	; 0x38
    c140:	dd00      	ble.n	c144 <__aeabi_dsub+0x368>
    c142:	e0a8      	b.n	c296 <__aeabi_dsub+0x4ba>
    c144:	2d1f      	cmp	r5, #31
    c146:	dd00      	ble.n	c14a <__aeabi_dsub+0x36e>
    c148:	e11f      	b.n	c38a <__aeabi_dsub+0x5ae>
    c14a:	2620      	movs	r6, #32
    c14c:	0027      	movs	r7, r4
    c14e:	4650      	mov	r0, sl
    c150:	1b76      	subs	r6, r6, r5
    c152:	40b7      	lsls	r7, r6
    c154:	40e8      	lsrs	r0, r5
    c156:	4307      	orrs	r7, r0
    c158:	4650      	mov	r0, sl
    c15a:	40b0      	lsls	r0, r6
    c15c:	1e46      	subs	r6, r0, #1
    c15e:	41b0      	sbcs	r0, r6
    c160:	40ec      	lsrs	r4, r5
    c162:	4338      	orrs	r0, r7
    c164:	1a17      	subs	r7, r2, r0
    c166:	42ba      	cmp	r2, r7
    c168:	4192      	sbcs	r2, r2
    c16a:	1b0c      	subs	r4, r1, r4
    c16c:	4252      	negs	r2, r2
    c16e:	1aa4      	subs	r4, r4, r2
    c170:	4666      	mov	r6, ip
    c172:	4698      	mov	r8, r3
    c174:	e68b      	b.n	be8e <__aeabi_dsub+0xb2>
    c176:	4664      	mov	r4, ip
    c178:	4667      	mov	r7, ip
    c17a:	432c      	orrs	r4, r5
    c17c:	d000      	beq.n	c180 <__aeabi_dsub+0x3a4>
    c17e:	e68b      	b.n	be98 <__aeabi_dsub+0xbc>
    c180:	2500      	movs	r5, #0
    c182:	2600      	movs	r6, #0
    c184:	2700      	movs	r7, #0
    c186:	e6ea      	b.n	bf5e <__aeabi_dsub+0x182>
    c188:	001e      	movs	r6, r3
    c18a:	e6ad      	b.n	bee8 <__aeabi_dsub+0x10c>
    c18c:	2b1f      	cmp	r3, #31
    c18e:	dc60      	bgt.n	c252 <__aeabi_dsub+0x476>
    c190:	2720      	movs	r7, #32
    c192:	1af8      	subs	r0, r7, r3
    c194:	000f      	movs	r7, r1
    c196:	4684      	mov	ip, r0
    c198:	4087      	lsls	r7, r0
    c19a:	0010      	movs	r0, r2
    c19c:	40d8      	lsrs	r0, r3
    c19e:	4307      	orrs	r7, r0
    c1a0:	4660      	mov	r0, ip
    c1a2:	4082      	lsls	r2, r0
    c1a4:	1e50      	subs	r0, r2, #1
    c1a6:	4182      	sbcs	r2, r0
    c1a8:	40d9      	lsrs	r1, r3
    c1aa:	4317      	orrs	r7, r2
    c1ac:	e6f5      	b.n	bf9a <__aeabi_dsub+0x1be>
    c1ae:	0026      	movs	r6, r4
    c1b0:	4650      	mov	r0, sl
    c1b2:	4306      	orrs	r6, r0
    c1b4:	d005      	beq.n	c1c2 <__aeabi_dsub+0x3e6>
    c1b6:	43ed      	mvns	r5, r5
    c1b8:	2d00      	cmp	r5, #0
    c1ba:	d0d3      	beq.n	c164 <__aeabi_dsub+0x388>
    c1bc:	4e90      	ldr	r6, [pc, #576]	; (c400 <__aeabi_dsub+0x624>)
    c1be:	45b4      	cmp	ip, r6
    c1c0:	d1bd      	bne.n	c13e <__aeabi_dsub+0x362>
    c1c2:	000c      	movs	r4, r1
    c1c4:	0017      	movs	r7, r2
    c1c6:	4666      	mov	r6, ip
    c1c8:	4698      	mov	r8, r3
    c1ca:	e68d      	b.n	bee8 <__aeabi_dsub+0x10c>
    c1cc:	488c      	ldr	r0, [pc, #560]	; (c400 <__aeabi_dsub+0x624>)
    c1ce:	4283      	cmp	r3, r0
    c1d0:	d00b      	beq.n	c1ea <__aeabi_dsub+0x40e>
    c1d2:	4663      	mov	r3, ip
    c1d4:	e6d9      	b.n	bf8a <__aeabi_dsub+0x1ae>
    c1d6:	2d00      	cmp	r5, #0
    c1d8:	d000      	beq.n	c1dc <__aeabi_dsub+0x400>
    c1da:	e096      	b.n	c30a <__aeabi_dsub+0x52e>
    c1dc:	0008      	movs	r0, r1
    c1de:	4310      	orrs	r0, r2
    c1e0:	d100      	bne.n	c1e4 <__aeabi_dsub+0x408>
    c1e2:	e0e2      	b.n	c3aa <__aeabi_dsub+0x5ce>
    c1e4:	000c      	movs	r4, r1
    c1e6:	0017      	movs	r7, r2
    c1e8:	4698      	mov	r8, r3
    c1ea:	4e85      	ldr	r6, [pc, #532]	; (c400 <__aeabi_dsub+0x624>)
    c1ec:	e67c      	b.n	bee8 <__aeabi_dsub+0x10c>
    c1ee:	2500      	movs	r5, #0
    c1f0:	e780      	b.n	c0f4 <__aeabi_dsub+0x318>
    c1f2:	2100      	movs	r1, #0
    c1f4:	e78e      	b.n	c114 <__aeabi_dsub+0x338>
    c1f6:	0023      	movs	r3, r4
    c1f8:	4650      	mov	r0, sl
    c1fa:	4303      	orrs	r3, r0
    c1fc:	2e00      	cmp	r6, #0
    c1fe:	d000      	beq.n	c202 <__aeabi_dsub+0x426>
    c200:	e0a8      	b.n	c354 <__aeabi_dsub+0x578>
    c202:	2b00      	cmp	r3, #0
    c204:	d100      	bne.n	c208 <__aeabi_dsub+0x42c>
    c206:	e0de      	b.n	c3c6 <__aeabi_dsub+0x5ea>
    c208:	000b      	movs	r3, r1
    c20a:	4313      	orrs	r3, r2
    c20c:	d100      	bne.n	c210 <__aeabi_dsub+0x434>
    c20e:	e66b      	b.n	bee8 <__aeabi_dsub+0x10c>
    c210:	4452      	add	r2, sl
    c212:	4552      	cmp	r2, sl
    c214:	4180      	sbcs	r0, r0
    c216:	1864      	adds	r4, r4, r1
    c218:	4240      	negs	r0, r0
    c21a:	1824      	adds	r4, r4, r0
    c21c:	0017      	movs	r7, r2
    c21e:	0223      	lsls	r3, r4, #8
    c220:	d400      	bmi.n	c224 <__aeabi_dsub+0x448>
    c222:	e6fd      	b.n	c020 <__aeabi_dsub+0x244>
    c224:	4b77      	ldr	r3, [pc, #476]	; (c404 <__aeabi_dsub+0x628>)
    c226:	4666      	mov	r6, ip
    c228:	401c      	ands	r4, r3
    c22a:	e65d      	b.n	bee8 <__aeabi_dsub+0x10c>
    c22c:	0025      	movs	r5, r4
    c22e:	4650      	mov	r0, sl
    c230:	4305      	orrs	r5, r0
    c232:	2e00      	cmp	r6, #0
    c234:	d1cf      	bne.n	c1d6 <__aeabi_dsub+0x3fa>
    c236:	2d00      	cmp	r5, #0
    c238:	d14f      	bne.n	c2da <__aeabi_dsub+0x4fe>
    c23a:	000c      	movs	r4, r1
    c23c:	4314      	orrs	r4, r2
    c23e:	d100      	bne.n	c242 <__aeabi_dsub+0x466>
    c240:	e0a0      	b.n	c384 <__aeabi_dsub+0x5a8>
    c242:	000c      	movs	r4, r1
    c244:	0017      	movs	r7, r2
    c246:	4698      	mov	r8, r3
    c248:	e64e      	b.n	bee8 <__aeabi_dsub+0x10c>
    c24a:	4666      	mov	r6, ip
    c24c:	2400      	movs	r4, #0
    c24e:	2700      	movs	r7, #0
    c250:	e685      	b.n	bf5e <__aeabi_dsub+0x182>
    c252:	001f      	movs	r7, r3
    c254:	0008      	movs	r0, r1
    c256:	3f20      	subs	r7, #32
    c258:	40f8      	lsrs	r0, r7
    c25a:	0007      	movs	r7, r0
    c25c:	2b20      	cmp	r3, #32
    c25e:	d100      	bne.n	c262 <__aeabi_dsub+0x486>
    c260:	e08e      	b.n	c380 <__aeabi_dsub+0x5a4>
    c262:	2040      	movs	r0, #64	; 0x40
    c264:	1ac3      	subs	r3, r0, r3
    c266:	4099      	lsls	r1, r3
    c268:	430a      	orrs	r2, r1
    c26a:	1e51      	subs	r1, r2, #1
    c26c:	418a      	sbcs	r2, r1
    c26e:	2100      	movs	r1, #0
    c270:	4317      	orrs	r7, r2
    c272:	e692      	b.n	bf9a <__aeabi_dsub+0x1be>
    c274:	2e00      	cmp	r6, #0
    c276:	d114      	bne.n	c2a2 <__aeabi_dsub+0x4c6>
    c278:	0026      	movs	r6, r4
    c27a:	4650      	mov	r0, sl
    c27c:	4306      	orrs	r6, r0
    c27e:	d062      	beq.n	c346 <__aeabi_dsub+0x56a>
    c280:	43db      	mvns	r3, r3
    c282:	2b00      	cmp	r3, #0
    c284:	d15c      	bne.n	c340 <__aeabi_dsub+0x564>
    c286:	1887      	adds	r7, r0, r2
    c288:	4297      	cmp	r7, r2
    c28a:	4192      	sbcs	r2, r2
    c28c:	1864      	adds	r4, r4, r1
    c28e:	4252      	negs	r2, r2
    c290:	18a4      	adds	r4, r4, r2
    c292:	4666      	mov	r6, ip
    c294:	e687      	b.n	bfa6 <__aeabi_dsub+0x1ca>
    c296:	4650      	mov	r0, sl
    c298:	4320      	orrs	r0, r4
    c29a:	1e44      	subs	r4, r0, #1
    c29c:	41a0      	sbcs	r0, r4
    c29e:	2400      	movs	r4, #0
    c2a0:	e760      	b.n	c164 <__aeabi_dsub+0x388>
    c2a2:	4e57      	ldr	r6, [pc, #348]	; (c400 <__aeabi_dsub+0x624>)
    c2a4:	45b4      	cmp	ip, r6
    c2a6:	d04e      	beq.n	c346 <__aeabi_dsub+0x56a>
    c2a8:	2680      	movs	r6, #128	; 0x80
    c2aa:	0436      	lsls	r6, r6, #16
    c2ac:	425b      	negs	r3, r3
    c2ae:	4334      	orrs	r4, r6
    c2b0:	2b38      	cmp	r3, #56	; 0x38
    c2b2:	dd00      	ble.n	c2b6 <__aeabi_dsub+0x4da>
    c2b4:	e07f      	b.n	c3b6 <__aeabi_dsub+0x5da>
    c2b6:	2b1f      	cmp	r3, #31
    c2b8:	dd00      	ble.n	c2bc <__aeabi_dsub+0x4e0>
    c2ba:	e08b      	b.n	c3d4 <__aeabi_dsub+0x5f8>
    c2bc:	2620      	movs	r6, #32
    c2be:	0027      	movs	r7, r4
    c2c0:	4650      	mov	r0, sl
    c2c2:	1af6      	subs	r6, r6, r3
    c2c4:	40b7      	lsls	r7, r6
    c2c6:	40d8      	lsrs	r0, r3
    c2c8:	4307      	orrs	r7, r0
    c2ca:	4650      	mov	r0, sl
    c2cc:	40b0      	lsls	r0, r6
    c2ce:	1e46      	subs	r6, r0, #1
    c2d0:	41b0      	sbcs	r0, r6
    c2d2:	4307      	orrs	r7, r0
    c2d4:	40dc      	lsrs	r4, r3
    c2d6:	18bf      	adds	r7, r7, r2
    c2d8:	e7d6      	b.n	c288 <__aeabi_dsub+0x4ac>
    c2da:	000d      	movs	r5, r1
    c2dc:	4315      	orrs	r5, r2
    c2de:	d100      	bne.n	c2e2 <__aeabi_dsub+0x506>
    c2e0:	e602      	b.n	bee8 <__aeabi_dsub+0x10c>
    c2e2:	4650      	mov	r0, sl
    c2e4:	1a80      	subs	r0, r0, r2
    c2e6:	4582      	cmp	sl, r0
    c2e8:	41bf      	sbcs	r7, r7
    c2ea:	1a65      	subs	r5, r4, r1
    c2ec:	427f      	negs	r7, r7
    c2ee:	1bed      	subs	r5, r5, r7
    c2f0:	4684      	mov	ip, r0
    c2f2:	0228      	lsls	r0, r5, #8
    c2f4:	d400      	bmi.n	c2f8 <__aeabi_dsub+0x51c>
    c2f6:	e68d      	b.n	c014 <__aeabi_dsub+0x238>
    c2f8:	4650      	mov	r0, sl
    c2fa:	1a17      	subs	r7, r2, r0
    c2fc:	42ba      	cmp	r2, r7
    c2fe:	4192      	sbcs	r2, r2
    c300:	1b0c      	subs	r4, r1, r4
    c302:	4252      	negs	r2, r2
    c304:	1aa4      	subs	r4, r4, r2
    c306:	4698      	mov	r8, r3
    c308:	e5ee      	b.n	bee8 <__aeabi_dsub+0x10c>
    c30a:	000d      	movs	r5, r1
    c30c:	4315      	orrs	r5, r2
    c30e:	d100      	bne.n	c312 <__aeabi_dsub+0x536>
    c310:	e76b      	b.n	c1ea <__aeabi_dsub+0x40e>
    c312:	4650      	mov	r0, sl
    c314:	0767      	lsls	r7, r4, #29
    c316:	08c0      	lsrs	r0, r0, #3
    c318:	4307      	orrs	r7, r0
    c31a:	2080      	movs	r0, #128	; 0x80
    c31c:	08e4      	lsrs	r4, r4, #3
    c31e:	0300      	lsls	r0, r0, #12
    c320:	4204      	tst	r4, r0
    c322:	d007      	beq.n	c334 <__aeabi_dsub+0x558>
    c324:	08cd      	lsrs	r5, r1, #3
    c326:	4205      	tst	r5, r0
    c328:	d104      	bne.n	c334 <__aeabi_dsub+0x558>
    c32a:	002c      	movs	r4, r5
    c32c:	4698      	mov	r8, r3
    c32e:	08d7      	lsrs	r7, r2, #3
    c330:	0749      	lsls	r1, r1, #29
    c332:	430f      	orrs	r7, r1
    c334:	0f7b      	lsrs	r3, r7, #29
    c336:	00e4      	lsls	r4, r4, #3
    c338:	431c      	orrs	r4, r3
    c33a:	00ff      	lsls	r7, r7, #3
    c33c:	4e30      	ldr	r6, [pc, #192]	; (c400 <__aeabi_dsub+0x624>)
    c33e:	e5d3      	b.n	bee8 <__aeabi_dsub+0x10c>
    c340:	4e2f      	ldr	r6, [pc, #188]	; (c400 <__aeabi_dsub+0x624>)
    c342:	45b4      	cmp	ip, r6
    c344:	d1b4      	bne.n	c2b0 <__aeabi_dsub+0x4d4>
    c346:	000c      	movs	r4, r1
    c348:	0017      	movs	r7, r2
    c34a:	4666      	mov	r6, ip
    c34c:	e5cc      	b.n	bee8 <__aeabi_dsub+0x10c>
    c34e:	2700      	movs	r7, #0
    c350:	2400      	movs	r4, #0
    c352:	e5e8      	b.n	bf26 <__aeabi_dsub+0x14a>
    c354:	2b00      	cmp	r3, #0
    c356:	d039      	beq.n	c3cc <__aeabi_dsub+0x5f0>
    c358:	000b      	movs	r3, r1
    c35a:	4313      	orrs	r3, r2
    c35c:	d100      	bne.n	c360 <__aeabi_dsub+0x584>
    c35e:	e744      	b.n	c1ea <__aeabi_dsub+0x40e>
    c360:	08c0      	lsrs	r0, r0, #3
    c362:	0767      	lsls	r7, r4, #29
    c364:	4307      	orrs	r7, r0
    c366:	2080      	movs	r0, #128	; 0x80
    c368:	08e4      	lsrs	r4, r4, #3
    c36a:	0300      	lsls	r0, r0, #12
    c36c:	4204      	tst	r4, r0
    c36e:	d0e1      	beq.n	c334 <__aeabi_dsub+0x558>
    c370:	08cb      	lsrs	r3, r1, #3
    c372:	4203      	tst	r3, r0
    c374:	d1de      	bne.n	c334 <__aeabi_dsub+0x558>
    c376:	08d7      	lsrs	r7, r2, #3
    c378:	0749      	lsls	r1, r1, #29
    c37a:	430f      	orrs	r7, r1
    c37c:	001c      	movs	r4, r3
    c37e:	e7d9      	b.n	c334 <__aeabi_dsub+0x558>
    c380:	2100      	movs	r1, #0
    c382:	e771      	b.n	c268 <__aeabi_dsub+0x48c>
    c384:	2500      	movs	r5, #0
    c386:	2700      	movs	r7, #0
    c388:	e5e9      	b.n	bf5e <__aeabi_dsub+0x182>
    c38a:	002e      	movs	r6, r5
    c38c:	0027      	movs	r7, r4
    c38e:	3e20      	subs	r6, #32
    c390:	40f7      	lsrs	r7, r6
    c392:	2d20      	cmp	r5, #32
    c394:	d02f      	beq.n	c3f6 <__aeabi_dsub+0x61a>
    c396:	2640      	movs	r6, #64	; 0x40
    c398:	1b75      	subs	r5, r6, r5
    c39a:	40ac      	lsls	r4, r5
    c39c:	4650      	mov	r0, sl
    c39e:	4320      	orrs	r0, r4
    c3a0:	1e44      	subs	r4, r0, #1
    c3a2:	41a0      	sbcs	r0, r4
    c3a4:	2400      	movs	r4, #0
    c3a6:	4338      	orrs	r0, r7
    c3a8:	e6dc      	b.n	c164 <__aeabi_dsub+0x388>
    c3aa:	2480      	movs	r4, #128	; 0x80
    c3ac:	2500      	movs	r5, #0
    c3ae:	0324      	lsls	r4, r4, #12
    c3b0:	4e13      	ldr	r6, [pc, #76]	; (c400 <__aeabi_dsub+0x624>)
    c3b2:	2700      	movs	r7, #0
    c3b4:	e5d3      	b.n	bf5e <__aeabi_dsub+0x182>
    c3b6:	4650      	mov	r0, sl
    c3b8:	4320      	orrs	r0, r4
    c3ba:	0007      	movs	r7, r0
    c3bc:	1e78      	subs	r0, r7, #1
    c3be:	4187      	sbcs	r7, r0
    c3c0:	2400      	movs	r4, #0
    c3c2:	18bf      	adds	r7, r7, r2
    c3c4:	e760      	b.n	c288 <__aeabi_dsub+0x4ac>
    c3c6:	000c      	movs	r4, r1
    c3c8:	0017      	movs	r7, r2
    c3ca:	e58d      	b.n	bee8 <__aeabi_dsub+0x10c>
    c3cc:	000c      	movs	r4, r1
    c3ce:	0017      	movs	r7, r2
    c3d0:	4e0b      	ldr	r6, [pc, #44]	; (c400 <__aeabi_dsub+0x624>)
    c3d2:	e589      	b.n	bee8 <__aeabi_dsub+0x10c>
    c3d4:	001e      	movs	r6, r3
    c3d6:	0027      	movs	r7, r4
    c3d8:	3e20      	subs	r6, #32
    c3da:	40f7      	lsrs	r7, r6
    c3dc:	2b20      	cmp	r3, #32
    c3de:	d00c      	beq.n	c3fa <__aeabi_dsub+0x61e>
    c3e0:	2640      	movs	r6, #64	; 0x40
    c3e2:	1af3      	subs	r3, r6, r3
    c3e4:	409c      	lsls	r4, r3
    c3e6:	4650      	mov	r0, sl
    c3e8:	4320      	orrs	r0, r4
    c3ea:	1e44      	subs	r4, r0, #1
    c3ec:	41a0      	sbcs	r0, r4
    c3ee:	4307      	orrs	r7, r0
    c3f0:	2400      	movs	r4, #0
    c3f2:	18bf      	adds	r7, r7, r2
    c3f4:	e748      	b.n	c288 <__aeabi_dsub+0x4ac>
    c3f6:	2400      	movs	r4, #0
    c3f8:	e7d0      	b.n	c39c <__aeabi_dsub+0x5c0>
    c3fa:	2400      	movs	r4, #0
    c3fc:	e7f3      	b.n	c3e6 <__aeabi_dsub+0x60a>
    c3fe:	46c0      	nop			; (mov r8, r8)
    c400:	000007ff 	.word	0x000007ff
    c404:	ff7fffff 	.word	0xff7fffff

0000c408 <__aeabi_dcmpun>:
    c408:	b570      	push	{r4, r5, r6, lr}
    c40a:	4e0e      	ldr	r6, [pc, #56]	; (c444 <__aeabi_dcmpun+0x3c>)
    c40c:	030d      	lsls	r5, r1, #12
    c40e:	031c      	lsls	r4, r3, #12
    c410:	0049      	lsls	r1, r1, #1
    c412:	005b      	lsls	r3, r3, #1
    c414:	0b2d      	lsrs	r5, r5, #12
    c416:	0d49      	lsrs	r1, r1, #21
    c418:	0b24      	lsrs	r4, r4, #12
    c41a:	0d5b      	lsrs	r3, r3, #21
    c41c:	42b1      	cmp	r1, r6
    c41e:	d004      	beq.n	c42a <__aeabi_dcmpun+0x22>
    c420:	4908      	ldr	r1, [pc, #32]	; (c444 <__aeabi_dcmpun+0x3c>)
    c422:	2000      	movs	r0, #0
    c424:	428b      	cmp	r3, r1
    c426:	d008      	beq.n	c43a <__aeabi_dcmpun+0x32>
    c428:	bd70      	pop	{r4, r5, r6, pc}
    c42a:	4305      	orrs	r5, r0
    c42c:	2001      	movs	r0, #1
    c42e:	2d00      	cmp	r5, #0
    c430:	d1fa      	bne.n	c428 <__aeabi_dcmpun+0x20>
    c432:	4904      	ldr	r1, [pc, #16]	; (c444 <__aeabi_dcmpun+0x3c>)
    c434:	2000      	movs	r0, #0
    c436:	428b      	cmp	r3, r1
    c438:	d1f6      	bne.n	c428 <__aeabi_dcmpun+0x20>
    c43a:	4314      	orrs	r4, r2
    c43c:	0020      	movs	r0, r4
    c43e:	1e44      	subs	r4, r0, #1
    c440:	41a0      	sbcs	r0, r4
    c442:	e7f1      	b.n	c428 <__aeabi_dcmpun+0x20>
    c444:	000007ff 	.word	0x000007ff

0000c448 <__aeabi_d2iz>:
    c448:	b530      	push	{r4, r5, lr}
    c44a:	4d13      	ldr	r5, [pc, #76]	; (c498 <__aeabi_d2iz+0x50>)
    c44c:	030a      	lsls	r2, r1, #12
    c44e:	004b      	lsls	r3, r1, #1
    c450:	0b12      	lsrs	r2, r2, #12
    c452:	0d5b      	lsrs	r3, r3, #21
    c454:	0fc9      	lsrs	r1, r1, #31
    c456:	2400      	movs	r4, #0
    c458:	42ab      	cmp	r3, r5
    c45a:	dd10      	ble.n	c47e <__aeabi_d2iz+0x36>
    c45c:	4c0f      	ldr	r4, [pc, #60]	; (c49c <__aeabi_d2iz+0x54>)
    c45e:	42a3      	cmp	r3, r4
    c460:	dc0f      	bgt.n	c482 <__aeabi_d2iz+0x3a>
    c462:	2480      	movs	r4, #128	; 0x80
    c464:	4d0e      	ldr	r5, [pc, #56]	; (c4a0 <__aeabi_d2iz+0x58>)
    c466:	0364      	lsls	r4, r4, #13
    c468:	4322      	orrs	r2, r4
    c46a:	1aed      	subs	r5, r5, r3
    c46c:	2d1f      	cmp	r5, #31
    c46e:	dd0b      	ble.n	c488 <__aeabi_d2iz+0x40>
    c470:	480c      	ldr	r0, [pc, #48]	; (c4a4 <__aeabi_d2iz+0x5c>)
    c472:	1ac3      	subs	r3, r0, r3
    c474:	40da      	lsrs	r2, r3
    c476:	4254      	negs	r4, r2
    c478:	2900      	cmp	r1, #0
    c47a:	d100      	bne.n	c47e <__aeabi_d2iz+0x36>
    c47c:	0014      	movs	r4, r2
    c47e:	0020      	movs	r0, r4
    c480:	bd30      	pop	{r4, r5, pc}
    c482:	4b09      	ldr	r3, [pc, #36]	; (c4a8 <__aeabi_d2iz+0x60>)
    c484:	18cc      	adds	r4, r1, r3
    c486:	e7fa      	b.n	c47e <__aeabi_d2iz+0x36>
    c488:	4c08      	ldr	r4, [pc, #32]	; (c4ac <__aeabi_d2iz+0x64>)
    c48a:	40e8      	lsrs	r0, r5
    c48c:	46a4      	mov	ip, r4
    c48e:	4463      	add	r3, ip
    c490:	409a      	lsls	r2, r3
    c492:	4302      	orrs	r2, r0
    c494:	e7ef      	b.n	c476 <__aeabi_d2iz+0x2e>
    c496:	46c0      	nop			; (mov r8, r8)
    c498:	000003fe 	.word	0x000003fe
    c49c:	0000041d 	.word	0x0000041d
    c4a0:	00000433 	.word	0x00000433
    c4a4:	00000413 	.word	0x00000413
    c4a8:	7fffffff 	.word	0x7fffffff
    c4ac:	fffffbed 	.word	0xfffffbed

0000c4b0 <__aeabi_i2d>:
    c4b0:	b570      	push	{r4, r5, r6, lr}
    c4b2:	2800      	cmp	r0, #0
    c4b4:	d030      	beq.n	c518 <__aeabi_i2d+0x68>
    c4b6:	17c3      	asrs	r3, r0, #31
    c4b8:	18c4      	adds	r4, r0, r3
    c4ba:	405c      	eors	r4, r3
    c4bc:	0fc5      	lsrs	r5, r0, #31
    c4be:	0020      	movs	r0, r4
    c4c0:	f000 f94c 	bl	c75c <__clzsi2>
    c4c4:	4b17      	ldr	r3, [pc, #92]	; (c524 <__aeabi_i2d+0x74>)
    c4c6:	4a18      	ldr	r2, [pc, #96]	; (c528 <__aeabi_i2d+0x78>)
    c4c8:	1a1b      	subs	r3, r3, r0
    c4ca:	1ad2      	subs	r2, r2, r3
    c4cc:	2a1f      	cmp	r2, #31
    c4ce:	dd18      	ble.n	c502 <__aeabi_i2d+0x52>
    c4d0:	4a16      	ldr	r2, [pc, #88]	; (c52c <__aeabi_i2d+0x7c>)
    c4d2:	1ad2      	subs	r2, r2, r3
    c4d4:	4094      	lsls	r4, r2
    c4d6:	2200      	movs	r2, #0
    c4d8:	0324      	lsls	r4, r4, #12
    c4da:	055b      	lsls	r3, r3, #21
    c4dc:	0b24      	lsrs	r4, r4, #12
    c4de:	0d5b      	lsrs	r3, r3, #21
    c4e0:	2100      	movs	r1, #0
    c4e2:	0010      	movs	r0, r2
    c4e4:	0324      	lsls	r4, r4, #12
    c4e6:	0d0a      	lsrs	r2, r1, #20
    c4e8:	0b24      	lsrs	r4, r4, #12
    c4ea:	0512      	lsls	r2, r2, #20
    c4ec:	4322      	orrs	r2, r4
    c4ee:	4c10      	ldr	r4, [pc, #64]	; (c530 <__aeabi_i2d+0x80>)
    c4f0:	051b      	lsls	r3, r3, #20
    c4f2:	4022      	ands	r2, r4
    c4f4:	4313      	orrs	r3, r2
    c4f6:	005b      	lsls	r3, r3, #1
    c4f8:	07ed      	lsls	r5, r5, #31
    c4fa:	085b      	lsrs	r3, r3, #1
    c4fc:	432b      	orrs	r3, r5
    c4fe:	0019      	movs	r1, r3
    c500:	bd70      	pop	{r4, r5, r6, pc}
    c502:	0021      	movs	r1, r4
    c504:	4091      	lsls	r1, r2
    c506:	000a      	movs	r2, r1
    c508:	210b      	movs	r1, #11
    c50a:	1a08      	subs	r0, r1, r0
    c50c:	40c4      	lsrs	r4, r0
    c50e:	055b      	lsls	r3, r3, #21
    c510:	0324      	lsls	r4, r4, #12
    c512:	0b24      	lsrs	r4, r4, #12
    c514:	0d5b      	lsrs	r3, r3, #21
    c516:	e7e3      	b.n	c4e0 <__aeabi_i2d+0x30>
    c518:	2500      	movs	r5, #0
    c51a:	2300      	movs	r3, #0
    c51c:	2400      	movs	r4, #0
    c51e:	2200      	movs	r2, #0
    c520:	e7de      	b.n	c4e0 <__aeabi_i2d+0x30>
    c522:	46c0      	nop			; (mov r8, r8)
    c524:	0000041e 	.word	0x0000041e
    c528:	00000433 	.word	0x00000433
    c52c:	00000413 	.word	0x00000413
    c530:	800fffff 	.word	0x800fffff

0000c534 <__aeabi_ui2d>:
    c534:	b510      	push	{r4, lr}
    c536:	1e04      	subs	r4, r0, #0
    c538:	d028      	beq.n	c58c <__aeabi_ui2d+0x58>
    c53a:	f000 f90f 	bl	c75c <__clzsi2>
    c53e:	4b15      	ldr	r3, [pc, #84]	; (c594 <__aeabi_ui2d+0x60>)
    c540:	4a15      	ldr	r2, [pc, #84]	; (c598 <__aeabi_ui2d+0x64>)
    c542:	1a1b      	subs	r3, r3, r0
    c544:	1ad2      	subs	r2, r2, r3
    c546:	2a1f      	cmp	r2, #31
    c548:	dd15      	ble.n	c576 <__aeabi_ui2d+0x42>
    c54a:	4a14      	ldr	r2, [pc, #80]	; (c59c <__aeabi_ui2d+0x68>)
    c54c:	1ad2      	subs	r2, r2, r3
    c54e:	4094      	lsls	r4, r2
    c550:	2200      	movs	r2, #0
    c552:	0324      	lsls	r4, r4, #12
    c554:	055b      	lsls	r3, r3, #21
    c556:	0b24      	lsrs	r4, r4, #12
    c558:	0d5b      	lsrs	r3, r3, #21
    c55a:	2100      	movs	r1, #0
    c55c:	0010      	movs	r0, r2
    c55e:	0324      	lsls	r4, r4, #12
    c560:	0d0a      	lsrs	r2, r1, #20
    c562:	0b24      	lsrs	r4, r4, #12
    c564:	0512      	lsls	r2, r2, #20
    c566:	4322      	orrs	r2, r4
    c568:	4c0d      	ldr	r4, [pc, #52]	; (c5a0 <__aeabi_ui2d+0x6c>)
    c56a:	051b      	lsls	r3, r3, #20
    c56c:	4022      	ands	r2, r4
    c56e:	4313      	orrs	r3, r2
    c570:	005b      	lsls	r3, r3, #1
    c572:	0859      	lsrs	r1, r3, #1
    c574:	bd10      	pop	{r4, pc}
    c576:	0021      	movs	r1, r4
    c578:	4091      	lsls	r1, r2
    c57a:	000a      	movs	r2, r1
    c57c:	210b      	movs	r1, #11
    c57e:	1a08      	subs	r0, r1, r0
    c580:	40c4      	lsrs	r4, r0
    c582:	055b      	lsls	r3, r3, #21
    c584:	0324      	lsls	r4, r4, #12
    c586:	0b24      	lsrs	r4, r4, #12
    c588:	0d5b      	lsrs	r3, r3, #21
    c58a:	e7e6      	b.n	c55a <__aeabi_ui2d+0x26>
    c58c:	2300      	movs	r3, #0
    c58e:	2400      	movs	r4, #0
    c590:	2200      	movs	r2, #0
    c592:	e7e2      	b.n	c55a <__aeabi_ui2d+0x26>
    c594:	0000041e 	.word	0x0000041e
    c598:	00000433 	.word	0x00000433
    c59c:	00000413 	.word	0x00000413
    c5a0:	800fffff 	.word	0x800fffff

0000c5a4 <__aeabi_f2d>:
    c5a4:	0041      	lsls	r1, r0, #1
    c5a6:	0e09      	lsrs	r1, r1, #24
    c5a8:	1c4b      	adds	r3, r1, #1
    c5aa:	b570      	push	{r4, r5, r6, lr}
    c5ac:	b2db      	uxtb	r3, r3
    c5ae:	0246      	lsls	r6, r0, #9
    c5b0:	0a75      	lsrs	r5, r6, #9
    c5b2:	0fc4      	lsrs	r4, r0, #31
    c5b4:	2b01      	cmp	r3, #1
    c5b6:	dd14      	ble.n	c5e2 <__aeabi_f2d+0x3e>
    c5b8:	23e0      	movs	r3, #224	; 0xe0
    c5ba:	009b      	lsls	r3, r3, #2
    c5bc:	076d      	lsls	r5, r5, #29
    c5be:	0b36      	lsrs	r6, r6, #12
    c5c0:	18cb      	adds	r3, r1, r3
    c5c2:	2100      	movs	r1, #0
    c5c4:	0d0a      	lsrs	r2, r1, #20
    c5c6:	0028      	movs	r0, r5
    c5c8:	0512      	lsls	r2, r2, #20
    c5ca:	4d1c      	ldr	r5, [pc, #112]	; (c63c <__aeabi_f2d+0x98>)
    c5cc:	4332      	orrs	r2, r6
    c5ce:	055b      	lsls	r3, r3, #21
    c5d0:	402a      	ands	r2, r5
    c5d2:	085b      	lsrs	r3, r3, #1
    c5d4:	4313      	orrs	r3, r2
    c5d6:	005b      	lsls	r3, r3, #1
    c5d8:	07e4      	lsls	r4, r4, #31
    c5da:	085b      	lsrs	r3, r3, #1
    c5dc:	4323      	orrs	r3, r4
    c5de:	0019      	movs	r1, r3
    c5e0:	bd70      	pop	{r4, r5, r6, pc}
    c5e2:	2900      	cmp	r1, #0
    c5e4:	d114      	bne.n	c610 <__aeabi_f2d+0x6c>
    c5e6:	2d00      	cmp	r5, #0
    c5e8:	d01e      	beq.n	c628 <__aeabi_f2d+0x84>
    c5ea:	0028      	movs	r0, r5
    c5ec:	f000 f8b6 	bl	c75c <__clzsi2>
    c5f0:	280a      	cmp	r0, #10
    c5f2:	dc1c      	bgt.n	c62e <__aeabi_f2d+0x8a>
    c5f4:	230b      	movs	r3, #11
    c5f6:	002a      	movs	r2, r5
    c5f8:	1a1b      	subs	r3, r3, r0
    c5fa:	40da      	lsrs	r2, r3
    c5fc:	0003      	movs	r3, r0
    c5fe:	3315      	adds	r3, #21
    c600:	409d      	lsls	r5, r3
    c602:	4b0f      	ldr	r3, [pc, #60]	; (c640 <__aeabi_f2d+0x9c>)
    c604:	0312      	lsls	r2, r2, #12
    c606:	1a1b      	subs	r3, r3, r0
    c608:	055b      	lsls	r3, r3, #21
    c60a:	0b16      	lsrs	r6, r2, #12
    c60c:	0d5b      	lsrs	r3, r3, #21
    c60e:	e7d8      	b.n	c5c2 <__aeabi_f2d+0x1e>
    c610:	2d00      	cmp	r5, #0
    c612:	d006      	beq.n	c622 <__aeabi_f2d+0x7e>
    c614:	0b32      	lsrs	r2, r6, #12
    c616:	2680      	movs	r6, #128	; 0x80
    c618:	0336      	lsls	r6, r6, #12
    c61a:	076d      	lsls	r5, r5, #29
    c61c:	4316      	orrs	r6, r2
    c61e:	4b09      	ldr	r3, [pc, #36]	; (c644 <__aeabi_f2d+0xa0>)
    c620:	e7cf      	b.n	c5c2 <__aeabi_f2d+0x1e>
    c622:	4b08      	ldr	r3, [pc, #32]	; (c644 <__aeabi_f2d+0xa0>)
    c624:	2600      	movs	r6, #0
    c626:	e7cc      	b.n	c5c2 <__aeabi_f2d+0x1e>
    c628:	2300      	movs	r3, #0
    c62a:	2600      	movs	r6, #0
    c62c:	e7c9      	b.n	c5c2 <__aeabi_f2d+0x1e>
    c62e:	0003      	movs	r3, r0
    c630:	002a      	movs	r2, r5
    c632:	3b0b      	subs	r3, #11
    c634:	409a      	lsls	r2, r3
    c636:	2500      	movs	r5, #0
    c638:	e7e3      	b.n	c602 <__aeabi_f2d+0x5e>
    c63a:	46c0      	nop			; (mov r8, r8)
    c63c:	800fffff 	.word	0x800fffff
    c640:	00000389 	.word	0x00000389
    c644:	000007ff 	.word	0x000007ff

0000c648 <__aeabi_d2f>:
    c648:	b5f0      	push	{r4, r5, r6, r7, lr}
    c64a:	004c      	lsls	r4, r1, #1
    c64c:	0d64      	lsrs	r4, r4, #21
    c64e:	030b      	lsls	r3, r1, #12
    c650:	1c62      	adds	r2, r4, #1
    c652:	0f45      	lsrs	r5, r0, #29
    c654:	0a5b      	lsrs	r3, r3, #9
    c656:	0552      	lsls	r2, r2, #21
    c658:	432b      	orrs	r3, r5
    c65a:	0fc9      	lsrs	r1, r1, #31
    c65c:	00c5      	lsls	r5, r0, #3
    c65e:	0d52      	lsrs	r2, r2, #21
    c660:	2a01      	cmp	r2, #1
    c662:	dd28      	ble.n	c6b6 <__aeabi_d2f+0x6e>
    c664:	4a3a      	ldr	r2, [pc, #232]	; (c750 <__aeabi_d2f+0x108>)
    c666:	18a6      	adds	r6, r4, r2
    c668:	2efe      	cmp	r6, #254	; 0xfe
    c66a:	dc1b      	bgt.n	c6a4 <__aeabi_d2f+0x5c>
    c66c:	2e00      	cmp	r6, #0
    c66e:	dd3e      	ble.n	c6ee <__aeabi_d2f+0xa6>
    c670:	0180      	lsls	r0, r0, #6
    c672:	0002      	movs	r2, r0
    c674:	1e50      	subs	r0, r2, #1
    c676:	4182      	sbcs	r2, r0
    c678:	0f6d      	lsrs	r5, r5, #29
    c67a:	432a      	orrs	r2, r5
    c67c:	00db      	lsls	r3, r3, #3
    c67e:	4313      	orrs	r3, r2
    c680:	075a      	lsls	r2, r3, #29
    c682:	d004      	beq.n	c68e <__aeabi_d2f+0x46>
    c684:	220f      	movs	r2, #15
    c686:	401a      	ands	r2, r3
    c688:	2a04      	cmp	r2, #4
    c68a:	d000      	beq.n	c68e <__aeabi_d2f+0x46>
    c68c:	3304      	adds	r3, #4
    c68e:	2280      	movs	r2, #128	; 0x80
    c690:	04d2      	lsls	r2, r2, #19
    c692:	401a      	ands	r2, r3
    c694:	d05a      	beq.n	c74c <__aeabi_d2f+0x104>
    c696:	3601      	adds	r6, #1
    c698:	2eff      	cmp	r6, #255	; 0xff
    c69a:	d003      	beq.n	c6a4 <__aeabi_d2f+0x5c>
    c69c:	019b      	lsls	r3, r3, #6
    c69e:	0a5b      	lsrs	r3, r3, #9
    c6a0:	b2f4      	uxtb	r4, r6
    c6a2:	e001      	b.n	c6a8 <__aeabi_d2f+0x60>
    c6a4:	24ff      	movs	r4, #255	; 0xff
    c6a6:	2300      	movs	r3, #0
    c6a8:	0258      	lsls	r0, r3, #9
    c6aa:	05e4      	lsls	r4, r4, #23
    c6ac:	0a40      	lsrs	r0, r0, #9
    c6ae:	07c9      	lsls	r1, r1, #31
    c6b0:	4320      	orrs	r0, r4
    c6b2:	4308      	orrs	r0, r1
    c6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6b6:	2c00      	cmp	r4, #0
    c6b8:	d007      	beq.n	c6ca <__aeabi_d2f+0x82>
    c6ba:	431d      	orrs	r5, r3
    c6bc:	d0f2      	beq.n	c6a4 <__aeabi_d2f+0x5c>
    c6be:	2080      	movs	r0, #128	; 0x80
    c6c0:	00db      	lsls	r3, r3, #3
    c6c2:	0480      	lsls	r0, r0, #18
    c6c4:	4303      	orrs	r3, r0
    c6c6:	26ff      	movs	r6, #255	; 0xff
    c6c8:	e7da      	b.n	c680 <__aeabi_d2f+0x38>
    c6ca:	432b      	orrs	r3, r5
    c6cc:	d003      	beq.n	c6d6 <__aeabi_d2f+0x8e>
    c6ce:	2305      	movs	r3, #5
    c6d0:	08db      	lsrs	r3, r3, #3
    c6d2:	2cff      	cmp	r4, #255	; 0xff
    c6d4:	d003      	beq.n	c6de <__aeabi_d2f+0x96>
    c6d6:	025b      	lsls	r3, r3, #9
    c6d8:	0a5b      	lsrs	r3, r3, #9
    c6da:	b2e4      	uxtb	r4, r4
    c6dc:	e7e4      	b.n	c6a8 <__aeabi_d2f+0x60>
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d032      	beq.n	c748 <__aeabi_d2f+0x100>
    c6e2:	2080      	movs	r0, #128	; 0x80
    c6e4:	03c0      	lsls	r0, r0, #15
    c6e6:	4303      	orrs	r3, r0
    c6e8:	025b      	lsls	r3, r3, #9
    c6ea:	0a5b      	lsrs	r3, r3, #9
    c6ec:	e7dc      	b.n	c6a8 <__aeabi_d2f+0x60>
    c6ee:	0032      	movs	r2, r6
    c6f0:	3217      	adds	r2, #23
    c6f2:	db14      	blt.n	c71e <__aeabi_d2f+0xd6>
    c6f4:	2280      	movs	r2, #128	; 0x80
    c6f6:	271e      	movs	r7, #30
    c6f8:	0412      	lsls	r2, r2, #16
    c6fa:	4313      	orrs	r3, r2
    c6fc:	1bbf      	subs	r7, r7, r6
    c6fe:	2f1f      	cmp	r7, #31
    c700:	dc0f      	bgt.n	c722 <__aeabi_d2f+0xda>
    c702:	4a14      	ldr	r2, [pc, #80]	; (c754 <__aeabi_d2f+0x10c>)
    c704:	4694      	mov	ip, r2
    c706:	4464      	add	r4, ip
    c708:	002a      	movs	r2, r5
    c70a:	40a5      	lsls	r5, r4
    c70c:	002e      	movs	r6, r5
    c70e:	40a3      	lsls	r3, r4
    c710:	1e75      	subs	r5, r6, #1
    c712:	41ae      	sbcs	r6, r5
    c714:	40fa      	lsrs	r2, r7
    c716:	4333      	orrs	r3, r6
    c718:	4313      	orrs	r3, r2
    c71a:	2600      	movs	r6, #0
    c71c:	e7b0      	b.n	c680 <__aeabi_d2f+0x38>
    c71e:	2400      	movs	r4, #0
    c720:	e7d5      	b.n	c6ce <__aeabi_d2f+0x86>
    c722:	2202      	movs	r2, #2
    c724:	4252      	negs	r2, r2
    c726:	1b96      	subs	r6, r2, r6
    c728:	001a      	movs	r2, r3
    c72a:	40f2      	lsrs	r2, r6
    c72c:	2f20      	cmp	r7, #32
    c72e:	d009      	beq.n	c744 <__aeabi_d2f+0xfc>
    c730:	4809      	ldr	r0, [pc, #36]	; (c758 <__aeabi_d2f+0x110>)
    c732:	4684      	mov	ip, r0
    c734:	4464      	add	r4, ip
    c736:	40a3      	lsls	r3, r4
    c738:	432b      	orrs	r3, r5
    c73a:	1e5d      	subs	r5, r3, #1
    c73c:	41ab      	sbcs	r3, r5
    c73e:	2600      	movs	r6, #0
    c740:	4313      	orrs	r3, r2
    c742:	e79d      	b.n	c680 <__aeabi_d2f+0x38>
    c744:	2300      	movs	r3, #0
    c746:	e7f7      	b.n	c738 <__aeabi_d2f+0xf0>
    c748:	2300      	movs	r3, #0
    c74a:	e7ad      	b.n	c6a8 <__aeabi_d2f+0x60>
    c74c:	0034      	movs	r4, r6
    c74e:	e7bf      	b.n	c6d0 <__aeabi_d2f+0x88>
    c750:	fffffc80 	.word	0xfffffc80
    c754:	fffffc82 	.word	0xfffffc82
    c758:	fffffca2 	.word	0xfffffca2

0000c75c <__clzsi2>:
    c75c:	211c      	movs	r1, #28
    c75e:	2301      	movs	r3, #1
    c760:	041b      	lsls	r3, r3, #16
    c762:	4298      	cmp	r0, r3
    c764:	d301      	bcc.n	c76a <__clzsi2+0xe>
    c766:	0c00      	lsrs	r0, r0, #16
    c768:	3910      	subs	r1, #16
    c76a:	0a1b      	lsrs	r3, r3, #8
    c76c:	4298      	cmp	r0, r3
    c76e:	d301      	bcc.n	c774 <__clzsi2+0x18>
    c770:	0a00      	lsrs	r0, r0, #8
    c772:	3908      	subs	r1, #8
    c774:	091b      	lsrs	r3, r3, #4
    c776:	4298      	cmp	r0, r3
    c778:	d301      	bcc.n	c77e <__clzsi2+0x22>
    c77a:	0900      	lsrs	r0, r0, #4
    c77c:	3904      	subs	r1, #4
    c77e:	a202      	add	r2, pc, #8	; (adr r2, c788 <__clzsi2+0x2c>)
    c780:	5c10      	ldrb	r0, [r2, r0]
    c782:	1840      	adds	r0, r0, r1
    c784:	4770      	bx	lr
    c786:	46c0      	nop			; (mov r8, r8)
    c788:	02020304 	.word	0x02020304
    c78c:	01010101 	.word	0x01010101
	...

0000c798 <__assert_func>:
    c798:	b530      	push	{r4, r5, lr}
    c79a:	001c      	movs	r4, r3
    c79c:	4b09      	ldr	r3, [pc, #36]	; (c7c4 <__assert_func+0x2c>)
    c79e:	0005      	movs	r5, r0
    c7a0:	681b      	ldr	r3, [r3, #0]
    c7a2:	b085      	sub	sp, #20
    c7a4:	68d8      	ldr	r0, [r3, #12]
    c7a6:	4b08      	ldr	r3, [pc, #32]	; (c7c8 <__assert_func+0x30>)
    c7a8:	2a00      	cmp	r2, #0
    c7aa:	d101      	bne.n	c7b0 <__assert_func+0x18>
    c7ac:	4b07      	ldr	r3, [pc, #28]	; (c7cc <__assert_func+0x34>)
    c7ae:	001a      	movs	r2, r3
    c7b0:	9202      	str	r2, [sp, #8]
    c7b2:	9301      	str	r3, [sp, #4]
    c7b4:	9100      	str	r1, [sp, #0]
    c7b6:	002b      	movs	r3, r5
    c7b8:	0022      	movs	r2, r4
    c7ba:	4905      	ldr	r1, [pc, #20]	; (c7d0 <__assert_func+0x38>)
    c7bc:	f000 f81e 	bl	c7fc <fiprintf>
    c7c0:	f001 febc 	bl	e53c <abort>
    c7c4:	200000b4 	.word	0x200000b4
    c7c8:	000128e0 	.word	0x000128e0
    c7cc:	0001113e 	.word	0x0001113e
    c7d0:	000128ed 	.word	0x000128ed

0000c7d4 <__cxa_atexit>:
    c7d4:	b570      	push	{r4, r5, r6, lr}
    c7d6:	4c05      	ldr	r4, [pc, #20]	; (c7ec <__cxa_atexit+0x18>)
    c7d8:	0005      	movs	r5, r0
    c7da:	0013      	movs	r3, r2
    c7dc:	1e20      	subs	r0, r4, #0
    c7de:	d004      	beq.n	c7ea <__cxa_atexit+0x16>
    c7e0:	000a      	movs	r2, r1
    c7e2:	2002      	movs	r0, #2
    c7e4:	0029      	movs	r1, r5
    c7e6:	e000      	b.n	c7ea <__cxa_atexit+0x16>
    c7e8:	bf00      	nop
    c7ea:	bd70      	pop	{r4, r5, r6, pc}
    c7ec:	00000000 	.word	0x00000000

0000c7f0 <__errno>:
    c7f0:	4b01      	ldr	r3, [pc, #4]	; (c7f8 <__errno+0x8>)
    c7f2:	6818      	ldr	r0, [r3, #0]
    c7f4:	4770      	bx	lr
    c7f6:	46c0      	nop			; (mov r8, r8)
    c7f8:	200000b4 	.word	0x200000b4

0000c7fc <fiprintf>:
    c7fc:	b40e      	push	{r1, r2, r3}
    c7fe:	b503      	push	{r0, r1, lr}
    c800:	0001      	movs	r1, r0
    c802:	ab03      	add	r3, sp, #12
    c804:	4804      	ldr	r0, [pc, #16]	; (c818 <fiprintf+0x1c>)
    c806:	cb04      	ldmia	r3!, {r2}
    c808:	6800      	ldr	r0, [r0, #0]
    c80a:	9301      	str	r3, [sp, #4]
    c80c:	f000 fc8a 	bl	d124 <_vfiprintf_r>
    c810:	b002      	add	sp, #8
    c812:	bc08      	pop	{r3}
    c814:	b003      	add	sp, #12
    c816:	4718      	bx	r3
    c818:	200000b4 	.word	0x200000b4

0000c81c <gmtime>:
    c81c:	4b07      	ldr	r3, [pc, #28]	; (c83c <gmtime+0x20>)
    c81e:	b570      	push	{r4, r5, r6, lr}
    c820:	681c      	ldr	r4, [r3, #0]
    c822:	0005      	movs	r5, r0
    c824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c826:	2b00      	cmp	r3, #0
    c828:	d103      	bne.n	c832 <gmtime+0x16>
    c82a:	2024      	movs	r0, #36	; 0x24
    c82c:	f000 f8fc 	bl	ca28 <malloc>
    c830:	63e0      	str	r0, [r4, #60]	; 0x3c
    c832:	0028      	movs	r0, r5
    c834:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    c836:	f000 f803 	bl	c840 <gmtime_r>
    c83a:	bd70      	pop	{r4, r5, r6, pc}
    c83c:	200000b4 	.word	0x200000b4

0000c840 <gmtime_r>:
    c840:	b5f0      	push	{r4, r5, r6, r7, lr}
    c842:	6805      	ldr	r5, [r0, #0]
    c844:	b085      	sub	sp, #20
    c846:	000c      	movs	r4, r1
    c848:	0028      	movs	r0, r5
    c84a:	4952      	ldr	r1, [pc, #328]	; (c994 <gmtime_r+0x154>)
    c84c:	f7fd f85c 	bl	9908 <__divsi3>
    c850:	4950      	ldr	r1, [pc, #320]	; (c994 <gmtime_r+0x154>)
    c852:	0006      	movs	r6, r0
    c854:	0028      	movs	r0, r5
    c856:	f7fd f93d 	bl	9ad4 <__aeabi_idivmod>
    c85a:	1e0f      	subs	r7, r1, #0
    c85c:	da00      	bge.n	c860 <gmtime_r+0x20>
    c85e:	e080      	b.n	c962 <gmtime_r+0x122>
    c860:	4b4d      	ldr	r3, [pc, #308]	; (c998 <gmtime_r+0x158>)
    c862:	21e1      	movs	r1, #225	; 0xe1
    c864:	0038      	movs	r0, r7
    c866:	0109      	lsls	r1, r1, #4
    c868:	18f5      	adds	r5, r6, r3
    c86a:	f7fd f84d 	bl	9908 <__divsi3>
    c86e:	21e1      	movs	r1, #225	; 0xe1
    c870:	60a0      	str	r0, [r4, #8]
    c872:	0109      	lsls	r1, r1, #4
    c874:	0038      	movs	r0, r7
    c876:	f7fd f92d 	bl	9ad4 <__aeabi_idivmod>
    c87a:	000e      	movs	r6, r1
    c87c:	213c      	movs	r1, #60	; 0x3c
    c87e:	0030      	movs	r0, r6
    c880:	f7fd f842 	bl	9908 <__divsi3>
    c884:	213c      	movs	r1, #60	; 0x3c
    c886:	6060      	str	r0, [r4, #4]
    c888:	0030      	movs	r0, r6
    c88a:	f7fd f923 	bl	9ad4 <__aeabi_idivmod>
    c88e:	1ce8      	adds	r0, r5, #3
    c890:	6021      	str	r1, [r4, #0]
    c892:	2107      	movs	r1, #7
    c894:	f7fd f91e 	bl	9ad4 <__aeabi_idivmod>
    c898:	0028      	movs	r0, r5
    c89a:	61a1      	str	r1, [r4, #24]
    c89c:	493f      	ldr	r1, [pc, #252]	; (c99c <gmtime_r+0x15c>)
    c89e:	f7fd f833 	bl	9908 <__divsi3>
    c8a2:	4e3f      	ldr	r6, [pc, #252]	; (c9a0 <gmtime_r+0x160>)
    c8a4:	493f      	ldr	r1, [pc, #252]	; (c9a4 <gmtime_r+0x164>)
    c8a6:	4346      	muls	r6, r0
    c8a8:	1976      	adds	r6, r6, r5
    c8aa:	0007      	movs	r7, r0
    c8ac:	0030      	movs	r0, r6
    c8ae:	f7fc ffa1 	bl	97f4 <__udivsi3>
    c8b2:	493d      	ldr	r1, [pc, #244]	; (c9a8 <gmtime_r+0x168>)
    c8b4:	1985      	adds	r5, r0, r6
    c8b6:	0030      	movs	r0, r6
    c8b8:	f7fc ff9c 	bl	97f4 <__udivsi3>
    c8bc:	493b      	ldr	r1, [pc, #236]	; (c9ac <gmtime_r+0x16c>)
    c8be:	1a2d      	subs	r5, r5, r0
    c8c0:	0030      	movs	r0, r6
    c8c2:	f7fc ff97 	bl	97f4 <__udivsi3>
    c8c6:	216e      	movs	r1, #110	; 0x6e
    c8c8:	1a2d      	subs	r5, r5, r0
    c8ca:	31ff      	adds	r1, #255	; 0xff
    c8cc:	0028      	movs	r0, r5
    c8ce:	f7fc ff91 	bl	97f4 <__udivsi3>
    c8d2:	4937      	ldr	r1, [pc, #220]	; (c9b0 <gmtime_r+0x170>)
    c8d4:	9001      	str	r0, [sp, #4]
    c8d6:	0028      	movs	r0, r5
    c8d8:	f7fc ff8c 	bl	97f4 <__udivsi3>
    c8dc:	4932      	ldr	r1, [pc, #200]	; (c9a8 <gmtime_r+0x168>)
    c8de:	1986      	adds	r6, r0, r6
    c8e0:	0028      	movs	r0, r5
    c8e2:	f7fc ff87 	bl	97f4 <__udivsi3>
    c8e6:	216e      	movs	r1, #110	; 0x6e
    c8e8:	9b01      	ldr	r3, [sp, #4]
    c8ea:	31ff      	adds	r1, #255	; 0xff
    c8ec:	4359      	muls	r1, r3
    c8ee:	1a36      	subs	r6, r6, r0
    c8f0:	1a73      	subs	r3, r6, r1
    c8f2:	0018      	movs	r0, r3
    c8f4:	2605      	movs	r6, #5
    c8f6:	4370      	muls	r0, r6
    c8f8:	2199      	movs	r1, #153	; 0x99
    c8fa:	3002      	adds	r0, #2
    c8fc:	9302      	str	r3, [sp, #8]
    c8fe:	f7fc ff79 	bl	97f4 <__udivsi3>
    c902:	0005      	movs	r5, r0
    c904:	2099      	movs	r0, #153	; 0x99
    c906:	4368      	muls	r0, r5
    c908:	9b02      	ldr	r3, [sp, #8]
    c90a:	3002      	adds	r0, #2
    c90c:	3301      	adds	r3, #1
    c90e:	0031      	movs	r1, r6
    c910:	9303      	str	r3, [sp, #12]
    c912:	f7fc ff6f 	bl	97f4 <__udivsi3>
    c916:	9b03      	ldr	r3, [sp, #12]
    c918:	1a1b      	subs	r3, r3, r0
    c91a:	9303      	str	r3, [sp, #12]
    c91c:	2302      	movs	r3, #2
    c91e:	2d09      	cmp	r5, #9
    c920:	d900      	bls.n	c924 <gmtime_r+0xe4>
    c922:	3b0c      	subs	r3, #12
    c924:	195d      	adds	r5, r3, r5
    c926:	23c8      	movs	r3, #200	; 0xc8
    c928:	005b      	lsls	r3, r3, #1
    c92a:	435f      	muls	r7, r3
    c92c:	9b01      	ldr	r3, [sp, #4]
    c92e:	2601      	movs	r6, #1
    c930:	18ff      	adds	r7, r7, r3
    c932:	2300      	movs	r3, #0
    c934:	42ae      	cmp	r6, r5
    c936:	415b      	adcs	r3, r3
    c938:	18ff      	adds	r7, r7, r3
    c93a:	2332      	movs	r3, #50	; 0x32
    c93c:	9a02      	ldr	r2, [sp, #8]
    c93e:	33ff      	adds	r3, #255	; 0xff
    c940:	429a      	cmp	r2, r3
    c942:	d912      	bls.n	c96a <gmtime_r+0x12a>
    c944:	0016      	movs	r6, r2
    c946:	3e33      	subs	r6, #51	; 0x33
    c948:	3eff      	subs	r6, #255	; 0xff
    c94a:	4b1a      	ldr	r3, [pc, #104]	; (c9b4 <gmtime_r+0x174>)
    c94c:	0020      	movs	r0, r4
    c94e:	18ff      	adds	r7, r7, r3
    c950:	9b03      	ldr	r3, [sp, #12]
    c952:	61e6      	str	r6, [r4, #28]
    c954:	60e3      	str	r3, [r4, #12]
    c956:	2300      	movs	r3, #0
    c958:	6167      	str	r7, [r4, #20]
    c95a:	6125      	str	r5, [r4, #16]
    c95c:	6223      	str	r3, [r4, #32]
    c95e:	b005      	add	sp, #20
    c960:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c962:	4b0c      	ldr	r3, [pc, #48]	; (c994 <gmtime_r+0x154>)
    c964:	18cf      	adds	r7, r1, r3
    c966:	4b14      	ldr	r3, [pc, #80]	; (c9b8 <gmtime_r+0x178>)
    c968:	e77b      	b.n	c862 <gmtime_r+0x22>
    c96a:	9b01      	ldr	r3, [sp, #4]
    c96c:	079b      	lsls	r3, r3, #30
    c96e:	d105      	bne.n	c97c <gmtime_r+0x13c>
    c970:	2164      	movs	r1, #100	; 0x64
    c972:	9801      	ldr	r0, [sp, #4]
    c974:	f7fc ffc4 	bl	9900 <__aeabi_uidivmod>
    c978:	2900      	cmp	r1, #0
    c97a:	d106      	bne.n	c98a <gmtime_r+0x14a>
    c97c:	21c8      	movs	r1, #200	; 0xc8
    c97e:	9801      	ldr	r0, [sp, #4]
    c980:	0049      	lsls	r1, r1, #1
    c982:	f7fc ffbd 	bl	9900 <__aeabi_uidivmod>
    c986:	424e      	negs	r6, r1
    c988:	414e      	adcs	r6, r1
    c98a:	9802      	ldr	r0, [sp, #8]
    c98c:	303b      	adds	r0, #59	; 0x3b
    c98e:	1986      	adds	r6, r0, r6
    c990:	e7db      	b.n	c94a <gmtime_r+0x10a>
    c992:	46c0      	nop			; (mov r8, r8)
    c994:	00015180 	.word	0x00015180
    c998:	000afa6c 	.word	0x000afa6c
    c99c:	00023ab1 	.word	0x00023ab1
    c9a0:	fffdc54f 	.word	0xfffdc54f
    c9a4:	00008eac 	.word	0x00008eac
    c9a8:	000005b4 	.word	0x000005b4
    c9ac:	00023ab0 	.word	0x00023ab0
    c9b0:	00008e94 	.word	0x00008e94
    c9b4:	fffff894 	.word	0xfffff894
    c9b8:	000afa6b 	.word	0x000afa6b

0000c9bc <__libc_init_array>:
    c9bc:	b570      	push	{r4, r5, r6, lr}
    c9be:	2600      	movs	r6, #0
    c9c0:	4d0c      	ldr	r5, [pc, #48]	; (c9f4 <__libc_init_array+0x38>)
    c9c2:	4c0d      	ldr	r4, [pc, #52]	; (c9f8 <__libc_init_array+0x3c>)
    c9c4:	1b64      	subs	r4, r4, r5
    c9c6:	10a4      	asrs	r4, r4, #2
    c9c8:	42a6      	cmp	r6, r4
    c9ca:	d109      	bne.n	c9e0 <__libc_init_array+0x24>
    c9cc:	2600      	movs	r6, #0
    c9ce:	f004 f909 	bl	10be4 <_init>
    c9d2:	4d0a      	ldr	r5, [pc, #40]	; (c9fc <__libc_init_array+0x40>)
    c9d4:	4c0a      	ldr	r4, [pc, #40]	; (ca00 <__libc_init_array+0x44>)
    c9d6:	1b64      	subs	r4, r4, r5
    c9d8:	10a4      	asrs	r4, r4, #2
    c9da:	42a6      	cmp	r6, r4
    c9dc:	d105      	bne.n	c9ea <__libc_init_array+0x2e>
    c9de:	bd70      	pop	{r4, r5, r6, pc}
    c9e0:	00b3      	lsls	r3, r6, #2
    c9e2:	58eb      	ldr	r3, [r5, r3]
    c9e4:	4798      	blx	r3
    c9e6:	3601      	adds	r6, #1
    c9e8:	e7ee      	b.n	c9c8 <__libc_init_array+0xc>
    c9ea:	00b3      	lsls	r3, r6, #2
    c9ec:	58eb      	ldr	r3, [r5, r3]
    c9ee:	4798      	blx	r3
    c9f0:	3601      	adds	r6, #1
    c9f2:	e7f2      	b.n	c9da <__libc_init_array+0x1e>
    c9f4:	200002d0 	.word	0x200002d0
    c9f8:	200002d0 	.word	0x200002d0
    c9fc:	200002d0 	.word	0x200002d0
    ca00:	200002f8 	.word	0x200002f8

0000ca04 <__locale_ctype_ptr_l>:
    ca04:	30ec      	adds	r0, #236	; 0xec
    ca06:	6800      	ldr	r0, [r0, #0]
    ca08:	4770      	bx	lr
	...

0000ca0c <__locale_ctype_ptr>:
    ca0c:	4b04      	ldr	r3, [pc, #16]	; (ca20 <__locale_ctype_ptr+0x14>)
    ca0e:	681b      	ldr	r3, [r3, #0]
    ca10:	6a1b      	ldr	r3, [r3, #32]
    ca12:	2b00      	cmp	r3, #0
    ca14:	d100      	bne.n	ca18 <__locale_ctype_ptr+0xc>
    ca16:	4b03      	ldr	r3, [pc, #12]	; (ca24 <__locale_ctype_ptr+0x18>)
    ca18:	33ec      	adds	r3, #236	; 0xec
    ca1a:	6818      	ldr	r0, [r3, #0]
    ca1c:	4770      	bx	lr
    ca1e:	46c0      	nop			; (mov r8, r8)
    ca20:	200000b4 	.word	0x200000b4
    ca24:	20000118 	.word	0x20000118

0000ca28 <malloc>:
    ca28:	b510      	push	{r4, lr}
    ca2a:	4b03      	ldr	r3, [pc, #12]	; (ca38 <malloc+0x10>)
    ca2c:	0001      	movs	r1, r0
    ca2e:	6818      	ldr	r0, [r3, #0]
    ca30:	f000 faf2 	bl	d018 <_malloc_r>
    ca34:	bd10      	pop	{r4, pc}
    ca36:	46c0      	nop			; (mov r8, r8)
    ca38:	200000b4 	.word	0x200000b4

0000ca3c <free>:
    ca3c:	b510      	push	{r4, lr}
    ca3e:	4b03      	ldr	r3, [pc, #12]	; (ca4c <free+0x10>)
    ca40:	0001      	movs	r1, r0
    ca42:	6818      	ldr	r0, [r3, #0]
    ca44:	f000 fa9e 	bl	cf84 <_free_r>
    ca48:	bd10      	pop	{r4, pc}
    ca4a:	46c0      	nop			; (mov r8, r8)
    ca4c:	200000b4 	.word	0x200000b4

0000ca50 <__ascii_mbtowc>:
    ca50:	b082      	sub	sp, #8
    ca52:	2900      	cmp	r1, #0
    ca54:	d100      	bne.n	ca58 <__ascii_mbtowc+0x8>
    ca56:	a901      	add	r1, sp, #4
    ca58:	1e10      	subs	r0, r2, #0
    ca5a:	d006      	beq.n	ca6a <__ascii_mbtowc+0x1a>
    ca5c:	2b00      	cmp	r3, #0
    ca5e:	d006      	beq.n	ca6e <__ascii_mbtowc+0x1e>
    ca60:	7813      	ldrb	r3, [r2, #0]
    ca62:	600b      	str	r3, [r1, #0]
    ca64:	7810      	ldrb	r0, [r2, #0]
    ca66:	1e43      	subs	r3, r0, #1
    ca68:	4198      	sbcs	r0, r3
    ca6a:	b002      	add	sp, #8
    ca6c:	4770      	bx	lr
    ca6e:	2002      	movs	r0, #2
    ca70:	4240      	negs	r0, r0
    ca72:	e7fa      	b.n	ca6a <__ascii_mbtowc+0x1a>

0000ca74 <memcmp>:
    ca74:	b530      	push	{r4, r5, lr}
    ca76:	2400      	movs	r4, #0
    ca78:	42a2      	cmp	r2, r4
    ca7a:	d101      	bne.n	ca80 <memcmp+0xc>
    ca7c:	2000      	movs	r0, #0
    ca7e:	e005      	b.n	ca8c <memcmp+0x18>
    ca80:	5d03      	ldrb	r3, [r0, r4]
    ca82:	1c65      	adds	r5, r4, #1
    ca84:	5d0c      	ldrb	r4, [r1, r4]
    ca86:	42a3      	cmp	r3, r4
    ca88:	d001      	beq.n	ca8e <memcmp+0x1a>
    ca8a:	1b18      	subs	r0, r3, r4
    ca8c:	bd30      	pop	{r4, r5, pc}
    ca8e:	002c      	movs	r4, r5
    ca90:	e7f2      	b.n	ca78 <memcmp+0x4>

0000ca92 <memcpy>:
    ca92:	2300      	movs	r3, #0
    ca94:	b510      	push	{r4, lr}
    ca96:	429a      	cmp	r2, r3
    ca98:	d100      	bne.n	ca9c <memcpy+0xa>
    ca9a:	bd10      	pop	{r4, pc}
    ca9c:	5ccc      	ldrb	r4, [r1, r3]
    ca9e:	54c4      	strb	r4, [r0, r3]
    caa0:	3301      	adds	r3, #1
    caa2:	e7f8      	b.n	ca96 <memcpy+0x4>

0000caa4 <memmove>:
    caa4:	b510      	push	{r4, lr}
    caa6:	4288      	cmp	r0, r1
    caa8:	d902      	bls.n	cab0 <memmove+0xc>
    caaa:	188b      	adds	r3, r1, r2
    caac:	4298      	cmp	r0, r3
    caae:	d308      	bcc.n	cac2 <memmove+0x1e>
    cab0:	2300      	movs	r3, #0
    cab2:	429a      	cmp	r2, r3
    cab4:	d007      	beq.n	cac6 <memmove+0x22>
    cab6:	5ccc      	ldrb	r4, [r1, r3]
    cab8:	54c4      	strb	r4, [r0, r3]
    caba:	3301      	adds	r3, #1
    cabc:	e7f9      	b.n	cab2 <memmove+0xe>
    cabe:	5c8b      	ldrb	r3, [r1, r2]
    cac0:	5483      	strb	r3, [r0, r2]
    cac2:	3a01      	subs	r2, #1
    cac4:	d2fb      	bcs.n	cabe <memmove+0x1a>
    cac6:	bd10      	pop	{r4, pc}

0000cac8 <memset>:
    cac8:	0003      	movs	r3, r0
    caca:	1882      	adds	r2, r0, r2
    cacc:	4293      	cmp	r3, r2
    cace:	d100      	bne.n	cad2 <memset+0xa>
    cad0:	4770      	bx	lr
    cad2:	7019      	strb	r1, [r3, #0]
    cad4:	3301      	adds	r3, #1
    cad6:	e7f9      	b.n	cacc <memset+0x4>

0000cad8 <validate_structure>:
    cad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cada:	6801      	ldr	r1, [r0, #0]
    cadc:	0004      	movs	r4, r0
    cade:	293b      	cmp	r1, #59	; 0x3b
    cae0:	d90b      	bls.n	cafa <validate_structure+0x22>
    cae2:	223c      	movs	r2, #60	; 0x3c
    cae4:	4668      	mov	r0, sp
    cae6:	f001 fd30 	bl	e54a <div>
    caea:	6863      	ldr	r3, [r4, #4]
    caec:	9900      	ldr	r1, [sp, #0]
    caee:	9a01      	ldr	r2, [sp, #4]
    caf0:	185b      	adds	r3, r3, r1
    caf2:	6063      	str	r3, [r4, #4]
    caf4:	2a00      	cmp	r2, #0
    caf6:	db6c      	blt.n	cbd2 <validate_structure+0xfa>
    caf8:	6022      	str	r2, [r4, #0]
    cafa:	6861      	ldr	r1, [r4, #4]
    cafc:	293b      	cmp	r1, #59	; 0x3b
    cafe:	d90b      	bls.n	cb18 <validate_structure+0x40>
    cb00:	223c      	movs	r2, #60	; 0x3c
    cb02:	4668      	mov	r0, sp
    cb04:	f001 fd21 	bl	e54a <div>
    cb08:	68a3      	ldr	r3, [r4, #8]
    cb0a:	9900      	ldr	r1, [sp, #0]
    cb0c:	9a01      	ldr	r2, [sp, #4]
    cb0e:	185b      	adds	r3, r3, r1
    cb10:	60a3      	str	r3, [r4, #8]
    cb12:	2a00      	cmp	r2, #0
    cb14:	db62      	blt.n	cbdc <validate_structure+0x104>
    cb16:	6062      	str	r2, [r4, #4]
    cb18:	68a1      	ldr	r1, [r4, #8]
    cb1a:	2917      	cmp	r1, #23
    cb1c:	d90b      	bls.n	cb36 <validate_structure+0x5e>
    cb1e:	2218      	movs	r2, #24
    cb20:	4668      	mov	r0, sp
    cb22:	f001 fd12 	bl	e54a <div>
    cb26:	68e3      	ldr	r3, [r4, #12]
    cb28:	9900      	ldr	r1, [sp, #0]
    cb2a:	9a01      	ldr	r2, [sp, #4]
    cb2c:	185b      	adds	r3, r3, r1
    cb2e:	60e3      	str	r3, [r4, #12]
    cb30:	2a00      	cmp	r2, #0
    cb32:	db58      	blt.n	cbe6 <validate_structure+0x10e>
    cb34:	60a2      	str	r2, [r4, #8]
    cb36:	6921      	ldr	r1, [r4, #16]
    cb38:	290b      	cmp	r1, #11
    cb3a:	d90b      	bls.n	cb54 <validate_structure+0x7c>
    cb3c:	220c      	movs	r2, #12
    cb3e:	4668      	mov	r0, sp
    cb40:	f001 fd03 	bl	e54a <div>
    cb44:	6963      	ldr	r3, [r4, #20]
    cb46:	9900      	ldr	r1, [sp, #0]
    cb48:	9a01      	ldr	r2, [sp, #4]
    cb4a:	185b      	adds	r3, r3, r1
    cb4c:	6163      	str	r3, [r4, #20]
    cb4e:	2a00      	cmp	r2, #0
    cb50:	db4e      	blt.n	cbf0 <validate_structure+0x118>
    cb52:	6122      	str	r2, [r4, #16]
    cb54:	6965      	ldr	r5, [r4, #20]
    cb56:	231c      	movs	r3, #28
    cb58:	07aa      	lsls	r2, r5, #30
    cb5a:	d10f      	bne.n	cb7c <validate_structure+0xa4>
    cb5c:	2164      	movs	r1, #100	; 0x64
    cb5e:	0028      	movs	r0, r5
    cb60:	f7fc ffb8 	bl	9ad4 <__aeabi_idivmod>
    cb64:	231d      	movs	r3, #29
    cb66:	2900      	cmp	r1, #0
    cb68:	d108      	bne.n	cb7c <validate_structure+0xa4>
    cb6a:	4b3d      	ldr	r3, [pc, #244]	; (cc60 <validate_structure+0x188>)
    cb6c:	3191      	adds	r1, #145	; 0x91
    cb6e:	18e8      	adds	r0, r5, r3
    cb70:	31ff      	adds	r1, #255	; 0xff
    cb72:	f7fc ffaf 	bl	9ad4 <__aeabi_idivmod>
    cb76:	424b      	negs	r3, r1
    cb78:	414b      	adcs	r3, r1
    cb7a:	331c      	adds	r3, #28
    cb7c:	68e2      	ldr	r2, [r4, #12]
    cb7e:	2a00      	cmp	r2, #0
    cb80:	dd3b      	ble.n	cbfa <validate_structure+0x122>
    cb82:	2602      	movs	r6, #2
    cb84:	4f37      	ldr	r7, [pc, #220]	; (cc64 <validate_structure+0x18c>)
    cb86:	6921      	ldr	r1, [r4, #16]
    cb88:	68e2      	ldr	r2, [r4, #12]
    cb8a:	2901      	cmp	r1, #1
    cb8c:	d061      	beq.n	cc52 <validate_structure+0x17a>
    cb8e:	0088      	lsls	r0, r1, #2
    cb90:	59c0      	ldr	r0, [r0, r7]
    cb92:	4282      	cmp	r2, r0
    cb94:	dd35      	ble.n	cc02 <validate_structure+0x12a>
    cb96:	1a12      	subs	r2, r2, r0
    cb98:	3101      	adds	r1, #1
    cb9a:	60e2      	str	r2, [r4, #12]
    cb9c:	6121      	str	r1, [r4, #16]
    cb9e:	290c      	cmp	r1, #12
    cba0:	d1f1      	bne.n	cb86 <validate_structure+0xae>
    cba2:	2300      	movs	r3, #0
    cba4:	6965      	ldr	r5, [r4, #20]
    cba6:	6123      	str	r3, [r4, #16]
    cba8:	1c68      	adds	r0, r5, #1
    cbaa:	6160      	str	r0, [r4, #20]
    cbac:	331c      	adds	r3, #28
    cbae:	0782      	lsls	r2, r0, #30
    cbb0:	d1e9      	bne.n	cb86 <validate_structure+0xae>
    cbb2:	3158      	adds	r1, #88	; 0x58
    cbb4:	f7fc ff8e 	bl	9ad4 <__aeabi_idivmod>
    cbb8:	231d      	movs	r3, #29
    cbba:	2900      	cmp	r1, #0
    cbbc:	d1e3      	bne.n	cb86 <validate_structure+0xae>
    cbbe:	4b2a      	ldr	r3, [pc, #168]	; (cc68 <validate_structure+0x190>)
    cbc0:	3191      	adds	r1, #145	; 0x91
    cbc2:	18e8      	adds	r0, r5, r3
    cbc4:	31ff      	adds	r1, #255	; 0xff
    cbc6:	f7fc ff85 	bl	9ad4 <__aeabi_idivmod>
    cbca:	424b      	negs	r3, r1
    cbcc:	414b      	adcs	r3, r1
    cbce:	331c      	adds	r3, #28
    cbd0:	e7d9      	b.n	cb86 <validate_structure+0xae>
    cbd2:	323c      	adds	r2, #60	; 0x3c
    cbd4:	3b01      	subs	r3, #1
    cbd6:	6022      	str	r2, [r4, #0]
    cbd8:	6063      	str	r3, [r4, #4]
    cbda:	e78e      	b.n	cafa <validate_structure+0x22>
    cbdc:	323c      	adds	r2, #60	; 0x3c
    cbde:	3b01      	subs	r3, #1
    cbe0:	6062      	str	r2, [r4, #4]
    cbe2:	60a3      	str	r3, [r4, #8]
    cbe4:	e798      	b.n	cb18 <validate_structure+0x40>
    cbe6:	3218      	adds	r2, #24
    cbe8:	3b01      	subs	r3, #1
    cbea:	60a2      	str	r2, [r4, #8]
    cbec:	60e3      	str	r3, [r4, #12]
    cbee:	e7a2      	b.n	cb36 <validate_structure+0x5e>
    cbf0:	320c      	adds	r2, #12
    cbf2:	3b01      	subs	r3, #1
    cbf4:	6122      	str	r2, [r4, #16]
    cbf6:	6163      	str	r3, [r4, #20]
    cbf8:	e7ac      	b.n	cb54 <validate_structure+0x7c>
    cbfa:	271d      	movs	r7, #29
    cbfc:	68e6      	ldr	r6, [r4, #12]
    cbfe:	2e00      	cmp	r6, #0
    cc00:	dd00      	ble.n	cc04 <validate_structure+0x12c>
    cc02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cc04:	6922      	ldr	r2, [r4, #16]
    cc06:	3a01      	subs	r2, #1
    cc08:	6122      	str	r2, [r4, #16]
    cc0a:	3201      	adds	r2, #1
    cc0c:	d117      	bne.n	cc3e <validate_structure+0x166>
    cc0e:	230b      	movs	r3, #11
    cc10:	2203      	movs	r2, #3
    cc12:	6965      	ldr	r5, [r4, #20]
    cc14:	6123      	str	r3, [r4, #16]
    cc16:	1e68      	subs	r0, r5, #1
    cc18:	6160      	str	r0, [r4, #20]
    cc1a:	3311      	adds	r3, #17
    cc1c:	4210      	tst	r0, r2
    cc1e:	d10e      	bne.n	cc3e <validate_structure+0x166>
    cc20:	2164      	movs	r1, #100	; 0x64
    cc22:	f7fc ff57 	bl	9ad4 <__aeabi_idivmod>
    cc26:	003b      	movs	r3, r7
    cc28:	2900      	cmp	r1, #0
    cc2a:	d108      	bne.n	cc3e <validate_structure+0x166>
    cc2c:	4b0f      	ldr	r3, [pc, #60]	; (cc6c <validate_structure+0x194>)
    cc2e:	3191      	adds	r1, #145	; 0x91
    cc30:	18e8      	adds	r0, r5, r3
    cc32:	31ff      	adds	r1, #255	; 0xff
    cc34:	f7fc ff4e 	bl	9ad4 <__aeabi_idivmod>
    cc38:	424b      	negs	r3, r1
    cc3a:	414b      	adcs	r3, r1
    cc3c:	331c      	adds	r3, #28
    cc3e:	6921      	ldr	r1, [r4, #16]
    cc40:	001a      	movs	r2, r3
    cc42:	2901      	cmp	r1, #1
    cc44:	d002      	beq.n	cc4c <validate_structure+0x174>
    cc46:	4a07      	ldr	r2, [pc, #28]	; (cc64 <validate_structure+0x18c>)
    cc48:	0089      	lsls	r1, r1, #2
    cc4a:	588a      	ldr	r2, [r1, r2]
    cc4c:	1996      	adds	r6, r2, r6
    cc4e:	60e6      	str	r6, [r4, #12]
    cc50:	e7d4      	b.n	cbfc <validate_structure+0x124>
    cc52:	4293      	cmp	r3, r2
    cc54:	dad5      	bge.n	cc02 <validate_structure+0x12a>
    cc56:	1ad2      	subs	r2, r2, r3
    cc58:	60e2      	str	r2, [r4, #12]
    cc5a:	6126      	str	r6, [r4, #16]
    cc5c:	e793      	b.n	cb86 <validate_structure+0xae>
    cc5e:	46c0      	nop			; (mov r8, r8)
    cc60:	0000076c 	.word	0x0000076c
    cc64:	00012928 	.word	0x00012928
    cc68:	0000076d 	.word	0x0000076d
    cc6c:	0000076b 	.word	0x0000076b

0000cc70 <mktime>:
    cc70:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc72:	b087      	sub	sp, #28
    cc74:	0004      	movs	r4, r0
    cc76:	f002 fcc1 	bl	f5fc <__gettzinfo>
    cc7a:	9004      	str	r0, [sp, #16]
    cc7c:	0020      	movs	r0, r4
    cc7e:	f7ff ff2b 	bl	cad8 <validate_structure>
    cc82:	233c      	movs	r3, #60	; 0x3c
    cc84:	6862      	ldr	r2, [r4, #4]
    cc86:	68a1      	ldr	r1, [r4, #8]
    cc88:	4353      	muls	r3, r2
    cc8a:	6822      	ldr	r2, [r4, #0]
    cc8c:	6965      	ldr	r5, [r4, #20]
    cc8e:	189b      	adds	r3, r3, r2
    cc90:	22e1      	movs	r2, #225	; 0xe1
    cc92:	0112      	lsls	r2, r2, #4
    cc94:	434a      	muls	r2, r1
    cc96:	189b      	adds	r3, r3, r2
    cc98:	68e2      	ldr	r2, [r4, #12]
    cc9a:	9303      	str	r3, [sp, #12]
    cc9c:	6923      	ldr	r3, [r4, #16]
    cc9e:	1e50      	subs	r0, r2, #1
    cca0:	4ab1      	ldr	r2, [pc, #708]	; (cf68 <mktime+0x2f8>)
    cca2:	0099      	lsls	r1, r3, #2
    cca4:	588a      	ldr	r2, [r1, r2]
    cca6:	1882      	adds	r2, r0, r2
    cca8:	9201      	str	r2, [sp, #4]
    ccaa:	2b01      	cmp	r3, #1
    ccac:	dd12      	ble.n	ccd4 <mktime+0x64>
    ccae:	07ab      	lsls	r3, r5, #30
    ccb0:	d110      	bne.n	ccd4 <mktime+0x64>
    ccb2:	2164      	movs	r1, #100	; 0x64
    ccb4:	0028      	movs	r0, r5
    ccb6:	f7fc ff0d 	bl	9ad4 <__aeabi_idivmod>
    ccba:	2900      	cmp	r1, #0
    ccbc:	d107      	bne.n	ccce <mktime+0x5e>
    ccbe:	4bab      	ldr	r3, [pc, #684]	; (cf6c <mktime+0x2fc>)
    ccc0:	3191      	adds	r1, #145	; 0x91
    ccc2:	31ff      	adds	r1, #255	; 0xff
    ccc4:	18e8      	adds	r0, r5, r3
    ccc6:	f7fc ff05 	bl	9ad4 <__aeabi_idivmod>
    ccca:	2900      	cmp	r1, #0
    cccc:	d102      	bne.n	ccd4 <mktime+0x64>
    ccce:	9b01      	ldr	r3, [sp, #4]
    ccd0:	3301      	adds	r3, #1
    ccd2:	9301      	str	r3, [sp, #4]
    ccd4:	9b01      	ldr	r3, [sp, #4]
    ccd6:	4aa6      	ldr	r2, [pc, #664]	; (cf70 <mktime+0x300>)
    ccd8:	61e3      	str	r3, [r4, #28]
    ccda:	4ba6      	ldr	r3, [pc, #664]	; (cf74 <mktime+0x304>)
    ccdc:	18eb      	adds	r3, r5, r3
    ccde:	4293      	cmp	r3, r2
    cce0:	d900      	bls.n	cce4 <mktime+0x74>
    cce2:	e0f8      	b.n	ced6 <mktime+0x266>
    cce4:	2346      	movs	r3, #70	; 0x46
    cce6:	9302      	str	r3, [sp, #8]
    cce8:	2d46      	cmp	r5, #70	; 0x46
    ccea:	dc00      	bgt.n	ccee <mktime+0x7e>
    ccec:	e072      	b.n	cdd4 <mktime+0x164>
    ccee:	27b7      	movs	r7, #183	; 0xb7
    ccf0:	26c8      	movs	r6, #200	; 0xc8
    ccf2:	007f      	lsls	r7, r7, #1
    ccf4:	0076      	lsls	r6, r6, #1
    ccf6:	2203      	movs	r2, #3
    ccf8:	9b02      	ldr	r3, [sp, #8]
    ccfa:	4213      	tst	r3, r2
    ccfc:	d168      	bne.n	cdd0 <mktime+0x160>
    ccfe:	0018      	movs	r0, r3
    cd00:	2164      	movs	r1, #100	; 0x64
    cd02:	f7fc fee7 	bl	9ad4 <__aeabi_idivmod>
    cd06:	003b      	movs	r3, r7
    cd08:	2900      	cmp	r1, #0
    cd0a:	d109      	bne.n	cd20 <mktime+0xb0>
    cd0c:	9b02      	ldr	r3, [sp, #8]
    cd0e:	4a97      	ldr	r2, [pc, #604]	; (cf6c <mktime+0x2fc>)
    cd10:	0031      	movs	r1, r6
    cd12:	1898      	adds	r0, r3, r2
    cd14:	f7fc fede 	bl	9ad4 <__aeabi_idivmod>
    cd18:	424b      	negs	r3, r1
    cd1a:	414b      	adcs	r3, r1
    cd1c:	336e      	adds	r3, #110	; 0x6e
    cd1e:	33ff      	adds	r3, #255	; 0xff
    cd20:	9a01      	ldr	r2, [sp, #4]
    cd22:	18d3      	adds	r3, r2, r3
    cd24:	9301      	str	r3, [sp, #4]
    cd26:	9b02      	ldr	r3, [sp, #8]
    cd28:	3301      	adds	r3, #1
    cd2a:	9302      	str	r3, [sp, #8]
    cd2c:	429d      	cmp	r5, r3
    cd2e:	d1e2      	bne.n	ccf6 <mktime+0x86>
    cd30:	9a01      	ldr	r2, [sp, #4]
    cd32:	4b91      	ldr	r3, [pc, #580]	; (cf78 <mktime+0x308>)
    cd34:	4353      	muls	r3, r2
    cd36:	9a03      	ldr	r2, [sp, #12]
    cd38:	189b      	adds	r3, r3, r2
    cd3a:	9303      	str	r3, [sp, #12]
    cd3c:	f001 f97a 	bl	e034 <__tz_lock>
    cd40:	f001 f97a 	bl	e038 <_tzset_unlocked>
    cd44:	4b8d      	ldr	r3, [pc, #564]	; (cf7c <mktime+0x30c>)
    cd46:	681d      	ldr	r5, [r3, #0]
    cd48:	2d00      	cmp	r5, #0
    cd4a:	d100      	bne.n	cd4e <mktime+0xde>
    cd4c:	e107      	b.n	cf5e <mktime+0x2ee>
    cd4e:	6963      	ldr	r3, [r4, #20]
    cd50:	4a86      	ldr	r2, [pc, #536]	; (cf6c <mktime+0x2fc>)
    cd52:	6a26      	ldr	r6, [r4, #32]
    cd54:	1898      	adds	r0, r3, r2
    cd56:	2e00      	cmp	r6, #0
    cd58:	dd00      	ble.n	cd5c <mktime+0xec>
    cd5a:	2601      	movs	r6, #1
    cd5c:	9b04      	ldr	r3, [sp, #16]
    cd5e:	685b      	ldr	r3, [r3, #4]
    cd60:	9305      	str	r3, [sp, #20]
    cd62:	4298      	cmp	r0, r3
    cd64:	d000      	beq.n	cd68 <mktime+0xf8>
    cd66:	e073      	b.n	ce50 <mktime+0x1e0>
    cd68:	9b04      	ldr	r3, [sp, #16]
    cd6a:	9d03      	ldr	r5, [sp, #12]
    cd6c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    cd6e:	69db      	ldr	r3, [r3, #28]
    cd70:	9305      	str	r3, [sp, #20]
    cd72:	1a1a      	subs	r2, r3, r0
    cd74:	9b04      	ldr	r3, [sp, #16]
    cd76:	6b99      	ldr	r1, [r3, #56]	; 0x38
    cd78:	6a1b      	ldr	r3, [r3, #32]
    cd7a:	1acf      	subs	r7, r1, r3
    cd7c:	42bd      	cmp	r5, r7
    cd7e:	db00      	blt.n	cd82 <mktime+0x112>
    cd80:	e06d      	b.n	ce5e <mktime+0x1ee>
    cd82:	9904      	ldr	r1, [sp, #16]
    cd84:	6809      	ldr	r1, [r1, #0]
    cd86:	2900      	cmp	r1, #0
    cd88:	d100      	bne.n	cd8c <mktime+0x11c>
    cd8a:	e06d      	b.n	ce68 <mktime+0x1f8>
    cd8c:	9903      	ldr	r1, [sp, #12]
    cd8e:	4291      	cmp	r1, r2
    cd90:	da00      	bge.n	cd94 <mktime+0x124>
    cd92:	e0e1      	b.n	cf58 <mktime+0x2e8>
    cd94:	2501      	movs	r5, #1
    cd96:	42b9      	cmp	r1, r7
    cd98:	db00      	blt.n	cd9c <mktime+0x12c>
    cd9a:	2500      	movs	r5, #0
    cd9c:	2e00      	cmp	r6, #0
    cd9e:	db00      	blt.n	cda2 <mktime+0x132>
    cda0:	e0a0      	b.n	cee4 <mktime+0x274>
    cda2:	2d01      	cmp	r5, #1
    cda4:	d000      	beq.n	cda8 <mktime+0x138>
    cda6:	e0da      	b.n	cf5e <mktime+0x2ee>
    cda8:	2501      	movs	r5, #1
    cdaa:	9b04      	ldr	r3, [sp, #16]
    cdac:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    cdae:	9b03      	ldr	r3, [sp, #12]
    cdb0:	199e      	adds	r6, r3, r6
    cdb2:	f001 f940 	bl	e036 <__tz_unlock>
    cdb6:	9801      	ldr	r0, [sp, #4]
    cdb8:	6225      	str	r5, [r4, #32]
    cdba:	3004      	adds	r0, #4
    cdbc:	2107      	movs	r1, #7
    cdbe:	f7fc fe89 	bl	9ad4 <__aeabi_idivmod>
    cdc2:	2900      	cmp	r1, #0
    cdc4:	da00      	bge.n	cdc8 <mktime+0x158>
    cdc6:	e084      	b.n	ced2 <mktime+0x262>
    cdc8:	61a1      	str	r1, [r4, #24]
    cdca:	0030      	movs	r0, r6
    cdcc:	b007      	add	sp, #28
    cdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdd0:	236e      	movs	r3, #110	; 0x6e
    cdd2:	e7a4      	b.n	cd1e <mktime+0xae>
    cdd4:	429d      	cmp	r5, r3
    cdd6:	d0ab      	beq.n	cd30 <mktime+0xc0>
    cdd8:	2645      	movs	r6, #69	; 0x45
    cdda:	2703      	movs	r7, #3
    cddc:	42ae      	cmp	r6, r5
    cdde:	dc17      	bgt.n	ce10 <mktime+0x1a0>
    cde0:	423d      	tst	r5, r7
    cde2:	d130      	bne.n	ce46 <mktime+0x1d6>
    cde4:	2164      	movs	r1, #100	; 0x64
    cde6:	0028      	movs	r0, r5
    cde8:	f7fc fe74 	bl	9ad4 <__aeabi_idivmod>
    cdec:	2900      	cmp	r1, #0
    cdee:	d12c      	bne.n	ce4a <mktime+0x1da>
    cdf0:	4b5e      	ldr	r3, [pc, #376]	; (cf6c <mktime+0x2fc>)
    cdf2:	3191      	adds	r1, #145	; 0x91
    cdf4:	18e8      	adds	r0, r5, r3
    cdf6:	31ff      	adds	r1, #255	; 0xff
    cdf8:	f7fc fe6c 	bl	9ad4 <__aeabi_idivmod>
    cdfc:	000b      	movs	r3, r1
    cdfe:	4259      	negs	r1, r3
    ce00:	4159      	adcs	r1, r3
    ce02:	316e      	adds	r1, #110	; 0x6e
    ce04:	31ff      	adds	r1, #255	; 0xff
    ce06:	9b01      	ldr	r3, [sp, #4]
    ce08:	9502      	str	r5, [sp, #8]
    ce0a:	1a5b      	subs	r3, r3, r1
    ce0c:	9301      	str	r3, [sp, #4]
    ce0e:	e78f      	b.n	cd30 <mktime+0xc0>
    ce10:	423e      	tst	r6, r7
    ce12:	d116      	bne.n	ce42 <mktime+0x1d2>
    ce14:	2164      	movs	r1, #100	; 0x64
    ce16:	0030      	movs	r0, r6
    ce18:	f7fc fe5c 	bl	9ad4 <__aeabi_idivmod>
    ce1c:	23b7      	movs	r3, #183	; 0xb7
    ce1e:	005b      	lsls	r3, r3, #1
    ce20:	2900      	cmp	r1, #0
    ce22:	d109      	bne.n	ce38 <mktime+0x1c8>
    ce24:	4b51      	ldr	r3, [pc, #324]	; (cf6c <mktime+0x2fc>)
    ce26:	3191      	adds	r1, #145	; 0x91
    ce28:	18f0      	adds	r0, r6, r3
    ce2a:	31ff      	adds	r1, #255	; 0xff
    ce2c:	f7fc fe52 	bl	9ad4 <__aeabi_idivmod>
    ce30:	424b      	negs	r3, r1
    ce32:	414b      	adcs	r3, r1
    ce34:	336e      	adds	r3, #110	; 0x6e
    ce36:	33ff      	adds	r3, #255	; 0xff
    ce38:	9a01      	ldr	r2, [sp, #4]
    ce3a:	3e01      	subs	r6, #1
    ce3c:	1ad3      	subs	r3, r2, r3
    ce3e:	9301      	str	r3, [sp, #4]
    ce40:	e7cc      	b.n	cddc <mktime+0x16c>
    ce42:	236e      	movs	r3, #110	; 0x6e
    ce44:	e7f7      	b.n	ce36 <mktime+0x1c6>
    ce46:	216e      	movs	r1, #110	; 0x6e
    ce48:	e7dc      	b.n	ce04 <mktime+0x194>
    ce4a:	21b7      	movs	r1, #183	; 0xb7
    ce4c:	0049      	lsls	r1, r1, #1
    ce4e:	e7da      	b.n	ce06 <mktime+0x196>
    ce50:	f001 f842 	bl	ded8 <__tzcalc_limits>
    ce54:	2800      	cmp	r0, #0
    ce56:	d000      	beq.n	ce5a <mktime+0x1ea>
    ce58:	e786      	b.n	cd68 <mktime+0xf8>
    ce5a:	0035      	movs	r5, r6
    ce5c:	e7a1      	b.n	cda2 <mktime+0x132>
    ce5e:	9d03      	ldr	r5, [sp, #12]
    ce60:	1a09      	subs	r1, r1, r0
    ce62:	428d      	cmp	r5, r1
    ce64:	dbf9      	blt.n	ce5a <mktime+0x1ea>
    ce66:	e78c      	b.n	cd82 <mktime+0x112>
    ce68:	9d03      	ldr	r5, [sp, #12]
    ce6a:	4295      	cmp	r5, r2
    ce6c:	da36      	bge.n	cedc <mktime+0x26c>
    ce6e:	9a03      	ldr	r2, [sp, #12]
    ce70:	2501      	movs	r5, #1
    ce72:	42ba      	cmp	r2, r7
    ce74:	da00      	bge.n	ce78 <mktime+0x208>
    ce76:	e791      	b.n	cd9c <mktime+0x12c>
    ce78:	000d      	movs	r5, r1
    ce7a:	e78f      	b.n	cd9c <mktime+0x12c>
    ce7c:	2701      	movs	r7, #1
    ce7e:	427f      	negs	r7, r7
    ce80:	e04b      	b.n	cf1a <mktime+0x2aa>
    ce82:	21b6      	movs	r1, #182	; 0xb6
    ce84:	0049      	lsls	r1, r1, #1
    ce86:	61e1      	str	r1, [r4, #28]
    ce88:	e78b      	b.n	cda2 <mktime+0x132>
    ce8a:	216e      	movs	r1, #110	; 0x6e
    ce8c:	e062      	b.n	cf54 <mktime+0x2e4>
    ce8e:	9a02      	ldr	r2, [sp, #8]
    ce90:	421a      	tst	r2, r3
    ce92:	d117      	bne.n	cec4 <mktime+0x254>
    ce94:	2164      	movs	r1, #100	; 0x64
    ce96:	0010      	movs	r0, r2
    ce98:	f7fc fe1c 	bl	9ad4 <__aeabi_idivmod>
    ce9c:	2900      	cmp	r1, #0
    ce9e:	d113      	bne.n	cec8 <mktime+0x258>
    cea0:	4a32      	ldr	r2, [pc, #200]	; (cf6c <mktime+0x2fc>)
    cea2:	9b02      	ldr	r3, [sp, #8]
    cea4:	4694      	mov	ip, r2
    cea6:	3191      	adds	r1, #145	; 0x91
    cea8:	4463      	add	r3, ip
    ceaa:	0018      	movs	r0, r3
    ceac:	31ff      	adds	r1, #255	; 0xff
    ceae:	f7fc fe11 	bl	9ad4 <__aeabi_idivmod>
    ceb2:	000b      	movs	r3, r1
    ceb4:	4259      	negs	r1, r3
    ceb6:	4159      	adcs	r1, r3
    ceb8:	316e      	adds	r1, #110	; 0x6e
    ceba:	31ff      	adds	r1, #255	; 0xff
    cebc:	42b9      	cmp	r1, r7
    cebe:	dd06      	ble.n	cece <mktime+0x25e>
    cec0:	61e7      	str	r7, [r4, #28]
    cec2:	e76e      	b.n	cda2 <mktime+0x132>
    cec4:	216e      	movs	r1, #110	; 0x6e
    cec6:	e7f8      	b.n	ceba <mktime+0x24a>
    cec8:	21b7      	movs	r1, #183	; 0xb7
    ceca:	0049      	lsls	r1, r1, #1
    cecc:	e7f6      	b.n	cebc <mktime+0x24c>
    cece:	1a7f      	subs	r7, r7, r1
    ced0:	e7f6      	b.n	cec0 <mktime+0x250>
    ced2:	3107      	adds	r1, #7
    ced4:	e778      	b.n	cdc8 <mktime+0x158>
    ced6:	2601      	movs	r6, #1
    ced8:	4276      	negs	r6, r6
    ceda:	e776      	b.n	cdca <mktime+0x15a>
    cedc:	2501      	movs	r5, #1
    cede:	2e00      	cmp	r6, #0
    cee0:	da00      	bge.n	cee4 <mktime+0x274>
    cee2:	e761      	b.n	cda8 <mktime+0x138>
    cee4:	406e      	eors	r6, r5
    cee6:	2e01      	cmp	r6, #1
    cee8:	d000      	beq.n	ceec <mktime+0x27c>
    ceea:	e75a      	b.n	cda2 <mktime+0x132>
    ceec:	1a1b      	subs	r3, r3, r0
    ceee:	2d00      	cmp	r5, #0
    cef0:	d100      	bne.n	cef4 <mktime+0x284>
    cef2:	425b      	negs	r3, r3
    cef4:	6822      	ldr	r2, [r4, #0]
    cef6:	0020      	movs	r0, r4
    cef8:	18d2      	adds	r2, r2, r3
    cefa:	6022      	str	r2, [r4, #0]
    cefc:	9a03      	ldr	r2, [sp, #12]
    cefe:	68e7      	ldr	r7, [r4, #12]
    cf00:	18d3      	adds	r3, r2, r3
    cf02:	9303      	str	r3, [sp, #12]
    cf04:	f7ff fde8 	bl	cad8 <validate_structure>
    cf08:	68e3      	ldr	r3, [r4, #12]
    cf0a:	1bdf      	subs	r7, r3, r7
    cf0c:	d100      	bne.n	cf10 <mktime+0x2a0>
    cf0e:	e748      	b.n	cda2 <mktime+0x132>
    cf10:	2f01      	cmp	r7, #1
    cf12:	dcb3      	bgt.n	ce7c <mktime+0x20c>
    cf14:	1c7b      	adds	r3, r7, #1
    cf16:	da00      	bge.n	cf1a <mktime+0x2aa>
    cf18:	0037      	movs	r7, r6
    cf1a:	9b01      	ldr	r3, [sp, #4]
    cf1c:	69e2      	ldr	r2, [r4, #28]
    cf1e:	19db      	adds	r3, r3, r7
    cf20:	9301      	str	r3, [sp, #4]
    cf22:	2303      	movs	r3, #3
    cf24:	18bf      	adds	r7, r7, r2
    cf26:	d5b2      	bpl.n	ce8e <mktime+0x21e>
    cf28:	9a02      	ldr	r2, [sp, #8]
    cf2a:	1e50      	subs	r0, r2, #1
    cf2c:	4218      	tst	r0, r3
    cf2e:	d1a8      	bne.n	ce82 <mktime+0x212>
    cf30:	2164      	movs	r1, #100	; 0x64
    cf32:	f7fc fdcf 	bl	9ad4 <__aeabi_idivmod>
    cf36:	2900      	cmp	r1, #0
    cf38:	d1a7      	bne.n	ce8a <mktime+0x21a>
    cf3a:	4a11      	ldr	r2, [pc, #68]	; (cf80 <mktime+0x310>)
    cf3c:	9b02      	ldr	r3, [sp, #8]
    cf3e:	4694      	mov	ip, r2
    cf40:	3191      	adds	r1, #145	; 0x91
    cf42:	4463      	add	r3, ip
    cf44:	0018      	movs	r0, r3
    cf46:	31ff      	adds	r1, #255	; 0xff
    cf48:	f7fc fdc4 	bl	9ad4 <__aeabi_idivmod>
    cf4c:	000b      	movs	r3, r1
    cf4e:	4259      	negs	r1, r3
    cf50:	4159      	adcs	r1, r3
    cf52:	316d      	adds	r1, #109	; 0x6d
    cf54:	31ff      	adds	r1, #255	; 0xff
    cf56:	e796      	b.n	ce86 <mktime+0x216>
    cf58:	2500      	movs	r5, #0
    cf5a:	2e00      	cmp	r6, #0
    cf5c:	dac2      	bge.n	cee4 <mktime+0x274>
    cf5e:	9b04      	ldr	r3, [sp, #16]
    cf60:	6a1e      	ldr	r6, [r3, #32]
    cf62:	9b03      	ldr	r3, [sp, #12]
    cf64:	199e      	adds	r6, r3, r6
    cf66:	e724      	b.n	cdb2 <mktime+0x142>
    cf68:	00012958 	.word	0x00012958
    cf6c:	0000076c 	.word	0x0000076c
    cf70:	00004e20 	.word	0x00004e20
    cf74:	00002710 	.word	0x00002710
    cf78:	00015180 	.word	0x00015180
    cf7c:	20001f98 	.word	0x20001f98
    cf80:	0000076b 	.word	0x0000076b

0000cf84 <_free_r>:
    cf84:	b570      	push	{r4, r5, r6, lr}
    cf86:	0005      	movs	r5, r0
    cf88:	2900      	cmp	r1, #0
    cf8a:	d010      	beq.n	cfae <_free_r+0x2a>
    cf8c:	1f0c      	subs	r4, r1, #4
    cf8e:	6823      	ldr	r3, [r4, #0]
    cf90:	2b00      	cmp	r3, #0
    cf92:	da00      	bge.n	cf96 <_free_r+0x12>
    cf94:	18e4      	adds	r4, r4, r3
    cf96:	0028      	movs	r0, r5
    cf98:	f002 fbb7 	bl	f70a <__malloc_lock>
    cf9c:	4a1d      	ldr	r2, [pc, #116]	; (d014 <_free_r+0x90>)
    cf9e:	6813      	ldr	r3, [r2, #0]
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	d105      	bne.n	cfb0 <_free_r+0x2c>
    cfa4:	6063      	str	r3, [r4, #4]
    cfa6:	6014      	str	r4, [r2, #0]
    cfa8:	0028      	movs	r0, r5
    cfaa:	f002 fbaf 	bl	f70c <__malloc_unlock>
    cfae:	bd70      	pop	{r4, r5, r6, pc}
    cfb0:	42a3      	cmp	r3, r4
    cfb2:	d909      	bls.n	cfc8 <_free_r+0x44>
    cfb4:	6821      	ldr	r1, [r4, #0]
    cfb6:	1860      	adds	r0, r4, r1
    cfb8:	4283      	cmp	r3, r0
    cfba:	d1f3      	bne.n	cfa4 <_free_r+0x20>
    cfbc:	6818      	ldr	r0, [r3, #0]
    cfbe:	685b      	ldr	r3, [r3, #4]
    cfc0:	1841      	adds	r1, r0, r1
    cfc2:	6021      	str	r1, [r4, #0]
    cfc4:	e7ee      	b.n	cfa4 <_free_r+0x20>
    cfc6:	0013      	movs	r3, r2
    cfc8:	685a      	ldr	r2, [r3, #4]
    cfca:	2a00      	cmp	r2, #0
    cfcc:	d001      	beq.n	cfd2 <_free_r+0x4e>
    cfce:	42a2      	cmp	r2, r4
    cfd0:	d9f9      	bls.n	cfc6 <_free_r+0x42>
    cfd2:	6819      	ldr	r1, [r3, #0]
    cfd4:	1858      	adds	r0, r3, r1
    cfd6:	42a0      	cmp	r0, r4
    cfd8:	d10b      	bne.n	cff2 <_free_r+0x6e>
    cfda:	6820      	ldr	r0, [r4, #0]
    cfdc:	1809      	adds	r1, r1, r0
    cfde:	1858      	adds	r0, r3, r1
    cfe0:	6019      	str	r1, [r3, #0]
    cfe2:	4282      	cmp	r2, r0
    cfe4:	d1e0      	bne.n	cfa8 <_free_r+0x24>
    cfe6:	6810      	ldr	r0, [r2, #0]
    cfe8:	6852      	ldr	r2, [r2, #4]
    cfea:	1841      	adds	r1, r0, r1
    cfec:	6019      	str	r1, [r3, #0]
    cfee:	605a      	str	r2, [r3, #4]
    cff0:	e7da      	b.n	cfa8 <_free_r+0x24>
    cff2:	42a0      	cmp	r0, r4
    cff4:	d902      	bls.n	cffc <_free_r+0x78>
    cff6:	230c      	movs	r3, #12
    cff8:	602b      	str	r3, [r5, #0]
    cffa:	e7d5      	b.n	cfa8 <_free_r+0x24>
    cffc:	6821      	ldr	r1, [r4, #0]
    cffe:	1860      	adds	r0, r4, r1
    d000:	4282      	cmp	r2, r0
    d002:	d103      	bne.n	d00c <_free_r+0x88>
    d004:	6810      	ldr	r0, [r2, #0]
    d006:	6852      	ldr	r2, [r2, #4]
    d008:	1841      	adds	r1, r0, r1
    d00a:	6021      	str	r1, [r4, #0]
    d00c:	6062      	str	r2, [r4, #4]
    d00e:	605c      	str	r4, [r3, #4]
    d010:	e7ca      	b.n	cfa8 <_free_r+0x24>
    d012:	46c0      	nop			; (mov r8, r8)
    d014:	20001f74 	.word	0x20001f74

0000d018 <_malloc_r>:
    d018:	2303      	movs	r3, #3
    d01a:	b570      	push	{r4, r5, r6, lr}
    d01c:	1ccd      	adds	r5, r1, #3
    d01e:	439d      	bics	r5, r3
    d020:	3508      	adds	r5, #8
    d022:	0006      	movs	r6, r0
    d024:	2d0c      	cmp	r5, #12
    d026:	d21e      	bcs.n	d066 <_malloc_r+0x4e>
    d028:	250c      	movs	r5, #12
    d02a:	42a9      	cmp	r1, r5
    d02c:	d81d      	bhi.n	d06a <_malloc_r+0x52>
    d02e:	0030      	movs	r0, r6
    d030:	f002 fb6b 	bl	f70a <__malloc_lock>
    d034:	4a25      	ldr	r2, [pc, #148]	; (d0cc <_malloc_r+0xb4>)
    d036:	6814      	ldr	r4, [r2, #0]
    d038:	0021      	movs	r1, r4
    d03a:	2900      	cmp	r1, #0
    d03c:	d119      	bne.n	d072 <_malloc_r+0x5a>
    d03e:	4c24      	ldr	r4, [pc, #144]	; (d0d0 <_malloc_r+0xb8>)
    d040:	6823      	ldr	r3, [r4, #0]
    d042:	2b00      	cmp	r3, #0
    d044:	d103      	bne.n	d04e <_malloc_r+0x36>
    d046:	0030      	movs	r0, r6
    d048:	f000 fe02 	bl	dc50 <_sbrk_r>
    d04c:	6020      	str	r0, [r4, #0]
    d04e:	0029      	movs	r1, r5
    d050:	0030      	movs	r0, r6
    d052:	f000 fdfd 	bl	dc50 <_sbrk_r>
    d056:	1c43      	adds	r3, r0, #1
    d058:	d12c      	bne.n	d0b4 <_malloc_r+0x9c>
    d05a:	230c      	movs	r3, #12
    d05c:	0030      	movs	r0, r6
    d05e:	6033      	str	r3, [r6, #0]
    d060:	f002 fb54 	bl	f70c <__malloc_unlock>
    d064:	e003      	b.n	d06e <_malloc_r+0x56>
    d066:	2d00      	cmp	r5, #0
    d068:	dadf      	bge.n	d02a <_malloc_r+0x12>
    d06a:	230c      	movs	r3, #12
    d06c:	6033      	str	r3, [r6, #0]
    d06e:	2000      	movs	r0, #0
    d070:	bd70      	pop	{r4, r5, r6, pc}
    d072:	680b      	ldr	r3, [r1, #0]
    d074:	1b5b      	subs	r3, r3, r5
    d076:	d41a      	bmi.n	d0ae <_malloc_r+0x96>
    d078:	2b0b      	cmp	r3, #11
    d07a:	d903      	bls.n	d084 <_malloc_r+0x6c>
    d07c:	600b      	str	r3, [r1, #0]
    d07e:	18cc      	adds	r4, r1, r3
    d080:	6025      	str	r5, [r4, #0]
    d082:	e003      	b.n	d08c <_malloc_r+0x74>
    d084:	428c      	cmp	r4, r1
    d086:	d10e      	bne.n	d0a6 <_malloc_r+0x8e>
    d088:	6863      	ldr	r3, [r4, #4]
    d08a:	6013      	str	r3, [r2, #0]
    d08c:	0030      	movs	r0, r6
    d08e:	f002 fb3d 	bl	f70c <__malloc_unlock>
    d092:	0020      	movs	r0, r4
    d094:	2207      	movs	r2, #7
    d096:	300b      	adds	r0, #11
    d098:	1d23      	adds	r3, r4, #4
    d09a:	4390      	bics	r0, r2
    d09c:	1ac3      	subs	r3, r0, r3
    d09e:	d0e7      	beq.n	d070 <_malloc_r+0x58>
    d0a0:	425a      	negs	r2, r3
    d0a2:	50e2      	str	r2, [r4, r3]
    d0a4:	e7e4      	b.n	d070 <_malloc_r+0x58>
    d0a6:	684b      	ldr	r3, [r1, #4]
    d0a8:	6063      	str	r3, [r4, #4]
    d0aa:	000c      	movs	r4, r1
    d0ac:	e7ee      	b.n	d08c <_malloc_r+0x74>
    d0ae:	000c      	movs	r4, r1
    d0b0:	6849      	ldr	r1, [r1, #4]
    d0b2:	e7c2      	b.n	d03a <_malloc_r+0x22>
    d0b4:	2303      	movs	r3, #3
    d0b6:	1cc4      	adds	r4, r0, #3
    d0b8:	439c      	bics	r4, r3
    d0ba:	42a0      	cmp	r0, r4
    d0bc:	d0e0      	beq.n	d080 <_malloc_r+0x68>
    d0be:	1a21      	subs	r1, r4, r0
    d0c0:	0030      	movs	r0, r6
    d0c2:	f000 fdc5 	bl	dc50 <_sbrk_r>
    d0c6:	1c43      	adds	r3, r0, #1
    d0c8:	d1da      	bne.n	d080 <_malloc_r+0x68>
    d0ca:	e7c6      	b.n	d05a <_malloc_r+0x42>
    d0cc:	20001f74 	.word	0x20001f74
    d0d0:	20001f78 	.word	0x20001f78

0000d0d4 <__sfputc_r>:
    d0d4:	6893      	ldr	r3, [r2, #8]
    d0d6:	b510      	push	{r4, lr}
    d0d8:	3b01      	subs	r3, #1
    d0da:	6093      	str	r3, [r2, #8]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	da05      	bge.n	d0ec <__sfputc_r+0x18>
    d0e0:	6994      	ldr	r4, [r2, #24]
    d0e2:	42a3      	cmp	r3, r4
    d0e4:	db08      	blt.n	d0f8 <__sfputc_r+0x24>
    d0e6:	b2cb      	uxtb	r3, r1
    d0e8:	2b0a      	cmp	r3, #10
    d0ea:	d005      	beq.n	d0f8 <__sfputc_r+0x24>
    d0ec:	6813      	ldr	r3, [r2, #0]
    d0ee:	1c58      	adds	r0, r3, #1
    d0f0:	6010      	str	r0, [r2, #0]
    d0f2:	7019      	strb	r1, [r3, #0]
    d0f4:	b2c8      	uxtb	r0, r1
    d0f6:	bd10      	pop	{r4, pc}
    d0f8:	f001 f948 	bl	e38c <__swbuf_r>
    d0fc:	e7fb      	b.n	d0f6 <__sfputc_r+0x22>

0000d0fe <__sfputs_r>:
    d0fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d100:	0006      	movs	r6, r0
    d102:	000f      	movs	r7, r1
    d104:	0014      	movs	r4, r2
    d106:	18d5      	adds	r5, r2, r3
    d108:	42ac      	cmp	r4, r5
    d10a:	d101      	bne.n	d110 <__sfputs_r+0x12>
    d10c:	2000      	movs	r0, #0
    d10e:	e007      	b.n	d120 <__sfputs_r+0x22>
    d110:	7821      	ldrb	r1, [r4, #0]
    d112:	003a      	movs	r2, r7
    d114:	0030      	movs	r0, r6
    d116:	f7ff ffdd 	bl	d0d4 <__sfputc_r>
    d11a:	3401      	adds	r4, #1
    d11c:	1c43      	adds	r3, r0, #1
    d11e:	d1f3      	bne.n	d108 <__sfputs_r+0xa>
    d120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000d124 <_vfiprintf_r>:
    d124:	b5f0      	push	{r4, r5, r6, r7, lr}
    d126:	b09f      	sub	sp, #124	; 0x7c
    d128:	0006      	movs	r6, r0
    d12a:	000f      	movs	r7, r1
    d12c:	0014      	movs	r4, r2
    d12e:	9305      	str	r3, [sp, #20]
    d130:	2800      	cmp	r0, #0
    d132:	d004      	beq.n	d13e <_vfiprintf_r+0x1a>
    d134:	6983      	ldr	r3, [r0, #24]
    d136:	2b00      	cmp	r3, #0
    d138:	d101      	bne.n	d13e <_vfiprintf_r+0x1a>
    d13a:	f002 f987 	bl	f44c <__sinit>
    d13e:	4b7f      	ldr	r3, [pc, #508]	; (d33c <_vfiprintf_r+0x218>)
    d140:	429f      	cmp	r7, r3
    d142:	d15c      	bne.n	d1fe <_vfiprintf_r+0xda>
    d144:	6877      	ldr	r7, [r6, #4]
    d146:	89bb      	ldrh	r3, [r7, #12]
    d148:	071b      	lsls	r3, r3, #28
    d14a:	d562      	bpl.n	d212 <_vfiprintf_r+0xee>
    d14c:	693b      	ldr	r3, [r7, #16]
    d14e:	2b00      	cmp	r3, #0
    d150:	d05f      	beq.n	d212 <_vfiprintf_r+0xee>
    d152:	2300      	movs	r3, #0
    d154:	ad06      	add	r5, sp, #24
    d156:	616b      	str	r3, [r5, #20]
    d158:	3320      	adds	r3, #32
    d15a:	766b      	strb	r3, [r5, #25]
    d15c:	3310      	adds	r3, #16
    d15e:	76ab      	strb	r3, [r5, #26]
    d160:	9402      	str	r4, [sp, #8]
    d162:	9c02      	ldr	r4, [sp, #8]
    d164:	7823      	ldrb	r3, [r4, #0]
    d166:	2b00      	cmp	r3, #0
    d168:	d15d      	bne.n	d226 <_vfiprintf_r+0x102>
    d16a:	9b02      	ldr	r3, [sp, #8]
    d16c:	1ae3      	subs	r3, r4, r3
    d16e:	9304      	str	r3, [sp, #16]
    d170:	d00d      	beq.n	d18e <_vfiprintf_r+0x6a>
    d172:	9b04      	ldr	r3, [sp, #16]
    d174:	9a02      	ldr	r2, [sp, #8]
    d176:	0039      	movs	r1, r7
    d178:	0030      	movs	r0, r6
    d17a:	f7ff ffc0 	bl	d0fe <__sfputs_r>
    d17e:	1c43      	adds	r3, r0, #1
    d180:	d100      	bne.n	d184 <_vfiprintf_r+0x60>
    d182:	e0cc      	b.n	d31e <_vfiprintf_r+0x1fa>
    d184:	696a      	ldr	r2, [r5, #20]
    d186:	9b04      	ldr	r3, [sp, #16]
    d188:	4694      	mov	ip, r2
    d18a:	4463      	add	r3, ip
    d18c:	616b      	str	r3, [r5, #20]
    d18e:	7823      	ldrb	r3, [r4, #0]
    d190:	2b00      	cmp	r3, #0
    d192:	d100      	bne.n	d196 <_vfiprintf_r+0x72>
    d194:	e0c3      	b.n	d31e <_vfiprintf_r+0x1fa>
    d196:	2201      	movs	r2, #1
    d198:	2300      	movs	r3, #0
    d19a:	4252      	negs	r2, r2
    d19c:	606a      	str	r2, [r5, #4]
    d19e:	a902      	add	r1, sp, #8
    d1a0:	3254      	adds	r2, #84	; 0x54
    d1a2:	1852      	adds	r2, r2, r1
    d1a4:	3401      	adds	r4, #1
    d1a6:	602b      	str	r3, [r5, #0]
    d1a8:	60eb      	str	r3, [r5, #12]
    d1aa:	60ab      	str	r3, [r5, #8]
    d1ac:	7013      	strb	r3, [r2, #0]
    d1ae:	65ab      	str	r3, [r5, #88]	; 0x58
    d1b0:	7821      	ldrb	r1, [r4, #0]
    d1b2:	2205      	movs	r2, #5
    d1b4:	4862      	ldr	r0, [pc, #392]	; (d340 <_vfiprintf_r+0x21c>)
    d1b6:	f002 fa9d 	bl	f6f4 <memchr>
    d1ba:	1c63      	adds	r3, r4, #1
    d1bc:	469c      	mov	ip, r3
    d1be:	2800      	cmp	r0, #0
    d1c0:	d135      	bne.n	d22e <_vfiprintf_r+0x10a>
    d1c2:	6829      	ldr	r1, [r5, #0]
    d1c4:	06cb      	lsls	r3, r1, #27
    d1c6:	d504      	bpl.n	d1d2 <_vfiprintf_r+0xae>
    d1c8:	2353      	movs	r3, #83	; 0x53
    d1ca:	aa02      	add	r2, sp, #8
    d1cc:	3020      	adds	r0, #32
    d1ce:	189b      	adds	r3, r3, r2
    d1d0:	7018      	strb	r0, [r3, #0]
    d1d2:	070b      	lsls	r3, r1, #28
    d1d4:	d504      	bpl.n	d1e0 <_vfiprintf_r+0xbc>
    d1d6:	2353      	movs	r3, #83	; 0x53
    d1d8:	202b      	movs	r0, #43	; 0x2b
    d1da:	aa02      	add	r2, sp, #8
    d1dc:	189b      	adds	r3, r3, r2
    d1de:	7018      	strb	r0, [r3, #0]
    d1e0:	7823      	ldrb	r3, [r4, #0]
    d1e2:	2b2a      	cmp	r3, #42	; 0x2a
    d1e4:	d02c      	beq.n	d240 <_vfiprintf_r+0x11c>
    d1e6:	2000      	movs	r0, #0
    d1e8:	210a      	movs	r1, #10
    d1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1ec:	7822      	ldrb	r2, [r4, #0]
    d1ee:	3a30      	subs	r2, #48	; 0x30
    d1f0:	2a09      	cmp	r2, #9
    d1f2:	d800      	bhi.n	d1f6 <_vfiprintf_r+0xd2>
    d1f4:	e06b      	b.n	d2ce <_vfiprintf_r+0x1aa>
    d1f6:	2800      	cmp	r0, #0
    d1f8:	d02a      	beq.n	d250 <_vfiprintf_r+0x12c>
    d1fa:	9309      	str	r3, [sp, #36]	; 0x24
    d1fc:	e028      	b.n	d250 <_vfiprintf_r+0x12c>
    d1fe:	4b51      	ldr	r3, [pc, #324]	; (d344 <_vfiprintf_r+0x220>)
    d200:	429f      	cmp	r7, r3
    d202:	d101      	bne.n	d208 <_vfiprintf_r+0xe4>
    d204:	68b7      	ldr	r7, [r6, #8]
    d206:	e79e      	b.n	d146 <_vfiprintf_r+0x22>
    d208:	4b4f      	ldr	r3, [pc, #316]	; (d348 <_vfiprintf_r+0x224>)
    d20a:	429f      	cmp	r7, r3
    d20c:	d19b      	bne.n	d146 <_vfiprintf_r+0x22>
    d20e:	68f7      	ldr	r7, [r6, #12]
    d210:	e799      	b.n	d146 <_vfiprintf_r+0x22>
    d212:	0039      	movs	r1, r7
    d214:	0030      	movs	r0, r6
    d216:	f001 f91b 	bl	e450 <__swsetup_r>
    d21a:	2800      	cmp	r0, #0
    d21c:	d099      	beq.n	d152 <_vfiprintf_r+0x2e>
    d21e:	2001      	movs	r0, #1
    d220:	4240      	negs	r0, r0
    d222:	b01f      	add	sp, #124	; 0x7c
    d224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d226:	2b25      	cmp	r3, #37	; 0x25
    d228:	d09f      	beq.n	d16a <_vfiprintf_r+0x46>
    d22a:	3401      	adds	r4, #1
    d22c:	e79a      	b.n	d164 <_vfiprintf_r+0x40>
    d22e:	4b44      	ldr	r3, [pc, #272]	; (d340 <_vfiprintf_r+0x21c>)
    d230:	6829      	ldr	r1, [r5, #0]
    d232:	1ac0      	subs	r0, r0, r3
    d234:	2301      	movs	r3, #1
    d236:	4083      	lsls	r3, r0
    d238:	430b      	orrs	r3, r1
    d23a:	602b      	str	r3, [r5, #0]
    d23c:	4664      	mov	r4, ip
    d23e:	e7b7      	b.n	d1b0 <_vfiprintf_r+0x8c>
    d240:	9b05      	ldr	r3, [sp, #20]
    d242:	1d18      	adds	r0, r3, #4
    d244:	681b      	ldr	r3, [r3, #0]
    d246:	9005      	str	r0, [sp, #20]
    d248:	2b00      	cmp	r3, #0
    d24a:	db3a      	blt.n	d2c2 <_vfiprintf_r+0x19e>
    d24c:	9309      	str	r3, [sp, #36]	; 0x24
    d24e:	4664      	mov	r4, ip
    d250:	7823      	ldrb	r3, [r4, #0]
    d252:	2b2e      	cmp	r3, #46	; 0x2e
    d254:	d10b      	bne.n	d26e <_vfiprintf_r+0x14a>
    d256:	7863      	ldrb	r3, [r4, #1]
    d258:	1c62      	adds	r2, r4, #1
    d25a:	2b2a      	cmp	r3, #42	; 0x2a
    d25c:	d13f      	bne.n	d2de <_vfiprintf_r+0x1ba>
    d25e:	9b05      	ldr	r3, [sp, #20]
    d260:	3402      	adds	r4, #2
    d262:	1d1a      	adds	r2, r3, #4
    d264:	681b      	ldr	r3, [r3, #0]
    d266:	9205      	str	r2, [sp, #20]
    d268:	2b00      	cmp	r3, #0
    d26a:	db35      	blt.n	d2d8 <_vfiprintf_r+0x1b4>
    d26c:	9307      	str	r3, [sp, #28]
    d26e:	7821      	ldrb	r1, [r4, #0]
    d270:	2203      	movs	r2, #3
    d272:	4836      	ldr	r0, [pc, #216]	; (d34c <_vfiprintf_r+0x228>)
    d274:	f002 fa3e 	bl	f6f4 <memchr>
    d278:	2800      	cmp	r0, #0
    d27a:	d007      	beq.n	d28c <_vfiprintf_r+0x168>
    d27c:	4b33      	ldr	r3, [pc, #204]	; (d34c <_vfiprintf_r+0x228>)
    d27e:	682a      	ldr	r2, [r5, #0]
    d280:	1ac0      	subs	r0, r0, r3
    d282:	2340      	movs	r3, #64	; 0x40
    d284:	4083      	lsls	r3, r0
    d286:	4313      	orrs	r3, r2
    d288:	602b      	str	r3, [r5, #0]
    d28a:	3401      	adds	r4, #1
    d28c:	7821      	ldrb	r1, [r4, #0]
    d28e:	1c63      	adds	r3, r4, #1
    d290:	2206      	movs	r2, #6
    d292:	482f      	ldr	r0, [pc, #188]	; (d350 <_vfiprintf_r+0x22c>)
    d294:	9302      	str	r3, [sp, #8]
    d296:	7629      	strb	r1, [r5, #24]
    d298:	f002 fa2c 	bl	f6f4 <memchr>
    d29c:	2800      	cmp	r0, #0
    d29e:	d044      	beq.n	d32a <_vfiprintf_r+0x206>
    d2a0:	4b2c      	ldr	r3, [pc, #176]	; (d354 <_vfiprintf_r+0x230>)
    d2a2:	2b00      	cmp	r3, #0
    d2a4:	d12f      	bne.n	d306 <_vfiprintf_r+0x1e2>
    d2a6:	6829      	ldr	r1, [r5, #0]
    d2a8:	9b05      	ldr	r3, [sp, #20]
    d2aa:	2207      	movs	r2, #7
    d2ac:	05c9      	lsls	r1, r1, #23
    d2ae:	d528      	bpl.n	d302 <_vfiprintf_r+0x1de>
    d2b0:	189b      	adds	r3, r3, r2
    d2b2:	4393      	bics	r3, r2
    d2b4:	3308      	adds	r3, #8
    d2b6:	9305      	str	r3, [sp, #20]
    d2b8:	696b      	ldr	r3, [r5, #20]
    d2ba:	9a03      	ldr	r2, [sp, #12]
    d2bc:	189b      	adds	r3, r3, r2
    d2be:	616b      	str	r3, [r5, #20]
    d2c0:	e74f      	b.n	d162 <_vfiprintf_r+0x3e>
    d2c2:	425b      	negs	r3, r3
    d2c4:	60eb      	str	r3, [r5, #12]
    d2c6:	2302      	movs	r3, #2
    d2c8:	430b      	orrs	r3, r1
    d2ca:	602b      	str	r3, [r5, #0]
    d2cc:	e7bf      	b.n	d24e <_vfiprintf_r+0x12a>
    d2ce:	434b      	muls	r3, r1
    d2d0:	3401      	adds	r4, #1
    d2d2:	189b      	adds	r3, r3, r2
    d2d4:	2001      	movs	r0, #1
    d2d6:	e789      	b.n	d1ec <_vfiprintf_r+0xc8>
    d2d8:	2301      	movs	r3, #1
    d2da:	425b      	negs	r3, r3
    d2dc:	e7c6      	b.n	d26c <_vfiprintf_r+0x148>
    d2de:	2300      	movs	r3, #0
    d2e0:	0014      	movs	r4, r2
    d2e2:	200a      	movs	r0, #10
    d2e4:	001a      	movs	r2, r3
    d2e6:	606b      	str	r3, [r5, #4]
    d2e8:	7821      	ldrb	r1, [r4, #0]
    d2ea:	3930      	subs	r1, #48	; 0x30
    d2ec:	2909      	cmp	r1, #9
    d2ee:	d903      	bls.n	d2f8 <_vfiprintf_r+0x1d4>
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d0bc      	beq.n	d26e <_vfiprintf_r+0x14a>
    d2f4:	9207      	str	r2, [sp, #28]
    d2f6:	e7ba      	b.n	d26e <_vfiprintf_r+0x14a>
    d2f8:	4342      	muls	r2, r0
    d2fa:	3401      	adds	r4, #1
    d2fc:	1852      	adds	r2, r2, r1
    d2fe:	2301      	movs	r3, #1
    d300:	e7f2      	b.n	d2e8 <_vfiprintf_r+0x1c4>
    d302:	3307      	adds	r3, #7
    d304:	e7d5      	b.n	d2b2 <_vfiprintf_r+0x18e>
    d306:	ab05      	add	r3, sp, #20
    d308:	9300      	str	r3, [sp, #0]
    d30a:	003a      	movs	r2, r7
    d30c:	4b12      	ldr	r3, [pc, #72]	; (d358 <_vfiprintf_r+0x234>)
    d30e:	0029      	movs	r1, r5
    d310:	0030      	movs	r0, r6
    d312:	f000 f8bf 	bl	d494 <_printf_float>
    d316:	9003      	str	r0, [sp, #12]
    d318:	9b03      	ldr	r3, [sp, #12]
    d31a:	3301      	adds	r3, #1
    d31c:	d1cc      	bne.n	d2b8 <_vfiprintf_r+0x194>
    d31e:	89bb      	ldrh	r3, [r7, #12]
    d320:	065b      	lsls	r3, r3, #25
    d322:	d500      	bpl.n	d326 <_vfiprintf_r+0x202>
    d324:	e77b      	b.n	d21e <_vfiprintf_r+0xfa>
    d326:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d328:	e77b      	b.n	d222 <_vfiprintf_r+0xfe>
    d32a:	ab05      	add	r3, sp, #20
    d32c:	9300      	str	r3, [sp, #0]
    d32e:	003a      	movs	r2, r7
    d330:	4b09      	ldr	r3, [pc, #36]	; (d358 <_vfiprintf_r+0x234>)
    d332:	0029      	movs	r1, r5
    d334:	0030      	movs	r0, r6
    d336:	f000 fb67 	bl	da08 <_printf_i>
    d33a:	e7ec      	b.n	d316 <_vfiprintf_r+0x1f2>
    d33c:	00012b38 	.word	0x00012b38
    d340:	00012988 	.word	0x00012988
    d344:	00012b58 	.word	0x00012b58
    d348:	00012b18 	.word	0x00012b18
    d34c:	0001298e 	.word	0x0001298e
    d350:	00012992 	.word	0x00012992
    d354:	0000d495 	.word	0x0000d495
    d358:	0000d0ff 	.word	0x0000d0ff

0000d35c <__cvt>:
    d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d35e:	b08b      	sub	sp, #44	; 0x2c
    d360:	0014      	movs	r4, r2
    d362:	1e1d      	subs	r5, r3, #0
    d364:	9912      	ldr	r1, [sp, #72]	; 0x48
    d366:	da53      	bge.n	d410 <__cvt+0xb4>
    d368:	2480      	movs	r4, #128	; 0x80
    d36a:	0624      	lsls	r4, r4, #24
    d36c:	191b      	adds	r3, r3, r4
    d36e:	001d      	movs	r5, r3
    d370:	0014      	movs	r4, r2
    d372:	232d      	movs	r3, #45	; 0x2d
    d374:	700b      	strb	r3, [r1, #0]
    d376:	2320      	movs	r3, #32
    d378:	9e14      	ldr	r6, [sp, #80]	; 0x50
    d37a:	2203      	movs	r2, #3
    d37c:	439e      	bics	r6, r3
    d37e:	2e46      	cmp	r6, #70	; 0x46
    d380:	d007      	beq.n	d392 <__cvt+0x36>
    d382:	0033      	movs	r3, r6
    d384:	3b45      	subs	r3, #69	; 0x45
    d386:	4259      	negs	r1, r3
    d388:	414b      	adcs	r3, r1
    d38a:	9910      	ldr	r1, [sp, #64]	; 0x40
    d38c:	3a01      	subs	r2, #1
    d38e:	18cb      	adds	r3, r1, r3
    d390:	9310      	str	r3, [sp, #64]	; 0x40
    d392:	ab09      	add	r3, sp, #36	; 0x24
    d394:	9304      	str	r3, [sp, #16]
    d396:	ab08      	add	r3, sp, #32
    d398:	9303      	str	r3, [sp, #12]
    d39a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d39c:	9200      	str	r2, [sp, #0]
    d39e:	9302      	str	r3, [sp, #8]
    d3a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3a2:	0022      	movs	r2, r4
    d3a4:	9301      	str	r3, [sp, #4]
    d3a6:	002b      	movs	r3, r5
    d3a8:	f001 f970 	bl	e68c <_dtoa_r>
    d3ac:	0007      	movs	r7, r0
    d3ae:	2e47      	cmp	r6, #71	; 0x47
    d3b0:	d102      	bne.n	d3b8 <__cvt+0x5c>
    d3b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d3b4:	07db      	lsls	r3, r3, #31
    d3b6:	d524      	bpl.n	d402 <__cvt+0xa6>
    d3b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3ba:	18fb      	adds	r3, r7, r3
    d3bc:	9307      	str	r3, [sp, #28]
    d3be:	2e46      	cmp	r6, #70	; 0x46
    d3c0:	d114      	bne.n	d3ec <__cvt+0x90>
    d3c2:	783b      	ldrb	r3, [r7, #0]
    d3c4:	2b30      	cmp	r3, #48	; 0x30
    d3c6:	d10c      	bne.n	d3e2 <__cvt+0x86>
    d3c8:	2200      	movs	r2, #0
    d3ca:	2300      	movs	r3, #0
    d3cc:	0020      	movs	r0, r4
    d3ce:	0029      	movs	r1, r5
    d3d0:	f7fc fb96 	bl	9b00 <__aeabi_dcmpeq>
    d3d4:	2800      	cmp	r0, #0
    d3d6:	d104      	bne.n	d3e2 <__cvt+0x86>
    d3d8:	2301      	movs	r3, #1
    d3da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d3dc:	1a9b      	subs	r3, r3, r2
    d3de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d3e0:	6013      	str	r3, [r2, #0]
    d3e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d3e4:	9a07      	ldr	r2, [sp, #28]
    d3e6:	681b      	ldr	r3, [r3, #0]
    d3e8:	18d3      	adds	r3, r2, r3
    d3ea:	9307      	str	r3, [sp, #28]
    d3ec:	2200      	movs	r2, #0
    d3ee:	2300      	movs	r3, #0
    d3f0:	0020      	movs	r0, r4
    d3f2:	0029      	movs	r1, r5
    d3f4:	f7fc fb84 	bl	9b00 <__aeabi_dcmpeq>
    d3f8:	2230      	movs	r2, #48	; 0x30
    d3fa:	2800      	cmp	r0, #0
    d3fc:	d00d      	beq.n	d41a <__cvt+0xbe>
    d3fe:	9b07      	ldr	r3, [sp, #28]
    d400:	9309      	str	r3, [sp, #36]	; 0x24
    d402:	0038      	movs	r0, r7
    d404:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d406:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d408:	1bdb      	subs	r3, r3, r7
    d40a:	6013      	str	r3, [r2, #0]
    d40c:	b00b      	add	sp, #44	; 0x2c
    d40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d410:	2300      	movs	r3, #0
    d412:	e7af      	b.n	d374 <__cvt+0x18>
    d414:	1c59      	adds	r1, r3, #1
    d416:	9109      	str	r1, [sp, #36]	; 0x24
    d418:	701a      	strb	r2, [r3, #0]
    d41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d41c:	9907      	ldr	r1, [sp, #28]
    d41e:	4299      	cmp	r1, r3
    d420:	d8f8      	bhi.n	d414 <__cvt+0xb8>
    d422:	e7ee      	b.n	d402 <__cvt+0xa6>

0000d424 <__exponent>:
    d424:	b5f0      	push	{r4, r5, r6, r7, lr}
    d426:	232b      	movs	r3, #43	; 0x2b
    d428:	b085      	sub	sp, #20
    d42a:	0007      	movs	r7, r0
    d42c:	000c      	movs	r4, r1
    d42e:	7002      	strb	r2, [r0, #0]
    d430:	1c86      	adds	r6, r0, #2
    d432:	2900      	cmp	r1, #0
    d434:	da01      	bge.n	d43a <__exponent+0x16>
    d436:	232d      	movs	r3, #45	; 0x2d
    d438:	424c      	negs	r4, r1
    d43a:	707b      	strb	r3, [r7, #1]
    d43c:	2c09      	cmp	r4, #9
    d43e:	dd23      	ble.n	d488 <__exponent+0x64>
    d440:	ab02      	add	r3, sp, #8
    d442:	1ddd      	adds	r5, r3, #7
    d444:	1e6b      	subs	r3, r5, #1
    d446:	0020      	movs	r0, r4
    d448:	210a      	movs	r1, #10
    d44a:	9301      	str	r3, [sp, #4]
    d44c:	f7fc fb42 	bl	9ad4 <__aeabi_idivmod>
    d450:	1e6b      	subs	r3, r5, #1
    d452:	3130      	adds	r1, #48	; 0x30
    d454:	7019      	strb	r1, [r3, #0]
    d456:	0020      	movs	r0, r4
    d458:	210a      	movs	r1, #10
    d45a:	f7fc fa55 	bl	9908 <__divsi3>
    d45e:	0004      	movs	r4, r0
    d460:	2809      	cmp	r0, #9
    d462:	dc0a      	bgt.n	d47a <__exponent+0x56>
    d464:	3d02      	subs	r5, #2
    d466:	3430      	adds	r4, #48	; 0x30
    d468:	702c      	strb	r4, [r5, #0]
    d46a:	ab02      	add	r3, sp, #8
    d46c:	3307      	adds	r3, #7
    d46e:	0030      	movs	r0, r6
    d470:	42ab      	cmp	r3, r5
    d472:	d804      	bhi.n	d47e <__exponent+0x5a>
    d474:	1bc0      	subs	r0, r0, r7
    d476:	b005      	add	sp, #20
    d478:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d47a:	9d01      	ldr	r5, [sp, #4]
    d47c:	e7e2      	b.n	d444 <__exponent+0x20>
    d47e:	782b      	ldrb	r3, [r5, #0]
    d480:	3501      	adds	r5, #1
    d482:	7033      	strb	r3, [r6, #0]
    d484:	3601      	adds	r6, #1
    d486:	e7f0      	b.n	d46a <__exponent+0x46>
    d488:	2330      	movs	r3, #48	; 0x30
    d48a:	18e4      	adds	r4, r4, r3
    d48c:	7033      	strb	r3, [r6, #0]
    d48e:	1cb0      	adds	r0, r6, #2
    d490:	7074      	strb	r4, [r6, #1]
    d492:	e7ef      	b.n	d474 <__exponent+0x50>

0000d494 <_printf_float>:
    d494:	b5f0      	push	{r4, r5, r6, r7, lr}
    d496:	b095      	sub	sp, #84	; 0x54
    d498:	000c      	movs	r4, r1
    d49a:	920a      	str	r2, [sp, #40]	; 0x28
    d49c:	930b      	str	r3, [sp, #44]	; 0x2c
    d49e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    d4a0:	9009      	str	r0, [sp, #36]	; 0x24
    d4a2:	f002 f8af 	bl	f604 <_localeconv_r>
    d4a6:	6803      	ldr	r3, [r0, #0]
    d4a8:	0018      	movs	r0, r3
    d4aa:	930d      	str	r3, [sp, #52]	; 0x34
    d4ac:	f000 fc23 	bl	dcf6 <strlen>
    d4b0:	2300      	movs	r3, #0
    d4b2:	9312      	str	r3, [sp, #72]	; 0x48
    d4b4:	6823      	ldr	r3, [r4, #0]
    d4b6:	900e      	str	r0, [sp, #56]	; 0x38
    d4b8:	930c      	str	r3, [sp, #48]	; 0x30
    d4ba:	990c      	ldr	r1, [sp, #48]	; 0x30
    d4bc:	7e27      	ldrb	r7, [r4, #24]
    d4be:	682b      	ldr	r3, [r5, #0]
    d4c0:	2207      	movs	r2, #7
    d4c2:	05c9      	lsls	r1, r1, #23
    d4c4:	d547      	bpl.n	d556 <_printf_float+0xc2>
    d4c6:	189b      	adds	r3, r3, r2
    d4c8:	4393      	bics	r3, r2
    d4ca:	001a      	movs	r2, r3
    d4cc:	3208      	adds	r2, #8
    d4ce:	602a      	str	r2, [r5, #0]
    d4d0:	681a      	ldr	r2, [r3, #0]
    d4d2:	685b      	ldr	r3, [r3, #4]
    d4d4:	64a2      	str	r2, [r4, #72]	; 0x48
    d4d6:	64e3      	str	r3, [r4, #76]	; 0x4c
    d4d8:	2201      	movs	r2, #1
    d4da:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    d4dc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    d4de:	006b      	lsls	r3, r5, #1
    d4e0:	085b      	lsrs	r3, r3, #1
    d4e2:	930f      	str	r3, [sp, #60]	; 0x3c
    d4e4:	4252      	negs	r2, r2
    d4e6:	4ba7      	ldr	r3, [pc, #668]	; (d784 <_printf_float+0x2f0>)
    d4e8:	0030      	movs	r0, r6
    d4ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d4ec:	f7fe ff8c 	bl	c408 <__aeabi_dcmpun>
    d4f0:	2800      	cmp	r0, #0
    d4f2:	d000      	beq.n	d4f6 <_printf_float+0x62>
    d4f4:	e206      	b.n	d904 <_printf_float+0x470>
    d4f6:	2201      	movs	r2, #1
    d4f8:	4ba2      	ldr	r3, [pc, #648]	; (d784 <_printf_float+0x2f0>)
    d4fa:	4252      	negs	r2, r2
    d4fc:	0030      	movs	r0, r6
    d4fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d500:	f7fc fb0e 	bl	9b20 <__aeabi_dcmple>
    d504:	2800      	cmp	r0, #0
    d506:	d000      	beq.n	d50a <_printf_float+0x76>
    d508:	e1fc      	b.n	d904 <_printf_float+0x470>
    d50a:	2200      	movs	r2, #0
    d50c:	2300      	movs	r3, #0
    d50e:	0030      	movs	r0, r6
    d510:	0029      	movs	r1, r5
    d512:	f7fc fafb 	bl	9b0c <__aeabi_dcmplt>
    d516:	2800      	cmp	r0, #0
    d518:	d003      	beq.n	d522 <_printf_float+0x8e>
    d51a:	0023      	movs	r3, r4
    d51c:	222d      	movs	r2, #45	; 0x2d
    d51e:	3343      	adds	r3, #67	; 0x43
    d520:	701a      	strb	r2, [r3, #0]
    d522:	4d99      	ldr	r5, [pc, #612]	; (d788 <_printf_float+0x2f4>)
    d524:	2f47      	cmp	r7, #71	; 0x47
    d526:	d800      	bhi.n	d52a <_printf_float+0x96>
    d528:	4d98      	ldr	r5, [pc, #608]	; (d78c <_printf_float+0x2f8>)
    d52a:	2303      	movs	r3, #3
    d52c:	2600      	movs	r6, #0
    d52e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d530:	6123      	str	r3, [r4, #16]
    d532:	3301      	adds	r3, #1
    d534:	439a      	bics	r2, r3
    d536:	6022      	str	r2, [r4, #0]
    d538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d53a:	aa13      	add	r2, sp, #76	; 0x4c
    d53c:	9300      	str	r3, [sp, #0]
    d53e:	0021      	movs	r1, r4
    d540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d542:	9809      	ldr	r0, [sp, #36]	; 0x24
    d544:	f000 f9f2 	bl	d92c <_printf_common>
    d548:	1c43      	adds	r3, r0, #1
    d54a:	d000      	beq.n	d54e <_printf_float+0xba>
    d54c:	e09c      	b.n	d688 <_printf_float+0x1f4>
    d54e:	2001      	movs	r0, #1
    d550:	4240      	negs	r0, r0
    d552:	b015      	add	sp, #84	; 0x54
    d554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d556:	3307      	adds	r3, #7
    d558:	e7b6      	b.n	d4c8 <_printf_float+0x34>
    d55a:	2380      	movs	r3, #128	; 0x80
    d55c:	6862      	ldr	r2, [r4, #4]
    d55e:	00db      	lsls	r3, r3, #3
    d560:	1c51      	adds	r1, r2, #1
    d562:	d145      	bne.n	d5f0 <_printf_float+0x15c>
    d564:	3207      	adds	r2, #7
    d566:	6062      	str	r2, [r4, #4]
    d568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d56a:	2100      	movs	r1, #0
    d56c:	4313      	orrs	r3, r2
    d56e:	aa12      	add	r2, sp, #72	; 0x48
    d570:	9205      	str	r2, [sp, #20]
    d572:	aa11      	add	r2, sp, #68	; 0x44
    d574:	9203      	str	r2, [sp, #12]
    d576:	2223      	movs	r2, #35	; 0x23
    d578:	6023      	str	r3, [r4, #0]
    d57a:	9106      	str	r1, [sp, #24]
    d57c:	9301      	str	r3, [sp, #4]
    d57e:	a908      	add	r1, sp, #32
    d580:	6863      	ldr	r3, [r4, #4]
    d582:	1852      	adds	r2, r2, r1
    d584:	9202      	str	r2, [sp, #8]
    d586:	9300      	str	r3, [sp, #0]
    d588:	0032      	movs	r2, r6
    d58a:	002b      	movs	r3, r5
    d58c:	9704      	str	r7, [sp, #16]
    d58e:	9809      	ldr	r0, [sp, #36]	; 0x24
    d590:	f7ff fee4 	bl	d35c <__cvt>
    d594:	2320      	movs	r3, #32
    d596:	003a      	movs	r2, r7
    d598:	0005      	movs	r5, r0
    d59a:	439a      	bics	r2, r3
    d59c:	2a47      	cmp	r2, #71	; 0x47
    d59e:	d107      	bne.n	d5b0 <_printf_float+0x11c>
    d5a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d5a2:	1cda      	adds	r2, r3, #3
    d5a4:	db02      	blt.n	d5ac <_printf_float+0x118>
    d5a6:	6862      	ldr	r2, [r4, #4]
    d5a8:	4293      	cmp	r3, r2
    d5aa:	dd5b      	ble.n	d664 <_printf_float+0x1d0>
    d5ac:	3f02      	subs	r7, #2
    d5ae:	b2ff      	uxtb	r7, r7
    d5b0:	9911      	ldr	r1, [sp, #68]	; 0x44
    d5b2:	2f65      	cmp	r7, #101	; 0x65
    d5b4:	d83b      	bhi.n	d62e <_printf_float+0x19a>
    d5b6:	0020      	movs	r0, r4
    d5b8:	3901      	subs	r1, #1
    d5ba:	003a      	movs	r2, r7
    d5bc:	3050      	adds	r0, #80	; 0x50
    d5be:	9111      	str	r1, [sp, #68]	; 0x44
    d5c0:	f7ff ff30 	bl	d424 <__exponent>
    d5c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d5c6:	0006      	movs	r6, r0
    d5c8:	1883      	adds	r3, r0, r2
    d5ca:	6123      	str	r3, [r4, #16]
    d5cc:	2a01      	cmp	r2, #1
    d5ce:	dc02      	bgt.n	d5d6 <_printf_float+0x142>
    d5d0:	6822      	ldr	r2, [r4, #0]
    d5d2:	07d2      	lsls	r2, r2, #31
    d5d4:	d501      	bpl.n	d5da <_printf_float+0x146>
    d5d6:	3301      	adds	r3, #1
    d5d8:	6123      	str	r3, [r4, #16]
    d5da:	2323      	movs	r3, #35	; 0x23
    d5dc:	aa08      	add	r2, sp, #32
    d5de:	189b      	adds	r3, r3, r2
    d5e0:	781b      	ldrb	r3, [r3, #0]
    d5e2:	2b00      	cmp	r3, #0
    d5e4:	d0a8      	beq.n	d538 <_printf_float+0xa4>
    d5e6:	0023      	movs	r3, r4
    d5e8:	222d      	movs	r2, #45	; 0x2d
    d5ea:	3343      	adds	r3, #67	; 0x43
    d5ec:	701a      	strb	r2, [r3, #0]
    d5ee:	e7a3      	b.n	d538 <_printf_float+0xa4>
    d5f0:	2f67      	cmp	r7, #103	; 0x67
    d5f2:	d001      	beq.n	d5f8 <_printf_float+0x164>
    d5f4:	2f47      	cmp	r7, #71	; 0x47
    d5f6:	d1b7      	bne.n	d568 <_printf_float+0xd4>
    d5f8:	2a00      	cmp	r2, #0
    d5fa:	d016      	beq.n	d62a <_printf_float+0x196>
    d5fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    d5fe:	a808      	add	r0, sp, #32
    d600:	430b      	orrs	r3, r1
    d602:	2100      	movs	r1, #0
    d604:	9106      	str	r1, [sp, #24]
    d606:	a912      	add	r1, sp, #72	; 0x48
    d608:	9105      	str	r1, [sp, #20]
    d60a:	a911      	add	r1, sp, #68	; 0x44
    d60c:	9103      	str	r1, [sp, #12]
    d60e:	2123      	movs	r1, #35	; 0x23
    d610:	1809      	adds	r1, r1, r0
    d612:	6023      	str	r3, [r4, #0]
    d614:	9301      	str	r3, [sp, #4]
    d616:	9200      	str	r2, [sp, #0]
    d618:	002b      	movs	r3, r5
    d61a:	9704      	str	r7, [sp, #16]
    d61c:	9102      	str	r1, [sp, #8]
    d61e:	0032      	movs	r2, r6
    d620:	9809      	ldr	r0, [sp, #36]	; 0x24
    d622:	f7ff fe9b 	bl	d35c <__cvt>
    d626:	0005      	movs	r5, r0
    d628:	e7ba      	b.n	d5a0 <_printf_float+0x10c>
    d62a:	2201      	movs	r2, #1
    d62c:	e79b      	b.n	d566 <_printf_float+0xd2>
    d62e:	2f66      	cmp	r7, #102	; 0x66
    d630:	d119      	bne.n	d666 <_printf_float+0x1d2>
    d632:	6863      	ldr	r3, [r4, #4]
    d634:	2900      	cmp	r1, #0
    d636:	dd0c      	ble.n	d652 <_printf_float+0x1be>
    d638:	6121      	str	r1, [r4, #16]
    d63a:	2b00      	cmp	r3, #0
    d63c:	d102      	bne.n	d644 <_printf_float+0x1b0>
    d63e:	6822      	ldr	r2, [r4, #0]
    d640:	07d2      	lsls	r2, r2, #31
    d642:	d502      	bpl.n	d64a <_printf_float+0x1b6>
    d644:	3301      	adds	r3, #1
    d646:	185b      	adds	r3, r3, r1
    d648:	6123      	str	r3, [r4, #16]
    d64a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d64c:	2600      	movs	r6, #0
    d64e:	65a3      	str	r3, [r4, #88]	; 0x58
    d650:	e7c3      	b.n	d5da <_printf_float+0x146>
    d652:	2b00      	cmp	r3, #0
    d654:	d103      	bne.n	d65e <_printf_float+0x1ca>
    d656:	2201      	movs	r2, #1
    d658:	6821      	ldr	r1, [r4, #0]
    d65a:	4211      	tst	r1, r2
    d65c:	d000      	beq.n	d660 <_printf_float+0x1cc>
    d65e:	1c9a      	adds	r2, r3, #2
    d660:	6122      	str	r2, [r4, #16]
    d662:	e7f2      	b.n	d64a <_printf_float+0x1b6>
    d664:	2767      	movs	r7, #103	; 0x67
    d666:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d668:	9812      	ldr	r0, [sp, #72]	; 0x48
    d66a:	4283      	cmp	r3, r0
    d66c:	db05      	blt.n	d67a <_printf_float+0x1e6>
    d66e:	6822      	ldr	r2, [r4, #0]
    d670:	6123      	str	r3, [r4, #16]
    d672:	07d2      	lsls	r2, r2, #31
    d674:	d5e9      	bpl.n	d64a <_printf_float+0x1b6>
    d676:	3301      	adds	r3, #1
    d678:	e7e6      	b.n	d648 <_printf_float+0x1b4>
    d67a:	2201      	movs	r2, #1
    d67c:	2b00      	cmp	r3, #0
    d67e:	dc01      	bgt.n	d684 <_printf_float+0x1f0>
    d680:	1892      	adds	r2, r2, r2
    d682:	1ad2      	subs	r2, r2, r3
    d684:	1812      	adds	r2, r2, r0
    d686:	e7eb      	b.n	d660 <_printf_float+0x1cc>
    d688:	6822      	ldr	r2, [r4, #0]
    d68a:	0553      	lsls	r3, r2, #21
    d68c:	d408      	bmi.n	d6a0 <_printf_float+0x20c>
    d68e:	6923      	ldr	r3, [r4, #16]
    d690:	002a      	movs	r2, r5
    d692:	990a      	ldr	r1, [sp, #40]	; 0x28
    d694:	9809      	ldr	r0, [sp, #36]	; 0x24
    d696:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d698:	47a8      	blx	r5
    d69a:	1c43      	adds	r3, r0, #1
    d69c:	d129      	bne.n	d6f2 <_printf_float+0x25e>
    d69e:	e756      	b.n	d54e <_printf_float+0xba>
    d6a0:	2f65      	cmp	r7, #101	; 0x65
    d6a2:	d800      	bhi.n	d6a6 <_printf_float+0x212>
    d6a4:	e0dc      	b.n	d860 <_printf_float+0x3cc>
    d6a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    d6a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    d6aa:	2200      	movs	r2, #0
    d6ac:	2300      	movs	r3, #0
    d6ae:	f7fc fa27 	bl	9b00 <__aeabi_dcmpeq>
    d6b2:	2800      	cmp	r0, #0
    d6b4:	d035      	beq.n	d722 <_printf_float+0x28e>
    d6b6:	2301      	movs	r3, #1
    d6b8:	4a35      	ldr	r2, [pc, #212]	; (d790 <_printf_float+0x2fc>)
    d6ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    d6bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    d6be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d6c0:	47a8      	blx	r5
    d6c2:	1c43      	adds	r3, r0, #1
    d6c4:	d100      	bne.n	d6c8 <_printf_float+0x234>
    d6c6:	e742      	b.n	d54e <_printf_float+0xba>
    d6c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d6ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d6cc:	4293      	cmp	r3, r2
    d6ce:	db02      	blt.n	d6d6 <_printf_float+0x242>
    d6d0:	6823      	ldr	r3, [r4, #0]
    d6d2:	07db      	lsls	r3, r3, #31
    d6d4:	d50d      	bpl.n	d6f2 <_printf_float+0x25e>
    d6d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d6d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d6da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d6dc:	990a      	ldr	r1, [sp, #40]	; 0x28
    d6de:	9809      	ldr	r0, [sp, #36]	; 0x24
    d6e0:	47a8      	blx	r5
    d6e2:	2500      	movs	r5, #0
    d6e4:	1c43      	adds	r3, r0, #1
    d6e6:	d100      	bne.n	d6ea <_printf_float+0x256>
    d6e8:	e731      	b.n	d54e <_printf_float+0xba>
    d6ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d6ec:	3b01      	subs	r3, #1
    d6ee:	429d      	cmp	r5, r3
    d6f0:	db0b      	blt.n	d70a <_printf_float+0x276>
    d6f2:	6823      	ldr	r3, [r4, #0]
    d6f4:	2500      	movs	r5, #0
    d6f6:	079b      	lsls	r3, r3, #30
    d6f8:	d500      	bpl.n	d6fc <_printf_float+0x268>
    d6fa:	e0fd      	b.n	d8f8 <_printf_float+0x464>
    d6fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d6fe:	68e0      	ldr	r0, [r4, #12]
    d700:	4298      	cmp	r0, r3
    d702:	db00      	blt.n	d706 <_printf_float+0x272>
    d704:	e725      	b.n	d552 <_printf_float+0xbe>
    d706:	0018      	movs	r0, r3
    d708:	e723      	b.n	d552 <_printf_float+0xbe>
    d70a:	0022      	movs	r2, r4
    d70c:	2301      	movs	r3, #1
    d70e:	321a      	adds	r2, #26
    d710:	990a      	ldr	r1, [sp, #40]	; 0x28
    d712:	9809      	ldr	r0, [sp, #36]	; 0x24
    d714:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d716:	47b0      	blx	r6
    d718:	1c43      	adds	r3, r0, #1
    d71a:	d100      	bne.n	d71e <_printf_float+0x28a>
    d71c:	e717      	b.n	d54e <_printf_float+0xba>
    d71e:	3501      	adds	r5, #1
    d720:	e7e3      	b.n	d6ea <_printf_float+0x256>
    d722:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d724:	2b00      	cmp	r3, #0
    d726:	dc35      	bgt.n	d794 <_printf_float+0x300>
    d728:	2301      	movs	r3, #1
    d72a:	4a19      	ldr	r2, [pc, #100]	; (d790 <_printf_float+0x2fc>)
    d72c:	990a      	ldr	r1, [sp, #40]	; 0x28
    d72e:	9809      	ldr	r0, [sp, #36]	; 0x24
    d730:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d732:	47b0      	blx	r6
    d734:	1c43      	adds	r3, r0, #1
    d736:	d100      	bne.n	d73a <_printf_float+0x2a6>
    d738:	e709      	b.n	d54e <_printf_float+0xba>
    d73a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d73c:	2b00      	cmp	r3, #0
    d73e:	d105      	bne.n	d74c <_printf_float+0x2b8>
    d740:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d742:	2b00      	cmp	r3, #0
    d744:	d102      	bne.n	d74c <_printf_float+0x2b8>
    d746:	6823      	ldr	r3, [r4, #0]
    d748:	07db      	lsls	r3, r3, #31
    d74a:	d5d2      	bpl.n	d6f2 <_printf_float+0x25e>
    d74c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d74e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d752:	990a      	ldr	r1, [sp, #40]	; 0x28
    d754:	9809      	ldr	r0, [sp, #36]	; 0x24
    d756:	47b0      	blx	r6
    d758:	2600      	movs	r6, #0
    d75a:	1c43      	adds	r3, r0, #1
    d75c:	d100      	bne.n	d760 <_printf_float+0x2cc>
    d75e:	e6f6      	b.n	d54e <_printf_float+0xba>
    d760:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d762:	425b      	negs	r3, r3
    d764:	429e      	cmp	r6, r3
    d766:	db01      	blt.n	d76c <_printf_float+0x2d8>
    d768:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d76a:	e791      	b.n	d690 <_printf_float+0x1fc>
    d76c:	0022      	movs	r2, r4
    d76e:	2301      	movs	r3, #1
    d770:	321a      	adds	r2, #26
    d772:	990a      	ldr	r1, [sp, #40]	; 0x28
    d774:	9809      	ldr	r0, [sp, #36]	; 0x24
    d776:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d778:	47b8      	blx	r7
    d77a:	1c43      	adds	r3, r0, #1
    d77c:	d100      	bne.n	d780 <_printf_float+0x2ec>
    d77e:	e6e6      	b.n	d54e <_printf_float+0xba>
    d780:	3601      	adds	r6, #1
    d782:	e7ed      	b.n	d760 <_printf_float+0x2cc>
    d784:	7fefffff 	.word	0x7fefffff
    d788:	0001299d 	.word	0x0001299d
    d78c:	00012999 	.word	0x00012999
    d790:	00010e88 	.word	0x00010e88
    d794:	6da3      	ldr	r3, [r4, #88]	; 0x58
    d796:	9e12      	ldr	r6, [sp, #72]	; 0x48
    d798:	429e      	cmp	r6, r3
    d79a:	dd00      	ble.n	d79e <_printf_float+0x30a>
    d79c:	001e      	movs	r6, r3
    d79e:	2e00      	cmp	r6, #0
    d7a0:	dc35      	bgt.n	d80e <_printf_float+0x37a>
    d7a2:	2300      	movs	r3, #0
    d7a4:	930c      	str	r3, [sp, #48]	; 0x30
    d7a6:	43f3      	mvns	r3, r6
    d7a8:	17db      	asrs	r3, r3, #31
    d7aa:	930f      	str	r3, [sp, #60]	; 0x3c
    d7ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d7ae:	6da7      	ldr	r7, [r4, #88]	; 0x58
    d7b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d7b2:	4033      	ands	r3, r6
    d7b4:	1afb      	subs	r3, r7, r3
    d7b6:	429a      	cmp	r2, r3
    d7b8:	db32      	blt.n	d820 <_printf_float+0x38c>
    d7ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d7bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d7be:	4293      	cmp	r3, r2
    d7c0:	db3c      	blt.n	d83c <_printf_float+0x3a8>
    d7c2:	6823      	ldr	r3, [r4, #0]
    d7c4:	07db      	lsls	r3, r3, #31
    d7c6:	d439      	bmi.n	d83c <_printf_float+0x3a8>
    d7c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
    d7ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d7cc:	1bf3      	subs	r3, r6, r7
    d7ce:	1ab6      	subs	r6, r6, r2
    d7d0:	429e      	cmp	r6, r3
    d7d2:	dd00      	ble.n	d7d6 <_printf_float+0x342>
    d7d4:	001e      	movs	r6, r3
    d7d6:	2e00      	cmp	r6, #0
    d7d8:	dc39      	bgt.n	d84e <_printf_float+0x3ba>
    d7da:	43f7      	mvns	r7, r6
    d7dc:	2500      	movs	r5, #0
    d7de:	17fb      	asrs	r3, r7, #31
    d7e0:	930c      	str	r3, [sp, #48]	; 0x30
    d7e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d7e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d7e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    d7e8:	1a9b      	subs	r3, r3, r2
    d7ea:	0032      	movs	r2, r6
    d7ec:	400a      	ands	r2, r1
    d7ee:	1a9b      	subs	r3, r3, r2
    d7f0:	429d      	cmp	r5, r3
    d7f2:	db00      	blt.n	d7f6 <_printf_float+0x362>
    d7f4:	e77d      	b.n	d6f2 <_printf_float+0x25e>
    d7f6:	0022      	movs	r2, r4
    d7f8:	2301      	movs	r3, #1
    d7fa:	321a      	adds	r2, #26
    d7fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    d7fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    d800:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d802:	47b8      	blx	r7
    d804:	1c43      	adds	r3, r0, #1
    d806:	d100      	bne.n	d80a <_printf_float+0x376>
    d808:	e6a1      	b.n	d54e <_printf_float+0xba>
    d80a:	3501      	adds	r5, #1
    d80c:	e7e9      	b.n	d7e2 <_printf_float+0x34e>
    d80e:	0033      	movs	r3, r6
    d810:	002a      	movs	r2, r5
    d812:	990a      	ldr	r1, [sp, #40]	; 0x28
    d814:	9809      	ldr	r0, [sp, #36]	; 0x24
    d816:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d818:	47b8      	blx	r7
    d81a:	1c43      	adds	r3, r0, #1
    d81c:	d1c1      	bne.n	d7a2 <_printf_float+0x30e>
    d81e:	e696      	b.n	d54e <_printf_float+0xba>
    d820:	0022      	movs	r2, r4
    d822:	2301      	movs	r3, #1
    d824:	321a      	adds	r2, #26
    d826:	990a      	ldr	r1, [sp, #40]	; 0x28
    d828:	9809      	ldr	r0, [sp, #36]	; 0x24
    d82a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d82c:	47b8      	blx	r7
    d82e:	1c43      	adds	r3, r0, #1
    d830:	d100      	bne.n	d834 <_printf_float+0x3a0>
    d832:	e68c      	b.n	d54e <_printf_float+0xba>
    d834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d836:	3301      	adds	r3, #1
    d838:	930c      	str	r3, [sp, #48]	; 0x30
    d83a:	e7b7      	b.n	d7ac <_printf_float+0x318>
    d83c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d83e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d840:	990a      	ldr	r1, [sp, #40]	; 0x28
    d842:	9809      	ldr	r0, [sp, #36]	; 0x24
    d844:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d846:	47b0      	blx	r6
    d848:	1c43      	adds	r3, r0, #1
    d84a:	d1bd      	bne.n	d7c8 <_printf_float+0x334>
    d84c:	e67f      	b.n	d54e <_printf_float+0xba>
    d84e:	19ea      	adds	r2, r5, r7
    d850:	0033      	movs	r3, r6
    d852:	990a      	ldr	r1, [sp, #40]	; 0x28
    d854:	9809      	ldr	r0, [sp, #36]	; 0x24
    d856:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d858:	47a8      	blx	r5
    d85a:	1c43      	adds	r3, r0, #1
    d85c:	d1bd      	bne.n	d7da <_printf_float+0x346>
    d85e:	e676      	b.n	d54e <_printf_float+0xba>
    d860:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d862:	2b01      	cmp	r3, #1
    d864:	dc02      	bgt.n	d86c <_printf_float+0x3d8>
    d866:	2301      	movs	r3, #1
    d868:	421a      	tst	r2, r3
    d86a:	d038      	beq.n	d8de <_printf_float+0x44a>
    d86c:	2301      	movs	r3, #1
    d86e:	002a      	movs	r2, r5
    d870:	990a      	ldr	r1, [sp, #40]	; 0x28
    d872:	9809      	ldr	r0, [sp, #36]	; 0x24
    d874:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d876:	47b8      	blx	r7
    d878:	1c43      	adds	r3, r0, #1
    d87a:	d100      	bne.n	d87e <_printf_float+0x3ea>
    d87c:	e667      	b.n	d54e <_printf_float+0xba>
    d87e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d882:	990a      	ldr	r1, [sp, #40]	; 0x28
    d884:	9809      	ldr	r0, [sp, #36]	; 0x24
    d886:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d888:	47b8      	blx	r7
    d88a:	1c43      	adds	r3, r0, #1
    d88c:	d100      	bne.n	d890 <_printf_float+0x3fc>
    d88e:	e65e      	b.n	d54e <_printf_float+0xba>
    d890:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    d892:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    d894:	2200      	movs	r2, #0
    d896:	2300      	movs	r3, #0
    d898:	f7fc f932 	bl	9b00 <__aeabi_dcmpeq>
    d89c:	2800      	cmp	r0, #0
    d89e:	d008      	beq.n	d8b2 <_printf_float+0x41e>
    d8a0:	2500      	movs	r5, #0
    d8a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d8a4:	3b01      	subs	r3, #1
    d8a6:	429d      	cmp	r5, r3
    d8a8:	db0d      	blt.n	d8c6 <_printf_float+0x432>
    d8aa:	0022      	movs	r2, r4
    d8ac:	0033      	movs	r3, r6
    d8ae:	3250      	adds	r2, #80	; 0x50
    d8b0:	e6ef      	b.n	d692 <_printf_float+0x1fe>
    d8b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d8b4:	1c6a      	adds	r2, r5, #1
    d8b6:	3b01      	subs	r3, #1
    d8b8:	990a      	ldr	r1, [sp, #40]	; 0x28
    d8ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d8be:	47a8      	blx	r5
    d8c0:	1c43      	adds	r3, r0, #1
    d8c2:	d1f2      	bne.n	d8aa <_printf_float+0x416>
    d8c4:	e643      	b.n	d54e <_printf_float+0xba>
    d8c6:	0022      	movs	r2, r4
    d8c8:	2301      	movs	r3, #1
    d8ca:	321a      	adds	r2, #26
    d8cc:	990a      	ldr	r1, [sp, #40]	; 0x28
    d8ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d8d2:	47b8      	blx	r7
    d8d4:	1c43      	adds	r3, r0, #1
    d8d6:	d100      	bne.n	d8da <_printf_float+0x446>
    d8d8:	e639      	b.n	d54e <_printf_float+0xba>
    d8da:	3501      	adds	r5, #1
    d8dc:	e7e1      	b.n	d8a2 <_printf_float+0x40e>
    d8de:	002a      	movs	r2, r5
    d8e0:	e7ea      	b.n	d8b8 <_printf_float+0x424>
    d8e2:	0022      	movs	r2, r4
    d8e4:	2301      	movs	r3, #1
    d8e6:	3219      	adds	r2, #25
    d8e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    d8ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d8ee:	47b0      	blx	r6
    d8f0:	1c43      	adds	r3, r0, #1
    d8f2:	d100      	bne.n	d8f6 <_printf_float+0x462>
    d8f4:	e62b      	b.n	d54e <_printf_float+0xba>
    d8f6:	3501      	adds	r5, #1
    d8f8:	68e3      	ldr	r3, [r4, #12]
    d8fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d8fc:	1a9b      	subs	r3, r3, r2
    d8fe:	429d      	cmp	r5, r3
    d900:	dbef      	blt.n	d8e2 <_printf_float+0x44e>
    d902:	e6fb      	b.n	d6fc <_printf_float+0x268>
    d904:	0032      	movs	r2, r6
    d906:	002b      	movs	r3, r5
    d908:	0030      	movs	r0, r6
    d90a:	0029      	movs	r1, r5
    d90c:	f7fe fd7c 	bl	c408 <__aeabi_dcmpun>
    d910:	2800      	cmp	r0, #0
    d912:	d100      	bne.n	d916 <_printf_float+0x482>
    d914:	e621      	b.n	d55a <_printf_float+0xc6>
    d916:	4d03      	ldr	r5, [pc, #12]	; (d924 <_printf_float+0x490>)
    d918:	2f47      	cmp	r7, #71	; 0x47
    d91a:	d900      	bls.n	d91e <_printf_float+0x48a>
    d91c:	e605      	b.n	d52a <_printf_float+0x96>
    d91e:	4d02      	ldr	r5, [pc, #8]	; (d928 <_printf_float+0x494>)
    d920:	e603      	b.n	d52a <_printf_float+0x96>
    d922:	46c0      	nop			; (mov r8, r8)
    d924:	000129a5 	.word	0x000129a5
    d928:	000129a1 	.word	0x000129a1

0000d92c <_printf_common>:
    d92c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d92e:	0015      	movs	r5, r2
    d930:	9301      	str	r3, [sp, #4]
    d932:	688a      	ldr	r2, [r1, #8]
    d934:	690b      	ldr	r3, [r1, #16]
    d936:	9000      	str	r0, [sp, #0]
    d938:	000c      	movs	r4, r1
    d93a:	4293      	cmp	r3, r2
    d93c:	da00      	bge.n	d940 <_printf_common+0x14>
    d93e:	0013      	movs	r3, r2
    d940:	0022      	movs	r2, r4
    d942:	602b      	str	r3, [r5, #0]
    d944:	3243      	adds	r2, #67	; 0x43
    d946:	7812      	ldrb	r2, [r2, #0]
    d948:	2a00      	cmp	r2, #0
    d94a:	d001      	beq.n	d950 <_printf_common+0x24>
    d94c:	3301      	adds	r3, #1
    d94e:	602b      	str	r3, [r5, #0]
    d950:	6823      	ldr	r3, [r4, #0]
    d952:	069b      	lsls	r3, r3, #26
    d954:	d502      	bpl.n	d95c <_printf_common+0x30>
    d956:	682b      	ldr	r3, [r5, #0]
    d958:	3302      	adds	r3, #2
    d95a:	602b      	str	r3, [r5, #0]
    d95c:	2706      	movs	r7, #6
    d95e:	6823      	ldr	r3, [r4, #0]
    d960:	401f      	ands	r7, r3
    d962:	d027      	beq.n	d9b4 <_printf_common+0x88>
    d964:	0023      	movs	r3, r4
    d966:	3343      	adds	r3, #67	; 0x43
    d968:	781b      	ldrb	r3, [r3, #0]
    d96a:	1e5a      	subs	r2, r3, #1
    d96c:	4193      	sbcs	r3, r2
    d96e:	6822      	ldr	r2, [r4, #0]
    d970:	0692      	lsls	r2, r2, #26
    d972:	d430      	bmi.n	d9d6 <_printf_common+0xaa>
    d974:	0022      	movs	r2, r4
    d976:	9901      	ldr	r1, [sp, #4]
    d978:	3243      	adds	r2, #67	; 0x43
    d97a:	9800      	ldr	r0, [sp, #0]
    d97c:	9e08      	ldr	r6, [sp, #32]
    d97e:	47b0      	blx	r6
    d980:	1c43      	adds	r3, r0, #1
    d982:	d025      	beq.n	d9d0 <_printf_common+0xa4>
    d984:	2306      	movs	r3, #6
    d986:	6820      	ldr	r0, [r4, #0]
    d988:	682a      	ldr	r2, [r5, #0]
    d98a:	68e1      	ldr	r1, [r4, #12]
    d98c:	4003      	ands	r3, r0
    d98e:	2500      	movs	r5, #0
    d990:	2b04      	cmp	r3, #4
    d992:	d103      	bne.n	d99c <_printf_common+0x70>
    d994:	1a8d      	subs	r5, r1, r2
    d996:	43eb      	mvns	r3, r5
    d998:	17db      	asrs	r3, r3, #31
    d99a:	401d      	ands	r5, r3
    d99c:	68a3      	ldr	r3, [r4, #8]
    d99e:	6922      	ldr	r2, [r4, #16]
    d9a0:	4293      	cmp	r3, r2
    d9a2:	dd01      	ble.n	d9a8 <_printf_common+0x7c>
    d9a4:	1a9b      	subs	r3, r3, r2
    d9a6:	18ed      	adds	r5, r5, r3
    d9a8:	2700      	movs	r7, #0
    d9aa:	42bd      	cmp	r5, r7
    d9ac:	d120      	bne.n	d9f0 <_printf_common+0xc4>
    d9ae:	2000      	movs	r0, #0
    d9b0:	e010      	b.n	d9d4 <_printf_common+0xa8>
    d9b2:	3701      	adds	r7, #1
    d9b4:	68e3      	ldr	r3, [r4, #12]
    d9b6:	682a      	ldr	r2, [r5, #0]
    d9b8:	1a9b      	subs	r3, r3, r2
    d9ba:	429f      	cmp	r7, r3
    d9bc:	dad2      	bge.n	d964 <_printf_common+0x38>
    d9be:	0022      	movs	r2, r4
    d9c0:	2301      	movs	r3, #1
    d9c2:	3219      	adds	r2, #25
    d9c4:	9901      	ldr	r1, [sp, #4]
    d9c6:	9800      	ldr	r0, [sp, #0]
    d9c8:	9e08      	ldr	r6, [sp, #32]
    d9ca:	47b0      	blx	r6
    d9cc:	1c43      	adds	r3, r0, #1
    d9ce:	d1f0      	bne.n	d9b2 <_printf_common+0x86>
    d9d0:	2001      	movs	r0, #1
    d9d2:	4240      	negs	r0, r0
    d9d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d9d6:	2030      	movs	r0, #48	; 0x30
    d9d8:	18e1      	adds	r1, r4, r3
    d9da:	3143      	adds	r1, #67	; 0x43
    d9dc:	7008      	strb	r0, [r1, #0]
    d9de:	0021      	movs	r1, r4
    d9e0:	1c5a      	adds	r2, r3, #1
    d9e2:	3145      	adds	r1, #69	; 0x45
    d9e4:	7809      	ldrb	r1, [r1, #0]
    d9e6:	18a2      	adds	r2, r4, r2
    d9e8:	3243      	adds	r2, #67	; 0x43
    d9ea:	3302      	adds	r3, #2
    d9ec:	7011      	strb	r1, [r2, #0]
    d9ee:	e7c1      	b.n	d974 <_printf_common+0x48>
    d9f0:	0022      	movs	r2, r4
    d9f2:	2301      	movs	r3, #1
    d9f4:	321a      	adds	r2, #26
    d9f6:	9901      	ldr	r1, [sp, #4]
    d9f8:	9800      	ldr	r0, [sp, #0]
    d9fa:	9e08      	ldr	r6, [sp, #32]
    d9fc:	47b0      	blx	r6
    d9fe:	1c43      	adds	r3, r0, #1
    da00:	d0e6      	beq.n	d9d0 <_printf_common+0xa4>
    da02:	3701      	adds	r7, #1
    da04:	e7d1      	b.n	d9aa <_printf_common+0x7e>
	...

0000da08 <_printf_i>:
    da08:	b5f0      	push	{r4, r5, r6, r7, lr}
    da0a:	b08b      	sub	sp, #44	; 0x2c
    da0c:	9206      	str	r2, [sp, #24]
    da0e:	000a      	movs	r2, r1
    da10:	3243      	adds	r2, #67	; 0x43
    da12:	9307      	str	r3, [sp, #28]
    da14:	9005      	str	r0, [sp, #20]
    da16:	9204      	str	r2, [sp, #16]
    da18:	7e0a      	ldrb	r2, [r1, #24]
    da1a:	000c      	movs	r4, r1
    da1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    da1e:	2a6e      	cmp	r2, #110	; 0x6e
    da20:	d100      	bne.n	da24 <_printf_i+0x1c>
    da22:	e08f      	b.n	db44 <_printf_i+0x13c>
    da24:	d817      	bhi.n	da56 <_printf_i+0x4e>
    da26:	2a63      	cmp	r2, #99	; 0x63
    da28:	d02c      	beq.n	da84 <_printf_i+0x7c>
    da2a:	d808      	bhi.n	da3e <_printf_i+0x36>
    da2c:	2a00      	cmp	r2, #0
    da2e:	d100      	bne.n	da32 <_printf_i+0x2a>
    da30:	e099      	b.n	db66 <_printf_i+0x15e>
    da32:	2a58      	cmp	r2, #88	; 0x58
    da34:	d054      	beq.n	dae0 <_printf_i+0xd8>
    da36:	0026      	movs	r6, r4
    da38:	3642      	adds	r6, #66	; 0x42
    da3a:	7032      	strb	r2, [r6, #0]
    da3c:	e029      	b.n	da92 <_printf_i+0x8a>
    da3e:	2a64      	cmp	r2, #100	; 0x64
    da40:	d001      	beq.n	da46 <_printf_i+0x3e>
    da42:	2a69      	cmp	r2, #105	; 0x69
    da44:	d1f7      	bne.n	da36 <_printf_i+0x2e>
    da46:	6821      	ldr	r1, [r4, #0]
    da48:	681a      	ldr	r2, [r3, #0]
    da4a:	0608      	lsls	r0, r1, #24
    da4c:	d523      	bpl.n	da96 <_printf_i+0x8e>
    da4e:	1d11      	adds	r1, r2, #4
    da50:	6019      	str	r1, [r3, #0]
    da52:	6815      	ldr	r5, [r2, #0]
    da54:	e025      	b.n	daa2 <_printf_i+0x9a>
    da56:	2a73      	cmp	r2, #115	; 0x73
    da58:	d100      	bne.n	da5c <_printf_i+0x54>
    da5a:	e088      	b.n	db6e <_printf_i+0x166>
    da5c:	d808      	bhi.n	da70 <_printf_i+0x68>
    da5e:	2a6f      	cmp	r2, #111	; 0x6f
    da60:	d029      	beq.n	dab6 <_printf_i+0xae>
    da62:	2a70      	cmp	r2, #112	; 0x70
    da64:	d1e7      	bne.n	da36 <_printf_i+0x2e>
    da66:	2220      	movs	r2, #32
    da68:	6809      	ldr	r1, [r1, #0]
    da6a:	430a      	orrs	r2, r1
    da6c:	6022      	str	r2, [r4, #0]
    da6e:	e003      	b.n	da78 <_printf_i+0x70>
    da70:	2a75      	cmp	r2, #117	; 0x75
    da72:	d020      	beq.n	dab6 <_printf_i+0xae>
    da74:	2a78      	cmp	r2, #120	; 0x78
    da76:	d1de      	bne.n	da36 <_printf_i+0x2e>
    da78:	0022      	movs	r2, r4
    da7a:	2178      	movs	r1, #120	; 0x78
    da7c:	3245      	adds	r2, #69	; 0x45
    da7e:	7011      	strb	r1, [r2, #0]
    da80:	4a6c      	ldr	r2, [pc, #432]	; (dc34 <_printf_i+0x22c>)
    da82:	e030      	b.n	dae6 <_printf_i+0xde>
    da84:	000e      	movs	r6, r1
    da86:	681a      	ldr	r2, [r3, #0]
    da88:	3642      	adds	r6, #66	; 0x42
    da8a:	1d11      	adds	r1, r2, #4
    da8c:	6019      	str	r1, [r3, #0]
    da8e:	6813      	ldr	r3, [r2, #0]
    da90:	7033      	strb	r3, [r6, #0]
    da92:	2301      	movs	r3, #1
    da94:	e079      	b.n	db8a <_printf_i+0x182>
    da96:	0649      	lsls	r1, r1, #25
    da98:	d5d9      	bpl.n	da4e <_printf_i+0x46>
    da9a:	1d11      	adds	r1, r2, #4
    da9c:	6019      	str	r1, [r3, #0]
    da9e:	2300      	movs	r3, #0
    daa0:	5ed5      	ldrsh	r5, [r2, r3]
    daa2:	2d00      	cmp	r5, #0
    daa4:	da03      	bge.n	daae <_printf_i+0xa6>
    daa6:	232d      	movs	r3, #45	; 0x2d
    daa8:	9a04      	ldr	r2, [sp, #16]
    daaa:	426d      	negs	r5, r5
    daac:	7013      	strb	r3, [r2, #0]
    daae:	4b62      	ldr	r3, [pc, #392]	; (dc38 <_printf_i+0x230>)
    dab0:	270a      	movs	r7, #10
    dab2:	9303      	str	r3, [sp, #12]
    dab4:	e02f      	b.n	db16 <_printf_i+0x10e>
    dab6:	6820      	ldr	r0, [r4, #0]
    dab8:	6819      	ldr	r1, [r3, #0]
    daba:	0605      	lsls	r5, r0, #24
    dabc:	d503      	bpl.n	dac6 <_printf_i+0xbe>
    dabe:	1d08      	adds	r0, r1, #4
    dac0:	6018      	str	r0, [r3, #0]
    dac2:	680d      	ldr	r5, [r1, #0]
    dac4:	e005      	b.n	dad2 <_printf_i+0xca>
    dac6:	0640      	lsls	r0, r0, #25
    dac8:	d5f9      	bpl.n	dabe <_printf_i+0xb6>
    daca:	680d      	ldr	r5, [r1, #0]
    dacc:	1d08      	adds	r0, r1, #4
    dace:	6018      	str	r0, [r3, #0]
    dad0:	b2ad      	uxth	r5, r5
    dad2:	4b59      	ldr	r3, [pc, #356]	; (dc38 <_printf_i+0x230>)
    dad4:	2708      	movs	r7, #8
    dad6:	9303      	str	r3, [sp, #12]
    dad8:	2a6f      	cmp	r2, #111	; 0x6f
    dada:	d018      	beq.n	db0e <_printf_i+0x106>
    dadc:	270a      	movs	r7, #10
    dade:	e016      	b.n	db0e <_printf_i+0x106>
    dae0:	3145      	adds	r1, #69	; 0x45
    dae2:	700a      	strb	r2, [r1, #0]
    dae4:	4a54      	ldr	r2, [pc, #336]	; (dc38 <_printf_i+0x230>)
    dae6:	9203      	str	r2, [sp, #12]
    dae8:	681a      	ldr	r2, [r3, #0]
    daea:	6821      	ldr	r1, [r4, #0]
    daec:	1d10      	adds	r0, r2, #4
    daee:	6018      	str	r0, [r3, #0]
    daf0:	6815      	ldr	r5, [r2, #0]
    daf2:	0608      	lsls	r0, r1, #24
    daf4:	d522      	bpl.n	db3c <_printf_i+0x134>
    daf6:	07cb      	lsls	r3, r1, #31
    daf8:	d502      	bpl.n	db00 <_printf_i+0xf8>
    dafa:	2320      	movs	r3, #32
    dafc:	4319      	orrs	r1, r3
    dafe:	6021      	str	r1, [r4, #0]
    db00:	2710      	movs	r7, #16
    db02:	2d00      	cmp	r5, #0
    db04:	d103      	bne.n	db0e <_printf_i+0x106>
    db06:	2320      	movs	r3, #32
    db08:	6822      	ldr	r2, [r4, #0]
    db0a:	439a      	bics	r2, r3
    db0c:	6022      	str	r2, [r4, #0]
    db0e:	0023      	movs	r3, r4
    db10:	2200      	movs	r2, #0
    db12:	3343      	adds	r3, #67	; 0x43
    db14:	701a      	strb	r2, [r3, #0]
    db16:	6863      	ldr	r3, [r4, #4]
    db18:	60a3      	str	r3, [r4, #8]
    db1a:	2b00      	cmp	r3, #0
    db1c:	db5c      	blt.n	dbd8 <_printf_i+0x1d0>
    db1e:	2204      	movs	r2, #4
    db20:	6821      	ldr	r1, [r4, #0]
    db22:	4391      	bics	r1, r2
    db24:	6021      	str	r1, [r4, #0]
    db26:	2d00      	cmp	r5, #0
    db28:	d158      	bne.n	dbdc <_printf_i+0x1d4>
    db2a:	9e04      	ldr	r6, [sp, #16]
    db2c:	2b00      	cmp	r3, #0
    db2e:	d064      	beq.n	dbfa <_printf_i+0x1f2>
    db30:	0026      	movs	r6, r4
    db32:	9b03      	ldr	r3, [sp, #12]
    db34:	3642      	adds	r6, #66	; 0x42
    db36:	781b      	ldrb	r3, [r3, #0]
    db38:	7033      	strb	r3, [r6, #0]
    db3a:	e05e      	b.n	dbfa <_printf_i+0x1f2>
    db3c:	0648      	lsls	r0, r1, #25
    db3e:	d5da      	bpl.n	daf6 <_printf_i+0xee>
    db40:	b2ad      	uxth	r5, r5
    db42:	e7d8      	b.n	daf6 <_printf_i+0xee>
    db44:	6809      	ldr	r1, [r1, #0]
    db46:	681a      	ldr	r2, [r3, #0]
    db48:	0608      	lsls	r0, r1, #24
    db4a:	d505      	bpl.n	db58 <_printf_i+0x150>
    db4c:	1d11      	adds	r1, r2, #4
    db4e:	6019      	str	r1, [r3, #0]
    db50:	6813      	ldr	r3, [r2, #0]
    db52:	6962      	ldr	r2, [r4, #20]
    db54:	601a      	str	r2, [r3, #0]
    db56:	e006      	b.n	db66 <_printf_i+0x15e>
    db58:	0649      	lsls	r1, r1, #25
    db5a:	d5f7      	bpl.n	db4c <_printf_i+0x144>
    db5c:	1d11      	adds	r1, r2, #4
    db5e:	6019      	str	r1, [r3, #0]
    db60:	6813      	ldr	r3, [r2, #0]
    db62:	8aa2      	ldrh	r2, [r4, #20]
    db64:	801a      	strh	r2, [r3, #0]
    db66:	2300      	movs	r3, #0
    db68:	9e04      	ldr	r6, [sp, #16]
    db6a:	6123      	str	r3, [r4, #16]
    db6c:	e054      	b.n	dc18 <_printf_i+0x210>
    db6e:	681a      	ldr	r2, [r3, #0]
    db70:	1d11      	adds	r1, r2, #4
    db72:	6019      	str	r1, [r3, #0]
    db74:	6816      	ldr	r6, [r2, #0]
    db76:	2100      	movs	r1, #0
    db78:	6862      	ldr	r2, [r4, #4]
    db7a:	0030      	movs	r0, r6
    db7c:	f001 fdba 	bl	f6f4 <memchr>
    db80:	2800      	cmp	r0, #0
    db82:	d001      	beq.n	db88 <_printf_i+0x180>
    db84:	1b80      	subs	r0, r0, r6
    db86:	6060      	str	r0, [r4, #4]
    db88:	6863      	ldr	r3, [r4, #4]
    db8a:	6123      	str	r3, [r4, #16]
    db8c:	2300      	movs	r3, #0
    db8e:	9a04      	ldr	r2, [sp, #16]
    db90:	7013      	strb	r3, [r2, #0]
    db92:	e041      	b.n	dc18 <_printf_i+0x210>
    db94:	6923      	ldr	r3, [r4, #16]
    db96:	0032      	movs	r2, r6
    db98:	9906      	ldr	r1, [sp, #24]
    db9a:	9805      	ldr	r0, [sp, #20]
    db9c:	9d07      	ldr	r5, [sp, #28]
    db9e:	47a8      	blx	r5
    dba0:	1c43      	adds	r3, r0, #1
    dba2:	d043      	beq.n	dc2c <_printf_i+0x224>
    dba4:	6823      	ldr	r3, [r4, #0]
    dba6:	2500      	movs	r5, #0
    dba8:	079b      	lsls	r3, r3, #30
    dbaa:	d40f      	bmi.n	dbcc <_printf_i+0x1c4>
    dbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dbae:	68e0      	ldr	r0, [r4, #12]
    dbb0:	4298      	cmp	r0, r3
    dbb2:	da3d      	bge.n	dc30 <_printf_i+0x228>
    dbb4:	0018      	movs	r0, r3
    dbb6:	e03b      	b.n	dc30 <_printf_i+0x228>
    dbb8:	0022      	movs	r2, r4
    dbba:	2301      	movs	r3, #1
    dbbc:	3219      	adds	r2, #25
    dbbe:	9906      	ldr	r1, [sp, #24]
    dbc0:	9805      	ldr	r0, [sp, #20]
    dbc2:	9e07      	ldr	r6, [sp, #28]
    dbc4:	47b0      	blx	r6
    dbc6:	1c43      	adds	r3, r0, #1
    dbc8:	d030      	beq.n	dc2c <_printf_i+0x224>
    dbca:	3501      	adds	r5, #1
    dbcc:	68e3      	ldr	r3, [r4, #12]
    dbce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dbd0:	1a9b      	subs	r3, r3, r2
    dbd2:	429d      	cmp	r5, r3
    dbd4:	dbf0      	blt.n	dbb8 <_printf_i+0x1b0>
    dbd6:	e7e9      	b.n	dbac <_printf_i+0x1a4>
    dbd8:	2d00      	cmp	r5, #0
    dbda:	d0a9      	beq.n	db30 <_printf_i+0x128>
    dbdc:	9e04      	ldr	r6, [sp, #16]
    dbde:	0028      	movs	r0, r5
    dbe0:	0039      	movs	r1, r7
    dbe2:	f7fb fe8d 	bl	9900 <__aeabi_uidivmod>
    dbe6:	9b03      	ldr	r3, [sp, #12]
    dbe8:	3e01      	subs	r6, #1
    dbea:	5c5b      	ldrb	r3, [r3, r1]
    dbec:	0028      	movs	r0, r5
    dbee:	7033      	strb	r3, [r6, #0]
    dbf0:	0039      	movs	r1, r7
    dbf2:	f7fb fdff 	bl	97f4 <__udivsi3>
    dbf6:	1e05      	subs	r5, r0, #0
    dbf8:	d1f1      	bne.n	dbde <_printf_i+0x1d6>
    dbfa:	2f08      	cmp	r7, #8
    dbfc:	d109      	bne.n	dc12 <_printf_i+0x20a>
    dbfe:	6823      	ldr	r3, [r4, #0]
    dc00:	07db      	lsls	r3, r3, #31
    dc02:	d506      	bpl.n	dc12 <_printf_i+0x20a>
    dc04:	6863      	ldr	r3, [r4, #4]
    dc06:	6922      	ldr	r2, [r4, #16]
    dc08:	4293      	cmp	r3, r2
    dc0a:	dc02      	bgt.n	dc12 <_printf_i+0x20a>
    dc0c:	2330      	movs	r3, #48	; 0x30
    dc0e:	3e01      	subs	r6, #1
    dc10:	7033      	strb	r3, [r6, #0]
    dc12:	9b04      	ldr	r3, [sp, #16]
    dc14:	1b9b      	subs	r3, r3, r6
    dc16:	6123      	str	r3, [r4, #16]
    dc18:	9b07      	ldr	r3, [sp, #28]
    dc1a:	aa09      	add	r2, sp, #36	; 0x24
    dc1c:	9300      	str	r3, [sp, #0]
    dc1e:	0021      	movs	r1, r4
    dc20:	9b06      	ldr	r3, [sp, #24]
    dc22:	9805      	ldr	r0, [sp, #20]
    dc24:	f7ff fe82 	bl	d92c <_printf_common>
    dc28:	1c43      	adds	r3, r0, #1
    dc2a:	d1b3      	bne.n	db94 <_printf_i+0x18c>
    dc2c:	2001      	movs	r0, #1
    dc2e:	4240      	negs	r0, r0
    dc30:	b00b      	add	sp, #44	; 0x2c
    dc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc34:	000129ba 	.word	0x000129ba
    dc38:	000129a9 	.word	0x000129a9

0000dc3c <realloc>:
    dc3c:	b510      	push	{r4, lr}
    dc3e:	4b03      	ldr	r3, [pc, #12]	; (dc4c <realloc+0x10>)
    dc40:	000a      	movs	r2, r1
    dc42:	0001      	movs	r1, r0
    dc44:	6818      	ldr	r0, [r3, #0]
    dc46:	f002 f853 	bl	fcf0 <_realloc_r>
    dc4a:	bd10      	pop	{r4, pc}
    dc4c:	200000b4 	.word	0x200000b4

0000dc50 <_sbrk_r>:
    dc50:	2300      	movs	r3, #0
    dc52:	b570      	push	{r4, r5, r6, lr}
    dc54:	4c06      	ldr	r4, [pc, #24]	; (dc70 <_sbrk_r+0x20>)
    dc56:	0005      	movs	r5, r0
    dc58:	0008      	movs	r0, r1
    dc5a:	6023      	str	r3, [r4, #0]
    dc5c:	f002 ffaa 	bl	10bb4 <_sbrk>
    dc60:	1c43      	adds	r3, r0, #1
    dc62:	d103      	bne.n	dc6c <_sbrk_r+0x1c>
    dc64:	6823      	ldr	r3, [r4, #0]
    dc66:	2b00      	cmp	r3, #0
    dc68:	d000      	beq.n	dc6c <_sbrk_r+0x1c>
    dc6a:	602b      	str	r3, [r5, #0]
    dc6c:	bd70      	pop	{r4, r5, r6, pc}
    dc6e:	46c0      	nop			; (mov r8, r8)
    dc70:	20001fa8 	.word	0x20001fa8

0000dc74 <siprintf>:
    dc74:	b40e      	push	{r1, r2, r3}
    dc76:	b510      	push	{r4, lr}
    dc78:	b09d      	sub	sp, #116	; 0x74
    dc7a:	a902      	add	r1, sp, #8
    dc7c:	9002      	str	r0, [sp, #8]
    dc7e:	6108      	str	r0, [r1, #16]
    dc80:	480b      	ldr	r0, [pc, #44]	; (dcb0 <siprintf+0x3c>)
    dc82:	2482      	movs	r4, #130	; 0x82
    dc84:	6088      	str	r0, [r1, #8]
    dc86:	6148      	str	r0, [r1, #20]
    dc88:	2001      	movs	r0, #1
    dc8a:	4240      	negs	r0, r0
    dc8c:	ab1f      	add	r3, sp, #124	; 0x7c
    dc8e:	81c8      	strh	r0, [r1, #14]
    dc90:	4808      	ldr	r0, [pc, #32]	; (dcb4 <siprintf+0x40>)
    dc92:	cb04      	ldmia	r3!, {r2}
    dc94:	00a4      	lsls	r4, r4, #2
    dc96:	6800      	ldr	r0, [r0, #0]
    dc98:	9301      	str	r3, [sp, #4]
    dc9a:	818c      	strh	r4, [r1, #12]
    dc9c:	f002 f8b0 	bl	fe00 <_svfiprintf_r>
    dca0:	2300      	movs	r3, #0
    dca2:	9a02      	ldr	r2, [sp, #8]
    dca4:	7013      	strb	r3, [r2, #0]
    dca6:	b01d      	add	sp, #116	; 0x74
    dca8:	bc10      	pop	{r4}
    dcaa:	bc08      	pop	{r3}
    dcac:	b003      	add	sp, #12
    dcae:	4718      	bx	r3
    dcb0:	7fffffff 	.word	0x7fffffff
    dcb4:	200000b4 	.word	0x200000b4

0000dcb8 <strcat>:
    dcb8:	0002      	movs	r2, r0
    dcba:	b510      	push	{r4, lr}
    dcbc:	7813      	ldrb	r3, [r2, #0]
    dcbe:	2b00      	cmp	r3, #0
    dcc0:	d105      	bne.n	dcce <strcat+0x16>
    dcc2:	5ccc      	ldrb	r4, [r1, r3]
    dcc4:	54d4      	strb	r4, [r2, r3]
    dcc6:	3301      	adds	r3, #1
    dcc8:	2c00      	cmp	r4, #0
    dcca:	d1fa      	bne.n	dcc2 <strcat+0xa>
    dccc:	bd10      	pop	{r4, pc}
    dcce:	3201      	adds	r2, #1
    dcd0:	e7f4      	b.n	dcbc <strcat+0x4>

0000dcd2 <strcmp>:
    dcd2:	7802      	ldrb	r2, [r0, #0]
    dcd4:	780b      	ldrb	r3, [r1, #0]
    dcd6:	2a00      	cmp	r2, #0
    dcd8:	d003      	beq.n	dce2 <strcmp+0x10>
    dcda:	3001      	adds	r0, #1
    dcdc:	3101      	adds	r1, #1
    dcde:	429a      	cmp	r2, r3
    dce0:	d0f7      	beq.n	dcd2 <strcmp>
    dce2:	1ad0      	subs	r0, r2, r3
    dce4:	4770      	bx	lr

0000dce6 <strcpy>:
    dce6:	1c03      	adds	r3, r0, #0
    dce8:	780a      	ldrb	r2, [r1, #0]
    dcea:	3101      	adds	r1, #1
    dcec:	701a      	strb	r2, [r3, #0]
    dcee:	3301      	adds	r3, #1
    dcf0:	2a00      	cmp	r2, #0
    dcf2:	d1f9      	bne.n	dce8 <strcpy+0x2>
    dcf4:	4770      	bx	lr

0000dcf6 <strlen>:
    dcf6:	2300      	movs	r3, #0
    dcf8:	5cc2      	ldrb	r2, [r0, r3]
    dcfa:	3301      	adds	r3, #1
    dcfc:	2a00      	cmp	r2, #0
    dcfe:	d1fb      	bne.n	dcf8 <strlen+0x2>
    dd00:	1e58      	subs	r0, r3, #1
    dd02:	4770      	bx	lr

0000dd04 <strncat>:
    dd04:	0003      	movs	r3, r0
    dd06:	b510      	push	{r4, lr}
    dd08:	781c      	ldrb	r4, [r3, #0]
    dd0a:	2c00      	cmp	r4, #0
    dd0c:	d107      	bne.n	dd1e <strncat+0x1a>
    dd0e:	3a01      	subs	r2, #1
    dd10:	1c54      	adds	r4, r2, #1
    dd12:	d003      	beq.n	dd1c <strncat+0x18>
    dd14:	780c      	ldrb	r4, [r1, #0]
    dd16:	701c      	strb	r4, [r3, #0]
    dd18:	2c00      	cmp	r4, #0
    dd1a:	d102      	bne.n	dd22 <strncat+0x1e>
    dd1c:	bd10      	pop	{r4, pc}
    dd1e:	3301      	adds	r3, #1
    dd20:	e7f2      	b.n	dd08 <strncat+0x4>
    dd22:	2a00      	cmp	r2, #0
    dd24:	d100      	bne.n	dd28 <strncat+0x24>
    dd26:	705a      	strb	r2, [r3, #1]
    dd28:	3301      	adds	r3, #1
    dd2a:	3101      	adds	r1, #1
    dd2c:	e7ef      	b.n	dd0e <strncat+0xa>

0000dd2e <strncmp>:
    dd2e:	2300      	movs	r3, #0
    dd30:	b530      	push	{r4, r5, lr}
    dd32:	429a      	cmp	r2, r3
    dd34:	d00a      	beq.n	dd4c <strncmp+0x1e>
    dd36:	3a01      	subs	r2, #1
    dd38:	5cc4      	ldrb	r4, [r0, r3]
    dd3a:	5ccd      	ldrb	r5, [r1, r3]
    dd3c:	42ac      	cmp	r4, r5
    dd3e:	d104      	bne.n	dd4a <strncmp+0x1c>
    dd40:	429a      	cmp	r2, r3
    dd42:	d002      	beq.n	dd4a <strncmp+0x1c>
    dd44:	3301      	adds	r3, #1
    dd46:	2c00      	cmp	r4, #0
    dd48:	d1f6      	bne.n	dd38 <strncmp+0xa>
    dd4a:	1b63      	subs	r3, r4, r5
    dd4c:	0018      	movs	r0, r3
    dd4e:	bd30      	pop	{r4, r5, pc}

0000dd50 <strncpy>:
    dd50:	b570      	push	{r4, r5, r6, lr}
    dd52:	0004      	movs	r4, r0
    dd54:	2a00      	cmp	r2, #0
    dd56:	d100      	bne.n	dd5a <strncpy+0xa>
    dd58:	bd70      	pop	{r4, r5, r6, pc}
    dd5a:	780d      	ldrb	r5, [r1, #0]
    dd5c:	1e56      	subs	r6, r2, #1
    dd5e:	1c63      	adds	r3, r4, #1
    dd60:	7025      	strb	r5, [r4, #0]
    dd62:	3101      	adds	r1, #1
    dd64:	2d00      	cmp	r5, #0
    dd66:	d105      	bne.n	dd74 <strncpy+0x24>
    dd68:	18a4      	adds	r4, r4, r2
    dd6a:	429c      	cmp	r4, r3
    dd6c:	d0f4      	beq.n	dd58 <strncpy+0x8>
    dd6e:	701d      	strb	r5, [r3, #0]
    dd70:	3301      	adds	r3, #1
    dd72:	e7fa      	b.n	dd6a <strncpy+0x1a>
    dd74:	001c      	movs	r4, r3
    dd76:	0032      	movs	r2, r6
    dd78:	e7ec      	b.n	dd54 <strncpy+0x4>
	...

0000dd7c <_strtol_l.isra.0>:
    dd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd7e:	001f      	movs	r7, r3
    dd80:	000e      	movs	r6, r1
    dd82:	b087      	sub	sp, #28
    dd84:	9005      	str	r0, [sp, #20]
    dd86:	9103      	str	r1, [sp, #12]
    dd88:	9202      	str	r2, [sp, #8]
    dd8a:	980c      	ldr	r0, [sp, #48]	; 0x30
    dd8c:	7834      	ldrb	r4, [r6, #0]
    dd8e:	f7fe fe39 	bl	ca04 <__locale_ctype_ptr_l>
    dd92:	2208      	movs	r2, #8
    dd94:	1900      	adds	r0, r0, r4
    dd96:	7843      	ldrb	r3, [r0, #1]
    dd98:	1c75      	adds	r5, r6, #1
    dd9a:	4013      	ands	r3, r2
    dd9c:	d10c      	bne.n	ddb8 <_strtol_l.isra.0+0x3c>
    dd9e:	2c2d      	cmp	r4, #45	; 0x2d
    dda0:	d10c      	bne.n	ddbc <_strtol_l.isra.0+0x40>
    dda2:	3301      	adds	r3, #1
    dda4:	782c      	ldrb	r4, [r5, #0]
    dda6:	9301      	str	r3, [sp, #4]
    dda8:	1cb5      	adds	r5, r6, #2
    ddaa:	2f00      	cmp	r7, #0
    ddac:	d00c      	beq.n	ddc8 <_strtol_l.isra.0+0x4c>
    ddae:	2f10      	cmp	r7, #16
    ddb0:	d114      	bne.n	dddc <_strtol_l.isra.0+0x60>
    ddb2:	2c30      	cmp	r4, #48	; 0x30
    ddb4:	d00a      	beq.n	ddcc <_strtol_l.isra.0+0x50>
    ddb6:	e011      	b.n	dddc <_strtol_l.isra.0+0x60>
    ddb8:	002e      	movs	r6, r5
    ddba:	e7e6      	b.n	dd8a <_strtol_l.isra.0+0xe>
    ddbc:	9301      	str	r3, [sp, #4]
    ddbe:	2c2b      	cmp	r4, #43	; 0x2b
    ddc0:	d1f3      	bne.n	ddaa <_strtol_l.isra.0+0x2e>
    ddc2:	782c      	ldrb	r4, [r5, #0]
    ddc4:	1cb5      	adds	r5, r6, #2
    ddc6:	e7f0      	b.n	ddaa <_strtol_l.isra.0+0x2e>
    ddc8:	2c30      	cmp	r4, #48	; 0x30
    ddca:	d12f      	bne.n	de2c <_strtol_l.isra.0+0xb0>
    ddcc:	2220      	movs	r2, #32
    ddce:	782b      	ldrb	r3, [r5, #0]
    ddd0:	4393      	bics	r3, r2
    ddd2:	2b58      	cmp	r3, #88	; 0x58
    ddd4:	d151      	bne.n	de7a <_strtol_l.isra.0+0xfe>
    ddd6:	2710      	movs	r7, #16
    ddd8:	786c      	ldrb	r4, [r5, #1]
    ddda:	3502      	adds	r5, #2
    dddc:	9b01      	ldr	r3, [sp, #4]
    ddde:	4a29      	ldr	r2, [pc, #164]	; (de84 <_strtol_l.isra.0+0x108>)
    dde0:	0039      	movs	r1, r7
    dde2:	189e      	adds	r6, r3, r2
    dde4:	0030      	movs	r0, r6
    dde6:	f7fb fd8b 	bl	9900 <__aeabi_uidivmod>
    ddea:	0030      	movs	r0, r6
    ddec:	9104      	str	r1, [sp, #16]
    ddee:	0039      	movs	r1, r7
    ddf0:	f7fb fd00 	bl	97f4 <__udivsi3>
    ddf4:	2101      	movs	r1, #1
    ddf6:	2300      	movs	r3, #0
    ddf8:	4249      	negs	r1, r1
    ddfa:	0002      	movs	r2, r0
    ddfc:	468c      	mov	ip, r1
    ddfe:	0018      	movs	r0, r3
    de00:	0021      	movs	r1, r4
    de02:	3930      	subs	r1, #48	; 0x30
    de04:	2909      	cmp	r1, #9
    de06:	d813      	bhi.n	de30 <_strtol_l.isra.0+0xb4>
    de08:	000c      	movs	r4, r1
    de0a:	42a7      	cmp	r7, r4
    de0c:	dd1c      	ble.n	de48 <_strtol_l.isra.0+0xcc>
    de0e:	1c59      	adds	r1, r3, #1
    de10:	d009      	beq.n	de26 <_strtol_l.isra.0+0xaa>
    de12:	4663      	mov	r3, ip
    de14:	4282      	cmp	r2, r0
    de16:	d306      	bcc.n	de26 <_strtol_l.isra.0+0xaa>
    de18:	d102      	bne.n	de20 <_strtol_l.isra.0+0xa4>
    de1a:	9904      	ldr	r1, [sp, #16]
    de1c:	42a1      	cmp	r1, r4
    de1e:	db02      	blt.n	de26 <_strtol_l.isra.0+0xaa>
    de20:	2301      	movs	r3, #1
    de22:	4378      	muls	r0, r7
    de24:	1820      	adds	r0, r4, r0
    de26:	782c      	ldrb	r4, [r5, #0]
    de28:	3501      	adds	r5, #1
    de2a:	e7e9      	b.n	de00 <_strtol_l.isra.0+0x84>
    de2c:	270a      	movs	r7, #10
    de2e:	e7d5      	b.n	dddc <_strtol_l.isra.0+0x60>
    de30:	0021      	movs	r1, r4
    de32:	3941      	subs	r1, #65	; 0x41
    de34:	2919      	cmp	r1, #25
    de36:	d801      	bhi.n	de3c <_strtol_l.isra.0+0xc0>
    de38:	3c37      	subs	r4, #55	; 0x37
    de3a:	e7e6      	b.n	de0a <_strtol_l.isra.0+0x8e>
    de3c:	0021      	movs	r1, r4
    de3e:	3961      	subs	r1, #97	; 0x61
    de40:	2919      	cmp	r1, #25
    de42:	d801      	bhi.n	de48 <_strtol_l.isra.0+0xcc>
    de44:	3c57      	subs	r4, #87	; 0x57
    de46:	e7e0      	b.n	de0a <_strtol_l.isra.0+0x8e>
    de48:	1c5a      	adds	r2, r3, #1
    de4a:	d108      	bne.n	de5e <_strtol_l.isra.0+0xe2>
    de4c:	9a05      	ldr	r2, [sp, #20]
    de4e:	3323      	adds	r3, #35	; 0x23
    de50:	6013      	str	r3, [r2, #0]
    de52:	9b02      	ldr	r3, [sp, #8]
    de54:	0030      	movs	r0, r6
    de56:	2b00      	cmp	r3, #0
    de58:	d10b      	bne.n	de72 <_strtol_l.isra.0+0xf6>
    de5a:	b007      	add	sp, #28
    de5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de5e:	9a01      	ldr	r2, [sp, #4]
    de60:	2a00      	cmp	r2, #0
    de62:	d000      	beq.n	de66 <_strtol_l.isra.0+0xea>
    de64:	4240      	negs	r0, r0
    de66:	9a02      	ldr	r2, [sp, #8]
    de68:	2a00      	cmp	r2, #0
    de6a:	d0f6      	beq.n	de5a <_strtol_l.isra.0+0xde>
    de6c:	9a03      	ldr	r2, [sp, #12]
    de6e:	2b00      	cmp	r3, #0
    de70:	d000      	beq.n	de74 <_strtol_l.isra.0+0xf8>
    de72:	1e6a      	subs	r2, r5, #1
    de74:	9b02      	ldr	r3, [sp, #8]
    de76:	601a      	str	r2, [r3, #0]
    de78:	e7ef      	b.n	de5a <_strtol_l.isra.0+0xde>
    de7a:	2430      	movs	r4, #48	; 0x30
    de7c:	2f00      	cmp	r7, #0
    de7e:	d1ad      	bne.n	dddc <_strtol_l.isra.0+0x60>
    de80:	3708      	adds	r7, #8
    de82:	e7ab      	b.n	dddc <_strtol_l.isra.0+0x60>
    de84:	7fffffff 	.word	0x7fffffff

0000de88 <_strtol_r>:
    de88:	b513      	push	{r0, r1, r4, lr}
    de8a:	4c05      	ldr	r4, [pc, #20]	; (dea0 <_strtol_r+0x18>)
    de8c:	6824      	ldr	r4, [r4, #0]
    de8e:	6a24      	ldr	r4, [r4, #32]
    de90:	2c00      	cmp	r4, #0
    de92:	d100      	bne.n	de96 <_strtol_r+0xe>
    de94:	4c03      	ldr	r4, [pc, #12]	; (dea4 <_strtol_r+0x1c>)
    de96:	9400      	str	r4, [sp, #0]
    de98:	f7ff ff70 	bl	dd7c <_strtol_l.isra.0>
    de9c:	bd16      	pop	{r1, r2, r4, pc}
    de9e:	46c0      	nop			; (mov r8, r8)
    dea0:	200000b4 	.word	0x200000b4
    dea4:	20000118 	.word	0x20000118

0000dea8 <sbrk>:
    dea8:	b510      	push	{r4, lr}
    deaa:	4b03      	ldr	r3, [pc, #12]	; (deb8 <sbrk+0x10>)
    deac:	0001      	movs	r1, r0
    deae:	6818      	ldr	r0, [r3, #0]
    deb0:	f7ff fece 	bl	dc50 <_sbrk_r>
    deb4:	bd10      	pop	{r4, pc}
    deb6:	46c0      	nop			; (mov r8, r8)
    deb8:	200000b4 	.word	0x200000b4

0000debc <toupper>:
    debc:	b510      	push	{r4, lr}
    debe:	0004      	movs	r4, r0
    dec0:	f7fe fda4 	bl	ca0c <__locale_ctype_ptr>
    dec4:	2203      	movs	r2, #3
    dec6:	1900      	adds	r0, r0, r4
    dec8:	7843      	ldrb	r3, [r0, #1]
    deca:	4013      	ands	r3, r2
    decc:	2b02      	cmp	r3, #2
    dece:	d100      	bne.n	ded2 <toupper+0x16>
    ded0:	3c20      	subs	r4, #32
    ded2:	0020      	movs	r0, r4
    ded4:	bd10      	pop	{r4, pc}
	...

0000ded8 <__tzcalc_limits>:
    ded8:	b5f0      	push	{r4, r5, r6, r7, lr}
    deda:	b089      	sub	sp, #36	; 0x24
    dedc:	0004      	movs	r4, r0
    dede:	f001 fb8d 	bl	f5fc <__gettzinfo>
    dee2:	4b4c      	ldr	r3, [pc, #304]	; (e014 <__tzcalc_limits+0x13c>)
    dee4:	0007      	movs	r7, r0
    dee6:	2000      	movs	r0, #0
    dee8:	429c      	cmp	r4, r3
    deea:	dd58      	ble.n	df9e <__tzcalc_limits+0xc6>
    deec:	256e      	movs	r5, #110	; 0x6e
    deee:	2164      	movs	r1, #100	; 0x64
    def0:	4b49      	ldr	r3, [pc, #292]	; (e018 <__tzcalc_limits+0x140>)
    def2:	35ff      	adds	r5, #255	; 0xff
    def4:	18e0      	adds	r0, r4, r3
    def6:	4345      	muls	r5, r0
    def8:	4b48      	ldr	r3, [pc, #288]	; (e01c <__tzcalc_limits+0x144>)
    defa:	607c      	str	r4, [r7, #4]
    defc:	18e0      	adds	r0, r4, r3
    defe:	4b48      	ldr	r3, [pc, #288]	; (e020 <__tzcalc_limits+0x148>)
    df00:	1080      	asrs	r0, r0, #2
    df02:	182d      	adds	r5, r5, r0
    df04:	4249      	negs	r1, r1
    df06:	18e0      	adds	r0, r4, r3
    df08:	f7fb fcfe 	bl	9908 <__divsi3>
    df0c:	21c8      	movs	r1, #200	; 0xc8
    df0e:	4b45      	ldr	r3, [pc, #276]	; (e024 <__tzcalc_limits+0x14c>)
    df10:	182d      	adds	r5, r5, r0
    df12:	0049      	lsls	r1, r1, #1
    df14:	18e0      	adds	r0, r4, r3
    df16:	f7fb fcf7 	bl	9908 <__divsi3>
    df1a:	2164      	movs	r1, #100	; 0x64
    df1c:	182b      	adds	r3, r5, r0
    df1e:	0020      	movs	r0, r4
    df20:	9301      	str	r3, [sp, #4]
    df22:	f7fb fdd7 	bl	9ad4 <__aeabi_idivmod>
    df26:	9102      	str	r1, [sp, #8]
    df28:	21c8      	movs	r1, #200	; 0xc8
    df2a:	0020      	movs	r0, r4
    df2c:	0049      	lsls	r1, r1, #1
    df2e:	f7fb fdd1 	bl	9ad4 <__aeabi_idivmod>
    df32:	000a      	movs	r2, r1
    df34:	4253      	negs	r3, r2
    df36:	415a      	adcs	r2, r3
    df38:	003b      	movs	r3, r7
    df3a:	3340      	adds	r3, #64	; 0x40
    df3c:	9307      	str	r3, [sp, #28]
    df3e:	2303      	movs	r3, #3
    df40:	003d      	movs	r5, r7
    df42:	401c      	ands	r4, r3
    df44:	9103      	str	r1, [sp, #12]
    df46:	9205      	str	r2, [sp, #20]
    df48:	3508      	adds	r5, #8
    df4a:	9406      	str	r4, [sp, #24]
    df4c:	782b      	ldrb	r3, [r5, #0]
    df4e:	2b4a      	cmp	r3, #74	; 0x4a
    df50:	d127      	bne.n	dfa2 <__tzcalc_limits+0xca>
    df52:	9a01      	ldr	r2, [sp, #4]
    df54:	68eb      	ldr	r3, [r5, #12]
    df56:	18d1      	adds	r1, r2, r3
    df58:	9a06      	ldr	r2, [sp, #24]
    df5a:	2a00      	cmp	r2, #0
    df5c:	d102      	bne.n	df64 <__tzcalc_limits+0x8c>
    df5e:	9a02      	ldr	r2, [sp, #8]
    df60:	2a00      	cmp	r2, #0
    df62:	d103      	bne.n	df6c <__tzcalc_limits+0x94>
    df64:	2400      	movs	r4, #0
    df66:	9a03      	ldr	r2, [sp, #12]
    df68:	42a2      	cmp	r2, r4
    df6a:	d103      	bne.n	df74 <__tzcalc_limits+0x9c>
    df6c:	2401      	movs	r4, #1
    df6e:	2b3b      	cmp	r3, #59	; 0x3b
    df70:	dc00      	bgt.n	df74 <__tzcalc_limits+0x9c>
    df72:	2400      	movs	r4, #0
    df74:	1864      	adds	r4, r4, r1
    df76:	3c01      	subs	r4, #1
    df78:	492b      	ldr	r1, [pc, #172]	; (e028 <__tzcalc_limits+0x150>)
    df7a:	692b      	ldr	r3, [r5, #16]
    df7c:	434c      	muls	r4, r1
    df7e:	18e4      	adds	r4, r4, r3
    df80:	69ab      	ldr	r3, [r5, #24]
    df82:	18e4      	adds	r4, r4, r3
    df84:	9b07      	ldr	r3, [sp, #28]
    df86:	616c      	str	r4, [r5, #20]
    df88:	351c      	adds	r5, #28
    df8a:	42ab      	cmp	r3, r5
    df8c:	d1de      	bne.n	df4c <__tzcalc_limits+0x74>
    df8e:	69fa      	ldr	r2, [r7, #28]
    df90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    df92:	2301      	movs	r3, #1
    df94:	428a      	cmp	r2, r1
    df96:	db00      	blt.n	df9a <__tzcalc_limits+0xc2>
    df98:	2300      	movs	r3, #0
    df9a:	2001      	movs	r0, #1
    df9c:	603b      	str	r3, [r7, #0]
    df9e:	b009      	add	sp, #36	; 0x24
    dfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dfa2:	2b44      	cmp	r3, #68	; 0x44
    dfa4:	d103      	bne.n	dfae <__tzcalc_limits+0xd6>
    dfa6:	9b01      	ldr	r3, [sp, #4]
    dfa8:	68ea      	ldr	r2, [r5, #12]
    dfaa:	189c      	adds	r4, r3, r2
    dfac:	e7e4      	b.n	df78 <__tzcalc_limits+0xa0>
    dfae:	9a06      	ldr	r2, [sp, #24]
    dfb0:	9b05      	ldr	r3, [sp, #20]
    dfb2:	2a00      	cmp	r2, #0
    dfb4:	d103      	bne.n	dfbe <__tzcalc_limits+0xe6>
    dfb6:	9a02      	ldr	r2, [sp, #8]
    dfb8:	2a00      	cmp	r2, #0
    dfba:	d000      	beq.n	dfbe <__tzcalc_limits+0xe6>
    dfbc:	2301      	movs	r3, #1
    dfbe:	2230      	movs	r2, #48	; 0x30
    dfc0:	4353      	muls	r3, r2
    dfc2:	4a1a      	ldr	r2, [pc, #104]	; (e02c <__tzcalc_limits+0x154>)
    dfc4:	686e      	ldr	r6, [r5, #4]
    dfc6:	189b      	adds	r3, r3, r2
    dfc8:	9304      	str	r3, [sp, #16]
    dfca:	001a      	movs	r2, r3
    dfcc:	2301      	movs	r3, #1
    dfce:	9c01      	ldr	r4, [sp, #4]
    dfd0:	42b3      	cmp	r3, r6
    dfd2:	db18      	blt.n	e006 <__tzcalc_limits+0x12e>
    dfd4:	2e00      	cmp	r6, #0
    dfd6:	dc00      	bgt.n	dfda <__tzcalc_limits+0x102>
    dfd8:	2601      	movs	r6, #1
    dfda:	1d20      	adds	r0, r4, #4
    dfdc:	2107      	movs	r1, #7
    dfde:	f7fb fd79 	bl	9ad4 <__aeabi_idivmod>
    dfe2:	68eb      	ldr	r3, [r5, #12]
    dfe4:	1a5b      	subs	r3, r3, r1
    dfe6:	d500      	bpl.n	dfea <__tzcalc_limits+0x112>
    dfe8:	3307      	adds	r3, #7
    dfea:	2107      	movs	r1, #7
    dfec:	68aa      	ldr	r2, [r5, #8]
    dfee:	3a01      	subs	r2, #1
    dff0:	4351      	muls	r1, r2
    dff2:	18c9      	adds	r1, r1, r3
    dff4:	4b0e      	ldr	r3, [pc, #56]	; (e030 <__tzcalc_limits+0x158>)
    dff6:	18f6      	adds	r6, r6, r3
    dff8:	9b04      	ldr	r3, [sp, #16]
    dffa:	00b6      	lsls	r6, r6, #2
    dffc:	58f3      	ldr	r3, [r6, r3]
    dffe:	4299      	cmp	r1, r3
    e000:	da05      	bge.n	e00e <__tzcalc_limits+0x136>
    e002:	1864      	adds	r4, r4, r1
    e004:	e7b8      	b.n	df78 <__tzcalc_limits+0xa0>
    e006:	ca02      	ldmia	r2!, {r1}
    e008:	3301      	adds	r3, #1
    e00a:	1864      	adds	r4, r4, r1
    e00c:	e7e0      	b.n	dfd0 <__tzcalc_limits+0xf8>
    e00e:	3907      	subs	r1, #7
    e010:	e7f5      	b.n	dffe <__tzcalc_limits+0x126>
    e012:	46c0      	nop			; (mov r8, r8)
    e014:	000007b1 	.word	0x000007b1
    e018:	fffff84e 	.word	0xfffff84e
    e01c:	fffff84f 	.word	0xfffff84f
    e020:	fffff893 	.word	0xfffff893
    e024:	fffff9bf 	.word	0xfffff9bf
    e028:	00015180 	.word	0x00015180
    e02c:	00012b78 	.word	0x00012b78
    e030:	3fffffff 	.word	0x3fffffff

0000e034 <__tz_lock>:
    e034:	4770      	bx	lr

0000e036 <__tz_unlock>:
    e036:	4770      	bx	lr

0000e038 <_tzset_unlocked>:
    e038:	b510      	push	{r4, lr}
    e03a:	4b02      	ldr	r3, [pc, #8]	; (e044 <_tzset_unlocked+0xc>)
    e03c:	6818      	ldr	r0, [r3, #0]
    e03e:	f000 f803 	bl	e048 <_tzset_unlocked_r>
    e042:	bd10      	pop	{r4, pc}
    e044:	200000b4 	.word	0x200000b4

0000e048 <_tzset_unlocked_r>:
    e048:	b5f0      	push	{r4, r5, r6, r7, lr}
    e04a:	b08d      	sub	sp, #52	; 0x34
    e04c:	0007      	movs	r7, r0
    e04e:	f001 fad5 	bl	f5fc <__gettzinfo>
    e052:	49af      	ldr	r1, [pc, #700]	; (e310 <_tzset_unlocked_r+0x2c8>)
    e054:	0006      	movs	r6, r0
    e056:	0038      	movs	r0, r7
    e058:	f001 faca 	bl	f5f0 <_getenv_r>
    e05c:	4dad      	ldr	r5, [pc, #692]	; (e314 <_tzset_unlocked_r+0x2cc>)
    e05e:	1e04      	subs	r4, r0, #0
    e060:	d10d      	bne.n	e07e <_tzset_unlocked_r+0x36>
    e062:	4bad      	ldr	r3, [pc, #692]	; (e318 <_tzset_unlocked_r+0x2d0>)
    e064:	4aad      	ldr	r2, [pc, #692]	; (e31c <_tzset_unlocked_r+0x2d4>)
    e066:	6018      	str	r0, [r3, #0]
    e068:	4bad      	ldr	r3, [pc, #692]	; (e320 <_tzset_unlocked_r+0x2d8>)
    e06a:	6018      	str	r0, [r3, #0]
    e06c:	4bad      	ldr	r3, [pc, #692]	; (e324 <_tzset_unlocked_r+0x2dc>)
    e06e:	6828      	ldr	r0, [r5, #0]
    e070:	601a      	str	r2, [r3, #0]
    e072:	605a      	str	r2, [r3, #4]
    e074:	f7fe fce2 	bl	ca3c <free>
    e078:	602c      	str	r4, [r5, #0]
    e07a:	b00d      	add	sp, #52	; 0x34
    e07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e07e:	6829      	ldr	r1, [r5, #0]
    e080:	2900      	cmp	r1, #0
    e082:	d15a      	bne.n	e13a <_tzset_unlocked_r+0xf2>
    e084:	6828      	ldr	r0, [r5, #0]
    e086:	f7fe fcd9 	bl	ca3c <free>
    e08a:	0020      	movs	r0, r4
    e08c:	f7ff fe33 	bl	dcf6 <strlen>
    e090:	1c41      	adds	r1, r0, #1
    e092:	0038      	movs	r0, r7
    e094:	f7fe ffc0 	bl	d018 <_malloc_r>
    e098:	6028      	str	r0, [r5, #0]
    e09a:	2800      	cmp	r0, #0
    e09c:	d152      	bne.n	e144 <_tzset_unlocked_r+0xfc>
    e09e:	7823      	ldrb	r3, [r4, #0]
    e0a0:	3b3a      	subs	r3, #58	; 0x3a
    e0a2:	4259      	negs	r1, r3
    e0a4:	4159      	adcs	r1, r3
    e0a6:	1864      	adds	r4, r4, r1
    e0a8:	ab0a      	add	r3, sp, #40	; 0x28
    e0aa:	4a9f      	ldr	r2, [pc, #636]	; (e328 <_tzset_unlocked_r+0x2e0>)
    e0ac:	499f      	ldr	r1, [pc, #636]	; (e32c <_tzset_unlocked_r+0x2e4>)
    e0ae:	0020      	movs	r0, r4
    e0b0:	f001 fff4 	bl	1009c <siscanf>
    e0b4:	2800      	cmp	r0, #0
    e0b6:	dde0      	ble.n	e07a <_tzset_unlocked_r+0x32>
    e0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e0ba:	18e4      	adds	r4, r4, r3
    e0bc:	7823      	ldrb	r3, [r4, #0]
    e0be:	2b2d      	cmp	r3, #45	; 0x2d
    e0c0:	d144      	bne.n	e14c <_tzset_unlocked_r+0x104>
    e0c2:	3b2e      	subs	r3, #46	; 0x2e
    e0c4:	3401      	adds	r4, #1
    e0c6:	9304      	str	r3, [sp, #16]
    e0c8:	2716      	movs	r7, #22
    e0ca:	ab02      	add	r3, sp, #8
    e0cc:	18ff      	adds	r7, r7, r3
    e0ce:	2300      	movs	r3, #0
    e0d0:	803b      	strh	r3, [r7, #0]
    e0d2:	2300      	movs	r3, #0
    e0d4:	ad08      	add	r5, sp, #32
    e0d6:	802b      	strh	r3, [r5, #0]
    e0d8:	ab0a      	add	r3, sp, #40	; 0x28
    e0da:	9303      	str	r3, [sp, #12]
    e0dc:	9502      	str	r5, [sp, #8]
    e0de:	9301      	str	r3, [sp, #4]
    e0e0:	9700      	str	r7, [sp, #0]
    e0e2:	aa07      	add	r2, sp, #28
    e0e4:	4992      	ldr	r1, [pc, #584]	; (e330 <_tzset_unlocked_r+0x2e8>)
    e0e6:	0020      	movs	r0, r4
    e0e8:	f001 ffd8 	bl	1009c <siscanf>
    e0ec:	2800      	cmp	r0, #0
    e0ee:	ddc4      	ble.n	e07a <_tzset_unlocked_r+0x32>
    e0f0:	233c      	movs	r3, #60	; 0x3c
    e0f2:	883a      	ldrh	r2, [r7, #0]
    e0f4:	4f8f      	ldr	r7, [pc, #572]	; (e334 <_tzset_unlocked_r+0x2ec>)
    e0f6:	4353      	muls	r3, r2
    e0f8:	882a      	ldrh	r2, [r5, #0]
    e0fa:	4d8a      	ldr	r5, [pc, #552]	; (e324 <_tzset_unlocked_r+0x2dc>)
    e0fc:	189b      	adds	r3, r3, r2
    e0fe:	aa02      	add	r2, sp, #8
    e100:	8a91      	ldrh	r1, [r2, #20]
    e102:	22e1      	movs	r2, #225	; 0xe1
    e104:	0112      	lsls	r2, r2, #4
    e106:	434a      	muls	r2, r1
    e108:	189b      	adds	r3, r3, r2
    e10a:	9a04      	ldr	r2, [sp, #16]
    e10c:	4987      	ldr	r1, [pc, #540]	; (e32c <_tzset_unlocked_r+0x2e4>)
    e10e:	435a      	muls	r2, r3
    e110:	4b85      	ldr	r3, [pc, #532]	; (e328 <_tzset_unlocked_r+0x2e0>)
    e112:	6232      	str	r2, [r6, #32]
    e114:	602b      	str	r3, [r5, #0]
    e116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e118:	003a      	movs	r2, r7
    e11a:	18e4      	adds	r4, r4, r3
    e11c:	0020      	movs	r0, r4
    e11e:	ab0a      	add	r3, sp, #40	; 0x28
    e120:	f001 ffbc 	bl	1009c <siscanf>
    e124:	2800      	cmp	r0, #0
    e126:	dc18      	bgt.n	e15a <_tzset_unlocked_r+0x112>
    e128:	682b      	ldr	r3, [r5, #0]
    e12a:	6a32      	ldr	r2, [r6, #32]
    e12c:	606b      	str	r3, [r5, #4]
    e12e:	4b7a      	ldr	r3, [pc, #488]	; (e318 <_tzset_unlocked_r+0x2d0>)
    e130:	601a      	str	r2, [r3, #0]
    e132:	2200      	movs	r2, #0
    e134:	4b7a      	ldr	r3, [pc, #488]	; (e320 <_tzset_unlocked_r+0x2d8>)
    e136:	601a      	str	r2, [r3, #0]
    e138:	e79f      	b.n	e07a <_tzset_unlocked_r+0x32>
    e13a:	f7ff fdca 	bl	dcd2 <strcmp>
    e13e:	2800      	cmp	r0, #0
    e140:	d09b      	beq.n	e07a <_tzset_unlocked_r+0x32>
    e142:	e79f      	b.n	e084 <_tzset_unlocked_r+0x3c>
    e144:	0021      	movs	r1, r4
    e146:	f7ff fdce 	bl	dce6 <strcpy>
    e14a:	e7a8      	b.n	e09e <_tzset_unlocked_r+0x56>
    e14c:	2201      	movs	r2, #1
    e14e:	3b2b      	subs	r3, #43	; 0x2b
    e150:	9204      	str	r2, [sp, #16]
    e152:	4259      	negs	r1, r3
    e154:	4159      	adcs	r1, r3
    e156:	1864      	adds	r4, r4, r1
    e158:	e7b6      	b.n	e0c8 <_tzset_unlocked_r+0x80>
    e15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e15c:	606f      	str	r7, [r5, #4]
    e15e:	18e4      	adds	r4, r4, r3
    e160:	7823      	ldrb	r3, [r4, #0]
    e162:	2b2d      	cmp	r3, #45	; 0x2d
    e164:	d000      	beq.n	e168 <_tzset_unlocked_r+0x120>
    e166:	e08f      	b.n	e288 <_tzset_unlocked_r+0x240>
    e168:	3b2e      	subs	r3, #46	; 0x2e
    e16a:	3401      	adds	r4, #1
    e16c:	9304      	str	r3, [sp, #16]
    e16e:	2716      	movs	r7, #22
    e170:	2300      	movs	r3, #0
    e172:	aa02      	add	r2, sp, #8
    e174:	18bf      	adds	r7, r7, r2
    e176:	ad07      	add	r5, sp, #28
    e178:	8313      	strh	r3, [r2, #24]
    e17a:	802b      	strh	r3, [r5, #0]
    e17c:	803b      	strh	r3, [r7, #0]
    e17e:	aa08      	add	r2, sp, #32
    e180:	930a      	str	r3, [sp, #40]	; 0x28
    e182:	ab0a      	add	r3, sp, #40	; 0x28
    e184:	9202      	str	r2, [sp, #8]
    e186:	9303      	str	r3, [sp, #12]
    e188:	9301      	str	r3, [sp, #4]
    e18a:	9700      	str	r7, [sp, #0]
    e18c:	002a      	movs	r2, r5
    e18e:	4968      	ldr	r1, [pc, #416]	; (e330 <_tzset_unlocked_r+0x2e8>)
    e190:	0020      	movs	r0, r4
    e192:	f001 ff83 	bl	1009c <siscanf>
    e196:	2800      	cmp	r0, #0
    e198:	dd00      	ble.n	e19c <_tzset_unlocked_r+0x154>
    e19a:	e07c      	b.n	e296 <_tzset_unlocked_r+0x24e>
    e19c:	6a33      	ldr	r3, [r6, #32]
    e19e:	4a66      	ldr	r2, [pc, #408]	; (e338 <_tzset_unlocked_r+0x2f0>)
    e1a0:	189b      	adds	r3, r3, r2
    e1a2:	63f3      	str	r3, [r6, #60]	; 0x3c
    e1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e1a6:	0037      	movs	r7, r6
    e1a8:	18e4      	adds	r4, r4, r3
    e1aa:	2300      	movs	r3, #0
    e1ac:	3708      	adds	r7, #8
    e1ae:	9304      	str	r3, [sp, #16]
    e1b0:	7823      	ldrb	r3, [r4, #0]
    e1b2:	3b2c      	subs	r3, #44	; 0x2c
    e1b4:	4259      	negs	r1, r3
    e1b6:	4159      	adcs	r1, r3
    e1b8:	1864      	adds	r4, r4, r1
    e1ba:	7825      	ldrb	r5, [r4, #0]
    e1bc:	2d4d      	cmp	r5, #77	; 0x4d
    e1be:	d000      	beq.n	e1c2 <_tzset_unlocked_r+0x17a>
    e1c0:	e078      	b.n	e2b4 <_tzset_unlocked_r+0x26c>
    e1c2:	221e      	movs	r2, #30
    e1c4:	a902      	add	r1, sp, #8
    e1c6:	1852      	adds	r2, r2, r1
    e1c8:	9202      	str	r2, [sp, #8]
    e1ca:	aa09      	add	r2, sp, #36	; 0x24
    e1cc:	9200      	str	r2, [sp, #0]
    e1ce:	221a      	movs	r2, #26
    e1d0:	ab0a      	add	r3, sp, #40	; 0x28
    e1d2:	1852      	adds	r2, r2, r1
    e1d4:	9303      	str	r3, [sp, #12]
    e1d6:	9301      	str	r3, [sp, #4]
    e1d8:	4958      	ldr	r1, [pc, #352]	; (e33c <_tzset_unlocked_r+0x2f4>)
    e1da:	0020      	movs	r0, r4
    e1dc:	f001 ff5e 	bl	1009c <siscanf>
    e1e0:	2803      	cmp	r0, #3
    e1e2:	d000      	beq.n	e1e6 <_tzset_unlocked_r+0x19e>
    e1e4:	e749      	b.n	e07a <_tzset_unlocked_r+0x32>
    e1e6:	ab02      	add	r3, sp, #8
    e1e8:	8b59      	ldrh	r1, [r3, #26]
    e1ea:	1e4b      	subs	r3, r1, #1
    e1ec:	2b0b      	cmp	r3, #11
    e1ee:	d900      	bls.n	e1f2 <_tzset_unlocked_r+0x1aa>
    e1f0:	e743      	b.n	e07a <_tzset_unlocked_r+0x32>
    e1f2:	ab02      	add	r3, sp, #8
    e1f4:	8b9a      	ldrh	r2, [r3, #28]
    e1f6:	1e53      	subs	r3, r2, #1
    e1f8:	2b04      	cmp	r3, #4
    e1fa:	d900      	bls.n	e1fe <_tzset_unlocked_r+0x1b6>
    e1fc:	e73d      	b.n	e07a <_tzset_unlocked_r+0x32>
    e1fe:	ab02      	add	r3, sp, #8
    e200:	8bdb      	ldrh	r3, [r3, #30]
    e202:	2b06      	cmp	r3, #6
    e204:	d900      	bls.n	e208 <_tzset_unlocked_r+0x1c0>
    e206:	e738      	b.n	e07a <_tzset_unlocked_r+0x32>
    e208:	703d      	strb	r5, [r7, #0]
    e20a:	6079      	str	r1, [r7, #4]
    e20c:	60ba      	str	r2, [r7, #8]
    e20e:	60fb      	str	r3, [r7, #12]
    e210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e212:	18e5      	adds	r5, r4, r3
    e214:	2302      	movs	r3, #2
    e216:	aa07      	add	r2, sp, #28
    e218:	8013      	strh	r3, [r2, #0]
    e21a:	2300      	movs	r3, #0
    e21c:	a902      	add	r1, sp, #8
    e21e:	ac08      	add	r4, sp, #32
    e220:	82cb      	strh	r3, [r1, #22]
    e222:	8023      	strh	r3, [r4, #0]
    e224:	930a      	str	r3, [sp, #40]	; 0x28
    e226:	782b      	ldrb	r3, [r5, #0]
    e228:	2b2f      	cmp	r3, #47	; 0x2f
    e22a:	d10b      	bne.n	e244 <_tzset_unlocked_r+0x1fc>
    e22c:	2116      	movs	r1, #22
    e22e:	a802      	add	r0, sp, #8
    e230:	1809      	adds	r1, r1, r0
    e232:	ab0a      	add	r3, sp, #40	; 0x28
    e234:	9100      	str	r1, [sp, #0]
    e236:	9303      	str	r3, [sp, #12]
    e238:	9402      	str	r4, [sp, #8]
    e23a:	9301      	str	r3, [sp, #4]
    e23c:	4940      	ldr	r1, [pc, #256]	; (e340 <_tzset_unlocked_r+0x2f8>)
    e23e:	0028      	movs	r0, r5
    e240:	f001 ff2c 	bl	1009c <siscanf>
    e244:	ab02      	add	r3, sp, #8
    e246:	8ada      	ldrh	r2, [r3, #22]
    e248:	233c      	movs	r3, #60	; 0x3c
    e24a:	4353      	muls	r3, r2
    e24c:	8822      	ldrh	r2, [r4, #0]
    e24e:	189b      	adds	r3, r3, r2
    e250:	aa07      	add	r2, sp, #28
    e252:	8811      	ldrh	r1, [r2, #0]
    e254:	22e1      	movs	r2, #225	; 0xe1
    e256:	0112      	lsls	r2, r2, #4
    e258:	434a      	muls	r2, r1
    e25a:	189b      	adds	r3, r3, r2
    e25c:	613b      	str	r3, [r7, #16]
    e25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e260:	371c      	adds	r7, #28
    e262:	18ec      	adds	r4, r5, r3
    e264:	9b04      	ldr	r3, [sp, #16]
    e266:	3301      	adds	r3, #1
    e268:	9304      	str	r3, [sp, #16]
    e26a:	2b02      	cmp	r3, #2
    e26c:	d1a0      	bne.n	e1b0 <_tzset_unlocked_r+0x168>
    e26e:	6870      	ldr	r0, [r6, #4]
    e270:	f7ff fe32 	bl	ded8 <__tzcalc_limits>
    e274:	6a32      	ldr	r2, [r6, #32]
    e276:	4b28      	ldr	r3, [pc, #160]	; (e318 <_tzset_unlocked_r+0x2d0>)
    e278:	601a      	str	r2, [r3, #0]
    e27a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    e27c:	1a9b      	subs	r3, r3, r2
    e27e:	1e5a      	subs	r2, r3, #1
    e280:	4193      	sbcs	r3, r2
    e282:	4a27      	ldr	r2, [pc, #156]	; (e320 <_tzset_unlocked_r+0x2d8>)
    e284:	6013      	str	r3, [r2, #0]
    e286:	e6f8      	b.n	e07a <_tzset_unlocked_r+0x32>
    e288:	2201      	movs	r2, #1
    e28a:	3b2b      	subs	r3, #43	; 0x2b
    e28c:	9204      	str	r2, [sp, #16]
    e28e:	4259      	negs	r1, r3
    e290:	4159      	adcs	r1, r3
    e292:	1864      	adds	r4, r4, r1
    e294:	e76b      	b.n	e16e <_tzset_unlocked_r+0x126>
    e296:	233c      	movs	r3, #60	; 0x3c
    e298:	883a      	ldrh	r2, [r7, #0]
    e29a:	8829      	ldrh	r1, [r5, #0]
    e29c:	4353      	muls	r3, r2
    e29e:	aa02      	add	r2, sp, #8
    e2a0:	8b12      	ldrh	r2, [r2, #24]
    e2a2:	189b      	adds	r3, r3, r2
    e2a4:	22e1      	movs	r2, #225	; 0xe1
    e2a6:	0112      	lsls	r2, r2, #4
    e2a8:	434a      	muls	r2, r1
    e2aa:	189b      	adds	r3, r3, r2
    e2ac:	9a04      	ldr	r2, [sp, #16]
    e2ae:	435a      	muls	r2, r3
    e2b0:	0013      	movs	r3, r2
    e2b2:	e776      	b.n	e1a2 <_tzset_unlocked_r+0x15a>
    e2b4:	2344      	movs	r3, #68	; 0x44
    e2b6:	9305      	str	r3, [sp, #20]
    e2b8:	2d4a      	cmp	r5, #74	; 0x4a
    e2ba:	d101      	bne.n	e2c0 <_tzset_unlocked_r+0x278>
    e2bc:	3401      	adds	r4, #1
    e2be:	9505      	str	r5, [sp, #20]
    e2c0:	220a      	movs	r2, #10
    e2c2:	a90b      	add	r1, sp, #44	; 0x2c
    e2c4:	0020      	movs	r0, r4
    e2c6:	f001 fff7 	bl	102b8 <strtoul>
    e2ca:	231e      	movs	r3, #30
    e2cc:	aa02      	add	r2, sp, #8
    e2ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    e2d0:	189b      	adds	r3, r3, r2
    e2d2:	8018      	strh	r0, [r3, #0]
    e2d4:	42ac      	cmp	r4, r5
    e2d6:	d115      	bne.n	e304 <_tzset_unlocked_r+0x2bc>
    e2d8:	9b04      	ldr	r3, [sp, #16]
    e2da:	2b00      	cmp	r3, #0
    e2dc:	d108      	bne.n	e2f0 <_tzset_unlocked_r+0x2a8>
    e2de:	334d      	adds	r3, #77	; 0x4d
    e2e0:	7233      	strb	r3, [r6, #8]
    e2e2:	2303      	movs	r3, #3
    e2e4:	60f3      	str	r3, [r6, #12]
    e2e6:	3b01      	subs	r3, #1
    e2e8:	6133      	str	r3, [r6, #16]
    e2ea:	9b04      	ldr	r3, [sp, #16]
    e2ec:	6173      	str	r3, [r6, #20]
    e2ee:	e791      	b.n	e214 <_tzset_unlocked_r+0x1cc>
    e2f0:	224d      	movs	r2, #77	; 0x4d
    e2f2:	1d73      	adds	r3, r6, #5
    e2f4:	77da      	strb	r2, [r3, #31]
    e2f6:	230b      	movs	r3, #11
    e2f8:	62b3      	str	r3, [r6, #40]	; 0x28
    e2fa:	3b0a      	subs	r3, #10
    e2fc:	62f3      	str	r3, [r6, #44]	; 0x2c
    e2fe:	2300      	movs	r3, #0
    e300:	6333      	str	r3, [r6, #48]	; 0x30
    e302:	e787      	b.n	e214 <_tzset_unlocked_r+0x1cc>
    e304:	466b      	mov	r3, sp
    e306:	7d1b      	ldrb	r3, [r3, #20]
    e308:	b280      	uxth	r0, r0
    e30a:	703b      	strb	r3, [r7, #0]
    e30c:	60f8      	str	r0, [r7, #12]
    e30e:	e781      	b.n	e214 <_tzset_unlocked_r+0x1cc>
    e310:	000129cb 	.word	0x000129cb
    e314:	20001f94 	.word	0x20001f94
    e318:	20001f9c 	.word	0x20001f9c
    e31c:	000129ce 	.word	0x000129ce
    e320:	20001f98 	.word	0x20001f98
    e324:	20000284 	.word	0x20000284
    e328:	20001f87 	.word	0x20001f87
    e32c:	000129d2 	.word	0x000129d2
    e330:	000129f5 	.word	0x000129f5
    e334:	20001f7c 	.word	0x20001f7c
    e338:	fffff1f0 	.word	0xfffff1f0
    e33c:	000129e1 	.word	0x000129e1
    e340:	000129f4 	.word	0x000129f4

0000e344 <_vsiprintf_r>:
    e344:	b530      	push	{r4, r5, lr}
    e346:	b09b      	sub	sp, #108	; 0x6c
    e348:	9100      	str	r1, [sp, #0]
    e34a:	9104      	str	r1, [sp, #16]
    e34c:	4908      	ldr	r1, [pc, #32]	; (e370 <_vsiprintf_r+0x2c>)
    e34e:	466d      	mov	r5, sp
    e350:	9102      	str	r1, [sp, #8]
    e352:	9105      	str	r1, [sp, #20]
    e354:	2101      	movs	r1, #1
    e356:	2482      	movs	r4, #130	; 0x82
    e358:	4249      	negs	r1, r1
    e35a:	81e9      	strh	r1, [r5, #14]
    e35c:	00a4      	lsls	r4, r4, #2
    e35e:	4669      	mov	r1, sp
    e360:	81ac      	strh	r4, [r5, #12]
    e362:	f001 fd4d 	bl	fe00 <_svfiprintf_r>
    e366:	2300      	movs	r3, #0
    e368:	9a00      	ldr	r2, [sp, #0]
    e36a:	7013      	strb	r3, [r2, #0]
    e36c:	b01b      	add	sp, #108	; 0x6c
    e36e:	bd30      	pop	{r4, r5, pc}
    e370:	7fffffff 	.word	0x7fffffff

0000e374 <vsiprintf>:
    e374:	b510      	push	{r4, lr}
    e376:	0013      	movs	r3, r2
    e378:	000a      	movs	r2, r1
    e37a:	0001      	movs	r1, r0
    e37c:	4802      	ldr	r0, [pc, #8]	; (e388 <vsiprintf+0x14>)
    e37e:	6800      	ldr	r0, [r0, #0]
    e380:	f7ff ffe0 	bl	e344 <_vsiprintf_r>
    e384:	bd10      	pop	{r4, pc}
    e386:	46c0      	nop			; (mov r8, r8)
    e388:	200000b4 	.word	0x200000b4

0000e38c <__swbuf_r>:
    e38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e38e:	0005      	movs	r5, r0
    e390:	000e      	movs	r6, r1
    e392:	0014      	movs	r4, r2
    e394:	2800      	cmp	r0, #0
    e396:	d004      	beq.n	e3a2 <__swbuf_r+0x16>
    e398:	6983      	ldr	r3, [r0, #24]
    e39a:	2b00      	cmp	r3, #0
    e39c:	d101      	bne.n	e3a2 <__swbuf_r+0x16>
    e39e:	f001 f855 	bl	f44c <__sinit>
    e3a2:	4b22      	ldr	r3, [pc, #136]	; (e42c <__swbuf_r+0xa0>)
    e3a4:	429c      	cmp	r4, r3
    e3a6:	d12d      	bne.n	e404 <__swbuf_r+0x78>
    e3a8:	686c      	ldr	r4, [r5, #4]
    e3aa:	69a3      	ldr	r3, [r4, #24]
    e3ac:	60a3      	str	r3, [r4, #8]
    e3ae:	89a3      	ldrh	r3, [r4, #12]
    e3b0:	071b      	lsls	r3, r3, #28
    e3b2:	d531      	bpl.n	e418 <__swbuf_r+0x8c>
    e3b4:	6923      	ldr	r3, [r4, #16]
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	d02e      	beq.n	e418 <__swbuf_r+0x8c>
    e3ba:	6823      	ldr	r3, [r4, #0]
    e3bc:	6922      	ldr	r2, [r4, #16]
    e3be:	b2f7      	uxtb	r7, r6
    e3c0:	1a98      	subs	r0, r3, r2
    e3c2:	6963      	ldr	r3, [r4, #20]
    e3c4:	b2f6      	uxtb	r6, r6
    e3c6:	4298      	cmp	r0, r3
    e3c8:	db05      	blt.n	e3d6 <__swbuf_r+0x4a>
    e3ca:	0021      	movs	r1, r4
    e3cc:	0028      	movs	r0, r5
    e3ce:	f000 ffcf 	bl	f370 <_fflush_r>
    e3d2:	2800      	cmp	r0, #0
    e3d4:	d126      	bne.n	e424 <__swbuf_r+0x98>
    e3d6:	68a3      	ldr	r3, [r4, #8]
    e3d8:	3001      	adds	r0, #1
    e3da:	3b01      	subs	r3, #1
    e3dc:	60a3      	str	r3, [r4, #8]
    e3de:	6823      	ldr	r3, [r4, #0]
    e3e0:	1c5a      	adds	r2, r3, #1
    e3e2:	6022      	str	r2, [r4, #0]
    e3e4:	701f      	strb	r7, [r3, #0]
    e3e6:	6963      	ldr	r3, [r4, #20]
    e3e8:	4298      	cmp	r0, r3
    e3ea:	d004      	beq.n	e3f6 <__swbuf_r+0x6a>
    e3ec:	89a3      	ldrh	r3, [r4, #12]
    e3ee:	07db      	lsls	r3, r3, #31
    e3f0:	d51a      	bpl.n	e428 <__swbuf_r+0x9c>
    e3f2:	2e0a      	cmp	r6, #10
    e3f4:	d118      	bne.n	e428 <__swbuf_r+0x9c>
    e3f6:	0021      	movs	r1, r4
    e3f8:	0028      	movs	r0, r5
    e3fa:	f000 ffb9 	bl	f370 <_fflush_r>
    e3fe:	2800      	cmp	r0, #0
    e400:	d012      	beq.n	e428 <__swbuf_r+0x9c>
    e402:	e00f      	b.n	e424 <__swbuf_r+0x98>
    e404:	4b0a      	ldr	r3, [pc, #40]	; (e430 <__swbuf_r+0xa4>)
    e406:	429c      	cmp	r4, r3
    e408:	d101      	bne.n	e40e <__swbuf_r+0x82>
    e40a:	68ac      	ldr	r4, [r5, #8]
    e40c:	e7cd      	b.n	e3aa <__swbuf_r+0x1e>
    e40e:	4b09      	ldr	r3, [pc, #36]	; (e434 <__swbuf_r+0xa8>)
    e410:	429c      	cmp	r4, r3
    e412:	d1ca      	bne.n	e3aa <__swbuf_r+0x1e>
    e414:	68ec      	ldr	r4, [r5, #12]
    e416:	e7c8      	b.n	e3aa <__swbuf_r+0x1e>
    e418:	0021      	movs	r1, r4
    e41a:	0028      	movs	r0, r5
    e41c:	f000 f818 	bl	e450 <__swsetup_r>
    e420:	2800      	cmp	r0, #0
    e422:	d0ca      	beq.n	e3ba <__swbuf_r+0x2e>
    e424:	2601      	movs	r6, #1
    e426:	4276      	negs	r6, r6
    e428:	0030      	movs	r0, r6
    e42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e42c:	00012b38 	.word	0x00012b38
    e430:	00012b58 	.word	0x00012b58
    e434:	00012b18 	.word	0x00012b18

0000e438 <__ascii_wctomb>:
    e438:	1e0b      	subs	r3, r1, #0
    e43a:	d004      	beq.n	e446 <__ascii_wctomb+0xe>
    e43c:	2aff      	cmp	r2, #255	; 0xff
    e43e:	d904      	bls.n	e44a <__ascii_wctomb+0x12>
    e440:	238a      	movs	r3, #138	; 0x8a
    e442:	6003      	str	r3, [r0, #0]
    e444:	3b8b      	subs	r3, #139	; 0x8b
    e446:	0018      	movs	r0, r3
    e448:	4770      	bx	lr
    e44a:	700a      	strb	r2, [r1, #0]
    e44c:	2301      	movs	r3, #1
    e44e:	e7fa      	b.n	e446 <__ascii_wctomb+0xe>

0000e450 <__swsetup_r>:
    e450:	4b36      	ldr	r3, [pc, #216]	; (e52c <__swsetup_r+0xdc>)
    e452:	b570      	push	{r4, r5, r6, lr}
    e454:	681d      	ldr	r5, [r3, #0]
    e456:	0006      	movs	r6, r0
    e458:	000c      	movs	r4, r1
    e45a:	2d00      	cmp	r5, #0
    e45c:	d005      	beq.n	e46a <__swsetup_r+0x1a>
    e45e:	69ab      	ldr	r3, [r5, #24]
    e460:	2b00      	cmp	r3, #0
    e462:	d102      	bne.n	e46a <__swsetup_r+0x1a>
    e464:	0028      	movs	r0, r5
    e466:	f000 fff1 	bl	f44c <__sinit>
    e46a:	4b31      	ldr	r3, [pc, #196]	; (e530 <__swsetup_r+0xe0>)
    e46c:	429c      	cmp	r4, r3
    e46e:	d10f      	bne.n	e490 <__swsetup_r+0x40>
    e470:	686c      	ldr	r4, [r5, #4]
    e472:	230c      	movs	r3, #12
    e474:	5ee2      	ldrsh	r2, [r4, r3]
    e476:	b293      	uxth	r3, r2
    e478:	0719      	lsls	r1, r3, #28
    e47a:	d42d      	bmi.n	e4d8 <__swsetup_r+0x88>
    e47c:	06d9      	lsls	r1, r3, #27
    e47e:	d411      	bmi.n	e4a4 <__swsetup_r+0x54>
    e480:	2309      	movs	r3, #9
    e482:	2001      	movs	r0, #1
    e484:	6033      	str	r3, [r6, #0]
    e486:	3337      	adds	r3, #55	; 0x37
    e488:	4313      	orrs	r3, r2
    e48a:	81a3      	strh	r3, [r4, #12]
    e48c:	4240      	negs	r0, r0
    e48e:	bd70      	pop	{r4, r5, r6, pc}
    e490:	4b28      	ldr	r3, [pc, #160]	; (e534 <__swsetup_r+0xe4>)
    e492:	429c      	cmp	r4, r3
    e494:	d101      	bne.n	e49a <__swsetup_r+0x4a>
    e496:	68ac      	ldr	r4, [r5, #8]
    e498:	e7eb      	b.n	e472 <__swsetup_r+0x22>
    e49a:	4b27      	ldr	r3, [pc, #156]	; (e538 <__swsetup_r+0xe8>)
    e49c:	429c      	cmp	r4, r3
    e49e:	d1e8      	bne.n	e472 <__swsetup_r+0x22>
    e4a0:	68ec      	ldr	r4, [r5, #12]
    e4a2:	e7e6      	b.n	e472 <__swsetup_r+0x22>
    e4a4:	075b      	lsls	r3, r3, #29
    e4a6:	d513      	bpl.n	e4d0 <__swsetup_r+0x80>
    e4a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e4aa:	2900      	cmp	r1, #0
    e4ac:	d008      	beq.n	e4c0 <__swsetup_r+0x70>
    e4ae:	0023      	movs	r3, r4
    e4b0:	3344      	adds	r3, #68	; 0x44
    e4b2:	4299      	cmp	r1, r3
    e4b4:	d002      	beq.n	e4bc <__swsetup_r+0x6c>
    e4b6:	0030      	movs	r0, r6
    e4b8:	f7fe fd64 	bl	cf84 <_free_r>
    e4bc:	2300      	movs	r3, #0
    e4be:	6363      	str	r3, [r4, #52]	; 0x34
    e4c0:	2224      	movs	r2, #36	; 0x24
    e4c2:	89a3      	ldrh	r3, [r4, #12]
    e4c4:	4393      	bics	r3, r2
    e4c6:	81a3      	strh	r3, [r4, #12]
    e4c8:	2300      	movs	r3, #0
    e4ca:	6063      	str	r3, [r4, #4]
    e4cc:	6923      	ldr	r3, [r4, #16]
    e4ce:	6023      	str	r3, [r4, #0]
    e4d0:	2308      	movs	r3, #8
    e4d2:	89a2      	ldrh	r2, [r4, #12]
    e4d4:	4313      	orrs	r3, r2
    e4d6:	81a3      	strh	r3, [r4, #12]
    e4d8:	6923      	ldr	r3, [r4, #16]
    e4da:	2b00      	cmp	r3, #0
    e4dc:	d10b      	bne.n	e4f6 <__swsetup_r+0xa6>
    e4de:	21a0      	movs	r1, #160	; 0xa0
    e4e0:	2280      	movs	r2, #128	; 0x80
    e4e2:	89a3      	ldrh	r3, [r4, #12]
    e4e4:	0089      	lsls	r1, r1, #2
    e4e6:	0092      	lsls	r2, r2, #2
    e4e8:	400b      	ands	r3, r1
    e4ea:	4293      	cmp	r3, r2
    e4ec:	d003      	beq.n	e4f6 <__swsetup_r+0xa6>
    e4ee:	0021      	movs	r1, r4
    e4f0:	0030      	movs	r0, r6
    e4f2:	f001 f8bb 	bl	f66c <__smakebuf_r>
    e4f6:	2301      	movs	r3, #1
    e4f8:	89a2      	ldrh	r2, [r4, #12]
    e4fa:	4013      	ands	r3, r2
    e4fc:	d011      	beq.n	e522 <__swsetup_r+0xd2>
    e4fe:	2300      	movs	r3, #0
    e500:	60a3      	str	r3, [r4, #8]
    e502:	6963      	ldr	r3, [r4, #20]
    e504:	425b      	negs	r3, r3
    e506:	61a3      	str	r3, [r4, #24]
    e508:	2000      	movs	r0, #0
    e50a:	6923      	ldr	r3, [r4, #16]
    e50c:	4283      	cmp	r3, r0
    e50e:	d1be      	bne.n	e48e <__swsetup_r+0x3e>
    e510:	230c      	movs	r3, #12
    e512:	5ee2      	ldrsh	r2, [r4, r3]
    e514:	0613      	lsls	r3, r2, #24
    e516:	d5ba      	bpl.n	e48e <__swsetup_r+0x3e>
    e518:	2340      	movs	r3, #64	; 0x40
    e51a:	4313      	orrs	r3, r2
    e51c:	81a3      	strh	r3, [r4, #12]
    e51e:	3801      	subs	r0, #1
    e520:	e7b5      	b.n	e48e <__swsetup_r+0x3e>
    e522:	0792      	lsls	r2, r2, #30
    e524:	d400      	bmi.n	e528 <__swsetup_r+0xd8>
    e526:	6963      	ldr	r3, [r4, #20]
    e528:	60a3      	str	r3, [r4, #8]
    e52a:	e7ed      	b.n	e508 <__swsetup_r+0xb8>
    e52c:	200000b4 	.word	0x200000b4
    e530:	00012b38 	.word	0x00012b38
    e534:	00012b58 	.word	0x00012b58
    e538:	00012b18 	.word	0x00012b18

0000e53c <abort>:
    e53c:	b510      	push	{r4, lr}
    e53e:	2006      	movs	r0, #6
    e540:	f001 fd8c 	bl	1005c <raise>
    e544:	2001      	movs	r0, #1
    e546:	f002 fb4b 	bl	10be0 <_exit>

0000e54a <div>:
    e54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e54c:	000f      	movs	r7, r1
    e54e:	0006      	movs	r6, r0
    e550:	0011      	movs	r1, r2
    e552:	0038      	movs	r0, r7
    e554:	0015      	movs	r5, r2
    e556:	f7fb f9d7 	bl	9908 <__divsi3>
    e55a:	0029      	movs	r1, r5
    e55c:	0004      	movs	r4, r0
    e55e:	0038      	movs	r0, r7
    e560:	f7fb fab8 	bl	9ad4 <__aeabi_idivmod>
    e564:	2f00      	cmp	r7, #0
    e566:	db07      	blt.n	e578 <div+0x2e>
    e568:	2900      	cmp	r1, #0
    e56a:	da01      	bge.n	e570 <div+0x26>
    e56c:	3401      	adds	r4, #1
    e56e:	1b49      	subs	r1, r1, r5
    e570:	0030      	movs	r0, r6
    e572:	6034      	str	r4, [r6, #0]
    e574:	6071      	str	r1, [r6, #4]
    e576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e578:	2900      	cmp	r1, #0
    e57a:	ddf9      	ble.n	e570 <div+0x26>
    e57c:	3c01      	subs	r4, #1
    e57e:	1949      	adds	r1, r1, r5
    e580:	e7f6      	b.n	e570 <div+0x26>

0000e582 <quorem>:
    e582:	b5f0      	push	{r4, r5, r6, r7, lr}
    e584:	6903      	ldr	r3, [r0, #16]
    e586:	690c      	ldr	r4, [r1, #16]
    e588:	b089      	sub	sp, #36	; 0x24
    e58a:	0007      	movs	r7, r0
    e58c:	9105      	str	r1, [sp, #20]
    e58e:	2600      	movs	r6, #0
    e590:	429c      	cmp	r4, r3
    e592:	dc6d      	bgt.n	e670 <quorem+0xee>
    e594:	000b      	movs	r3, r1
    e596:	3c01      	subs	r4, #1
    e598:	3314      	adds	r3, #20
    e59a:	00a5      	lsls	r5, r4, #2
    e59c:	9303      	str	r3, [sp, #12]
    e59e:	195b      	adds	r3, r3, r5
    e5a0:	9304      	str	r3, [sp, #16]
    e5a2:	0003      	movs	r3, r0
    e5a4:	3314      	adds	r3, #20
    e5a6:	9302      	str	r3, [sp, #8]
    e5a8:	195d      	adds	r5, r3, r5
    e5aa:	9b04      	ldr	r3, [sp, #16]
    e5ac:	6828      	ldr	r0, [r5, #0]
    e5ae:	681b      	ldr	r3, [r3, #0]
    e5b0:	1c59      	adds	r1, r3, #1
    e5b2:	9301      	str	r3, [sp, #4]
    e5b4:	f7fb f91e 	bl	97f4 <__udivsi3>
    e5b8:	9001      	str	r0, [sp, #4]
    e5ba:	42b0      	cmp	r0, r6
    e5bc:	d02d      	beq.n	e61a <quorem+0x98>
    e5be:	9b03      	ldr	r3, [sp, #12]
    e5c0:	9802      	ldr	r0, [sp, #8]
    e5c2:	469c      	mov	ip, r3
    e5c4:	9606      	str	r6, [sp, #24]
    e5c6:	4662      	mov	r2, ip
    e5c8:	ca08      	ldmia	r2!, {r3}
    e5ca:	4694      	mov	ip, r2
    e5cc:	9a01      	ldr	r2, [sp, #4]
    e5ce:	b299      	uxth	r1, r3
    e5d0:	4351      	muls	r1, r2
    e5d2:	0c1b      	lsrs	r3, r3, #16
    e5d4:	4353      	muls	r3, r2
    e5d6:	1989      	adds	r1, r1, r6
    e5d8:	0c0a      	lsrs	r2, r1, #16
    e5da:	189b      	adds	r3, r3, r2
    e5dc:	9307      	str	r3, [sp, #28]
    e5de:	8802      	ldrh	r2, [r0, #0]
    e5e0:	0c1e      	lsrs	r6, r3, #16
    e5e2:	9b06      	ldr	r3, [sp, #24]
    e5e4:	b289      	uxth	r1, r1
    e5e6:	18d2      	adds	r2, r2, r3
    e5e8:	6803      	ldr	r3, [r0, #0]
    e5ea:	1a52      	subs	r2, r2, r1
    e5ec:	0c19      	lsrs	r1, r3, #16
    e5ee:	466b      	mov	r3, sp
    e5f0:	8b9b      	ldrh	r3, [r3, #28]
    e5f2:	1acb      	subs	r3, r1, r3
    e5f4:	1411      	asrs	r1, r2, #16
    e5f6:	185b      	adds	r3, r3, r1
    e5f8:	1419      	asrs	r1, r3, #16
    e5fa:	b292      	uxth	r2, r2
    e5fc:	041b      	lsls	r3, r3, #16
    e5fe:	431a      	orrs	r2, r3
    e600:	9b04      	ldr	r3, [sp, #16]
    e602:	9106      	str	r1, [sp, #24]
    e604:	c004      	stmia	r0!, {r2}
    e606:	4563      	cmp	r3, ip
    e608:	d2dd      	bcs.n	e5c6 <quorem+0x44>
    e60a:	682b      	ldr	r3, [r5, #0]
    e60c:	2b00      	cmp	r3, #0
    e60e:	d104      	bne.n	e61a <quorem+0x98>
    e610:	9b02      	ldr	r3, [sp, #8]
    e612:	3d04      	subs	r5, #4
    e614:	42ab      	cmp	r3, r5
    e616:	d32e      	bcc.n	e676 <quorem+0xf4>
    e618:	613c      	str	r4, [r7, #16]
    e61a:	9905      	ldr	r1, [sp, #20]
    e61c:	0038      	movs	r0, r7
    e61e:	f001 fa88 	bl	fb32 <__mcmp>
    e622:	2800      	cmp	r0, #0
    e624:	db23      	blt.n	e66e <quorem+0xec>
    e626:	2500      	movs	r5, #0
    e628:	9b01      	ldr	r3, [sp, #4]
    e62a:	9802      	ldr	r0, [sp, #8]
    e62c:	3301      	adds	r3, #1
    e62e:	9903      	ldr	r1, [sp, #12]
    e630:	9301      	str	r3, [sp, #4]
    e632:	c908      	ldmia	r1!, {r3}
    e634:	8802      	ldrh	r2, [r0, #0]
    e636:	1955      	adds	r5, r2, r5
    e638:	b29a      	uxth	r2, r3
    e63a:	1aaa      	subs	r2, r5, r2
    e63c:	6805      	ldr	r5, [r0, #0]
    e63e:	0c1b      	lsrs	r3, r3, #16
    e640:	0c2d      	lsrs	r5, r5, #16
    e642:	1aeb      	subs	r3, r5, r3
    e644:	1415      	asrs	r5, r2, #16
    e646:	195b      	adds	r3, r3, r5
    e648:	141d      	asrs	r5, r3, #16
    e64a:	b292      	uxth	r2, r2
    e64c:	041b      	lsls	r3, r3, #16
    e64e:	4313      	orrs	r3, r2
    e650:	c008      	stmia	r0!, {r3}
    e652:	9b04      	ldr	r3, [sp, #16]
    e654:	428b      	cmp	r3, r1
    e656:	d2ec      	bcs.n	e632 <quorem+0xb0>
    e658:	9a02      	ldr	r2, [sp, #8]
    e65a:	00a3      	lsls	r3, r4, #2
    e65c:	18d3      	adds	r3, r2, r3
    e65e:	681a      	ldr	r2, [r3, #0]
    e660:	2a00      	cmp	r2, #0
    e662:	d104      	bne.n	e66e <quorem+0xec>
    e664:	9a02      	ldr	r2, [sp, #8]
    e666:	3b04      	subs	r3, #4
    e668:	429a      	cmp	r2, r3
    e66a:	d309      	bcc.n	e680 <quorem+0xfe>
    e66c:	613c      	str	r4, [r7, #16]
    e66e:	9e01      	ldr	r6, [sp, #4]
    e670:	0030      	movs	r0, r6
    e672:	b009      	add	sp, #36	; 0x24
    e674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e676:	682b      	ldr	r3, [r5, #0]
    e678:	2b00      	cmp	r3, #0
    e67a:	d1cd      	bne.n	e618 <quorem+0x96>
    e67c:	3c01      	subs	r4, #1
    e67e:	e7c7      	b.n	e610 <quorem+0x8e>
    e680:	681a      	ldr	r2, [r3, #0]
    e682:	2a00      	cmp	r2, #0
    e684:	d1f2      	bne.n	e66c <quorem+0xea>
    e686:	3c01      	subs	r4, #1
    e688:	e7ec      	b.n	e664 <quorem+0xe2>
	...

0000e68c <_dtoa_r>:
    e68c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e68e:	0016      	movs	r6, r2
    e690:	001f      	movs	r7, r3
    e692:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e694:	b09d      	sub	sp, #116	; 0x74
    e696:	9004      	str	r0, [sp, #16]
    e698:	9d25      	ldr	r5, [sp, #148]	; 0x94
    e69a:	9606      	str	r6, [sp, #24]
    e69c:	9707      	str	r7, [sp, #28]
    e69e:	2c00      	cmp	r4, #0
    e6a0:	d108      	bne.n	e6b4 <_dtoa_r+0x28>
    e6a2:	2010      	movs	r0, #16
    e6a4:	f7fe f9c0 	bl	ca28 <malloc>
    e6a8:	9b04      	ldr	r3, [sp, #16]
    e6aa:	6258      	str	r0, [r3, #36]	; 0x24
    e6ac:	6044      	str	r4, [r0, #4]
    e6ae:	6084      	str	r4, [r0, #8]
    e6b0:	6004      	str	r4, [r0, #0]
    e6b2:	60c4      	str	r4, [r0, #12]
    e6b4:	9b04      	ldr	r3, [sp, #16]
    e6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e6b8:	6819      	ldr	r1, [r3, #0]
    e6ba:	2900      	cmp	r1, #0
    e6bc:	d00b      	beq.n	e6d6 <_dtoa_r+0x4a>
    e6be:	685a      	ldr	r2, [r3, #4]
    e6c0:	2301      	movs	r3, #1
    e6c2:	4093      	lsls	r3, r2
    e6c4:	604a      	str	r2, [r1, #4]
    e6c6:	608b      	str	r3, [r1, #8]
    e6c8:	9804      	ldr	r0, [sp, #16]
    e6ca:	f001 f858 	bl	f77e <_Bfree>
    e6ce:	2200      	movs	r2, #0
    e6d0:	9b04      	ldr	r3, [sp, #16]
    e6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e6d4:	601a      	str	r2, [r3, #0]
    e6d6:	9b07      	ldr	r3, [sp, #28]
    e6d8:	2b00      	cmp	r3, #0
    e6da:	da1f      	bge.n	e71c <_dtoa_r+0x90>
    e6dc:	2301      	movs	r3, #1
    e6de:	602b      	str	r3, [r5, #0]
    e6e0:	007b      	lsls	r3, r7, #1
    e6e2:	085b      	lsrs	r3, r3, #1
    e6e4:	9307      	str	r3, [sp, #28]
    e6e6:	9c07      	ldr	r4, [sp, #28]
    e6e8:	4bb7      	ldr	r3, [pc, #732]	; (e9c8 <_dtoa_r+0x33c>)
    e6ea:	0022      	movs	r2, r4
    e6ec:	9319      	str	r3, [sp, #100]	; 0x64
    e6ee:	401a      	ands	r2, r3
    e6f0:	429a      	cmp	r2, r3
    e6f2:	d116      	bne.n	e722 <_dtoa_r+0x96>
    e6f4:	4bb5      	ldr	r3, [pc, #724]	; (e9cc <_dtoa_r+0x340>)
    e6f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e6f8:	6013      	str	r3, [r2, #0]
    e6fa:	9b06      	ldr	r3, [sp, #24]
    e6fc:	2b00      	cmp	r3, #0
    e6fe:	d103      	bne.n	e708 <_dtoa_r+0x7c>
    e700:	0324      	lsls	r4, r4, #12
    e702:	d101      	bne.n	e708 <_dtoa_r+0x7c>
    e704:	f000 fd91 	bl	f22a <_dtoa_r+0xb9e>
    e708:	4bb1      	ldr	r3, [pc, #708]	; (e9d0 <_dtoa_r+0x344>)
    e70a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e70c:	930a      	str	r3, [sp, #40]	; 0x28
    e70e:	4bb1      	ldr	r3, [pc, #708]	; (e9d4 <_dtoa_r+0x348>)
    e710:	2a00      	cmp	r2, #0
    e712:	d001      	beq.n	e718 <_dtoa_r+0x8c>
    e714:	f000 fd8f 	bl	f236 <_dtoa_r+0xbaa>
    e718:	f000 fd8f 	bl	f23a <_dtoa_r+0xbae>
    e71c:	2300      	movs	r3, #0
    e71e:	602b      	str	r3, [r5, #0]
    e720:	e7e1      	b.n	e6e6 <_dtoa_r+0x5a>
    e722:	9e06      	ldr	r6, [sp, #24]
    e724:	9f07      	ldr	r7, [sp, #28]
    e726:	2200      	movs	r2, #0
    e728:	2300      	movs	r3, #0
    e72a:	0030      	movs	r0, r6
    e72c:	0039      	movs	r1, r7
    e72e:	f7fb f9e7 	bl	9b00 <__aeabi_dcmpeq>
    e732:	1e05      	subs	r5, r0, #0
    e734:	d00e      	beq.n	e754 <_dtoa_r+0xc8>
    e736:	2301      	movs	r3, #1
    e738:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e73a:	6013      	str	r3, [r2, #0]
    e73c:	4ba6      	ldr	r3, [pc, #664]	; (e9d8 <_dtoa_r+0x34c>)
    e73e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e740:	930a      	str	r3, [sp, #40]	; 0x28
    e742:	2a00      	cmp	r2, #0
    e744:	d101      	bne.n	e74a <_dtoa_r+0xbe>
    e746:	f000 fd78 	bl	f23a <_dtoa_r+0xbae>
    e74a:	4aa4      	ldr	r2, [pc, #656]	; (e9dc <_dtoa_r+0x350>)
    e74c:	9926      	ldr	r1, [sp, #152]	; 0x98
    e74e:	600a      	str	r2, [r1, #0]
    e750:	f000 fd73 	bl	f23a <_dtoa_r+0xbae>
    e754:	ab1a      	add	r3, sp, #104	; 0x68
    e756:	9301      	str	r3, [sp, #4]
    e758:	ab1b      	add	r3, sp, #108	; 0x6c
    e75a:	9300      	str	r3, [sp, #0]
    e75c:	0032      	movs	r2, r6
    e75e:	003b      	movs	r3, r7
    e760:	9804      	ldr	r0, [sp, #16]
    e762:	f001 fa63 	bl	fc2c <__d2b>
    e766:	0063      	lsls	r3, r4, #1
    e768:	9005      	str	r0, [sp, #20]
    e76a:	0d5b      	lsrs	r3, r3, #21
    e76c:	d100      	bne.n	e770 <_dtoa_r+0xe4>
    e76e:	e07f      	b.n	e870 <_dtoa_r+0x1e4>
    e770:	033a      	lsls	r2, r7, #12
    e772:	4c9b      	ldr	r4, [pc, #620]	; (e9e0 <_dtoa_r+0x354>)
    e774:	0b12      	lsrs	r2, r2, #12
    e776:	4314      	orrs	r4, r2
    e778:	0021      	movs	r1, r4
    e77a:	4a9a      	ldr	r2, [pc, #616]	; (e9e4 <_dtoa_r+0x358>)
    e77c:	0030      	movs	r0, r6
    e77e:	9518      	str	r5, [sp, #96]	; 0x60
    e780:	189e      	adds	r6, r3, r2
    e782:	2200      	movs	r2, #0
    e784:	4b98      	ldr	r3, [pc, #608]	; (e9e8 <_dtoa_r+0x35c>)
    e786:	f7fd fb29 	bl	bddc <__aeabi_dsub>
    e78a:	4a98      	ldr	r2, [pc, #608]	; (e9ec <_dtoa_r+0x360>)
    e78c:	4b98      	ldr	r3, [pc, #608]	; (e9f0 <_dtoa_r+0x364>)
    e78e:	f7fd f8a5 	bl	b8dc <__aeabi_dmul>
    e792:	4a98      	ldr	r2, [pc, #608]	; (e9f4 <_dtoa_r+0x368>)
    e794:	4b98      	ldr	r3, [pc, #608]	; (e9f8 <_dtoa_r+0x36c>)
    e796:	f7fc f95d 	bl	aa54 <__aeabi_dadd>
    e79a:	0004      	movs	r4, r0
    e79c:	0030      	movs	r0, r6
    e79e:	000d      	movs	r5, r1
    e7a0:	f7fd fe86 	bl	c4b0 <__aeabi_i2d>
    e7a4:	4a95      	ldr	r2, [pc, #596]	; (e9fc <_dtoa_r+0x370>)
    e7a6:	4b96      	ldr	r3, [pc, #600]	; (ea00 <_dtoa_r+0x374>)
    e7a8:	f7fd f898 	bl	b8dc <__aeabi_dmul>
    e7ac:	0002      	movs	r2, r0
    e7ae:	000b      	movs	r3, r1
    e7b0:	0020      	movs	r0, r4
    e7b2:	0029      	movs	r1, r5
    e7b4:	f7fc f94e 	bl	aa54 <__aeabi_dadd>
    e7b8:	0004      	movs	r4, r0
    e7ba:	000d      	movs	r5, r1
    e7bc:	f7fd fe44 	bl	c448 <__aeabi_d2iz>
    e7c0:	2200      	movs	r2, #0
    e7c2:	9003      	str	r0, [sp, #12]
    e7c4:	2300      	movs	r3, #0
    e7c6:	0020      	movs	r0, r4
    e7c8:	0029      	movs	r1, r5
    e7ca:	f7fb f99f 	bl	9b0c <__aeabi_dcmplt>
    e7ce:	2800      	cmp	r0, #0
    e7d0:	d00e      	beq.n	e7f0 <_dtoa_r+0x164>
    e7d2:	9803      	ldr	r0, [sp, #12]
    e7d4:	f7fd fe6c 	bl	c4b0 <__aeabi_i2d>
    e7d8:	000b      	movs	r3, r1
    e7da:	0002      	movs	r2, r0
    e7dc:	0029      	movs	r1, r5
    e7de:	0020      	movs	r0, r4
    e7e0:	f7fb f98e 	bl	9b00 <__aeabi_dcmpeq>
    e7e4:	0003      	movs	r3, r0
    e7e6:	4258      	negs	r0, r3
    e7e8:	4158      	adcs	r0, r3
    e7ea:	9b03      	ldr	r3, [sp, #12]
    e7ec:	1a1b      	subs	r3, r3, r0
    e7ee:	9303      	str	r3, [sp, #12]
    e7f0:	2301      	movs	r3, #1
    e7f2:	9316      	str	r3, [sp, #88]	; 0x58
    e7f4:	9b03      	ldr	r3, [sp, #12]
    e7f6:	2b16      	cmp	r3, #22
    e7f8:	d80f      	bhi.n	e81a <_dtoa_r+0x18e>
    e7fa:	4982      	ldr	r1, [pc, #520]	; (ea04 <_dtoa_r+0x378>)
    e7fc:	00db      	lsls	r3, r3, #3
    e7fe:	18c9      	adds	r1, r1, r3
    e800:	6808      	ldr	r0, [r1, #0]
    e802:	6849      	ldr	r1, [r1, #4]
    e804:	9a06      	ldr	r2, [sp, #24]
    e806:	9b07      	ldr	r3, [sp, #28]
    e808:	f7fb f994 	bl	9b34 <__aeabi_dcmpgt>
    e80c:	2800      	cmp	r0, #0
    e80e:	d04b      	beq.n	e8a8 <_dtoa_r+0x21c>
    e810:	9b03      	ldr	r3, [sp, #12]
    e812:	3b01      	subs	r3, #1
    e814:	9303      	str	r3, [sp, #12]
    e816:	2300      	movs	r3, #0
    e818:	9316      	str	r3, [sp, #88]	; 0x58
    e81a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e81c:	1b9e      	subs	r6, r3, r6
    e81e:	2300      	movs	r3, #0
    e820:	930b      	str	r3, [sp, #44]	; 0x2c
    e822:	0033      	movs	r3, r6
    e824:	3b01      	subs	r3, #1
    e826:	930c      	str	r3, [sp, #48]	; 0x30
    e828:	d504      	bpl.n	e834 <_dtoa_r+0x1a8>
    e82a:	2301      	movs	r3, #1
    e82c:	1b9b      	subs	r3, r3, r6
    e82e:	930b      	str	r3, [sp, #44]	; 0x2c
    e830:	2300      	movs	r3, #0
    e832:	930c      	str	r3, [sp, #48]	; 0x30
    e834:	9b03      	ldr	r3, [sp, #12]
    e836:	2b00      	cmp	r3, #0
    e838:	db38      	blt.n	e8ac <_dtoa_r+0x220>
    e83a:	9a03      	ldr	r2, [sp, #12]
    e83c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e83e:	4694      	mov	ip, r2
    e840:	4463      	add	r3, ip
    e842:	930c      	str	r3, [sp, #48]	; 0x30
    e844:	2300      	movs	r3, #0
    e846:	920f      	str	r2, [sp, #60]	; 0x3c
    e848:	9308      	str	r3, [sp, #32]
    e84a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e84c:	2501      	movs	r5, #1
    e84e:	2b09      	cmp	r3, #9
    e850:	d900      	bls.n	e854 <_dtoa_r+0x1c8>
    e852:	e091      	b.n	e978 <_dtoa_r+0x2ec>
    e854:	2b05      	cmp	r3, #5
    e856:	dd02      	ble.n	e85e <_dtoa_r+0x1d2>
    e858:	2500      	movs	r5, #0
    e85a:	3b04      	subs	r3, #4
    e85c:	9322      	str	r3, [sp, #136]	; 0x88
    e85e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e860:	1e98      	subs	r0, r3, #2
    e862:	2803      	cmp	r0, #3
    e864:	d900      	bls.n	e868 <_dtoa_r+0x1dc>
    e866:	e091      	b.n	e98c <_dtoa_r+0x300>
    e868:	f7fa ffba 	bl	97e0 <__gnu_thumb1_case_uqi>
    e86c:	76298482 	.word	0x76298482
    e870:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e872:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e874:	189e      	adds	r6, r3, r2
    e876:	4b64      	ldr	r3, [pc, #400]	; (ea08 <_dtoa_r+0x37c>)
    e878:	18f2      	adds	r2, r6, r3
    e87a:	2a20      	cmp	r2, #32
    e87c:	dd0f      	ble.n	e89e <_dtoa_r+0x212>
    e87e:	4b63      	ldr	r3, [pc, #396]	; (ea0c <_dtoa_r+0x380>)
    e880:	9806      	ldr	r0, [sp, #24]
    e882:	18f3      	adds	r3, r6, r3
    e884:	40d8      	lsrs	r0, r3
    e886:	2340      	movs	r3, #64	; 0x40
    e888:	1a9b      	subs	r3, r3, r2
    e88a:	409c      	lsls	r4, r3
    e88c:	4320      	orrs	r0, r4
    e88e:	f7fd fe51 	bl	c534 <__aeabi_ui2d>
    e892:	2301      	movs	r3, #1
    e894:	4c5e      	ldr	r4, [pc, #376]	; (ea10 <_dtoa_r+0x384>)
    e896:	3e01      	subs	r6, #1
    e898:	1909      	adds	r1, r1, r4
    e89a:	9318      	str	r3, [sp, #96]	; 0x60
    e89c:	e771      	b.n	e782 <_dtoa_r+0xf6>
    e89e:	2320      	movs	r3, #32
    e8a0:	9806      	ldr	r0, [sp, #24]
    e8a2:	1a9b      	subs	r3, r3, r2
    e8a4:	4098      	lsls	r0, r3
    e8a6:	e7f2      	b.n	e88e <_dtoa_r+0x202>
    e8a8:	9016      	str	r0, [sp, #88]	; 0x58
    e8aa:	e7b6      	b.n	e81a <_dtoa_r+0x18e>
    e8ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e8ae:	9a03      	ldr	r2, [sp, #12]
    e8b0:	1a9b      	subs	r3, r3, r2
    e8b2:	930b      	str	r3, [sp, #44]	; 0x2c
    e8b4:	4253      	negs	r3, r2
    e8b6:	9308      	str	r3, [sp, #32]
    e8b8:	2300      	movs	r3, #0
    e8ba:	930f      	str	r3, [sp, #60]	; 0x3c
    e8bc:	e7c5      	b.n	e84a <_dtoa_r+0x1be>
    e8be:	2301      	movs	r3, #1
    e8c0:	930e      	str	r3, [sp, #56]	; 0x38
    e8c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e8c4:	2b00      	cmp	r3, #0
    e8c6:	dd65      	ble.n	e994 <_dtoa_r+0x308>
    e8c8:	001f      	movs	r7, r3
    e8ca:	930d      	str	r3, [sp, #52]	; 0x34
    e8cc:	9a04      	ldr	r2, [sp, #16]
    e8ce:	6a54      	ldr	r4, [r2, #36]	; 0x24
    e8d0:	2200      	movs	r2, #0
    e8d2:	6062      	str	r2, [r4, #4]
    e8d4:	3204      	adds	r2, #4
    e8d6:	0011      	movs	r1, r2
    e8d8:	3114      	adds	r1, #20
    e8da:	4299      	cmp	r1, r3
    e8dc:	d95f      	bls.n	e99e <_dtoa_r+0x312>
    e8de:	6861      	ldr	r1, [r4, #4]
    e8e0:	9804      	ldr	r0, [sp, #16]
    e8e2:	f000 ff14 	bl	f70e <_Balloc>
    e8e6:	9b04      	ldr	r3, [sp, #16]
    e8e8:	6020      	str	r0, [r4, #0]
    e8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e8ec:	681b      	ldr	r3, [r3, #0]
    e8ee:	930a      	str	r3, [sp, #40]	; 0x28
    e8f0:	2f0e      	cmp	r7, #14
    e8f2:	d900      	bls.n	e8f6 <_dtoa_r+0x26a>
    e8f4:	e105      	b.n	eb02 <_dtoa_r+0x476>
    e8f6:	2d00      	cmp	r5, #0
    e8f8:	d100      	bne.n	e8fc <_dtoa_r+0x270>
    e8fa:	e102      	b.n	eb02 <_dtoa_r+0x476>
    e8fc:	9b06      	ldr	r3, [sp, #24]
    e8fe:	9c07      	ldr	r4, [sp, #28]
    e900:	9314      	str	r3, [sp, #80]	; 0x50
    e902:	9415      	str	r4, [sp, #84]	; 0x54
    e904:	9b03      	ldr	r3, [sp, #12]
    e906:	2b00      	cmp	r3, #0
    e908:	dc00      	bgt.n	e90c <_dtoa_r+0x280>
    e90a:	e085      	b.n	ea18 <_dtoa_r+0x38c>
    e90c:	001a      	movs	r2, r3
    e90e:	210f      	movs	r1, #15
    e910:	4b3c      	ldr	r3, [pc, #240]	; (ea04 <_dtoa_r+0x378>)
    e912:	400a      	ands	r2, r1
    e914:	00d2      	lsls	r2, r2, #3
    e916:	189b      	adds	r3, r3, r2
    e918:	685c      	ldr	r4, [r3, #4]
    e91a:	681b      	ldr	r3, [r3, #0]
    e91c:	9310      	str	r3, [sp, #64]	; 0x40
    e91e:	9411      	str	r4, [sp, #68]	; 0x44
    e920:	9b03      	ldr	r3, [sp, #12]
    e922:	2402      	movs	r4, #2
    e924:	111d      	asrs	r5, r3, #4
    e926:	06eb      	lsls	r3, r5, #27
    e928:	d50a      	bpl.n	e940 <_dtoa_r+0x2b4>
    e92a:	4b3a      	ldr	r3, [pc, #232]	; (ea14 <_dtoa_r+0x388>)
    e92c:	400d      	ands	r5, r1
    e92e:	6a1a      	ldr	r2, [r3, #32]
    e930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e932:	9814      	ldr	r0, [sp, #80]	; 0x50
    e934:	9915      	ldr	r1, [sp, #84]	; 0x54
    e936:	f7fc fb9d 	bl	b074 <__aeabi_ddiv>
    e93a:	9006      	str	r0, [sp, #24]
    e93c:	9107      	str	r1, [sp, #28]
    e93e:	3401      	adds	r4, #1
    e940:	4e34      	ldr	r6, [pc, #208]	; (ea14 <_dtoa_r+0x388>)
    e942:	2d00      	cmp	r5, #0
    e944:	d130      	bne.n	e9a8 <_dtoa_r+0x31c>
    e946:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e948:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e94a:	9806      	ldr	r0, [sp, #24]
    e94c:	9907      	ldr	r1, [sp, #28]
    e94e:	f7fc fb91 	bl	b074 <__aeabi_ddiv>
    e952:	9006      	str	r0, [sp, #24]
    e954:	9107      	str	r1, [sp, #28]
    e956:	e07a      	b.n	ea4e <_dtoa_r+0x3c2>
    e958:	2301      	movs	r3, #1
    e95a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    e95c:	930e      	str	r3, [sp, #56]	; 0x38
    e95e:	4694      	mov	ip, r2
    e960:	9b03      	ldr	r3, [sp, #12]
    e962:	4463      	add	r3, ip
    e964:	1c5f      	adds	r7, r3, #1
    e966:	930d      	str	r3, [sp, #52]	; 0x34
    e968:	1e3b      	subs	r3, r7, #0
    e96a:	dcaf      	bgt.n	e8cc <_dtoa_r+0x240>
    e96c:	2301      	movs	r3, #1
    e96e:	e7ad      	b.n	e8cc <_dtoa_r+0x240>
    e970:	2300      	movs	r3, #0
    e972:	e7a5      	b.n	e8c0 <_dtoa_r+0x234>
    e974:	2300      	movs	r3, #0
    e976:	e7f0      	b.n	e95a <_dtoa_r+0x2ce>
    e978:	2300      	movs	r3, #0
    e97a:	950e      	str	r5, [sp, #56]	; 0x38
    e97c:	9322      	str	r3, [sp, #136]	; 0x88
    e97e:	3b01      	subs	r3, #1
    e980:	2200      	movs	r2, #0
    e982:	930d      	str	r3, [sp, #52]	; 0x34
    e984:	001f      	movs	r7, r3
    e986:	3313      	adds	r3, #19
    e988:	9223      	str	r2, [sp, #140]	; 0x8c
    e98a:	e79f      	b.n	e8cc <_dtoa_r+0x240>
    e98c:	2301      	movs	r3, #1
    e98e:	930e      	str	r3, [sp, #56]	; 0x38
    e990:	3b02      	subs	r3, #2
    e992:	e7f5      	b.n	e980 <_dtoa_r+0x2f4>
    e994:	2301      	movs	r3, #1
    e996:	930d      	str	r3, [sp, #52]	; 0x34
    e998:	001f      	movs	r7, r3
    e99a:	001a      	movs	r2, r3
    e99c:	e7f4      	b.n	e988 <_dtoa_r+0x2fc>
    e99e:	6861      	ldr	r1, [r4, #4]
    e9a0:	0052      	lsls	r2, r2, #1
    e9a2:	3101      	adds	r1, #1
    e9a4:	6061      	str	r1, [r4, #4]
    e9a6:	e796      	b.n	e8d6 <_dtoa_r+0x24a>
    e9a8:	2301      	movs	r3, #1
    e9aa:	421d      	tst	r5, r3
    e9ac:	d008      	beq.n	e9c0 <_dtoa_r+0x334>
    e9ae:	9810      	ldr	r0, [sp, #64]	; 0x40
    e9b0:	9911      	ldr	r1, [sp, #68]	; 0x44
    e9b2:	18e4      	adds	r4, r4, r3
    e9b4:	6832      	ldr	r2, [r6, #0]
    e9b6:	6873      	ldr	r3, [r6, #4]
    e9b8:	f7fc ff90 	bl	b8dc <__aeabi_dmul>
    e9bc:	9010      	str	r0, [sp, #64]	; 0x40
    e9be:	9111      	str	r1, [sp, #68]	; 0x44
    e9c0:	106d      	asrs	r5, r5, #1
    e9c2:	3608      	adds	r6, #8
    e9c4:	e7bd      	b.n	e942 <_dtoa_r+0x2b6>
    e9c6:	46c0      	nop			; (mov r8, r8)
    e9c8:	7ff00000 	.word	0x7ff00000
    e9cc:	0000270f 	.word	0x0000270f
    e9d0:	00012b11 	.word	0x00012b11
    e9d4:	00012b14 	.word	0x00012b14
    e9d8:	00010e88 	.word	0x00010e88
    e9dc:	00010e89 	.word	0x00010e89
    e9e0:	3ff00000 	.word	0x3ff00000
    e9e4:	fffffc01 	.word	0xfffffc01
    e9e8:	3ff80000 	.word	0x3ff80000
    e9ec:	636f4361 	.word	0x636f4361
    e9f0:	3fd287a7 	.word	0x3fd287a7
    e9f4:	8b60c8b3 	.word	0x8b60c8b3
    e9f8:	3fc68a28 	.word	0x3fc68a28
    e9fc:	509f79fb 	.word	0x509f79fb
    ea00:	3fd34413 	.word	0x3fd34413
    ea04:	00012c00 	.word	0x00012c00
    ea08:	00000432 	.word	0x00000432
    ea0c:	00000412 	.word	0x00000412
    ea10:	fe100000 	.word	0xfe100000
    ea14:	00012bd8 	.word	0x00012bd8
    ea18:	9b03      	ldr	r3, [sp, #12]
    ea1a:	2402      	movs	r4, #2
    ea1c:	2b00      	cmp	r3, #0
    ea1e:	d016      	beq.n	ea4e <_dtoa_r+0x3c2>
    ea20:	9814      	ldr	r0, [sp, #80]	; 0x50
    ea22:	9915      	ldr	r1, [sp, #84]	; 0x54
    ea24:	425d      	negs	r5, r3
    ea26:	230f      	movs	r3, #15
    ea28:	4aca      	ldr	r2, [pc, #808]	; (ed54 <_dtoa_r+0x6c8>)
    ea2a:	402b      	ands	r3, r5
    ea2c:	00db      	lsls	r3, r3, #3
    ea2e:	18d3      	adds	r3, r2, r3
    ea30:	681a      	ldr	r2, [r3, #0]
    ea32:	685b      	ldr	r3, [r3, #4]
    ea34:	f7fc ff52 	bl	b8dc <__aeabi_dmul>
    ea38:	2300      	movs	r3, #0
    ea3a:	9006      	str	r0, [sp, #24]
    ea3c:	9107      	str	r1, [sp, #28]
    ea3e:	4ec6      	ldr	r6, [pc, #792]	; (ed58 <_dtoa_r+0x6cc>)
    ea40:	112d      	asrs	r5, r5, #4
    ea42:	2d00      	cmp	r5, #0
    ea44:	d000      	beq.n	ea48 <_dtoa_r+0x3bc>
    ea46:	e08c      	b.n	eb62 <_dtoa_r+0x4d6>
    ea48:	2b00      	cmp	r3, #0
    ea4a:	d000      	beq.n	ea4e <_dtoa_r+0x3c2>
    ea4c:	e781      	b.n	e952 <_dtoa_r+0x2c6>
    ea4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ea50:	2b00      	cmp	r3, #0
    ea52:	d100      	bne.n	ea56 <_dtoa_r+0x3ca>
    ea54:	e091      	b.n	eb7a <_dtoa_r+0x4ee>
    ea56:	9a06      	ldr	r2, [sp, #24]
    ea58:	9b07      	ldr	r3, [sp, #28]
    ea5a:	9210      	str	r2, [sp, #64]	; 0x40
    ea5c:	9311      	str	r3, [sp, #68]	; 0x44
    ea5e:	9810      	ldr	r0, [sp, #64]	; 0x40
    ea60:	9911      	ldr	r1, [sp, #68]	; 0x44
    ea62:	2200      	movs	r2, #0
    ea64:	4bbd      	ldr	r3, [pc, #756]	; (ed5c <_dtoa_r+0x6d0>)
    ea66:	f7fb f851 	bl	9b0c <__aeabi_dcmplt>
    ea6a:	2800      	cmp	r0, #0
    ea6c:	d100      	bne.n	ea70 <_dtoa_r+0x3e4>
    ea6e:	e084      	b.n	eb7a <_dtoa_r+0x4ee>
    ea70:	2f00      	cmp	r7, #0
    ea72:	d100      	bne.n	ea76 <_dtoa_r+0x3ea>
    ea74:	e081      	b.n	eb7a <_dtoa_r+0x4ee>
    ea76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ea78:	2b00      	cmp	r3, #0
    ea7a:	dd3e      	ble.n	eafa <_dtoa_r+0x46e>
    ea7c:	9810      	ldr	r0, [sp, #64]	; 0x40
    ea7e:	9911      	ldr	r1, [sp, #68]	; 0x44
    ea80:	9b03      	ldr	r3, [sp, #12]
    ea82:	2200      	movs	r2, #0
    ea84:	1e5e      	subs	r6, r3, #1
    ea86:	4bb6      	ldr	r3, [pc, #728]	; (ed60 <_dtoa_r+0x6d4>)
    ea88:	f7fc ff28 	bl	b8dc <__aeabi_dmul>
    ea8c:	9006      	str	r0, [sp, #24]
    ea8e:	9107      	str	r1, [sp, #28]
    ea90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    ea92:	3401      	adds	r4, #1
    ea94:	0020      	movs	r0, r4
    ea96:	f7fd fd0b 	bl	c4b0 <__aeabi_i2d>
    ea9a:	9a06      	ldr	r2, [sp, #24]
    ea9c:	9b07      	ldr	r3, [sp, #28]
    ea9e:	f7fc ff1d 	bl	b8dc <__aeabi_dmul>
    eaa2:	2200      	movs	r2, #0
    eaa4:	4baf      	ldr	r3, [pc, #700]	; (ed64 <_dtoa_r+0x6d8>)
    eaa6:	f7fb ffd5 	bl	aa54 <__aeabi_dadd>
    eaaa:	9012      	str	r0, [sp, #72]	; 0x48
    eaac:	9113      	str	r1, [sp, #76]	; 0x4c
    eaae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eab0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    eab2:	4aad      	ldr	r2, [pc, #692]	; (ed68 <_dtoa_r+0x6dc>)
    eab4:	9310      	str	r3, [sp, #64]	; 0x40
    eab6:	9411      	str	r4, [sp, #68]	; 0x44
    eab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eaba:	189c      	adds	r4, r3, r2
    eabc:	9411      	str	r4, [sp, #68]	; 0x44
    eabe:	2d00      	cmp	r5, #0
    eac0:	d15e      	bne.n	eb80 <_dtoa_r+0x4f4>
    eac2:	9806      	ldr	r0, [sp, #24]
    eac4:	9907      	ldr	r1, [sp, #28]
    eac6:	2200      	movs	r2, #0
    eac8:	4ba8      	ldr	r3, [pc, #672]	; (ed6c <_dtoa_r+0x6e0>)
    eaca:	f7fd f987 	bl	bddc <__aeabi_dsub>
    eace:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ead0:	0023      	movs	r3, r4
    ead2:	9006      	str	r0, [sp, #24]
    ead4:	9107      	str	r1, [sp, #28]
    ead6:	f7fb f82d 	bl	9b34 <__aeabi_dcmpgt>
    eada:	2800      	cmp	r0, #0
    eadc:	d000      	beq.n	eae0 <_dtoa_r+0x454>
    eade:	e301      	b.n	f0e4 <_dtoa_r+0xa58>
    eae0:	48a3      	ldr	r0, [pc, #652]	; (ed70 <_dtoa_r+0x6e4>)
    eae2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    eae4:	4684      	mov	ip, r0
    eae6:	4461      	add	r1, ip
    eae8:	000b      	movs	r3, r1
    eaea:	9806      	ldr	r0, [sp, #24]
    eaec:	9907      	ldr	r1, [sp, #28]
    eaee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eaf0:	f7fb f80c 	bl	9b0c <__aeabi_dcmplt>
    eaf4:	2800      	cmp	r0, #0
    eaf6:	d000      	beq.n	eafa <_dtoa_r+0x46e>
    eaf8:	e2e8      	b.n	f0cc <_dtoa_r+0xa40>
    eafa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    eafc:	9c15      	ldr	r4, [sp, #84]	; 0x54
    eafe:	9306      	str	r3, [sp, #24]
    eb00:	9407      	str	r4, [sp, #28]
    eb02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    eb04:	2b00      	cmp	r3, #0
    eb06:	da00      	bge.n	eb0a <_dtoa_r+0x47e>
    eb08:	e157      	b.n	edba <_dtoa_r+0x72e>
    eb0a:	9a03      	ldr	r2, [sp, #12]
    eb0c:	2a0e      	cmp	r2, #14
    eb0e:	dd00      	ble.n	eb12 <_dtoa_r+0x486>
    eb10:	e153      	b.n	edba <_dtoa_r+0x72e>
    eb12:	4b90      	ldr	r3, [pc, #576]	; (ed54 <_dtoa_r+0x6c8>)
    eb14:	00d2      	lsls	r2, r2, #3
    eb16:	189b      	adds	r3, r3, r2
    eb18:	685c      	ldr	r4, [r3, #4]
    eb1a:	681b      	ldr	r3, [r3, #0]
    eb1c:	9308      	str	r3, [sp, #32]
    eb1e:	9409      	str	r4, [sp, #36]	; 0x24
    eb20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    eb22:	2b00      	cmp	r3, #0
    eb24:	db00      	blt.n	eb28 <_dtoa_r+0x49c>
    eb26:	e0ce      	b.n	ecc6 <_dtoa_r+0x63a>
    eb28:	2f00      	cmp	r7, #0
    eb2a:	dd00      	ble.n	eb2e <_dtoa_r+0x4a2>
    eb2c:	e0cb      	b.n	ecc6 <_dtoa_r+0x63a>
    eb2e:	d000      	beq.n	eb32 <_dtoa_r+0x4a6>
    eb30:	e2cf      	b.n	f0d2 <_dtoa_r+0xa46>
    eb32:	9808      	ldr	r0, [sp, #32]
    eb34:	9909      	ldr	r1, [sp, #36]	; 0x24
    eb36:	2200      	movs	r2, #0
    eb38:	4b8c      	ldr	r3, [pc, #560]	; (ed6c <_dtoa_r+0x6e0>)
    eb3a:	f7fc fecf 	bl	b8dc <__aeabi_dmul>
    eb3e:	9a06      	ldr	r2, [sp, #24]
    eb40:	9b07      	ldr	r3, [sp, #28]
    eb42:	f7fb f801 	bl	9b48 <__aeabi_dcmpge>
    eb46:	003e      	movs	r6, r7
    eb48:	9708      	str	r7, [sp, #32]
    eb4a:	2800      	cmp	r0, #0
    eb4c:	d000      	beq.n	eb50 <_dtoa_r+0x4c4>
    eb4e:	e2a4      	b.n	f09a <_dtoa_r+0xa0e>
    eb50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eb52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eb54:	1c5d      	adds	r5, r3, #1
    eb56:	2331      	movs	r3, #49	; 0x31
    eb58:	7013      	strb	r3, [r2, #0]
    eb5a:	9b03      	ldr	r3, [sp, #12]
    eb5c:	3301      	adds	r3, #1
    eb5e:	9303      	str	r3, [sp, #12]
    eb60:	e29f      	b.n	f0a2 <_dtoa_r+0xa16>
    eb62:	2201      	movs	r2, #1
    eb64:	4215      	tst	r5, r2
    eb66:	d005      	beq.n	eb74 <_dtoa_r+0x4e8>
    eb68:	18a4      	adds	r4, r4, r2
    eb6a:	6832      	ldr	r2, [r6, #0]
    eb6c:	6873      	ldr	r3, [r6, #4]
    eb6e:	f7fc feb5 	bl	b8dc <__aeabi_dmul>
    eb72:	2301      	movs	r3, #1
    eb74:	106d      	asrs	r5, r5, #1
    eb76:	3608      	adds	r6, #8
    eb78:	e763      	b.n	ea42 <_dtoa_r+0x3b6>
    eb7a:	9e03      	ldr	r6, [sp, #12]
    eb7c:	003d      	movs	r5, r7
    eb7e:	e789      	b.n	ea94 <_dtoa_r+0x408>
    eb80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eb82:	1e69      	subs	r1, r5, #1
    eb84:	1952      	adds	r2, r2, r5
    eb86:	9217      	str	r2, [sp, #92]	; 0x5c
    eb88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    eb8a:	4b72      	ldr	r3, [pc, #456]	; (ed54 <_dtoa_r+0x6c8>)
    eb8c:	00c9      	lsls	r1, r1, #3
    eb8e:	2a00      	cmp	r2, #0
    eb90:	d04a      	beq.n	ec28 <_dtoa_r+0x59c>
    eb92:	185b      	adds	r3, r3, r1
    eb94:	681a      	ldr	r2, [r3, #0]
    eb96:	685b      	ldr	r3, [r3, #4]
    eb98:	2000      	movs	r0, #0
    eb9a:	4976      	ldr	r1, [pc, #472]	; (ed74 <_dtoa_r+0x6e8>)
    eb9c:	f7fc fa6a 	bl	b074 <__aeabi_ddiv>
    eba0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eba2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eba4:	f7fd f91a 	bl	bddc <__aeabi_dsub>
    eba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ebaa:	9010      	str	r0, [sp, #64]	; 0x40
    ebac:	9111      	str	r1, [sp, #68]	; 0x44
    ebae:	9312      	str	r3, [sp, #72]	; 0x48
    ebb0:	9806      	ldr	r0, [sp, #24]
    ebb2:	9907      	ldr	r1, [sp, #28]
    ebb4:	f7fd fc48 	bl	c448 <__aeabi_d2iz>
    ebb8:	0004      	movs	r4, r0
    ebba:	f7fd fc79 	bl	c4b0 <__aeabi_i2d>
    ebbe:	0002      	movs	r2, r0
    ebc0:	000b      	movs	r3, r1
    ebc2:	9806      	ldr	r0, [sp, #24]
    ebc4:	9907      	ldr	r1, [sp, #28]
    ebc6:	f7fd f909 	bl	bddc <__aeabi_dsub>
    ebca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ebcc:	3430      	adds	r4, #48	; 0x30
    ebce:	1c5d      	adds	r5, r3, #1
    ebd0:	701c      	strb	r4, [r3, #0]
    ebd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ebd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ebd6:	9006      	str	r0, [sp, #24]
    ebd8:	9107      	str	r1, [sp, #28]
    ebda:	f7fa ff97 	bl	9b0c <__aeabi_dcmplt>
    ebde:	2800      	cmp	r0, #0
    ebe0:	d165      	bne.n	ecae <_dtoa_r+0x622>
    ebe2:	9a06      	ldr	r2, [sp, #24]
    ebe4:	9b07      	ldr	r3, [sp, #28]
    ebe6:	2000      	movs	r0, #0
    ebe8:	495c      	ldr	r1, [pc, #368]	; (ed5c <_dtoa_r+0x6d0>)
    ebea:	f7fd f8f7 	bl	bddc <__aeabi_dsub>
    ebee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ebf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ebf2:	f7fa ff8b 	bl	9b0c <__aeabi_dcmplt>
    ebf6:	2800      	cmp	r0, #0
    ebf8:	d000      	beq.n	ebfc <_dtoa_r+0x570>
    ebfa:	e0be      	b.n	ed7a <_dtoa_r+0x6ee>
    ebfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ebfe:	429d      	cmp	r5, r3
    ec00:	d100      	bne.n	ec04 <_dtoa_r+0x578>
    ec02:	e77a      	b.n	eafa <_dtoa_r+0x46e>
    ec04:	9810      	ldr	r0, [sp, #64]	; 0x40
    ec06:	9911      	ldr	r1, [sp, #68]	; 0x44
    ec08:	2200      	movs	r2, #0
    ec0a:	4b55      	ldr	r3, [pc, #340]	; (ed60 <_dtoa_r+0x6d4>)
    ec0c:	f7fc fe66 	bl	b8dc <__aeabi_dmul>
    ec10:	2200      	movs	r2, #0
    ec12:	9010      	str	r0, [sp, #64]	; 0x40
    ec14:	9111      	str	r1, [sp, #68]	; 0x44
    ec16:	9806      	ldr	r0, [sp, #24]
    ec18:	9907      	ldr	r1, [sp, #28]
    ec1a:	4b51      	ldr	r3, [pc, #324]	; (ed60 <_dtoa_r+0x6d4>)
    ec1c:	f7fc fe5e 	bl	b8dc <__aeabi_dmul>
    ec20:	9512      	str	r5, [sp, #72]	; 0x48
    ec22:	9006      	str	r0, [sp, #24]
    ec24:	9107      	str	r1, [sp, #28]
    ec26:	e7c3      	b.n	ebb0 <_dtoa_r+0x524>
    ec28:	1859      	adds	r1, r3, r1
    ec2a:	6808      	ldr	r0, [r1, #0]
    ec2c:	6849      	ldr	r1, [r1, #4]
    ec2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ec30:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec32:	f7fc fe53 	bl	b8dc <__aeabi_dmul>
    ec36:	9010      	str	r0, [sp, #64]	; 0x40
    ec38:	9111      	str	r1, [sp, #68]	; 0x44
    ec3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ec3c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    ec3e:	9806      	ldr	r0, [sp, #24]
    ec40:	9907      	ldr	r1, [sp, #28]
    ec42:	f7fd fc01 	bl	c448 <__aeabi_d2iz>
    ec46:	9012      	str	r0, [sp, #72]	; 0x48
    ec48:	f7fd fc32 	bl	c4b0 <__aeabi_i2d>
    ec4c:	0002      	movs	r2, r0
    ec4e:	000b      	movs	r3, r1
    ec50:	9806      	ldr	r0, [sp, #24]
    ec52:	9907      	ldr	r1, [sp, #28]
    ec54:	f7fd f8c2 	bl	bddc <__aeabi_dsub>
    ec58:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ec5a:	9006      	str	r0, [sp, #24]
    ec5c:	9107      	str	r1, [sp, #28]
    ec5e:	3330      	adds	r3, #48	; 0x30
    ec60:	7023      	strb	r3, [r4, #0]
    ec62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ec64:	3401      	adds	r4, #1
    ec66:	2200      	movs	r2, #0
    ec68:	42a3      	cmp	r3, r4
    ec6a:	d124      	bne.n	ecb6 <_dtoa_r+0x62a>
    ec6c:	4b41      	ldr	r3, [pc, #260]	; (ed74 <_dtoa_r+0x6e8>)
    ec6e:	9810      	ldr	r0, [sp, #64]	; 0x40
    ec70:	9911      	ldr	r1, [sp, #68]	; 0x44
    ec72:	f7fb feef 	bl	aa54 <__aeabi_dadd>
    ec76:	0002      	movs	r2, r0
    ec78:	000b      	movs	r3, r1
    ec7a:	9806      	ldr	r0, [sp, #24]
    ec7c:	9907      	ldr	r1, [sp, #28]
    ec7e:	f7fa ff59 	bl	9b34 <__aeabi_dcmpgt>
    ec82:	2800      	cmp	r0, #0
    ec84:	d000      	beq.n	ec88 <_dtoa_r+0x5fc>
    ec86:	e078      	b.n	ed7a <_dtoa_r+0x6ee>
    ec88:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ec8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec8c:	2000      	movs	r0, #0
    ec8e:	4939      	ldr	r1, [pc, #228]	; (ed74 <_dtoa_r+0x6e8>)
    ec90:	f7fd f8a4 	bl	bddc <__aeabi_dsub>
    ec94:	0002      	movs	r2, r0
    ec96:	000b      	movs	r3, r1
    ec98:	9806      	ldr	r0, [sp, #24]
    ec9a:	9907      	ldr	r1, [sp, #28]
    ec9c:	f7fa ff36 	bl	9b0c <__aeabi_dcmplt>
    eca0:	2800      	cmp	r0, #0
    eca2:	d100      	bne.n	eca6 <_dtoa_r+0x61a>
    eca4:	e729      	b.n	eafa <_dtoa_r+0x46e>
    eca6:	1e6b      	subs	r3, r5, #1
    eca8:	781a      	ldrb	r2, [r3, #0]
    ecaa:	2a30      	cmp	r2, #48	; 0x30
    ecac:	d001      	beq.n	ecb2 <_dtoa_r+0x626>
    ecae:	9603      	str	r6, [sp, #12]
    ecb0:	e03f      	b.n	ed32 <_dtoa_r+0x6a6>
    ecb2:	001d      	movs	r5, r3
    ecb4:	e7f7      	b.n	eca6 <_dtoa_r+0x61a>
    ecb6:	9806      	ldr	r0, [sp, #24]
    ecb8:	9907      	ldr	r1, [sp, #28]
    ecba:	4b29      	ldr	r3, [pc, #164]	; (ed60 <_dtoa_r+0x6d4>)
    ecbc:	f7fc fe0e 	bl	b8dc <__aeabi_dmul>
    ecc0:	9006      	str	r0, [sp, #24]
    ecc2:	9107      	str	r1, [sp, #28]
    ecc4:	e7bb      	b.n	ec3e <_dtoa_r+0x5b2>
    ecc6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    ecc8:	9a08      	ldr	r2, [sp, #32]
    ecca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eccc:	9806      	ldr	r0, [sp, #24]
    ecce:	9907      	ldr	r1, [sp, #28]
    ecd0:	f7fc f9d0 	bl	b074 <__aeabi_ddiv>
    ecd4:	f7fd fbb8 	bl	c448 <__aeabi_d2iz>
    ecd8:	0004      	movs	r4, r0
    ecda:	f7fd fbe9 	bl	c4b0 <__aeabi_i2d>
    ecde:	9a08      	ldr	r2, [sp, #32]
    ece0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ece2:	f7fc fdfb 	bl	b8dc <__aeabi_dmul>
    ece6:	000b      	movs	r3, r1
    ece8:	0002      	movs	r2, r0
    ecea:	9806      	ldr	r0, [sp, #24]
    ecec:	9907      	ldr	r1, [sp, #28]
    ecee:	f7fd f875 	bl	bddc <__aeabi_dsub>
    ecf2:	0023      	movs	r3, r4
    ecf4:	3330      	adds	r3, #48	; 0x30
    ecf6:	7033      	strb	r3, [r6, #0]
    ecf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ecfa:	1c75      	adds	r5, r6, #1
    ecfc:	1aeb      	subs	r3, r5, r3
    ecfe:	429f      	cmp	r7, r3
    ed00:	d14c      	bne.n	ed9c <_dtoa_r+0x710>
    ed02:	0002      	movs	r2, r0
    ed04:	000b      	movs	r3, r1
    ed06:	f7fb fea5 	bl	aa54 <__aeabi_dadd>
    ed0a:	0006      	movs	r6, r0
    ed0c:	000f      	movs	r7, r1
    ed0e:	0002      	movs	r2, r0
    ed10:	000b      	movs	r3, r1
    ed12:	9808      	ldr	r0, [sp, #32]
    ed14:	9909      	ldr	r1, [sp, #36]	; 0x24
    ed16:	f7fa fef9 	bl	9b0c <__aeabi_dcmplt>
    ed1a:	2800      	cmp	r0, #0
    ed1c:	d12c      	bne.n	ed78 <_dtoa_r+0x6ec>
    ed1e:	9808      	ldr	r0, [sp, #32]
    ed20:	9909      	ldr	r1, [sp, #36]	; 0x24
    ed22:	0032      	movs	r2, r6
    ed24:	003b      	movs	r3, r7
    ed26:	f7fa feeb 	bl	9b00 <__aeabi_dcmpeq>
    ed2a:	2800      	cmp	r0, #0
    ed2c:	d001      	beq.n	ed32 <_dtoa_r+0x6a6>
    ed2e:	07e3      	lsls	r3, r4, #31
    ed30:	d422      	bmi.n	ed78 <_dtoa_r+0x6ec>
    ed32:	9905      	ldr	r1, [sp, #20]
    ed34:	9804      	ldr	r0, [sp, #16]
    ed36:	f000 fd22 	bl	f77e <_Bfree>
    ed3a:	2300      	movs	r3, #0
    ed3c:	702b      	strb	r3, [r5, #0]
    ed3e:	9b03      	ldr	r3, [sp, #12]
    ed40:	9a24      	ldr	r2, [sp, #144]	; 0x90
    ed42:	3301      	adds	r3, #1
    ed44:	6013      	str	r3, [r2, #0]
    ed46:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ed48:	2b00      	cmp	r3, #0
    ed4a:	d100      	bne.n	ed4e <_dtoa_r+0x6c2>
    ed4c:	e275      	b.n	f23a <_dtoa_r+0xbae>
    ed4e:	601d      	str	r5, [r3, #0]
    ed50:	e273      	b.n	f23a <_dtoa_r+0xbae>
    ed52:	46c0      	nop			; (mov r8, r8)
    ed54:	00012c00 	.word	0x00012c00
    ed58:	00012bd8 	.word	0x00012bd8
    ed5c:	3ff00000 	.word	0x3ff00000
    ed60:	40240000 	.word	0x40240000
    ed64:	401c0000 	.word	0x401c0000
    ed68:	fcc00000 	.word	0xfcc00000
    ed6c:	40140000 	.word	0x40140000
    ed70:	7cc00000 	.word	0x7cc00000
    ed74:	3fe00000 	.word	0x3fe00000
    ed78:	9e03      	ldr	r6, [sp, #12]
    ed7a:	1e6b      	subs	r3, r5, #1
    ed7c:	781a      	ldrb	r2, [r3, #0]
    ed7e:	2a39      	cmp	r2, #57	; 0x39
    ed80:	d106      	bne.n	ed90 <_dtoa_r+0x704>
    ed82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ed84:	429a      	cmp	r2, r3
    ed86:	d107      	bne.n	ed98 <_dtoa_r+0x70c>
    ed88:	2330      	movs	r3, #48	; 0x30
    ed8a:	7013      	strb	r3, [r2, #0]
    ed8c:	0013      	movs	r3, r2
    ed8e:	3601      	adds	r6, #1
    ed90:	781a      	ldrb	r2, [r3, #0]
    ed92:	3201      	adds	r2, #1
    ed94:	701a      	strb	r2, [r3, #0]
    ed96:	e78a      	b.n	ecae <_dtoa_r+0x622>
    ed98:	001d      	movs	r5, r3
    ed9a:	e7ee      	b.n	ed7a <_dtoa_r+0x6ee>
    ed9c:	2200      	movs	r2, #0
    ed9e:	4bcf      	ldr	r3, [pc, #828]	; (f0dc <_dtoa_r+0xa50>)
    eda0:	f7fc fd9c 	bl	b8dc <__aeabi_dmul>
    eda4:	2200      	movs	r2, #0
    eda6:	2300      	movs	r3, #0
    eda8:	9006      	str	r0, [sp, #24]
    edaa:	9107      	str	r1, [sp, #28]
    edac:	002e      	movs	r6, r5
    edae:	f7fa fea7 	bl	9b00 <__aeabi_dcmpeq>
    edb2:	2800      	cmp	r0, #0
    edb4:	d100      	bne.n	edb8 <_dtoa_r+0x72c>
    edb6:	e787      	b.n	ecc8 <_dtoa_r+0x63c>
    edb8:	e7bb      	b.n	ed32 <_dtoa_r+0x6a6>
    edba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    edbc:	2a00      	cmp	r2, #0
    edbe:	d100      	bne.n	edc2 <_dtoa_r+0x736>
    edc0:	e087      	b.n	eed2 <_dtoa_r+0x846>
    edc2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    edc4:	2a01      	cmp	r2, #1
    edc6:	dc6e      	bgt.n	eea6 <_dtoa_r+0x81a>
    edc8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    edca:	2a00      	cmp	r2, #0
    edcc:	d067      	beq.n	ee9e <_dtoa_r+0x812>
    edce:	4ac4      	ldr	r2, [pc, #784]	; (f0e0 <_dtoa_r+0xa54>)
    edd0:	189b      	adds	r3, r3, r2
    edd2:	9d08      	ldr	r5, [sp, #32]
    edd4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    edd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    edd8:	2101      	movs	r1, #1
    edda:	18d2      	adds	r2, r2, r3
    eddc:	920b      	str	r2, [sp, #44]	; 0x2c
    edde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ede0:	9804      	ldr	r0, [sp, #16]
    ede2:	18d3      	adds	r3, r2, r3
    ede4:	930c      	str	r3, [sp, #48]	; 0x30
    ede6:	f000 fd68 	bl	f8ba <__i2b>
    edea:	0006      	movs	r6, r0
    edec:	2c00      	cmp	r4, #0
    edee:	dd0e      	ble.n	ee0e <_dtoa_r+0x782>
    edf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    edf2:	2b00      	cmp	r3, #0
    edf4:	dd0b      	ble.n	ee0e <_dtoa_r+0x782>
    edf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    edf8:	0023      	movs	r3, r4
    edfa:	4294      	cmp	r4, r2
    edfc:	dd00      	ble.n	ee00 <_dtoa_r+0x774>
    edfe:	0013      	movs	r3, r2
    ee00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ee02:	1ae4      	subs	r4, r4, r3
    ee04:	1ad2      	subs	r2, r2, r3
    ee06:	920b      	str	r2, [sp, #44]	; 0x2c
    ee08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ee0a:	1ad3      	subs	r3, r2, r3
    ee0c:	930c      	str	r3, [sp, #48]	; 0x30
    ee0e:	9b08      	ldr	r3, [sp, #32]
    ee10:	2b00      	cmp	r3, #0
    ee12:	d01e      	beq.n	ee52 <_dtoa_r+0x7c6>
    ee14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee16:	2b00      	cmp	r3, #0
    ee18:	d05f      	beq.n	eeda <_dtoa_r+0x84e>
    ee1a:	2d00      	cmp	r5, #0
    ee1c:	dd11      	ble.n	ee42 <_dtoa_r+0x7b6>
    ee1e:	0031      	movs	r1, r6
    ee20:	002a      	movs	r2, r5
    ee22:	9804      	ldr	r0, [sp, #16]
    ee24:	f000 fde2 	bl	f9ec <__pow5mult>
    ee28:	9a05      	ldr	r2, [sp, #20]
    ee2a:	0001      	movs	r1, r0
    ee2c:	0006      	movs	r6, r0
    ee2e:	9804      	ldr	r0, [sp, #16]
    ee30:	f000 fd4c 	bl	f8cc <__multiply>
    ee34:	9905      	ldr	r1, [sp, #20]
    ee36:	9010      	str	r0, [sp, #64]	; 0x40
    ee38:	9804      	ldr	r0, [sp, #16]
    ee3a:	f000 fca0 	bl	f77e <_Bfree>
    ee3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ee40:	9305      	str	r3, [sp, #20]
    ee42:	9b08      	ldr	r3, [sp, #32]
    ee44:	1b5a      	subs	r2, r3, r5
    ee46:	d004      	beq.n	ee52 <_dtoa_r+0x7c6>
    ee48:	9905      	ldr	r1, [sp, #20]
    ee4a:	9804      	ldr	r0, [sp, #16]
    ee4c:	f000 fdce 	bl	f9ec <__pow5mult>
    ee50:	9005      	str	r0, [sp, #20]
    ee52:	2101      	movs	r1, #1
    ee54:	9804      	ldr	r0, [sp, #16]
    ee56:	f000 fd30 	bl	f8ba <__i2b>
    ee5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ee5c:	9008      	str	r0, [sp, #32]
    ee5e:	2b00      	cmp	r3, #0
    ee60:	dd3d      	ble.n	eede <_dtoa_r+0x852>
    ee62:	001a      	movs	r2, r3
    ee64:	0001      	movs	r1, r0
    ee66:	9804      	ldr	r0, [sp, #16]
    ee68:	f000 fdc0 	bl	f9ec <__pow5mult>
    ee6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ee6e:	9008      	str	r0, [sp, #32]
    ee70:	2500      	movs	r5, #0
    ee72:	2b01      	cmp	r3, #1
    ee74:	dc3b      	bgt.n	eeee <_dtoa_r+0x862>
    ee76:	2500      	movs	r5, #0
    ee78:	9b06      	ldr	r3, [sp, #24]
    ee7a:	42ab      	cmp	r3, r5
    ee7c:	d133      	bne.n	eee6 <_dtoa_r+0x85a>
    ee7e:	9b07      	ldr	r3, [sp, #28]
    ee80:	031b      	lsls	r3, r3, #12
    ee82:	42ab      	cmp	r3, r5
    ee84:	d12f      	bne.n	eee6 <_dtoa_r+0x85a>
    ee86:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ee88:	9a07      	ldr	r2, [sp, #28]
    ee8a:	4213      	tst	r3, r2
    ee8c:	d02b      	beq.n	eee6 <_dtoa_r+0x85a>
    ee8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ee90:	3501      	adds	r5, #1
    ee92:	3301      	adds	r3, #1
    ee94:	930b      	str	r3, [sp, #44]	; 0x2c
    ee96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ee98:	3301      	adds	r3, #1
    ee9a:	930c      	str	r3, [sp, #48]	; 0x30
    ee9c:	e023      	b.n	eee6 <_dtoa_r+0x85a>
    ee9e:	2336      	movs	r3, #54	; 0x36
    eea0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    eea2:	1a9b      	subs	r3, r3, r2
    eea4:	e795      	b.n	edd2 <_dtoa_r+0x746>
    eea6:	9b08      	ldr	r3, [sp, #32]
    eea8:	1e7d      	subs	r5, r7, #1
    eeaa:	42ab      	cmp	r3, r5
    eeac:	db06      	blt.n	eebc <_dtoa_r+0x830>
    eeae:	1b5d      	subs	r5, r3, r5
    eeb0:	2f00      	cmp	r7, #0
    eeb2:	da0b      	bge.n	eecc <_dtoa_r+0x840>
    eeb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eeb6:	1bdc      	subs	r4, r3, r7
    eeb8:	2300      	movs	r3, #0
    eeba:	e78c      	b.n	edd6 <_dtoa_r+0x74a>
    eebc:	9b08      	ldr	r3, [sp, #32]
    eebe:	9508      	str	r5, [sp, #32]
    eec0:	1aea      	subs	r2, r5, r3
    eec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eec4:	2500      	movs	r5, #0
    eec6:	189b      	adds	r3, r3, r2
    eec8:	930f      	str	r3, [sp, #60]	; 0x3c
    eeca:	e7f1      	b.n	eeb0 <_dtoa_r+0x824>
    eecc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    eece:	003b      	movs	r3, r7
    eed0:	e781      	b.n	edd6 <_dtoa_r+0x74a>
    eed2:	9d08      	ldr	r5, [sp, #32]
    eed4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    eed6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    eed8:	e788      	b.n	edec <_dtoa_r+0x760>
    eeda:	9a08      	ldr	r2, [sp, #32]
    eedc:	e7b4      	b.n	ee48 <_dtoa_r+0x7bc>
    eede:	9b22      	ldr	r3, [sp, #136]	; 0x88
    eee0:	2500      	movs	r5, #0
    eee2:	2b01      	cmp	r3, #1
    eee4:	ddc7      	ble.n	ee76 <_dtoa_r+0x7ea>
    eee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eee8:	2001      	movs	r0, #1
    eeea:	2b00      	cmp	r3, #0
    eeec:	d00b      	beq.n	ef06 <_dtoa_r+0x87a>
    eeee:	9b08      	ldr	r3, [sp, #32]
    eef0:	9a08      	ldr	r2, [sp, #32]
    eef2:	691b      	ldr	r3, [r3, #16]
    eef4:	930f      	str	r3, [sp, #60]	; 0x3c
    eef6:	3303      	adds	r3, #3
    eef8:	009b      	lsls	r3, r3, #2
    eefa:	18d3      	adds	r3, r2, r3
    eefc:	6858      	ldr	r0, [r3, #4]
    eefe:	f000 fc93 	bl	f828 <__hi0bits>
    ef02:	2320      	movs	r3, #32
    ef04:	1a18      	subs	r0, r3, r0
    ef06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef08:	18c0      	adds	r0, r0, r3
    ef0a:	231f      	movs	r3, #31
    ef0c:	4018      	ands	r0, r3
    ef0e:	d100      	bne.n	ef12 <_dtoa_r+0x886>
    ef10:	e0ab      	b.n	f06a <_dtoa_r+0x9de>
    ef12:	3301      	adds	r3, #1
    ef14:	1a1b      	subs	r3, r3, r0
    ef16:	2b04      	cmp	r3, #4
    ef18:	dc00      	bgt.n	ef1c <_dtoa_r+0x890>
    ef1a:	e09b      	b.n	f054 <_dtoa_r+0x9c8>
    ef1c:	231c      	movs	r3, #28
    ef1e:	1a18      	subs	r0, r3, r0
    ef20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef22:	1824      	adds	r4, r4, r0
    ef24:	181b      	adds	r3, r3, r0
    ef26:	930b      	str	r3, [sp, #44]	; 0x2c
    ef28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef2a:	181b      	adds	r3, r3, r0
    ef2c:	930c      	str	r3, [sp, #48]	; 0x30
    ef2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef30:	2b00      	cmp	r3, #0
    ef32:	dd05      	ble.n	ef40 <_dtoa_r+0x8b4>
    ef34:	001a      	movs	r2, r3
    ef36:	9905      	ldr	r1, [sp, #20]
    ef38:	9804      	ldr	r0, [sp, #16]
    ef3a:	f000 fda9 	bl	fa90 <__lshift>
    ef3e:	9005      	str	r0, [sp, #20]
    ef40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef42:	2b00      	cmp	r3, #0
    ef44:	dd05      	ble.n	ef52 <_dtoa_r+0x8c6>
    ef46:	001a      	movs	r2, r3
    ef48:	9908      	ldr	r1, [sp, #32]
    ef4a:	9804      	ldr	r0, [sp, #16]
    ef4c:	f000 fda0 	bl	fa90 <__lshift>
    ef50:	9008      	str	r0, [sp, #32]
    ef52:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ef54:	2b00      	cmp	r3, #0
    ef56:	d100      	bne.n	ef5a <_dtoa_r+0x8ce>
    ef58:	e089      	b.n	f06e <_dtoa_r+0x9e2>
    ef5a:	9908      	ldr	r1, [sp, #32]
    ef5c:	9805      	ldr	r0, [sp, #20]
    ef5e:	f000 fde8 	bl	fb32 <__mcmp>
    ef62:	2800      	cmp	r0, #0
    ef64:	db00      	blt.n	ef68 <_dtoa_r+0x8dc>
    ef66:	e082      	b.n	f06e <_dtoa_r+0x9e2>
    ef68:	9b03      	ldr	r3, [sp, #12]
    ef6a:	220a      	movs	r2, #10
    ef6c:	3b01      	subs	r3, #1
    ef6e:	9303      	str	r3, [sp, #12]
    ef70:	9905      	ldr	r1, [sp, #20]
    ef72:	2300      	movs	r3, #0
    ef74:	9804      	ldr	r0, [sp, #16]
    ef76:	f000 fc1b 	bl	f7b0 <__multadd>
    ef7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef7c:	9005      	str	r0, [sp, #20]
    ef7e:	2b00      	cmp	r3, #0
    ef80:	d100      	bne.n	ef84 <_dtoa_r+0x8f8>
    ef82:	e15d      	b.n	f240 <_dtoa_r+0xbb4>
    ef84:	2300      	movs	r3, #0
    ef86:	0031      	movs	r1, r6
    ef88:	220a      	movs	r2, #10
    ef8a:	9804      	ldr	r0, [sp, #16]
    ef8c:	f000 fc10 	bl	f7b0 <__multadd>
    ef90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ef92:	0006      	movs	r6, r0
    ef94:	2b00      	cmp	r3, #0
    ef96:	dc02      	bgt.n	ef9e <_dtoa_r+0x912>
    ef98:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ef9a:	2b02      	cmp	r3, #2
    ef9c:	dc6d      	bgt.n	f07a <_dtoa_r+0x9ee>
    ef9e:	2c00      	cmp	r4, #0
    efa0:	dd05      	ble.n	efae <_dtoa_r+0x922>
    efa2:	0031      	movs	r1, r6
    efa4:	0022      	movs	r2, r4
    efa6:	9804      	ldr	r0, [sp, #16]
    efa8:	f000 fd72 	bl	fa90 <__lshift>
    efac:	0006      	movs	r6, r0
    efae:	0030      	movs	r0, r6
    efb0:	2d00      	cmp	r5, #0
    efb2:	d011      	beq.n	efd8 <_dtoa_r+0x94c>
    efb4:	6871      	ldr	r1, [r6, #4]
    efb6:	9804      	ldr	r0, [sp, #16]
    efb8:	f000 fba9 	bl	f70e <_Balloc>
    efbc:	0031      	movs	r1, r6
    efbe:	0004      	movs	r4, r0
    efc0:	6933      	ldr	r3, [r6, #16]
    efc2:	310c      	adds	r1, #12
    efc4:	1c9a      	adds	r2, r3, #2
    efc6:	0092      	lsls	r2, r2, #2
    efc8:	300c      	adds	r0, #12
    efca:	f7fd fd62 	bl	ca92 <memcpy>
    efce:	2201      	movs	r2, #1
    efd0:	0021      	movs	r1, r4
    efd2:	9804      	ldr	r0, [sp, #16]
    efd4:	f000 fd5c 	bl	fa90 <__lshift>
    efd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    efda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    efdc:	3f01      	subs	r7, #1
    efde:	930b      	str	r3, [sp, #44]	; 0x2c
    efe0:	19db      	adds	r3, r3, r7
    efe2:	0037      	movs	r7, r6
    efe4:	0006      	movs	r6, r0
    efe6:	930f      	str	r3, [sp, #60]	; 0x3c
    efe8:	9908      	ldr	r1, [sp, #32]
    efea:	9805      	ldr	r0, [sp, #20]
    efec:	f7ff fac9 	bl	e582 <quorem>
    eff0:	0039      	movs	r1, r7
    eff2:	900d      	str	r0, [sp, #52]	; 0x34
    eff4:	0004      	movs	r4, r0
    eff6:	9805      	ldr	r0, [sp, #20]
    eff8:	f000 fd9b 	bl	fb32 <__mcmp>
    effc:	0032      	movs	r2, r6
    effe:	900e      	str	r0, [sp, #56]	; 0x38
    f000:	9908      	ldr	r1, [sp, #32]
    f002:	9804      	ldr	r0, [sp, #16]
    f004:	f000 fdae 	bl	fb64 <__mdiff>
    f008:	2301      	movs	r3, #1
    f00a:	930c      	str	r3, [sp, #48]	; 0x30
    f00c:	68c3      	ldr	r3, [r0, #12]
    f00e:	3430      	adds	r4, #48	; 0x30
    f010:	0005      	movs	r5, r0
    f012:	2b00      	cmp	r3, #0
    f014:	d104      	bne.n	f020 <_dtoa_r+0x994>
    f016:	0001      	movs	r1, r0
    f018:	9805      	ldr	r0, [sp, #20]
    f01a:	f000 fd8a 	bl	fb32 <__mcmp>
    f01e:	900c      	str	r0, [sp, #48]	; 0x30
    f020:	0029      	movs	r1, r5
    f022:	9804      	ldr	r0, [sp, #16]
    f024:	f000 fbab 	bl	f77e <_Bfree>
    f028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f02a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    f02c:	4313      	orrs	r3, r2
    f02e:	d000      	beq.n	f032 <_dtoa_r+0x9a6>
    f030:	e089      	b.n	f146 <_dtoa_r+0xaba>
    f032:	9a06      	ldr	r2, [sp, #24]
    f034:	3301      	adds	r3, #1
    f036:	4213      	tst	r3, r2
    f038:	d000      	beq.n	f03c <_dtoa_r+0x9b0>
    f03a:	e084      	b.n	f146 <_dtoa_r+0xaba>
    f03c:	2c39      	cmp	r4, #57	; 0x39
    f03e:	d100      	bne.n	f042 <_dtoa_r+0x9b6>
    f040:	e0a3      	b.n	f18a <_dtoa_r+0xafe>
    f042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f044:	2b00      	cmp	r3, #0
    f046:	dd01      	ble.n	f04c <_dtoa_r+0x9c0>
    f048:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    f04a:	3431      	adds	r4, #49	; 0x31
    f04c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f04e:	1c5d      	adds	r5, r3, #1
    f050:	701c      	strb	r4, [r3, #0]
    f052:	e027      	b.n	f0a4 <_dtoa_r+0xa18>
    f054:	2b04      	cmp	r3, #4
    f056:	d100      	bne.n	f05a <_dtoa_r+0x9ce>
    f058:	e769      	b.n	ef2e <_dtoa_r+0x8a2>
    f05a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f05c:	331c      	adds	r3, #28
    f05e:	18d2      	adds	r2, r2, r3
    f060:	920b      	str	r2, [sp, #44]	; 0x2c
    f062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f064:	18e4      	adds	r4, r4, r3
    f066:	18d3      	adds	r3, r2, r3
    f068:	e760      	b.n	ef2c <_dtoa_r+0x8a0>
    f06a:	0003      	movs	r3, r0
    f06c:	e7f5      	b.n	f05a <_dtoa_r+0x9ce>
    f06e:	2f00      	cmp	r7, #0
    f070:	dc3c      	bgt.n	f0ec <_dtoa_r+0xa60>
    f072:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f074:	2b02      	cmp	r3, #2
    f076:	dd39      	ble.n	f0ec <_dtoa_r+0xa60>
    f078:	970d      	str	r7, [sp, #52]	; 0x34
    f07a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f07c:	2b00      	cmp	r3, #0
    f07e:	d10c      	bne.n	f09a <_dtoa_r+0xa0e>
    f080:	9908      	ldr	r1, [sp, #32]
    f082:	2205      	movs	r2, #5
    f084:	9804      	ldr	r0, [sp, #16]
    f086:	f000 fb93 	bl	f7b0 <__multadd>
    f08a:	9008      	str	r0, [sp, #32]
    f08c:	0001      	movs	r1, r0
    f08e:	9805      	ldr	r0, [sp, #20]
    f090:	f000 fd4f 	bl	fb32 <__mcmp>
    f094:	2800      	cmp	r0, #0
    f096:	dd00      	ble.n	f09a <_dtoa_r+0xa0e>
    f098:	e55a      	b.n	eb50 <_dtoa_r+0x4c4>
    f09a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f09c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f09e:	43db      	mvns	r3, r3
    f0a0:	9303      	str	r3, [sp, #12]
    f0a2:	2700      	movs	r7, #0
    f0a4:	9908      	ldr	r1, [sp, #32]
    f0a6:	9804      	ldr	r0, [sp, #16]
    f0a8:	f000 fb69 	bl	f77e <_Bfree>
    f0ac:	2e00      	cmp	r6, #0
    f0ae:	d100      	bne.n	f0b2 <_dtoa_r+0xa26>
    f0b0:	e63f      	b.n	ed32 <_dtoa_r+0x6a6>
    f0b2:	2f00      	cmp	r7, #0
    f0b4:	d005      	beq.n	f0c2 <_dtoa_r+0xa36>
    f0b6:	42b7      	cmp	r7, r6
    f0b8:	d003      	beq.n	f0c2 <_dtoa_r+0xa36>
    f0ba:	0039      	movs	r1, r7
    f0bc:	9804      	ldr	r0, [sp, #16]
    f0be:	f000 fb5e 	bl	f77e <_Bfree>
    f0c2:	0031      	movs	r1, r6
    f0c4:	9804      	ldr	r0, [sp, #16]
    f0c6:	f000 fb5a 	bl	f77e <_Bfree>
    f0ca:	e632      	b.n	ed32 <_dtoa_r+0x6a6>
    f0cc:	9508      	str	r5, [sp, #32]
    f0ce:	002e      	movs	r6, r5
    f0d0:	e7e3      	b.n	f09a <_dtoa_r+0xa0e>
    f0d2:	2300      	movs	r3, #0
    f0d4:	9308      	str	r3, [sp, #32]
    f0d6:	001e      	movs	r6, r3
    f0d8:	e7df      	b.n	f09a <_dtoa_r+0xa0e>
    f0da:	46c0      	nop			; (mov r8, r8)
    f0dc:	40240000 	.word	0x40240000
    f0e0:	00000433 	.word	0x00000433
    f0e4:	9603      	str	r6, [sp, #12]
    f0e6:	9508      	str	r5, [sp, #32]
    f0e8:	002e      	movs	r6, r5
    f0ea:	e531      	b.n	eb50 <_dtoa_r+0x4c4>
    f0ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f0ee:	970d      	str	r7, [sp, #52]	; 0x34
    f0f0:	2b00      	cmp	r3, #0
    f0f2:	d000      	beq.n	f0f6 <_dtoa_r+0xa6a>
    f0f4:	e753      	b.n	ef9e <_dtoa_r+0x912>
    f0f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f0f8:	9908      	ldr	r1, [sp, #32]
    f0fa:	9805      	ldr	r0, [sp, #20]
    f0fc:	f7ff fa41 	bl	e582 <quorem>
    f100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f102:	3030      	adds	r0, #48	; 0x30
    f104:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f106:	7028      	strb	r0, [r5, #0]
    f108:	3501      	adds	r5, #1
    f10a:	0004      	movs	r4, r0
    f10c:	1aeb      	subs	r3, r5, r3
    f10e:	429a      	cmp	r2, r3
    f110:	dc78      	bgt.n	f204 <_dtoa_r+0xb78>
    f112:	1e15      	subs	r5, r2, #0
    f114:	dc00      	bgt.n	f118 <_dtoa_r+0xa8c>
    f116:	2501      	movs	r5, #1
    f118:	2700      	movs	r7, #0
    f11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f11c:	195d      	adds	r5, r3, r5
    f11e:	9905      	ldr	r1, [sp, #20]
    f120:	2201      	movs	r2, #1
    f122:	9804      	ldr	r0, [sp, #16]
    f124:	f000 fcb4 	bl	fa90 <__lshift>
    f128:	9908      	ldr	r1, [sp, #32]
    f12a:	9005      	str	r0, [sp, #20]
    f12c:	f000 fd01 	bl	fb32 <__mcmp>
    f130:	2800      	cmp	r0, #0
    f132:	dc2f      	bgt.n	f194 <_dtoa_r+0xb08>
    f134:	d101      	bne.n	f13a <_dtoa_r+0xaae>
    f136:	07e3      	lsls	r3, r4, #31
    f138:	d42c      	bmi.n	f194 <_dtoa_r+0xb08>
    f13a:	1e6b      	subs	r3, r5, #1
    f13c:	781a      	ldrb	r2, [r3, #0]
    f13e:	2a30      	cmp	r2, #48	; 0x30
    f140:	d1b0      	bne.n	f0a4 <_dtoa_r+0xa18>
    f142:	001d      	movs	r5, r3
    f144:	e7f9      	b.n	f13a <_dtoa_r+0xaae>
    f146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f148:	2b00      	cmp	r3, #0
    f14a:	db07      	blt.n	f15c <_dtoa_r+0xad0>
    f14c:	001d      	movs	r5, r3
    f14e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f150:	431d      	orrs	r5, r3
    f152:	d126      	bne.n	f1a2 <_dtoa_r+0xb16>
    f154:	2301      	movs	r3, #1
    f156:	9a06      	ldr	r2, [sp, #24]
    f158:	4213      	tst	r3, r2
    f15a:	d122      	bne.n	f1a2 <_dtoa_r+0xb16>
    f15c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f15e:	2b00      	cmp	r3, #0
    f160:	dc00      	bgt.n	f164 <_dtoa_r+0xad8>
    f162:	e773      	b.n	f04c <_dtoa_r+0x9c0>
    f164:	9905      	ldr	r1, [sp, #20]
    f166:	2201      	movs	r2, #1
    f168:	9804      	ldr	r0, [sp, #16]
    f16a:	f000 fc91 	bl	fa90 <__lshift>
    f16e:	9908      	ldr	r1, [sp, #32]
    f170:	9005      	str	r0, [sp, #20]
    f172:	f000 fcde 	bl	fb32 <__mcmp>
    f176:	2800      	cmp	r0, #0
    f178:	dc04      	bgt.n	f184 <_dtoa_r+0xaf8>
    f17a:	d000      	beq.n	f17e <_dtoa_r+0xaf2>
    f17c:	e766      	b.n	f04c <_dtoa_r+0x9c0>
    f17e:	07e3      	lsls	r3, r4, #31
    f180:	d400      	bmi.n	f184 <_dtoa_r+0xaf8>
    f182:	e763      	b.n	f04c <_dtoa_r+0x9c0>
    f184:	2c39      	cmp	r4, #57	; 0x39
    f186:	d000      	beq.n	f18a <_dtoa_r+0xafe>
    f188:	e75e      	b.n	f048 <_dtoa_r+0x9bc>
    f18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f18c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f18e:	1c5d      	adds	r5, r3, #1
    f190:	2339      	movs	r3, #57	; 0x39
    f192:	7013      	strb	r3, [r2, #0]
    f194:	1e6b      	subs	r3, r5, #1
    f196:	781a      	ldrb	r2, [r3, #0]
    f198:	2a39      	cmp	r2, #57	; 0x39
    f19a:	d03b      	beq.n	f214 <_dtoa_r+0xb88>
    f19c:	3201      	adds	r2, #1
    f19e:	701a      	strb	r2, [r3, #0]
    f1a0:	e780      	b.n	f0a4 <_dtoa_r+0xa18>
    f1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f1a4:	3301      	adds	r3, #1
    f1a6:	930d      	str	r3, [sp, #52]	; 0x34
    f1a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1aa:	2b00      	cmp	r3, #0
    f1ac:	dd05      	ble.n	f1ba <_dtoa_r+0xb2e>
    f1ae:	2c39      	cmp	r4, #57	; 0x39
    f1b0:	d0eb      	beq.n	f18a <_dtoa_r+0xafe>
    f1b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f1b4:	3401      	adds	r4, #1
    f1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f1b8:	e74a      	b.n	f050 <_dtoa_r+0x9c4>
    f1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f1bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f1be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f1c0:	701c      	strb	r4, [r3, #0]
    f1c2:	4293      	cmp	r3, r2
    f1c4:	d0ab      	beq.n	f11e <_dtoa_r+0xa92>
    f1c6:	2300      	movs	r3, #0
    f1c8:	220a      	movs	r2, #10
    f1ca:	9905      	ldr	r1, [sp, #20]
    f1cc:	9804      	ldr	r0, [sp, #16]
    f1ce:	f000 faef 	bl	f7b0 <__multadd>
    f1d2:	2300      	movs	r3, #0
    f1d4:	9005      	str	r0, [sp, #20]
    f1d6:	220a      	movs	r2, #10
    f1d8:	0039      	movs	r1, r7
    f1da:	9804      	ldr	r0, [sp, #16]
    f1dc:	42b7      	cmp	r7, r6
    f1de:	d106      	bne.n	f1ee <_dtoa_r+0xb62>
    f1e0:	f000 fae6 	bl	f7b0 <__multadd>
    f1e4:	0007      	movs	r7, r0
    f1e6:	0006      	movs	r6, r0
    f1e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f1ea:	930b      	str	r3, [sp, #44]	; 0x2c
    f1ec:	e6fc      	b.n	efe8 <_dtoa_r+0x95c>
    f1ee:	f000 fadf 	bl	f7b0 <__multadd>
    f1f2:	0031      	movs	r1, r6
    f1f4:	0007      	movs	r7, r0
    f1f6:	2300      	movs	r3, #0
    f1f8:	220a      	movs	r2, #10
    f1fa:	9804      	ldr	r0, [sp, #16]
    f1fc:	f000 fad8 	bl	f7b0 <__multadd>
    f200:	0006      	movs	r6, r0
    f202:	e7f1      	b.n	f1e8 <_dtoa_r+0xb5c>
    f204:	2300      	movs	r3, #0
    f206:	220a      	movs	r2, #10
    f208:	9905      	ldr	r1, [sp, #20]
    f20a:	9804      	ldr	r0, [sp, #16]
    f20c:	f000 fad0 	bl	f7b0 <__multadd>
    f210:	9005      	str	r0, [sp, #20]
    f212:	e771      	b.n	f0f8 <_dtoa_r+0xa6c>
    f214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f216:	429a      	cmp	r2, r3
    f218:	d105      	bne.n	f226 <_dtoa_r+0xb9a>
    f21a:	9b03      	ldr	r3, [sp, #12]
    f21c:	3301      	adds	r3, #1
    f21e:	9303      	str	r3, [sp, #12]
    f220:	2331      	movs	r3, #49	; 0x31
    f222:	7013      	strb	r3, [r2, #0]
    f224:	e73e      	b.n	f0a4 <_dtoa_r+0xa18>
    f226:	001d      	movs	r5, r3
    f228:	e7b4      	b.n	f194 <_dtoa_r+0xb08>
    f22a:	4b0a      	ldr	r3, [pc, #40]	; (f254 <_dtoa_r+0xbc8>)
    f22c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f22e:	930a      	str	r3, [sp, #40]	; 0x28
    f230:	4b09      	ldr	r3, [pc, #36]	; (f258 <_dtoa_r+0xbcc>)
    f232:	2a00      	cmp	r2, #0
    f234:	d001      	beq.n	f23a <_dtoa_r+0xbae>
    f236:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f238:	6013      	str	r3, [r2, #0]
    f23a:	980a      	ldr	r0, [sp, #40]	; 0x28
    f23c:	b01d      	add	sp, #116	; 0x74
    f23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f242:	2b00      	cmp	r3, #0
    f244:	dd00      	ble.n	f248 <_dtoa_r+0xbbc>
    f246:	e756      	b.n	f0f6 <_dtoa_r+0xa6a>
    f248:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f24a:	2b02      	cmp	r3, #2
    f24c:	dc00      	bgt.n	f250 <_dtoa_r+0xbc4>
    f24e:	e752      	b.n	f0f6 <_dtoa_r+0xa6a>
    f250:	e713      	b.n	f07a <_dtoa_r+0x9ee>
    f252:	46c0      	nop			; (mov r8, r8)
    f254:	00012b08 	.word	0x00012b08
    f258:	00012b10 	.word	0x00012b10

0000f25c <__sflush_r>:
    f25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f25e:	898a      	ldrh	r2, [r1, #12]
    f260:	0005      	movs	r5, r0
    f262:	000c      	movs	r4, r1
    f264:	0713      	lsls	r3, r2, #28
    f266:	d460      	bmi.n	f32a <__sflush_r+0xce>
    f268:	684b      	ldr	r3, [r1, #4]
    f26a:	2b00      	cmp	r3, #0
    f26c:	dc04      	bgt.n	f278 <__sflush_r+0x1c>
    f26e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    f270:	2b00      	cmp	r3, #0
    f272:	dc01      	bgt.n	f278 <__sflush_r+0x1c>
    f274:	2000      	movs	r0, #0
    f276:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f278:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    f27a:	2f00      	cmp	r7, #0
    f27c:	d0fa      	beq.n	f274 <__sflush_r+0x18>
    f27e:	2300      	movs	r3, #0
    f280:	682e      	ldr	r6, [r5, #0]
    f282:	602b      	str	r3, [r5, #0]
    f284:	2380      	movs	r3, #128	; 0x80
    f286:	015b      	lsls	r3, r3, #5
    f288:	401a      	ands	r2, r3
    f28a:	d034      	beq.n	f2f6 <__sflush_r+0x9a>
    f28c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    f28e:	89a3      	ldrh	r3, [r4, #12]
    f290:	075b      	lsls	r3, r3, #29
    f292:	d506      	bpl.n	f2a2 <__sflush_r+0x46>
    f294:	6863      	ldr	r3, [r4, #4]
    f296:	1ac0      	subs	r0, r0, r3
    f298:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f29a:	2b00      	cmp	r3, #0
    f29c:	d001      	beq.n	f2a2 <__sflush_r+0x46>
    f29e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f2a0:	1ac0      	subs	r0, r0, r3
    f2a2:	0002      	movs	r2, r0
    f2a4:	6a21      	ldr	r1, [r4, #32]
    f2a6:	2300      	movs	r3, #0
    f2a8:	0028      	movs	r0, r5
    f2aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    f2ac:	47b8      	blx	r7
    f2ae:	89a1      	ldrh	r1, [r4, #12]
    f2b0:	1c43      	adds	r3, r0, #1
    f2b2:	d106      	bne.n	f2c2 <__sflush_r+0x66>
    f2b4:	682b      	ldr	r3, [r5, #0]
    f2b6:	2b1d      	cmp	r3, #29
    f2b8:	d831      	bhi.n	f31e <__sflush_r+0xc2>
    f2ba:	4a2c      	ldr	r2, [pc, #176]	; (f36c <__sflush_r+0x110>)
    f2bc:	40da      	lsrs	r2, r3
    f2be:	07d3      	lsls	r3, r2, #31
    f2c0:	d52d      	bpl.n	f31e <__sflush_r+0xc2>
    f2c2:	2300      	movs	r3, #0
    f2c4:	6063      	str	r3, [r4, #4]
    f2c6:	6923      	ldr	r3, [r4, #16]
    f2c8:	6023      	str	r3, [r4, #0]
    f2ca:	04cb      	lsls	r3, r1, #19
    f2cc:	d505      	bpl.n	f2da <__sflush_r+0x7e>
    f2ce:	1c43      	adds	r3, r0, #1
    f2d0:	d102      	bne.n	f2d8 <__sflush_r+0x7c>
    f2d2:	682b      	ldr	r3, [r5, #0]
    f2d4:	2b00      	cmp	r3, #0
    f2d6:	d100      	bne.n	f2da <__sflush_r+0x7e>
    f2d8:	6560      	str	r0, [r4, #84]	; 0x54
    f2da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f2dc:	602e      	str	r6, [r5, #0]
    f2de:	2900      	cmp	r1, #0
    f2e0:	d0c8      	beq.n	f274 <__sflush_r+0x18>
    f2e2:	0023      	movs	r3, r4
    f2e4:	3344      	adds	r3, #68	; 0x44
    f2e6:	4299      	cmp	r1, r3
    f2e8:	d002      	beq.n	f2f0 <__sflush_r+0x94>
    f2ea:	0028      	movs	r0, r5
    f2ec:	f7fd fe4a 	bl	cf84 <_free_r>
    f2f0:	2000      	movs	r0, #0
    f2f2:	6360      	str	r0, [r4, #52]	; 0x34
    f2f4:	e7bf      	b.n	f276 <__sflush_r+0x1a>
    f2f6:	2301      	movs	r3, #1
    f2f8:	6a21      	ldr	r1, [r4, #32]
    f2fa:	0028      	movs	r0, r5
    f2fc:	47b8      	blx	r7
    f2fe:	1c43      	adds	r3, r0, #1
    f300:	d1c5      	bne.n	f28e <__sflush_r+0x32>
    f302:	682b      	ldr	r3, [r5, #0]
    f304:	2b00      	cmp	r3, #0
    f306:	d0c2      	beq.n	f28e <__sflush_r+0x32>
    f308:	2b1d      	cmp	r3, #29
    f30a:	d001      	beq.n	f310 <__sflush_r+0xb4>
    f30c:	2b16      	cmp	r3, #22
    f30e:	d101      	bne.n	f314 <__sflush_r+0xb8>
    f310:	602e      	str	r6, [r5, #0]
    f312:	e7af      	b.n	f274 <__sflush_r+0x18>
    f314:	2340      	movs	r3, #64	; 0x40
    f316:	89a2      	ldrh	r2, [r4, #12]
    f318:	4313      	orrs	r3, r2
    f31a:	81a3      	strh	r3, [r4, #12]
    f31c:	e7ab      	b.n	f276 <__sflush_r+0x1a>
    f31e:	2340      	movs	r3, #64	; 0x40
    f320:	430b      	orrs	r3, r1
    f322:	2001      	movs	r0, #1
    f324:	81a3      	strh	r3, [r4, #12]
    f326:	4240      	negs	r0, r0
    f328:	e7a5      	b.n	f276 <__sflush_r+0x1a>
    f32a:	690f      	ldr	r7, [r1, #16]
    f32c:	2f00      	cmp	r7, #0
    f32e:	d0a1      	beq.n	f274 <__sflush_r+0x18>
    f330:	680b      	ldr	r3, [r1, #0]
    f332:	600f      	str	r7, [r1, #0]
    f334:	1bdb      	subs	r3, r3, r7
    f336:	9301      	str	r3, [sp, #4]
    f338:	2300      	movs	r3, #0
    f33a:	0792      	lsls	r2, r2, #30
    f33c:	d100      	bne.n	f340 <__sflush_r+0xe4>
    f33e:	694b      	ldr	r3, [r1, #20]
    f340:	60a3      	str	r3, [r4, #8]
    f342:	9b01      	ldr	r3, [sp, #4]
    f344:	2b00      	cmp	r3, #0
    f346:	dc00      	bgt.n	f34a <__sflush_r+0xee>
    f348:	e794      	b.n	f274 <__sflush_r+0x18>
    f34a:	9b01      	ldr	r3, [sp, #4]
    f34c:	003a      	movs	r2, r7
    f34e:	6a21      	ldr	r1, [r4, #32]
    f350:	0028      	movs	r0, r5
    f352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    f354:	47b0      	blx	r6
    f356:	2800      	cmp	r0, #0
    f358:	dc03      	bgt.n	f362 <__sflush_r+0x106>
    f35a:	2340      	movs	r3, #64	; 0x40
    f35c:	89a2      	ldrh	r2, [r4, #12]
    f35e:	4313      	orrs	r3, r2
    f360:	e7df      	b.n	f322 <__sflush_r+0xc6>
    f362:	9b01      	ldr	r3, [sp, #4]
    f364:	183f      	adds	r7, r7, r0
    f366:	1a1b      	subs	r3, r3, r0
    f368:	9301      	str	r3, [sp, #4]
    f36a:	e7ea      	b.n	f342 <__sflush_r+0xe6>
    f36c:	20400001 	.word	0x20400001

0000f370 <_fflush_r>:
    f370:	690b      	ldr	r3, [r1, #16]
    f372:	b570      	push	{r4, r5, r6, lr}
    f374:	0005      	movs	r5, r0
    f376:	000c      	movs	r4, r1
    f378:	2b00      	cmp	r3, #0
    f37a:	d101      	bne.n	f380 <_fflush_r+0x10>
    f37c:	2000      	movs	r0, #0
    f37e:	bd70      	pop	{r4, r5, r6, pc}
    f380:	2800      	cmp	r0, #0
    f382:	d004      	beq.n	f38e <_fflush_r+0x1e>
    f384:	6983      	ldr	r3, [r0, #24]
    f386:	2b00      	cmp	r3, #0
    f388:	d101      	bne.n	f38e <_fflush_r+0x1e>
    f38a:	f000 f85f 	bl	f44c <__sinit>
    f38e:	4b0b      	ldr	r3, [pc, #44]	; (f3bc <_fflush_r+0x4c>)
    f390:	429c      	cmp	r4, r3
    f392:	d109      	bne.n	f3a8 <_fflush_r+0x38>
    f394:	686c      	ldr	r4, [r5, #4]
    f396:	220c      	movs	r2, #12
    f398:	5ea3      	ldrsh	r3, [r4, r2]
    f39a:	2b00      	cmp	r3, #0
    f39c:	d0ee      	beq.n	f37c <_fflush_r+0xc>
    f39e:	0021      	movs	r1, r4
    f3a0:	0028      	movs	r0, r5
    f3a2:	f7ff ff5b 	bl	f25c <__sflush_r>
    f3a6:	e7ea      	b.n	f37e <_fflush_r+0xe>
    f3a8:	4b05      	ldr	r3, [pc, #20]	; (f3c0 <_fflush_r+0x50>)
    f3aa:	429c      	cmp	r4, r3
    f3ac:	d101      	bne.n	f3b2 <_fflush_r+0x42>
    f3ae:	68ac      	ldr	r4, [r5, #8]
    f3b0:	e7f1      	b.n	f396 <_fflush_r+0x26>
    f3b2:	4b04      	ldr	r3, [pc, #16]	; (f3c4 <_fflush_r+0x54>)
    f3b4:	429c      	cmp	r4, r3
    f3b6:	d1ee      	bne.n	f396 <_fflush_r+0x26>
    f3b8:	68ec      	ldr	r4, [r5, #12]
    f3ba:	e7ec      	b.n	f396 <_fflush_r+0x26>
    f3bc:	00012b38 	.word	0x00012b38
    f3c0:	00012b58 	.word	0x00012b58
    f3c4:	00012b18 	.word	0x00012b18

0000f3c8 <_cleanup_r>:
    f3c8:	b510      	push	{r4, lr}
    f3ca:	4902      	ldr	r1, [pc, #8]	; (f3d4 <_cleanup_r+0xc>)
    f3cc:	f000 f8b2 	bl	f534 <_fwalk_reent>
    f3d0:	bd10      	pop	{r4, pc}
    f3d2:	46c0      	nop			; (mov r8, r8)
    f3d4:	0000f371 	.word	0x0000f371

0000f3d8 <std.isra.0>:
    f3d8:	2300      	movs	r3, #0
    f3da:	b510      	push	{r4, lr}
    f3dc:	0004      	movs	r4, r0
    f3de:	6003      	str	r3, [r0, #0]
    f3e0:	6043      	str	r3, [r0, #4]
    f3e2:	6083      	str	r3, [r0, #8]
    f3e4:	8181      	strh	r1, [r0, #12]
    f3e6:	6643      	str	r3, [r0, #100]	; 0x64
    f3e8:	81c2      	strh	r2, [r0, #14]
    f3ea:	6103      	str	r3, [r0, #16]
    f3ec:	6143      	str	r3, [r0, #20]
    f3ee:	6183      	str	r3, [r0, #24]
    f3f0:	0019      	movs	r1, r3
    f3f2:	2208      	movs	r2, #8
    f3f4:	305c      	adds	r0, #92	; 0x5c
    f3f6:	f7fd fb67 	bl	cac8 <memset>
    f3fa:	4b05      	ldr	r3, [pc, #20]	; (f410 <std.isra.0+0x38>)
    f3fc:	6224      	str	r4, [r4, #32]
    f3fe:	6263      	str	r3, [r4, #36]	; 0x24
    f400:	4b04      	ldr	r3, [pc, #16]	; (f414 <std.isra.0+0x3c>)
    f402:	62a3      	str	r3, [r4, #40]	; 0x28
    f404:	4b04      	ldr	r3, [pc, #16]	; (f418 <std.isra.0+0x40>)
    f406:	62e3      	str	r3, [r4, #44]	; 0x2c
    f408:	4b04      	ldr	r3, [pc, #16]	; (f41c <std.isra.0+0x44>)
    f40a:	6323      	str	r3, [r4, #48]	; 0x30
    f40c:	bd10      	pop	{r4, pc}
    f40e:	46c0      	nop			; (mov r8, r8)
    f410:	000100ed 	.word	0x000100ed
    f414:	00010119 	.word	0x00010119
    f418:	00010151 	.word	0x00010151
    f41c:	0001017d 	.word	0x0001017d

0000f420 <__sfmoreglue>:
    f420:	b570      	push	{r4, r5, r6, lr}
    f422:	2568      	movs	r5, #104	; 0x68
    f424:	1e4a      	subs	r2, r1, #1
    f426:	4355      	muls	r5, r2
    f428:	000e      	movs	r6, r1
    f42a:	0029      	movs	r1, r5
    f42c:	3174      	adds	r1, #116	; 0x74
    f42e:	f7fd fdf3 	bl	d018 <_malloc_r>
    f432:	1e04      	subs	r4, r0, #0
    f434:	d008      	beq.n	f448 <__sfmoreglue+0x28>
    f436:	2100      	movs	r1, #0
    f438:	002a      	movs	r2, r5
    f43a:	6001      	str	r1, [r0, #0]
    f43c:	6046      	str	r6, [r0, #4]
    f43e:	300c      	adds	r0, #12
    f440:	60a0      	str	r0, [r4, #8]
    f442:	3268      	adds	r2, #104	; 0x68
    f444:	f7fd fb40 	bl	cac8 <memset>
    f448:	0020      	movs	r0, r4
    f44a:	bd70      	pop	{r4, r5, r6, pc}

0000f44c <__sinit>:
    f44c:	6983      	ldr	r3, [r0, #24]
    f44e:	b513      	push	{r0, r1, r4, lr}
    f450:	0004      	movs	r4, r0
    f452:	2b00      	cmp	r3, #0
    f454:	d128      	bne.n	f4a8 <__sinit+0x5c>
    f456:	6483      	str	r3, [r0, #72]	; 0x48
    f458:	64c3      	str	r3, [r0, #76]	; 0x4c
    f45a:	6503      	str	r3, [r0, #80]	; 0x50
    f45c:	4b13      	ldr	r3, [pc, #76]	; (f4ac <__sinit+0x60>)
    f45e:	4a14      	ldr	r2, [pc, #80]	; (f4b0 <__sinit+0x64>)
    f460:	681b      	ldr	r3, [r3, #0]
    f462:	6282      	str	r2, [r0, #40]	; 0x28
    f464:	9301      	str	r3, [sp, #4]
    f466:	4298      	cmp	r0, r3
    f468:	d101      	bne.n	f46e <__sinit+0x22>
    f46a:	2301      	movs	r3, #1
    f46c:	6183      	str	r3, [r0, #24]
    f46e:	0020      	movs	r0, r4
    f470:	f000 f820 	bl	f4b4 <__sfp>
    f474:	6060      	str	r0, [r4, #4]
    f476:	0020      	movs	r0, r4
    f478:	f000 f81c 	bl	f4b4 <__sfp>
    f47c:	60a0      	str	r0, [r4, #8]
    f47e:	0020      	movs	r0, r4
    f480:	f000 f818 	bl	f4b4 <__sfp>
    f484:	2200      	movs	r2, #0
    f486:	60e0      	str	r0, [r4, #12]
    f488:	2104      	movs	r1, #4
    f48a:	6860      	ldr	r0, [r4, #4]
    f48c:	f7ff ffa4 	bl	f3d8 <std.isra.0>
    f490:	2201      	movs	r2, #1
    f492:	2109      	movs	r1, #9
    f494:	68a0      	ldr	r0, [r4, #8]
    f496:	f7ff ff9f 	bl	f3d8 <std.isra.0>
    f49a:	2202      	movs	r2, #2
    f49c:	2112      	movs	r1, #18
    f49e:	68e0      	ldr	r0, [r4, #12]
    f4a0:	f7ff ff9a 	bl	f3d8 <std.isra.0>
    f4a4:	2301      	movs	r3, #1
    f4a6:	61a3      	str	r3, [r4, #24]
    f4a8:	bd13      	pop	{r0, r1, r4, pc}
    f4aa:	46c0      	nop			; (mov r8, r8)
    f4ac:	0001291c 	.word	0x0001291c
    f4b0:	0000f3c9 	.word	0x0000f3c9

0000f4b4 <__sfp>:
    f4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4b6:	4b1e      	ldr	r3, [pc, #120]	; (f530 <__sfp+0x7c>)
    f4b8:	0007      	movs	r7, r0
    f4ba:	681e      	ldr	r6, [r3, #0]
    f4bc:	69b3      	ldr	r3, [r6, #24]
    f4be:	2b00      	cmp	r3, #0
    f4c0:	d102      	bne.n	f4c8 <__sfp+0x14>
    f4c2:	0030      	movs	r0, r6
    f4c4:	f7ff ffc2 	bl	f44c <__sinit>
    f4c8:	3648      	adds	r6, #72	; 0x48
    f4ca:	68b4      	ldr	r4, [r6, #8]
    f4cc:	6873      	ldr	r3, [r6, #4]
    f4ce:	3b01      	subs	r3, #1
    f4d0:	d504      	bpl.n	f4dc <__sfp+0x28>
    f4d2:	6833      	ldr	r3, [r6, #0]
    f4d4:	2b00      	cmp	r3, #0
    f4d6:	d007      	beq.n	f4e8 <__sfp+0x34>
    f4d8:	6836      	ldr	r6, [r6, #0]
    f4da:	e7f6      	b.n	f4ca <__sfp+0x16>
    f4dc:	220c      	movs	r2, #12
    f4de:	5ea5      	ldrsh	r5, [r4, r2]
    f4e0:	2d00      	cmp	r5, #0
    f4e2:	d00d      	beq.n	f500 <__sfp+0x4c>
    f4e4:	3468      	adds	r4, #104	; 0x68
    f4e6:	e7f2      	b.n	f4ce <__sfp+0x1a>
    f4e8:	2104      	movs	r1, #4
    f4ea:	0038      	movs	r0, r7
    f4ec:	f7ff ff98 	bl	f420 <__sfmoreglue>
    f4f0:	6030      	str	r0, [r6, #0]
    f4f2:	2800      	cmp	r0, #0
    f4f4:	d1f0      	bne.n	f4d8 <__sfp+0x24>
    f4f6:	230c      	movs	r3, #12
    f4f8:	0004      	movs	r4, r0
    f4fa:	603b      	str	r3, [r7, #0]
    f4fc:	0020      	movs	r0, r4
    f4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f500:	2301      	movs	r3, #1
    f502:	0020      	movs	r0, r4
    f504:	425b      	negs	r3, r3
    f506:	81e3      	strh	r3, [r4, #14]
    f508:	3302      	adds	r3, #2
    f50a:	81a3      	strh	r3, [r4, #12]
    f50c:	6665      	str	r5, [r4, #100]	; 0x64
    f50e:	6025      	str	r5, [r4, #0]
    f510:	60a5      	str	r5, [r4, #8]
    f512:	6065      	str	r5, [r4, #4]
    f514:	6125      	str	r5, [r4, #16]
    f516:	6165      	str	r5, [r4, #20]
    f518:	61a5      	str	r5, [r4, #24]
    f51a:	2208      	movs	r2, #8
    f51c:	0029      	movs	r1, r5
    f51e:	305c      	adds	r0, #92	; 0x5c
    f520:	f7fd fad2 	bl	cac8 <memset>
    f524:	6365      	str	r5, [r4, #52]	; 0x34
    f526:	63a5      	str	r5, [r4, #56]	; 0x38
    f528:	64a5      	str	r5, [r4, #72]	; 0x48
    f52a:	64e5      	str	r5, [r4, #76]	; 0x4c
    f52c:	e7e6      	b.n	f4fc <__sfp+0x48>
    f52e:	46c0      	nop			; (mov r8, r8)
    f530:	0001291c 	.word	0x0001291c

0000f534 <_fwalk_reent>:
    f534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f536:	0004      	movs	r4, r0
    f538:	0007      	movs	r7, r0
    f53a:	2600      	movs	r6, #0
    f53c:	9101      	str	r1, [sp, #4]
    f53e:	3448      	adds	r4, #72	; 0x48
    f540:	2c00      	cmp	r4, #0
    f542:	d101      	bne.n	f548 <_fwalk_reent+0x14>
    f544:	0030      	movs	r0, r6
    f546:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f548:	6863      	ldr	r3, [r4, #4]
    f54a:	68a5      	ldr	r5, [r4, #8]
    f54c:	9300      	str	r3, [sp, #0]
    f54e:	9b00      	ldr	r3, [sp, #0]
    f550:	3b01      	subs	r3, #1
    f552:	9300      	str	r3, [sp, #0]
    f554:	d501      	bpl.n	f55a <_fwalk_reent+0x26>
    f556:	6824      	ldr	r4, [r4, #0]
    f558:	e7f2      	b.n	f540 <_fwalk_reent+0xc>
    f55a:	89ab      	ldrh	r3, [r5, #12]
    f55c:	2b01      	cmp	r3, #1
    f55e:	d908      	bls.n	f572 <_fwalk_reent+0x3e>
    f560:	220e      	movs	r2, #14
    f562:	5eab      	ldrsh	r3, [r5, r2]
    f564:	3301      	adds	r3, #1
    f566:	d004      	beq.n	f572 <_fwalk_reent+0x3e>
    f568:	0029      	movs	r1, r5
    f56a:	0038      	movs	r0, r7
    f56c:	9b01      	ldr	r3, [sp, #4]
    f56e:	4798      	blx	r3
    f570:	4306      	orrs	r6, r0
    f572:	3568      	adds	r5, #104	; 0x68
    f574:	e7eb      	b.n	f54e <_fwalk_reent+0x1a>
	...

0000f578 <_findenv_r>:
    f578:	b5f0      	push	{r4, r5, r6, r7, lr}
    f57a:	000e      	movs	r6, r1
    f57c:	b085      	sub	sp, #20
    f57e:	0007      	movs	r7, r0
    f580:	9203      	str	r2, [sp, #12]
    f582:	f000 fed3 	bl	1032c <__env_lock>
    f586:	4c19      	ldr	r4, [pc, #100]	; (f5ec <_findenv_r+0x74>)
    f588:	0033      	movs	r3, r6
    f58a:	6825      	ldr	r5, [r4, #0]
    f58c:	2d00      	cmp	r5, #0
    f58e:	d106      	bne.n	f59e <_findenv_r+0x26>
    f590:	0038      	movs	r0, r7
    f592:	f000 fecc 	bl	1032e <__env_unlock>
    f596:	2000      	movs	r0, #0
    f598:	b005      	add	sp, #20
    f59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f59c:	3301      	adds	r3, #1
    f59e:	781a      	ldrb	r2, [r3, #0]
    f5a0:	2a00      	cmp	r2, #0
    f5a2:	d01f      	beq.n	f5e4 <_findenv_r+0x6c>
    f5a4:	2a3d      	cmp	r2, #61	; 0x3d
    f5a6:	d1f9      	bne.n	f59c <_findenv_r+0x24>
    f5a8:	e7f2      	b.n	f590 <_findenv_r+0x18>
    f5aa:	3504      	adds	r5, #4
    f5ac:	6828      	ldr	r0, [r5, #0]
    f5ae:	2800      	cmp	r0, #0
    f5b0:	d0ee      	beq.n	f590 <_findenv_r+0x18>
    f5b2:	9a01      	ldr	r2, [sp, #4]
    f5b4:	0031      	movs	r1, r6
    f5b6:	f7fe fbba 	bl	dd2e <strncmp>
    f5ba:	2800      	cmp	r0, #0
    f5bc:	d1f5      	bne.n	f5aa <_findenv_r+0x32>
    f5be:	9a01      	ldr	r2, [sp, #4]
    f5c0:	682b      	ldr	r3, [r5, #0]
    f5c2:	4694      	mov	ip, r2
    f5c4:	4463      	add	r3, ip
    f5c6:	9302      	str	r3, [sp, #8]
    f5c8:	781b      	ldrb	r3, [r3, #0]
    f5ca:	2b3d      	cmp	r3, #61	; 0x3d
    f5cc:	d1ed      	bne.n	f5aa <_findenv_r+0x32>
    f5ce:	6823      	ldr	r3, [r4, #0]
    f5d0:	0038      	movs	r0, r7
    f5d2:	1aed      	subs	r5, r5, r3
    f5d4:	9b03      	ldr	r3, [sp, #12]
    f5d6:	10ad      	asrs	r5, r5, #2
    f5d8:	601d      	str	r5, [r3, #0]
    f5da:	f000 fea8 	bl	1032e <__env_unlock>
    f5de:	9802      	ldr	r0, [sp, #8]
    f5e0:	3001      	adds	r0, #1
    f5e2:	e7d9      	b.n	f598 <_findenv_r+0x20>
    f5e4:	1b9b      	subs	r3, r3, r6
    f5e6:	9301      	str	r3, [sp, #4]
    f5e8:	e7e0      	b.n	f5ac <_findenv_r+0x34>
    f5ea:	46c0      	nop			; (mov r8, r8)
    f5ec:	200002cc 	.word	0x200002cc

0000f5f0 <_getenv_r>:
    f5f0:	b507      	push	{r0, r1, r2, lr}
    f5f2:	aa01      	add	r2, sp, #4
    f5f4:	f7ff ffc0 	bl	f578 <_findenv_r>
    f5f8:	bd0e      	pop	{r1, r2, r3, pc}
	...

0000f5fc <__gettzinfo>:
    f5fc:	4800      	ldr	r0, [pc, #0]	; (f600 <__gettzinfo+0x4>)
    f5fe:	4770      	bx	lr
    f600:	2000028c 	.word	0x2000028c

0000f604 <_localeconv_r>:
    f604:	4b03      	ldr	r3, [pc, #12]	; (f614 <_localeconv_r+0x10>)
    f606:	681b      	ldr	r3, [r3, #0]
    f608:	6a18      	ldr	r0, [r3, #32]
    f60a:	2800      	cmp	r0, #0
    f60c:	d100      	bne.n	f610 <_localeconv_r+0xc>
    f60e:	4802      	ldr	r0, [pc, #8]	; (f618 <_localeconv_r+0x14>)
    f610:	30f0      	adds	r0, #240	; 0xf0
    f612:	4770      	bx	lr
    f614:	200000b4 	.word	0x200000b4
    f618:	20000118 	.word	0x20000118

0000f61c <__swhatbuf_r>:
    f61c:	b570      	push	{r4, r5, r6, lr}
    f61e:	000e      	movs	r6, r1
    f620:	001d      	movs	r5, r3
    f622:	230e      	movs	r3, #14
    f624:	5ec9      	ldrsh	r1, [r1, r3]
    f626:	b090      	sub	sp, #64	; 0x40
    f628:	0014      	movs	r4, r2
    f62a:	2900      	cmp	r1, #0
    f62c:	da07      	bge.n	f63e <__swhatbuf_r+0x22>
    f62e:	2300      	movs	r3, #0
    f630:	602b      	str	r3, [r5, #0]
    f632:	89b3      	ldrh	r3, [r6, #12]
    f634:	061b      	lsls	r3, r3, #24
    f636:	d411      	bmi.n	f65c <__swhatbuf_r+0x40>
    f638:	2380      	movs	r3, #128	; 0x80
    f63a:	00db      	lsls	r3, r3, #3
    f63c:	e00f      	b.n	f65e <__swhatbuf_r+0x42>
    f63e:	aa01      	add	r2, sp, #4
    f640:	f000 fe76 	bl	10330 <_fstat_r>
    f644:	2800      	cmp	r0, #0
    f646:	dbf2      	blt.n	f62e <__swhatbuf_r+0x12>
    f648:	22f0      	movs	r2, #240	; 0xf0
    f64a:	9b02      	ldr	r3, [sp, #8]
    f64c:	0212      	lsls	r2, r2, #8
    f64e:	4013      	ands	r3, r2
    f650:	4a05      	ldr	r2, [pc, #20]	; (f668 <__swhatbuf_r+0x4c>)
    f652:	189b      	adds	r3, r3, r2
    f654:	425a      	negs	r2, r3
    f656:	4153      	adcs	r3, r2
    f658:	602b      	str	r3, [r5, #0]
    f65a:	e7ed      	b.n	f638 <__swhatbuf_r+0x1c>
    f65c:	2340      	movs	r3, #64	; 0x40
    f65e:	2000      	movs	r0, #0
    f660:	6023      	str	r3, [r4, #0]
    f662:	b010      	add	sp, #64	; 0x40
    f664:	bd70      	pop	{r4, r5, r6, pc}
    f666:	46c0      	nop			; (mov r8, r8)
    f668:	ffffe000 	.word	0xffffe000

0000f66c <__smakebuf_r>:
    f66c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f66e:	2602      	movs	r6, #2
    f670:	898b      	ldrh	r3, [r1, #12]
    f672:	0005      	movs	r5, r0
    f674:	000c      	movs	r4, r1
    f676:	4233      	tst	r3, r6
    f678:	d006      	beq.n	f688 <__smakebuf_r+0x1c>
    f67a:	0023      	movs	r3, r4
    f67c:	3347      	adds	r3, #71	; 0x47
    f67e:	6023      	str	r3, [r4, #0]
    f680:	6123      	str	r3, [r4, #16]
    f682:	2301      	movs	r3, #1
    f684:	6163      	str	r3, [r4, #20]
    f686:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    f688:	ab01      	add	r3, sp, #4
    f68a:	466a      	mov	r2, sp
    f68c:	f7ff ffc6 	bl	f61c <__swhatbuf_r>
    f690:	9900      	ldr	r1, [sp, #0]
    f692:	0007      	movs	r7, r0
    f694:	0028      	movs	r0, r5
    f696:	f7fd fcbf 	bl	d018 <_malloc_r>
    f69a:	2800      	cmp	r0, #0
    f69c:	d108      	bne.n	f6b0 <__smakebuf_r+0x44>
    f69e:	220c      	movs	r2, #12
    f6a0:	5ea3      	ldrsh	r3, [r4, r2]
    f6a2:	059a      	lsls	r2, r3, #22
    f6a4:	d4ef      	bmi.n	f686 <__smakebuf_r+0x1a>
    f6a6:	2203      	movs	r2, #3
    f6a8:	4393      	bics	r3, r2
    f6aa:	431e      	orrs	r6, r3
    f6ac:	81a6      	strh	r6, [r4, #12]
    f6ae:	e7e4      	b.n	f67a <__smakebuf_r+0xe>
    f6b0:	4b0f      	ldr	r3, [pc, #60]	; (f6f0 <__smakebuf_r+0x84>)
    f6b2:	62ab      	str	r3, [r5, #40]	; 0x28
    f6b4:	2380      	movs	r3, #128	; 0x80
    f6b6:	89a2      	ldrh	r2, [r4, #12]
    f6b8:	6020      	str	r0, [r4, #0]
    f6ba:	4313      	orrs	r3, r2
    f6bc:	81a3      	strh	r3, [r4, #12]
    f6be:	9b00      	ldr	r3, [sp, #0]
    f6c0:	6120      	str	r0, [r4, #16]
    f6c2:	6163      	str	r3, [r4, #20]
    f6c4:	9b01      	ldr	r3, [sp, #4]
    f6c6:	2b00      	cmp	r3, #0
    f6c8:	d00d      	beq.n	f6e6 <__smakebuf_r+0x7a>
    f6ca:	230e      	movs	r3, #14
    f6cc:	5ee1      	ldrsh	r1, [r4, r3]
    f6ce:	0028      	movs	r0, r5
    f6d0:	f000 fe40 	bl	10354 <_isatty_r>
    f6d4:	2800      	cmp	r0, #0
    f6d6:	d006      	beq.n	f6e6 <__smakebuf_r+0x7a>
    f6d8:	2203      	movs	r2, #3
    f6da:	89a3      	ldrh	r3, [r4, #12]
    f6dc:	4393      	bics	r3, r2
    f6de:	001a      	movs	r2, r3
    f6e0:	2301      	movs	r3, #1
    f6e2:	4313      	orrs	r3, r2
    f6e4:	81a3      	strh	r3, [r4, #12]
    f6e6:	89a0      	ldrh	r0, [r4, #12]
    f6e8:	4338      	orrs	r0, r7
    f6ea:	81a0      	strh	r0, [r4, #12]
    f6ec:	e7cb      	b.n	f686 <__smakebuf_r+0x1a>
    f6ee:	46c0      	nop			; (mov r8, r8)
    f6f0:	0000f3c9 	.word	0x0000f3c9

0000f6f4 <memchr>:
    f6f4:	b2c9      	uxtb	r1, r1
    f6f6:	1882      	adds	r2, r0, r2
    f6f8:	4290      	cmp	r0, r2
    f6fa:	d101      	bne.n	f700 <memchr+0xc>
    f6fc:	2000      	movs	r0, #0
    f6fe:	4770      	bx	lr
    f700:	7803      	ldrb	r3, [r0, #0]
    f702:	428b      	cmp	r3, r1
    f704:	d0fb      	beq.n	f6fe <memchr+0xa>
    f706:	3001      	adds	r0, #1
    f708:	e7f6      	b.n	f6f8 <memchr+0x4>

0000f70a <__malloc_lock>:
    f70a:	4770      	bx	lr

0000f70c <__malloc_unlock>:
    f70c:	4770      	bx	lr

0000f70e <_Balloc>:
    f70e:	b570      	push	{r4, r5, r6, lr}
    f710:	6a46      	ldr	r6, [r0, #36]	; 0x24
    f712:	0004      	movs	r4, r0
    f714:	000d      	movs	r5, r1
    f716:	2e00      	cmp	r6, #0
    f718:	d107      	bne.n	f72a <_Balloc+0x1c>
    f71a:	2010      	movs	r0, #16
    f71c:	f7fd f984 	bl	ca28 <malloc>
    f720:	6260      	str	r0, [r4, #36]	; 0x24
    f722:	6046      	str	r6, [r0, #4]
    f724:	6086      	str	r6, [r0, #8]
    f726:	6006      	str	r6, [r0, #0]
    f728:	60c6      	str	r6, [r0, #12]
    f72a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    f72c:	68f3      	ldr	r3, [r6, #12]
    f72e:	2b00      	cmp	r3, #0
    f730:	d013      	beq.n	f75a <_Balloc+0x4c>
    f732:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f734:	00aa      	lsls	r2, r5, #2
    f736:	68db      	ldr	r3, [r3, #12]
    f738:	189b      	adds	r3, r3, r2
    f73a:	6818      	ldr	r0, [r3, #0]
    f73c:	2800      	cmp	r0, #0
    f73e:	d118      	bne.n	f772 <_Balloc+0x64>
    f740:	2101      	movs	r1, #1
    f742:	000e      	movs	r6, r1
    f744:	40ae      	lsls	r6, r5
    f746:	1d72      	adds	r2, r6, #5
    f748:	0092      	lsls	r2, r2, #2
    f74a:	0020      	movs	r0, r4
    f74c:	f000 fac2 	bl	fcd4 <_calloc_r>
    f750:	2800      	cmp	r0, #0
    f752:	d00c      	beq.n	f76e <_Balloc+0x60>
    f754:	6045      	str	r5, [r0, #4]
    f756:	6086      	str	r6, [r0, #8]
    f758:	e00d      	b.n	f776 <_Balloc+0x68>
    f75a:	2221      	movs	r2, #33	; 0x21
    f75c:	2104      	movs	r1, #4
    f75e:	0020      	movs	r0, r4
    f760:	f000 fab8 	bl	fcd4 <_calloc_r>
    f764:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f766:	60f0      	str	r0, [r6, #12]
    f768:	68db      	ldr	r3, [r3, #12]
    f76a:	2b00      	cmp	r3, #0
    f76c:	d1e1      	bne.n	f732 <_Balloc+0x24>
    f76e:	2000      	movs	r0, #0
    f770:	bd70      	pop	{r4, r5, r6, pc}
    f772:	6802      	ldr	r2, [r0, #0]
    f774:	601a      	str	r2, [r3, #0]
    f776:	2300      	movs	r3, #0
    f778:	6103      	str	r3, [r0, #16]
    f77a:	60c3      	str	r3, [r0, #12]
    f77c:	e7f8      	b.n	f770 <_Balloc+0x62>

0000f77e <_Bfree>:
    f77e:	b570      	push	{r4, r5, r6, lr}
    f780:	6a44      	ldr	r4, [r0, #36]	; 0x24
    f782:	0006      	movs	r6, r0
    f784:	000d      	movs	r5, r1
    f786:	2c00      	cmp	r4, #0
    f788:	d107      	bne.n	f79a <_Bfree+0x1c>
    f78a:	2010      	movs	r0, #16
    f78c:	f7fd f94c 	bl	ca28 <malloc>
    f790:	6270      	str	r0, [r6, #36]	; 0x24
    f792:	6044      	str	r4, [r0, #4]
    f794:	6084      	str	r4, [r0, #8]
    f796:	6004      	str	r4, [r0, #0]
    f798:	60c4      	str	r4, [r0, #12]
    f79a:	2d00      	cmp	r5, #0
    f79c:	d007      	beq.n	f7ae <_Bfree+0x30>
    f79e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    f7a0:	686a      	ldr	r2, [r5, #4]
    f7a2:	68db      	ldr	r3, [r3, #12]
    f7a4:	0092      	lsls	r2, r2, #2
    f7a6:	189b      	adds	r3, r3, r2
    f7a8:	681a      	ldr	r2, [r3, #0]
    f7aa:	602a      	str	r2, [r5, #0]
    f7ac:	601d      	str	r5, [r3, #0]
    f7ae:	bd70      	pop	{r4, r5, r6, pc}

0000f7b0 <__multadd>:
    f7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f7b2:	001e      	movs	r6, r3
    f7b4:	2314      	movs	r3, #20
    f7b6:	469c      	mov	ip, r3
    f7b8:	0007      	movs	r7, r0
    f7ba:	000c      	movs	r4, r1
    f7bc:	2000      	movs	r0, #0
    f7be:	690d      	ldr	r5, [r1, #16]
    f7c0:	448c      	add	ip, r1
    f7c2:	4663      	mov	r3, ip
    f7c4:	8819      	ldrh	r1, [r3, #0]
    f7c6:	681b      	ldr	r3, [r3, #0]
    f7c8:	4351      	muls	r1, r2
    f7ca:	0c1b      	lsrs	r3, r3, #16
    f7cc:	4353      	muls	r3, r2
    f7ce:	1989      	adds	r1, r1, r6
    f7d0:	0c0e      	lsrs	r6, r1, #16
    f7d2:	199b      	adds	r3, r3, r6
    f7d4:	b289      	uxth	r1, r1
    f7d6:	0c1e      	lsrs	r6, r3, #16
    f7d8:	041b      	lsls	r3, r3, #16
    f7da:	185b      	adds	r3, r3, r1
    f7dc:	4661      	mov	r1, ip
    f7de:	3001      	adds	r0, #1
    f7e0:	c108      	stmia	r1!, {r3}
    f7e2:	468c      	mov	ip, r1
    f7e4:	4285      	cmp	r5, r0
    f7e6:	dcec      	bgt.n	f7c2 <__multadd+0x12>
    f7e8:	2e00      	cmp	r6, #0
    f7ea:	d01b      	beq.n	f824 <__multadd+0x74>
    f7ec:	68a3      	ldr	r3, [r4, #8]
    f7ee:	429d      	cmp	r5, r3
    f7f0:	db12      	blt.n	f818 <__multadd+0x68>
    f7f2:	6863      	ldr	r3, [r4, #4]
    f7f4:	0038      	movs	r0, r7
    f7f6:	1c59      	adds	r1, r3, #1
    f7f8:	f7ff ff89 	bl	f70e <_Balloc>
    f7fc:	0021      	movs	r1, r4
    f7fe:	6923      	ldr	r3, [r4, #16]
    f800:	9001      	str	r0, [sp, #4]
    f802:	1c9a      	adds	r2, r3, #2
    f804:	0092      	lsls	r2, r2, #2
    f806:	310c      	adds	r1, #12
    f808:	300c      	adds	r0, #12
    f80a:	f7fd f942 	bl	ca92 <memcpy>
    f80e:	0021      	movs	r1, r4
    f810:	0038      	movs	r0, r7
    f812:	f7ff ffb4 	bl	f77e <_Bfree>
    f816:	9c01      	ldr	r4, [sp, #4]
    f818:	1d2b      	adds	r3, r5, #4
    f81a:	009b      	lsls	r3, r3, #2
    f81c:	18e3      	adds	r3, r4, r3
    f81e:	3501      	adds	r5, #1
    f820:	605e      	str	r6, [r3, #4]
    f822:	6125      	str	r5, [r4, #16]
    f824:	0020      	movs	r0, r4
    f826:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f828 <__hi0bits>:
    f828:	0003      	movs	r3, r0
    f82a:	0c02      	lsrs	r2, r0, #16
    f82c:	2000      	movs	r0, #0
    f82e:	4282      	cmp	r2, r0
    f830:	d101      	bne.n	f836 <__hi0bits+0xe>
    f832:	041b      	lsls	r3, r3, #16
    f834:	3010      	adds	r0, #16
    f836:	0e1a      	lsrs	r2, r3, #24
    f838:	d101      	bne.n	f83e <__hi0bits+0x16>
    f83a:	3008      	adds	r0, #8
    f83c:	021b      	lsls	r3, r3, #8
    f83e:	0f1a      	lsrs	r2, r3, #28
    f840:	d101      	bne.n	f846 <__hi0bits+0x1e>
    f842:	3004      	adds	r0, #4
    f844:	011b      	lsls	r3, r3, #4
    f846:	0f9a      	lsrs	r2, r3, #30
    f848:	d101      	bne.n	f84e <__hi0bits+0x26>
    f84a:	3002      	adds	r0, #2
    f84c:	009b      	lsls	r3, r3, #2
    f84e:	2b00      	cmp	r3, #0
    f850:	db03      	blt.n	f85a <__hi0bits+0x32>
    f852:	3001      	adds	r0, #1
    f854:	005b      	lsls	r3, r3, #1
    f856:	d400      	bmi.n	f85a <__hi0bits+0x32>
    f858:	2020      	movs	r0, #32
    f85a:	4770      	bx	lr

0000f85c <__lo0bits>:
    f85c:	2207      	movs	r2, #7
    f85e:	6803      	ldr	r3, [r0, #0]
    f860:	b510      	push	{r4, lr}
    f862:	0001      	movs	r1, r0
    f864:	401a      	ands	r2, r3
    f866:	d00d      	beq.n	f884 <__lo0bits+0x28>
    f868:	2401      	movs	r4, #1
    f86a:	2000      	movs	r0, #0
    f86c:	4223      	tst	r3, r4
    f86e:	d105      	bne.n	f87c <__lo0bits+0x20>
    f870:	3002      	adds	r0, #2
    f872:	4203      	tst	r3, r0
    f874:	d003      	beq.n	f87e <__lo0bits+0x22>
    f876:	40e3      	lsrs	r3, r4
    f878:	0020      	movs	r0, r4
    f87a:	600b      	str	r3, [r1, #0]
    f87c:	bd10      	pop	{r4, pc}
    f87e:	089b      	lsrs	r3, r3, #2
    f880:	600b      	str	r3, [r1, #0]
    f882:	e7fb      	b.n	f87c <__lo0bits+0x20>
    f884:	b29c      	uxth	r4, r3
    f886:	0010      	movs	r0, r2
    f888:	2c00      	cmp	r4, #0
    f88a:	d101      	bne.n	f890 <__lo0bits+0x34>
    f88c:	2010      	movs	r0, #16
    f88e:	0c1b      	lsrs	r3, r3, #16
    f890:	b2da      	uxtb	r2, r3
    f892:	2a00      	cmp	r2, #0
    f894:	d101      	bne.n	f89a <__lo0bits+0x3e>
    f896:	3008      	adds	r0, #8
    f898:	0a1b      	lsrs	r3, r3, #8
    f89a:	071a      	lsls	r2, r3, #28
    f89c:	d101      	bne.n	f8a2 <__lo0bits+0x46>
    f89e:	3004      	adds	r0, #4
    f8a0:	091b      	lsrs	r3, r3, #4
    f8a2:	079a      	lsls	r2, r3, #30
    f8a4:	d101      	bne.n	f8aa <__lo0bits+0x4e>
    f8a6:	3002      	adds	r0, #2
    f8a8:	089b      	lsrs	r3, r3, #2
    f8aa:	07da      	lsls	r2, r3, #31
    f8ac:	d4e8      	bmi.n	f880 <__lo0bits+0x24>
    f8ae:	085b      	lsrs	r3, r3, #1
    f8b0:	d001      	beq.n	f8b6 <__lo0bits+0x5a>
    f8b2:	3001      	adds	r0, #1
    f8b4:	e7e4      	b.n	f880 <__lo0bits+0x24>
    f8b6:	2020      	movs	r0, #32
    f8b8:	e7e0      	b.n	f87c <__lo0bits+0x20>

0000f8ba <__i2b>:
    f8ba:	b510      	push	{r4, lr}
    f8bc:	000c      	movs	r4, r1
    f8be:	2101      	movs	r1, #1
    f8c0:	f7ff ff25 	bl	f70e <_Balloc>
    f8c4:	2301      	movs	r3, #1
    f8c6:	6144      	str	r4, [r0, #20]
    f8c8:	6103      	str	r3, [r0, #16]
    f8ca:	bd10      	pop	{r4, pc}

0000f8cc <__multiply>:
    f8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8ce:	690b      	ldr	r3, [r1, #16]
    f8d0:	0015      	movs	r5, r2
    f8d2:	6912      	ldr	r2, [r2, #16]
    f8d4:	b089      	sub	sp, #36	; 0x24
    f8d6:	000c      	movs	r4, r1
    f8d8:	4293      	cmp	r3, r2
    f8da:	da01      	bge.n	f8e0 <__multiply+0x14>
    f8dc:	002c      	movs	r4, r5
    f8de:	000d      	movs	r5, r1
    f8e0:	6927      	ldr	r7, [r4, #16]
    f8e2:	692e      	ldr	r6, [r5, #16]
    f8e4:	68a2      	ldr	r2, [r4, #8]
    f8e6:	19bb      	adds	r3, r7, r6
    f8e8:	6861      	ldr	r1, [r4, #4]
    f8ea:	9301      	str	r3, [sp, #4]
    f8ec:	4293      	cmp	r3, r2
    f8ee:	dd00      	ble.n	f8f2 <__multiply+0x26>
    f8f0:	3101      	adds	r1, #1
    f8f2:	f7ff ff0c 	bl	f70e <_Balloc>
    f8f6:	0003      	movs	r3, r0
    f8f8:	3314      	adds	r3, #20
    f8fa:	9300      	str	r3, [sp, #0]
    f8fc:	9a00      	ldr	r2, [sp, #0]
    f8fe:	19bb      	adds	r3, r7, r6
    f900:	4694      	mov	ip, r2
    f902:	009b      	lsls	r3, r3, #2
    f904:	449c      	add	ip, r3
    f906:	0013      	movs	r3, r2
    f908:	2200      	movs	r2, #0
    f90a:	9004      	str	r0, [sp, #16]
    f90c:	4563      	cmp	r3, ip
    f90e:	d31c      	bcc.n	f94a <__multiply+0x7e>
    f910:	002a      	movs	r2, r5
    f912:	3414      	adds	r4, #20
    f914:	00bf      	lsls	r7, r7, #2
    f916:	19e3      	adds	r3, r4, r7
    f918:	3214      	adds	r2, #20
    f91a:	00b6      	lsls	r6, r6, #2
    f91c:	9305      	str	r3, [sp, #20]
    f91e:	1993      	adds	r3, r2, r6
    f920:	9402      	str	r4, [sp, #8]
    f922:	9306      	str	r3, [sp, #24]
    f924:	9b06      	ldr	r3, [sp, #24]
    f926:	429a      	cmp	r2, r3
    f928:	d311      	bcc.n	f94e <__multiply+0x82>
    f92a:	9b01      	ldr	r3, [sp, #4]
    f92c:	2b00      	cmp	r3, #0
    f92e:	dd06      	ble.n	f93e <__multiply+0x72>
    f930:	2304      	movs	r3, #4
    f932:	425b      	negs	r3, r3
    f934:	449c      	add	ip, r3
    f936:	4663      	mov	r3, ip
    f938:	681b      	ldr	r3, [r3, #0]
    f93a:	2b00      	cmp	r3, #0
    f93c:	d051      	beq.n	f9e2 <__multiply+0x116>
    f93e:	9b04      	ldr	r3, [sp, #16]
    f940:	9a01      	ldr	r2, [sp, #4]
    f942:	0018      	movs	r0, r3
    f944:	611a      	str	r2, [r3, #16]
    f946:	b009      	add	sp, #36	; 0x24
    f948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f94a:	c304      	stmia	r3!, {r2}
    f94c:	e7de      	b.n	f90c <__multiply+0x40>
    f94e:	8814      	ldrh	r4, [r2, #0]
    f950:	2c00      	cmp	r4, #0
    f952:	d01e      	beq.n	f992 <__multiply+0xc6>
    f954:	2600      	movs	r6, #0
    f956:	9d00      	ldr	r5, [sp, #0]
    f958:	9f02      	ldr	r7, [sp, #8]
    f95a:	cf01      	ldmia	r7!, {r0}
    f95c:	9507      	str	r5, [sp, #28]
    f95e:	cd08      	ldmia	r5!, {r3}
    f960:	9303      	str	r3, [sp, #12]
    f962:	b283      	uxth	r3, r0
    f964:	4363      	muls	r3, r4
    f966:	0019      	movs	r1, r3
    f968:	466b      	mov	r3, sp
    f96a:	0c00      	lsrs	r0, r0, #16
    f96c:	899b      	ldrh	r3, [r3, #12]
    f96e:	4360      	muls	r0, r4
    f970:	18cb      	adds	r3, r1, r3
    f972:	9903      	ldr	r1, [sp, #12]
    f974:	199b      	adds	r3, r3, r6
    f976:	0c09      	lsrs	r1, r1, #16
    f978:	1841      	adds	r1, r0, r1
    f97a:	0c18      	lsrs	r0, r3, #16
    f97c:	1809      	adds	r1, r1, r0
    f97e:	0c0e      	lsrs	r6, r1, #16
    f980:	b29b      	uxth	r3, r3
    f982:	0409      	lsls	r1, r1, #16
    f984:	430b      	orrs	r3, r1
    f986:	9907      	ldr	r1, [sp, #28]
    f988:	600b      	str	r3, [r1, #0]
    f98a:	9b05      	ldr	r3, [sp, #20]
    f98c:	42bb      	cmp	r3, r7
    f98e:	d8e4      	bhi.n	f95a <__multiply+0x8e>
    f990:	602e      	str	r6, [r5, #0]
    f992:	6813      	ldr	r3, [r2, #0]
    f994:	0c1b      	lsrs	r3, r3, #16
    f996:	9303      	str	r3, [sp, #12]
    f998:	d01e      	beq.n	f9d8 <__multiply+0x10c>
    f99a:	2600      	movs	r6, #0
    f99c:	9b00      	ldr	r3, [sp, #0]
    f99e:	9c02      	ldr	r4, [sp, #8]
    f9a0:	681b      	ldr	r3, [r3, #0]
    f9a2:	9800      	ldr	r0, [sp, #0]
    f9a4:	0007      	movs	r7, r0
    f9a6:	8821      	ldrh	r1, [r4, #0]
    f9a8:	9d03      	ldr	r5, [sp, #12]
    f9aa:	b29b      	uxth	r3, r3
    f9ac:	4369      	muls	r1, r5
    f9ae:	c820      	ldmia	r0!, {r5}
    f9b0:	0c2d      	lsrs	r5, r5, #16
    f9b2:	1949      	adds	r1, r1, r5
    f9b4:	198e      	adds	r6, r1, r6
    f9b6:	0431      	lsls	r1, r6, #16
    f9b8:	430b      	orrs	r3, r1
    f9ba:	603b      	str	r3, [r7, #0]
    f9bc:	cc08      	ldmia	r4!, {r3}
    f9be:	9903      	ldr	r1, [sp, #12]
    f9c0:	0c1b      	lsrs	r3, r3, #16
    f9c2:	434b      	muls	r3, r1
    f9c4:	6879      	ldr	r1, [r7, #4]
    f9c6:	0c36      	lsrs	r6, r6, #16
    f9c8:	b289      	uxth	r1, r1
    f9ca:	185b      	adds	r3, r3, r1
    f9cc:	9905      	ldr	r1, [sp, #20]
    f9ce:	199b      	adds	r3, r3, r6
    f9d0:	0c1e      	lsrs	r6, r3, #16
    f9d2:	42a1      	cmp	r1, r4
    f9d4:	d8e6      	bhi.n	f9a4 <__multiply+0xd8>
    f9d6:	6003      	str	r3, [r0, #0]
    f9d8:	9b00      	ldr	r3, [sp, #0]
    f9da:	3204      	adds	r2, #4
    f9dc:	3304      	adds	r3, #4
    f9de:	9300      	str	r3, [sp, #0]
    f9e0:	e7a0      	b.n	f924 <__multiply+0x58>
    f9e2:	9b01      	ldr	r3, [sp, #4]
    f9e4:	3b01      	subs	r3, #1
    f9e6:	9301      	str	r3, [sp, #4]
    f9e8:	e79f      	b.n	f92a <__multiply+0x5e>
	...

0000f9ec <__pow5mult>:
    f9ec:	2303      	movs	r3, #3
    f9ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f9f0:	4013      	ands	r3, r2
    f9f2:	0005      	movs	r5, r0
    f9f4:	000e      	movs	r6, r1
    f9f6:	0014      	movs	r4, r2
    f9f8:	2b00      	cmp	r3, #0
    f9fa:	d008      	beq.n	fa0e <__pow5mult+0x22>
    f9fc:	4922      	ldr	r1, [pc, #136]	; (fa88 <__pow5mult+0x9c>)
    f9fe:	3b01      	subs	r3, #1
    fa00:	009a      	lsls	r2, r3, #2
    fa02:	5852      	ldr	r2, [r2, r1]
    fa04:	2300      	movs	r3, #0
    fa06:	0031      	movs	r1, r6
    fa08:	f7ff fed2 	bl	f7b0 <__multadd>
    fa0c:	0006      	movs	r6, r0
    fa0e:	10a3      	asrs	r3, r4, #2
    fa10:	9301      	str	r3, [sp, #4]
    fa12:	d036      	beq.n	fa82 <__pow5mult+0x96>
    fa14:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    fa16:	2c00      	cmp	r4, #0
    fa18:	d107      	bne.n	fa2a <__pow5mult+0x3e>
    fa1a:	2010      	movs	r0, #16
    fa1c:	f7fd f804 	bl	ca28 <malloc>
    fa20:	6268      	str	r0, [r5, #36]	; 0x24
    fa22:	6044      	str	r4, [r0, #4]
    fa24:	6084      	str	r4, [r0, #8]
    fa26:	6004      	str	r4, [r0, #0]
    fa28:	60c4      	str	r4, [r0, #12]
    fa2a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    fa2c:	68bc      	ldr	r4, [r7, #8]
    fa2e:	2c00      	cmp	r4, #0
    fa30:	d107      	bne.n	fa42 <__pow5mult+0x56>
    fa32:	4916      	ldr	r1, [pc, #88]	; (fa8c <__pow5mult+0xa0>)
    fa34:	0028      	movs	r0, r5
    fa36:	f7ff ff40 	bl	f8ba <__i2b>
    fa3a:	2300      	movs	r3, #0
    fa3c:	0004      	movs	r4, r0
    fa3e:	60b8      	str	r0, [r7, #8]
    fa40:	6003      	str	r3, [r0, #0]
    fa42:	2201      	movs	r2, #1
    fa44:	9b01      	ldr	r3, [sp, #4]
    fa46:	4213      	tst	r3, r2
    fa48:	d00a      	beq.n	fa60 <__pow5mult+0x74>
    fa4a:	0031      	movs	r1, r6
    fa4c:	0022      	movs	r2, r4
    fa4e:	0028      	movs	r0, r5
    fa50:	f7ff ff3c 	bl	f8cc <__multiply>
    fa54:	0007      	movs	r7, r0
    fa56:	0031      	movs	r1, r6
    fa58:	0028      	movs	r0, r5
    fa5a:	f7ff fe90 	bl	f77e <_Bfree>
    fa5e:	003e      	movs	r6, r7
    fa60:	9b01      	ldr	r3, [sp, #4]
    fa62:	105b      	asrs	r3, r3, #1
    fa64:	9301      	str	r3, [sp, #4]
    fa66:	d00c      	beq.n	fa82 <__pow5mult+0x96>
    fa68:	6820      	ldr	r0, [r4, #0]
    fa6a:	2800      	cmp	r0, #0
    fa6c:	d107      	bne.n	fa7e <__pow5mult+0x92>
    fa6e:	0022      	movs	r2, r4
    fa70:	0021      	movs	r1, r4
    fa72:	0028      	movs	r0, r5
    fa74:	f7ff ff2a 	bl	f8cc <__multiply>
    fa78:	2300      	movs	r3, #0
    fa7a:	6020      	str	r0, [r4, #0]
    fa7c:	6003      	str	r3, [r0, #0]
    fa7e:	0004      	movs	r4, r0
    fa80:	e7df      	b.n	fa42 <__pow5mult+0x56>
    fa82:	0030      	movs	r0, r6
    fa84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fa86:	46c0      	nop			; (mov r8, r8)
    fa88:	00012cc8 	.word	0x00012cc8
    fa8c:	00000271 	.word	0x00000271

0000fa90 <__lshift>:
    fa90:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa92:	000d      	movs	r5, r1
    fa94:	0017      	movs	r7, r2
    fa96:	692b      	ldr	r3, [r5, #16]
    fa98:	1154      	asrs	r4, r2, #5
    fa9a:	b085      	sub	sp, #20
    fa9c:	18e3      	adds	r3, r4, r3
    fa9e:	9302      	str	r3, [sp, #8]
    faa0:	3301      	adds	r3, #1
    faa2:	9301      	str	r3, [sp, #4]
    faa4:	6849      	ldr	r1, [r1, #4]
    faa6:	68ab      	ldr	r3, [r5, #8]
    faa8:	9003      	str	r0, [sp, #12]
    faaa:	9a01      	ldr	r2, [sp, #4]
    faac:	4293      	cmp	r3, r2
    faae:	db34      	blt.n	fb1a <__lshift+0x8a>
    fab0:	9803      	ldr	r0, [sp, #12]
    fab2:	f7ff fe2c 	bl	f70e <_Balloc>
    fab6:	2300      	movs	r3, #0
    fab8:	0002      	movs	r2, r0
    faba:	0006      	movs	r6, r0
    fabc:	0019      	movs	r1, r3
    fabe:	3214      	adds	r2, #20
    fac0:	42a3      	cmp	r3, r4
    fac2:	db2d      	blt.n	fb20 <__lshift+0x90>
    fac4:	43e3      	mvns	r3, r4
    fac6:	17db      	asrs	r3, r3, #31
    fac8:	401c      	ands	r4, r3
    faca:	002b      	movs	r3, r5
    facc:	211f      	movs	r1, #31
    face:	00a4      	lsls	r4, r4, #2
    fad0:	1914      	adds	r4, r2, r4
    fad2:	692a      	ldr	r2, [r5, #16]
    fad4:	3314      	adds	r3, #20
    fad6:	0092      	lsls	r2, r2, #2
    fad8:	189a      	adds	r2, r3, r2
    fada:	400f      	ands	r7, r1
    fadc:	d024      	beq.n	fb28 <__lshift+0x98>
    fade:	3101      	adds	r1, #1
    fae0:	1bc9      	subs	r1, r1, r7
    fae2:	468c      	mov	ip, r1
    fae4:	2100      	movs	r1, #0
    fae6:	6818      	ldr	r0, [r3, #0]
    fae8:	40b8      	lsls	r0, r7
    faea:	4301      	orrs	r1, r0
    faec:	4660      	mov	r0, ip
    faee:	6021      	str	r1, [r4, #0]
    faf0:	cb02      	ldmia	r3!, {r1}
    faf2:	3404      	adds	r4, #4
    faf4:	40c1      	lsrs	r1, r0
    faf6:	429a      	cmp	r2, r3
    faf8:	d8f5      	bhi.n	fae6 <__lshift+0x56>
    fafa:	6021      	str	r1, [r4, #0]
    fafc:	2900      	cmp	r1, #0
    fafe:	d002      	beq.n	fb06 <__lshift+0x76>
    fb00:	9b02      	ldr	r3, [sp, #8]
    fb02:	3302      	adds	r3, #2
    fb04:	9301      	str	r3, [sp, #4]
    fb06:	9b01      	ldr	r3, [sp, #4]
    fb08:	9803      	ldr	r0, [sp, #12]
    fb0a:	3b01      	subs	r3, #1
    fb0c:	6133      	str	r3, [r6, #16]
    fb0e:	0029      	movs	r1, r5
    fb10:	f7ff fe35 	bl	f77e <_Bfree>
    fb14:	0030      	movs	r0, r6
    fb16:	b005      	add	sp, #20
    fb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb1a:	3101      	adds	r1, #1
    fb1c:	005b      	lsls	r3, r3, #1
    fb1e:	e7c4      	b.n	faaa <__lshift+0x1a>
    fb20:	0098      	lsls	r0, r3, #2
    fb22:	5011      	str	r1, [r2, r0]
    fb24:	3301      	adds	r3, #1
    fb26:	e7cb      	b.n	fac0 <__lshift+0x30>
    fb28:	cb02      	ldmia	r3!, {r1}
    fb2a:	c402      	stmia	r4!, {r1}
    fb2c:	429a      	cmp	r2, r3
    fb2e:	d8fb      	bhi.n	fb28 <__lshift+0x98>
    fb30:	e7e9      	b.n	fb06 <__lshift+0x76>

0000fb32 <__mcmp>:
    fb32:	690a      	ldr	r2, [r1, #16]
    fb34:	6903      	ldr	r3, [r0, #16]
    fb36:	b530      	push	{r4, r5, lr}
    fb38:	1a9b      	subs	r3, r3, r2
    fb3a:	d10e      	bne.n	fb5a <__mcmp+0x28>
    fb3c:	0092      	lsls	r2, r2, #2
    fb3e:	3014      	adds	r0, #20
    fb40:	3114      	adds	r1, #20
    fb42:	1884      	adds	r4, r0, r2
    fb44:	1889      	adds	r1, r1, r2
    fb46:	3c04      	subs	r4, #4
    fb48:	3904      	subs	r1, #4
    fb4a:	6822      	ldr	r2, [r4, #0]
    fb4c:	680d      	ldr	r5, [r1, #0]
    fb4e:	42aa      	cmp	r2, r5
    fb50:	d005      	beq.n	fb5e <__mcmp+0x2c>
    fb52:	42aa      	cmp	r2, r5
    fb54:	4192      	sbcs	r2, r2
    fb56:	2301      	movs	r3, #1
    fb58:	4313      	orrs	r3, r2
    fb5a:	0018      	movs	r0, r3
    fb5c:	bd30      	pop	{r4, r5, pc}
    fb5e:	42a0      	cmp	r0, r4
    fb60:	d3f1      	bcc.n	fb46 <__mcmp+0x14>
    fb62:	e7fa      	b.n	fb5a <__mcmp+0x28>

0000fb64 <__mdiff>:
    fb64:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb66:	000d      	movs	r5, r1
    fb68:	b085      	sub	sp, #20
    fb6a:	0007      	movs	r7, r0
    fb6c:	0011      	movs	r1, r2
    fb6e:	0028      	movs	r0, r5
    fb70:	0014      	movs	r4, r2
    fb72:	f7ff ffde 	bl	fb32 <__mcmp>
    fb76:	1e06      	subs	r6, r0, #0
    fb78:	d108      	bne.n	fb8c <__mdiff+0x28>
    fb7a:	0001      	movs	r1, r0
    fb7c:	0038      	movs	r0, r7
    fb7e:	f7ff fdc6 	bl	f70e <_Balloc>
    fb82:	2301      	movs	r3, #1
    fb84:	6146      	str	r6, [r0, #20]
    fb86:	6103      	str	r3, [r0, #16]
    fb88:	b005      	add	sp, #20
    fb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb8c:	2301      	movs	r3, #1
    fb8e:	9301      	str	r3, [sp, #4]
    fb90:	2800      	cmp	r0, #0
    fb92:	db04      	blt.n	fb9e <__mdiff+0x3a>
    fb94:	0023      	movs	r3, r4
    fb96:	002c      	movs	r4, r5
    fb98:	001d      	movs	r5, r3
    fb9a:	2300      	movs	r3, #0
    fb9c:	9301      	str	r3, [sp, #4]
    fb9e:	6861      	ldr	r1, [r4, #4]
    fba0:	0038      	movs	r0, r7
    fba2:	f7ff fdb4 	bl	f70e <_Balloc>
    fba6:	002f      	movs	r7, r5
    fba8:	2200      	movs	r2, #0
    fbaa:	9b01      	ldr	r3, [sp, #4]
    fbac:	6926      	ldr	r6, [r4, #16]
    fbae:	60c3      	str	r3, [r0, #12]
    fbb0:	3414      	adds	r4, #20
    fbb2:	00b3      	lsls	r3, r6, #2
    fbb4:	18e3      	adds	r3, r4, r3
    fbb6:	9302      	str	r3, [sp, #8]
    fbb8:	692b      	ldr	r3, [r5, #16]
    fbba:	3714      	adds	r7, #20
    fbbc:	009b      	lsls	r3, r3, #2
    fbbe:	18fb      	adds	r3, r7, r3
    fbc0:	9303      	str	r3, [sp, #12]
    fbc2:	0003      	movs	r3, r0
    fbc4:	4694      	mov	ip, r2
    fbc6:	3314      	adds	r3, #20
    fbc8:	cc20      	ldmia	r4!, {r5}
    fbca:	cf04      	ldmia	r7!, {r2}
    fbcc:	9201      	str	r2, [sp, #4]
    fbce:	b2aa      	uxth	r2, r5
    fbd0:	4494      	add	ip, r2
    fbd2:	466a      	mov	r2, sp
    fbd4:	4661      	mov	r1, ip
    fbd6:	8892      	ldrh	r2, [r2, #4]
    fbd8:	0c2d      	lsrs	r5, r5, #16
    fbda:	1a8a      	subs	r2, r1, r2
    fbdc:	9901      	ldr	r1, [sp, #4]
    fbde:	0c09      	lsrs	r1, r1, #16
    fbe0:	1a69      	subs	r1, r5, r1
    fbe2:	1415      	asrs	r5, r2, #16
    fbe4:	1949      	adds	r1, r1, r5
    fbe6:	140d      	asrs	r5, r1, #16
    fbe8:	b292      	uxth	r2, r2
    fbea:	0409      	lsls	r1, r1, #16
    fbec:	430a      	orrs	r2, r1
    fbee:	601a      	str	r2, [r3, #0]
    fbf0:	9a03      	ldr	r2, [sp, #12]
    fbf2:	46ac      	mov	ip, r5
    fbf4:	3304      	adds	r3, #4
    fbf6:	42ba      	cmp	r2, r7
    fbf8:	d8e6      	bhi.n	fbc8 <__mdiff+0x64>
    fbfa:	9902      	ldr	r1, [sp, #8]
    fbfc:	001a      	movs	r2, r3
    fbfe:	428c      	cmp	r4, r1
    fc00:	d305      	bcc.n	fc0e <__mdiff+0xaa>
    fc02:	3a04      	subs	r2, #4
    fc04:	6813      	ldr	r3, [r2, #0]
    fc06:	2b00      	cmp	r3, #0
    fc08:	d00e      	beq.n	fc28 <__mdiff+0xc4>
    fc0a:	6106      	str	r6, [r0, #16]
    fc0c:	e7bc      	b.n	fb88 <__mdiff+0x24>
    fc0e:	cc04      	ldmia	r4!, {r2}
    fc10:	b291      	uxth	r1, r2
    fc12:	4461      	add	r1, ip
    fc14:	140d      	asrs	r5, r1, #16
    fc16:	0c12      	lsrs	r2, r2, #16
    fc18:	1952      	adds	r2, r2, r5
    fc1a:	1415      	asrs	r5, r2, #16
    fc1c:	b289      	uxth	r1, r1
    fc1e:	0412      	lsls	r2, r2, #16
    fc20:	430a      	orrs	r2, r1
    fc22:	46ac      	mov	ip, r5
    fc24:	c304      	stmia	r3!, {r2}
    fc26:	e7e8      	b.n	fbfa <__mdiff+0x96>
    fc28:	3e01      	subs	r6, #1
    fc2a:	e7ea      	b.n	fc02 <__mdiff+0x9e>

0000fc2c <__d2b>:
    fc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fc2e:	001d      	movs	r5, r3
    fc30:	2101      	movs	r1, #1
    fc32:	9f08      	ldr	r7, [sp, #32]
    fc34:	0014      	movs	r4, r2
    fc36:	f7ff fd6a 	bl	f70e <_Balloc>
    fc3a:	032b      	lsls	r3, r5, #12
    fc3c:	006d      	lsls	r5, r5, #1
    fc3e:	0006      	movs	r6, r0
    fc40:	0b1b      	lsrs	r3, r3, #12
    fc42:	0d6d      	lsrs	r5, r5, #21
    fc44:	d124      	bne.n	fc90 <__d2b+0x64>
    fc46:	9301      	str	r3, [sp, #4]
    fc48:	2c00      	cmp	r4, #0
    fc4a:	d027      	beq.n	fc9c <__d2b+0x70>
    fc4c:	4668      	mov	r0, sp
    fc4e:	9400      	str	r4, [sp, #0]
    fc50:	f7ff fe04 	bl	f85c <__lo0bits>
    fc54:	9c00      	ldr	r4, [sp, #0]
    fc56:	2800      	cmp	r0, #0
    fc58:	d01e      	beq.n	fc98 <__d2b+0x6c>
    fc5a:	9b01      	ldr	r3, [sp, #4]
    fc5c:	2120      	movs	r1, #32
    fc5e:	001a      	movs	r2, r3
    fc60:	1a09      	subs	r1, r1, r0
    fc62:	408a      	lsls	r2, r1
    fc64:	40c3      	lsrs	r3, r0
    fc66:	4322      	orrs	r2, r4
    fc68:	6172      	str	r2, [r6, #20]
    fc6a:	9301      	str	r3, [sp, #4]
    fc6c:	9c01      	ldr	r4, [sp, #4]
    fc6e:	61b4      	str	r4, [r6, #24]
    fc70:	1e63      	subs	r3, r4, #1
    fc72:	419c      	sbcs	r4, r3
    fc74:	3401      	adds	r4, #1
    fc76:	6134      	str	r4, [r6, #16]
    fc78:	2d00      	cmp	r5, #0
    fc7a:	d018      	beq.n	fcae <__d2b+0x82>
    fc7c:	4b12      	ldr	r3, [pc, #72]	; (fcc8 <__d2b+0x9c>)
    fc7e:	18ed      	adds	r5, r5, r3
    fc80:	2335      	movs	r3, #53	; 0x35
    fc82:	182d      	adds	r5, r5, r0
    fc84:	603d      	str	r5, [r7, #0]
    fc86:	1a18      	subs	r0, r3, r0
    fc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc8a:	6018      	str	r0, [r3, #0]
    fc8c:	0030      	movs	r0, r6
    fc8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fc90:	2280      	movs	r2, #128	; 0x80
    fc92:	0352      	lsls	r2, r2, #13
    fc94:	4313      	orrs	r3, r2
    fc96:	e7d6      	b.n	fc46 <__d2b+0x1a>
    fc98:	6174      	str	r4, [r6, #20]
    fc9a:	e7e7      	b.n	fc6c <__d2b+0x40>
    fc9c:	a801      	add	r0, sp, #4
    fc9e:	f7ff fddd 	bl	f85c <__lo0bits>
    fca2:	2401      	movs	r4, #1
    fca4:	9b01      	ldr	r3, [sp, #4]
    fca6:	6134      	str	r4, [r6, #16]
    fca8:	6173      	str	r3, [r6, #20]
    fcaa:	3020      	adds	r0, #32
    fcac:	e7e4      	b.n	fc78 <__d2b+0x4c>
    fcae:	4b07      	ldr	r3, [pc, #28]	; (fccc <__d2b+0xa0>)
    fcb0:	18c0      	adds	r0, r0, r3
    fcb2:	4b07      	ldr	r3, [pc, #28]	; (fcd0 <__d2b+0xa4>)
    fcb4:	6038      	str	r0, [r7, #0]
    fcb6:	18e3      	adds	r3, r4, r3
    fcb8:	009b      	lsls	r3, r3, #2
    fcba:	18f3      	adds	r3, r6, r3
    fcbc:	6958      	ldr	r0, [r3, #20]
    fcbe:	f7ff fdb3 	bl	f828 <__hi0bits>
    fcc2:	0164      	lsls	r4, r4, #5
    fcc4:	1a20      	subs	r0, r4, r0
    fcc6:	e7df      	b.n	fc88 <__d2b+0x5c>
    fcc8:	fffffbcd 	.word	0xfffffbcd
    fccc:	fffffbce 	.word	0xfffffbce
    fcd0:	3fffffff 	.word	0x3fffffff

0000fcd4 <_calloc_r>:
    fcd4:	434a      	muls	r2, r1
    fcd6:	b570      	push	{r4, r5, r6, lr}
    fcd8:	0011      	movs	r1, r2
    fcda:	0014      	movs	r4, r2
    fcdc:	f7fd f99c 	bl	d018 <_malloc_r>
    fce0:	1e05      	subs	r5, r0, #0
    fce2:	d003      	beq.n	fcec <_calloc_r+0x18>
    fce4:	0022      	movs	r2, r4
    fce6:	2100      	movs	r1, #0
    fce8:	f7fc feee 	bl	cac8 <memset>
    fcec:	0028      	movs	r0, r5
    fcee:	bd70      	pop	{r4, r5, r6, pc}

0000fcf0 <_realloc_r>:
    fcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcf2:	0007      	movs	r7, r0
    fcf4:	000d      	movs	r5, r1
    fcf6:	0016      	movs	r6, r2
    fcf8:	2900      	cmp	r1, #0
    fcfa:	d105      	bne.n	fd08 <_realloc_r+0x18>
    fcfc:	0011      	movs	r1, r2
    fcfe:	f7fd f98b 	bl	d018 <_malloc_r>
    fd02:	0004      	movs	r4, r0
    fd04:	0020      	movs	r0, r4
    fd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd08:	2a00      	cmp	r2, #0
    fd0a:	d103      	bne.n	fd14 <_realloc_r+0x24>
    fd0c:	f7fd f93a 	bl	cf84 <_free_r>
    fd10:	0034      	movs	r4, r6
    fd12:	e7f7      	b.n	fd04 <_realloc_r+0x14>
    fd14:	f000 fb44 	bl	103a0 <_malloc_usable_size_r>
    fd18:	002c      	movs	r4, r5
    fd1a:	4286      	cmp	r6, r0
    fd1c:	d9f2      	bls.n	fd04 <_realloc_r+0x14>
    fd1e:	0031      	movs	r1, r6
    fd20:	0038      	movs	r0, r7
    fd22:	f7fd f979 	bl	d018 <_malloc_r>
    fd26:	1e04      	subs	r4, r0, #0
    fd28:	d0ec      	beq.n	fd04 <_realloc_r+0x14>
    fd2a:	0029      	movs	r1, r5
    fd2c:	0032      	movs	r2, r6
    fd2e:	f7fc feb0 	bl	ca92 <memcpy>
    fd32:	0029      	movs	r1, r5
    fd34:	0038      	movs	r0, r7
    fd36:	f7fd f925 	bl	cf84 <_free_r>
    fd3a:	e7e3      	b.n	fd04 <_realloc_r+0x14>

0000fd3c <__ssputs_r>:
    fd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd3e:	688e      	ldr	r6, [r1, #8]
    fd40:	b085      	sub	sp, #20
    fd42:	0007      	movs	r7, r0
    fd44:	000c      	movs	r4, r1
    fd46:	9203      	str	r2, [sp, #12]
    fd48:	9301      	str	r3, [sp, #4]
    fd4a:	429e      	cmp	r6, r3
    fd4c:	d839      	bhi.n	fdc2 <__ssputs_r+0x86>
    fd4e:	2390      	movs	r3, #144	; 0x90
    fd50:	898a      	ldrh	r2, [r1, #12]
    fd52:	00db      	lsls	r3, r3, #3
    fd54:	421a      	tst	r2, r3
    fd56:	d034      	beq.n	fdc2 <__ssputs_r+0x86>
    fd58:	2503      	movs	r5, #3
    fd5a:	6909      	ldr	r1, [r1, #16]
    fd5c:	6823      	ldr	r3, [r4, #0]
    fd5e:	1a5b      	subs	r3, r3, r1
    fd60:	9302      	str	r3, [sp, #8]
    fd62:	6963      	ldr	r3, [r4, #20]
    fd64:	9802      	ldr	r0, [sp, #8]
    fd66:	435d      	muls	r5, r3
    fd68:	0feb      	lsrs	r3, r5, #31
    fd6a:	195d      	adds	r5, r3, r5
    fd6c:	9b01      	ldr	r3, [sp, #4]
    fd6e:	106d      	asrs	r5, r5, #1
    fd70:	3301      	adds	r3, #1
    fd72:	181b      	adds	r3, r3, r0
    fd74:	42ab      	cmp	r3, r5
    fd76:	d900      	bls.n	fd7a <__ssputs_r+0x3e>
    fd78:	001d      	movs	r5, r3
    fd7a:	0553      	lsls	r3, r2, #21
    fd7c:	d532      	bpl.n	fde4 <__ssputs_r+0xa8>
    fd7e:	0029      	movs	r1, r5
    fd80:	0038      	movs	r0, r7
    fd82:	f7fd f949 	bl	d018 <_malloc_r>
    fd86:	1e06      	subs	r6, r0, #0
    fd88:	d109      	bne.n	fd9e <__ssputs_r+0x62>
    fd8a:	230c      	movs	r3, #12
    fd8c:	603b      	str	r3, [r7, #0]
    fd8e:	2340      	movs	r3, #64	; 0x40
    fd90:	2001      	movs	r0, #1
    fd92:	89a2      	ldrh	r2, [r4, #12]
    fd94:	4240      	negs	r0, r0
    fd96:	4313      	orrs	r3, r2
    fd98:	81a3      	strh	r3, [r4, #12]
    fd9a:	b005      	add	sp, #20
    fd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd9e:	9a02      	ldr	r2, [sp, #8]
    fda0:	6921      	ldr	r1, [r4, #16]
    fda2:	f7fc fe76 	bl	ca92 <memcpy>
    fda6:	89a3      	ldrh	r3, [r4, #12]
    fda8:	4a14      	ldr	r2, [pc, #80]	; (fdfc <__ssputs_r+0xc0>)
    fdaa:	401a      	ands	r2, r3
    fdac:	2380      	movs	r3, #128	; 0x80
    fdae:	4313      	orrs	r3, r2
    fdb0:	81a3      	strh	r3, [r4, #12]
    fdb2:	9b02      	ldr	r3, [sp, #8]
    fdb4:	6126      	str	r6, [r4, #16]
    fdb6:	18f6      	adds	r6, r6, r3
    fdb8:	6026      	str	r6, [r4, #0]
    fdba:	6165      	str	r5, [r4, #20]
    fdbc:	9e01      	ldr	r6, [sp, #4]
    fdbe:	1aed      	subs	r5, r5, r3
    fdc0:	60a5      	str	r5, [r4, #8]
    fdc2:	9b01      	ldr	r3, [sp, #4]
    fdc4:	42b3      	cmp	r3, r6
    fdc6:	d200      	bcs.n	fdca <__ssputs_r+0x8e>
    fdc8:	001e      	movs	r6, r3
    fdca:	0032      	movs	r2, r6
    fdcc:	9903      	ldr	r1, [sp, #12]
    fdce:	6820      	ldr	r0, [r4, #0]
    fdd0:	f7fc fe68 	bl	caa4 <memmove>
    fdd4:	68a3      	ldr	r3, [r4, #8]
    fdd6:	2000      	movs	r0, #0
    fdd8:	1b9b      	subs	r3, r3, r6
    fdda:	60a3      	str	r3, [r4, #8]
    fddc:	6823      	ldr	r3, [r4, #0]
    fdde:	199e      	adds	r6, r3, r6
    fde0:	6026      	str	r6, [r4, #0]
    fde2:	e7da      	b.n	fd9a <__ssputs_r+0x5e>
    fde4:	002a      	movs	r2, r5
    fde6:	0038      	movs	r0, r7
    fde8:	f7ff ff82 	bl	fcf0 <_realloc_r>
    fdec:	1e06      	subs	r6, r0, #0
    fdee:	d1e0      	bne.n	fdb2 <__ssputs_r+0x76>
    fdf0:	6921      	ldr	r1, [r4, #16]
    fdf2:	0038      	movs	r0, r7
    fdf4:	f7fd f8c6 	bl	cf84 <_free_r>
    fdf8:	e7c7      	b.n	fd8a <__ssputs_r+0x4e>
    fdfa:	46c0      	nop			; (mov r8, r8)
    fdfc:	fffffb7f 	.word	0xfffffb7f

0000fe00 <_svfiprintf_r>:
    fe00:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe02:	b09f      	sub	sp, #124	; 0x7c
    fe04:	9002      	str	r0, [sp, #8]
    fe06:	9305      	str	r3, [sp, #20]
    fe08:	898b      	ldrh	r3, [r1, #12]
    fe0a:	000f      	movs	r7, r1
    fe0c:	0016      	movs	r6, r2
    fe0e:	061b      	lsls	r3, r3, #24
    fe10:	d511      	bpl.n	fe36 <_svfiprintf_r+0x36>
    fe12:	690b      	ldr	r3, [r1, #16]
    fe14:	2b00      	cmp	r3, #0
    fe16:	d10e      	bne.n	fe36 <_svfiprintf_r+0x36>
    fe18:	2140      	movs	r1, #64	; 0x40
    fe1a:	f7fd f8fd 	bl	d018 <_malloc_r>
    fe1e:	6038      	str	r0, [r7, #0]
    fe20:	6138      	str	r0, [r7, #16]
    fe22:	2800      	cmp	r0, #0
    fe24:	d105      	bne.n	fe32 <_svfiprintf_r+0x32>
    fe26:	230c      	movs	r3, #12
    fe28:	9a02      	ldr	r2, [sp, #8]
    fe2a:	3801      	subs	r0, #1
    fe2c:	6013      	str	r3, [r2, #0]
    fe2e:	b01f      	add	sp, #124	; 0x7c
    fe30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe32:	2340      	movs	r3, #64	; 0x40
    fe34:	617b      	str	r3, [r7, #20]
    fe36:	2300      	movs	r3, #0
    fe38:	ad06      	add	r5, sp, #24
    fe3a:	616b      	str	r3, [r5, #20]
    fe3c:	3320      	adds	r3, #32
    fe3e:	766b      	strb	r3, [r5, #25]
    fe40:	3310      	adds	r3, #16
    fe42:	76ab      	strb	r3, [r5, #26]
    fe44:	0034      	movs	r4, r6
    fe46:	7823      	ldrb	r3, [r4, #0]
    fe48:	2b00      	cmp	r3, #0
    fe4a:	d147      	bne.n	fedc <_svfiprintf_r+0xdc>
    fe4c:	1ba3      	subs	r3, r4, r6
    fe4e:	9304      	str	r3, [sp, #16]
    fe50:	d00d      	beq.n	fe6e <_svfiprintf_r+0x6e>
    fe52:	1ba3      	subs	r3, r4, r6
    fe54:	0032      	movs	r2, r6
    fe56:	0039      	movs	r1, r7
    fe58:	9802      	ldr	r0, [sp, #8]
    fe5a:	f7ff ff6f 	bl	fd3c <__ssputs_r>
    fe5e:	1c43      	adds	r3, r0, #1
    fe60:	d100      	bne.n	fe64 <_svfiprintf_r+0x64>
    fe62:	e0b5      	b.n	ffd0 <_svfiprintf_r+0x1d0>
    fe64:	696a      	ldr	r2, [r5, #20]
    fe66:	9b04      	ldr	r3, [sp, #16]
    fe68:	4694      	mov	ip, r2
    fe6a:	4463      	add	r3, ip
    fe6c:	616b      	str	r3, [r5, #20]
    fe6e:	7823      	ldrb	r3, [r4, #0]
    fe70:	2b00      	cmp	r3, #0
    fe72:	d100      	bne.n	fe76 <_svfiprintf_r+0x76>
    fe74:	e0ac      	b.n	ffd0 <_svfiprintf_r+0x1d0>
    fe76:	2201      	movs	r2, #1
    fe78:	2300      	movs	r3, #0
    fe7a:	4252      	negs	r2, r2
    fe7c:	606a      	str	r2, [r5, #4]
    fe7e:	a902      	add	r1, sp, #8
    fe80:	3254      	adds	r2, #84	; 0x54
    fe82:	1852      	adds	r2, r2, r1
    fe84:	3401      	adds	r4, #1
    fe86:	602b      	str	r3, [r5, #0]
    fe88:	60eb      	str	r3, [r5, #12]
    fe8a:	60ab      	str	r3, [r5, #8]
    fe8c:	7013      	strb	r3, [r2, #0]
    fe8e:	65ab      	str	r3, [r5, #88]	; 0x58
    fe90:	4e58      	ldr	r6, [pc, #352]	; (fff4 <_svfiprintf_r+0x1f4>)
    fe92:	2205      	movs	r2, #5
    fe94:	7821      	ldrb	r1, [r4, #0]
    fe96:	0030      	movs	r0, r6
    fe98:	f7ff fc2c 	bl	f6f4 <memchr>
    fe9c:	1c62      	adds	r2, r4, #1
    fe9e:	2800      	cmp	r0, #0
    fea0:	d120      	bne.n	fee4 <_svfiprintf_r+0xe4>
    fea2:	6829      	ldr	r1, [r5, #0]
    fea4:	06cb      	lsls	r3, r1, #27
    fea6:	d504      	bpl.n	feb2 <_svfiprintf_r+0xb2>
    fea8:	2353      	movs	r3, #83	; 0x53
    feaa:	ae02      	add	r6, sp, #8
    feac:	3020      	adds	r0, #32
    feae:	199b      	adds	r3, r3, r6
    feb0:	7018      	strb	r0, [r3, #0]
    feb2:	070b      	lsls	r3, r1, #28
    feb4:	d504      	bpl.n	fec0 <_svfiprintf_r+0xc0>
    feb6:	2353      	movs	r3, #83	; 0x53
    feb8:	202b      	movs	r0, #43	; 0x2b
    feba:	ae02      	add	r6, sp, #8
    febc:	199b      	adds	r3, r3, r6
    febe:	7018      	strb	r0, [r3, #0]
    fec0:	7823      	ldrb	r3, [r4, #0]
    fec2:	2b2a      	cmp	r3, #42	; 0x2a
    fec4:	d016      	beq.n	fef4 <_svfiprintf_r+0xf4>
    fec6:	2000      	movs	r0, #0
    fec8:	210a      	movs	r1, #10
    feca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fecc:	7822      	ldrb	r2, [r4, #0]
    fece:	3a30      	subs	r2, #48	; 0x30
    fed0:	2a09      	cmp	r2, #9
    fed2:	d955      	bls.n	ff80 <_svfiprintf_r+0x180>
    fed4:	2800      	cmp	r0, #0
    fed6:	d015      	beq.n	ff04 <_svfiprintf_r+0x104>
    fed8:	9309      	str	r3, [sp, #36]	; 0x24
    feda:	e013      	b.n	ff04 <_svfiprintf_r+0x104>
    fedc:	2b25      	cmp	r3, #37	; 0x25
    fede:	d0b5      	beq.n	fe4c <_svfiprintf_r+0x4c>
    fee0:	3401      	adds	r4, #1
    fee2:	e7b0      	b.n	fe46 <_svfiprintf_r+0x46>
    fee4:	2301      	movs	r3, #1
    fee6:	1b80      	subs	r0, r0, r6
    fee8:	4083      	lsls	r3, r0
    feea:	6829      	ldr	r1, [r5, #0]
    feec:	0014      	movs	r4, r2
    feee:	430b      	orrs	r3, r1
    fef0:	602b      	str	r3, [r5, #0]
    fef2:	e7cd      	b.n	fe90 <_svfiprintf_r+0x90>
    fef4:	9b05      	ldr	r3, [sp, #20]
    fef6:	1d18      	adds	r0, r3, #4
    fef8:	681b      	ldr	r3, [r3, #0]
    fefa:	9005      	str	r0, [sp, #20]
    fefc:	2b00      	cmp	r3, #0
    fefe:	db39      	blt.n	ff74 <_svfiprintf_r+0x174>
    ff00:	9309      	str	r3, [sp, #36]	; 0x24
    ff02:	0014      	movs	r4, r2
    ff04:	7823      	ldrb	r3, [r4, #0]
    ff06:	2b2e      	cmp	r3, #46	; 0x2e
    ff08:	d10b      	bne.n	ff22 <_svfiprintf_r+0x122>
    ff0a:	7863      	ldrb	r3, [r4, #1]
    ff0c:	1c62      	adds	r2, r4, #1
    ff0e:	2b2a      	cmp	r3, #42	; 0x2a
    ff10:	d13e      	bne.n	ff90 <_svfiprintf_r+0x190>
    ff12:	9b05      	ldr	r3, [sp, #20]
    ff14:	3402      	adds	r4, #2
    ff16:	1d1a      	adds	r2, r3, #4
    ff18:	681b      	ldr	r3, [r3, #0]
    ff1a:	9205      	str	r2, [sp, #20]
    ff1c:	2b00      	cmp	r3, #0
    ff1e:	db34      	blt.n	ff8a <_svfiprintf_r+0x18a>
    ff20:	9307      	str	r3, [sp, #28]
    ff22:	4e35      	ldr	r6, [pc, #212]	; (fff8 <_svfiprintf_r+0x1f8>)
    ff24:	7821      	ldrb	r1, [r4, #0]
    ff26:	2203      	movs	r2, #3
    ff28:	0030      	movs	r0, r6
    ff2a:	f7ff fbe3 	bl	f6f4 <memchr>
    ff2e:	2800      	cmp	r0, #0
    ff30:	d006      	beq.n	ff40 <_svfiprintf_r+0x140>
    ff32:	2340      	movs	r3, #64	; 0x40
    ff34:	1b80      	subs	r0, r0, r6
    ff36:	4083      	lsls	r3, r0
    ff38:	682a      	ldr	r2, [r5, #0]
    ff3a:	3401      	adds	r4, #1
    ff3c:	4313      	orrs	r3, r2
    ff3e:	602b      	str	r3, [r5, #0]
    ff40:	7821      	ldrb	r1, [r4, #0]
    ff42:	2206      	movs	r2, #6
    ff44:	482d      	ldr	r0, [pc, #180]	; (fffc <_svfiprintf_r+0x1fc>)
    ff46:	1c66      	adds	r6, r4, #1
    ff48:	7629      	strb	r1, [r5, #24]
    ff4a:	f7ff fbd3 	bl	f6f4 <memchr>
    ff4e:	2800      	cmp	r0, #0
    ff50:	d046      	beq.n	ffe0 <_svfiprintf_r+0x1e0>
    ff52:	4b2b      	ldr	r3, [pc, #172]	; (10000 <_svfiprintf_r+0x200>)
    ff54:	2b00      	cmp	r3, #0
    ff56:	d12f      	bne.n	ffb8 <_svfiprintf_r+0x1b8>
    ff58:	6829      	ldr	r1, [r5, #0]
    ff5a:	9b05      	ldr	r3, [sp, #20]
    ff5c:	2207      	movs	r2, #7
    ff5e:	05c9      	lsls	r1, r1, #23
    ff60:	d528      	bpl.n	ffb4 <_svfiprintf_r+0x1b4>
    ff62:	189b      	adds	r3, r3, r2
    ff64:	4393      	bics	r3, r2
    ff66:	3308      	adds	r3, #8
    ff68:	9305      	str	r3, [sp, #20]
    ff6a:	696b      	ldr	r3, [r5, #20]
    ff6c:	9a03      	ldr	r2, [sp, #12]
    ff6e:	189b      	adds	r3, r3, r2
    ff70:	616b      	str	r3, [r5, #20]
    ff72:	e767      	b.n	fe44 <_svfiprintf_r+0x44>
    ff74:	425b      	negs	r3, r3
    ff76:	60eb      	str	r3, [r5, #12]
    ff78:	2302      	movs	r3, #2
    ff7a:	430b      	orrs	r3, r1
    ff7c:	602b      	str	r3, [r5, #0]
    ff7e:	e7c0      	b.n	ff02 <_svfiprintf_r+0x102>
    ff80:	434b      	muls	r3, r1
    ff82:	3401      	adds	r4, #1
    ff84:	189b      	adds	r3, r3, r2
    ff86:	2001      	movs	r0, #1
    ff88:	e7a0      	b.n	fecc <_svfiprintf_r+0xcc>
    ff8a:	2301      	movs	r3, #1
    ff8c:	425b      	negs	r3, r3
    ff8e:	e7c7      	b.n	ff20 <_svfiprintf_r+0x120>
    ff90:	2300      	movs	r3, #0
    ff92:	0014      	movs	r4, r2
    ff94:	200a      	movs	r0, #10
    ff96:	001a      	movs	r2, r3
    ff98:	606b      	str	r3, [r5, #4]
    ff9a:	7821      	ldrb	r1, [r4, #0]
    ff9c:	3930      	subs	r1, #48	; 0x30
    ff9e:	2909      	cmp	r1, #9
    ffa0:	d903      	bls.n	ffaa <_svfiprintf_r+0x1aa>
    ffa2:	2b00      	cmp	r3, #0
    ffa4:	d0bd      	beq.n	ff22 <_svfiprintf_r+0x122>
    ffa6:	9207      	str	r2, [sp, #28]
    ffa8:	e7bb      	b.n	ff22 <_svfiprintf_r+0x122>
    ffaa:	4342      	muls	r2, r0
    ffac:	3401      	adds	r4, #1
    ffae:	1852      	adds	r2, r2, r1
    ffb0:	2301      	movs	r3, #1
    ffb2:	e7f2      	b.n	ff9a <_svfiprintf_r+0x19a>
    ffb4:	3307      	adds	r3, #7
    ffb6:	e7d5      	b.n	ff64 <_svfiprintf_r+0x164>
    ffb8:	ab05      	add	r3, sp, #20
    ffba:	9300      	str	r3, [sp, #0]
    ffbc:	003a      	movs	r2, r7
    ffbe:	4b11      	ldr	r3, [pc, #68]	; (10004 <_svfiprintf_r+0x204>)
    ffc0:	0029      	movs	r1, r5
    ffc2:	9802      	ldr	r0, [sp, #8]
    ffc4:	f7fd fa66 	bl	d494 <_printf_float>
    ffc8:	9003      	str	r0, [sp, #12]
    ffca:	9b03      	ldr	r3, [sp, #12]
    ffcc:	3301      	adds	r3, #1
    ffce:	d1cc      	bne.n	ff6a <_svfiprintf_r+0x16a>
    ffd0:	89bb      	ldrh	r3, [r7, #12]
    ffd2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ffd4:	065b      	lsls	r3, r3, #25
    ffd6:	d400      	bmi.n	ffda <_svfiprintf_r+0x1da>
    ffd8:	e729      	b.n	fe2e <_svfiprintf_r+0x2e>
    ffda:	2001      	movs	r0, #1
    ffdc:	4240      	negs	r0, r0
    ffde:	e726      	b.n	fe2e <_svfiprintf_r+0x2e>
    ffe0:	ab05      	add	r3, sp, #20
    ffe2:	9300      	str	r3, [sp, #0]
    ffe4:	003a      	movs	r2, r7
    ffe6:	4b07      	ldr	r3, [pc, #28]	; (10004 <_svfiprintf_r+0x204>)
    ffe8:	0029      	movs	r1, r5
    ffea:	9802      	ldr	r0, [sp, #8]
    ffec:	f7fd fd0c 	bl	da08 <_printf_i>
    fff0:	e7ea      	b.n	ffc8 <_svfiprintf_r+0x1c8>
    fff2:	46c0      	nop			; (mov r8, r8)
    fff4:	00012988 	.word	0x00012988
    fff8:	0001298e 	.word	0x0001298e
    fffc:	00012992 	.word	0x00012992
   10000:	0000d495 	.word	0x0000d495
   10004:	0000fd3d 	.word	0x0000fd3d

00010008 <_raise_r>:
   10008:	b570      	push	{r4, r5, r6, lr}
   1000a:	0004      	movs	r4, r0
   1000c:	000d      	movs	r5, r1
   1000e:	291f      	cmp	r1, #31
   10010:	d904      	bls.n	1001c <_raise_r+0x14>
   10012:	2316      	movs	r3, #22
   10014:	6003      	str	r3, [r0, #0]
   10016:	2001      	movs	r0, #1
   10018:	4240      	negs	r0, r0
   1001a:	bd70      	pop	{r4, r5, r6, pc}
   1001c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1001e:	2b00      	cmp	r3, #0
   10020:	d004      	beq.n	1002c <_raise_r+0x24>
   10022:	008a      	lsls	r2, r1, #2
   10024:	189b      	adds	r3, r3, r2
   10026:	681a      	ldr	r2, [r3, #0]
   10028:	2a00      	cmp	r2, #0
   1002a:	d108      	bne.n	1003e <_raise_r+0x36>
   1002c:	0020      	movs	r0, r4
   1002e:	f000 f831 	bl	10094 <_getpid_r>
   10032:	002a      	movs	r2, r5
   10034:	0001      	movs	r1, r0
   10036:	0020      	movs	r0, r4
   10038:	f000 f81a 	bl	10070 <_kill_r>
   1003c:	e7ed      	b.n	1001a <_raise_r+0x12>
   1003e:	2000      	movs	r0, #0
   10040:	2a01      	cmp	r2, #1
   10042:	d0ea      	beq.n	1001a <_raise_r+0x12>
   10044:	1c51      	adds	r1, r2, #1
   10046:	d103      	bne.n	10050 <_raise_r+0x48>
   10048:	2316      	movs	r3, #22
   1004a:	3001      	adds	r0, #1
   1004c:	6023      	str	r3, [r4, #0]
   1004e:	e7e4      	b.n	1001a <_raise_r+0x12>
   10050:	2400      	movs	r4, #0
   10052:	0028      	movs	r0, r5
   10054:	601c      	str	r4, [r3, #0]
   10056:	4790      	blx	r2
   10058:	0020      	movs	r0, r4
   1005a:	e7de      	b.n	1001a <_raise_r+0x12>

0001005c <raise>:
   1005c:	b510      	push	{r4, lr}
   1005e:	4b03      	ldr	r3, [pc, #12]	; (1006c <raise+0x10>)
   10060:	0001      	movs	r1, r0
   10062:	6818      	ldr	r0, [r3, #0]
   10064:	f7ff ffd0 	bl	10008 <_raise_r>
   10068:	bd10      	pop	{r4, pc}
   1006a:	46c0      	nop			; (mov r8, r8)
   1006c:	200000b4 	.word	0x200000b4

00010070 <_kill_r>:
   10070:	2300      	movs	r3, #0
   10072:	b570      	push	{r4, r5, r6, lr}
   10074:	4c06      	ldr	r4, [pc, #24]	; (10090 <_kill_r+0x20>)
   10076:	0005      	movs	r5, r0
   10078:	0008      	movs	r0, r1
   1007a:	0011      	movs	r1, r2
   1007c:	6023      	str	r3, [r4, #0]
   1007e:	f000 fd81 	bl	10b84 <_kill>
   10082:	1c43      	adds	r3, r0, #1
   10084:	d103      	bne.n	1008e <_kill_r+0x1e>
   10086:	6823      	ldr	r3, [r4, #0]
   10088:	2b00      	cmp	r3, #0
   1008a:	d000      	beq.n	1008e <_kill_r+0x1e>
   1008c:	602b      	str	r3, [r5, #0]
   1008e:	bd70      	pop	{r4, r5, r6, pc}
   10090:	20001fa8 	.word	0x20001fa8

00010094 <_getpid_r>:
   10094:	b510      	push	{r4, lr}
   10096:	f000 fd65 	bl	10b64 <_getpid>
   1009a:	bd10      	pop	{r4, pc}

0001009c <siscanf>:
   1009c:	b40e      	push	{r1, r2, r3}
   1009e:	2381      	movs	r3, #129	; 0x81
   100a0:	b570      	push	{r4, r5, r6, lr}
   100a2:	b09d      	sub	sp, #116	; 0x74
   100a4:	ac02      	add	r4, sp, #8
   100a6:	ad21      	add	r5, sp, #132	; 0x84
   100a8:	009b      	lsls	r3, r3, #2
   100aa:	cd40      	ldmia	r5!, {r6}
   100ac:	81a3      	strh	r3, [r4, #12]
   100ae:	9002      	str	r0, [sp, #8]
   100b0:	9006      	str	r0, [sp, #24]
   100b2:	f7fd fe20 	bl	dcf6 <strlen>
   100b6:	4b0b      	ldr	r3, [pc, #44]	; (100e4 <siscanf+0x48>)
   100b8:	6060      	str	r0, [r4, #4]
   100ba:	6263      	str	r3, [r4, #36]	; 0x24
   100bc:	2300      	movs	r3, #0
   100be:	6160      	str	r0, [r4, #20]
   100c0:	4809      	ldr	r0, [pc, #36]	; (100e8 <siscanf+0x4c>)
   100c2:	6363      	str	r3, [r4, #52]	; 0x34
   100c4:	64a3      	str	r3, [r4, #72]	; 0x48
   100c6:	3b01      	subs	r3, #1
   100c8:	81e3      	strh	r3, [r4, #14]
   100ca:	0032      	movs	r2, r6
   100cc:	002b      	movs	r3, r5
   100ce:	0021      	movs	r1, r4
   100d0:	6800      	ldr	r0, [r0, #0]
   100d2:	9501      	str	r5, [sp, #4]
   100d4:	f000 f9c8 	bl	10468 <__ssvfiscanf_r>
   100d8:	b01d      	add	sp, #116	; 0x74
   100da:	bc70      	pop	{r4, r5, r6}
   100dc:	bc08      	pop	{r3}
   100de:	b003      	add	sp, #12
   100e0:	4718      	bx	r3
   100e2:	46c0      	nop			; (mov r8, r8)
   100e4:	00010115 	.word	0x00010115
   100e8:	200000b4 	.word	0x200000b4

000100ec <__sread>:
   100ec:	b570      	push	{r4, r5, r6, lr}
   100ee:	000c      	movs	r4, r1
   100f0:	250e      	movs	r5, #14
   100f2:	5f49      	ldrsh	r1, [r1, r5]
   100f4:	f000 fca2 	bl	10a3c <_read_r>
   100f8:	2800      	cmp	r0, #0
   100fa:	db03      	blt.n	10104 <__sread+0x18>
   100fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   100fe:	181b      	adds	r3, r3, r0
   10100:	6563      	str	r3, [r4, #84]	; 0x54
   10102:	bd70      	pop	{r4, r5, r6, pc}
   10104:	89a3      	ldrh	r3, [r4, #12]
   10106:	4a02      	ldr	r2, [pc, #8]	; (10110 <__sread+0x24>)
   10108:	4013      	ands	r3, r2
   1010a:	81a3      	strh	r3, [r4, #12]
   1010c:	e7f9      	b.n	10102 <__sread+0x16>
   1010e:	46c0      	nop			; (mov r8, r8)
   10110:	ffffefff 	.word	0xffffefff

00010114 <__seofread>:
   10114:	2000      	movs	r0, #0
   10116:	4770      	bx	lr

00010118 <__swrite>:
   10118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1011a:	001f      	movs	r7, r3
   1011c:	898b      	ldrh	r3, [r1, #12]
   1011e:	0005      	movs	r5, r0
   10120:	000c      	movs	r4, r1
   10122:	0016      	movs	r6, r2
   10124:	05db      	lsls	r3, r3, #23
   10126:	d505      	bpl.n	10134 <__swrite+0x1c>
   10128:	230e      	movs	r3, #14
   1012a:	5ec9      	ldrsh	r1, [r1, r3]
   1012c:	2200      	movs	r2, #0
   1012e:	2302      	movs	r3, #2
   10130:	f000 f922 	bl	10378 <_lseek_r>
   10134:	89a3      	ldrh	r3, [r4, #12]
   10136:	4a05      	ldr	r2, [pc, #20]	; (1014c <__swrite+0x34>)
   10138:	0028      	movs	r0, r5
   1013a:	4013      	ands	r3, r2
   1013c:	81a3      	strh	r3, [r4, #12]
   1013e:	0032      	movs	r2, r6
   10140:	230e      	movs	r3, #14
   10142:	5ee1      	ldrsh	r1, [r4, r3]
   10144:	003b      	movs	r3, r7
   10146:	f000 f8cb 	bl	102e0 <_write_r>
   1014a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1014c:	ffffefff 	.word	0xffffefff

00010150 <__sseek>:
   10150:	b570      	push	{r4, r5, r6, lr}
   10152:	000c      	movs	r4, r1
   10154:	250e      	movs	r5, #14
   10156:	5f49      	ldrsh	r1, [r1, r5]
   10158:	f000 f90e 	bl	10378 <_lseek_r>
   1015c:	89a3      	ldrh	r3, [r4, #12]
   1015e:	1c42      	adds	r2, r0, #1
   10160:	d103      	bne.n	1016a <__sseek+0x1a>
   10162:	4a05      	ldr	r2, [pc, #20]	; (10178 <__sseek+0x28>)
   10164:	4013      	ands	r3, r2
   10166:	81a3      	strh	r3, [r4, #12]
   10168:	bd70      	pop	{r4, r5, r6, pc}
   1016a:	2280      	movs	r2, #128	; 0x80
   1016c:	0152      	lsls	r2, r2, #5
   1016e:	4313      	orrs	r3, r2
   10170:	81a3      	strh	r3, [r4, #12]
   10172:	6560      	str	r0, [r4, #84]	; 0x54
   10174:	e7f8      	b.n	10168 <__sseek+0x18>
   10176:	46c0      	nop			; (mov r8, r8)
   10178:	ffffefff 	.word	0xffffefff

0001017c <__sclose>:
   1017c:	b510      	push	{r4, lr}
   1017e:	230e      	movs	r3, #14
   10180:	5ec9      	ldrsh	r1, [r1, r3]
   10182:	f000 f8c1 	bl	10308 <_close_r>
   10186:	bd10      	pop	{r4, pc}

00010188 <_strtoul_l.isra.0>:
   10188:	b5f0      	push	{r4, r5, r6, r7, lr}
   1018a:	001f      	movs	r7, r3
   1018c:	000e      	movs	r6, r1
   1018e:	b087      	sub	sp, #28
   10190:	9005      	str	r0, [sp, #20]
   10192:	9103      	str	r1, [sp, #12]
   10194:	9201      	str	r2, [sp, #4]
   10196:	980c      	ldr	r0, [sp, #48]	; 0x30
   10198:	7834      	ldrb	r4, [r6, #0]
   1019a:	f7fc fc33 	bl	ca04 <__locale_ctype_ptr_l>
   1019e:	2208      	movs	r2, #8
   101a0:	1900      	adds	r0, r0, r4
   101a2:	7843      	ldrb	r3, [r0, #1]
   101a4:	1c75      	adds	r5, r6, #1
   101a6:	4013      	ands	r3, r2
   101a8:	d10c      	bne.n	101c4 <_strtoul_l.isra.0+0x3c>
   101aa:	2c2d      	cmp	r4, #45	; 0x2d
   101ac:	d10c      	bne.n	101c8 <_strtoul_l.isra.0+0x40>
   101ae:	3301      	adds	r3, #1
   101b0:	782c      	ldrb	r4, [r5, #0]
   101b2:	9302      	str	r3, [sp, #8]
   101b4:	1cb5      	adds	r5, r6, #2
   101b6:	2f00      	cmp	r7, #0
   101b8:	d00c      	beq.n	101d4 <_strtoul_l.isra.0+0x4c>
   101ba:	2f10      	cmp	r7, #16
   101bc:	d114      	bne.n	101e8 <_strtoul_l.isra.0+0x60>
   101be:	2c30      	cmp	r4, #48	; 0x30
   101c0:	d00a      	beq.n	101d8 <_strtoul_l.isra.0+0x50>
   101c2:	e011      	b.n	101e8 <_strtoul_l.isra.0+0x60>
   101c4:	002e      	movs	r6, r5
   101c6:	e7e6      	b.n	10196 <_strtoul_l.isra.0+0xe>
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	2c2b      	cmp	r4, #43	; 0x2b
   101cc:	d1f3      	bne.n	101b6 <_strtoul_l.isra.0+0x2e>
   101ce:	782c      	ldrb	r4, [r5, #0]
   101d0:	1cb5      	adds	r5, r6, #2
   101d2:	e7f0      	b.n	101b6 <_strtoul_l.isra.0+0x2e>
   101d4:	2c30      	cmp	r4, #48	; 0x30
   101d6:	d12f      	bne.n	10238 <_strtoul_l.isra.0+0xb0>
   101d8:	2220      	movs	r2, #32
   101da:	782b      	ldrb	r3, [r5, #0]
   101dc:	4393      	bics	r3, r2
   101de:	2b58      	cmp	r3, #88	; 0x58
   101e0:	d154      	bne.n	1028c <_strtoul_l.isra.0+0x104>
   101e2:	2710      	movs	r7, #16
   101e4:	786c      	ldrb	r4, [r5, #1]
   101e6:	3502      	adds	r5, #2
   101e8:	2001      	movs	r0, #1
   101ea:	0039      	movs	r1, r7
   101ec:	4240      	negs	r0, r0
   101ee:	f7f9 fb01 	bl	97f4 <__udivsi3>
   101f2:	0006      	movs	r6, r0
   101f4:	2001      	movs	r0, #1
   101f6:	0039      	movs	r1, r7
   101f8:	4240      	negs	r0, r0
   101fa:	f7f9 fb81 	bl	9900 <__aeabi_uidivmod>
   101fe:	2300      	movs	r3, #0
   10200:	9104      	str	r1, [sp, #16]
   10202:	2101      	movs	r1, #1
   10204:	2201      	movs	r2, #1
   10206:	0018      	movs	r0, r3
   10208:	468c      	mov	ip, r1
   1020a:	4252      	negs	r2, r2
   1020c:	0021      	movs	r1, r4
   1020e:	3930      	subs	r1, #48	; 0x30
   10210:	2909      	cmp	r1, #9
   10212:	d813      	bhi.n	1023c <_strtoul_l.isra.0+0xb4>
   10214:	000c      	movs	r4, r1
   10216:	42a7      	cmp	r7, r4
   10218:	dd1e      	ble.n	10258 <_strtoul_l.isra.0+0xd0>
   1021a:	2b00      	cmp	r3, #0
   1021c:	db1a      	blt.n	10254 <_strtoul_l.isra.0+0xcc>
   1021e:	0013      	movs	r3, r2
   10220:	4286      	cmp	r6, r0
   10222:	d306      	bcc.n	10232 <_strtoul_l.isra.0+0xaa>
   10224:	d102      	bne.n	1022c <_strtoul_l.isra.0+0xa4>
   10226:	9904      	ldr	r1, [sp, #16]
   10228:	42a1      	cmp	r1, r4
   1022a:	db02      	blt.n	10232 <_strtoul_l.isra.0+0xaa>
   1022c:	4663      	mov	r3, ip
   1022e:	4378      	muls	r0, r7
   10230:	1820      	adds	r0, r4, r0
   10232:	782c      	ldrb	r4, [r5, #0]
   10234:	3501      	adds	r5, #1
   10236:	e7e9      	b.n	1020c <_strtoul_l.isra.0+0x84>
   10238:	270a      	movs	r7, #10
   1023a:	e7d5      	b.n	101e8 <_strtoul_l.isra.0+0x60>
   1023c:	0021      	movs	r1, r4
   1023e:	3941      	subs	r1, #65	; 0x41
   10240:	2919      	cmp	r1, #25
   10242:	d801      	bhi.n	10248 <_strtoul_l.isra.0+0xc0>
   10244:	3c37      	subs	r4, #55	; 0x37
   10246:	e7e6      	b.n	10216 <_strtoul_l.isra.0+0x8e>
   10248:	0021      	movs	r1, r4
   1024a:	3961      	subs	r1, #97	; 0x61
   1024c:	2919      	cmp	r1, #25
   1024e:	d803      	bhi.n	10258 <_strtoul_l.isra.0+0xd0>
   10250:	3c57      	subs	r4, #87	; 0x57
   10252:	e7e0      	b.n	10216 <_strtoul_l.isra.0+0x8e>
   10254:	0013      	movs	r3, r2
   10256:	e7ec      	b.n	10232 <_strtoul_l.isra.0+0xaa>
   10258:	2b00      	cmp	r3, #0
   1025a:	da09      	bge.n	10270 <_strtoul_l.isra.0+0xe8>
   1025c:	2322      	movs	r3, #34	; 0x22
   1025e:	2001      	movs	r0, #1
   10260:	9a05      	ldr	r2, [sp, #20]
   10262:	4240      	negs	r0, r0
   10264:	6013      	str	r3, [r2, #0]
   10266:	9b01      	ldr	r3, [sp, #4]
   10268:	2b00      	cmp	r3, #0
   1026a:	d10b      	bne.n	10284 <_strtoul_l.isra.0+0xfc>
   1026c:	b007      	add	sp, #28
   1026e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10270:	9a02      	ldr	r2, [sp, #8]
   10272:	2a00      	cmp	r2, #0
   10274:	d000      	beq.n	10278 <_strtoul_l.isra.0+0xf0>
   10276:	4240      	negs	r0, r0
   10278:	9a01      	ldr	r2, [sp, #4]
   1027a:	2a00      	cmp	r2, #0
   1027c:	d0f6      	beq.n	1026c <_strtoul_l.isra.0+0xe4>
   1027e:	9a03      	ldr	r2, [sp, #12]
   10280:	2b00      	cmp	r3, #0
   10282:	d000      	beq.n	10286 <_strtoul_l.isra.0+0xfe>
   10284:	1e6a      	subs	r2, r5, #1
   10286:	9b01      	ldr	r3, [sp, #4]
   10288:	601a      	str	r2, [r3, #0]
   1028a:	e7ef      	b.n	1026c <_strtoul_l.isra.0+0xe4>
   1028c:	2430      	movs	r4, #48	; 0x30
   1028e:	2f00      	cmp	r7, #0
   10290:	d1aa      	bne.n	101e8 <_strtoul_l.isra.0+0x60>
   10292:	3708      	adds	r7, #8
   10294:	e7a8      	b.n	101e8 <_strtoul_l.isra.0+0x60>
	...

00010298 <_strtoul_r>:
   10298:	b513      	push	{r0, r1, r4, lr}
   1029a:	4c05      	ldr	r4, [pc, #20]	; (102b0 <_strtoul_r+0x18>)
   1029c:	6824      	ldr	r4, [r4, #0]
   1029e:	6a24      	ldr	r4, [r4, #32]
   102a0:	2c00      	cmp	r4, #0
   102a2:	d100      	bne.n	102a6 <_strtoul_r+0xe>
   102a4:	4c03      	ldr	r4, [pc, #12]	; (102b4 <_strtoul_r+0x1c>)
   102a6:	9400      	str	r4, [sp, #0]
   102a8:	f7ff ff6e 	bl	10188 <_strtoul_l.isra.0>
   102ac:	bd16      	pop	{r1, r2, r4, pc}
   102ae:	46c0      	nop			; (mov r8, r8)
   102b0:	200000b4 	.word	0x200000b4
   102b4:	20000118 	.word	0x20000118

000102b8 <strtoul>:
   102b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   102ba:	0013      	movs	r3, r2
   102bc:	4a06      	ldr	r2, [pc, #24]	; (102d8 <strtoul+0x20>)
   102be:	0005      	movs	r5, r0
   102c0:	6810      	ldr	r0, [r2, #0]
   102c2:	6a04      	ldr	r4, [r0, #32]
   102c4:	2c00      	cmp	r4, #0
   102c6:	d100      	bne.n	102ca <strtoul+0x12>
   102c8:	4c04      	ldr	r4, [pc, #16]	; (102dc <strtoul+0x24>)
   102ca:	000a      	movs	r2, r1
   102cc:	9400      	str	r4, [sp, #0]
   102ce:	0029      	movs	r1, r5
   102d0:	f7ff ff5a 	bl	10188 <_strtoul_l.isra.0>
   102d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   102d6:	46c0      	nop			; (mov r8, r8)
   102d8:	200000b4 	.word	0x200000b4
   102dc:	20000118 	.word	0x20000118

000102e0 <_write_r>:
   102e0:	b570      	push	{r4, r5, r6, lr}
   102e2:	0005      	movs	r5, r0
   102e4:	0008      	movs	r0, r1
   102e6:	0011      	movs	r1, r2
   102e8:	2200      	movs	r2, #0
   102ea:	4c06      	ldr	r4, [pc, #24]	; (10304 <_write_r+0x24>)
   102ec:	6022      	str	r2, [r4, #0]
   102ee:	001a      	movs	r2, r3
   102f0:	f000 fc6e 	bl	10bd0 <_write>
   102f4:	1c43      	adds	r3, r0, #1
   102f6:	d103      	bne.n	10300 <_write_r+0x20>
   102f8:	6823      	ldr	r3, [r4, #0]
   102fa:	2b00      	cmp	r3, #0
   102fc:	d000      	beq.n	10300 <_write_r+0x20>
   102fe:	602b      	str	r3, [r5, #0]
   10300:	bd70      	pop	{r4, r5, r6, pc}
   10302:	46c0      	nop			; (mov r8, r8)
   10304:	20001fa8 	.word	0x20001fa8

00010308 <_close_r>:
   10308:	2300      	movs	r3, #0
   1030a:	b570      	push	{r4, r5, r6, lr}
   1030c:	4c06      	ldr	r4, [pc, #24]	; (10328 <_close_r+0x20>)
   1030e:	0005      	movs	r5, r0
   10310:	0008      	movs	r0, r1
   10312:	6023      	str	r3, [r4, #0]
   10314:	f000 fc16 	bl	10b44 <_close>
   10318:	1c43      	adds	r3, r0, #1
   1031a:	d103      	bne.n	10324 <_close_r+0x1c>
   1031c:	6823      	ldr	r3, [r4, #0]
   1031e:	2b00      	cmp	r3, #0
   10320:	d000      	beq.n	10324 <_close_r+0x1c>
   10322:	602b      	str	r3, [r5, #0]
   10324:	bd70      	pop	{r4, r5, r6, pc}
   10326:	46c0      	nop			; (mov r8, r8)
   10328:	20001fa8 	.word	0x20001fa8

0001032c <__env_lock>:
   1032c:	4770      	bx	lr

0001032e <__env_unlock>:
   1032e:	4770      	bx	lr

00010330 <_fstat_r>:
   10330:	2300      	movs	r3, #0
   10332:	b570      	push	{r4, r5, r6, lr}
   10334:	4c06      	ldr	r4, [pc, #24]	; (10350 <_fstat_r+0x20>)
   10336:	0005      	movs	r5, r0
   10338:	0008      	movs	r0, r1
   1033a:	0011      	movs	r1, r2
   1033c:	6023      	str	r3, [r4, #0]
   1033e:	f000 fc09 	bl	10b54 <_fstat>
   10342:	1c43      	adds	r3, r0, #1
   10344:	d103      	bne.n	1034e <_fstat_r+0x1e>
   10346:	6823      	ldr	r3, [r4, #0]
   10348:	2b00      	cmp	r3, #0
   1034a:	d000      	beq.n	1034e <_fstat_r+0x1e>
   1034c:	602b      	str	r3, [r5, #0]
   1034e:	bd70      	pop	{r4, r5, r6, pc}
   10350:	20001fa8 	.word	0x20001fa8

00010354 <_isatty_r>:
   10354:	2300      	movs	r3, #0
   10356:	b570      	push	{r4, r5, r6, lr}
   10358:	4c06      	ldr	r4, [pc, #24]	; (10374 <_isatty_r+0x20>)
   1035a:	0005      	movs	r5, r0
   1035c:	0008      	movs	r0, r1
   1035e:	6023      	str	r3, [r4, #0]
   10360:	f000 fc08 	bl	10b74 <_isatty>
   10364:	1c43      	adds	r3, r0, #1
   10366:	d103      	bne.n	10370 <_isatty_r+0x1c>
   10368:	6823      	ldr	r3, [r4, #0]
   1036a:	2b00      	cmp	r3, #0
   1036c:	d000      	beq.n	10370 <_isatty_r+0x1c>
   1036e:	602b      	str	r3, [r5, #0]
   10370:	bd70      	pop	{r4, r5, r6, pc}
   10372:	46c0      	nop			; (mov r8, r8)
   10374:	20001fa8 	.word	0x20001fa8

00010378 <_lseek_r>:
   10378:	b570      	push	{r4, r5, r6, lr}
   1037a:	0005      	movs	r5, r0
   1037c:	0008      	movs	r0, r1
   1037e:	0011      	movs	r1, r2
   10380:	2200      	movs	r2, #0
   10382:	4c06      	ldr	r4, [pc, #24]	; (1039c <_lseek_r+0x24>)
   10384:	6022      	str	r2, [r4, #0]
   10386:	001a      	movs	r2, r3
   10388:	f000 fc04 	bl	10b94 <_lseek>
   1038c:	1c43      	adds	r3, r0, #1
   1038e:	d103      	bne.n	10398 <_lseek_r+0x20>
   10390:	6823      	ldr	r3, [r4, #0]
   10392:	2b00      	cmp	r3, #0
   10394:	d000      	beq.n	10398 <_lseek_r+0x20>
   10396:	602b      	str	r3, [r5, #0]
   10398:	bd70      	pop	{r4, r5, r6, pc}
   1039a:	46c0      	nop			; (mov r8, r8)
   1039c:	20001fa8 	.word	0x20001fa8

000103a0 <_malloc_usable_size_r>:
   103a0:	1f0b      	subs	r3, r1, #4
   103a2:	681b      	ldr	r3, [r3, #0]
   103a4:	1f18      	subs	r0, r3, #4
   103a6:	2b00      	cmp	r3, #0
   103a8:	da01      	bge.n	103ae <_malloc_usable_size_r+0xe>
   103aa:	580b      	ldr	r3, [r1, r0]
   103ac:	18c0      	adds	r0, r0, r3
   103ae:	4770      	bx	lr

000103b0 <_sungetc_r>:
   103b0:	b570      	push	{r4, r5, r6, lr}
   103b2:	0014      	movs	r4, r2
   103b4:	1c4b      	adds	r3, r1, #1
   103b6:	d103      	bne.n	103c0 <_sungetc_r+0x10>
   103b8:	2501      	movs	r5, #1
   103ba:	426d      	negs	r5, r5
   103bc:	0028      	movs	r0, r5
   103be:	bd70      	pop	{r4, r5, r6, pc}
   103c0:	8993      	ldrh	r3, [r2, #12]
   103c2:	2220      	movs	r2, #32
   103c4:	4393      	bics	r3, r2
   103c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   103c8:	81a3      	strh	r3, [r4, #12]
   103ca:	b2ce      	uxtb	r6, r1
   103cc:	b2cd      	uxtb	r5, r1
   103ce:	6863      	ldr	r3, [r4, #4]
   103d0:	2a00      	cmp	r2, #0
   103d2:	d010      	beq.n	103f6 <_sungetc_r+0x46>
   103d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   103d6:	4293      	cmp	r3, r2
   103d8:	da07      	bge.n	103ea <_sungetc_r+0x3a>
   103da:	6823      	ldr	r3, [r4, #0]
   103dc:	3b01      	subs	r3, #1
   103de:	6023      	str	r3, [r4, #0]
   103e0:	701e      	strb	r6, [r3, #0]
   103e2:	6863      	ldr	r3, [r4, #4]
   103e4:	3301      	adds	r3, #1
   103e6:	6063      	str	r3, [r4, #4]
   103e8:	e7e8      	b.n	103bc <_sungetc_r+0xc>
   103ea:	0021      	movs	r1, r4
   103ec:	f000 fb6c 	bl	10ac8 <__submore>
   103f0:	2800      	cmp	r0, #0
   103f2:	d0f2      	beq.n	103da <_sungetc_r+0x2a>
   103f4:	e7e0      	b.n	103b8 <_sungetc_r+0x8>
   103f6:	6921      	ldr	r1, [r4, #16]
   103f8:	6822      	ldr	r2, [r4, #0]
   103fa:	2900      	cmp	r1, #0
   103fc:	d007      	beq.n	1040e <_sungetc_r+0x5e>
   103fe:	4291      	cmp	r1, r2
   10400:	d205      	bcs.n	1040e <_sungetc_r+0x5e>
   10402:	1e51      	subs	r1, r2, #1
   10404:	7808      	ldrb	r0, [r1, #0]
   10406:	4285      	cmp	r5, r0
   10408:	d101      	bne.n	1040e <_sungetc_r+0x5e>
   1040a:	6021      	str	r1, [r4, #0]
   1040c:	e7ea      	b.n	103e4 <_sungetc_r+0x34>
   1040e:	6423      	str	r3, [r4, #64]	; 0x40
   10410:	0023      	movs	r3, r4
   10412:	3344      	adds	r3, #68	; 0x44
   10414:	6363      	str	r3, [r4, #52]	; 0x34
   10416:	2303      	movs	r3, #3
   10418:	63a3      	str	r3, [r4, #56]	; 0x38
   1041a:	0023      	movs	r3, r4
   1041c:	3346      	adds	r3, #70	; 0x46
   1041e:	63e2      	str	r2, [r4, #60]	; 0x3c
   10420:	701e      	strb	r6, [r3, #0]
   10422:	6023      	str	r3, [r4, #0]
   10424:	2301      	movs	r3, #1
   10426:	e7de      	b.n	103e6 <_sungetc_r+0x36>

00010428 <__ssrefill_r>:
   10428:	b510      	push	{r4, lr}
   1042a:	000c      	movs	r4, r1
   1042c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1042e:	2900      	cmp	r1, #0
   10430:	d00e      	beq.n	10450 <__ssrefill_r+0x28>
   10432:	0023      	movs	r3, r4
   10434:	3344      	adds	r3, #68	; 0x44
   10436:	4299      	cmp	r1, r3
   10438:	d001      	beq.n	1043e <__ssrefill_r+0x16>
   1043a:	f7fc fda3 	bl	cf84 <_free_r>
   1043e:	2000      	movs	r0, #0
   10440:	6c23      	ldr	r3, [r4, #64]	; 0x40
   10442:	6360      	str	r0, [r4, #52]	; 0x34
   10444:	6063      	str	r3, [r4, #4]
   10446:	4283      	cmp	r3, r0
   10448:	d002      	beq.n	10450 <__ssrefill_r+0x28>
   1044a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1044c:	6023      	str	r3, [r4, #0]
   1044e:	bd10      	pop	{r4, pc}
   10450:	6923      	ldr	r3, [r4, #16]
   10452:	2001      	movs	r0, #1
   10454:	6023      	str	r3, [r4, #0]
   10456:	2300      	movs	r3, #0
   10458:	89a2      	ldrh	r2, [r4, #12]
   1045a:	6063      	str	r3, [r4, #4]
   1045c:	3320      	adds	r3, #32
   1045e:	4313      	orrs	r3, r2
   10460:	81a3      	strh	r3, [r4, #12]
   10462:	4240      	negs	r0, r0
   10464:	e7f3      	b.n	1044e <__ssrefill_r+0x26>
	...

00010468 <__ssvfiscanf_r>:
   10468:	b5f0      	push	{r4, r5, r6, r7, lr}
   1046a:	4cbd      	ldr	r4, [pc, #756]	; (10760 <__ssvfiscanf_r+0x2f8>)
   1046c:	2586      	movs	r5, #134	; 0x86
   1046e:	44a5      	add	sp, r4
   10470:	9303      	str	r3, [sp, #12]
   10472:	2300      	movs	r3, #0
   10474:	9348      	str	r3, [sp, #288]	; 0x120
   10476:	9349      	str	r3, [sp, #292]	; 0x124
   10478:	ab05      	add	r3, sp, #20
   1047a:	934a      	str	r3, [sp, #296]	; 0x128
   1047c:	23be      	movs	r3, #190	; 0xbe
   1047e:	006d      	lsls	r5, r5, #1
   10480:	9000      	str	r0, [sp, #0]
   10482:	000c      	movs	r4, r1
   10484:	a802      	add	r0, sp, #8
   10486:	49b7      	ldr	r1, [pc, #732]	; (10764 <__ssvfiscanf_r+0x2fc>)
   10488:	005b      	lsls	r3, r3, #1
   1048a:	1940      	adds	r0, r0, r5
   1048c:	27c0      	movs	r7, #192	; 0xc0
   1048e:	50c1      	str	r1, [r0, r3]
   10490:	ab02      	add	r3, sp, #8
   10492:	195b      	adds	r3, r3, r5
   10494:	0015      	movs	r5, r2
   10496:	49b4      	ldr	r1, [pc, #720]	; (10768 <__ssvfiscanf_r+0x300>)
   10498:	007f      	lsls	r7, r7, #1
   1049a:	51d9      	str	r1, [r3, r7]
   1049c:	782b      	ldrb	r3, [r5, #0]
   1049e:	2b00      	cmp	r3, #0
   104a0:	d100      	bne.n	104a4 <__ssvfiscanf_r+0x3c>
   104a2:	e15b      	b.n	1075c <__ssvfiscanf_r+0x2f4>
   104a4:	f7fc fab2 	bl	ca0c <__locale_ctype_ptr>
   104a8:	2208      	movs	r2, #8
   104aa:	782b      	ldrb	r3, [r5, #0]
   104ac:	18c0      	adds	r0, r0, r3
   104ae:	9301      	str	r3, [sp, #4]
   104b0:	7843      	ldrb	r3, [r0, #1]
   104b2:	4013      	ands	r3, r2
   104b4:	d141      	bne.n	1053a <__ssvfiscanf_r+0xd2>
   104b6:	9a01      	ldr	r2, [sp, #4]
   104b8:	1c6e      	adds	r6, r5, #1
   104ba:	2a25      	cmp	r2, #37	; 0x25
   104bc:	d000      	beq.n	104c0 <__ssvfiscanf_r+0x58>
   104be:	e0a8      	b.n	10612 <__ssvfiscanf_r+0x1aa>
   104c0:	9347      	str	r3, [sp, #284]	; 0x11c
   104c2:	9345      	str	r3, [sp, #276]	; 0x114
   104c4:	786b      	ldrb	r3, [r5, #1]
   104c6:	2b2a      	cmp	r3, #42	; 0x2a
   104c8:	d102      	bne.n	104d0 <__ssvfiscanf_r+0x68>
   104ca:	3b1a      	subs	r3, #26
   104cc:	9345      	str	r3, [sp, #276]	; 0x114
   104ce:	1cae      	adds	r6, r5, #2
   104d0:	0035      	movs	r5, r6
   104d2:	220a      	movs	r2, #10
   104d4:	7829      	ldrb	r1, [r5, #0]
   104d6:	000b      	movs	r3, r1
   104d8:	3b30      	subs	r3, #48	; 0x30
   104da:	2b09      	cmp	r3, #9
   104dc:	d948      	bls.n	10570 <__ssvfiscanf_r+0x108>
   104de:	4ea3      	ldr	r6, [pc, #652]	; (1076c <__ssvfiscanf_r+0x304>)
   104e0:	2203      	movs	r2, #3
   104e2:	0030      	movs	r0, r6
   104e4:	f7ff f906 	bl	f6f4 <memchr>
   104e8:	2800      	cmp	r0, #0
   104ea:	d007      	beq.n	104fc <__ssvfiscanf_r+0x94>
   104ec:	2301      	movs	r3, #1
   104ee:	1b80      	subs	r0, r0, r6
   104f0:	4083      	lsls	r3, r0
   104f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
   104f4:	3501      	adds	r5, #1
   104f6:	4313      	orrs	r3, r2
   104f8:	9202      	str	r2, [sp, #8]
   104fa:	9345      	str	r3, [sp, #276]	; 0x114
   104fc:	782b      	ldrb	r3, [r5, #0]
   104fe:	1c6e      	adds	r6, r5, #1
   10500:	2b67      	cmp	r3, #103	; 0x67
   10502:	d858      	bhi.n	105b6 <__ssvfiscanf_r+0x14e>
   10504:	2b65      	cmp	r3, #101	; 0x65
   10506:	d300      	bcc.n	1050a <__ssvfiscanf_r+0xa2>
   10508:	e0dd      	b.n	106c6 <__ssvfiscanf_r+0x25e>
   1050a:	2b47      	cmp	r3, #71	; 0x47
   1050c:	d838      	bhi.n	10580 <__ssvfiscanf_r+0x118>
   1050e:	2b45      	cmp	r3, #69	; 0x45
   10510:	d300      	bcc.n	10514 <__ssvfiscanf_r+0xac>
   10512:	e0d8      	b.n	106c6 <__ssvfiscanf_r+0x25e>
   10514:	2b00      	cmp	r3, #0
   10516:	d100      	bne.n	1051a <__ssvfiscanf_r+0xb2>
   10518:	e11d      	b.n	10756 <__ssvfiscanf_r+0x2ee>
   1051a:	2b25      	cmp	r3, #37	; 0x25
   1051c:	d079      	beq.n	10612 <__ssvfiscanf_r+0x1aa>
   1051e:	2303      	movs	r3, #3
   10520:	934b      	str	r3, [sp, #300]	; 0x12c
   10522:	3307      	adds	r3, #7
   10524:	9346      	str	r3, [sp, #280]	; 0x118
   10526:	e053      	b.n	105d0 <__ssvfiscanf_r+0x168>
   10528:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1052a:	3301      	adds	r3, #1
   1052c:	9201      	str	r2, [sp, #4]
   1052e:	3201      	adds	r2, #1
   10530:	9249      	str	r2, [sp, #292]	; 0x124
   10532:	6862      	ldr	r2, [r4, #4]
   10534:	6023      	str	r3, [r4, #0]
   10536:	3a01      	subs	r2, #1
   10538:	6062      	str	r2, [r4, #4]
   1053a:	6863      	ldr	r3, [r4, #4]
   1053c:	2b00      	cmp	r3, #0
   1053e:	dd0b      	ble.n	10558 <__ssvfiscanf_r+0xf0>
   10540:	f7fc fa64 	bl	ca0c <__locale_ctype_ptr>
   10544:	2108      	movs	r1, #8
   10546:	6823      	ldr	r3, [r4, #0]
   10548:	781a      	ldrb	r2, [r3, #0]
   1054a:	1880      	adds	r0, r0, r2
   1054c:	7842      	ldrb	r2, [r0, #1]
   1054e:	420a      	tst	r2, r1
   10550:	d1ea      	bne.n	10528 <__ssvfiscanf_r+0xc0>
   10552:	1c6e      	adds	r6, r5, #1
   10554:	0035      	movs	r5, r6
   10556:	e7a1      	b.n	1049c <__ssvfiscanf_r+0x34>
   10558:	2286      	movs	r2, #134	; 0x86
   1055a:	ab02      	add	r3, sp, #8
   1055c:	0052      	lsls	r2, r2, #1
   1055e:	189b      	adds	r3, r3, r2
   10560:	59db      	ldr	r3, [r3, r7]
   10562:	0021      	movs	r1, r4
   10564:	9800      	ldr	r0, [sp, #0]
   10566:	9301      	str	r3, [sp, #4]
   10568:	4798      	blx	r3
   1056a:	2800      	cmp	r0, #0
   1056c:	d0e8      	beq.n	10540 <__ssvfiscanf_r+0xd8>
   1056e:	e7f0      	b.n	10552 <__ssvfiscanf_r+0xea>
   10570:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   10572:	3501      	adds	r5, #1
   10574:	9302      	str	r3, [sp, #8]
   10576:	4353      	muls	r3, r2
   10578:	3b30      	subs	r3, #48	; 0x30
   1057a:	1859      	adds	r1, r3, r1
   1057c:	9147      	str	r1, [sp, #284]	; 0x11c
   1057e:	e7a9      	b.n	104d4 <__ssvfiscanf_r+0x6c>
   10580:	2b5b      	cmp	r3, #91	; 0x5b
   10582:	d100      	bne.n	10586 <__ssvfiscanf_r+0x11e>
   10584:	e077      	b.n	10676 <__ssvfiscanf_r+0x20e>
   10586:	d80f      	bhi.n	105a8 <__ssvfiscanf_r+0x140>
   10588:	2b58      	cmp	r3, #88	; 0x58
   1058a:	d1c8      	bne.n	1051e <__ssvfiscanf_r+0xb6>
   1058c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1058e:	9201      	str	r2, [sp, #4]
   10590:	2280      	movs	r2, #128	; 0x80
   10592:	9901      	ldr	r1, [sp, #4]
   10594:	0092      	lsls	r2, r2, #2
   10596:	430a      	orrs	r2, r1
   10598:	9245      	str	r2, [sp, #276]	; 0x114
   1059a:	2210      	movs	r2, #16
   1059c:	9246      	str	r2, [sp, #280]	; 0x118
   1059e:	2203      	movs	r2, #3
   105a0:	2b6e      	cmp	r3, #110	; 0x6e
   105a2:	dd14      	ble.n	105ce <__ssvfiscanf_r+0x166>
   105a4:	3201      	adds	r2, #1
   105a6:	e012      	b.n	105ce <__ssvfiscanf_r+0x166>
   105a8:	2b63      	cmp	r3, #99	; 0x63
   105aa:	d100      	bne.n	105ae <__ssvfiscanf_r+0x146>
   105ac:	e071      	b.n	10692 <__ssvfiscanf_r+0x22a>
   105ae:	2b64      	cmp	r3, #100	; 0x64
   105b0:	d1b5      	bne.n	1051e <__ssvfiscanf_r+0xb6>
   105b2:	220a      	movs	r2, #10
   105b4:	e7f2      	b.n	1059c <__ssvfiscanf_r+0x134>
   105b6:	2b70      	cmp	r3, #112	; 0x70
   105b8:	d052      	beq.n	10660 <__ssvfiscanf_r+0x1f8>
   105ba:	d822      	bhi.n	10602 <__ssvfiscanf_r+0x19a>
   105bc:	2b6e      	cmp	r3, #110	; 0x6e
   105be:	d100      	bne.n	105c2 <__ssvfiscanf_r+0x15a>
   105c0:	e06f      	b.n	106a2 <__ssvfiscanf_r+0x23a>
   105c2:	d854      	bhi.n	1066e <__ssvfiscanf_r+0x206>
   105c4:	2b69      	cmp	r3, #105	; 0x69
   105c6:	d1aa      	bne.n	1051e <__ssvfiscanf_r+0xb6>
   105c8:	2300      	movs	r3, #0
   105ca:	2203      	movs	r2, #3
   105cc:	9346      	str	r3, [sp, #280]	; 0x118
   105ce:	924b      	str	r2, [sp, #300]	; 0x12c
   105d0:	6863      	ldr	r3, [r4, #4]
   105d2:	2b00      	cmp	r3, #0
   105d4:	dc00      	bgt.n	105d8 <__ssvfiscanf_r+0x170>
   105d6:	e078      	b.n	106ca <__ssvfiscanf_r+0x262>
   105d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
   105da:	9301      	str	r3, [sp, #4]
   105dc:	065b      	lsls	r3, r3, #25
   105de:	d400      	bmi.n	105e2 <__ssvfiscanf_r+0x17a>
   105e0:	e08b      	b.n	106fa <__ssvfiscanf_r+0x292>
   105e2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   105e4:	2b02      	cmp	r3, #2
   105e6:	dd00      	ble.n	105ea <__ssvfiscanf_r+0x182>
   105e8:	e09d      	b.n	10726 <__ssvfiscanf_r+0x2be>
   105ea:	ab03      	add	r3, sp, #12
   105ec:	0022      	movs	r2, r4
   105ee:	a945      	add	r1, sp, #276	; 0x114
   105f0:	9800      	ldr	r0, [sp, #0]
   105f2:	f000 f8bf 	bl	10774 <_scanf_chars>
   105f6:	2801      	cmp	r0, #1
   105f8:	d100      	bne.n	105fc <__ssvfiscanf_r+0x194>
   105fa:	e0af      	b.n	1075c <__ssvfiscanf_r+0x2f4>
   105fc:	2802      	cmp	r0, #2
   105fe:	d1a9      	bne.n	10554 <__ssvfiscanf_r+0xec>
   10600:	e025      	b.n	1064e <__ssvfiscanf_r+0x1e6>
   10602:	2b75      	cmp	r3, #117	; 0x75
   10604:	d0d5      	beq.n	105b2 <__ssvfiscanf_r+0x14a>
   10606:	2b78      	cmp	r3, #120	; 0x78
   10608:	d0c0      	beq.n	1058c <__ssvfiscanf_r+0x124>
   1060a:	2b73      	cmp	r3, #115	; 0x73
   1060c:	d187      	bne.n	1051e <__ssvfiscanf_r+0xb6>
   1060e:	2302      	movs	r3, #2
   10610:	e03d      	b.n	1068e <__ssvfiscanf_r+0x226>
   10612:	6863      	ldr	r3, [r4, #4]
   10614:	2b00      	cmp	r3, #0
   10616:	dd0f      	ble.n	10638 <__ssvfiscanf_r+0x1d0>
   10618:	6823      	ldr	r3, [r4, #0]
   1061a:	9901      	ldr	r1, [sp, #4]
   1061c:	781a      	ldrb	r2, [r3, #0]
   1061e:	4291      	cmp	r1, r2
   10620:	d000      	beq.n	10624 <__ssvfiscanf_r+0x1bc>
   10622:	e09b      	b.n	1075c <__ssvfiscanf_r+0x2f4>
   10624:	3301      	adds	r3, #1
   10626:	6862      	ldr	r2, [r4, #4]
   10628:	6023      	str	r3, [r4, #0]
   1062a:	9b49      	ldr	r3, [sp, #292]	; 0x124
   1062c:	3a01      	subs	r2, #1
   1062e:	9301      	str	r3, [sp, #4]
   10630:	3301      	adds	r3, #1
   10632:	6062      	str	r2, [r4, #4]
   10634:	9349      	str	r3, [sp, #292]	; 0x124
   10636:	e78d      	b.n	10554 <__ssvfiscanf_r+0xec>
   10638:	2286      	movs	r2, #134	; 0x86
   1063a:	ab02      	add	r3, sp, #8
   1063c:	0052      	lsls	r2, r2, #1
   1063e:	189b      	adds	r3, r3, r2
   10640:	59db      	ldr	r3, [r3, r7]
   10642:	0021      	movs	r1, r4
   10644:	9800      	ldr	r0, [sp, #0]
   10646:	9302      	str	r3, [sp, #8]
   10648:	4798      	blx	r3
   1064a:	2800      	cmp	r0, #0
   1064c:	d0e4      	beq.n	10618 <__ssvfiscanf_r+0x1b0>
   1064e:	9848      	ldr	r0, [sp, #288]	; 0x120
   10650:	2800      	cmp	r0, #0
   10652:	d000      	beq.n	10656 <__ssvfiscanf_r+0x1ee>
   10654:	e07b      	b.n	1074e <__ssvfiscanf_r+0x2e6>
   10656:	3801      	subs	r0, #1
   10658:	23a7      	movs	r3, #167	; 0xa7
   1065a:	009b      	lsls	r3, r3, #2
   1065c:	449d      	add	sp, r3
   1065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10660:	9a45      	ldr	r2, [sp, #276]	; 0x114
   10662:	9201      	str	r2, [sp, #4]
   10664:	2220      	movs	r2, #32
   10666:	9901      	ldr	r1, [sp, #4]
   10668:	430a      	orrs	r2, r1
   1066a:	9245      	str	r2, [sp, #276]	; 0x114
   1066c:	e78e      	b.n	1058c <__ssvfiscanf_r+0x124>
   1066e:	2308      	movs	r3, #8
   10670:	2204      	movs	r2, #4
   10672:	9346      	str	r3, [sp, #280]	; 0x118
   10674:	e7ab      	b.n	105ce <__ssvfiscanf_r+0x166>
   10676:	0031      	movs	r1, r6
   10678:	a805      	add	r0, sp, #20
   1067a:	f000 f9f3 	bl	10a64 <__sccl>
   1067e:	9b45      	ldr	r3, [sp, #276]	; 0x114
   10680:	0006      	movs	r6, r0
   10682:	9301      	str	r3, [sp, #4]
   10684:	2340      	movs	r3, #64	; 0x40
   10686:	9a01      	ldr	r2, [sp, #4]
   10688:	4313      	orrs	r3, r2
   1068a:	9345      	str	r3, [sp, #276]	; 0x114
   1068c:	2301      	movs	r3, #1
   1068e:	934b      	str	r3, [sp, #300]	; 0x12c
   10690:	e79e      	b.n	105d0 <__ssvfiscanf_r+0x168>
   10692:	9b45      	ldr	r3, [sp, #276]	; 0x114
   10694:	9301      	str	r3, [sp, #4]
   10696:	2340      	movs	r3, #64	; 0x40
   10698:	9a01      	ldr	r2, [sp, #4]
   1069a:	4313      	orrs	r3, r2
   1069c:	9345      	str	r3, [sp, #276]	; 0x114
   1069e:	2300      	movs	r3, #0
   106a0:	e7f5      	b.n	1068e <__ssvfiscanf_r+0x226>
   106a2:	9945      	ldr	r1, [sp, #276]	; 0x114
   106a4:	06cb      	lsls	r3, r1, #27
   106a6:	d500      	bpl.n	106aa <__ssvfiscanf_r+0x242>
   106a8:	e754      	b.n	10554 <__ssvfiscanf_r+0xec>
   106aa:	9b03      	ldr	r3, [sp, #12]
   106ac:	9a49      	ldr	r2, [sp, #292]	; 0x124
   106ae:	07c8      	lsls	r0, r1, #31
   106b0:	d504      	bpl.n	106bc <__ssvfiscanf_r+0x254>
   106b2:	1d19      	adds	r1, r3, #4
   106b4:	9103      	str	r1, [sp, #12]
   106b6:	681b      	ldr	r3, [r3, #0]
   106b8:	801a      	strh	r2, [r3, #0]
   106ba:	e74b      	b.n	10554 <__ssvfiscanf_r+0xec>
   106bc:	1d19      	adds	r1, r3, #4
   106be:	9103      	str	r1, [sp, #12]
   106c0:	681b      	ldr	r3, [r3, #0]
   106c2:	601a      	str	r2, [r3, #0]
   106c4:	e746      	b.n	10554 <__ssvfiscanf_r+0xec>
   106c6:	2305      	movs	r3, #5
   106c8:	e7e1      	b.n	1068e <__ssvfiscanf_r+0x226>
   106ca:	2286      	movs	r2, #134	; 0x86
   106cc:	ab02      	add	r3, sp, #8
   106ce:	0052      	lsls	r2, r2, #1
   106d0:	189b      	adds	r3, r3, r2
   106d2:	59db      	ldr	r3, [r3, r7]
   106d4:	0021      	movs	r1, r4
   106d6:	9800      	ldr	r0, [sp, #0]
   106d8:	9301      	str	r3, [sp, #4]
   106da:	4798      	blx	r3
   106dc:	2800      	cmp	r0, #0
   106de:	d100      	bne.n	106e2 <__ssvfiscanf_r+0x27a>
   106e0:	e77a      	b.n	105d8 <__ssvfiscanf_r+0x170>
   106e2:	e7b4      	b.n	1064e <__ssvfiscanf_r+0x1e6>
   106e4:	9a49      	ldr	r2, [sp, #292]	; 0x124
   106e6:	9201      	str	r2, [sp, #4]
   106e8:	3201      	adds	r2, #1
   106ea:	9249      	str	r2, [sp, #292]	; 0x124
   106ec:	6862      	ldr	r2, [r4, #4]
   106ee:	3a01      	subs	r2, #1
   106f0:	6062      	str	r2, [r4, #4]
   106f2:	2a00      	cmp	r2, #0
   106f4:	dd0b      	ble.n	1070e <__ssvfiscanf_r+0x2a6>
   106f6:	3301      	adds	r3, #1
   106f8:	6023      	str	r3, [r4, #0]
   106fa:	f7fc f987 	bl	ca0c <__locale_ctype_ptr>
   106fe:	2108      	movs	r1, #8
   10700:	6823      	ldr	r3, [r4, #0]
   10702:	781a      	ldrb	r2, [r3, #0]
   10704:	1880      	adds	r0, r0, r2
   10706:	7842      	ldrb	r2, [r0, #1]
   10708:	420a      	tst	r2, r1
   1070a:	d1eb      	bne.n	106e4 <__ssvfiscanf_r+0x27c>
   1070c:	e769      	b.n	105e2 <__ssvfiscanf_r+0x17a>
   1070e:	2286      	movs	r2, #134	; 0x86
   10710:	ab02      	add	r3, sp, #8
   10712:	0052      	lsls	r2, r2, #1
   10714:	189b      	adds	r3, r3, r2
   10716:	59db      	ldr	r3, [r3, r7]
   10718:	0021      	movs	r1, r4
   1071a:	9800      	ldr	r0, [sp, #0]
   1071c:	9301      	str	r3, [sp, #4]
   1071e:	4798      	blx	r3
   10720:	2800      	cmp	r0, #0
   10722:	d0ea      	beq.n	106fa <__ssvfiscanf_r+0x292>
   10724:	e793      	b.n	1064e <__ssvfiscanf_r+0x1e6>
   10726:	2b04      	cmp	r3, #4
   10728:	dc06      	bgt.n	10738 <__ssvfiscanf_r+0x2d0>
   1072a:	ab03      	add	r3, sp, #12
   1072c:	0022      	movs	r2, r4
   1072e:	a945      	add	r1, sp, #276	; 0x114
   10730:	9800      	ldr	r0, [sp, #0]
   10732:	f000 f883 	bl	1083c <_scanf_i>
   10736:	e75e      	b.n	105f6 <__ssvfiscanf_r+0x18e>
   10738:	4b0d      	ldr	r3, [pc, #52]	; (10770 <__ssvfiscanf_r+0x308>)
   1073a:	2b00      	cmp	r3, #0
   1073c:	d100      	bne.n	10740 <__ssvfiscanf_r+0x2d8>
   1073e:	e709      	b.n	10554 <__ssvfiscanf_r+0xec>
   10740:	ab03      	add	r3, sp, #12
   10742:	0022      	movs	r2, r4
   10744:	a945      	add	r1, sp, #276	; 0x114
   10746:	9800      	ldr	r0, [sp, #0]
   10748:	e000      	b.n	1074c <__ssvfiscanf_r+0x2e4>
   1074a:	bf00      	nop
   1074c:	e753      	b.n	105f6 <__ssvfiscanf_r+0x18e>
   1074e:	89a3      	ldrh	r3, [r4, #12]
   10750:	065b      	lsls	r3, r3, #25
   10752:	d400      	bmi.n	10756 <__ssvfiscanf_r+0x2ee>
   10754:	e780      	b.n	10658 <__ssvfiscanf_r+0x1f0>
   10756:	2001      	movs	r0, #1
   10758:	4240      	negs	r0, r0
   1075a:	e77d      	b.n	10658 <__ssvfiscanf_r+0x1f0>
   1075c:	9848      	ldr	r0, [sp, #288]	; 0x120
   1075e:	e77b      	b.n	10658 <__ssvfiscanf_r+0x1f0>
   10760:	fffffd64 	.word	0xfffffd64
   10764:	000103b1 	.word	0x000103b1
   10768:	00010429 	.word	0x00010429
   1076c:	0001298e 	.word	0x0001298e
   10770:	00000000 	.word	0x00000000

00010774 <_scanf_chars>:
   10774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10776:	0015      	movs	r5, r2
   10778:	688a      	ldr	r2, [r1, #8]
   1077a:	9001      	str	r0, [sp, #4]
   1077c:	000c      	movs	r4, r1
   1077e:	2a00      	cmp	r2, #0
   10780:	d106      	bne.n	10790 <_scanf_chars+0x1c>
   10782:	698a      	ldr	r2, [r1, #24]
   10784:	1e51      	subs	r1, r2, #1
   10786:	418a      	sbcs	r2, r1
   10788:	2101      	movs	r1, #1
   1078a:	4252      	negs	r2, r2
   1078c:	430a      	orrs	r2, r1
   1078e:	60a2      	str	r2, [r4, #8]
   10790:	6822      	ldr	r2, [r4, #0]
   10792:	06d2      	lsls	r2, r2, #27
   10794:	d403      	bmi.n	1079e <_scanf_chars+0x2a>
   10796:	681a      	ldr	r2, [r3, #0]
   10798:	1d11      	adds	r1, r2, #4
   1079a:	6019      	str	r1, [r3, #0]
   1079c:	6817      	ldr	r7, [r2, #0]
   1079e:	2600      	movs	r6, #0
   107a0:	69a3      	ldr	r3, [r4, #24]
   107a2:	2b00      	cmp	r3, #0
   107a4:	d01c      	beq.n	107e0 <_scanf_chars+0x6c>
   107a6:	2b01      	cmp	r3, #1
   107a8:	d108      	bne.n	107bc <_scanf_chars+0x48>
   107aa:	682b      	ldr	r3, [r5, #0]
   107ac:	6962      	ldr	r2, [r4, #20]
   107ae:	781b      	ldrb	r3, [r3, #0]
   107b0:	5cd3      	ldrb	r3, [r2, r3]
   107b2:	2b00      	cmp	r3, #0
   107b4:	d114      	bne.n	107e0 <_scanf_chars+0x6c>
   107b6:	2e00      	cmp	r6, #0
   107b8:	d130      	bne.n	1081c <_scanf_chars+0xa8>
   107ba:	e006      	b.n	107ca <_scanf_chars+0x56>
   107bc:	2b02      	cmp	r3, #2
   107be:	d006      	beq.n	107ce <_scanf_chars+0x5a>
   107c0:	2e00      	cmp	r6, #0
   107c2:	d12b      	bne.n	1081c <_scanf_chars+0xa8>
   107c4:	69a3      	ldr	r3, [r4, #24]
   107c6:	2b01      	cmp	r3, #1
   107c8:	d128      	bne.n	1081c <_scanf_chars+0xa8>
   107ca:	2001      	movs	r0, #1
   107cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   107ce:	f7fc f91d 	bl	ca0c <__locale_ctype_ptr>
   107d2:	2208      	movs	r2, #8
   107d4:	682b      	ldr	r3, [r5, #0]
   107d6:	781b      	ldrb	r3, [r3, #0]
   107d8:	18c0      	adds	r0, r0, r3
   107da:	7843      	ldrb	r3, [r0, #1]
   107dc:	4213      	tst	r3, r2
   107de:	d1ef      	bne.n	107c0 <_scanf_chars+0x4c>
   107e0:	2210      	movs	r2, #16
   107e2:	6823      	ldr	r3, [r4, #0]
   107e4:	3601      	adds	r6, #1
   107e6:	4213      	tst	r3, r2
   107e8:	d103      	bne.n	107f2 <_scanf_chars+0x7e>
   107ea:	682b      	ldr	r3, [r5, #0]
   107ec:	781b      	ldrb	r3, [r3, #0]
   107ee:	703b      	strb	r3, [r7, #0]
   107f0:	3701      	adds	r7, #1
   107f2:	682a      	ldr	r2, [r5, #0]
   107f4:	686b      	ldr	r3, [r5, #4]
   107f6:	3201      	adds	r2, #1
   107f8:	602a      	str	r2, [r5, #0]
   107fa:	68a2      	ldr	r2, [r4, #8]
   107fc:	3b01      	subs	r3, #1
   107fe:	3a01      	subs	r2, #1
   10800:	606b      	str	r3, [r5, #4]
   10802:	60a2      	str	r2, [r4, #8]
   10804:	2a00      	cmp	r2, #0
   10806:	d009      	beq.n	1081c <_scanf_chars+0xa8>
   10808:	2b00      	cmp	r3, #0
   1080a:	dcc9      	bgt.n	107a0 <_scanf_chars+0x2c>
   1080c:	23c0      	movs	r3, #192	; 0xc0
   1080e:	005b      	lsls	r3, r3, #1
   10810:	58e3      	ldr	r3, [r4, r3]
   10812:	0029      	movs	r1, r5
   10814:	9801      	ldr	r0, [sp, #4]
   10816:	4798      	blx	r3
   10818:	2800      	cmp	r0, #0
   1081a:	d0c1      	beq.n	107a0 <_scanf_chars+0x2c>
   1081c:	2310      	movs	r3, #16
   1081e:	6822      	ldr	r2, [r4, #0]
   10820:	4013      	ands	r3, r2
   10822:	d106      	bne.n	10832 <_scanf_chars+0xbe>
   10824:	68e2      	ldr	r2, [r4, #12]
   10826:	3201      	adds	r2, #1
   10828:	60e2      	str	r2, [r4, #12]
   1082a:	69a2      	ldr	r2, [r4, #24]
   1082c:	2a00      	cmp	r2, #0
   1082e:	d000      	beq.n	10832 <_scanf_chars+0xbe>
   10830:	703b      	strb	r3, [r7, #0]
   10832:	6923      	ldr	r3, [r4, #16]
   10834:	2000      	movs	r0, #0
   10836:	199e      	adds	r6, r3, r6
   10838:	6126      	str	r6, [r4, #16]
   1083a:	e7c7      	b.n	107cc <_scanf_chars+0x58>

0001083c <_scanf_i>:
   1083c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1083e:	000c      	movs	r4, r1
   10840:	b08d      	sub	sp, #52	; 0x34
   10842:	9302      	str	r3, [sp, #8]
   10844:	4b77      	ldr	r3, [pc, #476]	; (10a24 <_scanf_i+0x1e8>)
   10846:	9005      	str	r0, [sp, #20]
   10848:	0016      	movs	r6, r2
   1084a:	aa09      	add	r2, sp, #36	; 0x24
   1084c:	cb23      	ldmia	r3!, {r0, r1, r5}
   1084e:	c223      	stmia	r2!, {r0, r1, r5}
   10850:	4b75      	ldr	r3, [pc, #468]	; (10a28 <_scanf_i+0x1ec>)
   10852:	9306      	str	r3, [sp, #24]
   10854:	69a3      	ldr	r3, [r4, #24]
   10856:	2b03      	cmp	r3, #3
   10858:	d001      	beq.n	1085e <_scanf_i+0x22>
   1085a:	4b74      	ldr	r3, [pc, #464]	; (10a2c <_scanf_i+0x1f0>)
   1085c:	9306      	str	r3, [sp, #24]
   1085e:	22ae      	movs	r2, #174	; 0xae
   10860:	2000      	movs	r0, #0
   10862:	68a3      	ldr	r3, [r4, #8]
   10864:	0052      	lsls	r2, r2, #1
   10866:	1e59      	subs	r1, r3, #1
   10868:	9004      	str	r0, [sp, #16]
   1086a:	4291      	cmp	r1, r2
   1086c:	d905      	bls.n	1087a <_scanf_i+0x3e>
   1086e:	3b5e      	subs	r3, #94	; 0x5e
   10870:	3bff      	subs	r3, #255	; 0xff
   10872:	9304      	str	r3, [sp, #16]
   10874:	235e      	movs	r3, #94	; 0x5e
   10876:	33ff      	adds	r3, #255	; 0xff
   10878:	60a3      	str	r3, [r4, #8]
   1087a:	0023      	movs	r3, r4
   1087c:	331c      	adds	r3, #28
   1087e:	9301      	str	r3, [sp, #4]
   10880:	23d0      	movs	r3, #208	; 0xd0
   10882:	2700      	movs	r7, #0
   10884:	6822      	ldr	r2, [r4, #0]
   10886:	011b      	lsls	r3, r3, #4
   10888:	4313      	orrs	r3, r2
   1088a:	6023      	str	r3, [r4, #0]
   1088c:	9b01      	ldr	r3, [sp, #4]
   1088e:	9303      	str	r3, [sp, #12]
   10890:	6833      	ldr	r3, [r6, #0]
   10892:	a809      	add	r0, sp, #36	; 0x24
   10894:	7819      	ldrb	r1, [r3, #0]
   10896:	00bb      	lsls	r3, r7, #2
   10898:	2202      	movs	r2, #2
   1089a:	5818      	ldr	r0, [r3, r0]
   1089c:	f7fe ff2a 	bl	f6f4 <memchr>
   108a0:	2800      	cmp	r0, #0
   108a2:	d02b      	beq.n	108fc <_scanf_i+0xc0>
   108a4:	2f01      	cmp	r7, #1
   108a6:	d15f      	bne.n	10968 <_scanf_i+0x12c>
   108a8:	6863      	ldr	r3, [r4, #4]
   108aa:	2b00      	cmp	r3, #0
   108ac:	d106      	bne.n	108bc <_scanf_i+0x80>
   108ae:	3308      	adds	r3, #8
   108b0:	6822      	ldr	r2, [r4, #0]
   108b2:	6063      	str	r3, [r4, #4]
   108b4:	33f9      	adds	r3, #249	; 0xf9
   108b6:	33ff      	adds	r3, #255	; 0xff
   108b8:	4313      	orrs	r3, r2
   108ba:	6023      	str	r3, [r4, #0]
   108bc:	4b5c      	ldr	r3, [pc, #368]	; (10a30 <_scanf_i+0x1f4>)
   108be:	6822      	ldr	r2, [r4, #0]
   108c0:	4013      	ands	r3, r2
   108c2:	6023      	str	r3, [r4, #0]
   108c4:	68a3      	ldr	r3, [r4, #8]
   108c6:	1e5a      	subs	r2, r3, #1
   108c8:	60a2      	str	r2, [r4, #8]
   108ca:	2b00      	cmp	r3, #0
   108cc:	d016      	beq.n	108fc <_scanf_i+0xc0>
   108ce:	9b03      	ldr	r3, [sp, #12]
   108d0:	1c5d      	adds	r5, r3, #1
   108d2:	6833      	ldr	r3, [r6, #0]
   108d4:	1c5a      	adds	r2, r3, #1
   108d6:	6032      	str	r2, [r6, #0]
   108d8:	781b      	ldrb	r3, [r3, #0]
   108da:	9a03      	ldr	r2, [sp, #12]
   108dc:	9503      	str	r5, [sp, #12]
   108de:	7013      	strb	r3, [r2, #0]
   108e0:	6873      	ldr	r3, [r6, #4]
   108e2:	3b01      	subs	r3, #1
   108e4:	6073      	str	r3, [r6, #4]
   108e6:	2b00      	cmp	r3, #0
   108e8:	dc08      	bgt.n	108fc <_scanf_i+0xc0>
   108ea:	23c0      	movs	r3, #192	; 0xc0
   108ec:	005b      	lsls	r3, r3, #1
   108ee:	58e3      	ldr	r3, [r4, r3]
   108f0:	0031      	movs	r1, r6
   108f2:	9805      	ldr	r0, [sp, #20]
   108f4:	9307      	str	r3, [sp, #28]
   108f6:	4798      	blx	r3
   108f8:	2800      	cmp	r0, #0
   108fa:	d17d      	bne.n	109f8 <_scanf_i+0x1bc>
   108fc:	3701      	adds	r7, #1
   108fe:	2f03      	cmp	r7, #3
   10900:	d1c6      	bne.n	10890 <_scanf_i+0x54>
   10902:	6863      	ldr	r3, [r4, #4]
   10904:	2b00      	cmp	r3, #0
   10906:	d101      	bne.n	1090c <_scanf_i+0xd0>
   10908:	330a      	adds	r3, #10
   1090a:	6063      	str	r3, [r4, #4]
   1090c:	2110      	movs	r1, #16
   1090e:	2700      	movs	r7, #0
   10910:	6863      	ldr	r3, [r4, #4]
   10912:	6960      	ldr	r0, [r4, #20]
   10914:	1ac9      	subs	r1, r1, r3
   10916:	4b47      	ldr	r3, [pc, #284]	; (10a34 <_scanf_i+0x1f8>)
   10918:	18c9      	adds	r1, r1, r3
   1091a:	f000 f8a3 	bl	10a64 <__sccl>
   1091e:	9d03      	ldr	r5, [sp, #12]
   10920:	68a3      	ldr	r3, [r4, #8]
   10922:	2b00      	cmp	r3, #0
   10924:	d041      	beq.n	109aa <_scanf_i+0x16e>
   10926:	6832      	ldr	r2, [r6, #0]
   10928:	6960      	ldr	r0, [r4, #20]
   1092a:	7811      	ldrb	r1, [r2, #0]
   1092c:	5c40      	ldrb	r0, [r0, r1]
   1092e:	2800      	cmp	r0, #0
   10930:	d03b      	beq.n	109aa <_scanf_i+0x16e>
   10932:	2930      	cmp	r1, #48	; 0x30
   10934:	d128      	bne.n	10988 <_scanf_i+0x14c>
   10936:	2080      	movs	r0, #128	; 0x80
   10938:	6821      	ldr	r1, [r4, #0]
   1093a:	0100      	lsls	r0, r0, #4
   1093c:	4201      	tst	r1, r0
   1093e:	d023      	beq.n	10988 <_scanf_i+0x14c>
   10940:	9a04      	ldr	r2, [sp, #16]
   10942:	3701      	adds	r7, #1
   10944:	2a00      	cmp	r2, #0
   10946:	d003      	beq.n	10950 <_scanf_i+0x114>
   10948:	3a01      	subs	r2, #1
   1094a:	3301      	adds	r3, #1
   1094c:	9204      	str	r2, [sp, #16]
   1094e:	60a3      	str	r3, [r4, #8]
   10950:	6873      	ldr	r3, [r6, #4]
   10952:	3b01      	subs	r3, #1
   10954:	6073      	str	r3, [r6, #4]
   10956:	2b00      	cmp	r3, #0
   10958:	dd1e      	ble.n	10998 <_scanf_i+0x15c>
   1095a:	6833      	ldr	r3, [r6, #0]
   1095c:	3301      	adds	r3, #1
   1095e:	6033      	str	r3, [r6, #0]
   10960:	68a3      	ldr	r3, [r4, #8]
   10962:	3b01      	subs	r3, #1
   10964:	60a3      	str	r3, [r4, #8]
   10966:	e7db      	b.n	10920 <_scanf_i+0xe4>
   10968:	2f02      	cmp	r7, #2
   1096a:	d1ab      	bne.n	108c4 <_scanf_i+0x88>
   1096c:	21c0      	movs	r1, #192	; 0xc0
   1096e:	2380      	movs	r3, #128	; 0x80
   10970:	6822      	ldr	r2, [r4, #0]
   10972:	00c9      	lsls	r1, r1, #3
   10974:	4011      	ands	r1, r2
   10976:	009b      	lsls	r3, r3, #2
   10978:	4299      	cmp	r1, r3
   1097a:	d1c2      	bne.n	10902 <_scanf_i+0xc6>
   1097c:	3bf1      	subs	r3, #241	; 0xf1
   1097e:	3bff      	subs	r3, #255	; 0xff
   10980:	6063      	str	r3, [r4, #4]
   10982:	33f0      	adds	r3, #240	; 0xf0
   10984:	4313      	orrs	r3, r2
   10986:	e79c      	b.n	108c2 <_scanf_i+0x86>
   10988:	6821      	ldr	r1, [r4, #0]
   1098a:	4b2b      	ldr	r3, [pc, #172]	; (10a38 <_scanf_i+0x1fc>)
   1098c:	400b      	ands	r3, r1
   1098e:	6023      	str	r3, [r4, #0]
   10990:	7813      	ldrb	r3, [r2, #0]
   10992:	702b      	strb	r3, [r5, #0]
   10994:	3501      	adds	r5, #1
   10996:	e7db      	b.n	10950 <_scanf_i+0x114>
   10998:	23c0      	movs	r3, #192	; 0xc0
   1099a:	005b      	lsls	r3, r3, #1
   1099c:	58e3      	ldr	r3, [r4, r3]
   1099e:	0031      	movs	r1, r6
   109a0:	9805      	ldr	r0, [sp, #20]
   109a2:	9303      	str	r3, [sp, #12]
   109a4:	4798      	blx	r3
   109a6:	2800      	cmp	r0, #0
   109a8:	d0da      	beq.n	10960 <_scanf_i+0x124>
   109aa:	6823      	ldr	r3, [r4, #0]
   109ac:	05db      	lsls	r3, r3, #23
   109ae:	d50e      	bpl.n	109ce <_scanf_i+0x192>
   109b0:	9b01      	ldr	r3, [sp, #4]
   109b2:	429d      	cmp	r5, r3
   109b4:	d907      	bls.n	109c6 <_scanf_i+0x18a>
   109b6:	23be      	movs	r3, #190	; 0xbe
   109b8:	3d01      	subs	r5, #1
   109ba:	005b      	lsls	r3, r3, #1
   109bc:	7829      	ldrb	r1, [r5, #0]
   109be:	58e3      	ldr	r3, [r4, r3]
   109c0:	0032      	movs	r2, r6
   109c2:	9805      	ldr	r0, [sp, #20]
   109c4:	4798      	blx	r3
   109c6:	9b01      	ldr	r3, [sp, #4]
   109c8:	2001      	movs	r0, #1
   109ca:	429d      	cmp	r5, r3
   109cc:	d027      	beq.n	10a1e <_scanf_i+0x1e2>
   109ce:	2210      	movs	r2, #16
   109d0:	6823      	ldr	r3, [r4, #0]
   109d2:	401a      	ands	r2, r3
   109d4:	d11c      	bne.n	10a10 <_scanf_i+0x1d4>
   109d6:	702a      	strb	r2, [r5, #0]
   109d8:	6863      	ldr	r3, [r4, #4]
   109da:	9901      	ldr	r1, [sp, #4]
   109dc:	9805      	ldr	r0, [sp, #20]
   109de:	9e06      	ldr	r6, [sp, #24]
   109e0:	47b0      	blx	r6
   109e2:	9b02      	ldr	r3, [sp, #8]
   109e4:	6822      	ldr	r2, [r4, #0]
   109e6:	681b      	ldr	r3, [r3, #0]
   109e8:	0691      	lsls	r1, r2, #26
   109ea:	d507      	bpl.n	109fc <_scanf_i+0x1c0>
   109ec:	9902      	ldr	r1, [sp, #8]
   109ee:	1d1a      	adds	r2, r3, #4
   109f0:	600a      	str	r2, [r1, #0]
   109f2:	681b      	ldr	r3, [r3, #0]
   109f4:	6018      	str	r0, [r3, #0]
   109f6:	e008      	b.n	10a0a <_scanf_i+0x1ce>
   109f8:	2700      	movs	r7, #0
   109fa:	e7d6      	b.n	109aa <_scanf_i+0x16e>
   109fc:	07d1      	lsls	r1, r2, #31
   109fe:	d5f5      	bpl.n	109ec <_scanf_i+0x1b0>
   10a00:	9902      	ldr	r1, [sp, #8]
   10a02:	1d1a      	adds	r2, r3, #4
   10a04:	600a      	str	r2, [r1, #0]
   10a06:	681b      	ldr	r3, [r3, #0]
   10a08:	8018      	strh	r0, [r3, #0]
   10a0a:	68e3      	ldr	r3, [r4, #12]
   10a0c:	3301      	adds	r3, #1
   10a0e:	60e3      	str	r3, [r4, #12]
   10a10:	2000      	movs	r0, #0
   10a12:	9b01      	ldr	r3, [sp, #4]
   10a14:	1aed      	subs	r5, r5, r3
   10a16:	6923      	ldr	r3, [r4, #16]
   10a18:	19ef      	adds	r7, r5, r7
   10a1a:	19df      	adds	r7, r3, r7
   10a1c:	6127      	str	r7, [r4, #16]
   10a1e:	b00d      	add	sp, #52	; 0x34
   10a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a22:	46c0      	nop			; (mov r8, r8)
   10a24:	00012cd4 	.word	0x00012cd4
   10a28:	0000de89 	.word	0x0000de89
   10a2c:	00010299 	.word	0x00010299
   10a30:	fffffaff 	.word	0xfffffaff
   10a34:	00012ce0 	.word	0x00012ce0
   10a38:	fffff6ff 	.word	0xfffff6ff

00010a3c <_read_r>:
   10a3c:	b570      	push	{r4, r5, r6, lr}
   10a3e:	0005      	movs	r5, r0
   10a40:	0008      	movs	r0, r1
   10a42:	0011      	movs	r1, r2
   10a44:	2200      	movs	r2, #0
   10a46:	4c06      	ldr	r4, [pc, #24]	; (10a60 <_read_r+0x24>)
   10a48:	6022      	str	r2, [r4, #0]
   10a4a:	001a      	movs	r2, r3
   10a4c:	f000 f8aa 	bl	10ba4 <_read>
   10a50:	1c43      	adds	r3, r0, #1
   10a52:	d103      	bne.n	10a5c <_read_r+0x20>
   10a54:	6823      	ldr	r3, [r4, #0]
   10a56:	2b00      	cmp	r3, #0
   10a58:	d000      	beq.n	10a5c <_read_r+0x20>
   10a5a:	602b      	str	r3, [r5, #0]
   10a5c:	bd70      	pop	{r4, r5, r6, pc}
   10a5e:	46c0      	nop			; (mov r8, r8)
   10a60:	20001fa8 	.word	0x20001fa8

00010a64 <__sccl>:
   10a64:	b570      	push	{r4, r5, r6, lr}
   10a66:	780b      	ldrb	r3, [r1, #0]
   10a68:	2b5e      	cmp	r3, #94	; 0x5e
   10a6a:	d00d      	beq.n	10a88 <__sccl+0x24>
   10a6c:	1c4a      	adds	r2, r1, #1
   10a6e:	2100      	movs	r1, #0
   10a70:	0004      	movs	r4, r0
   10a72:	1c45      	adds	r5, r0, #1
   10a74:	35ff      	adds	r5, #255	; 0xff
   10a76:	7021      	strb	r1, [r4, #0]
   10a78:	3401      	adds	r4, #1
   10a7a:	42a5      	cmp	r5, r4
   10a7c:	d1fb      	bne.n	10a76 <__sccl+0x12>
   10a7e:	2b00      	cmp	r3, #0
   10a80:	d106      	bne.n	10a90 <__sccl+0x2c>
   10a82:	3a01      	subs	r2, #1
   10a84:	0010      	movs	r0, r2
   10a86:	bd70      	pop	{r4, r5, r6, pc}
   10a88:	1c8a      	adds	r2, r1, #2
   10a8a:	784b      	ldrb	r3, [r1, #1]
   10a8c:	2101      	movs	r1, #1
   10a8e:	e7ef      	b.n	10a70 <__sccl+0xc>
   10a90:	2401      	movs	r4, #1
   10a92:	404c      	eors	r4, r1
   10a94:	0011      	movs	r1, r2
   10a96:	54c4      	strb	r4, [r0, r3]
   10a98:	780d      	ldrb	r5, [r1, #0]
   10a9a:	1c4a      	adds	r2, r1, #1
   10a9c:	2d2d      	cmp	r5, #45	; 0x2d
   10a9e:	d007      	beq.n	10ab0 <__sccl+0x4c>
   10aa0:	2d5d      	cmp	r5, #93	; 0x5d
   10aa2:	d0ef      	beq.n	10a84 <__sccl+0x20>
   10aa4:	2d00      	cmp	r5, #0
   10aa6:	d101      	bne.n	10aac <__sccl+0x48>
   10aa8:	000a      	movs	r2, r1
   10aaa:	e7eb      	b.n	10a84 <__sccl+0x20>
   10aac:	002b      	movs	r3, r5
   10aae:	e7f1      	b.n	10a94 <__sccl+0x30>
   10ab0:	784e      	ldrb	r6, [r1, #1]
   10ab2:	2e5d      	cmp	r6, #93	; 0x5d
   10ab4:	d0fa      	beq.n	10aac <__sccl+0x48>
   10ab6:	42b3      	cmp	r3, r6
   10ab8:	dcf8      	bgt.n	10aac <__sccl+0x48>
   10aba:	3102      	adds	r1, #2
   10abc:	3301      	adds	r3, #1
   10abe:	54c4      	strb	r4, [r0, r3]
   10ac0:	429e      	cmp	r6, r3
   10ac2:	dcfb      	bgt.n	10abc <__sccl+0x58>
   10ac4:	e7e8      	b.n	10a98 <__sccl+0x34>
	...

00010ac8 <__submore>:
   10ac8:	000b      	movs	r3, r1
   10aca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10acc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   10ace:	3344      	adds	r3, #68	; 0x44
   10ad0:	000c      	movs	r4, r1
   10ad2:	429d      	cmp	r5, r3
   10ad4:	d11c      	bne.n	10b10 <__submore+0x48>
   10ad6:	2680      	movs	r6, #128	; 0x80
   10ad8:	00f6      	lsls	r6, r6, #3
   10ada:	0031      	movs	r1, r6
   10adc:	f7fc fa9c 	bl	d018 <_malloc_r>
   10ae0:	2800      	cmp	r0, #0
   10ae2:	d102      	bne.n	10aea <__submore+0x22>
   10ae4:	2001      	movs	r0, #1
   10ae6:	4240      	negs	r0, r0
   10ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10aea:	0023      	movs	r3, r4
   10aec:	6360      	str	r0, [r4, #52]	; 0x34
   10aee:	63a6      	str	r6, [r4, #56]	; 0x38
   10af0:	3346      	adds	r3, #70	; 0x46
   10af2:	781a      	ldrb	r2, [r3, #0]
   10af4:	4b10      	ldr	r3, [pc, #64]	; (10b38 <__submore+0x70>)
   10af6:	54c2      	strb	r2, [r0, r3]
   10af8:	0023      	movs	r3, r4
   10afa:	3345      	adds	r3, #69	; 0x45
   10afc:	781a      	ldrb	r2, [r3, #0]
   10afe:	4b0f      	ldr	r3, [pc, #60]	; (10b3c <__submore+0x74>)
   10b00:	54c2      	strb	r2, [r0, r3]
   10b02:	782a      	ldrb	r2, [r5, #0]
   10b04:	4b0e      	ldr	r3, [pc, #56]	; (10b40 <__submore+0x78>)
   10b06:	54c2      	strb	r2, [r0, r3]
   10b08:	18c0      	adds	r0, r0, r3
   10b0a:	6020      	str	r0, [r4, #0]
   10b0c:	2000      	movs	r0, #0
   10b0e:	e7eb      	b.n	10ae8 <__submore+0x20>
   10b10:	6b8e      	ldr	r6, [r1, #56]	; 0x38
   10b12:	0029      	movs	r1, r5
   10b14:	0073      	lsls	r3, r6, #1
   10b16:	001a      	movs	r2, r3
   10b18:	9301      	str	r3, [sp, #4]
   10b1a:	f7ff f8e9 	bl	fcf0 <_realloc_r>
   10b1e:	1e05      	subs	r5, r0, #0
   10b20:	d0e0      	beq.n	10ae4 <__submore+0x1c>
   10b22:	1987      	adds	r7, r0, r6
   10b24:	0001      	movs	r1, r0
   10b26:	0032      	movs	r2, r6
   10b28:	0038      	movs	r0, r7
   10b2a:	f7fb ffb2 	bl	ca92 <memcpy>
   10b2e:	9b01      	ldr	r3, [sp, #4]
   10b30:	6027      	str	r7, [r4, #0]
   10b32:	6365      	str	r5, [r4, #52]	; 0x34
   10b34:	63a3      	str	r3, [r4, #56]	; 0x38
   10b36:	e7e9      	b.n	10b0c <__submore+0x44>
   10b38:	000003ff 	.word	0x000003ff
   10b3c:	000003fe 	.word	0x000003fe
   10b40:	000003fd 	.word	0x000003fd

00010b44 <_close>:
   10b44:	2258      	movs	r2, #88	; 0x58
   10b46:	2001      	movs	r0, #1
   10b48:	4b01      	ldr	r3, [pc, #4]	; (10b50 <_close+0xc>)
   10b4a:	4240      	negs	r0, r0
   10b4c:	601a      	str	r2, [r3, #0]
   10b4e:	4770      	bx	lr
   10b50:	20001fa8 	.word	0x20001fa8

00010b54 <_fstat>:
   10b54:	2258      	movs	r2, #88	; 0x58
   10b56:	2001      	movs	r0, #1
   10b58:	4b01      	ldr	r3, [pc, #4]	; (10b60 <_fstat+0xc>)
   10b5a:	4240      	negs	r0, r0
   10b5c:	601a      	str	r2, [r3, #0]
   10b5e:	4770      	bx	lr
   10b60:	20001fa8 	.word	0x20001fa8

00010b64 <_getpid>:
   10b64:	2258      	movs	r2, #88	; 0x58
   10b66:	2001      	movs	r0, #1
   10b68:	4b01      	ldr	r3, [pc, #4]	; (10b70 <_getpid+0xc>)
   10b6a:	4240      	negs	r0, r0
   10b6c:	601a      	str	r2, [r3, #0]
   10b6e:	4770      	bx	lr
   10b70:	20001fa8 	.word	0x20001fa8

00010b74 <_isatty>:
   10b74:	2258      	movs	r2, #88	; 0x58
   10b76:	4b02      	ldr	r3, [pc, #8]	; (10b80 <_isatty+0xc>)
   10b78:	2000      	movs	r0, #0
   10b7a:	601a      	str	r2, [r3, #0]
   10b7c:	4770      	bx	lr
   10b7e:	46c0      	nop			; (mov r8, r8)
   10b80:	20001fa8 	.word	0x20001fa8

00010b84 <_kill>:
   10b84:	2258      	movs	r2, #88	; 0x58
   10b86:	2001      	movs	r0, #1
   10b88:	4b01      	ldr	r3, [pc, #4]	; (10b90 <_kill+0xc>)
   10b8a:	4240      	negs	r0, r0
   10b8c:	601a      	str	r2, [r3, #0]
   10b8e:	4770      	bx	lr
   10b90:	20001fa8 	.word	0x20001fa8

00010b94 <_lseek>:
   10b94:	2258      	movs	r2, #88	; 0x58
   10b96:	2001      	movs	r0, #1
   10b98:	4b01      	ldr	r3, [pc, #4]	; (10ba0 <_lseek+0xc>)
   10b9a:	4240      	negs	r0, r0
   10b9c:	601a      	str	r2, [r3, #0]
   10b9e:	4770      	bx	lr
   10ba0:	20001fa8 	.word	0x20001fa8

00010ba4 <_read>:
   10ba4:	2258      	movs	r2, #88	; 0x58
   10ba6:	2001      	movs	r0, #1
   10ba8:	4b01      	ldr	r3, [pc, #4]	; (10bb0 <_read+0xc>)
   10baa:	4240      	negs	r0, r0
   10bac:	601a      	str	r2, [r3, #0]
   10bae:	4770      	bx	lr
   10bb0:	20001fa8 	.word	0x20001fa8

00010bb4 <_sbrk>:
   10bb4:	4a04      	ldr	r2, [pc, #16]	; (10bc8 <_sbrk+0x14>)
   10bb6:	6813      	ldr	r3, [r2, #0]
   10bb8:	2b00      	cmp	r3, #0
   10bba:	d003      	beq.n	10bc4 <_sbrk+0x10>
   10bbc:	1818      	adds	r0, r3, r0
   10bbe:	6010      	str	r0, [r2, #0]
   10bc0:	0018      	movs	r0, r3
   10bc2:	4770      	bx	lr
   10bc4:	4b01      	ldr	r3, [pc, #4]	; (10bcc <_sbrk+0x18>)
   10bc6:	e7f9      	b.n	10bbc <_sbrk+0x8>
   10bc8:	20001fa4 	.word	0x20001fa4
   10bcc:	20001fac 	.word	0x20001fac

00010bd0 <_write>:
   10bd0:	2258      	movs	r2, #88	; 0x58
   10bd2:	2001      	movs	r0, #1
   10bd4:	4b01      	ldr	r3, [pc, #4]	; (10bdc <_write+0xc>)
   10bd6:	4240      	negs	r0, r0
   10bd8:	601a      	str	r2, [r3, #0]
   10bda:	4770      	bx	lr
   10bdc:	20001fa8 	.word	0x20001fa8

00010be0 <_exit>:
   10be0:	e7fe      	b.n	10be0 <_exit>
   10be2:	46c0      	nop			; (mov r8, r8)

00010be4 <_init>:
   10be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10be6:	46c0      	nop			; (mov r8, r8)
   10be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10bea:	bc08      	pop	{r3}
   10bec:	469e      	mov	lr, r3
   10bee:	4770      	bx	lr

00010bf0 <_fini>:
   10bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bf2:	46c0      	nop			; (mov r8, r8)
   10bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10bf6:	bc08      	pop	{r3}
   10bf8:	469e      	mov	lr, r3
   10bfa:	4770      	bx	lr
   10bfc:	706d6574 	.word	0x706d6574
   10c00:	00          	.byte	0x00
   10c01:	63          	.byte	0x63
   10c02:	6766      	.short	0x6766
   10c04:	6300433d 	.word	0x6300433d
   10c08:	463d6766 	.word	0x463d6766
   10c0c:	00          	.byte	0x00
   10c0d:	44          	.byte	0x44
   10c0e:	5448      	.short	0x5448
   10c10:	53203131 	.word	0x53203131
   10c14:	6f736e65 	.word	0x6f736e65
   10c18:	6e492072 	.word	0x6e492072
   10c1c:	61697469 	.word	0x61697469
   10c20:	657a696c 	.word	0x657a696c
   10c24:	2d002164 	.word	0x2d002164
   10c28:	2d2d2d2d 	.word	0x2d2d2d2d
   10c2c:	2d2d2d2d 	.word	0x2d2d2d2d
   10c30:	2d2d2d2d 	.word	0x2d2d2d2d
   10c34:	2d2d2d2d 	.word	0x2d2d2d2d
   10c38:	2d2d2d2d 	.word	0x2d2d2d2d
   10c3c:	2d2d2d2d 	.word	0x2d2d2d2d
   10c40:	2d2d2d2d 	.word	0x2d2d2d2d
   10c44:	2d2d2d2d 	.word	0x2d2d2d2d
   10c48:	002d2d2d 	.word	0x002d2d2d
   10c4c:	736e6553 	.word	0x736e6553
   10c50:	203a726f 	.word	0x203a726f
   10c54:	20202020 	.word	0x20202020
   10c58:	44002020 	.word	0x44002020
   10c5c:	65766972 	.word	0x65766972
   10c60:	65562072 	.word	0x65562072
   10c64:	20203a72 	.word	0x20203a72
   10c68:	6e550020 	.word	0x6e550020
   10c6c:	65757169 	.word	0x65757169
   10c70:	3a444920 	.word	0x3a444920
   10c74:	20202020 	.word	0x20202020
   10c78:	78614d00 	.word	0x78614d00
   10c7c:	6c615620 	.word	0x6c615620
   10c80:	203a6575 	.word	0x203a6575
   10c84:	00202020 	.word	0x00202020
   10c88:	4d004320 	.word	0x4d004320
   10c8c:	56206e69 	.word	0x56206e69
   10c90:	65756c61 	.word	0x65756c61
   10c94:	2020203a 	.word	0x2020203a
   10c98:	65520020 	.word	0x65520020
   10c9c:	756c6f73 	.word	0x756c6f73
   10ca0:	6e6f6974 	.word	0x6e6f6974
   10ca4:	2020203a 	.word	0x2020203a
   10ca8:	00          	.byte	0x00
   10ca9:	25          	.byte	0x25
   10caa:	322e      	.short	0x322e
   10cac:	25002c66 	.word	0x25002c66
   10cb0:	54002c64 	.word	0x54002c64
   10cb4:	20706d65 	.word	0x20706d65
   10cb8:	6c796150 	.word	0x6c796150
   10cbc:	3a64616f 	.word	0x3a64616f
   10cc0:	00732520 	.word	0x00732520
   10cc4:	2e303231 	.word	0x2e303231
   10cc8:	002c3030 	.word	0x002c3030
   10ccc:	33322e30 	.word	0x33322e30
   10cd0:	0000002c 	.word	0x0000002c

00010cd4 <_ZTV7Serial_>:
	...
   10cdc:	000028e9 00002915 000028e5 00002909     .(...)...(...)..
   10cec:	000028fd 0000294d 00002931              .(..M)..1)..

00010cf8 <_ZTV26DoubleBufferedEPOutHandler>:
	...
   10d00:	00002db3 00002c95 00002bf1              .-...,...+..

00010d0c <_ZL14STRING_PRODUCT>:
   10d0c:	20425355 42204f49 6472616f 03040000              USB IO Board..

00010d1a <_ZL15STRING_LANGUAGE>:
   10d1a:	04090304                                ....

00010d1e <_ZL19STRING_MANUFACTURER>:
   10d1e:	7474614d 54726961 20686365 00434c4c     MattairTech LLC.

00010d2e <_ZL21USB_DeviceDescriptorC>:
   10d2e:	01100112 40000002 055716d0 02010100     .......@..W.....
   10d3e:	48440103 00313154 32544844 48440031     ..DHT11.DHT21.DH
   10d4e:	00323254 3f544844 00000000                       T22.DHT?..

00010d58 <_ZTVN11DHT_Unified11TemperatureE>:
	...
   10d60:	00003f55 00003fc5 00003f51 00003f57     U?...?..Q?..W?..
   10d70:	00004069                                i@..

00010d74 <_ZTVN11DHT_Unified8HumidityE>:
	...
   10d7c:	00003f53 00003fb9 00003f51 00003f89     S?...?..Q?...?..
   10d8c:	000040e1 656d6954 3025203a 253a6432     .@..Time: %02d:%
   10d9c:	3a643230 64323025 4400203a 3a657461     02d:%02d: .Date:
   10dac:	32302520 30253a64 253a6432 20643230      %02d:%02d:%02d 
   10dbc:	6e6f6d5b 7961643a 6165793a 54005d72     [mon:day:year].T
   10dcc:	3a656d69 32302520 30253a64 253a6432     ime: %02d:%02d:%
   10ddc:	20643230 3a72685b 3a6e696d 5d636573     02d [hr:min:sec]
   10dec:	3d3d3d00 3d3d3d3d 3d3d3d3d 3d3d3d3d     .===============
   10dfc:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   10e0c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   10e1c:	3d3d3d3d 003d3d3d 78323025 7325002c     =======.%02x,.%s
   10e2c:	2520003a 00783230 524f4243 79615020     :. %02x.CBOR Pay
   10e3c:	64616f6c 6d754420 24003a70 61002300     load Dump:.$.#.a
   10e4c:	69756472 49006f6e 6e6f7274 66655220     rduino.Itron Ref
   10e5c:	6e657265 43206563 2050416f 76726553     erence CoAP Serv
   10e6c:	203a7265 342e3100 4900362e 6e6f7274     er: .1.4.6.Itron
   10e7c:	50415320 00203a49 2e302e31 6f4e0030      SAPI: .1.0.0.No
   10e8c:	31322076 31303220 30310039 3a36333a     v 21 2019.10:36:
   10e9c:	42003233 646c6975 6d695420 25203a65     32.Build Time: %
   10eac:	44202073 3a657461 00732520 00676663     s  Date: %s.cfg.
   10ebc:	736e6573 72726300 756f7365 68656372     sens.crresourceh
   10ecc:	6c646e61 203a7265 20544547 74617473     andler: GET stat
   10edc:	203a7375 6c206425 203a6e65 62206425     us: %d len: %d b
   10eec:	73657479 74655300 73624f20 65767265     ytes.Set Observe
   10efc:	64492072 6425203a 67655200 65747369     r Id: %d.Registe
   10f0c:	20646572 736e6573 203a726f 53007325     red sensor: %s.S
   10f1c:	20495041 6573626f 20657672 20726f66     API observe for 
   10f2c:	736e6573 203a726f 63007325 6c706d6f     sensor: %s.compl
   10f3c:	00657465 6c696166 45006465 7265746e     ete.failed.Enter
   10f4c:	796e6120 79656b20 206f7420 74206f67      any key to go t
   10f5c:	6f42206f 7250746f 6172676f 6562206d     o BootProgram be
   10f6c:	65726f66 20746920 6e756f63 74207374     fore it counts t
   10f7c:	3031206f 206f4e00 61746144 00000000     o 10.No Data....

00010f8c <g_APinDescription>:
   10f8c:	09190801 0000703f 80080208 09190901     ....?p..........
   10f9c:	0000703f 80090309 08190200 0000006f     ?p..........o...
   10fac:	80120080 08190300 000000af 80120180     ................
   10fbc:	08190400 000000af 80120480 08190500     ................
   10fcc:	0000006f 80120580 08190600 0000002f     o.........../...
   10fdc:	80120680 08190700 0000002f 80120780     ......../.......
   10fec:	08190800 0000402f 80121080 08190900     ..../@..........
   10ffc:	0000402f 80121180 08190a00 0000402f     /@........../@..
   1100c:	80121280 08190b00 0000403f 800b1380     ........?@......
   1101c:	08190c00 0000701f 800c1620 08190d00     .....p.. .......
   1102c:	0000701f 800d1621 08190a01 0000301f     .p..!........0..
   1103c:	800a1618 08190b01 0000300f 80121619     .........0......
   1104c:	08191000 0000401f 80001680 08191100     .....@..........
   1105c:	0000401f 80011680 09191200 0000401f     .@...........@..
   1106c:	80021680 09191300 0000401f 80031680     .........@......
   1107c:	0a191400 0000701f 80041602 0a191500     .....p..........
   1108c:	0000701f 80051603 0b191600 0000700f     .p...........p..
   1109c:	80121600 0b191700 0000700f 80121601     .........p......
   110ac:	08191800 0000800f 80121680 08191900     ................
   110bc:	0000800f 80121680 001b0004 00000000     ................
   110cc:	80121680 08191b00 0000000f 80121680     ................
   110dc:	001b0004 00000000 80121680 001b0004     ................
   110ec:	00000000 80121680 08191e00 0000300f     .............0..
   110fc:	80121610 08191f00 0000300f 80121611     .........0......
   1110c:	08191601 0000001f 80061680 08191701     ................
   1111c:	0000001f 80071680 08190201 0000002f     ............/...
   1112c:	80120a80 08190301 0000002f 80120b80     ......../.......
   1113c:	00000a0d                                ....

00011140 <_ZTV4Uart>:
	...
   11148:	00005461 00004e8d 00005333 0000531b     aT...N..3S...S..
   11158:	00005311 0000533d 00005371 000052e5     .S..=S..qS...R..
   11168:	00005541 000052f5 000052e1 13121110     AU...R...R......
   11178:	17161514 42411918 01004b43 00003713     ......ABCK...7..
   11188:	00010000 00020000 00040000 00080000     ................
   11198:	00100000 00200000 00400000 00800000     ...... ...@.....
   111a8:	01000000 02000000 00200000 00400000     .......... ...@.
   111b8:	00800000 00800000 00040000 00080000     ................
   111c8:	00400000 00080000 1f01bfef 37c86220     ..@......... b.7
   111d8:	262030c2 6b6f6f4c 20676e69 63207075     .0 &Looking up c
   111e8:	626c6c61 206b6361 20726f66 3a44494d     allback for MID:
   111f8:	25783020 41000a78 6e696464 61632067      0x%x..Adding ca
   11208:	61626c6c 66206b63 4d20726f 203a4449     llback for MID: 
   11218:	78257830 6e49000a 66667573 65696369     0x%x..Insufficie
   11228:	6220746e 65666675 70732072 20656361     nt buffer space 
   11238:	61206f74 6f206464 6f697470 6f000a6e     to add option..o
   11248:	6c6f3e2d 203d3c20 657a6973 7528666f     ->ol <= sizeof(u
   11258:	33746e69 29745f32 2f2e2e00 2f637273     int32_t).../src/
   11268:	7262696c 65697261 73732f73 635f696e     libraries/ssni_c
   11278:	5f70616f 76726573 632f7265 6d70616f     oap_server/coapm
   11288:	632e6773 43007070 646c756f 2074276e     sg.cpp.Couldn't 
   11298:	20646461 6573626f 20657672 6974706f     add observe opti
   112a8:	43006e6f 2050416f 20514552 6f636564     on.CoAP REQ deco
   112b8:	6f006564 6f697470 7974206e 203a6570     de.option type: 
   112c8:	6c207525 203a6e65 43007525 646c756f     %u len: %u.Could
   112d8:	2074276e 65766173 74706f20 206e6f69     n't save option 
   112e8:	61746164 686e7500 6c646e61 63206465     data.unhandled c
   112f8:	69746972 206c6163 6974706f 25206e6f     ritical option %
   11308:	6d000a64 69737369 6f20676e 6f697470     d..missing optio
   11318:	6573206e 61726170 20726f74 43004646     n separator FF.C
   11328:	646c756f 2074276e 20646461 6573624f     ouldn't add Obse
   11338:	20657672 6974706f 74206e6f 736d206f     rve option to ms
   11348:	6f430067 6e646c75 61207427 63206464     g.Couldn't add c
   11358:	65746e6f 6620746e 616d726f 706f2074     ontent format op
   11368:	6e6f6974 206f7420 0067736d 6c756f43     tion to msg.Coul
   11378:	74276e64 64646120 78614d20 6567412d     dn't add Max-Age
   11388:	74706f20 206e6f69 6d206f74 69006773      option to msg.i
   11398:	3c207864 4f43203d 4f5f5041 485f5342     dx <= COAP_OBS_H
   113a8:	535f5244 6552005a 6e6f7073 4e006573     DR_SZ.Response.N
   113b8:	43004e4f 52004e4f 41005453 50004b43     ON.CON.RST.ACK.P
   113c8:	0054534f 00544547 00545550 54504d45     OST.GET.PUT.EMPT
   113d8:	45440059 4554454c 72655300 20726576     Y.DELETE.Server 
   113e8:	6f727245 75530072 73656363 6c430073     Error.Success.Cl
   113f8:	746e6569 72724520 5200726f 522f5145     ient Error.REQ/R
   11408:	54205053 3a657079 00732520 2f514552     SP Type: %s.REQ/
   11418:	204b4341 65646f43 7325203a 50535200     ACK Code: %s.RSP
   11428:	646f4320 25203a65 72550073 61502d69      Code: %s.Uri-Pa
   11438:	512d6874 79726575 7325203a 6e697500              th-Query: %s.

00011445 <_ZZ13co_uint32_h2nPK5optlvE19__PRETTY_FUNCTION__>:
   11445:	746e6975 745f3233 5f6f6320 746e6975     uint32_t co_uint
   11455:	685f3233 63286e32 74736e6f 74706f20     32_h2n(const opt
   11465:	292a766c 6e697500                                lv*).

0001146a <_ZZ13co_uint32_n2hPK5optlvE19__PRETTY_FUNCTION__>:
   1146a:	746e6975 745f3233 5f6f6320 746e6975     uint32_t co_uint
   1147a:	6e5f3233 63286832 74736e6f 74706f20     32_n2h(const opt
   1148a:	292a766c 72726500                                lv*).

0001148f <_ZZ17coap_msg_responseP12coap_msg_ctxE19__PRETTY_FUNCTION__>:
   1148f:	6f727265 20745f72 70616f63 67736d5f     error_t coap_msg
   1149f:	7365725f 736e6f70 6f632865 6d5f7061     _response(coap_m
   114af:	635f6773 292a7874 746f4e00 64646120     sg_ctx*).Not add
   114bf:	20676e69 2073626f 72746e65 6f662079     ing obs entry fo
   114cf:	73252072 6973202c 6f743a64 206e656b     r %s, sid:token 
   114df:	20746f6e 71696e75 4e006575 6120746f     not unique.Not a
   114ef:	6e696464 626f2067 6e652073 20797274     dding obs entry 
   114ff:	20726f66 202c7325 6c707564 74616369     for %s, duplicat
   1150f:	64002e65 62617369 6f5f656c 203a7362     e..disable_obs: 
   1151f:	722d6544 73696765 65726574 52552064     De-registered UR
   1152f:	25203a49 706f0073 706f0074 6f3e2d74     I: %s.opt.opt->o
   1153f:	69440076 74276e64 6e696620 706f2064     v.Didn't find op
   1154f:	6e6f6974 20642520 64206f74 74656c65     tion %d to delet
   1155f:	68002e65 2e2e0064 6372732f 62696c2f     e..hd.../src/lib
   1156f:	69726172 732f7365 5f696e73 70616f63     raries/ssni_coap
   1157f:	7265735f 2f726576 70616f63 2e74706f     _server/coapopt.
   1158f:	00707063                                cpp.

00011593 <_ZZ12copt_add_optP5sl_coP5optlvE19__PRETTY_FUNCTION__>:
   11593:	6f727265 20745f72 74706f63 6464615f     error_t copt_add
   115a3:	74706f5f 5f6c7328 2c2a6f63 74706f20     _opt(sl_co*, opt
   115b3:	292a766c 696f7600                                lv*).

000115b8 <_ZZ12copt_del_allP5sl_coE19__PRETTY_FUNCTION__>:
   115b8:	64696f76 706f6320 65645f74 6c615f6c     void copt_del_al
   115c8:	6c73286c 2a6f635f 72650029                       l(sl_co*).

000115d2 <_ZZ17copt_del_opt_typeP5sl_cotE19__PRETTY_FUNCTION__>:
   115d2:	6f727265 20745f72 74706f63 6c65645f     error_t copt_del
   115e2:	74706f5f 7079745f 6c732865 2a6f635f     _opt_type(sl_co*
   115f2:	6975202c 3631746e 0029745f              , uint16_t).

000115fe <_ZZ22copt_get_next_opt_typePK5sl_cotPPvE19__PRETTY_FUNCTION__>:
   115fe:	6c74706f 63202a76 5f74706f 5f746567     optlv* copt_get_
   1160e:	7478656e 74706f5f 7079745f 6f632865     next_opt_type(co
   1161e:	2074736e 635f6c73 202c2a6f 746e6975     nst sl_co*, uint
   1162e:	745f3631 6f76202c 2a2a6469 6f760029              16_t, void**).

0001163c <_ZZ9copt_initP5sl_coE19__PRETTY_FUNCTION__>:
   1163c:	64696f76 706f6320 6e695f74 73287469     void copt_init(s
   1164c:	6f635f6c 6400292a 626f5f6f 76726573     l_co*).do_observ
   1165c:	65203a65 68636f70 20782520 20697275     e: epoch %x uri 
   1166c:	64007325 626f5f6f 76726573 46203a65     %s.do_observe: F
   1167c:	20656572 3a6d6152 00642520 70616f63     ree Ram: %d.coap
   1168c:	73626f5f 65767265 7073725f 6550203a     _observe_rsp: Pe
   1169c:	6e69646e 65722067 6e6f7073 69206573     nding response i
   116ac:	7270206e 6572676f 2d207373 696b7320     n progress - ski
   116bc:	6e697070 656e2067 6f6e2077 69666974     pping new notifi
   116cc:	69746163 67006e6f 6f5f7465 625f7362     cation.get_obs_b
   116dc:	72755f79 61662069 64656c69 7325203a     y_uri failed: %s
   116ec:	756f4300 276e646c 64612074 624f2064     .Couldn't add Ob
   116fc:	76726573 706f2065 6e6f6974 756f4300     serve option.Cou
   1170c:	276e646c 64612074 614d2064 67412d78     ldn't add Max-Ag
   1171c:	706f2065 6e6f6974 616f6300 626f5f70     e option.coap_ob
   1172c:	76726573 73725f65 45203a70 726f7272     serve_rsp: Error
   1173c:	65726320 6e697461 65722067 6e6f7073      creating respon
   1174c:	25006573 64253a73 656c4320 64657261     se.%s:%d Cleared
   1175c:	6e657020 676e6964 7073725f 616f6300      pending_rsp.coa
   1176c:	626f5f70 76726573 73725f65 66203a70     p_observe_rsp: f
   1177c:	20656572 70736572 65736e6f 75626d20     ree response mbu
   1178c:	6e6f2066 72726520 2f00726f 75647261     f on error./ardu
   1179c:	2f6f6e69 44007325 65722d65 74736967     ino/%s.De-regist
   117ac:	4f207265 72657362 203a6576 63006425              er Observe: %d.

000117bb <_ZZ16coap_observe_rsphE12__FUNCTION__>:
   117bb:	70616f63 73626f5f 65767265 7073725f     coap_observe_rsp
   117cb:	74697400 223d656c 6f666e49 74633b22     .title="Info";ct
   117db:	2e00303d 6c6c6577 6f6e6b2d 69006e77     =0..well-known.i
   117eb:	73223d66 3b227379 6c746974 53223d65     f="sys";title="S
   117fb:	65747379 633b226d 32343d74 7665723b     ystem";ct=42;rev
   1180b:	003b313d 00737973 223d6669 75647261     =1;.sys.if="ardu
   1181b:	226f6e69 7469743b 223d656c 75647241     ino";title="Ardu
   1182b:	206f6e69 736e6553 2273726f 3d74633b     ino Sensors";ct=
   1183b:	003b3234 65726f63 002f3c00 656d6974     42;.core.</.time
   1184b:	6f704500 66206863 4720726f 6f205445     .Epoch for GET o
   1185b:	79732066 69742073 203a656d 78383025     f sys time: %08x
   1186b:	54555000 79732f20 69742f73 5020656d     .PUT /sys/time P
   1187b:	6f6c7961 53006461 69747465 5220676e     ayload.Setting R
   1188b:	74204354 7065206f 3a68636f 38302520     TC to epoch: %08
   1189b:	74730078 00737461 3d646f6d 70616f63     x.stats.mod=coap
   118ab:	646f6d00 7277703d 54454700 74732820     .mod=pwr.GET (st
   118bb:	73757461 29642520 61657220 64252064     atus %d) read %d
   118cb:	74796220 002e7365 20544553 61747328      bytes..SET (sta
   118db:	20737574 2e296425 6e655300 676e6964     tus %d)..Sending
   118eb:	73657220 65207465 746e6576 206f7420      reset event to 
   118fb:	63696e6d ff035000                                mnic.

00011900 <_ZL6rbtput>:
   11900:	ffff0350 737973b3 736e7304 76654672     P....sys.snsrFev
   11910:	7462723d 70616f63 725f735f 203a6e75     =rbtcoap_s_run: 
   11920:	65657266 20676e69 70737261 75626d20     freeing arsp mbu
   11930:	6f630066 735f7061 6e75725f 7266203a     f.coap_s_run: fr
   11940:	6e696565 70612067 6d206470 00667562     eeing appd mbuf.
   11950:	70616f63 725f735f 203a6e75 65657266     coap_s_run: free
   11960:	6d615220 6425203a 4c444800 6e692043      Ram: %d.HDLC in
   11970:	61697469 617a696c 6e6f6974 69616620     itialization fai
   11980:	2164656c 4b434100 726f6620 64696d20     led!.ACK for mid
   11990:	7830203a 72207825 69656365 2c646576     : 0x%x received,
   119a0:	6f6f6c20 2070756b 75746572 64656e72      lookup returned
   119b0:	00642520 6c696146 74206465 6e65206f      %d.Failed to en
   119c0:	656c6261 626f2064 76726573 6f662065     abled observe fo
   119d0:	52552072 25203a49 6e450073 656c6261     r URI: %s.Enable
   119e0:	626f2064 76726573 6f662065 52552072     d observe for UR
   119f0:	25203a49 69440073 6c626173 6f206465     I: %s.Disabled o
   11a00:	72657362 66206576 5520726f 25204952     bserve for URI %
   11a10:	72450073 20726f72 2067736d 3a707372     s.Error msg rsp:
   11a20:	65726620 676e6965 75626d20 6f4e0066      freeing mbuf.No
   11a30:	70737220 7266203a 6e696565 626d2067      rsp: freeing mb
   11a40:	50006675 65737261 72726520 203a726f     uf.Parse error: 
   11a50:	65657266 20676e69 6675626d 72724500     freeing mbuf.Err
   11a60:	203a726f 682f6372 656c3e2d 25203a6e     or: rc/h->len: %
   11a70:	64252f64 6363202c 646f632e 25203a65     d/%d, cc.code: %
   11a80:	6f630064 735f7061 6f72705f 46203a63     d.coap_s_proc: F
   11a90:	20656572 6d206363 00667562 6f6c6c41     ree cc mbuf.Allo
   11aa0:	65746163 75626d20 69772066 73206874     cate mbuf with s
   11ab0:	3a657a69 00642520 2e2e006d 6372732f     ize: %d.m.../src
   11ac0:	62696c2f 69726172 732f7365 5f696e73     /libraries/ssni_
   11ad0:	70616f63 7265735f 2f726576 66756268     coap_server/hbuf
   11ae0:	7070632e 75626d00                                .cpp.

00011ae5 <_ZZ5m_getvE19__PRETTY_FUNCTION__>:
   11ae5:	6675626d 5f6d202a 28746567 68540029     mbuf* m_get().Th
   11af5:	616d2065 61702078 616f6c79 69732064     e max payload si
   11b05:	7320657a 69636570 64656966 20736920     ze specified is 
   11b15:	206f6f74 6772616c 25203a65 79622064     too large: %d by
   11b25:	2e736574 65685420 78616d20 6d756d69     tes. The maximum
   11b35:	6c6c6120 6465776f 20736920 62206425      allowed is %d b
   11b45:	73657479 73680020 65722e73 2e007663     ytes .hss.recv..
   11b55:	72732f2e 696c2f63 72617262 2f736569     ./src/libraries/
   11b65:	696e7373 616f635f 65735f70 72657672     ssni_coap_server
   11b75:	6c64682f 632e7363 68007070 73636c64     /hdlcs.cpp.hdlcs
   11b85:	6165725f 20292864 7825202d 73657200     _read() - %x.res
   11b95:	646e6f70 206f7420 77205252 20687469     pond to RR with 
   11ba5:	52005252 6e657365 676e6964 61726620     RR.Resending fra
   11bb5:	5000656d 65636f72 69207373 6d6f636e     me.Process incom
   11bc5:	20676e69 6c727463 32302520 6e692078     ing ctrl %02x in
   11bd5:	61747320 25206574 65720064 6e6f7073      state %d.respon
   11be5:	72206573 20646578 70207461 616d6972     se rxed at prima
   11bf5:	72007972 65757165 72207473 27766365     ry.request recv'
   11c05:	6e692064 73696420 6e6e6f63 65746365     d in disconnecte
   11c15:	6f6d2064 48006564 5f434c44 4d524e53     d mode.HDLC_SNRM
   11c25:	4c444800 00495f43 78656e55 74636570     .HDLC_I.Unexpect
   11c35:	73206465 756e7165 284e206d 3d202953     ed seqnum N(S) =
   11c45:	20642520 52285620 203d2029 52006425      %d  V(R) = %d.R
   11c55:	20766365 72662049 00656d61 61746164     ecv I frame.data
   11c65:	20424320 20746f6e 70707573 6574726f      CB not supporte
   11c75:	44480064 525f434c 63680052 3a726e2e     d.HDLC_RR.hc.nr:
   11c85:	2c642520 73736820 3a73762e 00642520      %d, hss.vs: %d.
   11c95:	434c4448 5349445f 69640043 6e6f6373     HDLC_DISC.discon
   11ca5:	7463656e 00676e69 6f727265 202d2072     necting.error - 
   11cb5:	6d617266 65722065 7463656a 45006465     frame rejected.E
   11cc5:	726f7272 75202d20 6f6e6b6e 73206e77     rror - unknown s
   11cd5:	65746174 6425203a 6c646800 725f7363     tate: %d.hdlcs_r
   11ce5:	29286e75 25202d20 6e650064 20726574     un() - %d.enter 
   11cf5:	6d726f6e 6d206c61 0065646f 4d524e53     normal mode.SNRM
   11d05:	2041552d 70736572 65736e6f 20637220     -UA response rc 
   11d15:	6d006425                                         %d.

00011d18 <_ZZ10hdlcs_readvE19__PRETTY_FUNCTION__>:
   11d18:	6675626d 6468202a 5f73636c 64616572     mbuf* hdlcs_read
   11d28:	68002928                                         ().

00011d2b <_ZZ9hdlcs_runvE12__FUNCTION__>:
   11d2b:	636c6468 75725f73 6f76006e                       hdlcs_run.

00011d35 <_ZZL13hdlcs_get_bufiE19__PRETTY_FUNCTION__>:
   11d35:	64696f76 6c646820 675f7363 625f7465     void hdlcs_get_b
   11d45:	69286675 0029746e 636e7546 6e6f6974     uf(int).Function
   11d55:	65786520 65747563 75732064 73656363      executed succes
   11d65:	6c756673 4300796c 6b636568 756f7920     sfully.Check you
   11d75:	69772072 676e6972 6c46202e 20687361     r wiring. Flash 
   11d85:	70696863 20736920 2d6e6f6e 70736572     chip is non-resp
   11d95:	69736e6f 002e6576 6e6f632a 75727473     onsive..*constru
   11da5:	726f7463 5f666f5f 696f6863 2e2a6563     ctor_of_choice*.
   11db5:	69676562 2029286e 20736177 20746f6e     begin() was not 
   11dc5:	6c6c6163 69206465 6f76206e 73206469     called in void s
   11dd5:	70757465 55002928 6c62616e 6f742065     etup().Unable to
   11de5:	65646920 6669746e 68632079 202e7069      identify chip. 
   11df5:	20657241 20756f79 65727573 69687420     Are you sure thi
   11e05:	68632073 69207069 75732073 726f7070     s chip is suppor
   11e15:	3f646574 616e5500 20656c62 69206f74     ted?.Unable to i
   11e25:	746e6564 20796669 61706163 79746963     dentify capacity
   11e35:	7349202e 69687420 68632073 6f207069     . Is this chip o
   11e45:	63696666 6c6c6169 75732079 726f7070     fficially suppor
   11e55:	3f646574 20664920 2c746f6e 656c7020     ted? If not, ple
   11e65:	20657361 69666564 6120656e 41436020     ase define a `CA
   11e75:	49434150 20605954 736e6f63 746e6174     PACITY` constant
   11e85:	646e6120 636e6920 6564756c 20746920      and include it 
   11e95:	66206e69 6873616c 6765622e 43286e69     in flash.begin(C
   11ea5:	43415041 29595449 6843002e 69207069     APACITY)..Chip i
   11eb5:	75622073 002e7973 656b614d 72757320     s busy..Make sur
   11ec5:	6c612065 6970206c 6820736e 20657661     e all pins have 
   11ed5:	6e656562 6e6f6320 7463656e 70206465     been connected p
   11ee5:	65706f72 00796c72 65676150 65766f20     roperly.Page ove
   11ef5:	6f6c6672 61682077 65622073 64206e65     rflow has been d
   11f05:	62617369 2064656c 20646e61 20656874     isabled and the 
   11f15:	72646461 20737365 6c6c6163 65206465     address called e
   11f25:	65656378 74207364 6d206568 726f6d65     xceeds the memor
   11f35:	6e550079 656c6261 206f7420 62616e45     y.Unable to Enab
   11f45:	5720656c 69746972 7420676e 6863206f     le Writing to ch
   11f55:	002e7069 61656c50 6d206573 20656b61     ip..Please make 
   11f65:	65727573 65687420 4c4f4820 20262044     sure the HOLD & 
   11f75:	54495257 4f525045 54434554 6e697020     WRITEPROTECT pin
   11f85:	72612073 75702065 64656c6c 20707520     s are pulled up 
   11f95:	56206f74 54004343 20736968 74636573     to VCC.This sect
   11fa5:	6120726f 6165726c 63207964 61746e6f     or already conta
   11fb5:	20736e69 61746164 6c50002e 65736165     ins data..Please
   11fc5:	6b616d20 75732065 74206572 73206568      make sure the s
   11fd5:	6f746365 62207372 676e6965 69727720     ectors being wri
   11fe5:	6e657474 206f7420 20657261 73617265     tten to are eras
   11ff5:	002e6465 20756f59 20657261 6e6e7572     ed..You are runn
   12005:	20676e69 20776f6c 53206e6f 2e4d4152     ing low on SRAM.
   12015:	656c5020 20657361 6974706f 6573696d      Please optimise
   12025:	756f7920 72702072 6172676f 6f66206d      your program fo
   12035:	65622072 72657474 4d415220 61737520     r better RAM usa
   12045:	54006567 20736968 636e7566 6e6f6974     ge.This function
   12055:	20736920 20746f6e 70707573 6574726f      is not supporte
   12065:	79622064 65687420 616c6620 6d206873     d by the flash m
   12075:	726f6d65 61682079 61776472 002e6572     emory hardware..
   12085:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
   12095:	65722f64 656d7573 65706f20 69746172     d/resume operati
   120a5:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
   120b5:	68206e6f 66207361 656c6961 72652064     on has failed er
   120c5:	63726f72 6b636568 6e55002e 656c6261     rorcheck..Unable
   120d5:	206f7420 62616e65 3420656c 7479622d      to enable 4-byt
   120e5:	64612065 73657264 676e6973 6e55002e     e addressing..Un
   120f5:	656c6261 206f7420 61736964 20656c62     able to disable 
   12105:	79622d34 61206574 65726464 6e697373     4-byte addressin
   12115:	54002e67 63206568 20706968 63207369     g..The chip is c
   12125:	65727275 796c746e 776f7020 64657265     urrently powered
   12135:	776f6420 54002e6e 46206568 6873616c      down..The Flash
   12145:	69686320 6f642070 6e207365 7320746f      chip does not s
   12155:	6f707075 53207472 2e504446 616e5500     upport SFDP..Una
   12165:	20656c62 72206f74 20646165 73617245     ble to read Eras
   12175:	61502065 656d6172 73726574 6f726620     e Parameters fro
   12185:	6863206d 202e7069 65766552 6e697472     m chip. Revertin
   12195:	6f742067 62696c20 79726172 66656420     g to library def
   121a5:	746c7561 55002e73 6c62616e 6f742065     aults..Unable to
   121b5:	61657220 72652064 20657361 656d6974      read erase time
   121c5:	72662073 66206d6f 6873616c 6d656d20     s from flash mem
   121d5:	2e79726f 76655220 69747265 7420676e     ory. Reverting t
   121e5:	696c206f 72617262 65642079 6c756166     o library defaul
   121f5:	002e7374 62616e55 7420656c 6572206f     ts..Unable to re
   12205:	70206461 72676f72 74206d61 73656d69     ad program times
   12215:	6f726620 6c66206d 20687361 6f6d656d      from flash memo
   12225:	202e7972 65766552 6e697472 6f742067     ry. Reverting to
   12235:	62696c20 79726172 66656420 746c7561      library default
   12245:	4e002e73 6843206f 53207069 63656c65     s..No Chip Selec
   12255:	69702074 6564206e 656e6966 6e692064     t pin defined in
   12265:	65687420 73756320 206d6f74 20495053      the custom SPI 
   12275:	61727241 55002e79 6f6e6b6e 65206e77     Array..Unknown e
   12285:	726f7272 20664900 73696874 656f6420     rror.If this doe
   12295:	6f6e2073 65682074 7220706c 6c6f7365     s not help resol
   122a5:	632f6576 6972616c 74207966 20736968     ve/clarify this 
   122b5:	75737369 00202c65 61656c70 72206573     issue, .please r
   122c5:	65736961 206e6120 75737369 74612065     aise an issue at
   122d5:	74746820 2f2f3a70 2e777777 68746967      http://www.gith
   122e5:	632e6275 4d2f6d6f 6f7a7261 532f6867     ub.com/Marzogh/S
   122f5:	654d4950 79726f6d 7373692f 20736575     PIMemory/issues 
   12305:	68746977 65687420 74656420 736c6961     with the details
   12315:	20666f20 74616877 756f7920 65772072      of what your we
   12325:	64206572 676e696f 65687720 6874206e     re doing when th
   12335:	65207369 726f7272 63636f20 65727275     is error occurre
   12345:	80810064 01020514 01020600 00040700     d...............
   12355:	08010000 00000004 4c444801 65732043     .........HDLC se
   12365:	6620646e 656d6172 72724500 203a726f     nd frame.Error: 
   12375:	636c6468 6e65735f 72665f64 28656d61     hdlc_send_frame(
   12385:	69642029 6f6e2064 65732074 2520646e     ) did not send %
   12395:	79622064 20736574 72207361 69757165     d bytes as requi
   123a5:	0a646572 61726600 7420656d 3a657079     red..frame type:
   123b5:	25783020 65720078 79426461 28736574      0x%x.readBytes(
   123c5:	6f632029 3a746e75 00642520 20656854     ) count: %d.The 
   123d5:	54524155 63657220 65766965 66756220     UART receive buf
   123e5:	20726566 20736168 7265766f 776f6c66     fer has overflow
   123f5:	5700216e 65722065 25206461 79622064     n!.We read %d by
   12405:	20736574 20646e61 20656874 2078616d     tes and the max 
   12415:	25207369 79622064 2e736574 73694d00     is %d bytes..Mis
   12425:	676e6973 4c444820 6c662043 73286761     sing HDLC flag(s
   12435:	63680029 682e7874 65705f75 3d20646e     ).hctx.hu_pend =
   12445:	0032203d 20656854 6d617266 656c2065     = 2.The frame le
   12455:	6874676e 656f6420 74276e73 74616d20     ngth doesn't mat
   12465:	74206863 6e206568 65626d75 666f2072     ch the number of
   12475:	63657220 65766965 79622064 00736574      received bytes.
   12485:	6d617266 656c5f65 00203a6e 6c5f7872     frame_len: .rx_l
   12495:	203a6e65 00202020 63736944 20647261     en:    .Discard 
   124a5:	6d617266 202d2065 20435243 6f727265     frame - CRC erro
   124b5:	69440072 72616373 72662064 20656d61     r.Discard frame 
   124c5:	6162202d 6e692064 6c206f66 54006e65     - bad info len.T
   124d5:	48206568 20434c44 6c796170 2064616f     he HDLC payload 
   124e5:	74207369 6c206f6f 65677261 65570021     is too large!.We
   124f5:	746f6720 20642520 65747962 6e612073      got %d bytes an
   12505:	68742064 616d2065 73692078 20642520     d the max is %d 
   12515:	65747962 5a002e73 206f7265 6f666e69     bytes..Zero info
   12525:	006e656c 434c4448 63657220 72662076     len.HDLC recv fr
   12535:	00656d61 20646142 20726468 6c66202d     ame.Bad hdr - fl
   12545:	00687375 20646162 6f666e69 206e656c     ush.bad infolen 
   12555:	6c66202d 00687375 89000000                       - flush..

0001255e <_ZL15xmodem_crctable>:
   1255e:	11890000 329b2312 57ad4624 74bf6536     .....#.2$F.W6e.t
   1256e:	9dc18c48 bed3af5a dbe5ca6c f8f7e97e     H...Z...l...~...
   1257e:	01081081 221a3393 472c56a5 643e75b7     .....3.".V,G.u>d
   1258e:	8d409cc9 ae52bfdb cb64daed e876f9ff     ..@...R...d...v.
   1259e:	308b2102 13990210 76af6726 55bd4434     .!.0....&g.v4D.U
   125ae:	bcc3ad4a 9fd18e58 fae7eb6e d9f5c87c     J...X...n...|...
   125be:	200a3183 03181291 662e77a7 453c54b5     .1. .....w.f.T<E
   125ce:	ac42bdcb 8f509ed9 ea66fbef c974d8fd     ..B...P...f...t.
   125de:	538d4204 709f6116 15a90420 36bb2732     .B.S.a.p ...2'.6
   125ee:	dfc5ce4c fcd7ed5e 99e18868 baf3ab7a     L...^...h...z...
   125fe:	430c5285 601e7197 052814a1 263a37b3     .R.C.q.`..(..7:&
   1260e:	cf44decd ec56fddf 896098e9 aa72bbfb     ..D...V...`...r.
   1261e:	728f6306 519d4014 34ab2522 17b90630     .c.r.@.Q"%.40...
   1262e:	fec7ef4e ddd5cc5c b8e3a96a 9bf18a78     N...\...j...x...
   1263e:	620e7387 411c5095 242a35a3 073816b1     .s.b.P.A.5*$..8.
   1264e:	ee46ffcf cd54dcdd a862b9eb 8b709af9     ..F...T...b...p.
   1265e:	95818408 b693a71a d3a5c22c f0b7e13e     ........,...>...
   1266e:	19c90840 3adb2b52 5fed4e64 7cff6d76     @...R+.:dN._vm.|
   1267e:	85009489 a612b79b c324d2ad e036f1bf     ..........$...6.
   1268e:	094818c1 2a5a3bd3 4f6c5ee5 6c7e7df7     ..H..;Z*.^lO.}~l
   1269e:	b483a50a 97918618 f2a7e32e d1b5c03c     ............<...
   126ae:	38cb2942 1bd90a50 7eef6f66 5dfd4c74     B).8P...fo.~tL.]
   126be:	a402b58b 87109699 e226f3af c134d0bd     ..........&...4.
   126ce:	284a39c3 0b581ad1 6e6e7fe7 4d7c5cf5     .9J(..X...nn.\|M
   126de:	d785c60c f497e51e 91a18028 b2b3a33a     ........(...:...
   126ee:	5bcd4a44 78df6956 1de90c60 3efb2f72     DJ.[Vi.x`...r/.>
   126fe:	c704d68d e416f59f 812090a9 a232b3bb     .......... ...2.
   1270e:	4b4c5ac5 685e79d7 0d681ce1 2e7a3ff3     .ZLK.y^h..h..?z.
   1271e:	f687e70e d595c41c b0a3a12a 93b18238     ........*...8...
   1272e:	7acf6b46 59dd4854 3ceb2d62 1ff90e70     Fk.zTH.Yb-.<p...
   1273e:	e606f78f c514d49d a022b1ab 833092b9     .........."...0.
   1274e:	6a4e7bc7 495c58d5 2c6a3de3 0f781ef1     .{Nj.X\I.=j,..x.
   1275e:	78650000 71730070 00667472 00000000     ..exp.sqrtf.....
	...

00012770 <halF>:
   12770:	00000000 3fe00000 00000000 bfe00000     .......?........

00012780 <ln2HI>:
   12780:	fee00000 3fe62e42 fee00000 bfe62e42     ....B..?....B...

00012790 <ln2LO>:
   12790:	35793c76 3dea39ef 35793c76 bdea39ef     v<y5.9.=v<y5.9..
   127a0:	0000a0ec 0000a0bc 0000a0ce 0000a010     ................
   127b0:	0000a0ce 0000a0b2 0000a0ce 0000a010     ................
   127c0:	0000a0bc 0000a0bc 0000a0b2 0000a010     ................
   127d0:	0000a018 0000a018 0000a018 0000a0d4     ................
   127e0:	0000a0bc 0000a0bc 0000a090 0000a174     ............t...
   127f0:	0000a090 0000a0b2 0000a090 0000a174     ............t...
   12800:	0000a0bc 0000a0bc 0000a0b2 0000a174     ............t...
   12810:	0000a018 0000a018 0000a018 0000a17e     ............~...
   12820:	0000a46c 0000a3bc 0000a3bc 0000a3ba     l...............
   12830:	0000a45e 0000a45e 0000a454 0000a3ba     ^...^...T.......
   12840:	0000a45e 0000a454 0000a45e 0000a3ba     ^...T...^.......
   12850:	0000a464 0000a464 0000a464 0000a4f4     d...d...d.......
   12860:	0000b26c 0000b24e 0000b208 0000b126     l...N.......&...
   12870:	0000b208 0000b240 0000b208 0000b126     ....@.......&...
   12880:	0000b24e 0000b24e 0000b240 0000b126     N...N...@...&...
   12890:	0000b11e 0000b11e 0000b11e 0000b484     ................
   128a0:	0000bacc 0000b98c 0000b98c 0000b988     ................
   128b0:	0000baa4 0000baa4 0000ba96 0000b988     ................
   128c0:	0000baa4 0000ba96 0000baa4 0000b988     ................
   128d0:	0000baac 0000baac 0000baac 0000bcb0     ................
   128e0:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
   128f0:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
   12900:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
   12910:	20656e69 73256425 000a7325              ine %d%s%s..

0001291c <_global_impure_ptr>:
   1291c:	200000b8 49534f50 00000058              ... POSIX...

00012928 <DAYS_IN_MONTH>:
   12928:	0000001f 0000001c 0000001f 0000001e     ................
   12938:	0000001f 0000001e 0000001f 0000001f     ................
   12948:	0000001e 0000001f 0000001e 0000001f     ................

00012958 <_DAYS_BEFORE_MONTH>:
   12958:	00000000 0000001f 0000003b 0000005a     ........;...Z...
   12968:	00000078 00000097 000000b5 000000d4     x...............
   12978:	000000f3 00000111 00000130 0000014e     ........0...N...
   12988:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   12998:	464e4900 666e6900 4e414e00 6e616e00     .INF.inf.NAN.nan
   129a8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   129b8:	31300046 35343332 39383736 64636261     F.0123456789abcd
   129c8:	54006665 4d47005a 31250054 305e5b30     ef.TZ.GMT.%10[^0
   129d8:	2b2c392d 6e255d2d 68254d00 2e6e2575     -9,+-]%n.M%hu%n.
   129e8:	25756825 68252e6e 006e2575 7568252f     %hu%n.%hu%n./%hu
   129f8:	253a6e25 6e257568 7568253a 00006e25              %n:%hu%n:%hu%n.

00012a07 <_ctype_>:
   12a07:	20202000 20202020 28282020 20282828     .         ((((( 
   12a17:	20202020 20202020 20202020 20202020                     
   12a27:	10108820 10101010 10101010 10101010      ...............
   12a37:	04040410 04040404 10040404 10101010     ................
   12a47:	41411010 41414141 01010101 01010101     ..AAAAAA........
   12a57:	01010101 01010101 01010101 10101010     ................
   12a67:	42421010 42424242 02020202 02020202     ..BBBBBB........
   12a77:	02020202 02020202 02020202 10101010     ................
   12a87:	00000020 00000000 00000000 00000000      ...............
	...
   12b07:	666e4900 74696e69 614e0079 0000004e     .Infinity.NaN...
	...

00012b18 <__sf_fake_stderr>:
	...

00012b38 <__sf_fake_stdin>:
	...

00012b58 <__sf_fake_stdout>:
	...

00012b78 <__month_lengths>:
   12b78:	0000001f 0000001c 0000001f 0000001e     ................
   12b88:	0000001f 0000001e 0000001f 0000001f     ................
   12b98:	0000001e 0000001f 0000001e 0000001f     ................
   12ba8:	0000001f 0000001d 0000001f 0000001e     ................
   12bb8:	0000001f 0000001e 0000001f 0000001f     ................
   12bc8:	0000001e 0000001f 0000001e 0000001f     ................

00012bd8 <__mprec_bigtens>:
   12bd8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   12be8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   12bf8:	7f73bf3c 75154fdd                       <.s..O.u

00012c00 <__mprec_tens>:
   12c00:	00000000 3ff00000 00000000 40240000     .......?......$@
   12c10:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   12c20:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   12c30:	00000000 412e8480 00000000 416312d0     .......A......cA
   12c40:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   12c50:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   12c60:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   12c70:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   12c80:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   12c90:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   12ca0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   12cb0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   12cc0:	79d99db4 44ea7843                       ...yCx.D

00012cc8 <p05.6047>:
   12cc8:	00000005 00000019 0000007d 00012cf2     ........}....,..
   12cd8:	00012cf5 00012cf8 61462d41 3938662d     .,...,..A-Fa-f89
   12ce8:	33323130 37363534 2d2b005d 00303000     01234567].+-.00.
   12cf8:	00005878                                xX..

00012cfc <__EH_FRAME_BEGIN__>:
   12cfc:	00000000                                ....

Disassembly of section .ramfunc:

00012d00 <banzai>:
void banzai() {
   12d00:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12d02:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
   12d04:	4b11      	ldr	r3, [pc, #68]	; (12d4c <banzai+0x4c>)
   12d06:	4a12      	ldr	r2, [pc, #72]	; (12d50 <banzai+0x50>)
   12d08:	3304      	adds	r3, #4
   12d0a:	4293      	cmp	r3, r2
   12d0c:	d808      	bhi.n	12d20 <banzai+0x20>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12d0e:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
   12d12:	4a10      	ldr	r2, [pc, #64]	; (12d54 <banzai+0x54>)
   12d14:	4b10      	ldr	r3, [pc, #64]	; (12d58 <banzai+0x58>)
   12d16:	60da      	str	r2, [r3, #12]
   12d18:	f3bf 8f4f 	dsb	sy
    __NOP();
   12d1c:	46c0      	nop			; (mov r8, r8)
   12d1e:	e7fd      	b.n	12d1c <banzai+0x1c>
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   12d20:	4a0e      	ldr	r2, [pc, #56]	; (12d5c <banzai+0x5c>)
	while (!nvmReady())
   12d22:	2101      	movs	r1, #1
   12d24:	0010      	movs	r0, r2
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   12d26:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
   12d28:	420c      	tst	r4, r1
   12d2a:	d0fc      	beq.n	12d26 <banzai+0x26>
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   12d2c:	2120      	movs	r1, #32
   12d2e:	8b14      	ldrh	r4, [r2, #24]
   12d30:	31ff      	adds	r1, #255	; 0xff
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   12d32:	089b      	lsrs	r3, r3, #2
   12d34:	005b      	lsls	r3, r3, #1
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   12d36:	4321      	orrs	r1, r4
   12d38:	8311      	strh	r1, [r2, #24]
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   12d3a:	61d3      	str	r3, [r2, #28]
          NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
   12d3c:	4b08      	ldr	r3, [pc, #32]	; (12d60 <banzai+0x60>)
   12d3e:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
   12d40:	2301      	movs	r3, #1
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   12d42:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
   12d44:	421a      	tst	r2, r3
   12d46:	d0fc      	beq.n	12d42 <banzai+0x42>
   12d48:	e7e1      	b.n	12d0e <banzai+0xe>
   12d4a:	46c0      	nop			; (mov r8, r8)
   12d4c:	00002000 	.word	0x00002000
   12d50:	00000203 	.word	0x00000203
   12d54:	05fa0004 	.word	0x05fa0004
   12d58:	e000ed00 	.word	0xe000ed00
   12d5c:	41004000 	.word	0x41004000
   12d60:	ffffa502 	.word	0xffffa502
