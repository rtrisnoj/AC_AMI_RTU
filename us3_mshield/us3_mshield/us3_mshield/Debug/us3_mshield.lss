
us3_mshield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f310  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000064  00011310  00011310  00011310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002f0  20000000  00011374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001b74  200002f0  00011664  000202f0  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
  6 .debug_info   000cc489  00000000  00000000  00020371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000f97e  00000000  00000000  000ec7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000121c1  00000000  00000000  000fc178  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000012f8  00000000  00000000  0010e339  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001e70  00000000  00000000  0010f631  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015878  00000000  00000000  001114a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000232d1  00000000  00000000  00126d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009c50c  00000000  00000000  00149fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004e4c  00000000  00000000  001e64f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stab         000000cc  00000000  00000000  001eb344  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      000001b9  00000000  00000000  001eb410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 f5 25 00 00 d9 25 00 00 f1 25 00 00     ... .%...%...%..
	...
    202c:	d9 25 00 00 00 00 00 00 00 00 00 00 d9 25 00 00     .%...........%..
    203c:	49 26 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     I&...%...%...%..
    204c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 dd 25 00 00     .%...%...%...%..
    205c:	d9 25 00 00 a1 49 00 00 d9 25 00 00 d9 25 00 00     .%...I...%...%..
    206c:	b1 49 00 00 91 49 00 00 d9 25 00 00 d9 25 00 00     .I...I...%...%..
    207c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    208c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    209c:	d9 25 00 00 d9 25 00 00 d9 25 00 00 d9 25 00 00     .%...%...%...%..
    20ac:	d9 25 00 00 00 00 00 00                             .%......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	200002f0 	.word	0x200002f0
    20d4:	00000000 	.word	0x00000000
    20d8:	0001130c 	.word	0x0001130c

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	200002f4 	.word	0x200002f4
    2108:	0001130c 	.word	0x0001130c
    210c:	200002ec 	.word	0x200002ec
    2110:	00000000 	.word	0x00000000

00002114 <setup>:

//
//  Arduino setup function.
//
void setup()
{
    2114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sapi_error_t rcode;
	
	// Initialize Sensor API
	sapi_initialize(NULL);
    2116:	2000      	movs	r0, #0
    2118:	f002 fbf6 	bl	4908 <_Z15sapi_initializePc>
	
	// Register temp sensor
	temp_sensor_id = sapi_register_sensor(TEMP_SENSOR_TYPE, temp_init_sensor, temp_read_sensor, temp_read_cfg, temp_write_cfg, 1, 60);
    211c:	233c      	movs	r3, #60	; 0x3c
    211e:	9302      	str	r3, [sp, #8]
    2120:	3b3b      	subs	r3, #59	; 0x3b
    2122:	9301      	str	r3, [sp, #4]
    2124:	4b05      	ldr	r3, [pc, #20]	; (213c <setup+0x28>)
    2126:	4a06      	ldr	r2, [pc, #24]	; (2140 <setup+0x2c>)
    2128:	9300      	str	r3, [sp, #0]
    212a:	4906      	ldr	r1, [pc, #24]	; (2144 <setup+0x30>)
    212c:	4b06      	ldr	r3, [pc, #24]	; (2148 <setup+0x34>)
    212e:	4807      	ldr	r0, [pc, #28]	; (214c <setup+0x38>)
    2130:	f002 f9b2 	bl	4498 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>
	
	// Initialize temp sensor
	rcode = sapi_init_sensor(temp_sensor_id);
    2134:	f002 f9f8 	bl	4528 <_Z16sapi_init_sensorh>
	
	// Initialize echo sensor
	//rcode = sapi_init_sensor(echo_sensor_id);
	
	
}
    2138:	b005      	add	sp, #20
    213a:	bd00      	pop	{pc}
    213c:	0000215d 	.word	0x0000215d
    2140:	00002439 	.word	0x00002439
    2144:	00002485 	.word	0x00002485
    2148:	000023a5 	.word	0x000023a5
    214c:	0000f8cc 	.word	0x0000f8cc

00002150 <loop>:

//
// Arduino main loop function.
//
void loop()
{
    2150:	b510      	push	{r4, lr}
	// Call SAPI run to do the heavy lifting
	sapi_run();
    2152:	f002 f99c 	bl	448e <_Z8sapi_runv>

    2156:	bd10      	pop	{r4, pc}

00002158 <_ZN11DHT_UnifiedD1Ev>:
#include <Adafruit_Sensor.h>
#include <DHT.h>

#define DHT_SENSOR_VERSION 1

class DHT_Unified {
    2158:	4770      	bx	lr
	...

0000215c <_Z14temp_write_cfgPcPh>:
// Write sensor configuration. Processes payload sent from client. Callback called on
//  CoAP Put configuration value
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_write_cfg(char *payload, uint8_t *len)
{
    215c:	b510      	push	{r4, lr}
	if (!strcmp(payload, "cfg=C"))
    215e:	490b      	ldr	r1, [pc, #44]	; (218c <_Z14temp_write_cfgPcPh+0x30>)
{
    2160:	0004      	movs	r4, r0
	if (!strcmp(payload, "cfg=C"))
    2162:	f00a fc2c 	bl	c9be <strcmp>
    2166:	2800      	cmp	r0, #0
    2168:	d103      	bne.n	2172 <_Z14temp_write_cfgPcPh+0x16>
	{
		context.scalecfg = CELSIUS_SCALE;
    216a:	2243      	movs	r2, #67	; 0x43
    216c:	4b08      	ldr	r3, [pc, #32]	; (2190 <_Z14temp_write_cfgPcPh+0x34>)
    216e:	701a      	strb	r2, [r3, #0]
	{
		return SAPI_ERR_NOT_IMPLEMENTED;
	}

	return SAPI_ERR_OK;
}
    2170:	bd10      	pop	{r4, pc}
	else if (!strcmp(payload, "cfg=F"))
    2172:	4908      	ldr	r1, [pc, #32]	; (2194 <_Z14temp_write_cfgPcPh+0x38>)
    2174:	0020      	movs	r0, r4
    2176:	f00a fc22 	bl	c9be <strcmp>
    217a:	0003      	movs	r3, r0
		return SAPI_ERR_NOT_IMPLEMENTED;
    217c:	2001      	movs	r0, #1
	else if (!strcmp(payload, "cfg=F"))
    217e:	2b00      	cmp	r3, #0
    2180:	d1f6      	bne.n	2170 <_Z14temp_write_cfgPcPh+0x14>
		context.scalecfg = FAHRENHEIT_SCALE;
    2182:	2146      	movs	r1, #70	; 0x46
    2184:	4a02      	ldr	r2, [pc, #8]	; (2190 <_Z14temp_write_cfgPcPh+0x34>)
	return SAPI_ERR_OK;
    2186:	0018      	movs	r0, r3
		context.scalecfg = FAHRENHEIT_SCALE;
    2188:	7011      	strb	r1, [r2, #0]
    218a:	e7f1      	b.n	2170 <_Z14temp_write_cfgPcPh+0x14>
    218c:	0000f8d1 	.word	0x0000f8d1
    2190:	20000310 	.word	0x20000310
    2194:	0000f8d7 	.word	0x0000f8d7

00002198 <_Z16calculateVoltagev>:
 * relay have to be powered with 3.3V
 * LOW to turn on
 * HIGH to turn off
 */
//digitalWrite(pinRelay, LOW); // turn on tehe light
float calculateVoltage(){
    2198:	b530      	push	{r4, r5, lr}
    219a:	b0a3      	sub	sp, #140	; 0x8c
  //digitalWrite(pinRelay, LOW); //turn on the light
  //analogWrite(pinRelay, 255);
  // Measuring Voltage
  RunningStatistics inputStats;
    219c:	a801      	add	r0, sp, #4
    219e:	f001 ff3a 	bl	4016 <_ZN17RunningStatisticsC1Ev>
  inputStats.setWindowSecs( windowLength );
    21a2:	4b17      	ldr	r3, [pc, #92]	; (2200 <_Z16calculateVoltagev+0x68>)
    21a4:	a801      	add	r0, sp, #4
    21a6:	6819      	ldr	r1, [r3, #0]
    21a8:	f001 ff10 	bl	3fcc <_ZN17RunningStatistics13setWindowSecsEf>

  //take 10000 samples to get more accurate reading
  while(temp != 10000){
    21ac:	4c15      	ldr	r4, [pc, #84]	; (2204 <_Z16calculateVoltagev+0x6c>)
    21ae:	4b16      	ldr	r3, [pc, #88]	; (2208 <_Z16calculateVoltagev+0x70>)
    21b0:	6822      	ldr	r2, [r4, #0]
    21b2:	4d16      	ldr	r5, [pc, #88]	; (220c <_Z16calculateVoltagev+0x74>)
    21b4:	429a      	cmp	r2, r3
    21b6:	d01e      	beq.n	21f6 <_Z16calculateVoltagev+0x5e>
    rawValue = analogRead(A4);
    21b8:	2005      	movs	r0, #5
    21ba:	f001 fc3b 	bl	3a34 <analogRead>
    21be:	4b14      	ldr	r3, [pc, #80]	; (2210 <_Z16calculateVoltagev+0x78>)
    21c0:	6018      	str	r0, [r3, #0]
    inputStats.input(rawValue);
    21c2:	f007 fa31 	bl	9628 <__aeabi_i2f>
    21c6:	1c01      	adds	r1, r0, #0
    21c8:	a801      	add	r0, sp, #4
    21ca:	f001 ff3f 	bl	404c <_ZN17RunningStatistics5inputEf>

    //Serial.print("Raw Value : ");
    //Serial.println(inputStats.sigma());

    voltageReading = slope * inputStats.sigma();
    21ce:	a801      	add	r0, sp, #4
    21d0:	f001 ff6b 	bl	40aa <_ZN17RunningStatistics5sigmaEv>
    21d4:	4b0f      	ldr	r3, [pc, #60]	; (2214 <_Z16calculateVoltagev+0x7c>)
    21d6:	6819      	ldr	r1, [r3, #0]
    21d8:	f006 ff32 	bl	9040 <__aeabi_fmul>
    //voltageReading = voltageReading * 40.3231;
    voltageReading = voltageReading * 47.1931;
    21dc:	f009 f862 	bl	b2a4 <__aeabi_f2d>
    21e0:	4b0d      	ldr	r3, [pc, #52]	; (2218 <_Z16calculateVoltagev+0x80>)
    21e2:	4a0e      	ldr	r2, [pc, #56]	; (221c <_Z16calculateVoltagev+0x84>)
    21e4:	f008 f9fa 	bl	a5dc <__aeabi_dmul>
    21e8:	f009 f8ae 	bl	b348 <__aeabi_d2f>

    temp = temp + 1;
    21ec:	6823      	ldr	r3, [r4, #0]
    voltageReading = voltageReading * 47.1931;
    21ee:	6028      	str	r0, [r5, #0]
    temp = temp + 1;
    21f0:	3301      	adds	r3, #1
    21f2:	6023      	str	r3, [r4, #0]
  while(temp != 10000){
    21f4:	e7da      	b.n	21ac <_Z16calculateVoltagev+0x14>
  }
	temp = 0;
    21f6:	2300      	movs	r3, #0
  //Serial.print("Voltage = ");
  //Serial.println(voltageReading);

  return voltageReading;
    21f8:	6828      	ldr	r0, [r5, #0]
	temp = 0;
    21fa:	6023      	str	r3, [r4, #0]
 }
    21fc:	b023      	add	sp, #140	; 0x8c
    21fe:	bd30      	pop	{r4, r5, pc}
    2200:	2000035c 	.word	0x2000035c
    2204:	20000354 	.word	0x20000354
    2208:	00002710 	.word	0x00002710
    220c:	20000358 	.word	0x20000358
    2210:	20000350 	.word	0x20000350
    2214:	20000004 	.word	0x20000004
    2218:	404798b7 	.word	0x404798b7
    221c:	80346dc6 	.word	0x80346dc6

00002220 <_Z18readACCurrentValuev>:

 float readACCurrentValue()
{
    2220:	b570      	push	{r4, r5, r6, lr}
  float ACCurrtntValue = 0;
  unsigned int peakVoltage = 0;
    2222:	2400      	movs	r4, #0
{
    2224:	4d17      	ldr	r5, [pc, #92]	; (2284 <_Z18readACCurrentValuev+0x64>)
  unsigned int voltageVirtualValue = 0;  //Vrms
  for (int i = 0; i < 3000; i++ )
  {
    peakVoltage  += analogRead(ACPin);   //read peak voltage
    2226:	2022      	movs	r0, #34	; 0x22
    2228:	f001 fc04 	bl	3a34 <analogRead>
    222c:	3d01      	subs	r5, #1
    222e:	1824      	adds	r4, r4, r0
    delay(1);
    2230:	2001      	movs	r0, #1
    2232:	f000 fa4d 	bl	26d0 <delay>
  for (int i = 0; i < 3000; i++ )
    2236:	2d00      	cmp	r5, #0
    2238:	d1f5      	bne.n	2226 <_Z18readACCurrentValuev+0x6>
  }
  peakVoltage = peakVoltage / 5;
    223a:	2105      	movs	r1, #5
    223c:	0020      	movs	r0, r4
    223e:	f006 f959 	bl	84f4 <__udivsi3>
  voltageVirtualValue = peakVoltage * 0.707;    //change the peak voltage to the Virtual Value of voltage
    2242:	f008 fff7 	bl	b234 <__aeabi_ui2d>
    2246:	4a10      	ldr	r2, [pc, #64]	; (2288 <_Z18readACCurrentValuev+0x68>)
    2248:	4b10      	ldr	r3, [pc, #64]	; (228c <_Z18readACCurrentValuev+0x6c>)
    224a:	f008 f9c7 	bl	a5dc <__aeabi_dmul>
    224e:	f006 fb57 	bl	8900 <__aeabi_d2uiz>

  /*The circuit is amplified by 2 times, so it is divided by 2.*/
  voltageVirtualValue = (voltageVirtualValue * Vref / 1024) / 2;
    2252:	f007 fa39 	bl	96c8 <__aeabi_ui2f>
    2256:	4b0e      	ldr	r3, [pc, #56]	; (2290 <_Z18readACCurrentValuev+0x70>)
    2258:	6819      	ldr	r1, [r3, #0]
    225a:	f006 fef1 	bl	9040 <__aeabi_fmul>
    225e:	21ea      	movs	r1, #234	; 0xea
    2260:	0589      	lsls	r1, r1, #22
    2262:	f006 feed 	bl	9040 <__aeabi_fmul>
    2266:	21fc      	movs	r1, #252	; 0xfc
    2268:	0589      	lsls	r1, r1, #22
    226a:	f006 fee9 	bl	9040 <__aeabi_fmul>
    226e:	f006 fb2f 	bl	88d0 <__aeabi_f2uiz>

  ACCurrtntValue = voltageVirtualValue * ACTectionRange;
    2272:	2314      	movs	r3, #20
    2274:	4358      	muls	r0, r3
    2276:	f007 fa27 	bl	96c8 <__aeabi_ui2f>

  return ACCurrtntValue/1000;
    227a:	4906      	ldr	r1, [pc, #24]	; (2294 <_Z18readACCurrentValuev+0x74>)
    227c:	f006 fcf0 	bl	8c60 <__aeabi_fdiv>
}
    2280:	bd70      	pop	{r4, r5, r6, pc}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	00000bb8 	.word	0x00000bb8
    2288:	76c8b439 	.word	0x76c8b439
    228c:	3fe69fbe 	.word	0x3fe69fbe
    2290:	2000030c 	.word	0x2000030c
    2294:	447a0000 	.word	0x447a0000

00002298 <_Z18temp_build_payloadPcPf>:
//
//  Note that the payload is text. Payloads can also be a byte array of binary data.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_build_payload(char *buf, float *reading)
{
    2298:	b5f0      	push	{r4, r5, r6, r7, lr}
	char 		payload[64];
	char		reading_buf[32];
	char        datatype30[] = "30,";
    229a:	4b38      	ldr	r3, [pc, #224]	; (237c <_Z18temp_build_payloadPcPf+0xe4>)
{
    229c:	b09f      	sub	sp, #124	; 0x7c
	char        datatype30[] = "30,";
    229e:	9302      	str	r3, [sp, #8]
	char		datatype31[] = "31,"; //current datatype is 31
    22a0:	4b37      	ldr	r3, [pc, #220]	; (2380 <_Z18temp_build_payloadPcPf+0xe8>)
	char		unitVoltage[] = "V";
    22a2:	466a      	mov	r2, sp
	char		datatype31[] = "31,"; //current datatype is 31
    22a4:	9303      	str	r3, [sp, #12]
	char		unitVoltage[] = "V";
    22a6:	2356      	movs	r3, #86	; 0x56
{
    22a8:	0007      	movs	r7, r0
	char		unitVoltage[] = "V";
    22aa:	8013      	strh	r3, [r2, #0]
	char		unitCurrent[] = "A";
    22ac:	ac01      	add	r4, sp, #4
    22ae:	3b15      	subs	r3, #21
	char		unit_buf[4];
	time_t     	epoch;
	uint32_t	indx;
	char    rvoltage[] = "120.00,";
    22b0:	2208      	movs	r2, #8
    22b2:	4934      	ldr	r1, [pc, #208]	; (2384 <_Z18temp_build_payloadPcPf+0xec>)
    22b4:	a807      	add	r0, sp, #28
	char		unitCurrent[] = "A";
    22b6:	8023      	strh	r3, [r4, #0]
	char    rvoltage[] = "120.00,";
    22b8:	f009 fa6b 	bl	b792 <memcpy>
	char    rcurrent[] = "0.23,";
    22bc:	4932      	ldr	r1, [pc, #200]	; (2388 <_Z18temp_build_payloadPcPf+0xf0>)
    22be:	2206      	movs	r2, #6
    22c0:	a805      	add	r0, sp, #20
    22c2:	f009 fa66 	bl	b792 <memcpy>
	char    temp_epoch[20];
	
	
	
	Vref = readVref();
    22c6:	4a31      	ldr	r2, [pc, #196]	; (238c <_Z18temp_build_payloadPcPf+0xf4>)
    22c8:	4b31      	ldr	r3, [pc, #196]	; (2390 <_Z18temp_build_payloadPcPf+0xf8>)
    22ca:	601a      	str	r2, [r3, #0]
	sprintf(rvoltage, "%.2f,", calculateVoltage());
    22cc:	f7ff ff64 	bl	2198 <_Z16calculateVoltagev>
    22d0:	f008 ffe8 	bl	b2a4 <__aeabi_f2d>
    22d4:	4d2f      	ldr	r5, [pc, #188]	; (2394 <_Z18temp_build_payloadPcPf+0xfc>)
    22d6:	0002      	movs	r2, r0
    22d8:	000b      	movs	r3, r1
    22da:	a807      	add	r0, sp, #28
    22dc:	0029      	movs	r1, r5
    22de:	f00a fb3f 	bl	c960 <siprintf>
	sprintf(rcurrent, "%.2f,", readACCurrentValue());
    22e2:	f7ff ff9d 	bl	2220 <_Z18readACCurrentValuev>
    22e6:	f008 ffdd 	bl	b2a4 <__aeabi_f2d>
    22ea:	000b      	movs	r3, r1
    22ec:	0002      	movs	r2, r0
    22ee:	0029      	movs	r1, r5
    22f0:	a805      	add	r0, sp, #20
    22f2:	f00a fb35 	bl	c960 <siprintf>
	
	// Create string containing the UNIX epoch
	epoch = get_rtc_epoch();
    22f6:	f001 fef7 	bl	40e8 <_Z13get_rtc_epochv>
    22fa:	0006      	movs	r6, r0
	sprintf(temp_epoch, "%d,", epoch);
    22fc:	4d26      	ldr	r5, [pc, #152]	; (2398 <_Z18temp_build_payloadPcPf+0x100>)
    22fe:	0002      	movs	r2, r0
    2300:	0029      	movs	r1, r5
    2302:	a809      	add	r0, sp, #36	; 0x24
    2304:	f00a fb2c 	bl	c960 <siprintf>
	sprintf(payload, "%d,", epoch);
    2308:	0032      	movs	r2, r6
    230a:	0029      	movs	r1, r5
    230c:	a80e      	add	r0, sp, #56	; 0x38
    230e:	f00a fb27 	bl	c960 <siprintf>
	strcat(payload, datatype30);
    2312:	a902      	add	r1, sp, #8
    2314:	a80e      	add	r0, sp, #56	; 0x38
    2316:	f00a fb45 	bl	c9a4 <strcat>
	strcat(payload, rvoltage);
    231a:	a907      	add	r1, sp, #28
    231c:	a80e      	add	r0, sp, #56	; 0x38
    231e:	f00a fb41 	bl	c9a4 <strcat>
	strcpy(unit_buf, unitVoltage);
    2322:	4669      	mov	r1, sp
    2324:	a804      	add	r0, sp, #16
    2326:	f00a fb54 	bl	c9d2 <strcpy>
	strcat(payload, unit_buf);
    232a:	a904      	add	r1, sp, #16
    232c:	a80e      	add	r0, sp, #56	; 0x38
    232e:	f00a fb39 	bl	c9a4 <strcat>
	strcat(payload, ";");
    2332:	491a      	ldr	r1, [pc, #104]	; (239c <_Z18temp_build_payloadPcPf+0x104>)
    2334:	a80e      	add	r0, sp, #56	; 0x38
    2336:	f00a fb35 	bl	c9a4 <strcat>
	
	strcat(payload,temp_epoch);
    233a:	a909      	add	r1, sp, #36	; 0x24
    233c:	a80e      	add	r0, sp, #56	; 0x38
    233e:	f00a fb31 	bl	c9a4 <strcat>
	strcat(payload, datatype31);
    2342:	a903      	add	r1, sp, #12
    2344:	a80e      	add	r0, sp, #56	; 0x38
    2346:	f00a fb2d 	bl	c9a4 <strcat>
	strcat(payload, rcurrent);
    234a:	a905      	add	r1, sp, #20
    234c:	a80e      	add	r0, sp, #56	; 0x38
    234e:	f00a fb29 	bl	c9a4 <strcat>
	strcpy(unit_buf, unitCurrent);
    2352:	0021      	movs	r1, r4
    2354:	a804      	add	r0, sp, #16
    2356:	f00a fb3c 	bl	c9d2 <strcpy>
	strcat(payload, unit_buf);
    235a:	a904      	add	r1, sp, #16
    235c:	a80e      	add	r0, sp, #56	; 0x38
    235e:	f00a fb21 	bl	c9a4 <strcat>
	strcat(payload, data2);
	strcat(payload, ";A4,");
	sprintf(data4, "%d", valueA4);
	strcat(payload, data4);
*/
	strcpy(buf, payload);
    2362:	a90e      	add	r1, sp, #56	; 0x38
    2364:	0038      	movs	r0, r7
    2366:	f00a fb34 	bl	c9d2 <strcpy>
	
	dlog(LOG_DEBUG, "Temp Payload: %s", payload);
    236a:	aa0e      	add	r2, sp, #56	; 0x38
    236c:	490c      	ldr	r1, [pc, #48]	; (23a0 <_Z18temp_build_payloadPcPf+0x108>)
    236e:	2007      	movs	r0, #7
    2370:	f001 ff52 	bl	4218 <_Z4dlogiPKcz>
	return SAPI_ERR_OK;
}
    2374:	2000      	movs	r0, #0
    2376:	b01f      	add	sp, #124	; 0x7c
    2378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	002c3033 	.word	0x002c3033
    2380:	002c3133 	.word	0x002c3133
    2384:	0000f994 	.word	0x0000f994
    2388:	0000f99c 	.word	0x0000f99c
    238c:	454e4000 	.word	0x454e4000
    2390:	2000030c 	.word	0x2000030c
    2394:	0000f979 	.word	0x0000f979
    2398:	0000f97f 	.word	0x0000f97f
    239c:	0001041d 	.word	0x0001041d
    23a0:	0000f983 	.word	0x0000f983

000023a4 <_Z13temp_read_cfgPcPh>:
{
    23a4:	b570      	push	{r4, r5, r6, lr}
    23a6:	000e      	movs	r6, r1
	sapi_error_t rc = temp_build_payload(payload, NULL);
    23a8:	2100      	movs	r1, #0
{
    23aa:	0004      	movs	r4, r0
	sapi_error_t rc = temp_build_payload(payload, NULL);
    23ac:	f7ff ff74 	bl	2298 <_Z18temp_build_payloadPcPf>
    23b0:	0005      	movs	r5, r0
	*len = strlen(payload);
    23b2:	0020      	movs	r0, r4
    23b4:	f00a fb15 	bl	c9e2 <strlen>
    23b8:	7030      	strb	r0, [r6, #0]
}
    23ba:	0028      	movs	r0, r5
    23bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000023c0 <_Z10read_dht11Pf>:
//
// Read the temp value from the DHT11 sensor.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t read_dht11(float *reading)
{
    23c0:	b530      	push	{r4, r5, lr}
    float    min_value;                       /**< minimum value of this sensor's value in SI units */
    float    resolution;                      /**< smallest difference between two values reported by this sensor */
    int32_t  min_delay;                       /**< min delay in microseconds between events. zero = not a constant rate */
} sensor_t;

class Adafruit_Sensor {
    23c2:	4b17      	ldr	r3, [pc, #92]	; (2420 <_Z10read_dht11Pf+0x60>)
    23c4:	b08f      	sub	sp, #60	; 0x3c
    23c6:	7f1a      	ldrb	r2, [r3, #28]
    23c8:	0005      	movs	r5, r0
    23ca:	a801      	add	r0, sp, #4
    23cc:	7102      	strb	r2, [r0, #4]
public:
  DHT_Unified(uint8_t pin, uint8_t type, uint8_t count=6, int32_t tempSensorId=-1, int32_t humiditySensorId=-1);
  void begin();

  class Temperature : public Adafruit_Sensor {
    23ce:	4a15      	ldr	r2, [pc, #84]	; (2424 <_Z10read_dht11Pf+0x64>)
	sapi_error_t rc = SAPI_ERR_OK;
	float re = INVALID_TEMP;

	// Get temperature event
	sensors_event_t event;
	dht.temperature().getEvent(&event);
    23d0:	a905      	add	r1, sp, #20
    23d2:	9201      	str	r2, [sp, #4]
    23d4:	6a1a      	ldr	r2, [r3, #32]
    23d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    23d8:	6082      	str	r2, [r0, #8]
    23da:	60c3      	str	r3, [r0, #12]
    23dc:	f001 fcf7 	bl	3dce <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>

	// Check for NaN
	if (isnan(event.temperature))
    23e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
    23e2:	1c21      	adds	r1, r4, #0
    23e4:	1c20      	adds	r0, r4, #0
    23e6:	f007 f8e7 	bl	95b8 <__aeabi_fcmpun>
    23ea:	2800      	cmp	r0, #0
    23ec:	d000      	beq.n	23f0 <_Z10read_dht11Pf+0x30>
	{
		re = NO_SENSOR_TEMP;
    23ee:	4c0e      	ldr	r4, [pc, #56]	; (2428 <_Z10read_dht11Pf+0x68>)
		re = event.temperature;
		rc = SAPI_ERR_OK;
	}
	
	// Reading is in C. Convert to F if needed.
	if (context.scalecfg == FAHRENHEIT_SCALE)
    23f0:	4b0e      	ldr	r3, [pc, #56]	; (242c <_Z10read_dht11Pf+0x6c>)
    23f2:	781b      	ldrb	r3, [r3, #0]
    23f4:	b25b      	sxtb	r3, r3
    23f6:	2b46      	cmp	r3, #70	; 0x46
    23f8:	d10d      	bne.n	2416 <_Z10read_dht11Pf+0x56>
	{
		// Convert from Celsius to Fahrenheit
		re *= 1.8;
    23fa:	1c20      	adds	r0, r4, #0
    23fc:	f008 ff52 	bl	b2a4 <__aeabi_f2d>
    2400:	4a0b      	ldr	r2, [pc, #44]	; (2430 <_Z10read_dht11Pf+0x70>)
    2402:	4b0c      	ldr	r3, [pc, #48]	; (2434 <_Z10read_dht11Pf+0x74>)
    2404:	f008 f8ea 	bl	a5dc <__aeabi_dmul>
    2408:	f008 ff9e 	bl	b348 <__aeabi_d2f>
		re += 32;
    240c:	2184      	movs	r1, #132	; 0x84
    240e:	05c9      	lsls	r1, r1, #23
    2410:	f006 fa94 	bl	893c <__aeabi_fadd>
    2414:	1c04      	adds	r4, r0, #0
	}
	
	// Assign output
	*reading = re;
	return rc;
}
    2416:	2000      	movs	r0, #0
	*reading = re;
    2418:	602c      	str	r4, [r5, #0]
}
    241a:	b00f      	add	sp, #60	; 0x3c
    241c:	bd30      	pop	{r4, r5, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	20000318 	.word	0x20000318
    2424:	0000fa0c 	.word	0x0000fa0c
    2428:	42c80000 	.word	0x42c80000
    242c:	20000310 	.word	0x20000310
    2430:	cccccccd 	.word	0xcccccccd
    2434:	3ffccccc 	.word	0x3ffccccc

00002438 <_Z16temp_read_sensorPcPh>:
	float reading = 0.0;
    2438:	2300      	movs	r3, #0
{
    243a:	b570      	push	{r4, r5, r6, lr}
    243c:	b092      	sub	sp, #72	; 0x48
    243e:	0006      	movs	r6, r0
    rc = read_dht11(&reading);
    2440:	a801      	add	r0, sp, #4
{
    2442:	000d      	movs	r5, r1
	float reading = 0.0;
    2444:	9301      	str	r3, [sp, #4]
    rc = read_dht11(&reading);
    2446:	f7ff ffbb 	bl	23c0 <_Z10read_dht11Pf>
    244a:	1e04      	subs	r4, r0, #0
	if (rc != SAPI_ERR_OK)
    244c:	d10c      	bne.n	2468 <_Z16temp_read_sensorPcPh+0x30>
	rc = temp_build_payload(buffer, &reading);
    244e:	a901      	add	r1, sp, #4
    2450:	a802      	add	r0, sp, #8
    2452:	f7ff ff21 	bl	2298 <_Z18temp_build_payloadPcPf>
	strcpy(payload, buffer);
    2456:	a902      	add	r1, sp, #8
	rc = temp_build_payload(buffer, &reading);
    2458:	0004      	movs	r4, r0
	strcpy(payload, buffer);
    245a:	0030      	movs	r0, r6
    245c:	f00a fab9 	bl	c9d2 <strcpy>
	*len = strlen(buffer);
    2460:	a802      	add	r0, sp, #8
    2462:	f00a fabe 	bl	c9e2 <strlen>
    2466:	7028      	strb	r0, [r5, #0]
}
    2468:	0020      	movs	r0, r4
    246a:	b012      	add	sp, #72	; 0x48
    246c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002470 <_Z18temp_sensor_enablev>:
//
//////////////////////////////////////////////////////////////////////////

sapi_error_t temp_sensor_enable(void)
{
	context.enable = 1;
    2470:	2201      	movs	r2, #1
    2472:	4b03      	ldr	r3, [pc, #12]	; (2480 <_Z18temp_sensor_enablev+0x10>)
	context.alertstate = tsat_cleared;
	return SAPI_ERR_OK;
}
    2474:	2000      	movs	r0, #0
	context.enable = 1;
    2476:	711a      	strb	r2, [r3, #4]
	context.alertstate = tsat_cleared;
    2478:	1892      	adds	r2, r2, r2
    247a:	705a      	strb	r2, [r3, #1]
}
    247c:	4770      	bx	lr
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	20000310 	.word	0x20000310

00002484 <_Z16temp_init_sensorv>:
{
    2484:	b5f0      	push	{r4, r5, r6, r7, lr}
	context.scalecfg = FAHRENHEIT_SCALE;
    2486:	2246      	movs	r2, #70	; 0x46
	context.alertstate = tsat_disabled;
    2488:	2600      	movs	r6, #0
	context.scalecfg = FAHRENHEIT_SCALE;
    248a:	4b33      	ldr	r3, [pc, #204]	; (2558 <_Z16temp_init_sensorv+0xd4>)
{
    248c:	b091      	sub	sp, #68	; 0x44
	context.scalecfg = FAHRENHEIT_SCALE;
    248e:	701a      	strb	r2, [r3, #0]
	context.alertstate = tsat_disabled;
    2490:	705e      	strb	r6, [r3, #1]
	temp_sensor_enable();
    2492:	f7ff ffed 	bl	2470 <_Z18temp_sensor_enablev>
	dht.begin();
    2496:	4c31      	ldr	r4, [pc, #196]	; (255c <_Z16temp_init_sensorv+0xd8>)
    2498:	0020      	movs	r0, r4
    249a:	f001 fced 	bl	3e78 <_ZN11DHT_Unified5beginEv>
	println("DHT11 Sensor Initialized!");
    249e:	4830      	ldr	r0, [pc, #192]	; (2560 <_Z16temp_init_sensorv+0xdc>)
    24a0:	f001 ff78 	bl	4394 <_Z7printlnPKc>
    24a4:	7f23      	ldrb	r3, [r4, #28]
    24a6:	aa02      	add	r2, sp, #8
    24a8:	7113      	strb	r3, [r2, #4]
    24aa:	4b2e      	ldr	r3, [pc, #184]	; (2564 <_Z16temp_init_sensorv+0xe0>)
	dht.temperature().getSensor(&sensor);
    24ac:	0010      	movs	r0, r2
    24ae:	9302      	str	r3, [sp, #8]
    24b0:	6a23      	ldr	r3, [r4, #32]
    24b2:	a906      	add	r1, sp, #24
    24b4:	9304      	str	r3, [sp, #16]
    24b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    24b8:	9301      	str	r3, [sp, #4]
    24ba:	9305      	str	r3, [sp, #20]
    24bc:	f001 fd10 	bl	3ee0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
	println("");
    24c0:	4c29      	ldr	r4, [pc, #164]	; (2568 <_Z16temp_init_sensorv+0xe4>)
    24c2:	0020      	movs	r0, r4
    24c4:	f001 ff66 	bl	4394 <_Z7printlnPKc>
	println("------------------------------------");
    24c8:	4f28      	ldr	r7, [pc, #160]	; (256c <_Z16temp_init_sensorv+0xe8>)
    24ca:	0038      	movs	r0, r7
    24cc:	f001 ff62 	bl	4394 <_Z7printlnPKc>
	print  ("Sensor:       "); println(sensor.name);
    24d0:	4827      	ldr	r0, [pc, #156]	; (2570 <_Z16temp_init_sensorv+0xec>)
    24d2:	f001 ff49 	bl	4368 <_Z5printPKc>
    24d6:	a806      	add	r0, sp, #24
    24d8:	f001 ff5c 	bl	4394 <_Z7printlnPKc>
	print  ("Driver Ver:   "); printnum(sensor.version);    println("");
    24dc:	4825      	ldr	r0, [pc, #148]	; (2574 <_Z16temp_init_sensorv+0xf0>)
    24de:	f001 ff43 	bl	4368 <_Z5printPKc>
    24e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    24e4:	f001 ff6c 	bl	43c0 <_Z8printnumi>
    24e8:	0020      	movs	r0, r4
    24ea:	f001 ff53 	bl	4394 <_Z7printlnPKc>
	print  ("Unique ID:    "); printnum(sensor.sensor_id);  println("");
    24ee:	4822      	ldr	r0, [pc, #136]	; (2578 <_Z16temp_init_sensorv+0xf4>)
    24f0:	f001 ff3a 	bl	4368 <_Z5printPKc>
    24f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    24f6:	f001 ff63 	bl	43c0 <_Z8printnumi>
    24fa:	0020      	movs	r0, r4
    24fc:	f001 ff4a 	bl	4394 <_Z7printlnPKc>
	print  ("Max Value:    "); printnum(sensor.max_value);  println(" C");
    2500:	481e      	ldr	r0, [pc, #120]	; (257c <_Z16temp_init_sensorv+0xf8>)
    2502:	f001 ff31 	bl	4368 <_Z5printPKc>
    2506:	980c      	ldr	r0, [sp, #48]	; 0x30
    2508:	f007 f86e 	bl	95e8 <__aeabi_f2iz>
    250c:	f001 ff58 	bl	43c0 <_Z8printnumi>
    2510:	4d1b      	ldr	r5, [pc, #108]	; (2580 <_Z16temp_init_sensorv+0xfc>)
    2512:	0028      	movs	r0, r5
    2514:	f001 ff3e 	bl	4394 <_Z7printlnPKc>
	print  ("Min Value:    "); printnum(sensor.min_value);  println(" C");
    2518:	481a      	ldr	r0, [pc, #104]	; (2584 <_Z16temp_init_sensorv+0x100>)
    251a:	f001 ff25 	bl	4368 <_Z5printPKc>
    251e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2520:	f007 f862 	bl	95e8 <__aeabi_f2iz>
    2524:	f001 ff4c 	bl	43c0 <_Z8printnumi>
    2528:	0028      	movs	r0, r5
    252a:	f001 ff33 	bl	4394 <_Z7printlnPKc>
	print  ("Resolution:   "); printnum(sensor.resolution); println(" C");
    252e:	4816      	ldr	r0, [pc, #88]	; (2588 <_Z16temp_init_sensorv+0x104>)
    2530:	f001 ff1a 	bl	4368 <_Z5printPKc>
    2534:	980e      	ldr	r0, [sp, #56]	; 0x38
    2536:	f007 f857 	bl	95e8 <__aeabi_f2iz>
    253a:	f001 ff41 	bl	43c0 <_Z8printnumi>
    253e:	0028      	movs	r0, r5
    2540:	f001 ff28 	bl	4394 <_Z7printlnPKc>
	println("------------------------------------");        println("");
    2544:	0038      	movs	r0, r7
    2546:	f001 ff25 	bl	4394 <_Z7printlnPKc>
    254a:	0020      	movs	r0, r4
    254c:	f001 ff22 	bl	4394 <_Z7printlnPKc>
}
    2550:	0030      	movs	r0, r6
    2552:	b011      	add	sp, #68	; 0x44
    2554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	20000310 	.word	0x20000310
    255c:	20000318 	.word	0x20000318
    2560:	0000f8dd 	.word	0x0000f8dd
    2564:	0000fa0c 	.word	0x0000fa0c
    2568:	0000fd92 	.word	0x0000fd92
    256c:	0000f8f7 	.word	0x0000f8f7
    2570:	0000f91c 	.word	0x0000f91c
    2574:	0000f92b 	.word	0x0000f92b
    2578:	0000f93a 	.word	0x0000f93a
    257c:	0000f949 	.word	0x0000f949
    2580:	0000f958 	.word	0x0000f958
    2584:	0000f95b 	.word	0x0000f95b
    2588:	0000f96a 	.word	0x0000f96a

0000258c <_GLOBAL__sub_I_dht>:
DHT_Unified dht(A1, DHT_TYPE);
    258c:	2301      	movs	r3, #1
sapi_error_t temp_sensor_disable(void)
{
	context.enable = 0;
	context.alertstate = tsat_disabled;
	return SAPI_ERR_OK;
    258e:	b513      	push	{r0, r1, r4, lr}
DHT_Unified dht(A1, DHT_TYPE);
    2590:	4c0b      	ldr	r4, [pc, #44]	; (25c0 <_GLOBAL__sub_I_dht+0x34>)
    2592:	425b      	negs	r3, r3
    2594:	9301      	str	r3, [sp, #4]
    2596:	9300      	str	r3, [sp, #0]
    2598:	220b      	movs	r2, #11
    259a:	3307      	adds	r3, #7
    259c:	2100      	movs	r1, #0
    259e:	0020      	movs	r0, r4
    25a0:	f001 fc52 	bl	3e48 <_ZN11DHT_UnifiedC1Ehhhll>
    25a4:	4a07      	ldr	r2, [pc, #28]	; (25c4 <_GLOBAL__sub_I_dht+0x38>)
    25a6:	4908      	ldr	r1, [pc, #32]	; (25c8 <_GLOBAL__sub_I_dht+0x3c>)
    25a8:	0020      	movs	r0, r4
    25aa:	f005 fce3 	bl	7f74 <__aeabi_atexit>
float windowLength = 40.0/testFrequency;     // how long to average the signal, for statistist
    25ae:	4b07      	ldr	r3, [pc, #28]	; (25cc <_GLOBAL__sub_I_dht+0x40>)
    25b0:	4807      	ldr	r0, [pc, #28]	; (25d0 <_GLOBAL__sub_I_dht+0x44>)
    25b2:	6819      	ldr	r1, [r3, #0]
    25b4:	f006 fb54 	bl	8c60 <__aeabi_fdiv>
    25b8:	4b06      	ldr	r3, [pc, #24]	; (25d4 <_GLOBAL__sub_I_dht+0x48>)
    25ba:	6018      	str	r0, [r3, #0]
    25bc:	bd13      	pop	{r0, r1, r4, pc}
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	20000318 	.word	0x20000318
    25c4:	20000000 	.word	0x20000000
    25c8:	00002159 	.word	0x00002159
    25cc:	20000008 	.word	0x20000008
    25d0:	42200000 	.word	0x42200000
    25d4:	2000035c 	.word	0x2000035c

000025d8 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    25d8:	be03      	bkpt	0x0003
    25da:	e7fe      	b.n	25da <Dummy_Handler+0x2>

000025dc <USB_Handler>:
#else
static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    25dc:	4b03      	ldr	r3, [pc, #12]	; (25ec <USB_Handler+0x10>)
{
    25de:	b510      	push	{r4, lr}
  if (usb_isr)
    25e0:	681b      	ldr	r3, [r3, #0]
    25e2:	2b00      	cmp	r3, #0
    25e4:	d000      	beq.n	25e8 <USB_Handler+0xc>
    usb_isr();
    25e6:	4798      	blx	r3
}
    25e8:	bd10      	pop	{r4, pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	20000360 	.word	0x20000360

000025f0 <HardFault_Handler>:
#endif
#endif

void HardFault_Handler(void)
{
  __BKPT(13);
    25f0:	be0d      	bkpt	0x000d
    25f2:	e7fe      	b.n	25f2 <HardFault_Handler+0x2>

000025f4 <Reset_Handler>:
{
    25f4:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    25f6:	490f      	ldr	r1, [pc, #60]	; (2634 <Reset_Handler+0x40>)
    25f8:	4c0f      	ldr	r4, [pc, #60]	; (2638 <Reset_Handler+0x44>)
    25fa:	42a1      	cmp	r1, r4
    25fc:	d104      	bne.n	2608 <Reset_Handler+0x14>
  SystemInit();
    25fe:	f000 f8f5 	bl	27ec <SystemInit>
  main();
    2602:	f000 f8a3 	bl	274c <main>
    2606:	e7fe      	b.n	2606 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2608:	4d0c      	ldr	r5, [pc, #48]	; (263c <Reset_Handler+0x48>)
    260a:	2300      	movs	r3, #0
    260c:	428d      	cmp	r5, r1
    260e:	d0f6      	beq.n	25fe <Reset_Handler+0xa>
    2610:	18ca      	adds	r2, r1, r3
    2612:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2614:	42a2      	cmp	r2, r4
    2616:	d305      	bcc.n	2624 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2618:	4290      	cmp	r0, r2
    261a:	d0f0      	beq.n	25fe <Reset_Handler+0xa>
    261c:	4b08      	ldr	r3, [pc, #32]	; (2640 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    261e:	4909      	ldr	r1, [pc, #36]	; (2644 <Reset_Handler+0x50>)
      *pDest = 0;
    2620:	2200      	movs	r2, #0
    2622:	e004      	b.n	262e <Reset_Handler+0x3a>
      *pDest = *pSrc;
    2624:	6800      	ldr	r0, [r0, #0]
    2626:	3304      	adds	r3, #4
    2628:	6010      	str	r0, [r2, #0]
    262a:	e7f1      	b.n	2610 <Reset_Handler+0x1c>
      *pDest = 0;
    262c:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    262e:	428b      	cmp	r3, r1
    2630:	d3fc      	bcc.n	262c <Reset_Handler+0x38>
    2632:	e7e4      	b.n	25fe <Reset_Handler+0xa>
    2634:	20000000 	.word	0x20000000
    2638:	200002f0 	.word	0x200002f0
    263c:	00011374 	.word	0x00011374
    2640:	200002f0 	.word	0x200002f0
    2644:	20001e64 	.word	0x20001e64

00002648 <SysTick_Handler>:
{
    2648:	b510      	push	{r4, lr}
  if (sysTickHook())
    264a:	f000 f87c 	bl	2746 <sysTickHook>
    264e:	2800      	cmp	r0, #0
    2650:	d101      	bne.n	2656 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    2652:	f000 f863 	bl	271c <SysTick_DefaultHandler>
}
    2656:	bd10      	pop	{r4, pc}

00002658 <USB_SetHandler>:
  usb_isr = new_usb_isr;
    2658:	4b01      	ldr	r3, [pc, #4]	; (2660 <USB_SetHandler+0x8>)
    265a:	6018      	str	r0, [r3, #0]
}
    265c:	4770      	bx	lr
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	20000360 	.word	0x20000360

00002664 <millis>:
#endif

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    2664:	4b01      	ldr	r3, [pc, #4]	; (266c <millis+0x8>)
    2666:	6818      	ldr	r0, [r3, #0]
}
    2668:	4770      	bx	lr
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	20000364 	.word	0x20000364

00002670 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
    2670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    2672:	4813      	ldr	r0, [pc, #76]	; (26c0 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2674:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
    2676:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
    2678:	4912      	ldr	r1, [pc, #72]	; (26c4 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    267a:	4c13      	ldr	r4, [pc, #76]	; (26c8 <micros+0x58>)
  ticks2  = SysTick->VAL;
    267c:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    267e:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
    2680:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2682:	0e9b      	lsrs	r3, r3, #26
    2684:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2686:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
    2688:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    268a:	6862      	ldr	r2, [r4, #4]
    268c:	9f01      	ldr	r7, [sp, #4]
    268e:	0e92      	lsrs	r2, r2, #26
    2690:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
    2692:	4667      	mov	r7, ip
    2694:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    2696:	4293      	cmp	r3, r2
    2698:	d10e      	bne.n	26b8 <micros+0x48>
    269a:	42bd      	cmp	r5, r7
    269c:	d10c      	bne.n	26b8 <micros+0x48>
    269e:	4286      	cmp	r6, r0
    26a0:	d30a      	bcc.n	26b8 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    26a2:	195b      	adds	r3, r3, r5
    26a4:	25fa      	movs	r5, #250	; 0xfa
    26a6:	6848      	ldr	r0, [r1, #4]
    26a8:	00ad      	lsls	r5, r5, #2
    26aa:	1b86      	subs	r6, r0, r6
    26ac:	4807      	ldr	r0, [pc, #28]	; (26cc <micros+0x5c>)
    26ae:	436b      	muls	r3, r5
    26b0:	4370      	muls	r0, r6
    26b2:	0d00      	lsrs	r0, r0, #20
    26b4:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    26b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    26b8:	003d      	movs	r5, r7
    26ba:	0013      	movs	r3, r2
    26bc:	0006      	movs	r6, r0
    26be:	e7e3      	b.n	2688 <micros+0x18>
    26c0:	20000364 	.word	0x20000364
    26c4:	e000e010 	.word	0xe000e010
    26c8:	e000ed00 	.word	0xe000ed00
    26cc:	00005555 	.word	0x00005555

000026d0 <delay>:

void delay( unsigned long ms )
{
    26d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26d2:	1e04      	subs	r4, r0, #0
  if (ms)
    26d4:	d01c      	beq.n	2710 <delay+0x40>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    26d6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    26da:	b672      	cpsid	i
#if !defined(NO_DELAY_HIGH_WORD)
    uint8_t enableInterrupts = ((__get_PRIMASK() & 0x1) == 0);
    __disable_irq();
#endif

    uint32_t start = _ulTickCount ;
    26dc:	4e0d      	ldr	r6, [pc, #52]	; (2714 <delay+0x44>)
#if !defined(NO_DELAY_HIGH_WORD)
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    26de:	4f0e      	ldr	r7, [pc, #56]	; (2718 <delay+0x48>)
    uint32_t start = _ulTickCount ;
    26e0:	6835      	ldr	r5, [r6, #0]
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    26e2:	683a      	ldr	r2, [r7, #0]
    26e4:	9201      	str	r2, [sp, #4]

    if (enableInterrupts) {
    26e6:	07db      	lsls	r3, r3, #31
    26e8:	d400      	bmi.n	26ec <delay+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
    26ea:	b662      	cpsie	i
      __enable_irq();
    }

    // Check for _ulTickCount overflow
    uint32_t remaining = (0xFFFFFFFF - start);
    26ec:	43eb      	mvns	r3, r5
    if (ms > remaining) {
    26ee:	429c      	cmp	r4, r3
    26f0:	d904      	bls.n	26fc <delay+0x2c>
      ms -= (remaining + 1);
    26f2:	1964      	adds	r4, r4, r5
      start = 0;
    26f4:	2500      	movs	r5, #0
      targetTickCountHighWord++;
    26f6:	9b01      	ldr	r3, [sp, #4]
    26f8:	3301      	adds	r3, #1
    26fa:	9301      	str	r3, [sp, #4]
    }
#endif

    do
    {
      yield() ;
    26fc:	f000 f822 	bl	2744 <yield>
#if !defined(NO_DELAY_HIGH_WORD)
    } while (_ulTickCountHighWord < targetTickCountHighWord || (_ulTickCount - start) < ms ) ;
    2700:	683b      	ldr	r3, [r7, #0]
    2702:	9a01      	ldr	r2, [sp, #4]
    2704:	4293      	cmp	r3, r2
    2706:	d3f9      	bcc.n	26fc <delay+0x2c>
    2708:	6833      	ldr	r3, [r6, #0]
    270a:	1b5b      	subs	r3, r3, r5
    270c:	429c      	cmp	r4, r3
    270e:	d8f5      	bhi.n	26fc <delay+0x2c>
#else
    } while (_ulTickCount - start < ms ) ;
#endif
  }
}
    2710:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	20000364 	.word	0x20000364
    2718:	20000368 	.word	0x20000368

0000271c <SysTick_DefaultHandler>:
#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
  // Increment tick count each ms
  _ulTickCount++;
    271c:	4b07      	ldr	r3, [pc, #28]	; (273c <SysTick_DefaultHandler+0x20>)
{
    271e:	b510      	push	{r4, lr}
  _ulTickCount++;
    2720:	681a      	ldr	r2, [r3, #0]
    2722:	3201      	adds	r2, #1
    2724:	601a      	str	r2, [r3, #0]

#if !defined(NO_DELAY_HIGH_WORD)
  if ( _ulTickCount == 0 )
    2726:	681b      	ldr	r3, [r3, #0]
    2728:	2b00      	cmp	r3, #0
    272a:	d103      	bne.n	2734 <SysTick_DefaultHandler+0x18>
  {
    _ulTickCountHighWord++;
    272c:	4a04      	ldr	r2, [pc, #16]	; (2740 <SysTick_DefaultHandler+0x24>)
    272e:	6813      	ldr	r3, [r2, #0]
    2730:	3301      	adds	r3, #1
    2732:	6013      	str	r3, [r2, #0]
  }
#endif
#if defined(CDC_ONLY) || defined(CDC_HID) || defined(WITH_CDC)
  tickReset();
    2734:	f000 f838 	bl	27a8 <tickReset>
#endif
}
    2738:	bd10      	pop	{r4, pc}
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	20000364 	.word	0x20000364
    2740:	20000368 	.word	0x20000368

00002744 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    2744:	4770      	bx	lr

00002746 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    2746:	2000      	movs	r0, #0
    2748:	4770      	bx	lr

0000274a <_Z11initVariantv>:
#include "sam.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    274a:	4770      	bx	lr

0000274c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    274c:	b510      	push	{r4, lr}
  init();
    274e:	f001 f859 	bl	3804 <init>

  __libc_init_array();
    2752:	f008 ffb3 	bl	b6bc <__libc_init_array>

  initVariant();
    2756:	f7ff fff8 	bl	274a <_Z11initVariantv>

  delay(1);
    275a:	2001      	movs	r0, #1
    275c:	f7ff ffb8 	bl	26d0 <delay>
#if defined(USBCON) && !defined(USB_DISABLED)
  USBDevice.init();
    2760:	4c08      	ldr	r4, [pc, #32]	; (2784 <main+0x38>)
    2762:	0020      	movs	r0, r4
    2764:	f000 faf6 	bl	2d54 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    2768:	0020      	movs	r0, r4
    276a:	f000 fb53 	bl	2e14 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    276e:	f7ff fcd1 	bl	2114 <setup>

  for (;;)
  {
    loop();
    2772:	f7ff fced 	bl	2150 <loop>
    if (serialEventRun) serialEventRun();
    2776:	4b04      	ldr	r3, [pc, #16]	; (2788 <main+0x3c>)
    2778:	2b00      	cmp	r3, #0
    277a:	d0fa      	beq.n	2772 <main+0x26>
    277c:	e000      	b.n	2780 <main+0x34>
    277e:	bf00      	nop
    2780:	e7f7      	b.n	2772 <main+0x26>
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	2000036c 	.word	0x2000036c
    2788:	00000000 	.word	0x00000000

0000278c <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    278c:	4b01      	ldr	r3, [pc, #4]	; (2794 <initiateReset+0x8>)
    278e:	6018      	str	r0, [r3, #0]
}
    2790:	4770      	bx	lr
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	2000000c 	.word	0x2000000c

00002798 <cancelReset>:

void cancelReset() {
	ticks = -1;
    2798:	2201      	movs	r2, #1
    279a:	4b02      	ldr	r3, [pc, #8]	; (27a4 <cancelReset+0xc>)
    279c:	4252      	negs	r2, r2
    279e:	601a      	str	r2, [r3, #0]
}
    27a0:	4770      	bx	lr
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	2000000c 	.word	0x2000000c

000027a8 <tickReset>:

void tickReset() {
	if (ticks == -1)
    27a8:	4a05      	ldr	r2, [pc, #20]	; (27c0 <tickReset+0x18>)
void tickReset() {
    27aa:	b510      	push	{r4, lr}
	if (ticks == -1)
    27ac:	6813      	ldr	r3, [r2, #0]
    27ae:	1c59      	adds	r1, r3, #1
    27b0:	d005      	beq.n	27be <tickReset+0x16>
		return;
	ticks--;
    27b2:	3b01      	subs	r3, #1
    27b4:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    27b6:	2b00      	cmp	r3, #0
    27b8:	d101      	bne.n	27be <tickReset+0x16>
		banzai();
    27ba:	4b02      	ldr	r3, [pc, #8]	; (27c4 <tickReset+0x1c>)
    27bc:	4798      	blx	r3
}
    27be:	bd10      	pop	{r4, pc}
    27c0:	2000000c 	.word	0x2000000c
    27c4:	00011311 	.word	0x00011311

000027c8 <waitForSync>:
void waitForSync( void )
{
#if (SAMD21 || SAMD11)
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21 || SAMD51)
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    27c8:	4902      	ldr	r1, [pc, #8]	; (27d4 <waitForSync+0xc>)
    27ca:	4b03      	ldr	r3, [pc, #12]	; (27d8 <waitForSync+0x10>)
    27cc:	684a      	ldr	r2, [r1, #4]
    27ce:	421a      	tst	r2, r3
    27d0:	d1fc      	bne.n	27cc <waitForSync+0x4>
#endif
}
    27d2:	4770      	bx	lr
    27d4:	40001800 	.word	0x40001800
    27d8:	000007fd 	.word	0x000007fd

000027dc <waitForPLL>:
{
#if (SAMD51)
  while ( OSCCTRL->Dpll[0].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
  while ( OSCCTRL->Dpll[1].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
#else
  while ( OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
    27dc:	230e      	movs	r3, #14
    27de:	4902      	ldr	r1, [pc, #8]	; (27e8 <waitForPLL+0xc>)
    27e0:	780a      	ldrb	r2, [r1, #0]
    27e2:	421a      	tst	r2, r3
    27e4:	d1fc      	bne.n	27e0 <waitForPLL+0x4>
#endif
}
    27e6:	4770      	bx	lr
    27e8:	40000c38 	.word	0x40000c38

000027ec <SystemInit>:
   * Disable automatic NVM write operations (errata reference 13134, applies to D21/D11/L21, but not C21 or D51)
   */
#if (SAMD21 || SAMD11)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_HALF | NVMCTRL_CTRLB_MANW) ; // one wait state
#elif (SAML21 || SAMC21)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27ec:	2284      	movs	r2, #132	; 0x84
{
    27ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27f0:	4b29      	ldr	r3, [pc, #164]	; (2898 <SystemInit+0xac>)
  /* Turn on the digital interface clock */
#if !defined(TRUST_RESET_DEFAULTS)
#if (SAMD21 || SAMD11)
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
#elif (SAML21 || SAMC21 || SAMD51)
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27f2:	4d2a      	ldr	r5, [pc, #168]	; (289c <SystemInit+0xb0>)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    27f4:	605a      	str	r2, [r3, #4]
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27f6:	2340      	movs	r3, #64	; 0x40
    27f8:	696a      	ldr	r2, [r5, #20]
#endif
#endif

#if (SAML21)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    27fa:	2102      	movs	r1, #2
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    27fc:	4313      	orrs	r3, r2
    27fe:	616b      	str	r3, [r5, #20]
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2800:	2380      	movs	r3, #128	; 0x80
    2802:	2201      	movs	r2, #1
    2804:	05db      	lsls	r3, r3, #23
    2806:	719a      	strb	r2, [r3, #6]
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    2808:	7898      	ldrb	r0, [r3, #2]
    280a:	4301      	orrs	r1, r0
    280c:	7099      	strb	r1, [r3, #2]
  while ( (PM->INTFLAG.reg & PM_INTFLAG_PLRDY) != PM_INTFLAG_PLRDY );
    280e:	7999      	ldrb	r1, [r3, #6]
    2810:	4211      	tst	r1, r2
    2812:	d0fc      	beq.n	280e <SystemInit+0x22>

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) );	/* Wait for reset to complete */
#elif (SAML21 || SAMC21 || SAMD51)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;

  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    2814:	2101      	movs	r1, #1
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    2816:	4c22      	ldr	r4, [pc, #136]	; (28a0 <SystemInit+0xb4>)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2818:	719a      	strb	r2, [r3, #6]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    281a:	4b22      	ldr	r3, [pc, #136]	; (28a4 <SystemInit+0xb8>)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    281c:	7022      	strb	r2, [r4, #0]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    281e:	7822      	ldrb	r2, [r4, #0]
    2820:	420a      	tst	r2, r1
    2822:	d002      	beq.n	282a <SystemInit+0x3e>
    2824:	6862      	ldr	r2, [r4, #4]
    2826:	421a      	tst	r2, r3
    2828:	d1f9      	bne.n	281e <SystemInit+0x32>
  SYSCTRL->DPLLCTRLA.reg = SYSCTRL_DPLLCTRLA_ENABLE;

  while ( (SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) != SYSCTRL_DPLLSTATUS_CLKRDY );

#elif (SAML21 || SAMC21)
  OSC32KCTRL->XOSC32K.reg = (OSC32KCTRL_XOSC32K_STARTUP( 0x4u ) | OSC32KCTRL_XOSC32K_XTALEN | OSC32KCTRL_XOSC32K_EN32K | OSC32KCTRL_XOSC32K_EN1K);
    282a:	4b1f      	ldr	r3, [pc, #124]	; (28a8 <SystemInit+0xbc>)
    282c:	4a1f      	ldr	r2, [pc, #124]	; (28ac <SystemInit+0xc0>)
    282e:	615a      	str	r2, [r3, #20]
  OSC32KCTRL->XOSC32K.bit.ENABLE = 1;
    2830:	2202      	movs	r2, #2
    2832:	6959      	ldr	r1, [r3, #20]
    2834:	430a      	orrs	r2, r1
    2836:	615a      	str	r2, [r3, #20]

  while ( (OSC32KCTRL->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) == 0 );       /* Wait for oscillator stabilization */
    2838:	2201      	movs	r2, #1
    283a:	68d9      	ldr	r1, [r3, #12]
    283c:	4211      	tst	r1, r2
    283e:	d0fc      	beq.n	283a <SystemInit+0x4e>

  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2840:	4b1b      	ldr	r3, [pc, #108]	; (28b0 <SystemInit+0xc4>)
    2842:	4e1c      	ldr	r6, [pc, #112]	; (28b4 <SystemInit+0xc8>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */

  OSCCTRL->DPLLPRESC.reg = 0;
  waitForPLL();

  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2844:	2702      	movs	r7, #2
  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2846:	62f3      	str	r3, [r6, #44]	; 0x2c
  waitForPLL();
    2848:	f7ff ffc8 	bl	27dc <waitForPLL>
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    284c:	2300      	movs	r3, #0
  OSCCTRL->DPLLPRESC.reg = 0;
    284e:	4a1a      	ldr	r2, [pc, #104]	; (28b8 <SystemInit+0xcc>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    2850:	6333      	str	r3, [r6, #48]	; 0x30
  OSCCTRL->DPLLPRESC.reg = 0;
    2852:	7013      	strb	r3, [r2, #0]
  waitForPLL();
    2854:	f7ff ffc2 	bl	27dc <waitForPLL>
  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2858:	4b18      	ldr	r3, [pc, #96]	; (28bc <SystemInit+0xd0>)
    285a:	701f      	strb	r7, [r3, #0]
  waitForPLL();
    285c:	f7ff ffbe 	bl	27dc <waitForPLL>

  while ( (OSCCTRL->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) != OSCCTRL_DPLLSTATUS_CLKRDY );
    2860:	4a17      	ldr	r2, [pc, #92]	; (28c0 <SystemInit+0xd4>)
    2862:	7813      	ldrb	r3, [r2, #0]
    2864:	423b      	tst	r3, r7
    2866:	d0fc      	beq.n	2862 <SystemInit+0x76>
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
#elif (SAML21 || SAMC21)
  MCLK->CPUDIV.reg  = MCLK_CPUDIV_CPUDIV_DIV1 ;
    2868:	2301      	movs	r3, #1
    286a:	712b      	strb	r3, [r5, #4]

#elif (SAML21 || SAMC21)
  /* Setup GCLK0 (GENERIC_CLOCK_GENERATOR_MAIN) which is used for the CPU. */
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch Generic Clock Generator 0 to 96MHz PLL output. The output is divided by two to obtain a 48MHz CPU clock. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_MAIN].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    286c:	4d15      	ldr	r5, [pc, #84]	; (28c4 <SystemInit+0xd8>)
    286e:	6225      	str	r5, [r4, #32]
    waitForSync();
    2870:	f7ff ffaa 	bl	27c8 <waitForSync>
  #endif

#elif (SAML21 || SAMC21)
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch GENERIC_CLOCK_GENERATOR_48MHz to 96MHz PLL output. The output is divided by two to obtain 48MHz. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_48MHz].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    2874:	6325      	str	r5, [r4, #48]	; 0x30
    waitForSync();
    2876:	f7ff ffa7 	bl	27c8 <waitForSync>
  waitForSync();

#elif (SAML21)
  /* Note that after reset, the L21 starts with the OSC16M set to 4MHz, NOT the DFLL@48MHz as stated in some documentation. */
  /* Modify FSEL value of OSC16M to have 8MHz */
  OSCCTRL->OSC16MCTRL.bit.FSEL = OSCCTRL_OSC16MCTRL_FSEL_8_Val;
    287a:	220c      	movs	r2, #12
    287c:	7d33      	ldrb	r3, [r6, #20]
    287e:	4393      	bics	r3, r2
    2880:	001a      	movs	r2, r3
    2882:	2304      	movs	r3, #4
    2884:	4313      	orrs	r3, r2
    2886:	7533      	strb	r3, [r6, #20]

  /* Put OSC16M as source for Generic Clock Generator 3 */
  GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_OSC_HS].reg = ( GCLK_GENCTRL_DIV(1) | GCLK_GENCTRL_SRC_OSC16M | GCLK_GENCTRL_GENEN );
    2888:	4b0f      	ldr	r3, [pc, #60]	; (28c8 <SystemInit+0xdc>)
    288a:	62e3      	str	r3, [r4, #44]	; 0x2c
  waitForSync();
    288c:	f7ff ff9c 	bl	27c8 <waitForSync>
#endif
#endif

  SystemCoreClock=VARIANT_MCK;
    2890:	4a0e      	ldr	r2, [pc, #56]	; (28cc <SystemInit+0xe0>)
    2892:	4b0f      	ldr	r3, [pc, #60]	; (28d0 <SystemInit+0xe4>)
    2894:	601a      	str	r2, [r3, #0]
}
    2896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2898:	41004000 	.word	0x41004000
    289c:	40000400 	.word	0x40000400
    28a0:	40001800 	.word	0x40001800
    28a4:	000007fd 	.word	0x000007fd
    28a8:	40001000 	.word	0x40001000
    28ac:	0000041c 	.word	0x0000041c
    28b0:	00000b71 	.word	0x00000b71
    28b4:	40000c00 	.word	0x40000c00
    28b8:	40000c34 	.word	0x40000c34
    28bc:	40000c28 	.word	0x40000c28
    28c0:	40000c3c 	.word	0x40000c3c
    28c4:	00020308 	.word	0x00020308
    28c8:	00010106 	.word	0x00010106
    28cc:	02dc6c00 	.word	0x02dc6c00
    28d0:	20000038 	.word	0x20000038

000028d4 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    28d4:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    28d6:	250f      	movs	r5, #15
    28d8:	1dcb      	adds	r3, r1, #7
    28da:	3901      	subs	r1, #1
    28dc:	0002      	movs	r2, r0
    28de:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    28e0:	0014      	movs	r4, r2
		val = (val >> 4);
    28e2:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    28e4:	3430      	adds	r4, #48	; 0x30
    28e6:	2a09      	cmp	r2, #9
    28e8:	dd01      	ble.n	28ee <_ZL5utox8mPc+0x1a>
    28ea:	3237      	adds	r2, #55	; 0x37
    28ec:	0014      	movs	r4, r2
    28ee:	701c      	strb	r4, [r3, #0]
    28f0:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    28f2:	428b      	cmp	r3, r1
    28f4:	d1f2      	bne.n	28dc <_ZL5utox8mPc+0x8>
	}
}
    28f6:	bd30      	pop	{r4, r5, pc}

000028f8 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    28f8:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    28fa:	2982      	cmp	r1, #130	; 0x82
    28fc:	d11f      	bne.n	293e <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    28fe:	b2c3      	uxtb	r3, r0
    2900:	4d2c      	ldr	r5, [pc, #176]	; (29b4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    2902:	015a      	lsls	r2, r3, #5
    2904:	18aa      	adds	r2, r5, r2
    2906:	6991      	ldr	r1, [r2, #24]
    2908:	4c2b      	ldr	r4, [pc, #172]	; (29b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    290a:	0180      	lsls	r0, r0, #6
    290c:	400c      	ands	r4, r1
    290e:	21c0      	movs	r1, #192	; 0xc0
    2910:	0589      	lsls	r1, r1, #22
    2912:	4321      	orrs	r1, r4
    2914:	6191      	str	r1, [r2, #24]
    2916:	4929      	ldr	r1, [pc, #164]	; (29bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2918:	3308      	adds	r3, #8
    291a:	1808      	adds	r0, r1, r0
    291c:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    291e:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2920:	682a      	ldr	r2, [r5, #0]
    2922:	015b      	lsls	r3, r3, #5
    2924:	18d0      	adds	r0, r2, r3
    2926:	7904      	ldrb	r4, [r0, #4]
    2928:	4249      	negs	r1, r1
    292a:	4321      	orrs	r1, r4
    292c:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    292e:	2070      	movs	r0, #112	; 0x70
    2930:	5c99      	ldrb	r1, [r3, r2]
    2932:	4381      	bics	r1, r0
    2934:	0008      	movs	r0, r1
    2936:	2130      	movs	r1, #48	; 0x30
    2938:	4301      	orrs	r1, r0
    293a:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    293c:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    293e:	2900      	cmp	r1, #0
    2940:	d1fc      	bne.n	293c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2942:	24c0      	movs	r4, #192	; 0xc0
    2944:	b2c1      	uxtb	r1, r0
    2946:	4e1b      	ldr	r6, [pc, #108]	; (29b4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    2948:	014b      	lsls	r3, r1, #5
    294a:	18f3      	adds	r3, r6, r3
    294c:	689a      	ldr	r2, [r3, #8]
    294e:	4d1a      	ldr	r5, [pc, #104]	; (29b8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    2950:	05a4      	lsls	r4, r4, #22
    2952:	402a      	ands	r2, r5
    2954:	4322      	orrs	r2, r4
    2956:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    2958:	4a19      	ldr	r2, [pc, #100]	; (29c0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    295a:	0180      	lsls	r0, r0, #6
    295c:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    295e:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2960:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2962:	6830      	ldr	r0, [r6, #0]
    2964:	2607      	movs	r6, #7
    2966:	3208      	adds	r2, #8
    2968:	0152      	lsls	r2, r2, #5
    296a:	5c11      	ldrb	r1, [r2, r0]
    296c:	43b1      	bics	r1, r6
    296e:	000e      	movs	r6, r1
    2970:	2101      	movs	r1, #1
    2972:	4331      	orrs	r1, r6
    2974:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2976:	6999      	ldr	r1, [r3, #24]
    2978:	400d      	ands	r5, r1
    297a:	432c      	orrs	r4, r5
    297c:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    297e:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2980:	490e      	ldr	r1, [pc, #56]	; (29bc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    2982:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2984:	5c11      	ldrb	r1, [r2, r0]
    2986:	43a1      	bics	r1, r4
    2988:	000c      	movs	r4, r1
    298a:	2110      	movs	r1, #16
    298c:	4321      	orrs	r1, r4
    298e:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2990:	6899      	ldr	r1, [r3, #8]
    2992:	4c0c      	ldr	r4, [pc, #48]	; (29c4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    2994:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2996:	400c      	ands	r4, r1
    2998:	2180      	movs	r1, #128	; 0x80
    299a:	0349      	lsls	r1, r1, #13
    299c:	4321      	orrs	r1, r4
    299e:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    29a0:	6899      	ldr	r1, [r3, #8]
    29a2:	0b89      	lsrs	r1, r1, #14
    29a4:	0389      	lsls	r1, r1, #14
    29a6:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    29a8:	2340      	movs	r3, #64	; 0x40
    29aa:	7951      	ldrb	r1, [r2, #5]
    29ac:	430b      	orrs	r3, r1
    29ae:	7153      	strb	r3, [r2, #5]
    29b0:	e7c4      	b.n	293c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	20000824 	.word	0x20000824
    29b8:	8fffffff 	.word	0x8fffffff
    29bc:	20000398 	.word	0x20000398
    29c0:	20000558 	.word	0x20000558
    29c4:	f0003fff 	.word	0xf0003fff

000029c8 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    29c8:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    29ca:	0004      	movs	r4, r0
    29cc:	2301      	movs	r3, #1
    29ce:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    29d0:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    29d2:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    29d4:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    29d6:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    29d8:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    29da:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    29dc:	0052      	lsls	r2, r2, #1
    29de:	f008 fef3 	bl	b7c8 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    29e2:	78ab      	ldrb	r3, [r5, #2]
    29e4:	07db      	lsls	r3, r3, #31
    29e6:	d4fc      	bmi.n	29e2 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    29e8:	626c      	str	r4, [r5, #36]	; 0x24
}
    29ea:	bd70      	pop	{r4, r5, r6, pc}

000029ec <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29ec:	221f      	movs	r2, #31
    29ee:	4b14      	ldr	r3, [pc, #80]	; (2a40 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    29f0:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29f2:	681b      	ldr	r3, [r3, #0]
    29f4:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    29f6:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    29f8:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    29fa:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    29fc:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    29fe:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
    2a00:	291f      	cmp	r1, #31
    2a02:	d100      	bne.n	2a06 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    2a04:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    2a06:	2a1f      	cmp	r2, #31
    2a08:	d100      	bne.n	2a0c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    2a0a:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    2a0c:	2b07      	cmp	r3, #7
    2a0e:	d100      	bne.n	2a12 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    2a10:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
    2a12:	251f      	movs	r5, #31
    2a14:	6800      	ldr	r0, [r0, #0]
    2a16:	018e      	lsls	r6, r1, #6
    2a18:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    2a1a:	490a      	ldr	r1, [pc, #40]	; (2a44 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    2a1c:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    2a1e:	4021      	ands	r1, r4
    2a20:	4331      	orrs	r1, r6
    2a22:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    2a24:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    2a26:	0014      	movs	r4, r2
    2a28:	000a      	movs	r2, r1
    2a2a:	43aa      	bics	r2, r5
    2a2c:	4322      	orrs	r2, r4
    2a2e:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    2a30:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    2a32:	0319      	lsls	r1, r3, #12
    2a34:	4b04      	ldr	r3, [pc, #16]	; (2a48 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    2a36:	4013      	ands	r3, r2
    2a38:	430b      	orrs	r3, r1
    2a3a:	8503      	strh	r3, [r0, #40]	; 0x28
}
    2a3c:	bd70      	pop	{r4, r5, r6, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	00806020 	.word	0x00806020
    2a44:	fffff83f 	.word	0xfffff83f
    2a48:	ffff8fff 	.word	0xffff8fff

00002a4c <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a4c:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    2a50:	6003      	str	r3, [r0, #0]
    2a52:	2301      	movs	r3, #1
    2a54:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2a56:	b672      	cpsid	i
		__disable_irq();
	}
    2a58:	4770      	bx	lr

00002a5a <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
    2a5a:	6803      	ldr	r3, [r0, #0]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d102      	bne.n	2a66 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    2a60:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    2a62:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    2a66:	4770      	bx	lr

00002a68 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    2a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    2a6a:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    2a6c:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    2a6e:	4668      	mov	r0, sp
		if (current == 0) {
    2a70:	2d00      	cmp	r5, #0
    2a72:	d114      	bne.n	2a9e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    2a74:	f7ff ffea 	bl	2a4c <_ZN7__GuardC1Ev>
    2a78:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    2a7a:	1d62      	adds	r2, r4, #5
			synchronized {
    2a7c:	3b01      	subs	r3, #1
    2a7e:	d302      	bcc.n	2a86 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    2a80:	7fd5      	ldrb	r5, [r2, #31]
    2a82:	b2ed      	uxtb	r5, r5
    2a84:	e7fa      	b.n	2a7c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    2a86:	4668      	mov	r0, sp
    2a88:	9301      	str	r3, [sp, #4]
    2a8a:	f7ff ffe6 	bl	2a5a <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    2a8e:	2d00      	cmp	r5, #0
    2a90:	d101      	bne.n	2a96 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    2a92:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    2a94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    2a96:	6a20      	ldr	r0, [r4, #32]
    2a98:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    2a9a:	1ac0      	subs	r0, r0, r3
    2a9c:	e7fa      	b.n	2a94 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    2a9e:	f7ff ffd5 	bl	2a4c <_ZN7__GuardC1Ev>
				ready = ready1;
    2aa2:	0022      	movs	r2, r4
			bool ready = false;
    2aa4:	2500      	movs	r5, #0
    2aa6:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    2aa8:	3234      	adds	r2, #52	; 0x34
			synchronized {
    2aaa:	3b01      	subs	r3, #1
    2aac:	d302      	bcc.n	2ab4 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    2aae:	7815      	ldrb	r5, [r2, #0]
    2ab0:	b2ed      	uxtb	r5, r5
			synchronized {
    2ab2:	e7fa      	b.n	2aaa <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    2ab4:	4668      	mov	r0, sp
    2ab6:	9301      	str	r3, [sp, #4]
    2ab8:	f7ff ffcf 	bl	2a5a <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    2abc:	2d00      	cmp	r5, #0
    2abe:	d0e8      	beq.n	2a92 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    2ac0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2ac2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2ac4:	e7e9      	b.n	2a9a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00002ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    2ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2aca:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    2acc:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2ace:	7a03      	ldrb	r3, [r0, #8]
    2ad0:	6831      	ldr	r1, [r6, #0]
    2ad2:	015a      	lsls	r2, r3, #5
    2ad4:	188c      	adds	r4, r1, r2
    2ad6:	34ff      	adds	r4, #255	; 0xff
    2ad8:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2ada:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2adc:	433d      	orrs	r5, r7
    2ade:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    2ae0:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2ae2:	4d09      	ldr	r5, [pc, #36]	; (2b08 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    2ae4:	6890      	ldr	r0, [r2, #8]
    2ae6:	04a4      	lsls	r4, r4, #18
    2ae8:	4028      	ands	r0, r5
    2aea:	0924      	lsrs	r4, r4, #4
    2aec:	4320      	orrs	r0, r4
    2aee:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2af0:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2af2:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2af4:	0b80      	lsrs	r0, r0, #14
    2af6:	0380      	lsls	r0, r0, #14
    2af8:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2afa:	2240      	movs	r2, #64	; 0x40
    2afc:	015b      	lsls	r3, r3, #5
    2afe:	18cb      	adds	r3, r1, r3
    2b00:	7919      	ldrb	r1, [r3, #4]
    2b02:	430a      	orrs	r2, r1
    2b04:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    2b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b08:	f0003fff 	.word	0xf0003fff

00002b0c <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    2b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    2b0e:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    2b10:	0004      	movs	r4, r0
    2b12:	000e      	movs	r6, r1
    2b14:	0017      	movs	r7, r2
			synchronized {
    2b16:	4668      	mov	r0, sp
		if (current == 0) {
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d13d      	bne.n	2b98 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    2b1c:	f7ff ff96 	bl	2a4c <_ZN7__GuardC1Ev>
    2b20:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    2b22:	1d61      	adds	r1, r4, #5
    2b24:	3b01      	subs	r3, #1
			synchronized {
    2b26:	1c5a      	adds	r2, r3, #1
    2b28:	d00c      	beq.n	2b44 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    2b2a:	7fcd      	ldrb	r5, [r1, #31]
    2b2c:	1e5a      	subs	r2, r3, #1
    2b2e:	b2ed      	uxtb	r5, r5
    2b30:	2d00      	cmp	r5, #0
    2b32:	d105      	bne.n	2b40 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    2b34:	4668      	mov	r0, sp
    2b36:	9301      	str	r3, [sp, #4]
    2b38:	f7ff ff8f 	bl	2a5a <_ZN7__GuardD1Ev>
	}
    2b3c:	0028      	movs	r0, r5
    2b3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2b40:	0013      	movs	r3, r2
    2b42:	e7f0      	b.n	2b26 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    2b44:	4668      	mov	r0, sp
    2b46:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    2b48:	2500      	movs	r5, #0
			synchronized {
    2b4a:	f7ff ff86 	bl	2a5a <_ZN7__GuardD1Ev>
    2b4e:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    2b50:	42af      	cmp	r7, r5
    2b52:	d002      	beq.n	2b5a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    2b54:	6a22      	ldr	r2, [r4, #32]
    2b56:	4293      	cmp	r3, r2
    2b58:	d357      	bcc.n	2c0a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    2b5a:	6a22      	ldr	r2, [r4, #32]
    2b5c:	4293      	cmp	r3, r2
    2b5e:	d1ed      	bne.n	2b3c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    2b60:	2300      	movs	r3, #0
    2b62:	61e3      	str	r3, [r4, #28]
				current = 1;
    2b64:	3301      	adds	r3, #1
    2b66:	6123      	str	r3, [r4, #16]
				synchronized {
    2b68:	4668      	mov	r0, sp
    2b6a:	f7ff ff6f 	bl	2a4c <_ZN7__GuardC1Ev>
					if (notify) {
    2b6e:	0022      	movs	r2, r4
					ready0 = false;
    2b70:	2100      	movs	r1, #0
    2b72:	9b01      	ldr	r3, [sp, #4]
    2b74:	1d67      	adds	r7, r4, #5
    2b76:	3b01      	subs	r3, #1
					if (notify) {
    2b78:	3235      	adds	r2, #53	; 0x35
				synchronized {
    2b7a:	1c58      	adds	r0, r3, #1
    2b7c:	d0da      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    2b7e:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    2b80:	7810      	ldrb	r0, [r2, #0]
    2b82:	1e5e      	subs	r6, r3, #1
    2b84:	2800      	cmp	r0, #0
    2b86:	d005      	beq.n	2b94 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    2b88:	7011      	strb	r1, [r2, #0]
						release();
    2b8a:	0020      	movs	r0, r4
    2b8c:	9301      	str	r3, [sp, #4]
    2b8e:	f7ff ff9b 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2b92:	e7ec      	b.n	2b6e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    2b94:	0033      	movs	r3, r6
    2b96:	e7f0      	b.n	2b7a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    2b98:	f7ff ff58 	bl	2a4c <_ZN7__GuardC1Ev>
				if (!ready1) {
    2b9c:	0021      	movs	r1, r4
    2b9e:	9b01      	ldr	r3, [sp, #4]
    2ba0:	3134      	adds	r1, #52	; 0x34
    2ba2:	3b01      	subs	r3, #1
			synchronized {
    2ba4:	1c5a      	adds	r2, r3, #1
    2ba6:	d006      	beq.n	2bb6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    2ba8:	780d      	ldrb	r5, [r1, #0]
    2baa:	1e5a      	subs	r2, r3, #1
    2bac:	b2ed      	uxtb	r5, r5
    2bae:	2d00      	cmp	r5, #0
    2bb0:	d0c0      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    2bb2:	0013      	movs	r3, r2
    2bb4:	e7f6      	b.n	2ba4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    2bb6:	4668      	mov	r0, sp
    2bb8:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    2bba:	2500      	movs	r5, #0
			synchronized {
    2bbc:	f7ff ff4d 	bl	2a5a <_ZN7__GuardD1Ev>
    2bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    2bc2:	42bd      	cmp	r5, r7
    2bc4:	d002      	beq.n	2bcc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    2bc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2bc8:	4293      	cmp	r3, r2
    2bca:	d326      	bcc.n	2c1a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    2bcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2bce:	4293      	cmp	r3, r2
    2bd0:	d1b4      	bne.n	2b3c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    2bd2:	2300      	movs	r3, #0
				synchronized {
    2bd4:	4668      	mov	r0, sp
				first1 = 0;
    2bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    2bd8:	6123      	str	r3, [r4, #16]
				synchronized {
    2bda:	f7ff ff37 	bl	2a4c <_ZN7__GuardC1Ev>
					ready1 = false;
    2bde:	0027      	movs	r7, r4
					if (notify) {
    2be0:	0022      	movs	r2, r4
					ready1 = false;
    2be2:	2100      	movs	r1, #0
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	3734      	adds	r7, #52	; 0x34
    2be8:	3b01      	subs	r3, #1
					if (notify) {
    2bea:	3235      	adds	r2, #53	; 0x35
				synchronized {
    2bec:	1c58      	adds	r0, r3, #1
    2bee:	d0a1      	beq.n	2b34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    2bf0:	7039      	strb	r1, [r7, #0]
					if (notify) {
    2bf2:	7810      	ldrb	r0, [r2, #0]
    2bf4:	1e5e      	subs	r6, r3, #1
    2bf6:	2800      	cmp	r0, #0
    2bf8:	d005      	beq.n	2c06 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    2bfa:	7011      	strb	r1, [r2, #0]
						release();
    2bfc:	0020      	movs	r0, r4
    2bfe:	9301      	str	r3, [sp, #4]
    2c00:	f7ff ff62 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2c04:	e7eb      	b.n	2bde <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    2c06:	0033      	movs	r3, r6
    2c08:	e7f0      	b.n	2bec <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    2c0a:	1c5a      	adds	r2, r3, #1
    2c0c:	61e2      	str	r2, [r4, #28]
    2c0e:	69a2      	ldr	r2, [r4, #24]
    2c10:	18d3      	adds	r3, r2, r3
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    2c16:	3501      	adds	r5, #1
    2c18:	e799      	b.n	2b4e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    2c1a:	1c5a      	adds	r2, r3, #1
    2c1c:	62e2      	str	r2, [r4, #44]	; 0x2c
    2c1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2c20:	18d3      	adds	r3, r2, r3
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    2c26:	3501      	adds	r5, #1
    2c28:	e7ca      	b.n	2bc0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00002c2a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    2c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c2c:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    2c2e:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c30:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    2c32:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2c34:	3108      	adds	r1, #8
    2c36:	6818      	ldr	r0, [r3, #0]
    2c38:	0149      	lsls	r1, r1, #5
    2c3a:	1841      	adds	r1, r0, r1
    2c3c:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    2c3e:	07c0      	lsls	r0, r0, #31
    2c40:	d527      	bpl.n	2c92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    2c42:	2501      	movs	r5, #1
    2c44:	0152      	lsls	r2, r2, #5
    2c46:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2c48:	189b      	adds	r3, r3, r2
    2c4a:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    2c4c:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2c4e:	0492      	lsls	r2, r2, #18
    2c50:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    2c52:	2900      	cmp	r1, #0
    2c54:	d121      	bne.n	2c9a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    2c56:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    2c58:	6a22      	ldr	r2, [r4, #32]
    2c5a:	2a00      	cmp	r2, #0
    2c5c:	d03e      	beq.n	2cdc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2c5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    2c60:	6165      	str	r5, [r4, #20]
					synchronized {
    2c62:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2c64:	605a      	str	r2, [r3, #4]
					synchronized {
    2c66:	f7ff fef1 	bl	2a4c <_ZN7__GuardC1Ev>
						if (ready1) {
    2c6a:	0027      	movs	r7, r4
    2c6c:	0021      	movs	r1, r4
    2c6e:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    2c70:	1d66      	adds	r6, r4, #5
    2c72:	3b01      	subs	r3, #1
						if (ready1) {
    2c74:	3734      	adds	r7, #52	; 0x34
    2c76:	3135      	adds	r1, #53	; 0x35
					synchronized {
    2c78:	1c5a      	adds	r2, r3, #1
    2c7a:	d02b      	beq.n	2cd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    2c7c:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    2c7e:	783a      	ldrb	r2, [r7, #0]
    2c80:	1e58      	subs	r0, r3, #1
    2c82:	b2d2      	uxtb	r2, r2
    2c84:	2a00      	cmp	r2, #0
    2c86:	d005      	beq.n	2c94 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    2c88:	9301      	str	r3, [sp, #4]
							return;
    2c8a:	4668      	mov	r0, sp
							notify = true;
    2c8c:	700d      	strb	r5, [r1, #0]
							return;
    2c8e:	f7ff fee4 	bl	2a5a <_ZN7__GuardD1Ev>
	}
    2c92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    2c94:	700a      	strb	r2, [r1, #0]
					synchronized {
    2c96:	0003      	movs	r3, r0
    2c98:	e7ee      	b.n	2c78 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    2c9a:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    2c9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2c9e:	2a00      	cmp	r2, #0
    2ca0:	d01c      	beq.n	2cdc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    2ca2:	2200      	movs	r2, #0
    2ca4:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2ca6:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    2ca8:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2caa:	605a      	str	r2, [r3, #4]
					synchronized {
    2cac:	f7ff fece 	bl	2a4c <_ZN7__GuardC1Ev>
						ready1 = true;
    2cb0:	0026      	movs	r6, r4
    2cb2:	0021      	movs	r1, r4
    2cb4:	9b01      	ldr	r3, [sp, #4]
    2cb6:	3634      	adds	r6, #52	; 0x34
    2cb8:	3b01      	subs	r3, #1
						if (ready0) {
    2cba:	1d67      	adds	r7, r4, #5
    2cbc:	3135      	adds	r1, #53	; 0x35
					synchronized {
    2cbe:	1c5a      	adds	r2, r3, #1
    2cc0:	d008      	beq.n	2cd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    2cc2:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    2cc4:	7ffa      	ldrb	r2, [r7, #31]
    2cc6:	1e58      	subs	r0, r3, #1
    2cc8:	b2d2      	uxtb	r2, r2
    2cca:	2a00      	cmp	r2, #0
    2ccc:	d1dc      	bne.n	2c88 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    2cce:	700a      	strb	r2, [r1, #0]
					synchronized {
    2cd0:	0003      	movs	r3, r0
    2cd2:	e7f4      	b.n	2cbe <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    2cd4:	4668      	mov	r0, sp
    2cd6:	9301      	str	r3, [sp, #4]
    2cd8:	f7ff febf 	bl	2a5a <_ZN7__GuardD1Ev>
			release();
    2cdc:	0020      	movs	r0, r4
    2cde:	f7ff fef3 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2ce2:	e7d6      	b.n	2c92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00002ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    2ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    2ce6:	466b      	mov	r3, sp
    2ce8:	1ddc      	adds	r4, r3, #7
    2cea:	2300      	movs	r3, #0
{
    2cec:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    2cee:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    2cf0:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    2cf2:	f002 fa41 	bl	5178 <_Z16CDC_GetInterfacePh>
    2cf6:	682b      	ldr	r3, [r5, #0]
    2cf8:	1818      	adds	r0, r3, r0
    2cfa:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    2cfc:	f002 faf6 	bl	52ec <_Z12PluggableUSBv>
    2d00:	0021      	movs	r1, r4
    2d02:	f002 faaf 	bl	5264 <_ZN13PluggableUSB_12getInterfaceEPh>
    2d06:	682b      	ldr	r3, [r5, #0]
    2d08:	1818      	adds	r0, r3, r0
    2d0a:	6028      	str	r0, [r5, #0]
	return interfaces;
    2d0c:	7820      	ldrb	r0, [r4, #0]
}
    2d0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002d10 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    2d10:	2903      	cmp	r1, #3
    2d12:	d10e      	bne.n	2d32 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2d14:	2280      	movs	r2, #128	; 0x80
    2d16:	4b0e      	ldr	r3, [pc, #56]	; (2d50 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    2d18:	3162      	adds	r1, #98	; 0x62
    2d1a:	681b      	ldr	r3, [r3, #0]
    2d1c:	31ff      	adds	r1, #255	; 0xff
    2d1e:	5c58      	ldrb	r0, [r3, r1]
    2d20:	4252      	negs	r2, r2
    2d22:	4302      	orrs	r2, r0
    2d24:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2d26:	2268      	movs	r2, #104	; 0x68
    2d28:	3963      	subs	r1, #99	; 0x63
    2d2a:	39ff      	subs	r1, #255	; 0xff
    2d2c:	32ff      	adds	r2, #255	; 0xff
    2d2e:	5499      	strb	r1, [r3, r2]
}
    2d30:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    2d32:	2901      	cmp	r1, #1
    2d34:	d1fc      	bne.n	2d30 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    2d36:	2280      	movs	r2, #128	; 0x80
    2d38:	4b05      	ldr	r3, [pc, #20]	; (2d50 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    2d3a:	3124      	adds	r1, #36	; 0x24
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	31ff      	adds	r1, #255	; 0xff
    2d40:	5c58      	ldrb	r0, [r3, r1]
    2d42:	4252      	negs	r2, r2
    2d44:	4302      	orrs	r2, r0
    2d46:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2d48:	3923      	subs	r1, #35	; 0x23
    2d4a:	39ff      	subs	r1, #255	; 0xff
    2d4c:	2228      	movs	r2, #40	; 0x28
    2d4e:	e7ed      	b.n	2d2c <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    2d50:	20000824 	.word	0x20000824

00002d54 <_ZN14USBDeviceClass4initEv>:
{
    2d54:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
    2d56:	2400      	movs	r4, #0
    2d58:	4b26      	ldr	r3, [pc, #152]	; (2df4 <_ZN14USBDeviceClass4initEv+0xa0>)
	pinMode(PIN_LED_TXL, OUTPUT);
    2d5a:	2101      	movs	r1, #1
{
    2d5c:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    2d5e:	2015      	movs	r0, #21
	txLEDPulse = 0;
    2d60:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    2d62:	f000 feb1 	bl	3ac8 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    2d66:	2101      	movs	r1, #1
    2d68:	2015      	movs	r0, #21
    2d6a:	f000 feb1 	bl	3ad0 <digitalWrite>
	rxLEDPulse = 0;
    2d6e:	4b22      	ldr	r3, [pc, #136]	; (2df8 <_ZN14USBDeviceClass4initEv+0xa4>)
	pinMode(PIN_LED_RXL, OUTPUT);
    2d70:	2101      	movs	r1, #1
    2d72:	2014      	movs	r0, #20
	rxLEDPulse = 0;
    2d74:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    2d76:	f000 fea7 	bl	3ac8 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    2d7a:	2101      	movs	r1, #1
    2d7c:	2014      	movs	r0, #20
    2d7e:	f000 fea7 	bl	3ad0 <digitalWrite>
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d82:	2301      	movs	r3, #1
    2d84:	4a1d      	ldr	r2, [pc, #116]	; (2dfc <_ZN14USBDeviceClass4initEv+0xa8>)
        pinPeripheral( PIN_USB_DM, PIO_COM );
    2d86:	2018      	movs	r0, #24
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d88:	6991      	ldr	r1, [r2, #24]
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    2d8a:	3440      	adds	r4, #64	; 0x40
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2d8c:	430b      	orrs	r3, r1
    2d8e:	6193      	str	r3, [r2, #24]
        pinPeripheral( PIN_USB_DM, PIO_COM );
    2d90:	210f      	movs	r1, #15
    2d92:	f000 ff07 	bl	3ba4 <pinPeripheral>
        pinPeripheral( PIN_USB_DP, PIO_COM );
    2d96:	210f      	movs	r1, #15
    2d98:	2019      	movs	r0, #25
    2d9a:	f000 ff03 	bl	3ba4 <pinPeripheral>
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    2d9e:	4b18      	ldr	r3, [pc, #96]	; (2e00 <_ZN14USBDeviceClass4initEv+0xac>)
    2da0:	601c      	str	r4, [r3, #0]
        while ( (GCLK->PCHCTRL[GCM_USB].reg & GCLK_PCHCTRL_CHEN) == 0 );        // wait for sync
    2da2:	681a      	ldr	r2, [r3, #0]
    2da4:	4222      	tst	r2, r4
    2da6:	d0fc      	beq.n	2da2 <_ZN14USBDeviceClass4initEv+0x4e>
        USB_SetHandler(&UDD_Handler);
    2da8:	4816      	ldr	r0, [pc, #88]	; (2e04 <_ZN14USBDeviceClass4initEv+0xb0>)
    2daa:	f7ff fc55 	bl	2658 <USB_SetHandler>
	usbd.reset();
    2dae:	4e16      	ldr	r6, [pc, #88]	; (2e08 <_ZN14USBDeviceClass4initEv+0xb4>)
    2db0:	0030      	movs	r0, r6
    2db2:	f7ff fe09 	bl	29c8 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    2db6:	0030      	movs	r0, r6
    2db8:	f7ff fe18 	bl	29ec <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    2dbc:	217f      	movs	r1, #127	; 0x7f
    2dbe:	6833      	ldr	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2dc0:	20c1      	movs	r0, #193	; 0xc1
    2dc2:	781a      	ldrb	r2, [r3, #0]
    2dc4:	0080      	lsls	r0, r0, #2
    2dc6:	400a      	ands	r2, r1
    2dc8:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2dca:	2204      	movs	r2, #4
    2dcc:	7819      	ldrb	r1, [r3, #0]
    2dce:	4e0f      	ldr	r6, [pc, #60]	; (2e0c <_ZN14USBDeviceClass4initEv+0xb8>)
    2dd0:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2dd2:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2dd4:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2dd6:	891a      	ldrh	r2, [r3, #8]
    2dd8:	438a      	bics	r2, r1
    2dda:	811a      	strh	r2, [r3, #8]
    2ddc:	4a0c      	ldr	r2, [pc, #48]	; (2e10 <_ZN14USBDeviceClass4initEv+0xbc>)
    2dde:	5811      	ldr	r1, [r2, r0]
    2de0:	4031      	ands	r1, r6
    2de2:	5011      	str	r1, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2de4:	6014      	str	r4, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    2de6:	2202      	movs	r2, #2
    2de8:	7819      	ldrb	r1, [r3, #0]
    2dea:	430a      	orrs	r2, r1
    2dec:	701a      	strb	r2, [r3, #0]
	initialized = true;
    2dee:	2301      	movs	r3, #1
    2df0:	702b      	strb	r3, [r5, #0]
}
    2df2:	bd70      	pop	{r4, r5, r6, pc}
    2df4:	2000038d 	.word	0x2000038d
    2df8:	2000038c 	.word	0x2000038c
    2dfc:	40000400 	.word	0x40000400
    2e00:	40001890 	.word	0x40001890
    2e04:	000037e5 	.word	0x000037e5
    2e08:	20000824 	.word	0x20000824
    2e0c:	ff00ffff 	.word	0xff00ffff
    2e10:	e000e100 	.word	0xe000e100

00002e14 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    2e14:	7800      	ldrb	r0, [r0, #0]
    2e16:	2800      	cmp	r0, #0
    2e18:	d010      	beq.n	2e3c <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    2e1a:	2101      	movs	r1, #1
    2e1c:	4b08      	ldr	r3, [pc, #32]	; (2e40 <_ZN14USBDeviceClass6attachEv+0x2c>)
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	891a      	ldrh	r2, [r3, #8]
    2e22:	438a      	bics	r2, r1
    2e24:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    2e26:	2208      	movs	r2, #8
    2e28:	8b19      	ldrh	r1, [r3, #24]
    2e2a:	430a      	orrs	r2, r1
    2e2c:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    2e2e:	2204      	movs	r2, #4
    2e30:	8b19      	ldrh	r1, [r3, #24]
    2e32:	430a      	orrs	r2, r1
    2e34:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    2e36:	2200      	movs	r2, #0
    2e38:	4b02      	ldr	r3, [pc, #8]	; (2e44 <_ZN14USBDeviceClass6attachEv+0x30>)
    2e3a:	601a      	str	r2, [r3, #0]
}
    2e3c:	4770      	bx	lr
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	20000824 	.word	0x20000824
    2e44:	2000081c 	.word	0x2000081c

00002e48 <_ZN14USBDeviceClass10setAddressEm>:
{
    2e48:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2e4a:	4a10      	ldr	r2, [pc, #64]	; (2e8c <_ZN14USBDeviceClass10setAddressEm+0x44>)
    2e4c:	6993      	ldr	r3, [r2, #24]
    2e4e:	0b9b      	lsrs	r3, r3, #14
    2e50:	039b      	lsls	r3, r3, #14
    2e52:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2e54:	6813      	ldr	r3, [r2, #0]
    2e56:	2202      	movs	r2, #2
    2e58:	33ff      	adds	r3, #255	; 0xff
    2e5a:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2e5c:	7998      	ldrb	r0, [r3, #6]
    2e5e:	3a82      	subs	r2, #130	; 0x82
    2e60:	4302      	orrs	r2, r0
    2e62:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    2e64:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    2e66:	0792      	lsls	r2, r2, #30
    2e68:	d5fc      	bpl.n	2e64 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2e6a:	2282      	movs	r2, #130	; 0x82
    2e6c:	247f      	movs	r4, #127	; 0x7f
    2e6e:	05d2      	lsls	r2, r2, #23
    2e70:	7a93      	ldrb	r3, [r2, #10]
    2e72:	4021      	ands	r1, r4
    2e74:	43a3      	bics	r3, r4
    2e76:	0008      	movs	r0, r1
    2e78:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2e7a:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2e7c:	4301      	orrs	r1, r0
    2e7e:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2e80:	7a91      	ldrb	r1, [r2, #10]
    2e82:	425b      	negs	r3, r3
    2e84:	430b      	orrs	r3, r1
    2e86:	7293      	strb	r3, [r2, #10]
}
    2e88:	bd10      	pop	{r4, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	20000824 	.word	0x20000824

00002e90 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    2e90:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    2e92:	790b      	ldrb	r3, [r1, #4]
{
    2e94:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    2e96:	2b00      	cmp	r3, #0
    2e98:	d10c      	bne.n	2eb4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    2e9a:	0008      	movs	r0, r1
    2e9c:	f002 f97a 	bl	5194 <_Z9CDC_SetupR8USBSetup>
    2ea0:	2800      	cmp	r0, #0
    2ea2:	d001      	beq.n	2ea8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    2ea4:	2001      	movs	r0, #1
}
    2ea6:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2ea8:	4a09      	ldr	r2, [pc, #36]	; (2ed0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    2eaa:	6993      	ldr	r3, [r2, #24]
    2eac:	0b9b      	lsrs	r3, r3, #14
    2eae:	039b      	lsls	r3, r3, #14
    2eb0:	6193      	str	r3, [r2, #24]
    2eb2:	e7f7      	b.n	2ea4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    2eb4:	f002 fa1a 	bl	52ec <_Z12PluggableUSBv>
    2eb8:	0021      	movs	r1, r4
    2eba:	f002 fa06 	bl	52ca <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    2ebe:	2800      	cmp	r0, #0
    2ec0:	d1f0      	bne.n	2ea4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    2ec2:	4a03      	ldr	r2, [pc, #12]	; (2ed0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    2ec4:	6993      	ldr	r3, [r2, #24]
    2ec6:	0b9b      	lsrs	r3, r3, #14
    2ec8:	039b      	lsls	r3, r3, #14
    2eca:	6193      	str	r3, [r2, #24]
    2ecc:	e7eb      	b.n	2ea6 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	20000824 	.word	0x20000824

00002ed4 <_ZN14USBDeviceClass6initEPEmm>:
{
    2ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ed6:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    2ed8:	2a83      	cmp	r2, #131	; 0x83
    2eda:	d119      	bne.n	2f10 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2edc:	b2cb      	uxtb	r3, r1
    2ede:	4c32      	ldr	r4, [pc, #200]	; (2fa8 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    2ee0:	015a      	lsls	r2, r3, #5
    2ee2:	18a2      	adds	r2, r4, r2
    2ee4:	6991      	ldr	r1, [r2, #24]
    2ee6:	4831      	ldr	r0, [pc, #196]	; (2fac <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    2ee8:	01ad      	lsls	r5, r5, #6
    2eea:	4008      	ands	r0, r1
    2eec:	21c0      	movs	r1, #192	; 0xc0
    2eee:	0589      	lsls	r1, r1, #22
    2ef0:	4301      	orrs	r1, r0
    2ef2:	6191      	str	r1, [r2, #24]
    2ef4:	492e      	ldr	r1, [pc, #184]	; (2fb0 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2ef6:	6820      	ldr	r0, [r4, #0]
    2ef8:	194d      	adds	r5, r1, r5
    2efa:	2170      	movs	r1, #112	; 0x70
    2efc:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2efe:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2f00:	015b      	lsls	r3, r3, #5
    2f02:	5c1a      	ldrb	r2, [r3, r0]
    2f04:	438a      	bics	r2, r1
    2f06:	0011      	movs	r1, r2
    2f08:	2240      	movs	r2, #64	; 0x40
    2f0a:	430a      	orrs	r2, r1
    2f0c:	541a      	strb	r2, [r3, r0]
}
    2f0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    2f10:	2a02      	cmp	r2, #2
    2f12:	d144      	bne.n	2f9e <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
    2f14:	008b      	lsls	r3, r1, #2
    2f16:	9301      	str	r3, [sp, #4]
    2f18:	4b26      	ldr	r3, [pc, #152]	; (2fb4 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    2f1a:	008a      	lsls	r2, r1, #2
    2f1c:	58d6      	ldr	r6, [r2, r3]
    2f1e:	2e00      	cmp	r6, #0
    2f20:	d1f5      	bne.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    2f22:	2038      	movs	r0, #56	; 0x38
    2f24:	f001 fda0 	bl	4a68 <_Znwj>
		notify(false)
    2f28:	4b23      	ldr	r3, [pc, #140]	; (2fb8 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    2f2a:	4f1f      	ldr	r7, [pc, #124]	; (2fa8 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    2f2c:	6003      	str	r3, [r0, #0]
    2f2e:	2380      	movs	r3, #128	; 0x80
    2f30:	005b      	lsls	r3, r3, #1
    2f32:	60c3      	str	r3, [r0, #12]
    2f34:	1d43      	adds	r3, r0, #5
    2f36:	6206      	str	r6, [r0, #32]
    2f38:	6085      	str	r5, [r0, #8]
    2f3a:	6106      	str	r6, [r0, #16]
    2f3c:	6146      	str	r6, [r0, #20]
    2f3e:	61c6      	str	r6, [r0, #28]
    2f40:	0004      	movs	r4, r0
    2f42:	6047      	str	r7, [r0, #4]
    2f44:	77de      	strb	r6, [r3, #31]
    2f46:	62c6      	str	r6, [r0, #44]	; 0x2c
    2f48:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f4a:	2080      	movs	r0, #128	; 0x80
		notify(false)
    2f4c:	332f      	adds	r3, #47	; 0x2f
    2f4e:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f50:	0040      	lsls	r0, r0, #1
		notify(false)
    2f52:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    2f54:	f008 fbe8 	bl	b728 <malloc>
    2f58:	0006      	movs	r6, r0
    2f5a:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    2f5c:	2080      	movs	r0, #128	; 0x80
    2f5e:	0040      	lsls	r0, r0, #1
    2f60:	f008 fbe2 	bl	b728 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f64:	b2ed      	uxtb	r5, r5
    2f66:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    2f68:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	689a      	ldr	r2, [r3, #8]
    2f6e:	490f      	ldr	r1, [pc, #60]	; (2fac <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2f70:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2f72:	4011      	ands	r1, r2
    2f74:	22c0      	movs	r2, #192	; 0xc0
    2f76:	0592      	lsls	r2, r2, #22
    2f78:	430a      	orrs	r2, r1
    2f7a:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2f7c:	683a      	ldr	r2, [r7, #0]
    2f7e:	3508      	adds	r5, #8
    2f80:	016d      	lsls	r5, r5, #5
    2f82:	5ca9      	ldrb	r1, [r5, r2]
    2f84:	4381      	bics	r1, r0
    2f86:	0008      	movs	r0, r1
    2f88:	2103      	movs	r1, #3
    2f8a:	4301      	orrs	r1, r0
    2f8c:	54a9      	strb	r1, [r5, r2]
		release();
    2f8e:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2f90:	605e      	str	r6, [r3, #4]
		release();
    2f92:	f7ff fd99 	bl	2ac8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2f96:	4b07      	ldr	r3, [pc, #28]	; (2fb4 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    2f98:	9a01      	ldr	r2, [sp, #4]
    2f9a:	50d4      	str	r4, [r2, r3]
    2f9c:	e7b7      	b.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
    2f9e:	0011      	movs	r1, r2
    2fa0:	0028      	movs	r0, r5
    2fa2:	f7ff fca9 	bl	28f8 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    2fa6:	e7b2      	b.n	2f0e <_ZN14USBDeviceClass6initEPEmm+0x3a>
    2fa8:	20000824 	.word	0x20000824
    2fac:	8fffffff 	.word	0x8fffffff
    2fb0:	20000398 	.word	0x20000398
    2fb4:	20000370 	.word	0x20000370
    2fb8:	0000f9ac 	.word	0x0000f9ac

00002fbc <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    2fbc:	b570      	push	{r4, r5, r6, lr}
    2fbe:	0005      	movs	r5, r0
    2fc0:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    2fc2:	4b06      	ldr	r3, [pc, #24]	; (2fdc <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    2fc4:	00a2      	lsls	r2, r4, #2
    2fc6:	58d2      	ldr	r2, [r2, r3]
    2fc8:	2a00      	cmp	r2, #0
    2fca:	d005      	beq.n	2fd8 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    2fcc:	0021      	movs	r1, r4
    2fce:	0028      	movs	r0, r5
    2fd0:	f7ff ff80 	bl	2ed4 <_ZN14USBDeviceClass6initEPEmm>
    2fd4:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    2fd6:	e7f4      	b.n	2fc2 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    2fd8:	bd70      	pop	{r4, r5, r6, pc}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	20000010 	.word	0x20000010

00002fe0 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    2fe0:	4b08      	ldr	r3, [pc, #32]	; (3004 <_ZN14USBDeviceClass9availableEm+0x24>)
    2fe2:	008a      	lsls	r2, r1, #2
    2fe4:	58d0      	ldr	r0, [r2, r3]
{
    2fe6:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    2fe8:	2800      	cmp	r0, #0
    2fea:	d003      	beq.n	2ff4 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    2fec:	6803      	ldr	r3, [r0, #0]
    2fee:	689b      	ldr	r3, [r3, #8]
    2ff0:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    2ff2:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2ff4:	b2c9      	uxtb	r1, r1
    2ff6:	4b04      	ldr	r3, [pc, #16]	; (3008 <_ZN14USBDeviceClass9availableEm+0x28>)
    2ff8:	0149      	lsls	r1, r1, #5
    2ffa:	1859      	adds	r1, r3, r1
    2ffc:	6888      	ldr	r0, [r1, #8]
    2ffe:	0480      	lsls	r0, r0, #18
    3000:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    3002:	e7f6      	b.n	2ff2 <_ZN14USBDeviceClass9availableEm+0x12>
    3004:	20000370 	.word	0x20000370
    3008:	20000824 	.word	0x20000824

0000300c <_ZN14USBDeviceClass5flushEm>:
{
    300c:	b510      	push	{r4, lr}
    300e:	000c      	movs	r4, r1
	if (available(ep)) {
    3010:	f7ff ffe6 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3014:	2800      	cmp	r0, #0
    3016:	d00c      	beq.n	3032 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3018:	4b06      	ldr	r3, [pc, #24]	; (3034 <_ZN14USBDeviceClass5flushEm+0x28>)
    301a:	b2e4      	uxtb	r4, r4
    301c:	681b      	ldr	r3, [r3, #0]
    301e:	3408      	adds	r4, #8
    3020:	0164      	lsls	r4, r4, #5
    3022:	191c      	adds	r4, r3, r4
    3024:	2380      	movs	r3, #128	; 0x80
    3026:	7962      	ldrb	r2, [r4, #5]
    3028:	425b      	negs	r3, r3
    302a:	4313      	orrs	r3, r2
    302c:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    302e:	2302      	movs	r3, #2
    3030:	71e3      	strb	r3, [r4, #7]
}
    3032:	bd10      	pop	{r4, pc}
    3034:	20000824 	.word	0x20000824

00003038 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    3038:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    303a:	4b13      	ldr	r3, [pc, #76]	; (3088 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    303c:	b2cc      	uxtb	r4, r1
    303e:	4a13      	ldr	r2, [pc, #76]	; (308c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    3040:	0160      	lsls	r0, r4, #5
    3042:	0189      	lsls	r1, r1, #6
    3044:	1859      	adds	r1, r3, r1
    3046:	1813      	adds	r3, r2, r0
    3048:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    304a:	6899      	ldr	r1, [r3, #8]
    304c:	4d10      	ldr	r5, [pc, #64]	; (3090 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    304e:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3050:	400d      	ands	r5, r1
    3052:	2180      	movs	r1, #128	; 0x80
    3054:	0289      	lsls	r1, r1, #10
    3056:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3058:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    305a:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    305c:	6899      	ldr	r1, [r3, #8]
    305e:	0b89      	lsrs	r1, r1, #14
    3060:	0389      	lsls	r1, r1, #14
    3062:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3064:	6811      	ldr	r1, [r2, #0]
    3066:	0163      	lsls	r3, r4, #5
    3068:	18cb      	adds	r3, r1, r3
    306a:	791e      	ldrb	r6, [r3, #4]
    306c:	4335      	orrs	r5, r6
    306e:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    3070:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    3072:	066d      	lsls	r5, r5, #25
    3074:	d5fc      	bpl.n	3070 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    3076:	0164      	lsls	r4, r4, #5
    3078:	1909      	adds	r1, r1, r4
    307a:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    307c:	07db      	lsls	r3, r3, #31
    307e:	d5fc      	bpl.n	307a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3080:	1812      	adds	r2, r2, r0
    3082:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    3084:	b2c0      	uxtb	r0, r0
}
    3086:	bd70      	pop	{r4, r5, r6, pc}
    3088:	20000558 	.word	0x20000558
    308c:	20000824 	.word	0x20000824
    3090:	f0003fff 	.word	0xf0003fff

00003094 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    3094:	b570      	push	{r4, r5, r6, lr}
    3096:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3098:	2240      	movs	r2, #64	; 0x40
    309a:	4b0b      	ldr	r3, [pc, #44]	; (30c8 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    309c:	000d      	movs	r5, r1
    309e:	681b      	ldr	r3, [r3, #0]
    30a0:	33ff      	adds	r3, #255	; 0xff
    30a2:	7959      	ldrb	r1, [r3, #5]
    30a4:	430a      	orrs	r2, r1
    30a6:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    30a8:	2100      	movs	r1, #0
    30aa:	f7ff ffc5 	bl	3038 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    30ae:	42a0      	cmp	r0, r4
    30b0:	d900      	bls.n	30b4 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    30b2:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    30b4:	2300      	movs	r3, #0
		data[i] = buffer[i];
    30b6:	4905      	ldr	r1, [pc, #20]	; (30cc <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    30b8:	42a3      	cmp	r3, r4
    30ba:	d003      	beq.n	30c4 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    30bc:	5c5a      	ldrb	r2, [r3, r1]
    30be:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    30c0:	3301      	adds	r3, #1
    30c2:	e7f9      	b.n	30b8 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    30c4:	bd70      	pop	{r4, r5, r6, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	20000824 	.word	0x20000824
    30cc:	20000558 	.word	0x20000558

000030d0 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    30d0:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    30d2:	b2c9      	uxtb	r1, r1
    30d4:	480b      	ldr	r0, [pc, #44]	; (3104 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    30d6:	0149      	lsls	r1, r1, #5
    30d8:	1842      	adds	r2, r0, r1
    30da:	6893      	ldr	r3, [r2, #8]
    30dc:	049b      	lsls	r3, r3, #18
    30de:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    30e0:	2b3f      	cmp	r3, #63	; 0x3f
    30e2:	dd0b      	ble.n	30fc <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    30e4:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    30e6:	3b40      	subs	r3, #64	; 0x40
    30e8:	049b      	lsls	r3, r3, #18
    30ea:	0ba4      	lsrs	r4, r4, #14
    30ec:	0c9b      	lsrs	r3, r3, #18
    30ee:	03a4      	lsls	r4, r4, #14
    30f0:	4323      	orrs	r3, r4
    30f2:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    30f4:	1841      	adds	r1, r0, r1
    30f6:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    30f8:	b2c0      	uxtb	r0, r0
}
    30fa:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    30fc:	6893      	ldr	r3, [r2, #8]
    30fe:	0b9b      	lsrs	r3, r3, #14
    3100:	039b      	lsls	r3, r3, #14
    3102:	e7f6      	b.n	30f2 <_ZN14USBDeviceClass7armRecvEm+0x22>
    3104:	20000824 	.word	0x20000824

00003108 <_ZN14USBDeviceClass4recvEmPvm>:
{
    3108:	b5f0      	push	{r4, r5, r6, r7, lr}
    310a:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    310c:	4b30      	ldr	r3, [pc, #192]	; (31d0 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    310e:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    3110:	681b      	ldr	r3, [r3, #0]
{
    3112:	0006      	movs	r6, r0
    3114:	000d      	movs	r5, r1
    3116:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    3118:	2b00      	cmp	r3, #0
    311a:	d055      	beq.n	31c8 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
    311c:	4f2d      	ldr	r7, [pc, #180]	; (31d4 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    311e:	7839      	ldrb	r1, [r7, #0]
    3120:	b2c9      	uxtb	r1, r1
    3122:	2900      	cmp	r1, #0
    3124:	d102      	bne.n	312c <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    3126:	2014      	movs	r0, #20
    3128:	f000 fcd2 	bl	3ad0 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
    312c:	2364      	movs	r3, #100	; 0x64
    312e:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
    3130:	4b29      	ldr	r3, [pc, #164]	; (31d8 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    3132:	00aa      	lsls	r2, r5, #2
    3134:	58d0      	ldr	r0, [r2, r3]
    3136:	2800      	cmp	r0, #0
    3138:	d008      	beq.n	314c <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    313a:	6803      	ldr	r3, [r0, #0]
    313c:	0022      	movs	r2, r4
    313e:	685b      	ldr	r3, [r3, #4]
    3140:	9901      	ldr	r1, [sp, #4]
    3142:	4798      	blx	r3
    3144:	0004      	movs	r4, r0
}
    3146:	0020      	movs	r0, r4
    3148:	b005      	add	sp, #20
    314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    314c:	0029      	movs	r1, r5
    314e:	0030      	movs	r0, r6
    3150:	f7ff ff46 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3154:	4284      	cmp	r4, r0
    3156:	d904      	bls.n	3162 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    3158:	0029      	movs	r1, r5
    315a:	0030      	movs	r0, r6
    315c:	f7ff ff40 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    3160:	0004      	movs	r4, r0
	armRecv(ep);
    3162:	0029      	movs	r1, r5
    3164:	0030      	movs	r0, r6
    3166:	f7ff ffb3 	bl	30d0 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    316a:	2101      	movs	r1, #1
    316c:	b2eb      	uxtb	r3, r5
    316e:	4f1b      	ldr	r7, [pc, #108]	; (31dc <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    3170:	9303      	str	r3, [sp, #12]
    3172:	015b      	lsls	r3, r3, #5
    3174:	9302      	str	r3, [sp, #8]
    3176:	9a02      	ldr	r2, [sp, #8]
    3178:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    317a:	9801      	ldr	r0, [sp, #4]
    317c:	189b      	adds	r3, r3, r2
    317e:	33ff      	adds	r3, #255	; 0xff
    3180:	7a5a      	ldrb	r2, [r3, #9]
    3182:	430a      	orrs	r2, r1
    3184:	4916      	ldr	r1, [pc, #88]	; (31e0 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    3186:	725a      	strb	r2, [r3, #9]
    3188:	01ab      	lsls	r3, r5, #6
    318a:	18c9      	adds	r1, r1, r3
    318c:	0022      	movs	r2, r4
    318e:	f008 fb00 	bl	b792 <memcpy>
	if (len && !available(ep)) {
    3192:	2c00      	cmp	r4, #0
    3194:	d0d7      	beq.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    3196:	0029      	movs	r1, r5
    3198:	0030      	movs	r0, r6
    319a:	f7ff ff21 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
    319e:	2800      	cmp	r0, #0
    31a0:	d1d1      	bne.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    31a2:	2140      	movs	r1, #64	; 0x40
    31a4:	9b03      	ldr	r3, [sp, #12]
    31a6:	683a      	ldr	r2, [r7, #0]
    31a8:	3308      	adds	r3, #8
    31aa:	015b      	lsls	r3, r3, #5
    31ac:	18d3      	adds	r3, r2, r3
    31ae:	7918      	ldrb	r0, [r3, #4]
    31b0:	4301      	orrs	r1, r0
    31b2:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    31b4:	2101      	movs	r1, #1
    31b6:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    31b8:	2101      	movs	r1, #1
    31ba:	9b02      	ldr	r3, [sp, #8]
    31bc:	18d3      	adds	r3, r2, r3
    31be:	33ff      	adds	r3, #255	; 0xff
    31c0:	7a9a      	ldrb	r2, [r3, #10]
    31c2:	430a      	orrs	r2, r1
    31c4:	729a      	strb	r2, [r3, #10]
    31c6:	e7be      	b.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    31c8:	2401      	movs	r4, #1
    31ca:	4264      	negs	r4, r4
    31cc:	e7bb      	b.n	3146 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	2000081c 	.word	0x2000081c
    31d4:	2000038c 	.word	0x2000038c
    31d8:	20000370 	.word	0x20000370
    31dc:	20000824 	.word	0x20000824
    31e0:	20000558 	.word	0x20000558

000031e4 <_ZN14USBDeviceClass4recvEm>:
{
    31e4:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    31e6:	466b      	mov	r3, sp
    31e8:	1ddc      	adds	r4, r3, #7
    31ea:	0022      	movs	r2, r4
    31ec:	2301      	movs	r3, #1
    31ee:	f7ff ff8b 	bl	3108 <_ZN14USBDeviceClass4recvEmPvm>
    31f2:	2801      	cmp	r0, #1
    31f4:	d101      	bne.n	31fa <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    31f6:	7820      	ldrb	r0, [r4, #0]
}
    31f8:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    31fa:	2001      	movs	r0, #1
    31fc:	4240      	negs	r0, r0
    31fe:	e7fb      	b.n	31f8 <_ZN14USBDeviceClass4recvEm+0x14>

00003200 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    3200:	b5f0      	push	{r4, r5, r6, r7, lr}
    3202:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    3204:	4b3a      	ldr	r3, [pc, #232]	; (32f0 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
    3206:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    3208:	681b      	ldr	r3, [r3, #0]
{
    320a:	000f      	movs	r7, r1
    320c:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    320e:	2b00      	cmp	r3, #0
    3210:	d03f      	beq.n	3292 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    3212:	2380      	movs	r3, #128	; 0x80
    3214:	01db      	lsls	r3, r3, #7
    3216:	429e      	cmp	r6, r3
    3218:	d83b      	bhi.n	3292 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    321a:	4c36      	ldr	r4, [pc, #216]	; (32f4 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    321c:	7821      	ldrb	r1, [r4, #0]
    321e:	b2c9      	uxtb	r1, r1
    3220:	2900      	cmp	r1, #0
    3222:	d102      	bne.n	322a <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    3224:	2015      	movs	r0, #21
    3226:	f000 fc53 	bl	3ad0 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    322a:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    322c:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    322e:	4a32      	ldr	r2, [pc, #200]	; (32f8 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    3230:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    3232:	01bb      	lsls	r3, r7, #6
    3234:	18d3      	adds	r3, r2, r3
    3236:	9302      	str	r3, [sp, #8]
	while (len != 0)
    3238:	2e00      	cmp	r6, #0
    323a:	d02c      	beq.n	3296 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    323c:	4b2f      	ldr	r3, [pc, #188]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    323e:	681b      	ldr	r3, [r3, #0]
    3240:	9303      	str	r3, [sp, #12]
    3242:	23ff      	movs	r3, #255	; 0xff
    3244:	403b      	ands	r3, r7
    3246:	001c      	movs	r4, r3
    3248:	9300      	str	r3, [sp, #0]
    324a:	3408      	adds	r4, #8
    324c:	9b03      	ldr	r3, [sp, #12]
    324e:	0164      	lsls	r4, r4, #5
    3250:	191c      	adds	r4, r3, r4
    3252:	79a3      	ldrb	r3, [r4, #6]
    3254:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    3256:	d021      	beq.n	329c <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    3258:	4b29      	ldr	r3, [pc, #164]	; (3300 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    325a:	492a      	ldr	r1, [pc, #168]	; (3304 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    325c:	6818      	ldr	r0, [r3, #0]
    325e:	f005 f949 	bl	84f4 <__udivsi3>
    3262:	4b29      	ldr	r3, [pc, #164]	; (3308 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    3264:	2117      	movs	r1, #23
    3266:	4358      	muls	r0, r3
    3268:	f005 f944 	bl	84f4 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    326c:	4b27      	ldr	r3, [pc, #156]	; (330c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    326e:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    3270:	0792      	lsls	r2, r2, #30
    3272:	d413      	bmi.n	329c <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    3274:	5dda      	ldrb	r2, [r3, r7]
    3276:	2a00      	cmp	r2, #0
    3278:	d101      	bne.n	327e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    327a:	3801      	subs	r0, #1
    327c:	d2f7      	bcs.n	326e <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    327e:	2201      	movs	r2, #1
    3280:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3282:	9b00      	ldr	r3, [sp, #0]
    3284:	015a      	lsls	r2, r3, #5
    3286:	4b1d      	ldr	r3, [pc, #116]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    3288:	189b      	adds	r3, r3, r2
    328a:	699a      	ldr	r2, [r3, #24]
    328c:	0b92      	lsrs	r2, r2, #14
    328e:	0392      	lsls	r2, r2, #14
    3290:	619a      	str	r2, [r3, #24]
					return -1;
    3292:	2501      	movs	r5, #1
    3294:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    3296:	0028      	movs	r0, r5
    3298:	b005      	add	sp, #20
    329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    329c:	2200      	movs	r2, #0
    329e:	4b1b      	ldr	r3, [pc, #108]	; (330c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    32a0:	0034      	movs	r4, r6
    32a2:	55da      	strb	r2, [r3, r7]
    32a4:	2e3f      	cmp	r6, #63	; 0x3f
    32a6:	d900      	bls.n	32aa <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
    32a8:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    32aa:	0022      	movs	r2, r4
    32ac:	9901      	ldr	r1, [sp, #4]
    32ae:	9802      	ldr	r0, [sp, #8]
    32b0:	f008 fa6f 	bl	b792 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32b4:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32b6:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32b8:	015a      	lsls	r2, r3, #5
    32ba:	4b10      	ldr	r3, [pc, #64]	; (32fc <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32bc:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    32be:	189b      	adds	r3, r3, r2
    32c0:	9a02      	ldr	r2, [sp, #8]
		written += length;
    32c2:	192d      	adds	r5, r5, r4
    32c4:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    32c6:	699a      	ldr	r2, [r3, #24]
		len -= length;
    32c8:	1b36      	subs	r6, r6, r4
    32ca:	0b92      	lsrs	r2, r2, #14
    32cc:	0392      	lsls	r2, r2, #14
    32ce:	430a      	orrs	r2, r1
    32d0:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    32d2:	9b00      	ldr	r3, [sp, #0]
    32d4:	9a03      	ldr	r2, [sp, #12]
    32d6:	3308      	adds	r3, #8
    32d8:	015b      	lsls	r3, r3, #5
    32da:	18d3      	adds	r3, r2, r3
    32dc:	2202      	movs	r2, #2
    32de:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    32e0:	7959      	ldrb	r1, [r3, #5]
    32e2:	3a82      	subs	r2, #130	; 0x82
    32e4:	430a      	orrs	r2, r1
    32e6:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    32e8:	9b01      	ldr	r3, [sp, #4]
    32ea:	191b      	adds	r3, r3, r4
    32ec:	9301      	str	r3, [sp, #4]
	while (len != 0)
    32ee:	e7a3      	b.n	3238 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    32f0:	2000081c 	.word	0x2000081c
    32f4:	2000038d 	.word	0x2000038d
    32f8:	20000398 	.word	0x20000398
    32fc:	20000824 	.word	0x20000824
    3300:	20000038 	.word	0x20000038
    3304:	000f4240 	.word	0x000f4240
    3308:	00011170 	.word	0x00011170
    330c:	2000038f 	.word	0x2000038f

00003310 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    3310:	b570      	push	{r4, r5, r6, lr}
    3312:	000d      	movs	r5, r1
    3314:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    3316:	4e0d      	ldr	r6, [pc, #52]	; (334c <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    3318:	01ab      	lsls	r3, r5, #6
    331a:	18f6      	adds	r6, r6, r3
{
    331c:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    331e:	0030      	movs	r0, r6
    3320:	0022      	movs	r2, r4
    3322:	f008 fa36 	bl	b792 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3326:	b2ed      	uxtb	r5, r5
    3328:	4909      	ldr	r1, [pc, #36]	; (3350 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    332a:	016d      	lsls	r5, r5, #5
    332c:	194d      	adds	r5, r1, r5
    332e:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3330:	69ab      	ldr	r3, [r5, #24]
    3332:	4a08      	ldr	r2, [pc, #32]	; (3354 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    3334:	0020      	movs	r0, r4
    3336:	4013      	ands	r3, r2
    3338:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    333a:	69ab      	ldr	r3, [r5, #24]
    333c:	04a2      	lsls	r2, r4, #18
    333e:	0b9b      	lsrs	r3, r3, #14
    3340:	0c92      	lsrs	r2, r2, #18
    3342:	039b      	lsls	r3, r3, #14
    3344:	4313      	orrs	r3, r2
    3346:	61ab      	str	r3, [r5, #24]
    3348:	bd70      	pop	{r4, r5, r6, pc}
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	20000398 	.word	0x20000398
    3350:	20000824 	.word	0x20000824
    3354:	f0003fff 	.word	0xf0003fff

00003358 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    3358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    335a:	4b10      	ldr	r3, [pc, #64]	; (339c <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    335c:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    335e:	781b      	ldrb	r3, [r3, #0]
{
    3360:	000f      	movs	r7, r1
    3362:	0015      	movs	r5, r2
	if (_dry_run == true)
    3364:	2b00      	cmp	r3, #0
    3366:	d10c      	bne.n	3382 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    3368:	4b0d      	ldr	r3, [pc, #52]	; (33a0 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    336a:	0016      	movs	r6, r2
    336c:	781c      	ldrb	r4, [r3, #0]
    336e:	2c00      	cmp	r4, #0
    3370:	d009      	beq.n	3386 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    3372:	4e0c      	ldr	r6, [pc, #48]	; (33a4 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    3374:	480c      	ldr	r0, [pc, #48]	; (33a8 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    3376:	8834      	ldrh	r4, [r6, #0]
    3378:	1900      	adds	r0, r0, r4
		_pack_size += len;
    337a:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    337c:	f008 fa09 	bl	b792 <memcpy>
		_pack_size += len;
    3380:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    3382:	0028      	movs	r0, r5
    3384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    3386:	2e00      	cmp	r6, #0
    3388:	d0fb      	beq.n	3382 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    338a:	193a      	adds	r2, r7, r4
    338c:	0033      	movs	r3, r6
    338e:	2100      	movs	r1, #0
    3390:	9801      	ldr	r0, [sp, #4]
    3392:	f7ff ffbd 	bl	3310 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    3396:	1824      	adds	r4, r4, r0
		len -= sent;
    3398:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    339a:	e7f4      	b.n	3386 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    339c:	20000718 	.word	0x20000718
    33a0:	20000819 	.word	0x20000819
    33a4:	2000081a 	.word	0x2000081a
    33a8:	20000719 	.word	0x20000719

000033ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    33ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    33ae:	2000      	movs	r0, #0
{
    33b0:	af00      	add	r7, sp, #0
    33b2:	000e      	movs	r6, r1
    33b4:	0015      	movs	r5, r2
	if (maxlen < 2)
    33b6:	2a01      	cmp	r2, #1
    33b8:	dd26      	ble.n	3408 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    33ba:	1dd3      	adds	r3, r2, #7
    33bc:	466a      	mov	r2, sp
    33be:	08db      	lsrs	r3, r3, #3
    33c0:	00db      	lsls	r3, r3, #3
    33c2:	1ad3      	subs	r3, r2, r3
    33c4:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    33c6:	0008      	movs	r0, r1
    33c8:	f009 fb0b 	bl	c9e2 <strlen>
	uint8_t buffer[maxlen];
    33cc:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    33ce:	2303      	movs	r3, #3
		buffer[i] = 0;
    33d0:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    33d2:	3001      	adds	r0, #1
    33d4:	0040      	lsls	r0, r0, #1
    33d6:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    33d8:	7063      	strb	r3, [r4, #1]
    33da:	1e5a      	subs	r2, r3, #1
    33dc:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    33de:	4295      	cmp	r5, r2
    33e0:	dd0b      	ble.n	33fa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    33e2:	7830      	ldrb	r0, [r6, #0]
    33e4:	2800      	cmp	r0, #0
    33e6:	d008      	beq.n	33fa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    33e8:	3601      	adds	r6, #1
    33ea:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    33ec:	429d      	cmp	r5, r3
    33ee:	d003      	beq.n	33f8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    33f0:	54e1      	strb	r1, [r4, r3]
    33f2:	3302      	adds	r3, #2
    33f4:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    33f6:	e7f0      	b.n	33da <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    33f8:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    33fa:	0021      	movs	r1, r4
    33fc:	4803      	ldr	r0, [pc, #12]	; (340c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    33fe:	f7ff ffab 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
    3402:	1e43      	subs	r3, r0, #1
    3404:	4198      	sbcs	r0, r3
    3406:	b2c0      	uxtb	r0, r0
}
    3408:	46bd      	mov	sp, r7
    340a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    340c:	2000036c 	.word	0x2000036c

00003410 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    3410:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    3412:	2700      	movs	r7, #0
	_dry_run = true;
    3414:	2601      	movs	r6, #1
{
    3416:	b087      	sub	sp, #28
	_dry_run = true;
    3418:	4b1e      	ldr	r3, [pc, #120]	; (3494 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    341a:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    341c:	a902      	add	r1, sp, #8
	_dry_run = true;
    341e:	701e      	strb	r6, [r3, #0]
{
    3420:	0005      	movs	r5, r0
	uint32_t total = 0;
    3422:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    3424:	f7ff fc5e 	bl	2ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    3428:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    342a:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    342c:	2209      	movs	r2, #9
    342e:	0039      	movs	r1, r7
    3430:	0020      	movs	r0, r4
    3432:	f008 f9c9 	bl	b7c8 <memset>
    3436:	2309      	movs	r3, #9
    3438:	7023      	strb	r3, [r4, #0]
    343a:	2302      	movs	r3, #2
    343c:	7063      	strb	r3, [r4, #1]
    343e:	339e      	adds	r3, #158	; 0x9e
    3440:	71e3      	strb	r3, [r4, #7]
    3442:	335a      	adds	r3, #90	; 0x5a
    3444:	7223      	strb	r3, [r4, #8]
    3446:	9b02      	ldr	r3, [sp, #8]
    3448:	7166      	strb	r6, [r4, #5]
    344a:	3309      	adds	r3, #9
    344c:	8063      	strh	r3, [r4, #2]
    344e:	466b      	mov	r3, sp
    3450:	791b      	ldrb	r3, [r3, #4]
    3452:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    3454:	4b0f      	ldr	r3, [pc, #60]	; (3494 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    3456:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    3458:	9b00      	ldr	r3, [sp, #0]
    345a:	2b09      	cmp	r3, #9
    345c:	d107      	bne.n	346e <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    345e:	001a      	movs	r2, r3
    3460:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    3462:	0028      	movs	r0, r5
    3464:	f7ff ff78 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    3468:	2001      	movs	r0, #1
    346a:	b007      	add	sp, #28
    346c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    346e:	4b0a      	ldr	r3, [pc, #40]	; (3498 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    3470:	2209      	movs	r2, #9
		_pack_message = true;
    3472:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    3474:	4e09      	ldr	r6, [pc, #36]	; (349c <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    3476:	0021      	movs	r1, r4
    3478:	0028      	movs	r0, r5
	total = 0;
    347a:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    347c:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    347e:	f7ff ff6b 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    3482:	a902      	add	r1, sp, #8
    3484:	0028      	movs	r0, r5
    3486:	f7ff fc2d 	bl	2ce4 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    348a:	4b03      	ldr	r3, [pc, #12]	; (3498 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    348c:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    348e:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    3490:	4903      	ldr	r1, [pc, #12]	; (34a0 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    3492:	e7e6      	b.n	3462 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    3494:	20000718 	.word	0x20000718
    3498:	20000819 	.word	0x20000819
    349c:	2000081a 	.word	0x2000081a
    34a0:	20000719 	.word	0x20000719

000034a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    34a4:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    34a6:	78ce      	ldrb	r6, [r1, #3]
{
    34a8:	b092      	sub	sp, #72	; 0x48
    34aa:	0005      	movs	r5, r0
    34ac:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    34ae:	2e02      	cmp	r6, #2
    34b0:	d108      	bne.n	34c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    34b2:	88c9      	ldrh	r1, [r1, #6]
    34b4:	482b      	ldr	r0, [pc, #172]	; (3564 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    34b6:	f7ff ffab 	bl	3410 <_ZN14USBDeviceClass17sendConfigurationEm>
    34ba:	1e43      	subs	r3, r0, #1
    34bc:	4198      	sbcs	r0, r3
    34be:	b2c0      	uxtb	r0, r0
}
    34c0:	b012      	add	sp, #72	; 0x48
    34c2:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    34c4:	f001 ff12 	bl	52ec <_Z12PluggableUSBv>
    34c8:	0021      	movs	r1, r4
    34ca:	f001 fedf 	bl	528c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    34ce:	2800      	cmp	r0, #0
    34d0:	d003      	beq.n	34da <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    34d2:	17c3      	asrs	r3, r0, #31
    34d4:	1a18      	subs	r0, r3, r0
    34d6:	0fc0      	lsrs	r0, r0, #31
    34d8:	e7f2      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    34da:	2e01      	cmp	r6, #1
    34dc:	d10b      	bne.n	34f6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (*desc_addr > setup.wLength) {
    34de:	88e2      	ldrh	r2, [r4, #6]
    34e0:	4921      	ldr	r1, [pc, #132]	; (3568 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
    34e2:	2a11      	cmp	r2, #17
    34e4:	dc10      	bgt.n	3508 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    34e6:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    34e8:	2a00      	cmp	r2, #0
    34ea:	d00d      	beq.n	3508 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    34ec:	0028      	movs	r0, r5
    34ee:	f7ff ff33 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    34f2:	2001      	movs	r0, #1
    34f4:	e7e4      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    34f6:	2e03      	cmp	r6, #3
    34f8:	d1e2      	bne.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    34fa:	78a3      	ldrb	r3, [r4, #2]
    34fc:	2b00      	cmp	r3, #0
    34fe:	d105      	bne.n	350c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    3500:	88e2      	ldrh	r2, [r4, #6]
    3502:	491a      	ldr	r1, [pc, #104]	; (356c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    3504:	2a03      	cmp	r2, #3
    3506:	ddee      	ble.n	34e6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    3508:	780a      	ldrb	r2, [r1, #0]
    350a:	e7ef      	b.n	34ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    350c:	2b02      	cmp	r3, #2
    350e:	d105      	bne.n	351c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    3510:	79a2      	ldrb	r2, [r4, #6]
    3512:	4917      	ldr	r1, [pc, #92]	; (3570 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3514:	0028      	movs	r0, r5
    3516:	f7ff ff49 	bl	33ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    351a:	e7d1      	b.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    351c:	2b01      	cmp	r3, #1
    351e:	d102      	bne.n	3526 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3520:	79a2      	ldrb	r2, [r4, #6]
    3522:	4914      	ldr	r1, [pc, #80]	; (3574 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    3524:	e7f6      	b.n	3514 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    3526:	2b03      	cmp	r3, #3
    3528:	d1ca      	bne.n	34c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    352a:	4b13      	ldr	r3, [pc, #76]	; (3578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    352c:	a901      	add	r1, sp, #4
    352e:	6818      	ldr	r0, [r3, #0]
    3530:	f7ff f9d0 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    3534:	4b11      	ldr	r3, [pc, #68]	; (357c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    3536:	a903      	add	r1, sp, #12
    3538:	6818      	ldr	r0, [r3, #0]
    353a:	f7ff f9cb 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    353e:	4b10      	ldr	r3, [pc, #64]	; (3580 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    3540:	a905      	add	r1, sp, #20
    3542:	6818      	ldr	r0, [r3, #0]
    3544:	f7ff f9c6 	bl	28d4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    3548:	4b0e      	ldr	r3, [pc, #56]	; (3584 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    354a:	a907      	add	r1, sp, #28
    354c:	6818      	ldr	r0, [r3, #0]
    354e:	f7ff f9c1 	bl	28d4 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    3552:	f001 fecb 	bl	52ec <_Z12PluggableUSBv>
    3556:	a909      	add	r1, sp, #36	; 0x24
    3558:	f001 fea8 	bl	52ac <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    355c:	79a2      	ldrb	r2, [r4, #6]
    355e:	a901      	add	r1, sp, #4
    3560:	e7d8      	b.n	3514 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	2000036c 	.word	0x2000036c
    3568:	0000f9da 	.word	0x0000f9da
    356c:	0000f9c6 	.word	0x0000f9c6
    3570:	0000f9b8 	.word	0x0000f9b8
    3574:	0000f9ca 	.word	0x0000f9ca
    3578:	0080a00c 	.word	0x0080a00c
    357c:	0080a040 	.word	0x0080a040
    3580:	0080a044 	.word	0x0080a044
    3584:	0080a048 	.word	0x0080a048

00003588 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    3588:	b573      	push	{r0, r1, r4, r5, r6, lr}
    358a:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    358c:	7848      	ldrb	r0, [r1, #1]
{
    358e:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    3590:	280b      	cmp	r0, #11
    3592:	d811      	bhi.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    3594:	f004 ffa4 	bl	84e0 <__gnu_thumb1_case_uqi>
    3598:	2e101d06 	.word	0x2e101d06
    359c:	70484310 	.word	0x70484310
    35a0:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    35a4:	7809      	ldrb	r1, [r1, #0]
    35a6:	aa01      	add	r2, sp, #4
    35a8:	2900      	cmp	r1, #0
    35aa:	d107      	bne.n	35bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    35ac:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    35ae:	7011      	strb	r1, [r2, #0]
    35b0:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    35b2:	0030      	movs	r0, r6
    35b4:	f7ff feac 	bl	3310 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    35b8:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    35ba:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    35bc:	2300      	movs	r3, #0
    35be:	7013      	strb	r3, [r2, #0]
    35c0:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    35c2:	4b2e      	ldr	r3, [pc, #184]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    35c4:	781b      	ldrb	r3, [r3, #0]
    35c6:	2b01      	cmp	r3, #1
    35c8:	d100      	bne.n	35cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    35ca:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    35cc:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    35ce:	2100      	movs	r1, #0
    35d0:	e7ef      	b.n	35b2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    35d2:	788a      	ldrb	r2, [r1, #2]
    35d4:	2300      	movs	r3, #0
    35d6:	2a01      	cmp	r2, #1
    35d8:	d104      	bne.n	35e4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    35da:	aa01      	add	r2, sp, #4
    35dc:	7013      	strb	r3, [r2, #0]
    35de:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    35e0:	4b27      	ldr	r3, [pc, #156]	; (3680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    35e2:	e7ef      	b.n	35c4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    35e4:	4a25      	ldr	r2, [pc, #148]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    35e6:	7013      	strb	r3, [r2, #0]
    35e8:	4a26      	ldr	r2, [pc, #152]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    35ea:	6993      	ldr	r3, [r2, #24]
    35ec:	0b9b      	lsrs	r3, r3, #14
    35ee:	039b      	lsls	r3, r3, #14
    35f0:	6193      	str	r3, [r2, #24]
    35f2:	e7e1      	b.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    35f4:	788c      	ldrb	r4, [r1, #2]
    35f6:	2c01      	cmp	r4, #1
    35f8:	d106      	bne.n	3608 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    35fa:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    35fc:	4b20      	ldr	r3, [pc, #128]	; (3680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    35fe:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    3600:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    3602:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    3604:	0023      	movs	r3, r4
    3606:	e7d4      	b.n	35b2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    3608:	2c00      	cmp	r4, #0
    360a:	d108      	bne.n	361e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    360c:	2001      	movs	r0, #1
    360e:	4b1b      	ldr	r3, [pc, #108]	; (367c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    3610:	4a1c      	ldr	r2, [pc, #112]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3612:	7018      	strb	r0, [r3, #0]
    3614:	6993      	ldr	r3, [r2, #24]
    3616:	0b9b      	lsrs	r3, r3, #14
    3618:	039b      	lsls	r3, r3, #14
    361a:	6193      	str	r3, [r2, #24]
			return true;
    361c:	e7cd      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    361e:	78a9      	ldrb	r1, [r5, #2]
    3620:	0030      	movs	r0, r6
    3622:	f7ff fc11 	bl	2e48 <_ZN14USBDeviceClass10setAddressEm>
    3626:	e7c7      	b.n	35b8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    3628:	0030      	movs	r0, r6
    362a:	f7ff ff3b 	bl	34a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    362e:	e7c4      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    3630:	2301      	movs	r3, #1
    3632:	4a15      	ldr	r2, [pc, #84]	; (3688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    3634:	e7cb      	b.n	35ce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    3636:	780b      	ldrb	r3, [r1, #0]
			return false;
    3638:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    363a:	06db      	lsls	r3, r3, #27
    363c:	d1bd      	bne.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    363e:	0030      	movs	r0, r6
    3640:	f7ff fcbc 	bl	2fbc <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    3644:	202a      	movs	r0, #42	; 0x2a
    3646:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    3648:	78aa      	ldrb	r2, [r5, #2]
    364a:	4b0f      	ldr	r3, [pc, #60]	; (3688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    364c:	30ff      	adds	r0, #255	; 0xff
    364e:	601a      	str	r2, [r3, #0]
    3650:	4a0c      	ldr	r2, [pc, #48]	; (3684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3652:	6813      	ldr	r3, [r2, #0]
    3654:	5c1c      	ldrb	r4, [r3, r0]
    3656:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3658:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    365a:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    365c:	34ff      	adds	r4, #255	; 0xff
    365e:	5d19      	ldrb	r1, [r3, r4]
    3660:	3829      	subs	r0, #41	; 0x29
    3662:	38ff      	subs	r0, #255	; 0xff
    3664:	4301      	orrs	r1, r0
    3666:	5519      	strb	r1, [r3, r4]
    3668:	e7d4      	b.n	3614 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    366a:	2301      	movs	r3, #1
    366c:	4a07      	ldr	r2, [pc, #28]	; (368c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    366e:	e7ae      	b.n	35ce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    3670:	788a      	ldrb	r2, [r1, #2]
    3672:	4b06      	ldr	r3, [pc, #24]	; (368c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    3674:	601a      	str	r2, [r3, #0]
    3676:	e7b7      	b.n	35e8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    3678:	2000      	movs	r0, #0
    367a:	e79e      	b.n	35ba <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    367c:	2000038e 	.word	0x2000038e
    3680:	20000396 	.word	0x20000396
    3684:	20000824 	.word	0x20000824
    3688:	2000081c 	.word	0x2000081c
    368c:	20000820 	.word	0x20000820

00003690 <_ZN14USBDeviceClass10ISRHandlerEv>:
}

#else
void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    3690:	4b4c      	ldr	r3, [pc, #304]	; (37c4 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
{
    3692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    3694:	781c      	ldrb	r4, [r3, #0]
{
    3696:	0007      	movs	r7, r0
	if (_pack_message == true) {
    3698:	2c00      	cmp	r4, #0
    369a:	d000      	beq.n	369e <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    369c:	e091      	b.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    369e:	4e4a      	ldr	r6, [pc, #296]	; (37c8 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    36a0:	6833      	ldr	r3, [r6, #0]
    36a2:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    36a4:	071b      	lsls	r3, r3, #28
    36a6:	d50e      	bpl.n	36c6 <_ZN14USBDeviceClass10ISRHandlerEv+0x36>
    36a8:	0021      	movs	r1, r4
    36aa:	0020      	movs	r0, r4
    36ac:	f7ff f924 	bl	28f8 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    36b0:	6832      	ldr	r2, [r6, #0]
    36b2:	2310      	movs	r3, #16
    36b4:	0011      	movs	r1, r2
    36b6:	31ff      	adds	r1, #255	; 0xff
    36b8:	7a88      	ldrb	r0, [r1, #10]
    36ba:	4303      	orrs	r3, r0
    36bc:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    36be:	4b43      	ldr	r3, [pc, #268]	; (37cc <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    36c0:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    36c2:	2308      	movs	r3, #8
    36c4:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    36c6:	6833      	ldr	r3, [r6, #0]
    36c8:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    36ca:	0752      	lsls	r2, r2, #29
    36cc:	d51f      	bpl.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    36ce:	2204      	movs	r2, #4
    36d0:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    36d2:	4a3f      	ldr	r2, [pc, #252]	; (37d0 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    36d4:	7813      	ldrb	r3, [r2, #0]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d00a      	beq.n	36f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
			txLEDPulse--;
    36da:	7813      	ldrb	r3, [r2, #0]
    36dc:	3b01      	subs	r3, #1
    36de:	b2db      	uxtb	r3, r3
    36e0:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    36e2:	7813      	ldrb	r3, [r2, #0]
    36e4:	2b00      	cmp	r3, #0
    36e6:	d103      	bne.n	36f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
				digitalWrite(PIN_LED_TXL, HIGH);
    36e8:	2101      	movs	r1, #1
    36ea:	2015      	movs	r0, #21
    36ec:	f000 f9f0 	bl	3ad0 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    36f0:	4a38      	ldr	r2, [pc, #224]	; (37d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    36f2:	7813      	ldrb	r3, [r2, #0]
    36f4:	2b00      	cmp	r3, #0
    36f6:	d00a      	beq.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
			rxLEDPulse--;
    36f8:	7813      	ldrb	r3, [r2, #0]
    36fa:	3b01      	subs	r3, #1
    36fc:	b2db      	uxtb	r3, r3
    36fe:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    3700:	7813      	ldrb	r3, [r2, #0]
    3702:	2b00      	cmp	r3, #0
    3704:	d103      	bne.n	370e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
				digitalWrite(PIN_LED_RXL, HIGH);
    3706:	2101      	movs	r1, #1
    3708:	2014      	movs	r0, #20
    370a:	f000 f9e1 	bl	3ad0 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    370e:	6833      	ldr	r3, [r6, #0]
    3710:	33ff      	adds	r3, #255	; 0xff
    3712:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    3714:	06d2      	lsls	r2, r2, #27
    3716:	d520      	bpl.n	375a <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    3718:	2210      	movs	r2, #16
    371a:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    371c:	7959      	ldrb	r1, [r3, #5]
    371e:	3230      	adds	r2, #48	; 0x30
    3720:	430a      	orrs	r2, r1
    3722:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    3724:	2360      	movs	r3, #96	; 0x60
    3726:	492c      	ldr	r1, [pc, #176]	; (37d8 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    3728:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    372a:	780a      	ldrb	r2, [r1, #0]
    372c:	421a      	tst	r2, r3
    372e:	d135      	bne.n	379c <_ZN14USBDeviceClass10ISRHandlerEv+0x10c>
			ok = handleStandardSetup(*setup);
    3730:	f7ff ff2a 	bl	3588 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    3734:	2800      	cmp	r0, #0
    3736:	d034      	beq.n	37a2 <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3738:	2280      	movs	r2, #128	; 0x80
    373a:	6833      	ldr	r3, [r6, #0]
    373c:	4252      	negs	r2, r2
    373e:	33ff      	adds	r3, #255	; 0xff
    3740:	7999      	ldrb	r1, [r3, #6]
    3742:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    3744:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    3746:	6833      	ldr	r3, [r6, #0]
    3748:	33ff      	adds	r3, #255	; 0xff
    374a:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    374c:	0652      	lsls	r2, r2, #25
    374e:	d504      	bpl.n	375a <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    3750:	2240      	movs	r2, #64	; 0x40
    3752:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    3754:	7a59      	ldrb	r1, [r3, #9]
    3756:	430a      	orrs	r2, r1
    3758:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    375a:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

        uint8_t i = (USB_EPT_NUM - 1);
        uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    375c:	2507      	movs	r5, #7
    375e:	8c1c      	ldrh	r4, [r3, #32]
    3760:	2301      	movs	r3, #1
    3762:	439c      	bics	r4, r3
    3764:	b2e4      	uxtb	r4, r4
        while (ept_int && i)
        {
                // Check if endpoint has a pending interrupt
                if ((ept_int & (1 << i)) != 0)
    3766:	9301      	str	r3, [sp, #4]
    3768:	b2e9      	uxtb	r1, r5
        while (ept_int && i)
    376a:	2c00      	cmp	r4, #0
    376c:	d029      	beq.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
    376e:	2d00      	cmp	r5, #0
    3770:	d027      	beq.n	37c2 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
                if ((ept_int & (1 << i)) != 0)
    3772:	0023      	movs	r3, r4
    3774:	412b      	asrs	r3, r5
    3776:	9a01      	ldr	r2, [sp, #4]
    3778:	4213      	tst	r3, r2
    377a:	d00d      	beq.n	3798 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    377c:	002b      	movs	r3, r5
    377e:	6832      	ldr	r2, [r6, #0]
    3780:	3308      	adds	r3, #8
    3782:	015b      	lsls	r3, r3, #5
    3784:	18d3      	adds	r3, r2, r3
    3786:	79da      	ldrb	r2, [r3, #7]
                {
                        // Endpoint Transfer Complete (0/1) Interrupt
                        if (usbd.epBank0IsTransferComplete(i) ||
    3788:	07d2      	lsls	r2, r2, #31
    378a:	d411      	bmi.n	37b0 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    378c:	79db      	ldrb	r3, [r3, #7]
    378e:	079b      	lsls	r3, r3, #30
    3790:	d40e      	bmi.n	37b0 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
                                        epHandlers[i]->handleEndpoint();
                                } else {
                                        handleEndpoint(i);
                                }
                        }
                        ept_int &= ~(1 << i);
    3792:	9b01      	ldr	r3, [sp, #4]
    3794:	40ab      	lsls	r3, r5
    3796:	439c      	bics	r4, r3
    3798:	3d01      	subs	r5, #1
    379a:	e7e5      	b.n	3768 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
			ok = handleClassInterfaceSetup(*setup);
    379c:	f7ff fb78 	bl	2e90 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    37a0:	e7c8      	b.n	3734 <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    37a2:	2220      	movs	r2, #32
    37a4:	4b0d      	ldr	r3, [pc, #52]	; (37dc <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    37a6:	e7cd      	b.n	3744 <_ZN14USBDeviceClass10ISRHandlerEv+0xb4>
                                        epHandlers[i]->handleEndpoint();
    37a8:	6803      	ldr	r3, [r0, #0]
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	4798      	blx	r3
    37ae:	e7f0      	b.n	3792 <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                                if (epHandlers[i]) {
    37b0:	4b0b      	ldr	r3, [pc, #44]	; (37e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x150>)
    37b2:	00aa      	lsls	r2, r5, #2
    37b4:	58d0      	ldr	r0, [r2, r3]
    37b6:	2800      	cmp	r0, #0
    37b8:	d1f6      	bne.n	37a8 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
                                        handleEndpoint(i);
    37ba:	0038      	movs	r0, r7
    37bc:	f7ff faa8 	bl	2d10 <_ZN14USBDeviceClass14handleEndpointEh>
    37c0:	e7e7      	b.n	3792 <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                }
                i--;
        }
}
    37c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    37c4:	20000819 	.word	0x20000819
    37c8:	20000824 	.word	0x20000824
    37cc:	2000081c 	.word	0x2000081c
    37d0:	2000038d 	.word	0x2000038d
    37d4:	2000038c 	.word	0x2000038c
    37d8:	20000558 	.word	0x20000558
    37dc:	410000ff 	.word	0x410000ff
    37e0:	20000370 	.word	0x20000370

000037e4 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    37e4:	b510      	push	{r4, lr}
  USBDevice.ISRHandler();
    37e6:	4802      	ldr	r0, [pc, #8]	; (37f0 <UDD_Handler+0xc>)
    37e8:	f7ff ff52 	bl	3690 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    37ec:	bd10      	pop	{r4, pc}
    37ee:	46c0      	nop			; (mov r8, r8)
    37f0:	2000036c 	.word	0x2000036c

000037f4 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    37f4:	2282      	movs	r2, #130	; 0x82
    37f6:	4b02      	ldr	r3, [pc, #8]	; (3800 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    37f8:	05d2      	lsls	r2, r2, #23
    37fa:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    37fc:	4770      	bx	lr
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	20000824 	.word	0x20000824

00003804 <init>:
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3804:	20c0      	movs	r0, #192	; 0xc0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3806:	491a      	ldr	r1, [pc, #104]	; (3870 <init+0x6c>)
    3808:	4b1a      	ldr	r3, [pc, #104]	; (3874 <init+0x70>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    380a:	4a1b      	ldr	r2, [pc, #108]	; (3878 <init+0x74>)
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz (optionally 120MHz for D51).
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    380c:	b510      	push	{r4, lr}
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    380e:	604b      	str	r3, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3810:	6a13      	ldr	r3, [r2, #32]
    3812:	0600      	lsls	r0, r0, #24
    3814:	021b      	lsls	r3, r3, #8
    3816:	0a1b      	lsrs	r3, r3, #8
    3818:	4303      	orrs	r3, r0
    381a:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    381c:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    381e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3820:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3822:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3824:	2180      	movs	r1, #128	; 0x80
    3826:	6a13      	ldr	r3, [r2, #32]
    3828:	0609      	lsls	r1, r1, #24
    382a:	021b      	lsls	r3, r3, #8
    382c:	0a1b      	lsrs	r3, r3, #8
    382e:	430b      	orrs	r3, r1
#elif (SAML21 || SAMC21)
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_SERCOM0 | MCLK_APBCMASK_SERCOM1 | MCLK_APBCMASK_SERCOM2 | MCLK_APBCMASK_SERCOM3 | MCLK_APBCMASK_SERCOM4 ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    3830:	2106      	movs	r1, #6
    3832:	6213      	str	r3, [r2, #32]
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;
    3834:	4b11      	ldr	r3, [pc, #68]	; (387c <init+0x78>)
    3836:	69da      	ldr	r2, [r3, #28]
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    3838:	6a18      	ldr	r0, [r3, #32]
    383a:	4301      	orrs	r1, r0
    383c:	6219      	str	r1, [r3, #32]
  regAPBCMASK |= MCLK_APBCMASK_TCC0 | MCLK_APBCMASK_TCC1 | MCLK_APBCMASK_TCC2 | MCLK_APBCMASK_TC0 | MCLK_APBCMASK_TC1 | MCLK_APBCMASK_TC2 | MCLK_APBCMASK_TC3 | MCLK_APBCMASK_TC4 ;
  #endif

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_DAC ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_ADC;	// On the SAML, ADC is on the low power bridge
    383e:	2108      	movs	r1, #8
    3840:	6a18      	ldr	r0, [r3, #32]
    3842:	4301      	orrs	r1, r0
    3844:	6219      	str	r1, [r3, #32]
  #elif (SAMC21)
  regAPBCMASK |= MCLK_APBCMASK_ADC0 | MCLK_APBCMASK_ADC1 | MCLK_APBCMASK_DAC ;
  #endif

  MCLK->APBCMASK.reg |= regAPBCMASK ;
    3846:	69d9      	ldr	r1, [r3, #28]
    3848:	4311      	orrs	r1, r2
    384a:	4a0d      	ldr	r2, [pc, #52]	; (3880 <init+0x7c>)
    384c:	430a      	orrs	r2, r1
    384e:	61da      	str	r2, [r3, #28]
#endif

  // Setup all pins (digital and analog) in STARTUP mode (enable INEN and set default pull direction to pullup (pullup will not be enabled))
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, PIO_STARTUP ) ;
    3850:	0020      	movs	r0, r4
    3852:	211a      	movs	r1, #26
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    3854:	3401      	adds	r4, #1
    pinMode( ul, PIO_STARTUP ) ;
    3856:	f000 f937 	bl	3ac8 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    385a:	2c24      	cmp	r4, #36	; 0x24
    385c:	d1f8      	bne.n	3850 <init+0x4c>
  PORT->Group[0].OUTSET.reg = (uint32_t)(1<<PIN_PA25G_USB_DP);
  PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].reg = (PORT_PINCFG_PULLEN | PORT_PINCFG_INEN);
#endif

#if !defined(ADC_NO_INIT_IF_UNUSED)
  initADC();         // Initialize Analog Controller
    385e:	f000 f89f 	bl	39a0 <initADC>
  analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    3862:	2005      	movs	r0, #5
    3864:	f000 f83c 	bl	38e0 <analogReference>
#endif

#if !defined(DAC_NO_INIT_IF_UNUSED)
  initDAC();         // Initialize DAC
    3868:	f000 f816 	bl	3898 <initDAC>
#endif
}
    386c:	bd10      	pop	{r4, pc}
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	e000e010 	.word	0xe000e010
    3874:	0000bb7f 	.word	0x0000bb7f
    3878:	e000ed00 	.word	0xe000ed00
    387c:	40000400 	.word	0x40000400
    3880:	000017ff 	.word	0x000017ff

00003884 <mapResolution>:
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    3884:	4291      	cmp	r1, r2
    3886:	d002      	beq.n	388e <mapResolution+0xa>
    return value;
  }
  if (from > to) {
    3888:	d902      	bls.n	3890 <mapResolution+0xc>
    return value >> (from-to);
    388a:	1a8a      	subs	r2, r1, r2
    388c:	40d0      	lsrs	r0, r2
  }
  return value << (to-from);
}
    388e:	4770      	bx	lr
  return value << (to-from);
    3890:	1a52      	subs	r2, r2, r1
    3892:	4090      	lsls	r0, r2
    3894:	e7fb      	b.n	388e <mapResolution+0xa>
	...

00003898 <initDAC>:
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    3898:	490c      	ldr	r1, [pc, #48]	; (38cc <initDAC+0x34>)
    389a:	4b0d      	ldr	r3, [pc, #52]	; (38d0 <initDAC+0x38>)
    389c:	684a      	ldr	r2, [r1, #4]
    389e:	421a      	tst	r2, r3
    38a0:	d1fc      	bne.n	389c <initDAC+0x4>
    GCLK->PCHCTRL[GCM_DAC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    38a2:	2340      	movs	r3, #64	; 0x40
    38a4:	4a0b      	ldr	r2, [pc, #44]	; (38d4 <initDAC+0x3c>)
    38a6:	6053      	str	r3, [r2, #4]
  while ( (GCLK->PCHCTRL[GCM_DAC].reg & GCLK_PCHCTRL_CHEN) == 0 );      // wait for sync
    38a8:	6851      	ldr	r1, [r2, #4]
    38aa:	4219      	tst	r1, r3
    38ac:	d0fc      	beq.n	38a8 <initDAC+0x10>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    38ae:	223f      	movs	r2, #63	; 0x3f
    38b0:	4b09      	ldr	r3, [pc, #36]	; (38d8 <initDAC+0x40>)
    38b2:	6899      	ldr	r1, [r3, #8]
    38b4:	4211      	tst	r1, r2
    38b6:	d1fc      	bne.n	38b2 <initDAC+0x1a>
      DAC->CTRLB.reg = DAC_CTRLB_REFSEL_VDDANA;
    38b8:	2202      	movs	r2, #2
    38ba:	705a      	strb	r2, [r3, #1]
    DAC->DACCTRL[0].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    38bc:	22c2      	movs	r2, #194	; 0xc2
    38be:	0092      	lsls	r2, r2, #2
    38c0:	819a      	strh	r2, [r3, #12]
    DAC->DACCTRL[1].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    38c2:	81da      	strh	r2, [r3, #14]
  DACinitialized = 1;
    38c4:	2201      	movs	r2, #1
    38c6:	4b05      	ldr	r3, [pc, #20]	; (38dc <initDAC+0x44>)
    38c8:	701a      	strb	r2, [r3, #0]
}
    38ca:	4770      	bx	lr
    38cc:	40001800 	.word	0x40001800
    38d0:	000007fd 	.word	0x000007fd
    38d4:	400018fc 	.word	0x400018fc
    38d8:	42003000 	.word	0x42003000
    38dc:	20000929 	.word	0x20000929

000038e0 <analogReference>:
 * External Reference should be between 1V and VDDANA-0.6V=2.7V (1V and VDDANA-0.4V=2.9V for D51)
 *
 * Warning : The maximum IO voltage is Vcc (up to 3.6 volts for the SAMD/SAML, 5V for the SAMC)
 */
void analogReference(eAnalogReference mode)
{
    38e0:	b510      	push	{r4, lr}
  if (!ADCinitialized) {
    38e2:	4b2a      	ldr	r3, [pc, #168]	; (398c <analogReference+0xac>)
{
    38e4:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    38e6:	781b      	ldrb	r3, [r3, #0]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d104      	bne.n	38f6 <analogReference+0x16>
    REFinitialized = 1; // to prevent re-entry
    38ec:	2201      	movs	r2, #1
    38ee:	4b28      	ldr	r3, [pc, #160]	; (3990 <analogReference+0xb0>)
    38f0:	701a      	strb	r2, [r3, #0]
    initADC();
    38f2:	f000 f855 	bl	39a0 <initADC>
  }

#if (!SAMD11C)
  #if defined(REFA_PIN)
    if (mode == AR_EXTERNAL_REFA) {
    38f6:	2c03      	cmp	r4, #3
    38f8:	d106      	bne.n	3908 <analogReference+0x28>
#endif

#if (SAMD21 || SAMD11 || SAML21 || SAMD51)
  #if defined(REFB_PIN)
    if (mode == AR_EXTERNAL_REFB) {
      if ( pinPeripheral(REFB_PIN, PIO_ANALOG_REF) != RET_STATUS_OK ) {
    38fa:	2107      	movs	r1, #7
    38fc:	0020      	movs	r0, r4
    38fe:	f000 f951 	bl	3ba4 <pinPeripheral>
    3902:	2800      	cmp	r0, #0
    3904:	d009      	beq.n	391a <analogReference+0x3a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
#endif
  syncADC();

  REFinitialized = 1;
}
    3906:	bd10      	pop	{r4, pc}
    if (mode == AR_EXTERNAL_REFB) {
    3908:	2c04      	cmp	r4, #4
    390a:	d0f6      	beq.n	38fa <analogReference+0x1a>
  if (mode == 0) {		// Set to 1.0V for the SAML, 1.024V for the SAMC
    390c:	2c00      	cmp	r4, #0
    390e:	d12b      	bne.n	3968 <analogReference+0x88>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3910:	4a20      	ldr	r2, [pc, #128]	; (3994 <analogReference+0xb4>)
    3912:	4921      	ldr	r1, [pc, #132]	; (3998 <analogReference+0xb8>)
    3914:	69d3      	ldr	r3, [r2, #28]
    3916:	400b      	ands	r3, r1
    3918:	61d3      	str	r3, [r2, #28]
    ADC->REFCTRL.bit.REFSEL = mode;
    391a:	210f      	movs	r1, #15
    391c:	4b1f      	ldr	r3, [pc, #124]	; (399c <analogReference+0xbc>)
    391e:	400c      	ands	r4, r1
    3920:	789a      	ldrb	r2, [r3, #2]
    3922:	438a      	bics	r2, r1
    3924:	4314      	orrs	r4, r2
    3926:	709c      	strb	r4, [r3, #2]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3928:	8c1a      	ldrh	r2, [r3, #32]
    392a:	0552      	lsls	r2, r2, #21
    392c:	d1fc      	bne.n	3928 <analogReference+0x48>
  ADC->CTRLA.bit.ENABLE = 0x01;              // Enable ADC
    392e:	7819      	ldrb	r1, [r3, #0]
    3930:	3202      	adds	r2, #2
    3932:	430a      	orrs	r2, r1
    3934:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3936:	8c1a      	ldrh	r2, [r3, #32]
    3938:	0552      	lsls	r2, r2, #21
    393a:	d1fc      	bne.n	3936 <analogReference+0x56>
  ADC->SWTRIG.bit.START = 1;
    393c:	7e19      	ldrb	r1, [r3, #24]
    393e:	3202      	adds	r2, #2
    3940:	430a      	orrs	r2, r1
    3942:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3944:	8c1a      	ldrh	r2, [r3, #32]
    3946:	0552      	lsls	r2, r2, #21
    3948:	d1fc      	bne.n	3944 <analogReference+0x64>
  while (ADC->INTFLAG.bit.RESRDY == 0);      // Waiting for conversion to complete
    394a:	799a      	ldrb	r2, [r3, #6]
    394c:	07d2      	lsls	r2, r2, #31
    394e:	d5fc      	bpl.n	394a <analogReference+0x6a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    3950:	2102      	movs	r1, #2
  valueRead = ADC->RESULT.reg;               // Dummy read (will also clear the Data Ready flag)
    3952:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    3954:	781a      	ldrb	r2, [r3, #0]
    3956:	438a      	bics	r2, r1
    3958:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    395a:	8c1a      	ldrh	r2, [r3, #32]
    395c:	0552      	lsls	r2, r2, #21
    395e:	d1fc      	bne.n	395a <analogReference+0x7a>
  REFinitialized = 1;
    3960:	4b0b      	ldr	r3, [pc, #44]	; (3990 <analogReference+0xb0>)
    3962:	3201      	adds	r2, #1
    3964:	701a      	strb	r2, [r3, #0]
    3966:	e7ce      	b.n	3906 <analogReference+0x26>
  } else if (mode >= AR_INTREF_1V0) {		// Values starting at AR_INTREF_1V0 are used for the Supply Controller reference (AR_INTREF)
    3968:	2c05      	cmp	r4, #5
    396a:	d9d6      	bls.n	391a <analogReference+0x3a>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    396c:	4b09      	ldr	r3, [pc, #36]	; (3994 <analogReference+0xb4>)
    396e:	490a      	ldr	r1, [pc, #40]	; (3998 <analogReference+0xb8>)
    3970:	69da      	ldr	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3972:	3c06      	subs	r4, #6
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3974:	400a      	ands	r2, r1
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    3976:	21f0      	movs	r1, #240	; 0xf0
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    3978:	61da      	str	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    397a:	69da      	ldr	r2, [r3, #28]
    397c:	0424      	lsls	r4, r4, #16
    397e:	0309      	lsls	r1, r1, #12
    3980:	400c      	ands	r4, r1
    3982:	4314      	orrs	r4, r2
    3984:	61dc      	str	r4, [r3, #28]
    mode = 0;
    3986:	2400      	movs	r4, #0
    3988:	e7c7      	b.n	391a <analogReference+0x3a>
    398a:	46c0      	nop			; (mov r8, r8)
    398c:	20000928 	.word	0x20000928
    3990:	2000092a 	.word	0x2000092a
    3994:	40001400 	.word	0x40001400
    3998:	fff0ffff 	.word	0xfff0ffff
    399c:	43000c00 	.word	0x43000c00

000039a0 <initADC>:
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39a0:	4b1e      	ldr	r3, [pc, #120]	; (3a1c <initADC+0x7c>)
    39a2:	2107      	movs	r1, #7
    39a4:	681b      	ldr	r3, [r3, #0]
{
    39a6:	b510      	push	{r4, lr}
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39a8:	001a      	movs	r2, r3
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    39aa:	08db      	lsrs	r3, r3, #3
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    39ac:	400a      	ands	r2, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    39ae:	0212      	lsls	r2, r2, #8
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    39b0:	400b      	ands	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    39b2:	4313      	orrs	r3, r2
    39b4:	4a1a      	ldr	r2, [pc, #104]	; (3a20 <initADC+0x80>)
    39b6:	8593      	strh	r3, [r2, #44]	; 0x2c
    39b8:	0013      	movs	r3, r2
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39ba:	8c1a      	ldrh	r2, [r3, #32]
    39bc:	0552      	lsls	r2, r2, #21
    39be:	d1fc      	bne.n	39ba <initADC+0x1a>
  SUPC->VREF.reg |= SUPC_VREF_VREFOE;           // Enable Supply Controller Reference output for use with ADC and DAC (AR_INTREF)
    39c0:	4918      	ldr	r1, [pc, #96]	; (3a24 <initADC+0x84>)
    39c2:	3204      	adds	r2, #4
    39c4:	69c8      	ldr	r0, [r1, #28]
    39c6:	4302      	orrs	r2, r0
    39c8:	61ca      	str	r2, [r1, #28]
    GCLK->PCHCTRL[GCM_ADC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    39ca:	2240      	movs	r2, #64	; 0x40
    39cc:	4916      	ldr	r1, [pc, #88]	; (3a28 <initADC+0x88>)
    39ce:	600a      	str	r2, [r1, #0]
    while ( (GCLK->PCHCTRL[GCM_ADC].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    39d0:	6808      	ldr	r0, [r1, #0]
    39d2:	4210      	tst	r0, r2
    39d4:	d0fc      	beq.n	39d0 <initADC+0x30>
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256;                    // Divide Clock by 256.
    39d6:	2207      	movs	r2, #7
    39d8:	705a      	strb	r2, [r3, #1]
    ADC->CTRLC.reg = ADC_CTRLC_RESSEL_10BIT;                        // 10 bits resolution as default
    39da:	3219      	adds	r2, #25
    39dc:	815a      	strh	r2, [r3, #10]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39de:	8c1a      	ldrh	r2, [r3, #32]
    39e0:	0552      	lsls	r2, r2, #21
    39e2:	d1fc      	bne.n	39de <initADC+0x3e>
  ADC->SAMPCTRL.reg = 0x3f;     // Set max Sampling Time Length
    39e4:	323f      	adds	r2, #63	; 0x3f
    39e6:	735a      	strb	r2, [r3, #13]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39e8:	8c1a      	ldrh	r2, [r3, #32]
    39ea:	0552      	lsls	r2, r2, #21
    39ec:	d1fc      	bne.n	39e8 <initADC+0x48>
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    39ee:	22c0      	movs	r2, #192	; 0xc0
    39f0:	0152      	lsls	r2, r2, #5
    39f2:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39f4:	8c1a      	ldrh	r2, [r3, #32]
    39f6:	0552      	lsls	r2, r2, #21
    39f8:	0d52      	lsrs	r2, r2, #21
    39fa:	d1fb      	bne.n	39f4 <initADC+0x54>
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    39fc:	731a      	strb	r2, [r3, #12]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    39fe:	8c1a      	ldrh	r2, [r3, #32]
    3a00:	0552      	lsls	r2, r2, #21
    3a02:	d1fc      	bne.n	39fe <initADC+0x5e>
  ADCinitialized = 1;
    3a04:	4b09      	ldr	r3, [pc, #36]	; (3a2c <initADC+0x8c>)
    3a06:	3201      	adds	r2, #1
    3a08:	701a      	strb	r2, [r3, #0]
  if (!REFinitialized) {
    3a0a:	4b09      	ldr	r3, [pc, #36]	; (3a30 <initADC+0x90>)
    3a0c:	781b      	ldrb	r3, [r3, #0]
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d102      	bne.n	3a18 <initADC+0x78>
    analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    3a12:	2005      	movs	r0, #5
    3a14:	f7ff ff64 	bl	38e0 <analogReference>
}
    3a18:	bd10      	pop	{r4, pc}
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	00806020 	.word	0x00806020
    3a20:	43000c00 	.word	0x43000c00
    3a24:	40001400 	.word	0x40001400
    3a28:	400018f8 	.word	0x400018f8
    3a2c:	20000928 	.word	0x20000928
    3a30:	2000092a 	.word	0x2000092a

00003a34 <analogRead>:

uint32_t analogRead( uint32_t pin )
{
    3a34:	b510      	push	{r4, lr}
  uint32_t valueRead = 0;

  if (!ADCinitialized) {
    3a36:	4b1f      	ldr	r3, [pc, #124]	; (3ab4 <analogRead+0x80>)
{
    3a38:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    3a3a:	781b      	ldrb	r3, [r3, #0]
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d101      	bne.n	3a44 <analogRead+0x10>
    initADC();
    3a40:	f7ff ffae 	bl	39a0 <initADC>
    ADC = ADC0;
  }
#endif

  // pinPeripheral now handles disabling the DAC (if active)
  if ( pinPeripheral(pin, PIO_ANALOG_ADC) == RET_STATUS_OK )
    3a44:	2105      	movs	r1, #5
    3a46:	0020      	movs	r0, r4
    3a48:	f000 f8ac 	bl	3ba4 <pinPeripheral>
    3a4c:	0003      	movs	r3, r0
  uint32_t valueRead = 0;
    3a4e:	2000      	movs	r0, #0
  if ( pinPeripheral(pin, PIO_ANALOG_ADC) == RET_STATUS_OK )
    3a50:	4283      	cmp	r3, r0
    3a52:	d128      	bne.n	3aa6 <analogRead+0x72>
  {
    ADC->INPUTCTRL.bit.MUXPOS = GetADC(pin); // Selection for the positive ADC input
    3a54:	300c      	adds	r0, #12
    3a56:	4344      	muls	r4, r0
    3a58:	4817      	ldr	r0, [pc, #92]	; (3ab8 <analogRead+0x84>)
    3a5a:	4b18      	ldr	r3, [pc, #96]	; (3abc <analogRead+0x88>)
    3a5c:	1900      	adds	r0, r0, r4
    3a5e:	7a41      	ldrb	r1, [r0, #9]
    3a60:	201f      	movs	r0, #31
    3a62:	891a      	ldrh	r2, [r3, #8]
    3a64:	4001      	ands	r1, r0
    3a66:	4382      	bics	r2, r0
    3a68:	430a      	orrs	r2, r1
    3a6a:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a6c:	8c1a      	ldrh	r2, [r3, #32]
    3a6e:	0552      	lsls	r2, r2, #21
    3a70:	d1fc      	bne.n	3a6c <analogRead+0x38>

    syncADC();

    ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    3a72:	7819      	ldrb	r1, [r3, #0]
    3a74:	3202      	adds	r2, #2
    3a76:	430a      	orrs	r2, r1
    3a78:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a7a:	8c1a      	ldrh	r2, [r3, #32]
    3a7c:	0552      	lsls	r2, r2, #21
    3a7e:	d1fc      	bne.n	3a7a <analogRead+0x46>
    syncADC();

    // Start conversion
    ADC->SWTRIG.bit.START = 1;
    3a80:	7e19      	ldrb	r1, [r3, #24]
    3a82:	3202      	adds	r2, #2
    3a84:	430a      	orrs	r2, r1
    3a86:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3a88:	8c1a      	ldrh	r2, [r3, #32]
    3a8a:	0552      	lsls	r2, r2, #21
    3a8c:	d1fc      	bne.n	3a88 <analogRead+0x54>
    syncADC();

    // Store the value
    while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    3a8e:	799a      	ldrb	r2, [r3, #6]
    3a90:	07d2      	lsls	r2, r2, #31
    3a92:	d5fc      	bpl.n	3a8e <analogRead+0x5a>
    valueRead = ADC->RESULT.reg;

    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a94:	2102      	movs	r1, #2
    valueRead = ADC->RESULT.reg;
    3a96:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a98:	781a      	ldrb	r2, [r3, #0]
    valueRead = ADC->RESULT.reg;
    3a9a:	b280      	uxth	r0, r0
    ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    3a9c:	438a      	bics	r2, r1
    3a9e:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    3aa0:	8c1a      	ldrh	r2, [r3, #32]
    3aa2:	0552      	lsls	r2, r2, #21
    3aa4:	d1fc      	bne.n	3aa0 <analogRead+0x6c>
    syncADC();
  }

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    3aa6:	4b06      	ldr	r3, [pc, #24]	; (3ac0 <analogRead+0x8c>)
    3aa8:	681a      	ldr	r2, [r3, #0]
    3aaa:	4b06      	ldr	r3, [pc, #24]	; (3ac4 <analogRead+0x90>)
    3aac:	6819      	ldr	r1, [r3, #0]
    3aae:	f7ff fee9 	bl	3884 <mapResolution>
}
    3ab2:	bd10      	pop	{r4, pc}
    3ab4:	20000928 	.word	0x20000928
    3ab8:	0000fbe0 	.word	0x0000fbe0
    3abc:	43000c00 	.word	0x43000c00
    3ac0:	20000040 	.word	0x20000040
    3ac4:	2000003c 	.word	0x2000003c

00003ac8 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    3ac8:	b510      	push	{r4, lr}
  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  pinPeripheral(ulPin, ulMode);
    3aca:	f000 f86b 	bl	3ba4 <pinPeripheral>
}
    3ace:	bd10      	pop	{r4, pc}

00003ad0 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    3ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t pinPort = GetPort(ulPin);
    3ad2:	220c      	movs	r2, #12
    3ad4:	4342      	muls	r2, r0
    3ad6:	4d25      	ldr	r5, [pc, #148]	; (3b6c <digitalWrite+0x9c>)
{
    3ad8:	9001      	str	r0, [sp, #4]
  uint8_t pinPort = GetPort(ulPin);
    3ada:	5d53      	ldrb	r3, [r2, r5]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3adc:	2b04      	cmp	r3, #4
    3ade:	d02f      	beq.n	3b40 <digitalWrite+0x70>
    3ae0:	2700      	movs	r7, #0
  uint8_t pinNum = GetPin(ulPin);
    3ae2:	18aa      	adds	r2, r5, r2

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
#endif

  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    3ae4:	7852      	ldrb	r2, [r2, #1]
    3ae6:	01db      	lsls	r3, r3, #7
    3ae8:	4e21      	ldr	r6, [pc, #132]	; (3b70 <digitalWrite+0xa0>)
    3aea:	18d4      	adds	r4, r2, r3
    3aec:	19a4      	adds	r4, r4, r6
    3aee:	7826      	ldrb	r6, [r4, #0]
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    3af0:	4c20      	ldr	r4, [pc, #128]	; (3b74 <digitalWrite+0xa4>)
  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    3af2:	b2f6      	uxtb	r6, r6
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    3af4:	591c      	ldr	r4, [r3, r4]
    3af6:	42bc      	cmp	r4, r7
    3af8:	d004      	beq.n	3b04 <digitalWrite+0x34>
    3afa:	3701      	adds	r7, #1
    3afc:	4097      	lsls	r7, r2
    3afe:	1e7c      	subs	r4, r7, #1
    3b00:	41a7      	sbcs	r7, r4
    3b02:	b2ff      	uxtb	r7, r7
  uint8_t pinOut = (PORT->Group[pinPort].OUT.reg && (1ul << pinNum));
    3b04:	4c1b      	ldr	r4, [pc, #108]	; (3b74 <digitalWrite+0xa4>)
    3b06:	191c      	adds	r4, r3, r4
    3b08:	6924      	ldr	r4, [r4, #16]
    3b0a:	46a4      	mov	ip, r4
    3b0c:	2400      	movs	r4, #0
    3b0e:	4660      	mov	r0, ip
    3b10:	42a0      	cmp	r0, r4
    3b12:	d004      	beq.n	3b1e <digitalWrite+0x4e>
    3b14:	3401      	adds	r4, #1
    3b16:	4094      	lsls	r4, r2
    3b18:	1e60      	subs	r0, r4, #1
    3b1a:	4184      	sbcs	r4, r0
    3b1c:	b2e4      	uxtb	r4, r4

  // Enable pull resistor if pin attributes allow and only if pin is not configured as output
  // Note that most pins should use PIN_ATTR_DIGITAL, which includes both PIN_ATTR_INPUT_PULLUP and PIN_ATTR_INPUT_PULLDOWN.
  if ( pinDir == 0 ) { // pin DIR is input
    3b1e:	2f00      	cmp	r7, #0
    3b20:	d117      	bne.n	3b52 <digitalWrite+0x82>
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    3b22:	9801      	ldr	r0, [sp, #4]
    3b24:	370c      	adds	r7, #12
    3b26:	4378      	muls	r0, r7
    3b28:	182d      	adds	r5, r5, r0
    3b2a:	6868      	ldr	r0, [r5, #4]
     if ( ulVal == HIGH )
    3b2c:	2901      	cmp	r1, #1
    3b2e:	d10d      	bne.n	3b4c <digitalWrite+0x7c>
     {
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    3b30:	2c01      	cmp	r4, #1
    3b32:	d106      	bne.n	3b42 <digitalWrite+0x72>
    3b34:	0741      	lsls	r1, r0, #29
    3b36:	d406      	bmi.n	3b46 <digitalWrite+0x76>
     else
     {
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
     }

     PORT->Group[pinPort].PINCFG[pinNum].reg = pinConfig ;
    3b38:	18d3      	adds	r3, r2, r3
    3b3a:	4a0d      	ldr	r2, [pc, #52]	; (3b70 <digitalWrite+0xa0>)
    3b3c:	189b      	adds	r3, r3, r2
    3b3e:	701e      	strb	r6, [r3, #0]
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    }
  }

  return ;
}
    3b40:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    3b42:	0701      	lsls	r1, r0, #28
    3b44:	d5f8      	bpl.n	3b38 <digitalWrite+0x68>
         pinConfig |= (uint8_t)(PORT_PINCFG_PULLEN) ;
    3b46:	2104      	movs	r1, #4
    3b48:	430e      	orrs	r6, r1
    3b4a:	e7f5      	b.n	3b38 <digitalWrite+0x68>
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
    3b4c:	2104      	movs	r1, #4
    3b4e:	438e      	bics	r6, r1
    3b50:	e7f2      	b.n	3b38 <digitalWrite+0x68>
    if ( ulVal == HIGH ) {
    3b52:	2901      	cmp	r1, #1
    3b54:	d104      	bne.n	3b60 <digitalWrite+0x90>
      PORT->Group[pinPort].OUTSET.reg = (1ul << pinNum) ;
    3b56:	4091      	lsls	r1, r2
    3b58:	4a06      	ldr	r2, [pc, #24]	; (3b74 <digitalWrite+0xa4>)
    3b5a:	189b      	adds	r3, r3, r2
    3b5c:	6199      	str	r1, [r3, #24]
    3b5e:	e7ef      	b.n	3b40 <digitalWrite+0x70>
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    3b60:	2101      	movs	r1, #1
    3b62:	4091      	lsls	r1, r2
    3b64:	4a03      	ldr	r2, [pc, #12]	; (3b74 <digitalWrite+0xa4>)
    3b66:	189b      	adds	r3, r3, r2
    3b68:	6159      	str	r1, [r3, #20]
    3b6a:	e7e9      	b.n	3b40 <digitalWrite+0x70>
    3b6c:	0000fbe0 	.word	0x0000fbe0
    3b70:	40002840 	.word	0x40002840
    3b74:	40002800 	.word	0x40002800

00003b78 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  uint8_t pinPort = GetPort(ulPin);
    3b78:	230c      	movs	r3, #12
    3b7a:	4358      	muls	r0, r3
    3b7c:	4907      	ldr	r1, [pc, #28]	; (3b9c <digitalRead+0x24>)
    3b7e:	2300      	movs	r3, #0
    3b80:	5c42      	ldrb	r2, [r0, r1]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3b82:	2a04      	cmp	r2, #4
    3b84:	d006      	beq.n	3b94 <digitalRead+0x1c>
  {
    return LOW ;
  }

  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    3b86:	4b06      	ldr	r3, [pc, #24]	; (3ba0 <digitalRead+0x28>)
    3b88:	01d2      	lsls	r2, r2, #7
    3b8a:	18d2      	adds	r2, r2, r3
  uint8_t pinNum = GetPin(ulPin);
    3b8c:	1809      	adds	r1, r1, r0
  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    3b8e:	6a13      	ldr	r3, [r2, #32]
    3b90:	784a      	ldrb	r2, [r1, #1]
    3b92:	40d3      	lsrs	r3, r2
    3b94:	2001      	movs	r0, #1
  {
    return HIGH ;
  }

  return LOW ;
}
    3b96:	4018      	ands	r0, r3
    3b98:	4770      	bx	lr
    3b9a:	46c0      	nop			; (mov r8, r8)
    3b9c:	0000fbe0 	.word	0x0000fbe0
    3ba0:	40002800 	.word	0x40002800

00003ba4 <pinPeripheral>:
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
#endif
}

int pinPeripheral( uint32_t ulPin, uint32_t ulPeripheral )
{
    3ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ba6:	0005      	movs	r5, r0
#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
  // Prevent out of bounds access
  if (ulPin >= NUM_PIN_DESCRIPTION_ENTRIES)
    3ba8:	2823      	cmp	r0, #35	; 0x23
    3baa:	d900      	bls.n	3bae <pinPeripheral+0xa>
    3bac:	e06b      	b.n	3c86 <pinPeripheral+0xe2>
  {
    return -1 ;
  }
#endif

  uint8_t pinPort = GetPort(ulPin);
    3bae:	230c      	movs	r3, #12
    3bb0:	4343      	muls	r3, r0
    3bb2:	4f7f      	ldr	r7, [pc, #508]	; (3db0 <pinPeripheral+0x20c>)
    3bb4:	5dda      	ldrb	r2, [r3, r7]
  uint8_t pinNum = GetPin(ulPin);
    3bb6:	18fb      	adds	r3, r7, r3
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    3bb8:	78d8      	ldrb	r0, [r3, #3]
  uint8_t pinNum = GetPin(ulPin);
    3bba:	785c      	ldrb	r4, [r3, #1]
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    3bbc:	9001      	str	r0, [sp, #4]

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint8_t pinType = g_APinDescription[ulPin].ulPinType;
    3bbe:	7898      	ldrb	r0, [r3, #2]
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    3bc0:	685b      	ldr	r3, [r3, #4]
#endif

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    3bc2:	2a04      	cmp	r2, #4
    3bc4:	d05f      	beq.n	3c86 <pinPeripheral+0xe2>
  }

#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  // If pinType is not PIO_MULTI or PIO_STARTUP in the pinDescription table, then it must match ulPeripheral
  if ( pinType != PIO_MULTI && pinType != PIO_STARTUP && pinType != ulPeripheral )
    3bc6:	2619      	movs	r6, #25
    3bc8:	4276      	negs	r6, r6
    3bca:	46b4      	mov	ip, r6
    3bcc:	4484      	add	ip, r0
    3bce:	4666      	mov	r6, ip
    3bd0:	2e01      	cmp	r6, #1
    3bd2:	d901      	bls.n	3bd8 <pinPeripheral+0x34>
    3bd4:	4288      	cmp	r0, r1
    3bd6:	d156      	bne.n	3c86 <pinPeripheral+0xe2>
  {
    return -1 ;
  }

  // Make sure ulPeripheral is listed in pinAttribute
  if ( !(pinAttribute & (1UL << ulPeripheral)) && pinType != PIO_STARTUP )
    3bd8:	40cb      	lsrs	r3, r1
    3bda:	07db      	lsls	r3, r3, #31
    3bdc:	d401      	bmi.n	3be2 <pinPeripheral+0x3e>
    3bde:	281a      	cmp	r0, #26
    3be0:	d151      	bne.n	3c86 <pinPeripheral+0xe2>
#endif
#endif

  // Determine hardware peripheral to use
  EPioPeripheral peripheral = PER_PORT;
  switch ( ulPeripheral )
    3be2:	1f08      	subs	r0, r1, #4
    3be4:	2817      	cmp	r0, #23
    3be6:	d863      	bhi.n	3cb0 <pinPeripheral+0x10c>
    3be8:	f004 fc7a 	bl	84e0 <__gnu_thumb1_case_uqi>
    3bec:	64644736 	.word	0x64644736
    3bf0:	62626262 	.word	0x62626262
    3bf4:	0c5d5050 	.word	0x0c5d5050
    3bf8:	6262620c 	.word	0x6262620c
    3bfc:	90626262 	.word	0x90626262
    3c00:	4d624d92 	.word	0x4d624d92
    case PIO_CAN:
#endif
#if (SAMD51)
    case PIO_QSPI:
#endif
      peripheral = PER_COM;
    3c04:	2306      	movs	r3, #6
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
      //DAC->CTRLB.bit.EOEN = 0x00; // The DAC output is turned off.
      syncDAC();
    }
#elif (SAML21 || SAMD51)
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3c06:	2a00      	cmp	r2, #0
    3c08:	d100      	bne.n	3c0c <pinPeripheral+0x68>
    3c0a:	e08f      	b.n	3d2c <pinPeripheral+0x188>
      }
    }
#endif
  }

  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3c0c:	4d69      	ldr	r5, [pc, #420]	; (3db4 <pinPeripheral+0x210>)
    3c0e:	01d0      	lsls	r0, r2, #7
    3c10:	1820      	adds	r0, r4, r0
    3c12:	1940      	adds	r0, r0, r5
    3c14:	7805      	ldrb	r5, [r0, #0]
    3c16:	2004      	movs	r0, #4
    3c18:	4028      	ands	r0, r5

  // INEN should be enabled for both input and output (but not analog)
  if ( ulPeripheral != PIO_ANALOG_ADC && ulPeripheral != PIO_ANALOG_DAC && ulPeripheral != PIO_ANALOG_REF )
    3c1a:	1f4d      	subs	r5, r1, #5
    3c1c:	2d02      	cmp	r5, #2
    3c1e:	d901      	bls.n	3c24 <pinPeripheral+0x80>
  {
    pinCfg |= PORT_PINCFG_INEN;
    3c20:	2502      	movs	r5, #2
    3c22:	4328      	orrs	r0, r5
  }

  // Set pin drive strength (DRVSTR), which is used with PIO_OUTPUT and PIO_SERCOM (UART, SPI, and I2C)
  if ( (peripheralAttribute & PER_ATTR_DRIVE_MASK) == PER_ATTR_DRIVE_STRONG )
    3c24:	9d01      	ldr	r5, [sp, #4]
    3c26:	072d      	lsls	r5, r5, #28
    3c28:	d501      	bpl.n	3c2e <pinPeripheral+0x8a>
  {
    pinCfg |= PORT_PINCFG_DRVSTR;
    3c2a:	2540      	movs	r5, #64	; 0x40
    3c2c:	4328      	orrs	r0, r5
  __ASM volatile ("cpsid i" : : : "memory");
    3c2e:	b672      	cpsid	i
    3c30:	01d2      	lsls	r2, r2, #7
  }

  noInterrupts(); // Avoid possible invalid interim pin state

  if ( ulPeripheral == PIO_INPUT || ulPeripheral == PIO_STARTUP )
    3c32:	2900      	cmp	r1, #0
    3c34:	d001      	beq.n	3c3a <pinPeripheral+0x96>
    3c36:	291a      	cmp	r1, #26
    3c38:	d13e      	bne.n	3cb8 <pinPeripheral+0x114>
  {
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    3c3a:	2301      	movs	r3, #1
    3c3c:	40a3      	lsls	r3, r4
    3c3e:	495e      	ldr	r1, [pc, #376]	; (3db8 <pinPeripheral+0x214>)
    3c40:	1851      	adds	r1, r2, r1
    3c42:	604b      	str	r3, [r1, #4]
    PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;	// set default pull direction to pullup (will not be enabled)
    3c44:	618b      	str	r3, [r1, #24]
    pinCfg |= PORT_PINCFG_PULLEN;
  }
  else if ( ulPeripheral == PIO_OUTPUT )
  {
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    pinCfg &= ~PORT_PINCFG_PULLEN;      // Disable pull resistor
    3c46:	2304      	movs	r3, #4
    3c48:	4398      	bics	r0, r3

    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
  }

  // Set pin drive strength, enable/disable pull resistor, enable/disable INEN, and enable/disable the peripheral mux
  PORT->Group[pinPort].PINCFG[pinNum].reg = (uint8_t)pinCfg ;
    3c4a:	4b5a      	ldr	r3, [pc, #360]	; (3db4 <pinPeripheral+0x210>)
    3c4c:	18a2      	adds	r2, r4, r2
    3c4e:	18d2      	adds	r2, r2, r3
    3c50:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    3c52:	b662      	cpsie	i

  interrupts();
  return 0l ;
    3c54:	2000      	movs	r0, #0
}
    3c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ( GetExtInt(ulPin) == NOT_AN_INTERRUPT )
    3c58:	230c      	movs	r3, #12
    3c5a:	435d      	muls	r5, r3
    3c5c:	197f      	adds	r7, r7, r5
    3c5e:	7abb      	ldrb	r3, [r7, #10]
    3c60:	2b12      	cmp	r3, #18
    3c62:	d010      	beq.n	3c86 <pinPeripheral+0xe2>
      peripheral = PER_EXTINT;
    3c64:	2300      	movs	r3, #0
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3c66:	2a00      	cmp	r2, #0
    3c68:	d060      	beq.n	3d2c <pinPeripheral+0x188>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3c6a:	4d52      	ldr	r5, [pc, #328]	; (3db4 <pinPeripheral+0x210>)
    3c6c:	01d0      	lsls	r0, r2, #7
    3c6e:	1820      	adds	r0, r4, r0
    3c70:	1940      	adds	r0, r0, r5
    3c72:	7805      	ldrb	r5, [r0, #0]
    3c74:	2004      	movs	r0, #4
    3c76:	4028      	ands	r0, r5
    3c78:	e7d2      	b.n	3c20 <pinPeripheral+0x7c>
      if ( GetADC(ulPin) == No_ADC_Channel )
    3c7a:	230c      	movs	r3, #12
    3c7c:	435d      	muls	r5, r3
    3c7e:	197f      	adds	r7, r7, r5
    3c80:	7a7b      	ldrb	r3, [r7, #9]
    3c82:	2b16      	cmp	r3, #22
    3c84:	d14f      	bne.n	3d26 <pinPeripheral+0x182>
    return -1 ;
    3c86:	2001      	movs	r0, #1
    3c88:	4240      	negs	r0, r0
    3c8a:	e7e4      	b.n	3c56 <pinPeripheral+0xb2>
      if ( g_APinDescription[ulPin].ulTCChannel == NOT_ON_TIMER )
    3c8c:	230c      	movs	r3, #12
    3c8e:	435d      	muls	r5, r3
    3c90:	197f      	adds	r7, r7, r5
    3c92:	7a3b      	ldrb	r3, [r7, #8]
    3c94:	2b80      	cmp	r3, #128	; 0x80
    3c96:	d0f6      	beq.n	3c86 <pinPeripheral+0xe2>
      if ( (peripheralAttribute & PER_ATTR_TIMER_MASK) == PER_ATTR_TIMER_STD )
    3c98:	2306      	movs	r3, #6
    3c9a:	9801      	ldr	r0, [sp, #4]
    3c9c:	4003      	ands	r3, r0
        peripheral = PER_TIMER_ALT;
    3c9e:	1e58      	subs	r0, r3, #1
    3ca0:	4183      	sbcs	r3, r0
    3ca2:	3304      	adds	r3, #4
    3ca4:	e7af      	b.n	3c06 <pinPeripheral+0x62>
        peripheral = PER_SERCOM_ALT;
    3ca6:	2301      	movs	r3, #1
    3ca8:	9801      	ldr	r0, [sp, #4]
    3caa:	4003      	ands	r3, r0
    3cac:	3302      	adds	r3, #2
    3cae:	e7da      	b.n	3c66 <pinPeripheral+0xc2>
  EPioPeripheral peripheral = PER_PORT;
    3cb0:	2309      	movs	r3, #9
    3cb2:	e7a8      	b.n	3c06 <pinPeripheral+0x62>
      peripheral = PER_ANALOG;
    3cb4:	2301      	movs	r3, #1
    3cb6:	e7a6      	b.n	3c06 <pinPeripheral+0x62>
  else if ( ulPeripheral == PIO_INPUT_PULLUP || ulPeripheral == PIO_INPUT_PULLDOWN )
    3cb8:	1e8d      	subs	r5, r1, #2
    3cba:	2d01      	cmp	r5, #1
    3cbc:	d80c      	bhi.n	3cd8 <pinPeripheral+0x134>
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    3cbe:	2301      	movs	r3, #1
    3cc0:	40a3      	lsls	r3, r4
    3cc2:	4d3d      	ldr	r5, [pc, #244]	; (3db8 <pinPeripheral+0x214>)
    3cc4:	1955      	adds	r5, r2, r5
    3cc6:	606b      	str	r3, [r5, #4]
    if ( ulPeripheral == PIO_INPUT_PULLDOWN ) {
    3cc8:	2903      	cmp	r1, #3
    3cca:	d103      	bne.n	3cd4 <pinPeripheral+0x130>
      PORT->Group[pinPort].OUTCLR.reg = (uint32_t)(1<<pinNum) ;
    3ccc:	616b      	str	r3, [r5, #20]
    pinCfg |= PORT_PINCFG_PULLEN;
    3cce:	2304      	movs	r3, #4
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    3cd0:	4318      	orrs	r0, r3
    3cd2:	e7ba      	b.n	3c4a <pinPeripheral+0xa6>
      PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;
    3cd4:	61ab      	str	r3, [r5, #24]
    3cd6:	e7fa      	b.n	3cce <pinPeripheral+0x12a>
  else if ( ulPeripheral == PIO_OUTPUT )
    3cd8:	2901      	cmp	r1, #1
    3cda:	d104      	bne.n	3ce6 <pinPeripheral+0x142>
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    3cdc:	40a1      	lsls	r1, r4
    3cde:	4b36      	ldr	r3, [pc, #216]	; (3db8 <pinPeripheral+0x214>)
    3ce0:	18d3      	adds	r3, r2, r3
    3ce2:	6099      	str	r1, [r3, #8]
    3ce4:	e7af      	b.n	3c46 <pinPeripheral+0xa2>
    3ce6:	0861      	lsrs	r1, r4, #1
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3ce8:	4d34      	ldr	r5, [pc, #208]	; (3dbc <pinPeripheral+0x218>)
    3cea:	1851      	adds	r1, r2, r1
    3cec:	1949      	adds	r1, r1, r5
    if ( pinNum & 1 ) // is pin odd?
    3cee:	07e5      	lsls	r5, r4, #31
    3cf0:	d508      	bpl.n	3d04 <pinPeripheral+0x160>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    3cf2:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    3cf4:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    3cf6:	011b      	lsls	r3, r3, #4
    3cf8:	4035      	ands	r5, r6
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3cfa:	432b      	orrs	r3, r5
    3cfc:	b2db      	uxtb	r3, r3
    3cfe:	700b      	strb	r3, [r1, #0]
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    3d00:	2301      	movs	r3, #1
    3d02:	e7e5      	b.n	3cd0 <pinPeripheral+0x12c>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3d04:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    3d06:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    3d08:	43b5      	bics	r5, r6
    3d0a:	e7f6      	b.n	3cfa <pinPeripheral+0x156>
      peripheral = PER_AC_CLK;
    3d0c:	2307      	movs	r3, #7
    3d0e:	e7aa      	b.n	3c66 <pinPeripheral+0xc2>
      peripheral = PER_CCL;
    3d10:	2308      	movs	r3, #8
    3d12:	e7a8      	b.n	3c66 <pinPeripheral+0xc2>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    3d14:	4827      	ldr	r0, [pc, #156]	; (3db4 <pinPeripheral+0x210>)
    3d16:	01d3      	lsls	r3, r2, #7
    3d18:	18e3      	adds	r3, r4, r3
    3d1a:	181b      	adds	r3, r3, r0
    3d1c:	7818      	ldrb	r0, [r3, #0]
    3d1e:	2304      	movs	r3, #4
    3d20:	4018      	ands	r0, r3
      peripheral = PER_ANALOG;
    3d22:	3b03      	subs	r3, #3
    3d24:	e77e      	b.n	3c24 <pinPeripheral+0x80>
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3d26:	2a00      	cmp	r2, #0
    3d28:	d1f4      	bne.n	3d14 <pinPeripheral+0x170>
      peripheral = PER_ANALOG;
    3d2a:	2301      	movs	r3, #1
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    3d2c:	2c02      	cmp	r4, #2
    3d2e:	d002      	beq.n	3d36 <pinPeripheral+0x192>
    3d30:	2c05      	cmp	r4, #5
    3d32:	d000      	beq.n	3d36 <pinPeripheral+0x192>
    3d34:	e76a      	b.n	3c0c <pinPeripheral+0x68>
    3d36:	2906      	cmp	r1, #6
    3d38:	d100      	bne.n	3d3c <pinPeripheral+0x198>
    3d3a:	e767      	b.n	3c0c <pinPeripheral+0x68>
    if ( (pinPort == 0) && (pinNum == 5) ) {
    3d3c:	1f65      	subs	r5, r4, #5
    3d3e:	4268      	negs	r0, r5
    3d40:	4145      	adcs	r5, r0
    if (dacEnabled[DACNumber]) {
    3d42:	481f      	ldr	r0, [pc, #124]	; (3dc0 <pinPeripheral+0x21c>)
    3d44:	5d47      	ldrb	r7, [r0, r5]
    3d46:	2f00      	cmp	r7, #0
    3d48:	d100      	bne.n	3d4c <pinPeripheral+0x1a8>
    3d4a:	e75f      	b.n	3c0c <pinPeripheral+0x68>
      dacEnabled[DACNumber] = false;
    3d4c:	2700      	movs	r7, #0
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    3d4e:	2602      	movs	r6, #2
      dacEnabled[DACNumber] = false;
    3d50:	5547      	strb	r7, [r0, r5]
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    3d52:	481c      	ldr	r0, [pc, #112]	; (3dc4 <pinPeripheral+0x220>)
    3d54:	7807      	ldrb	r7, [r0, #0]
    3d56:	43b7      	bics	r7, r6
    3d58:	7007      	strb	r7, [r0, #0]
  // VARIANT_MCK / 1000000 == cycles needed to delay 1uS
  //                     3 == cycles used in a loop
  // Divide by 3 before multiplication with usec, so that the maximum usable usec value
  // with the D51 @ 120MHz is at least what it was when multipling by usec first at 48MHz.
  uint32_t n = usec * ((VARIANT_MCK / 1000000) / 3);
  __asm__ __volatile__(
    3d5a:	27a0      	movs	r7, #160	; 0xa0
    3d5c:	00bf      	lsls	r7, r7, #2
    3d5e:	3f01      	subs	r7, #1
    3d60:	d1fd      	bne.n	3d5e <pinPeripheral+0x1ba>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3d62:	273f      	movs	r7, #63	; 0x3f
    3d64:	6886      	ldr	r6, [r0, #8]
    3d66:	423e      	tst	r6, r7
    3d68:	d1fc      	bne.n	3d64 <pinPeripheral+0x1c0>
      DAC->DACCTRL[DACNumber].bit.ENABLE = 0x00; // The DACx output is turned off.
    3d6a:	4e16      	ldr	r6, [pc, #88]	; (3dc4 <pinPeripheral+0x220>)
    3d6c:	1d2f      	adds	r7, r5, #4
    3d6e:	46b4      	mov	ip, r6
    3d70:	007f      	lsls	r7, r7, #1
    3d72:	44bc      	add	ip, r7
    3d74:	4666      	mov	r6, ip
    3d76:	88b7      	ldrh	r7, [r6, #4]
    3d78:	2602      	movs	r6, #2
    3d7a:	43b7      	bics	r7, r6
    3d7c:	4666      	mov	r6, ip
    3d7e:	80b7      	strh	r7, [r6, #4]
      if (dacEnabled[0] || dacEnabled[1]) {
    3d80:	4f0f      	ldr	r7, [pc, #60]	; (3dc0 <pinPeripheral+0x21c>)
    3d82:	783e      	ldrb	r6, [r7, #0]
    3d84:	2e00      	cmp	r6, #0
    3d86:	d103      	bne.n	3d90 <pinPeripheral+0x1ec>
    3d88:	787f      	ldrb	r7, [r7, #1]
    3d8a:	2f00      	cmp	r7, #0
    3d8c:	d100      	bne.n	3d90 <pinPeripheral+0x1ec>
    3d8e:	e73d      	b.n	3c0c <pinPeripheral+0x68>
        DAC->CTRLA.bit.ENABLE = 0x01;     // Enable DAC controller, so that the other DAC can function
    3d90:	2702      	movs	r7, #2
    3d92:	7806      	ldrb	r6, [r0, #0]
    3d94:	4337      	orrs	r7, r6
    3d96:	7007      	strb	r7, [r0, #0]
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    3d98:	273f      	movs	r7, #63	; 0x3f
    3d9a:	6886      	ldr	r6, [r0, #8]
    3d9c:	423e      	tst	r6, r7
    3d9e:	d1fc      	bne.n	3d9a <pinPeripheral+0x1f6>
        while ( (DAC->STATUS.reg & (1 << (1 - DACNumber))) == 0 );   // Must wait for DACx to start
    3da0:	2701      	movs	r7, #1
    3da2:	1b7d      	subs	r5, r7, r5
    3da4:	40af      	lsls	r7, r5
    3da6:	79c5      	ldrb	r5, [r0, #7]
    3da8:	422f      	tst	r7, r5
    3daa:	d0fc      	beq.n	3da6 <pinPeripheral+0x202>
    3dac:	e72e      	b.n	3c0c <pinPeripheral+0x68>
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	0000fbe0 	.word	0x0000fbe0
    3db4:	40002840 	.word	0x40002840
    3db8:	40002800 	.word	0x40002800
    3dbc:	40002830 	.word	0x40002830
    3dc0:	2000092b 	.word	0x2000092b
    3dc4:	42003000 	.word	0x42003000

00003dc8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
    3dc8:	4770      	bx	lr

00003dca <_ZN11DHT_Unified8HumidityD1Ev>:
    DHT_Unified* _parent;
    int32_t _id;

  };

  class Humidity : public Adafruit_Sensor {
    3dca:	4770      	bx	lr

00003dcc <_ZN11DHT_Unified11TemperatureD1Ev>:
  class Temperature : public Adafruit_Sensor {
    3dcc:	4770      	bx	lr

00003dce <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
DHT_Unified::Temperature::Temperature(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    3dce:	b570      	push	{r4, r5, r6, lr}
    3dd0:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3dd2:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    3dd4:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    3dd6:	0032      	movs	r2, r6
    3dd8:	2100      	movs	r1, #0
    3dda:	0020      	movs	r0, r4
    3ddc:	f007 fcf4 	bl	b7c8 <memset>
  // Populate sensor reading values.
  event->version     = sizeof(sensors_event_t);
  event->sensor_id   = _id;
    3de0:	68eb      	ldr	r3, [r5, #12]
  event->version     = sizeof(sensors_event_t);
    3de2:	6026      	str	r6, [r4, #0]
  event->sensor_id   = _id;
    3de4:	6063      	str	r3, [r4, #4]
  event->type        = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3de6:	230d      	movs	r3, #13
    3de8:	60a3      	str	r3, [r4, #8]
  event->timestamp   = millis();
    3dea:	f7fe fc3b 	bl	2664 <millis>
  event->temperature = _parent->_dht.readTemperature();
    3dee:	2200      	movs	r2, #0
  event->timestamp   = millis();
    3df0:	6120      	str	r0, [r4, #16]
  event->temperature = _parent->_dht.readTemperature();
    3df2:	0011      	movs	r1, r2
    3df4:	68a8      	ldr	r0, [r5, #8]
    3df6:	f001 fb43 	bl	5480 <_ZN3DHT15readTemperatureEbb>
    3dfa:	6160      	str	r0, [r4, #20]
  
  return true;
}
    3dfc:	2001      	movs	r0, #1
    3dfe:	bd70      	pop	{r4, r5, r6, pc}

00003e00 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
DHT_Unified::Humidity::Humidity(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    3e00:	b570      	push	{r4, r5, r6, lr}
    3e02:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    3e04:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    3e06:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    3e08:	0032      	movs	r2, r6
    3e0a:	2100      	movs	r1, #0
    3e0c:	0020      	movs	r0, r4
    3e0e:	f007 fcdb 	bl	b7c8 <memset>
  // Populate sensor reading values.
  event->version           = sizeof(sensors_event_t);
  event->sensor_id         = _id;
    3e12:	68eb      	ldr	r3, [r5, #12]
  event->version           = sizeof(sensors_event_t);
    3e14:	6026      	str	r6, [r4, #0]
  event->sensor_id         = _id;
    3e16:	6063      	str	r3, [r4, #4]
  event->type              = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3e18:	230c      	movs	r3, #12
    3e1a:	60a3      	str	r3, [r4, #8]
  event->timestamp         = millis();
    3e1c:	f7fe fc22 	bl	2664 <millis>
  event->relative_humidity = _parent->_dht.readHumidity();
    3e20:	2100      	movs	r1, #0
  event->timestamp         = millis();
    3e22:	6120      	str	r0, [r4, #16]
  event->relative_humidity = _parent->_dht.readHumidity();
    3e24:	68a8      	ldr	r0, [r5, #8]
    3e26:	f001 fb7b 	bl	5520 <_ZN3DHT12readHumidityEb>
    3e2a:	6160      	str	r0, [r4, #20]
  
  return true;
}
    3e2c:	2001      	movs	r0, #1
    3e2e:	bd70      	pop	{r4, r5, r6, pc}

00003e30 <_ZN11DHT_Unified8HumidityD0Ev>:
  class Humidity : public Adafruit_Sensor {
    3e30:	b510      	push	{r4, lr}
    3e32:	0004      	movs	r4, r0
    3e34:	f000 fe1c 	bl	4a70 <_ZdlPv>
    3e38:	0020      	movs	r0, r4
    3e3a:	bd10      	pop	{r4, pc}

00003e3c <_ZN11DHT_Unified11TemperatureD0Ev>:
  class Temperature : public Adafruit_Sensor {
    3e3c:	b510      	push	{r4, lr}
    3e3e:	0004      	movs	r4, r0
    3e40:	f000 fe16 	bl	4a70 <_ZdlPv>
    3e44:	0020      	movs	r0, r4
    3e46:	bd10      	pop	{r4, pc}

00003e48 <_ZN11DHT_UnifiedC1Ehhhll>:
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count, int32_t tempSensorId, int32_t humiditySensorId):
    3e48:	b570      	push	{r4, r5, r6, lr}
    3e4a:	0004      	movs	r4, r0
    3e4c:	0015      	movs	r5, r2
  _humidity(this, humiditySensorId)
    3e4e:	f001 fa5f 	bl	5310 <_ZN3DHTC1Ehhh>
  _id(id)
    3e52:	4b07      	ldr	r3, [pc, #28]	; (3e70 <_ZN11DHT_UnifiedC1Ehhhll+0x28>)
  _humidity(this, humiditySensorId)
    3e54:	7525      	strb	r5, [r4, #20]
  _id(id)
    3e56:	3308      	adds	r3, #8
    3e58:	61a3      	str	r3, [r4, #24]
    3e5a:	9b04      	ldr	r3, [sp, #16]
{}
    3e5c:	0020      	movs	r0, r4
  _id(id)
    3e5e:	6263      	str	r3, [r4, #36]	; 0x24
  _id(id)
    3e60:	4b04      	ldr	r3, [pc, #16]	; (3e74 <_ZN11DHT_UnifiedC1Ehhhll+0x2c>)
  _id(id)
    3e62:	6224      	str	r4, [r4, #32]
  _id(id)
    3e64:	3308      	adds	r3, #8
    3e66:	62a3      	str	r3, [r4, #40]	; 0x28
    3e68:	9b05      	ldr	r3, [sp, #20]
    3e6a:	6324      	str	r4, [r4, #48]	; 0x30
    3e6c:	6363      	str	r3, [r4, #52]	; 0x34
{}
    3e6e:	bd70      	pop	{r4, r5, r6, pc}
    3e70:	0000fa04 	.word	0x0000fa04
    3e74:	0000fa20 	.word	0x0000fa20

00003e78 <_ZN11DHT_Unified5beginEv>:
void DHT_Unified::begin() {
    3e78:	b510      	push	{r4, lr}
  _dht.begin();
    3e7a:	f001 fa5d 	bl	5338 <_ZN3DHT5beginEv>
}
    3e7e:	bd10      	pop	{r4, pc}

00003e80 <_ZN11DHT_Unified7setNameEP8sensor_t>:
void DHT_Unified::setName(sensor_t* sensor) {
    3e80:	b510      	push	{r4, lr}
  switch(_type) {
    3e82:	7d02      	ldrb	r2, [r0, #20]
void DHT_Unified::setName(sensor_t* sensor) {
    3e84:	000c      	movs	r4, r1
  switch(_type) {
    3e86:	2a15      	cmp	r2, #21
    3e88:	d007      	beq.n	3e9a <_ZN11DHT_Unified7setNameEP8sensor_t+0x1a>
    3e8a:	2a16      	cmp	r2, #22
    3e8c:	d00d      	beq.n	3eaa <_ZN11DHT_Unified7setNameEP8sensor_t+0x2a>
      strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    3e8e:	4908      	ldr	r1, [pc, #32]	; (3eb0 <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>)
  switch(_type) {
    3e90:	2a0b      	cmp	r2, #11
    3e92:	d004      	beq.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    3e94:	220b      	movs	r2, #11
    3e96:	4907      	ldr	r1, [pc, #28]	; (3eb4 <_ZN11DHT_Unified7setNameEP8sensor_t+0x34>)
    3e98:	e001      	b.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    3e9a:	220b      	movs	r2, #11
    3e9c:	4906      	ldr	r1, [pc, #24]	; (3eb8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x38>)
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    3e9e:	0020      	movs	r0, r4
    3ea0:	f008 fdcc 	bl	ca3c <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
    3ea4:	2300      	movs	r3, #0
    3ea6:	72e3      	strb	r3, [r4, #11]
}
    3ea8:	bd10      	pop	{r4, pc}
      strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    3eaa:	220b      	movs	r2, #11
    3eac:	4903      	ldr	r1, [pc, #12]	; (3ebc <_ZN11DHT_Unified7setNameEP8sensor_t+0x3c>)
    3eae:	e7f6      	b.n	3e9e <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
    3eb0:	0000f9ec 	.word	0x0000f9ec
    3eb4:	0000f9fe 	.word	0x0000f9fe
    3eb8:	0000f9f2 	.word	0x0000f9f2
    3ebc:	0000f9f8 	.word	0x0000f9f8

00003ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
  switch(_type) {
    3ec0:	7d03      	ldrb	r3, [r0, #20]
    3ec2:	2b15      	cmp	r3, #21
    3ec4:	d006      	beq.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    3ec6:	2b16      	cmp	r3, #22
    3ec8:	d004      	beq.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    3eca:	2b0b      	cmp	r3, #11
    3ecc:	d102      	bne.n	3ed4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
      sensor->min_delay = 1000000L;  // 1 second (in microseconds)
    3ece:	4b02      	ldr	r3, [pc, #8]	; (3ed8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x18>)
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    3ed0:	624b      	str	r3, [r1, #36]	; 0x24
}
    3ed2:	4770      	bx	lr
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    3ed4:	4b01      	ldr	r3, [pc, #4]	; (3edc <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>)
    3ed6:	e7fb      	b.n	3ed0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x10>
    3ed8:	000f4240 	.word	0x000f4240
    3edc:	001e8480 	.word	0x001e8480

00003ee0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:
void DHT_Unified::Temperature::getSensor(sensor_t* sensor) {
    3ee0:	b570      	push	{r4, r5, r6, lr}
    3ee2:	000c      	movs	r4, r1
    3ee4:	0005      	movs	r5, r0
  memset(sensor, 0, sizeof(sensor_t));
    3ee6:	2228      	movs	r2, #40	; 0x28
    3ee8:	2100      	movs	r1, #0
    3eea:	0020      	movs	r0, r4
    3eec:	f007 fc6c 	bl	b7c8 <memset>
  _parent->setName(sensor);
    3ef0:	0021      	movs	r1, r4
    3ef2:	68a8      	ldr	r0, [r5, #8]
    3ef4:	f7ff ffc4 	bl	3e80 <_ZN11DHT_Unified7setNameEP8sensor_t>
  sensor->version         = DHT_SENSOR_VERSION;
    3ef8:	2301      	movs	r3, #1
    3efa:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    3efc:	68eb      	ldr	r3, [r5, #12]
  _parent->setMinDelay(sensor);
    3efe:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    3f00:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3f02:	230d      	movs	r3, #13
  _parent->setMinDelay(sensor);
    3f04:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    3f06:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    3f08:	f7ff ffda 	bl	3ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    3f0c:	68ab      	ldr	r3, [r5, #8]
    3f0e:	7d1a      	ldrb	r2, [r3, #20]
    3f10:	2a15      	cmp	r2, #21
    3f12:	d00b      	beq.n	3f2c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4c>
    3f14:	2a16      	cmp	r2, #22
    3f16:	d00f      	beq.n	3f38 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x58>
    3f18:	2300      	movs	r3, #0
    3f1a:	2a0b      	cmp	r2, #11
    3f1c:	d10e      	bne.n	3f3c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x5c>
      sensor->min_value   = 0.0F;
    3f1e:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 2.0F;
    3f20:	2380      	movs	r3, #128	; 0x80
      sensor->max_value   = 50.0F;
    3f22:	4a08      	ldr	r2, [pc, #32]	; (3f44 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x64>)
      sensor->resolution  = 2.0F;
    3f24:	05db      	lsls	r3, r3, #23
      sensor->max_value   = 50.0F;
    3f26:	61a2      	str	r2, [r4, #24]
      sensor->resolution  = 0.0F;
    3f28:	6223      	str	r3, [r4, #32]
}
    3f2a:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 80.0F;
    3f2c:	4b06      	ldr	r3, [pc, #24]	; (3f48 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x68>)
      sensor->max_value   = 125.0F;
    3f2e:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = -40.0F;
    3f30:	4b06      	ldr	r3, [pc, #24]	; (3f4c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6c>)
    3f32:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    3f34:	4b06      	ldr	r3, [pc, #24]	; (3f50 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>)
    3f36:	e7f7      	b.n	3f28 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
      sensor->max_value   = 125.0F;
    3f38:	4b06      	ldr	r3, [pc, #24]	; (3f54 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x74>)
    3f3a:	e7f8      	b.n	3f2e <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4e>
      sensor->max_value   = 0.0F;
    3f3c:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3f3e:	61e3      	str	r3, [r4, #28]
    3f40:	e7f2      	b.n	3f28 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	42480000 	.word	0x42480000
    3f48:	42a00000 	.word	0x42a00000
    3f4c:	c2200000 	.word	0xc2200000
    3f50:	3dcccccd 	.word	0x3dcccccd
    3f54:	42fa0000 	.word	0x42fa0000

00003f58 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

void DHT_Unified::Humidity::getSensor(sensor_t* sensor) {
    3f58:	b570      	push	{r4, r5, r6, lr}
    3f5a:	000c      	movs	r4, r1
    3f5c:	0005      	movs	r5, r0
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    3f5e:	2228      	movs	r2, #40	; 0x28
    3f60:	2100      	movs	r1, #0
    3f62:	0020      	movs	r0, r4
    3f64:	f007 fc30 	bl	b7c8 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    3f68:	0021      	movs	r1, r4
    3f6a:	68a8      	ldr	r0, [r5, #8]
    3f6c:	f7ff ff88 	bl	3e80 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version         = DHT_SENSOR_VERSION;
    3f70:	2301      	movs	r3, #1
    3f72:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    3f74:	68eb      	ldr	r3, [r5, #12]
  // Set type and characteristics.
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
    3f76:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    3f78:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3f7a:	230c      	movs	r3, #12
  _parent->setMinDelay(sensor);
    3f7c:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    3f7e:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    3f80:	f7ff ff9e 	bl	3ec0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    3f84:	68ab      	ldr	r3, [r5, #8]
    3f86:	7d1b      	ldrb	r3, [r3, #20]
    3f88:	2b15      	cmp	r3, #21
    3f8a:	d00a      	beq.n	3fa2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    3f8c:	2b16      	cmp	r3, #22
    3f8e:	d008      	beq.n	3fa2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    3f90:	2b0b      	cmp	r3, #11
    3f92:	d10c      	bne.n	3fae <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x56>
    case DHT11:
      sensor->max_value   = 80.0F;
    3f94:	4b08      	ldr	r3, [pc, #32]	; (3fb8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x60>)
    3f96:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 20.0F;
    3f98:	4b08      	ldr	r3, [pc, #32]	; (3fbc <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x64>)
    3f9a:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 5.0F;
    3f9c:	4b08      	ldr	r3, [pc, #32]	; (3fc0 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x68>)
      break;
    default:
      // Unknown type, default to 0.
      sensor->max_value   = 0.0F;
      sensor->min_value   = 0.0F;
      sensor->resolution  = 0.0F;
    3f9e:	6223      	str	r3, [r4, #32]
      break;
  }
}
    3fa0:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 100.0F;
    3fa2:	4b08      	ldr	r3, [pc, #32]	; (3fc4 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6c>)
    3fa4:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3fa6:	2300      	movs	r3, #0
    3fa8:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    3faa:	4b07      	ldr	r3, [pc, #28]	; (3fc8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x70>)
    3fac:	e7f7      	b.n	3f9e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
      sensor->max_value   = 0.0F;
    3fae:	2300      	movs	r3, #0
    3fb0:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    3fb2:	61e3      	str	r3, [r4, #28]
    3fb4:	e7f3      	b.n	3f9e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	42a00000 	.word	0x42a00000
    3fbc:	41a00000 	.word	0x41a00000
    3fc0:	40a00000 	.word	0x40a00000
    3fc4:	42c80000 	.word	0x42c80000
    3fc8:	3dcccccd 	.word	0x3dcccccd

00003fcc <_ZN17RunningStatistics13setWindowSecsEf>:
RunningStatistics::RunningStatistics() {
  setWindowSecs( 1 );   // setup with one second average
  setInitialValue( 0 ); // start with zero
}

void RunningStatistics::setWindowSecs( float windowSecs ) {
    3fcc:	b510      	push	{r4, lr}
    3fce:	0004      	movs	r4, r0
  AverageSecs = windowSecs;
    3fd0:	c002      	stmia	r0!, {r1}
  
  averageValue.setRiseTime( AverageSecs );
    3fd2:	f001 fbb9 	bl	5748 <_ZN20FilterOnePoleCascade11setRiseTimeEf>
  averageSquareValue.setRiseTime( AverageSecs );
    3fd6:	0020      	movs	r0, r4
    3fd8:	6821      	ldr	r1, [r4, #0]
    3fda:	3044      	adds	r0, #68	; 0x44
    3fdc:	f001 fbb4 	bl	5748 <_ZN20FilterOnePoleCascade11setRiseTimeEf>
}
    3fe0:	bd10      	pop	{r4, pc}

00003fe2 <_ZN17RunningStatistics15setInitialValueEff>:

void RunningStatistics::setInitialValue( float initialMean, float initialSigma ) {
    3fe2:	b570      	push	{r4, r5, r6, lr}
    3fe4:	1c0d      	adds	r5, r1, #0
    3fe6:	0004      	movs	r4, r0
  averageValue.setToNewValue( initialMean );
    3fe8:	3004      	adds	r0, #4
void RunningStatistics::setInitialValue( float initialMean, float initialSigma ) {
    3fea:	1c16      	adds	r6, r2, #0
  averageValue.setToNewValue( initialMean );
    3fec:	f001 fbc9 	bl	5782 <_ZN20FilterOnePoleCascade13setToNewValueEf>
  averageSquareValue.setToNewValue( sq(initialMean) + sq(initialSigma ) );
    3ff0:	1c29      	adds	r1, r5, #0
    3ff2:	1c28      	adds	r0, r5, #0
    3ff4:	f005 f824 	bl	9040 <__aeabi_fmul>
    3ff8:	1c31      	adds	r1, r6, #0
    3ffa:	1c05      	adds	r5, r0, #0
    3ffc:	1c30      	adds	r0, r6, #0
    3ffe:	f005 f81f 	bl	9040 <__aeabi_fmul>
    4002:	1c01      	adds	r1, r0, #0
    4004:	1c28      	adds	r0, r5, #0
    4006:	f004 fc99 	bl	893c <__aeabi_fadd>
    400a:	1c01      	adds	r1, r0, #0
    400c:	0020      	movs	r0, r4
    400e:	3044      	adds	r0, #68	; 0x44
    4010:	f001 fbb7 	bl	5782 <_ZN20FilterOnePoleCascade13setToNewValueEf>
}
    4014:	bd70      	pop	{r4, r5, r6, pc}

00004016 <_ZN17RunningStatisticsC1Ev>:
RunningStatistics::RunningStatistics() {
    4016:	b570      	push	{r4, r5, r6, lr}
    4018:	26fe      	movs	r6, #254	; 0xfe
    401a:	2500      	movs	r5, #0
    401c:	0004      	movs	r4, r0
    401e:	05b6      	lsls	r6, r6, #22
    4020:	1c2a      	adds	r2, r5, #0
    4022:	1c31      	adds	r1, r6, #0
    4024:	3004      	adds	r0, #4
    4026:	f001 fb67 	bl	56f8 <_ZN20FilterOnePoleCascadeC1Eff>
    402a:	0020      	movs	r0, r4
    402c:	1c2a      	adds	r2, r5, #0
    402e:	1c31      	adds	r1, r6, #0
    4030:	3044      	adds	r0, #68	; 0x44
    4032:	f001 fb61 	bl	56f8 <_ZN20FilterOnePoleCascadeC1Eff>
  setWindowSecs( 1 );   // setup with one second average
    4036:	1c31      	adds	r1, r6, #0
    4038:	0020      	movs	r0, r4
    403a:	f7ff ffc7 	bl	3fcc <_ZN17RunningStatistics13setWindowSecsEf>
  setInitialValue( 0 ); // start with zero
    403e:	1c2a      	adds	r2, r5, #0
    4040:	1c29      	adds	r1, r5, #0
    4042:	0020      	movs	r0, r4
    4044:	f7ff ffcd 	bl	3fe2 <_ZN17RunningStatistics15setInitialValueEff>
}
    4048:	0020      	movs	r0, r4
    404a:	bd70      	pop	{r4, r5, r6, pc}

0000404c <_ZN17RunningStatistics5inputEf>:

void RunningStatistics::input( float inVal ) {
    404c:	b570      	push	{r4, r5, r6, lr}
    404e:	1c0d      	adds	r5, r1, #0
    4050:	0004      	movs	r4, r0
  averageValue.input(inVal);              // calculates running average
    4052:	3004      	adds	r0, #4
    4054:	f001 fb88 	bl	5768 <_ZN20FilterOnePoleCascade5inputEf>
  averageSquareValue.input(inVal*inVal);  // calculates running average of square
    4058:	1c29      	adds	r1, r5, #0
    405a:	1c28      	adds	r0, r5, #0
    405c:	f004 fff0 	bl	9040 <__aeabi_fmul>
    4060:	1c01      	adds	r1, r0, #0
    4062:	0020      	movs	r0, r4
    4064:	3044      	adds	r0, #68	; 0x44
    4066:	f001 fb7f 	bl	5768 <_ZN20FilterOnePoleCascade5inputEf>
}
    406a:	bd70      	pop	{r4, r5, r6, pc}

0000406c <_ZN17RunningStatistics8varianceEv>:
  
float RunningStatistics::mean() {
  return averageValue.output();
}
  
float RunningStatistics::variance() {
    406c:	b570      	push	{r4, r5, r6, lr}
    406e:	0004      	movs	r4, r0
  float var = averageSquareValue.output() - averageValue.output()*averageValue.output();
    4070:	3044      	adds	r0, #68	; 0x44
    4072:	f001 fb8d 	bl	5790 <_ZN20FilterOnePoleCascade6outputEv>
    4076:	3404      	adds	r4, #4
    4078:	1c05      	adds	r5, r0, #0
    407a:	0020      	movs	r0, r4
    407c:	f001 fb88 	bl	5790 <_ZN20FilterOnePoleCascade6outputEv>
    4080:	1c06      	adds	r6, r0, #0
    4082:	0020      	movs	r0, r4
    4084:	f001 fb84 	bl	5790 <_ZN20FilterOnePoleCascade6outputEv>
    4088:	1c01      	adds	r1, r0, #0
    408a:	1c30      	adds	r0, r6, #0
    408c:	f004 ffd8 	bl	9040 <__aeabi_fmul>
    4090:	1c01      	adds	r1, r0, #0
    4092:	1c28      	adds	r0, r5, #0
    4094:	f005 f8f4 	bl	9280 <__aeabi_fsub>
    
  // because of the filtering, it's possible that this could be negative ... check!
  if( var < 0 ) var = 0;
    4098:	2100      	movs	r1, #0
  float var = averageSquareValue.output() - averageValue.output()*averageValue.output();
    409a:	1c04      	adds	r4, r0, #0
  if( var < 0 ) var = 0;
    409c:	f004 fbf0 	bl	8880 <__aeabi_fcmplt>
    40a0:	2800      	cmp	r0, #0
    40a2:	d000      	beq.n	40a6 <_ZN17RunningStatistics8varianceEv+0x3a>
    40a4:	2400      	movs	r4, #0
    
  return var;
}
    40a6:	1c20      	adds	r0, r4, #0
    40a8:	bd70      	pop	{r4, r5, r6, pc}

000040aa <_ZN17RunningStatistics5sigmaEv>:
  
float RunningStatistics::sigma() {
    40aa:	b510      	push	{r4, lr}
  
#ifdef ARM_FLOAT
  return sqrtf(variance());
#else
  return sqrt(variance());
    40ac:	f7ff ffde 	bl	406c <_ZN17RunningStatistics8varianceEv>
  { return __builtin_sqrtf(__x); }
    40b0:	f003 ffea 	bl	8088 <sqrtf>
#endif

}
    40b4:	bd10      	pop	{r4, pc}
	...

000040b8 <_Z13rtc_time_initl>:
 *
 * @brief Init the RTC time
 *
 */
error_t rtc_time_init(int32_t zone)
{
    40b8:	b513      	push	{r0, r1, r4, lr}
	// Initialize RTC clock code
	rtc.begin();
    40ba:	4c0a      	ldr	r4, [pc, #40]	; (40e4 <_Z13rtc_time_initl+0x2c>)
    40bc:	0020      	movs	r0, r4
    40be:	f001 fc77 	bl	59b0 <_ZN7RTCZero5beginEv>
	
	// Set default time
	struct rtc_clockreg_value time;
	time.day = 1;
    40c2:	466a      	mov	r2, sp
    40c4:	2301      	movs	r3, #1
    40c6:	70d3      	strb	r3, [r2, #3]
	time.month = 1;
    40c8:	7113      	strb	r3, [r2, #4]
	time.year = 2000;
    40ca:	23fa      	movs	r3, #250	; 0xfa
    40cc:	00db      	lsls	r3, r3, #3
    40ce:	80d3      	strh	r3, [r2, #6]
	time.hour = 0;
    40d0:	2300      	movs	r3, #0
	time.minute = 0;
	time.second = 0;
	
	rtc.rtc_set_time(&time);
    40d2:	0020      	movs	r0, r4
    40d4:	4669      	mov	r1, sp
	time.hour = 0;
    40d6:	7093      	strb	r3, [r2, #2]
	time.minute = 0;
    40d8:	7053      	strb	r3, [r2, #1]
	time.second = 0;
    40da:	7013      	strb	r3, [r2, #0]
	rtc.rtc_set_time(&time);
    40dc:	f001 fc10 	bl	5900 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
	
	// Set the timezone
	set_time_zone(zone);
}
    40e0:	bd16      	pop	{r1, r2, r4, pc}
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	2000092d 	.word	0x2000092d

000040e8 <_Z13get_rtc_epochv>:
 * @brief Get the RTC time in local time
 *
 * 
 */
time_t get_rtc_epoch()
{
    40e8:	b510      	push	{r4, lr}
	// Convert to UTC
	time_t epoch;
	epoch = rtc.getEpoch();
    40ea:	4802      	ldr	r0, [pc, #8]	; (40f4 <_Z13get_rtc_epochv+0xc>)
    40ec:	f001 fbbe 	bl	586c <_ZN7RTCZero8getEpochEv>
	return epoch;

} // get_rtc_time()
    40f0:	bd10      	pop	{r4, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	2000092d 	.word	0x2000092d

000040f8 <_Z18print_current_timev>:
* Prints the current time
* The time is set to 0 during boot
*
*/
void print_current_time(void)
{
    40f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    40fa:	4c0c      	ldr	r4, [pc, #48]	; (412c <_Z18print_current_timev+0x34>)
{
    40fc:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    40fe:	0020      	movs	r0, r4
    4100:	f001 fb62 	bl	57c8 <_ZN7RTCZero10getSecondsEv>
    4104:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    4106:	0020      	movs	r0, r4
    4108:	f001 fb64 	bl	57d4 <_ZN7RTCZero10getMinutesEv>
    410c:	0005      	movs	r5, r0
	c = rtc.getHours();
    410e:	0020      	movs	r0, r4
    4110:	f001 fb66 	bl	57e0 <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    4114:	002b      	movs	r3, r5
	c = rtc.getHours();
    4116:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    4118:	4905      	ldr	r1, [pc, #20]	; (4130 <_Z18print_current_timev+0x38>)
	a = rtc.getSeconds();
    411a:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    411c:	a802      	add	r0, sp, #8
    411e:	f008 fc1f 	bl	c960 <siprintf>
	println(buffer);
    4122:	a802      	add	r0, sp, #8
    4124:	f000 f936 	bl	4394 <_Z7printlnPKc>
	
} // print_current_time
    4128:	b042      	add	sp, #264	; 0x108
    412a:	bd70      	pop	{r4, r5, r6, pc}
    412c:	2000092d 	.word	0x2000092d
    4130:	0000fa77 	.word	0x0000fa77

00004134 <_Z14print_log_timev>:
* Prints the current time specifically for logging
* The time is set to 0 during boot
*
*/
void print_log_time(void)
{
    4134:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    4136:	4c0c      	ldr	r4, [pc, #48]	; (4168 <_Z14print_log_timev+0x34>)
{
    4138:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    413a:	0020      	movs	r0, r4
    413c:	f001 fb44 	bl	57c8 <_ZN7RTCZero10getSecondsEv>
    4140:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    4142:	0020      	movs	r0, r4
    4144:	f001 fb46 	bl	57d4 <_ZN7RTCZero10getMinutesEv>
    4148:	0005      	movs	r5, r0
	c = rtc.getHours();
    414a:	0020      	movs	r0, r4
    414c:	f001 fb48 	bl	57e0 <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4150:	002b      	movs	r3, r5
	c = rtc.getHours();
    4152:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4154:	4905      	ldr	r1, [pc, #20]	; (416c <_Z14print_log_timev+0x38>)
	a = rtc.getSeconds();
    4156:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4158:	a802      	add	r0, sp, #8
    415a:	f008 fc01 	bl	c960 <siprintf>
	print(buffer);
    415e:	a802      	add	r0, sp, #8
    4160:	f000 f902 	bl	4368 <_Z5printPKc>
	
} // print_current_time
    4164:	b042      	add	sp, #264	; 0x108
    4166:	bd70      	pop	{r4, r5, r6, pc}
    4168:	2000092d 	.word	0x2000092d
    416c:	0000fa3c 	.word	0x0000fa3c

00004170 <_Z18print_current_datev>:
* Prints the current date
* The date is set to 0 during boot
*
*/
void print_current_date(void)
{
    4170:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getYear();
    4172:	4c0c      	ldr	r4, [pc, #48]	; (41a4 <_Z18print_current_datev+0x34>)
{
    4174:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getYear();
    4176:	0020      	movs	r0, r4
    4178:	f001 fb44 	bl	5804 <_ZN7RTCZero7getYearEv>
    417c:	0006      	movs	r6, r0
	b = rtc.getDay();
    417e:	0020      	movs	r0, r4
    4180:	f001 fb34 	bl	57ec <_ZN7RTCZero6getDayEv>
    4184:	0005      	movs	r5, r0
	c = rtc.getMonth();
    4186:	0020      	movs	r0, r4
    4188:	f001 fb36 	bl	57f8 <_ZN7RTCZero8getMonthEv>
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    418c:	002b      	movs	r3, r5
	c = rtc.getMonth();
    418e:	0002      	movs	r2, r0
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4190:	4905      	ldr	r1, [pc, #20]	; (41a8 <_Z18print_current_datev+0x38>)
	a = rtc.getYear();
    4192:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4194:	a802      	add	r0, sp, #8
    4196:	f008 fbe3 	bl	c960 <siprintf>
	println(buffer);
    419a:	a802      	add	r0, sp, #8
    419c:	f000 f8fa 	bl	4394 <_Z7printlnPKc>
	
} // print_current_date
    41a0:	b042      	add	sp, #264	; 0x108
    41a2:	bd70      	pop	{r4, r5, r6, pc}
    41a4:	2000092d 	.word	0x2000092d
    41a8:	0000fa53 	.word	0x0000fa53

000041ac <_GLOBAL__sub_I_rtc>:
    41ac:	b510      	push	{r4, lr}
RTCZero rtc;
    41ae:	4802      	ldr	r0, [pc, #8]	; (41b8 <_GLOBAL__sub_I_rtc+0xc>)
    41b0:	f001 fafc 	bl	57ac <_ZN7RTCZeroC1Ev>
} // print_current_date
    41b4:	bd10      	pop	{r4, pc}
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	2000092d 	.word	0x2000092d

000041bc <_Z10dlog_leveli>:


void dlog_level(int level)
{
    /* force level bounds */
    level = level >= numlevels ? numlevels - 1 : level;
    41bc:	2807      	cmp	r0, #7
    41be:	dd00      	ble.n	41c2 <_Z10dlog_leveli+0x6>
    41c0:	2007      	movs	r0, #7
    level = level < 0 ? 0 : level;
    41c2:	43c3      	mvns	r3, r0
    41c4:	17db      	asrs	r3, r3, #31
    41c6:	4018      	ands	r0, r3

    log_level = level;
    41c8:	4b01      	ldr	r3, [pc, #4]	; (41d0 <_Z10dlog_leveli+0x14>)
    41ca:	6018      	str	r0, [r3, #0]
} // dlog_level
    41cc:	4770      	bx	lr
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	20000044 	.word	0x20000044

000041d4 <_Z8log_initP7Serial_mm>:
{
    41d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pSerMon = pSerial;
    41d6:	4e0e      	ldr	r6, [pc, #56]	; (4210 <_Z8log_initP7Serial_mm+0x3c>)
{
    41d8:	0017      	movs	r7, r2
	pSerMon = pSerial;
    41da:	6030      	str	r0, [r6, #0]
	SerMon.begin(baud);
    41dc:	f001 f818 	bl	5210 <_ZN7Serial_5beginEm>
	log_enabled = false;
    41e0:	2300      	movs	r3, #0
    41e2:	2408      	movs	r4, #8
    41e4:	4d0b      	ldr	r5, [pc, #44]	; (4214 <_Z8log_initP7Serial_mm+0x40>)
    41e6:	702b      	strb	r3, [r5, #0]
		if (!SerMon){
    41e8:	6830      	ldr	r0, [r6, #0]
    41ea:	f001 f813 	bl	5214 <_ZN7Serial_cvbEv>
    41ee:	2800      	cmp	r0, #0
    41f0:	d10a      	bne.n	4208 <_Z8log_initP7Serial_mm+0x34>
			delay(2000);
    41f2:	20fa      	movs	r0, #250	; 0xfa
    41f4:	3c01      	subs	r4, #1
    41f6:	00c0      	lsls	r0, r0, #3
    41f8:	f7fe fa6a 	bl	26d0 <delay>
	for (int indx=0 ; indx < 8 ; indx++) {
    41fc:	2c00      	cmp	r4, #0
    41fe:	d1f3      	bne.n	41e8 <_Z8log_initP7Serial_mm+0x14>
	dlog_level(log_level);
    4200:	0038      	movs	r0, r7
    4202:	f7ff ffdb 	bl	41bc <_Z10dlog_leveli>
} // log_init
    4206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_enabled = true;
    4208:	2301      	movs	r3, #1
    420a:	702b      	strb	r3, [r5, #0]
			break;
    420c:	e7f8      	b.n	4200 <_Z8log_initP7Serial_mm+0x2c>
    420e:	46c0      	nop			; (mov r8, r8)
    4210:	20000930 	.word	0x20000930
    4214:	2000092e 	.word	0x2000092e

00004218 <_Z4dlogiPKcz>:


void dlog(int level, const char *format, ...)
{
    4218:	b40e      	push	{r1, r2, r3}
    421a:	b500      	push	{lr}
    va_list args;
	char buffer[PRINTF_LEN];
	
	// Is logging enabled?
	if (!log_enabled)
    421c:	4b0c      	ldr	r3, [pc, #48]	; (4250 <_Z4dlogiPKcz+0x38>)
{
    421e:	b0c2      	sub	sp, #264	; 0x108
	if (!log_enabled)
    4220:	781b      	ldrb	r3, [r3, #0]
    4222:	2b00      	cmp	r3, #0
    4224:	d010      	beq.n	4248 <_Z4dlogiPKcz+0x30>
	{
		return;
	}
   
    // Check debug log
    if (level > log_level) 
    4226:	4b0b      	ldr	r3, [pc, #44]	; (4254 <_Z4dlogiPKcz+0x3c>)
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	4283      	cmp	r3, r0
    422c:	db0c      	blt.n	4248 <_Z4dlogiPKcz+0x30>
	{
        return;
    }

	// Print time
	print_log_time();
    422e:	f7ff ff81 	bl	4134 <_Z14print_log_timev>

	// Print to serial port using the format
	va_start( args, format );
    4232:	aa44      	add	r2, sp, #272	; 0x110
	vsprintf( buffer,format, args );
    4234:	9943      	ldr	r1, [sp, #268]	; 0x10c
    4236:	a802      	add	r0, sp, #8
	va_start( args, format );
    4238:	9201      	str	r2, [sp, #4]
	vsprintf( buffer,format, args );
    423a:	f008 ff03 	bl	d044 <vsiprintf>
	SerMon.println(buffer);
    423e:	4b06      	ldr	r3, [pc, #24]	; (4258 <_Z4dlogiPKcz+0x40>)
    4240:	a902      	add	r1, sp, #8
    4242:	6818      	ldr	r0, [r3, #0]
    4244:	f000 fc4c 	bl	4ae0 <_ZN5Print7printlnEPKc>
	va_end(args);

} // dlog
    4248:	b042      	add	sp, #264	; 0x108
    424a:	bc08      	pop	{r3}
    424c:	b003      	add	sp, #12
    424e:	4718      	bx	r3
    4250:	2000092e 	.word	0x2000092e
    4254:	20000044 	.word	0x20000044
    4258:	20000930 	.word	0x20000930

0000425c <_Z5ddumpiPKcPKvi>:


void ddump(int level, const char *label, const void *data, int datalen)
{
    425c:	b5f0      	push	{r4, r5, r6, r7, lr}
    425e:	001f      	movs	r7, r3
    const uint8_t *b = (const uint8_t *) data;
	char buffer[PRINTF_LEN];
    int i;
    
    // Is logging enabled?
    if (!log_enabled)
    4260:	4b16      	ldr	r3, [pc, #88]	; (42bc <_Z5ddumpiPKcPKvi+0x60>)
{
    4262:	b0c1      	sub	sp, #260	; 0x104
    if (!log_enabled)
    4264:	781b      	ldrb	r3, [r3, #0]
{
    4266:	000c      	movs	r4, r1
    4268:	0016      	movs	r6, r2
    if (!log_enabled)
    426a:	2b00      	cmp	r3, #0
    426c:	d024      	beq.n	42b8 <_Z5ddumpiPKcPKvi+0x5c>
    {
	    return;
    }

    if (level > log_level) 
    426e:	4b14      	ldr	r3, [pc, #80]	; (42c0 <_Z5ddumpiPKcPKvi+0x64>)
    4270:	681b      	ldr	r3, [r3, #0]
    4272:	4283      	cmp	r3, r0
    4274:	db20      	blt.n	42b8 <_Z5ddumpiPKcPKvi+0x5c>
	{
        return;
    }

	// Print time
	print_log_time();
    4276:	f7ff ff5d 	bl	4134 <_Z14print_log_timev>
    427a:	4d12      	ldr	r5, [pc, #72]	; (42c4 <_Z5ddumpiPKcPKvi+0x68>)

    if (label) 
    427c:	2c00      	cmp	r4, #0
    427e:	d008      	beq.n	4292 <_Z5ddumpiPKcPKvi+0x36>
	{
		sprintf( buffer, "%s:", label );
    4280:	4911      	ldr	r1, [pc, #68]	; (42c8 <_Z5ddumpiPKcPKvi+0x6c>)
    4282:	0022      	movs	r2, r4
    4284:	4668      	mov	r0, sp
    4286:	f008 fb6b 	bl	c960 <siprintf>
        SerMon.print(buffer);
    428a:	4669      	mov	r1, sp
    428c:	6828      	ldr	r0, [r5, #0]
    428e:	f000 fc15 	bl	4abc <_ZN5Print5printEPKc>
{
    4292:	0034      	movs	r4, r6
    }

    for(i = 0; i < datalen; i++) 
    4294:	1ba3      	subs	r3, r4, r6
    4296:	42bb      	cmp	r3, r7
    4298:	da0a      	bge.n	42b0 <_Z5ddumpiPKcPKvi+0x54>
	{
		sprintf( buffer, " %02x", b[i] );
    429a:	7822      	ldrb	r2, [r4, #0]
    429c:	490b      	ldr	r1, [pc, #44]	; (42cc <_Z5ddumpiPKcPKvi+0x70>)
    429e:	4668      	mov	r0, sp
    42a0:	f008 fb5e 	bl	c960 <siprintf>
        SerMon.print(buffer);
    42a4:	4669      	mov	r1, sp
    42a6:	6828      	ldr	r0, [r5, #0]
    42a8:	f000 fc08 	bl	4abc <_ZN5Print5printEPKc>
    42ac:	3401      	adds	r4, #1
    42ae:	e7f1      	b.n	4294 <_Z5ddumpiPKcPKvi+0x38>
    }
    
    SerMon.println("");
    42b0:	4907      	ldr	r1, [pc, #28]	; (42d0 <_Z5ddumpiPKcPKvi+0x74>)
    42b2:	6828      	ldr	r0, [r5, #0]
    42b4:	f000 fc14 	bl	4ae0 <_ZN5Print7printlnEPKc>

} // ddump
    42b8:	b041      	add	sp, #260	; 0x104
    42ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42bc:	2000092e 	.word	0x2000092e
    42c0:	20000044 	.word	0x20000044
    42c4:	20000930 	.word	0x20000930
    42c8:	0000fad6 	.word	0x0000fad6
    42cc:	0000fada 	.word	0x0000fada
    42d0:	0000fd92 	.word	0x0000fd92

000042d4 <_Z7log_msgPKcPKvii>:


void log_msg(const char *label, const void *data, int datalen, int eol)
{
    42d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42d6:	9301      	str	r3, [sp, #4]
    static char llabel[64];
    static int llen;
    static uint8_t line[256];
    
    // Is logging enabled?
    if (!log_enabled)
    42d8:	4b1e      	ldr	r3, [pc, #120]	; (4354 <_Z7log_msgPKcPKvii+0x80>)
{
    42da:	0006      	movs	r6, r0
    if (!log_enabled)
    42dc:	781b      	ldrb	r3, [r3, #0]
{
    42de:	9100      	str	r1, [sp, #0]
    42e0:	0014      	movs	r4, r2
    if (!log_enabled)
    42e2:	2b00      	cmp	r3, #0
    42e4:	d034      	beq.n	4350 <_Z7log_msgPKcPKvii+0x7c>
    {
	    return;
    }

    if ( LOG_DEBUG > log_level ) 
    42e6:	4b1c      	ldr	r3, [pc, #112]	; (4358 <_Z7log_msgPKcPKvii+0x84>)
    42e8:	681b      	ldr	r3, [r3, #0]
    42ea:	2b06      	cmp	r3, #6
    42ec:	dd30      	ble.n	4350 <_Z7log_msgPKcPKvii+0x7c>
	{
        return;
    }

    if ((!eol || llen) && (llen + datalen < sizeof(line))) {
    42ee:	9b01      	ldr	r3, [sp, #4]
    42f0:	4d1a      	ldr	r5, [pc, #104]	; (435c <_Z7log_msgPKcPKvii+0x88>)
    42f2:	2b00      	cmp	r3, #0
    42f4:	d002      	beq.n	42fc <_Z7log_msgPKcPKvii+0x28>
    42f6:	682b      	ldr	r3, [r5, #0]
    42f8:	2b00      	cmp	r3, #0
    42fa:	d012      	beq.n	4322 <_Z7log_msgPKcPKvii+0x4e>
    42fc:	682b      	ldr	r3, [r5, #0]
    42fe:	18e7      	adds	r7, r4, r3
    4300:	2fff      	cmp	r7, #255	; 0xff
    4302:	d80e      	bhi.n	4322 <_Z7log_msgPKcPKvii+0x4e>
        /* buffer if we can */
        memcpy(line + llen, data, datalen);
    4304:	4816      	ldr	r0, [pc, #88]	; (4360 <_Z7log_msgPKcPKvii+0x8c>)
    4306:	0022      	movs	r2, r4
    4308:	18c0      	adds	r0, r0, r3
    430a:	9900      	ldr	r1, [sp, #0]
    430c:	f007 fa41 	bl	b792 <memcpy>
        llen += datalen;
        datalen = 0;    /* consumed */
    4310:	1e34      	subs	r4, r6, #0
        llen += datalen;
    4312:	602f      	str	r7, [r5, #0]
        if (label) {
    4314:	d005      	beq.n	4322 <_Z7log_msgPKcPKvii+0x4e>
            strncpy(llabel, label, sizeof(llabel)-1);
    4316:	223f      	movs	r2, #63	; 0x3f
    4318:	0031      	movs	r1, r6
    431a:	4812      	ldr	r0, [pc, #72]	; (4364 <_Z7log_msgPKcPKvii+0x90>)
    431c:	f008 fb8e 	bl	ca3c <strncpy>
        datalen = 0;    /* consumed */
    4320:	2400      	movs	r4, #0
        }
    }

    if (eol || datalen) {
    4322:	9b01      	ldr	r3, [sp, #4]
    4324:	4323      	orrs	r3, r4
    4326:	d013      	beq.n	4350 <_Z7log_msgPKcPKvii+0x7c>
        /* flush */
        if (llen) {
    4328:	682b      	ldr	r3, [r5, #0]
    432a:	2b00      	cmp	r3, #0
    432c:	d008      	beq.n	4340 <_Z7log_msgPKcPKvii+0x6c>
            ddump(LOG_DEBUG, llabel, line, llen);
    432e:	4f0d      	ldr	r7, [pc, #52]	; (4364 <_Z7log_msgPKcPKvii+0x90>)
    4330:	4a0b      	ldr	r2, [pc, #44]	; (4360 <_Z7log_msgPKcPKvii+0x8c>)
    4332:	0039      	movs	r1, r7
    4334:	2007      	movs	r0, #7
    4336:	f7ff ff91 	bl	425c <_Z5ddumpiPKcPKvi>
            llabel[0] = 0;
    433a:	2300      	movs	r3, #0
    433c:	703b      	strb	r3, [r7, #0]
            llen = 0;
    433e:	602b      	str	r3, [r5, #0]
        }
        
        if (datalen) {
    4340:	2c00      	cmp	r4, #0
    4342:	d005      	beq.n	4350 <_Z7log_msgPKcPKvii+0x7c>
            ddump(LOG_DEBUG, label, data, datalen);
    4344:	0023      	movs	r3, r4
    4346:	9a00      	ldr	r2, [sp, #0]
    4348:	0031      	movs	r1, r6
    434a:	2007      	movs	r0, #7
    434c:	f7ff ff86 	bl	425c <_Z5ddumpiPKcPKvi>
        }

    } // if

} // log_msg
    4350:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4352:	46c0      	nop			; (mov r8, r8)
    4354:	2000092e 	.word	0x2000092e
    4358:	20000044 	.word	0x20000044
    435c:	20000a34 	.word	0x20000a34
    4360:	20000934 	.word	0x20000934
    4364:	20000a38 	.word	0x20000a38

00004368 <_Z5printPKc>:


void print( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    4368:	4b07      	ldr	r3, [pc, #28]	; (4388 <_Z5printPKc+0x20>)
{
    436a:	b510      	push	{r4, lr}
	if (!log_enabled)
    436c:	781b      	ldrb	r3, [r3, #0]
{
    436e:	0001      	movs	r1, r0
	if (!log_enabled)
    4370:	2b00      	cmp	r3, #0
    4372:	d007      	beq.n	4384 <_Z5printPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    4374:	4b05      	ldr	r3, [pc, #20]	; (438c <_Z5printPKc+0x24>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	2b06      	cmp	r3, #6
    437a:	dd03      	ble.n	4384 <_Z5printPKc+0x1c>
	{
        return;
    }

	SerMon.print(buf);
    437c:	4b04      	ldr	r3, [pc, #16]	; (4390 <_Z5printPKc+0x28>)
    437e:	6818      	ldr	r0, [r3, #0]
    4380:	f000 fb9c 	bl	4abc <_ZN5Print5printEPKc>
	
} // print
    4384:	bd10      	pop	{r4, pc}
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	2000092e 	.word	0x2000092e
    438c:	20000044 	.word	0x20000044
    4390:	20000930 	.word	0x20000930

00004394 <_Z7printlnPKc>:


void println( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    4394:	4b07      	ldr	r3, [pc, #28]	; (43b4 <_Z7printlnPKc+0x20>)
{
    4396:	b510      	push	{r4, lr}
	if (!log_enabled)
    4398:	781b      	ldrb	r3, [r3, #0]
{
    439a:	0001      	movs	r1, r0
	if (!log_enabled)
    439c:	2b00      	cmp	r3, #0
    439e:	d007      	beq.n	43b0 <_Z7printlnPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    43a0:	4b05      	ldr	r3, [pc, #20]	; (43b8 <_Z7printlnPKc+0x24>)
    43a2:	681b      	ldr	r3, [r3, #0]
    43a4:	2b06      	cmp	r3, #6
    43a6:	dd03      	ble.n	43b0 <_Z7printlnPKc+0x1c>
	{
        return;
    }

	SerMon.println(buf);
    43a8:	4b04      	ldr	r3, [pc, #16]	; (43bc <_Z7printlnPKc+0x28>)
    43aa:	6818      	ldr	r0, [r3, #0]
    43ac:	f000 fb98 	bl	4ae0 <_ZN5Print7printlnEPKc>
	
} // println
    43b0:	bd10      	pop	{r4, pc}
    43b2:	46c0      	nop			; (mov r8, r8)
    43b4:	2000092e 	.word	0x2000092e
    43b8:	20000044 	.word	0x20000044
    43bc:	20000930 	.word	0x20000930

000043c0 <_Z8printnumi>:


void printnum( int n )
{
	// Is logging enabled?
	if (!log_enabled)
    43c0:	4b07      	ldr	r3, [pc, #28]	; (43e0 <_Z8printnumi+0x20>)
{
    43c2:	b510      	push	{r4, lr}
	if (!log_enabled)
    43c4:	781b      	ldrb	r3, [r3, #0]
{
    43c6:	0001      	movs	r1, r0
	if (!log_enabled)
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <_Z8printnumi+0x1e>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    43cc:	4b05      	ldr	r3, [pc, #20]	; (43e4 <_Z8printnumi+0x24>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	2b06      	cmp	r3, #6
    43d2:	dd04      	ble.n	43de <_Z8printnumi+0x1e>
	{
        return;
    }

	SerMon.print(n);
    43d4:	4b04      	ldr	r3, [pc, #16]	; (43e8 <_Z8printnumi+0x28>)
    43d6:	220a      	movs	r2, #10
    43d8:	6818      	ldr	r0, [r3, #0]
    43da:	f000 fbd6 	bl	4b8a <_ZN5Print5printEii>
	
} // println
    43de:	bd10      	pop	{r4, pc}
    43e0:	2000092e 	.word	0x2000092e
    43e4:	20000044 	.word	0x20000044
    43e8:	20000930 	.word	0x20000930

000043ec <_Z12capture_dumpPhi>:
	char str[6];
    uint8_t ch;
	uint16_t ix;
	
	// Is logging enabled?
	if (!log_enabled)
    43ec:	4b1b      	ldr	r3, [pc, #108]	; (445c <_Z12capture_dumpPhi+0x70>)
{
    43ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!log_enabled)
    43f0:	781b      	ldrb	r3, [r3, #0]
{
    43f2:	0006      	movs	r6, r0
    43f4:	000f      	movs	r7, r1
	if (!log_enabled)
    43f6:	2b00      	cmp	r3, #0
    43f8:	d02e      	beq.n	4458 <_Z12capture_dumpPhi+0x6c>
	{
		return;
	}

    // Check debug log
    if ( LOG_DEBUG > log_level ) 
    43fa:	4b19      	ldr	r3, [pc, #100]	; (4460 <_Z12capture_dumpPhi+0x74>)
    43fc:	681b      	ldr	r3, [r3, #0]
    43fe:	2b06      	cmp	r3, #6
    4400:	dd2a      	ble.n	4458 <_Z12capture_dumpPhi+0x6c>
	{
        return;
    }
	
	if (!p)
    4402:	2800      	cmp	r0, #0
    4404:	d100      	bne.n	4408 <_Z12capture_dumpPhi+0x1c>
	{
		p = &capture_buf[0];
    4406:	4e17      	ldr	r6, [pc, #92]	; (4464 <_Z12capture_dumpPhi+0x78>)
	}

	if ( !count && ( cap_count >= 0 ))
    4408:	2f00      	cmp	r7, #0
    440a:	d101      	bne.n	4410 <_Z12capture_dumpPhi+0x24>
	{
		count = cap_count;
    440c:	4b16      	ldr	r3, [pc, #88]	; (4468 <_Z12capture_dumpPhi+0x7c>)
    440e:	881f      	ldrh	r7, [r3, #0]
		
	}
	
	SerMon.println("======================================================");
    4410:	4d16      	ldr	r5, [pc, #88]	; (446c <_Z12capture_dumpPhi+0x80>)
    4412:	4917      	ldr	r1, [pc, #92]	; (4470 <_Z12capture_dumpPhi+0x84>)
    4414:	6828      	ldr	r0, [r5, #0]
    4416:	f000 fb63 	bl	4ae0 <_ZN5Print7printlnEPKc>
	for( ix = 0; ix < count-1; ix++ )
    441a:	2400      	movs	r4, #0
    441c:	1e7b      	subs	r3, r7, #1
		ch = p[ix];
		sprintf( str, "%02x,", ch );
		SerMon.print(str);

	} // for
	sprintf( str, "%02x", p[ix] );
    441e:	5d32      	ldrb	r2, [r6, r4]
	for( ix = 0; ix < count-1; ix++ )
    4420:	429c      	cmp	r4, r3
    4422:	da0a      	bge.n	443a <_Z12capture_dumpPhi+0x4e>
		sprintf( str, "%02x,", ch );
    4424:	4913      	ldr	r1, [pc, #76]	; (4474 <_Z12capture_dumpPhi+0x88>)
    4426:	4668      	mov	r0, sp
    4428:	f008 fa9a 	bl	c960 <siprintf>
	for( ix = 0; ix < count-1; ix++ )
    442c:	3401      	adds	r4, #1
		SerMon.print(str);
    442e:	4669      	mov	r1, sp
    4430:	6828      	ldr	r0, [r5, #0]
    4432:	f000 fb43 	bl	4abc <_ZN5Print5printEPKc>
	for( ix = 0; ix < count-1; ix++ )
    4436:	b2a4      	uxth	r4, r4
    4438:	e7f0      	b.n	441c <_Z12capture_dumpPhi+0x30>
	sprintf( str, "%02x", p[ix] );
    443a:	490f      	ldr	r1, [pc, #60]	; (4478 <_Z12capture_dumpPhi+0x8c>)
    443c:	4668      	mov	r0, sp
    443e:	f008 fa8f 	bl	c960 <siprintf>
	SerMon.println(str);
    4442:	4669      	mov	r1, sp
    4444:	6828      	ldr	r0, [r5, #0]
    4446:	f000 fb4b 	bl	4ae0 <_ZN5Print7printlnEPKc>
	SerMon.println("======================================================");
    444a:	4909      	ldr	r1, [pc, #36]	; (4470 <_Z12capture_dumpPhi+0x84>)
    444c:	6828      	ldr	r0, [r5, #0]
    444e:	f000 fb47 	bl	4ae0 <_ZN5Print7printlnEPKc>

	// Reset the count
	cap_count = 0;
    4452:	2200      	movs	r2, #0
    4454:	4b04      	ldr	r3, [pc, #16]	; (4468 <_Z12capture_dumpPhi+0x7c>)
    4456:	801a      	strh	r2, [r3, #0]

} // capture_dump
    4458:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	2000092e 	.word	0x2000092e
    4460:	20000044 	.word	0x20000044
    4464:	20000a7a 	.word	0x20000a7a
    4468:	20000a78 	.word	0x20000a78
    446c:	20000930 	.word	0x20000930
    4470:	0000fa99 	.word	0x0000fa99
    4474:	0000fad0 	.word	0x0000fad0
    4478:	0000fadb 	.word	0x0000fadb

0000447c <_Z8free_ramv>:


// Function to return the amount of Free Ram.
extern "C" char *sbrk(int i);
int free_ram()
{
    447c:	b513      	push	{r0, r1, r4, lr}
	char stack_dummy = 0;
    447e:	2000      	movs	r0, #0
    4480:	466b      	mov	r3, sp
    4482:	1ddc      	adds	r4, r3, #7
    4484:	71d8      	strb	r0, [r3, #7]
	return &stack_dummy - sbrk(0);
    4486:	f008 fb85 	bl	cb94 <sbrk>
    448a:	1a20      	subs	r0, r4, r0
}
    448c:	bd16      	pop	{r1, r2, r4, pc}

0000448e <_Z8sapi_runv>:
//
// Idle loop run.
//
//////////////////////////////////////////////////////////////////////////
void sapi_run()
{
    448e:	b510      	push	{r4, lr}
	coap_s_run();
    4490:	f002 fea2 	bl	71d8 <_Z10coap_s_runv>
}
    4494:	bd10      	pop	{r4, pc}
	...

00004498 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>:
// Register a sensor.
//
//////////////////////////////////////////////////////////////////////////
uint8_t sapi_register_sensor(char *sensor_type, SensorInitFuncPtr sensor_init, SensorReadFuncPtr sensor_read, SensorReadCfgFuncPtr sensor_readcfg,
							 SensorWriteCfgFuncPtr sensor_writecfg, uint8_t is_observer, uint32_t frequency)
{
    4498:	b5f0      	push	{r4, r5, r6, r7, lr}
    449a:	b087      	sub	sp, #28
    449c:	9304      	str	r3, [sp, #16]
    449e:	ab0c      	add	r3, sp, #48	; 0x30
    44a0:	9203      	str	r2, [sp, #12]
	uint8_t sensor_id = sensor_info_index;
    44a2:	4f1c      	ldr	r7, [pc, #112]	; (4514 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x7c>)
{
    44a4:	cb04      	ldmia	r3!, {r2}
	uint8_t sensor_id = sensor_info_index;
    44a6:	783d      	ldrb	r5, [r7, #0]
{
    44a8:	781b      	ldrb	r3, [r3, #0]
	
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    44aa:	4c1b      	ldr	r4, [pc, #108]	; (4518 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x80>)
{
    44ac:	9301      	str	r3, [sp, #4]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    44ae:	016b      	lsls	r3, r5, #5
    44b0:	18e4      	adds	r4, r4, r3
{
    44b2:	9102      	str	r1, [sp, #8]
    44b4:	0006      	movs	r6, r0
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    44b6:	0001      	movs	r1, r0
    44b8:	0020      	movs	r0, r4
{
    44ba:	9205      	str	r2, [sp, #20]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    44bc:	f008 fa89 	bl	c9d2 <strcpy>
	sensor_info[sensor_id].init = sensor_init;
    44c0:	9b02      	ldr	r3, [sp, #8]
    44c2:	60a3      	str	r3, [r4, #8]
	sensor_info[sensor_id].read = sensor_read;
    44c4:	9b03      	ldr	r3, [sp, #12]
    44c6:	60e3      	str	r3, [r4, #12]
	sensor_info[sensor_id].readcfg = sensor_readcfg;
    44c8:	9b04      	ldr	r3, [sp, #16]
    44ca:	6123      	str	r3, [r4, #16]
	sensor_info[sensor_id].writecfg = sensor_writecfg;
    44cc:	9b05      	ldr	r3, [sp, #20]
    44ce:	6163      	str	r3, [r4, #20]
	sensor_info[sensor_id].frequency = frequency;
    44d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    44d2:	61a3      	str	r3, [r4, #24]
	
	sensor_info[sensor_id].observer = 0;
	if (is_observer == 1)
    44d4:	9b01      	ldr	r3, [sp, #4]
    44d6:	2b01      	cmp	r3, #1
    44d8:	d00c      	beq.n	44f4 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x5c>
	sensor_info[sensor_id].observer = 0;
    44da:	2300      	movs	r3, #0
    44dc:	7723      	strb	r3, [r4, #28]
		
		// Set the URI used for obtaining token etc in CoAP Observe response msg and set the observe handler, frequency, sensor id.
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
	}
	sensor_info_index++;
    44de:	783b      	ldrb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    44e0:	0032      	movs	r2, r6
	sensor_info_index++;
    44e2:	3301      	adds	r3, #1
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    44e4:	490d      	ldr	r1, [pc, #52]	; (451c <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x84>)
    44e6:	2007      	movs	r0, #7
	sensor_info_index++;
    44e8:	703b      	strb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    44ea:	f7ff fe95 	bl	4218 <_Z4dlogiPKcz>
	return sensor_id;
}
    44ee:	0028      	movs	r0, r5
    44f0:	b007      	add	sp, #28
    44f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_info[sensor_id].observer = 1;
    44f4:	466b      	mov	r3, sp
    44f6:	791b      	ldrb	r3, [r3, #4]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    44f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		sensor_info[sensor_id].observer = 1;
    44fa:	7723      	strb	r3, [r4, #28]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    44fc:	4908      	ldr	r1, [pc, #32]	; (4520 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x88>)
    44fe:	002b      	movs	r3, r5
    4500:	0030      	movs	r0, r6
    4502:	f002 f905 	bl	6710 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    4506:	4907      	ldr	r1, [pc, #28]	; (4524 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x8c>)
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    4508:	0002      	movs	r2, r0
    450a:	7760      	strb	r0, [r4, #29]
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    450c:	2007      	movs	r0, #7
    450e:	f7ff fe83 	bl	4218 <_Z4dlogiPKcz>
    4512:	e7e4      	b.n	44de <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x46>
    4514:	20000e7a 	.word	0x20000e7a
    4518:	20000e7c 	.word	0x20000e7c
    451c:	0000fbad 	.word	0x0000fbad
    4520:	00004835 	.word	0x00004835
    4524:	0000fb99 	.word	0x0000fb99

00004528 <_Z16sapi_init_sensorh>:
//
// Initialize a sensor (hardware) and sensor related code.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t sapi_init_sensor(uint8_t sensor_id)
{
    4528:	b510      	push	{r4, lr}
	// Initialize Sensor
	SensorInitFuncPtr pInitFunc = sensor_info[sensor_id].init;
    452a:	0143      	lsls	r3, r0, #5
    452c:	4802      	ldr	r0, [pc, #8]	; (4538 <_Z16sapi_init_sensorh+0x10>)
    452e:	18c0      	adds	r0, r0, r3
	sapi_error_t rcode = (*pInitFunc)();
    4530:	6883      	ldr	r3, [r0, #8]
    4532:	4798      	blx	r3
	
	return rcode;
}
    4534:	bd10      	pop	{r4, pc}
    4536:	46c0      	nop			; (mov r8, r8)
    4538:	20000e7c 	.word	0x20000e7c

0000453c <_Z17cbor_enc_nic_typeP8cbor_bufPc>:
//
// Add sensor type to a CBOR payload wrapper
//
//////////////////////////////////////////////////////////////////////////
uint8_t cbor_enc_nic_type(struct cbor_buf *cbuf, char *sensor_type)
{
    453c:	b570      	push	{r4, r5, r6, lr}
    453e:	000d      	movs	r5, r1
	uint8_t rcode;

	// Top level map, first element is for device type.
	// Device type used to provide a namespace for use at the MQTT broker.
	if ((rcode = cbor_enc_map(cbuf, 2)))
    4540:	2102      	movs	r1, #2
{
    4542:	0004      	movs	r4, r0
	if ((rcode = cbor_enc_map(cbuf, 2)))
    4544:	f001 fadf 	bl	5b06 <_Z12cbor_enc_mapP8cbor_bufi>
    4548:	b2c0      	uxtb	r0, r0
    454a:	2800      	cmp	r0, #0
    454c:	d116      	bne.n	457c <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// NIC type, key and value
	if ((rcode = cbor_enc_int(cbuf, NAMESPACE_NIC_TYPE_KEY)))
    454e:	0001      	movs	r1, r0
    4550:	0020      	movs	r0, r4
    4552:	f001 fab0 	bl	5ab6 <_Z12cbor_enc_intP8cbor_bufi>
    4556:	b2c0      	uxtb	r0, r0
    4558:	2800      	cmp	r0, #0
    455a:	d10f      	bne.n	457c <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}
	if ((rcode = cbor_enc_text(cbuf, sensor_type, strlen(sensor_type))))
    455c:	0028      	movs	r0, r5
    455e:	f008 fa40 	bl	c9e2 <strlen>
    4562:	0029      	movs	r1, r5
    4564:	0002      	movs	r2, r0
    4566:	0020      	movs	r0, r4
    4568:	f001 fab1 	bl	5ace <_Z13cbor_enc_textP8cbor_bufPKci>
    456c:	b2c0      	uxtb	r0, r0
    456e:	2800      	cmp	r0, #0
    4570:	d104      	bne.n	457c <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// Remaining device-specific key
	rcode = cbor_enc_int(cbuf, NAMESPACE_DEVICE_SPECIFIC_KEY);
    4572:	2101      	movs	r1, #1
    4574:	0020      	movs	r0, r4
    4576:	f001 fa9e 	bl	5ab6 <_Z12cbor_enc_intP8cbor_bufi>
    457a:	b2c0      	uxtb	r0, r0
	return rcode;
}
    457c:	bd70      	pop	{r4, r5, r6, pc}
	...

00004580 <_Z13build_rsp_msgP4mbufPhPcmh>:
//
// A typical CBOR payload: {0:"temp",1:<text payload>"}
//
//////////////////////////////////////////////////////////////////////////
error_t build_rsp_msg(struct mbuf *m, uint8_t *len, char *payload, uint32_t payloadlen, uint8_t sensor_id)
{
    4580:	b5f0      	push	{r4, r5, r6, r7, lr}
    4582:	b0a7      	sub	sp, #156	; 0x9c
    4584:	001f      	movs	r7, r3
    4586:	ab2c      	add	r3, sp, #176	; 0xb0
    4588:	9101      	str	r1, [sp, #4]
    458a:	781c      	ldrb	r4, [r3, #0]
	
	// If payload needs to be in CBOR format we add the CBOR wrapper.
	error_t	rcode = ERR_FAIL;
	struct cbor_buf cbuf;
		
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    458c:	a906      	add	r1, sp, #24
{
    458e:	0005      	movs	r5, r0
    4590:	0016      	movs	r6, r2
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    4592:	a802      	add	r0, sp, #8
    4594:	2280      	movs	r2, #128	; 0x80
    4596:	f001 fa7d 	bl	5a94 <_Z13cbor_enc_initP8cbor_bufPvi>
	
	if (!cbor_enc_nic_type(&cbuf, sensor_info[sensor_id].devicetype))
    459a:	491c      	ldr	r1, [pc, #112]	; (460c <_Z13build_rsp_msgP4mbufPhPcmh+0x8c>)
    459c:	0164      	lsls	r4, r4, #5
    459e:	1909      	adds	r1, r1, r4
    45a0:	a802      	add	r0, sp, #8
    45a2:	f7ff ffcb 	bl	453c <_Z17cbor_enc_nic_typeP8cbor_bufPc>
    45a6:	2800      	cmp	r0, #0
    45a8:	d003      	beq.n	45b2 <_Z13build_rsp_msgP4mbufPhPcmh+0x32>
{
    45aa:	2363      	movs	r3, #99	; 0x63
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
	
	int freeram = free_ram();
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
	return ERR_OK;
}
    45ac:	0018      	movs	r0, r3
    45ae:	b027      	add	sp, #156	; 0x9c
    45b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!cbor_enc_text(&cbuf, payload, payloadlen))
    45b2:	0031      	movs	r1, r6
    45b4:	003a      	movs	r2, r7
    45b6:	a802      	add	r0, sp, #8
    45b8:	f001 fa89 	bl	5ace <_Z13cbor_enc_textP8cbor_bufPKci>
    45bc:	1e06      	subs	r6, r0, #0
    45be:	d1f4      	bne.n	45aa <_Z13build_rsp_msgP4mbufPhPcmh+0x2a>
	l = cbor_buf_get_len(&cbuf);
    45c0:	a802      	add	r0, sp, #8
    45c2:	f001 fa74 	bl	5aae <_Z16cbor_buf_get_lenP8cbor_buf>
    45c6:	b2c7      	uxtb	r7, r0
    45c8:	0004      	movs	r4, r0
	p = (char *) m_append(m, l);
    45ca:	b239      	sxth	r1, r7
    45cc:	0028      	movs	r0, r5
    45ce:	f002 fe97 	bl	7300 <_Z8m_appendP4mbufs>
		return ERR_NO_MEM;
    45d2:	2303      	movs	r3, #3
	if (!p)
    45d4:	2800      	cmp	r0, #0
    45d6:	d0e9      	beq.n	45ac <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    45d8:	b2e4      	uxtb	r4, r4
	memcpy(p, cbor_payload, l);
    45da:	0022      	movs	r2, r4
    45dc:	a906      	add	r1, sp, #24
    45de:	f007 f8d8 	bl	b792 <memcpy>
	*len = l;
    45e2:	9b01      	ldr	r3, [sp, #4]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    45e4:	490a      	ldr	r1, [pc, #40]	; (4610 <_Z13build_rsp_msgP4mbufPhPcmh+0x90>)
	*len = l;
    45e6:	701f      	strb	r7, [r3, #0]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    45e8:	2007      	movs	r0, #7
    45ea:	f7ff fe15 	bl	4218 <_Z4dlogiPKcz>
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
    45ee:	0023      	movs	r3, r4
    45f0:	aa06      	add	r2, sp, #24
    45f2:	4908      	ldr	r1, [pc, #32]	; (4614 <_Z13build_rsp_msgP4mbufPhPcmh+0x94>)
    45f4:	2007      	movs	r0, #7
    45f6:	f7ff fe31 	bl	425c <_Z5ddumpiPKcPKvi>
	int freeram = free_ram();
    45fa:	f7ff ff3f 	bl	447c <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    45fe:	4906      	ldr	r1, [pc, #24]	; (4618 <_Z13build_rsp_msgP4mbufPhPcmh+0x98>)
	int freeram = free_ram();
    4600:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    4602:	2007      	movs	r0, #7
    4604:	f7ff fe08 	bl	4218 <_Z4dlogiPKcz>
	return ERR_OK;
    4608:	0033      	movs	r3, r6
    460a:	e7cf      	b.n	45ac <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    460c:	20000e7c 	.word	0x20000e7c
    4610:	0000fae0 	.word	0x0000fae0
    4614:	0001048a 	.word	0x0001048a
    4618:	0001028b 	.word	0x0001028b

0000461c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>:
{
    461c:	b5f0      	push	{r4, r5, r6, r7, lr}
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    461e:	0006      	movs	r6, r0
{
    4620:	b0a9      	sub	sp, #164	; 0xa4
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    4622:	364c      	adds	r6, #76	; 0x4c
{
    4624:	9205      	str	r2, [sp, #20]
    4626:	0005      	movs	r5, r0
    4628:	000f      	movs	r7, r1
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    462a:	aa05      	add	r2, sp, #20
    462c:	210b      	movs	r1, #11
    462e:	0030      	movs	r0, r6
{
    4630:	001c      	movs	r4, r3
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    4632:	f002 f80b 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    4636:	9003      	str	r0, [sp, #12]
    if (o)
    4638:	2800      	cmp	r0, #0
    463a:	d004      	beq.n	4646 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x2a>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    463c:	2384      	movs	r3, #132	; 0x84
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    463e:	70bb      	strb	r3, [r7, #2]
    rsp->plen = 0;
    4640:	2300      	movs	r3, #0
    4642:	643b      	str	r3, [r7, #64]	; 0x40
    return ERR_OK;
    4644:	e03e      	b.n	46c4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
    if (!(o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL))) 
    4646:	9a03      	ldr	r2, [sp, #12]
    4648:	210f      	movs	r1, #15
    464a:	0030      	movs	r0, r6
    464c:	f001 fffe 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    4650:	9002      	str	r0, [sp, #8]
    4652:	2800      	cmp	r0, #0
    4654:	d101      	bne.n	465a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3e>
        rsp->code = COAP_RSP_405_METHOD_NOT_ALLOWED;
    4656:	2385      	movs	r3, #133	; 0x85
    4658:	e7f1      	b.n	463e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    if (req->code == COAP_REQUEST_GET)
    465a:	78ad      	ldrb	r5, [r5, #2]
    465c:	2d01      	cmp	r5, #1
    465e:	d000      	beq.n	4662 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x46>
    4660:	e081      	b.n	4766 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x14a>
        uint8_t len = 0;
    4662:	466a      	mov	r2, sp
    4664:	7b12      	ldrb	r2, [r2, #12]
    4666:	ab02      	add	r3, sp, #8
        if (!coap_opt_strcmp(o, "cfg"))
    4668:	4954      	ldr	r1, [pc, #336]	; (47bc <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a0>)
    466a:	9802      	ldr	r0, [sp, #8]
        uint8_t len = 0;
    466c:	759a      	strb	r2, [r3, #22]
        if (!coap_opt_strcmp(o, "cfg"))
    466e:	f001 fac3 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
    4672:	9003      	str	r0, [sp, #12]
    4674:	2800      	cmp	r0, #0
    4676:	d128      	bne.n	46ca <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xae>
            uint8_t payloadlen = 0;
    4678:	ab02      	add	r3, sp, #8
    467a:	3516      	adds	r5, #22
    467c:	18ed      	adds	r5, r5, r3
    467e:	466b      	mov	r3, sp
    4680:	7b1b      	ldrb	r3, [r3, #12]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    4682:	0162      	lsls	r2, r4, #5
            uint8_t payloadlen = 0;
    4684:	702b      	strb	r3, [r5, #0]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    4686:	4b4e      	ldr	r3, [pc, #312]	; (47c0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    4688:	0029      	movs	r1, r5
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    468a:	189b      	adds	r3, r3, r2
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    468c:	691b      	ldr	r3, [r3, #16]
    468e:	a808      	add	r0, sp, #32
    4690:	4798      	blx	r3
            rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    4692:	2116      	movs	r1, #22
    4694:	782b      	ldrb	r3, [r5, #0]
    4696:	a802      	add	r0, sp, #8
    4698:	9400      	str	r4, [sp, #0]
    469a:	1809      	adds	r1, r1, r0
    469c:	aa08      	add	r2, sp, #32
    469e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    46a0:	f7ff ff6e 	bl	4580 <_Z13build_rsp_msgP4mbufPhPcmh>
    46a4:	0004      	movs	r4, r0
	uint8_t obs = false;
    46a6:	9d03      	ldr	r5, [sp, #12]
        dlog(LOG_DEBUG, "crresourcehandler: GET status: %d len: %d bytes", rc, len);
    46a8:	ab02      	add	r3, sp, #8
    46aa:	7d9b      	ldrb	r3, [r3, #22]
    46ac:	0022      	movs	r2, r4
    46ae:	4945      	ldr	r1, [pc, #276]	; (47c4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a8>)
    46b0:	2007      	movs	r0, #7
    46b2:	f7ff fdb1 	bl	4218 <_Z4dlogiPKcz>
        if (!rc)
    46b6:	2c00      	cmp	r4, #0
    46b8:	d14f      	bne.n	475a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x13e>
			if (obs)
    46ba:	2d00      	cmp	r5, #0
    46bc:	d043      	beq.n	4746 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x12a>
				rsp->code = COAP_RSP_203_VALID;
    46be:	2343      	movs	r3, #67	; 0x43
				rsp->plen = 0;
    46c0:	643c      	str	r4, [r7, #64]	; 0x40
				rsp->code = COAP_RSP_203_VALID;
    46c2:	70bb      	strb	r3, [r7, #2]
}
    46c4:	2000      	movs	r0, #0
    46c6:	b029      	add	sp, #164	; 0xa4
    46c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (!coap_opt_strcmp(o, "sens"))
    46ca:	493f      	ldr	r1, [pc, #252]	; (47c8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1ac>)
    46cc:	9802      	ldr	r0, [sp, #8]
    46ce:	f001 fa93 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
    46d2:	9002      	str	r0, [sp, #8]
    46d4:	2800      	cmp	r0, #0
    46d6:	d16a      	bne.n	47ae <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x192>
			if ((o = copt_get_next_opt_type((sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))) 
    46d8:	0002      	movs	r2, r0
    46da:	2106      	movs	r1, #6
    46dc:	0030      	movs	r0, r6
    46de:	f001 ffb5 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    46e2:	1e06      	subs	r6, r0, #0
    46e4:	d018      	beq.n	4718 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xfc>
				uint32_t obsval = co_uint32_n2h(o);
    46e6:	f001 fbbd 	bl	5e64 <_Z13co_uint32_n2hPK5optlv>
				switch(obsval)
    46ea:	2800      	cmp	r0, #0
    46ec:	d003      	beq.n	46f6 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xda>
    46ee:	2801      	cmp	r0, #1
    46f0:	d009      	beq.n	4706 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xea>
						rc = ERR_INVAL;
    46f2:	2404      	movs	r4, #4
    46f4:	e00e      	b.n	4714 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xf8>
						rc = coap_obs_reg_sapi(sensor_info[sensor_id].observer_id);
    46f6:	4b32      	ldr	r3, [pc, #200]	; (47c0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    46f8:	0164      	lsls	r4, r4, #5
    46fa:	191c      	adds	r4, r3, r4
    46fc:	7f60      	ldrb	r0, [r4, #29]
    46fe:	f002 f857 	bl	67b0 <_Z17coap_obs_reg_sapih>
    4702:	0004      	movs	r4, r0
						break;
    4704:	e7d0      	b.n	46a8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
						rc = coap_obs_dereg_sapi(sensor_info[sensor_id].observer_id);
    4706:	4b2e      	ldr	r3, [pc, #184]	; (47c0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    4708:	0164      	lsls	r4, r4, #5
    470a:	191c      	adds	r4, r3, r4
    470c:	7f60      	ldrb	r0, [r4, #29]
    470e:	f002 f863 	bl	67d8 <_Z19coap_obs_dereg_sapih>
    4712:	0004      	movs	r4, r0
	uint8_t obs = false;
    4714:	9d02      	ldr	r5, [sp, #8]
    4716:	e7c7      	b.n	46a8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				uint8_t payloadlen = 0;
    4718:	2517      	movs	r5, #23
    471a:	ab02      	add	r3, sp, #8
    471c:	18ed      	adds	r5, r5, r3
				SensorReadFuncPtr pReadSensor = sensor_info[sensor_id].read;
    471e:	4b28      	ldr	r3, [pc, #160]	; (47c0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    4720:	0162      	lsls	r2, r4, #5
    4722:	189b      	adds	r3, r3, r2
				uint8_t payloadlen = 0;
    4724:	7028      	strb	r0, [r5, #0]
				sapi_error_t rcode = (*pReadSensor)(payload, &payloadlen);
    4726:	0029      	movs	r1, r5
    4728:	68db      	ldr	r3, [r3, #12]
    472a:	a808      	add	r0, sp, #32
    472c:	4798      	blx	r3
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    472e:	2116      	movs	r1, #22
    4730:	782b      	ldrb	r3, [r5, #0]
    4732:	a802      	add	r0, sp, #8
    4734:	9400      	str	r4, [sp, #0]
    4736:	1809      	adds	r1, r1, r0
    4738:	aa08      	add	r2, sp, #32
    473a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    473c:	f7ff ff20 	bl	4580 <_Z13build_rsp_msgP4mbufPhPcmh>
	uint8_t obs = false;
    4740:	0035      	movs	r5, r6
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    4742:	0004      	movs	r4, r0
    4744:	e7b0      	b.n	46a8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				rsp->plen = len;
    4746:	ab02      	add	r3, sp, #8
    4748:	7d9b      	ldrb	r3, [r3, #22]
				rsp->cf = COAP_CF_CSV;
    474a:	2202      	movs	r2, #2
				rsp->plen = len;
    474c:	643b      	str	r3, [r7, #64]	; 0x40
				rsp->cf = COAP_CF_CSV;
    474e:	003b      	movs	r3, r7
    4750:	333c      	adds	r3, #60	; 0x3c
    4752:	701a      	strb	r2, [r3, #0]
				rsp->code = COAP_RSP_205_CONTENT;
    4754:	2345      	movs	r3, #69	; 0x45
    4756:	70bb      	strb	r3, [r7, #2]
    4758:	e7b4      	b.n	46c4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
            switch (rc)
    475a:	2c04      	cmp	r4, #4
    475c:	d001      	beq.n	4762 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
    475e:	2c14      	cmp	r4, #20
    4760:	d129      	bne.n	47b6 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x19a>
			rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    4762:	2386      	movs	r3, #134	; 0x86
    4764:	e76b      	b.n	463e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    else if (req->code == COAP_REQUEST_PUT) 
    4766:	2d03      	cmp	r5, #3
    4768:	d000      	beq.n	476c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x150>
    476a:	e774      	b.n	4656 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3a>
		len = o->ol;
    476c:	2617      	movs	r6, #23
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    476e:	4b14      	ldr	r3, [pc, #80]	; (47c0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    4770:	0164      	lsls	r4, r4, #5
    4772:	191c      	adds	r4, r3, r4
    4774:	6963      	ldr	r3, [r4, #20]
		strncpy(payload, (char*)o->ov, len);
    4776:	ac08      	add	r4, sp, #32
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    4778:	9304      	str	r3, [sp, #16]
		len = o->ol;
    477a:	9b02      	ldr	r3, [sp, #8]
		strncpy(payload, (char*)o->ov, len);
    477c:	0020      	movs	r0, r4
		len = o->ol;
    477e:	789d      	ldrb	r5, [r3, #2]
    4780:	ab02      	add	r3, sp, #8
    4782:	18f6      	adds	r6, r6, r3
		strncpy(payload, (char*)o->ov, len);
    4784:	9b02      	ldr	r3, [sp, #8]
		len = o->ol;
    4786:	7035      	strb	r5, [r6, #0]
		strncpy(payload, (char*)o->ov, len);
    4788:	6859      	ldr	r1, [r3, #4]
    478a:	002a      	movs	r2, r5
    478c:	f008 f956 	bl	ca3c <strncpy>
		payload[len] = '\0';
    4790:	466b      	mov	r3, sp
    4792:	7b1b      	ldrb	r3, [r3, #12]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    4794:	0031      	movs	r1, r6
		payload[len] = '\0';
    4796:	5563      	strb	r3, [r4, r5]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    4798:	0020      	movs	r0, r4
    479a:	9b04      	ldr	r3, [sp, #16]
    479c:	4798      	blx	r3
		if (rcode == SAPI_ERR_OK)
    479e:	2800      	cmp	r0, #0
    47a0:	d103      	bne.n	47aa <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x18e>
			rsp->code = COAP_RSP_204_CHANGED;
    47a2:	2344      	movs	r3, #68	; 0x44
			rsp->plen = 0;
    47a4:	6438      	str	r0, [r7, #64]	; 0x40
			rsp->code = COAP_RSP_204_CHANGED;
    47a6:	70bb      	strb	r3, [r7, #2]
    47a8:	e78c      	b.n	46c4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
		else if (rcode == SAPI_ERR_NOT_IMPLEMENTED)
    47aa:	2801      	cmp	r0, #1
    47ac:	d101      	bne.n	47b2 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x196>
			rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    47ae:	23a1      	movs	r3, #161	; 0xa1
    47b0:	e745      	b.n	463e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
		else if (rcode == SAPI_ERR_BAD_DATA)
    47b2:	2804      	cmp	r0, #4
    47b4:	d0d5      	beq.n	4762 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    47b6:	23a0      	movs	r3, #160	; 0xa0
    47b8:	e741      	b.n	463e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	0000fb60 	.word	0x0000fb60
    47c0:	20000e7c 	.word	0x20000e7c
    47c4:	0000fb69 	.word	0x0000fb69
    47c8:	0000fb64 	.word	0x0000fb64

000047cc <_Z6crsapiP12coap_msg_ctxS0_>:
{
    47cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    47ce:	0006      	movs	r6, r0
	void *it = NULL;
    47d0:	2400      	movs	r4, #0
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    47d2:	364c      	adds	r6, #76	; 0x4c
    47d4:	aa01      	add	r2, sp, #4
{
    47d6:	0007      	movs	r7, r0
    47d8:	000d      	movs	r5, r1
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    47da:	0030      	movs	r0, r6
    47dc:	210b      	movs	r1, #11
	void *it = NULL;
    47de:	9401      	str	r4, [sp, #4]
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    47e0:	f001 ff34 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	if ((o = copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it)))
    47e4:	0030      	movs	r0, r6
    47e6:	aa01      	add	r2, sp, #4
    47e8:	210b      	movs	r1, #11
    47ea:	f001 ff2f 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    47ee:	0006      	movs	r6, r0
    47f0:	42a0      	cmp	r0, r4
    47f2:	d017      	beq.n	4824 <_Z6crsapiP12coap_msg_ctxS0_+0x58>
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    47f4:	4b0d      	ldr	r3, [pc, #52]	; (482c <_Z6crsapiP12coap_msg_ctxS0_+0x60>)
    47f6:	781b      	ldrb	r3, [r3, #0]
    47f8:	429c      	cmp	r4, r3
    47fa:	da11      	bge.n	4820 <_Z6crsapiP12coap_msg_ctxS0_+0x54>
			if (!coap_opt_strcmp(o, sensor_info[indx].devicetype))
    47fc:	490c      	ldr	r1, [pc, #48]	; (4830 <_Z6crsapiP12coap_msg_ctxS0_+0x64>)
    47fe:	0163      	lsls	r3, r4, #5
    4800:	18c9      	adds	r1, r1, r3
    4802:	0030      	movs	r0, r6
    4804:	f001 f9f8 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
    4808:	2800      	cmp	r0, #0
    480a:	d106      	bne.n	481a <_Z6crsapiP12coap_msg_ctxS0_+0x4e>
				rc = crresourcehandler(req, rsp, it, indx);
    480c:	0023      	movs	r3, r4
    480e:	9a01      	ldr	r2, [sp, #4]
    4810:	0029      	movs	r1, r5
    4812:	0038      	movs	r0, r7
    4814:	f7ff ff02 	bl	461c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>
}
    4818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    481a:	3401      	adds	r4, #1
    481c:	b2e4      	uxtb	r4, r4
    481e:	e7e9      	b.n	47f4 <_Z6crsapiP12coap_msg_ctxS0_+0x28>
		rsp->code = COAP_RSP_404_NOT_FOUND;
    4820:	2384      	movs	r3, #132	; 0x84
    4822:	70ab      	strb	r3, [r5, #2]
	rsp->plen = 0;
    4824:	2000      	movs	r0, #0
    4826:	6428      	str	r0, [r5, #64]	; 0x40
	return ERR_OK;
    4828:	e7f6      	b.n	4818 <_Z6crsapiP12coap_msg_ctxS0_+0x4c>
    482a:	46c0      	nop			; (mov r8, r8)
    482c:	20000e7a 	.word	0x20000e7a
    4830:	20000e7c 	.word	0x20000e7c

00004834 <_Z24sapi_observation_handlerP4mbufPhh>:
{
    4834:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t payloadlen = 0;
    4836:	250f      	movs	r5, #15
{
    4838:	b0a7      	sub	sp, #156	; 0x9c
	uint8_t payloadlen = 0;
    483a:	ab02      	add	r3, sp, #8
    483c:	18ed      	adds	r5, r5, r3
    483e:	2300      	movs	r3, #0
{
    4840:	000f      	movs	r7, r1
    4842:	0016      	movs	r6, r2
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4844:	4c0b      	ldr	r4, [pc, #44]	; (4874 <_Z24sapi_observation_handlerP4mbufPhh+0x40>)
	uint8_t payloadlen = 0;
    4846:	702b      	strb	r3, [r5, #0]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4848:	0153      	lsls	r3, r2, #5
    484a:	18e4      	adds	r4, r4, r3
    484c:	0022      	movs	r2, r4
{
    484e:	9003      	str	r0, [sp, #12]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    4850:	4909      	ldr	r1, [pc, #36]	; (4878 <_Z24sapi_observation_handlerP4mbufPhh+0x44>)
    4852:	2007      	movs	r0, #7
    4854:	f7ff fce0 	bl	4218 <_Z4dlogiPKcz>
	sapi_error_t rcode = (*pReadFunc)(payload, &payloadlen);
    4858:	68e3      	ldr	r3, [r4, #12]
    485a:	0029      	movs	r1, r5
    485c:	a806      	add	r0, sp, #24
    485e:	4798      	blx	r3
	error_t rc = build_rsp_msg(m, len, payload, payloadlen, sensor_id);
    4860:	782b      	ldrb	r3, [r5, #0]
    4862:	aa06      	add	r2, sp, #24
    4864:	9600      	str	r6, [sp, #0]
    4866:	0039      	movs	r1, r7
    4868:	9803      	ldr	r0, [sp, #12]
    486a:	f7ff fe89 	bl	4580 <_Z13build_rsp_msgP4mbufPhPcmh>
}
    486e:	b027      	add	sp, #156	; 0x9c
    4870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	20000e7c 	.word	0x20000e7c
    4878:	0000fbc3 	.word	0x0000fbc3

0000487c <_Z9crarduinoP12coap_msg_ctxS0_>:
//
//////////////////////////////////////////////////////////////////////////
error_t crarduino( struct coap_msg_ctx *req, struct coap_msg_ctx *rsp )
{
	// Dummy. Should not be called!
	rsp->code = COAP_RSP_404_NOT_FOUND;
    487c:	2384      	movs	r3, #132	; 0x84
    487e:	708b      	strb	r3, [r1, #2]
	rsp->plen = 0;
    4880:	2300      	movs	r3, #0
	return ERR_FAIL;
}
    4882:	2063      	movs	r0, #99	; 0x63
	rsp->plen = 0;
    4884:	640b      	str	r3, [r1, #64]	; 0x40
}
    4886:	4770      	bx	lr

00004888 <_Z15sapi_log_bannerv>:
//
// Helper function to print a banner in the log.
//
//////////////////////////////////////////////////////////////////////////
void sapi_log_banner()
{
    4888:	b500      	push	{lr}
    488a:	b091      	sub	sp, #68	; 0x44
	// Log Banner: version number, time and date
	char ver[64];
	strcpy(ver, COAP_SERVER_VERSION_STRING);
    488c:	4915      	ldr	r1, [pc, #84]	; (48e4 <_Z15sapi_log_bannerv+0x5c>)
    488e:	4668      	mov	r0, sp
    4890:	f008 f89f 	bl	c9d2 <strcpy>
	strcat(ver, COAP_SERVER_VERSION_NUMBER);
    4894:	4914      	ldr	r1, [pc, #80]	; (48e8 <_Z15sapi_log_bannerv+0x60>)
    4896:	4668      	mov	r0, sp
    4898:	f008 f884 	bl	c9a4 <strcat>
	println(ver);
    489c:	4668      	mov	r0, sp
    489e:	f7ff fd79 	bl	4394 <_Z7printlnPKc>
	
	strcpy(ver, SAPI_VERSION_STRING);
    48a2:	4912      	ldr	r1, [pc, #72]	; (48ec <_Z15sapi_log_bannerv+0x64>)
    48a4:	4668      	mov	r0, sp
    48a6:	f008 f894 	bl	c9d2 <strcpy>
	strcat(ver, SAPI_VERSION_NUMBER);
    48aa:	4911      	ldr	r1, [pc, #68]	; (48f0 <_Z15sapi_log_bannerv+0x68>)
    48ac:	4668      	mov	r0, sp
    48ae:	f008 f879 	bl	c9a4 <strcat>
	println(ver);
    48b2:	4668      	mov	r0, sp
    48b4:	f7ff fd6e 	bl	4394 <_Z7printlnPKc>
	
	sprintf(ver, "Build Time: %s  Date: %s", __TIME__, __DATE__);
    48b8:	4b0e      	ldr	r3, [pc, #56]	; (48f4 <_Z15sapi_log_bannerv+0x6c>)
    48ba:	4a0f      	ldr	r2, [pc, #60]	; (48f8 <_Z15sapi_log_bannerv+0x70>)
    48bc:	490f      	ldr	r1, [pc, #60]	; (48fc <_Z15sapi_log_bannerv+0x74>)
    48be:	4668      	mov	r0, sp
    48c0:	f008 f84e 	bl	c960 <siprintf>
	println(ver);
    48c4:	4668      	mov	r0, sp
    48c6:	f7ff fd65 	bl	4394 <_Z7printlnPKc>
	println("");
    48ca:	480d      	ldr	r0, [pc, #52]	; (4900 <_Z15sapi_log_bannerv+0x78>)
    48cc:	f7ff fd62 	bl	4394 <_Z7printlnPKc>
	
	// Log free memory
	int freeram = free_ram();
    48d0:	f7ff fdd4 	bl	447c <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    48d4:	490b      	ldr	r1, [pc, #44]	; (4904 <_Z15sapi_log_bannerv+0x7c>)
	int freeram = free_ram();
    48d6:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    48d8:	2007      	movs	r0, #7
    48da:	f7ff fc9d 	bl	4218 <_Z4dlogiPKcz>
}
    48de:	b011      	add	sp, #68	; 0x44
    48e0:	bd00      	pop	{pc}
    48e2:	46c0      	nop			; (mov r8, r8)
    48e4:	0000fafb 	.word	0x0000fafb
    48e8:	0000fb19 	.word	0x0000fb19
    48ec:	0000fb1f 	.word	0x0000fb1f
    48f0:	0000fb2c 	.word	0x0000fb2c
    48f4:	0000fb32 	.word	0x0000fb32
    48f8:	0000fb3e 	.word	0x0000fb3e
    48fc:	0000fb47 	.word	0x0000fb47
    4900:	0000fd92 	.word	0x0000fd92
    4904:	0001028b 	.word	0x0001028b

00004908 <_Z15sapi_initializePc>:
{
    4908:	b507      	push	{r0, r1, r2, lr}
	is_sapi = 1;
    490a:	2201      	movs	r2, #1
    490c:	4b19      	ldr	r3, [pc, #100]	; (4974 <_Z15sapi_initializePc+0x6c>)
{
    490e:	0001      	movs	r1, r0
	is_sapi = 1;
    4910:	701a      	strb	r2, [r3, #0]
	sensor_info_index = 0;
    4912:	2200      	movs	r2, #0
    4914:	4b18      	ldr	r3, [pc, #96]	; (4978 <_Z15sapi_initializePc+0x70>)
    4916:	4819      	ldr	r0, [pc, #100]	; (497c <_Z15sapi_initializePc+0x74>)
    4918:	701a      	strb	r2, [r3, #0]
	if (url_classifier == NULL)
    491a:	4291      	cmp	r1, r2
    491c:	d128      	bne.n	4970 <_Z15sapi_initializePc+0x68>
		strncpy(classifier, DEFAULT_CLASSIFIER, CLASSIFIER_MAX_LEN);
    491e:	4918      	ldr	r1, [pc, #96]	; (4980 <_Z15sapi_initializePc+0x78>)
    4920:	3210      	adds	r2, #16
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    4922:	f008 f88b 	bl	ca3c <strncpy>
	rtc_time_init(LOCAL_TIME_ZONE);
    4926:	2008      	movs	r0, #8
    4928:	4240      	negs	r0, r0
    492a:	f7ff fbc5 	bl	40b8 <_Z13rtc_time_initl>
	log_init(SER_MON_PTR, SER_MON_BAUD_RATE, LOG_LEVEL);
    492e:	21e1      	movs	r1, #225	; 0xe1
    4930:	2207      	movs	r2, #7
    4932:	0249      	lsls	r1, r1, #9
    4934:	4813      	ldr	r0, [pc, #76]	; (4984 <_Z15sapi_initializePc+0x7c>)
    4936:	f7ff fc4d 	bl	41d4 <_Z8log_initP7Serial_mm>
	pinMode(MNIC_WAKEUP_PIN, OUTPUT);
    493a:	2101      	movs	r1, #1
    493c:	2009      	movs	r0, #9
    493e:	f7ff f8c3 	bl	3ac8 <pinMode>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    4942:	2101      	movs	r1, #1
    4944:	2009      	movs	r0, #9
    4946:	f7ff f8c3 	bl	3ad0 <digitalWrite>
	coap_s_init(UART_PTR, COAP_MSG_MAX_AGE_IN_SECS, HDLC_UART_TIMEOUT_IN_MS, HDLC_MAX_PAYLOAD_LEN, "", NULL);
    494a:	2300      	movs	r3, #0
    494c:	22fa      	movs	r2, #250	; 0xfa
    494e:	9301      	str	r3, [sp, #4]
    4950:	4b0d      	ldr	r3, [pc, #52]	; (4988 <_Z15sapi_initializePc+0x80>)
    4952:	00d2      	lsls	r2, r2, #3
    4954:	215a      	movs	r1, #90	; 0x5a
    4956:	9300      	str	r3, [sp, #0]
    4958:	480c      	ldr	r0, [pc, #48]	; (498c <_Z15sapi_initializePc+0x84>)
    495a:	23ff      	movs	r3, #255	; 0xff
    495c:	f002 fb38 	bl	6fd0 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>
	coap_put_ic_reboot_event();
    4960:	f002 fb04 	bl	6f6c <_Z24coap_put_ic_reboot_eventv>
	delay(50);
    4964:	2032      	movs	r0, #50	; 0x32
    4966:	f7fd feb3 	bl	26d0 <delay>
	sapi_log_banner();
    496a:	f7ff ff8d 	bl	4888 <_Z15sapi_log_bannerv>
}
    496e:	bd07      	pop	{r0, r1, r2, pc}
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    4970:	2210      	movs	r2, #16
    4972:	e7d6      	b.n	4922 <_Z15sapi_initializePc+0x1a>
    4974:	20000048 	.word	0x20000048
    4978:	20000e7a 	.word	0x20000e7a
    497c:	200000a0 	.word	0x200000a0
    4980:	0000faf3 	.word	0x0000faf3
    4984:	20001148 	.word	0x20001148
    4988:	0000fd92 	.word	0x0000fd92
    498c:	20000fb8 	.word	0x20000fb8

00004990 <SERCOM4_Handler>:

    void SERCOM4_3_Handler(void) {
      Serial1.errorHandler();
    }
  #else
    void SERCOM4_Handler()  {
    4990:	b510      	push	{r4, lr}
      Serial1.IrqHandler();
    4992:	4802      	ldr	r0, [pc, #8]	; (499c <SERCOM4_Handler+0xc>)
    4994:	f000 fa88 	bl	4ea8 <_ZN4Uart10IrqHandlerEv>
    }
    4998:	bd10      	pop	{r4, pc}
    499a:	46c0      	nop			; (mov r8, r8)
    499c:	20000efc 	.word	0x20000efc

000049a0 <SERCOM0_Handler>:

    void SERCOM2_3_Handler(void) {
      Serial2.errorHandler();
    }
  #else
    void SERCOM0_Handler()  {
    49a0:	b510      	push	{r4, lr}
      Serial2.IrqHandler();
    49a2:	4802      	ldr	r0, [pc, #8]	; (49ac <SERCOM0_Handler+0xc>)
    49a4:	f000 fa80 	bl	4ea8 <_ZN4Uart10IrqHandlerEv>
    }
    49a8:	bd10      	pop	{r4, pc}
    49aa:	46c0      	nop			; (mov r8, r8)
    49ac:	20000fb8 	.word	0x20000fb8

000049b0 <SERCOM3_Handler>:

    void SERCOM3_3_Handler(void) {
      Serial3.errorHandler();
    }
  #else
    void SERCOM3_Handler()  {
    49b0:	b510      	push	{r4, lr}
      Serial3.IrqHandler();
    49b2:	4802      	ldr	r0, [pc, #8]	; (49bc <SERCOM3_Handler+0xc>)
    49b4:	f000 fa78 	bl	4ea8 <_ZN4Uart10IrqHandlerEv>
    }
    49b8:	bd10      	pop	{r4, pc}
    49ba:	46c0      	nop			; (mov r8, r8)
    49bc:	20001074 	.word	0x20001074

000049c0 <_GLOBAL__sub_I_g_APinDescription>:
    49c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
SERCOM sercom0( SERCOM0 ) ;
    49c2:	2184      	movs	r1, #132	; 0x84
    49c4:	4f1a      	ldr	r7, [pc, #104]	; (4a30 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    49c6:	05c9      	lsls	r1, r1, #23
    49c8:	0038      	movs	r0, r7
    49ca:	f000 f8e2 	bl	4b92 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    49ce:	4919      	ldr	r1, [pc, #100]	; (4a34 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    49d0:	4819      	ldr	r0, [pc, #100]	; (4a38 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    49d2:	f000 f8de 	bl	4b92 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    49d6:	4919      	ldr	r1, [pc, #100]	; (4a3c <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    49d8:	4819      	ldr	r0, [pc, #100]	; (4a40 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    49da:	f000 f8da 	bl	4b92 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    49de:	4d19      	ldr	r5, [pc, #100]	; (4a44 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    49e0:	4919      	ldr	r1, [pc, #100]	; (4a48 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    49e2:	0028      	movs	r0, r5
    49e4:	f000 f8d5 	bl	4b92 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    49e8:	4e18      	ldr	r6, [pc, #96]	; (4a4c <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    49ea:	4919      	ldr	r1, [pc, #100]	; (4a50 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    49ec:	0030      	movs	r0, r6
    49ee:	f000 f8d0 	bl	4b92 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    49f2:	4918      	ldr	r1, [pc, #96]	; (4a54 <_GLOBAL__sub_I_g_APinDescription+0x94>)
    49f4:	4818      	ldr	r0, [pc, #96]	; (4a58 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    49f6:	f000 f8cc 	bl	4b92 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    49fa:	2401      	movs	r4, #1
    49fc:	2300      	movs	r3, #0
    49fe:	0031      	movs	r1, r6
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    4a00:	2603      	movs	r6, #3
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    4a02:	9301      	str	r3, [sp, #4]
    4a04:	0022      	movs	r2, r4
    4a06:	9400      	str	r4, [sp, #0]
    4a08:	4814      	ldr	r0, [pc, #80]	; (4a5c <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    4a0a:	f000 fa1f 	bl	4e4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    4a0e:	0039      	movs	r1, r7
    4a10:	9600      	str	r6, [sp, #0]
    4a12:	9401      	str	r4, [sp, #4]
    4a14:	230a      	movs	r3, #10
    4a16:	220b      	movs	r2, #11
    4a18:	4811      	ldr	r0, [pc, #68]	; (4a60 <_GLOBAL__sub_I_g_APinDescription+0xa0>)
    4a1a:	f000 fa17 	bl	4e4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial3( SERCOM_INSTANCE_SERIAL3, PIN_SERIAL3_RX, PIN_SERIAL3_TX, PAD_SERIAL3_RX, PAD_SERIAL3_TX ) ;
    4a1e:	9600      	str	r6, [sp, #0]
    4a20:	0029      	movs	r1, r5
    4a22:	9401      	str	r4, [sp, #4]
    4a24:	2312      	movs	r3, #18
    4a26:	2213      	movs	r2, #19
    4a28:	480e      	ldr	r0, [pc, #56]	; (4a64 <_GLOBAL__sub_I_g_APinDescription+0xa4>)
    4a2a:	f000 fa0f 	bl	4e4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    }
    4a2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4a30:	20001130 	.word	0x20001130
    4a34:	42000400 	.word	0x42000400
    4a38:	20001134 	.word	0x20001134
    4a3c:	42000800 	.word	0x42000800
    4a40:	20001138 	.word	0x20001138
    4a44:	2000113c 	.word	0x2000113c
    4a48:	42000c00 	.word	0x42000c00
    4a4c:	20001140 	.word	0x20001140
    4a50:	42001000 	.word	0x42001000
    4a54:	43000400 	.word	0x43000400
    4a58:	20001144 	.word	0x20001144
    4a5c:	20000efc 	.word	0x20000efc
    4a60:	20000fb8 	.word	0x20000fb8
    4a64:	20001074 	.word	0x20001074

00004a68 <_Znwj>:
    4a68:	b510      	push	{r4, lr}
    4a6a:	f006 fe5d 	bl	b728 <malloc>
    4a6e:	bd10      	pop	{r4, pc}

00004a70 <_ZdlPv>:
    4a70:	b510      	push	{r4, lr}
    4a72:	f006 fe63 	bl	b73c <free>
    4a76:	bd10      	pop	{r4, pc}

00004a78 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4a7a:	0006      	movs	r6, r0
    4a7c:	000d      	movs	r5, r1
    4a7e:	000c      	movs	r4, r1
    4a80:	188b      	adds	r3, r1, r2
    4a82:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    4a84:	9b01      	ldr	r3, [sp, #4]
    4a86:	1b67      	subs	r7, r4, r5
    4a88:	429c      	cmp	r4, r3
    4a8a:	d007      	beq.n	4a9c <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    4a8c:	6833      	ldr	r3, [r6, #0]
    4a8e:	7821      	ldrb	r1, [r4, #0]
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	0030      	movs	r0, r6
    4a94:	4798      	blx	r3
    4a96:	3401      	adds	r4, #1
    4a98:	2800      	cmp	r0, #0
    4a9a:	d1f3      	bne.n	4a84 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    4a9c:	0038      	movs	r0, r7
    4a9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004aa0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    4aa0:	b570      	push	{r4, r5, r6, lr}
    4aa2:	0005      	movs	r5, r0
    4aa4:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    4aa6:	1e08      	subs	r0, r1, #0
    4aa8:	d007      	beq.n	4aba <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    4aaa:	f007 ff9a 	bl	c9e2 <strlen>
    4aae:	682b      	ldr	r3, [r5, #0]
    4ab0:	0002      	movs	r2, r0
    4ab2:	685b      	ldr	r3, [r3, #4]
    4ab4:	0021      	movs	r1, r4
    4ab6:	0028      	movs	r0, r5
    4ab8:	4798      	blx	r3
    }
    4aba:	bd70      	pop	{r4, r5, r6, pc}

00004abc <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    4abc:	b510      	push	{r4, lr}
  return write(str);
    4abe:	f7ff ffef 	bl	4aa0 <_ZN5Print5writeEPKc>
}
    4ac2:	bd10      	pop	{r4, pc}

00004ac4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    4ac4:	b510      	push	{r4, lr}
  return write(c);
    4ac6:	6803      	ldr	r3, [r0, #0]
    4ac8:	681b      	ldr	r3, [r3, #0]
    4aca:	4798      	blx	r3
}
    4acc:	bd10      	pop	{r4, pc}
	...

00004ad0 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    4ad0:	b510      	push	{r4, lr}
  return write("\r\n");
    4ad2:	4902      	ldr	r1, [pc, #8]	; (4adc <_ZN5Print7printlnEv+0xc>)
    4ad4:	f7ff ffe4 	bl	4aa0 <_ZN5Print5writeEPKc>
}
    4ad8:	bd10      	pop	{r4, pc}
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	0000fd90 	.word	0x0000fd90

00004ae0 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    4ae0:	b570      	push	{r4, r5, r6, lr}
    4ae2:	0004      	movs	r4, r0
  return write(str);
    4ae4:	f7ff ffdc 	bl	4aa0 <_ZN5Print5writeEPKc>
    4ae8:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    4aea:	0020      	movs	r0, r4
    4aec:	f7ff fff0 	bl	4ad0 <_ZN5Print7printlnEv>
    4af0:	1940      	adds	r0, r0, r5
  return n;
}
    4af2:	bd70      	pop	{r4, r5, r6, pc}

00004af4 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    4af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4af6:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4af8:	2200      	movs	r2, #0
{
    4afa:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
    4afc:	ab02      	add	r3, sp, #8
    4afe:	3305      	adds	r3, #5
{
    4b00:	9001      	str	r0, [sp, #4]
    4b02:	000d      	movs	r5, r1
  *str = '\0';
    4b04:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4b06:	2e01      	cmp	r6, #1
    4b08:	dc00      	bgt.n	4b0c <_ZN5Print11printNumberEmh+0x18>
    4b0a:	260a      	movs	r6, #10
    4b0c:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    4b0e:	0028      	movs	r0, r5
    4b10:	0031      	movs	r1, r6
    4b12:	f003 fd75 	bl	8600 <__aeabi_uidivmod>
    4b16:	000f      	movs	r7, r1
    4b18:	b2cb      	uxtb	r3, r1
    n /= base;
    4b1a:	0028      	movs	r0, r5
    4b1c:	0031      	movs	r1, r6
    char c = n % base;
    4b1e:	9300      	str	r3, [sp, #0]
    n /= base;
    4b20:	f003 fce8 	bl	84f4 <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4b24:	b2fb      	uxtb	r3, r7
    4b26:	3337      	adds	r3, #55	; 0x37
    n /= base;
    4b28:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4b2a:	3c01      	subs	r4, #1
    4b2c:	b2db      	uxtb	r3, r3
    4b2e:	2f09      	cmp	r7, #9
    4b30:	d802      	bhi.n	4b38 <_ZN5Print11printNumberEmh+0x44>
    4b32:	9b00      	ldr	r3, [sp, #0]
    4b34:	3330      	adds	r3, #48	; 0x30
    4b36:	b2db      	uxtb	r3, r3
    4b38:	7023      	strb	r3, [r4, #0]
  } while(n);
    4b3a:	2d00      	cmp	r5, #0
    4b3c:	d1e7      	bne.n	4b0e <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
    4b3e:	0021      	movs	r1, r4
    4b40:	9801      	ldr	r0, [sp, #4]
    4b42:	f7ff ffad 	bl	4aa0 <_ZN5Print5writeEPKc>
}
    4b46:	b00d      	add	sp, #52	; 0x34
    4b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004b4a <_ZN5Print5printEli>:
{
    4b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b4c:	0006      	movs	r6, r0
    4b4e:	000c      	movs	r4, r1
    4b50:	1e15      	subs	r5, r2, #0
  if (base == 0) {
    4b52:	d104      	bne.n	4b5e <_ZN5Print5printEli+0x14>
    return write(n);
    4b54:	6803      	ldr	r3, [r0, #0]
    4b56:	b2c9      	uxtb	r1, r1
    4b58:	681b      	ldr	r3, [r3, #0]
    4b5a:	4798      	blx	r3
}
    4b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return printNumber((unsigned long)n, base);
    4b5e:	b2d2      	uxtb	r2, r2
  } else if (base == 10) {
    4b60:	2d0a      	cmp	r5, #10
    4b62:	d10d      	bne.n	4b80 <_ZN5Print5printEli+0x36>
    return printNumber((unsigned long)n, 10);
    4b64:	002a      	movs	r2, r5
    if (n < 0) {
    4b66:	2900      	cmp	r1, #0
    4b68:	da0a      	bge.n	4b80 <_ZN5Print5printEli+0x36>
      int t = print('-');
    4b6a:	212d      	movs	r1, #45	; 0x2d
    4b6c:	f7ff ffaa 	bl	4ac4 <_ZN5Print5printEc>
      n = -n;
    4b70:	4261      	negs	r1, r4
      int t = print('-');
    4b72:	0007      	movs	r7, r0
      return printNumber((unsigned long)n, 10) + t;
    4b74:	002a      	movs	r2, r5
    4b76:	0030      	movs	r0, r6
    4b78:	f7ff ffbc 	bl	4af4 <_ZN5Print11printNumberEmh>
    4b7c:	1838      	adds	r0, r7, r0
    4b7e:	e7ed      	b.n	4b5c <_ZN5Print5printEli+0x12>
    return printNumber((unsigned long)n, base);
    4b80:	0021      	movs	r1, r4
    4b82:	0030      	movs	r0, r6
    4b84:	f7ff ffb6 	bl	4af4 <_ZN5Print11printNumberEmh>
    4b88:	e7e8      	b.n	4b5c <_ZN5Print5printEli+0x12>

00004b8a <_ZN5Print5printEii>:
{
    4b8a:	b510      	push	{r4, lr}
  return print((long) n, base);
    4b8c:	f7ff ffdd 	bl	4b4a <_ZN5Print5printEli>
}
    4b90:	bd10      	pop	{r4, pc}

00004b92 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    4b92:	6001      	str	r1, [r0, #0]
}
    4b94:	4770      	bx	lr

00004b96 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}

void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    4b96:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b98:	ac05      	add	r4, sp, #20
    4b9a:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4b9c:	6804      	ldr	r4, [r0, #0]
    4b9e:	1e98      	subs	r0, r3, #2
    4ba0:	1e47      	subs	r7, r0, #1
    4ba2:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4ba4:	6826      	ldr	r6, [r4, #0]
    4ba6:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4ba8:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4baa:	4332      	orrs	r2, r6
    4bac:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4bae:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4bb0:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4bb2:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    4bb4:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    4bb6:	6862      	ldr	r2, [r4, #4]
    4bb8:	4329      	orrs	r1, r5
    4bba:	2000      	movs	r0, #0
    4bbc:	2b02      	cmp	r3, #2
    4bbe:	d000      	beq.n	4bc2 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    4bc0:	0358      	lsls	r0, r3, #13
    4bc2:	4311      	orrs	r1, r2
    4bc4:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4bc6:	6061      	str	r1, [r4, #4]
}
    4bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004bca <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    4bca:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4bcc:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4bce:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4bd0:	03a4      	lsls	r4, r4, #14
    4bd2:	6818      	ldr	r0, [r3, #0]
    4bd4:	0512      	lsls	r2, r2, #20
    4bd6:	4022      	ands	r2, r4
    4bd8:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4bda:	20c0      	movs	r0, #192	; 0xc0
    4bdc:	0409      	lsls	r1, r1, #16
    4bde:	0280      	lsls	r0, r0, #10
    4be0:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4be2:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4be4:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    4be6:	685a      	ldr	r2, [r3, #4]
    4be8:	4310      	orrs	r0, r2
    4bea:	6058      	str	r0, [r3, #4]
}
    4bec:	bd10      	pop	{r4, pc}

00004bee <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    4bee:	2201      	movs	r2, #1
    4bf0:	6803      	ldr	r3, [r0, #0]
    4bf2:	6819      	ldr	r1, [r3, #0]
    4bf4:	430a      	orrs	r2, r1
    4bf6:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    4bf8:	681a      	ldr	r2, [r3, #0]
    4bfa:	07d2      	lsls	r2, r2, #31
    4bfc:	d4fc      	bmi.n	4bf8 <_ZN6SERCOM9resetUARTEv+0xa>
    4bfe:	69da      	ldr	r2, [r3, #28]
    4c00:	07d2      	lsls	r2, r2, #31
    4c02:	d4f9      	bmi.n	4bf8 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    4c04:	4770      	bx	lr

00004c06 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    4c06:	2202      	movs	r2, #2
    4c08:	6803      	ldr	r3, [r0, #0]
    4c0a:	6819      	ldr	r1, [r3, #0]
    4c0c:	430a      	orrs	r2, r1
    4c0e:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    4c10:	69da      	ldr	r2, [r3, #28]
    4c12:	0792      	lsls	r2, r2, #30
    4c14:	d4fc      	bmi.n	4c10 <_ZN6SERCOM10enableUARTEv+0xa>
}
    4c16:	4770      	bx	lr

00004c18 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    4c18:	6803      	ldr	r3, [r0, #0]
    4c1a:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    4c1c:	07d2      	lsls	r2, r2, #31
    4c1e:	d402      	bmi.n	4c26 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    4c20:	7e1a      	ldrb	r2, [r3, #24]
    4c22:	0792      	lsls	r2, r2, #30
    4c24:	d5fc      	bpl.n	4c20 <_ZN6SERCOM9flushUARTEv+0x8>
}
    4c26:	4770      	bx	lr

00004c28 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    4c28:	2200      	movs	r2, #0
    4c2a:	6803      	ldr	r3, [r0, #0]
    4c2c:	835a      	strh	r2, [r3, #26]
}
    4c2e:	4770      	bx	lr

00004c30 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    4c30:	6803      	ldr	r3, [r0, #0]
    4c32:	7e18      	ldrb	r0, [r3, #24]
    4c34:	0740      	lsls	r0, r0, #29
    4c36:	0fc0      	lsrs	r0, r0, #31
}
    4c38:	4770      	bx	lr

00004c3a <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    4c3a:	6803      	ldr	r3, [r0, #0]
    4c3c:	7e18      	ldrb	r0, [r3, #24]
    4c3e:	09c0      	lsrs	r0, r0, #7
}
    4c40:	4770      	bx	lr

00004c42 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    4c42:	2380      	movs	r3, #128	; 0x80
    4c44:	6802      	ldr	r2, [r0, #0]
    4c46:	425b      	negs	r3, r3
    4c48:	7e11      	ldrb	r1, [r2, #24]
    4c4a:	430b      	orrs	r3, r1
    4c4c:	7613      	strb	r3, [r2, #24]
}
    4c4e:	4770      	bx	lr

00004c50 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    4c50:	6803      	ldr	r3, [r0, #0]
    4c52:	7e18      	ldrb	r0, [r3, #24]
    4c54:	07c0      	lsls	r0, r0, #31
    4c56:	0fc0      	lsrs	r0, r0, #31
}
    4c58:	4770      	bx	lr

00004c5a <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    4c5a:	6803      	ldr	r3, [r0, #0]
    4c5c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    4c5e:	b2c0      	uxtb	r0, r0
}
    4c60:	4770      	bx	lr

00004c62 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    4c62:	6803      	ldr	r3, [r0, #0]
    4c64:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    4c66:	07d2      	lsls	r2, r2, #31
    4c68:	d5fc      	bpl.n	4c64 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    4c6a:	b289      	uxth	r1, r1
  return 1;
}
    4c6c:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    4c6e:	8519      	strh	r1, [r3, #40]	; 0x28
}
    4c70:	4770      	bx	lr

00004c72 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    4c72:	2201      	movs	r2, #1
    4c74:	6803      	ldr	r3, [r0, #0]
    4c76:	759a      	strb	r2, [r3, #22]
}
    4c78:	4770      	bx	lr

00004c7a <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    4c7a:	2201      	movs	r2, #1
    4c7c:	6803      	ldr	r3, [r0, #0]
    4c7e:	751a      	strb	r2, [r3, #20]
}
    4c80:	4770      	bx	lr
	...

00004c84 <_ZN6SERCOM13initClockNVICEv>:
    IRQn_Type IdNvic3=PendSV_IRQn ;
  #else
    IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
  #endif

  if(sercom == SERCOM0)
    4c84:	2284      	movs	r2, #132	; 0x84
    4c86:	6803      	ldr	r3, [r0, #0]
{
    4c88:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    4c8a:	05d2      	lsls	r2, r2, #23
    4c8c:	4293      	cmp	r3, r2
    4c8e:	d011      	beq.n	4cb4 <_ZN6SERCOM13initClockNVICEv+0x30>
      IdNvic3 = SERCOM0_3_IRQn;
    #else
      IdNvic = SERCOM0_IRQn;
    #endif
  }
  else if(sercom == SERCOM1)
    4c90:	4a21      	ldr	r2, [pc, #132]	; (4d18 <_ZN6SERCOM13initClockNVICEv+0x94>)
    4c92:	4293      	cmp	r3, r2
    4c94:	d034      	beq.n	4d00 <_ZN6SERCOM13initClockNVICEv+0x7c>
    #else
      IdNvic = SERCOM1_IRQn;
    #endif
  }
#if !(SAMD11C14)
  else if(sercom == SERCOM2)
    4c96:	4a21      	ldr	r2, [pc, #132]	; (4d1c <_ZN6SERCOM13initClockNVICEv+0x98>)
    4c98:	4293      	cmp	r3, r2
    4c9a:	d034      	beq.n	4d06 <_ZN6SERCOM13initClockNVICEv+0x82>
      IdNvic = SERCOM2_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES)
  else if(sercom == SERCOM3)
    4c9c:	4a20      	ldr	r2, [pc, #128]	; (4d20 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    4c9e:	4293      	cmp	r3, r2
    4ca0:	d034      	beq.n	4d0c <_ZN6SERCOM13initClockNVICEv+0x88>
      IdNvic = SERCOM3_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES) && !(SAMD21E) && !(SAMC21E)
  else if(sercom == SERCOM4)
    4ca2:	4a20      	ldr	r2, [pc, #128]	; (4d24 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    4ca4:	4293      	cmp	r3, r2
    4ca6:	d034      	beq.n	4d12 <_ZN6SERCOM13initClockNVICEv+0x8e>
      IdNvic3 = SERCOM4_3_IRQn;
    #else
      IdNvic = SERCOM4_IRQn;
    #endif
  }
  else if(sercom == SERCOM5)
    4ca8:	4a1f      	ldr	r2, [pc, #124]	; (4d28 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    4caa:	4293      	cmp	r3, r2
    4cac:	d127      	bne.n	4cfe <_ZN6SERCOM13initClockNVICEv+0x7a>
      IdNvic0 = SERCOM5_0_IRQn;
      IdNvic1 = SERCOM5_1_IRQn;
      IdNvic2 = SERCOM5_2_IRQn;
      IdNvic3 = SERCOM5_3_IRQn;
    #else
      IdNvic = SERCOM5_IRQn;
    4cae:	230d      	movs	r3, #13
    clockId = GCM_SERCOM5_CORE;
    4cb0:	2218      	movs	r2, #24
    4cb2:	e001      	b.n	4cb8 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM0_IRQn;
    4cb4:	2308      	movs	r3, #8
    clockId = GCM_SERCOM0_CORE;
    4cb6:	2212      	movs	r2, #18
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4cb8:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4cba:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4cbc:	4099      	lsls	r1, r3
    4cbe:	481b      	ldr	r0, [pc, #108]	; (4d2c <_ZN6SERCOM13initClockNVICEv+0xa8>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4cc0:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4cc2:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4cc4:	0899      	lsrs	r1, r3, #2
    4cc6:	402b      	ands	r3, r5
    4cc8:	40ab      	lsls	r3, r5
    4cca:	35fc      	adds	r5, #252	; 0xfc
    4ccc:	409d      	lsls	r5, r3
    4cce:	0089      	lsls	r1, r1, #2
    4cd0:	1809      	adds	r1, r1, r0
    4cd2:	00a4      	lsls	r4, r4, #2
    4cd4:	5908      	ldr	r0, [r1, r4]
    4cd6:	0092      	lsls	r2, r2, #2
    4cd8:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    4cda:	25c0      	movs	r5, #192	; 0xc0
    4cdc:	409d      	lsls	r5, r3
    4cde:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4ce0:	4303      	orrs	r3, r0
    4ce2:	510b      	str	r3, [r1, r4]
#if (SAMD21 || SAMD11)
  GCLK->CLKCTRL.reg = ( GCLK_CLKCTRL_ID( clockId ) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_CLKEN );
  SercomClock = SystemCoreClock;
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21)
  GCLK->PCHCTRL[clockId].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    4ce4:	4b12      	ldr	r3, [pc, #72]	; (4d30 <_ZN6SERCOM13initClockNVICEv+0xac>)
    4ce6:	18d1      	adds	r1, r2, r3
    4ce8:	2340      	movs	r3, #64	; 0x40
    4cea:	67cb      	str	r3, [r1, #124]	; 0x7c
  SercomClock = SystemCoreClock;
    4cec:	4911      	ldr	r1, [pc, #68]	; (4d34 <_ZN6SERCOM13initClockNVICEv+0xb0>)
    4cee:	6808      	ldr	r0, [r1, #0]
    4cf0:	4911      	ldr	r1, [pc, #68]	; (4d38 <_ZN6SERCOM13initClockNVICEv+0xb4>)
    4cf2:	6008      	str	r0, [r1, #0]
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    4cf4:	490e      	ldr	r1, [pc, #56]	; (4d30 <_ZN6SERCOM13initClockNVICEv+0xac>)
    4cf6:	1852      	adds	r2, r2, r1
    4cf8:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    4cfa:	4219      	tst	r1, r3
    4cfc:	d0fc      	beq.n	4cf8 <_ZN6SERCOM13initClockNVICEv+0x74>
  SercomClock = 96000000ul;
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
#else
  #error "SERCOM.cpp: Unsupported chip"
#endif
}
    4cfe:	bd30      	pop	{r4, r5, pc}
      IdNvic = SERCOM1_IRQn;
    4d00:	2309      	movs	r3, #9
    clockId = GCM_SERCOM1_CORE;
    4d02:	2213      	movs	r2, #19
    4d04:	e7d8      	b.n	4cb8 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM2_IRQn;
    4d06:	230a      	movs	r3, #10
    clockId = GCM_SERCOM2_CORE;
    4d08:	2214      	movs	r2, #20
    4d0a:	e7d5      	b.n	4cb8 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM3_IRQn;
    4d0c:	230b      	movs	r3, #11
    clockId = GCM_SERCOM3_CORE;
    4d0e:	2215      	movs	r2, #21
    4d10:	e7d2      	b.n	4cb8 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM4_IRQn;
    4d12:	230c      	movs	r3, #12
    clockId = GCM_SERCOM4_CORE;
    4d14:	2216      	movs	r2, #22
    4d16:	e7cf      	b.n	4cb8 <_ZN6SERCOM13initClockNVICEv+0x34>
    4d18:	42000400 	.word	0x42000400
    4d1c:	42000800 	.word	0x42000800
    4d20:	42000c00 	.word	0x42000c00
    4d24:	42001000 	.word	0x42001000
    4d28:	43000400 	.word	0x43000400
    4d2c:	e000e100 	.word	0xe000e100
    4d30:	40001804 	.word	0x40001804
    4d34:	20000038 	.word	0x20000038
    4d38:	2000004c 	.word	0x2000004c

00004d3c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    4d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d3e:	0016      	movs	r6, r2
    4d40:	001d      	movs	r5, r3
  if (sercom == SERCOM5) {
    4d42:	6802      	ldr	r2, [r0, #0]
    4d44:	4b18      	ldr	r3, [pc, #96]	; (4da8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6c>)
{
    4d46:	0004      	movs	r4, r0
    4d48:	000f      	movs	r7, r1
  if (sercom == SERCOM5) {
    4d4a:	429a      	cmp	r2, r3
    4d4c:	d100      	bne.n	4d50 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x14>
    sampleRate = SAMPLE_RATE_x16;
    4d4e:	2601      	movs	r6, #1
  initClockNVIC();
    4d50:	0020      	movs	r0, r4
    4d52:	f7ff ff97 	bl	4c84 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    4d56:	0020      	movs	r0, r4
    4d58:	f7ff ff49 	bl	4bee <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4d5c:	221c      	movs	r2, #28
    4d5e:	00bb      	lsls	r3, r7, #2
    4d60:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    4d62:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4d64:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    4d66:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4d68:	4313      	orrs	r3, r2
    4d6a:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    4d6c:	2384      	movs	r3, #132	; 0x84
    4d6e:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    4d70:	2f01      	cmp	r7, #1
    4d72:	d118      	bne.n	4da6 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6a>
      sampleRateValue = 16;
    4d74:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    4d76:	2e01      	cmp	r6, #1
    4d78:	d000      	beq.n	4d7c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x40>
      sampleRateValue = 8;
    4d7a:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SercomClock * 8) / (sampleRateValue * baudrate);
    4d7c:	4b0b      	ldr	r3, [pc, #44]	; (4dac <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x70>)
    4d7e:	4369      	muls	r1, r5
    4d80:	6818      	ldr	r0, [r3, #0]
    4d82:	00c0      	lsls	r0, r0, #3
    4d84:	f003 fbb6 	bl	84f4 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    4d88:	2207      	movs	r2, #7
    4d8a:	89a3      	ldrh	r3, [r4, #12]
    4d8c:	4002      	ands	r2, r0
    4d8e:	04db      	lsls	r3, r3, #19
    4d90:	0352      	lsls	r2, r2, #13
    4d92:	0cdb      	lsrs	r3, r3, #19
    4d94:	4313      	orrs	r3, r2
    4d96:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    4d98:	0403      	lsls	r3, r0, #16
    4d9a:	89a0      	ldrh	r0, [r4, #12]
    4d9c:	0cdb      	lsrs	r3, r3, #19
    4d9e:	0b40      	lsrs	r0, r0, #13
    4da0:	0340      	lsls	r0, r0, #13
    4da2:	4318      	orrs	r0, r3
    4da4:	81a0      	strh	r0, [r4, #12]
}
    4da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4da8:	43000400 	.word	0x43000400
    4dac:	2000004c 	.word	0x2000004c

00004db0 <_ZN4UartcvbEv>:
    void errorHandler();
#else
    void IrqHandler();
#endif

    operator bool() { return true; }
    4db0:	2001      	movs	r0, #1
    4db2:	4770      	bx	lr

00004db4 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    4db4:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    4db6:	6803      	ldr	r3, [r0, #0]
    4db8:	4a01      	ldr	r2, [pc, #4]	; (4dc0 <_ZN4Uart5beginEm+0xc>)
    4dba:	6a1b      	ldr	r3, [r3, #32]
    4dbc:	4798      	blx	r3
}
    4dbe:	bd10      	pop	{r4, pc}
    4dc0:	00000413 	.word	0x00000413

00004dc4 <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    4dc4:	b510      	push	{r4, lr}
    4dc6:	0004      	movs	r4, r0
  sercom->resetUART();
    4dc8:	6900      	ldr	r0, [r0, #16]
    4dca:	f7ff ff10 	bl	4bee <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    4dce:	0020      	movs	r0, r4
    4dd0:	3014      	adds	r0, #20
    4dd2:	f002 fce1 	bl	7798 <_ZN10RingBuffer5clearEv>
  txBuffer.clear();
    4dd6:	0020      	movs	r0, r4
    4dd8:	305c      	adds	r0, #92	; 0x5c
    4dda:	f002 fcdd 	bl	7798 <_ZN10RingBuffer5clearEv>
}
    4dde:	bd10      	pop	{r4, pc}

00004de0 <_ZN4Uart9availableEv>:
  }
}
#endif

int Uart::available()
{
    4de0:	b510      	push	{r4, lr}
  return rxBuffer.available();
    4de2:	3014      	adds	r0, #20
    4de4:	f002 fcec 	bl	77c0 <_ZN10RingBuffer9availableEv>
}
    4de8:	bd10      	pop	{r4, pc}

00004dea <_ZN4Uart5flushEv>:
{
    4dea:	b510      	push	{r4, lr}
    4dec:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    4dee:	0020      	movs	r0, r4
    4df0:	305c      	adds	r0, #92	; 0x5c
    4df2:	f002 fce5 	bl	77c0 <_ZN10RingBuffer9availableEv>
    4df6:	2800      	cmp	r0, #0
    4df8:	d1f9      	bne.n	4dee <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    4dfa:	6920      	ldr	r0, [r4, #16]
    4dfc:	f7ff ff0c 	bl	4c18 <_ZN6SERCOM9flushUARTEv>
}
    4e00:	bd10      	pop	{r4, pc}

00004e02 <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    4e02:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    4e04:	305c      	adds	r0, #92	; 0x5c
    4e06:	f002 fce1 	bl	77cc <_ZN10RingBuffer17availableForStoreEv>
}
    4e0a:	bd10      	pop	{r4, pc}

00004e0c <_ZN4Uart4readEv>:
{
  return rxBuffer.peek();
}

int Uart::read()
{
    4e0c:	b570      	push	{r4, r5, r6, lr}
  int c = rxBuffer.read_char();
    4e0e:	0005      	movs	r5, r0
{
    4e10:	0004      	movs	r4, r0
  int c = rxBuffer.read_char();
    4e12:	3514      	adds	r5, #20
    4e14:	0028      	movs	r0, r5
    4e16:	f002 fcc3 	bl	77a0 <_ZN10RingBuffer9read_charEv>

  if (uc_pinRTS != NO_RTS_PIN) {
    4e1a:	0023      	movs	r3, r4
    4e1c:	33a8      	adds	r3, #168	; 0xa8
    4e1e:	781b      	ldrb	r3, [r3, #0]
  int c = rxBuffer.read_char();
    4e20:	0006      	movs	r6, r0
  if (uc_pinRTS != NO_RTS_PIN) {
    4e22:	2bff      	cmp	r3, #255	; 0xff
    4e24:	d00a      	beq.n	4e3c <_ZN4Uart4readEv+0x30>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    4e26:	0028      	movs	r0, r5
    4e28:	f002 fcd0 	bl	77cc <_ZN10RingBuffer17availableForStoreEv>
    4e2c:	280a      	cmp	r0, #10
    4e2e:	dd05      	ble.n	4e3c <_ZN4Uart4readEv+0x30>
      *pul_outclrRTS = ul_pinMaskRTS;
    4e30:	0023      	movs	r3, r4
    4e32:	34b4      	adds	r4, #180	; 0xb4
    4e34:	33b0      	adds	r3, #176	; 0xb0
    4e36:	681b      	ldr	r3, [r3, #0]
    4e38:	6822      	ldr	r2, [r4, #0]
    4e3a:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
}
    4e3c:	0030      	movs	r0, r6
    4e3e:	bd70      	pop	{r4, r5, r6, pc}

00004e40 <_ZN4Uart4peekEv>:
{
    4e40:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    4e42:	3014      	adds	r0, #20
    4e44:	f002 fcd0 	bl	77e8 <_ZN10RingBuffer4peekEv>
}
    4e48:	bd10      	pop	{r4, pc}
	...

00004e4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    4e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e4e:	001d      	movs	r5, r3
    4e50:	ab08      	add	r3, sp, #32
    4e52:	781b      	ldrb	r3, [r3, #0]
    4e54:	0004      	movs	r4, r0
    4e56:	9300      	str	r3, [sp, #0]
    4e58:	ab09      	add	r3, sp, #36	; 0x24
    4e5a:	781b      	ldrb	r3, [r3, #0]
    4e5c:	0016      	movs	r6, r2
    4e5e:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
    4e60:	2300      	movs	r3, #0
    4e62:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4e64:	23fa      	movs	r3, #250	; 0xfa
    4e66:	009b      	lsls	r3, r3, #2
    4e68:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    4e6a:	4b0e      	ldr	r3, [pc, #56]	; (4ea4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    4e6c:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    4e6e:	3308      	adds	r3, #8
    4e70:	6003      	str	r3, [r0, #0]
    4e72:	3014      	adds	r0, #20
    4e74:	f002 fc7a 	bl	776c <_ZN10RingBufferC1Ev>
    4e78:	0020      	movs	r0, r4
    4e7a:	305c      	adds	r0, #92	; 0x5c
    4e7c:	f002 fc76 	bl	776c <_ZN10RingBufferC1Ev>
  uc_padRX = _padRX ;
    4e80:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    4e82:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
    4e84:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    4e86:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
    4e88:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
    4e8a:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
    4e8c:	466a      	mov	r2, sp
    4e8e:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    4e90:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
    4e92:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
    4e94:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
    4e96:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
    4e98:	23ff      	movs	r3, #255	; 0xff
    4e9a:	32a8      	adds	r2, #168	; 0xa8
}
    4e9c:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
    4e9e:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
    4ea0:	7413      	strb	r3, [r2, #16]
}
    4ea2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4ea4:	0000fd94 	.word	0x0000fd94

00004ea8 <_ZN4Uart10IrqHandlerEv>:
{
    4ea8:	b570      	push	{r4, r5, r6, lr}
    4eaa:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    4eac:	6900      	ldr	r0, [r0, #16]
    4eae:	f7ff febf 	bl	4c30 <_ZN6SERCOM17availableDataUARTEv>
    4eb2:	2800      	cmp	r0, #0
    4eb4:	d019      	beq.n	4eea <_ZN4Uart10IrqHandlerEv+0x42>
    rxBuffer.store_char(sercom->readDataUART());
    4eb6:	0025      	movs	r5, r4
    4eb8:	6920      	ldr	r0, [r4, #16]
    4eba:	f7ff fece 	bl	4c5a <_ZN6SERCOM12readDataUARTEv>
    4ebe:	3514      	adds	r5, #20
    4ec0:	0001      	movs	r1, r0
    4ec2:	0028      	movs	r0, r5
    4ec4:	f002 fc5d 	bl	7782 <_ZN10RingBuffer10store_charEh>
    if (uc_pinRTS != NO_RTS_PIN) {
    4ec8:	0023      	movs	r3, r4
    4eca:	33a8      	adds	r3, #168	; 0xa8
    4ecc:	781b      	ldrb	r3, [r3, #0]
    4ece:	2bff      	cmp	r3, #255	; 0xff
    4ed0:	d00b      	beq.n	4eea <_ZN4Uart10IrqHandlerEv+0x42>
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    4ed2:	0028      	movs	r0, r5
    4ed4:	f002 fc7a 	bl	77cc <_ZN10RingBuffer17availableForStoreEv>
    4ed8:	2809      	cmp	r0, #9
    4eda:	dc06      	bgt.n	4eea <_ZN4Uart10IrqHandlerEv+0x42>
        *pul_outsetRTS = ul_pinMaskRTS;
    4edc:	0023      	movs	r3, r4
    4ede:	0022      	movs	r2, r4
    4ee0:	33ac      	adds	r3, #172	; 0xac
    4ee2:	32b4      	adds	r2, #180	; 0xb4
    4ee4:	681b      	ldr	r3, [r3, #0]
    4ee6:	6812      	ldr	r2, [r2, #0]
    4ee8:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    4eea:	6920      	ldr	r0, [r4, #16]
    4eec:	f7ff feb0 	bl	4c50 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    4ef0:	2800      	cmp	r0, #0
    4ef2:	d00d      	beq.n	4f10 <_ZN4Uart10IrqHandlerEv+0x68>
    if (txBuffer.available()) {
    4ef4:	0025      	movs	r5, r4
    4ef6:	355c      	adds	r5, #92	; 0x5c
    4ef8:	0028      	movs	r0, r5
    4efa:	f002 fc61 	bl	77c0 <_ZN10RingBuffer9availableEv>
    4efe:	2800      	cmp	r0, #0
    4f00:	d012      	beq.n	4f28 <_ZN4Uart10IrqHandlerEv+0x80>
      uint8_t data = txBuffer.read_char();
    4f02:	0028      	movs	r0, r5
    4f04:	f002 fc4c 	bl	77a0 <_ZN10RingBuffer9read_charEv>
      sercom->writeDataUART(data);
    4f08:	b2c1      	uxtb	r1, r0
    4f0a:	6920      	ldr	r0, [r4, #16]
    4f0c:	f7ff fea9 	bl	4c62 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    4f10:	6920      	ldr	r0, [r4, #16]
    4f12:	f7ff fe92 	bl	4c3a <_ZN6SERCOM11isUARTErrorEv>
    4f16:	2800      	cmp	r0, #0
    4f18:	d005      	beq.n	4f26 <_ZN4Uart10IrqHandlerEv+0x7e>
    sercom->acknowledgeUARTError();
    4f1a:	6920      	ldr	r0, [r4, #16]
    4f1c:	f7ff fe91 	bl	4c42 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    4f20:	6920      	ldr	r0, [r4, #16]
    4f22:	f7ff fe81 	bl	4c28 <_ZN6SERCOM15clearStatusUARTEv>
}
    4f26:	bd70      	pop	{r4, r5, r6, pc}
      sercom->disableDataRegisterEmptyInterruptUART();
    4f28:	6920      	ldr	r0, [r4, #16]
    4f2a:	f7ff fea6 	bl	4c7a <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    4f2e:	e7ef      	b.n	4f10 <_ZN4Uart10IrqHandlerEv+0x68>

00004f30 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    4f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f32:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    4f34:	6900      	ldr	r0, [r0, #16]
{
    4f36:	000e      	movs	r6, r1
    4f38:	0025      	movs	r5, r4
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    4f3a:	f7ff fe89 	bl	4c50 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    4f3e:	355c      	adds	r5, #92	; 0x5c
    4f40:	2800      	cmp	r0, #0
    4f42:	d120      	bne.n	4f86 <_ZN4Uart5writeEh+0x56>
    while(txBuffer.isFull()) {
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);

      if (interruptsEnabled) {
        //uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    4f44:	273f      	movs	r7, #63	; 0x3f
    while(txBuffer.isFull()) {
    4f46:	0028      	movs	r0, r5
    4f48:	f002 fc58 	bl	77fc <_ZN10RingBuffer6isFullEv>
    4f4c:	2800      	cmp	r0, #0
    4f4e:	d02d      	beq.n	4fac <_ZN4Uart5writeEh+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4f50:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    4f54:	2201      	movs	r2, #1
    4f56:	4213      	tst	r3, r2
    4f58:	d10c      	bne.n	4f74 <_ZN4Uart5writeEh+0x44>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4f5a:	f3ef 8305 	mrs	r3, IPSR
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    4f5e:	403b      	ands	r3, r7

        if (exceptionNumber == 0 ||
    4f60:	d0f1      	beq.n	4f46 <_ZN4Uart5writeEh+0x16>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    4f62:	3b10      	subs	r3, #16
    4f64:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    4f66:	2b00      	cmp	r3, #0
    4f68:	db17      	blt.n	4f9a <_ZN4Uart5writeEh+0x6a>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    4f6a:	089b      	lsrs	r3, r3, #2
    4f6c:	33c0      	adds	r3, #192	; 0xc0
    4f6e:	4a14      	ldr	r2, [pc, #80]	; (4fc0 <_ZN4Uart5writeEh+0x90>)
    4f70:	009b      	lsls	r3, r3, #2
    4f72:	589b      	ldr	r3, [r3, r2]
        }
      }

      // interrupts are disabled or called from ISR with higher or equal priority than the SERCOM IRQ
      // manually call the UART IRQ handler when the data register is empty
      if (sercom->isDataRegisterEmptyUART()) {
    4f74:	6920      	ldr	r0, [r4, #16]
    4f76:	f7ff fe6b 	bl	4c50 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    4f7a:	2800      	cmp	r0, #0
    4f7c:	d0e3      	beq.n	4f46 <_ZN4Uart5writeEh+0x16>
#if (SAMD51)
        dataRegisterEmptyHandler();
#else
        IrqHandler();
    4f7e:	0020      	movs	r0, r4
    4f80:	f7ff ff92 	bl	4ea8 <_ZN4Uart10IrqHandlerEv>
    4f84:	e7df      	b.n	4f46 <_ZN4Uart5writeEh+0x16>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    4f86:	0028      	movs	r0, r5
    4f88:	f002 fc1a 	bl	77c0 <_ZN10RingBuffer9availableEv>
    4f8c:	2800      	cmp	r0, #0
    4f8e:	d1d9      	bne.n	4f44 <_ZN4Uart5writeEh+0x14>
    sercom->writeDataUART(data);
    4f90:	0031      	movs	r1, r6
    4f92:	6920      	ldr	r0, [r4, #16]
    4f94:	f7ff fe65 	bl	4c62 <_ZN6SERCOM13writeDataUARTEh>
    txBuffer.store_char(data);

    sercom->enableDataRegisterEmptyInterruptUART();
  }

  return 1;
    4f98:	e00f      	b.n	4fba <_ZN4Uart5writeEh+0x8a>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    4f9a:	220f      	movs	r2, #15
    4f9c:	4013      	ands	r3, r2
    4f9e:	3b08      	subs	r3, #8
    4fa0:	089b      	lsrs	r3, r3, #2
    4fa2:	4a08      	ldr	r2, [pc, #32]	; (4fc4 <_ZN4Uart5writeEh+0x94>)
    4fa4:	009b      	lsls	r3, r3, #2
    4fa6:	189b      	adds	r3, r3, r2
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	e7e3      	b.n	4f74 <_ZN4Uart5writeEh+0x44>
    txBuffer.store_char(data);
    4fac:	0028      	movs	r0, r5
    4fae:	0031      	movs	r1, r6
    4fb0:	f002 fbe7 	bl	7782 <_ZN10RingBuffer10store_charEh>
    sercom->enableDataRegisterEmptyInterruptUART();
    4fb4:	6920      	ldr	r0, [r4, #16]
    4fb6:	f7ff fe5c 	bl	4c72 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    4fba:	2001      	movs	r0, #1
    4fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fbe:	46c0      	nop			; (mov r8, r8)
    4fc0:	e000e100 	.word	0xe000e100
    4fc4:	e000ed1c 	.word	0xe000ed1c

00004fc8 <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    4fc8:	20f0      	movs	r0, #240	; 0xf0
    4fca:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    4fcc:	3930      	subs	r1, #48	; 0x30
    4fce:	4248      	negs	r0, r1
    4fd0:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    4fd2:	4770      	bx	lr

00004fd4 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    4fd4:	23f0      	movs	r3, #240	; 0xf0
    4fd6:	011b      	lsls	r3, r3, #4
    4fd8:	4019      	ands	r1, r3
    4fda:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    4fdc:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    4fde:	009b      	lsls	r3, r3, #2
    4fe0:	4299      	cmp	r1, r3
    4fe2:	d00a      	beq.n	4ffa <_ZN4Uart15extractCharSizeEt+0x26>
    4fe4:	3301      	adds	r3, #1
    4fe6:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    4fe8:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    4fea:	4299      	cmp	r1, r3
    4fec:	d005      	beq.n	4ffa <_ZN4Uart15extractCharSizeEt+0x26>
    4fee:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    4ff0:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    4ff2:	005b      	lsls	r3, r3, #1
    4ff4:	4299      	cmp	r1, r3
    4ff6:	d000      	beq.n	4ffa <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    4ff8:	2000      	movs	r0, #0

  }
}
    4ffa:	4770      	bx	lr

00004ffc <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    4ffc:	200f      	movs	r0, #15
    4ffe:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    5000:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    5002:	2901      	cmp	r1, #1
    5004:	d003      	beq.n	500e <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    5006:	3902      	subs	r1, #2
    5008:	1e48      	subs	r0, r1, #1
    500a:	4181      	sbcs	r1, r0
    500c:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    500e:	4770      	bx	lr

00005010 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5010:	0003      	movs	r3, r0
{
    5012:	b5f0      	push	{r4, r5, r6, r7, lr}
    5014:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5016:	33a4      	adds	r3, #164	; 0xa4
{
    5018:	b085      	sub	sp, #20
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    501a:	7818      	ldrb	r0, [r3, #0]
{
    501c:	000f      	movs	r7, r1
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    501e:	210e      	movs	r1, #14
{
    5020:	0015      	movs	r5, r2
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    5022:	f7fe fdbf 	bl	3ba4 <pinPeripheral>
  pinPeripheral(uc_pinTX, PIO_SERCOM);
    5026:	0023      	movs	r3, r4
    5028:	33a5      	adds	r3, #165	; 0xa5
    502a:	7818      	ldrb	r0, [r3, #0]
    502c:	210e      	movs	r1, #14
    502e:	f7fe fdb9 	bl	3ba4 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    5032:	0023      	movs	r3, r4
    5034:	33a7      	adds	r3, #167	; 0xa7
    5036:	9303      	str	r3, [sp, #12]
    5038:	781b      	ldrb	r3, [r3, #0]
    503a:	2b02      	cmp	r3, #2
    503c:	d107      	bne.n	504e <_ZN4Uart5beginEmt+0x3e>
    if (uc_pinCTS != NO_CTS_PIN) {
    503e:	0023      	movs	r3, r4
    5040:	33b8      	adds	r3, #184	; 0xb8
    5042:	7818      	ldrb	r0, [r3, #0]
    5044:	28ff      	cmp	r0, #255	; 0xff
    5046:	d002      	beq.n	504e <_ZN4Uart5beginEmt+0x3e>
      pinPeripheral(uc_pinCTS, PIO_SERCOM);
    5048:	210e      	movs	r1, #14
    504a:	f7fe fdab 	bl	3ba4 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    504e:	0026      	movs	r6, r4
    5050:	36a8      	adds	r6, #168	; 0xa8
    5052:	7830      	ldrb	r0, [r6, #0]
    5054:	28ff      	cmp	r0, #255	; 0xff
    5056:	d01a      	beq.n	508e <_ZN4Uart5beginEmt+0x7e>
    pinMode(uc_pinRTS, OUTPUT);
    5058:	2101      	movs	r1, #1
    505a:	f7fe fd35 	bl	3ac8 <pinMode>
    uint8_t rtsPort = GetPort(uc_pinRTS);
    505e:	210c      	movs	r1, #12
    5060:	7833      	ldrb	r3, [r6, #0]
    5062:	4a1f      	ldr	r2, [pc, #124]	; (50e0 <_ZN4Uart5beginEmt+0xd0>)
    5064:	4359      	muls	r1, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    5066:	0020      	movs	r0, r4
    5068:	5c8b      	ldrb	r3, [r1, r2]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    506a:	1852      	adds	r2, r2, r1
    506c:	7851      	ldrb	r1, [r2, #1]
    506e:	2201      	movs	r2, #1
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    5070:	4e1c      	ldr	r6, [pc, #112]	; (50e4 <_ZN4Uart5beginEmt+0xd4>)
    5072:	01db      	lsls	r3, r3, #7
    5074:	30ac      	adds	r0, #172	; 0xac
    5076:	199e      	adds	r6, r3, r6
    5078:	6006      	str	r6, [r0, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    507a:	481b      	ldr	r0, [pc, #108]	; (50e8 <_ZN4Uart5beginEmt+0xd8>)
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    507c:	408a      	lsls	r2, r1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    507e:	181b      	adds	r3, r3, r0
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    5080:	0021      	movs	r1, r4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    5082:	0020      	movs	r0, r4
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    5084:	31b4      	adds	r1, #180	; 0xb4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    5086:	30b0      	adds	r0, #176	; 0xb0
    5088:	6003      	str	r3, [r0, #0]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    508a:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
    508c:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    508e:	2201      	movs	r2, #1
    5090:	003b      	movs	r3, r7
    5092:	0011      	movs	r1, r2
    5094:	6920      	ldr	r0, [r4, #16]
    5096:	f7ff fe51 	bl	4d3c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    509a:	0029      	movs	r1, r5
    509c:	0020      	movs	r0, r4
    509e:	f7ff ff99 	bl	4fd4 <_ZN4Uart15extractCharSizeEt>
    50a2:	0029      	movs	r1, r5
    50a4:	0006      	movs	r6, r0
    50a6:	0020      	movs	r0, r4
    50a8:	f7ff ffa8 	bl	4ffc <_ZN4Uart13extractParityEt>
    50ac:	0029      	movs	r1, r5
    50ae:	0007      	movs	r7, r0
    50b0:	0020      	movs	r0, r4
    50b2:	f7ff ff89 	bl	4fc8 <_ZN4Uart16extractNbStopBitEt>
    50b6:	003b      	movs	r3, r7
    50b8:	9000      	str	r0, [sp, #0]
    50ba:	0031      	movs	r1, r6
    50bc:	6920      	ldr	r0, [r4, #16]
    50be:	2201      	movs	r2, #1
    50c0:	f7ff fd69 	bl	4b96 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    50c4:	0023      	movs	r3, r4
    50c6:	33a6      	adds	r3, #166	; 0xa6
    50c8:	781a      	ldrb	r2, [r3, #0]
    50ca:	9b03      	ldr	r3, [sp, #12]
    50cc:	6920      	ldr	r0, [r4, #16]
    50ce:	7819      	ldrb	r1, [r3, #0]
    50d0:	f7ff fd7b 	bl	4bca <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    50d4:	6920      	ldr	r0, [r4, #16]
    50d6:	f7ff fd96 	bl	4c06 <_ZN6SERCOM10enableUARTEv>
}
    50da:	b005      	add	sp, #20
    50dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50de:	46c0      	nop			; (mov r8, r8)
    50e0:	0000fbe0 	.word	0x0000fbe0
    50e4:	40002818 	.word	0x40002818
    50e8:	40002814 	.word	0x40002814

000050ec <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    50ec:	203f      	movs	r0, #63	; 0x3f
    50ee:	4770      	bx	lr

000050f0 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    50f0:	b513      	push	{r0, r1, r4, lr}
    50f2:	466b      	mov	r3, sp
	return write(&c, 1);
    50f4:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    50f6:	71d9      	strb	r1, [r3, #7]
    50f8:	3307      	adds	r3, #7
	return write(&c, 1);
    50fa:	6854      	ldr	r4, [r2, #4]
    50fc:	0019      	movs	r1, r3
    50fe:	2201      	movs	r2, #1
    5100:	47a0      	blx	r4
}
    5102:	bd16      	pop	{r1, r2, r4, pc}

00005104 <_ZN7Serial_9availableEv>:
{
    5104:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    5106:	2102      	movs	r1, #2
    5108:	6900      	ldr	r0, [r0, #16]
    510a:	f7fd ff69 	bl	2fe0 <_ZN14USBDeviceClass9availableEm>
}
    510e:	bd10      	pop	{r4, pc}

00005110 <_ZN7Serial_5flushEv>:
{
    5110:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    5112:	2103      	movs	r1, #3
    5114:	6900      	ldr	r0, [r0, #16]
    5116:	f7fd ff79 	bl	300c <_ZN14USBDeviceClass5flushEm>
}
    511a:	bd10      	pop	{r4, pc}

0000511c <_ZN7Serial_5writeEPKhj>:
{
    511c:	b510      	push	{r4, lr}
    511e:	0013      	movs	r3, r2
    5120:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    5122:	000a      	movs	r2, r1
    5124:	6900      	ldr	r0, [r0, #16]
    5126:	2103      	movs	r1, #3
    5128:	f7fe f86a 	bl	3200 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    512c:	2800      	cmp	r0, #0
    512e:	d101      	bne.n	5134 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    5130:	2301      	movs	r3, #1
    5132:	6063      	str	r3, [r4, #4]
}
    5134:	bd10      	pop	{r4, pc}
	...

00005138 <_ZN7Serial_4peekEv>:
{
    5138:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    513a:	4c05      	ldr	r4, [pc, #20]	; (5150 <_ZN7Serial_4peekEv+0x18>)
    513c:	6823      	ldr	r3, [r4, #0]
    513e:	1c5a      	adds	r2, r3, #1
    5140:	d104      	bne.n	514c <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    5142:	6803      	ldr	r3, [r0, #0]
    5144:	695b      	ldr	r3, [r3, #20]
    5146:	4798      	blx	r3
    5148:	0003      	movs	r3, r0
    514a:	6020      	str	r0, [r4, #0]
}
    514c:	0018      	movs	r0, r3
    514e:	bd10      	pop	{r4, pc}
    5150:	20000098 	.word	0x20000098

00005154 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    5154:	4b07      	ldr	r3, [pc, #28]	; (5174 <_ZN7Serial_4readEv+0x20>)
{
    5156:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    5158:	6818      	ldr	r0, [r3, #0]
{
    515a:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    515c:	1c41      	adds	r1, r0, #1
    515e:	d003      	beq.n	5168 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    5160:	2201      	movs	r2, #1
    5162:	4252      	negs	r2, r2
    5164:	601a      	str	r2, [r3, #0]
}
    5166:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    5168:	2102      	movs	r1, #2
    516a:	6910      	ldr	r0, [r2, #16]
    516c:	f7fe f83a 	bl	31e4 <_ZN14USBDeviceClass4recvEm>
    5170:	e7f9      	b.n	5166 <_ZN7Serial_4readEv+0x12>
    5172:	46c0      	nop			; (mov r8, r8)
    5174:	20000098 	.word	0x20000098

00005178 <_Z16CDC_GetInterfacePh>:
{
    5178:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    517a:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    517c:	223a      	movs	r2, #58	; 0x3a
	interfaceNum[0] += 2;	// uses 2
    517e:	3302      	adds	r3, #2
    5180:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    5182:	4902      	ldr	r1, [pc, #8]	; (518c <_Z16CDC_GetInterfacePh+0x14>)
    5184:	4802      	ldr	r0, [pc, #8]	; (5190 <_Z16CDC_GetInterfacePh+0x18>)
    5186:	f7fe f8e7 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    518a:	bd10      	pop	{r4, pc}
    518c:	2000005c 	.word	0x2000005c
    5190:	2000036c 	.word	0x2000036c

00005194 <_Z9CDC_SetupR8USBSetup>:
{
    5194:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    5196:	7801      	ldrb	r1, [r0, #0]
{
    5198:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    519a:	7842      	ldrb	r2, [r0, #1]
	return false;
    519c:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    519e:	29a1      	cmp	r1, #161	; 0xa1
    51a0:	d108      	bne.n	51b4 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    51a2:	2a21      	cmp	r2, #33	; 0x21
    51a4:	d105      	bne.n	51b2 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    51a6:	3a1a      	subs	r2, #26
    51a8:	4916      	ldr	r1, [pc, #88]	; (5204 <_Z9CDC_SetupR8USBSetup+0x70>)
    51aa:	4817      	ldr	r0, [pc, #92]	; (5208 <_Z9CDC_SetupR8USBSetup+0x74>)
    51ac:	f7fe f8d4 	bl	3358 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    51b0:	2001      	movs	r0, #1
}
    51b2:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    51b4:	2921      	cmp	r1, #33	; 0x21
    51b6:	d1fc      	bne.n	51b2 <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    51b8:	2a20      	cmp	r2, #32
    51ba:	d111      	bne.n	51e0 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    51bc:	3a19      	subs	r2, #25
    51be:	4911      	ldr	r1, [pc, #68]	; (5204 <_Z9CDC_SetupR8USBSetup+0x70>)
    51c0:	4811      	ldr	r0, [pc, #68]	; (5208 <_Z9CDC_SetupR8USBSetup+0x74>)
    51c2:	f7fd ff67 	bl	3094 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    51c6:	2296      	movs	r2, #150	; 0x96
    51c8:	4b0e      	ldr	r3, [pc, #56]	; (5204 <_Z9CDC_SetupR8USBSetup+0x70>)
    51ca:	00d2      	lsls	r2, r2, #3
    51cc:	6819      	ldr	r1, [r3, #0]
    51ce:	4291      	cmp	r1, r2
    51d0:	d103      	bne.n	51da <_Z9CDC_SetupR8USBSetup+0x46>
    51d2:	2401      	movs	r4, #1
    51d4:	79d8      	ldrb	r0, [r3, #7]
    51d6:	4004      	ands	r4, r0
    51d8:	d00e      	beq.n	51f8 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    51da:	f7fd fadd 	bl	2798 <cancelReset>
    51de:	e00e      	b.n	51fe <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    51e0:	2a22      	cmp	r2, #34	; 0x22
    51e2:	d103      	bne.n	51ec <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    51e4:	789a      	ldrb	r2, [r3, #2]
    51e6:	4b07      	ldr	r3, [pc, #28]	; (5204 <_Z9CDC_SetupR8USBSetup+0x70>)
    51e8:	71da      	strb	r2, [r3, #7]
    51ea:	e7ec      	b.n	51c6 <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    51ec:	2a23      	cmp	r2, #35	; 0x23
    51ee:	d1e0      	bne.n	51b2 <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    51f0:	885a      	ldrh	r2, [r3, #2]
    51f2:	4b06      	ldr	r3, [pc, #24]	; (520c <_Z9CDC_SetupR8USBSetup+0x78>)
    51f4:	601a      	str	r2, [r3, #0]
			return false;
    51f6:	e7dc      	b.n	51b2 <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    51f8:	20fa      	movs	r0, #250	; 0xfa
    51fa:	f7fd fac7 	bl	278c <initiateReset>
			return false;
    51fe:	2000      	movs	r0, #0
    5200:	e7d7      	b.n	51b2 <_Z9CDC_SetupR8USBSetup+0x1e>
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	20000054 	.word	0x20000054
    5208:	2000036c 	.word	0x2000036c
    520c:	20000050 	.word	0x20000050

00005210 <_ZN7Serial_5beginEm>:
}
    5210:	4770      	bx	lr
	...

00005214 <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
    5214:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    5216:	f7fd fa25 	bl	2664 <millis>
    521a:	23f4      	movs	r3, #244	; 0xf4
    521c:	33ff      	adds	r3, #255	; 0xff
		return false;
    521e:	2400      	movs	r4, #0
	if (millis() < 500)
    5220:	4298      	cmp	r0, r3
    5222:	d907      	bls.n	5234 <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    5224:	4b04      	ldr	r3, [pc, #16]	; (5238 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
    5226:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
    5228:	79dc      	ldrb	r4, [r3, #7]
    522a:	1e63      	subs	r3, r4, #1
    522c:	419c      	sbcs	r4, r3
    522e:	b2e4      	uxtb	r4, r4
	delay(10);
    5230:	f7fd fa4e 	bl	26d0 <delay>
	return result;
}
    5234:	0020      	movs	r0, r4
    5236:	bd10      	pop	{r4, pc}
    5238:	20000054 	.word	0x20000054

0000523c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    523c:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    523e:	2100      	movs	r1, #0
    5240:	4b05      	ldr	r3, [pc, #20]	; (5258 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    5242:	0092      	lsls	r2, r2, #2
    5244:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    5246:	4a05      	ldr	r2, [pc, #20]	; (525c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    5248:	6059      	str	r1, [r3, #4]
    524a:	3208      	adds	r2, #8
    524c:	601a      	str	r2, [r3, #0]
    524e:	4a04      	ldr	r2, [pc, #16]	; (5260 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    5250:	7619      	strb	r1, [r3, #24]
    5252:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    5254:	4770      	bx	lr
    5256:	46c0      	nop			; (mov r8, r8)
    5258:	20001148 	.word	0x20001148
    525c:	0000fdc8 	.word	0x0000fdc8
    5260:	2000036c 	.word	0x2000036c

00005264 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    5264:	b570      	push	{r4, r5, r6, lr}
    5266:	000e      	movs	r6, r1
	int sent = 0;
    5268:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    526a:	6844      	ldr	r4, [r0, #4]
    526c:	2c00      	cmp	r4, #0
    526e:	d00b      	beq.n	5288 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    5270:	6823      	ldr	r3, [r4, #0]
    5272:	0031      	movs	r1, r6
    5274:	685b      	ldr	r3, [r3, #4]
    5276:	0020      	movs	r0, r4
    5278:	4798      	blx	r3
		if (res < 0)
    527a:	2800      	cmp	r0, #0
    527c:	db02      	blt.n	5284 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    527e:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    5280:	68e4      	ldr	r4, [r4, #12]
    5282:	e7f3      	b.n	526c <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    5284:	2501      	movs	r5, #1
    5286:	426d      	negs	r5, r5
	}
	return sent;
}
    5288:	0028      	movs	r0, r5
    528a:	bd70      	pop	{r4, r5, r6, pc}

0000528c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    528c:	b570      	push	{r4, r5, r6, lr}
    528e:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5290:	6844      	ldr	r4, [r0, #4]
    5292:	2c00      	cmp	r4, #0
    5294:	d008      	beq.n	52a8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    5296:	6823      	ldr	r3, [r4, #0]
    5298:	0029      	movs	r1, r5
    529a:	689b      	ldr	r3, [r3, #8]
    529c:	0020      	movs	r0, r4
    529e:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    52a0:	2800      	cmp	r0, #0
    52a2:	d102      	bne.n	52aa <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    52a4:	68e4      	ldr	r4, [r4, #12]
    52a6:	e7f4      	b.n	5292 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    52a8:	0020      	movs	r0, r4
}
    52aa:	bd70      	pop	{r4, r5, r6, pc}

000052ac <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    52ac:	b570      	push	{r4, r5, r6, lr}
    52ae:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    52b0:	6844      	ldr	r4, [r0, #4]
    52b2:	2c00      	cmp	r4, #0
    52b4:	d007      	beq.n	52c6 <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    52b6:	6823      	ldr	r3, [r4, #0]
    52b8:	0029      	movs	r1, r5
    52ba:	0020      	movs	r0, r4
    52bc:	68db      	ldr	r3, [r3, #12]
    52be:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    52c0:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    52c2:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    52c4:	e7f5      	b.n	52b2 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    52c6:	702c      	strb	r4, [r5, #0]
}
    52c8:	bd70      	pop	{r4, r5, r6, pc}

000052ca <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    52ca:	b570      	push	{r4, r5, r6, lr}
    52cc:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    52ce:	6844      	ldr	r4, [r0, #4]
    52d0:	2c00      	cmp	r4, #0
    52d2:	d008      	beq.n	52e6 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    52d4:	6823      	ldr	r3, [r4, #0]
    52d6:	0029      	movs	r1, r5
    52d8:	681b      	ldr	r3, [r3, #0]
    52da:	0020      	movs	r0, r4
    52dc:	4798      	blx	r3
    52de:	2800      	cmp	r0, #0
    52e0:	d102      	bne.n	52e8 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    52e2:	68e4      	ldr	r4, [r4, #12]
    52e4:	e7f4      	b.n	52d0 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    52e6:	0020      	movs	r0, r4
}
    52e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000052ec <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    52ec:	2101      	movs	r1, #1
    52ee:	4a06      	ldr	r2, [pc, #24]	; (5308 <_Z12PluggableUSBv+0x1c>)
{
    52f0:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    52f2:	6813      	ldr	r3, [r2, #0]
    52f4:	4805      	ldr	r0, [pc, #20]	; (530c <_Z12PluggableUSBv+0x20>)
    52f6:	400b      	ands	r3, r1
    52f8:	d105      	bne.n	5306 <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    52fa:	2402      	movs	r4, #2
    52fc:	7004      	strb	r4, [r0, #0]
    52fe:	1924      	adds	r4, r4, r4
    5300:	7044      	strb	r4, [r0, #1]
    5302:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    5304:	6011      	str	r1, [r2, #0]
}
    5306:	bd10      	pop	{r4, pc}
    5308:	20001164 	.word	0x20001164
    530c:	20001168 	.word	0x20001168

00005310 <_ZN3DHTC1Ehhh>:
  _type = type;
  #ifdef __AVR
    _bit = digitalPinToBitMask(pin);
    _port = digitalPinToPort(pin);
  #endif
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    5310:	4b07      	ldr	r3, [pc, #28]	; (5330 <_ZN3DHTC1Ehhh+0x20>)
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
    5312:	b510      	push	{r4, lr}
    5314:	0004      	movs	r4, r0
  _pin = pin;
    5316:	7141      	strb	r1, [r0, #5]
  _type = type;
    5318:	7182      	strb	r2, [r0, #6]
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    531a:	4906      	ldr	r1, [pc, #24]	; (5334 <_ZN3DHTC1Ehhh+0x24>)
    531c:	6818      	ldr	r0, [r3, #0]
    531e:	f003 f8e9 	bl	84f4 <__udivsi3>
    5322:	23fa      	movs	r3, #250	; 0xfa
    5324:	009b      	lsls	r3, r3, #2
    5326:	4358      	muls	r0, r3
    5328:	60e0      	str	r0, [r4, #12]
                                                 // reading pulses from DHT sensor.
  // Note that count is now ignored as the DHT reading algorithm adjusts itself
  // basd on the speed of the processor.
}
    532a:	0020      	movs	r0, r4
    532c:	bd10      	pop	{r4, pc}
    532e:	46c0      	nop			; (mov r8, r8)
    5330:	20000038 	.word	0x20000038
    5334:	000f4240 	.word	0x000f4240

00005338 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
    5338:	b510      	push	{r4, lr}
    533a:	0004      	movs	r4, r0
  // set up the pins!
  pinMode(_pin, INPUT_PULLUP);
    533c:	2102      	movs	r1, #2
    533e:	7940      	ldrb	r0, [r0, #5]
    5340:	f7fe fbc2 	bl	3ac8 <pinMode>
  // Using this value makes sure that millis() - lastreadtime will be
  // >= MIN_INTERVAL right away. Note that this assignment wraps around,
  // but so will the subtraction.
  _lastreadtime = -MIN_INTERVAL;
    5344:	4b01      	ldr	r3, [pc, #4]	; (534c <_ZN3DHT5beginEv+0x14>)
    5346:	60a3      	str	r3, [r4, #8]
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}
    5348:	bd10      	pop	{r4, pc}
    534a:	46c0      	nop			; (mov r8, r8)
    534c:	fffff830 	.word	0xfffff830

00005350 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    5350:	b570      	push	{r4, r5, r6, lr}
    5352:	0005      	movs	r5, r0
    5354:	000e      	movs	r6, r1
  uint32_t count = 0;
    5356:	2400      	movs	r4, #0
      }
    }
  // Otherwise fall back to using digitalRead (this seems to be necessary on ESP8266
  // right now, perhaps bugs in direct port access functions?).
  #else
    while (digitalRead(_pin) == level) {
    5358:	7968      	ldrb	r0, [r5, #5]
    535a:	f7fe fc0d 	bl	3b78 <digitalRead>
    535e:	42b0      	cmp	r0, r6
    5360:	d104      	bne.n	536c <_ZN3DHT11expectPulseEb+0x1c>
      if (count++ >= _maxcycles) {
    5362:	68ea      	ldr	r2, [r5, #12]
    5364:	1c63      	adds	r3, r4, #1
    5366:	4294      	cmp	r4, r2
    5368:	d302      	bcc.n	5370 <_ZN3DHT11expectPulseEb+0x20>
        return 0; // Exceeded timeout, fail.
    536a:	2400      	movs	r4, #0
      }
    }
  #endif

  return count;
}
    536c:	0020      	movs	r0, r4
    536e:	bd70      	pop	{r4, r5, r6, pc}
      if (count++ >= _maxcycles) {
    5370:	001c      	movs	r4, r3
    5372:	e7f1      	b.n	5358 <_ZN3DHT11expectPulseEb+0x8>

00005374 <_ZN3DHT4readEb>:
boolean DHT::read(bool force) {
    5374:	b570      	push	{r4, r5, r6, lr}
    5376:	b0d0      	sub	sp, #320	; 0x140
    5378:	000d      	movs	r5, r1
    537a:	0004      	movs	r4, r0
  uint32_t currenttime = millis();
    537c:	f7fd f972 	bl	2664 <millis>
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
    5380:	2d00      	cmp	r5, #0
    5382:	d107      	bne.n	5394 <_ZN3DHT4readEb+0x20>
    5384:	68a3      	ldr	r3, [r4, #8]
    5386:	4a3d      	ldr	r2, [pc, #244]	; (547c <_ZN3DHT4readEb+0x108>)
    5388:	1ac3      	subs	r3, r0, r3
    538a:	4293      	cmp	r3, r2
    538c:	d802      	bhi.n	5394 <_ZN3DHT4readEb+0x20>
    return _lastresult; // return last correct measurement
    538e:	7c20      	ldrb	r0, [r4, #16]
}
    5390:	b050      	add	sp, #320	; 0x140
    5392:	bd70      	pop	{r4, r5, r6, pc}
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    5394:	2500      	movs	r5, #0
  _lastreadtime = currenttime;
    5396:	60a0      	str	r0, [r4, #8]
  digitalWrite(_pin, HIGH);
    5398:	2101      	movs	r1, #1
    539a:	7960      	ldrb	r0, [r4, #5]
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    539c:	7125      	strb	r5, [r4, #4]
    539e:	70e5      	strb	r5, [r4, #3]
    53a0:	70a5      	strb	r5, [r4, #2]
    53a2:	7065      	strb	r5, [r4, #1]
    53a4:	7025      	strb	r5, [r4, #0]
  digitalWrite(_pin, HIGH);
    53a6:	f7fe fb93 	bl	3ad0 <digitalWrite>
  delay(250);
    53aa:	20fa      	movs	r0, #250	; 0xfa
    53ac:	f7fd f990 	bl	26d0 <delay>
  pinMode(_pin, OUTPUT);
    53b0:	7960      	ldrb	r0, [r4, #5]
    53b2:	2101      	movs	r1, #1
    53b4:	f7fe fb88 	bl	3ac8 <pinMode>
  digitalWrite(_pin, LOW);
    53b8:	7960      	ldrb	r0, [r4, #5]
    53ba:	0029      	movs	r1, r5
    53bc:	f7fe fb88 	bl	3ad0 <digitalWrite>
  delay(20);
    53c0:	2014      	movs	r0, #20
    53c2:	f7fd f985 	bl	26d0 <delay>
  __ASM volatile ("cpsid i" : : : "memory");
    53c6:	b672      	cpsid	i
    digitalWrite(_pin, HIGH);
    53c8:	2101      	movs	r1, #1
    53ca:	7960      	ldrb	r0, [r4, #5]
    53cc:	f7fe fb80 	bl	3ad0 <digitalWrite>
    "   sub %0, #1   \n" // substract 1 from %0 (n)
    "   bne 1b       \n" // if result is not 0 jump to 1
    : "+r" (n)           // '%0' is n variable with RW constraints
    :                    // no input
    :                    // no clobber
  );
    53d0:	23a0      	movs	r3, #160	; 0xa0
    53d2:	009b      	lsls	r3, r3, #2
    53d4:	3b01      	subs	r3, #1
    53d6:	d1fd      	bne.n	53d4 <_ZN3DHT4readEb+0x60>
    pinMode(_pin, INPUT_PULLUP);
    53d8:	2102      	movs	r1, #2
    53da:	7960      	ldrb	r0, [r4, #5]
    53dc:	f7fe fb74 	bl	3ac8 <pinMode>
    53e0:	23a0      	movs	r3, #160	; 0xa0
    53e2:	3b01      	subs	r3, #1
    53e4:	d1fd      	bne.n	53e2 <_ZN3DHT4readEb+0x6e>
    if (expectPulse(LOW) == 0) {
    53e6:	0029      	movs	r1, r5
    53e8:	0020      	movs	r0, r4
    53ea:	f7ff ffb1 	bl	5350 <_ZN3DHT11expectPulseEb>
    53ee:	42a8      	cmp	r0, r5
    53f0:	d103      	bne.n	53fa <_ZN3DHT4readEb+0x86>
      _lastresult = false;
    53f2:	2000      	movs	r0, #0
    53f4:	7420      	strb	r0, [r4, #16]
  __ASM volatile ("cpsie i" : : : "memory");
    53f6:	b662      	cpsie	i
    53f8:	e7ca      	b.n	5390 <_ZN3DHT4readEb+0x1c>
    if (expectPulse(HIGH) == 0) {
    53fa:	2101      	movs	r1, #1
    53fc:	0020      	movs	r0, r4
    53fe:	f7ff ffa7 	bl	5350 <_ZN3DHT11expectPulseEb>
    5402:	2800      	cmp	r0, #0
    5404:	d0f5      	beq.n	53f2 <_ZN3DHT4readEb+0x7e>
    for (int i=0; i<80; i+=2) {
    5406:	26a0      	movs	r6, #160	; 0xa0
    5408:	0076      	lsls	r6, r6, #1
      cycles[i]   = expectPulse(LOW);
    540a:	2100      	movs	r1, #0
    540c:	0020      	movs	r0, r4
    540e:	f7ff ff9f 	bl	5350 <_ZN3DHT11expectPulseEb>
    5412:	466b      	mov	r3, sp
      cycles[i+1] = expectPulse(HIGH);
    5414:	2101      	movs	r1, #1
      cycles[i]   = expectPulse(LOW);
    5416:	50e8      	str	r0, [r5, r3]
      cycles[i+1] = expectPulse(HIGH);
    5418:	0020      	movs	r0, r4
    541a:	f7ff ff99 	bl	5350 <_ZN3DHT11expectPulseEb>
    541e:	002b      	movs	r3, r5
    5420:	3508      	adds	r5, #8
    5422:	446b      	add	r3, sp
    5424:	6058      	str	r0, [r3, #4]
    for (int i=0; i<80; i+=2) {
    5426:	42b5      	cmp	r5, r6
    5428:	d1ef      	bne.n	540a <_ZN3DHT4readEb+0x96>
    542a:	b662      	cpsie	i
  for (int i=0; i<40; ++i) {
    542c:	2200      	movs	r2, #0
      data[i/8] |= 1;
    542e:	2101      	movs	r1, #1
    uint32_t lowCycles  = cycles[2*i];
    5430:	4668      	mov	r0, sp
    5432:	00d3      	lsls	r3, r2, #3
    5434:	58c0      	ldr	r0, [r0, r3]
    uint32_t highCycles = cycles[2*i+1];
    5436:	446b      	add	r3, sp
    5438:	685e      	ldr	r6, [r3, #4]
    if ((lowCycles == 0) || (highCycles == 0)) {
    543a:	2800      	cmp	r0, #0
    543c:	d001      	beq.n	5442 <_ZN3DHT4readEb+0xce>
    543e:	2e00      	cmp	r6, #0
    5440:	d102      	bne.n	5448 <_ZN3DHT4readEb+0xd4>
      _lastresult = false;
    5442:	2000      	movs	r0, #0
    _lastresult = true;
    5444:	7420      	strb	r0, [r4, #16]
    return _lastresult;
    5446:	e7a3      	b.n	5390 <_ZN3DHT4readEb+0x1c>
    data[i/8] <<= 1;
    5448:	10d5      	asrs	r5, r2, #3
    544a:	5d63      	ldrb	r3, [r4, r5]
    544c:	005b      	lsls	r3, r3, #1
    544e:	b2db      	uxtb	r3, r3
    if (highCycles > lowCycles) {
    5450:	42b0      	cmp	r0, r6
    5452:	d310      	bcc.n	5476 <_ZN3DHT4readEb+0x102>
  for (int i=0; i<40; ++i) {
    5454:	3201      	adds	r2, #1
      data[i/8] |= 1;
    5456:	5563      	strb	r3, [r4, r5]
  for (int i=0; i<40; ++i) {
    5458:	2a28      	cmp	r2, #40	; 0x28
    545a:	d1e9      	bne.n	5430 <_ZN3DHT4readEb+0xbc>
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    545c:	7861      	ldrb	r1, [r4, #1]
    545e:	7823      	ldrb	r3, [r4, #0]
    5460:	7922      	ldrb	r2, [r4, #4]
    5462:	185b      	adds	r3, r3, r1
    5464:	78a1      	ldrb	r1, [r4, #2]
    5466:	185b      	adds	r3, r3, r1
    5468:	78e1      	ldrb	r1, [r4, #3]
    546a:	185b      	adds	r3, r3, r1
    546c:	b2db      	uxtb	r3, r3
    546e:	429a      	cmp	r2, r3
    5470:	d1e7      	bne.n	5442 <_ZN3DHT4readEb+0xce>
    _lastresult = true;
    5472:	2001      	movs	r0, #1
    5474:	e7e6      	b.n	5444 <_ZN3DHT4readEb+0xd0>
      data[i/8] |= 1;
    5476:	430b      	orrs	r3, r1
    5478:	e7ec      	b.n	5454 <_ZN3DHT4readEb+0xe0>
    547a:	46c0      	nop			; (mov r8, r8)
    547c:	000007cf 	.word	0x000007cf

00005480 <_ZN3DHT15readTemperatureEbb>:
float DHT::readTemperature(bool S, bool force) {
    5480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5482:	000d      	movs	r5, r1
  if (read(force)) {
    5484:	0011      	movs	r1, r2
float DHT::readTemperature(bool S, bool force) {
    5486:	0004      	movs	r4, r0
  if (read(force)) {
    5488:	f7ff ff74 	bl	5374 <_ZN3DHT4readEb>
    548c:	2800      	cmp	r0, #0
    548e:	d007      	beq.n	54a0 <_ZN3DHT15readTemperatureEbb+0x20>
    switch (_type) {
    5490:	79a3      	ldrb	r3, [r4, #6]
    5492:	b2da      	uxtb	r2, r3
    5494:	2a0b      	cmp	r2, #11
    5496:	d005      	beq.n	54a4 <_ZN3DHT15readTemperatureEbb+0x24>
    5498:	d302      	bcc.n	54a0 <_ZN3DHT15readTemperatureEbb+0x20>
    549a:	3b15      	subs	r3, #21
    549c:	2b01      	cmp	r3, #1
    549e:	d913      	bls.n	54c8 <_ZN3DHT15readTemperatureEbb+0x48>
  float f = NAN;
    54a0:	4819      	ldr	r0, [pc, #100]	; (5508 <_ZN3DHT15readTemperatureEbb+0x88>)
  return f;
    54a2:	e010      	b.n	54c6 <_ZN3DHT15readTemperatureEbb+0x46>
      f = data[2];
    54a4:	78a0      	ldrb	r0, [r4, #2]
    54a6:	f004 f90f 	bl	96c8 <__aeabi_ui2f>
      if(S) {
    54aa:	2d00      	cmp	r5, #0
    54ac:	d00b      	beq.n	54c6 <_ZN3DHT15readTemperatureEbb+0x46>
  return c * 1.8 + 32;
    54ae:	f005 fef9 	bl	b2a4 <__aeabi_f2d>
    54b2:	4a16      	ldr	r2, [pc, #88]	; (550c <_ZN3DHT15readTemperatureEbb+0x8c>)
    54b4:	4b16      	ldr	r3, [pc, #88]	; (5510 <_ZN3DHT15readTemperatureEbb+0x90>)
    54b6:	f005 f891 	bl	a5dc <__aeabi_dmul>
    54ba:	2200      	movs	r2, #0
    54bc:	4b15      	ldr	r3, [pc, #84]	; (5514 <_ZN3DHT15readTemperatureEbb+0x94>)
    54be:	f004 f949 	bl	9754 <__aeabi_dadd>
    54c2:	f005 ff41 	bl	b348 <__aeabi_d2f>
}
    54c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      f = data[2] & 0x7F;
    54c8:	207f      	movs	r0, #127	; 0x7f
    54ca:	78a6      	ldrb	r6, [r4, #2]
    54cc:	4030      	ands	r0, r6
    54ce:	f004 f8ab 	bl	9628 <__aeabi_i2f>
      f *= 256;
    54d2:	2187      	movs	r1, #135	; 0x87
    54d4:	05c9      	lsls	r1, r1, #23
    54d6:	f003 fdb3 	bl	9040 <__aeabi_fmul>
    54da:	1c07      	adds	r7, r0, #0
      f += data[3];
    54dc:	78e0      	ldrb	r0, [r4, #3]
    54de:	f004 f8a3 	bl	9628 <__aeabi_i2f>
    54e2:	1c39      	adds	r1, r7, #0
    54e4:	f003 fa2a 	bl	893c <__aeabi_fadd>
      f *= 0.1;
    54e8:	f005 fedc 	bl	b2a4 <__aeabi_f2d>
    54ec:	4a0a      	ldr	r2, [pc, #40]	; (5518 <_ZN3DHT15readTemperatureEbb+0x98>)
    54ee:	4b0b      	ldr	r3, [pc, #44]	; (551c <_ZN3DHT15readTemperatureEbb+0x9c>)
    54f0:	f005 f874 	bl	a5dc <__aeabi_dmul>
      if (data[2] & 0x80) {
    54f4:	b276      	sxtb	r6, r6
      f *= 0.1;
    54f6:	f005 ff27 	bl	b348 <__aeabi_d2f>
      if (data[2] & 0x80) {
    54fa:	2e00      	cmp	r6, #0
    54fc:	dad5      	bge.n	54aa <_ZN3DHT15readTemperatureEbb+0x2a>
        f *= -1;
    54fe:	2380      	movs	r3, #128	; 0x80
    5500:	061b      	lsls	r3, r3, #24
    5502:	18c0      	adds	r0, r0, r3
    5504:	e7d1      	b.n	54aa <_ZN3DHT15readTemperatureEbb+0x2a>
    5506:	46c0      	nop			; (mov r8, r8)
    5508:	7fc00000 	.word	0x7fc00000
    550c:	cccccccd 	.word	0xcccccccd
    5510:	3ffccccc 	.word	0x3ffccccc
    5514:	40400000 	.word	0x40400000
    5518:	9999999a 	.word	0x9999999a
    551c:	3fb99999 	.word	0x3fb99999

00005520 <_ZN3DHT12readHumidityEb>:
float DHT::readHumidity(bool force) {
    5520:	b570      	push	{r4, r5, r6, lr}
  if (read()) {
    5522:	2100      	movs	r1, #0
float DHT::readHumidity(bool force) {
    5524:	0004      	movs	r4, r0
  if (read()) {
    5526:	f7ff ff25 	bl	5374 <_ZN3DHT4readEb>
    552a:	2800      	cmp	r0, #0
    552c:	d007      	beq.n	553e <_ZN3DHT12readHumidityEb+0x1e>
    switch (_type) {
    552e:	79a3      	ldrb	r3, [r4, #6]
    5530:	b2da      	uxtb	r2, r3
    5532:	2a0b      	cmp	r2, #11
    5534:	d005      	beq.n	5542 <_ZN3DHT12readHumidityEb+0x22>
    5536:	d302      	bcc.n	553e <_ZN3DHT12readHumidityEb+0x1e>
    5538:	3b15      	subs	r3, #21
    553a:	2b01      	cmp	r3, #1
    553c:	d905      	bls.n	554a <_ZN3DHT12readHumidityEb+0x2a>
  float f = NAN;
    553e:	480e      	ldr	r0, [pc, #56]	; (5578 <_ZN3DHT12readHumidityEb+0x58>)
  return f;
    5540:	e002      	b.n	5548 <_ZN3DHT12readHumidityEb+0x28>
      f = data[0];
    5542:	7820      	ldrb	r0, [r4, #0]
    5544:	f004 f8c0 	bl	96c8 <__aeabi_ui2f>
}
    5548:	bd70      	pop	{r4, r5, r6, pc}
      f = data[0];
    554a:	7820      	ldrb	r0, [r4, #0]
    554c:	f004 f8bc 	bl	96c8 <__aeabi_ui2f>
      f *= 256;
    5550:	2187      	movs	r1, #135	; 0x87
    5552:	05c9      	lsls	r1, r1, #23
    5554:	f003 fd74 	bl	9040 <__aeabi_fmul>
    5558:	1c05      	adds	r5, r0, #0
      f += data[1];
    555a:	7860      	ldrb	r0, [r4, #1]
    555c:	f004 f864 	bl	9628 <__aeabi_i2f>
    5560:	1c29      	adds	r1, r5, #0
    5562:	f003 f9eb 	bl	893c <__aeabi_fadd>
      f *= 0.1;
    5566:	f005 fe9d 	bl	b2a4 <__aeabi_f2d>
    556a:	4a04      	ldr	r2, [pc, #16]	; (557c <_ZN3DHT12readHumidityEb+0x5c>)
    556c:	4b04      	ldr	r3, [pc, #16]	; (5580 <_ZN3DHT12readHumidityEb+0x60>)
    556e:	f005 f835 	bl	a5dc <__aeabi_dmul>
    5572:	f005 fee9 	bl	b348 <__aeabi_d2f>
      break;
    5576:	e7e7      	b.n	5548 <_ZN3DHT12readHumidityEb+0x28>
    5578:	7fc00000 	.word	0x7fc00000
    557c:	9999999a 	.word	0x9999999a
    5580:	3fb99999 	.word	0x3fb99999

00005584 <_ZN13FilterOnePole12setFrequencyEf>:
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
    5584:	b510      	push	{r4, lr}
    5586:	0004      	movs	r4, r0
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    5588:	1c08      	adds	r0, r1, #0
    558a:	f005 fe8b 	bl	b2a4 <__aeabi_f2d>
    558e:	4a08      	ldr	r2, [pc, #32]	; (55b0 <_ZN13FilterOnePole12setFrequencyEf+0x2c>)
    5590:	4b08      	ldr	r3, [pc, #32]	; (55b4 <_ZN13FilterOnePole12setFrequencyEf+0x30>)
    5592:	f005 f823 	bl	a5dc <__aeabi_dmul>
    5596:	0002      	movs	r2, r0
    5598:	000b      	movs	r3, r1
    559a:	2000      	movs	r0, #0
    559c:	4906      	ldr	r1, [pc, #24]	; (55b8 <_ZN13FilterOnePole12setFrequencyEf+0x34>)
    559e:	f004 fbe9 	bl	9d74 <__aeabi_ddiv>
    55a2:	f005 fed1 	bl	b348 <__aeabi_d2f>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    55a6:	4905      	ldr	r1, [pc, #20]	; (55bc <_ZN13FilterOnePole12setFrequencyEf+0x38>)
    55a8:	f003 fd4a 	bl	9040 <__aeabi_fmul>
    55ac:	6060      	str	r0, [r4, #4]
}
    55ae:	bd10      	pop	{r4, pc}
    55b0:	54442d18 	.word	0x54442d18
    55b4:	401921fb 	.word	0x401921fb
    55b8:	3ff00000 	.word	0x3ff00000
    55bc:	49742400 	.word	0x49742400

000055c0 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>:
void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
    55c0:	b570      	push	{r4, r5, r6, lr}
    55c2:	0004      	movs	r4, r0
    55c4:	1c1d      	adds	r5, r3, #0
  FT = ft;
    55c6:	7001      	strb	r1, [r0, #0]
  setFrequency( fc );
    55c8:	1c11      	adds	r1, r2, #0
    55ca:	f7ff ffdb 	bl	5584 <_ZN13FilterOnePole12setFrequencyEf>
  Y = initialValue;
    55ce:	60e5      	str	r5, [r4, #12]
  Ylast = initialValue;
    55d0:	6125      	str	r5, [r4, #16]
  X = initialValue;
    55d2:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    55d4:	f7fd f84c 	bl	2670 <micros>
    55d8:	61e0      	str	r0, [r4, #28]
}
    55da:	bd70      	pop	{r4, r5, r6, pc}

000055dc <_ZN13FilterOnePole6outputEv>:
}

float FilterOnePole::output() {
    55dc:	b5d0      	push	{r4, r6, r7, lr}
    55de:	0004      	movs	r4, r0
    // figure out which button to read
  switch (FT) {
    55e0:	7800      	ldrb	r0, [r0, #0]
    55e2:	2803      	cmp	r0, #3
    55e4:	d835      	bhi.n	5652 <_ZN13FilterOnePole6outputEv+0x76>
    55e6:	f002 ff7b 	bl	84e0 <__gnu_thumb1_case_uqi>
    55ea:	0219      	.short	0x0219
    55ec:	1e04      	.short	0x1e04
    case LOWPASS:         
      // return the last value
      return Y; 
    55ee:	68e0      	ldr	r0, [r4, #12]
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    55f0:	bdd0      	pop	{r4, r6, r7, pc}
      return Y * (TauUS/1.0e6);
    55f2:	6860      	ldr	r0, [r4, #4]
    55f4:	f005 fe56 	bl	b2a4 <__aeabi_f2d>
    55f8:	2200      	movs	r2, #0
    55fa:	4b17      	ldr	r3, [pc, #92]	; (5658 <_ZN13FilterOnePole6outputEv+0x7c>)
    55fc:	f004 fbba 	bl	9d74 <__aeabi_ddiv>
    5600:	0006      	movs	r6, r0
    5602:	68e0      	ldr	r0, [r4, #12]
    5604:	000f      	movs	r7, r1
    5606:	f005 fe4d 	bl	b2a4 <__aeabi_f2d>
    560a:	0002      	movs	r2, r0
    560c:	000b      	movs	r3, r1
    560e:	0030      	movs	r0, r6
    5610:	0039      	movs	r1, r7
    5612:	f004 ffe3 	bl	a5dc <__aeabi_dmul>
      return (X-Y)/(TauUS/1.0e6);
    5616:	f005 fe97 	bl	b348 <__aeabi_d2f>
    561a:	e7e9      	b.n	55f0 <_ZN13FilterOnePole6outputEv+0x14>
      return X-Y;
    561c:	68e1      	ldr	r1, [r4, #12]
    561e:	6960      	ldr	r0, [r4, #20]
    5620:	f003 fe2e 	bl	9280 <__aeabi_fsub>
    5624:	e7e4      	b.n	55f0 <_ZN13FilterOnePole6outputEv+0x14>
      return (X-Y)/(TauUS/1.0e6);
    5626:	68e1      	ldr	r1, [r4, #12]
    5628:	6960      	ldr	r0, [r4, #20]
    562a:	f003 fe29 	bl	9280 <__aeabi_fsub>
    562e:	f005 fe39 	bl	b2a4 <__aeabi_f2d>
    5632:	0006      	movs	r6, r0
    5634:	6860      	ldr	r0, [r4, #4]
    5636:	000f      	movs	r7, r1
    5638:	f005 fe34 	bl	b2a4 <__aeabi_f2d>
    563c:	2200      	movs	r2, #0
    563e:	4b06      	ldr	r3, [pc, #24]	; (5658 <_ZN13FilterOnePole6outputEv+0x7c>)
    5640:	f004 fb98 	bl	9d74 <__aeabi_ddiv>
    5644:	0002      	movs	r2, r0
    5646:	000b      	movs	r3, r1
    5648:	0030      	movs	r0, r6
    564a:	0039      	movs	r1, r7
    564c:	f004 fb92 	bl	9d74 <__aeabi_ddiv>
    5650:	e7e1      	b.n	5616 <_ZN13FilterOnePole6outputEv+0x3a>
      return 0;
    5652:	2000      	movs	r0, #0
    5654:	e7cc      	b.n	55f0 <_ZN13FilterOnePole6outputEv+0x14>
    5656:	46c0      	nop			; (mov r8, r8)
    5658:	412e8480 	.word	0x412e8480

0000565c <_ZN13FilterOnePole5inputEf>:
float FilterOnePole::input( float inVal ) {
    565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    565e:	0004      	movs	r4, r0
    5660:	1c0e      	adds	r6, r1, #0
  long time = micros();
    5662:	f7fd f805 	bl	2670 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5666:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    5668:	0005      	movs	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    566a:	1ac0      	subs	r0, r0, r3
    566c:	f003 ffdc 	bl	9628 <__aeabi_i2f>
  Ylast = Y;
    5670:	68e3      	ldr	r3, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5672:	1c01      	adds	r1, r0, #0
  Ylast = Y;
    5674:	6123      	str	r3, [r4, #16]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    5676:	61a0      	str	r0, [r4, #24]
  LastUS = time;                      // update this now
    5678:	61e5      	str	r5, [r4, #28]
  X = inVal;                          // this is now the most recent input value
    567a:	6166      	str	r6, [r4, #20]
  TauSamps = TauUS / ElapsedUS;
    567c:	6860      	ldr	r0, [r4, #4]
    567e:	f003 faef 	bl	8c60 <__aeabi_fdiv>
    5682:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    5684:	f005 fe0e 	bl	b2a4 <__aeabi_f2d>
    5688:	0002      	movs	r2, r0
    568a:	000b      	movs	r3, r1
    568c:	2000      	movs	r0, #0
    568e:	4918      	ldr	r1, [pc, #96]	; (56f0 <_ZN13FilterOnePole5inputEf+0x94>)
    5690:	f004 fb70 	bl	9d74 <__aeabi_ddiv>
    5694:	f002 fc76 	bl	7f84 <exp>
    5698:	f005 fe56 	bl	b348 <__aeabi_d2f>
    569c:	1c05      	adds	r5, r0, #0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    569e:	f005 fe01 	bl	b2a4 <__aeabi_f2d>
    56a2:	0002      	movs	r2, r0
    56a4:	000b      	movs	r3, r1
    56a6:	2000      	movs	r0, #0
    56a8:	4912      	ldr	r1, [pc, #72]	; (56f4 <_ZN13FilterOnePole5inputEf+0x98>)
    56aa:	f005 fa17 	bl	aadc <__aeabi_dsub>
    56ae:	0006      	movs	r6, r0
    56b0:	6960      	ldr	r0, [r4, #20]
    56b2:	000f      	movs	r7, r1
    56b4:	f005 fdf6 	bl	b2a4 <__aeabi_f2d>
    56b8:	0002      	movs	r2, r0
    56ba:	000b      	movs	r3, r1
    56bc:	0030      	movs	r0, r6
    56be:	0039      	movs	r1, r7
    56c0:	f004 ff8c 	bl	a5dc <__aeabi_dmul>
    56c4:	0006      	movs	r6, r0
    56c6:	000f      	movs	r7, r1
    56c8:	1c28      	adds	r0, r5, #0
    56ca:	6921      	ldr	r1, [r4, #16]
    56cc:	f003 fcb8 	bl	9040 <__aeabi_fmul>
    56d0:	f005 fde8 	bl	b2a4 <__aeabi_f2d>
    56d4:	0002      	movs	r2, r0
    56d6:	000b      	movs	r3, r1
    56d8:	0030      	movs	r0, r6
    56da:	0039      	movs	r1, r7
    56dc:	f004 f83a 	bl	9754 <__aeabi_dadd>
    56e0:	f005 fe32 	bl	b348 <__aeabi_d2f>
    56e4:	60e0      	str	r0, [r4, #12]
  return output();
    56e6:	0020      	movs	r0, r4
    56e8:	f7ff ff78 	bl	55dc <_ZN13FilterOnePole6outputEv>
}
    56ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56ee:	46c0      	nop			; (mov r8, r8)
    56f0:	bff00000 	.word	0xbff00000
    56f4:	3ff00000 	.word	0x3ff00000

000056f8 <_ZN20FilterOnePoleCascadeC1Eff>:
}


// stuff for filter2 (lowpass only)
// should be able to set a separate fall time as well
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    56f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  setFilter( ft, fc, initialValue );
    56fa:	26fe      	movs	r6, #254	; 0xfe
    56fc:	2700      	movs	r7, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    56fe:	0004      	movs	r4, r0
  setFilter( ft, fc, initialValue );
    5700:	05b6      	lsls	r6, r6, #22
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5702:	1c15      	adds	r5, r2, #0
  setFilter( ft, fc, initialValue );
    5704:	1c3b      	adds	r3, r7, #0
    5706:	1c32      	adds	r2, r6, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5708:	9101      	str	r1, [sp, #4]
  setFilter( ft, fc, initialValue );
    570a:	2101      	movs	r1, #1
    570c:	f7ff ff58 	bl	55c0 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5710:	0020      	movs	r0, r4
  setFilter( ft, fc, initialValue );
    5712:	1c3b      	adds	r3, r7, #0
    5714:	1c32      	adds	r2, r6, #0
FilterOnePoleCascade::FilterOnePoleCascade( float riseTime, float initialValue ) {
    5716:	3020      	adds	r0, #32
  setFilter( ft, fc, initialValue );
    5718:	2101      	movs	r1, #1
    571a:	f7ff ff51 	bl	55c0 <_ZN13FilterOnePole9setFilterE11FILTER_TYPEff>
}

void FilterOnePoleCascade::setRiseTime( float riseTime ) {
  float tauScale = 3.36;      // found emperically, by running test();

  Pole1.setTau( riseTime / tauScale );
    571e:	4908      	ldr	r1, [pc, #32]	; (5740 <_ZN20FilterOnePoleCascadeC1Eff+0x48>)
    5720:	9801      	ldr	r0, [sp, #4]
    5722:	f003 fa9d 	bl	8c60 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
    5726:	4907      	ldr	r1, [pc, #28]	; (5744 <_ZN20FilterOnePoleCascadeC1Eff+0x4c>)
    5728:	f003 fc8a 	bl	9040 <__aeabi_fmul>
    572c:	6060      	str	r0, [r4, #4]
    572e:	6260      	str	r0, [r4, #36]	; 0x24
  Y = Ylast = X = newVal;
    5730:	6165      	str	r5, [r4, #20]
    5732:	6125      	str	r5, [r4, #16]
    5734:	60e5      	str	r5, [r4, #12]
    5736:	6365      	str	r5, [r4, #52]	; 0x34
    5738:	6325      	str	r5, [r4, #48]	; 0x30
    573a:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    573c:	0020      	movs	r0, r4
    573e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5740:	40570a3d 	.word	0x40570a3d
    5744:	49742400 	.word	0x49742400

00005748 <_ZN20FilterOnePoleCascade11setRiseTimeEf>:
void FilterOnePoleCascade::setRiseTime( float riseTime ) {
    5748:	b510      	push	{r4, lr}
    574a:	0004      	movs	r4, r0
    574c:	1c08      	adds	r0, r1, #0
  Pole1.setTau( riseTime / tauScale );
    574e:	4904      	ldr	r1, [pc, #16]	; (5760 <_ZN20FilterOnePoleCascade11setRiseTimeEf+0x18>)
    5750:	f003 fa86 	bl	8c60 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
    5754:	4903      	ldr	r1, [pc, #12]	; (5764 <_ZN20FilterOnePoleCascade11setRiseTimeEf+0x1c>)
    5756:	f003 fc73 	bl	9040 <__aeabi_fmul>
    575a:	6060      	str	r0, [r4, #4]
    575c:	6260      	str	r0, [r4, #36]	; 0x24
  Pole2.setTau( riseTime / tauScale );
}
    575e:	bd10      	pop	{r4, pc}
    5760:	40570a3d 	.word	0x40570a3d
    5764:	49742400 	.word	0x49742400

00005768 <_ZN20FilterOnePoleCascade5inputEf>:

float FilterOnePoleCascade::input( float inVal  ) {
    5768:	b510      	push	{r4, lr}
  Pole2.input( Pole1.input( inVal ));
    576a:	0004      	movs	r4, r0
    576c:	f7ff ff76 	bl	565c <_ZN13FilterOnePole5inputEf>
    5770:	3420      	adds	r4, #32
    5772:	1c01      	adds	r1, r0, #0
    5774:	0020      	movs	r0, r4
    5776:	f7ff ff71 	bl	565c <_ZN13FilterOnePole5inputEf>
  Pole1.setToNewValue( newVal );
  Pole2.setToNewValue( newVal );
}

float FilterOnePoleCascade::output() {
  return Pole2.output();
    577a:	0020      	movs	r0, r4
    577c:	f7ff ff2e 	bl	55dc <_ZN13FilterOnePole6outputEv>
}
    5780:	bd10      	pop	{r4, pc}

00005782 <_ZN20FilterOnePoleCascade13setToNewValueEf>:
  Y = Ylast = X = newVal;
    5782:	6141      	str	r1, [r0, #20]
    5784:	6101      	str	r1, [r0, #16]
    5786:	60c1      	str	r1, [r0, #12]
    5788:	6341      	str	r1, [r0, #52]	; 0x34
    578a:	6301      	str	r1, [r0, #48]	; 0x30
    578c:	62c1      	str	r1, [r0, #44]	; 0x2c
}
    578e:	4770      	bx	lr

00005790 <_ZN20FilterOnePoleCascade6outputEv>:
float FilterOnePoleCascade::output() {
    5790:	b510      	push	{r4, lr}
  return Pole2.output();
    5792:	3020      	adds	r0, #32
    5794:	f7ff ff22 	bl	55dc <_ZN13FilterOnePole6outputEv>
}
    5798:	bd10      	pop	{r4, pc}
	...

0000579c <_ZL15is_rtc_syncbusyv>:
}


static inline bool is_rtc_syncbusy()
{
	if (RTC->MODE2.SYNCBUSY.reg)
    579c:	4b02      	ldr	r3, [pc, #8]	; (57a8 <_ZL15is_rtc_syncbusyv+0xc>)
    579e:	6918      	ldr	r0, [r3, #16]
    57a0:	1e43      	subs	r3, r0, #1
    57a2:	4198      	sbcs	r0, r3
    57a4:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
    57a6:	4770      	bx	lr
    57a8:	40002000 	.word	0x40002000

000057ac <_ZN7RTCZeroC1Ev>:
	_configured = false;
    57ac:	2300      	movs	r3, #0
    57ae:	7003      	strb	r3, [r0, #0]
}
    57b0:	4770      	bx	lr
	...

000057b4 <_ZN7RTCZero12rtc_get_timeEv>:
{
    57b4:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    57b6:	f7ff fff1 	bl	579c <_ZL15is_rtc_syncbusyv>
    57ba:	2800      	cmp	r0, #0
    57bc:	d1fb      	bne.n	57b6 <_ZN7RTCZero12rtc_get_timeEv+0x2>
	uint32_t register_value = RTC->MODE2.CLOCK.reg;
    57be:	4b01      	ldr	r3, [pc, #4]	; (57c4 <_ZN7RTCZero12rtc_get_timeEv+0x10>)
    57c0:	6998      	ldr	r0, [r3, #24]
}
    57c2:	bd10      	pop	{r4, pc}
    57c4:	40002000 	.word	0x40002000

000057c8 <_ZN7RTCZero10getSecondsEv>:
{
    57c8:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    57ca:	f7ff fff3 	bl	57b4 <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    57ce:	233f      	movs	r3, #63	; 0x3f
    57d0:	4018      	ands	r0, r3
}
    57d2:	bd10      	pop	{r4, pc}

000057d4 <_ZN7RTCZero10getMinutesEv>:
{
    57d4:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    57d6:	f7ff ffed 	bl	57b4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    57da:	0500      	lsls	r0, r0, #20
	return value;
    57dc:	0e80      	lsrs	r0, r0, #26
}
    57de:	bd10      	pop	{r4, pc}

000057e0 <_ZN7RTCZero8getHoursEv>:
{
    57e0:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    57e2:	f7ff ffe7 	bl	57b4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    57e6:	03c0      	lsls	r0, r0, #15
	return value;
    57e8:	0ec0      	lsrs	r0, r0, #27
}
    57ea:	bd10      	pop	{r4, pc}

000057ec <_ZN7RTCZero6getDayEv>:
{
    57ec:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    57ee:	f7ff ffe1 	bl	57b4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    57f2:	0280      	lsls	r0, r0, #10
	return value;
    57f4:	0ec0      	lsrs	r0, r0, #27
}
    57f6:	bd10      	pop	{r4, pc}

000057f8 <_ZN7RTCZero8getMonthEv>:
{
    57f8:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    57fa:	f7ff ffdb 	bl	57b4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    57fe:	0180      	lsls	r0, r0, #6
	return value;
    5800:	0f00      	lsrs	r0, r0, #28
}
    5802:	bd10      	pop	{r4, pc}

00005804 <_ZN7RTCZero7getYearEv>:
{
    5804:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    5806:	f7ff ffd5 	bl	57b4 <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    580a:	0e80      	lsrs	r0, r0, #26
}
    580c:	bd10      	pop	{r4, pc}
	...

00005810 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>:
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    5810:	88c8      	ldrh	r0, [r1, #6]
    5812:	4b09      	ldr	r3, [pc, #36]	; (5838 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value+0x28>)
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    5814:	78ca      	ldrb	r2, [r1, #3]
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    5816:	18c0      	adds	r0, r0, r3
    5818:	0683      	lsls	r3, r0, #26
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    581a:	7908      	ldrb	r0, [r1, #4]
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    581c:	0452      	lsls	r2, r2, #17
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    581e:	0580      	lsls	r0, r0, #22
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5820:	4310      	orrs	r0, r2
    5822:	780a      	ldrb	r2, [r1, #0]
    5824:	4310      	orrs	r0, r2
	clock_reg_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    5826:	788a      	ldrb	r2, [r1, #2]
    5828:	0312      	lsls	r2, r2, #12
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    582a:	4310      	orrs	r0, r2
	clock_reg_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    582c:	784a      	ldrb	r2, [r1, #1]
    582e:	0192      	lsls	r2, r2, #6
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    5830:	4310      	orrs	r0, r2
    5832:	4318      	orrs	r0, r3
}
    5834:	4770      	bx	lr
    5836:	46c0      	nop			; (mov r8, r8)
    5838:	fffff830 	.word	0xfffff830

0000583c <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>:
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    583c:	20fa      	movs	r0, #250	; 0xfa
{
    583e:	b510      	push	{r4, lr}
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5840:	241f      	movs	r4, #31
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5842:	0e8b      	lsrs	r3, r1, #26
    5844:	00c0      	lsls	r0, r0, #3
    5846:	181b      	adds	r3, r3, r0
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    5848:	0c48      	lsrs	r0, r1, #17
    584a:	4020      	ands	r0, r4
    584c:	70d0      	strb	r0, [r2, #3]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    584e:	203f      	movs	r0, #63	; 0x3f
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    5850:	80d3      	strh	r3, [r2, #6]
	time->month = ((clock_reg_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    5852:	018b      	lsls	r3, r1, #6
    5854:	0f1b      	lsrs	r3, r3, #28
    5856:	7113      	strb	r3, [r2, #4]
	time->hour = ((clock_reg_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    5858:	0b0b      	lsrs	r3, r1, #12
    585a:	4023      	ands	r3, r4
    585c:	7093      	strb	r3, [r2, #2]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    585e:	098b      	lsrs	r3, r1, #6
    5860:	4003      	ands	r3, r0
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    5862:	4001      	ands	r1, r0
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    5864:	7053      	strb	r3, [r2, #1]
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    5866:	7011      	strb	r1, [r2, #0]
}
    5868:	bd10      	pop	{r4, pc}
	...

0000586c <_ZN7RTCZero8getEpochEv>:
{
    586c:	b530      	push	{r4, r5, lr}
    586e:	b08d      	sub	sp, #52	; 0x34
    5870:	0005      	movs	r5, r0
	uint32_t register_value = rtc_get_time();
    5872:	f7ff ff9f 	bl	57b4 <_ZN7RTCZero12rtc_get_timeEv>
	rtc_register_value_to_time(register_value, &time);
    5876:	ac01      	add	r4, sp, #4
	uint32_t register_value = rtc_get_time();
    5878:	0001      	movs	r1, r0
	rtc_register_value_to_time(register_value, &time);
    587a:	0022      	movs	r2, r4
    587c:	0028      	movs	r0, r5
    587e:	f7ff ffdd 	bl	583c <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>
	tm.tm_year = time.year - 1900;		// Years since 1900
    5882:	88e3      	ldrh	r3, [r4, #6]
    5884:	4a09      	ldr	r2, [pc, #36]	; (58ac <_ZN7RTCZero8getEpochEv+0x40>)
	uint32_t epoch = mktime(&tm);
    5886:	a803      	add	r0, sp, #12
	tm.tm_year = time.year - 1900;		// Years since 1900
    5888:	189b      	adds	r3, r3, r2
    588a:	9308      	str	r3, [sp, #32]
	tm.tm_mon  = time.month - 1;
    588c:	7923      	ldrb	r3, [r4, #4]
    588e:	3b01      	subs	r3, #1
    5890:	9307      	str	r3, [sp, #28]
	tm.tm_mday = time.day;
    5892:	78e3      	ldrb	r3, [r4, #3]
    5894:	9306      	str	r3, [sp, #24]
	tm.tm_hour = time.hour;
    5896:	78a3      	ldrb	r3, [r4, #2]
    5898:	9305      	str	r3, [sp, #20]
	tm.tm_min  = time.minute;
    589a:	7863      	ldrb	r3, [r4, #1]
    589c:	9304      	str	r3, [sp, #16]
	tm.tm_sec  = time.second;
    589e:	7823      	ldrb	r3, [r4, #0]
    58a0:	9303      	str	r3, [sp, #12]
	uint32_t epoch = mktime(&tm);
    58a2:	f006 f865 	bl	b970 <mktime>
}
    58a6:	b00d      	add	sp, #52	; 0x34
    58a8:	bd30      	pop	{r4, r5, pc}
    58aa:	46c0      	nop			; (mov r8, r8)
    58ac:	fffff894 	.word	0xfffff894

000058b0 <_ZN7RTCZero10RTCdisableEv>:


void RTCZero::RTCdisable()
{
    58b0:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    58b2:	f7ff ff73 	bl	579c <_ZL15is_rtc_syncbusyv>
    58b6:	2800      	cmp	r0, #0
    58b8:	d1fb      	bne.n	58b2 <_ZN7RTCZero10RTCdisableEv+0x2>
		// Wait for synchronization
	}
	
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    58ba:	2102      	movs	r1, #2
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
    58bc:	4b05      	ldr	r3, [pc, #20]	; (58d4 <_ZN7RTCZero10RTCdisableEv+0x24>)
    58be:	4a06      	ldr	r2, [pc, #24]	; (58d8 <_ZN7RTCZero10RTCdisableEv+0x28>)
    58c0:	811a      	strh	r2, [r3, #8]
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
    58c2:	819a      	strh	r2, [r3, #12]
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    58c4:	881a      	ldrh	r2, [r3, #0]
    58c6:	438a      	bics	r2, r1
    58c8:	801a      	strh	r2, [r3, #0]
	
	while (is_rtc_syncbusy())
    58ca:	f7ff ff67 	bl	579c <_ZL15is_rtc_syncbusyv>
    58ce:	2800      	cmp	r0, #0
    58d0:	d1fb      	bne.n	58ca <_ZN7RTCZero10RTCdisableEv+0x1a>
	{
		// Wait for synchronization
	}
}
    58d2:	bd10      	pop	{r4, pc}
    58d4:	40002000 	.word	0x40002000
    58d8:	ffff81ff 	.word	0xffff81ff

000058dc <_ZN7RTCZero9RTCenableEv>:

void RTCZero::RTCenable()
{
    58dc:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    58de:	f7ff ff5d 	bl	579c <_ZL15is_rtc_syncbusyv>
    58e2:	2800      	cmp	r0, #0
    58e4:	d1fb      	bne.n	58de <_ZN7RTCZero9RTCenableEv+0x2>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;			// enable RTC
    58e6:	2302      	movs	r3, #2
    58e8:	4a04      	ldr	r2, [pc, #16]	; (58fc <_ZN7RTCZero9RTCenableEv+0x20>)
    58ea:	8811      	ldrh	r1, [r2, #0]
    58ec:	430b      	orrs	r3, r1
    58ee:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    58f0:	f7ff ff54 	bl	579c <_ZL15is_rtc_syncbusyv>
    58f4:	2800      	cmp	r0, #0
    58f6:	d1fb      	bne.n	58f0 <_ZN7RTCZero9RTCenableEv+0x14>
	{
		// Wait for synchronization
	}
}
    58f8:	bd10      	pop	{r4, pc}
    58fa:	46c0      	nop			; (mov r8, r8)
    58fc:	40002000 	.word	0x40002000

00005900 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>:
{
    5900:	b570      	push	{r4, r5, r6, lr}
    5902:	0005      	movs	r5, r0
	uint32_t register_value = rtc_time_to_register_value(time);
    5904:	f7ff ff84 	bl	5810 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>
    5908:	0006      	movs	r6, r0
	while (is_rtc_syncbusy())
    590a:	f7ff ff47 	bl	579c <_ZL15is_rtc_syncbusyv>
    590e:	2800      	cmp	r0, #0
    5910:	d1fb      	bne.n	590a <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0xa>
	RTC->MODE2.CLOCK.reg = register_value;
    5912:	4c0b      	ldr	r4, [pc, #44]	; (5940 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x40>)
	RTCdisable();
    5914:	0028      	movs	r0, r5
    5916:	f7ff ffcb 	bl	58b0 <_ZN7RTCZero10RTCdisableEv>
	RTC->MODE2.CLOCK.reg = register_value;
    591a:	61a6      	str	r6, [r4, #24]
	while (is_rtc_syncbusy())
    591c:	f7ff ff3e 	bl	579c <_ZL15is_rtc_syncbusyv>
    5920:	2800      	cmp	r0, #0
    5922:	d1fb      	bne.n	591c <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x1c>
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_SYNCBUSY_CLOCKSYNC;
    5924:	2280      	movs	r2, #128	; 0x80
    5926:	8823      	ldrh	r3, [r4, #0]
    5928:	0212      	lsls	r2, r2, #8
    592a:	4313      	orrs	r3, r2
    592c:	8023      	strh	r3, [r4, #0]
	while (is_rtc_syncbusy())
    592e:	f7ff ff35 	bl	579c <_ZL15is_rtc_syncbusyv>
    5932:	2800      	cmp	r0, #0
    5934:	d1fb      	bne.n	592e <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x2e>
	RTCenable();
    5936:	0028      	movs	r0, r5
    5938:	f7ff ffd0 	bl	58dc <_ZN7RTCZero9RTCenableEv>
}
    593c:	bd70      	pop	{r4, r5, r6, pc}
    593e:	46c0      	nop			; (mov r8, r8)
    5940:	40002000 	.word	0x40002000

00005944 <_ZN7RTCZero8setEpochEm>:
{
    5944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	time_t etime = epoch;
    5946:	4b0e      	ldr	r3, [pc, #56]	; (5980 <_ZN7RTCZero8setEpochEm+0x3c>)
{
    5948:	0004      	movs	r4, r0
	time_t etime = epoch;
    594a:	4299      	cmp	r1, r3
    594c:	d200      	bcs.n	5950 <_ZN7RTCZero8setEpochEm+0xc>
    594e:	0019      	movs	r1, r3
	struct tm* tmp = gmtime(&etime);
    5950:	a801      	add	r0, sp, #4
	time_t etime = epoch;
    5952:	9101      	str	r1, [sp, #4]
	struct tm* tmp = gmtime(&etime);
    5954:	f005 fde2 	bl	b51c <gmtime>
	time.day    = tmp->tm_mday;
    5958:	7b03      	ldrb	r3, [r0, #12]
    595a:	a902      	add	r1, sp, #8
    595c:	70cb      	strb	r3, [r1, #3]
	time.month  = tmp->tm_mon + 1;
    595e:	6903      	ldr	r3, [r0, #16]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    5960:	4a08      	ldr	r2, [pc, #32]	; (5984 <_ZN7RTCZero8setEpochEm+0x40>)
	time.month  = tmp->tm_mon + 1;
    5962:	3301      	adds	r3, #1
    5964:	710b      	strb	r3, [r1, #4]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    5966:	6943      	ldr	r3, [r0, #20]
    5968:	189b      	adds	r3, r3, r2
    596a:	80cb      	strh	r3, [r1, #6]
	time.hour   = tmp->tm_hour;
    596c:	7a03      	ldrb	r3, [r0, #8]
    596e:	708b      	strb	r3, [r1, #2]
	time.minute = tmp->tm_min;
    5970:	7903      	ldrb	r3, [r0, #4]
    5972:	704b      	strb	r3, [r1, #1]
	time.second = tmp->tm_sec;
    5974:	6803      	ldr	r3, [r0, #0]
	rtc_set_time(&time);
    5976:	0020      	movs	r0, r4
	time.second = tmp->tm_sec;
    5978:	700b      	strb	r3, [r1, #0]
	rtc_set_time(&time);
    597a:	f7ff ffc1 	bl	5900 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
}
    597e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    5980:	386d4380 	.word	0x386d4380
    5984:	0000076c 	.word	0x0000076c

00005988 <_ZN7RTCZero8RTCresetEv>:

void RTCZero::RTCreset()
{
    5988:	b510      	push	{r4, lr}
	RTCdisable();
    598a:	f7ff ff91 	bl	58b0 <_ZN7RTCZero10RTCdisableEv>
	
	while (is_rtc_syncbusy())
    598e:	f7ff ff05 	bl	579c <_ZL15is_rtc_syncbusyv>
    5992:	2800      	cmp	r0, #0
    5994:	d1fb      	bne.n	598e <_ZN7RTCZero8RTCresetEv+0x6>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;			// software reset
    5996:	2301      	movs	r3, #1
    5998:	4a04      	ldr	r2, [pc, #16]	; (59ac <_ZN7RTCZero8RTCresetEv+0x24>)
    599a:	8811      	ldrh	r1, [r2, #0]
    599c:	430b      	orrs	r3, r1
    599e:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    59a0:	f7ff fefc 	bl	579c <_ZL15is_rtc_syncbusyv>
    59a4:	2800      	cmp	r0, #0
    59a6:	d1fb      	bne.n	59a0 <_ZN7RTCZero8RTCresetEv+0x18>
	{
		// Wait for synchronization
	}
}
    59a8:	bd10      	pop	{r4, pc}
    59aa:	46c0      	nop			; (mov r8, r8)
    59ac:	40002000 	.word	0x40002000

000059b0 <_ZN7RTCZero5beginEv>:
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    59b0:	2380      	movs	r3, #128	; 0x80
{
    59b2:	b510      	push	{r4, lr}
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    59b4:	4a0d      	ldr	r2, [pc, #52]	; (59ec <_ZN7RTCZero5beginEv+0x3c>)
    59b6:	005b      	lsls	r3, r3, #1
    59b8:	6951      	ldr	r1, [r2, #20]
{
    59ba:	0004      	movs	r4, r0
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    59bc:	430b      	orrs	r3, r1
    59be:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = OSC32KCTRL_RTCCTRL_RTCSEL_XOSC1K;
    59c0:	2204      	movs	r2, #4
    59c2:	4b0b      	ldr	r3, [pc, #44]	; (59f0 <_ZN7RTCZero5beginEv+0x40>)
    59c4:	611a      	str	r2, [r3, #16]
	RTCreset();
    59c6:	f7ff ffdf 	bl	5988 <_ZN7RTCZero8RTCresetEv>
	while (is_rtc_syncbusy())
    59ca:	f7ff fee7 	bl	579c <_ZL15is_rtc_syncbusyv>
    59ce:	2800      	cmp	r0, #0
    59d0:	d1fb      	bne.n	59ca <_ZN7RTCZero5beginEv+0x1a>
	RTC->MODE2.CTRLA.reg = tmp_reg;
    59d2:	4a08      	ldr	r2, [pc, #32]	; (59f4 <_ZN7RTCZero5beginEv+0x44>)
    59d4:	4b08      	ldr	r3, [pc, #32]	; (59f8 <_ZN7RTCZero5beginEv+0x48>)
    59d6:	801a      	strh	r2, [r3, #0]
	while (is_rtc_syncbusy())
    59d8:	f7ff fee0 	bl	579c <_ZL15is_rtc_syncbusyv>
    59dc:	2800      	cmp	r0, #0
    59de:	d1fb      	bne.n	59d8 <_ZN7RTCZero5beginEv+0x28>
	RTCenable();
    59e0:	0020      	movs	r0, r4
    59e2:	f7ff ff7b 	bl	58dc <_ZN7RTCZero9RTCenableEv>
	_configured = true;
    59e6:	2301      	movs	r3, #1
    59e8:	7023      	strb	r3, [r4, #0]
}
    59ea:	bd10      	pop	{r4, pc}
    59ec:	40000400 	.word	0x40000400
    59f0:	40001000 	.word	0x40001000
    59f4:	ffff8b08 	.word	0xffff8b08
    59f8:	40002000 	.word	0x40002000

000059fc <_ZL15cbor_enc_lengthhP8cbor_bufm>:
}

/* Variable length encoder for integer types - UINT/NINT and ARRAY/MAP dimensions */
static int
cbor_enc_length(uint8_t major_type, struct cbor_buf * cbuf, uint32_t val)
{
    59fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    59fe:	4684      	mov	ip, r0
    5a00:	000d      	movs	r5, r1
    5a02:	9201      	str	r2, [sp, #4]
    5a04:	ba16      	rev	r6, r2
        *addnl_info = val;
    5a06:	b2d3      	uxtb	r3, r2
        retbytes = 0;
    5a08:	2400      	movs	r4, #0
    if (val <= CBOR_MJR0_THRESHOLD) {
    5a0a:	2a17      	cmp	r2, #23
    5a0c:	d90a      	bls.n	5a24 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    } else if (val > CBOR_MJR0_THRESHOLD && val <= UINT8_MAX) {
    5a0e:	0013      	movs	r3, r2
    5a10:	3b18      	subs	r3, #24
    5a12:	2be7      	cmp	r3, #231	; 0xe7
    5a14:	d911      	bls.n	5a3a <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3e>
    } else if (val > UINT8_MAX && val <= UINT16_MAX) {
    5a16:	1e53      	subs	r3, r2, #1
    5a18:	491c      	ldr	r1, [pc, #112]	; (5a8c <_ZL15cbor_enc_lengthhP8cbor_bufm+0x90>)
    5a1a:	3bff      	subs	r3, #255	; 0xff
    5a1c:	428b      	cmp	r3, r1
    5a1e:	d80f      	bhi.n	5a40 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x44>
        *addnl_info = CBOR_ADDL_BYTE_UINT16;
    5a20:	2319      	movs	r3, #25
        retbytes = SIZE_UINT16;
    5a22:	2402      	movs	r4, #2
    int addnlBytes;
    uint8_t additionalInfo;

    addnlBytes = cbor_get_addnl_info(val, &additionalInfo);

    if ((cbuf->next + addnlBytes) > cbuf->tail) {
    5a24:	68a9      	ldr	r1, [r5, #8]
    5a26:	6868      	ldr	r0, [r5, #4]
    5a28:	190f      	adds	r7, r1, r4
    5a2a:	42b8      	cmp	r0, r7
    5a2c:	d20b      	bcs.n	5a46 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x4a>
        cbuf->err = CBOR_NO_MEM;
    5a2e:	2301      	movs	r3, #1
            break;
#endif
        default:
            /* TODO - error handling */
           cbuf->err = CBOR_INV_ADDNL_INFO;
           return CBOR_ERR;
    5a30:	2401      	movs	r4, #1
           cbuf->err = CBOR_INV_ADDNL_INFO;
    5a32:	60eb      	str	r3, [r5, #12]
           return CBOR_ERR;
    5a34:	4264      	negs	r4, r4
        }
        memcpy(cbuf->next, &val, addnlBytes);
        cbuf->next += addnlBytes;
    }
    return CBOR_OK;
}
    5a36:	0020      	movs	r0, r4
    5a38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *addnl_info = CBOR_ADDL_BYTE_UINT8;
    5a3a:	2318      	movs	r3, #24
        retbytes = SIZE_UINT8;
    5a3c:	2401      	movs	r4, #1
    5a3e:	e7f1      	b.n	5a24 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
        *addnl_info = CBOR_ADDL_BYTE_UINT32;
    5a40:	231a      	movs	r3, #26
        retbytes = SIZE_UINT;
    5a42:	2404      	movs	r4, #4
    5a44:	e7ee      	b.n	5a24 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    *cbuf->next++ = major_type | additionalInfo;
    5a46:	4660      	mov	r0, ip
    5a48:	1c4f      	adds	r7, r1, #1
    5a4a:	4318      	orrs	r0, r3
    5a4c:	60af      	str	r7, [r5, #8]
    5a4e:	7008      	strb	r0, [r1, #0]
    if (addnlBytes) {
    5a50:	2c00      	cmp	r4, #0
    5a52:	d0f0      	beq.n	5a36 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
        switch(addnlBytes) {
    5a54:	2c02      	cmp	r4, #2
    5a56:	d00e      	beq.n	5a76 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x7a>
    5a58:	2c04      	cmp	r4, #4
    5a5a:	d015      	beq.n	5a88 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x8c>
           cbuf->err = CBOR_INV_ADDNL_INFO;
    5a5c:	2308      	movs	r3, #8
        switch(addnlBytes) {
    5a5e:	2c01      	cmp	r4, #1
    5a60:	d1e6      	bne.n	5a30 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x34>
        memcpy(cbuf->next, &val, addnlBytes);
    5a62:	0022      	movs	r2, r4
    5a64:	a901      	add	r1, sp, #4
    5a66:	68a8      	ldr	r0, [r5, #8]
    5a68:	f005 fe93 	bl	b792 <memcpy>
        cbuf->next += addnlBytes;
    5a6c:	68ab      	ldr	r3, [r5, #8]
    5a6e:	191c      	adds	r4, r3, r4
    5a70:	60ac      	str	r4, [r5, #8]
    return CBOR_OK;
    5a72:	2400      	movs	r4, #0
    5a74:	e7df      	b.n	5a36 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
            val = htons(val);
    5a76:	4906      	ldr	r1, [pc, #24]	; (5a90 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x94>)
    5a78:	0213      	lsls	r3, r2, #8
    5a7a:	b292      	uxth	r2, r2
    5a7c:	400b      	ands	r3, r1
    5a7e:	0a12      	lsrs	r2, r2, #8
    5a80:	431a      	orrs	r2, r3
    5a82:	b292      	uxth	r2, r2
    5a84:	9201      	str	r2, [sp, #4]
            break;
    5a86:	e7ec      	b.n	5a62 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
            val = htonl(val);
    5a88:	9601      	str	r6, [sp, #4]
            break;
    5a8a:	e7ea      	b.n	5a62 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
    5a8c:	0000feff 	.word	0x0000feff
    5a90:	00ffff00 	.word	0x00ffff00

00005a94 <_Z13cbor_enc_initP8cbor_bufPvi>:
{
    5a94:	b570      	push	{r4, r5, r6, lr}
    5a96:	0005      	movs	r5, r0
    5a98:	000c      	movs	r4, r1
    5a9a:	0016      	movs	r6, r2
    memset(cbuf, 0, sizeof(struct cbor_buf));
    5a9c:	2100      	movs	r1, #0
    5a9e:	2210      	movs	r2, #16
    5aa0:	f005 fe92 	bl	b7c8 <memset>
    cbuf->head = (uint8_t*)buf;
    5aa4:	602c      	str	r4, [r5, #0]
    cbuf->next = (uint8_t*)buf;
    5aa6:	60ac      	str	r4, [r5, #8]
    cbuf->tail = cbuf->head + len;
    5aa8:	19a4      	adds	r4, r4, r6
    5aaa:	606c      	str	r4, [r5, #4]
}
    5aac:	bd70      	pop	{r4, r5, r6, pc}

00005aae <_Z16cbor_buf_get_lenP8cbor_buf>:
    return cbuf->next - cbuf->head;
    5aae:	6883      	ldr	r3, [r0, #8]
    5ab0:	6800      	ldr	r0, [r0, #0]
    5ab2:	1a18      	subs	r0, r3, r0
}
    5ab4:	4770      	bx	lr

00005ab6 <_Z12cbor_enc_intP8cbor_bufi>:
 *         Error (negative values)
 */
int
cbor_enc_int(struct cbor_buf *cbuf, int val)
{
    uint8_t major_type = CBOR_TYPE_UINT;
    5ab6:	2300      	movs	r3, #0
{
    5ab8:	b510      	push	{r4, lr}
    5aba:	000a      	movs	r2, r1

    if (val < 0) {
    5abc:	4299      	cmp	r1, r3
    5abe:	da01      	bge.n	5ac4 <_Z12cbor_enc_intP8cbor_bufi+0xe>
        val = -1 - val;
    5ac0:	43ca      	mvns	r2, r1
        major_type = CBOR_TYPE_NINT;
    5ac2:	3320      	adds	r3, #32
    }

    return (cbor_enc_length(major_type, cbuf, val));
    5ac4:	0001      	movs	r1, r0
    5ac6:	0018      	movs	r0, r3
    5ac8:	f7ff ff98 	bl	59fc <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    5acc:	bd10      	pop	{r4, pc}

00005ace <_Z13cbor_enc_textP8cbor_bufPKci>:
 * output: status of encode operation.
 */
int
cbor_enc_text(struct cbor_buf *cbuf,
                const char *inp_string, int len)
{
    5ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ad0:	0004      	movs	r4, r0
    5ad2:	000f      	movs	r7, r1
    int rc = CBOR_OK;
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    5ad4:	0001      	movs	r1, r0
    5ad6:	2060      	movs	r0, #96	; 0x60
{
    5ad8:	0015      	movs	r5, r2
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    5ada:	f7ff ff8f 	bl	59fc <_ZL15cbor_enc_lengthhP8cbor_bufm>
    5ade:	1e06      	subs	r6, r0, #0

    if (!rc) {
    5ae0:	d107      	bne.n	5af2 <_Z13cbor_enc_textP8cbor_bufPKci+0x24>
        if (len > (cbuf->tail - cbuf->next)) {
    5ae2:	68a0      	ldr	r0, [r4, #8]
    5ae4:	6863      	ldr	r3, [r4, #4]
    5ae6:	1a1b      	subs	r3, r3, r0
    5ae8:	429d      	cmp	r5, r3
    5aea:	dd04      	ble.n	5af6 <_Z13cbor_enc_textP8cbor_bufPKci+0x28>
            cbuf->err = CBOR_NO_MEM;
    5aec:	2301      	movs	r3, #1
            rc = CBOR_ERR;
    5aee:	3e01      	subs	r6, #1
            cbuf->err = CBOR_NO_MEM;
    5af0:	60e3      	str	r3, [r4, #12]
            memcpy(cbuf->next, inp_string, len);
            cbuf->next += len;
        }
    }
    return rc;
}
    5af2:	0030      	movs	r0, r6
    5af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            memcpy(cbuf->next, inp_string, len);
    5af6:	002a      	movs	r2, r5
    5af8:	0039      	movs	r1, r7
    5afa:	f005 fe4a 	bl	b792 <memcpy>
            cbuf->next += len;
    5afe:	68a3      	ldr	r3, [r4, #8]
    5b00:	195d      	adds	r5, r3, r5
    5b02:	60a5      	str	r5, [r4, #8]
    return rc;
    5b04:	e7f5      	b.n	5af2 <_Z13cbor_enc_textP8cbor_bufPKci+0x24>

00005b06 <_Z12cbor_enc_mapP8cbor_bufi>:
 *        num_elements -> number of elements in the map
 * output: status of encode operation.
 */
int
cbor_enc_map(struct cbor_buf *cbuf, int num_elements)
{
    5b06:	b510      	push	{r4, lr}
    5b08:	000a      	movs	r2, r1
    return(cbor_enc_length(CBOR_TYPE_MAP, cbuf, num_elements));
    5b0a:	0001      	movs	r1, r0
    5b0c:	20a0      	movs	r0, #160	; 0xa0
    5b0e:	f7ff ff75 	bl	59fc <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    5b12:	bd10      	pop	{r4, pc}

00005b14 <_ZL8co_uint8PK5optlv>:
    const uint8_t *d = (const uint8_t *) o->ov;
    /* extending to allow parsing 16 bit content format seen on some clients */
    /* rfc7252:  A recipient MUST be prepared to process values with 
    *            leading zero bytes.
    */
    switch (o->ol) {
    5b14:	8842      	ldrh	r2, [r0, #2]
    const uint8_t *d = (const uint8_t *) o->ov;
    5b16:	6843      	ldr	r3, [r0, #4]
    switch (o->ol) {
    5b18:	2a01      	cmp	r2, #1
    5b1a:	d003      	beq.n	5b24 <_ZL8co_uint8PK5optlv+0x10>
    5b1c:	2a02      	cmp	r2, #2
    5b1e:	d003      	beq.n	5b28 <_ZL8co_uint8PK5optlv+0x14>
        case 0:     return 0;
    5b20:	2000      	movs	r0, #0
    5b22:	e000      	b.n	5b26 <_ZL8co_uint8PK5optlv+0x12>
        case 1:     return d[0];
    5b24:	7818      	ldrb	r0, [r3, #0]
        case 2:     return d[1];
        default:    return 0;
    }
}
    5b26:	4770      	bx	lr
        case 2:     return d[1];
    5b28:	7858      	ldrb	r0, [r3, #1]
    5b2a:	e7fc      	b.n	5b26 <_ZL8co_uint8PK5optlv+0x12>

00005b2c <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf>:
    error_t rc;

    ctx->msg = m;   /* save mbuf in context - free later */

    /* parse header */
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    5b2c:	223f      	movs	r2, #63	; 0x3f
{
    5b2e:	b510      	push	{r4, lr}
    ctx->msg = m;   /* save mbuf in context - free later */
    5b30:	6501      	str	r1, [r0, #80]	; 0x50
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    5b32:	790b      	ldrb	r3, [r1, #4]
        rc = ERR_VER_NOT_SUPP;
    5b34:	241d      	movs	r4, #29
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    5b36:	4393      	bics	r3, r2
    5b38:	2b40      	cmp	r3, #64	; 0x40
    5b3a:	d116      	bne.n	5b6a <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf+0x3e>
    uint8_t *b = m->m_data;
    5b3c:	1d0b      	adds	r3, r1, #4
        goto err;
    }
   
    ctx->hdr = b;
    5b3e:	6103      	str	r3, [r0, #16]
    ctx->type = (b[0] >> 4) & 0x3;
    5b40:	790b      	ldrb	r3, [r1, #4]
    ctx->tkl  = b[0] & 0xf;
    5b42:	3a30      	subs	r2, #48	; 0x30
    ctx->type = (b[0] >> 4) & 0x3;
    5b44:	069b      	lsls	r3, r3, #26
    5b46:	0f9b      	lsrs	r3, r3, #30
    5b48:	7003      	strb	r3, [r0, #0]
    ctx->tkl  = b[0] & 0xf;
    5b4a:	790b      	ldrb	r3, [r1, #4]
    5b4c:	401a      	ands	r2, r3
    5b4e:	7042      	strb	r2, [r0, #1]
    ctx->code = b[1];
    5b50:	794b      	ldrb	r3, [r1, #5]
    5b52:	7083      	strb	r3, [r0, #2]
    ctx->mid  = (b[2] << 8) + b[3];
    5b54:	798c      	ldrb	r4, [r1, #6]
    5b56:	79cb      	ldrb	r3, [r1, #7]
    5b58:	0224      	lsls	r4, r4, #8
    5b5a:	191b      	adds	r3, r3, r4
    ctx->plen = 0;  /* Initialise */
    5b5c:	2400      	movs	r4, #0
    ctx->mid  = (b[2] << 8) + b[3];
    5b5e:	8083      	strh	r3, [r0, #4]
    ctx->plen = 0;  /* Initialise */
    5b60:	6404      	str	r4, [r0, #64]	; 0x40
    /* sanity checks 
        token length <= 8
        message length > header + token
    */

    memcpy(ctx->token, b + 4, ctx->tkl);
    5b62:	3108      	adds	r1, #8
    5b64:	3006      	adds	r0, #6
    5b66:	f005 fe14 	bl	b792 <memcpy>

err:
    return rc;
}
    5b6a:	0020      	movs	r0, r4
    5b6c:	bd10      	pop	{r4, pc}

00005b6e <_Z13co_uint32_h2nPK5optlv.part.1>:
co_uint32_h2n(const struct optlv *o)
    5b6e:	6843      	ldr	r3, [r0, #4]
}
    5b70:	6818      	ldr	r0, [r3, #0]
    5b72:	ba00      	rev	r0, r0
    5b74:	4770      	bx	lr
	...

00005b78 <_Z12coap_con_addtP18coap_ack_cb_info_t>:
{
    5b78:	b570      	push	{r4, r5, r6, lr}
    dlog(LOG_DEBUG, "Adding callback for MID: 0x%x\n", mid);
    5b7a:	0002      	movs	r2, r0
{
    5b7c:	0005      	movs	r5, r0
    5b7e:	000c      	movs	r4, r1
    dlog(LOG_DEBUG, "Adding callback for MID: 0x%x\n", mid);
    5b80:	2007      	movs	r0, #7
    5b82:	4909      	ldr	r1, [pc, #36]	; (5ba8 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x30>)
    5b84:	f7fe fb48 	bl	4218 <_Z4dlogiPKcz>
    intrct_cb_q[intrct_cb_q_ind].mid = mid;
    5b88:	200c      	movs	r0, #12
    5b8a:	4908      	ldr	r1, [pc, #32]	; (5bac <_Z12coap_con_addtP18coap_ack_cb_info_t+0x34>)
    5b8c:	4b08      	ldr	r3, [pc, #32]	; (5bb0 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x38>)
    5b8e:	780a      	ldrb	r2, [r1, #0]
    5b90:	4350      	muls	r0, r2
    5b92:	52c5      	strh	r5, [r0, r3]
    intrct_cb_q[intrct_cb_q_ind].cbinfo = *cbi;
    5b94:	181b      	adds	r3, r3, r0
    5b96:	3304      	adds	r3, #4
    5b98:	cc21      	ldmia	r4!, {r0, r5}
    5b9a:	c321      	stmia	r3!, {r0, r5}
    intrct_cb_q_ind = (intrct_cb_q_ind + 1) % MID_CB_Q_SZ;
    5b9c:	2303      	movs	r3, #3
    5b9e:	3201      	adds	r2, #1
    5ba0:	401a      	ands	r2, r3
}
    5ba2:	2000      	movs	r0, #0
    intrct_cb_q_ind = (intrct_cb_q_ind + 1) % MID_CB_Q_SZ;
    5ba4:	700a      	strb	r2, [r1, #0]
}
    5ba6:	bd70      	pop	{r4, r5, r6, pc}
    5ba8:	0000fe0f 	.word	0x0000fe0f
    5bac:	200012a8 	.word	0x200012a8
    5bb0:	20001278 	.word	0x20001278

00005bb4 <_Z11coap_ack_rxtP4mbuf>:
{
    5bb4:	b570      	push	{r4, r5, r6, lr}
    dlog(LOG_DEBUG, "Looking up callback for MID: 0x%x\n", mid);
    5bb6:	0002      	movs	r2, r0
{
    5bb8:	0005      	movs	r5, r0
    5bba:	000c      	movs	r4, r1
    dlog(LOG_DEBUG, "Looking up callback for MID: 0x%x\n", mid);
    5bbc:	2007      	movs	r0, #7
    5bbe:	490c      	ldr	r1, [pc, #48]	; (5bf0 <_Z11coap_ack_rxtP4mbuf+0x3c>)
    5bc0:	f7fe fb2a 	bl	4218 <_Z4dlogiPKcz>
    5bc4:	2200      	movs	r2, #0
    5bc6:	210c      	movs	r1, #12
        if (intrct_cb_q[i].mid == mid) {
    5bc8:	4b0a      	ldr	r3, [pc, #40]	; (5bf4 <_Z11coap_ack_rxtP4mbuf+0x40>)
    for (i = 0; i < MID_CB_Q_SZ; i++) {
    5bca:	0016      	movs	r6, r2
    5bcc:	2a04      	cmp	r2, #4
    5bce:	d00d      	beq.n	5bec <_Z11coap_ack_rxtP4mbuf+0x38>
        if (intrct_cb_q[i].mid == mid) {
    5bd0:	0008      	movs	r0, r1
    5bd2:	3201      	adds	r2, #1
    5bd4:	4350      	muls	r0, r2
    5bd6:	380c      	subs	r0, #12
    5bd8:	5a18      	ldrh	r0, [r3, r0]
    5bda:	42a8      	cmp	r0, r5
    5bdc:	d1f5      	bne.n	5bca <_Z11coap_ack_rxtP4mbuf+0x16>
            return (intrct_cb_q[i].cbinfo.cb(intrct_cb_q[i].cbinfo.cbctx, m));
    5bde:	4371      	muls	r1, r6
    5be0:	185b      	adds	r3, r3, r1
    5be2:	685a      	ldr	r2, [r3, #4]
    5be4:	0021      	movs	r1, r4
    5be6:	6898      	ldr	r0, [r3, #8]
    5be8:	4790      	blx	r2
}
    5bea:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_NO_ENTRY;
    5bec:	200c      	movs	r0, #12
    5bee:	e7fc      	b.n	5bea <_Z11coap_ack_rxtP4mbuf+0x36>
    5bf0:	0000fdec 	.word	0x0000fdec
    5bf4:	20001278 	.word	0x20001278

00005bf8 <_Z15coap_opt_strcmpPK5optlvPKc>:
{
    5bf8:	b570      	push	{r4, r5, r6, lr}
    5bfa:	0003      	movs	r3, r0
    5bfc:	000c      	movs	r4, r1
        return 1;
    5bfe:	2001      	movs	r0, #1
    if (!str) {
    5c00:	2900      	cmp	r1, #0
    5c02:	d00a      	beq.n	5c1a <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
    diff = strncmp((char*)opt->ov, str, opt->ol);  /* option is not NUL terminated */
    5c04:	885d      	ldrh	r5, [r3, #2]
    5c06:	6858      	ldr	r0, [r3, #4]
    5c08:	002a      	movs	r2, r5
    5c0a:	f006 ff06 	bl	ca1a <strncmp>
    if (diff) {
    5c0e:	2800      	cmp	r0, #0
    5c10:	d103      	bne.n	5c1a <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
        return (opt->ol - strlen(str));
    5c12:	0020      	movs	r0, r4
    5c14:	f006 fee5 	bl	c9e2 <strlen>
    5c18:	1a28      	subs	r0, r5, r0
}
    5c1a:	bd70      	pop	{r4, r5, r6, pc}

00005c1c <_Z12coap_pathstrPK12coap_msg_ctx>:
{
    5c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    void *it = NULL;
    5c1e:	2400      	movs	r4, #0
    uristr[0] = 0;
    5c20:	4d12      	ldr	r5, [pc, #72]	; (5c6c <_Z12coap_pathstrPK12coap_msg_ctx+0x50>)
{
    5c22:	b085      	sub	sp, #20
    5c24:	9001      	str	r0, [sp, #4]
    void *it = NULL;
    5c26:	9403      	str	r4, [sp, #12]
    uristr[0] = 0;
    5c28:	702c      	strb	r4, [r5, #0]
    while ((opt = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_PATH, &it)) != NULL)
    5c2a:	9801      	ldr	r0, [sp, #4]
    5c2c:	aa03      	add	r2, sp, #12
    5c2e:	210b      	movs	r1, #11
    5c30:	304c      	adds	r0, #76	; 0x4c
    5c32:	f000 fd0b 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    5c36:	1e06      	subs	r6, r0, #0
    5c38:	d012      	beq.n	5c60 <_Z12coap_pathstrPK12coap_msg_ctx+0x44>
        if (ul + opt->ol + 1 > (int)sizeof(uristr))
    5c3a:	8843      	ldrh	r3, [r0, #2]
    5c3c:	191b      	adds	r3, r3, r4
    5c3e:	2bff      	cmp	r3, #255	; 0xff
    5c40:	dc11      	bgt.n	5c66 <_Z12coap_pathstrPK12coap_msg_ctx+0x4a>
        uristr[ul++] = '/';
    5c42:	232f      	movs	r3, #47	; 0x2f
    5c44:	1c67      	adds	r7, r4, #1
    5c46:	552b      	strb	r3, [r5, r4]
        memcpy(uristr + ul, opt->ov, opt->ol);
    5c48:	19ec      	adds	r4, r5, r7
    5c4a:	8842      	ldrh	r2, [r0, #2]
    5c4c:	6841      	ldr	r1, [r0, #4]
    5c4e:	0020      	movs	r0, r4
    5c50:	f005 fd9f 	bl	b792 <memcpy>
        uristr[ul + opt->ol] = 0;
    5c54:	2200      	movs	r2, #0
    5c56:	8873      	ldrh	r3, [r6, #2]
    5c58:	54e2      	strb	r2, [r4, r3]
        ul += opt->ol;
    5c5a:	8874      	ldrh	r4, [r6, #2]
    5c5c:	19e4      	adds	r4, r4, r7
    while ((opt = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_PATH, &it)) != NULL)
    5c5e:	e7e4      	b.n	5c2a <_Z12coap_pathstrPK12coap_msg_ctx+0xe>
    return uristr;
    5c60:	0028      	movs	r0, r5
}
    5c62:	b005      	add	sp, #20
    5c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return NULL;
    5c66:	2000      	movs	r0, #0
    5c68:	e7fb      	b.n	5c62 <_Z12coap_pathstrPK12coap_msg_ctx+0x46>
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	20001172 	.word	0x20001172

00005c70 <_ZL12coap_msg_logPK12coap_msg_ctx>:
{
    5c70:	b510      	push	{r4, lr}
    5c72:	b0c0      	sub	sp, #256	; 0x100
    uriqp[0] = '\0';
    5c74:	2300      	movs	r3, #0
    5c76:	466a      	mov	r2, sp
    5c78:	7013      	strb	r3, [r2, #0]
            ctx->type == COAP_T_CONF_VAL ? "CON" : 
    5c7a:	7803      	ldrb	r3, [r0, #0]
{
    5c7c:	0004      	movs	r4, r0
    dlog(LOG_DEBUG, "REQ/RSP Type: %s", 
    5c7e:	4a29      	ldr	r2, [pc, #164]	; (5d24 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb4>)
    5c80:	2b00      	cmp	r3, #0
    5c82:	d006      	beq.n	5c92 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    5c84:	4a28      	ldr	r2, [pc, #160]	; (5d28 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb8>)
    5c86:	2b01      	cmp	r3, #1
    5c88:	d003      	beq.n	5c92 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    5c8a:	4a28      	ldr	r2, [pc, #160]	; (5d2c <_ZL12coap_msg_logPK12coap_msg_ctx+0xbc>)
    5c8c:	2b02      	cmp	r3, #2
    5c8e:	d000      	beq.n	5c92 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    5c90:	4a27      	ldr	r2, [pc, #156]	; (5d30 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc0>)
            ctx->type == COAP_T_ACK_VAL ? "ACK" : "RST");
    5c92:	4928      	ldr	r1, [pc, #160]	; (5d34 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc4>)
    5c94:	2007      	movs	r0, #7
    5c96:	f7fe fabf 	bl	4218 <_Z4dlogiPKcz>
    if ((ctx->code & COAP_CODE_C_MASK) == COAP_CODE_REQUEST) {
    5c9a:	78a3      	ldrb	r3, [r4, #2]
    5c9c:	221f      	movs	r2, #31
    5c9e:	0019      	movs	r1, r3
    5ca0:	4391      	bics	r1, r2
    5ca2:	d136      	bne.n	5d12 <_ZL12coap_msg_logPK12coap_msg_ctx+0xa2>
        dlog(LOG_DEBUG, "REQ/ACK Code: %s",
    5ca4:	4a24      	ldr	r2, [pc, #144]	; (5d38 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc8>)
    5ca6:	2b01      	cmp	r3, #1
    5ca8:	d009      	beq.n	5cbe <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_POST ? "POST" :
    5caa:	4a24      	ldr	r2, [pc, #144]	; (5d3c <_ZL12coap_msg_logPK12coap_msg_ctx+0xcc>)
    5cac:	2b02      	cmp	r3, #2
    5cae:	d006      	beq.n	5cbe <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_PUT ? "PUT" : 
    5cb0:	4a23      	ldr	r2, [pc, #140]	; (5d40 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd0>)
    5cb2:	2b03      	cmp	r3, #3
    5cb4:	d003      	beq.n	5cbe <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_DELETE ? 
    5cb6:	4a23      	ldr	r2, [pc, #140]	; (5d44 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd4>)
    5cb8:	2b04      	cmp	r3, #4
    5cba:	d000      	beq.n	5cbe <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
    5cbc:	4a22      	ldr	r2, [pc, #136]	; (5d48 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd8>)
                "DELETE" : "EMPTY");
    5cbe:	4923      	ldr	r1, [pc, #140]	; (5d4c <_ZL12coap_msg_logPK12coap_msg_ctx+0xdc>)
                    "Client Error" : "Server Error");
    5cc0:	2007      	movs	r0, #7
    5cc2:	f7fe faa9 	bl	4218 <_Z4dlogiPKcz>
    substr = coap_pathstr(ctx);
    5cc6:	0020      	movs	r0, r4
    5cc8:	f7ff ffa8 	bl	5c1c <_Z12coap_pathstrPK12coap_msg_ctx>
    if (substr[0] != '\0') {
    5ccc:	7803      	ldrb	r3, [r0, #0]
    substr = coap_pathstr(ctx);
    5cce:	0001      	movs	r1, r0
    if (substr[0] != '\0') {
    5cd0:	2b00      	cmp	r3, #0
    5cd2:	d002      	beq.n	5cda <_ZL12coap_msg_logPK12coap_msg_ctx+0x6a>
        strcat(uriqp, substr);
    5cd4:	4668      	mov	r0, sp
    5cd6:	f006 fe65 	bl	c9a4 <strcat>
    if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_QUERY, NULL))) {
    5cda:	0020      	movs	r0, r4
    5cdc:	2200      	movs	r2, #0
    5cde:	304c      	adds	r0, #76	; 0x4c
    5ce0:	210f      	movs	r1, #15
    5ce2:	f000 fcb3 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    5ce6:	1e04      	subs	r4, r0, #0
    5ce8:	d008      	beq.n	5cfc <_ZL12coap_msg_logPK12coap_msg_ctx+0x8c>
        strcat(uriqp, "?");
    5cea:	4919      	ldr	r1, [pc, #100]	; (5d50 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe0>)
    5cec:	4668      	mov	r0, sp
    5cee:	f006 fe59 	bl	c9a4 <strcat>
        strncat(uriqp, (char *)op->ov, op->ol);
    5cf2:	8862      	ldrh	r2, [r4, #2]
    5cf4:	6861      	ldr	r1, [r4, #4]
    5cf6:	4668      	mov	r0, sp
    5cf8:	f006 fe7a 	bl	c9f0 <strncat>
    if (uriqp[0] != '\0') {
    5cfc:	466b      	mov	r3, sp
    5cfe:	781b      	ldrb	r3, [r3, #0]
    5d00:	2b00      	cmp	r3, #0
    5d02:	d004      	beq.n	5d0e <_ZL12coap_msg_logPK12coap_msg_ctx+0x9e>
        dlog(LOG_INFO, "Uri-Path-Query: %s", uriqp);
    5d04:	466a      	mov	r2, sp
    5d06:	4913      	ldr	r1, [pc, #76]	; (5d54 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe4>)
    5d08:	2006      	movs	r0, #6
    5d0a:	f7fe fa85 	bl	4218 <_Z4dlogiPKcz>
}
    5d0e:	b040      	add	sp, #256	; 0x100
    5d10:	bd10      	pop	{r4, pc}
        dlog(LOG_DEBUG, "RSP Code: %s",
    5d12:	4a11      	ldr	r2, [pc, #68]	; (5d58 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe8>)
    5d14:	2940      	cmp	r1, #64	; 0x40
    5d16:	d003      	beq.n	5d20 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb0>
    5d18:	4a10      	ldr	r2, [pc, #64]	; (5d5c <_ZL12coap_msg_logPK12coap_msg_ctx+0xec>)
    5d1a:	2980      	cmp	r1, #128	; 0x80
    5d1c:	d000      	beq.n	5d20 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb0>
    5d1e:	4a10      	ldr	r2, [pc, #64]	; (5d60 <_ZL12coap_msg_logPK12coap_msg_ctx+0xf0>)
                    "Client Error" : "Server Error");
    5d20:	4910      	ldr	r1, [pc, #64]	; (5d64 <_ZL12coap_msg_logPK12coap_msg_ctx+0xf4>)
    5d22:	e7cd      	b.n	5cc0 <_ZL12coap_msg_logPK12coap_msg_ctx+0x50>
    5d24:	0000ffcb 	.word	0x0000ffcb
    5d28:	0000ffc7 	.word	0x0000ffc7
    5d2c:	0000ffd3 	.word	0x0000ffd3
    5d30:	0000ffcf 	.word	0x0000ffcf
    5d34:	00010013 	.word	0x00010013
    5d38:	0000ffdc 	.word	0x0000ffdc
    5d3c:	0000ffd7 	.word	0x0000ffd7
    5d40:	0000ffe0 	.word	0x0000ffe0
    5d44:	0000ffea 	.word	0x0000ffea
    5d48:	0000ffe4 	.word	0x0000ffe4
    5d4c:	00010024 	.word	0x00010024
    5d50:	0000fa01 	.word	0x0000fa01
    5d54:	00010042 	.word	0x00010042
    5d58:	0000fffe 	.word	0x0000fffe
    5d5c:	00010006 	.word	0x00010006
    5d60:	0000fff1 	.word	0x0000fff1
    5d64:	00010035 	.word	0x00010035

00005d68 <_Z14coap_opt_parseP5optlvPKhi>:
{
    5d68:	b570      	push	{r4, r5, r6, lr}
    5d6a:	260f      	movs	r6, #15
    od = b[0] >> 4;
    5d6c:	780b      	ldrb	r3, [r1, #0]
    5d6e:	111d      	asrs	r5, r3, #4
    5d70:	b2ac      	uxth	r4, r5
    5d72:	4033      	ands	r3, r6
    if (od < 13) {
    5d74:	2d0c      	cmp	r5, #12
    5d76:	dd13      	ble.n	5da0 <_Z14coap_opt_parseP5optlvPKhi+0x38>
    else if (od == 13) {
    5d78:	2d0d      	cmp	r5, #13
    5d7a:	d106      	bne.n	5d8a <_Z14coap_opt_parseP5optlvPKhi+0x22>
        od += b[1];
    5d7c:	784c      	ldrb	r4, [r1, #1]
        i = 2;
    5d7e:	3d0b      	subs	r5, #11
        od += b[1];
    5d80:	340d      	adds	r4, #13
    if (ol < 13) {
    5d82:	2b0c      	cmp	r3, #12
    5d84:	d80e      	bhi.n	5da4 <_Z14coap_opt_parseP5optlvPKhi+0x3c>
        ol = (b[i] << 8) + b[i+1] + 269;
    5d86:	b29b      	uxth	r3, r3
    5d88:	e011      	b.n	5dae <_Z14coap_opt_parseP5optlvPKhi+0x46>
    else if (od == 14) {
    5d8a:	2d0e      	cmp	r5, #14
    5d8c:	d124      	bne.n	5dd8 <_Z14coap_opt_parseP5optlvPKhi+0x70>
        od = (b[1] << 8) + b[2] + 269;
    5d8e:	788c      	ldrb	r4, [r1, #2]
    5d90:	784d      	ldrb	r5, [r1, #1]
    5d92:	340e      	adds	r4, #14
    5d94:	022d      	lsls	r5, r5, #8
    5d96:	34ff      	adds	r4, #255	; 0xff
    5d98:	1964      	adds	r4, r4, r5
    5d9a:	b2a4      	uxth	r4, r4
        i = 3;
    5d9c:	2503      	movs	r5, #3
    5d9e:	e7f0      	b.n	5d82 <_Z14coap_opt_parseP5optlvPKhi+0x1a>
        i = 1;
    5da0:	2501      	movs	r5, #1
    5da2:	e7ee      	b.n	5d82 <_Z14coap_opt_parseP5optlvPKhi+0x1a>
    else if (ol == 13) {
    5da4:	2b0d      	cmp	r3, #13
    5da6:	d10d      	bne.n	5dc4 <_Z14coap_opt_parseP5optlvPKhi+0x5c>
        ol += b[i];
    5da8:	5d4b      	ldrb	r3, [r1, r5]
        i++;
    5daa:	3501      	adds	r5, #1
        ol += b[i];
    5dac:	330d      	adds	r3, #13
    if (len < i || len < i + ol) {
    5dae:	4295      	cmp	r5, r2
    5db0:	dc12      	bgt.n	5dd8 <_Z14coap_opt_parseP5optlvPKhi+0x70>
    5db2:	195e      	adds	r6, r3, r5
    5db4:	42b2      	cmp	r2, r6
    5db6:	db0f      	blt.n	5dd8 <_Z14coap_opt_parseP5optlvPKhi+0x70>
    o->ov = b + i;
    5db8:	1949      	adds	r1, r1, r5
    o->ot = od;
    5dba:	8004      	strh	r4, [r0, #0]
    o->ol = ol;
    5dbc:	8043      	strh	r3, [r0, #2]
    o->ov = b + i;
    5dbe:	6041      	str	r1, [r0, #4]
}
    5dc0:	0030      	movs	r0, r6
    5dc2:	bd70      	pop	{r4, r5, r6, pc}
    else if (od == 14) {
    5dc4:	2c0e      	cmp	r4, #14
    5dc6:	d107      	bne.n	5dd8 <_Z14coap_opt_parseP5optlvPKhi+0x70>
        ol = (b[i] << 8) + b[i+1] + 269;
    5dc8:	5d4e      	ldrb	r6, [r1, r5]
    5dca:	194b      	adds	r3, r1, r5
    5dcc:	785b      	ldrb	r3, [r3, #1]
    5dce:	0236      	lsls	r6, r6, #8
    5dd0:	199b      	adds	r3, r3, r6
    5dd2:	330e      	adds	r3, #14
    5dd4:	33ff      	adds	r3, #255	; 0xff
    5dd6:	e7d6      	b.n	5d86 <_Z14coap_opt_parseP5optlvPKhi+0x1e>
    return -1;
    5dd8:	2601      	movs	r6, #1
    5dda:	4276      	negs	r6, r6
    5ddc:	e7f0      	b.n	5dc0 <_Z14coap_opt_parseP5optlvPKhi+0x58>
	...

00005de0 <_Z12coap_opt_addPK5optlvPhi>:
{
    5de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5de2:	000e      	movs	r6, r1
    if ((o->ot > 255 + 13) || (o->ol > 255 + 13)) {
    5de4:	2186      	movs	r1, #134	; 0x86
    5de6:	8803      	ldrh	r3, [r0, #0]
{
    5de8:	0005      	movs	r5, r0
    if ((o->ot > 255 + 13) || (o->ol > 255 + 13)) {
    5dea:	0049      	lsls	r1, r1, #1
    5dec:	428b      	cmp	r3, r1
    5dee:	dc34      	bgt.n	5e5a <_Z12coap_opt_addPK5optlvPhi+0x7a>
    5df0:	8847      	ldrh	r7, [r0, #2]
    5df2:	428f      	cmp	r7, r1
    5df4:	dc31      	bgt.n	5e5a <_Z12coap_opt_addPK5optlvPhi+0x7a>
    5df6:	a901      	add	r1, sp, #4
    if (o->ot < 13) {
    5df8:	2b0c      	cmp	r3, #12
    5dfa:	dc12      	bgt.n	5e22 <_Z12coap_opt_addPK5optlvPhi+0x42>
        *op++ = o->ot << 4;
    5dfc:	011b      	lsls	r3, r3, #4
    5dfe:	700b      	strb	r3, [r1, #0]
    5e00:	466b      	mov	r3, sp
    5e02:	1d5c      	adds	r4, r3, #5
    if (o->ol < 13) {
    5e04:	2f0c      	cmp	r7, #12
    5e06:	dc13      	bgt.n	5e30 <_Z12coap_opt_addPK5optlvPhi+0x50>
        oh[0] |= o->ol;
    5e08:	780b      	ldrb	r3, [r1, #0]
    5e0a:	433b      	orrs	r3, r7
    5e0c:	700b      	strb	r3, [r1, #0]
    ohl = op - oh;
    5e0e:	1a64      	subs	r4, r4, r1
    if (ohl + o->ol > len) {
    5e10:	193f      	adds	r7, r7, r4
    5e12:	4297      	cmp	r7, r2
    5e14:	dd15      	ble.n	5e42 <_Z12coap_opt_addPK5optlvPhi+0x62>
        dlog(LOG_ERR, "Insufficient buffer space to add option\n");
    5e16:	2003      	movs	r0, #3
    5e18:	4911      	ldr	r1, [pc, #68]	; (5e60 <_Z12coap_opt_addPK5optlvPhi+0x80>)
    5e1a:	f7fe f9fd 	bl	4218 <_Z4dlogiPKcz>
        return 0;
    5e1e:	2000      	movs	r0, #0
}
    5e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *op++ = o->ot - 13;
    5e22:	3b0d      	subs	r3, #13
        *op++ = 13 << 4;
    5e24:	20d0      	movs	r0, #208	; 0xd0
        *op++ = o->ot - 13;
    5e26:	704b      	strb	r3, [r1, #1]
    5e28:	466b      	mov	r3, sp
        *op++ = 13 << 4;
    5e2a:	7008      	strb	r0, [r1, #0]
        *op++ = o->ot - 13;
    5e2c:	1d9c      	adds	r4, r3, #6
    5e2e:	e7e9      	b.n	5e04 <_Z12coap_opt_addPK5optlvPhi+0x24>
        oh[0] |= 13;
    5e30:	230d      	movs	r3, #13
    5e32:	7808      	ldrb	r0, [r1, #0]
    5e34:	4303      	orrs	r3, r0
    5e36:	700b      	strb	r3, [r1, #0]
        *op++ = o->ol - 13;
    5e38:	003b      	movs	r3, r7
    5e3a:	3b0d      	subs	r3, #13
    5e3c:	7023      	strb	r3, [r4, #0]
    5e3e:	3401      	adds	r4, #1
    5e40:	e7e5      	b.n	5e0e <_Z12coap_opt_addPK5optlvPhi+0x2e>
    memcpy(b, oh, ohl);
    5e42:	0022      	movs	r2, r4
    5e44:	0030      	movs	r0, r6
    5e46:	f005 fca4 	bl	b792 <memcpy>
    memmove(b + ohl, o->ov, o->ol);
    5e4a:	886a      	ldrh	r2, [r5, #2]
    5e4c:	1930      	adds	r0, r6, r4
    5e4e:	6869      	ldr	r1, [r5, #4]
    5e50:	f005 fca8 	bl	b7a4 <memmove>
    return (o->ol + ohl);
    5e54:	8868      	ldrh	r0, [r5, #2]
    5e56:	1900      	adds	r0, r0, r4
    5e58:	e7e2      	b.n	5e20 <_Z12coap_opt_addPK5optlvPhi+0x40>
        return -1;
    5e5a:	2001      	movs	r0, #1
    5e5c:	4240      	negs	r0, r0
    5e5e:	e7df      	b.n	5e20 <_Z12coap_opt_addPK5optlvPhi+0x40>
    5e60:	0000fe2e 	.word	0x0000fe2e

00005e64 <_Z13co_uint32_n2hPK5optlv>:
{
    5e64:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    5e66:	8842      	ldrh	r2, [r0, #2]
{
    5e68:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    5e6a:	2a04      	cmp	r2, #4
    5e6c:	d906      	bls.n	5e7c <_Z13co_uint32_n2hPK5optlv+0x18>
    5e6e:	2120      	movs	r1, #32
    5e70:	4b14      	ldr	r3, [pc, #80]	; (5ec4 <_Z13co_uint32_n2hPK5optlv+0x60>)
    5e72:	4a15      	ldr	r2, [pc, #84]	; (5ec8 <_Z13co_uint32_n2hPK5optlv+0x64>)
    5e74:	31ff      	adds	r1, #255	; 0xff
    5e76:	4815      	ldr	r0, [pc, #84]	; (5ecc <_Z13co_uint32_n2hPK5optlv+0x68>)
    5e78:	f005 fb0e 	bl	b498 <__assert_func>
    switch (o->ol) {
    5e7c:	3a01      	subs	r2, #1
    uint32_t b = 0;
    5e7e:	2000      	movs	r0, #0
    switch (o->ol) {
    5e80:	2a03      	cmp	r2, #3
    5e82:	d806      	bhi.n	5e92 <_Z13co_uint32_n2hPK5optlv+0x2e>
    5e84:	0010      	movs	r0, r2
    5e86:	f002 fb2b 	bl	84e0 <__gnu_thumb1_case_uqi>
    5e8a:	0502      	.short	0x0502
    5e8c:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    5e8e:	685b      	ldr	r3, [r3, #4]
    5e90:	7818      	ldrb	r0, [r3, #0]
}
    5e92:	bd10      	pop	{r4, pc}
    case 2: b = ntohs(*(uint16_t *)(o->ov));
    5e94:	685b      	ldr	r3, [r3, #4]
    5e96:	881b      	ldrh	r3, [r3, #0]
    5e98:	0a18      	lsrs	r0, r3, #8
    5e9a:	021b      	lsls	r3, r3, #8
    5e9c:	4318      	orrs	r0, r3
    5e9e:	b280      	uxth	r0, r0
            break;
    5ea0:	e7f7      	b.n	5e92 <_Z13co_uint32_n2hPK5optlv+0x2e>
    case 3: b = ntohl(*(uint32_t *)(o->ov) << 8);
    5ea2:	685b      	ldr	r3, [r3, #4]
    5ea4:	490a      	ldr	r1, [pc, #40]	; (5ed0 <_Z13co_uint32_n2hPK5optlv+0x6c>)
    5ea6:	681b      	ldr	r3, [r3, #0]
    5ea8:	0218      	lsls	r0, r3, #8
    5eaa:	041a      	lsls	r2, r3, #16
    5eac:	400a      	ands	r2, r1
    5eae:	0e00      	lsrs	r0, r0, #24
    5eb0:	4310      	orrs	r0, r2
    5eb2:	22ff      	movs	r2, #255	; 0xff
    5eb4:	0212      	lsls	r2, r2, #8
    5eb6:	4013      	ands	r3, r2
    5eb8:	4318      	orrs	r0, r3
            break;
    5eba:	e7ea      	b.n	5e92 <_Z13co_uint32_n2hPK5optlv+0x2e>
    5ebc:	0018      	movs	r0, r3
    5ebe:	f7ff fe56 	bl	5b6e <_Z13co_uint32_h2nPK5optlv.part.1>
    5ec2:	e7e6      	b.n	5e92 <_Z13co_uint32_n2hPK5optlv+0x2e>
    5ec4:	0000fe57 	.word	0x0000fe57
    5ec8:	0001007a 	.word	0x0001007a
    5ecc:	0000fe71 	.word	0x0000fe71
    5ed0:	00ffff00 	.word	0x00ffff00

00005ed4 <_Z13co_uint32_h2nPK5optlv>:
{
    5ed4:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    5ed6:	8842      	ldrh	r2, [r0, #2]
{
    5ed8:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    5eda:	2a04      	cmp	r2, #4
    5edc:	d906      	bls.n	5eec <_Z13co_uint32_h2nPK5optlv+0x18>
    5ede:	2136      	movs	r1, #54	; 0x36
    5ee0:	4b14      	ldr	r3, [pc, #80]	; (5f34 <_Z13co_uint32_h2nPK5optlv+0x60>)
    5ee2:	4a15      	ldr	r2, [pc, #84]	; (5f38 <_Z13co_uint32_h2nPK5optlv+0x64>)
    5ee4:	31ff      	adds	r1, #255	; 0xff
    5ee6:	4815      	ldr	r0, [pc, #84]	; (5f3c <_Z13co_uint32_h2nPK5optlv+0x68>)
    5ee8:	f005 fad6 	bl	b498 <__assert_func>
    switch (o->ol) {
    5eec:	3a01      	subs	r2, #1
    uint32_t b = 0;
    5eee:	2000      	movs	r0, #0
    switch (o->ol) {
    5ef0:	2a03      	cmp	r2, #3
    5ef2:	d806      	bhi.n	5f02 <_Z13co_uint32_h2nPK5optlv+0x2e>
    5ef4:	0010      	movs	r0, r2
    5ef6:	f002 faf3 	bl	84e0 <__gnu_thumb1_case_uqi>
    5efa:	0502      	.short	0x0502
    5efc:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    5efe:	685b      	ldr	r3, [r3, #4]
    5f00:	7818      	ldrb	r0, [r3, #0]
}
    5f02:	bd10      	pop	{r4, pc}
    case 2: b = htons(*(uint16_t *)(o->ov));
    5f04:	685b      	ldr	r3, [r3, #4]
    5f06:	881b      	ldrh	r3, [r3, #0]
    5f08:	0a18      	lsrs	r0, r3, #8
    5f0a:	021b      	lsls	r3, r3, #8
    5f0c:	4318      	orrs	r0, r3
    5f0e:	b280      	uxth	r0, r0
            break;
    5f10:	e7f7      	b.n	5f02 <_Z13co_uint32_h2nPK5optlv+0x2e>
    case 3: b = htonl(*(uint32_t *)(o->ov) << 8);
    5f12:	685b      	ldr	r3, [r3, #4]
    5f14:	490a      	ldr	r1, [pc, #40]	; (5f40 <_Z13co_uint32_h2nPK5optlv+0x6c>)
    5f16:	681b      	ldr	r3, [r3, #0]
    5f18:	0218      	lsls	r0, r3, #8
    5f1a:	041a      	lsls	r2, r3, #16
    5f1c:	400a      	ands	r2, r1
    5f1e:	0e00      	lsrs	r0, r0, #24
    5f20:	4310      	orrs	r0, r2
    5f22:	22ff      	movs	r2, #255	; 0xff
    5f24:	0212      	lsls	r2, r2, #8
    5f26:	4013      	ands	r3, r2
    5f28:	4318      	orrs	r0, r3
            break;
    5f2a:	e7ea      	b.n	5f02 <_Z13co_uint32_h2nPK5optlv+0x2e>
    5f2c:	0018      	movs	r0, r3
    5f2e:	f7ff fe1e 	bl	5b6e <_Z13co_uint32_h2nPK5optlv.part.1>
    5f32:	e7e6      	b.n	5f02 <_Z13co_uint32_h2nPK5optlv+0x2e>
    5f34:	0000fe57 	.word	0x0000fe57
    5f38:	00010055 	.word	0x00010055
    5f3c:	0000fe71 	.word	0x0000fe71
    5f40:	00ffff00 	.word	0x00ffff00

00005f44 <_Z11get_mid_valv>:
{
    5f44:	b510      	push	{r4, lr}
    if (!mid_val) 
    5f46:	4c05      	ldr	r4, [pc, #20]	; (5f5c <_Z11get_mid_valv+0x18>)
    5f48:	8823      	ldrh	r3, [r4, #0]
    5f4a:	2b00      	cmp	r3, #0
    5f4c:	d102      	bne.n	5f54 <_Z11get_mid_valv+0x10>
        uint32_t epoch = get_rtc_epoch();
    5f4e:	f7fe f8cb 	bl	40e8 <_Z13get_rtc_epochv>
        mid_val = (uint16_t) ( epoch & 0x0000FFFF );
    5f52:	8020      	strh	r0, [r4, #0]
    return mid_val++;
    5f54:	8820      	ldrh	r0, [r4, #0]
    5f56:	1c43      	adds	r3, r0, #1
    5f58:	8023      	strh	r3, [r4, #0]
}
    5f5a:	bd10      	pop	{r4, pc}
    5f5c:	20001170 	.word	0x20001170

00005f60 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh>:
 * @return: 0 on success, nonzero error/special handling code. 
 */
error_t coap_msg_parse(struct coap_msg_ctx *ctx, struct mbuf *m, uint8_t *code)
{
    int i, osize, mdatalen;
    uint8_t *b = m->m_data; /* assuming single buffer */
    5f60:	000b      	movs	r3, r1
{
    5f62:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t *b = m->m_data; /* assuming single buffer */
    5f64:	3304      	adds	r3, #4
{
    5f66:	b08b      	sub	sp, #44	; 0x2c
    uint8_t *b = m->m_data; /* assuming single buffer */
    5f68:	9305      	str	r3, [sp, #20]
    int len = m->m_pktlen;
    5f6a:	880b      	ldrh	r3, [r1, #0]
{
    5f6c:	0006      	movs	r6, r0
    int len = m->m_pktlen;
    5f6e:	9302      	str	r3, [sp, #8]
    uint16_t ot;
    error_t rc;
    uint32_t obsval;

    /* Default code, indicating everything okay, so far. */
    *code = COAP_RSP_205_CONTENT;
    5f70:	2345      	movs	r3, #69	; 0x45
{
    5f72:	9104      	str	r1, [sp, #16]
    *code = COAP_RSP_205_CONTENT;
    5f74:	7013      	strb	r3, [r2, #0]
{
    5f76:	9203      	str	r2, [sp, #12]

    ddump(LOG_DEBUG, "CoAP REQ decode", b, len);
    5f78:	9b02      	ldr	r3, [sp, #8]
    5f7a:	9a05      	ldr	r2, [sp, #20]
    5f7c:	4953      	ldr	r1, [pc, #332]	; (60cc <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x16c>)
    5f7e:	2007      	movs	r0, #7
    5f80:	f7fe f96c 	bl	425c <_Z5ddumpiPKcPKvi>
    
    if ((rc = coap_hdr_parse(ctx, m)) != ERR_OK) {
    5f84:	9904      	ldr	r1, [sp, #16]
    5f86:	0030      	movs	r0, r6
    5f88:	f7ff fdd0 	bl	5b2c <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf>
    5f8c:	9001      	str	r0, [sp, #4]
    5f8e:	2800      	cmp	r0, #0
    5f90:	d13d      	bne.n	600e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        goto err;
    }

    i = 4 + ctx->tkl;

    ctx->final = 1; /* default value, not ongoing observe */
    5f92:	2701      	movs	r7, #1
    i = 4 + ctx->tkl;
    5f94:	7875      	ldrb	r5, [r6, #1]
    ctx->oidx = i;  /* where options will start, or maybe payload marker */

    if (ctx->code == COAP_EMPTY_MESSAGE) {
    5f96:	78b3      	ldrb	r3, [r6, #2]
    i = 4 + ctx->tkl;
    5f98:	3504      	adds	r5, #4
    ctx->final = 1; /* default value, not ongoing observe */
    5f9a:	64b7      	str	r7, [r6, #72]	; 0x48
    ctx->oidx = i;  /* where options will start, or maybe payload marker */
    5f9c:	61b5      	str	r5, [r6, #24]
    if (ctx->code == COAP_EMPTY_MESSAGE) {
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d035      	beq.n	600e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        /* ignore everything else */
        return ERR_OK;
    }

    // Make sure the packet length is not greater than what is allocated by m_get()
	mdatalen = get_mbuf_data_size()-16;
    5fa2:	f001 f94b 	bl	723c <_Z18get_mbuf_data_sizev>
    if ( len > mdatalen )
    5fa6:	9b02      	ldr	r3, [sp, #8]
	mdatalen = get_mbuf_data_size()-16;
    5fa8:	3810      	subs	r0, #16
    if ( len > mdatalen )
    5faa:	4283      	cmp	r3, r0
    5fac:	dc32      	bgt.n	6014 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xb4>
    5fae:	9c01      	ldr	r4, [sp, #4]
                ctx->final = 0;
            }
            break;
        default:
            /* unhandled critical option */
            if (COAP_OPTION_CRITICAL(ot)) {
    5fb0:	9707      	str	r7, [sp, #28]
    while ((osize = coap_opt_parse(&opt, b + i, len - i)) > 0) {
    5fb2:	9b05      	ldr	r3, [sp, #20]
    5fb4:	a808      	add	r0, sp, #32
    5fb6:	195f      	adds	r7, r3, r5
    5fb8:	9b02      	ldr	r3, [sp, #8]
    5fba:	0039      	movs	r1, r7
    5fbc:	1b5a      	subs	r2, r3, r5
    5fbe:	f7ff fed3 	bl	5d68 <_Z14coap_opt_parseP5optlvPKhi>
    5fc2:	9006      	str	r0, [sp, #24]
    5fc4:	2800      	cmp	r0, #0
    5fc6:	dd63      	ble.n	6090 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x130>
        ot += opt.ot;
    5fc8:	ab08      	add	r3, sp, #32
    5fca:	881b      	ldrh	r3, [r3, #0]
        dlog(LOG_DEBUG, "option type: %u len: %u", ot, opt.ol);
    5fcc:	4940      	ldr	r1, [pc, #256]	; (60d0 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x170>)
        ot += opt.ot;
    5fce:	18e4      	adds	r4, r4, r3
    5fd0:	b2a4      	uxth	r4, r4
        dlog(LOG_DEBUG, "option type: %u len: %u", ot, opt.ol);
    5fd2:	ab08      	add	r3, sp, #32
    5fd4:	885b      	ldrh	r3, [r3, #2]
    5fd6:	0022      	movs	r2, r4
    5fd8:	2007      	movs	r0, #7
    5fda:	f7fe f91d 	bl	4218 <_Z4dlogiPKcz>
        ddump(LOG_DEBUG, "option", opt.ov, opt.ol);
    5fde:	ab08      	add	r3, sp, #32
    5fe0:	885b      	ldrh	r3, [r3, #2]
    5fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5fe4:	493b      	ldr	r1, [pc, #236]	; (60d4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x174>)
    5fe6:	2007      	movs	r0, #7
    5fe8:	f7fe f938 	bl	425c <_Z5ddumpiPKcPKvi>
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    5fec:	0030      	movs	r0, r6
        opt.ot = ot;
    5fee:	ab08      	add	r3, sp, #32
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    5ff0:	0019      	movs	r1, r3
    5ff2:	304c      	adds	r0, #76	; 0x4c
        opt.ot = ot;
    5ff4:	801c      	strh	r4, [r3, #0]
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    5ff6:	f000 fae7 	bl	65c8 <_Z12copt_add_optP5sl_coP5optlv>
    5ffa:	1e07      	subs	r7, r0, #0
    5ffc:	d010      	beq.n	6020 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xc0>
            dlog(LOG_ALERT, "Couldn't save option data");
    5ffe:	4936      	ldr	r1, [pc, #216]	; (60d8 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x178>)
    6000:	2001      	movs	r0, #1
    6002:	f7fe f909 	bl	4218 <_Z4dlogiPKcz>
            *code = COAP_RSP_500_INTERNAL_ERROR;
    6006:	23a0      	movs	r3, #160	; 0xa0
    6008:	9a03      	ldr	r2, [sp, #12]
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    600a:	9701      	str	r7, [sp, #4]
            *code = COAP_RSP_500_INTERNAL_ERROR;
    600c:	7013      	strb	r3, [r2, #0]
    m->m_pktlen = len;

    coap_msg_log(ctx);
err:
    return rc;
}
    600e:	9801      	ldr	r0, [sp, #4]
    6010:	b00b      	add	sp, #44	; 0x2c
    6012:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*code = COAP_RSP_413_REQ_TOO_LARGE;
    6014:	238d      	movs	r3, #141	; 0x8d
    6016:	9a03      	ldr	r2, [sp, #12]
    6018:	7013      	strb	r3, [r2, #0]
		return ERR_MSGSIZE;
    601a:	3b83      	subs	r3, #131	; 0x83
                rc = ERR_OP_NOT_SUPP;
    601c:	9301      	str	r3, [sp, #4]
                goto err;
    601e:	e7f6      	b.n	600e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        i += osize;
    6020:	9b06      	ldr	r3, [sp, #24]
    6022:	18ed      	adds	r5, r5, r3
        switch (ot) {
    6024:	2c0f      	cmp	r4, #15
    6026:	d820      	bhi.n	606a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x10a>
    6028:	2c0e      	cmp	r4, #14
    602a:	d2c2      	bcs.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    602c:	2c07      	cmp	r4, #7
    602e:	d0c0      	beq.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    6030:	d810      	bhi.n	6054 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xf4>
    6032:	2c03      	cmp	r4, #3
    6034:	d0bd      	beq.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    6036:	2c06      	cmp	r4, #6
    6038:	d022      	beq.n	6080 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x120>
            if (COAP_OPTION_CRITICAL(ot)) {
    603a:	9b07      	ldr	r3, [sp, #28]
    603c:	421c      	tst	r4, r3
    603e:	d0b8      	beq.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
                dlog(LOG_ERR, "unhandled critical option %d\n", ot);
    6040:	0022      	movs	r2, r4
    6042:	4926      	ldr	r1, [pc, #152]	; (60dc <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x17c>)
    6044:	2003      	movs	r0, #3
    6046:	f7fe f8e7 	bl	4218 <_Z4dlogiPKcz>
                *code = COAP_RSP_402_BAD_OPTION;
    604a:	2382      	movs	r3, #130	; 0x82
    604c:	9a03      	ldr	r2, [sp, #12]
    604e:	7013      	strb	r3, [r2, #0]
                rc = ERR_OP_NOT_SUPP;
    6050:	3b81      	subs	r3, #129	; 0x81
    6052:	e7e3      	b.n	601c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xbc>
        switch (ot) {
    6054:	2c0b      	cmp	r4, #11
    6056:	d0ac      	beq.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    6058:	2c0c      	cmp	r4, #12
    605a:	d1ee      	bne.n	603a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
            ctx->cf = co_uint8(&opt)    ;/*FIXME*/
    605c:	a808      	add	r0, sp, #32
    605e:	f7ff fd59 	bl	5b14 <_ZL8co_uint8PK5optlv>
    6062:	0033      	movs	r3, r6
    6064:	333c      	adds	r3, #60	; 0x3c
    6066:	7018      	strb	r0, [r3, #0]
            break;
    6068:	e7a3      	b.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
        switch (ot) {
    606a:	2c17      	cmp	r4, #23
    606c:	d0a1      	beq.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    606e:	d802      	bhi.n	6076 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x116>
    6070:	2c11      	cmp	r4, #17
    6072:	d0f3      	beq.n	605c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xfc>
    6074:	e7e1      	b.n	603a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
    6076:	2c23      	cmp	r4, #35	; 0x23
    6078:	d09b      	beq.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    607a:	2c27      	cmp	r4, #39	; 0x27
    607c:	d1dd      	bne.n	603a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
    607e:	e798      	b.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
            obsval = co_uint32_n2h(&opt);
    6080:	a808      	add	r0, sp, #32
    6082:	f7ff feef 	bl	5e64 <_Z13co_uint32_n2hPK5optlv>
            if (obsval == COAP_OBS_REG) {
    6086:	2800      	cmp	r0, #0
    6088:	d000      	beq.n	608c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x12c>
    608a:	e792      	b.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
                ctx->final = 0;
    608c:	64b0      	str	r0, [r6, #72]	; 0x48
    608e:	e790      	b.n	5fb2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    if (ot && i != len) {
    6090:	2c00      	cmp	r4, #0
    6092:	d00f      	beq.n	60b4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x154>
    6094:	9b02      	ldr	r3, [sp, #8]
    6096:	429d      	cmp	r5, r3
    6098:	d00c      	beq.n	60b4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x154>
        if (b[i] != 0xFF) {
    609a:	783b      	ldrb	r3, [r7, #0]
    609c:	2bff      	cmp	r3, #255	; 0xff
    609e:	d008      	beq.n	60b2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x152>
            dlog(LOG_ERR, "missing option separator FF");
    60a0:	490f      	ldr	r1, [pc, #60]	; (60e0 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x180>)
    60a2:	2003      	movs	r0, #3
    60a4:	f7fe f8b8 	bl	4218 <_Z4dlogiPKcz>
            *code = COAP_RSP_415_UNSUPPORTED_CFORMAT;
    60a8:	238f      	movs	r3, #143	; 0x8f
    60aa:	9a03      	ldr	r2, [sp, #12]
    60ac:	7013      	strb	r3, [r2, #0]
            rc = ERR_BAD_DATA;
    60ae:	3b7b      	subs	r3, #123	; 0x7b
    60b0:	e7b4      	b.n	601c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xbc>
        i++;
    60b2:	3501      	adds	r5, #1
    m->m_pktlen = len;
    60b4:	466a      	mov	r2, sp
    ctx->plen = len - i;
    60b6:	9b02      	ldr	r3, [sp, #8]
    ctx->hdrlen = i;
    60b8:	6175      	str	r5, [r6, #20]
    m->m_pktlen = len;
    60ba:	8912      	ldrh	r2, [r2, #8]
    ctx->plen = len - i;
    60bc:	1b5d      	subs	r5, r3, r5
    m->m_pktlen = len;
    60be:	9b04      	ldr	r3, [sp, #16]
    ctx->plen = len - i;
    60c0:	6435      	str	r5, [r6, #64]	; 0x40
    coap_msg_log(ctx);
    60c2:	0030      	movs	r0, r6
    m->m_pktlen = len;
    60c4:	801a      	strh	r2, [r3, #0]
    coap_msg_log(ctx);
    60c6:	f7ff fdd3 	bl	5c70 <_ZL12coap_msg_logPK12coap_msg_ctx>
    60ca:	e7a0      	b.n	600e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
    60cc:	0000febb 	.word	0x0000febb
    60d0:	0000fecb 	.word	0x0000fecb
    60d4:	0001032e 	.word	0x0001032e
    60d8:	0000fee3 	.word	0x0000fee3
    60dc:	0000fefd 	.word	0x0000fefd
    60e0:	0000ff1b 	.word	0x0000ff1b

000060e4 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>:

/* initialize response message context based on request + mbuf */
void       
coap_init_rsp(const struct coap_msg_ctx *req, struct coap_msg_ctx *rsp, 
              struct mbuf *m)
{
    60e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    60e6:	000c      	movs	r4, r1
    struct optlv *op;
    memset(rsp, 0, sizeof(*rsp));
    copt_init((sl_co*)&(rsp->oh));
    60e8:	0026      	movs	r6, r4
{
    60ea:	0005      	movs	r5, r0
    memset(rsp, 0, sizeof(*rsp));
    60ec:	2100      	movs	r1, #0
{
    60ee:	0017      	movs	r7, r2
    memset(rsp, 0, sizeof(*rsp));
    60f0:	0020      	movs	r0, r4
    60f2:	2254      	movs	r2, #84	; 0x54
    copt_init((sl_co*)&(rsp->oh));
    60f4:	364c      	adds	r6, #76	; 0x4c
    memset(rsp, 0, sizeof(*rsp));
    60f6:	f005 fb67 	bl	b7c8 <memset>
    copt_init((sl_co*)&(rsp->oh));
    60fa:	0030      	movs	r0, r6
    60fc:	f000 fa30 	bl	6560 <_Z9copt_initP5sl_co>
    /*
     * type will be a bit tricker than this. CON->ACK, except if it's empty,
     * then RST. NON->NON. We need to know more about the message before
     * setting the RSP type.
     */
    rsp->type = req->type;
    6100:	782b      	ldrb	r3, [r5, #0]
    rsp->tkl = req->tkl;
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    6102:	1da9      	adds	r1, r5, #6
    rsp->type = req->type;
    6104:	7023      	strb	r3, [r4, #0]
    rsp->tkl = req->tkl;
    6106:	786b      	ldrb	r3, [r5, #1]
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    6108:	2208      	movs	r2, #8
    rsp->tkl = req->tkl;
    610a:	7063      	strb	r3, [r4, #1]
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    610c:	1da0      	adds	r0, r4, #6
    610e:	f005 fb40 	bl	b792 <memcpy>

    /*
     * TODO OBS: Could replicate behaviour by adding the option. Need to know
     * when to add a value. Maybe this isn't required. Check context of calls.
     */
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    6112:	0028      	movs	r0, r5
    rsp->mid = req->mid;
    6114:	88ab      	ldrh	r3, [r5, #4]
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    6116:	304c      	adds	r0, #76	; 0x4c
    rsp->mid = req->mid;
    6118:	80a3      	strh	r3, [r4, #4]
    rsp->client = req->client;
    611a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    611c:	2200      	movs	r2, #0
    rsp->client = req->client;
    611e:	6463      	str	r3, [r4, #68]	; 0x44
    rsp->final = req->final;
    6120:	6cab      	ldr	r3, [r5, #72]	; 0x48
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    6122:	2106      	movs	r1, #6
    rsp->final = req->final;
    6124:	64a3      	str	r3, [r4, #72]	; 0x48
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    6126:	f000 fa91 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    612a:	2800      	cmp	r0, #0
    612c:	d015      	beq.n	615a <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
               != NULL) {
        uint32_t obsval = co_uint32_n2h(op);
    612e:	f7ff fe99 	bl	5e64 <_Z13co_uint32_n2hPK5optlv>
        if (!rsp->final && obsval == COAP_OBS_REG) {
    6132:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6134:	2b00      	cmp	r3, #0
    6136:	d110      	bne.n	615a <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
    6138:	2800      	cmp	r0, #0
    613a:	d10e      	bne.n	615a <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
            /*
             * If this is proxied, then this info isn't used to build the
             * response anyway. The sensor sends the packet. The same applies
             * for local async observe.
             */
            nop.ot = COAP_OPTION_OBSERVE;
    613c:	466a      	mov	r2, sp
            nop.ol = 3;
    613e:	2503      	movs	r5, #3
            nop.ot = COAP_OPTION_OBSERVE;
    6140:	3306      	adds	r3, #6
            if (copt_add_opt((sl_co*)&(rsp->oh), &nop) != ERR_OK) {
    6142:	4669      	mov	r1, sp
    6144:	0030      	movs	r0, r6
            nop.ot = COAP_OPTION_OBSERVE;
    6146:	8013      	strh	r3, [r2, #0]
            nop.ol = 3;
    6148:	8055      	strh	r5, [r2, #2]
            if (copt_add_opt((sl_co*)&(rsp->oh), &nop) != ERR_OK) {
    614a:	f000 fa3d 	bl	65c8 <_Z12copt_add_optP5sl_coP5optlv>
    614e:	2800      	cmp	r0, #0
    6150:	d003      	beq.n	615a <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
                dlog(LOG_ERR, "Couldn't add observe option");
    6152:	4903      	ldr	r1, [pc, #12]	; (6160 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x7c>)
    6154:	0028      	movs	r0, r5
    6156:	f7fe f85f 	bl	4218 <_Z4dlogiPKcz>
            }
        }
    }

    rsp->msg = m;
    615a:	6527      	str	r7, [r4, #80]	; 0x50
}
    615c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    615e:	46c0      	nop			; (mov r8, r8)
    6160:	0000fe9f 	.word	0x0000fe9f

00006164 <_Z17coap_msg_responseP12coap_msg_ctx>:
 *
 * @return: Status; 0 - OK.
 */
error_t
coap_msg_response(struct coap_msg_ctx *ctx)
{
    6164:	b5f0      	push	{r4, r5, r6, r7, lr}
    6166:	0006      	movs	r6, r0
    6168:	b08d      	sub	sp, #52	; 0x34

    int idx = 4;
    struct mbuf *n;


    coap_msg_log(ctx);
    616a:	f7ff fd81 	bl	5c70 <_ZL12coap_msg_logPK12coap_msg_ctx>

    b[0] = COAP_VER | COAP_T_VAL2PDU(ctx->type);
    616e:	2340      	movs	r3, #64	; 0x40
    6170:	7832      	ldrb	r2, [r6, #0]
    6172:	ad05      	add	r5, sp, #20
    6174:	0112      	lsls	r2, r2, #4
    6176:	4313      	orrs	r3, r2
    6178:	702b      	strb	r3, [r5, #0]
    if (ctx->code == COAP_EMPTY_MESSAGE) {
    617a:	78b3      	ldrb	r3, [r6, #2]
    617c:	2b00      	cmp	r3, #0
    617e:	d11c      	bne.n	61ba <_Z17coap_msg_responseP12coap_msg_ctx+0x56>
    int idx = 4;
    6180:	2404      	movs	r4, #4
        b[1] = COAP_EMPTY_MESSAGE;
    6182:	706b      	strb	r3, [r5, #1]
        b[2] = ctx->mid >> 8;
    6184:	88b3      	ldrh	r3, [r6, #4]
    6186:	121a      	asrs	r2, r3, #8
    6188:	70aa      	strb	r2, [r5, #2]
        b[3] = ctx->mid & 0xFF;
    618a:	70eb      	strb	r3, [r5, #3]
        }
    }
    assert(idx <= COAP_OBS_HDR_SZ);

    /* prepend header to response */
    n = m_prepend(ctx->msg, idx);
    618c:	0021      	movs	r1, r4
    618e:	6d30      	ldr	r0, [r6, #80]	; 0x50
    6190:	f001 f8a0 	bl	72d4 <_Z9m_prependP4mbufi>
    6194:	0007      	movs	r7, r0
    if (!n) {
        rc = ERR_NO_MEM;
    6196:	2003      	movs	r0, #3
    if (!n) {
    6198:	2f00      	cmp	r7, #0
    619a:	d04b      	beq.n	6234 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
        goto done;
    }
    ctx->msg = n;   /* A new mbuf may be required */
    619c:	6537      	str	r7, [r6, #80]	; 0x50
    memcpy(n->m_data, b, idx);
    619e:	1d3e      	adds	r6, r7, #4
    61a0:	0022      	movs	r2, r4
    61a2:	0029      	movs	r1, r5
    61a4:	0030      	movs	r0, r6
    61a6:	f005 faf4 	bl	b792 <memcpy>

    ddump(LOG_DEBUG, "Response", n->m_data, n->m_pktlen);
    61aa:	2007      	movs	r0, #7
    61ac:	883b      	ldrh	r3, [r7, #0]
    61ae:	0032      	movs	r2, r6
    61b0:	4951      	ldr	r1, [pc, #324]	; (62f8 <_Z17coap_msg_responseP12coap_msg_ctx+0x194>)
    61b2:	f7fe f853 	bl	425c <_Z5ddumpiPKcPKvi>
    error_t rc = ERR_OK;
    61b6:	2000      	movs	r0, #0
    61b8:	e03c      	b.n	6234 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
    } else if (COAP_CLASS(ctx->code) >= 2) {
    61ba:	2b3f      	cmp	r3, #63	; 0x3f
    61bc:	d800      	bhi.n	61c0 <_Z17coap_msg_responseP12coap_msg_ctx+0x5c>
    61be:	e099      	b.n	62f4 <_Z17coap_msg_responseP12coap_msg_ctx+0x190>
        b[1] = ctx->code;
    61c0:	706b      	strb	r3, [r5, #1]
        b[2] = ctx->mid >> 8;
    61c2:	88b3      	ldrh	r3, [r6, #4]
    61c4:	121a      	asrs	r2, r3, #8
    61c6:	70aa      	strb	r2, [r5, #2]
        b[3] = ctx->mid & 0xFF;
    61c8:	70eb      	strb	r3, [r5, #3]
        if (ctx->tkl) {
    61ca:	7874      	ldrb	r4, [r6, #1]
    61cc:	2c00      	cmp	r4, #0
    61ce:	d033      	beq.n	6238 <_Z17coap_msg_responseP12coap_msg_ctx+0xd4>
                rc = ERR_INVAL;
    61d0:	2004      	movs	r0, #4
            if (ctx->tkl > 8) {
    61d2:	2c08      	cmp	r4, #8
    61d4:	dc2e      	bgt.n	6234 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
            memcpy(b + idx, ctx->token, ctx->tkl);
    61d6:	0022      	movs	r2, r4
    61d8:	1db1      	adds	r1, r6, #6
    61da:	a806      	add	r0, sp, #24
    61dc:	f005 fad9 	bl	b792 <memcpy>
            b[0] |= ctx->tkl;
    61e0:	782b      	ldrb	r3, [r5, #0]
    61e2:	4323      	orrs	r3, r4
    61e4:	702b      	strb	r3, [r5, #0]
            idx += ctx->tkl;
    61e6:	3404      	adds	r4, #4
        if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_OBSERVE, NULL))
    61e8:	0033      	movs	r3, r6
    61ea:	334c      	adds	r3, #76	; 0x4c
    61ec:	2200      	movs	r2, #0
    61ee:	2106      	movs	r1, #6
    61f0:	0018      	movs	r0, r3
    61f2:	9301      	str	r3, [sp, #4]
    61f4:	f000 fa2a 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    61f8:	2800      	cmp	r0, #0
    61fa:	d021      	beq.n	6240 <_Z17coap_msg_responseP12coap_msg_ctx+0xdc>
            dopt = *op;  /* copy original but make type the delta */
    61fc:	af03      	add	r7, sp, #12
            op->ov = &opt_val;
    61fe:	ab02      	add	r3, sp, #8
    6200:	6043      	str	r3, [r0, #4]
            dopt = *op;  /* copy original but make type the delta */
    6202:	003b      	movs	r3, r7
    6204:	c806      	ldmia	r0!, {r1, r2}
    6206:	c306      	stmia	r3!, {r1, r2}
            opt_val = get_obs_val();
    6208:	f000 f8c6 	bl	6398 <_Z11get_obs_valv>
    620c:	9002      	str	r0, [sp, #8]
            opt_val = co_uint32_h2n(&dopt);
    620e:	0038      	movs	r0, r7
    6210:	f7ff fe60 	bl	5ed4 <_Z13co_uint32_h2nPK5optlv>
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    6214:	221c      	movs	r2, #28
            dopt.ot = COAP_OPTION_OBSERVE - onum;
    6216:	2306      	movs	r3, #6
            opt_val = co_uint32_h2n(&dopt);
    6218:	9002      	str	r0, [sp, #8]
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    621a:	1b12      	subs	r2, r2, r4
    621c:	1929      	adds	r1, r5, r4
    621e:	0038      	movs	r0, r7
            dopt.ot = COAP_OPTION_OBSERVE - onum;
    6220:	803b      	strh	r3, [r7, #0]
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    6222:	f7ff fddd 	bl	5de0 <_Z12coap_opt_addPK5optlvPhi>
    6226:	2800      	cmp	r0, #0
    6228:	d108      	bne.n	623c <_Z17coap_msg_responseP12coap_msg_ctx+0xd8>
                dlog(LOG_ERR, "Couldn't add Observe option to msg");
    622a:	4934      	ldr	r1, [pc, #208]	; (62fc <_Z17coap_msg_responseP12coap_msg_ctx+0x198>)
    622c:	3003      	adds	r0, #3
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    622e:	f7fd fff3 	bl	4218 <_Z4dlogiPKcz>
                    rc = ERR_NO_MEM;
    6232:	2003      	movs	r0, #3

done:
    return rc;
}
    6234:	b00d      	add	sp, #52	; 0x34
    6236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int idx = 4;
    6238:	2404      	movs	r4, #4
    623a:	e7d5      	b.n	61e8 <_Z17coap_msg_responseP12coap_msg_ctx+0x84>
            idx += sz;
    623c:	1824      	adds	r4, r4, r0
            onum = COAP_OPTION_OBSERVE;
    623e:	2006      	movs	r0, #6
        if (ctx->plen) 
    6240:	6c33      	ldr	r3, [r6, #64]	; 0x40
    6242:	2b00      	cmp	r3, #0
    6244:	d044      	beq.n	62d0 <_Z17coap_msg_responseP12coap_msg_ctx+0x16c>
            dopt.ot = COAP_OPTION_CONTENT_FORMAT - onum;
    6246:	230c      	movs	r3, #12
            if (ctx->cf == 0) {     /* text/plain; */
    6248:	0032      	movs	r2, r6
            dopt.ot = COAP_OPTION_CONTENT_FORMAT - onum;
    624a:	1a18      	subs	r0, r3, r0
    624c:	af03      	add	r7, sp, #12
    624e:	8038      	strh	r0, [r7, #0]
            if (ctx->cf == 0) {     /* text/plain; */
    6250:	323c      	adds	r2, #60	; 0x3c
    6252:	7813      	ldrb	r3, [r2, #0]
    6254:	2b00      	cmp	r3, #0
    6256:	d10f      	bne.n	6278 <_Z17coap_msg_responseP12coap_msg_ctx+0x114>
                dopt.ov = &opt_val;
    6258:	aa02      	add	r2, sp, #8
    625a:	607a      	str	r2, [r7, #4]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    625c:	221c      	movs	r2, #28
    625e:	1929      	adds	r1, r5, r4
    6260:	1b12      	subs	r2, r2, r4
    6262:	0038      	movs	r0, r7
                dopt.ol = 0;
    6264:	807b      	strh	r3, [r7, #2]
                opt_val = 0;  /* 0 length anyway */
    6266:	9302      	str	r3, [sp, #8]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    6268:	f7ff fdba 	bl	5de0 <_Z12coap_opt_addPK5optlvPhi>
                idx += sz;
    626c:	1824      	adds	r4, r4, r0
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    626e:	2800      	cmp	r0, #0
    6270:	d10e      	bne.n	6290 <_Z17coap_msg_responseP12coap_msg_ctx+0x12c>
                    dlog(LOG_ERR, "Couldn't add content format option to msg");
    6272:	4923      	ldr	r1, [pc, #140]	; (6300 <_Z17coap_msg_responseP12coap_msg_ctx+0x19c>)
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    6274:	2003      	movs	r0, #3
    6276:	e7da      	b.n	622e <_Z17coap_msg_responseP12coap_msg_ctx+0xca>
                dopt.ov = &(ctx->cf);
    6278:	607a      	str	r2, [r7, #4]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    627a:	221c      	movs	r2, #28
                dopt.ol = 1;
    627c:	2301      	movs	r3, #1
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    627e:	1b12      	subs	r2, r2, r4
    6280:	1929      	adds	r1, r5, r4
    6282:	0038      	movs	r0, r7
                dopt.ol = 1;
    6284:	807b      	strh	r3, [r7, #2]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    6286:	f7ff fdab 	bl	5de0 <_Z12coap_opt_addPK5optlvPhi>
    628a:	2800      	cmp	r0, #0
    628c:	d0f1      	beq.n	6272 <_Z17coap_msg_responseP12coap_msg_ctx+0x10e>
                idx += sz;
    628e:	1824      	adds	r4, r4, r0
            if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_MAXAGE, 
    6290:	2200      	movs	r2, #0
    6292:	210e      	movs	r1, #14
    6294:	9801      	ldr	r0, [sp, #4]
    6296:	f000 f9d9 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    629a:	2800      	cmp	r0, #0
    629c:	d01a      	beq.n	62d4 <_Z17coap_msg_responseP12coap_msg_ctx+0x170>
				op->ov = &opt_val;
    629e:	ab02      	add	r3, sp, #8
    62a0:	6043      	str	r3, [r0, #4]
                dopt = *op;  /* copy original but make type the delta */
    62a2:	003b      	movs	r3, r7
    62a4:	c806      	ldmia	r0!, {r1, r2}
    62a6:	c306      	stmia	r3!, {r1, r2}
				opt_val = coap_max_age_in_seconds;
    62a8:	4b16      	ldr	r3, [pc, #88]	; (6304 <_Z17coap_msg_responseP12coap_msg_ctx+0x1a0>)
				opt_val = co_uint32_h2n(&dopt);
    62aa:	0038      	movs	r0, r7
				opt_val = coap_max_age_in_seconds;
    62ac:	681b      	ldr	r3, [r3, #0]
    62ae:	9302      	str	r3, [sp, #8]
				opt_val = co_uint32_h2n(&dopt);
    62b0:	f7ff fe10 	bl	5ed4 <_Z13co_uint32_h2nPK5optlv>
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    62b4:	221c      	movs	r2, #28
                dopt.ot = COAP_OPTION_MAXAGE - onum;
    62b6:	2302      	movs	r3, #2
				opt_val = co_uint32_h2n(&dopt);
    62b8:	9002      	str	r0, [sp, #8]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    62ba:	1b12      	subs	r2, r2, r4
    62bc:	1929      	adds	r1, r5, r4
    62be:	0038      	movs	r0, r7
                dopt.ot = COAP_OPTION_MAXAGE - onum;
    62c0:	803b      	strh	r3, [r7, #0]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    62c2:	f7ff fd8d 	bl	5de0 <_Z12coap_opt_addPK5optlvPhi>
                idx += sz;
    62c6:	1824      	adds	r4, r4, r0
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    62c8:	2800      	cmp	r0, #0
    62ca:	dc03      	bgt.n	62d4 <_Z17coap_msg_responseP12coap_msg_ctx+0x170>
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    62cc:	490e      	ldr	r1, [pc, #56]	; (6308 <_Z17coap_msg_responseP12coap_msg_ctx+0x1a4>)
    62ce:	e7d1      	b.n	6274 <_Z17coap_msg_responseP12coap_msg_ctx+0x110>
        if (onum && ctx->plen) {
    62d0:	2800      	cmp	r0, #0
    62d2:	d005      	beq.n	62e0 <_Z17coap_msg_responseP12coap_msg_ctx+0x17c>
    62d4:	6c33      	ldr	r3, [r6, #64]	; 0x40
    62d6:	2b00      	cmp	r3, #0
    62d8:	d002      	beq.n	62e0 <_Z17coap_msg_responseP12coap_msg_ctx+0x17c>
            b[idx++] = 0xFF;    /* end of options */
    62da:	23ff      	movs	r3, #255	; 0xff
    62dc:	552b      	strb	r3, [r5, r4]
    62de:	3401      	adds	r4, #1
    assert(idx <= COAP_OBS_HDR_SZ);
    62e0:	2c1c      	cmp	r4, #28
    62e2:	dc00      	bgt.n	62e6 <_Z17coap_msg_responseP12coap_msg_ctx+0x182>
    62e4:	e752      	b.n	618c <_Z17coap_msg_responseP12coap_msg_ctx+0x28>
    62e6:	21f0      	movs	r1, #240	; 0xf0
    62e8:	4b08      	ldr	r3, [pc, #32]	; (630c <_Z17coap_msg_responseP12coap_msg_ctx+0x1a8>)
    62ea:	4a09      	ldr	r2, [pc, #36]	; (6310 <_Z17coap_msg_responseP12coap_msg_ctx+0x1ac>)
    62ec:	0089      	lsls	r1, r1, #2
    62ee:	4809      	ldr	r0, [pc, #36]	; (6314 <_Z17coap_msg_responseP12coap_msg_ctx+0x1b0>)
    62f0:	f005 f8d2 	bl	b498 <__assert_func>
        rc = ERR_INVAL;
    62f4:	2004      	movs	r0, #4
    62f6:	e79d      	b.n	6234 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
    62f8:	0000ffbe 	.word	0x0000ffbe
    62fc:	0000ff37 	.word	0x0000ff37
    6300:	0000ff5a 	.word	0x0000ff5a
    6304:	20001274 	.word	0x20001274
    6308:	0000ff84 	.word	0x0000ff84
    630c:	0000ffa7 	.word	0x0000ffa7
    6310:	0001009f 	.word	0x0001009f
    6314:	0000fe71 	.word	0x0000fe71

00006318 <_Z16coap_set_max_agem>:
 * 
 *
 */ 
void coap_set_max_age( uint32_t max_age )
{
	coap_max_age_in_seconds = max_age;
    6318:	4b01      	ldr	r3, [pc, #4]	; (6320 <_Z16coap_set_max_agem+0x8>)
    631a:	6018      	str	r0, [r3, #0]
	
} // coap_set_max_age
    631c:	4770      	bx	lr
    631e:	46c0      	nop			; (mov r8, r8)
    6320:	20001274 	.word	0x20001274

00006324 <_Z14get_obs_by_uriPKcPhS1_PPvS1_>:
 *
 * Returns 0 on success, -1 if not found.
 */
error_t
get_obs_by_uri(const char *uri, uint8_t *tkl, uint8_t *token, void **client, uint8_t *nxt)
{
    6324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6326:	0005      	movs	r5, r0
    6328:	000f      	movs	r7, r1
    632a:	9201      	str	r2, [sp, #4]
    632c:	001e      	movs	r6, r3
    uint8_t i;

    if ((uri == NULL) || (uri[0] == '\0') || (*nxt >= MAX_OBSERVERS)) {
        return ERR_INVAL;
    632e:	2004      	movs	r0, #4
    if ((uri == NULL) || (uri[0] == '\0') || (*nxt >= MAX_OBSERVERS)) {
    6330:	2d00      	cmp	r5, #0
    6332:	d02e      	beq.n	6392 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    6334:	782b      	ldrb	r3, [r5, #0]
    6336:	2b00      	cmp	r3, #0
    6338:	d02b      	beq.n	6392 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    633a:	9b08      	ldr	r3, [sp, #32]
    633c:	781c      	ldrb	r4, [r3, #0]
    633e:	2c03      	cmp	r4, #3
    6340:	dc27      	bgt.n	6392 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    }

    for (i = *nxt; i < MAX_OBSERVERS; i++) {
    6342:	2c03      	cmp	r4, #3
    6344:	dc0c      	bgt.n	6360 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x3c>
        if (!strcmp(uri, obs[i].uri)) {
    6346:	2198      	movs	r1, #152	; 0x98
    6348:	0049      	lsls	r1, r1, #1
    634a:	4361      	muls	r1, r4
    634c:	4b11      	ldr	r3, [pc, #68]	; (6394 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x70>)
    634e:	0028      	movs	r0, r5
    6350:	1859      	adds	r1, r3, r1
    6352:	f006 fb34 	bl	c9be <strcmp>
    6356:	2800      	cmp	r0, #0
    6358:	d002      	beq.n	6360 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x3c>
    for (i = *nxt; i < MAX_OBSERVERS; i++) {
    635a:	3401      	adds	r4, #1
    635c:	b2e4      	uxtb	r4, r4
    635e:	e7f0      	b.n	6342 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x1e>
            break;
        }
    }
    if (i == MAX_OBSERVERS) {
        return ERR_NO_ENTRY;
    6360:	200c      	movs	r0, #12
    if (i == MAX_OBSERVERS) {
    6362:	2c04      	cmp	r4, #4
    6364:	d015      	beq.n	6392 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    }

    *tkl = obs[i].tkl;
    6366:	2398      	movs	r3, #152	; 0x98
    6368:	005b      	lsls	r3, r3, #1
    636a:	4363      	muls	r3, r4
    636c:	4909      	ldr	r1, [pc, #36]	; (6394 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x70>)
    memcpy(token, obs[i].token, *tkl);
    636e:	9801      	ldr	r0, [sp, #4]
    *tkl = obs[i].tkl;
    6370:	18cd      	adds	r5, r1, r3
    6372:	002a      	movs	r2, r5
    6374:	32ff      	adds	r2, #255	; 0xff
    6376:	7852      	ldrb	r2, [r2, #1]
    memcpy(token, obs[i].token, *tkl);
    6378:	3302      	adds	r3, #2
    637a:	33ff      	adds	r3, #255	; 0xff
    637c:	18c9      	adds	r1, r1, r3
    *tkl = obs[i].tkl;
    637e:	703a      	strb	r2, [r7, #0]
    memcpy(token, obs[i].token, *tkl);
    6380:	f005 fa07 	bl	b792 <memcpy>
    *client = obs[i].client;
    *nxt = i + 1;

    return ERR_OK;
    6384:	2000      	movs	r0, #0
    *client = obs[i].client;
    6386:	35fc      	adds	r5, #252	; 0xfc
    6388:	692b      	ldr	r3, [r5, #16]
    *nxt = i + 1;
    638a:	3401      	adds	r4, #1
    *client = obs[i].client;
    638c:	6033      	str	r3, [r6, #0]
    *nxt = i + 1;
    638e:	9b08      	ldr	r3, [sp, #32]
    6390:	701c      	strb	r4, [r3, #0]
}
    6392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6394:	200012ac 	.word	0x200012ac

00006398 <_Z11get_obs_valv>:
    /*
     * Monotonically increasing observe value.
     */
    static uint32_t obs_val = 2;

    if (obs_val == (1 << 24) - 1) {
    6398:	4b05      	ldr	r3, [pc, #20]	; (63b0 <_Z11get_obs_valv+0x18>)
    639a:	4906      	ldr	r1, [pc, #24]	; (63b4 <_Z11get_obs_valv+0x1c>)
    639c:	681a      	ldr	r2, [r3, #0]
    639e:	428a      	cmp	r2, r1
    63a0:	d103      	bne.n	63aa <_Z11get_obs_valv+0x12>
        obs_val = 2;
    63a2:	2202      	movs	r2, #2
    } else {
        obs_val++;
    63a4:	601a      	str	r2, [r3, #0]
    }

    return obs_val;
    63a6:	6818      	ldr	r0, [r3, #0]
}
    63a8:	4770      	bx	lr
        obs_val++;
    63aa:	3201      	adds	r2, #1
    63ac:	e7fa      	b.n	63a4 <_Z11get_obs_valv+0xc>
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	2000009c 	.word	0x2000009c
    63b4:	00ffffff 	.word	0x00ffffff

000063b8 <_Z10enable_obsPKcP12coap_msg_ctxPv>:
 * Currently only called from main (net_mgr) task on NIC, so no need for
 * locking.
 */
error_t 
enable_obs(const char *urip, struct coap_msg_ctx *req, void *client)
{
    63b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63ba:	b085      	sub	sp, #20
    63bc:	9000      	str	r0, [sp, #0]
    63be:	000e      	movs	r6, r1
    63c0:	9202      	str	r2, [sp, #8]
        add_obs(empty_slot, urip, req, client);
        return ERR_OK;
    }

error:
    return ERR_BAD_DATA;
    63c2:	2314      	movs	r3, #20
    if (urip == NULL)
    63c4:	2800      	cmp	r0, #0
    63c6:	d02f      	beq.n	6428 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    if (strlen(urip) >= MAX_OBS_URI_LEN)
    63c8:	f006 fb0b 	bl	c9e2 <strlen>
    return ERR_BAD_DATA;
    63cc:	2314      	movs	r3, #20
    if (strlen(urip) >= MAX_OBS_URI_LEN)
    63ce:	28ff      	cmp	r0, #255	; 0xff
    63d0:	d82a      	bhi.n	6428 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    if (req->sid[0] != '\0')
    63d2:	7f37      	ldrb	r7, [r6, #28]
    63d4:	2f00      	cmp	r7, #0
    63d6:	d03f      	beq.n	6458 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xa0>
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    63d8:	0037      	movs	r7, r6
    63da:	371c      	adds	r7, #28
    63dc:	0038      	movs	r0, r7
    63de:	f006 fb00 	bl	c9e2 <strlen>
    63e2:	0005      	movs	r5, r0
    63e4:	4b33      	ldr	r3, [pc, #204]	; (64b4 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xfc>)
    63e6:	4a34      	ldr	r2, [pc, #208]	; (64b8 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x100>)
    63e8:	1c9c      	adds	r4, r3, #2
    63ea:	189b      	adds	r3, r3, r2
    63ec:	9301      	str	r3, [sp, #4]
                !memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)))
    63ee:	1db3      	adds	r3, r6, #6
    63f0:	34ff      	adds	r4, #255	; 0xff
    63f2:	9303      	str	r3, [sp, #12]
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    63f4:	1ea1      	subs	r1, r4, #2
    63f6:	39ff      	subs	r1, #255	; 0xff
    63f8:	002a      	movs	r2, r5
    63fa:	0038      	movs	r0, r7
    63fc:	f006 fb0d 	bl	ca1a <strncmp>
    6400:	2800      	cmp	r0, #0
    6402:	d114      	bne.n	642e <_Z10enable_obsPKcP12coap_msg_ctxPv+0x76>
                !memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)))
    6404:	1e63      	subs	r3, r4, #1
    6406:	7871      	ldrb	r1, [r6, #1]
    6408:	781a      	ldrb	r2, [r3, #0]
    640a:	428a      	cmp	r2, r1
    640c:	da00      	bge.n	6410 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x58>
    640e:	000a      	movs	r2, r1
    6410:	0021      	movs	r1, r4
    6412:	9803      	ldr	r0, [sp, #12]
    6414:	f005 f9ae 	bl	b774 <memcmp>
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    6418:	2800      	cmp	r0, #0
    641a:	d108      	bne.n	642e <_Z10enable_obsPKcP12coap_msg_ctxPv+0x76>
                dlog(LOG_INFO, "Not adding obs entry for %s, sid:token not unique", urip);
    641c:	9a00      	ldr	r2, [sp, #0]
    641e:	4927      	ldr	r1, [pc, #156]	; (64bc <_Z10enable_obsPKcP12coap_msg_ctxPv+0x104>)
            dlog(LOG_INFO, "Not adding obs entry for %s, duplicate.", urip);
    6420:	3006      	adds	r0, #6
    6422:	f7fd fef9 	bl	4218 <_Z4dlogiPKcz>
            return ERR_EXISTS;
    6426:	2309      	movs	r3, #9
}
    6428:	0018      	movs	r0, r3
    642a:	b005      	add	sp, #20
    642c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    642e:	3431      	adds	r4, #49	; 0x31
        for (i = 0; i < MAX_OBSERVERS; i++) {
    6430:	9b01      	ldr	r3, [sp, #4]
    6432:	34ff      	adds	r4, #255	; 0xff
    6434:	42a3      	cmp	r3, r4
    6436:	d1dd      	bne.n	63f4 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x3c>
    6438:	2404      	movs	r4, #4
    643a:	2700      	movs	r7, #0
        if (!strcmp(urip, obs[i].uri))
    643c:	4d1d      	ldr	r5, [pc, #116]	; (64b4 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xfc>)
    643e:	2398      	movs	r3, #152	; 0x98
    6440:	005b      	lsls	r3, r3, #1
    6442:	437b      	muls	r3, r7
    6444:	9800      	ldr	r0, [sp, #0]
    6446:	18e9      	adds	r1, r5, r3
    6448:	9301      	str	r3, [sp, #4]
    644a:	f006 fab8 	bl	c9be <strcmp>
    644e:	2800      	cmp	r0, #0
    6450:	d104      	bne.n	645c <_Z10enable_obsPKcP12coap_msg_ctxPv+0xa4>
            dlog(LOG_INFO, "Not adding obs entry for %s, duplicate.", urip);
    6452:	9a00      	ldr	r2, [sp, #0]
    6454:	491a      	ldr	r1, [pc, #104]	; (64c0 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x108>)
    6456:	e7e3      	b.n	6420 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x68>
    6458:	2404      	movs	r4, #4
    645a:	e7ef      	b.n	643c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x84>
		else if ((obs[i].uri[0] == '\0') && (empty_slot == MAX_OBSERVERS))
    645c:	9b01      	ldr	r3, [sp, #4]
    645e:	5d5b      	ldrb	r3, [r3, r5]
    6460:	2b00      	cmp	r3, #0
    6462:	d102      	bne.n	646a <_Z10enable_obsPKcP12coap_msg_ctxPv+0xb2>
    6464:	2c04      	cmp	r4, #4
    6466:	d100      	bne.n	646a <_Z10enable_obsPKcP12coap_msg_ctxPv+0xb2>
    6468:	003c      	movs	r4, r7
    for (i = 0; i < MAX_OBSERVERS; i++) {
    646a:	3701      	adds	r7, #1
    646c:	2f04      	cmp	r7, #4
    646e:	d1e6      	bne.n	643e <_Z10enable_obsPKcP12coap_msg_ctxPv+0x86>
    return ERR_BAD_DATA;
    6470:	2314      	movs	r3, #20
    if (empty_slot < MAX_OBSERVERS)
    6472:	2c04      	cmp	r4, #4
    6474:	d0d8      	beq.n	6428 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    obs[slot].tkl = req->tkl;
    6476:	331d      	adds	r3, #29
    6478:	33ff      	adds	r3, #255	; 0xff
    647a:	435c      	muls	r4, r3
    647c:	192f      	adds	r7, r5, r4
    647e:	003b      	movs	r3, r7
    6480:	7872      	ldrb	r2, [r6, #1]
    memcpy(obs[slot].token, req->token, req->tkl);
    6482:	1ca0      	adds	r0, r4, #2
    obs[slot].tkl = req->tkl;
    6484:	33ff      	adds	r3, #255	; 0xff
    memcpy(obs[slot].token, req->token, req->tkl);
    6486:	30ff      	adds	r0, #255	; 0xff
    obs[slot].tkl = req->tkl;
    6488:	705a      	strb	r2, [r3, #1]
    memcpy(obs[slot].token, req->token, req->tkl);
    648a:	1db1      	adds	r1, r6, #6
    648c:	1828      	adds	r0, r5, r0
    648e:	f005 f980 	bl	b792 <memcpy>
    strcpy(obs[slot].uri, urip);
    6492:	9900      	ldr	r1, [sp, #0]
    6494:	0038      	movs	r0, r7
    6496:	f006 fa9c 	bl	c9d2 <strcpy>
    strcpy(obs[slot].sid, req->sid);
    649a:	0020      	movs	r0, r4
    649c:	0031      	movs	r1, r6
    obs[slot].client = client;
    649e:	9b02      	ldr	r3, [sp, #8]
    strcpy(obs[slot].sid, req->sid);
    64a0:	3011      	adds	r0, #17
    obs[slot].client = client;
    64a2:	37fc      	adds	r7, #252	; 0xfc
    strcpy(obs[slot].sid, req->sid);
    64a4:	30ff      	adds	r0, #255	; 0xff
    obs[slot].client = client;
    64a6:	613b      	str	r3, [r7, #16]
    strcpy(obs[slot].sid, req->sid);
    64a8:	311c      	adds	r1, #28
    64aa:	1828      	adds	r0, r5, r0
    64ac:	f006 fa91 	bl	c9d2 <strcpy>
        return ERR_OK;
    64b0:	2300      	movs	r3, #0
    64b2:	e7b9      	b.n	6428 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    64b4:	200012ac 	.word	0x200012ac
    64b8:	000005c1 	.word	0x000005c1
    64bc:	000100c8 	.word	0x000100c8
    64c0:	000100fa 	.word	0x000100fa

000064c4 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>:
 * Currently only called from main (net_mgr) task on NIC, so no need for
 * locking. However, as per enable_obs and client pointer.
 */
error_t 
disable_obs(const char *urip, struct coap_msg_ctx *req, void **client, uint8_t force)
{
    64c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64c6:	b085      	sub	sp, #20
    64c8:	0007      	movs	r7, r0
    64ca:	9100      	str	r1, [sp, #0]
    64cc:	9201      	str	r2, [sp, #4]
    64ce:	9302      	str	r3, [sp, #8]
    int i;

    if (urip == NULL)
	{
        return ERR_INVAL;
    64d0:	2004      	movs	r0, #4
    if (urip == NULL)
    64d2:	2f00      	cmp	r7, #0
    64d4:	d036      	beq.n	6544 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x80>
    /*
     * Find the uri in the array, and if present, zero the entry.
     */
    for (i = 0; i < MAX_OBSERVERS; i++)
	{
        if (!strcmp(urip, obs[i].uri) && (!memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)) || force))
    64d6:	000b      	movs	r3, r1
    if (urip == NULL)
    64d8:	2400      	movs	r4, #0
    64da:	4d1f      	ldr	r5, [pc, #124]	; (6558 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x94>)
        if (!strcmp(urip, obs[i].uri) && (!memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)) || force))
    64dc:	3306      	adds	r3, #6
    64de:	1cae      	adds	r6, r5, #2
    64e0:	36ff      	adds	r6, #255	; 0xff
    64e2:	9303      	str	r3, [sp, #12]
    64e4:	1eb1      	subs	r1, r6, #2
    64e6:	39ff      	subs	r1, #255	; 0xff
    64e8:	0038      	movs	r0, r7
    64ea:	f006 fa68 	bl	c9be <strcmp>
    64ee:	2800      	cmp	r0, #0
    64f0:	d12a      	bne.n	6548 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x84>
    64f2:	9a00      	ldr	r2, [sp, #0]
    64f4:	1e73      	subs	r3, r6, #1
    64f6:	7851      	ldrb	r1, [r2, #1]
    64f8:	781a      	ldrb	r2, [r3, #0]
    64fa:	428a      	cmp	r2, r1
    64fc:	da00      	bge.n	6500 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x3c>
    64fe:	000a      	movs	r2, r1
    6500:	0031      	movs	r1, r6
    6502:	9803      	ldr	r0, [sp, #12]
    6504:	f005 f936 	bl	b774 <memcmp>
    6508:	2800      	cmp	r0, #0
    650a:	d002      	beq.n	6512 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x4e>
    650c:	9b02      	ldr	r3, [sp, #8]
    650e:	2b00      	cmp	r3, #0
    6510:	d01a      	beq.n	6548 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x84>
		{
            obs[i].uri[0] = '\0';
    6512:	2398      	movs	r3, #152	; 0x98
    6514:	005b      	lsls	r3, r3, #1
    6516:	4363      	muls	r3, r4
    6518:	2400      	movs	r4, #0
    651a:	54ec      	strb	r4, [r5, r3]
            *client = obs[i].client;
    651c:	18ed      	adds	r5, r5, r3
    651e:	002b      	movs	r3, r5
    6520:	33fc      	adds	r3, #252	; 0xfc
    6522:	6919      	ldr	r1, [r3, #16]
    6524:	9a01      	ldr	r2, [sp, #4]
            obs[i].client = NULL;
            memset(obs[i].token, 0, sizeof(obs[i].token));
    6526:	0030      	movs	r0, r6
            *client = obs[i].client;
    6528:	6011      	str	r1, [r2, #0]
            obs[i].sid[0] = '\0';
    652a:	35ff      	adds	r5, #255	; 0xff
            obs[i].client = NULL;
    652c:	611c      	str	r4, [r3, #16]
            memset(obs[i].token, 0, sizeof(obs[i].token));
    652e:	2208      	movs	r2, #8
    6530:	0021      	movs	r1, r4
    6532:	f005 f949 	bl	b7c8 <memset>
            dlog(LOG_INFO, "disable_obs: De-registered URI: %s", urip);
    6536:	2006      	movs	r0, #6
            obs[i].sid[0] = '\0';
    6538:	746c      	strb	r4, [r5, #17]
            dlog(LOG_INFO, "disable_obs: De-registered URI: %s", urip);
    653a:	003a      	movs	r2, r7
    653c:	4907      	ldr	r1, [pc, #28]	; (655c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x98>)
    653e:	f7fd fe6b 	bl	4218 <_Z4dlogiPKcz>
            return ERR_OK;
    6542:	0020      	movs	r0, r4
        }
    }
    return ERR_NO_ENTRY;
}
    6544:	b005      	add	sp, #20
    6546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6548:	3631      	adds	r6, #49	; 0x31
    for (i = 0; i < MAX_OBSERVERS; i++)
    654a:	3401      	adds	r4, #1
    654c:	36ff      	adds	r6, #255	; 0xff
    654e:	2c04      	cmp	r4, #4
    6550:	d1c8      	bne.n	64e4 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x20>
    return ERR_NO_ENTRY;
    6552:	200c      	movs	r0, #12
    6554:	e7f6      	b.n	6544 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x80>
    6556:	46c0      	nop			; (mov r8, r8)
    6558:	200012ac 	.word	0x200012ac
    655c:	00010122 	.word	0x00010122

00006560 <_Z9copt_initP5sl_co>:
/*
 * Initialse the head.
 */
void
copt_init(struct sl_co *hd)
{
    6560:	b510      	push	{r4, lr}
    assert(hd);
    6562:	2800      	cmp	r0, #0
    6564:	d105      	bne.n	6572 <_Z9copt_initP5sl_co+0x12>
    6566:	4b04      	ldr	r3, [pc, #16]	; (6578 <_Z9copt_initP5sl_co+0x18>)
    6568:	4a04      	ldr	r2, [pc, #16]	; (657c <_Z9copt_initP5sl_co+0x1c>)
    656a:	2180      	movs	r1, #128	; 0x80
    656c:	4804      	ldr	r0, [pc, #16]	; (6580 <_Z9copt_initP5sl_co+0x20>)
    656e:	f004 ff93 	bl	b498 <__assert_func>

    SLIST_INIT(hd);
    6572:	2300      	movs	r3, #0
    6574:	6003      	str	r3, [r0, #0]
}
    6576:	bd10      	pop	{r4, pc}
    6578:	00010172 	.word	0x00010172
    657c:	0001024c 	.word	0x0001024c
    6580:	00010175 	.word	0x00010175

00006584 <_Z12copt_del_allP5sl_co>:
 *
 * @return: None.
 */
void
copt_del_all(struct sl_co *hd)
{
    6584:	b570      	push	{r4, r5, r6, lr}
    6586:	1e04      	subs	r4, r0, #0
    coap_opt *curr, *tmp;

    assert(hd);
    6588:	d105      	bne.n	6596 <_Z12copt_del_allP5sl_co+0x12>
    658a:	4b0c      	ldr	r3, [pc, #48]	; (65bc <_Z12copt_del_allP5sl_co+0x38>)
    658c:	4a0c      	ldr	r2, [pc, #48]	; (65c0 <_Z12copt_del_allP5sl_co+0x3c>)
    658e:	2192      	movs	r1, #146	; 0x92
    6590:	480c      	ldr	r0, [pc, #48]	; (65c4 <_Z12copt_del_allP5sl_co+0x40>)
    6592:	f004 ff81 	bl	b498 <__assert_func>
    SLIST_FOREACH_SAFE(curr, hd, nxt, tmp) {
    6596:	6800      	ldr	r0, [r0, #0]
    6598:	2800      	cmp	r0, #0
    659a:	d00e      	beq.n	65ba <_Z12copt_del_allP5sl_co+0x36>
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    659c:	6823      	ldr	r3, [r4, #0]
    SLIST_FOREACH_SAFE(curr, hd, nxt, tmp) {
    659e:	6885      	ldr	r5, [r0, #8]
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    65a0:	4298      	cmp	r0, r3
    65a2:	d105      	bne.n	65b0 <_Z12copt_del_allP5sl_co+0x2c>
    65a4:	6025      	str	r5, [r4, #0]
        free(co);
    65a6:	f005 f8c9 	bl	b73c <free>
    65aa:	0028      	movs	r0, r5
    65ac:	e7f4      	b.n	6598 <_Z12copt_del_allP5sl_co+0x14>
    65ae:	0013      	movs	r3, r2
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    65b0:	689a      	ldr	r2, [r3, #8]
    65b2:	4290      	cmp	r0, r2
    65b4:	d1fb      	bne.n	65ae <_Z12copt_del_allP5sl_co+0x2a>
    65b6:	609d      	str	r5, [r3, #8]
    65b8:	e7f5      	b.n	65a6 <_Z12copt_del_allP5sl_co+0x22>
        copt_dealloc(curr);
    }

    return;
}
    65ba:	bd70      	pop	{r4, r5, r6, pc}
    65bc:	00010172 	.word	0x00010172
    65c0:	000101c8 	.word	0x000101c8
    65c4:	00010175 	.word	0x00010175

000065c8 <_Z12copt_add_optP5sl_coP5optlv>:
 *
 * @return: 0 on sucess.
 */
error_t
copt_add_opt(struct sl_co *hd, struct optlv *opt)
{
    65c8:	b570      	push	{r4, r5, r6, lr}
    65ca:	0006      	movs	r6, r0
    65cc:	000d      	movs	r5, r1
    assert(hd);
    65ce:	2800      	cmp	r0, #0
    65d0:	d105      	bne.n	65de <_Z12copt_add_optP5sl_coP5optlv+0x16>
    65d2:	21a9      	movs	r1, #169	; 0xa9
    65d4:	4b19      	ldr	r3, [pc, #100]	; (663c <_Z12copt_add_optP5sl_coP5optlv+0x74>)
    65d6:	4a1a      	ldr	r2, [pc, #104]	; (6640 <_Z12copt_add_optP5sl_coP5optlv+0x78>)
    coap_opt *nco;       /* New coap option */
    coap_opt *o, *po;    /* option iterator, previous option. */
    error_t rc = ERR_OK;

    assert(hd);
    assert(opt);
    65d8:	481a      	ldr	r0, [pc, #104]	; (6644 <_Z12copt_add_optP5sl_coP5optlv+0x7c>)
    65da:	f004 ff5d 	bl	b498 <__assert_func>
    65de:	2900      	cmp	r1, #0
    65e0:	d103      	bne.n	65ea <_Z12copt_add_optP5sl_coP5optlv+0x22>
    65e2:	4b19      	ldr	r3, [pc, #100]	; (6648 <_Z12copt_add_optP5sl_coP5optlv+0x80>)
    65e4:	4a16      	ldr	r2, [pc, #88]	; (6640 <_Z12copt_add_optP5sl_coP5optlv+0x78>)
    65e6:	21af      	movs	r1, #175	; 0xaf
    65e8:	e7f6      	b.n	65d8 <_Z12copt_add_optP5sl_coP5optlv+0x10>
    if ((co = (coap_opt *)malloc(sizeof(coap_opt))) != NULL) {
    65ea:	200c      	movs	r0, #12
    65ec:	f005 f89c 	bl	b728 <malloc>
    65f0:	0004      	movs	r4, r0
    /*
     * Find the node with the correct option value.
     * If present, allocate and append a new object, set object values.
     */
    if ((nco = copt_alloc()) == NULL) {
        rc = ERR_NO_MEM;
    65f2:	2003      	movs	r0, #3
    if ((co = (coap_opt *)malloc(sizeof(coap_opt))) != NULL) {
    65f4:	2c00      	cmp	r4, #0
    65f6:	d012      	beq.n	661e <_Z12copt_add_optP5sl_coP5optlv+0x56>
        memset(co, 0, sizeof(coap_opt));
    65f8:	220c      	movs	r2, #12
    65fa:	2100      	movs	r1, #0
    65fc:	0020      	movs	r0, r4
    65fe:	f005 f8e3 	bl	b7c8 <memset>
        goto done;
    }
    nco->o = *opt;
    6602:	0023      	movs	r3, r4
    6604:	002a      	movs	r2, r5
    6606:	ca03      	ldmia	r2!, {r0, r1}
    6608:	c303      	stmia	r3!, {r0, r1}

    if (SLIST_EMPTY(hd) || (SLIST_FIRST(hd)->o.ot > opt->ot)) {
    660a:	6833      	ldr	r3, [r6, #0]
    660c:	2b00      	cmp	r3, #0
    660e:	d003      	beq.n	6618 <_Z12copt_add_optP5sl_coP5optlv+0x50>
    6610:	882a      	ldrh	r2, [r5, #0]
    6612:	8819      	ldrh	r1, [r3, #0]
    6614:	4291      	cmp	r1, r2
    6616:	dd04      	ble.n	6622 <_Z12copt_add_optP5sl_coP5optlv+0x5a>
        SLIST_INSERT_HEAD(hd, nco, nxt);
    6618:	60a3      	str	r3, [r4, #8]
    661a:	6034      	str	r4, [r6, #0]
    error_t rc = ERR_OK;
    661c:	2000      	movs	r0, #0
     */
    SLIST_INSERT_AFTER(po, nco, nxt);
    
done:
    return rc;
}
    661e:	bd70      	pop	{r4, r5, r6, pc}
    6620:	0003      	movs	r3, r0
        if (SLIST_NEXT(o, nxt) && (SLIST_NEXT(o, nxt)->o.ot > opt->ot)) {
    6622:	6898      	ldr	r0, [r3, #8]
    6624:	2800      	cmp	r0, #0
    6626:	d005      	beq.n	6634 <_Z12copt_add_optP5sl_coP5optlv+0x6c>
    6628:	8801      	ldrh	r1, [r0, #0]
    662a:	428a      	cmp	r2, r1
    662c:	daf8      	bge.n	6620 <_Z12copt_add_optP5sl_coP5optlv+0x58>
            SLIST_INSERT_AFTER(o, nco, nxt);
    662e:	60a0      	str	r0, [r4, #8]
    6630:	609c      	str	r4, [r3, #8]
    6632:	e7f3      	b.n	661c <_Z12copt_add_optP5sl_coP5optlv+0x54>
    SLIST_INSERT_AFTER(po, nco, nxt);
    6634:	60a0      	str	r0, [r4, #8]
    6636:	609c      	str	r4, [r3, #8]
    return rc;
    6638:	e7f1      	b.n	661e <_Z12copt_add_optP5sl_coP5optlv+0x56>
    663a:	46c0      	nop			; (mov r8, r8)
    663c:	00010172 	.word	0x00010172
    6640:	000101a3 	.word	0x000101a3
    6644:	00010175 	.word	0x00010175
    6648:	00010145 	.word	0x00010145

0000664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>:
 *
 * @return: The next option (as optlv) in the list, or NULL if no more.
 */
struct optlv *
copt_get_next_opt_type(const struct sl_co *hd, uint16_t ot, void **it)
{
    664c:	b507      	push	{r0, r1, r2, lr}
    struct optlv *opt;
    coap_opt **ppco = (coap_opt **)it;
    coap_opt *pco;

    assert(hd);
    664e:	2800      	cmp	r0, #0
    6650:	d106      	bne.n	6660 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x14>
    6652:	2183      	movs	r1, #131	; 0x83
    6654:	4b0e      	ldr	r3, [pc, #56]	; (6690 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x44>)
    6656:	4a0f      	ldr	r2, [pc, #60]	; (6694 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x48>)
    6658:	0049      	lsls	r1, r1, #1
    665a:	480f      	ldr	r0, [pc, #60]	; (6698 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x4c>)
    665c:	f004 ff1c 	bl	b498 <__assert_func>
    pco = SLIST_FIRST(hd);
    6660:	6800      	ldr	r0, [r0, #0]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
        ppco = &pco;
    6662:	ab01      	add	r3, sp, #4
    pco = SLIST_FIRST(hd);
    6664:	9001      	str	r0, [sp, #4]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
    6666:	2a00      	cmp	r2, #0
    6668:	d004      	beq.n	6674 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
    } else if (!*ppco) {
    666a:	6813      	ldr	r3, [r2, #0]
    666c:	2b00      	cmp	r3, #0
    666e:	d10a      	bne.n	6686 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x3a>
        *ppco = SLIST_FIRST(hd);
    6670:	6010      	str	r0, [r2, #0]
    } else {
        *ppco = SLIST_NEXT(*ppco, nxt);
    6672:	0013      	movs	r3, r2
    }
    while (*ppco) {
    6674:	6818      	ldr	r0, [r3, #0]
    6676:	2800      	cmp	r0, #0
    6678:	d008      	beq.n	668c <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
        if ((*ppco)->o.ot == ot) {
    667a:	8802      	ldrh	r2, [r0, #0]
    667c:	428a      	cmp	r2, r1
    667e:	d005      	beq.n	668c <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
            break;
        }
        *ppco = SLIST_NEXT(*ppco, nxt);
    6680:	6882      	ldr	r2, [r0, #8]
    6682:	601a      	str	r2, [r3, #0]
    while (*ppco) {
    6684:	e7f6      	b.n	6674 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
        *ppco = SLIST_NEXT(*ppco, nxt);
    6686:	689b      	ldr	r3, [r3, #8]
    6688:	6013      	str	r3, [r2, #0]
    668a:	e7f2      	b.n	6672 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x26>
        opt = &((*ppco)->o);
    } else {
        opt = NULL;
    }
    return opt;
}
    668c:	bd0e      	pop	{r1, r2, r3, pc}
    668e:	46c0      	nop			; (mov r8, r8)
    6690:	00010172 	.word	0x00010172
    6694:	0001020e 	.word	0x0001020e
    6698:	00010175 	.word	0x00010175

0000669c <_Z17copt_del_opt_typeP5sl_cot>:
 *
 * @return: 0 if anything deleted.
 */
error_t
copt_del_opt_type(struct sl_co *hd, uint16_t ot)
{
    669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    669e:	0004      	movs	r4, r0
    66a0:	000f      	movs	r7, r1
    error_t rc = ERR_NO_ENTRY;
    assert(hd);
    66a2:	2800      	cmp	r0, #0
    66a4:	d106      	bne.n	66b4 <_Z17copt_del_opt_typeP5sl_cot+0x18>
    66a6:	214c      	movs	r1, #76	; 0x4c
    66a8:	4b12      	ldr	r3, [pc, #72]	; (66f4 <_Z17copt_del_opt_typeP5sl_cot+0x58>)
    66aa:	4a13      	ldr	r2, [pc, #76]	; (66f8 <_Z17copt_del_opt_typeP5sl_cot+0x5c>)
    66ac:	31ff      	adds	r1, #255	; 0xff
    66ae:	4813      	ldr	r0, [pc, #76]	; (66fc <_Z17copt_del_opt_typeP5sl_cot+0x60>)
    66b0:	f004 fef2 	bl	b498 <__assert_func>
    error_t rc = ERR_NO_ENTRY;
    66b4:	250c      	movs	r5, #12
    coap_opt *o, *tmp;

    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    66b6:	6800      	ldr	r0, [r0, #0]
    66b8:	2800      	cmp	r0, #0
    66ba:	d012      	beq.n	66e2 <_Z17copt_del_opt_typeP5sl_cot+0x46>
        if (o->o.ot == ot) {
    66bc:	8803      	ldrh	r3, [r0, #0]
    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    66be:	6886      	ldr	r6, [r0, #8]
        if (o->o.ot == ot) {
    66c0:	42bb      	cmp	r3, r7
    66c2:	d106      	bne.n	66d2 <_Z17copt_del_opt_typeP5sl_cot+0x36>
            rc = ERR_OK;
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    66c4:	6823      	ldr	r3, [r4, #0]
    66c6:	4298      	cmp	r0, r3
    66c8:	d106      	bne.n	66d8 <_Z17copt_del_opt_typeP5sl_cot+0x3c>
    66ca:	6026      	str	r6, [r4, #0]
        free(co);
    66cc:	f005 f836 	bl	b73c <free>
            rc = ERR_OK;
    66d0:	2500      	movs	r5, #0
    66d2:	0030      	movs	r0, r6
    66d4:	e7f0      	b.n	66b8 <_Z17copt_del_opt_typeP5sl_cot+0x1c>
    66d6:	0013      	movs	r3, r2
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    66d8:	689a      	ldr	r2, [r3, #8]
    66da:	4290      	cmp	r0, r2
    66dc:	d1fb      	bne.n	66d6 <_Z17copt_del_opt_typeP5sl_cot+0x3a>
    66de:	609e      	str	r6, [r3, #8]
    66e0:	e7f4      	b.n	66cc <_Z17copt_del_opt_typeP5sl_cot+0x30>
            copt_dealloc(o);
        }
    }

    if (rc) {
    66e2:	2d00      	cmp	r5, #0
    66e4:	d004      	beq.n	66f0 <_Z17copt_del_opt_typeP5sl_cot+0x54>
        dlog(LOG_DEBUG, "Didn't find option %d to delete.", ot);
    66e6:	003a      	movs	r2, r7
    66e8:	4905      	ldr	r1, [pc, #20]	; (6700 <_Z17copt_del_opt_typeP5sl_cot+0x64>)
    66ea:	2007      	movs	r0, #7
    66ec:	f7fd fd94 	bl	4218 <_Z4dlogiPKcz>
    }

    return rc;
}
    66f0:	0028      	movs	r0, r5
    66f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66f4:	00010172 	.word	0x00010172
    66f8:	000101e2 	.word	0x000101e2
    66fc:	00010175 	.word	0x00010175
    6700:	00010151 	.word	0x00010151

00006704 <_Z14observe_rx_ackPvP4mbuf>:
 */
error_t observe_rx_ack(void *cbctx, struct mbuf *m)
{
	// Bump the sequence number.
	uint32_t seq_number = *((uint32_t *)cbctx);
	seq_number++;
    6704:	6803      	ldr	r3, [r0, #0]
    6706:	3301      	adds	r3, #1
	*((uint32_t *)cbctx) = seq_number;
    6708:	6003      	str	r3, [r0, #0]
	
	return ERR_OK;
}
    670a:	2000      	movs	r0, #0
    670c:	4770      	bx	lr
	...

00006710 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>:
{
    6710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    6712:	2434      	movs	r4, #52	; 0x34
{
    6714:	4684      	mov	ip, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    6716:	4d11      	ldr	r5, [pc, #68]	; (675c <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x4c>)
    6718:	4e11      	ldr	r6, [pc, #68]	; (6760 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x50>)
    671a:	7828      	ldrb	r0, [r5, #0]
{
    671c:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    671e:	4360      	muls	r0, r4
{
    6720:	9200      	str	r2, [sp, #0]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    6722:	4910      	ldr	r1, [pc, #64]	; (6764 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x54>)
    6724:	4662      	mov	r2, ip
    6726:	1830      	adds	r0, r6, r0
{
    6728:	9301      	str	r3, [sp, #4]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    672a:	f006 f919 	bl	c960 <siprintf>
	observe_info[observe_info_index].pObsFunc = p;
    672e:	782b      	ldrb	r3, [r5, #0]
	observe_info[observe_info_index].sensor_id = sensor_id;
    6730:	466a      	mov	r2, sp
	observe_info[observe_info_index].pObsFunc = p;
    6732:	435c      	muls	r4, r3
	observe_info[observe_info_index].frequency = frequency;
    6734:	9b00      	ldr	r3, [sp, #0]
	observe_info[observe_info_index].pObsFunc = p;
    6736:	1936      	adds	r6, r6, r4
	observe_info[observe_info_index].frequency = frequency;
    6738:	62b3      	str	r3, [r6, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = sensor_id;
    673a:	0033      	movs	r3, r6
    673c:	7912      	ldrb	r2, [r2, #4]
    673e:	3331      	adds	r3, #49	; 0x31
    6740:	701a      	strb	r2, [r3, #0]
	observe_info[observe_info_index].obs_flag = 0;
    6742:	0032      	movs	r2, r6
    6744:	2300      	movs	r3, #0
    6746:	3230      	adds	r2, #48	; 0x30
	observe_info[observe_info_index].pObsFunc = p;
    6748:	6237      	str	r7, [r6, #32]
	observe_info[observe_info_index].ack_seqno = 0;
    674a:	62f3      	str	r3, [r6, #44]	; 0x2c
	observe_info[observe_info_index].obs_flag = 0;
    674c:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    674e:	f7fd fccb 	bl	40e8 <_Z13get_rtc_epochv>
    6752:	6270      	str	r0, [r6, #36]	; 0x24
	return observe_info_index++;
    6754:	7828      	ldrb	r0, [r5, #0]
    6756:	1c43      	adds	r3, r0, #1
    6758:	702b      	strb	r3, [r5, #0]
}
    675a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    675c:	2000176c 	.word	0x2000176c
    6760:	20001770 	.word	0x20001770
    6764:	000103a7 	.word	0x000103a7

00006768 <_Z12set_observerPKcPF7error_eP4mbufPhhE>:
{
    6768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    676a:	2534      	movs	r5, #52	; 0x34
    676c:	4c0d      	ldr	r4, [pc, #52]	; (67a4 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x3c>)
    676e:	4e0e      	ldr	r6, [pc, #56]	; (67a8 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x40>)
    6770:	7823      	ldrb	r3, [r4, #0]
{
    6772:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    6774:	436b      	muls	r3, r5
{
    6776:	0002      	movs	r2, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    6778:	490c      	ldr	r1, [pc, #48]	; (67ac <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x44>)
    677a:	18f0      	adds	r0, r6, r3
    677c:	f006 f8f0 	bl	c960 <siprintf>
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    6780:	233c      	movs	r3, #60	; 0x3c
	observe_info[observe_info_index].pObsFunc = p;
    6782:	7824      	ldrb	r4, [r4, #0]
    6784:	436c      	muls	r4, r5
    6786:	1934      	adds	r4, r6, r4
	observe_info[observe_info_index].sensor_id = 0;
    6788:	0022      	movs	r2, r4
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    678a:	62a3      	str	r3, [r4, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = 0;
    678c:	2300      	movs	r3, #0
    678e:	3231      	adds	r2, #49	; 0x31
    6790:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].obs_flag = 0;
    6792:	3a01      	subs	r2, #1
	observe_info[observe_info_index].pObsFunc = p;
    6794:	6227      	str	r7, [r4, #32]
	observe_info[observe_info_index].obs_flag = 0;
    6796:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].ack_seqno = 0;
    6798:	62e3      	str	r3, [r4, #44]	; 0x2c
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    679a:	f7fd fca5 	bl	40e8 <_Z13get_rtc_epochv>
    679e:	6260      	str	r0, [r4, #36]	; 0x24
}
    67a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    67a2:	46c0      	nop			; (mov r8, r8)
    67a4:	2000176c 	.word	0x2000176c
    67a8:	20001770 	.word	0x20001770
    67ac:	000103a7 	.word	0x000103a7

000067b0 <_Z17coap_obs_reg_sapih>:
{
    67b0:	b510      	push	{r4, lr}
    67b2:	0004      	movs	r4, r0
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    67b4:	f7fd fc98 	bl	40e8 <_Z13get_rtc_epochv>
    67b8:	2334      	movs	r3, #52	; 0x34
    67ba:	435c      	muls	r4, r3
    67bc:	4b05      	ldr	r3, [pc, #20]	; (67d4 <_Z17coap_obs_reg_sapih+0x24>)
	observe_info[observer_id].obs_flag = 1;
    67be:	2101      	movs	r1, #1
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    67c0:	191b      	adds	r3, r3, r4
	observe_info[observer_id].obs_flag = 1;
    67c2:	001a      	movs	r2, r3
    67c4:	3230      	adds	r2, #48	; 0x30
    67c6:	7011      	strb	r1, [r2, #0]
	observe_info[observer_id].ack_seqno = 10;
    67c8:	220a      	movs	r2, #10
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    67ca:	6258      	str	r0, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 10;
    67cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
    67ce:	2000      	movs	r0, #0
    67d0:	bd10      	pop	{r4, pc}
    67d2:	46c0      	nop			; (mov r8, r8)
    67d4:	20001770 	.word	0x20001770

000067d8 <_Z19coap_obs_dereg_sapih>:
	observe_info[observer_id].obs_flag = 0;
    67d8:	2134      	movs	r1, #52	; 0x34
    67da:	4341      	muls	r1, r0
    67dc:	4b07      	ldr	r3, [pc, #28]	; (67fc <_Z19coap_obs_dereg_sapih+0x24>)
{
    67de:	b510      	push	{r4, lr}
	observe_info[observer_id].obs_flag = 0;
    67e0:	185b      	adds	r3, r3, r1
    67e2:	0019      	movs	r1, r3
    67e4:	2400      	movs	r4, #0
    67e6:	3130      	adds	r1, #48	; 0x30
{
    67e8:	0002      	movs	r2, r0
	observe_info[observer_id].obs_flag = 0;
    67ea:	700c      	strb	r4, [r1, #0]
	observe_info[observer_id].base_epoch = 0;
    67ec:	625c      	str	r4, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 0;
    67ee:	62dc      	str	r4, [r3, #44]	; 0x2c
	dlog(LOG_DEBUG, "De-register Observe: %d", observer_id);
    67f0:	4903      	ldr	r1, [pc, #12]	; (6800 <_Z19coap_obs_dereg_sapih+0x28>)
    67f2:	2007      	movs	r0, #7
    67f4:	f7fd fd10 	bl	4218 <_Z4dlogiPKcz>
}
    67f8:	0020      	movs	r0, r4
    67fa:	bd10      	pop	{r4, pc}
    67fc:	20001770 	.word	0x20001770
    6800:	000103b3 	.word	0x000103b3

00006804 <_Z16coap_observe_rsph>:
 * coap_msg_response() to build a response.
 * Register for callback when ACK received.
 * Set pending_rsp, freeing any existing one first.
 */
error_t coap_observe_rsp(uint8_t observer_id)
{
    6804:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct coap_msg_ctx rsp;
    coap_ack_cb_info_t 	cbi;			// Callback info
    uint8_t 			len = 0;		// Message length
    6806:	270a      	movs	r7, #10
{
    6808:	b09f      	sub	sp, #124	; 0x7c
    uint8_t 			len = 0;		// Message length
    680a:	ab02      	add	r3, sp, #8
    uint8_t 			nxt = 0;		// The next observer
    680c:	260b      	movs	r6, #11
    uint8_t 			len = 0;		// Message length
    680e:	18ff      	adds	r7, r7, r3
    6810:	2300      	movs	r3, #0
    uint8_t 			nxt = 0;		// The next observer
    6812:	aa02      	add	r2, sp, #8
    6814:	18b6      	adds	r6, r6, r2
    uint8_t 			len = 0;		// Message length
    6816:	703b      	strb	r3, [r7, #0]
    uint8_t 			nxt = 0;		// The next observer
    6818:	7033      	strb	r3, [r6, #0]
    struct mbuf *		m = NULL;		// Observe response message
    struct optlv 		opt;
    error_t 			rc = ERR_OK;

	// Safety check. If a message is already in progress do nothing.
    if (pending_rsp) 
    681a:	4b59      	ldr	r3, [pc, #356]	; (6980 <_Z16coap_observe_rsph+0x17c>)
{
    681c:	0004      	movs	r4, r0
    if (pending_rsp) 
    681e:	6819      	ldr	r1, [r3, #0]
    6820:	2900      	cmp	r1, #0
    6822:	d007      	beq.n	6834 <_Z16coap_observe_rsph+0x30>
	{
		dlog(LOG_DEBUG, "coap_observe_rsp: Pending response in progress - skipping new notification");
    6824:	4957      	ldr	r1, [pc, #348]	; (6984 <_Z16coap_observe_rsph+0x180>)
    6826:	2007      	movs	r0, #7
    6828:	f7fd fcf6 	bl	4218 <_Z4dlogiPKcz>
		return ERR_INPROGRESS;
    682c:	2410      	movs	r4, #16
error:
    copt_del_all((sl_co*)&(rsp.oh));
    dlog(LOG_DEBUG, "coap_observe_rsp: free response mbuf on error");
    m_free(m);
    return rc;
}
    682e:	0020      	movs	r0, r4
    6830:	b01f      	add	sp, #124	; 0x7c
    6832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rsp, 0, sizeof(rsp));
    6834:	ad09      	add	r5, sp, #36	; 0x24
    6836:	2254      	movs	r2, #84	; 0x54
    6838:	0028      	movs	r0, r5
    683a:	f004 ffc5 	bl	b7c8 <memset>
	rc = get_obs_by_uri(observe_info[observer_id].obs_uri, &(rsp.tkl), rsp.token, &(rsp.client), &nxt);
    683e:	2222      	movs	r2, #34	; 0x22
    6840:	2334      	movs	r3, #52	; 0x34
    6842:	a902      	add	r1, sp, #8
    6844:	1852      	adds	r2, r2, r1
    6846:	211d      	movs	r1, #29
    6848:	4363      	muls	r3, r4
    684a:	4c4f      	ldr	r4, [pc, #316]	; (6988 <_Z16coap_observe_rsph+0x184>)
    684c:	a802      	add	r0, sp, #8
    684e:	18e4      	adds	r4, r4, r3
    6850:	9302      	str	r3, [sp, #8]
    6852:	1809      	adds	r1, r1, r0
    6854:	9600      	str	r6, [sp, #0]
    6856:	ab1a      	add	r3, sp, #104	; 0x68
    6858:	0020      	movs	r0, r4
    685a:	f7ff fd63 	bl	6324 <_Z14get_obs_by_uriPKcPhS1_PPvS1_>
    685e:	9003      	str	r0, [sp, #12]
    if (rc)
    6860:	2800      	cmp	r0, #0
    6862:	d006      	beq.n	6872 <_Z16coap_observe_rsph+0x6e>
        dlog(LOG_ERR, "get_obs_by_uri failed: %s", observe_info[observer_id].obs_uri);
    6864:	0022      	movs	r2, r4
    6866:	4949      	ldr	r1, [pc, #292]	; (698c <_Z16coap_observe_rsph+0x188>)
    6868:	2003      	movs	r0, #3
    686a:	f7fd fcd5 	bl	4218 <_Z4dlogiPKcz>
        return ERR_NO_ENTRY;
    686e:	240c      	movs	r4, #12
    6870:	e7dd      	b.n	682e <_Z16coap_observe_rsph+0x2a>
    copt_init((sl_co*)&(rsp.oh));
    6872:	a81c      	add	r0, sp, #112	; 0x70
    6874:	f7ff fe74 	bl	6560 <_Z9copt_initP5sl_co>
	m = m_gethdr();
    6878:	f000 fce6 	bl	7248 <_Z5m_getv>
    687c:	1e06      	subs	r6, r0, #0
    if (!m) 
    687e:	d030      	beq.n	68e2 <_Z16coap_observe_rsph+0xde>
    m_prepend(m, COAP_OBS_HDR_SZ);
    6880:	211c      	movs	r1, #28
    6882:	f000 fd27 	bl	72d4 <_Z9m_prependP4mbufi>
	if (is_sapi == 1)
    6886:	4b42      	ldr	r3, [pc, #264]	; (6990 <_Z16coap_observe_rsph+0x18c>)
    6888:	781a      	ldrb	r2, [r3, #0]
    688a:	6a23      	ldr	r3, [r4, #32]
    688c:	2a01      	cmp	r2, #1
    688e:	d12a      	bne.n	68e6 <_Z16coap_observe_rsph+0xe2>
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, observe_info[observer_id].sensor_id);
    6890:	3431      	adds	r4, #49	; 0x31
    6892:	7822      	ldrb	r2, [r4, #0]
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, 0);
    6894:	0039      	movs	r1, r7
    6896:	0030      	movs	r0, r6
    6898:	4798      	blx	r3
    689a:	1e04      	subs	r4, r0, #0
    if (rc != ERR_OK) 
    689c:	d137      	bne.n	690e <_Z16coap_observe_rsph+0x10a>
    m_adj( m, COAP_OBS_HDR_SZ );
    689e:	211c      	movs	r1, #28
    68a0:	0030      	movs	r0, r6
    68a2:	f000 fd3d 	bl	7320 <_Z5m_adjP4mbufi>
    rsp.msg = m;
    68a6:	652e      	str	r6, [r5, #80]	; 0x50
    rsp.mid = get_mid_val();
    68a8:	f7ff fb4c 	bl	5f44 <_Z11get_mid_valv>
	opt.ol = 3;
    68ac:	2703      	movs	r7, #3
	opt.ot = COAP_OPTION_OBSERVE;
    68ae:	2306      	movs	r3, #6
    68b0:	ac07      	add	r4, sp, #28
    rsp.mid = get_mid_val();
    68b2:	80a8      	strh	r0, [r5, #4]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    68b4:	0021      	movs	r1, r4
    68b6:	a81c      	add	r0, sp, #112	; 0x70
	opt.ot = COAP_OPTION_OBSERVE;
    68b8:	8023      	strh	r3, [r4, #0]
	opt.ol = 3;
    68ba:	8067      	strh	r7, [r4, #2]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    68bc:	f7ff fe84 	bl	65c8 <_Z12copt_add_optP5sl_coP5optlv>
		dlog(LOG_ERR, "Couldn't add Observe option");
    68c0:	4934      	ldr	r1, [pc, #208]	; (6994 <_Z16coap_observe_rsph+0x190>)
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    68c2:	2800      	cmp	r0, #0
    68c4:	d10a      	bne.n	68dc <_Z16coap_observe_rsph+0xd8>
	opt.ot = COAP_OPTION_MAXAGE;
    68c6:	230e      	movs	r3, #14
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    68c8:	0021      	movs	r1, r4
	opt.ot = COAP_OPTION_MAXAGE;
    68ca:	8023      	strh	r3, [r4, #0]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    68cc:	a81c      	add	r0, sp, #112	; 0x70
	opt.ol = 4;
    68ce:	3b0a      	subs	r3, #10
    68d0:	8063      	strh	r3, [r4, #2]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    68d2:	f7ff fe79 	bl	65c8 <_Z12copt_add_optP5sl_coP5optlv>
    68d6:	1e04      	subs	r4, r0, #0
    68d8:	d007      	beq.n	68ea <_Z16coap_observe_rsph+0xe6>
		dlog(LOG_ERR, "Couldn't add Max-Age option");
    68da:	492f      	ldr	r1, [pc, #188]	; (6998 <_Z16coap_observe_rsph+0x194>)
    68dc:	0038      	movs	r0, r7
    68de:	f7fd fc9b 	bl	4218 <_Z4dlogiPKcz>
		rc = ERR_NO_MEM;
    68e2:	2403      	movs	r4, #3
    68e4:	e013      	b.n	690e <_Z16coap_observe_rsph+0x10a>
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, 0);
    68e6:	9a03      	ldr	r2, [sp, #12]
    68e8:	e7d4      	b.n	6894 <_Z16coap_observe_rsph+0x90>
	rsp.plen = m->m_pktlen; /* payload includes type and length */
    68ea:	8833      	ldrh	r3, [r6, #0]
	rsp.cf = COAP_CF_CSV;
    68ec:	2202      	movs	r2, #2
	rsp.plen = m->m_pktlen; /* payload includes type and length */
    68ee:	642b      	str	r3, [r5, #64]	; 0x40
    rsp.code = COAP_RSP_205_CONTENT;
    68f0:	2345      	movs	r3, #69	; 0x45
    68f2:	70ab      	strb	r3, [r5, #2]
	rsp.cf = COAP_CF_CSV;
    68f4:	ab18      	add	r3, sp, #96	; 0x60
    68f6:	701a      	strb	r2, [r3, #0]
    rsp.type = COAP_T_NCONF_VAL; // TODO: CON or NON?
    68f8:	2301      	movs	r3, #1
    if (coap_msg_response(&rsp) != ERR_OK) 
    68fa:	0028      	movs	r0, r5
    rsp.type = COAP_T_NCONF_VAL; // TODO: CON or NON?
    68fc:	702b      	strb	r3, [r5, #0]
    if (coap_msg_response(&rsp) != ERR_OK) 
    68fe:	f7ff fc31 	bl	6164 <_Z17coap_msg_responseP12coap_msg_ctx>
    6902:	2800      	cmp	r0, #0
    6904:	d00e      	beq.n	6924 <_Z16coap_observe_rsph+0x120>
        dlog(LOG_ERR, "coap_observe_rsp: Error creating response");
    6906:	4925      	ldr	r1, [pc, #148]	; (699c <_Z16coap_observe_rsph+0x198>)
    6908:	0038      	movs	r0, r7
    690a:	f7fd fc85 	bl	4218 <_Z4dlogiPKcz>
    copt_del_all((sl_co*)&(rsp.oh));
    690e:	a81c      	add	r0, sp, #112	; 0x70
    6910:	f7ff fe38 	bl	6584 <_Z12copt_del_allP5sl_co>
    dlog(LOG_DEBUG, "coap_observe_rsp: free response mbuf on error");
    6914:	4922      	ldr	r1, [pc, #136]	; (69a0 <_Z16coap_observe_rsph+0x19c>)
    6916:	2007      	movs	r0, #7
    6918:	f7fd fc7e 	bl	4218 <_Z4dlogiPKcz>
    m_free(m);
    691c:	0030      	movs	r0, r6
    691e:	f000 fcbd 	bl	729c <_Z6m_freeP4mbuf>
    return rc;
    6922:	e784      	b.n	682e <_Z16coap_observe_rsph+0x2a>
    cbi.cbctx = (void *) &observe_info[observer_id].ack_seqno;
    6924:	9c02      	ldr	r4, [sp, #8]
    6926:	4b18      	ldr	r3, [pc, #96]	; (6988 <_Z16coap_observe_rsph+0x184>)
    6928:	342c      	adds	r4, #44	; 0x2c
    692a:	191c      	adds	r4, r3, r4
    cbi.cb = observe_rx_ack;
    692c:	4b1d      	ldr	r3, [pc, #116]	; (69a4 <_Z16coap_observe_rsph+0x1a0>)
    cbi.cbctx = (void *) &observe_info[observer_id].ack_seqno;
    692e:	9406      	str	r4, [sp, #24]
    cbi.cb = observe_rx_ack;
    6930:	9305      	str	r3, [sp, #20]
    coap_con_add(rsp.mid, &cbi);
    6932:	88a8      	ldrh	r0, [r5, #4]
    6934:	a905      	add	r1, sp, #20
    6936:	f7ff f91f 	bl	5b78 <_Z12coap_con_addtP18coap_ack_cb_info_t>
    if (pending_rsp) 
    693a:	4b11      	ldr	r3, [pc, #68]	; (6980 <_Z16coap_observe_rsph+0x17c>)
    693c:	6818      	ldr	r0, [r3, #0]
    693e:	2800      	cmp	r0, #0
    6940:	d008      	beq.n	6954 <_Z16coap_observe_rsph+0x150>
        m_free(pending_rsp);
    6942:	f000 fcab 	bl	729c <_Z6m_freeP4mbuf>
		dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    6946:	2396      	movs	r3, #150	; 0x96
    6948:	4a17      	ldr	r2, [pc, #92]	; (69a8 <_Z16coap_observe_rsph+0x1a4>)
    694a:	33ff      	adds	r3, #255	; 0xff
    694c:	4917      	ldr	r1, [pc, #92]	; (69ac <_Z16coap_observe_rsph+0x1a8>)
    694e:	2007      	movs	r0, #7
    6950:	f7fd fc62 	bl	4218 <_Z4dlogiPKcz>
    pending_rsp = rsp.msg;
    6954:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    copt_del_all((sl_co*)&(rsp.oh));
    6956:	a81c      	add	r0, sp, #112	; 0x70
    pending_rsp = rsp.msg;
    6958:	9302      	str	r3, [sp, #8]
    695a:	9a02      	ldr	r2, [sp, #8]
    695c:	4b08      	ldr	r3, [pc, #32]	; (6980 <_Z16coap_observe_rsph+0x17c>)
    return ERR_OK;
    695e:	2400      	movs	r4, #0
    pending_rsp = rsp.msg;
    6960:	601a      	str	r2, [r3, #0]
    copt_del_all((sl_co*)&(rsp.oh));
    6962:	f7ff fe0f 	bl	6584 <_Z12copt_del_allP5sl_co>
	digitalWrite(MNIC_WAKEUP_PIN,LOW);
    6966:	2100      	movs	r1, #0
    6968:	2009      	movs	r0, #9
    696a:	f7fd f8b1 	bl	3ad0 <digitalWrite>
	delay(1);
    696e:	2001      	movs	r0, #1
    6970:	f7fb feae 	bl	26d0 <delay>
	digitalWrite(MNIC_WAKEUP_PIN,HIGH);
    6974:	2101      	movs	r1, #1
    6976:	2009      	movs	r0, #9
    6978:	f7fd f8aa 	bl	3ad0 <digitalWrite>
    return ERR_OK;
    697c:	e757      	b.n	682e <_Z16coap_observe_rsph+0x2a>
    697e:	46c0      	nop			; (mov r8, r8)
    6980:	20001840 	.word	0x20001840
    6984:	00010298 	.word	0x00010298
    6988:	20001770 	.word	0x20001770
    698c:	000102e3 	.word	0x000102e3
    6990:	20000048 	.word	0x20000048
    6994:	000102fd 	.word	0x000102fd
    6998:	00010319 	.word	0x00010319
    699c:	00010335 	.word	0x00010335
    69a0:	00010379 	.word	0x00010379
    69a4:	00006705 	.word	0x00006705
    69a8:	000103cb 	.word	0x000103cb
    69ac:	0001035f 	.word	0x0001035f

000069b0 <_Z10do_observev>:
{
    69b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	time_t  epoch      = get_rtc_epoch();
    69b2:	f7fd fb99 	bl	40e8 <_Z13get_rtc_epochv>
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    69b6:	2400      	movs	r4, #0
	time_t  epoch      = get_rtc_epoch();
    69b8:	0005      	movs	r5, r0
		if (observe_info[indx].obs_flag)
    69ba:	2034      	movs	r0, #52	; 0x34
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    69bc:	4b18      	ldr	r3, [pc, #96]	; (6a20 <_Z10do_observev+0x70>)
    69be:	781f      	ldrb	r7, [r3, #0]
    69c0:	42bc      	cmp	r4, r7
    69c2:	da27      	bge.n	6a14 <_Z10do_observev+0x64>
		if (observe_info[indx].obs_flag)
    69c4:	0003      	movs	r3, r0
    69c6:	4363      	muls	r3, r4
    69c8:	4a16      	ldr	r2, [pc, #88]	; (6a24 <_Z10do_observev+0x74>)
    69ca:	18d3      	adds	r3, r2, r3
    69cc:	001a      	movs	r2, r3
    69ce:	3230      	adds	r2, #48	; 0x30
    69d0:	7812      	ldrb	r2, [r2, #0]
    69d2:	2a00      	cmp	r2, #0
    69d4:	d020      	beq.n	6a18 <_Z10do_observev+0x68>
			if (observe_info[indx].base_epoch == 0)
    69d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    69d8:	2a00      	cmp	r2, #0
    69da:	d100      	bne.n	69de <_Z10do_observev+0x2e>
				observe_info[indx].base_epoch = epoch;
    69dc:	625d      	str	r5, [r3, #36]	; 0x24
			if (epoch >= (observe_info[indx].base_epoch+observe_info[indx].frequency))
    69de:	0003      	movs	r3, r0
    69e0:	4363      	muls	r3, r4
    69e2:	4a10      	ldr	r2, [pc, #64]	; (6a24 <_Z10do_observev+0x74>)
    69e4:	18d3      	adds	r3, r2, r3
    69e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    69e8:	001e      	movs	r6, r3
    69ea:	468c      	mov	ip, r1
    69ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    69ee:	3624      	adds	r6, #36	; 0x24
    69f0:	4494      	add	ip, r2
    69f2:	45ac      	cmp	ip, r5
    69f4:	d810      	bhi.n	6a18 <_Z10do_observev+0x68>
				dlog(LOG_DEBUG, "do_observe: epoch %x uri %s", observe_info[indx].base_epoch, observe_info[indx].obs_uri);
    69f6:	490c      	ldr	r1, [pc, #48]	; (6a28 <_Z10do_observev+0x78>)
    69f8:	2007      	movs	r0, #7
    69fa:	f7fd fc0d 	bl	4218 <_Z4dlogiPKcz>
				observe_info[indx].base_epoch = epoch;
    69fe:	6035      	str	r5, [r6, #0]
				coap_observe_rsp(indx);
    6a00:	0020      	movs	r0, r4
    6a02:	f7ff feff 	bl	6804 <_Z16coap_observe_rsph>
				int freeram = free_ram();
    6a06:	f7fd fd39 	bl	447c <_Z8free_ramv>
				dlog(LOG_DEBUG, "do_observe: Free Ram: %d", freeram);
    6a0a:	4908      	ldr	r1, [pc, #32]	; (6a2c <_Z10do_observev+0x7c>)
				int freeram = free_ram();
    6a0c:	0002      	movs	r2, r0
				dlog(LOG_DEBUG, "do_observe: Free Ram: %d", freeram);
    6a0e:	2007      	movs	r0, #7
    6a10:	f7fd fc02 	bl	4218 <_Z4dlogiPKcz>
} // do_observe
    6a14:	2001      	movs	r0, #1
    6a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    6a18:	3401      	adds	r4, #1
    6a1a:	b2e4      	uxtb	r4, r4
    6a1c:	e7d0      	b.n	69c0 <_Z10do_observev+0x10>
    6a1e:	46c0      	nop			; (mov r8, r8)
    6a20:	2000176c 	.word	0x2000176c
    6a24:	20001770 	.word	0x20001770
    6a28:	00010263 	.word	0x00010263
    6a2c:	0001027f 	.word	0x0001027f

00006a30 <_ZL8crsystemP12coap_msg_ctxS0_>:
}


// The "sys" dispatcher.
static error_t crsystem(struct coap_msg_ctx *req, struct coap_msg_ctx *rsp)
{
    6a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    struct optlv *o;
    void *it = NULL;
	
    /* No observes on system */
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6a32:	0006      	movs	r6, r0
    void *it = NULL;
    6a34:	2200      	movs	r2, #0
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6a36:	364c      	adds	r6, #76	; 0x4c
{
    6a38:	b087      	sub	sp, #28
    6a3a:	0005      	movs	r5, r0
    6a3c:	000c      	movs	r4, r1
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6a3e:	0030      	movs	r0, r6
    6a40:	2106      	movs	r1, #6
    void *it = NULL;
    6a42:	9203      	str	r2, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    6a44:	f7ff fe02 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6a48:	2800      	cmp	r0, #0
    6a4a:	d004      	beq.n	6a56 <_ZL8crsystemP12coap_msg_ctxS0_+0x26>
	{
        copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    6a4c:	0020      	movs	r0, r4
    6a4e:	2106      	movs	r1, #6
    6a50:	304c      	adds	r0, #76	; 0x4c
    6a52:	f7ff fe23 	bl	669c <_Z17copt_del_opt_typeP5sl_cot>
    }
    /* 
     * No URI path beyond /system, except /time and /stats is supported, so
     * reject if present. 
     */
    copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    6a56:	aa03      	add	r2, sp, #12
    6a58:	210b      	movs	r1, #11
    6a5a:	0030      	movs	r0, r6
    6a5c:	f7ff fdf6 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	
    if ((o = copt_get_next_opt_type((const sl_co*) &(req->oh), COAP_OPTION_URI_PATH, &it)))
    6a60:	aa03      	add	r2, sp, #12
    6a62:	210b      	movs	r1, #11
    6a64:	0030      	movs	r0, r6
    6a66:	f7ff fdf1 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6a6a:	1e07      	subs	r7, r0, #0
    6a6c:	d100      	bne.n	6a70 <_ZL8crsystemP12coap_msg_ctxS0_+0x40>
    6a6e:	e094      	b.n	6b9a <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
	{
        if (!coap_opt_strcmp(o, S_TIME_URI))
    6a70:	4981      	ldr	r1, [pc, #516]	; (6c78 <_ZL8crsystemP12coap_msg_ctxS0_+0x248>)
    6a72:	f7ff f8c1 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
    6a76:	9001      	str	r0, [sp, #4]
    6a78:	2800      	cmp	r0, #0
    6a7a:	d000      	beq.n	6a7e <_ZL8crsystemP12coap_msg_ctxS0_+0x4e>
    6a7c:	e07e      	b.n	6b7c <_ZL8crsystemP12coap_msg_ctxS0_+0x14c>
    6a7e:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)))
    6a80:	0030      	movs	r0, r6
    6a82:	aa04      	add	r2, sp, #16
    6a84:	210b      	movs	r1, #11
    6a86:	9304      	str	r3, [sp, #16]
    6a88:	f7ff fde0 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6a8c:	1e06      	subs	r6, r0, #0
    6a8e:	d005      	beq.n	6a9c <_ZL8crsystemP12coap_msg_ctxS0_+0x6c>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    6a90:	2384      	movs	r3, #132	; 0x84
    6a92:	70a3      	strb	r3, [r4, #2]
        rsp->plen = 0;
    6a94:	9b01      	ldr	r3, [sp, #4]
    6a96:	6423      	str	r3, [r4, #64]	; 0x40
    return ERR_OK;
    6a98:	2500      	movs	r5, #0
    6a9a:	e017      	b.n	6acc <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    if (req->code == COAP_REQUEST_GET)
    6a9c:	78ab      	ldrb	r3, [r5, #2]
    6a9e:	2b01      	cmp	r3, #1
    6aa0:	d124      	bne.n	6aec <_ZL8crsystemP12coap_msg_ctxS0_+0xbc>
		now = get_rtc_epoch();
    6aa2:	f7fd fb21 	bl	40e8 <_Z13get_rtc_epochv>
    6aa6:	0005      	movs	r5, r0
		dlog(LOG_DEBUG, "Epoch for GET of sys time: %08x", now);
    6aa8:	0002      	movs	r2, r0
    6aaa:	4974      	ldr	r1, [pc, #464]	; (6c7c <_ZL8crsystemP12coap_msg_ctxS0_+0x24c>)
    6aac:	2007      	movs	r0, #7
    6aae:	f7fd fbb3 	bl	4218 <_Z4dlogiPKcz>
    6ab2:	ba2d      	rev	r5, r5
        d = m_append(rsp->msg, len);
    6ab4:	2104      	movs	r1, #4
    6ab6:	6d20      	ldr	r0, [r4, #80]	; 0x50
        now = htonl(now);
    6ab8:	9505      	str	r5, [sp, #20]
        d = m_append(rsp->msg, len);
    6aba:	f000 fc21 	bl	7300 <_Z8m_appendP4mbufs>
        if (!d)
    6abe:	2800      	cmp	r0, #0
    6ac0:	d107      	bne.n	6ad2 <_ZL8crsystemP12coap_msg_ctxS0_+0xa2>
            return ERR_NO_MEM;
    6ac2:	2503      	movs	r5, #3
            coap_stats.no_mbufs++;
    6ac4:	4a6e      	ldr	r2, [pc, #440]	; (6c80 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    6ac6:	6813      	ldr	r3, [r2, #0]
    6ac8:	3301      	adds	r3, #1
    6aca:	6013      	str	r3, [r2, #0]
    }

    rsp->plen = 0;

    return ERR_OK;
}
    6acc:	0028      	movs	r0, r5
    6ace:	b007      	add	sp, #28
    6ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(d, &now, len);
    6ad2:	2504      	movs	r5, #4
    6ad4:	a905      	add	r1, sp, #20
    6ad6:	002a      	movs	r2, r5
    6ad8:	f004 fe5b 	bl	b792 <memcpy>
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    6adc:	0023      	movs	r3, r4
    6ade:	222a      	movs	r2, #42	; 0x2a
    6ae0:	333c      	adds	r3, #60	; 0x3c
        rsp->plen = len;
    6ae2:	6425      	str	r5, [r4, #64]	; 0x40
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    6ae4:	701a      	strb	r2, [r3, #0]
        rsp->code = COAP_RSP_205_CONTENT;
    6ae6:	2345      	movs	r3, #69	; 0x45
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    6ae8:	70a3      	strb	r3, [r4, #2]
    6aea:	e7d5      	b.n	6a98 <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
	else if (req->code == COAP_REQUEST_PUT)
    6aec:	2b03      	cmp	r3, #3
    6aee:	d141      	bne.n	6b74 <_ZL8crsystemP12coap_msg_ctxS0_+0x144>
        m_adj(req->msg, req->hdrlen);
    6af0:	6969      	ldr	r1, [r5, #20]
    6af2:	6d28      	ldr	r0, [r5, #80]	; 0x50
    6af4:	f000 fc14 	bl	7320 <_Z5m_adjP4mbufi>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    6af8:	6d2f      	ldr	r7, [r5, #80]	; 0x50
        if ((req->msg->m_pktlen == 0) || ((td->tl.u.rdt != crdt_time_abs) && (td->tl.u.rdt != crdt_time_delta)) || 
    6afa:	883b      	ldrh	r3, [r7, #0]
    6afc:	2b00      	cmp	r3, #0
    6afe:	d006      	beq.n	6b0e <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    6b00:	793b      	ldrb	r3, [r7, #4]
    6b02:	1f9a      	subs	r2, r3, #6
    6b04:	2a01      	cmp	r2, #1
    6b06:	d802      	bhi.n	6b0e <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    6b08:	797a      	ldrb	r2, [r7, #5]
    6b0a:	2a08      	cmp	r2, #8
    6b0c:	d001      	beq.n	6b12 <_ZL8crsystemP12coap_msg_ctxS0_+0xe2>
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    6b0e:	2386      	movs	r3, #134	; 0x86
    6b10:	e7ea      	b.n	6ae8 <_ZL8crsystemP12coap_msg_ctxS0_+0xb8>
    return ERR_OK;
    6b12:	0035      	movs	r5, r6
		else if (td->tl.u.rdt == crdt_time_abs)
    6b14:	2b06      	cmp	r3, #6
    6b16:	d1d9      	bne.n	6acc <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    6b18:	1d3a      	adds	r2, r7, #4
			ddump(LOG_DEBUG, "PUT /sys/time Payload", (void *)td, sizeof(coap_sys_time_data_t));
    6b1a:	3304      	adds	r3, #4
    6b1c:	4959      	ldr	r1, [pc, #356]	; (6c84 <_ZL8crsystemP12coap_msg_ctxS0_+0x254>)
    6b1e:	2007      	movs	r0, #7
    6b20:	f7fd fb9c 	bl	425c <_Z5ddumpiPKcPKvi>
			epoch = (uint32_t) ntohl(td->sec);
    6b24:	21ff      	movs	r1, #255	; 0xff
    6b26:	79fa      	ldrb	r2, [r7, #7]
    6b28:	79bb      	ldrb	r3, [r7, #6]
    6b2a:	0212      	lsls	r2, r2, #8
    6b2c:	431a      	orrs	r2, r3
    6b2e:	7a3b      	ldrb	r3, [r7, #8]
    6b30:	0209      	lsls	r1, r1, #8
    6b32:	041b      	lsls	r3, r3, #16
    6b34:	431a      	orrs	r2, r3
    6b36:	7a7b      	ldrb	r3, [r7, #9]
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    6b38:	2007      	movs	r0, #7
			epoch = (uint32_t) ntohl(td->sec);
    6b3a:	061b      	lsls	r3, r3, #24
    6b3c:	4313      	orrs	r3, r2
    6b3e:	061a      	lsls	r2, r3, #24
    6b40:	0e1e      	lsrs	r6, r3, #24
    6b42:	4316      	orrs	r6, r2
    6b44:	0a1a      	lsrs	r2, r3, #8
    6b46:	400a      	ands	r2, r1
    6b48:	4316      	orrs	r6, r2
    6b4a:	22ff      	movs	r2, #255	; 0xff
    6b4c:	021b      	lsls	r3, r3, #8
    6b4e:	0412      	lsls	r2, r2, #16
    6b50:	4013      	ands	r3, r2
    6b52:	431e      	orrs	r6, r3
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    6b54:	0032      	movs	r2, r6
    6b56:	494c      	ldr	r1, [pc, #304]	; (6c88 <_ZL8crsystemP12coap_msg_ctxS0_+0x258>)
    6b58:	f7fd fb5e 	bl	4218 <_Z4dlogiPKcz>
			rtc.setEpoch(epoch);
    6b5c:	0031      	movs	r1, r6
    6b5e:	484b      	ldr	r0, [pc, #300]	; (6c8c <_ZL8crsystemP12coap_msg_ctxS0_+0x25c>)
    6b60:	f7fe fef0 	bl	5944 <_ZN7RTCZero8setEpochEm>
			print_current_date();
    6b64:	f7fd fb04 	bl	4170 <_Z18print_current_datev>
			print_current_time();
    6b68:	f7fd fac6 	bl	40f8 <_Z18print_current_timev>
			rsp->code = COAP_RSP_204_CHANGED;
    6b6c:	2344      	movs	r3, #68	; 0x44
    6b6e:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    6b70:	6425      	str	r5, [r4, #64]	; 0x40
    return ERR_OK;
    6b72:	e7ab      	b.n	6acc <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6b74:	23a1      	movs	r3, #161	; 0xa1
        rsp->plen = 0;
    6b76:	6420      	str	r0, [r4, #64]	; 0x40
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6b78:	70a3      	strb	r3, [r4, #2]
    6b7a:	e78d      	b.n	6a98 <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
		else if (!coap_opt_strcmp(o, S_STAT_URI))
    6b7c:	4944      	ldr	r1, [pc, #272]	; (6c90 <_ZL8crsystemP12coap_msg_ctxS0_+0x260>)
    6b7e:	0038      	movs	r0, r7
    6b80:	f7ff f83a 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
    6b84:	2800      	cmp	r0, #0
    6b86:	d108      	bne.n	6b9a <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
    6b88:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it))) {
    6b8a:	aa05      	add	r2, sp, #20
    6b8c:	210b      	movs	r1, #11
    6b8e:	0030      	movs	r0, r6
    6b90:	9305      	str	r3, [sp, #20]
    6b92:	f7ff fd5b 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6b96:	1e02      	subs	r2, r0, #0
    6b98:	d001      	beq.n	6b9e <_ZL8crsystemP12coap_msg_ctxS0_+0x16e>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    6b9a:	2384      	movs	r3, #132	; 0x84
    6b9c:	e04f      	b.n	6c3e <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    6b9e:	0030      	movs	r0, r6
    6ba0:	210f      	movs	r1, #15
    6ba2:	f7ff fd53 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if (req->code == COAP_REQUEST_GET) {
    6ba6:	78ab      	ldrb	r3, [r5, #2]
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    6ba8:	0006      	movs	r6, r0
    if (req->code == COAP_REQUEST_GET) {
    6baa:	2b01      	cmp	r3, #1
    6bac:	d151      	bne.n	6c52 <_ZL8crsystemP12coap_msg_ctxS0_+0x222>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    6bae:	4939      	ldr	r1, [pc, #228]	; (6c94 <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    6bb0:	f7ff f822 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
    6bb4:	1e05      	subs	r5, r0, #0
    6bb6:	d13b      	bne.n	6c30 <_ZL8crsystemP12coap_msg_ctxS0_+0x200>
    coap_sys_coap_stats_t *d = (coap_sys_coap_stats_t *) m_append(m, sizeof(coap_sys_coap_stats_t));
    6bb8:	2128      	movs	r1, #40	; 0x28
    6bba:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6bbc:	f000 fba0 	bl	7300 <_Z8m_appendP4mbufs>
    6bc0:	4b2f      	ldr	r3, [pc, #188]	; (6c80 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    if (!d) {
    6bc2:	2800      	cmp	r0, #0
    6bc4:	d114      	bne.n	6bf0 <_ZL8crsystemP12coap_msg_ctxS0_+0x1c0>
        coap_stats.no_mbufs++;
    6bc6:	681a      	ldr	r2, [r3, #0]
        return ERR_NO_MEM;
    6bc8:	3503      	adds	r5, #3
        coap_stats.no_mbufs++;
    6bca:	3201      	adds	r2, #1
    6bcc:	601a      	str	r2, [r3, #0]
        dlog(LOG_DEBUG, "GET (status %d) read %d bytes.", rc, len);
    6bce:	2328      	movs	r3, #40	; 0x28
    6bd0:	002a      	movs	r2, r5
    6bd2:	4931      	ldr	r1, [pc, #196]	; (6c98 <_ZL8crsystemP12coap_msg_ctxS0_+0x268>)
    6bd4:	2007      	movs	r0, #7
    6bd6:	f7fd fb1f 	bl	4218 <_Z4dlogiPKcz>
        if (!rc) {
    6bda:	2d00      	cmp	r5, #0
    6bdc:	d134      	bne.n	6c48 <_ZL8crsystemP12coap_msg_ctxS0_+0x218>
            rsp->plen = len;
    6bde:	2328      	movs	r3, #40	; 0x28
    6be0:	6423      	str	r3, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    6be2:	0023      	movs	r3, r4
    6be4:	222a      	movs	r2, #42	; 0x2a
    6be6:	333c      	adds	r3, #60	; 0x3c
    6be8:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    6bea:	2345      	movs	r3, #69	; 0x45
    6bec:	70a3      	strb	r3, [r4, #2]
    6bee:	e76d      	b.n	6acc <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    d->tl.u.rdt = crdt_stat_coap;
    6bf0:	2208      	movs	r2, #8
    6bf2:	7002      	strb	r2, [r0, #0]
    d->tl.l = sizeof(coap_stats);
    6bf4:	321c      	adds	r2, #28
    6bf6:	7042      	strb	r2, [r0, #1]
    6bf8:	681a      	ldr	r2, [r3, #0]
    6bfa:	ba12      	rev	r2, r2
    d->cs.no_mbufs = htonl(coap_stats.no_mbufs);
    6bfc:	6042      	str	r2, [r0, #4]
    6bfe:	685a      	ldr	r2, [r3, #4]
    6c00:	ba12      	rev	r2, r2
    d->cs.no_mem = htonl(coap_stats.no_mem);
    6c02:	6082      	str	r2, [r0, #8]
    6c04:	689a      	ldr	r2, [r3, #8]
    6c06:	ba12      	rev	r2, r2
    d->cs.sensors_enabled = htonl(coap_stats.sensors_enabled);
    6c08:	60c2      	str	r2, [r0, #12]
    6c0a:	68da      	ldr	r2, [r3, #12]
    6c0c:	ba12      	rev	r2, r2
    d->cs.sensors_disabled = htonl(coap_stats.sensors_disabled);
    6c0e:	6102      	str	r2, [r0, #16]
    6c10:	691a      	ldr	r2, [r3, #16]
    6c12:	ba12      	rev	r2, r2
    d->cs.err_hdlc_send = htonl(coap_stats.err_hdlc_send);
    6c14:	6142      	str	r2, [r0, #20]
    6c16:	695a      	ldr	r2, [r3, #20]
    6c18:	ba12      	rev	r2, r2
    d->cs.active_obs = htonl(coap_stats.active_obs);
    6c1a:	6182      	str	r2, [r0, #24]
    6c1c:	699a      	ldr	r2, [r3, #24]
    6c1e:	ba12      	rev	r2, r2
    d->cs.rx_success = htonl(coap_stats.rx_success);
    6c20:	61c2      	str	r2, [r0, #28]
    6c22:	69da      	ldr	r2, [r3, #28]
    6c24:	6a1b      	ldr	r3, [r3, #32]
    6c26:	ba12      	rev	r2, r2
    6c28:	ba1b      	rev	r3, r3
    d->cs.tx_success = htonl(coap_stats.tx_success);
    6c2a:	6202      	str	r2, [r0, #32]
    d->cs.nretries_exceeded = htonl(coap_stats.nretries_exceeded);
    6c2c:	6243      	str	r3, [r0, #36]	; 0x24
    6c2e:	e7ce      	b.n	6bce <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    6c30:	491a      	ldr	r1, [pc, #104]	; (6c9c <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    6c32:	0030      	movs	r0, r6
    6c34:	f7fe ffe0 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
    6c38:	2800      	cmp	r0, #0
    6c3a:	d003      	beq.n	6c44 <_ZL8crsystemP12coap_msg_ctxS0_+0x214>
            rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6c3c:	23a1      	movs	r3, #161	; 0xa1
            rsp->code = COAP_RSP_404_NOT_FOUND;
    6c3e:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    6c40:	2500      	movs	r5, #0
    6c42:	e795      	b.n	6b70 <_ZL8crsystemP12coap_msg_ctxS0_+0x140>
            rc = ERR_INVAL;
    6c44:	2504      	movs	r5, #4
    6c46:	e7c2      	b.n	6bce <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    6c48:	23a0      	movs	r3, #160	; 0xa0
            switch (rc) {
    6c4a:	2d04      	cmp	r5, #4
    6c4c:	d1f7      	bne.n	6c3e <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
                rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    6c4e:	2386      	movs	r3, #134	; 0x86
    6c50:	e7f5      	b.n	6c3e <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    } else if (req->code == COAP_REQUEST_PUT) {
    6c52:	2b03      	cmp	r3, #3
    6c54:	d1f2      	bne.n	6c3c <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    6c56:	490f      	ldr	r1, [pc, #60]	; (6c94 <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    6c58:	f7fe ffce 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
    6c5c:	2800      	cmp	r0, #0
    6c5e:	d0ed      	beq.n	6c3c <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    6c60:	490e      	ldr	r1, [pc, #56]	; (6c9c <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    6c62:	0030      	movs	r0, r6
    6c64:	f7fe ffc8 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
    6c68:	2800      	cmp	r0, #0
    6c6a:	d1e7      	bne.n	6c3c <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        dlog(LOG_DEBUG, "SET (status %d).", rc);
    6c6c:	2204      	movs	r2, #4
    6c6e:	490c      	ldr	r1, [pc, #48]	; (6ca0 <_ZL8crsystemP12coap_msg_ctxS0_+0x270>)
    6c70:	3007      	adds	r0, #7
    6c72:	f7fd fad1 	bl	4218 <_Z4dlogiPKcz>
    6c76:	e7ea      	b.n	6c4e <_ZL8crsystemP12coap_msg_ctxS0_+0x21e>
    6c78:	00010457 	.word	0x00010457
    6c7c:	0001045c 	.word	0x0001045c
    6c80:	20001878 	.word	0x20001878
    6c84:	0001047c 	.word	0x0001047c
    6c88:	00010492 	.word	0x00010492
    6c8c:	2000092d 	.word	0x2000092d
    6c90:	000104ad 	.word	0x000104ad
    6c94:	000104b3 	.word	0x000104b3
    6c98:	000104c4 	.word	0x000104c4
    6c9c:	000104bc 	.word	0x000104bc
    6ca0:	000104e3 	.word	0x000104e3

00006ca4 <_ZL11crwellknownP12coap_msg_ctxS0_>:
{
    6ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    6ca6:	4b45      	ldr	r3, [pc, #276]	; (6dbc <_ZL11crwellknownP12coap_msg_ctxS0_+0x118>)
{
    6ca8:	b087      	sub	sp, #28
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    6caa:	681b      	ldr	r3, [r3, #0]
{
    6cac:	000d      	movs	r5, r1
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    6cae:	9303      	str	r3, [sp, #12]
    void *it = NULL;
    6cb0:	2300      	movs	r3, #0
    6cb2:	9305      	str	r3, [sp, #20]
    rsp->code = 0;  /* unknown yet - fill in below */
    6cb4:	708b      	strb	r3, [r1, #2]
    if (req->code == COAP_REQUEST_GET) {
    6cb6:	7882      	ldrb	r2, [r0, #2]
    6cb8:	2a01      	cmp	r2, #1
    6cba:	d000      	beq.n	6cbe <_ZL11crwellknownP12coap_msg_ctxS0_+0x1a>
    6cbc:	e079      	b.n	6db2 <_ZL11crwellknownP12coap_msg_ctxS0_+0x10e>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    6cbe:	304c      	adds	r0, #76	; 0x4c
    6cc0:	aa05      	add	r2, sp, #20
    6cc2:	210b      	movs	r1, #11
    6cc4:	0004      	movs	r4, r0
    6cc6:	f7ff fcc1 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    6cca:	2800      	cmp	r0, #0
    6ccc:	d100      	bne.n	6cd0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x2c>
    6cce:	e073      	b.n	6db8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    6cd0:	aa05      	add	r2, sp, #20
    6cd2:	210b      	movs	r1, #11
    6cd4:	0020      	movs	r0, r4
    6cd6:	f7ff fcb9 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6cda:	2800      	cmp	r0, #0
    6cdc:	d100      	bne.n	6ce0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x3c>
    6cde:	e06b      	b.n	6db8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            coap_opt_strcmp(op, "core")                                      ||
    6ce0:	4937      	ldr	r1, [pc, #220]	; (6dc0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x11c>)
    6ce2:	f7fe ff89 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
                copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) ||
    6ce6:	2800      	cmp	r0, #0
    6ce8:	d166      	bne.n	6db8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) {
    6cea:	aa05      	add	r2, sp, #20
    6cec:	210b      	movs	r1, #11
    6cee:	0020      	movs	r0, r4
    6cf0:	f7ff fcac 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    6cf4:	2800      	cmp	r0, #0
    6cf6:	d15f      	bne.n	6db8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
    6cf8:	2302      	movs	r3, #2
    6cfa:	4e32      	ldr	r6, [pc, #200]	; (6dc4 <_ZL11crwellknownP12coap_msg_ctxS0_+0x120>)
    6cfc:	9300      	str	r3, [sp, #0]
    6cfe:	3618      	adds	r6, #24
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    6d00:	9b00      	ldr	r3, [sp, #0]
    6d02:	9a03      	ldr	r2, [sp, #12]
    6d04:	4293      	cmp	r3, r2
    6d06:	da4a      	bge.n	6d9e <_ZL11crwellknownP12coap_msg_ctxS0_+0xfa>
            len = strlen(cr->path) + 4;         /* adding </ > , */
    6d08:	6830      	ldr	r0, [r6, #0]
    6d0a:	f005 fe6a 	bl	c9e2 <strlen>
    6d0e:	0004      	movs	r4, r0
            if (cr->link) {
    6d10:	68b0      	ldr	r0, [r6, #8]
            len = strlen(cr->path) + 4;         /* adding </ > , */
    6d12:	1d23      	adds	r3, r4, #4
            if (cr->link) {
    6d14:	2800      	cmp	r0, #0
    6d16:	d003      	beq.n	6d20 <_ZL11crwellknownP12coap_msg_ctxS0_+0x7c>
                len += strlen(cr->link) + 1;    /* ; */
    6d18:	f005 fe63 	bl	c9e2 <strlen>
    6d1c:	3405      	adds	r4, #5
    6d1e:	1823      	adds	r3, r4, r0
    6d20:	9301      	str	r3, [sp, #4]
            ls = (char*) m_append(rsp->msg, len);
    6d22:	466b      	mov	r3, sp
    6d24:	6d28      	ldr	r0, [r5, #80]	; 0x50
    6d26:	2104      	movs	r1, #4
    6d28:	5e59      	ldrsh	r1, [r3, r1]
    6d2a:	f000 fae9 	bl	7300 <_Z8m_appendP4mbufs>
    6d2e:	1e04      	subs	r4, r0, #0
            if (!ls) {
    6d30:	d107      	bne.n	6d42 <_ZL11crwellknownP12coap_msg_ctxS0_+0x9e>
                coap_stats.no_mbufs++;
    6d32:	4a25      	ldr	r2, [pc, #148]	; (6dc8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x124>)
    6d34:	6813      	ldr	r3, [r2, #0]
    6d36:	3301      	adds	r3, #1
    6d38:	6013      	str	r3, [r2, #0]
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    6d3a:	23a0      	movs	r3, #160	; 0xa0
            rsp->code = COAP_RSP_404_NOT_FOUND;
    6d3c:	70ab      	strb	r3, [r5, #2]
            return ERR_FAIL;
    6d3e:	2063      	movs	r0, #99	; 0x63
    6d40:	e035      	b.n	6dae <_ZL11crwellknownP12coap_msg_ctxS0_+0x10a>
            memcpy(ls, "</", n);
    6d42:	2202      	movs	r2, #2
    6d44:	4921      	ldr	r1, [pc, #132]	; (6dcc <_ZL11crwellknownP12coap_msg_ctxS0_+0x128>)
    6d46:	f004 fd24 	bl	b792 <memcpy>
            m = strlen(cr->path);
    6d4a:	6837      	ldr	r7, [r6, #0]
    6d4c:	0038      	movs	r0, r7
    6d4e:	f005 fe48 	bl	c9e2 <strlen>
    6d52:	9002      	str	r0, [sp, #8]
            memcpy(&(ls[n]), cr->path, m);
    6d54:	9a02      	ldr	r2, [sp, #8]
    6d56:	1ca0      	adds	r0, r4, #2
    6d58:	0039      	movs	r1, r7
    6d5a:	f004 fd1a 	bl	b792 <memcpy>
            ls[n++] = '>';
    6d5e:	223e      	movs	r2, #62	; 0x3e
    6d60:	9b02      	ldr	r3, [sp, #8]
    6d62:	18e3      	adds	r3, r4, r3
    6d64:	709a      	strb	r2, [r3, #2]
            if (cr->link) {
    6d66:	68b2      	ldr	r2, [r6, #8]
    6d68:	2a00      	cmp	r2, #0
    6d6a:	d00c      	beq.n	6d86 <_ZL11crwellknownP12coap_msg_ctxS0_+0xe2>
                ls[n++] = ';';
    6d6c:	223b      	movs	r2, #59	; 0x3b
    6d6e:	70da      	strb	r2, [r3, #3]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    6d70:	68b7      	ldr	r7, [r6, #8]
    6d72:	0038      	movs	r0, r7
    6d74:	f005 fe35 	bl	c9e2 <strlen>
    6d78:	0002      	movs	r2, r0
                ls[n++] = ';';
    6d7a:	9802      	ldr	r0, [sp, #8]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    6d7c:	0039      	movs	r1, r7
                ls[n++] = ';';
    6d7e:	3004      	adds	r0, #4
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    6d80:	1820      	adds	r0, r4, r0
    6d82:	f004 fd06 	bl	b792 <memcpy>
            ls[len-1] = ',';
    6d86:	9b01      	ldr	r3, [sp, #4]
    6d88:	360c      	adds	r6, #12
    6d8a:	18e4      	adds	r4, r4, r3
    6d8c:	232c      	movs	r3, #44	; 0x2c
    6d8e:	3c01      	subs	r4, #1
    6d90:	7023      	strb	r3, [r4, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    6d92:	3319      	adds	r3, #25
    6d94:	70ab      	strb	r3, [r5, #2]
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    6d96:	9b00      	ldr	r3, [sp, #0]
    6d98:	3301      	adds	r3, #1
    6d9a:	9300      	str	r3, [sp, #0]
    6d9c:	e7b0      	b.n	6d00 <_ZL11crwellknownP12coap_msg_ctxS0_+0x5c>
        rsp->cf = COAP_CF_APPLICATION_LINK_FORMAT; /* application/link-format */
    6d9e:	002b      	movs	r3, r5
    6da0:	2228      	movs	r2, #40	; 0x28
    6da2:	333c      	adds	r3, #60	; 0x3c
    6da4:	701a      	strb	r2, [r3, #0]
        rsp->plen = rsp->msg->m_pktlen;
    6da6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    6da8:	881b      	ldrh	r3, [r3, #0]
    6daa:	642b      	str	r3, [r5, #64]	; 0x40
    return ERR_OK;
    6dac:	2000      	movs	r0, #0
}
    6dae:	b007      	add	sp, #28
    6db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    6db2:	22a1      	movs	r2, #161	; 0xa1
    6db4:	708a      	strb	r2, [r1, #2]
    6db6:	e7f9      	b.n	6dac <_ZL11crwellknownP12coap_msg_ctxS0_+0x108>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    6db8:	2384      	movs	r3, #132	; 0x84
    6dba:	e7bf      	b.n	6d3c <_ZL11crwellknownP12coap_msg_ctxS0_+0x98>
    6dbc:	20001844 	.word	0x20001844
    6dc0:	0001044f 	.word	0x0001044f
    6dc4:	20001848 	.word	0x20001848
    6dc8:	20001878 	.word	0x20001878
    6dcc:	00010454 	.word	0x00010454

00006dd0 <_ZL7crtitleP12coap_msg_ctxS0_>:
{
    6dd0:	b530      	push	{r4, r5, lr}
    if (req->code == COAP_REQUEST_GET)
    6dd2:	7883      	ldrb	r3, [r0, #2]
{
    6dd4:	b091      	sub	sp, #68	; 0x44
    6dd6:	000c      	movs	r4, r1
    if (req->code == COAP_REQUEST_GET)
    6dd8:	2b01      	cmp	r3, #1
    6dda:	d12b      	bne.n	6e34 <_ZL7crtitleP12coap_msg_ctxS0_+0x64>
		strcpy(id, COAP_SERVER_VERSION_STRING);
    6ddc:	4916      	ldr	r1, [pc, #88]	; (6e38 <_ZL7crtitleP12coap_msg_ctxS0_+0x68>)
    6dde:	4668      	mov	r0, sp
    6de0:	f005 fdf7 	bl	c9d2 <strcpy>
		strcat(id, COAP_SERVER_VERSION_NUMBER);
    6de4:	4915      	ldr	r1, [pc, #84]	; (6e3c <_ZL7crtitleP12coap_msg_ctxS0_+0x6c>)
    6de6:	4668      	mov	r0, sp
    6de8:	f005 fddc 	bl	c9a4 <strcat>
        d = (char*) m_append(rsp->msg, strlen(id));
    6dec:	4668      	mov	r0, sp
    6dee:	f005 fdf8 	bl	c9e2 <strlen>
    6df2:	b201      	sxth	r1, r0
    6df4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6df6:	f000 fa83 	bl	7300 <_Z8m_appendP4mbufs>
    6dfa:	1e05      	subs	r5, r0, #0
        if (!d)
    6dfc:	d108      	bne.n	6e10 <_ZL7crtitleP12coap_msg_ctxS0_+0x40>
            coap_stats.no_mbufs++;
    6dfe:	4a10      	ldr	r2, [pc, #64]	; (6e40 <_ZL7crtitleP12coap_msg_ctxS0_+0x70>)
    6e00:	6813      	ldr	r3, [r2, #0]
    6e02:	3301      	adds	r3, #1
    6e04:	6013      	str	r3, [r2, #0]
            rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    6e06:	23a0      	movs	r3, #160	; 0xa0
}
    6e08:	2000      	movs	r0, #0
        rsp->code = COAP_RSP_403_FORBIDDEN;
    6e0a:	70a3      	strb	r3, [r4, #2]
}
    6e0c:	b011      	add	sp, #68	; 0x44
    6e0e:	bd30      	pop	{r4, r5, pc}
            memcpy(d, id, strlen(id));
    6e10:	4668      	mov	r0, sp
    6e12:	f005 fde6 	bl	c9e2 <strlen>
    6e16:	4669      	mov	r1, sp
    6e18:	0002      	movs	r2, r0
    6e1a:	0028      	movs	r0, r5
    6e1c:	f004 fcb9 	bl	b792 <memcpy>
            rsp->plen = strlen(id);
    6e20:	4668      	mov	r0, sp
    6e22:	f005 fdde 	bl	c9e2 <strlen>
            rsp->cf = COAP_CF_TEXT_PLAIN;
    6e26:	0023      	movs	r3, r4
    6e28:	2200      	movs	r2, #0
    6e2a:	333c      	adds	r3, #60	; 0x3c
            rsp->plen = strlen(id);
    6e2c:	6420      	str	r0, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_TEXT_PLAIN;
    6e2e:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    6e30:	2345      	movs	r3, #69	; 0x45
    6e32:	e7e9      	b.n	6e08 <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
        rsp->code = COAP_RSP_403_FORBIDDEN;
    6e34:	2383      	movs	r3, #131	; 0x83
    6e36:	e7e7      	b.n	6e08 <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
    6e38:	0000fafb 	.word	0x0000fafb
    6e3c:	0000fb19 	.word	0x0000fb19
    6e40:	20001878 	.word	0x20001878

00006e44 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>:
        return ERR_NO_MEM;
    6e44:	2303      	movs	r3, #3
{
    6e46:	b530      	push	{r4, r5, lr}
    if (coap_reg_size < COAP_MAX_CBR)
    6e48:	4c07      	ldr	r4, [pc, #28]	; (6e68 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x24>)
    6e4a:	6825      	ldr	r5, [r4, #0]
    6e4c:	429d      	cmp	r5, r3
    6e4e:	dc09      	bgt.n	6e64 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x20>
        idx = coap_reg_size++;    
    6e50:	1c6b      	adds	r3, r5, #1
    6e52:	6023      	str	r3, [r4, #0]
    coap_registry[idx].path = path;
    6e54:	240c      	movs	r4, #12
    6e56:	436c      	muls	r4, r5
    6e58:	4b04      	ldr	r3, [pc, #16]	; (6e6c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x28>)
    6e5a:	50e0      	str	r0, [r4, r3]
    coap_registry[idx].cb = cbfunc;
    6e5c:	191b      	adds	r3, r3, r4
    6e5e:	6059      	str	r1, [r3, #4]
    coap_registry[idx].link = corelink;
    6e60:	609a      	str	r2, [r3, #8]
    return ERR_OK;
    6e62:	2300      	movs	r3, #0
}
    6e64:	0018      	movs	r0, r3
    6e66:	bd30      	pop	{r4, r5, pc}
    6e68:	20001844 	.word	0x20001844
    6e6c:	20001848 	.word	0x20001848

00006e70 <_Z18coap_registry_initv>:
{
    6e70:	b510      	push	{r4, lr}
	coap_reg_size = 0;
    6e72:	2400      	movs	r4, #0
    6e74:	4b0d      	ldr	r3, [pc, #52]	; (6eac <_Z18coap_registry_initv+0x3c>)
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    6e76:	4a0e      	ldr	r2, [pc, #56]	; (6eb0 <_Z18coap_registry_initv+0x40>)
    6e78:	490e      	ldr	r1, [pc, #56]	; (6eb4 <_Z18coap_registry_initv+0x44>)
    6e7a:	480f      	ldr	r0, [pc, #60]	; (6eb8 <_Z18coap_registry_initv+0x48>)
	coap_reg_size = 0;
    6e7c:	601c      	str	r4, [r3, #0]
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    6e7e:	f7ff ffe1 	bl	6e44 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(".well-known", crwellknown, NULL);
    6e82:	0022      	movs	r2, r4
    6e84:	490d      	ldr	r1, [pc, #52]	; (6ebc <_Z18coap_registry_initv+0x4c>)
    6e86:	480e      	ldr	r0, [pc, #56]	; (6ec0 <_Z18coap_registry_initv+0x50>)
    6e88:	f7ff ffdc 	bl	6e44 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(S_URI_SYSTEM, crsystem, CLA_SYSTEM);
    6e8c:	4a0d      	ldr	r2, [pc, #52]	; (6ec4 <_Z18coap_registry_initv+0x54>)
    6e8e:	490e      	ldr	r1, [pc, #56]	; (6ec8 <_Z18coap_registry_initv+0x58>)
    6e90:	480e      	ldr	r0, [pc, #56]	; (6ecc <_Z18coap_registry_initv+0x5c>)
    6e92:	f7ff ffd7 	bl	6e44 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
	if (is_sapi == 1)
    6e96:	4b0e      	ldr	r3, [pc, #56]	; (6ed0 <_Z18coap_registry_initv+0x60>)
    6e98:	4a0e      	ldr	r2, [pc, #56]	; (6ed4 <_Z18coap_registry_initv+0x64>)
    6e9a:	781b      	ldrb	r3, [r3, #0]
    6e9c:	480e      	ldr	r0, [pc, #56]	; (6ed8 <_Z18coap_registry_initv+0x68>)
		(void)coap_uri_register(classifier, crsapi, CLA_ARDUINO);
    6e9e:	490f      	ldr	r1, [pc, #60]	; (6edc <_Z18coap_registry_initv+0x6c>)
	if (is_sapi == 1)
    6ea0:	2b01      	cmp	r3, #1
    6ea2:	d000      	beq.n	6ea6 <_Z18coap_registry_initv+0x36>
		(void)coap_uri_register(classifier, crarduino, CLA_ARDUINO);
    6ea4:	490e      	ldr	r1, [pc, #56]	; (6ee0 <_Z18coap_registry_initv+0x70>)
    6ea6:	f7ff ffcd 	bl	6e44 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
}
    6eaa:	bd10      	pop	{r4, pc}
    6eac:	20001844 	.word	0x20001844
    6eb0:	000103dc 	.word	0x000103dc
    6eb4:	00006dd1 	.word	0x00006dd1
    6eb8:	0000fd92 	.word	0x0000fd92
    6ebc:	00006ca5 	.word	0x00006ca5
    6ec0:	000103ee 	.word	0x000103ee
    6ec4:	000103fa 	.word	0x000103fa
    6ec8:	00006a31 	.word	0x00006a31
    6ecc:	0001041f 	.word	0x0001041f
    6ed0:	20000048 	.word	0x20000048
    6ed4:	00010423 	.word	0x00010423
    6ed8:	200000a0 	.word	0x200000a0
    6edc:	000047cd 	.word	0x000047cd
    6ee0:	0000487d 	.word	0x0000487d

00006ee4 <_Z15coap_s_uri_procP12coap_msg_ctxS0_>:
{
    6ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, NULL)) == NULL) 
    6ee6:	2200      	movs	r2, #0
{
    6ee8:	0006      	movs	r6, r0
    6eea:	000c      	movs	r4, r1
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, NULL)) == NULL) 
    6eec:	304c      	adds	r0, #76	; 0x4c
    6eee:	210b      	movs	r1, #11
    6ef0:	f7ff fbac 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    6ef4:	1e07      	subs	r7, r0, #0
    6ef6:	d010      	beq.n	6f1a <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x36>
    6ef8:	2500      	movs	r5, #0
            if (!coap_opt_strcmp(op, coap_registry[i].path)) 
    6efa:	230c      	movs	r3, #12
    6efc:	436b      	muls	r3, r5
    6efe:	4a1a      	ldr	r2, [pc, #104]	; (6f68 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x84>)
    6f00:	0038      	movs	r0, r7
    6f02:	58d1      	ldr	r1, [r2, r3]
    6f04:	f7fe fe78 	bl	5bf8 <_Z15coap_opt_strcmpPK5optlvPKc>
    6f08:	2800      	cmp	r0, #0
    6f0a:	d007      	beq.n	6f1c <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x38>
        for (i = 0; i < rs; i++) 
    6f0c:	3501      	adds	r5, #1
    6f0e:	2d04      	cmp	r5, #4
    6f10:	d1f3      	bne.n	6efa <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x16>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    6f12:	2384      	movs	r3, #132	; 0x84
    6f14:	e00d      	b.n	6f32 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x4e>
        rsp->type = COAP_T_NCONF_VAL;
    6f16:	2301      	movs	r3, #1
    6f18:	e023      	b.n	6f62 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x7e>
        i = 0;
    6f1a:	0005      	movs	r5, r0
    rc = coap_registry[i].cb(req, rsp);
    6f1c:	230c      	movs	r3, #12
    6f1e:	435d      	muls	r5, r3
    6f20:	4b11      	ldr	r3, [pc, #68]	; (6f68 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x84>)
    6f22:	0021      	movs	r1, r4
    6f24:	195d      	adds	r5, r3, r5
    6f26:	686b      	ldr	r3, [r5, #4]
    6f28:	0030      	movs	r0, r6
    6f2a:	4798      	blx	r3
    if (rc != ERR_OK) 
    6f2c:	2800      	cmp	r0, #0
    6f2e:	d001      	beq.n	6f34 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x50>
        rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    6f30:	23a0      	movs	r3, #160	; 0xa0
    6f32:	70a3      	strb	r3, [r4, #2]
    op = copt_get_next_opt_type((const sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE, NULL);
    6f34:	0025      	movs	r5, r4
    6f36:	354c      	adds	r5, #76	; 0x4c
    6f38:	2200      	movs	r2, #0
    6f3a:	2106      	movs	r1, #6
    6f3c:	0028      	movs	r0, r5
    6f3e:	f7ff fb85 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if ((COAP_CLASS(rsp->code) != 2) || (op == NULL)) 
    6f42:	78a3      	ldrb	r3, [r4, #2]
    6f44:	095b      	lsrs	r3, r3, #5
    6f46:	2b02      	cmp	r3, #2
    6f48:	d101      	bne.n	6f4e <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x6a>
    6f4a:	2800      	cmp	r0, #0
    6f4c:	d105      	bne.n	6f5a <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x76>
        (void)copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    6f4e:	2106      	movs	r1, #6
    6f50:	0028      	movs	r0, r5
    6f52:	f7ff fba3 	bl	669c <_Z17copt_del_opt_typeP5sl_cot>
        rsp->final = 1;
    6f56:	2301      	movs	r3, #1
    6f58:	64a3      	str	r3, [r4, #72]	; 0x48
    if (req->type == COAP_T_CONF_VAL) 
    6f5a:	7833      	ldrb	r3, [r6, #0]
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d1da      	bne.n	6f16 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x32>
        rsp->type = COAP_T_ACK_VAL;
    6f60:	3302      	adds	r3, #2
}
    6f62:	2000      	movs	r0, #0
        rsp->type = COAP_T_NCONF_VAL;
    6f64:	7023      	strb	r3, [r4, #0]
}
    6f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f68:	20001848 	.word	0x20001848

00006f6c <_Z24coap_put_ic_reboot_eventv>:
 *
 * Given that there are HDLC retries, we're not going to attempt CoAP retries.
 * Could be added later if required.
 */
error_t coap_put_ic_reboot_event(void)
{
    6f6c:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *req;
	uint8_t     *ptr;

	/* Allocate request buffer */
	MGETHDR(req);
    6f6e:	f000 f96b 	bl	7248 <_Z5m_getv>
    6f72:	1e04      	subs	r4, r0, #0
	if (!req) 
    6f74:	d105      	bne.n	6f82 <_Z24coap_put_ic_reboot_eventv+0x16>
	{
		coap_stats.no_mbufs++;
		return ERR_NO_MEM;
    6f76:	2003      	movs	r0, #3
		coap_stats.no_mbufs++;
    6f78:	4a11      	ldr	r2, [pc, #68]	; (6fc0 <_Z24coap_put_ic_reboot_eventv+0x54>)
    6f7a:	6813      	ldr	r3, [r2, #0]
    6f7c:	3301      	adds	r3, #1
    6f7e:	6013      	str	r3, [r2, #0]
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
	delay(1);
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);

	return ERR_OK;
    6f80:	bd70      	pop	{r4, r5, r6, pc}
	ptr = (uint8_t *)m_append(req, sizeof(rbtput));
    6f82:	2114      	movs	r1, #20
    6f84:	f000 f9bc 	bl	7300 <_Z8m_appendP4mbufs>
	memcpy(ptr, rbtput, sizeof(rbtput));
    6f88:	2214      	movs	r2, #20
    6f8a:	490e      	ldr	r1, [pc, #56]	; (6fc4 <_Z24coap_put_ic_reboot_eventv+0x58>)
    6f8c:	f004 fc01 	bl	b792 <memcpy>
	if (pending_rsp)
    6f90:	4d0d      	ldr	r5, [pc, #52]	; (6fc8 <_Z24coap_put_ic_reboot_eventv+0x5c>)
    6f92:	6828      	ldr	r0, [r5, #0]
    6f94:	2800      	cmp	r0, #0
    6f96:	d001      	beq.n	6f9c <_Z24coap_put_ic_reboot_eventv+0x30>
		m_free(pending_rsp);
    6f98:	f000 f980 	bl	729c <_Z6m_freeP4mbuf>
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    6f9c:	490b      	ldr	r1, [pc, #44]	; (6fcc <_Z24coap_put_ic_reboot_eventv+0x60>)
    6f9e:	2007      	movs	r0, #7
	pending_rsp = req;
    6fa0:	602c      	str	r4, [r5, #0]
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    6fa2:	f7fd f939 	bl	4218 <_Z4dlogiPKcz>
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
    6fa6:	2100      	movs	r1, #0
    6fa8:	2009      	movs	r0, #9
    6faa:	f7fc fd91 	bl	3ad0 <digitalWrite>
	delay(1);
    6fae:	2001      	movs	r0, #1
    6fb0:	f7fb fb8e 	bl	26d0 <delay>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    6fb4:	2009      	movs	r0, #9
    6fb6:	2101      	movs	r1, #1
    6fb8:	f7fc fd8a 	bl	3ad0 <digitalWrite>
	return ERR_OK;
    6fbc:	2000      	movs	r0, #0
    6fbe:	e7df      	b.n	6f80 <_Z24coap_put_ic_reboot_eventv+0x14>
    6fc0:	20001878 	.word	0x20001878
    6fc4:	00010510 	.word	0x00010510
    6fc8:	20001840 	.word	0x20001840
    6fcc:	000104f4 	.word	0x000104f4

00006fd0 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>:
 */


// CoAP Server initialization
void coap_s_init(HardwareSerial *pSerial, uint32_t max_age, uint32_t uart_timeout_ms, uint32_t max_hdlc_payload_size, const char *uri_rsrc_name, ObsFuncPtr pObsFuncPtr)
{
    6fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fd2:	000f      	movs	r7, r1
    6fd4:	0015      	movs	r5, r2
    6fd6:	001e      	movs	r6, r3
    6fd8:	0004      	movs	r4, r0
	int res;
	
	// Initialize CoAP Server registry
	coap_registry_init();
    6fda:	f7ff ff49 	bl	6e70 <_Z18coap_registry_initv>

	// Set Max-Age: CoAP Server Response Option 14
	coap_set_max_age(max_age);
    6fde:	0038      	movs	r0, r7
    6fe0:	f7ff f99a 	bl	6318 <_Z16coap_set_max_agem>
	
	// Set the URI used for obtaining token etc in CoAP Observe response msg
	set_observer(uri_rsrc_name, pObsFuncPtr);
    6fe4:	9907      	ldr	r1, [sp, #28]
    6fe6:	9806      	ldr	r0, [sp, #24]
    6fe8:	f7ff fbbe 	bl	6768 <_Z12set_observerPKcPF7error_eP4mbufPhhE>

	// Open the HDLC connection
	res = hdlcs_open(pSerial, uart_timeout_ms, max_hdlc_payload_size);
    6fec:	0032      	movs	r2, r6
    6fee:	0029      	movs	r1, r5
    6ff0:	0020      	movs	r0, r4
    6ff2:	f000 f9eb 	bl	73cc <_Z10hdlcs_openP14HardwareSerialmm>
	if (res) 
    6ff6:	2800      	cmp	r0, #0
    6ff8:	d003      	beq.n	7002 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x32>
	{
		dlog(LOG_ERR, "HDLC initialization failed!");
    6ffa:	4902      	ldr	r1, [pc, #8]	; (7004 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x34>)
    6ffc:	2003      	movs	r0, #3
    6ffe:	f7fd f90b 	bl	4218 <_Z4dlogiPKcz>
	}
	
	// That's all folks!
} // coap_s_init()
    7002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7004:	00010579 	.word	0x00010579

00007008 <_Z11coap_s_procP4mbuf>:
 * Build a response PDU based on the RSP context, and return the mbuf.
 */
mbuf_ptr_t coap_s_proc( mbuf_ptr_t m )
{
    struct coap_msg_ctx cc, rcc;
    void *clt = NULL;   /* Not used on sensor, 1 HDLC connection. */
    7008:	2300      	movs	r3, #0
{
    700a:	b5f0      	push	{r4, r5, r6, r7, lr}
    700c:	b0b1      	sub	sp, #196	; 0xc4
    700e:	9003      	str	r0, [sp, #12]
    void *clt = NULL;   /* Not used on sensor, 1 HDLC connection. */
    7010:	9305      	str	r3, [sp, #20]
    uint8_t code;
    char *pstr;
    
    /* Allocate response buffer */
    struct mbuf *r = NULL;
    r = m_get();
    7012:	f000 f919 	bl	7248 <_Z5m_getv>
    7016:	1e06      	subs	r6, r0, #0
    if (r == NULL)
    7018:	d029      	beq.n	706e <_Z11coap_s_procP4mbuf+0x66>
    {
	    goto done;
    }

    /* Parse incoming message */
    memset(&cc, 0, sizeof(cc));
    701a:	ac06      	add	r4, sp, #24
    701c:	2254      	movs	r2, #84	; 0x54
    701e:	2100      	movs	r1, #0
    7020:	0020      	movs	r0, r4
    7022:	f004 fbd1 	bl	b7c8 <memset>
    copt_init((sl_co*)&(cc.oh));
    memset(&rcc, 0, sizeof(rcc));
    7026:	ad1b      	add	r5, sp, #108	; 0x6c
    copt_init((sl_co*)&(cc.oh));
    7028:	a819      	add	r0, sp, #100	; 0x64
    702a:	f7ff fa99 	bl	6560 <_Z9copt_initP5sl_co>
    memset(&rcc, 0, sizeof(rcc));
    702e:	2254      	movs	r2, #84	; 0x54
    7030:	2100      	movs	r1, #0
    7032:	0028      	movs	r0, r5
    7034:	f004 fbc8 	bl	b7c8 <memset>
    copt_init((sl_co*)&(rcc.oh));
    7038:	a82e      	add	r0, sp, #184	; 0xb8
    703a:	f7ff fa91 	bl	6560 <_Z9copt_initP5sl_co>
    rc = coap_msg_parse(&cc, m, &code);
    703e:	230b      	movs	r3, #11
    7040:	aa02      	add	r2, sp, #8
    7042:	189b      	adds	r3, r3, r2
    7044:	001a      	movs	r2, r3
    7046:	9903      	ldr	r1, [sp, #12]
    7048:	0020      	movs	r0, r4
    704a:	f7fe ff89 	bl	5f60 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh>
    704e:	1e07      	subs	r7, r0, #0

    if (rc == ERR_OK)
    7050:	d000      	beq.n	7054 <_Z11coap_s_procP4mbuf+0x4c>
    7052:	e07b      	b.n	714c <_Z11coap_s_procP4mbuf+0x144>
	{
        if (cc.type == COAP_T_ACK_VAL)
    7054:	7823      	ldrb	r3, [r4, #0]
    7056:	2b02      	cmp	r3, #2
    7058:	d11f      	bne.n	709a <_Z11coap_s_procP4mbuf+0x92>
		{
            /*
             * TODO: Assuming it's not a piggy-backed ACK for now.
             */
            rc = coap_ack_rx(cc.mid, NULL);
    705a:	0039      	movs	r1, r7
    705c:	88a0      	ldrh	r0, [r4, #4]
    705e:	f7fe fda9 	bl	5bb4 <_Z11coap_ack_rxtP4mbuf>
            dlog(LOG_INFO, "ACK for mid: 0x%x received, lookup returned %d", cc.mid, rc);
    7062:	88a2      	ldrh	r2, [r4, #4]
            rc = coap_ack_rx(cc.mid, NULL);
    7064:	0003      	movs	r3, r0
            dlog(LOG_INFO, "ACK for mid: 0x%x received, lookup returned %d", cc.mid, rc);
    7066:	4953      	ldr	r1, [pc, #332]	; (71b4 <_Z11coap_s_procP4mbuf+0x1ac>)
    7068:	2006      	movs	r0, #6
    706a:	f7fd f8d5 	bl	4218 <_Z4dlogiPKcz>
			goto done;
        }
    }

done:
    if (cc.msg)
    706e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7070:	9303      	str	r3, [sp, #12]
    7072:	2b00      	cmp	r3, #0
    7074:	d008      	beq.n	7088 <_Z11coap_s_procP4mbuf+0x80>
	{
		dlog(LOG_DEBUG, "coap_s_proc: Free cc mbuf");
    7076:	4950      	ldr	r1, [pc, #320]	; (71b8 <_Z11coap_s_procP4mbuf+0x1b0>)
    7078:	2007      	movs	r0, #7
    707a:	f7fd f8cd 	bl	4218 <_Z4dlogiPKcz>
        m_free(cc.msg);
    707e:	981a      	ldr	r0, [sp, #104]	; 0x68
    7080:	f000 f90c 	bl	729c <_Z6m_freeP4mbuf>
        cc.msg = NULL;
    7084:	2300      	movs	r3, #0
    7086:	931a      	str	r3, [sp, #104]	; 0x68
    }
    copt_del_all((sl_co*)&(cc.oh));
    7088:	a819      	add	r0, sp, #100	; 0x64
    708a:	f7ff fa7b 	bl	6584 <_Z12copt_del_allP5sl_co>
    copt_del_all((sl_co*)&(rcc.oh));
    708e:	a82e      	add	r0, sp, #184	; 0xb8
    7090:	f7ff fa78 	bl	6584 <_Z12copt_del_allP5sl_co>
    return r;
	
}
    7094:	0030      	movs	r0, r6
    7096:	b031      	add	sp, #196	; 0xc4
    7098:	bdf0      	pop	{r4, r5, r6, r7, pc}
        coap_init_rsp(&cc, &rcc, r);
    709a:	0032      	movs	r2, r6
    709c:	0029      	movs	r1, r5
    709e:	0020      	movs	r0, r4
    70a0:	f7ff f820 	bl	60e4 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>
        if (cc.code == COAP_EMPTY_MESSAGE)
    70a4:	78a3      	ldrb	r3, [r4, #2]
    70a6:	2b00      	cmp	r3, #0
    70a8:	d128      	bne.n	70fc <_Z11coap_s_procP4mbuf+0xf4>
            rcc.plen = 0;
    70aa:	642b      	str	r3, [r5, #64]	; 0x40
            if (cc.type == COAP_T_CONF_VAL)
    70ac:	7823      	ldrb	r3, [r4, #0]
    70ae:	2b00      	cmp	r3, #0
    70b0:	d101      	bne.n	70b6 <_Z11coap_s_procP4mbuf+0xae>
                rcc.type = COAP_T_RESET_VAL;
    70b2:	3303      	adds	r3, #3
    70b4:	702b      	strb	r3, [r5, #0]
        pstr = coap_pathstr(&cc);
    70b6:	0020      	movs	r0, r4
    70b8:	f7fe fdb0 	bl	5c1c <_Z12coap_pathstrPK12coap_msg_ctx>
        if (!rcc.final && copt_get_next_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE, NULL))
    70bc:	6caa      	ldr	r2, [r5, #72]	; 0x48
        pstr = coap_pathstr(&cc);
    70be:	0007      	movs	r7, r0
        if (!rcc.final && copt_get_next_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE, NULL))
    70c0:	2a00      	cmp	r2, #0
    70c2:	d105      	bne.n	70d0 <_Z11coap_s_procP4mbuf+0xc8>
    70c4:	2106      	movs	r1, #6
    70c6:	a82e      	add	r0, sp, #184	; 0xb8
    70c8:	f7ff fac0 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    70cc:	2800      	cmp	r0, #0
    70ce:	d15f      	bne.n	7190 <_Z11coap_s_procP4mbuf+0x188>
        } else if ((op = copt_get_next_opt_type((sl_co*)&(cc.oh), COAP_OPTION_OBSERVE, NULL)) && 
    70d0:	2200      	movs	r2, #0
    70d2:	2106      	movs	r1, #6
    70d4:	a819      	add	r0, sp, #100	; 0x64
    70d6:	f7ff fab9 	bl	664c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    70da:	2800      	cmp	r0, #0
    70dc:	d023      	beq.n	7126 <_Z11coap_s_procP4mbuf+0x11e>
				   (co_uint32_n2h(op) == COAP_OBS_DEREG))
    70de:	f7fe fec1 	bl	5e64 <_Z13co_uint32_n2hPK5optlv>
        } else if ((op = copt_get_next_opt_type((sl_co*)&(cc.oh), COAP_OPTION_OBSERVE, NULL)) && 
    70e2:	2801      	cmp	r0, #1
    70e4:	d11f      	bne.n	7126 <_Z11coap_s_procP4mbuf+0x11e>
            if (disable_obs(pstr, &cc, &clt, 0) == ERR_OK)
    70e6:	2300      	movs	r3, #0
    70e8:	aa05      	add	r2, sp, #20
    70ea:	0021      	movs	r1, r4
    70ec:	0038      	movs	r0, r7
    70ee:	f7ff f9e9 	bl	64c4 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>
    70f2:	2800      	cmp	r0, #0
    70f4:	d117      	bne.n	7126 <_Z11coap_s_procP4mbuf+0x11e>
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    70f6:	003a      	movs	r2, r7
    70f8:	4930      	ldr	r1, [pc, #192]	; (71bc <_Z11coap_s_procP4mbuf+0x1b4>)
    70fa:	e058      	b.n	71ae <_Z11coap_s_procP4mbuf+0x1a6>
            if (coap_s_uri_proc(&cc, &rcc) != ERR_OK)
    70fc:	0029      	movs	r1, r5
    70fe:	0020      	movs	r0, r4
    7100:	f7ff fef0 	bl	6ee4 <_Z15coap_s_uri_procP12coap_msg_ctxS0_>
    7104:	2800      	cmp	r0, #0
    7106:	d0d6      	beq.n	70b6 <_Z11coap_s_procP4mbuf+0xae>
                rcc.code = COAP_RSP_500_INTERNAL_ERROR;
    7108:	23a0      	movs	r3, #160	; 0xa0
                rcc.plen = 0;
    710a:	642f      	str	r7, [r5, #64]	; 0x40
                rcc.code = COAP_RSP_500_INTERNAL_ERROR;
    710c:	70ab      	strb	r3, [r5, #2]
    710e:	e7d2      	b.n	70b6 <_Z11coap_s_procP4mbuf+0xae>
                (void)copt_del_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE);
    7110:	2106      	movs	r1, #6
    7112:	a82e      	add	r0, sp, #184	; 0xb8
    7114:	f7ff fac2 	bl	669c <_Z17copt_del_opt_typeP5sl_cot>
                rcc.final = 1;
    7118:	2301      	movs	r3, #1
                dlog(LOG_ERR, "Failed to enabled observe for URI: %s", pstr);
    711a:	003a      	movs	r2, r7
    711c:	2003      	movs	r0, #3
    711e:	4928      	ldr	r1, [pc, #160]	; (71c0 <_Z11coap_s_procP4mbuf+0x1b8>)
                rcc.final = 1;
    7120:	64ab      	str	r3, [r5, #72]	; 0x48
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    7122:	f7fd f879 	bl	4218 <_Z4dlogiPKcz>
        if (coap_msg_response(&rcc) != ERR_OK)
    7126:	a81b      	add	r0, sp, #108	; 0x6c
    7128:	f7ff f81c 	bl	6164 <_Z17coap_msg_responseP12coap_msg_ctx>
    712c:	2800      	cmp	r0, #0
    712e:	d001      	beq.n	7134 <_Z11coap_s_procP4mbuf+0x12c>
				dlog(LOG_DEBUG, "Error msg rsp: freeing mbuf");
    7130:	4924      	ldr	r1, [pc, #144]	; (71c4 <_Z11coap_s_procP4mbuf+0x1bc>)
    7132:	e003      	b.n	713c <_Z11coap_s_procP4mbuf+0x134>
        if(r->m_pktlen == 0)
    7134:	8834      	ldrh	r4, [r6, #0]
	        dlog(LOG_DEBUG, "No rsp: freeing mbuf");
    7136:	4924      	ldr	r1, [pc, #144]	; (71c8 <_Z11coap_s_procP4mbuf+0x1c0>)
        if(r->m_pktlen == 0)
    7138:	2c00      	cmp	r4, #0
    713a:	d198      	bne.n	706e <_Z11coap_s_procP4mbuf+0x66>
				dlog(LOG_DEBUG, "Error msg rsp: freeing mbuf");
    713c:	2007      	movs	r0, #7
    713e:	f7fd f86b 	bl	4218 <_Z4dlogiPKcz>
				m_free(r);
    7142:	0030      	movs	r0, r6
    7144:	f000 f8aa 	bl	729c <_Z6m_freeP4mbuf>
				r = NULL;
    7148:	2600      	movs	r6, #0
    714a:	e790      	b.n	706e <_Z11coap_s_procP4mbuf+0x66>
			dlog(LOG_DEBUG, "Parse error: freeing mbuf");
    714c:	491f      	ldr	r1, [pc, #124]	; (71cc <_Z11coap_s_procP4mbuf+0x1c4>)
	else if (rc == ERR_VER_NOT_SUPP)
    714e:	281d      	cmp	r0, #29
    7150:	d0f4      	beq.n	713c <_Z11coap_s_procP4mbuf+0x134>
        dlog(LOG_ERR, "Error: rc/h->len: %d/%d, cc.code: %d", rc, m->m_pktlen, cc.code);
    7152:	78a2      	ldrb	r2, [r4, #2]
    7154:	9b03      	ldr	r3, [sp, #12]
    7156:	491e      	ldr	r1, [pc, #120]	; (71d0 <_Z11coap_s_procP4mbuf+0x1c8>)
    7158:	881b      	ldrh	r3, [r3, #0]
    715a:	9200      	str	r2, [sp, #0]
    715c:	0002      	movs	r2, r0
    715e:	2003      	movs	r0, #3
    7160:	f7fd f85a 	bl	4218 <_Z4dlogiPKcz>
        coap_init_rsp(&cc, &rcc, r);
    7164:	0032      	movs	r2, r6
    7166:	0029      	movs	r1, r5
    7168:	0020      	movs	r0, r4
    716a:	f7fe ffbb 	bl	60e4 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>
        if (cc.type == COAP_T_CONF_VAL)
    716e:	7823      	ldrb	r3, [r4, #0]
    7170:	2b00      	cmp	r3, #0
    7172:	d10b      	bne.n	718c <_Z11coap_s_procP4mbuf+0x184>
            rcc.type = COAP_T_ACK_VAL;
    7174:	3302      	adds	r3, #2
            rcc.type = COAP_T_NCONF_VAL;
    7176:	702b      	strb	r3, [r5, #0]
        rcc.code = code;
    7178:	ab02      	add	r3, sp, #8
    717a:	7adb      	ldrb	r3, [r3, #11]
        if (coap_msg_response(&rcc) != ERR_OK)
    717c:	0028      	movs	r0, r5
        rcc.code = code;
    717e:	70ab      	strb	r3, [r5, #2]
        if (coap_msg_response(&rcc) != ERR_OK)
    7180:	f7fe fff0 	bl	6164 <_Z17coap_msg_responseP12coap_msg_ctx>
    7184:	2800      	cmp	r0, #0
    7186:	d100      	bne.n	718a <_Z11coap_s_procP4mbuf+0x182>
    7188:	e771      	b.n	706e <_Z11coap_s_procP4mbuf+0x66>
    718a:	e7d1      	b.n	7130 <_Z11coap_s_procP4mbuf+0x128>
            rcc.type = COAP_T_NCONF_VAL;
    718c:	2301      	movs	r3, #1
    718e:	e7f2      	b.n	7176 <_Z11coap_s_procP4mbuf+0x16e>
            (void)disable_obs(pstr, &cc, &clt, 1);
    7190:	aa05      	add	r2, sp, #20
    7192:	0021      	movs	r1, r4
    7194:	2301      	movs	r3, #1
    7196:	0038      	movs	r0, r7
    7198:	f7ff f994 	bl	64c4 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>
            if (enable_obs(pstr, &cc, &clt) != ERR_OK)
    719c:	aa05      	add	r2, sp, #20
    719e:	0021      	movs	r1, r4
    71a0:	0038      	movs	r0, r7
    71a2:	f7ff f909 	bl	63b8 <_Z10enable_obsPKcP12coap_msg_ctxPv>
    71a6:	2800      	cmp	r0, #0
    71a8:	d1b2      	bne.n	7110 <_Z11coap_s_procP4mbuf+0x108>
                dlog(LOG_DEBUG, "Enabled observe for URI: %s", pstr);
    71aa:	003a      	movs	r2, r7
    71ac:	4909      	ldr	r1, [pc, #36]	; (71d4 <_Z11coap_s_procP4mbuf+0x1cc>)
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    71ae:	2007      	movs	r0, #7
    71b0:	e7b7      	b.n	7122 <_Z11coap_s_procP4mbuf+0x11a>
    71b2:	46c0      	nop			; (mov r8, r8)
    71b4:	00010595 	.word	0x00010595
    71b8:	00010692 	.word	0x00010692
    71bc:	00010606 	.word	0x00010606
    71c0:	000105c4 	.word	0x000105c4
    71c4:	00010622 	.word	0x00010622
    71c8:	0001063e 	.word	0x0001063e
    71cc:	00010653 	.word	0x00010653
    71d0:	0001066d 	.word	0x0001066d
    71d4:	000105ea 	.word	0x000105ea

000071d8 <_Z10coap_s_runv>:


// Run HDLCS and the CoAP Server 
void coap_s_run()
{
    71d8:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *appd;
	struct mbuf *arsp;
	
	/* Run the secondary-station HDLC state machine */
	hdlcs_run();
    71da:	f000 f9b9 	bl	7550 <_Z9hdlcs_runv>
	
	/* Serve incoming request, if any */
	appd = hdlcs_read();
    71de:	f000 f93b 	bl	7458 <_Z10hdlcs_readv>
    71e2:	1e05      	subs	r5, r0, #0
	if (appd) 
    71e4:	d01c      	beq.n	7220 <_Z10coap_s_runv+0x48>
	{
		/* Run the CoAP server */
		arsp = coap_s_proc(appd);
    71e6:	f7ff ff0f 	bl	7008 <_Z11coap_s_procP4mbuf>
    71ea:	1e04      	subs	r4, r0, #0
		if (arsp) 
    71ec:	d00a      	beq.n	7204 <_Z10coap_s_runv+0x2c>
		{
			// Direct send of CoAP response
			hdlcs_write(arsp->data, arsp->len);
    71ee:	8801      	ldrh	r1, [r0, #0]
    71f0:	3004      	adds	r0, #4
    71f2:	f000 f95b 	bl	74ac <_Z11hdlcs_writePKvt>
			
			// Free response mbuf
			dlog(LOG_DEBUG, "coap_s_run: freeing arsp mbuf");
    71f6:	2007      	movs	r0, #7
    71f8:	490a      	ldr	r1, [pc, #40]	; (7224 <_Z10coap_s_runv+0x4c>)
    71fa:	f7fd f80d 	bl	4218 <_Z4dlogiPKcz>
			m_free(arsp);
    71fe:	0020      	movs	r0, r4
    7200:	f000 f84c 	bl	729c <_Z6m_freeP4mbuf>
		}
		// Free request mbuf
		dlog(LOG_DEBUG, "coap_s_run: freeing appd mbuf");
    7204:	4908      	ldr	r1, [pc, #32]	; (7228 <_Z10coap_s_runv+0x50>)
    7206:	2007      	movs	r0, #7
    7208:	f7fd f806 	bl	4218 <_Z4dlogiPKcz>
		m_free(appd);
    720c:	0028      	movs	r0, r5
    720e:	f000 f845 	bl	729c <_Z6m_freeP4mbuf>
		
		int freeram = free_ram();
    7212:	f7fd f933 	bl	447c <_Z8free_ramv>
		dlog(LOG_DEBUG, "coap_s_run: free Ram: %d", freeram);
    7216:	4905      	ldr	r1, [pc, #20]	; (722c <_Z10coap_s_runv+0x54>)
		int freeram = free_ram();
    7218:	0002      	movs	r2, r0
		dlog(LOG_DEBUG, "coap_s_run: free Ram: %d", freeram);
    721a:	2007      	movs	r0, #7
    721c:	f7fc fffc 	bl	4218 <_Z4dlogiPKcz>
	}
} 
    7220:	bd70      	pop	{r4, r5, r6, pc}
    7222:	46c0      	nop			; (mov r8, r8)
    7224:	00010524 	.word	0x00010524
    7228:	00010542 	.word	0x00010542
    722c:	00010560 	.word	0x00010560

00007230 <_Z18set_mbuf_data_sizei>:
// Set the size of the mbuf data buffer
static int mbuf_data_buf_size = 0;
void set_mbuf_data_size( int buf_size )
{
	// Get the size of the mbuf data buffer
	mbuf_data_buf_size = buf_size;
    7230:	4b01      	ldr	r3, [pc, #4]	; (7238 <_Z18set_mbuf_data_sizei+0x8>)
    7232:	6018      	str	r0, [r3, #0]
	
} // set_mbuf_size
    7234:	4770      	bx	lr
    7236:	46c0      	nop			; (mov r8, r8)
    7238:	2000189c 	.word	0x2000189c

0000723c <_Z18get_mbuf_data_sizev>:

// Get the size of the mbuf data buffer
int get_mbuf_data_size()
{
	// Return the size of the mbuf data buffer
	return mbuf_data_buf_size;
    723c:	4b01      	ldr	r3, [pc, #4]	; (7244 <_Z18get_mbuf_data_sizev+0x8>)
    723e:	6818      	ldr	r0, [r3, #0]
	
} // get_mbuf_size
    7240:	4770      	bx	lr
    7242:	46c0      	nop			; (mov r8, r8)
    7244:	2000189c 	.word	0x2000189c

00007248 <_Z5m_getv>:


struct mbuf * m_get()
{
    7248:	b570      	push	{r4, r5, r6, lr}
    struct mbuf *m;
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    724a:	4d0e      	ldr	r5, [pc, #56]	; (7284 <_Z5m_getv+0x3c>)
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    724c:	2007      	movs	r0, #7
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    724e:	682b      	ldr	r3, [r5, #0]
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    7250:	490d      	ldr	r1, [pc, #52]	; (7288 <_Z5m_getv+0x40>)
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    7252:	1d1c      	adds	r4, r3, #4
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    7254:	0022      	movs	r2, r4
    7256:	f7fc ffdf 	bl	4218 <_Z4dlogiPKcz>
    m = (struct mbuf *) malloc(mbuf_size);
    725a:	0020      	movs	r0, r4
    725c:	f004 fa64 	bl	b728 <malloc>
    assert(m);
    7260:	2800      	cmp	r0, #0
    7262:	d105      	bne.n	7270 <_Z5m_getv+0x28>
    7264:	4b09      	ldr	r3, [pc, #36]	; (728c <_Z5m_getv+0x44>)
    7266:	4a0a      	ldr	r2, [pc, #40]	; (7290 <_Z5m_getv+0x48>)
    7268:	214a      	movs	r1, #74	; 0x4a
    726a:	480a      	ldr	r0, [pc, #40]	; (7294 <_Z5m_getv+0x4c>)
    726c:	f004 f914 	bl	b498 <__assert_func>
    m->len = 0;
    7270:	2300      	movs	r3, #0
    m->size = mbuf_data_buf_size;
    malloc_cnt++;
    7272:	4a09      	ldr	r2, [pc, #36]	; (7298 <_Z5m_getv+0x50>)
    m->len = 0;
    7274:	8003      	strh	r3, [r0, #0]
    m->size = mbuf_data_buf_size;
    7276:	682b      	ldr	r3, [r5, #0]
    7278:	8043      	strh	r3, [r0, #2]
    malloc_cnt++;
    727a:	6813      	ldr	r3, [r2, #0]
    727c:	3301      	adds	r3, #1
    727e:	6013      	str	r3, [r2, #0]
    return m;
}
    7280:	bd70      	pop	{r4, r5, r6, pc}
    7282:	46c0      	nop			; (mov r8, r8)
    7284:	2000189c 	.word	0x2000189c
    7288:	000106ac 	.word	0x000106ac
    728c:	000106c8 	.word	0x000106c8
    7290:	000106f5 	.word	0x000106f5
    7294:	000106ca 	.word	0x000106ca
    7298:	200018a4 	.word	0x200018a4

0000729c <_Z6m_freeP4mbuf>:

void
m_free(struct mbuf *m)
{
    729c:	b510      	push	{r4, lr}
    free(m);
    729e:	f004 fa4d 	bl	b73c <free>
    free_cnt++;
    72a2:	4a02      	ldr	r2, [pc, #8]	; (72ac <_Z6m_freeP4mbuf+0x10>)
    72a4:	6813      	ldr	r3, [r2, #0]
    72a6:	3301      	adds	r3, #1
    72a8:	6013      	str	r3, [r2, #0]
}
    72aa:	bd10      	pop	{r4, pc}
    72ac:	200018a0 	.word	0x200018a0

000072b0 <_Z5m_dupP4mbuf>:


struct mbuf *
m_dup(struct mbuf *m)
{
    72b0:	b570      	push	{r4, r5, r6, lr}
    72b2:	0005      	movs	r5, r0

    struct mbuf *n = m_get();
    72b4:	f7ff ffc8 	bl	7248 <_Z5m_getv>
    72b8:	1e04      	subs	r4, r0, #0

    if (n) {
    72ba:	d007      	beq.n	72cc <_Z5m_dupP4mbuf+0x1c>
        memcpy(n, m, sizeof(*m) + mbuf_data_buf_size);
    72bc:	4b04      	ldr	r3, [pc, #16]	; (72d0 <_Z5m_dupP4mbuf+0x20>)
    72be:	0029      	movs	r1, r5
    72c0:	681a      	ldr	r2, [r3, #0]
    72c2:	3204      	adds	r2, #4
    72c4:	f004 fa65 	bl	b792 <memcpy>
        n->len = m->len;
    72c8:	882b      	ldrh	r3, [r5, #0]
    72ca:	8023      	strh	r3, [r4, #0]
    }

    return n;

}
    72cc:	0020      	movs	r0, r4
    72ce:	bd70      	pop	{r4, r5, r6, pc}
    72d0:	2000189c 	.word	0x2000189c

000072d4 <_Z9m_prependP4mbufi>:

struct mbuf *
m_prepend(struct mbuf *m, int len)
{

    if (m->len + len > mbuf_data_buf_size) {
    72d4:	4b09      	ldr	r3, [pc, #36]	; (72fc <_Z9m_prependP4mbufi+0x28>)
    72d6:	8802      	ldrh	r2, [r0, #0]
    72d8:	681b      	ldr	r3, [r3, #0]
{
    72da:	b570      	push	{r4, r5, r6, lr}
    72dc:	000d      	movs	r5, r1
    if (m->len + len > mbuf_data_buf_size) {
    72de:	1851      	adds	r1, r2, r1
{
    72e0:	0004      	movs	r4, r0
    if (m->len + len > mbuf_data_buf_size) {
    72e2:	4299      	cmp	r1, r3
    72e4:	dc08      	bgt.n	72f8 <_Z9m_prependP4mbufi+0x24>
        return NULL;
    }

    /* make space at the top of the buffer */
    memmove(m->data + len, m->data, m->len);
    72e6:	1d01      	adds	r1, r0, #4
    72e8:	1948      	adds	r0, r1, r5
    72ea:	f004 fa5b 	bl	b7a4 <memmove>
    m->len += len;
    72ee:	8821      	ldrh	r1, [r4, #0]
    72f0:	1949      	adds	r1, r1, r5
    72f2:	8021      	strh	r1, [r4, #0]

    return m;
}
    72f4:	0020      	movs	r0, r4
    72f6:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    72f8:	2400      	movs	r4, #0
    72fa:	e7fb      	b.n	72f4 <_Z9m_prependP4mbufi+0x20>
    72fc:	2000189c 	.word	0x2000189c

00007300 <_Z8m_appendP4mbufs>:

void *
m_append(struct mbuf *m, int16_t len)
{
    void *d;
    if (m->len + len > mbuf_data_buf_size) {
    7300:	4b06      	ldr	r3, [pc, #24]	; (731c <_Z8m_appendP4mbufs+0x1c>)
{
    7302:	b510      	push	{r4, lr}
    if (m->len + len > mbuf_data_buf_size) {
    7304:	8804      	ldrh	r4, [r0, #0]
    7306:	681b      	ldr	r3, [r3, #0]
    7308:	1861      	adds	r1, r4, r1
{
    730a:	0002      	movs	r2, r0
        return NULL;
    730c:	2000      	movs	r0, #0
    if (m->len + len > mbuf_data_buf_size) {
    730e:	4299      	cmp	r1, r3
    7310:	dc02      	bgt.n	7318 <_Z8m_appendP4mbufs+0x18>
    }

    d = m->data + m->len;
    7312:	1d10      	adds	r0, r2, #4
    7314:	1900      	adds	r0, r0, r4
    m->len += len;
    7316:	8011      	strh	r1, [r2, #0]
    
    return d;

}
    7318:	bd10      	pop	{r4, pc}
    731a:	46c0      	nop			; (mov r8, r8)
    731c:	2000189c 	.word	0x2000189c

00007320 <_Z5m_adjP4mbufi>:



void
m_adj(struct mbuf *mp, int req_len)
{
    7320:	b510      	push	{r4, lr}
    if (mp == NULL) {
    7322:	2800      	cmp	r0, #0
    7324:	d011      	beq.n	734a <_Z5m_adjP4mbufi+0x2a>
        return;
    }
    if ((req_len > mp->len) || (-1*(req_len) > mp->len)) {
    7326:	8802      	ldrh	r2, [r0, #0]
    7328:	0013      	movs	r3, r2
    732a:	428a      	cmp	r2, r1
    732c:	db05      	blt.n	733a <_Z5m_adjP4mbufi+0x1a>
    732e:	424c      	negs	r4, r1
    7330:	42a2      	cmp	r2, r4
    7332:	db02      	blt.n	733a <_Z5m_adjP4mbufi+0x1a>
        req_len = mp->len;
    }

    if (req_len >= 0) {
    7334:	2900      	cmp	r1, #0
    7336:	db09      	blt.n	734c <_Z5m_adjP4mbufi+0x2c>
    7338:	000b      	movs	r3, r1
        /* Trim from head. */
        mp->len -= req_len;
    733a:	1ad2      	subs	r2, r2, r3
    733c:	b292      	uxth	r2, r2
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    733e:	1d19      	adds	r1, r3, #4
        mp->len -= req_len;
    7340:	8002      	strh	r2, [r0, #0]
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    7342:	1841      	adds	r1, r0, r1
    7344:	3004      	adds	r0, #4
    7346:	f004 fa2d 	bl	b7a4 <memmove>
    } else {
        /* Trim from tail. */
        mp->len += req_len;
    }
}
    734a:	bd10      	pop	{r4, pc}
        mp->len += req_len;
    734c:	1852      	adds	r2, r2, r1
    734e:	8002      	strh	r2, [r0, #0]
    7350:	e7fb      	b.n	734a <_Z5m_adjP4mbufi+0x2a>
	...

00007354 <_ZL10hdlcs_snrmv>:
    struct hdlc_snrm_params hsp;

    int hdrlen;


    hss.state = HSS_NORM;
    7354:	2302      	movs	r3, #2
{
    7356:	b530      	push	{r4, r5, lr}
    hss.state = HSS_NORM;
    7358:	4c19      	ldr	r4, [pc, #100]	; (73c0 <_ZL10hdlcs_snrmv+0x6c>)
{
    735a:	b093      	sub	sp, #76	; 0x4c
            
     /* reinit state */
    dlog(LOG_DEBUG, "enter normal mode");
    735c:	4919      	ldr	r1, [pc, #100]	; (73c4 <_ZL10hdlcs_snrmv+0x70>)
    735e:	2007      	movs	r0, #7
    hss.state = HSS_NORM;
    7360:	7323      	strb	r3, [r4, #12]
    dlog(LOG_DEBUG, "enter normal mode");
    7362:	f7fc ff59 	bl	4218 <_Z4dlogiPKcz>
            
    /* respond with UA */
    hdlc_hdr(0, hdlc_control(HDLC_UA, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    7366:	2101      	movs	r1, #1
    7368:	2006      	movs	r0, #6
    736a:	f000 fa77 	bl	785c <_Z12hdlc_controlhh>
    736e:	ad05      	add	r5, sp, #20
    7370:	0001      	movs	r1, r0
    7372:	a804      	add	r0, sp, #16
    7374:	7ba3      	ldrb	r3, [r4, #14]
    7376:	7b62      	ldrb	r2, [r4, #13]
    7378:	9001      	str	r0, [sp, #4]
    737a:	9500      	str	r5, [sp, #0]
    737c:	2000      	movs	r0, #0
    737e:	f000 faf5 	bl	796c <_Z8hdlc_hdrismmPhPi>

    /* should use negotiated values - min() of primary/secondary */    
    hsp.max_info_tx = hss.cfg.max_info_tx;  
    7382:	6863      	ldr	r3, [r4, #4]
    hsp.max_info_rx = hss.cfg.max_info_rx;
    hsp.window_tx = 1;
    hsp.window_rx = 1;

    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    7384:	aa03      	add	r2, sp, #12
    hsp.max_info_tx = hss.cfg.max_info_tx;  
    7386:	9307      	str	r3, [sp, #28]
    hsp.max_info_rx = hss.cfg.max_info_rx;
    7388:	68a3      	ldr	r3, [r4, #8]
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    738a:	211a      	movs	r1, #26
    hsp.max_info_rx = hss.cfg.max_info_rx;
    738c:	9308      	str	r3, [sp, #32]
    hsp.window_tx = 1;
    738e:	2301      	movs	r3, #1
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    7390:	a80b      	add	r0, sp, #44	; 0x2c
    hsp.window_tx = 1;
    7392:	9309      	str	r3, [sp, #36]	; 0x24
    hsp.window_rx = 1;
    7394:	930a      	str	r3, [sp, #40]	; 0x28
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    7396:	ab07      	add	r3, sp, #28
    7398:	f000 fba4 	bl	7ae4 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params>
    rc = hdlc_send_frame(hdr, param_info, rsplen);
    739c:	9a03      	ldr	r2, [sp, #12]
    739e:	a90b      	add	r1, sp, #44	; 0x2c
    73a0:	0028      	movs	r0, r5
    73a2:	f000 fbd1 	bl	7b48 <_Z15hdlc_send_framePKhS0_i>

    dlog(LOG_DEBUG, "SNRM-UA response rc %d", rc);
    73a6:	4908      	ldr	r1, [pc, #32]	; (73c8 <_ZL10hdlcs_snrmv+0x74>)
    rc = hdlc_send_frame(hdr, param_info, rsplen);
    73a8:	0002      	movs	r2, r0
    dlog(LOG_DEBUG, "SNRM-UA response rc %d", rc);
    73aa:	2007      	movs	r0, #7
    73ac:	f7fc ff34 	bl	4218 <_Z4dlogiPKcz>

    /* Send / Receive sequence numbers are reset to 0 */
    hss.vr = 0;
    73b0:	2000      	movs	r0, #0
    73b2:	7420      	strb	r0, [r4, #16]
    hss.vs = 0;
    73b4:	73e0      	strb	r0, [r4, #15]
    hss.vr_ack = 0;
    73b6:	74a0      	strb	r0, [r4, #18]
    hss.vs_ack = 0;
    73b8:	7460      	strb	r0, [r4, #17]

    return 0;
 
}
    73ba:	b013      	add	sp, #76	; 0x4c
    73bc:	bd30      	pop	{r4, r5, pc}
    73be:	46c0      	nop			; (mov r8, r8)
    73c0:	200018ac 	.word	0x200018ac
    73c4:	000108ff 	.word	0x000108ff
    73c8:	00010911 	.word	0x00010911

000073cc <_Z10hdlcs_openP14HardwareSerialmm>:
{
    73cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (hss.open) 
    73ce:	4c1c      	ldr	r4, [pc, #112]	; (7440 <_Z10hdlcs_openP14HardwareSerialmm+0x74>)
{
    73d0:	9101      	str	r1, [sp, #4]
    if (hss.open) 
    73d2:	6826      	ldr	r6, [r4, #0]
{
    73d4:	0015      	movs	r5, r2
        return ERR_FAIL;
    73d6:	2763      	movs	r7, #99	; 0x63
    if (hss.open) 
    73d8:	2e00      	cmp	r6, #0
    73da:	d106      	bne.n	73ea <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
	if ( max_info_len > MNIC_MAX_PAYLOAD_SIZE )
    73dc:	2aff      	cmp	r2, #255	; 0xff
    73de:	d906      	bls.n	73ee <_Z10hdlcs_openP14HardwareSerialmm+0x22>
		dlog( LOG_DEBUG, "The max payload size specified is too large: %d bytes. The maximum allowed is %d bytes ", max_info_len, MNIC_MAX_PAYLOAD_SIZE );
    73e0:	23ff      	movs	r3, #255	; 0xff
    73e2:	4918      	ldr	r1, [pc, #96]	; (7444 <_Z10hdlcs_openP14HardwareSerialmm+0x78>)
    73e4:	2007      	movs	r0, #7
    73e6:	f7fc ff17 	bl	4218 <_Z4dlogiPKcz>
}
    73ea:	0038      	movs	r0, r7
    73ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hss.open = 1;
    73ee:	2701      	movs	r7, #1
	hdlc_init( pUART, max_info_len );
    73f0:	0011      	movs	r1, r2
    73f2:	f000 fa0f 	bl	7814 <_Z9hdlc_initP14HardwareSerialm>
	uart_timeout_ms = timeout_ms;
    73f6:	4b14      	ldr	r3, [pc, #80]	; (7448 <_Z10hdlcs_openP14HardwareSerialmm+0x7c>)
    73f8:	9a01      	ldr	r2, [sp, #4]
    memset(&hss, 0, sizeof(hss));
    73fa:	0031      	movs	r1, r6
	uart_timeout_ms = timeout_ms;
    73fc:	601a      	str	r2, [r3, #0]
    memset(&hss, 0, sizeof(hss));
    73fe:	0020      	movs	r0, r4
    7400:	2220      	movs	r2, #32
    7402:	f004 f9e1 	bl	b7c8 <memset>
	set_mbuf_data_size(size);
    7406:	0028      	movs	r0, r5
    hss.open = 1;
    7408:	6027      	str	r7, [r4, #0]
    hss.cfg.max_info_tx = max_info_len;
    740a:	6065      	str	r5, [r4, #4]
    hss.cfg.max_info_rx = max_info_len;
    740c:	60a5      	str	r5, [r4, #8]
    hss.state = HSS_DISC;
    740e:	7327      	strb	r7, [r4, #12]
	set_mbuf_data_size(size);
    7410:	f7ff ff0e 	bl	7230 <_Z18set_mbuf_data_sizei>
    hss.recv = m_get();
    7414:	f7ff ff18 	bl	7248 <_Z5m_getv>
    7418:	61a0      	str	r0, [r4, #24]
    assert(hss.recv);
    741a:	2800      	cmp	r0, #0
    741c:	d105      	bne.n	742a <_Z10hdlcs_openP14HardwareSerialmm+0x5e>
    741e:	4b0b      	ldr	r3, [pc, #44]	; (744c <_Z10hdlcs_openP14HardwareSerialmm+0x80>)
    7420:	4a0b      	ldr	r2, [pc, #44]	; (7450 <_Z10hdlcs_openP14HardwareSerialmm+0x84>)
    7422:	2164      	movs	r1, #100	; 0x64
    7424:	480b      	ldr	r0, [pc, #44]	; (7454 <_Z10hdlcs_openP14HardwareSerialmm+0x88>)
    7426:	f004 f837 	bl	b498 <__assert_func>
    hss.esrc = hdlc_addr_encode(1);
    742a:	0038      	movs	r0, r7
    742c:	f000 fa88 	bl	7940 <_Z16hdlc_addr_encodem>
    7430:	7360      	strb	r0, [r4, #13]
    hss.edst = hdlc_addr_encode(1);
    7432:	0038      	movs	r0, r7
    7434:	f000 fa84 	bl	7940 <_Z16hdlc_addr_encodem>
    return ERR_OK;
    7438:	0037      	movs	r7, r6
    hss.edst = hdlc_addr_encode(1);
    743a:	73a0      	strb	r0, [r4, #14]
    return ERR_OK;
    743c:	e7d5      	b.n	73ea <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
    743e:	46c0      	nop			; (mov r8, r8)
    7440:	200018ac 	.word	0x200018ac
    7444:	00010703 	.word	0x00010703
    7448:	200018a8 	.word	0x200018a8
    744c:	0001075b 	.word	0x0001075b
    7450:	00010945 	.word	0x00010945
    7454:	00010764 	.word	0x00010764

00007458 <_Z10hdlcs_readv>:
{
    7458:	b570      	push	{r4, r5, r6, lr}
    if (hss.r_complete) {
    745a:	4d0f      	ldr	r5, [pc, #60]	; (7498 <_Z10hdlcs_readv+0x40>)
    745c:	69ec      	ldr	r4, [r5, #28]
    745e:	2c00      	cmp	r4, #0
    7460:	d018      	beq.n	7494 <_Z10hdlcs_readv+0x3c>
        r = m_dup(hss.recv);
    7462:	69a8      	ldr	r0, [r5, #24]
    7464:	f7ff ff24 	bl	72b0 <_Z5m_dupP4mbuf>
    7468:	1e04      	subs	r4, r0, #0
        assert(r);
    746a:	d106      	bne.n	747a <_Z10hdlcs_readv+0x22>
    746c:	2197      	movs	r1, #151	; 0x97
    746e:	4b0b      	ldr	r3, [pc, #44]	; (749c <_Z10hdlcs_readv+0x44>)
    7470:	4a0b      	ldr	r2, [pc, #44]	; (74a0 <_Z10hdlcs_readv+0x48>)
    7472:	0049      	lsls	r1, r1, #1
    7474:	480b      	ldr	r0, [pc, #44]	; (74a4 <_Z10hdlcs_readv+0x4c>)
    7476:	f004 f80f 	bl	b498 <__assert_func>
        hss.recv->len = 0;
    747a:	2100      	movs	r1, #0
    747c:	69a8      	ldr	r0, [r5, #24]
    747e:	8001      	strh	r1, [r0, #0]
        hss.r_complete = 0;
    7480:	61e9      	str	r1, [r5, #28]
        memset(hss.recv->data, 0, hss.recv->size);
    7482:	8842      	ldrh	r2, [r0, #2]
    7484:	3004      	adds	r0, #4
    7486:	f004 f99f 	bl	b7c8 <memset>
		dlog( LOG_DEBUG, "hdlcs_read() - %x", r );
    748a:	0022      	movs	r2, r4
    748c:	4906      	ldr	r1, [pc, #24]	; (74a8 <_Z10hdlcs_readv+0x50>)
    748e:	2007      	movs	r0, #7
    7490:	f7fc fec2 	bl	4218 <_Z4dlogiPKcz>
} // hdlcs_read()
    7494:	0020      	movs	r0, r4
    7496:	bd70      	pop	{r4, r5, r6, pc}
    7498:	200018ac 	.word	0x200018ac
    749c:	0000fffc 	.word	0x0000fffc
    74a0:	00010928 	.word	0x00010928
    74a4:	00010764 	.word	0x00010764
    74a8:	00010790 	.word	0x00010790

000074ac <_Z11hdlcs_writePKvt>:
{
    74ac:	b570      	push	{r4, r5, r6, lr}
    (void)hdlc_hdr(0, hdlc_control_i(hss.vr, hss.vs, 1),
    74ae:	4c0d      	ldr	r4, [pc, #52]	; (74e4 <_Z11hdlcs_writePKvt+0x38>)
{
    74b0:	b086      	sub	sp, #24
    74b2:	0005      	movs	r5, r0
    74b4:	000e      	movs	r6, r1
    (void)hdlc_hdr(0, hdlc_control_i(hss.vr, hss.vs, 1),
    74b6:	7c20      	ldrb	r0, [r4, #16]
    74b8:	7be1      	ldrb	r1, [r4, #15]
    74ba:	2201      	movs	r2, #1
    74bc:	f000 f9ba 	bl	7834 <_Z14hdlc_control_ihhh>
    74c0:	7ba3      	ldrb	r3, [r4, #14]
    74c2:	7b62      	ldrb	r2, [r4, #13]
                          hss.esrc, hss.edst, hdr, &hdrlen);
    74c4:	b201      	sxth	r1, r0
    74c6:	ac04      	add	r4, sp, #16
    74c8:	a803      	add	r0, sp, #12
    74ca:	9001      	str	r0, [sp, #4]
    74cc:	9400      	str	r4, [sp, #0]
    74ce:	2000      	movs	r0, #0
    74d0:	f000 fa4c 	bl	796c <_Z8hdlc_hdrismmPhPi>
    rc = hdlc_send_frame(hdr, (const uint8_t *)data, len);
    74d4:	0032      	movs	r2, r6
    74d6:	0029      	movs	r1, r5
    74d8:	0020      	movs	r0, r4
    74da:	f000 fb35 	bl	7b48 <_Z15hdlc_send_framePKhS0_i>
}
    74de:	b006      	add	sp, #24
    74e0:	bd70      	pop	{r4, r5, r6, pc}
    74e2:	46c0      	nop			; (mov r8, r8)
    74e4:	200018ac 	.word	0x200018ac

000074e8 <_Z8hdlcs_rrv>:



int 
hdlcs_rr(void)
{
    74e8:	b530      	push	{r4, r5, lr}
    uint8_t hdr[HDLC_HDR_SIZE];
    int hdrlen;

    if (!pending_rsp) {
    74ea:	4d15      	ldr	r5, [pc, #84]	; (7540 <_Z8hdlcs_rrv+0x58>)
{
    74ec:	b087      	sub	sp, #28
    if (!pending_rsp) {
    74ee:	682c      	ldr	r4, [r5, #0]
    74f0:	2c00      	cmp	r4, #0
    74f2:	d11a      	bne.n	752a <_Z8hdlcs_rrv+0x42>
        dlog(LOG_DEBUG, "respond to RR with RR");
    74f4:	4913      	ldr	r1, [pc, #76]	; (7544 <_Z8hdlcs_rrv+0x5c>)
    74f6:	2007      	movs	r0, #7
    74f8:	f7fc fe8e 	bl	4218 <_Z4dlogiPKcz>
        hdlc_hdr(0, hdlc_control_rr(hss.vr, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    74fc:	4d12      	ldr	r5, [pc, #72]	; (7548 <_Z8hdlcs_rrv+0x60>)
    74fe:	2101      	movs	r1, #1
    7500:	7c28      	ldrb	r0, [r5, #16]
    7502:	f000 f9a2 	bl	784a <_Z15hdlc_control_rrhh>
    7506:	7b6a      	ldrb	r2, [r5, #13]
    7508:	7bab      	ldrb	r3, [r5, #14]
    750a:	b201      	sxth	r1, r0
    750c:	ad04      	add	r5, sp, #16
    750e:	a803      	add	r0, sp, #12
    7510:	9001      	str	r0, [sp, #4]
    7512:	9500      	str	r5, [sp, #0]
    7514:	0020      	movs	r0, r4
    7516:	f000 fa29 	bl	796c <_Z8hdlc_hdrismmPhPi>
        hdlc_send_frame(hdr, NULL, 0);
    751a:	0022      	movs	r2, r4
    751c:	0021      	movs	r1, r4
    751e:	0028      	movs	r0, r5
    7520:	f000 fb12 	bl	7b48 <_Z15hdlc_send_framePKhS0_i>
        /* CoAP will also send app confirm */
        /* if not (and there is no data), proxy should send RR to confirm */
    }

    return 0;
}
    7524:	2000      	movs	r0, #0
    7526:	b007      	add	sp, #28
    7528:	bd30      	pop	{r4, r5, pc}
        dlog(LOG_DEBUG, "Resending frame");
    752a:	4908      	ldr	r1, [pc, #32]	; (754c <_Z8hdlcs_rrv+0x64>)
    752c:	2007      	movs	r0, #7
    752e:	f7fc fe73 	bl	4218 <_Z4dlogiPKcz>
        hdlcs_write(pending_rsp->m_data, pending_rsp->m_pktlen);
    7532:	6828      	ldr	r0, [r5, #0]
    7534:	8801      	ldrh	r1, [r0, #0]
    7536:	3004      	adds	r0, #4
    7538:	f7ff ffb8 	bl	74ac <_Z11hdlcs_writePKvt>
    753c:	e7f2      	b.n	7524 <_Z8hdlcs_rrv+0x3c>
    753e:	46c0      	nop			; (mov r8, r8)
    7540:	20001840 	.word	0x20001840
    7544:	000107a2 	.word	0x000107a2
    7548:	200018ac 	.word	0x200018ac
    754c:	000107b8 	.word	0x000107b8

00007550 <_Z9hdlcs_runv>:
{
    7550:	b5f0      	push	{r4, r5, r6, r7, lr}
    rc = hdlc_rx( hdr, hss.recv->data, hss.recv->size, uart_timeout_ms );  
    7552:	4c72      	ldr	r4, [pc, #456]	; (771c <_Z9hdlcs_runv+0x1cc>)
    7554:	4b72      	ldr	r3, [pc, #456]	; (7720 <_Z9hdlcs_runv+0x1d0>)
    7556:	69a1      	ldr	r1, [r4, #24]
{
    7558:	b093      	sub	sp, #76	; 0x4c
    rc = hdlc_rx( hdr, hss.recv->data, hss.recv->size, uart_timeout_ms );  
    755a:	884a      	ldrh	r2, [r1, #2]
    755c:	681b      	ldr	r3, [r3, #0]
    755e:	3104      	adds	r1, #4
    7560:	a807      	add	r0, sp, #28
    7562:	f000 fb5b 	bl	7c1c <_Z7hdlc_rxPhS_ii>
	if ( rc <= 0 )
    7566:	2800      	cmp	r0, #0
    7568:	dc04      	bgt.n	7574 <_Z9hdlcs_runv+0x24>
        return 0;
    756a:	2300      	movs	r3, #0
        return 1;
    756c:	9303      	str	r3, [sp, #12]
} // hdlcs_run()
    756e:	9803      	ldr	r0, [sp, #12]
    7570:	b013      	add	sp, #76	; 0x4c
    7572:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rc = hdlc_parse_hdr( &hh, hdr, HDLC_HDR_SIZE );
    7574:	ae0b      	add	r6, sp, #44	; 0x2c
    7576:	2207      	movs	r2, #7
    7578:	a907      	add	r1, sp, #28
    757a:	0030      	movs	r0, r6
    757c:	f000 fa68 	bl	7a50 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi>
	if (rc) 
    7580:	2800      	cmp	r0, #0
    7582:	d1f2      	bne.n	756a <_Z9hdlcs_runv+0x1a>
	rc = hdlc_parse_control( hh.control, &hc );
    7584:	ad05      	add	r5, sp, #20
    7586:	7c30      	ldrb	r0, [r6, #16]
    7588:	0029      	movs	r1, r5
    758a:	f000 f985 	bl	7898 <_Z18hdlc_parse_controlhP9hdlc_ctrl>
    758e:	9003      	str	r0, [sp, #12]
    if (rc) 
    7590:	2800      	cmp	r0, #0
    7592:	d1ea      	bne.n	756a <_Z9hdlcs_runv+0x1a>
    hss.recv->len = hh.infolen;
    7594:	8932      	ldrh	r2, [r6, #8]
    7596:	69a3      	ldr	r3, [r4, #24]
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    7598:	4962      	ldr	r1, [pc, #392]	; (7724 <_Z9hdlcs_runv+0x1d4>)
    hss.recv->len = hh.infolen;
    759a:	801a      	strh	r2, [r3, #0]
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    759c:	7c32      	ldrb	r2, [r6, #16]
    if (hc.nr == INCM8(hss.vs)) 
    759e:	2607      	movs	r6, #7
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    75a0:	7b23      	ldrb	r3, [r4, #12]
    75a2:	2007      	movs	r0, #7
    75a4:	f7fc fe38 	bl	4218 <_Z4dlogiPKcz>
    if (hc.nr == INCM8(hss.vs)) 
    75a8:	7be3      	ldrb	r3, [r4, #15]
    75aa:	78aa      	ldrb	r2, [r5, #2]
    75ac:	3301      	adds	r3, #1
    75ae:	4033      	ands	r3, r6
    75b0:	429a      	cmp	r2, r3
    75b2:	d107      	bne.n	75c4 <_Z9hdlcs_runv+0x74>
        dlog(LOG_DEBUG, "response rxed at primary");
    75b4:	0030      	movs	r0, r6
    75b6:	495c      	ldr	r1, [pc, #368]	; (7728 <_Z9hdlcs_runv+0x1d8>)
    75b8:	f7fc fe2e 	bl	4218 <_Z4dlogiPKcz>
        hss.vs = INCM8(hss.vs);
    75bc:	7be0      	ldrb	r0, [r4, #15]
    75be:	3001      	adds	r0, #1
    75c0:	4030      	ands	r0, r6
    75c2:	73e0      	strb	r0, [r4, #15]
    switch (hss.state) 
    75c4:	7b26      	ldrb	r6, [r4, #12]
    75c6:	2e01      	cmp	r6, #1
    75c8:	d008      	beq.n	75dc <_Z9hdlcs_runv+0x8c>
    75ca:	2e02      	cmp	r6, #2
    75cc:	d029      	beq.n	7622 <_Z9hdlcs_runv+0xd2>
		dlog( LOG_DEBUG, "Error - unknown state: %d", hss.state );
    75ce:	0032      	movs	r2, r6
    75d0:	4956      	ldr	r1, [pc, #344]	; (772c <_Z9hdlcs_runv+0x1dc>)
    75d2:	2007      	movs	r0, #7
    75d4:	f7fc fe20 	bl	4218 <_Z4dlogiPKcz>
        return 1;
    75d8:	2301      	movs	r3, #1
    75da:	e7c7      	b.n	756c <_Z9hdlcs_runv+0x1c>
        if (hc.type == HDLC_SNRM) {
    75dc:	782b      	ldrb	r3, [r5, #0]
    75de:	2b04      	cmp	r3, #4
    75e0:	d107      	bne.n	75f2 <_Z9hdlcs_runv+0xa2>
            rc = hdlcs_snrm();
    75e2:	f7ff feb7 	bl	7354 <_ZL10hdlcs_snrmv>
    dlog( LOG_DEBUG, "hdlcs_run() - %d", rc );
    75e6:	0002      	movs	r2, r0
    75e8:	4951      	ldr	r1, [pc, #324]	; (7730 <_Z9hdlcs_runv+0x1e0>)
    75ea:	2007      	movs	r0, #7
    75ec:	f7fc fe14 	bl	4218 <_Z4dlogiPKcz>
    return 0;
    75f0:	e7bd      	b.n	756e <_Z9hdlcs_runv+0x1e>
{    
    uint8_t hdr[HDLC_HDR_SIZE];
    int hdrlen;

    /* Disconnected Mode response */
    dlog(LOG_WARNING, "request recv'd in disconnected mode");
    75f2:	4950      	ldr	r1, [pc, #320]	; (7734 <_Z9hdlcs_runv+0x1e4>)
    75f4:	2004      	movs	r0, #4
    75f6:	f7fc fe0f 	bl	4218 <_Z4dlogiPKcz>
    
    hdlc_hdr(0, hdlc_control(HDLC_DM, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    75fa:	0031      	movs	r1, r6
    75fc:	2007      	movs	r0, #7
    75fe:	f000 f92d 	bl	785c <_Z12hdlc_controlhh>
    7602:	7b62      	ldrb	r2, [r4, #13]
    7604:	7ba3      	ldrb	r3, [r4, #14]
    7606:	0001      	movs	r1, r0
    7608:	ac09      	add	r4, sp, #36	; 0x24
    760a:	a806      	add	r0, sp, #24
    760c:	9001      	str	r0, [sp, #4]
    760e:	9400      	str	r4, [sp, #0]
    7610:	2000      	movs	r0, #0
    7612:	f000 f9ab 	bl	796c <_Z8hdlc_hdrismmPhPi>
    hdlc_send_frame(hdr, NULL, 0);
    7616:	2200      	movs	r2, #0
    7618:	0020      	movs	r0, r4
    761a:	0011      	movs	r1, r2
    
    /* Frame Reject response */
    dlog(LOG_WARNING, "error - frame rejected");

    hdlc_hdr(0, hdlc_control(HDLC_FRMR, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    hdlc_send_frame(hdr, NULL, 0);
    761c:	f000 fa94 	bl	7b48 <_Z15hdlc_send_framePKhS0_i>
    7620:	e023      	b.n	766a <_Z9hdlcs_runv+0x11a>
        if (hc.type == HDLC_SNRM) {
    7622:	782b      	ldrb	r3, [r5, #0]
    7624:	2b04      	cmp	r3, #4
    7626:	d104      	bne.n	7632 <_Z9hdlcs_runv+0xe2>
            dlog( LOG_DEBUG, "HDLC_SNRM" );
    7628:	4943      	ldr	r1, [pc, #268]	; (7738 <_Z9hdlcs_runv+0x1e8>)
    762a:	2007      	movs	r0, #7
    762c:	f7fc fdf4 	bl	4218 <_Z4dlogiPKcz>
    7630:	e7d7      	b.n	75e2 <_Z9hdlcs_runv+0x92>
        else if (hc.type == HDLC_I) {
    7632:	2b01      	cmp	r3, #1
    7634:	d124      	bne.n	7680 <_Z9hdlcs_runv+0x130>
            dlog( LOG_DEBUG, "HDLC_I" );
    7636:	4941      	ldr	r1, [pc, #260]	; (773c <_Z9hdlcs_runv+0x1ec>)
    7638:	2007      	movs	r0, #7
    763a:	f7fc fded 	bl	4218 <_Z4dlogiPKcz>
            if (hc.ns != hss.vr) {
    763e:	78ea      	ldrb	r2, [r5, #3]
    7640:	7c23      	ldrb	r3, [r4, #16]
    7642:	429a      	cmp	r2, r3
    7644:	d013      	beq.n	766e <_Z9hdlcs_runv+0x11e>
                            hc.ns, hss.vr);
    7646:	493e      	ldr	r1, [pc, #248]	; (7740 <_Z9hdlcs_runv+0x1f0>)
    7648:	2003      	movs	r0, #3
    764a:	f7fc fde5 	bl	4218 <_Z4dlogiPKcz>
            rc = hdlcs_i(hss.recv);
    764e:	69a5      	ldr	r5, [r4, #24]
    ddump(LOG_DEBUG, "Recv I frame", d->data, d->len);
    7650:	2007      	movs	r0, #7
    7652:	882b      	ldrh	r3, [r5, #0]
    7654:	1d2a      	adds	r2, r5, #4
    7656:	493b      	ldr	r1, [pc, #236]	; (7744 <_Z9hdlcs_runv+0x1f4>)
    7658:	f7fc fe00 	bl	425c <_Z5ddumpiPKcPKvi>
    if (hss.icb) {
    765c:	6960      	ldr	r0, [r4, #20]
    765e:	2800      	cmp	r0, #0
    7660:	d00a      	beq.n	7678 <_Z9hdlcs_runv+0x128>
        dlog(LOG_ERR, "data CB not supported");
    7662:	4939      	ldr	r1, [pc, #228]	; (7748 <_Z9hdlcs_runv+0x1f8>)
    7664:	2003      	movs	r0, #3
    7666:	f7fc fdd7 	bl	4218 <_Z4dlogiPKcz>
            rc = hdlcs_frmr();
    766a:	2000      	movs	r0, #0
    766c:	e7bb      	b.n	75e6 <_Z9hdlcs_runv+0x96>
                hss.vr = INCM8(hss.vr);
    766e:	2307      	movs	r3, #7
    7670:	3201      	adds	r2, #1
    7672:	401a      	ands	r2, r3
    7674:	7422      	strb	r2, [r4, #16]
    7676:	e7ea      	b.n	764e <_Z9hdlcs_runv+0xfe>
        hss.r_complete = 1;
    7678:	2301      	movs	r3, #1
        hss.recv = d;
    767a:	61a5      	str	r5, [r4, #24]
        hss.r_complete = 1;
    767c:	61e3      	str	r3, [r4, #28]
    767e:	e7b2      	b.n	75e6 <_Z9hdlcs_runv+0x96>
        else if (hc.type == HDLC_RR) {
    7680:	2b02      	cmp	r3, #2
    7682:	d10c      	bne.n	769e <_Z9hdlcs_runv+0x14e>
            dlog( LOG_DEBUG, "HDLC_RR" );
    7684:	4931      	ldr	r1, [pc, #196]	; (774c <_Z9hdlcs_runv+0x1fc>)
    7686:	2007      	movs	r0, #7
    7688:	f7fc fdc6 	bl	4218 <_Z4dlogiPKcz>
            dlog(LOG_DEBUG, "hc.nr: %d, hss.vs: %d", hc.nr, hss.vs);
    768c:	7be3      	ldrb	r3, [r4, #15]
    768e:	78aa      	ldrb	r2, [r5, #2]
    7690:	492f      	ldr	r1, [pc, #188]	; (7750 <_Z9hdlcs_runv+0x200>)
    7692:	2007      	movs	r0, #7
    7694:	f7fc fdc0 	bl	4218 <_Z4dlogiPKcz>
            rc = hdlcs_rr();
    7698:	f7ff ff26 	bl	74e8 <_Z8hdlcs_rrv>
    769c:	e7a3      	b.n	75e6 <_Z9hdlcs_runv+0x96>
    769e:	ad09      	add	r5, sp, #36	; 0x24
        else if (hc.type == HDLC_DISC) {
    76a0:	2b05      	cmp	r3, #5
    76a2:	d127      	bne.n	76f4 <_Z9hdlcs_runv+0x1a4>
            pending_rsp = NULL;
    76a4:	2600      	movs	r6, #0
            dlog( LOG_DEBUG, "HDLC_DISC" );
    76a6:	492b      	ldr	r1, [pc, #172]	; (7754 <_Z9hdlcs_runv+0x204>)
    76a8:	2007      	movs	r0, #7
    76aa:	f7fc fdb5 	bl	4218 <_Z4dlogiPKcz>
            m_free(pending_rsp);
    76ae:	4f2a      	ldr	r7, [pc, #168]	; (7758 <_Z9hdlcs_runv+0x208>)
    76b0:	6838      	ldr	r0, [r7, #0]
    76b2:	f7ff fdf3 	bl	729c <_Z6m_freeP4mbuf>
            dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    76b6:	2302      	movs	r3, #2
            pending_rsp = NULL;
    76b8:	603e      	str	r6, [r7, #0]
    hss.state = HSS_DISC;
    76ba:	2701      	movs	r7, #1
            dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    76bc:	33ff      	adds	r3, #255	; 0xff
    76be:	4a27      	ldr	r2, [pc, #156]	; (775c <_Z9hdlcs_runv+0x20c>)
    76c0:	4927      	ldr	r1, [pc, #156]	; (7760 <_Z9hdlcs_runv+0x210>)
    76c2:	2007      	movs	r0, #7
    76c4:	f7fc fda8 	bl	4218 <_Z4dlogiPKcz>
    dlog(LOG_DEBUG, "disconnecting");
    76c8:	4926      	ldr	r1, [pc, #152]	; (7764 <_Z9hdlcs_runv+0x214>)
    76ca:	2007      	movs	r0, #7
    hss.state = HSS_DISC;
    76cc:	7327      	strb	r7, [r4, #12]
    dlog(LOG_DEBUG, "disconnecting");
    76ce:	f7fc fda3 	bl	4218 <_Z4dlogiPKcz>
    hdlc_hdr(0, hdlc_control(HDLC_UA, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    76d2:	0039      	movs	r1, r7
    76d4:	2006      	movs	r0, #6
    76d6:	f000 f8c1 	bl	785c <_Z12hdlc_controlhh>
    76da:	0001      	movs	r1, r0
    76dc:	a806      	add	r0, sp, #24
    76de:	7b62      	ldrb	r2, [r4, #13]
    76e0:	7ba3      	ldrb	r3, [r4, #14]
    76e2:	9001      	str	r0, [sp, #4]
    76e4:	9500      	str	r5, [sp, #0]
    76e6:	0030      	movs	r0, r6
    76e8:	f000 f940 	bl	796c <_Z8hdlc_hdrismmPhPi>
    rc = hdlc_send_frame(hdr, NULL, 0);
    76ec:	0032      	movs	r2, r6
    76ee:	0031      	movs	r1, r6
    hdlc_send_frame(hdr, NULL, 0);
    76f0:	0028      	movs	r0, r5
    76f2:	e793      	b.n	761c <_Z9hdlcs_runv+0xcc>
    dlog(LOG_WARNING, "error - frame rejected");
    76f4:	491c      	ldr	r1, [pc, #112]	; (7768 <_Z9hdlcs_runv+0x218>)
    76f6:	2004      	movs	r0, #4
    76f8:	f7fc fd8e 	bl	4218 <_Z4dlogiPKcz>
    hdlc_hdr(0, hdlc_control(HDLC_FRMR, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    76fc:	2101      	movs	r1, #1
    76fe:	2008      	movs	r0, #8
    7700:	f000 f8ac 	bl	785c <_Z12hdlc_controlhh>
    7704:	0001      	movs	r1, r0
    7706:	a806      	add	r0, sp, #24
    7708:	7b62      	ldrb	r2, [r4, #13]
    770a:	7ba3      	ldrb	r3, [r4, #14]
    770c:	9001      	str	r0, [sp, #4]
    770e:	9500      	str	r5, [sp, #0]
    7710:	2000      	movs	r0, #0
    7712:	f000 f92b 	bl	796c <_Z8hdlc_hdrismmPhPi>
    hdlc_send_frame(hdr, NULL, 0);
    7716:	2200      	movs	r2, #0
    7718:	0011      	movs	r1, r2
    771a:	e7e9      	b.n	76f0 <_Z9hdlcs_runv+0x1a0>
    771c:	200018ac 	.word	0x200018ac
    7720:	200018a8 	.word	0x200018a8
    7724:	000107c8 	.word	0x000107c8
    7728:	000107ef 	.word	0x000107ef
    772c:	000108d4 	.word	0x000108d4
    7730:	000108ee 	.word	0x000108ee
    7734:	00010808 	.word	0x00010808
    7738:	0001082c 	.word	0x0001082c
    773c:	00010836 	.word	0x00010836
    7740:	0001083d 	.word	0x0001083d
    7744:	00010864 	.word	0x00010864
    7748:	00010871 	.word	0x00010871
    774c:	00010887 	.word	0x00010887
    7750:	0001088f 	.word	0x0001088f
    7754:	000108a5 	.word	0x000108a5
    7758:	20001840 	.word	0x20001840
    775c:	0001093b 	.word	0x0001093b
    7760:	0001035f 	.word	0x0001035f
    7764:	000108af 	.word	0x000108af
    7768:	000108bd 	.word	0x000108bd

0000776c <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    776c:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    776e:	2240      	movs	r2, #64	; 0x40
    7770:	2100      	movs	r1, #0
RingBuffer::RingBuffer( void )
    7772:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    7774:	f004 f828 	bl	b7c8 <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    7778:	2300      	movs	r3, #0
}
    777a:	0020      	movs	r0, r4
	_iHead = 0;
    777c:	6423      	str	r3, [r4, #64]	; 0x40
	_iTail = 0;
    777e:	6463      	str	r3, [r4, #68]	; 0x44
}
    7780:	bd10      	pop	{r4, pc}

00007782 <_ZN10RingBuffer10store_charEh>:
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    7782:	223f      	movs	r2, #63	; 0x3f
  int i = nextIndex(_iHead);
    7784:	6c03      	ldr	r3, [r0, #64]	; 0x40
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    7786:	3301      	adds	r3, #1
    7788:	4013      	ands	r3, r2
  if ( i != _iTail )
    778a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    778c:	429a      	cmp	r2, r3
    778e:	d002      	beq.n	7796 <_ZN10RingBuffer10store_charEh+0x14>
    _aucBuffer[_iHead] = c ;
    7790:	6c02      	ldr	r2, [r0, #64]	; 0x40
    7792:	5481      	strb	r1, [r0, r2]
    _iHead = i ;
    7794:	6403      	str	r3, [r0, #64]	; 0x40
}
    7796:	4770      	bx	lr

00007798 <_ZN10RingBuffer5clearEv>:
	_iHead = 0;
    7798:	2300      	movs	r3, #0
    779a:	6403      	str	r3, [r0, #64]	; 0x40
	_iTail = 0;
    779c:	6443      	str	r3, [r0, #68]	; 0x44
}
    779e:	4770      	bx	lr

000077a0 <_ZN10RingBuffer9read_charEv>:
	if(_iTail == _iHead)
    77a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
    77a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    77a4:	429a      	cmp	r2, r3
    77a6:	d008      	beq.n	77ba <_ZN10RingBuffer9read_charEv+0x1a>
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    77a8:	213f      	movs	r1, #63	; 0x3f
	uint8_t value = _aucBuffer[_iTail];
    77aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
    77ac:	5cc2      	ldrb	r2, [r0, r3]
	_iTail = nextIndex(_iTail);
    77ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    77b0:	3301      	adds	r3, #1
    77b2:	400b      	ands	r3, r1
	_iTail = nextIndex(_iTail);
    77b4:	6443      	str	r3, [r0, #68]	; 0x44
	return value;
    77b6:	0010      	movs	r0, r2
}
    77b8:	4770      	bx	lr
		return -1;
    77ba:	2001      	movs	r0, #1
    77bc:	4240      	negs	r0, r0
    77be:	e7fb      	b.n	77b8 <_ZN10RingBuffer9read_charEv+0x18>

000077c0 <_ZN10RingBuffer9availableEv>:
	int delta = _iHead - _iTail;
    77c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    77c2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    77c4:	1a18      	subs	r0, r3, r0
	if(delta < 0)
    77c6:	d500      	bpl.n	77ca <_ZN10RingBuffer9availableEv+0xa>
		return SERIAL_BUFFER_SIZE + delta;
    77c8:	3040      	adds	r0, #64	; 0x40
}
    77ca:	4770      	bx	lr

000077cc <_ZN10RingBuffer17availableForStoreEv>:
	if (_iHead >= _iTail)
    77cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    77ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
    77d0:	429a      	cmp	r2, r3
    77d2:	db04      	blt.n	77de <_ZN10RingBuffer17availableForStoreEv+0x12>
		return SERIAL_BUFFER_SIZE - 1 - _iHead + _iTail;
    77d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    77d6:	6c40      	ldr	r0, [r0, #68]	; 0x44
    77d8:	1ac0      	subs	r0, r0, r3
    77da:	303f      	adds	r0, #63	; 0x3f
}
    77dc:	4770      	bx	lr
		return _iTail - _iHead - 1;
    77de:	6c43      	ldr	r3, [r0, #68]	; 0x44
    77e0:	6c00      	ldr	r0, [r0, #64]	; 0x40
    77e2:	1a18      	subs	r0, r3, r0
    77e4:	3801      	subs	r0, #1
    77e6:	e7f9      	b.n	77dc <_ZN10RingBuffer17availableForStoreEv+0x10>

000077e8 <_ZN10RingBuffer4peekEv>:
	if(_iTail == _iHead)
    77e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    77ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
    77ec:	429a      	cmp	r2, r3
    77ee:	d002      	beq.n	77f6 <_ZN10RingBuffer4peekEv+0xe>
	return _aucBuffer[_iTail];
    77f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    77f2:	5cc0      	ldrb	r0, [r0, r3]
}
    77f4:	4770      	bx	lr
		return -1;
    77f6:	2001      	movs	r0, #1
    77f8:	4240      	negs	r0, r0
    77fa:	e7fb      	b.n	77f4 <_ZN10RingBuffer4peekEv+0xc>

000077fc <_ZN10RingBuffer6isFullEv>:
}

bool RingBuffer::isFull()
{
    77fc:	0003      	movs	r3, r0
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    77fe:	223f      	movs	r2, #63	; 0x3f
	return (nextIndex(_iHead) == _iTail);
    7800:	6c00      	ldr	r0, [r0, #64]	; 0x40
    7802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    7804:	3001      	adds	r0, #1
    7806:	4010      	ands	r0, r2
	return (nextIndex(_iHead) == _iTail);
    7808:	1ac0      	subs	r0, r0, r3
    780a:	4243      	negs	r3, r0
    780c:	4158      	adcs	r0, r3
    780e:	b2c0      	uxtb	r0, r0
}
    7810:	4770      	bx	lr
	...

00007814 <_Z9hdlc_initP14HardwareSerialm>:

// Pointer to Serial console and UART
static HardwareSerial * pU;
#define uart (*pU)
void hdlc_init( HardwareSerial * pUART, uint32_t max_info_len )
{
    7814:	b510      	push	{r4, lr}
    7816:	000c      	movs	r4, r1
	// Set pointer to UART object
	pU = pUART;

	// Set baud rate for the mShield UART
	// NOTE: This baud rate is fixed and cannot be changed
	uart.begin(UART_BAUD_RATE);
    7818:	2196      	movs	r1, #150	; 0x96
	pU = pUART;
    781a:	4b04      	ldr	r3, [pc, #16]	; (782c <_Z9hdlc_initP14HardwareSerialm+0x18>)
	uart.begin(UART_BAUD_RATE);
    781c:	0209      	lsls	r1, r1, #8
	pU = pUART;
    781e:	6018      	str	r0, [r3, #0]
	uart.begin(UART_BAUD_RATE);
    7820:	6803      	ldr	r3, [r0, #0]
    7822:	69db      	ldr	r3, [r3, #28]
    7824:	4798      	blx	r3
	
	// Set the max payload size
	max_payload_size = max_info_len;
    7826:	4b02      	ldr	r3, [pc, #8]	; (7830 <_Z9hdlc_initP14HardwareSerialm+0x1c>)
    7828:	601c      	str	r4, [r3, #0]

} // hdlc_set_serial
    782a:	bd10      	pop	{r4, pc}
    782c:	20001cd4 	.word	0x20001cd4
    7830:	20001cd0 	.word	0x20001cd0

00007834 <_Z14hdlc_control_ihhh>:


uint8_t
hdlc_control_i(uint8_t nr, uint8_t ns, uint8_t pf)
{
    return ((nr & 0x07) << 5) | ((pf  & 0x01) << 4) | ((ns & 0x07) << 1);
    7834:	2310      	movs	r3, #16
    7836:	0112      	lsls	r2, r2, #4
    7838:	401a      	ands	r2, r3
    783a:	0140      	lsls	r0, r0, #5
    783c:	4310      	orrs	r0, r2
    783e:	220e      	movs	r2, #14
    7840:	0049      	lsls	r1, r1, #1
    7842:	4011      	ands	r1, r2
    7844:	4308      	orrs	r0, r1
    7846:	b2c0      	uxtb	r0, r0
}    
    7848:	4770      	bx	lr

0000784a <_Z15hdlc_control_rrhh>:

uint8_t
hdlc_control_rr(uint8_t nr, uint8_t pf)
{
   return ((nr & 0x07) << 5) | ((pf & 0x01) << 4) | 0x01;
    784a:	2310      	movs	r3, #16
    784c:	0109      	lsls	r1, r1, #4
    784e:	4019      	ands	r1, r3
    7850:	0140      	lsls	r0, r0, #5
    7852:	4308      	orrs	r0, r1
    7854:	2101      	movs	r1, #1
    7856:	4308      	orrs	r0, r1
    7858:	b2c0      	uxtb	r0, r0
}
    785a:	4770      	bx	lr

0000785c <_Z12hdlc_controlhh>:
int16_t
hdlc_control(uint8_t type, uint8_t pf)
{
    uint8_t control;
    
    switch (type) {        
    785c:	3804      	subs	r0, #4
{
    785e:	b500      	push	{lr}
    switch (type) {        
    7860:	2805      	cmp	r0, #5
    7862:	d815      	bhi.n	7890 <_Z12hdlc_controlhh+0x34>
    7864:	f000 fe3c 	bl	84e0 <__gnu_thumb1_case_uqi>
    7868:	0c0a0312 	.word	0x0c0a0312
    786c:	100e      	.short	0x100e
        case HDLC_SNRM: control = 0x83; break;
        case HDLC_DISC: control = 0x43; break;
    786e:	2043      	movs	r0, #67	; 0x43
        case HDLC_UI:   control = 0x03; break;
        default:
            return HDLC_FC_INVALID;
    }

    if (pf) {
    7870:	2900      	cmp	r1, #0
    7872:	d001      	beq.n	7878 <_Z12hdlc_controlhh+0x1c>
        control |= 0x10;
    7874:	2310      	movs	r3, #16
    7876:	4318      	orrs	r0, r3
    }
    return control;
    7878:	b200      	sxth	r0, r0
}
    787a:	bd00      	pop	{pc}
        case HDLC_UA:   control = 0x63; break;
    787c:	2063      	movs	r0, #99	; 0x63
    787e:	e7f7      	b.n	7870 <_Z12hdlc_controlhh+0x14>
        case HDLC_DM:   control = 0x0F; break;
    7880:	200f      	movs	r0, #15
    7882:	e7f5      	b.n	7870 <_Z12hdlc_controlhh+0x14>
        case HDLC_FRMR: control = 0x87; break;
    7884:	2087      	movs	r0, #135	; 0x87
    7886:	e7f3      	b.n	7870 <_Z12hdlc_controlhh+0x14>
        case HDLC_UI:   control = 0x03; break;
    7888:	2003      	movs	r0, #3
    788a:	e7f1      	b.n	7870 <_Z12hdlc_controlhh+0x14>
        case HDLC_SNRM: control = 0x83; break;
    788c:	2083      	movs	r0, #131	; 0x83
    788e:	e7ef      	b.n	7870 <_Z12hdlc_controlhh+0x14>
            return HDLC_FC_INVALID;
    7890:	2001      	movs	r0, #1
    7892:	4240      	negs	r0, r0
    7894:	e7f1      	b.n	787a <_Z12hdlc_controlhh+0x1e>
	...

00007898 <_Z18hdlc_parse_controlhP9hdlc_ctrl>:


int
hdlc_parse_control(uint8_t ctrl, struct hdlc_ctrl *hc) 
                 //  uint8_t *type, uint8_t *pf, uint8_t *nr, uint8_t *ns)
{
    7898:	b570      	push	{r4, r5, r6, lr}
    789a:	000d      	movs	r5, r1
    uint8_t c2;
    int rc = 0;

    memset(hc, 0, sizeof (*hc));
    789c:	2604      	movs	r6, #4
{
    789e:	0004      	movs	r4, r0
    memset(hc, 0, sizeof (*hc));
    78a0:	0032      	movs	r2, r6
    78a2:	2100      	movs	r1, #0
    78a4:	0028      	movs	r0, r5
    78a6:	f003 ff8f 	bl	b7c8 <memset>

    if ((ctrl & 1) == 0) {              /* I frame */
    78aa:	2201      	movs	r2, #1
    78ac:	0023      	movs	r3, r4
    78ae:	1121      	asrs	r1, r4, #4
    78b0:	4013      	ands	r3, r2
    78b2:	d10f      	bne.n	78d4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x3c>
        hc->type = HDLC_I;
        hc->nr = (ctrl & 0xE0) >> 5;
    78b4:	0960      	lsrs	r0, r4, #5
        hc->pf = (ctrl & 0x10) >> 4;
        hc->ns = (ctrl & 0x0E) >> 1;
    78b6:	0724      	lsls	r4, r4, #28
        hc->type = HDLC_I;
    78b8:	702a      	strb	r2, [r5, #0]
        hc->ns = (ctrl & 0x0E) >> 1;
    78ba:	0f64      	lsrs	r4, r4, #29
        hc->pf = (ctrl & 0x10) >> 4;
    78bc:	400a      	ands	r2, r1
        hc->nr = (ctrl & 0xE0) >> 5;
    78be:	70a8      	strb	r0, [r5, #2]
        hc->pf = (ctrl & 0x10) >> 4;
    78c0:	706a      	strb	r2, [r5, #1]
        hc->ns = (ctrl & 0x0E) >> 1;
    78c2:	70ec      	strb	r4, [r5, #3]
    int rc = 0;
    78c4:	2400      	movs	r4, #0
            case 0x03:  hc->type = HDLC_UI;    break;
            default:
                rc = 1;     /* Unknown frame - error */
        }
    }
    dlog(LOG_DEBUG, "frame type: 0x%x", hc->type);
    78c6:	782a      	ldrb	r2, [r5, #0]
    78c8:	491c      	ldr	r1, [pc, #112]	; (793c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0xa4>)
    78ca:	2007      	movs	r0, #7
    78cc:	f7fc fca4 	bl	4218 <_Z4dlogiPKcz>

    return rc;
}
    78d0:	0020      	movs	r0, r4
    78d2:	bd70      	pop	{r4, r5, r6, pc}
    78d4:	230f      	movs	r3, #15
    78d6:	4023      	ands	r3, r4
    else if ((ctrl & 0x0F) == 1) {      /* RR frame */
    78d8:	2b01      	cmp	r3, #1
    78da:	d106      	bne.n	78ea <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x52>
        hc->type = HDLC_RR;
    78dc:	2202      	movs	r2, #2
        hc->nr = (ctrl & 0xE0) >> 5;
    78de:	0964      	lsrs	r4, r4, #5
        hc->pf = (ctrl & 0x10) >> 4;
    78e0:	400b      	ands	r3, r1
        hc->type = HDLC_RR;
    78e2:	702a      	strb	r2, [r5, #0]
        hc->nr = (ctrl & 0xE0) >> 5;
    78e4:	70ac      	strb	r4, [r5, #2]
        hc->pf = (ctrl & 0x10) >> 4;
    78e6:	706b      	strb	r3, [r5, #1]
    78e8:	e7ec      	b.n	78c4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
    else if ((ctrl & 0x0F) == 5) {      /* RNR frame */
    78ea:	2b05      	cmp	r3, #5
    78ec:	d106      	bne.n	78fc <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x64>
        hc->type = HDLC_RNR;
    78ee:	3b02      	subs	r3, #2
        hc->nr = (ctrl & 0xE0) >> 5;
    78f0:	0964      	lsrs	r4, r4, #5
        hc->pf  = (ctrl & 0x10) >> 4;
    78f2:	400a      	ands	r2, r1
        hc->type = HDLC_RNR;
    78f4:	702b      	strb	r3, [r5, #0]
        hc->nr = (ctrl & 0xE0) >> 5;
    78f6:	70ac      	strb	r4, [r5, #2]
        hc->pf  = (ctrl & 0x10) >> 4;
    78f8:	706a      	strb	r2, [r5, #1]
    78fa:	e7e3      	b.n	78c4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
        switch (c2) {
    78fc:	2310      	movs	r3, #16
        hc->pf = (ctrl & 0x10) >> 4;
    78fe:	400a      	ands	r2, r1
    7900:	706a      	strb	r2, [r5, #1]
        switch (c2) {
    7902:	439c      	bics	r4, r3
    7904:	2c43      	cmp	r4, #67	; 0x43
    7906:	d011      	beq.n	792c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x94>
    7908:	d806      	bhi.n	7918 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x80>
    790a:	2c03      	cmp	r4, #3
    790c:	d013      	beq.n	7936 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x9e>
            case 0x0F:  hc->type = HDLC_DM;    break;
    790e:	2307      	movs	r3, #7
        switch (c2) {
    7910:	2c0f      	cmp	r4, #15
    7912:	d00c      	beq.n	792e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
                rc = 1;     /* Unknown frame - error */
    7914:	2401      	movs	r4, #1
    7916:	e7d6      	b.n	78c6 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2e>
        switch (c2) {
    7918:	2c83      	cmp	r4, #131	; 0x83
    791a:	d005      	beq.n	7928 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x90>
    791c:	2c87      	cmp	r4, #135	; 0x87
    791e:	d008      	beq.n	7932 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x9a>
    7920:	2c63      	cmp	r4, #99	; 0x63
    7922:	d1f7      	bne.n	7914 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x7c>
            case 0x63:  hc->type = HDLC_UA;    break;
    7924:	2306      	movs	r3, #6
    7926:	e002      	b.n	792e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
            case 0x83:  hc->type = HDLC_SNRM;  break;
    7928:	702e      	strb	r6, [r5, #0]
    792a:	e7cb      	b.n	78c4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
            case 0x43:  hc->type = HDLC_DISC;  break;
    792c:	2305      	movs	r3, #5
            case 0x03:  hc->type = HDLC_UI;    break;
    792e:	702b      	strb	r3, [r5, #0]
    7930:	e7c8      	b.n	78c4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
            case 0x87:  hc->type = HDLC_FRMR;  break;
    7932:	2308      	movs	r3, #8
    7934:	e7fb      	b.n	792e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
            case 0x03:  hc->type = HDLC_UI;    break;
    7936:	2309      	movs	r3, #9
    7938:	e7f9      	b.n	792e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
    793a:	46c0      	nop			; (mov r8, r8)
    793c:	000109c0 	.word	0x000109c0

00007940 <_Z16hdlc_addr_encodem>:
 * Limited to single byte encoding only
*/
uint8_t
hdlc_addr_encode(uint32_t address)
{    
    return ((address & 0x7F) << 1) | 1;
    7940:	0043      	lsls	r3, r0, #1
    7942:	2001      	movs	r0, #1
    7944:	4318      	orrs	r0, r3
    7946:	b2c0      	uxtb	r0, r0
}
    7948:	4770      	bx	lr

0000794a <_Z15hdlc_parse_addrPKhiPmPi>:
 *              0 means input was found incomplete
 */

int
hdlc_parse_addr(const uint8_t *buf, int len, uint32_t *eaddr, int *al)
{
    794a:	b570      	push	{r4, r5, r6, lr}
    *eaddr = 0;
    794c:	2400      	movs	r4, #0
    794e:	2501      	movs	r5, #1
{
    7950:	0006      	movs	r6, r0
    *eaddr = 0;
    7952:	6014      	str	r4, [r2, #0]
        goto err;
    }
    
    return 0;
err:
    return 1;
    7954:	0028      	movs	r0, r5
    *al = 0;
    7956:	601c      	str	r4, [r3, #0]
    if ((len >= 1) &&(buf[0] & 1)) {
    7958:	42a1      	cmp	r1, r4
    795a:	dd05      	ble.n	7968 <_Z15hdlc_parse_addrPKhiPmPi+0x1e>
    795c:	7831      	ldrb	r1, [r6, #0]
    795e:	4229      	tst	r1, r5
    7960:	d002      	beq.n	7968 <_Z15hdlc_parse_addrPKhiPmPi+0x1e>
    return 0;
    7962:	0020      	movs	r0, r4
        memcpy(eaddr, buf, 1);
    7964:	7011      	strb	r1, [r2, #0]
        *al = 1;               
    7966:	601d      	str	r5, [r3, #0]
}
    7968:	bd70      	pop	{r4, r5, r6, pc}
	...

0000796c <_Z8hdlc_hdrismmPhPi>:
 *
 */
int
hdlc_hdr(int segment, int16_t fcontrol, uint32_t dst, uint32_t src,
    uint8_t *buf, int *hdrlen)
{
    796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    796e:	9c06      	ldr	r4, [sp, #24]
    7970:	001e      	movs	r6, r3
    7972:	000d      	movs	r5, r1
    7974:	0017      	movs	r7, r2
    hcs = crc16(crc16_init(), buf, *hdrlen - 2);
    buf_wle16(b, 0, ~hcs);
   
    return 0;
err:
    return 1;
    7976:	2301      	movs	r3, #1
    if (fcontrol == HDLC_FC_INVALID || dst > 0x7f || src > 0x7f) {
    7978:	1c4a      	adds	r2, r1, #1
    797a:	d021      	beq.n	79c0 <_Z8hdlc_hdrismmPhPi+0x54>
    797c:	2f7f      	cmp	r7, #127	; 0x7f
    797e:	d81f      	bhi.n	79c0 <_Z8hdlc_hdrismmPhPi+0x54>
    7980:	2e7f      	cmp	r6, #127	; 0x7f
    7982:	d81d      	bhi.n	79c0 <_Z8hdlc_hdrismmPhPi+0x54>
    *hdrlen = HDLC_HDR_SIZE;   /* incl. two bytes of HCS */ 
    7984:	2207      	movs	r2, #7
    7986:	9b07      	ldr	r3, [sp, #28]
    7988:	601a      	str	r2, [r3, #0]
    buf_wbe16(buf, 0, 0xA000 | (segment ? 0x0800 : 0) | *hdrlen);
    798a:	2800      	cmp	r0, #0
    798c:	d11a      	bne.n	79c4 <_Z8hdlc_hdrismmPhPi+0x58>
    798e:	4b0e      	ldr	r3, [pc, #56]	; (79c8 <_Z8hdlc_hdrismmPhPi+0x5c>)
    7990:	431a      	orrs	r2, r3
    7992:	b292      	uxth	r2, r2
    7994:	2100      	movs	r1, #0
    7996:	0020      	movs	r0, r4
    7998:	f000 fab3 	bl	7f02 <_Z9buf_wbe16Pvit>
    *b++ = dst;     //hdlc_addr_encode(dst);
    799c:	70a7      	strb	r7, [r4, #2]
    *b++ = src;     //hdlc_addr_encode(src);
    799e:	70e6      	strb	r6, [r4, #3]
    *b++ = fcontrol;
    79a0:	7125      	strb	r5, [r4, #4]
    hcs = crc16(crc16_init(), buf, *hdrlen - 2);
    79a2:	f000 fac1 	bl	7f28 <_Z10crc16_initv>
    79a6:	9b07      	ldr	r3, [sp, #28]
    79a8:	0021      	movs	r1, r4
    79aa:	681a      	ldr	r2, [r3, #0]
    79ac:	3a02      	subs	r2, #2
    79ae:	f000 fabf 	bl	7f30 <_Z5crc16tPKvj>
    buf_wle16(b, 0, ~hcs);
    79b2:	43c2      	mvns	r2, r0
    79b4:	2100      	movs	r1, #0
    79b6:	b292      	uxth	r2, r2
    *b++ = fcontrol;
    79b8:	1d60      	adds	r0, r4, #5
    buf_wle16(b, 0, ~hcs);
    79ba:	f000 faa7 	bl	7f0c <_Z9buf_wle16Pvit>
    return 0;
    79be:	2300      	movs	r3, #0
}
    79c0:	0018      	movs	r0, r3
    79c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf_wbe16(buf, 0, 0xA000 | (segment ? 0x0800 : 0) | *hdrlen);
    79c4:	4b01      	ldr	r3, [pc, #4]	; (79cc <_Z8hdlc_hdrismmPhPi+0x60>)
    79c6:	e7e3      	b.n	7990 <_Z8hdlc_hdrismmPhPi+0x24>
    79c8:	ffffa000 	.word	0xffffa000
    79cc:	ffffa800 	.word	0xffffa800

000079d0 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_>:
 * at the tail of info
 */
int
hdlc_frm_add_info(const uint8_t *hdr, uint8_t *fhdr, 
    const uint8_t *info, int infolen, uint8_t *fmfcs)
{
    79d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    79d2:	000d      	movs	r5, r1
    int fmt, hdrlen;
    uint16_t hcs, fcs;
    
    fmt = buf_be16(hdr, 0);
    79d4:	2100      	movs	r1, #0
{
    79d6:	0007      	movs	r7, r0
    79d8:	9201      	str	r2, [sp, #4]
    79da:	001e      	movs	r6, r3
    fmt = buf_be16(hdr, 0);
    79dc:	f000 fa8b 	bl	7ef6 <_Z8buf_be16PKvi>
    79e0:	0544      	lsls	r4, r0, #21
    79e2:	9000      	str	r0, [sp, #0]
    79e4:	0d64      	lsrs	r4, r4, #21
    hdrlen = fmt & 0x07FF;
    fmt = fmt & 0xF800;

    if (hdrlen > HDLC_HDR_MAX) {
        return 1;
    79e6:	2001      	movs	r0, #1
    if (hdrlen > HDLC_HDR_MAX) {
    79e8:	2c07      	cmp	r4, #7
    79ea:	d830      	bhi.n	7a4e <_Z17hdlc_frm_add_infoPKhPhS0_iS1_+0x7e>
    }

    memcpy(fhdr, hdr, hdrlen);
    79ec:	0022      	movs	r2, r4
    79ee:	0039      	movs	r1, r7
    79f0:	0028      	movs	r0, r5
    79f2:	f003 fece 	bl	b792 <memcpy>
        fcs = crc16(crc16_init(), fhdr, hdrlen);
        fcs = crc16(fcs, info, infolen);
        /* final byte order - ready to be appended to frame */
        buf_wle16(fmfcs, 0, ~fcs);
    }
    return 0;
    79f6:	2000      	movs	r0, #0
    if (infolen > 0) {           
    79f8:	4286      	cmp	r6, r0
    79fa:	dd28      	ble.n	7a4e <_Z17hdlc_frm_add_infoPKhPhS0_iS1_+0x7e>
        buf_wbe16(fhdr, 0, fmt | (hdrlen + infolen + 2));
    79fc:	9b00      	ldr	r3, [sp, #0]
    79fe:	1cb2      	adds	r2, r6, #2
    7a00:	0adb      	lsrs	r3, r3, #11
    7a02:	02db      	lsls	r3, r3, #11
    7a04:	18a2      	adds	r2, r4, r2
    7a06:	431a      	orrs	r2, r3
    7a08:	0001      	movs	r1, r0
    7a0a:	b292      	uxth	r2, r2
    7a0c:	0028      	movs	r0, r5
        hcs = crc16(crc16_init(), fhdr, hdrlen - 2);
    7a0e:	1ea7      	subs	r7, r4, #2
        buf_wbe16(fhdr, 0, fmt | (hdrlen + infolen + 2));
    7a10:	f000 fa77 	bl	7f02 <_Z9buf_wbe16Pvit>
        hcs = crc16(crc16_init(), fhdr, hdrlen - 2);
    7a14:	f000 fa88 	bl	7f28 <_Z10crc16_initv>
    7a18:	003a      	movs	r2, r7
    7a1a:	0029      	movs	r1, r5
    7a1c:	f000 fa88 	bl	7f30 <_Z5crc16tPKvj>
        buf_wle16(fhdr, hdrlen - 2, ~hcs);
    7a20:	43c2      	mvns	r2, r0
    7a22:	0039      	movs	r1, r7
    7a24:	b292      	uxth	r2, r2
    7a26:	0028      	movs	r0, r5
    7a28:	f000 fa70 	bl	7f0c <_Z9buf_wle16Pvit>
        fcs = crc16(crc16_init(), fhdr, hdrlen);
    7a2c:	f000 fa7c 	bl	7f28 <_Z10crc16_initv>
    7a30:	0022      	movs	r2, r4
    7a32:	0029      	movs	r1, r5
    7a34:	f000 fa7c 	bl	7f30 <_Z5crc16tPKvj>
        fcs = crc16(fcs, info, infolen);
    7a38:	0032      	movs	r2, r6
    7a3a:	9901      	ldr	r1, [sp, #4]
    7a3c:	f000 fa78 	bl	7f30 <_Z5crc16tPKvj>
        buf_wle16(fmfcs, 0, ~fcs);
    7a40:	43c2      	mvns	r2, r0
    7a42:	2100      	movs	r1, #0
    7a44:	9808      	ldr	r0, [sp, #32]
    7a46:	b292      	uxth	r2, r2
    7a48:	f000 fa60 	bl	7f0c <_Z9buf_wle16Pvit>
    return 0;
    7a4c:	2000      	movs	r0, #0

}
    7a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00007a50 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi>:
#define HDLC_PARSE_SHORT    (1)
#define HDLC_PARSE_HDR_ERR  (2)

int
hdlc_parse_hdr(struct hdlc_hdr_fields *hh, const uint8_t *buf, int buflen)
{
    7a50:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7a52:	0004      	movs	r4, r0
    7a54:	000d      	movs	r5, r1
    7a56:	0016      	movs	r6, r2
    int dlen, slen;
    int rc;

    if (buflen < HDLC_HDR_SIZE) { /* don't bother parsing, need more */
        return HDLC_PARSE_SHORT;
    7a58:	2001      	movs	r0, #1
    if (buflen < HDLC_HDR_SIZE) { /* don't bother parsing, need more */
    7a5a:	2a06      	cmp	r2, #6
    7a5c:	dd06      	ble.n	7a6c <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>
    }

    /* Confirm type 3 */
    if ((buf[0] & 0xF0) != 0xA0) {
    7a5e:	780b      	ldrb	r3, [r1, #0]
    7a60:	220f      	movs	r2, #15
    7a62:	0019      	movs	r1, r3
    7a64:	4391      	bics	r1, r2
    7a66:	29a0      	cmp	r1, #160	; 0xa0
    7a68:	d001      	beq.n	7a6e <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1e>
        return HDLC_PARSE_HDR_ERR;
    7a6a:	2002      	movs	r0, #2
    return 0;

err:
    return HDLC_PARSE_HDR_ERR;

}
    7a6c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    hh->segment = buf[0] & 0x08;
    7a6e:	2208      	movs	r2, #8
    7a70:	4013      	ands	r3, r2
    7a72:	60e3      	str	r3, [r4, #12]
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    7a74:	2100      	movs	r1, #0
    7a76:	0028      	movs	r0, r5
    7a78:	f000 fa3d 	bl	7ef6 <_Z8buf_be16PKvi>
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    7a7c:	0022      	movs	r2, r4
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    7a7e:	0540      	lsls	r0, r0, #21
    7a80:	0d40      	lsrs	r0, r0, #21
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    7a82:	3e02      	subs	r6, #2
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    7a84:	6020      	str	r0, [r4, #0]
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    7a86:	466b      	mov	r3, sp
    7a88:	1ca8      	adds	r0, r5, #2
    7a8a:	3214      	adds	r2, #20
    7a8c:	0031      	movs	r1, r6
    7a8e:	f7ff ff5c 	bl	794a <_Z15hdlc_parse_addrPKhiPmPi>
    if (rc || dlen < 1) {
    7a92:	2800      	cmp	r0, #0
    7a94:	d1e9      	bne.n	7a6a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    7a96:	9800      	ldr	r0, [sp, #0]
    7a98:	2800      	cmp	r0, #0
    7a9a:	dde6      	ble.n	7a6a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    rc = hdlc_parse_addr(buf + 2 + dlen, buflen - 2 - dlen, &hh->src, &slen);
    7a9c:	0022      	movs	r2, r4
    7a9e:	1a31      	subs	r1, r6, r0
    7aa0:	3002      	adds	r0, #2
    7aa2:	1828      	adds	r0, r5, r0
    7aa4:	ab01      	add	r3, sp, #4
    7aa6:	3218      	adds	r2, #24
    7aa8:	f7ff ff4f 	bl	794a <_Z15hdlc_parse_addrPKhiPmPi>
    if (rc || slen < 1) {
    7aac:	2800      	cmp	r0, #0
    7aae:	d1dc      	bne.n	7a6a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    7ab0:	9a01      	ldr	r2, [sp, #4]
    7ab2:	2a00      	cmp	r2, #0
    7ab4:	ddd9      	ble.n	7a6a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    hh->hdrlen = 2 + dlen + slen + 1 + 2;
    7ab6:	9b00      	ldr	r3, [sp, #0]
    if (crc16_validate(buf, hh->hdrlen)) {
    7ab8:	0028      	movs	r0, r5
    hh->hdrlen = 2 + dlen + slen + 1 + 2;
    7aba:	3302      	adds	r3, #2
    7abc:	189b      	adds	r3, r3, r2
    7abe:	1cd9      	adds	r1, r3, #3
    7ac0:	6061      	str	r1, [r4, #4]
    hh->control = buf[2 + dlen + slen];
    7ac2:	5ceb      	ldrb	r3, [r5, r3]
    7ac4:	7423      	strb	r3, [r4, #16]
    if (crc16_validate(buf, hh->hdrlen)) {
    7ac6:	f000 fa45 	bl	7f54 <_Z14crc16_validatePKvj>
    7aca:	2800      	cmp	r0, #0
    7acc:	d1cd      	bne.n	7a6a <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    if (hh->framelen > hh->hdrlen + 2) {
    7ace:	6862      	ldr	r2, [r4, #4]
    7ad0:	6823      	ldr	r3, [r4, #0]
    7ad2:	1c91      	adds	r1, r2, #2
    7ad4:	428b      	cmp	r3, r1
    7ad6:	dd03      	ble.n	7ae0 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x90>
        hh->infolen = hh->framelen - hh->hdrlen - 2;
    7ad8:	1a9b      	subs	r3, r3, r2
    7ada:	3b02      	subs	r3, #2
    7adc:	60a3      	str	r3, [r4, #8]
    7ade:	e7c5      	b.n	7a6c <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>
        hh->infolen = 0;
    7ae0:	60a0      	str	r0, [r4, #8]
    7ae2:	e7c3      	b.n	7a6c <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>

00007ae4 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params>:


/* Fill param negotiation information IEC 62056-46 6.4.4.4.3.2 */
int
hdlc_fill_snrm_param(uint8_t *buf, uint32_t buflen, uint32_t *rsplen,
                     struct hdlc_snrm_params *hsp){
    7ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Based on example in IEC doc*/
    uint8_t param_template[] = {0x81, 0x80, 0x14,
                                0x05, 0x02, 0x01, 0x00,
                                0x06, 0x02, 0x01, 0x00,
                                0x07, 0x04, 0x00, 0x00, 0x00, 0x01,
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    7ae6:	2617      	movs	r6, #23
                     struct hdlc_snrm_params *hsp){
    7ae8:	b089      	sub	sp, #36	; 0x24
    7aea:	9101      	str	r1, [sp, #4]
    7aec:	0004      	movs	r4, r0
    7aee:	0017      	movs	r7, r2
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    7af0:	4914      	ldr	r1, [pc, #80]	; (7b44 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x60>)
    7af2:	0032      	movs	r2, r6
    7af4:	a802      	add	r0, sp, #8
                     struct hdlc_snrm_params *hsp){
    7af6:	001d      	movs	r5, r3
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    7af8:	f003 fe4b 	bl	b792 <memcpy>

    if (!buf || buflen < sizeof(param_template)) {
        return 1;
    7afc:	2001      	movs	r0, #1
    if (!buf || buflen < sizeof(param_template)) {
    7afe:	2c00      	cmp	r4, #0
    7b00:	d01d      	beq.n	7b3e <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x5a>
    7b02:	9b01      	ldr	r3, [sp, #4]
    7b04:	2b16      	cmp	r3, #22
    7b06:	d91a      	bls.n	7b3e <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x5a>
    }

    memcpy(buf, param_template, sizeof(param_template));
    7b08:	0032      	movs	r2, r6
    7b0a:	a902      	add	r1, sp, #8
    7b0c:	0020      	movs	r0, r4
    7b0e:	f003 fe40 	bl	b792 <memcpy>

    buf_wbe16(buf, 5, hsp->max_info_tx);
    7b12:	882a      	ldrh	r2, [r5, #0]
    7b14:	2105      	movs	r1, #5
    7b16:	0020      	movs	r0, r4
    7b18:	f000 f9f3 	bl	7f02 <_Z9buf_wbe16Pvit>
    buf_wbe16(buf, 9, hsp->max_info_rx);
    7b1c:	88aa      	ldrh	r2, [r5, #4]
    7b1e:	2109      	movs	r1, #9
    7b20:	0020      	movs	r0, r4
    7b22:	f000 f9ee 	bl	7f02 <_Z9buf_wbe16Pvit>

    buf_wbe32(buf, 13, hsp->window_tx);
    7b26:	68aa      	ldr	r2, [r5, #8]
    7b28:	210d      	movs	r1, #13
    7b2a:	0020      	movs	r0, r4
    7b2c:	f000 f9f3 	bl	7f16 <_Z9buf_wbe32Pvim>
    buf_wbe32(buf, 19, hsp->window_rx);
    7b30:	0020      	movs	r0, r4
    7b32:	68ea      	ldr	r2, [r5, #12]
    7b34:	2113      	movs	r1, #19
    7b36:	f000 f9ee 	bl	7f16 <_Z9buf_wbe32Pvim>

    *rsplen = sizeof(param_template);

    return 0;
    7b3a:	2000      	movs	r0, #0
    *rsplen = sizeof(param_template);
    7b3c:	603e      	str	r6, [r7, #0]
}
    7b3e:	b009      	add	sp, #36	; 0x24
    7b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b42:	46c0      	nop			; (mov r8, r8)
    7b44:	0001095d 	.word	0x0001095d

00007b48 <_Z15hdlc_send_framePKhS0_i>:
 *****************************************************************************
 *****************************************************************************
 */

int hdlc_send_frame( const uint8_t *hdr, const uint8_t *info, int infolen )
{
    7b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b4a:	0007      	movs	r7, r0
    7b4c:	b089      	sub	sp, #36	; 0x24
    7b4e:	000e      	movs	r6, r1
    7b50:	0014      	movs	r4, r2
    uint8_t fcs[2];    
    int rc;
    int i;

    /* attach info if present */
    if (info && infolen > 0) {
    7b52:	2900      	cmp	r1, #0
    7b54:	d00b      	beq.n	7b6e <_Z15hdlc_send_framePKhS0_i+0x26>
    7b56:	2a00      	cmp	r2, #0
    7b58:	dd09      	ble.n	7b6e <_Z15hdlc_send_framePKhS0_i+0x26>
        if ((rc = hdlc_frm_add_info(hdr, fhdr, info, infolen, fcs))) {
    7b5a:	ab05      	add	r3, sp, #20
    7b5c:	9300      	str	r3, [sp, #0]
    7b5e:	0013      	movs	r3, r2
    7b60:	000a      	movs	r2, r1
    7b62:	a906      	add	r1, sp, #24
    7b64:	f7ff ff34 	bl	79d0 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_>
    7b68:	2800      	cmp	r0, #0
    7b6a:	d11a      	bne.n	7ba2 <_Z15hdlc_send_framePKhS0_i+0x5a>
            return -1;
        }
        hdr = fhdr;
    7b6c:	af06      	add	r7, sp, #24
    }

	// Log
    log_msg("HDLC send frame", hdr, HDLC_HDR_SIZE, 0);
    7b6e:	2207      	movs	r2, #7
    7b70:	0039      	movs	r1, r7
    7b72:	2300      	movs	r3, #0
    7b74:	4826      	ldr	r0, [pc, #152]	; (7c10 <_Z15hdlc_send_framePKhS0_i+0xc8>)
    7b76:	f7fc fbad 	bl	42d4 <_Z7log_msgPKcPKvii>

	// Send frame delimiter
    uart.write(fs);
    7b7a:	4d26      	ldr	r5, [pc, #152]	; (7c14 <_Z15hdlc_send_framePKhS0_i+0xcc>)
    7b7c:	217e      	movs	r1, #126	; 0x7e
    7b7e:	6828      	ldr	r0, [r5, #0]
    7b80:	6803      	ldr	r3, [r0, #0]
    7b82:	681b      	ldr	r3, [r3, #0]
    7b84:	4798      	blx	r3

	// Send header
    /* TODO: Is this a problem on Arduino? */
	/* Need to know why the first char is dropped on uart */
	rc = uart.write( hdr, HDLC_HDR_SIZE );
    7b86:	6828      	ldr	r0, [r5, #0]
    7b88:	0039      	movs	r1, r7
    7b8a:	6803      	ldr	r3, [r0, #0]
    7b8c:	2207      	movs	r2, #7
    7b8e:	685b      	ldr	r3, [r3, #4]
    7b90:	4798      	blx	r3
    7b92:	0007      	movs	r7, r0
    if (rc != HDLC_HDR_SIZE) 
    7b94:	2807      	cmp	r0, #7
    7b96:	d007      	beq.n	7ba8 <_Z15hdlc_send_framePKhS0_i+0x60>
	{
		dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_HDR_SIZE );
    7b98:	2207      	movs	r2, #7
    7b9a:	0010      	movs	r0, r2
    7b9c:	491e      	ldr	r1, [pc, #120]	; (7c18 <_Z15hdlc_send_framePKhS0_i+0xd0>)

		// Write CRC-16
        rc = uart.write(fcs, HDLC_CRC_SIZE);
		if (rc != HDLC_CRC_SIZE) 
		{
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_CRC_SIZE );
    7b9e:	f7fc fb3b 	bl	4218 <_Z4dlogiPKcz>
            return -1;
    7ba2:	2001      	movs	r0, #1
    7ba4:	4240      	negs	r0, r0
    7ba6:	e031      	b.n	7c0c <_Z15hdlc_send_framePKhS0_i+0xc4>
    if (info && infolen > 0) 
    7ba8:	2e00      	cmp	r6, #0
    7baa:	d023      	beq.n	7bf4 <_Z15hdlc_send_framePKhS0_i+0xac>
    7bac:	2c00      	cmp	r4, #0
    7bae:	dd21      	ble.n	7bf4 <_Z15hdlc_send_framePKhS0_i+0xac>
        rc = uart.write(info, infolen);
    7bb0:	6828      	ldr	r0, [r5, #0]
    7bb2:	0022      	movs	r2, r4
    7bb4:	6803      	ldr	r3, [r0, #0]
    7bb6:	0031      	movs	r1, r6
    7bb8:	685b      	ldr	r3, [r3, #4]
    7bba:	4798      	blx	r3
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", infolen );
    7bbc:	0022      	movs	r2, r4
		if (rc != infolen) 
    7bbe:	4284      	cmp	r4, r0
    7bc0:	d109      	bne.n	7bd6 <_Z15hdlc_send_framePKhS0_i+0x8e>
        rc = uart.write(fcs, HDLC_CRC_SIZE);
    7bc2:	6828      	ldr	r0, [r5, #0]
    7bc4:	2202      	movs	r2, #2
    7bc6:	6803      	ldr	r3, [r0, #0]
    7bc8:	a905      	add	r1, sp, #20
    7bca:	685b      	ldr	r3, [r3, #4]
    7bcc:	4798      	blx	r3
    7bce:	9003      	str	r0, [sp, #12]
		if (rc != HDLC_CRC_SIZE) 
    7bd0:	2802      	cmp	r0, #2
    7bd2:	d003      	beq.n	7bdc <_Z15hdlc_send_framePKhS0_i+0x94>
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_CRC_SIZE );
    7bd4:	2202      	movs	r2, #2
    7bd6:	4910      	ldr	r1, [pc, #64]	; (7c18 <_Z15hdlc_send_framePKhS0_i+0xd0>)
    7bd8:	0038      	movs	r0, r7
    7bda:	e7e0      	b.n	7b9e <_Z15hdlc_send_framePKhS0_i+0x56>
			return -1;
		}

        log_msg(NULL, info, infolen, 0);    
    7bdc:	2300      	movs	r3, #0
    7bde:	0022      	movs	r2, r4
    7be0:	0018      	movs	r0, r3
    7be2:	0031      	movs	r1, r6
    7be4:	f7fc fb76 	bl	42d4 <_Z7log_msgPKcPKvii>
        log_msg(NULL, fcs, HDLC_CRC_SIZE, 0);            
    7be8:	2300      	movs	r3, #0
    7bea:	9a03      	ldr	r2, [sp, #12]
    7bec:	a905      	add	r1, sp, #20
    7bee:	0018      	movs	r0, r3
    7bf0:	f7fc fb70 	bl	42d4 <_Z7log_msgPKcPKvii>

    }

    /* closing with FS.  Not shown in log */
    uart.write(fs);
    7bf4:	6828      	ldr	r0, [r5, #0]
    7bf6:	217e      	movs	r1, #126	; 0x7e
    7bf8:	6803      	ldr	r3, [r0, #0]
    7bfa:	681b      	ldr	r3, [r3, #0]
    7bfc:	4798      	blx	r3
    log_msg(NULL, NULL, 0, 1);  /* EOL */
    7bfe:	2200      	movs	r2, #0
    7c00:	2301      	movs	r3, #1
    7c02:	0010      	movs	r0, r2
    7c04:	0011      	movs	r1, r2
    7c06:	f7fc fb65 	bl	42d4 <_Z7log_msgPKcPKvii>

    return 0;
    7c0a:	2000      	movs	r0, #0
}
    7c0c:	b009      	add	sp, #36	; 0x24
    7c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c10:	00010974 	.word	0x00010974
    7c14:	20001cd4 	.word	0x20001cd4
    7c18:	00010984 	.word	0x00010984

00007c1c <_Z7hdlc_rxPhS_ii>:
	uint8_t * pPayload;
	uint16_t rx_len = 0;
	uint16_t frame_len = 0;
	struct hdlcux * pHUX = &hctx.hux;

    memset( pHUX, 0x0, sizeof(hctx.hux) );
    7c1c:	2286      	movs	r2, #134	; 0x86
{
    7c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c20:	b0c5      	sub	sp, #276	; 0x114
    7c22:	9002      	str	r0, [sp, #8]
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    7c24:	4885      	ldr	r0, [pc, #532]	; (7e3c <_Z7hdlc_rxPhS_ii+0x220>)
    7c26:	0052      	lsls	r2, r2, #1
{
    7c28:	9103      	str	r1, [sp, #12]
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    7c2a:	3010      	adds	r0, #16
    7c2c:	2100      	movs	r1, #0
{
    7c2e:	001d      	movs	r5, r3
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    7c30:	f003 fdca 	bl	b7c8 <memset>

	// Read UART for maximum 200 ms
	uart.setTimeout(READ_BUF_TIMEOUT);	 
    7c34:	21c8      	movs	r1, #200	; 0xc8
    7c36:	4c82      	ldr	r4, [pc, #520]	; (7e40 <_Z7hdlc_rxPhS_ii+0x224>)
    7c38:	0049      	lsls	r1, r1, #1
    7c3a:	6820      	ldr	r0, [r4, #0]
    7c3c:	f000 f947 	bl	7ece <_ZN6Stream10setTimeoutEm>

	// Wait for incoming HDLC frame
	elapsed = 0.0;
	timeout = (float) hdlc_frame_timeout;
    7c40:	0028      	movs	r0, r5
    7c42:	f001 fcf1 	bl	9628 <__aeabi_i2f>
	elapsed = 0.0;
    7c46:	2500      	movs	r5, #0
	timeout = (float) hdlc_frame_timeout;
    7c48:	1c06      	adds	r6, r0, #0
	while( elapsed < timeout ) 
    7c4a:	1c31      	adds	r1, r6, #0
    7c4c:	1c28      	adds	r0, r5, #0
    7c4e:	f000 fe17 	bl	8880 <__aeabi_fcmplt>
    7c52:	2800      	cmp	r0, #0
    7c54:	d04e      	beq.n	7cf4 <_Z7hdlc_rxPhS_ii+0xd8>
	{
		// Check if there is nothing at the UART
		if (!uart.available())
    7c56:	6820      	ldr	r0, [r4, #0]
    7c58:	6803      	ldr	r3, [r0, #0]
    7c5a:	691b      	ldr	r3, [r3, #16]
    7c5c:	4798      	blx	r3
    7c5e:	2800      	cmp	r0, #0
    7c60:	d10f      	bne.n	7c82 <_Z7hdlc_rxPhS_ii+0x66>
		{
			// Check if it is time to send Observe response message
			// The function call returns a flag that determines if Observe is turned on
			obs_flag = do_observe();
    7c62:	f7fe fea5 	bl	69b0 <_Z10do_observev>
			
#if defined(ARDUINO_ARCH_SAMD)
			if (obs_flag)
    7c66:	2800      	cmp	r0, #0
    7c68:	d005      	beq.n	7c76 <_Z7hdlc_rxPhS_ii+0x5a>
			{
				// The reading of the time on SAMD takes about 5.5 ms
				// Adjust the variable accordingly
				elapsed += 5.5;
    7c6a:	4976      	ldr	r1, [pc, #472]	; (7e44 <_Z7hdlc_rxPhS_ii+0x228>)
				continue;
			}
#endif
			// Sleep for 1 ms
			delay(MS_SLEEP);
			elapsed++;
    7c6c:	1c28      	adds	r0, r5, #0
    7c6e:	f000 fe65 	bl	893c <__aeabi_fadd>
    7c72:	1c05      	adds	r5, r0, #0
			continue;
    7c74:	e7e9      	b.n	7c4a <_Z7hdlc_rxPhS_ii+0x2e>
			delay(MS_SLEEP);
    7c76:	2001      	movs	r0, #1
    7c78:	f7fa fd2a 	bl	26d0 <delay>
			elapsed++;
    7c7c:	21fe      	movs	r1, #254	; 0xfe
    7c7e:	0589      	lsls	r1, r1, #22
    7c80:	e7f4      	b.n	7c6c <_Z7hdlc_rxPhS_ii+0x50>

  double parseDouble(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR);
  // double version of parseInt

  size_t readBytes( char *buffer, size_t length); // read chars from stream into buffer
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
    7c82:	2580      	movs	r5, #128	; 0x80
    7c84:	4f70      	ldr	r7, [pc, #448]	; (7e48 <_Z7hdlc_rxPhS_ii+0x22c>)
    7c86:	00ed      	lsls	r5, r5, #3
    7c88:	002a      	movs	r2, r5
    7c8a:	0039      	movs	r1, r7
    7c8c:	6820      	ldr	r0, [r4, #0]
    7c8e:	f000 f920 	bl	7ed2 <_ZN6Stream9readBytesEPcj>
    7c92:	0004      	movs	r4, r0
			
		} // if
		
		// Read the HDLC frame until time-out
		cnt = uart.readBytes( UART_Buf, UART_MAX_BUF_LEN );
		sprintf( buffer, "readBytes() count: %d", cnt );
    7c94:	0002      	movs	r2, r0
    7c96:	496d      	ldr	r1, [pc, #436]	; (7e4c <_Z7hdlc_rxPhS_ii+0x230>)
    7c98:	a804      	add	r0, sp, #16
    7c9a:	f004 fe61 	bl	c960 <siprintf>
		dlog( LOG_INFO, buffer );
    7c9e:	a904      	add	r1, sp, #16
    7ca0:	2006      	movs	r0, #6
    7ca2:	f7fc fab9 	bl	4218 <_Z4dlogiPKcz>
		capture_dump( UART_Buf, cnt );
    7ca6:	0021      	movs	r1, r4
    7ca8:	0038      	movs	r0, r7
    7caa:	f7fc fb9f 	bl	43ec <_Z12capture_dumpPhi>
		
		// Check if we received more bytes than there is space for in the receive buffer
		if ( cnt > UART_MAX_BUF_LEN )
    7cae:	42ac      	cmp	r4, r5
    7cb0:	d90d      	bls.n	7cce <_Z7hdlc_rxPhS_ii+0xb2>
		{
			// This should never happen as the readBytes method above already sets the limit
			dlog( LOG_DEBUG, "The UART receive buffer has overflown!" );
    7cb2:	4967      	ldr	r1, [pc, #412]	; (7e50 <_Z7hdlc_rxPhS_ii+0x234>)
    7cb4:	2007      	movs	r0, #7
    7cb6:	f7fc faaf 	bl	4218 <_Z4dlogiPKcz>
			sprintf( buffer, "We read %d bytes and the max is %d bytes.", cnt, UART_MAX_BUF_LEN );
    7cba:	4966      	ldr	r1, [pc, #408]	; (7e54 <_Z7hdlc_rxPhS_ii+0x238>)
    7cbc:	002b      	movs	r3, r5
    7cbe:	0022      	movs	r2, r4
    7cc0:	a804      	add	r0, sp, #16
    7cc2:	f004 fe4d 	bl	c960 <siprintf>
			dlog( LOG_DEBUG, buffer );
    7cc6:	a904      	add	r1, sp, #16
    7cc8:	2007      	movs	r0, #7
    7cca:	f7fc faa5 	bl	4218 <_Z4dlogiPKcz>
			
		} // if

		// Check for HDLC frame delimiters
		hctx.hu_state = HDLC_FRAME_BASE;
    7cce:	2300      	movs	r3, #0
    7cd0:	4e5a      	ldr	r6, [pc, #360]	; (7e3c <_Z7hdlc_rxPhS_ii+0x220>)
    7cd2:	7033      	strb	r3, [r6, #0]
		if (( UART_Buf[0] != HDLC_FLAG ) || ( UART_Buf[cnt-1] != HDLC_FLAG ))
    7cd4:	783b      	ldrb	r3, [r7, #0]
    7cd6:	2b7e      	cmp	r3, #126	; 0x7e
    7cd8:	d104      	bne.n	7ce4 <_Z7hdlc_rxPhS_ii+0xc8>
    7cda:	193b      	adds	r3, r7, r4
    7cdc:	3b01      	subs	r3, #1
    7cde:	781b      	ldrb	r3, [r3, #0]
    7ce0:	2b7e      	cmp	r3, #126	; 0x7e
    7ce2:	d009      	beq.n	7cf8 <_Z7hdlc_rxPhS_ii+0xdc>
		{
            ++hustats.hs_discard;  
    7ce4:	4a5c      	ldr	r2, [pc, #368]	; (7e58 <_Z7hdlc_rxPhS_ii+0x23c>)
			dlog( LOG_DEBUG, "Missing HDLC flag(s)" );
    7ce6:	495d      	ldr	r1, [pc, #372]	; (7e5c <_Z7hdlc_rxPhS_ii+0x240>)
            ++hustats.hs_discard;  
    7ce8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    7cea:	3301      	adds	r3, #1
    7cec:	6353      	str	r3, [r2, #52]	; 0x34
		rc = hu_hdlc_parse_hdr( pHdr, HDLC_HDR_SIZE, &hctx.hu_pend );
		if (rc) 
		{
			/* header parsing error - need to flush */
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
			dlog( LOG_DEBUG, "Bad hdr - flush" );
    7cee:	2007      	movs	r0, #7
    7cf0:	f7fc fa92 	bl	4218 <_Z4dlogiPKcz>
			return 0;
    7cf4:	2500      	movs	r5, #0
    7cf6:	e04b      	b.n	7d90 <_Z7hdlc_rxPhS_ii+0x174>
    if ((hdr[0] & 0xF0) != 0xA0) {  /* only Type 3 is supported */
    7cf8:	220f      	movs	r2, #15
    7cfa:	787b      	ldrb	r3, [r7, #1]
    7cfc:	4393      	bics	r3, r2
    7cfe:	2ba0      	cmp	r3, #160	; 0xa0
    7d00:	d106      	bne.n	7d10 <_Z7hdlc_rxPhS_ii+0xf4>
        if (crc16_validate(hdr, hdrlen)) {
    7d02:	2107      	movs	r1, #7
    7d04:	4856      	ldr	r0, [pc, #344]	; (7e60 <_Z7hdlc_rxPhS_ii+0x244>)
    7d06:	f000 f925 	bl	7f54 <_Z14crc16_validatePKvj>
    7d0a:	1e05      	subs	r5, r0, #0
    7d0c:	d100      	bne.n	7d10 <_Z7hdlc_rxPhS_ii+0xf4>
    7d0e:	e083      	b.n	7e18 <_Z7hdlc_rxPhS_ii+0x1fc>
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    7d10:	2304      	movs	r3, #4
			dlog( LOG_DEBUG, "Bad hdr - flush" );
    7d12:	4954      	ldr	r1, [pc, #336]	; (7e64 <_Z7hdlc_rxPhS_ii+0x248>)
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    7d14:	7033      	strb	r3, [r6, #0]
    7d16:	e7ea      	b.n	7cee <_Z7hdlc_rxPhS_ii+0xd2>
			
		} // if

		/* Header complete - always, working with fixed hdr size */
		/* Payload, if any, starts after the header */
		hctx.hu_state = HDLC_FRAME_HDR;
    7d18:	2301      	movs	r3, #1
    7d1a:	7033      	strb	r3, [r6, #0]
		pHUX->h_infoidx = HDLC_HDR_SIZE;
    7d1c:	0033      	movs	r3, r6
    7d1e:	2207      	movs	r2, #7
    7d20:	33ff      	adds	r3, #255	; 0xff
    7d22:	769a      	strb	r2, [r3, #26]
    frmlen = buf_be16(hdr, 0) & 0x07FF;
    7d24:	0029      	movs	r1, r5
    7d26:	484e      	ldr	r0, [pc, #312]	; (7e60 <_Z7hdlc_rxPhS_ii+0x244>)
    7d28:	f000 f8e5 	bl	7ef6 <_Z8buf_be16PKvi>
    7d2c:	0540      	lsls	r0, r0, #21
    7d2e:	0d40      	lsrs	r0, r0, #21
    7d30:	9600      	str	r6, [sp, #0]
	if ( frmlen < hdrlen )
    7d32:	2806      	cmp	r0, #6
    7d34:	d800      	bhi.n	7d38 <_Z7hdlc_rxPhS_ii+0x11c>
    7d36:	e078      	b.n	7e2a <_Z7hdlc_rxPhS_ii+0x20e>
	paylen = frmlen - hdrlen;
    7d38:	1fc3      	subs	r3, r0, #7
    if ( paylen && ( paylen < 3 ) )
    7d3a:	3808      	subs	r0, #8
	paylen = frmlen - hdrlen;
    7d3c:	b29b      	uxth	r3, r3
    if ( paylen && ( paylen < 3 ) )
    7d3e:	2801      	cmp	r0, #1
    7d40:	d800      	bhi.n	7d44 <_Z7hdlc_rxPhS_ii+0x128>
    7d42:	e072      	b.n	7e2a <_Z7hdlc_rxPhS_ii+0x20e>
    *infolen = paylen;
    7d44:	0032      	movs	r2, r6
    7d46:	32fe      	adds	r2, #254	; 0xfe
    7d48:	8393      	strh	r3, [r2, #28]
			dlog( LOG_DEBUG, "bad infolen - flush" );
		
		} // if
		
		// Check if the frame length equals the number of received bytes
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    7d4a:	9b00      	ldr	r3, [sp, #0]
    7d4c:	4a46      	ldr	r2, [pc, #280]	; (7e68 <_Z7hdlc_rxPhS_ii+0x24c>)
    7d4e:	33ff      	adds	r3, #255	; 0xff
    7d50:	7e9b      	ldrb	r3, [r3, #26]
    7d52:	8b92      	ldrh	r2, [r2, #28]
		rx_len = cnt - 2;
    7d54:	3c02      	subs	r4, #2
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    7d56:	189b      	adds	r3, r3, r2
    7d58:	b29b      	uxth	r3, r3
		rx_len = cnt - 2;
    7d5a:	b2a4      	uxth	r4, r4
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    7d5c:	9301      	str	r3, [sp, #4]
		if ( frame_len != rx_len )
    7d5e:	429c      	cmp	r4, r3
    7d60:	d019      	beq.n	7d96 <_Z7hdlc_rxPhS_ii+0x17a>
		{
			dlog( LOG_DEBUG, "The frame length doesn't match the number of received bytes" );
    7d62:	4942      	ldr	r1, [pc, #264]	; (7e6c <_Z7hdlc_rxPhS_ii+0x250>)
    7d64:	2007      	movs	r0, #7
    7d66:	f7fc fa57 	bl	4218 <_Z4dlogiPKcz>
			print("frame_len: ");	printnum(frame_len);	println("");
    7d6a:	4841      	ldr	r0, [pc, #260]	; (7e70 <_Z7hdlc_rxPhS_ii+0x254>)
    7d6c:	f7fc fafc 	bl	4368 <_Z5printPKc>
    7d70:	9801      	ldr	r0, [sp, #4]
    7d72:	f7fc fb25 	bl	43c0 <_Z8printnumi>
    7d76:	4e3f      	ldr	r6, [pc, #252]	; (7e74 <_Z7hdlc_rxPhS_ii+0x258>)
    7d78:	0030      	movs	r0, r6
    7d7a:	f7fc fb0b 	bl	4394 <_Z7printlnPKc>
			print("rx_len:    ");	printnum(rx_len);		println("");
    7d7e:	483e      	ldr	r0, [pc, #248]	; (7e78 <_Z7hdlc_rxPhS_ii+0x25c>)
    7d80:	f7fc faf2 	bl	4368 <_Z5printPKc>
    7d84:	0020      	movs	r0, r4
    7d86:	f7fc fb1b 	bl	43c0 <_Z8printnumi>
    7d8a:	0030      	movs	r0, r6
    7d8c:	f7fc fb02 	bl	4394 <_Z7printlnPKc>
    } // while

	// Time-out
	return 0;
	
} // hdlc_rx()
    7d90:	0028      	movs	r0, r5
    7d92:	b045      	add	sp, #276	; 0x114
    7d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( crc16_validate( pHdr, frame_len )) 
    7d96:	0021      	movs	r1, r4
    7d98:	4831      	ldr	r0, [pc, #196]	; (7e60 <_Z7hdlc_rxPhS_ii+0x244>)
    7d9a:	f000 f8db 	bl	7f54 <_Z14crc16_validatePKvj>
    7d9e:	2800      	cmp	r0, #0
    7da0:	d001      	beq.n	7da6 <_Z7hdlc_rxPhS_ii+0x18a>
			dlog( LOG_DEBUG, "Discard frame - CRC error" );
    7da2:	4936      	ldr	r1, [pc, #216]	; (7e7c <_Z7hdlc_rxPhS_ii+0x260>)
    7da4:	e03d      	b.n	7e22 <_Z7hdlc_rxPhS_ii+0x206>
		memcpy( hdr, pHdr, HDLC_HDR_SIZE );
    7da6:	2207      	movs	r2, #7
    7da8:	492d      	ldr	r1, [pc, #180]	; (7e60 <_Z7hdlc_rxPhS_ii+0x244>)
    7daa:	9802      	ldr	r0, [sp, #8]
    7dac:	f003 fcf1 	bl	b792 <memcpy>
		if (pHUX->h_infolen) 
    7db0:	4b2d      	ldr	r3, [pc, #180]	; (7e68 <_Z7hdlc_rxPhS_ii+0x24c>)
    7db2:	8b9c      	ldrh	r4, [r3, #28]
    7db4:	2c00      	cmp	r4, #0
    7db6:	d02a      	beq.n	7e0e <_Z7hdlc_rxPhS_ii+0x1f2>
				dlog( LOG_DEBUG, "Discard frame - bad info len" );
    7db8:	4931      	ldr	r1, [pc, #196]	; (7e80 <_Z7hdlc_rxPhS_ii+0x264>)
			if ( pHUX->h_infolen <= HDLC_CRC_SIZE ) 
    7dba:	2c02      	cmp	r4, #2
    7dbc:	dc00      	bgt.n	7dc0 <_Z7hdlc_rxPhS_ii+0x1a4>
    7dbe:	e796      	b.n	7cee <_Z7hdlc_rxPhS_ii+0xd2>
			if ( rx_len > max_payload_size )
    7dc0:	4d30      	ldr	r5, [pc, #192]	; (7e84 <_Z7hdlc_rxPhS_ii+0x268>)
			rx_len = pHUX->h_infolen - HDLC_CRC_SIZE;
    7dc2:	3c02      	subs	r4, #2
			if ( rx_len > max_payload_size )
    7dc4:	682b      	ldr	r3, [r5, #0]
			rx_len = pHUX->h_infolen - HDLC_CRC_SIZE;
    7dc6:	b2a4      	uxth	r4, r4
			if ( rx_len > max_payload_size )
    7dc8:	429c      	cmp	r4, r3
    7dca:	d90b      	bls.n	7de4 <_Z7hdlc_rxPhS_ii+0x1c8>
				dlog( LOG_DEBUG, "The HDLC payload is too large!" );
    7dcc:	492e      	ldr	r1, [pc, #184]	; (7e88 <_Z7hdlc_rxPhS_ii+0x26c>)
    7dce:	2007      	movs	r0, #7
    7dd0:	f7fc fa22 	bl	4218 <_Z4dlogiPKcz>
				sprintf( buffer, "We got %d bytes and the max is %d bytes.", rx_len, max_payload_size );
    7dd4:	492d      	ldr	r1, [pc, #180]	; (7e8c <_Z7hdlc_rxPhS_ii+0x270>)
    7dd6:	682b      	ldr	r3, [r5, #0]
    7dd8:	0022      	movs	r2, r4
    7dda:	a804      	add	r0, sp, #16
    7ddc:	f004 fdc0 	bl	c960 <siprintf>
				dlog( LOG_DEBUG, buffer );
    7de0:	a904      	add	r1, sp, #16
    7de2:	e784      	b.n	7cee <_Z7hdlc_rxPhS_ii+0xd2>
			memcpy( info, pPayload, rx_len );
    7de4:	0039      	movs	r1, r7
    7de6:	0022      	movs	r2, r4
    7de8:	3108      	adds	r1, #8
    7dea:	9803      	ldr	r0, [sp, #12]
    7dec:	f003 fcd1 	bl	b792 <memcpy>
			hctx.hu_state = HDLC_FRAME_INFO;
    7df0:	2302      	movs	r3, #2
    7df2:	9a00      	ldr	r2, [sp, #0]
    7df4:	7013      	strb	r3, [r2, #0]
		hframerecv++;
    7df6:	4a26      	ldr	r2, [pc, #152]	; (7e90 <_Z7hdlc_rxPhS_ii+0x274>)
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    7df8:	1c79      	adds	r1, r7, #1
		hframerecv++;
    7dfa:	6813      	ldr	r3, [r2, #0]
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    7dfc:	4825      	ldr	r0, [pc, #148]	; (7e94 <_Z7hdlc_rxPhS_ii+0x278>)
		hframerecv++;
    7dfe:	3301      	adds	r3, #1
    7e00:	6013      	str	r3, [r2, #0]
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    7e02:	2301      	movs	r3, #1
    7e04:	9a01      	ldr	r2, [sp, #4]
    7e06:	f7fc fa65 	bl	42d4 <_Z7log_msgPKcPKvii>
		return 1;
    7e0a:	2501      	movs	r5, #1
    7e0c:	e7c0      	b.n	7d90 <_Z7hdlc_rxPhS_ii+0x174>
			dlog( LOG_DEBUG, "Zero infolen" );
    7e0e:	4922      	ldr	r1, [pc, #136]	; (7e98 <_Z7hdlc_rxPhS_ii+0x27c>)
    7e10:	2007      	movs	r0, #7
    7e12:	f7fc fa01 	bl	4218 <_Z4dlogiPKcz>
    7e16:	e7ee      	b.n	7df6 <_Z7hdlc_rxPhS_ii+0x1da>
		if ( hctx.hu_pend == 2 ) 
    7e18:	6873      	ldr	r3, [r6, #4]
    7e1a:	2b02      	cmp	r3, #2
    7e1c:	d000      	beq.n	7e20 <_Z7hdlc_rxPhS_ii+0x204>
    7e1e:	e77b      	b.n	7d18 <_Z7hdlc_rxPhS_ii+0xfc>
			dlog( LOG_DEBUG, "hctx.hu_pend == 2" );
    7e20:	491e      	ldr	r1, [pc, #120]	; (7e9c <_Z7hdlc_rxPhS_ii+0x280>)
			dlog( LOG_DEBUG, "Discard frame - CRC error" );
    7e22:	2007      	movs	r0, #7
    7e24:	f7fc f9f8 	bl	4218 <_Z4dlogiPKcz>
			return 0;
    7e28:	e7b2      	b.n	7d90 <_Z7hdlc_rxPhS_ii+0x174>
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    7e2a:	2304      	movs	r3, #4
    7e2c:	9a00      	ldr	r2, [sp, #0]
			dlog( LOG_DEBUG, "bad infolen - flush" );
    7e2e:	491c      	ldr	r1, [pc, #112]	; (7ea0 <_Z7hdlc_rxPhS_ii+0x284>)
    7e30:	2007      	movs	r0, #7
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    7e32:	7013      	strb	r3, [r2, #0]
			dlog( LOG_DEBUG, "bad infolen - flush" );
    7e34:	f7fc f9f0 	bl	4218 <_Z4dlogiPKcz>
    7e38:	e787      	b.n	7d4a <_Z7hdlc_rxPhS_ii+0x12e>
    7e3a:	46c0      	nop			; (mov r8, r8)
    7e3c:	20001cd8 	.word	0x20001cd8
    7e40:	20001cd4 	.word	0x20001cd4
    7e44:	40b00000 	.word	0x40b00000
    7e48:	200018cc 	.word	0x200018cc
    7e4c:	000109d1 	.word	0x000109d1
    7e50:	000109e7 	.word	0x000109e7
    7e54:	00010a0e 	.word	0x00010a0e
    7e58:	20001df4 	.word	0x20001df4
    7e5c:	00010a38 	.word	0x00010a38
    7e60:	200018cd 	.word	0x200018cd
    7e64:	00010b4f 	.word	0x00010b4f
    7e68:	20001dd6 	.word	0x20001dd6
    7e6c:	00010a5f 	.word	0x00010a5f
    7e70:	00010a9b 	.word	0x00010a9b
    7e74:	0000fd92 	.word	0x0000fd92
    7e78:	00010aa7 	.word	0x00010aa7
    7e7c:	00010ab3 	.word	0x00010ab3
    7e80:	00010acd 	.word	0x00010acd
    7e84:	20001cd0 	.word	0x20001cd0
    7e88:	00010aea 	.word	0x00010aea
    7e8c:	00010b09 	.word	0x00010b09
    7e90:	20001ccc 	.word	0x20001ccc
    7e94:	00010b3f 	.word	0x00010b3f
    7e98:	00010b32 	.word	0x00010b32
    7e9c:	00010a4d 	.word	0x00010a4d
    7ea0:	00010b5f 	.word	0x00010b5f

00007ea4 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// protected method to read stream with timeout
int Stream::timedRead()
{
    7ea4:	b510      	push	{r4, lr}
    7ea6:	0004      	movs	r4, r0
  int c;
  _startMillis = millis();
    7ea8:	f7fa fbdc 	bl	2664 <millis>
    7eac:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
    7eae:	6823      	ldr	r3, [r4, #0]
    7eb0:	0020      	movs	r0, r4
    7eb2:	695b      	ldr	r3, [r3, #20]
    7eb4:	4798      	blx	r3
    if (c >= 0) return c;
    7eb6:	2800      	cmp	r0, #0
    7eb8:	da08      	bge.n	7ecc <_ZN6Stream9timedReadEv+0x28>
  } while(millis() - _startMillis < _timeout);
    7eba:	f7fa fbd3 	bl	2664 <millis>
    7ebe:	68e3      	ldr	r3, [r4, #12]
    7ec0:	1ac0      	subs	r0, r0, r3
  do {
    7ec2:	68a3      	ldr	r3, [r4, #8]
    7ec4:	4298      	cmp	r0, r3
    7ec6:	d3f2      	bcc.n	7eae <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
    7ec8:	2001      	movs	r0, #1
    7eca:	4240      	negs	r0, r0
}
    7ecc:	bd10      	pop	{r4, pc}

00007ece <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    7ece:	6081      	str	r1, [r0, #8]
}
    7ed0:	4770      	bx	lr

00007ed2 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    7ed2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7ed4:	000e      	movs	r6, r1
    7ed6:	000c      	movs	r4, r1
    7ed8:	9001      	str	r0, [sp, #4]
    7eda:	188d      	adds	r5, r1, r2
    7edc:	1ba7      	subs	r7, r4, r6
  size_t count = 0;
  while (count < length) {
    7ede:	42ac      	cmp	r4, r5
    7ee0:	d007      	beq.n	7ef2 <_ZN6Stream9readBytesEPcj+0x20>
    int c = timedRead();
    7ee2:	9801      	ldr	r0, [sp, #4]
    7ee4:	f7ff ffde 	bl	7ea4 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    7ee8:	2800      	cmp	r0, #0
    7eea:	db02      	blt.n	7ef2 <_ZN6Stream9readBytesEPcj+0x20>
    *buffer++ = (char)c;
    7eec:	7020      	strb	r0, [r4, #0]
    7eee:	3401      	adds	r4, #1
  while (count < length) {
    7ef0:	e7f4      	b.n	7edc <_ZN6Stream9readBytesEPcj+0xa>
    count++;
  }
  return count;
}
    7ef2:	0038      	movs	r0, r7
    7ef4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00007ef6 <_Z8buf_be16PKvi>:

uint16_t
buf_be16(const void *buf, int idx)
{
    const uint8_t *p = (const uint8_t *) buf;    
    return (p[idx + 1] | p[idx] << 8);
    7ef6:	1843      	adds	r3, r0, r1
    7ef8:	5c40      	ldrb	r0, [r0, r1]
    7efa:	785b      	ldrb	r3, [r3, #1]
    7efc:	0200      	lsls	r0, r0, #8
    7efe:	4318      	orrs	r0, r3
}
    7f00:	4770      	bx	lr

00007f02 <_Z9buf_wbe16Pvit>:
void
buf_wbe16(void *buf, int idx, uint16_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    7f02:	1841      	adds	r1, r0, r1
    *p++ = val >> 8;
    7f04:	1213      	asrs	r3, r2, #8
    7f06:	700b      	strb	r3, [r1, #0]
    *p = val & 0xFF;
    7f08:	704a      	strb	r2, [r1, #1]
	
} // buf_wbe16
    7f0a:	4770      	bx	lr

00007f0c <_Z9buf_wle16Pvit>:
void
buf_wle16(void *buf, int idx, uint16_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    7f0c:	1841      	adds	r1, r0, r1
    *p++ = val & 0xFF;
    7f0e:	700a      	strb	r2, [r1, #0]
    *p = val >> 8;
    7f10:	1212      	asrs	r2, r2, #8
    7f12:	704a      	strb	r2, [r1, #1]
}
    7f14:	4770      	bx	lr

00007f16 <_Z9buf_wbe32Pvim>:
void
buf_wbe32(void *buf, int idx, uint32_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    7f16:	1841      	adds	r1, r0, r1
    *p++ = val >> 24;
    7f18:	0e13      	lsrs	r3, r2, #24
    7f1a:	700b      	strb	r3, [r1, #0]
    *p++ = (val >> 16) & 0xFF;
    7f1c:	0c13      	lsrs	r3, r2, #16
    7f1e:	704b      	strb	r3, [r1, #1]
    *p++ = (val >> 8) & 0xFF;
    7f20:	0a13      	lsrs	r3, r2, #8
    7f22:	708b      	strb	r3, [r1, #2]
    *p = val & 0xFF;
    7f24:	70ca      	strb	r2, [r1, #3]
}
    7f26:	4770      	bx	lr

00007f28 <_Z10crc16_initv>:

uint16_t
crc16_init(void)
{
    return CRC16_INITIAL;
}
    7f28:	4800      	ldr	r0, [pc, #0]	; (7f2c <_Z10crc16_initv+0x4>)
    7f2a:	4770      	bx	lr
    7f2c:	0000ffff 	.word	0x0000ffff

00007f30 <_Z5crc16tPKvj>:

uint16_t
crc16(uint16_t crc, const  void *addr_v, unsigned int len)
{
    7f30:	b530      	push	{r4, r5, lr}
    const uint8_t *addr = (const uint8_t *)addr_v;
    uint8_t ch;

    while (len--) {
        ch = *addr++;
        crc = (crc >> 8) ^ xmodem_crctable[(crc ^ ch) & 0xFF]; 
    7f32:	25ff      	movs	r5, #255	; 0xff
    7f34:	4c06      	ldr	r4, [pc, #24]	; (7f50 <_Z5crc16tPKvj+0x20>)
    7f36:	188a      	adds	r2, r1, r2
    while (len--) {
    7f38:	4291      	cmp	r1, r2
    7f3a:	d008      	beq.n	7f4e <_Z5crc16tPKvj+0x1e>
        crc = (crc >> 8) ^ xmodem_crctable[(crc ^ ch) & 0xFF]; 
    7f3c:	780b      	ldrb	r3, [r1, #0]
    7f3e:	3101      	adds	r1, #1
    7f40:	4043      	eors	r3, r0
    7f42:	402b      	ands	r3, r5
    7f44:	005b      	lsls	r3, r3, #1
    7f46:	5b1b      	ldrh	r3, [r3, r4]
    7f48:	1200      	asrs	r0, r0, #8
    7f4a:	4058      	eors	r0, r3
    while (len--) {
    7f4c:	e7f4      	b.n	7f38 <_Z5crc16tPKvj+0x8>

    }
    return crc;
}    
    7f4e:	bd30      	pop	{r4, r5, pc}
    7f50:	00010b74 	.word	0x00010b74

00007f54 <_Z14crc16_validatePKvj>:
/* len includes the 2 bytes of CRC at the end of the buffer 
 * return 0 for OK, nonzero for error
 */
int
crc16_validate(const void *addr_v, unsigned int len)
{
    7f54:	b510      	push	{r4, lr}
    7f56:	000a      	movs	r2, r1
    return (crc16(CRC16_INITIAL, addr_v, len) != CRC16_FINAL);         
    7f58:	0001      	movs	r1, r0
    7f5a:	4804      	ldr	r0, [pc, #16]	; (7f6c <_Z14crc16_validatePKvj+0x18>)
    7f5c:	f7ff ffe8 	bl	7f30 <_Z5crc16tPKvj>
    7f60:	4b03      	ldr	r3, [pc, #12]	; (7f70 <_Z14crc16_validatePKvj+0x1c>)
    7f62:	18c0      	adds	r0, r0, r3
    7f64:	1e43      	subs	r3, r0, #1
    7f66:	4198      	sbcs	r0, r3
}
    7f68:	bd10      	pop	{r4, pc}
    7f6a:	46c0      	nop			; (mov r8, r8)
    7f6c:	0000ffff 	.word	0x0000ffff
    7f70:	ffff0f48 	.word	0xffff0f48

00007f74 <__aeabi_atexit>:
    7f74:	000b      	movs	r3, r1
    7f76:	b510      	push	{r4, lr}
    7f78:	0001      	movs	r1, r0
    7f7a:	0018      	movs	r0, r3
    7f7c:	f003 faaa 	bl	b4d4 <__cxa_atexit>
    7f80:	bd10      	pop	{r4, pc}
	...

00007f84 <exp>:
    7f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f86:	4647      	mov	r7, r8
    7f88:	46ce      	mov	lr, r9
    7f8a:	b580      	push	{r7, lr}
    7f8c:	b08b      	sub	sp, #44	; 0x2c
    7f8e:	0004      	movs	r4, r0
    7f90:	000d      	movs	r5, r1
    7f92:	f000 f8cb 	bl	812c <__ieee754_exp>
    7f96:	4b34      	ldr	r3, [pc, #208]	; (8068 <exp+0xe4>)
    7f98:	0006      	movs	r6, r0
    7f9a:	4698      	mov	r8, r3
    7f9c:	781b      	ldrb	r3, [r3, #0]
    7f9e:	000f      	movs	r7, r1
    7fa0:	b25b      	sxtb	r3, r3
    7fa2:	3301      	adds	r3, #1
    7fa4:	d038      	beq.n	8018 <exp+0x94>
    7fa6:	0020      	movs	r0, r4
    7fa8:	0029      	movs	r1, r5
    7faa:	f000 fa8d 	bl	84c8 <finite>
    7fae:	2800      	cmp	r0, #0
    7fb0:	d032      	beq.n	8018 <exp+0x94>
    7fb2:	4a2e      	ldr	r2, [pc, #184]	; (806c <exp+0xe8>)
    7fb4:	4b2e      	ldr	r3, [pc, #184]	; (8070 <exp+0xec>)
    7fb6:	0020      	movs	r0, r4
    7fb8:	0029      	movs	r1, r5
    7fba:	f000 fc3b 	bl	8834 <__aeabi_dcmpgt>
    7fbe:	4681      	mov	r9, r0
    7fc0:	2800      	cmp	r0, #0
    7fc2:	d130      	bne.n	8026 <exp+0xa2>
    7fc4:	4a2b      	ldr	r2, [pc, #172]	; (8074 <exp+0xf0>)
    7fc6:	4b2c      	ldr	r3, [pc, #176]	; (8078 <exp+0xf4>)
    7fc8:	0020      	movs	r0, r4
    7fca:	0029      	movs	r1, r5
    7fcc:	f000 fc1e 	bl	880c <__aeabi_dcmplt>
    7fd0:	2800      	cmp	r0, #0
    7fd2:	d021      	beq.n	8018 <exp+0x94>
    7fd4:	2304      	movs	r3, #4
    7fd6:	9300      	str	r3, [sp, #0]
    7fd8:	4b28      	ldr	r3, [pc, #160]	; (807c <exp+0xf8>)
    7fda:	2200      	movs	r2, #0
    7fdc:	9301      	str	r3, [sp, #4]
    7fde:	464b      	mov	r3, r9
    7fe0:	9308      	str	r3, [sp, #32]
    7fe2:	2300      	movs	r3, #0
    7fe4:	9206      	str	r2, [sp, #24]
    7fe6:	9307      	str	r3, [sp, #28]
    7fe8:	4643      	mov	r3, r8
    7fea:	781b      	ldrb	r3, [r3, #0]
    7fec:	466e      	mov	r6, sp
    7fee:	b25b      	sxtb	r3, r3
    7ff0:	9404      	str	r4, [sp, #16]
    7ff2:	9505      	str	r5, [sp, #20]
    7ff4:	9402      	str	r4, [sp, #8]
    7ff6:	9503      	str	r5, [sp, #12]
    7ff8:	2b02      	cmp	r3, #2
    7ffa:	d030      	beq.n	805e <exp+0xda>
    7ffc:	0030      	movs	r0, r6
    7ffe:	f000 fa6d 	bl	84dc <matherr>
    8002:	2800      	cmp	r0, #0
    8004:	d02b      	beq.n	805e <exp+0xda>
    8006:	6a33      	ldr	r3, [r6, #32]
    8008:	2b00      	cmp	r3, #0
    800a:	d003      	beq.n	8014 <exp+0x90>
    800c:	f003 fa70 	bl	b4f0 <__errno>
    8010:	6a33      	ldr	r3, [r6, #32]
    8012:	6003      	str	r3, [r0, #0]
    8014:	69f7      	ldr	r7, [r6, #28]
    8016:	69b6      	ldr	r6, [r6, #24]
    8018:	0030      	movs	r0, r6
    801a:	0039      	movs	r1, r7
    801c:	b00b      	add	sp, #44	; 0x2c
    801e:	bc0c      	pop	{r2, r3}
    8020:	4690      	mov	r8, r2
    8022:	4699      	mov	r9, r3
    8024:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8026:	2303      	movs	r3, #3
    8028:	9300      	str	r3, [sp, #0]
    802a:	4b14      	ldr	r3, [pc, #80]	; (807c <exp+0xf8>)
    802c:	466e      	mov	r6, sp
    802e:	9301      	str	r3, [sp, #4]
    8030:	2300      	movs	r3, #0
    8032:	9308      	str	r3, [sp, #32]
    8034:	4643      	mov	r3, r8
    8036:	781b      	ldrb	r3, [r3, #0]
    8038:	9404      	str	r4, [sp, #16]
    803a:	9505      	str	r5, [sp, #20]
    803c:	b25b      	sxtb	r3, r3
    803e:	9402      	str	r4, [sp, #8]
    8040:	9503      	str	r5, [sp, #12]
    8042:	2b00      	cmp	r3, #0
    8044:	d105      	bne.n	8052 <exp+0xce>
    8046:	22e0      	movs	r2, #224	; 0xe0
    8048:	4b0d      	ldr	r3, [pc, #52]	; (8080 <exp+0xfc>)
    804a:	0612      	lsls	r2, r2, #24
    804c:	9206      	str	r2, [sp, #24]
    804e:	9307      	str	r3, [sp, #28]
    8050:	e7d4      	b.n	7ffc <exp+0x78>
    8052:	2000      	movs	r0, #0
    8054:	490b      	ldr	r1, [pc, #44]	; (8084 <exp+0x100>)
    8056:	9006      	str	r0, [sp, #24]
    8058:	9107      	str	r1, [sp, #28]
    805a:	2b02      	cmp	r3, #2
    805c:	d1ce      	bne.n	7ffc <exp+0x78>
    805e:	f003 fa47 	bl	b4f0 <__errno>
    8062:	2322      	movs	r3, #34	; 0x22
    8064:	6003      	str	r3, [r0, #0]
    8066:	e7ce      	b.n	8006 <exp+0x82>
    8068:	200000b0 	.word	0x200000b0
    806c:	fefa39ef 	.word	0xfefa39ef
    8070:	40862e42 	.word	0x40862e42
    8074:	d52d3051 	.word	0xd52d3051
    8078:	c0874910 	.word	0xc0874910
    807c:	00010d74 	.word	0x00010d74
    8080:	47efffff 	.word	0x47efffff
    8084:	7ff00000 	.word	0x7ff00000

00008088 <sqrtf>:
    8088:	b5f0      	push	{r4, r5, r6, r7, lr}
    808a:	2500      	movs	r5, #0
    808c:	b08d      	sub	sp, #52	; 0x34
    808e:	1c04      	adds	r4, r0, #0
    8090:	f000 f9be 	bl	8410 <__ieee754_sqrtf>
    8094:	4b23      	ldr	r3, [pc, #140]	; (8124 <sqrtf+0x9c>)
    8096:	1c06      	adds	r6, r0, #0
    8098:	575d      	ldrsb	r5, [r3, r5]
    809a:	1c6b      	adds	r3, r5, #1
    809c:	d00b      	beq.n	80b6 <sqrtf+0x2e>
    809e:	1c21      	adds	r1, r4, #0
    80a0:	1c20      	adds	r0, r4, #0
    80a2:	f001 fa89 	bl	95b8 <__aeabi_fcmpun>
    80a6:	1e07      	subs	r7, r0, #0
    80a8:	d105      	bne.n	80b6 <sqrtf+0x2e>
    80aa:	2100      	movs	r1, #0
    80ac:	1c20      	adds	r0, r4, #0
    80ae:	f000 fbe7 	bl	8880 <__aeabi_fcmplt>
    80b2:	2800      	cmp	r0, #0
    80b4:	d102      	bne.n	80bc <sqrtf+0x34>
    80b6:	1c30      	adds	r0, r6, #0
    80b8:	b00d      	add	sp, #52	; 0x34
    80ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80bc:	2301      	movs	r3, #1
    80be:	9302      	str	r3, [sp, #8]
    80c0:	4b19      	ldr	r3, [pc, #100]	; (8128 <sqrtf+0xa0>)
    80c2:	1c20      	adds	r0, r4, #0
    80c4:	9303      	str	r3, [sp, #12]
    80c6:	970a      	str	r7, [sp, #40]	; 0x28
    80c8:	f003 f8ec 	bl	b2a4 <__aeabi_f2d>
    80cc:	2200      	movs	r2, #0
    80ce:	9006      	str	r0, [sp, #24]
    80d0:	9107      	str	r1, [sp, #28]
    80d2:	9004      	str	r0, [sp, #16]
    80d4:	9105      	str	r1, [sp, #20]
    80d6:	2300      	movs	r3, #0
    80d8:	2d00      	cmp	r5, #0
    80da:	d015      	beq.n	8108 <sqrtf+0x80>
    80dc:	0010      	movs	r0, r2
    80de:	0019      	movs	r1, r3
    80e0:	f001 fe48 	bl	9d74 <__aeabi_ddiv>
    80e4:	9008      	str	r0, [sp, #32]
    80e6:	9109      	str	r1, [sp, #36]	; 0x24
    80e8:	2d02      	cmp	r5, #2
    80ea:	d10f      	bne.n	810c <sqrtf+0x84>
    80ec:	f003 fa00 	bl	b4f0 <__errno>
    80f0:	2321      	movs	r3, #33	; 0x21
    80f2:	6003      	str	r3, [r0, #0]
    80f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    80f6:	9301      	str	r3, [sp, #4]
    80f8:	2b00      	cmp	r3, #0
    80fa:	d10d      	bne.n	8118 <sqrtf+0x90>
    80fc:	9808      	ldr	r0, [sp, #32]
    80fe:	9909      	ldr	r1, [sp, #36]	; 0x24
    8100:	f003 f922 	bl	b348 <__aeabi_d2f>
    8104:	1c06      	adds	r6, r0, #0
    8106:	e7d6      	b.n	80b6 <sqrtf+0x2e>
    8108:	9208      	str	r2, [sp, #32]
    810a:	9309      	str	r3, [sp, #36]	; 0x24
    810c:	a802      	add	r0, sp, #8
    810e:	f000 f9e5 	bl	84dc <matherr>
    8112:	2800      	cmp	r0, #0
    8114:	d1ee      	bne.n	80f4 <sqrtf+0x6c>
    8116:	e7e9      	b.n	80ec <sqrtf+0x64>
    8118:	f003 f9ea 	bl	b4f0 <__errno>
    811c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    811e:	9301      	str	r3, [sp, #4]
    8120:	6003      	str	r3, [r0, #0]
    8122:	e7eb      	b.n	80fc <sqrtf+0x74>
    8124:	200000b0 	.word	0x200000b0
    8128:	00010d78 	.word	0x00010d78

0000812c <__ieee754_exp>:
    812c:	b5f0      	push	{r4, r5, r6, r7, lr}
    812e:	46d6      	mov	lr, sl
    8130:	b500      	push	{lr}
    8132:	004b      	lsls	r3, r1, #1
    8134:	000e      	movs	r6, r1
    8136:	0fcc      	lsrs	r4, r1, #31
    8138:	4995      	ldr	r1, [pc, #596]	; (8390 <__ieee754_exp+0x264>)
    813a:	b084      	sub	sp, #16
    813c:	0007      	movs	r7, r0
    813e:	085b      	lsrs	r3, r3, #1
    8140:	428b      	cmp	r3, r1
    8142:	d90e      	bls.n	8162 <__ieee754_exp+0x36>
    8144:	4993      	ldr	r1, [pc, #588]	; (8394 <__ieee754_exp+0x268>)
    8146:	428b      	cmp	r3, r1
    8148:	d800      	bhi.n	814c <__ieee754_exp+0x20>
    814a:	e084      	b.n	8256 <__ieee754_exp+0x12a>
    814c:	0332      	lsls	r2, r6, #12
    814e:	0b12      	lsrs	r2, r2, #12
    8150:	4302      	orrs	r2, r0
    8152:	d000      	beq.n	8156 <__ieee754_exp+0x2a>
    8154:	e0f7      	b.n	8346 <__ieee754_exp+0x21a>
    8156:	0031      	movs	r1, r6
    8158:	2c00      	cmp	r4, #0
    815a:	d078      	beq.n	824e <__ieee754_exp+0x122>
    815c:	2000      	movs	r0, #0
    815e:	2100      	movs	r1, #0
    8160:	e075      	b.n	824e <__ieee754_exp+0x122>
    8162:	4a8d      	ldr	r2, [pc, #564]	; (8398 <__ieee754_exp+0x26c>)
    8164:	4293      	cmp	r3, r2
    8166:	d900      	bls.n	816a <__ieee754_exp+0x3e>
    8168:	e0b6      	b.n	82d8 <__ieee754_exp+0x1ac>
    816a:	4a8c      	ldr	r2, [pc, #560]	; (839c <__ieee754_exp+0x270>)
    816c:	4293      	cmp	r3, r2
    816e:	d800      	bhi.n	8172 <__ieee754_exp+0x46>
    8170:	e0ca      	b.n	8308 <__ieee754_exp+0x1dc>
    8172:	2300      	movs	r3, #0
    8174:	469a      	mov	sl, r3
    8176:	003a      	movs	r2, r7
    8178:	0033      	movs	r3, r6
    817a:	0038      	movs	r0, r7
    817c:	0031      	movs	r1, r6
    817e:	f002 fa2d 	bl	a5dc <__aeabi_dmul>
    8182:	0004      	movs	r4, r0
    8184:	000d      	movs	r5, r1
    8186:	4a86      	ldr	r2, [pc, #536]	; (83a0 <__ieee754_exp+0x274>)
    8188:	4b86      	ldr	r3, [pc, #536]	; (83a4 <__ieee754_exp+0x278>)
    818a:	f002 fa27 	bl	a5dc <__aeabi_dmul>
    818e:	4a86      	ldr	r2, [pc, #536]	; (83a8 <__ieee754_exp+0x27c>)
    8190:	4b86      	ldr	r3, [pc, #536]	; (83ac <__ieee754_exp+0x280>)
    8192:	f002 fca3 	bl	aadc <__aeabi_dsub>
    8196:	0022      	movs	r2, r4
    8198:	002b      	movs	r3, r5
    819a:	f002 fa1f 	bl	a5dc <__aeabi_dmul>
    819e:	4a84      	ldr	r2, [pc, #528]	; (83b0 <__ieee754_exp+0x284>)
    81a0:	4b84      	ldr	r3, [pc, #528]	; (83b4 <__ieee754_exp+0x288>)
    81a2:	f001 fad7 	bl	9754 <__aeabi_dadd>
    81a6:	0022      	movs	r2, r4
    81a8:	002b      	movs	r3, r5
    81aa:	f002 fa17 	bl	a5dc <__aeabi_dmul>
    81ae:	4a82      	ldr	r2, [pc, #520]	; (83b8 <__ieee754_exp+0x28c>)
    81b0:	4b82      	ldr	r3, [pc, #520]	; (83bc <__ieee754_exp+0x290>)
    81b2:	f002 fc93 	bl	aadc <__aeabi_dsub>
    81b6:	0022      	movs	r2, r4
    81b8:	002b      	movs	r3, r5
    81ba:	f002 fa0f 	bl	a5dc <__aeabi_dmul>
    81be:	4a80      	ldr	r2, [pc, #512]	; (83c0 <__ieee754_exp+0x294>)
    81c0:	4b80      	ldr	r3, [pc, #512]	; (83c4 <__ieee754_exp+0x298>)
    81c2:	f001 fac7 	bl	9754 <__aeabi_dadd>
    81c6:	0022      	movs	r2, r4
    81c8:	002b      	movs	r3, r5
    81ca:	f002 fa07 	bl	a5dc <__aeabi_dmul>
    81ce:	0002      	movs	r2, r0
    81d0:	000b      	movs	r3, r1
    81d2:	0038      	movs	r0, r7
    81d4:	0031      	movs	r1, r6
    81d6:	f002 fc81 	bl	aadc <__aeabi_dsub>
    81da:	4653      	mov	r3, sl
    81dc:	0004      	movs	r4, r0
    81de:	000d      	movs	r5, r1
    81e0:	0002      	movs	r2, r0
    81e2:	2b00      	cmp	r3, #0
    81e4:	d100      	bne.n	81e8 <__ieee754_exp+0xbc>
    81e6:	e0b4      	b.n	8352 <__ieee754_exp+0x226>
    81e8:	000b      	movs	r3, r1
    81ea:	0038      	movs	r0, r7
    81ec:	0031      	movs	r1, r6
    81ee:	f002 f9f5 	bl	a5dc <__aeabi_dmul>
    81f2:	000f      	movs	r7, r1
    81f4:	2180      	movs	r1, #128	; 0x80
    81f6:	0006      	movs	r6, r0
    81f8:	0022      	movs	r2, r4
    81fa:	002b      	movs	r3, r5
    81fc:	2000      	movs	r0, #0
    81fe:	05c9      	lsls	r1, r1, #23
    8200:	f002 fc6c 	bl	aadc <__aeabi_dsub>
    8204:	0002      	movs	r2, r0
    8206:	000b      	movs	r3, r1
    8208:	0030      	movs	r0, r6
    820a:	0039      	movs	r1, r7
    820c:	f001 fdb2 	bl	9d74 <__aeabi_ddiv>
    8210:	0002      	movs	r2, r0
    8212:	000b      	movs	r3, r1
    8214:	9802      	ldr	r0, [sp, #8]
    8216:	9903      	ldr	r1, [sp, #12]
    8218:	f002 fc60 	bl	aadc <__aeabi_dsub>
    821c:	9a00      	ldr	r2, [sp, #0]
    821e:	9b01      	ldr	r3, [sp, #4]
    8220:	f002 fc5c 	bl	aadc <__aeabi_dsub>
    8224:	000b      	movs	r3, r1
    8226:	0002      	movs	r2, r0
    8228:	4967      	ldr	r1, [pc, #412]	; (83c8 <__ieee754_exp+0x29c>)
    822a:	2000      	movs	r0, #0
    822c:	f002 fc56 	bl	aadc <__aeabi_dsub>
    8230:	4b66      	ldr	r3, [pc, #408]	; (83cc <__ieee754_exp+0x2a0>)
    8232:	459a      	cmp	sl, r3
    8234:	db00      	blt.n	8238 <__ieee754_exp+0x10c>
    8236:	e07a      	b.n	832e <__ieee754_exp+0x202>
    8238:	24fa      	movs	r4, #250	; 0xfa
    823a:	00a4      	lsls	r4, r4, #2
    823c:	4454      	add	r4, sl
    823e:	0524      	lsls	r4, r4, #20
    8240:	1863      	adds	r3, r4, r1
    8242:	0019      	movs	r1, r3
    8244:	23b8      	movs	r3, #184	; 0xb8
    8246:	2200      	movs	r2, #0
    8248:	045b      	lsls	r3, r3, #17
    824a:	f002 f9c7 	bl	a5dc <__aeabi_dmul>
    824e:	b004      	add	sp, #16
    8250:	bc04      	pop	{r2}
    8252:	4692      	mov	sl, r2
    8254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8256:	4a5e      	ldr	r2, [pc, #376]	; (83d0 <__ieee754_exp+0x2a4>)
    8258:	4b5e      	ldr	r3, [pc, #376]	; (83d4 <__ieee754_exp+0x2a8>)
    825a:	0031      	movs	r1, r6
    825c:	f000 faea 	bl	8834 <__aeabi_dcmpgt>
    8260:	2800      	cmp	r0, #0
    8262:	d169      	bne.n	8338 <__ieee754_exp+0x20c>
    8264:	4a5c      	ldr	r2, [pc, #368]	; (83d8 <__ieee754_exp+0x2ac>)
    8266:	4b5d      	ldr	r3, [pc, #372]	; (83dc <__ieee754_exp+0x2b0>)
    8268:	0038      	movs	r0, r7
    826a:	0031      	movs	r1, r6
    826c:	f000 face 	bl	880c <__aeabi_dcmplt>
    8270:	2800      	cmp	r0, #0
    8272:	d000      	beq.n	8276 <__ieee754_exp+0x14a>
    8274:	e772      	b.n	815c <__ieee754_exp+0x30>
    8276:	4b5a      	ldr	r3, [pc, #360]	; (83e0 <__ieee754_exp+0x2b4>)
    8278:	00e4      	lsls	r4, r4, #3
    827a:	191c      	adds	r4, r3, r4
    827c:	4a59      	ldr	r2, [pc, #356]	; (83e4 <__ieee754_exp+0x2b8>)
    827e:	4b5a      	ldr	r3, [pc, #360]	; (83e8 <__ieee754_exp+0x2bc>)
    8280:	0038      	movs	r0, r7
    8282:	0031      	movs	r1, r6
    8284:	f002 f9aa 	bl	a5dc <__aeabi_dmul>
    8288:	6822      	ldr	r2, [r4, #0]
    828a:	6863      	ldr	r3, [r4, #4]
    828c:	f001 fa62 	bl	9754 <__aeabi_dadd>
    8290:	f002 ff5a 	bl	b148 <__aeabi_d2iz>
    8294:	4682      	mov	sl, r0
    8296:	f002 ff8b 	bl	b1b0 <__aeabi_i2d>
    829a:	4a54      	ldr	r2, [pc, #336]	; (83ec <__ieee754_exp+0x2c0>)
    829c:	4b54      	ldr	r3, [pc, #336]	; (83f0 <__ieee754_exp+0x2c4>)
    829e:	0004      	movs	r4, r0
    82a0:	000d      	movs	r5, r1
    82a2:	f002 f99b 	bl	a5dc <__aeabi_dmul>
    82a6:	0002      	movs	r2, r0
    82a8:	000b      	movs	r3, r1
    82aa:	0038      	movs	r0, r7
    82ac:	0031      	movs	r1, r6
    82ae:	f002 fc15 	bl	aadc <__aeabi_dsub>
    82b2:	4a50      	ldr	r2, [pc, #320]	; (83f4 <__ieee754_exp+0x2c8>)
    82b4:	9000      	str	r0, [sp, #0]
    82b6:	9101      	str	r1, [sp, #4]
    82b8:	4b4f      	ldr	r3, [pc, #316]	; (83f8 <__ieee754_exp+0x2cc>)
    82ba:	0020      	movs	r0, r4
    82bc:	0029      	movs	r1, r5
    82be:	f002 f98d 	bl	a5dc <__aeabi_dmul>
    82c2:	9002      	str	r0, [sp, #8]
    82c4:	9103      	str	r1, [sp, #12]
    82c6:	9a02      	ldr	r2, [sp, #8]
    82c8:	9b03      	ldr	r3, [sp, #12]
    82ca:	9800      	ldr	r0, [sp, #0]
    82cc:	9901      	ldr	r1, [sp, #4]
    82ce:	f002 fc05 	bl	aadc <__aeabi_dsub>
    82d2:	0007      	movs	r7, r0
    82d4:	000e      	movs	r6, r1
    82d6:	e74e      	b.n	8176 <__ieee754_exp+0x4a>
    82d8:	4a48      	ldr	r2, [pc, #288]	; (83fc <__ieee754_exp+0x2d0>)
    82da:	4293      	cmp	r3, r2
    82dc:	d8cb      	bhi.n	8276 <__ieee754_exp+0x14a>
    82de:	4b48      	ldr	r3, [pc, #288]	; (8400 <__ieee754_exp+0x2d4>)
    82e0:	00e5      	lsls	r5, r4, #3
    82e2:	195b      	adds	r3, r3, r5
    82e4:	681a      	ldr	r2, [r3, #0]
    82e6:	685b      	ldr	r3, [r3, #4]
    82e8:	0031      	movs	r1, r6
    82ea:	f002 fbf7 	bl	aadc <__aeabi_dsub>
    82ee:	4b45      	ldr	r3, [pc, #276]	; (8404 <__ieee754_exp+0x2d8>)
    82f0:	9000      	str	r0, [sp, #0]
    82f2:	9101      	str	r1, [sp, #4]
    82f4:	195b      	adds	r3, r3, r5
    82f6:	681a      	ldr	r2, [r3, #0]
    82f8:	685b      	ldr	r3, [r3, #4]
    82fa:	9202      	str	r2, [sp, #8]
    82fc:	9303      	str	r3, [sp, #12]
    82fe:	2301      	movs	r3, #1
    8300:	1b1b      	subs	r3, r3, r4
    8302:	1b1b      	subs	r3, r3, r4
    8304:	469a      	mov	sl, r3
    8306:	e7de      	b.n	82c6 <__ieee754_exp+0x19a>
    8308:	4a3f      	ldr	r2, [pc, #252]	; (8408 <__ieee754_exp+0x2dc>)
    830a:	4b40      	ldr	r3, [pc, #256]	; (840c <__ieee754_exp+0x2e0>)
    830c:	0031      	movs	r1, r6
    830e:	f001 fa21 	bl	9754 <__aeabi_dadd>
    8312:	2200      	movs	r2, #0
    8314:	4b2c      	ldr	r3, [pc, #176]	; (83c8 <__ieee754_exp+0x29c>)
    8316:	f000 fa8d 	bl	8834 <__aeabi_dcmpgt>
    831a:	2800      	cmp	r0, #0
    831c:	d100      	bne.n	8320 <__ieee754_exp+0x1f4>
    831e:	e728      	b.n	8172 <__ieee754_exp+0x46>
    8320:	2200      	movs	r2, #0
    8322:	4b29      	ldr	r3, [pc, #164]	; (83c8 <__ieee754_exp+0x29c>)
    8324:	0038      	movs	r0, r7
    8326:	0031      	movs	r1, r6
    8328:	f001 fa14 	bl	9754 <__aeabi_dadd>
    832c:	e78f      	b.n	824e <__ieee754_exp+0x122>
    832e:	4654      	mov	r4, sl
    8330:	0524      	lsls	r4, r4, #20
    8332:	1863      	adds	r3, r4, r1
    8334:	0019      	movs	r1, r3
    8336:	e78a      	b.n	824e <__ieee754_exp+0x122>
    8338:	4a33      	ldr	r2, [pc, #204]	; (8408 <__ieee754_exp+0x2dc>)
    833a:	4b34      	ldr	r3, [pc, #208]	; (840c <__ieee754_exp+0x2e0>)
    833c:	0010      	movs	r0, r2
    833e:	0019      	movs	r1, r3
    8340:	f002 f94c 	bl	a5dc <__aeabi_dmul>
    8344:	e783      	b.n	824e <__ieee754_exp+0x122>
    8346:	0002      	movs	r2, r0
    8348:	0033      	movs	r3, r6
    834a:	0031      	movs	r1, r6
    834c:	f001 fa02 	bl	9754 <__aeabi_dadd>
    8350:	e77d      	b.n	824e <__ieee754_exp+0x122>
    8352:	000b      	movs	r3, r1
    8354:	0038      	movs	r0, r7
    8356:	0031      	movs	r1, r6
    8358:	f002 f940 	bl	a5dc <__aeabi_dmul>
    835c:	2380      	movs	r3, #128	; 0x80
    835e:	9000      	str	r0, [sp, #0]
    8360:	9101      	str	r1, [sp, #4]
    8362:	2200      	movs	r2, #0
    8364:	05db      	lsls	r3, r3, #23
    8366:	0020      	movs	r0, r4
    8368:	0029      	movs	r1, r5
    836a:	f002 fbb7 	bl	aadc <__aeabi_dsub>
    836e:	0002      	movs	r2, r0
    8370:	000b      	movs	r3, r1
    8372:	9800      	ldr	r0, [sp, #0]
    8374:	9901      	ldr	r1, [sp, #4]
    8376:	f001 fcfd 	bl	9d74 <__aeabi_ddiv>
    837a:	003a      	movs	r2, r7
    837c:	0033      	movs	r3, r6
    837e:	f002 fbad 	bl	aadc <__aeabi_dsub>
    8382:	0002      	movs	r2, r0
    8384:	000b      	movs	r3, r1
    8386:	2000      	movs	r0, #0
    8388:	490f      	ldr	r1, [pc, #60]	; (83c8 <__ieee754_exp+0x29c>)
    838a:	f002 fba7 	bl	aadc <__aeabi_dsub>
    838e:	e75e      	b.n	824e <__ieee754_exp+0x122>
    8390:	40862e41 	.word	0x40862e41
    8394:	7fefffff 	.word	0x7fefffff
    8398:	3fd62e42 	.word	0x3fd62e42
    839c:	3e2fffff 	.word	0x3e2fffff
    83a0:	72bea4d0 	.word	0x72bea4d0
    83a4:	3e663769 	.word	0x3e663769
    83a8:	c5d26bf1 	.word	0xc5d26bf1
    83ac:	3ebbbd41 	.word	0x3ebbbd41
    83b0:	af25de2c 	.word	0xaf25de2c
    83b4:	3f11566a 	.word	0x3f11566a
    83b8:	16bebd93 	.word	0x16bebd93
    83bc:	3f66c16c 	.word	0x3f66c16c
    83c0:	5555553e 	.word	0x5555553e
    83c4:	3fc55555 	.word	0x3fc55555
    83c8:	3ff00000 	.word	0x3ff00000
    83cc:	fffffc03 	.word	0xfffffc03
    83d0:	fefa39ef 	.word	0xfefa39ef
    83d4:	40862e42 	.word	0x40862e42
    83d8:	d52d3051 	.word	0xd52d3051
    83dc:	c0874910 	.word	0xc0874910
    83e0:	00010d80 	.word	0x00010d80
    83e4:	652b82fe 	.word	0x652b82fe
    83e8:	3ff71547 	.word	0x3ff71547
    83ec:	fee00000 	.word	0xfee00000
    83f0:	3fe62e42 	.word	0x3fe62e42
    83f4:	35793c76 	.word	0x35793c76
    83f8:	3dea39ef 	.word	0x3dea39ef
    83fc:	3ff0a2b1 	.word	0x3ff0a2b1
    8400:	00010d90 	.word	0x00010d90
    8404:	00010da0 	.word	0x00010da0
    8408:	8800759c 	.word	0x8800759c
    840c:	7e37e43c 	.word	0x7e37e43c

00008410 <__ieee754_sqrtf>:
    8410:	492b      	ldr	r1, [pc, #172]	; (84c0 <__ieee754_sqrtf+0xb0>)
    8412:	0042      	lsls	r2, r0, #1
    8414:	b570      	push	{r4, r5, r6, lr}
    8416:	0003      	movs	r3, r0
    8418:	1c04      	adds	r4, r0, #0
    841a:	0852      	lsrs	r2, r2, #1
    841c:	428a      	cmp	r2, r1
    841e:	d83a      	bhi.n	8496 <__ieee754_sqrtf+0x86>
    8420:	2a00      	cmp	r2, #0
    8422:	d037      	beq.n	8494 <__ieee754_sqrtf+0x84>
    8424:	2800      	cmp	r0, #0
    8426:	db3f      	blt.n	84a8 <__ieee754_sqrtf+0x98>
    8428:	4926      	ldr	r1, [pc, #152]	; (84c4 <__ieee754_sqrtf+0xb4>)
    842a:	15c6      	asrs	r6, r0, #23
    842c:	428a      	cmp	r2, r1
    842e:	d80b      	bhi.n	8448 <__ieee754_sqrtf+0x38>
    8430:	2080      	movs	r0, #128	; 0x80
    8432:	0400      	lsls	r0, r0, #16
    8434:	4220      	tst	r0, r4
    8436:	d13e      	bne.n	84b6 <__ieee754_sqrtf+0xa6>
    8438:	2200      	movs	r2, #0
    843a:	e000      	b.n	843e <__ieee754_sqrtf+0x2e>
    843c:	000a      	movs	r2, r1
    843e:	005b      	lsls	r3, r3, #1
    8440:	1c51      	adds	r1, r2, #1
    8442:	4203      	tst	r3, r0
    8444:	d0fa      	beq.n	843c <__ieee754_sqrtf+0x2c>
    8446:	1ab6      	subs	r6, r6, r2
    8448:	025b      	lsls	r3, r3, #9
    844a:	0a5a      	lsrs	r2, r3, #9
    844c:	2380      	movs	r3, #128	; 0x80
    844e:	3e7f      	subs	r6, #127	; 0x7f
    8450:	041b      	lsls	r3, r3, #16
    8452:	4313      	orrs	r3, r2
    8454:	07f2      	lsls	r2, r6, #31
    8456:	d425      	bmi.n	84a4 <__ieee754_sqrtf+0x94>
    8458:	2280      	movs	r2, #128	; 0x80
    845a:	1070      	asrs	r0, r6, #1
    845c:	2119      	movs	r1, #25
    845e:	2600      	movs	r6, #0
    8460:	2500      	movs	r5, #0
    8462:	005b      	lsls	r3, r3, #1
    8464:	0452      	lsls	r2, r2, #17
    8466:	18ac      	adds	r4, r5, r2
    8468:	429c      	cmp	r4, r3
    846a:	dc02      	bgt.n	8472 <__ieee754_sqrtf+0x62>
    846c:	18a5      	adds	r5, r4, r2
    846e:	1b1b      	subs	r3, r3, r4
    8470:	18b6      	adds	r6, r6, r2
    8472:	3901      	subs	r1, #1
    8474:	005b      	lsls	r3, r3, #1
    8476:	0852      	lsrs	r2, r2, #1
    8478:	2900      	cmp	r1, #0
    847a:	d1f4      	bne.n	8466 <__ieee754_sqrtf+0x56>
    847c:	2b00      	cmp	r3, #0
    847e:	d002      	beq.n	8486 <__ieee754_sqrtf+0x76>
    8480:	2301      	movs	r3, #1
    8482:	3601      	adds	r6, #1
    8484:	439e      	bics	r6, r3
    8486:	23fc      	movs	r3, #252	; 0xfc
    8488:	059b      	lsls	r3, r3, #22
    848a:	469c      	mov	ip, r3
    848c:	1076      	asrs	r6, r6, #1
    848e:	4466      	add	r6, ip
    8490:	05c0      	lsls	r0, r0, #23
    8492:	1980      	adds	r0, r0, r6
    8494:	bd70      	pop	{r4, r5, r6, pc}
    8496:	1c01      	adds	r1, r0, #0
    8498:	f000 fdd2 	bl	9040 <__aeabi_fmul>
    849c:	1c21      	adds	r1, r4, #0
    849e:	f000 fa4d 	bl	893c <__aeabi_fadd>
    84a2:	e7f7      	b.n	8494 <__ieee754_sqrtf+0x84>
    84a4:	005b      	lsls	r3, r3, #1
    84a6:	e7d7      	b.n	8458 <__ieee754_sqrtf+0x48>
    84a8:	1c01      	adds	r1, r0, #0
    84aa:	f000 fee9 	bl	9280 <__aeabi_fsub>
    84ae:	1c01      	adds	r1, r0, #0
    84b0:	f000 fbd6 	bl	8c60 <__aeabi_fdiv>
    84b4:	e7ee      	b.n	8494 <__ieee754_sqrtf+0x84>
    84b6:	2201      	movs	r2, #1
    84b8:	4252      	negs	r2, r2
    84ba:	1ab6      	subs	r6, r6, r2
    84bc:	e7c4      	b.n	8448 <__ieee754_sqrtf+0x38>
    84be:	46c0      	nop			; (mov r8, r8)
    84c0:	7f7fffff 	.word	0x7f7fffff
    84c4:	007fffff 	.word	0x007fffff

000084c8 <finite>:
    84c8:	4b03      	ldr	r3, [pc, #12]	; (84d8 <finite+0x10>)
    84ca:	0048      	lsls	r0, r1, #1
    84cc:	469c      	mov	ip, r3
    84ce:	0840      	lsrs	r0, r0, #1
    84d0:	4460      	add	r0, ip
    84d2:	0fc0      	lsrs	r0, r0, #31
    84d4:	4770      	bx	lr
    84d6:	46c0      	nop			; (mov r8, r8)
    84d8:	80100000 	.word	0x80100000

000084dc <matherr>:
    84dc:	2000      	movs	r0, #0
    84de:	4770      	bx	lr

000084e0 <__gnu_thumb1_case_uqi>:
    84e0:	b402      	push	{r1}
    84e2:	4671      	mov	r1, lr
    84e4:	0849      	lsrs	r1, r1, #1
    84e6:	0049      	lsls	r1, r1, #1
    84e8:	5c09      	ldrb	r1, [r1, r0]
    84ea:	0049      	lsls	r1, r1, #1
    84ec:	448e      	add	lr, r1
    84ee:	bc02      	pop	{r1}
    84f0:	4770      	bx	lr
    84f2:	46c0      	nop			; (mov r8, r8)

000084f4 <__udivsi3>:
    84f4:	2200      	movs	r2, #0
    84f6:	0843      	lsrs	r3, r0, #1
    84f8:	428b      	cmp	r3, r1
    84fa:	d374      	bcc.n	85e6 <__udivsi3+0xf2>
    84fc:	0903      	lsrs	r3, r0, #4
    84fe:	428b      	cmp	r3, r1
    8500:	d35f      	bcc.n	85c2 <__udivsi3+0xce>
    8502:	0a03      	lsrs	r3, r0, #8
    8504:	428b      	cmp	r3, r1
    8506:	d344      	bcc.n	8592 <__udivsi3+0x9e>
    8508:	0b03      	lsrs	r3, r0, #12
    850a:	428b      	cmp	r3, r1
    850c:	d328      	bcc.n	8560 <__udivsi3+0x6c>
    850e:	0c03      	lsrs	r3, r0, #16
    8510:	428b      	cmp	r3, r1
    8512:	d30d      	bcc.n	8530 <__udivsi3+0x3c>
    8514:	22ff      	movs	r2, #255	; 0xff
    8516:	0209      	lsls	r1, r1, #8
    8518:	ba12      	rev	r2, r2
    851a:	0c03      	lsrs	r3, r0, #16
    851c:	428b      	cmp	r3, r1
    851e:	d302      	bcc.n	8526 <__udivsi3+0x32>
    8520:	1212      	asrs	r2, r2, #8
    8522:	0209      	lsls	r1, r1, #8
    8524:	d065      	beq.n	85f2 <__udivsi3+0xfe>
    8526:	0b03      	lsrs	r3, r0, #12
    8528:	428b      	cmp	r3, r1
    852a:	d319      	bcc.n	8560 <__udivsi3+0x6c>
    852c:	e000      	b.n	8530 <__udivsi3+0x3c>
    852e:	0a09      	lsrs	r1, r1, #8
    8530:	0bc3      	lsrs	r3, r0, #15
    8532:	428b      	cmp	r3, r1
    8534:	d301      	bcc.n	853a <__udivsi3+0x46>
    8536:	03cb      	lsls	r3, r1, #15
    8538:	1ac0      	subs	r0, r0, r3
    853a:	4152      	adcs	r2, r2
    853c:	0b83      	lsrs	r3, r0, #14
    853e:	428b      	cmp	r3, r1
    8540:	d301      	bcc.n	8546 <__udivsi3+0x52>
    8542:	038b      	lsls	r3, r1, #14
    8544:	1ac0      	subs	r0, r0, r3
    8546:	4152      	adcs	r2, r2
    8548:	0b43      	lsrs	r3, r0, #13
    854a:	428b      	cmp	r3, r1
    854c:	d301      	bcc.n	8552 <__udivsi3+0x5e>
    854e:	034b      	lsls	r3, r1, #13
    8550:	1ac0      	subs	r0, r0, r3
    8552:	4152      	adcs	r2, r2
    8554:	0b03      	lsrs	r3, r0, #12
    8556:	428b      	cmp	r3, r1
    8558:	d301      	bcc.n	855e <__udivsi3+0x6a>
    855a:	030b      	lsls	r3, r1, #12
    855c:	1ac0      	subs	r0, r0, r3
    855e:	4152      	adcs	r2, r2
    8560:	0ac3      	lsrs	r3, r0, #11
    8562:	428b      	cmp	r3, r1
    8564:	d301      	bcc.n	856a <__udivsi3+0x76>
    8566:	02cb      	lsls	r3, r1, #11
    8568:	1ac0      	subs	r0, r0, r3
    856a:	4152      	adcs	r2, r2
    856c:	0a83      	lsrs	r3, r0, #10
    856e:	428b      	cmp	r3, r1
    8570:	d301      	bcc.n	8576 <__udivsi3+0x82>
    8572:	028b      	lsls	r3, r1, #10
    8574:	1ac0      	subs	r0, r0, r3
    8576:	4152      	adcs	r2, r2
    8578:	0a43      	lsrs	r3, r0, #9
    857a:	428b      	cmp	r3, r1
    857c:	d301      	bcc.n	8582 <__udivsi3+0x8e>
    857e:	024b      	lsls	r3, r1, #9
    8580:	1ac0      	subs	r0, r0, r3
    8582:	4152      	adcs	r2, r2
    8584:	0a03      	lsrs	r3, r0, #8
    8586:	428b      	cmp	r3, r1
    8588:	d301      	bcc.n	858e <__udivsi3+0x9a>
    858a:	020b      	lsls	r3, r1, #8
    858c:	1ac0      	subs	r0, r0, r3
    858e:	4152      	adcs	r2, r2
    8590:	d2cd      	bcs.n	852e <__udivsi3+0x3a>
    8592:	09c3      	lsrs	r3, r0, #7
    8594:	428b      	cmp	r3, r1
    8596:	d301      	bcc.n	859c <__udivsi3+0xa8>
    8598:	01cb      	lsls	r3, r1, #7
    859a:	1ac0      	subs	r0, r0, r3
    859c:	4152      	adcs	r2, r2
    859e:	0983      	lsrs	r3, r0, #6
    85a0:	428b      	cmp	r3, r1
    85a2:	d301      	bcc.n	85a8 <__udivsi3+0xb4>
    85a4:	018b      	lsls	r3, r1, #6
    85a6:	1ac0      	subs	r0, r0, r3
    85a8:	4152      	adcs	r2, r2
    85aa:	0943      	lsrs	r3, r0, #5
    85ac:	428b      	cmp	r3, r1
    85ae:	d301      	bcc.n	85b4 <__udivsi3+0xc0>
    85b0:	014b      	lsls	r3, r1, #5
    85b2:	1ac0      	subs	r0, r0, r3
    85b4:	4152      	adcs	r2, r2
    85b6:	0903      	lsrs	r3, r0, #4
    85b8:	428b      	cmp	r3, r1
    85ba:	d301      	bcc.n	85c0 <__udivsi3+0xcc>
    85bc:	010b      	lsls	r3, r1, #4
    85be:	1ac0      	subs	r0, r0, r3
    85c0:	4152      	adcs	r2, r2
    85c2:	08c3      	lsrs	r3, r0, #3
    85c4:	428b      	cmp	r3, r1
    85c6:	d301      	bcc.n	85cc <__udivsi3+0xd8>
    85c8:	00cb      	lsls	r3, r1, #3
    85ca:	1ac0      	subs	r0, r0, r3
    85cc:	4152      	adcs	r2, r2
    85ce:	0883      	lsrs	r3, r0, #2
    85d0:	428b      	cmp	r3, r1
    85d2:	d301      	bcc.n	85d8 <__udivsi3+0xe4>
    85d4:	008b      	lsls	r3, r1, #2
    85d6:	1ac0      	subs	r0, r0, r3
    85d8:	4152      	adcs	r2, r2
    85da:	0843      	lsrs	r3, r0, #1
    85dc:	428b      	cmp	r3, r1
    85de:	d301      	bcc.n	85e4 <__udivsi3+0xf0>
    85e0:	004b      	lsls	r3, r1, #1
    85e2:	1ac0      	subs	r0, r0, r3
    85e4:	4152      	adcs	r2, r2
    85e6:	1a41      	subs	r1, r0, r1
    85e8:	d200      	bcs.n	85ec <__udivsi3+0xf8>
    85ea:	4601      	mov	r1, r0
    85ec:	4152      	adcs	r2, r2
    85ee:	4610      	mov	r0, r2
    85f0:	4770      	bx	lr
    85f2:	e7ff      	b.n	85f4 <__udivsi3+0x100>
    85f4:	b501      	push	{r0, lr}
    85f6:	2000      	movs	r0, #0
    85f8:	f000 f8f0 	bl	87dc <__aeabi_idiv0>
    85fc:	bd02      	pop	{r1, pc}
    85fe:	46c0      	nop			; (mov r8, r8)

00008600 <__aeabi_uidivmod>:
    8600:	2900      	cmp	r1, #0
    8602:	d0f7      	beq.n	85f4 <__udivsi3+0x100>
    8604:	e776      	b.n	84f4 <__udivsi3>
    8606:	4770      	bx	lr

00008608 <__divsi3>:
    8608:	4603      	mov	r3, r0
    860a:	430b      	orrs	r3, r1
    860c:	d47f      	bmi.n	870e <__divsi3+0x106>
    860e:	2200      	movs	r2, #0
    8610:	0843      	lsrs	r3, r0, #1
    8612:	428b      	cmp	r3, r1
    8614:	d374      	bcc.n	8700 <__divsi3+0xf8>
    8616:	0903      	lsrs	r3, r0, #4
    8618:	428b      	cmp	r3, r1
    861a:	d35f      	bcc.n	86dc <__divsi3+0xd4>
    861c:	0a03      	lsrs	r3, r0, #8
    861e:	428b      	cmp	r3, r1
    8620:	d344      	bcc.n	86ac <__divsi3+0xa4>
    8622:	0b03      	lsrs	r3, r0, #12
    8624:	428b      	cmp	r3, r1
    8626:	d328      	bcc.n	867a <__divsi3+0x72>
    8628:	0c03      	lsrs	r3, r0, #16
    862a:	428b      	cmp	r3, r1
    862c:	d30d      	bcc.n	864a <__divsi3+0x42>
    862e:	22ff      	movs	r2, #255	; 0xff
    8630:	0209      	lsls	r1, r1, #8
    8632:	ba12      	rev	r2, r2
    8634:	0c03      	lsrs	r3, r0, #16
    8636:	428b      	cmp	r3, r1
    8638:	d302      	bcc.n	8640 <__divsi3+0x38>
    863a:	1212      	asrs	r2, r2, #8
    863c:	0209      	lsls	r1, r1, #8
    863e:	d065      	beq.n	870c <__divsi3+0x104>
    8640:	0b03      	lsrs	r3, r0, #12
    8642:	428b      	cmp	r3, r1
    8644:	d319      	bcc.n	867a <__divsi3+0x72>
    8646:	e000      	b.n	864a <__divsi3+0x42>
    8648:	0a09      	lsrs	r1, r1, #8
    864a:	0bc3      	lsrs	r3, r0, #15
    864c:	428b      	cmp	r3, r1
    864e:	d301      	bcc.n	8654 <__divsi3+0x4c>
    8650:	03cb      	lsls	r3, r1, #15
    8652:	1ac0      	subs	r0, r0, r3
    8654:	4152      	adcs	r2, r2
    8656:	0b83      	lsrs	r3, r0, #14
    8658:	428b      	cmp	r3, r1
    865a:	d301      	bcc.n	8660 <__divsi3+0x58>
    865c:	038b      	lsls	r3, r1, #14
    865e:	1ac0      	subs	r0, r0, r3
    8660:	4152      	adcs	r2, r2
    8662:	0b43      	lsrs	r3, r0, #13
    8664:	428b      	cmp	r3, r1
    8666:	d301      	bcc.n	866c <__divsi3+0x64>
    8668:	034b      	lsls	r3, r1, #13
    866a:	1ac0      	subs	r0, r0, r3
    866c:	4152      	adcs	r2, r2
    866e:	0b03      	lsrs	r3, r0, #12
    8670:	428b      	cmp	r3, r1
    8672:	d301      	bcc.n	8678 <__divsi3+0x70>
    8674:	030b      	lsls	r3, r1, #12
    8676:	1ac0      	subs	r0, r0, r3
    8678:	4152      	adcs	r2, r2
    867a:	0ac3      	lsrs	r3, r0, #11
    867c:	428b      	cmp	r3, r1
    867e:	d301      	bcc.n	8684 <__divsi3+0x7c>
    8680:	02cb      	lsls	r3, r1, #11
    8682:	1ac0      	subs	r0, r0, r3
    8684:	4152      	adcs	r2, r2
    8686:	0a83      	lsrs	r3, r0, #10
    8688:	428b      	cmp	r3, r1
    868a:	d301      	bcc.n	8690 <__divsi3+0x88>
    868c:	028b      	lsls	r3, r1, #10
    868e:	1ac0      	subs	r0, r0, r3
    8690:	4152      	adcs	r2, r2
    8692:	0a43      	lsrs	r3, r0, #9
    8694:	428b      	cmp	r3, r1
    8696:	d301      	bcc.n	869c <__divsi3+0x94>
    8698:	024b      	lsls	r3, r1, #9
    869a:	1ac0      	subs	r0, r0, r3
    869c:	4152      	adcs	r2, r2
    869e:	0a03      	lsrs	r3, r0, #8
    86a0:	428b      	cmp	r3, r1
    86a2:	d301      	bcc.n	86a8 <__divsi3+0xa0>
    86a4:	020b      	lsls	r3, r1, #8
    86a6:	1ac0      	subs	r0, r0, r3
    86a8:	4152      	adcs	r2, r2
    86aa:	d2cd      	bcs.n	8648 <__divsi3+0x40>
    86ac:	09c3      	lsrs	r3, r0, #7
    86ae:	428b      	cmp	r3, r1
    86b0:	d301      	bcc.n	86b6 <__divsi3+0xae>
    86b2:	01cb      	lsls	r3, r1, #7
    86b4:	1ac0      	subs	r0, r0, r3
    86b6:	4152      	adcs	r2, r2
    86b8:	0983      	lsrs	r3, r0, #6
    86ba:	428b      	cmp	r3, r1
    86bc:	d301      	bcc.n	86c2 <__divsi3+0xba>
    86be:	018b      	lsls	r3, r1, #6
    86c0:	1ac0      	subs	r0, r0, r3
    86c2:	4152      	adcs	r2, r2
    86c4:	0943      	lsrs	r3, r0, #5
    86c6:	428b      	cmp	r3, r1
    86c8:	d301      	bcc.n	86ce <__divsi3+0xc6>
    86ca:	014b      	lsls	r3, r1, #5
    86cc:	1ac0      	subs	r0, r0, r3
    86ce:	4152      	adcs	r2, r2
    86d0:	0903      	lsrs	r3, r0, #4
    86d2:	428b      	cmp	r3, r1
    86d4:	d301      	bcc.n	86da <__divsi3+0xd2>
    86d6:	010b      	lsls	r3, r1, #4
    86d8:	1ac0      	subs	r0, r0, r3
    86da:	4152      	adcs	r2, r2
    86dc:	08c3      	lsrs	r3, r0, #3
    86de:	428b      	cmp	r3, r1
    86e0:	d301      	bcc.n	86e6 <__divsi3+0xde>
    86e2:	00cb      	lsls	r3, r1, #3
    86e4:	1ac0      	subs	r0, r0, r3
    86e6:	4152      	adcs	r2, r2
    86e8:	0883      	lsrs	r3, r0, #2
    86ea:	428b      	cmp	r3, r1
    86ec:	d301      	bcc.n	86f2 <__divsi3+0xea>
    86ee:	008b      	lsls	r3, r1, #2
    86f0:	1ac0      	subs	r0, r0, r3
    86f2:	4152      	adcs	r2, r2
    86f4:	0843      	lsrs	r3, r0, #1
    86f6:	428b      	cmp	r3, r1
    86f8:	d301      	bcc.n	86fe <__divsi3+0xf6>
    86fa:	004b      	lsls	r3, r1, #1
    86fc:	1ac0      	subs	r0, r0, r3
    86fe:	4152      	adcs	r2, r2
    8700:	1a41      	subs	r1, r0, r1
    8702:	d200      	bcs.n	8706 <__divsi3+0xfe>
    8704:	4601      	mov	r1, r0
    8706:	4152      	adcs	r2, r2
    8708:	4610      	mov	r0, r2
    870a:	4770      	bx	lr
    870c:	e05d      	b.n	87ca <__divsi3+0x1c2>
    870e:	0fca      	lsrs	r2, r1, #31
    8710:	d000      	beq.n	8714 <__divsi3+0x10c>
    8712:	4249      	negs	r1, r1
    8714:	1003      	asrs	r3, r0, #32
    8716:	d300      	bcc.n	871a <__divsi3+0x112>
    8718:	4240      	negs	r0, r0
    871a:	4053      	eors	r3, r2
    871c:	2200      	movs	r2, #0
    871e:	469c      	mov	ip, r3
    8720:	0903      	lsrs	r3, r0, #4
    8722:	428b      	cmp	r3, r1
    8724:	d32d      	bcc.n	8782 <__divsi3+0x17a>
    8726:	0a03      	lsrs	r3, r0, #8
    8728:	428b      	cmp	r3, r1
    872a:	d312      	bcc.n	8752 <__divsi3+0x14a>
    872c:	22fc      	movs	r2, #252	; 0xfc
    872e:	0189      	lsls	r1, r1, #6
    8730:	ba12      	rev	r2, r2
    8732:	0a03      	lsrs	r3, r0, #8
    8734:	428b      	cmp	r3, r1
    8736:	d30c      	bcc.n	8752 <__divsi3+0x14a>
    8738:	0189      	lsls	r1, r1, #6
    873a:	1192      	asrs	r2, r2, #6
    873c:	428b      	cmp	r3, r1
    873e:	d308      	bcc.n	8752 <__divsi3+0x14a>
    8740:	0189      	lsls	r1, r1, #6
    8742:	1192      	asrs	r2, r2, #6
    8744:	428b      	cmp	r3, r1
    8746:	d304      	bcc.n	8752 <__divsi3+0x14a>
    8748:	0189      	lsls	r1, r1, #6
    874a:	d03a      	beq.n	87c2 <__divsi3+0x1ba>
    874c:	1192      	asrs	r2, r2, #6
    874e:	e000      	b.n	8752 <__divsi3+0x14a>
    8750:	0989      	lsrs	r1, r1, #6
    8752:	09c3      	lsrs	r3, r0, #7
    8754:	428b      	cmp	r3, r1
    8756:	d301      	bcc.n	875c <__divsi3+0x154>
    8758:	01cb      	lsls	r3, r1, #7
    875a:	1ac0      	subs	r0, r0, r3
    875c:	4152      	adcs	r2, r2
    875e:	0983      	lsrs	r3, r0, #6
    8760:	428b      	cmp	r3, r1
    8762:	d301      	bcc.n	8768 <__divsi3+0x160>
    8764:	018b      	lsls	r3, r1, #6
    8766:	1ac0      	subs	r0, r0, r3
    8768:	4152      	adcs	r2, r2
    876a:	0943      	lsrs	r3, r0, #5
    876c:	428b      	cmp	r3, r1
    876e:	d301      	bcc.n	8774 <__divsi3+0x16c>
    8770:	014b      	lsls	r3, r1, #5
    8772:	1ac0      	subs	r0, r0, r3
    8774:	4152      	adcs	r2, r2
    8776:	0903      	lsrs	r3, r0, #4
    8778:	428b      	cmp	r3, r1
    877a:	d301      	bcc.n	8780 <__divsi3+0x178>
    877c:	010b      	lsls	r3, r1, #4
    877e:	1ac0      	subs	r0, r0, r3
    8780:	4152      	adcs	r2, r2
    8782:	08c3      	lsrs	r3, r0, #3
    8784:	428b      	cmp	r3, r1
    8786:	d301      	bcc.n	878c <__divsi3+0x184>
    8788:	00cb      	lsls	r3, r1, #3
    878a:	1ac0      	subs	r0, r0, r3
    878c:	4152      	adcs	r2, r2
    878e:	0883      	lsrs	r3, r0, #2
    8790:	428b      	cmp	r3, r1
    8792:	d301      	bcc.n	8798 <__divsi3+0x190>
    8794:	008b      	lsls	r3, r1, #2
    8796:	1ac0      	subs	r0, r0, r3
    8798:	4152      	adcs	r2, r2
    879a:	d2d9      	bcs.n	8750 <__divsi3+0x148>
    879c:	0843      	lsrs	r3, r0, #1
    879e:	428b      	cmp	r3, r1
    87a0:	d301      	bcc.n	87a6 <__divsi3+0x19e>
    87a2:	004b      	lsls	r3, r1, #1
    87a4:	1ac0      	subs	r0, r0, r3
    87a6:	4152      	adcs	r2, r2
    87a8:	1a41      	subs	r1, r0, r1
    87aa:	d200      	bcs.n	87ae <__divsi3+0x1a6>
    87ac:	4601      	mov	r1, r0
    87ae:	4663      	mov	r3, ip
    87b0:	4152      	adcs	r2, r2
    87b2:	105b      	asrs	r3, r3, #1
    87b4:	4610      	mov	r0, r2
    87b6:	d301      	bcc.n	87bc <__divsi3+0x1b4>
    87b8:	4240      	negs	r0, r0
    87ba:	2b00      	cmp	r3, #0
    87bc:	d500      	bpl.n	87c0 <__divsi3+0x1b8>
    87be:	4249      	negs	r1, r1
    87c0:	4770      	bx	lr
    87c2:	4663      	mov	r3, ip
    87c4:	105b      	asrs	r3, r3, #1
    87c6:	d300      	bcc.n	87ca <__divsi3+0x1c2>
    87c8:	4240      	negs	r0, r0
    87ca:	b501      	push	{r0, lr}
    87cc:	2000      	movs	r0, #0
    87ce:	f000 f805 	bl	87dc <__aeabi_idiv0>
    87d2:	bd02      	pop	{r1, pc}

000087d4 <__aeabi_idivmod>:
    87d4:	2900      	cmp	r1, #0
    87d6:	d0f8      	beq.n	87ca <__divsi3+0x1c2>
    87d8:	e716      	b.n	8608 <__divsi3>
    87da:	4770      	bx	lr

000087dc <__aeabi_idiv0>:
    87dc:	4770      	bx	lr
    87de:	46c0      	nop			; (mov r8, r8)

000087e0 <__aeabi_cdrcmple>:
    87e0:	4684      	mov	ip, r0
    87e2:	1c10      	adds	r0, r2, #0
    87e4:	4662      	mov	r2, ip
    87e6:	468c      	mov	ip, r1
    87e8:	1c19      	adds	r1, r3, #0
    87ea:	4663      	mov	r3, ip
    87ec:	e000      	b.n	87f0 <__aeabi_cdcmpeq>
    87ee:	46c0      	nop			; (mov r8, r8)

000087f0 <__aeabi_cdcmpeq>:
    87f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    87f2:	f001 fe91 	bl	a518 <__ledf2>
    87f6:	2800      	cmp	r0, #0
    87f8:	d401      	bmi.n	87fe <__aeabi_cdcmpeq+0xe>
    87fa:	2100      	movs	r1, #0
    87fc:	42c8      	cmn	r0, r1
    87fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008800 <__aeabi_dcmpeq>:
    8800:	b510      	push	{r4, lr}
    8802:	f001 fdeb 	bl	a3dc <__eqdf2>
    8806:	4240      	negs	r0, r0
    8808:	3001      	adds	r0, #1
    880a:	bd10      	pop	{r4, pc}

0000880c <__aeabi_dcmplt>:
    880c:	b510      	push	{r4, lr}
    880e:	f001 fe83 	bl	a518 <__ledf2>
    8812:	2800      	cmp	r0, #0
    8814:	db01      	blt.n	881a <__aeabi_dcmplt+0xe>
    8816:	2000      	movs	r0, #0
    8818:	bd10      	pop	{r4, pc}
    881a:	2001      	movs	r0, #1
    881c:	bd10      	pop	{r4, pc}
    881e:	46c0      	nop			; (mov r8, r8)

00008820 <__aeabi_dcmple>:
    8820:	b510      	push	{r4, lr}
    8822:	f001 fe79 	bl	a518 <__ledf2>
    8826:	2800      	cmp	r0, #0
    8828:	dd01      	ble.n	882e <__aeabi_dcmple+0xe>
    882a:	2000      	movs	r0, #0
    882c:	bd10      	pop	{r4, pc}
    882e:	2001      	movs	r0, #1
    8830:	bd10      	pop	{r4, pc}
    8832:	46c0      	nop			; (mov r8, r8)

00008834 <__aeabi_dcmpgt>:
    8834:	b510      	push	{r4, lr}
    8836:	f001 fe0b 	bl	a450 <__gedf2>
    883a:	2800      	cmp	r0, #0
    883c:	dc01      	bgt.n	8842 <__aeabi_dcmpgt+0xe>
    883e:	2000      	movs	r0, #0
    8840:	bd10      	pop	{r4, pc}
    8842:	2001      	movs	r0, #1
    8844:	bd10      	pop	{r4, pc}
    8846:	46c0      	nop			; (mov r8, r8)

00008848 <__aeabi_dcmpge>:
    8848:	b510      	push	{r4, lr}
    884a:	f001 fe01 	bl	a450 <__gedf2>
    884e:	2800      	cmp	r0, #0
    8850:	da01      	bge.n	8856 <__aeabi_dcmpge+0xe>
    8852:	2000      	movs	r0, #0
    8854:	bd10      	pop	{r4, pc}
    8856:	2001      	movs	r0, #1
    8858:	bd10      	pop	{r4, pc}
    885a:	46c0      	nop			; (mov r8, r8)

0000885c <__aeabi_cfrcmple>:
    885c:	4684      	mov	ip, r0
    885e:	1c08      	adds	r0, r1, #0
    8860:	4661      	mov	r1, ip
    8862:	e7ff      	b.n	8864 <__aeabi_cfcmpeq>

00008864 <__aeabi_cfcmpeq>:
    8864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8866:	f000 fba9 	bl	8fbc <__lesf2>
    886a:	2800      	cmp	r0, #0
    886c:	d401      	bmi.n	8872 <__aeabi_cfcmpeq+0xe>
    886e:	2100      	movs	r1, #0
    8870:	42c8      	cmn	r0, r1
    8872:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008874 <__aeabi_fcmpeq>:
    8874:	b510      	push	{r4, lr}
    8876:	f000 fb3b 	bl	8ef0 <__eqsf2>
    887a:	4240      	negs	r0, r0
    887c:	3001      	adds	r0, #1
    887e:	bd10      	pop	{r4, pc}

00008880 <__aeabi_fcmplt>:
    8880:	b510      	push	{r4, lr}
    8882:	f000 fb9b 	bl	8fbc <__lesf2>
    8886:	2800      	cmp	r0, #0
    8888:	db01      	blt.n	888e <__aeabi_fcmplt+0xe>
    888a:	2000      	movs	r0, #0
    888c:	bd10      	pop	{r4, pc}
    888e:	2001      	movs	r0, #1
    8890:	bd10      	pop	{r4, pc}
    8892:	46c0      	nop			; (mov r8, r8)

00008894 <__aeabi_fcmple>:
    8894:	b510      	push	{r4, lr}
    8896:	f000 fb91 	bl	8fbc <__lesf2>
    889a:	2800      	cmp	r0, #0
    889c:	dd01      	ble.n	88a2 <__aeabi_fcmple+0xe>
    889e:	2000      	movs	r0, #0
    88a0:	bd10      	pop	{r4, pc}
    88a2:	2001      	movs	r0, #1
    88a4:	bd10      	pop	{r4, pc}
    88a6:	46c0      	nop			; (mov r8, r8)

000088a8 <__aeabi_fcmpgt>:
    88a8:	b510      	push	{r4, lr}
    88aa:	f000 fb47 	bl	8f3c <__gesf2>
    88ae:	2800      	cmp	r0, #0
    88b0:	dc01      	bgt.n	88b6 <__aeabi_fcmpgt+0xe>
    88b2:	2000      	movs	r0, #0
    88b4:	bd10      	pop	{r4, pc}
    88b6:	2001      	movs	r0, #1
    88b8:	bd10      	pop	{r4, pc}
    88ba:	46c0      	nop			; (mov r8, r8)

000088bc <__aeabi_fcmpge>:
    88bc:	b510      	push	{r4, lr}
    88be:	f000 fb3d 	bl	8f3c <__gesf2>
    88c2:	2800      	cmp	r0, #0
    88c4:	da01      	bge.n	88ca <__aeabi_fcmpge+0xe>
    88c6:	2000      	movs	r0, #0
    88c8:	bd10      	pop	{r4, pc}
    88ca:	2001      	movs	r0, #1
    88cc:	bd10      	pop	{r4, pc}
    88ce:	46c0      	nop			; (mov r8, r8)

000088d0 <__aeabi_f2uiz>:
    88d0:	219e      	movs	r1, #158	; 0x9e
    88d2:	b510      	push	{r4, lr}
    88d4:	05c9      	lsls	r1, r1, #23
    88d6:	1c04      	adds	r4, r0, #0
    88d8:	f7ff fff0 	bl	88bc <__aeabi_fcmpge>
    88dc:	2800      	cmp	r0, #0
    88de:	d103      	bne.n	88e8 <__aeabi_f2uiz+0x18>
    88e0:	1c20      	adds	r0, r4, #0
    88e2:	f000 fe81 	bl	95e8 <__aeabi_f2iz>
    88e6:	bd10      	pop	{r4, pc}
    88e8:	219e      	movs	r1, #158	; 0x9e
    88ea:	1c20      	adds	r0, r4, #0
    88ec:	05c9      	lsls	r1, r1, #23
    88ee:	f000 fcc7 	bl	9280 <__aeabi_fsub>
    88f2:	f000 fe79 	bl	95e8 <__aeabi_f2iz>
    88f6:	2380      	movs	r3, #128	; 0x80
    88f8:	061b      	lsls	r3, r3, #24
    88fa:	469c      	mov	ip, r3
    88fc:	4460      	add	r0, ip
    88fe:	e7f2      	b.n	88e6 <__aeabi_f2uiz+0x16>

00008900 <__aeabi_d2uiz>:
    8900:	b570      	push	{r4, r5, r6, lr}
    8902:	2200      	movs	r2, #0
    8904:	4b0c      	ldr	r3, [pc, #48]	; (8938 <__aeabi_d2uiz+0x38>)
    8906:	0004      	movs	r4, r0
    8908:	000d      	movs	r5, r1
    890a:	f7ff ff9d 	bl	8848 <__aeabi_dcmpge>
    890e:	2800      	cmp	r0, #0
    8910:	d104      	bne.n	891c <__aeabi_d2uiz+0x1c>
    8912:	0020      	movs	r0, r4
    8914:	0029      	movs	r1, r5
    8916:	f002 fc17 	bl	b148 <__aeabi_d2iz>
    891a:	bd70      	pop	{r4, r5, r6, pc}
    891c:	4b06      	ldr	r3, [pc, #24]	; (8938 <__aeabi_d2uiz+0x38>)
    891e:	2200      	movs	r2, #0
    8920:	0020      	movs	r0, r4
    8922:	0029      	movs	r1, r5
    8924:	f002 f8da 	bl	aadc <__aeabi_dsub>
    8928:	f002 fc0e 	bl	b148 <__aeabi_d2iz>
    892c:	2380      	movs	r3, #128	; 0x80
    892e:	061b      	lsls	r3, r3, #24
    8930:	469c      	mov	ip, r3
    8932:	4460      	add	r0, ip
    8934:	e7f1      	b.n	891a <__aeabi_d2uiz+0x1a>
    8936:	46c0      	nop			; (mov r8, r8)
    8938:	41e00000 	.word	0x41e00000

0000893c <__aeabi_fadd>:
    893c:	b5f0      	push	{r4, r5, r6, r7, lr}
    893e:	46c6      	mov	lr, r8
    8940:	024e      	lsls	r6, r1, #9
    8942:	0247      	lsls	r7, r0, #9
    8944:	0a76      	lsrs	r6, r6, #9
    8946:	0a7b      	lsrs	r3, r7, #9
    8948:	0044      	lsls	r4, r0, #1
    894a:	0fc5      	lsrs	r5, r0, #31
    894c:	00f7      	lsls	r7, r6, #3
    894e:	0048      	lsls	r0, r1, #1
    8950:	4698      	mov	r8, r3
    8952:	b500      	push	{lr}
    8954:	0e24      	lsrs	r4, r4, #24
    8956:	002a      	movs	r2, r5
    8958:	00db      	lsls	r3, r3, #3
    895a:	0e00      	lsrs	r0, r0, #24
    895c:	0fc9      	lsrs	r1, r1, #31
    895e:	46bc      	mov	ip, r7
    8960:	428d      	cmp	r5, r1
    8962:	d067      	beq.n	8a34 <__aeabi_fadd+0xf8>
    8964:	1a22      	subs	r2, r4, r0
    8966:	2a00      	cmp	r2, #0
    8968:	dc00      	bgt.n	896c <__aeabi_fadd+0x30>
    896a:	e0a5      	b.n	8ab8 <__aeabi_fadd+0x17c>
    896c:	2800      	cmp	r0, #0
    896e:	d13a      	bne.n	89e6 <__aeabi_fadd+0xaa>
    8970:	2f00      	cmp	r7, #0
    8972:	d100      	bne.n	8976 <__aeabi_fadd+0x3a>
    8974:	e093      	b.n	8a9e <__aeabi_fadd+0x162>
    8976:	1e51      	subs	r1, r2, #1
    8978:	2900      	cmp	r1, #0
    897a:	d000      	beq.n	897e <__aeabi_fadd+0x42>
    897c:	e0bc      	b.n	8af8 <__aeabi_fadd+0x1bc>
    897e:	2401      	movs	r4, #1
    8980:	1bdb      	subs	r3, r3, r7
    8982:	015a      	lsls	r2, r3, #5
    8984:	d546      	bpl.n	8a14 <__aeabi_fadd+0xd8>
    8986:	019b      	lsls	r3, r3, #6
    8988:	099e      	lsrs	r6, r3, #6
    898a:	0030      	movs	r0, r6
    898c:	f002 fd66 	bl	b45c <__clzsi2>
    8990:	3805      	subs	r0, #5
    8992:	4086      	lsls	r6, r0
    8994:	4284      	cmp	r4, r0
    8996:	dd00      	ble.n	899a <__aeabi_fadd+0x5e>
    8998:	e09d      	b.n	8ad6 <__aeabi_fadd+0x19a>
    899a:	1b04      	subs	r4, r0, r4
    899c:	0032      	movs	r2, r6
    899e:	2020      	movs	r0, #32
    89a0:	3401      	adds	r4, #1
    89a2:	40e2      	lsrs	r2, r4
    89a4:	1b04      	subs	r4, r0, r4
    89a6:	40a6      	lsls	r6, r4
    89a8:	0033      	movs	r3, r6
    89aa:	1e5e      	subs	r6, r3, #1
    89ac:	41b3      	sbcs	r3, r6
    89ae:	2400      	movs	r4, #0
    89b0:	4313      	orrs	r3, r2
    89b2:	075a      	lsls	r2, r3, #29
    89b4:	d004      	beq.n	89c0 <__aeabi_fadd+0x84>
    89b6:	220f      	movs	r2, #15
    89b8:	401a      	ands	r2, r3
    89ba:	2a04      	cmp	r2, #4
    89bc:	d000      	beq.n	89c0 <__aeabi_fadd+0x84>
    89be:	3304      	adds	r3, #4
    89c0:	015a      	lsls	r2, r3, #5
    89c2:	d529      	bpl.n	8a18 <__aeabi_fadd+0xdc>
    89c4:	3401      	adds	r4, #1
    89c6:	2cff      	cmp	r4, #255	; 0xff
    89c8:	d100      	bne.n	89cc <__aeabi_fadd+0x90>
    89ca:	e081      	b.n	8ad0 <__aeabi_fadd+0x194>
    89cc:	002a      	movs	r2, r5
    89ce:	019b      	lsls	r3, r3, #6
    89d0:	0a5b      	lsrs	r3, r3, #9
    89d2:	b2e4      	uxtb	r4, r4
    89d4:	025b      	lsls	r3, r3, #9
    89d6:	05e4      	lsls	r4, r4, #23
    89d8:	0a58      	lsrs	r0, r3, #9
    89da:	07d2      	lsls	r2, r2, #31
    89dc:	4320      	orrs	r0, r4
    89de:	4310      	orrs	r0, r2
    89e0:	bc04      	pop	{r2}
    89e2:	4690      	mov	r8, r2
    89e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89e6:	2cff      	cmp	r4, #255	; 0xff
    89e8:	d0e3      	beq.n	89b2 <__aeabi_fadd+0x76>
    89ea:	2180      	movs	r1, #128	; 0x80
    89ec:	0038      	movs	r0, r7
    89ee:	04c9      	lsls	r1, r1, #19
    89f0:	4308      	orrs	r0, r1
    89f2:	4684      	mov	ip, r0
    89f4:	2a1b      	cmp	r2, #27
    89f6:	dd00      	ble.n	89fa <__aeabi_fadd+0xbe>
    89f8:	e082      	b.n	8b00 <__aeabi_fadd+0x1c4>
    89fa:	2020      	movs	r0, #32
    89fc:	4661      	mov	r1, ip
    89fe:	40d1      	lsrs	r1, r2
    8a00:	1a82      	subs	r2, r0, r2
    8a02:	4660      	mov	r0, ip
    8a04:	4090      	lsls	r0, r2
    8a06:	0002      	movs	r2, r0
    8a08:	1e50      	subs	r0, r2, #1
    8a0a:	4182      	sbcs	r2, r0
    8a0c:	430a      	orrs	r2, r1
    8a0e:	1a9b      	subs	r3, r3, r2
    8a10:	015a      	lsls	r2, r3, #5
    8a12:	d4b8      	bmi.n	8986 <__aeabi_fadd+0x4a>
    8a14:	075a      	lsls	r2, r3, #29
    8a16:	d1ce      	bne.n	89b6 <__aeabi_fadd+0x7a>
    8a18:	08de      	lsrs	r6, r3, #3
    8a1a:	002a      	movs	r2, r5
    8a1c:	2cff      	cmp	r4, #255	; 0xff
    8a1e:	d13a      	bne.n	8a96 <__aeabi_fadd+0x15a>
    8a20:	2e00      	cmp	r6, #0
    8a22:	d100      	bne.n	8a26 <__aeabi_fadd+0xea>
    8a24:	e0ae      	b.n	8b84 <__aeabi_fadd+0x248>
    8a26:	2380      	movs	r3, #128	; 0x80
    8a28:	03db      	lsls	r3, r3, #15
    8a2a:	4333      	orrs	r3, r6
    8a2c:	025b      	lsls	r3, r3, #9
    8a2e:	0a5b      	lsrs	r3, r3, #9
    8a30:	24ff      	movs	r4, #255	; 0xff
    8a32:	e7cf      	b.n	89d4 <__aeabi_fadd+0x98>
    8a34:	1a21      	subs	r1, r4, r0
    8a36:	2900      	cmp	r1, #0
    8a38:	dd52      	ble.n	8ae0 <__aeabi_fadd+0x1a4>
    8a3a:	2800      	cmp	r0, #0
    8a3c:	d031      	beq.n	8aa2 <__aeabi_fadd+0x166>
    8a3e:	2cff      	cmp	r4, #255	; 0xff
    8a40:	d0b7      	beq.n	89b2 <__aeabi_fadd+0x76>
    8a42:	2080      	movs	r0, #128	; 0x80
    8a44:	003e      	movs	r6, r7
    8a46:	04c0      	lsls	r0, r0, #19
    8a48:	4306      	orrs	r6, r0
    8a4a:	46b4      	mov	ip, r6
    8a4c:	291b      	cmp	r1, #27
    8a4e:	dd00      	ble.n	8a52 <__aeabi_fadd+0x116>
    8a50:	e0aa      	b.n	8ba8 <__aeabi_fadd+0x26c>
    8a52:	2620      	movs	r6, #32
    8a54:	4660      	mov	r0, ip
    8a56:	40c8      	lsrs	r0, r1
    8a58:	1a71      	subs	r1, r6, r1
    8a5a:	4666      	mov	r6, ip
    8a5c:	408e      	lsls	r6, r1
    8a5e:	0031      	movs	r1, r6
    8a60:	1e4e      	subs	r6, r1, #1
    8a62:	41b1      	sbcs	r1, r6
    8a64:	4301      	orrs	r1, r0
    8a66:	185b      	adds	r3, r3, r1
    8a68:	0159      	lsls	r1, r3, #5
    8a6a:	d5d3      	bpl.n	8a14 <__aeabi_fadd+0xd8>
    8a6c:	3401      	adds	r4, #1
    8a6e:	2cff      	cmp	r4, #255	; 0xff
    8a70:	d100      	bne.n	8a74 <__aeabi_fadd+0x138>
    8a72:	e087      	b.n	8b84 <__aeabi_fadd+0x248>
    8a74:	2201      	movs	r2, #1
    8a76:	4978      	ldr	r1, [pc, #480]	; (8c58 <__aeabi_fadd+0x31c>)
    8a78:	401a      	ands	r2, r3
    8a7a:	085b      	lsrs	r3, r3, #1
    8a7c:	400b      	ands	r3, r1
    8a7e:	4313      	orrs	r3, r2
    8a80:	e797      	b.n	89b2 <__aeabi_fadd+0x76>
    8a82:	2c00      	cmp	r4, #0
    8a84:	d000      	beq.n	8a88 <__aeabi_fadd+0x14c>
    8a86:	e0a7      	b.n	8bd8 <__aeabi_fadd+0x29c>
    8a88:	2b00      	cmp	r3, #0
    8a8a:	d000      	beq.n	8a8e <__aeabi_fadd+0x152>
    8a8c:	e0b6      	b.n	8bfc <__aeabi_fadd+0x2c0>
    8a8e:	1e3b      	subs	r3, r7, #0
    8a90:	d162      	bne.n	8b58 <__aeabi_fadd+0x21c>
    8a92:	2600      	movs	r6, #0
    8a94:	2200      	movs	r2, #0
    8a96:	0273      	lsls	r3, r6, #9
    8a98:	0a5b      	lsrs	r3, r3, #9
    8a9a:	b2e4      	uxtb	r4, r4
    8a9c:	e79a      	b.n	89d4 <__aeabi_fadd+0x98>
    8a9e:	0014      	movs	r4, r2
    8aa0:	e787      	b.n	89b2 <__aeabi_fadd+0x76>
    8aa2:	2f00      	cmp	r7, #0
    8aa4:	d04d      	beq.n	8b42 <__aeabi_fadd+0x206>
    8aa6:	1e48      	subs	r0, r1, #1
    8aa8:	2800      	cmp	r0, #0
    8aaa:	d157      	bne.n	8b5c <__aeabi_fadd+0x220>
    8aac:	4463      	add	r3, ip
    8aae:	2401      	movs	r4, #1
    8ab0:	015a      	lsls	r2, r3, #5
    8ab2:	d5af      	bpl.n	8a14 <__aeabi_fadd+0xd8>
    8ab4:	2402      	movs	r4, #2
    8ab6:	e7dd      	b.n	8a74 <__aeabi_fadd+0x138>
    8ab8:	2a00      	cmp	r2, #0
    8aba:	d124      	bne.n	8b06 <__aeabi_fadd+0x1ca>
    8abc:	1c62      	adds	r2, r4, #1
    8abe:	b2d2      	uxtb	r2, r2
    8ac0:	2a01      	cmp	r2, #1
    8ac2:	ddde      	ble.n	8a82 <__aeabi_fadd+0x146>
    8ac4:	1bde      	subs	r6, r3, r7
    8ac6:	0172      	lsls	r2, r6, #5
    8ac8:	d535      	bpl.n	8b36 <__aeabi_fadd+0x1fa>
    8aca:	1afe      	subs	r6, r7, r3
    8acc:	000d      	movs	r5, r1
    8ace:	e75c      	b.n	898a <__aeabi_fadd+0x4e>
    8ad0:	002a      	movs	r2, r5
    8ad2:	2300      	movs	r3, #0
    8ad4:	e77e      	b.n	89d4 <__aeabi_fadd+0x98>
    8ad6:	0033      	movs	r3, r6
    8ad8:	4a60      	ldr	r2, [pc, #384]	; (8c5c <__aeabi_fadd+0x320>)
    8ada:	1a24      	subs	r4, r4, r0
    8adc:	4013      	ands	r3, r2
    8ade:	e768      	b.n	89b2 <__aeabi_fadd+0x76>
    8ae0:	2900      	cmp	r1, #0
    8ae2:	d163      	bne.n	8bac <__aeabi_fadd+0x270>
    8ae4:	1c61      	adds	r1, r4, #1
    8ae6:	b2c8      	uxtb	r0, r1
    8ae8:	2801      	cmp	r0, #1
    8aea:	dd4e      	ble.n	8b8a <__aeabi_fadd+0x24e>
    8aec:	29ff      	cmp	r1, #255	; 0xff
    8aee:	d049      	beq.n	8b84 <__aeabi_fadd+0x248>
    8af0:	4463      	add	r3, ip
    8af2:	085b      	lsrs	r3, r3, #1
    8af4:	000c      	movs	r4, r1
    8af6:	e75c      	b.n	89b2 <__aeabi_fadd+0x76>
    8af8:	2aff      	cmp	r2, #255	; 0xff
    8afa:	d041      	beq.n	8b80 <__aeabi_fadd+0x244>
    8afc:	000a      	movs	r2, r1
    8afe:	e779      	b.n	89f4 <__aeabi_fadd+0xb8>
    8b00:	2201      	movs	r2, #1
    8b02:	1a9b      	subs	r3, r3, r2
    8b04:	e784      	b.n	8a10 <__aeabi_fadd+0xd4>
    8b06:	2c00      	cmp	r4, #0
    8b08:	d01d      	beq.n	8b46 <__aeabi_fadd+0x20a>
    8b0a:	28ff      	cmp	r0, #255	; 0xff
    8b0c:	d022      	beq.n	8b54 <__aeabi_fadd+0x218>
    8b0e:	2480      	movs	r4, #128	; 0x80
    8b10:	04e4      	lsls	r4, r4, #19
    8b12:	4252      	negs	r2, r2
    8b14:	4323      	orrs	r3, r4
    8b16:	2a1b      	cmp	r2, #27
    8b18:	dd00      	ble.n	8b1c <__aeabi_fadd+0x1e0>
    8b1a:	e08a      	b.n	8c32 <__aeabi_fadd+0x2f6>
    8b1c:	001c      	movs	r4, r3
    8b1e:	2520      	movs	r5, #32
    8b20:	40d4      	lsrs	r4, r2
    8b22:	1aaa      	subs	r2, r5, r2
    8b24:	4093      	lsls	r3, r2
    8b26:	1e5a      	subs	r2, r3, #1
    8b28:	4193      	sbcs	r3, r2
    8b2a:	4323      	orrs	r3, r4
    8b2c:	4662      	mov	r2, ip
    8b2e:	0004      	movs	r4, r0
    8b30:	1ad3      	subs	r3, r2, r3
    8b32:	000d      	movs	r5, r1
    8b34:	e725      	b.n	8982 <__aeabi_fadd+0x46>
    8b36:	2e00      	cmp	r6, #0
    8b38:	d000      	beq.n	8b3c <__aeabi_fadd+0x200>
    8b3a:	e726      	b.n	898a <__aeabi_fadd+0x4e>
    8b3c:	2200      	movs	r2, #0
    8b3e:	2400      	movs	r4, #0
    8b40:	e7a9      	b.n	8a96 <__aeabi_fadd+0x15a>
    8b42:	000c      	movs	r4, r1
    8b44:	e735      	b.n	89b2 <__aeabi_fadd+0x76>
    8b46:	2b00      	cmp	r3, #0
    8b48:	d04d      	beq.n	8be6 <__aeabi_fadd+0x2aa>
    8b4a:	43d2      	mvns	r2, r2
    8b4c:	2a00      	cmp	r2, #0
    8b4e:	d0ed      	beq.n	8b2c <__aeabi_fadd+0x1f0>
    8b50:	28ff      	cmp	r0, #255	; 0xff
    8b52:	d1e0      	bne.n	8b16 <__aeabi_fadd+0x1da>
    8b54:	4663      	mov	r3, ip
    8b56:	24ff      	movs	r4, #255	; 0xff
    8b58:	000d      	movs	r5, r1
    8b5a:	e72a      	b.n	89b2 <__aeabi_fadd+0x76>
    8b5c:	29ff      	cmp	r1, #255	; 0xff
    8b5e:	d00f      	beq.n	8b80 <__aeabi_fadd+0x244>
    8b60:	0001      	movs	r1, r0
    8b62:	e773      	b.n	8a4c <__aeabi_fadd+0x110>
    8b64:	2b00      	cmp	r3, #0
    8b66:	d061      	beq.n	8c2c <__aeabi_fadd+0x2f0>
    8b68:	24ff      	movs	r4, #255	; 0xff
    8b6a:	2f00      	cmp	r7, #0
    8b6c:	d100      	bne.n	8b70 <__aeabi_fadd+0x234>
    8b6e:	e720      	b.n	89b2 <__aeabi_fadd+0x76>
    8b70:	2280      	movs	r2, #128	; 0x80
    8b72:	4641      	mov	r1, r8
    8b74:	03d2      	lsls	r2, r2, #15
    8b76:	4211      	tst	r1, r2
    8b78:	d002      	beq.n	8b80 <__aeabi_fadd+0x244>
    8b7a:	4216      	tst	r6, r2
    8b7c:	d100      	bne.n	8b80 <__aeabi_fadd+0x244>
    8b7e:	003b      	movs	r3, r7
    8b80:	24ff      	movs	r4, #255	; 0xff
    8b82:	e716      	b.n	89b2 <__aeabi_fadd+0x76>
    8b84:	24ff      	movs	r4, #255	; 0xff
    8b86:	2300      	movs	r3, #0
    8b88:	e724      	b.n	89d4 <__aeabi_fadd+0x98>
    8b8a:	2c00      	cmp	r4, #0
    8b8c:	d1ea      	bne.n	8b64 <__aeabi_fadd+0x228>
    8b8e:	2b00      	cmp	r3, #0
    8b90:	d058      	beq.n	8c44 <__aeabi_fadd+0x308>
    8b92:	2f00      	cmp	r7, #0
    8b94:	d100      	bne.n	8b98 <__aeabi_fadd+0x25c>
    8b96:	e70c      	b.n	89b2 <__aeabi_fadd+0x76>
    8b98:	4463      	add	r3, ip
    8b9a:	015a      	lsls	r2, r3, #5
    8b9c:	d400      	bmi.n	8ba0 <__aeabi_fadd+0x264>
    8b9e:	e739      	b.n	8a14 <__aeabi_fadd+0xd8>
    8ba0:	4a2e      	ldr	r2, [pc, #184]	; (8c5c <__aeabi_fadd+0x320>)
    8ba2:	000c      	movs	r4, r1
    8ba4:	4013      	ands	r3, r2
    8ba6:	e704      	b.n	89b2 <__aeabi_fadd+0x76>
    8ba8:	2101      	movs	r1, #1
    8baa:	e75c      	b.n	8a66 <__aeabi_fadd+0x12a>
    8bac:	2c00      	cmp	r4, #0
    8bae:	d11e      	bne.n	8bee <__aeabi_fadd+0x2b2>
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d040      	beq.n	8c36 <__aeabi_fadd+0x2fa>
    8bb4:	43c9      	mvns	r1, r1
    8bb6:	2900      	cmp	r1, #0
    8bb8:	d00b      	beq.n	8bd2 <__aeabi_fadd+0x296>
    8bba:	28ff      	cmp	r0, #255	; 0xff
    8bbc:	d036      	beq.n	8c2c <__aeabi_fadd+0x2f0>
    8bbe:	291b      	cmp	r1, #27
    8bc0:	dc47      	bgt.n	8c52 <__aeabi_fadd+0x316>
    8bc2:	001c      	movs	r4, r3
    8bc4:	2620      	movs	r6, #32
    8bc6:	40cc      	lsrs	r4, r1
    8bc8:	1a71      	subs	r1, r6, r1
    8bca:	408b      	lsls	r3, r1
    8bcc:	1e59      	subs	r1, r3, #1
    8bce:	418b      	sbcs	r3, r1
    8bd0:	4323      	orrs	r3, r4
    8bd2:	4463      	add	r3, ip
    8bd4:	0004      	movs	r4, r0
    8bd6:	e747      	b.n	8a68 <__aeabi_fadd+0x12c>
    8bd8:	2b00      	cmp	r3, #0
    8bda:	d118      	bne.n	8c0e <__aeabi_fadd+0x2d2>
    8bdc:	1e3b      	subs	r3, r7, #0
    8bde:	d02d      	beq.n	8c3c <__aeabi_fadd+0x300>
    8be0:	000d      	movs	r5, r1
    8be2:	24ff      	movs	r4, #255	; 0xff
    8be4:	e6e5      	b.n	89b2 <__aeabi_fadd+0x76>
    8be6:	003b      	movs	r3, r7
    8be8:	0004      	movs	r4, r0
    8bea:	000d      	movs	r5, r1
    8bec:	e6e1      	b.n	89b2 <__aeabi_fadd+0x76>
    8bee:	28ff      	cmp	r0, #255	; 0xff
    8bf0:	d01c      	beq.n	8c2c <__aeabi_fadd+0x2f0>
    8bf2:	2480      	movs	r4, #128	; 0x80
    8bf4:	04e4      	lsls	r4, r4, #19
    8bf6:	4249      	negs	r1, r1
    8bf8:	4323      	orrs	r3, r4
    8bfa:	e7e0      	b.n	8bbe <__aeabi_fadd+0x282>
    8bfc:	2f00      	cmp	r7, #0
    8bfe:	d100      	bne.n	8c02 <__aeabi_fadd+0x2c6>
    8c00:	e6d7      	b.n	89b2 <__aeabi_fadd+0x76>
    8c02:	1bde      	subs	r6, r3, r7
    8c04:	0172      	lsls	r2, r6, #5
    8c06:	d51f      	bpl.n	8c48 <__aeabi_fadd+0x30c>
    8c08:	1afb      	subs	r3, r7, r3
    8c0a:	000d      	movs	r5, r1
    8c0c:	e6d1      	b.n	89b2 <__aeabi_fadd+0x76>
    8c0e:	24ff      	movs	r4, #255	; 0xff
    8c10:	2f00      	cmp	r7, #0
    8c12:	d100      	bne.n	8c16 <__aeabi_fadd+0x2da>
    8c14:	e6cd      	b.n	89b2 <__aeabi_fadd+0x76>
    8c16:	2280      	movs	r2, #128	; 0x80
    8c18:	4640      	mov	r0, r8
    8c1a:	03d2      	lsls	r2, r2, #15
    8c1c:	4210      	tst	r0, r2
    8c1e:	d0af      	beq.n	8b80 <__aeabi_fadd+0x244>
    8c20:	4216      	tst	r6, r2
    8c22:	d1ad      	bne.n	8b80 <__aeabi_fadd+0x244>
    8c24:	003b      	movs	r3, r7
    8c26:	000d      	movs	r5, r1
    8c28:	24ff      	movs	r4, #255	; 0xff
    8c2a:	e6c2      	b.n	89b2 <__aeabi_fadd+0x76>
    8c2c:	4663      	mov	r3, ip
    8c2e:	24ff      	movs	r4, #255	; 0xff
    8c30:	e6bf      	b.n	89b2 <__aeabi_fadd+0x76>
    8c32:	2301      	movs	r3, #1
    8c34:	e77a      	b.n	8b2c <__aeabi_fadd+0x1f0>
    8c36:	003b      	movs	r3, r7
    8c38:	0004      	movs	r4, r0
    8c3a:	e6ba      	b.n	89b2 <__aeabi_fadd+0x76>
    8c3c:	2680      	movs	r6, #128	; 0x80
    8c3e:	2200      	movs	r2, #0
    8c40:	03f6      	lsls	r6, r6, #15
    8c42:	e6f0      	b.n	8a26 <__aeabi_fadd+0xea>
    8c44:	003b      	movs	r3, r7
    8c46:	e6b4      	b.n	89b2 <__aeabi_fadd+0x76>
    8c48:	1e33      	subs	r3, r6, #0
    8c4a:	d000      	beq.n	8c4e <__aeabi_fadd+0x312>
    8c4c:	e6e2      	b.n	8a14 <__aeabi_fadd+0xd8>
    8c4e:	2200      	movs	r2, #0
    8c50:	e721      	b.n	8a96 <__aeabi_fadd+0x15a>
    8c52:	2301      	movs	r3, #1
    8c54:	e7bd      	b.n	8bd2 <__aeabi_fadd+0x296>
    8c56:	46c0      	nop			; (mov r8, r8)
    8c58:	7dffffff 	.word	0x7dffffff
    8c5c:	fbffffff 	.word	0xfbffffff

00008c60 <__aeabi_fdiv>:
    8c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c62:	4657      	mov	r7, sl
    8c64:	464e      	mov	r6, r9
    8c66:	46de      	mov	lr, fp
    8c68:	4645      	mov	r5, r8
    8c6a:	b5e0      	push	{r5, r6, r7, lr}
    8c6c:	0244      	lsls	r4, r0, #9
    8c6e:	0043      	lsls	r3, r0, #1
    8c70:	0fc6      	lsrs	r6, r0, #31
    8c72:	b083      	sub	sp, #12
    8c74:	1c0f      	adds	r7, r1, #0
    8c76:	0a64      	lsrs	r4, r4, #9
    8c78:	0e1b      	lsrs	r3, r3, #24
    8c7a:	46b2      	mov	sl, r6
    8c7c:	d053      	beq.n	8d26 <__aeabi_fdiv+0xc6>
    8c7e:	2bff      	cmp	r3, #255	; 0xff
    8c80:	d027      	beq.n	8cd2 <__aeabi_fdiv+0x72>
    8c82:	2280      	movs	r2, #128	; 0x80
    8c84:	00e4      	lsls	r4, r4, #3
    8c86:	04d2      	lsls	r2, r2, #19
    8c88:	4314      	orrs	r4, r2
    8c8a:	227f      	movs	r2, #127	; 0x7f
    8c8c:	4252      	negs	r2, r2
    8c8e:	4690      	mov	r8, r2
    8c90:	4498      	add	r8, r3
    8c92:	2300      	movs	r3, #0
    8c94:	4699      	mov	r9, r3
    8c96:	469b      	mov	fp, r3
    8c98:	027d      	lsls	r5, r7, #9
    8c9a:	0078      	lsls	r0, r7, #1
    8c9c:	0ffb      	lsrs	r3, r7, #31
    8c9e:	0a6d      	lsrs	r5, r5, #9
    8ca0:	0e00      	lsrs	r0, r0, #24
    8ca2:	9300      	str	r3, [sp, #0]
    8ca4:	d024      	beq.n	8cf0 <__aeabi_fdiv+0x90>
    8ca6:	28ff      	cmp	r0, #255	; 0xff
    8ca8:	d046      	beq.n	8d38 <__aeabi_fdiv+0xd8>
    8caa:	2380      	movs	r3, #128	; 0x80
    8cac:	2100      	movs	r1, #0
    8cae:	00ed      	lsls	r5, r5, #3
    8cb0:	04db      	lsls	r3, r3, #19
    8cb2:	431d      	orrs	r5, r3
    8cb4:	387f      	subs	r0, #127	; 0x7f
    8cb6:	4647      	mov	r7, r8
    8cb8:	1a38      	subs	r0, r7, r0
    8cba:	464f      	mov	r7, r9
    8cbc:	430f      	orrs	r7, r1
    8cbe:	00bf      	lsls	r7, r7, #2
    8cc0:	46b9      	mov	r9, r7
    8cc2:	0033      	movs	r3, r6
    8cc4:	9a00      	ldr	r2, [sp, #0]
    8cc6:	4f87      	ldr	r7, [pc, #540]	; (8ee4 <__aeabi_fdiv+0x284>)
    8cc8:	4053      	eors	r3, r2
    8cca:	464a      	mov	r2, r9
    8ccc:	58ba      	ldr	r2, [r7, r2]
    8cce:	9301      	str	r3, [sp, #4]
    8cd0:	4697      	mov	pc, r2
    8cd2:	2c00      	cmp	r4, #0
    8cd4:	d14e      	bne.n	8d74 <__aeabi_fdiv+0x114>
    8cd6:	2308      	movs	r3, #8
    8cd8:	4699      	mov	r9, r3
    8cda:	33f7      	adds	r3, #247	; 0xf7
    8cdc:	4698      	mov	r8, r3
    8cde:	3bfd      	subs	r3, #253	; 0xfd
    8ce0:	469b      	mov	fp, r3
    8ce2:	027d      	lsls	r5, r7, #9
    8ce4:	0078      	lsls	r0, r7, #1
    8ce6:	0ffb      	lsrs	r3, r7, #31
    8ce8:	0a6d      	lsrs	r5, r5, #9
    8cea:	0e00      	lsrs	r0, r0, #24
    8cec:	9300      	str	r3, [sp, #0]
    8cee:	d1da      	bne.n	8ca6 <__aeabi_fdiv+0x46>
    8cf0:	2d00      	cmp	r5, #0
    8cf2:	d126      	bne.n	8d42 <__aeabi_fdiv+0xe2>
    8cf4:	2000      	movs	r0, #0
    8cf6:	2101      	movs	r1, #1
    8cf8:	0033      	movs	r3, r6
    8cfa:	9a00      	ldr	r2, [sp, #0]
    8cfc:	4f7a      	ldr	r7, [pc, #488]	; (8ee8 <__aeabi_fdiv+0x288>)
    8cfe:	4053      	eors	r3, r2
    8d00:	4642      	mov	r2, r8
    8d02:	1a10      	subs	r0, r2, r0
    8d04:	464a      	mov	r2, r9
    8d06:	430a      	orrs	r2, r1
    8d08:	0092      	lsls	r2, r2, #2
    8d0a:	58ba      	ldr	r2, [r7, r2]
    8d0c:	001d      	movs	r5, r3
    8d0e:	4697      	mov	pc, r2
    8d10:	9b00      	ldr	r3, [sp, #0]
    8d12:	002c      	movs	r4, r5
    8d14:	469a      	mov	sl, r3
    8d16:	468b      	mov	fp, r1
    8d18:	465b      	mov	r3, fp
    8d1a:	2b02      	cmp	r3, #2
    8d1c:	d131      	bne.n	8d82 <__aeabi_fdiv+0x122>
    8d1e:	4653      	mov	r3, sl
    8d20:	21ff      	movs	r1, #255	; 0xff
    8d22:	2400      	movs	r4, #0
    8d24:	e038      	b.n	8d98 <__aeabi_fdiv+0x138>
    8d26:	2c00      	cmp	r4, #0
    8d28:	d117      	bne.n	8d5a <__aeabi_fdiv+0xfa>
    8d2a:	2304      	movs	r3, #4
    8d2c:	4699      	mov	r9, r3
    8d2e:	2300      	movs	r3, #0
    8d30:	4698      	mov	r8, r3
    8d32:	3301      	adds	r3, #1
    8d34:	469b      	mov	fp, r3
    8d36:	e7af      	b.n	8c98 <__aeabi_fdiv+0x38>
    8d38:	20ff      	movs	r0, #255	; 0xff
    8d3a:	2d00      	cmp	r5, #0
    8d3c:	d10b      	bne.n	8d56 <__aeabi_fdiv+0xf6>
    8d3e:	2102      	movs	r1, #2
    8d40:	e7da      	b.n	8cf8 <__aeabi_fdiv+0x98>
    8d42:	0028      	movs	r0, r5
    8d44:	f002 fb8a 	bl	b45c <__clzsi2>
    8d48:	1f43      	subs	r3, r0, #5
    8d4a:	409d      	lsls	r5, r3
    8d4c:	2376      	movs	r3, #118	; 0x76
    8d4e:	425b      	negs	r3, r3
    8d50:	1a18      	subs	r0, r3, r0
    8d52:	2100      	movs	r1, #0
    8d54:	e7af      	b.n	8cb6 <__aeabi_fdiv+0x56>
    8d56:	2103      	movs	r1, #3
    8d58:	e7ad      	b.n	8cb6 <__aeabi_fdiv+0x56>
    8d5a:	0020      	movs	r0, r4
    8d5c:	f002 fb7e 	bl	b45c <__clzsi2>
    8d60:	1f43      	subs	r3, r0, #5
    8d62:	409c      	lsls	r4, r3
    8d64:	2376      	movs	r3, #118	; 0x76
    8d66:	425b      	negs	r3, r3
    8d68:	1a1b      	subs	r3, r3, r0
    8d6a:	4698      	mov	r8, r3
    8d6c:	2300      	movs	r3, #0
    8d6e:	4699      	mov	r9, r3
    8d70:	469b      	mov	fp, r3
    8d72:	e791      	b.n	8c98 <__aeabi_fdiv+0x38>
    8d74:	230c      	movs	r3, #12
    8d76:	4699      	mov	r9, r3
    8d78:	33f3      	adds	r3, #243	; 0xf3
    8d7a:	4698      	mov	r8, r3
    8d7c:	3bfc      	subs	r3, #252	; 0xfc
    8d7e:	469b      	mov	fp, r3
    8d80:	e78a      	b.n	8c98 <__aeabi_fdiv+0x38>
    8d82:	2b03      	cmp	r3, #3
    8d84:	d100      	bne.n	8d88 <__aeabi_fdiv+0x128>
    8d86:	e0a5      	b.n	8ed4 <__aeabi_fdiv+0x274>
    8d88:	4655      	mov	r5, sl
    8d8a:	2b01      	cmp	r3, #1
    8d8c:	d000      	beq.n	8d90 <__aeabi_fdiv+0x130>
    8d8e:	e081      	b.n	8e94 <__aeabi_fdiv+0x234>
    8d90:	2301      	movs	r3, #1
    8d92:	2100      	movs	r1, #0
    8d94:	2400      	movs	r4, #0
    8d96:	402b      	ands	r3, r5
    8d98:	0264      	lsls	r4, r4, #9
    8d9a:	05c9      	lsls	r1, r1, #23
    8d9c:	0a60      	lsrs	r0, r4, #9
    8d9e:	07db      	lsls	r3, r3, #31
    8da0:	4308      	orrs	r0, r1
    8da2:	4318      	orrs	r0, r3
    8da4:	b003      	add	sp, #12
    8da6:	bc3c      	pop	{r2, r3, r4, r5}
    8da8:	4690      	mov	r8, r2
    8daa:	4699      	mov	r9, r3
    8dac:	46a2      	mov	sl, r4
    8dae:	46ab      	mov	fp, r5
    8db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8db2:	2480      	movs	r4, #128	; 0x80
    8db4:	2300      	movs	r3, #0
    8db6:	03e4      	lsls	r4, r4, #15
    8db8:	21ff      	movs	r1, #255	; 0xff
    8dba:	e7ed      	b.n	8d98 <__aeabi_fdiv+0x138>
    8dbc:	21ff      	movs	r1, #255	; 0xff
    8dbe:	2400      	movs	r4, #0
    8dc0:	e7ea      	b.n	8d98 <__aeabi_fdiv+0x138>
    8dc2:	2301      	movs	r3, #1
    8dc4:	1a59      	subs	r1, r3, r1
    8dc6:	291b      	cmp	r1, #27
    8dc8:	dd66      	ble.n	8e98 <__aeabi_fdiv+0x238>
    8dca:	9a01      	ldr	r2, [sp, #4]
    8dcc:	4013      	ands	r3, r2
    8dce:	2100      	movs	r1, #0
    8dd0:	2400      	movs	r4, #0
    8dd2:	e7e1      	b.n	8d98 <__aeabi_fdiv+0x138>
    8dd4:	2380      	movs	r3, #128	; 0x80
    8dd6:	03db      	lsls	r3, r3, #15
    8dd8:	421c      	tst	r4, r3
    8dda:	d038      	beq.n	8e4e <__aeabi_fdiv+0x1ee>
    8ddc:	421d      	tst	r5, r3
    8dde:	d051      	beq.n	8e84 <__aeabi_fdiv+0x224>
    8de0:	431c      	orrs	r4, r3
    8de2:	0264      	lsls	r4, r4, #9
    8de4:	0a64      	lsrs	r4, r4, #9
    8de6:	0033      	movs	r3, r6
    8de8:	21ff      	movs	r1, #255	; 0xff
    8dea:	e7d5      	b.n	8d98 <__aeabi_fdiv+0x138>
    8dec:	0163      	lsls	r3, r4, #5
    8dee:	016c      	lsls	r4, r5, #5
    8df0:	42a3      	cmp	r3, r4
    8df2:	d23b      	bcs.n	8e6c <__aeabi_fdiv+0x20c>
    8df4:	261b      	movs	r6, #27
    8df6:	2100      	movs	r1, #0
    8df8:	3801      	subs	r0, #1
    8dfa:	2501      	movs	r5, #1
    8dfc:	001f      	movs	r7, r3
    8dfe:	0049      	lsls	r1, r1, #1
    8e00:	005b      	lsls	r3, r3, #1
    8e02:	2f00      	cmp	r7, #0
    8e04:	db01      	blt.n	8e0a <__aeabi_fdiv+0x1aa>
    8e06:	429c      	cmp	r4, r3
    8e08:	d801      	bhi.n	8e0e <__aeabi_fdiv+0x1ae>
    8e0a:	1b1b      	subs	r3, r3, r4
    8e0c:	4329      	orrs	r1, r5
    8e0e:	3e01      	subs	r6, #1
    8e10:	2e00      	cmp	r6, #0
    8e12:	d1f3      	bne.n	8dfc <__aeabi_fdiv+0x19c>
    8e14:	001c      	movs	r4, r3
    8e16:	1e63      	subs	r3, r4, #1
    8e18:	419c      	sbcs	r4, r3
    8e1a:	430c      	orrs	r4, r1
    8e1c:	0001      	movs	r1, r0
    8e1e:	317f      	adds	r1, #127	; 0x7f
    8e20:	2900      	cmp	r1, #0
    8e22:	ddce      	ble.n	8dc2 <__aeabi_fdiv+0x162>
    8e24:	0763      	lsls	r3, r4, #29
    8e26:	d004      	beq.n	8e32 <__aeabi_fdiv+0x1d2>
    8e28:	230f      	movs	r3, #15
    8e2a:	4023      	ands	r3, r4
    8e2c:	2b04      	cmp	r3, #4
    8e2e:	d000      	beq.n	8e32 <__aeabi_fdiv+0x1d2>
    8e30:	3404      	adds	r4, #4
    8e32:	0123      	lsls	r3, r4, #4
    8e34:	d503      	bpl.n	8e3e <__aeabi_fdiv+0x1de>
    8e36:	0001      	movs	r1, r0
    8e38:	4b2c      	ldr	r3, [pc, #176]	; (8eec <__aeabi_fdiv+0x28c>)
    8e3a:	3180      	adds	r1, #128	; 0x80
    8e3c:	401c      	ands	r4, r3
    8e3e:	29fe      	cmp	r1, #254	; 0xfe
    8e40:	dd0d      	ble.n	8e5e <__aeabi_fdiv+0x1fe>
    8e42:	2301      	movs	r3, #1
    8e44:	9a01      	ldr	r2, [sp, #4]
    8e46:	21ff      	movs	r1, #255	; 0xff
    8e48:	4013      	ands	r3, r2
    8e4a:	2400      	movs	r4, #0
    8e4c:	e7a4      	b.n	8d98 <__aeabi_fdiv+0x138>
    8e4e:	2380      	movs	r3, #128	; 0x80
    8e50:	03db      	lsls	r3, r3, #15
    8e52:	431c      	orrs	r4, r3
    8e54:	0264      	lsls	r4, r4, #9
    8e56:	0a64      	lsrs	r4, r4, #9
    8e58:	0033      	movs	r3, r6
    8e5a:	21ff      	movs	r1, #255	; 0xff
    8e5c:	e79c      	b.n	8d98 <__aeabi_fdiv+0x138>
    8e5e:	2301      	movs	r3, #1
    8e60:	9a01      	ldr	r2, [sp, #4]
    8e62:	01a4      	lsls	r4, r4, #6
    8e64:	0a64      	lsrs	r4, r4, #9
    8e66:	b2c9      	uxtb	r1, r1
    8e68:	4013      	ands	r3, r2
    8e6a:	e795      	b.n	8d98 <__aeabi_fdiv+0x138>
    8e6c:	1b1b      	subs	r3, r3, r4
    8e6e:	261a      	movs	r6, #26
    8e70:	2101      	movs	r1, #1
    8e72:	e7c2      	b.n	8dfa <__aeabi_fdiv+0x19a>
    8e74:	9b00      	ldr	r3, [sp, #0]
    8e76:	468b      	mov	fp, r1
    8e78:	469a      	mov	sl, r3
    8e7a:	2400      	movs	r4, #0
    8e7c:	e74c      	b.n	8d18 <__aeabi_fdiv+0xb8>
    8e7e:	0263      	lsls	r3, r4, #9
    8e80:	d5e5      	bpl.n	8e4e <__aeabi_fdiv+0x1ee>
    8e82:	2500      	movs	r5, #0
    8e84:	2480      	movs	r4, #128	; 0x80
    8e86:	03e4      	lsls	r4, r4, #15
    8e88:	432c      	orrs	r4, r5
    8e8a:	0264      	lsls	r4, r4, #9
    8e8c:	0a64      	lsrs	r4, r4, #9
    8e8e:	9b00      	ldr	r3, [sp, #0]
    8e90:	21ff      	movs	r1, #255	; 0xff
    8e92:	e781      	b.n	8d98 <__aeabi_fdiv+0x138>
    8e94:	9501      	str	r5, [sp, #4]
    8e96:	e7c1      	b.n	8e1c <__aeabi_fdiv+0x1bc>
    8e98:	0023      	movs	r3, r4
    8e9a:	2020      	movs	r0, #32
    8e9c:	40cb      	lsrs	r3, r1
    8e9e:	1a41      	subs	r1, r0, r1
    8ea0:	408c      	lsls	r4, r1
    8ea2:	1e61      	subs	r1, r4, #1
    8ea4:	418c      	sbcs	r4, r1
    8ea6:	431c      	orrs	r4, r3
    8ea8:	0763      	lsls	r3, r4, #29
    8eaa:	d004      	beq.n	8eb6 <__aeabi_fdiv+0x256>
    8eac:	230f      	movs	r3, #15
    8eae:	4023      	ands	r3, r4
    8eb0:	2b04      	cmp	r3, #4
    8eb2:	d000      	beq.n	8eb6 <__aeabi_fdiv+0x256>
    8eb4:	3404      	adds	r4, #4
    8eb6:	0163      	lsls	r3, r4, #5
    8eb8:	d505      	bpl.n	8ec6 <__aeabi_fdiv+0x266>
    8eba:	2301      	movs	r3, #1
    8ebc:	9a01      	ldr	r2, [sp, #4]
    8ebe:	2101      	movs	r1, #1
    8ec0:	4013      	ands	r3, r2
    8ec2:	2400      	movs	r4, #0
    8ec4:	e768      	b.n	8d98 <__aeabi_fdiv+0x138>
    8ec6:	2301      	movs	r3, #1
    8ec8:	9a01      	ldr	r2, [sp, #4]
    8eca:	01a4      	lsls	r4, r4, #6
    8ecc:	0a64      	lsrs	r4, r4, #9
    8ece:	4013      	ands	r3, r2
    8ed0:	2100      	movs	r1, #0
    8ed2:	e761      	b.n	8d98 <__aeabi_fdiv+0x138>
    8ed4:	2380      	movs	r3, #128	; 0x80
    8ed6:	03db      	lsls	r3, r3, #15
    8ed8:	431c      	orrs	r4, r3
    8eda:	0264      	lsls	r4, r4, #9
    8edc:	0a64      	lsrs	r4, r4, #9
    8ede:	4653      	mov	r3, sl
    8ee0:	21ff      	movs	r1, #255	; 0xff
    8ee2:	e759      	b.n	8d98 <__aeabi_fdiv+0x138>
    8ee4:	00010db0 	.word	0x00010db0
    8ee8:	00010df0 	.word	0x00010df0
    8eec:	f7ffffff 	.word	0xf7ffffff

00008ef0 <__eqsf2>:
    8ef0:	b570      	push	{r4, r5, r6, lr}
    8ef2:	0042      	lsls	r2, r0, #1
    8ef4:	0245      	lsls	r5, r0, #9
    8ef6:	024e      	lsls	r6, r1, #9
    8ef8:	004c      	lsls	r4, r1, #1
    8efa:	0fc3      	lsrs	r3, r0, #31
    8efc:	0a6d      	lsrs	r5, r5, #9
    8efe:	0e12      	lsrs	r2, r2, #24
    8f00:	0a76      	lsrs	r6, r6, #9
    8f02:	0e24      	lsrs	r4, r4, #24
    8f04:	0fc9      	lsrs	r1, r1, #31
    8f06:	2001      	movs	r0, #1
    8f08:	2aff      	cmp	r2, #255	; 0xff
    8f0a:	d006      	beq.n	8f1a <__eqsf2+0x2a>
    8f0c:	2cff      	cmp	r4, #255	; 0xff
    8f0e:	d003      	beq.n	8f18 <__eqsf2+0x28>
    8f10:	42a2      	cmp	r2, r4
    8f12:	d101      	bne.n	8f18 <__eqsf2+0x28>
    8f14:	42b5      	cmp	r5, r6
    8f16:	d006      	beq.n	8f26 <__eqsf2+0x36>
    8f18:	bd70      	pop	{r4, r5, r6, pc}
    8f1a:	2d00      	cmp	r5, #0
    8f1c:	d1fc      	bne.n	8f18 <__eqsf2+0x28>
    8f1e:	2cff      	cmp	r4, #255	; 0xff
    8f20:	d1fa      	bne.n	8f18 <__eqsf2+0x28>
    8f22:	2e00      	cmp	r6, #0
    8f24:	d1f8      	bne.n	8f18 <__eqsf2+0x28>
    8f26:	428b      	cmp	r3, r1
    8f28:	d006      	beq.n	8f38 <__eqsf2+0x48>
    8f2a:	2001      	movs	r0, #1
    8f2c:	2a00      	cmp	r2, #0
    8f2e:	d1f3      	bne.n	8f18 <__eqsf2+0x28>
    8f30:	0028      	movs	r0, r5
    8f32:	1e45      	subs	r5, r0, #1
    8f34:	41a8      	sbcs	r0, r5
    8f36:	e7ef      	b.n	8f18 <__eqsf2+0x28>
    8f38:	2000      	movs	r0, #0
    8f3a:	e7ed      	b.n	8f18 <__eqsf2+0x28>

00008f3c <__gesf2>:
    8f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f3e:	0042      	lsls	r2, r0, #1
    8f40:	0245      	lsls	r5, r0, #9
    8f42:	024c      	lsls	r4, r1, #9
    8f44:	0fc3      	lsrs	r3, r0, #31
    8f46:	0048      	lsls	r0, r1, #1
    8f48:	0a6d      	lsrs	r5, r5, #9
    8f4a:	0e12      	lsrs	r2, r2, #24
    8f4c:	0a64      	lsrs	r4, r4, #9
    8f4e:	0e00      	lsrs	r0, r0, #24
    8f50:	0fc9      	lsrs	r1, r1, #31
    8f52:	2aff      	cmp	r2, #255	; 0xff
    8f54:	d01e      	beq.n	8f94 <__gesf2+0x58>
    8f56:	28ff      	cmp	r0, #255	; 0xff
    8f58:	d021      	beq.n	8f9e <__gesf2+0x62>
    8f5a:	2a00      	cmp	r2, #0
    8f5c:	d10a      	bne.n	8f74 <__gesf2+0x38>
    8f5e:	426e      	negs	r6, r5
    8f60:	416e      	adcs	r6, r5
    8f62:	b2f6      	uxtb	r6, r6
    8f64:	2800      	cmp	r0, #0
    8f66:	d10f      	bne.n	8f88 <__gesf2+0x4c>
    8f68:	2c00      	cmp	r4, #0
    8f6a:	d10d      	bne.n	8f88 <__gesf2+0x4c>
    8f6c:	2000      	movs	r0, #0
    8f6e:	2d00      	cmp	r5, #0
    8f70:	d009      	beq.n	8f86 <__gesf2+0x4a>
    8f72:	e005      	b.n	8f80 <__gesf2+0x44>
    8f74:	2800      	cmp	r0, #0
    8f76:	d101      	bne.n	8f7c <__gesf2+0x40>
    8f78:	2c00      	cmp	r4, #0
    8f7a:	d001      	beq.n	8f80 <__gesf2+0x44>
    8f7c:	428b      	cmp	r3, r1
    8f7e:	d011      	beq.n	8fa4 <__gesf2+0x68>
    8f80:	2101      	movs	r1, #1
    8f82:	4258      	negs	r0, r3
    8f84:	4308      	orrs	r0, r1
    8f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f88:	2e00      	cmp	r6, #0
    8f8a:	d0f7      	beq.n	8f7c <__gesf2+0x40>
    8f8c:	2001      	movs	r0, #1
    8f8e:	3901      	subs	r1, #1
    8f90:	4308      	orrs	r0, r1
    8f92:	e7f8      	b.n	8f86 <__gesf2+0x4a>
    8f94:	2d00      	cmp	r5, #0
    8f96:	d0de      	beq.n	8f56 <__gesf2+0x1a>
    8f98:	2002      	movs	r0, #2
    8f9a:	4240      	negs	r0, r0
    8f9c:	e7f3      	b.n	8f86 <__gesf2+0x4a>
    8f9e:	2c00      	cmp	r4, #0
    8fa0:	d0db      	beq.n	8f5a <__gesf2+0x1e>
    8fa2:	e7f9      	b.n	8f98 <__gesf2+0x5c>
    8fa4:	4282      	cmp	r2, r0
    8fa6:	dceb      	bgt.n	8f80 <__gesf2+0x44>
    8fa8:	db04      	blt.n	8fb4 <__gesf2+0x78>
    8faa:	42a5      	cmp	r5, r4
    8fac:	d8e8      	bhi.n	8f80 <__gesf2+0x44>
    8fae:	2000      	movs	r0, #0
    8fb0:	42a5      	cmp	r5, r4
    8fb2:	d2e8      	bcs.n	8f86 <__gesf2+0x4a>
    8fb4:	2101      	movs	r1, #1
    8fb6:	1e58      	subs	r0, r3, #1
    8fb8:	4308      	orrs	r0, r1
    8fba:	e7e4      	b.n	8f86 <__gesf2+0x4a>

00008fbc <__lesf2>:
    8fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fbe:	0042      	lsls	r2, r0, #1
    8fc0:	024d      	lsls	r5, r1, #9
    8fc2:	004c      	lsls	r4, r1, #1
    8fc4:	0246      	lsls	r6, r0, #9
    8fc6:	0a76      	lsrs	r6, r6, #9
    8fc8:	0e12      	lsrs	r2, r2, #24
    8fca:	0fc3      	lsrs	r3, r0, #31
    8fcc:	0a6d      	lsrs	r5, r5, #9
    8fce:	0e24      	lsrs	r4, r4, #24
    8fd0:	0fc9      	lsrs	r1, r1, #31
    8fd2:	2aff      	cmp	r2, #255	; 0xff
    8fd4:	d016      	beq.n	9004 <__lesf2+0x48>
    8fd6:	2cff      	cmp	r4, #255	; 0xff
    8fd8:	d018      	beq.n	900c <__lesf2+0x50>
    8fda:	2a00      	cmp	r2, #0
    8fdc:	d10a      	bne.n	8ff4 <__lesf2+0x38>
    8fde:	4270      	negs	r0, r6
    8fe0:	4170      	adcs	r0, r6
    8fe2:	b2c0      	uxtb	r0, r0
    8fe4:	2c00      	cmp	r4, #0
    8fe6:	d015      	beq.n	9014 <__lesf2+0x58>
    8fe8:	2800      	cmp	r0, #0
    8fea:	d005      	beq.n	8ff8 <__lesf2+0x3c>
    8fec:	2001      	movs	r0, #1
    8fee:	3901      	subs	r1, #1
    8ff0:	4308      	orrs	r0, r1
    8ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ff4:	2c00      	cmp	r4, #0
    8ff6:	d013      	beq.n	9020 <__lesf2+0x64>
    8ff8:	4299      	cmp	r1, r3
    8ffa:	d014      	beq.n	9026 <__lesf2+0x6a>
    8ffc:	2001      	movs	r0, #1
    8ffe:	425b      	negs	r3, r3
    9000:	4318      	orrs	r0, r3
    9002:	e7f6      	b.n	8ff2 <__lesf2+0x36>
    9004:	2002      	movs	r0, #2
    9006:	2e00      	cmp	r6, #0
    9008:	d1f3      	bne.n	8ff2 <__lesf2+0x36>
    900a:	e7e4      	b.n	8fd6 <__lesf2+0x1a>
    900c:	2002      	movs	r0, #2
    900e:	2d00      	cmp	r5, #0
    9010:	d1ef      	bne.n	8ff2 <__lesf2+0x36>
    9012:	e7e2      	b.n	8fda <__lesf2+0x1e>
    9014:	2d00      	cmp	r5, #0
    9016:	d1e7      	bne.n	8fe8 <__lesf2+0x2c>
    9018:	2000      	movs	r0, #0
    901a:	2e00      	cmp	r6, #0
    901c:	d0e9      	beq.n	8ff2 <__lesf2+0x36>
    901e:	e7ed      	b.n	8ffc <__lesf2+0x40>
    9020:	2d00      	cmp	r5, #0
    9022:	d1e9      	bne.n	8ff8 <__lesf2+0x3c>
    9024:	e7ea      	b.n	8ffc <__lesf2+0x40>
    9026:	42a2      	cmp	r2, r4
    9028:	dc06      	bgt.n	9038 <__lesf2+0x7c>
    902a:	dbdf      	blt.n	8fec <__lesf2+0x30>
    902c:	42ae      	cmp	r6, r5
    902e:	d803      	bhi.n	9038 <__lesf2+0x7c>
    9030:	2000      	movs	r0, #0
    9032:	42ae      	cmp	r6, r5
    9034:	d3da      	bcc.n	8fec <__lesf2+0x30>
    9036:	e7dc      	b.n	8ff2 <__lesf2+0x36>
    9038:	2001      	movs	r0, #1
    903a:	4249      	negs	r1, r1
    903c:	4308      	orrs	r0, r1
    903e:	e7d8      	b.n	8ff2 <__lesf2+0x36>

00009040 <__aeabi_fmul>:
    9040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9042:	4657      	mov	r7, sl
    9044:	464e      	mov	r6, r9
    9046:	4645      	mov	r5, r8
    9048:	46de      	mov	lr, fp
    904a:	b5e0      	push	{r5, r6, r7, lr}
    904c:	0247      	lsls	r7, r0, #9
    904e:	0046      	lsls	r6, r0, #1
    9050:	4688      	mov	r8, r1
    9052:	0a7f      	lsrs	r7, r7, #9
    9054:	0e36      	lsrs	r6, r6, #24
    9056:	0fc4      	lsrs	r4, r0, #31
    9058:	2e00      	cmp	r6, #0
    905a:	d047      	beq.n	90ec <__aeabi_fmul+0xac>
    905c:	2eff      	cmp	r6, #255	; 0xff
    905e:	d024      	beq.n	90aa <__aeabi_fmul+0x6a>
    9060:	00fb      	lsls	r3, r7, #3
    9062:	2780      	movs	r7, #128	; 0x80
    9064:	04ff      	lsls	r7, r7, #19
    9066:	431f      	orrs	r7, r3
    9068:	2300      	movs	r3, #0
    906a:	4699      	mov	r9, r3
    906c:	469a      	mov	sl, r3
    906e:	3e7f      	subs	r6, #127	; 0x7f
    9070:	4643      	mov	r3, r8
    9072:	025d      	lsls	r5, r3, #9
    9074:	0058      	lsls	r0, r3, #1
    9076:	0fdb      	lsrs	r3, r3, #31
    9078:	0a6d      	lsrs	r5, r5, #9
    907a:	0e00      	lsrs	r0, r0, #24
    907c:	4698      	mov	r8, r3
    907e:	d043      	beq.n	9108 <__aeabi_fmul+0xc8>
    9080:	28ff      	cmp	r0, #255	; 0xff
    9082:	d03b      	beq.n	90fc <__aeabi_fmul+0xbc>
    9084:	00eb      	lsls	r3, r5, #3
    9086:	2580      	movs	r5, #128	; 0x80
    9088:	2200      	movs	r2, #0
    908a:	04ed      	lsls	r5, r5, #19
    908c:	431d      	orrs	r5, r3
    908e:	387f      	subs	r0, #127	; 0x7f
    9090:	1836      	adds	r6, r6, r0
    9092:	1c73      	adds	r3, r6, #1
    9094:	4641      	mov	r1, r8
    9096:	469b      	mov	fp, r3
    9098:	464b      	mov	r3, r9
    909a:	4061      	eors	r1, r4
    909c:	4313      	orrs	r3, r2
    909e:	2b0f      	cmp	r3, #15
    90a0:	d864      	bhi.n	916c <__aeabi_fmul+0x12c>
    90a2:	4875      	ldr	r0, [pc, #468]	; (9278 <__aeabi_fmul+0x238>)
    90a4:	009b      	lsls	r3, r3, #2
    90a6:	58c3      	ldr	r3, [r0, r3]
    90a8:	469f      	mov	pc, r3
    90aa:	2f00      	cmp	r7, #0
    90ac:	d142      	bne.n	9134 <__aeabi_fmul+0xf4>
    90ae:	2308      	movs	r3, #8
    90b0:	4699      	mov	r9, r3
    90b2:	3b06      	subs	r3, #6
    90b4:	26ff      	movs	r6, #255	; 0xff
    90b6:	469a      	mov	sl, r3
    90b8:	e7da      	b.n	9070 <__aeabi_fmul+0x30>
    90ba:	4641      	mov	r1, r8
    90bc:	2a02      	cmp	r2, #2
    90be:	d028      	beq.n	9112 <__aeabi_fmul+0xd2>
    90c0:	2a03      	cmp	r2, #3
    90c2:	d100      	bne.n	90c6 <__aeabi_fmul+0x86>
    90c4:	e0ce      	b.n	9264 <__aeabi_fmul+0x224>
    90c6:	2a01      	cmp	r2, #1
    90c8:	d000      	beq.n	90cc <__aeabi_fmul+0x8c>
    90ca:	e0ac      	b.n	9226 <__aeabi_fmul+0x1e6>
    90cc:	4011      	ands	r1, r2
    90ce:	2000      	movs	r0, #0
    90d0:	2200      	movs	r2, #0
    90d2:	b2cc      	uxtb	r4, r1
    90d4:	0240      	lsls	r0, r0, #9
    90d6:	05d2      	lsls	r2, r2, #23
    90d8:	0a40      	lsrs	r0, r0, #9
    90da:	07e4      	lsls	r4, r4, #31
    90dc:	4310      	orrs	r0, r2
    90de:	4320      	orrs	r0, r4
    90e0:	bc3c      	pop	{r2, r3, r4, r5}
    90e2:	4690      	mov	r8, r2
    90e4:	4699      	mov	r9, r3
    90e6:	46a2      	mov	sl, r4
    90e8:	46ab      	mov	fp, r5
    90ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90ec:	2f00      	cmp	r7, #0
    90ee:	d115      	bne.n	911c <__aeabi_fmul+0xdc>
    90f0:	2304      	movs	r3, #4
    90f2:	4699      	mov	r9, r3
    90f4:	3b03      	subs	r3, #3
    90f6:	2600      	movs	r6, #0
    90f8:	469a      	mov	sl, r3
    90fa:	e7b9      	b.n	9070 <__aeabi_fmul+0x30>
    90fc:	20ff      	movs	r0, #255	; 0xff
    90fe:	2202      	movs	r2, #2
    9100:	2d00      	cmp	r5, #0
    9102:	d0c5      	beq.n	9090 <__aeabi_fmul+0x50>
    9104:	2203      	movs	r2, #3
    9106:	e7c3      	b.n	9090 <__aeabi_fmul+0x50>
    9108:	2d00      	cmp	r5, #0
    910a:	d119      	bne.n	9140 <__aeabi_fmul+0x100>
    910c:	2000      	movs	r0, #0
    910e:	2201      	movs	r2, #1
    9110:	e7be      	b.n	9090 <__aeabi_fmul+0x50>
    9112:	2401      	movs	r4, #1
    9114:	22ff      	movs	r2, #255	; 0xff
    9116:	400c      	ands	r4, r1
    9118:	2000      	movs	r0, #0
    911a:	e7db      	b.n	90d4 <__aeabi_fmul+0x94>
    911c:	0038      	movs	r0, r7
    911e:	f002 f99d 	bl	b45c <__clzsi2>
    9122:	2676      	movs	r6, #118	; 0x76
    9124:	1f43      	subs	r3, r0, #5
    9126:	409f      	lsls	r7, r3
    9128:	2300      	movs	r3, #0
    912a:	4276      	negs	r6, r6
    912c:	1a36      	subs	r6, r6, r0
    912e:	4699      	mov	r9, r3
    9130:	469a      	mov	sl, r3
    9132:	e79d      	b.n	9070 <__aeabi_fmul+0x30>
    9134:	230c      	movs	r3, #12
    9136:	4699      	mov	r9, r3
    9138:	3b09      	subs	r3, #9
    913a:	26ff      	movs	r6, #255	; 0xff
    913c:	469a      	mov	sl, r3
    913e:	e797      	b.n	9070 <__aeabi_fmul+0x30>
    9140:	0028      	movs	r0, r5
    9142:	f002 f98b 	bl	b45c <__clzsi2>
    9146:	1f43      	subs	r3, r0, #5
    9148:	409d      	lsls	r5, r3
    914a:	2376      	movs	r3, #118	; 0x76
    914c:	425b      	negs	r3, r3
    914e:	1a18      	subs	r0, r3, r0
    9150:	2200      	movs	r2, #0
    9152:	e79d      	b.n	9090 <__aeabi_fmul+0x50>
    9154:	2080      	movs	r0, #128	; 0x80
    9156:	2400      	movs	r4, #0
    9158:	03c0      	lsls	r0, r0, #15
    915a:	22ff      	movs	r2, #255	; 0xff
    915c:	e7ba      	b.n	90d4 <__aeabi_fmul+0x94>
    915e:	003d      	movs	r5, r7
    9160:	4652      	mov	r2, sl
    9162:	e7ab      	b.n	90bc <__aeabi_fmul+0x7c>
    9164:	003d      	movs	r5, r7
    9166:	0021      	movs	r1, r4
    9168:	4652      	mov	r2, sl
    916a:	e7a7      	b.n	90bc <__aeabi_fmul+0x7c>
    916c:	0c3b      	lsrs	r3, r7, #16
    916e:	469c      	mov	ip, r3
    9170:	042a      	lsls	r2, r5, #16
    9172:	0c12      	lsrs	r2, r2, #16
    9174:	0c2b      	lsrs	r3, r5, #16
    9176:	0014      	movs	r4, r2
    9178:	4660      	mov	r0, ip
    917a:	4665      	mov	r5, ip
    917c:	043f      	lsls	r7, r7, #16
    917e:	0c3f      	lsrs	r7, r7, #16
    9180:	437c      	muls	r4, r7
    9182:	4342      	muls	r2, r0
    9184:	435d      	muls	r5, r3
    9186:	437b      	muls	r3, r7
    9188:	0c27      	lsrs	r7, r4, #16
    918a:	189b      	adds	r3, r3, r2
    918c:	18ff      	adds	r7, r7, r3
    918e:	42ba      	cmp	r2, r7
    9190:	d903      	bls.n	919a <__aeabi_fmul+0x15a>
    9192:	2380      	movs	r3, #128	; 0x80
    9194:	025b      	lsls	r3, r3, #9
    9196:	469c      	mov	ip, r3
    9198:	4465      	add	r5, ip
    919a:	0424      	lsls	r4, r4, #16
    919c:	043a      	lsls	r2, r7, #16
    919e:	0c24      	lsrs	r4, r4, #16
    91a0:	1912      	adds	r2, r2, r4
    91a2:	0193      	lsls	r3, r2, #6
    91a4:	1e5c      	subs	r4, r3, #1
    91a6:	41a3      	sbcs	r3, r4
    91a8:	0c3f      	lsrs	r7, r7, #16
    91aa:	0e92      	lsrs	r2, r2, #26
    91ac:	197d      	adds	r5, r7, r5
    91ae:	431a      	orrs	r2, r3
    91b0:	01ad      	lsls	r5, r5, #6
    91b2:	4315      	orrs	r5, r2
    91b4:	012b      	lsls	r3, r5, #4
    91b6:	d504      	bpl.n	91c2 <__aeabi_fmul+0x182>
    91b8:	2301      	movs	r3, #1
    91ba:	465e      	mov	r6, fp
    91bc:	086a      	lsrs	r2, r5, #1
    91be:	401d      	ands	r5, r3
    91c0:	4315      	orrs	r5, r2
    91c2:	0032      	movs	r2, r6
    91c4:	327f      	adds	r2, #127	; 0x7f
    91c6:	2a00      	cmp	r2, #0
    91c8:	dd25      	ble.n	9216 <__aeabi_fmul+0x1d6>
    91ca:	076b      	lsls	r3, r5, #29
    91cc:	d004      	beq.n	91d8 <__aeabi_fmul+0x198>
    91ce:	230f      	movs	r3, #15
    91d0:	402b      	ands	r3, r5
    91d2:	2b04      	cmp	r3, #4
    91d4:	d000      	beq.n	91d8 <__aeabi_fmul+0x198>
    91d6:	3504      	adds	r5, #4
    91d8:	012b      	lsls	r3, r5, #4
    91da:	d503      	bpl.n	91e4 <__aeabi_fmul+0x1a4>
    91dc:	0032      	movs	r2, r6
    91de:	4b27      	ldr	r3, [pc, #156]	; (927c <__aeabi_fmul+0x23c>)
    91e0:	3280      	adds	r2, #128	; 0x80
    91e2:	401d      	ands	r5, r3
    91e4:	2afe      	cmp	r2, #254	; 0xfe
    91e6:	dc94      	bgt.n	9112 <__aeabi_fmul+0xd2>
    91e8:	2401      	movs	r4, #1
    91ea:	01a8      	lsls	r0, r5, #6
    91ec:	0a40      	lsrs	r0, r0, #9
    91ee:	b2d2      	uxtb	r2, r2
    91f0:	400c      	ands	r4, r1
    91f2:	e76f      	b.n	90d4 <__aeabi_fmul+0x94>
    91f4:	2080      	movs	r0, #128	; 0x80
    91f6:	03c0      	lsls	r0, r0, #15
    91f8:	4207      	tst	r7, r0
    91fa:	d007      	beq.n	920c <__aeabi_fmul+0x1cc>
    91fc:	4205      	tst	r5, r0
    91fe:	d105      	bne.n	920c <__aeabi_fmul+0x1cc>
    9200:	4328      	orrs	r0, r5
    9202:	0240      	lsls	r0, r0, #9
    9204:	0a40      	lsrs	r0, r0, #9
    9206:	4644      	mov	r4, r8
    9208:	22ff      	movs	r2, #255	; 0xff
    920a:	e763      	b.n	90d4 <__aeabi_fmul+0x94>
    920c:	4338      	orrs	r0, r7
    920e:	0240      	lsls	r0, r0, #9
    9210:	0a40      	lsrs	r0, r0, #9
    9212:	22ff      	movs	r2, #255	; 0xff
    9214:	e75e      	b.n	90d4 <__aeabi_fmul+0x94>
    9216:	2401      	movs	r4, #1
    9218:	1aa3      	subs	r3, r4, r2
    921a:	2b1b      	cmp	r3, #27
    921c:	dd05      	ble.n	922a <__aeabi_fmul+0x1ea>
    921e:	400c      	ands	r4, r1
    9220:	2200      	movs	r2, #0
    9222:	2000      	movs	r0, #0
    9224:	e756      	b.n	90d4 <__aeabi_fmul+0x94>
    9226:	465e      	mov	r6, fp
    9228:	e7cb      	b.n	91c2 <__aeabi_fmul+0x182>
    922a:	002a      	movs	r2, r5
    922c:	2020      	movs	r0, #32
    922e:	40da      	lsrs	r2, r3
    9230:	1ac3      	subs	r3, r0, r3
    9232:	409d      	lsls	r5, r3
    9234:	002b      	movs	r3, r5
    9236:	1e5d      	subs	r5, r3, #1
    9238:	41ab      	sbcs	r3, r5
    923a:	4313      	orrs	r3, r2
    923c:	075a      	lsls	r2, r3, #29
    923e:	d004      	beq.n	924a <__aeabi_fmul+0x20a>
    9240:	220f      	movs	r2, #15
    9242:	401a      	ands	r2, r3
    9244:	2a04      	cmp	r2, #4
    9246:	d000      	beq.n	924a <__aeabi_fmul+0x20a>
    9248:	3304      	adds	r3, #4
    924a:	015a      	lsls	r2, r3, #5
    924c:	d504      	bpl.n	9258 <__aeabi_fmul+0x218>
    924e:	2401      	movs	r4, #1
    9250:	2201      	movs	r2, #1
    9252:	400c      	ands	r4, r1
    9254:	2000      	movs	r0, #0
    9256:	e73d      	b.n	90d4 <__aeabi_fmul+0x94>
    9258:	2401      	movs	r4, #1
    925a:	019b      	lsls	r3, r3, #6
    925c:	0a58      	lsrs	r0, r3, #9
    925e:	400c      	ands	r4, r1
    9260:	2200      	movs	r2, #0
    9262:	e737      	b.n	90d4 <__aeabi_fmul+0x94>
    9264:	2080      	movs	r0, #128	; 0x80
    9266:	2401      	movs	r4, #1
    9268:	03c0      	lsls	r0, r0, #15
    926a:	4328      	orrs	r0, r5
    926c:	0240      	lsls	r0, r0, #9
    926e:	0a40      	lsrs	r0, r0, #9
    9270:	400c      	ands	r4, r1
    9272:	22ff      	movs	r2, #255	; 0xff
    9274:	e72e      	b.n	90d4 <__aeabi_fmul+0x94>
    9276:	46c0      	nop			; (mov r8, r8)
    9278:	00010e30 	.word	0x00010e30
    927c:	f7ffffff 	.word	0xf7ffffff

00009280 <__aeabi_fsub>:
    9280:	b5f0      	push	{r4, r5, r6, r7, lr}
    9282:	464f      	mov	r7, r9
    9284:	46d6      	mov	lr, sl
    9286:	4646      	mov	r6, r8
    9288:	0044      	lsls	r4, r0, #1
    928a:	b5c0      	push	{r6, r7, lr}
    928c:	0fc2      	lsrs	r2, r0, #31
    928e:	0247      	lsls	r7, r0, #9
    9290:	0248      	lsls	r0, r1, #9
    9292:	0a40      	lsrs	r0, r0, #9
    9294:	4684      	mov	ip, r0
    9296:	4666      	mov	r6, ip
    9298:	0a7b      	lsrs	r3, r7, #9
    929a:	0048      	lsls	r0, r1, #1
    929c:	0fc9      	lsrs	r1, r1, #31
    929e:	469a      	mov	sl, r3
    92a0:	0e24      	lsrs	r4, r4, #24
    92a2:	0015      	movs	r5, r2
    92a4:	00db      	lsls	r3, r3, #3
    92a6:	0e00      	lsrs	r0, r0, #24
    92a8:	4689      	mov	r9, r1
    92aa:	00f6      	lsls	r6, r6, #3
    92ac:	28ff      	cmp	r0, #255	; 0xff
    92ae:	d100      	bne.n	92b2 <__aeabi_fsub+0x32>
    92b0:	e08f      	b.n	93d2 <__aeabi_fsub+0x152>
    92b2:	2101      	movs	r1, #1
    92b4:	464f      	mov	r7, r9
    92b6:	404f      	eors	r7, r1
    92b8:	0039      	movs	r1, r7
    92ba:	4291      	cmp	r1, r2
    92bc:	d066      	beq.n	938c <__aeabi_fsub+0x10c>
    92be:	1a22      	subs	r2, r4, r0
    92c0:	2a00      	cmp	r2, #0
    92c2:	dc00      	bgt.n	92c6 <__aeabi_fsub+0x46>
    92c4:	e09d      	b.n	9402 <__aeabi_fsub+0x182>
    92c6:	2800      	cmp	r0, #0
    92c8:	d13d      	bne.n	9346 <__aeabi_fsub+0xc6>
    92ca:	2e00      	cmp	r6, #0
    92cc:	d100      	bne.n	92d0 <__aeabi_fsub+0x50>
    92ce:	e08b      	b.n	93e8 <__aeabi_fsub+0x168>
    92d0:	1e51      	subs	r1, r2, #1
    92d2:	2900      	cmp	r1, #0
    92d4:	d000      	beq.n	92d8 <__aeabi_fsub+0x58>
    92d6:	e0b5      	b.n	9444 <__aeabi_fsub+0x1c4>
    92d8:	2401      	movs	r4, #1
    92da:	1b9b      	subs	r3, r3, r6
    92dc:	015a      	lsls	r2, r3, #5
    92de:	d544      	bpl.n	936a <__aeabi_fsub+0xea>
    92e0:	019b      	lsls	r3, r3, #6
    92e2:	099f      	lsrs	r7, r3, #6
    92e4:	0038      	movs	r0, r7
    92e6:	f002 f8b9 	bl	b45c <__clzsi2>
    92ea:	3805      	subs	r0, #5
    92ec:	4087      	lsls	r7, r0
    92ee:	4284      	cmp	r4, r0
    92f0:	dd00      	ble.n	92f4 <__aeabi_fsub+0x74>
    92f2:	e096      	b.n	9422 <__aeabi_fsub+0x1a2>
    92f4:	1b04      	subs	r4, r0, r4
    92f6:	003a      	movs	r2, r7
    92f8:	2020      	movs	r0, #32
    92fa:	3401      	adds	r4, #1
    92fc:	40e2      	lsrs	r2, r4
    92fe:	1b04      	subs	r4, r0, r4
    9300:	40a7      	lsls	r7, r4
    9302:	003b      	movs	r3, r7
    9304:	1e5f      	subs	r7, r3, #1
    9306:	41bb      	sbcs	r3, r7
    9308:	2400      	movs	r4, #0
    930a:	4313      	orrs	r3, r2
    930c:	075a      	lsls	r2, r3, #29
    930e:	d004      	beq.n	931a <__aeabi_fsub+0x9a>
    9310:	220f      	movs	r2, #15
    9312:	401a      	ands	r2, r3
    9314:	2a04      	cmp	r2, #4
    9316:	d000      	beq.n	931a <__aeabi_fsub+0x9a>
    9318:	3304      	adds	r3, #4
    931a:	015a      	lsls	r2, r3, #5
    931c:	d527      	bpl.n	936e <__aeabi_fsub+0xee>
    931e:	3401      	adds	r4, #1
    9320:	2cff      	cmp	r4, #255	; 0xff
    9322:	d100      	bne.n	9326 <__aeabi_fsub+0xa6>
    9324:	e079      	b.n	941a <__aeabi_fsub+0x19a>
    9326:	2201      	movs	r2, #1
    9328:	019b      	lsls	r3, r3, #6
    932a:	0a5b      	lsrs	r3, r3, #9
    932c:	b2e4      	uxtb	r4, r4
    932e:	402a      	ands	r2, r5
    9330:	025b      	lsls	r3, r3, #9
    9332:	05e4      	lsls	r4, r4, #23
    9334:	0a58      	lsrs	r0, r3, #9
    9336:	07d2      	lsls	r2, r2, #31
    9338:	4320      	orrs	r0, r4
    933a:	4310      	orrs	r0, r2
    933c:	bc1c      	pop	{r2, r3, r4}
    933e:	4690      	mov	r8, r2
    9340:	4699      	mov	r9, r3
    9342:	46a2      	mov	sl, r4
    9344:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9346:	2cff      	cmp	r4, #255	; 0xff
    9348:	d0e0      	beq.n	930c <__aeabi_fsub+0x8c>
    934a:	2180      	movs	r1, #128	; 0x80
    934c:	04c9      	lsls	r1, r1, #19
    934e:	430e      	orrs	r6, r1
    9350:	2a1b      	cmp	r2, #27
    9352:	dc7b      	bgt.n	944c <__aeabi_fsub+0x1cc>
    9354:	0031      	movs	r1, r6
    9356:	2020      	movs	r0, #32
    9358:	40d1      	lsrs	r1, r2
    935a:	1a82      	subs	r2, r0, r2
    935c:	4096      	lsls	r6, r2
    935e:	1e72      	subs	r2, r6, #1
    9360:	4196      	sbcs	r6, r2
    9362:	430e      	orrs	r6, r1
    9364:	1b9b      	subs	r3, r3, r6
    9366:	015a      	lsls	r2, r3, #5
    9368:	d4ba      	bmi.n	92e0 <__aeabi_fsub+0x60>
    936a:	075a      	lsls	r2, r3, #29
    936c:	d1d0      	bne.n	9310 <__aeabi_fsub+0x90>
    936e:	2201      	movs	r2, #1
    9370:	08df      	lsrs	r7, r3, #3
    9372:	402a      	ands	r2, r5
    9374:	2cff      	cmp	r4, #255	; 0xff
    9376:	d133      	bne.n	93e0 <__aeabi_fsub+0x160>
    9378:	2f00      	cmp	r7, #0
    937a:	d100      	bne.n	937e <__aeabi_fsub+0xfe>
    937c:	e0a8      	b.n	94d0 <__aeabi_fsub+0x250>
    937e:	2380      	movs	r3, #128	; 0x80
    9380:	03db      	lsls	r3, r3, #15
    9382:	433b      	orrs	r3, r7
    9384:	025b      	lsls	r3, r3, #9
    9386:	0a5b      	lsrs	r3, r3, #9
    9388:	24ff      	movs	r4, #255	; 0xff
    938a:	e7d1      	b.n	9330 <__aeabi_fsub+0xb0>
    938c:	1a21      	subs	r1, r4, r0
    938e:	2900      	cmp	r1, #0
    9390:	dd4c      	ble.n	942c <__aeabi_fsub+0x1ac>
    9392:	2800      	cmp	r0, #0
    9394:	d02a      	beq.n	93ec <__aeabi_fsub+0x16c>
    9396:	2cff      	cmp	r4, #255	; 0xff
    9398:	d0b8      	beq.n	930c <__aeabi_fsub+0x8c>
    939a:	2080      	movs	r0, #128	; 0x80
    939c:	04c0      	lsls	r0, r0, #19
    939e:	4306      	orrs	r6, r0
    93a0:	291b      	cmp	r1, #27
    93a2:	dd00      	ble.n	93a6 <__aeabi_fsub+0x126>
    93a4:	e0af      	b.n	9506 <__aeabi_fsub+0x286>
    93a6:	0030      	movs	r0, r6
    93a8:	2720      	movs	r7, #32
    93aa:	40c8      	lsrs	r0, r1
    93ac:	1a79      	subs	r1, r7, r1
    93ae:	408e      	lsls	r6, r1
    93b0:	1e71      	subs	r1, r6, #1
    93b2:	418e      	sbcs	r6, r1
    93b4:	4306      	orrs	r6, r0
    93b6:	199b      	adds	r3, r3, r6
    93b8:	0159      	lsls	r1, r3, #5
    93ba:	d5d6      	bpl.n	936a <__aeabi_fsub+0xea>
    93bc:	3401      	adds	r4, #1
    93be:	2cff      	cmp	r4, #255	; 0xff
    93c0:	d100      	bne.n	93c4 <__aeabi_fsub+0x144>
    93c2:	e085      	b.n	94d0 <__aeabi_fsub+0x250>
    93c4:	2201      	movs	r2, #1
    93c6:	497a      	ldr	r1, [pc, #488]	; (95b0 <__aeabi_fsub+0x330>)
    93c8:	401a      	ands	r2, r3
    93ca:	085b      	lsrs	r3, r3, #1
    93cc:	400b      	ands	r3, r1
    93ce:	4313      	orrs	r3, r2
    93d0:	e79c      	b.n	930c <__aeabi_fsub+0x8c>
    93d2:	2e00      	cmp	r6, #0
    93d4:	d000      	beq.n	93d8 <__aeabi_fsub+0x158>
    93d6:	e770      	b.n	92ba <__aeabi_fsub+0x3a>
    93d8:	e76b      	b.n	92b2 <__aeabi_fsub+0x32>
    93da:	1e3b      	subs	r3, r7, #0
    93dc:	d1c5      	bne.n	936a <__aeabi_fsub+0xea>
    93de:	2200      	movs	r2, #0
    93e0:	027b      	lsls	r3, r7, #9
    93e2:	0a5b      	lsrs	r3, r3, #9
    93e4:	b2e4      	uxtb	r4, r4
    93e6:	e7a3      	b.n	9330 <__aeabi_fsub+0xb0>
    93e8:	0014      	movs	r4, r2
    93ea:	e78f      	b.n	930c <__aeabi_fsub+0x8c>
    93ec:	2e00      	cmp	r6, #0
    93ee:	d04d      	beq.n	948c <__aeabi_fsub+0x20c>
    93f0:	1e48      	subs	r0, r1, #1
    93f2:	2800      	cmp	r0, #0
    93f4:	d157      	bne.n	94a6 <__aeabi_fsub+0x226>
    93f6:	199b      	adds	r3, r3, r6
    93f8:	2401      	movs	r4, #1
    93fa:	015a      	lsls	r2, r3, #5
    93fc:	d5b5      	bpl.n	936a <__aeabi_fsub+0xea>
    93fe:	2402      	movs	r4, #2
    9400:	e7e0      	b.n	93c4 <__aeabi_fsub+0x144>
    9402:	2a00      	cmp	r2, #0
    9404:	d125      	bne.n	9452 <__aeabi_fsub+0x1d2>
    9406:	1c62      	adds	r2, r4, #1
    9408:	b2d2      	uxtb	r2, r2
    940a:	2a01      	cmp	r2, #1
    940c:	dd72      	ble.n	94f4 <__aeabi_fsub+0x274>
    940e:	1b9f      	subs	r7, r3, r6
    9410:	017a      	lsls	r2, r7, #5
    9412:	d535      	bpl.n	9480 <__aeabi_fsub+0x200>
    9414:	1af7      	subs	r7, r6, r3
    9416:	000d      	movs	r5, r1
    9418:	e764      	b.n	92e4 <__aeabi_fsub+0x64>
    941a:	2201      	movs	r2, #1
    941c:	2300      	movs	r3, #0
    941e:	402a      	ands	r2, r5
    9420:	e786      	b.n	9330 <__aeabi_fsub+0xb0>
    9422:	003b      	movs	r3, r7
    9424:	4a63      	ldr	r2, [pc, #396]	; (95b4 <__aeabi_fsub+0x334>)
    9426:	1a24      	subs	r4, r4, r0
    9428:	4013      	ands	r3, r2
    942a:	e76f      	b.n	930c <__aeabi_fsub+0x8c>
    942c:	2900      	cmp	r1, #0
    942e:	d16c      	bne.n	950a <__aeabi_fsub+0x28a>
    9430:	1c61      	adds	r1, r4, #1
    9432:	b2c8      	uxtb	r0, r1
    9434:	2801      	cmp	r0, #1
    9436:	dd4e      	ble.n	94d6 <__aeabi_fsub+0x256>
    9438:	29ff      	cmp	r1, #255	; 0xff
    943a:	d049      	beq.n	94d0 <__aeabi_fsub+0x250>
    943c:	199b      	adds	r3, r3, r6
    943e:	085b      	lsrs	r3, r3, #1
    9440:	000c      	movs	r4, r1
    9442:	e763      	b.n	930c <__aeabi_fsub+0x8c>
    9444:	2aff      	cmp	r2, #255	; 0xff
    9446:	d041      	beq.n	94cc <__aeabi_fsub+0x24c>
    9448:	000a      	movs	r2, r1
    944a:	e781      	b.n	9350 <__aeabi_fsub+0xd0>
    944c:	2601      	movs	r6, #1
    944e:	1b9b      	subs	r3, r3, r6
    9450:	e789      	b.n	9366 <__aeabi_fsub+0xe6>
    9452:	2c00      	cmp	r4, #0
    9454:	d01c      	beq.n	9490 <__aeabi_fsub+0x210>
    9456:	28ff      	cmp	r0, #255	; 0xff
    9458:	d021      	beq.n	949e <__aeabi_fsub+0x21e>
    945a:	2480      	movs	r4, #128	; 0x80
    945c:	04e4      	lsls	r4, r4, #19
    945e:	4252      	negs	r2, r2
    9460:	4323      	orrs	r3, r4
    9462:	2a1b      	cmp	r2, #27
    9464:	dd00      	ble.n	9468 <__aeabi_fsub+0x1e8>
    9466:	e096      	b.n	9596 <__aeabi_fsub+0x316>
    9468:	001c      	movs	r4, r3
    946a:	2520      	movs	r5, #32
    946c:	40d4      	lsrs	r4, r2
    946e:	1aaa      	subs	r2, r5, r2
    9470:	4093      	lsls	r3, r2
    9472:	1e5a      	subs	r2, r3, #1
    9474:	4193      	sbcs	r3, r2
    9476:	4323      	orrs	r3, r4
    9478:	1af3      	subs	r3, r6, r3
    947a:	0004      	movs	r4, r0
    947c:	000d      	movs	r5, r1
    947e:	e72d      	b.n	92dc <__aeabi_fsub+0x5c>
    9480:	2f00      	cmp	r7, #0
    9482:	d000      	beq.n	9486 <__aeabi_fsub+0x206>
    9484:	e72e      	b.n	92e4 <__aeabi_fsub+0x64>
    9486:	2200      	movs	r2, #0
    9488:	2400      	movs	r4, #0
    948a:	e7a9      	b.n	93e0 <__aeabi_fsub+0x160>
    948c:	000c      	movs	r4, r1
    948e:	e73d      	b.n	930c <__aeabi_fsub+0x8c>
    9490:	2b00      	cmp	r3, #0
    9492:	d058      	beq.n	9546 <__aeabi_fsub+0x2c6>
    9494:	43d2      	mvns	r2, r2
    9496:	2a00      	cmp	r2, #0
    9498:	d0ee      	beq.n	9478 <__aeabi_fsub+0x1f8>
    949a:	28ff      	cmp	r0, #255	; 0xff
    949c:	d1e1      	bne.n	9462 <__aeabi_fsub+0x1e2>
    949e:	0033      	movs	r3, r6
    94a0:	24ff      	movs	r4, #255	; 0xff
    94a2:	000d      	movs	r5, r1
    94a4:	e732      	b.n	930c <__aeabi_fsub+0x8c>
    94a6:	29ff      	cmp	r1, #255	; 0xff
    94a8:	d010      	beq.n	94cc <__aeabi_fsub+0x24c>
    94aa:	0001      	movs	r1, r0
    94ac:	e778      	b.n	93a0 <__aeabi_fsub+0x120>
    94ae:	2b00      	cmp	r3, #0
    94b0:	d06e      	beq.n	9590 <__aeabi_fsub+0x310>
    94b2:	24ff      	movs	r4, #255	; 0xff
    94b4:	2e00      	cmp	r6, #0
    94b6:	d100      	bne.n	94ba <__aeabi_fsub+0x23a>
    94b8:	e728      	b.n	930c <__aeabi_fsub+0x8c>
    94ba:	2280      	movs	r2, #128	; 0x80
    94bc:	4651      	mov	r1, sl
    94be:	03d2      	lsls	r2, r2, #15
    94c0:	4211      	tst	r1, r2
    94c2:	d003      	beq.n	94cc <__aeabi_fsub+0x24c>
    94c4:	4661      	mov	r1, ip
    94c6:	4211      	tst	r1, r2
    94c8:	d100      	bne.n	94cc <__aeabi_fsub+0x24c>
    94ca:	0033      	movs	r3, r6
    94cc:	24ff      	movs	r4, #255	; 0xff
    94ce:	e71d      	b.n	930c <__aeabi_fsub+0x8c>
    94d0:	24ff      	movs	r4, #255	; 0xff
    94d2:	2300      	movs	r3, #0
    94d4:	e72c      	b.n	9330 <__aeabi_fsub+0xb0>
    94d6:	2c00      	cmp	r4, #0
    94d8:	d1e9      	bne.n	94ae <__aeabi_fsub+0x22e>
    94da:	2b00      	cmp	r3, #0
    94dc:	d063      	beq.n	95a6 <__aeabi_fsub+0x326>
    94de:	2e00      	cmp	r6, #0
    94e0:	d100      	bne.n	94e4 <__aeabi_fsub+0x264>
    94e2:	e713      	b.n	930c <__aeabi_fsub+0x8c>
    94e4:	199b      	adds	r3, r3, r6
    94e6:	015a      	lsls	r2, r3, #5
    94e8:	d400      	bmi.n	94ec <__aeabi_fsub+0x26c>
    94ea:	e73e      	b.n	936a <__aeabi_fsub+0xea>
    94ec:	4a31      	ldr	r2, [pc, #196]	; (95b4 <__aeabi_fsub+0x334>)
    94ee:	000c      	movs	r4, r1
    94f0:	4013      	ands	r3, r2
    94f2:	e70b      	b.n	930c <__aeabi_fsub+0x8c>
    94f4:	2c00      	cmp	r4, #0
    94f6:	d11e      	bne.n	9536 <__aeabi_fsub+0x2b6>
    94f8:	2b00      	cmp	r3, #0
    94fa:	d12f      	bne.n	955c <__aeabi_fsub+0x2dc>
    94fc:	2e00      	cmp	r6, #0
    94fe:	d04f      	beq.n	95a0 <__aeabi_fsub+0x320>
    9500:	0033      	movs	r3, r6
    9502:	000d      	movs	r5, r1
    9504:	e702      	b.n	930c <__aeabi_fsub+0x8c>
    9506:	2601      	movs	r6, #1
    9508:	e755      	b.n	93b6 <__aeabi_fsub+0x136>
    950a:	2c00      	cmp	r4, #0
    950c:	d11f      	bne.n	954e <__aeabi_fsub+0x2ce>
    950e:	2b00      	cmp	r3, #0
    9510:	d043      	beq.n	959a <__aeabi_fsub+0x31a>
    9512:	43c9      	mvns	r1, r1
    9514:	2900      	cmp	r1, #0
    9516:	d00b      	beq.n	9530 <__aeabi_fsub+0x2b0>
    9518:	28ff      	cmp	r0, #255	; 0xff
    951a:	d039      	beq.n	9590 <__aeabi_fsub+0x310>
    951c:	291b      	cmp	r1, #27
    951e:	dc44      	bgt.n	95aa <__aeabi_fsub+0x32a>
    9520:	001c      	movs	r4, r3
    9522:	2720      	movs	r7, #32
    9524:	40cc      	lsrs	r4, r1
    9526:	1a79      	subs	r1, r7, r1
    9528:	408b      	lsls	r3, r1
    952a:	1e59      	subs	r1, r3, #1
    952c:	418b      	sbcs	r3, r1
    952e:	4323      	orrs	r3, r4
    9530:	199b      	adds	r3, r3, r6
    9532:	0004      	movs	r4, r0
    9534:	e740      	b.n	93b8 <__aeabi_fsub+0x138>
    9536:	2b00      	cmp	r3, #0
    9538:	d11a      	bne.n	9570 <__aeabi_fsub+0x2f0>
    953a:	2e00      	cmp	r6, #0
    953c:	d124      	bne.n	9588 <__aeabi_fsub+0x308>
    953e:	2780      	movs	r7, #128	; 0x80
    9540:	2200      	movs	r2, #0
    9542:	03ff      	lsls	r7, r7, #15
    9544:	e71b      	b.n	937e <__aeabi_fsub+0xfe>
    9546:	0033      	movs	r3, r6
    9548:	0004      	movs	r4, r0
    954a:	000d      	movs	r5, r1
    954c:	e6de      	b.n	930c <__aeabi_fsub+0x8c>
    954e:	28ff      	cmp	r0, #255	; 0xff
    9550:	d01e      	beq.n	9590 <__aeabi_fsub+0x310>
    9552:	2480      	movs	r4, #128	; 0x80
    9554:	04e4      	lsls	r4, r4, #19
    9556:	4249      	negs	r1, r1
    9558:	4323      	orrs	r3, r4
    955a:	e7df      	b.n	951c <__aeabi_fsub+0x29c>
    955c:	2e00      	cmp	r6, #0
    955e:	d100      	bne.n	9562 <__aeabi_fsub+0x2e2>
    9560:	e6d4      	b.n	930c <__aeabi_fsub+0x8c>
    9562:	1b9f      	subs	r7, r3, r6
    9564:	017a      	lsls	r2, r7, #5
    9566:	d400      	bmi.n	956a <__aeabi_fsub+0x2ea>
    9568:	e737      	b.n	93da <__aeabi_fsub+0x15a>
    956a:	1af3      	subs	r3, r6, r3
    956c:	000d      	movs	r5, r1
    956e:	e6cd      	b.n	930c <__aeabi_fsub+0x8c>
    9570:	24ff      	movs	r4, #255	; 0xff
    9572:	2e00      	cmp	r6, #0
    9574:	d100      	bne.n	9578 <__aeabi_fsub+0x2f8>
    9576:	e6c9      	b.n	930c <__aeabi_fsub+0x8c>
    9578:	2280      	movs	r2, #128	; 0x80
    957a:	4650      	mov	r0, sl
    957c:	03d2      	lsls	r2, r2, #15
    957e:	4210      	tst	r0, r2
    9580:	d0a4      	beq.n	94cc <__aeabi_fsub+0x24c>
    9582:	4660      	mov	r0, ip
    9584:	4210      	tst	r0, r2
    9586:	d1a1      	bne.n	94cc <__aeabi_fsub+0x24c>
    9588:	0033      	movs	r3, r6
    958a:	000d      	movs	r5, r1
    958c:	24ff      	movs	r4, #255	; 0xff
    958e:	e6bd      	b.n	930c <__aeabi_fsub+0x8c>
    9590:	0033      	movs	r3, r6
    9592:	24ff      	movs	r4, #255	; 0xff
    9594:	e6ba      	b.n	930c <__aeabi_fsub+0x8c>
    9596:	2301      	movs	r3, #1
    9598:	e76e      	b.n	9478 <__aeabi_fsub+0x1f8>
    959a:	0033      	movs	r3, r6
    959c:	0004      	movs	r4, r0
    959e:	e6b5      	b.n	930c <__aeabi_fsub+0x8c>
    95a0:	2700      	movs	r7, #0
    95a2:	2200      	movs	r2, #0
    95a4:	e71c      	b.n	93e0 <__aeabi_fsub+0x160>
    95a6:	0033      	movs	r3, r6
    95a8:	e6b0      	b.n	930c <__aeabi_fsub+0x8c>
    95aa:	2301      	movs	r3, #1
    95ac:	e7c0      	b.n	9530 <__aeabi_fsub+0x2b0>
    95ae:	46c0      	nop			; (mov r8, r8)
    95b0:	7dffffff 	.word	0x7dffffff
    95b4:	fbffffff 	.word	0xfbffffff

000095b8 <__aeabi_fcmpun>:
    95b8:	0242      	lsls	r2, r0, #9
    95ba:	024b      	lsls	r3, r1, #9
    95bc:	0040      	lsls	r0, r0, #1
    95be:	0049      	lsls	r1, r1, #1
    95c0:	0a52      	lsrs	r2, r2, #9
    95c2:	0e00      	lsrs	r0, r0, #24
    95c4:	0a5b      	lsrs	r3, r3, #9
    95c6:	0e09      	lsrs	r1, r1, #24
    95c8:	28ff      	cmp	r0, #255	; 0xff
    95ca:	d003      	beq.n	95d4 <__aeabi_fcmpun+0x1c>
    95cc:	2000      	movs	r0, #0
    95ce:	29ff      	cmp	r1, #255	; 0xff
    95d0:	d006      	beq.n	95e0 <__aeabi_fcmpun+0x28>
    95d2:	4770      	bx	lr
    95d4:	38fe      	subs	r0, #254	; 0xfe
    95d6:	2a00      	cmp	r2, #0
    95d8:	d1fb      	bne.n	95d2 <__aeabi_fcmpun+0x1a>
    95da:	2000      	movs	r0, #0
    95dc:	29ff      	cmp	r1, #255	; 0xff
    95de:	d1f8      	bne.n	95d2 <__aeabi_fcmpun+0x1a>
    95e0:	0018      	movs	r0, r3
    95e2:	1e43      	subs	r3, r0, #1
    95e4:	4198      	sbcs	r0, r3
    95e6:	e7f4      	b.n	95d2 <__aeabi_fcmpun+0x1a>

000095e8 <__aeabi_f2iz>:
    95e8:	0241      	lsls	r1, r0, #9
    95ea:	0043      	lsls	r3, r0, #1
    95ec:	0fc2      	lsrs	r2, r0, #31
    95ee:	0a49      	lsrs	r1, r1, #9
    95f0:	0e1b      	lsrs	r3, r3, #24
    95f2:	2000      	movs	r0, #0
    95f4:	2b7e      	cmp	r3, #126	; 0x7e
    95f6:	dd0d      	ble.n	9614 <__aeabi_f2iz+0x2c>
    95f8:	2b9d      	cmp	r3, #157	; 0x9d
    95fa:	dc0c      	bgt.n	9616 <__aeabi_f2iz+0x2e>
    95fc:	2080      	movs	r0, #128	; 0x80
    95fe:	0400      	lsls	r0, r0, #16
    9600:	4301      	orrs	r1, r0
    9602:	2b95      	cmp	r3, #149	; 0x95
    9604:	dc0a      	bgt.n	961c <__aeabi_f2iz+0x34>
    9606:	2096      	movs	r0, #150	; 0x96
    9608:	1ac3      	subs	r3, r0, r3
    960a:	40d9      	lsrs	r1, r3
    960c:	4248      	negs	r0, r1
    960e:	2a00      	cmp	r2, #0
    9610:	d100      	bne.n	9614 <__aeabi_f2iz+0x2c>
    9612:	0008      	movs	r0, r1
    9614:	4770      	bx	lr
    9616:	4b03      	ldr	r3, [pc, #12]	; (9624 <__aeabi_f2iz+0x3c>)
    9618:	18d0      	adds	r0, r2, r3
    961a:	e7fb      	b.n	9614 <__aeabi_f2iz+0x2c>
    961c:	3b96      	subs	r3, #150	; 0x96
    961e:	4099      	lsls	r1, r3
    9620:	e7f4      	b.n	960c <__aeabi_f2iz+0x24>
    9622:	46c0      	nop			; (mov r8, r8)
    9624:	7fffffff 	.word	0x7fffffff

00009628 <__aeabi_i2f>:
    9628:	b570      	push	{r4, r5, r6, lr}
    962a:	2800      	cmp	r0, #0
    962c:	d030      	beq.n	9690 <__aeabi_i2f+0x68>
    962e:	17c3      	asrs	r3, r0, #31
    9630:	18c4      	adds	r4, r0, r3
    9632:	405c      	eors	r4, r3
    9634:	0fc5      	lsrs	r5, r0, #31
    9636:	0020      	movs	r0, r4
    9638:	f001 ff10 	bl	b45c <__clzsi2>
    963c:	239e      	movs	r3, #158	; 0x9e
    963e:	1a1b      	subs	r3, r3, r0
    9640:	2b96      	cmp	r3, #150	; 0x96
    9642:	dc0d      	bgt.n	9660 <__aeabi_i2f+0x38>
    9644:	2296      	movs	r2, #150	; 0x96
    9646:	1ad2      	subs	r2, r2, r3
    9648:	4094      	lsls	r4, r2
    964a:	002a      	movs	r2, r5
    964c:	0264      	lsls	r4, r4, #9
    964e:	0a64      	lsrs	r4, r4, #9
    9650:	b2db      	uxtb	r3, r3
    9652:	0264      	lsls	r4, r4, #9
    9654:	05db      	lsls	r3, r3, #23
    9656:	0a60      	lsrs	r0, r4, #9
    9658:	07d2      	lsls	r2, r2, #31
    965a:	4318      	orrs	r0, r3
    965c:	4310      	orrs	r0, r2
    965e:	bd70      	pop	{r4, r5, r6, pc}
    9660:	2b99      	cmp	r3, #153	; 0x99
    9662:	dc19      	bgt.n	9698 <__aeabi_i2f+0x70>
    9664:	2299      	movs	r2, #153	; 0x99
    9666:	1ad2      	subs	r2, r2, r3
    9668:	2a00      	cmp	r2, #0
    966a:	dd29      	ble.n	96c0 <__aeabi_i2f+0x98>
    966c:	4094      	lsls	r4, r2
    966e:	0022      	movs	r2, r4
    9670:	4c14      	ldr	r4, [pc, #80]	; (96c4 <__aeabi_i2f+0x9c>)
    9672:	4014      	ands	r4, r2
    9674:	0751      	lsls	r1, r2, #29
    9676:	d004      	beq.n	9682 <__aeabi_i2f+0x5a>
    9678:	210f      	movs	r1, #15
    967a:	400a      	ands	r2, r1
    967c:	2a04      	cmp	r2, #4
    967e:	d000      	beq.n	9682 <__aeabi_i2f+0x5a>
    9680:	3404      	adds	r4, #4
    9682:	0162      	lsls	r2, r4, #5
    9684:	d413      	bmi.n	96ae <__aeabi_i2f+0x86>
    9686:	01a4      	lsls	r4, r4, #6
    9688:	0a64      	lsrs	r4, r4, #9
    968a:	b2db      	uxtb	r3, r3
    968c:	002a      	movs	r2, r5
    968e:	e7e0      	b.n	9652 <__aeabi_i2f+0x2a>
    9690:	2200      	movs	r2, #0
    9692:	2300      	movs	r3, #0
    9694:	2400      	movs	r4, #0
    9696:	e7dc      	b.n	9652 <__aeabi_i2f+0x2a>
    9698:	2205      	movs	r2, #5
    969a:	0021      	movs	r1, r4
    969c:	1a12      	subs	r2, r2, r0
    969e:	40d1      	lsrs	r1, r2
    96a0:	22b9      	movs	r2, #185	; 0xb9
    96a2:	1ad2      	subs	r2, r2, r3
    96a4:	4094      	lsls	r4, r2
    96a6:	1e62      	subs	r2, r4, #1
    96a8:	4194      	sbcs	r4, r2
    96aa:	430c      	orrs	r4, r1
    96ac:	e7da      	b.n	9664 <__aeabi_i2f+0x3c>
    96ae:	4b05      	ldr	r3, [pc, #20]	; (96c4 <__aeabi_i2f+0x9c>)
    96b0:	002a      	movs	r2, r5
    96b2:	401c      	ands	r4, r3
    96b4:	239f      	movs	r3, #159	; 0x9f
    96b6:	01a4      	lsls	r4, r4, #6
    96b8:	1a1b      	subs	r3, r3, r0
    96ba:	0a64      	lsrs	r4, r4, #9
    96bc:	b2db      	uxtb	r3, r3
    96be:	e7c8      	b.n	9652 <__aeabi_i2f+0x2a>
    96c0:	0022      	movs	r2, r4
    96c2:	e7d5      	b.n	9670 <__aeabi_i2f+0x48>
    96c4:	fbffffff 	.word	0xfbffffff

000096c8 <__aeabi_ui2f>:
    96c8:	b510      	push	{r4, lr}
    96ca:	1e04      	subs	r4, r0, #0
    96cc:	d027      	beq.n	971e <__aeabi_ui2f+0x56>
    96ce:	f001 fec5 	bl	b45c <__clzsi2>
    96d2:	239e      	movs	r3, #158	; 0x9e
    96d4:	1a1b      	subs	r3, r3, r0
    96d6:	2b96      	cmp	r3, #150	; 0x96
    96d8:	dc0a      	bgt.n	96f0 <__aeabi_ui2f+0x28>
    96da:	2296      	movs	r2, #150	; 0x96
    96dc:	1ad2      	subs	r2, r2, r3
    96de:	4094      	lsls	r4, r2
    96e0:	0264      	lsls	r4, r4, #9
    96e2:	0a64      	lsrs	r4, r4, #9
    96e4:	b2db      	uxtb	r3, r3
    96e6:	0264      	lsls	r4, r4, #9
    96e8:	05db      	lsls	r3, r3, #23
    96ea:	0a60      	lsrs	r0, r4, #9
    96ec:	4318      	orrs	r0, r3
    96ee:	bd10      	pop	{r4, pc}
    96f0:	2b99      	cmp	r3, #153	; 0x99
    96f2:	dc17      	bgt.n	9724 <__aeabi_ui2f+0x5c>
    96f4:	2299      	movs	r2, #153	; 0x99
    96f6:	1ad2      	subs	r2, r2, r3
    96f8:	2a00      	cmp	r2, #0
    96fa:	dd27      	ble.n	974c <__aeabi_ui2f+0x84>
    96fc:	4094      	lsls	r4, r2
    96fe:	0022      	movs	r2, r4
    9700:	4c13      	ldr	r4, [pc, #76]	; (9750 <__aeabi_ui2f+0x88>)
    9702:	4014      	ands	r4, r2
    9704:	0751      	lsls	r1, r2, #29
    9706:	d004      	beq.n	9712 <__aeabi_ui2f+0x4a>
    9708:	210f      	movs	r1, #15
    970a:	400a      	ands	r2, r1
    970c:	2a04      	cmp	r2, #4
    970e:	d000      	beq.n	9712 <__aeabi_ui2f+0x4a>
    9710:	3404      	adds	r4, #4
    9712:	0162      	lsls	r2, r4, #5
    9714:	d412      	bmi.n	973c <__aeabi_ui2f+0x74>
    9716:	01a4      	lsls	r4, r4, #6
    9718:	0a64      	lsrs	r4, r4, #9
    971a:	b2db      	uxtb	r3, r3
    971c:	e7e3      	b.n	96e6 <__aeabi_ui2f+0x1e>
    971e:	2300      	movs	r3, #0
    9720:	2400      	movs	r4, #0
    9722:	e7e0      	b.n	96e6 <__aeabi_ui2f+0x1e>
    9724:	22b9      	movs	r2, #185	; 0xb9
    9726:	0021      	movs	r1, r4
    9728:	1ad2      	subs	r2, r2, r3
    972a:	4091      	lsls	r1, r2
    972c:	000a      	movs	r2, r1
    972e:	1e51      	subs	r1, r2, #1
    9730:	418a      	sbcs	r2, r1
    9732:	2105      	movs	r1, #5
    9734:	1a09      	subs	r1, r1, r0
    9736:	40cc      	lsrs	r4, r1
    9738:	4314      	orrs	r4, r2
    973a:	e7db      	b.n	96f4 <__aeabi_ui2f+0x2c>
    973c:	4b04      	ldr	r3, [pc, #16]	; (9750 <__aeabi_ui2f+0x88>)
    973e:	401c      	ands	r4, r3
    9740:	239f      	movs	r3, #159	; 0x9f
    9742:	01a4      	lsls	r4, r4, #6
    9744:	1a1b      	subs	r3, r3, r0
    9746:	0a64      	lsrs	r4, r4, #9
    9748:	b2db      	uxtb	r3, r3
    974a:	e7cc      	b.n	96e6 <__aeabi_ui2f+0x1e>
    974c:	0022      	movs	r2, r4
    974e:	e7d7      	b.n	9700 <__aeabi_ui2f+0x38>
    9750:	fbffffff 	.word	0xfbffffff

00009754 <__aeabi_dadd>:
    9754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9756:	4645      	mov	r5, r8
    9758:	46de      	mov	lr, fp
    975a:	4657      	mov	r7, sl
    975c:	464e      	mov	r6, r9
    975e:	030c      	lsls	r4, r1, #12
    9760:	b5e0      	push	{r5, r6, r7, lr}
    9762:	004e      	lsls	r6, r1, #1
    9764:	0fc9      	lsrs	r1, r1, #31
    9766:	4688      	mov	r8, r1
    9768:	000d      	movs	r5, r1
    976a:	0a61      	lsrs	r1, r4, #9
    976c:	0f44      	lsrs	r4, r0, #29
    976e:	430c      	orrs	r4, r1
    9770:	00c7      	lsls	r7, r0, #3
    9772:	0319      	lsls	r1, r3, #12
    9774:	0058      	lsls	r0, r3, #1
    9776:	0fdb      	lsrs	r3, r3, #31
    9778:	469b      	mov	fp, r3
    977a:	0a4b      	lsrs	r3, r1, #9
    977c:	0f51      	lsrs	r1, r2, #29
    977e:	430b      	orrs	r3, r1
    9780:	0d76      	lsrs	r6, r6, #21
    9782:	0d40      	lsrs	r0, r0, #21
    9784:	0019      	movs	r1, r3
    9786:	00d2      	lsls	r2, r2, #3
    9788:	45d8      	cmp	r8, fp
    978a:	d100      	bne.n	978e <__aeabi_dadd+0x3a>
    978c:	e0ae      	b.n	98ec <__aeabi_dadd+0x198>
    978e:	1a35      	subs	r5, r6, r0
    9790:	2d00      	cmp	r5, #0
    9792:	dc00      	bgt.n	9796 <__aeabi_dadd+0x42>
    9794:	e0f6      	b.n	9984 <__aeabi_dadd+0x230>
    9796:	2800      	cmp	r0, #0
    9798:	d10f      	bne.n	97ba <__aeabi_dadd+0x66>
    979a:	4313      	orrs	r3, r2
    979c:	d100      	bne.n	97a0 <__aeabi_dadd+0x4c>
    979e:	e0db      	b.n	9958 <__aeabi_dadd+0x204>
    97a0:	1e6b      	subs	r3, r5, #1
    97a2:	2b00      	cmp	r3, #0
    97a4:	d000      	beq.n	97a8 <__aeabi_dadd+0x54>
    97a6:	e137      	b.n	9a18 <__aeabi_dadd+0x2c4>
    97a8:	1aba      	subs	r2, r7, r2
    97aa:	4297      	cmp	r7, r2
    97ac:	41bf      	sbcs	r7, r7
    97ae:	1a64      	subs	r4, r4, r1
    97b0:	427f      	negs	r7, r7
    97b2:	1be4      	subs	r4, r4, r7
    97b4:	2601      	movs	r6, #1
    97b6:	0017      	movs	r7, r2
    97b8:	e024      	b.n	9804 <__aeabi_dadd+0xb0>
    97ba:	4bc6      	ldr	r3, [pc, #792]	; (9ad4 <__aeabi_dadd+0x380>)
    97bc:	429e      	cmp	r6, r3
    97be:	d04d      	beq.n	985c <__aeabi_dadd+0x108>
    97c0:	2380      	movs	r3, #128	; 0x80
    97c2:	041b      	lsls	r3, r3, #16
    97c4:	4319      	orrs	r1, r3
    97c6:	2d38      	cmp	r5, #56	; 0x38
    97c8:	dd00      	ble.n	97cc <__aeabi_dadd+0x78>
    97ca:	e107      	b.n	99dc <__aeabi_dadd+0x288>
    97cc:	2d1f      	cmp	r5, #31
    97ce:	dd00      	ble.n	97d2 <__aeabi_dadd+0x7e>
    97d0:	e138      	b.n	9a44 <__aeabi_dadd+0x2f0>
    97d2:	2020      	movs	r0, #32
    97d4:	1b43      	subs	r3, r0, r5
    97d6:	469a      	mov	sl, r3
    97d8:	000b      	movs	r3, r1
    97da:	4650      	mov	r0, sl
    97dc:	4083      	lsls	r3, r0
    97de:	4699      	mov	r9, r3
    97e0:	0013      	movs	r3, r2
    97e2:	4648      	mov	r0, r9
    97e4:	40eb      	lsrs	r3, r5
    97e6:	4318      	orrs	r0, r3
    97e8:	0003      	movs	r3, r0
    97ea:	4650      	mov	r0, sl
    97ec:	4082      	lsls	r2, r0
    97ee:	1e50      	subs	r0, r2, #1
    97f0:	4182      	sbcs	r2, r0
    97f2:	40e9      	lsrs	r1, r5
    97f4:	431a      	orrs	r2, r3
    97f6:	1aba      	subs	r2, r7, r2
    97f8:	1a61      	subs	r1, r4, r1
    97fa:	4297      	cmp	r7, r2
    97fc:	41a4      	sbcs	r4, r4
    97fe:	0017      	movs	r7, r2
    9800:	4264      	negs	r4, r4
    9802:	1b0c      	subs	r4, r1, r4
    9804:	0223      	lsls	r3, r4, #8
    9806:	d562      	bpl.n	98ce <__aeabi_dadd+0x17a>
    9808:	0264      	lsls	r4, r4, #9
    980a:	0a65      	lsrs	r5, r4, #9
    980c:	2d00      	cmp	r5, #0
    980e:	d100      	bne.n	9812 <__aeabi_dadd+0xbe>
    9810:	e0df      	b.n	99d2 <__aeabi_dadd+0x27e>
    9812:	0028      	movs	r0, r5
    9814:	f001 fe22 	bl	b45c <__clzsi2>
    9818:	0003      	movs	r3, r0
    981a:	3b08      	subs	r3, #8
    981c:	2b1f      	cmp	r3, #31
    981e:	dd00      	ble.n	9822 <__aeabi_dadd+0xce>
    9820:	e0d2      	b.n	99c8 <__aeabi_dadd+0x274>
    9822:	2220      	movs	r2, #32
    9824:	003c      	movs	r4, r7
    9826:	1ad2      	subs	r2, r2, r3
    9828:	409d      	lsls	r5, r3
    982a:	40d4      	lsrs	r4, r2
    982c:	409f      	lsls	r7, r3
    982e:	4325      	orrs	r5, r4
    9830:	429e      	cmp	r6, r3
    9832:	dd00      	ble.n	9836 <__aeabi_dadd+0xe2>
    9834:	e0c4      	b.n	99c0 <__aeabi_dadd+0x26c>
    9836:	1b9e      	subs	r6, r3, r6
    9838:	1c73      	adds	r3, r6, #1
    983a:	2b1f      	cmp	r3, #31
    983c:	dd00      	ble.n	9840 <__aeabi_dadd+0xec>
    983e:	e0f1      	b.n	9a24 <__aeabi_dadd+0x2d0>
    9840:	2220      	movs	r2, #32
    9842:	0038      	movs	r0, r7
    9844:	0029      	movs	r1, r5
    9846:	1ad2      	subs	r2, r2, r3
    9848:	40d8      	lsrs	r0, r3
    984a:	4091      	lsls	r1, r2
    984c:	4097      	lsls	r7, r2
    984e:	002c      	movs	r4, r5
    9850:	4301      	orrs	r1, r0
    9852:	1e78      	subs	r0, r7, #1
    9854:	4187      	sbcs	r7, r0
    9856:	40dc      	lsrs	r4, r3
    9858:	2600      	movs	r6, #0
    985a:	430f      	orrs	r7, r1
    985c:	077b      	lsls	r3, r7, #29
    985e:	d009      	beq.n	9874 <__aeabi_dadd+0x120>
    9860:	230f      	movs	r3, #15
    9862:	403b      	ands	r3, r7
    9864:	2b04      	cmp	r3, #4
    9866:	d005      	beq.n	9874 <__aeabi_dadd+0x120>
    9868:	1d3b      	adds	r3, r7, #4
    986a:	42bb      	cmp	r3, r7
    986c:	41bf      	sbcs	r7, r7
    986e:	427f      	negs	r7, r7
    9870:	19e4      	adds	r4, r4, r7
    9872:	001f      	movs	r7, r3
    9874:	0223      	lsls	r3, r4, #8
    9876:	d52c      	bpl.n	98d2 <__aeabi_dadd+0x17e>
    9878:	4b96      	ldr	r3, [pc, #600]	; (9ad4 <__aeabi_dadd+0x380>)
    987a:	3601      	adds	r6, #1
    987c:	429e      	cmp	r6, r3
    987e:	d100      	bne.n	9882 <__aeabi_dadd+0x12e>
    9880:	e09a      	b.n	99b8 <__aeabi_dadd+0x264>
    9882:	4645      	mov	r5, r8
    9884:	4b94      	ldr	r3, [pc, #592]	; (9ad8 <__aeabi_dadd+0x384>)
    9886:	08ff      	lsrs	r7, r7, #3
    9888:	401c      	ands	r4, r3
    988a:	0760      	lsls	r0, r4, #29
    988c:	0576      	lsls	r6, r6, #21
    988e:	0264      	lsls	r4, r4, #9
    9890:	4307      	orrs	r7, r0
    9892:	0b24      	lsrs	r4, r4, #12
    9894:	0d76      	lsrs	r6, r6, #21
    9896:	2100      	movs	r1, #0
    9898:	0324      	lsls	r4, r4, #12
    989a:	0b23      	lsrs	r3, r4, #12
    989c:	0d0c      	lsrs	r4, r1, #20
    989e:	4a8f      	ldr	r2, [pc, #572]	; (9adc <__aeabi_dadd+0x388>)
    98a0:	0524      	lsls	r4, r4, #20
    98a2:	431c      	orrs	r4, r3
    98a4:	4014      	ands	r4, r2
    98a6:	0533      	lsls	r3, r6, #20
    98a8:	4323      	orrs	r3, r4
    98aa:	005b      	lsls	r3, r3, #1
    98ac:	07ed      	lsls	r5, r5, #31
    98ae:	085b      	lsrs	r3, r3, #1
    98b0:	432b      	orrs	r3, r5
    98b2:	0038      	movs	r0, r7
    98b4:	0019      	movs	r1, r3
    98b6:	bc3c      	pop	{r2, r3, r4, r5}
    98b8:	4690      	mov	r8, r2
    98ba:	4699      	mov	r9, r3
    98bc:	46a2      	mov	sl, r4
    98be:	46ab      	mov	fp, r5
    98c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    98c2:	4664      	mov	r4, ip
    98c4:	4304      	orrs	r4, r0
    98c6:	d100      	bne.n	98ca <__aeabi_dadd+0x176>
    98c8:	e211      	b.n	9cee <__aeabi_dadd+0x59a>
    98ca:	0004      	movs	r4, r0
    98cc:	4667      	mov	r7, ip
    98ce:	077b      	lsls	r3, r7, #29
    98d0:	d1c6      	bne.n	9860 <__aeabi_dadd+0x10c>
    98d2:	4645      	mov	r5, r8
    98d4:	0760      	lsls	r0, r4, #29
    98d6:	08ff      	lsrs	r7, r7, #3
    98d8:	4307      	orrs	r7, r0
    98da:	08e4      	lsrs	r4, r4, #3
    98dc:	4b7d      	ldr	r3, [pc, #500]	; (9ad4 <__aeabi_dadd+0x380>)
    98de:	429e      	cmp	r6, r3
    98e0:	d030      	beq.n	9944 <__aeabi_dadd+0x1f0>
    98e2:	0324      	lsls	r4, r4, #12
    98e4:	0576      	lsls	r6, r6, #21
    98e6:	0b24      	lsrs	r4, r4, #12
    98e8:	0d76      	lsrs	r6, r6, #21
    98ea:	e7d4      	b.n	9896 <__aeabi_dadd+0x142>
    98ec:	1a33      	subs	r3, r6, r0
    98ee:	469a      	mov	sl, r3
    98f0:	2b00      	cmp	r3, #0
    98f2:	dd78      	ble.n	99e6 <__aeabi_dadd+0x292>
    98f4:	2800      	cmp	r0, #0
    98f6:	d031      	beq.n	995c <__aeabi_dadd+0x208>
    98f8:	4876      	ldr	r0, [pc, #472]	; (9ad4 <__aeabi_dadd+0x380>)
    98fa:	4286      	cmp	r6, r0
    98fc:	d0ae      	beq.n	985c <__aeabi_dadd+0x108>
    98fe:	2080      	movs	r0, #128	; 0x80
    9900:	0400      	lsls	r0, r0, #16
    9902:	4301      	orrs	r1, r0
    9904:	4653      	mov	r3, sl
    9906:	2b38      	cmp	r3, #56	; 0x38
    9908:	dc00      	bgt.n	990c <__aeabi_dadd+0x1b8>
    990a:	e0e9      	b.n	9ae0 <__aeabi_dadd+0x38c>
    990c:	430a      	orrs	r2, r1
    990e:	1e51      	subs	r1, r2, #1
    9910:	418a      	sbcs	r2, r1
    9912:	2100      	movs	r1, #0
    9914:	19d2      	adds	r2, r2, r7
    9916:	42ba      	cmp	r2, r7
    9918:	41bf      	sbcs	r7, r7
    991a:	1909      	adds	r1, r1, r4
    991c:	427c      	negs	r4, r7
    991e:	0017      	movs	r7, r2
    9920:	190c      	adds	r4, r1, r4
    9922:	0223      	lsls	r3, r4, #8
    9924:	d5d3      	bpl.n	98ce <__aeabi_dadd+0x17a>
    9926:	4b6b      	ldr	r3, [pc, #428]	; (9ad4 <__aeabi_dadd+0x380>)
    9928:	3601      	adds	r6, #1
    992a:	429e      	cmp	r6, r3
    992c:	d100      	bne.n	9930 <__aeabi_dadd+0x1dc>
    992e:	e13a      	b.n	9ba6 <__aeabi_dadd+0x452>
    9930:	2001      	movs	r0, #1
    9932:	4b69      	ldr	r3, [pc, #420]	; (9ad8 <__aeabi_dadd+0x384>)
    9934:	401c      	ands	r4, r3
    9936:	087b      	lsrs	r3, r7, #1
    9938:	4007      	ands	r7, r0
    993a:	431f      	orrs	r7, r3
    993c:	07e0      	lsls	r0, r4, #31
    993e:	4307      	orrs	r7, r0
    9940:	0864      	lsrs	r4, r4, #1
    9942:	e78b      	b.n	985c <__aeabi_dadd+0x108>
    9944:	0023      	movs	r3, r4
    9946:	433b      	orrs	r3, r7
    9948:	d100      	bne.n	994c <__aeabi_dadd+0x1f8>
    994a:	e1cb      	b.n	9ce4 <__aeabi_dadd+0x590>
    994c:	2280      	movs	r2, #128	; 0x80
    994e:	0312      	lsls	r2, r2, #12
    9950:	4314      	orrs	r4, r2
    9952:	0324      	lsls	r4, r4, #12
    9954:	0b24      	lsrs	r4, r4, #12
    9956:	e79e      	b.n	9896 <__aeabi_dadd+0x142>
    9958:	002e      	movs	r6, r5
    995a:	e77f      	b.n	985c <__aeabi_dadd+0x108>
    995c:	0008      	movs	r0, r1
    995e:	4310      	orrs	r0, r2
    9960:	d100      	bne.n	9964 <__aeabi_dadd+0x210>
    9962:	e0b4      	b.n	9ace <__aeabi_dadd+0x37a>
    9964:	1e58      	subs	r0, r3, #1
    9966:	2800      	cmp	r0, #0
    9968:	d000      	beq.n	996c <__aeabi_dadd+0x218>
    996a:	e0de      	b.n	9b2a <__aeabi_dadd+0x3d6>
    996c:	18ba      	adds	r2, r7, r2
    996e:	42ba      	cmp	r2, r7
    9970:	419b      	sbcs	r3, r3
    9972:	1864      	adds	r4, r4, r1
    9974:	425b      	negs	r3, r3
    9976:	18e4      	adds	r4, r4, r3
    9978:	0017      	movs	r7, r2
    997a:	2601      	movs	r6, #1
    997c:	0223      	lsls	r3, r4, #8
    997e:	d5a6      	bpl.n	98ce <__aeabi_dadd+0x17a>
    9980:	2602      	movs	r6, #2
    9982:	e7d5      	b.n	9930 <__aeabi_dadd+0x1dc>
    9984:	2d00      	cmp	r5, #0
    9986:	d16e      	bne.n	9a66 <__aeabi_dadd+0x312>
    9988:	1c70      	adds	r0, r6, #1
    998a:	0540      	lsls	r0, r0, #21
    998c:	0d40      	lsrs	r0, r0, #21
    998e:	2801      	cmp	r0, #1
    9990:	dc00      	bgt.n	9994 <__aeabi_dadd+0x240>
    9992:	e0f9      	b.n	9b88 <__aeabi_dadd+0x434>
    9994:	1ab8      	subs	r0, r7, r2
    9996:	4684      	mov	ip, r0
    9998:	4287      	cmp	r7, r0
    999a:	4180      	sbcs	r0, r0
    999c:	1ae5      	subs	r5, r4, r3
    999e:	4240      	negs	r0, r0
    99a0:	1a2d      	subs	r5, r5, r0
    99a2:	0228      	lsls	r0, r5, #8
    99a4:	d400      	bmi.n	99a8 <__aeabi_dadd+0x254>
    99a6:	e089      	b.n	9abc <__aeabi_dadd+0x368>
    99a8:	1bd7      	subs	r7, r2, r7
    99aa:	42ba      	cmp	r2, r7
    99ac:	4192      	sbcs	r2, r2
    99ae:	1b1c      	subs	r4, r3, r4
    99b0:	4252      	negs	r2, r2
    99b2:	1aa5      	subs	r5, r4, r2
    99b4:	46d8      	mov	r8, fp
    99b6:	e729      	b.n	980c <__aeabi_dadd+0xb8>
    99b8:	4645      	mov	r5, r8
    99ba:	2400      	movs	r4, #0
    99bc:	2700      	movs	r7, #0
    99be:	e76a      	b.n	9896 <__aeabi_dadd+0x142>
    99c0:	4c45      	ldr	r4, [pc, #276]	; (9ad8 <__aeabi_dadd+0x384>)
    99c2:	1af6      	subs	r6, r6, r3
    99c4:	402c      	ands	r4, r5
    99c6:	e749      	b.n	985c <__aeabi_dadd+0x108>
    99c8:	003d      	movs	r5, r7
    99ca:	3828      	subs	r0, #40	; 0x28
    99cc:	4085      	lsls	r5, r0
    99ce:	2700      	movs	r7, #0
    99d0:	e72e      	b.n	9830 <__aeabi_dadd+0xdc>
    99d2:	0038      	movs	r0, r7
    99d4:	f001 fd42 	bl	b45c <__clzsi2>
    99d8:	3020      	adds	r0, #32
    99da:	e71d      	b.n	9818 <__aeabi_dadd+0xc4>
    99dc:	430a      	orrs	r2, r1
    99de:	1e51      	subs	r1, r2, #1
    99e0:	418a      	sbcs	r2, r1
    99e2:	2100      	movs	r1, #0
    99e4:	e707      	b.n	97f6 <__aeabi_dadd+0xa2>
    99e6:	2b00      	cmp	r3, #0
    99e8:	d000      	beq.n	99ec <__aeabi_dadd+0x298>
    99ea:	e0f3      	b.n	9bd4 <__aeabi_dadd+0x480>
    99ec:	1c70      	adds	r0, r6, #1
    99ee:	0543      	lsls	r3, r0, #21
    99f0:	0d5b      	lsrs	r3, r3, #21
    99f2:	2b01      	cmp	r3, #1
    99f4:	dc00      	bgt.n	99f8 <__aeabi_dadd+0x2a4>
    99f6:	e0ad      	b.n	9b54 <__aeabi_dadd+0x400>
    99f8:	4b36      	ldr	r3, [pc, #216]	; (9ad4 <__aeabi_dadd+0x380>)
    99fa:	4298      	cmp	r0, r3
    99fc:	d100      	bne.n	9a00 <__aeabi_dadd+0x2ac>
    99fe:	e0d1      	b.n	9ba4 <__aeabi_dadd+0x450>
    9a00:	18ba      	adds	r2, r7, r2
    9a02:	42ba      	cmp	r2, r7
    9a04:	41bf      	sbcs	r7, r7
    9a06:	1864      	adds	r4, r4, r1
    9a08:	427f      	negs	r7, r7
    9a0a:	19e4      	adds	r4, r4, r7
    9a0c:	07e7      	lsls	r7, r4, #31
    9a0e:	0852      	lsrs	r2, r2, #1
    9a10:	4317      	orrs	r7, r2
    9a12:	0864      	lsrs	r4, r4, #1
    9a14:	0006      	movs	r6, r0
    9a16:	e721      	b.n	985c <__aeabi_dadd+0x108>
    9a18:	482e      	ldr	r0, [pc, #184]	; (9ad4 <__aeabi_dadd+0x380>)
    9a1a:	4285      	cmp	r5, r0
    9a1c:	d100      	bne.n	9a20 <__aeabi_dadd+0x2cc>
    9a1e:	e093      	b.n	9b48 <__aeabi_dadd+0x3f4>
    9a20:	001d      	movs	r5, r3
    9a22:	e6d0      	b.n	97c6 <__aeabi_dadd+0x72>
    9a24:	0029      	movs	r1, r5
    9a26:	3e1f      	subs	r6, #31
    9a28:	40f1      	lsrs	r1, r6
    9a2a:	2b20      	cmp	r3, #32
    9a2c:	d100      	bne.n	9a30 <__aeabi_dadd+0x2dc>
    9a2e:	e08d      	b.n	9b4c <__aeabi_dadd+0x3f8>
    9a30:	2240      	movs	r2, #64	; 0x40
    9a32:	1ad3      	subs	r3, r2, r3
    9a34:	409d      	lsls	r5, r3
    9a36:	432f      	orrs	r7, r5
    9a38:	1e7d      	subs	r5, r7, #1
    9a3a:	41af      	sbcs	r7, r5
    9a3c:	2400      	movs	r4, #0
    9a3e:	430f      	orrs	r7, r1
    9a40:	2600      	movs	r6, #0
    9a42:	e744      	b.n	98ce <__aeabi_dadd+0x17a>
    9a44:	002b      	movs	r3, r5
    9a46:	0008      	movs	r0, r1
    9a48:	3b20      	subs	r3, #32
    9a4a:	40d8      	lsrs	r0, r3
    9a4c:	0003      	movs	r3, r0
    9a4e:	2d20      	cmp	r5, #32
    9a50:	d100      	bne.n	9a54 <__aeabi_dadd+0x300>
    9a52:	e07d      	b.n	9b50 <__aeabi_dadd+0x3fc>
    9a54:	2040      	movs	r0, #64	; 0x40
    9a56:	1b45      	subs	r5, r0, r5
    9a58:	40a9      	lsls	r1, r5
    9a5a:	430a      	orrs	r2, r1
    9a5c:	1e51      	subs	r1, r2, #1
    9a5e:	418a      	sbcs	r2, r1
    9a60:	2100      	movs	r1, #0
    9a62:	431a      	orrs	r2, r3
    9a64:	e6c7      	b.n	97f6 <__aeabi_dadd+0xa2>
    9a66:	2e00      	cmp	r6, #0
    9a68:	d050      	beq.n	9b0c <__aeabi_dadd+0x3b8>
    9a6a:	4e1a      	ldr	r6, [pc, #104]	; (9ad4 <__aeabi_dadd+0x380>)
    9a6c:	42b0      	cmp	r0, r6
    9a6e:	d057      	beq.n	9b20 <__aeabi_dadd+0x3cc>
    9a70:	2680      	movs	r6, #128	; 0x80
    9a72:	426b      	negs	r3, r5
    9a74:	4699      	mov	r9, r3
    9a76:	0436      	lsls	r6, r6, #16
    9a78:	4334      	orrs	r4, r6
    9a7a:	464b      	mov	r3, r9
    9a7c:	2b38      	cmp	r3, #56	; 0x38
    9a7e:	dd00      	ble.n	9a82 <__aeabi_dadd+0x32e>
    9a80:	e0d6      	b.n	9c30 <__aeabi_dadd+0x4dc>
    9a82:	2b1f      	cmp	r3, #31
    9a84:	dd00      	ble.n	9a88 <__aeabi_dadd+0x334>
    9a86:	e135      	b.n	9cf4 <__aeabi_dadd+0x5a0>
    9a88:	2620      	movs	r6, #32
    9a8a:	1af5      	subs	r5, r6, r3
    9a8c:	0026      	movs	r6, r4
    9a8e:	40ae      	lsls	r6, r5
    9a90:	46b2      	mov	sl, r6
    9a92:	003e      	movs	r6, r7
    9a94:	40de      	lsrs	r6, r3
    9a96:	46ac      	mov	ip, r5
    9a98:	0035      	movs	r5, r6
    9a9a:	4656      	mov	r6, sl
    9a9c:	432e      	orrs	r6, r5
    9a9e:	4665      	mov	r5, ip
    9aa0:	40af      	lsls	r7, r5
    9aa2:	1e7d      	subs	r5, r7, #1
    9aa4:	41af      	sbcs	r7, r5
    9aa6:	40dc      	lsrs	r4, r3
    9aa8:	4337      	orrs	r7, r6
    9aaa:	1bd7      	subs	r7, r2, r7
    9aac:	42ba      	cmp	r2, r7
    9aae:	4192      	sbcs	r2, r2
    9ab0:	1b0c      	subs	r4, r1, r4
    9ab2:	4252      	negs	r2, r2
    9ab4:	1aa4      	subs	r4, r4, r2
    9ab6:	0006      	movs	r6, r0
    9ab8:	46d8      	mov	r8, fp
    9aba:	e6a3      	b.n	9804 <__aeabi_dadd+0xb0>
    9abc:	4664      	mov	r4, ip
    9abe:	4667      	mov	r7, ip
    9ac0:	432c      	orrs	r4, r5
    9ac2:	d000      	beq.n	9ac6 <__aeabi_dadd+0x372>
    9ac4:	e6a2      	b.n	980c <__aeabi_dadd+0xb8>
    9ac6:	2500      	movs	r5, #0
    9ac8:	2600      	movs	r6, #0
    9aca:	2700      	movs	r7, #0
    9acc:	e706      	b.n	98dc <__aeabi_dadd+0x188>
    9ace:	001e      	movs	r6, r3
    9ad0:	e6c4      	b.n	985c <__aeabi_dadd+0x108>
    9ad2:	46c0      	nop			; (mov r8, r8)
    9ad4:	000007ff 	.word	0x000007ff
    9ad8:	ff7fffff 	.word	0xff7fffff
    9adc:	800fffff 	.word	0x800fffff
    9ae0:	2b1f      	cmp	r3, #31
    9ae2:	dc63      	bgt.n	9bac <__aeabi_dadd+0x458>
    9ae4:	2020      	movs	r0, #32
    9ae6:	1ac3      	subs	r3, r0, r3
    9ae8:	0008      	movs	r0, r1
    9aea:	4098      	lsls	r0, r3
    9aec:	469c      	mov	ip, r3
    9aee:	4683      	mov	fp, r0
    9af0:	4653      	mov	r3, sl
    9af2:	0010      	movs	r0, r2
    9af4:	40d8      	lsrs	r0, r3
    9af6:	0003      	movs	r3, r0
    9af8:	4658      	mov	r0, fp
    9afa:	4318      	orrs	r0, r3
    9afc:	4663      	mov	r3, ip
    9afe:	409a      	lsls	r2, r3
    9b00:	1e53      	subs	r3, r2, #1
    9b02:	419a      	sbcs	r2, r3
    9b04:	4653      	mov	r3, sl
    9b06:	4302      	orrs	r2, r0
    9b08:	40d9      	lsrs	r1, r3
    9b0a:	e703      	b.n	9914 <__aeabi_dadd+0x1c0>
    9b0c:	0026      	movs	r6, r4
    9b0e:	433e      	orrs	r6, r7
    9b10:	d006      	beq.n	9b20 <__aeabi_dadd+0x3cc>
    9b12:	43eb      	mvns	r3, r5
    9b14:	4699      	mov	r9, r3
    9b16:	2b00      	cmp	r3, #0
    9b18:	d0c7      	beq.n	9aaa <__aeabi_dadd+0x356>
    9b1a:	4e94      	ldr	r6, [pc, #592]	; (9d6c <__aeabi_dadd+0x618>)
    9b1c:	42b0      	cmp	r0, r6
    9b1e:	d1ac      	bne.n	9a7a <__aeabi_dadd+0x326>
    9b20:	000c      	movs	r4, r1
    9b22:	0017      	movs	r7, r2
    9b24:	0006      	movs	r6, r0
    9b26:	46d8      	mov	r8, fp
    9b28:	e698      	b.n	985c <__aeabi_dadd+0x108>
    9b2a:	4b90      	ldr	r3, [pc, #576]	; (9d6c <__aeabi_dadd+0x618>)
    9b2c:	459a      	cmp	sl, r3
    9b2e:	d00b      	beq.n	9b48 <__aeabi_dadd+0x3f4>
    9b30:	4682      	mov	sl, r0
    9b32:	e6e7      	b.n	9904 <__aeabi_dadd+0x1b0>
    9b34:	2800      	cmp	r0, #0
    9b36:	d000      	beq.n	9b3a <__aeabi_dadd+0x3e6>
    9b38:	e09e      	b.n	9c78 <__aeabi_dadd+0x524>
    9b3a:	0018      	movs	r0, r3
    9b3c:	4310      	orrs	r0, r2
    9b3e:	d100      	bne.n	9b42 <__aeabi_dadd+0x3ee>
    9b40:	e0e9      	b.n	9d16 <__aeabi_dadd+0x5c2>
    9b42:	001c      	movs	r4, r3
    9b44:	0017      	movs	r7, r2
    9b46:	46d8      	mov	r8, fp
    9b48:	4e88      	ldr	r6, [pc, #544]	; (9d6c <__aeabi_dadd+0x618>)
    9b4a:	e687      	b.n	985c <__aeabi_dadd+0x108>
    9b4c:	2500      	movs	r5, #0
    9b4e:	e772      	b.n	9a36 <__aeabi_dadd+0x2e2>
    9b50:	2100      	movs	r1, #0
    9b52:	e782      	b.n	9a5a <__aeabi_dadd+0x306>
    9b54:	0023      	movs	r3, r4
    9b56:	433b      	orrs	r3, r7
    9b58:	2e00      	cmp	r6, #0
    9b5a:	d000      	beq.n	9b5e <__aeabi_dadd+0x40a>
    9b5c:	e0ab      	b.n	9cb6 <__aeabi_dadd+0x562>
    9b5e:	2b00      	cmp	r3, #0
    9b60:	d100      	bne.n	9b64 <__aeabi_dadd+0x410>
    9b62:	e0e7      	b.n	9d34 <__aeabi_dadd+0x5e0>
    9b64:	000b      	movs	r3, r1
    9b66:	4313      	orrs	r3, r2
    9b68:	d100      	bne.n	9b6c <__aeabi_dadd+0x418>
    9b6a:	e677      	b.n	985c <__aeabi_dadd+0x108>
    9b6c:	18ba      	adds	r2, r7, r2
    9b6e:	42ba      	cmp	r2, r7
    9b70:	41bf      	sbcs	r7, r7
    9b72:	1864      	adds	r4, r4, r1
    9b74:	427f      	negs	r7, r7
    9b76:	19e4      	adds	r4, r4, r7
    9b78:	0223      	lsls	r3, r4, #8
    9b7a:	d400      	bmi.n	9b7e <__aeabi_dadd+0x42a>
    9b7c:	e0f2      	b.n	9d64 <__aeabi_dadd+0x610>
    9b7e:	4b7c      	ldr	r3, [pc, #496]	; (9d70 <__aeabi_dadd+0x61c>)
    9b80:	0017      	movs	r7, r2
    9b82:	401c      	ands	r4, r3
    9b84:	0006      	movs	r6, r0
    9b86:	e669      	b.n	985c <__aeabi_dadd+0x108>
    9b88:	0020      	movs	r0, r4
    9b8a:	4338      	orrs	r0, r7
    9b8c:	2e00      	cmp	r6, #0
    9b8e:	d1d1      	bne.n	9b34 <__aeabi_dadd+0x3e0>
    9b90:	2800      	cmp	r0, #0
    9b92:	d15b      	bne.n	9c4c <__aeabi_dadd+0x4f8>
    9b94:	001c      	movs	r4, r3
    9b96:	4314      	orrs	r4, r2
    9b98:	d100      	bne.n	9b9c <__aeabi_dadd+0x448>
    9b9a:	e0a8      	b.n	9cee <__aeabi_dadd+0x59a>
    9b9c:	001c      	movs	r4, r3
    9b9e:	0017      	movs	r7, r2
    9ba0:	46d8      	mov	r8, fp
    9ba2:	e65b      	b.n	985c <__aeabi_dadd+0x108>
    9ba4:	0006      	movs	r6, r0
    9ba6:	2400      	movs	r4, #0
    9ba8:	2700      	movs	r7, #0
    9baa:	e697      	b.n	98dc <__aeabi_dadd+0x188>
    9bac:	4650      	mov	r0, sl
    9bae:	000b      	movs	r3, r1
    9bb0:	3820      	subs	r0, #32
    9bb2:	40c3      	lsrs	r3, r0
    9bb4:	4699      	mov	r9, r3
    9bb6:	4653      	mov	r3, sl
    9bb8:	2b20      	cmp	r3, #32
    9bba:	d100      	bne.n	9bbe <__aeabi_dadd+0x46a>
    9bbc:	e095      	b.n	9cea <__aeabi_dadd+0x596>
    9bbe:	2340      	movs	r3, #64	; 0x40
    9bc0:	4650      	mov	r0, sl
    9bc2:	1a1b      	subs	r3, r3, r0
    9bc4:	4099      	lsls	r1, r3
    9bc6:	430a      	orrs	r2, r1
    9bc8:	1e51      	subs	r1, r2, #1
    9bca:	418a      	sbcs	r2, r1
    9bcc:	464b      	mov	r3, r9
    9bce:	2100      	movs	r1, #0
    9bd0:	431a      	orrs	r2, r3
    9bd2:	e69f      	b.n	9914 <__aeabi_dadd+0x1c0>
    9bd4:	2e00      	cmp	r6, #0
    9bd6:	d130      	bne.n	9c3a <__aeabi_dadd+0x4e6>
    9bd8:	0026      	movs	r6, r4
    9bda:	433e      	orrs	r6, r7
    9bdc:	d067      	beq.n	9cae <__aeabi_dadd+0x55a>
    9bde:	43db      	mvns	r3, r3
    9be0:	469a      	mov	sl, r3
    9be2:	2b00      	cmp	r3, #0
    9be4:	d01c      	beq.n	9c20 <__aeabi_dadd+0x4cc>
    9be6:	4e61      	ldr	r6, [pc, #388]	; (9d6c <__aeabi_dadd+0x618>)
    9be8:	42b0      	cmp	r0, r6
    9bea:	d060      	beq.n	9cae <__aeabi_dadd+0x55a>
    9bec:	4653      	mov	r3, sl
    9bee:	2b38      	cmp	r3, #56	; 0x38
    9bf0:	dd00      	ble.n	9bf4 <__aeabi_dadd+0x4a0>
    9bf2:	e096      	b.n	9d22 <__aeabi_dadd+0x5ce>
    9bf4:	2b1f      	cmp	r3, #31
    9bf6:	dd00      	ble.n	9bfa <__aeabi_dadd+0x4a6>
    9bf8:	e09f      	b.n	9d3a <__aeabi_dadd+0x5e6>
    9bfa:	2620      	movs	r6, #32
    9bfc:	1af3      	subs	r3, r6, r3
    9bfe:	0026      	movs	r6, r4
    9c00:	409e      	lsls	r6, r3
    9c02:	469c      	mov	ip, r3
    9c04:	46b3      	mov	fp, r6
    9c06:	4653      	mov	r3, sl
    9c08:	003e      	movs	r6, r7
    9c0a:	40de      	lsrs	r6, r3
    9c0c:	0033      	movs	r3, r6
    9c0e:	465e      	mov	r6, fp
    9c10:	431e      	orrs	r6, r3
    9c12:	4663      	mov	r3, ip
    9c14:	409f      	lsls	r7, r3
    9c16:	1e7b      	subs	r3, r7, #1
    9c18:	419f      	sbcs	r7, r3
    9c1a:	4653      	mov	r3, sl
    9c1c:	40dc      	lsrs	r4, r3
    9c1e:	4337      	orrs	r7, r6
    9c20:	18bf      	adds	r7, r7, r2
    9c22:	4297      	cmp	r7, r2
    9c24:	4192      	sbcs	r2, r2
    9c26:	1864      	adds	r4, r4, r1
    9c28:	4252      	negs	r2, r2
    9c2a:	18a4      	adds	r4, r4, r2
    9c2c:	0006      	movs	r6, r0
    9c2e:	e678      	b.n	9922 <__aeabi_dadd+0x1ce>
    9c30:	4327      	orrs	r7, r4
    9c32:	1e7c      	subs	r4, r7, #1
    9c34:	41a7      	sbcs	r7, r4
    9c36:	2400      	movs	r4, #0
    9c38:	e737      	b.n	9aaa <__aeabi_dadd+0x356>
    9c3a:	4e4c      	ldr	r6, [pc, #304]	; (9d6c <__aeabi_dadd+0x618>)
    9c3c:	42b0      	cmp	r0, r6
    9c3e:	d036      	beq.n	9cae <__aeabi_dadd+0x55a>
    9c40:	2680      	movs	r6, #128	; 0x80
    9c42:	425b      	negs	r3, r3
    9c44:	0436      	lsls	r6, r6, #16
    9c46:	469a      	mov	sl, r3
    9c48:	4334      	orrs	r4, r6
    9c4a:	e7cf      	b.n	9bec <__aeabi_dadd+0x498>
    9c4c:	0018      	movs	r0, r3
    9c4e:	4310      	orrs	r0, r2
    9c50:	d100      	bne.n	9c54 <__aeabi_dadd+0x500>
    9c52:	e603      	b.n	985c <__aeabi_dadd+0x108>
    9c54:	1ab8      	subs	r0, r7, r2
    9c56:	4684      	mov	ip, r0
    9c58:	4567      	cmp	r7, ip
    9c5a:	41ad      	sbcs	r5, r5
    9c5c:	1ae0      	subs	r0, r4, r3
    9c5e:	426d      	negs	r5, r5
    9c60:	1b40      	subs	r0, r0, r5
    9c62:	0205      	lsls	r5, r0, #8
    9c64:	d400      	bmi.n	9c68 <__aeabi_dadd+0x514>
    9c66:	e62c      	b.n	98c2 <__aeabi_dadd+0x16e>
    9c68:	1bd7      	subs	r7, r2, r7
    9c6a:	42ba      	cmp	r2, r7
    9c6c:	4192      	sbcs	r2, r2
    9c6e:	1b1c      	subs	r4, r3, r4
    9c70:	4252      	negs	r2, r2
    9c72:	1aa4      	subs	r4, r4, r2
    9c74:	46d8      	mov	r8, fp
    9c76:	e5f1      	b.n	985c <__aeabi_dadd+0x108>
    9c78:	0018      	movs	r0, r3
    9c7a:	4310      	orrs	r0, r2
    9c7c:	d100      	bne.n	9c80 <__aeabi_dadd+0x52c>
    9c7e:	e763      	b.n	9b48 <__aeabi_dadd+0x3f4>
    9c80:	08f8      	lsrs	r0, r7, #3
    9c82:	0767      	lsls	r7, r4, #29
    9c84:	4307      	orrs	r7, r0
    9c86:	2080      	movs	r0, #128	; 0x80
    9c88:	08e4      	lsrs	r4, r4, #3
    9c8a:	0300      	lsls	r0, r0, #12
    9c8c:	4204      	tst	r4, r0
    9c8e:	d008      	beq.n	9ca2 <__aeabi_dadd+0x54e>
    9c90:	08dd      	lsrs	r5, r3, #3
    9c92:	4205      	tst	r5, r0
    9c94:	d105      	bne.n	9ca2 <__aeabi_dadd+0x54e>
    9c96:	08d2      	lsrs	r2, r2, #3
    9c98:	0759      	lsls	r1, r3, #29
    9c9a:	4311      	orrs	r1, r2
    9c9c:	000f      	movs	r7, r1
    9c9e:	002c      	movs	r4, r5
    9ca0:	46d8      	mov	r8, fp
    9ca2:	0f7b      	lsrs	r3, r7, #29
    9ca4:	00e4      	lsls	r4, r4, #3
    9ca6:	431c      	orrs	r4, r3
    9ca8:	00ff      	lsls	r7, r7, #3
    9caa:	4e30      	ldr	r6, [pc, #192]	; (9d6c <__aeabi_dadd+0x618>)
    9cac:	e5d6      	b.n	985c <__aeabi_dadd+0x108>
    9cae:	000c      	movs	r4, r1
    9cb0:	0017      	movs	r7, r2
    9cb2:	0006      	movs	r6, r0
    9cb4:	e5d2      	b.n	985c <__aeabi_dadd+0x108>
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d038      	beq.n	9d2c <__aeabi_dadd+0x5d8>
    9cba:	000b      	movs	r3, r1
    9cbc:	4313      	orrs	r3, r2
    9cbe:	d100      	bne.n	9cc2 <__aeabi_dadd+0x56e>
    9cc0:	e742      	b.n	9b48 <__aeabi_dadd+0x3f4>
    9cc2:	08f8      	lsrs	r0, r7, #3
    9cc4:	0767      	lsls	r7, r4, #29
    9cc6:	4307      	orrs	r7, r0
    9cc8:	2080      	movs	r0, #128	; 0x80
    9cca:	08e4      	lsrs	r4, r4, #3
    9ccc:	0300      	lsls	r0, r0, #12
    9cce:	4204      	tst	r4, r0
    9cd0:	d0e7      	beq.n	9ca2 <__aeabi_dadd+0x54e>
    9cd2:	08cb      	lsrs	r3, r1, #3
    9cd4:	4203      	tst	r3, r0
    9cd6:	d1e4      	bne.n	9ca2 <__aeabi_dadd+0x54e>
    9cd8:	08d2      	lsrs	r2, r2, #3
    9cda:	0749      	lsls	r1, r1, #29
    9cdc:	4311      	orrs	r1, r2
    9cde:	000f      	movs	r7, r1
    9ce0:	001c      	movs	r4, r3
    9ce2:	e7de      	b.n	9ca2 <__aeabi_dadd+0x54e>
    9ce4:	2700      	movs	r7, #0
    9ce6:	2400      	movs	r4, #0
    9ce8:	e5d5      	b.n	9896 <__aeabi_dadd+0x142>
    9cea:	2100      	movs	r1, #0
    9cec:	e76b      	b.n	9bc6 <__aeabi_dadd+0x472>
    9cee:	2500      	movs	r5, #0
    9cf0:	2700      	movs	r7, #0
    9cf2:	e5f3      	b.n	98dc <__aeabi_dadd+0x188>
    9cf4:	464e      	mov	r6, r9
    9cf6:	0025      	movs	r5, r4
    9cf8:	3e20      	subs	r6, #32
    9cfa:	40f5      	lsrs	r5, r6
    9cfc:	464b      	mov	r3, r9
    9cfe:	002e      	movs	r6, r5
    9d00:	2b20      	cmp	r3, #32
    9d02:	d02d      	beq.n	9d60 <__aeabi_dadd+0x60c>
    9d04:	2540      	movs	r5, #64	; 0x40
    9d06:	1aed      	subs	r5, r5, r3
    9d08:	40ac      	lsls	r4, r5
    9d0a:	4327      	orrs	r7, r4
    9d0c:	1e7c      	subs	r4, r7, #1
    9d0e:	41a7      	sbcs	r7, r4
    9d10:	2400      	movs	r4, #0
    9d12:	4337      	orrs	r7, r6
    9d14:	e6c9      	b.n	9aaa <__aeabi_dadd+0x356>
    9d16:	2480      	movs	r4, #128	; 0x80
    9d18:	2500      	movs	r5, #0
    9d1a:	0324      	lsls	r4, r4, #12
    9d1c:	4e13      	ldr	r6, [pc, #76]	; (9d6c <__aeabi_dadd+0x618>)
    9d1e:	2700      	movs	r7, #0
    9d20:	e5dc      	b.n	98dc <__aeabi_dadd+0x188>
    9d22:	4327      	orrs	r7, r4
    9d24:	1e7c      	subs	r4, r7, #1
    9d26:	41a7      	sbcs	r7, r4
    9d28:	2400      	movs	r4, #0
    9d2a:	e779      	b.n	9c20 <__aeabi_dadd+0x4cc>
    9d2c:	000c      	movs	r4, r1
    9d2e:	0017      	movs	r7, r2
    9d30:	4e0e      	ldr	r6, [pc, #56]	; (9d6c <__aeabi_dadd+0x618>)
    9d32:	e593      	b.n	985c <__aeabi_dadd+0x108>
    9d34:	000c      	movs	r4, r1
    9d36:	0017      	movs	r7, r2
    9d38:	e590      	b.n	985c <__aeabi_dadd+0x108>
    9d3a:	4656      	mov	r6, sl
    9d3c:	0023      	movs	r3, r4
    9d3e:	3e20      	subs	r6, #32
    9d40:	40f3      	lsrs	r3, r6
    9d42:	4699      	mov	r9, r3
    9d44:	4653      	mov	r3, sl
    9d46:	2b20      	cmp	r3, #32
    9d48:	d00e      	beq.n	9d68 <__aeabi_dadd+0x614>
    9d4a:	2340      	movs	r3, #64	; 0x40
    9d4c:	4656      	mov	r6, sl
    9d4e:	1b9b      	subs	r3, r3, r6
    9d50:	409c      	lsls	r4, r3
    9d52:	4327      	orrs	r7, r4
    9d54:	1e7c      	subs	r4, r7, #1
    9d56:	41a7      	sbcs	r7, r4
    9d58:	464b      	mov	r3, r9
    9d5a:	2400      	movs	r4, #0
    9d5c:	431f      	orrs	r7, r3
    9d5e:	e75f      	b.n	9c20 <__aeabi_dadd+0x4cc>
    9d60:	2400      	movs	r4, #0
    9d62:	e7d2      	b.n	9d0a <__aeabi_dadd+0x5b6>
    9d64:	0017      	movs	r7, r2
    9d66:	e5b2      	b.n	98ce <__aeabi_dadd+0x17a>
    9d68:	2400      	movs	r4, #0
    9d6a:	e7f2      	b.n	9d52 <__aeabi_dadd+0x5fe>
    9d6c:	000007ff 	.word	0x000007ff
    9d70:	ff7fffff 	.word	0xff7fffff

00009d74 <__aeabi_ddiv>:
    9d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d76:	4657      	mov	r7, sl
    9d78:	4645      	mov	r5, r8
    9d7a:	46de      	mov	lr, fp
    9d7c:	464e      	mov	r6, r9
    9d7e:	b5e0      	push	{r5, r6, r7, lr}
    9d80:	004c      	lsls	r4, r1, #1
    9d82:	030e      	lsls	r6, r1, #12
    9d84:	b087      	sub	sp, #28
    9d86:	4683      	mov	fp, r0
    9d88:	4692      	mov	sl, r2
    9d8a:	001d      	movs	r5, r3
    9d8c:	4680      	mov	r8, r0
    9d8e:	0b36      	lsrs	r6, r6, #12
    9d90:	0d64      	lsrs	r4, r4, #21
    9d92:	0fcf      	lsrs	r7, r1, #31
    9d94:	2c00      	cmp	r4, #0
    9d96:	d04f      	beq.n	9e38 <__aeabi_ddiv+0xc4>
    9d98:	4b6f      	ldr	r3, [pc, #444]	; (9f58 <__aeabi_ddiv+0x1e4>)
    9d9a:	429c      	cmp	r4, r3
    9d9c:	d035      	beq.n	9e0a <__aeabi_ddiv+0x96>
    9d9e:	2380      	movs	r3, #128	; 0x80
    9da0:	0f42      	lsrs	r2, r0, #29
    9da2:	041b      	lsls	r3, r3, #16
    9da4:	00f6      	lsls	r6, r6, #3
    9da6:	4313      	orrs	r3, r2
    9da8:	4333      	orrs	r3, r6
    9daa:	4699      	mov	r9, r3
    9dac:	00c3      	lsls	r3, r0, #3
    9dae:	4698      	mov	r8, r3
    9db0:	4b6a      	ldr	r3, [pc, #424]	; (9f5c <__aeabi_ddiv+0x1e8>)
    9db2:	2600      	movs	r6, #0
    9db4:	469c      	mov	ip, r3
    9db6:	2300      	movs	r3, #0
    9db8:	4464      	add	r4, ip
    9dba:	9303      	str	r3, [sp, #12]
    9dbc:	032b      	lsls	r3, r5, #12
    9dbe:	0b1b      	lsrs	r3, r3, #12
    9dc0:	469b      	mov	fp, r3
    9dc2:	006b      	lsls	r3, r5, #1
    9dc4:	0fed      	lsrs	r5, r5, #31
    9dc6:	4650      	mov	r0, sl
    9dc8:	0d5b      	lsrs	r3, r3, #21
    9dca:	9501      	str	r5, [sp, #4]
    9dcc:	d05e      	beq.n	9e8c <__aeabi_ddiv+0x118>
    9dce:	4a62      	ldr	r2, [pc, #392]	; (9f58 <__aeabi_ddiv+0x1e4>)
    9dd0:	4293      	cmp	r3, r2
    9dd2:	d053      	beq.n	9e7c <__aeabi_ddiv+0x108>
    9dd4:	465a      	mov	r2, fp
    9dd6:	00d1      	lsls	r1, r2, #3
    9dd8:	2280      	movs	r2, #128	; 0x80
    9dda:	0f40      	lsrs	r0, r0, #29
    9ddc:	0412      	lsls	r2, r2, #16
    9dde:	4302      	orrs	r2, r0
    9de0:	430a      	orrs	r2, r1
    9de2:	4693      	mov	fp, r2
    9de4:	4652      	mov	r2, sl
    9de6:	00d1      	lsls	r1, r2, #3
    9de8:	4a5c      	ldr	r2, [pc, #368]	; (9f5c <__aeabi_ddiv+0x1e8>)
    9dea:	4694      	mov	ip, r2
    9dec:	2200      	movs	r2, #0
    9dee:	4463      	add	r3, ip
    9df0:	0038      	movs	r0, r7
    9df2:	4068      	eors	r0, r5
    9df4:	4684      	mov	ip, r0
    9df6:	9002      	str	r0, [sp, #8]
    9df8:	1ae4      	subs	r4, r4, r3
    9dfa:	4316      	orrs	r6, r2
    9dfc:	2e0f      	cmp	r6, #15
    9dfe:	d900      	bls.n	9e02 <__aeabi_ddiv+0x8e>
    9e00:	e0b4      	b.n	9f6c <__aeabi_ddiv+0x1f8>
    9e02:	4b57      	ldr	r3, [pc, #348]	; (9f60 <__aeabi_ddiv+0x1ec>)
    9e04:	00b6      	lsls	r6, r6, #2
    9e06:	599b      	ldr	r3, [r3, r6]
    9e08:	469f      	mov	pc, r3
    9e0a:	0003      	movs	r3, r0
    9e0c:	4333      	orrs	r3, r6
    9e0e:	4699      	mov	r9, r3
    9e10:	d16c      	bne.n	9eec <__aeabi_ddiv+0x178>
    9e12:	2300      	movs	r3, #0
    9e14:	4698      	mov	r8, r3
    9e16:	3302      	adds	r3, #2
    9e18:	2608      	movs	r6, #8
    9e1a:	9303      	str	r3, [sp, #12]
    9e1c:	e7ce      	b.n	9dbc <__aeabi_ddiv+0x48>
    9e1e:	46cb      	mov	fp, r9
    9e20:	4641      	mov	r1, r8
    9e22:	9a03      	ldr	r2, [sp, #12]
    9e24:	9701      	str	r7, [sp, #4]
    9e26:	2a02      	cmp	r2, #2
    9e28:	d165      	bne.n	9ef6 <__aeabi_ddiv+0x182>
    9e2a:	9b01      	ldr	r3, [sp, #4]
    9e2c:	4c4a      	ldr	r4, [pc, #296]	; (9f58 <__aeabi_ddiv+0x1e4>)
    9e2e:	469c      	mov	ip, r3
    9e30:	2300      	movs	r3, #0
    9e32:	2200      	movs	r2, #0
    9e34:	4698      	mov	r8, r3
    9e36:	e06b      	b.n	9f10 <__aeabi_ddiv+0x19c>
    9e38:	0003      	movs	r3, r0
    9e3a:	4333      	orrs	r3, r6
    9e3c:	4699      	mov	r9, r3
    9e3e:	d04e      	beq.n	9ede <__aeabi_ddiv+0x16a>
    9e40:	2e00      	cmp	r6, #0
    9e42:	d100      	bne.n	9e46 <__aeabi_ddiv+0xd2>
    9e44:	e1bc      	b.n	a1c0 <__aeabi_ddiv+0x44c>
    9e46:	0030      	movs	r0, r6
    9e48:	f001 fb08 	bl	b45c <__clzsi2>
    9e4c:	0003      	movs	r3, r0
    9e4e:	3b0b      	subs	r3, #11
    9e50:	2b1c      	cmp	r3, #28
    9e52:	dd00      	ble.n	9e56 <__aeabi_ddiv+0xe2>
    9e54:	e1ac      	b.n	a1b0 <__aeabi_ddiv+0x43c>
    9e56:	221d      	movs	r2, #29
    9e58:	1ad3      	subs	r3, r2, r3
    9e5a:	465a      	mov	r2, fp
    9e5c:	0001      	movs	r1, r0
    9e5e:	40da      	lsrs	r2, r3
    9e60:	3908      	subs	r1, #8
    9e62:	408e      	lsls	r6, r1
    9e64:	0013      	movs	r3, r2
    9e66:	4333      	orrs	r3, r6
    9e68:	4699      	mov	r9, r3
    9e6a:	465b      	mov	r3, fp
    9e6c:	408b      	lsls	r3, r1
    9e6e:	4698      	mov	r8, r3
    9e70:	2300      	movs	r3, #0
    9e72:	4c3c      	ldr	r4, [pc, #240]	; (9f64 <__aeabi_ddiv+0x1f0>)
    9e74:	2600      	movs	r6, #0
    9e76:	1a24      	subs	r4, r4, r0
    9e78:	9303      	str	r3, [sp, #12]
    9e7a:	e79f      	b.n	9dbc <__aeabi_ddiv+0x48>
    9e7c:	4651      	mov	r1, sl
    9e7e:	465a      	mov	r2, fp
    9e80:	4311      	orrs	r1, r2
    9e82:	d129      	bne.n	9ed8 <__aeabi_ddiv+0x164>
    9e84:	2200      	movs	r2, #0
    9e86:	4693      	mov	fp, r2
    9e88:	3202      	adds	r2, #2
    9e8a:	e7b1      	b.n	9df0 <__aeabi_ddiv+0x7c>
    9e8c:	4659      	mov	r1, fp
    9e8e:	4301      	orrs	r1, r0
    9e90:	d01e      	beq.n	9ed0 <__aeabi_ddiv+0x15c>
    9e92:	465b      	mov	r3, fp
    9e94:	2b00      	cmp	r3, #0
    9e96:	d100      	bne.n	9e9a <__aeabi_ddiv+0x126>
    9e98:	e19e      	b.n	a1d8 <__aeabi_ddiv+0x464>
    9e9a:	4658      	mov	r0, fp
    9e9c:	f001 fade 	bl	b45c <__clzsi2>
    9ea0:	0003      	movs	r3, r0
    9ea2:	3b0b      	subs	r3, #11
    9ea4:	2b1c      	cmp	r3, #28
    9ea6:	dd00      	ble.n	9eaa <__aeabi_ddiv+0x136>
    9ea8:	e18f      	b.n	a1ca <__aeabi_ddiv+0x456>
    9eaa:	0002      	movs	r2, r0
    9eac:	4659      	mov	r1, fp
    9eae:	3a08      	subs	r2, #8
    9eb0:	4091      	lsls	r1, r2
    9eb2:	468b      	mov	fp, r1
    9eb4:	211d      	movs	r1, #29
    9eb6:	1acb      	subs	r3, r1, r3
    9eb8:	4651      	mov	r1, sl
    9eba:	40d9      	lsrs	r1, r3
    9ebc:	000b      	movs	r3, r1
    9ebe:	4659      	mov	r1, fp
    9ec0:	430b      	orrs	r3, r1
    9ec2:	4651      	mov	r1, sl
    9ec4:	469b      	mov	fp, r3
    9ec6:	4091      	lsls	r1, r2
    9ec8:	4b26      	ldr	r3, [pc, #152]	; (9f64 <__aeabi_ddiv+0x1f0>)
    9eca:	2200      	movs	r2, #0
    9ecc:	1a1b      	subs	r3, r3, r0
    9ece:	e78f      	b.n	9df0 <__aeabi_ddiv+0x7c>
    9ed0:	2300      	movs	r3, #0
    9ed2:	2201      	movs	r2, #1
    9ed4:	469b      	mov	fp, r3
    9ed6:	e78b      	b.n	9df0 <__aeabi_ddiv+0x7c>
    9ed8:	4651      	mov	r1, sl
    9eda:	2203      	movs	r2, #3
    9edc:	e788      	b.n	9df0 <__aeabi_ddiv+0x7c>
    9ede:	2300      	movs	r3, #0
    9ee0:	4698      	mov	r8, r3
    9ee2:	3301      	adds	r3, #1
    9ee4:	2604      	movs	r6, #4
    9ee6:	2400      	movs	r4, #0
    9ee8:	9303      	str	r3, [sp, #12]
    9eea:	e767      	b.n	9dbc <__aeabi_ddiv+0x48>
    9eec:	2303      	movs	r3, #3
    9eee:	46b1      	mov	r9, r6
    9ef0:	9303      	str	r3, [sp, #12]
    9ef2:	260c      	movs	r6, #12
    9ef4:	e762      	b.n	9dbc <__aeabi_ddiv+0x48>
    9ef6:	2a03      	cmp	r2, #3
    9ef8:	d100      	bne.n	9efc <__aeabi_ddiv+0x188>
    9efa:	e25c      	b.n	a3b6 <__aeabi_ddiv+0x642>
    9efc:	9b01      	ldr	r3, [sp, #4]
    9efe:	2a01      	cmp	r2, #1
    9f00:	d000      	beq.n	9f04 <__aeabi_ddiv+0x190>
    9f02:	e1e4      	b.n	a2ce <__aeabi_ddiv+0x55a>
    9f04:	4013      	ands	r3, r2
    9f06:	469c      	mov	ip, r3
    9f08:	2300      	movs	r3, #0
    9f0a:	2400      	movs	r4, #0
    9f0c:	2200      	movs	r2, #0
    9f0e:	4698      	mov	r8, r3
    9f10:	2100      	movs	r1, #0
    9f12:	0312      	lsls	r2, r2, #12
    9f14:	0b13      	lsrs	r3, r2, #12
    9f16:	0d0a      	lsrs	r2, r1, #20
    9f18:	0512      	lsls	r2, r2, #20
    9f1a:	431a      	orrs	r2, r3
    9f1c:	0523      	lsls	r3, r4, #20
    9f1e:	4c12      	ldr	r4, [pc, #72]	; (9f68 <__aeabi_ddiv+0x1f4>)
    9f20:	4640      	mov	r0, r8
    9f22:	4022      	ands	r2, r4
    9f24:	4313      	orrs	r3, r2
    9f26:	4662      	mov	r2, ip
    9f28:	005b      	lsls	r3, r3, #1
    9f2a:	07d2      	lsls	r2, r2, #31
    9f2c:	085b      	lsrs	r3, r3, #1
    9f2e:	4313      	orrs	r3, r2
    9f30:	0019      	movs	r1, r3
    9f32:	b007      	add	sp, #28
    9f34:	bc3c      	pop	{r2, r3, r4, r5}
    9f36:	4690      	mov	r8, r2
    9f38:	4699      	mov	r9, r3
    9f3a:	46a2      	mov	sl, r4
    9f3c:	46ab      	mov	fp, r5
    9f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f40:	2300      	movs	r3, #0
    9f42:	2280      	movs	r2, #128	; 0x80
    9f44:	469c      	mov	ip, r3
    9f46:	0312      	lsls	r2, r2, #12
    9f48:	4698      	mov	r8, r3
    9f4a:	4c03      	ldr	r4, [pc, #12]	; (9f58 <__aeabi_ddiv+0x1e4>)
    9f4c:	e7e0      	b.n	9f10 <__aeabi_ddiv+0x19c>
    9f4e:	2300      	movs	r3, #0
    9f50:	4c01      	ldr	r4, [pc, #4]	; (9f58 <__aeabi_ddiv+0x1e4>)
    9f52:	2200      	movs	r2, #0
    9f54:	4698      	mov	r8, r3
    9f56:	e7db      	b.n	9f10 <__aeabi_ddiv+0x19c>
    9f58:	000007ff 	.word	0x000007ff
    9f5c:	fffffc01 	.word	0xfffffc01
    9f60:	00010e70 	.word	0x00010e70
    9f64:	fffffc0d 	.word	0xfffffc0d
    9f68:	800fffff 	.word	0x800fffff
    9f6c:	45d9      	cmp	r9, fp
    9f6e:	d900      	bls.n	9f72 <__aeabi_ddiv+0x1fe>
    9f70:	e139      	b.n	a1e6 <__aeabi_ddiv+0x472>
    9f72:	d100      	bne.n	9f76 <__aeabi_ddiv+0x202>
    9f74:	e134      	b.n	a1e0 <__aeabi_ddiv+0x46c>
    9f76:	2300      	movs	r3, #0
    9f78:	4646      	mov	r6, r8
    9f7a:	464d      	mov	r5, r9
    9f7c:	469a      	mov	sl, r3
    9f7e:	3c01      	subs	r4, #1
    9f80:	465b      	mov	r3, fp
    9f82:	0e0a      	lsrs	r2, r1, #24
    9f84:	021b      	lsls	r3, r3, #8
    9f86:	431a      	orrs	r2, r3
    9f88:	020b      	lsls	r3, r1, #8
    9f8a:	0c17      	lsrs	r7, r2, #16
    9f8c:	9303      	str	r3, [sp, #12]
    9f8e:	0413      	lsls	r3, r2, #16
    9f90:	0c1b      	lsrs	r3, r3, #16
    9f92:	0039      	movs	r1, r7
    9f94:	0028      	movs	r0, r5
    9f96:	4690      	mov	r8, r2
    9f98:	9301      	str	r3, [sp, #4]
    9f9a:	f7fe faab 	bl	84f4 <__udivsi3>
    9f9e:	0002      	movs	r2, r0
    9fa0:	9b01      	ldr	r3, [sp, #4]
    9fa2:	4683      	mov	fp, r0
    9fa4:	435a      	muls	r2, r3
    9fa6:	0028      	movs	r0, r5
    9fa8:	0039      	movs	r1, r7
    9faa:	4691      	mov	r9, r2
    9fac:	f7fe fb28 	bl	8600 <__aeabi_uidivmod>
    9fb0:	0c35      	lsrs	r5, r6, #16
    9fb2:	0409      	lsls	r1, r1, #16
    9fb4:	430d      	orrs	r5, r1
    9fb6:	45a9      	cmp	r9, r5
    9fb8:	d90d      	bls.n	9fd6 <__aeabi_ddiv+0x262>
    9fba:	465b      	mov	r3, fp
    9fbc:	4445      	add	r5, r8
    9fbe:	3b01      	subs	r3, #1
    9fc0:	45a8      	cmp	r8, r5
    9fc2:	d900      	bls.n	9fc6 <__aeabi_ddiv+0x252>
    9fc4:	e13a      	b.n	a23c <__aeabi_ddiv+0x4c8>
    9fc6:	45a9      	cmp	r9, r5
    9fc8:	d800      	bhi.n	9fcc <__aeabi_ddiv+0x258>
    9fca:	e137      	b.n	a23c <__aeabi_ddiv+0x4c8>
    9fcc:	2302      	movs	r3, #2
    9fce:	425b      	negs	r3, r3
    9fd0:	469c      	mov	ip, r3
    9fd2:	4445      	add	r5, r8
    9fd4:	44e3      	add	fp, ip
    9fd6:	464b      	mov	r3, r9
    9fd8:	1aeb      	subs	r3, r5, r3
    9fda:	0039      	movs	r1, r7
    9fdc:	0018      	movs	r0, r3
    9fde:	9304      	str	r3, [sp, #16]
    9fe0:	f7fe fa88 	bl	84f4 <__udivsi3>
    9fe4:	9b01      	ldr	r3, [sp, #4]
    9fe6:	0005      	movs	r5, r0
    9fe8:	4343      	muls	r3, r0
    9fea:	0039      	movs	r1, r7
    9fec:	9804      	ldr	r0, [sp, #16]
    9fee:	4699      	mov	r9, r3
    9ff0:	f7fe fb06 	bl	8600 <__aeabi_uidivmod>
    9ff4:	0433      	lsls	r3, r6, #16
    9ff6:	0409      	lsls	r1, r1, #16
    9ff8:	0c1b      	lsrs	r3, r3, #16
    9ffa:	430b      	orrs	r3, r1
    9ffc:	4599      	cmp	r9, r3
    9ffe:	d909      	bls.n	a014 <__aeabi_ddiv+0x2a0>
    a000:	4443      	add	r3, r8
    a002:	1e6a      	subs	r2, r5, #1
    a004:	4598      	cmp	r8, r3
    a006:	d900      	bls.n	a00a <__aeabi_ddiv+0x296>
    a008:	e11a      	b.n	a240 <__aeabi_ddiv+0x4cc>
    a00a:	4599      	cmp	r9, r3
    a00c:	d800      	bhi.n	a010 <__aeabi_ddiv+0x29c>
    a00e:	e117      	b.n	a240 <__aeabi_ddiv+0x4cc>
    a010:	3d02      	subs	r5, #2
    a012:	4443      	add	r3, r8
    a014:	464a      	mov	r2, r9
    a016:	1a9b      	subs	r3, r3, r2
    a018:	465a      	mov	r2, fp
    a01a:	0412      	lsls	r2, r2, #16
    a01c:	432a      	orrs	r2, r5
    a01e:	9903      	ldr	r1, [sp, #12]
    a020:	4693      	mov	fp, r2
    a022:	0c10      	lsrs	r0, r2, #16
    a024:	0c0a      	lsrs	r2, r1, #16
    a026:	4691      	mov	r9, r2
    a028:	0409      	lsls	r1, r1, #16
    a02a:	465a      	mov	r2, fp
    a02c:	0c09      	lsrs	r1, r1, #16
    a02e:	464e      	mov	r6, r9
    a030:	000d      	movs	r5, r1
    a032:	0412      	lsls	r2, r2, #16
    a034:	0c12      	lsrs	r2, r2, #16
    a036:	4345      	muls	r5, r0
    a038:	9105      	str	r1, [sp, #20]
    a03a:	4351      	muls	r1, r2
    a03c:	4372      	muls	r2, r6
    a03e:	4370      	muls	r0, r6
    a040:	1952      	adds	r2, r2, r5
    a042:	0c0e      	lsrs	r6, r1, #16
    a044:	18b2      	adds	r2, r6, r2
    a046:	4295      	cmp	r5, r2
    a048:	d903      	bls.n	a052 <__aeabi_ddiv+0x2de>
    a04a:	2580      	movs	r5, #128	; 0x80
    a04c:	026d      	lsls	r5, r5, #9
    a04e:	46ac      	mov	ip, r5
    a050:	4460      	add	r0, ip
    a052:	0c15      	lsrs	r5, r2, #16
    a054:	0409      	lsls	r1, r1, #16
    a056:	0412      	lsls	r2, r2, #16
    a058:	0c09      	lsrs	r1, r1, #16
    a05a:	1828      	adds	r0, r5, r0
    a05c:	1852      	adds	r2, r2, r1
    a05e:	4283      	cmp	r3, r0
    a060:	d200      	bcs.n	a064 <__aeabi_ddiv+0x2f0>
    a062:	e0ce      	b.n	a202 <__aeabi_ddiv+0x48e>
    a064:	d100      	bne.n	a068 <__aeabi_ddiv+0x2f4>
    a066:	e0c8      	b.n	a1fa <__aeabi_ddiv+0x486>
    a068:	1a1d      	subs	r5, r3, r0
    a06a:	4653      	mov	r3, sl
    a06c:	1a9e      	subs	r6, r3, r2
    a06e:	45b2      	cmp	sl, r6
    a070:	4192      	sbcs	r2, r2
    a072:	4252      	negs	r2, r2
    a074:	1aab      	subs	r3, r5, r2
    a076:	469a      	mov	sl, r3
    a078:	4598      	cmp	r8, r3
    a07a:	d100      	bne.n	a07e <__aeabi_ddiv+0x30a>
    a07c:	e117      	b.n	a2ae <__aeabi_ddiv+0x53a>
    a07e:	0039      	movs	r1, r7
    a080:	0018      	movs	r0, r3
    a082:	f7fe fa37 	bl	84f4 <__udivsi3>
    a086:	9b01      	ldr	r3, [sp, #4]
    a088:	0005      	movs	r5, r0
    a08a:	4343      	muls	r3, r0
    a08c:	0039      	movs	r1, r7
    a08e:	4650      	mov	r0, sl
    a090:	9304      	str	r3, [sp, #16]
    a092:	f7fe fab5 	bl	8600 <__aeabi_uidivmod>
    a096:	9804      	ldr	r0, [sp, #16]
    a098:	040b      	lsls	r3, r1, #16
    a09a:	0c31      	lsrs	r1, r6, #16
    a09c:	4319      	orrs	r1, r3
    a09e:	4288      	cmp	r0, r1
    a0a0:	d909      	bls.n	a0b6 <__aeabi_ddiv+0x342>
    a0a2:	4441      	add	r1, r8
    a0a4:	1e6b      	subs	r3, r5, #1
    a0a6:	4588      	cmp	r8, r1
    a0a8:	d900      	bls.n	a0ac <__aeabi_ddiv+0x338>
    a0aa:	e107      	b.n	a2bc <__aeabi_ddiv+0x548>
    a0ac:	4288      	cmp	r0, r1
    a0ae:	d800      	bhi.n	a0b2 <__aeabi_ddiv+0x33e>
    a0b0:	e104      	b.n	a2bc <__aeabi_ddiv+0x548>
    a0b2:	3d02      	subs	r5, #2
    a0b4:	4441      	add	r1, r8
    a0b6:	9b04      	ldr	r3, [sp, #16]
    a0b8:	1acb      	subs	r3, r1, r3
    a0ba:	0018      	movs	r0, r3
    a0bc:	0039      	movs	r1, r7
    a0be:	9304      	str	r3, [sp, #16]
    a0c0:	f7fe fa18 	bl	84f4 <__udivsi3>
    a0c4:	9b01      	ldr	r3, [sp, #4]
    a0c6:	4682      	mov	sl, r0
    a0c8:	4343      	muls	r3, r0
    a0ca:	0039      	movs	r1, r7
    a0cc:	9804      	ldr	r0, [sp, #16]
    a0ce:	9301      	str	r3, [sp, #4]
    a0d0:	f7fe fa96 	bl	8600 <__aeabi_uidivmod>
    a0d4:	9801      	ldr	r0, [sp, #4]
    a0d6:	040b      	lsls	r3, r1, #16
    a0d8:	0431      	lsls	r1, r6, #16
    a0da:	0c09      	lsrs	r1, r1, #16
    a0dc:	4319      	orrs	r1, r3
    a0de:	4288      	cmp	r0, r1
    a0e0:	d90d      	bls.n	a0fe <__aeabi_ddiv+0x38a>
    a0e2:	4653      	mov	r3, sl
    a0e4:	4441      	add	r1, r8
    a0e6:	3b01      	subs	r3, #1
    a0e8:	4588      	cmp	r8, r1
    a0ea:	d900      	bls.n	a0ee <__aeabi_ddiv+0x37a>
    a0ec:	e0e8      	b.n	a2c0 <__aeabi_ddiv+0x54c>
    a0ee:	4288      	cmp	r0, r1
    a0f0:	d800      	bhi.n	a0f4 <__aeabi_ddiv+0x380>
    a0f2:	e0e5      	b.n	a2c0 <__aeabi_ddiv+0x54c>
    a0f4:	2302      	movs	r3, #2
    a0f6:	425b      	negs	r3, r3
    a0f8:	469c      	mov	ip, r3
    a0fa:	4441      	add	r1, r8
    a0fc:	44e2      	add	sl, ip
    a0fe:	9b01      	ldr	r3, [sp, #4]
    a100:	042d      	lsls	r5, r5, #16
    a102:	1ace      	subs	r6, r1, r3
    a104:	4651      	mov	r1, sl
    a106:	4329      	orrs	r1, r5
    a108:	9d05      	ldr	r5, [sp, #20]
    a10a:	464f      	mov	r7, r9
    a10c:	002a      	movs	r2, r5
    a10e:	040b      	lsls	r3, r1, #16
    a110:	0c08      	lsrs	r0, r1, #16
    a112:	0c1b      	lsrs	r3, r3, #16
    a114:	435a      	muls	r2, r3
    a116:	4345      	muls	r5, r0
    a118:	437b      	muls	r3, r7
    a11a:	4378      	muls	r0, r7
    a11c:	195b      	adds	r3, r3, r5
    a11e:	0c17      	lsrs	r7, r2, #16
    a120:	18fb      	adds	r3, r7, r3
    a122:	429d      	cmp	r5, r3
    a124:	d903      	bls.n	a12e <__aeabi_ddiv+0x3ba>
    a126:	2580      	movs	r5, #128	; 0x80
    a128:	026d      	lsls	r5, r5, #9
    a12a:	46ac      	mov	ip, r5
    a12c:	4460      	add	r0, ip
    a12e:	0c1d      	lsrs	r5, r3, #16
    a130:	0412      	lsls	r2, r2, #16
    a132:	041b      	lsls	r3, r3, #16
    a134:	0c12      	lsrs	r2, r2, #16
    a136:	1828      	adds	r0, r5, r0
    a138:	189b      	adds	r3, r3, r2
    a13a:	4286      	cmp	r6, r0
    a13c:	d200      	bcs.n	a140 <__aeabi_ddiv+0x3cc>
    a13e:	e093      	b.n	a268 <__aeabi_ddiv+0x4f4>
    a140:	d100      	bne.n	a144 <__aeabi_ddiv+0x3d0>
    a142:	e08e      	b.n	a262 <__aeabi_ddiv+0x4ee>
    a144:	2301      	movs	r3, #1
    a146:	4319      	orrs	r1, r3
    a148:	4ba0      	ldr	r3, [pc, #640]	; (a3cc <__aeabi_ddiv+0x658>)
    a14a:	18e3      	adds	r3, r4, r3
    a14c:	2b00      	cmp	r3, #0
    a14e:	dc00      	bgt.n	a152 <__aeabi_ddiv+0x3de>
    a150:	e099      	b.n	a286 <__aeabi_ddiv+0x512>
    a152:	074a      	lsls	r2, r1, #29
    a154:	d000      	beq.n	a158 <__aeabi_ddiv+0x3e4>
    a156:	e09e      	b.n	a296 <__aeabi_ddiv+0x522>
    a158:	465a      	mov	r2, fp
    a15a:	01d2      	lsls	r2, r2, #7
    a15c:	d506      	bpl.n	a16c <__aeabi_ddiv+0x3f8>
    a15e:	465a      	mov	r2, fp
    a160:	4b9b      	ldr	r3, [pc, #620]	; (a3d0 <__aeabi_ddiv+0x65c>)
    a162:	401a      	ands	r2, r3
    a164:	2380      	movs	r3, #128	; 0x80
    a166:	4693      	mov	fp, r2
    a168:	00db      	lsls	r3, r3, #3
    a16a:	18e3      	adds	r3, r4, r3
    a16c:	4a99      	ldr	r2, [pc, #612]	; (a3d4 <__aeabi_ddiv+0x660>)
    a16e:	4293      	cmp	r3, r2
    a170:	dd68      	ble.n	a244 <__aeabi_ddiv+0x4d0>
    a172:	2301      	movs	r3, #1
    a174:	9a02      	ldr	r2, [sp, #8]
    a176:	4c98      	ldr	r4, [pc, #608]	; (a3d8 <__aeabi_ddiv+0x664>)
    a178:	401a      	ands	r2, r3
    a17a:	2300      	movs	r3, #0
    a17c:	4694      	mov	ip, r2
    a17e:	4698      	mov	r8, r3
    a180:	2200      	movs	r2, #0
    a182:	e6c5      	b.n	9f10 <__aeabi_ddiv+0x19c>
    a184:	2280      	movs	r2, #128	; 0x80
    a186:	464b      	mov	r3, r9
    a188:	0312      	lsls	r2, r2, #12
    a18a:	4213      	tst	r3, r2
    a18c:	d00a      	beq.n	a1a4 <__aeabi_ddiv+0x430>
    a18e:	465b      	mov	r3, fp
    a190:	4213      	tst	r3, r2
    a192:	d106      	bne.n	a1a2 <__aeabi_ddiv+0x42e>
    a194:	431a      	orrs	r2, r3
    a196:	0312      	lsls	r2, r2, #12
    a198:	0b12      	lsrs	r2, r2, #12
    a19a:	46ac      	mov	ip, r5
    a19c:	4688      	mov	r8, r1
    a19e:	4c8e      	ldr	r4, [pc, #568]	; (a3d8 <__aeabi_ddiv+0x664>)
    a1a0:	e6b6      	b.n	9f10 <__aeabi_ddiv+0x19c>
    a1a2:	464b      	mov	r3, r9
    a1a4:	431a      	orrs	r2, r3
    a1a6:	0312      	lsls	r2, r2, #12
    a1a8:	0b12      	lsrs	r2, r2, #12
    a1aa:	46bc      	mov	ip, r7
    a1ac:	4c8a      	ldr	r4, [pc, #552]	; (a3d8 <__aeabi_ddiv+0x664>)
    a1ae:	e6af      	b.n	9f10 <__aeabi_ddiv+0x19c>
    a1b0:	0003      	movs	r3, r0
    a1b2:	465a      	mov	r2, fp
    a1b4:	3b28      	subs	r3, #40	; 0x28
    a1b6:	409a      	lsls	r2, r3
    a1b8:	2300      	movs	r3, #0
    a1ba:	4691      	mov	r9, r2
    a1bc:	4698      	mov	r8, r3
    a1be:	e657      	b.n	9e70 <__aeabi_ddiv+0xfc>
    a1c0:	4658      	mov	r0, fp
    a1c2:	f001 f94b 	bl	b45c <__clzsi2>
    a1c6:	3020      	adds	r0, #32
    a1c8:	e640      	b.n	9e4c <__aeabi_ddiv+0xd8>
    a1ca:	0003      	movs	r3, r0
    a1cc:	4652      	mov	r2, sl
    a1ce:	3b28      	subs	r3, #40	; 0x28
    a1d0:	409a      	lsls	r2, r3
    a1d2:	2100      	movs	r1, #0
    a1d4:	4693      	mov	fp, r2
    a1d6:	e677      	b.n	9ec8 <__aeabi_ddiv+0x154>
    a1d8:	f001 f940 	bl	b45c <__clzsi2>
    a1dc:	3020      	adds	r0, #32
    a1de:	e65f      	b.n	9ea0 <__aeabi_ddiv+0x12c>
    a1e0:	4588      	cmp	r8, r1
    a1e2:	d200      	bcs.n	a1e6 <__aeabi_ddiv+0x472>
    a1e4:	e6c7      	b.n	9f76 <__aeabi_ddiv+0x202>
    a1e6:	464b      	mov	r3, r9
    a1e8:	07de      	lsls	r6, r3, #31
    a1ea:	085d      	lsrs	r5, r3, #1
    a1ec:	4643      	mov	r3, r8
    a1ee:	085b      	lsrs	r3, r3, #1
    a1f0:	431e      	orrs	r6, r3
    a1f2:	4643      	mov	r3, r8
    a1f4:	07db      	lsls	r3, r3, #31
    a1f6:	469a      	mov	sl, r3
    a1f8:	e6c2      	b.n	9f80 <__aeabi_ddiv+0x20c>
    a1fa:	2500      	movs	r5, #0
    a1fc:	4592      	cmp	sl, r2
    a1fe:	d300      	bcc.n	a202 <__aeabi_ddiv+0x48e>
    a200:	e733      	b.n	a06a <__aeabi_ddiv+0x2f6>
    a202:	9e03      	ldr	r6, [sp, #12]
    a204:	4659      	mov	r1, fp
    a206:	46b4      	mov	ip, r6
    a208:	44e2      	add	sl, ip
    a20a:	45b2      	cmp	sl, r6
    a20c:	41ad      	sbcs	r5, r5
    a20e:	426d      	negs	r5, r5
    a210:	4445      	add	r5, r8
    a212:	18eb      	adds	r3, r5, r3
    a214:	3901      	subs	r1, #1
    a216:	4598      	cmp	r8, r3
    a218:	d207      	bcs.n	a22a <__aeabi_ddiv+0x4b6>
    a21a:	4298      	cmp	r0, r3
    a21c:	d900      	bls.n	a220 <__aeabi_ddiv+0x4ac>
    a21e:	e07f      	b.n	a320 <__aeabi_ddiv+0x5ac>
    a220:	d100      	bne.n	a224 <__aeabi_ddiv+0x4b0>
    a222:	e0bc      	b.n	a39e <__aeabi_ddiv+0x62a>
    a224:	1a1d      	subs	r5, r3, r0
    a226:	468b      	mov	fp, r1
    a228:	e71f      	b.n	a06a <__aeabi_ddiv+0x2f6>
    a22a:	4598      	cmp	r8, r3
    a22c:	d1fa      	bne.n	a224 <__aeabi_ddiv+0x4b0>
    a22e:	9d03      	ldr	r5, [sp, #12]
    a230:	4555      	cmp	r5, sl
    a232:	d9f2      	bls.n	a21a <__aeabi_ddiv+0x4a6>
    a234:	4643      	mov	r3, r8
    a236:	468b      	mov	fp, r1
    a238:	1a1d      	subs	r5, r3, r0
    a23a:	e716      	b.n	a06a <__aeabi_ddiv+0x2f6>
    a23c:	469b      	mov	fp, r3
    a23e:	e6ca      	b.n	9fd6 <__aeabi_ddiv+0x262>
    a240:	0015      	movs	r5, r2
    a242:	e6e7      	b.n	a014 <__aeabi_ddiv+0x2a0>
    a244:	465a      	mov	r2, fp
    a246:	08c9      	lsrs	r1, r1, #3
    a248:	0752      	lsls	r2, r2, #29
    a24a:	430a      	orrs	r2, r1
    a24c:	055b      	lsls	r3, r3, #21
    a24e:	4690      	mov	r8, r2
    a250:	0d5c      	lsrs	r4, r3, #21
    a252:	465a      	mov	r2, fp
    a254:	2301      	movs	r3, #1
    a256:	9902      	ldr	r1, [sp, #8]
    a258:	0252      	lsls	r2, r2, #9
    a25a:	4019      	ands	r1, r3
    a25c:	0b12      	lsrs	r2, r2, #12
    a25e:	468c      	mov	ip, r1
    a260:	e656      	b.n	9f10 <__aeabi_ddiv+0x19c>
    a262:	2b00      	cmp	r3, #0
    a264:	d100      	bne.n	a268 <__aeabi_ddiv+0x4f4>
    a266:	e76f      	b.n	a148 <__aeabi_ddiv+0x3d4>
    a268:	4446      	add	r6, r8
    a26a:	1e4a      	subs	r2, r1, #1
    a26c:	45b0      	cmp	r8, r6
    a26e:	d929      	bls.n	a2c4 <__aeabi_ddiv+0x550>
    a270:	0011      	movs	r1, r2
    a272:	4286      	cmp	r6, r0
    a274:	d000      	beq.n	a278 <__aeabi_ddiv+0x504>
    a276:	e765      	b.n	a144 <__aeabi_ddiv+0x3d0>
    a278:	9a03      	ldr	r2, [sp, #12]
    a27a:	4293      	cmp	r3, r2
    a27c:	d000      	beq.n	a280 <__aeabi_ddiv+0x50c>
    a27e:	e761      	b.n	a144 <__aeabi_ddiv+0x3d0>
    a280:	e762      	b.n	a148 <__aeabi_ddiv+0x3d4>
    a282:	2101      	movs	r1, #1
    a284:	4249      	negs	r1, r1
    a286:	2001      	movs	r0, #1
    a288:	1ac2      	subs	r2, r0, r3
    a28a:	2a38      	cmp	r2, #56	; 0x38
    a28c:	dd21      	ble.n	a2d2 <__aeabi_ddiv+0x55e>
    a28e:	9b02      	ldr	r3, [sp, #8]
    a290:	4003      	ands	r3, r0
    a292:	469c      	mov	ip, r3
    a294:	e638      	b.n	9f08 <__aeabi_ddiv+0x194>
    a296:	220f      	movs	r2, #15
    a298:	400a      	ands	r2, r1
    a29a:	2a04      	cmp	r2, #4
    a29c:	d100      	bne.n	a2a0 <__aeabi_ddiv+0x52c>
    a29e:	e75b      	b.n	a158 <__aeabi_ddiv+0x3e4>
    a2a0:	000a      	movs	r2, r1
    a2a2:	1d11      	adds	r1, r2, #4
    a2a4:	4291      	cmp	r1, r2
    a2a6:	4192      	sbcs	r2, r2
    a2a8:	4252      	negs	r2, r2
    a2aa:	4493      	add	fp, r2
    a2ac:	e754      	b.n	a158 <__aeabi_ddiv+0x3e4>
    a2ae:	4b47      	ldr	r3, [pc, #284]	; (a3cc <__aeabi_ddiv+0x658>)
    a2b0:	18e3      	adds	r3, r4, r3
    a2b2:	2b00      	cmp	r3, #0
    a2b4:	dde5      	ble.n	a282 <__aeabi_ddiv+0x50e>
    a2b6:	2201      	movs	r2, #1
    a2b8:	4252      	negs	r2, r2
    a2ba:	e7f2      	b.n	a2a2 <__aeabi_ddiv+0x52e>
    a2bc:	001d      	movs	r5, r3
    a2be:	e6fa      	b.n	a0b6 <__aeabi_ddiv+0x342>
    a2c0:	469a      	mov	sl, r3
    a2c2:	e71c      	b.n	a0fe <__aeabi_ddiv+0x38a>
    a2c4:	42b0      	cmp	r0, r6
    a2c6:	d839      	bhi.n	a33c <__aeabi_ddiv+0x5c8>
    a2c8:	d06e      	beq.n	a3a8 <__aeabi_ddiv+0x634>
    a2ca:	0011      	movs	r1, r2
    a2cc:	e73a      	b.n	a144 <__aeabi_ddiv+0x3d0>
    a2ce:	9302      	str	r3, [sp, #8]
    a2d0:	e73a      	b.n	a148 <__aeabi_ddiv+0x3d4>
    a2d2:	2a1f      	cmp	r2, #31
    a2d4:	dc3c      	bgt.n	a350 <__aeabi_ddiv+0x5dc>
    a2d6:	2320      	movs	r3, #32
    a2d8:	1a9b      	subs	r3, r3, r2
    a2da:	000c      	movs	r4, r1
    a2dc:	4658      	mov	r0, fp
    a2de:	4099      	lsls	r1, r3
    a2e0:	4098      	lsls	r0, r3
    a2e2:	1e4b      	subs	r3, r1, #1
    a2e4:	4199      	sbcs	r1, r3
    a2e6:	465b      	mov	r3, fp
    a2e8:	40d4      	lsrs	r4, r2
    a2ea:	40d3      	lsrs	r3, r2
    a2ec:	4320      	orrs	r0, r4
    a2ee:	4308      	orrs	r0, r1
    a2f0:	001a      	movs	r2, r3
    a2f2:	0743      	lsls	r3, r0, #29
    a2f4:	d009      	beq.n	a30a <__aeabi_ddiv+0x596>
    a2f6:	230f      	movs	r3, #15
    a2f8:	4003      	ands	r3, r0
    a2fa:	2b04      	cmp	r3, #4
    a2fc:	d005      	beq.n	a30a <__aeabi_ddiv+0x596>
    a2fe:	0001      	movs	r1, r0
    a300:	1d08      	adds	r0, r1, #4
    a302:	4288      	cmp	r0, r1
    a304:	419b      	sbcs	r3, r3
    a306:	425b      	negs	r3, r3
    a308:	18d2      	adds	r2, r2, r3
    a30a:	0213      	lsls	r3, r2, #8
    a30c:	d53a      	bpl.n	a384 <__aeabi_ddiv+0x610>
    a30e:	2301      	movs	r3, #1
    a310:	9a02      	ldr	r2, [sp, #8]
    a312:	2401      	movs	r4, #1
    a314:	401a      	ands	r2, r3
    a316:	2300      	movs	r3, #0
    a318:	4694      	mov	ip, r2
    a31a:	4698      	mov	r8, r3
    a31c:	2200      	movs	r2, #0
    a31e:	e5f7      	b.n	9f10 <__aeabi_ddiv+0x19c>
    a320:	2102      	movs	r1, #2
    a322:	4249      	negs	r1, r1
    a324:	468c      	mov	ip, r1
    a326:	9d03      	ldr	r5, [sp, #12]
    a328:	44e3      	add	fp, ip
    a32a:	46ac      	mov	ip, r5
    a32c:	44e2      	add	sl, ip
    a32e:	45aa      	cmp	sl, r5
    a330:	41ad      	sbcs	r5, r5
    a332:	426d      	negs	r5, r5
    a334:	4445      	add	r5, r8
    a336:	18ed      	adds	r5, r5, r3
    a338:	1a2d      	subs	r5, r5, r0
    a33a:	e696      	b.n	a06a <__aeabi_ddiv+0x2f6>
    a33c:	1e8a      	subs	r2, r1, #2
    a33e:	9903      	ldr	r1, [sp, #12]
    a340:	004d      	lsls	r5, r1, #1
    a342:	428d      	cmp	r5, r1
    a344:	4189      	sbcs	r1, r1
    a346:	4249      	negs	r1, r1
    a348:	4441      	add	r1, r8
    a34a:	1876      	adds	r6, r6, r1
    a34c:	9503      	str	r5, [sp, #12]
    a34e:	e78f      	b.n	a270 <__aeabi_ddiv+0x4fc>
    a350:	201f      	movs	r0, #31
    a352:	4240      	negs	r0, r0
    a354:	1ac3      	subs	r3, r0, r3
    a356:	4658      	mov	r0, fp
    a358:	40d8      	lsrs	r0, r3
    a35a:	0003      	movs	r3, r0
    a35c:	2a20      	cmp	r2, #32
    a35e:	d028      	beq.n	a3b2 <__aeabi_ddiv+0x63e>
    a360:	2040      	movs	r0, #64	; 0x40
    a362:	465d      	mov	r5, fp
    a364:	1a82      	subs	r2, r0, r2
    a366:	4095      	lsls	r5, r2
    a368:	4329      	orrs	r1, r5
    a36a:	1e4a      	subs	r2, r1, #1
    a36c:	4191      	sbcs	r1, r2
    a36e:	4319      	orrs	r1, r3
    a370:	2307      	movs	r3, #7
    a372:	2200      	movs	r2, #0
    a374:	400b      	ands	r3, r1
    a376:	d009      	beq.n	a38c <__aeabi_ddiv+0x618>
    a378:	230f      	movs	r3, #15
    a37a:	2200      	movs	r2, #0
    a37c:	400b      	ands	r3, r1
    a37e:	0008      	movs	r0, r1
    a380:	2b04      	cmp	r3, #4
    a382:	d1bd      	bne.n	a300 <__aeabi_ddiv+0x58c>
    a384:	0001      	movs	r1, r0
    a386:	0753      	lsls	r3, r2, #29
    a388:	0252      	lsls	r2, r2, #9
    a38a:	0b12      	lsrs	r2, r2, #12
    a38c:	08c9      	lsrs	r1, r1, #3
    a38e:	4319      	orrs	r1, r3
    a390:	2301      	movs	r3, #1
    a392:	4688      	mov	r8, r1
    a394:	9902      	ldr	r1, [sp, #8]
    a396:	2400      	movs	r4, #0
    a398:	4019      	ands	r1, r3
    a39a:	468c      	mov	ip, r1
    a39c:	e5b8      	b.n	9f10 <__aeabi_ddiv+0x19c>
    a39e:	4552      	cmp	r2, sl
    a3a0:	d8be      	bhi.n	a320 <__aeabi_ddiv+0x5ac>
    a3a2:	468b      	mov	fp, r1
    a3a4:	2500      	movs	r5, #0
    a3a6:	e660      	b.n	a06a <__aeabi_ddiv+0x2f6>
    a3a8:	9d03      	ldr	r5, [sp, #12]
    a3aa:	429d      	cmp	r5, r3
    a3ac:	d3c6      	bcc.n	a33c <__aeabi_ddiv+0x5c8>
    a3ae:	0011      	movs	r1, r2
    a3b0:	e762      	b.n	a278 <__aeabi_ddiv+0x504>
    a3b2:	2500      	movs	r5, #0
    a3b4:	e7d8      	b.n	a368 <__aeabi_ddiv+0x5f4>
    a3b6:	2280      	movs	r2, #128	; 0x80
    a3b8:	465b      	mov	r3, fp
    a3ba:	0312      	lsls	r2, r2, #12
    a3bc:	431a      	orrs	r2, r3
    a3be:	9b01      	ldr	r3, [sp, #4]
    a3c0:	0312      	lsls	r2, r2, #12
    a3c2:	0b12      	lsrs	r2, r2, #12
    a3c4:	469c      	mov	ip, r3
    a3c6:	4688      	mov	r8, r1
    a3c8:	4c03      	ldr	r4, [pc, #12]	; (a3d8 <__aeabi_ddiv+0x664>)
    a3ca:	e5a1      	b.n	9f10 <__aeabi_ddiv+0x19c>
    a3cc:	000003ff 	.word	0x000003ff
    a3d0:	feffffff 	.word	0xfeffffff
    a3d4:	000007fe 	.word	0x000007fe
    a3d8:	000007ff 	.word	0x000007ff

0000a3dc <__eqdf2>:
    a3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3de:	464f      	mov	r7, r9
    a3e0:	4646      	mov	r6, r8
    a3e2:	46d6      	mov	lr, sl
    a3e4:	005c      	lsls	r4, r3, #1
    a3e6:	b5c0      	push	{r6, r7, lr}
    a3e8:	031f      	lsls	r7, r3, #12
    a3ea:	0fdb      	lsrs	r3, r3, #31
    a3ec:	469a      	mov	sl, r3
    a3ee:	4b17      	ldr	r3, [pc, #92]	; (a44c <__eqdf2+0x70>)
    a3f0:	030e      	lsls	r6, r1, #12
    a3f2:	004d      	lsls	r5, r1, #1
    a3f4:	4684      	mov	ip, r0
    a3f6:	4680      	mov	r8, r0
    a3f8:	0b36      	lsrs	r6, r6, #12
    a3fa:	0d6d      	lsrs	r5, r5, #21
    a3fc:	0fc9      	lsrs	r1, r1, #31
    a3fe:	4691      	mov	r9, r2
    a400:	0b3f      	lsrs	r7, r7, #12
    a402:	0d64      	lsrs	r4, r4, #21
    a404:	2001      	movs	r0, #1
    a406:	429d      	cmp	r5, r3
    a408:	d008      	beq.n	a41c <__eqdf2+0x40>
    a40a:	429c      	cmp	r4, r3
    a40c:	d001      	beq.n	a412 <__eqdf2+0x36>
    a40e:	42a5      	cmp	r5, r4
    a410:	d00b      	beq.n	a42a <__eqdf2+0x4e>
    a412:	bc1c      	pop	{r2, r3, r4}
    a414:	4690      	mov	r8, r2
    a416:	4699      	mov	r9, r3
    a418:	46a2      	mov	sl, r4
    a41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a41c:	4663      	mov	r3, ip
    a41e:	4333      	orrs	r3, r6
    a420:	d1f7      	bne.n	a412 <__eqdf2+0x36>
    a422:	42ac      	cmp	r4, r5
    a424:	d1f5      	bne.n	a412 <__eqdf2+0x36>
    a426:	433a      	orrs	r2, r7
    a428:	d1f3      	bne.n	a412 <__eqdf2+0x36>
    a42a:	2001      	movs	r0, #1
    a42c:	42be      	cmp	r6, r7
    a42e:	d1f0      	bne.n	a412 <__eqdf2+0x36>
    a430:	45c8      	cmp	r8, r9
    a432:	d1ee      	bne.n	a412 <__eqdf2+0x36>
    a434:	4551      	cmp	r1, sl
    a436:	d007      	beq.n	a448 <__eqdf2+0x6c>
    a438:	2d00      	cmp	r5, #0
    a43a:	d1ea      	bne.n	a412 <__eqdf2+0x36>
    a43c:	4663      	mov	r3, ip
    a43e:	431e      	orrs	r6, r3
    a440:	0030      	movs	r0, r6
    a442:	1e46      	subs	r6, r0, #1
    a444:	41b0      	sbcs	r0, r6
    a446:	e7e4      	b.n	a412 <__eqdf2+0x36>
    a448:	2000      	movs	r0, #0
    a44a:	e7e2      	b.n	a412 <__eqdf2+0x36>
    a44c:	000007ff 	.word	0x000007ff

0000a450 <__gedf2>:
    a450:	b5f0      	push	{r4, r5, r6, r7, lr}
    a452:	4645      	mov	r5, r8
    a454:	46de      	mov	lr, fp
    a456:	4657      	mov	r7, sl
    a458:	464e      	mov	r6, r9
    a45a:	b5e0      	push	{r5, r6, r7, lr}
    a45c:	031f      	lsls	r7, r3, #12
    a45e:	0b3d      	lsrs	r5, r7, #12
    a460:	4f2c      	ldr	r7, [pc, #176]	; (a514 <__gedf2+0xc4>)
    a462:	030e      	lsls	r6, r1, #12
    a464:	004c      	lsls	r4, r1, #1
    a466:	46ab      	mov	fp, r5
    a468:	005d      	lsls	r5, r3, #1
    a46a:	4684      	mov	ip, r0
    a46c:	0b36      	lsrs	r6, r6, #12
    a46e:	0d64      	lsrs	r4, r4, #21
    a470:	0fc9      	lsrs	r1, r1, #31
    a472:	4690      	mov	r8, r2
    a474:	0d6d      	lsrs	r5, r5, #21
    a476:	0fdb      	lsrs	r3, r3, #31
    a478:	42bc      	cmp	r4, r7
    a47a:	d02a      	beq.n	a4d2 <__gedf2+0x82>
    a47c:	4f25      	ldr	r7, [pc, #148]	; (a514 <__gedf2+0xc4>)
    a47e:	42bd      	cmp	r5, r7
    a480:	d02d      	beq.n	a4de <__gedf2+0x8e>
    a482:	2c00      	cmp	r4, #0
    a484:	d10f      	bne.n	a4a6 <__gedf2+0x56>
    a486:	4330      	orrs	r0, r6
    a488:	0007      	movs	r7, r0
    a48a:	4681      	mov	r9, r0
    a48c:	4278      	negs	r0, r7
    a48e:	4178      	adcs	r0, r7
    a490:	b2c0      	uxtb	r0, r0
    a492:	2d00      	cmp	r5, #0
    a494:	d117      	bne.n	a4c6 <__gedf2+0x76>
    a496:	465f      	mov	r7, fp
    a498:	433a      	orrs	r2, r7
    a49a:	d114      	bne.n	a4c6 <__gedf2+0x76>
    a49c:	464b      	mov	r3, r9
    a49e:	2000      	movs	r0, #0
    a4a0:	2b00      	cmp	r3, #0
    a4a2:	d00a      	beq.n	a4ba <__gedf2+0x6a>
    a4a4:	e006      	b.n	a4b4 <__gedf2+0x64>
    a4a6:	2d00      	cmp	r5, #0
    a4a8:	d102      	bne.n	a4b0 <__gedf2+0x60>
    a4aa:	4658      	mov	r0, fp
    a4ac:	4302      	orrs	r2, r0
    a4ae:	d001      	beq.n	a4b4 <__gedf2+0x64>
    a4b0:	4299      	cmp	r1, r3
    a4b2:	d018      	beq.n	a4e6 <__gedf2+0x96>
    a4b4:	4248      	negs	r0, r1
    a4b6:	2101      	movs	r1, #1
    a4b8:	4308      	orrs	r0, r1
    a4ba:	bc3c      	pop	{r2, r3, r4, r5}
    a4bc:	4690      	mov	r8, r2
    a4be:	4699      	mov	r9, r3
    a4c0:	46a2      	mov	sl, r4
    a4c2:	46ab      	mov	fp, r5
    a4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4c6:	2800      	cmp	r0, #0
    a4c8:	d0f2      	beq.n	a4b0 <__gedf2+0x60>
    a4ca:	2001      	movs	r0, #1
    a4cc:	3b01      	subs	r3, #1
    a4ce:	4318      	orrs	r0, r3
    a4d0:	e7f3      	b.n	a4ba <__gedf2+0x6a>
    a4d2:	0037      	movs	r7, r6
    a4d4:	4307      	orrs	r7, r0
    a4d6:	d0d1      	beq.n	a47c <__gedf2+0x2c>
    a4d8:	2002      	movs	r0, #2
    a4da:	4240      	negs	r0, r0
    a4dc:	e7ed      	b.n	a4ba <__gedf2+0x6a>
    a4de:	465f      	mov	r7, fp
    a4e0:	4317      	orrs	r7, r2
    a4e2:	d0ce      	beq.n	a482 <__gedf2+0x32>
    a4e4:	e7f8      	b.n	a4d8 <__gedf2+0x88>
    a4e6:	42ac      	cmp	r4, r5
    a4e8:	dce4      	bgt.n	a4b4 <__gedf2+0x64>
    a4ea:	da03      	bge.n	a4f4 <__gedf2+0xa4>
    a4ec:	1e48      	subs	r0, r1, #1
    a4ee:	2101      	movs	r1, #1
    a4f0:	4308      	orrs	r0, r1
    a4f2:	e7e2      	b.n	a4ba <__gedf2+0x6a>
    a4f4:	455e      	cmp	r6, fp
    a4f6:	d8dd      	bhi.n	a4b4 <__gedf2+0x64>
    a4f8:	d006      	beq.n	a508 <__gedf2+0xb8>
    a4fa:	2000      	movs	r0, #0
    a4fc:	455e      	cmp	r6, fp
    a4fe:	d2dc      	bcs.n	a4ba <__gedf2+0x6a>
    a500:	2301      	movs	r3, #1
    a502:	1e48      	subs	r0, r1, #1
    a504:	4318      	orrs	r0, r3
    a506:	e7d8      	b.n	a4ba <__gedf2+0x6a>
    a508:	45c4      	cmp	ip, r8
    a50a:	d8d3      	bhi.n	a4b4 <__gedf2+0x64>
    a50c:	2000      	movs	r0, #0
    a50e:	45c4      	cmp	ip, r8
    a510:	d3f6      	bcc.n	a500 <__gedf2+0xb0>
    a512:	e7d2      	b.n	a4ba <__gedf2+0x6a>
    a514:	000007ff 	.word	0x000007ff

0000a518 <__ledf2>:
    a518:	b5f0      	push	{r4, r5, r6, r7, lr}
    a51a:	464e      	mov	r6, r9
    a51c:	4645      	mov	r5, r8
    a51e:	46de      	mov	lr, fp
    a520:	4657      	mov	r7, sl
    a522:	005c      	lsls	r4, r3, #1
    a524:	b5e0      	push	{r5, r6, r7, lr}
    a526:	031f      	lsls	r7, r3, #12
    a528:	0fdb      	lsrs	r3, r3, #31
    a52a:	4699      	mov	r9, r3
    a52c:	4b2a      	ldr	r3, [pc, #168]	; (a5d8 <__ledf2+0xc0>)
    a52e:	030e      	lsls	r6, r1, #12
    a530:	004d      	lsls	r5, r1, #1
    a532:	0fc9      	lsrs	r1, r1, #31
    a534:	4684      	mov	ip, r0
    a536:	0b36      	lsrs	r6, r6, #12
    a538:	0d6d      	lsrs	r5, r5, #21
    a53a:	468b      	mov	fp, r1
    a53c:	4690      	mov	r8, r2
    a53e:	0b3f      	lsrs	r7, r7, #12
    a540:	0d64      	lsrs	r4, r4, #21
    a542:	429d      	cmp	r5, r3
    a544:	d020      	beq.n	a588 <__ledf2+0x70>
    a546:	4b24      	ldr	r3, [pc, #144]	; (a5d8 <__ledf2+0xc0>)
    a548:	429c      	cmp	r4, r3
    a54a:	d022      	beq.n	a592 <__ledf2+0x7a>
    a54c:	2d00      	cmp	r5, #0
    a54e:	d112      	bne.n	a576 <__ledf2+0x5e>
    a550:	4330      	orrs	r0, r6
    a552:	4243      	negs	r3, r0
    a554:	4143      	adcs	r3, r0
    a556:	b2db      	uxtb	r3, r3
    a558:	2c00      	cmp	r4, #0
    a55a:	d01f      	beq.n	a59c <__ledf2+0x84>
    a55c:	2b00      	cmp	r3, #0
    a55e:	d00c      	beq.n	a57a <__ledf2+0x62>
    a560:	464b      	mov	r3, r9
    a562:	2001      	movs	r0, #1
    a564:	3b01      	subs	r3, #1
    a566:	4303      	orrs	r3, r0
    a568:	0018      	movs	r0, r3
    a56a:	bc3c      	pop	{r2, r3, r4, r5}
    a56c:	4690      	mov	r8, r2
    a56e:	4699      	mov	r9, r3
    a570:	46a2      	mov	sl, r4
    a572:	46ab      	mov	fp, r5
    a574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a576:	2c00      	cmp	r4, #0
    a578:	d016      	beq.n	a5a8 <__ledf2+0x90>
    a57a:	45cb      	cmp	fp, r9
    a57c:	d017      	beq.n	a5ae <__ledf2+0x96>
    a57e:	465b      	mov	r3, fp
    a580:	4259      	negs	r1, r3
    a582:	2301      	movs	r3, #1
    a584:	430b      	orrs	r3, r1
    a586:	e7ef      	b.n	a568 <__ledf2+0x50>
    a588:	0031      	movs	r1, r6
    a58a:	2302      	movs	r3, #2
    a58c:	4301      	orrs	r1, r0
    a58e:	d1eb      	bne.n	a568 <__ledf2+0x50>
    a590:	e7d9      	b.n	a546 <__ledf2+0x2e>
    a592:	0039      	movs	r1, r7
    a594:	2302      	movs	r3, #2
    a596:	4311      	orrs	r1, r2
    a598:	d1e6      	bne.n	a568 <__ledf2+0x50>
    a59a:	e7d7      	b.n	a54c <__ledf2+0x34>
    a59c:	433a      	orrs	r2, r7
    a59e:	d1dd      	bne.n	a55c <__ledf2+0x44>
    a5a0:	2300      	movs	r3, #0
    a5a2:	2800      	cmp	r0, #0
    a5a4:	d0e0      	beq.n	a568 <__ledf2+0x50>
    a5a6:	e7ea      	b.n	a57e <__ledf2+0x66>
    a5a8:	433a      	orrs	r2, r7
    a5aa:	d1e6      	bne.n	a57a <__ledf2+0x62>
    a5ac:	e7e7      	b.n	a57e <__ledf2+0x66>
    a5ae:	42a5      	cmp	r5, r4
    a5b0:	dce5      	bgt.n	a57e <__ledf2+0x66>
    a5b2:	db05      	blt.n	a5c0 <__ledf2+0xa8>
    a5b4:	42be      	cmp	r6, r7
    a5b6:	d8e2      	bhi.n	a57e <__ledf2+0x66>
    a5b8:	d007      	beq.n	a5ca <__ledf2+0xb2>
    a5ba:	2300      	movs	r3, #0
    a5bc:	42be      	cmp	r6, r7
    a5be:	d2d3      	bcs.n	a568 <__ledf2+0x50>
    a5c0:	4659      	mov	r1, fp
    a5c2:	2301      	movs	r3, #1
    a5c4:	3901      	subs	r1, #1
    a5c6:	430b      	orrs	r3, r1
    a5c8:	e7ce      	b.n	a568 <__ledf2+0x50>
    a5ca:	45c4      	cmp	ip, r8
    a5cc:	d8d7      	bhi.n	a57e <__ledf2+0x66>
    a5ce:	2300      	movs	r3, #0
    a5d0:	45c4      	cmp	ip, r8
    a5d2:	d3f5      	bcc.n	a5c0 <__ledf2+0xa8>
    a5d4:	e7c8      	b.n	a568 <__ledf2+0x50>
    a5d6:	46c0      	nop			; (mov r8, r8)
    a5d8:	000007ff 	.word	0x000007ff

0000a5dc <__aeabi_dmul>:
    a5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5de:	4657      	mov	r7, sl
    a5e0:	4645      	mov	r5, r8
    a5e2:	46de      	mov	lr, fp
    a5e4:	464e      	mov	r6, r9
    a5e6:	b5e0      	push	{r5, r6, r7, lr}
    a5e8:	030c      	lsls	r4, r1, #12
    a5ea:	4698      	mov	r8, r3
    a5ec:	004e      	lsls	r6, r1, #1
    a5ee:	0b23      	lsrs	r3, r4, #12
    a5f0:	b087      	sub	sp, #28
    a5f2:	0007      	movs	r7, r0
    a5f4:	4692      	mov	sl, r2
    a5f6:	469b      	mov	fp, r3
    a5f8:	0d76      	lsrs	r6, r6, #21
    a5fa:	0fcd      	lsrs	r5, r1, #31
    a5fc:	2e00      	cmp	r6, #0
    a5fe:	d06b      	beq.n	a6d8 <__aeabi_dmul+0xfc>
    a600:	4b6d      	ldr	r3, [pc, #436]	; (a7b8 <__aeabi_dmul+0x1dc>)
    a602:	429e      	cmp	r6, r3
    a604:	d035      	beq.n	a672 <__aeabi_dmul+0x96>
    a606:	2480      	movs	r4, #128	; 0x80
    a608:	465b      	mov	r3, fp
    a60a:	0f42      	lsrs	r2, r0, #29
    a60c:	0424      	lsls	r4, r4, #16
    a60e:	00db      	lsls	r3, r3, #3
    a610:	4314      	orrs	r4, r2
    a612:	431c      	orrs	r4, r3
    a614:	00c3      	lsls	r3, r0, #3
    a616:	4699      	mov	r9, r3
    a618:	4b68      	ldr	r3, [pc, #416]	; (a7bc <__aeabi_dmul+0x1e0>)
    a61a:	46a3      	mov	fp, r4
    a61c:	469c      	mov	ip, r3
    a61e:	2300      	movs	r3, #0
    a620:	2700      	movs	r7, #0
    a622:	4466      	add	r6, ip
    a624:	9302      	str	r3, [sp, #8]
    a626:	4643      	mov	r3, r8
    a628:	031c      	lsls	r4, r3, #12
    a62a:	005a      	lsls	r2, r3, #1
    a62c:	0fdb      	lsrs	r3, r3, #31
    a62e:	4650      	mov	r0, sl
    a630:	0b24      	lsrs	r4, r4, #12
    a632:	0d52      	lsrs	r2, r2, #21
    a634:	4698      	mov	r8, r3
    a636:	d100      	bne.n	a63a <__aeabi_dmul+0x5e>
    a638:	e076      	b.n	a728 <__aeabi_dmul+0x14c>
    a63a:	4b5f      	ldr	r3, [pc, #380]	; (a7b8 <__aeabi_dmul+0x1dc>)
    a63c:	429a      	cmp	r2, r3
    a63e:	d06d      	beq.n	a71c <__aeabi_dmul+0x140>
    a640:	2380      	movs	r3, #128	; 0x80
    a642:	0f41      	lsrs	r1, r0, #29
    a644:	041b      	lsls	r3, r3, #16
    a646:	430b      	orrs	r3, r1
    a648:	495c      	ldr	r1, [pc, #368]	; (a7bc <__aeabi_dmul+0x1e0>)
    a64a:	00e4      	lsls	r4, r4, #3
    a64c:	468c      	mov	ip, r1
    a64e:	431c      	orrs	r4, r3
    a650:	00c3      	lsls	r3, r0, #3
    a652:	2000      	movs	r0, #0
    a654:	4462      	add	r2, ip
    a656:	4641      	mov	r1, r8
    a658:	18b6      	adds	r6, r6, r2
    a65a:	4069      	eors	r1, r5
    a65c:	1c72      	adds	r2, r6, #1
    a65e:	9101      	str	r1, [sp, #4]
    a660:	4694      	mov	ip, r2
    a662:	4307      	orrs	r7, r0
    a664:	2f0f      	cmp	r7, #15
    a666:	d900      	bls.n	a66a <__aeabi_dmul+0x8e>
    a668:	e0b0      	b.n	a7cc <__aeabi_dmul+0x1f0>
    a66a:	4a55      	ldr	r2, [pc, #340]	; (a7c0 <__aeabi_dmul+0x1e4>)
    a66c:	00bf      	lsls	r7, r7, #2
    a66e:	59d2      	ldr	r2, [r2, r7]
    a670:	4697      	mov	pc, r2
    a672:	465b      	mov	r3, fp
    a674:	4303      	orrs	r3, r0
    a676:	4699      	mov	r9, r3
    a678:	d000      	beq.n	a67c <__aeabi_dmul+0xa0>
    a67a:	e087      	b.n	a78c <__aeabi_dmul+0x1b0>
    a67c:	2300      	movs	r3, #0
    a67e:	469b      	mov	fp, r3
    a680:	3302      	adds	r3, #2
    a682:	2708      	movs	r7, #8
    a684:	9302      	str	r3, [sp, #8]
    a686:	e7ce      	b.n	a626 <__aeabi_dmul+0x4a>
    a688:	4642      	mov	r2, r8
    a68a:	9201      	str	r2, [sp, #4]
    a68c:	2802      	cmp	r0, #2
    a68e:	d067      	beq.n	a760 <__aeabi_dmul+0x184>
    a690:	2803      	cmp	r0, #3
    a692:	d100      	bne.n	a696 <__aeabi_dmul+0xba>
    a694:	e20e      	b.n	aab4 <__aeabi_dmul+0x4d8>
    a696:	2801      	cmp	r0, #1
    a698:	d000      	beq.n	a69c <__aeabi_dmul+0xc0>
    a69a:	e162      	b.n	a962 <__aeabi_dmul+0x386>
    a69c:	2300      	movs	r3, #0
    a69e:	2400      	movs	r4, #0
    a6a0:	2200      	movs	r2, #0
    a6a2:	4699      	mov	r9, r3
    a6a4:	9901      	ldr	r1, [sp, #4]
    a6a6:	4001      	ands	r1, r0
    a6a8:	b2cd      	uxtb	r5, r1
    a6aa:	2100      	movs	r1, #0
    a6ac:	0312      	lsls	r2, r2, #12
    a6ae:	0d0b      	lsrs	r3, r1, #20
    a6b0:	0b12      	lsrs	r2, r2, #12
    a6b2:	051b      	lsls	r3, r3, #20
    a6b4:	4313      	orrs	r3, r2
    a6b6:	4a43      	ldr	r2, [pc, #268]	; (a7c4 <__aeabi_dmul+0x1e8>)
    a6b8:	0524      	lsls	r4, r4, #20
    a6ba:	4013      	ands	r3, r2
    a6bc:	431c      	orrs	r4, r3
    a6be:	0064      	lsls	r4, r4, #1
    a6c0:	07ed      	lsls	r5, r5, #31
    a6c2:	0864      	lsrs	r4, r4, #1
    a6c4:	432c      	orrs	r4, r5
    a6c6:	4648      	mov	r0, r9
    a6c8:	0021      	movs	r1, r4
    a6ca:	b007      	add	sp, #28
    a6cc:	bc3c      	pop	{r2, r3, r4, r5}
    a6ce:	4690      	mov	r8, r2
    a6d0:	4699      	mov	r9, r3
    a6d2:	46a2      	mov	sl, r4
    a6d4:	46ab      	mov	fp, r5
    a6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a6d8:	4303      	orrs	r3, r0
    a6da:	4699      	mov	r9, r3
    a6dc:	d04f      	beq.n	a77e <__aeabi_dmul+0x1a2>
    a6de:	465b      	mov	r3, fp
    a6e0:	2b00      	cmp	r3, #0
    a6e2:	d100      	bne.n	a6e6 <__aeabi_dmul+0x10a>
    a6e4:	e189      	b.n	a9fa <__aeabi_dmul+0x41e>
    a6e6:	4658      	mov	r0, fp
    a6e8:	f000 feb8 	bl	b45c <__clzsi2>
    a6ec:	0003      	movs	r3, r0
    a6ee:	3b0b      	subs	r3, #11
    a6f0:	2b1c      	cmp	r3, #28
    a6f2:	dd00      	ble.n	a6f6 <__aeabi_dmul+0x11a>
    a6f4:	e17a      	b.n	a9ec <__aeabi_dmul+0x410>
    a6f6:	221d      	movs	r2, #29
    a6f8:	1ad3      	subs	r3, r2, r3
    a6fa:	003a      	movs	r2, r7
    a6fc:	0001      	movs	r1, r0
    a6fe:	465c      	mov	r4, fp
    a700:	40da      	lsrs	r2, r3
    a702:	3908      	subs	r1, #8
    a704:	408c      	lsls	r4, r1
    a706:	0013      	movs	r3, r2
    a708:	408f      	lsls	r7, r1
    a70a:	4323      	orrs	r3, r4
    a70c:	469b      	mov	fp, r3
    a70e:	46b9      	mov	r9, r7
    a710:	2300      	movs	r3, #0
    a712:	4e2d      	ldr	r6, [pc, #180]	; (a7c8 <__aeabi_dmul+0x1ec>)
    a714:	2700      	movs	r7, #0
    a716:	1a36      	subs	r6, r6, r0
    a718:	9302      	str	r3, [sp, #8]
    a71a:	e784      	b.n	a626 <__aeabi_dmul+0x4a>
    a71c:	4653      	mov	r3, sl
    a71e:	4323      	orrs	r3, r4
    a720:	d12a      	bne.n	a778 <__aeabi_dmul+0x19c>
    a722:	2400      	movs	r4, #0
    a724:	2002      	movs	r0, #2
    a726:	e796      	b.n	a656 <__aeabi_dmul+0x7a>
    a728:	4653      	mov	r3, sl
    a72a:	4323      	orrs	r3, r4
    a72c:	d020      	beq.n	a770 <__aeabi_dmul+0x194>
    a72e:	2c00      	cmp	r4, #0
    a730:	d100      	bne.n	a734 <__aeabi_dmul+0x158>
    a732:	e157      	b.n	a9e4 <__aeabi_dmul+0x408>
    a734:	0020      	movs	r0, r4
    a736:	f000 fe91 	bl	b45c <__clzsi2>
    a73a:	0003      	movs	r3, r0
    a73c:	3b0b      	subs	r3, #11
    a73e:	2b1c      	cmp	r3, #28
    a740:	dd00      	ble.n	a744 <__aeabi_dmul+0x168>
    a742:	e149      	b.n	a9d8 <__aeabi_dmul+0x3fc>
    a744:	211d      	movs	r1, #29
    a746:	1acb      	subs	r3, r1, r3
    a748:	4651      	mov	r1, sl
    a74a:	0002      	movs	r2, r0
    a74c:	40d9      	lsrs	r1, r3
    a74e:	4653      	mov	r3, sl
    a750:	3a08      	subs	r2, #8
    a752:	4094      	lsls	r4, r2
    a754:	4093      	lsls	r3, r2
    a756:	430c      	orrs	r4, r1
    a758:	4a1b      	ldr	r2, [pc, #108]	; (a7c8 <__aeabi_dmul+0x1ec>)
    a75a:	1a12      	subs	r2, r2, r0
    a75c:	2000      	movs	r0, #0
    a75e:	e77a      	b.n	a656 <__aeabi_dmul+0x7a>
    a760:	2501      	movs	r5, #1
    a762:	9b01      	ldr	r3, [sp, #4]
    a764:	4c14      	ldr	r4, [pc, #80]	; (a7b8 <__aeabi_dmul+0x1dc>)
    a766:	401d      	ands	r5, r3
    a768:	2300      	movs	r3, #0
    a76a:	2200      	movs	r2, #0
    a76c:	4699      	mov	r9, r3
    a76e:	e79c      	b.n	a6aa <__aeabi_dmul+0xce>
    a770:	2400      	movs	r4, #0
    a772:	2200      	movs	r2, #0
    a774:	2001      	movs	r0, #1
    a776:	e76e      	b.n	a656 <__aeabi_dmul+0x7a>
    a778:	4653      	mov	r3, sl
    a77a:	2003      	movs	r0, #3
    a77c:	e76b      	b.n	a656 <__aeabi_dmul+0x7a>
    a77e:	2300      	movs	r3, #0
    a780:	469b      	mov	fp, r3
    a782:	3301      	adds	r3, #1
    a784:	2704      	movs	r7, #4
    a786:	2600      	movs	r6, #0
    a788:	9302      	str	r3, [sp, #8]
    a78a:	e74c      	b.n	a626 <__aeabi_dmul+0x4a>
    a78c:	2303      	movs	r3, #3
    a78e:	4681      	mov	r9, r0
    a790:	270c      	movs	r7, #12
    a792:	9302      	str	r3, [sp, #8]
    a794:	e747      	b.n	a626 <__aeabi_dmul+0x4a>
    a796:	2280      	movs	r2, #128	; 0x80
    a798:	2300      	movs	r3, #0
    a79a:	2500      	movs	r5, #0
    a79c:	0312      	lsls	r2, r2, #12
    a79e:	4699      	mov	r9, r3
    a7a0:	4c05      	ldr	r4, [pc, #20]	; (a7b8 <__aeabi_dmul+0x1dc>)
    a7a2:	e782      	b.n	a6aa <__aeabi_dmul+0xce>
    a7a4:	465c      	mov	r4, fp
    a7a6:	464b      	mov	r3, r9
    a7a8:	9802      	ldr	r0, [sp, #8]
    a7aa:	e76f      	b.n	a68c <__aeabi_dmul+0xb0>
    a7ac:	465c      	mov	r4, fp
    a7ae:	464b      	mov	r3, r9
    a7b0:	9501      	str	r5, [sp, #4]
    a7b2:	9802      	ldr	r0, [sp, #8]
    a7b4:	e76a      	b.n	a68c <__aeabi_dmul+0xb0>
    a7b6:	46c0      	nop			; (mov r8, r8)
    a7b8:	000007ff 	.word	0x000007ff
    a7bc:	fffffc01 	.word	0xfffffc01
    a7c0:	00010eb0 	.word	0x00010eb0
    a7c4:	800fffff 	.word	0x800fffff
    a7c8:	fffffc0d 	.word	0xfffffc0d
    a7cc:	464a      	mov	r2, r9
    a7ce:	4649      	mov	r1, r9
    a7d0:	0c17      	lsrs	r7, r2, #16
    a7d2:	0c1a      	lsrs	r2, r3, #16
    a7d4:	041b      	lsls	r3, r3, #16
    a7d6:	0c1b      	lsrs	r3, r3, #16
    a7d8:	0408      	lsls	r0, r1, #16
    a7da:	0019      	movs	r1, r3
    a7dc:	0c00      	lsrs	r0, r0, #16
    a7de:	4341      	muls	r1, r0
    a7e0:	0015      	movs	r5, r2
    a7e2:	4688      	mov	r8, r1
    a7e4:	0019      	movs	r1, r3
    a7e6:	437d      	muls	r5, r7
    a7e8:	4379      	muls	r1, r7
    a7ea:	9503      	str	r5, [sp, #12]
    a7ec:	4689      	mov	r9, r1
    a7ee:	0029      	movs	r1, r5
    a7f0:	0015      	movs	r5, r2
    a7f2:	4345      	muls	r5, r0
    a7f4:	444d      	add	r5, r9
    a7f6:	9502      	str	r5, [sp, #8]
    a7f8:	4645      	mov	r5, r8
    a7fa:	0c2d      	lsrs	r5, r5, #16
    a7fc:	46aa      	mov	sl, r5
    a7fe:	9d02      	ldr	r5, [sp, #8]
    a800:	4455      	add	r5, sl
    a802:	45a9      	cmp	r9, r5
    a804:	d906      	bls.n	a814 <__aeabi_dmul+0x238>
    a806:	468a      	mov	sl, r1
    a808:	2180      	movs	r1, #128	; 0x80
    a80a:	0249      	lsls	r1, r1, #9
    a80c:	4689      	mov	r9, r1
    a80e:	44ca      	add	sl, r9
    a810:	4651      	mov	r1, sl
    a812:	9103      	str	r1, [sp, #12]
    a814:	0c29      	lsrs	r1, r5, #16
    a816:	9104      	str	r1, [sp, #16]
    a818:	4641      	mov	r1, r8
    a81a:	0409      	lsls	r1, r1, #16
    a81c:	042d      	lsls	r5, r5, #16
    a81e:	0c09      	lsrs	r1, r1, #16
    a820:	4688      	mov	r8, r1
    a822:	0029      	movs	r1, r5
    a824:	0c25      	lsrs	r5, r4, #16
    a826:	0424      	lsls	r4, r4, #16
    a828:	4441      	add	r1, r8
    a82a:	0c24      	lsrs	r4, r4, #16
    a82c:	9105      	str	r1, [sp, #20]
    a82e:	0021      	movs	r1, r4
    a830:	4341      	muls	r1, r0
    a832:	4688      	mov	r8, r1
    a834:	0021      	movs	r1, r4
    a836:	4379      	muls	r1, r7
    a838:	468a      	mov	sl, r1
    a83a:	4368      	muls	r0, r5
    a83c:	4641      	mov	r1, r8
    a83e:	4450      	add	r0, sl
    a840:	4681      	mov	r9, r0
    a842:	0c08      	lsrs	r0, r1, #16
    a844:	4448      	add	r0, r9
    a846:	436f      	muls	r7, r5
    a848:	4582      	cmp	sl, r0
    a84a:	d903      	bls.n	a854 <__aeabi_dmul+0x278>
    a84c:	2180      	movs	r1, #128	; 0x80
    a84e:	0249      	lsls	r1, r1, #9
    a850:	4689      	mov	r9, r1
    a852:	444f      	add	r7, r9
    a854:	0c01      	lsrs	r1, r0, #16
    a856:	4689      	mov	r9, r1
    a858:	0039      	movs	r1, r7
    a85a:	4449      	add	r1, r9
    a85c:	9102      	str	r1, [sp, #8]
    a85e:	4641      	mov	r1, r8
    a860:	040f      	lsls	r7, r1, #16
    a862:	9904      	ldr	r1, [sp, #16]
    a864:	0c3f      	lsrs	r7, r7, #16
    a866:	4688      	mov	r8, r1
    a868:	0400      	lsls	r0, r0, #16
    a86a:	19c0      	adds	r0, r0, r7
    a86c:	4480      	add	r8, r0
    a86e:	4641      	mov	r1, r8
    a870:	9104      	str	r1, [sp, #16]
    a872:	4659      	mov	r1, fp
    a874:	0c0f      	lsrs	r7, r1, #16
    a876:	0409      	lsls	r1, r1, #16
    a878:	0c09      	lsrs	r1, r1, #16
    a87a:	4688      	mov	r8, r1
    a87c:	4359      	muls	r1, r3
    a87e:	468a      	mov	sl, r1
    a880:	0039      	movs	r1, r7
    a882:	4351      	muls	r1, r2
    a884:	4689      	mov	r9, r1
    a886:	4641      	mov	r1, r8
    a888:	434a      	muls	r2, r1
    a88a:	4651      	mov	r1, sl
    a88c:	0c09      	lsrs	r1, r1, #16
    a88e:	468b      	mov	fp, r1
    a890:	437b      	muls	r3, r7
    a892:	18d2      	adds	r2, r2, r3
    a894:	445a      	add	r2, fp
    a896:	4293      	cmp	r3, r2
    a898:	d903      	bls.n	a8a2 <__aeabi_dmul+0x2c6>
    a89a:	2380      	movs	r3, #128	; 0x80
    a89c:	025b      	lsls	r3, r3, #9
    a89e:	469b      	mov	fp, r3
    a8a0:	44d9      	add	r9, fp
    a8a2:	4651      	mov	r1, sl
    a8a4:	0409      	lsls	r1, r1, #16
    a8a6:	0c09      	lsrs	r1, r1, #16
    a8a8:	468a      	mov	sl, r1
    a8aa:	4641      	mov	r1, r8
    a8ac:	4361      	muls	r1, r4
    a8ae:	437c      	muls	r4, r7
    a8b0:	0c13      	lsrs	r3, r2, #16
    a8b2:	0412      	lsls	r2, r2, #16
    a8b4:	444b      	add	r3, r9
    a8b6:	4452      	add	r2, sl
    a8b8:	46a1      	mov	r9, r4
    a8ba:	468a      	mov	sl, r1
    a8bc:	003c      	movs	r4, r7
    a8be:	4641      	mov	r1, r8
    a8c0:	436c      	muls	r4, r5
    a8c2:	434d      	muls	r5, r1
    a8c4:	4651      	mov	r1, sl
    a8c6:	444d      	add	r5, r9
    a8c8:	0c0f      	lsrs	r7, r1, #16
    a8ca:	197d      	adds	r5, r7, r5
    a8cc:	45a9      	cmp	r9, r5
    a8ce:	d903      	bls.n	a8d8 <__aeabi_dmul+0x2fc>
    a8d0:	2180      	movs	r1, #128	; 0x80
    a8d2:	0249      	lsls	r1, r1, #9
    a8d4:	4688      	mov	r8, r1
    a8d6:	4444      	add	r4, r8
    a8d8:	9f04      	ldr	r7, [sp, #16]
    a8da:	9903      	ldr	r1, [sp, #12]
    a8dc:	46b8      	mov	r8, r7
    a8de:	4441      	add	r1, r8
    a8e0:	468b      	mov	fp, r1
    a8e2:	4583      	cmp	fp, r0
    a8e4:	4180      	sbcs	r0, r0
    a8e6:	4241      	negs	r1, r0
    a8e8:	4688      	mov	r8, r1
    a8ea:	4651      	mov	r1, sl
    a8ec:	0408      	lsls	r0, r1, #16
    a8ee:	042f      	lsls	r7, r5, #16
    a8f0:	0c00      	lsrs	r0, r0, #16
    a8f2:	183f      	adds	r7, r7, r0
    a8f4:	4658      	mov	r0, fp
    a8f6:	9902      	ldr	r1, [sp, #8]
    a8f8:	1810      	adds	r0, r2, r0
    a8fa:	4689      	mov	r9, r1
    a8fc:	4290      	cmp	r0, r2
    a8fe:	4192      	sbcs	r2, r2
    a900:	444f      	add	r7, r9
    a902:	46ba      	mov	sl, r7
    a904:	4252      	negs	r2, r2
    a906:	4699      	mov	r9, r3
    a908:	4693      	mov	fp, r2
    a90a:	44c2      	add	sl, r8
    a90c:	44d1      	add	r9, sl
    a90e:	44cb      	add	fp, r9
    a910:	428f      	cmp	r7, r1
    a912:	41bf      	sbcs	r7, r7
    a914:	45c2      	cmp	sl, r8
    a916:	4189      	sbcs	r1, r1
    a918:	4599      	cmp	r9, r3
    a91a:	419b      	sbcs	r3, r3
    a91c:	4593      	cmp	fp, r2
    a91e:	4192      	sbcs	r2, r2
    a920:	427f      	negs	r7, r7
    a922:	4249      	negs	r1, r1
    a924:	0c2d      	lsrs	r5, r5, #16
    a926:	4252      	negs	r2, r2
    a928:	430f      	orrs	r7, r1
    a92a:	425b      	negs	r3, r3
    a92c:	4313      	orrs	r3, r2
    a92e:	197f      	adds	r7, r7, r5
    a930:	18ff      	adds	r7, r7, r3
    a932:	465b      	mov	r3, fp
    a934:	193c      	adds	r4, r7, r4
    a936:	0ddb      	lsrs	r3, r3, #23
    a938:	9a05      	ldr	r2, [sp, #20]
    a93a:	0264      	lsls	r4, r4, #9
    a93c:	431c      	orrs	r4, r3
    a93e:	0243      	lsls	r3, r0, #9
    a940:	4313      	orrs	r3, r2
    a942:	1e5d      	subs	r5, r3, #1
    a944:	41ab      	sbcs	r3, r5
    a946:	465a      	mov	r2, fp
    a948:	0dc0      	lsrs	r0, r0, #23
    a94a:	4303      	orrs	r3, r0
    a94c:	0252      	lsls	r2, r2, #9
    a94e:	4313      	orrs	r3, r2
    a950:	01e2      	lsls	r2, r4, #7
    a952:	d556      	bpl.n	aa02 <__aeabi_dmul+0x426>
    a954:	2001      	movs	r0, #1
    a956:	085a      	lsrs	r2, r3, #1
    a958:	4003      	ands	r3, r0
    a95a:	4313      	orrs	r3, r2
    a95c:	07e2      	lsls	r2, r4, #31
    a95e:	4313      	orrs	r3, r2
    a960:	0864      	lsrs	r4, r4, #1
    a962:	485a      	ldr	r0, [pc, #360]	; (aacc <__aeabi_dmul+0x4f0>)
    a964:	4460      	add	r0, ip
    a966:	2800      	cmp	r0, #0
    a968:	dd4d      	ble.n	aa06 <__aeabi_dmul+0x42a>
    a96a:	075a      	lsls	r2, r3, #29
    a96c:	d009      	beq.n	a982 <__aeabi_dmul+0x3a6>
    a96e:	220f      	movs	r2, #15
    a970:	401a      	ands	r2, r3
    a972:	2a04      	cmp	r2, #4
    a974:	d005      	beq.n	a982 <__aeabi_dmul+0x3a6>
    a976:	1d1a      	adds	r2, r3, #4
    a978:	429a      	cmp	r2, r3
    a97a:	419b      	sbcs	r3, r3
    a97c:	425b      	negs	r3, r3
    a97e:	18e4      	adds	r4, r4, r3
    a980:	0013      	movs	r3, r2
    a982:	01e2      	lsls	r2, r4, #7
    a984:	d504      	bpl.n	a990 <__aeabi_dmul+0x3b4>
    a986:	2080      	movs	r0, #128	; 0x80
    a988:	4a51      	ldr	r2, [pc, #324]	; (aad0 <__aeabi_dmul+0x4f4>)
    a98a:	00c0      	lsls	r0, r0, #3
    a98c:	4014      	ands	r4, r2
    a98e:	4460      	add	r0, ip
    a990:	4a50      	ldr	r2, [pc, #320]	; (aad4 <__aeabi_dmul+0x4f8>)
    a992:	4290      	cmp	r0, r2
    a994:	dd00      	ble.n	a998 <__aeabi_dmul+0x3bc>
    a996:	e6e3      	b.n	a760 <__aeabi_dmul+0x184>
    a998:	2501      	movs	r5, #1
    a99a:	08db      	lsrs	r3, r3, #3
    a99c:	0762      	lsls	r2, r4, #29
    a99e:	431a      	orrs	r2, r3
    a9a0:	0264      	lsls	r4, r4, #9
    a9a2:	9b01      	ldr	r3, [sp, #4]
    a9a4:	4691      	mov	r9, r2
    a9a6:	0b22      	lsrs	r2, r4, #12
    a9a8:	0544      	lsls	r4, r0, #21
    a9aa:	0d64      	lsrs	r4, r4, #21
    a9ac:	401d      	ands	r5, r3
    a9ae:	e67c      	b.n	a6aa <__aeabi_dmul+0xce>
    a9b0:	2280      	movs	r2, #128	; 0x80
    a9b2:	4659      	mov	r1, fp
    a9b4:	0312      	lsls	r2, r2, #12
    a9b6:	4211      	tst	r1, r2
    a9b8:	d008      	beq.n	a9cc <__aeabi_dmul+0x3f0>
    a9ba:	4214      	tst	r4, r2
    a9bc:	d106      	bne.n	a9cc <__aeabi_dmul+0x3f0>
    a9be:	4322      	orrs	r2, r4
    a9c0:	0312      	lsls	r2, r2, #12
    a9c2:	0b12      	lsrs	r2, r2, #12
    a9c4:	4645      	mov	r5, r8
    a9c6:	4699      	mov	r9, r3
    a9c8:	4c43      	ldr	r4, [pc, #268]	; (aad8 <__aeabi_dmul+0x4fc>)
    a9ca:	e66e      	b.n	a6aa <__aeabi_dmul+0xce>
    a9cc:	465b      	mov	r3, fp
    a9ce:	431a      	orrs	r2, r3
    a9d0:	0312      	lsls	r2, r2, #12
    a9d2:	0b12      	lsrs	r2, r2, #12
    a9d4:	4c40      	ldr	r4, [pc, #256]	; (aad8 <__aeabi_dmul+0x4fc>)
    a9d6:	e668      	b.n	a6aa <__aeabi_dmul+0xce>
    a9d8:	0003      	movs	r3, r0
    a9da:	4654      	mov	r4, sl
    a9dc:	3b28      	subs	r3, #40	; 0x28
    a9de:	409c      	lsls	r4, r3
    a9e0:	2300      	movs	r3, #0
    a9e2:	e6b9      	b.n	a758 <__aeabi_dmul+0x17c>
    a9e4:	f000 fd3a 	bl	b45c <__clzsi2>
    a9e8:	3020      	adds	r0, #32
    a9ea:	e6a6      	b.n	a73a <__aeabi_dmul+0x15e>
    a9ec:	0003      	movs	r3, r0
    a9ee:	3b28      	subs	r3, #40	; 0x28
    a9f0:	409f      	lsls	r7, r3
    a9f2:	2300      	movs	r3, #0
    a9f4:	46bb      	mov	fp, r7
    a9f6:	4699      	mov	r9, r3
    a9f8:	e68a      	b.n	a710 <__aeabi_dmul+0x134>
    a9fa:	f000 fd2f 	bl	b45c <__clzsi2>
    a9fe:	3020      	adds	r0, #32
    aa00:	e674      	b.n	a6ec <__aeabi_dmul+0x110>
    aa02:	46b4      	mov	ip, r6
    aa04:	e7ad      	b.n	a962 <__aeabi_dmul+0x386>
    aa06:	2501      	movs	r5, #1
    aa08:	1a2a      	subs	r2, r5, r0
    aa0a:	2a38      	cmp	r2, #56	; 0x38
    aa0c:	dd06      	ble.n	aa1c <__aeabi_dmul+0x440>
    aa0e:	9b01      	ldr	r3, [sp, #4]
    aa10:	2400      	movs	r4, #0
    aa12:	401d      	ands	r5, r3
    aa14:	2300      	movs	r3, #0
    aa16:	2200      	movs	r2, #0
    aa18:	4699      	mov	r9, r3
    aa1a:	e646      	b.n	a6aa <__aeabi_dmul+0xce>
    aa1c:	2a1f      	cmp	r2, #31
    aa1e:	dc21      	bgt.n	aa64 <__aeabi_dmul+0x488>
    aa20:	2520      	movs	r5, #32
    aa22:	0020      	movs	r0, r4
    aa24:	1aad      	subs	r5, r5, r2
    aa26:	001e      	movs	r6, r3
    aa28:	40ab      	lsls	r3, r5
    aa2a:	40a8      	lsls	r0, r5
    aa2c:	40d6      	lsrs	r6, r2
    aa2e:	1e5d      	subs	r5, r3, #1
    aa30:	41ab      	sbcs	r3, r5
    aa32:	4330      	orrs	r0, r6
    aa34:	4318      	orrs	r0, r3
    aa36:	40d4      	lsrs	r4, r2
    aa38:	0743      	lsls	r3, r0, #29
    aa3a:	d009      	beq.n	aa50 <__aeabi_dmul+0x474>
    aa3c:	230f      	movs	r3, #15
    aa3e:	4003      	ands	r3, r0
    aa40:	2b04      	cmp	r3, #4
    aa42:	d005      	beq.n	aa50 <__aeabi_dmul+0x474>
    aa44:	0003      	movs	r3, r0
    aa46:	1d18      	adds	r0, r3, #4
    aa48:	4298      	cmp	r0, r3
    aa4a:	419b      	sbcs	r3, r3
    aa4c:	425b      	negs	r3, r3
    aa4e:	18e4      	adds	r4, r4, r3
    aa50:	0223      	lsls	r3, r4, #8
    aa52:	d521      	bpl.n	aa98 <__aeabi_dmul+0x4bc>
    aa54:	2501      	movs	r5, #1
    aa56:	9b01      	ldr	r3, [sp, #4]
    aa58:	2401      	movs	r4, #1
    aa5a:	401d      	ands	r5, r3
    aa5c:	2300      	movs	r3, #0
    aa5e:	2200      	movs	r2, #0
    aa60:	4699      	mov	r9, r3
    aa62:	e622      	b.n	a6aa <__aeabi_dmul+0xce>
    aa64:	251f      	movs	r5, #31
    aa66:	0021      	movs	r1, r4
    aa68:	426d      	negs	r5, r5
    aa6a:	1a28      	subs	r0, r5, r0
    aa6c:	40c1      	lsrs	r1, r0
    aa6e:	0008      	movs	r0, r1
    aa70:	2a20      	cmp	r2, #32
    aa72:	d01d      	beq.n	aab0 <__aeabi_dmul+0x4d4>
    aa74:	355f      	adds	r5, #95	; 0x5f
    aa76:	1aaa      	subs	r2, r5, r2
    aa78:	4094      	lsls	r4, r2
    aa7a:	4323      	orrs	r3, r4
    aa7c:	1e5c      	subs	r4, r3, #1
    aa7e:	41a3      	sbcs	r3, r4
    aa80:	2507      	movs	r5, #7
    aa82:	4303      	orrs	r3, r0
    aa84:	401d      	ands	r5, r3
    aa86:	2200      	movs	r2, #0
    aa88:	2d00      	cmp	r5, #0
    aa8a:	d009      	beq.n	aaa0 <__aeabi_dmul+0x4c4>
    aa8c:	220f      	movs	r2, #15
    aa8e:	2400      	movs	r4, #0
    aa90:	401a      	ands	r2, r3
    aa92:	0018      	movs	r0, r3
    aa94:	2a04      	cmp	r2, #4
    aa96:	d1d6      	bne.n	aa46 <__aeabi_dmul+0x46a>
    aa98:	0003      	movs	r3, r0
    aa9a:	0765      	lsls	r5, r4, #29
    aa9c:	0264      	lsls	r4, r4, #9
    aa9e:	0b22      	lsrs	r2, r4, #12
    aaa0:	08db      	lsrs	r3, r3, #3
    aaa2:	432b      	orrs	r3, r5
    aaa4:	2501      	movs	r5, #1
    aaa6:	4699      	mov	r9, r3
    aaa8:	9b01      	ldr	r3, [sp, #4]
    aaaa:	2400      	movs	r4, #0
    aaac:	401d      	ands	r5, r3
    aaae:	e5fc      	b.n	a6aa <__aeabi_dmul+0xce>
    aab0:	2400      	movs	r4, #0
    aab2:	e7e2      	b.n	aa7a <__aeabi_dmul+0x49e>
    aab4:	2280      	movs	r2, #128	; 0x80
    aab6:	2501      	movs	r5, #1
    aab8:	0312      	lsls	r2, r2, #12
    aaba:	4322      	orrs	r2, r4
    aabc:	9901      	ldr	r1, [sp, #4]
    aabe:	0312      	lsls	r2, r2, #12
    aac0:	0b12      	lsrs	r2, r2, #12
    aac2:	400d      	ands	r5, r1
    aac4:	4699      	mov	r9, r3
    aac6:	4c04      	ldr	r4, [pc, #16]	; (aad8 <__aeabi_dmul+0x4fc>)
    aac8:	e5ef      	b.n	a6aa <__aeabi_dmul+0xce>
    aaca:	46c0      	nop			; (mov r8, r8)
    aacc:	000003ff 	.word	0x000003ff
    aad0:	feffffff 	.word	0xfeffffff
    aad4:	000007fe 	.word	0x000007fe
    aad8:	000007ff 	.word	0x000007ff

0000aadc <__aeabi_dsub>:
    aadc:	b5f0      	push	{r4, r5, r6, r7, lr}
    aade:	4646      	mov	r6, r8
    aae0:	46d6      	mov	lr, sl
    aae2:	464f      	mov	r7, r9
    aae4:	030c      	lsls	r4, r1, #12
    aae6:	b5c0      	push	{r6, r7, lr}
    aae8:	0fcd      	lsrs	r5, r1, #31
    aaea:	004e      	lsls	r6, r1, #1
    aaec:	0a61      	lsrs	r1, r4, #9
    aaee:	0f44      	lsrs	r4, r0, #29
    aaf0:	430c      	orrs	r4, r1
    aaf2:	00c1      	lsls	r1, r0, #3
    aaf4:	0058      	lsls	r0, r3, #1
    aaf6:	0d40      	lsrs	r0, r0, #21
    aaf8:	4684      	mov	ip, r0
    aafa:	468a      	mov	sl, r1
    aafc:	000f      	movs	r7, r1
    aafe:	0319      	lsls	r1, r3, #12
    ab00:	0f50      	lsrs	r0, r2, #29
    ab02:	0a49      	lsrs	r1, r1, #9
    ab04:	4301      	orrs	r1, r0
    ab06:	48c6      	ldr	r0, [pc, #792]	; (ae20 <__aeabi_dsub+0x344>)
    ab08:	0d76      	lsrs	r6, r6, #21
    ab0a:	46a8      	mov	r8, r5
    ab0c:	0fdb      	lsrs	r3, r3, #31
    ab0e:	00d2      	lsls	r2, r2, #3
    ab10:	4584      	cmp	ip, r0
    ab12:	d100      	bne.n	ab16 <__aeabi_dsub+0x3a>
    ab14:	e0d8      	b.n	acc8 <__aeabi_dsub+0x1ec>
    ab16:	2001      	movs	r0, #1
    ab18:	4043      	eors	r3, r0
    ab1a:	42ab      	cmp	r3, r5
    ab1c:	d100      	bne.n	ab20 <__aeabi_dsub+0x44>
    ab1e:	e0a6      	b.n	ac6e <__aeabi_dsub+0x192>
    ab20:	4660      	mov	r0, ip
    ab22:	1a35      	subs	r5, r6, r0
    ab24:	2d00      	cmp	r5, #0
    ab26:	dc00      	bgt.n	ab2a <__aeabi_dsub+0x4e>
    ab28:	e105      	b.n	ad36 <__aeabi_dsub+0x25a>
    ab2a:	2800      	cmp	r0, #0
    ab2c:	d110      	bne.n	ab50 <__aeabi_dsub+0x74>
    ab2e:	000b      	movs	r3, r1
    ab30:	4313      	orrs	r3, r2
    ab32:	d100      	bne.n	ab36 <__aeabi_dsub+0x5a>
    ab34:	e0d7      	b.n	ace6 <__aeabi_dsub+0x20a>
    ab36:	1e6b      	subs	r3, r5, #1
    ab38:	2b00      	cmp	r3, #0
    ab3a:	d000      	beq.n	ab3e <__aeabi_dsub+0x62>
    ab3c:	e14b      	b.n	add6 <__aeabi_dsub+0x2fa>
    ab3e:	4653      	mov	r3, sl
    ab40:	1a9f      	subs	r7, r3, r2
    ab42:	45ba      	cmp	sl, r7
    ab44:	4180      	sbcs	r0, r0
    ab46:	1a64      	subs	r4, r4, r1
    ab48:	4240      	negs	r0, r0
    ab4a:	1a24      	subs	r4, r4, r0
    ab4c:	2601      	movs	r6, #1
    ab4e:	e01e      	b.n	ab8e <__aeabi_dsub+0xb2>
    ab50:	4bb3      	ldr	r3, [pc, #716]	; (ae20 <__aeabi_dsub+0x344>)
    ab52:	429e      	cmp	r6, r3
    ab54:	d048      	beq.n	abe8 <__aeabi_dsub+0x10c>
    ab56:	2380      	movs	r3, #128	; 0x80
    ab58:	041b      	lsls	r3, r3, #16
    ab5a:	4319      	orrs	r1, r3
    ab5c:	2d38      	cmp	r5, #56	; 0x38
    ab5e:	dd00      	ble.n	ab62 <__aeabi_dsub+0x86>
    ab60:	e119      	b.n	ad96 <__aeabi_dsub+0x2ba>
    ab62:	2d1f      	cmp	r5, #31
    ab64:	dd00      	ble.n	ab68 <__aeabi_dsub+0x8c>
    ab66:	e14c      	b.n	ae02 <__aeabi_dsub+0x326>
    ab68:	2320      	movs	r3, #32
    ab6a:	000f      	movs	r7, r1
    ab6c:	1b5b      	subs	r3, r3, r5
    ab6e:	0010      	movs	r0, r2
    ab70:	409a      	lsls	r2, r3
    ab72:	409f      	lsls	r7, r3
    ab74:	40e8      	lsrs	r0, r5
    ab76:	1e53      	subs	r3, r2, #1
    ab78:	419a      	sbcs	r2, r3
    ab7a:	40e9      	lsrs	r1, r5
    ab7c:	4307      	orrs	r7, r0
    ab7e:	4317      	orrs	r7, r2
    ab80:	4653      	mov	r3, sl
    ab82:	1bdf      	subs	r7, r3, r7
    ab84:	1a61      	subs	r1, r4, r1
    ab86:	45ba      	cmp	sl, r7
    ab88:	41a4      	sbcs	r4, r4
    ab8a:	4264      	negs	r4, r4
    ab8c:	1b0c      	subs	r4, r1, r4
    ab8e:	0223      	lsls	r3, r4, #8
    ab90:	d400      	bmi.n	ab94 <__aeabi_dsub+0xb8>
    ab92:	e0c5      	b.n	ad20 <__aeabi_dsub+0x244>
    ab94:	0264      	lsls	r4, r4, #9
    ab96:	0a65      	lsrs	r5, r4, #9
    ab98:	2d00      	cmp	r5, #0
    ab9a:	d100      	bne.n	ab9e <__aeabi_dsub+0xc2>
    ab9c:	e0f6      	b.n	ad8c <__aeabi_dsub+0x2b0>
    ab9e:	0028      	movs	r0, r5
    aba0:	f000 fc5c 	bl	b45c <__clzsi2>
    aba4:	0003      	movs	r3, r0
    aba6:	3b08      	subs	r3, #8
    aba8:	2b1f      	cmp	r3, #31
    abaa:	dd00      	ble.n	abae <__aeabi_dsub+0xd2>
    abac:	e0e9      	b.n	ad82 <__aeabi_dsub+0x2a6>
    abae:	2220      	movs	r2, #32
    abb0:	003c      	movs	r4, r7
    abb2:	1ad2      	subs	r2, r2, r3
    abb4:	409d      	lsls	r5, r3
    abb6:	40d4      	lsrs	r4, r2
    abb8:	409f      	lsls	r7, r3
    abba:	4325      	orrs	r5, r4
    abbc:	429e      	cmp	r6, r3
    abbe:	dd00      	ble.n	abc2 <__aeabi_dsub+0xe6>
    abc0:	e0db      	b.n	ad7a <__aeabi_dsub+0x29e>
    abc2:	1b9e      	subs	r6, r3, r6
    abc4:	1c73      	adds	r3, r6, #1
    abc6:	2b1f      	cmp	r3, #31
    abc8:	dd00      	ble.n	abcc <__aeabi_dsub+0xf0>
    abca:	e10a      	b.n	ade2 <__aeabi_dsub+0x306>
    abcc:	2220      	movs	r2, #32
    abce:	0038      	movs	r0, r7
    abd0:	1ad2      	subs	r2, r2, r3
    abd2:	0029      	movs	r1, r5
    abd4:	4097      	lsls	r7, r2
    abd6:	002c      	movs	r4, r5
    abd8:	4091      	lsls	r1, r2
    abda:	40d8      	lsrs	r0, r3
    abdc:	1e7a      	subs	r2, r7, #1
    abde:	4197      	sbcs	r7, r2
    abe0:	40dc      	lsrs	r4, r3
    abe2:	2600      	movs	r6, #0
    abe4:	4301      	orrs	r1, r0
    abe6:	430f      	orrs	r7, r1
    abe8:	077b      	lsls	r3, r7, #29
    abea:	d009      	beq.n	ac00 <__aeabi_dsub+0x124>
    abec:	230f      	movs	r3, #15
    abee:	403b      	ands	r3, r7
    abf0:	2b04      	cmp	r3, #4
    abf2:	d005      	beq.n	ac00 <__aeabi_dsub+0x124>
    abf4:	1d3b      	adds	r3, r7, #4
    abf6:	42bb      	cmp	r3, r7
    abf8:	41bf      	sbcs	r7, r7
    abfa:	427f      	negs	r7, r7
    abfc:	19e4      	adds	r4, r4, r7
    abfe:	001f      	movs	r7, r3
    ac00:	0223      	lsls	r3, r4, #8
    ac02:	d525      	bpl.n	ac50 <__aeabi_dsub+0x174>
    ac04:	4b86      	ldr	r3, [pc, #536]	; (ae20 <__aeabi_dsub+0x344>)
    ac06:	3601      	adds	r6, #1
    ac08:	429e      	cmp	r6, r3
    ac0a:	d100      	bne.n	ac0e <__aeabi_dsub+0x132>
    ac0c:	e0af      	b.n	ad6e <__aeabi_dsub+0x292>
    ac0e:	4b85      	ldr	r3, [pc, #532]	; (ae24 <__aeabi_dsub+0x348>)
    ac10:	2501      	movs	r5, #1
    ac12:	401c      	ands	r4, r3
    ac14:	4643      	mov	r3, r8
    ac16:	0762      	lsls	r2, r4, #29
    ac18:	08ff      	lsrs	r7, r7, #3
    ac1a:	0264      	lsls	r4, r4, #9
    ac1c:	0576      	lsls	r6, r6, #21
    ac1e:	4317      	orrs	r7, r2
    ac20:	0b24      	lsrs	r4, r4, #12
    ac22:	0d76      	lsrs	r6, r6, #21
    ac24:	401d      	ands	r5, r3
    ac26:	2100      	movs	r1, #0
    ac28:	0324      	lsls	r4, r4, #12
    ac2a:	0b23      	lsrs	r3, r4, #12
    ac2c:	0d0c      	lsrs	r4, r1, #20
    ac2e:	4a7e      	ldr	r2, [pc, #504]	; (ae28 <__aeabi_dsub+0x34c>)
    ac30:	0524      	lsls	r4, r4, #20
    ac32:	431c      	orrs	r4, r3
    ac34:	4014      	ands	r4, r2
    ac36:	0533      	lsls	r3, r6, #20
    ac38:	4323      	orrs	r3, r4
    ac3a:	005b      	lsls	r3, r3, #1
    ac3c:	07ed      	lsls	r5, r5, #31
    ac3e:	085b      	lsrs	r3, r3, #1
    ac40:	432b      	orrs	r3, r5
    ac42:	0038      	movs	r0, r7
    ac44:	0019      	movs	r1, r3
    ac46:	bc1c      	pop	{r2, r3, r4}
    ac48:	4690      	mov	r8, r2
    ac4a:	4699      	mov	r9, r3
    ac4c:	46a2      	mov	sl, r4
    ac4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac50:	2501      	movs	r5, #1
    ac52:	4643      	mov	r3, r8
    ac54:	0762      	lsls	r2, r4, #29
    ac56:	08ff      	lsrs	r7, r7, #3
    ac58:	4317      	orrs	r7, r2
    ac5a:	08e4      	lsrs	r4, r4, #3
    ac5c:	401d      	ands	r5, r3
    ac5e:	4b70      	ldr	r3, [pc, #448]	; (ae20 <__aeabi_dsub+0x344>)
    ac60:	429e      	cmp	r6, r3
    ac62:	d036      	beq.n	acd2 <__aeabi_dsub+0x1f6>
    ac64:	0324      	lsls	r4, r4, #12
    ac66:	0576      	lsls	r6, r6, #21
    ac68:	0b24      	lsrs	r4, r4, #12
    ac6a:	0d76      	lsrs	r6, r6, #21
    ac6c:	e7db      	b.n	ac26 <__aeabi_dsub+0x14a>
    ac6e:	4663      	mov	r3, ip
    ac70:	1af3      	subs	r3, r6, r3
    ac72:	2b00      	cmp	r3, #0
    ac74:	dc00      	bgt.n	ac78 <__aeabi_dsub+0x19c>
    ac76:	e094      	b.n	ada2 <__aeabi_dsub+0x2c6>
    ac78:	4660      	mov	r0, ip
    ac7a:	2800      	cmp	r0, #0
    ac7c:	d035      	beq.n	acea <__aeabi_dsub+0x20e>
    ac7e:	4868      	ldr	r0, [pc, #416]	; (ae20 <__aeabi_dsub+0x344>)
    ac80:	4286      	cmp	r6, r0
    ac82:	d0b1      	beq.n	abe8 <__aeabi_dsub+0x10c>
    ac84:	2780      	movs	r7, #128	; 0x80
    ac86:	043f      	lsls	r7, r7, #16
    ac88:	4339      	orrs	r1, r7
    ac8a:	2b38      	cmp	r3, #56	; 0x38
    ac8c:	dc00      	bgt.n	ac90 <__aeabi_dsub+0x1b4>
    ac8e:	e0fd      	b.n	ae8c <__aeabi_dsub+0x3b0>
    ac90:	430a      	orrs	r2, r1
    ac92:	0017      	movs	r7, r2
    ac94:	2100      	movs	r1, #0
    ac96:	1e7a      	subs	r2, r7, #1
    ac98:	4197      	sbcs	r7, r2
    ac9a:	4457      	add	r7, sl
    ac9c:	4557      	cmp	r7, sl
    ac9e:	4180      	sbcs	r0, r0
    aca0:	1909      	adds	r1, r1, r4
    aca2:	4244      	negs	r4, r0
    aca4:	190c      	adds	r4, r1, r4
    aca6:	0223      	lsls	r3, r4, #8
    aca8:	d53a      	bpl.n	ad20 <__aeabi_dsub+0x244>
    acaa:	4b5d      	ldr	r3, [pc, #372]	; (ae20 <__aeabi_dsub+0x344>)
    acac:	3601      	adds	r6, #1
    acae:	429e      	cmp	r6, r3
    acb0:	d100      	bne.n	acb4 <__aeabi_dsub+0x1d8>
    acb2:	e14b      	b.n	af4c <__aeabi_dsub+0x470>
    acb4:	2201      	movs	r2, #1
    acb6:	4b5b      	ldr	r3, [pc, #364]	; (ae24 <__aeabi_dsub+0x348>)
    acb8:	401c      	ands	r4, r3
    acba:	087b      	lsrs	r3, r7, #1
    acbc:	4017      	ands	r7, r2
    acbe:	431f      	orrs	r7, r3
    acc0:	07e2      	lsls	r2, r4, #31
    acc2:	4317      	orrs	r7, r2
    acc4:	0864      	lsrs	r4, r4, #1
    acc6:	e78f      	b.n	abe8 <__aeabi_dsub+0x10c>
    acc8:	0008      	movs	r0, r1
    acca:	4310      	orrs	r0, r2
    accc:	d000      	beq.n	acd0 <__aeabi_dsub+0x1f4>
    acce:	e724      	b.n	ab1a <__aeabi_dsub+0x3e>
    acd0:	e721      	b.n	ab16 <__aeabi_dsub+0x3a>
    acd2:	0023      	movs	r3, r4
    acd4:	433b      	orrs	r3, r7
    acd6:	d100      	bne.n	acda <__aeabi_dsub+0x1fe>
    acd8:	e1b9      	b.n	b04e <__aeabi_dsub+0x572>
    acda:	2280      	movs	r2, #128	; 0x80
    acdc:	0312      	lsls	r2, r2, #12
    acde:	4314      	orrs	r4, r2
    ace0:	0324      	lsls	r4, r4, #12
    ace2:	0b24      	lsrs	r4, r4, #12
    ace4:	e79f      	b.n	ac26 <__aeabi_dsub+0x14a>
    ace6:	002e      	movs	r6, r5
    ace8:	e77e      	b.n	abe8 <__aeabi_dsub+0x10c>
    acea:	0008      	movs	r0, r1
    acec:	4310      	orrs	r0, r2
    acee:	d100      	bne.n	acf2 <__aeabi_dsub+0x216>
    acf0:	e0ca      	b.n	ae88 <__aeabi_dsub+0x3ac>
    acf2:	1e58      	subs	r0, r3, #1
    acf4:	4684      	mov	ip, r0
    acf6:	2800      	cmp	r0, #0
    acf8:	d000      	beq.n	acfc <__aeabi_dsub+0x220>
    acfa:	e0e7      	b.n	aecc <__aeabi_dsub+0x3f0>
    acfc:	4452      	add	r2, sl
    acfe:	4552      	cmp	r2, sl
    ad00:	4180      	sbcs	r0, r0
    ad02:	1864      	adds	r4, r4, r1
    ad04:	4240      	negs	r0, r0
    ad06:	1824      	adds	r4, r4, r0
    ad08:	0017      	movs	r7, r2
    ad0a:	2601      	movs	r6, #1
    ad0c:	0223      	lsls	r3, r4, #8
    ad0e:	d507      	bpl.n	ad20 <__aeabi_dsub+0x244>
    ad10:	2602      	movs	r6, #2
    ad12:	e7cf      	b.n	acb4 <__aeabi_dsub+0x1d8>
    ad14:	4664      	mov	r4, ip
    ad16:	432c      	orrs	r4, r5
    ad18:	d100      	bne.n	ad1c <__aeabi_dsub+0x240>
    ad1a:	e1b3      	b.n	b084 <__aeabi_dsub+0x5a8>
    ad1c:	002c      	movs	r4, r5
    ad1e:	4667      	mov	r7, ip
    ad20:	077b      	lsls	r3, r7, #29
    ad22:	d000      	beq.n	ad26 <__aeabi_dsub+0x24a>
    ad24:	e762      	b.n	abec <__aeabi_dsub+0x110>
    ad26:	0763      	lsls	r3, r4, #29
    ad28:	08ff      	lsrs	r7, r7, #3
    ad2a:	431f      	orrs	r7, r3
    ad2c:	2501      	movs	r5, #1
    ad2e:	4643      	mov	r3, r8
    ad30:	08e4      	lsrs	r4, r4, #3
    ad32:	401d      	ands	r5, r3
    ad34:	e793      	b.n	ac5e <__aeabi_dsub+0x182>
    ad36:	2d00      	cmp	r5, #0
    ad38:	d178      	bne.n	ae2c <__aeabi_dsub+0x350>
    ad3a:	1c75      	adds	r5, r6, #1
    ad3c:	056d      	lsls	r5, r5, #21
    ad3e:	0d6d      	lsrs	r5, r5, #21
    ad40:	2d01      	cmp	r5, #1
    ad42:	dc00      	bgt.n	ad46 <__aeabi_dsub+0x26a>
    ad44:	e0f2      	b.n	af2c <__aeabi_dsub+0x450>
    ad46:	4650      	mov	r0, sl
    ad48:	1a80      	subs	r0, r0, r2
    ad4a:	4582      	cmp	sl, r0
    ad4c:	41bf      	sbcs	r7, r7
    ad4e:	1a65      	subs	r5, r4, r1
    ad50:	427f      	negs	r7, r7
    ad52:	1bed      	subs	r5, r5, r7
    ad54:	4684      	mov	ip, r0
    ad56:	0228      	lsls	r0, r5, #8
    ad58:	d400      	bmi.n	ad5c <__aeabi_dsub+0x280>
    ad5a:	e08c      	b.n	ae76 <__aeabi_dsub+0x39a>
    ad5c:	4650      	mov	r0, sl
    ad5e:	1a17      	subs	r7, r2, r0
    ad60:	42ba      	cmp	r2, r7
    ad62:	4192      	sbcs	r2, r2
    ad64:	1b0c      	subs	r4, r1, r4
    ad66:	4255      	negs	r5, r2
    ad68:	1b65      	subs	r5, r4, r5
    ad6a:	4698      	mov	r8, r3
    ad6c:	e714      	b.n	ab98 <__aeabi_dsub+0xbc>
    ad6e:	2501      	movs	r5, #1
    ad70:	4643      	mov	r3, r8
    ad72:	2400      	movs	r4, #0
    ad74:	401d      	ands	r5, r3
    ad76:	2700      	movs	r7, #0
    ad78:	e755      	b.n	ac26 <__aeabi_dsub+0x14a>
    ad7a:	4c2a      	ldr	r4, [pc, #168]	; (ae24 <__aeabi_dsub+0x348>)
    ad7c:	1af6      	subs	r6, r6, r3
    ad7e:	402c      	ands	r4, r5
    ad80:	e732      	b.n	abe8 <__aeabi_dsub+0x10c>
    ad82:	003d      	movs	r5, r7
    ad84:	3828      	subs	r0, #40	; 0x28
    ad86:	4085      	lsls	r5, r0
    ad88:	2700      	movs	r7, #0
    ad8a:	e717      	b.n	abbc <__aeabi_dsub+0xe0>
    ad8c:	0038      	movs	r0, r7
    ad8e:	f000 fb65 	bl	b45c <__clzsi2>
    ad92:	3020      	adds	r0, #32
    ad94:	e706      	b.n	aba4 <__aeabi_dsub+0xc8>
    ad96:	430a      	orrs	r2, r1
    ad98:	0017      	movs	r7, r2
    ad9a:	2100      	movs	r1, #0
    ad9c:	1e7a      	subs	r2, r7, #1
    ad9e:	4197      	sbcs	r7, r2
    ada0:	e6ee      	b.n	ab80 <__aeabi_dsub+0xa4>
    ada2:	2b00      	cmp	r3, #0
    ada4:	d000      	beq.n	ada8 <__aeabi_dsub+0x2cc>
    ada6:	e0e5      	b.n	af74 <__aeabi_dsub+0x498>
    ada8:	1c73      	adds	r3, r6, #1
    adaa:	469c      	mov	ip, r3
    adac:	055b      	lsls	r3, r3, #21
    adae:	0d5b      	lsrs	r3, r3, #21
    adb0:	2b01      	cmp	r3, #1
    adb2:	dc00      	bgt.n	adb6 <__aeabi_dsub+0x2da>
    adb4:	e09f      	b.n	aef6 <__aeabi_dsub+0x41a>
    adb6:	4b1a      	ldr	r3, [pc, #104]	; (ae20 <__aeabi_dsub+0x344>)
    adb8:	459c      	cmp	ip, r3
    adba:	d100      	bne.n	adbe <__aeabi_dsub+0x2e2>
    adbc:	e0c5      	b.n	af4a <__aeabi_dsub+0x46e>
    adbe:	4452      	add	r2, sl
    adc0:	4552      	cmp	r2, sl
    adc2:	4180      	sbcs	r0, r0
    adc4:	1864      	adds	r4, r4, r1
    adc6:	4240      	negs	r0, r0
    adc8:	1824      	adds	r4, r4, r0
    adca:	07e7      	lsls	r7, r4, #31
    adcc:	0852      	lsrs	r2, r2, #1
    adce:	4317      	orrs	r7, r2
    add0:	0864      	lsrs	r4, r4, #1
    add2:	4666      	mov	r6, ip
    add4:	e708      	b.n	abe8 <__aeabi_dsub+0x10c>
    add6:	4812      	ldr	r0, [pc, #72]	; (ae20 <__aeabi_dsub+0x344>)
    add8:	4285      	cmp	r5, r0
    adda:	d100      	bne.n	adde <__aeabi_dsub+0x302>
    addc:	e085      	b.n	aeea <__aeabi_dsub+0x40e>
    adde:	001d      	movs	r5, r3
    ade0:	e6bc      	b.n	ab5c <__aeabi_dsub+0x80>
    ade2:	0029      	movs	r1, r5
    ade4:	3e1f      	subs	r6, #31
    ade6:	40f1      	lsrs	r1, r6
    ade8:	2b20      	cmp	r3, #32
    adea:	d100      	bne.n	adee <__aeabi_dsub+0x312>
    adec:	e07f      	b.n	aeee <__aeabi_dsub+0x412>
    adee:	2240      	movs	r2, #64	; 0x40
    adf0:	1ad3      	subs	r3, r2, r3
    adf2:	409d      	lsls	r5, r3
    adf4:	432f      	orrs	r7, r5
    adf6:	1e7d      	subs	r5, r7, #1
    adf8:	41af      	sbcs	r7, r5
    adfa:	2400      	movs	r4, #0
    adfc:	430f      	orrs	r7, r1
    adfe:	2600      	movs	r6, #0
    ae00:	e78e      	b.n	ad20 <__aeabi_dsub+0x244>
    ae02:	002b      	movs	r3, r5
    ae04:	000f      	movs	r7, r1
    ae06:	3b20      	subs	r3, #32
    ae08:	40df      	lsrs	r7, r3
    ae0a:	2d20      	cmp	r5, #32
    ae0c:	d071      	beq.n	aef2 <__aeabi_dsub+0x416>
    ae0e:	2340      	movs	r3, #64	; 0x40
    ae10:	1b5d      	subs	r5, r3, r5
    ae12:	40a9      	lsls	r1, r5
    ae14:	430a      	orrs	r2, r1
    ae16:	1e51      	subs	r1, r2, #1
    ae18:	418a      	sbcs	r2, r1
    ae1a:	2100      	movs	r1, #0
    ae1c:	4317      	orrs	r7, r2
    ae1e:	e6af      	b.n	ab80 <__aeabi_dsub+0xa4>
    ae20:	000007ff 	.word	0x000007ff
    ae24:	ff7fffff 	.word	0xff7fffff
    ae28:	800fffff 	.word	0x800fffff
    ae2c:	2e00      	cmp	r6, #0
    ae2e:	d03e      	beq.n	aeae <__aeabi_dsub+0x3d2>
    ae30:	4eb3      	ldr	r6, [pc, #716]	; (b100 <__aeabi_dsub+0x624>)
    ae32:	45b4      	cmp	ip, r6
    ae34:	d045      	beq.n	aec2 <__aeabi_dsub+0x3e6>
    ae36:	2680      	movs	r6, #128	; 0x80
    ae38:	0436      	lsls	r6, r6, #16
    ae3a:	426d      	negs	r5, r5
    ae3c:	4334      	orrs	r4, r6
    ae3e:	2d38      	cmp	r5, #56	; 0x38
    ae40:	dd00      	ble.n	ae44 <__aeabi_dsub+0x368>
    ae42:	e0a8      	b.n	af96 <__aeabi_dsub+0x4ba>
    ae44:	2d1f      	cmp	r5, #31
    ae46:	dd00      	ble.n	ae4a <__aeabi_dsub+0x36e>
    ae48:	e11f      	b.n	b08a <__aeabi_dsub+0x5ae>
    ae4a:	2620      	movs	r6, #32
    ae4c:	0027      	movs	r7, r4
    ae4e:	4650      	mov	r0, sl
    ae50:	1b76      	subs	r6, r6, r5
    ae52:	40b7      	lsls	r7, r6
    ae54:	40e8      	lsrs	r0, r5
    ae56:	4307      	orrs	r7, r0
    ae58:	4650      	mov	r0, sl
    ae5a:	40b0      	lsls	r0, r6
    ae5c:	1e46      	subs	r6, r0, #1
    ae5e:	41b0      	sbcs	r0, r6
    ae60:	40ec      	lsrs	r4, r5
    ae62:	4338      	orrs	r0, r7
    ae64:	1a17      	subs	r7, r2, r0
    ae66:	42ba      	cmp	r2, r7
    ae68:	4192      	sbcs	r2, r2
    ae6a:	1b0c      	subs	r4, r1, r4
    ae6c:	4252      	negs	r2, r2
    ae6e:	1aa4      	subs	r4, r4, r2
    ae70:	4666      	mov	r6, ip
    ae72:	4698      	mov	r8, r3
    ae74:	e68b      	b.n	ab8e <__aeabi_dsub+0xb2>
    ae76:	4664      	mov	r4, ip
    ae78:	4667      	mov	r7, ip
    ae7a:	432c      	orrs	r4, r5
    ae7c:	d000      	beq.n	ae80 <__aeabi_dsub+0x3a4>
    ae7e:	e68b      	b.n	ab98 <__aeabi_dsub+0xbc>
    ae80:	2500      	movs	r5, #0
    ae82:	2600      	movs	r6, #0
    ae84:	2700      	movs	r7, #0
    ae86:	e6ea      	b.n	ac5e <__aeabi_dsub+0x182>
    ae88:	001e      	movs	r6, r3
    ae8a:	e6ad      	b.n	abe8 <__aeabi_dsub+0x10c>
    ae8c:	2b1f      	cmp	r3, #31
    ae8e:	dc60      	bgt.n	af52 <__aeabi_dsub+0x476>
    ae90:	2720      	movs	r7, #32
    ae92:	1af8      	subs	r0, r7, r3
    ae94:	000f      	movs	r7, r1
    ae96:	4684      	mov	ip, r0
    ae98:	4087      	lsls	r7, r0
    ae9a:	0010      	movs	r0, r2
    ae9c:	40d8      	lsrs	r0, r3
    ae9e:	4307      	orrs	r7, r0
    aea0:	4660      	mov	r0, ip
    aea2:	4082      	lsls	r2, r0
    aea4:	1e50      	subs	r0, r2, #1
    aea6:	4182      	sbcs	r2, r0
    aea8:	40d9      	lsrs	r1, r3
    aeaa:	4317      	orrs	r7, r2
    aeac:	e6f5      	b.n	ac9a <__aeabi_dsub+0x1be>
    aeae:	0026      	movs	r6, r4
    aeb0:	4650      	mov	r0, sl
    aeb2:	4306      	orrs	r6, r0
    aeb4:	d005      	beq.n	aec2 <__aeabi_dsub+0x3e6>
    aeb6:	43ed      	mvns	r5, r5
    aeb8:	2d00      	cmp	r5, #0
    aeba:	d0d3      	beq.n	ae64 <__aeabi_dsub+0x388>
    aebc:	4e90      	ldr	r6, [pc, #576]	; (b100 <__aeabi_dsub+0x624>)
    aebe:	45b4      	cmp	ip, r6
    aec0:	d1bd      	bne.n	ae3e <__aeabi_dsub+0x362>
    aec2:	000c      	movs	r4, r1
    aec4:	0017      	movs	r7, r2
    aec6:	4666      	mov	r6, ip
    aec8:	4698      	mov	r8, r3
    aeca:	e68d      	b.n	abe8 <__aeabi_dsub+0x10c>
    aecc:	488c      	ldr	r0, [pc, #560]	; (b100 <__aeabi_dsub+0x624>)
    aece:	4283      	cmp	r3, r0
    aed0:	d00b      	beq.n	aeea <__aeabi_dsub+0x40e>
    aed2:	4663      	mov	r3, ip
    aed4:	e6d9      	b.n	ac8a <__aeabi_dsub+0x1ae>
    aed6:	2d00      	cmp	r5, #0
    aed8:	d000      	beq.n	aedc <__aeabi_dsub+0x400>
    aeda:	e096      	b.n	b00a <__aeabi_dsub+0x52e>
    aedc:	0008      	movs	r0, r1
    aede:	4310      	orrs	r0, r2
    aee0:	d100      	bne.n	aee4 <__aeabi_dsub+0x408>
    aee2:	e0e2      	b.n	b0aa <__aeabi_dsub+0x5ce>
    aee4:	000c      	movs	r4, r1
    aee6:	0017      	movs	r7, r2
    aee8:	4698      	mov	r8, r3
    aeea:	4e85      	ldr	r6, [pc, #532]	; (b100 <__aeabi_dsub+0x624>)
    aeec:	e67c      	b.n	abe8 <__aeabi_dsub+0x10c>
    aeee:	2500      	movs	r5, #0
    aef0:	e780      	b.n	adf4 <__aeabi_dsub+0x318>
    aef2:	2100      	movs	r1, #0
    aef4:	e78e      	b.n	ae14 <__aeabi_dsub+0x338>
    aef6:	0023      	movs	r3, r4
    aef8:	4650      	mov	r0, sl
    aefa:	4303      	orrs	r3, r0
    aefc:	2e00      	cmp	r6, #0
    aefe:	d000      	beq.n	af02 <__aeabi_dsub+0x426>
    af00:	e0a8      	b.n	b054 <__aeabi_dsub+0x578>
    af02:	2b00      	cmp	r3, #0
    af04:	d100      	bne.n	af08 <__aeabi_dsub+0x42c>
    af06:	e0de      	b.n	b0c6 <__aeabi_dsub+0x5ea>
    af08:	000b      	movs	r3, r1
    af0a:	4313      	orrs	r3, r2
    af0c:	d100      	bne.n	af10 <__aeabi_dsub+0x434>
    af0e:	e66b      	b.n	abe8 <__aeabi_dsub+0x10c>
    af10:	4452      	add	r2, sl
    af12:	4552      	cmp	r2, sl
    af14:	4180      	sbcs	r0, r0
    af16:	1864      	adds	r4, r4, r1
    af18:	4240      	negs	r0, r0
    af1a:	1824      	adds	r4, r4, r0
    af1c:	0017      	movs	r7, r2
    af1e:	0223      	lsls	r3, r4, #8
    af20:	d400      	bmi.n	af24 <__aeabi_dsub+0x448>
    af22:	e6fd      	b.n	ad20 <__aeabi_dsub+0x244>
    af24:	4b77      	ldr	r3, [pc, #476]	; (b104 <__aeabi_dsub+0x628>)
    af26:	4666      	mov	r6, ip
    af28:	401c      	ands	r4, r3
    af2a:	e65d      	b.n	abe8 <__aeabi_dsub+0x10c>
    af2c:	0025      	movs	r5, r4
    af2e:	4650      	mov	r0, sl
    af30:	4305      	orrs	r5, r0
    af32:	2e00      	cmp	r6, #0
    af34:	d1cf      	bne.n	aed6 <__aeabi_dsub+0x3fa>
    af36:	2d00      	cmp	r5, #0
    af38:	d14f      	bne.n	afda <__aeabi_dsub+0x4fe>
    af3a:	000c      	movs	r4, r1
    af3c:	4314      	orrs	r4, r2
    af3e:	d100      	bne.n	af42 <__aeabi_dsub+0x466>
    af40:	e0a0      	b.n	b084 <__aeabi_dsub+0x5a8>
    af42:	000c      	movs	r4, r1
    af44:	0017      	movs	r7, r2
    af46:	4698      	mov	r8, r3
    af48:	e64e      	b.n	abe8 <__aeabi_dsub+0x10c>
    af4a:	4666      	mov	r6, ip
    af4c:	2400      	movs	r4, #0
    af4e:	2700      	movs	r7, #0
    af50:	e685      	b.n	ac5e <__aeabi_dsub+0x182>
    af52:	001f      	movs	r7, r3
    af54:	0008      	movs	r0, r1
    af56:	3f20      	subs	r7, #32
    af58:	40f8      	lsrs	r0, r7
    af5a:	0007      	movs	r7, r0
    af5c:	2b20      	cmp	r3, #32
    af5e:	d100      	bne.n	af62 <__aeabi_dsub+0x486>
    af60:	e08e      	b.n	b080 <__aeabi_dsub+0x5a4>
    af62:	2040      	movs	r0, #64	; 0x40
    af64:	1ac3      	subs	r3, r0, r3
    af66:	4099      	lsls	r1, r3
    af68:	430a      	orrs	r2, r1
    af6a:	1e51      	subs	r1, r2, #1
    af6c:	418a      	sbcs	r2, r1
    af6e:	2100      	movs	r1, #0
    af70:	4317      	orrs	r7, r2
    af72:	e692      	b.n	ac9a <__aeabi_dsub+0x1be>
    af74:	2e00      	cmp	r6, #0
    af76:	d114      	bne.n	afa2 <__aeabi_dsub+0x4c6>
    af78:	0026      	movs	r6, r4
    af7a:	4650      	mov	r0, sl
    af7c:	4306      	orrs	r6, r0
    af7e:	d062      	beq.n	b046 <__aeabi_dsub+0x56a>
    af80:	43db      	mvns	r3, r3
    af82:	2b00      	cmp	r3, #0
    af84:	d15c      	bne.n	b040 <__aeabi_dsub+0x564>
    af86:	1887      	adds	r7, r0, r2
    af88:	4297      	cmp	r7, r2
    af8a:	4192      	sbcs	r2, r2
    af8c:	1864      	adds	r4, r4, r1
    af8e:	4252      	negs	r2, r2
    af90:	18a4      	adds	r4, r4, r2
    af92:	4666      	mov	r6, ip
    af94:	e687      	b.n	aca6 <__aeabi_dsub+0x1ca>
    af96:	4650      	mov	r0, sl
    af98:	4320      	orrs	r0, r4
    af9a:	1e44      	subs	r4, r0, #1
    af9c:	41a0      	sbcs	r0, r4
    af9e:	2400      	movs	r4, #0
    afa0:	e760      	b.n	ae64 <__aeabi_dsub+0x388>
    afa2:	4e57      	ldr	r6, [pc, #348]	; (b100 <__aeabi_dsub+0x624>)
    afa4:	45b4      	cmp	ip, r6
    afa6:	d04e      	beq.n	b046 <__aeabi_dsub+0x56a>
    afa8:	2680      	movs	r6, #128	; 0x80
    afaa:	0436      	lsls	r6, r6, #16
    afac:	425b      	negs	r3, r3
    afae:	4334      	orrs	r4, r6
    afb0:	2b38      	cmp	r3, #56	; 0x38
    afb2:	dd00      	ble.n	afb6 <__aeabi_dsub+0x4da>
    afb4:	e07f      	b.n	b0b6 <__aeabi_dsub+0x5da>
    afb6:	2b1f      	cmp	r3, #31
    afb8:	dd00      	ble.n	afbc <__aeabi_dsub+0x4e0>
    afba:	e08b      	b.n	b0d4 <__aeabi_dsub+0x5f8>
    afbc:	2620      	movs	r6, #32
    afbe:	0027      	movs	r7, r4
    afc0:	4650      	mov	r0, sl
    afc2:	1af6      	subs	r6, r6, r3
    afc4:	40b7      	lsls	r7, r6
    afc6:	40d8      	lsrs	r0, r3
    afc8:	4307      	orrs	r7, r0
    afca:	4650      	mov	r0, sl
    afcc:	40b0      	lsls	r0, r6
    afce:	1e46      	subs	r6, r0, #1
    afd0:	41b0      	sbcs	r0, r6
    afd2:	4307      	orrs	r7, r0
    afd4:	40dc      	lsrs	r4, r3
    afd6:	18bf      	adds	r7, r7, r2
    afd8:	e7d6      	b.n	af88 <__aeabi_dsub+0x4ac>
    afda:	000d      	movs	r5, r1
    afdc:	4315      	orrs	r5, r2
    afde:	d100      	bne.n	afe2 <__aeabi_dsub+0x506>
    afe0:	e602      	b.n	abe8 <__aeabi_dsub+0x10c>
    afe2:	4650      	mov	r0, sl
    afe4:	1a80      	subs	r0, r0, r2
    afe6:	4582      	cmp	sl, r0
    afe8:	41bf      	sbcs	r7, r7
    afea:	1a65      	subs	r5, r4, r1
    afec:	427f      	negs	r7, r7
    afee:	1bed      	subs	r5, r5, r7
    aff0:	4684      	mov	ip, r0
    aff2:	0228      	lsls	r0, r5, #8
    aff4:	d400      	bmi.n	aff8 <__aeabi_dsub+0x51c>
    aff6:	e68d      	b.n	ad14 <__aeabi_dsub+0x238>
    aff8:	4650      	mov	r0, sl
    affa:	1a17      	subs	r7, r2, r0
    affc:	42ba      	cmp	r2, r7
    affe:	4192      	sbcs	r2, r2
    b000:	1b0c      	subs	r4, r1, r4
    b002:	4252      	negs	r2, r2
    b004:	1aa4      	subs	r4, r4, r2
    b006:	4698      	mov	r8, r3
    b008:	e5ee      	b.n	abe8 <__aeabi_dsub+0x10c>
    b00a:	000d      	movs	r5, r1
    b00c:	4315      	orrs	r5, r2
    b00e:	d100      	bne.n	b012 <__aeabi_dsub+0x536>
    b010:	e76b      	b.n	aeea <__aeabi_dsub+0x40e>
    b012:	4650      	mov	r0, sl
    b014:	0767      	lsls	r7, r4, #29
    b016:	08c0      	lsrs	r0, r0, #3
    b018:	4307      	orrs	r7, r0
    b01a:	2080      	movs	r0, #128	; 0x80
    b01c:	08e4      	lsrs	r4, r4, #3
    b01e:	0300      	lsls	r0, r0, #12
    b020:	4204      	tst	r4, r0
    b022:	d007      	beq.n	b034 <__aeabi_dsub+0x558>
    b024:	08cd      	lsrs	r5, r1, #3
    b026:	4205      	tst	r5, r0
    b028:	d104      	bne.n	b034 <__aeabi_dsub+0x558>
    b02a:	002c      	movs	r4, r5
    b02c:	4698      	mov	r8, r3
    b02e:	08d7      	lsrs	r7, r2, #3
    b030:	0749      	lsls	r1, r1, #29
    b032:	430f      	orrs	r7, r1
    b034:	0f7b      	lsrs	r3, r7, #29
    b036:	00e4      	lsls	r4, r4, #3
    b038:	431c      	orrs	r4, r3
    b03a:	00ff      	lsls	r7, r7, #3
    b03c:	4e30      	ldr	r6, [pc, #192]	; (b100 <__aeabi_dsub+0x624>)
    b03e:	e5d3      	b.n	abe8 <__aeabi_dsub+0x10c>
    b040:	4e2f      	ldr	r6, [pc, #188]	; (b100 <__aeabi_dsub+0x624>)
    b042:	45b4      	cmp	ip, r6
    b044:	d1b4      	bne.n	afb0 <__aeabi_dsub+0x4d4>
    b046:	000c      	movs	r4, r1
    b048:	0017      	movs	r7, r2
    b04a:	4666      	mov	r6, ip
    b04c:	e5cc      	b.n	abe8 <__aeabi_dsub+0x10c>
    b04e:	2700      	movs	r7, #0
    b050:	2400      	movs	r4, #0
    b052:	e5e8      	b.n	ac26 <__aeabi_dsub+0x14a>
    b054:	2b00      	cmp	r3, #0
    b056:	d039      	beq.n	b0cc <__aeabi_dsub+0x5f0>
    b058:	000b      	movs	r3, r1
    b05a:	4313      	orrs	r3, r2
    b05c:	d100      	bne.n	b060 <__aeabi_dsub+0x584>
    b05e:	e744      	b.n	aeea <__aeabi_dsub+0x40e>
    b060:	08c0      	lsrs	r0, r0, #3
    b062:	0767      	lsls	r7, r4, #29
    b064:	4307      	orrs	r7, r0
    b066:	2080      	movs	r0, #128	; 0x80
    b068:	08e4      	lsrs	r4, r4, #3
    b06a:	0300      	lsls	r0, r0, #12
    b06c:	4204      	tst	r4, r0
    b06e:	d0e1      	beq.n	b034 <__aeabi_dsub+0x558>
    b070:	08cb      	lsrs	r3, r1, #3
    b072:	4203      	tst	r3, r0
    b074:	d1de      	bne.n	b034 <__aeabi_dsub+0x558>
    b076:	08d7      	lsrs	r7, r2, #3
    b078:	0749      	lsls	r1, r1, #29
    b07a:	430f      	orrs	r7, r1
    b07c:	001c      	movs	r4, r3
    b07e:	e7d9      	b.n	b034 <__aeabi_dsub+0x558>
    b080:	2100      	movs	r1, #0
    b082:	e771      	b.n	af68 <__aeabi_dsub+0x48c>
    b084:	2500      	movs	r5, #0
    b086:	2700      	movs	r7, #0
    b088:	e5e9      	b.n	ac5e <__aeabi_dsub+0x182>
    b08a:	002e      	movs	r6, r5
    b08c:	0027      	movs	r7, r4
    b08e:	3e20      	subs	r6, #32
    b090:	40f7      	lsrs	r7, r6
    b092:	2d20      	cmp	r5, #32
    b094:	d02f      	beq.n	b0f6 <__aeabi_dsub+0x61a>
    b096:	2640      	movs	r6, #64	; 0x40
    b098:	1b75      	subs	r5, r6, r5
    b09a:	40ac      	lsls	r4, r5
    b09c:	4650      	mov	r0, sl
    b09e:	4320      	orrs	r0, r4
    b0a0:	1e44      	subs	r4, r0, #1
    b0a2:	41a0      	sbcs	r0, r4
    b0a4:	2400      	movs	r4, #0
    b0a6:	4338      	orrs	r0, r7
    b0a8:	e6dc      	b.n	ae64 <__aeabi_dsub+0x388>
    b0aa:	2480      	movs	r4, #128	; 0x80
    b0ac:	2500      	movs	r5, #0
    b0ae:	0324      	lsls	r4, r4, #12
    b0b0:	4e13      	ldr	r6, [pc, #76]	; (b100 <__aeabi_dsub+0x624>)
    b0b2:	2700      	movs	r7, #0
    b0b4:	e5d3      	b.n	ac5e <__aeabi_dsub+0x182>
    b0b6:	4650      	mov	r0, sl
    b0b8:	4320      	orrs	r0, r4
    b0ba:	0007      	movs	r7, r0
    b0bc:	1e78      	subs	r0, r7, #1
    b0be:	4187      	sbcs	r7, r0
    b0c0:	2400      	movs	r4, #0
    b0c2:	18bf      	adds	r7, r7, r2
    b0c4:	e760      	b.n	af88 <__aeabi_dsub+0x4ac>
    b0c6:	000c      	movs	r4, r1
    b0c8:	0017      	movs	r7, r2
    b0ca:	e58d      	b.n	abe8 <__aeabi_dsub+0x10c>
    b0cc:	000c      	movs	r4, r1
    b0ce:	0017      	movs	r7, r2
    b0d0:	4e0b      	ldr	r6, [pc, #44]	; (b100 <__aeabi_dsub+0x624>)
    b0d2:	e589      	b.n	abe8 <__aeabi_dsub+0x10c>
    b0d4:	001e      	movs	r6, r3
    b0d6:	0027      	movs	r7, r4
    b0d8:	3e20      	subs	r6, #32
    b0da:	40f7      	lsrs	r7, r6
    b0dc:	2b20      	cmp	r3, #32
    b0de:	d00c      	beq.n	b0fa <__aeabi_dsub+0x61e>
    b0e0:	2640      	movs	r6, #64	; 0x40
    b0e2:	1af3      	subs	r3, r6, r3
    b0e4:	409c      	lsls	r4, r3
    b0e6:	4650      	mov	r0, sl
    b0e8:	4320      	orrs	r0, r4
    b0ea:	1e44      	subs	r4, r0, #1
    b0ec:	41a0      	sbcs	r0, r4
    b0ee:	4307      	orrs	r7, r0
    b0f0:	2400      	movs	r4, #0
    b0f2:	18bf      	adds	r7, r7, r2
    b0f4:	e748      	b.n	af88 <__aeabi_dsub+0x4ac>
    b0f6:	2400      	movs	r4, #0
    b0f8:	e7d0      	b.n	b09c <__aeabi_dsub+0x5c0>
    b0fa:	2400      	movs	r4, #0
    b0fc:	e7f3      	b.n	b0e6 <__aeabi_dsub+0x60a>
    b0fe:	46c0      	nop			; (mov r8, r8)
    b100:	000007ff 	.word	0x000007ff
    b104:	ff7fffff 	.word	0xff7fffff

0000b108 <__aeabi_dcmpun>:
    b108:	b570      	push	{r4, r5, r6, lr}
    b10a:	4e0e      	ldr	r6, [pc, #56]	; (b144 <__aeabi_dcmpun+0x3c>)
    b10c:	030d      	lsls	r5, r1, #12
    b10e:	031c      	lsls	r4, r3, #12
    b110:	0049      	lsls	r1, r1, #1
    b112:	005b      	lsls	r3, r3, #1
    b114:	0b2d      	lsrs	r5, r5, #12
    b116:	0d49      	lsrs	r1, r1, #21
    b118:	0b24      	lsrs	r4, r4, #12
    b11a:	0d5b      	lsrs	r3, r3, #21
    b11c:	42b1      	cmp	r1, r6
    b11e:	d004      	beq.n	b12a <__aeabi_dcmpun+0x22>
    b120:	4908      	ldr	r1, [pc, #32]	; (b144 <__aeabi_dcmpun+0x3c>)
    b122:	2000      	movs	r0, #0
    b124:	428b      	cmp	r3, r1
    b126:	d008      	beq.n	b13a <__aeabi_dcmpun+0x32>
    b128:	bd70      	pop	{r4, r5, r6, pc}
    b12a:	4305      	orrs	r5, r0
    b12c:	2001      	movs	r0, #1
    b12e:	2d00      	cmp	r5, #0
    b130:	d1fa      	bne.n	b128 <__aeabi_dcmpun+0x20>
    b132:	4904      	ldr	r1, [pc, #16]	; (b144 <__aeabi_dcmpun+0x3c>)
    b134:	2000      	movs	r0, #0
    b136:	428b      	cmp	r3, r1
    b138:	d1f6      	bne.n	b128 <__aeabi_dcmpun+0x20>
    b13a:	4314      	orrs	r4, r2
    b13c:	0020      	movs	r0, r4
    b13e:	1e44      	subs	r4, r0, #1
    b140:	41a0      	sbcs	r0, r4
    b142:	e7f1      	b.n	b128 <__aeabi_dcmpun+0x20>
    b144:	000007ff 	.word	0x000007ff

0000b148 <__aeabi_d2iz>:
    b148:	b530      	push	{r4, r5, lr}
    b14a:	4d13      	ldr	r5, [pc, #76]	; (b198 <__aeabi_d2iz+0x50>)
    b14c:	030a      	lsls	r2, r1, #12
    b14e:	004b      	lsls	r3, r1, #1
    b150:	0b12      	lsrs	r2, r2, #12
    b152:	0d5b      	lsrs	r3, r3, #21
    b154:	0fc9      	lsrs	r1, r1, #31
    b156:	2400      	movs	r4, #0
    b158:	42ab      	cmp	r3, r5
    b15a:	dd10      	ble.n	b17e <__aeabi_d2iz+0x36>
    b15c:	4c0f      	ldr	r4, [pc, #60]	; (b19c <__aeabi_d2iz+0x54>)
    b15e:	42a3      	cmp	r3, r4
    b160:	dc0f      	bgt.n	b182 <__aeabi_d2iz+0x3a>
    b162:	2480      	movs	r4, #128	; 0x80
    b164:	4d0e      	ldr	r5, [pc, #56]	; (b1a0 <__aeabi_d2iz+0x58>)
    b166:	0364      	lsls	r4, r4, #13
    b168:	4322      	orrs	r2, r4
    b16a:	1aed      	subs	r5, r5, r3
    b16c:	2d1f      	cmp	r5, #31
    b16e:	dd0b      	ble.n	b188 <__aeabi_d2iz+0x40>
    b170:	480c      	ldr	r0, [pc, #48]	; (b1a4 <__aeabi_d2iz+0x5c>)
    b172:	1ac3      	subs	r3, r0, r3
    b174:	40da      	lsrs	r2, r3
    b176:	4254      	negs	r4, r2
    b178:	2900      	cmp	r1, #0
    b17a:	d100      	bne.n	b17e <__aeabi_d2iz+0x36>
    b17c:	0014      	movs	r4, r2
    b17e:	0020      	movs	r0, r4
    b180:	bd30      	pop	{r4, r5, pc}
    b182:	4b09      	ldr	r3, [pc, #36]	; (b1a8 <__aeabi_d2iz+0x60>)
    b184:	18cc      	adds	r4, r1, r3
    b186:	e7fa      	b.n	b17e <__aeabi_d2iz+0x36>
    b188:	4c08      	ldr	r4, [pc, #32]	; (b1ac <__aeabi_d2iz+0x64>)
    b18a:	40e8      	lsrs	r0, r5
    b18c:	46a4      	mov	ip, r4
    b18e:	4463      	add	r3, ip
    b190:	409a      	lsls	r2, r3
    b192:	4302      	orrs	r2, r0
    b194:	e7ef      	b.n	b176 <__aeabi_d2iz+0x2e>
    b196:	46c0      	nop			; (mov r8, r8)
    b198:	000003fe 	.word	0x000003fe
    b19c:	0000041d 	.word	0x0000041d
    b1a0:	00000433 	.word	0x00000433
    b1a4:	00000413 	.word	0x00000413
    b1a8:	7fffffff 	.word	0x7fffffff
    b1ac:	fffffbed 	.word	0xfffffbed

0000b1b0 <__aeabi_i2d>:
    b1b0:	b570      	push	{r4, r5, r6, lr}
    b1b2:	2800      	cmp	r0, #0
    b1b4:	d030      	beq.n	b218 <__aeabi_i2d+0x68>
    b1b6:	17c3      	asrs	r3, r0, #31
    b1b8:	18c4      	adds	r4, r0, r3
    b1ba:	405c      	eors	r4, r3
    b1bc:	0fc5      	lsrs	r5, r0, #31
    b1be:	0020      	movs	r0, r4
    b1c0:	f000 f94c 	bl	b45c <__clzsi2>
    b1c4:	4b17      	ldr	r3, [pc, #92]	; (b224 <__aeabi_i2d+0x74>)
    b1c6:	4a18      	ldr	r2, [pc, #96]	; (b228 <__aeabi_i2d+0x78>)
    b1c8:	1a1b      	subs	r3, r3, r0
    b1ca:	1ad2      	subs	r2, r2, r3
    b1cc:	2a1f      	cmp	r2, #31
    b1ce:	dd18      	ble.n	b202 <__aeabi_i2d+0x52>
    b1d0:	4a16      	ldr	r2, [pc, #88]	; (b22c <__aeabi_i2d+0x7c>)
    b1d2:	1ad2      	subs	r2, r2, r3
    b1d4:	4094      	lsls	r4, r2
    b1d6:	2200      	movs	r2, #0
    b1d8:	0324      	lsls	r4, r4, #12
    b1da:	055b      	lsls	r3, r3, #21
    b1dc:	0b24      	lsrs	r4, r4, #12
    b1de:	0d5b      	lsrs	r3, r3, #21
    b1e0:	2100      	movs	r1, #0
    b1e2:	0010      	movs	r0, r2
    b1e4:	0324      	lsls	r4, r4, #12
    b1e6:	0d0a      	lsrs	r2, r1, #20
    b1e8:	0b24      	lsrs	r4, r4, #12
    b1ea:	0512      	lsls	r2, r2, #20
    b1ec:	4322      	orrs	r2, r4
    b1ee:	4c10      	ldr	r4, [pc, #64]	; (b230 <__aeabi_i2d+0x80>)
    b1f0:	051b      	lsls	r3, r3, #20
    b1f2:	4022      	ands	r2, r4
    b1f4:	4313      	orrs	r3, r2
    b1f6:	005b      	lsls	r3, r3, #1
    b1f8:	07ed      	lsls	r5, r5, #31
    b1fa:	085b      	lsrs	r3, r3, #1
    b1fc:	432b      	orrs	r3, r5
    b1fe:	0019      	movs	r1, r3
    b200:	bd70      	pop	{r4, r5, r6, pc}
    b202:	0021      	movs	r1, r4
    b204:	4091      	lsls	r1, r2
    b206:	000a      	movs	r2, r1
    b208:	210b      	movs	r1, #11
    b20a:	1a08      	subs	r0, r1, r0
    b20c:	40c4      	lsrs	r4, r0
    b20e:	055b      	lsls	r3, r3, #21
    b210:	0324      	lsls	r4, r4, #12
    b212:	0b24      	lsrs	r4, r4, #12
    b214:	0d5b      	lsrs	r3, r3, #21
    b216:	e7e3      	b.n	b1e0 <__aeabi_i2d+0x30>
    b218:	2500      	movs	r5, #0
    b21a:	2300      	movs	r3, #0
    b21c:	2400      	movs	r4, #0
    b21e:	2200      	movs	r2, #0
    b220:	e7de      	b.n	b1e0 <__aeabi_i2d+0x30>
    b222:	46c0      	nop			; (mov r8, r8)
    b224:	0000041e 	.word	0x0000041e
    b228:	00000433 	.word	0x00000433
    b22c:	00000413 	.word	0x00000413
    b230:	800fffff 	.word	0x800fffff

0000b234 <__aeabi_ui2d>:
    b234:	b510      	push	{r4, lr}
    b236:	1e04      	subs	r4, r0, #0
    b238:	d028      	beq.n	b28c <__aeabi_ui2d+0x58>
    b23a:	f000 f90f 	bl	b45c <__clzsi2>
    b23e:	4b15      	ldr	r3, [pc, #84]	; (b294 <__aeabi_ui2d+0x60>)
    b240:	4a15      	ldr	r2, [pc, #84]	; (b298 <__aeabi_ui2d+0x64>)
    b242:	1a1b      	subs	r3, r3, r0
    b244:	1ad2      	subs	r2, r2, r3
    b246:	2a1f      	cmp	r2, #31
    b248:	dd15      	ble.n	b276 <__aeabi_ui2d+0x42>
    b24a:	4a14      	ldr	r2, [pc, #80]	; (b29c <__aeabi_ui2d+0x68>)
    b24c:	1ad2      	subs	r2, r2, r3
    b24e:	4094      	lsls	r4, r2
    b250:	2200      	movs	r2, #0
    b252:	0324      	lsls	r4, r4, #12
    b254:	055b      	lsls	r3, r3, #21
    b256:	0b24      	lsrs	r4, r4, #12
    b258:	0d5b      	lsrs	r3, r3, #21
    b25a:	2100      	movs	r1, #0
    b25c:	0010      	movs	r0, r2
    b25e:	0324      	lsls	r4, r4, #12
    b260:	0d0a      	lsrs	r2, r1, #20
    b262:	0b24      	lsrs	r4, r4, #12
    b264:	0512      	lsls	r2, r2, #20
    b266:	4322      	orrs	r2, r4
    b268:	4c0d      	ldr	r4, [pc, #52]	; (b2a0 <__aeabi_ui2d+0x6c>)
    b26a:	051b      	lsls	r3, r3, #20
    b26c:	4022      	ands	r2, r4
    b26e:	4313      	orrs	r3, r2
    b270:	005b      	lsls	r3, r3, #1
    b272:	0859      	lsrs	r1, r3, #1
    b274:	bd10      	pop	{r4, pc}
    b276:	0021      	movs	r1, r4
    b278:	4091      	lsls	r1, r2
    b27a:	000a      	movs	r2, r1
    b27c:	210b      	movs	r1, #11
    b27e:	1a08      	subs	r0, r1, r0
    b280:	40c4      	lsrs	r4, r0
    b282:	055b      	lsls	r3, r3, #21
    b284:	0324      	lsls	r4, r4, #12
    b286:	0b24      	lsrs	r4, r4, #12
    b288:	0d5b      	lsrs	r3, r3, #21
    b28a:	e7e6      	b.n	b25a <__aeabi_ui2d+0x26>
    b28c:	2300      	movs	r3, #0
    b28e:	2400      	movs	r4, #0
    b290:	2200      	movs	r2, #0
    b292:	e7e2      	b.n	b25a <__aeabi_ui2d+0x26>
    b294:	0000041e 	.word	0x0000041e
    b298:	00000433 	.word	0x00000433
    b29c:	00000413 	.word	0x00000413
    b2a0:	800fffff 	.word	0x800fffff

0000b2a4 <__aeabi_f2d>:
    b2a4:	0041      	lsls	r1, r0, #1
    b2a6:	0e09      	lsrs	r1, r1, #24
    b2a8:	1c4b      	adds	r3, r1, #1
    b2aa:	b570      	push	{r4, r5, r6, lr}
    b2ac:	b2db      	uxtb	r3, r3
    b2ae:	0246      	lsls	r6, r0, #9
    b2b0:	0a75      	lsrs	r5, r6, #9
    b2b2:	0fc4      	lsrs	r4, r0, #31
    b2b4:	2b01      	cmp	r3, #1
    b2b6:	dd14      	ble.n	b2e2 <__aeabi_f2d+0x3e>
    b2b8:	23e0      	movs	r3, #224	; 0xe0
    b2ba:	009b      	lsls	r3, r3, #2
    b2bc:	076d      	lsls	r5, r5, #29
    b2be:	0b36      	lsrs	r6, r6, #12
    b2c0:	18cb      	adds	r3, r1, r3
    b2c2:	2100      	movs	r1, #0
    b2c4:	0d0a      	lsrs	r2, r1, #20
    b2c6:	0028      	movs	r0, r5
    b2c8:	0512      	lsls	r2, r2, #20
    b2ca:	4d1c      	ldr	r5, [pc, #112]	; (b33c <__aeabi_f2d+0x98>)
    b2cc:	4332      	orrs	r2, r6
    b2ce:	055b      	lsls	r3, r3, #21
    b2d0:	402a      	ands	r2, r5
    b2d2:	085b      	lsrs	r3, r3, #1
    b2d4:	4313      	orrs	r3, r2
    b2d6:	005b      	lsls	r3, r3, #1
    b2d8:	07e4      	lsls	r4, r4, #31
    b2da:	085b      	lsrs	r3, r3, #1
    b2dc:	4323      	orrs	r3, r4
    b2de:	0019      	movs	r1, r3
    b2e0:	bd70      	pop	{r4, r5, r6, pc}
    b2e2:	2900      	cmp	r1, #0
    b2e4:	d114      	bne.n	b310 <__aeabi_f2d+0x6c>
    b2e6:	2d00      	cmp	r5, #0
    b2e8:	d01e      	beq.n	b328 <__aeabi_f2d+0x84>
    b2ea:	0028      	movs	r0, r5
    b2ec:	f000 f8b6 	bl	b45c <__clzsi2>
    b2f0:	280a      	cmp	r0, #10
    b2f2:	dc1c      	bgt.n	b32e <__aeabi_f2d+0x8a>
    b2f4:	230b      	movs	r3, #11
    b2f6:	002a      	movs	r2, r5
    b2f8:	1a1b      	subs	r3, r3, r0
    b2fa:	40da      	lsrs	r2, r3
    b2fc:	0003      	movs	r3, r0
    b2fe:	3315      	adds	r3, #21
    b300:	409d      	lsls	r5, r3
    b302:	4b0f      	ldr	r3, [pc, #60]	; (b340 <__aeabi_f2d+0x9c>)
    b304:	0312      	lsls	r2, r2, #12
    b306:	1a1b      	subs	r3, r3, r0
    b308:	055b      	lsls	r3, r3, #21
    b30a:	0b16      	lsrs	r6, r2, #12
    b30c:	0d5b      	lsrs	r3, r3, #21
    b30e:	e7d8      	b.n	b2c2 <__aeabi_f2d+0x1e>
    b310:	2d00      	cmp	r5, #0
    b312:	d006      	beq.n	b322 <__aeabi_f2d+0x7e>
    b314:	0b32      	lsrs	r2, r6, #12
    b316:	2680      	movs	r6, #128	; 0x80
    b318:	0336      	lsls	r6, r6, #12
    b31a:	076d      	lsls	r5, r5, #29
    b31c:	4316      	orrs	r6, r2
    b31e:	4b09      	ldr	r3, [pc, #36]	; (b344 <__aeabi_f2d+0xa0>)
    b320:	e7cf      	b.n	b2c2 <__aeabi_f2d+0x1e>
    b322:	4b08      	ldr	r3, [pc, #32]	; (b344 <__aeabi_f2d+0xa0>)
    b324:	2600      	movs	r6, #0
    b326:	e7cc      	b.n	b2c2 <__aeabi_f2d+0x1e>
    b328:	2300      	movs	r3, #0
    b32a:	2600      	movs	r6, #0
    b32c:	e7c9      	b.n	b2c2 <__aeabi_f2d+0x1e>
    b32e:	0003      	movs	r3, r0
    b330:	002a      	movs	r2, r5
    b332:	3b0b      	subs	r3, #11
    b334:	409a      	lsls	r2, r3
    b336:	2500      	movs	r5, #0
    b338:	e7e3      	b.n	b302 <__aeabi_f2d+0x5e>
    b33a:	46c0      	nop			; (mov r8, r8)
    b33c:	800fffff 	.word	0x800fffff
    b340:	00000389 	.word	0x00000389
    b344:	000007ff 	.word	0x000007ff

0000b348 <__aeabi_d2f>:
    b348:	b5f0      	push	{r4, r5, r6, r7, lr}
    b34a:	004c      	lsls	r4, r1, #1
    b34c:	0d64      	lsrs	r4, r4, #21
    b34e:	030b      	lsls	r3, r1, #12
    b350:	1c62      	adds	r2, r4, #1
    b352:	0f45      	lsrs	r5, r0, #29
    b354:	0a5b      	lsrs	r3, r3, #9
    b356:	0552      	lsls	r2, r2, #21
    b358:	432b      	orrs	r3, r5
    b35a:	0fc9      	lsrs	r1, r1, #31
    b35c:	00c5      	lsls	r5, r0, #3
    b35e:	0d52      	lsrs	r2, r2, #21
    b360:	2a01      	cmp	r2, #1
    b362:	dd28      	ble.n	b3b6 <__aeabi_d2f+0x6e>
    b364:	4a3a      	ldr	r2, [pc, #232]	; (b450 <__aeabi_d2f+0x108>)
    b366:	18a6      	adds	r6, r4, r2
    b368:	2efe      	cmp	r6, #254	; 0xfe
    b36a:	dc1b      	bgt.n	b3a4 <__aeabi_d2f+0x5c>
    b36c:	2e00      	cmp	r6, #0
    b36e:	dd3e      	ble.n	b3ee <__aeabi_d2f+0xa6>
    b370:	0180      	lsls	r0, r0, #6
    b372:	0002      	movs	r2, r0
    b374:	1e50      	subs	r0, r2, #1
    b376:	4182      	sbcs	r2, r0
    b378:	0f6d      	lsrs	r5, r5, #29
    b37a:	432a      	orrs	r2, r5
    b37c:	00db      	lsls	r3, r3, #3
    b37e:	4313      	orrs	r3, r2
    b380:	075a      	lsls	r2, r3, #29
    b382:	d004      	beq.n	b38e <__aeabi_d2f+0x46>
    b384:	220f      	movs	r2, #15
    b386:	401a      	ands	r2, r3
    b388:	2a04      	cmp	r2, #4
    b38a:	d000      	beq.n	b38e <__aeabi_d2f+0x46>
    b38c:	3304      	adds	r3, #4
    b38e:	2280      	movs	r2, #128	; 0x80
    b390:	04d2      	lsls	r2, r2, #19
    b392:	401a      	ands	r2, r3
    b394:	d05a      	beq.n	b44c <__aeabi_d2f+0x104>
    b396:	3601      	adds	r6, #1
    b398:	2eff      	cmp	r6, #255	; 0xff
    b39a:	d003      	beq.n	b3a4 <__aeabi_d2f+0x5c>
    b39c:	019b      	lsls	r3, r3, #6
    b39e:	0a5b      	lsrs	r3, r3, #9
    b3a0:	b2f4      	uxtb	r4, r6
    b3a2:	e001      	b.n	b3a8 <__aeabi_d2f+0x60>
    b3a4:	24ff      	movs	r4, #255	; 0xff
    b3a6:	2300      	movs	r3, #0
    b3a8:	0258      	lsls	r0, r3, #9
    b3aa:	05e4      	lsls	r4, r4, #23
    b3ac:	0a40      	lsrs	r0, r0, #9
    b3ae:	07c9      	lsls	r1, r1, #31
    b3b0:	4320      	orrs	r0, r4
    b3b2:	4308      	orrs	r0, r1
    b3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3b6:	2c00      	cmp	r4, #0
    b3b8:	d007      	beq.n	b3ca <__aeabi_d2f+0x82>
    b3ba:	431d      	orrs	r5, r3
    b3bc:	d0f2      	beq.n	b3a4 <__aeabi_d2f+0x5c>
    b3be:	2080      	movs	r0, #128	; 0x80
    b3c0:	00db      	lsls	r3, r3, #3
    b3c2:	0480      	lsls	r0, r0, #18
    b3c4:	4303      	orrs	r3, r0
    b3c6:	26ff      	movs	r6, #255	; 0xff
    b3c8:	e7da      	b.n	b380 <__aeabi_d2f+0x38>
    b3ca:	432b      	orrs	r3, r5
    b3cc:	d003      	beq.n	b3d6 <__aeabi_d2f+0x8e>
    b3ce:	2305      	movs	r3, #5
    b3d0:	08db      	lsrs	r3, r3, #3
    b3d2:	2cff      	cmp	r4, #255	; 0xff
    b3d4:	d003      	beq.n	b3de <__aeabi_d2f+0x96>
    b3d6:	025b      	lsls	r3, r3, #9
    b3d8:	0a5b      	lsrs	r3, r3, #9
    b3da:	b2e4      	uxtb	r4, r4
    b3dc:	e7e4      	b.n	b3a8 <__aeabi_d2f+0x60>
    b3de:	2b00      	cmp	r3, #0
    b3e0:	d032      	beq.n	b448 <__aeabi_d2f+0x100>
    b3e2:	2080      	movs	r0, #128	; 0x80
    b3e4:	03c0      	lsls	r0, r0, #15
    b3e6:	4303      	orrs	r3, r0
    b3e8:	025b      	lsls	r3, r3, #9
    b3ea:	0a5b      	lsrs	r3, r3, #9
    b3ec:	e7dc      	b.n	b3a8 <__aeabi_d2f+0x60>
    b3ee:	0032      	movs	r2, r6
    b3f0:	3217      	adds	r2, #23
    b3f2:	db14      	blt.n	b41e <__aeabi_d2f+0xd6>
    b3f4:	2280      	movs	r2, #128	; 0x80
    b3f6:	271e      	movs	r7, #30
    b3f8:	0412      	lsls	r2, r2, #16
    b3fa:	4313      	orrs	r3, r2
    b3fc:	1bbf      	subs	r7, r7, r6
    b3fe:	2f1f      	cmp	r7, #31
    b400:	dc0f      	bgt.n	b422 <__aeabi_d2f+0xda>
    b402:	4a14      	ldr	r2, [pc, #80]	; (b454 <__aeabi_d2f+0x10c>)
    b404:	4694      	mov	ip, r2
    b406:	4464      	add	r4, ip
    b408:	002a      	movs	r2, r5
    b40a:	40a5      	lsls	r5, r4
    b40c:	002e      	movs	r6, r5
    b40e:	40a3      	lsls	r3, r4
    b410:	1e75      	subs	r5, r6, #1
    b412:	41ae      	sbcs	r6, r5
    b414:	40fa      	lsrs	r2, r7
    b416:	4333      	orrs	r3, r6
    b418:	4313      	orrs	r3, r2
    b41a:	2600      	movs	r6, #0
    b41c:	e7b0      	b.n	b380 <__aeabi_d2f+0x38>
    b41e:	2400      	movs	r4, #0
    b420:	e7d5      	b.n	b3ce <__aeabi_d2f+0x86>
    b422:	2202      	movs	r2, #2
    b424:	4252      	negs	r2, r2
    b426:	1b96      	subs	r6, r2, r6
    b428:	001a      	movs	r2, r3
    b42a:	40f2      	lsrs	r2, r6
    b42c:	2f20      	cmp	r7, #32
    b42e:	d009      	beq.n	b444 <__aeabi_d2f+0xfc>
    b430:	4809      	ldr	r0, [pc, #36]	; (b458 <__aeabi_d2f+0x110>)
    b432:	4684      	mov	ip, r0
    b434:	4464      	add	r4, ip
    b436:	40a3      	lsls	r3, r4
    b438:	432b      	orrs	r3, r5
    b43a:	1e5d      	subs	r5, r3, #1
    b43c:	41ab      	sbcs	r3, r5
    b43e:	2600      	movs	r6, #0
    b440:	4313      	orrs	r3, r2
    b442:	e79d      	b.n	b380 <__aeabi_d2f+0x38>
    b444:	2300      	movs	r3, #0
    b446:	e7f7      	b.n	b438 <__aeabi_d2f+0xf0>
    b448:	2300      	movs	r3, #0
    b44a:	e7ad      	b.n	b3a8 <__aeabi_d2f+0x60>
    b44c:	0034      	movs	r4, r6
    b44e:	e7bf      	b.n	b3d0 <__aeabi_d2f+0x88>
    b450:	fffffc80 	.word	0xfffffc80
    b454:	fffffc82 	.word	0xfffffc82
    b458:	fffffca2 	.word	0xfffffca2

0000b45c <__clzsi2>:
    b45c:	211c      	movs	r1, #28
    b45e:	2301      	movs	r3, #1
    b460:	041b      	lsls	r3, r3, #16
    b462:	4298      	cmp	r0, r3
    b464:	d301      	bcc.n	b46a <__clzsi2+0xe>
    b466:	0c00      	lsrs	r0, r0, #16
    b468:	3910      	subs	r1, #16
    b46a:	0a1b      	lsrs	r3, r3, #8
    b46c:	4298      	cmp	r0, r3
    b46e:	d301      	bcc.n	b474 <__clzsi2+0x18>
    b470:	0a00      	lsrs	r0, r0, #8
    b472:	3908      	subs	r1, #8
    b474:	091b      	lsrs	r3, r3, #4
    b476:	4298      	cmp	r0, r3
    b478:	d301      	bcc.n	b47e <__clzsi2+0x22>
    b47a:	0900      	lsrs	r0, r0, #4
    b47c:	3904      	subs	r1, #4
    b47e:	a202      	add	r2, pc, #8	; (adr r2, b488 <__clzsi2+0x2c>)
    b480:	5c10      	ldrb	r0, [r2, r0]
    b482:	1840      	adds	r0, r0, r1
    b484:	4770      	bx	lr
    b486:	46c0      	nop			; (mov r8, r8)
    b488:	02020304 	.word	0x02020304
    b48c:	01010101 	.word	0x01010101
	...

0000b498 <__assert_func>:
    b498:	b530      	push	{r4, r5, lr}
    b49a:	001c      	movs	r4, r3
    b49c:	4b09      	ldr	r3, [pc, #36]	; (b4c4 <__assert_func+0x2c>)
    b49e:	0005      	movs	r5, r0
    b4a0:	681b      	ldr	r3, [r3, #0]
    b4a2:	b085      	sub	sp, #20
    b4a4:	68d8      	ldr	r0, [r3, #12]
    b4a6:	4b08      	ldr	r3, [pc, #32]	; (b4c8 <__assert_func+0x30>)
    b4a8:	2a00      	cmp	r2, #0
    b4aa:	d101      	bne.n	b4b0 <__assert_func+0x18>
    b4ac:	4b07      	ldr	r3, [pc, #28]	; (b4cc <__assert_func+0x34>)
    b4ae:	001a      	movs	r2, r3
    b4b0:	9202      	str	r2, [sp, #8]
    b4b2:	9301      	str	r3, [sp, #4]
    b4b4:	9100      	str	r1, [sp, #0]
    b4b6:	002b      	movs	r3, r5
    b4b8:	0022      	movs	r2, r4
    b4ba:	4905      	ldr	r1, [pc, #20]	; (b4d0 <__assert_func+0x38>)
    b4bc:	f000 f81e 	bl	b4fc <fiprintf>
    b4c0:	f001 fea4 	bl	d20c <abort>
    b4c4:	200000b4 	.word	0x200000b4
    b4c8:	00010ef0 	.word	0x00010ef0
    b4cc:	0000fd92 	.word	0x0000fd92
    b4d0:	00010efd 	.word	0x00010efd

0000b4d4 <__cxa_atexit>:
    b4d4:	b570      	push	{r4, r5, r6, lr}
    b4d6:	4c05      	ldr	r4, [pc, #20]	; (b4ec <__cxa_atexit+0x18>)
    b4d8:	0005      	movs	r5, r0
    b4da:	0013      	movs	r3, r2
    b4dc:	1e20      	subs	r0, r4, #0
    b4de:	d004      	beq.n	b4ea <__cxa_atexit+0x16>
    b4e0:	000a      	movs	r2, r1
    b4e2:	2002      	movs	r0, #2
    b4e4:	0029      	movs	r1, r5
    b4e6:	e000      	b.n	b4ea <__cxa_atexit+0x16>
    b4e8:	bf00      	nop
    b4ea:	bd70      	pop	{r4, r5, r6, pc}
    b4ec:	00000000 	.word	0x00000000

0000b4f0 <__errno>:
    b4f0:	4b01      	ldr	r3, [pc, #4]	; (b4f8 <__errno+0x8>)
    b4f2:	6818      	ldr	r0, [r3, #0]
    b4f4:	4770      	bx	lr
    b4f6:	46c0      	nop			; (mov r8, r8)
    b4f8:	200000b4 	.word	0x200000b4

0000b4fc <fiprintf>:
    b4fc:	b40e      	push	{r1, r2, r3}
    b4fe:	b503      	push	{r0, r1, lr}
    b500:	0001      	movs	r1, r0
    b502:	ab03      	add	r3, sp, #12
    b504:	4804      	ldr	r0, [pc, #16]	; (b518 <fiprintf+0x1c>)
    b506:	cb04      	ldmia	r3!, {r2}
    b508:	6800      	ldr	r0, [r0, #0]
    b50a:	9301      	str	r3, [sp, #4]
    b50c:	f000 fc8a 	bl	be24 <_vfiprintf_r>
    b510:	b002      	add	sp, #8
    b512:	bc08      	pop	{r3}
    b514:	b003      	add	sp, #12
    b516:	4718      	bx	r3
    b518:	200000b4 	.word	0x200000b4

0000b51c <gmtime>:
    b51c:	4b07      	ldr	r3, [pc, #28]	; (b53c <gmtime+0x20>)
    b51e:	b570      	push	{r4, r5, r6, lr}
    b520:	681c      	ldr	r4, [r3, #0]
    b522:	0005      	movs	r5, r0
    b524:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b526:	2b00      	cmp	r3, #0
    b528:	d103      	bne.n	b532 <gmtime+0x16>
    b52a:	2024      	movs	r0, #36	; 0x24
    b52c:	f000 f8fc 	bl	b728 <malloc>
    b530:	63e0      	str	r0, [r4, #60]	; 0x3c
    b532:	0028      	movs	r0, r5
    b534:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    b536:	f000 f803 	bl	b540 <gmtime_r>
    b53a:	bd70      	pop	{r4, r5, r6, pc}
    b53c:	200000b4 	.word	0x200000b4

0000b540 <gmtime_r>:
    b540:	b5f0      	push	{r4, r5, r6, r7, lr}
    b542:	6805      	ldr	r5, [r0, #0]
    b544:	b085      	sub	sp, #20
    b546:	000c      	movs	r4, r1
    b548:	0028      	movs	r0, r5
    b54a:	4952      	ldr	r1, [pc, #328]	; (b694 <gmtime_r+0x154>)
    b54c:	f7fd f85c 	bl	8608 <__divsi3>
    b550:	4950      	ldr	r1, [pc, #320]	; (b694 <gmtime_r+0x154>)
    b552:	0006      	movs	r6, r0
    b554:	0028      	movs	r0, r5
    b556:	f7fd f93d 	bl	87d4 <__aeabi_idivmod>
    b55a:	1e0f      	subs	r7, r1, #0
    b55c:	da00      	bge.n	b560 <gmtime_r+0x20>
    b55e:	e080      	b.n	b662 <gmtime_r+0x122>
    b560:	4b4d      	ldr	r3, [pc, #308]	; (b698 <gmtime_r+0x158>)
    b562:	21e1      	movs	r1, #225	; 0xe1
    b564:	0038      	movs	r0, r7
    b566:	0109      	lsls	r1, r1, #4
    b568:	18f5      	adds	r5, r6, r3
    b56a:	f7fd f84d 	bl	8608 <__divsi3>
    b56e:	21e1      	movs	r1, #225	; 0xe1
    b570:	60a0      	str	r0, [r4, #8]
    b572:	0109      	lsls	r1, r1, #4
    b574:	0038      	movs	r0, r7
    b576:	f7fd f92d 	bl	87d4 <__aeabi_idivmod>
    b57a:	000e      	movs	r6, r1
    b57c:	213c      	movs	r1, #60	; 0x3c
    b57e:	0030      	movs	r0, r6
    b580:	f7fd f842 	bl	8608 <__divsi3>
    b584:	213c      	movs	r1, #60	; 0x3c
    b586:	6060      	str	r0, [r4, #4]
    b588:	0030      	movs	r0, r6
    b58a:	f7fd f923 	bl	87d4 <__aeabi_idivmod>
    b58e:	1ce8      	adds	r0, r5, #3
    b590:	6021      	str	r1, [r4, #0]
    b592:	2107      	movs	r1, #7
    b594:	f7fd f91e 	bl	87d4 <__aeabi_idivmod>
    b598:	0028      	movs	r0, r5
    b59a:	61a1      	str	r1, [r4, #24]
    b59c:	493f      	ldr	r1, [pc, #252]	; (b69c <gmtime_r+0x15c>)
    b59e:	f7fd f833 	bl	8608 <__divsi3>
    b5a2:	4e3f      	ldr	r6, [pc, #252]	; (b6a0 <gmtime_r+0x160>)
    b5a4:	493f      	ldr	r1, [pc, #252]	; (b6a4 <gmtime_r+0x164>)
    b5a6:	4346      	muls	r6, r0
    b5a8:	1976      	adds	r6, r6, r5
    b5aa:	0007      	movs	r7, r0
    b5ac:	0030      	movs	r0, r6
    b5ae:	f7fc ffa1 	bl	84f4 <__udivsi3>
    b5b2:	493d      	ldr	r1, [pc, #244]	; (b6a8 <gmtime_r+0x168>)
    b5b4:	1985      	adds	r5, r0, r6
    b5b6:	0030      	movs	r0, r6
    b5b8:	f7fc ff9c 	bl	84f4 <__udivsi3>
    b5bc:	493b      	ldr	r1, [pc, #236]	; (b6ac <gmtime_r+0x16c>)
    b5be:	1a2d      	subs	r5, r5, r0
    b5c0:	0030      	movs	r0, r6
    b5c2:	f7fc ff97 	bl	84f4 <__udivsi3>
    b5c6:	216e      	movs	r1, #110	; 0x6e
    b5c8:	1a2d      	subs	r5, r5, r0
    b5ca:	31ff      	adds	r1, #255	; 0xff
    b5cc:	0028      	movs	r0, r5
    b5ce:	f7fc ff91 	bl	84f4 <__udivsi3>
    b5d2:	4937      	ldr	r1, [pc, #220]	; (b6b0 <gmtime_r+0x170>)
    b5d4:	9001      	str	r0, [sp, #4]
    b5d6:	0028      	movs	r0, r5
    b5d8:	f7fc ff8c 	bl	84f4 <__udivsi3>
    b5dc:	4932      	ldr	r1, [pc, #200]	; (b6a8 <gmtime_r+0x168>)
    b5de:	1986      	adds	r6, r0, r6
    b5e0:	0028      	movs	r0, r5
    b5e2:	f7fc ff87 	bl	84f4 <__udivsi3>
    b5e6:	216e      	movs	r1, #110	; 0x6e
    b5e8:	9b01      	ldr	r3, [sp, #4]
    b5ea:	31ff      	adds	r1, #255	; 0xff
    b5ec:	4359      	muls	r1, r3
    b5ee:	1a36      	subs	r6, r6, r0
    b5f0:	1a73      	subs	r3, r6, r1
    b5f2:	0018      	movs	r0, r3
    b5f4:	2605      	movs	r6, #5
    b5f6:	4370      	muls	r0, r6
    b5f8:	2199      	movs	r1, #153	; 0x99
    b5fa:	3002      	adds	r0, #2
    b5fc:	9302      	str	r3, [sp, #8]
    b5fe:	f7fc ff79 	bl	84f4 <__udivsi3>
    b602:	0005      	movs	r5, r0
    b604:	2099      	movs	r0, #153	; 0x99
    b606:	4368      	muls	r0, r5
    b608:	9b02      	ldr	r3, [sp, #8]
    b60a:	3002      	adds	r0, #2
    b60c:	3301      	adds	r3, #1
    b60e:	0031      	movs	r1, r6
    b610:	9303      	str	r3, [sp, #12]
    b612:	f7fc ff6f 	bl	84f4 <__udivsi3>
    b616:	9b03      	ldr	r3, [sp, #12]
    b618:	1a1b      	subs	r3, r3, r0
    b61a:	9303      	str	r3, [sp, #12]
    b61c:	2302      	movs	r3, #2
    b61e:	2d09      	cmp	r5, #9
    b620:	d900      	bls.n	b624 <gmtime_r+0xe4>
    b622:	3b0c      	subs	r3, #12
    b624:	195d      	adds	r5, r3, r5
    b626:	23c8      	movs	r3, #200	; 0xc8
    b628:	005b      	lsls	r3, r3, #1
    b62a:	435f      	muls	r7, r3
    b62c:	9b01      	ldr	r3, [sp, #4]
    b62e:	2601      	movs	r6, #1
    b630:	18ff      	adds	r7, r7, r3
    b632:	2300      	movs	r3, #0
    b634:	42ae      	cmp	r6, r5
    b636:	415b      	adcs	r3, r3
    b638:	18ff      	adds	r7, r7, r3
    b63a:	2332      	movs	r3, #50	; 0x32
    b63c:	9a02      	ldr	r2, [sp, #8]
    b63e:	33ff      	adds	r3, #255	; 0xff
    b640:	429a      	cmp	r2, r3
    b642:	d912      	bls.n	b66a <gmtime_r+0x12a>
    b644:	0016      	movs	r6, r2
    b646:	3e33      	subs	r6, #51	; 0x33
    b648:	3eff      	subs	r6, #255	; 0xff
    b64a:	4b1a      	ldr	r3, [pc, #104]	; (b6b4 <gmtime_r+0x174>)
    b64c:	0020      	movs	r0, r4
    b64e:	18ff      	adds	r7, r7, r3
    b650:	9b03      	ldr	r3, [sp, #12]
    b652:	61e6      	str	r6, [r4, #28]
    b654:	60e3      	str	r3, [r4, #12]
    b656:	2300      	movs	r3, #0
    b658:	6167      	str	r7, [r4, #20]
    b65a:	6125      	str	r5, [r4, #16]
    b65c:	6223      	str	r3, [r4, #32]
    b65e:	b005      	add	sp, #20
    b660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b662:	4b0c      	ldr	r3, [pc, #48]	; (b694 <gmtime_r+0x154>)
    b664:	18cf      	adds	r7, r1, r3
    b666:	4b14      	ldr	r3, [pc, #80]	; (b6b8 <gmtime_r+0x178>)
    b668:	e77b      	b.n	b562 <gmtime_r+0x22>
    b66a:	9b01      	ldr	r3, [sp, #4]
    b66c:	079b      	lsls	r3, r3, #30
    b66e:	d105      	bne.n	b67c <gmtime_r+0x13c>
    b670:	2164      	movs	r1, #100	; 0x64
    b672:	9801      	ldr	r0, [sp, #4]
    b674:	f7fc ffc4 	bl	8600 <__aeabi_uidivmod>
    b678:	2900      	cmp	r1, #0
    b67a:	d106      	bne.n	b68a <gmtime_r+0x14a>
    b67c:	21c8      	movs	r1, #200	; 0xc8
    b67e:	9801      	ldr	r0, [sp, #4]
    b680:	0049      	lsls	r1, r1, #1
    b682:	f7fc ffbd 	bl	8600 <__aeabi_uidivmod>
    b686:	424e      	negs	r6, r1
    b688:	414e      	adcs	r6, r1
    b68a:	9802      	ldr	r0, [sp, #8]
    b68c:	303b      	adds	r0, #59	; 0x3b
    b68e:	1986      	adds	r6, r0, r6
    b690:	e7db      	b.n	b64a <gmtime_r+0x10a>
    b692:	46c0      	nop			; (mov r8, r8)
    b694:	00015180 	.word	0x00015180
    b698:	000afa6c 	.word	0x000afa6c
    b69c:	00023ab1 	.word	0x00023ab1
    b6a0:	fffdc54f 	.word	0xfffdc54f
    b6a4:	00008eac 	.word	0x00008eac
    b6a8:	000005b4 	.word	0x000005b4
    b6ac:	00023ab0 	.word	0x00023ab0
    b6b0:	00008e94 	.word	0x00008e94
    b6b4:	fffff894 	.word	0xfffff894
    b6b8:	000afa6b 	.word	0x000afa6b

0000b6bc <__libc_init_array>:
    b6bc:	b570      	push	{r4, r5, r6, lr}
    b6be:	2600      	movs	r6, #0
    b6c0:	4d0c      	ldr	r5, [pc, #48]	; (b6f4 <__libc_init_array+0x38>)
    b6c2:	4c0d      	ldr	r4, [pc, #52]	; (b6f8 <__libc_init_array+0x3c>)
    b6c4:	1b64      	subs	r4, r4, r5
    b6c6:	10a4      	asrs	r4, r4, #2
    b6c8:	42a6      	cmp	r6, r4
    b6ca:	d109      	bne.n	b6e0 <__libc_init_array+0x24>
    b6cc:	2600      	movs	r6, #0
    b6ce:	f004 f8f1 	bl	f8b4 <_init>
    b6d2:	4d0a      	ldr	r5, [pc, #40]	; (b6fc <__libc_init_array+0x40>)
    b6d4:	4c0a      	ldr	r4, [pc, #40]	; (b700 <__libc_init_array+0x44>)
    b6d6:	1b64      	subs	r4, r4, r5
    b6d8:	10a4      	asrs	r4, r4, #2
    b6da:	42a6      	cmp	r6, r4
    b6dc:	d105      	bne.n	b6ea <__libc_init_array+0x2e>
    b6de:	bd70      	pop	{r4, r5, r6, pc}
    b6e0:	00b3      	lsls	r3, r6, #2
    b6e2:	58eb      	ldr	r3, [r5, r3]
    b6e4:	4798      	blx	r3
    b6e6:	3601      	adds	r6, #1
    b6e8:	e7ee      	b.n	b6c8 <__libc_init_array+0xc>
    b6ea:	00b3      	lsls	r3, r6, #2
    b6ec:	58eb      	ldr	r3, [r5, r3]
    b6ee:	4798      	blx	r3
    b6f0:	3601      	adds	r6, #1
    b6f2:	e7f2      	b.n	b6da <__libc_init_array+0x1e>
    b6f4:	200002d0 	.word	0x200002d0
    b6f8:	200002d0 	.word	0x200002d0
    b6fc:	200002d0 	.word	0x200002d0
    b700:	200002e8 	.word	0x200002e8

0000b704 <__locale_ctype_ptr_l>:
    b704:	30ec      	adds	r0, #236	; 0xec
    b706:	6800      	ldr	r0, [r0, #0]
    b708:	4770      	bx	lr
	...

0000b70c <__locale_ctype_ptr>:
    b70c:	4b04      	ldr	r3, [pc, #16]	; (b720 <__locale_ctype_ptr+0x14>)
    b70e:	681b      	ldr	r3, [r3, #0]
    b710:	6a1b      	ldr	r3, [r3, #32]
    b712:	2b00      	cmp	r3, #0
    b714:	d100      	bne.n	b718 <__locale_ctype_ptr+0xc>
    b716:	4b03      	ldr	r3, [pc, #12]	; (b724 <__locale_ctype_ptr+0x18>)
    b718:	33ec      	adds	r3, #236	; 0xec
    b71a:	6818      	ldr	r0, [r3, #0]
    b71c:	4770      	bx	lr
    b71e:	46c0      	nop			; (mov r8, r8)
    b720:	200000b4 	.word	0x200000b4
    b724:	20000118 	.word	0x20000118

0000b728 <malloc>:
    b728:	b510      	push	{r4, lr}
    b72a:	4b03      	ldr	r3, [pc, #12]	; (b738 <malloc+0x10>)
    b72c:	0001      	movs	r1, r0
    b72e:	6818      	ldr	r0, [r3, #0]
    b730:	f000 faf2 	bl	bd18 <_malloc_r>
    b734:	bd10      	pop	{r4, pc}
    b736:	46c0      	nop			; (mov r8, r8)
    b738:	200000b4 	.word	0x200000b4

0000b73c <free>:
    b73c:	b510      	push	{r4, lr}
    b73e:	4b03      	ldr	r3, [pc, #12]	; (b74c <free+0x10>)
    b740:	0001      	movs	r1, r0
    b742:	6818      	ldr	r0, [r3, #0]
    b744:	f000 fa9e 	bl	bc84 <_free_r>
    b748:	bd10      	pop	{r4, pc}
    b74a:	46c0      	nop			; (mov r8, r8)
    b74c:	200000b4 	.word	0x200000b4

0000b750 <__ascii_mbtowc>:
    b750:	b082      	sub	sp, #8
    b752:	2900      	cmp	r1, #0
    b754:	d100      	bne.n	b758 <__ascii_mbtowc+0x8>
    b756:	a901      	add	r1, sp, #4
    b758:	1e10      	subs	r0, r2, #0
    b75a:	d006      	beq.n	b76a <__ascii_mbtowc+0x1a>
    b75c:	2b00      	cmp	r3, #0
    b75e:	d006      	beq.n	b76e <__ascii_mbtowc+0x1e>
    b760:	7813      	ldrb	r3, [r2, #0]
    b762:	600b      	str	r3, [r1, #0]
    b764:	7810      	ldrb	r0, [r2, #0]
    b766:	1e43      	subs	r3, r0, #1
    b768:	4198      	sbcs	r0, r3
    b76a:	b002      	add	sp, #8
    b76c:	4770      	bx	lr
    b76e:	2002      	movs	r0, #2
    b770:	4240      	negs	r0, r0
    b772:	e7fa      	b.n	b76a <__ascii_mbtowc+0x1a>

0000b774 <memcmp>:
    b774:	b530      	push	{r4, r5, lr}
    b776:	2400      	movs	r4, #0
    b778:	42a2      	cmp	r2, r4
    b77a:	d101      	bne.n	b780 <memcmp+0xc>
    b77c:	2000      	movs	r0, #0
    b77e:	e005      	b.n	b78c <memcmp+0x18>
    b780:	5d03      	ldrb	r3, [r0, r4]
    b782:	1c65      	adds	r5, r4, #1
    b784:	5d0c      	ldrb	r4, [r1, r4]
    b786:	42a3      	cmp	r3, r4
    b788:	d001      	beq.n	b78e <memcmp+0x1a>
    b78a:	1b18      	subs	r0, r3, r4
    b78c:	bd30      	pop	{r4, r5, pc}
    b78e:	002c      	movs	r4, r5
    b790:	e7f2      	b.n	b778 <memcmp+0x4>

0000b792 <memcpy>:
    b792:	2300      	movs	r3, #0
    b794:	b510      	push	{r4, lr}
    b796:	429a      	cmp	r2, r3
    b798:	d100      	bne.n	b79c <memcpy+0xa>
    b79a:	bd10      	pop	{r4, pc}
    b79c:	5ccc      	ldrb	r4, [r1, r3]
    b79e:	54c4      	strb	r4, [r0, r3]
    b7a0:	3301      	adds	r3, #1
    b7a2:	e7f8      	b.n	b796 <memcpy+0x4>

0000b7a4 <memmove>:
    b7a4:	b510      	push	{r4, lr}
    b7a6:	4288      	cmp	r0, r1
    b7a8:	d902      	bls.n	b7b0 <memmove+0xc>
    b7aa:	188b      	adds	r3, r1, r2
    b7ac:	4298      	cmp	r0, r3
    b7ae:	d308      	bcc.n	b7c2 <memmove+0x1e>
    b7b0:	2300      	movs	r3, #0
    b7b2:	429a      	cmp	r2, r3
    b7b4:	d007      	beq.n	b7c6 <memmove+0x22>
    b7b6:	5ccc      	ldrb	r4, [r1, r3]
    b7b8:	54c4      	strb	r4, [r0, r3]
    b7ba:	3301      	adds	r3, #1
    b7bc:	e7f9      	b.n	b7b2 <memmove+0xe>
    b7be:	5c8b      	ldrb	r3, [r1, r2]
    b7c0:	5483      	strb	r3, [r0, r2]
    b7c2:	3a01      	subs	r2, #1
    b7c4:	d2fb      	bcs.n	b7be <memmove+0x1a>
    b7c6:	bd10      	pop	{r4, pc}

0000b7c8 <memset>:
    b7c8:	0003      	movs	r3, r0
    b7ca:	1882      	adds	r2, r0, r2
    b7cc:	4293      	cmp	r3, r2
    b7ce:	d100      	bne.n	b7d2 <memset+0xa>
    b7d0:	4770      	bx	lr
    b7d2:	7019      	strb	r1, [r3, #0]
    b7d4:	3301      	adds	r3, #1
    b7d6:	e7f9      	b.n	b7cc <memset+0x4>

0000b7d8 <validate_structure>:
    b7d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b7da:	6801      	ldr	r1, [r0, #0]
    b7dc:	0004      	movs	r4, r0
    b7de:	293b      	cmp	r1, #59	; 0x3b
    b7e0:	d90b      	bls.n	b7fa <validate_structure+0x22>
    b7e2:	223c      	movs	r2, #60	; 0x3c
    b7e4:	4668      	mov	r0, sp
    b7e6:	f001 fd18 	bl	d21a <div>
    b7ea:	6863      	ldr	r3, [r4, #4]
    b7ec:	9900      	ldr	r1, [sp, #0]
    b7ee:	9a01      	ldr	r2, [sp, #4]
    b7f0:	185b      	adds	r3, r3, r1
    b7f2:	6063      	str	r3, [r4, #4]
    b7f4:	2a00      	cmp	r2, #0
    b7f6:	db6c      	blt.n	b8d2 <validate_structure+0xfa>
    b7f8:	6022      	str	r2, [r4, #0]
    b7fa:	6861      	ldr	r1, [r4, #4]
    b7fc:	293b      	cmp	r1, #59	; 0x3b
    b7fe:	d90b      	bls.n	b818 <validate_structure+0x40>
    b800:	223c      	movs	r2, #60	; 0x3c
    b802:	4668      	mov	r0, sp
    b804:	f001 fd09 	bl	d21a <div>
    b808:	68a3      	ldr	r3, [r4, #8]
    b80a:	9900      	ldr	r1, [sp, #0]
    b80c:	9a01      	ldr	r2, [sp, #4]
    b80e:	185b      	adds	r3, r3, r1
    b810:	60a3      	str	r3, [r4, #8]
    b812:	2a00      	cmp	r2, #0
    b814:	db62      	blt.n	b8dc <validate_structure+0x104>
    b816:	6062      	str	r2, [r4, #4]
    b818:	68a1      	ldr	r1, [r4, #8]
    b81a:	2917      	cmp	r1, #23
    b81c:	d90b      	bls.n	b836 <validate_structure+0x5e>
    b81e:	2218      	movs	r2, #24
    b820:	4668      	mov	r0, sp
    b822:	f001 fcfa 	bl	d21a <div>
    b826:	68e3      	ldr	r3, [r4, #12]
    b828:	9900      	ldr	r1, [sp, #0]
    b82a:	9a01      	ldr	r2, [sp, #4]
    b82c:	185b      	adds	r3, r3, r1
    b82e:	60e3      	str	r3, [r4, #12]
    b830:	2a00      	cmp	r2, #0
    b832:	db58      	blt.n	b8e6 <validate_structure+0x10e>
    b834:	60a2      	str	r2, [r4, #8]
    b836:	6921      	ldr	r1, [r4, #16]
    b838:	290b      	cmp	r1, #11
    b83a:	d90b      	bls.n	b854 <validate_structure+0x7c>
    b83c:	220c      	movs	r2, #12
    b83e:	4668      	mov	r0, sp
    b840:	f001 fceb 	bl	d21a <div>
    b844:	6963      	ldr	r3, [r4, #20]
    b846:	9900      	ldr	r1, [sp, #0]
    b848:	9a01      	ldr	r2, [sp, #4]
    b84a:	185b      	adds	r3, r3, r1
    b84c:	6163      	str	r3, [r4, #20]
    b84e:	2a00      	cmp	r2, #0
    b850:	db4e      	blt.n	b8f0 <validate_structure+0x118>
    b852:	6122      	str	r2, [r4, #16]
    b854:	6965      	ldr	r5, [r4, #20]
    b856:	231c      	movs	r3, #28
    b858:	07aa      	lsls	r2, r5, #30
    b85a:	d10f      	bne.n	b87c <validate_structure+0xa4>
    b85c:	2164      	movs	r1, #100	; 0x64
    b85e:	0028      	movs	r0, r5
    b860:	f7fc ffb8 	bl	87d4 <__aeabi_idivmod>
    b864:	231d      	movs	r3, #29
    b866:	2900      	cmp	r1, #0
    b868:	d108      	bne.n	b87c <validate_structure+0xa4>
    b86a:	4b3d      	ldr	r3, [pc, #244]	; (b960 <validate_structure+0x188>)
    b86c:	3191      	adds	r1, #145	; 0x91
    b86e:	18e8      	adds	r0, r5, r3
    b870:	31ff      	adds	r1, #255	; 0xff
    b872:	f7fc ffaf 	bl	87d4 <__aeabi_idivmod>
    b876:	424b      	negs	r3, r1
    b878:	414b      	adcs	r3, r1
    b87a:	331c      	adds	r3, #28
    b87c:	68e2      	ldr	r2, [r4, #12]
    b87e:	2a00      	cmp	r2, #0
    b880:	dd3b      	ble.n	b8fa <validate_structure+0x122>
    b882:	2602      	movs	r6, #2
    b884:	4f37      	ldr	r7, [pc, #220]	; (b964 <validate_structure+0x18c>)
    b886:	6921      	ldr	r1, [r4, #16]
    b888:	68e2      	ldr	r2, [r4, #12]
    b88a:	2901      	cmp	r1, #1
    b88c:	d061      	beq.n	b952 <validate_structure+0x17a>
    b88e:	0088      	lsls	r0, r1, #2
    b890:	59c0      	ldr	r0, [r0, r7]
    b892:	4282      	cmp	r2, r0
    b894:	dd35      	ble.n	b902 <validate_structure+0x12a>
    b896:	1a12      	subs	r2, r2, r0
    b898:	3101      	adds	r1, #1
    b89a:	60e2      	str	r2, [r4, #12]
    b89c:	6121      	str	r1, [r4, #16]
    b89e:	290c      	cmp	r1, #12
    b8a0:	d1f1      	bne.n	b886 <validate_structure+0xae>
    b8a2:	2300      	movs	r3, #0
    b8a4:	6965      	ldr	r5, [r4, #20]
    b8a6:	6123      	str	r3, [r4, #16]
    b8a8:	1c68      	adds	r0, r5, #1
    b8aa:	6160      	str	r0, [r4, #20]
    b8ac:	331c      	adds	r3, #28
    b8ae:	0782      	lsls	r2, r0, #30
    b8b0:	d1e9      	bne.n	b886 <validate_structure+0xae>
    b8b2:	3158      	adds	r1, #88	; 0x58
    b8b4:	f7fc ff8e 	bl	87d4 <__aeabi_idivmod>
    b8b8:	231d      	movs	r3, #29
    b8ba:	2900      	cmp	r1, #0
    b8bc:	d1e3      	bne.n	b886 <validate_structure+0xae>
    b8be:	4b2a      	ldr	r3, [pc, #168]	; (b968 <validate_structure+0x190>)
    b8c0:	3191      	adds	r1, #145	; 0x91
    b8c2:	18e8      	adds	r0, r5, r3
    b8c4:	31ff      	adds	r1, #255	; 0xff
    b8c6:	f7fc ff85 	bl	87d4 <__aeabi_idivmod>
    b8ca:	424b      	negs	r3, r1
    b8cc:	414b      	adcs	r3, r1
    b8ce:	331c      	adds	r3, #28
    b8d0:	e7d9      	b.n	b886 <validate_structure+0xae>
    b8d2:	323c      	adds	r2, #60	; 0x3c
    b8d4:	3b01      	subs	r3, #1
    b8d6:	6022      	str	r2, [r4, #0]
    b8d8:	6063      	str	r3, [r4, #4]
    b8da:	e78e      	b.n	b7fa <validate_structure+0x22>
    b8dc:	323c      	adds	r2, #60	; 0x3c
    b8de:	3b01      	subs	r3, #1
    b8e0:	6062      	str	r2, [r4, #4]
    b8e2:	60a3      	str	r3, [r4, #8]
    b8e4:	e798      	b.n	b818 <validate_structure+0x40>
    b8e6:	3218      	adds	r2, #24
    b8e8:	3b01      	subs	r3, #1
    b8ea:	60a2      	str	r2, [r4, #8]
    b8ec:	60e3      	str	r3, [r4, #12]
    b8ee:	e7a2      	b.n	b836 <validate_structure+0x5e>
    b8f0:	320c      	adds	r2, #12
    b8f2:	3b01      	subs	r3, #1
    b8f4:	6122      	str	r2, [r4, #16]
    b8f6:	6163      	str	r3, [r4, #20]
    b8f8:	e7ac      	b.n	b854 <validate_structure+0x7c>
    b8fa:	271d      	movs	r7, #29
    b8fc:	68e6      	ldr	r6, [r4, #12]
    b8fe:	2e00      	cmp	r6, #0
    b900:	dd00      	ble.n	b904 <validate_structure+0x12c>
    b902:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b904:	6922      	ldr	r2, [r4, #16]
    b906:	3a01      	subs	r2, #1
    b908:	6122      	str	r2, [r4, #16]
    b90a:	3201      	adds	r2, #1
    b90c:	d117      	bne.n	b93e <validate_structure+0x166>
    b90e:	230b      	movs	r3, #11
    b910:	2203      	movs	r2, #3
    b912:	6965      	ldr	r5, [r4, #20]
    b914:	6123      	str	r3, [r4, #16]
    b916:	1e68      	subs	r0, r5, #1
    b918:	6160      	str	r0, [r4, #20]
    b91a:	3311      	adds	r3, #17
    b91c:	4210      	tst	r0, r2
    b91e:	d10e      	bne.n	b93e <validate_structure+0x166>
    b920:	2164      	movs	r1, #100	; 0x64
    b922:	f7fc ff57 	bl	87d4 <__aeabi_idivmod>
    b926:	003b      	movs	r3, r7
    b928:	2900      	cmp	r1, #0
    b92a:	d108      	bne.n	b93e <validate_structure+0x166>
    b92c:	4b0f      	ldr	r3, [pc, #60]	; (b96c <validate_structure+0x194>)
    b92e:	3191      	adds	r1, #145	; 0x91
    b930:	18e8      	adds	r0, r5, r3
    b932:	31ff      	adds	r1, #255	; 0xff
    b934:	f7fc ff4e 	bl	87d4 <__aeabi_idivmod>
    b938:	424b      	negs	r3, r1
    b93a:	414b      	adcs	r3, r1
    b93c:	331c      	adds	r3, #28
    b93e:	6921      	ldr	r1, [r4, #16]
    b940:	001a      	movs	r2, r3
    b942:	2901      	cmp	r1, #1
    b944:	d002      	beq.n	b94c <validate_structure+0x174>
    b946:	4a07      	ldr	r2, [pc, #28]	; (b964 <validate_structure+0x18c>)
    b948:	0089      	lsls	r1, r1, #2
    b94a:	588a      	ldr	r2, [r1, r2]
    b94c:	1996      	adds	r6, r2, r6
    b94e:	60e6      	str	r6, [r4, #12]
    b950:	e7d4      	b.n	b8fc <validate_structure+0x124>
    b952:	4293      	cmp	r3, r2
    b954:	dad5      	bge.n	b902 <validate_structure+0x12a>
    b956:	1ad2      	subs	r2, r2, r3
    b958:	60e2      	str	r2, [r4, #12]
    b95a:	6126      	str	r6, [r4, #16]
    b95c:	e793      	b.n	b886 <validate_structure+0xae>
    b95e:	46c0      	nop			; (mov r8, r8)
    b960:	0000076c 	.word	0x0000076c
    b964:	00010f38 	.word	0x00010f38
    b968:	0000076d 	.word	0x0000076d
    b96c:	0000076b 	.word	0x0000076b

0000b970 <mktime>:
    b970:	b5f0      	push	{r4, r5, r6, r7, lr}
    b972:	b087      	sub	sp, #28
    b974:	0004      	movs	r4, r0
    b976:	f002 fca9 	bl	e2cc <__gettzinfo>
    b97a:	9004      	str	r0, [sp, #16]
    b97c:	0020      	movs	r0, r4
    b97e:	f7ff ff2b 	bl	b7d8 <validate_structure>
    b982:	233c      	movs	r3, #60	; 0x3c
    b984:	6862      	ldr	r2, [r4, #4]
    b986:	68a1      	ldr	r1, [r4, #8]
    b988:	4353      	muls	r3, r2
    b98a:	6822      	ldr	r2, [r4, #0]
    b98c:	6965      	ldr	r5, [r4, #20]
    b98e:	189b      	adds	r3, r3, r2
    b990:	22e1      	movs	r2, #225	; 0xe1
    b992:	0112      	lsls	r2, r2, #4
    b994:	434a      	muls	r2, r1
    b996:	189b      	adds	r3, r3, r2
    b998:	68e2      	ldr	r2, [r4, #12]
    b99a:	9303      	str	r3, [sp, #12]
    b99c:	6923      	ldr	r3, [r4, #16]
    b99e:	1e50      	subs	r0, r2, #1
    b9a0:	4ab1      	ldr	r2, [pc, #708]	; (bc68 <mktime+0x2f8>)
    b9a2:	0099      	lsls	r1, r3, #2
    b9a4:	588a      	ldr	r2, [r1, r2]
    b9a6:	1882      	adds	r2, r0, r2
    b9a8:	9201      	str	r2, [sp, #4]
    b9aa:	2b01      	cmp	r3, #1
    b9ac:	dd12      	ble.n	b9d4 <mktime+0x64>
    b9ae:	07ab      	lsls	r3, r5, #30
    b9b0:	d110      	bne.n	b9d4 <mktime+0x64>
    b9b2:	2164      	movs	r1, #100	; 0x64
    b9b4:	0028      	movs	r0, r5
    b9b6:	f7fc ff0d 	bl	87d4 <__aeabi_idivmod>
    b9ba:	2900      	cmp	r1, #0
    b9bc:	d107      	bne.n	b9ce <mktime+0x5e>
    b9be:	4bab      	ldr	r3, [pc, #684]	; (bc6c <mktime+0x2fc>)
    b9c0:	3191      	adds	r1, #145	; 0x91
    b9c2:	31ff      	adds	r1, #255	; 0xff
    b9c4:	18e8      	adds	r0, r5, r3
    b9c6:	f7fc ff05 	bl	87d4 <__aeabi_idivmod>
    b9ca:	2900      	cmp	r1, #0
    b9cc:	d102      	bne.n	b9d4 <mktime+0x64>
    b9ce:	9b01      	ldr	r3, [sp, #4]
    b9d0:	3301      	adds	r3, #1
    b9d2:	9301      	str	r3, [sp, #4]
    b9d4:	9b01      	ldr	r3, [sp, #4]
    b9d6:	4aa6      	ldr	r2, [pc, #664]	; (bc70 <mktime+0x300>)
    b9d8:	61e3      	str	r3, [r4, #28]
    b9da:	4ba6      	ldr	r3, [pc, #664]	; (bc74 <mktime+0x304>)
    b9dc:	18eb      	adds	r3, r5, r3
    b9de:	4293      	cmp	r3, r2
    b9e0:	d900      	bls.n	b9e4 <mktime+0x74>
    b9e2:	e0f8      	b.n	bbd6 <mktime+0x266>
    b9e4:	2346      	movs	r3, #70	; 0x46
    b9e6:	9302      	str	r3, [sp, #8]
    b9e8:	2d46      	cmp	r5, #70	; 0x46
    b9ea:	dc00      	bgt.n	b9ee <mktime+0x7e>
    b9ec:	e072      	b.n	bad4 <mktime+0x164>
    b9ee:	27b7      	movs	r7, #183	; 0xb7
    b9f0:	26c8      	movs	r6, #200	; 0xc8
    b9f2:	007f      	lsls	r7, r7, #1
    b9f4:	0076      	lsls	r6, r6, #1
    b9f6:	2203      	movs	r2, #3
    b9f8:	9b02      	ldr	r3, [sp, #8]
    b9fa:	4213      	tst	r3, r2
    b9fc:	d168      	bne.n	bad0 <mktime+0x160>
    b9fe:	0018      	movs	r0, r3
    ba00:	2164      	movs	r1, #100	; 0x64
    ba02:	f7fc fee7 	bl	87d4 <__aeabi_idivmod>
    ba06:	003b      	movs	r3, r7
    ba08:	2900      	cmp	r1, #0
    ba0a:	d109      	bne.n	ba20 <mktime+0xb0>
    ba0c:	9b02      	ldr	r3, [sp, #8]
    ba0e:	4a97      	ldr	r2, [pc, #604]	; (bc6c <mktime+0x2fc>)
    ba10:	0031      	movs	r1, r6
    ba12:	1898      	adds	r0, r3, r2
    ba14:	f7fc fede 	bl	87d4 <__aeabi_idivmod>
    ba18:	424b      	negs	r3, r1
    ba1a:	414b      	adcs	r3, r1
    ba1c:	336e      	adds	r3, #110	; 0x6e
    ba1e:	33ff      	adds	r3, #255	; 0xff
    ba20:	9a01      	ldr	r2, [sp, #4]
    ba22:	18d3      	adds	r3, r2, r3
    ba24:	9301      	str	r3, [sp, #4]
    ba26:	9b02      	ldr	r3, [sp, #8]
    ba28:	3301      	adds	r3, #1
    ba2a:	9302      	str	r3, [sp, #8]
    ba2c:	429d      	cmp	r5, r3
    ba2e:	d1e2      	bne.n	b9f6 <mktime+0x86>
    ba30:	9a01      	ldr	r2, [sp, #4]
    ba32:	4b91      	ldr	r3, [pc, #580]	; (bc78 <mktime+0x308>)
    ba34:	4353      	muls	r3, r2
    ba36:	9a03      	ldr	r2, [sp, #12]
    ba38:	189b      	adds	r3, r3, r2
    ba3a:	9303      	str	r3, [sp, #12]
    ba3c:	f001 f962 	bl	cd04 <__tz_lock>
    ba40:	f001 f962 	bl	cd08 <_tzset_unlocked>
    ba44:	4b8d      	ldr	r3, [pc, #564]	; (bc7c <mktime+0x30c>)
    ba46:	681d      	ldr	r5, [r3, #0]
    ba48:	2d00      	cmp	r5, #0
    ba4a:	d100      	bne.n	ba4e <mktime+0xde>
    ba4c:	e107      	b.n	bc5e <mktime+0x2ee>
    ba4e:	6963      	ldr	r3, [r4, #20]
    ba50:	4a86      	ldr	r2, [pc, #536]	; (bc6c <mktime+0x2fc>)
    ba52:	6a26      	ldr	r6, [r4, #32]
    ba54:	1898      	adds	r0, r3, r2
    ba56:	2e00      	cmp	r6, #0
    ba58:	dd00      	ble.n	ba5c <mktime+0xec>
    ba5a:	2601      	movs	r6, #1
    ba5c:	9b04      	ldr	r3, [sp, #16]
    ba5e:	685b      	ldr	r3, [r3, #4]
    ba60:	9305      	str	r3, [sp, #20]
    ba62:	4298      	cmp	r0, r3
    ba64:	d000      	beq.n	ba68 <mktime+0xf8>
    ba66:	e073      	b.n	bb50 <mktime+0x1e0>
    ba68:	9b04      	ldr	r3, [sp, #16]
    ba6a:	9d03      	ldr	r5, [sp, #12]
    ba6c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    ba6e:	69db      	ldr	r3, [r3, #28]
    ba70:	9305      	str	r3, [sp, #20]
    ba72:	1a1a      	subs	r2, r3, r0
    ba74:	9b04      	ldr	r3, [sp, #16]
    ba76:	6b99      	ldr	r1, [r3, #56]	; 0x38
    ba78:	6a1b      	ldr	r3, [r3, #32]
    ba7a:	1acf      	subs	r7, r1, r3
    ba7c:	42bd      	cmp	r5, r7
    ba7e:	db00      	blt.n	ba82 <mktime+0x112>
    ba80:	e06d      	b.n	bb5e <mktime+0x1ee>
    ba82:	9904      	ldr	r1, [sp, #16]
    ba84:	6809      	ldr	r1, [r1, #0]
    ba86:	2900      	cmp	r1, #0
    ba88:	d100      	bne.n	ba8c <mktime+0x11c>
    ba8a:	e06d      	b.n	bb68 <mktime+0x1f8>
    ba8c:	9903      	ldr	r1, [sp, #12]
    ba8e:	4291      	cmp	r1, r2
    ba90:	da00      	bge.n	ba94 <mktime+0x124>
    ba92:	e0e1      	b.n	bc58 <mktime+0x2e8>
    ba94:	2501      	movs	r5, #1
    ba96:	42b9      	cmp	r1, r7
    ba98:	db00      	blt.n	ba9c <mktime+0x12c>
    ba9a:	2500      	movs	r5, #0
    ba9c:	2e00      	cmp	r6, #0
    ba9e:	db00      	blt.n	baa2 <mktime+0x132>
    baa0:	e0a0      	b.n	bbe4 <mktime+0x274>
    baa2:	2d01      	cmp	r5, #1
    baa4:	d000      	beq.n	baa8 <mktime+0x138>
    baa6:	e0da      	b.n	bc5e <mktime+0x2ee>
    baa8:	2501      	movs	r5, #1
    baaa:	9b04      	ldr	r3, [sp, #16]
    baac:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    baae:	9b03      	ldr	r3, [sp, #12]
    bab0:	199e      	adds	r6, r3, r6
    bab2:	f001 f928 	bl	cd06 <__tz_unlock>
    bab6:	9801      	ldr	r0, [sp, #4]
    bab8:	6225      	str	r5, [r4, #32]
    baba:	3004      	adds	r0, #4
    babc:	2107      	movs	r1, #7
    babe:	f7fc fe89 	bl	87d4 <__aeabi_idivmod>
    bac2:	2900      	cmp	r1, #0
    bac4:	da00      	bge.n	bac8 <mktime+0x158>
    bac6:	e084      	b.n	bbd2 <mktime+0x262>
    bac8:	61a1      	str	r1, [r4, #24]
    baca:	0030      	movs	r0, r6
    bacc:	b007      	add	sp, #28
    bace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bad0:	236e      	movs	r3, #110	; 0x6e
    bad2:	e7a4      	b.n	ba1e <mktime+0xae>
    bad4:	429d      	cmp	r5, r3
    bad6:	d0ab      	beq.n	ba30 <mktime+0xc0>
    bad8:	2645      	movs	r6, #69	; 0x45
    bada:	2703      	movs	r7, #3
    badc:	42ae      	cmp	r6, r5
    bade:	dc17      	bgt.n	bb10 <mktime+0x1a0>
    bae0:	423d      	tst	r5, r7
    bae2:	d130      	bne.n	bb46 <mktime+0x1d6>
    bae4:	2164      	movs	r1, #100	; 0x64
    bae6:	0028      	movs	r0, r5
    bae8:	f7fc fe74 	bl	87d4 <__aeabi_idivmod>
    baec:	2900      	cmp	r1, #0
    baee:	d12c      	bne.n	bb4a <mktime+0x1da>
    baf0:	4b5e      	ldr	r3, [pc, #376]	; (bc6c <mktime+0x2fc>)
    baf2:	3191      	adds	r1, #145	; 0x91
    baf4:	18e8      	adds	r0, r5, r3
    baf6:	31ff      	adds	r1, #255	; 0xff
    baf8:	f7fc fe6c 	bl	87d4 <__aeabi_idivmod>
    bafc:	000b      	movs	r3, r1
    bafe:	4259      	negs	r1, r3
    bb00:	4159      	adcs	r1, r3
    bb02:	316e      	adds	r1, #110	; 0x6e
    bb04:	31ff      	adds	r1, #255	; 0xff
    bb06:	9b01      	ldr	r3, [sp, #4]
    bb08:	9502      	str	r5, [sp, #8]
    bb0a:	1a5b      	subs	r3, r3, r1
    bb0c:	9301      	str	r3, [sp, #4]
    bb0e:	e78f      	b.n	ba30 <mktime+0xc0>
    bb10:	423e      	tst	r6, r7
    bb12:	d116      	bne.n	bb42 <mktime+0x1d2>
    bb14:	2164      	movs	r1, #100	; 0x64
    bb16:	0030      	movs	r0, r6
    bb18:	f7fc fe5c 	bl	87d4 <__aeabi_idivmod>
    bb1c:	23b7      	movs	r3, #183	; 0xb7
    bb1e:	005b      	lsls	r3, r3, #1
    bb20:	2900      	cmp	r1, #0
    bb22:	d109      	bne.n	bb38 <mktime+0x1c8>
    bb24:	4b51      	ldr	r3, [pc, #324]	; (bc6c <mktime+0x2fc>)
    bb26:	3191      	adds	r1, #145	; 0x91
    bb28:	18f0      	adds	r0, r6, r3
    bb2a:	31ff      	adds	r1, #255	; 0xff
    bb2c:	f7fc fe52 	bl	87d4 <__aeabi_idivmod>
    bb30:	424b      	negs	r3, r1
    bb32:	414b      	adcs	r3, r1
    bb34:	336e      	adds	r3, #110	; 0x6e
    bb36:	33ff      	adds	r3, #255	; 0xff
    bb38:	9a01      	ldr	r2, [sp, #4]
    bb3a:	3e01      	subs	r6, #1
    bb3c:	1ad3      	subs	r3, r2, r3
    bb3e:	9301      	str	r3, [sp, #4]
    bb40:	e7cc      	b.n	badc <mktime+0x16c>
    bb42:	236e      	movs	r3, #110	; 0x6e
    bb44:	e7f7      	b.n	bb36 <mktime+0x1c6>
    bb46:	216e      	movs	r1, #110	; 0x6e
    bb48:	e7dc      	b.n	bb04 <mktime+0x194>
    bb4a:	21b7      	movs	r1, #183	; 0xb7
    bb4c:	0049      	lsls	r1, r1, #1
    bb4e:	e7da      	b.n	bb06 <mktime+0x196>
    bb50:	f001 f82a 	bl	cba8 <__tzcalc_limits>
    bb54:	2800      	cmp	r0, #0
    bb56:	d000      	beq.n	bb5a <mktime+0x1ea>
    bb58:	e786      	b.n	ba68 <mktime+0xf8>
    bb5a:	0035      	movs	r5, r6
    bb5c:	e7a1      	b.n	baa2 <mktime+0x132>
    bb5e:	9d03      	ldr	r5, [sp, #12]
    bb60:	1a09      	subs	r1, r1, r0
    bb62:	428d      	cmp	r5, r1
    bb64:	dbf9      	blt.n	bb5a <mktime+0x1ea>
    bb66:	e78c      	b.n	ba82 <mktime+0x112>
    bb68:	9d03      	ldr	r5, [sp, #12]
    bb6a:	4295      	cmp	r5, r2
    bb6c:	da36      	bge.n	bbdc <mktime+0x26c>
    bb6e:	9a03      	ldr	r2, [sp, #12]
    bb70:	2501      	movs	r5, #1
    bb72:	42ba      	cmp	r2, r7
    bb74:	da00      	bge.n	bb78 <mktime+0x208>
    bb76:	e791      	b.n	ba9c <mktime+0x12c>
    bb78:	000d      	movs	r5, r1
    bb7a:	e78f      	b.n	ba9c <mktime+0x12c>
    bb7c:	2701      	movs	r7, #1
    bb7e:	427f      	negs	r7, r7
    bb80:	e04b      	b.n	bc1a <mktime+0x2aa>
    bb82:	21b6      	movs	r1, #182	; 0xb6
    bb84:	0049      	lsls	r1, r1, #1
    bb86:	61e1      	str	r1, [r4, #28]
    bb88:	e78b      	b.n	baa2 <mktime+0x132>
    bb8a:	216e      	movs	r1, #110	; 0x6e
    bb8c:	e062      	b.n	bc54 <mktime+0x2e4>
    bb8e:	9a02      	ldr	r2, [sp, #8]
    bb90:	421a      	tst	r2, r3
    bb92:	d117      	bne.n	bbc4 <mktime+0x254>
    bb94:	2164      	movs	r1, #100	; 0x64
    bb96:	0010      	movs	r0, r2
    bb98:	f7fc fe1c 	bl	87d4 <__aeabi_idivmod>
    bb9c:	2900      	cmp	r1, #0
    bb9e:	d113      	bne.n	bbc8 <mktime+0x258>
    bba0:	4a32      	ldr	r2, [pc, #200]	; (bc6c <mktime+0x2fc>)
    bba2:	9b02      	ldr	r3, [sp, #8]
    bba4:	4694      	mov	ip, r2
    bba6:	3191      	adds	r1, #145	; 0x91
    bba8:	4463      	add	r3, ip
    bbaa:	0018      	movs	r0, r3
    bbac:	31ff      	adds	r1, #255	; 0xff
    bbae:	f7fc fe11 	bl	87d4 <__aeabi_idivmod>
    bbb2:	000b      	movs	r3, r1
    bbb4:	4259      	negs	r1, r3
    bbb6:	4159      	adcs	r1, r3
    bbb8:	316e      	adds	r1, #110	; 0x6e
    bbba:	31ff      	adds	r1, #255	; 0xff
    bbbc:	42b9      	cmp	r1, r7
    bbbe:	dd06      	ble.n	bbce <mktime+0x25e>
    bbc0:	61e7      	str	r7, [r4, #28]
    bbc2:	e76e      	b.n	baa2 <mktime+0x132>
    bbc4:	216e      	movs	r1, #110	; 0x6e
    bbc6:	e7f8      	b.n	bbba <mktime+0x24a>
    bbc8:	21b7      	movs	r1, #183	; 0xb7
    bbca:	0049      	lsls	r1, r1, #1
    bbcc:	e7f6      	b.n	bbbc <mktime+0x24c>
    bbce:	1a7f      	subs	r7, r7, r1
    bbd0:	e7f6      	b.n	bbc0 <mktime+0x250>
    bbd2:	3107      	adds	r1, #7
    bbd4:	e778      	b.n	bac8 <mktime+0x158>
    bbd6:	2601      	movs	r6, #1
    bbd8:	4276      	negs	r6, r6
    bbda:	e776      	b.n	baca <mktime+0x15a>
    bbdc:	2501      	movs	r5, #1
    bbde:	2e00      	cmp	r6, #0
    bbe0:	da00      	bge.n	bbe4 <mktime+0x274>
    bbe2:	e761      	b.n	baa8 <mktime+0x138>
    bbe4:	406e      	eors	r6, r5
    bbe6:	2e01      	cmp	r6, #1
    bbe8:	d000      	beq.n	bbec <mktime+0x27c>
    bbea:	e75a      	b.n	baa2 <mktime+0x132>
    bbec:	1a1b      	subs	r3, r3, r0
    bbee:	2d00      	cmp	r5, #0
    bbf0:	d100      	bne.n	bbf4 <mktime+0x284>
    bbf2:	425b      	negs	r3, r3
    bbf4:	6822      	ldr	r2, [r4, #0]
    bbf6:	0020      	movs	r0, r4
    bbf8:	18d2      	adds	r2, r2, r3
    bbfa:	6022      	str	r2, [r4, #0]
    bbfc:	9a03      	ldr	r2, [sp, #12]
    bbfe:	68e7      	ldr	r7, [r4, #12]
    bc00:	18d3      	adds	r3, r2, r3
    bc02:	9303      	str	r3, [sp, #12]
    bc04:	f7ff fde8 	bl	b7d8 <validate_structure>
    bc08:	68e3      	ldr	r3, [r4, #12]
    bc0a:	1bdf      	subs	r7, r3, r7
    bc0c:	d100      	bne.n	bc10 <mktime+0x2a0>
    bc0e:	e748      	b.n	baa2 <mktime+0x132>
    bc10:	2f01      	cmp	r7, #1
    bc12:	dcb3      	bgt.n	bb7c <mktime+0x20c>
    bc14:	1c7b      	adds	r3, r7, #1
    bc16:	da00      	bge.n	bc1a <mktime+0x2aa>
    bc18:	0037      	movs	r7, r6
    bc1a:	9b01      	ldr	r3, [sp, #4]
    bc1c:	69e2      	ldr	r2, [r4, #28]
    bc1e:	19db      	adds	r3, r3, r7
    bc20:	9301      	str	r3, [sp, #4]
    bc22:	2303      	movs	r3, #3
    bc24:	18bf      	adds	r7, r7, r2
    bc26:	d5b2      	bpl.n	bb8e <mktime+0x21e>
    bc28:	9a02      	ldr	r2, [sp, #8]
    bc2a:	1e50      	subs	r0, r2, #1
    bc2c:	4218      	tst	r0, r3
    bc2e:	d1a8      	bne.n	bb82 <mktime+0x212>
    bc30:	2164      	movs	r1, #100	; 0x64
    bc32:	f7fc fdcf 	bl	87d4 <__aeabi_idivmod>
    bc36:	2900      	cmp	r1, #0
    bc38:	d1a7      	bne.n	bb8a <mktime+0x21a>
    bc3a:	4a11      	ldr	r2, [pc, #68]	; (bc80 <mktime+0x310>)
    bc3c:	9b02      	ldr	r3, [sp, #8]
    bc3e:	4694      	mov	ip, r2
    bc40:	3191      	adds	r1, #145	; 0x91
    bc42:	4463      	add	r3, ip
    bc44:	0018      	movs	r0, r3
    bc46:	31ff      	adds	r1, #255	; 0xff
    bc48:	f7fc fdc4 	bl	87d4 <__aeabi_idivmod>
    bc4c:	000b      	movs	r3, r1
    bc4e:	4259      	negs	r1, r3
    bc50:	4159      	adcs	r1, r3
    bc52:	316d      	adds	r1, #109	; 0x6d
    bc54:	31ff      	adds	r1, #255	; 0xff
    bc56:	e796      	b.n	bb86 <mktime+0x216>
    bc58:	2500      	movs	r5, #0
    bc5a:	2e00      	cmp	r6, #0
    bc5c:	dac2      	bge.n	bbe4 <mktime+0x274>
    bc5e:	9b04      	ldr	r3, [sp, #16]
    bc60:	6a1e      	ldr	r6, [r3, #32]
    bc62:	9b03      	ldr	r3, [sp, #12]
    bc64:	199e      	adds	r6, r3, r6
    bc66:	e724      	b.n	bab2 <mktime+0x142>
    bc68:	00010f68 	.word	0x00010f68
    bc6c:	0000076c 	.word	0x0000076c
    bc70:	00004e20 	.word	0x00004e20
    bc74:	00002710 	.word	0x00002710
    bc78:	00015180 	.word	0x00015180
    bc7c:	20001e50 	.word	0x20001e50
    bc80:	0000076b 	.word	0x0000076b

0000bc84 <_free_r>:
    bc84:	b570      	push	{r4, r5, r6, lr}
    bc86:	0005      	movs	r5, r0
    bc88:	2900      	cmp	r1, #0
    bc8a:	d010      	beq.n	bcae <_free_r+0x2a>
    bc8c:	1f0c      	subs	r4, r1, #4
    bc8e:	6823      	ldr	r3, [r4, #0]
    bc90:	2b00      	cmp	r3, #0
    bc92:	da00      	bge.n	bc96 <_free_r+0x12>
    bc94:	18e4      	adds	r4, r4, r3
    bc96:	0028      	movs	r0, r5
    bc98:	f002 fb9f 	bl	e3da <__malloc_lock>
    bc9c:	4a1d      	ldr	r2, [pc, #116]	; (bd14 <_free_r+0x90>)
    bc9e:	6813      	ldr	r3, [r2, #0]
    bca0:	2b00      	cmp	r3, #0
    bca2:	d105      	bne.n	bcb0 <_free_r+0x2c>
    bca4:	6063      	str	r3, [r4, #4]
    bca6:	6014      	str	r4, [r2, #0]
    bca8:	0028      	movs	r0, r5
    bcaa:	f002 fb97 	bl	e3dc <__malloc_unlock>
    bcae:	bd70      	pop	{r4, r5, r6, pc}
    bcb0:	42a3      	cmp	r3, r4
    bcb2:	d909      	bls.n	bcc8 <_free_r+0x44>
    bcb4:	6821      	ldr	r1, [r4, #0]
    bcb6:	1860      	adds	r0, r4, r1
    bcb8:	4283      	cmp	r3, r0
    bcba:	d1f3      	bne.n	bca4 <_free_r+0x20>
    bcbc:	6818      	ldr	r0, [r3, #0]
    bcbe:	685b      	ldr	r3, [r3, #4]
    bcc0:	1841      	adds	r1, r0, r1
    bcc2:	6021      	str	r1, [r4, #0]
    bcc4:	e7ee      	b.n	bca4 <_free_r+0x20>
    bcc6:	0013      	movs	r3, r2
    bcc8:	685a      	ldr	r2, [r3, #4]
    bcca:	2a00      	cmp	r2, #0
    bccc:	d001      	beq.n	bcd2 <_free_r+0x4e>
    bcce:	42a2      	cmp	r2, r4
    bcd0:	d9f9      	bls.n	bcc6 <_free_r+0x42>
    bcd2:	6819      	ldr	r1, [r3, #0]
    bcd4:	1858      	adds	r0, r3, r1
    bcd6:	42a0      	cmp	r0, r4
    bcd8:	d10b      	bne.n	bcf2 <_free_r+0x6e>
    bcda:	6820      	ldr	r0, [r4, #0]
    bcdc:	1809      	adds	r1, r1, r0
    bcde:	1858      	adds	r0, r3, r1
    bce0:	6019      	str	r1, [r3, #0]
    bce2:	4282      	cmp	r2, r0
    bce4:	d1e0      	bne.n	bca8 <_free_r+0x24>
    bce6:	6810      	ldr	r0, [r2, #0]
    bce8:	6852      	ldr	r2, [r2, #4]
    bcea:	1841      	adds	r1, r0, r1
    bcec:	6019      	str	r1, [r3, #0]
    bcee:	605a      	str	r2, [r3, #4]
    bcf0:	e7da      	b.n	bca8 <_free_r+0x24>
    bcf2:	42a0      	cmp	r0, r4
    bcf4:	d902      	bls.n	bcfc <_free_r+0x78>
    bcf6:	230c      	movs	r3, #12
    bcf8:	602b      	str	r3, [r5, #0]
    bcfa:	e7d5      	b.n	bca8 <_free_r+0x24>
    bcfc:	6821      	ldr	r1, [r4, #0]
    bcfe:	1860      	adds	r0, r4, r1
    bd00:	4282      	cmp	r2, r0
    bd02:	d103      	bne.n	bd0c <_free_r+0x88>
    bd04:	6810      	ldr	r0, [r2, #0]
    bd06:	6852      	ldr	r2, [r2, #4]
    bd08:	1841      	adds	r1, r0, r1
    bd0a:	6021      	str	r1, [r4, #0]
    bd0c:	6062      	str	r2, [r4, #4]
    bd0e:	605c      	str	r4, [r3, #4]
    bd10:	e7ca      	b.n	bca8 <_free_r+0x24>
    bd12:	46c0      	nop			; (mov r8, r8)
    bd14:	20001e2c 	.word	0x20001e2c

0000bd18 <_malloc_r>:
    bd18:	2303      	movs	r3, #3
    bd1a:	b570      	push	{r4, r5, r6, lr}
    bd1c:	1ccd      	adds	r5, r1, #3
    bd1e:	439d      	bics	r5, r3
    bd20:	3508      	adds	r5, #8
    bd22:	0006      	movs	r6, r0
    bd24:	2d0c      	cmp	r5, #12
    bd26:	d21e      	bcs.n	bd66 <_malloc_r+0x4e>
    bd28:	250c      	movs	r5, #12
    bd2a:	42a9      	cmp	r1, r5
    bd2c:	d81d      	bhi.n	bd6a <_malloc_r+0x52>
    bd2e:	0030      	movs	r0, r6
    bd30:	f002 fb53 	bl	e3da <__malloc_lock>
    bd34:	4a25      	ldr	r2, [pc, #148]	; (bdcc <_malloc_r+0xb4>)
    bd36:	6814      	ldr	r4, [r2, #0]
    bd38:	0021      	movs	r1, r4
    bd3a:	2900      	cmp	r1, #0
    bd3c:	d119      	bne.n	bd72 <_malloc_r+0x5a>
    bd3e:	4c24      	ldr	r4, [pc, #144]	; (bdd0 <_malloc_r+0xb8>)
    bd40:	6823      	ldr	r3, [r4, #0]
    bd42:	2b00      	cmp	r3, #0
    bd44:	d103      	bne.n	bd4e <_malloc_r+0x36>
    bd46:	0030      	movs	r0, r6
    bd48:	f000 fdf8 	bl	c93c <_sbrk_r>
    bd4c:	6020      	str	r0, [r4, #0]
    bd4e:	0029      	movs	r1, r5
    bd50:	0030      	movs	r0, r6
    bd52:	f000 fdf3 	bl	c93c <_sbrk_r>
    bd56:	1c43      	adds	r3, r0, #1
    bd58:	d12c      	bne.n	bdb4 <_malloc_r+0x9c>
    bd5a:	230c      	movs	r3, #12
    bd5c:	0030      	movs	r0, r6
    bd5e:	6033      	str	r3, [r6, #0]
    bd60:	f002 fb3c 	bl	e3dc <__malloc_unlock>
    bd64:	e003      	b.n	bd6e <_malloc_r+0x56>
    bd66:	2d00      	cmp	r5, #0
    bd68:	dadf      	bge.n	bd2a <_malloc_r+0x12>
    bd6a:	230c      	movs	r3, #12
    bd6c:	6033      	str	r3, [r6, #0]
    bd6e:	2000      	movs	r0, #0
    bd70:	bd70      	pop	{r4, r5, r6, pc}
    bd72:	680b      	ldr	r3, [r1, #0]
    bd74:	1b5b      	subs	r3, r3, r5
    bd76:	d41a      	bmi.n	bdae <_malloc_r+0x96>
    bd78:	2b0b      	cmp	r3, #11
    bd7a:	d903      	bls.n	bd84 <_malloc_r+0x6c>
    bd7c:	600b      	str	r3, [r1, #0]
    bd7e:	18cc      	adds	r4, r1, r3
    bd80:	6025      	str	r5, [r4, #0]
    bd82:	e003      	b.n	bd8c <_malloc_r+0x74>
    bd84:	428c      	cmp	r4, r1
    bd86:	d10e      	bne.n	bda6 <_malloc_r+0x8e>
    bd88:	6863      	ldr	r3, [r4, #4]
    bd8a:	6013      	str	r3, [r2, #0]
    bd8c:	0030      	movs	r0, r6
    bd8e:	f002 fb25 	bl	e3dc <__malloc_unlock>
    bd92:	0020      	movs	r0, r4
    bd94:	2207      	movs	r2, #7
    bd96:	300b      	adds	r0, #11
    bd98:	1d23      	adds	r3, r4, #4
    bd9a:	4390      	bics	r0, r2
    bd9c:	1ac3      	subs	r3, r0, r3
    bd9e:	d0e7      	beq.n	bd70 <_malloc_r+0x58>
    bda0:	425a      	negs	r2, r3
    bda2:	50e2      	str	r2, [r4, r3]
    bda4:	e7e4      	b.n	bd70 <_malloc_r+0x58>
    bda6:	684b      	ldr	r3, [r1, #4]
    bda8:	6063      	str	r3, [r4, #4]
    bdaa:	000c      	movs	r4, r1
    bdac:	e7ee      	b.n	bd8c <_malloc_r+0x74>
    bdae:	000c      	movs	r4, r1
    bdb0:	6849      	ldr	r1, [r1, #4]
    bdb2:	e7c2      	b.n	bd3a <_malloc_r+0x22>
    bdb4:	2303      	movs	r3, #3
    bdb6:	1cc4      	adds	r4, r0, #3
    bdb8:	439c      	bics	r4, r3
    bdba:	42a0      	cmp	r0, r4
    bdbc:	d0e0      	beq.n	bd80 <_malloc_r+0x68>
    bdbe:	1a21      	subs	r1, r4, r0
    bdc0:	0030      	movs	r0, r6
    bdc2:	f000 fdbb 	bl	c93c <_sbrk_r>
    bdc6:	1c43      	adds	r3, r0, #1
    bdc8:	d1da      	bne.n	bd80 <_malloc_r+0x68>
    bdca:	e7c6      	b.n	bd5a <_malloc_r+0x42>
    bdcc:	20001e2c 	.word	0x20001e2c
    bdd0:	20001e30 	.word	0x20001e30

0000bdd4 <__sfputc_r>:
    bdd4:	6893      	ldr	r3, [r2, #8]
    bdd6:	b510      	push	{r4, lr}
    bdd8:	3b01      	subs	r3, #1
    bdda:	6093      	str	r3, [r2, #8]
    bddc:	2b00      	cmp	r3, #0
    bdde:	da05      	bge.n	bdec <__sfputc_r+0x18>
    bde0:	6994      	ldr	r4, [r2, #24]
    bde2:	42a3      	cmp	r3, r4
    bde4:	db08      	blt.n	bdf8 <__sfputc_r+0x24>
    bde6:	b2cb      	uxtb	r3, r1
    bde8:	2b0a      	cmp	r3, #10
    bdea:	d005      	beq.n	bdf8 <__sfputc_r+0x24>
    bdec:	6813      	ldr	r3, [r2, #0]
    bdee:	1c58      	adds	r0, r3, #1
    bdf0:	6010      	str	r0, [r2, #0]
    bdf2:	7019      	strb	r1, [r3, #0]
    bdf4:	b2c8      	uxtb	r0, r1
    bdf6:	bd10      	pop	{r4, pc}
    bdf8:	f001 f930 	bl	d05c <__swbuf_r>
    bdfc:	e7fb      	b.n	bdf6 <__sfputc_r+0x22>

0000bdfe <__sfputs_r>:
    bdfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be00:	0006      	movs	r6, r0
    be02:	000f      	movs	r7, r1
    be04:	0014      	movs	r4, r2
    be06:	18d5      	adds	r5, r2, r3
    be08:	42ac      	cmp	r4, r5
    be0a:	d101      	bne.n	be10 <__sfputs_r+0x12>
    be0c:	2000      	movs	r0, #0
    be0e:	e007      	b.n	be20 <__sfputs_r+0x22>
    be10:	7821      	ldrb	r1, [r4, #0]
    be12:	003a      	movs	r2, r7
    be14:	0030      	movs	r0, r6
    be16:	f7ff ffdd 	bl	bdd4 <__sfputc_r>
    be1a:	3401      	adds	r4, #1
    be1c:	1c43      	adds	r3, r0, #1
    be1e:	d1f3      	bne.n	be08 <__sfputs_r+0xa>
    be20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000be24 <_vfiprintf_r>:
    be24:	b5f0      	push	{r4, r5, r6, r7, lr}
    be26:	b09f      	sub	sp, #124	; 0x7c
    be28:	0006      	movs	r6, r0
    be2a:	000f      	movs	r7, r1
    be2c:	0014      	movs	r4, r2
    be2e:	9305      	str	r3, [sp, #20]
    be30:	2800      	cmp	r0, #0
    be32:	d004      	beq.n	be3e <_vfiprintf_r+0x1a>
    be34:	6983      	ldr	r3, [r0, #24]
    be36:	2b00      	cmp	r3, #0
    be38:	d101      	bne.n	be3e <_vfiprintf_r+0x1a>
    be3a:	f002 f96f 	bl	e11c <__sinit>
    be3e:	4b7f      	ldr	r3, [pc, #508]	; (c03c <_vfiprintf_r+0x218>)
    be40:	429f      	cmp	r7, r3
    be42:	d15c      	bne.n	befe <_vfiprintf_r+0xda>
    be44:	6877      	ldr	r7, [r6, #4]
    be46:	89bb      	ldrh	r3, [r7, #12]
    be48:	071b      	lsls	r3, r3, #28
    be4a:	d562      	bpl.n	bf12 <_vfiprintf_r+0xee>
    be4c:	693b      	ldr	r3, [r7, #16]
    be4e:	2b00      	cmp	r3, #0
    be50:	d05f      	beq.n	bf12 <_vfiprintf_r+0xee>
    be52:	2300      	movs	r3, #0
    be54:	ad06      	add	r5, sp, #24
    be56:	616b      	str	r3, [r5, #20]
    be58:	3320      	adds	r3, #32
    be5a:	766b      	strb	r3, [r5, #25]
    be5c:	3310      	adds	r3, #16
    be5e:	76ab      	strb	r3, [r5, #26]
    be60:	9402      	str	r4, [sp, #8]
    be62:	9c02      	ldr	r4, [sp, #8]
    be64:	7823      	ldrb	r3, [r4, #0]
    be66:	2b00      	cmp	r3, #0
    be68:	d15d      	bne.n	bf26 <_vfiprintf_r+0x102>
    be6a:	9b02      	ldr	r3, [sp, #8]
    be6c:	1ae3      	subs	r3, r4, r3
    be6e:	9304      	str	r3, [sp, #16]
    be70:	d00d      	beq.n	be8e <_vfiprintf_r+0x6a>
    be72:	9b04      	ldr	r3, [sp, #16]
    be74:	9a02      	ldr	r2, [sp, #8]
    be76:	0039      	movs	r1, r7
    be78:	0030      	movs	r0, r6
    be7a:	f7ff ffc0 	bl	bdfe <__sfputs_r>
    be7e:	1c43      	adds	r3, r0, #1
    be80:	d100      	bne.n	be84 <_vfiprintf_r+0x60>
    be82:	e0cc      	b.n	c01e <_vfiprintf_r+0x1fa>
    be84:	696a      	ldr	r2, [r5, #20]
    be86:	9b04      	ldr	r3, [sp, #16]
    be88:	4694      	mov	ip, r2
    be8a:	4463      	add	r3, ip
    be8c:	616b      	str	r3, [r5, #20]
    be8e:	7823      	ldrb	r3, [r4, #0]
    be90:	2b00      	cmp	r3, #0
    be92:	d100      	bne.n	be96 <_vfiprintf_r+0x72>
    be94:	e0c3      	b.n	c01e <_vfiprintf_r+0x1fa>
    be96:	2201      	movs	r2, #1
    be98:	2300      	movs	r3, #0
    be9a:	4252      	negs	r2, r2
    be9c:	606a      	str	r2, [r5, #4]
    be9e:	a902      	add	r1, sp, #8
    bea0:	3254      	adds	r2, #84	; 0x54
    bea2:	1852      	adds	r2, r2, r1
    bea4:	3401      	adds	r4, #1
    bea6:	602b      	str	r3, [r5, #0]
    bea8:	60eb      	str	r3, [r5, #12]
    beaa:	60ab      	str	r3, [r5, #8]
    beac:	7013      	strb	r3, [r2, #0]
    beae:	65ab      	str	r3, [r5, #88]	; 0x58
    beb0:	7821      	ldrb	r1, [r4, #0]
    beb2:	2205      	movs	r2, #5
    beb4:	4862      	ldr	r0, [pc, #392]	; (c040 <_vfiprintf_r+0x21c>)
    beb6:	f002 fa85 	bl	e3c4 <memchr>
    beba:	1c63      	adds	r3, r4, #1
    bebc:	469c      	mov	ip, r3
    bebe:	2800      	cmp	r0, #0
    bec0:	d135      	bne.n	bf2e <_vfiprintf_r+0x10a>
    bec2:	6829      	ldr	r1, [r5, #0]
    bec4:	06cb      	lsls	r3, r1, #27
    bec6:	d504      	bpl.n	bed2 <_vfiprintf_r+0xae>
    bec8:	2353      	movs	r3, #83	; 0x53
    beca:	aa02      	add	r2, sp, #8
    becc:	3020      	adds	r0, #32
    bece:	189b      	adds	r3, r3, r2
    bed0:	7018      	strb	r0, [r3, #0]
    bed2:	070b      	lsls	r3, r1, #28
    bed4:	d504      	bpl.n	bee0 <_vfiprintf_r+0xbc>
    bed6:	2353      	movs	r3, #83	; 0x53
    bed8:	202b      	movs	r0, #43	; 0x2b
    beda:	aa02      	add	r2, sp, #8
    bedc:	189b      	adds	r3, r3, r2
    bede:	7018      	strb	r0, [r3, #0]
    bee0:	7823      	ldrb	r3, [r4, #0]
    bee2:	2b2a      	cmp	r3, #42	; 0x2a
    bee4:	d02c      	beq.n	bf40 <_vfiprintf_r+0x11c>
    bee6:	2000      	movs	r0, #0
    bee8:	210a      	movs	r1, #10
    beea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    beec:	7822      	ldrb	r2, [r4, #0]
    beee:	3a30      	subs	r2, #48	; 0x30
    bef0:	2a09      	cmp	r2, #9
    bef2:	d800      	bhi.n	bef6 <_vfiprintf_r+0xd2>
    bef4:	e06b      	b.n	bfce <_vfiprintf_r+0x1aa>
    bef6:	2800      	cmp	r0, #0
    bef8:	d02a      	beq.n	bf50 <_vfiprintf_r+0x12c>
    befa:	9309      	str	r3, [sp, #36]	; 0x24
    befc:	e028      	b.n	bf50 <_vfiprintf_r+0x12c>
    befe:	4b51      	ldr	r3, [pc, #324]	; (c044 <_vfiprintf_r+0x220>)
    bf00:	429f      	cmp	r7, r3
    bf02:	d101      	bne.n	bf08 <_vfiprintf_r+0xe4>
    bf04:	68b7      	ldr	r7, [r6, #8]
    bf06:	e79e      	b.n	be46 <_vfiprintf_r+0x22>
    bf08:	4b4f      	ldr	r3, [pc, #316]	; (c048 <_vfiprintf_r+0x224>)
    bf0a:	429f      	cmp	r7, r3
    bf0c:	d19b      	bne.n	be46 <_vfiprintf_r+0x22>
    bf0e:	68f7      	ldr	r7, [r6, #12]
    bf10:	e799      	b.n	be46 <_vfiprintf_r+0x22>
    bf12:	0039      	movs	r1, r7
    bf14:	0030      	movs	r0, r6
    bf16:	f001 f903 	bl	d120 <__swsetup_r>
    bf1a:	2800      	cmp	r0, #0
    bf1c:	d099      	beq.n	be52 <_vfiprintf_r+0x2e>
    bf1e:	2001      	movs	r0, #1
    bf20:	4240      	negs	r0, r0
    bf22:	b01f      	add	sp, #124	; 0x7c
    bf24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf26:	2b25      	cmp	r3, #37	; 0x25
    bf28:	d09f      	beq.n	be6a <_vfiprintf_r+0x46>
    bf2a:	3401      	adds	r4, #1
    bf2c:	e79a      	b.n	be64 <_vfiprintf_r+0x40>
    bf2e:	4b44      	ldr	r3, [pc, #272]	; (c040 <_vfiprintf_r+0x21c>)
    bf30:	6829      	ldr	r1, [r5, #0]
    bf32:	1ac0      	subs	r0, r0, r3
    bf34:	2301      	movs	r3, #1
    bf36:	4083      	lsls	r3, r0
    bf38:	430b      	orrs	r3, r1
    bf3a:	602b      	str	r3, [r5, #0]
    bf3c:	4664      	mov	r4, ip
    bf3e:	e7b7      	b.n	beb0 <_vfiprintf_r+0x8c>
    bf40:	9b05      	ldr	r3, [sp, #20]
    bf42:	1d18      	adds	r0, r3, #4
    bf44:	681b      	ldr	r3, [r3, #0]
    bf46:	9005      	str	r0, [sp, #20]
    bf48:	2b00      	cmp	r3, #0
    bf4a:	db3a      	blt.n	bfc2 <_vfiprintf_r+0x19e>
    bf4c:	9309      	str	r3, [sp, #36]	; 0x24
    bf4e:	4664      	mov	r4, ip
    bf50:	7823      	ldrb	r3, [r4, #0]
    bf52:	2b2e      	cmp	r3, #46	; 0x2e
    bf54:	d10b      	bne.n	bf6e <_vfiprintf_r+0x14a>
    bf56:	7863      	ldrb	r3, [r4, #1]
    bf58:	1c62      	adds	r2, r4, #1
    bf5a:	2b2a      	cmp	r3, #42	; 0x2a
    bf5c:	d13f      	bne.n	bfde <_vfiprintf_r+0x1ba>
    bf5e:	9b05      	ldr	r3, [sp, #20]
    bf60:	3402      	adds	r4, #2
    bf62:	1d1a      	adds	r2, r3, #4
    bf64:	681b      	ldr	r3, [r3, #0]
    bf66:	9205      	str	r2, [sp, #20]
    bf68:	2b00      	cmp	r3, #0
    bf6a:	db35      	blt.n	bfd8 <_vfiprintf_r+0x1b4>
    bf6c:	9307      	str	r3, [sp, #28]
    bf6e:	7821      	ldrb	r1, [r4, #0]
    bf70:	2203      	movs	r2, #3
    bf72:	4836      	ldr	r0, [pc, #216]	; (c04c <_vfiprintf_r+0x228>)
    bf74:	f002 fa26 	bl	e3c4 <memchr>
    bf78:	2800      	cmp	r0, #0
    bf7a:	d007      	beq.n	bf8c <_vfiprintf_r+0x168>
    bf7c:	4b33      	ldr	r3, [pc, #204]	; (c04c <_vfiprintf_r+0x228>)
    bf7e:	682a      	ldr	r2, [r5, #0]
    bf80:	1ac0      	subs	r0, r0, r3
    bf82:	2340      	movs	r3, #64	; 0x40
    bf84:	4083      	lsls	r3, r0
    bf86:	4313      	orrs	r3, r2
    bf88:	602b      	str	r3, [r5, #0]
    bf8a:	3401      	adds	r4, #1
    bf8c:	7821      	ldrb	r1, [r4, #0]
    bf8e:	1c63      	adds	r3, r4, #1
    bf90:	2206      	movs	r2, #6
    bf92:	482f      	ldr	r0, [pc, #188]	; (c050 <_vfiprintf_r+0x22c>)
    bf94:	9302      	str	r3, [sp, #8]
    bf96:	7629      	strb	r1, [r5, #24]
    bf98:	f002 fa14 	bl	e3c4 <memchr>
    bf9c:	2800      	cmp	r0, #0
    bf9e:	d044      	beq.n	c02a <_vfiprintf_r+0x206>
    bfa0:	4b2c      	ldr	r3, [pc, #176]	; (c054 <_vfiprintf_r+0x230>)
    bfa2:	2b00      	cmp	r3, #0
    bfa4:	d12f      	bne.n	c006 <_vfiprintf_r+0x1e2>
    bfa6:	6829      	ldr	r1, [r5, #0]
    bfa8:	9b05      	ldr	r3, [sp, #20]
    bfaa:	2207      	movs	r2, #7
    bfac:	05c9      	lsls	r1, r1, #23
    bfae:	d528      	bpl.n	c002 <_vfiprintf_r+0x1de>
    bfb0:	189b      	adds	r3, r3, r2
    bfb2:	4393      	bics	r3, r2
    bfb4:	3308      	adds	r3, #8
    bfb6:	9305      	str	r3, [sp, #20]
    bfb8:	696b      	ldr	r3, [r5, #20]
    bfba:	9a03      	ldr	r2, [sp, #12]
    bfbc:	189b      	adds	r3, r3, r2
    bfbe:	616b      	str	r3, [r5, #20]
    bfc0:	e74f      	b.n	be62 <_vfiprintf_r+0x3e>
    bfc2:	425b      	negs	r3, r3
    bfc4:	60eb      	str	r3, [r5, #12]
    bfc6:	2302      	movs	r3, #2
    bfc8:	430b      	orrs	r3, r1
    bfca:	602b      	str	r3, [r5, #0]
    bfcc:	e7bf      	b.n	bf4e <_vfiprintf_r+0x12a>
    bfce:	434b      	muls	r3, r1
    bfd0:	3401      	adds	r4, #1
    bfd2:	189b      	adds	r3, r3, r2
    bfd4:	2001      	movs	r0, #1
    bfd6:	e789      	b.n	beec <_vfiprintf_r+0xc8>
    bfd8:	2301      	movs	r3, #1
    bfda:	425b      	negs	r3, r3
    bfdc:	e7c6      	b.n	bf6c <_vfiprintf_r+0x148>
    bfde:	2300      	movs	r3, #0
    bfe0:	0014      	movs	r4, r2
    bfe2:	200a      	movs	r0, #10
    bfe4:	001a      	movs	r2, r3
    bfe6:	606b      	str	r3, [r5, #4]
    bfe8:	7821      	ldrb	r1, [r4, #0]
    bfea:	3930      	subs	r1, #48	; 0x30
    bfec:	2909      	cmp	r1, #9
    bfee:	d903      	bls.n	bff8 <_vfiprintf_r+0x1d4>
    bff0:	2b00      	cmp	r3, #0
    bff2:	d0bc      	beq.n	bf6e <_vfiprintf_r+0x14a>
    bff4:	9207      	str	r2, [sp, #28]
    bff6:	e7ba      	b.n	bf6e <_vfiprintf_r+0x14a>
    bff8:	4342      	muls	r2, r0
    bffa:	3401      	adds	r4, #1
    bffc:	1852      	adds	r2, r2, r1
    bffe:	2301      	movs	r3, #1
    c000:	e7f2      	b.n	bfe8 <_vfiprintf_r+0x1c4>
    c002:	3307      	adds	r3, #7
    c004:	e7d5      	b.n	bfb2 <_vfiprintf_r+0x18e>
    c006:	ab05      	add	r3, sp, #20
    c008:	9300      	str	r3, [sp, #0]
    c00a:	003a      	movs	r2, r7
    c00c:	4b12      	ldr	r3, [pc, #72]	; (c058 <_vfiprintf_r+0x234>)
    c00e:	0029      	movs	r1, r5
    c010:	0030      	movs	r0, r6
    c012:	f000 f8bf 	bl	c194 <_printf_float>
    c016:	9003      	str	r0, [sp, #12]
    c018:	9b03      	ldr	r3, [sp, #12]
    c01a:	3301      	adds	r3, #1
    c01c:	d1cc      	bne.n	bfb8 <_vfiprintf_r+0x194>
    c01e:	89bb      	ldrh	r3, [r7, #12]
    c020:	065b      	lsls	r3, r3, #25
    c022:	d500      	bpl.n	c026 <_vfiprintf_r+0x202>
    c024:	e77b      	b.n	bf1e <_vfiprintf_r+0xfa>
    c026:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c028:	e77b      	b.n	bf22 <_vfiprintf_r+0xfe>
    c02a:	ab05      	add	r3, sp, #20
    c02c:	9300      	str	r3, [sp, #0]
    c02e:	003a      	movs	r2, r7
    c030:	4b09      	ldr	r3, [pc, #36]	; (c058 <_vfiprintf_r+0x234>)
    c032:	0029      	movs	r1, r5
    c034:	0030      	movs	r0, r6
    c036:	f000 fb67 	bl	c708 <_printf_i>
    c03a:	e7ec      	b.n	c016 <_vfiprintf_r+0x1f2>
    c03c:	00011148 	.word	0x00011148
    c040:	00010f98 	.word	0x00010f98
    c044:	00011168 	.word	0x00011168
    c048:	00011128 	.word	0x00011128
    c04c:	00010f9e 	.word	0x00010f9e
    c050:	00010fa2 	.word	0x00010fa2
    c054:	0000c195 	.word	0x0000c195
    c058:	0000bdff 	.word	0x0000bdff

0000c05c <__cvt>:
    c05c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c05e:	b08b      	sub	sp, #44	; 0x2c
    c060:	0014      	movs	r4, r2
    c062:	1e1d      	subs	r5, r3, #0
    c064:	9912      	ldr	r1, [sp, #72]	; 0x48
    c066:	da53      	bge.n	c110 <__cvt+0xb4>
    c068:	2480      	movs	r4, #128	; 0x80
    c06a:	0624      	lsls	r4, r4, #24
    c06c:	191b      	adds	r3, r3, r4
    c06e:	001d      	movs	r5, r3
    c070:	0014      	movs	r4, r2
    c072:	232d      	movs	r3, #45	; 0x2d
    c074:	700b      	strb	r3, [r1, #0]
    c076:	2320      	movs	r3, #32
    c078:	9e14      	ldr	r6, [sp, #80]	; 0x50
    c07a:	2203      	movs	r2, #3
    c07c:	439e      	bics	r6, r3
    c07e:	2e46      	cmp	r6, #70	; 0x46
    c080:	d007      	beq.n	c092 <__cvt+0x36>
    c082:	0033      	movs	r3, r6
    c084:	3b45      	subs	r3, #69	; 0x45
    c086:	4259      	negs	r1, r3
    c088:	414b      	adcs	r3, r1
    c08a:	9910      	ldr	r1, [sp, #64]	; 0x40
    c08c:	3a01      	subs	r2, #1
    c08e:	18cb      	adds	r3, r1, r3
    c090:	9310      	str	r3, [sp, #64]	; 0x40
    c092:	ab09      	add	r3, sp, #36	; 0x24
    c094:	9304      	str	r3, [sp, #16]
    c096:	ab08      	add	r3, sp, #32
    c098:	9303      	str	r3, [sp, #12]
    c09a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c09c:	9200      	str	r2, [sp, #0]
    c09e:	9302      	str	r3, [sp, #8]
    c0a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c0a2:	0022      	movs	r2, r4
    c0a4:	9301      	str	r3, [sp, #4]
    c0a6:	002b      	movs	r3, r5
    c0a8:	f001 f958 	bl	d35c <_dtoa_r>
    c0ac:	0007      	movs	r7, r0
    c0ae:	2e47      	cmp	r6, #71	; 0x47
    c0b0:	d102      	bne.n	c0b8 <__cvt+0x5c>
    c0b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c0b4:	07db      	lsls	r3, r3, #31
    c0b6:	d524      	bpl.n	c102 <__cvt+0xa6>
    c0b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c0ba:	18fb      	adds	r3, r7, r3
    c0bc:	9307      	str	r3, [sp, #28]
    c0be:	2e46      	cmp	r6, #70	; 0x46
    c0c0:	d114      	bne.n	c0ec <__cvt+0x90>
    c0c2:	783b      	ldrb	r3, [r7, #0]
    c0c4:	2b30      	cmp	r3, #48	; 0x30
    c0c6:	d10c      	bne.n	c0e2 <__cvt+0x86>
    c0c8:	2200      	movs	r2, #0
    c0ca:	2300      	movs	r3, #0
    c0cc:	0020      	movs	r0, r4
    c0ce:	0029      	movs	r1, r5
    c0d0:	f7fc fb96 	bl	8800 <__aeabi_dcmpeq>
    c0d4:	2800      	cmp	r0, #0
    c0d6:	d104      	bne.n	c0e2 <__cvt+0x86>
    c0d8:	2301      	movs	r3, #1
    c0da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c0dc:	1a9b      	subs	r3, r3, r2
    c0de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c0e0:	6013      	str	r3, [r2, #0]
    c0e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c0e4:	9a07      	ldr	r2, [sp, #28]
    c0e6:	681b      	ldr	r3, [r3, #0]
    c0e8:	18d3      	adds	r3, r2, r3
    c0ea:	9307      	str	r3, [sp, #28]
    c0ec:	2200      	movs	r2, #0
    c0ee:	2300      	movs	r3, #0
    c0f0:	0020      	movs	r0, r4
    c0f2:	0029      	movs	r1, r5
    c0f4:	f7fc fb84 	bl	8800 <__aeabi_dcmpeq>
    c0f8:	2230      	movs	r2, #48	; 0x30
    c0fa:	2800      	cmp	r0, #0
    c0fc:	d00d      	beq.n	c11a <__cvt+0xbe>
    c0fe:	9b07      	ldr	r3, [sp, #28]
    c100:	9309      	str	r3, [sp, #36]	; 0x24
    c102:	0038      	movs	r0, r7
    c104:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c106:	9a15      	ldr	r2, [sp, #84]	; 0x54
    c108:	1bdb      	subs	r3, r3, r7
    c10a:	6013      	str	r3, [r2, #0]
    c10c:	b00b      	add	sp, #44	; 0x2c
    c10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c110:	2300      	movs	r3, #0
    c112:	e7af      	b.n	c074 <__cvt+0x18>
    c114:	1c59      	adds	r1, r3, #1
    c116:	9109      	str	r1, [sp, #36]	; 0x24
    c118:	701a      	strb	r2, [r3, #0]
    c11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c11c:	9907      	ldr	r1, [sp, #28]
    c11e:	4299      	cmp	r1, r3
    c120:	d8f8      	bhi.n	c114 <__cvt+0xb8>
    c122:	e7ee      	b.n	c102 <__cvt+0xa6>

0000c124 <__exponent>:
    c124:	b5f0      	push	{r4, r5, r6, r7, lr}
    c126:	232b      	movs	r3, #43	; 0x2b
    c128:	b085      	sub	sp, #20
    c12a:	0007      	movs	r7, r0
    c12c:	000c      	movs	r4, r1
    c12e:	7002      	strb	r2, [r0, #0]
    c130:	1c86      	adds	r6, r0, #2
    c132:	2900      	cmp	r1, #0
    c134:	da01      	bge.n	c13a <__exponent+0x16>
    c136:	232d      	movs	r3, #45	; 0x2d
    c138:	424c      	negs	r4, r1
    c13a:	707b      	strb	r3, [r7, #1]
    c13c:	2c09      	cmp	r4, #9
    c13e:	dd23      	ble.n	c188 <__exponent+0x64>
    c140:	ab02      	add	r3, sp, #8
    c142:	1ddd      	adds	r5, r3, #7
    c144:	1e6b      	subs	r3, r5, #1
    c146:	0020      	movs	r0, r4
    c148:	210a      	movs	r1, #10
    c14a:	9301      	str	r3, [sp, #4]
    c14c:	f7fc fb42 	bl	87d4 <__aeabi_idivmod>
    c150:	1e6b      	subs	r3, r5, #1
    c152:	3130      	adds	r1, #48	; 0x30
    c154:	7019      	strb	r1, [r3, #0]
    c156:	0020      	movs	r0, r4
    c158:	210a      	movs	r1, #10
    c15a:	f7fc fa55 	bl	8608 <__divsi3>
    c15e:	0004      	movs	r4, r0
    c160:	2809      	cmp	r0, #9
    c162:	dc0a      	bgt.n	c17a <__exponent+0x56>
    c164:	3d02      	subs	r5, #2
    c166:	3430      	adds	r4, #48	; 0x30
    c168:	702c      	strb	r4, [r5, #0]
    c16a:	ab02      	add	r3, sp, #8
    c16c:	3307      	adds	r3, #7
    c16e:	0030      	movs	r0, r6
    c170:	42ab      	cmp	r3, r5
    c172:	d804      	bhi.n	c17e <__exponent+0x5a>
    c174:	1bc0      	subs	r0, r0, r7
    c176:	b005      	add	sp, #20
    c178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c17a:	9d01      	ldr	r5, [sp, #4]
    c17c:	e7e2      	b.n	c144 <__exponent+0x20>
    c17e:	782b      	ldrb	r3, [r5, #0]
    c180:	3501      	adds	r5, #1
    c182:	7033      	strb	r3, [r6, #0]
    c184:	3601      	adds	r6, #1
    c186:	e7f0      	b.n	c16a <__exponent+0x46>
    c188:	2330      	movs	r3, #48	; 0x30
    c18a:	18e4      	adds	r4, r4, r3
    c18c:	7033      	strb	r3, [r6, #0]
    c18e:	1cb0      	adds	r0, r6, #2
    c190:	7074      	strb	r4, [r6, #1]
    c192:	e7ef      	b.n	c174 <__exponent+0x50>

0000c194 <_printf_float>:
    c194:	b5f0      	push	{r4, r5, r6, r7, lr}
    c196:	b095      	sub	sp, #84	; 0x54
    c198:	000c      	movs	r4, r1
    c19a:	920a      	str	r2, [sp, #40]	; 0x28
    c19c:	930b      	str	r3, [sp, #44]	; 0x2c
    c19e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    c1a0:	9009      	str	r0, [sp, #36]	; 0x24
    c1a2:	f002 f897 	bl	e2d4 <_localeconv_r>
    c1a6:	6803      	ldr	r3, [r0, #0]
    c1a8:	0018      	movs	r0, r3
    c1aa:	930d      	str	r3, [sp, #52]	; 0x34
    c1ac:	f000 fc19 	bl	c9e2 <strlen>
    c1b0:	2300      	movs	r3, #0
    c1b2:	9312      	str	r3, [sp, #72]	; 0x48
    c1b4:	6823      	ldr	r3, [r4, #0]
    c1b6:	900e      	str	r0, [sp, #56]	; 0x38
    c1b8:	930c      	str	r3, [sp, #48]	; 0x30
    c1ba:	990c      	ldr	r1, [sp, #48]	; 0x30
    c1bc:	7e27      	ldrb	r7, [r4, #24]
    c1be:	682b      	ldr	r3, [r5, #0]
    c1c0:	2207      	movs	r2, #7
    c1c2:	05c9      	lsls	r1, r1, #23
    c1c4:	d547      	bpl.n	c256 <_printf_float+0xc2>
    c1c6:	189b      	adds	r3, r3, r2
    c1c8:	4393      	bics	r3, r2
    c1ca:	001a      	movs	r2, r3
    c1cc:	3208      	adds	r2, #8
    c1ce:	602a      	str	r2, [r5, #0]
    c1d0:	681a      	ldr	r2, [r3, #0]
    c1d2:	685b      	ldr	r3, [r3, #4]
    c1d4:	64a2      	str	r2, [r4, #72]	; 0x48
    c1d6:	64e3      	str	r3, [r4, #76]	; 0x4c
    c1d8:	2201      	movs	r2, #1
    c1da:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    c1dc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    c1de:	006b      	lsls	r3, r5, #1
    c1e0:	085b      	lsrs	r3, r3, #1
    c1e2:	930f      	str	r3, [sp, #60]	; 0x3c
    c1e4:	4252      	negs	r2, r2
    c1e6:	4ba7      	ldr	r3, [pc, #668]	; (c484 <_printf_float+0x2f0>)
    c1e8:	0030      	movs	r0, r6
    c1ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c1ec:	f7fe ff8c 	bl	b108 <__aeabi_dcmpun>
    c1f0:	2800      	cmp	r0, #0
    c1f2:	d000      	beq.n	c1f6 <_printf_float+0x62>
    c1f4:	e206      	b.n	c604 <_printf_float+0x470>
    c1f6:	2201      	movs	r2, #1
    c1f8:	4ba2      	ldr	r3, [pc, #648]	; (c484 <_printf_float+0x2f0>)
    c1fa:	4252      	negs	r2, r2
    c1fc:	0030      	movs	r0, r6
    c1fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c200:	f7fc fb0e 	bl	8820 <__aeabi_dcmple>
    c204:	2800      	cmp	r0, #0
    c206:	d000      	beq.n	c20a <_printf_float+0x76>
    c208:	e1fc      	b.n	c604 <_printf_float+0x470>
    c20a:	2200      	movs	r2, #0
    c20c:	2300      	movs	r3, #0
    c20e:	0030      	movs	r0, r6
    c210:	0029      	movs	r1, r5
    c212:	f7fc fafb 	bl	880c <__aeabi_dcmplt>
    c216:	2800      	cmp	r0, #0
    c218:	d003      	beq.n	c222 <_printf_float+0x8e>
    c21a:	0023      	movs	r3, r4
    c21c:	222d      	movs	r2, #45	; 0x2d
    c21e:	3343      	adds	r3, #67	; 0x43
    c220:	701a      	strb	r2, [r3, #0]
    c222:	4d99      	ldr	r5, [pc, #612]	; (c488 <_printf_float+0x2f4>)
    c224:	2f47      	cmp	r7, #71	; 0x47
    c226:	d800      	bhi.n	c22a <_printf_float+0x96>
    c228:	4d98      	ldr	r5, [pc, #608]	; (c48c <_printf_float+0x2f8>)
    c22a:	2303      	movs	r3, #3
    c22c:	2600      	movs	r6, #0
    c22e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c230:	6123      	str	r3, [r4, #16]
    c232:	3301      	adds	r3, #1
    c234:	439a      	bics	r2, r3
    c236:	6022      	str	r2, [r4, #0]
    c238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c23a:	aa13      	add	r2, sp, #76	; 0x4c
    c23c:	9300      	str	r3, [sp, #0]
    c23e:	0021      	movs	r1, r4
    c240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c242:	9809      	ldr	r0, [sp, #36]	; 0x24
    c244:	f000 f9f2 	bl	c62c <_printf_common>
    c248:	1c43      	adds	r3, r0, #1
    c24a:	d000      	beq.n	c24e <_printf_float+0xba>
    c24c:	e09c      	b.n	c388 <_printf_float+0x1f4>
    c24e:	2001      	movs	r0, #1
    c250:	4240      	negs	r0, r0
    c252:	b015      	add	sp, #84	; 0x54
    c254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c256:	3307      	adds	r3, #7
    c258:	e7b6      	b.n	c1c8 <_printf_float+0x34>
    c25a:	2380      	movs	r3, #128	; 0x80
    c25c:	6862      	ldr	r2, [r4, #4]
    c25e:	00db      	lsls	r3, r3, #3
    c260:	1c51      	adds	r1, r2, #1
    c262:	d145      	bne.n	c2f0 <_printf_float+0x15c>
    c264:	3207      	adds	r2, #7
    c266:	6062      	str	r2, [r4, #4]
    c268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c26a:	2100      	movs	r1, #0
    c26c:	4313      	orrs	r3, r2
    c26e:	aa12      	add	r2, sp, #72	; 0x48
    c270:	9205      	str	r2, [sp, #20]
    c272:	aa11      	add	r2, sp, #68	; 0x44
    c274:	9203      	str	r2, [sp, #12]
    c276:	2223      	movs	r2, #35	; 0x23
    c278:	6023      	str	r3, [r4, #0]
    c27a:	9106      	str	r1, [sp, #24]
    c27c:	9301      	str	r3, [sp, #4]
    c27e:	a908      	add	r1, sp, #32
    c280:	6863      	ldr	r3, [r4, #4]
    c282:	1852      	adds	r2, r2, r1
    c284:	9202      	str	r2, [sp, #8]
    c286:	9300      	str	r3, [sp, #0]
    c288:	0032      	movs	r2, r6
    c28a:	002b      	movs	r3, r5
    c28c:	9704      	str	r7, [sp, #16]
    c28e:	9809      	ldr	r0, [sp, #36]	; 0x24
    c290:	f7ff fee4 	bl	c05c <__cvt>
    c294:	2320      	movs	r3, #32
    c296:	003a      	movs	r2, r7
    c298:	0005      	movs	r5, r0
    c29a:	439a      	bics	r2, r3
    c29c:	2a47      	cmp	r2, #71	; 0x47
    c29e:	d107      	bne.n	c2b0 <_printf_float+0x11c>
    c2a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c2a2:	1cda      	adds	r2, r3, #3
    c2a4:	db02      	blt.n	c2ac <_printf_float+0x118>
    c2a6:	6862      	ldr	r2, [r4, #4]
    c2a8:	4293      	cmp	r3, r2
    c2aa:	dd5b      	ble.n	c364 <_printf_float+0x1d0>
    c2ac:	3f02      	subs	r7, #2
    c2ae:	b2ff      	uxtb	r7, r7
    c2b0:	9911      	ldr	r1, [sp, #68]	; 0x44
    c2b2:	2f65      	cmp	r7, #101	; 0x65
    c2b4:	d83b      	bhi.n	c32e <_printf_float+0x19a>
    c2b6:	0020      	movs	r0, r4
    c2b8:	3901      	subs	r1, #1
    c2ba:	003a      	movs	r2, r7
    c2bc:	3050      	adds	r0, #80	; 0x50
    c2be:	9111      	str	r1, [sp, #68]	; 0x44
    c2c0:	f7ff ff30 	bl	c124 <__exponent>
    c2c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c2c6:	0006      	movs	r6, r0
    c2c8:	1883      	adds	r3, r0, r2
    c2ca:	6123      	str	r3, [r4, #16]
    c2cc:	2a01      	cmp	r2, #1
    c2ce:	dc02      	bgt.n	c2d6 <_printf_float+0x142>
    c2d0:	6822      	ldr	r2, [r4, #0]
    c2d2:	07d2      	lsls	r2, r2, #31
    c2d4:	d501      	bpl.n	c2da <_printf_float+0x146>
    c2d6:	3301      	adds	r3, #1
    c2d8:	6123      	str	r3, [r4, #16]
    c2da:	2323      	movs	r3, #35	; 0x23
    c2dc:	aa08      	add	r2, sp, #32
    c2de:	189b      	adds	r3, r3, r2
    c2e0:	781b      	ldrb	r3, [r3, #0]
    c2e2:	2b00      	cmp	r3, #0
    c2e4:	d0a8      	beq.n	c238 <_printf_float+0xa4>
    c2e6:	0023      	movs	r3, r4
    c2e8:	222d      	movs	r2, #45	; 0x2d
    c2ea:	3343      	adds	r3, #67	; 0x43
    c2ec:	701a      	strb	r2, [r3, #0]
    c2ee:	e7a3      	b.n	c238 <_printf_float+0xa4>
    c2f0:	2f67      	cmp	r7, #103	; 0x67
    c2f2:	d001      	beq.n	c2f8 <_printf_float+0x164>
    c2f4:	2f47      	cmp	r7, #71	; 0x47
    c2f6:	d1b7      	bne.n	c268 <_printf_float+0xd4>
    c2f8:	2a00      	cmp	r2, #0
    c2fa:	d016      	beq.n	c32a <_printf_float+0x196>
    c2fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    c2fe:	a808      	add	r0, sp, #32
    c300:	430b      	orrs	r3, r1
    c302:	2100      	movs	r1, #0
    c304:	9106      	str	r1, [sp, #24]
    c306:	a912      	add	r1, sp, #72	; 0x48
    c308:	9105      	str	r1, [sp, #20]
    c30a:	a911      	add	r1, sp, #68	; 0x44
    c30c:	9103      	str	r1, [sp, #12]
    c30e:	2123      	movs	r1, #35	; 0x23
    c310:	1809      	adds	r1, r1, r0
    c312:	6023      	str	r3, [r4, #0]
    c314:	9301      	str	r3, [sp, #4]
    c316:	9200      	str	r2, [sp, #0]
    c318:	002b      	movs	r3, r5
    c31a:	9704      	str	r7, [sp, #16]
    c31c:	9102      	str	r1, [sp, #8]
    c31e:	0032      	movs	r2, r6
    c320:	9809      	ldr	r0, [sp, #36]	; 0x24
    c322:	f7ff fe9b 	bl	c05c <__cvt>
    c326:	0005      	movs	r5, r0
    c328:	e7ba      	b.n	c2a0 <_printf_float+0x10c>
    c32a:	2201      	movs	r2, #1
    c32c:	e79b      	b.n	c266 <_printf_float+0xd2>
    c32e:	2f66      	cmp	r7, #102	; 0x66
    c330:	d119      	bne.n	c366 <_printf_float+0x1d2>
    c332:	6863      	ldr	r3, [r4, #4]
    c334:	2900      	cmp	r1, #0
    c336:	dd0c      	ble.n	c352 <_printf_float+0x1be>
    c338:	6121      	str	r1, [r4, #16]
    c33a:	2b00      	cmp	r3, #0
    c33c:	d102      	bne.n	c344 <_printf_float+0x1b0>
    c33e:	6822      	ldr	r2, [r4, #0]
    c340:	07d2      	lsls	r2, r2, #31
    c342:	d502      	bpl.n	c34a <_printf_float+0x1b6>
    c344:	3301      	adds	r3, #1
    c346:	185b      	adds	r3, r3, r1
    c348:	6123      	str	r3, [r4, #16]
    c34a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c34c:	2600      	movs	r6, #0
    c34e:	65a3      	str	r3, [r4, #88]	; 0x58
    c350:	e7c3      	b.n	c2da <_printf_float+0x146>
    c352:	2b00      	cmp	r3, #0
    c354:	d103      	bne.n	c35e <_printf_float+0x1ca>
    c356:	2201      	movs	r2, #1
    c358:	6821      	ldr	r1, [r4, #0]
    c35a:	4211      	tst	r1, r2
    c35c:	d000      	beq.n	c360 <_printf_float+0x1cc>
    c35e:	1c9a      	adds	r2, r3, #2
    c360:	6122      	str	r2, [r4, #16]
    c362:	e7f2      	b.n	c34a <_printf_float+0x1b6>
    c364:	2767      	movs	r7, #103	; 0x67
    c366:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c368:	9812      	ldr	r0, [sp, #72]	; 0x48
    c36a:	4283      	cmp	r3, r0
    c36c:	db05      	blt.n	c37a <_printf_float+0x1e6>
    c36e:	6822      	ldr	r2, [r4, #0]
    c370:	6123      	str	r3, [r4, #16]
    c372:	07d2      	lsls	r2, r2, #31
    c374:	d5e9      	bpl.n	c34a <_printf_float+0x1b6>
    c376:	3301      	adds	r3, #1
    c378:	e7e6      	b.n	c348 <_printf_float+0x1b4>
    c37a:	2201      	movs	r2, #1
    c37c:	2b00      	cmp	r3, #0
    c37e:	dc01      	bgt.n	c384 <_printf_float+0x1f0>
    c380:	1892      	adds	r2, r2, r2
    c382:	1ad2      	subs	r2, r2, r3
    c384:	1812      	adds	r2, r2, r0
    c386:	e7eb      	b.n	c360 <_printf_float+0x1cc>
    c388:	6822      	ldr	r2, [r4, #0]
    c38a:	0553      	lsls	r3, r2, #21
    c38c:	d408      	bmi.n	c3a0 <_printf_float+0x20c>
    c38e:	6923      	ldr	r3, [r4, #16]
    c390:	002a      	movs	r2, r5
    c392:	990a      	ldr	r1, [sp, #40]	; 0x28
    c394:	9809      	ldr	r0, [sp, #36]	; 0x24
    c396:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c398:	47a8      	blx	r5
    c39a:	1c43      	adds	r3, r0, #1
    c39c:	d129      	bne.n	c3f2 <_printf_float+0x25e>
    c39e:	e756      	b.n	c24e <_printf_float+0xba>
    c3a0:	2f65      	cmp	r7, #101	; 0x65
    c3a2:	d800      	bhi.n	c3a6 <_printf_float+0x212>
    c3a4:	e0dc      	b.n	c560 <_printf_float+0x3cc>
    c3a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    c3a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    c3aa:	2200      	movs	r2, #0
    c3ac:	2300      	movs	r3, #0
    c3ae:	f7fc fa27 	bl	8800 <__aeabi_dcmpeq>
    c3b2:	2800      	cmp	r0, #0
    c3b4:	d035      	beq.n	c422 <_printf_float+0x28e>
    c3b6:	2301      	movs	r3, #1
    c3b8:	4a35      	ldr	r2, [pc, #212]	; (c490 <_printf_float+0x2fc>)
    c3ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    c3bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    c3be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c3c0:	47a8      	blx	r5
    c3c2:	1c43      	adds	r3, r0, #1
    c3c4:	d100      	bne.n	c3c8 <_printf_float+0x234>
    c3c6:	e742      	b.n	c24e <_printf_float+0xba>
    c3c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c3ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c3cc:	4293      	cmp	r3, r2
    c3ce:	db02      	blt.n	c3d6 <_printf_float+0x242>
    c3d0:	6823      	ldr	r3, [r4, #0]
    c3d2:	07db      	lsls	r3, r3, #31
    c3d4:	d50d      	bpl.n	c3f2 <_printf_float+0x25e>
    c3d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c3d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c3da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c3dc:	990a      	ldr	r1, [sp, #40]	; 0x28
    c3de:	9809      	ldr	r0, [sp, #36]	; 0x24
    c3e0:	47a8      	blx	r5
    c3e2:	2500      	movs	r5, #0
    c3e4:	1c43      	adds	r3, r0, #1
    c3e6:	d100      	bne.n	c3ea <_printf_float+0x256>
    c3e8:	e731      	b.n	c24e <_printf_float+0xba>
    c3ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c3ec:	3b01      	subs	r3, #1
    c3ee:	429d      	cmp	r5, r3
    c3f0:	db0b      	blt.n	c40a <_printf_float+0x276>
    c3f2:	6823      	ldr	r3, [r4, #0]
    c3f4:	2500      	movs	r5, #0
    c3f6:	079b      	lsls	r3, r3, #30
    c3f8:	d500      	bpl.n	c3fc <_printf_float+0x268>
    c3fa:	e0fd      	b.n	c5f8 <_printf_float+0x464>
    c3fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3fe:	68e0      	ldr	r0, [r4, #12]
    c400:	4298      	cmp	r0, r3
    c402:	db00      	blt.n	c406 <_printf_float+0x272>
    c404:	e725      	b.n	c252 <_printf_float+0xbe>
    c406:	0018      	movs	r0, r3
    c408:	e723      	b.n	c252 <_printf_float+0xbe>
    c40a:	0022      	movs	r2, r4
    c40c:	2301      	movs	r3, #1
    c40e:	321a      	adds	r2, #26
    c410:	990a      	ldr	r1, [sp, #40]	; 0x28
    c412:	9809      	ldr	r0, [sp, #36]	; 0x24
    c414:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c416:	47b0      	blx	r6
    c418:	1c43      	adds	r3, r0, #1
    c41a:	d100      	bne.n	c41e <_printf_float+0x28a>
    c41c:	e717      	b.n	c24e <_printf_float+0xba>
    c41e:	3501      	adds	r5, #1
    c420:	e7e3      	b.n	c3ea <_printf_float+0x256>
    c422:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c424:	2b00      	cmp	r3, #0
    c426:	dc35      	bgt.n	c494 <_printf_float+0x300>
    c428:	2301      	movs	r3, #1
    c42a:	4a19      	ldr	r2, [pc, #100]	; (c490 <_printf_float+0x2fc>)
    c42c:	990a      	ldr	r1, [sp, #40]	; 0x28
    c42e:	9809      	ldr	r0, [sp, #36]	; 0x24
    c430:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c432:	47b0      	blx	r6
    c434:	1c43      	adds	r3, r0, #1
    c436:	d100      	bne.n	c43a <_printf_float+0x2a6>
    c438:	e709      	b.n	c24e <_printf_float+0xba>
    c43a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c43c:	2b00      	cmp	r3, #0
    c43e:	d105      	bne.n	c44c <_printf_float+0x2b8>
    c440:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c442:	2b00      	cmp	r3, #0
    c444:	d102      	bne.n	c44c <_printf_float+0x2b8>
    c446:	6823      	ldr	r3, [r4, #0]
    c448:	07db      	lsls	r3, r3, #31
    c44a:	d5d2      	bpl.n	c3f2 <_printf_float+0x25e>
    c44c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c44e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c452:	990a      	ldr	r1, [sp, #40]	; 0x28
    c454:	9809      	ldr	r0, [sp, #36]	; 0x24
    c456:	47b0      	blx	r6
    c458:	2600      	movs	r6, #0
    c45a:	1c43      	adds	r3, r0, #1
    c45c:	d100      	bne.n	c460 <_printf_float+0x2cc>
    c45e:	e6f6      	b.n	c24e <_printf_float+0xba>
    c460:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c462:	425b      	negs	r3, r3
    c464:	429e      	cmp	r6, r3
    c466:	db01      	blt.n	c46c <_printf_float+0x2d8>
    c468:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c46a:	e791      	b.n	c390 <_printf_float+0x1fc>
    c46c:	0022      	movs	r2, r4
    c46e:	2301      	movs	r3, #1
    c470:	321a      	adds	r2, #26
    c472:	990a      	ldr	r1, [sp, #40]	; 0x28
    c474:	9809      	ldr	r0, [sp, #36]	; 0x24
    c476:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c478:	47b8      	blx	r7
    c47a:	1c43      	adds	r3, r0, #1
    c47c:	d100      	bne.n	c480 <_printf_float+0x2ec>
    c47e:	e6e6      	b.n	c24e <_printf_float+0xba>
    c480:	3601      	adds	r6, #1
    c482:	e7ed      	b.n	c460 <_printf_float+0x2cc>
    c484:	7fefffff 	.word	0x7fefffff
    c488:	00010fad 	.word	0x00010fad
    c48c:	00010fa9 	.word	0x00010fa9
    c490:	0000fb30 	.word	0x0000fb30
    c494:	6da3      	ldr	r3, [r4, #88]	; 0x58
    c496:	9e12      	ldr	r6, [sp, #72]	; 0x48
    c498:	429e      	cmp	r6, r3
    c49a:	dd00      	ble.n	c49e <_printf_float+0x30a>
    c49c:	001e      	movs	r6, r3
    c49e:	2e00      	cmp	r6, #0
    c4a0:	dc35      	bgt.n	c50e <_printf_float+0x37a>
    c4a2:	2300      	movs	r3, #0
    c4a4:	930c      	str	r3, [sp, #48]	; 0x30
    c4a6:	43f3      	mvns	r3, r6
    c4a8:	17db      	asrs	r3, r3, #31
    c4aa:	930f      	str	r3, [sp, #60]	; 0x3c
    c4ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c4ae:	6da7      	ldr	r7, [r4, #88]	; 0x58
    c4b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c4b2:	4033      	ands	r3, r6
    c4b4:	1afb      	subs	r3, r7, r3
    c4b6:	429a      	cmp	r2, r3
    c4b8:	db32      	blt.n	c520 <_printf_float+0x38c>
    c4ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c4bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c4be:	4293      	cmp	r3, r2
    c4c0:	db3c      	blt.n	c53c <_printf_float+0x3a8>
    c4c2:	6823      	ldr	r3, [r4, #0]
    c4c4:	07db      	lsls	r3, r3, #31
    c4c6:	d439      	bmi.n	c53c <_printf_float+0x3a8>
    c4c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
    c4ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c4cc:	1bf3      	subs	r3, r6, r7
    c4ce:	1ab6      	subs	r6, r6, r2
    c4d0:	429e      	cmp	r6, r3
    c4d2:	dd00      	ble.n	c4d6 <_printf_float+0x342>
    c4d4:	001e      	movs	r6, r3
    c4d6:	2e00      	cmp	r6, #0
    c4d8:	dc39      	bgt.n	c54e <_printf_float+0x3ba>
    c4da:	43f7      	mvns	r7, r6
    c4dc:	2500      	movs	r5, #0
    c4de:	17fb      	asrs	r3, r7, #31
    c4e0:	930c      	str	r3, [sp, #48]	; 0x30
    c4e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c4e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c4e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    c4e8:	1a9b      	subs	r3, r3, r2
    c4ea:	0032      	movs	r2, r6
    c4ec:	400a      	ands	r2, r1
    c4ee:	1a9b      	subs	r3, r3, r2
    c4f0:	429d      	cmp	r5, r3
    c4f2:	db00      	blt.n	c4f6 <_printf_float+0x362>
    c4f4:	e77d      	b.n	c3f2 <_printf_float+0x25e>
    c4f6:	0022      	movs	r2, r4
    c4f8:	2301      	movs	r3, #1
    c4fa:	321a      	adds	r2, #26
    c4fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    c4fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    c500:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c502:	47b8      	blx	r7
    c504:	1c43      	adds	r3, r0, #1
    c506:	d100      	bne.n	c50a <_printf_float+0x376>
    c508:	e6a1      	b.n	c24e <_printf_float+0xba>
    c50a:	3501      	adds	r5, #1
    c50c:	e7e9      	b.n	c4e2 <_printf_float+0x34e>
    c50e:	0033      	movs	r3, r6
    c510:	002a      	movs	r2, r5
    c512:	990a      	ldr	r1, [sp, #40]	; 0x28
    c514:	9809      	ldr	r0, [sp, #36]	; 0x24
    c516:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c518:	47b8      	blx	r7
    c51a:	1c43      	adds	r3, r0, #1
    c51c:	d1c1      	bne.n	c4a2 <_printf_float+0x30e>
    c51e:	e696      	b.n	c24e <_printf_float+0xba>
    c520:	0022      	movs	r2, r4
    c522:	2301      	movs	r3, #1
    c524:	321a      	adds	r2, #26
    c526:	990a      	ldr	r1, [sp, #40]	; 0x28
    c528:	9809      	ldr	r0, [sp, #36]	; 0x24
    c52a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c52c:	47b8      	blx	r7
    c52e:	1c43      	adds	r3, r0, #1
    c530:	d100      	bne.n	c534 <_printf_float+0x3a0>
    c532:	e68c      	b.n	c24e <_printf_float+0xba>
    c534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c536:	3301      	adds	r3, #1
    c538:	930c      	str	r3, [sp, #48]	; 0x30
    c53a:	e7b7      	b.n	c4ac <_printf_float+0x318>
    c53c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c53e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c540:	990a      	ldr	r1, [sp, #40]	; 0x28
    c542:	9809      	ldr	r0, [sp, #36]	; 0x24
    c544:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c546:	47b0      	blx	r6
    c548:	1c43      	adds	r3, r0, #1
    c54a:	d1bd      	bne.n	c4c8 <_printf_float+0x334>
    c54c:	e67f      	b.n	c24e <_printf_float+0xba>
    c54e:	19ea      	adds	r2, r5, r7
    c550:	0033      	movs	r3, r6
    c552:	990a      	ldr	r1, [sp, #40]	; 0x28
    c554:	9809      	ldr	r0, [sp, #36]	; 0x24
    c556:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c558:	47a8      	blx	r5
    c55a:	1c43      	adds	r3, r0, #1
    c55c:	d1bd      	bne.n	c4da <_printf_float+0x346>
    c55e:	e676      	b.n	c24e <_printf_float+0xba>
    c560:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c562:	2b01      	cmp	r3, #1
    c564:	dc02      	bgt.n	c56c <_printf_float+0x3d8>
    c566:	2301      	movs	r3, #1
    c568:	421a      	tst	r2, r3
    c56a:	d038      	beq.n	c5de <_printf_float+0x44a>
    c56c:	2301      	movs	r3, #1
    c56e:	002a      	movs	r2, r5
    c570:	990a      	ldr	r1, [sp, #40]	; 0x28
    c572:	9809      	ldr	r0, [sp, #36]	; 0x24
    c574:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c576:	47b8      	blx	r7
    c578:	1c43      	adds	r3, r0, #1
    c57a:	d100      	bne.n	c57e <_printf_float+0x3ea>
    c57c:	e667      	b.n	c24e <_printf_float+0xba>
    c57e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c582:	990a      	ldr	r1, [sp, #40]	; 0x28
    c584:	9809      	ldr	r0, [sp, #36]	; 0x24
    c586:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c588:	47b8      	blx	r7
    c58a:	1c43      	adds	r3, r0, #1
    c58c:	d100      	bne.n	c590 <_printf_float+0x3fc>
    c58e:	e65e      	b.n	c24e <_printf_float+0xba>
    c590:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    c592:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    c594:	2200      	movs	r2, #0
    c596:	2300      	movs	r3, #0
    c598:	f7fc f932 	bl	8800 <__aeabi_dcmpeq>
    c59c:	2800      	cmp	r0, #0
    c59e:	d008      	beq.n	c5b2 <_printf_float+0x41e>
    c5a0:	2500      	movs	r5, #0
    c5a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c5a4:	3b01      	subs	r3, #1
    c5a6:	429d      	cmp	r5, r3
    c5a8:	db0d      	blt.n	c5c6 <_printf_float+0x432>
    c5aa:	0022      	movs	r2, r4
    c5ac:	0033      	movs	r3, r6
    c5ae:	3250      	adds	r2, #80	; 0x50
    c5b0:	e6ef      	b.n	c392 <_printf_float+0x1fe>
    c5b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c5b4:	1c6a      	adds	r2, r5, #1
    c5b6:	3b01      	subs	r3, #1
    c5b8:	990a      	ldr	r1, [sp, #40]	; 0x28
    c5ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    c5bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c5be:	47a8      	blx	r5
    c5c0:	1c43      	adds	r3, r0, #1
    c5c2:	d1f2      	bne.n	c5aa <_printf_float+0x416>
    c5c4:	e643      	b.n	c24e <_printf_float+0xba>
    c5c6:	0022      	movs	r2, r4
    c5c8:	2301      	movs	r3, #1
    c5ca:	321a      	adds	r2, #26
    c5cc:	990a      	ldr	r1, [sp, #40]	; 0x28
    c5ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    c5d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c5d2:	47b8      	blx	r7
    c5d4:	1c43      	adds	r3, r0, #1
    c5d6:	d100      	bne.n	c5da <_printf_float+0x446>
    c5d8:	e639      	b.n	c24e <_printf_float+0xba>
    c5da:	3501      	adds	r5, #1
    c5dc:	e7e1      	b.n	c5a2 <_printf_float+0x40e>
    c5de:	002a      	movs	r2, r5
    c5e0:	e7ea      	b.n	c5b8 <_printf_float+0x424>
    c5e2:	0022      	movs	r2, r4
    c5e4:	2301      	movs	r3, #1
    c5e6:	3219      	adds	r2, #25
    c5e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    c5ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    c5ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c5ee:	47b0      	blx	r6
    c5f0:	1c43      	adds	r3, r0, #1
    c5f2:	d100      	bne.n	c5f6 <_printf_float+0x462>
    c5f4:	e62b      	b.n	c24e <_printf_float+0xba>
    c5f6:	3501      	adds	r5, #1
    c5f8:	68e3      	ldr	r3, [r4, #12]
    c5fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c5fc:	1a9b      	subs	r3, r3, r2
    c5fe:	429d      	cmp	r5, r3
    c600:	dbef      	blt.n	c5e2 <_printf_float+0x44e>
    c602:	e6fb      	b.n	c3fc <_printf_float+0x268>
    c604:	0032      	movs	r2, r6
    c606:	002b      	movs	r3, r5
    c608:	0030      	movs	r0, r6
    c60a:	0029      	movs	r1, r5
    c60c:	f7fe fd7c 	bl	b108 <__aeabi_dcmpun>
    c610:	2800      	cmp	r0, #0
    c612:	d100      	bne.n	c616 <_printf_float+0x482>
    c614:	e621      	b.n	c25a <_printf_float+0xc6>
    c616:	4d03      	ldr	r5, [pc, #12]	; (c624 <_printf_float+0x490>)
    c618:	2f47      	cmp	r7, #71	; 0x47
    c61a:	d900      	bls.n	c61e <_printf_float+0x48a>
    c61c:	e605      	b.n	c22a <_printf_float+0x96>
    c61e:	4d02      	ldr	r5, [pc, #8]	; (c628 <_printf_float+0x494>)
    c620:	e603      	b.n	c22a <_printf_float+0x96>
    c622:	46c0      	nop			; (mov r8, r8)
    c624:	00010fb5 	.word	0x00010fb5
    c628:	00010fb1 	.word	0x00010fb1

0000c62c <_printf_common>:
    c62c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c62e:	0015      	movs	r5, r2
    c630:	9301      	str	r3, [sp, #4]
    c632:	688a      	ldr	r2, [r1, #8]
    c634:	690b      	ldr	r3, [r1, #16]
    c636:	9000      	str	r0, [sp, #0]
    c638:	000c      	movs	r4, r1
    c63a:	4293      	cmp	r3, r2
    c63c:	da00      	bge.n	c640 <_printf_common+0x14>
    c63e:	0013      	movs	r3, r2
    c640:	0022      	movs	r2, r4
    c642:	602b      	str	r3, [r5, #0]
    c644:	3243      	adds	r2, #67	; 0x43
    c646:	7812      	ldrb	r2, [r2, #0]
    c648:	2a00      	cmp	r2, #0
    c64a:	d001      	beq.n	c650 <_printf_common+0x24>
    c64c:	3301      	adds	r3, #1
    c64e:	602b      	str	r3, [r5, #0]
    c650:	6823      	ldr	r3, [r4, #0]
    c652:	069b      	lsls	r3, r3, #26
    c654:	d502      	bpl.n	c65c <_printf_common+0x30>
    c656:	682b      	ldr	r3, [r5, #0]
    c658:	3302      	adds	r3, #2
    c65a:	602b      	str	r3, [r5, #0]
    c65c:	2706      	movs	r7, #6
    c65e:	6823      	ldr	r3, [r4, #0]
    c660:	401f      	ands	r7, r3
    c662:	d027      	beq.n	c6b4 <_printf_common+0x88>
    c664:	0023      	movs	r3, r4
    c666:	3343      	adds	r3, #67	; 0x43
    c668:	781b      	ldrb	r3, [r3, #0]
    c66a:	1e5a      	subs	r2, r3, #1
    c66c:	4193      	sbcs	r3, r2
    c66e:	6822      	ldr	r2, [r4, #0]
    c670:	0692      	lsls	r2, r2, #26
    c672:	d430      	bmi.n	c6d6 <_printf_common+0xaa>
    c674:	0022      	movs	r2, r4
    c676:	9901      	ldr	r1, [sp, #4]
    c678:	3243      	adds	r2, #67	; 0x43
    c67a:	9800      	ldr	r0, [sp, #0]
    c67c:	9e08      	ldr	r6, [sp, #32]
    c67e:	47b0      	blx	r6
    c680:	1c43      	adds	r3, r0, #1
    c682:	d025      	beq.n	c6d0 <_printf_common+0xa4>
    c684:	2306      	movs	r3, #6
    c686:	6820      	ldr	r0, [r4, #0]
    c688:	682a      	ldr	r2, [r5, #0]
    c68a:	68e1      	ldr	r1, [r4, #12]
    c68c:	4003      	ands	r3, r0
    c68e:	2500      	movs	r5, #0
    c690:	2b04      	cmp	r3, #4
    c692:	d103      	bne.n	c69c <_printf_common+0x70>
    c694:	1a8d      	subs	r5, r1, r2
    c696:	43eb      	mvns	r3, r5
    c698:	17db      	asrs	r3, r3, #31
    c69a:	401d      	ands	r5, r3
    c69c:	68a3      	ldr	r3, [r4, #8]
    c69e:	6922      	ldr	r2, [r4, #16]
    c6a0:	4293      	cmp	r3, r2
    c6a2:	dd01      	ble.n	c6a8 <_printf_common+0x7c>
    c6a4:	1a9b      	subs	r3, r3, r2
    c6a6:	18ed      	adds	r5, r5, r3
    c6a8:	2700      	movs	r7, #0
    c6aa:	42bd      	cmp	r5, r7
    c6ac:	d120      	bne.n	c6f0 <_printf_common+0xc4>
    c6ae:	2000      	movs	r0, #0
    c6b0:	e010      	b.n	c6d4 <_printf_common+0xa8>
    c6b2:	3701      	adds	r7, #1
    c6b4:	68e3      	ldr	r3, [r4, #12]
    c6b6:	682a      	ldr	r2, [r5, #0]
    c6b8:	1a9b      	subs	r3, r3, r2
    c6ba:	429f      	cmp	r7, r3
    c6bc:	dad2      	bge.n	c664 <_printf_common+0x38>
    c6be:	0022      	movs	r2, r4
    c6c0:	2301      	movs	r3, #1
    c6c2:	3219      	adds	r2, #25
    c6c4:	9901      	ldr	r1, [sp, #4]
    c6c6:	9800      	ldr	r0, [sp, #0]
    c6c8:	9e08      	ldr	r6, [sp, #32]
    c6ca:	47b0      	blx	r6
    c6cc:	1c43      	adds	r3, r0, #1
    c6ce:	d1f0      	bne.n	c6b2 <_printf_common+0x86>
    c6d0:	2001      	movs	r0, #1
    c6d2:	4240      	negs	r0, r0
    c6d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c6d6:	2030      	movs	r0, #48	; 0x30
    c6d8:	18e1      	adds	r1, r4, r3
    c6da:	3143      	adds	r1, #67	; 0x43
    c6dc:	7008      	strb	r0, [r1, #0]
    c6de:	0021      	movs	r1, r4
    c6e0:	1c5a      	adds	r2, r3, #1
    c6e2:	3145      	adds	r1, #69	; 0x45
    c6e4:	7809      	ldrb	r1, [r1, #0]
    c6e6:	18a2      	adds	r2, r4, r2
    c6e8:	3243      	adds	r2, #67	; 0x43
    c6ea:	3302      	adds	r3, #2
    c6ec:	7011      	strb	r1, [r2, #0]
    c6ee:	e7c1      	b.n	c674 <_printf_common+0x48>
    c6f0:	0022      	movs	r2, r4
    c6f2:	2301      	movs	r3, #1
    c6f4:	321a      	adds	r2, #26
    c6f6:	9901      	ldr	r1, [sp, #4]
    c6f8:	9800      	ldr	r0, [sp, #0]
    c6fa:	9e08      	ldr	r6, [sp, #32]
    c6fc:	47b0      	blx	r6
    c6fe:	1c43      	adds	r3, r0, #1
    c700:	d0e6      	beq.n	c6d0 <_printf_common+0xa4>
    c702:	3701      	adds	r7, #1
    c704:	e7d1      	b.n	c6aa <_printf_common+0x7e>
	...

0000c708 <_printf_i>:
    c708:	b5f0      	push	{r4, r5, r6, r7, lr}
    c70a:	b08b      	sub	sp, #44	; 0x2c
    c70c:	9206      	str	r2, [sp, #24]
    c70e:	000a      	movs	r2, r1
    c710:	3243      	adds	r2, #67	; 0x43
    c712:	9307      	str	r3, [sp, #28]
    c714:	9005      	str	r0, [sp, #20]
    c716:	9204      	str	r2, [sp, #16]
    c718:	7e0a      	ldrb	r2, [r1, #24]
    c71a:	000c      	movs	r4, r1
    c71c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c71e:	2a6e      	cmp	r2, #110	; 0x6e
    c720:	d100      	bne.n	c724 <_printf_i+0x1c>
    c722:	e08f      	b.n	c844 <_printf_i+0x13c>
    c724:	d817      	bhi.n	c756 <_printf_i+0x4e>
    c726:	2a63      	cmp	r2, #99	; 0x63
    c728:	d02c      	beq.n	c784 <_printf_i+0x7c>
    c72a:	d808      	bhi.n	c73e <_printf_i+0x36>
    c72c:	2a00      	cmp	r2, #0
    c72e:	d100      	bne.n	c732 <_printf_i+0x2a>
    c730:	e099      	b.n	c866 <_printf_i+0x15e>
    c732:	2a58      	cmp	r2, #88	; 0x58
    c734:	d054      	beq.n	c7e0 <_printf_i+0xd8>
    c736:	0026      	movs	r6, r4
    c738:	3642      	adds	r6, #66	; 0x42
    c73a:	7032      	strb	r2, [r6, #0]
    c73c:	e029      	b.n	c792 <_printf_i+0x8a>
    c73e:	2a64      	cmp	r2, #100	; 0x64
    c740:	d001      	beq.n	c746 <_printf_i+0x3e>
    c742:	2a69      	cmp	r2, #105	; 0x69
    c744:	d1f7      	bne.n	c736 <_printf_i+0x2e>
    c746:	6821      	ldr	r1, [r4, #0]
    c748:	681a      	ldr	r2, [r3, #0]
    c74a:	0608      	lsls	r0, r1, #24
    c74c:	d523      	bpl.n	c796 <_printf_i+0x8e>
    c74e:	1d11      	adds	r1, r2, #4
    c750:	6019      	str	r1, [r3, #0]
    c752:	6815      	ldr	r5, [r2, #0]
    c754:	e025      	b.n	c7a2 <_printf_i+0x9a>
    c756:	2a73      	cmp	r2, #115	; 0x73
    c758:	d100      	bne.n	c75c <_printf_i+0x54>
    c75a:	e088      	b.n	c86e <_printf_i+0x166>
    c75c:	d808      	bhi.n	c770 <_printf_i+0x68>
    c75e:	2a6f      	cmp	r2, #111	; 0x6f
    c760:	d029      	beq.n	c7b6 <_printf_i+0xae>
    c762:	2a70      	cmp	r2, #112	; 0x70
    c764:	d1e7      	bne.n	c736 <_printf_i+0x2e>
    c766:	2220      	movs	r2, #32
    c768:	6809      	ldr	r1, [r1, #0]
    c76a:	430a      	orrs	r2, r1
    c76c:	6022      	str	r2, [r4, #0]
    c76e:	e003      	b.n	c778 <_printf_i+0x70>
    c770:	2a75      	cmp	r2, #117	; 0x75
    c772:	d020      	beq.n	c7b6 <_printf_i+0xae>
    c774:	2a78      	cmp	r2, #120	; 0x78
    c776:	d1de      	bne.n	c736 <_printf_i+0x2e>
    c778:	0022      	movs	r2, r4
    c77a:	2178      	movs	r1, #120	; 0x78
    c77c:	3245      	adds	r2, #69	; 0x45
    c77e:	7011      	strb	r1, [r2, #0]
    c780:	4a6c      	ldr	r2, [pc, #432]	; (c934 <_printf_i+0x22c>)
    c782:	e030      	b.n	c7e6 <_printf_i+0xde>
    c784:	000e      	movs	r6, r1
    c786:	681a      	ldr	r2, [r3, #0]
    c788:	3642      	adds	r6, #66	; 0x42
    c78a:	1d11      	adds	r1, r2, #4
    c78c:	6019      	str	r1, [r3, #0]
    c78e:	6813      	ldr	r3, [r2, #0]
    c790:	7033      	strb	r3, [r6, #0]
    c792:	2301      	movs	r3, #1
    c794:	e079      	b.n	c88a <_printf_i+0x182>
    c796:	0649      	lsls	r1, r1, #25
    c798:	d5d9      	bpl.n	c74e <_printf_i+0x46>
    c79a:	1d11      	adds	r1, r2, #4
    c79c:	6019      	str	r1, [r3, #0]
    c79e:	2300      	movs	r3, #0
    c7a0:	5ed5      	ldrsh	r5, [r2, r3]
    c7a2:	2d00      	cmp	r5, #0
    c7a4:	da03      	bge.n	c7ae <_printf_i+0xa6>
    c7a6:	232d      	movs	r3, #45	; 0x2d
    c7a8:	9a04      	ldr	r2, [sp, #16]
    c7aa:	426d      	negs	r5, r5
    c7ac:	7013      	strb	r3, [r2, #0]
    c7ae:	4b62      	ldr	r3, [pc, #392]	; (c938 <_printf_i+0x230>)
    c7b0:	270a      	movs	r7, #10
    c7b2:	9303      	str	r3, [sp, #12]
    c7b4:	e02f      	b.n	c816 <_printf_i+0x10e>
    c7b6:	6820      	ldr	r0, [r4, #0]
    c7b8:	6819      	ldr	r1, [r3, #0]
    c7ba:	0605      	lsls	r5, r0, #24
    c7bc:	d503      	bpl.n	c7c6 <_printf_i+0xbe>
    c7be:	1d08      	adds	r0, r1, #4
    c7c0:	6018      	str	r0, [r3, #0]
    c7c2:	680d      	ldr	r5, [r1, #0]
    c7c4:	e005      	b.n	c7d2 <_printf_i+0xca>
    c7c6:	0640      	lsls	r0, r0, #25
    c7c8:	d5f9      	bpl.n	c7be <_printf_i+0xb6>
    c7ca:	680d      	ldr	r5, [r1, #0]
    c7cc:	1d08      	adds	r0, r1, #4
    c7ce:	6018      	str	r0, [r3, #0]
    c7d0:	b2ad      	uxth	r5, r5
    c7d2:	4b59      	ldr	r3, [pc, #356]	; (c938 <_printf_i+0x230>)
    c7d4:	2708      	movs	r7, #8
    c7d6:	9303      	str	r3, [sp, #12]
    c7d8:	2a6f      	cmp	r2, #111	; 0x6f
    c7da:	d018      	beq.n	c80e <_printf_i+0x106>
    c7dc:	270a      	movs	r7, #10
    c7de:	e016      	b.n	c80e <_printf_i+0x106>
    c7e0:	3145      	adds	r1, #69	; 0x45
    c7e2:	700a      	strb	r2, [r1, #0]
    c7e4:	4a54      	ldr	r2, [pc, #336]	; (c938 <_printf_i+0x230>)
    c7e6:	9203      	str	r2, [sp, #12]
    c7e8:	681a      	ldr	r2, [r3, #0]
    c7ea:	6821      	ldr	r1, [r4, #0]
    c7ec:	1d10      	adds	r0, r2, #4
    c7ee:	6018      	str	r0, [r3, #0]
    c7f0:	6815      	ldr	r5, [r2, #0]
    c7f2:	0608      	lsls	r0, r1, #24
    c7f4:	d522      	bpl.n	c83c <_printf_i+0x134>
    c7f6:	07cb      	lsls	r3, r1, #31
    c7f8:	d502      	bpl.n	c800 <_printf_i+0xf8>
    c7fa:	2320      	movs	r3, #32
    c7fc:	4319      	orrs	r1, r3
    c7fe:	6021      	str	r1, [r4, #0]
    c800:	2710      	movs	r7, #16
    c802:	2d00      	cmp	r5, #0
    c804:	d103      	bne.n	c80e <_printf_i+0x106>
    c806:	2320      	movs	r3, #32
    c808:	6822      	ldr	r2, [r4, #0]
    c80a:	439a      	bics	r2, r3
    c80c:	6022      	str	r2, [r4, #0]
    c80e:	0023      	movs	r3, r4
    c810:	2200      	movs	r2, #0
    c812:	3343      	adds	r3, #67	; 0x43
    c814:	701a      	strb	r2, [r3, #0]
    c816:	6863      	ldr	r3, [r4, #4]
    c818:	60a3      	str	r3, [r4, #8]
    c81a:	2b00      	cmp	r3, #0
    c81c:	db5c      	blt.n	c8d8 <_printf_i+0x1d0>
    c81e:	2204      	movs	r2, #4
    c820:	6821      	ldr	r1, [r4, #0]
    c822:	4391      	bics	r1, r2
    c824:	6021      	str	r1, [r4, #0]
    c826:	2d00      	cmp	r5, #0
    c828:	d158      	bne.n	c8dc <_printf_i+0x1d4>
    c82a:	9e04      	ldr	r6, [sp, #16]
    c82c:	2b00      	cmp	r3, #0
    c82e:	d064      	beq.n	c8fa <_printf_i+0x1f2>
    c830:	0026      	movs	r6, r4
    c832:	9b03      	ldr	r3, [sp, #12]
    c834:	3642      	adds	r6, #66	; 0x42
    c836:	781b      	ldrb	r3, [r3, #0]
    c838:	7033      	strb	r3, [r6, #0]
    c83a:	e05e      	b.n	c8fa <_printf_i+0x1f2>
    c83c:	0648      	lsls	r0, r1, #25
    c83e:	d5da      	bpl.n	c7f6 <_printf_i+0xee>
    c840:	b2ad      	uxth	r5, r5
    c842:	e7d8      	b.n	c7f6 <_printf_i+0xee>
    c844:	6809      	ldr	r1, [r1, #0]
    c846:	681a      	ldr	r2, [r3, #0]
    c848:	0608      	lsls	r0, r1, #24
    c84a:	d505      	bpl.n	c858 <_printf_i+0x150>
    c84c:	1d11      	adds	r1, r2, #4
    c84e:	6019      	str	r1, [r3, #0]
    c850:	6813      	ldr	r3, [r2, #0]
    c852:	6962      	ldr	r2, [r4, #20]
    c854:	601a      	str	r2, [r3, #0]
    c856:	e006      	b.n	c866 <_printf_i+0x15e>
    c858:	0649      	lsls	r1, r1, #25
    c85a:	d5f7      	bpl.n	c84c <_printf_i+0x144>
    c85c:	1d11      	adds	r1, r2, #4
    c85e:	6019      	str	r1, [r3, #0]
    c860:	6813      	ldr	r3, [r2, #0]
    c862:	8aa2      	ldrh	r2, [r4, #20]
    c864:	801a      	strh	r2, [r3, #0]
    c866:	2300      	movs	r3, #0
    c868:	9e04      	ldr	r6, [sp, #16]
    c86a:	6123      	str	r3, [r4, #16]
    c86c:	e054      	b.n	c918 <_printf_i+0x210>
    c86e:	681a      	ldr	r2, [r3, #0]
    c870:	1d11      	adds	r1, r2, #4
    c872:	6019      	str	r1, [r3, #0]
    c874:	6816      	ldr	r6, [r2, #0]
    c876:	2100      	movs	r1, #0
    c878:	6862      	ldr	r2, [r4, #4]
    c87a:	0030      	movs	r0, r6
    c87c:	f001 fda2 	bl	e3c4 <memchr>
    c880:	2800      	cmp	r0, #0
    c882:	d001      	beq.n	c888 <_printf_i+0x180>
    c884:	1b80      	subs	r0, r0, r6
    c886:	6060      	str	r0, [r4, #4]
    c888:	6863      	ldr	r3, [r4, #4]
    c88a:	6123      	str	r3, [r4, #16]
    c88c:	2300      	movs	r3, #0
    c88e:	9a04      	ldr	r2, [sp, #16]
    c890:	7013      	strb	r3, [r2, #0]
    c892:	e041      	b.n	c918 <_printf_i+0x210>
    c894:	6923      	ldr	r3, [r4, #16]
    c896:	0032      	movs	r2, r6
    c898:	9906      	ldr	r1, [sp, #24]
    c89a:	9805      	ldr	r0, [sp, #20]
    c89c:	9d07      	ldr	r5, [sp, #28]
    c89e:	47a8      	blx	r5
    c8a0:	1c43      	adds	r3, r0, #1
    c8a2:	d043      	beq.n	c92c <_printf_i+0x224>
    c8a4:	6823      	ldr	r3, [r4, #0]
    c8a6:	2500      	movs	r5, #0
    c8a8:	079b      	lsls	r3, r3, #30
    c8aa:	d40f      	bmi.n	c8cc <_printf_i+0x1c4>
    c8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8ae:	68e0      	ldr	r0, [r4, #12]
    c8b0:	4298      	cmp	r0, r3
    c8b2:	da3d      	bge.n	c930 <_printf_i+0x228>
    c8b4:	0018      	movs	r0, r3
    c8b6:	e03b      	b.n	c930 <_printf_i+0x228>
    c8b8:	0022      	movs	r2, r4
    c8ba:	2301      	movs	r3, #1
    c8bc:	3219      	adds	r2, #25
    c8be:	9906      	ldr	r1, [sp, #24]
    c8c0:	9805      	ldr	r0, [sp, #20]
    c8c2:	9e07      	ldr	r6, [sp, #28]
    c8c4:	47b0      	blx	r6
    c8c6:	1c43      	adds	r3, r0, #1
    c8c8:	d030      	beq.n	c92c <_printf_i+0x224>
    c8ca:	3501      	adds	r5, #1
    c8cc:	68e3      	ldr	r3, [r4, #12]
    c8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c8d0:	1a9b      	subs	r3, r3, r2
    c8d2:	429d      	cmp	r5, r3
    c8d4:	dbf0      	blt.n	c8b8 <_printf_i+0x1b0>
    c8d6:	e7e9      	b.n	c8ac <_printf_i+0x1a4>
    c8d8:	2d00      	cmp	r5, #0
    c8da:	d0a9      	beq.n	c830 <_printf_i+0x128>
    c8dc:	9e04      	ldr	r6, [sp, #16]
    c8de:	0028      	movs	r0, r5
    c8e0:	0039      	movs	r1, r7
    c8e2:	f7fb fe8d 	bl	8600 <__aeabi_uidivmod>
    c8e6:	9b03      	ldr	r3, [sp, #12]
    c8e8:	3e01      	subs	r6, #1
    c8ea:	5c5b      	ldrb	r3, [r3, r1]
    c8ec:	0028      	movs	r0, r5
    c8ee:	7033      	strb	r3, [r6, #0]
    c8f0:	0039      	movs	r1, r7
    c8f2:	f7fb fdff 	bl	84f4 <__udivsi3>
    c8f6:	1e05      	subs	r5, r0, #0
    c8f8:	d1f1      	bne.n	c8de <_printf_i+0x1d6>
    c8fa:	2f08      	cmp	r7, #8
    c8fc:	d109      	bne.n	c912 <_printf_i+0x20a>
    c8fe:	6823      	ldr	r3, [r4, #0]
    c900:	07db      	lsls	r3, r3, #31
    c902:	d506      	bpl.n	c912 <_printf_i+0x20a>
    c904:	6863      	ldr	r3, [r4, #4]
    c906:	6922      	ldr	r2, [r4, #16]
    c908:	4293      	cmp	r3, r2
    c90a:	dc02      	bgt.n	c912 <_printf_i+0x20a>
    c90c:	2330      	movs	r3, #48	; 0x30
    c90e:	3e01      	subs	r6, #1
    c910:	7033      	strb	r3, [r6, #0]
    c912:	9b04      	ldr	r3, [sp, #16]
    c914:	1b9b      	subs	r3, r3, r6
    c916:	6123      	str	r3, [r4, #16]
    c918:	9b07      	ldr	r3, [sp, #28]
    c91a:	aa09      	add	r2, sp, #36	; 0x24
    c91c:	9300      	str	r3, [sp, #0]
    c91e:	0021      	movs	r1, r4
    c920:	9b06      	ldr	r3, [sp, #24]
    c922:	9805      	ldr	r0, [sp, #20]
    c924:	f7ff fe82 	bl	c62c <_printf_common>
    c928:	1c43      	adds	r3, r0, #1
    c92a:	d1b3      	bne.n	c894 <_printf_i+0x18c>
    c92c:	2001      	movs	r0, #1
    c92e:	4240      	negs	r0, r0
    c930:	b00b      	add	sp, #44	; 0x2c
    c932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c934:	00010fca 	.word	0x00010fca
    c938:	00010fb9 	.word	0x00010fb9

0000c93c <_sbrk_r>:
    c93c:	2300      	movs	r3, #0
    c93e:	b570      	push	{r4, r5, r6, lr}
    c940:	4c06      	ldr	r4, [pc, #24]	; (c95c <_sbrk_r+0x20>)
    c942:	0005      	movs	r5, r0
    c944:	0008      	movs	r0, r1
    c946:	6023      	str	r3, [r4, #0]
    c948:	f002 ff9c 	bl	f884 <_sbrk>
    c94c:	1c43      	adds	r3, r0, #1
    c94e:	d103      	bne.n	c958 <_sbrk_r+0x1c>
    c950:	6823      	ldr	r3, [r4, #0]
    c952:	2b00      	cmp	r3, #0
    c954:	d000      	beq.n	c958 <_sbrk_r+0x1c>
    c956:	602b      	str	r3, [r5, #0]
    c958:	bd70      	pop	{r4, r5, r6, pc}
    c95a:	46c0      	nop			; (mov r8, r8)
    c95c:	20001e60 	.word	0x20001e60

0000c960 <siprintf>:
    c960:	b40e      	push	{r1, r2, r3}
    c962:	b510      	push	{r4, lr}
    c964:	b09d      	sub	sp, #116	; 0x74
    c966:	a902      	add	r1, sp, #8
    c968:	9002      	str	r0, [sp, #8]
    c96a:	6108      	str	r0, [r1, #16]
    c96c:	480b      	ldr	r0, [pc, #44]	; (c99c <siprintf+0x3c>)
    c96e:	2482      	movs	r4, #130	; 0x82
    c970:	6088      	str	r0, [r1, #8]
    c972:	6148      	str	r0, [r1, #20]
    c974:	2001      	movs	r0, #1
    c976:	4240      	negs	r0, r0
    c978:	ab1f      	add	r3, sp, #124	; 0x7c
    c97a:	81c8      	strh	r0, [r1, #14]
    c97c:	4808      	ldr	r0, [pc, #32]	; (c9a0 <siprintf+0x40>)
    c97e:	cb04      	ldmia	r3!, {r2}
    c980:	00a4      	lsls	r4, r4, #2
    c982:	6800      	ldr	r0, [r0, #0]
    c984:	9301      	str	r3, [sp, #4]
    c986:	818c      	strh	r4, [r1, #12]
    c988:	f002 f8a2 	bl	ead0 <_svfiprintf_r>
    c98c:	2300      	movs	r3, #0
    c98e:	9a02      	ldr	r2, [sp, #8]
    c990:	7013      	strb	r3, [r2, #0]
    c992:	b01d      	add	sp, #116	; 0x74
    c994:	bc10      	pop	{r4}
    c996:	bc08      	pop	{r3}
    c998:	b003      	add	sp, #12
    c99a:	4718      	bx	r3
    c99c:	7fffffff 	.word	0x7fffffff
    c9a0:	200000b4 	.word	0x200000b4

0000c9a4 <strcat>:
    c9a4:	0002      	movs	r2, r0
    c9a6:	b510      	push	{r4, lr}
    c9a8:	7813      	ldrb	r3, [r2, #0]
    c9aa:	2b00      	cmp	r3, #0
    c9ac:	d105      	bne.n	c9ba <strcat+0x16>
    c9ae:	5ccc      	ldrb	r4, [r1, r3]
    c9b0:	54d4      	strb	r4, [r2, r3]
    c9b2:	3301      	adds	r3, #1
    c9b4:	2c00      	cmp	r4, #0
    c9b6:	d1fa      	bne.n	c9ae <strcat+0xa>
    c9b8:	bd10      	pop	{r4, pc}
    c9ba:	3201      	adds	r2, #1
    c9bc:	e7f4      	b.n	c9a8 <strcat+0x4>

0000c9be <strcmp>:
    c9be:	7802      	ldrb	r2, [r0, #0]
    c9c0:	780b      	ldrb	r3, [r1, #0]
    c9c2:	2a00      	cmp	r2, #0
    c9c4:	d003      	beq.n	c9ce <strcmp+0x10>
    c9c6:	3001      	adds	r0, #1
    c9c8:	3101      	adds	r1, #1
    c9ca:	429a      	cmp	r2, r3
    c9cc:	d0f7      	beq.n	c9be <strcmp>
    c9ce:	1ad0      	subs	r0, r2, r3
    c9d0:	4770      	bx	lr

0000c9d2 <strcpy>:
    c9d2:	1c03      	adds	r3, r0, #0
    c9d4:	780a      	ldrb	r2, [r1, #0]
    c9d6:	3101      	adds	r1, #1
    c9d8:	701a      	strb	r2, [r3, #0]
    c9da:	3301      	adds	r3, #1
    c9dc:	2a00      	cmp	r2, #0
    c9de:	d1f9      	bne.n	c9d4 <strcpy+0x2>
    c9e0:	4770      	bx	lr

0000c9e2 <strlen>:
    c9e2:	2300      	movs	r3, #0
    c9e4:	5cc2      	ldrb	r2, [r0, r3]
    c9e6:	3301      	adds	r3, #1
    c9e8:	2a00      	cmp	r2, #0
    c9ea:	d1fb      	bne.n	c9e4 <strlen+0x2>
    c9ec:	1e58      	subs	r0, r3, #1
    c9ee:	4770      	bx	lr

0000c9f0 <strncat>:
    c9f0:	0003      	movs	r3, r0
    c9f2:	b510      	push	{r4, lr}
    c9f4:	781c      	ldrb	r4, [r3, #0]
    c9f6:	2c00      	cmp	r4, #0
    c9f8:	d107      	bne.n	ca0a <strncat+0x1a>
    c9fa:	3a01      	subs	r2, #1
    c9fc:	1c54      	adds	r4, r2, #1
    c9fe:	d003      	beq.n	ca08 <strncat+0x18>
    ca00:	780c      	ldrb	r4, [r1, #0]
    ca02:	701c      	strb	r4, [r3, #0]
    ca04:	2c00      	cmp	r4, #0
    ca06:	d102      	bne.n	ca0e <strncat+0x1e>
    ca08:	bd10      	pop	{r4, pc}
    ca0a:	3301      	adds	r3, #1
    ca0c:	e7f2      	b.n	c9f4 <strncat+0x4>
    ca0e:	2a00      	cmp	r2, #0
    ca10:	d100      	bne.n	ca14 <strncat+0x24>
    ca12:	705a      	strb	r2, [r3, #1]
    ca14:	3301      	adds	r3, #1
    ca16:	3101      	adds	r1, #1
    ca18:	e7ef      	b.n	c9fa <strncat+0xa>

0000ca1a <strncmp>:
    ca1a:	2300      	movs	r3, #0
    ca1c:	b530      	push	{r4, r5, lr}
    ca1e:	429a      	cmp	r2, r3
    ca20:	d00a      	beq.n	ca38 <strncmp+0x1e>
    ca22:	3a01      	subs	r2, #1
    ca24:	5cc4      	ldrb	r4, [r0, r3]
    ca26:	5ccd      	ldrb	r5, [r1, r3]
    ca28:	42ac      	cmp	r4, r5
    ca2a:	d104      	bne.n	ca36 <strncmp+0x1c>
    ca2c:	429a      	cmp	r2, r3
    ca2e:	d002      	beq.n	ca36 <strncmp+0x1c>
    ca30:	3301      	adds	r3, #1
    ca32:	2c00      	cmp	r4, #0
    ca34:	d1f6      	bne.n	ca24 <strncmp+0xa>
    ca36:	1b63      	subs	r3, r4, r5
    ca38:	0018      	movs	r0, r3
    ca3a:	bd30      	pop	{r4, r5, pc}

0000ca3c <strncpy>:
    ca3c:	b570      	push	{r4, r5, r6, lr}
    ca3e:	0004      	movs	r4, r0
    ca40:	2a00      	cmp	r2, #0
    ca42:	d100      	bne.n	ca46 <strncpy+0xa>
    ca44:	bd70      	pop	{r4, r5, r6, pc}
    ca46:	780d      	ldrb	r5, [r1, #0]
    ca48:	1e56      	subs	r6, r2, #1
    ca4a:	1c63      	adds	r3, r4, #1
    ca4c:	7025      	strb	r5, [r4, #0]
    ca4e:	3101      	adds	r1, #1
    ca50:	2d00      	cmp	r5, #0
    ca52:	d105      	bne.n	ca60 <strncpy+0x24>
    ca54:	18a4      	adds	r4, r4, r2
    ca56:	429c      	cmp	r4, r3
    ca58:	d0f4      	beq.n	ca44 <strncpy+0x8>
    ca5a:	701d      	strb	r5, [r3, #0]
    ca5c:	3301      	adds	r3, #1
    ca5e:	e7fa      	b.n	ca56 <strncpy+0x1a>
    ca60:	001c      	movs	r4, r3
    ca62:	0032      	movs	r2, r6
    ca64:	e7ec      	b.n	ca40 <strncpy+0x4>
	...

0000ca68 <_strtol_l.isra.0>:
    ca68:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca6a:	001f      	movs	r7, r3
    ca6c:	000e      	movs	r6, r1
    ca6e:	b087      	sub	sp, #28
    ca70:	9005      	str	r0, [sp, #20]
    ca72:	9103      	str	r1, [sp, #12]
    ca74:	9202      	str	r2, [sp, #8]
    ca76:	980c      	ldr	r0, [sp, #48]	; 0x30
    ca78:	7834      	ldrb	r4, [r6, #0]
    ca7a:	f7fe fe43 	bl	b704 <__locale_ctype_ptr_l>
    ca7e:	2208      	movs	r2, #8
    ca80:	1900      	adds	r0, r0, r4
    ca82:	7843      	ldrb	r3, [r0, #1]
    ca84:	1c75      	adds	r5, r6, #1
    ca86:	4013      	ands	r3, r2
    ca88:	d10c      	bne.n	caa4 <_strtol_l.isra.0+0x3c>
    ca8a:	2c2d      	cmp	r4, #45	; 0x2d
    ca8c:	d10c      	bne.n	caa8 <_strtol_l.isra.0+0x40>
    ca8e:	3301      	adds	r3, #1
    ca90:	782c      	ldrb	r4, [r5, #0]
    ca92:	9301      	str	r3, [sp, #4]
    ca94:	1cb5      	adds	r5, r6, #2
    ca96:	2f00      	cmp	r7, #0
    ca98:	d00c      	beq.n	cab4 <_strtol_l.isra.0+0x4c>
    ca9a:	2f10      	cmp	r7, #16
    ca9c:	d114      	bne.n	cac8 <_strtol_l.isra.0+0x60>
    ca9e:	2c30      	cmp	r4, #48	; 0x30
    caa0:	d00a      	beq.n	cab8 <_strtol_l.isra.0+0x50>
    caa2:	e011      	b.n	cac8 <_strtol_l.isra.0+0x60>
    caa4:	002e      	movs	r6, r5
    caa6:	e7e6      	b.n	ca76 <_strtol_l.isra.0+0xe>
    caa8:	9301      	str	r3, [sp, #4]
    caaa:	2c2b      	cmp	r4, #43	; 0x2b
    caac:	d1f3      	bne.n	ca96 <_strtol_l.isra.0+0x2e>
    caae:	782c      	ldrb	r4, [r5, #0]
    cab0:	1cb5      	adds	r5, r6, #2
    cab2:	e7f0      	b.n	ca96 <_strtol_l.isra.0+0x2e>
    cab4:	2c30      	cmp	r4, #48	; 0x30
    cab6:	d12f      	bne.n	cb18 <_strtol_l.isra.0+0xb0>
    cab8:	2220      	movs	r2, #32
    caba:	782b      	ldrb	r3, [r5, #0]
    cabc:	4393      	bics	r3, r2
    cabe:	2b58      	cmp	r3, #88	; 0x58
    cac0:	d151      	bne.n	cb66 <_strtol_l.isra.0+0xfe>
    cac2:	2710      	movs	r7, #16
    cac4:	786c      	ldrb	r4, [r5, #1]
    cac6:	3502      	adds	r5, #2
    cac8:	9b01      	ldr	r3, [sp, #4]
    caca:	4a29      	ldr	r2, [pc, #164]	; (cb70 <_strtol_l.isra.0+0x108>)
    cacc:	0039      	movs	r1, r7
    cace:	189e      	adds	r6, r3, r2
    cad0:	0030      	movs	r0, r6
    cad2:	f7fb fd95 	bl	8600 <__aeabi_uidivmod>
    cad6:	0030      	movs	r0, r6
    cad8:	9104      	str	r1, [sp, #16]
    cada:	0039      	movs	r1, r7
    cadc:	f7fb fd0a 	bl	84f4 <__udivsi3>
    cae0:	2101      	movs	r1, #1
    cae2:	2300      	movs	r3, #0
    cae4:	4249      	negs	r1, r1
    cae6:	0002      	movs	r2, r0
    cae8:	468c      	mov	ip, r1
    caea:	0018      	movs	r0, r3
    caec:	0021      	movs	r1, r4
    caee:	3930      	subs	r1, #48	; 0x30
    caf0:	2909      	cmp	r1, #9
    caf2:	d813      	bhi.n	cb1c <_strtol_l.isra.0+0xb4>
    caf4:	000c      	movs	r4, r1
    caf6:	42a7      	cmp	r7, r4
    caf8:	dd1c      	ble.n	cb34 <_strtol_l.isra.0+0xcc>
    cafa:	1c59      	adds	r1, r3, #1
    cafc:	d009      	beq.n	cb12 <_strtol_l.isra.0+0xaa>
    cafe:	4663      	mov	r3, ip
    cb00:	4282      	cmp	r2, r0
    cb02:	d306      	bcc.n	cb12 <_strtol_l.isra.0+0xaa>
    cb04:	d102      	bne.n	cb0c <_strtol_l.isra.0+0xa4>
    cb06:	9904      	ldr	r1, [sp, #16]
    cb08:	42a1      	cmp	r1, r4
    cb0a:	db02      	blt.n	cb12 <_strtol_l.isra.0+0xaa>
    cb0c:	2301      	movs	r3, #1
    cb0e:	4378      	muls	r0, r7
    cb10:	1820      	adds	r0, r4, r0
    cb12:	782c      	ldrb	r4, [r5, #0]
    cb14:	3501      	adds	r5, #1
    cb16:	e7e9      	b.n	caec <_strtol_l.isra.0+0x84>
    cb18:	270a      	movs	r7, #10
    cb1a:	e7d5      	b.n	cac8 <_strtol_l.isra.0+0x60>
    cb1c:	0021      	movs	r1, r4
    cb1e:	3941      	subs	r1, #65	; 0x41
    cb20:	2919      	cmp	r1, #25
    cb22:	d801      	bhi.n	cb28 <_strtol_l.isra.0+0xc0>
    cb24:	3c37      	subs	r4, #55	; 0x37
    cb26:	e7e6      	b.n	caf6 <_strtol_l.isra.0+0x8e>
    cb28:	0021      	movs	r1, r4
    cb2a:	3961      	subs	r1, #97	; 0x61
    cb2c:	2919      	cmp	r1, #25
    cb2e:	d801      	bhi.n	cb34 <_strtol_l.isra.0+0xcc>
    cb30:	3c57      	subs	r4, #87	; 0x57
    cb32:	e7e0      	b.n	caf6 <_strtol_l.isra.0+0x8e>
    cb34:	1c5a      	adds	r2, r3, #1
    cb36:	d108      	bne.n	cb4a <_strtol_l.isra.0+0xe2>
    cb38:	9a05      	ldr	r2, [sp, #20]
    cb3a:	3323      	adds	r3, #35	; 0x23
    cb3c:	6013      	str	r3, [r2, #0]
    cb3e:	9b02      	ldr	r3, [sp, #8]
    cb40:	0030      	movs	r0, r6
    cb42:	2b00      	cmp	r3, #0
    cb44:	d10b      	bne.n	cb5e <_strtol_l.isra.0+0xf6>
    cb46:	b007      	add	sp, #28
    cb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb4a:	9a01      	ldr	r2, [sp, #4]
    cb4c:	2a00      	cmp	r2, #0
    cb4e:	d000      	beq.n	cb52 <_strtol_l.isra.0+0xea>
    cb50:	4240      	negs	r0, r0
    cb52:	9a02      	ldr	r2, [sp, #8]
    cb54:	2a00      	cmp	r2, #0
    cb56:	d0f6      	beq.n	cb46 <_strtol_l.isra.0+0xde>
    cb58:	9a03      	ldr	r2, [sp, #12]
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d000      	beq.n	cb60 <_strtol_l.isra.0+0xf8>
    cb5e:	1e6a      	subs	r2, r5, #1
    cb60:	9b02      	ldr	r3, [sp, #8]
    cb62:	601a      	str	r2, [r3, #0]
    cb64:	e7ef      	b.n	cb46 <_strtol_l.isra.0+0xde>
    cb66:	2430      	movs	r4, #48	; 0x30
    cb68:	2f00      	cmp	r7, #0
    cb6a:	d1ad      	bne.n	cac8 <_strtol_l.isra.0+0x60>
    cb6c:	3708      	adds	r7, #8
    cb6e:	e7ab      	b.n	cac8 <_strtol_l.isra.0+0x60>
    cb70:	7fffffff 	.word	0x7fffffff

0000cb74 <_strtol_r>:
    cb74:	b513      	push	{r0, r1, r4, lr}
    cb76:	4c05      	ldr	r4, [pc, #20]	; (cb8c <_strtol_r+0x18>)
    cb78:	6824      	ldr	r4, [r4, #0]
    cb7a:	6a24      	ldr	r4, [r4, #32]
    cb7c:	2c00      	cmp	r4, #0
    cb7e:	d100      	bne.n	cb82 <_strtol_r+0xe>
    cb80:	4c03      	ldr	r4, [pc, #12]	; (cb90 <_strtol_r+0x1c>)
    cb82:	9400      	str	r4, [sp, #0]
    cb84:	f7ff ff70 	bl	ca68 <_strtol_l.isra.0>
    cb88:	bd16      	pop	{r1, r2, r4, pc}
    cb8a:	46c0      	nop			; (mov r8, r8)
    cb8c:	200000b4 	.word	0x200000b4
    cb90:	20000118 	.word	0x20000118

0000cb94 <sbrk>:
    cb94:	b510      	push	{r4, lr}
    cb96:	4b03      	ldr	r3, [pc, #12]	; (cba4 <sbrk+0x10>)
    cb98:	0001      	movs	r1, r0
    cb9a:	6818      	ldr	r0, [r3, #0]
    cb9c:	f7ff fece 	bl	c93c <_sbrk_r>
    cba0:	bd10      	pop	{r4, pc}
    cba2:	46c0      	nop			; (mov r8, r8)
    cba4:	200000b4 	.word	0x200000b4

0000cba8 <__tzcalc_limits>:
    cba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbaa:	b089      	sub	sp, #36	; 0x24
    cbac:	0004      	movs	r4, r0
    cbae:	f001 fb8d 	bl	e2cc <__gettzinfo>
    cbb2:	4b4c      	ldr	r3, [pc, #304]	; (cce4 <__tzcalc_limits+0x13c>)
    cbb4:	0007      	movs	r7, r0
    cbb6:	2000      	movs	r0, #0
    cbb8:	429c      	cmp	r4, r3
    cbba:	dd58      	ble.n	cc6e <__tzcalc_limits+0xc6>
    cbbc:	256e      	movs	r5, #110	; 0x6e
    cbbe:	2164      	movs	r1, #100	; 0x64
    cbc0:	4b49      	ldr	r3, [pc, #292]	; (cce8 <__tzcalc_limits+0x140>)
    cbc2:	35ff      	adds	r5, #255	; 0xff
    cbc4:	18e0      	adds	r0, r4, r3
    cbc6:	4345      	muls	r5, r0
    cbc8:	4b48      	ldr	r3, [pc, #288]	; (ccec <__tzcalc_limits+0x144>)
    cbca:	607c      	str	r4, [r7, #4]
    cbcc:	18e0      	adds	r0, r4, r3
    cbce:	4b48      	ldr	r3, [pc, #288]	; (ccf0 <__tzcalc_limits+0x148>)
    cbd0:	1080      	asrs	r0, r0, #2
    cbd2:	182d      	adds	r5, r5, r0
    cbd4:	4249      	negs	r1, r1
    cbd6:	18e0      	adds	r0, r4, r3
    cbd8:	f7fb fd16 	bl	8608 <__divsi3>
    cbdc:	21c8      	movs	r1, #200	; 0xc8
    cbde:	4b45      	ldr	r3, [pc, #276]	; (ccf4 <__tzcalc_limits+0x14c>)
    cbe0:	182d      	adds	r5, r5, r0
    cbe2:	0049      	lsls	r1, r1, #1
    cbe4:	18e0      	adds	r0, r4, r3
    cbe6:	f7fb fd0f 	bl	8608 <__divsi3>
    cbea:	2164      	movs	r1, #100	; 0x64
    cbec:	182b      	adds	r3, r5, r0
    cbee:	0020      	movs	r0, r4
    cbf0:	9301      	str	r3, [sp, #4]
    cbf2:	f7fb fdef 	bl	87d4 <__aeabi_idivmod>
    cbf6:	9102      	str	r1, [sp, #8]
    cbf8:	21c8      	movs	r1, #200	; 0xc8
    cbfa:	0020      	movs	r0, r4
    cbfc:	0049      	lsls	r1, r1, #1
    cbfe:	f7fb fde9 	bl	87d4 <__aeabi_idivmod>
    cc02:	000a      	movs	r2, r1
    cc04:	4253      	negs	r3, r2
    cc06:	415a      	adcs	r2, r3
    cc08:	003b      	movs	r3, r7
    cc0a:	3340      	adds	r3, #64	; 0x40
    cc0c:	9307      	str	r3, [sp, #28]
    cc0e:	2303      	movs	r3, #3
    cc10:	003d      	movs	r5, r7
    cc12:	401c      	ands	r4, r3
    cc14:	9103      	str	r1, [sp, #12]
    cc16:	9205      	str	r2, [sp, #20]
    cc18:	3508      	adds	r5, #8
    cc1a:	9406      	str	r4, [sp, #24]
    cc1c:	782b      	ldrb	r3, [r5, #0]
    cc1e:	2b4a      	cmp	r3, #74	; 0x4a
    cc20:	d127      	bne.n	cc72 <__tzcalc_limits+0xca>
    cc22:	9a01      	ldr	r2, [sp, #4]
    cc24:	68eb      	ldr	r3, [r5, #12]
    cc26:	18d1      	adds	r1, r2, r3
    cc28:	9a06      	ldr	r2, [sp, #24]
    cc2a:	2a00      	cmp	r2, #0
    cc2c:	d102      	bne.n	cc34 <__tzcalc_limits+0x8c>
    cc2e:	9a02      	ldr	r2, [sp, #8]
    cc30:	2a00      	cmp	r2, #0
    cc32:	d103      	bne.n	cc3c <__tzcalc_limits+0x94>
    cc34:	2400      	movs	r4, #0
    cc36:	9a03      	ldr	r2, [sp, #12]
    cc38:	42a2      	cmp	r2, r4
    cc3a:	d103      	bne.n	cc44 <__tzcalc_limits+0x9c>
    cc3c:	2401      	movs	r4, #1
    cc3e:	2b3b      	cmp	r3, #59	; 0x3b
    cc40:	dc00      	bgt.n	cc44 <__tzcalc_limits+0x9c>
    cc42:	2400      	movs	r4, #0
    cc44:	1864      	adds	r4, r4, r1
    cc46:	3c01      	subs	r4, #1
    cc48:	492b      	ldr	r1, [pc, #172]	; (ccf8 <__tzcalc_limits+0x150>)
    cc4a:	692b      	ldr	r3, [r5, #16]
    cc4c:	434c      	muls	r4, r1
    cc4e:	18e4      	adds	r4, r4, r3
    cc50:	69ab      	ldr	r3, [r5, #24]
    cc52:	18e4      	adds	r4, r4, r3
    cc54:	9b07      	ldr	r3, [sp, #28]
    cc56:	616c      	str	r4, [r5, #20]
    cc58:	351c      	adds	r5, #28
    cc5a:	42ab      	cmp	r3, r5
    cc5c:	d1de      	bne.n	cc1c <__tzcalc_limits+0x74>
    cc5e:	69fa      	ldr	r2, [r7, #28]
    cc60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    cc62:	2301      	movs	r3, #1
    cc64:	428a      	cmp	r2, r1
    cc66:	db00      	blt.n	cc6a <__tzcalc_limits+0xc2>
    cc68:	2300      	movs	r3, #0
    cc6a:	2001      	movs	r0, #1
    cc6c:	603b      	str	r3, [r7, #0]
    cc6e:	b009      	add	sp, #36	; 0x24
    cc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc72:	2b44      	cmp	r3, #68	; 0x44
    cc74:	d103      	bne.n	cc7e <__tzcalc_limits+0xd6>
    cc76:	9b01      	ldr	r3, [sp, #4]
    cc78:	68ea      	ldr	r2, [r5, #12]
    cc7a:	189c      	adds	r4, r3, r2
    cc7c:	e7e4      	b.n	cc48 <__tzcalc_limits+0xa0>
    cc7e:	9a06      	ldr	r2, [sp, #24]
    cc80:	9b05      	ldr	r3, [sp, #20]
    cc82:	2a00      	cmp	r2, #0
    cc84:	d103      	bne.n	cc8e <__tzcalc_limits+0xe6>
    cc86:	9a02      	ldr	r2, [sp, #8]
    cc88:	2a00      	cmp	r2, #0
    cc8a:	d000      	beq.n	cc8e <__tzcalc_limits+0xe6>
    cc8c:	2301      	movs	r3, #1
    cc8e:	2230      	movs	r2, #48	; 0x30
    cc90:	4353      	muls	r3, r2
    cc92:	4a1a      	ldr	r2, [pc, #104]	; (ccfc <__tzcalc_limits+0x154>)
    cc94:	686e      	ldr	r6, [r5, #4]
    cc96:	189b      	adds	r3, r3, r2
    cc98:	9304      	str	r3, [sp, #16]
    cc9a:	001a      	movs	r2, r3
    cc9c:	2301      	movs	r3, #1
    cc9e:	9c01      	ldr	r4, [sp, #4]
    cca0:	42b3      	cmp	r3, r6
    cca2:	db18      	blt.n	ccd6 <__tzcalc_limits+0x12e>
    cca4:	2e00      	cmp	r6, #0
    cca6:	dc00      	bgt.n	ccaa <__tzcalc_limits+0x102>
    cca8:	2601      	movs	r6, #1
    ccaa:	1d20      	adds	r0, r4, #4
    ccac:	2107      	movs	r1, #7
    ccae:	f7fb fd91 	bl	87d4 <__aeabi_idivmod>
    ccb2:	68eb      	ldr	r3, [r5, #12]
    ccb4:	1a5b      	subs	r3, r3, r1
    ccb6:	d500      	bpl.n	ccba <__tzcalc_limits+0x112>
    ccb8:	3307      	adds	r3, #7
    ccba:	2107      	movs	r1, #7
    ccbc:	68aa      	ldr	r2, [r5, #8]
    ccbe:	3a01      	subs	r2, #1
    ccc0:	4351      	muls	r1, r2
    ccc2:	18c9      	adds	r1, r1, r3
    ccc4:	4b0e      	ldr	r3, [pc, #56]	; (cd00 <__tzcalc_limits+0x158>)
    ccc6:	18f6      	adds	r6, r6, r3
    ccc8:	9b04      	ldr	r3, [sp, #16]
    ccca:	00b6      	lsls	r6, r6, #2
    cccc:	58f3      	ldr	r3, [r6, r3]
    ccce:	4299      	cmp	r1, r3
    ccd0:	da05      	bge.n	ccde <__tzcalc_limits+0x136>
    ccd2:	1864      	adds	r4, r4, r1
    ccd4:	e7b8      	b.n	cc48 <__tzcalc_limits+0xa0>
    ccd6:	ca02      	ldmia	r2!, {r1}
    ccd8:	3301      	adds	r3, #1
    ccda:	1864      	adds	r4, r4, r1
    ccdc:	e7e0      	b.n	cca0 <__tzcalc_limits+0xf8>
    ccde:	3907      	subs	r1, #7
    cce0:	e7f5      	b.n	ccce <__tzcalc_limits+0x126>
    cce2:	46c0      	nop			; (mov r8, r8)
    cce4:	000007b1 	.word	0x000007b1
    cce8:	fffff84e 	.word	0xfffff84e
    ccec:	fffff84f 	.word	0xfffff84f
    ccf0:	fffff893 	.word	0xfffff893
    ccf4:	fffff9bf 	.word	0xfffff9bf
    ccf8:	00015180 	.word	0x00015180
    ccfc:	00011188 	.word	0x00011188
    cd00:	3fffffff 	.word	0x3fffffff

0000cd04 <__tz_lock>:
    cd04:	4770      	bx	lr

0000cd06 <__tz_unlock>:
    cd06:	4770      	bx	lr

0000cd08 <_tzset_unlocked>:
    cd08:	b510      	push	{r4, lr}
    cd0a:	4b02      	ldr	r3, [pc, #8]	; (cd14 <_tzset_unlocked+0xc>)
    cd0c:	6818      	ldr	r0, [r3, #0]
    cd0e:	f000 f803 	bl	cd18 <_tzset_unlocked_r>
    cd12:	bd10      	pop	{r4, pc}
    cd14:	200000b4 	.word	0x200000b4

0000cd18 <_tzset_unlocked_r>:
    cd18:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd1a:	b08d      	sub	sp, #52	; 0x34
    cd1c:	0007      	movs	r7, r0
    cd1e:	f001 fad5 	bl	e2cc <__gettzinfo>
    cd22:	49af      	ldr	r1, [pc, #700]	; (cfe0 <_tzset_unlocked_r+0x2c8>)
    cd24:	0006      	movs	r6, r0
    cd26:	0038      	movs	r0, r7
    cd28:	f001 faca 	bl	e2c0 <_getenv_r>
    cd2c:	4dad      	ldr	r5, [pc, #692]	; (cfe4 <_tzset_unlocked_r+0x2cc>)
    cd2e:	1e04      	subs	r4, r0, #0
    cd30:	d10d      	bne.n	cd4e <_tzset_unlocked_r+0x36>
    cd32:	4bad      	ldr	r3, [pc, #692]	; (cfe8 <_tzset_unlocked_r+0x2d0>)
    cd34:	4aad      	ldr	r2, [pc, #692]	; (cfec <_tzset_unlocked_r+0x2d4>)
    cd36:	6018      	str	r0, [r3, #0]
    cd38:	4bad      	ldr	r3, [pc, #692]	; (cff0 <_tzset_unlocked_r+0x2d8>)
    cd3a:	6018      	str	r0, [r3, #0]
    cd3c:	4bad      	ldr	r3, [pc, #692]	; (cff4 <_tzset_unlocked_r+0x2dc>)
    cd3e:	6828      	ldr	r0, [r5, #0]
    cd40:	601a      	str	r2, [r3, #0]
    cd42:	605a      	str	r2, [r3, #4]
    cd44:	f7fe fcfa 	bl	b73c <free>
    cd48:	602c      	str	r4, [r5, #0]
    cd4a:	b00d      	add	sp, #52	; 0x34
    cd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd4e:	6829      	ldr	r1, [r5, #0]
    cd50:	2900      	cmp	r1, #0
    cd52:	d15a      	bne.n	ce0a <_tzset_unlocked_r+0xf2>
    cd54:	6828      	ldr	r0, [r5, #0]
    cd56:	f7fe fcf1 	bl	b73c <free>
    cd5a:	0020      	movs	r0, r4
    cd5c:	f7ff fe41 	bl	c9e2 <strlen>
    cd60:	1c41      	adds	r1, r0, #1
    cd62:	0038      	movs	r0, r7
    cd64:	f7fe ffd8 	bl	bd18 <_malloc_r>
    cd68:	6028      	str	r0, [r5, #0]
    cd6a:	2800      	cmp	r0, #0
    cd6c:	d152      	bne.n	ce14 <_tzset_unlocked_r+0xfc>
    cd6e:	7823      	ldrb	r3, [r4, #0]
    cd70:	3b3a      	subs	r3, #58	; 0x3a
    cd72:	4259      	negs	r1, r3
    cd74:	4159      	adcs	r1, r3
    cd76:	1864      	adds	r4, r4, r1
    cd78:	ab0a      	add	r3, sp, #40	; 0x28
    cd7a:	4a9f      	ldr	r2, [pc, #636]	; (cff8 <_tzset_unlocked_r+0x2e0>)
    cd7c:	499f      	ldr	r1, [pc, #636]	; (cffc <_tzset_unlocked_r+0x2e4>)
    cd7e:	0020      	movs	r0, r4
    cd80:	f001 fff4 	bl	ed6c <siscanf>
    cd84:	2800      	cmp	r0, #0
    cd86:	dde0      	ble.n	cd4a <_tzset_unlocked_r+0x32>
    cd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd8a:	18e4      	adds	r4, r4, r3
    cd8c:	7823      	ldrb	r3, [r4, #0]
    cd8e:	2b2d      	cmp	r3, #45	; 0x2d
    cd90:	d144      	bne.n	ce1c <_tzset_unlocked_r+0x104>
    cd92:	3b2e      	subs	r3, #46	; 0x2e
    cd94:	3401      	adds	r4, #1
    cd96:	9304      	str	r3, [sp, #16]
    cd98:	2716      	movs	r7, #22
    cd9a:	ab02      	add	r3, sp, #8
    cd9c:	18ff      	adds	r7, r7, r3
    cd9e:	2300      	movs	r3, #0
    cda0:	803b      	strh	r3, [r7, #0]
    cda2:	2300      	movs	r3, #0
    cda4:	ad08      	add	r5, sp, #32
    cda6:	802b      	strh	r3, [r5, #0]
    cda8:	ab0a      	add	r3, sp, #40	; 0x28
    cdaa:	9303      	str	r3, [sp, #12]
    cdac:	9502      	str	r5, [sp, #8]
    cdae:	9301      	str	r3, [sp, #4]
    cdb0:	9700      	str	r7, [sp, #0]
    cdb2:	aa07      	add	r2, sp, #28
    cdb4:	4992      	ldr	r1, [pc, #584]	; (d000 <_tzset_unlocked_r+0x2e8>)
    cdb6:	0020      	movs	r0, r4
    cdb8:	f001 ffd8 	bl	ed6c <siscanf>
    cdbc:	2800      	cmp	r0, #0
    cdbe:	ddc4      	ble.n	cd4a <_tzset_unlocked_r+0x32>
    cdc0:	233c      	movs	r3, #60	; 0x3c
    cdc2:	883a      	ldrh	r2, [r7, #0]
    cdc4:	4f8f      	ldr	r7, [pc, #572]	; (d004 <_tzset_unlocked_r+0x2ec>)
    cdc6:	4353      	muls	r3, r2
    cdc8:	882a      	ldrh	r2, [r5, #0]
    cdca:	4d8a      	ldr	r5, [pc, #552]	; (cff4 <_tzset_unlocked_r+0x2dc>)
    cdcc:	189b      	adds	r3, r3, r2
    cdce:	aa02      	add	r2, sp, #8
    cdd0:	8a91      	ldrh	r1, [r2, #20]
    cdd2:	22e1      	movs	r2, #225	; 0xe1
    cdd4:	0112      	lsls	r2, r2, #4
    cdd6:	434a      	muls	r2, r1
    cdd8:	189b      	adds	r3, r3, r2
    cdda:	9a04      	ldr	r2, [sp, #16]
    cddc:	4987      	ldr	r1, [pc, #540]	; (cffc <_tzset_unlocked_r+0x2e4>)
    cdde:	435a      	muls	r2, r3
    cde0:	4b85      	ldr	r3, [pc, #532]	; (cff8 <_tzset_unlocked_r+0x2e0>)
    cde2:	6232      	str	r2, [r6, #32]
    cde4:	602b      	str	r3, [r5, #0]
    cde6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cde8:	003a      	movs	r2, r7
    cdea:	18e4      	adds	r4, r4, r3
    cdec:	0020      	movs	r0, r4
    cdee:	ab0a      	add	r3, sp, #40	; 0x28
    cdf0:	f001 ffbc 	bl	ed6c <siscanf>
    cdf4:	2800      	cmp	r0, #0
    cdf6:	dc18      	bgt.n	ce2a <_tzset_unlocked_r+0x112>
    cdf8:	682b      	ldr	r3, [r5, #0]
    cdfa:	6a32      	ldr	r2, [r6, #32]
    cdfc:	606b      	str	r3, [r5, #4]
    cdfe:	4b7a      	ldr	r3, [pc, #488]	; (cfe8 <_tzset_unlocked_r+0x2d0>)
    ce00:	601a      	str	r2, [r3, #0]
    ce02:	2200      	movs	r2, #0
    ce04:	4b7a      	ldr	r3, [pc, #488]	; (cff0 <_tzset_unlocked_r+0x2d8>)
    ce06:	601a      	str	r2, [r3, #0]
    ce08:	e79f      	b.n	cd4a <_tzset_unlocked_r+0x32>
    ce0a:	f7ff fdd8 	bl	c9be <strcmp>
    ce0e:	2800      	cmp	r0, #0
    ce10:	d09b      	beq.n	cd4a <_tzset_unlocked_r+0x32>
    ce12:	e79f      	b.n	cd54 <_tzset_unlocked_r+0x3c>
    ce14:	0021      	movs	r1, r4
    ce16:	f7ff fddc 	bl	c9d2 <strcpy>
    ce1a:	e7a8      	b.n	cd6e <_tzset_unlocked_r+0x56>
    ce1c:	2201      	movs	r2, #1
    ce1e:	3b2b      	subs	r3, #43	; 0x2b
    ce20:	9204      	str	r2, [sp, #16]
    ce22:	4259      	negs	r1, r3
    ce24:	4159      	adcs	r1, r3
    ce26:	1864      	adds	r4, r4, r1
    ce28:	e7b6      	b.n	cd98 <_tzset_unlocked_r+0x80>
    ce2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce2c:	606f      	str	r7, [r5, #4]
    ce2e:	18e4      	adds	r4, r4, r3
    ce30:	7823      	ldrb	r3, [r4, #0]
    ce32:	2b2d      	cmp	r3, #45	; 0x2d
    ce34:	d000      	beq.n	ce38 <_tzset_unlocked_r+0x120>
    ce36:	e08f      	b.n	cf58 <_tzset_unlocked_r+0x240>
    ce38:	3b2e      	subs	r3, #46	; 0x2e
    ce3a:	3401      	adds	r4, #1
    ce3c:	9304      	str	r3, [sp, #16]
    ce3e:	2716      	movs	r7, #22
    ce40:	2300      	movs	r3, #0
    ce42:	aa02      	add	r2, sp, #8
    ce44:	18bf      	adds	r7, r7, r2
    ce46:	ad07      	add	r5, sp, #28
    ce48:	8313      	strh	r3, [r2, #24]
    ce4a:	802b      	strh	r3, [r5, #0]
    ce4c:	803b      	strh	r3, [r7, #0]
    ce4e:	aa08      	add	r2, sp, #32
    ce50:	930a      	str	r3, [sp, #40]	; 0x28
    ce52:	ab0a      	add	r3, sp, #40	; 0x28
    ce54:	9202      	str	r2, [sp, #8]
    ce56:	9303      	str	r3, [sp, #12]
    ce58:	9301      	str	r3, [sp, #4]
    ce5a:	9700      	str	r7, [sp, #0]
    ce5c:	002a      	movs	r2, r5
    ce5e:	4968      	ldr	r1, [pc, #416]	; (d000 <_tzset_unlocked_r+0x2e8>)
    ce60:	0020      	movs	r0, r4
    ce62:	f001 ff83 	bl	ed6c <siscanf>
    ce66:	2800      	cmp	r0, #0
    ce68:	dd00      	ble.n	ce6c <_tzset_unlocked_r+0x154>
    ce6a:	e07c      	b.n	cf66 <_tzset_unlocked_r+0x24e>
    ce6c:	6a33      	ldr	r3, [r6, #32]
    ce6e:	4a66      	ldr	r2, [pc, #408]	; (d008 <_tzset_unlocked_r+0x2f0>)
    ce70:	189b      	adds	r3, r3, r2
    ce72:	63f3      	str	r3, [r6, #60]	; 0x3c
    ce74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce76:	0037      	movs	r7, r6
    ce78:	18e4      	adds	r4, r4, r3
    ce7a:	2300      	movs	r3, #0
    ce7c:	3708      	adds	r7, #8
    ce7e:	9304      	str	r3, [sp, #16]
    ce80:	7823      	ldrb	r3, [r4, #0]
    ce82:	3b2c      	subs	r3, #44	; 0x2c
    ce84:	4259      	negs	r1, r3
    ce86:	4159      	adcs	r1, r3
    ce88:	1864      	adds	r4, r4, r1
    ce8a:	7825      	ldrb	r5, [r4, #0]
    ce8c:	2d4d      	cmp	r5, #77	; 0x4d
    ce8e:	d000      	beq.n	ce92 <_tzset_unlocked_r+0x17a>
    ce90:	e078      	b.n	cf84 <_tzset_unlocked_r+0x26c>
    ce92:	221e      	movs	r2, #30
    ce94:	a902      	add	r1, sp, #8
    ce96:	1852      	adds	r2, r2, r1
    ce98:	9202      	str	r2, [sp, #8]
    ce9a:	aa09      	add	r2, sp, #36	; 0x24
    ce9c:	9200      	str	r2, [sp, #0]
    ce9e:	221a      	movs	r2, #26
    cea0:	ab0a      	add	r3, sp, #40	; 0x28
    cea2:	1852      	adds	r2, r2, r1
    cea4:	9303      	str	r3, [sp, #12]
    cea6:	9301      	str	r3, [sp, #4]
    cea8:	4958      	ldr	r1, [pc, #352]	; (d00c <_tzset_unlocked_r+0x2f4>)
    ceaa:	0020      	movs	r0, r4
    ceac:	f001 ff5e 	bl	ed6c <siscanf>
    ceb0:	2803      	cmp	r0, #3
    ceb2:	d000      	beq.n	ceb6 <_tzset_unlocked_r+0x19e>
    ceb4:	e749      	b.n	cd4a <_tzset_unlocked_r+0x32>
    ceb6:	ab02      	add	r3, sp, #8
    ceb8:	8b59      	ldrh	r1, [r3, #26]
    ceba:	1e4b      	subs	r3, r1, #1
    cebc:	2b0b      	cmp	r3, #11
    cebe:	d900      	bls.n	cec2 <_tzset_unlocked_r+0x1aa>
    cec0:	e743      	b.n	cd4a <_tzset_unlocked_r+0x32>
    cec2:	ab02      	add	r3, sp, #8
    cec4:	8b9a      	ldrh	r2, [r3, #28]
    cec6:	1e53      	subs	r3, r2, #1
    cec8:	2b04      	cmp	r3, #4
    ceca:	d900      	bls.n	cece <_tzset_unlocked_r+0x1b6>
    cecc:	e73d      	b.n	cd4a <_tzset_unlocked_r+0x32>
    cece:	ab02      	add	r3, sp, #8
    ced0:	8bdb      	ldrh	r3, [r3, #30]
    ced2:	2b06      	cmp	r3, #6
    ced4:	d900      	bls.n	ced8 <_tzset_unlocked_r+0x1c0>
    ced6:	e738      	b.n	cd4a <_tzset_unlocked_r+0x32>
    ced8:	703d      	strb	r5, [r7, #0]
    ceda:	6079      	str	r1, [r7, #4]
    cedc:	60ba      	str	r2, [r7, #8]
    cede:	60fb      	str	r3, [r7, #12]
    cee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cee2:	18e5      	adds	r5, r4, r3
    cee4:	2302      	movs	r3, #2
    cee6:	aa07      	add	r2, sp, #28
    cee8:	8013      	strh	r3, [r2, #0]
    ceea:	2300      	movs	r3, #0
    ceec:	a902      	add	r1, sp, #8
    ceee:	ac08      	add	r4, sp, #32
    cef0:	82cb      	strh	r3, [r1, #22]
    cef2:	8023      	strh	r3, [r4, #0]
    cef4:	930a      	str	r3, [sp, #40]	; 0x28
    cef6:	782b      	ldrb	r3, [r5, #0]
    cef8:	2b2f      	cmp	r3, #47	; 0x2f
    cefa:	d10b      	bne.n	cf14 <_tzset_unlocked_r+0x1fc>
    cefc:	2116      	movs	r1, #22
    cefe:	a802      	add	r0, sp, #8
    cf00:	1809      	adds	r1, r1, r0
    cf02:	ab0a      	add	r3, sp, #40	; 0x28
    cf04:	9100      	str	r1, [sp, #0]
    cf06:	9303      	str	r3, [sp, #12]
    cf08:	9402      	str	r4, [sp, #8]
    cf0a:	9301      	str	r3, [sp, #4]
    cf0c:	4940      	ldr	r1, [pc, #256]	; (d010 <_tzset_unlocked_r+0x2f8>)
    cf0e:	0028      	movs	r0, r5
    cf10:	f001 ff2c 	bl	ed6c <siscanf>
    cf14:	ab02      	add	r3, sp, #8
    cf16:	8ada      	ldrh	r2, [r3, #22]
    cf18:	233c      	movs	r3, #60	; 0x3c
    cf1a:	4353      	muls	r3, r2
    cf1c:	8822      	ldrh	r2, [r4, #0]
    cf1e:	189b      	adds	r3, r3, r2
    cf20:	aa07      	add	r2, sp, #28
    cf22:	8811      	ldrh	r1, [r2, #0]
    cf24:	22e1      	movs	r2, #225	; 0xe1
    cf26:	0112      	lsls	r2, r2, #4
    cf28:	434a      	muls	r2, r1
    cf2a:	189b      	adds	r3, r3, r2
    cf2c:	613b      	str	r3, [r7, #16]
    cf2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf30:	371c      	adds	r7, #28
    cf32:	18ec      	adds	r4, r5, r3
    cf34:	9b04      	ldr	r3, [sp, #16]
    cf36:	3301      	adds	r3, #1
    cf38:	9304      	str	r3, [sp, #16]
    cf3a:	2b02      	cmp	r3, #2
    cf3c:	d1a0      	bne.n	ce80 <_tzset_unlocked_r+0x168>
    cf3e:	6870      	ldr	r0, [r6, #4]
    cf40:	f7ff fe32 	bl	cba8 <__tzcalc_limits>
    cf44:	6a32      	ldr	r2, [r6, #32]
    cf46:	4b28      	ldr	r3, [pc, #160]	; (cfe8 <_tzset_unlocked_r+0x2d0>)
    cf48:	601a      	str	r2, [r3, #0]
    cf4a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    cf4c:	1a9b      	subs	r3, r3, r2
    cf4e:	1e5a      	subs	r2, r3, #1
    cf50:	4193      	sbcs	r3, r2
    cf52:	4a27      	ldr	r2, [pc, #156]	; (cff0 <_tzset_unlocked_r+0x2d8>)
    cf54:	6013      	str	r3, [r2, #0]
    cf56:	e6f8      	b.n	cd4a <_tzset_unlocked_r+0x32>
    cf58:	2201      	movs	r2, #1
    cf5a:	3b2b      	subs	r3, #43	; 0x2b
    cf5c:	9204      	str	r2, [sp, #16]
    cf5e:	4259      	negs	r1, r3
    cf60:	4159      	adcs	r1, r3
    cf62:	1864      	adds	r4, r4, r1
    cf64:	e76b      	b.n	ce3e <_tzset_unlocked_r+0x126>
    cf66:	233c      	movs	r3, #60	; 0x3c
    cf68:	883a      	ldrh	r2, [r7, #0]
    cf6a:	8829      	ldrh	r1, [r5, #0]
    cf6c:	4353      	muls	r3, r2
    cf6e:	aa02      	add	r2, sp, #8
    cf70:	8b12      	ldrh	r2, [r2, #24]
    cf72:	189b      	adds	r3, r3, r2
    cf74:	22e1      	movs	r2, #225	; 0xe1
    cf76:	0112      	lsls	r2, r2, #4
    cf78:	434a      	muls	r2, r1
    cf7a:	189b      	adds	r3, r3, r2
    cf7c:	9a04      	ldr	r2, [sp, #16]
    cf7e:	435a      	muls	r2, r3
    cf80:	0013      	movs	r3, r2
    cf82:	e776      	b.n	ce72 <_tzset_unlocked_r+0x15a>
    cf84:	2344      	movs	r3, #68	; 0x44
    cf86:	9305      	str	r3, [sp, #20]
    cf88:	2d4a      	cmp	r5, #74	; 0x4a
    cf8a:	d101      	bne.n	cf90 <_tzset_unlocked_r+0x278>
    cf8c:	3401      	adds	r4, #1
    cf8e:	9505      	str	r5, [sp, #20]
    cf90:	220a      	movs	r2, #10
    cf92:	a90b      	add	r1, sp, #44	; 0x2c
    cf94:	0020      	movs	r0, r4
    cf96:	f001 fff7 	bl	ef88 <strtoul>
    cf9a:	231e      	movs	r3, #30
    cf9c:	aa02      	add	r2, sp, #8
    cf9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cfa0:	189b      	adds	r3, r3, r2
    cfa2:	8018      	strh	r0, [r3, #0]
    cfa4:	42ac      	cmp	r4, r5
    cfa6:	d115      	bne.n	cfd4 <_tzset_unlocked_r+0x2bc>
    cfa8:	9b04      	ldr	r3, [sp, #16]
    cfaa:	2b00      	cmp	r3, #0
    cfac:	d108      	bne.n	cfc0 <_tzset_unlocked_r+0x2a8>
    cfae:	334d      	adds	r3, #77	; 0x4d
    cfb0:	7233      	strb	r3, [r6, #8]
    cfb2:	2303      	movs	r3, #3
    cfb4:	60f3      	str	r3, [r6, #12]
    cfb6:	3b01      	subs	r3, #1
    cfb8:	6133      	str	r3, [r6, #16]
    cfba:	9b04      	ldr	r3, [sp, #16]
    cfbc:	6173      	str	r3, [r6, #20]
    cfbe:	e791      	b.n	cee4 <_tzset_unlocked_r+0x1cc>
    cfc0:	224d      	movs	r2, #77	; 0x4d
    cfc2:	1d73      	adds	r3, r6, #5
    cfc4:	77da      	strb	r2, [r3, #31]
    cfc6:	230b      	movs	r3, #11
    cfc8:	62b3      	str	r3, [r6, #40]	; 0x28
    cfca:	3b0a      	subs	r3, #10
    cfcc:	62f3      	str	r3, [r6, #44]	; 0x2c
    cfce:	2300      	movs	r3, #0
    cfd0:	6333      	str	r3, [r6, #48]	; 0x30
    cfd2:	e787      	b.n	cee4 <_tzset_unlocked_r+0x1cc>
    cfd4:	466b      	mov	r3, sp
    cfd6:	7d1b      	ldrb	r3, [r3, #20]
    cfd8:	b280      	uxth	r0, r0
    cfda:	703b      	strb	r3, [r7, #0]
    cfdc:	60f8      	str	r0, [r7, #12]
    cfde:	e781      	b.n	cee4 <_tzset_unlocked_r+0x1cc>
    cfe0:	00010fdb 	.word	0x00010fdb
    cfe4:	20001e4c 	.word	0x20001e4c
    cfe8:	20001e54 	.word	0x20001e54
    cfec:	00010fde 	.word	0x00010fde
    cff0:	20001e50 	.word	0x20001e50
    cff4:	20000284 	.word	0x20000284
    cff8:	20001e3f 	.word	0x20001e3f
    cffc:	00010fe2 	.word	0x00010fe2
    d000:	00011005 	.word	0x00011005
    d004:	20001e34 	.word	0x20001e34
    d008:	fffff1f0 	.word	0xfffff1f0
    d00c:	00010ff1 	.word	0x00010ff1
    d010:	00011004 	.word	0x00011004

0000d014 <_vsiprintf_r>:
    d014:	b530      	push	{r4, r5, lr}
    d016:	b09b      	sub	sp, #108	; 0x6c
    d018:	9100      	str	r1, [sp, #0]
    d01a:	9104      	str	r1, [sp, #16]
    d01c:	4908      	ldr	r1, [pc, #32]	; (d040 <_vsiprintf_r+0x2c>)
    d01e:	466d      	mov	r5, sp
    d020:	9102      	str	r1, [sp, #8]
    d022:	9105      	str	r1, [sp, #20]
    d024:	2101      	movs	r1, #1
    d026:	2482      	movs	r4, #130	; 0x82
    d028:	4249      	negs	r1, r1
    d02a:	81e9      	strh	r1, [r5, #14]
    d02c:	00a4      	lsls	r4, r4, #2
    d02e:	4669      	mov	r1, sp
    d030:	81ac      	strh	r4, [r5, #12]
    d032:	f001 fd4d 	bl	ead0 <_svfiprintf_r>
    d036:	2300      	movs	r3, #0
    d038:	9a00      	ldr	r2, [sp, #0]
    d03a:	7013      	strb	r3, [r2, #0]
    d03c:	b01b      	add	sp, #108	; 0x6c
    d03e:	bd30      	pop	{r4, r5, pc}
    d040:	7fffffff 	.word	0x7fffffff

0000d044 <vsiprintf>:
    d044:	b510      	push	{r4, lr}
    d046:	0013      	movs	r3, r2
    d048:	000a      	movs	r2, r1
    d04a:	0001      	movs	r1, r0
    d04c:	4802      	ldr	r0, [pc, #8]	; (d058 <vsiprintf+0x14>)
    d04e:	6800      	ldr	r0, [r0, #0]
    d050:	f7ff ffe0 	bl	d014 <_vsiprintf_r>
    d054:	bd10      	pop	{r4, pc}
    d056:	46c0      	nop			; (mov r8, r8)
    d058:	200000b4 	.word	0x200000b4

0000d05c <__swbuf_r>:
    d05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d05e:	0005      	movs	r5, r0
    d060:	000e      	movs	r6, r1
    d062:	0014      	movs	r4, r2
    d064:	2800      	cmp	r0, #0
    d066:	d004      	beq.n	d072 <__swbuf_r+0x16>
    d068:	6983      	ldr	r3, [r0, #24]
    d06a:	2b00      	cmp	r3, #0
    d06c:	d101      	bne.n	d072 <__swbuf_r+0x16>
    d06e:	f001 f855 	bl	e11c <__sinit>
    d072:	4b22      	ldr	r3, [pc, #136]	; (d0fc <__swbuf_r+0xa0>)
    d074:	429c      	cmp	r4, r3
    d076:	d12d      	bne.n	d0d4 <__swbuf_r+0x78>
    d078:	686c      	ldr	r4, [r5, #4]
    d07a:	69a3      	ldr	r3, [r4, #24]
    d07c:	60a3      	str	r3, [r4, #8]
    d07e:	89a3      	ldrh	r3, [r4, #12]
    d080:	071b      	lsls	r3, r3, #28
    d082:	d531      	bpl.n	d0e8 <__swbuf_r+0x8c>
    d084:	6923      	ldr	r3, [r4, #16]
    d086:	2b00      	cmp	r3, #0
    d088:	d02e      	beq.n	d0e8 <__swbuf_r+0x8c>
    d08a:	6823      	ldr	r3, [r4, #0]
    d08c:	6922      	ldr	r2, [r4, #16]
    d08e:	b2f7      	uxtb	r7, r6
    d090:	1a98      	subs	r0, r3, r2
    d092:	6963      	ldr	r3, [r4, #20]
    d094:	b2f6      	uxtb	r6, r6
    d096:	4298      	cmp	r0, r3
    d098:	db05      	blt.n	d0a6 <__swbuf_r+0x4a>
    d09a:	0021      	movs	r1, r4
    d09c:	0028      	movs	r0, r5
    d09e:	f000 ffcf 	bl	e040 <_fflush_r>
    d0a2:	2800      	cmp	r0, #0
    d0a4:	d126      	bne.n	d0f4 <__swbuf_r+0x98>
    d0a6:	68a3      	ldr	r3, [r4, #8]
    d0a8:	3001      	adds	r0, #1
    d0aa:	3b01      	subs	r3, #1
    d0ac:	60a3      	str	r3, [r4, #8]
    d0ae:	6823      	ldr	r3, [r4, #0]
    d0b0:	1c5a      	adds	r2, r3, #1
    d0b2:	6022      	str	r2, [r4, #0]
    d0b4:	701f      	strb	r7, [r3, #0]
    d0b6:	6963      	ldr	r3, [r4, #20]
    d0b8:	4298      	cmp	r0, r3
    d0ba:	d004      	beq.n	d0c6 <__swbuf_r+0x6a>
    d0bc:	89a3      	ldrh	r3, [r4, #12]
    d0be:	07db      	lsls	r3, r3, #31
    d0c0:	d51a      	bpl.n	d0f8 <__swbuf_r+0x9c>
    d0c2:	2e0a      	cmp	r6, #10
    d0c4:	d118      	bne.n	d0f8 <__swbuf_r+0x9c>
    d0c6:	0021      	movs	r1, r4
    d0c8:	0028      	movs	r0, r5
    d0ca:	f000 ffb9 	bl	e040 <_fflush_r>
    d0ce:	2800      	cmp	r0, #0
    d0d0:	d012      	beq.n	d0f8 <__swbuf_r+0x9c>
    d0d2:	e00f      	b.n	d0f4 <__swbuf_r+0x98>
    d0d4:	4b0a      	ldr	r3, [pc, #40]	; (d100 <__swbuf_r+0xa4>)
    d0d6:	429c      	cmp	r4, r3
    d0d8:	d101      	bne.n	d0de <__swbuf_r+0x82>
    d0da:	68ac      	ldr	r4, [r5, #8]
    d0dc:	e7cd      	b.n	d07a <__swbuf_r+0x1e>
    d0de:	4b09      	ldr	r3, [pc, #36]	; (d104 <__swbuf_r+0xa8>)
    d0e0:	429c      	cmp	r4, r3
    d0e2:	d1ca      	bne.n	d07a <__swbuf_r+0x1e>
    d0e4:	68ec      	ldr	r4, [r5, #12]
    d0e6:	e7c8      	b.n	d07a <__swbuf_r+0x1e>
    d0e8:	0021      	movs	r1, r4
    d0ea:	0028      	movs	r0, r5
    d0ec:	f000 f818 	bl	d120 <__swsetup_r>
    d0f0:	2800      	cmp	r0, #0
    d0f2:	d0ca      	beq.n	d08a <__swbuf_r+0x2e>
    d0f4:	2601      	movs	r6, #1
    d0f6:	4276      	negs	r6, r6
    d0f8:	0030      	movs	r0, r6
    d0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0fc:	00011148 	.word	0x00011148
    d100:	00011168 	.word	0x00011168
    d104:	00011128 	.word	0x00011128

0000d108 <__ascii_wctomb>:
    d108:	1e0b      	subs	r3, r1, #0
    d10a:	d004      	beq.n	d116 <__ascii_wctomb+0xe>
    d10c:	2aff      	cmp	r2, #255	; 0xff
    d10e:	d904      	bls.n	d11a <__ascii_wctomb+0x12>
    d110:	238a      	movs	r3, #138	; 0x8a
    d112:	6003      	str	r3, [r0, #0]
    d114:	3b8b      	subs	r3, #139	; 0x8b
    d116:	0018      	movs	r0, r3
    d118:	4770      	bx	lr
    d11a:	700a      	strb	r2, [r1, #0]
    d11c:	2301      	movs	r3, #1
    d11e:	e7fa      	b.n	d116 <__ascii_wctomb+0xe>

0000d120 <__swsetup_r>:
    d120:	4b36      	ldr	r3, [pc, #216]	; (d1fc <__swsetup_r+0xdc>)
    d122:	b570      	push	{r4, r5, r6, lr}
    d124:	681d      	ldr	r5, [r3, #0]
    d126:	0006      	movs	r6, r0
    d128:	000c      	movs	r4, r1
    d12a:	2d00      	cmp	r5, #0
    d12c:	d005      	beq.n	d13a <__swsetup_r+0x1a>
    d12e:	69ab      	ldr	r3, [r5, #24]
    d130:	2b00      	cmp	r3, #0
    d132:	d102      	bne.n	d13a <__swsetup_r+0x1a>
    d134:	0028      	movs	r0, r5
    d136:	f000 fff1 	bl	e11c <__sinit>
    d13a:	4b31      	ldr	r3, [pc, #196]	; (d200 <__swsetup_r+0xe0>)
    d13c:	429c      	cmp	r4, r3
    d13e:	d10f      	bne.n	d160 <__swsetup_r+0x40>
    d140:	686c      	ldr	r4, [r5, #4]
    d142:	230c      	movs	r3, #12
    d144:	5ee2      	ldrsh	r2, [r4, r3]
    d146:	b293      	uxth	r3, r2
    d148:	0719      	lsls	r1, r3, #28
    d14a:	d42d      	bmi.n	d1a8 <__swsetup_r+0x88>
    d14c:	06d9      	lsls	r1, r3, #27
    d14e:	d411      	bmi.n	d174 <__swsetup_r+0x54>
    d150:	2309      	movs	r3, #9
    d152:	2001      	movs	r0, #1
    d154:	6033      	str	r3, [r6, #0]
    d156:	3337      	adds	r3, #55	; 0x37
    d158:	4313      	orrs	r3, r2
    d15a:	81a3      	strh	r3, [r4, #12]
    d15c:	4240      	negs	r0, r0
    d15e:	bd70      	pop	{r4, r5, r6, pc}
    d160:	4b28      	ldr	r3, [pc, #160]	; (d204 <__swsetup_r+0xe4>)
    d162:	429c      	cmp	r4, r3
    d164:	d101      	bne.n	d16a <__swsetup_r+0x4a>
    d166:	68ac      	ldr	r4, [r5, #8]
    d168:	e7eb      	b.n	d142 <__swsetup_r+0x22>
    d16a:	4b27      	ldr	r3, [pc, #156]	; (d208 <__swsetup_r+0xe8>)
    d16c:	429c      	cmp	r4, r3
    d16e:	d1e8      	bne.n	d142 <__swsetup_r+0x22>
    d170:	68ec      	ldr	r4, [r5, #12]
    d172:	e7e6      	b.n	d142 <__swsetup_r+0x22>
    d174:	075b      	lsls	r3, r3, #29
    d176:	d513      	bpl.n	d1a0 <__swsetup_r+0x80>
    d178:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d17a:	2900      	cmp	r1, #0
    d17c:	d008      	beq.n	d190 <__swsetup_r+0x70>
    d17e:	0023      	movs	r3, r4
    d180:	3344      	adds	r3, #68	; 0x44
    d182:	4299      	cmp	r1, r3
    d184:	d002      	beq.n	d18c <__swsetup_r+0x6c>
    d186:	0030      	movs	r0, r6
    d188:	f7fe fd7c 	bl	bc84 <_free_r>
    d18c:	2300      	movs	r3, #0
    d18e:	6363      	str	r3, [r4, #52]	; 0x34
    d190:	2224      	movs	r2, #36	; 0x24
    d192:	89a3      	ldrh	r3, [r4, #12]
    d194:	4393      	bics	r3, r2
    d196:	81a3      	strh	r3, [r4, #12]
    d198:	2300      	movs	r3, #0
    d19a:	6063      	str	r3, [r4, #4]
    d19c:	6923      	ldr	r3, [r4, #16]
    d19e:	6023      	str	r3, [r4, #0]
    d1a0:	2308      	movs	r3, #8
    d1a2:	89a2      	ldrh	r2, [r4, #12]
    d1a4:	4313      	orrs	r3, r2
    d1a6:	81a3      	strh	r3, [r4, #12]
    d1a8:	6923      	ldr	r3, [r4, #16]
    d1aa:	2b00      	cmp	r3, #0
    d1ac:	d10b      	bne.n	d1c6 <__swsetup_r+0xa6>
    d1ae:	21a0      	movs	r1, #160	; 0xa0
    d1b0:	2280      	movs	r2, #128	; 0x80
    d1b2:	89a3      	ldrh	r3, [r4, #12]
    d1b4:	0089      	lsls	r1, r1, #2
    d1b6:	0092      	lsls	r2, r2, #2
    d1b8:	400b      	ands	r3, r1
    d1ba:	4293      	cmp	r3, r2
    d1bc:	d003      	beq.n	d1c6 <__swsetup_r+0xa6>
    d1be:	0021      	movs	r1, r4
    d1c0:	0030      	movs	r0, r6
    d1c2:	f001 f8bb 	bl	e33c <__smakebuf_r>
    d1c6:	2301      	movs	r3, #1
    d1c8:	89a2      	ldrh	r2, [r4, #12]
    d1ca:	4013      	ands	r3, r2
    d1cc:	d011      	beq.n	d1f2 <__swsetup_r+0xd2>
    d1ce:	2300      	movs	r3, #0
    d1d0:	60a3      	str	r3, [r4, #8]
    d1d2:	6963      	ldr	r3, [r4, #20]
    d1d4:	425b      	negs	r3, r3
    d1d6:	61a3      	str	r3, [r4, #24]
    d1d8:	2000      	movs	r0, #0
    d1da:	6923      	ldr	r3, [r4, #16]
    d1dc:	4283      	cmp	r3, r0
    d1de:	d1be      	bne.n	d15e <__swsetup_r+0x3e>
    d1e0:	230c      	movs	r3, #12
    d1e2:	5ee2      	ldrsh	r2, [r4, r3]
    d1e4:	0613      	lsls	r3, r2, #24
    d1e6:	d5ba      	bpl.n	d15e <__swsetup_r+0x3e>
    d1e8:	2340      	movs	r3, #64	; 0x40
    d1ea:	4313      	orrs	r3, r2
    d1ec:	81a3      	strh	r3, [r4, #12]
    d1ee:	3801      	subs	r0, #1
    d1f0:	e7b5      	b.n	d15e <__swsetup_r+0x3e>
    d1f2:	0792      	lsls	r2, r2, #30
    d1f4:	d400      	bmi.n	d1f8 <__swsetup_r+0xd8>
    d1f6:	6963      	ldr	r3, [r4, #20]
    d1f8:	60a3      	str	r3, [r4, #8]
    d1fa:	e7ed      	b.n	d1d8 <__swsetup_r+0xb8>
    d1fc:	200000b4 	.word	0x200000b4
    d200:	00011148 	.word	0x00011148
    d204:	00011168 	.word	0x00011168
    d208:	00011128 	.word	0x00011128

0000d20c <abort>:
    d20c:	b510      	push	{r4, lr}
    d20e:	2006      	movs	r0, #6
    d210:	f001 fd8c 	bl	ed2c <raise>
    d214:	2001      	movs	r0, #1
    d216:	f002 fb4b 	bl	f8b0 <_exit>

0000d21a <div>:
    d21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d21c:	000f      	movs	r7, r1
    d21e:	0006      	movs	r6, r0
    d220:	0011      	movs	r1, r2
    d222:	0038      	movs	r0, r7
    d224:	0015      	movs	r5, r2
    d226:	f7fb f9ef 	bl	8608 <__divsi3>
    d22a:	0029      	movs	r1, r5
    d22c:	0004      	movs	r4, r0
    d22e:	0038      	movs	r0, r7
    d230:	f7fb fad0 	bl	87d4 <__aeabi_idivmod>
    d234:	2f00      	cmp	r7, #0
    d236:	db07      	blt.n	d248 <div+0x2e>
    d238:	2900      	cmp	r1, #0
    d23a:	da01      	bge.n	d240 <div+0x26>
    d23c:	3401      	adds	r4, #1
    d23e:	1b49      	subs	r1, r1, r5
    d240:	0030      	movs	r0, r6
    d242:	6034      	str	r4, [r6, #0]
    d244:	6071      	str	r1, [r6, #4]
    d246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d248:	2900      	cmp	r1, #0
    d24a:	ddf9      	ble.n	d240 <div+0x26>
    d24c:	3c01      	subs	r4, #1
    d24e:	1949      	adds	r1, r1, r5
    d250:	e7f6      	b.n	d240 <div+0x26>

0000d252 <quorem>:
    d252:	b5f0      	push	{r4, r5, r6, r7, lr}
    d254:	6903      	ldr	r3, [r0, #16]
    d256:	690c      	ldr	r4, [r1, #16]
    d258:	b089      	sub	sp, #36	; 0x24
    d25a:	0007      	movs	r7, r0
    d25c:	9105      	str	r1, [sp, #20]
    d25e:	2600      	movs	r6, #0
    d260:	429c      	cmp	r4, r3
    d262:	dc6d      	bgt.n	d340 <quorem+0xee>
    d264:	000b      	movs	r3, r1
    d266:	3c01      	subs	r4, #1
    d268:	3314      	adds	r3, #20
    d26a:	00a5      	lsls	r5, r4, #2
    d26c:	9303      	str	r3, [sp, #12]
    d26e:	195b      	adds	r3, r3, r5
    d270:	9304      	str	r3, [sp, #16]
    d272:	0003      	movs	r3, r0
    d274:	3314      	adds	r3, #20
    d276:	9302      	str	r3, [sp, #8]
    d278:	195d      	adds	r5, r3, r5
    d27a:	9b04      	ldr	r3, [sp, #16]
    d27c:	6828      	ldr	r0, [r5, #0]
    d27e:	681b      	ldr	r3, [r3, #0]
    d280:	1c59      	adds	r1, r3, #1
    d282:	9301      	str	r3, [sp, #4]
    d284:	f7fb f936 	bl	84f4 <__udivsi3>
    d288:	9001      	str	r0, [sp, #4]
    d28a:	42b0      	cmp	r0, r6
    d28c:	d02d      	beq.n	d2ea <quorem+0x98>
    d28e:	9b03      	ldr	r3, [sp, #12]
    d290:	9802      	ldr	r0, [sp, #8]
    d292:	469c      	mov	ip, r3
    d294:	9606      	str	r6, [sp, #24]
    d296:	4662      	mov	r2, ip
    d298:	ca08      	ldmia	r2!, {r3}
    d29a:	4694      	mov	ip, r2
    d29c:	9a01      	ldr	r2, [sp, #4]
    d29e:	b299      	uxth	r1, r3
    d2a0:	4351      	muls	r1, r2
    d2a2:	0c1b      	lsrs	r3, r3, #16
    d2a4:	4353      	muls	r3, r2
    d2a6:	1989      	adds	r1, r1, r6
    d2a8:	0c0a      	lsrs	r2, r1, #16
    d2aa:	189b      	adds	r3, r3, r2
    d2ac:	9307      	str	r3, [sp, #28]
    d2ae:	8802      	ldrh	r2, [r0, #0]
    d2b0:	0c1e      	lsrs	r6, r3, #16
    d2b2:	9b06      	ldr	r3, [sp, #24]
    d2b4:	b289      	uxth	r1, r1
    d2b6:	18d2      	adds	r2, r2, r3
    d2b8:	6803      	ldr	r3, [r0, #0]
    d2ba:	1a52      	subs	r2, r2, r1
    d2bc:	0c19      	lsrs	r1, r3, #16
    d2be:	466b      	mov	r3, sp
    d2c0:	8b9b      	ldrh	r3, [r3, #28]
    d2c2:	1acb      	subs	r3, r1, r3
    d2c4:	1411      	asrs	r1, r2, #16
    d2c6:	185b      	adds	r3, r3, r1
    d2c8:	1419      	asrs	r1, r3, #16
    d2ca:	b292      	uxth	r2, r2
    d2cc:	041b      	lsls	r3, r3, #16
    d2ce:	431a      	orrs	r2, r3
    d2d0:	9b04      	ldr	r3, [sp, #16]
    d2d2:	9106      	str	r1, [sp, #24]
    d2d4:	c004      	stmia	r0!, {r2}
    d2d6:	4563      	cmp	r3, ip
    d2d8:	d2dd      	bcs.n	d296 <quorem+0x44>
    d2da:	682b      	ldr	r3, [r5, #0]
    d2dc:	2b00      	cmp	r3, #0
    d2de:	d104      	bne.n	d2ea <quorem+0x98>
    d2e0:	9b02      	ldr	r3, [sp, #8]
    d2e2:	3d04      	subs	r5, #4
    d2e4:	42ab      	cmp	r3, r5
    d2e6:	d32e      	bcc.n	d346 <quorem+0xf4>
    d2e8:	613c      	str	r4, [r7, #16]
    d2ea:	9905      	ldr	r1, [sp, #20]
    d2ec:	0038      	movs	r0, r7
    d2ee:	f001 fa88 	bl	e802 <__mcmp>
    d2f2:	2800      	cmp	r0, #0
    d2f4:	db23      	blt.n	d33e <quorem+0xec>
    d2f6:	2500      	movs	r5, #0
    d2f8:	9b01      	ldr	r3, [sp, #4]
    d2fa:	9802      	ldr	r0, [sp, #8]
    d2fc:	3301      	adds	r3, #1
    d2fe:	9903      	ldr	r1, [sp, #12]
    d300:	9301      	str	r3, [sp, #4]
    d302:	c908      	ldmia	r1!, {r3}
    d304:	8802      	ldrh	r2, [r0, #0]
    d306:	1955      	adds	r5, r2, r5
    d308:	b29a      	uxth	r2, r3
    d30a:	1aaa      	subs	r2, r5, r2
    d30c:	6805      	ldr	r5, [r0, #0]
    d30e:	0c1b      	lsrs	r3, r3, #16
    d310:	0c2d      	lsrs	r5, r5, #16
    d312:	1aeb      	subs	r3, r5, r3
    d314:	1415      	asrs	r5, r2, #16
    d316:	195b      	adds	r3, r3, r5
    d318:	141d      	asrs	r5, r3, #16
    d31a:	b292      	uxth	r2, r2
    d31c:	041b      	lsls	r3, r3, #16
    d31e:	4313      	orrs	r3, r2
    d320:	c008      	stmia	r0!, {r3}
    d322:	9b04      	ldr	r3, [sp, #16]
    d324:	428b      	cmp	r3, r1
    d326:	d2ec      	bcs.n	d302 <quorem+0xb0>
    d328:	9a02      	ldr	r2, [sp, #8]
    d32a:	00a3      	lsls	r3, r4, #2
    d32c:	18d3      	adds	r3, r2, r3
    d32e:	681a      	ldr	r2, [r3, #0]
    d330:	2a00      	cmp	r2, #0
    d332:	d104      	bne.n	d33e <quorem+0xec>
    d334:	9a02      	ldr	r2, [sp, #8]
    d336:	3b04      	subs	r3, #4
    d338:	429a      	cmp	r2, r3
    d33a:	d309      	bcc.n	d350 <quorem+0xfe>
    d33c:	613c      	str	r4, [r7, #16]
    d33e:	9e01      	ldr	r6, [sp, #4]
    d340:	0030      	movs	r0, r6
    d342:	b009      	add	sp, #36	; 0x24
    d344:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d346:	682b      	ldr	r3, [r5, #0]
    d348:	2b00      	cmp	r3, #0
    d34a:	d1cd      	bne.n	d2e8 <quorem+0x96>
    d34c:	3c01      	subs	r4, #1
    d34e:	e7c7      	b.n	d2e0 <quorem+0x8e>
    d350:	681a      	ldr	r2, [r3, #0]
    d352:	2a00      	cmp	r2, #0
    d354:	d1f2      	bne.n	d33c <quorem+0xea>
    d356:	3c01      	subs	r4, #1
    d358:	e7ec      	b.n	d334 <quorem+0xe2>
	...

0000d35c <_dtoa_r>:
    d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d35e:	0016      	movs	r6, r2
    d360:	001f      	movs	r7, r3
    d362:	6a44      	ldr	r4, [r0, #36]	; 0x24
    d364:	b09d      	sub	sp, #116	; 0x74
    d366:	9004      	str	r0, [sp, #16]
    d368:	9d25      	ldr	r5, [sp, #148]	; 0x94
    d36a:	9606      	str	r6, [sp, #24]
    d36c:	9707      	str	r7, [sp, #28]
    d36e:	2c00      	cmp	r4, #0
    d370:	d108      	bne.n	d384 <_dtoa_r+0x28>
    d372:	2010      	movs	r0, #16
    d374:	f7fe f9d8 	bl	b728 <malloc>
    d378:	9b04      	ldr	r3, [sp, #16]
    d37a:	6258      	str	r0, [r3, #36]	; 0x24
    d37c:	6044      	str	r4, [r0, #4]
    d37e:	6084      	str	r4, [r0, #8]
    d380:	6004      	str	r4, [r0, #0]
    d382:	60c4      	str	r4, [r0, #12]
    d384:	9b04      	ldr	r3, [sp, #16]
    d386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d388:	6819      	ldr	r1, [r3, #0]
    d38a:	2900      	cmp	r1, #0
    d38c:	d00b      	beq.n	d3a6 <_dtoa_r+0x4a>
    d38e:	685a      	ldr	r2, [r3, #4]
    d390:	2301      	movs	r3, #1
    d392:	4093      	lsls	r3, r2
    d394:	604a      	str	r2, [r1, #4]
    d396:	608b      	str	r3, [r1, #8]
    d398:	9804      	ldr	r0, [sp, #16]
    d39a:	f001 f858 	bl	e44e <_Bfree>
    d39e:	2200      	movs	r2, #0
    d3a0:	9b04      	ldr	r3, [sp, #16]
    d3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d3a4:	601a      	str	r2, [r3, #0]
    d3a6:	9b07      	ldr	r3, [sp, #28]
    d3a8:	2b00      	cmp	r3, #0
    d3aa:	da1f      	bge.n	d3ec <_dtoa_r+0x90>
    d3ac:	2301      	movs	r3, #1
    d3ae:	602b      	str	r3, [r5, #0]
    d3b0:	007b      	lsls	r3, r7, #1
    d3b2:	085b      	lsrs	r3, r3, #1
    d3b4:	9307      	str	r3, [sp, #28]
    d3b6:	9c07      	ldr	r4, [sp, #28]
    d3b8:	4bb7      	ldr	r3, [pc, #732]	; (d698 <_dtoa_r+0x33c>)
    d3ba:	0022      	movs	r2, r4
    d3bc:	9319      	str	r3, [sp, #100]	; 0x64
    d3be:	401a      	ands	r2, r3
    d3c0:	429a      	cmp	r2, r3
    d3c2:	d116      	bne.n	d3f2 <_dtoa_r+0x96>
    d3c4:	4bb5      	ldr	r3, [pc, #724]	; (d69c <_dtoa_r+0x340>)
    d3c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d3c8:	6013      	str	r3, [r2, #0]
    d3ca:	9b06      	ldr	r3, [sp, #24]
    d3cc:	2b00      	cmp	r3, #0
    d3ce:	d103      	bne.n	d3d8 <_dtoa_r+0x7c>
    d3d0:	0324      	lsls	r4, r4, #12
    d3d2:	d101      	bne.n	d3d8 <_dtoa_r+0x7c>
    d3d4:	f000 fd91 	bl	defa <_dtoa_r+0xb9e>
    d3d8:	4bb1      	ldr	r3, [pc, #708]	; (d6a0 <_dtoa_r+0x344>)
    d3da:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d3dc:	930a      	str	r3, [sp, #40]	; 0x28
    d3de:	4bb1      	ldr	r3, [pc, #708]	; (d6a4 <_dtoa_r+0x348>)
    d3e0:	2a00      	cmp	r2, #0
    d3e2:	d001      	beq.n	d3e8 <_dtoa_r+0x8c>
    d3e4:	f000 fd8f 	bl	df06 <_dtoa_r+0xbaa>
    d3e8:	f000 fd8f 	bl	df0a <_dtoa_r+0xbae>
    d3ec:	2300      	movs	r3, #0
    d3ee:	602b      	str	r3, [r5, #0]
    d3f0:	e7e1      	b.n	d3b6 <_dtoa_r+0x5a>
    d3f2:	9e06      	ldr	r6, [sp, #24]
    d3f4:	9f07      	ldr	r7, [sp, #28]
    d3f6:	2200      	movs	r2, #0
    d3f8:	2300      	movs	r3, #0
    d3fa:	0030      	movs	r0, r6
    d3fc:	0039      	movs	r1, r7
    d3fe:	f7fb f9ff 	bl	8800 <__aeabi_dcmpeq>
    d402:	1e05      	subs	r5, r0, #0
    d404:	d00e      	beq.n	d424 <_dtoa_r+0xc8>
    d406:	2301      	movs	r3, #1
    d408:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d40a:	6013      	str	r3, [r2, #0]
    d40c:	4ba6      	ldr	r3, [pc, #664]	; (d6a8 <_dtoa_r+0x34c>)
    d40e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d410:	930a      	str	r3, [sp, #40]	; 0x28
    d412:	2a00      	cmp	r2, #0
    d414:	d101      	bne.n	d41a <_dtoa_r+0xbe>
    d416:	f000 fd78 	bl	df0a <_dtoa_r+0xbae>
    d41a:	4aa4      	ldr	r2, [pc, #656]	; (d6ac <_dtoa_r+0x350>)
    d41c:	9926      	ldr	r1, [sp, #152]	; 0x98
    d41e:	600a      	str	r2, [r1, #0]
    d420:	f000 fd73 	bl	df0a <_dtoa_r+0xbae>
    d424:	ab1a      	add	r3, sp, #104	; 0x68
    d426:	9301      	str	r3, [sp, #4]
    d428:	ab1b      	add	r3, sp, #108	; 0x6c
    d42a:	9300      	str	r3, [sp, #0]
    d42c:	0032      	movs	r2, r6
    d42e:	003b      	movs	r3, r7
    d430:	9804      	ldr	r0, [sp, #16]
    d432:	f001 fa63 	bl	e8fc <__d2b>
    d436:	0063      	lsls	r3, r4, #1
    d438:	9005      	str	r0, [sp, #20]
    d43a:	0d5b      	lsrs	r3, r3, #21
    d43c:	d100      	bne.n	d440 <_dtoa_r+0xe4>
    d43e:	e07f      	b.n	d540 <_dtoa_r+0x1e4>
    d440:	033a      	lsls	r2, r7, #12
    d442:	4c9b      	ldr	r4, [pc, #620]	; (d6b0 <_dtoa_r+0x354>)
    d444:	0b12      	lsrs	r2, r2, #12
    d446:	4314      	orrs	r4, r2
    d448:	0021      	movs	r1, r4
    d44a:	4a9a      	ldr	r2, [pc, #616]	; (d6b4 <_dtoa_r+0x358>)
    d44c:	0030      	movs	r0, r6
    d44e:	9518      	str	r5, [sp, #96]	; 0x60
    d450:	189e      	adds	r6, r3, r2
    d452:	2200      	movs	r2, #0
    d454:	4b98      	ldr	r3, [pc, #608]	; (d6b8 <_dtoa_r+0x35c>)
    d456:	f7fd fb41 	bl	aadc <__aeabi_dsub>
    d45a:	4a98      	ldr	r2, [pc, #608]	; (d6bc <_dtoa_r+0x360>)
    d45c:	4b98      	ldr	r3, [pc, #608]	; (d6c0 <_dtoa_r+0x364>)
    d45e:	f7fd f8bd 	bl	a5dc <__aeabi_dmul>
    d462:	4a98      	ldr	r2, [pc, #608]	; (d6c4 <_dtoa_r+0x368>)
    d464:	4b98      	ldr	r3, [pc, #608]	; (d6c8 <_dtoa_r+0x36c>)
    d466:	f7fc f975 	bl	9754 <__aeabi_dadd>
    d46a:	0004      	movs	r4, r0
    d46c:	0030      	movs	r0, r6
    d46e:	000d      	movs	r5, r1
    d470:	f7fd fe9e 	bl	b1b0 <__aeabi_i2d>
    d474:	4a95      	ldr	r2, [pc, #596]	; (d6cc <_dtoa_r+0x370>)
    d476:	4b96      	ldr	r3, [pc, #600]	; (d6d0 <_dtoa_r+0x374>)
    d478:	f7fd f8b0 	bl	a5dc <__aeabi_dmul>
    d47c:	0002      	movs	r2, r0
    d47e:	000b      	movs	r3, r1
    d480:	0020      	movs	r0, r4
    d482:	0029      	movs	r1, r5
    d484:	f7fc f966 	bl	9754 <__aeabi_dadd>
    d488:	0004      	movs	r4, r0
    d48a:	000d      	movs	r5, r1
    d48c:	f7fd fe5c 	bl	b148 <__aeabi_d2iz>
    d490:	2200      	movs	r2, #0
    d492:	9003      	str	r0, [sp, #12]
    d494:	2300      	movs	r3, #0
    d496:	0020      	movs	r0, r4
    d498:	0029      	movs	r1, r5
    d49a:	f7fb f9b7 	bl	880c <__aeabi_dcmplt>
    d49e:	2800      	cmp	r0, #0
    d4a0:	d00e      	beq.n	d4c0 <_dtoa_r+0x164>
    d4a2:	9803      	ldr	r0, [sp, #12]
    d4a4:	f7fd fe84 	bl	b1b0 <__aeabi_i2d>
    d4a8:	000b      	movs	r3, r1
    d4aa:	0002      	movs	r2, r0
    d4ac:	0029      	movs	r1, r5
    d4ae:	0020      	movs	r0, r4
    d4b0:	f7fb f9a6 	bl	8800 <__aeabi_dcmpeq>
    d4b4:	0003      	movs	r3, r0
    d4b6:	4258      	negs	r0, r3
    d4b8:	4158      	adcs	r0, r3
    d4ba:	9b03      	ldr	r3, [sp, #12]
    d4bc:	1a1b      	subs	r3, r3, r0
    d4be:	9303      	str	r3, [sp, #12]
    d4c0:	2301      	movs	r3, #1
    d4c2:	9316      	str	r3, [sp, #88]	; 0x58
    d4c4:	9b03      	ldr	r3, [sp, #12]
    d4c6:	2b16      	cmp	r3, #22
    d4c8:	d80f      	bhi.n	d4ea <_dtoa_r+0x18e>
    d4ca:	4982      	ldr	r1, [pc, #520]	; (d6d4 <_dtoa_r+0x378>)
    d4cc:	00db      	lsls	r3, r3, #3
    d4ce:	18c9      	adds	r1, r1, r3
    d4d0:	6808      	ldr	r0, [r1, #0]
    d4d2:	6849      	ldr	r1, [r1, #4]
    d4d4:	9a06      	ldr	r2, [sp, #24]
    d4d6:	9b07      	ldr	r3, [sp, #28]
    d4d8:	f7fb f9ac 	bl	8834 <__aeabi_dcmpgt>
    d4dc:	2800      	cmp	r0, #0
    d4de:	d04b      	beq.n	d578 <_dtoa_r+0x21c>
    d4e0:	9b03      	ldr	r3, [sp, #12]
    d4e2:	3b01      	subs	r3, #1
    d4e4:	9303      	str	r3, [sp, #12]
    d4e6:	2300      	movs	r3, #0
    d4e8:	9316      	str	r3, [sp, #88]	; 0x58
    d4ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d4ec:	1b9e      	subs	r6, r3, r6
    d4ee:	2300      	movs	r3, #0
    d4f0:	930b      	str	r3, [sp, #44]	; 0x2c
    d4f2:	0033      	movs	r3, r6
    d4f4:	3b01      	subs	r3, #1
    d4f6:	930c      	str	r3, [sp, #48]	; 0x30
    d4f8:	d504      	bpl.n	d504 <_dtoa_r+0x1a8>
    d4fa:	2301      	movs	r3, #1
    d4fc:	1b9b      	subs	r3, r3, r6
    d4fe:	930b      	str	r3, [sp, #44]	; 0x2c
    d500:	2300      	movs	r3, #0
    d502:	930c      	str	r3, [sp, #48]	; 0x30
    d504:	9b03      	ldr	r3, [sp, #12]
    d506:	2b00      	cmp	r3, #0
    d508:	db38      	blt.n	d57c <_dtoa_r+0x220>
    d50a:	9a03      	ldr	r2, [sp, #12]
    d50c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d50e:	4694      	mov	ip, r2
    d510:	4463      	add	r3, ip
    d512:	930c      	str	r3, [sp, #48]	; 0x30
    d514:	2300      	movs	r3, #0
    d516:	920f      	str	r2, [sp, #60]	; 0x3c
    d518:	9308      	str	r3, [sp, #32]
    d51a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d51c:	2501      	movs	r5, #1
    d51e:	2b09      	cmp	r3, #9
    d520:	d900      	bls.n	d524 <_dtoa_r+0x1c8>
    d522:	e091      	b.n	d648 <_dtoa_r+0x2ec>
    d524:	2b05      	cmp	r3, #5
    d526:	dd02      	ble.n	d52e <_dtoa_r+0x1d2>
    d528:	2500      	movs	r5, #0
    d52a:	3b04      	subs	r3, #4
    d52c:	9322      	str	r3, [sp, #136]	; 0x88
    d52e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d530:	1e98      	subs	r0, r3, #2
    d532:	2803      	cmp	r0, #3
    d534:	d900      	bls.n	d538 <_dtoa_r+0x1dc>
    d536:	e091      	b.n	d65c <_dtoa_r+0x300>
    d538:	f7fa ffd2 	bl	84e0 <__gnu_thumb1_case_uqi>
    d53c:	76298482 	.word	0x76298482
    d540:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d542:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    d544:	189e      	adds	r6, r3, r2
    d546:	4b64      	ldr	r3, [pc, #400]	; (d6d8 <_dtoa_r+0x37c>)
    d548:	18f2      	adds	r2, r6, r3
    d54a:	2a20      	cmp	r2, #32
    d54c:	dd0f      	ble.n	d56e <_dtoa_r+0x212>
    d54e:	4b63      	ldr	r3, [pc, #396]	; (d6dc <_dtoa_r+0x380>)
    d550:	9806      	ldr	r0, [sp, #24]
    d552:	18f3      	adds	r3, r6, r3
    d554:	40d8      	lsrs	r0, r3
    d556:	2340      	movs	r3, #64	; 0x40
    d558:	1a9b      	subs	r3, r3, r2
    d55a:	409c      	lsls	r4, r3
    d55c:	4320      	orrs	r0, r4
    d55e:	f7fd fe69 	bl	b234 <__aeabi_ui2d>
    d562:	2301      	movs	r3, #1
    d564:	4c5e      	ldr	r4, [pc, #376]	; (d6e0 <_dtoa_r+0x384>)
    d566:	3e01      	subs	r6, #1
    d568:	1909      	adds	r1, r1, r4
    d56a:	9318      	str	r3, [sp, #96]	; 0x60
    d56c:	e771      	b.n	d452 <_dtoa_r+0xf6>
    d56e:	2320      	movs	r3, #32
    d570:	9806      	ldr	r0, [sp, #24]
    d572:	1a9b      	subs	r3, r3, r2
    d574:	4098      	lsls	r0, r3
    d576:	e7f2      	b.n	d55e <_dtoa_r+0x202>
    d578:	9016      	str	r0, [sp, #88]	; 0x58
    d57a:	e7b6      	b.n	d4ea <_dtoa_r+0x18e>
    d57c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d57e:	9a03      	ldr	r2, [sp, #12]
    d580:	1a9b      	subs	r3, r3, r2
    d582:	930b      	str	r3, [sp, #44]	; 0x2c
    d584:	4253      	negs	r3, r2
    d586:	9308      	str	r3, [sp, #32]
    d588:	2300      	movs	r3, #0
    d58a:	930f      	str	r3, [sp, #60]	; 0x3c
    d58c:	e7c5      	b.n	d51a <_dtoa_r+0x1be>
    d58e:	2301      	movs	r3, #1
    d590:	930e      	str	r3, [sp, #56]	; 0x38
    d592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d594:	2b00      	cmp	r3, #0
    d596:	dd65      	ble.n	d664 <_dtoa_r+0x308>
    d598:	001f      	movs	r7, r3
    d59a:	930d      	str	r3, [sp, #52]	; 0x34
    d59c:	9a04      	ldr	r2, [sp, #16]
    d59e:	6a54      	ldr	r4, [r2, #36]	; 0x24
    d5a0:	2200      	movs	r2, #0
    d5a2:	6062      	str	r2, [r4, #4]
    d5a4:	3204      	adds	r2, #4
    d5a6:	0011      	movs	r1, r2
    d5a8:	3114      	adds	r1, #20
    d5aa:	4299      	cmp	r1, r3
    d5ac:	d95f      	bls.n	d66e <_dtoa_r+0x312>
    d5ae:	6861      	ldr	r1, [r4, #4]
    d5b0:	9804      	ldr	r0, [sp, #16]
    d5b2:	f000 ff14 	bl	e3de <_Balloc>
    d5b6:	9b04      	ldr	r3, [sp, #16]
    d5b8:	6020      	str	r0, [r4, #0]
    d5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d5bc:	681b      	ldr	r3, [r3, #0]
    d5be:	930a      	str	r3, [sp, #40]	; 0x28
    d5c0:	2f0e      	cmp	r7, #14
    d5c2:	d900      	bls.n	d5c6 <_dtoa_r+0x26a>
    d5c4:	e105      	b.n	d7d2 <_dtoa_r+0x476>
    d5c6:	2d00      	cmp	r5, #0
    d5c8:	d100      	bne.n	d5cc <_dtoa_r+0x270>
    d5ca:	e102      	b.n	d7d2 <_dtoa_r+0x476>
    d5cc:	9b06      	ldr	r3, [sp, #24]
    d5ce:	9c07      	ldr	r4, [sp, #28]
    d5d0:	9314      	str	r3, [sp, #80]	; 0x50
    d5d2:	9415      	str	r4, [sp, #84]	; 0x54
    d5d4:	9b03      	ldr	r3, [sp, #12]
    d5d6:	2b00      	cmp	r3, #0
    d5d8:	dc00      	bgt.n	d5dc <_dtoa_r+0x280>
    d5da:	e085      	b.n	d6e8 <_dtoa_r+0x38c>
    d5dc:	001a      	movs	r2, r3
    d5de:	210f      	movs	r1, #15
    d5e0:	4b3c      	ldr	r3, [pc, #240]	; (d6d4 <_dtoa_r+0x378>)
    d5e2:	400a      	ands	r2, r1
    d5e4:	00d2      	lsls	r2, r2, #3
    d5e6:	189b      	adds	r3, r3, r2
    d5e8:	685c      	ldr	r4, [r3, #4]
    d5ea:	681b      	ldr	r3, [r3, #0]
    d5ec:	9310      	str	r3, [sp, #64]	; 0x40
    d5ee:	9411      	str	r4, [sp, #68]	; 0x44
    d5f0:	9b03      	ldr	r3, [sp, #12]
    d5f2:	2402      	movs	r4, #2
    d5f4:	111d      	asrs	r5, r3, #4
    d5f6:	06eb      	lsls	r3, r5, #27
    d5f8:	d50a      	bpl.n	d610 <_dtoa_r+0x2b4>
    d5fa:	4b3a      	ldr	r3, [pc, #232]	; (d6e4 <_dtoa_r+0x388>)
    d5fc:	400d      	ands	r5, r1
    d5fe:	6a1a      	ldr	r2, [r3, #32]
    d600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d602:	9814      	ldr	r0, [sp, #80]	; 0x50
    d604:	9915      	ldr	r1, [sp, #84]	; 0x54
    d606:	f7fc fbb5 	bl	9d74 <__aeabi_ddiv>
    d60a:	9006      	str	r0, [sp, #24]
    d60c:	9107      	str	r1, [sp, #28]
    d60e:	3401      	adds	r4, #1
    d610:	4e34      	ldr	r6, [pc, #208]	; (d6e4 <_dtoa_r+0x388>)
    d612:	2d00      	cmp	r5, #0
    d614:	d130      	bne.n	d678 <_dtoa_r+0x31c>
    d616:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d618:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d61a:	9806      	ldr	r0, [sp, #24]
    d61c:	9907      	ldr	r1, [sp, #28]
    d61e:	f7fc fba9 	bl	9d74 <__aeabi_ddiv>
    d622:	9006      	str	r0, [sp, #24]
    d624:	9107      	str	r1, [sp, #28]
    d626:	e07a      	b.n	d71e <_dtoa_r+0x3c2>
    d628:	2301      	movs	r3, #1
    d62a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    d62c:	930e      	str	r3, [sp, #56]	; 0x38
    d62e:	4694      	mov	ip, r2
    d630:	9b03      	ldr	r3, [sp, #12]
    d632:	4463      	add	r3, ip
    d634:	1c5f      	adds	r7, r3, #1
    d636:	930d      	str	r3, [sp, #52]	; 0x34
    d638:	1e3b      	subs	r3, r7, #0
    d63a:	dcaf      	bgt.n	d59c <_dtoa_r+0x240>
    d63c:	2301      	movs	r3, #1
    d63e:	e7ad      	b.n	d59c <_dtoa_r+0x240>
    d640:	2300      	movs	r3, #0
    d642:	e7a5      	b.n	d590 <_dtoa_r+0x234>
    d644:	2300      	movs	r3, #0
    d646:	e7f0      	b.n	d62a <_dtoa_r+0x2ce>
    d648:	2300      	movs	r3, #0
    d64a:	950e      	str	r5, [sp, #56]	; 0x38
    d64c:	9322      	str	r3, [sp, #136]	; 0x88
    d64e:	3b01      	subs	r3, #1
    d650:	2200      	movs	r2, #0
    d652:	930d      	str	r3, [sp, #52]	; 0x34
    d654:	001f      	movs	r7, r3
    d656:	3313      	adds	r3, #19
    d658:	9223      	str	r2, [sp, #140]	; 0x8c
    d65a:	e79f      	b.n	d59c <_dtoa_r+0x240>
    d65c:	2301      	movs	r3, #1
    d65e:	930e      	str	r3, [sp, #56]	; 0x38
    d660:	3b02      	subs	r3, #2
    d662:	e7f5      	b.n	d650 <_dtoa_r+0x2f4>
    d664:	2301      	movs	r3, #1
    d666:	930d      	str	r3, [sp, #52]	; 0x34
    d668:	001f      	movs	r7, r3
    d66a:	001a      	movs	r2, r3
    d66c:	e7f4      	b.n	d658 <_dtoa_r+0x2fc>
    d66e:	6861      	ldr	r1, [r4, #4]
    d670:	0052      	lsls	r2, r2, #1
    d672:	3101      	adds	r1, #1
    d674:	6061      	str	r1, [r4, #4]
    d676:	e796      	b.n	d5a6 <_dtoa_r+0x24a>
    d678:	2301      	movs	r3, #1
    d67a:	421d      	tst	r5, r3
    d67c:	d008      	beq.n	d690 <_dtoa_r+0x334>
    d67e:	9810      	ldr	r0, [sp, #64]	; 0x40
    d680:	9911      	ldr	r1, [sp, #68]	; 0x44
    d682:	18e4      	adds	r4, r4, r3
    d684:	6832      	ldr	r2, [r6, #0]
    d686:	6873      	ldr	r3, [r6, #4]
    d688:	f7fc ffa8 	bl	a5dc <__aeabi_dmul>
    d68c:	9010      	str	r0, [sp, #64]	; 0x40
    d68e:	9111      	str	r1, [sp, #68]	; 0x44
    d690:	106d      	asrs	r5, r5, #1
    d692:	3608      	adds	r6, #8
    d694:	e7bd      	b.n	d612 <_dtoa_r+0x2b6>
    d696:	46c0      	nop			; (mov r8, r8)
    d698:	7ff00000 	.word	0x7ff00000
    d69c:	0000270f 	.word	0x0000270f
    d6a0:	00011121 	.word	0x00011121
    d6a4:	00011124 	.word	0x00011124
    d6a8:	0000fb30 	.word	0x0000fb30
    d6ac:	0000fb31 	.word	0x0000fb31
    d6b0:	3ff00000 	.word	0x3ff00000
    d6b4:	fffffc01 	.word	0xfffffc01
    d6b8:	3ff80000 	.word	0x3ff80000
    d6bc:	636f4361 	.word	0x636f4361
    d6c0:	3fd287a7 	.word	0x3fd287a7
    d6c4:	8b60c8b3 	.word	0x8b60c8b3
    d6c8:	3fc68a28 	.word	0x3fc68a28
    d6cc:	509f79fb 	.word	0x509f79fb
    d6d0:	3fd34413 	.word	0x3fd34413
    d6d4:	00011210 	.word	0x00011210
    d6d8:	00000432 	.word	0x00000432
    d6dc:	00000412 	.word	0x00000412
    d6e0:	fe100000 	.word	0xfe100000
    d6e4:	000111e8 	.word	0x000111e8
    d6e8:	9b03      	ldr	r3, [sp, #12]
    d6ea:	2402      	movs	r4, #2
    d6ec:	2b00      	cmp	r3, #0
    d6ee:	d016      	beq.n	d71e <_dtoa_r+0x3c2>
    d6f0:	9814      	ldr	r0, [sp, #80]	; 0x50
    d6f2:	9915      	ldr	r1, [sp, #84]	; 0x54
    d6f4:	425d      	negs	r5, r3
    d6f6:	230f      	movs	r3, #15
    d6f8:	4aca      	ldr	r2, [pc, #808]	; (da24 <_dtoa_r+0x6c8>)
    d6fa:	402b      	ands	r3, r5
    d6fc:	00db      	lsls	r3, r3, #3
    d6fe:	18d3      	adds	r3, r2, r3
    d700:	681a      	ldr	r2, [r3, #0]
    d702:	685b      	ldr	r3, [r3, #4]
    d704:	f7fc ff6a 	bl	a5dc <__aeabi_dmul>
    d708:	2300      	movs	r3, #0
    d70a:	9006      	str	r0, [sp, #24]
    d70c:	9107      	str	r1, [sp, #28]
    d70e:	4ec6      	ldr	r6, [pc, #792]	; (da28 <_dtoa_r+0x6cc>)
    d710:	112d      	asrs	r5, r5, #4
    d712:	2d00      	cmp	r5, #0
    d714:	d000      	beq.n	d718 <_dtoa_r+0x3bc>
    d716:	e08c      	b.n	d832 <_dtoa_r+0x4d6>
    d718:	2b00      	cmp	r3, #0
    d71a:	d000      	beq.n	d71e <_dtoa_r+0x3c2>
    d71c:	e781      	b.n	d622 <_dtoa_r+0x2c6>
    d71e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d720:	2b00      	cmp	r3, #0
    d722:	d100      	bne.n	d726 <_dtoa_r+0x3ca>
    d724:	e091      	b.n	d84a <_dtoa_r+0x4ee>
    d726:	9a06      	ldr	r2, [sp, #24]
    d728:	9b07      	ldr	r3, [sp, #28]
    d72a:	9210      	str	r2, [sp, #64]	; 0x40
    d72c:	9311      	str	r3, [sp, #68]	; 0x44
    d72e:	9810      	ldr	r0, [sp, #64]	; 0x40
    d730:	9911      	ldr	r1, [sp, #68]	; 0x44
    d732:	2200      	movs	r2, #0
    d734:	4bbd      	ldr	r3, [pc, #756]	; (da2c <_dtoa_r+0x6d0>)
    d736:	f7fb f869 	bl	880c <__aeabi_dcmplt>
    d73a:	2800      	cmp	r0, #0
    d73c:	d100      	bne.n	d740 <_dtoa_r+0x3e4>
    d73e:	e084      	b.n	d84a <_dtoa_r+0x4ee>
    d740:	2f00      	cmp	r7, #0
    d742:	d100      	bne.n	d746 <_dtoa_r+0x3ea>
    d744:	e081      	b.n	d84a <_dtoa_r+0x4ee>
    d746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d748:	2b00      	cmp	r3, #0
    d74a:	dd3e      	ble.n	d7ca <_dtoa_r+0x46e>
    d74c:	9810      	ldr	r0, [sp, #64]	; 0x40
    d74e:	9911      	ldr	r1, [sp, #68]	; 0x44
    d750:	9b03      	ldr	r3, [sp, #12]
    d752:	2200      	movs	r2, #0
    d754:	1e5e      	subs	r6, r3, #1
    d756:	4bb6      	ldr	r3, [pc, #728]	; (da30 <_dtoa_r+0x6d4>)
    d758:	f7fc ff40 	bl	a5dc <__aeabi_dmul>
    d75c:	9006      	str	r0, [sp, #24]
    d75e:	9107      	str	r1, [sp, #28]
    d760:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    d762:	3401      	adds	r4, #1
    d764:	0020      	movs	r0, r4
    d766:	f7fd fd23 	bl	b1b0 <__aeabi_i2d>
    d76a:	9a06      	ldr	r2, [sp, #24]
    d76c:	9b07      	ldr	r3, [sp, #28]
    d76e:	f7fc ff35 	bl	a5dc <__aeabi_dmul>
    d772:	2200      	movs	r2, #0
    d774:	4baf      	ldr	r3, [pc, #700]	; (da34 <_dtoa_r+0x6d8>)
    d776:	f7fb ffed 	bl	9754 <__aeabi_dadd>
    d77a:	9012      	str	r0, [sp, #72]	; 0x48
    d77c:	9113      	str	r1, [sp, #76]	; 0x4c
    d77e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d780:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    d782:	4aad      	ldr	r2, [pc, #692]	; (da38 <_dtoa_r+0x6dc>)
    d784:	9310      	str	r3, [sp, #64]	; 0x40
    d786:	9411      	str	r4, [sp, #68]	; 0x44
    d788:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d78a:	189c      	adds	r4, r3, r2
    d78c:	9411      	str	r4, [sp, #68]	; 0x44
    d78e:	2d00      	cmp	r5, #0
    d790:	d15e      	bne.n	d850 <_dtoa_r+0x4f4>
    d792:	9806      	ldr	r0, [sp, #24]
    d794:	9907      	ldr	r1, [sp, #28]
    d796:	2200      	movs	r2, #0
    d798:	4ba8      	ldr	r3, [pc, #672]	; (da3c <_dtoa_r+0x6e0>)
    d79a:	f7fd f99f 	bl	aadc <__aeabi_dsub>
    d79e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d7a0:	0023      	movs	r3, r4
    d7a2:	9006      	str	r0, [sp, #24]
    d7a4:	9107      	str	r1, [sp, #28]
    d7a6:	f7fb f845 	bl	8834 <__aeabi_dcmpgt>
    d7aa:	2800      	cmp	r0, #0
    d7ac:	d000      	beq.n	d7b0 <_dtoa_r+0x454>
    d7ae:	e301      	b.n	ddb4 <_dtoa_r+0xa58>
    d7b0:	48a3      	ldr	r0, [pc, #652]	; (da40 <_dtoa_r+0x6e4>)
    d7b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    d7b4:	4684      	mov	ip, r0
    d7b6:	4461      	add	r1, ip
    d7b8:	000b      	movs	r3, r1
    d7ba:	9806      	ldr	r0, [sp, #24]
    d7bc:	9907      	ldr	r1, [sp, #28]
    d7be:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d7c0:	f7fb f824 	bl	880c <__aeabi_dcmplt>
    d7c4:	2800      	cmp	r0, #0
    d7c6:	d000      	beq.n	d7ca <_dtoa_r+0x46e>
    d7c8:	e2e8      	b.n	dd9c <_dtoa_r+0xa40>
    d7ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d7cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
    d7ce:	9306      	str	r3, [sp, #24]
    d7d0:	9407      	str	r4, [sp, #28]
    d7d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d7d4:	2b00      	cmp	r3, #0
    d7d6:	da00      	bge.n	d7da <_dtoa_r+0x47e>
    d7d8:	e157      	b.n	da8a <_dtoa_r+0x72e>
    d7da:	9a03      	ldr	r2, [sp, #12]
    d7dc:	2a0e      	cmp	r2, #14
    d7de:	dd00      	ble.n	d7e2 <_dtoa_r+0x486>
    d7e0:	e153      	b.n	da8a <_dtoa_r+0x72e>
    d7e2:	4b90      	ldr	r3, [pc, #576]	; (da24 <_dtoa_r+0x6c8>)
    d7e4:	00d2      	lsls	r2, r2, #3
    d7e6:	189b      	adds	r3, r3, r2
    d7e8:	685c      	ldr	r4, [r3, #4]
    d7ea:	681b      	ldr	r3, [r3, #0]
    d7ec:	9308      	str	r3, [sp, #32]
    d7ee:	9409      	str	r4, [sp, #36]	; 0x24
    d7f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d7f2:	2b00      	cmp	r3, #0
    d7f4:	db00      	blt.n	d7f8 <_dtoa_r+0x49c>
    d7f6:	e0ce      	b.n	d996 <_dtoa_r+0x63a>
    d7f8:	2f00      	cmp	r7, #0
    d7fa:	dd00      	ble.n	d7fe <_dtoa_r+0x4a2>
    d7fc:	e0cb      	b.n	d996 <_dtoa_r+0x63a>
    d7fe:	d000      	beq.n	d802 <_dtoa_r+0x4a6>
    d800:	e2cf      	b.n	dda2 <_dtoa_r+0xa46>
    d802:	9808      	ldr	r0, [sp, #32]
    d804:	9909      	ldr	r1, [sp, #36]	; 0x24
    d806:	2200      	movs	r2, #0
    d808:	4b8c      	ldr	r3, [pc, #560]	; (da3c <_dtoa_r+0x6e0>)
    d80a:	f7fc fee7 	bl	a5dc <__aeabi_dmul>
    d80e:	9a06      	ldr	r2, [sp, #24]
    d810:	9b07      	ldr	r3, [sp, #28]
    d812:	f7fb f819 	bl	8848 <__aeabi_dcmpge>
    d816:	003e      	movs	r6, r7
    d818:	9708      	str	r7, [sp, #32]
    d81a:	2800      	cmp	r0, #0
    d81c:	d000      	beq.n	d820 <_dtoa_r+0x4c4>
    d81e:	e2a4      	b.n	dd6a <_dtoa_r+0xa0e>
    d820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d824:	1c5d      	adds	r5, r3, #1
    d826:	2331      	movs	r3, #49	; 0x31
    d828:	7013      	strb	r3, [r2, #0]
    d82a:	9b03      	ldr	r3, [sp, #12]
    d82c:	3301      	adds	r3, #1
    d82e:	9303      	str	r3, [sp, #12]
    d830:	e29f      	b.n	dd72 <_dtoa_r+0xa16>
    d832:	2201      	movs	r2, #1
    d834:	4215      	tst	r5, r2
    d836:	d005      	beq.n	d844 <_dtoa_r+0x4e8>
    d838:	18a4      	adds	r4, r4, r2
    d83a:	6832      	ldr	r2, [r6, #0]
    d83c:	6873      	ldr	r3, [r6, #4]
    d83e:	f7fc fecd 	bl	a5dc <__aeabi_dmul>
    d842:	2301      	movs	r3, #1
    d844:	106d      	asrs	r5, r5, #1
    d846:	3608      	adds	r6, #8
    d848:	e763      	b.n	d712 <_dtoa_r+0x3b6>
    d84a:	9e03      	ldr	r6, [sp, #12]
    d84c:	003d      	movs	r5, r7
    d84e:	e789      	b.n	d764 <_dtoa_r+0x408>
    d850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d852:	1e69      	subs	r1, r5, #1
    d854:	1952      	adds	r2, r2, r5
    d856:	9217      	str	r2, [sp, #92]	; 0x5c
    d858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d85a:	4b72      	ldr	r3, [pc, #456]	; (da24 <_dtoa_r+0x6c8>)
    d85c:	00c9      	lsls	r1, r1, #3
    d85e:	2a00      	cmp	r2, #0
    d860:	d04a      	beq.n	d8f8 <_dtoa_r+0x59c>
    d862:	185b      	adds	r3, r3, r1
    d864:	681a      	ldr	r2, [r3, #0]
    d866:	685b      	ldr	r3, [r3, #4]
    d868:	2000      	movs	r0, #0
    d86a:	4976      	ldr	r1, [pc, #472]	; (da44 <_dtoa_r+0x6e8>)
    d86c:	f7fc fa82 	bl	9d74 <__aeabi_ddiv>
    d870:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d872:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d874:	f7fd f932 	bl	aadc <__aeabi_dsub>
    d878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d87a:	9010      	str	r0, [sp, #64]	; 0x40
    d87c:	9111      	str	r1, [sp, #68]	; 0x44
    d87e:	9312      	str	r3, [sp, #72]	; 0x48
    d880:	9806      	ldr	r0, [sp, #24]
    d882:	9907      	ldr	r1, [sp, #28]
    d884:	f7fd fc60 	bl	b148 <__aeabi_d2iz>
    d888:	0004      	movs	r4, r0
    d88a:	f7fd fc91 	bl	b1b0 <__aeabi_i2d>
    d88e:	0002      	movs	r2, r0
    d890:	000b      	movs	r3, r1
    d892:	9806      	ldr	r0, [sp, #24]
    d894:	9907      	ldr	r1, [sp, #28]
    d896:	f7fd f921 	bl	aadc <__aeabi_dsub>
    d89a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d89c:	3430      	adds	r4, #48	; 0x30
    d89e:	1c5d      	adds	r5, r3, #1
    d8a0:	701c      	strb	r4, [r3, #0]
    d8a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d8a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d8a6:	9006      	str	r0, [sp, #24]
    d8a8:	9107      	str	r1, [sp, #28]
    d8aa:	f7fa ffaf 	bl	880c <__aeabi_dcmplt>
    d8ae:	2800      	cmp	r0, #0
    d8b0:	d165      	bne.n	d97e <_dtoa_r+0x622>
    d8b2:	9a06      	ldr	r2, [sp, #24]
    d8b4:	9b07      	ldr	r3, [sp, #28]
    d8b6:	2000      	movs	r0, #0
    d8b8:	495c      	ldr	r1, [pc, #368]	; (da2c <_dtoa_r+0x6d0>)
    d8ba:	f7fd f90f 	bl	aadc <__aeabi_dsub>
    d8be:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d8c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d8c2:	f7fa ffa3 	bl	880c <__aeabi_dcmplt>
    d8c6:	2800      	cmp	r0, #0
    d8c8:	d000      	beq.n	d8cc <_dtoa_r+0x570>
    d8ca:	e0be      	b.n	da4a <_dtoa_r+0x6ee>
    d8cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d8ce:	429d      	cmp	r5, r3
    d8d0:	d100      	bne.n	d8d4 <_dtoa_r+0x578>
    d8d2:	e77a      	b.n	d7ca <_dtoa_r+0x46e>
    d8d4:	9810      	ldr	r0, [sp, #64]	; 0x40
    d8d6:	9911      	ldr	r1, [sp, #68]	; 0x44
    d8d8:	2200      	movs	r2, #0
    d8da:	4b55      	ldr	r3, [pc, #340]	; (da30 <_dtoa_r+0x6d4>)
    d8dc:	f7fc fe7e 	bl	a5dc <__aeabi_dmul>
    d8e0:	2200      	movs	r2, #0
    d8e2:	9010      	str	r0, [sp, #64]	; 0x40
    d8e4:	9111      	str	r1, [sp, #68]	; 0x44
    d8e6:	9806      	ldr	r0, [sp, #24]
    d8e8:	9907      	ldr	r1, [sp, #28]
    d8ea:	4b51      	ldr	r3, [pc, #324]	; (da30 <_dtoa_r+0x6d4>)
    d8ec:	f7fc fe76 	bl	a5dc <__aeabi_dmul>
    d8f0:	9512      	str	r5, [sp, #72]	; 0x48
    d8f2:	9006      	str	r0, [sp, #24]
    d8f4:	9107      	str	r1, [sp, #28]
    d8f6:	e7c3      	b.n	d880 <_dtoa_r+0x524>
    d8f8:	1859      	adds	r1, r3, r1
    d8fa:	6808      	ldr	r0, [r1, #0]
    d8fc:	6849      	ldr	r1, [r1, #4]
    d8fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d900:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d902:	f7fc fe6b 	bl	a5dc <__aeabi_dmul>
    d906:	9010      	str	r0, [sp, #64]	; 0x40
    d908:	9111      	str	r1, [sp, #68]	; 0x44
    d90a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d90c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    d90e:	9806      	ldr	r0, [sp, #24]
    d910:	9907      	ldr	r1, [sp, #28]
    d912:	f7fd fc19 	bl	b148 <__aeabi_d2iz>
    d916:	9012      	str	r0, [sp, #72]	; 0x48
    d918:	f7fd fc4a 	bl	b1b0 <__aeabi_i2d>
    d91c:	0002      	movs	r2, r0
    d91e:	000b      	movs	r3, r1
    d920:	9806      	ldr	r0, [sp, #24]
    d922:	9907      	ldr	r1, [sp, #28]
    d924:	f7fd f8da 	bl	aadc <__aeabi_dsub>
    d928:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d92a:	9006      	str	r0, [sp, #24]
    d92c:	9107      	str	r1, [sp, #28]
    d92e:	3330      	adds	r3, #48	; 0x30
    d930:	7023      	strb	r3, [r4, #0]
    d932:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d934:	3401      	adds	r4, #1
    d936:	2200      	movs	r2, #0
    d938:	42a3      	cmp	r3, r4
    d93a:	d124      	bne.n	d986 <_dtoa_r+0x62a>
    d93c:	4b41      	ldr	r3, [pc, #260]	; (da44 <_dtoa_r+0x6e8>)
    d93e:	9810      	ldr	r0, [sp, #64]	; 0x40
    d940:	9911      	ldr	r1, [sp, #68]	; 0x44
    d942:	f7fb ff07 	bl	9754 <__aeabi_dadd>
    d946:	0002      	movs	r2, r0
    d948:	000b      	movs	r3, r1
    d94a:	9806      	ldr	r0, [sp, #24]
    d94c:	9907      	ldr	r1, [sp, #28]
    d94e:	f7fa ff71 	bl	8834 <__aeabi_dcmpgt>
    d952:	2800      	cmp	r0, #0
    d954:	d000      	beq.n	d958 <_dtoa_r+0x5fc>
    d956:	e078      	b.n	da4a <_dtoa_r+0x6ee>
    d958:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d95a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d95c:	2000      	movs	r0, #0
    d95e:	4939      	ldr	r1, [pc, #228]	; (da44 <_dtoa_r+0x6e8>)
    d960:	f7fd f8bc 	bl	aadc <__aeabi_dsub>
    d964:	0002      	movs	r2, r0
    d966:	000b      	movs	r3, r1
    d968:	9806      	ldr	r0, [sp, #24]
    d96a:	9907      	ldr	r1, [sp, #28]
    d96c:	f7fa ff4e 	bl	880c <__aeabi_dcmplt>
    d970:	2800      	cmp	r0, #0
    d972:	d100      	bne.n	d976 <_dtoa_r+0x61a>
    d974:	e729      	b.n	d7ca <_dtoa_r+0x46e>
    d976:	1e6b      	subs	r3, r5, #1
    d978:	781a      	ldrb	r2, [r3, #0]
    d97a:	2a30      	cmp	r2, #48	; 0x30
    d97c:	d001      	beq.n	d982 <_dtoa_r+0x626>
    d97e:	9603      	str	r6, [sp, #12]
    d980:	e03f      	b.n	da02 <_dtoa_r+0x6a6>
    d982:	001d      	movs	r5, r3
    d984:	e7f7      	b.n	d976 <_dtoa_r+0x61a>
    d986:	9806      	ldr	r0, [sp, #24]
    d988:	9907      	ldr	r1, [sp, #28]
    d98a:	4b29      	ldr	r3, [pc, #164]	; (da30 <_dtoa_r+0x6d4>)
    d98c:	f7fc fe26 	bl	a5dc <__aeabi_dmul>
    d990:	9006      	str	r0, [sp, #24]
    d992:	9107      	str	r1, [sp, #28]
    d994:	e7bb      	b.n	d90e <_dtoa_r+0x5b2>
    d996:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    d998:	9a08      	ldr	r2, [sp, #32]
    d99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d99c:	9806      	ldr	r0, [sp, #24]
    d99e:	9907      	ldr	r1, [sp, #28]
    d9a0:	f7fc f9e8 	bl	9d74 <__aeabi_ddiv>
    d9a4:	f7fd fbd0 	bl	b148 <__aeabi_d2iz>
    d9a8:	0004      	movs	r4, r0
    d9aa:	f7fd fc01 	bl	b1b0 <__aeabi_i2d>
    d9ae:	9a08      	ldr	r2, [sp, #32]
    d9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d9b2:	f7fc fe13 	bl	a5dc <__aeabi_dmul>
    d9b6:	000b      	movs	r3, r1
    d9b8:	0002      	movs	r2, r0
    d9ba:	9806      	ldr	r0, [sp, #24]
    d9bc:	9907      	ldr	r1, [sp, #28]
    d9be:	f7fd f88d 	bl	aadc <__aeabi_dsub>
    d9c2:	0023      	movs	r3, r4
    d9c4:	3330      	adds	r3, #48	; 0x30
    d9c6:	7033      	strb	r3, [r6, #0]
    d9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d9ca:	1c75      	adds	r5, r6, #1
    d9cc:	1aeb      	subs	r3, r5, r3
    d9ce:	429f      	cmp	r7, r3
    d9d0:	d14c      	bne.n	da6c <_dtoa_r+0x710>
    d9d2:	0002      	movs	r2, r0
    d9d4:	000b      	movs	r3, r1
    d9d6:	f7fb febd 	bl	9754 <__aeabi_dadd>
    d9da:	0006      	movs	r6, r0
    d9dc:	000f      	movs	r7, r1
    d9de:	0002      	movs	r2, r0
    d9e0:	000b      	movs	r3, r1
    d9e2:	9808      	ldr	r0, [sp, #32]
    d9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
    d9e6:	f7fa ff11 	bl	880c <__aeabi_dcmplt>
    d9ea:	2800      	cmp	r0, #0
    d9ec:	d12c      	bne.n	da48 <_dtoa_r+0x6ec>
    d9ee:	9808      	ldr	r0, [sp, #32]
    d9f0:	9909      	ldr	r1, [sp, #36]	; 0x24
    d9f2:	0032      	movs	r2, r6
    d9f4:	003b      	movs	r3, r7
    d9f6:	f7fa ff03 	bl	8800 <__aeabi_dcmpeq>
    d9fa:	2800      	cmp	r0, #0
    d9fc:	d001      	beq.n	da02 <_dtoa_r+0x6a6>
    d9fe:	07e3      	lsls	r3, r4, #31
    da00:	d422      	bmi.n	da48 <_dtoa_r+0x6ec>
    da02:	9905      	ldr	r1, [sp, #20]
    da04:	9804      	ldr	r0, [sp, #16]
    da06:	f000 fd22 	bl	e44e <_Bfree>
    da0a:	2300      	movs	r3, #0
    da0c:	702b      	strb	r3, [r5, #0]
    da0e:	9b03      	ldr	r3, [sp, #12]
    da10:	9a24      	ldr	r2, [sp, #144]	; 0x90
    da12:	3301      	adds	r3, #1
    da14:	6013      	str	r3, [r2, #0]
    da16:	9b26      	ldr	r3, [sp, #152]	; 0x98
    da18:	2b00      	cmp	r3, #0
    da1a:	d100      	bne.n	da1e <_dtoa_r+0x6c2>
    da1c:	e275      	b.n	df0a <_dtoa_r+0xbae>
    da1e:	601d      	str	r5, [r3, #0]
    da20:	e273      	b.n	df0a <_dtoa_r+0xbae>
    da22:	46c0      	nop			; (mov r8, r8)
    da24:	00011210 	.word	0x00011210
    da28:	000111e8 	.word	0x000111e8
    da2c:	3ff00000 	.word	0x3ff00000
    da30:	40240000 	.word	0x40240000
    da34:	401c0000 	.word	0x401c0000
    da38:	fcc00000 	.word	0xfcc00000
    da3c:	40140000 	.word	0x40140000
    da40:	7cc00000 	.word	0x7cc00000
    da44:	3fe00000 	.word	0x3fe00000
    da48:	9e03      	ldr	r6, [sp, #12]
    da4a:	1e6b      	subs	r3, r5, #1
    da4c:	781a      	ldrb	r2, [r3, #0]
    da4e:	2a39      	cmp	r2, #57	; 0x39
    da50:	d106      	bne.n	da60 <_dtoa_r+0x704>
    da52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    da54:	429a      	cmp	r2, r3
    da56:	d107      	bne.n	da68 <_dtoa_r+0x70c>
    da58:	2330      	movs	r3, #48	; 0x30
    da5a:	7013      	strb	r3, [r2, #0]
    da5c:	0013      	movs	r3, r2
    da5e:	3601      	adds	r6, #1
    da60:	781a      	ldrb	r2, [r3, #0]
    da62:	3201      	adds	r2, #1
    da64:	701a      	strb	r2, [r3, #0]
    da66:	e78a      	b.n	d97e <_dtoa_r+0x622>
    da68:	001d      	movs	r5, r3
    da6a:	e7ee      	b.n	da4a <_dtoa_r+0x6ee>
    da6c:	2200      	movs	r2, #0
    da6e:	4bcf      	ldr	r3, [pc, #828]	; (ddac <_dtoa_r+0xa50>)
    da70:	f7fc fdb4 	bl	a5dc <__aeabi_dmul>
    da74:	2200      	movs	r2, #0
    da76:	2300      	movs	r3, #0
    da78:	9006      	str	r0, [sp, #24]
    da7a:	9107      	str	r1, [sp, #28]
    da7c:	002e      	movs	r6, r5
    da7e:	f7fa febf 	bl	8800 <__aeabi_dcmpeq>
    da82:	2800      	cmp	r0, #0
    da84:	d100      	bne.n	da88 <_dtoa_r+0x72c>
    da86:	e787      	b.n	d998 <_dtoa_r+0x63c>
    da88:	e7bb      	b.n	da02 <_dtoa_r+0x6a6>
    da8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    da8c:	2a00      	cmp	r2, #0
    da8e:	d100      	bne.n	da92 <_dtoa_r+0x736>
    da90:	e087      	b.n	dba2 <_dtoa_r+0x846>
    da92:	9a22      	ldr	r2, [sp, #136]	; 0x88
    da94:	2a01      	cmp	r2, #1
    da96:	dc6e      	bgt.n	db76 <_dtoa_r+0x81a>
    da98:	9a18      	ldr	r2, [sp, #96]	; 0x60
    da9a:	2a00      	cmp	r2, #0
    da9c:	d067      	beq.n	db6e <_dtoa_r+0x812>
    da9e:	4ac4      	ldr	r2, [pc, #784]	; (ddb0 <_dtoa_r+0xa54>)
    daa0:	189b      	adds	r3, r3, r2
    daa2:	9d08      	ldr	r5, [sp, #32]
    daa4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    daa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    daa8:	2101      	movs	r1, #1
    daaa:	18d2      	adds	r2, r2, r3
    daac:	920b      	str	r2, [sp, #44]	; 0x2c
    daae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dab0:	9804      	ldr	r0, [sp, #16]
    dab2:	18d3      	adds	r3, r2, r3
    dab4:	930c      	str	r3, [sp, #48]	; 0x30
    dab6:	f000 fd68 	bl	e58a <__i2b>
    daba:	0006      	movs	r6, r0
    dabc:	2c00      	cmp	r4, #0
    dabe:	dd0e      	ble.n	dade <_dtoa_r+0x782>
    dac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dac2:	2b00      	cmp	r3, #0
    dac4:	dd0b      	ble.n	dade <_dtoa_r+0x782>
    dac6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dac8:	0023      	movs	r3, r4
    daca:	4294      	cmp	r4, r2
    dacc:	dd00      	ble.n	dad0 <_dtoa_r+0x774>
    dace:	0013      	movs	r3, r2
    dad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dad2:	1ae4      	subs	r4, r4, r3
    dad4:	1ad2      	subs	r2, r2, r3
    dad6:	920b      	str	r2, [sp, #44]	; 0x2c
    dad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dada:	1ad3      	subs	r3, r2, r3
    dadc:	930c      	str	r3, [sp, #48]	; 0x30
    dade:	9b08      	ldr	r3, [sp, #32]
    dae0:	2b00      	cmp	r3, #0
    dae2:	d01e      	beq.n	db22 <_dtoa_r+0x7c6>
    dae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dae6:	2b00      	cmp	r3, #0
    dae8:	d05f      	beq.n	dbaa <_dtoa_r+0x84e>
    daea:	2d00      	cmp	r5, #0
    daec:	dd11      	ble.n	db12 <_dtoa_r+0x7b6>
    daee:	0031      	movs	r1, r6
    daf0:	002a      	movs	r2, r5
    daf2:	9804      	ldr	r0, [sp, #16]
    daf4:	f000 fde2 	bl	e6bc <__pow5mult>
    daf8:	9a05      	ldr	r2, [sp, #20]
    dafa:	0001      	movs	r1, r0
    dafc:	0006      	movs	r6, r0
    dafe:	9804      	ldr	r0, [sp, #16]
    db00:	f000 fd4c 	bl	e59c <__multiply>
    db04:	9905      	ldr	r1, [sp, #20]
    db06:	9010      	str	r0, [sp, #64]	; 0x40
    db08:	9804      	ldr	r0, [sp, #16]
    db0a:	f000 fca0 	bl	e44e <_Bfree>
    db0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    db10:	9305      	str	r3, [sp, #20]
    db12:	9b08      	ldr	r3, [sp, #32]
    db14:	1b5a      	subs	r2, r3, r5
    db16:	d004      	beq.n	db22 <_dtoa_r+0x7c6>
    db18:	9905      	ldr	r1, [sp, #20]
    db1a:	9804      	ldr	r0, [sp, #16]
    db1c:	f000 fdce 	bl	e6bc <__pow5mult>
    db20:	9005      	str	r0, [sp, #20]
    db22:	2101      	movs	r1, #1
    db24:	9804      	ldr	r0, [sp, #16]
    db26:	f000 fd30 	bl	e58a <__i2b>
    db2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db2c:	9008      	str	r0, [sp, #32]
    db2e:	2b00      	cmp	r3, #0
    db30:	dd3d      	ble.n	dbae <_dtoa_r+0x852>
    db32:	001a      	movs	r2, r3
    db34:	0001      	movs	r1, r0
    db36:	9804      	ldr	r0, [sp, #16]
    db38:	f000 fdc0 	bl	e6bc <__pow5mult>
    db3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    db3e:	9008      	str	r0, [sp, #32]
    db40:	2500      	movs	r5, #0
    db42:	2b01      	cmp	r3, #1
    db44:	dc3b      	bgt.n	dbbe <_dtoa_r+0x862>
    db46:	2500      	movs	r5, #0
    db48:	9b06      	ldr	r3, [sp, #24]
    db4a:	42ab      	cmp	r3, r5
    db4c:	d133      	bne.n	dbb6 <_dtoa_r+0x85a>
    db4e:	9b07      	ldr	r3, [sp, #28]
    db50:	031b      	lsls	r3, r3, #12
    db52:	42ab      	cmp	r3, r5
    db54:	d12f      	bne.n	dbb6 <_dtoa_r+0x85a>
    db56:	9b19      	ldr	r3, [sp, #100]	; 0x64
    db58:	9a07      	ldr	r2, [sp, #28]
    db5a:	4213      	tst	r3, r2
    db5c:	d02b      	beq.n	dbb6 <_dtoa_r+0x85a>
    db5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    db60:	3501      	adds	r5, #1
    db62:	3301      	adds	r3, #1
    db64:	930b      	str	r3, [sp, #44]	; 0x2c
    db66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    db68:	3301      	adds	r3, #1
    db6a:	930c      	str	r3, [sp, #48]	; 0x30
    db6c:	e023      	b.n	dbb6 <_dtoa_r+0x85a>
    db6e:	2336      	movs	r3, #54	; 0x36
    db70:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    db72:	1a9b      	subs	r3, r3, r2
    db74:	e795      	b.n	daa2 <_dtoa_r+0x746>
    db76:	9b08      	ldr	r3, [sp, #32]
    db78:	1e7d      	subs	r5, r7, #1
    db7a:	42ab      	cmp	r3, r5
    db7c:	db06      	blt.n	db8c <_dtoa_r+0x830>
    db7e:	1b5d      	subs	r5, r3, r5
    db80:	2f00      	cmp	r7, #0
    db82:	da0b      	bge.n	db9c <_dtoa_r+0x840>
    db84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    db86:	1bdc      	subs	r4, r3, r7
    db88:	2300      	movs	r3, #0
    db8a:	e78c      	b.n	daa6 <_dtoa_r+0x74a>
    db8c:	9b08      	ldr	r3, [sp, #32]
    db8e:	9508      	str	r5, [sp, #32]
    db90:	1aea      	subs	r2, r5, r3
    db92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db94:	2500      	movs	r5, #0
    db96:	189b      	adds	r3, r3, r2
    db98:	930f      	str	r3, [sp, #60]	; 0x3c
    db9a:	e7f1      	b.n	db80 <_dtoa_r+0x824>
    db9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    db9e:	003b      	movs	r3, r7
    dba0:	e781      	b.n	daa6 <_dtoa_r+0x74a>
    dba2:	9d08      	ldr	r5, [sp, #32]
    dba4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    dba6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    dba8:	e788      	b.n	dabc <_dtoa_r+0x760>
    dbaa:	9a08      	ldr	r2, [sp, #32]
    dbac:	e7b4      	b.n	db18 <_dtoa_r+0x7bc>
    dbae:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dbb0:	2500      	movs	r5, #0
    dbb2:	2b01      	cmp	r3, #1
    dbb4:	ddc7      	ble.n	db46 <_dtoa_r+0x7ea>
    dbb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dbb8:	2001      	movs	r0, #1
    dbba:	2b00      	cmp	r3, #0
    dbbc:	d00b      	beq.n	dbd6 <_dtoa_r+0x87a>
    dbbe:	9b08      	ldr	r3, [sp, #32]
    dbc0:	9a08      	ldr	r2, [sp, #32]
    dbc2:	691b      	ldr	r3, [r3, #16]
    dbc4:	930f      	str	r3, [sp, #60]	; 0x3c
    dbc6:	3303      	adds	r3, #3
    dbc8:	009b      	lsls	r3, r3, #2
    dbca:	18d3      	adds	r3, r2, r3
    dbcc:	6858      	ldr	r0, [r3, #4]
    dbce:	f000 fc93 	bl	e4f8 <__hi0bits>
    dbd2:	2320      	movs	r3, #32
    dbd4:	1a18      	subs	r0, r3, r0
    dbd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dbd8:	18c0      	adds	r0, r0, r3
    dbda:	231f      	movs	r3, #31
    dbdc:	4018      	ands	r0, r3
    dbde:	d100      	bne.n	dbe2 <_dtoa_r+0x886>
    dbe0:	e0ab      	b.n	dd3a <_dtoa_r+0x9de>
    dbe2:	3301      	adds	r3, #1
    dbe4:	1a1b      	subs	r3, r3, r0
    dbe6:	2b04      	cmp	r3, #4
    dbe8:	dc00      	bgt.n	dbec <_dtoa_r+0x890>
    dbea:	e09b      	b.n	dd24 <_dtoa_r+0x9c8>
    dbec:	231c      	movs	r3, #28
    dbee:	1a18      	subs	r0, r3, r0
    dbf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dbf2:	1824      	adds	r4, r4, r0
    dbf4:	181b      	adds	r3, r3, r0
    dbf6:	930b      	str	r3, [sp, #44]	; 0x2c
    dbf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dbfa:	181b      	adds	r3, r3, r0
    dbfc:	930c      	str	r3, [sp, #48]	; 0x30
    dbfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc00:	2b00      	cmp	r3, #0
    dc02:	dd05      	ble.n	dc10 <_dtoa_r+0x8b4>
    dc04:	001a      	movs	r2, r3
    dc06:	9905      	ldr	r1, [sp, #20]
    dc08:	9804      	ldr	r0, [sp, #16]
    dc0a:	f000 fda9 	bl	e760 <__lshift>
    dc0e:	9005      	str	r0, [sp, #20]
    dc10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dc12:	2b00      	cmp	r3, #0
    dc14:	dd05      	ble.n	dc22 <_dtoa_r+0x8c6>
    dc16:	001a      	movs	r2, r3
    dc18:	9908      	ldr	r1, [sp, #32]
    dc1a:	9804      	ldr	r0, [sp, #16]
    dc1c:	f000 fda0 	bl	e760 <__lshift>
    dc20:	9008      	str	r0, [sp, #32]
    dc22:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dc24:	2b00      	cmp	r3, #0
    dc26:	d100      	bne.n	dc2a <_dtoa_r+0x8ce>
    dc28:	e089      	b.n	dd3e <_dtoa_r+0x9e2>
    dc2a:	9908      	ldr	r1, [sp, #32]
    dc2c:	9805      	ldr	r0, [sp, #20]
    dc2e:	f000 fde8 	bl	e802 <__mcmp>
    dc32:	2800      	cmp	r0, #0
    dc34:	db00      	blt.n	dc38 <_dtoa_r+0x8dc>
    dc36:	e082      	b.n	dd3e <_dtoa_r+0x9e2>
    dc38:	9b03      	ldr	r3, [sp, #12]
    dc3a:	220a      	movs	r2, #10
    dc3c:	3b01      	subs	r3, #1
    dc3e:	9303      	str	r3, [sp, #12]
    dc40:	9905      	ldr	r1, [sp, #20]
    dc42:	2300      	movs	r3, #0
    dc44:	9804      	ldr	r0, [sp, #16]
    dc46:	f000 fc1b 	bl	e480 <__multadd>
    dc4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc4c:	9005      	str	r0, [sp, #20]
    dc4e:	2b00      	cmp	r3, #0
    dc50:	d100      	bne.n	dc54 <_dtoa_r+0x8f8>
    dc52:	e15d      	b.n	df10 <_dtoa_r+0xbb4>
    dc54:	2300      	movs	r3, #0
    dc56:	0031      	movs	r1, r6
    dc58:	220a      	movs	r2, #10
    dc5a:	9804      	ldr	r0, [sp, #16]
    dc5c:	f000 fc10 	bl	e480 <__multadd>
    dc60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dc62:	0006      	movs	r6, r0
    dc64:	2b00      	cmp	r3, #0
    dc66:	dc02      	bgt.n	dc6e <_dtoa_r+0x912>
    dc68:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dc6a:	2b02      	cmp	r3, #2
    dc6c:	dc6d      	bgt.n	dd4a <_dtoa_r+0x9ee>
    dc6e:	2c00      	cmp	r4, #0
    dc70:	dd05      	ble.n	dc7e <_dtoa_r+0x922>
    dc72:	0031      	movs	r1, r6
    dc74:	0022      	movs	r2, r4
    dc76:	9804      	ldr	r0, [sp, #16]
    dc78:	f000 fd72 	bl	e760 <__lshift>
    dc7c:	0006      	movs	r6, r0
    dc7e:	0030      	movs	r0, r6
    dc80:	2d00      	cmp	r5, #0
    dc82:	d011      	beq.n	dca8 <_dtoa_r+0x94c>
    dc84:	6871      	ldr	r1, [r6, #4]
    dc86:	9804      	ldr	r0, [sp, #16]
    dc88:	f000 fba9 	bl	e3de <_Balloc>
    dc8c:	0031      	movs	r1, r6
    dc8e:	0004      	movs	r4, r0
    dc90:	6933      	ldr	r3, [r6, #16]
    dc92:	310c      	adds	r1, #12
    dc94:	1c9a      	adds	r2, r3, #2
    dc96:	0092      	lsls	r2, r2, #2
    dc98:	300c      	adds	r0, #12
    dc9a:	f7fd fd7a 	bl	b792 <memcpy>
    dc9e:	2201      	movs	r2, #1
    dca0:	0021      	movs	r1, r4
    dca2:	9804      	ldr	r0, [sp, #16]
    dca4:	f000 fd5c 	bl	e760 <__lshift>
    dca8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    dcaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dcac:	3f01      	subs	r7, #1
    dcae:	930b      	str	r3, [sp, #44]	; 0x2c
    dcb0:	19db      	adds	r3, r3, r7
    dcb2:	0037      	movs	r7, r6
    dcb4:	0006      	movs	r6, r0
    dcb6:	930f      	str	r3, [sp, #60]	; 0x3c
    dcb8:	9908      	ldr	r1, [sp, #32]
    dcba:	9805      	ldr	r0, [sp, #20]
    dcbc:	f7ff fac9 	bl	d252 <quorem>
    dcc0:	0039      	movs	r1, r7
    dcc2:	900d      	str	r0, [sp, #52]	; 0x34
    dcc4:	0004      	movs	r4, r0
    dcc6:	9805      	ldr	r0, [sp, #20]
    dcc8:	f000 fd9b 	bl	e802 <__mcmp>
    dccc:	0032      	movs	r2, r6
    dcce:	900e      	str	r0, [sp, #56]	; 0x38
    dcd0:	9908      	ldr	r1, [sp, #32]
    dcd2:	9804      	ldr	r0, [sp, #16]
    dcd4:	f000 fdae 	bl	e834 <__mdiff>
    dcd8:	2301      	movs	r3, #1
    dcda:	930c      	str	r3, [sp, #48]	; 0x30
    dcdc:	68c3      	ldr	r3, [r0, #12]
    dcde:	3430      	adds	r4, #48	; 0x30
    dce0:	0005      	movs	r5, r0
    dce2:	2b00      	cmp	r3, #0
    dce4:	d104      	bne.n	dcf0 <_dtoa_r+0x994>
    dce6:	0001      	movs	r1, r0
    dce8:	9805      	ldr	r0, [sp, #20]
    dcea:	f000 fd8a 	bl	e802 <__mcmp>
    dcee:	900c      	str	r0, [sp, #48]	; 0x30
    dcf0:	0029      	movs	r1, r5
    dcf2:	9804      	ldr	r0, [sp, #16]
    dcf4:	f000 fbab 	bl	e44e <_Bfree>
    dcf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dcfa:	9a22      	ldr	r2, [sp, #136]	; 0x88
    dcfc:	4313      	orrs	r3, r2
    dcfe:	d000      	beq.n	dd02 <_dtoa_r+0x9a6>
    dd00:	e089      	b.n	de16 <_dtoa_r+0xaba>
    dd02:	9a06      	ldr	r2, [sp, #24]
    dd04:	3301      	adds	r3, #1
    dd06:	4213      	tst	r3, r2
    dd08:	d000      	beq.n	dd0c <_dtoa_r+0x9b0>
    dd0a:	e084      	b.n	de16 <_dtoa_r+0xaba>
    dd0c:	2c39      	cmp	r4, #57	; 0x39
    dd0e:	d100      	bne.n	dd12 <_dtoa_r+0x9b6>
    dd10:	e0a3      	b.n	de5a <_dtoa_r+0xafe>
    dd12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dd14:	2b00      	cmp	r3, #0
    dd16:	dd01      	ble.n	dd1c <_dtoa_r+0x9c0>
    dd18:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    dd1a:	3431      	adds	r4, #49	; 0x31
    dd1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd1e:	1c5d      	adds	r5, r3, #1
    dd20:	701c      	strb	r4, [r3, #0]
    dd22:	e027      	b.n	dd74 <_dtoa_r+0xa18>
    dd24:	2b04      	cmp	r3, #4
    dd26:	d100      	bne.n	dd2a <_dtoa_r+0x9ce>
    dd28:	e769      	b.n	dbfe <_dtoa_r+0x8a2>
    dd2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dd2c:	331c      	adds	r3, #28
    dd2e:	18d2      	adds	r2, r2, r3
    dd30:	920b      	str	r2, [sp, #44]	; 0x2c
    dd32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dd34:	18e4      	adds	r4, r4, r3
    dd36:	18d3      	adds	r3, r2, r3
    dd38:	e760      	b.n	dbfc <_dtoa_r+0x8a0>
    dd3a:	0003      	movs	r3, r0
    dd3c:	e7f5      	b.n	dd2a <_dtoa_r+0x9ce>
    dd3e:	2f00      	cmp	r7, #0
    dd40:	dc3c      	bgt.n	ddbc <_dtoa_r+0xa60>
    dd42:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dd44:	2b02      	cmp	r3, #2
    dd46:	dd39      	ble.n	ddbc <_dtoa_r+0xa60>
    dd48:	970d      	str	r7, [sp, #52]	; 0x34
    dd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd4c:	2b00      	cmp	r3, #0
    dd4e:	d10c      	bne.n	dd6a <_dtoa_r+0xa0e>
    dd50:	9908      	ldr	r1, [sp, #32]
    dd52:	2205      	movs	r2, #5
    dd54:	9804      	ldr	r0, [sp, #16]
    dd56:	f000 fb93 	bl	e480 <__multadd>
    dd5a:	9008      	str	r0, [sp, #32]
    dd5c:	0001      	movs	r1, r0
    dd5e:	9805      	ldr	r0, [sp, #20]
    dd60:	f000 fd4f 	bl	e802 <__mcmp>
    dd64:	2800      	cmp	r0, #0
    dd66:	dd00      	ble.n	dd6a <_dtoa_r+0xa0e>
    dd68:	e55a      	b.n	d820 <_dtoa_r+0x4c4>
    dd6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    dd6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    dd6e:	43db      	mvns	r3, r3
    dd70:	9303      	str	r3, [sp, #12]
    dd72:	2700      	movs	r7, #0
    dd74:	9908      	ldr	r1, [sp, #32]
    dd76:	9804      	ldr	r0, [sp, #16]
    dd78:	f000 fb69 	bl	e44e <_Bfree>
    dd7c:	2e00      	cmp	r6, #0
    dd7e:	d100      	bne.n	dd82 <_dtoa_r+0xa26>
    dd80:	e63f      	b.n	da02 <_dtoa_r+0x6a6>
    dd82:	2f00      	cmp	r7, #0
    dd84:	d005      	beq.n	dd92 <_dtoa_r+0xa36>
    dd86:	42b7      	cmp	r7, r6
    dd88:	d003      	beq.n	dd92 <_dtoa_r+0xa36>
    dd8a:	0039      	movs	r1, r7
    dd8c:	9804      	ldr	r0, [sp, #16]
    dd8e:	f000 fb5e 	bl	e44e <_Bfree>
    dd92:	0031      	movs	r1, r6
    dd94:	9804      	ldr	r0, [sp, #16]
    dd96:	f000 fb5a 	bl	e44e <_Bfree>
    dd9a:	e632      	b.n	da02 <_dtoa_r+0x6a6>
    dd9c:	9508      	str	r5, [sp, #32]
    dd9e:	002e      	movs	r6, r5
    dda0:	e7e3      	b.n	dd6a <_dtoa_r+0xa0e>
    dda2:	2300      	movs	r3, #0
    dda4:	9308      	str	r3, [sp, #32]
    dda6:	001e      	movs	r6, r3
    dda8:	e7df      	b.n	dd6a <_dtoa_r+0xa0e>
    ddaa:	46c0      	nop			; (mov r8, r8)
    ddac:	40240000 	.word	0x40240000
    ddb0:	00000433 	.word	0x00000433
    ddb4:	9603      	str	r6, [sp, #12]
    ddb6:	9508      	str	r5, [sp, #32]
    ddb8:	002e      	movs	r6, r5
    ddba:	e531      	b.n	d820 <_dtoa_r+0x4c4>
    ddbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ddbe:	970d      	str	r7, [sp, #52]	; 0x34
    ddc0:	2b00      	cmp	r3, #0
    ddc2:	d000      	beq.n	ddc6 <_dtoa_r+0xa6a>
    ddc4:	e753      	b.n	dc6e <_dtoa_r+0x912>
    ddc6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ddc8:	9908      	ldr	r1, [sp, #32]
    ddca:	9805      	ldr	r0, [sp, #20]
    ddcc:	f7ff fa41 	bl	d252 <quorem>
    ddd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ddd2:	3030      	adds	r0, #48	; 0x30
    ddd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ddd6:	7028      	strb	r0, [r5, #0]
    ddd8:	3501      	adds	r5, #1
    ddda:	0004      	movs	r4, r0
    dddc:	1aeb      	subs	r3, r5, r3
    ddde:	429a      	cmp	r2, r3
    dde0:	dc78      	bgt.n	ded4 <_dtoa_r+0xb78>
    dde2:	1e15      	subs	r5, r2, #0
    dde4:	dc00      	bgt.n	dde8 <_dtoa_r+0xa8c>
    dde6:	2501      	movs	r5, #1
    dde8:	2700      	movs	r7, #0
    ddea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ddec:	195d      	adds	r5, r3, r5
    ddee:	9905      	ldr	r1, [sp, #20]
    ddf0:	2201      	movs	r2, #1
    ddf2:	9804      	ldr	r0, [sp, #16]
    ddf4:	f000 fcb4 	bl	e760 <__lshift>
    ddf8:	9908      	ldr	r1, [sp, #32]
    ddfa:	9005      	str	r0, [sp, #20]
    ddfc:	f000 fd01 	bl	e802 <__mcmp>
    de00:	2800      	cmp	r0, #0
    de02:	dc2f      	bgt.n	de64 <_dtoa_r+0xb08>
    de04:	d101      	bne.n	de0a <_dtoa_r+0xaae>
    de06:	07e3      	lsls	r3, r4, #31
    de08:	d42c      	bmi.n	de64 <_dtoa_r+0xb08>
    de0a:	1e6b      	subs	r3, r5, #1
    de0c:	781a      	ldrb	r2, [r3, #0]
    de0e:	2a30      	cmp	r2, #48	; 0x30
    de10:	d1b0      	bne.n	dd74 <_dtoa_r+0xa18>
    de12:	001d      	movs	r5, r3
    de14:	e7f9      	b.n	de0a <_dtoa_r+0xaae>
    de16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de18:	2b00      	cmp	r3, #0
    de1a:	db07      	blt.n	de2c <_dtoa_r+0xad0>
    de1c:	001d      	movs	r5, r3
    de1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    de20:	431d      	orrs	r5, r3
    de22:	d126      	bne.n	de72 <_dtoa_r+0xb16>
    de24:	2301      	movs	r3, #1
    de26:	9a06      	ldr	r2, [sp, #24]
    de28:	4213      	tst	r3, r2
    de2a:	d122      	bne.n	de72 <_dtoa_r+0xb16>
    de2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    de2e:	2b00      	cmp	r3, #0
    de30:	dc00      	bgt.n	de34 <_dtoa_r+0xad8>
    de32:	e773      	b.n	dd1c <_dtoa_r+0x9c0>
    de34:	9905      	ldr	r1, [sp, #20]
    de36:	2201      	movs	r2, #1
    de38:	9804      	ldr	r0, [sp, #16]
    de3a:	f000 fc91 	bl	e760 <__lshift>
    de3e:	9908      	ldr	r1, [sp, #32]
    de40:	9005      	str	r0, [sp, #20]
    de42:	f000 fcde 	bl	e802 <__mcmp>
    de46:	2800      	cmp	r0, #0
    de48:	dc04      	bgt.n	de54 <_dtoa_r+0xaf8>
    de4a:	d000      	beq.n	de4e <_dtoa_r+0xaf2>
    de4c:	e766      	b.n	dd1c <_dtoa_r+0x9c0>
    de4e:	07e3      	lsls	r3, r4, #31
    de50:	d400      	bmi.n	de54 <_dtoa_r+0xaf8>
    de52:	e763      	b.n	dd1c <_dtoa_r+0x9c0>
    de54:	2c39      	cmp	r4, #57	; 0x39
    de56:	d000      	beq.n	de5a <_dtoa_r+0xafe>
    de58:	e75e      	b.n	dd18 <_dtoa_r+0x9bc>
    de5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    de5e:	1c5d      	adds	r5, r3, #1
    de60:	2339      	movs	r3, #57	; 0x39
    de62:	7013      	strb	r3, [r2, #0]
    de64:	1e6b      	subs	r3, r5, #1
    de66:	781a      	ldrb	r2, [r3, #0]
    de68:	2a39      	cmp	r2, #57	; 0x39
    de6a:	d03b      	beq.n	dee4 <_dtoa_r+0xb88>
    de6c:	3201      	adds	r2, #1
    de6e:	701a      	strb	r2, [r3, #0]
    de70:	e780      	b.n	dd74 <_dtoa_r+0xa18>
    de72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de74:	3301      	adds	r3, #1
    de76:	930d      	str	r3, [sp, #52]	; 0x34
    de78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    de7a:	2b00      	cmp	r3, #0
    de7c:	dd05      	ble.n	de8a <_dtoa_r+0xb2e>
    de7e:	2c39      	cmp	r4, #57	; 0x39
    de80:	d0eb      	beq.n	de5a <_dtoa_r+0xafe>
    de82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    de84:	3401      	adds	r4, #1
    de86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de88:	e74a      	b.n	dd20 <_dtoa_r+0x9c4>
    de8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    de8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    de90:	701c      	strb	r4, [r3, #0]
    de92:	4293      	cmp	r3, r2
    de94:	d0ab      	beq.n	ddee <_dtoa_r+0xa92>
    de96:	2300      	movs	r3, #0
    de98:	220a      	movs	r2, #10
    de9a:	9905      	ldr	r1, [sp, #20]
    de9c:	9804      	ldr	r0, [sp, #16]
    de9e:	f000 faef 	bl	e480 <__multadd>
    dea2:	2300      	movs	r3, #0
    dea4:	9005      	str	r0, [sp, #20]
    dea6:	220a      	movs	r2, #10
    dea8:	0039      	movs	r1, r7
    deaa:	9804      	ldr	r0, [sp, #16]
    deac:	42b7      	cmp	r7, r6
    deae:	d106      	bne.n	debe <_dtoa_r+0xb62>
    deb0:	f000 fae6 	bl	e480 <__multadd>
    deb4:	0007      	movs	r7, r0
    deb6:	0006      	movs	r6, r0
    deb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    deba:	930b      	str	r3, [sp, #44]	; 0x2c
    debc:	e6fc      	b.n	dcb8 <_dtoa_r+0x95c>
    debe:	f000 fadf 	bl	e480 <__multadd>
    dec2:	0031      	movs	r1, r6
    dec4:	0007      	movs	r7, r0
    dec6:	2300      	movs	r3, #0
    dec8:	220a      	movs	r2, #10
    deca:	9804      	ldr	r0, [sp, #16]
    decc:	f000 fad8 	bl	e480 <__multadd>
    ded0:	0006      	movs	r6, r0
    ded2:	e7f1      	b.n	deb8 <_dtoa_r+0xb5c>
    ded4:	2300      	movs	r3, #0
    ded6:	220a      	movs	r2, #10
    ded8:	9905      	ldr	r1, [sp, #20]
    deda:	9804      	ldr	r0, [sp, #16]
    dedc:	f000 fad0 	bl	e480 <__multadd>
    dee0:	9005      	str	r0, [sp, #20]
    dee2:	e771      	b.n	ddc8 <_dtoa_r+0xa6c>
    dee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dee6:	429a      	cmp	r2, r3
    dee8:	d105      	bne.n	def6 <_dtoa_r+0xb9a>
    deea:	9b03      	ldr	r3, [sp, #12]
    deec:	3301      	adds	r3, #1
    deee:	9303      	str	r3, [sp, #12]
    def0:	2331      	movs	r3, #49	; 0x31
    def2:	7013      	strb	r3, [r2, #0]
    def4:	e73e      	b.n	dd74 <_dtoa_r+0xa18>
    def6:	001d      	movs	r5, r3
    def8:	e7b4      	b.n	de64 <_dtoa_r+0xb08>
    defa:	4b0a      	ldr	r3, [pc, #40]	; (df24 <_dtoa_r+0xbc8>)
    defc:	9a26      	ldr	r2, [sp, #152]	; 0x98
    defe:	930a      	str	r3, [sp, #40]	; 0x28
    df00:	4b09      	ldr	r3, [pc, #36]	; (df28 <_dtoa_r+0xbcc>)
    df02:	2a00      	cmp	r2, #0
    df04:	d001      	beq.n	df0a <_dtoa_r+0xbae>
    df06:	9a26      	ldr	r2, [sp, #152]	; 0x98
    df08:	6013      	str	r3, [r2, #0]
    df0a:	980a      	ldr	r0, [sp, #40]	; 0x28
    df0c:	b01d      	add	sp, #116	; 0x74
    df0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    df12:	2b00      	cmp	r3, #0
    df14:	dd00      	ble.n	df18 <_dtoa_r+0xbbc>
    df16:	e756      	b.n	ddc6 <_dtoa_r+0xa6a>
    df18:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df1a:	2b02      	cmp	r3, #2
    df1c:	dc00      	bgt.n	df20 <_dtoa_r+0xbc4>
    df1e:	e752      	b.n	ddc6 <_dtoa_r+0xa6a>
    df20:	e713      	b.n	dd4a <_dtoa_r+0x9ee>
    df22:	46c0      	nop			; (mov r8, r8)
    df24:	00011118 	.word	0x00011118
    df28:	00011120 	.word	0x00011120

0000df2c <__sflush_r>:
    df2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df2e:	898a      	ldrh	r2, [r1, #12]
    df30:	0005      	movs	r5, r0
    df32:	000c      	movs	r4, r1
    df34:	0713      	lsls	r3, r2, #28
    df36:	d460      	bmi.n	dffa <__sflush_r+0xce>
    df38:	684b      	ldr	r3, [r1, #4]
    df3a:	2b00      	cmp	r3, #0
    df3c:	dc04      	bgt.n	df48 <__sflush_r+0x1c>
    df3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    df40:	2b00      	cmp	r3, #0
    df42:	dc01      	bgt.n	df48 <__sflush_r+0x1c>
    df44:	2000      	movs	r0, #0
    df46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    df48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    df4a:	2f00      	cmp	r7, #0
    df4c:	d0fa      	beq.n	df44 <__sflush_r+0x18>
    df4e:	2300      	movs	r3, #0
    df50:	682e      	ldr	r6, [r5, #0]
    df52:	602b      	str	r3, [r5, #0]
    df54:	2380      	movs	r3, #128	; 0x80
    df56:	015b      	lsls	r3, r3, #5
    df58:	401a      	ands	r2, r3
    df5a:	d034      	beq.n	dfc6 <__sflush_r+0x9a>
    df5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    df5e:	89a3      	ldrh	r3, [r4, #12]
    df60:	075b      	lsls	r3, r3, #29
    df62:	d506      	bpl.n	df72 <__sflush_r+0x46>
    df64:	6863      	ldr	r3, [r4, #4]
    df66:	1ac0      	subs	r0, r0, r3
    df68:	6b63      	ldr	r3, [r4, #52]	; 0x34
    df6a:	2b00      	cmp	r3, #0
    df6c:	d001      	beq.n	df72 <__sflush_r+0x46>
    df6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    df70:	1ac0      	subs	r0, r0, r3
    df72:	0002      	movs	r2, r0
    df74:	6a21      	ldr	r1, [r4, #32]
    df76:	2300      	movs	r3, #0
    df78:	0028      	movs	r0, r5
    df7a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    df7c:	47b8      	blx	r7
    df7e:	89a1      	ldrh	r1, [r4, #12]
    df80:	1c43      	adds	r3, r0, #1
    df82:	d106      	bne.n	df92 <__sflush_r+0x66>
    df84:	682b      	ldr	r3, [r5, #0]
    df86:	2b1d      	cmp	r3, #29
    df88:	d831      	bhi.n	dfee <__sflush_r+0xc2>
    df8a:	4a2c      	ldr	r2, [pc, #176]	; (e03c <__sflush_r+0x110>)
    df8c:	40da      	lsrs	r2, r3
    df8e:	07d3      	lsls	r3, r2, #31
    df90:	d52d      	bpl.n	dfee <__sflush_r+0xc2>
    df92:	2300      	movs	r3, #0
    df94:	6063      	str	r3, [r4, #4]
    df96:	6923      	ldr	r3, [r4, #16]
    df98:	6023      	str	r3, [r4, #0]
    df9a:	04cb      	lsls	r3, r1, #19
    df9c:	d505      	bpl.n	dfaa <__sflush_r+0x7e>
    df9e:	1c43      	adds	r3, r0, #1
    dfa0:	d102      	bne.n	dfa8 <__sflush_r+0x7c>
    dfa2:	682b      	ldr	r3, [r5, #0]
    dfa4:	2b00      	cmp	r3, #0
    dfa6:	d100      	bne.n	dfaa <__sflush_r+0x7e>
    dfa8:	6560      	str	r0, [r4, #84]	; 0x54
    dfaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    dfac:	602e      	str	r6, [r5, #0]
    dfae:	2900      	cmp	r1, #0
    dfb0:	d0c8      	beq.n	df44 <__sflush_r+0x18>
    dfb2:	0023      	movs	r3, r4
    dfb4:	3344      	adds	r3, #68	; 0x44
    dfb6:	4299      	cmp	r1, r3
    dfb8:	d002      	beq.n	dfc0 <__sflush_r+0x94>
    dfba:	0028      	movs	r0, r5
    dfbc:	f7fd fe62 	bl	bc84 <_free_r>
    dfc0:	2000      	movs	r0, #0
    dfc2:	6360      	str	r0, [r4, #52]	; 0x34
    dfc4:	e7bf      	b.n	df46 <__sflush_r+0x1a>
    dfc6:	2301      	movs	r3, #1
    dfc8:	6a21      	ldr	r1, [r4, #32]
    dfca:	0028      	movs	r0, r5
    dfcc:	47b8      	blx	r7
    dfce:	1c43      	adds	r3, r0, #1
    dfd0:	d1c5      	bne.n	df5e <__sflush_r+0x32>
    dfd2:	682b      	ldr	r3, [r5, #0]
    dfd4:	2b00      	cmp	r3, #0
    dfd6:	d0c2      	beq.n	df5e <__sflush_r+0x32>
    dfd8:	2b1d      	cmp	r3, #29
    dfda:	d001      	beq.n	dfe0 <__sflush_r+0xb4>
    dfdc:	2b16      	cmp	r3, #22
    dfde:	d101      	bne.n	dfe4 <__sflush_r+0xb8>
    dfe0:	602e      	str	r6, [r5, #0]
    dfe2:	e7af      	b.n	df44 <__sflush_r+0x18>
    dfe4:	2340      	movs	r3, #64	; 0x40
    dfe6:	89a2      	ldrh	r2, [r4, #12]
    dfe8:	4313      	orrs	r3, r2
    dfea:	81a3      	strh	r3, [r4, #12]
    dfec:	e7ab      	b.n	df46 <__sflush_r+0x1a>
    dfee:	2340      	movs	r3, #64	; 0x40
    dff0:	430b      	orrs	r3, r1
    dff2:	2001      	movs	r0, #1
    dff4:	81a3      	strh	r3, [r4, #12]
    dff6:	4240      	negs	r0, r0
    dff8:	e7a5      	b.n	df46 <__sflush_r+0x1a>
    dffa:	690f      	ldr	r7, [r1, #16]
    dffc:	2f00      	cmp	r7, #0
    dffe:	d0a1      	beq.n	df44 <__sflush_r+0x18>
    e000:	680b      	ldr	r3, [r1, #0]
    e002:	600f      	str	r7, [r1, #0]
    e004:	1bdb      	subs	r3, r3, r7
    e006:	9301      	str	r3, [sp, #4]
    e008:	2300      	movs	r3, #0
    e00a:	0792      	lsls	r2, r2, #30
    e00c:	d100      	bne.n	e010 <__sflush_r+0xe4>
    e00e:	694b      	ldr	r3, [r1, #20]
    e010:	60a3      	str	r3, [r4, #8]
    e012:	9b01      	ldr	r3, [sp, #4]
    e014:	2b00      	cmp	r3, #0
    e016:	dc00      	bgt.n	e01a <__sflush_r+0xee>
    e018:	e794      	b.n	df44 <__sflush_r+0x18>
    e01a:	9b01      	ldr	r3, [sp, #4]
    e01c:	003a      	movs	r2, r7
    e01e:	6a21      	ldr	r1, [r4, #32]
    e020:	0028      	movs	r0, r5
    e022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    e024:	47b0      	blx	r6
    e026:	2800      	cmp	r0, #0
    e028:	dc03      	bgt.n	e032 <__sflush_r+0x106>
    e02a:	2340      	movs	r3, #64	; 0x40
    e02c:	89a2      	ldrh	r2, [r4, #12]
    e02e:	4313      	orrs	r3, r2
    e030:	e7df      	b.n	dff2 <__sflush_r+0xc6>
    e032:	9b01      	ldr	r3, [sp, #4]
    e034:	183f      	adds	r7, r7, r0
    e036:	1a1b      	subs	r3, r3, r0
    e038:	9301      	str	r3, [sp, #4]
    e03a:	e7ea      	b.n	e012 <__sflush_r+0xe6>
    e03c:	20400001 	.word	0x20400001

0000e040 <_fflush_r>:
    e040:	690b      	ldr	r3, [r1, #16]
    e042:	b570      	push	{r4, r5, r6, lr}
    e044:	0005      	movs	r5, r0
    e046:	000c      	movs	r4, r1
    e048:	2b00      	cmp	r3, #0
    e04a:	d101      	bne.n	e050 <_fflush_r+0x10>
    e04c:	2000      	movs	r0, #0
    e04e:	bd70      	pop	{r4, r5, r6, pc}
    e050:	2800      	cmp	r0, #0
    e052:	d004      	beq.n	e05e <_fflush_r+0x1e>
    e054:	6983      	ldr	r3, [r0, #24]
    e056:	2b00      	cmp	r3, #0
    e058:	d101      	bne.n	e05e <_fflush_r+0x1e>
    e05a:	f000 f85f 	bl	e11c <__sinit>
    e05e:	4b0b      	ldr	r3, [pc, #44]	; (e08c <_fflush_r+0x4c>)
    e060:	429c      	cmp	r4, r3
    e062:	d109      	bne.n	e078 <_fflush_r+0x38>
    e064:	686c      	ldr	r4, [r5, #4]
    e066:	220c      	movs	r2, #12
    e068:	5ea3      	ldrsh	r3, [r4, r2]
    e06a:	2b00      	cmp	r3, #0
    e06c:	d0ee      	beq.n	e04c <_fflush_r+0xc>
    e06e:	0021      	movs	r1, r4
    e070:	0028      	movs	r0, r5
    e072:	f7ff ff5b 	bl	df2c <__sflush_r>
    e076:	e7ea      	b.n	e04e <_fflush_r+0xe>
    e078:	4b05      	ldr	r3, [pc, #20]	; (e090 <_fflush_r+0x50>)
    e07a:	429c      	cmp	r4, r3
    e07c:	d101      	bne.n	e082 <_fflush_r+0x42>
    e07e:	68ac      	ldr	r4, [r5, #8]
    e080:	e7f1      	b.n	e066 <_fflush_r+0x26>
    e082:	4b04      	ldr	r3, [pc, #16]	; (e094 <_fflush_r+0x54>)
    e084:	429c      	cmp	r4, r3
    e086:	d1ee      	bne.n	e066 <_fflush_r+0x26>
    e088:	68ec      	ldr	r4, [r5, #12]
    e08a:	e7ec      	b.n	e066 <_fflush_r+0x26>
    e08c:	00011148 	.word	0x00011148
    e090:	00011168 	.word	0x00011168
    e094:	00011128 	.word	0x00011128

0000e098 <_cleanup_r>:
    e098:	b510      	push	{r4, lr}
    e09a:	4902      	ldr	r1, [pc, #8]	; (e0a4 <_cleanup_r+0xc>)
    e09c:	f000 f8b2 	bl	e204 <_fwalk_reent>
    e0a0:	bd10      	pop	{r4, pc}
    e0a2:	46c0      	nop			; (mov r8, r8)
    e0a4:	0000e041 	.word	0x0000e041

0000e0a8 <std.isra.0>:
    e0a8:	2300      	movs	r3, #0
    e0aa:	b510      	push	{r4, lr}
    e0ac:	0004      	movs	r4, r0
    e0ae:	6003      	str	r3, [r0, #0]
    e0b0:	6043      	str	r3, [r0, #4]
    e0b2:	6083      	str	r3, [r0, #8]
    e0b4:	8181      	strh	r1, [r0, #12]
    e0b6:	6643      	str	r3, [r0, #100]	; 0x64
    e0b8:	81c2      	strh	r2, [r0, #14]
    e0ba:	6103      	str	r3, [r0, #16]
    e0bc:	6143      	str	r3, [r0, #20]
    e0be:	6183      	str	r3, [r0, #24]
    e0c0:	0019      	movs	r1, r3
    e0c2:	2208      	movs	r2, #8
    e0c4:	305c      	adds	r0, #92	; 0x5c
    e0c6:	f7fd fb7f 	bl	b7c8 <memset>
    e0ca:	4b05      	ldr	r3, [pc, #20]	; (e0e0 <std.isra.0+0x38>)
    e0cc:	6224      	str	r4, [r4, #32]
    e0ce:	6263      	str	r3, [r4, #36]	; 0x24
    e0d0:	4b04      	ldr	r3, [pc, #16]	; (e0e4 <std.isra.0+0x3c>)
    e0d2:	62a3      	str	r3, [r4, #40]	; 0x28
    e0d4:	4b04      	ldr	r3, [pc, #16]	; (e0e8 <std.isra.0+0x40>)
    e0d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    e0d8:	4b04      	ldr	r3, [pc, #16]	; (e0ec <std.isra.0+0x44>)
    e0da:	6323      	str	r3, [r4, #48]	; 0x30
    e0dc:	bd10      	pop	{r4, pc}
    e0de:	46c0      	nop			; (mov r8, r8)
    e0e0:	0000edbd 	.word	0x0000edbd
    e0e4:	0000ede9 	.word	0x0000ede9
    e0e8:	0000ee21 	.word	0x0000ee21
    e0ec:	0000ee4d 	.word	0x0000ee4d

0000e0f0 <__sfmoreglue>:
    e0f0:	b570      	push	{r4, r5, r6, lr}
    e0f2:	2568      	movs	r5, #104	; 0x68
    e0f4:	1e4a      	subs	r2, r1, #1
    e0f6:	4355      	muls	r5, r2
    e0f8:	000e      	movs	r6, r1
    e0fa:	0029      	movs	r1, r5
    e0fc:	3174      	adds	r1, #116	; 0x74
    e0fe:	f7fd fe0b 	bl	bd18 <_malloc_r>
    e102:	1e04      	subs	r4, r0, #0
    e104:	d008      	beq.n	e118 <__sfmoreglue+0x28>
    e106:	2100      	movs	r1, #0
    e108:	002a      	movs	r2, r5
    e10a:	6001      	str	r1, [r0, #0]
    e10c:	6046      	str	r6, [r0, #4]
    e10e:	300c      	adds	r0, #12
    e110:	60a0      	str	r0, [r4, #8]
    e112:	3268      	adds	r2, #104	; 0x68
    e114:	f7fd fb58 	bl	b7c8 <memset>
    e118:	0020      	movs	r0, r4
    e11a:	bd70      	pop	{r4, r5, r6, pc}

0000e11c <__sinit>:
    e11c:	6983      	ldr	r3, [r0, #24]
    e11e:	b513      	push	{r0, r1, r4, lr}
    e120:	0004      	movs	r4, r0
    e122:	2b00      	cmp	r3, #0
    e124:	d128      	bne.n	e178 <__sinit+0x5c>
    e126:	6483      	str	r3, [r0, #72]	; 0x48
    e128:	64c3      	str	r3, [r0, #76]	; 0x4c
    e12a:	6503      	str	r3, [r0, #80]	; 0x50
    e12c:	4b13      	ldr	r3, [pc, #76]	; (e17c <__sinit+0x60>)
    e12e:	4a14      	ldr	r2, [pc, #80]	; (e180 <__sinit+0x64>)
    e130:	681b      	ldr	r3, [r3, #0]
    e132:	6282      	str	r2, [r0, #40]	; 0x28
    e134:	9301      	str	r3, [sp, #4]
    e136:	4298      	cmp	r0, r3
    e138:	d101      	bne.n	e13e <__sinit+0x22>
    e13a:	2301      	movs	r3, #1
    e13c:	6183      	str	r3, [r0, #24]
    e13e:	0020      	movs	r0, r4
    e140:	f000 f820 	bl	e184 <__sfp>
    e144:	6060      	str	r0, [r4, #4]
    e146:	0020      	movs	r0, r4
    e148:	f000 f81c 	bl	e184 <__sfp>
    e14c:	60a0      	str	r0, [r4, #8]
    e14e:	0020      	movs	r0, r4
    e150:	f000 f818 	bl	e184 <__sfp>
    e154:	2200      	movs	r2, #0
    e156:	60e0      	str	r0, [r4, #12]
    e158:	2104      	movs	r1, #4
    e15a:	6860      	ldr	r0, [r4, #4]
    e15c:	f7ff ffa4 	bl	e0a8 <std.isra.0>
    e160:	2201      	movs	r2, #1
    e162:	2109      	movs	r1, #9
    e164:	68a0      	ldr	r0, [r4, #8]
    e166:	f7ff ff9f 	bl	e0a8 <std.isra.0>
    e16a:	2202      	movs	r2, #2
    e16c:	2112      	movs	r1, #18
    e16e:	68e0      	ldr	r0, [r4, #12]
    e170:	f7ff ff9a 	bl	e0a8 <std.isra.0>
    e174:	2301      	movs	r3, #1
    e176:	61a3      	str	r3, [r4, #24]
    e178:	bd13      	pop	{r0, r1, r4, pc}
    e17a:	46c0      	nop			; (mov r8, r8)
    e17c:	00010f2c 	.word	0x00010f2c
    e180:	0000e099 	.word	0x0000e099

0000e184 <__sfp>:
    e184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e186:	4b1e      	ldr	r3, [pc, #120]	; (e200 <__sfp+0x7c>)
    e188:	0007      	movs	r7, r0
    e18a:	681e      	ldr	r6, [r3, #0]
    e18c:	69b3      	ldr	r3, [r6, #24]
    e18e:	2b00      	cmp	r3, #0
    e190:	d102      	bne.n	e198 <__sfp+0x14>
    e192:	0030      	movs	r0, r6
    e194:	f7ff ffc2 	bl	e11c <__sinit>
    e198:	3648      	adds	r6, #72	; 0x48
    e19a:	68b4      	ldr	r4, [r6, #8]
    e19c:	6873      	ldr	r3, [r6, #4]
    e19e:	3b01      	subs	r3, #1
    e1a0:	d504      	bpl.n	e1ac <__sfp+0x28>
    e1a2:	6833      	ldr	r3, [r6, #0]
    e1a4:	2b00      	cmp	r3, #0
    e1a6:	d007      	beq.n	e1b8 <__sfp+0x34>
    e1a8:	6836      	ldr	r6, [r6, #0]
    e1aa:	e7f6      	b.n	e19a <__sfp+0x16>
    e1ac:	220c      	movs	r2, #12
    e1ae:	5ea5      	ldrsh	r5, [r4, r2]
    e1b0:	2d00      	cmp	r5, #0
    e1b2:	d00d      	beq.n	e1d0 <__sfp+0x4c>
    e1b4:	3468      	adds	r4, #104	; 0x68
    e1b6:	e7f2      	b.n	e19e <__sfp+0x1a>
    e1b8:	2104      	movs	r1, #4
    e1ba:	0038      	movs	r0, r7
    e1bc:	f7ff ff98 	bl	e0f0 <__sfmoreglue>
    e1c0:	6030      	str	r0, [r6, #0]
    e1c2:	2800      	cmp	r0, #0
    e1c4:	d1f0      	bne.n	e1a8 <__sfp+0x24>
    e1c6:	230c      	movs	r3, #12
    e1c8:	0004      	movs	r4, r0
    e1ca:	603b      	str	r3, [r7, #0]
    e1cc:	0020      	movs	r0, r4
    e1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1d0:	2301      	movs	r3, #1
    e1d2:	0020      	movs	r0, r4
    e1d4:	425b      	negs	r3, r3
    e1d6:	81e3      	strh	r3, [r4, #14]
    e1d8:	3302      	adds	r3, #2
    e1da:	81a3      	strh	r3, [r4, #12]
    e1dc:	6665      	str	r5, [r4, #100]	; 0x64
    e1de:	6025      	str	r5, [r4, #0]
    e1e0:	60a5      	str	r5, [r4, #8]
    e1e2:	6065      	str	r5, [r4, #4]
    e1e4:	6125      	str	r5, [r4, #16]
    e1e6:	6165      	str	r5, [r4, #20]
    e1e8:	61a5      	str	r5, [r4, #24]
    e1ea:	2208      	movs	r2, #8
    e1ec:	0029      	movs	r1, r5
    e1ee:	305c      	adds	r0, #92	; 0x5c
    e1f0:	f7fd faea 	bl	b7c8 <memset>
    e1f4:	6365      	str	r5, [r4, #52]	; 0x34
    e1f6:	63a5      	str	r5, [r4, #56]	; 0x38
    e1f8:	64a5      	str	r5, [r4, #72]	; 0x48
    e1fa:	64e5      	str	r5, [r4, #76]	; 0x4c
    e1fc:	e7e6      	b.n	e1cc <__sfp+0x48>
    e1fe:	46c0      	nop			; (mov r8, r8)
    e200:	00010f2c 	.word	0x00010f2c

0000e204 <_fwalk_reent>:
    e204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e206:	0004      	movs	r4, r0
    e208:	0007      	movs	r7, r0
    e20a:	2600      	movs	r6, #0
    e20c:	9101      	str	r1, [sp, #4]
    e20e:	3448      	adds	r4, #72	; 0x48
    e210:	2c00      	cmp	r4, #0
    e212:	d101      	bne.n	e218 <_fwalk_reent+0x14>
    e214:	0030      	movs	r0, r6
    e216:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e218:	6863      	ldr	r3, [r4, #4]
    e21a:	68a5      	ldr	r5, [r4, #8]
    e21c:	9300      	str	r3, [sp, #0]
    e21e:	9b00      	ldr	r3, [sp, #0]
    e220:	3b01      	subs	r3, #1
    e222:	9300      	str	r3, [sp, #0]
    e224:	d501      	bpl.n	e22a <_fwalk_reent+0x26>
    e226:	6824      	ldr	r4, [r4, #0]
    e228:	e7f2      	b.n	e210 <_fwalk_reent+0xc>
    e22a:	89ab      	ldrh	r3, [r5, #12]
    e22c:	2b01      	cmp	r3, #1
    e22e:	d908      	bls.n	e242 <_fwalk_reent+0x3e>
    e230:	220e      	movs	r2, #14
    e232:	5eab      	ldrsh	r3, [r5, r2]
    e234:	3301      	adds	r3, #1
    e236:	d004      	beq.n	e242 <_fwalk_reent+0x3e>
    e238:	0029      	movs	r1, r5
    e23a:	0038      	movs	r0, r7
    e23c:	9b01      	ldr	r3, [sp, #4]
    e23e:	4798      	blx	r3
    e240:	4306      	orrs	r6, r0
    e242:	3568      	adds	r5, #104	; 0x68
    e244:	e7eb      	b.n	e21e <_fwalk_reent+0x1a>
	...

0000e248 <_findenv_r>:
    e248:	b5f0      	push	{r4, r5, r6, r7, lr}
    e24a:	000e      	movs	r6, r1
    e24c:	b085      	sub	sp, #20
    e24e:	0007      	movs	r7, r0
    e250:	9203      	str	r2, [sp, #12]
    e252:	f000 fed3 	bl	effc <__env_lock>
    e256:	4c19      	ldr	r4, [pc, #100]	; (e2bc <_findenv_r+0x74>)
    e258:	0033      	movs	r3, r6
    e25a:	6825      	ldr	r5, [r4, #0]
    e25c:	2d00      	cmp	r5, #0
    e25e:	d106      	bne.n	e26e <_findenv_r+0x26>
    e260:	0038      	movs	r0, r7
    e262:	f000 fecc 	bl	effe <__env_unlock>
    e266:	2000      	movs	r0, #0
    e268:	b005      	add	sp, #20
    e26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e26c:	3301      	adds	r3, #1
    e26e:	781a      	ldrb	r2, [r3, #0]
    e270:	2a00      	cmp	r2, #0
    e272:	d01f      	beq.n	e2b4 <_findenv_r+0x6c>
    e274:	2a3d      	cmp	r2, #61	; 0x3d
    e276:	d1f9      	bne.n	e26c <_findenv_r+0x24>
    e278:	e7f2      	b.n	e260 <_findenv_r+0x18>
    e27a:	3504      	adds	r5, #4
    e27c:	6828      	ldr	r0, [r5, #0]
    e27e:	2800      	cmp	r0, #0
    e280:	d0ee      	beq.n	e260 <_findenv_r+0x18>
    e282:	9a01      	ldr	r2, [sp, #4]
    e284:	0031      	movs	r1, r6
    e286:	f7fe fbc8 	bl	ca1a <strncmp>
    e28a:	2800      	cmp	r0, #0
    e28c:	d1f5      	bne.n	e27a <_findenv_r+0x32>
    e28e:	9a01      	ldr	r2, [sp, #4]
    e290:	682b      	ldr	r3, [r5, #0]
    e292:	4694      	mov	ip, r2
    e294:	4463      	add	r3, ip
    e296:	9302      	str	r3, [sp, #8]
    e298:	781b      	ldrb	r3, [r3, #0]
    e29a:	2b3d      	cmp	r3, #61	; 0x3d
    e29c:	d1ed      	bne.n	e27a <_findenv_r+0x32>
    e29e:	6823      	ldr	r3, [r4, #0]
    e2a0:	0038      	movs	r0, r7
    e2a2:	1aed      	subs	r5, r5, r3
    e2a4:	9b03      	ldr	r3, [sp, #12]
    e2a6:	10ad      	asrs	r5, r5, #2
    e2a8:	601d      	str	r5, [r3, #0]
    e2aa:	f000 fea8 	bl	effe <__env_unlock>
    e2ae:	9802      	ldr	r0, [sp, #8]
    e2b0:	3001      	adds	r0, #1
    e2b2:	e7d9      	b.n	e268 <_findenv_r+0x20>
    e2b4:	1b9b      	subs	r3, r3, r6
    e2b6:	9301      	str	r3, [sp, #4]
    e2b8:	e7e0      	b.n	e27c <_findenv_r+0x34>
    e2ba:	46c0      	nop			; (mov r8, r8)
    e2bc:	200002cc 	.word	0x200002cc

0000e2c0 <_getenv_r>:
    e2c0:	b507      	push	{r0, r1, r2, lr}
    e2c2:	aa01      	add	r2, sp, #4
    e2c4:	f7ff ffc0 	bl	e248 <_findenv_r>
    e2c8:	bd0e      	pop	{r1, r2, r3, pc}
	...

0000e2cc <__gettzinfo>:
    e2cc:	4800      	ldr	r0, [pc, #0]	; (e2d0 <__gettzinfo+0x4>)
    e2ce:	4770      	bx	lr
    e2d0:	2000028c 	.word	0x2000028c

0000e2d4 <_localeconv_r>:
    e2d4:	4b03      	ldr	r3, [pc, #12]	; (e2e4 <_localeconv_r+0x10>)
    e2d6:	681b      	ldr	r3, [r3, #0]
    e2d8:	6a18      	ldr	r0, [r3, #32]
    e2da:	2800      	cmp	r0, #0
    e2dc:	d100      	bne.n	e2e0 <_localeconv_r+0xc>
    e2de:	4802      	ldr	r0, [pc, #8]	; (e2e8 <_localeconv_r+0x14>)
    e2e0:	30f0      	adds	r0, #240	; 0xf0
    e2e2:	4770      	bx	lr
    e2e4:	200000b4 	.word	0x200000b4
    e2e8:	20000118 	.word	0x20000118

0000e2ec <__swhatbuf_r>:
    e2ec:	b570      	push	{r4, r5, r6, lr}
    e2ee:	000e      	movs	r6, r1
    e2f0:	001d      	movs	r5, r3
    e2f2:	230e      	movs	r3, #14
    e2f4:	5ec9      	ldrsh	r1, [r1, r3]
    e2f6:	b090      	sub	sp, #64	; 0x40
    e2f8:	0014      	movs	r4, r2
    e2fa:	2900      	cmp	r1, #0
    e2fc:	da07      	bge.n	e30e <__swhatbuf_r+0x22>
    e2fe:	2300      	movs	r3, #0
    e300:	602b      	str	r3, [r5, #0]
    e302:	89b3      	ldrh	r3, [r6, #12]
    e304:	061b      	lsls	r3, r3, #24
    e306:	d411      	bmi.n	e32c <__swhatbuf_r+0x40>
    e308:	2380      	movs	r3, #128	; 0x80
    e30a:	00db      	lsls	r3, r3, #3
    e30c:	e00f      	b.n	e32e <__swhatbuf_r+0x42>
    e30e:	aa01      	add	r2, sp, #4
    e310:	f000 fe76 	bl	f000 <_fstat_r>
    e314:	2800      	cmp	r0, #0
    e316:	dbf2      	blt.n	e2fe <__swhatbuf_r+0x12>
    e318:	22f0      	movs	r2, #240	; 0xf0
    e31a:	9b02      	ldr	r3, [sp, #8]
    e31c:	0212      	lsls	r2, r2, #8
    e31e:	4013      	ands	r3, r2
    e320:	4a05      	ldr	r2, [pc, #20]	; (e338 <__swhatbuf_r+0x4c>)
    e322:	189b      	adds	r3, r3, r2
    e324:	425a      	negs	r2, r3
    e326:	4153      	adcs	r3, r2
    e328:	602b      	str	r3, [r5, #0]
    e32a:	e7ed      	b.n	e308 <__swhatbuf_r+0x1c>
    e32c:	2340      	movs	r3, #64	; 0x40
    e32e:	2000      	movs	r0, #0
    e330:	6023      	str	r3, [r4, #0]
    e332:	b010      	add	sp, #64	; 0x40
    e334:	bd70      	pop	{r4, r5, r6, pc}
    e336:	46c0      	nop			; (mov r8, r8)
    e338:	ffffe000 	.word	0xffffe000

0000e33c <__smakebuf_r>:
    e33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e33e:	2602      	movs	r6, #2
    e340:	898b      	ldrh	r3, [r1, #12]
    e342:	0005      	movs	r5, r0
    e344:	000c      	movs	r4, r1
    e346:	4233      	tst	r3, r6
    e348:	d006      	beq.n	e358 <__smakebuf_r+0x1c>
    e34a:	0023      	movs	r3, r4
    e34c:	3347      	adds	r3, #71	; 0x47
    e34e:	6023      	str	r3, [r4, #0]
    e350:	6123      	str	r3, [r4, #16]
    e352:	2301      	movs	r3, #1
    e354:	6163      	str	r3, [r4, #20]
    e356:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e358:	ab01      	add	r3, sp, #4
    e35a:	466a      	mov	r2, sp
    e35c:	f7ff ffc6 	bl	e2ec <__swhatbuf_r>
    e360:	9900      	ldr	r1, [sp, #0]
    e362:	0007      	movs	r7, r0
    e364:	0028      	movs	r0, r5
    e366:	f7fd fcd7 	bl	bd18 <_malloc_r>
    e36a:	2800      	cmp	r0, #0
    e36c:	d108      	bne.n	e380 <__smakebuf_r+0x44>
    e36e:	220c      	movs	r2, #12
    e370:	5ea3      	ldrsh	r3, [r4, r2]
    e372:	059a      	lsls	r2, r3, #22
    e374:	d4ef      	bmi.n	e356 <__smakebuf_r+0x1a>
    e376:	2203      	movs	r2, #3
    e378:	4393      	bics	r3, r2
    e37a:	431e      	orrs	r6, r3
    e37c:	81a6      	strh	r6, [r4, #12]
    e37e:	e7e4      	b.n	e34a <__smakebuf_r+0xe>
    e380:	4b0f      	ldr	r3, [pc, #60]	; (e3c0 <__smakebuf_r+0x84>)
    e382:	62ab      	str	r3, [r5, #40]	; 0x28
    e384:	2380      	movs	r3, #128	; 0x80
    e386:	89a2      	ldrh	r2, [r4, #12]
    e388:	6020      	str	r0, [r4, #0]
    e38a:	4313      	orrs	r3, r2
    e38c:	81a3      	strh	r3, [r4, #12]
    e38e:	9b00      	ldr	r3, [sp, #0]
    e390:	6120      	str	r0, [r4, #16]
    e392:	6163      	str	r3, [r4, #20]
    e394:	9b01      	ldr	r3, [sp, #4]
    e396:	2b00      	cmp	r3, #0
    e398:	d00d      	beq.n	e3b6 <__smakebuf_r+0x7a>
    e39a:	230e      	movs	r3, #14
    e39c:	5ee1      	ldrsh	r1, [r4, r3]
    e39e:	0028      	movs	r0, r5
    e3a0:	f000 fe40 	bl	f024 <_isatty_r>
    e3a4:	2800      	cmp	r0, #0
    e3a6:	d006      	beq.n	e3b6 <__smakebuf_r+0x7a>
    e3a8:	2203      	movs	r2, #3
    e3aa:	89a3      	ldrh	r3, [r4, #12]
    e3ac:	4393      	bics	r3, r2
    e3ae:	001a      	movs	r2, r3
    e3b0:	2301      	movs	r3, #1
    e3b2:	4313      	orrs	r3, r2
    e3b4:	81a3      	strh	r3, [r4, #12]
    e3b6:	89a0      	ldrh	r0, [r4, #12]
    e3b8:	4338      	orrs	r0, r7
    e3ba:	81a0      	strh	r0, [r4, #12]
    e3bc:	e7cb      	b.n	e356 <__smakebuf_r+0x1a>
    e3be:	46c0      	nop			; (mov r8, r8)
    e3c0:	0000e099 	.word	0x0000e099

0000e3c4 <memchr>:
    e3c4:	b2c9      	uxtb	r1, r1
    e3c6:	1882      	adds	r2, r0, r2
    e3c8:	4290      	cmp	r0, r2
    e3ca:	d101      	bne.n	e3d0 <memchr+0xc>
    e3cc:	2000      	movs	r0, #0
    e3ce:	4770      	bx	lr
    e3d0:	7803      	ldrb	r3, [r0, #0]
    e3d2:	428b      	cmp	r3, r1
    e3d4:	d0fb      	beq.n	e3ce <memchr+0xa>
    e3d6:	3001      	adds	r0, #1
    e3d8:	e7f6      	b.n	e3c8 <memchr+0x4>

0000e3da <__malloc_lock>:
    e3da:	4770      	bx	lr

0000e3dc <__malloc_unlock>:
    e3dc:	4770      	bx	lr

0000e3de <_Balloc>:
    e3de:	b570      	push	{r4, r5, r6, lr}
    e3e0:	6a46      	ldr	r6, [r0, #36]	; 0x24
    e3e2:	0004      	movs	r4, r0
    e3e4:	000d      	movs	r5, r1
    e3e6:	2e00      	cmp	r6, #0
    e3e8:	d107      	bne.n	e3fa <_Balloc+0x1c>
    e3ea:	2010      	movs	r0, #16
    e3ec:	f7fd f99c 	bl	b728 <malloc>
    e3f0:	6260      	str	r0, [r4, #36]	; 0x24
    e3f2:	6046      	str	r6, [r0, #4]
    e3f4:	6086      	str	r6, [r0, #8]
    e3f6:	6006      	str	r6, [r0, #0]
    e3f8:	60c6      	str	r6, [r0, #12]
    e3fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e3fc:	68f3      	ldr	r3, [r6, #12]
    e3fe:	2b00      	cmp	r3, #0
    e400:	d013      	beq.n	e42a <_Balloc+0x4c>
    e402:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e404:	00aa      	lsls	r2, r5, #2
    e406:	68db      	ldr	r3, [r3, #12]
    e408:	189b      	adds	r3, r3, r2
    e40a:	6818      	ldr	r0, [r3, #0]
    e40c:	2800      	cmp	r0, #0
    e40e:	d118      	bne.n	e442 <_Balloc+0x64>
    e410:	2101      	movs	r1, #1
    e412:	000e      	movs	r6, r1
    e414:	40ae      	lsls	r6, r5
    e416:	1d72      	adds	r2, r6, #5
    e418:	0092      	lsls	r2, r2, #2
    e41a:	0020      	movs	r0, r4
    e41c:	f000 fac2 	bl	e9a4 <_calloc_r>
    e420:	2800      	cmp	r0, #0
    e422:	d00c      	beq.n	e43e <_Balloc+0x60>
    e424:	6045      	str	r5, [r0, #4]
    e426:	6086      	str	r6, [r0, #8]
    e428:	e00d      	b.n	e446 <_Balloc+0x68>
    e42a:	2221      	movs	r2, #33	; 0x21
    e42c:	2104      	movs	r1, #4
    e42e:	0020      	movs	r0, r4
    e430:	f000 fab8 	bl	e9a4 <_calloc_r>
    e434:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e436:	60f0      	str	r0, [r6, #12]
    e438:	68db      	ldr	r3, [r3, #12]
    e43a:	2b00      	cmp	r3, #0
    e43c:	d1e1      	bne.n	e402 <_Balloc+0x24>
    e43e:	2000      	movs	r0, #0
    e440:	bd70      	pop	{r4, r5, r6, pc}
    e442:	6802      	ldr	r2, [r0, #0]
    e444:	601a      	str	r2, [r3, #0]
    e446:	2300      	movs	r3, #0
    e448:	6103      	str	r3, [r0, #16]
    e44a:	60c3      	str	r3, [r0, #12]
    e44c:	e7f8      	b.n	e440 <_Balloc+0x62>

0000e44e <_Bfree>:
    e44e:	b570      	push	{r4, r5, r6, lr}
    e450:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e452:	0006      	movs	r6, r0
    e454:	000d      	movs	r5, r1
    e456:	2c00      	cmp	r4, #0
    e458:	d107      	bne.n	e46a <_Bfree+0x1c>
    e45a:	2010      	movs	r0, #16
    e45c:	f7fd f964 	bl	b728 <malloc>
    e460:	6270      	str	r0, [r6, #36]	; 0x24
    e462:	6044      	str	r4, [r0, #4]
    e464:	6084      	str	r4, [r0, #8]
    e466:	6004      	str	r4, [r0, #0]
    e468:	60c4      	str	r4, [r0, #12]
    e46a:	2d00      	cmp	r5, #0
    e46c:	d007      	beq.n	e47e <_Bfree+0x30>
    e46e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    e470:	686a      	ldr	r2, [r5, #4]
    e472:	68db      	ldr	r3, [r3, #12]
    e474:	0092      	lsls	r2, r2, #2
    e476:	189b      	adds	r3, r3, r2
    e478:	681a      	ldr	r2, [r3, #0]
    e47a:	602a      	str	r2, [r5, #0]
    e47c:	601d      	str	r5, [r3, #0]
    e47e:	bd70      	pop	{r4, r5, r6, pc}

0000e480 <__multadd>:
    e480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e482:	001e      	movs	r6, r3
    e484:	2314      	movs	r3, #20
    e486:	469c      	mov	ip, r3
    e488:	0007      	movs	r7, r0
    e48a:	000c      	movs	r4, r1
    e48c:	2000      	movs	r0, #0
    e48e:	690d      	ldr	r5, [r1, #16]
    e490:	448c      	add	ip, r1
    e492:	4663      	mov	r3, ip
    e494:	8819      	ldrh	r1, [r3, #0]
    e496:	681b      	ldr	r3, [r3, #0]
    e498:	4351      	muls	r1, r2
    e49a:	0c1b      	lsrs	r3, r3, #16
    e49c:	4353      	muls	r3, r2
    e49e:	1989      	adds	r1, r1, r6
    e4a0:	0c0e      	lsrs	r6, r1, #16
    e4a2:	199b      	adds	r3, r3, r6
    e4a4:	b289      	uxth	r1, r1
    e4a6:	0c1e      	lsrs	r6, r3, #16
    e4a8:	041b      	lsls	r3, r3, #16
    e4aa:	185b      	adds	r3, r3, r1
    e4ac:	4661      	mov	r1, ip
    e4ae:	3001      	adds	r0, #1
    e4b0:	c108      	stmia	r1!, {r3}
    e4b2:	468c      	mov	ip, r1
    e4b4:	4285      	cmp	r5, r0
    e4b6:	dcec      	bgt.n	e492 <__multadd+0x12>
    e4b8:	2e00      	cmp	r6, #0
    e4ba:	d01b      	beq.n	e4f4 <__multadd+0x74>
    e4bc:	68a3      	ldr	r3, [r4, #8]
    e4be:	429d      	cmp	r5, r3
    e4c0:	db12      	blt.n	e4e8 <__multadd+0x68>
    e4c2:	6863      	ldr	r3, [r4, #4]
    e4c4:	0038      	movs	r0, r7
    e4c6:	1c59      	adds	r1, r3, #1
    e4c8:	f7ff ff89 	bl	e3de <_Balloc>
    e4cc:	0021      	movs	r1, r4
    e4ce:	6923      	ldr	r3, [r4, #16]
    e4d0:	9001      	str	r0, [sp, #4]
    e4d2:	1c9a      	adds	r2, r3, #2
    e4d4:	0092      	lsls	r2, r2, #2
    e4d6:	310c      	adds	r1, #12
    e4d8:	300c      	adds	r0, #12
    e4da:	f7fd f95a 	bl	b792 <memcpy>
    e4de:	0021      	movs	r1, r4
    e4e0:	0038      	movs	r0, r7
    e4e2:	f7ff ffb4 	bl	e44e <_Bfree>
    e4e6:	9c01      	ldr	r4, [sp, #4]
    e4e8:	1d2b      	adds	r3, r5, #4
    e4ea:	009b      	lsls	r3, r3, #2
    e4ec:	18e3      	adds	r3, r4, r3
    e4ee:	3501      	adds	r5, #1
    e4f0:	605e      	str	r6, [r3, #4]
    e4f2:	6125      	str	r5, [r4, #16]
    e4f4:	0020      	movs	r0, r4
    e4f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000e4f8 <__hi0bits>:
    e4f8:	0003      	movs	r3, r0
    e4fa:	0c02      	lsrs	r2, r0, #16
    e4fc:	2000      	movs	r0, #0
    e4fe:	4282      	cmp	r2, r0
    e500:	d101      	bne.n	e506 <__hi0bits+0xe>
    e502:	041b      	lsls	r3, r3, #16
    e504:	3010      	adds	r0, #16
    e506:	0e1a      	lsrs	r2, r3, #24
    e508:	d101      	bne.n	e50e <__hi0bits+0x16>
    e50a:	3008      	adds	r0, #8
    e50c:	021b      	lsls	r3, r3, #8
    e50e:	0f1a      	lsrs	r2, r3, #28
    e510:	d101      	bne.n	e516 <__hi0bits+0x1e>
    e512:	3004      	adds	r0, #4
    e514:	011b      	lsls	r3, r3, #4
    e516:	0f9a      	lsrs	r2, r3, #30
    e518:	d101      	bne.n	e51e <__hi0bits+0x26>
    e51a:	3002      	adds	r0, #2
    e51c:	009b      	lsls	r3, r3, #2
    e51e:	2b00      	cmp	r3, #0
    e520:	db03      	blt.n	e52a <__hi0bits+0x32>
    e522:	3001      	adds	r0, #1
    e524:	005b      	lsls	r3, r3, #1
    e526:	d400      	bmi.n	e52a <__hi0bits+0x32>
    e528:	2020      	movs	r0, #32
    e52a:	4770      	bx	lr

0000e52c <__lo0bits>:
    e52c:	2207      	movs	r2, #7
    e52e:	6803      	ldr	r3, [r0, #0]
    e530:	b510      	push	{r4, lr}
    e532:	0001      	movs	r1, r0
    e534:	401a      	ands	r2, r3
    e536:	d00d      	beq.n	e554 <__lo0bits+0x28>
    e538:	2401      	movs	r4, #1
    e53a:	2000      	movs	r0, #0
    e53c:	4223      	tst	r3, r4
    e53e:	d105      	bne.n	e54c <__lo0bits+0x20>
    e540:	3002      	adds	r0, #2
    e542:	4203      	tst	r3, r0
    e544:	d003      	beq.n	e54e <__lo0bits+0x22>
    e546:	40e3      	lsrs	r3, r4
    e548:	0020      	movs	r0, r4
    e54a:	600b      	str	r3, [r1, #0]
    e54c:	bd10      	pop	{r4, pc}
    e54e:	089b      	lsrs	r3, r3, #2
    e550:	600b      	str	r3, [r1, #0]
    e552:	e7fb      	b.n	e54c <__lo0bits+0x20>
    e554:	b29c      	uxth	r4, r3
    e556:	0010      	movs	r0, r2
    e558:	2c00      	cmp	r4, #0
    e55a:	d101      	bne.n	e560 <__lo0bits+0x34>
    e55c:	2010      	movs	r0, #16
    e55e:	0c1b      	lsrs	r3, r3, #16
    e560:	b2da      	uxtb	r2, r3
    e562:	2a00      	cmp	r2, #0
    e564:	d101      	bne.n	e56a <__lo0bits+0x3e>
    e566:	3008      	adds	r0, #8
    e568:	0a1b      	lsrs	r3, r3, #8
    e56a:	071a      	lsls	r2, r3, #28
    e56c:	d101      	bne.n	e572 <__lo0bits+0x46>
    e56e:	3004      	adds	r0, #4
    e570:	091b      	lsrs	r3, r3, #4
    e572:	079a      	lsls	r2, r3, #30
    e574:	d101      	bne.n	e57a <__lo0bits+0x4e>
    e576:	3002      	adds	r0, #2
    e578:	089b      	lsrs	r3, r3, #2
    e57a:	07da      	lsls	r2, r3, #31
    e57c:	d4e8      	bmi.n	e550 <__lo0bits+0x24>
    e57e:	085b      	lsrs	r3, r3, #1
    e580:	d001      	beq.n	e586 <__lo0bits+0x5a>
    e582:	3001      	adds	r0, #1
    e584:	e7e4      	b.n	e550 <__lo0bits+0x24>
    e586:	2020      	movs	r0, #32
    e588:	e7e0      	b.n	e54c <__lo0bits+0x20>

0000e58a <__i2b>:
    e58a:	b510      	push	{r4, lr}
    e58c:	000c      	movs	r4, r1
    e58e:	2101      	movs	r1, #1
    e590:	f7ff ff25 	bl	e3de <_Balloc>
    e594:	2301      	movs	r3, #1
    e596:	6144      	str	r4, [r0, #20]
    e598:	6103      	str	r3, [r0, #16]
    e59a:	bd10      	pop	{r4, pc}

0000e59c <__multiply>:
    e59c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e59e:	690b      	ldr	r3, [r1, #16]
    e5a0:	0015      	movs	r5, r2
    e5a2:	6912      	ldr	r2, [r2, #16]
    e5a4:	b089      	sub	sp, #36	; 0x24
    e5a6:	000c      	movs	r4, r1
    e5a8:	4293      	cmp	r3, r2
    e5aa:	da01      	bge.n	e5b0 <__multiply+0x14>
    e5ac:	002c      	movs	r4, r5
    e5ae:	000d      	movs	r5, r1
    e5b0:	6927      	ldr	r7, [r4, #16]
    e5b2:	692e      	ldr	r6, [r5, #16]
    e5b4:	68a2      	ldr	r2, [r4, #8]
    e5b6:	19bb      	adds	r3, r7, r6
    e5b8:	6861      	ldr	r1, [r4, #4]
    e5ba:	9301      	str	r3, [sp, #4]
    e5bc:	4293      	cmp	r3, r2
    e5be:	dd00      	ble.n	e5c2 <__multiply+0x26>
    e5c0:	3101      	adds	r1, #1
    e5c2:	f7ff ff0c 	bl	e3de <_Balloc>
    e5c6:	0003      	movs	r3, r0
    e5c8:	3314      	adds	r3, #20
    e5ca:	9300      	str	r3, [sp, #0]
    e5cc:	9a00      	ldr	r2, [sp, #0]
    e5ce:	19bb      	adds	r3, r7, r6
    e5d0:	4694      	mov	ip, r2
    e5d2:	009b      	lsls	r3, r3, #2
    e5d4:	449c      	add	ip, r3
    e5d6:	0013      	movs	r3, r2
    e5d8:	2200      	movs	r2, #0
    e5da:	9004      	str	r0, [sp, #16]
    e5dc:	4563      	cmp	r3, ip
    e5de:	d31c      	bcc.n	e61a <__multiply+0x7e>
    e5e0:	002a      	movs	r2, r5
    e5e2:	3414      	adds	r4, #20
    e5e4:	00bf      	lsls	r7, r7, #2
    e5e6:	19e3      	adds	r3, r4, r7
    e5e8:	3214      	adds	r2, #20
    e5ea:	00b6      	lsls	r6, r6, #2
    e5ec:	9305      	str	r3, [sp, #20]
    e5ee:	1993      	adds	r3, r2, r6
    e5f0:	9402      	str	r4, [sp, #8]
    e5f2:	9306      	str	r3, [sp, #24]
    e5f4:	9b06      	ldr	r3, [sp, #24]
    e5f6:	429a      	cmp	r2, r3
    e5f8:	d311      	bcc.n	e61e <__multiply+0x82>
    e5fa:	9b01      	ldr	r3, [sp, #4]
    e5fc:	2b00      	cmp	r3, #0
    e5fe:	dd06      	ble.n	e60e <__multiply+0x72>
    e600:	2304      	movs	r3, #4
    e602:	425b      	negs	r3, r3
    e604:	449c      	add	ip, r3
    e606:	4663      	mov	r3, ip
    e608:	681b      	ldr	r3, [r3, #0]
    e60a:	2b00      	cmp	r3, #0
    e60c:	d051      	beq.n	e6b2 <__multiply+0x116>
    e60e:	9b04      	ldr	r3, [sp, #16]
    e610:	9a01      	ldr	r2, [sp, #4]
    e612:	0018      	movs	r0, r3
    e614:	611a      	str	r2, [r3, #16]
    e616:	b009      	add	sp, #36	; 0x24
    e618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e61a:	c304      	stmia	r3!, {r2}
    e61c:	e7de      	b.n	e5dc <__multiply+0x40>
    e61e:	8814      	ldrh	r4, [r2, #0]
    e620:	2c00      	cmp	r4, #0
    e622:	d01e      	beq.n	e662 <__multiply+0xc6>
    e624:	2600      	movs	r6, #0
    e626:	9d00      	ldr	r5, [sp, #0]
    e628:	9f02      	ldr	r7, [sp, #8]
    e62a:	cf01      	ldmia	r7!, {r0}
    e62c:	9507      	str	r5, [sp, #28]
    e62e:	cd08      	ldmia	r5!, {r3}
    e630:	9303      	str	r3, [sp, #12]
    e632:	b283      	uxth	r3, r0
    e634:	4363      	muls	r3, r4
    e636:	0019      	movs	r1, r3
    e638:	466b      	mov	r3, sp
    e63a:	0c00      	lsrs	r0, r0, #16
    e63c:	899b      	ldrh	r3, [r3, #12]
    e63e:	4360      	muls	r0, r4
    e640:	18cb      	adds	r3, r1, r3
    e642:	9903      	ldr	r1, [sp, #12]
    e644:	199b      	adds	r3, r3, r6
    e646:	0c09      	lsrs	r1, r1, #16
    e648:	1841      	adds	r1, r0, r1
    e64a:	0c18      	lsrs	r0, r3, #16
    e64c:	1809      	adds	r1, r1, r0
    e64e:	0c0e      	lsrs	r6, r1, #16
    e650:	b29b      	uxth	r3, r3
    e652:	0409      	lsls	r1, r1, #16
    e654:	430b      	orrs	r3, r1
    e656:	9907      	ldr	r1, [sp, #28]
    e658:	600b      	str	r3, [r1, #0]
    e65a:	9b05      	ldr	r3, [sp, #20]
    e65c:	42bb      	cmp	r3, r7
    e65e:	d8e4      	bhi.n	e62a <__multiply+0x8e>
    e660:	602e      	str	r6, [r5, #0]
    e662:	6813      	ldr	r3, [r2, #0]
    e664:	0c1b      	lsrs	r3, r3, #16
    e666:	9303      	str	r3, [sp, #12]
    e668:	d01e      	beq.n	e6a8 <__multiply+0x10c>
    e66a:	2600      	movs	r6, #0
    e66c:	9b00      	ldr	r3, [sp, #0]
    e66e:	9c02      	ldr	r4, [sp, #8]
    e670:	681b      	ldr	r3, [r3, #0]
    e672:	9800      	ldr	r0, [sp, #0]
    e674:	0007      	movs	r7, r0
    e676:	8821      	ldrh	r1, [r4, #0]
    e678:	9d03      	ldr	r5, [sp, #12]
    e67a:	b29b      	uxth	r3, r3
    e67c:	4369      	muls	r1, r5
    e67e:	c820      	ldmia	r0!, {r5}
    e680:	0c2d      	lsrs	r5, r5, #16
    e682:	1949      	adds	r1, r1, r5
    e684:	198e      	adds	r6, r1, r6
    e686:	0431      	lsls	r1, r6, #16
    e688:	430b      	orrs	r3, r1
    e68a:	603b      	str	r3, [r7, #0]
    e68c:	cc08      	ldmia	r4!, {r3}
    e68e:	9903      	ldr	r1, [sp, #12]
    e690:	0c1b      	lsrs	r3, r3, #16
    e692:	434b      	muls	r3, r1
    e694:	6879      	ldr	r1, [r7, #4]
    e696:	0c36      	lsrs	r6, r6, #16
    e698:	b289      	uxth	r1, r1
    e69a:	185b      	adds	r3, r3, r1
    e69c:	9905      	ldr	r1, [sp, #20]
    e69e:	199b      	adds	r3, r3, r6
    e6a0:	0c1e      	lsrs	r6, r3, #16
    e6a2:	42a1      	cmp	r1, r4
    e6a4:	d8e6      	bhi.n	e674 <__multiply+0xd8>
    e6a6:	6003      	str	r3, [r0, #0]
    e6a8:	9b00      	ldr	r3, [sp, #0]
    e6aa:	3204      	adds	r2, #4
    e6ac:	3304      	adds	r3, #4
    e6ae:	9300      	str	r3, [sp, #0]
    e6b0:	e7a0      	b.n	e5f4 <__multiply+0x58>
    e6b2:	9b01      	ldr	r3, [sp, #4]
    e6b4:	3b01      	subs	r3, #1
    e6b6:	9301      	str	r3, [sp, #4]
    e6b8:	e79f      	b.n	e5fa <__multiply+0x5e>
	...

0000e6bc <__pow5mult>:
    e6bc:	2303      	movs	r3, #3
    e6be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e6c0:	4013      	ands	r3, r2
    e6c2:	0005      	movs	r5, r0
    e6c4:	000e      	movs	r6, r1
    e6c6:	0014      	movs	r4, r2
    e6c8:	2b00      	cmp	r3, #0
    e6ca:	d008      	beq.n	e6de <__pow5mult+0x22>
    e6cc:	4922      	ldr	r1, [pc, #136]	; (e758 <__pow5mult+0x9c>)
    e6ce:	3b01      	subs	r3, #1
    e6d0:	009a      	lsls	r2, r3, #2
    e6d2:	5852      	ldr	r2, [r2, r1]
    e6d4:	2300      	movs	r3, #0
    e6d6:	0031      	movs	r1, r6
    e6d8:	f7ff fed2 	bl	e480 <__multadd>
    e6dc:	0006      	movs	r6, r0
    e6de:	10a3      	asrs	r3, r4, #2
    e6e0:	9301      	str	r3, [sp, #4]
    e6e2:	d036      	beq.n	e752 <__pow5mult+0x96>
    e6e4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    e6e6:	2c00      	cmp	r4, #0
    e6e8:	d107      	bne.n	e6fa <__pow5mult+0x3e>
    e6ea:	2010      	movs	r0, #16
    e6ec:	f7fd f81c 	bl	b728 <malloc>
    e6f0:	6268      	str	r0, [r5, #36]	; 0x24
    e6f2:	6044      	str	r4, [r0, #4]
    e6f4:	6084      	str	r4, [r0, #8]
    e6f6:	6004      	str	r4, [r0, #0]
    e6f8:	60c4      	str	r4, [r0, #12]
    e6fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e6fc:	68bc      	ldr	r4, [r7, #8]
    e6fe:	2c00      	cmp	r4, #0
    e700:	d107      	bne.n	e712 <__pow5mult+0x56>
    e702:	4916      	ldr	r1, [pc, #88]	; (e75c <__pow5mult+0xa0>)
    e704:	0028      	movs	r0, r5
    e706:	f7ff ff40 	bl	e58a <__i2b>
    e70a:	2300      	movs	r3, #0
    e70c:	0004      	movs	r4, r0
    e70e:	60b8      	str	r0, [r7, #8]
    e710:	6003      	str	r3, [r0, #0]
    e712:	2201      	movs	r2, #1
    e714:	9b01      	ldr	r3, [sp, #4]
    e716:	4213      	tst	r3, r2
    e718:	d00a      	beq.n	e730 <__pow5mult+0x74>
    e71a:	0031      	movs	r1, r6
    e71c:	0022      	movs	r2, r4
    e71e:	0028      	movs	r0, r5
    e720:	f7ff ff3c 	bl	e59c <__multiply>
    e724:	0007      	movs	r7, r0
    e726:	0031      	movs	r1, r6
    e728:	0028      	movs	r0, r5
    e72a:	f7ff fe90 	bl	e44e <_Bfree>
    e72e:	003e      	movs	r6, r7
    e730:	9b01      	ldr	r3, [sp, #4]
    e732:	105b      	asrs	r3, r3, #1
    e734:	9301      	str	r3, [sp, #4]
    e736:	d00c      	beq.n	e752 <__pow5mult+0x96>
    e738:	6820      	ldr	r0, [r4, #0]
    e73a:	2800      	cmp	r0, #0
    e73c:	d107      	bne.n	e74e <__pow5mult+0x92>
    e73e:	0022      	movs	r2, r4
    e740:	0021      	movs	r1, r4
    e742:	0028      	movs	r0, r5
    e744:	f7ff ff2a 	bl	e59c <__multiply>
    e748:	2300      	movs	r3, #0
    e74a:	6020      	str	r0, [r4, #0]
    e74c:	6003      	str	r3, [r0, #0]
    e74e:	0004      	movs	r4, r0
    e750:	e7df      	b.n	e712 <__pow5mult+0x56>
    e752:	0030      	movs	r0, r6
    e754:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e756:	46c0      	nop			; (mov r8, r8)
    e758:	000112d8 	.word	0x000112d8
    e75c:	00000271 	.word	0x00000271

0000e760 <__lshift>:
    e760:	b5f0      	push	{r4, r5, r6, r7, lr}
    e762:	000d      	movs	r5, r1
    e764:	0017      	movs	r7, r2
    e766:	692b      	ldr	r3, [r5, #16]
    e768:	1154      	asrs	r4, r2, #5
    e76a:	b085      	sub	sp, #20
    e76c:	18e3      	adds	r3, r4, r3
    e76e:	9302      	str	r3, [sp, #8]
    e770:	3301      	adds	r3, #1
    e772:	9301      	str	r3, [sp, #4]
    e774:	6849      	ldr	r1, [r1, #4]
    e776:	68ab      	ldr	r3, [r5, #8]
    e778:	9003      	str	r0, [sp, #12]
    e77a:	9a01      	ldr	r2, [sp, #4]
    e77c:	4293      	cmp	r3, r2
    e77e:	db34      	blt.n	e7ea <__lshift+0x8a>
    e780:	9803      	ldr	r0, [sp, #12]
    e782:	f7ff fe2c 	bl	e3de <_Balloc>
    e786:	2300      	movs	r3, #0
    e788:	0002      	movs	r2, r0
    e78a:	0006      	movs	r6, r0
    e78c:	0019      	movs	r1, r3
    e78e:	3214      	adds	r2, #20
    e790:	42a3      	cmp	r3, r4
    e792:	db2d      	blt.n	e7f0 <__lshift+0x90>
    e794:	43e3      	mvns	r3, r4
    e796:	17db      	asrs	r3, r3, #31
    e798:	401c      	ands	r4, r3
    e79a:	002b      	movs	r3, r5
    e79c:	211f      	movs	r1, #31
    e79e:	00a4      	lsls	r4, r4, #2
    e7a0:	1914      	adds	r4, r2, r4
    e7a2:	692a      	ldr	r2, [r5, #16]
    e7a4:	3314      	adds	r3, #20
    e7a6:	0092      	lsls	r2, r2, #2
    e7a8:	189a      	adds	r2, r3, r2
    e7aa:	400f      	ands	r7, r1
    e7ac:	d024      	beq.n	e7f8 <__lshift+0x98>
    e7ae:	3101      	adds	r1, #1
    e7b0:	1bc9      	subs	r1, r1, r7
    e7b2:	468c      	mov	ip, r1
    e7b4:	2100      	movs	r1, #0
    e7b6:	6818      	ldr	r0, [r3, #0]
    e7b8:	40b8      	lsls	r0, r7
    e7ba:	4301      	orrs	r1, r0
    e7bc:	4660      	mov	r0, ip
    e7be:	6021      	str	r1, [r4, #0]
    e7c0:	cb02      	ldmia	r3!, {r1}
    e7c2:	3404      	adds	r4, #4
    e7c4:	40c1      	lsrs	r1, r0
    e7c6:	429a      	cmp	r2, r3
    e7c8:	d8f5      	bhi.n	e7b6 <__lshift+0x56>
    e7ca:	6021      	str	r1, [r4, #0]
    e7cc:	2900      	cmp	r1, #0
    e7ce:	d002      	beq.n	e7d6 <__lshift+0x76>
    e7d0:	9b02      	ldr	r3, [sp, #8]
    e7d2:	3302      	adds	r3, #2
    e7d4:	9301      	str	r3, [sp, #4]
    e7d6:	9b01      	ldr	r3, [sp, #4]
    e7d8:	9803      	ldr	r0, [sp, #12]
    e7da:	3b01      	subs	r3, #1
    e7dc:	6133      	str	r3, [r6, #16]
    e7de:	0029      	movs	r1, r5
    e7e0:	f7ff fe35 	bl	e44e <_Bfree>
    e7e4:	0030      	movs	r0, r6
    e7e6:	b005      	add	sp, #20
    e7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7ea:	3101      	adds	r1, #1
    e7ec:	005b      	lsls	r3, r3, #1
    e7ee:	e7c4      	b.n	e77a <__lshift+0x1a>
    e7f0:	0098      	lsls	r0, r3, #2
    e7f2:	5011      	str	r1, [r2, r0]
    e7f4:	3301      	adds	r3, #1
    e7f6:	e7cb      	b.n	e790 <__lshift+0x30>
    e7f8:	cb02      	ldmia	r3!, {r1}
    e7fa:	c402      	stmia	r4!, {r1}
    e7fc:	429a      	cmp	r2, r3
    e7fe:	d8fb      	bhi.n	e7f8 <__lshift+0x98>
    e800:	e7e9      	b.n	e7d6 <__lshift+0x76>

0000e802 <__mcmp>:
    e802:	690a      	ldr	r2, [r1, #16]
    e804:	6903      	ldr	r3, [r0, #16]
    e806:	b530      	push	{r4, r5, lr}
    e808:	1a9b      	subs	r3, r3, r2
    e80a:	d10e      	bne.n	e82a <__mcmp+0x28>
    e80c:	0092      	lsls	r2, r2, #2
    e80e:	3014      	adds	r0, #20
    e810:	3114      	adds	r1, #20
    e812:	1884      	adds	r4, r0, r2
    e814:	1889      	adds	r1, r1, r2
    e816:	3c04      	subs	r4, #4
    e818:	3904      	subs	r1, #4
    e81a:	6822      	ldr	r2, [r4, #0]
    e81c:	680d      	ldr	r5, [r1, #0]
    e81e:	42aa      	cmp	r2, r5
    e820:	d005      	beq.n	e82e <__mcmp+0x2c>
    e822:	42aa      	cmp	r2, r5
    e824:	4192      	sbcs	r2, r2
    e826:	2301      	movs	r3, #1
    e828:	4313      	orrs	r3, r2
    e82a:	0018      	movs	r0, r3
    e82c:	bd30      	pop	{r4, r5, pc}
    e82e:	42a0      	cmp	r0, r4
    e830:	d3f1      	bcc.n	e816 <__mcmp+0x14>
    e832:	e7fa      	b.n	e82a <__mcmp+0x28>

0000e834 <__mdiff>:
    e834:	b5f0      	push	{r4, r5, r6, r7, lr}
    e836:	000d      	movs	r5, r1
    e838:	b085      	sub	sp, #20
    e83a:	0007      	movs	r7, r0
    e83c:	0011      	movs	r1, r2
    e83e:	0028      	movs	r0, r5
    e840:	0014      	movs	r4, r2
    e842:	f7ff ffde 	bl	e802 <__mcmp>
    e846:	1e06      	subs	r6, r0, #0
    e848:	d108      	bne.n	e85c <__mdiff+0x28>
    e84a:	0001      	movs	r1, r0
    e84c:	0038      	movs	r0, r7
    e84e:	f7ff fdc6 	bl	e3de <_Balloc>
    e852:	2301      	movs	r3, #1
    e854:	6146      	str	r6, [r0, #20]
    e856:	6103      	str	r3, [r0, #16]
    e858:	b005      	add	sp, #20
    e85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e85c:	2301      	movs	r3, #1
    e85e:	9301      	str	r3, [sp, #4]
    e860:	2800      	cmp	r0, #0
    e862:	db04      	blt.n	e86e <__mdiff+0x3a>
    e864:	0023      	movs	r3, r4
    e866:	002c      	movs	r4, r5
    e868:	001d      	movs	r5, r3
    e86a:	2300      	movs	r3, #0
    e86c:	9301      	str	r3, [sp, #4]
    e86e:	6861      	ldr	r1, [r4, #4]
    e870:	0038      	movs	r0, r7
    e872:	f7ff fdb4 	bl	e3de <_Balloc>
    e876:	002f      	movs	r7, r5
    e878:	2200      	movs	r2, #0
    e87a:	9b01      	ldr	r3, [sp, #4]
    e87c:	6926      	ldr	r6, [r4, #16]
    e87e:	60c3      	str	r3, [r0, #12]
    e880:	3414      	adds	r4, #20
    e882:	00b3      	lsls	r3, r6, #2
    e884:	18e3      	adds	r3, r4, r3
    e886:	9302      	str	r3, [sp, #8]
    e888:	692b      	ldr	r3, [r5, #16]
    e88a:	3714      	adds	r7, #20
    e88c:	009b      	lsls	r3, r3, #2
    e88e:	18fb      	adds	r3, r7, r3
    e890:	9303      	str	r3, [sp, #12]
    e892:	0003      	movs	r3, r0
    e894:	4694      	mov	ip, r2
    e896:	3314      	adds	r3, #20
    e898:	cc20      	ldmia	r4!, {r5}
    e89a:	cf04      	ldmia	r7!, {r2}
    e89c:	9201      	str	r2, [sp, #4]
    e89e:	b2aa      	uxth	r2, r5
    e8a0:	4494      	add	ip, r2
    e8a2:	466a      	mov	r2, sp
    e8a4:	4661      	mov	r1, ip
    e8a6:	8892      	ldrh	r2, [r2, #4]
    e8a8:	0c2d      	lsrs	r5, r5, #16
    e8aa:	1a8a      	subs	r2, r1, r2
    e8ac:	9901      	ldr	r1, [sp, #4]
    e8ae:	0c09      	lsrs	r1, r1, #16
    e8b0:	1a69      	subs	r1, r5, r1
    e8b2:	1415      	asrs	r5, r2, #16
    e8b4:	1949      	adds	r1, r1, r5
    e8b6:	140d      	asrs	r5, r1, #16
    e8b8:	b292      	uxth	r2, r2
    e8ba:	0409      	lsls	r1, r1, #16
    e8bc:	430a      	orrs	r2, r1
    e8be:	601a      	str	r2, [r3, #0]
    e8c0:	9a03      	ldr	r2, [sp, #12]
    e8c2:	46ac      	mov	ip, r5
    e8c4:	3304      	adds	r3, #4
    e8c6:	42ba      	cmp	r2, r7
    e8c8:	d8e6      	bhi.n	e898 <__mdiff+0x64>
    e8ca:	9902      	ldr	r1, [sp, #8]
    e8cc:	001a      	movs	r2, r3
    e8ce:	428c      	cmp	r4, r1
    e8d0:	d305      	bcc.n	e8de <__mdiff+0xaa>
    e8d2:	3a04      	subs	r2, #4
    e8d4:	6813      	ldr	r3, [r2, #0]
    e8d6:	2b00      	cmp	r3, #0
    e8d8:	d00e      	beq.n	e8f8 <__mdiff+0xc4>
    e8da:	6106      	str	r6, [r0, #16]
    e8dc:	e7bc      	b.n	e858 <__mdiff+0x24>
    e8de:	cc04      	ldmia	r4!, {r2}
    e8e0:	b291      	uxth	r1, r2
    e8e2:	4461      	add	r1, ip
    e8e4:	140d      	asrs	r5, r1, #16
    e8e6:	0c12      	lsrs	r2, r2, #16
    e8e8:	1952      	adds	r2, r2, r5
    e8ea:	1415      	asrs	r5, r2, #16
    e8ec:	b289      	uxth	r1, r1
    e8ee:	0412      	lsls	r2, r2, #16
    e8f0:	430a      	orrs	r2, r1
    e8f2:	46ac      	mov	ip, r5
    e8f4:	c304      	stmia	r3!, {r2}
    e8f6:	e7e8      	b.n	e8ca <__mdiff+0x96>
    e8f8:	3e01      	subs	r6, #1
    e8fa:	e7ea      	b.n	e8d2 <__mdiff+0x9e>

0000e8fc <__d2b>:
    e8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e8fe:	001d      	movs	r5, r3
    e900:	2101      	movs	r1, #1
    e902:	9f08      	ldr	r7, [sp, #32]
    e904:	0014      	movs	r4, r2
    e906:	f7ff fd6a 	bl	e3de <_Balloc>
    e90a:	032b      	lsls	r3, r5, #12
    e90c:	006d      	lsls	r5, r5, #1
    e90e:	0006      	movs	r6, r0
    e910:	0b1b      	lsrs	r3, r3, #12
    e912:	0d6d      	lsrs	r5, r5, #21
    e914:	d124      	bne.n	e960 <__d2b+0x64>
    e916:	9301      	str	r3, [sp, #4]
    e918:	2c00      	cmp	r4, #0
    e91a:	d027      	beq.n	e96c <__d2b+0x70>
    e91c:	4668      	mov	r0, sp
    e91e:	9400      	str	r4, [sp, #0]
    e920:	f7ff fe04 	bl	e52c <__lo0bits>
    e924:	9c00      	ldr	r4, [sp, #0]
    e926:	2800      	cmp	r0, #0
    e928:	d01e      	beq.n	e968 <__d2b+0x6c>
    e92a:	9b01      	ldr	r3, [sp, #4]
    e92c:	2120      	movs	r1, #32
    e92e:	001a      	movs	r2, r3
    e930:	1a09      	subs	r1, r1, r0
    e932:	408a      	lsls	r2, r1
    e934:	40c3      	lsrs	r3, r0
    e936:	4322      	orrs	r2, r4
    e938:	6172      	str	r2, [r6, #20]
    e93a:	9301      	str	r3, [sp, #4]
    e93c:	9c01      	ldr	r4, [sp, #4]
    e93e:	61b4      	str	r4, [r6, #24]
    e940:	1e63      	subs	r3, r4, #1
    e942:	419c      	sbcs	r4, r3
    e944:	3401      	adds	r4, #1
    e946:	6134      	str	r4, [r6, #16]
    e948:	2d00      	cmp	r5, #0
    e94a:	d018      	beq.n	e97e <__d2b+0x82>
    e94c:	4b12      	ldr	r3, [pc, #72]	; (e998 <__d2b+0x9c>)
    e94e:	18ed      	adds	r5, r5, r3
    e950:	2335      	movs	r3, #53	; 0x35
    e952:	182d      	adds	r5, r5, r0
    e954:	603d      	str	r5, [r7, #0]
    e956:	1a18      	subs	r0, r3, r0
    e958:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e95a:	6018      	str	r0, [r3, #0]
    e95c:	0030      	movs	r0, r6
    e95e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e960:	2280      	movs	r2, #128	; 0x80
    e962:	0352      	lsls	r2, r2, #13
    e964:	4313      	orrs	r3, r2
    e966:	e7d6      	b.n	e916 <__d2b+0x1a>
    e968:	6174      	str	r4, [r6, #20]
    e96a:	e7e7      	b.n	e93c <__d2b+0x40>
    e96c:	a801      	add	r0, sp, #4
    e96e:	f7ff fddd 	bl	e52c <__lo0bits>
    e972:	2401      	movs	r4, #1
    e974:	9b01      	ldr	r3, [sp, #4]
    e976:	6134      	str	r4, [r6, #16]
    e978:	6173      	str	r3, [r6, #20]
    e97a:	3020      	adds	r0, #32
    e97c:	e7e4      	b.n	e948 <__d2b+0x4c>
    e97e:	4b07      	ldr	r3, [pc, #28]	; (e99c <__d2b+0xa0>)
    e980:	18c0      	adds	r0, r0, r3
    e982:	4b07      	ldr	r3, [pc, #28]	; (e9a0 <__d2b+0xa4>)
    e984:	6038      	str	r0, [r7, #0]
    e986:	18e3      	adds	r3, r4, r3
    e988:	009b      	lsls	r3, r3, #2
    e98a:	18f3      	adds	r3, r6, r3
    e98c:	6958      	ldr	r0, [r3, #20]
    e98e:	f7ff fdb3 	bl	e4f8 <__hi0bits>
    e992:	0164      	lsls	r4, r4, #5
    e994:	1a20      	subs	r0, r4, r0
    e996:	e7df      	b.n	e958 <__d2b+0x5c>
    e998:	fffffbcd 	.word	0xfffffbcd
    e99c:	fffffbce 	.word	0xfffffbce
    e9a0:	3fffffff 	.word	0x3fffffff

0000e9a4 <_calloc_r>:
    e9a4:	434a      	muls	r2, r1
    e9a6:	b570      	push	{r4, r5, r6, lr}
    e9a8:	0011      	movs	r1, r2
    e9aa:	0014      	movs	r4, r2
    e9ac:	f7fd f9b4 	bl	bd18 <_malloc_r>
    e9b0:	1e05      	subs	r5, r0, #0
    e9b2:	d003      	beq.n	e9bc <_calloc_r+0x18>
    e9b4:	0022      	movs	r2, r4
    e9b6:	2100      	movs	r1, #0
    e9b8:	f7fc ff06 	bl	b7c8 <memset>
    e9bc:	0028      	movs	r0, r5
    e9be:	bd70      	pop	{r4, r5, r6, pc}

0000e9c0 <_realloc_r>:
    e9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9c2:	0007      	movs	r7, r0
    e9c4:	000d      	movs	r5, r1
    e9c6:	0016      	movs	r6, r2
    e9c8:	2900      	cmp	r1, #0
    e9ca:	d105      	bne.n	e9d8 <_realloc_r+0x18>
    e9cc:	0011      	movs	r1, r2
    e9ce:	f7fd f9a3 	bl	bd18 <_malloc_r>
    e9d2:	0004      	movs	r4, r0
    e9d4:	0020      	movs	r0, r4
    e9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e9d8:	2a00      	cmp	r2, #0
    e9da:	d103      	bne.n	e9e4 <_realloc_r+0x24>
    e9dc:	f7fd f952 	bl	bc84 <_free_r>
    e9e0:	0034      	movs	r4, r6
    e9e2:	e7f7      	b.n	e9d4 <_realloc_r+0x14>
    e9e4:	f000 fb44 	bl	f070 <_malloc_usable_size_r>
    e9e8:	002c      	movs	r4, r5
    e9ea:	4286      	cmp	r6, r0
    e9ec:	d9f2      	bls.n	e9d4 <_realloc_r+0x14>
    e9ee:	0031      	movs	r1, r6
    e9f0:	0038      	movs	r0, r7
    e9f2:	f7fd f991 	bl	bd18 <_malloc_r>
    e9f6:	1e04      	subs	r4, r0, #0
    e9f8:	d0ec      	beq.n	e9d4 <_realloc_r+0x14>
    e9fa:	0029      	movs	r1, r5
    e9fc:	0032      	movs	r2, r6
    e9fe:	f7fc fec8 	bl	b792 <memcpy>
    ea02:	0029      	movs	r1, r5
    ea04:	0038      	movs	r0, r7
    ea06:	f7fd f93d 	bl	bc84 <_free_r>
    ea0a:	e7e3      	b.n	e9d4 <_realloc_r+0x14>

0000ea0c <__ssputs_r>:
    ea0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea0e:	688e      	ldr	r6, [r1, #8]
    ea10:	b085      	sub	sp, #20
    ea12:	0007      	movs	r7, r0
    ea14:	000c      	movs	r4, r1
    ea16:	9203      	str	r2, [sp, #12]
    ea18:	9301      	str	r3, [sp, #4]
    ea1a:	429e      	cmp	r6, r3
    ea1c:	d839      	bhi.n	ea92 <__ssputs_r+0x86>
    ea1e:	2390      	movs	r3, #144	; 0x90
    ea20:	898a      	ldrh	r2, [r1, #12]
    ea22:	00db      	lsls	r3, r3, #3
    ea24:	421a      	tst	r2, r3
    ea26:	d034      	beq.n	ea92 <__ssputs_r+0x86>
    ea28:	2503      	movs	r5, #3
    ea2a:	6909      	ldr	r1, [r1, #16]
    ea2c:	6823      	ldr	r3, [r4, #0]
    ea2e:	1a5b      	subs	r3, r3, r1
    ea30:	9302      	str	r3, [sp, #8]
    ea32:	6963      	ldr	r3, [r4, #20]
    ea34:	9802      	ldr	r0, [sp, #8]
    ea36:	435d      	muls	r5, r3
    ea38:	0feb      	lsrs	r3, r5, #31
    ea3a:	195d      	adds	r5, r3, r5
    ea3c:	9b01      	ldr	r3, [sp, #4]
    ea3e:	106d      	asrs	r5, r5, #1
    ea40:	3301      	adds	r3, #1
    ea42:	181b      	adds	r3, r3, r0
    ea44:	42ab      	cmp	r3, r5
    ea46:	d900      	bls.n	ea4a <__ssputs_r+0x3e>
    ea48:	001d      	movs	r5, r3
    ea4a:	0553      	lsls	r3, r2, #21
    ea4c:	d532      	bpl.n	eab4 <__ssputs_r+0xa8>
    ea4e:	0029      	movs	r1, r5
    ea50:	0038      	movs	r0, r7
    ea52:	f7fd f961 	bl	bd18 <_malloc_r>
    ea56:	1e06      	subs	r6, r0, #0
    ea58:	d109      	bne.n	ea6e <__ssputs_r+0x62>
    ea5a:	230c      	movs	r3, #12
    ea5c:	603b      	str	r3, [r7, #0]
    ea5e:	2340      	movs	r3, #64	; 0x40
    ea60:	2001      	movs	r0, #1
    ea62:	89a2      	ldrh	r2, [r4, #12]
    ea64:	4240      	negs	r0, r0
    ea66:	4313      	orrs	r3, r2
    ea68:	81a3      	strh	r3, [r4, #12]
    ea6a:	b005      	add	sp, #20
    ea6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea6e:	9a02      	ldr	r2, [sp, #8]
    ea70:	6921      	ldr	r1, [r4, #16]
    ea72:	f7fc fe8e 	bl	b792 <memcpy>
    ea76:	89a3      	ldrh	r3, [r4, #12]
    ea78:	4a14      	ldr	r2, [pc, #80]	; (eacc <__ssputs_r+0xc0>)
    ea7a:	401a      	ands	r2, r3
    ea7c:	2380      	movs	r3, #128	; 0x80
    ea7e:	4313      	orrs	r3, r2
    ea80:	81a3      	strh	r3, [r4, #12]
    ea82:	9b02      	ldr	r3, [sp, #8]
    ea84:	6126      	str	r6, [r4, #16]
    ea86:	18f6      	adds	r6, r6, r3
    ea88:	6026      	str	r6, [r4, #0]
    ea8a:	6165      	str	r5, [r4, #20]
    ea8c:	9e01      	ldr	r6, [sp, #4]
    ea8e:	1aed      	subs	r5, r5, r3
    ea90:	60a5      	str	r5, [r4, #8]
    ea92:	9b01      	ldr	r3, [sp, #4]
    ea94:	42b3      	cmp	r3, r6
    ea96:	d200      	bcs.n	ea9a <__ssputs_r+0x8e>
    ea98:	001e      	movs	r6, r3
    ea9a:	0032      	movs	r2, r6
    ea9c:	9903      	ldr	r1, [sp, #12]
    ea9e:	6820      	ldr	r0, [r4, #0]
    eaa0:	f7fc fe80 	bl	b7a4 <memmove>
    eaa4:	68a3      	ldr	r3, [r4, #8]
    eaa6:	2000      	movs	r0, #0
    eaa8:	1b9b      	subs	r3, r3, r6
    eaaa:	60a3      	str	r3, [r4, #8]
    eaac:	6823      	ldr	r3, [r4, #0]
    eaae:	199e      	adds	r6, r3, r6
    eab0:	6026      	str	r6, [r4, #0]
    eab2:	e7da      	b.n	ea6a <__ssputs_r+0x5e>
    eab4:	002a      	movs	r2, r5
    eab6:	0038      	movs	r0, r7
    eab8:	f7ff ff82 	bl	e9c0 <_realloc_r>
    eabc:	1e06      	subs	r6, r0, #0
    eabe:	d1e0      	bne.n	ea82 <__ssputs_r+0x76>
    eac0:	6921      	ldr	r1, [r4, #16]
    eac2:	0038      	movs	r0, r7
    eac4:	f7fd f8de 	bl	bc84 <_free_r>
    eac8:	e7c7      	b.n	ea5a <__ssputs_r+0x4e>
    eaca:	46c0      	nop			; (mov r8, r8)
    eacc:	fffffb7f 	.word	0xfffffb7f

0000ead0 <_svfiprintf_r>:
    ead0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ead2:	b09f      	sub	sp, #124	; 0x7c
    ead4:	9002      	str	r0, [sp, #8]
    ead6:	9305      	str	r3, [sp, #20]
    ead8:	898b      	ldrh	r3, [r1, #12]
    eada:	000f      	movs	r7, r1
    eadc:	0016      	movs	r6, r2
    eade:	061b      	lsls	r3, r3, #24
    eae0:	d511      	bpl.n	eb06 <_svfiprintf_r+0x36>
    eae2:	690b      	ldr	r3, [r1, #16]
    eae4:	2b00      	cmp	r3, #0
    eae6:	d10e      	bne.n	eb06 <_svfiprintf_r+0x36>
    eae8:	2140      	movs	r1, #64	; 0x40
    eaea:	f7fd f915 	bl	bd18 <_malloc_r>
    eaee:	6038      	str	r0, [r7, #0]
    eaf0:	6138      	str	r0, [r7, #16]
    eaf2:	2800      	cmp	r0, #0
    eaf4:	d105      	bne.n	eb02 <_svfiprintf_r+0x32>
    eaf6:	230c      	movs	r3, #12
    eaf8:	9a02      	ldr	r2, [sp, #8]
    eafa:	3801      	subs	r0, #1
    eafc:	6013      	str	r3, [r2, #0]
    eafe:	b01f      	add	sp, #124	; 0x7c
    eb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb02:	2340      	movs	r3, #64	; 0x40
    eb04:	617b      	str	r3, [r7, #20]
    eb06:	2300      	movs	r3, #0
    eb08:	ad06      	add	r5, sp, #24
    eb0a:	616b      	str	r3, [r5, #20]
    eb0c:	3320      	adds	r3, #32
    eb0e:	766b      	strb	r3, [r5, #25]
    eb10:	3310      	adds	r3, #16
    eb12:	76ab      	strb	r3, [r5, #26]
    eb14:	0034      	movs	r4, r6
    eb16:	7823      	ldrb	r3, [r4, #0]
    eb18:	2b00      	cmp	r3, #0
    eb1a:	d147      	bne.n	ebac <_svfiprintf_r+0xdc>
    eb1c:	1ba3      	subs	r3, r4, r6
    eb1e:	9304      	str	r3, [sp, #16]
    eb20:	d00d      	beq.n	eb3e <_svfiprintf_r+0x6e>
    eb22:	1ba3      	subs	r3, r4, r6
    eb24:	0032      	movs	r2, r6
    eb26:	0039      	movs	r1, r7
    eb28:	9802      	ldr	r0, [sp, #8]
    eb2a:	f7ff ff6f 	bl	ea0c <__ssputs_r>
    eb2e:	1c43      	adds	r3, r0, #1
    eb30:	d100      	bne.n	eb34 <_svfiprintf_r+0x64>
    eb32:	e0b5      	b.n	eca0 <_svfiprintf_r+0x1d0>
    eb34:	696a      	ldr	r2, [r5, #20]
    eb36:	9b04      	ldr	r3, [sp, #16]
    eb38:	4694      	mov	ip, r2
    eb3a:	4463      	add	r3, ip
    eb3c:	616b      	str	r3, [r5, #20]
    eb3e:	7823      	ldrb	r3, [r4, #0]
    eb40:	2b00      	cmp	r3, #0
    eb42:	d100      	bne.n	eb46 <_svfiprintf_r+0x76>
    eb44:	e0ac      	b.n	eca0 <_svfiprintf_r+0x1d0>
    eb46:	2201      	movs	r2, #1
    eb48:	2300      	movs	r3, #0
    eb4a:	4252      	negs	r2, r2
    eb4c:	606a      	str	r2, [r5, #4]
    eb4e:	a902      	add	r1, sp, #8
    eb50:	3254      	adds	r2, #84	; 0x54
    eb52:	1852      	adds	r2, r2, r1
    eb54:	3401      	adds	r4, #1
    eb56:	602b      	str	r3, [r5, #0]
    eb58:	60eb      	str	r3, [r5, #12]
    eb5a:	60ab      	str	r3, [r5, #8]
    eb5c:	7013      	strb	r3, [r2, #0]
    eb5e:	65ab      	str	r3, [r5, #88]	; 0x58
    eb60:	4e58      	ldr	r6, [pc, #352]	; (ecc4 <_svfiprintf_r+0x1f4>)
    eb62:	2205      	movs	r2, #5
    eb64:	7821      	ldrb	r1, [r4, #0]
    eb66:	0030      	movs	r0, r6
    eb68:	f7ff fc2c 	bl	e3c4 <memchr>
    eb6c:	1c62      	adds	r2, r4, #1
    eb6e:	2800      	cmp	r0, #0
    eb70:	d120      	bne.n	ebb4 <_svfiprintf_r+0xe4>
    eb72:	6829      	ldr	r1, [r5, #0]
    eb74:	06cb      	lsls	r3, r1, #27
    eb76:	d504      	bpl.n	eb82 <_svfiprintf_r+0xb2>
    eb78:	2353      	movs	r3, #83	; 0x53
    eb7a:	ae02      	add	r6, sp, #8
    eb7c:	3020      	adds	r0, #32
    eb7e:	199b      	adds	r3, r3, r6
    eb80:	7018      	strb	r0, [r3, #0]
    eb82:	070b      	lsls	r3, r1, #28
    eb84:	d504      	bpl.n	eb90 <_svfiprintf_r+0xc0>
    eb86:	2353      	movs	r3, #83	; 0x53
    eb88:	202b      	movs	r0, #43	; 0x2b
    eb8a:	ae02      	add	r6, sp, #8
    eb8c:	199b      	adds	r3, r3, r6
    eb8e:	7018      	strb	r0, [r3, #0]
    eb90:	7823      	ldrb	r3, [r4, #0]
    eb92:	2b2a      	cmp	r3, #42	; 0x2a
    eb94:	d016      	beq.n	ebc4 <_svfiprintf_r+0xf4>
    eb96:	2000      	movs	r0, #0
    eb98:	210a      	movs	r1, #10
    eb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eb9c:	7822      	ldrb	r2, [r4, #0]
    eb9e:	3a30      	subs	r2, #48	; 0x30
    eba0:	2a09      	cmp	r2, #9
    eba2:	d955      	bls.n	ec50 <_svfiprintf_r+0x180>
    eba4:	2800      	cmp	r0, #0
    eba6:	d015      	beq.n	ebd4 <_svfiprintf_r+0x104>
    eba8:	9309      	str	r3, [sp, #36]	; 0x24
    ebaa:	e013      	b.n	ebd4 <_svfiprintf_r+0x104>
    ebac:	2b25      	cmp	r3, #37	; 0x25
    ebae:	d0b5      	beq.n	eb1c <_svfiprintf_r+0x4c>
    ebb0:	3401      	adds	r4, #1
    ebb2:	e7b0      	b.n	eb16 <_svfiprintf_r+0x46>
    ebb4:	2301      	movs	r3, #1
    ebb6:	1b80      	subs	r0, r0, r6
    ebb8:	4083      	lsls	r3, r0
    ebba:	6829      	ldr	r1, [r5, #0]
    ebbc:	0014      	movs	r4, r2
    ebbe:	430b      	orrs	r3, r1
    ebc0:	602b      	str	r3, [r5, #0]
    ebc2:	e7cd      	b.n	eb60 <_svfiprintf_r+0x90>
    ebc4:	9b05      	ldr	r3, [sp, #20]
    ebc6:	1d18      	adds	r0, r3, #4
    ebc8:	681b      	ldr	r3, [r3, #0]
    ebca:	9005      	str	r0, [sp, #20]
    ebcc:	2b00      	cmp	r3, #0
    ebce:	db39      	blt.n	ec44 <_svfiprintf_r+0x174>
    ebd0:	9309      	str	r3, [sp, #36]	; 0x24
    ebd2:	0014      	movs	r4, r2
    ebd4:	7823      	ldrb	r3, [r4, #0]
    ebd6:	2b2e      	cmp	r3, #46	; 0x2e
    ebd8:	d10b      	bne.n	ebf2 <_svfiprintf_r+0x122>
    ebda:	7863      	ldrb	r3, [r4, #1]
    ebdc:	1c62      	adds	r2, r4, #1
    ebde:	2b2a      	cmp	r3, #42	; 0x2a
    ebe0:	d13e      	bne.n	ec60 <_svfiprintf_r+0x190>
    ebe2:	9b05      	ldr	r3, [sp, #20]
    ebe4:	3402      	adds	r4, #2
    ebe6:	1d1a      	adds	r2, r3, #4
    ebe8:	681b      	ldr	r3, [r3, #0]
    ebea:	9205      	str	r2, [sp, #20]
    ebec:	2b00      	cmp	r3, #0
    ebee:	db34      	blt.n	ec5a <_svfiprintf_r+0x18a>
    ebf0:	9307      	str	r3, [sp, #28]
    ebf2:	4e35      	ldr	r6, [pc, #212]	; (ecc8 <_svfiprintf_r+0x1f8>)
    ebf4:	7821      	ldrb	r1, [r4, #0]
    ebf6:	2203      	movs	r2, #3
    ebf8:	0030      	movs	r0, r6
    ebfa:	f7ff fbe3 	bl	e3c4 <memchr>
    ebfe:	2800      	cmp	r0, #0
    ec00:	d006      	beq.n	ec10 <_svfiprintf_r+0x140>
    ec02:	2340      	movs	r3, #64	; 0x40
    ec04:	1b80      	subs	r0, r0, r6
    ec06:	4083      	lsls	r3, r0
    ec08:	682a      	ldr	r2, [r5, #0]
    ec0a:	3401      	adds	r4, #1
    ec0c:	4313      	orrs	r3, r2
    ec0e:	602b      	str	r3, [r5, #0]
    ec10:	7821      	ldrb	r1, [r4, #0]
    ec12:	2206      	movs	r2, #6
    ec14:	482d      	ldr	r0, [pc, #180]	; (eccc <_svfiprintf_r+0x1fc>)
    ec16:	1c66      	adds	r6, r4, #1
    ec18:	7629      	strb	r1, [r5, #24]
    ec1a:	f7ff fbd3 	bl	e3c4 <memchr>
    ec1e:	2800      	cmp	r0, #0
    ec20:	d046      	beq.n	ecb0 <_svfiprintf_r+0x1e0>
    ec22:	4b2b      	ldr	r3, [pc, #172]	; (ecd0 <_svfiprintf_r+0x200>)
    ec24:	2b00      	cmp	r3, #0
    ec26:	d12f      	bne.n	ec88 <_svfiprintf_r+0x1b8>
    ec28:	6829      	ldr	r1, [r5, #0]
    ec2a:	9b05      	ldr	r3, [sp, #20]
    ec2c:	2207      	movs	r2, #7
    ec2e:	05c9      	lsls	r1, r1, #23
    ec30:	d528      	bpl.n	ec84 <_svfiprintf_r+0x1b4>
    ec32:	189b      	adds	r3, r3, r2
    ec34:	4393      	bics	r3, r2
    ec36:	3308      	adds	r3, #8
    ec38:	9305      	str	r3, [sp, #20]
    ec3a:	696b      	ldr	r3, [r5, #20]
    ec3c:	9a03      	ldr	r2, [sp, #12]
    ec3e:	189b      	adds	r3, r3, r2
    ec40:	616b      	str	r3, [r5, #20]
    ec42:	e767      	b.n	eb14 <_svfiprintf_r+0x44>
    ec44:	425b      	negs	r3, r3
    ec46:	60eb      	str	r3, [r5, #12]
    ec48:	2302      	movs	r3, #2
    ec4a:	430b      	orrs	r3, r1
    ec4c:	602b      	str	r3, [r5, #0]
    ec4e:	e7c0      	b.n	ebd2 <_svfiprintf_r+0x102>
    ec50:	434b      	muls	r3, r1
    ec52:	3401      	adds	r4, #1
    ec54:	189b      	adds	r3, r3, r2
    ec56:	2001      	movs	r0, #1
    ec58:	e7a0      	b.n	eb9c <_svfiprintf_r+0xcc>
    ec5a:	2301      	movs	r3, #1
    ec5c:	425b      	negs	r3, r3
    ec5e:	e7c7      	b.n	ebf0 <_svfiprintf_r+0x120>
    ec60:	2300      	movs	r3, #0
    ec62:	0014      	movs	r4, r2
    ec64:	200a      	movs	r0, #10
    ec66:	001a      	movs	r2, r3
    ec68:	606b      	str	r3, [r5, #4]
    ec6a:	7821      	ldrb	r1, [r4, #0]
    ec6c:	3930      	subs	r1, #48	; 0x30
    ec6e:	2909      	cmp	r1, #9
    ec70:	d903      	bls.n	ec7a <_svfiprintf_r+0x1aa>
    ec72:	2b00      	cmp	r3, #0
    ec74:	d0bd      	beq.n	ebf2 <_svfiprintf_r+0x122>
    ec76:	9207      	str	r2, [sp, #28]
    ec78:	e7bb      	b.n	ebf2 <_svfiprintf_r+0x122>
    ec7a:	4342      	muls	r2, r0
    ec7c:	3401      	adds	r4, #1
    ec7e:	1852      	adds	r2, r2, r1
    ec80:	2301      	movs	r3, #1
    ec82:	e7f2      	b.n	ec6a <_svfiprintf_r+0x19a>
    ec84:	3307      	adds	r3, #7
    ec86:	e7d5      	b.n	ec34 <_svfiprintf_r+0x164>
    ec88:	ab05      	add	r3, sp, #20
    ec8a:	9300      	str	r3, [sp, #0]
    ec8c:	003a      	movs	r2, r7
    ec8e:	4b11      	ldr	r3, [pc, #68]	; (ecd4 <_svfiprintf_r+0x204>)
    ec90:	0029      	movs	r1, r5
    ec92:	9802      	ldr	r0, [sp, #8]
    ec94:	f7fd fa7e 	bl	c194 <_printf_float>
    ec98:	9003      	str	r0, [sp, #12]
    ec9a:	9b03      	ldr	r3, [sp, #12]
    ec9c:	3301      	adds	r3, #1
    ec9e:	d1cc      	bne.n	ec3a <_svfiprintf_r+0x16a>
    eca0:	89bb      	ldrh	r3, [r7, #12]
    eca2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eca4:	065b      	lsls	r3, r3, #25
    eca6:	d400      	bmi.n	ecaa <_svfiprintf_r+0x1da>
    eca8:	e729      	b.n	eafe <_svfiprintf_r+0x2e>
    ecaa:	2001      	movs	r0, #1
    ecac:	4240      	negs	r0, r0
    ecae:	e726      	b.n	eafe <_svfiprintf_r+0x2e>
    ecb0:	ab05      	add	r3, sp, #20
    ecb2:	9300      	str	r3, [sp, #0]
    ecb4:	003a      	movs	r2, r7
    ecb6:	4b07      	ldr	r3, [pc, #28]	; (ecd4 <_svfiprintf_r+0x204>)
    ecb8:	0029      	movs	r1, r5
    ecba:	9802      	ldr	r0, [sp, #8]
    ecbc:	f7fd fd24 	bl	c708 <_printf_i>
    ecc0:	e7ea      	b.n	ec98 <_svfiprintf_r+0x1c8>
    ecc2:	46c0      	nop			; (mov r8, r8)
    ecc4:	00010f98 	.word	0x00010f98
    ecc8:	00010f9e 	.word	0x00010f9e
    eccc:	00010fa2 	.word	0x00010fa2
    ecd0:	0000c195 	.word	0x0000c195
    ecd4:	0000ea0d 	.word	0x0000ea0d

0000ecd8 <_raise_r>:
    ecd8:	b570      	push	{r4, r5, r6, lr}
    ecda:	0004      	movs	r4, r0
    ecdc:	000d      	movs	r5, r1
    ecde:	291f      	cmp	r1, #31
    ece0:	d904      	bls.n	ecec <_raise_r+0x14>
    ece2:	2316      	movs	r3, #22
    ece4:	6003      	str	r3, [r0, #0]
    ece6:	2001      	movs	r0, #1
    ece8:	4240      	negs	r0, r0
    ecea:	bd70      	pop	{r4, r5, r6, pc}
    ecec:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ecee:	2b00      	cmp	r3, #0
    ecf0:	d004      	beq.n	ecfc <_raise_r+0x24>
    ecf2:	008a      	lsls	r2, r1, #2
    ecf4:	189b      	adds	r3, r3, r2
    ecf6:	681a      	ldr	r2, [r3, #0]
    ecf8:	2a00      	cmp	r2, #0
    ecfa:	d108      	bne.n	ed0e <_raise_r+0x36>
    ecfc:	0020      	movs	r0, r4
    ecfe:	f000 f831 	bl	ed64 <_getpid_r>
    ed02:	002a      	movs	r2, r5
    ed04:	0001      	movs	r1, r0
    ed06:	0020      	movs	r0, r4
    ed08:	f000 f81a 	bl	ed40 <_kill_r>
    ed0c:	e7ed      	b.n	ecea <_raise_r+0x12>
    ed0e:	2000      	movs	r0, #0
    ed10:	2a01      	cmp	r2, #1
    ed12:	d0ea      	beq.n	ecea <_raise_r+0x12>
    ed14:	1c51      	adds	r1, r2, #1
    ed16:	d103      	bne.n	ed20 <_raise_r+0x48>
    ed18:	2316      	movs	r3, #22
    ed1a:	3001      	adds	r0, #1
    ed1c:	6023      	str	r3, [r4, #0]
    ed1e:	e7e4      	b.n	ecea <_raise_r+0x12>
    ed20:	2400      	movs	r4, #0
    ed22:	0028      	movs	r0, r5
    ed24:	601c      	str	r4, [r3, #0]
    ed26:	4790      	blx	r2
    ed28:	0020      	movs	r0, r4
    ed2a:	e7de      	b.n	ecea <_raise_r+0x12>

0000ed2c <raise>:
    ed2c:	b510      	push	{r4, lr}
    ed2e:	4b03      	ldr	r3, [pc, #12]	; (ed3c <raise+0x10>)
    ed30:	0001      	movs	r1, r0
    ed32:	6818      	ldr	r0, [r3, #0]
    ed34:	f7ff ffd0 	bl	ecd8 <_raise_r>
    ed38:	bd10      	pop	{r4, pc}
    ed3a:	46c0      	nop			; (mov r8, r8)
    ed3c:	200000b4 	.word	0x200000b4

0000ed40 <_kill_r>:
    ed40:	2300      	movs	r3, #0
    ed42:	b570      	push	{r4, r5, r6, lr}
    ed44:	4c06      	ldr	r4, [pc, #24]	; (ed60 <_kill_r+0x20>)
    ed46:	0005      	movs	r5, r0
    ed48:	0008      	movs	r0, r1
    ed4a:	0011      	movs	r1, r2
    ed4c:	6023      	str	r3, [r4, #0]
    ed4e:	f000 fd81 	bl	f854 <_kill>
    ed52:	1c43      	adds	r3, r0, #1
    ed54:	d103      	bne.n	ed5e <_kill_r+0x1e>
    ed56:	6823      	ldr	r3, [r4, #0]
    ed58:	2b00      	cmp	r3, #0
    ed5a:	d000      	beq.n	ed5e <_kill_r+0x1e>
    ed5c:	602b      	str	r3, [r5, #0]
    ed5e:	bd70      	pop	{r4, r5, r6, pc}
    ed60:	20001e60 	.word	0x20001e60

0000ed64 <_getpid_r>:
    ed64:	b510      	push	{r4, lr}
    ed66:	f000 fd65 	bl	f834 <_getpid>
    ed6a:	bd10      	pop	{r4, pc}

0000ed6c <siscanf>:
    ed6c:	b40e      	push	{r1, r2, r3}
    ed6e:	2381      	movs	r3, #129	; 0x81
    ed70:	b570      	push	{r4, r5, r6, lr}
    ed72:	b09d      	sub	sp, #116	; 0x74
    ed74:	ac02      	add	r4, sp, #8
    ed76:	ad21      	add	r5, sp, #132	; 0x84
    ed78:	009b      	lsls	r3, r3, #2
    ed7a:	cd40      	ldmia	r5!, {r6}
    ed7c:	81a3      	strh	r3, [r4, #12]
    ed7e:	9002      	str	r0, [sp, #8]
    ed80:	9006      	str	r0, [sp, #24]
    ed82:	f7fd fe2e 	bl	c9e2 <strlen>
    ed86:	4b0b      	ldr	r3, [pc, #44]	; (edb4 <siscanf+0x48>)
    ed88:	6060      	str	r0, [r4, #4]
    ed8a:	6263      	str	r3, [r4, #36]	; 0x24
    ed8c:	2300      	movs	r3, #0
    ed8e:	6160      	str	r0, [r4, #20]
    ed90:	4809      	ldr	r0, [pc, #36]	; (edb8 <siscanf+0x4c>)
    ed92:	6363      	str	r3, [r4, #52]	; 0x34
    ed94:	64a3      	str	r3, [r4, #72]	; 0x48
    ed96:	3b01      	subs	r3, #1
    ed98:	81e3      	strh	r3, [r4, #14]
    ed9a:	0032      	movs	r2, r6
    ed9c:	002b      	movs	r3, r5
    ed9e:	0021      	movs	r1, r4
    eda0:	6800      	ldr	r0, [r0, #0]
    eda2:	9501      	str	r5, [sp, #4]
    eda4:	f000 f9c8 	bl	f138 <__ssvfiscanf_r>
    eda8:	b01d      	add	sp, #116	; 0x74
    edaa:	bc70      	pop	{r4, r5, r6}
    edac:	bc08      	pop	{r3}
    edae:	b003      	add	sp, #12
    edb0:	4718      	bx	r3
    edb2:	46c0      	nop			; (mov r8, r8)
    edb4:	0000ede5 	.word	0x0000ede5
    edb8:	200000b4 	.word	0x200000b4

0000edbc <__sread>:
    edbc:	b570      	push	{r4, r5, r6, lr}
    edbe:	000c      	movs	r4, r1
    edc0:	250e      	movs	r5, #14
    edc2:	5f49      	ldrsh	r1, [r1, r5]
    edc4:	f000 fca2 	bl	f70c <_read_r>
    edc8:	2800      	cmp	r0, #0
    edca:	db03      	blt.n	edd4 <__sread+0x18>
    edcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    edce:	181b      	adds	r3, r3, r0
    edd0:	6563      	str	r3, [r4, #84]	; 0x54
    edd2:	bd70      	pop	{r4, r5, r6, pc}
    edd4:	89a3      	ldrh	r3, [r4, #12]
    edd6:	4a02      	ldr	r2, [pc, #8]	; (ede0 <__sread+0x24>)
    edd8:	4013      	ands	r3, r2
    edda:	81a3      	strh	r3, [r4, #12]
    eddc:	e7f9      	b.n	edd2 <__sread+0x16>
    edde:	46c0      	nop			; (mov r8, r8)
    ede0:	ffffefff 	.word	0xffffefff

0000ede4 <__seofread>:
    ede4:	2000      	movs	r0, #0
    ede6:	4770      	bx	lr

0000ede8 <__swrite>:
    ede8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    edea:	001f      	movs	r7, r3
    edec:	898b      	ldrh	r3, [r1, #12]
    edee:	0005      	movs	r5, r0
    edf0:	000c      	movs	r4, r1
    edf2:	0016      	movs	r6, r2
    edf4:	05db      	lsls	r3, r3, #23
    edf6:	d505      	bpl.n	ee04 <__swrite+0x1c>
    edf8:	230e      	movs	r3, #14
    edfa:	5ec9      	ldrsh	r1, [r1, r3]
    edfc:	2200      	movs	r2, #0
    edfe:	2302      	movs	r3, #2
    ee00:	f000 f922 	bl	f048 <_lseek_r>
    ee04:	89a3      	ldrh	r3, [r4, #12]
    ee06:	4a05      	ldr	r2, [pc, #20]	; (ee1c <__swrite+0x34>)
    ee08:	0028      	movs	r0, r5
    ee0a:	4013      	ands	r3, r2
    ee0c:	81a3      	strh	r3, [r4, #12]
    ee0e:	0032      	movs	r2, r6
    ee10:	230e      	movs	r3, #14
    ee12:	5ee1      	ldrsh	r1, [r4, r3]
    ee14:	003b      	movs	r3, r7
    ee16:	f000 f8cb 	bl	efb0 <_write_r>
    ee1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee1c:	ffffefff 	.word	0xffffefff

0000ee20 <__sseek>:
    ee20:	b570      	push	{r4, r5, r6, lr}
    ee22:	000c      	movs	r4, r1
    ee24:	250e      	movs	r5, #14
    ee26:	5f49      	ldrsh	r1, [r1, r5]
    ee28:	f000 f90e 	bl	f048 <_lseek_r>
    ee2c:	89a3      	ldrh	r3, [r4, #12]
    ee2e:	1c42      	adds	r2, r0, #1
    ee30:	d103      	bne.n	ee3a <__sseek+0x1a>
    ee32:	4a05      	ldr	r2, [pc, #20]	; (ee48 <__sseek+0x28>)
    ee34:	4013      	ands	r3, r2
    ee36:	81a3      	strh	r3, [r4, #12]
    ee38:	bd70      	pop	{r4, r5, r6, pc}
    ee3a:	2280      	movs	r2, #128	; 0x80
    ee3c:	0152      	lsls	r2, r2, #5
    ee3e:	4313      	orrs	r3, r2
    ee40:	81a3      	strh	r3, [r4, #12]
    ee42:	6560      	str	r0, [r4, #84]	; 0x54
    ee44:	e7f8      	b.n	ee38 <__sseek+0x18>
    ee46:	46c0      	nop			; (mov r8, r8)
    ee48:	ffffefff 	.word	0xffffefff

0000ee4c <__sclose>:
    ee4c:	b510      	push	{r4, lr}
    ee4e:	230e      	movs	r3, #14
    ee50:	5ec9      	ldrsh	r1, [r1, r3]
    ee52:	f000 f8c1 	bl	efd8 <_close_r>
    ee56:	bd10      	pop	{r4, pc}

0000ee58 <_strtoul_l.isra.0>:
    ee58:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee5a:	001f      	movs	r7, r3
    ee5c:	000e      	movs	r6, r1
    ee5e:	b087      	sub	sp, #28
    ee60:	9005      	str	r0, [sp, #20]
    ee62:	9103      	str	r1, [sp, #12]
    ee64:	9201      	str	r2, [sp, #4]
    ee66:	980c      	ldr	r0, [sp, #48]	; 0x30
    ee68:	7834      	ldrb	r4, [r6, #0]
    ee6a:	f7fc fc4b 	bl	b704 <__locale_ctype_ptr_l>
    ee6e:	2208      	movs	r2, #8
    ee70:	1900      	adds	r0, r0, r4
    ee72:	7843      	ldrb	r3, [r0, #1]
    ee74:	1c75      	adds	r5, r6, #1
    ee76:	4013      	ands	r3, r2
    ee78:	d10c      	bne.n	ee94 <_strtoul_l.isra.0+0x3c>
    ee7a:	2c2d      	cmp	r4, #45	; 0x2d
    ee7c:	d10c      	bne.n	ee98 <_strtoul_l.isra.0+0x40>
    ee7e:	3301      	adds	r3, #1
    ee80:	782c      	ldrb	r4, [r5, #0]
    ee82:	9302      	str	r3, [sp, #8]
    ee84:	1cb5      	adds	r5, r6, #2
    ee86:	2f00      	cmp	r7, #0
    ee88:	d00c      	beq.n	eea4 <_strtoul_l.isra.0+0x4c>
    ee8a:	2f10      	cmp	r7, #16
    ee8c:	d114      	bne.n	eeb8 <_strtoul_l.isra.0+0x60>
    ee8e:	2c30      	cmp	r4, #48	; 0x30
    ee90:	d00a      	beq.n	eea8 <_strtoul_l.isra.0+0x50>
    ee92:	e011      	b.n	eeb8 <_strtoul_l.isra.0+0x60>
    ee94:	002e      	movs	r6, r5
    ee96:	e7e6      	b.n	ee66 <_strtoul_l.isra.0+0xe>
    ee98:	9302      	str	r3, [sp, #8]
    ee9a:	2c2b      	cmp	r4, #43	; 0x2b
    ee9c:	d1f3      	bne.n	ee86 <_strtoul_l.isra.0+0x2e>
    ee9e:	782c      	ldrb	r4, [r5, #0]
    eea0:	1cb5      	adds	r5, r6, #2
    eea2:	e7f0      	b.n	ee86 <_strtoul_l.isra.0+0x2e>
    eea4:	2c30      	cmp	r4, #48	; 0x30
    eea6:	d12f      	bne.n	ef08 <_strtoul_l.isra.0+0xb0>
    eea8:	2220      	movs	r2, #32
    eeaa:	782b      	ldrb	r3, [r5, #0]
    eeac:	4393      	bics	r3, r2
    eeae:	2b58      	cmp	r3, #88	; 0x58
    eeb0:	d154      	bne.n	ef5c <_strtoul_l.isra.0+0x104>
    eeb2:	2710      	movs	r7, #16
    eeb4:	786c      	ldrb	r4, [r5, #1]
    eeb6:	3502      	adds	r5, #2
    eeb8:	2001      	movs	r0, #1
    eeba:	0039      	movs	r1, r7
    eebc:	4240      	negs	r0, r0
    eebe:	f7f9 fb19 	bl	84f4 <__udivsi3>
    eec2:	0006      	movs	r6, r0
    eec4:	2001      	movs	r0, #1
    eec6:	0039      	movs	r1, r7
    eec8:	4240      	negs	r0, r0
    eeca:	f7f9 fb99 	bl	8600 <__aeabi_uidivmod>
    eece:	2300      	movs	r3, #0
    eed0:	9104      	str	r1, [sp, #16]
    eed2:	2101      	movs	r1, #1
    eed4:	2201      	movs	r2, #1
    eed6:	0018      	movs	r0, r3
    eed8:	468c      	mov	ip, r1
    eeda:	4252      	negs	r2, r2
    eedc:	0021      	movs	r1, r4
    eede:	3930      	subs	r1, #48	; 0x30
    eee0:	2909      	cmp	r1, #9
    eee2:	d813      	bhi.n	ef0c <_strtoul_l.isra.0+0xb4>
    eee4:	000c      	movs	r4, r1
    eee6:	42a7      	cmp	r7, r4
    eee8:	dd1e      	ble.n	ef28 <_strtoul_l.isra.0+0xd0>
    eeea:	2b00      	cmp	r3, #0
    eeec:	db1a      	blt.n	ef24 <_strtoul_l.isra.0+0xcc>
    eeee:	0013      	movs	r3, r2
    eef0:	4286      	cmp	r6, r0
    eef2:	d306      	bcc.n	ef02 <_strtoul_l.isra.0+0xaa>
    eef4:	d102      	bne.n	eefc <_strtoul_l.isra.0+0xa4>
    eef6:	9904      	ldr	r1, [sp, #16]
    eef8:	42a1      	cmp	r1, r4
    eefa:	db02      	blt.n	ef02 <_strtoul_l.isra.0+0xaa>
    eefc:	4663      	mov	r3, ip
    eefe:	4378      	muls	r0, r7
    ef00:	1820      	adds	r0, r4, r0
    ef02:	782c      	ldrb	r4, [r5, #0]
    ef04:	3501      	adds	r5, #1
    ef06:	e7e9      	b.n	eedc <_strtoul_l.isra.0+0x84>
    ef08:	270a      	movs	r7, #10
    ef0a:	e7d5      	b.n	eeb8 <_strtoul_l.isra.0+0x60>
    ef0c:	0021      	movs	r1, r4
    ef0e:	3941      	subs	r1, #65	; 0x41
    ef10:	2919      	cmp	r1, #25
    ef12:	d801      	bhi.n	ef18 <_strtoul_l.isra.0+0xc0>
    ef14:	3c37      	subs	r4, #55	; 0x37
    ef16:	e7e6      	b.n	eee6 <_strtoul_l.isra.0+0x8e>
    ef18:	0021      	movs	r1, r4
    ef1a:	3961      	subs	r1, #97	; 0x61
    ef1c:	2919      	cmp	r1, #25
    ef1e:	d803      	bhi.n	ef28 <_strtoul_l.isra.0+0xd0>
    ef20:	3c57      	subs	r4, #87	; 0x57
    ef22:	e7e0      	b.n	eee6 <_strtoul_l.isra.0+0x8e>
    ef24:	0013      	movs	r3, r2
    ef26:	e7ec      	b.n	ef02 <_strtoul_l.isra.0+0xaa>
    ef28:	2b00      	cmp	r3, #0
    ef2a:	da09      	bge.n	ef40 <_strtoul_l.isra.0+0xe8>
    ef2c:	2322      	movs	r3, #34	; 0x22
    ef2e:	2001      	movs	r0, #1
    ef30:	9a05      	ldr	r2, [sp, #20]
    ef32:	4240      	negs	r0, r0
    ef34:	6013      	str	r3, [r2, #0]
    ef36:	9b01      	ldr	r3, [sp, #4]
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d10b      	bne.n	ef54 <_strtoul_l.isra.0+0xfc>
    ef3c:	b007      	add	sp, #28
    ef3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef40:	9a02      	ldr	r2, [sp, #8]
    ef42:	2a00      	cmp	r2, #0
    ef44:	d000      	beq.n	ef48 <_strtoul_l.isra.0+0xf0>
    ef46:	4240      	negs	r0, r0
    ef48:	9a01      	ldr	r2, [sp, #4]
    ef4a:	2a00      	cmp	r2, #0
    ef4c:	d0f6      	beq.n	ef3c <_strtoul_l.isra.0+0xe4>
    ef4e:	9a03      	ldr	r2, [sp, #12]
    ef50:	2b00      	cmp	r3, #0
    ef52:	d000      	beq.n	ef56 <_strtoul_l.isra.0+0xfe>
    ef54:	1e6a      	subs	r2, r5, #1
    ef56:	9b01      	ldr	r3, [sp, #4]
    ef58:	601a      	str	r2, [r3, #0]
    ef5a:	e7ef      	b.n	ef3c <_strtoul_l.isra.0+0xe4>
    ef5c:	2430      	movs	r4, #48	; 0x30
    ef5e:	2f00      	cmp	r7, #0
    ef60:	d1aa      	bne.n	eeb8 <_strtoul_l.isra.0+0x60>
    ef62:	3708      	adds	r7, #8
    ef64:	e7a8      	b.n	eeb8 <_strtoul_l.isra.0+0x60>
	...

0000ef68 <_strtoul_r>:
    ef68:	b513      	push	{r0, r1, r4, lr}
    ef6a:	4c05      	ldr	r4, [pc, #20]	; (ef80 <_strtoul_r+0x18>)
    ef6c:	6824      	ldr	r4, [r4, #0]
    ef6e:	6a24      	ldr	r4, [r4, #32]
    ef70:	2c00      	cmp	r4, #0
    ef72:	d100      	bne.n	ef76 <_strtoul_r+0xe>
    ef74:	4c03      	ldr	r4, [pc, #12]	; (ef84 <_strtoul_r+0x1c>)
    ef76:	9400      	str	r4, [sp, #0]
    ef78:	f7ff ff6e 	bl	ee58 <_strtoul_l.isra.0>
    ef7c:	bd16      	pop	{r1, r2, r4, pc}
    ef7e:	46c0      	nop			; (mov r8, r8)
    ef80:	200000b4 	.word	0x200000b4
    ef84:	20000118 	.word	0x20000118

0000ef88 <strtoul>:
    ef88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ef8a:	0013      	movs	r3, r2
    ef8c:	4a06      	ldr	r2, [pc, #24]	; (efa8 <strtoul+0x20>)
    ef8e:	0005      	movs	r5, r0
    ef90:	6810      	ldr	r0, [r2, #0]
    ef92:	6a04      	ldr	r4, [r0, #32]
    ef94:	2c00      	cmp	r4, #0
    ef96:	d100      	bne.n	ef9a <strtoul+0x12>
    ef98:	4c04      	ldr	r4, [pc, #16]	; (efac <strtoul+0x24>)
    ef9a:	000a      	movs	r2, r1
    ef9c:	9400      	str	r4, [sp, #0]
    ef9e:	0029      	movs	r1, r5
    efa0:	f7ff ff5a 	bl	ee58 <_strtoul_l.isra.0>
    efa4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    efa6:	46c0      	nop			; (mov r8, r8)
    efa8:	200000b4 	.word	0x200000b4
    efac:	20000118 	.word	0x20000118

0000efb0 <_write_r>:
    efb0:	b570      	push	{r4, r5, r6, lr}
    efb2:	0005      	movs	r5, r0
    efb4:	0008      	movs	r0, r1
    efb6:	0011      	movs	r1, r2
    efb8:	2200      	movs	r2, #0
    efba:	4c06      	ldr	r4, [pc, #24]	; (efd4 <_write_r+0x24>)
    efbc:	6022      	str	r2, [r4, #0]
    efbe:	001a      	movs	r2, r3
    efc0:	f000 fc6e 	bl	f8a0 <_write>
    efc4:	1c43      	adds	r3, r0, #1
    efc6:	d103      	bne.n	efd0 <_write_r+0x20>
    efc8:	6823      	ldr	r3, [r4, #0]
    efca:	2b00      	cmp	r3, #0
    efcc:	d000      	beq.n	efd0 <_write_r+0x20>
    efce:	602b      	str	r3, [r5, #0]
    efd0:	bd70      	pop	{r4, r5, r6, pc}
    efd2:	46c0      	nop			; (mov r8, r8)
    efd4:	20001e60 	.word	0x20001e60

0000efd8 <_close_r>:
    efd8:	2300      	movs	r3, #0
    efda:	b570      	push	{r4, r5, r6, lr}
    efdc:	4c06      	ldr	r4, [pc, #24]	; (eff8 <_close_r+0x20>)
    efde:	0005      	movs	r5, r0
    efe0:	0008      	movs	r0, r1
    efe2:	6023      	str	r3, [r4, #0]
    efe4:	f000 fc16 	bl	f814 <_close>
    efe8:	1c43      	adds	r3, r0, #1
    efea:	d103      	bne.n	eff4 <_close_r+0x1c>
    efec:	6823      	ldr	r3, [r4, #0]
    efee:	2b00      	cmp	r3, #0
    eff0:	d000      	beq.n	eff4 <_close_r+0x1c>
    eff2:	602b      	str	r3, [r5, #0]
    eff4:	bd70      	pop	{r4, r5, r6, pc}
    eff6:	46c0      	nop			; (mov r8, r8)
    eff8:	20001e60 	.word	0x20001e60

0000effc <__env_lock>:
    effc:	4770      	bx	lr

0000effe <__env_unlock>:
    effe:	4770      	bx	lr

0000f000 <_fstat_r>:
    f000:	2300      	movs	r3, #0
    f002:	b570      	push	{r4, r5, r6, lr}
    f004:	4c06      	ldr	r4, [pc, #24]	; (f020 <_fstat_r+0x20>)
    f006:	0005      	movs	r5, r0
    f008:	0008      	movs	r0, r1
    f00a:	0011      	movs	r1, r2
    f00c:	6023      	str	r3, [r4, #0]
    f00e:	f000 fc09 	bl	f824 <_fstat>
    f012:	1c43      	adds	r3, r0, #1
    f014:	d103      	bne.n	f01e <_fstat_r+0x1e>
    f016:	6823      	ldr	r3, [r4, #0]
    f018:	2b00      	cmp	r3, #0
    f01a:	d000      	beq.n	f01e <_fstat_r+0x1e>
    f01c:	602b      	str	r3, [r5, #0]
    f01e:	bd70      	pop	{r4, r5, r6, pc}
    f020:	20001e60 	.word	0x20001e60

0000f024 <_isatty_r>:
    f024:	2300      	movs	r3, #0
    f026:	b570      	push	{r4, r5, r6, lr}
    f028:	4c06      	ldr	r4, [pc, #24]	; (f044 <_isatty_r+0x20>)
    f02a:	0005      	movs	r5, r0
    f02c:	0008      	movs	r0, r1
    f02e:	6023      	str	r3, [r4, #0]
    f030:	f000 fc08 	bl	f844 <_isatty>
    f034:	1c43      	adds	r3, r0, #1
    f036:	d103      	bne.n	f040 <_isatty_r+0x1c>
    f038:	6823      	ldr	r3, [r4, #0]
    f03a:	2b00      	cmp	r3, #0
    f03c:	d000      	beq.n	f040 <_isatty_r+0x1c>
    f03e:	602b      	str	r3, [r5, #0]
    f040:	bd70      	pop	{r4, r5, r6, pc}
    f042:	46c0      	nop			; (mov r8, r8)
    f044:	20001e60 	.word	0x20001e60

0000f048 <_lseek_r>:
    f048:	b570      	push	{r4, r5, r6, lr}
    f04a:	0005      	movs	r5, r0
    f04c:	0008      	movs	r0, r1
    f04e:	0011      	movs	r1, r2
    f050:	2200      	movs	r2, #0
    f052:	4c06      	ldr	r4, [pc, #24]	; (f06c <_lseek_r+0x24>)
    f054:	6022      	str	r2, [r4, #0]
    f056:	001a      	movs	r2, r3
    f058:	f000 fc04 	bl	f864 <_lseek>
    f05c:	1c43      	adds	r3, r0, #1
    f05e:	d103      	bne.n	f068 <_lseek_r+0x20>
    f060:	6823      	ldr	r3, [r4, #0]
    f062:	2b00      	cmp	r3, #0
    f064:	d000      	beq.n	f068 <_lseek_r+0x20>
    f066:	602b      	str	r3, [r5, #0]
    f068:	bd70      	pop	{r4, r5, r6, pc}
    f06a:	46c0      	nop			; (mov r8, r8)
    f06c:	20001e60 	.word	0x20001e60

0000f070 <_malloc_usable_size_r>:
    f070:	1f0b      	subs	r3, r1, #4
    f072:	681b      	ldr	r3, [r3, #0]
    f074:	1f18      	subs	r0, r3, #4
    f076:	2b00      	cmp	r3, #0
    f078:	da01      	bge.n	f07e <_malloc_usable_size_r+0xe>
    f07a:	580b      	ldr	r3, [r1, r0]
    f07c:	18c0      	adds	r0, r0, r3
    f07e:	4770      	bx	lr

0000f080 <_sungetc_r>:
    f080:	b570      	push	{r4, r5, r6, lr}
    f082:	0014      	movs	r4, r2
    f084:	1c4b      	adds	r3, r1, #1
    f086:	d103      	bne.n	f090 <_sungetc_r+0x10>
    f088:	2501      	movs	r5, #1
    f08a:	426d      	negs	r5, r5
    f08c:	0028      	movs	r0, r5
    f08e:	bd70      	pop	{r4, r5, r6, pc}
    f090:	8993      	ldrh	r3, [r2, #12]
    f092:	2220      	movs	r2, #32
    f094:	4393      	bics	r3, r2
    f096:	6b62      	ldr	r2, [r4, #52]	; 0x34
    f098:	81a3      	strh	r3, [r4, #12]
    f09a:	b2ce      	uxtb	r6, r1
    f09c:	b2cd      	uxtb	r5, r1
    f09e:	6863      	ldr	r3, [r4, #4]
    f0a0:	2a00      	cmp	r2, #0
    f0a2:	d010      	beq.n	f0c6 <_sungetc_r+0x46>
    f0a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    f0a6:	4293      	cmp	r3, r2
    f0a8:	da07      	bge.n	f0ba <_sungetc_r+0x3a>
    f0aa:	6823      	ldr	r3, [r4, #0]
    f0ac:	3b01      	subs	r3, #1
    f0ae:	6023      	str	r3, [r4, #0]
    f0b0:	701e      	strb	r6, [r3, #0]
    f0b2:	6863      	ldr	r3, [r4, #4]
    f0b4:	3301      	adds	r3, #1
    f0b6:	6063      	str	r3, [r4, #4]
    f0b8:	e7e8      	b.n	f08c <_sungetc_r+0xc>
    f0ba:	0021      	movs	r1, r4
    f0bc:	f000 fb6c 	bl	f798 <__submore>
    f0c0:	2800      	cmp	r0, #0
    f0c2:	d0f2      	beq.n	f0aa <_sungetc_r+0x2a>
    f0c4:	e7e0      	b.n	f088 <_sungetc_r+0x8>
    f0c6:	6921      	ldr	r1, [r4, #16]
    f0c8:	6822      	ldr	r2, [r4, #0]
    f0ca:	2900      	cmp	r1, #0
    f0cc:	d007      	beq.n	f0de <_sungetc_r+0x5e>
    f0ce:	4291      	cmp	r1, r2
    f0d0:	d205      	bcs.n	f0de <_sungetc_r+0x5e>
    f0d2:	1e51      	subs	r1, r2, #1
    f0d4:	7808      	ldrb	r0, [r1, #0]
    f0d6:	4285      	cmp	r5, r0
    f0d8:	d101      	bne.n	f0de <_sungetc_r+0x5e>
    f0da:	6021      	str	r1, [r4, #0]
    f0dc:	e7ea      	b.n	f0b4 <_sungetc_r+0x34>
    f0de:	6423      	str	r3, [r4, #64]	; 0x40
    f0e0:	0023      	movs	r3, r4
    f0e2:	3344      	adds	r3, #68	; 0x44
    f0e4:	6363      	str	r3, [r4, #52]	; 0x34
    f0e6:	2303      	movs	r3, #3
    f0e8:	63a3      	str	r3, [r4, #56]	; 0x38
    f0ea:	0023      	movs	r3, r4
    f0ec:	3346      	adds	r3, #70	; 0x46
    f0ee:	63e2      	str	r2, [r4, #60]	; 0x3c
    f0f0:	701e      	strb	r6, [r3, #0]
    f0f2:	6023      	str	r3, [r4, #0]
    f0f4:	2301      	movs	r3, #1
    f0f6:	e7de      	b.n	f0b6 <_sungetc_r+0x36>

0000f0f8 <__ssrefill_r>:
    f0f8:	b510      	push	{r4, lr}
    f0fa:	000c      	movs	r4, r1
    f0fc:	6b49      	ldr	r1, [r1, #52]	; 0x34
    f0fe:	2900      	cmp	r1, #0
    f100:	d00e      	beq.n	f120 <__ssrefill_r+0x28>
    f102:	0023      	movs	r3, r4
    f104:	3344      	adds	r3, #68	; 0x44
    f106:	4299      	cmp	r1, r3
    f108:	d001      	beq.n	f10e <__ssrefill_r+0x16>
    f10a:	f7fc fdbb 	bl	bc84 <_free_r>
    f10e:	2000      	movs	r0, #0
    f110:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f112:	6360      	str	r0, [r4, #52]	; 0x34
    f114:	6063      	str	r3, [r4, #4]
    f116:	4283      	cmp	r3, r0
    f118:	d002      	beq.n	f120 <__ssrefill_r+0x28>
    f11a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f11c:	6023      	str	r3, [r4, #0]
    f11e:	bd10      	pop	{r4, pc}
    f120:	6923      	ldr	r3, [r4, #16]
    f122:	2001      	movs	r0, #1
    f124:	6023      	str	r3, [r4, #0]
    f126:	2300      	movs	r3, #0
    f128:	89a2      	ldrh	r2, [r4, #12]
    f12a:	6063      	str	r3, [r4, #4]
    f12c:	3320      	adds	r3, #32
    f12e:	4313      	orrs	r3, r2
    f130:	81a3      	strh	r3, [r4, #12]
    f132:	4240      	negs	r0, r0
    f134:	e7f3      	b.n	f11e <__ssrefill_r+0x26>
	...

0000f138 <__ssvfiscanf_r>:
    f138:	b5f0      	push	{r4, r5, r6, r7, lr}
    f13a:	4cbd      	ldr	r4, [pc, #756]	; (f430 <__ssvfiscanf_r+0x2f8>)
    f13c:	2586      	movs	r5, #134	; 0x86
    f13e:	44a5      	add	sp, r4
    f140:	9303      	str	r3, [sp, #12]
    f142:	2300      	movs	r3, #0
    f144:	9348      	str	r3, [sp, #288]	; 0x120
    f146:	9349      	str	r3, [sp, #292]	; 0x124
    f148:	ab05      	add	r3, sp, #20
    f14a:	934a      	str	r3, [sp, #296]	; 0x128
    f14c:	23be      	movs	r3, #190	; 0xbe
    f14e:	006d      	lsls	r5, r5, #1
    f150:	9000      	str	r0, [sp, #0]
    f152:	000c      	movs	r4, r1
    f154:	a802      	add	r0, sp, #8
    f156:	49b7      	ldr	r1, [pc, #732]	; (f434 <__ssvfiscanf_r+0x2fc>)
    f158:	005b      	lsls	r3, r3, #1
    f15a:	1940      	adds	r0, r0, r5
    f15c:	27c0      	movs	r7, #192	; 0xc0
    f15e:	50c1      	str	r1, [r0, r3]
    f160:	ab02      	add	r3, sp, #8
    f162:	195b      	adds	r3, r3, r5
    f164:	0015      	movs	r5, r2
    f166:	49b4      	ldr	r1, [pc, #720]	; (f438 <__ssvfiscanf_r+0x300>)
    f168:	007f      	lsls	r7, r7, #1
    f16a:	51d9      	str	r1, [r3, r7]
    f16c:	782b      	ldrb	r3, [r5, #0]
    f16e:	2b00      	cmp	r3, #0
    f170:	d100      	bne.n	f174 <__ssvfiscanf_r+0x3c>
    f172:	e15b      	b.n	f42c <__ssvfiscanf_r+0x2f4>
    f174:	f7fc faca 	bl	b70c <__locale_ctype_ptr>
    f178:	2208      	movs	r2, #8
    f17a:	782b      	ldrb	r3, [r5, #0]
    f17c:	18c0      	adds	r0, r0, r3
    f17e:	9301      	str	r3, [sp, #4]
    f180:	7843      	ldrb	r3, [r0, #1]
    f182:	4013      	ands	r3, r2
    f184:	d141      	bne.n	f20a <__ssvfiscanf_r+0xd2>
    f186:	9a01      	ldr	r2, [sp, #4]
    f188:	1c6e      	adds	r6, r5, #1
    f18a:	2a25      	cmp	r2, #37	; 0x25
    f18c:	d000      	beq.n	f190 <__ssvfiscanf_r+0x58>
    f18e:	e0a8      	b.n	f2e2 <__ssvfiscanf_r+0x1aa>
    f190:	9347      	str	r3, [sp, #284]	; 0x11c
    f192:	9345      	str	r3, [sp, #276]	; 0x114
    f194:	786b      	ldrb	r3, [r5, #1]
    f196:	2b2a      	cmp	r3, #42	; 0x2a
    f198:	d102      	bne.n	f1a0 <__ssvfiscanf_r+0x68>
    f19a:	3b1a      	subs	r3, #26
    f19c:	9345      	str	r3, [sp, #276]	; 0x114
    f19e:	1cae      	adds	r6, r5, #2
    f1a0:	0035      	movs	r5, r6
    f1a2:	220a      	movs	r2, #10
    f1a4:	7829      	ldrb	r1, [r5, #0]
    f1a6:	000b      	movs	r3, r1
    f1a8:	3b30      	subs	r3, #48	; 0x30
    f1aa:	2b09      	cmp	r3, #9
    f1ac:	d948      	bls.n	f240 <__ssvfiscanf_r+0x108>
    f1ae:	4ea3      	ldr	r6, [pc, #652]	; (f43c <__ssvfiscanf_r+0x304>)
    f1b0:	2203      	movs	r2, #3
    f1b2:	0030      	movs	r0, r6
    f1b4:	f7ff f906 	bl	e3c4 <memchr>
    f1b8:	2800      	cmp	r0, #0
    f1ba:	d007      	beq.n	f1cc <__ssvfiscanf_r+0x94>
    f1bc:	2301      	movs	r3, #1
    f1be:	1b80      	subs	r0, r0, r6
    f1c0:	4083      	lsls	r3, r0
    f1c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
    f1c4:	3501      	adds	r5, #1
    f1c6:	4313      	orrs	r3, r2
    f1c8:	9202      	str	r2, [sp, #8]
    f1ca:	9345      	str	r3, [sp, #276]	; 0x114
    f1cc:	782b      	ldrb	r3, [r5, #0]
    f1ce:	1c6e      	adds	r6, r5, #1
    f1d0:	2b67      	cmp	r3, #103	; 0x67
    f1d2:	d858      	bhi.n	f286 <__ssvfiscanf_r+0x14e>
    f1d4:	2b65      	cmp	r3, #101	; 0x65
    f1d6:	d300      	bcc.n	f1da <__ssvfiscanf_r+0xa2>
    f1d8:	e0dd      	b.n	f396 <__ssvfiscanf_r+0x25e>
    f1da:	2b47      	cmp	r3, #71	; 0x47
    f1dc:	d838      	bhi.n	f250 <__ssvfiscanf_r+0x118>
    f1de:	2b45      	cmp	r3, #69	; 0x45
    f1e0:	d300      	bcc.n	f1e4 <__ssvfiscanf_r+0xac>
    f1e2:	e0d8      	b.n	f396 <__ssvfiscanf_r+0x25e>
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	d100      	bne.n	f1ea <__ssvfiscanf_r+0xb2>
    f1e8:	e11d      	b.n	f426 <__ssvfiscanf_r+0x2ee>
    f1ea:	2b25      	cmp	r3, #37	; 0x25
    f1ec:	d079      	beq.n	f2e2 <__ssvfiscanf_r+0x1aa>
    f1ee:	2303      	movs	r3, #3
    f1f0:	934b      	str	r3, [sp, #300]	; 0x12c
    f1f2:	3307      	adds	r3, #7
    f1f4:	9346      	str	r3, [sp, #280]	; 0x118
    f1f6:	e053      	b.n	f2a0 <__ssvfiscanf_r+0x168>
    f1f8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    f1fa:	3301      	adds	r3, #1
    f1fc:	9201      	str	r2, [sp, #4]
    f1fe:	3201      	adds	r2, #1
    f200:	9249      	str	r2, [sp, #292]	; 0x124
    f202:	6862      	ldr	r2, [r4, #4]
    f204:	6023      	str	r3, [r4, #0]
    f206:	3a01      	subs	r2, #1
    f208:	6062      	str	r2, [r4, #4]
    f20a:	6863      	ldr	r3, [r4, #4]
    f20c:	2b00      	cmp	r3, #0
    f20e:	dd0b      	ble.n	f228 <__ssvfiscanf_r+0xf0>
    f210:	f7fc fa7c 	bl	b70c <__locale_ctype_ptr>
    f214:	2108      	movs	r1, #8
    f216:	6823      	ldr	r3, [r4, #0]
    f218:	781a      	ldrb	r2, [r3, #0]
    f21a:	1880      	adds	r0, r0, r2
    f21c:	7842      	ldrb	r2, [r0, #1]
    f21e:	420a      	tst	r2, r1
    f220:	d1ea      	bne.n	f1f8 <__ssvfiscanf_r+0xc0>
    f222:	1c6e      	adds	r6, r5, #1
    f224:	0035      	movs	r5, r6
    f226:	e7a1      	b.n	f16c <__ssvfiscanf_r+0x34>
    f228:	2286      	movs	r2, #134	; 0x86
    f22a:	ab02      	add	r3, sp, #8
    f22c:	0052      	lsls	r2, r2, #1
    f22e:	189b      	adds	r3, r3, r2
    f230:	59db      	ldr	r3, [r3, r7]
    f232:	0021      	movs	r1, r4
    f234:	9800      	ldr	r0, [sp, #0]
    f236:	9301      	str	r3, [sp, #4]
    f238:	4798      	blx	r3
    f23a:	2800      	cmp	r0, #0
    f23c:	d0e8      	beq.n	f210 <__ssvfiscanf_r+0xd8>
    f23e:	e7f0      	b.n	f222 <__ssvfiscanf_r+0xea>
    f240:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    f242:	3501      	adds	r5, #1
    f244:	9302      	str	r3, [sp, #8]
    f246:	4353      	muls	r3, r2
    f248:	3b30      	subs	r3, #48	; 0x30
    f24a:	1859      	adds	r1, r3, r1
    f24c:	9147      	str	r1, [sp, #284]	; 0x11c
    f24e:	e7a9      	b.n	f1a4 <__ssvfiscanf_r+0x6c>
    f250:	2b5b      	cmp	r3, #91	; 0x5b
    f252:	d100      	bne.n	f256 <__ssvfiscanf_r+0x11e>
    f254:	e077      	b.n	f346 <__ssvfiscanf_r+0x20e>
    f256:	d80f      	bhi.n	f278 <__ssvfiscanf_r+0x140>
    f258:	2b58      	cmp	r3, #88	; 0x58
    f25a:	d1c8      	bne.n	f1ee <__ssvfiscanf_r+0xb6>
    f25c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    f25e:	9201      	str	r2, [sp, #4]
    f260:	2280      	movs	r2, #128	; 0x80
    f262:	9901      	ldr	r1, [sp, #4]
    f264:	0092      	lsls	r2, r2, #2
    f266:	430a      	orrs	r2, r1
    f268:	9245      	str	r2, [sp, #276]	; 0x114
    f26a:	2210      	movs	r2, #16
    f26c:	9246      	str	r2, [sp, #280]	; 0x118
    f26e:	2203      	movs	r2, #3
    f270:	2b6e      	cmp	r3, #110	; 0x6e
    f272:	dd14      	ble.n	f29e <__ssvfiscanf_r+0x166>
    f274:	3201      	adds	r2, #1
    f276:	e012      	b.n	f29e <__ssvfiscanf_r+0x166>
    f278:	2b63      	cmp	r3, #99	; 0x63
    f27a:	d100      	bne.n	f27e <__ssvfiscanf_r+0x146>
    f27c:	e071      	b.n	f362 <__ssvfiscanf_r+0x22a>
    f27e:	2b64      	cmp	r3, #100	; 0x64
    f280:	d1b5      	bne.n	f1ee <__ssvfiscanf_r+0xb6>
    f282:	220a      	movs	r2, #10
    f284:	e7f2      	b.n	f26c <__ssvfiscanf_r+0x134>
    f286:	2b70      	cmp	r3, #112	; 0x70
    f288:	d052      	beq.n	f330 <__ssvfiscanf_r+0x1f8>
    f28a:	d822      	bhi.n	f2d2 <__ssvfiscanf_r+0x19a>
    f28c:	2b6e      	cmp	r3, #110	; 0x6e
    f28e:	d100      	bne.n	f292 <__ssvfiscanf_r+0x15a>
    f290:	e06f      	b.n	f372 <__ssvfiscanf_r+0x23a>
    f292:	d854      	bhi.n	f33e <__ssvfiscanf_r+0x206>
    f294:	2b69      	cmp	r3, #105	; 0x69
    f296:	d1aa      	bne.n	f1ee <__ssvfiscanf_r+0xb6>
    f298:	2300      	movs	r3, #0
    f29a:	2203      	movs	r2, #3
    f29c:	9346      	str	r3, [sp, #280]	; 0x118
    f29e:	924b      	str	r2, [sp, #300]	; 0x12c
    f2a0:	6863      	ldr	r3, [r4, #4]
    f2a2:	2b00      	cmp	r3, #0
    f2a4:	dc00      	bgt.n	f2a8 <__ssvfiscanf_r+0x170>
    f2a6:	e078      	b.n	f39a <__ssvfiscanf_r+0x262>
    f2a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f2aa:	9301      	str	r3, [sp, #4]
    f2ac:	065b      	lsls	r3, r3, #25
    f2ae:	d400      	bmi.n	f2b2 <__ssvfiscanf_r+0x17a>
    f2b0:	e08b      	b.n	f3ca <__ssvfiscanf_r+0x292>
    f2b2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    f2b4:	2b02      	cmp	r3, #2
    f2b6:	dd00      	ble.n	f2ba <__ssvfiscanf_r+0x182>
    f2b8:	e09d      	b.n	f3f6 <__ssvfiscanf_r+0x2be>
    f2ba:	ab03      	add	r3, sp, #12
    f2bc:	0022      	movs	r2, r4
    f2be:	a945      	add	r1, sp, #276	; 0x114
    f2c0:	9800      	ldr	r0, [sp, #0]
    f2c2:	f000 f8bf 	bl	f444 <_scanf_chars>
    f2c6:	2801      	cmp	r0, #1
    f2c8:	d100      	bne.n	f2cc <__ssvfiscanf_r+0x194>
    f2ca:	e0af      	b.n	f42c <__ssvfiscanf_r+0x2f4>
    f2cc:	2802      	cmp	r0, #2
    f2ce:	d1a9      	bne.n	f224 <__ssvfiscanf_r+0xec>
    f2d0:	e025      	b.n	f31e <__ssvfiscanf_r+0x1e6>
    f2d2:	2b75      	cmp	r3, #117	; 0x75
    f2d4:	d0d5      	beq.n	f282 <__ssvfiscanf_r+0x14a>
    f2d6:	2b78      	cmp	r3, #120	; 0x78
    f2d8:	d0c0      	beq.n	f25c <__ssvfiscanf_r+0x124>
    f2da:	2b73      	cmp	r3, #115	; 0x73
    f2dc:	d187      	bne.n	f1ee <__ssvfiscanf_r+0xb6>
    f2de:	2302      	movs	r3, #2
    f2e0:	e03d      	b.n	f35e <__ssvfiscanf_r+0x226>
    f2e2:	6863      	ldr	r3, [r4, #4]
    f2e4:	2b00      	cmp	r3, #0
    f2e6:	dd0f      	ble.n	f308 <__ssvfiscanf_r+0x1d0>
    f2e8:	6823      	ldr	r3, [r4, #0]
    f2ea:	9901      	ldr	r1, [sp, #4]
    f2ec:	781a      	ldrb	r2, [r3, #0]
    f2ee:	4291      	cmp	r1, r2
    f2f0:	d000      	beq.n	f2f4 <__ssvfiscanf_r+0x1bc>
    f2f2:	e09b      	b.n	f42c <__ssvfiscanf_r+0x2f4>
    f2f4:	3301      	adds	r3, #1
    f2f6:	6862      	ldr	r2, [r4, #4]
    f2f8:	6023      	str	r3, [r4, #0]
    f2fa:	9b49      	ldr	r3, [sp, #292]	; 0x124
    f2fc:	3a01      	subs	r2, #1
    f2fe:	9301      	str	r3, [sp, #4]
    f300:	3301      	adds	r3, #1
    f302:	6062      	str	r2, [r4, #4]
    f304:	9349      	str	r3, [sp, #292]	; 0x124
    f306:	e78d      	b.n	f224 <__ssvfiscanf_r+0xec>
    f308:	2286      	movs	r2, #134	; 0x86
    f30a:	ab02      	add	r3, sp, #8
    f30c:	0052      	lsls	r2, r2, #1
    f30e:	189b      	adds	r3, r3, r2
    f310:	59db      	ldr	r3, [r3, r7]
    f312:	0021      	movs	r1, r4
    f314:	9800      	ldr	r0, [sp, #0]
    f316:	9302      	str	r3, [sp, #8]
    f318:	4798      	blx	r3
    f31a:	2800      	cmp	r0, #0
    f31c:	d0e4      	beq.n	f2e8 <__ssvfiscanf_r+0x1b0>
    f31e:	9848      	ldr	r0, [sp, #288]	; 0x120
    f320:	2800      	cmp	r0, #0
    f322:	d000      	beq.n	f326 <__ssvfiscanf_r+0x1ee>
    f324:	e07b      	b.n	f41e <__ssvfiscanf_r+0x2e6>
    f326:	3801      	subs	r0, #1
    f328:	23a7      	movs	r3, #167	; 0xa7
    f32a:	009b      	lsls	r3, r3, #2
    f32c:	449d      	add	sp, r3
    f32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f330:	9a45      	ldr	r2, [sp, #276]	; 0x114
    f332:	9201      	str	r2, [sp, #4]
    f334:	2220      	movs	r2, #32
    f336:	9901      	ldr	r1, [sp, #4]
    f338:	430a      	orrs	r2, r1
    f33a:	9245      	str	r2, [sp, #276]	; 0x114
    f33c:	e78e      	b.n	f25c <__ssvfiscanf_r+0x124>
    f33e:	2308      	movs	r3, #8
    f340:	2204      	movs	r2, #4
    f342:	9346      	str	r3, [sp, #280]	; 0x118
    f344:	e7ab      	b.n	f29e <__ssvfiscanf_r+0x166>
    f346:	0031      	movs	r1, r6
    f348:	a805      	add	r0, sp, #20
    f34a:	f000 f9f3 	bl	f734 <__sccl>
    f34e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f350:	0006      	movs	r6, r0
    f352:	9301      	str	r3, [sp, #4]
    f354:	2340      	movs	r3, #64	; 0x40
    f356:	9a01      	ldr	r2, [sp, #4]
    f358:	4313      	orrs	r3, r2
    f35a:	9345      	str	r3, [sp, #276]	; 0x114
    f35c:	2301      	movs	r3, #1
    f35e:	934b      	str	r3, [sp, #300]	; 0x12c
    f360:	e79e      	b.n	f2a0 <__ssvfiscanf_r+0x168>
    f362:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f364:	9301      	str	r3, [sp, #4]
    f366:	2340      	movs	r3, #64	; 0x40
    f368:	9a01      	ldr	r2, [sp, #4]
    f36a:	4313      	orrs	r3, r2
    f36c:	9345      	str	r3, [sp, #276]	; 0x114
    f36e:	2300      	movs	r3, #0
    f370:	e7f5      	b.n	f35e <__ssvfiscanf_r+0x226>
    f372:	9945      	ldr	r1, [sp, #276]	; 0x114
    f374:	06cb      	lsls	r3, r1, #27
    f376:	d500      	bpl.n	f37a <__ssvfiscanf_r+0x242>
    f378:	e754      	b.n	f224 <__ssvfiscanf_r+0xec>
    f37a:	9b03      	ldr	r3, [sp, #12]
    f37c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    f37e:	07c8      	lsls	r0, r1, #31
    f380:	d504      	bpl.n	f38c <__ssvfiscanf_r+0x254>
    f382:	1d19      	adds	r1, r3, #4
    f384:	9103      	str	r1, [sp, #12]
    f386:	681b      	ldr	r3, [r3, #0]
    f388:	801a      	strh	r2, [r3, #0]
    f38a:	e74b      	b.n	f224 <__ssvfiscanf_r+0xec>
    f38c:	1d19      	adds	r1, r3, #4
    f38e:	9103      	str	r1, [sp, #12]
    f390:	681b      	ldr	r3, [r3, #0]
    f392:	601a      	str	r2, [r3, #0]
    f394:	e746      	b.n	f224 <__ssvfiscanf_r+0xec>
    f396:	2305      	movs	r3, #5
    f398:	e7e1      	b.n	f35e <__ssvfiscanf_r+0x226>
    f39a:	2286      	movs	r2, #134	; 0x86
    f39c:	ab02      	add	r3, sp, #8
    f39e:	0052      	lsls	r2, r2, #1
    f3a0:	189b      	adds	r3, r3, r2
    f3a2:	59db      	ldr	r3, [r3, r7]
    f3a4:	0021      	movs	r1, r4
    f3a6:	9800      	ldr	r0, [sp, #0]
    f3a8:	9301      	str	r3, [sp, #4]
    f3aa:	4798      	blx	r3
    f3ac:	2800      	cmp	r0, #0
    f3ae:	d100      	bne.n	f3b2 <__ssvfiscanf_r+0x27a>
    f3b0:	e77a      	b.n	f2a8 <__ssvfiscanf_r+0x170>
    f3b2:	e7b4      	b.n	f31e <__ssvfiscanf_r+0x1e6>
    f3b4:	9a49      	ldr	r2, [sp, #292]	; 0x124
    f3b6:	9201      	str	r2, [sp, #4]
    f3b8:	3201      	adds	r2, #1
    f3ba:	9249      	str	r2, [sp, #292]	; 0x124
    f3bc:	6862      	ldr	r2, [r4, #4]
    f3be:	3a01      	subs	r2, #1
    f3c0:	6062      	str	r2, [r4, #4]
    f3c2:	2a00      	cmp	r2, #0
    f3c4:	dd0b      	ble.n	f3de <__ssvfiscanf_r+0x2a6>
    f3c6:	3301      	adds	r3, #1
    f3c8:	6023      	str	r3, [r4, #0]
    f3ca:	f7fc f99f 	bl	b70c <__locale_ctype_ptr>
    f3ce:	2108      	movs	r1, #8
    f3d0:	6823      	ldr	r3, [r4, #0]
    f3d2:	781a      	ldrb	r2, [r3, #0]
    f3d4:	1880      	adds	r0, r0, r2
    f3d6:	7842      	ldrb	r2, [r0, #1]
    f3d8:	420a      	tst	r2, r1
    f3da:	d1eb      	bne.n	f3b4 <__ssvfiscanf_r+0x27c>
    f3dc:	e769      	b.n	f2b2 <__ssvfiscanf_r+0x17a>
    f3de:	2286      	movs	r2, #134	; 0x86
    f3e0:	ab02      	add	r3, sp, #8
    f3e2:	0052      	lsls	r2, r2, #1
    f3e4:	189b      	adds	r3, r3, r2
    f3e6:	59db      	ldr	r3, [r3, r7]
    f3e8:	0021      	movs	r1, r4
    f3ea:	9800      	ldr	r0, [sp, #0]
    f3ec:	9301      	str	r3, [sp, #4]
    f3ee:	4798      	blx	r3
    f3f0:	2800      	cmp	r0, #0
    f3f2:	d0ea      	beq.n	f3ca <__ssvfiscanf_r+0x292>
    f3f4:	e793      	b.n	f31e <__ssvfiscanf_r+0x1e6>
    f3f6:	2b04      	cmp	r3, #4
    f3f8:	dc06      	bgt.n	f408 <__ssvfiscanf_r+0x2d0>
    f3fa:	ab03      	add	r3, sp, #12
    f3fc:	0022      	movs	r2, r4
    f3fe:	a945      	add	r1, sp, #276	; 0x114
    f400:	9800      	ldr	r0, [sp, #0]
    f402:	f000 f883 	bl	f50c <_scanf_i>
    f406:	e75e      	b.n	f2c6 <__ssvfiscanf_r+0x18e>
    f408:	4b0d      	ldr	r3, [pc, #52]	; (f440 <__ssvfiscanf_r+0x308>)
    f40a:	2b00      	cmp	r3, #0
    f40c:	d100      	bne.n	f410 <__ssvfiscanf_r+0x2d8>
    f40e:	e709      	b.n	f224 <__ssvfiscanf_r+0xec>
    f410:	ab03      	add	r3, sp, #12
    f412:	0022      	movs	r2, r4
    f414:	a945      	add	r1, sp, #276	; 0x114
    f416:	9800      	ldr	r0, [sp, #0]
    f418:	e000      	b.n	f41c <__ssvfiscanf_r+0x2e4>
    f41a:	bf00      	nop
    f41c:	e753      	b.n	f2c6 <__ssvfiscanf_r+0x18e>
    f41e:	89a3      	ldrh	r3, [r4, #12]
    f420:	065b      	lsls	r3, r3, #25
    f422:	d400      	bmi.n	f426 <__ssvfiscanf_r+0x2ee>
    f424:	e780      	b.n	f328 <__ssvfiscanf_r+0x1f0>
    f426:	2001      	movs	r0, #1
    f428:	4240      	negs	r0, r0
    f42a:	e77d      	b.n	f328 <__ssvfiscanf_r+0x1f0>
    f42c:	9848      	ldr	r0, [sp, #288]	; 0x120
    f42e:	e77b      	b.n	f328 <__ssvfiscanf_r+0x1f0>
    f430:	fffffd64 	.word	0xfffffd64
    f434:	0000f081 	.word	0x0000f081
    f438:	0000f0f9 	.word	0x0000f0f9
    f43c:	00010f9e 	.word	0x00010f9e
    f440:	00000000 	.word	0x00000000

0000f444 <_scanf_chars>:
    f444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f446:	0015      	movs	r5, r2
    f448:	688a      	ldr	r2, [r1, #8]
    f44a:	9001      	str	r0, [sp, #4]
    f44c:	000c      	movs	r4, r1
    f44e:	2a00      	cmp	r2, #0
    f450:	d106      	bne.n	f460 <_scanf_chars+0x1c>
    f452:	698a      	ldr	r2, [r1, #24]
    f454:	1e51      	subs	r1, r2, #1
    f456:	418a      	sbcs	r2, r1
    f458:	2101      	movs	r1, #1
    f45a:	4252      	negs	r2, r2
    f45c:	430a      	orrs	r2, r1
    f45e:	60a2      	str	r2, [r4, #8]
    f460:	6822      	ldr	r2, [r4, #0]
    f462:	06d2      	lsls	r2, r2, #27
    f464:	d403      	bmi.n	f46e <_scanf_chars+0x2a>
    f466:	681a      	ldr	r2, [r3, #0]
    f468:	1d11      	adds	r1, r2, #4
    f46a:	6019      	str	r1, [r3, #0]
    f46c:	6817      	ldr	r7, [r2, #0]
    f46e:	2600      	movs	r6, #0
    f470:	69a3      	ldr	r3, [r4, #24]
    f472:	2b00      	cmp	r3, #0
    f474:	d01c      	beq.n	f4b0 <_scanf_chars+0x6c>
    f476:	2b01      	cmp	r3, #1
    f478:	d108      	bne.n	f48c <_scanf_chars+0x48>
    f47a:	682b      	ldr	r3, [r5, #0]
    f47c:	6962      	ldr	r2, [r4, #20]
    f47e:	781b      	ldrb	r3, [r3, #0]
    f480:	5cd3      	ldrb	r3, [r2, r3]
    f482:	2b00      	cmp	r3, #0
    f484:	d114      	bne.n	f4b0 <_scanf_chars+0x6c>
    f486:	2e00      	cmp	r6, #0
    f488:	d130      	bne.n	f4ec <_scanf_chars+0xa8>
    f48a:	e006      	b.n	f49a <_scanf_chars+0x56>
    f48c:	2b02      	cmp	r3, #2
    f48e:	d006      	beq.n	f49e <_scanf_chars+0x5a>
    f490:	2e00      	cmp	r6, #0
    f492:	d12b      	bne.n	f4ec <_scanf_chars+0xa8>
    f494:	69a3      	ldr	r3, [r4, #24]
    f496:	2b01      	cmp	r3, #1
    f498:	d128      	bne.n	f4ec <_scanf_chars+0xa8>
    f49a:	2001      	movs	r0, #1
    f49c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f49e:	f7fc f935 	bl	b70c <__locale_ctype_ptr>
    f4a2:	2208      	movs	r2, #8
    f4a4:	682b      	ldr	r3, [r5, #0]
    f4a6:	781b      	ldrb	r3, [r3, #0]
    f4a8:	18c0      	adds	r0, r0, r3
    f4aa:	7843      	ldrb	r3, [r0, #1]
    f4ac:	4213      	tst	r3, r2
    f4ae:	d1ef      	bne.n	f490 <_scanf_chars+0x4c>
    f4b0:	2210      	movs	r2, #16
    f4b2:	6823      	ldr	r3, [r4, #0]
    f4b4:	3601      	adds	r6, #1
    f4b6:	4213      	tst	r3, r2
    f4b8:	d103      	bne.n	f4c2 <_scanf_chars+0x7e>
    f4ba:	682b      	ldr	r3, [r5, #0]
    f4bc:	781b      	ldrb	r3, [r3, #0]
    f4be:	703b      	strb	r3, [r7, #0]
    f4c0:	3701      	adds	r7, #1
    f4c2:	682a      	ldr	r2, [r5, #0]
    f4c4:	686b      	ldr	r3, [r5, #4]
    f4c6:	3201      	adds	r2, #1
    f4c8:	602a      	str	r2, [r5, #0]
    f4ca:	68a2      	ldr	r2, [r4, #8]
    f4cc:	3b01      	subs	r3, #1
    f4ce:	3a01      	subs	r2, #1
    f4d0:	606b      	str	r3, [r5, #4]
    f4d2:	60a2      	str	r2, [r4, #8]
    f4d4:	2a00      	cmp	r2, #0
    f4d6:	d009      	beq.n	f4ec <_scanf_chars+0xa8>
    f4d8:	2b00      	cmp	r3, #0
    f4da:	dcc9      	bgt.n	f470 <_scanf_chars+0x2c>
    f4dc:	23c0      	movs	r3, #192	; 0xc0
    f4de:	005b      	lsls	r3, r3, #1
    f4e0:	58e3      	ldr	r3, [r4, r3]
    f4e2:	0029      	movs	r1, r5
    f4e4:	9801      	ldr	r0, [sp, #4]
    f4e6:	4798      	blx	r3
    f4e8:	2800      	cmp	r0, #0
    f4ea:	d0c1      	beq.n	f470 <_scanf_chars+0x2c>
    f4ec:	2310      	movs	r3, #16
    f4ee:	6822      	ldr	r2, [r4, #0]
    f4f0:	4013      	ands	r3, r2
    f4f2:	d106      	bne.n	f502 <_scanf_chars+0xbe>
    f4f4:	68e2      	ldr	r2, [r4, #12]
    f4f6:	3201      	adds	r2, #1
    f4f8:	60e2      	str	r2, [r4, #12]
    f4fa:	69a2      	ldr	r2, [r4, #24]
    f4fc:	2a00      	cmp	r2, #0
    f4fe:	d000      	beq.n	f502 <_scanf_chars+0xbe>
    f500:	703b      	strb	r3, [r7, #0]
    f502:	6923      	ldr	r3, [r4, #16]
    f504:	2000      	movs	r0, #0
    f506:	199e      	adds	r6, r3, r6
    f508:	6126      	str	r6, [r4, #16]
    f50a:	e7c7      	b.n	f49c <_scanf_chars+0x58>

0000f50c <_scanf_i>:
    f50c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f50e:	000c      	movs	r4, r1
    f510:	b08d      	sub	sp, #52	; 0x34
    f512:	9302      	str	r3, [sp, #8]
    f514:	4b77      	ldr	r3, [pc, #476]	; (f6f4 <_scanf_i+0x1e8>)
    f516:	9005      	str	r0, [sp, #20]
    f518:	0016      	movs	r6, r2
    f51a:	aa09      	add	r2, sp, #36	; 0x24
    f51c:	cb23      	ldmia	r3!, {r0, r1, r5}
    f51e:	c223      	stmia	r2!, {r0, r1, r5}
    f520:	4b75      	ldr	r3, [pc, #468]	; (f6f8 <_scanf_i+0x1ec>)
    f522:	9306      	str	r3, [sp, #24]
    f524:	69a3      	ldr	r3, [r4, #24]
    f526:	2b03      	cmp	r3, #3
    f528:	d001      	beq.n	f52e <_scanf_i+0x22>
    f52a:	4b74      	ldr	r3, [pc, #464]	; (f6fc <_scanf_i+0x1f0>)
    f52c:	9306      	str	r3, [sp, #24]
    f52e:	22ae      	movs	r2, #174	; 0xae
    f530:	2000      	movs	r0, #0
    f532:	68a3      	ldr	r3, [r4, #8]
    f534:	0052      	lsls	r2, r2, #1
    f536:	1e59      	subs	r1, r3, #1
    f538:	9004      	str	r0, [sp, #16]
    f53a:	4291      	cmp	r1, r2
    f53c:	d905      	bls.n	f54a <_scanf_i+0x3e>
    f53e:	3b5e      	subs	r3, #94	; 0x5e
    f540:	3bff      	subs	r3, #255	; 0xff
    f542:	9304      	str	r3, [sp, #16]
    f544:	235e      	movs	r3, #94	; 0x5e
    f546:	33ff      	adds	r3, #255	; 0xff
    f548:	60a3      	str	r3, [r4, #8]
    f54a:	0023      	movs	r3, r4
    f54c:	331c      	adds	r3, #28
    f54e:	9301      	str	r3, [sp, #4]
    f550:	23d0      	movs	r3, #208	; 0xd0
    f552:	2700      	movs	r7, #0
    f554:	6822      	ldr	r2, [r4, #0]
    f556:	011b      	lsls	r3, r3, #4
    f558:	4313      	orrs	r3, r2
    f55a:	6023      	str	r3, [r4, #0]
    f55c:	9b01      	ldr	r3, [sp, #4]
    f55e:	9303      	str	r3, [sp, #12]
    f560:	6833      	ldr	r3, [r6, #0]
    f562:	a809      	add	r0, sp, #36	; 0x24
    f564:	7819      	ldrb	r1, [r3, #0]
    f566:	00bb      	lsls	r3, r7, #2
    f568:	2202      	movs	r2, #2
    f56a:	5818      	ldr	r0, [r3, r0]
    f56c:	f7fe ff2a 	bl	e3c4 <memchr>
    f570:	2800      	cmp	r0, #0
    f572:	d02b      	beq.n	f5cc <_scanf_i+0xc0>
    f574:	2f01      	cmp	r7, #1
    f576:	d15f      	bne.n	f638 <_scanf_i+0x12c>
    f578:	6863      	ldr	r3, [r4, #4]
    f57a:	2b00      	cmp	r3, #0
    f57c:	d106      	bne.n	f58c <_scanf_i+0x80>
    f57e:	3308      	adds	r3, #8
    f580:	6822      	ldr	r2, [r4, #0]
    f582:	6063      	str	r3, [r4, #4]
    f584:	33f9      	adds	r3, #249	; 0xf9
    f586:	33ff      	adds	r3, #255	; 0xff
    f588:	4313      	orrs	r3, r2
    f58a:	6023      	str	r3, [r4, #0]
    f58c:	4b5c      	ldr	r3, [pc, #368]	; (f700 <_scanf_i+0x1f4>)
    f58e:	6822      	ldr	r2, [r4, #0]
    f590:	4013      	ands	r3, r2
    f592:	6023      	str	r3, [r4, #0]
    f594:	68a3      	ldr	r3, [r4, #8]
    f596:	1e5a      	subs	r2, r3, #1
    f598:	60a2      	str	r2, [r4, #8]
    f59a:	2b00      	cmp	r3, #0
    f59c:	d016      	beq.n	f5cc <_scanf_i+0xc0>
    f59e:	9b03      	ldr	r3, [sp, #12]
    f5a0:	1c5d      	adds	r5, r3, #1
    f5a2:	6833      	ldr	r3, [r6, #0]
    f5a4:	1c5a      	adds	r2, r3, #1
    f5a6:	6032      	str	r2, [r6, #0]
    f5a8:	781b      	ldrb	r3, [r3, #0]
    f5aa:	9a03      	ldr	r2, [sp, #12]
    f5ac:	9503      	str	r5, [sp, #12]
    f5ae:	7013      	strb	r3, [r2, #0]
    f5b0:	6873      	ldr	r3, [r6, #4]
    f5b2:	3b01      	subs	r3, #1
    f5b4:	6073      	str	r3, [r6, #4]
    f5b6:	2b00      	cmp	r3, #0
    f5b8:	dc08      	bgt.n	f5cc <_scanf_i+0xc0>
    f5ba:	23c0      	movs	r3, #192	; 0xc0
    f5bc:	005b      	lsls	r3, r3, #1
    f5be:	58e3      	ldr	r3, [r4, r3]
    f5c0:	0031      	movs	r1, r6
    f5c2:	9805      	ldr	r0, [sp, #20]
    f5c4:	9307      	str	r3, [sp, #28]
    f5c6:	4798      	blx	r3
    f5c8:	2800      	cmp	r0, #0
    f5ca:	d17d      	bne.n	f6c8 <_scanf_i+0x1bc>
    f5cc:	3701      	adds	r7, #1
    f5ce:	2f03      	cmp	r7, #3
    f5d0:	d1c6      	bne.n	f560 <_scanf_i+0x54>
    f5d2:	6863      	ldr	r3, [r4, #4]
    f5d4:	2b00      	cmp	r3, #0
    f5d6:	d101      	bne.n	f5dc <_scanf_i+0xd0>
    f5d8:	330a      	adds	r3, #10
    f5da:	6063      	str	r3, [r4, #4]
    f5dc:	2110      	movs	r1, #16
    f5de:	2700      	movs	r7, #0
    f5e0:	6863      	ldr	r3, [r4, #4]
    f5e2:	6960      	ldr	r0, [r4, #20]
    f5e4:	1ac9      	subs	r1, r1, r3
    f5e6:	4b47      	ldr	r3, [pc, #284]	; (f704 <_scanf_i+0x1f8>)
    f5e8:	18c9      	adds	r1, r1, r3
    f5ea:	f000 f8a3 	bl	f734 <__sccl>
    f5ee:	9d03      	ldr	r5, [sp, #12]
    f5f0:	68a3      	ldr	r3, [r4, #8]
    f5f2:	2b00      	cmp	r3, #0
    f5f4:	d041      	beq.n	f67a <_scanf_i+0x16e>
    f5f6:	6832      	ldr	r2, [r6, #0]
    f5f8:	6960      	ldr	r0, [r4, #20]
    f5fa:	7811      	ldrb	r1, [r2, #0]
    f5fc:	5c40      	ldrb	r0, [r0, r1]
    f5fe:	2800      	cmp	r0, #0
    f600:	d03b      	beq.n	f67a <_scanf_i+0x16e>
    f602:	2930      	cmp	r1, #48	; 0x30
    f604:	d128      	bne.n	f658 <_scanf_i+0x14c>
    f606:	2080      	movs	r0, #128	; 0x80
    f608:	6821      	ldr	r1, [r4, #0]
    f60a:	0100      	lsls	r0, r0, #4
    f60c:	4201      	tst	r1, r0
    f60e:	d023      	beq.n	f658 <_scanf_i+0x14c>
    f610:	9a04      	ldr	r2, [sp, #16]
    f612:	3701      	adds	r7, #1
    f614:	2a00      	cmp	r2, #0
    f616:	d003      	beq.n	f620 <_scanf_i+0x114>
    f618:	3a01      	subs	r2, #1
    f61a:	3301      	adds	r3, #1
    f61c:	9204      	str	r2, [sp, #16]
    f61e:	60a3      	str	r3, [r4, #8]
    f620:	6873      	ldr	r3, [r6, #4]
    f622:	3b01      	subs	r3, #1
    f624:	6073      	str	r3, [r6, #4]
    f626:	2b00      	cmp	r3, #0
    f628:	dd1e      	ble.n	f668 <_scanf_i+0x15c>
    f62a:	6833      	ldr	r3, [r6, #0]
    f62c:	3301      	adds	r3, #1
    f62e:	6033      	str	r3, [r6, #0]
    f630:	68a3      	ldr	r3, [r4, #8]
    f632:	3b01      	subs	r3, #1
    f634:	60a3      	str	r3, [r4, #8]
    f636:	e7db      	b.n	f5f0 <_scanf_i+0xe4>
    f638:	2f02      	cmp	r7, #2
    f63a:	d1ab      	bne.n	f594 <_scanf_i+0x88>
    f63c:	21c0      	movs	r1, #192	; 0xc0
    f63e:	2380      	movs	r3, #128	; 0x80
    f640:	6822      	ldr	r2, [r4, #0]
    f642:	00c9      	lsls	r1, r1, #3
    f644:	4011      	ands	r1, r2
    f646:	009b      	lsls	r3, r3, #2
    f648:	4299      	cmp	r1, r3
    f64a:	d1c2      	bne.n	f5d2 <_scanf_i+0xc6>
    f64c:	3bf1      	subs	r3, #241	; 0xf1
    f64e:	3bff      	subs	r3, #255	; 0xff
    f650:	6063      	str	r3, [r4, #4]
    f652:	33f0      	adds	r3, #240	; 0xf0
    f654:	4313      	orrs	r3, r2
    f656:	e79c      	b.n	f592 <_scanf_i+0x86>
    f658:	6821      	ldr	r1, [r4, #0]
    f65a:	4b2b      	ldr	r3, [pc, #172]	; (f708 <_scanf_i+0x1fc>)
    f65c:	400b      	ands	r3, r1
    f65e:	6023      	str	r3, [r4, #0]
    f660:	7813      	ldrb	r3, [r2, #0]
    f662:	702b      	strb	r3, [r5, #0]
    f664:	3501      	adds	r5, #1
    f666:	e7db      	b.n	f620 <_scanf_i+0x114>
    f668:	23c0      	movs	r3, #192	; 0xc0
    f66a:	005b      	lsls	r3, r3, #1
    f66c:	58e3      	ldr	r3, [r4, r3]
    f66e:	0031      	movs	r1, r6
    f670:	9805      	ldr	r0, [sp, #20]
    f672:	9303      	str	r3, [sp, #12]
    f674:	4798      	blx	r3
    f676:	2800      	cmp	r0, #0
    f678:	d0da      	beq.n	f630 <_scanf_i+0x124>
    f67a:	6823      	ldr	r3, [r4, #0]
    f67c:	05db      	lsls	r3, r3, #23
    f67e:	d50e      	bpl.n	f69e <_scanf_i+0x192>
    f680:	9b01      	ldr	r3, [sp, #4]
    f682:	429d      	cmp	r5, r3
    f684:	d907      	bls.n	f696 <_scanf_i+0x18a>
    f686:	23be      	movs	r3, #190	; 0xbe
    f688:	3d01      	subs	r5, #1
    f68a:	005b      	lsls	r3, r3, #1
    f68c:	7829      	ldrb	r1, [r5, #0]
    f68e:	58e3      	ldr	r3, [r4, r3]
    f690:	0032      	movs	r2, r6
    f692:	9805      	ldr	r0, [sp, #20]
    f694:	4798      	blx	r3
    f696:	9b01      	ldr	r3, [sp, #4]
    f698:	2001      	movs	r0, #1
    f69a:	429d      	cmp	r5, r3
    f69c:	d027      	beq.n	f6ee <_scanf_i+0x1e2>
    f69e:	2210      	movs	r2, #16
    f6a0:	6823      	ldr	r3, [r4, #0]
    f6a2:	401a      	ands	r2, r3
    f6a4:	d11c      	bne.n	f6e0 <_scanf_i+0x1d4>
    f6a6:	702a      	strb	r2, [r5, #0]
    f6a8:	6863      	ldr	r3, [r4, #4]
    f6aa:	9901      	ldr	r1, [sp, #4]
    f6ac:	9805      	ldr	r0, [sp, #20]
    f6ae:	9e06      	ldr	r6, [sp, #24]
    f6b0:	47b0      	blx	r6
    f6b2:	9b02      	ldr	r3, [sp, #8]
    f6b4:	6822      	ldr	r2, [r4, #0]
    f6b6:	681b      	ldr	r3, [r3, #0]
    f6b8:	0691      	lsls	r1, r2, #26
    f6ba:	d507      	bpl.n	f6cc <_scanf_i+0x1c0>
    f6bc:	9902      	ldr	r1, [sp, #8]
    f6be:	1d1a      	adds	r2, r3, #4
    f6c0:	600a      	str	r2, [r1, #0]
    f6c2:	681b      	ldr	r3, [r3, #0]
    f6c4:	6018      	str	r0, [r3, #0]
    f6c6:	e008      	b.n	f6da <_scanf_i+0x1ce>
    f6c8:	2700      	movs	r7, #0
    f6ca:	e7d6      	b.n	f67a <_scanf_i+0x16e>
    f6cc:	07d1      	lsls	r1, r2, #31
    f6ce:	d5f5      	bpl.n	f6bc <_scanf_i+0x1b0>
    f6d0:	9902      	ldr	r1, [sp, #8]
    f6d2:	1d1a      	adds	r2, r3, #4
    f6d4:	600a      	str	r2, [r1, #0]
    f6d6:	681b      	ldr	r3, [r3, #0]
    f6d8:	8018      	strh	r0, [r3, #0]
    f6da:	68e3      	ldr	r3, [r4, #12]
    f6dc:	3301      	adds	r3, #1
    f6de:	60e3      	str	r3, [r4, #12]
    f6e0:	2000      	movs	r0, #0
    f6e2:	9b01      	ldr	r3, [sp, #4]
    f6e4:	1aed      	subs	r5, r5, r3
    f6e6:	6923      	ldr	r3, [r4, #16]
    f6e8:	19ef      	adds	r7, r5, r7
    f6ea:	19df      	adds	r7, r3, r7
    f6ec:	6127      	str	r7, [r4, #16]
    f6ee:	b00d      	add	sp, #52	; 0x34
    f6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f6f2:	46c0      	nop			; (mov r8, r8)
    f6f4:	000112e4 	.word	0x000112e4
    f6f8:	0000cb75 	.word	0x0000cb75
    f6fc:	0000ef69 	.word	0x0000ef69
    f700:	fffffaff 	.word	0xfffffaff
    f704:	000112f0 	.word	0x000112f0
    f708:	fffff6ff 	.word	0xfffff6ff

0000f70c <_read_r>:
    f70c:	b570      	push	{r4, r5, r6, lr}
    f70e:	0005      	movs	r5, r0
    f710:	0008      	movs	r0, r1
    f712:	0011      	movs	r1, r2
    f714:	2200      	movs	r2, #0
    f716:	4c06      	ldr	r4, [pc, #24]	; (f730 <_read_r+0x24>)
    f718:	6022      	str	r2, [r4, #0]
    f71a:	001a      	movs	r2, r3
    f71c:	f000 f8aa 	bl	f874 <_read>
    f720:	1c43      	adds	r3, r0, #1
    f722:	d103      	bne.n	f72c <_read_r+0x20>
    f724:	6823      	ldr	r3, [r4, #0]
    f726:	2b00      	cmp	r3, #0
    f728:	d000      	beq.n	f72c <_read_r+0x20>
    f72a:	602b      	str	r3, [r5, #0]
    f72c:	bd70      	pop	{r4, r5, r6, pc}
    f72e:	46c0      	nop			; (mov r8, r8)
    f730:	20001e60 	.word	0x20001e60

0000f734 <__sccl>:
    f734:	b570      	push	{r4, r5, r6, lr}
    f736:	780b      	ldrb	r3, [r1, #0]
    f738:	2b5e      	cmp	r3, #94	; 0x5e
    f73a:	d00d      	beq.n	f758 <__sccl+0x24>
    f73c:	1c4a      	adds	r2, r1, #1
    f73e:	2100      	movs	r1, #0
    f740:	0004      	movs	r4, r0
    f742:	1c45      	adds	r5, r0, #1
    f744:	35ff      	adds	r5, #255	; 0xff
    f746:	7021      	strb	r1, [r4, #0]
    f748:	3401      	adds	r4, #1
    f74a:	42a5      	cmp	r5, r4
    f74c:	d1fb      	bne.n	f746 <__sccl+0x12>
    f74e:	2b00      	cmp	r3, #0
    f750:	d106      	bne.n	f760 <__sccl+0x2c>
    f752:	3a01      	subs	r2, #1
    f754:	0010      	movs	r0, r2
    f756:	bd70      	pop	{r4, r5, r6, pc}
    f758:	1c8a      	adds	r2, r1, #2
    f75a:	784b      	ldrb	r3, [r1, #1]
    f75c:	2101      	movs	r1, #1
    f75e:	e7ef      	b.n	f740 <__sccl+0xc>
    f760:	2401      	movs	r4, #1
    f762:	404c      	eors	r4, r1
    f764:	0011      	movs	r1, r2
    f766:	54c4      	strb	r4, [r0, r3]
    f768:	780d      	ldrb	r5, [r1, #0]
    f76a:	1c4a      	adds	r2, r1, #1
    f76c:	2d2d      	cmp	r5, #45	; 0x2d
    f76e:	d007      	beq.n	f780 <__sccl+0x4c>
    f770:	2d5d      	cmp	r5, #93	; 0x5d
    f772:	d0ef      	beq.n	f754 <__sccl+0x20>
    f774:	2d00      	cmp	r5, #0
    f776:	d101      	bne.n	f77c <__sccl+0x48>
    f778:	000a      	movs	r2, r1
    f77a:	e7eb      	b.n	f754 <__sccl+0x20>
    f77c:	002b      	movs	r3, r5
    f77e:	e7f1      	b.n	f764 <__sccl+0x30>
    f780:	784e      	ldrb	r6, [r1, #1]
    f782:	2e5d      	cmp	r6, #93	; 0x5d
    f784:	d0fa      	beq.n	f77c <__sccl+0x48>
    f786:	42b3      	cmp	r3, r6
    f788:	dcf8      	bgt.n	f77c <__sccl+0x48>
    f78a:	3102      	adds	r1, #2
    f78c:	3301      	adds	r3, #1
    f78e:	54c4      	strb	r4, [r0, r3]
    f790:	429e      	cmp	r6, r3
    f792:	dcfb      	bgt.n	f78c <__sccl+0x58>
    f794:	e7e8      	b.n	f768 <__sccl+0x34>
	...

0000f798 <__submore>:
    f798:	000b      	movs	r3, r1
    f79a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f79c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    f79e:	3344      	adds	r3, #68	; 0x44
    f7a0:	000c      	movs	r4, r1
    f7a2:	429d      	cmp	r5, r3
    f7a4:	d11c      	bne.n	f7e0 <__submore+0x48>
    f7a6:	2680      	movs	r6, #128	; 0x80
    f7a8:	00f6      	lsls	r6, r6, #3
    f7aa:	0031      	movs	r1, r6
    f7ac:	f7fc fab4 	bl	bd18 <_malloc_r>
    f7b0:	2800      	cmp	r0, #0
    f7b2:	d102      	bne.n	f7ba <__submore+0x22>
    f7b4:	2001      	movs	r0, #1
    f7b6:	4240      	negs	r0, r0
    f7b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f7ba:	0023      	movs	r3, r4
    f7bc:	6360      	str	r0, [r4, #52]	; 0x34
    f7be:	63a6      	str	r6, [r4, #56]	; 0x38
    f7c0:	3346      	adds	r3, #70	; 0x46
    f7c2:	781a      	ldrb	r2, [r3, #0]
    f7c4:	4b10      	ldr	r3, [pc, #64]	; (f808 <__submore+0x70>)
    f7c6:	54c2      	strb	r2, [r0, r3]
    f7c8:	0023      	movs	r3, r4
    f7ca:	3345      	adds	r3, #69	; 0x45
    f7cc:	781a      	ldrb	r2, [r3, #0]
    f7ce:	4b0f      	ldr	r3, [pc, #60]	; (f80c <__submore+0x74>)
    f7d0:	54c2      	strb	r2, [r0, r3]
    f7d2:	782a      	ldrb	r2, [r5, #0]
    f7d4:	4b0e      	ldr	r3, [pc, #56]	; (f810 <__submore+0x78>)
    f7d6:	54c2      	strb	r2, [r0, r3]
    f7d8:	18c0      	adds	r0, r0, r3
    f7da:	6020      	str	r0, [r4, #0]
    f7dc:	2000      	movs	r0, #0
    f7de:	e7eb      	b.n	f7b8 <__submore+0x20>
    f7e0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    f7e2:	0029      	movs	r1, r5
    f7e4:	0073      	lsls	r3, r6, #1
    f7e6:	001a      	movs	r2, r3
    f7e8:	9301      	str	r3, [sp, #4]
    f7ea:	f7ff f8e9 	bl	e9c0 <_realloc_r>
    f7ee:	1e05      	subs	r5, r0, #0
    f7f0:	d0e0      	beq.n	f7b4 <__submore+0x1c>
    f7f2:	1987      	adds	r7, r0, r6
    f7f4:	0001      	movs	r1, r0
    f7f6:	0032      	movs	r2, r6
    f7f8:	0038      	movs	r0, r7
    f7fa:	f7fb ffca 	bl	b792 <memcpy>
    f7fe:	9b01      	ldr	r3, [sp, #4]
    f800:	6027      	str	r7, [r4, #0]
    f802:	6365      	str	r5, [r4, #52]	; 0x34
    f804:	63a3      	str	r3, [r4, #56]	; 0x38
    f806:	e7e9      	b.n	f7dc <__submore+0x44>
    f808:	000003ff 	.word	0x000003ff
    f80c:	000003fe 	.word	0x000003fe
    f810:	000003fd 	.word	0x000003fd

0000f814 <_close>:
    f814:	2258      	movs	r2, #88	; 0x58
    f816:	2001      	movs	r0, #1
    f818:	4b01      	ldr	r3, [pc, #4]	; (f820 <_close+0xc>)
    f81a:	4240      	negs	r0, r0
    f81c:	601a      	str	r2, [r3, #0]
    f81e:	4770      	bx	lr
    f820:	20001e60 	.word	0x20001e60

0000f824 <_fstat>:
    f824:	2258      	movs	r2, #88	; 0x58
    f826:	2001      	movs	r0, #1
    f828:	4b01      	ldr	r3, [pc, #4]	; (f830 <_fstat+0xc>)
    f82a:	4240      	negs	r0, r0
    f82c:	601a      	str	r2, [r3, #0]
    f82e:	4770      	bx	lr
    f830:	20001e60 	.word	0x20001e60

0000f834 <_getpid>:
    f834:	2258      	movs	r2, #88	; 0x58
    f836:	2001      	movs	r0, #1
    f838:	4b01      	ldr	r3, [pc, #4]	; (f840 <_getpid+0xc>)
    f83a:	4240      	negs	r0, r0
    f83c:	601a      	str	r2, [r3, #0]
    f83e:	4770      	bx	lr
    f840:	20001e60 	.word	0x20001e60

0000f844 <_isatty>:
    f844:	2258      	movs	r2, #88	; 0x58
    f846:	4b02      	ldr	r3, [pc, #8]	; (f850 <_isatty+0xc>)
    f848:	2000      	movs	r0, #0
    f84a:	601a      	str	r2, [r3, #0]
    f84c:	4770      	bx	lr
    f84e:	46c0      	nop			; (mov r8, r8)
    f850:	20001e60 	.word	0x20001e60

0000f854 <_kill>:
    f854:	2258      	movs	r2, #88	; 0x58
    f856:	2001      	movs	r0, #1
    f858:	4b01      	ldr	r3, [pc, #4]	; (f860 <_kill+0xc>)
    f85a:	4240      	negs	r0, r0
    f85c:	601a      	str	r2, [r3, #0]
    f85e:	4770      	bx	lr
    f860:	20001e60 	.word	0x20001e60

0000f864 <_lseek>:
    f864:	2258      	movs	r2, #88	; 0x58
    f866:	2001      	movs	r0, #1
    f868:	4b01      	ldr	r3, [pc, #4]	; (f870 <_lseek+0xc>)
    f86a:	4240      	negs	r0, r0
    f86c:	601a      	str	r2, [r3, #0]
    f86e:	4770      	bx	lr
    f870:	20001e60 	.word	0x20001e60

0000f874 <_read>:
    f874:	2258      	movs	r2, #88	; 0x58
    f876:	2001      	movs	r0, #1
    f878:	4b01      	ldr	r3, [pc, #4]	; (f880 <_read+0xc>)
    f87a:	4240      	negs	r0, r0
    f87c:	601a      	str	r2, [r3, #0]
    f87e:	4770      	bx	lr
    f880:	20001e60 	.word	0x20001e60

0000f884 <_sbrk>:
    f884:	4a04      	ldr	r2, [pc, #16]	; (f898 <_sbrk+0x14>)
    f886:	6813      	ldr	r3, [r2, #0]
    f888:	2b00      	cmp	r3, #0
    f88a:	d003      	beq.n	f894 <_sbrk+0x10>
    f88c:	1818      	adds	r0, r3, r0
    f88e:	6010      	str	r0, [r2, #0]
    f890:	0018      	movs	r0, r3
    f892:	4770      	bx	lr
    f894:	4b01      	ldr	r3, [pc, #4]	; (f89c <_sbrk+0x18>)
    f896:	e7f9      	b.n	f88c <_sbrk+0x8>
    f898:	20001e5c 	.word	0x20001e5c
    f89c:	20001e64 	.word	0x20001e64

0000f8a0 <_write>:
    f8a0:	2258      	movs	r2, #88	; 0x58
    f8a2:	2001      	movs	r0, #1
    f8a4:	4b01      	ldr	r3, [pc, #4]	; (f8ac <_write+0xc>)
    f8a6:	4240      	negs	r0, r0
    f8a8:	601a      	str	r2, [r3, #0]
    f8aa:	4770      	bx	lr
    f8ac:	20001e60 	.word	0x20001e60

0000f8b0 <_exit>:
    f8b0:	e7fe      	b.n	f8b0 <_exit>
    f8b2:	46c0      	nop			; (mov r8, r8)

0000f8b4 <_init>:
    f8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8b6:	46c0      	nop			; (mov r8, r8)
    f8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f8ba:	bc08      	pop	{r3}
    f8bc:	469e      	mov	lr, r3
    f8be:	4770      	bx	lr

0000f8c0 <_fini>:
    f8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8c2:	46c0      	nop			; (mov r8, r8)
    f8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f8c6:	bc08      	pop	{r3}
    f8c8:	469e      	mov	lr, r3
    f8ca:	4770      	bx	lr
    f8cc:	706d6574 	.word	0x706d6574
    f8d0:	00          	.byte	0x00
    f8d1:	63          	.byte	0x63
    f8d2:	6766      	.short	0x6766
    f8d4:	6300433d 	.word	0x6300433d
    f8d8:	463d6766 	.word	0x463d6766
    f8dc:	00          	.byte	0x00
    f8dd:	44          	.byte	0x44
    f8de:	5448      	.short	0x5448
    f8e0:	53203131 	.word	0x53203131
    f8e4:	6f736e65 	.word	0x6f736e65
    f8e8:	6e492072 	.word	0x6e492072
    f8ec:	61697469 	.word	0x61697469
    f8f0:	657a696c 	.word	0x657a696c
    f8f4:	2d002164 	.word	0x2d002164
    f8f8:	2d2d2d2d 	.word	0x2d2d2d2d
    f8fc:	2d2d2d2d 	.word	0x2d2d2d2d
    f900:	2d2d2d2d 	.word	0x2d2d2d2d
    f904:	2d2d2d2d 	.word	0x2d2d2d2d
    f908:	2d2d2d2d 	.word	0x2d2d2d2d
    f90c:	2d2d2d2d 	.word	0x2d2d2d2d
    f910:	2d2d2d2d 	.word	0x2d2d2d2d
    f914:	2d2d2d2d 	.word	0x2d2d2d2d
    f918:	002d2d2d 	.word	0x002d2d2d
    f91c:	736e6553 	.word	0x736e6553
    f920:	203a726f 	.word	0x203a726f
    f924:	20202020 	.word	0x20202020
    f928:	44002020 	.word	0x44002020
    f92c:	65766972 	.word	0x65766972
    f930:	65562072 	.word	0x65562072
    f934:	20203a72 	.word	0x20203a72
    f938:	6e550020 	.word	0x6e550020
    f93c:	65757169 	.word	0x65757169
    f940:	3a444920 	.word	0x3a444920
    f944:	20202020 	.word	0x20202020
    f948:	78614d00 	.word	0x78614d00
    f94c:	6c615620 	.word	0x6c615620
    f950:	203a6575 	.word	0x203a6575
    f954:	00202020 	.word	0x00202020
    f958:	4d004320 	.word	0x4d004320
    f95c:	56206e69 	.word	0x56206e69
    f960:	65756c61 	.word	0x65756c61
    f964:	2020203a 	.word	0x2020203a
    f968:	65520020 	.word	0x65520020
    f96c:	756c6f73 	.word	0x756c6f73
    f970:	6e6f6974 	.word	0x6e6f6974
    f974:	2020203a 	.word	0x2020203a
    f978:	00          	.byte	0x00
    f979:	25          	.byte	0x25
    f97a:	322e      	.short	0x322e
    f97c:	25002c66 	.word	0x25002c66
    f980:	54002c64 	.word	0x54002c64
    f984:	20706d65 	.word	0x20706d65
    f988:	6c796150 	.word	0x6c796150
    f98c:	3a64616f 	.word	0x3a64616f
    f990:	00732520 	.word	0x00732520
    f994:	2e303231 	.word	0x2e303231
    f998:	002c3030 	.word	0x002c3030
    f99c:	33322e30 	.word	0x33322e30
    f9a0:	0000002c 	.word	0x0000002c

0000f9a4 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    f9ac:	00002c2b 00002b0d 00002a69              +,...+..i*..

0000f9b8 <_ZL14STRING_PRODUCT>:
    f9b8:	20425355 42204f49 6472616f 03040000              USB IO Board..

0000f9c6 <_ZL15STRING_LANGUAGE>:
    f9c6:	04090304                                ....

0000f9ca <_ZL19STRING_MANUFACTURER>:
    f9ca:	7474614d 54726961 20686365 00434c4c     MattairTech LLC.

0000f9da <_ZL21USB_DeviceDescriptorC>:
    f9da:	01100112 40000002 055716d0 02010100     .......@..W.....
    f9ea:	48440103 00313154 32544844 48440031     ..DHT11.DHT21.DH
    f9fa:	00323254 3f544844 00000000                       T22.DHT?..

0000fa04 <_ZTVN11DHT_Unified11TemperatureE>:
	...
    fa0c:	00003dcd 00003e3d 00003dc9 00003dcf     .=..=>...=...=..
    fa1c:	00003ee1                                .>..

0000fa20 <_ZTVN11DHT_Unified8HumidityE>:
	...
    fa28:	00003dcb 00003e31 00003dc9 00003e01     .=..1>...=...>..
    fa38:	00003f59 656d6954 3025203a 253a6432     Y?..Time: %02d:%
    fa48:	3a643230 64323025 4400203a 3a657461     02d:%02d: .Date:
    fa58:	32302520 30253a64 253a6432 20643230      %02d:%02d:%02d 
    fa68:	6e6f6d5b 7961643a 6165793a 54005d72     [mon:day:year].T
    fa78:	3a656d69 32302520 30253a64 253a6432     ime: %02d:%02d:%
    fa88:	20643230 3a72685b 3a6e696d 5d636573     02d [hr:min:sec]
    fa98:	3d3d3d00 3d3d3d3d 3d3d3d3d 3d3d3d3d     .===============
    faa8:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    fab8:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    fac8:	3d3d3d3d 003d3d3d 78323025 7325002c     =======.%02x,.%s
    fad8:	2520003a 00783230 524f4243 79615020     :. %02x.CBOR Pay
    fae8:	64616f6c 6d754420 61003a70 69756472     load Dump:.ardui
    faf8:	49006f6e 6e6f7274 66655220 6e657265     no.Itron Referen
    fb08:	43206563 2050416f 76726553 203a7265     ce CoAP Server: 
    fb18:	342e3100 4900362e 6e6f7274 50415320     .1.4.6.Itron SAP
    fb28:	00203a49 2e302e31 65530030 37312070     I: .1.0.0.Sep 17
    fb38:	31303220 39300039 3a30323a 42003833      2019.09:20:38.B
    fb48:	646c6975 6d695420 25203a65 44202073     uild Time: %s  D
    fb58:	3a657461 00732520 00676663 736e6573     ate: %s.cfg.sens
    fb68:	72726300 756f7365 68656372 6c646e61     .crresourcehandl
    fb78:	203a7265 20544547 74617473 203a7375     er: GET status: 
    fb88:	6c206425 203a6e65 62206425 73657479     %d len: %d bytes
    fb98:	74655300 73624f20 65767265 64492072     .Set Observer Id
    fba8:	6425203a 67655200 65747369 20646572     : %d.Registered 
    fbb8:	736e6573 203a726f 53007325 20495041     sensor: %s.SAPI 
    fbc8:	6573626f 20657672 20726f66 736e6573     observe for sens
    fbd8:	203a726f 00007325                       or: %s..

0000fbe0 <g_APinDescription>:
    fbe0:	09190801 0000703f 80080208 09190901     ....?p..........
    fbf0:	0000703f 80090309 08190200 0000006f     ?p..........o...
    fc00:	80120080 08190300 000000af 80120180     ................
    fc10:	08190400 000000af 80120480 08190500     ................
    fc20:	0000006f 80120580 08190600 0000002f     o.........../...
    fc30:	80120680 08190700 0000002f 80120780     ......../.......
    fc40:	08190800 0000402f 80121080 08190900     ..../@..........
    fc50:	0000402f 80121180 08190a00 0000402f     /@........../@..
    fc60:	80121280 08190b00 0000403f 800b1380     ........?@......
    fc70:	08190c00 0000701f 800c1620 08190d00     .....p.. .......
    fc80:	0000701f 800d1621 08190a01 0000301f     .p..!........0..
    fc90:	800a1618 08190b01 0000300f 80121619     .........0......
    fca0:	08191000 0000401f 80001680 08191100     .....@..........
    fcb0:	0000401f 80011680 09191200 0000401d     .@...........@..
    fcc0:	80021680 09191300 0000401f 80031680     .........@......
    fcd0:	0a191400 0000701f 80041602 0a191500     .....p..........
    fce0:	0000701f 80051603 0b191600 0000700f     .p...........p..
    fcf0:	80121600 0b191700 0000700f 80121601     .........p......
    fd00:	08191800 0000800f 80121680 08191900     ................
    fd10:	0000800f 80121680 001b0004 00000000     ................
    fd20:	80121680 08191b00 0000000f 80121680     ................
    fd30:	001b0004 00000000 80121680 001b0004     ................
    fd40:	00000000 80121680 08191e00 0000300f     .............0..
    fd50:	80121610 08191f00 0000300f 80121611     .........0......
    fd60:	08191601 0000001d 80061680 08191701     ................
    fd70:	0000001f 80071680 08190201 0000002f     ............/...
    fd80:	80120a80 08190301 0000002f 80120b80     ......../.......
    fd90:	00000a0d                                ....

0000fd94 <_ZTV4Uart>:
	...
    fd9c:	00004f31 00004a79 00004e03 00004deb     1O..yJ...N...M..
    fdac:	00004de1 00004e0d 00004e41 00004db5     .M...N..AN...M..
    fdbc:	00005011 00004dc5 00004db1              .P...M...M..

0000fdc8 <_ZTV7Serial_>:
	...
    fdd0:	000050f1 0000511d 000050ed 00005111     .P...Q...P...Q..
    fde0:	00005105 00005155 00005139 6b6f6f4c     .Q..UQ..9Q..Look
    fdf0:	20676e69 63207075 626c6c61 206b6361     ing up callback 
    fe00:	20726f66 3a44494d 25783020 41000a78     for MID: 0x%x..A
    fe10:	6e696464 61632067 61626c6c 66206b63     dding callback f
    fe20:	4d20726f 203a4449 78257830 6e49000a     or MID: 0x%x..In
    fe30:	66667573 65696369 6220746e 65666675     sufficient buffe
    fe40:	70732072 20656361 61206f74 6f206464     r space to add o
    fe50:	6f697470 6f000a6e 6c6f3e2d 203d3c20     ption..o->ol <= 
    fe60:	657a6973 7528666f 33746e69 29745f32     sizeof(uint32_t)
    fe70:	2f2e2e00 2f637273 7262696c 65697261     .../src/librarie
    fe80:	73732f73 635f696e 5f70616f 76726573     s/ssni_coap_serv
    fe90:	632f7265 6d70616f 632e6773 43007070     er/coapmsg.cpp.C
    fea0:	646c756f 2074276e 20646461 6573626f     ouldn't add obse
    feb0:	20657672 6974706f 43006e6f 2050416f     rve option.CoAP 
    fec0:	20514552 6f636564 6f006564 6f697470     REQ decode.optio
    fed0:	7974206e 203a6570 6c207525 203a6e65     n type: %u len: 
    fee0:	43007525 646c756f 2074276e 65766173     %u.Couldn't save
    fef0:	74706f20 206e6f69 61746164 686e7500      option data.unh
    ff00:	6c646e61 63206465 69746972 206c6163     andled critical 
    ff10:	6974706f 25206e6f 6d000a64 69737369     option %d..missi
    ff20:	6f20676e 6f697470 6573206e 61726170     ng option separa
    ff30:	20726f74 43004646 646c756f 2074276e     tor FF.Couldn't 
    ff40:	20646461 6573624f 20657672 6974706f     add Observe opti
    ff50:	74206e6f 736d206f 6f430067 6e646c75     on to msg.Couldn
    ff60:	61207427 63206464 65746e6f 6620746e     't add content f
    ff70:	616d726f 706f2074 6e6f6974 206f7420     ormat option to 
    ff80:	0067736d 6c756f43 74276e64 64646120     msg.Couldn't add
    ff90:	78614d20 6567412d 74706f20 206e6f69      Max-Age option 
    ffa0:	6d206f74 69006773 3c207864 4f43203d     to msg.idx <= CO
    ffb0:	4f5f5041 485f5342 535f5244 6552005a     AP_OBS_HDR_SZ.Re
    ffc0:	6e6f7073 4e006573 43004e4f 52004e4f     sponse.NON.CON.R
    ffd0:	41005453 50004b43 0054534f 00544547     ST.ACK.POST.GET.
    ffe0:	00545550 54504d45 45440059 4554454c     PUT.EMPTY.DELETE
    fff0:	72655300 20726576 6f727245 75530072     .Server Error.Su
   10000:	73656363 6c430073 746e6569 72724520     ccess.Client Err
   10010:	5200726f 522f5145 54205053 3a657079     or.REQ/RSP Type:
   10020:	00732520 2f514552 204b4341 65646f43      %s.REQ/ACK Code
   10030:	7325203a 50535200 646f4320 25203a65     : %s.RSP Code: %
   10040:	72550073 61502d69 512d6874 79726575     s.Uri-Path-Query
   10050:	7325203a 6e697500                                : %s.

00010055 <_ZZ13co_uint32_h2nPK5optlvE19__PRETTY_FUNCTION__>:
   10055:	746e6975 745f3233 5f6f6320 746e6975     uint32_t co_uint
   10065:	685f3233 63286e32 74736e6f 74706f20     32_h2n(const opt
   10075:	292a766c 6e697500                                lv*).

0001007a <_ZZ13co_uint32_n2hPK5optlvE19__PRETTY_FUNCTION__>:
   1007a:	746e6975 745f3233 5f6f6320 746e6975     uint32_t co_uint
   1008a:	6e5f3233 63286832 74736e6f 74706f20     32_n2h(const opt
   1009a:	292a766c 72726500                                lv*).

0001009f <_ZZ17coap_msg_responseP12coap_msg_ctxE19__PRETTY_FUNCTION__>:
   1009f:	6f727265 20745f72 70616f63 67736d5f     error_t coap_msg
   100af:	7365725f 736e6f70 6f632865 6d5f7061     _response(coap_m
   100bf:	635f6773 292a7874 746f4e00 64646120     sg_ctx*).Not add
   100cf:	20676e69 2073626f 72746e65 6f662079     ing obs entry fo
   100df:	73252072 6973202c 6f743a64 206e656b     r %s, sid:token 
   100ef:	20746f6e 71696e75 4e006575 6120746f     not unique.Not a
   100ff:	6e696464 626f2067 6e652073 20797274     dding obs entry 
   1010f:	20726f66 202c7325 6c707564 74616369     for %s, duplicat
   1011f:	64002e65 62617369 6f5f656c 203a7362     e..disable_obs: 
   1012f:	722d6544 73696765 65726574 52552064     De-registered UR
   1013f:	25203a49 706f0073 706f0074 6f3e2d74     I: %s.opt.opt->o
   1014f:	69440076 74276e64 6e696620 706f2064     v.Didn't find op
   1015f:	6e6f6974 20642520 64206f74 74656c65     tion %d to delet
   1016f:	68002e65 2e2e0064 6372732f 62696c2f     e..hd.../src/lib
   1017f:	69726172 732f7365 5f696e73 70616f63     raries/ssni_coap
   1018f:	7265735f 2f726576 70616f63 2e74706f     _server/coapopt.
   1019f:	00707063                                cpp.

000101a3 <_ZZ12copt_add_optP5sl_coP5optlvE19__PRETTY_FUNCTION__>:
   101a3:	6f727265 20745f72 74706f63 6464615f     error_t copt_add
   101b3:	74706f5f 5f6c7328 2c2a6f63 74706f20     _opt(sl_co*, opt
   101c3:	292a766c 696f7600                                lv*).

000101c8 <_ZZ12copt_del_allP5sl_coE19__PRETTY_FUNCTION__>:
   101c8:	64696f76 706f6320 65645f74 6c615f6c     void copt_del_al
   101d8:	6c73286c 2a6f635f 72650029                       l(sl_co*).

000101e2 <_ZZ17copt_del_opt_typeP5sl_cotE19__PRETTY_FUNCTION__>:
   101e2:	6f727265 20745f72 74706f63 6c65645f     error_t copt_del
   101f2:	74706f5f 7079745f 6c732865 2a6f635f     _opt_type(sl_co*
   10202:	6975202c 3631746e 0029745f              , uint16_t).

0001020e <_ZZ22copt_get_next_opt_typePK5sl_cotPPvE19__PRETTY_FUNCTION__>:
   1020e:	6c74706f 63202a76 5f74706f 5f746567     optlv* copt_get_
   1021e:	7478656e 74706f5f 7079745f 6f632865     next_opt_type(co
   1022e:	2074736e 635f6c73 202c2a6f 746e6975     nst sl_co*, uint
   1023e:	745f3631 6f76202c 2a2a6469 6f760029              16_t, void**).

0001024c <_ZZ9copt_initP5sl_coE19__PRETTY_FUNCTION__>:
   1024c:	64696f76 706f6320 6e695f74 73287469     void copt_init(s
   1025c:	6f635f6c 6400292a 626f5f6f 76726573     l_co*).do_observ
   1026c:	65203a65 68636f70 20782520 20697275     e: epoch %x uri 
   1027c:	64007325 626f5f6f 76726573 46203a65     %s.do_observe: F
   1028c:	20656572 3a6d6152 00642520 70616f63     ree Ram: %d.coap
   1029c:	73626f5f 65767265 7073725f 6550203a     _observe_rsp: Pe
   102ac:	6e69646e 65722067 6e6f7073 69206573     nding response i
   102bc:	7270206e 6572676f 2d207373 696b7320     n progress - ski
   102cc:	6e697070 656e2067 6f6e2077 69666974     pping new notifi
   102dc:	69746163 67006e6f 6f5f7465 625f7362     cation.get_obs_b
   102ec:	72755f79 61662069 64656c69 7325203a     y_uri failed: %s
   102fc:	756f4300 276e646c 64612074 624f2064     .Couldn't add Ob
   1030c:	76726573 706f2065 6e6f6974 756f4300     serve option.Cou
   1031c:	276e646c 64612074 614d2064 67412d78     ldn't add Max-Ag
   1032c:	706f2065 6e6f6974 616f6300 626f5f70     e option.coap_ob
   1033c:	76726573 73725f65 45203a70 726f7272     serve_rsp: Error
   1034c:	65726320 6e697461 65722067 6e6f7073      creating respon
   1035c:	25006573 64253a73 656c4320 64657261     se.%s:%d Cleared
   1036c:	6e657020 676e6964 7073725f 616f6300      pending_rsp.coa
   1037c:	626f5f70 76726573 73725f65 66203a70     p_observe_rsp: f
   1038c:	20656572 70736572 65736e6f 75626d20     ree response mbu
   1039c:	6e6f2066 72726520 2f00726f 75647261     f on error./ardu
   103ac:	2f6f6e69 44007325 65722d65 74736967     ino/%s.De-regist
   103bc:	4f207265 72657362 203a6576 63006425              er Observe: %d.

000103cb <_ZZ16coap_observe_rsphE12__FUNCTION__>:
   103cb:	70616f63 73626f5f 65767265 7073725f     coap_observe_rsp
   103db:	74697400 223d656c 6f666e49 74633b22     .title="Info";ct
   103eb:	2e00303d 6c6c6577 6f6e6b2d 69006e77     =0..well-known.i
   103fb:	73223d66 3b227379 6c746974 53223d65     f="sys";title="S
   1040b:	65747379 633b226d 32343d74 7665723b     ystem";ct=42;rev
   1041b:	003b313d 00737973 223d6669 75647261     =1;.sys.if="ardu
   1042b:	226f6e69 7469743b 223d656c 75647241     ino";title="Ardu
   1043b:	206f6e69 736e6553 2273726f 3d74633b     ino Sensors";ct=
   1044b:	003b3234 65726f63 002f3c00 656d6974     42;.core.</.time
   1045b:	6f704500 66206863 4720726f 6f205445     .Epoch for GET o
   1046b:	79732066 69742073 203a656d 78383025     f sys time: %08x
   1047b:	54555000 79732f20 69742f73 5020656d     .PUT /sys/time P
   1048b:	6f6c7961 53006461 69747465 5220676e     ayload.Setting R
   1049b:	74204354 7065206f 3a68636f 38302520     TC to epoch: %08
   104ab:	74730078 00737461 3d646f6d 70616f63     x.stats.mod=coap
   104bb:	646f6d00 7277703d 54454700 74732820     .mod=pwr.GET (st
   104cb:	73757461 29642520 61657220 64252064     atus %d) read %d
   104db:	74796220 002e7365 20544553 61747328      bytes..SET (sta
   104eb:	20737574 2e296425 6e655300 676e6964     tus %d)..Sending
   104fb:	73657220 65207465 746e6576 206f7420      reset event to 
   1050b:	63696e6d ff035000                                mnic.

00010510 <_ZL6rbtput>:
   10510:	ffff0350 737973b3 736e7304 76654672     P....sys.snsrFev
   10520:	7462723d 70616f63 725f735f 203a6e75     =rbtcoap_s_run: 
   10530:	65657266 20676e69 70737261 75626d20     freeing arsp mbu
   10540:	6f630066 735f7061 6e75725f 7266203a     f.coap_s_run: fr
   10550:	6e696565 70612067 6d206470 00667562     eeing appd mbuf.
   10560:	70616f63 725f735f 203a6e75 65657266     coap_s_run: free
   10570:	6d615220 6425203a 4c444800 6e692043      Ram: %d.HDLC in
   10580:	61697469 617a696c 6e6f6974 69616620     itialization fai
   10590:	2164656c 4b434100 726f6620 64696d20     led!.ACK for mid
   105a0:	7830203a 72207825 69656365 2c646576     : 0x%x received,
   105b0:	6f6f6c20 2070756b 75746572 64656e72      lookup returned
   105c0:	00642520 6c696146 74206465 6e65206f      %d.Failed to en
   105d0:	656c6261 626f2064 76726573 6f662065     abled observe fo
   105e0:	52552072 25203a49 6e450073 656c6261     r URI: %s.Enable
   105f0:	626f2064 76726573 6f662065 52552072     d observe for UR
   10600:	25203a49 69440073 6c626173 6f206465     I: %s.Disabled o
   10610:	72657362 66206576 5520726f 25204952     bserve for URI %
   10620:	72450073 20726f72 2067736d 3a707372     s.Error msg rsp:
   10630:	65726620 676e6965 75626d20 6f4e0066      freeing mbuf.No
   10640:	70737220 7266203a 6e696565 626d2067      rsp: freeing mb
   10650:	50006675 65737261 72726520 203a726f     uf.Parse error: 
   10660:	65657266 20676e69 6675626d 72724500     freeing mbuf.Err
   10670:	203a726f 682f6372 656c3e2d 25203a6e     or: rc/h->len: %
   10680:	64252f64 6363202c 646f632e 25203a65     d/%d, cc.code: %
   10690:	6f630064 735f7061 6f72705f 46203a63     d.coap_s_proc: F
   106a0:	20656572 6d206363 00667562 6f6c6c41     ree cc mbuf.Allo
   106b0:	65746163 75626d20 69772066 73206874     cate mbuf with s
   106c0:	3a657a69 00642520 2e2e006d 6372732f     ize: %d.m.../src
   106d0:	62696c2f 69726172 732f7365 5f696e73     /libraries/ssni_
   106e0:	70616f63 7265735f 2f726576 66756268     coap_server/hbuf
   106f0:	7070632e 75626d00                                .cpp.

000106f5 <_ZZ5m_getvE19__PRETTY_FUNCTION__>:
   106f5:	6675626d 5f6d202a 28746567 68540029     mbuf* m_get().Th
   10705:	616d2065 61702078 616f6c79 69732064     e max payload si
   10715:	7320657a 69636570 64656966 20736920     ze specified is 
   10725:	206f6f74 6772616c 25203a65 79622064     too large: %d by
   10735:	2e736574 65685420 78616d20 6d756d69     tes. The maximum
   10745:	6c6c6120 6465776f 20736920 62206425      allowed is %d b
   10755:	73657479 73680020 65722e73 2e007663     ytes .hss.recv..
   10765:	72732f2e 696c2f63 72617262 2f736569     ./src/libraries/
   10775:	696e7373 616f635f 65735f70 72657672     ssni_coap_server
   10785:	6c64682f 632e7363 68007070 73636c64     /hdlcs.cpp.hdlcs
   10795:	6165725f 20292864 7825202d 73657200     _read() - %x.res
   107a5:	646e6f70 206f7420 77205252 20687469     pond to RR with 
   107b5:	52005252 6e657365 676e6964 61726620     RR.Resending fra
   107c5:	5000656d 65636f72 69207373 6d6f636e     me.Process incom
   107d5:	20676e69 6c727463 32302520 6e692078     ing ctrl %02x in
   107e5:	61747320 25206574 65720064 6e6f7073      state %d.respon
   107f5:	72206573 20646578 70207461 616d6972     se rxed at prima
   10805:	72007972 65757165 72207473 27766365     ry.request recv'
   10815:	6e692064 73696420 6e6e6f63 65746365     d in disconnecte
   10825:	6f6d2064 48006564 5f434c44 4d524e53     d mode.HDLC_SNRM
   10835:	4c444800 00495f43 78656e55 74636570     .HDLC_I.Unexpect
   10845:	73206465 756e7165 284e206d 3d202953     ed seqnum N(S) =
   10855:	20642520 52285620 203d2029 52006425      %d  V(R) = %d.R
   10865:	20766365 72662049 00656d61 61746164     ecv I frame.data
   10875:	20424320 20746f6e 70707573 6574726f      CB not supporte
   10885:	44480064 525f434c 63680052 3a726e2e     d.HDLC_RR.hc.nr:
   10895:	2c642520 73736820 3a73762e 00642520      %d, hss.vs: %d.
   108a5:	434c4448 5349445f 69640043 6e6f6373     HDLC_DISC.discon
   108b5:	7463656e 00676e69 6f727265 202d2072     necting.error - 
   108c5:	6d617266 65722065 7463656a 45006465     frame rejected.E
   108d5:	726f7272 75202d20 6f6e6b6e 73206e77     rror - unknown s
   108e5:	65746174 6425203a 6c646800 725f7363     tate: %d.hdlcs_r
   108f5:	29286e75 25202d20 6e650064 20726574     un() - %d.enter 
   10905:	6d726f6e 6d206c61 0065646f 4d524e53     normal mode.SNRM
   10915:	2041552d 70736572 65736e6f 20637220     -UA response rc 
   10925:	6d006425                                         %d.

00010928 <_ZZ10hdlcs_readvE19__PRETTY_FUNCTION__>:
   10928:	6675626d 6468202a 5f73636c 64616572     mbuf* hdlcs_read
   10938:	68002928                                         ().

0001093b <_ZZ9hdlcs_runvE12__FUNCTION__>:
   1093b:	636c6468 75725f73 6f76006e                       hdlcs_run.

00010945 <_ZZL13hdlcs_get_bufiE19__PRETTY_FUNCTION__>:
   10945:	64696f76 6c646820 675f7363 625f7465     void hdlcs_get_b
   10955:	69286675 0029746e 05148081 06000102     uf(int).........
   10965:	07000102 00000004 00040801 48010000     ...............H
   10975:	20434c44 646e6573 61726620 4500656d     DLC send frame.E
   10985:	726f7272 6468203a 735f636c 5f646e65     rror: hdlc_send_
   10995:	6d617266 20292865 20646964 20746f6e     frame() did not 
   109a5:	646e6573 20642520 65747962 73612073     send %d bytes as
   109b5:	71657220 65726975 66000a64 656d6172      required..frame
   109c5:	70797420 30203a65 00782578 64616572      type: 0x%x.read
   109d5:	65747942 20292873 6e756f63 25203a74     Bytes() count: %
   109e5:	68540064 41552065 72205452 69656365     d.The UART recei
   109f5:	62206576 65666675 61682072 766f2073     ve buffer has ov
   10a05:	6c667265 216e776f 20655700 64616572     erflown!.We read
   10a15:	20642520 65747962 6e612073 68742064      %d bytes and th
   10a25:	616d2065 73692078 20642520 65747962     e max is %d byte
   10a35:	4d002e73 69737369 4820676e 20434c44     s..Missing HDLC 
   10a45:	67616c66 00297328 78746368 5f75682e     flag(s).hctx.hu_
   10a55:	646e6570 203d3d20 68540032 72662065     pend == 2.The fr
   10a65:	20656d61 676e656c 64206874 6e73656f     ame length doesn
   10a75:	6d207427 68637461 65687420 6d756e20     't match the num
   10a85:	20726562 7220666f 69656365 20646576     ber of received 
   10a95:	65747962 72660073 5f656d61 3a6e656c     bytes.frame_len:
   10aa5:	78720020 6e656c5f 2020203a 69440020      .rx_len:    .Di
   10ab5:	72616373 72662064 20656d61 5243202d     scard frame - CR
   10ac5:	72652043 00726f72 63736944 20647261     C error.Discard 
   10ad5:	6d617266 202d2065 20646162 6f666e69     frame - bad info
   10ae5:	6e656c20 65685400 4c444820 61702043      len.The HDLC pa
   10af5:	616f6c79 73692064 6f6f7420 72616c20     yload is too lar
   10b05:	00216567 67206557 2520746f 79622064     ge!.We got %d by
   10b15:	20736574 20646e61 20656874 2078616d     tes and the max 
   10b25:	25207369 79622064 2e736574 72655a00     is %d bytes..Zer
   10b35:	6e69206f 656c6f66 4448006e 7220434c     o infolen.HDLC r
   10b45:	20766365 6d617266 61420065 64682064     ecv frame.Bad hd
   10b55:	202d2072 73756c66 61620068 6e692064     r - flush.bad in
   10b65:	656c6f66 202d206e 73756c66 00000068              folen - flush..

00010b74 <_ZL15xmodem_crctable>:
   10b74:	11890000 329b2312 57ad4624 74bf6536     .....#.2$F.W6e.t
   10b84:	9dc18c48 bed3af5a dbe5ca6c f8f7e97e     H...Z...l...~...
   10b94:	01081081 221a3393 472c56a5 643e75b7     .....3.".V,G.u>d
   10ba4:	8d409cc9 ae52bfdb cb64daed e876f9ff     ..@...R...d...v.
   10bb4:	308b2102 13990210 76af6726 55bd4434     .!.0....&g.v4D.U
   10bc4:	bcc3ad4a 9fd18e58 fae7eb6e d9f5c87c     J...X...n...|...
   10bd4:	200a3183 03181291 662e77a7 453c54b5     .1. .....w.f.T<E
   10be4:	ac42bdcb 8f509ed9 ea66fbef c974d8fd     ..B...P...f...t.
   10bf4:	538d4204 709f6116 15a90420 36bb2732     .B.S.a.p ...2'.6
   10c04:	dfc5ce4c fcd7ed5e 99e18868 baf3ab7a     L...^...h...z...
   10c14:	430c5285 601e7197 052814a1 263a37b3     .R.C.q.`..(..7:&
   10c24:	cf44decd ec56fddf 896098e9 aa72bbfb     ..D...V...`...r.
   10c34:	728f6306 519d4014 34ab2522 17b90630     .c.r.@.Q"%.40...
   10c44:	fec7ef4e ddd5cc5c b8e3a96a 9bf18a78     N...\...j...x...
   10c54:	620e7387 411c5095 242a35a3 073816b1     .s.b.P.A.5*$..8.
   10c64:	ee46ffcf cd54dcdd a862b9eb 8b709af9     ..F...T...b...p.
   10c74:	95818408 b693a71a d3a5c22c f0b7e13e     ........,...>...
   10c84:	19c90840 3adb2b52 5fed4e64 7cff6d76     @...R+.:dN._vm.|
   10c94:	85009489 a612b79b c324d2ad e036f1bf     ..........$...6.
   10ca4:	094818c1 2a5a3bd3 4f6c5ee5 6c7e7df7     ..H..;Z*.^lO.}~l
   10cb4:	b483a50a 97918618 f2a7e32e d1b5c03c     ............<...
   10cc4:	38cb2942 1bd90a50 7eef6f66 5dfd4c74     B).8P...fo.~tL.]
   10cd4:	a402b58b 87109699 e226f3af c134d0bd     ..........&...4.
   10ce4:	284a39c3 0b581ad1 6e6e7fe7 4d7c5cf5     .9J(..X...nn.\|M
   10cf4:	d785c60c f497e51e 91a18028 b2b3a33a     ........(...:...
   10d04:	5bcd4a44 78df6956 1de90c60 3efb2f72     DJ.[Vi.x`...r/.>
   10d14:	c704d68d e416f59f 812090a9 a232b3bb     .......... ...2.
   10d24:	4b4c5ac5 685e79d7 0d681ce1 2e7a3ff3     .ZLK.y^h..h..?z.
   10d34:	f687e70e d595c41c b0a3a12a 93b18238     ........*...8...
   10d44:	7acf6b46 59dd4854 3ceb2d62 1ff90e70     Fk.zTH.Yb-.<p...
   10d54:	e606f78f c514d49d a022b1ab 833092b9     .........."...0.
   10d64:	6a4e7bc7 495c58d5 2c6a3de3 0f781ef1     .{Nj.X\I.=j,..x.
   10d74:	00707865 74727173 00000066              exp.sqrtf...

00010d80 <halF>:
   10d80:	00000000 3fe00000 00000000 bfe00000     .......?........

00010d90 <ln2HI>:
   10d90:	fee00000 3fe62e42 fee00000 bfe62e42     ....B..?....B...

00010da0 <ln2LO>:
   10da0:	35793c76 3dea39ef 35793c76 bdea39ef     v<y5.9.=v<y5.9..
   10db0:	00008dec 00008dbc 00008dce 00008d10     ................
   10dc0:	00008dce 00008db2 00008dce 00008d10     ................
   10dd0:	00008dbc 00008dbc 00008db2 00008d10     ................
   10de0:	00008d18 00008d18 00008d18 00008dd4     ................
   10df0:	00008dbc 00008dbc 00008d90 00008e74     ............t...
   10e00:	00008d90 00008db2 00008d90 00008e74     ............t...
   10e10:	00008dbc 00008dbc 00008db2 00008e74     ............t...
   10e20:	00008d18 00008d18 00008d18 00008e7e     ............~...
   10e30:	0000916c 000090bc 000090bc 000090ba     l...............
   10e40:	0000915e 0000915e 00009154 000090ba     ^...^...T.......
   10e50:	0000915e 00009154 0000915e 000090ba     ^...T...^.......
   10e60:	00009164 00009164 00009164 000091f4     d...d...d.......
   10e70:	00009f6c 00009f4e 00009f08 00009e26     l...N.......&...
   10e80:	00009f08 00009f40 00009f08 00009e26     ....@.......&...
   10e90:	00009f4e 00009f4e 00009f40 00009e26     N...N...@...&...
   10ea0:	00009e1e 00009e1e 00009e1e 0000a184     ................
   10eb0:	0000a7cc 0000a68c 0000a68c 0000a688     ................
   10ec0:	0000a7a4 0000a7a4 0000a796 0000a688     ................
   10ed0:	0000a7a4 0000a796 0000a7a4 0000a688     ................
   10ee0:	0000a7ac 0000a7ac 0000a7ac 0000a9b0     ................
   10ef0:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
   10f00:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
   10f10:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
   10f20:	20656e69 73256425 000a7325              ine %d%s%s..

00010f2c <_global_impure_ptr>:
   10f2c:	200000b8 49534f50 00000058              ... POSIX...

00010f38 <DAYS_IN_MONTH>:
   10f38:	0000001f 0000001c 0000001f 0000001e     ................
   10f48:	0000001f 0000001e 0000001f 0000001f     ................
   10f58:	0000001e 0000001f 0000001e 0000001f     ................

00010f68 <_DAYS_BEFORE_MONTH>:
   10f68:	00000000 0000001f 0000003b 0000005a     ........;...Z...
   10f78:	00000078 00000097 000000b5 000000d4     x...............
   10f88:	000000f3 00000111 00000130 0000014e     ........0...N...
   10f98:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   10fa8:	464e4900 666e6900 4e414e00 6e616e00     .INF.inf.NAN.nan
   10fb8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   10fc8:	31300046 35343332 39383736 64636261     F.0123456789abcd
   10fd8:	54006665 4d47005a 31250054 305e5b30     ef.TZ.GMT.%10[^0
   10fe8:	2b2c392d 6e255d2d 68254d00 2e6e2575     -9,+-]%n.M%hu%n.
   10ff8:	25756825 68252e6e 006e2575 7568252f     %hu%n.%hu%n./%hu
   11008:	253a6e25 6e257568 7568253a 00006e25              %n:%hu%n:%hu%n.

00011017 <_ctype_>:
   11017:	20202000 20202020 28282020 20282828     .         ((((( 
   11027:	20202020 20202020 20202020 20202020                     
   11037:	10108820 10101010 10101010 10101010      ...............
   11047:	04040410 04040404 10040404 10101010     ................
   11057:	41411010 41414141 01010101 01010101     ..AAAAAA........
   11067:	01010101 01010101 01010101 10101010     ................
   11077:	42421010 42424242 02020202 02020202     ..BBBBBB........
   11087:	02020202 02020202 02020202 10101010     ................
   11097:	00000020 00000000 00000000 00000000      ...............
	...
   11117:	666e4900 74696e69 614e0079 0000004e     .Infinity.NaN...
	...

00011128 <__sf_fake_stderr>:
	...

00011148 <__sf_fake_stdin>:
	...

00011168 <__sf_fake_stdout>:
	...

00011188 <__month_lengths>:
   11188:	0000001f 0000001c 0000001f 0000001e     ................
   11198:	0000001f 0000001e 0000001f 0000001f     ................
   111a8:	0000001e 0000001f 0000001e 0000001f     ................
   111b8:	0000001f 0000001d 0000001f 0000001e     ................
   111c8:	0000001f 0000001e 0000001f 0000001f     ................
   111d8:	0000001e 0000001f 0000001e 0000001f     ................

000111e8 <__mprec_bigtens>:
   111e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   111f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   11208:	7f73bf3c 75154fdd                       <.s..O.u

00011210 <__mprec_tens>:
   11210:	00000000 3ff00000 00000000 40240000     .......?......$@
   11220:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   11230:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   11240:	00000000 412e8480 00000000 416312d0     .......A......cA
   11250:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   11260:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   11270:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   11280:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   11290:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   112a0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   112b0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   112c0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   112d0:	79d99db4 44ea7843                       ...yCx.D

000112d8 <p05.6047>:
   112d8:	00000005 00000019 0000007d 00011302     ........}.......
   112e8:	00011305 00011308 61462d41 3938662d     ........A-Fa-f89
   112f8:	33323130 37363534 2d2b005d 00303000     01234567].+-.00.
   11308:	00005878                                xX..

0001130c <__EH_FRAME_BEGIN__>:
   1130c:	00000000                                ....

Disassembly of section .ramfunc:

00011310 <banzai>:
void banzai() {
   11310:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11312:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
   11314:	4b11      	ldr	r3, [pc, #68]	; (1135c <banzai+0x4c>)
   11316:	4a12      	ldr	r2, [pc, #72]	; (11360 <banzai+0x50>)
   11318:	3304      	adds	r3, #4
   1131a:	4293      	cmp	r3, r2
   1131c:	d808      	bhi.n	11330 <banzai+0x20>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1131e:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
   11322:	4a10      	ldr	r2, [pc, #64]	; (11364 <banzai+0x54>)
   11324:	4b10      	ldr	r3, [pc, #64]	; (11368 <banzai+0x58>)
   11326:	60da      	str	r2, [r3, #12]
   11328:	f3bf 8f4f 	dsb	sy
    __NOP();
   1132c:	46c0      	nop			; (mov r8, r8)
   1132e:	e7fd      	b.n	1132c <banzai+0x1c>
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   11330:	4a0e      	ldr	r2, [pc, #56]	; (1136c <banzai+0x5c>)
	while (!nvmReady())
   11332:	2101      	movs	r1, #1
   11334:	0010      	movs	r0, r2
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   11336:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
   11338:	420c      	tst	r4, r1
   1133a:	d0fc      	beq.n	11336 <banzai+0x26>
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   1133c:	2120      	movs	r1, #32
   1133e:	8b14      	ldrh	r4, [r2, #24]
   11340:	31ff      	adds	r1, #255	; 0xff
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   11342:	089b      	lsrs	r3, r3, #2
   11344:	005b      	lsls	r3, r3, #1
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   11346:	4321      	orrs	r1, r4
   11348:	8311      	strh	r1, [r2, #24]
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   1134a:	61d3      	str	r3, [r2, #28]
          NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
   1134c:	4b08      	ldr	r3, [pc, #32]	; (11370 <banzai+0x60>)
   1134e:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
   11350:	2301      	movs	r3, #1
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   11352:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
   11354:	421a      	tst	r2, r3
   11356:	d0fc      	beq.n	11352 <banzai+0x42>
   11358:	e7e1      	b.n	1131e <banzai+0xe>
   1135a:	46c0      	nop			; (mov r8, r8)
   1135c:	00002000 	.word	0x00002000
   11360:	00000203 	.word	0x00000203
   11364:	05fa0004 	.word	0x05fa0004
   11368:	e000ed00 	.word	0xe000ed00
   1136c:	41004000 	.word	0x41004000
   11370:	ffffa502 	.word	0xffffa502
